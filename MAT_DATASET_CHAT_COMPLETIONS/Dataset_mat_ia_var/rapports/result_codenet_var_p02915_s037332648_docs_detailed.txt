================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:45:10
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def calculate_cube():
    """
    Lit un entier depuis l'entrée standard et affiche son cube.
    
    Fonctionnement :
    1. Demande à l'utilisateur d'entrer un nombre entier.
    2. Calcule le cube (puissance 3) de ce nombre.
    3. Affiche le résultat.
    """
    # Demander un entier à l'utilisateur via l'entrée standard et convertir la saisie en int
    N = int(input())
    
    # Calculer le cube de l'entier renseigné
    result = N ** 3
    
    # Afficher le résultat obtenu
    print(result)

# Appel de la fonction principale pour exécuter la logique du programme
calculate_cube()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' calculate' (ID: 17950)
  → Token d'amorce (pas de prédiction)

Token 2: '_cube' (ID: 171900)
  → Token d'amorce (pas de prédiction)

Token 3: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.009266754612326622
    2. '_' → logprob: -5.1342668533325195
    3. '```' → logprob: -6.1342668533325195
    4. '_cube' → logprob: -7.7592668533325195
    5. '_parent' → logprob: -9.00926685333252
    6. '(_' → logprob: -9.75926685333252
    7. '\(' → logprob: -10.25926685333252
    8. '_(' → logprob: -10.38426685333252
    9. 'def' → logprob: -10.38426685333252
    10. '<|end|>' → logprob: -10.38426685333252

Token 4: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.198641061782837
    2. '\' → logprob: -1.698641061782837
    3. ':' → logprob: -1.823641061782837
    4. '\n' → logprob: -1.948641061782837
    5. '(' → logprob: -2.198641061782837
    6. '```' → logprob: -2.948641061782837
    7. '():' → logprob: -3.823641061782837
    8. '()' → logprob: -5.073640823364258
    9. '(
' → logprob: -5.073640823364258
    10. '    
' → logprob: -5.948640823364258

Token 5: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.31169605255126953
    2. 'return' → logprob: -2.5616960525512695
    3. ' ' → logprob: -2.6866960525512695
    4. 'a' → logprob: -3.5616960525512695
    5. 'n' → logprob: -3.8116960525512695
    6. 'x' → logprob: -4.0616960525512695
    7. '    ' → logprob: -4.1866960525512695
    8. 'r' → logprob: -4.4366960525512695
    9. 'c' → logprob: -4.8116960525512695
    10. '```' → logprob: -4.8116960525512695

Token 6: '   ' (ID: 271)
  Prédit: 'Calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Calculate' → logprob: -0.13721995055675507
    2. '   ' → logprob: -3.1372199058532715
    3. '"""' → logprob: -3.2622199058532715
    4. 'Calcul' → logprob: -3.3872199058532715
    5. 'Returns' → logprob: -5.1372199058532715
    6. ' Calculates' → logprob: -6.1372199058532715
    7. ' Calculate' → logprob: -6.8872199058532715
    8. ''''' → logprob: -7.1372199058532715
    9. 'Compute' → logprob: -7.5122199058532715
    10. 'Return' → logprob: -7.6372199058532715

Token 7: ' Lit' (ID: 45595)
  Prédit: 'Calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Calculate' → logprob: -0.3237338662147522
    2. 'Calcul' → logprob: -1.3237338066101074
    3. '   ' → logprob: -5.323733806610107
    4. 'Returns' → logprob: -5.448733806610107
    5. 'Return' → logprob: -7.448733806610107
    6. '"""' → logprob: -8.573734283447266
    7. ' Calculates' → logprob: -8.698734283447266
    8. 'Compute' → logprob: -9.448734283447266
    9. ' Calculate' → logprob: -9.948734283447266
    10. 'Calc' → logprob: -10.698734283447266

Token 8: ' un' (ID: 537)
  Prédit: 'er'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.29948753118515015
    2. 'ral' → logprob: -2.424487590789795
    3. '   ' → logprob: -2.674487590789795
    4. 'eral' → logprob: -2.924487590789795
    5. 'rate' → logprob: -3.924487590789795
    6. 'r' → logprob: -4.924487590789795
    7. '  ' → logprob: -5.799487590789795
    8. 'tle' → logprob: -6.049487590789795
    9. 'e' → logprob: -6.174487590789795
    10. 'ers' → logprob: -6.174487590789795

Token 9: ' entier' (ID: 80473)
  Prédit: ' nombre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -1.0381369590759277
    2. 'e' → logprob: -1.1631369590759277
    3. 'nombre' → logprob: -1.2881369590759277
    4. 'n' → logprob: -3.5381369590759277
    5. ' ' → logprob: -4.913136959075928
    6. '   ' → logprob: -5.663136959075928
    7. ' entier' → logprob: -5.663136959075928
    8. '_nombre' → logprob: -5.913136959075928
    9. ' e' → logprob: -6.288136959075928
    10. ' number' → logprob: -6.538136959075928

Token 10: ' depuis' (ID: 16277)
  Prédit: ' et'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' et' → logprob: -0.7766585350036621
    2. ' ' → logprob: -1.776658535003662
    3. '   ' → logprob: -2.026658535003662
    4. ' de' → logprob: -3.651658535003662
    5. ',' → logprob: -3.901658535003662
    6. ' en' → logprob: -3.901658535003662
    7. 'u' → logprob: -4.151658535003662
    8. '\' → logprob: -4.151658535003662
    9. '\n' → logprob: -4.401658535003662
    10. 'e' → logprob: -4.651658535003662

Token 11: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.6748104691505432
    2. ' input' → logprob: -1.0498104095458984
    3. 'input' → logprob: -2.2998104095458984
    4. ' l' → logprob: -3.4248104095458984
    5. '   ' → logprob: -4.924810409545898
    6. ' stdin' → logprob: -9.174810409545898
    7. '```' → logprob: -9.424810409545898
    8. 'le' → logprob: -9.549810409545898
    9. ' ' → logprob: -9.924810409545898
    10. 'entrée' → logprob: -10.049810409545898

Token 12: ''entrée' (ID: 115820)
  Prédit: ''entrée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''entrée' → logprob: -0.08690700680017471
    2. 'entrée' → logprob: -3.211906909942627
    3. 'input' → logprob: -3.836906909942627
    4. 'a' → logprob: -4.336906909942627
    5. 'e' → logprob: -5.461906909942627
    6. ''' → logprob: -5.961906909942627
    7. ''utilisateur' → logprob: -7.336906909942627
    8. ''ent' → logprob: -8.711907386779785
    9. ' input' → logprob: -8.961907386779785
    10. 'es' → logprob: -9.086907386779785

Token 13: ' standard' (ID: 7024)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5179105997085571
    2. ',' → logprob: -1.5179105997085571
    3. ' et' → logprob: -2.8929104804992676
    4. 'e' → logprob: -4.142910480499268
    5. '`' → logprob: -4.642910480499268
    6. '\' → logprob: -4.767910480499268
    7. '.' → logprob: -4.767910480499268
    8. ')' → logprob: -4.767910480499268
    9. '```' → logprob: -4.767910480499268
    10. 'def' → logprob: -4.892910480499268

Token 14: ' et' (ID: 859)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06569109857082367
    2. '\n' → logprob: -2.8156909942626953
    3. '    ' → logprob: -6.815690994262695
    4. ',' → logprob: -7.815690994262695
    5. '    
' → logprob: -7.940690994262695
    6. ' ' → logprob: -8.190690994262695
    7. '\' → logprob: -8.440690994262695
    8. '"""' → logprob: -8.440690994262695
    9. 'def' → logprob: -8.940690994262695
    10. ')' → logprob: -8.940690994262695

Token 15: ' affiche' (ID: 127479)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7924522161483765
    2. ' retourne' → logprob: -1.0424522161483765
    3. ' ren' → logprob: -2.417452335357666
    4. ' calc' → logprob: -2.542452335357666
    5. ' return' → logprob: -4.542452335357666
    6. 'cal' → logprob: -5.542452335357666
    7. 'ren' → logprob: -5.792452335357666
    8. 'return' → logprob: -6.042452335357666
    9. ' calcul' → logprob: -6.542452335357666
    10. 'calcul' → logprob: -6.917452335357666

Token 16: ' son' (ID: 2391)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.111470103263855
    2. 's' → logprob: -1.486470103263855
    3. ' l' → logprob: -1.861470103263855
    4. ' le' → logprob: -2.2364702224731445
    5. 'l' → logprob: -2.8614702224731445
    6. '   ' → logprob: -2.8614702224731445
    7. ' son' → logprob: -3.9864702224731445
    8. '    ' → logprob: -4.2364702224731445
    9. '  ' → logprob: -4.6114702224731445
    10. 'le' → logprob: -5.2364702224731445

Token 17: ' cube' (ID: 46822)
  Prédit: ' cube'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cube' → logprob: -1.0359320640563965
    2. ' ' → logprob: -1.4109320640563965
    3. 'cube' → logprob: -1.9109320640563965
    4. ' **' → logprob: -2.1609320640563965
    5. '```' → logprob: -2.9109320640563965
    6. 'c' → logprob: -3.7859320640563965
    7. '**' → logprob: -4.2859320640563965
    8. ' ' → logprob: -4.5359320640563965
    9. '³' → logprob: -4.6609320640563965
    10. '   ' → logprob: -4.9109320640563965

Token 18: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.48532864451408386
    2. '\n' → logprob: -0.9853286743164062
    3. '
' → logprob: -6.235328674316406
    4. '.' → logprob: -6.485328674316406
    5. '\' → logprob: -6.485328674316406
    6. '```' → logprob: -6.485328674316406
    7. '"""' → logprob: -6.735328674316406
    8. '    
' → logprob: -6.735328674316406
    9. '"""
' → logprob: -7.235328674316406
    10. '  
' → logprob: -8.485328674316406

Token 19: '    
' (ID: 1944)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.008680401369929314
    2. '\n' → logprob: -5.38368034362793
    3. '"""' → logprob: -6.00868034362793
    4. '    
' → logprob: -7.88368034362793
    5. '```' → logprob: -7.88368034362793
    6. ')' → logprob: -9.00868034362793
    7. '\' → logprob: -9.00868034362793
    8. 'n' → logprob: -9.00868034362793
    9. '
' → logprob: -9.25868034362793
    10. '"' → logprob: -9.50868034362793

Token 20: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0008921671542339027
    2. 'n' → logprob: -8.000892639160156
    3. '    ' → logprob: -8.750892639160156
    4. 'def' → logprob: -9.375892639160156
    5. ' ' → logprob: -9.750892639160156
    6. '"""' → logprob: -9.750892639160156
    7. 'input' → logprob: -9.875892639160156
    8. '```' → logprob: -10.000892639160156
    9. '  ' → logprob: -11.000892639160156
    10. 'x' → logprob: -11.500892639160156

Token 21: ' Fonction' (ID: 189149)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13891634345054626
    2. 'n' → logprob: -2.138916254043579
    3. 'x' → logprob: -5.513916492462158
    4. '"""' → logprob: -6.138916492462158
    5. 'ent' → logprob: -6.513916492462158
    6. ' ' → logprob: -6.763916492462158
    7. 'e' → logprob: -7.263916492462158
    8. 'value' → logprob: -7.638916492462158
    9. '```' → logprob: -7.888916492462158
    10. 'r' → logprob: -8.013916015625

Token 22: 'nement' (ID: 15738)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.025599757209420204
    2. ' calculate' → logprob: -5.525599956512451
    3. ' """
' → logprob: -5.525599956512451
    4. 'def' → logprob: -5.650599956512451
    5. '    ' → logprob: -5.650599956512451
    6. '    
' → logprob: -6.275599956512451
    7. ' """' → logprob: -6.650599956512451
    8. 'n' → logprob: -7.275599956512451
    9. '"""' → logprob: -7.275599956512451
    10. ' ' → logprob: -7.400599956512451

Token 23: ' :
' (ID: 10039)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2930506467819214
    2. '.' → logprob: -2.418050765991211
    3. ' :' → logprob: -2.793050765991211
    4. ' de' → logprob: -3.293050765991211
    5. 'de' → logprob: -4.168050765991211
    6. ',' → logprob: -4.793050765991211
    7. ':' → logprob: -4.918050765991211
    8. 'def' → logprob: -5.043050765991211
    9. '```' → logprob: -5.043050765991211
    10. ' du' → logprob: -5.293050765991211

Token 24: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03350183740258217
    2. '    ' → logprob: -3.5335018634796143
    3. ' reads' → logprob: -7.283501625061035
    4. ' Lire' → logprob: -7.533501625061035
    5. ' lire' → logprob: -7.783501625061035
    6. 'def' → logprob: -7.908501625061035
    7. ' ' → logprob: -8.283501625061035
    8. 'Lire' → logprob: -8.283501625061035
    9. '       ' → logprob: -8.408501625061035
    10. '```' → logprob: -9.158501625061035

Token 25: ' ' (ID: 220)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.011681566014885902
    2. '    ' → logprob: -5.01168155670166
    3. ' """' → logprob: -6.63668155670166
    4. ' ' → logprob: -7.51168155670166
    5. '"""' → logprob: -8.01168155670166
    6. '```' → logprob: -8.01168155670166
    7. ' Lire' → logprob: -8.38668155670166
    8. ' """
' → logprob: -8.38668155670166
    9. ' ' → logprob: -8.76168155670166
    10. 'r' → logprob: -8.76168155670166

Token 26: '1' (ID: 16)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02214515209197998
    2. '    ' → logprob: -4.3971452713012695
    3. 'l' → logprob: -6.2721452713012695
    4. '```' → logprob: -6.8971452713012695
    5. ' Lire' → logprob: -7.0221452713012695
    6. ' L' → logprob: -7.5221452713012695
    7. ' ' → logprob: -7.6471452713012695
    8. ' """
' → logprob: -7.6471452713012695
    9. 'def' → logprob: -7.7721452713012695
    10. '  ' → logprob: -8.02214527130127

Token 27: '.' (ID: 13)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.26291921734809875
    2. '.' → logprob: -1.7629191875457764
    3. ' ' → logprob: -4.0129194259643555
    4. '    ' → logprob: -4.1379194259643555
    5. ')' → logprob: -5.0129194259643555
    6. '-' → logprob: -5.5129194259643555
    7. 'def' → logprob: -5.7629194259643555
    8. '  ' → logprob: -6.2629194259643555
    9. 'l' → logprob: -6.5129194259643555
    10. ' Lire' → logprob: -6.6379194259643555

Token 28: ' Dem' (ID: 9458)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3949105739593506
    2. 'l' → logprob: -2.2699105739593506
    3. 'r' → logprob: -2.6449105739593506
    4. 'e' → logprob: -2.8949105739593506
    5. 'n' → logprob: -3.7699105739593506
    6. ' ' → logprob: -3.8949105739593506
    7. 's' → logprob: -5.01991081237793
    8. 'i' → logprob: -5.76991081237793
    9. 'c' → logprob: -5.76991081237793
    10. 'x' → logprob: -6.01991081237793

Token 29: 'ande' (ID: 4102)
  Prédit: 'ande'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ande' → logprob: -0.694129228591919
    2. 'and' → logprob: -0.819129228591919
    3. 'a' → logprob: -3.194129228591919
    4. 'an' → logprob: -4.81912899017334
    5. '   ' → logprob: -5.81912899017334
    6. 'ander' → logprob: -5.81912899017334
    7. 'e' → logprob: -5.94412899017334
    8. 'ar' → logprob: -6.56912899017334
    9. ' and' → logprob: -9.06912899017334
    10. 'andez' → logprob: -9.44412899017334

Token 30: ' à' (ID: 1221)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5537500381469727
    2. ' à' → logprob: -0.9287500381469727
    3. '   ' → logprob: -4.053750038146973
    4. ' a' → logprob: -5.303750038146973
    5. ' un' → logprob: -6.303750038146973
    6. ' de' → logprob: -6.803750038146973
    7. 'à' → logprob: -7.053750038146973
    8. '  ' → logprob: -7.303750038146973
    9. ' une' → logprob: -7.428750038146973
    10. '    ' → logprob: -7.928750038146973

Token 31: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.31524449586868286
    2. ' l' → logprob: -1.315244436264038
    3. ' ' → logprob: -6.565244674682617
    4. '	l' → logprob: -8.690244674682617
    5. '   ' → logprob: -8.815244674682617
    6. ' user' → logprob: -9.690244674682617
    7. ' ' → logprob: -9.690244674682617
    8. '  ' → logprob: -10.815244674682617
    9. 'user' → logprob: -11.065244674682617
    10. 'n' → logprob: -11.190244674682617

Token 32: ''utilisateur' (ID: 140803)
  Prédit: ''utilisateur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''utilisateur' → logprob: -0.17866988480091095
    2. ''' → logprob: -2.1786699295043945
    3. 'e' → logprob: -3.1786699295043945
    4. 'u' → logprob: -5.6786699295043945
    5. ''entrée' → logprob: -6.9286699295043945
    6. '’utilisateur' → logprob: -7.0536699295043945
    7. ''us' → logprob: -7.1786699295043945
    8. 'a' → logprob: -7.5536699295043945
    9. ''u' → logprob: -7.6786699295043945
    10. ' '' → logprob: -7.9286699295043945

Token 33: ' d' (ID: 272)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.7898991703987122
    2. '   ' → logprob: -1.0398991107940674
    3. ' d' → logprob: -2.5398991107940674
    4. ' ' → logprob: -3.1648991107940674
    5. ' à' → logprob: -3.9148991107940674
    6. ' un' → logprob: -4.5398993492126465
    7. ' une' → logprob: -4.5398993492126465
    8. '    ' → logprob: -4.6648993492126465
    9. ' )' → logprob: -5.7898993492126465
    10. 'd' → logprob: -5.7898993492126465

Token 34: ''' (ID: 6)
  Prédit: '''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.1653248816728592
    2. 'e' → logprob: -1.9153249263763428
    3. ' ' → logprob: -5.915324687957764
    4. 'a' → logprob: -7.040324687957764
    5. ' '' → logprob: -7.665324687957764
    6. ' e' → logprob: -8.665325164794922
    7. ''ent' → logprob: -8.665325164794922
    8. 'u' → logprob: -8.790325164794922
    9. ''entrée' → logprob: -8.790325164794922
    10. '  ' → logprob: -10.165325164794922

Token 35: 'entr' (ID: 12792)
  Prédit: 'entr'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'entr' → logprob: -0.1121336966753006
    2. 'ent' → logprob: -2.987133741378784
    3. ''' → logprob: -3.737133741378784
    4. 'entrée' → logprob: -3.987133741378784
    5. 'e' → logprob: -5.737133502960205
    6. 's' → logprob: -6.112133502960205
    7. ''ent' → logprob: -6.362133502960205
    8. 'un' → logprob: -6.737133502960205
    9. 'input' → logprob: -6.862133502960205
    10. 'a' → logprob: -7.237133502960205

Token 36: 'er' (ID: 259)
  Prédit: 'er'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.030167896300554276
    2. 'e' → logprob: -3.530167818069458
    3. 'ée' → logprob: -8.655167579650879
    4. 'é' → logprob: -9.280167579650879
    5. 'eer' → logprob: -9.530167579650879
    6. 'erer' → logprob: -10.405167579650879
    7. 'éer' → logprob: -10.655167579650879
    8. '   ' → logprob: -12.030167579650879
    9. 'erp' → logprob: -12.530167579650879
    10. 'er's' → logprob: -13.905167579650879

Token 37: ' un' (ID: 537)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5536399483680725
    2. ' un' → logprob: -0.9286399483680725
    3. '   ' → logprob: -4.303639888763428
    4. 'un' → logprob: -4.803639888763428
    5. ' l' → logprob: -5.678639888763428
    6. '  ' → logprob: -6.678639888763428
    7. '    ' → logprob: -6.803639888763428
    8. 'l' → logprob: -6.803639888763428
    9. ' a' → logprob: -8.053640365600586
    10. ' une' → logprob: -8.303640365600586

Token 38: ' nombre' (ID: 9733)
  Prédit: ' entier'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' entier' → logprob: -0.12083693593740463
    2. ' nombre' → logprob: -2.9958369731903076
    3. ' ' → logprob: -3.2458369731903076
    4. 'ent' → logprob: -4.1208367347717285
    5. 'e' → logprob: -5.3708367347717285
    6. 'nombre' → logprob: -5.8708367347717285
    7. ' ent' → logprob: -7.8708367347717285
    8. '   ' → logprob: -8.245837211608887
    9. ' e' → logprob: -9.370837211608887
    10. ' ' → logprob: -9.745837211608887

Token 39: ' entier' (ID: 80473)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.40825948119163513
    2. ' ' → logprob: -1.9082595109939575
    3. ' )' → logprob: -2.658259391784668
    4. '.' → logprob: -3.158259391784668
    5. ',' → logprob: -4.283259391784668
    6. ')' → logprob: -4.283259391784668
    7. 'e' → logprob: -4.408259391784668
    8. ' ,' → logprob: -5.283259391784668
    9. ' `' → logprob: -5.283259391784668
    10. '"' → logprob: -6.033259391784668

Token 40: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4137977063655853
    2. '.' → logprob: -1.4137977361679077
    3. ',' → logprob: -3.163797616958618
    4. ')' → logprob: -4.288797855377197
    5. ' )' → logprob: -4.663797855377197
    6. ':' → logprob: -4.788797855377197
    7. ' ' → logprob: -5.038797855377197
    8. 'e' → logprob: -5.288797855377197
    9. ' :' → logprob: -6.788797855377197
    10. '"' → logprob: -7.038797855377197

Token 41: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.007513988297432661
    2. ' ' → logprob: -6.507513999938965
    3. '\n' → logprob: -6.507513999938965
    4. '    ' → logprob: -7.132513999938965
    5. '\' → logprob: -7.257513999938965
    6. '```' → logprob: -7.382513999938965
    7. 'n' → logprob: -7.632513999938965
    8. ')' → logprob: -7.882513999938965
    9. '    
' → logprob: -7.882513999938965
    10. '"""' → logprob: -8.132513999938965

Token 42: ' ' (ID: 220)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.027590671554207802
    2. ' ' → logprob: -4.277590751647949
    3. '    ' → logprob: -5.152590751647949
    4. ')' → logprob: -6.652590751647949
    5. ' )' → logprob: -6.777590751647949
    6. 'n' → logprob: -6.902590751647949
    7. '\' → logprob: -7.152590751647949
    8. '"' → logprob: -7.402590751647949
    9. '```' → logprob: -7.527590751647949
    10. '    
' → logprob: -7.902590751647949

Token 43: '2' (ID: 17)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.6686581373214722
    2. '   ' → logprob: -1.4186581373214722
    3. ' ' → logprob: -2.0436582565307617
    4. ')' → logprob: -3.1686582565307617
    5. '"""' → logprob: -4.168658256530762
    6. 'r' → logprob: -4.668658256530762
    7. 'e' → logprob: -4.918658256530762
    8. 'i' → logprob: -5.043658256530762
    9. '```' → logprob: -5.168658256530762
    10. ' )' → logprob: -5.293658256530762

Token 44: '.' (ID: 13)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1644028276205063
    2. '.' → logprob: -1.9144028425216675
    3. ')' → logprob: -6.289402961730957
    4. ' ' → logprob: -7.164402961730957
    5. ':' → logprob: -7.414402961730957
    6. ',' → logprob: -8.414402961730957
    7. '  ' → logprob: -8.914402961730957
    8. 'def' → logprob: -9.039402961730957
    9. 'n' → logprob: -9.039402961730957
    10. '    ' → logprob: -9.289402961730957

Token 45: ' Cal' (ID: 4453)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.3422527015209198
    2. '   ' → logprob: -1.8422527313232422
    3. 'try' → logprob: -3.717252731323242
    4. 'e' → logprob: -3.717252731323242
    5. ' try' → logprob: -3.717252731323242
    6. 'value' → logprob: -4.842252731323242
    7. ' n' → logprob: -4.842252731323242
    8. 'i' → logprob: -5.342252731323242
    9. ' value' → logprob: -5.467252731323242
    10. 'r' → logprob: -5.467252731323242

Token 46: 'cule' (ID: 45017)
  Prédit: 'cule'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cule' → logprob: -0.031995490193367004
    2. 'cul' → logprob: -3.7819955348968506
    3. 'c' → logprob: -4.7819952964782715
    4. 'culate' → logprob: -9.03199577331543
    5. 'cula' → logprob: -9.28199577331543
    6. 'cu' → logprob: -9.90699577331543
    7. '```' → logprob: -10.78199577331543
    8. 'cules' → logprob: -11.15699577331543
    9. '   ' → logprob: -12.40699577331543
    10. '\' → logprob: -13.03199577331543

Token 47: ' le' (ID: 505)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0642329454421997
    2. ' le' → logprob: -1.1892329454421997
    3. 'le' → logprob: -2.06423282623291
    4. ' l' → logprob: -2.56423282623291
    5. 's' → logprob: -3.06423282623291
    6. 'l' → logprob: -3.18923282623291
    7. '  ' → logprob: -4.43923282623291
    8. '```' → logprob: -4.68923282623291
    9. ' ' → logprob: -5.06423282623291
    10. '    ' → logprob: -5.18923282623291

Token 48: ' cube' (ID: 46822)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1682807207107544
    2. ' cube' → logprob: -1.9182807207107544
    3. 'cube' → logprob: -4.918280601501465
    4. 'c' → logprob: -9.168280601501465
    5. ' ```' → logprob: -9.168280601501465
    6. '  ' → logprob: -9.418280601501465
    7. ' ' → logprob: -9.418280601501465
    8. '   ' → logprob: -9.793280601501465
    9. '```' → logprob: -10.168280601501465
    10. '_cube' → logprob: -10.293280601501465

Token 49: ' (' (ID: 350)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6164623498916626
    2. '   ' → logprob: -1.1164623498916626
    3. ' de' → logprob: -3.366462230682373
    4. 'd' → logprob: -3.616462230682373
    5. '(' → logprob: -3.866462230682373
    6. '    ' → logprob: -4.616462230682373
    7. 'de' → logprob: -4.866462230682373
    8. '  ' → logprob: -5.241462230682373
    9. ')' → logprob: -5.491462230682373
    10. ' )' → logprob: -5.491462230682373

Token 50: 'pu' (ID: 5112)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.2838139533996582
    2. ' de' → logprob: -1.7838139533996582
    3. 'de' → logprob: -3.158813953399658
    4. ' )' → logprob: -4.533813953399658
    5. ' du' → logprob: -4.533813953399658
    6. 'du' → logprob: -4.533813953399658
    7. '   ' → logprob: -6.658813953399658
    8. 'n' → logprob: -6.658813953399658
    9. 'd' → logprob: -8.0338134765625
    10. '```' → logprob: -8.0338134765625

Token 51: 'issance' (ID: 17968)
  Prédit: 'issance'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'issance' → logprob: -0.3494722247123718
    2. 'i' → logprob: -1.4744722843170166
    3. 'iss' → logprob: -3.5994722843170166
    4. '**' → logprob: -3.7244722843170166
    5. 'is' → logprob: -5.5994720458984375
    6. 'issant' → logprob: -5.9744720458984375
    7. 'ls' → logprob: -6.0994720458984375
    8. 'issante' → logprob: -6.7244720458984375
    9. 'issan' → logprob: -6.8494720458984375
    10. 'issage' → logprob: -7.4744720458984375

Token 52: ' ' (ID: 220)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.19790753722190857
    2. '³' → logprob: -2.4479074478149414
    3. ' de' → logprob: -3.6979074478149414
    4. '**' → logprob: -3.6979074478149414
    5. ' **' → logprob: -4.447907447814941
    6. '```' → logprob: -4.572907447814941
    7. ' ' → logprob: -5.197907447814941
    8. ')' → logprob: -5.322907447814941
    9. 'de' → logprob: -5.322907447814941
    10. ' )' → logprob: -6.072907447814941

Token 53: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.024564363062381744
    2. 'de' → logprob: -4.149564266204834
    3. ' ' → logprob: -5.524564266204834
    4. ' de' → logprob: -6.399564266204834
    5. '³' → logprob: -6.399564266204834
    6. '```' → logprob: -7.899564266204834
    7. '**' → logprob: -8.274564743041992
    8. ')' → logprob: -8.649564743041992
    9. ' **' → logprob: -9.399564743041992
    10. '   ' → logprob: -9.774564743041992

Token 54: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.016075192019343376
    2. ' )' → logprob: -4.266075134277344
    3. ' de' → logprob: -7.641075134277344
    4. ')**' → logprob: -8.016075134277344
    5. '**' → logprob: -8.016075134277344
    6. 'e' → logprob: -8.266075134277344
    7. '   ' → logprob: -9.016075134277344
    8. 'de' → logprob: -9.141075134277344
    9. ' ' → logprob: -9.391075134277344
    10. '```' → logprob: -10.391075134277344

Token 55: ' de' (ID: 334)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.060531601309776306
    2. ' de' → logprob: -3.1855316162109375
    3. ' ' → logprob: -5.1855316162109375
    4. ')' → logprob: -5.8105316162109375
    5. ' du' → logprob: -6.0605316162109375
    6. '    
' → logprob: -6.6855316162109375
    7. '    ' → logprob: -7.1855316162109375
    8. ' )' → logprob: -7.1855316162109375
    9. '  ' → logprob: -7.1855316162109375
    10. 'de' → logprob: -7.4355316162109375

Token 56: ' ce' (ID: 2357)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1591053456068039
    2. ' l' → logprob: -2.5341053009033203
    3. 'l' → logprob: -3.0341053009033203
    4. ' ce' → logprob: -4.65910530090332
    5. ' cet' → logprob: -5.78410530090332
    6. '   ' → logprob: -6.15910530090332
    7. ' )' → logprob: -6.78410530090332
    8. 'c' → logprob: -7.40910530090332
    9. 'cet' → logprob: -7.65910530090332
    10. 'n' → logprob: -7.65910530090332

Token 57: ' nombre' (ID: 9733)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7285425662994385
    2. ' nombre' → logprob: -0.7285425662994385
    3. 'nombre' → logprob: -3.7285425662994385
    4. 'n' → logprob: -4.853542327880859
    5. ' dernier' → logprob: -6.353542327880859
    6. ' ' → logprob: -8.22854232788086
    7. ' nombres' → logprob: -8.85354232788086
    8. '_' → logprob: -9.22854232788086
    9. ' n' → logprob: -9.22854232788086
    10. '_nombre' → logprob: -9.35354232788086

Token 58: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.21801984310150146
    2. '.' → logprob: -1.9680198431015015
    3. '    
' → logprob: -3.843019962310791
    4. '\' → logprob: -3.968019962310791
    5. ')' → logprob: -5.968019962310791
    6. ' ' → logprob: -6.093019962310791
    7. ',' → logprob: -6.593019962310791
    8. '\n' → logprob: -6.718019962310791
    9. '   
' → logprob: -6.843019962310791
    10. '  
' → logprob: -7.343019962310791

Token 59: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0023231988307088614
    2. '"""' → logprob: -7.502323150634766
    3. '    
' → logprob: -8.127323150634766
    4. '\' → logprob: -8.127323150634766
    5. '"' → logprob: -8.252323150634766
    6. '    ' → logprob: -8.502323150634766
    7. '```' → logprob: -8.627323150634766
    8. '\n' → logprob: -8.752323150634766
    9. '  ' → logprob: -9.627323150634766
    10. ')' → logprob: -10.002323150634766

Token 60: ' ' (ID: 220)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0010569837177172303
    2. '"""' → logprob: -7.876057147979736
    3. '"' → logprob: -8.501056671142578
    4. '    
' → logprob: -9.251056671142578
    5. '    ' → logprob: -9.251056671142578
    6. '  ' → logprob: -9.751056671142578
    7. '```' → logprob: -9.751056671142578
    8. '\' → logprob: -10.626056671142578
    9. '`' → logprob: -11.001056671142578
    10. '4' → logprob: -11.126056671142578

Token 61: '3' (ID: 18)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0023809997364878654
    2. '"""' → logprob: -6.752380847930908
    3. '    ' → logprob: -7.377380847930908
    4. '```' → logprob: -9.502381324768066
    5. ')' → logprob: -9.627381324768066
    6. '  ' → logprob: -9.627381324768066
    7. '`' → logprob: -9.877381324768066
    8. '\' → logprob: -9.877381324768066
    9. '       ' → logprob: -10.002381324768066
    10. ' ' → logprob: -10.002381324768066

Token 62: '.' (ID: 13)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00028016636497341096
    2. '    ' → logprob: -9.875280380249023
    3. ')' → logprob: -10.000280380249023
    4. '  ' → logprob: -10.125280380249023
    5. '.' → logprob: -10.625280380249023
    6. '```' → logprob: -10.625280380249023
    7. ' ' → logprob: -11.000280380249023
    8. '   ' → logprob: -11.250280380249023
    9. 'def' → logprob: -11.500280380249023
    10. '	' → logprob: -11.625280380249023

Token 63: ' Aff' (ID: 13741)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02292630635201931
    2. ' return' → logprob: -4.272926330566406
    3. 'r' → logprob: -5.772926330566406
    4. 'return' → logprob: -6.397926330566406
    5. 'R' → logprob: -7.397926330566406
    6. ' """' → logprob: -7.397926330566406
    7. '"""' → logprob: -8.147926330566406
    8. ' print' → logprob: -8.147926330566406
    9. 'p' → logprob: -8.522926330566406
    10. '  ' → logprob: -8.647926330566406

Token 64: 'iche' (ID: 7509)
  Prédit: 'iche'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iche' → logprob: -0.013313988223671913
    2. 'ic' → logprob: -4.3883137702941895
    3. 'i' → logprob: -7.5133137702941895
    4. 'ich' → logprob: -9.388314247131348
    5. 'ichage' → logprob: -9.388314247131348
    6. '   ' → logprob: -10.388314247131348
    7. 'che' → logprob: -11.138314247131348
    8. '\' → logprob: -11.763314247131348
    9. '#' → logprob: -12.263314247131348
    10. 'icher' → logprob: -12.388314247131348

Token 65: ' le' (ID: 505)
  Prédit: ' le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.21353507041931152
    2. '(' → logprob: -2.9635350704193115
    3. ' ' → logprob: -3.2135350704193115
    4. 'le' → logprob: -3.7135350704193115
    5. ' (' → logprob: -4.088535308837891
    6. ' l' → logprob: -4.338535308837891
    7. '   ' → logprob: -4.588535308837891
    8. ' la' → logprob: -4.838535308837891
    9. '    ' → logprob: -5.213535308837891
    10. 'l' → logprob: -5.338535308837891

Token 66: ' résultat' (ID: 62556)
  Prédit: ' cube'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cube' → logprob: -0.1115533858537674
    2. ' résultat' → logprob: -2.486553430557251
    3. ' result' → logprob: -4.736553192138672
    4. ' ' → logprob: -4.861553192138672
    5. ' resultat' → logprob: -5.611553192138672
    6. 'cube' → logprob: -6.736553192138672
    7. '   ' → logprob: -8.236553192138672
    8. 'rés' → logprob: -8.361553192138672
    9. ' cub' → logprob: -8.986553192138672
    10. 'result' → logprob: -9.361553192138672

Token 67: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.015085923485457897
    2. '"""' → logprob: -4.890085697174072
    3. '\n' → logprob: -5.265085697174072
    4. ')' → logprob: -7.140085697174072
    5. '```' → logprob: -7.265085697174072
    6. '"' → logprob: -8.76508617401123
    7. '.' → logprob: -8.76508617401123
    8. '    
' → logprob: -9.26508617401123
    9. '`' → logprob: -9.39008617401123
    10. '\' → logprob: -10.01508617401123

Token 68: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2538979649543762
    2. '"""' → logprob: -1.5038979053497314
    3. '```' → logprob: -7.2538981437683105
    4. '"' → logprob: -7.3788981437683105
    5. '"""
' → logprob: -7.8788981437683105
    6. '""' → logprob: -9.003897666931152
    7. ' """' → logprob: -10.378897666931152
    8. '`' → logprob: -10.753897666931152
    9. '  ' → logprob: -10.753897666931152
    10. '    ' → logprob: -11.003897666931152

Token 69: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.20184120535850525
    2. '"""' → logprob: -1.7018412351608276
    3. '""' → logprob: -9.076841354370117
    4. '```' → logprob: -9.201841354370117
    5. '"""
' (adapté à ' """
') → logprob: -9.326841354370117
    6. '"' → logprob: -9.576841354370117
    7. '    ' → logprob: -10.826841354370117
    8. ' """' → logprob: -11.826841354370117
    9. 'def' → logprob: -12.076841354370117
    10. '  ' → logprob: -12.076841354370117

Token 70: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.002947393571957946
    2. 'n' → logprob: -6.1279473304748535
    3. '    
' → logprob: -8.002947807312012
    4. '
' → logprob: -8.502947807312012
    5. '\n' → logprob: -8.752947807312012
    6. 'input' → logprob: -11.252947807312012
    7. 'number' → logprob: -11.877947807312012
    8. '```' → logprob: -12.127947807312012
    9. 'try' → logprob: -12.252947807312012
    10. '    ' → logprob: -12.252947807312012

Token 71: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5818457007408142
    2. 'n' → logprob: -0.8318457007408142
    3. 'number' → logprob: -6.331845760345459
    4. 'try' → logprob: -7.206845760345459
    5. '    
' → logprob: -7.206845760345459
    6. '\n' → logprob: -7.581845760345459
    7. 'x' → logprob: -8.0818452835083
    8. 'user' → logprob: -8.3318452835083
    9. ' ' → logprob: -8.5818452835083
    10. 'num' → logprob: -8.5818452835083

Token 72: ' Dem' (ID: 9458)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.286864310503006
    2. 'number' → logprob: -2.4118642807006836
    3. ' number' → logprob: -2.5368642807006836
    4. ' n' → logprob: -3.4118642807006836
    5. '   ' → logprob: -3.5368642807006836
    6. 'nombre' → logprob: -4.661864280700684
    7. 'num' → logprob: -6.036864280700684
    8. 'input' → logprob: -6.286864280700684
    9. ' nombre' → logprob: -6.786864280700684
    10. ' input' → logprob: -7.286864280700684

Token 73: 'ander' (ID: 9330)
  Prédit: 'ande'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ande' → logprob: -0.5855365991592407
    2. 'and' → logprob: -1.3355365991592407
    3. 'ander' → logprob: -2.335536479949951
    4. 'a' → logprob: -3.085536479949951
    5. 'an' → logprob: -3.585536479949951
    6. '   ' → logprob: -5.710536479949951
    7. 'andez' → logprob: -5.835536479949951
    8. 'e' → logprob: -7.210536479949951
    9. 'ar' → logprob: -7.335536479949951
    10. '       ' → logprob: -8.08553695678711

Token 74: ' un' (ID: 537)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6348040103912354
    2. ' ' → logprob: -0.8848040103912354
    3. ' à' → logprob: -3.8848040103912354
    4. ' un' → logprob: -4.384803771972656
    5. 'n' → logprob: -5.134803771972656
    6. '  ' → logprob: -5.634803771972656
    7. ' a' → logprob: -6.134803771972656
    8. '    ' → logprob: -6.134803771972656
    9. ' )' → logprob: -6.259803771972656
    10. 'un' → logprob: -7.134803771972656

Token 75: ' entier' (ID: 80473)
  Prédit: ' nombre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.6601904034614563
    2. ' ' → logprob: -1.5351903438568115
    3. ' entier' → logprob: -1.9101903438568115
    4. 'nombre' → logprob: -2.7851903438568115
    5. 'ent' → logprob: -3.1601903438568115
    6. 'n' → logprob: -5.285190582275391
    7. '   ' → logprob: -5.660190582275391
    8. ' ent' → logprob: -5.910190582275391
    9. ' n' → logprob: -6.285190582275391
    10. 'e' → logprob: -6.785190582275391

Token 76: ' à' (ID: 1221)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.40088823437690735
    2. '   ' → logprob: -1.150888204574585
    3. 'number' → logprob: -5.400888442993164
    4. 'nombre' → logprob: -5.525888442993164
    5. ' n' → logprob: -6.525888442993164
    6. 'num' → logprob: -6.775888442993164
    7. ' number' → logprob: -7.275888442993164
    8. '\n' → logprob: -7.900888442993164
    9. ' ' → logprob: -8.275888442993164
    10. '    
' → logprob: -8.400888442993164

Token 77: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.34915849566459656
    2. ' l' → logprob: -1.224158525466919
    3. '	l' → logprob: -7.97415828704834
    4. 'user' → logprob: -9.09915828704834
    5. 'util' → logprob: -9.84915828704834
    6. ' user' → logprob: -9.97415828704834
    7. ' utilisateur' → logprob: -10.09915828704834
    8. ''utilisateur' → logprob: -10.59915828704834
    9. ' ' → logprob: -10.84915828704834
    10. '   ' → logprob: -11.22415828704834

Token 78: ''utilisateur' (ID: 140803)
  Prédit: ''utilisateur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''utilisateur' → logprob: -0.11713510751724243
    2. 'u' → logprob: -2.7421350479125977
    3. ''' → logprob: -3.8671350479125977
    4. 'a' → logprob: -4.742135047912598
    5. ''u' → logprob: -4.867135047912598
    6. 'e' → logprob: -5.367135047912598
    7. ''util' → logprob: -6.117135047912598
    8. ''a' → logprob: -7.492135047912598
    9. ''us' → logprob: -7.617135047912598
    10. '’utilisateur' → logprob: -7.867135047912598

Token 79: ' via' (ID: 4493)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.14372265338897705
    2. '   ' → logprob: -2.1437225341796875
    3. '\n' → logprob: -4.2687225341796875
    4. '    
' → logprob: -6.3937225341796875
    5. ' 
' → logprob: -8.268722534179688
    6. '
' → logprob: -8.893722534179688
    7. '   
' → logprob: -9.268722534179688
    8. '\' → logprob: -9.393722534179688
    9. '  
' → logprob: -9.518722534179688
    10. ' n' → logprob: -9.643722534179688

Token 80: ' l' (ID: 305)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.09116315096616745
    2. 'input' → logprob: -2.466163158416748
    3. ' l' → logprob: -7.091163158416748
    4. 'l' → logprob: -7.466163158416748
    5. '   ' → logprob: -7.466163158416748
    6. ' ' → logprob: -8.71616268157959
    7. '=input' → logprob: -10.46616268157959
    8. ' la' → logprob: -11.09116268157959
    9. '	input' → logprob: -12.09116268157959
    10. ' ' → logprob: -12.09116268157959

Token 81: ''entrée' (ID: 115820)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.2423175722360611
    2. 'e' → logprob: -1.9923175573349
    3. ''' → logprob: -2.9923176765441895
    4. ''entrée' → logprob: -4.2423176765441895
    5. 'input' → logprob: -5.3673176765441895
    6. ''a' → logprob: -5.6173176765441895
    7. 'i' → logprob: -5.8673176765441895
    8. ''i' → logprob: -6.3673176765441895
    9. ''utilisateur' → logprob: -7.3673176765441895
    10. 'u' → logprob: -8.867317199707031

Token 82: ' standard' (ID: 7024)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14684942364692688
    2. 'n' → logprob: -2.0218493938446045
    3. 's' → logprob: -7.396849632263184
    4. ' ' → logprob: -7.521849632263184
    5. 'e' → logprob: -8.021849632263184
    6. '`' → logprob: -8.021849632263184
    7. 'input' → logprob: -8.146849632263184
    8. 'user' → logprob: -8.271849632263184
    9. 'x' → logprob: -8.646849632263184
    10. 't' → logprob: -8.896849632263184

Token 83: ' et' (ID: 859)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.3985236883163452
    2. '   ' → logprob: -1.1485236883163452
    3. '\n' → logprob: -5.023523807525635
    4. '    
' → logprob: -5.648523807525635
    5. ' 
' → logprob: -7.898523807525635
    6. '
' → logprob: -8.273523330688477
    7. '   
' → logprob: -8.648523330688477
    8. '  
' → logprob: -8.898523330688477
    9. '\' → logprob: -9.148523330688477
    10. 'input' → logprob: -9.648523330688477

Token 84: ' convertir' (ID: 79223)
  Prédit: ' try'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' try' → logprob: -0.1597013622522354
    2. 'n' → logprob: -3.284701347351074
    3. ' n' → logprob: -3.284701347351074
    4. 'try' → logprob: -3.909701347351074
    5. 't' → logprob: -5.409701347351074
    6. ' convertir' → logprob: -5.409701347351074
    7. ' continuer' → logprob: -5.534701347351074
    8. ' ' → logprob: -5.534701347351074
    9. ' i' → logprob: -5.784701347351074
    10. ' input' → logprob: -5.784701347351074

Token 85: ' la' (ID: 557)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.660914957523346
    2. ' ' → logprob: -1.1609148979187012
    3. ' n' → logprob: -3.285914897918701
    4. '    ' → logprob: -3.535914897918701
    5. 'n' → logprob: -3.910914897918701
    6. ' l' → logprob: -3.910914897918701
    7. ' un' → logprob: -4.035914897918701
    8. '  ' → logprob: -5.160914897918701
    9. ' i' → logprob: -5.285914897918701
    10. ' le' → logprob: -5.285914897918701

Token 86: ' sais' (ID: 30010)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.12714920938014984
    2. 'i' → logprob: -3.6271491050720215
    3. 'int' → logprob: -3.6271491050720215
    4. 'n' → logprob: -4.0021491050720215
    5. 'ent' → logprob: -4.7521491050720215
    6. ' input' → logprob: -4.8771491050720215
    7. ' i' → logprob: -5.1271491050720215
    8. 'input' → logprob: -5.3771491050720215
    9. ' `' → logprob: -5.3771491050720215
    10. ' int' → logprob: -5.5021491050720215

Token 87: 'ie' (ID: 396)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.01204416248947382
    2. 's' → logprob: -4.8870439529418945
    3. 'ie' → logprob: -5.7620439529418945
    4. 'sie' → logprob: -7.2620439529418945
    5. 'es' → logprob: -7.6370439529418945
    6. 'ss' → logprob: -11.012043952941895
    7. 'r' → logprob: -11.512043952941895
    8. ' ' → logprob: -11.512043952941895
    9. 'str' → logprob: -11.762043952941895
    10. '```' → logprob: -11.762043952941895

Token 88: ' en' (ID: 469)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.275937557220459
    2. 'n' → logprob: -1.525937557220459
    3. ' ' → logprob: -5.150937557220459
    4. ' =' → logprob: -5.775937557220459
    5. ':' → logprob: -6.150937557220459
    6. ' :' → logprob: -6.150937557220459
    7. ',' → logprob: -6.275937557220459
    8. '=' → logprob: -6.775937557220459
    9. ' ' → logprob: -7.275937557220459
    10. ' )' → logprob: -7.275937557220459

Token 89: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.3929697275161743
    2. ' un' → logprob: -1.5179697275161743
    3. 'int' → logprob: -2.7679696083068848
    4. ' entier' → logprob: -3.8929696083068848
    5. ' ' → logprob: -4.392969608306885
    6. 'ent' → logprob: -5.142969608306885
    7. 'un' → logprob: -6.267969608306885
    8. ' ent' → logprob: -7.142969608306885
    9. '   ' → logprob: -8.142970085144043
    10. ' integer' → logprob: -8.517970085144043

Token 90: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4809653162956238
    2. 'n' → logprob: -0.9809653162956238
    3. '    
' → logprob: -5.8559651374816895
    4. '\n' → logprob: -6.1059651374816895
    5. ' ' → logprob: -7.8559651374816895
    6. ' 
' → logprob: -8.855965614318848
    7. 'u' → logprob: -8.855965614318848
    8. '    ' → logprob: -8.980965614318848
    9. '   
' → logprob: -9.230965614318848
    10. 'x' → logprob: -9.355965614318848

Token 91: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3150138556957245
    2. 'n' → logprob: -1.3150138854980469
    3. '    
' → logprob: -7.815013885498047
    4. ' n' → logprob: -8.065013885498047
    5. 'x' → logprob: -8.690013885498047
    6. 'nombre' → logprob: -8.940013885498047
    7. ' ' → logprob: -9.065013885498047
    8. 'ent' → logprob: -9.565013885498047
    9. '    ' → logprob: -9.565013885498047
    10. '\n' → logprob: -9.690013885498047

Token 92: ' N' (ID: 478)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.21040090918540955
    2. 'number' → logprob: -2.5854008197784424
    3. 'nombre' → logprob: -2.9604008197784424
    4. '   ' → logprob: -3.5854008197784424
    5. ' number' → logprob: -4.5854010581970215
    6. 'num' → logprob: -4.7104010581970215
    7. ' n' → logprob: -5.0854010581970215
    8. 'ent' → logprob: -5.4604010581970215
    9. 'user' → logprob: -6.7104010581970215
    10. ' nombre' → logprob: -6.7104010581970215

Token 93: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.02326807752251625
    2. '=' → logprob: -3.773267984390259
    3. '=int' → logprob: -11.27326774597168
    4. ' ' → logprob: -12.14826774597168
    5. '  ' → logprob: -13.27326774597168
    6. '   ' → logprob: -13.64826774597168
    7. ' ' → logprob: -14.39826774597168
    8. '=input' → logprob: -14.52326774597168
    9. '_' → logprob: -15.14826774597168
    10. ' =
' → logprob: -15.89826774597168

Token 94: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.0014095203951001167
    2. 'int' → logprob: -6.626409530639648
    3. ' in' → logprob: -10.376409530639648
    4. ' input' → logprob: -10.501409530639648
    5. ' ' → logprob: -10.876409530639648
    6. ' ' → logprob: -13.001409530639648
    7. ' i' → logprob: -13.001409530639648
    8. '=int' → logprob: -14.751409530639648
    9. '	int' → logprob: -14.876409530639648
    10. '  ' → logprob: -15.376409530639648

Token 95: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5759599208831787
    2. '(input' → logprob: -0.8259599208831787
    3. ' (' → logprob: -11.575960159301758
    4. 'input' → logprob: -11.700960159301758
    5. '(
' → logprob: -13.075960159301758
    6. '(

' → logprob: -15.325960159301758
    7. ' ' → logprob: -15.825960159301758
    8. ' input' → logprob: -16.325960159301758
    9. '(s' → logprob: -16.950960159301758
    10. '=input' → logprob: -17.075960159301758

Token 96: '())
' (ID: 4574)
  Prédit: '("("'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '("("' → logprob: -0.7394894957542419
    2. '()' → logprob: -0.9894894957542419
    3. '(' → logprob: -2.4894895553588867
    4. '('' → logprob: -3.4894895553588867
    5. '())' → logprob: -3.9894895553588867
    6. '("' → logprob: -4.114489555358887
    7. ')' → logprob: -6.989489555358887
    8. '("")' → logprob: -7.489489555358887
    9. '(""))' → logprob: -7.739489555358887
    10. '("(' → logprob: -8.239489555358887

Token 97: '    
' (ID: 1944)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5140060782432556
    2. '  
' → logprob: -2.0140061378479004
    3. ' 
' → logprob: -2.2640061378479004
    4. '   ' → logprob: -2.5140061378479004
    5. '    
' → logprob: -3.2640061378479004
    6. '\n' → logprob: -4.2640061378479
    7. '   
' → logprob: -4.6390061378479
    8. ' ' → logprob: -4.8890061378479
    9. 'n' → logprob: -5.3890061378479
    10. ' return' → logprob: -6.3890061378479

Token 98: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5616756081581116
    2. 'result' → logprob: -1.1866755485534668
    3. ' result' → logprob: -2.311675548553467
    4. 'c' → logprob: -4.811675548553467
    5. 'cube' → logprob: -5.311675548553467
    6. ' cube' → logprob: -5.686675548553467
    7. '    
' → logprob: -5.811675548553467
    8. 'r' → logprob: -6.561675548553467
    9. ' return' → logprob: -6.686675548553467
    10. 'return' → logprob: -6.811675548553467

Token 99: ' #' (ID: 1069)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.47620779275894165
    2. 'cube' → logprob: -0.9762077927589417
    3. '#' (adapté à ' #') → logprob: -7.476207733154297
    4. 'c' → logprob: -7.601207733154297
    5. 'rés' → logprob: -7.976207733154297
    6. 'cub' → logprob: -8.226207733154297
    7. 'r' → logprob: -9.101207733154297
    8. 'print' → logprob: -9.226207733154297
    9. 'res' → logprob: -9.226207733154297
    10. 'R' → logprob: -9.851207733154297

Token 100: ' Calcul' (ID: 57243)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.8441070318222046
    2. 'cube' → logprob: -1.0941070318222046
    3. ' result' → logprob: -2.094107151031494
    4. ' cube' → logprob: -2.219107151031494
    5. 'c' → logprob: -7.344107151031494
    6. 'rés' → logprob: -7.469107151031494
    7. 'r' → logprob: -8.094106674194336
    8. 'calcul' → logprob: -8.219106674194336
    9. 'cub' → logprob: -8.469106674194336
    10. ' resultat' → logprob: -8.719106674194336

Token 101: 'er' (ID: 259)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.6147744059562683
    2. '   ' → logprob: -0.9897744059562683
    3. '_cube' → logprob: -2.989774465560913
    4. 'cube' → logprob: -4.489774227142334
    5. 'er' → logprob: -4.989774227142334
    6. ' ' → logprob: -5.864774227142334
    7. '_c' → logprob: -5.864774227142334
    8. ' =' → logprob: -5.989774227142334
    9. 'c' → logprob: -6.364774227142334
    10. 'Cube' → logprob: -6.614774227142334

Token 102: ' le' (ID: 505)
  Prédit: ' N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.5765162110328674
    2. ' le' → logprob: -0.9515162110328674
    3. 'N' → logprob: -3.2015161514282227
    4. ' ' → logprob: -5.326516151428223
    5. 'le' → logprob: -6.076516151428223
    6. ' l' → logprob: -6.826516151428223
    7. '   ' → logprob: -7.576516151428223
    8. '    ' → logprob: -8.076516151428223
    9. '(N' → logprob: -8.076516151428223
    10. ' la' → logprob: -8.451516151428223

Token 103: ' cube' (ID: 46822)
  Prédit: ' cube'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cube' → logprob: -0.06282244622707367
    2. 'cube' → logprob: -3.3128223419189453
    3. ' ' → logprob: -3.9378223419189453
    4. ' N' → logprob: -5.937822341918945
    5. '_cube' → logprob: -6.687822341918945
    6. '_' → logprob: -7.437822341918945
    7. 'N' → logprob: -9.312822341918945
    8. ' résultat' → logprob: -9.437822341918945
    9. '```' → logprob: -9.812822341918945
    10. 'c' → logprob: -9.937822341918945

Token 104: ' de' (ID: 334)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6971763372421265
    2. 'N' → logprob: -0.8221763372421265
    3. ' N' → logprob: -3.572176456451416
    4. '(' → logprob: -4.572176456451416
    5. '(N' → logprob: -4.947176456451416
    6. '_' → logprob: -5.822176456451416
    7. ' (' → logprob: -6.197176456451416
    8. ')' → logprob: -6.322176456451416
    9. ' de' → logprob: -6.447176456451416
    10. ' =' → logprob: -6.697176456451416

Token 105: ' l' (ID: 305)
  Prédit: ' N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.018529511988162994
    2. 'N' → logprob: -4.018529415130615
    3. ' ' → logprob: -7.893529415130615
    4. ' ' → logprob: -13.018529891967773
    5. '(N' → logprob: -14.143529891967773
    6. ' `' → logprob: -14.393529891967773
    7. '  ' → logprob: -14.643529891967773
    8. '   ' → logprob: -14.643529891967773
    9. '	N' → logprob: -14.768529891967773
    10. ' (' → logprob: -15.018529891967773

Token 106: ''ent' (ID: 53422)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.36646735668182373
    2. 'a' → logprob: -1.9914673566818237
    3. 'e' → logprob: -2.3664674758911133
    4. ' N' → logprob: -2.8664674758911133
    5. ''ent' → logprob: -5.116467475891113
    6. '   ' → logprob: -6.116467475891113
    7. ' entier' → logprob: -6.116467475891113
    8. ' ' → logprob: -6.491467475891113
    9. 'ent' → logprob: -6.616467475891113
    10. ''' → logprob: -6.741467475891113

Token 107: 'ier' (ID: 905)
  Prédit: 'ier'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ier' → logprob: -0.8080956935882568
    2. '   ' → logprob: -1.1830956935882568
    3. 'N' → logprob: -1.9330956935882568
    4. ' N' → logprob: -2.808095693588257
    5. 'er' → logprob: -3.808095693588257
    6. ' ' → logprob: -4.433095932006836
    7. '  ' → logprob: -6.183095932006836
    8. 're' → logprob: -6.558095932006836
    9. 'e' → logprob: -6.808095932006836
    10. 'ière' → logprob: -6.933095932006836

Token 108: ' renseign' (ID: 85631)
  Prédit: ' N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.7505702972412109
    2. 'N' → logprob: -1.125570297241211
    3. '   ' → logprob: -1.750570297241211
    4. '    
' → logprob: -4.500570297241211
    5. 'C' → logprob: -5.750570297241211
    6. ' ' → logprob: -5.875570297241211
    7. ' ' → logprob: -6.750570297241211
    8. '   
' → logprob: -6.875570297241211
    9. '  
' → logprob: -7.125570297241211
    10. 'result' → logprob: -7.125570297241211

Token 109: 'é' (ID: 377)
  Prédit: 'é'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'é' → logprob: -0.0033301645889878273
    2. 'e' → logprob: -5.753330230712891
    3. 'ement' → logprob: -9.00333023071289
    4. 'ée' → logprob: -11.87833023071289
    5. 'ément' → logprob: -12.12833023071289
    6. 'è' → logprob: -12.62833023071289
    7. 'er' → logprob: -13.00333023071289
    8. 'É' → logprob: -13.50333023071289
    9. 'ent' → logprob: -13.87833023071289
    10. '   ' → logprob: -14.12833023071289

Token 110: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4287680387496948
    2. 'N' → logprob: -1.6787680387496948
    3. '    
' → logprob: -2.4287681579589844
    4. 'n' → logprob: -4.053768157958984
    5. '   
' → logprob: -4.428768157958984
    6. ' N' → logprob: -4.678768157958984
    7. 'result' → logprob: -5.053768157958984
    8. ' 
' → logprob: -5.178768157958984
    9. '  
' → logprob: -5.178768157958984
    10. ' ' → logprob: -5.303768157958984

Token 111: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4590941369533539
    2. 'cube' → logprob: -1.8340941667556763
    3. 'result' → logprob: -2.7090940475463867
    4. ' cube' → logprob: -2.8340940475463867
    5. ' result' → logprob: -3.5840940475463867
    6. 'c' → logprob: -3.5840940475463867
    7. '    
' → logprob: -3.7090940475463867
    8. ' 
' → logprob: -7.959094047546387
    9. ' ' → logprob: -7.959094047546387
    10. 'cub' → logprob: -8.084094047546387

Token 112: ' result' (ID: 1534)
  Prédit: ' cube'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cube' → logprob: -0.45969563722610474
    2. ' result' → logprob: -1.95969557762146
    3. 'cube' → logprob: -1.95969557762146
    4. 'result' (adapté à ' result') → logprob: -2.58469557762146
    5. ' N' → logprob: -5.334695816040039
    6. 'N' → logprob: -6.209695816040039
    7. '   ' → logprob: -6.584695816040039
    8. 'c' → logprob: -6.959695816040039
    9. ' ' → logprob: -7.209695816040039
    10. ' cub' → logprob: -7.709695816040039

Token 113: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.18035635352134705
    2. '=' → logprob: -1.8053563833236694
    3. '_' → logprob: -7.430356502532959
    4. ' ' → logprob: -11.5553560256958
    5. 's' → logprob: -12.4303560256958
    6. ' ' → logprob: -13.0553560256958
    7. '   ' → logprob: -14.5553560256958
    8. ')' → logprob: -14.5553560256958
    9. '  ' → logprob: -14.8053560256958
    10. '	' → logprob: -15.3053560256958

Token 114: ' N' (ID: 478)
  Prédit: ' N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.0047367531806230545
    2. 'N' → logprob: -5.37973690032959
    3. ' ' → logprob: -9.12973690032959
    4. ' ' → logprob: -11.75473690032959
    5. '	N' → logprob: -15.87973690032959
    6. '  ' → logprob: -16.379735946655273
    7. '   ' → logprob: -17.129735946655273
    8. ' ' → logprob: -17.379735946655273
    9. ' 
' → logprob: -17.754735946655273
    10. '    ' → logprob: -18.379735946655273

Token 115: ' **' (ID: 6240)
  Prédit: ' **'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' **' → logprob: -0.10021431744098663
    2. '**' → logprob: -2.3502142429351807
    3. ' *' → logprob: -12.475214004516602
    4. ' ' → logprob: -13.600214004516602
    5. ' ***' → logprob: -13.850214004516602
    6. '*' → logprob: -13.975214004516602
    7. ' ' → logprob: -14.225214004516602
    8. '***' → logprob: -16.3502140045166
    9. '```' → logprob: -17.6002140045166
    10. '  ' → logprob: -17.7252140045166

Token 116: ' ' (ID: 220)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.02975083328783512
    2. ' ' → logprob: -3.5297508239746094
    3. ' ' → logprob: -15.02975082397461
    4. '  ' → logprob: -18.15475082397461
    5. '```' → logprob: -18.77975082397461
    6. '۳' → logprob: -18.90475082397461
    7. '   ' → logprob: -19.40475082397461
    8. '' → logprob: -19.77975082397461
    9. '³' → logprob: -19.90475082397461
    10. '３' → logprob: -20.15475082397461

Token 117: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -3.4121114822482923e-06
    2. ' ' → logprob: -12.625003814697266
    3. '```' → logprob: -19.125003814697266
    4. '   ' → logprob: -19.375003814697266
    5. '  ' → logprob: -20.750003814697266
    6. '۳' → logprob: -21.750003814697266
    7. '٣' → logprob: -23.125003814697266
    8. '３' → logprob: -23.125003814697266
    9. '' → logprob: -23.250003814697266
    10. '³' → logprob: -23.375003814697266

Token 118: '
    
' (ID: 15698)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.24086228013038635
    2. '   ' → logprob: -2.2408623695373535
    3. '    
' → logprob: -2.2408623695373535
    4. 'print' → logprob: -6.8658623695373535
    5. '  
' → logprob: -8.990861892700195
    6. '```' → logprob: -10.115861892700195
    7. '\n' → logprob: -10.240861892700195
    8. '   
' → logprob: -10.615861892700195
    9. '
' → logprob: -10.865861892700195
    10. ' 
' → logprob: -11.365861892700195

Token 119: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.024190206080675125
    2. 'print' → logprob: -3.7741901874542236
    3. '    
' → logprob: -7.024190425872803
    4. '
' → logprob: -10.274189949035645
    5. ' print' → logprob: -11.024189949035645
    6. '  
' → logprob: -13.899189949035645
    7. '   
' → logprob: -14.149189949035645
    8. '    ' → logprob: -14.649189949035645
    9. '```' → logprob: -14.899189949035645
    10. '  ' → logprob: -15.524189949035645

Token 120: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.003239624435082078
    2. '   ' → logprob: -5.753239631652832
    3. '#' (adapté à ' #') → logprob: -10.378239631652832
    4. ' print' → logprob: -10.503239631652832
    5. '```' → logprob: -13.628239631652832
    6. '
' → logprob: -13.878239631652832
    7. '    
' → logprob: -14.003239631652832
    8. '#print' → logprob: -15.503239631652832
    9. '  ' → logprob: -16.503238677978516
    10. '  
' → logprob: -17.003238677978516

Token 121: ' Aff' (ID: 13741)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.5759523510932922
    2. ' print' → logprob: -0.8259523510932922
    3. '   ' → logprob: -11.825952529907227
    4. 'pr' → logprob: -12.825952529907227
    5. 'Print' → logprob: -14.325952529907227
    6. 'prin' → logprob: -14.450952529907227
    7. ' prin' → logprob: -14.825952529907227
    8. ' ' → logprob: -15.075952529907227
    9. 'aff' → logprob: -15.200952529907227
    10. '	print' → logprob: -15.700952529907227

Token 122: 'icher' (ID: 13617)
  Prédit: 'icher'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'icher' → logprob: -0.39333054423332214
    2. 'iche' → logprob: -1.2683305740356445
    3. '   ' → logprob: -3.2683305740356445
    4. 'ic' → logprob: -5.8933305740356445
    5. 'ich' → logprob: -6.6433305740356445
    6. 'ichage' → logprob: -7.1433305740356445
    7. '  ' → logprob: -7.8933305740356445
    8. '    ' → logprob: -8.643330574035645
    9. '#' → logprob: -9.018330574035645
    10. '       ' → logprob: -9.268330574035645

Token 123: ' le' (ID: 505)
  Prédit: '(result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.20156730711460114
    2. '(' → logprob: -1.70156729221344
    3. 'result' → logprob: -9.201567649841309
    4. ' (' → logprob: -10.701567649841309
    5. ' result' → logprob: -10.701567649841309
    6. '(res' → logprob: -12.826567649841309
    7. '("' → logprob: -13.826567649841309
    8. '(f' → logprob: -13.826567649841309
    9. '(
' → logprob: -14.076567649841309
    10. ' resultat' → logprob: -14.576567649841309

Token 124: ' résultat' (ID: 62556)
  Prédit: ' result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' result' → logprob: -0.5345749258995056
    2. ' résultat' → logprob: -1.2845749855041504
    3. 'result' → logprob: -2.4095749855041504
    4. ' ' → logprob: -3.6595749855041504
    5. ' resultat' → logprob: -4.65957498550415
    6. '(result' → logprob: -4.65957498550415
    7. ' cube' → logprob: -6.90957498550415
    8. 'rés' → logprob: -7.40957498550415
    9. 'cube' → logprob: -8.159574508666992
    10. 'r' → logprob: -8.534574508666992

Token 125: ' obtenu' (ID: 117330)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18830029666423798
    2. 'print' → logprob: -2.188300371170044
    3. '
' → logprob: -3.063300371170044
    4. ' print' → logprob: -4.688300132751465
    5. '    
' → logprob: -5.688300132751465
    6. '  
' → logprob: -10.063300132751465
    7. '```' → logprob: -10.188300132751465
    8. ' 
' → logprob: -10.688300132751465
    9. 'result' → logprob: -10.813300132751465
    10. '\n' → logprob: -11.313300132751465

Token 126: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8581218719482422
    2. 'print' → logprob: -0.8581218719482422
    3. '
' → logprob: -1.9831218719482422
    4. ' print' → logprob: -4.483121871948242
    5. '    
' → logprob: -5.858121871948242
    6. '  
' → logprob: -8.858121871948242
    7. '   
' → logprob: -10.608121871948242
    8. ' 
' → logprob: -10.733121871948242
    9. '```' → logprob: -10.733121871948242
    10. 'result' → logprob: -10.983121871948242

Token 127: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.492085725069046
    2. 'print' → logprob: -0.9920856952667236
    3. ' print' → logprob: -4.242085933685303
    4. '
' → logprob: -5.742085933685303
    5. '    
' → logprob: -8.492085456848145
    6. '```' → logprob: -10.117085456848145
    7. '  
' → logprob: -12.242085456848145
    8. ' 
' → logprob: -12.492085456848145
    9. '   
' → logprob: -13.492085456848145
    10. '	print' → logprob: -13.742085456848145

Token 128: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.12693314254283905
    2. ' print' → logprob: -2.1269330978393555
    3. '   ' → logprob: -12.376933097839355
    4. 'result' → logprob: -14.876933097839355
    5. ' result' → logprob: -15.626933097839355
    6. 'pr' → logprob: -15.876933097839355
    7. '```' → logprob: -16.126934051513672
    8. ' ' → logprob: -17.251934051513672
    9. '	print' → logprob: -18.001934051513672
    10. ' ' → logprob: -18.001934051513672

Token 129: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.5759569406509399
    2. '(' → logprob: -0.8259569406509399
    3. ' (' → logprob: -11.450957298278809
    4. '()' → logprob: -13.700957298278809
    5. '(results' → logprob: -13.700957298278809
    6. '(res' → logprob: -13.700957298278809
    7. '(
' → logprob: -13.700957298278809
    8. '(resultado' → logprob: -14.575957298278809
    9. '('' → logprob: -14.700957298278809
    10. 'result' → logprob: -14.950957298278809

Token 130: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -3.128163257315464e-07
    2. ' )' → logprob: -15.375
    3. ')
' → logprob: -17.25
    4. ')`' → logprob: -19.25
    5. '')' → logprob: -20.0
    6. '))' → logprob: -20.5
    7. '）' → logprob: -20.875
    8. '()' → logprob: -21.0
    9. '`)' → logprob: -21.0
    10. '")' → logprob: -21.25

Token 131: '#' (ID: 2)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.1617959439754486
    2. '\n' → logprob: -2.4117958545684814
    3. '<|end|>' → logprob: -3.1617958545684814
    4. '#' → logprob: -5.4117960929870605
    5. '```' → logprob: -5.7867960929870605
    6. 'newline' → logprob: -6.0367960929870605
    7. '\' → logprob: -6.4117960929870605
    8. '<|end|>' → logprob: -6.6617960929870605
    9. '  
' → logprob: -7.0367960929870605
    10. 'def' → logprob: -7.5367960929870605

Token 132: ' App' (ID: 2583)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.41502946615219116
    2. 'd' → logprob: -1.415029525756836
    3. 'calculate' → logprob: -3.415029525756836
    4. '#' → logprob: -3.790029525756836
    5. 'i' → logprob: -4.790029525756836
    6. '\' → logprob: -4.790029525756836
    7. 'def' → logprob: -5.290029525756836
    8. '```' → logprob: -5.540029525756836
    9. 'e' → logprob: -5.790029525756836
    10. '\n' → logprob: -6.290029525756836

Token 133: 'el' (ID: 296)
  Prédit: 'el'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'el' → logprob: -0.07152304798364639
    2. 'eler' → logprob: -2.6965229511260986
    3. 'e' → logprob: -7.196523189544678
    4. 'l' → logprob: -7.446523189544678
    5. 'elle' → logprob: -9.69652271270752
    6. 'le' → logprob: -10.44652271270752
    7. 'elé' → logprob: -10.57152271270752
    8. 'er' → logprob: -10.94652271270752
    9. 'p' → logprob: -10.94652271270752
    10. '_' → logprob: -10.94652271270752

Token 134: ' de' (ID: 334)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.014783397316932678
    2. '()' → logprob: -5.1397833824157715
    3. '(c' → logprob: -5.5147833824157715
    4. 'calculate' → logprob: -5.6397833824157715
    5. 'def' → logprob: -7.8897833824157715
    6. ' (' → logprob: -8.26478385925293
    7. ' calculate' → logprob: -8.38978385925293
    8. '(
' → logprob: -8.38978385925293
    9. '_' → logprob: -10.13978385925293
    10. 'de' → logprob: -10.88978385925293

Token 135: ' la' (ID: 557)
  Prédit: ' calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.008661959320306778
    2. 'calculate' → logprob: -4.75866174697876
    3. ' ' → logprob: -10.258662223815918
    4. ' ' → logprob: -11.633662223815918
    5. ' compute' → logprob: -13.883662223815918
    6. 'alculate' → logprob: -14.133662223815918
    7. '_' → logprob: -14.758662223815918
    8. 'c' → logprob: -15.508662223815918
    9. '  ' → logprob: -15.508662223815918
    10. ' the' → logprob: -15.633662223815918

Token 136: ' fonction' (ID: 17610)
  Prédit: 'calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'calculate' → logprob: -0.5235791206359863
    2. ' calculate' → logprob: -0.8985791206359863
    3. ' ' → logprob: -8.273578643798828
    4. 'c' → logprob: -9.898578643798828
    5. '_' → logprob: -10.023578643798828
    6. 'def' → logprob: -10.398578643798828
    7. 'alculate' → logprob: -11.023578643798828
    8. ' ' → logprob: -11.148578643798828
    9. ' ```' → logprob: -11.773578643798828
    10. ' def' → logprob: -12.023578643798828

Token 137: ' principale' (ID: 68926)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.11647336930036545
    2. 'calculate' → logprob: -2.241473436355591
    3. '()
' → logprob: -6.116473197937012
    4. ' 
' → logprob: -7.741473197937012
    5. '
' → logprob: -7.866473197937012
    6. '  
' → logprob: -7.991473197937012
    7. ' calculate' → logprob: -8.741473197937012
    8. '

' → logprob: -10.616473197937012
    9. '(
' → logprob: -10.741473197937012
    10. '\' → logprob: -11.366473197937012

Token 138: ' pour' (ID: 1930)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.16122175753116608
    2. 'calculate' → logprob: -1.9112217426300049
    3. '
' → logprob: -7.661221981048584
    4. '()
' → logprob: -8.286221504211426
    5. ' calculate' → logprob: -9.411221504211426
    6. ' 
' → logprob: -9.786221504211426
    7. '\' → logprob: -9.911221504211426
    8. '  
' → logprob: -10.411221504211426
    9. '

' → logprob: -10.661221504211426
    10. '' → logprob: -12.036221504211426

Token 139: ' ex' (ID: 513)
  Prédit: ' calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.9805065989494324
    2. ' ex' → logprob: -1.6055066585540771
    3. 'calculate' → logprob: -1.9805066585540771
    4. ' execute' → logprob: -2.105506658554077
    5. ' calcul' → logprob: -2.855506658554077
    6. ' lancer' → logprob: -3.230506658554077
    7. 'execute' → logprob: -3.730506658554077
    8. ' execut' → logprob: -4.480506420135498
    9. ' effectuer' → logprob: -4.605506420135498
    10. 'ex' → logprob: -4.605506420135498

Token 140: 'éc' (ID: 5675)
  Prédit: 'éc'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'éc' → logprob: -0.21599481999874115
    2. 'é' → logprob: -1.8409948348999023
    3. 'ecute' → logprob: -4.090994834899902
    4. 'ecut' → logprob: -4.340994834899902
    5. 'ec' → logprob: -5.590994834899902
    6. 'e' → logprob: -6.715994834899902
    7. 'ecu' → logprob: -7.965994834899902
    8. 'écut' → logprob: -8.090994834899902
    9. 'è' → logprob: -9.465994834899902
    10. 'cut' → logprob: -10.215994834899902

Token 141: 'uter' (ID: 23469)
  Prédit: 'uter'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'uter' → logprob: -0.0024529455695301294
    2. 'cut' → logprob: -6.127452850341797
    3. '```' → logprob: -8.877452850341797
    4. 'ute' → logprob: -10.252452850341797
    5. 'ut' → logprob: -11.502452850341797
    6. 'r' → logprob: -11.627452850341797
    7. '   ' → logprob: -11.627452850341797
    8. '#' → logprob: -12.127452850341797
    9. '``' → logprob: -12.127452850341797
    10. '"' → logprob: -12.377452850341797

Token 142: ' la' (ID: 557)
  Prédit: 'calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'calculate' → logprob: -0.34858399629592896
    2. ' calculate' → logprob: -1.2235839366912842
    3. '()' → logprob: -9.848584175109863
    4. ' ' → logprob: -11.098584175109863
    5. 'c' → logprob: -11.223584175109863
    6. 'alculate' → logprob: -11.223584175109863
    7. 'calcul' → logprob: -12.098584175109863
    8. ' calcul' → logprob: -12.348584175109863
    9. ' ' → logprob: -12.473584175109863
    10. '.calculate' → logprob: -12.723584175109863

Token 143: ' logique' (ID: 115350)
  Prédit: 'calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'calculate' → logprob: -0.6692030429840088
    2. ' calculate' → logprob: -1.9192030429840088
    3. ' programme' → logprob: -2.544203042984009
    4. ' code' → logprob: -2.669203042984009
    5. 'calcul' → logprob: -2.669203042984009
    6. ' calcul' → logprob: -3.169203042984009
    7. 'programme' → logprob: -3.169203042984009
    8. 'code' → logprob: -3.669203042984009
    9. 'fonction' → logprob: -4.79420280456543
    10. 'c' → logprob: -6.91920280456543

Token 144: ' du' (ID: 1462)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.3135596215724945
    2. 'calculate' → logprob: -1.313559651374817
    3. '
' → logprob: -8.688559532165527
    4. ' calculate' → logprob: -9.938559532165527
    5. '\' → logprob: -10.313559532165527
    6. '()
' → logprob: -10.938559532165527
    7. '

' → logprob: -11.688559532165527
    8. ' 
' → logprob: -11.938559532165527
    9. '```' → logprob: -12.438559532165527
    10. '\n' → logprob: -12.688559532165527

Token 145: ' programme' (ID: 18190)
  Prédit: ' programme'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' programme' → logprob: -0.8027672171592712
    2. 'programme' → logprob: -0.9277672171592712
    3. 'program' → logprob: -3.177767276763916
    4. ' script' → logprob: -3.427767276763916
    5. ' code' → logprob: -3.552767276763916
    6. ' program' → logprob: -3.677767276763916
    7. 'calcul' → logprob: -4.552767276763916
    8. 'code' → logprob: -5.177767276763916
    9. 'calculate' → logprob: -5.552767276763916
    10. 'script' → logprob: -5.677767276763916

Token 146: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.4747250974178314
    2. 'calculate' → logprob: -0.9747251272201538
    3. '\' → logprob: -8.724724769592285
    4. '()
' → logprob: -9.224724769592285
    5. '
' → logprob: -9.349724769592285
    6. ' 
' → logprob: -9.599724769592285
    7. ' calculate' → logprob: -9.724724769592285
    8. '  
' → logprob: -9.849724769592285
    9. '\n' → logprob: -10.224724769592285
    10. '

' → logprob: -10.474724769592285

Token 147: 'calculate' (ID: 58453)
  Prédit: 'calculate'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'calculate' → logprob: -6.704273118884885e-07
    2. ' calculate' → logprob: -14.250000953674316
    3. 'calcul' → logprob: -19.375
    4. '
' → logprob: -20.0
    5. '.calculate' → logprob: -21.0
    6. 'compute' → logprob: -21.25
    7. '```' → logprob: -21.75
    8. 'alculate' → logprob: -22.0
    9. 'calc' → logprob: -22.0
    10. 'calculator' → logprob: -22.125

Token 148: '_cube' (ID: 171900)
  Prédit: '_cube'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_cube' → logprob: -0.011648237705230713
    2. '_' → logprob: -4.511648178100586
    3. '()' → logprob: -7.511648178100586
    4. '_c' → logprob: -10.636648178100586
    5. 'cube' → logprob: -11.386648178100586
    6. 'Cube' → logprob: -11.636648178100586
    7. '(' → logprob: -12.886648178100586
    8. ' cube' → logprob: -13.761648178100586
    9. ')' → logprob: -14.011648178100586
    10. '__' → logprob: -14.511648178100586

Token 149: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0730128288269043
    2. '(' → logprob: -2.8230128288269043
    3. '\n' → logprob: -5.323012828826904
    4. '
' → logprob: -6.448012828826904
    5. '()
' → logprob: -6.573012828826904
    6. '\' → logprob: -7.073012828826904
    7. '```' → logprob: -7.198012828826904
    8. '(
' → logprob: -7.323012828826904
    9. '<|end|>' → logprob: -8.198013305664062
    10. ')' → logprob: -8.198013305664062


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 147
Tokens correctement prédits (1ère position, stricte): 46
Tokens correctement prédits (1ère position, avec adaptation): 47
Tokens correctement prédits (top 10): 92
Précision stricte (1ère position): 31.29%
Précision adaptée (1ère position): 31.97%
Précision (top 10): 62.59%
================================================================================
