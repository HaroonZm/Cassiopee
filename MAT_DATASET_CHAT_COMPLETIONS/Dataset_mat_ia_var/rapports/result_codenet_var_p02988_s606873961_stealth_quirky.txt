================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:53:33
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from collections import deque

N = int(input())
P = list(map(int, input().split()))
Counter = 0

Buffer = deque(maxlen=3)
for idx, value in enumerate(P):
    Buffer.append(value)
    if len(Buffer)==3:
        sample = Buffer.copy()
        sample.sort()
        if Buffer[1] == sample[1]:
            Counter += 1

print(+Counter)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' collections' (ID: 22690)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' deque' (ID: 90347)
  Prédit: 'abc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'abc' → logprob: -0.41044583916664124
    2. ' abc' → logprob: -1.9104458093643188
    3. 'deque' → logprob: -2.4104459285736084
    4. ' defaultdict' → logprob: -2.5354459285736084
    5. 'default' → logprob: -4.660445690155029
    6. ' deque' → logprob: -6.035445690155029
    7. 'Counter' → logprob: -6.160445690155029
    8. '```' → logprob: -6.160445690155029
    9. ' Counter' → logprob: -6.660445690155029
    10. ' named' → logprob: -7.035445690155029

Token 4: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.010466400533914566
    2. '.' → logprob: -5.385466575622559
    3. '\' → logprob: -6.385466575622559
    4. '\(' → logprob: -6.385466575622559
    5. '\n' → logprob: -7.260466575622559
    6. '```' → logprob: -7.885466575622559
    7. '[' → logprob: -8.010466575622559
    8. 'newline' → logprob: -8.260466575622559
    9. ',' → logprob: -8.760466575622559
    10. '\[' → logprob: -8.885466575622559

Token 5: 'N' (ID: 45)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.050654564052820206
    2. 'd' → logprob: -3.550654649734497
    3. ',' → logprob: -5.550654411315918
    4. '[' → logprob: -5.800654411315918
    5. 'a' → logprob: -6.050654411315918
    6. '.' → logprob: -6.050654411315918
    7. '(
' → logprob: -6.800654411315918
    8. '\' → logprob: -7.175654411315918
    9. '=' → logprob: -7.175654411315918
    10. '\(' → logprob: -7.550654411315918

Token 6: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.039804719388484955
    2. '=' → logprob: -3.664804697036743
    3. ' ' → logprob: -4.414804935455322
    4. '  ' → logprob: -7.289804935455322
    5. ',' → logprob: -8.414804458618164
    6. ' ,' → logprob: -9.039804458618164
    7. ' =)' → logprob: -9.289804458618164
    8. '.' → logprob: -9.789804458618164
    9. ' )' → logprob: -10.039804458618164
    10. '_' → logprob: -11.164804458618164

Token 7: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.08864746242761612
    2. ' ' → logprob: -3.0886473655700684
    3. 'int' → logprob: -3.3386473655700684
    4. '10' → logprob: -5.838647365570068
    5. '5' → logprob: -7.963647365570068
    6. '0' → logprob: -8.338647842407227
    7. ' deque' → logprob: -8.838647842407227
    8. 'deque' → logprob: -9.588647842407227
    9. '20' → logprob: -10.963647842407227
    10. ' input' → logprob: -11.588647842407227

Token 8: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00171278219204396
    2. '('' → logprob: -7.251712799072266
    3. ''' → logprob: -7.501712799072266
    4. '()' → logprob: -8.126712799072266
    5. '```' → logprob: -10.626712799072266
    6. '(N' → logprob: -10.751712799072266
    7. '(input' → logprob: -10.876712799072266
    8. ' (' → logprob: -11.001712799072266
    9. '("("' → logprob: -11.376712799072266
    10. '"' → logprob: -11.376712799072266

Token 9: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.2673414945602417
    2. '(' → logprob: -2.1423416137695312
    3. '()' → logprob: -2.2673416137695312
    4. '())' → logprob: -4.392341613769531
    5. '))' → logprob: -7.642341613769531
    6. '')' → logprob: -8.267341613769531
    7. '`)' → logprob: -8.392341613769531
    8. '(
' → logprob: -9.142341613769531
    9. '")' → logprob: -9.642341613769531
    10. '('' → logprob: -10.267341613769531

Token 10: 'P' (ID: 47)
  Prédit: 'queue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'queue' → logprob: -0.09980843961238861
    2. 'q' → logprob: -3.47480845451355
    3. 'stack' → logprob: -3.47480845451355
    4. 'graph' → logprob: -4.599808216094971
    5. 'arr' → logprob: -5.474808216094971
    6. 'd' → logprob: -5.599808216094971
    7. 'deque' → logprob: -5.724808216094971
    8. 'que' → logprob: -5.849808216094971
    9. 'dq' → logprob: -5.849808216094971
    10. 'tree' → logprob: -6.599808216094971

Token 11: ' =' (ID: 314)
  Prédit: '.append'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.5573799014091492
    2. ' =' → logprob: -1.432379961013794
    3. '[' → logprob: -3.557379961013794
    4. '[:]' → logprob: -3.807379961013794
    5. '_' → logprob: -4.307379722595215
    6. '=' → logprob: -4.432379722595215
    7. 'Q' → logprob: -4.432379722595215
    8. '_queue' → logprob: -4.682379722595215
    9. '[i' → logprob: -4.682379722595215
    10. 'deque' → logprob: -4.932379722595215

Token 12: ' list' (ID: 1562)
  Prédit: ' deque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' deque' → logprob: -0.3030147850513458
    2. 'deque' → logprob: -1.8030147552490234
    3. ' list' → logprob: -2.5530147552490234
    4. ' []' → logprob: -4.428014755249023
    5. 'list' → logprob: -5.803014755249023
    6. ' [' → logprob: -5.803014755249023
    7. '[]' → logprob: -8.678014755249023
    8. ' de' → logprob: -8.803014755249023
    9. ' map' → logprob: -8.928014755249023
    10. ' ' → logprob: -9.053014755249023

Token 13: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -8.995397365652025e-05
    2. '(range' → logprob: -9.500089645385742
    3. '(
' → logprob: -12.500089645385742
    4. '(

' → logprob: -13.125089645385742
    5. '(map' → logprob: -13.875089645385742
    6. ' (' → logprob: -14.375089645385742
    7. '(input' → logprob: -14.375089645385742
    8. '()' → logprob: -14.375089645385742
    9. '(data' → logprob: -14.500089645385742
    10. '((' → logprob: -14.750089645385742

Token 14: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.004566838499158621
    2. 'int' → logprob: -6.254566669464111
    3. '(' → logprob: -6.629566669464111
    4. '[int' → logprob: -7.754566669464111
    5. '(lambda' → logprob: -8.37956714630127
    6. '<int' → logprob: -8.75456714630127
    7. '=int' → logprob: -8.87956714630127
    8. '(str' → logprob: -9.00456714630127
    9. '(input' → logprob: -9.87956714630127
    10. '```' → logprob: -9.87956714630127

Token 15: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.30934634804725647
    2. '(' → logprob: -1.684346318244934
    3. ',input' → logprob: -2.9343464374542236
    4. ',' → logprob: -3.8093464374542236
    5. '))' → logprob: -6.3093461990356445
    6. 'input' → logprob: -6.8093461990356445
    7. ')' → logprob: -7.0593461990356445
    8. '(eval' → logprob: -8.309346199035645
    9. '```' → logprob: -8.809346199035645
    10. '=input' → logprob: -8.934346199035645

Token 16: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.12693661451339722
    2. ' input' → logprob: -2.126936674118042
    3. '(input' → logprob: -12.501936912536621
    4. ',input' → logprob: -12.501936912536621
    5. ')' → logprob: -14.251936912536621
    6. '=input' → logprob: -15.251936912536621
    7. '	input' → logprob: -16.001935958862305
    8. ' ' → logprob: -16.876935958862305
    9. '<input' → logprob: -17.751935958862305
    10. '[input' → logprob: -17.876935958862305

Token 17: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0004869186959695071
    2. '()))' → logprob: -8.125487327575684
    3. '))' → logprob: -9.625487327575684
    4. '())' → logprob: -10.125487327575684
    5. '(' → logprob: -10.250487327575684
    6. '()' → logprob: -10.500487327575684
    7. ')' → logprob: -11.250487327575684
    8. '()));' → logprob: -12.375487327575684
    9. '.split' → logprob: -14.250487327575684
    10. '(),' → logprob: -14.375487327575684

Token 18: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00020568605395965278
    2. 'strip' → logprob: -8.500205993652344
    3. 'rstrip' → logprob: -13.750205993652344
    4. '(split' → logprob: -14.250205993652344
    5. ' split' → logprob: -15.250205993652344
    6. ')' → logprob: -16.375205993652344
    7. 'spl' → logprob: -16.375205993652344
    8. 's' → logprob: -18.000205993652344
    9. 'read' → logprob: -18.000205993652344
    10. '```' → logprob: -18.625205993652344

Token 19: '()))
' (ID: 24521)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.004363540560007095
    2. ')' → logprob: -5.504363536834717
    3. ')))' → logprob: -8.629364013671875
    4. '()))' → logprob: -9.504364013671875
    5. '(' → logprob: -10.754364013671875
    6. '),' → logprob: -12.879364013671875
    7. ''))' → logprob: -13.379364013671875
    8. '))
' → logprob: -13.754364013671875
    9. ' ))' → logprob: -13.754364013671875
    10. '()' → logprob: -14.004364013671875

Token 20: 'Counter' (ID: 16263)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.6337560415267944
    2. 'dp' → logprob: -1.8837560415267944
    3. 'dq' → logprob: -1.8837560415267944
    4. 'q' → logprob: -3.133756160736084
    5. 'deque' → logprob: -3.758756160736084
    6. 'stack' → logprob: -3.758756160736084
    7. 'de' → logprob: -4.383756160736084
    8. 'queue' → logprob: -4.758756160736084
    9. 'dist' → logprob: -5.008756160736084
    10. 'Q' → logprob: -5.008756160736084

Token 21: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.012590647675096989
    2. 's' → logprob: -4.3875908851623535
    3. '()' → logprob: -11.012590408325195
    4. ')' → logprob: -11.137590408325195
    5. '[' → logprob: -11.387590408325195
    6. ' (' → logprob: -11.637590408325195
    7. '(s' → logprob: -12.012590408325195
    8. '('' → logprob: -12.137590408325195
    9. '(
' → logprob: -12.262590408325195
    10. 'S' → logprob: -13.012590408325195

Token 22: ' ' (ID: 220)
  Prédit: '{}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '{}' → logprob: -0.023018566891551018
    2. '[' → logprob: -4.2730183601379395
    3. '{' → logprob: -5.0230183601379395
    4. '0' → logprob: -7.3980183601379395
    5. ' {}' → logprob: -7.3980183601379395
    6. ' [' → logprob: -8.023018836975098
    7. 'deque' → logprob: -8.023018836975098
    8. 'dict' → logprob: -8.898018836975098
    9. 'default' → logprob: -9.273018836975098
    10. '{})' → logprob: -10.398018836975098

Token 23: '0' (ID: 15)
  Prédit: '{}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '{}' → logprob: -0.21729181706905365
    2. '[' → logprob: -2.092291831970215
    3. '{' → logprob: -2.967291831970215
    4. 'deque' → logprob: -4.342291831970215
    5. 'dict' → logprob: -5.967291831970215
    6. '0' → logprob: -5.967291831970215
    7. 'default' → logprob: -6.467291831970215
    8. 'Counter' → logprob: -8.717291831970215
    9. '[]' → logprob: -8.717291831970215
    10. 'collections' → logprob: -9.342291831970215

Token 24: '

' (ID: 279)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.2215666025876999
    2. ' for' → logprob: -2.221566677093506
    3. '
' → logprob: -3.096566677093506
    4. 'd' → logprob: -3.721566677093506
    5. '\' → logprob: -5.096566677093506
    6. '' → logprob: -5.221566677093506
    7. '\n' → logprob: -5.471566677093506
    8. 'deque' → logprob: -6.846566677093506
    9. ':' → logprob: -7.471566677093506
    10. ' 
' → logprob: -7.596566677093506

Token 25: 'Buffer' (ID: 5722)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.05038980767130852
    2. 'd' → logprob: -3.4253897666931152
    3. ' for' → logprob: -4.675389766693115
    4. 'deque' → logprob: -5.675389766693115
    5. 'q' → logprob: -6.800389766693115
    6. ':' → logprob: -7.300389766693115
    7. 'de' → logprob: -7.550389766693115
    8. 'i' → logprob: -8.300390243530273
    9. 'queue' → logprob: -8.550390243530273
    10. 'stack' → logprob: -8.550390243530273

Token 26: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.015076645649969578
    2. '=' → logprob: -4.265076637268066
    3. '(' → logprob: -7.140076637268066
    4. ':' → logprob: -9.890076637268066
    5. '[' → logprob: -10.765076637268066
    6. ' ' → logprob: -11.015076637268066
    7. ',' → logprob: -12.140076637268066
    8. ')' → logprob: -12.515076637268066
    9. ' (' → logprob: -12.515076637268066
    10. '.' → logprob: -12.765076637268066

Token 27: ' deque' (ID: 90347)
  Prédit: ' deque'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' deque' → logprob: -0.47408926486968994
    2. 'deque' → logprob: -0.9740892648696899
    3. ' []' → logprob: -12.474089622497559
    4. 'Deque' → logprob: -12.599089622497559
    5. '[]' → logprob: -12.849089622497559
    6. 'de' → logprob: -13.849089622497559
    7. ' de' → logprob: -14.224089622497559
    8. ' ' → logprob: -15.849089622497559
    9. '(de' → logprob: -16.349088668823242
    10. ' dequeue' → logprob: -16.349088668823242

Token 28: '(max' (ID: 17178)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.2580900192260742
    2. '(' → logprob: -1.5080900192260742
    3. '([' → logprob: -5.758090019226074
    4. '([]' → logprob: -6.383090019226074
    5. '(Buffer' → logprob: -6.883090019226074
    6. '([(' → logprob: -9.883090019226074
    7. '(()' → logprob: -10.008090019226074
    8. '(P' → logprob: -10.383090019226074
    9. '((' → logprob: -10.383090019226074
    10. '(range' → logprob: -11.383090019226074

Token 29: 'len' (ID: 3303)
  Prédit: 'len'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.00804935023188591
    2. '_len' → logprob: -4.883049488067627
    3. '_length' → logprob: -8.383049011230469
    4. 'length' → logprob: -8.633049011230469
    5. ')' → logprob: -11.258049011230469
    6. 'size' → logprob: -11.883049011230469
    7. '_size' → logprob: -12.633049011230469
    8. '=' → logprob: -12.758049011230469
    9. '=len' → logprob: -13.008049011230469
    10. '_LEN' → logprob: -13.508049011230469

Token 30: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.08547421544790268
    2. '=N' → logprob: -2.5854742527008057
    3. '=P' → logprob: -5.085474014282227
    4. '=len' → logprob: -7.960474014282227
    5. '=int' → logprob: -12.085474014282227
    6. ' =' → logprob: -12.335474014282227
    7. '=M' → logprob: -12.835474014282227
    8. '=T' → logprob: -12.835474014282227
    9. '=C' → logprob: -12.960474014282227
    10. '=(' → logprob: -13.085474014282227

Token 31: '3' (ID: 18)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.03679152950644493
    2. ' N' → logprob: -4.4117913246154785
    3. '1' → logprob: -4.7867913246154785
    4. '2' → logprob: -5.0367913246154785
    5. '3' → logprob: -5.5367913246154785
    6. ' ' → logprob: -6.2867913246154785
    7. '5' → logprob: -7.0367913246154785
    8. '10' → logprob: -7.4117913246154785
    9. '100' → logprob: -7.7867913246154785
    10. '0' → logprob: -7.9117913246154785

Token 32: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.704273118884885e-07
    2. '))' → logprob: -14.625000953674316
    3. ')
' → logprob: -16.625
    4. ' )' → logprob: -16.75
    5. '')' → logprob: -17.375
    6. '`)' → logprob: -18.0
    7. ')

' → logprob: -18.125
    8. ')`' → logprob: -19.0
    9. ')))' → logprob: -19.875
    10. '）' → logprob: -20.0

Token 33: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.007793997880071402
    2. ' for' → logprob: -4.88279390335083
    3. '
' → logprob: -8.757794380187988
    4. '\n' → logprob: -11.507794380187988
    5. ':' → logprob: -12.382794380187988
    6. '' → logprob: -12.882794380187988
    7. '.' → logprob: -13.007794380187988
    8. 'For' → logprob: -13.132794380187988
    9. '```' → logprob: -13.257794380187988
    10. '<|end|>' → logprob: -13.632794380187988

Token 34: ' idx' (ID: 14016)
  Prédit: ' p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' p' → logprob: -0.5851497054100037
    2. ' i' → logprob: -0.9601497054100037
    3. ' x' → logprob: -3.8351497650146484
    4. ' ' → logprob: -4.210149765014648
    5. 'p' → logprob: -5.085149765014648
    6. 'i' → logprob: -5.335149765014648
    7. ' num' → logprob: -5.585149765014648
    8. ' P' → logprob: -5.835149765014648
    9. ' _' → logprob: -6.460149765014648
    10. ' v' → logprob: -6.960149765014648

Token 35: ',' (ID: 11)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.00897757988423109
    2. 'in' → logprob: -4.88397741317749
    3. ',' → logprob: -6.63397741317749
    4. ' ,' → logprob: -10.258977890014648
    5. ' ' → logprob: -11.258977890014648
    6. ',in' → logprob: -13.133977890014648
    7. '	in' → logprob: -13.383977890014648
    8. '_in' → logprob: -14.571477890014648
    9. '=' → logprob: -14.946477890014648
    10. ' i' → logprob: -15.008977890014648

Token 36: ' value' (ID: 1432)
  Prédit: ' p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' p' → logprob: -0.8609582185745239
    2. 'p' → logprob: -1.110958218574524
    3. 'val' → logprob: -2.9859580993652344
    4. 'num' → logprob: -3.2359580993652344
    5. 'value' → logprob: -3.3609580993652344
    6. ' val' → logprob: -3.4859580993652344
    7. ' value' → logprob: -3.6109580993652344
    8. ' num' → logprob: -3.9859580993652344
    9. 'x' → logprob: -4.860958099365234
    10. 'P' → logprob: -4.985958099365234

Token 37: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.026309587061405182
    2. 'in' → logprob: -3.6513094902038574
    3. ' ' → logprob: -12.776309967041016
    4. ',' → logprob: -12.776309967041016
    5. '	in' → logprob: -13.151309967041016
    6. '```' → logprob: -15.026309967041016
    7. '<|end|>' → logprob: -15.151309967041016
    8. ' ,' → logprob: -15.838809967041016
    9. '_in' → logprob: -15.901309967041016
    10. 's' → logprob: -16.213809967041016

Token 38: ' enumerate' (ID: 29671)
  Prédit: 'enumer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'enumer' → logprob: -0.2815296947956085
    2. ' enumerate' → logprob: -1.4065296649932861
    3. 'P' → logprob: -8.031529426574707
    4. ' P' → logprob: -10.156529426574707
    5. '(en' → logprob: -11.906529426574707
    6. '```' → logprob: -12.906529426574707
    7. 'range' → logprob: -13.656529426574707
    8. 'en' → logprob: -14.281529426574707
    9. 'enum' → logprob: -14.406529426574707
    10. ' enumer' → logprob: -14.656529426574707

Token 39: '(P' (ID: 8952)
  Prédit: '(P'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(P' → logprob: -0.0003112711710855365
    2. '(' → logprob: -8.250310897827148
    3. '(range' → logprob: -10.500310897827148
    4. 'P' → logprob: -11.625310897827148
    5. '((' → logprob: -12.000310897827148
    6. ' (' → logprob: -13.125310897827148
    7. '(en' → logprob: -13.375310897827148
    8. '(p' → logprob: -14.250310897827148
    9. '(N' → logprob: -14.625310897827148
    10. '(zip' → logprob: -15.000310897827148

Token 40: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0014490410685539246
    2. ')' → logprob: -7.126449108123779
    3. '):
' → logprob: -8.251448631286621
    4. ':' → logprob: -8.376448631286621
    5. ',' → logprob: -9.626448631286621
    6. ' ):' → logprob: -9.626448631286621
    7. '():' → logprob: -11.876448631286621
    8. '   ' → logprob: -12.501448631286621
    9. '[' → logprob: -13.376448631286621
    10. ' ' → logprob: -13.751448631286621

Token 41: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6415749788284302
    2. '   ' → logprob: -0.8915749788284302
    3. '    
' → logprob: -4.016574859619141
    4. ' 
' → logprob: -4.141574859619141
    5. '<|end|>' → logprob: -4.641574859619141
    6. '    ' → logprob: -4.891574859619141
    7. ' Buffer' → logprob: -5.391574859619141
    8. ' if' → logprob: -6.141574859619141
    9. '     
' → logprob: -7.141574859619141
    10. '  ' → logprob: -7.266574859619141

Token 42: ' Buffer' (ID: 17090)
  Prédit: ' Buffer'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Buffer' → logprob: -0.14617718756198883
    2. ' ' → logprob: -3.021177291870117
    3. ' 
' → logprob: -3.771177291870117
    4. '    ' → logprob: -4.021177291870117
    5. 'Buffer' (adapté à ' Buffer') → logprob: -4.021177291870117
    6. ' if' → logprob: -4.271177291870117
    7. '   ' → logprob: -5.021177291870117
    8. '(Buffer' → logprob: -6.021177291870117
    9. '    
' → logprob: -6.271177291870117
    10. '     
' → logprob: -6.521177291870117

Token 43: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.0006336859660223126
    2. '.' → logprob: -7.375633716583252
    3. '.extend' → logprob: -12.375633239746094
    4. '.app' → logprob: -13.500633239746094
    5. '.ap' → logprob: -14.375633239746094
    6. 'append' → logprob: -15.000633239746094
    7. ' .' → logprob: -15.500633239746094
    8. '.add' → logprob: -15.625633239746094
    9. '.clear' → logprob: -16.875633239746094
    10. '.Append' → logprob: -16.875633239746094

Token 44: '(value' (ID: 6333)
  Prédit: '(value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(value' → logprob: -0.00015908108616713434
    2. '(' → logprob: -8.75015926361084
    3. '(P' → logprob: -15.12515926361084
    4. '(
' → logprob: -15.87515926361084
    5. 'value' → logprob: -16.125158309936523
    6. '((' → logprob: -16.875158309936523
    7. '(Value' → logprob: -17.375158309936523
    8. ')value' → logprob: -18.250158309936523
    9. '()' → logprob: -18.750158309936523
    10. ' (' → logprob: -18.875158309936523

Token 45: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.012544618919491768
    2. ')
' → logprob: -4.387544631958008
    3. '   ' → logprob: -11.137544631958008
    4. ' )' → logprob: -11.637544631958008
    5. ')

' → logprob: -12.262544631958008
    6. ')
' → logprob: -12.387544631958008
    7. ' )
' → logprob: -13.887544631958008
    8. ' if' → logprob: -14.387544631958008
    9. ' ' → logprob: -15.012544631958008
    10. ',' → logprob: -15.512544631958008

Token 46: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00022368213103618473
    2. '    
' → logprob: -8.875224113464355
    3. ' if' → logprob: -10.250224113464355
    4. 'if' → logprob: -11.000224113464355
    5. '
' → logprob: -11.375224113464355
    6. '```' → logprob: -11.375224113464355
    7. '<|end|>' → logprob: -13.000224113464355
    8. '  
' → logprob: -13.625224113464355
    9. ' 
' → logprob: -13.750224113464355
    10. ' ' → logprob: -13.875224113464355

Token 47: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.24663065373897552
    2. 'if' (adapté à ' if') → logprob: -1.9966306686401367
    3. ' if' → logprob: -2.4966306686401367
    4. '    
' → logprob: -8.496630668640137
    5. ' ' → logprob: -9.746630668640137
    6. '```' → logprob: -10.371630668640137
    7. '  ' → logprob: -10.746630668640137
    8. '    ' → logprob: -10.871630668640137
    9. ' 
' → logprob: -11.121630668640137
    10. '
' → logprob: -11.121630668640137

Token 48: ' len' (ID: 4631)
  Prédit: ' len'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' len' → logprob: -0.020624924451112747
    2. ' Buffer' → logprob: -4.145625114440918
    3. 'len' → logprob: -5.645625114440918
    4. ' sum' → logprob: -8.020625114440918
    5. 'Buffer' → logprob: -8.145625114440918
    6. ' ' → logprob: -8.895625114440918
    7. ' Counter' → logprob: -9.270625114440918
    8. ' value' → logprob: -9.770625114440918
    9. ' idx' → logprob: -9.770625114440918
    10. '(len' → logprob: -10.520625114440918

Token 49: '(Buffer' (ID: 142828)
  Prédit: '(Buffer'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(Buffer' → logprob: -8.494741632603109e-05
    2. '(' → logprob: -9.37508487701416
    3. '(buffer' → logprob: -18.375085830688477
    4. '(B' → logprob: -18.500085830688477
    5. 'Buffer' → logprob: -18.625085830688477
    6. ' (' → logprob: -18.625085830688477
    7. '()' → logprob: -19.250085830688477
    8. '(
' → logprob: -19.250085830688477
    9. ')' → logprob: -19.500085830688477
    10. '.Buffer' → logprob: -19.750085830688477

Token 50: ')==' (ID: 35269)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3525328040122986
    2. '==' → logprob: -1.3525328636169434
    3. ')==' → logprob: -3.8525328636169434
    4. ' ==' → logprob: -4.102532863616943
    5. '<' → logprob: -7.977532863616943
    6. '=' → logprob: -8.727532386779785
    7. ' )' → logprob: -9.352532386779785
    8. ' <' → logprob: -10.727532386779785
    9. ')<' → logprob: -10.727532386779785
    10. '3' → logprob: -10.852532386779785

Token 51: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -6.861651490908116e-05
    2. ' ' → logprob: -9.625068664550781
    3. 'Buffer' → logprob: -13.000068664550781
    4. ' Buffer' → logprob: -16.12506866455078
    5. '   ' → logprob: -16.81256866455078
    6. '３' → logprob: -16.87506866455078
    7. '  ' → logprob: -17.56256866455078
    8. '```' → logprob: -17.68756866455078
    9. '۳' → logprob: -17.75006866455078
    10. '' → logprob: -17.81256866455078

Token 52: ':
' (ID: 734)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.017729006707668304
    2. 'and' → logprob: -4.392728805541992
    3. ':' → logprob: -5.267728805541992
    4. ':
' → logprob: -10.642728805541992
    5. '   ' → logprob: -11.517728805541992
    6. '<|end|>' → logprob: -11.892728805541992
    7. ' ' → logprob: -12.017728805541992
    8. '	and' → logprob: -13.017728805541992
    9. '  ' → logprob: -15.267728805541992
    10. '<|end|>' → logprob: -15.392728805541992

Token 53: '       ' (ID: 309)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.03726276010274887
    2. '       ' → logprob: -3.5372626781463623
    3. ':' → logprob: -5.287262916564941
    4. 'and' → logprob: -6.662262916564941
    5. '   ' → logprob: -7.037262916564941
    6. ':
' → logprob: -8.537262916564941
    7. '<|end|>' → logprob: -11.287262916564941
    8. '    ' → logprob: -11.412262916564941
    9. ' ' → logprob: -11.787262916564941
    10. ',' → logprob: -12.162262916564941

Token 54: ' sample' (ID: 10176)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.021053403615951538
    2. 'if' → logprob: -4.896053314208984
    3. '       ' → logprob: -5.021053314208984
    4. '           ' → logprob: -5.646053314208984
    5. ' and' → logprob: -6.521053314208984
    6. '   ' → logprob: -8.021053314208984
    7. '[' → logprob: -8.396053314208984
    8. ' ' → logprob: -8.771053314208984
    9. ' a' → logprob: -8.896053314208984
    10. 'sum' → logprob: -9.146053314208984

Token 55: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5051736831665039
    2. ' =' → logprob: -1.130173683166504
    3. 's' → logprob: -3.255173683166504
    4. 'd' → logprob: -4.130173683166504
    5. '[' → logprob: -5.255173683166504
    6. '_' → logprob: -6.005173683166504
    7. '_count' → logprob: -6.005173683166504
    8. '==' → logprob: -6.380173683166504
    9. '_counter' → logprob: -6.755173683166504
    10. 'sum' → logprob: -6.880173683166504

Token 56: ' Buffer' (ID: 17090)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.06996878236532211
    2. 'Buffer' → logprob: -3.4449687004089355
    3. 'set' → logprob: -4.4449687004089355
    4. 'sorted' → logprob: -4.8199687004089355
    5. 'sum' → logprob: -5.0699687004089355
    6. ' list' → logprob: -5.6949687004089355
    7. 'tuple' → logprob: -6.3199687004089355
    8. 'len' → logprob: -6.4449687004089355
    9. '[' → logprob: -6.5699687004089355
    10. 'Counter' → logprob: -7.8199687004089355

Token 57: '.copy' (ID: 22925)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.14643782377243042
    2. '[-' → logprob: -3.021437883377075
    3. '<|end|>' → logprob: -3.271437883377075
    4. '.count' → logprob: -3.896437883377075
    5. '
' → logprob: -4.146437644958496
    6. '[:]' → logprob: -5.771437644958496
    7. ' ' → logprob: -6.771437644958496
    8. '[count' → logprob: -6.896437644958496
    9. '[::-' → logprob: -6.896437644958496
    10. '```' → logprob: -7.021437644958496

Token 58: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0005022776313126087
    2. '()
' → logprob: -7.625502109527588
    3. '()

' → logprob: -12.375502586364746
    4. '(' → logprob: -12.500502586364746
    5. '()
' → logprob: -12.625502586364746
    6. '()`' → logprob: -14.000502586364746
    7. ' ()' → logprob: -14.625502586364746
    8. '()]' → logprob: -14.875502586364746
    9. '())' → logprob: -15.000502586364746
    10. '（）' → logprob: -15.750502586364746

Token 59: '       ' (ID: 309)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 60: ' sample' (ID: 10176)
  Prédit: 'sample'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sample' (adapté à ' sample') → logprob: -0.13530726730823517
    2. '.sort' → logprob: -3.1353073120117188
    3. '.sample' → logprob: -3.6353073120117188
    4. ' sample' → logprob: -4.010307312011719
    5. 'sorted' → logprob: -4.510307312011719
    6. '       ' → logprob: -4.760307312011719
    7. '.' → logprob: -5.260307312011719
    8. 'if' → logprob: -5.760307312011719
    9. 'sort' → logprob: -5.760307312011719
    10. ' if' → logprob: -6.385307312011719

Token 61: '.sort' (ID: 19551)
  Prédit: '.p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.p' → logprob: -0.7864827513694763
    2. '.sort' → logprob: -1.286482810974121
    3. '.rotate' → logprob: -2.661482810974121
    4. '.pop' → logprob: -2.911482810974121
    5. '.count' → logprob: -3.036482810974121
    6. '.' → logprob: -3.411482810974121
    7. '[' → logprob: -3.536482810974121
    8. '.append' → logprob: -5.036482810974121
    9. '.extend' → logprob: -5.161482810974121
    10. '.remove' → logprob: -5.286482810974121

Token 62: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00010330478107789531
    2. '(' → logprob: -9.375102996826172
    3. '(reverse' → logprob: -11.875102996826172
    4. '()
' → logprob: -13.125102996826172
    5. '()>' → logprob: -13.250102996826172
    6. '())' → logprob: -13.375102996826172
    7. '()<' → logprob: -13.625102996826172
    8. ')' → logprob: -14.375102996826172
    9. '(()' → logprob: -14.500102996826172
    10. '();' → logprob: -14.625102996826172

Token 63: '       ' (ID: 309)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.6122047901153564
    2. '   ' → logprob: -1.1122047901153564
    3. '       ' → logprob: -2.6122047901153564
    4. '<|end|>' → logprob: -3.1122047901153564
    5. ' if' → logprob: -6.112204551696777
    6. '[
' → logprob: -6.112204551696777
    7. ')' → logprob: -6.612204551696777
    8. '<|end|>' → logprob: -7.362204551696777
    9. '[]' → logprob: -7.487204551696777
    10. ',' → logprob: -7.612204551696777

Token 64: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -1.0656464099884033
    2. '   ' → logprob: -1.3156464099884033
    3. '       ' → logprob: -1.4406464099884033
    4. ' if' → logprob: -1.9406464099884033
    5. '[' → logprob: -5.565646171569824
    6. '```' → logprob: -7.065646171569824
    7. ' ' → logprob: -7.690646171569824
    8. 'If' → logprob: -7.815646171569824
    9. '           ' → logprob: -8.065646171569824
    10. ')' → logprob: -8.315646171569824

Token 65: ' Buffer' (ID: 17090)
  Prédit: ' sample'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sample' → logprob: -0.10259678214788437
    2. 'sample' → logprob: -2.4775967597961426
    3. ' Buffer' → logprob: -4.602596759796143
    4. '(sample' → logprob: -5.977596759796143
    5. 'Buffer' → logprob: -7.852596759796143
    6. ' value' → logprob: -8.6025972366333
    7. ' (' → logprob: -8.9775972366333
    8. ' list' → logprob: -9.9775972366333
    9. ' len' → logprob: -9.9775972366333
    10. 'Sample' → logprob: -10.3525972366333

Token 66: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.4834453761577606
    2. '==' → logprob: -0.983445405960083
    3. ' ==' → logprob: -4.733445167541504
    4. '[-' → logprob: -7.858445167541504
    5. '!=' → logprob: -10.108445167541504
    6. '[:]' → logprob: -10.483445167541504
    7. '==(' → logprob: -11.233445167541504
    8. '=' → logprob: -11.608445167541504
    9. '.index' → logprob: -12.358445167541504
    10. '==
' → logprob: -12.483445167541504

Token 67: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.5843618512153625
    2. '1' → logprob: -0.9593618512153625
    3. '2' → logprob: -3.2093617916107178
    4. '-' → logprob: -4.334362030029297
    5. '[' → logprob: -5.584362030029297
    6. ' ' → logprob: -7.334362030029297
    7. 'idx' → logprob: -7.709362030029297
    8. 'len' → logprob: -7.834362030029297
    9. ']' → logprob: -9.271862030029297
    10. '(' → logprob: -9.646862030029297

Token 68: ']' (ID: 60)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.4827805161476135
    2. ' ==' → logprob: -1.4827804565429688
    3. ']' → logprob: -2.7327804565429688
    4. '>' → logprob: -3.4827804565429688
    5. ']==' → logprob: -3.6077804565429688
    6. '<' → logprob: -4.482780456542969
    7. '=' → logprob: -4.857780456542969
    8. ' >' → logprob: -5.232780456542969
    9. '!=' → logprob: -6.232780456542969
    10. ' <' → logprob: -6.357780456542969

Token 69: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.20619194209575653
    2. ' ==' → logprob: -1.706191897392273
    3. '=' → logprob: -6.5811920166015625
    4. '>' → logprob: -6.7061920166015625
    5. '!=' → logprob: -7.2061920166015625
    6. '<' → logprob: -7.3311920166015625
    7. ' >' → logprob: -8.331192016601562
    8. ' !=' → logprob: -8.581192016601562
    9. ' <' → logprob: -9.206192016601562
    10. ' ' → logprob: -9.831192016601562

Token 70: ' sample' (ID: 10176)
  Prédit: 'sample'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sample' → logprob: -0.22544755041599274
    2. ' sample' → logprob: -1.6004475355148315
    3. ' ' → logprob: -11.225447654724121
    4. 'sorted' → logprob: -11.975447654724121
    5. '(sample' → logprob: -12.350447654724121
    6. 'Sample' → logprob: -12.600447654724121
    7. 'Buffer' → logprob: -13.850447654724121
    8. 'sam' → logprob: -14.100447654724121
    9. ' Buffer' → logprob: -14.350447654724121
    10. '3' → logprob: -14.350447654724121

Token 71: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.000193527273950167
    2. '1' → logprob: -9.00019359588623
    3. '[-' → logprob: -9.62519359588623
    4. '[len' → logprob: -13.75019359588623
    5. '2' → logprob: -13.87519359588623
    6. '-' → logprob: -15.00019359588623
    7. '```' → logprob: -15.00019359588623
    8. '0' → logprob: -15.25019359588623
    9. '\[' → logprob: -15.25019359588623
    10. 's' → logprob: -16.250192642211914

Token 72: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00048763392260298133
    2. '2' → logprob: -8.375487327575684
    3. '0' → logprob: -8.625487327575684
    4. ' ' → logprob: -9.750487327575684
    5. '-' → logprob: -11.875487327575684
    6. '   ' → logprob: -12.500487327575684
    7. '```' → logprob: -13.437987327575684
    8. ']' → logprob: -13.750487327575684
    9. ' -' → logprob: -14.312987327575684
    10. '
' → logprob: -14.437987327575684

Token 73: ']:
' (ID: 22152)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.006998331751674414
    2. ')' → logprob: -5.256998538970947
    3. ':' → logprob: -6.881998538970947
    4. '):
' → logprob: -7.881998538970947
    5. ']:' → logprob: -8.756998062133789
    6. ' and' → logprob: -9.256998062133789
    7. ' ):' → logprob: -10.131998062133789
    8. ' ' → logprob: -11.506998062133789
    9. '):
' → logprob: -11.631998062133789
    10. ']):' → logprob: -12.006998062133789

Token 74: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.2579888105392456
    2. '       ' → logprob: -2.132988929748535
    3. ' Counter' → logprob: -2.382988929748535
    4. ':' → logprob: -4.757988929748535
    5. 'Counter' → logprob: -5.882988929748535
    6. '   ' → logprob: -6.007988929748535
    7. '               ' → logprob: -6.882988929748535
    8. ' counter' → logprob: -8.257988929748535
    9. ':
' → logprob: -8.257988929748535
    10. '	       ' → logprob: -8.632988929748535

Token 75: ' Counter' (ID: 32251)
  Prédit: 'Counter'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Counter' (adapté à ' Counter') → logprob: -0.5761479735374451
    2. ' Counter' → logprob: -0.8261479735374451
    3. '   ' → logprob: -9.20114803314209
    4. '           ' → logprob: -9.95114803314209
    5. '       ' → logprob: -10.95114803314209
    6. '	C' → logprob: -11.95114803314209
    7. ' counter' → logprob: -12.32614803314209
    8. '    ' → logprob: -12.32614803314209
    9. '_counter' → logprob: -12.32614803314209
    10. ' ' → logprob: -12.70114803314209

Token 76: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.10039699077606201
    2. '+=' → logprob: -2.3503971099853516
    3. '+' → logprob: -8.600397109985352
    4. ' +' → logprob: -12.225397109985352
    5. '+="' → logprob: -14.725397109985352
    6. '+='' → logprob: -14.725397109985352
    7. ']+=' → logprob: -15.350397109985352
    8. ' ' → logprob: -15.975397109985352
    9. '=' → logprob: -16.47539710998535
    10. '<|end|>' → logprob: -16.72539710998535

Token 77: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.1517960956552997e-05
    2. ' ' → logprob: -11.375011444091797
    3. '2' → logprob: -18.250011444091797
    4. '3' → logprob: -19.125011444091797
    5. 'value' → logprob: -19.250011444091797
    6. '0' → logprob: -19.250011444091797
    7. '   ' → logprob: -19.625011444091797
    8. '<|end|>' → logprob: -19.625011444091797
    9. '10' → logprob: -19.875011444091797
    10. '100' → logprob: -20.125011444091797

Token 78: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -7.896309739408025e-07
    2. ' ' → logprob: -14.125000953674316
    3. '2' → logprob: -18.25
    4. '0' → logprob: -18.5
    5. 'value' → logprob: -19.0
    6. '10' → logprob: -19.125
    7. '100' → logprob: -19.375
    8. '```' → logprob: -19.5625
    9. '3' → logprob: -19.75
    10. '-' → logprob: -20.375

Token 79: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 80: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.15849696099758148
    2. '<|end|>' → logprob: -2.033496856689453
    3. ')' → logprob: -4.408496856689453
    4. ' print' → logprob: -7.033496856689453
    5. '
' → logprob: -7.158496856689453
    6. '#' → logprob: -7.283496856689453
    7. '```' → logprob: -7.283496856689453
    8. ' ' → logprob: -9.283496856689453
    9. '<|end|>' → logprob: -9.533496856689453
    10. '\n' → logprob: -9.908496856689453

Token 81: '(+' (ID: 72061)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.011342175304889679
    2. '(C' → logprob: -4.5113420486450195
    3. '((' → logprob: -9.51134204864502
    4. '("("' → logprob: -9.63634204864502
    5. '(Buffer' → logprob: -10.01134204864502
    6. '(`' → logprob: -10.26134204864502
    7. '('' → logprob: -10.63634204864502
    8. '()' → logprob: -10.63634204864502
    9. '(len' → logprob: -11.76134204864502
    10. '(counter' → logprob: -13.26134204864502

Token 82: 'Counter' (ID: 16263)
  Prédit: 'Counter'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Counter' → logprob: -0.0006297559011727571
    2. ' Counter' → logprob: -7.375629901885986
    3. 'ounter' → logprob: -13.500629425048828
    4. '1' → logprob: -14.500629425048828
    5. '.Counter' → logprob: -14.500629425048828
    6. 'C' → logprob: -15.000629425048828
    7. 'Coun' → logprob: -16.000629425048828
    8. 'Count' → logprob: -16.375629425048828
    9. '(C' → logprob: -16.750629425048828
    10. ' ' → logprob: -17.000629425048828

Token 83: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.7432603272027336e-06
    2. ' )' → logprob: -13.875001907348633
    3. '))' → logprob: -15.375001907348633
    4. ')
' → logprob: -15.750001907348633
    5. ')`' → logprob: -16.375001907348633
    6. '+)' → logprob: -16.875001907348633
    7. '(' → logprob: -17.000001907348633
    8. '+' → logprob: -17.000001907348633
    9. '`)' → logprob: -17.750001907348633
    10. '),' → logprob: -18.250001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 81
Tokens correctement prédits (1ère position, stricte): 28
Tokens correctement prédits (1ère position, avec adaptation): 31
Tokens correctement prédits (top 10): 62
Précision stricte (1ère position): 34.57%
Précision adaptée (1ère position): 38.27%
Précision (top 10): 76.54%
================================================================================
