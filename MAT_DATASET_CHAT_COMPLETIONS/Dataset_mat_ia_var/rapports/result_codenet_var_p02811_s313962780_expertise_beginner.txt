================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:31:34
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
k, x = map(int, input().split())

if 500 * k >= x:
    print('Yes')
else:
    print('No')
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'k' (ID: 74)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' x' (ID: 1215)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.04440468177199364
    2. ' =' → logprob: -3.6694047451019287
    3. ',' → logprob: -4.79440450668335
    4. ')' → logprob: -5.41940450668335
    5. '[' → logprob: -5.79440450668335
    6. '+' → logprob: -6.66940450668335
    7. ' ' → logprob: -8.044404983520508
    8. '.' → logprob: -8.669404983520508
    9. '_' → logprob: -9.294404983520508
    10. ']' → logprob: -9.544404983520508

Token 4: ' map' (ID: 4014)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.26768913865089417
    2. '0' → logprob: -2.1426892280578613
    3. '1' → logprob: -3.1426892280578613
    4. ' k' → logprob: -3.5176892280578613
    5. ' map' → logprob: -4.392689228057861
    6. '10' → logprob: -4.517689228057861
    7. 'map' → logprob: -4.642689228057861
    8. 'k' → logprob: -5.767689228057861
    9. '5' → logprob: -6.392689228057861
    10. 'y' → logprob: -6.517689228057861

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5445358753204346
    2. '(lambda' → logprob: -2.1695358753204346
    3. '<|end|>' → logprob: -2.2945358753204346
    4. '```' → logprob: -2.4195358753204346
    5. '(int' → logprob: -2.7945358753204346
    6. '(str' → logprob: -3.6695358753204346
    7. '[int' → logprob: -4.5445356369018555
    8. '<|end|>' → logprob: -5.5445356369018555
    9. '[' → logprob: -5.6695356369018555
    10. ')' → logprob: -7.0445356369018555

Token 6: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.29933738708496094
    2. ')' → logprob: -1.424337387084961
    3. '(' → logprob: -4.299337387084961
    4. 'input' → logprob: -5.799337387084961
    5. '<|end|>' → logprob: -8.049337387084961
    6. '),' → logprob: -8.674337387084961
    7. ',input' → logprob: -8.799337387084961
    8. ')(' → logprob: -9.424337387084961
    9. ' input' → logprob: -9.549337387084961
    10. '=input' → logprob: -9.549337387084961

Token 7: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.22557902336120605
    2. ' input' → logprob: -1.600579023361206
    3. ')' → logprob: -9.225579261779785
    4. '(input' → logprob: -9.725579261779785
    5. ',input' → logprob: -13.100579261779785
    6. 'raw' → logprob: -13.975579261779785
    7. ' ' → logprob: -14.350579261779785
    8. ' )' → logprob: -14.350579261779785
    9. '=input' → logprob: -14.475579261779785
    10. 's' → logprob: -14.475579261779785

Token 8: '().' (ID: 1454)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.700249433517456
    2. '())' → logprob: -1.575249433517456
    3. '()' → logprob: -2.200249433517456
    4. '(' → logprob: -2.325249433517456
    5. '(()' → logprob: -3.200249433517456
    6. '('' → logprob: -3.950249433517456
    7. '```' → logprob: -5.450249671936035
    8. '`()' → logprob: -5.700249671936035
    9. '().' → logprob: -5.950249671936035
    10. ')(' → logprob: -6.325249671936035

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00019388488726690412
    2. 'strip' → logprob: -8.62519359588623
    3. 'rstrip' → logprob: -12.00019359588623
    4. ' split' → logprob: -12.25019359588623
    5. ')' → logprob: -13.12519359588623
    6. '(split' → logprob: -14.25019359588623
    7. 'read' → logprob: -14.87519359588623
    8. 'spl' → logprob: -15.37519359588623
    9. '```' → logprob: -16.500194549560547
    10. 'startswith' → logprob: -16.625194549560547

Token 10: '())

' (ID: 27654)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.002495633438229561
    2. '))' → logprob: -6.627495765686035
    3. '())' → logprob: -7.002495765686035
    4. '`)' → logprob: -8.627495765686035
    5. '()' → logprob: -10.252495765686035
    6. '(' → logprob: -11.127495765686035
    7. ')`' → logprob: -11.377495765686035
    8. ' )' → logprob: -12.502495765686035
    9. '')' → logprob: -13.002495765686035
    10. ')))' → logprob: -13.502495765686035

Token 11: 'if' (ID: 366)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.36032241582870483
    2. '#' → logprob: -2.3603224754333496
    3. '*' → logprob: -2.3603224754333496
    4. ',' → logprob: -3.4853224754333496
    5. '
' → logprob: -4.23532247543335
    6. '**' → logprob: -4.61032247543335
    7. '\n' → logprob: -4.61032247543335
    8. '+
' → logprob: -4.61032247543335
    9. '[' → logprob: -4.98532247543335
    10. 'if' → logprob: -5.48532247543335

Token 12: ' ' (ID: 220)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.8722923994064331
    2. ' k' → logprob: -1.122292399406433
    3. ' ' → logprob: -1.372292399406433
    4. 'x' → logprob: -5.997292518615723
    5. 'k' → logprob: -7.997292518615723
    6. ' not' → logprob: -9.372292518615723
    7. '  ' → logprob: -10.497292518615723
    8. ' (' → logprob: -12.747292518615723
    9. ' ' → logprob: -13.247292518615723
    10. ' a' → logprob: -13.497292518615723

Token 13: '500' (ID: 3234)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.5761777758598328
    2. 'k' → logprob: -0.8261777758598328
    3. ' x' → logprob: -8.701177597045898
    4. ' k' → logprob: -9.576177597045898
    5. 'not' → logprob: -14.451177597045898
    6. '(x' → logprob: -14.701177597045898
    7. '(k' → logprob: -14.701177597045898
    8. 'kx' → logprob: -14.701177597045898
    9. ' ' → logprob: -15.701177597045898
    10. '   ' → logprob: -16.3261775970459

Token 14: ' *' (ID: 425)
  Prédit: ' <='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' <=' → logprob: -1.4192191362380981
    2. ' >=' → logprob: -1.9192191362380981
    3. '>' → logprob: -2.0442190170288086
    4. ' <' → logprob: -2.5442190170288086
    5. '>=' → logprob: -2.6692190170288086
    6. ' >' → logprob: -2.7942190170288086
    7. '*' → logprob: -2.7942190170288086
    8. '<=' → logprob: -2.9192190170288086
    9. ' ' → logprob: -3.2942190170288086
    10. '%' → logprob: -3.4192190170288086

Token 15: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.021024571731686592
    2. 'x' → logprob: -4.271024703979492
    3. ' k' → logprob: -5.021024703979492
    4. ' x' → logprob: -8.396024703979492
    5. '(k' → logprob: -12.896024703979492
    6. '(' → logprob: -13.146024703979492
    7. 'kx' → logprob: -13.521024703979492
    8. '0' → logprob: -13.771024703979492
    9. ' ' → logprob: -14.021024703979492
    10. '100' → logprob: -14.146024703979492

Token 16: ' >=' (ID: 5064)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -1.149301290512085
    2. ' <' → logprob: -1.524301290512085
    3. ' <=' → logprob: -1.899301290512085
    4. ' >=' → logprob: -1.899301290512085
    5. '>' → logprob: -2.649301290512085
    6. '<' → logprob: -2.774301290512085
    7. '>=' → logprob: -4.024301528930664
    8. '<=' → logprob: -4.524301528930664
    9. ' ' → logprob: -5.649301528930664
    10. ' ==' → logprob: -8.149301528930664

Token 17: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.0019414882408455014
    2. ' x' → logprob: -6.251941680908203
    3. ' ' → logprob: -12.001941680908203
    4. '100' → logprob: -12.376941680908203
    5. '   ' → logprob: -14.626941680908203
    6. '500' → logprob: -15.251941680908203
    7. '  ' → logprob: -15.376941680908203
    8. '300' → logprob: -15.876941680908203
    9. '6' → logprob: -16.126941680908203
    10. '50' → logprob: -16.126941680908203

Token 18: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.005237075500190258
    2. ' :' → logprob: -5.255237102508545
    3. ':**' → logprob: -13.380236625671387
    4. ' and' → logprob: -14.130236625671387
    5. ':
' → logprob: -15.130236625671387
    6. '):' → logprob: -16.130237579345703
    7. '+:' → logprob: -16.255237579345703
    8. ',' → logprob: -16.255237579345703
    9. '>:' → logprob: -16.755237579345703
    10. '.' → logprob: -16.880237579345703

Token 19: '   ' (ID: 271)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.6949660778045654
    2. 'print' → logprob: -0.8199660778045654
    3. ' ' → logprob: -4.0699663162231445
    4. '\n' → logprob: -4.1949663162231445
    5. ' \' → logprob: -4.8199663162231445
    6. '    ' → logprob: -4.9449663162231445
    7. ' 
' → logprob: -5.5699663162231445
    8. ''' → logprob: -6.0699663162231445
    9. '   ' → logprob: -6.3199663162231445
    10. '\' → logprob: -6.5699663162231445

Token 20: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.2519436180591583
    2. ' print' → logprob: -1.501943588256836
    3. '   ' → logprob: -12.001943588256836
    4. ' ' → logprob: -12.876943588256836
    5. '    ' → logprob: -13.001943588256836
    6. '```' → logprob: -14.251943588256836
    7. 'pr' → logprob: -14.751943588256836
    8. '\n' → logprob: -15.126943588256836
    9. '	print' → logprob: -15.126943588256836
    10. '\' → logprob: -15.251943588256836

Token 21: '('' (ID: 706)
  Prédit: '("'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.47931286692619324
    2. '(' → logprob: -0.9793128967285156
    3. '('' → logprob: -5.354312896728516
    4. '("("' → logprob: -8.229312896728516
    5. '(k' → logprob: -9.104312896728516
    6. '("")' → logprob: -10.479312896728516
    7. '"' → logprob: -10.479312896728516
    8. '()' → logprob: -10.604312896728516
    9. '("(' → logprob: -11.479312896728516
    10. '(True' → logprob: -12.104312896728516

Token 22: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.14635121822357178
    2. 'Hello' → logprob: -2.8963513374328613
    3. 'None' → logprob: -4.771351337432861
    4. ''.' → logprob: -5.396351337432861
    5. 'YES' → logprob: -5.646351337432861
    6. 'Happy' → logprob: -5.646351337432861
    7. '200' → logprob: -5.771351337432861
    8. ''' → logprob: -5.771351337432861
    9. '```' → logprob: -5.896351337432861
    10. ''*' → logprob: -6.333851337432861

Token 23: '')
' (ID: 2515)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.004086355213075876
    2. ')' → logprob: -5.504086494445801
    3. '')
' → logprob: -12.0040864944458
    4. '")' → logprob: -13.7540864944458
    5. ''' → logprob: -15.1290864944458
    6. '')
' → logprob: -15.6290864944458
    7. '')

' → logprob: -16.379085540771484
    8. '!' → logprob: -16.879085540771484
    9. '’)' → logprob: -16.879085540771484
    10. '`)' → logprob: -17.129085540771484

Token 24: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.023258639499545097
    2. ' else' → logprob: -3.773258686065674
    3. 'elif' → logprob: -11.523258209228516
    4. '<|end|>' → logprob: -13.523258209228516
    5. '_else' → logprob: -14.273258209228516
    6. '	else' → logprob: -14.898258209228516
    7. '```' → logprob: -14.898258209228516
    8. 'Else' → logprob: -16.023258209228516
    9. ' elif' → logprob: -16.148258209228516
    10. 'e' → logprob: -16.148258209228516

Token 25: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -2.6895233531831764e-05
    2. ':
' → logprob: -10.62502670288086
    3. ' :' → logprob: -13.00002670288086
    4. '   ' → logprob: -15.62502670288086
    5. ':
' → logprob: -17.62502670288086
    6. ':**' → logprob: -17.75002670288086
    7. '):' → logprob: -17.87502670288086
    8. ':return' → logprob: -18.12502670288086
    9. ':def' → logprob: -18.25002670288086
    10. ':

' → logprob: -18.50002670288086

Token 26: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.006630932446569204
    2. 'print' → logprob: -5.756630897521973
    3. '    ' → logprob: -6.131630897521973
    4. ' print' → logprob: -6.756630897521973
    5. '    
' → logprob: -10.506630897521973
    6. ' ' → logprob: -10.881630897521973
    7. '  ' → logprob: -11.506630897521973
    8. '```' → logprob: -11.631630897521973
    9. '       ' → logprob: -11.881630897521973
    10. '\n' → logprob: -12.006630897521973

Token 27: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.255588173866272
    2. 'print' (adapté à ' print') → logprob: -1.505588173866272
    3. '   ' → logprob: -5.630588054656982
    4. '    ' → logprob: -9.75558853149414
    5. '.print' → logprob: -13.00558853149414
    6. ' ' → logprob: -13.38058853149414
    7. '(print' → logprob: -13.75558853149414
    8. '	print' → logprob: -13.88058853149414
    9. '  ' → logprob: -14.25558853149414
    10. ' printf' → logprob: -15.13058853149414

Token 28: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.12693166732788086
    2. '(' → logprob: -2.126931667327881
    3. '("' → logprob: -13.376932144165039
    4. '()' → logprob: -14.001932144165039
    5. '('(' → logprob: -14.876932144165039
    6. ' ('' → logprob: -15.751932144165039
    7. '(\'' → logprob: -15.876932144165039
    8. '(('' → logprob: -15.876932144165039
    9. '(False' → logprob: -16.00193214416504
    10. ''' → logprob: -16.50193214416504

Token 29: 'No' (ID: 3160)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.25193482637405396
    2. 'No' → logprob: -1.5019347667694092
    3. '"No' → logprob: -13.251935005187988
    4. ''N' → logprob: -13.626935005187988
    5. ' No' → logprob: -13.751935005187988
    6. '   ' → logprob: -14.251935005187988
    7. '')' → logprob: -14.751935005187988
    8. ' ' → logprob: -15.126935005187988
    9. 'Yes' → logprob: -15.751935005187988
    10. ' '' → logprob: -16.251934051513672

Token 30: '')' (ID: 1542)
  Prédit: '')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -7.600714161526412e-05
    2. ')' → logprob: -9.500076293945312
    3. ''' → logprob: -14.125076293945312
    4. '')
' → logprob: -15.250076293945312
    5. '")' → logprob: -16.125076293945312
    6. '('' → logprob: -18.625076293945312
    7. '')
' → logprob: -18.750076293945312
    8. '')

' → logprob: -18.875076293945312
    9. ''))' → logprob: -19.625076293945312
    10. '`)' → logprob: -19.625076293945312


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 28
Tokens correctement prédits (1ère position, stricte): 7
Tokens correctement prédits (1ère position, avec adaptation): 8
Tokens correctement prédits (top 10): 24
Précision stricte (1ère position): 25.00%
Précision adaptée (1ère position): 28.57%
Précision (top 10): 85.71%
================================================================================
