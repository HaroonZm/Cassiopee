================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:28:19
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
# Début de la définition de la fonction principale appelée 'main'
def main():
    # On lit une ligne de texte depuis l'entrée standard (par défaut le clavier),
    # puis on applique la méthode split() qui sépare la chaîne en une liste de sous-chaînes
    # à chaque espace rencontré. Par exemple, si l'utilisateur tape "3 2", cela retourne ["3", "2"].
    # Ensuite, on utilise map() pour appliquer la fonction int à chaque élément de la liste,
    # ce qui convertit chaque sous-chaîne (qui représente un chiffre) en un nombre entier.
    # Enfin, les deux entiers récupérés sont assignés respectivement à N et K.
    N, K = map(int, input().split())

    # On lit de nouveau une ligne de texte de l'utilisateur. L'utilisateur devrait saisir N entiers séparés par des espaces.
    # On utilise input(), puis split() afin de récupérer une liste de chaînes de caractères.
    # On applique map(int, ...) pour convertir chaque chaîne en entier.
    # On convertit finalement l'objet obtenu grâce à map() en une vraie liste d'entiers, que l’on assigne à la variable H.
    H = list(map(int, input().split()))

    # On trie la liste H en ordre décroissant. La fonction sorted() retourne une nouvelle liste triée.
    # L'argument reverse=True indique que l'on veut un tri par ordre décroissant (du plus grand au plus petit).
    # Ainsi, le ou les plus grands éléments de la liste seront placés au début de la liste.
    H = sorted(H, reverse=True)

    # On teste si le nombre d'éléments N est inférieur ou égal à K.
    # Cela signifie qu'il y a autant (ou plus) d'éléments que la valeur de K.
    if N <= K:
        # Dans ce cas, on affiche simplement '0' grâce à la fonction print().
        # Cela signifie probablement (dans le contexte original) qu'aucun coût n'est requis, 
        # ou qu'aucune opération n'est nécessaire.
        print(0)
    else:
        # Sinon (c'est-à-dire si N > K), on considère les éléments de l'indice K (inclus)
        # jusqu'à la fin de la liste H, grâce au découpage H[K:].
        # En Python, H[K:] crée une nouvelle liste à partir du (K+1)-ième élément jusqu'au dernier.
        # On applique la fonction sum() sur cette sous-liste afin de calculer la somme de tous ses éléments.
        # Enfin, on affiche le résultat avec print().
        print(sum(H[K:]))

# Ce bloc est une convention en Python pour s'assurer que le code suivant s'exécute seulement
# si ce fichier est exécuté directement (et pas supposé être importé dans un autre module).
if __name__ == '__main__':
    # On appelle la fonction main pour démarrer le programme.
    main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: '#' (ID: 2)
  → Token d'amorce (pas de prédiction)

Token 1: ' Dé' (ID: 27247)
  → Token d'amorce (pas de prédiction)

Token 2: 'but' (ID: 8293)
  → Token d'amorce (pas de prédiction)

Token 3: ' de' (ID: 334)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '```' → logprob: -1.2144927978515625
    2. '#' → logprob: -1.4644927978515625
    3. '\n' → logprob: -1.8394927978515625
    4. ':' → logprob: -2.2144927978515625
    5. '\' → logprob: -2.3394927978515625
    6. ' ' → logprob: -3.5894927978515625
    7. ' #' → logprob: -3.8394927978515625
    8. ' :' → logprob: -4.3394927978515625
    9. ' ```' → logprob: -4.3394927978515625
    10. '_' → logprob: -5.0894927978515625

Token 4: ' la' (ID: 557)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.16736552119255066
    2. ' la' → logprob: -3.167365550994873
    3. ' code' → logprob: -3.167365550994873
    4. 'l' → logprob: -3.667365550994873
    5. ' ' → logprob: -4.292365550994873
    6. ' l' → logprob: -4.667365550994873
    7. ' #' → logprob: -5.042365550994873
    8. 'le' → logprob: -5.917365550994873
    9. ' ligne' → logprob: -5.917365550994873
    10. ' fichier' → logprob: -5.917365550994873

Token 5: ' définition' (ID: 116583)
  Prédit: 'fonction'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'fonction' → logprob: -0.025077417492866516
    2. 'f' → logprob: -5.4000773429870605
    3. 'function' → logprob: -5.4000773429870605
    4. 'classe' → logprob: -5.6500773429870605
    5. 'ligne' → logprob: -5.9000773429870605
    6. 'programme' → logprob: -5.9000773429870605
    7. 'script' → logprob: -6.6500773429870605
    8. 'def' → logprob: -7.0250773429870605
    9. ' fonction' → logprob: -7.1500773429870605
    10. 'class' → logprob: -7.1500773429870605

Token 6: ' de' (ID: 334)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3005243241786957
    2. '_' → logprob: -1.550524353981018
    3. ':' → logprob: -4.5505242347717285
    4. ' d' → logprob: -4.6755242347717285
    5. 'def' → logprob: -5.0505242347717285
    6. 's' → logprob: -5.3005242347717285
    7. ' :' → logprob: -5.9255242347717285
    8. '(' → logprob: -6.0505242347717285
    9. ' _' → logprob: -6.3005242347717285
    10. ' ' → logprob: -6.4255242347717285

Token 7: ' la' (ID: 557)
  Prédit: ' la'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -1.2494893074035645
    2. '_' → logprob: -1.7494893074035645
    3. 'fonction' → logprob: -1.8744893074035645
    4. ' ' → logprob: -2.1244893074035645
    5. 'l' → logprob: -2.8744893074035645
    6. 'def' → logprob: -2.9994893074035645
    7. 'une' → logprob: -3.7494893074035645
    8. 'class' → logprob: -3.8744893074035645
    9. 'classe' → logprob: -4.3744893074035645
    10. 'la' → logprob: -4.3744893074035645

Token 8: ' fonction' (ID: 17610)
  Prédit: 'fonction'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'fonction' → logprob: -0.18848031759262085
    2. '_' → logprob: -2.6884803771972656
    3. ' ' → logprob: -3.1884803771972656
    4. 'f' → logprob: -3.5634803771972656
    5. 'function' → logprob: -5.063480377197266
    6. ' fonction' → logprob: -5.063480377197266
    7. 'classe' → logprob: -5.313480377197266
    8. '_f' → logprob: -5.438480377197266
    9. ' ' → logprob: -5.938480377197266
    10. ' _' → logprob: -6.188480377197266

Token 9: ' principale' (ID: 68926)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.7314910888671875
    2. 'def' → logprob: -0.7314910888671875
    3. ' ' → logprob: -4.1064910888671875
    4. '```' → logprob: -4.8564910888671875
    5. ' d' → logprob: -5.4814910888671875
    6. '_' → logprob: -5.9814910888671875
    7. ' def' → logprob: -6.8564910888671875
    8. '`' → logprob: -7.1064910888671875
    9. 'n' → logprob: -7.2314910888671875
    10. '(' → logprob: -7.3564910888671875

Token 10: ' appelée' (ID: 179130)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.28939148783683777
    2. 'd' → logprob: -1.5393915176391602
    3. '\' → logprob: -3.66439151763916
    4. '```' → logprob: -4.66439151763916
    5. '\n' → logprob: -7.28939151763916
    6. ' 
' → logprob: -7.66439151763916
    7. '``' → logprob: -8.66439151763916
    8. '`' → logprob: -9.28939151763916
    9. ' ' → logprob: -9.91439151763916
    10. '#' → logprob: -10.03939151763916

Token 11: ' '' (ID: 461)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.4656338095664978
    2. '(' → logprob: -1.4656338691711426
    3. ' ' → logprob: -3.5906338691711426
    4. '\' → logprob: -3.8406338691711426
    5. ' (' → logprob: -4.090633869171143
    6. 'd' → logprob: -4.465633869171143
    7. '_' → logprob: -4.590633869171143
    8. ' ' → logprob: -4.840633869171143
    9. '.' → logprob: -5.465633869171143
    10. ' de' → logprob: -5.465633869171143

Token 12: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.00017469677550252527
    2. ' main' → logprob: -10.125174522399902
    3. 'principal' → logprob: -10.250174522399902
    4. 'ma' → logprob: -10.375174522399902
    5. 'programme' → logprob: -10.500174522399902
    6. 'def' → logprob: -11.500174522399902
    7. '```' → logprob: -11.625174522399902
    8. 'program' → logprob: -11.875174522399902
    9. 'princip' → logprob: -12.625174522399902
    10. '`' → logprob: -12.750174522399902

Token 13: ''
' (ID: 2207)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.7553368806838989
    2. ''' → logprob: -1.630336880683899
    3. ')' → logprob: -1.880336880683899
    4. 'def' → logprob: -2.3803367614746094
    5. ''''' → logprob: -3.5053367614746094
    6. '```' → logprob: -3.8803367614746094
    7. '(' → logprob: -4.380336761474609
    8. 'e' → logprob: -4.880336761474609
    9. '('' → logprob: -5.630336761474609
    10. '_' → logprob: -5.755336761474609

Token 14: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.011105360463261604
    2. '\' → logprob: -5.136105537414551
    3. ':' → logprob: -6.386105537414551
    4. '```' → logprob: -6.386105537414551
    5. '(' → logprob: -8.01110553741455
    6. 'd' → logprob: -8.13610553741455
    7. '()' → logprob: -8.26110553741455
    8. '\n' → logprob: -8.38610553741455
    9. ' def' → logprob: -8.63610553741455
    10. '():' → logprob: -8.88610553741455

Token 15: ' main' (ID: 2758)
  Prédit: ' main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.0006735934875905514
    2. ' ' → logprob: -7.500673770904541
    3. ' ' → logprob: -9.500673294067383
    4. 'main' → logprob: -10.250673294067383
    5. '_main' → logprob: -11.750673294067383
    6. '	main' → logprob: -13.875673294067383
    7. ' _' → logprob: -14.000673294067383
    8. ' principale' → logprob: -15.125673294067383
    9. ' def' → logprob: -16.000673294067383
    10. '_' → logprob: -16.000673294067383

Token 16: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.018290061503648758
    2. '(' → logprob: -4.018290042877197
    3. '()' → logprob: -9.768290519714355
    4. ':' → logprob: -10.393290519714355
    5. ' ():' → logprob: -10.768290519714355
    6. '(:' → logprob: -10.768290519714355
    7. '(
' → logprob: -12.893290519714355
    8. '(":' → logprob: -13.143290519714355
    9. '():
' → logprob: -13.518290519714355
    10. '```' → logprob: -14.143290519714355

Token 17: '   ' (ID: 271)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.35998988151550293
    2. '   ' → logprob: -1.984989881515503
    3. '\' → logprob: -2.109989881515503
    4. '    
' → logprob: -3.734989881515503
    5. '    ' → logprob: -4.859990119934082
    6. '
' → logprob: -5.859990119934082
    7. ' 
' → logprob: -6.109990119934082
    8. ' ' → logprob: -6.609990119934082
    9. '' → logprob: -6.984990119934082
    10. '\r' → logprob: -7.234990119934082

Token 18: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7364417910575867
    2. ' ' → logprob: -2.1114418506622314
    3. 'pass' → logprob: -2.1114418506622314
    4. '#' (adapté à ' #') → logprob: -2.3614418506622314
    5. '    ' → logprob: -2.4864418506622314
    6. ' pass' → logprob: -2.8614418506622314
    7. 'print' → logprob: -3.4864418506622314
    8. 'p' → logprob: -5.611441612243652
    9. '  ' → logprob: -6.236441612243652
    10. ' #' → logprob: -6.861441612243652

Token 19: ' On' (ID: 2160)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11349872499704361
    2. 'pass' → logprob: -2.9884986877441406
    3. '    ' → logprob: -4.113498687744141
    4. 'print' → logprob: -4.113498687744141
    5. ' pass' → logprob: -4.238498687744141
    6. '#' → logprob: -5.863498687744141
    7. 'n' → logprob: -5.863498687744141
    8. ' ' → logprob: -6.738498687744141
    9. '       ' → logprob: -7.238498687744141
    10. ' print' → logprob: -7.863498687744141

Token 20: ' lit' (ID: 11980)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01213414128869772
    2. ' print' → logprob: -5.762134075164795
    3. 'def' → logprob: -6.262134075164795
    4. '  ' → logprob: -6.762134075164795
    5. ' continue' → logprob: -6.887134075164795
    6. ' ' → logprob: -7.012134075164795
    7. 'print' → logprob: -7.637134075164795
    8. '    ' → logprob: -8.137134552001953
    9. ' a' → logprob: -8.387134552001953
    10. 'space' → logprob: -8.387134552001953

Token 21: ' une' (ID: 2463)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.0767093300819397
    2. '()' → logprob: -3.076709270477295
    3. '(' → logprob: -4.951709270477295
    4. ' l' → logprob: -5.076709270477295
    5. ' la' → logprob: -6.201709270477295
    6. ' )' → logprob: -6.326709270477295
    7. '    ' → logprob: -6.451709270477295
    8. 'l' → logprob: -6.576709270477295
    9. '   ' → logprob: -6.576709270477295
    10. ' input' → logprob: -6.701709270477295

Token 22: ' ligne' (ID: 19583)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.021336426958441734
    2. ' chaîne' → logprob: -5.021336555480957
    3. ' ligne' → logprob: -5.146336555480957
    4. 'entrée' → logprob: -6.646336555480957
    5. ' entrée' → logprob: -6.646336555480957
    6. ' chaine' → logprob: -6.896336555480957
    7. '   ' → logprob: -6.896336555480957
    8. ' phrase' → logprob: -7.021336555480957
    9. ' valeur' → logprob: -7.771336555480957
    10. 'chaine' → logprob: -7.771336555480957

Token 23: ' de' (ID: 334)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7057381272315979
    2. '<|end|>' → logprob: -1.7057380676269531
    3. '    ' → logprob: -2.080738067626953
    4. '   ' → logprob: -2.580738067626953
    5. '<|end|>' → logprob: -3.455738067626953
    6. '()' → logprob: -3.455738067626953
    7. '  ' → logprob: -4.080738067626953
    8. ' )' → logprob: -5.330738067626953
    9. ' (' → logprob: -5.330738067626953
    10. 's' → logprob: -5.455738067626953

Token 24: ' texte' (ID: 53492)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'l' → logprob: -1.3311423063278198
    2. ' input' → logprob: -1.3311423063278198
    3. ' code' → logprob: -1.4561423063278198
    4. ' l' → logprob: -2.7061424255371094
    5. 'code' → logprob: -2.8311424255371094
    6. 'input' → logprob: -3.5811424255371094
    7. 'entrée' → logprob: -3.5811424255371094
    8. 's' → logprob: -3.8311424255371094
    9. 'texte' → logprob: -4.456142425537109
    10. ' ' → logprob: -4.706142425537109

Token 25: ' depuis' (ID: 16277)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.031200747936964035
    2. '    ' → logprob: -3.656200647354126
    3. 'input' → logprob: -6.781200885772705
    4. '    
' → logprob: -7.156200885772705
    5. '       ' → logprob: -7.281200885772705
    6. ',' → logprob: -7.656200885772705
    7. ' =' → logprob: -8.156200408935547
    8. 'user' → logprob: -8.281200408935547
    9. 's' → logprob: -8.531200408935547
    10. ' input' → logprob: -9.031200408935547

Token 26: ' l' (ID: 305)
  Prédit: ' l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.7389236688613892
    2. ' input' → logprob: -1.1139236688613892
    3. 'l' → logprob: -1.9889236688613892
    4. '   ' → logprob: -3.3639235496520996
    5. 'input' → logprob: -4.2389235496521
    6. ' ' → logprob: -5.3639235496521
    7. ' la' → logprob: -6.8639235496521
    8. ' stdin' → logprob: -8.113924026489258
    9. '	l' → logprob: -8.363924026489258
    10. '```' → logprob: -8.488924026489258

Token 27: ''entrée' (ID: 115820)
  Prédit: ''entrée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''entrée' → logprob: -0.322619765996933
    2. 'entrée' → logprob: -2.322619676589966
    3. 'input' → logprob: -2.322619676589966
    4. ''' → logprob: -3.947619676589966
    5. ''utilisateur' → logprob: -3.947619676589966
    6. '   ' → logprob: -4.447619915008545
    7. 'e' → logprob: -4.947619915008545
    8. 'a' → logprob: -5.197619915008545
    9. ' input' → logprob: -5.697619915008545
    10. '=input' → logprob: -5.947619915008545

Token 28: ' standard' (ID: 7024)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5590318441390991
    2. 'user' → logprob: -1.8090318441390991
    3. ' utilisateur' → logprob: -2.6840319633483887
    4. 'input' → logprob: -2.9340319633483887
    5. ' input' → logprob: -3.0590319633483887
    6. ' user' → logprob: -3.3090319633483887
    7. '()' → logprob: -4.434031963348389
    8. 's' → logprob: -4.684031963348389
    9. ' standard' → logprob: -5.059031963348389
    10. '(input' → logprob: -5.434031963348389

Token 29: ' (' (ID: 350)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01920999400317669
    2. 'input' → logprob: -4.394209861755371
    3. 'user' → logprob: -6.519209861755371
    4. 's' → logprob: -6.894209861755371
    5. '    
' → logprob: -6.894209861755371
    6. '    ' → logprob: -7.144209861755371
    7. ',' → logprob: -7.144209861755371
    8. ' input' → logprob: -8.019209861755371
    9. 't' → logprob: -9.144209861755371
    10. '=input' → logprob: -9.269209861755371

Token 30: 'par' (ID: 796)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4802190363407135
    2. ' input' → logprob: -1.7302190065383911
    3. 'input' → logprob: -2.1052191257476807
    4. ' )' → logprob: -3.2302191257476807
    5. ' ' → logprob: -4.105218887329102
    6. '   ' → logprob: -4.105218887329102
    7. 'l' → logprob: -5.480218887329102
    8. 's' → logprob: -7.355218887329102
    9. ' l' → logprob: -7.605218887329102
    10. ' la' → logprob: -7.605218887329102

Token 31: ' défaut' (ID: 79375)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -1.279567003250122
    2. ' défaut' → logprob: -1.279567003250122
    3. 'ex' → logprob: -2.029567003250122
    4. 'input' → logprob: -2.654567003250122
    5. 'ent' → logprob: -3.279567003250122
    6. 'l' → logprob: -3.529567003250122
    7. ' def' → logprob: -3.779567003250122
    8. ' input' → logprob: -4.029566764831543
    9. '```' → logprob: -4.154566764831543
    10. 'entrée' → logprob: -4.404566764831543

Token 32: ' le' (ID: 505)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.1518791913986206
    2. ' )' → logprob: -2.02687931060791
    3. ',' → logprob: -5.27687931060791
    4. ' ' → logprob: -6.90187931060791
    5. 'input' → logprob: -6.90187931060791
    6. ' input' → logprob: -7.02687931060791
    7. '   ' → logprob: -7.90187931060791
    8. ' ,' → logprob: -8.65187931060791
    9. ' via' → logprob: -9.27687931060791
    10. ' en' → logprob: -9.77687931060791

Token 33: ' clavier' (ID: 187878)
  Prédit: ' clavier'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' clavier' → logprob: -0.5424738526344299
    2. 'cl' → logprob: -1.6674737930297852
    3. '   ' → logprob: -2.417473793029785
    4. 'input' → logprob: -3.917473793029785
    5. 'u' → logprob: -3.917473793029785
    6. 's' → logprob: -4.042473793029785
    7. ' utilisateur' → logprob: -4.292473793029785
    8. 't' → logprob: -4.292473793029785
    9. 'user' → logprob: -4.667473793029785
    10. 'util' → logprob: -5.042473793029785

Token 34: '),
' (ID: 2313)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.016114838421344757
    2. '   ' → logprob: -4.266114711761475
    3. ' )' → logprob: -6.391114711761475
    4. ')
' → logprob: -9.266115188598633
    5. '')' → logprob: -9.891115188598633
    6. '`)' → logprob: -10.641115188598633
    7. '#' → logprob: -10.891115188598633
    8. ' ' → logprob: -10.891115188598633
    9. '")' → logprob: -11.016115188598633
    10. ',' → logprob: -11.891115188598633

Token 35: '   ' (ID: 271)
  Prédit: '    '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '    ' → logprob: -0.2376428097486496
    2. '   ' → logprob: -1.737642765045166
    3. ' ' → logprob: -4.862642765045166
    4. ' et' → logprob: -5.737642765045166
    5. ' input' → logprob: -5.987642765045166
    6. ')' → logprob: -6.112642765045166
    7. ' )' → logprob: -6.237642765045166
    8. ' la' → logprob: -6.362642765045166
    9. ' puis' → logprob: -6.362642765045166
    10. '    
' → logprob: -6.737642765045166

Token 36: ' #' (ID: 1069)
  Prédit: '    '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '    ' → logprob: -0.27087169885635376
    2. '   ' → logprob: -1.520871639251709
    3. ' ' → logprob: -5.270871639251709
    4. ' )' → logprob: -5.770871639251709
    5. ' input' → logprob: -6.520871639251709
    6. ')' → logprob: -6.645871639251709
    7. 't' → logprob: -7.270871639251709
    8. '  ' → logprob: -7.270871639251709
    9. ' ligne' → logprob: -7.895871639251709
    10. '     
' → logprob: -7.895871639251709

Token 37: ' puis' (ID: 18766)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.34519246220588684
    2. 'texte' → logprob: -2.8451924324035645
    3. ' texte' → logprob: -3.0951924324035645
    4. ' input' → logprob: -3.3451924324035645
    5. ' ligne' → logprob: -3.4701924324035645
    6. ' line' → logprob: -3.5951924324035645
    7. ' text' → logprob: -4.0951924324035645
    8. 'chaine' → logprob: -4.2201924324035645
    9. ' phrase' → logprob: -4.4701924324035645
    10. ' chaine' → logprob: -4.7201924324035645

Token 38: ' on' (ID: 402)
  Prédit: ' on'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' on' → logprob: -0.05867695435881615
    2. 'on' → logprob: -3.3086769580841064
    3. ' la' → logprob: -4.558676719665527
    4. ' stock' → logprob: -6.058676719665527
    5. 'la' → logprob: -6.183676719665527
    6. 'strip' → logprob: -6.683676719665527
    7. ' strip' → logprob: -7.183676719665527
    8. 'stock' → logprob: -7.558676719665527
    9. '   ' → logprob: -7.808676719665527
    10. ' ona' → logprob: -7.933676719665527

Token 39: ' applique' (ID: 180579)
  Prédit: ' stock'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' stock' → logprob: -0.8674860000610352
    2. 'la' → logprob: -2.617486000061035
    3. ' récup' → logprob: -2.617486000061035
    4. 'strip' → logprob: -2.742486000061035
    5. ' la' → logprob: -2.867486000061035
    6. 'stock' → logprob: -2.992486000061035
    7. 'split' → logprob: -3.242486000061035
    8. ' continue' → logprob: -3.617486000061035
    9. ' transforme' → logprob: -3.867486000061035
    10. ' utilise' → logprob: -3.992486000061035

Token 40: ' la' (ID: 557)
  Prédit: '.strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.strip' → logprob: -0.7145090103149414
    2. ' la' → logprob: -0.9645090103149414
    3. 'strip' → logprob: -3.3395090103149414
    4. '.' → logprob: -3.4645090103149414
    5. '.lower' → logprob: -4.089509010314941
    6. ' .' → logprob: -4.214509010314941
    7. ' strip' → logprob: -4.839509010314941
    8. 'la' → logprob: -4.964509010314941
    9. '   ' → logprob: -5.714509010314941
    10. '.rstrip' → logprob: -5.839509010314941

Token 41: ' méthode' (ID: 71490)
  Prédit: '.strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.strip' → logprob: -0.6434029936790466
    2. ' strip' → logprob: -1.7684030532836914
    3. 'strip' → logprob: -2.0184030532836914
    4. ' méthode' → logprob: -2.2684030532836914
    5. '.lower' → logprob: -4.143403053283691
    6. ' fonction' → logprob: -4.768403053283691
    7. 'mé' → logprob: -5.143403053283691
    8. ' method' → logprob: -5.268403053283691
    9. ' function' → logprob: -5.393403053283691
    10. ' input' → logprob: -5.393403053283691

Token 42: ' split' (ID: 12648)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.24056971073150635
    2. '.strip' → logprob: -1.7405697107315063
    3. ' strip' → logprob: -3.615569591522217
    4. 'rstrip' → logprob: -5.365569591522217
    5. 'split' → logprob: -6.365569591522217
    6. '.lower' → logprob: -6.365569591522217
    7. ' .' → logprob: -6.740569591522217
    8. 'lower' → logprob: -6.865569591522217
    9. '.' → logprob: -8.615570068359375
    10. 'str' → logprob: -8.990570068359375

Token 43: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.002961300313472748
    2. '(' → logprob: -5.877961158752441
    3. '('' → logprob: -9.502961158752441
    4. '()

' → logprob: -11.252961158752441
    5. ' ()' → logprob: -11.502961158752441
    6. '("")' → logprob: -11.752961158752441
    7. '("' → logprob: -11.877961158752441
    8. '(
' → logprob: -12.252961158752441
    9. '()]' → logprob: -12.377961158752441
    10. '()
' → logprob: -12.377961158752441

Token 44: ' qui' (ID: 2780)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0037901040632277727
    2. '(' → logprob: -5.878789901733398
    3. '('' → logprob: -8.503789901733398
    4. '()

' → logprob: -8.503789901733398
    5. ' ()' → logprob: -8.878789901733398
    6. '()
' → logprob: -9.628789901733398
    7. '   ' → logprob: -10.253789901733398
    8. '(),' → logprob: -10.503789901733398
    9. '().' → logprob: -10.503789901733398
    10. '```' → logprob: -10.503789901733398

Token 45: ' sé' (ID: 7462)
  Prédit: ' sé'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sé' → logprob: -0.5595977902412415
    2. ' décou' → logprob: -1.6845977306365967
    3. ' div' → logprob: -1.9345977306365967
    4. 'div' → logprob: -3.0595977306365967
    5. 'sé' → logprob: -4.309597969055176
    6. 'd' → logprob: -5.184597969055176
    7. 's' → logprob: -5.434597969055176
    8. ' sc' → logprob: -5.559597969055176
    9. ' crée' → logprob: -5.684597969055176
    10. ' coupe' → logprob: -5.684597969055176

Token 46: 'pare' (ID: 6900)
  Prédit: 'pare'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pare' → logprob: -1.27099974633893e-05
    2. 'paration' → logprob: -12.250012397766113
    3. 'par' → logprob: -12.750012397766113
    4. 'parer' → logprob: -12.750012397766113
    5. 'p' → logprob: -13.750012397766113
    6. 'parate' → logprob: -15.500012397766113
    7. 'parent' → logprob: -15.500012397766113
    8. 'para' → logprob: -15.750012397766113
    9. 'Pare' → logprob: -15.750012397766113
    10. ' pare' → logprob: -16.87501335144043

Token 47: ' la' (ID: 557)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -1.1621677875518799
    2. ' la' → logprob: -1.4121677875518799
    3. ' l' → logprob: -1.5371677875518799
    4. ' ' → logprob: -2.78716778755188
    5. ' le' → logprob: -3.03716778755188
    6. '<|end|>' → logprob: -3.41216778755188
    7. ' les' → logprob: -3.66216778755188
    8. 's' → logprob: -4.037167549133301
    9. '('' → logprob: -4.662167549133301
    10. 'l' → logprob: -5.287167549133301

Token 48: ' chaîne' (ID: 89288)
  Prédit: ' chaîne'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaîne' → logprob: -0.04892729967832565
    2. ' chaine' → logprob: -3.7989273071289062
    3. 'chaine' → logprob: -4.173927307128906
    4. 's' → logprob: -6.173927307128906
    5. ' phrase' → logprob: -6.173927307128906
    6. ' string' → logprob: -6.173927307128906
    7. 'cha' → logprob: -6.423927307128906
    8. ' ligne' → logprob: -7.048927307128906
    9. 'string' → logprob: -8.048927307128906
    10. ' chaînes' → logprob: -8.298927307128906

Token 49: ' en' (ID: 469)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.8309288620948792
    2. ' en' → logprob: -1.8309288024902344
    3. '[]' → logprob: -2.4559288024902344
    4. ' par' → logprob: -2.5809288024902344
    5. 's' → logprob: -2.9559288024902344
    6. ' des' → logprob: -3.0809288024902344
    7. '```' → logprob: -4.330928802490234
    8. ' sur' → logprob: -4.455928802490234
    9. '<|end|>' → logprob: -4.455928802490234
    10. ' ' → logprob: -4.580928802490234

Token 50: ' une' (ID: 2463)
  Prédit: ' une'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' une' → logprob: -0.17313843965530396
    2. ' mots' → logprob: -2.548138380050659
    3. 'une' → logprob: -3.798138380050659
    4. ' tokens' → logprob: -4.048138618469238
    5. ' liste' → logprob: -4.298138618469238
    6. 'tokens' → logprob: -5.048138618469238
    7. ' des' → logprob: -5.673138618469238
    8. 'm' → logprob: -5.798138618469238
    9. ' morceaux' → logprob: -5.798138618469238
    10. ' un' → logprob: -5.923138618469238

Token 51: ' liste' (ID: 31719)
  Prédit: ' liste'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' liste' → logprob: -0.014999501407146454
    2. 'liste' → logprob: -4.3899993896484375
    3. 's' → logprob: -6.3899993896484375
    4. ' chaîne' → logprob: -7.7649993896484375
    5. ' list' → logprob: -9.014999389648438
    6. 'list' → logprob: -9.139999389648438
    7. ' listes' → logprob: -10.389999389648438
    8. 'Liste' → logprob: -10.514999389648438
    9. 'chaine' → logprob: -10.514999389648438
    10. ' ' → logprob: -10.639999389648438

Token 52: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.4667838215827942
    2. ' des' → logprob: -1.8417837619781494
    3. '<|end|>' → logprob: -2.4667837619781494
    4. '[]' → logprob: -3.4667837619781494
    5. 'tokens' → logprob: -3.5917837619781494
    6. ' tokens' → logprob: -3.8417837619781494
    7. 's' → logprob: -4.7167840003967285
    8. ' d' → logprob: -4.8417840003967285
    9. '[' → logprob: -5.3417840003967285
    10. '['' → logprob: -5.4667840003967285

Token 53: ' sous' (ID: 14487)
  Prédit: ' mots'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' mots' → logprob: -0.33081483840942383
    2. ' chaînes' → logprob: -1.5808148384094238
    3. 'm' → logprob: -2.830814838409424
    4. 'mot' → logprob: -5.330814838409424
    5. ' espaces' → logprob: -5.455814838409424
    6. ' ' → logprob: -6.580814838409424
    7. ' tokens' → logprob: -6.830814838409424
    8. ' chain' → logprob: -7.080814838409424
    9. 's' → logprob: -7.080814838409424
    10. 'chain' → logprob: -7.330814838409424

Token 54: '-cha' (ID: 163177)
  Prédit: ' chaînes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaînes' → logprob: -0.11510691046714783
    2. '   ' → logprob: -3.3651068210601807
    3. 'chain' → logprob: -3.3651068210601807
    4. 'cha' → logprob: -3.8651068210601807
    5. ' chain' → logprob: -4.99010705947876
    6. '-cha' → logprob: -5.99010705947876
    7. 'chains' → logprob: -6.36510705947876
    8. ' ' → logprob: -6.49010705947876
    9. 'strings' → logprob: -6.61510705947876
    10. '-chain' → logprob: -7.24010705947876

Token 55: 'înes' (ID: 171517)
  Prédit: 'înes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'înes' → logprob: -0.16321273148059845
    2. 'î' → logprob: -1.913212776184082
    3. 'nes' → logprob: -6.413212776184082
    4. 'r' → logprob: -8.038212776184082
    5. 'Î' → logprob: -8.413212776184082
    6. 'ï' → logprob: -8.538212776184082
    7. 'în' → logprob: -8.663212776184082
    8. 'ì' → logprob: -8.788212776184082
    9. 'ines' → logprob: -9.788212776184082
    10. 'îne' → logprob: -10.038212776184082

Token 56: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9390141367912292
    2. '[' → logprob: -1.814014196395874
    3. ',' → logprob: -2.064014196395874
    4. '```' → logprob: -2.814014196395874
    5. '[]' → logprob: -3.189014196395874
    6. ' (' → logprob: -3.314014196395874
    7. 's' → logprob: -3.439014196395874
    8. '()' → logprob: -3.439014196395874
    9. '.' → logprob: -4.189013957977295
    10. '`' → logprob: -4.314013957977295

Token 57: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.006069579161703587
    2. ',' → logprob: -6.006069660186768
    3. '    
' → logprob: -6.381069660186768
    4. '    ' → logprob: -7.631069660186768
    5. '.' → logprob: -7.881069660186768
    6. 's' → logprob: -8.50606918334961
    7. '[' → logprob: -9.13106918334961
    8. ' (' → logprob: -9.13106918334961
    9. 'input' → logprob: -9.25606918334961
    10. '```' → logprob: -9.75606918334961

Token 58: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10040582716464996
    2. '    ' → logprob: -3.7254059314727783
    3. 'n' → logprob: -3.9754059314727783
    4. 's' → logprob: -3.9754059314727783
    5. 'input' → logprob: -4.850405693054199
    6. ' ' → logprob: -5.225405693054199
    7. '    
' → logprob: -5.475405693054199
    8. 'a' → logprob: -5.600405693054199
    9. 't' → logprob: -6.225405693054199
    10. 'user' → logprob: -6.600405693054199

Token 59: ' à' (ID: 1221)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13425485789775848
    2. ' input' → logprob: -3.7592549324035645
    3. ' line' → logprob: -3.8842549324035645
    4. 's' → logprob: -4.1342549324035645
    5. 'n' → logprob: -4.6342549324035645
    6. 'input' → logprob: -4.7592549324035645
    7. '    ' → logprob: -4.8842549324035645
    8. 'l' → logprob: -5.2592549324035645
    9. ' ligne' → logprob: -5.5092549324035645
    10. ' ' → logprob: -5.6342549324035645

Token 60: ' chaque' (ID: 21194)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'u' → logprob: -0.8610431551933289
    2. ' partir' → logprob: -1.9860432147979736
    3. ' ' → logprob: -2.1110432147979736
    4. 'la' → logprob: -2.7360432147979736
    5. 'au' → logprob: -2.8610432147979736
    6. ' chaque' → logprob: -2.9860432147979736
    7. ' ' → logprob: -3.3610432147979736
    8. 'l' → logprob: -3.4860432147979736
    9. ' la' → logprob: -4.3610429763793945
    10. 's' → logprob: -4.3610429763793945

Token 61: ' espace' (ID: 66004)
  Prédit: ' espace'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' espace' → logprob: -0.07280181348323822
    2. ''espace' → logprob: -3.4478018283843994
    3. ' espaces' → logprob: -3.4478018283843994
    4. 'es' → logprob: -5.57280158996582
    5. ''esp' → logprob: -7.44780158996582
    6. '’espace' → logprob: -7.82280158996582
    7. 'esp' → logprob: -7.82280158996582
    8. ' ' → logprob: -7.82280158996582
    9. 's' → logprob: -8.44780158996582
    10. '  ' → logprob: -9.19780158996582

Token 62: ' rencontré' (ID: 141085)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9890849590301514
    2. '    
' → logprob: -1.4890849590301514
    3. ',' → logprob: -1.9890849590301514
    4. ')' → logprob: -2.4890849590301514
    5. '.' → logprob: -2.9890849590301514
    6. 's' → logprob: -3.3640849590301514
    7. '[' → logprob: -4.1140851974487305
    8. '    ' → logprob: -4.8640851974487305
    9. '()' → logprob: -4.8640851974487305
    10. 'input' → logprob: -4.9890851974487305

Token 63: '.' (ID: 13)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05319271236658096
    2. '    
' → logprob: -3.303192615509033
    3. '\n' → logprob: -5.428192615509033
    4. '
' → logprob: -5.553192615509033
    5. '    ' → logprob: -6.428192615509033
    6. ',' → logprob: -6.678192615509033
    7. '   
' → logprob: -6.803192615509033
    8. '\' → logprob: -7.303192615509033
    9. 's' → logprob: -8.178193092346191
    10. '.' → logprob: -8.178193092346191

Token 64: ' Par' (ID: 3371)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18167415261268616
    2. '    
' → logprob: -2.5566742420196533
    3. '
' → logprob: -3.0566742420196533
    4. '\n' → logprob: -4.556674003601074
    5. 'n' → logprob: -5.056674003601074
    6. '    ' → logprob: -5.181674003601074
    7. '   
' → logprob: -5.556674003601074
    8. ' 
' → logprob: -5.681674003601074
    9. '[' → logprob: -5.931674003601074
    10. '  
' → logprob: -6.431674003601074

Token 65: ' exemple' (ID: 26320)
  Prédit: ' exemple'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' exemple' → logprob: -0.9728825092315674
    2. ' ' → logprob: -2.2228825092315674
    3. ' défaut' → logprob: -2.8478825092315674
    4. ' default' → logprob: -2.9728825092315674
    5. ' la' → logprob: -3.2228825092315674
    6. 'ex' → logprob: -3.3478825092315674
    7. ' conséquent' → logprob: -3.4728825092315674
    8. 'mot' → logprob: -3.8478825092315674
    9. ' example' → logprob: -3.9728825092315674
    10. 's' → logprob: -3.9728825092315674

Token 66: ',' (ID: 11)
  Prédit: ' ,'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ,' → logprob: -0.54934161901474
    2. ',' → logprob: -1.0493416786193848
    3. '   ' → logprob: -3.7993416786193848
    4. ' la' → logprob: -4.674341678619385
    5. 's' → logprob: -5.299341678619385
    6. '    
' → logprob: -5.299341678619385
    7. ' ' → logprob: -5.549341678619385
    8. 'u' → logprob: -5.674341678619385
    9. '    ' → logprob: -5.924341678619385
    10. ' s' → logprob: -6.674341678619385

Token 67: ' si' (ID: 1784)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5928658843040466
    2. ' ' → logprob: -2.4678659439086914
    3. 'n' → logprob: -2.5928659439086914
    4. '    ' → logprob: -2.9678659439086914
    5. ' l' → logprob: -3.3428659439086914
    6. ' user' → logprob: -3.4678659439086914
    7. 's' → logprob: -4.467865943908691
    8. 'a' → logprob: -4.467865943908691
    9. ' n' → logprob: -4.467865943908691
    10. ' a' → logprob: -4.467865943908691

Token 68: ' l' (ID: 305)
  Prédit: ' on'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' on' → logprob: -0.13790665566921234
    2. ' l' → logprob: -2.512906551361084
    3. ' la' → logprob: -3.887906551361084
    4. ' input' → logprob: -4.637906551361084
    5. ' user' → logprob: -5.012906551361084
    6. 'l' → logprob: -6.387906551361084
    7. ' le' → logprob: -6.637906551361084
    8. ' vous' → logprob: -6.762906551361084
    9. 'on' → logprob: -7.262906551361084
    10. '   ' → logprob: -7.262906551361084

Token 69: ''utilisateur' (ID: 140803)
  Prédit: ''utilisateur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''utilisateur' → logprob: -0.6085516214370728
    2. ' user' → logprob: -2.233551502227783
    3. ' input' → logprob: -2.608551502227783
    4. ' on' → logprob: -2.983551502227783
    5. ' utilisateur' → logprob: -3.358551502227783
    6. 'input' → logprob: -3.358551502227783
    7. 'user' → logprob: -3.483551502227783
    8. ''on' → logprob: -3.983551502227783
    9. ''' → logprob: -4.358551502227783
    10. 'ine' → logprob: -4.608551502227783

Token 70: ' tape' (ID: 27444)
  Prédit: ' sais'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sais' → logprob: -1.2601091861724854
    2. ' tape' → logprob: -1.3851091861724854
    3. ' entre' → logprob: -1.7601091861724854
    4. ' ' → logprob: -2.3851091861724854
    5. 's' → logprob: -3.5101091861724854
    6. ' s' → logprob: -3.6351091861724854
    7. ' enter' → logprob: -3.7601091861724854
    8. ' souhaite' → logprob: -4.135108947753906
    9. ' continue' → logprob: -4.260108947753906
    10. '<|end|>' → logprob: -4.385108947753906

Token 71: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.6410425901412964
    2. ' "' → logprob: -1.1410425901412964
    3. ''' → logprob: -2.766042709350586
    4. ' '' → logprob: -3.766042709350586
    5. ' un' → logprob: -3.891042709350586
    6. ' une' → logprob: -4.266042709350586
    7. ''un' → logprob: -5.016042709350586
    8. ' la' → logprob: -5.266042709350586
    9. ''une' → logprob: -6.016042709350586
    10. ' ' → logprob: -6.141042709350586

Token 72: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -1.13218355178833
    2. '1' → logprob: -1.50718355178833
    3. 'Bonjour' → logprob: -1.75718355178833
    4. '2' → logprob: -2.00718355178833
    5. 'bonjour' → logprob: -3.25718355178833
    6. '12' → logprob: -3.63218355178833
    7. '"' → logprob: -3.75718355178833
    8. '10' → logprob: -4.13218355178833
    9. '5' → logprob: -4.63218355178833
    10. 'Hello' → logprob: -5.25718355178833

Token 73: ' ' (ID: 220)
  Prédit: ' +'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.07830849289894104
    2. '+' → logprob: -2.953308582305908
    3. ' ' → logprob: -3.828308582305908
    4. ' *' → logprob: -7.578308582305908
    5. ' plus' → logprob: -7.828308582305908
    6. ' ,' → logprob: -9.20330810546875
    7. '  ' → logprob: -9.32830810546875
    8. '2' → logprob: -9.32830810546875
    9. ',' → logprob: -10.07830810546875
    10. '*' → logprob: -10.70330810546875

Token 74: '2' (ID: 17)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.39137038588523865
    2. '4' → logprob: -1.516370415687561
    3. ' ' → logprob: -3.1413702964782715
    4. '5' → logprob: -3.6413702964782715
    5. ' +' → logprob: -4.0163702964782715
    6. '2' → logprob: -4.7663702964782715
    7. '7' → logprob: -5.6413702964782715
    8. 'plus' → logprob: -6.1413702964782715
    9. '10' → logprob: -7.2663702964782715
    10. '*' → logprob: -7.7663702964782715

Token 75: '",' (ID: 672)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.4789414405822754
    2. ' +' → logprob: -1.2289414405822754
    3. '+' → logprob: -2.6039414405822754
    4. '3' → logprob: -5.353941440582275
    5. '5' → logprob: -6.228941440582275
    6. '4' → logprob: -6.603941440582275
    7. '1' → logprob: -6.603941440582275
    8. '7' → logprob: -6.853941440582275
    9. '  ' → logprob: -7.353941440582275
    10. ' "' → logprob: -7.478941440582275

Token 76: ' cela' (ID: 17542)
  Prédit: '    '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '    ' → logprob: -0.8449683785438538
    2. '   ' → logprob: -1.344968318939209
    3. '    
' → logprob: -1.844968318939209
    4. ' 
' → logprob: -3.469968318939209
    5. '     
' → logprob: -3.594968318939209
    6. '   
' → logprob: -3.844968318939209
    7. ' ' → logprob: -4.344968318939209
    8. ' la' → logprob: -4.719968318939209
    9. 'n' → logprob: -4.969968318939209
    10. ' ' → logprob: -5.094968318939209

Token 77: ' retourne' (ID: 178818)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -1.7974599599838257
    2. ' donnera' → logprob: -2.1724600791931152
    3. ' ' → logprob: -2.2974600791931152
    4. ' crée' → logprob: -2.7974600791931152
    5. ' ' → logprob: -2.9224600791931152
    6. ' retourne' → logprob: -3.0474600791931152
    7. ' donne' → logprob: -3.1724600791931152
    8. ' s' → logprob: -3.2974600791931152
    9. '[' → logprob: -3.6724600791931152
    10. ' entr' → logprob: -3.6724600791931152

Token 78: ' ["' (ID: 9129)
  Prédit: ' [''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ['' → logprob: -0.3179570138454437
    2. '['' → logprob: -1.3179570436477661
    3. ' ["' → logprob: -6.317956924438477
    4. '["' → logprob: -6.317956924438477
    5. '[' → logprob: -7.442956924438477
    6. ' [' → logprob: -8.067956924438477
    7. ' ' → logprob: -9.442956924438477
    8. ' une' → logprob: -10.692956924438477
    9. ' ' → logprob: -10.942956924438477
    10. ' la' → logprob: -11.067956924438477

Token 79: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -1.6166903151315637e-05
    2. '"' → logprob: -11.500016212463379
    3. ''' → logprob: -12.250016212463379
    4. ' ' → logprob: -13.875016212463379
    5. '```' → logprob: -17.000015258789062
    6. '３' → logprob: -17.625015258789062
    7. '`' → logprob: -17.750015258789062
    8. '   ' → logprob: -17.750015258789062
    9. '"""' → logprob: -18.125015258789062
    10. '">' → logprob: -18.187515258789062

Token 80: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.25932803750038147
    2. '","' → logprob: -1.509328007698059
    3. ' ",' → logprob: -6.0093278884887695
    4. '"' → logprob: -6.5093278884887695
    5. ' ","' → logprob: -6.5093278884887695
    6. ',' → logprob: -6.5093278884887695
    7. '2' → logprob: -8.75932788848877
    8. '3' → logprob: -9.13432788848877
    9. ' ' → logprob: -9.75932788848877
    10. ',"' → logprob: -9.75932788848877

Token 81: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.03834279626607895
    2. ' "' → logprob: -3.4133427143096924
    3. ' ' → logprob: -6.1633429527282715
    4. ''' → logprob: -7.1633429527282715
    5. '2' → logprob: -7.2883429527282715
    6. '3' → logprob: -7.6633429527282715
    7. ' ' → logprob: -8.163342475891113
    8. ' '' → logprob: -9.288342475891113
    9. '1' → logprob: -9.663342475891113
    10. ',' → logprob: -9.913342475891113

Token 82: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0003281944082118571
    2. '"' → logprob: -8.125328063964844
    3. '3' → logprob: -10.625328063964844
    4. ' ' → logprob: -12.375328063964844
    5. ''' → logprob: -12.875328063964844
    6. '4' → logprob: -14.750328063964844
    7. ' "' → logprob: -15.500328063964844
    8. '1' → logprob: -15.750328063964844
    9. '","' → logprob: -16.000328063964844
    10. '```' → logprob: -16.375328063964844

Token 83: '"]' (ID: 2601)
  Prédit: '"]'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"]' → logprob: -0.0030222758650779724
    2. ']' → logprob: -5.878022193908691
    3. '"' → logprob: -9.253022193908691
    4. ' "]' → logprob: -9.753022193908691
    5. '']' → logprob: -10.378022193908691
    6. '"]
' → logprob: -11.003022193908691
    7. '"]
' → logprob: -11.878022193908691
    8. ' ]' → logprob: -13.378022193908691
    9. '"]

' → logprob: -13.628022193908691
    10. '   ' → logprob: -13.878022193908691

Token 84: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5097225904464722
    2. '
' → logprob: -1.1347225904464722
    3. '    
' → logprob: -3.0097227096557617
    4. '[' → logprob: -4.509722709655762
    5. 'n' → logprob: -4.884722709655762
    6. '   
' → logprob: -6.259722709655762
    7. '\n' → logprob: -6.759722709655762
    8. '  
' → logprob: -6.884722709655762
    9. '```' → logprob: -6.884722709655762
    10. ' 
' → logprob: -7.259722709655762

Token 85: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.011629377491772175
    2. '    
' → logprob: -5.261629581451416
    3. 'n' → logprob: -6.261629581451416
    4. '
' → logprob: -6.511629581451416
    5. '    ' → logprob: -7.011629581451416
    6. ' ' → logprob: -8.261629104614258
    7. 'a' → logprob: -8.261629104614258
    8. 's' → logprob: -8.261629104614258
    9. '[' → logprob: -8.511629104614258
    10. '\n' → logprob: -8.886629104614258

Token 86: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.28381961584091187
    2. 'n' → logprob: -1.7838196754455566
    3. 'a' → logprob: -4.283819675445557
    4. 's' → logprob: -4.408819675445557
    5. 'x' → logprob: -4.658819675445557
    6. '    ' → logprob: -5.033819675445557
    7. 'r' → logprob: -5.283819675445557
    8. 'user' → logprob: -5.283819675445557
    9. 'u' → logprob: -5.908819675445557
    10. 'l' → logprob: -6.033819675445557

Token 87: ' Ensuite' (ID: 113884)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13650968670845032
    2. 'n' → logprob: -4.011509895324707
    3. ' inputs' → logprob: -4.261509895324707
    4. ' line' → logprob: -4.511509895324707
    5. 'inputs' → logprob: -4.511509895324707
    6. 'l' → logprob: -4.761509895324707
    7. 's' → logprob: -4.886509895324707
    8. ' input' → logprob: -4.886509895324707
    9. ' user' → logprob: -5.386509895324707
    10. 'input' → logprob: -5.386509895324707

Token 88: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4352131485939026
    2. ' on' → logprob: -1.1852130889892578
    3. ',' → logprob: -4.685213088989258
    4. ' la' → logprob: -5.310213088989258
    5. 'on' → logprob: -5.560213088989258
    6. '    ' → logprob: -5.560213088989258
    7. ' nombres' → logprob: -6.060213088989258
    8. ' les' → logprob: -6.185213088989258
    9. ' numbers' → logprob: -6.685213088989258
    10. 'tokens' → logprob: -6.685213088989258

Token 89: ' on' (ID: 402)
  Prédit: ' on'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' on' → logprob: -1.4868626594543457
    2. 'n' → logprob: -1.6118626594543457
    3. 'numbers' → logprob: -1.9868626594543457
    4. '   ' → logprob: -2.3618626594543457
    5. ' nombres' → logprob: -2.6118626594543457
    6. ' numbers' → logprob: -2.6118626594543457
    7. ' n' → logprob: -3.1118626594543457
    8. '    
' → logprob: -3.9868626594543457
    9. 'on' → logprob: -4.111862659454346
    10. 'nums' → logprob: -4.236862659454346

Token 90: ' utilise' (ID: 70283)
  Prédit: ' récup'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' récup' → logprob: -1.6743873357772827
    2. 's' → logprob: -1.9243873357772827
    3. ' transforme' → logprob: -2.2993874549865723
    4. ' try' → logprob: -2.2993874549865723
    5. 'numbers' → logprob: -2.4243874549865723
    6. ' continue' → logprob: -2.5493874549865723
    7. 'r' → logprob: -3.0493874549865723
    8. ' numbers' → logprob: -3.1743874549865723
    9. 't' → logprob: -3.2993874549865723
    10. 'try' → logprob: -3.9243874549865723

Token 91: ' map' (ID: 4014)
  Prédit: ' list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -1.4917430877685547
    2. ' input' → logprob: -1.8667430877685547
    3. 'map' → logprob: -1.9917430877685547
    4. ' la' → logprob: -2.1167430877685547
    5. ' map' → logprob: -2.3667430877685547
    6. ' l' → logprob: -2.4917430877685547
    7. 'input' → logprob: -2.6167430877685547
    8. 'list' → logprob: -2.8667430877685547
    9. 'int' → logprob: -4.616743087768555
    10. 'l' → logprob: -4.866743087768555

Token 92: '()' (ID: 416)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.8174312710762024
    2. '(int' → logprob: -0.8174312710762024
    3. '(str' → logprob: -2.1924312114715576
    4. '(lambda' → logprob: -5.317431449890137
    5. '(float' → logprob: -8.692431449890137
    6. '(
' → logprob: -9.692431449890137
    7. '(list' → logprob: -10.067431449890137
    8. '(print' → logprob: -11.817431449890137
    9. '(len' → logprob: -12.067431449890137
    10. '(eval' → logprob: -12.317431449890137

Token 93: ' pour' (ID: 1930)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.005352586042135954
    2. '(int' → logprob: -6.00535249710083
    3. '(lambda' → logprob: -6.25535249710083
    4. '(
' → logprob: -7.50535249710083
    5. '(str' → logprob: -8.005352973937988
    6. '    ' → logprob: -11.880352973937988
    7. '(convert' → logprob: -12.005352973937988
    8. ' (' → logprob: -12.255352973937988
    9. 'int' → logprob: -12.255352973937988
    10. '   ' → logprob: -12.380352973937988

Token 94: ' appliquer' (ID: 172872)
  Prédit: ' convertir'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' convertir' → logprob: -0.13973374664783478
    2. ' appliquer' → logprob: -2.1397337913513184
    3. ' transformer' → logprob: -5.014733791351318
    4. ' convert' → logprob: -5.889733791351318
    5. ' int' → logprob: -6.764733791351318
    6. 'ap' → logprob: -7.514733791351318
    7. 'convert' → logprob: -7.639733791351318
    8. 'int' → logprob: -8.51473331451416
    9. ' apply' → logprob: -8.76473331451416
    10. ' appl' → logprob: -9.51473331451416

Token 95: ' la' (ID: 557)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.16665950417518616
    2. '(int' → logprob: -2.2916595935821533
    3. ' int' → logprob: -3.0416595935821533
    4. 'str' → logprob: -6.291659355163574
    5. '(str' → logprob: -7.041659355163574
    6. '(' → logprob: -7.166659355163574
    7. ' str' → logprob: -7.541659355163574
    8. '   ' → logprob: -8.291659355163574
    9. '```' → logprob: -9.041659355163574
    10. '(lambda' → logprob: -9.666659355163574

Token 96: ' fonction' (ID: 17610)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.1287267953157425
    2. ' int' → logprob: -2.1287267208099365
    3. 'str' → logprob: -7.253726959228516
    4. ' str' → logprob: -7.628726959228516
    5. '(int' → logprob: -8.378726959228516
    6. 'lambda' → logprob: -9.253726959228516
    7. '   ' → logprob: -9.378726959228516
    8. ' lambda' → logprob: -9.753726959228516
    9. '=int' → logprob: -10.753726959228516
    10. ' ' → logprob: -11.253726959228516

Token 97: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.11435545235872269
    2. ' int' → logprob: -2.2393555641174316
    3. '(int' → logprob: -7.364355564117432
    4. 'str' → logprob: -7.489355564117432
    5. ' str' → logprob: -8.364355087280273
    6. '```' → logprob: -10.239355087280273
    7. '   ' → logprob: -10.489355087280273
    8. '(str' → logprob: -11.364355087280273
    9. '=int' → logprob: -11.989355087280273
    10. '<int' → logprob: -12.114355087280273

Token 98: ' à' (ID: 1221)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1881173998117447
    2. '(lambda' → logprob: -2.063117504119873
    3. '(str' → logprob: -3.688117504119873
    4. '(int' → logprob: -5.188117504119873
    5. ',' → logprob: -5.688117504119873
    6. '()' → logprob: -6.063117504119873
    7. ')' → logprob: -6.188117504119873
    8. ' (' → logprob: -7.063117504119873
    9. '(s' → logprob: -7.063117504119873
    10. '   ' → logprob: -7.188117504119873

Token 99: ' chaque' (ID: 21194)
  Prédit: ' chaque'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaque' → logprob: -0.07020029425621033
    2. ' chacune' → logprob: -3.820200204849243
    3. ' each' → logprob: -3.945200204849243
    4. ' la' → logprob: -4.195200443267822
    5. ' l' → logprob: -5.570200443267822
    6. 'l' → logprob: -6.695200443267822
    7. ' chacun' → logprob: -6.945200443267822
    8. 'la' → logprob: -7.070200443267822
    9. ' toutes' → logprob: -7.070200443267822
    10. ' ' → logprob: -7.195200443267822

Token 100: ' élément' (ID: 99627)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.437599241733551
    2. ' élément' → logprob: -1.0625991821289062
    3. ' element' → logprob: -5.312599182128906
    4. 'element' → logprob: -6.437599182128906
    5. ' ' → logprob: -7.312599182128906
    6. '<|end|>' → logprob: -7.937599182128906
    7. ')' → logprob: -8.187599182128906
    8. ' éléments' → logprob: -8.812599182128906
    9. ' token' → logprob: -8.812599182128906
    10. ' mot' → logprob: -8.812599182128906

Token 101: ' de' (ID: 334)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.002262186724692583
    2. '(
' → logprob: -6.877262115478516
    3. ',' → logprob: -8.002262115478516
    4. '   ' → logprob: -8.627262115478516
    5. ' de' → logprob: -8.752262115478516
    6. ' (' → logprob: -9.002262115478516
    7. ')' → logprob: -9.002262115478516
    8. '()' → logprob: -10.002262115478516
    9. 's' → logprob: -10.127262115478516
    10. ' des' → logprob: -10.502262115478516

Token 102: ' la' (ID: 557)
  Prédit: ' la'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.6606853008270264
    2. 'la' → logprob: -1.7856853008270264
    3. 'l' → logprob: -1.9106853008270264
    4. ' l' → logprob: -2.0356853008270264
    5. ' input' → logprob: -4.1606855392456055
    6. 'input' → logprob: -5.6606855392456055
    7. ' liste' → logprob: -5.9106855392456055
    8. 'split' → logprob: -6.4106855392456055
    9. 's' → logprob: -6.7856855392456055
    10. ' lst' → logprob: -6.7856855392456055

Token 103: ' liste' (ID: 31719)
  Prédit: ' liste'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' liste' → logprob: -0.28972479701042175
    2. 'liste' → logprob: -1.5397248268127441
    3. 'l' → logprob: -4.664724826812744
    4. ' input' → logprob: -5.289724826812744
    5. ' ligne' → logprob: -5.414724826812744
    6. 'list' → logprob: -5.664724826812744
    7. 'input' → logprob: -5.664724826812744
    8. 'ligne' → logprob: -6.289724826812744
    9. 'entrée' → logprob: -6.414724826812744
    10. 'lst' → logprob: -6.414724826812744

Token 104: ',
' (ID: 412)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2132716029882431
    2. '   ' → logprob: -2.3382716178894043
    3. '(input' → logprob: -3.0882716178894043
    4. '    ' → logprob: -5.088271617889404
    5. ')' → logprob: -5.213271617889404
    6. '(stdin' → logprob: -5.213271617889404
    7. '(
' → logprob: -5.463271617889404
    8. ',' → logprob: -5.463271617889404
    9. '(s' → logprob: -5.463271617889404
    10. ' (' → logprob: -5.463271617889404

Token 105: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3538796901702881
    2. ' i' → logprob: -2.853879690170288
    3. '   ' → logprob: -3.103879690170288
    4. '    ' → logprob: -3.228879690170288
    5. ')' → logprob: -3.728879690170288
    6. 'i' → logprob: -3.853879690170288
    7. ' )' → logprob: -4.103879928588867
    8. 'r' → logprob: -4.228879928588867
    9. 'n' → logprob: -4.478879928588867
    10. 'l' → logprob: -4.603879928588867

Token 106: ' #' (ID: 1069)
  Prédit: '    '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '    ' → logprob: -0.7665781378746033
    2. ' ' → logprob: -1.266578197479248
    3. '    
' → logprob: -2.641578197479248
    4. '   ' → logprob: -2.766578197479248
    5. '   
' → logprob: -3.516578197479248
    6. '     
' → logprob: -3.516578197479248
    7. ' 
' → logprob: -3.641578197479248
    8. ' afin' → logprob: -4.516578197479248
    9. ' puis' → logprob: -5.391578197479248
    10. '  ' → logprob: -5.766578197479248

Token 107: ' ce' (ID: 2357)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2646942436695099
    2. 'result' → logprob: -3.5146942138671875
    3. ' la' → logprob: -3.6396942138671875
    4. ' tokens' → logprob: -4.2646942138671875
    5. ' result' → logprob: -4.5146942138671875
    6. 'tokens' → logprob: -4.5146942138671875
    7. ' ce' → logprob: -4.6396942138671875
    8. ')' → logprob: -4.7646942138671875
    9. '    ' → logprob: -4.7646942138671875
    10. 'numbers' → logprob: -4.8896942138671875

Token 108: ' qui' (ID: 2780)
  Prédit: ' qui'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' qui' → logprob: -1.3683757781982422
    2. ' ' → logprob: -1.6183757781982422
    3. 's' → logprob: -2.868375778198242
    4. 'x' → logprob: -2.868375778198242
    5. '   ' → logprob: -2.868375778198242
    6. 'n' → logprob: -2.993375778198242
    7. ' ' → logprob: -3.118375778198242
    8. ' n' → logprob: -3.493375778198242
    9. '#' → logprob: -3.868375778198242
    10. ' #' → logprob: -3.868375778198242

Token 109: ' convert' (ID: 8452)
  Prédit: ' permet'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' permet' → logprob: -0.9520054459571838
    2. ' transforme' → logprob: -0.9520054459571838
    3. ' convert' → logprob: -2.452005386352539
    4. ' crée' → logprob: -2.702005386352539
    5. 's' → logprob: -4.702005386352539
    6. ' retourne' → logprob: -4.702005386352539
    7. ' ' → logprob: -4.702005386352539
    8. ' donne' → logprob: -4.952005386352539
    9. ' revient' → logprob: -5.202005386352539
    10. ' les' → logprob: -5.202005386352539

Token 110: 'it' (ID: 278)
  Prédit: 'it'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'it' → logprob: -0.051802534610033035
    2. ' it' → logprob: -3.051802635192871
    3. 't' → logprob: -6.301802635192871
    4. ' ' → logprob: -7.426802635192871
    5. '   ' → logprob: -7.676802635192871
    6. 'i' → logprob: -9.176802635192871
    7. '  ' → logprob: -9.551802635192871
    8. '_' → logprob: -10.426802635192871
    9. '_it' → logprob: -10.426802635192871
    10. '	it' → logprob: -11.551802635192871

Token 111: ' chaque' (ID: 21194)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.0323708057403564
    2. ' la' → logprob: -1.1573708057403564
    3. ' les' → logprob: -1.4073708057403564
    4. ' chaque' → logprob: -2.9073708057403564
    5. ' l' → logprob: -4.282370567321777
    6. '   ' → logprob: -5.532370567321777
    7. ' each' → logprob: -5.782370567321777
    8. ' le' → logprob: -6.407370567321777
    9. ' ces' → logprob: -7.407370567321777
    10. ' int' → logprob: -7.407370567321777

Token 112: ' sous' (ID: 14487)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.21454058587551117
    2. ' élément' → logprob: -1.7145406007766724
    3. ' chaîne' → logprob: -4.714540481567383
    4. ' ' → logprob: -5.964540481567383
    5. 'chaine' → logprob: -7.964540481567383
    6. ' string' → logprob: -8.089540481567383
    7. ' chaine' → logprob: -8.214540481567383
    8. ' element' → logprob: -8.464540481567383
    9. ' caractère' → logprob: -9.589540481567383
    10. ' él' → logprob: -9.589540481567383

Token 113: '-cha' (ID: 163177)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.004126011393964291
    2. '-' → logprob: -6.254126071929932
    3. 'chaine' → logprob: -7.004126071929932
    4. '_ent' → logprob: -8.504125595092773
    5. '_m' → logprob: -8.754125595092773
    6. '   ' → logprob: -8.879125595092773
    7. '_str' → logprob: -9.004125595092773
    8. ' chaîne' → logprob: -9.379125595092773
    9. '_l' → logprob: -9.504125595092773
    10. '_chain' → logprob: -9.629125595092773

Token 114: 'îne' (ID: 55188)
  Prédit: 'îne'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'îne' → logprob: -0.02896113507449627
    2. 'î' → logprob: -3.653961181640625
    3. 'ne' → logprob: -6.778961181640625
    4. 'ïne' → logprob: -7.278961181640625
    5. 'ine' → logprob: -7.903961181640625
    6. 'Î' → logprob: -9.028961181640625
    7. '   ' → logprob: -9.653961181640625
    8. 'ì' → logprob: -10.028961181640625
    9. 'ı' → logprob: -10.278961181640625
    10. 'în' → logprob: -10.278961181640625

Token 115: ' (' (ID: 350)
  Prédit: ' en'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' en' → logprob: -0.13387757539749146
    2. ' (' → logprob: -3.7588775157928467
    3. ' )' → logprob: -3.8838775157928467
    4. ' ' → logprob: -4.008877754211426
    5. ',' → logprob: -4.383877754211426
    6. ' des' → logprob: -4.508877754211426
    7. '(' → logprob: -4.758877754211426
    8. ' ,' → logprob: -5.008877754211426
    9. ')' → logprob: -5.508877754211426
    10. ' de' → logprob: -5.633877754211426

Token 116: 'qui' (ID: 22771)
  Prédit: ' en'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' en' → logprob: -0.15470273792743683
    2. ' )' → logprob: -3.154702663421631
    3. ')' → logprob: -3.279702663421631
    4. ' ' → logprob: -3.279702663421631
    5. ' '' → logprob: -4.654702663421631
    6. ' de' → logprob: -5.654702663421631
    7. ' une' → logprob: -6.404702663421631
    8. ' string' → logprob: -6.404702663421631
    9. ' la' → logprob: -6.654702663421631
    10. ' strings' → logprob: -7.654702663421631

Token 117: ' représente' (ID: 88912)
  Prédit: ' est'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' est' → logprob: -0.6049221158027649
    2. ' représente' → logprob: -0.9799221158027649
    3. ' sont' → logprob: -3.72992205619812
    4. 's' → logprob: -4.479922294616699
    5. 'est' → logprob: -4.729922294616699
    6. ' correspond' → logprob: -4.854922294616699
    7. ' représentent' → logprob: -4.854922294616699
    8. ' ' → logprob: -5.229922294616699
    9. ' contient' → logprob: -5.229922294616699
    10. ' are' → logprob: -6.729922294616699

Token 118: ' un' (ID: 537)
  Prédit: ' un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.6026548147201538
    2. ' une' → logprob: -0.8526548147201538
    3. ' des' → logprob: -3.7276549339294434
    4. 'un' → logprob: -6.727654933929443
    5. 'une' → logprob: -7.727654933929443
    6. 'des' → logprob: -7.852654933929443
    7. ' a' → logprob: -8.727654457092285
    8. ' ' → logprob: -9.977654457092285
    9. 'a' → logprob: -10.352654457092285
    10. ' du' → logprob: -11.352654457092285

Token 119: ' chiffre' (ID: 107420)
  Prédit: ' nombre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.25276508927345276
    2. 'nombre' → logprob: -2.12776517868042
    3. ' entier' → logprob: -2.75276517868042
    4. 'ent' → logprob: -3.25276517868042
    5. ' ' → logprob: -6.62776517868042
    6. ' ent' → logprob: -9.002764701843262
    7. ' chiffre' → logprob: -9.877764701843262
    8. ' nombres' → logprob: -10.002764701843262
    9. 'ch' → logprob: -10.127764701843262
    10. 'n' → logprob: -10.252764701843262

Token 120: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.08257216215133667
    2. ' )' → logprob: -2.7075722217559814
    3. ' en' → logprob: -4.457571983337402
    4. '   ' → logprob: -7.332571983337402
    5. ',' → logprob: -9.832571983337402
    6. ' ")' → logprob: -10.082571983337402
    7. ' ' → logprob: -10.207571983337402
    8. '")' → logprob: -10.207571983337402
    9. '')' → logprob: -10.957571983337402
    10. 's' → logprob: -11.332571983337402

Token 121: ' en' (ID: 469)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.9053534269332886
    2. ')' → logprob: -1.6553534269332886
    3. ' ,' → logprob: -1.7803534269332886
    4. ' )' → logprob: -2.155353546142578
    5. ' en' → logprob: -2.280353546142578
    6. ' ' → logprob: -5.405353546142578
    7. ' à' → logprob: -6.030353546142578
    8. ' into' → logprob: -6.155353546142578
    9. '   ' → logprob: -6.655353546142578
    10. ' pour' → logprob: -7.405353546142578

Token 122: ' un' (ID: 537)
  Prédit: ' un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.06327339261770248
    2. ' des' → logprob: -2.8132734298706055
    3. ' une' → logprob: -7.3132734298706055
    4. ' int' → logprob: -8.188273429870605
    5. ' ' → logprob: -9.063273429870605
    6. ' entier' → logprob: -9.188273429870605
    7. 'un' → logprob: -9.813273429870605
    8. 'des' → logprob: -10.688273429870605
    9. ' integer' → logprob: -11.813273429870605
    10. 'int' → logprob: -11.813273429870605

Token 123: ' nombre' (ID: 9733)
  Prédit: ' entier'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' entier' → logprob: -0.3610365688800812
    2. 'ent' → logprob: -1.4860365390777588
    3. ' nombre' → logprob: -2.736036539077759
    4. ' ' → logprob: -5.736036777496338
    5. 'nombre' → logprob: -5.861036777496338
    6. ' int' → logprob: -6.111036777496338
    7. 'e' → logprob: -6.736036777496338
    8. 'int' → logprob: -7.111036777496338
    9. ' ent' → logprob: -7.236036777496338
    10. ' integer' → logprob: -7.986036777496338

Token 124: ' entier' (ID: 80473)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7967762351036072
    2. ' )' → logprob: -1.046776294708252
    3. 's' → logprob: -2.671776294708252
    4. ',' → logprob: -3.296776294708252
    5. ' ,' → logprob: -3.296776294708252
    6. ' entier' → logprob: -4.046776294708252
    7. '   ' → logprob: -4.546776294708252
    8. ' ' → logprob: -4.796776294708252
    9. '(s' → logprob: -6.171776294708252
    10. '.' → logprob: -6.296776294708252

Token 125: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7077822685241699
    2. ',' → logprob: -0.9577822685241699
    3. ')' → logprob: -2.58278226852417
    4. '(' → logprob: -3.95778226852417
    5. '    
' → logprob: -4.83278226852417
    6. ' )' → logprob: -5.83278226852417
    7. ',
' → logprob: -5.83278226852417
    8. '(
' → logprob: -5.95778226852417
    9. ' ' → logprob: -6.20778226852417
    10. ' ,' → logprob: -6.58278226852417

Token 126: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4266042709350586
    2. ' ' → logprob: -1.4266042709350586
    3. ')' → logprob: -3.6766042709350586
    4. '    
' → logprob: -4.301604270935059
    5. '    ' → logprob: -4.551604270935059
    6. 'a' → logprob: -4.551604270935059
    7. ' 
' → logprob: -4.676604270935059
    8. ',' → logprob: -4.801604270935059
    9. '   
' → logprob: -5.301604270935059
    10. '[' → logprob: -5.551604270935059

Token 127: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.2150346040725708
    2. '    
' → logprob: -1.2150346040725708
    3. 'n' → logprob: -2.2150344848632812
    4. '   
' → logprob: -2.5900344848632812
    5. ' 
' → logprob: -2.7150344848632812
    6. 'r' → logprob: -3.4650344848632812
    7. 'a' → logprob: -3.4650344848632812
    8. 'x' → logprob: -3.8400344848632812
    9. '     
' → logprob: -3.8400344848632812
    10. ' ' → logprob: -4.590034484863281

Token 128: ' Enfin' (ID: 85274)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6416904330253601
    2. 'n' → logprob: -1.6416904926300049
    3. '    
' → logprob: -2.891690492630005
    4. ' n' → logprob: -3.391690492630005
    5. 'r' → logprob: -3.641690492630005
    6. 'a' → logprob: -3.891690492630005
    7. 'x' → logprob: -3.891690492630005
    8. ' ' → logprob: -4.016690254211426
    9. '    ' → logprob: -4.141690254211426
    10. 's' → logprob: -4.391690254211426

Token 129: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.069186732172966
    2. ' ,' → logprob: -2.8191866874694824
    3. '   ' → logprob: -5.444186687469482
    4. ' ' → logprob: -7.444186687469482
    5. ' la' → logprob: -8.06918716430664
    6. ')' → logprob: -8.06918716430664
    7. ' )' → logprob: -8.19418716430664
    8. ':' → logprob: -8.69418716430664
    9. ' on' → logprob: -8.81918716430664
    10. ' n' → logprob: -9.19418716430664

Token 130: ' les' (ID: 1341)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.19697555899620056
    2. 'a' → logprob: -2.8219754695892334
    3. ' n' → logprob: -3.4469754695892334
    4. ' x' → logprob: -3.9469754695892334
    5. ' numbers' → logprob: -4.1969757080078125
    6. ' nombres' → logprob: -4.3219757080078125
    7. 'n' → logprob: -4.6969757080078125
    8. ' on' → logprob: -4.9469757080078125
    9. 'numbers' → logprob: -5.8219757080078125
    10. 'x' → logprob: -5.8219757080078125

Token 131: ' deux' (ID: 10301)
  Prédit: ' nombres'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' nombres' → logprob: -0.05550961568951607
    2. 'ent' → logprob: -4.180509567260742
    3. ' ent' → logprob: -4.555509567260742
    4. ' valeurs' → logprob: -4.680509567260742
    5. 'n' → logprob: -5.180509567260742
    6. ' résultats' → logprob: -5.180509567260742
    7. ' ' → logprob: -6.430509567260742
    8. ' n' → logprob: -6.805509567260742
    9. ' nombre' → logprob: -7.055509567260742
    10. 'nombre' → logprob: -7.430509567260742

Token 132: ' ent' (ID: 1121)
  Prédit: ' nombres'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombres' → logprob: -0.07639153301715851
    2. 'n' → logprob: -3.9513914585113525
    3. ' ent' → logprob: -4.326391696929932
    4. 'ent' → logprob: -5.076391696929932
    5. ' a' → logprob: -5.326391696929932
    6. ' nombre' → logprob: -5.451391696929932
    7. ' ' → logprob: -5.451391696929932
    8. ' numbers' → logprob: -5.576391696929932
    9. ' n' → logprob: -6.076391696929932
    10. ' valeurs' → logprob: -6.201391696929932

Token 133: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.03708839789032936
    2. 'ières' → logprob: -4.162088394165039
    3. '   ' → logprob: -4.662088394165039
    4. 'rees' → logprob: -5.787088394165039
    5. 'ités' → logprob: -6.412088394165039
    6. 'r' → logprob: -6.912088394165039
    7. 'res' → logprob: -7.037088394165039
    8. 't' → logprob: -7.412088394165039
    9. 'rée' → logprob: -7.412088394165039
    10. 'ré' → logprob: -7.537088394165039

Token 134: ' récup' (ID: 62856)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.5873804688453674
    2. ' a' → logprob: -1.2123804092407227
    3. ' =' → logprob: -3.0873804092407227
    4. ' x' → logprob: -3.3373804092407227
    5. 'x' → logprob: -3.7123804092407227
    6. 's' → logprob: -4.212380409240723
    7. '1' → logprob: -4.462380409240723
    8. ' n' → logprob: -5.212380409240723
    9. 'n' → logprob: -6.587380409240723
    10. ',' → logprob: -6.712380409240723

Token 135: 'érés' (ID: 110831)
  Prédit: 'érés'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'érés' → logprob: -0.007399918977171183
    2. 'èrent' → logprob: -5.382400035858154
    3. 'érer' → logprob: -6.882400035858154
    4. 'érées' → logprob: -7.132400035858154
    5. 'èr' → logprob: -8.007399559020996
    6. 'éré' → logprob: -8.257399559020996
    7. 'ère' → logprob: -9.007399559020996
    8. 'érons' → logprob: -9.507399559020996
    9. 'er' → logprob: -10.007399559020996
    10. 'ér' → logprob: -10.632399559020996

Token 136: ' sont' (ID: 5242)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.11170468479394913
    2. ',' → logprob: -3.2367045879364014
    3. ' ,' → logprob: -3.7367045879364014
    4. 's' → logprob: -3.9867045879364014
    5. ' )' → logprob: -5.2367048263549805
    6. ' =' → logprob: -5.3617048263549805
    7. '  ' → logprob: -5.9867048263549805
    8. ')' → logprob: -6.3617048263549805
    9. ' a' → logprob: -6.6117048263549805
    10. ' s' → logprob: -6.9867048263549805

Token 137: ' assign' (ID: 14975)
  Prédit: ' stock'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stock' → logprob: -0.7976983189582825
    2. ' affect' → logprob: -1.5476982593536377
    3. ' unpack' → logprob: -2.1726982593536377
    4. ' attrib' → logprob: -2.5476982593536377
    5. ' assign' → logprob: -2.7976982593536377
    6. ' ' → logprob: -3.5476982593536377
    7. ' a' → logprob: -4.172698497772217
    8. ' assigned' → logprob: -4.547698497772217
    9. ' récup' → logprob: -4.922698497772217
    10. ' ' → logprob: -5.297698497772217

Token 138: 'és' (ID: 1756)
  Prédit: 'és'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'és' → logprob: -0.28144413232803345
    2. 'é' → logprob: -1.4064440727233887
    3. 'e' → logprob: -9.406444549560547
    4. 'es' → logprob: -9.531444549560547
    5. ' é' → logprob: -10.156444549560547
    6. 'ées' → logprob: -10.531444549560547
    7. ' ' → logprob: -11.156444549560547
    8. '   ' → logprob: -11.156444549560547
    9. 'ès' → logprob: -11.531444549560547
    10. 'er' → logprob: -11.531444549560547

Token 139: ' respect' (ID: 5618)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8614609241485596
    2. ' à' → logprob: -1.2364609241485596
    3. ' aux' → logprob: -2.1114609241485596
    4. ' a' → logprob: -2.4864609241485596
    5. ',' → logprob: -3.4864609241485596
    6. ' ,' → logprob: -3.6114609241485596
    7. ' au' → logprob: -4.4864606857299805
    8. 's' → logprob: -6.3614606857299805
    9. ' to' → logprob: -6.4864606857299805
    10. 't' → logprob: -7.2364606857299805

Token 140: 'ivement' (ID: 37978)
  Prédit: 'ent'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ent' → logprob: -0.5122478008270264
    2. 'ement' → logprob: -1.7622478008270264
    3. 'ivement' → logprob: -2.5122478008270264
    4. ' ent' → logprob: -3.1372478008270264
    5. 'emment' → logprob: -3.2622478008270264
    6. 'ant' → logprob: -4.1372480392456055
    7. 'ents' → logprob: -4.2622480392456055
    8. 'amment' → logprob: -4.2622480392456055
    9. 'ément' → logprob: -4.8872480392456055
    10. ' en' → logprob: -6.3872480392456055

Token 141: ' à' (ID: 1221)
  Prédit: ' à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.6699899435043335
    2. ' a' → logprob: -1.6699899435043335
    3. ' ' → logprob: -1.9199899435043335
    4. ' aux' → logprob: -2.544990062713623
    5. ' au' → logprob: -3.419990062713623
    6. ' ,' → logprob: -4.044990062713623
    7. '  ' → logprob: -5.169990062713623
    8. ' x' → logprob: -5.169990062713623
    9. ',' → logprob: -5.794990062713623
    10. 'a' → logprob: -6.419990062713623

Token 142: ' N' (ID: 478)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.10395907610654831
    2. 'a' → logprob: -3.228959083557129
    3. ' n' → logprob: -3.353959083557129
    4. ' x' → logprob: -3.853959083557129
    5. 'x' → logprob: -6.603959083557129
    6. 'n' → logprob: -7.228959083557129
    7. ' nombre' → logprob: -8.978959083557129
    8. ' ' → logprob: -9.353959083557129
    9. ' num' → logprob: -9.353959083557129
    10. ' A' → logprob: -9.353959083557129

Token 143: ' et' (ID: 859)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.006759425159543753
    2. ' ,' → logprob: -5.0067596435546875
    3. ',N' → logprob: -10.631759643554688
    4. ',n' → logprob: -11.506759643554688
    5. ' ' → logprob: -12.881759643554688
    6. '1' → logprob: -13.006759643554688
    7. ' et' → logprob: -13.381759643554688
    8. ' and' → logprob: -14.506759643554688
    9. ',
' → logprob: -14.631759643554688
    10. '‌,' → logprob: -15.256759643554688

Token 144: ' K' (ID: 658)
  Prédit: ' M'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' M' → logprob: -0.5124520063400269
    2. ' K' → logprob: -1.2624520063400269
    3. 'M' → logprob: -2.6374521255493164
    4. 'K' → logprob: -3.1374521255493164
    5. ' ' → logprob: -6.512452125549316
    6. 'X' → logprob: -8.262452125549316
    7. ' Q' → logprob: -8.387452125549316
    8. 'Q' → logprob: -8.887452125549316
    9. ' X' → logprob: -9.074952125549316
    10. 'x' → logprob: -9.574952125549316

Token 145: '.
' (ID: 558)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.22137735784053802
    2. '   ' → logprob: -2.096377372741699
    3. ' =' → logprob: -2.971377372741699
    4. '=' → logprob: -4.721377372741699
    5. ' ,' → logprob: -5.346377372741699
    6. ' ' → logprob: -5.846377372741699
    7. '    ' → logprob: -5.846377372741699
    8. ' N' → logprob: -6.721377372741699
    9. '  ' → logprob: -6.846377372741699
    10. '[' → logprob: -7.346377372741699

Token 146: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03878842294216156
    2. '    
' → logprob: -3.663788318634033
    3. '
' → logprob: -4.538788318634033
    4. '   
' → logprob: -7.413788318634033
    5. ' 
' → logprob: -8.538788795471191
    6. 'n' → logprob: -8.538788795471191
    7. '  
' → logprob: -8.913788795471191
    8. '\n' → logprob: -8.913788795471191
    9. ' ' → logprob: -9.038788795471191
    10. '    ' → logprob: -9.038788795471191

Token 147: ' N' (ID: 478)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6267428398132324
    2. '    
' → logprob: -1.6267428398132324
    3. 'N' (adapté à ' N') → logprob: -1.8767428398132324
    4. ' 
' → logprob: -2.7517428398132324
    5. '
' → logprob: -4.251742839813232
    6. ' N' → logprob: -4.626742839813232
    7. '   
' → logprob: -4.626742839813232
    8. ' ' → logprob: -5.376742839813232
    9. 'n' → logprob: -5.376742839813232
    10. '  
' → logprob: -5.751742839813232

Token 148: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -3.7697225252486533e-06
    2. ',K' → logprob: -12.625003814697266
    3. ' ,' → logprob: -15.125003814697266
    4. ',k' → logprob: -17.375003814697266
    5. ',N' → logprob: -18.500003814697266
    6. ',
' → logprob: -18.625003814697266
    7. ',

' → logprob: -18.625003814697266
    8. ',int' → logprob: -20.750003814697266
    9. 'K' → logprob: -21.250003814697266
    10. ',S' → logprob: -21.375003814697266

Token 149: ' K' (ID: 658)
  Prédit: ' K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.005793219897896051
    2. 'K' → logprob: -5.25579309463501
    3. ' ' → logprob: -7.50579309463501
    4. ' ' → logprob: -12.130793571472168
    5. '  ' → logprob: -12.755793571472168
    6. '    ' → logprob: -14.380793571472168
    7. '   ' → logprob: -15.755793571472168
    8. ' 
' → logprob: -16.00579261779785
    9. ' ' → logprob: -16.13079261779785
    10. '	K' → logprob: -17.13079261779785

Token 150: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0015043864259496331
    2. '=' → logprob: -6.501504421234131
    3. ' ' → logprob: -14.376503944396973
    4. '=input' → logprob: -14.751503944396973
    5. ')' → logprob: -15.126503944396973
    6. ' =
' → logprob: -15.376503944396973
    7. ' ' → logprob: -15.876503944396973
    8. ',' → logprob: -15.876503944396973
    9. '=int' → logprob: -16.25150489807129
    10. ' =
' → logprob: -16.62650489807129

Token 151: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.1602535843849182
    2. 'map' → logprob: -1.9102535247802734
    3. ' list' → logprob: -11.285253524780273
    4. ' ' → logprob: -12.535253524780273
    5. 'list' → logprob: -12.535253524780273
    6. '	map' → logprob: -12.660253524780273
    7. '   ' → logprob: -13.035253524780273
    8. ' ' → logprob: -13.285253524780273
    9. '  ' → logprob: -13.785253524780273
    10. 'int' → logprob: -14.160253524780273

Token 152: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.4233035445213318
    2. '(' → logprob: -1.4233036041259766
    3. '(str' → logprob: -2.4233036041259766
    4. '(input' → logprob: -4.173303604125977
    5. '(lambda' → logprob: -9.298303604125977
    6. '(
' → logprob: -10.173303604125977
    7. ' (' → logprob: -10.673303604125977
    8. '(list' → logprob: -11.298303604125977
    9. '(s' → logprob: -13.423303604125977
    10. '<int' → logprob: -13.423303604125977

Token 153: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.01824698969721794
    2. ',input' → logprob: -4.768247127532959
    3. 'input' → logprob: -5.393247127532959
    4. ',' → logprob: -5.893247127532959
    5. '(' → logprob: -6.518247127532959
    6. ' (' → logprob: -7.643247127532959
    7. ')' → logprob: -8.8932466506958
    8. ' input' → logprob: -9.1432466506958
    9. ')(' → logprob: -10.6432466506958
    10. '   ' → logprob: -10.6432466506958

Token 154: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.31328585743904114
    2. ' input' → logprob: -1.3132858276367188
    3. '(input' → logprob: -11.438285827636719
    4. ')' → logprob: -11.688285827636719
    5. '   ' → logprob: -13.063285827636719
    6. '	input' → logprob: -13.813285827636719
    7. ',input' → logprob: -14.438285827636719
    8. ' ' → logprob: -14.813285827636719
    9. '=input' → logprob: -15.063285827636719
    10. '```' → logprob: -15.938285827636719

Token 155: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0028236585203558207
    2. '()' → logprob: -5.877823829650879
    3. '())' → logprob: -11.127823829650879
    4. ' ().' → logprob: -12.752823829650879
    5. ')' → logprob: -14.627823829650879
    6. '()
' → logprob: -15.252823829650879
    7. '(' → logprob: -16.127822875976562
    8. ' ()' → logprob: -16.377822875976562
    9. '()`' → logprob: -16.377822875976562
    10. '()

' → logprob: -17.252822875976562

Token 156: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00407923199236393
    2. 'strip' → logprob: -5.504079341888428
    3. 'rstrip' → logprob: -14.62907886505127
    4. ' split' → logprob: -14.75407886505127
    5. '(split' → logprob: -17.379079818725586
    6. '.split' → logprob: -20.254079818725586
    7. ' strip' → logprob: -20.254079818725586
    8. 'read' → logprob: -21.129079818725586
    9. ')' → logprob: -21.254079818725586
    10. '_split' → logprob: -21.379079818725586

Token 157: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0044650123454630375
    2. '()' → logprob: -6.004465103149414
    3. '()))' → logprob: -6.254465103149414
    4. ')' → logprob: -9.879465103149414
    5. ' ())' → logprob: -12.129465103149414
    6. '())
' → logprob: -12.379465103149414
    7. '))' → logprob: -13.004465103149414
    8. '('' → logprob: -14.754465103149414
    9. '());' → logprob: -15.004465103149414
    10. '();)' → logprob: -15.254465103149414

Token 158: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.15566162765026093
    2. '  
' → logprob: -2.9056615829467773
    3. ':' → logprob: -3.0306615829467773
    4. ' 
' → logprob: -3.9056615829467773
    5. '    
' → logprob: -5.030661582946777
    6. ':
' → logprob: -5.530661582946777
    7. '   ' → logprob: -5.780661582946777
    8. '   
' → logprob: -6.155661582946777
    9. ' ' → logprob: -6.280661582946777
    10. '' → logprob: -6.405661582946777

Token 159: ' #' (ID: 1069)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' (adapté à ' #') → logprob: -0.1198013499379158
    2. 'result' → logprob: -2.7448012828826904
    3. 's' → logprob: -4.4948015213012695
    4. 'if' → logprob: -4.9948015213012695
    5. 'i' → logprob: -5.2448015213012695
    6. 'for' → logprob: -5.3698015213012695
    7. 'total' → logprob: -5.3698015213012695
    8. 'r' → logprob: -5.9948015213012695
    9. 'count' → logprob: -6.1198015213012695
    10. 'sum' → logprob: -6.2448015213012695

Token 160: ' On' (ID: 2160)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.24234265089035034
    2. '#' → logprob: -2.992342710494995
    3. 'if' → logprob: -3.242342710494995
    4. 'for' → logprob: -3.867342710494995
    5. 'i' → logprob: -3.992342710494995
    6. 'r' → logprob: -4.367342472076416
    7. ' if' → logprob: -4.367342472076416
    8. ''' → logprob: -4.742342472076416
    9. ' #' → logprob: -4.742342472076416
    10. 'n' → logprob: -5.117342472076416

Token 161: ' lit' (ID: 11980)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8657804727554321
    2. ' #' → logprob: -2.1157803535461426
    3. ' if' → logprob: -2.1157803535461426
    4. 'if' → logprob: -2.2407803535461426
    5. ' for' → logprob: -3.6157803535461426
    6. '#' → logprob: -3.6157803535461426
    7. '_' → logprob: -3.7407803535461426
    8. 'for' → logprob: -3.7407803535461426
    9. ' total' → logprob: -4.365780353546143
    10. '   ' → logprob: -4.740780353546143

Token 162: ' de' (ID: 334)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.028570100665092468
    2. '(' → logprob: -4.403570175170898
    3. ' ' → logprob: -5.278570175170898
    4. ' une' → logprob: -5.903570175170898
    5. '<|end|>' → logprob: -6.278570175170898
    6. ' un' → logprob: -6.528570175170898
    7. ' la' → logprob: -6.528570175170898
    8. '_' → logprob: -7.153570175170898
    9. 's' → logprob: -7.778570175170898
    10. ' les' → logprob: -8.153570175170898

Token 163: ' nouveau' (ID: 23184)
  Prédit: 'ux'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ux' → logprob: -0.029851499944925308
    2. 's' → logprob: -3.7798514366149902
    3. 'la' → logprob: -6.65485143661499
    4. ' la' → logprob: -6.77985143661499
    5. 'l' → logprob: -7.02985143661499
    6. 'range' → logprob: -7.15485143661499
    7. '#' → logprob: -7.65485143661499
    8. 'n' → logprob: -8.404851913452148
    9. ' range' → logprob: -8.529851913452148
    10. ' ' → logprob: -8.779851913452148

Token 164: ' une' (ID: 2463)
  Prédit: ' une'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' une' → logprob: -1.0939528942108154
    2. '<|end|>' → logprob: -1.4689528942108154
    3. ' la' → logprob: -1.7189528942108154
    4. '()' → logprob: -1.8439528942108154
    5. ' ' → logprob: -2.8439528942108154
    6. ' les' → logprob: -4.4689531326293945
    7. ' un' → logprob: -4.8439531326293945
    8. 's' → logprob: -5.4689531326293945
    9. ' l' → logprob: -6.3439531326293945
    10. 'une' → logprob: -6.4689531326293945

Token 165: ' ligne' (ID: 19583)
  Prédit: 'ligne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ligne' → logprob: -0.4437375068664551
    2. ' ligne' → logprob: -1.193737506866455
    3. 'liste' → logprob: -3.568737506866455
    4. ' liste' → logprob: -3.943737506866455
    5. ' ' → logprob: -6.568737506866455
    6. ' deuxième' → logprob: -7.068737506866455
    7. 'l' → logprob: -7.318737506866455
    8. '#' → logprob: -7.318737506866455
    9. 'chaine' → logprob: -7.318737506866455
    10. '()' → logprob: -7.568737506866455

Token 166: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -1.1290099620819092
    2. '<|end|>' → logprob: -1.5040099620819092
    3. '()' → logprob: -1.6290099620819092
    4. '   ' → logprob: -1.8790099620819092
    5. 'de' → logprob: -3.879009962081909
    6. ' ' → logprob: -4.254010200500488
    7. 's' → logprob: -4.379010200500488
    8. ')' → logprob: -4.504010200500488
    9. '    
' → logprob: -4.879010200500488
    10. '  ' → logprob: -4.879010200500488

Token 167: ' texte' (ID: 53492)
  Prédit: 'texte'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'texte' → logprob: -0.8390600085258484
    2. ' texte' → logprob: -1.0890600681304932
    3. ' code' → logprob: -1.7140600681304932
    4. 'code' → logprob: -3.339060068130493
    5. ' input' → logprob: -4.964059829711914
    6. 'entrée' → logprob: -5.714059829711914
    7. 'input' → logprob: -6.339059829711914
    8. 'text' → logprob: -6.714059829711914
    9. ' text' → logprob: -8.214059829711914
    10. 't' → logprob: -8.214059829711914

Token 168: ' de' (ID: 334)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5036978721618652
    2. '()' → logprob: -1.1286978721618652
    3. ',' → logprob: -3.2536978721618652
    4. '<|end|>' → logprob: -4.378697872161865
    5. '    
' → logprob: -5.253697872161865
    6. ' ' → logprob: -5.503697872161865
    7. '    ' → logprob: -5.753697872161865
    8. 's' → logprob: -6.378697872161865
    9. '  ' → logprob: -6.503697872161865
    10. ' ,' → logprob: -7.253697872161865

Token 169: ' l' (ID: 305)
  Prédit: 'ux'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ux' → logprob: -0.2857958972454071
    2. ' input' → logprob: -2.6607959270477295
    3. 's' → logprob: -2.9107959270477295
    4. ' la' → logprob: -3.4107959270477295
    5. ' code' → logprob: -3.4107959270477295
    6. 'scription' → logprob: -4.53579568862915
    7. ' s' → logprob: -4.91079568862915
    8. ' texte' → logprob: -5.53579568862915
    9. 'input' → logprob: -5.91079568862915
    10. ' ' → logprob: -5.91079568862915

Token 170: ''utilisateur' (ID: 140803)
  Prédit: ''entrée'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''entrée' → logprob: -0.06230085343122482
    2. 'entrée' → logprob: -2.81230092048645
    3. 'a' → logprob: -9.312300682067871
    4. ''autre' → logprob: -10.062300682067871
    5. ' entrée' → logprob: -10.187300682067871
    6. '’entrée' → logprob: -10.312300682067871
    7. '#' → logprob: -10.437300682067871
    8. ''utilisateur' → logprob: -10.937300682067871
    9. '
' → logprob: -11.187300682067871
    10. ''ent' → logprob: -11.187300682067871

Token 171: '.' (ID: 13)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.6355143785476685
    2. '   ' → logprob: -0.8855143785476685
    3. ' ,' → logprob: -3.260514259338379
    4. '()' → logprob: -5.510514259338379
    5. '    
' → logprob: -5.635514259338379
    6. 's' → logprob: -5.635514259338379
    7. '    ' → logprob: -6.135514259338379
    8. ' ' → logprob: -6.510514259338379
    9. ' ' → logprob: -7.135514259338379
    10. '(' → logprob: -7.760514259338379

Token 172: ' L' (ID: 451)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7784294486045837
    2. ' ' → logprob: -2.0284295082092285
    3. 's' → logprob: -2.1534295082092285
    4. '    ' → logprob: -2.6534295082092285
    5. '    
' → logprob: -2.7784295082092285
    6. ' 
' → logprob: -3.7784295082092285
    7. 'n' → logprob: -4.1534295082092285
    8. '<|end|>' → logprob: -4.1534295082092285
    9. '     
' → logprob: -4.2784295082092285
    10. '(s' → logprob: -4.4034295082092285

Token 173: ''utilisateur' (ID: 140803)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.38187822699546814
    2. 'iste' → logprob: -1.6318782567977905
    3. 'e' → logprob: -2.506878137588501
    4. 'es' → logprob: -4.13187837600708
    5. '#' → logprob: -4.63187837600708
    6. '   ' → logprob: -5.50687837600708
    7. 'ist' → logprob: -6.13187837600708
    8. ' a' → logprob: -6.25687837600708
    9. 'igne' → logprob: -7.38187837600708
    10. 'à' → logprob: -7.88187837600708

Token 174: ' devrait' (ID: 52773)
  Prédit: ' tape'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' tape' → logprob: -1.73415207862854
    2. 'ent' → logprob: -1.85915207862854
    3. ' fournit' → logprob: -2.35915207862854
    4. '<|end|>' → logprob: -2.48415207862854
    5. ' sais' → logprob: -2.85915207862854
    6. 't' → logprob: -2.98415207862854
    7. 'e' → logprob: -3.10915207862854
    8. ' devra' → logprob: -3.23415207862854
    9. ' doit' → logprob: -3.35915207862854
    10. ' va' → logprob: -3.35915207862854

Token 175: ' saisir' (ID: 152120)
  Prédit: ' fournir'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' fournir' → logprob: -1.2182561159133911
    2. 't' → logprob: -1.3432561159133911
    3. '<|end|>' → logprob: -1.7182561159133911
    4. ' saisir' → logprob: -2.7182559967041016
    5. ' entrer' → logprob: -2.9682559967041016
    6. ' ' → logprob: -3.0932559967041016
    7. ' taper' → logprob: -3.4682559967041016
    8. ' donner' → logprob: -4.968255996704102
    9. 'f' → logprob: -4.968255996704102
    10. ' input' → logprob: -5.218255996704102

Token 176: ' N' (ID: 478)
  Prédit: ' une'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' une' → logprob: -0.22847133874893188
    2. ' la' → logprob: -2.978471279144287
    3. ' ' → logprob: -3.728471279144287
    4. '()' → logprob: -3.853471279144287
    5. 'a' → logprob: -4.228471279144287
    6. 's' → logprob: -4.728471279144287
    7. 'une' → logprob: -4.728471279144287
    8. ' N' → logprob: -4.853471279144287
    9. ' a' → logprob: -4.853471279144287
    10. 'N' → logprob: -4.853471279144287

Token 177: ' ent' (ID: 1121)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 178: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.1540486216545105
    2. 'ières' → logprob: -2.0290486812591553
    3. 'i' → logprob: -5.654048442840576
    4. 'er' → logprob: -6.279048442840576
    5. 't' → logprob: -6.404048442840576
    6. 'ers' → logprob: -6.779048442840576
    7. 'ités' → logprob: -7.279048442840576
    8. 'ti' → logprob: -7.529048442840576
    9. 'ière' → logprob: -7.654048442840576
    10. 'ier' → logprob: -8.279048919677734

Token 179: ' sépar' (ID: 97160)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.04399853199720383
    2. 's' → logprob: -4.168998718261719
    3. '   ' → logprob: -4.293998718261719
    4. ' ,' → logprob: -5.293998718261719
    5. '.' → logprob: -5.668998718261719
    6. ')' → logprob: -6.793998718261719
    7. '<|end|>' → logprob: -7.293998718261719
    8. ' en' → logprob: -7.793998718261719
    9. ' integers' → logprob: -8.043998718261719
    10. ' =' → logprob: -8.043998718261719

Token 180: 'és' (ID: 1756)
  Prédit: 'és'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'és' → logprob: -0.010223117657005787
    2. ' par' → logprob: -5.135222911834717
    3. 'é' → logprob: -6.135222911834717
    4. 'par' → logprob: -7.260222911834717
    5. 'es' → logprob: -7.760222911834717
    6. ' espaces' → logprob: -9.010223388671875
    7. 'ées' → logprob: -9.010223388671875
    8. ' by' → logprob: -9.510223388671875
    9. 'e' → logprob: -9.635223388671875
    10. 'ément' → logprob: -9.760223388671875

Token 181: ' par' (ID: 686)
  Prédit: ' par'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' par' → logprob: -0.07385287433862686
    2. 'par' → logprob: -2.698852777481079
    3. 'es' → logprob: -6.073853015899658
    4. ' espaces' → logprob: -6.948853015899658
    5. '   ' → logprob: -8.9488525390625
    6. 'esp' → logprob: -9.1988525390625
    7. '```' → logprob: -9.1988525390625
    8. 'e' → logprob: -9.8238525390625
    9. 's' → logprob: -9.8238525390625
    10. ' ' → logprob: -10.0738525390625

Token 182: ' des' (ID: 731)
  Prédit: ' espaces'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' espaces' → logprob: -0.6869479417800903
    2. ' des' → logprob: -1.5619479417800903
    3. ' un' → logprob: -2.561947822570801
    4. 'un' → logprob: -2.811947822570801
    5. 'des' → logprob: -3.061947822570801
    6. ' espace' → logprob: -3.311947822570801
    7. ''espace' → logprob: -3.561947822570801
    8. ' ' → logprob: -4.936947822570801
    9. 'spaces' → logprob: -5.061947822570801
    10. 'space' → logprob: -5.311947822570801

Token 183: ' espaces' (ID: 98361)
  Prédit: ' espaces'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' espaces' → logprob: -0.03993978351354599
    2. 'esp' → logprob: -3.2899398803710938
    3. ''esp' → logprob: -6.789939880371094
    4. 'spaces' → logprob: -7.914939880371094
    5. 'es' → logprob: -9.164939880371094
    6. 'paces' → logprob: -9.539939880371094
    7. ' espace' → logprob: -9.664939880371094
    8. ''espace' → logprob: -9.789939880371094
    9. ' spaces' → logprob: -11.039939880371094
    10. 'space' → logprob: -11.164939880371094

Token 184: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6517629623413086
    2. ',' → logprob: -0.7767629623413086
    3. 's' → logprob: -4.401762962341309
    4. '.' → logprob: -6.151762962341309
    5. ' ,' → logprob: -6.526762962341309
    6. '    
' → logprob: -7.526762962341309
    7. ')' → logprob: -7.526762962341309
    8. ':' → logprob: -7.901762962341309
    9. '<|end|>' → logprob: -8.651762962341309
    10. '  ' → logprob: -9.151762962341309

Token 185: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00724524911493063
    2. '    
' → logprob: -6.632245063781738
    3. '
' → logprob: -7.257245063781738
    4. 'numbers' → logprob: -7.382245063781738
    5. 'A' → logprob: -7.944745063781738
    6. 'arr' → logprob: -8.007245063781738
    7. ' A' → logprob: -8.444745063781738
    8. ' numbers' → logprob: -8.444745063781738
    9. ' fruits' → logprob: -8.444745063781738
    10. 's' → logprob: -8.507245063781738

Token 186: ' #' (ID: 1069)
  Prédit: ' A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' A' → logprob: -1.3974632024765015
    2. '   ' → logprob: -1.6474632024765015
    3. ' numbers' → logprob: -2.147463321685791
    4. 'A' → logprob: -2.272463321685791
    5. 'numbers' → logprob: -2.522463321685791
    6. ' L' → logprob: -3.897463321685791
    7. 'arr' → logprob: -3.897463321685791
    8. ' a' → logprob: -4.397463321685791
    9. ' S' → logprob: -4.522463321685791
    10. 'a' → logprob: -4.647463321685791

Token 187: ' On' (ID: 2160)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -1.5057892799377441
    2. ' A' → logprob: -1.5057892799377441
    3. 'arr' → logprob: -2.130789279937744
    4. ' numbers' → logprob: -2.130789279937744
    5. 'numbers' → logprob: -2.630789279937744
    6. ' arr' → logprob: -3.380789279937744
    7. 'a' → logprob: -3.755789279937744
    8. ' a' → logprob: -4.130789279937744
    9. 'values' → logprob: -4.255789279937744
    10. ' values' → logprob: -4.255789279937744

Token 188: ' utilise' (ID: 70283)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -1.1959222555160522
    2. ' a' → logprob: -1.4459222555160522
    3. 'A' → logprob: -2.320922374725342
    4. 't' → logprob: -2.820922374725342
    5. ' A' → logprob: -3.195922374725342
    6. ' arr' → logprob: -3.195922374725342
    7. 'arr' → logprob: -3.445922374725342
    8. 'numbers' → logprob: -3.570922374725342
    9. ' numbers' → logprob: -3.945922374725342
    10. ' notes' → logprob: -4.445922374725342

Token 189: ' input' (ID: 3422)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.9012884497642517
    2. ' list' → logprob: -1.0262885093688965
    3. ' la' → logprob: -1.9012885093688965
    4. ' input' → logprob: -3.4012885093688965
    5. 'input' → logprob: -4.1512885093688965
    6. 'la' → logprob: -4.9012885093688965
    7. ' une' → logprob: -4.9012885093688965
    8. 'map' → logprob: -5.1512885093688965
    9. ' map' → logprob: -5.2762885093688965
    10. ' l' → logprob: -5.9012885093688965

Token 190: '(),' (ID: 2547)
  Prédit: '().'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '().' → logprob: -0.001034595537930727
    2. '()' → logprob: -6.876034736633301
    3. ' ().' → logprob: -13.8760347366333
    4. '()
' → logprob: -15.1260347366333
    5. '   ' → logprob: -15.3760347366333
    6. '.' → logprob: -16.001033782958984
    7. '.split' → logprob: -16.001033782958984
    8. 's' → logprob: -16.751033782958984
    9. '(' → logprob: -17.501033782958984
    10. '().
' → logprob: -17.501033782958984

Token 191: ' puis' (ID: 18766)
  Prédit: 'split'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.5056265592575073
    2. 'strip' → logprob: -1.8806265592575073
    3. ' split' → logprob: -2.380626678466797
    4. ' map' → logprob: -3.005626678466797
    5. 'map' → logprob: -3.130626678466797
    6. ' strip' → logprob: -3.755626678466797
    7. ' puis' → logprob: -4.005626678466797
    8. ' la' → logprob: -5.255626678466797
    9. 'list' → logprob: -5.755626678466797
    10. ' list' → logprob: -6.630626678466797

Token 192: ' split' (ID: 12648)
  Prédit: 'split'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.6000484824180603
    2. ' split' → logprob: -1.600048542022705
    3. ' map' → logprob: -1.725048542022705
    4. 'map' → logprob: -2.975048542022705
    5. ' list' → logprob: -4.725048542022705
    6. 'list' → logprob: -5.350048542022705
    7. 'strip' → logprob: -5.850048542022705
    8. ' la' → logprob: -6.225048542022705
    9. ' strip' → logprob: -7.725048542022705
    10. ' ' → logprob: -7.850048542022705

Token 193: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0018058452988043427
    2. '(),' → logprob: -6.376805782318115
    3. '().' → logprob: -9.626806259155273
    4. ' ()' → logprob: -11.501806259155273
    5. '())' → logprob: -12.001806259155273
    6. '(' → logprob: -12.126806259155273
    7. '()]' → logprob: -12.251806259155273
    8. '()
' → logprob: -13.126806259155273
    9. '()

' → logprob: -13.751806259155273
    10. '()`' → logprob: -13.751806259155273

Token 194: ' afin' (ID: 22217)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0068457345478236675
    2. '(),' → logprob: -5.006845951080322
    3. '()
' → logprob: -9.881845474243164
    4. ',' → logprob: -10.881845474243164
    5. '().' → logprob: -11.006845474243164
    6. '(' → logprob: -11.131845474243164
    7. '())' → logprob: -12.256845474243164
    8. ')' → logprob: -12.506845474243164
    9. ' ()' → logprob: -12.506845474243164
    10. '()

' → logprob: -12.631845474243164

Token 195: ' de' (ID: 334)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.566387414932251
    2. ' de' → logprob: -0.941387414932251
    3. ' d' → logprob: -3.941387414932251
    4. '   ' → logprob: -4.441387176513672
    5. ' ()' → logprob: -5.441387176513672
    6. '(' → logprob: -5.941387176513672
    7. '=' → logprob: -6.441387176513672
    8. 'de' → logprob: -6.941387176513672
    9. ' ' → logprob: -8.066387176513672
    10. '    ' → logprob: -8.316387176513672

Token 196: ' récupérer' (ID: 120406)
  Prédit: 'split'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -1.4014112949371338
    2. ' obtenir' → logprob: -1.4014112949371338
    3. 'input' → logprob: -2.151411294937134
    4. ' lire' → logprob: -2.651411294937134
    5. ' input' → logprob: -2.901411294937134
    6. 'ob' → logprob: -3.151411294937134
    7. ' récupérer' → logprob: -3.401411294937134
    8. ' split' → logprob: -3.401411294937134
    9. 'map' → logprob: -3.776411294937134
    10. ' map' → logprob: -3.901411294937134

Token 197: ' une' (ID: 2463)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.38937440514564514
    2. ' la' → logprob: -1.6393743753433228
    3. ' une' → logprob: -2.2643744945526123
    4. ' les' → logprob: -4.139374256134033
    5. 'une' → logprob: -6.389374256134033
    6. 'la' → logprob: -6.389374256134033
    7. 'les' → logprob: -6.889374256134033
    8. '   ' → logprob: -7.264374256134033
    9. ' N' → logprob: -7.264374256134033
    10. '().' → logprob: -7.639374256134033

Token 198: ' liste' (ID: 31719)
  Prédit: ' liste'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' liste' → logprob: -0.3901607096195221
    2. 'liste' → logprob: -1.1401606798171997
    3. 'list' → logprob: -6.89016056060791
    4. 'a' → logprob: -7.76516056060791
    5. 's' → logprob: -7.89016056060791
    6. ' nouvelle' → logprob: -7.89016056060791
    7. ' list' → logprob: -8.01516056060791
    8. 'chaine' → logprob: -9.51516056060791
    9. 'e' → logprob: -9.64016056060791
    10. ' autre' → logprob: -10.01516056060791

Token 199: ' de' (ID: 334)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.14375507831573486
    2. '   ' → logprob: -2.1437549591064453
    3. ' des' → logprob: -4.893754959106445
    4. 'des' → logprob: -5.393754959106445
    5. 'de' → logprob: -6.018754959106445
    6. ' de' → logprob: -8.018754959106445
    7. '(' → logprob: -8.143754959106445
    8. '[]' → logprob: -8.518754959106445
    9. 's' → logprob: -9.143754959106445
    10. '[' → logprob: -9.143754959106445

Token 200: ' chaînes' (ID: 179904)
  Prédit: 'str'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'str' → logprob: -1.0993770360946655
    2. ' chaînes' → logprob: -1.2243770360946655
    3. 'cha' → logprob: -1.5993770360946655
    4. 'chain' → logprob: -2.474377155303955
    5. 'strings' → logprob: -2.974377155303955
    6. 'chaine' → logprob: -3.849377155303955
    7. 'ch' → logprob: -4.974377155303955
    8. ' chain' → logprob: -6.599377155303955
    9. 'n' → logprob: -6.724377155303955
    10. 'string' → logprob: -6.849377155303955

Token 201: ' de' (ID: 334)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.5203461647033691
    2. '   ' → logprob: -1.1453461647033691
    3. 'de' → logprob: -2.520346164703369
    4. ',' → logprob: -6.395346164703369
    5. ' de' → logprob: -6.520346164703369
    6. '(),' → logprob: -6.520346164703369
    7. '()
' → logprob: -7.270346164703369
    8. 't' → logprob: -8.395345687866211
    9. 's' → logprob: -8.520345687866211
    10. '[]' → logprob: -9.020345687866211

Token 202: ' caractères' (ID: 183106)
  Prédit: 'car'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'car' → logprob: -0.004239735659211874
    2. ' caractères' → logprob: -5.504239559173584
    3. 'texte' → logprob: -9.129240036010742
    4. 'char' → logprob: -10.879240036010742
    5. 'chars' → logprob: -11.754240036010742
    6. ' caract' → logprob: -12.129240036010742
    7. ' caracteres' → logprob: -12.379240036010742
    8. 'chaine' → logprob: -12.379240036010742
    9. 'cha' → logprob: -12.754240036010742
    10. '```' → logprob: -12.754240036010742

Token 203: '.
' (ID: 558)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.06164516508579254
    2. '   ' → logprob: -3.186645269393921
    3. 's' → logprob: -5.186645030975342
    4. '(),' → logprob: -5.811645030975342
    5. ',' → logprob: -5.936645030975342
    6. '()
' → logprob: -6.186645030975342
    7. '().' → logprob: -6.686645030975342
    8. '()[' → logprob: -6.811645030975342
    9. '(' → logprob: -7.561645030975342
    10. '[' → logprob: -8.5616455078125

Token 204: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03737727180123329
    2. 'A' → logprob: -4.28737735748291
    3. 'numbers' → logprob: -5.28737735748291
    4. ' A' → logprob: -5.78737735748291
    5. 'arr' → logprob: -5.91237735748291
    6. '    
' → logprob: -6.53737735748291
    7. 'a' → logprob: -6.91237735748291
    8. ' numbers' → logprob: -7.16237735748291
    9. 'L' → logprob: -7.66237735748291
    10. 'S' → logprob: -7.66237735748291

Token 205: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.097413420677185
    2. 'numbers' → logprob: -1.722413420677185
    3. 'arr' → logprob: -2.2224135398864746
    4. 'A' → logprob: -2.2224135398864746
    5. ' A' → logprob: -2.4724135398864746
    6. ' numbers' → logprob: -2.9724135398864746
    7. 'values' → logprob: -3.8474135398864746
    8. ' arr' → logprob: -4.347413539886475
    9. 'a' → logprob: -4.472413539886475
    10. 'nums' → logprob: -5.222413539886475

Token 206: ' On' (ID: 2160)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -1.4713563919067383
    2. 'arr' → logprob: -1.4713563919067383
    3. 'numbers' → logprob: -1.5963563919067383
    4. ' A' → logprob: -2.8463563919067383
    5. 'values' → logprob: -3.2213563919067383
    6. 'a' → logprob: -3.4713563919067383
    7. ' numbers' → logprob: -3.9713563919067383
    8. 'nums' → logprob: -3.9713563919067383
    9. '   ' → logprob: -3.9713563919067383
    10. 'prices' → logprob: -4.221356391906738

Token 207: ' applique' (ID: 180579)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' continue' → logprob: -0.6203288435935974
    2. ' les' → logprob: -2.370328903198242
    3. 'les' → logprob: -2.745328903198242
    4. ' transforme' → logprob: -2.745328903198242
    5. ' utilise' → logprob: -2.745328903198242
    6. 'continue' → logprob: -2.995328903198242
    7. ' convert' → logprob: -3.245328903198242
    8. 'r' → logprob: -4.245328903198242
    9. 'convert' → logprob: -4.495328903198242
    10. 's' → logprob: -5.120328903198242

Token 208: ' map' (ID: 4014)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.8486522436141968
    2. 'list' → logprob: -1.0986522436141968
    3. ' la' → logprob: -2.4736523628234863
    4. ' list' → logprob: -2.7236523628234863
    5. 'map' → logprob: -3.0986523628234863
    6. ' int' → logprob: -4.223652362823486
    7. 'la' → logprob: -4.473652362823486
    8. '   ' → logprob: -4.848652362823486
    9. ' map' → logprob: -5.098652362823486
    10. 'lambda' → logprob: -6.473652362823486

Token 209: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.00025883622583933175
    2. '(' → logprob: -8.750258445739746
    3. 'int' → logprob: -9.750258445739746
    4. '<int' → logprob: -11.000258445739746
    5. '(lambda' → logprob: -11.375258445739746
    6. '=int' → logprob: -11.875258445739746
    7. ']int' → logprob: -13.250258445739746
    8. '[int' → logprob: -13.500258445739746
    9. '()' → logprob: -13.625258445739746
    10. ',int' → logprob: -14.250258445739746

Token 210: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0020936380606144667
    2. ',int' → logprob: -6.87709379196167
    3. ')' → logprob: -7.75209379196167
    4. ' ,' → logprob: -8.502093315124512
    5. '(),' → logprob: -8.877093315124512
    6. ',input' → logprob: -8.877093315124512
    7. '(int' → logprob: -9.627093315124512
    8. '   ' → logprob: -10.502093315124512
    9. '(' → logprob: -11.127093315124512
    10. ',
' → logprob: -11.502093315124512

Token 211: ' ...)' (ID: 100545)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.2385919690132141
    2. 'input' → logprob: -1.6135919094085693
    3. ')' → logprob: -4.363592147827148
    4. '(input' → logprob: -9.113592147827148
    5. ' )' → logprob: -9.488592147827148
    6. '   ' → logprob: -9.863592147827148
    7. '),' → logprob: -10.988592147827148
    8. ' ' → logprob: -10.988592147827148
    9. ',input' → logprob: -11.238592147827148
    10. '[input' → logprob: -11.363592147827148

Token 212: ' pour' (ID: 1930)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6630158424377441
    2. ',' → logprob: -1.7880158424377441
    3. '(' → logprob: -2.538015842437744
    4. '   ' → logprob: -2.663015842437744
    5. '(numbers' → logprob: -3.038015842437744
    6. '()' → logprob: -3.288015842437744
    7. 'numbers' → logprob: -4.413015842437744
    8. 'to' → logprob: -5.038015842437744
    9. '(nums' → logprob: -5.413015842437744
    10. 's' → logprob: -5.538015842437744

Token 213: ' convertir' (ID: 79223)
  Prédit: ' convertir'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' convertir' → logprob: -0.031646762043237686
    2. 'convert' → logprob: -4.156646728515625
    3. ' obtenir' → logprob: -4.781646728515625
    4. ' convert' → logprob: -5.531646728515625
    5. ' transformer' → logprob: -6.781646728515625
    6. 'transform' → logprob: -7.156646728515625
    7. 'assign' → logprob: -7.656646728515625
    8. 'ob' → logprob: -8.406646728515625
    9. ' créer' → logprob: -9.281646728515625
    10. ' récupérer' → logprob: -9.406646728515625

Token 214: ' chaque' (ID: 21194)
  Prédit: '(int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.26408055424690247
    2. '(' → logprob: -1.88908052444458
    3. 'int' → logprob: -3.26408052444458
    4. '(list' → logprob: -3.63908052444458
    5. '(lambda' → logprob: -5.13908052444458
    6. '   ' → logprob: -5.63908052444458
    7. 'list' → logprob: -6.13908052444458
    8. '(
' → logprob: -7.38908052444458
    9. 'la' → logprob: -7.88908052444458
    10. '()' → logprob: -8.014081001281738

Token 215: ' chaîne' (ID: 89288)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.16857817769050598
    2. ' élément' → logprob: -2.4185781478881836
    3. ' element' → logprob: -3.9185781478881836
    4. 'element' → logprob: -4.543578147888184
    5. 'int' → logprob: -4.793578147888184
    6. 'chaine' → logprob: -5.293578147888184
    7. ' chaîne' → logprob: -5.543578147888184
    8. ')' → logprob: -5.668578147888184
    9. '(int' → logprob: -6.043578147888184
    10. ' int' → logprob: -6.418578147888184

Token 216: ' en' (ID: 469)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.8630174398422241
    2. '(int' → logprob: -1.1130174398422241
    3. ',' → logprob: -1.6130174398422241
    4. '   ' → logprob: -4.113017559051514
    5. '(' → logprob: -4.363017559051514
    6. '(ent' → logprob: -5.238017559051514
    7. ',int' → logprob: -5.613017559051514
    8. '(str' → logprob: -6.113017559051514
    9. 'int' → logprob: -6.363017559051514
    10. '(en' → logprob: -6.613017559051514

Token 217: ' entier' (ID: 80473)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.38332611322402954
    2. ' int' → logprob: -1.3833260536193848
    3. ' des' → logprob: -3.3833260536193848
    4. 'ent' → logprob: -3.7583260536193848
    5. ' un' → logprob: -5.633326053619385
    6. ' ent' → logprob: -5.883326053619385
    7. ' entier' → logprob: -6.008326053619385
    8. ' integers' → logprob: -8.008326530456543
    9. ' une' → logprob: -8.133326530456543
    10. 'des' → logprob: -8.258326530456543

Token 218: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5057809948921204
    2. ',' → logprob: -1.5057809352874756
    3. ')' → logprob: -1.8807809352874756
    4. 's' → logprob: -5.380781173706055
    5. '(' → logprob: -5.755781173706055
    6. '),' → logprob: -6.505781173706055
    7. '()' → logprob: -6.505781173706055
    8. '(numbers' → logprob: -6.755781173706055
    9. 'numbers' → logprob: -7.130781173706055
    10. 'a' → logprob: -7.255781173706055

Token 219: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0028441029135137796
    2. '    
' → logprob: -8.002843856811523
    3. 'numbers' → logprob: -8.002843856811523
    4. 'A' → logprob: -8.252843856811523
    5. 'tokens' → logprob: -8.252843856811523
    6. 's' → logprob: -8.940343856811523
    7. ',' → logprob: -9.065343856811523
    8. ' A' → logprob: -9.315343856811523
    9. ' numbers' → logprob: -9.377843856811523
    10. 'L' → logprob: -9.502843856811523

Token 220: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9974901080131531
    2. 'A' → logprob: -1.3724901676177979
    3. ' A' → logprob: -2.122490167617798
    4. 'numbers' → logprob: -2.497490167617798
    5. 'arr' → logprob: -2.872490167617798
    6. 'values' → logprob: -3.497490167617798
    7. ' numbers' → logprob: -4.122489929199219
    8. 'a' → logprob: -4.747489929199219
    9. 'scores' → logprob: -4.997489929199219
    10. ' values' → logprob: -5.372489929199219

Token 221: ' On' (ID: 2160)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.6572597622871399
    2. ' A' → logprob: -1.4072597026824951
    3. 'arr' → logprob: -3.032259702682495
    4. '   ' → logprob: -3.157259702682495
    5. 'numbers' → logprob: -3.282259702682495
    6. 'values' → logprob: -4.157259941101074
    7. 'lst' → logprob: -4.782259941101074
    8. 'scores' → logprob: -5.032259941101074
    9. 'a' → logprob: -5.157259941101074
    10. ' numbers' → logprob: -5.157259941101074

Token 222: ' convert' (ID: 8452)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -1.669236421585083
    2. '   ' → logprob: -2.419236421585083
    3. ' continue' → logprob: -2.419236421585083
    4. 'liste' → logprob: -2.544236421585083
    5. ' liste' → logprob: -3.044236421585083
    6. ' récup' → logprob: -3.294236421585083
    7. 'continue' → logprob: -3.419236421585083
    8. 'n' → logprob: -3.544236421585083
    9. 'l' → logprob: -3.669236421585083
    10. 'r' → logprob: -4.169236183166504

Token 223: 'it' (ID: 278)
  Prédit: 'it'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'it' → logprob: -0.0005766240647062659
    2. 't' → logprob: -8.250576972961426
    3. '(' → logprob: -9.750576972961426
    4. '(it' → logprob: -10.125576972961426
    5. '   ' → logprob: -10.375576972961426
    6. ' it' → logprob: -10.500576972961426
    7. '()' → logprob: -10.625576972961426
    8. 'ir' → logprob: -10.625576972961426
    9. 'i' → logprob: -10.875576972961426
    10. 'ît' → logprob: -11.000576972961426

Token 224: ' finalement' (ID: 77979)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.33762630820274353
    2. 'list' → logprob: -1.587626338005066
    3. 'la' → logprob: -2.9626262187957764
    4. ' list' → logprob: -4.8376264572143555
    5. '(' → logprob: -5.0876264572143555
    6. '   ' → logprob: -5.0876264572143555
    7. '(list' → logprob: -5.4626264572143555
    8. 'int' → logprob: -6.8376264572143555
    9. ' en' → logprob: -7.0876264572143555
    10. 'l' → logprob: -7.2126264572143555

Token 225: ' l' (ID: 305)
  Prédit: 'la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'la' → logprob: -0.7426888346672058
    2. ' la' → logprob: -0.9926888346672058
    3. 'list' → logprob: -1.9926888942718506
    4. ' en' → logprob: -5.1176886558532715
    5. ' list' → logprob: -5.7426886558532715
    6. ' cette' → logprob: -5.8676886558532715
    7. 'en' → logprob: -6.1176886558532715
    8. 'l' → logprob: -6.9926886558532715
    9. 'ces' → logprob: -7.4926886558532715
    10. 'le' → logprob: -8.36768913269043

Token 226: ''objet' (ID: 124566)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.006066851783543825
    2. 'es' → logprob: -5.881066799163818
    3. 'e' → logprob: -6.256066799163818
    4. 'iste' → logprob: -7.006066799163818
    5. ''ensemble' → logprob: -9.256067276000977
    6. 'а' → logprob: -9.631067276000977
    7. '[' → logprob: -9.881067276000977
    8. ' a' → logprob: -10.131067276000977
    9. 'alist' → logprob: -10.756067276000977
    10. 'ist' → logprob: -10.881067276000977

Token 227: ' obtenu' (ID: 117330)
  Prédit: ' map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.47959667444229126
    2. 'map' → logprob: -1.1045966148376465
    3. 'list' → logprob: -3.4795966148376465
    4. ' list' → logprob: -4.6045966148376465
    5. ' en' → logprob: -4.8545966148376465
    6. 'en' → logprob: -8.604597091674805
    7. '(map' → logprob: -8.854597091674805
    8. '```' → logprob: -9.479597091674805
    9. 'range' → logprob: -9.604597091674805
    10. 'int' → logprob: -9.854597091674805

Token 228: ' grâce' (ID: 31589)
  Prédit: ' en'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' en' → logprob: -0.09219665080308914
    2. 'en' → logprob: -3.0921967029571533
    3. 'list' → logprob: -4.217196464538574
    4. ')' → logprob: -4.217196464538574
    5. ' list' → logprob: -4.842196464538574
    6. '   ' → logprob: -5.592196464538574
    7. ']' → logprob: -7.967196464538574
    8. '()' → logprob: -7.967196464538574
    9. '(list' → logprob: -8.967196464538574
    10. '(' → logprob: -9.092196464538574

Token 229: ' à' (ID: 1221)
  Prédit: ' à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.4044836759567261
    2. '=list' → logprob: -2.0294837951660156
    3. 'à' → logprob: -2.4044837951660156
    4. 'list' → logprob: -2.4044837951660156
    5. '   ' → logprob: -5.029483795166016
    6. ' list' → logprob: -5.404483795166016
    7. ''à' → logprob: -5.779483795166016
    8. '()' → logprob: -6.279483795166016
    9. '=' → logprob: -6.404483795166016
    10. ')' → logprob: -7.154483795166016

Token 230: ' map' (ID: 4014)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.016699885949492455
    2. ' list' → logprob: -4.14169979095459
    3. 'la' → logprob: -7.51669979095459
    4. ' la' → logprob: -9.39169979095459
    5. 'liste' → logprob: -10.39169979095459
    6. '```' → logprob: -13.26669979095459
    7. 'une' → logprob: -13.89169979095459
    8. ' liste' → logprob: -13.89169979095459
    9. '`' → logprob: -14.01669979095459
    10. 'l' → logprob: -14.01669979095459

Token 231: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -1.2230671644210815
    2. '(list' → logprob: -1.3480671644210815
    3. 'list' → logprob: -1.9730671644210815
    4. '(int' → logprob: -1.9730671644210815
    5. '(' → logprob: -2.348067283630371
    6. 'int' → logprob: -3.598067283630371
    7. ' en' → logprob: -3.848067283630371
    8. '(lambda' → logprob: -4.723067283630371
    9. '   ' → logprob: -5.723067283630371
    10. '```' → logprob: -6.223067283630371

Token 232: ' en' (ID: 469)
  Prédit: ' en'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' en' → logprob: -0.30389001965522766
    2. 'en' → logprob: -1.4288899898529053
    3. ')' → logprob: -4.303890228271484
    4. 'list' → logprob: -5.303890228271484
    5. 'int' → logprob: -6.303890228271484
    6. '()' → logprob: -7.553890228271484
    7. '(list' → logprob: -8.053890228271484
    8. '(' → logprob: -8.178890228271484
    9. '(int' → logprob: -8.553890228271484
    10. ' list' → logprob: -8.678890228271484

Token 233: ' une' (ID: 2463)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.8330176472663879
    2. 'une' → logprob: -1.5830175876617432
    3. ' une' → logprob: -1.7080175876617432
    4. 'liste' → logprob: -1.9580175876617432
    5. ' liste' → logprob: -3.583017587661743
    6. ' list' → logprob: -4.708017826080322
    7. 'a' → logprob: -7.958017826080322
    8. 'la' → logprob: -9.583017349243164
    9. ' a' → logprob: -9.708017349243164
    10. 'l' → logprob: -10.083017349243164

Token 234: ' vraie' (ID: 105841)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.30953559279441833
    2. ' liste' → logprob: -1.8095356225967407
    3. 'liste' → logprob: -2.559535503387451
    4. ' list' → logprob: -3.684535503387451
    5. 'Liste' → logprob: -11.55953598022461
    6. 'lista' → logprob: -11.80953598022461
    7. 'List' → logprob: -12.30953598022461
    8. ' lista' → logprob: -13.43453598022461
    9. 'lst' → logprob: -13.43453598022461
    10. ' listes' → logprob: -13.55953598022461

Token 235: ' liste' (ID: 31719)
  Prédit: ' list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.48888102173805237
    2. 'list' → logprob: -0.98888099193573
    3. ' liste' → logprob: -4.2388811111450195
    4. 'liste' → logprob: -8.23888111114502
    5. ' lista' → logprob: -13.11388111114502
    6. '_list' → logprob: -14.23888111114502
    7. 'List' → logprob: -14.23888111114502
    8. '[]' → logprob: -14.48888111114502
    9. 'lista' → logprob: -14.61388111114502
    10. ' listes' → logprob: -14.73888111114502

Token 236: ' d' (ID: 272)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07493135333061218
    2. '()' → logprob: -2.9499313831329346
    3. ',' → logprob: -5.1999311447143555
    4. '(' → logprob: -5.8249311447143555
    5. '.' → logprob: -6.8249311447143555
    6. 'de' → logprob: -6.9499311447143555
    7. 's' → logprob: -7.0749311447143555
    8. ')' → logprob: -7.0749311447143555
    9. ':' → logprob: -7.4499311447143555
    10. '(numbers' → logprob: -7.4499311447143555

Token 237: ''ent' (ID: 53422)
  Prédit: 'ent'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ent' → logprob: -0.9089864492416382
    2. ''ent' → logprob: -0.9089864492416382
    3. 'inte' → logprob: -2.0339865684509277
    4. ' ent' → logprob: -4.033986568450928
    5. 'int' → logprob: -4.158986568450928
    6. ' integers' → logprob: -4.658986568450928
    7. 'ints' → logprob: -5.283986568450928
    8. 'e' → logprob: -5.408986568450928
    9. '’ent' → logprob: -5.533986568450928
    10. '`' → logprob: -6.658986568450928

Token 238: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.0007637646631337702
    2. 'ières' → logprob: -7.250763893127441
    3. 'ier' → logprob: -10.625763893127441
    4. 'i' → logprob: -11.000763893127441
    5. 'ers' → logprob: -12.125763893127441
    6. 'ieres' → logprob: -12.500763893127441
    7. 'ires' → logprob: -13.625763893127441
    8. '   ' → logprob: -13.750763893127441
    9. 'ière' → logprob: -15.500763893127441
    10. 'eurs' → logprob: -15.625763893127441

Token 239: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.015988850966095924
    2. ',' → logprob: -5.140988826751709
    3. '()' → logprob: -6.390988826751709
    4. 'numbers' → logprob: -6.640988826751709
    5. '(numbers' → logprob: -6.765988826751709
    6. '(' → logprob: -7.390988826751709
    7. ':' → logprob: -7.515988826751709
    8. 's' → logprob: -7.890988826751709
    9. ')' → logprob: -8.140989303588867
    10. 'p' → logprob: -8.140989303588867

Token 240: ' que' (ID: 661)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.7161575555801392
    2. ' lst' → logprob: -1.8411575555801392
    3. ' L' → logprob: -2.2161574363708496
    4. ' A' → logprob: -2.2161574363708496
    5. 'liste' → logprob: -2.9661574363708496
    6. 'A' → logprob: -3.0911574363708496
    7. 'a' → logprob: -3.0911574363708496
    8. 'l' → logprob: -3.3411574363708496
    9. 'lst' → logprob: -3.3411574363708496
    10. 'numbers' → logprob: -3.5911574363708496

Token 241: ' l' (ID: 305)
  Prédit: 'numbers'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'numbers' → logprob: -0.922358512878418
    2. ' numbers' → logprob: -2.047358512878418
    3. 'lst' → logprob: -2.422358512878418
    4. ' baskets' → logprob: -2.922358512878418
    5. 'scores' → logprob: -3.172358512878418
    6. ' on' → logprob: -3.297358512878418
    7. ' lst' → logprob: -3.422358512878418
    8. 'prices' → logprob: -3.922358512878418
    9. 'nums' → logprob: -4.547358512878418
    10. 'a' → logprob: -4.797358512878418

Token 242: '’on' (ID: 25036)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -1.451643466949463
    2. 'on' → logprob: -1.576643466949463
    3. ' =' → logprob: -2.076643466949463
    4. '=' → logprob: -2.201643466949463
    5. '_list' → logprob: -3.201643466949463
    6. 'a' → logprob: -3.451643466949463
    7. ' liste' → logprob: -3.451643466949463
    8. ' on' → logprob: -3.451643466949463
    9. '=[]
' → logprob: -3.576643466949463
    10. '#' → logprob: -3.701643466949463

Token 243: ' ass' (ID: 1680)
  Prédit: ' stock'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' stock' → logprob: -0.025020692497491837
    2. 'stock' → logprob: -4.900020599365234
    3. ' nom' → logprob: -5.400020599365234
    4. ' transforme' → logprob: -6.525020599365234
    5. ' crée' → logprob: -6.525020599365234
    6. 's' → logprob: -6.650020599365234
    7. '#' → logprob: -6.900020599365234
    8. ' récup' → logprob: -7.025020599365234
    9. ' convert' → logprob: -7.400020599365234
    10. ' met' → logprob: -7.650020599365234

Token 244: 'igne' (ID: 24120)
  Prédit: 'iste'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iste' → logprob: -1.4127171039581299
    2. 'ène' → logprob: -1.5377171039581299
    3. 'ine' → logprob: -2.41271710395813
    4. 'igne' → logprob: -2.78771710395813
    5. 'iner' → logprob: -3.03771710395813
    6. 'ist' → logprob: -3.03771710395813
    7. 'ort' → logprob: -3.66271710395813
    8. 'ève' → logprob: -3.78771710395813
    9. 'ect' → logprob: -4.037716865539551
    10. 'list' → logprob: -4.287716865539551

Token 245: ' à' (ID: 1221)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14694440364837646
    2. ' à' → logprob: -2.521944522857666
    3. '()' → logprob: -4.021944522857666
    4. ' aux' → logprob: -4.146944522857666
    5. ' au' → logprob: -5.021944522857666
    6. 'au' → logprob: -5.146944522857666
    7. '(' → logprob: -6.521944522857666
    8. ')' → logprob: -6.521944522857666
    9. 's' → logprob: -6.771944522857666
    10. '    ' → logprob: -6.771944522857666

Token 246: ' la' (ID: 557)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.42781057953834534
    2. ' A' → logprob: -2.0528106689453125
    3. 'arr' → logprob: -3.3028106689453125
    4. 'lst' → logprob: -3.3028106689453125
    5. 'numbers' → logprob: -3.4278106689453125
    6. 'L' → logprob: -3.5528106689453125
    7. 'a' → logprob: -4.0528106689453125
    8. 'scores' → logprob: -4.9278106689453125
    9. 'liste' → logprob: -5.0528106689453125
    10. '```' → logprob: -5.1778106689453125

Token 247: ' variable' (ID: 11076)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.7121396064758301
    2. 'lst' → logprob: -1.83713960647583
    3. 'liste' → logprob: -2.08713960647583
    4. 'numbers' → logprob: -2.58713960647583
    5. 'arr' → logprob: -4.08713960647583
    6. 'list' → logprob: -4.21213960647583
    7. 'L' → logprob: -4.21213960647583
    8. 'array' → logprob: -4.21213960647583
    9. 'scores' → logprob: -4.21213960647583
    10. ' A' → logprob: -4.46213960647583

Token 248: ' H' (ID: 487)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.1472545564174652
    2. 'numbers' → logprob: -3.397254467010498
    3. ' A' → logprob: -3.522254467010498
    4. 'L' → logprob: -3.647254467010498
    5. 'a' → logprob: -4.397254467010498
    6. 'arr' → logprob: -5.022254467010498
    7. 'lst' → logprob: -5.022254467010498
    8. '   ' → logprob: -5.647254467010498
    9. 'scores' → logprob: -6.147254467010498
    10. 'liste' → logprob: -6.397254467010498

Token 249: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5848150253295898
    2. ' =' → logprob: -0.8348150253295898
    3. '=' → logprob: -4.83481502532959
    4. 'H' → logprob: -8.20981502532959
    5. 's' → logprob: -9.20981502532959
    6. '    ' → logprob: -9.20981502532959
    7. ':' → logprob: -9.33481502532959
    8. '    
' → logprob: -9.58481502532959
    9. '  ' → logprob: -9.95981502532959
    10. ',' → logprob: -10.08481502532959

Token 250: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.006285321898758411
    2. 'H' → logprob: -5.131285190582275
    3. ' H' → logprob: -8.131285667419434
    4. '    
' → logprob: -10.256285667419434
    5. '
' → logprob: -11.881285667419434
    6. '	H' → logprob: -12.256285667419434
    7. '   ' → logprob: -12.506285667419434
    8. '  ' → logprob: -13.006285667419434
    9. '    ' → logprob: -13.131285667419434
    10. ' ' → logprob: -13.131285667419434

Token 251: ' H' (ID: 487)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' (adapté à ' H') → logprob: -0.395469605922699
    2. '   ' → logprob: -1.1454696655273438
    3. ' H' → logprob: -4.770469665527344
    4. ' ' → logprob: -10.395469665527344
    5. '  ' → logprob: -10.520469665527344
    6. '    
' → logprob: -11.270469665527344
    7. '	H' → logprob: -12.770469665527344
    8. ' ' → logprob: -13.020469665527344
    9. '```' → logprob: -13.145469665527344
    10. '    ' → logprob: -13.145469665527344

Token 252: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.023251881822943687
    2. '=' → logprob: -3.77325177192688
    3. ',' → logprob: -12.2732515335083
    4. '   ' → logprob: -14.3982515335083
    5. ' ' → logprob: -14.6482515335083
    6. ' ' → logprob: -15.6482515335083
    7. '[' → logprob: -15.7732515335083
    8. '=[]' → logprob: -16.273252487182617
    9. ' =[' → logprob: -16.523252487182617
    10. '＝' → logprob: -16.898252487182617

Token 253: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.12692810595035553
    2. ' list' → logprob: -2.1269280910491943
    3. '	list' → logprob: -18.251928329467773
    4. 'map' → logprob: -18.501928329467773
    5. '=list' → logprob: -18.501928329467773
    6. 'List' → logprob: -19.126928329467773
    7. '   ' → logprob: -19.626928329467773
    8. '(list' → logprob: -20.001928329467773
    9. 'liste' → logprob: -20.501928329467773
    10. '[list' → logprob: -20.751928329467773

Token 254: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.005586856510490179
    2. '(int' → logprob: -5.505586624145508
    3. '(' → logprob: -6.505586624145508
    4. '(input' → logprob: -12.255586624145508
    5. '(
' → logprob: -12.630586624145508
    6. 'map' → logprob: -13.130586624145508
    7. ' (' → logprob: -13.255586624145508
    8. 'int' → logprob: -16.380586624145508
    9. '(mapping' → logprob: -16.505586624145508
    10. '(list' → logprob: -17.005586624145508

Token 255: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.005248106550425291
    2. '(' → logprob: -5.255248069763184
    3. ' (' → logprob: -11.880248069763184
    4. 'int' → logprob: -12.380248069763184
    5. '(
' → logprob: -13.380248069763184
    6. '<int' → logprob: -14.505248069763184
    7. ' int' → logprob: -14.755248069763184
    8. '=int' → logprob: -15.255248069763184
    9. '(input' → logprob: -15.255248069763184
    10. '[int' → logprob: -15.755248069763184

Token 256: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.5045329928398132
    2. '(input' → logprob: -1.504533052444458
    3. ',input' → logprob: -1.754533052444458
    4. '(' → logprob: -6.879532814025879
    5. ' ,' → logprob: -10.129532814025879
    6. 'input' → logprob: -11.254532814025879
    7. ' (' → logprob: -11.254532814025879
    8. '(
' → logprob: -13.004532814025879
    9. '(),' → logprob: -13.254532814025879
    10. '   ' → logprob: -13.629532814025879

Token 257: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.002194279106333852
    2. ' input' → logprob: -6.127194404602051
    3. '(input' → logprob: -11.62719440460205
    4. '<input' → logprob: -16.377193450927734
    5. ' ' → logprob: -16.627193450927734
    6. ',input' → logprob: -17.627193450927734
    7. '	input' → logprob: -18.002193450927734
    8. '   ' → logprob: -18.252193450927734
    9. '=input' → logprob: -18.252193450927734
    10. '[input' → logprob: -18.752193450927734

Token 258: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -4.36574100604048e-06
    2. '()' → logprob: -12.375004768371582
    3. ' ().' → logprob: -15.750004768371582
    4. '()).' → logprob: -18.375003814697266
    5. '(' → logprob: -18.500003814697266
    6. '()
' → logprob: -20.000003814697266
    7. '.' → logprob: -20.000003814697266
    8. '().'' → logprob: -20.375003814697266
    9. '>().' → logprob: -20.625003814697266
    10. '()))' → logprob: -20.625003814697266

Token 259: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -9.088346359931165e-07
    2. ' split' → logprob: -14.750000953674316
    3. '(split' → logprob: -15.250000953674316
    4. ')' → logprob: -15.375000953674316
    5. 'strip' → logprob: -16.75
    6. ').' → logprob: -17.75
    7. 'spl' → logprob: -18.625
    8. '().' → logprob: -18.625
    9. 'rstrip' → logprob: -18.75
    10. '.split' → logprob: -18.875

Token 260: '()))

' (ID: 125972)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.0038665852043777704
    2. '()' → logprob: -5.753866672515869
    3. '())' → logprob: -7.628866672515869
    4. '))' → logprob: -8.628866195678711
    5. '()))
' → logprob: -11.378866195678711
    6. '()));' → logprob: -12.128866195678711
    7. '(' → logprob: -12.628866195678711
    8. '())))' → logprob: -13.878866195678711
    9. '())).' → logprob: -14.628866195678711
    10. '()))

' → logprob: -14.628866195678711

Token 261: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.009036770090460777
    2. '    
' → logprob: -5.259036540985107
    3. '
' → logprob: -6.509036540985107
    4. 'for' → logprob: -7.009036540985107
    5. ' for' → logprob: -8.009037017822266
    6. '  
' → logprob: -8.134037017822266
    7. '#' → logprob: -8.509037017822266
    8. ' ' → logprob: -9.009037017822266
    9. '  ' → logprob: -9.509037017822266
    10. 'if' → logprob: -9.759037017822266

Token 262: ' #' (ID: 1069)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' (adapté à ' #') → logprob: -1.0548731088638306
    2. 'max' → logprob: -1.5548731088638306
    3. 'c' → logprob: -2.304872989654541
    4. 'result' → logprob: -2.429872989654541
    5. 'for' → logprob: -3.554872989654541
    6. 'r' → logprob: -3.679872989654541
    7. 'd' → logprob: -3.679872989654541
    8. 's' → logprob: -3.679872989654541
    9. 'count' → logprob: -3.804872989654541
    10. 'i' → logprob: -3.929872989654541

Token 263: ' On' (ID: 2160)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dp' → logprob: -1.0464378595352173
    2. 'result' → logprob: -2.1714377403259277
    3. 'max' → logprob: -2.1714377403259277
    4. 'for' → logprob: -2.2964377403259277
    5. '#' → logprob: -2.5464377403259277
    6. ' max' → logprob: -3.2964377403259277
    7. 'min' → logprob: -3.4214377403259277
    8. ' result' → logprob: -3.9214377403259277
    9. ' for' → logprob: -4.046437740325928
    10. 'if' → logprob: -4.046437740325928

Token 264: ' trie' (ID: 139428)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.2296624779701233
    2. ' for' → logprob: -2.1046624183654785
    3. 'if' → logprob: -3.3546624183654785
    4. ' #' → logprob: -3.7296624183654785
    5. ' if' → logprob: -4.3546624183654785
    6. '#' → logprob: -5.4796624183654785
    7. '_' → logprob: -5.8546624183654785
    8. ' =' → logprob: -7.2296624183654785
    9. '   ' → logprob: -7.4796624183654785
    10. 'range' → logprob: -7.7296624183654785

Token 265: ' la' (ID: 557)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.6872106194496155
    2. 'H' → logprob: -1.4372105598449707
    3. '(H' → logprob: -2.1872105598449707
    4. '   ' → logprob: -2.6872105598449707
    5. '(' → logprob: -3.1872105598449707
    6. ' H' → logprob: -3.4372105598449707
    7. ' la' → logprob: -5.437210559844971
    8. 's' → logprob: -8.687211036682129
    9. '	H' → logprob: -8.812211036682129
    10. ')' → logprob: -8.812211036682129

Token 266: ' liste' (ID: 31719)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.009608045220375061
    2. ' H' → logprob: -4.759608268737793
    3. 'liste' → logprob: -7.009608268737793
    4. ' liste' → logprob: -9.759608268737793
    5. 'list' → logprob: -11.009608268737793
    6. 's' → logprob: -11.884608268737793
    7. 'l' → logprob: -13.259608268737793
    8. 'lista' → logprob: -13.634608268737793
    9. 'lst' → logprob: -14.009608268737793
    10. ' list' → logprob: -14.259608268737793

Token 267: ' H' (ID: 487)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.25658467411994934
    2. '   ' → logprob: -1.881584644317627
    3. ' H' → logprob: -2.756584644317627
    4. '(H' → logprob: -5.131584644317627
    5. '()' → logprob: -5.756584644317627
    6. '(' → logprob: -7.131584644317627
    7. '	H' → logprob: -8.631585121154785
    8. 's' → logprob: -9.631585121154785
    9. ' ' → logprob: -9.756585121154785
    10. ',' → logprob: -10.006585121154785

Token 268: ' en' (ID: 469)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.15316222608089447
    2. '.sort' → logprob: -2.5281622409820557
    3. '()' → logprob: -3.6531622409820557
    4. 'H' → logprob: -4.028162002563477
    5. '.' → logprob: -4.278162002563477
    6. '()
' → logprob: -6.653162002563477
    7. ' =' → logprob: -7.153162002563477
    8. '(H' → logprob: -7.653162002563477
    9. '=' → logprob: -7.903162002563477
    10. ')' → logprob: -8.028162002563477

Token 269: ' ordre' (ID: 103061)
  Prédit: 'place'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'place' → logprob: -0.9945352077484131
    2. 'ordre' → logprob: -1.619535207748413
    3. ' place' → logprob: -1.744535207748413
    4. ' ordre' → logprob: -1.994535207748413
    5. 'reverse' → logprob: -3.494535207748413
    6. '   ' → logprob: -3.619535207748413
    7. '-place' → logprob: -4.494535446166992
    8. ' H' → logprob: -4.619535446166992
    9. ' reverse' → logprob: -4.619535446166992
    10. 'H' → logprob: -5.244535446166992

Token 270: ' décro' (ID: 176854)
  Prédit: 'cro'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cro' → logprob: -0.7421699166297913
    2. ' décro' → logprob: -0.9921699166297913
    3. ' cro' → logprob: -2.7421698570251465
    4. '   ' → logprob: -2.8671698570251465
    5. 'asc' → logprob: -4.2421698570251465
    6. 'd' → logprob: -4.8671698570251465
    7. 'desc' → logprob: -5.8671698570251465
    8. ' ' → logprob: -6.1171698570251465
    9. '=' → logprob: -7.4921698570251465
    10. ')' → logprob: -7.4921698570251465

Token 271: 'issant' (ID: 31359)
  Prédit: 'issant'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'issant' → logprob: -0.0005083533469587564
    2. 'isant' → logprob: -8.125508308410645
    3. 'issante' → logprob: -8.875508308410645
    4. 'ss' → logprob: -10.375508308410645
    5. 'issance' → logprob: -11.625508308410645
    6. 'is' → logprob: -12.250508308410645
    7. 'd' → logprob: -12.250508308410645
    8. 'nd' → logprob: -12.375508308410645
    9. 'nant' → logprob: -12.875508308410645
    10. 'iss' → logprob: -12.875508308410645

Token 272: '.' (ID: 13)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1282249540090561
    2. 'H' → logprob: -2.3782248497009277
    3. ',' → logprob: -3.7532248497009277
    4. ',
' → logprob: -6.628224849700928
    5. '.' → logprob: -7.253224849700928
    6. ')' → logprob: -7.878224849700928
    7. ' H' → logprob: -8.128225326538086
    8. '.
' → logprob: -8.253225326538086
    9. '(H' → logprob: -8.503225326538086
    10. '
' → logprob: -8.753225326538086

Token 273: ' La' (ID: 3038)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.23025400936603546
    2. ' H' → logprob: -2.1052539348602295
    3. '   ' → logprob: -2.4802539348602295
    4. '    
' → logprob: -9.980254173278809
    5. '
' → logprob: -10.355254173278809
    6. ' 
' → logprob: -10.980254173278809
    7. ',' → logprob: -11.480254173278809
    8. '  ' → logprob: -12.855254173278809
    9. ' ' → logprob: -12.855254173278809
    10. '    ' → logprob: -12.980254173278809

Token 274: ' fonction' (ID: 17610)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.14933201670646667
    2. ' H' → logprob: -2.024332046508789
    3. 's' → logprob: -6.524332046508789
    4. '#' → logprob: -6.524332046508789
    5. '.sort' → logprob: -6.899332046508789
    6. ' ' → logprob: -7.024332046508789
    7. '.reverse' → logprob: -8.149332046508789
    8. '.' → logprob: -8.399332046508789
    9. 'sort' → logprob: -8.524332046508789
    10. '   ' → logprob: -8.649332046508789

Token 275: ' sorted' (ID: 20099)
  Prédit: 'sorted'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sorted' → logprob: -0.21828380227088928
    2. 'sort' → logprob: -2.5932838916778564
    3. 'H' → logprob: -2.7182838916778564
    4. ' sorted' → logprob: -3.0932838916778564
    5. ' H' → logprob: -4.968283653259277
    6. 'reverse' → logprob: -6.593283653259277
    7. ' sort' → logprob: -7.718283653259277
    8. '   ' → logprob: -7.968283653259277
    9. ' reverse' → logprob: -8.718283653259277
    10. 's' → logprob: -8.843283653259277

Token 276: '()' (ID: 416)
  Prédit: '(H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(H' → logprob: -0.07041863352060318
    2. '(' → logprob: -2.6954185962677
    3. '()' → logprob: -8.070418357849121
    4. '(
' → logprob: -8.945418357849121
    5. ' (' → logprob: -11.320418357849121
    6. 'H' → logprob: -12.195418357849121
    7. 's' → logprob: -12.570418357849121
    8. '   ' → logprob: -12.695418357849121
    9. 'def' → logprob: -12.695418357849121
    10. ',' → logprob: -13.195418357849121

Token 277: ' retourne' (ID: 178818)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6987981200218201
    2. '(H' → logprob: -0.6987981200218201
    3. '(
' → logprob: -5.448798179626465
    4. ',' → logprob: -7.073798179626465
    5. 's' → logprob: -8.823798179626465
    6. ' (' → logprob: -9.573798179626465
    7. '   ' → logprob: -10.073798179626465
    8. 'H' → logprob: -10.073798179626465
    9. ')' → logprob: -10.698798179626465
    10. ' ' → logprob: -10.823798179626465

Token 278: ' une' (ID: 2463)
  Prédit: '(H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(H' → logprob: -0.02529004216194153
    2. '(' → logprob: -4.025290012359619
    3. 'H' → logprob: -5.400290012359619
    4. 'la' → logprob: -6.900290012359619
    5. 'une' → logprob: -7.400290012359619
    6. ' la' → logprob: -8.025290489196777
    7. 'l' → logprob: -8.525290489196777
    8. ' une' → logprob: -9.525290489196777
    9. ' H' → logprob: -9.525290489196777
    10. '(sorted' → logprob: -10.025290489196777

Token 279: ' nouvelle' (ID: 24562)
  Prédit: ' nouvelle'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nouvelle' → logprob: -0.23093101382255554
    2. 'nou' → logprob: -1.605931043624878
    3. 'new' → logprob: -5.730930805206299
    4. 'liste' → logprob: -6.855930805206299
    5. ' new' → logprob: -7.355930805206299
    6. ' liste' → logprob: -8.605931282043457
    7. 'n' → logprob: -8.605931282043457
    8. ' copie' → logprob: -9.355931282043457
    9. 'cop' → logprob: -9.980931282043457
    10. 'list' → logprob: -10.480931282043457

Token 280: ' liste' (ID: 31719)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1518799215555191
    2. '(H' → logprob: -2.6518800258636475
    3. ' liste' → logprob: -3.0268800258636475
    4. 'liste' → logprob: -3.9018800258636475
    5. '(
' → logprob: -7.401879787445068
    6. 'Liste' → logprob: -7.526879787445068
    7. '(l' → logprob: -8.776880264282227
    8. 'list' → logprob: -9.276880264282227
    9. '(

' → logprob: -9.901880264282227
    10. '()' → logprob: -9.901880264282227

Token 281: ' tri' (ID: 12665)
  Prédit: '(H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(H' → logprob: -0.09012512117624283
    2. ',' → logprob: -2.84012508392334
    3. '(' → logprob: -3.71512508392334
    4. '   ' → logprob: -6.46512508392334
    5. '(
' → logprob: -7.21512508392334
    6. 'H' → logprob: -7.59012508392334
    7. 'def' → logprob: -8.59012508392334
    8. ')' → logprob: -8.84012508392334
    9. 's' → logprob: -9.96512508392334
    10. '(sorted' → logprob: -9.96512508392334

Token 282: 'ée' (ID: 2894)
  Prédit: 'ée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ée' → logprob: -0.002156210830435157
    2. 'ed' → logprob: -6.7521562576293945
    3. 'née' → logprob: -8.127156257629395
    4. 'rée' → logprob: -9.002156257629395
    5. '   ' → logprob: -9.502156257629395
    6. '[' → logprob: -9.627156257629395
    7. 'é' → logprob: -9.752156257629395
    8. 'ee' → logprob: -10.002156257629395
    9. 'ées' → logprob: -10.127156257629395
    10. 'st' → logprob: -10.252156257629395

Token 283: '.
' (ID: 558)
  Prédit: '(H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(H' → logprob: -0.06279994547367096
    2. ',' → logprob: -3.0627999305725098
    3. '(' → logprob: -4.43779993057251
    4. 'H' → logprob: -7.31279993057251
    5. '(
' → logprob: -7.43779993057251
    6. '   ' → logprob: -7.43779993057251
    7. 'def' → logprob: -8.687800407409668
    8. ' ,' → logprob: -10.062800407409668
    9. ' (' → logprob: -10.312800407409668
    10. ')' → logprob: -10.312800407409668

Token 284: '   ' (ID: 271)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.2650671601295471
    2. '   ' → logprob: -1.5150671005249023
    3. ' H' → logprob: -4.640067100524902
    4. '(H' → logprob: -6.515067100524902
    5. '(' → logprob: -6.765067100524902
    6. ',' → logprob: -7.890067100524902
    7. ' (' → logprob: -8.890067100524902
    8. ')' → logprob: -10.015067100524902
    9. '()' → logprob: -10.890067100524902
    10. '(sorted' → logprob: -10.890067100524902

Token 285: ' #' (ID: 1069)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.04458208754658699
    2. ' H' → logprob: -3.5445821285247803
    3. '   ' → logprob: -4.294581890106201
    4. 'sorted' → logprob: -7.419581890106201
    5. ' sorted' → logprob: -9.04458236694336
    6. 'result' → logprob: -10.04458236694336
    7. ',' → logprob: -10.16958236694336
    8. ')' → logprob: -10.16958236694336
    9. 'descending' → logprob: -10.54458236694336
    10. 'reverse' → logprob: -10.66958236694336

Token 286: ' L' (ID: 451)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.014495598152279854
    2. ' H' → logprob: -4.514495372772217
    3. 'sorted' → logprob: -6.264495372772217
    4. '   ' → logprob: -6.764495372772217
    5. ' sorted' → logprob: -8.889495849609375
    6. 'tri' → logprob: -10.139495849609375
    7. 'desc' → logprob: -10.639495849609375
    8. 'descending' → logprob: -10.764495849609375
    9. 'top' → logprob: -10.889495849609375
    10. 'return' → logprob: -11.139495849609375

Token 287: ''' (ID: 6)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.22949664294719696
    2. '=' → logprob: -2.979496717453003
    3. ' =' → logprob: -3.479496717453003
    4. '_sorted' → logprob: -3.479496717453003
    5. 'sorted' → logprob: -3.854496717453003
    6. 'e' → logprob: -4.104496479034424
    7. 'a' → logprob: -4.229496479034424
    8. 'ist' → logprob: -4.729496479034424
    9. '#' → logprob: -5.354496479034424
    10. 'es' → logprob: -5.979496479034424

Token 288: 'argument' (ID: 13251)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.02737356163561344
    2. ' H' → logprob: -3.9023735523223877
    3. '=' → logprob: -6.277373790740967
    4. ' =' → logprob: -6.527373790740967
    5. 'sorted' → logprob: -7.027373790740967
    6. '#' → logprob: -7.277373790740967
    7. '   ' → logprob: -7.777373790740967
    8. 's' → logprob: -9.027373313903809
    9. ')' → logprob: -9.027373313903809
    10. ' ' → logprob: -9.277373313903809

Token 289: ' reverse' (ID: 18199)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.2639406621456146
    2. 'reverse' → logprob: -2.3889405727386475
    3. 'H' → logprob: -2.7639405727386475
    4. '(H' → logprob: -2.8889405727386475
    5. ',' → logprob: -4.888940811157227
    6. 'sorted' → logprob: -5.388940811157227
    7. '(reverse' → logprob: -5.763940811157227
    8. '(sorted' → logprob: -6.513940811157227
    9. ')' → logprob: -6.513940811157227
    10. '(' → logprob: -7.138940811157227

Token 290: '=True' (ID: 7827)
  Prédit: '=True'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=True' → logprob: -0.00018542143516242504
    2. '=' → logprob: -8.625185012817383
    3. ' =' → logprob: -12.125185012817383
    4. '=T' → logprob: -15.250185012817383
    5. '=False' → logprob: -15.750185012817383
    6. '   ' → logprob: -17.750185012817383
    7. '=s' → logprob: -18.625185012817383
    8. 'True' → logprob: -18.875185012817383
    9. '=
' → logprob: -19.125185012817383
    10. '=B' → logprob: -20.000185012817383

Token 291: ' indique' (ID: 97324)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00095267134020105
    2. ',' → logprob: -7.25095272064209
    3. '),' → logprob: -9.37595272064209
    4. ')
' → logprob: -10.12595272064209
    5. '   ' → logprob: -10.25095272064209
    6. ' )' → logprob: -10.37595272064209
    7. '))' → logprob: -11.12595272064209
    8. ' permet' → logprob: -12.62595272064209
    9. ').' → logprob: -12.75095272064209
    10. '=' → logprob: -12.75095272064209

Token 292: ' que' (ID: 661)
  Prédit: '=True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=True' → logprob: -0.18422745168209076
    2. ' que' → logprob: -2.059227466583252
    3. 'True' → logprob: -4.309227466583252
    4. ',' → logprob: -4.309227466583252
    5. ' True' → logprob: -4.559227466583252
    6. '=' → logprob: -6.684227466583252
    7. '   ' → logprob: -7.684227466583252
    8. 'que' → logprob: -7.934227466583252
    9. ' le' → logprob: -8.434226989746094
    10. ' that' → logprob: -8.559226989746094

Token 293: ' l' (ID: 305)
  Prédit: ' le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.3465302586555481
    2. 'le' → logprob: -2.3465301990509033
    3. ' l' → logprob: -2.7215301990509033
    4. ' la' → logprob: -2.9715301990509033
    5. 'l' → logprob: -3.9715301990509033
    6. ' sorted' → logprob: -3.9715301990509033
    7. 'sorted' → logprob: -4.596530437469482
    8. ' on' → logprob: -4.971530437469482
    9. 'tri' → logprob: -5.596530437469482
    10. ' tri' → logprob: -5.596530437469482

Token 294: ''on' (ID: 25812)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.8119217753410339
    2. 'sorted' → logprob: -1.6869218349456787
    3. 'e' → logprob: -2.0619218349456787
    4. 'a' → logprob: -2.3119218349456787
    5. ''on' → logprob: -2.9369218349456787
    6. '=True' → logprob: -3.6869218349456787
    7. ''' → logprob: -3.8119218349456787
    8. '='' → logprob: -4.4369215965271
    9. 'es' → logprob: -4.8119215965271
    10. '_sorted' → logprob: -5.3119215965271

Token 295: ' veut' (ID: 41653)
  Prédit: 've'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 've' → logprob: -0.7322734594345093
    2. ' souhaite' → logprob: -0.8572734594345093
    3. ' veut' → logprob: -2.982273578643799
    4. 'sou' → logprob: -4.232273578643799
    5. ' ve' → logprob: -4.732273578643799
    6. 'veux' → logprob: -4.857273578643799
    7. ' trie' → logprob: -5.357273578643799
    8. 'tr' → logprob: -5.857273578643799
    9. 'tri' → logprob: -6.107273578643799
    10. ' tri' → logprob: -6.982273578643799

Token 296: ' un' (ID: 537)
  Prédit: ' tr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' tr' → logprob: -0.43088188767433167
    2. 'tr' → logprob: -1.3058818578720093
    3. ' que' → logprob: -2.805881977081299
    4. ' un' → logprob: -4.305881977081299
    5. 'que' → logprob: -5.930881977081299
    6. 't' → logprob: -7.680881977081299
    7. 'un' → logprob: -7.680881977081299
    8. ' une' → logprob: -8.05588150024414
    9. ' True' → logprob: -8.43088150024414
    10. 'True' → logprob: -8.93088150024414

Token 297: ' tri' (ID: 12665)
  Prédit: 'ordre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ordre' → logprob: -0.8483229875564575
    2. 'tri' → logprob: -1.2233229875564575
    3. ' tri' → logprob: -1.3483229875564575
    4. ' ordre' → logprob: -4.223322868347168
    5. 'tr' → logprob: -6.598322868347168
    6. '_tri' → logprob: -7.723322868347168
    7. ''ordre' → logprob: -7.973322868347168
    8. ' ' → logprob: -8.473322868347168
    9. ' trie' → logprob: -8.848322868347168
    10. 't' → logprob: -9.223322868347168

Token 298: ' par' (ID: 686)
  Prédit: '=True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=True' → logprob: -1.293398141860962
    2. ',' → logprob: -1.543398141860962
    3. ' reverse' → logprob: -1.793398141860962
    4. ' décro' → logprob: -2.543398141860962
    5. ' descending' → logprob: -2.918398141860962
    6. ' inverse' → logprob: -3.668398141860962
    7. 'de' → logprob: -3.668398141860962
    8. '   ' → logprob: -3.668398141860962
    9. ' dec' → logprob: -3.793398141860962
    10. 'desc' → logprob: -4.043397903442383

Token 299: ' ordre' (ID: 103061)
  Prédit: 'ordre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ordre' → logprob: -0.19451095163822174
    2. ' ordre' → logprob: -2.0695109367370605
    3. 'd' → logprob: -4.3195109367370605
    4. 'dé' → logprob: -4.5695109367370605
    5. 'descending' → logprob: -4.6945109367370605
    6. 'desc' → logprob: -5.0695109367370605
    7. ''ordre' → logprob: -5.3195109367370605
    8. 'reverse' → logprob: -7.1945109367370605
    9. 'de' → logprob: -7.1945109367370605
    10. 'ord' → logprob: -7.1945109367370605

Token 300: ' décro' (ID: 176854)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.7440323233604431
    2. ' décro' → logprob: -1.494032382965088
    3. 'desc' → logprob: -2.244032382965088
    4. '   ' → logprob: -2.744032382965088
    5. 'de' → logprob: -3.494032382965088
    6. '=' → logprob: -3.869032382965088
    7. 'dé' → logprob: -3.869032382965088
    8. 'inverse' → logprob: -4.244032382965088
    9. 'descending' → logprob: -4.369032382965088
    10. 'dec' → logprob: -4.369032382965088

Token 301: 'issant' (ID: 31359)
  Prédit: 'ss'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ss' → logprob: -1.303967833518982
    2. 'sc' → logprob: -1.803967833518982
    3. 'asant' → logprob: -1.803967833518982
    4. 's' → logprob: -1.928967833518982
    5. 'sent' → logprob: -2.5539679527282715
    6. 'issant' → logprob: -2.9289679527282715
    7. 'sd' → logprob: -3.6789679527282715
    8. 'd' → logprob: -3.8039679527282715
    9. 'isant' → logprob: -4.0539679527282715
    10. 'sans' → logprob: -4.6789679527282715

Token 302: ' (' (ID: 350)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.2720414102077484
    2. 'H' → logprob: -2.5220413208007812
    3. ')' → logprob: -2.6470413208007812
    4. '   ' → logprob: -3.1470413208007812
    5. ')
' → logprob: -3.2720413208007812
    6. ',H' → logprob: -6.522041320800781
    7. '(H' → logprob: -6.772041320800781
    8. '),' → logprob: -6.897041320800781
    9. 'sorted' → logprob: -7.272041320800781
    10. ',
' → logprob: -7.397041320800781

Token 303: 'du' (ID: 698)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.029547974467277527
    2. ').' → logprob: -3.654547929763794
    3. ')
' → logprob: -6.529548168182373
    4. '))' → logprob: -6.904548168182373
    5. '),' → logprob: -8.154547691345215
    6. ' )' → logprob: -8.654547691345215
    7. ',' → logprob: -9.279547691345215
    8. '=True' → logprob: -9.904547691345215
    9. ')).' → logprob: -10.029547691345215
    10. 'True' → logprob: -10.404547691345215

Token 304: ' plus' (ID: 2932)
  Prédit: 'plus'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'plus' → logprob: -0.04374069347977638
    2. ' plus' → logprob: -3.293740749359131
    3. 'H' → logprob: -6.293740749359131
    4. 'largest' → logprob: -7.418740749359131
    5. 'pl' → logprob: -7.543740749359131
    6. '#' → logprob: -7.668740749359131
    7. 'val' → logprob: -7.918740749359131
    8. 'larg' → logprob: -8.168740272521973
    9. 'grand' → logprob: -8.293740272521973
    10. ')' → logprob: -8.918740272521973

Token 305: ' grand' (ID: 6363)
  Prédit: ' grand'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' grand' → logprob: -0.2546502947807312
    2. 'grand' → logprob: -1.504650354385376
    3. ' grands' → logprob: -7.254650115966797
    4. ',' → logprob: -7.379650115966797
    5. 'gr' → logprob: -7.754650115966797
    6. '_gr' → logprob: -8.504650115966797
    7. ' large' → logprob: -8.754650115966797
    8. ' Grand' → logprob: -9.379650115966797
    9. ' grandes' → logprob: -9.379650115966797
    10. ' grande' → logprob: -9.504650115966797

Token 306: ' au' (ID: 2791)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.11530759185552597
    2. ')' → logprob: -2.240307569503784
    3. ',)' → logprob: -6.490307807922363
    4. '),' → logprob: -7.990307807922363
    5. ' ,' → logprob: -8.240307807922363
    6. 'des' → logprob: -8.990307807922363
    7. ' )' → logprob: -9.365307807922363
    8. ',
' → logprob: -10.365307807922363
    9. 'de' → logprob: -10.615307807922363
    10. 'à' → logprob: -11.490307807922363

Token 307: ' plus' (ID: 2932)
  Prédit: ' plus'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' plus' → logprob: -0.020149530842900276
    2. ' moindre' → logprob: -4.7701497077941895
    3. 'plus' → logprob: -5.5201497077941895
    4. ' smaller' → logprob: -6.1451497077941895
    5. ' smallest' → logprob: -6.6451497077941895
    6. ',' → logprob: -7.2701497077941895
    7. ' ,' → logprob: -7.8951497077941895
    8. ' petit' → logprob: -7.8951497077941895
    9. 'moins' → logprob: -8.145149230957031
    10. ' moins' → logprob: -8.270149230957031

Token 308: ' petit' (ID: 20577)
  Prédit: 'pet'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pet' → logprob: -0.001840229262597859
    2. ' petit' → logprob: -6.626840114593506
    3. '   ' → logprob: -9.126840591430664
    4. 'prem' → logprob: -9.626840591430664
    5. 'grand' → logprob: -9.626840591430664
    6. '```' → logprob: -9.876840591430664
    7. 'plus' → logprob: -10.376840591430664
    8. 'p' → logprob: -10.376840591430664
    9. 'pu' → logprob: -10.501840591430664
    10. 'pe' → logprob: -10.626840591430664

Token 309: ').
' (ID: 6294)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.09093983471393585
    2. ')' → logprob: -2.59093976020813
    3. '))
' → logprob: -5.340939998626709
    4. ')).' → logprob: -5.590939998626709
    5. ').' → logprob: -6.340939998626709
    6. '),' → logprob: -7.965939998626709
    7. ')),' → logprob: -8.21593952178955
    8. ' ))' → logprob: -8.34093952178955
    9. ',' → logprob: -8.46593952178955
    10. ')))' → logprob: -8.59093952178955

Token 310: '   ' (ID: 271)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.4445089101791382
    2. ' H' → logprob: -1.3195089101791382
    3. '   ' → logprob: -2.5695090293884277
    4. ' sorted' → logprob: -4.944509029388428
    5. 'sorted' → logprob: -5.069509029388428
    6. ' tri' → logprob: -7.819509029388428
    7. 'tri' → logprob: -8.31950855255127
    8. '```' → logprob: -8.56950855255127
    9. ' top' → logprob: -8.81950855255127
    10. 'tr' → logprob: -9.31950855255127

Token 311: ' #' (ID: 1069)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.10594875365495682
    2. ' H' → logprob: -2.4809486865997314
    3. '   ' → logprob: -4.4809489250183105
    4. 'sorted' → logprob: -5.7309489250183105
    5. ' sorted' → logprob: -6.4809489250183105
    6. 'top' → logprob: -9.105948448181152
    7. '```' → logprob: -9.230948448181152
    8. ' heights' → logprob: -9.230948448181152
    9. ' top' → logprob: -9.605948448181152
    10. 'tri' → logprob: -9.980948448181152

Token 312: ' Ainsi' (ID: 65093)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.031220968812704086
    2. ' H' → logprob: -4.03122091293335
    3. 'sorted' → logprob: -4.53122091293335
    4. '   ' → logprob: -7.28122091293335
    5. ' sorted' → logprob: -7.40622091293335
    6. 'tri' → logprob: -8.781221389770508
    7. 'he' → logprob: -9.406221389770508
    8. 'tr' → logprob: -9.406221389770508
    9. 'top' → logprob: -9.656221389770508
    10. 'h' → logprob: -9.781221389770508

Token 313: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.0312288999557495
    2. ' H' → logprob: -1.1562288999557495
    3. 'H' → logprob: -1.4062288999557495
    4. '   ' → logprob: -3.031229019165039
    5. ' ,' → logprob: -4.781229019165039
    6. ' la' → logprob: -4.781229019165039
    7. 'sorted' → logprob: -4.906229019165039
    8. ' sorted' → logprob: -5.406229019165039
    9. ')' → logprob: -7.031229019165039
    10. ':' → logprob: -7.406229019165039

Token 314: ' le' (ID: 505)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.29227811098098755
    2. ' H' → logprob: -1.4172780513763428
    3. 'sorted' → logprob: -5.292278289794922
    4. ' sorted' → logprob: -6.417278289794922
    5. '   ' → logprob: -7.417278289794922
    6. 'top' → logprob: -7.542278289794922
    7. ' top' → logprob: -7.667278289794922
    8. ' la' → logprob: -7.917278289794922
    9. 'he' → logprob: -8.292278289794922
    10. 'le' → logprob: -8.917278289794922

Token 315: ' ou' (ID: 2031)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.0393231138586998
    2. ' H' → logprob: -3.539323091506958
    3. '#' → logprob: -5.664323329925537
    4. 'sorted' → logprob: -5.789323329925537
    5. ' sorted' → logprob: -7.664323329925537
    6. 'result' → logprob: -8.164322853088379
    7. 'tri' → logprob: -8.414322853088379
    8. 'top' → logprob: -8.414322853088379
    9. 'largest' → logprob: -8.414322853088379
    10. 'max' → logprob: -9.039322853088379

Token 316: ' les' (ID: 1341)
  Prédit: ' H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' H' → logprob: -0.7880725264549255
    2. ' premier' → logprob: -1.1630725860595703
    3. 'H' → logprob: -2.4130725860595703
    4. ' plus' → logprob: -2.6630725860595703
    5. 'plus' → logprob: -3.9130725860595703
    6. ' meilleur' → logprob: -4.16307258605957
    7. '#' → logprob: -4.16307258605957
    8. ' #' → logprob: -5.66307258605957
    9. 'prem' → logprob: -6.03807258605957
    10. ' la' → logprob: -6.28807258605957

Token 317: ' plus' (ID: 2932)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.4629899561405182
    2. ' H' → logprob: -1.7129899263381958
    3. '#' → logprob: -3.3379900455474854
    4. ' plus' → logprob: -3.9629900455474854
    5. 'élé' → logprob: -4.087989807128906
    6. ' elements' → logprob: -4.087989807128906
    7. ' éléments' → logprob: -4.462989807128906
    8. ' tallest' → logprob: -4.962989807128906
    9. 'plus' → logprob: -5.212989807128906
    10. 'K' → logprob: -5.337989807128906

Token 318: ' grands' (ID: 43085)
  Prédit: 'gr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'gr' → logprob: -0.5114682912826538
    2. ' grands' → logprob: -1.3864682912826538
    3. 'grand' → logprob: -2.5114684104919434
    4. ' grand' → logprob: -2.8864684104919434
    5. ' grandes' → logprob: -4.636468410491943
    6. '_gr' → logprob: -6.261468410491943
    7. ' grande' → logprob: -7.261468410491943
    8. ' grans' → logprob: -7.511468410491943
    9. ' hauts' → logprob: -9.386467933654785
    10. 'import' → logprob: -9.386467933654785

Token 319: ' éléments' (ID: 57375)
  Prédit: ' éléments'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' éléments' → logprob: -0.32909050583839417
    2. 'élé' → logprob: -1.7040904760360718
    3. ' elements' → logprob: -3.2040905952453613
    4. ' H' → logprob: -3.5790905952453613
    5. 'H' → logprob: -4.579090595245361
    6. ' élément' → logprob: -5.454090595245361
    7. ' valeurs' → logprob: -5.829090595245361
    8. ' él' → logprob: -6.079090595245361
    9. 's' → logprob: -6.079090595245361
    10. 'elements' → logprob: -6.204090595245361

Token 320: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.21258030831813812
    2. 'de' → logprob: -2.0875802040100098
    3. 's' → logprob: -3.4625802040100098
    4. ' sont' → logprob: -4.46258020401001
    5. 'H' → logprob: -5.46258020401001
    6. ' seront' → logprob: -5.58758020401001
    7. ' tri' → logprob: -5.71258020401001
    8. 'rest' → logprob: -6.21258020401001
    9. ' rest' → logprob: -6.46258020401001
    10. ' dans' → logprob: -6.46258020401001

Token 321: ' la' (ID: 557)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.5813059210777283
    2. ' H' → logprob: -0.8313059210777283
    3. ' la' → logprob: -5.331305980682373
    4. 'la' → logprob: -8.456305503845215
    5. 'l' → logprob: -8.956305503845215
    6. 's' → logprob: -10.456305503845215
    7. ' ' → logprob: -10.456305503845215
    8. ' l' → logprob: -10.581305503845215
    9. ' ' → logprob: -11.331305503845215
    10. 'the' → logprob: -11.456305503845215

Token 322: ' liste' (ID: 31719)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.2244407683610916
    2. 'liste' → logprob: -2.599440813064575
    3. 'tri' → logprob: -2.974440813064575
    4. ' H' → logprob: -3.224440813064575
    5. ' tri' → logprob: -4.599440574645996
    6. 'list' → logprob: -5.349440574645996
    7. ' tableau' → logprob: -5.724440574645996
    8. ' liste' → logprob: -5.849440574645996
    9. 'code' → logprob: -6.224440574645996
    10. 'tr' → logprob: -6.224440574645996

Token 323: ' seront' (ID: 35024)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' → logprob: -1.0356954336166382
    2. ' H' → logprob: -1.6606954336166382
    3. ' seront' → logprob: -1.7856954336166382
    4. ' tri' → logprob: -2.2856955528259277
    5. ' sont' → logprob: -2.5356955528259277
    6. 's' → logprob: -3.1606955528259277
    7. 'tri' → logprob: -4.035695552825928
    8. ' appara' → logprob: -4.410695552825928
    9. ' se' → logprob: -4.660695552825928
    10. 'ser' → logprob: -5.160695552825928

Token 324: ' plac' (ID: 7097)
  Prédit: ' plac'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' plac' → logprob: -0.48230254650115967
    2. 'plac' → logprob: -1.3573025465011597
    3. ' en' → logprob: -2.857302665710449
    4. ' H' → logprob: -4.107302665710449
    5. 'au' → logprob: -4.232302665710449
    6. ' au' → logprob: -4.857302665710449
    7. 'H' → logprob: -4.857302665710449
    8. 'en' → logprob: -5.357302665710449
    9. ' placé' → logprob: -5.482302665710449
    10. 'à' → logprob: -6.357302665710449

Token 325: 'és' (ID: 1756)
  Prédit: ' en'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' en' → logprob: -0.20057930052280426
    2. ' au' → logprob: -2.9505794048309326
    3. 's' → logprob: -3.0755794048309326
    4. ' à' → logprob: -3.5755794048309326
    5. 'és' → logprob: -3.9505794048309326
    6. '   ' → logprob: -3.9505794048309326
    7. '_' → logprob: -4.9505791664123535
    8. ' devant' → logprob: -5.8255791664123535
    9. ' aux' → logprob: -6.7005791664123535
    10. 'à' → logprob: -6.7005791664123535

Token 326: ' au' (ID: 2791)
  Prédit: ' en'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' en' → logprob: -0.8697336912155151
    2. ' au' → logprob: -1.2447336912155151
    3. 'au' → logprob: -2.2447338104248047
    4. ' H' → logprob: -2.4947338104248047
    5. 'H' → logprob: -3.6197338104248047
    6. ' devant' → logprob: -3.6197338104248047
    7. 'en' → logprob: -3.7447338104248047
    8. ' ' → logprob: -4.619733810424805
    9. '[' → logprob: -5.119733810424805
    10. '   ' → logprob: -5.619733810424805

Token 327: ' début' (ID: 29589)
  Prédit: 'dé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dé' → logprob: -0.0010114919859915972
    2. 'de' → logprob: -8.251011848449707
    3. ' début' → logprob: -8.376011848449707
    4. 'd' → logprob: -8.376011848449707
    5. 'front' → logprob: -9.251011848449707
    6. '0' → logprob: -10.251011848449707
    7. 'prem' → logprob: -10.251011848449707
    8. 'begin' → logprob: -10.501011848449707
    9. 'deb' → logprob: -11.376011848449707
    10. 'index' → logprob: -11.376011848449707

Token 328: ' de' (ID: 334)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.8109673857688904
    2. '   ' → logprob: -1.4359674453735352
    3. ')' → logprob: -1.9359674453735352
    4. ' de' → logprob: -2.185967445373535
    5. 'de' → logprob: -3.185967445373535
    6. 'H' → logprob: -5.185967445373535
    7. '),' → logprob: -5.310967445373535
    8. '(H' → logprob: -5.810967445373535
    9. ' H' → logprob: -6.685967445373535
    10. ' ' → logprob: -6.810967445373535

Token 329: ' la' (ID: 557)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.262560099363327
    2. ' H' → logprob: -1.5125601291656494
    3. ' la' → logprob: -4.63755989074707
    4. 'la' → logprob: -7.63755989074707
    5. 'l' → logprob: -8.63755989074707
    6. 'the' → logprob: -9.13755989074707
    7. ' the' → logprob: -10.13755989074707
    8. 'sorted' → logprob: -10.88755989074707
    9. 's' → logprob: -11.13755989074707
    10. ' l' → logprob: -11.26255989074707

Token 330: ' liste' (ID: 31719)
  Prédit: 'liste'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'liste' → logprob: -0.5541658997535706
    2. 'H' → logprob: -1.9291658401489258
    3. ' liste' → logprob: -2.429165840148926
    4. ' H' → logprob: -2.554165840148926
    5. ' code' → logprob: -3.054165840148926
    6. 'code' → logprob: -3.804165840148926
    7. 'list' → logprob: -3.804165840148926
    8. '#' → logprob: -4.554165840148926
    9. ' list' → logprob: -5.054165840148926
    10. 's' → logprob: -7.179165840148926

Token 331: '.
' (ID: 558)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.9254038333892822
    2. '   ' → logprob: -1.1754038333892822
    3. ',' → logprob: -1.6754038333892822
    4. ')' → logprob: -2.6754038333892822
    5. ' H' → logprob: -4.550403594970703
    6. ')
' → logprob: -4.675403594970703
    7. '(H' → logprob: -4.925403594970703
    8. ',
' → logprob: -5.550403594970703
    9. 's' → logprob: -6.300403594970703
    10. ' ,' → logprob: -6.800403594970703

Token 332: '   ' (ID: 271)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.5709971785545349
    2. ' H' → logprob: -1.3209972381591797
    3. '   ' → logprob: -1.8209972381591797
    4. '    
' → logprob: -6.44599723815918
    5. ' sorted' → logprob: -6.44599723815918
    6. 'sorted' → logprob: -6.82099723815918
    7. ' 
' → logprob: -7.57099723815918
    8. '```' → logprob: -8.32099723815918
    9. ' ' → logprob: -8.82099723815918
    10. '  
' → logprob: -8.94599723815918

Token 333: ' H' (ID: 487)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' (adapté à ' H') → logprob: -0.5387248992919922
    2. ' H' → logprob: -1.0387248992919922
    3. '   ' → logprob: -3.288724899291992
    4. ' sorted' → logprob: -4.413724899291992
    5. 'sorted' → logprob: -5.163724899291992
    6. ' top' → logprob: -5.913724899291992
    7. ' tri' → logprob: -6.288724899291992
    8. 'top' → logprob: -7.538724899291992
    9. 'tri' → logprob: -7.851224899291992
    10. '    
' → logprob: -8.413724899291992

Token 334: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2032945603132248
    2. '=' → logprob: -1.7032945156097412
    3. '_sorted' → logprob: -6.32829475402832
    4. 'sorted' → logprob: -9.32829475402832
    5. ' sorted' → logprob: -13.32829475402832
    6. '.sort' → logprob: -14.07829475402832
    7. 'Sorted' → logprob: -14.70329475402832
    8. '_' → logprob: -14.82829475402832
    9. 's' → logprob: -14.82829475402832
    10. ')' → logprob: -15.07829475402832

Token 335: ' sorted' (ID: 20099)
  Prédit: 'sorted'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sorted' → logprob: -0.25193315744400024
    2. ' sorted' → logprob: -1.5019330978393555
    3. '(sorted' → logprob: -13.251933097839355
    4. '.sorted' → logprob: -13.876933097839355
    5. '_sorted' → logprob: -14.876933097839355
    6. 'Sorted' → logprob: -14.876933097839355
    7. 's' → logprob: -15.751933097839355
    8. '   ' → logprob: -15.751933097839355
    9. 'list' → logprob: -16.251934051513672
    10. ' ' → logprob: -16.251934051513672

Token 336: '(H' (ID: 20904)
  Prédit: '(H'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(H' → logprob: -9.639096970204264e-05
    2. '(' → logprob: -9.250096321105957
    3. ' (' → logprob: -15.875096321105957
    4. '(
' → logprob: -17.125097274780273
    5. 'H' → logprob: -17.250097274780273
    6. '((' → logprob: -18.625097274780273
    7. '(h' → logprob: -19.500097274780273
    8. 's' → logprob: -20.125097274780273
    9. '(K' → logprob: -20.250097274780273
    10. '(I' → logprob: -20.250097274780273

Token 337: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.259079363080673e-05
    2. ' ,' → logprob: -11.375012397766113
    3. 'reverse' → logprob: -15.375012397766113
    4. '(),' → logprob: -15.500012397766113
    5. ')' → logprob: -15.875012397766113
    6. '(reverse' → logprob: -15.875012397766113
    7. '   ' → logprob: -16.12501335144043
    8. ',
' → logprob: -16.62501335144043
    9. '，' → logprob: -16.75001335144043
    10. '[::-' → logprob: -17.00001335144043

Token 338: ' reverse' (ID: 18199)
  Prédit: 'reverse'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'reverse' → logprob: -0.02975071594119072
    2. ' reverse' → logprob: -3.5297508239746094
    3. '   ' → logprob: -15.27975082397461
    4. '(reverse' → logprob: -18.02975082397461
    5. '.reverse' → logprob: -18.65475082397461
    6. 'Reverse' → logprob: -18.77975082397461
    7. '_reverse' → logprob: -19.27975082397461
    8. 'True' → logprob: -19.40475082397461
    9. ',' → logprob: -20.02975082397461
    10. ' ' → logprob: -20.40475082397461

Token 339: '=True' (ID: 7827)
  Prédit: '=True'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=True' → logprob: -1.9146995327901095e-05
    2. '=' → logprob: -10.875019073486328
    3. '=
' → logprob: -17.000019073486328
    4. 'True' → logprob: -17.625019073486328
    5. ' =' → logprob: -18.250019073486328
    6. '=T' → logprob: -18.250019073486328
    7. '=False' → logprob: -19.250019073486328
    8. '(True' → logprob: -20.750019073486328
    9. ')=' → logprob: -21.250019073486328
    10. ')' → logprob: -21.500019073486328

Token 340: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.704273118884885e-07
    2. ')
' → logprob: -14.750000953674316
    3. ' )' → logprob: -16.0
    4. '))' → logprob: -16.625
    5. '   ' → logprob: -18.0
    6. ')`' → logprob: -18.625
    7. ')

' → logprob: -18.75
    8. ')#' → logprob: -19.625
    9. '),' → logprob: -19.75
    10. ').' → logprob: -20.375

Token 341: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.384767085313797
    2. '   ' → logprob: -1.2597670555114746
    3. '    
' → logprob: -3.6347670555114746
    4. ' 
' → logprob: -5.634767055511475
    5. '  
' → logprob: -6.259767055511475
    6. '#' → logprob: -7.009767055511475
    7. '\n' → logprob: -7.134767055511475
    8. '   
' → logprob: -7.634767055511475
    9. '[' → logprob: -7.759767055511475
    10. '

' → logprob: -8.634767532348633

Token 342: ' #' (ID: 1069)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.1900653839111328
    2. 'result' → logprob: -1.5650653839111328
    3. '#' (adapté à ' #') → logprob: -1.9400653839111328
    4. 'if' → logprob: -2.190065383911133
    5. 'remaining' → logprob: -3.190065383911133
    6. 'res' → logprob: -3.440065383911133
    7. 's' → logprob: -4.065065383911133
    8. 'answer' → logprob: -4.065065383911133
    9. 'diff' → logprob: -4.190065383911133
    10. 'count' → logprob: -4.440065383911133

Token 343: ' On' (ID: 2160)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.8457866907119751
    2. 'if' → logprob: -1.470786690711975
    3. 'remaining' → logprob: -3.0957865715026855
    4. 'for' → logprob: -3.2207865715026855
    5. 'diff' → logprob: -3.2207865715026855
    6. '#' → logprob: -3.5957865715026855
    7. 'res' → logprob: -3.5957865715026855
    8. 'rest' → logprob: -3.8457865715026855
    9. 'answer' → logprob: -4.0957865715026855
    10. 'ans' → logprob: -4.4707865715026855

Token 344: ' teste' (ID: 62670)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.3601343035697937
    2. ' for' → logprob: -1.4851343631744385
    3. 'if' → logprob: -3.3601343631744385
    4. '#' → logprob: -4.360134124755859
    5. ' if' → logprob: -4.485134124755859
    6. ' #' → logprob: -4.985134124755859
    7. ' continue' → logprob: -5.485134124755859
    8. 's' → logprob: -6.485134124755859
    9. ' reste' → logprob: -7.235134124755859
    10. 'range' → logprob: -7.485134124755859

Token 345: ' si' (ID: 1784)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.6739487648010254
    2. '   ' → logprob: -1.2989487648010254
    3. ' si' → logprob: -1.9239487648010254
    4. ' ' → logprob: -3.9239487648010254
    5. 'if' → logprob: -3.9239487648010254
    6. '  ' → logprob: -4.423948764801025
    7. ':' → logprob: -4.923948764801025
    8. 'si' → logprob: -5.923948764801025
    9. ' ' → logprob: -6.048948764801025
    10. ' :' → logprob: -6.673948764801025

Token 346: ' le' (ID: 505)
  Prédit: ' K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.7841725945472717
    2. 'K' → logprob: -0.9091725945472717
    3. 'H' → logprob: -2.659172534942627
    4. ' H' → logprob: -2.909172534942627
    5. 'N' → logprob: -4.909172534942627
    6. ' N' → logprob: -5.284172534942627
    7. ' len' → logprob: -6.159172534942627
    8. 'len' → logprob: -6.909172534942627
    9. ' ' → logprob: -8.284173011779785
    10. ' le' → logprob: -9.721673011779785

Token 347: ' nombre' (ID: 9733)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.21228063106536865
    2. ' K' → logprob: -2.462280750274658
    3. 'H' → logprob: -2.837280750274658
    4. 'plus' → logprob: -4.587280750274658
    5. 'N' → logprob: -4.962280750274658
    6. 'k' → logprob: -4.962280750274658
    7. ' plus' → logprob: -5.212280750274658
    8. ' H' → logprob: -5.337280750274658
    9. 'len' → logprob: -6.087280750274658
    10. '#' → logprob: -6.837280750274658

Token 348: ' d' (ID: 272)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.8599472045898438
    2. ' de' → logprob: -1.4849472045898438
    3. ' K' → logprob: -2.1099472045898438
    4. 'de' → logprob: -2.3599472045898438
    5. ' des' → logprob: -3.2349472045898438
    6. ' d' → logprob: -3.6099472045898438
    7. '_' → logprob: -3.8599472045898438
    8. 'H' → logprob: -5.109947204589844
    9. ' maximal' → logprob: -5.109947204589844
    10. 'd' → logprob: -5.234947204589844

Token 349: ''' (ID: 6)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.8650454878807068
    2. 'H' → logprob: -1.4900455474853516
    3. '_' → logprob: -2.1150455474853516
    4. ' H' → logprob: -2.2400455474853516
    5. ' éléments' → logprob: -3.8650455474853516
    6. 'é' → logprob: -4.115045547485352
    7. 's' → logprob: -4.740045547485352
    8. 'items' → logprob: -4.865045547485352
    9. 'me' → logprob: -5.240045547485352
    10. 'K' → logprob: -5.365045547485352

Token 350: 'élé' (ID: 15228)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.7393937110900879
    2. 'H' → logprob: -1.989393711090088
    3. 'esc' → logprob: -2.739393711090088
    4. 'jours' → logprob: -2.739393711090088
    5. 'k' → logprob: -2.989393711090088
    6. 'élé' → logprob: -3.114393711090088
    7. 'm' → logprob: -4.489393711090088
    8. 't' → logprob: -4.614393711090088
    9. ' K' → logprob: -4.739393711090088
    10. 'p' → logprob: -5.114393711090088

Token 351: 'ments' (ID: 1626)
  Prédit: 'ments'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ments' → logprob: -2.1054253011243418e-05
    2. 'ment' → logprob: -11.125020980834961
    3. 'm' → logprob: -13.250020980834961
    4. '   ' → logprob: -13.875020980834961
    5. 'éments' → logprob: -13.875020980834961
    6. 'phants' → logprob: -14.375020980834961
    7. 'ts' → logprob: -15.000020980834961
    8. 'MENTS' → logprob: -15.500020980834961
    9. 'v' → logprob: -15.750020980834961
    10. 'ements' → logprob: -16.00002098083496

Token 352: ' N' (ID: 478)
  Prédit: ' dans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' dans' → logprob: -0.9870948791503906
    2. 'H' → logprob: -1.8620948791503906
    3. 'sup' → logprob: -2.3620948791503906
    4. ' H' → logprob: -2.6120948791503906
    5. 'dans' → logprob: -2.7370948791503906
    6. ' à' → logprob: -2.7370948791503906
    7. 'K' → logprob: -3.9870948791503906
    8. ' plus' → logprob: -4.112094879150391
    9. ' sup' → logprob: -4.237094879150391
    10. 'de' → logprob: -4.362094879150391

Token 353: ' est' (ID: 893)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.8410835266113281
    2. '>' → logprob: -1.7160835266113281
    3. ' est' → logprob: -1.7160835266113281
    4. ' <=' → logprob: -2.466083526611328
    5. ' ==' → logprob: -3.591083526611328
    6. ' >=' → logprob: -3.841083526611328
    7. '<=' → logprob: -3.841083526611328
    8. 'est' → logprob: -4.466083526611328
    9. '==' → logprob: -4.716083526611328
    10. ' is' → logprob: -4.716083526611328

Token 354: ' inférieur' (ID: 191498)
  Prédit: ' supérieur'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' supérieur' → logprob: -0.6453190445899963
    2. 'sup' → logprob: -1.5203189849853516
    3. ' inférieur' → logprob: -2.3953189849853516
    4. 'strict' → logprob: -2.3953189849853516
    5. '<=' → logprob: -3.5203189849853516
    6. '>' → logprob: -4.270318984985352
    7. ' <=' → logprob: -5.395318984985352
    8. ' sup' → logprob: -5.520318984985352
    9. '>=' → logprob: -5.895318984985352
    10. ' strict' → logprob: -6.395318984985352

Token 355: ' ou' (ID: 2031)
  Prédit: ' à'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.26954343914985657
    2. ' ou' → logprob: -1.8945434093475342
    3. 'à' → logprob: -3.394543409347534
    4. '   ' → logprob: -3.519543409347534
    5. 'au' → logprob: -5.269543647766113
    6. '=' → logprob: -5.519543647766113
    7. 'ou' → logprob: -5.644543647766113
    8. ' or' → logprob: -5.769543647766113
    9. ' au' → logprob: -5.769543647766113
    10. 'strict' → logprob: -7.269543647766113

Token 356: ' égal' (ID: 15059)
  Prédit: 'égal'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'égal' → logprob: -0.03607933968305588
    2. ' égal' → logprob: -3.4110794067382812
    3. ' ég' → logprob: -6.661079406738281
    4. '=' → logprob: -7.786079406738281
    5. 'ég' → logprob: -8.161079406738281
    6. 'à' → logprob: -9.536079406738281
    7. 'é' → logprob: -9.661079406738281
    8. 'égalité' → logprob: -9.661079406738281
    9. 'egal' → logprob: -9.786079406738281
    10. 'equal' → logprob: -10.286079406738281

Token 357: ' à' (ID: 1221)
  Prédit: ' à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.019633926451206207
    2. 'à' → logprob: -4.144633769989014
    3. ' a' → logprob: -6.269633769989014
    4. ' ' → logprob: -6.894633769989014
    5. ' K' → logprob: -8.269634246826172
    6. 'a' → logprob: -8.769634246826172
    7. 'K' → logprob: -9.019634246826172
    8. '   ' → logprob: -9.769634246826172
    9. 'au' → logprob: -10.519634246826172
    10. '  ' → logprob: -11.144634246826172

Token 358: ' K' (ID: 658)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.003178901970386505
    2. ' K' → logprob: -5.75317907333374
    3. '	K' → logprob: -14.003178596496582
    4. ' ' → logprob: -15.628178596496582
    5. ' ' → logprob: -15.753178596496582
    6. '>K' → logprob: -16.1281795501709
    7. '<K' → logprob: -17.7531795501709
    8. '   ' → logprob: -18.2531795501709
    9. '<|end|>' → logprob: -18.6281795501709
    10. '
' → logprob: -18.6281795501709

Token 359: '.
' (ID: 558)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.025989875197410583
    2. '   ' → logprob: -3.7759897708892822
    3. ':
' → logprob: -6.525990009307861
    4. ' :' → logprob: -6.900990009307861
    5. '.' → logprob: -9.275989532470703
    6. ' or' → logprob: -9.650989532470703
    7. ' :
' → logprob: -10.150989532470703
    8. ',' → logprob: -10.900989532470703
    9. ':return' → logprob: -11.650989532470703
    10. '    
' → logprob: -11.650989532470703

Token 360: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0007425647345371544
    2. ' if' → logprob: -7.500742435455322
    3. 'if' → logprob: -9.50074291229248
    4. '    
' → logprob: -9.62574291229248
    5. '\n' → logprob: -11.37574291229248
    6. '
' → logprob: -11.50074291229248
    7. ' 
' → logprob: -11.62574291229248
    8. ':' → logprob: -12.75074291229248
    9. '  
' → logprob: -12.75074291229248
    10. '<|end|>' → logprob: -13.00074291229248

Token 361: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03283771499991417
    2. ' if' → logprob: -3.5328376293182373
    3. 'if' → logprob: -5.782837867736816
    4. '    
' → logprob: -14.157837867736816
    5. '	if' → logprob: -14.407837867736816
    6. 'If' → logprob: -14.907837867736816
    7. '    ' → logprob: -14.907837867736816
    8. '   ' → logprob: -15.657837867736816
    9. ' return' → logprob: -16.1578369140625
    10. '  ' → logprob: -16.5328369140625

Token 362: ' Cela' (ID: 44403)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.44113224744796753
    2. '   ' → logprob: -1.1911323070526123
    3. 'if' → logprob: -2.9411323070526123
    4. ' return' → logprob: -12.316132545471191
    5. '```' → logprob: -13.691132545471191
    6. '	if' → logprob: -14.066132545471191
    7. 'If' → logprob: -14.066132545471191
    8. '    ' → logprob: -14.441132545471191
    9. '   ' → logprob: -14.441132545471191
    10. '    
' → logprob: -14.691132545471191

Token 363: ' signifie' (ID: 81149)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.15501907467842102
    2. '   ' → logprob: -2.0300190448760986
    3. ' :' → logprob: -4.655019283294678
    4. ':
' → logprob: -6.780019283294678
    5. ' signifie' → logprob: -7.405019283294678
    6. ' :
' → logprob: -8.40501880645752
    7. ':return' → logprob: -8.40501880645752
    8. ':\' → logprob: -9.53001880645752
    9. ' if' → logprob: -9.78001880645752
    10. '    
' → logprob: -9.78001880645752

Token 364: ' qu' (ID: 474)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.007070078048855066
    2. ':' → logprob: -5.507070064544678
    3. ' que' → logprob: -6.632070064544678
    4. '    
' → logprob: -6.757070064544678
    5. '    ' → logprob: -9.257070541381836
    6. '  ' → logprob: -9.507070541381836
    7. ' :' → logprob: -9.757070541381836
    8. ' ' → logprob: -9.882070541381836
    9. ' that' → logprob: -10.507070541381836
    10. ' ' → logprob: -10.757070541381836

Token 365: ''il' (ID: 14683)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1245499849319458
    2. ''il' → logprob: -2.7495498657226562
    3. 'e' → logprob: -3.8745498657226562
    4. ''' → logprob: -4.499549865722656
    5. ''on' → logprob: -5.374549865722656
    6. ' que' → logprob: -5.374549865722656
    7. '#' → logprob: -5.624549865722656
    8. 'u' → logprob: -6.374549865722656
    9. 'if' → logprob: -6.499549865722656
    10. '  ' → logprob: -7.499549865722656

Token 366: ' y' (ID: 342)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.07062381505966187
    2. 'n' → logprob: -2.8206238746643066
    3. 'f' → logprob: -5.820623874664307
    4. 's' → logprob: -6.320623874664307
    5. '   ' → logprob: -6.570623874664307
    6. ' suffit' → logprob: -6.945623874664307
    7. ' suff' → logprob: -7.445623874664307
    8. ' faut' → logprob: -7.820623874664307
    9. 'est' → logprob: -9.195623397827148
    10. '#' → logprob: -9.570623397827148

Token 367: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.10410109907388687
    2. 'a' → logprob: -2.3541011810302734
    3. '#' → logprob: -6.479101181030273
    4. '#a' → logprob: -7.354101181030273
    5. ' aurait' → logprob: -7.479101181030273
    6. ' n' → logprob: -8.354101181030273
    7. '   ' → logprob: -8.604101181030273
    8. 'avait' → logprob: -8.729101181030273
    9. ''a' → logprob: -9.354101181030273
    10. ' aura' → logprob: -9.479101181030273

Token 368: ' autant' (ID: 46683)
  Prédit: ' au'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' au' → logprob: -1.7276713848114014
    2. 's' → logprob: -1.8526713848114014
    3. ' assez' → logprob: -2.1026713848114014
    4. '   ' → logprob: -2.2276713848114014
    5. ' suffisamment' → logprob: -2.2276713848114014
    6. '#' → logprob: -2.4776713848114014
    7. 'au' → logprob: -2.4776713848114014
    8. '_' → logprob: -3.7276713848114014
    9. ' ' → logprob: -3.9776713848114014
    10. ' #' → logprob: -4.2276716232299805

Token 369: ' (' (ID: 350)
  Prédit: ' d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.7715381979942322
    2. ' ou' → logprob: -0.8965381979942322
    3. 'd' → logprob: -2.646538257598877
    4. 'ou' → logprob: -3.021538257598877
    5. 'de' → logprob: -5.271538257598877
    6. ' de' → logprob: -5.896538257598877
    7. ' ' → logprob: -7.521538257598877
    8. ' (' → logprob: -8.146537780761719
    9. ' voire' → logprob: -8.271537780761719
    10. '#' → logprob: -8.771537780761719

Token 370: 'ou' (ID: 283)
  Prédit: ' ou'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ou' → logprob: -0.2364480048418045
    2. 'ou' → logprob: -1.986448049545288
    3. ')' → logprob: -3.736448049545288
    4. ' d' → logprob: -3.986448049545288
    5. 'd' → logprob: -4.861447811126709
    6. ' ' → logprob: -5.111447811126709
    7. 'de' → logprob: -5.236447811126709
    8. ' de' → logprob: -5.736447811126709
    9. 'au' → logprob: -6.736447811126709
    10. ' voire' → logprob: -6.861447811126709

Token 371: ' plus' (ID: 2932)
  Prédit: 'plus'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'plus' → logprob: -1.3813910484313965
    2. 'égal' → logprob: -1.3813910484313965
    3. 'moins' → logprob: -2.0063910484313965
    4. 'exact' → logprob: -2.2563910484313965
    5. ' plus' → logprob: -2.6313910484313965
    6. ' égal' → logprob: -2.8813910484313965
    7. ' moins' → logprob: -2.8813910484313965
    8. ' ég' → logprob: -3.8813910484313965
    9. ' exactement' → logprob: -4.1313910484313965
    10. 'equal' → logprob: -5.0063910484313965

Token 372: ')' (ID: 8)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.8882031440734863
    2. ' d' → logprob: -1.2632031440734863
    3. ')' → logprob: -1.3882031440734863
    4. ' de' → logprob: -3.6382031440734863
    5. 'de' → logprob: -4.263203144073486
    6. ' )' → logprob: -4.638203144073486
    7. '=' → logprob: -6.638203144073486
    8. ' ou' → logprob: -6.763203144073486
    9. ')d' → logprob: -7.138203144073486
    10. 'ou' → logprob: -7.138203144073486

Token 373: ' d' (ID: 272)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.7369258999824524
    2. ' d' → logprob: -0.7369258999824524
    3. ' de' → logprob: -3.9869258403778076
    4. 'de' → logprob: -4.361926078796387
    5. ' que' → logprob: -5.611926078796387
    6. '#' → logprob: -6.861926078796387
    7. 'N' → logprob: -6.986926078796387
    8. ' ou' → logprob: -7.111926078796387
    9. 'que' → logprob: -7.236926078796387
    10. 'H' → logprob: -7.236926078796387

Token 374: ''' (ID: 6)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.24217788875102997
    2. 'places' → logprob: -3.367177963256836
    3. 'obj' → logprob: -3.742177963256836
    4. ' H' → logprob: -3.992177963256836
    5. 'c' → logprob: -4.117177963256836
    6. 'ch' → logprob: -4.492177963256836
    7. 'elements' → logprob: -4.492177963256836
    8. ' places' → logprob: -4.617177963256836
    9. ' éléments' → logprob: -4.617177963256836
    10. 'H' → logprob: -4.742177963256836

Token 375: 'élé' (ID: 15228)
  Prédit: 'élé'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.5340301394462585
    2. 'places' → logprob: -2.1590301990509033
    3. 'esc' → logprob: -2.2840301990509033
    4. 'ch' → logprob: -3.4090301990509033
    5. 'obj' → logprob: -3.5340301990509033
    6. 'c' → logprob: -3.7840301990509033
    7. 'armes' → logprob: -4.284029960632324
    8. 'positions' → logprob: -4.409029960632324
    9. 'em' → logprob: -4.784029960632324
    10. 'person' → logprob: -5.159029960632324

Token 376: 'ments' (ID: 1626)
  Prédit: 'ments'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ments' → logprob: -3.4121114822482923e-06
    2. 'ment' → logprob: -13.000003814697266
    3. 'm' → logprob: -14.625003814697266
    4. 'ents' → logprob: -14.875003814697266
    5. 'éments' → logprob: -15.750003814697266
    6. 'MENTS' → logprob: -17.125003814697266
    7. 'nements' → logprob: -17.250003814697266
    8. 'lements' → logprob: -17.500003814697266
    9. 'nts' → logprob: -17.750003814697266
    10. '```' → logprob: -18.250003814697266

Token 377: ' que' (ID: 661)
  Prédit: ' que'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.6558232307434082
    2. ' ou' → logprob: -0.9058232307434082
    3. ' d' → logprob: -3.405823230743408
    4. ' à' → logprob: -4.780823230743408
    5. ' de' → logprob: -5.030823230743408
    6. 'd' → logprob: -5.155823230743408
    7. 'ou' → logprob: -5.155823230743408
    8. 'que' → logprob: -5.530823230743408
    9. 'de' → logprob: -5.655823230743408
    10. ' voire' → logprob: -6.030823230743408

Token 378: ' la' (ID: 557)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.6105385422706604
    2. 'd' → logprob: -1.1105384826660156
    3. 'de' → logprob: -2.8605384826660156
    4. ' K' → logprob: -3.8605384826660156
    5. ' d' → logprob: -3.9855384826660156
    6. 'le' → logprob: -4.985538482666016
    7. ' de' → logprob: -5.360538482666016
    8. 'N' → logprob: -5.485538482666016
    9. 'que' → logprob: -5.735538482666016
    10. 'les' → logprob: -5.860538482666016

Token 379: ' valeur' (ID: 41664)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.09261073917150497
    2. ' K' → logprob: -2.5926108360290527
    3. 'nombre' → logprob: -5.092610836029053
    4. ' nombre' → logprob: -6.092610836029053
    5. 'len' → logprob: -6.592610836029053
    6. 's' → logprob: -6.967610836029053
    7. 'N' → logprob: -7.092610836029053
    8. '#' → logprob: -7.717610836029053
    9. ' len' → logprob: -8.342610359191895
    10. 'k' → logprob: -8.592610359191895

Token 380: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.3105698525905609
    2. 'de' → logprob: -2.0605697631835938
    3. ' K' → logprob: -3.0605697631835938
    4. '   ' → logprob: -3.6855697631835938
    5. 'K' → logprob: -4.060569763183594
    6. '#' → logprob: -4.310569763183594
    7. ' N' → logprob: -4.685569763183594
    8. 'N' → logprob: -5.310569763183594
    9. ' ou' → logprob: -5.685569763183594
    10. 'd' → logprob: -5.935569763183594

Token 381: ' K' (ID: 658)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.6326338052749634
    2. ' K' → logprob: -0.7576338052749634
    3. ' ' → logprob: -11.132634162902832
    4. 'l' → logprob: -11.882634162902832
    5. ' la' → logprob: -12.882634162902832
    6. 'N' → logprob: -12.882634162902832
    7. ' l' → logprob: -13.132634162902832
    8. '  ' → logprob: -13.757634162902832
    9. '>K' → logprob: -14.007634162902832
    10. ' ' → logprob: -14.132634162902832

Token 382: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2960870563983917
    2. ':' → logprob: -1.7960870265960693
    3. ' or' → logprob: -2.4210870265960693
    4. ':
' → logprob: -7.421087265014648
    5. ' if' → logprob: -8.546087265014648
    6. 'or' → logprob: -8.796087265014648
    7. ',' → logprob: -8.921087265014648
    8. ':return' → logprob: -9.296087265014648
    9. ' :' → logprob: -9.421087265014648
    10. '    ' → logprob: -9.921087265014648

Token 383: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0001305950863752514
    2. ' if' → logprob: -9.625130653381348
    3. '    
' → logprob: -10.375130653381348
    4. 'if' → logprob: -10.875130653381348
    5. '
' → logprob: -11.750130653381348
    6. ':' → logprob: -13.250130653381348
    7. '   ' → logprob: -13.875130653381348
    8. '\n' → logprob: -14.000130653381348
    9. '```' → logprob: -14.000130653381348
    10. '	if' → logprob: -14.125130653381348

Token 384: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.011872309260070324
    2. ' if' → logprob: -4.761872291564941
    3. 'if' (adapté à ' if') → logprob: -6.011872291564941
    4. ':' → logprob: -7.636872291564941
    5. '    
' → logprob: -8.386872291564941
    6. '    ' → logprob: -10.761872291564941
    7. '   ' → logprob: -11.136872291564941
    8. '  ' → logprob: -11.761872291564941
    9. '   
' → logprob: -11.886872291564941
    10. ' 
' → logprob: -12.136872291564941

Token 385: ' N' (ID: 478)
  Prédit: ' N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.04859475791454315
    2. 'N' → logprob: -3.0485947132110596
    3. '   ' → logprob: -12.67359447479248
    4. ' ' → logprob: -13.17359447479248
    5. ' ' → logprob: -13.54859447479248
    6. '	N' → logprob: -14.17359447479248
    7. ' len' → logprob: -15.67359447479248
    8. 'n' → logprob: -17.298595428466797
    9. '  ' → logprob: -17.298595428466797
    10. 'len' → logprob: -17.548595428466797

Token 386: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.043001484125852585
    2. '<=' → logprob: -3.168001413345337
    3. ')<=' → logprob: -14.668001174926758
    4. ' ' → logprob: -14.793001174926758
    5. '   ' → logprob: -14.918001174926758
    6. '=' → logprob: -15.293001174926758
    7. ' <=",' → logprob: -15.293001174926758
    8. ' ' → logprob: -15.668001174926758
    9. '[' → logprob: -16.168001174926758
    10. ' <' → logprob: -16.668001174926758

Token 387: ' K' (ID: 658)
  Prédit: ' K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.01604539528489113
    2. 'K' → logprob: -4.141045570373535
    3. ' ' → logprob: -11.516045570373535
    4. '	K' → logprob: -14.391045570373535
    5. ' ' → logprob: -14.891045570373535
    6. '  ' → logprob: -16.64104461669922
    7. '0' → logprob: -17.51604461669922
    8. '   ' → logprob: -17.76604461669922
    9. ')' → logprob: -18.39104461669922
    10. ' К' → logprob: -18.51604461669922

Token 388: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.004134087823331356
    2. ':
' → logprob: -5.504134178161621
    3. ':return' → logprob: -9.879134178161621
    4. '   ' → logprob: -12.879134178161621
    5. ' :' → logprob: -13.379134178161621
    6. ':
' → logprob: -15.754134178161621
    7. ' :
' → logprob: -16.879133224487305
    8. ' or' → logprob: -17.504133224487305
    9. '):' → logprob: -17.504133224487305
    10. '       ' → logprob: -17.629133224487305

Token 389: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.10260634869337082
    2. '   ' → logprob: -2.4776062965393066
    3. 'print' → logprob: -4.352606296539307
    4. 'return' → logprob: -8.227606773376465
    5. ':' → logprob: -8.602606773376465
    6. ' print' → logprob: -8.727606773376465
    7. '    
' → logprob: -10.102606773376465
    8. ' return' → logprob: -11.477606773376465
    9. '        
' → logprob: -11.477606773376465
    10. ':
' → logprob: -11.977606773376465

Token 390: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.19344577193260193
    2. '   ' → logprob: -2.0684456825256348
    3. ' print' → logprob: -3.0684456825256348
    4. 'return' → logprob: -6.068445682525635
    5. '       ' → logprob: -7.818445682525635
    6. ' return' → logprob: -8.818446159362793
    7. 'for' → logprob: -9.443446159362793
    8. ' for' → logprob: -11.068446159362793
    9. '
' → logprob: -11.318446159362793
    10. '    ' → logprob: -11.568446159362793

Token 391: ' Dans' (ID: 22082)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.09052667021751404
    2. ' print' → logprob: -2.715526580810547
    3. '   ' → logprob: -3.965526580810547
    4. 'return' → logprob: -7.340526580810547
    5. 'for' → logprob: -7.965526580810547
    6. ' for' → logprob: -9.090526580810547
    7. ' return' → logprob: -9.215526580810547
    8. '    ' → logprob: -9.590526580810547
    9. '#' → logprob: -9.715526580810547
    10. '       ' → logprob: -9.840526580810547

Token 392: ' ce' (ID: 2357)
  Prédit: ' ce'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ce' → logprob: -0.0025975380558520555
    2. 'print' → logprob: -7.002597332000732
    3. 'ce' → logprob: -7.252597332000732
    4. 'return' → logprob: -7.877597332000732
    5. ' this' → logprob: -8.62759780883789
    6. ' cette' → logprob: -9.12759780883789
    7. '   ' → logprob: -9.62759780883789
    8. 'this' → logprob: -9.87759780883789
    9. ' print' → logprob: -10.37759780883789
    10. ' that' → logprob: -10.37759780883789

Token 393: ' cas' (ID: 2108)
  Prédit: ' cas'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cas' → logprob: -0.5564295053482056
    2. '   ' → logprob: -1.0564295053482056
    3. 'return' → logprob: -3.306429386138916
    4. ' return' → logprob: -3.681429386138916
    5. '       ' → logprob: -5.056429386138916
    6. 'print' → logprob: -5.556429386138916
    7. 'cas' → logprob: -5.806429386138916
    8. '    
' → logprob: -7.056429386138916
    9. 'case' → logprob: -7.181429386138916
    10. '#' → logprob: -7.306429386138916

Token 394: ',' (ID: 11)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.09666422754526138
    2. ':' → logprob: -3.0966641902923584
    3. '   ' → logprob: -3.3466641902923584
    4. ',' → logprob: -5.2216644287109375
    5. 'print' → logprob: -6.0966644287109375
    6. '
' → logprob: -6.3466644287109375
    7. '    
' → logprob: -7.5966644287109375
    8. ':
' → logprob: -7.5966644287109375
    9. '        
' → logprob: -8.221664428710938
    10. 'return' → logprob: -8.471664428710938

Token 395: ' on' (ID: 402)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.1322742998600006
    2. ' print' → logprob: -2.1322743892669678
    3. '   ' → logprob: -5.257274150848389
    4. '       ' → logprob: -9.507274627685547
    5. 'return' → logprob: -11.257274627685547
    6. '    ' → logprob: -11.257274627685547
    7. '	print' → logprob: -11.382274627685547
    8. '#' → logprob: -12.757274627685547
    9. ' return' → logprob: -13.007274627685547
    10. '  ' → logprob: -13.757274627685547

Token 396: ' affiche' (ID: 127479)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.10016967356204987
    2. ' print' → logprob: -2.9751696586608887
    3. '   ' → logprob: -3.2251696586608887
    4. 'return' → logprob: -6.350169658660889
    5. 'aff' → logprob: -7.100169658660889
    6. ' imprime' → logprob: -8.100170135498047
    7. 'im' → logprob: -8.225170135498047
    8. ' return' → logprob: -8.350170135498047
    9. '       ' → logprob: -8.600170135498047
    10. '	print' → logprob: -8.725170135498047

Token 397: ' simplement' (ID: 45065)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.030045285820961
    2. '(' → logprob: -3.5300452709198
    3. ' ' → logprob: -8.280045509338379
    4. '   ' → logprob: -11.280045509338379
    5. '("' → logprob: -11.655045509338379
    6. '
' → logprob: -12.030045509338379
    7. '(
' → logprob: -12.780045509338379
    8. '"' → logprob: -13.155045509338379
    9. ' 
' → logprob: -13.405045509338379
    10. '    
' → logprob: -13.530045509338379

Token 398: ' '' (ID: 461)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -9.710618905955926e-05
    2. '(' → logprob: -9.375097274780273
    3. ' ' → logprob: -12.000097274780273
    4. '
' → logprob: -13.250097274780273
    5. 'print' → logprob: -14.000097274780273
    6. '    
' → logprob: -14.125097274780273
    7. '   ' → logprob: -14.250097274780273
    8. '("' → logprob: -15.000097274780273
    9. '"' → logprob: -15.000097274780273
    10. '`' → logprob: -15.125097274780273

Token 399: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00010449681576574221
    2. ' ' → logprob: -9.375104904174805
    3. '"' → logprob: -11.625104904174805
    4. '(' → logprob: -13.125104904174805
    5. ''' → logprob: -13.250104904174805
    6. '`' → logprob: -14.187604904174805
    7. '
' → logprob: -14.312604904174805
    8. '   ' → logprob: -14.375104904174805
    9. '1' → logprob: -14.562604904174805
    10. 'print' → logprob: -14.687604904174805

Token 400: ''' (ID: 6)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.19236980378627777
    2. ')
' → logprob: -2.8173696994781494
    3. '
' → logprob: -3.0673696994781494
    4. '')' → logprob: -3.0673696994781494
    5. 'return' → logprob: -4.9423699378967285
    6. '')
' → logprob: -5.3173699378967285
    7. '")' → logprob: -5.5673699378967285
    8. '   ' → logprob: -5.9423699378967285
    9. ')return' → logprob: -6.4423699378967285
    10. 'print' → logprob: -7.6923699378967285

Token 401: ' grâce' (ID: 31589)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.012653854675590992
    2. '   ' → logprob: -4.637653827667236
    3. '       ' → logprob: -6.887653827667236
    4. '    
' → logprob: -7.137653827667236
    5. 'return' → logprob: -8.012654304504395
    6. '
' → logprob: -8.012654304504395
    7. '\n' → logprob: -9.512654304504395
    8. '        
' → logprob: -9.762654304504395
    9. ' return' → logprob: -9.762654304504395
    10. '  
' → logprob: -9.887654304504395

Token 402: ' à' (ID: 1221)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18985620141029358
    2. '()' → logprob: -1.9398561716079712
    3. ' à' → logprob: -4.314856052398682
    4. '(' → logprob: -4.564856052398682
    5. 'à' → logprob: -5.814856052398682
    6. 'print' → logprob: -7.064856052398682
    7. '(print' → logprob: -7.064856052398682
    8. '```' → logprob: -8.18985652923584
    9. ''à' → logprob: -8.93985652923584
    10. '    ' → logprob: -9.93985652923584

Token 403: ' la' (ID: 557)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.06211008131504059
    2. 'print' → logprob: -2.812110185623169
    3. '   ' → logprob: -8.93710994720459
    4. ' return' → logprob: -12.56210994720459
    5. '	print' → logprob: -13.06210994720459
    6. ' la' → logprob: -13.43710994720459
    7. ' ' → logprob: -13.56210994720459
    8. '```' → logprob: -14.31210994720459
    9. 'return' → logprob: -14.81210994720459
    10. ' ' → logprob: -14.93710994720459

Token 404: ' fonction' (ID: 17610)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.2519601285457611
    2. 'print' → logprob: -1.5019601583480835
    3. '   ' → logprob: -11.001959800720215
    4. ' return' → logprob: -11.751959800720215
    5. 'return' → logprob: -12.876959800720215
    6. 'space' → logprob: -13.876959800720215
    7. ' ' → logprob: -14.626959800720215
    8. '	print' → logprob: -14.751959800720215
    9. '(print' → logprob: -15.001959800720215
    10. '```' → logprob: -15.001959800720215

Token 405: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.04859861359000206
    2. 'print' → logprob: -3.048598527908325
    3. '   ' → logprob: -11.548598289489746
    4. '```' → logprob: -14.298598289489746
    5. '	print' → logprob: -15.173598289489746
    6. '(print' → logprob: -15.298598289489746
    7. '`' → logprob: -15.548598289489746
    8. ' ' → logprob: -16.173599243164062
    9. ' ' → logprob: -16.673599243164062
    10. ' prin' → logprob: -17.298599243164062

Token 406: '().
' (ID: 58434)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0019834754057228565
    2. '()
' → logprob: -6.251983642578125
    3. '(' → logprob: -10.251983642578125
    4. '("' → logprob: -12.001983642578125
    5. '('' → logprob: -12.251983642578125
    6. '("")' → logprob: -12.626983642578125
    7. '().' → logprob: -13.001983642578125
    8. '   ' → logprob: -13.751983642578125
    9. '()
' → logprob: -14.376983642578125
    10. '()`' → logprob: -14.751983642578125

Token 407: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.014103208668529987
    2. '
' → logprob: -4.514103412628174
    3. '   ' → logprob: -6.014103412628174
    4. '    
' → logprob: -8.264102935791016
    5. '        
' → logprob: -9.139102935791016
    6. '\n' → logprob: -9.389102935791016
    7. ' 
' → logprob: -10.139102935791016
    8. '```' → logprob: -10.639102935791016
    9. 'print' → logprob: -10.889102935791016
    10. '  
' → logprob: -11.014102935791016

Token 408: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.004237954970449209
    2. '
' → logprob: -6.379238128662109
    3. 'print' → logprob: -6.629238128662109
    4. ' print' → logprob: -7.254238128662109
    5. '   ' → logprob: -8.25423812866211
    6. ' return' → logprob: -8.87923812866211
    7. 'return' → logprob: -9.50423812866211
    8. '0' → logprob: -12.00423812866211
    9. '           ' → logprob: -12.00423812866211
    10. '        
' → logprob: -12.25423812866211

Token 409: ' Cela' (ID: 44403)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0957435593008995
    2. 'print' → logprob: -2.7207436561584473
    3. '   ' → logprob: -4.220743656158447
    4. ' print' → logprob: -4.720743656158447
    5. 'return' → logprob: -6.595743656158447
    6. ' return' → logprob: -7.595743656158447
    7. '    ' → logprob: -12.595743179321289
    8. '```' → logprob: -12.720743179321289
    9. '           ' → logprob: -12.970743179321289
    10. ' ' → logprob: -13.720743179321289

Token 410: ' signifie' (ID: 81149)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.8212255239486694
    2. 'return' → logprob: -1.3212255239486694
    3. '
' → logprob: -1.4462255239486694
    4. '    
' → logprob: -3.821225643157959
    5. '   ' → logprob: -4.071225643157959
    6. ' 
' → logprob: -4.946225643157959
    7. '       ' → logprob: -5.321225643157959
    8. '\n' → logprob: -6.446225643157959
    9. '	return' → logprob: -6.821225643157959
    10. '        
' → logprob: -7.196225643157959

Token 411: ' probablement' (ID: 87740)
  Prédit: ' que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.15208901464939117
    2. '   ' → logprob: -2.6520891189575195
    3. ' ' → logprob: -3.4020891189575195
    4. '0' → logprob: -4.1520891189575195
    5. ' qu' → logprob: -4.2770891189575195
    6. '    
' → logprob: -6.2770891189575195
    7. ' that' → logprob: -6.6520891189575195
    8. '    ' → logprob: -6.7770891189575195
    9. ' return' → logprob: -7.0270891189575195
    10. '       ' → logprob: -8.15208911895752

Token 412: ' (' (ID: 350)
  Prédit: ' que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.3402523100376129
    2. '   ' → logprob: -1.3402522802352905
    3. ' qu' → logprob: -4.09025239944458
    4. ' ' → logprob: -5.46525239944458
    5. '    ' → logprob: -5.96525239944458
    6. '       ' → logprob: -6.46525239944458
    7. ' that' → logprob: -7.71525239944458
    8. ' ' → logprob: -8.465251922607422
    9. 'que' → logprob: -8.590251922607422
    10. '     ' → logprob: -9.090251922607422

Token 413: 'dans' (ID: 108151)
  Prédit: ' que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.552061915397644
    2. '   ' → logprob: -1.302061915397644
    3. ' qu' → logprob: -2.8020620346069336
    4. ' ' → logprob: -3.4270620346069336
    5. '    ' → logprob: -3.6770620346069336
    6. ' )' → logprob: -3.9270620346069336
    7. ')' → logprob: -5.427062034606934
    8. '0' → logprob: -6.177062034606934
    9. '    
' → logprob: -6.427062034606934
    10. ' ' → logprob: -6.927062034606934

Token 414: ' le' (ID: 505)
  Prédit: ' ce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ce' → logprob: -0.16125482320785522
    2. ' le' → logprob: -2.6612548828125
    3. 'le' → logprob: -3.6612548828125
    4. '   ' → logprob: -4.1612548828125
    5. ' la' → logprob: -4.1612548828125
    6. ' cette' → logprob: -5.0362548828125
    7. ' l' → logprob: -5.5362548828125
    8. ' cet' → logprob: -5.7862548828125
    9. 'l' → logprob: -6.0362548828125
    10. 'ce' → logprob: -6.5362548828125

Token 415: ' contexte' (ID: 82673)
  Prédit: ' cas'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cas' → logprob: -0.32285037636756897
    2. ' code' → logprob: -1.6978503465652466
    3. '   ' → logprob: -3.822850465774536
    4. 'cas' → logprob: -3.947850465774536
    5. 'con' → logprob: -4.072850227355957
    6. 'code' → logprob: -4.197850227355957
    7. ' contexte' → logprob: -4.447850227355957
    8. ' cadre' → logprob: -6.697850227355957
    9. 'programme' → logprob: -7.322850227355957
    10. ' programme' → logprob: -7.822850227355957

Token 416: ' original' (ID: 4756)
  Prédit: ' du'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' du' → logprob: -0.3455702066421509
    2. ' que' → logprob: -1.9705702066421509
    3. ')' → logprob: -2.8455700874328613
    4. ' de' → logprob: -3.0955700874328613
    5. ' )' → logprob: -3.2205700874328613
    6. ' d' → logprob: -5.220570087432861
    7. ' des' → logprob: -6.220570087432861
    8. ' qu' → logprob: -7.345570087432861
    9. 'de' → logprob: -7.595570087432861
    10. 'du' → logprob: -8.59557056427002

Token 417: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3308536112308502
    2. ' )' → logprob: -2.0808537006378174
    3. ' que' → logprob: -2.2058537006378174
    4. '   ' → logprob: -3.2058537006378174
    5. ' ' → logprob: -5.330853462219238
    6. ' qu' → logprob: -6.955853462219238
    7. '  ' → logprob: -9.580853462219238
    8. 'que' → logprob: -9.705853462219238
    9. ' ' → logprob: -9.830853462219238
    10. '    ' → logprob: -9.955853462219238

Token 418: ' qu' (ID: 474)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -1.1637104749679565
    2. '   ' → logprob: -1.4137104749679565
    3. '       ' → logprob: -1.6637104749679565
    4. '    
' → logprob: -1.7887104749679565
    5. '        
' → logprob: -3.788710594177246
    6. '\n' → logprob: -4.163710594177246
    7. ' 
' → logprob: -4.413710594177246
    8. 'return' → logprob: -4.663710594177246
    9. '  
' → logprob: -4.913710594177246
    10. ' return' → logprob: -5.038710594177246

Token 419: ''' (ID: 6)
  Prédit: ''il'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''il' → logprob: -0.2619519531726837
    2. ''' → logprob: -2.1369519233703613
    3. ''on' → logprob: -3.6369519233703613
    4. ' print' → logprob: -3.7619519233703613
    5. 'e' → logprob: -4.136951923370361
    6. ' que' → logprob: -4.386951923370361
    7. 'print' → logprob: -4.636951923370361
    8. ' il' → logprob: -4.886951923370361
    9. 'u' → logprob: -5.511951923370361
    10. 'il' → logprob: -6.261951923370361

Token 420: 'auc' (ID: 11816)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.1629336178302765
    2. ' print' → logprob: -2.537933588027954
    3. ''' → logprob: -4.287933826446533
    4. ''il' → logprob: -4.287933826446533
    5. ''on' → logprob: -4.662933826446533
    6. 'auc' → logprob: -4.662933826446533
    7. 'on' → logprob: -5.287933826446533
    8. ' le' → logprob: -5.787933826446533
    9. '   ' → logprob: -6.037933826446533
    10. ' on' → logprob: -6.037933826446533

Token 421: 'un' (ID: 373)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.419322669506073
    2. 'print' → logprob: -1.5443227291107178
    3. 'un' → logprob: -2.5443227291107178
    4. 'une' → logprob: -3.1693227291107178
    5. '       ' → logprob: -5.794322490692139
    6. ' print' → logprob: -6.419322490692139
    7. '  ' → logprob: -6.419322490692139
    8. '    ' → logprob: -7.169322490692139
    9. ' ' → logprob: -7.419322490692139
    10. 'n' → logprob: -8.794322967529297

Token 422: ' coût' (ID: 73109)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -1.1032410860061646
    2. 'co' → logprob: -1.3532410860061646
    3. 'es' → logprob: -2.728240966796875
    4. 'd' → logprob: -2.978240966796875
    5. 's' → logprob: -3.353240966796875
    6. ' déplacement' → logprob: -3.603240966796875
    7. 'é' → logprob: -3.728240966796875
    8. 'cost' → logprob: -3.728240966796875
    9. ' coût' → logprob: -3.853240966796875
    10. 'dom' → logprob: -4.228240966796875

Token 423: ' n' (ID: 297)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4377022981643677
    2. ' ' → logprob: -1.3127022981643677
    3. '()' → logprob: -3.562702178955078
    4. ' à' → logprob: -4.437702178955078
    5. '    ' → logprob: -4.812702178955078
    6. '  ' → logprob: -5.062702178955078
    7. ' print' → logprob: -5.187702178955078
    8. '0' → logprob: -5.812702178955078
    9. ' de' → logprob: -5.812702178955078
    10. 'print' → logprob: -6.062702178955078

Token 424: ''est' (ID: 6616)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.2681463956832886
    2. ' print' → logprob: -1.7681463956832886
    3. 'print' → logprob: -4.018146514892578
    4. ' a' → logprob: -4.393146514892578
    5. '   ' → logprob: -4.518146514892578
    6. 'n' → logprob: -4.768146514892578
    7. ' ne' → logprob: -5.643146514892578
    8. ' ' → logprob: -6.268146514892578
    9. 'e' → logprob: -6.518146514892578
    10. '  ' → logprob: -6.768146514892578

Token 425: ' requis' (ID: 35842)
  Prédit: 'à'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'à' → logprob: -0.37777554988861084
    2. 'né' → logprob: -1.8777755498886108
    3. ' à' → logprob: -1.8777755498886108
    4. ' nécessaire' → logprob: -5.8777756690979
    5. 'n' → logprob: -6.6277756690979
    6. '
' → logprob: -6.7527756690979
    7. 'eng' → logprob: -7.1277756690979
    8. ' ' → logprob: -7.5027756690979
    9. 'necess' → logprob: -8.377775192260742
    10. ' ' → logprob: -8.502775192260742

Token 426: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13514189422130585
    2. '       ' → logprob: -2.2601418495178223
    3. ')' → logprob: -4.760141849517822
    4. '()' → logprob: -5.760141849517822
    5. ',' → logprob: -6.010141849517822
    6. '.' → logprob: -6.135141849517822
    7. '    
' → logprob: -6.510141849517822
    8. '0' → logprob: -6.885141849517822
    9. ')
' → logprob: -7.885141849517822
    10. '
' → logprob: -7.885141849517822

Token 427: ' 
' (ID: 793)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.1207544356584549
    2. ' return' → logprob: -2.8707544803619385
    3. '   ' → logprob: -3.4957544803619385
    4. 'return' → logprob: -3.7457544803619385
    5. '
' → logprob: -6.870754241943359
    6. ' ' → logprob: -7.245754241943359
    7. '    
' → logprob: -7.870754241943359
    8. '        
' → logprob: -8.62075424194336
    9. ' car' → logprob: -9.12075424194336
    10. ' 
' → logprob: -9.24575424194336

Token 428: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.010926269926130772
    2. '   ' → logprob: -4.635926246643066
    3. 'return' → logprob: -7.135926246643066
    4. ' return' → logprob: -8.885926246643066
    5. '0' → logprob: -9.135926246643066
    6. '           ' → logprob: -10.135926246643066
    7. 'print' → logprob: -10.510926246643066
    8. ' ' → logprob: -11.510926246643066
    9. ' car' → logprob: -12.135926246643066
    10. ' or' → logprob: -12.260926246643066

Token 429: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.11760766804218292
    2. 'return' → logprob: -2.617607593536377
    3. '   ' → logprob: -3.867607593536377
    4. ' return' → logprob: -4.117607593536377
    5. ' car' → logprob: -8.492608070373535
    6. 'print' → logprob: -8.867608070373535
    7. 'car' → logprob: -8.992608070373535
    8. ' ' → logprob: -9.367608070373535
    9. '           ' → logprob: -9.992608070373535
    10. ' print' → logprob: -10.992608070373535

Token 430: ' ou' (ID: 2031)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.02250211127102375
    2. 'return' → logprob: -3.8975021839141846
    3. ' return' → logprob: -6.3975019454956055
    4. '   ' → logprob: -8.272501945495605
    5. '	return' → logprob: -11.522501945495605
    6. ' ' → logprob: -11.522501945495605
    7. '    ' → logprob: -12.022501945495605
    8. '	' → logprob: -12.647501945495605
    9. '   ' → logprob: -13.272501945495605
    10. '
' → logprob: -13.647501945495605

Token 431: ' qu' (ID: 474)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.15868067741394043
    2. ' return' → logprob: -2.2836806774139404
    3. 'return' → logprob: -3.2836806774139404
    4. '       ' → logprob: -6.2836809158325195
    5. '    ' → logprob: -6.5336809158325195
    6. ' ' → logprob: -6.6586809158325195
    7. '    
' → logprob: -7.1586809158325195
    8. '	return' → logprob: -7.4086809158325195
    9. ' ' → logprob: -8.15868091583252
    10. '
' → logprob: -8.65868091583252

Token 432: ''' (ID: 6)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -1.5379449129104614
    2. ' print' → logprob: -1.7879449129104614
    3. ' on' → logprob: -2.287944793701172
    4. 'print' → logprob: -2.662944793701172
    5. '   ' → logprob: -2.787944793701172
    6. '    ' → logprob: -3.162944793701172
    7. '0' → logprob: -3.412944793701172
    8. ' la' → logprob: -3.412944793701172
    9. ' l' → logprob: -3.537944793701172
    10. ''' → logprob: -3.662944793701172

Token 433: 'auc' (ID: 11816)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -1.1439632177352905
    2. 'print' → logprob: -1.6439632177352905
    3. '0' → logprob: -1.8939632177352905
    4. ' ' → logprob: -2.76896333694458
    5. ' return' → logprob: -3.01896333694458
    6. ' le' → logprob: -3.26896333694458
    7. ' la' → logprob: -3.51896333694458
    8. 'return' → logprob: -3.76896333694458
    9. ''' → logprob: -4.01896333694458
    10. 'auc' → logprob: -4.14396333694458

Token 434: 'une' (ID: 2561)
  Prédit: 'un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'un' → logprob: -0.6757713556289673
    2. 'une' → logprob: -1.4257713556289673
    3. 'on' → logprob: -2.5507712364196777
    4. 'ucun' → logprob: -3.4257712364196777
    5. 'print' → logprob: -3.6757712364196777
    6. 'oint' → logprob: -4.175771236419678
    7. 'ucune' → logprob: -4.175771236419678
    8. ' aucun' → logprob: -4.550771236419678
    9. 'unch' → logprob: -4.675771236419678
    10. 'def' → logprob: -5.175771236419678

Token 435: ' opération' (ID: 86023)
  Prédit: 'action'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'action' → logprob: -1.400159239768982
    2. ' action' → logprob: -1.400159239768982
    3. 'mod' → logprob: -2.5251593589782715
    4. ' modification' → logprob: -2.7751593589782715
    5. ' améli' → logprob: -2.9001593589782715
    6. 'am' → logprob: -3.0251593589782715
    7. ' dép' → logprob: -3.4001593589782715
    8. 'd' → logprob: -4.0251593589782715
    9. ' réduction' → logprob: -4.1501593589782715
    10. 'élé' → logprob: -4.2751593589782715

Token 436: ' n' (ID: 297)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5984715223312378
    2. 'print' → logprob: -1.7234715223312378
    3. ' print' → logprob: -2.2234716415405273
    4. ' n' → logprob: -2.5984716415405273
    5. ' à' → logprob: -2.8484716415405273
    6. ' supplémentaire' → logprob: -4.348471641540527
    7. ' nécessaire' → logprob: -5.223471641540527
    8. 'n' → logprob: -5.348471641540527
    9. ' de' → logprob: -5.848471641540527
    10. ' necess' → logprob: -6.973471641540527

Token 437: ''est' (ID: 6616)
  Prédit: ' est'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' est' → logprob: -0.7158861756324768
    2. ' n' → logprob: -1.590886116027832
    3. ' ' → logprob: -2.590886116027832
    4. ''est' → logprob: -2.965886116027832
    5. ' print' → logprob: -3.090886116027832
    6. 'print' → logprob: -3.590886116027832
    7. ' a' → logprob: -3.590886116027832
    8. '_' → logprob: -3.965886116027832
    9. ' is' → logprob: -4.090886116027832
    10. 'n' → logprob: -4.840886116027832

Token 438: ' nécessaire' (ID: 43098)
  Prédit: 'né'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'né' → logprob: -0.7146276235580444
    2. ' nécessaire' → logprob: -0.7146276235580444
    3. ' necess' → logprob: -4.714627742767334
    4. ' à' → logprob: -5.589627742767334
    5. 'à' → logprob: -5.839627742767334
    6. 'necess' → logprob: -6.714627742767334
    7. 'n' → logprob: -6.839627742767334
    8. ' nécessaires' → logprob: -7.089627742767334
    9. ' needed' → logprob: -7.339627742767334
    10. ' né' → logprob: -7.964627742767334

Token 439: '.
' (ID: 558)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.4298021197319031
    2. '   ' → logprob: -1.1798021793365479
    3. '
' → logprob: -3.304802179336548
    4. '.' → logprob: -6.054801940917969
    5. 'return' → logprob: -6.929801940917969
    6. '    
' → logprob: -7.554801940917969
    7. '.
' → logprob: -7.804801940917969
    8. ',' → logprob: -8.554801940917969
    9. ',
' → logprob: -8.804801940917969
    10. ')
' → logprob: -9.054801940917969

Token 440: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -7.588793960167095e-05
    2. '
' → logprob: -10.250076293945312
    3. 'print' → logprob: -10.875076293945312
    4. '```' → logprob: -11.750076293945312
    5. '   ' → logprob: -12.000076293945312
    6. ' print' → logprob: -12.875076293945312
    7. '\n' → logprob: -13.250076293945312
    8. '        
' → logprob: -13.875076293945312
    9. '           ' → logprob: -14.500076293945312
    10. '    
' → logprob: -15.000076293945312

Token 441: ' print' (ID: 2123)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0012353454949334264
    2. 'print' (adapté à ' print') → logprob: -6.876235485076904
    3. ' print' → logprob: -9.251235008239746
    4. '
' → logprob: -9.876235008239746
    5. '   ' → logprob: -10.001235008239746
    6. 'return' → logprob: -12.251235008239746
    7. '           ' → logprob: -13.251235008239746
    8. ' return' → logprob: -13.501235008239746
    9. '        
' → logprob: -14.376235008239746
    10. '```' → logprob: -14.876235008239746

Token 442: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -8.947715832618997e-05
    2. '('' → logprob: -9.500089645385742
    3. '()' → logprob: -12.000089645385742
    4. ' (' → logprob: -12.250089645385742
    5. '("' → logprob: -13.125089645385742
    6. '0' → logprob: -13.375089645385742
    7. '(
' → logprob: -18.125089645385742
    8. ' ' → logprob: -18.625089645385742
    9. '((' → logprob: -20.375089645385742
    10. '   ' → logprob: -20.875089645385742

Token 443: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -2.339278580620885e-06
    2. ' ' → logprob: -13.125001907348633
    3. '"' → logprob: -15.750001907348633
    4. ''' → logprob: -15.875001907348633
    5. ')' → logprob: -17.750001907348633
    6. '   ' → logprob: -19.375001907348633
    7. '(' → logprob: -21.250001907348633
    8. '`' → logprob: -22.625001907348633
    9. '00' → logprob: -23.125001907348633
    10. ')
' → logprob: -23.375001907348633

Token 444: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0003392767102923244
    2. ')
' → logprob: -8.00033950805664
    3. '   ' → logprob: -12.62533950805664
    4. ' )' → logprob: -15.37533950805664
    5. ')return' → logprob: -15.62533950805664
    6. '')' → logprob: -16.50033950805664
    7. '")' → logprob: -16.87533950805664
    8. ')
' → logprob: -17.25033950805664
    9. '`)' → logprob: -17.37533950805664
    10. '))' → logprob: -18.00033950805664

Token 445: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00505586015060544
    2. 'else' → logprob: -6.005055904388428
    3. '    
' → logprob: -6.130055904388428
    4. ' else' → logprob: -8.63005542755127
    5. 'return' → logprob: -9.00505542755127
    6. '
' → logprob: -10.50505542755127
    7. ':return' → logprob: -11.38005542755127
    8. '<|end|>' → logprob: -11.75505542755127
    9. '	else' → logprob: -12.00505542755127
    10. 'elif' → logprob: -12.00505542755127

Token 446: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.1851668506860733
    2. '   ' → logprob: -2.060166835784912
    3. ' else' → logprob: -3.185166835784912
    4. '    
' → logprob: -8.93516731262207
    5. '	else' → logprob: -10.18516731262207
    6. 'elif' → logprob: -10.31016731262207
    7. ':' → logprob: -12.18516731262207
    8. 'return' → logprob: -12.31016731262207
    9. '.' → logprob: -12.93516731262207
    10. ')' → logprob: -13.43516731262207

Token 447: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.003602917306125164
    2. ':
' → logprob: -5.628602981567383
    3. '   ' → logprob: -13.753602981567383
    4. ' :' → logprob: -14.003602981567383
    5. '       ' → logprob: -14.878602981567383
    6. ':
' → logprob: -15.378602981567383
    7. ',' → logprob: -15.878602981567383
    8. ':

' → logprob: -16.253602981567383
    9. ':return' → logprob: -16.878602981567383
    10. ' :
' → logprob: -17.003602981567383

Token 448: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.10562660545110703
    2. '   ' → logprob: -2.3556265830993652
    3. 'print' → logprob: -5.355626583099365
    4. ' print' → logprob: -7.605626583099365
    5. '    
' → logprob: -9.355627059936523
    6. '    ' → logprob: -10.855627059936523
    7. 'cost' → logprob: -10.980627059936523
    8. 'max' → logprob: -11.855627059936523
    9. '   ' → logprob: -11.980627059936523
    10. '        
' → logprob: -12.230627059936523

Token 449: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.22834515571594238
    2. ' print' → logprob: -1.9783451557159424
    3. '   ' → logprob: -2.8533451557159424
    4. 'sum' → logprob: -5.853344917297363
    5. ' sum' → logprob: -6.603344917297363
    6. 'cost' → logprob: -7.228344917297363
    7. '       ' → logprob: -7.353344917297363
    8. 'result' → logprob: -8.228344917297363
    9. 'rest' → logprob: -8.353344917297363
    10. '    ' → logprob: -8.353344917297363

Token 450: ' Sinon' (ID: 154924)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.7591540217399597
    2. 'print' → logprob: -0.8841540217399597
    3. '   ' → logprob: -3.3841540813446045
    4. ' sum' → logprob: -4.384153842926025
    5. ' result' → logprob: -4.509153842926025
    6. 'result' → logprob: -4.759153842926025
    7. '#' → logprob: -4.884153842926025
    8. 'sum' → logprob: -4.884153842926025
    9. ' #' → logprob: -5.134153842926025
    10. 'cost' → logprob: -5.259153842926025

Token 451: ' (' (ID: 350)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.04027429595589638
    2. '       ' → logprob: -3.5402743816375732
    3. ':
' → logprob: -4.790274143218994
    4. ' :' → logprob: -7.165274143218994
    5. 'print' → logprob: -7.540274143218994
    6. ',' → logprob: -7.790274143218994
    7. '   ' → logprob: -8.415274620056152
    8. ' print' → logprob: -9.415274620056152
    9. ' :
' → logprob: -10.040274620056152
    10. '           ' → logprob: -10.165274620056152

Token 452: 'c' (ID: 66)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.06513848155736923
    2. 'print' → logprob: -3.815138578414917
    3. '#' → logprob: -4.440138339996338
    4. 'cost' → logprob: -4.690138339996338
    5. '   ' → logprob: -4.940138339996338
    6. ' #' → logprob: -4.940138339996338
    7. ' print' → logprob: -6.065138339996338
    8. 'co' → logprob: -7.690138339996338
    9. 'sum' → logprob: -8.190138816833496
    10. ' cost' → logprob: -8.315138816833496

Token 453: ''est' (ID: 6616)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.7947232127189636
    2. '   ' → logprob: -1.0447232723236084
    3. 'ode' → logprob: -1.7947232723236084
    4. '#' → logprob: -4.794723033905029
    5. '       ' → logprob: -5.044723033905029
    6. 'es' → logprob: -5.669723033905029
    7. '    ' → logprob: -6.294723033905029
    8. 'ont' → logprob: -6.419723033905029
    9. '  ' → logprob: -6.544723033905029
    10. 'ela' → logprob: -6.544723033905029

Token 454: '-à' (ID: 56297)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.23649956285953522
    2. ' que' → logprob: -2.611499547958374
    3. '   ' → logprob: -3.111499547958374
    4. 'que' → logprob: -3.486499547958374
    5. '           ' → logprob: -3.861499547958374
    6. 'le' → logprob: -4.736499786376953
    7. ' le' → logprob: -4.861499786376953
    8. 'à' → logprob: -5.236499786376953
    9. 'l' → logprob: -5.361499786376953
    10. 'n' → logprob: -5.736499786376953

Token 455: '-dire' (ID: 76064)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0127860307693481
    2. 'else' → logprob: -2.1377859115600586
    3. '       ' → logprob: -2.2627859115600586
    4. 'l' → logprob: -2.3877859115600586
    5. ' ce' → logprob: -3.7627859115600586
    6. '#' → logprob: -4.137785911560059
    7. ' l' → logprob: -4.387785911560059
    8. '`' → logprob: -4.387785911560059
    9. 'if' → logprob: -4.512785911560059
    10. 'x' → logprob: -4.512785911560059

Token 456: ' si' (ID: 1784)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5647501945495605
    2. '   ' → logprob: -1.3147501945495605
    3. ':' → logprob: -2.5647501945495605
    4. '#' → logprob: -2.6897501945495605
    5. ' #' → logprob: -4.5647501945495605
    6. ',' → logprob: -5.4397501945495605
    7. ' ' → logprob: -6.9397501945495605
    8. '           ' → logprob: -7.1897501945495605
    9. '    ' → logprob: -8.189750671386719
    10. '        ' → logprob: -8.439750671386719

Token 457: ' N' (ID: 478)
  Prédit: ' N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.3144368529319763
    2. 'N' → logprob: -1.314436912536621
    3. '   ' → logprob: -6.814436912536621
    4. ' ' → logprob: -10.814436912536621
    5. ' ' → logprob: -11.189436912536621
    6. '	N' → logprob: -11.439436912536621
    7. '    ' → logprob: -11.939436912536621
    8. 'n' → logprob: -12.189436912536621
    9. '  ' → logprob: -12.564436912536621
    10. ' len' → logprob: -12.939436912536621

Token 458: ' >' (ID: 1424)
  Prédit: ' >'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.018273673951625824
    2. '>' → logprob: -4.018273830413818
    3. '   ' → logprob: -9.89327335357666
    4. ' ' → logprob: -10.01827335357666
    5. ' -' → logprob: -11.14327335357666
    6. ' ' → logprob: -12.64327335357666
    7. '>K' → logprob: -12.76827335357666
    8. '-' → logprob: -13.51827335357666
    9. '>N' → logprob: -13.51827335357666
    10. ' <=' → logprob: -13.64327335357666

Token 459: ' K' (ID: 658)
  Prédit: ' K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.4740954041481018
    2. 'K' → logprob: -0.9740954041481018
    3. ' ' → logprob: -11.849095344543457
    4. '   ' → logprob: -12.224095344543457
    5. ' ' → logprob: -12.599095344543457
    6. '	K' → logprob: -13.724095344543457
    7. ')' → logprob: -14.224095344543457
    8. '       ' → logprob: -15.224095344543457
    9. ',' → logprob: -15.349095344543457
    10. '  ' → logprob: -15.724095344543457

Token 460: '),' (ID: 936)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.6272909045219421
    2. '):' → logprob: -1.252290964126587
    3. '):
' → logprob: -2.377290964126587
    4. '       ' → logprob: -2.752290964126587
    5. '),' → logprob: -3.877290964126587
    6. ' :' → logprob: -6.627290725708008
    7. ')' → logprob: -7.627290725708008
    8. ':
' → logprob: -7.877290725708008
    9. '   ' → logprob: -8.377290725708008
    10. ',' → logprob: -8.752290725708008

Token 461: ' on' (ID: 402)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.22297760844230652
    2. '       ' → logprob: -1.847977638244629
    3. ' print' → logprob: -3.722977638244629
    4. 'result' → logprob: -5.722977638244629
    5. '#' → logprob: -5.972977638244629
    6. 'sum' → logprob: -6.097977638244629
    7. 'total' → logprob: -6.347977638244629
    8. 'reste' → logprob: -6.347977638244629
    9. 'cost' → logprob: -6.472977638244629
    10. '   ' → logprob: -6.472977638244629

Token 462: ' considère' (ID: 176437)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.11795328557491302
    2. ' print' → logprob: -2.242953300476074
    3. '       ' → logprob: -5.492953300476074
    4. '#' → logprob: -7.867953300476074
    5. ' prin' → logprob: -8.492953300476074
    6. '   ' → logprob: -9.367953300476074
    7. 'pr' → logprob: -9.617953300476074
    8. '        ' → logprob: -9.867953300476074
    9. 'for' → logprob: -10.117953300476074
    10. '    ' → logprob: -10.242953300476074

Token 463: ' les' (ID: 1341)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -1.1107521057128906
    2. 'H' → logprob: -1.4857521057128906
    3. ' H' → logprob: -1.6107521057128906
    4. 'print' → logprob: -1.8607521057128906
    5. 'la' → logprob: -3.2357521057128906
    6. ' print' → logprob: -4.485752105712891
    7. 'les' → logprob: -4.485752105712891
    8. ' les' → logprob: -4.985752105712891
    9. ' le' → logprob: -5.485752105712891
    10. ' l' → logprob: -5.610752105712891

Token 464: ' éléments' (ID: 57375)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.05893288552761078
    2. 'H' → logprob: -3.1839327812194824
    3. ' éléments' → logprob: -5.183932781219482
    4. 'val' → logprob: -5.433932781219482
    5. 'K' → logprob: -6.308932781219482
    6. 'elements' → logprob: -6.808932781219482
    7. ' H' → logprob: -7.433932781219482
    8. 'plus' → logprob: -8.30893325805664
    9. 'cout' → logprob: -8.43393325805664
    10. 'elem' → logprob: -8.55893325805664

Token 465: ' de' (ID: 334)
  Prédit: '[K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[K' → logprob: -0.002247438533231616
    2. '[' → logprob: -6.877247333526611
    3. 'rest' → logprob: -7.877247333526611
    4. 'K' → logprob: -8.37724781036377
    5. '       ' → logprob: -8.87724781036377
    6. ' K' → logprob: -9.62724781036377
    7. '[k' → logprob: -9.75224781036377
    8. '   ' → logprob: -9.87724781036377
    9. 'de' → logprob: -9.87724781036377
    10. 'qui' → logprob: -10.00224781036377

Token 466: ' l' (ID: 305)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.023764459416270256
    2. ' H' → logprob: -3.7737643718719482
    3. ' la' → logprob: -7.898764610290527
    4. 'la' → logprob: -9.023764610290527
    5. ' ' → logprob: -11.773764610290527
    6. '   ' → logprob: -12.398764610290527
    7. 'l' → logprob: -12.898764610290527
    8. ' ' → logprob: -13.273764610290527
    9. '(H' → logprob: -13.523764610290527
    10. '  ' → logprob: -13.898764610290527

Token 467: ''ind' (ID: 82245)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.1859574019908905
    2. 'H' → logprob: -1.810957431793213
    3. 'liste' → logprob: -5.685957431793213
    4. 'iste' → logprob: -6.810957431793213
    5. '   ' → logprob: -8.310956954956055
    6. 'index' → logprob: -8.435956954956055
    7. ''H' → logprob: -8.685956954956055
    8. 'à' → logprob: -9.060956954956055
    9. '#' → logprob: -9.060956954956055
    10. 'e' → logprob: -9.435956954956055

Token 468: 'ice' (ID: 603)
  Prédit: 'ex'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ex' → logprob: -0.05049861595034599
    2. 'ice' → logprob: -3.0504987239837646
    3. 'ent' → logprob: -6.4254984855651855
    4. 'ices' → logprob: -8.675498962402344
    5. 'entation' → logprob: -9.300498962402344
    6. '#' → logprob: -10.925498962402344
    7. '```' → logprob: -13.675498962402344
    8. 'ext' → logprob: -13.925498962402344
    9. '`' → logprob: -14.300498962402344
    10. 'exp' → logprob: -14.300498962402344

Token 469: ' K' (ID: 658)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.06911441683769226
    2. ' K' → logprob: -2.8191144466400146
    3. '[K' → logprob: -5.3191142082214355
    4. '	K' → logprob: -6.6941142082214355
    5. '[' → logprob: -7.5691142082214355
    6. 'k' → logprob: -8.944114685058594
    7. '   ' → logprob: -9.444114685058594
    8. '_K' → logprob: -9.694114685058594
    9. ' 
' → logprob: -10.444114685058594
    10. '	' → logprob: -10.569114685058594

Token 470: ' (' (ID: 350)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']' → logprob: -0.5061913132667542
    2. ':' → logprob: -1.2561912536621094
    3. ':].' → logprob: -3.1311912536621094
    4. ':]' → logprob: -4.131191253662109
    5. '].' → logprob: -4.381191253662109
    6. '],' → logprob: -4.631191253662109
    7. ':],' → logprob: -4.756191253662109
    8. '[' → logprob: -5.881191253662109
    9. ' onwards' → logprob: -6.006191253662109
    10. ',' → logprob: -6.256191253662109

Token 471: 'in' (ID: 258)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.006916775833815336
    2. ' )' → logprob: -5.5069169998168945
    3. ':' → logprob: -6.5069169998168945
    4. ':)' → logprob: -7.3819169998168945
    5. ')
' → logprob: -8.756916999816895
    6. ' :)' → logprob: -9.381916999816895
    7. 'K' → logprob: -9.631916999816895
    8. '   ' → logprob: -10.006916999816895
    9. '`)' → logprob: -10.256916999816895
    10. ' à' → logprob: -10.381916999816895

Token 472: 'clus' (ID: 4085)
  Prédit: 'ex'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ex' → logprob: -0.08653612434864044
    2. '#' → logprob: -3.336536169052124
    3. 'dex' → logprob: -3.336536169052124
    4. 'ices' → logprob: -5.836535930633545
    5. ']' → logprob: -6.336535930633545
    6. ':' → logprob: -6.961535930633545
    7. 'x' → logprob: -7.211535930633545
    8. 'ici' → logprob: -7.461535930633545
    9. ':]' → logprob: -7.836535930633545
    10. '```' → logprob: -7.961535930633545

Token 473: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.003738683182746172
    2. 'e' → logprob: -5.878738880157471
    3. ':)' → logprob: -8.253738403320312
    4. ':' → logprob: -8.628738403320312
    5. ' )' → logprob: -8.753738403320312
    6. ')...' → logprob: -9.253738403320312
    7. ')
' → logprob: -9.378738403320312
    8. ')e' → logprob: -10.253738403320312
    9. '):' → logprob: -10.503738403320312
    10. '):
' → logprob: -10.753738403320312

Token 474: '       ' (ID: 309)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.014266341924667358
    2. '   ' → logprob: -5.014266490936279
    3. ',' → logprob: -5.389266490936279
    4. ' :' → logprob: -7.139266490936279
    5. '       ' → logprob: -7.514266490936279
    6. '=' → logprob: -8.389266014099121
    7. ' jusqu' → logprob: -8.389266014099121
    8. ':
' → logprob: -8.639266014099121
    9. '[' → logprob: -9.014266014099121
    10. ' à' → logprob: -9.139266014099121

Token 475: ' #' (ID: 1069)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00021855637896806002
    2. ' :' → logprob: -8.875218391418457
    3. '   ' → logprob: -10.500218391418457
    4. ':
' → logprob: -11.625218391418457
    5. ',' → logprob: -11.875218391418457
    6. ' à' → logprob: -12.375218391418457
    7. ':]' → logprob: -12.625218391418457
    8. '=' → logprob: -12.750218391418457
    9. '       ' → logprob: -13.250218391418457
    10. ' jusqu' → logprob: -13.250218391418457

Token 476: ' jusqu' (ID: 21961)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0009014541283249855
    2. ' :' → logprob: -7.750901222229004
    3. ':
' → logprob: -8.750901222229004
    4. '=' → logprob: -10.000901222229004
    5. 'print' → logprob: -10.250901222229004
    6. '   ' → logprob: -10.375901222229004
    7. ',' → logprob: -10.625901222229004
    8. 'to' → logprob: -11.125901222229004
    9. ' onwards' → logprob: -11.250901222229004
    10. ':]' → logprob: -11.375901222229004

Token 477: ''à' (ID: 33688)
  Prédit: ''à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''à' → logprob: -0.05010344088077545
    2. '’à' → logprob: -4.175103664398193
    3. ' à' → logprob: -4.425103664398193
    4. 'à' → logprob: -4.425103664398193
    5. ''au' → logprob: -5.300103664398193
    6. 'au' → logprob: -5.925103664398193
    7. '=' → logprob: -6.550103664398193
    8. '’au' → logprob: -9.300103187561035
    9. '=len' → logprob: -9.425103187561035
    10. '   ' → logprob: -9.425103187561035

Token 478: ' la' (ID: 557)
  Prédit: 'la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'la' → logprob: -0.03921056166291237
    2. 'len' → logprob: -3.664210557937622
    3. ' la' → logprob: -4.789210796356201
    4. 'N' → logprob: -5.664210796356201
    5. 'the' → logprob: -8.164210319519043
    6. 'à' → logprob: -8.789210319519043
    7. ' ' → logprob: -8.914210319519043
    8. ' ' → logprob: -8.914210319519043
    9. '#' → logprob: -9.539210319519043
    10. ' len' → logprob: -9.664210319519043

Token 479: ' fin' (ID: 2131)
  Prédit: 'fin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'fin' → logprob: -0.08165664970874786
    2. 'len' → logprob: -2.8316566944122314
    3. 'N' → logprob: -4.956656455993652
    4. 'dern' → logprob: -5.331656455993652
    5. 'end' → logprob: -5.831656455993652
    6. 'la' → logprob: -6.706656455993652
    7. 'a' → logprob: -6.706656455993652
    8. 'n' → logprob: -7.206656455993652
    9. 'à' → logprob: -7.456656455993652
    10. 'K' → logprob: -8.206656455993652

Token 480: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.5487487316131592
    2. '   ' → logprob: -1.5487487316131592
    3. 'H' → logprob: -3.048748731613159
    4. 'de' → logprob: -3.048748731613159
    5. ',' → logprob: -3.173748731613159
    6. ':' → logprob: -3.298748731613159
    7. ' H' → logprob: -3.923748731613159
    8. '       ' → logprob: -5.298748970031738
    9. '(H' → logprob: -6.173748970031738
    10. '.' → logprob: -6.423748970031738

Token 481: ' la' (ID: 557)
  Prédit: 'la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'la' → logprob: -0.30710792541503906
    2. ' la' → logprob: -1.932107925415039
    3. 'H' → logprob: -2.182107925415039
    4. ' H' → logprob: -5.057107925415039
    5. 'l' → logprob: -8.307107925415039
    6. 'liste' → logprob: -9.682107925415039
    7. '#' → logprob: -10.807107925415039
    8. '   ' → logprob: -10.932107925415039
    9. 'the' → logprob: -11.057107925415039
    10. ' ' → logprob: -11.182107925415039

Token 482: ' liste' (ID: 31719)
  Prédit: 'liste'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'liste' → logprob: -0.014238021336495876
    2. 'H' → logprob: -4.889237880706787
    3. ' liste' → logprob: -5.389237880706787
    4. 'list' → logprob: -6.264237880706787
    5. ' H' → logprob: -9.514238357543945
    6. '#' → logprob: -10.639238357543945
    7. 'lista' → logprob: -11.139238357543945
    8. '```' → logprob: -11.389238357543945
    9. 'la' → logprob: -11.764238357543945
    10. '   ' → logprob: -12.764238357543945

Token 483: ' H' (ID: 487)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.6093147397041321
    2. ',' → logprob: -1.4843146800994873
    3. 'H' → logprob: -2.4843146800994873
    4. '   ' → logprob: -2.6093146800994873
    5. ':' → logprob: -3.4843146800994873
    6. '.' → logprob: -3.8593146800994873
    7. ' H' → logprob: -4.734314918518066
    8. '(H' → logprob: -5.984314918518066
    9. '[' → logprob: -6.609314918518066
    10. '(' → logprob: -6.859314918518066

Token 484: ',' (ID: 11)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.11772700399160385
    2. '[' → logprob: -2.242727041244507
    3. ':' → logprob: -6.742726802825928
    4. ',' → logprob: -6.742726802825928
    5. ':
' → logprob: -7.742726802825928
    6. '[
' → logprob: -7.867726802825928
    7. '[N' → logprob: -8.367727279663086
    8. ',
' → logprob: -8.742727279663086
    9. '[K' → logprob: -8.742727279663086
    10. '   ' → logprob: -8.867727279663086

Token 485: ' grâce' (ID: 31589)
  Prédit: 'sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'sum' → logprob: -0.957422137260437
    2. '       ' → logprob: -1.457422137260437
    3. ' sum' → logprob: -1.707422137260437
    4. ' H' → logprob: -2.9574222564697266
    5. ' and' → logprob: -2.9574222564697266
    6. 'H' → logprob: -3.4574222564697266
    7. '   ' → logprob: -3.7074222564697266
    8. ')' → logprob: -4.957422256469727
    9. ',' → logprob: -5.457422256469727
    10. '           ' → logprob: -5.707422256469727

Token 486: ' au' (ID: 2791)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.011735884472727776
    2. ' à' → logprob: -5.011735916137695
    3. 'à' → logprob: -5.636735916137695
    4. 'H' → logprob: -7.261735916137695
    5. '(H' → logprob: -7.636735916137695
    6. '(' → logprob: -9.636735916137695
    7. '[' → logprob: -9.886735916137695
    8. ''à' → logprob: -11.011735916137695
    9. '=len' → logprob: -11.261735916137695
    10. ' H' → logprob: -11.386735916137695

Token 487: ' décou' (ID: 68302)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.2815941870212555
    2. '[' → logprob: -2.5315942764282227
    3. ' H' → logprob: -3.0315942764282227
    4. 'slice' → logprob: -3.0315942764282227
    5. ' slicing' → logprob: -3.0315942764282227
    6. 's' → logprob: -4.281594276428223
    7. ' slice' → logprob: -5.531594276428223
    8. 'K' → logprob: -6.781594276428223
    9. ' [' → logprob: -7.406594276428223
    10. '[K' → logprob: -8.031594276428223

Token 488: 'page' (ID: 5342)
  Prédit: 'page'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'page' → logprob: -8.41866585687967e-06
    2. 'p' → logprob: -12.625008583068848
    3. 'Page' → logprob: -12.875008583068848
    4. 'pe' → logprob: -13.250008583068848
    5. ' page' → logprob: -15.250008583068848
    6. 'PAGE' → logprob: -15.500008583068848
    7. 'per' → logprob: -16.75000762939453
    8. 'tage' → logprob: -17.25000762939453
    9. 'pé' → logprob: -17.25000762939453
    10. '_page' → logprob: -18.00000762939453

Token 489: ' H' (ID: 487)
  Prédit: ' H'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' H' → logprob: -0.422195702791214
    2. 'H' → logprob: -1.2971956729888916
    3. '[' → logprob: -2.9221956729888916
    4. ' de' → logprob: -4.922195911407471
    5. '   ' → logprob: -5.172195911407471
    6. ' (' → logprob: -6.297195911407471
    7. '(H' → logprob: -7.547195911407471
    8. 'de' → logprob: -7.797195911407471
    9. ' [' → logprob: -8.047195434570312
    10. 's' → logprob: -8.297195434570312

Token 490: '[K' (ID: 137571)
  Prédit: '[K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[K' → logprob: -9.968312951968983e-06
    2. '[' → logprob: -11.875009536743164
    3. 'K' → logprob: -13.750009536743164
    4. ' [' → logprob: -13.875009536743164
    5. '[
' → logprob: -14.750009536743164
    6. '   ' → logprob: -15.875009536743164
    7. '[k' → logprob: -16.250009536743164
    8. '[N' → logprob: -17.000009536743164
    9. '```' → logprob: -17.250009536743164
    10. '(K' → logprob: -17.250009536743164

Token 491: ':' (ID: 25)
  Prédit: ':]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':]' → logprob: -0.002333309268578887
    2. ':].' → logprob: -6.627333164215088
    3. ':],' → logprob: -7.127333164215088
    4. ' :]' → logprob: -9.252333641052246
    5. ':' → logprob: -9.502333641052246
    6. ':]
' → logprob: -10.627333641052246
    7. ']' → logprob: -12.502333641052246
    8. ':]

' → logprob: -13.002333641052246
    9. ':])
' → logprob: -14.002333641052246
    10. ']:' → logprob: -14.127333641052246

Token 492: '].
' (ID: 49887)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']' → logprob: -0.013400206342339516
    2. '])' → logprob: -4.638400077819824
    3. '].' → logprob: -6.388400077819824
    4. ']
' → logprob: -7.263400077819824
    5. ']).' → logprob: -7.763400077819824
    6. '],' → logprob: -8.138400077819824
    7. ']:' → logprob: -9.013400077819824
    8. ' ]' → logprob: -9.013400077819824
    9. ']),' → logprob: -9.138400077819824
    10. ']

' → logprob: -9.763400077819824

Token 493: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.47637513279914856
    2. 'print' → logprob: -0.9763751029968262
    3. ' print' → logprob: -6.851375102996826
    4. 'sum' → logprob: -7.351375102996826
    5. '#' → logprob: -8.601375579833984
    6. '           ' → logprob: -9.226375579833984
    7. 'cost' → logprob: -9.351375579833984
    8. '        
' → logprob: -10.101375579833984
    9. 'for' → logprob: -10.101375579833984
    10. '   ' → logprob: -10.351375579833984

Token 494: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.052914828062057495
    2. '       ' → logprob: -3.67791485786438
    3. 'sum' → logprob: -4.177914619445801
    4. ' print' → logprob: -4.552914619445801
    5. ' sum' → logprob: -8.5529146194458
    6. '   ' → logprob: -9.0529146194458
    7. 'result' → logprob: -10.5529146194458
    8. '#' (adapté à ' #') → logprob: -10.6779146194458
    9. 'for' → logprob: -11.4279146194458
    10. '        
' → logprob: -12.6779146194458

Token 495: ' En' (ID: 2130)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.024976862594485283
    2. ' print' → logprob: -4.39997673034668
    3. '       ' → logprob: -4.64997673034668
    4. 'sum' → logprob: -6.14997673034668
    5. 'result' → logprob: -7.89997673034668
    6. 'answer' → logprob: -9.39997673034668
    7. '   ' → logprob: -10.02497673034668
    8. ' sum' → logprob: -10.39997673034668
    9. 'pr' → logprob: -10.39997673034668
    10. 'min' → logprob: -10.39997673034668

Token 496: ' Python' (ID: 26534)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.5375442504882812
    2. 'sum' → logprob: -1.0375442504882812
    3. 's' → logprob: -3.9125442504882812
    4. ' somme' → logprob: -4.787544250488281
    5. 'calcul' → logprob: -5.037544250488281
    6. '#' → logprob: -5.537544250488281
    7. 'som' → logprob: -5.787544250488281
    8. 'python' → logprob: -5.787544250488281
    9. 'suite' → logprob: -6.162544250488281
    10. ' sum' → logprob: -6.287544250488281

Token 497: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.004447920247912407
    2. 'print' → logprob: -6.629447937011719
    3. ' ,' → logprob: -6.754447937011719
    4. '       ' → logprob: -7.254447937011719
    5. ',
' → logprob: -7.879447937011719
    6. '#' → logprob: -8.004447937011719
    7. 'H' → logprob: -9.129447937011719
    8. '),' → logprob: -9.254447937011719
    9. '   ' → logprob: -10.004447937011719
    10. '           ' → logprob: -10.129447937011719

Token 498: ' H' (ID: 487)
  Prédit: 'on'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'on' → logprob: -0.9195541143417358
    2. 'sum' → logprob: -1.2945541143417358
    3. ' on' → logprob: -1.7945541143417358
    4. 'print' → logprob: -2.0445542335510254
    5. '#' → logprob: -4.919554233551025
    6. 'la' → logprob: -5.044554233551025
    7. ' la' → logprob: -5.669554233551025
    8. 'le' → logprob: -5.794554233551025
    9. '       ' → logprob: -5.919554233551025
    10. ' sum' → logprob: -6.169554233551025

Token 499: '[K' (ID: 137571)
  Prédit: '[K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[K' → logprob: -7.791440293658525e-05
    2. '[' → logprob: -9.750078201293945
    3. '[k' → logprob: -12.125078201293945
    4. 'K' → logprob: -12.250078201293945
    5. ' [' → logprob: -12.875078201293945
    6. '[
' → logprob: -13.750078201293945
    7. '=' → logprob: -14.375078201293945
    8. '[N' → logprob: -14.375078201293945
    9. '
' → logprob: -14.375078201293945
    10. '#' → logprob: -14.625078201293945

Token 500: ':]' (ID: 67377)
  Prédit: ':]'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':]' → logprob: -0.003701139474287629
    2. ':' → logprob: -7.003701210021973
    3. '[' → logprob: -7.378701210021973
    4. ']' → logprob: -7.378701210021973
    5. ' :]' → logprob: -7.503701210021973
    6. '[K' → logprob: -7.628701210021973
    7. 'K' → logprob: -8.628701210021973
    8. ':].' → logprob: -8.878701210021973
    9. ':],' → logprob: -9.378701210021973
    10. ':]
' → logprob: -10.628701210021973

Token 501: ' crée' (ID: 102256)
  Prédit: 'est'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'est' → logprob: -0.5965718030929565
    2. ' représente' → logprob: -1.5965718030929565
    3. ' est' → logprob: -2.471571922302246
    4. 's' → logprob: -3.596571922302246
    5. 'ren' → logprob: -3.721571922302246
    6. '#' → logprob: -4.346571922302246
    7. ' permet' → logprob: -4.596571922302246
    8. 'don' → logprob: -4.721571922302246
    9. '[' → logprob: -4.721571922302246
    10. 'sum' → logprob: -4.846571922302246

Token 502: ' une' (ID: 2463)
  Prédit: ' une'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' une' → logprob: -0.22559301555156708
    2. 'une' → logprob: -1.6005929708480835
    3. 'a' → logprob: -9.350592613220215
    4. 'un' → logprob: -10.600592613220215
    5. ''une' → logprob: -11.350592613220215
    6. 'la' → logprob: -11.475592613220215
    7. ' ' → logprob: -11.475592613220215
    8. ' a' → logprob: -11.725592613220215
    9. 'una' → logprob: -11.975592613220215
    10. ' la' → logprob: -12.100592613220215

Token 503: ' nouvelle' (ID: 24562)
  Prédit: 'liste'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'liste' → logprob: -0.16589298844337463
    2. 'list' → logprob: -2.290893077850342
    3. 'nou' → logprob: -3.540893077850342
    4. 'new' → logprob: -4.790893077850342
    5. 's' → logprob: -5.040893077850342
    6. ' liste' → logprob: -5.540893077850342
    7. ' nouvelle' → logprob: -5.665893077850342
    8. 'copy' → logprob: -8.915892601013184
    9. 'slice' → logprob: -9.415892601013184
    10. ' list' → logprob: -9.540892601013184

Token 504: ' liste' (ID: 31719)
  Prédit: 'liste'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'liste' → logprob: -0.5803048610687256
    2. ' liste' → logprob: -0.8303048610687256
    3. 'list' → logprob: -5.455305099487305
    4. ' list' → logprob: -9.955305099487305
    5. 'Liste' → logprob: -11.205305099487305
    6. '```' → logprob: -12.205305099487305
    7. 's' → logprob: -12.455305099487305
    8. ' ' → logprob: -12.705305099487305
    9. ' ' → logprob: -13.205305099487305
    10. '#' → logprob: -13.330305099487305

Token 505: ' à' (ID: 1221)
  Prédit: ' contenant'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' contenant' → logprob: -0.6026058197021484
    2. ' des' → logprob: -1.9776058197021484
    3. 'cont' → logprob: -2.7276058197021484
    4. ' avec' → logprob: -2.9776058197021484
    5. ' qui' → logprob: -3.3526058197021484
    6. '       ' → logprob: -3.7276058197021484
    7. ',' → logprob: -3.7276058197021484
    8. ' composée' → logprob: -3.8526058197021484
    9. ' à' → logprob: -4.227605819702148
    10. 'compr' → logprob: -4.477605819702148

Token 506: ' partir' (ID: 12100)
  Prédit: 'part'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'part' → logprob: -0.11300832778215408
    2. ' partir' → logprob: -2.2380082607269287
    3. 'tr' → logprob: -9.863008499145508
    4. 'par' → logprob: -10.613008499145508
    5. 'from' → logprob: -11.238008499145508
    6. '```' → logprob: -11.363008499145508
    7. 'index' → logprob: -11.738008499145508
    8. '[' → logprob: -11.863008499145508
    9. 'prendre' → logprob: -11.988008499145508
    10. 'p' → logprob: -11.988008499145508

Token 507: ' du' (ID: 1462)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.22719871997833252
    2. 'K' → logprob: -2.102198600769043
    3. ' l' → logprob: -2.852198600769043
    4. ' K' → logprob: -3.852198600769043
    5. 'H' → logprob: -7.102198600769043
    6. ' de' → logprob: -7.727198600769043
    7. 'de' → logprob: -8.477198600769043
    8. ' la' → logprob: -8.727198600769043
    9. 'la' → logprob: -8.727198600769043
    10. ' index' → logprob: -9.477198600769043

Token 508: ' (' (ID: 350)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.09108806401491165
    2. 'élé' → logprob: -3.591088056564331
    3. 'indice' → logprob: -3.591088056564331
    4. ' K' → logprob: -3.966088056564331
    5. 'index' → logprob: -4.84108829498291
    6. 'k' → logprob: -5.84108829498291
    7. 'H' → logprob: -6.71608829498291
    8. 'position' → logprob: -7.96608829498291
    9. '```' → logprob: -9.46608829498291
    10. ' index' → logprob: -9.46608829498291

Token 509: 'K' (ID: 42)
  Prédit: 'K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.004449582193046808
    2. ' K' → logprob: -5.879449367523193
    3. 'indice' → logprob: -6.754449367523193
    4. 'index' → logprob: -8.504449844360352
    5. 'H' → logprob: -9.129449844360352
    6. '   ' → logprob: -9.879449844360352
    7. ' ' → logprob: -10.629449844360352
    8. ' indice' → logprob: -10.879449844360352
    9. ' index' → logprob: -11.129449844360352
    10. 'k' → logprob: -11.254449844360352

Token 510: '+' (ID: 10)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.8335059881210327
    2. ']' → logprob: -1.2085059881210327
    3. ')' → logprob: -1.9585059881210327
    4. ':]' → logprob: -2.3335061073303223
    5. '+' → logprob: -4.833506107330322
    6. ':)' → logprob: -5.083506107330322
    7. ' :]' → logprob: -5.458506107330322
    8. ' )' → logprob: -5.833506107330322
    9. '])' → logprob: -5.958506107330322
    10. 'index' → logprob: -6.708506107330322

Token 511: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.872999370098114
    2. 'th' → logprob: -1.6229994297027588
    3. 'K' → logprob: -1.7479994297027588
    4. ')' → logprob: -2.747999429702759
    5. 'ième' → logprob: -3.247999429702759
    6. '```' → logprob: -3.497999429702759
    7. 'ème' → logprob: -3.622999429702759
    8. ' ' → logprob: -4.49799919128418
    9. '0' → logprob: -4.87299919128418
    10. 'indice' → logprob: -5.24799919128418

Token 512: ')-' (ID: 14080)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.08890381455421448
    2. ':)' → logprob: -3.3389039039611816
    3. ':' → logprob: -3.8389039039611816
    4. 'ème' → logprob: -4.088903903961182
    5. 'e' → logprob: -5.838903903961182
    6. ']' → logprob: -6.213903903961182
    7. ' )' → logprob: -6.338903903961182
    8. '])' → logprob: -6.463903903961182
    9. ')-' → logprob: -7.338903903961182
    10. ':]' → logprob: -8.213903427124023

Token 513: 'ième' (ID: 41126)
  Prédit: 'ème'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ème' → logprob: -0.922314465045929
    2. 'indice' → logprob: -1.1723144054412842
    3. 'index' → logprob: -1.6723144054412842
    4. 'ième' → logprob: -2.922314405441284
    5. 'élé' → logprob: -4.297314643859863
    6. ' index' → logprob: -4.297314643859863
    7. '```' → logprob: -4.922314643859863
    8. 'ieme' → logprob: -5.422314643859863
    9. 'i' → logprob: -5.672314643859863
    10. ' indice' → logprob: -6.297314643859863

Token 514: ' élément' (ID: 99627)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.021200472488999367
    2. ' élément' → logprob: -3.89620041847229
    3. ' ' → logprob: -8.771200180053711
    4. ' ' → logprob: -9.146200180053711
    5. ' él' → logprob: -9.646200180053711
    6. 'element' → logprob: -9.646200180053711
    7. ' position' → logprob: -9.896200180053711
    8. 'él' → logprob: -10.021200180053711
    9. 'é' → logprob: -10.271200180053711
    10. ' éléments' → logprob: -10.396200180053711

Token 515: ' jusqu' (ID: 21961)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.5543752908706665
    2. '   ' → logprob: -1.3043752908706665
    3. ' (' → logprob: -3.054375171661377
    4. 's' → logprob: -3.554375171661377
    5. ' jusqu' → logprob: -3.554375171661377
    6. ',' → logprob: -3.804375171661377
    7. 'de' → logprob: -4.429375171661377
    8. '.' → logprob: -6.054375171661377
    9. '       ' → logprob: -6.429375171661377
    10. '[' → logprob: -6.554375171661377

Token 516: ''au' (ID: 63689)
  Prédit: ''à'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''à' → logprob: -0.03880538418889046
    2. 'à' → logprob: -3.2888054847717285
    3. ''au' → logprob: -7.9138054847717285
    4. 'au' → logprob: -8.41380500793457
    5. '’à' → logprob: -8.66380500793457
    6. '#' → logprob: -13.91380500793457
    7. ''a' → logprob: -14.28880500793457
    8. 'a' → logprob: -14.41380500793457
    9. ' à' → logprob: -15.03880500793457
    10. '-à' → logprob: -15.28880500793457

Token 517: ' dernier' (ID: 27982)
  Prédit: 'la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'la' → logprob: -1.0308265686035156
    2. 'dern' → logprob: -1.1558265686035156
    3. 'à' → logprob: -2.1558265686035156
    4. 'fin' → logprob: -2.4058265686035156
    5. 'a' → logprob: -3.2808265686035156
    6. 'len' → logprob: -3.4058265686035156
    7. '#' → logprob: -3.7808265686035156
    8. 'end' → logprob: -4.905826568603516
    9. 'bout' → logprob: -5.655826568603516
    10. 'H' → logprob: -6.030826568603516

Token 518: '.
' (ID: 558)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']' → logprob: -0.2208356112241745
    2. ',' → logprob: -2.7208356857299805
    3. '   ' → logprob: -3.3458356857299805
    4. ']
' → logprob: -4.0958356857299805
    5. '.' → logprob: -4.2208356857299805
    6. 's' → logprob: -4.7208356857299805
    7. 'sum' → logprob: -4.8458356857299805
    8. 'H' → logprob: -5.3458356857299805
    9. ' H' → logprob: -5.4708356857299805
    10. '(' → logprob: -5.5958356857299805

Token 519: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.22295451164245605
    2. 'print' → logprob: -1.847954511642456
    3. 'sum' → logprob: -3.222954511642456
    4. ' print' → logprob: -7.097954750061035
    5. '   ' → logprob: -7.597954750061035
    6. ' sum' → logprob: -7.972954750061035
    7. '        
' → logprob: -8.097954750061035
    8. '           ' → logprob: -8.847954750061035
    9. '        ' → logprob: -10.222954750061035
    10. '#' → logprob: -10.472954750061035

Token 520: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.6342014670372009
    2. 'sum' → logprob: -1.2592015266418457
    3. ' print' → logprob: -2.1342015266418457
    4. ' sum' → logprob: -3.0092015266418457
    5. '       ' → logprob: -4.134201526641846
    6. 'min' → logprob: -7.259201526641846
    7. 'max' → logprob: -7.634201526641846
    8. '   ' → logprob: -8.259201049804688
    9. ' min' → logprob: -8.634201049804688
    10. ' max' → logprob: -9.009201049804688

Token 521: ' On' (ID: 2160)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.08325520157814026
    2. 'sum' → logprob: -2.9582552909851074
    3. ' print' → logprob: -3.7082552909851074
    4. ' sum' → logprob: -6.208255290985107
    5. '       ' → logprob: -6.708255290985107
    6. '   ' → logprob: -8.83325481414795
    7. 'result' → logprob: -10.58325481414795
    8. 'min' → logprob: -11.95825481414795
    9. 'answer' → logprob: -12.08325481414795
    10. '    ' → logprob: -12.20825481414795

Token 522: ' applique' (ID: 180579)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.029262520372867584
    2. ' print' → logprob: -3.7792625427246094
    3. 'sum' → logprob: -5.279262542724609
    4. ' sum' → logprob: -7.404262542724609
    5. 'for' → logprob: -9.52926254272461
    6. 'min' → logprob: -9.65426254272461
    7. 's' → logprob: -10.02926254272461
    8. ' somme' → logprob: -10.02926254272461
    9. 'pr' → logprob: -10.90426254272461
    10. '#' → logprob: -11.52926254272461

Token 523: ' la' (ID: 557)
  Prédit: 'sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'sum' → logprob: -0.006722471676766872
    2. ' sum' → logprob: -5.006722450256348
    3. '   ' → logprob: -12.756722450256348
    4. 'print' → logprob: -12.881722450256348
    5. '(sum' → logprob: -14.131722450256348
    6. '=sum' → logprob: -14.631722450256348
    7. '```' → logprob: -15.631722450256348
    8. '	sum' → logprob: -16.381723403930664
    9. '
' → logprob: -16.506723403930664
    10. 'min' → logprob: -16.881723403930664

Token 524: ' fonction' (ID: 17610)
  Prédit: 'sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'sum' → logprob: -0.00020187153131701052
    2. 'print' → logprob: -8.625202178955078
    3. 'min' → logprob: -11.125202178955078
    4. ' sum' → logprob: -12.000202178955078
    5. 'max' → logprob: -14.500202178955078
    6. '=sum' → logprob: -14.500202178955078
    7. '(sum' → logprob: -16.500202178955078
    8. '`' → logprob: -17.125202178955078
    9. 'summ' → logprob: -17.250202178955078
    10. '   ' → logprob: -17.500202178955078

Token 525: ' sum' (ID: 4215)
  Prédit: 'sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sum' → logprob: -0.0003589416155591607
    2. 'print' → logprob: -8.500358581542969
    3. ' sum' → logprob: -8.875358581542969
    4. 'min' → logprob: -11.125358581542969
    5. '=sum' → logprob: -14.375358581542969
    6. '(sum' → logprob: -15.625358581542969
    7. '   ' → logprob: -16.50035858154297
    8. 'max' → logprob: -17.00035858154297
    9. ' print' → logprob: -18.00035858154297
    10. '`' → logprob: -18.12535858154297

Token 526: '()' (ID: 416)
  Prédit: '(H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(H' → logprob: -0.36336904764175415
    2. '()' → logprob: -1.8633689880371094
    3. '(' → logprob: -1.9883689880371094
    4. '(sum' → logprob: -4.488368988037109
    5. 'sum' → logprob: -6.863368988037109
    6. '(
' → logprob: -8.73836898803711
    7. '(...)' → logprob: -9.36336898803711
    8. '(

' → logprob: -10.36336898803711
    9. ')' → logprob: -12.11336898803711
    10. '(s' → logprob: -12.23836898803711

Token 527: ' sur' (ID: 1512)
  Prédit: '(H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(H' → logprob: -0.18114309012889862
    2. '(' → logprob: -1.806143045425415
    3. '(
' → logprob: -6.681143283843994
    4. '()' → logprob: -9.306142807006836
    5. '(sum' → logprob: -10.681142807006836
    6. '(

' → logprob: -11.181142807006836
    7. '([' → logprob: -12.931142807006836
    8. '(
' → logprob: -13.556142807006836
    9. 'sum' → logprob: -13.556142807006836
    10. 'to' → logprob: -13.556142807006836

Token 528: ' cette' (ID: 7696)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.10065153241157532
    2. ' H' → logprob: -2.350651502609253
    3. '(H' → logprob: -7.975651741027832
    4. ' cette' → logprob: -10.225651741027832
    5. ' la' → logprob: -10.475651741027832
    6. 'l' → logprob: -11.600651741027832
    7. 'ces' → logprob: -12.225651741027832
    8. 'la' → logprob: -12.475651741027832
    9. '   ' → logprob: -12.850651741027832
    10. ' ces' → logprob: -12.975651741027832

Token 529: ' sous' (ID: 14487)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.695263683795929
    2. ' H' → logprob: -0.945263683795929
    3. '[' → logprob: -2.945263624191284
    4. ' liste' → logprob: -4.195263862609863
    5. 'slice' → logprob: -4.445263862609863
    6. ' slice' → logprob: -4.945263862609863
    7. 'liste' → logprob: -5.320263862609863
    8. 's' → logprob: -5.445263862609863
    9. ' portion' → logprob: -5.695263862609863
    10. ' list' → logprob: -6.320263862609863

Token 530: '-l' (ID: 2887)
  Prédit: '(H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(H' → logprob: -0.7986138463020325
    2. '[' → logprob: -1.7986137866973877
    3. 'liste' → logprob: -2.0486137866973877
    4. '(' → logprob: -2.1736137866973877
    5. 'list' → logprob: -2.6736137866973877
    6. '(
' → logprob: -3.5486137866973877
    7. 'Liste' → logprob: -4.548614025115967
    8. '_' → logprob: -5.173614025115967
    9. 'H' → logprob: -5.548614025115967
    10. '   ' → logprob: -5.923614025115967

Token 531: 'iste' (ID: 4872)
  Prédit: 'iste'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iste' → logprob: -0.12960544228553772
    2. 'ist' → logprob: -2.379605531692505
    3. 'H' → logprob: -4.629605293273926
    4. '[' → logprob: -5.504605293273926
    5. 'en' → logprob: -5.754605293273926
    6. 'is' → logprob: -6.129605293273926
    7. 'e' → logprob: -6.129605293273926
    8. '   ' → logprob: -6.504605293273926
    9. 'liste' → logprob: -7.254605293273926
    10. 'ista' → logprob: -7.254605293273926

Token 532: ' afin' (ID: 22217)
  Prédit: '(H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(H' → logprob: -0.009076463058590889
    2. '(' → logprob: -4.7590765953063965
    3. '(
' → logprob: -9.009076118469238
    4. '()' → logprob: -9.009076118469238
    5. '   ' → logprob: -9.259076118469238
    6. ')' → logprob: -10.009076118469238
    7. '(...)' → logprob: -10.634076118469238
    8. '.' → logprob: -10.884076118469238
    9. ',' → logprob: -11.384076118469238
    10. '       ' → logprob: -12.259076118469238

Token 533: ' de' (ID: 334)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6228054165840149
    2. 'de' → logprob: -1.2478053569793701
    3. 'd' → logprob: -2.37280535697937
    4. ' de' → logprob: -2.74780535697937
    5. ' d' → logprob: -4.372805595397949
    6. '#' → logprob: -6.247805595397949
    7. ')' → logprob: -7.122805595397949
    8. '=' → logprob: -7.247805595397949
    9. '       ' → logprob: -7.497805595397949
    10. '  ' → logprob: -7.747805595397949

Token 534: ' calcul' (ID: 7559)
  Prédit: ' calcul'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' calcul' → logprob: -0.0711773931980133
    2. 'calcul' → logprob: -2.8211774826049805
    3. 'cal' → logprob: -5.3211774826049805
    4. 'ob' → logprob: -7.1961774826049805
    5. ' calc' → logprob: -7.1961774826049805
    6. ' obtenir' → logprob: -7.1961774826049805
    7. 'sum' → logprob: -7.8211774826049805
    8. 'calculate' → logprob: -8.19617748260498
    9. 'calc' → logprob: -8.32117748260498
    10. ' calculate' → logprob: -8.94617748260498

Token 535: 'er' (ID: 259)
  Prédit: 'er'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.0003567959647625685
    2. 'ler' → logprob: -8.000356674194336
    3. 'rer' → logprob: -12.000356674194336
    4. 'uler' → logprob: -12.000356674194336
    5. '#' → logprob: -12.250356674194336
    6. 'l' → logprob: -13.875356674194336
    7. 'ser' → logprob: -14.375356674194336
    8. '```' → logprob: -14.750356674194336
    9. 'erer' → logprob: -14.875356674194336
    10. 'r' → logprob: -15.000356674194336

Token 536: ' la' (ID: 557)
  Prédit: 'sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sum' → logprob: -0.515542209148407
    2. 'la' → logprob: -1.2655422687530518
    3. ' la' → logprob: -2.3905422687530518
    4. ' sum' → logprob: -3.8905422687530518
    5. '   ' → logprob: -5.515542030334473
    6. '(sum' → logprob: -6.140542030334473
    7. 'l' → logprob: -6.265542030334473
    8. '       ' → logprob: -8.140542030334473
    9. '=sum' → logprob: -9.640542030334473
    10. 'les' → logprob: -9.890542030334473

Token 537: ' somme' (ID: 64484)
  Prédit: 'sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sum' → logprob: -0.09325677156448364
    2. ' sum' → logprob: -2.718256711959839
    3. 'co' → logprob: -4.218256950378418
    4. 's' → logprob: -6.093256950378418
    5. ' somme' → logprob: -6.468256950378418
    6. 'total' → logprob: -6.593256950378418
    7. ' coût' → logprob: -6.718256950378418
    8. ' total' → logprob: -7.093256950378418
    9. 'cout' → logprob: -8.093256950378418
    10. 'som' → logprob: -8.093256950378418

Token 538: ' de' (ID: 334)
  Prédit: '(H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(H' → logprob: -0.3042129874229431
    2. '(' → logprob: -1.429213047027588
    3. '(
' → logprob: -4.179213047027588
    4. '   ' → logprob: -5.429213047027588
    5. 'des' → logprob: -7.179213047027588
    6. ' des' → logprob: -7.429213047027588
    7. ')' → logprob: -8.05421257019043
    8. '(...)' → logprob: -8.55421257019043
    9. 'de' → logprob: -8.67921257019043
    10. '()' → logprob: -8.67921257019043

Token 539: ' tous' (ID: 10688)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.1231570765376091
    2. 'ces' → logprob: -2.623157024383545
    3. ' H' → logprob: -3.498157024383545
    4. 'les' → logprob: -5.498157024383545
    5. ' ces' → logprob: -6.123157024383545
    6. 'la' → logprob: -6.248157024383545
    7. 'l' → logprob: -6.248157024383545
    8. ' tous' → logprob: -7.123157024383545
    9. ' la' → logprob: -7.373157024383545
    10. '(H' → logprob: -7.498157024383545

Token 540: ' ses' (ID: 6707)
  Prédit: 'les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'les' → logprob: -0.3214603662490845
    2. 'ces' → logprob: -2.196460247039795
    3. ' les' → logprob: -2.696460247039795
    4. '(H' → logprob: -2.696460247039795
    5. 'H' → logprob: -4.196460247039795
    6. 'élé' → logprob: -5.321460247039795
    7. ' ces' → logprob: -6.071460247039795
    8. ' H' → logprob: -6.196460247039795
    9. 'l' → logprob: -6.696460247039795
    10. 'la' → logprob: -7.071460247039795

Token 541: ' éléments' (ID: 57375)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.001955394633114338
    2. ' éléments' → logprob: -6.501955509185791
    3. 'elements' → logprob: -8.251955032348633
    4. 'é' → logprob: -9.001955032348633
    5. 'H' → logprob: -10.626955032348633
    6. 'val' → logprob: -11.126955032348633
    7. 'él' → logprob: -11.751955032348633
    8. ' elements' → logprob: -12.126955032348633
    9. ' H' → logprob: -12.126955032348633
    10. 'elem' → logprob: -12.626955032348633

Token 542: '.
' (ID: 558)
  Prédit: '(H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(H' → logprob: -0.03188372775912285
    2. '       ' → logprob: -3.781883716583252
    3. '   ' → logprob: -5.406883716583252
    4. '(' → logprob: -5.781883716583252
    5. ')' → logprob: -7.531883716583252
    6. '.' → logprob: -8.15688419342041
    7. ',' → logprob: -9.28188419342041
    8. '(
' → logprob: -10.28188419342041
    9. '           ' → logprob: -10.65688419342041
    10. '               ' → logprob: -11.03188419342041

Token 543: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.14427778124809265
    2. 'print' → logprob: -2.019277811050415
    3. ' print' → logprob: -6.644277572631836
    4. 'sum' → logprob: -8.519277572631836
    5. '           ' → logprob: -10.519277572631836
    6. '   ' → logprob: -11.019277572631836
    7. ' sum' → logprob: -11.269277572631836
    8. '(' → logprob: -11.519277572631836
    9. ')' → logprob: -11.644277572631836
    10. '        
' → logprob: -12.769277572631836

Token 544: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.39121463894844055
    2. 'print' → logprob: -1.1412146091461182
    3. 'result' → logprob: -6.016214847564697
    4. ' print' → logprob: -6.641214847564697
    5. 'sum' → logprob: -8.141214370727539
    6. '           ' → logprob: -8.766214370727539
    7. 'cost' → logprob: -10.266214370727539
    8. 'total' → logprob: -10.641214370727539
    9. 'res' → logprob: -11.391214370727539
    10. ' result' → logprob: -11.516214370727539

Token 545: ' Enfin' (ID: 85274)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.009690099395811558
    2. '       ' → logprob: -5.134690284729004
    3. ' print' → logprob: -5.759690284729004
    4. 'result' → logprob: -7.634690284729004
    5. 'cost' → logprob: -10.134690284729004
    6. 'sum' → logprob: -10.509690284729004
    7. 'total' → logprob: -11.009690284729004
    8. 'res' → logprob: -11.509690284729004
    9. 'cout' → logprob: -11.884690284729004
    10. 'answer' → logprob: -12.509690284729004

Token 546: ',' (ID: 11)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.09996055066585541
    2. 'print' → logprob: -2.8499605655670166
    3. ',' → logprob: -3.9749605655670166
    4. ' print' → logprob: -4.2249603271484375
    5. '()' → logprob: -6.5999603271484375
    6. ' on' → logprob: -7.0999603271484375
    7. '   ' → logprob: -7.8499603271484375
    8. '(' → logprob: -7.8499603271484375
    9. '(print' → logprob: -8.349960327148438
    10. 'on' → logprob: -9.099960327148438

Token 547: ' on' (ID: 402)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.12693104147911072
    2. 'print' → logprob: -2.1269309520721436
    3. ' ' → logprob: -13.626931190490723
    4. '       ' → logprob: -14.126931190490723
    5. ' sum' → logprob: -14.626931190490723
    6. '(print' → logprob: -15.376931190490723
    7. '   ' → logprob: -16.126930236816406
    8. 'sum' → logprob: -17.001930236816406
    9. ' prin' → logprob: -17.251930236816406
    10. '    ' → logprob: -17.251930236816406

Token 548: ' affiche' (ID: 127479)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0004913145676255226
    2. ' print' → logprob: -7.625491142272949
    3. '   ' → logprob: -13.37549114227295
    4. '.print' → logprob: -14.50049114227295
    5. '#print' → logprob: -15.25049114227295
    6. '_print' → logprob: -15.75049114227295
    7. 'continue' → logprob: -15.75049114227295
    8. '       ' → logprob: -15.75049114227295
    9. '#' → logprob: -16.125492095947266
    10. '(print' → logprob: -16.625492095947266

Token 549: ' le' (ID: 505)
  Prédit: '(sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(sum' → logprob: -0.051893990486860275
    2. 'sum' → logprob: -3.551893949508667
    3. 'la' → logprob: -3.926893949508667
    4. '(' → logprob: -6.301894187927246
    5. ' la' → logprob: -9.551894187927246
    6. ' cette' → logprob: -9.676894187927246
    7. 'l' → logprob: -9.676894187927246
    8. '   ' → logprob: -10.301894187927246
    9. 'this' → logprob: -10.426894187927246
    10. 'the' → logprob: -10.926894187927246

Token 550: ' résultat' (ID: 62556)
  Prédit: 'sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sum' → logprob: -0.415592759847641
    2. ' sum' → logprob: -2.165592670440674
    3. 'result' → logprob: -2.290592670440674
    4. ' résultat' → logprob: -3.040592670440674
    5. 's' → logprob: -3.665592670440674
    6. ' result' → logprob: -4.040592670440674
    7. 'rés' → logprob: -4.290592670440674
    8. '(sum' → logprob: -4.415592670440674
    9. ' resultat' → logprob: -5.665592670440674
    10. ' somme' → logprob: -6.415592670440674

Token 551: ' avec' (ID: 3937)
  Prédit: '(sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(sum' → logprob: -0.03653630241751671
    2. '       ' → logprob: -3.66153621673584
    3. '(' → logprob: -4.78653621673584
    4. 'sum' → logprob: -7.16153621673584
    5. '   ' → logprob: -7.28653621673584
    6. '(print' → logprob: -8.91153621673584
    7. '(
' → logprob: -10.41153621673584
    8. ',' → logprob: -10.41153621673584
    9. 'print' → logprob: -10.66153621673584
    10. '(s' → logprob: -10.66153621673584

Token 552: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0009231308358721435
    2. ' print' → logprob: -7.000923156738281
    3. '(print' → logprob: -11.625923156738281
    4. '   ' → logprob: -13.125923156738281
    5. 'la' → logprob: -15.000923156738281
    6. 'sum' → logprob: -15.750923156738281
    7. ' la' → logprob: -16.50092315673828
    8. '```' → logprob: -16.50092315673828
    9. '       ' → logprob: -18.37592315673828
    10. '(' → logprob: -18.50092315673828

Token 553: '().
' (ID: 58434)
  Prédit: '(sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(sum' → logprob: -0.023843972012400627
    2. '(' → logprob: -3.773844003677368
    3. '(
' → logprob: -7.773843765258789
    4. '(H' → logprob: -9.523843765258789
    5. '()' → logprob: -10.273843765258789
    6. 'sum' → logprob: -10.523843765258789
    7. '   ' → logprob: -10.648843765258789
    8. '(s' → logprob: -12.023843765258789
    9. '       ' → logprob: -12.648843765258789
    10. '((' → logprob: -13.023843765258789

Token 554: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.018238674849271774
    2. 'print' → logprob: -4.018238544464111
    3. ' print' → logprob: -9.39323902130127
    4. '           ' → logprob: -12.76823902130127
    5. '   ' → logprob: -13.14323902130127
    6. '```' → logprob: -15.01823902130127
    7. '      ' → logprob: -15.89323902130127
    8. '     ' → logprob: -16.643238067626953
    9. '	print' → logprob: -17.268238067626953
    10. '	' → logprob: -17.268238067626953

Token 555: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.008819721639156342
    2. '       ' → logprob: -4.758819580078125
    3. ' print' → logprob: -8.508819580078125
    4. '   ' → logprob: -12.633819580078125
    5. '	print' → logprob: -16.258819580078125
    6. '           ' → logprob: -17.008819580078125
    7. 'sum' → logprob: -17.258819580078125
    8. '```' → logprob: -17.258819580078125
    9. ' ' → logprob: -18.133819580078125
    10. '     ' → logprob: -18.508819580078125

Token 556: '(sum' (ID: 45528)
  Prédit: '(sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(sum' → logprob: -0.003179259831085801
    2. '(' → logprob: -5.75317907333374
    3. 'sum' → logprob: -14.128179550170898
    4. '(s' → logprob: -14.753179550170898
    5. ' (' → logprob: -14.878179550170898
    6. '((' → logprob: -17.6281795501709
    7. ' sum' → logprob: -17.7531795501709
    8. '(
' → logprob: -18.0031795501709
    9. '=sum' → logprob: -18.7531795501709
    10. ',sum' → logprob: -19.5031795501709

Token 557: '(H' (ID: 20904)
  Prédit: '(H'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(H' → logprob: -0.0005537479883059859
    2. '(' → logprob: -7.500553607940674
    3. ')' → logprob: -14.375554084777832
    4. 'H' → logprob: -15.750554084777832
    5. '(
' → logprob: -16.750553131103516
    6. '()' → logprob: -18.500553131103516
    7. ' (' → logprob: -18.625553131103516
    8. '(

' → logprob: -19.000553131103516
    9. '(K' → logprob: -19.250553131103516
    10. '((' → logprob: -19.375553131103516

Token 558: '[K' (ID: 137571)
  Prédit: '[K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[K' → logprob: -4.143808109802194e-05
    2. '[' → logprob: -10.125041007995605
    3. ' [' → logprob: -13.875041007995605
    4. '[k' → logprob: -15.250041007995605
    5. '(K' → logprob: -16.750041961669922
    6. '[
' → logprob: -16.875041961669922
    7. 'K' → logprob: -17.000041961669922
    8. ')[' → logprob: -17.125041961669922
    9. '   ' → logprob: -18.500041961669922
    10. '[N' → logprob: -18.750041961669922

Token 559: ':]' (ID: 67377)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0005594660760834813
    2. ':]' → logprob: -8.12555980682373
    3. ']))' → logprob: -8.25055980682373
    4. ']:' → logprob: -14.37555980682373
    5. '[' → logprob: -14.87555980682373
    6. ' :' → logprob: -15.00055980682373
    7. ':],' → logprob: -15.75055980682373
    8. '']))' → logprob: -15.87555980682373
    9. '"]))' → logprob: -16.250558853149414
    10. '：' → logprob: -16.250558853149414

Token 560: '))

' (ID: 9746)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0019424419151619077
    2. ')' → logprob: -6.2519426345825195
    3. ')))' → logprob: -11.50194263458252
    4. '))
' → logprob: -12.75194263458252
    5. '   ' → logprob: -15.00194263458252
    6. ' ))' → logprob: -15.25194263458252
    7. '()))' → logprob: -16.501941680908203
    8. ')
' → logprob: -16.876941680908203
    9. ')}' → logprob: -17.626941680908203
    10. '])' → logprob: -18.001941680908203

Token 561: '#' (ID: 2)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 562: ' Ce' (ID: 14228)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.31399357318878174
    2. 'main' → logprob: -1.3139935731887817
    3. ' main' → logprob: -8.563993453979492
    4. '
' → logprob: -8.688993453979492
    5. '#' → logprob: -8.813993453979492
    6. '(main' → logprob: -9.188993453979492
    7. ' if' → logprob: -9.438993453979492
    8. '\n' → logprob: -11.313993453979492
    9. '```' → logprob: -12.188993453979492
    10. '\' → logprob: -12.313993453979492

Token 563: ' bloc' (ID: 51218)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.003400505520403385
    2. ' if' → logprob: -6.2534003257751465
    3. '
' → logprob: -7.6284003257751465
    4. '#' → logprob: -7.7534003257751465
    5. ' main' → logprob: -8.503400802612305
    6. 'main' → logprob: -9.503400802612305
    7. '

' → logprob: -9.628400802612305
    8. '\' → logprob: -9.753400802612305
    9. '```' → logprob: -10.503400802612305
    10. '(main' → logprob: -10.503400802612305

Token 564: ' est' (ID: 893)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.005982005037367344
    2. ' if' → logprob: -5.505981922149658
    3. '
' → logprob: -6.380981922149658
    4. '

' → logprob: -9.755982398986816
    5. '_' → logprob: -10.380982398986816
    6. '#' → logprob: -10.505982398986816
    7. '_if' → logprob: -11.005982398986816
    8. '<|end|>' → logprob: -11.130982398986816
    9. '```' → logprob: -11.255982398986816
    10. ' 
' → logprob: -11.755982398986816

Token 565: ' une' (ID: 2463)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.8329077959060669
    2. ' utilisé' → logprob: -1.582907795906067
    3. ' placé' → logprob: -2.7079076766967773
    4. ' souvent' → logprob: -2.8329076766967773
    5. ' l' → logprob: -2.8329076766967773
    6. ' destiné' → logprob: -3.5829076766967773
    7. ' la' → logprob: -3.9579076766967773
    8. 'l' → logprob: -4.207907676696777
    9. 'prot' → logprob: -4.457907676696777
    10. ' le' → logprob: -4.707907676696777

Token 566: ' convention' (ID: 39395)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.6997981071472168
    2. ' standard' → logprob: -2.199798107147217
    3. 'n' → logprob: -2.449798107147217
    4. 'idi' → logprob: -2.574798107147217
    5. '
' → logprob: -2.824798107147217
    6. 'standard' → logprob: -3.324798107147217
    7. 'v' → logprob: -3.949798107147217
    8. 's' → logprob: -4.324798107147217
    9. '__' → logprob: -4.449798107147217
    10. ' if' → logprob: -4.699798107147217

Token 567: ' en' (ID: 469)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.09794513881206512
    2. 'if' → logprob: -2.847945213317871
    3. '

' → logprob: -3.347945213317871
    4. ' if' → logprob: -9.347945213317871
    5. '
' → logprob: -10.347945213317871
    6. ' 
' → logprob: -11.347945213317871
    7. '  
' → logprob: -11.347945213317871
    8. '
    
' → logprob: -11.347945213317871
    9. '```' → logprob: -11.847945213317871
    10. '\n' → logprob: -12.097945213317871

Token 568: ' Python' (ID: 26534)
  Prédit: 'Python'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Python' → logprob: -0.13885366916656494
    2. 'python' → logprob: -2.3888535499572754
    3. ' Python' → logprob: -3.6388535499572754
    4. '__' → logprob: -5.388853549957275
    5. '```' → logprob: -5.513853549957275
    6. '_python' → logprob: -6.888853549957275
    7. 'if' → logprob: -7.013853549957275
    8. '.py' → logprob: -7.263853549957275
    9. ' python' → logprob: -8.388854026794434
    10. 'py' → logprob: -9.888854026794434

Token 569: ' pour' (ID: 1930)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.04908404499292374
    2. '

' → logprob: -3.049083948135376
    3. 'if' → logprob: -7.924084186553955
    4. '
' → logprob: -9.049083709716797
    5. '\n' → logprob: -12.299083709716797
    6. '
    
' → logprob: -12.424083709716797
    7. '```' → logprob: -13.424083709716797
    8. '
 
' → logprob: -13.549083709716797
    9. '  
' → logprob: -13.674083709716797
    10. ' 
' → logprob: -13.799083709716797

Token 570: ' s' (ID: 265)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.018563097342848778
    2. ' if' → logprob: -4.393563270568848
    3. '```' → logprob: -6.018563270568848
    4. '
' → logprob: -6.268563270568848
    5. '#' → logprob: -7.643563270568848
    6. 'pro' → logprob: -7.768563270568848
    7. 'mettre' → logprob: -8.893563270568848
    8. ' protéger' → logprob: -9.393563270568848
    9. ' garantir' → logprob: -9.643563270568848
    10. 'une' → logprob: -10.143563270568848

Token 571: ''assurer' (ID: 193756)
  Prédit: ''assurer'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''assurer' → logprob: -0.8046698570251465
    2. 'if' → logprob: -1.3046698570251465
    3. 'i' → logprob: -1.6796698570251465
    4. ''il' → logprob: -3.1796698570251465
    5. '```' → logprob: -3.5546698570251465
    6. 'ur' → logprob: -4.4296698570251465
    7. 'urtout' → logprob: -6.1796698570251465
    8. 'u' → logprob: -6.4296698570251465
    9. 'avoir' → logprob: -6.5546698570251465
    10. ''''' → logprob: -6.8046698570251465

Token 572: ' que' (ID: 661)
  Prédit: ' que'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.021113403141498566
    2. 'que' → logprob: -4.146113395690918
    3. 'if' → logprob: -5.521113395690918
    4. ':' → logprob: -7.771113395690918
    5. ' if' → logprob: -8.021113395690918
    6. ' that' → logprob: -8.771113395690918
    7. '```' → logprob: -9.896113395690918
    8. '#' → logprob: -10.646113395690918
    9. '__' → logprob: -10.896113395690918
    10. 'that' → logprob: -11.521113395690918

Token 573: ' le' (ID: 505)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.1882619857788086
    2. '__' → logprob: -2.0632619857788086
    3. 'le' → logprob: -4.188261985778809
    4. ' le' → logprob: -4.313261985778809
    5. ' if' → logprob: -5.313261985778809
    6. '```' → logprob: -5.438261985778809
    7. 'la' → logprob: -6.313261985778809
    8. ' __' → logprob: -6.563261985778809
    9. ' la' → logprob: -6.688261985778809
    10. '_le' → logprob: -7.188261985778809

Token 574: ' code' (ID: 3490)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.5287296175956726
    2. 'if' → logprob: -0.9037296175956726
    3. '```' → logprob: -5.778729438781738
    4. '
' → logprob: -7.028729438781738
    5. ' __' → logprob: -7.153729438781738
    6. ' if' → logprob: -7.528729438781738
    7. '_' → logprob: -9.028729438781738
    8. '`' → logprob: -10.778729438781738
    9. '``' → logprob: -11.028729438781738
    10. 'n' → logprob: -11.403729438781738

Token 575: ' suivant' (ID: 68705)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.022380881011486053
    2. ' if' → logprob: -4.397380828857422
    3. '
' → logprob: -5.772380828857422
    4. '```' → logprob: -6.272380828857422
    5. '_' → logprob: -7.022380828857422
    6. '#' → logprob: -7.147380828857422
    7. ' ' → logprob: -7.772380828857422
    8. '_if' → logprob: -7.897380828857422
    9. 's' → logprob: -8.147380828857422
    10. 'n' → logprob: -8.147380828857422

Token 576: ' s' (ID: 265)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.16458870470523834
    2. '
' → logprob: -3.039588689804077
    3. '```' → logprob: -3.164588689804077
    4. '#' → logprob: -3.664588689804077
    5. ' if' → logprob: -3.789588689804077
    6. '

' → logprob: -6.789588928222656
    7. 's' → logprob: -6.914588928222656
    8. '_' → logprob: -6.914588928222656
    9. '   
' → logprob: -7.039588928222656
    10. ' soit' → logprob: -7.039588928222656

Token 577: ''ex' (ID: 23472)
  Prédit: ''ex'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''ex' → logprob: -0.745884358882904
    2. 'if' → logprob: -1.3708844184875488
    3. 'uit' → logprob: -2.120884418487549
    4. 'ur' → logprob: -3.495884418487549
    5. ''''' → logprob: -3.745884418487549
    6. ''il' → logprob: -3.995884418487549
    7. ''' → logprob: -4.370884418487549
    8. ''é' → logprob: -4.620884418487549
    9. ''use' → logprob: -4.745884418487549
    10. ''appelle' → logprob: -4.995884418487549

Token 578: 'éc' (ID: 5675)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.8381504416465759
    2. 'ecute' → logprob: -0.9631504416465759
    3. 'ec' → logprob: -2.7131505012512207
    4. 'éc' → logprob: -2.9631505012512207
    5. 'écut' → logprob: -3.4631505012512207
    6. 'ecut' → logprob: -3.4631505012512207
    7. 'é' → logprob: -6.338150501251221
    8. '```' → logprob: -6.463150501251221
    9. 'e' → logprob: -7.338150501251221
    10. 'ecution' → logprob: -8.213150024414062

Token 579: 'ute' (ID: 1331)
  Prédit: 'ecute'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ecute' → logprob: -0.7608559131622314
    2. 'écut' → logprob: -1.6358559131622314
    3. 'ure' → logprob: -1.8858559131622314
    4. 'ute' → logprob: -3.2608559131622314
    5. 'éc' → logprob: -3.5108559131622314
    6. 'û' → logprob: -3.6358559131622314
    7. 'ecut' → logprob: -3.6358559131622314
    8. 'e' → logprob: -3.8858559131622314
    9. 'if' → logprob: -4.510855674743652
    10. 'uite' → logprob: -4.885855674743652

Token 580: ' seulement' (ID: 32072)
  Prédit: ' uniquement'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' uniquement' → logprob: -0.40137815475463867
    2. ' only' → logprob: -1.6513781547546387
    3. 'only' → logprob: -2.6513781547546387
    4. ' seulement' → logprob: -2.9013781547546387
    5. 'uni' → logprob: -5.151378154754639
    6. '```' → logprob: -5.776378154754639
    7. '\n' → logprob: -7.151378154754639
    8. 'se' → logprob: -7.151378154754639
    9. 'if' → logprob: -7.401378154754639
    10. '_only' → logprob: -7.776378154754639

Token 581: '
' (ID: 198)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.004022119101136923
    2. ' if' → logprob: -6.129022121429443
    3. 'si' → logprob: -6.629022121429443
    4. ' si' → logprob: -8.254021644592285
    5. '
' → logprob: -8.754021644592285
    6. '```' → logprob: -10.254021644592285
    7. '\
' → logprob: -10.879021644592285
    8. 'dans' → logprob: -11.129021644592285
    9. '\n' → logprob: -11.879021644592285
    10. ' lorsque' → logprob: -12.879021644592285

Token 582: '#' (ID: 2)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.00020497082732617855
    2. ' if' → logprob: -8.875205039978027
    3. 'si' → logprob: -9.750205039978027
    4. '```' → logprob: -12.375205039978027
    5. ' si' → logprob: -13.500205039978027
    6. '
' → logprob: -14.500205039978027
    7. 'when' → logprob: -15.375205039978027
    8. '#if' → logprob: -15.875205039978027
    9. 'dans' → logprob: -16.25020408630371
    10. ' lorsque' → logprob: -16.50020408630371

Token 583: ' si' (ID: 1784)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.0006379772676154971
    2. ' if' → logprob: -7.375638008117676
    3. '```' → logprob: -11.500638008117676
    4. '
' → logprob: -14.250638008117676
    5. 'si' → logprob: -15.875638008117676
    6. '#if' → logprob: -16.62563705444336
    7. '_if' → logprob: -16.62563705444336
    8. '﻿' → logprob: -16.87563705444336
    9. '__' → logprob: -16.87563705444336
    10. 'If' → logprob: -17.00063705444336

Token 584: ' ce' (ID: 2357)
  Prédit: ' __'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.386887788772583
    2. '__' → logprob: -1.136887788772583
    3. ' ' → logprob: -11.011887550354004
    4. ' ' → logprob: -15.886887550354004
    5. '/__' → logprob: -16.51188850402832
    6. 'name' → logprob: -17.01188850402832
    7. '_name' → logprob: -17.26188850402832
    8. ' ' → logprob: -17.38688850402832
    9. ' name' → logprob: -17.51188850402832
    10. '```' → logprob: -17.88688850402832

Token 585: ' fichier' (ID: 69637)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.01482592523097992
    2. ' __' → logprob: -4.764825820922852
    3. '_' → logprob: -6.764825820922852
    4. '```' → logprob: -6.889825820922852
    5. ' nom' → logprob: -7.139825820922852
    6. 'n' → logprob: -7.264825820922852
    7. '.py' → logprob: -8.264825820922852
    8. '_nom' → logprob: -8.264825820922852
    9. 'nom' → logprob: -8.514825820922852
    10. ''est' → logprob: -8.514825820922852

Token 586: ' est' (ID: 893)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.04126357659697533
    2. '==' → logprob: -4.541263580322266
    3. 'est' → logprob: -5.166263580322266
    4. 'name' → logprob: -5.291263580322266
    5. '#' → logprob: -5.666263580322266
    6. 'if' → logprob: -5.791263580322266
    7. '.py' → logprob: -5.791263580322266
    8. ' __' → logprob: -6.166263580322266
    9. ' ==' → logprob: -6.416263580322266
    10. '```' → logprob: -6.916263580322266

Token 587: ' exécut' (ID: 165350)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.08365986496210098
    2. ' exécut' → logprob: -2.9586598873138428
    3. ' __' → logprob: -3.8336598873138428
    4. 'execut' → logprob: -5.583659648895264
    5. 'le' → logprob: -6.958659648895264
    6. ' executed' → logprob: -7.333659648895264
    7. ' run' → logprob: -8.083660125732422
    8. ' le' → logprob: -8.208660125732422
    9. 'run' → logprob: -8.833660125732422
    10. 'name' → logprob: -8.833660125732422

Token 588: 'é' (ID: 377)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.01068804133683443
    2. ' en' → logprob: -5.260687828063965
    3. 'é' → logprob: -5.635687828063965
    4. ' directement' → logprob: -7.010687828063965
    5. 'if' → logprob: -8.510687828063965
    6. 'e' → logprob: -9.260687828063965
    7. ' __' → logprob: -9.385687828063965
    8. 'comme' → logprob: -9.510687828063965
    9. ' as' → logprob: -9.760687828063965
    10. '==' → logprob: -9.760687828063965

Token 589: ' directement' (ID: 52317)
  Prédit: 'en'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'en' → logprob: -0.6691173315048218
    2. 'direct' → logprob: -1.5441173315048218
    3. ' en' → logprob: -1.9191173315048218
    4. '__' → logprob: -2.5441174507141113
    5. ' directement' → logprob: -4.169117450714111
    6. 'as' → logprob: -4.669117450714111
    7. '```' → logprob: -5.044117450714111
    8. ' directly' → logprob: -5.294117450714111
    9. 'if' → logprob: -5.419117450714111
    10. ' as' → logprob: -5.669117450714111

Token 590: ' (' (ID: 350)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.03089728020131588
    2. 'if' → logprob: -3.530897378921509
    3. '

' → logprob: -7.28089714050293
    4. '\n' → logprob: -8.65589714050293
    5. '```' → logprob: -9.03089714050293
    6. '  
' → logprob: -9.65589714050293
    7. ' if' → logprob: -11.03089714050293
    8. ' 
' → logprob: -11.15589714050293
    9. '\
' → logprob: -11.53089714050293
    10. '\' → logprob: -11.78089714050293

Token 591: 'et' (ID: 292)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.005382218398153782
    2. 'if' → logprob: -5.755382061004639
    3. ' __' → logprob: -6.130382061004639
    4. 'name' → logprob: -11.505382537841797
    5. ' if' → logprob: -12.005382537841797
    6. '```' → logprob: -12.005382537841797
    7. 'not' → logprob: -13.880382537841797
    8. '/__' → logprob: -14.755382537841797
    9. '_name' → logprob: -14.880382537841797
    10. '(__' → logprob: -15.130382537841797

Token 592: ' pas' (ID: 2173)
  Prédit: ' __'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.4658508002758026
    2. '__' → logprob: -1.715850830078125
    3. ' not' → logprob: -1.840850830078125
    4. 'not' → logprob: -3.465850830078125
    5. ' pas' → logprob: -7.590850830078125
    6. ' non' → logprob: -7.715850830078125
    7. '_' → logprob: -8.340850830078125
    8. '_non' → logprob: -8.465850830078125
    9. 'pas' → logprob: -8.590850830078125
    10. '_name' → logprob: -8.590850830078125

Token 593: ' suppos' (ID: 167611)
  Prédit: ' en'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' en' → logprob: -0.01064381655305624
    2. ' comme' → logprob: -5.76064395904541
    3. ' import' → logprob: -6.01064395904541
    4. 'import' → logprob: -6.13564395904541
    5. ' as' → logprob: -7.51064395904541
    6. ' pas' → logprob: -7.88564395904541
    7. ' par' → logprob: -7.88564395904541
    8. ' __' → logprob: -8.51064395904541
    9. ' ' → logprob: -8.63564395904541
    10. ' via' → logprob: -8.63564395904541

Token 594: 'é' (ID: 377)
  Prédit: 'é'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'é' → logprob: -0.06226422265172005
    2. 'ément' → logprob: -3.3122642040252686
    3. 'if' → logprob: -4.312264442443848
    4. 'ivement' → logprob: -5.562264442443848
    5. 'u' → logprob: -5.812264442443848
    6. 'iquement' → logprob: -6.812264442443848
    7. 'éd' → logprob: -7.937264442443848
    8. '__' → logprob: -8.062264442443848
    9. 'amment' → logprob: -8.062264442443848
    10. 'ém' → logprob: -8.562264442443848

Token 595: ' être' (ID: 9104)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.10275835543870926
    2. 'import' → logprob: -3.6027584075927734
    3. ' en' → logprob: -3.8527584075927734
    4. 'être' → logprob: -4.102758407592773
    5. ' __' → logprob: -4.352758407592773
    6. ' être' → logprob: -5.102758407592773
    7. ' comme' → logprob: -5.602758407592773
    8. 'd' → logprob: -5.852758407592773
    9. '_' → logprob: -6.352758407592773
    10. 'comme' → logprob: -6.602758407592773

Token 596: ' import' (ID: 1588)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'import' → logprob: -0.10042890161275864
    2. ' import' → logprob: -2.350428819656372
    3. '__' → logprob: -9.225428581237793
    4. 'importe' → logprob: -10.100428581237793
    5. '_import' → logprob: -10.850428581237793
    6. ' ' → logprob: -10.975428581237793
    7. ''import' → logprob: -11.350428581237793
    8. '(import' → logprob: -11.600428581237793
    9. ' imported' → logprob: -12.100428581237793
    10. '	import' → logprob: -12.225428581237793

Token 597: 'é' (ID: 377)
  Prédit: 'é'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'é' → logprob: -0.03379277139902115
    2. '__' → logprob: -3.408792734146118
    3. 'if' → logprob: -9.408792495727539
    4. 'ée' → logprob: -11.033792495727539
    5. 'ed' → logprob: -11.408792495727539
    6. 'és' → logprob: -11.783792495727539
    7. 'né' → logprob: -11.908792495727539
    8. 'able' → logprob: -12.283792495727539
    9. 'É' → logprob: -12.658792495727539
    10. ' __' → logprob: -13.158792495727539

Token 598: ' dans' (ID: 2671)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.1361725628376007
    2. '__' → logprob: -2.3861725330352783
    3. '
' → logprob: -4.136172771453857
    4. ')
' → logprob: -5.261172771453857
    5. 'en' → logprob: -5.511172771453857
    6. ')' → logprob: -6.136172771453857
    7. ' en' → logprob: -6.261172771453857
    8. ' if' → logprob: -7.011172771453857
    9. '```' → logprob: -7.011172771453857
    10. '_name' → logprob: -7.136172771453857

Token 599: ' un' (ID: 537)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.22093723714351654
    2. 'le' → logprob: -1.8459372520446777
    3. ' __' → logprob: -4.345937252044678
    4. 'un' → logprob: -4.470937252044678
    5. '_le' → logprob: -4.595937252044678
    6. ' un' → logprob: -5.845937252044678
    7. ' le' → logprob: -6.970937252044678
    8. 'une' → logprob: -7.220937252044678
    9. 'l' → logprob: -8.09593677520752
    10. '_' → logprob: -8.34593677520752

Token 600: ' autre' (ID: 20278)
  Prédit: 'module'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'module' → logprob: -0.2839493155479431
    2. 'script' → logprob: -2.408949375152588
    3. '__' → logprob: -2.658949375152588
    4. ' script' → logprob: -3.283949375152588
    5. 'programme' → logprob: -3.783949375152588
    6. ' module' → logprob: -4.408949375152588
    7. ' __' → logprob: -4.908949375152588
    8. '```' → logprob: -5.408949375152588
    9. 'aut' → logprob: -7.158949375152588
    10. ' programme' → logprob: -7.408949375152588

Token 601: ' module' (ID: 8827)
  Prédit: ' fichier'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' fichier' → logprob: -0.7975015044212341
    2. '_f' → logprob: -1.547501564025879
    3. 'f' → logprob: -1.797501564025879
    4. '_' → logprob: -2.922501564025879
    5. ' script' → logprob: -3.172501564025879
    6. 'module' → logprob: -3.297501564025879
    7. 'script' → logprob: -4.047501564025879
    8. '_script' → logprob: -4.922501564025879
    9. 'file' → logprob: -5.422501564025879
    10. ' file' → logprob: -6.172501564025879

Token 602: ').
' (ID: 6294)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.013689163140952587
    2. ')
' → logprob: -4.888689041137695
    3. ')' → logprob: -6.138689041137695
    4. '):
' → logprob: -6.888689041137695
    5. ')

' → logprob: -7.263689041137695
    6. ' if' → logprob: -7.263689041137695
    7. '__' → logprob: -7.513689041137695
    8. '):

' → logprob: -7.513689041137695
    9. '
' → logprob: -8.763689041137695
    10. ':' → logprob: -10.013689041137695

Token 603: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.002486476907506585
    2. '
' → logprob: -6.002486705780029
    3. ' if' → logprob: -11.752486228942871
    4. '```' → logprob: -13.627486228942871
    5. '  
' → logprob: -14.502486228942871
    6. '    
' → logprob: -14.877486228942871
    7. '\n' → logprob: -15.127486228942871
    8. '

' → logprob: -15.252486228942871
    9. '__' → logprob: -15.752486228942871
    10. ' 
' → logprob: -16.002487182617188

Token 604: ' __' (ID: 2516)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.4742235839366913
    2. ' __' → logprob: -0.9742236137390137
    3. ' ' → logprob: -8.849223136901855
    4. ' ' → logprob: -14.099223136901855
    5. '_' → logprob: -14.224223136901855
    6. ' ' → logprob: -14.474223136901855
    7. 'name' → logprob: -15.599223136901855
    8. '```' → logprob: -15.849223136901855
    9. '/__' → logprob: -16.099224090576172
    10. 'space' → logprob: -16.599224090576172

Token 605: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.0023457997012883425
    2. '==' → logprob: -6.752345561981201
    3. ' ==' → logprob: -6.877345561981201
    4. ' __' → logprob: -9.12734603881836
    5. '_' → logprob: -10.50234603881836
    6. 'name' → logprob: -12.00234603881836
    7. '=="' → logprob: -15.00234603881836
    8. '__.__' → logprob: -15.12734603881836
    9. '```' → logprob: -15.25234603881836
    10. '=' → logprob: -15.87734603881836

Token 606: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -5.512236498361744e-07
    2. '==' → logprob: -15.125000953674316
    3. '__.__' → logprob: -16.5
    4. '_' → logprob: -17.5
    5. '____' → logprob: -18.125
    6. '__
' → logprob: -18.125
    7. ' ==' → logprob: -18.5
    8. '___' → logprob: -18.75
    9. 'name' → logprob: -19.125
    10. ' __' → logprob: -19.25

Token 607: ' ==' (ID: 951)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.08172290772199631
    2. '==' → logprob: -2.5817229747772217
    3. ' ==' → logprob: -5.956722736358643
    4. '=="' → logprob: -8.8317232131958
    5. '=='' → logprob: -9.9567232131958
    6. '=' → logprob: -10.2067232131958
    7. '_' → logprob: -12.3317232131958
    8. '"' → logprob: -12.7067232131958
    9. ''' → logprob: -14.4567232131958
    10. '==
' → logprob: -14.5817232131958

Token 608: ' '__' (ID: 28278)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.038057442754507065
    2. ''' → logprob: -3.288057327270508
    3. '__' → logprob: -11.663057327270508
    4. ' "__' → logprob: -11.913057327270508
    5. ' '__' → logprob: -15.038057327270508
    6. '"'' → logprob: -16.038057327270508
    7. ''"' → logprob: -16.288057327270508
    8. '"name' → logprob: -16.913057327270508
    9. '"default' → logprob: -17.413057327270508
    10. '"user' → logprob: -17.663057327270508

Token 609: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -7.226628895296017e-06
    2. '__' → logprob: -12.250007629394531
    3. 'name' → logprob: -13.000007629394531
    4. '_main' → logprob: -15.750007629394531
    5. ' main' → logprob: -19.12500762939453
    6. 'ma' → logprob: -19.87500762939453
    7. 'm' → logprob: -20.12500762939453
    8. 'built' → logprob: -21.12500762939453
    9. '(main' → logprob: -21.25000762939453
    10. '	main' → logprob: -22.00000762939453

Token 610: '__':
' (ID: 39314)
  Prédit: '__':
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__':
' → logprob: -0.5759658813476562
    2. '__' → logprob: -0.8259658813476562
    3. '_' → logprob: -10.575965881347656
    4. '__":
' → logprob: -14.200965881347656
    5. '_'' → logprob: -16.325965881347656
    6. '__:' → logprob: -16.325965881347656
    7. '___' → logprob: -17.325965881347656
    8. '__('' → logprob: -18.325965881347656
    9. ''' → logprob: -18.450965881347656
    10. '____' → logprob: -19.200965881347656

Token 611: '   ' (ID: 271)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.4392108619213104
    2. ':' → logprob: -1.8142108917236328
    3. '   ' → logprob: -1.9392108917236328
    4. 'main' → logprob: -3.564210891723633
    5. ':
' → logprob: -4.314210891723633
    6. '	main' → logprob: -5.814210891723633
    7. '(main' → logprob: -5.939210891723633
    8. '():
' → logprob: -8.314210891723633
    9. '<|end|>' → logprob: -8.439210891723633
    10. '    
' → logprob: -8.439210891723633

Token 612: ' #' (ID: 1069)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'main' → logprob: -3.128163257315464e-07
    2. ' main' → logprob: -15.25
    3. '	main' → logprob: -21.75
    4. '   ' → logprob: -23.75
    5. '(main' → logprob: -24.25
    6. '.main' → logprob: -24.25
    7. 'ma' → logprob: -24.25
    8. 'mai' → logprob: -24.75
    9. 'm' → logprob: -24.875
    10. 'Main' → logprob: -24.875

Token 613: ' On' (ID: 2160)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'main' → logprob: -8.673547563375905e-05
    2. ' main' → logprob: -9.375086784362793
    3. '   ' → logprob: -13.375086784362793
    4. '	main' → logprob: -15.500086784362793
    5. 'm' → logprob: -17.000085830688477
    6. 'ma' → logprob: -18.250085830688477
    7. 'mai' → logprob: -18.625085830688477
    8. '(main' → logprob: -18.750085830688477
    9. 'maine' → logprob: -19.125085830688477
    10. '.main' → logprob: -19.625085830688477

Token 614: ' appelle' (ID: 111796)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.251968652009964
    2. ' main' → logprob: -1.5019686222076416
    3. '	main' → logprob: -10.251968383789062
    4. 'ma' → logprob: -13.501968383789062
    5. '   ' → logprob: -14.001968383789062
    6. '(main' → logprob: -14.251968383789062
    7. ' ' → logprob: -14.626968383789062
    8. ' ma' → logprob: -15.251968383789062
    9. ' ' → logprob: -15.876968383789062
    10. '_main' → logprob: -16.001968383789062

Token 615: ' la' (ID: 557)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.4740793704986572
    2. ' main' → logprob: -0.9740793704986572
    3. '	main' → logprob: -13.849079132080078
    4. '   ' → logprob: -13.849079132080078
    5. '(main' → logprob: -14.724079132080078
    6. ' ' → logprob: -18.099079132080078
    7. '_main' → logprob: -18.474079132080078
    8. 'ma' → logprob: -18.599079132080078
    9. '.main' → logprob: -18.849079132080078
    10. 'maine' → logprob: -19.474079132080078

Token 616: ' fonction' (ID: 17610)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'main' → logprob: -9.615255839889869e-05
    2. ' main' → logprob: -9.250096321105957
    3. 'ma' → logprob: -19.12509536743164
    4. '	main' → logprob: -19.62509536743164
    5. '(main' → logprob: -20.50009536743164
    6. 'm' → logprob: -21.75009536743164
    7. 'principal' → logprob: -21.87509536743164
    8. '.main' → logprob: -21.87509536743164
    9. '_main' → logprob: -22.00009536743164
    10. 'maine' → logprob: -22.25009536743164

Token 617: ' main' (ID: 2758)
  Prédit: ' main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.6931540966033936
    2. 'main' → logprob: -0.6931540966033936
    3. '(main' → logprob: -12.193154335021973
    4. '	main' → logprob: -13.693154335021973
    5. '   ' → logprob: -15.318154335021973
    6. '.main' → logprob: -16.068153381347656
    7. '()' → logprob: -16.693153381347656
    8. '_main' → logprob: -16.693153381347656
    9. 'def' → logprob: -17.318153381347656
    10. 'ma' → logprob: -17.568153381347656

Token 618: ' pour' (ID: 1930)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -6.110668618930504e-05
    2. '()
' → logprob: -10.00006103515625
    3. 'main' → logprob: -11.25006103515625
    4. '(main' → logprob: -14.25006103515625
    5. '()`' → logprob: -14.75006103515625
    6. '.main' → logprob: -14.87506103515625
    7. '   ' → logprob: -15.12506103515625
    8. ' ()' → logprob: -15.37506103515625
    9. '()
' → logprob: -15.62506103515625
    10. '(' → logprob: -15.62506103515625

Token 619: ' dém' (ID: 34947)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.011054190807044506
    2. ' main' → logprob: -4.511054039001465
    3. '   ' → logprob: -12.511054039001465
    4. '	main' → logprob: -13.386054039001465
    5. 'principal' → logprob: -14.636054039001465
    6. 'm' → logprob: -15.386054039001465
    7. 'ma' → logprob: -15.636054039001465
    8. 'run' → logprob: -16.26105499267578
    9. '(main' → logprob: -16.38605499267578
    10. ' ' → logprob: -16.38605499267578

Token 620: 'arrer' (ID: 85856)
  Prédit: 'arrer'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'arrer' → logprob: -0.00010568885772954673
    2. 'arer' → logprob: -9.875105857849121
    3. 'arr' → logprob: -10.000105857849121
    4. 'ar' → logprob: -13.000105857849121
    5. 'arrera' → logprob: -13.875105857849121
    6. '\' → logprob: -14.125105857849121
    7. '   ' → logprob: -14.125105857849121
    8. '_' → logprob: -14.500105857849121
    9. '#' → logprob: -14.875105857849121
    10. '`' → logprob: -14.875105857849121

Token 621: ' le' (ID: 505)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.5760260820388794
    2. 'main' → logprob: -0.8260260820388794
    3. '()
' → logprob: -9.57602596282959
    4. '(main' → logprob: -11.82602596282959
    5. ' main' → logprob: -12.07602596282959
    6. '   ' → logprob: -13.70102596282959
    7. '_main' → logprob: -14.32602596282959
    8. '	main' → logprob: -14.45102596282959
    9. '.main' → logprob: -14.57602596282959
    10. '(' → logprob: -14.82602596282959

Token 622: ' programme' (ID: 18190)
  Prédit: 'programme'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'programme' → logprob: -0.2898758351802826
    2. ' programme' → logprob: -2.0398757457733154
    3. 'program' → logprob: -2.1648757457733154
    4. ' program' → logprob: -5.0398759841918945
    5. 'main' → logprob: -8.664875984191895
    6. ' main' → logprob: -10.039875984191895
    7. 'programma' → logprob: -10.039875984191895
    8. 'programm' → logprob: -10.664875984191895
    9. '_program' → logprob: -11.039875984191895
    10. 'pro' → logprob: -11.539875984191895

Token 623: '.
' (ID: 558)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.025814233347773552
    2. '   ' → logprob: -4.525814056396484
    3. '()
' → logprob: -4.900814056396484
    4. 'main' → logprob: -5.025814056396484
    5. ' main' → logprob: -8.025814056396484
    6. '(main' → logprob: -8.900814056396484
    7. '	main' → logprob: -9.275814056396484
    8. '_main' → logprob: -10.775814056396484
    9. '(' → logprob: -11.025814056396484
    10. '.main' → logprob: -11.025814056396484

Token 624: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.603943407535553
    2. 'main' → logprob: -0.853943407535553
    3. ' main' → logprob: -3.603943347930908
    4. '	main' → logprob: -7.853943347930908
    5. '(main' → logprob: -11.853943824768066
    6. '   ' → logprob: -13.228943824768066
    7. '_main' → logprob: -13.978943824768066
    8. '.main' → logprob: -15.103943824768066
    9. 'Main' → logprob: -15.478943824768066
    10. '    
' → logprob: -15.603943824768066

Token 625: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' (adapté à ' main') → logprob: -1.0206720617134124e-05
    2. ' main' → logprob: -11.50001049041748
    3. '   ' → logprob: -19.750009536743164
    4. '	main' → logprob: -20.625009536743164
    5. '(main' → logprob: -23.625009536743164
    6. '_main' → logprob: -24.125009536743164
    7. 'Main' → logprob: -24.250009536743164
    8. '.main' → logprob: -24.625009536743164
    9. 'ma' → logprob: -26.500009536743164
    10. 'm' → logprob: -26.875009536743164

Token 626: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0029718761797994375
    2. '<|end|>' → logprob: -6.502971649169922
    3. '()
' → logprob: -7.377971649169922
    4. '
' → logprob: -7.877971649169922
    5. '```' → logprob: -8.627971649169922
    6. ')' → logprob: -9.127971649169922
    7. '(' → logprob: -9.752971649169922
    8. '\n' → logprob: -10.127971649169922
    9. '()\' → logprob: -10.502971649169922
    10. '())' → logprob: -10.752971649169922


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 624
Tokens correctement prédits (1ère position, stricte): 153
Tokens correctement prédits (1ère position, avec adaptation): 160
Tokens correctement prédits (top 10): 373
Précision stricte (1ère position): 24.52%
Précision adaptée (1ère position): 25.64%
Précision (top 10): 59.78%
================================================================================
