================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:16:12
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
k = int(input())
a, b = map(int, input().split())
for i in range(a, b + 1):
    if i % k == 0:
        print('OK')
        exit()
print('NG')
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'k' (ID: 74)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.005959614180028439
    2. '(k' → logprob: -5.255959510803223
    3. ''' → logprob: -8.255959510803223
    4. '```' → logprob: -8.880959510803223
    5. '('' → logprob: -9.255959510803223
    6. 'k' → logprob: -9.755959510803223
    7. '`' → logprob: -10.255959510803223
    8. '("("' → logprob: -10.255959510803223
    9. '_' → logprob: -11.380959510803223
    10. '"' → logprob: -11.380959510803223

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0974525660276413
    2. ')' → logprob: -2.4724526405334473
    3. '()' → logprob: -5.222452640533447
    4. '(k' → logprob: -6.972452640533447
    5. '(
' → logprob: -7.097452640533447
    6. '())' → logprob: -8.097452163696289
    7. '('' → logprob: -8.222452163696289
    8. '```' → logprob: -8.847452163696289
    9. '(

' → logprob: -9.097452163696289
    10. ''' → logprob: -9.847452163696289

Token 5: 'a' (ID: 64)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -1.1655113697052002
    2. '+' → logprob: -1.4155113697052002
    3. 'if' → logprob: -1.7905113697052002
    4. '*' → logprob: -2.4155113697052
    5. '%' → logprob: -2.9155113697052
    6. 'for' → logprob: -3.1655113697052
    7. 'i' → logprob: -4.290511131286621
    8. 's' → logprob: -4.665511131286621
    9. 'n' → logprob: -4.790511131286621
    10. '#' → logprob: -4.790511131286621

Token 6: ',' (ID: 11)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.018386147916316986
    2. '+' → logprob: -4.268386363983154
    3. '=' → logprob: -6.768386363983154
    4. ' =' → logprob: -7.268386363983154
    5. '[a' → logprob: -7.643386363983154
    6. '[k' → logprob: -7.768386363983154
    7. '_' → logprob: -8.393385887145996
    8. '.' → logprob: -8.768385887145996
    9. '\[' → logprob: -9.018385887145996
    10. 'a' → logprob: -9.018385887145996

Token 7: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.14272135496139526
    2. ' b' → logprob: -2.01772141456604
    3. ' ' → logprob: -11.392721176147461
    4. ' k' → logprob: -11.642721176147461
    5. ' =' → logprob: -11.767721176147461
    6. 'k' → logprob: -11.892721176147461
    7. '=' → logprob: -12.517721176147461
    8. '_' → logprob: -12.517721176147461
    9. '*b' → logprob: -14.017721176147461
    10. ' *' → logprob: -14.517721176147461

Token 8: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5231496095657349
    2. ' =' → logprob: -0.8981496095657349
    3. ',' → logprob: -10.773149490356445
    4. ')' → logprob: -13.148149490356445
    5. '=input' → logprob: -13.398149490356445
    6. ' ' → logprob: -14.648149490356445
    7. '<|end|>' → logprob: -15.148149490356445
    8. 'input' → logprob: -16.023149490356445
    9. '=int' → logprob: -16.210649490356445
    10. '[' → logprob: -16.648149490356445

Token 9: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.17224355041980743
    2. 'map' → logprob: -2.297243595123291
    3. ' input' → logprob: -3.297243595123291
    4. 'input' → logprob: -3.922243595123291
    5. ' k' → logprob: -7.547243595123291
    6. 'k' → logprob: -8.922243118286133
    7. ' ' → logprob: -8.922243118286133
    8. '0' → logprob: -10.297243118286133
    9. 'int' → logprob: -10.922243118286133
    10. ' list' → logprob: -10.922243118286133

Token 10: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.3165986239910126
    2. '(' → logprob: -2.066598653793335
    3. '(input' → logprob: -2.441598653793335
    4. '(str' → logprob: -3.441598653793335
    5. '(lambda' → logprob: -3.941598653793335
    6. '(eval' → logprob: -6.691598415374756
    7. '<|end|>' → logprob: -7.191598415374756
    8. '<int' → logprob: -7.316598415374756
    9. '(range' → logprob: -7.316598415374756
    10. '```' → logprob: -7.441598415374756

Token 11: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.003160133957862854
    2. ',input' → logprob: -6.628159999847412
    3. '(' → logprob: -7.128159999847412
    4. ')' → logprob: -7.128159999847412
    5. ',' → logprob: -9.12816047668457
    6. '=input' → logprob: -9.87816047668457
    7. 'input' → logprob: -10.37816047668457
    8. ' (' → logprob: -11.37816047668457
    9. '[input' → logprob: -12.25316047668457
    10. '<input' → logprob: -12.37816047668457

Token 12: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.04861382022500038
    2. ' input' → logprob: -3.0486137866973877
    3. ')' → logprob: -10.923613548278809
    4. '(input' → logprob: -11.798613548278809
    5. '=input' → logprob: -15.173613548278809
    6. ',input' → logprob: -15.173613548278809
    7. ' ' → logprob: -16.048614501953125
    8. ' )' → logprob: -16.048614501953125
    9. '	input' → logprob: -16.798614501953125
    10. '[input' → logprob: -17.423614501953125

Token 13: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.13446445763111115
    2. '()' → logprob: -2.1344645023345947
    3. '().' → logprob: -5.009464263916016
    4. ')' → logprob: -7.259464263916016
    5. '());' → logprob: -10.384464263916016
    6. '(' → logprob: -10.509464263916016
    7. ' ())' → logprob: -11.134464263916016
    8. '();)' → logprob: -11.634464263916016
    9. '(),' → logprob: -11.759464263916016
    10. '()))' → logprob: -11.884464263916016

Token 14: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -7.886803359724581e-05
    2. 'strip' → logprob: -9.500079154968262
    3. ' split' → logprob: -13.250079154968262
    4. ')' → logprob: -13.625079154968262
    5. 'rstrip' → logprob: -14.750079154968262
    6. '(split' → logprob: -15.000079154968262
    7. 'spl' → logprob: -16.125078201293945
    8. 's' → logprob: -16.250078201293945
    9. ')s' → logprob: -17.875078201293945
    10. 'sp' → logprob: -18.000078201293945

Token 15: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5997201204299927
    2. '())' → logprob: -0.8497201204299927
    3. '))' → logprob: -4.224720001220703
    4. '()' → logprob: -4.849720001220703
    5. '()))' → logprob: -7.474720001220703
    6. '`)' → logprob: -8.599720001220703
    7. '')' → logprob: -8.724720001220703
    8. '('' → logprob: -9.849720001220703
    9. '(' → logprob: -10.474720001220703
    10. '")' → logprob: -11.849720001220703

Token 16: 'for' (ID: 1938)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.6887086033821106
    2. 'if' → logprob: -0.8137086033821106
    3. 'print' → logprob: -4.188708782196045
    4. 's' → logprob: -4.688708782196045
    5. '\n' → logprob: -5.188708782196045
    6. '+' → logprob: -5.563708782196045
    7. '
' → logprob: -5.813708782196045
    8. ')' → logprob: -5.938708782196045
    9. 'i' → logprob: -6.188708782196045
    10. ' if' → logprob: -6.563708782196045

Token 17: ' i' (ID: 575)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.10873477905988693
    2. ' i' → logprob: -2.8587348461151123
    3. '  ' → logprob: -3.1087348461151123
    4. 'i' → logprob: -7.233734607696533
    5. '_' → logprob: -9.358735084533691
    6. ' ‌' → logprob: -9.983735084533691
    7. ' k' → logprob: -10.233735084533691
    8. ' )' → logprob: -10.608735084533691
    9. ' ' → logprob: -10.733735084533691
    10. ' ▁' → logprob: -11.733735084533691

Token 18: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.2709301710128784
    2. ' ' → logprob: -1.7709301710128784
    3. 'in' → logprob: -2.895930290222168
    4. '  ' → logprob: -5.145930290222168
    5. '_' → logprob: -6.270930290222168
    6. ' n' → logprob: -6.645930290222168
    7. 'n' → logprob: -7.270930290222168
    8. ' i' → logprob: -7.395930290222168
    9. ',' → logprob: -8.645930290222168
    10. ')' → logprob: -8.645930290222168

Token 19: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.20142902433872223
    2. 'range' → logprob: -1.701429009437561
    3. ' ' → logprob: -11.20142936706543
    4. '	range' → logprob: -13.45142936706543
    5. '(range' → logprob: -15.32642936706543
    6. ' xrange' → logprob: -16.32642936706543
    7. 'rang' → logprob: -16.70142936706543
    8. '```' → logprob: -16.82642936706543
    9. '_range' → logprob: -16.95142936706543
    10. ' ran' → logprob: -17.45142936706543

Token 20: '(a' (ID: 6271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.20144452154636383
    2. '(k' → logprob: -1.7014445066452026
    3. '(a' → logprob: -11.576444625854492
    4. '(i' → logprob: -11.701444625854492
    5. '((' → logprob: -12.451444625854492
    6. '(n' → logprob: -12.951444625854492
    7. ' (' → logprob: -13.326444625854492
    8. '(len' → logprob: -13.576444625854492
    9. '(`' → logprob: -13.826444625854492
    10. '(s' → logprob: -13.826444625854492

Token 21: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0072218081913888454
    2. ' ,' → logprob: -5.757221698760986
    3. ')' → logprob: -5.882221698760986
    4. '+' → logprob: -6.882221698760986
    5. ',b' → logprob: -10.382222175598145
    6. '):' → logprob: -10.632222175598145
    7. ' +' → logprob: -10.632222175598145
    8. ',)' → logprob: -10.757222175598145
    9. ' )' → logprob: -11.007222175598145
    10. ',a' → logprob: -11.007222175598145

Token 22: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.3868767023086548
    2. ' b' → logprob: -1.1368767023086548
    3. '	b' → logprob: -13.886877059936523
    4. 'k' → logprob: -13.886877059936523
    5. ')b' → logprob: -13.886877059936523
    6. ' ' → logprob: -14.011877059936523
    7. ' k' → logprob: -14.511877059936523
    8. ',b' → logprob: -15.136877059936523
    9. '>b' → logprob: -15.261877059936523
    10. ')' → logprob: -15.261877059936523

Token 23: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.042072560638189316
    2. ' +' → logprob: -3.7920725345611572
    3. '):' → logprob: -4.042072772979736
    4. ')' → logprob: -6.917072772979736
    5. ',' → logprob: -9.792072296142578
    6. '+k' → logprob: -11.792072296142578
    7. ')):' → logprob: -12.292072296142578
    8. ' ):' → logprob: -12.292072296142578
    9. '):
' → logprob: -12.542072296142578
    10. '+:' → logprob: -12.792072296142578

Token 24: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.003648772370070219
    2. ' ' → logprob: -5.62864875793457
    3. ')' → logprob: -10.00364875793457
    4. ' k' → logprob: -13.62864875793457
    5. 'k' → logprob: -14.37864875793457
    6. '```' → logprob: -14.37864875793457
    7. ',' → logprob: -14.62864875793457
    8. '   ' → logprob: -15.12864875793457
    9. '`' → logprob: -15.87864875793457
    10. '  ' → logprob: -16.87864875793457

Token 25: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00023393364972434938
    2. ' ' → logprob: -8.37523365020752
    3. ')' → logprob: -13.00023365020752
    4. 'k' → logprob: -14.25023365020752
    5. ' k' → logprob: -15.62523365020752
    6. '```' → logprob: -16.750234603881836
    7. '   ' → logprob: -16.875234603881836
    8. '  ' → logprob: -17.750234603881836
    9. '0' → logprob: -17.812734603881836
    10. ' )' → logprob: -17.875234603881836

Token 26: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.005973707884550095
    2. ')' → logprob: -5.255973815917969
    3. ':' → logprob: -7.255973815917969
    4. ' ):' → logprob: -10.880973815917969
    5. ':)' → logprob: -11.880973815917969
    6. '):
' → logprob: -12.130973815917969
    7. ',' → logprob: -13.880973815917969
    8. '}:' → logprob: -15.755973815917969
    9. ']:' → logprob: -15.880973815917969
    10. '),' → logprob: -16.00597381591797

Token 27: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.439329594373703
    2. '   ' → logprob: -1.5643296241760254
    3. '<|end|>' → logprob: -2.9393296241760254
    4. ' 
' → logprob: -3.9393296241760254
    5. '\n' → logprob: -4.189329624176025
    6. ' i' → logprob: -4.189329624176025
    7. 'print' → logprob: -4.939329624176025
    8. ' print' → logprob: -5.189329624176025
    9. ' k' → logprob: -5.189329624176025
    10. '    ' → logprob: -5.439329624176025

Token 28: ' if' (ID: 538)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.1405339241027832
    2. ' k' → logprob: -1.2655339241027832
    3. 'k' → logprob: -1.5155339241027832
    4. ' if' → logprob: -2.515533924102783
    5. 'if' (adapté à ' if') → logprob: -2.640533924102783
    6. ' print' → logprob: -4.890533924102783
    7. '   ' → logprob: -5.140533924102783
    8. 'i' → logprob: -5.515533924102783
    9. ' i' → logprob: -6.015533924102783
    10. 'for' → logprob: -6.515533924102783

Token 29: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.026065483689308167
    2. 'i' → logprob: -4.276065349578857
    3. ' ' → logprob: -4.901065349578857
    4. ' k' → logprob: -5.901065349578857
    5. '  ' → logprob: -7.276065349578857
    6. ' (' → logprob: -7.776065349578857
    7. 'k' → logprob: -8.651065826416016
    8. '(i' → logprob: -8.776065826416016
    9. '(' → logprob: -9.651065826416016
    10. ' not' → logprob: -10.151065826416016

Token 30: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.16115336120128632
    2. '%' → logprob: -1.9111533164978027
    3. ' ' → logprob: -7.161153316497803
    4. ' ==' → logprob: -9.536153793334961
    5. '   ' → logprob: -11.286153793334961
    6. '==' → logprob: -11.286153793334961
    7. '<|end|>' → logprob: -11.286153793334961
    8. ' ' → logprob: -11.661153793334961
    9. '>' → logprob: -11.911153793334961
    10. ')' → logprob: -12.286153793334961

Token 31: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.01629628986120224
    2. ' k' → logprob: -4.14129638671875
    3. '2' → logprob: -8.89129638671875
    4. ' ' → logprob: -9.26629638671875
    5. '3' → logprob: -11.39129638671875
    6. '10' → logprob: -12.26629638671875
    7. '4' → logprob: -12.76629638671875
    8. '1' → logprob: -12.89129638671875
    9. '5' → logprob: -13.14129638671875
    10. '7' → logprob: -13.26629638671875

Token 32: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.3876105546951294
    2. '==' → logprob: -1.1376105546951294
    3. ' !=' → logprob: -8.26261043548584
    4. ' ' → logprob: -8.51261043548584
    5. '=' → logprob: -9.26261043548584
    6. '!=' → logprob: -9.38761043548584
    7. ':' → logprob: -9.76261043548584
    8. ' =' → logprob: -10.76261043548584
    9. ' ' → logprob: -12.01261043548584
    10. '```' → logprob: -12.51261043548584

Token 33: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0059287971816957
    2. ' ' → logprob: -5.130928993225098
    3. '   ' → logprob: -17.13092803955078
    4. '==' → logprob: -17.88092803955078
    5. '  ' → logprob: -18.00592803955078
    6. '```' → logprob: -18.75592803955078
    7. '=' → logprob: -18.88092803955078
    8. '۰' → logprob: -19.38092803955078
    9. '<|end|>' → logprob: -19.50592803955078
    10. '    ' → logprob: -20.19342803955078

Token 34: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00015860427811276168
    2. ' ' → logprob: -8.750158309936523
    3. '```' → logprob: -17.625158309936523
    4. '<|end|>' → logprob: -17.875158309936523
    5. '  ' → logprob: -18.250158309936523
    6. '=' → logprob: -18.687658309936523
    7. '۰' → logprob: -19.000158309936523
    8. '०' → logprob: -19.000158309936523
    9. '   ' → logprob: -19.062658309936523
    10. '==' → logprob: -19.562658309936523

Token 35: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.1041145626222715e-05
    2. ':
' → logprob: -11.625011444091797
    3. '):' → logprob: -14.250011444091797
    4. ':**' → logprob: -14.250011444091797
    5. ' :' → logprob: -15.125011444091797
    6. ',' → logprob: -15.750011444091797
    7. '   ' → logprob: -16.000011444091797
    8. ':return' → logprob: -16.500011444091797
    9. ':`' → logprob: -16.875011444091797
    10. ' and' → logprob: -17.000011444091797

Token 36: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0018128673546016216
    2. 'print' → logprob: -7.126812934875488
    3. ' print' → logprob: -8.126812934875488
    4. '   ' → logprob: -8.126812934875488
    5. '\n' → logprob: -9.001812934875488
    6. '    ' → logprob: -9.626812934875488
    7. '<|end|>' → logprob: -10.251812934875488
    8. ' ' → logprob: -10.751812934875488
    9. '      ' → logprob: -10.876812934875488
    10. '     ' → logprob: -11.001812934875488

Token 37: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.07856187969446182
    2. ' print' → logprob: -2.953561782836914
    3. '       ' → logprob: -3.828561782836914
    4. '   ' → logprob: -6.453561782836914
    5. '    ' → logprob: -10.703561782836914
    6. 'pr' → logprob: -11.328561782836914
    7. '```' → logprob: -11.828561782836914
    8. 'p' → logprob: -12.078561782836914
    9. '           ' → logprob: -12.203561782836914
    10. '	print' → logprob: -12.703561782836914

Token 38: '('' (ID: 706)
  Prédit: '(i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(i' → logprob: -0.0067176250740885735
    2. '(' → logprob: -5.006717681884766
    3. '()' → logprob: -13.131717681884766
    4. 'i' → logprob: -16.506717681884766
    5. '((' → logprob: -16.506717681884766
    6. '('' → logprob: -16.756717681884766
    7. '(
' → logprob: -17.006717681884766
    8. '("("' → logprob: -18.506717681884766
    9. '(I' → logprob: -18.631717681884766
    10. '(a' → logprob: -19.381717681884766

Token 39: 'OK' (ID: 5175)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -6.623244553338736e-05
    2. '   ' → logprob: -9.875065803527832
    3. ' i' → logprob: -11.875065803527832
    4. '*' → logprob: -13.500065803527832
    5. ' ' → logprob: -13.625065803527832
    6. '(i' → logprob: -14.375065803527832
    7. '       ' → logprob: -14.375065803527832
    8. 'True' → logprob: -14.500065803527832
    9. 'Yes' → logprob: -14.750065803527832
    10. '*i' → logprob: -14.750065803527832

Token 40: '')
' (ID: 2515)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.005955821368843317
    2. ')' → logprob: -5.130955696105957
    3. ''' → logprob: -11.255955696105957
    4. '")' → logprob: -11.880955696105957
    5. '',' → logprob: -12.380955696105957
    6. '!' → logprob: -13.630955696105957
    7. '')
' → logprob: -13.755955696105957
    8. '}')' → logprob: -15.880955696105957
    9. ')'' → logprob: -16.380956649780273
    10. '('' → logprob: -16.380956649780273

Token 41: '       ' (ID: 309)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 42: ' exit' (ID: 10654)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0012518964940682054
    2. '   ' → logprob: -7.126251697540283
    3. 'else' → logprob: -8.626252174377441
    4. '           ' → logprob: -9.501252174377441
    5. ' else' → logprob: -9.876252174377441
    6. '<|end|>' → logprob: -10.126252174377441
    7. '```' → logprob: -10.251252174377441
    8. '        ' → logprob: -11.376252174377441
    9. '    ' → logprob: -11.626252174377441
    10. 'break' → logprob: -11.626252174377441

Token 43: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.011063262820243835
    2. '(' → logprob: -4.511063098907471
    3. '()`' → logprob: -12.261063575744629
    4. '()
' → logprob: -13.011063575744629
    5. '()

' → logprob: -13.636063575744629
    6. ' ()' → logprob: -13.761063575744629
    7. '();' → logprob: -13.761063575744629
    8. '())' → logprob: -13.886063575744629
    9. '`()' → logprob: -14.386063575744629
    10. '()<' → logprob: -14.761063575744629

Token 44: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.007236021105200052
    2. 'else' → logprob: -5.007236003875732
    3. '0' → logprob: -8.50723648071289
    4. '```' → logprob: -8.75723648071289
    5. 'continue' → logprob: -10.38223648071289
    6. 'pass' → logprob: -10.38223648071289
    7. '   ' → logprob: -10.63223648071289
    8. ' print' → logprob: -11.13223648071289
    9. '-' → logprob: -11.38223648071289
    10. 'No' → logprob: -11.63223648071289

Token 45: '('' (ID: 706)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.14230650663375854
    2. '('' → logprob: -2.6423065662384033
    3. '(' → logprob: -2.8923065662384033
    4. '(False' → logprob: -5.142306327819824
    5. '(None' → logprob: -9.392306327819824
    6. '(True' → logprob: -10.767306327819824
    7. '(-' → logprob: -11.017306327819824
    8. '("' → logprob: -11.517306327819824
    9. 'False' → logprob: -12.517306327819824
    10. '(false' → logprob: -12.642306327819824

Token 46: 'NG' (ID: 19236)
  Prédit: 'NG'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'NG' → logprob: -0.00046320082037709653
    2. 'FAIL' → logprob: -8.875463485717773
    3. 'Fail' → logprob: -9.250463485717773
    4. 'NO' → logprob: -9.375463485717773
    5. 'Wrong' → logprob: -10.375463485717773
    6. '-' → logprob: -10.500463485717773
    7. 'No' → logprob: -11.250463485717773
    8. 'ng' → logprob: -11.375463485717773
    9. 'None' → logprob: -11.500463485717773
    10. 'IMP' → logprob: -11.875463485717773

Token 47: '')' (ID: 1542)
  Prédit: '')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -6.869017852295656e-06
    2. ')' → logprob: -12.125006675720215
    3. ''' → logprob: -14.250006675720215
    4. '")' → logprob: -14.625006675720215
    5. '')
' → logprob: -15.250006675720215
    6. '```' → logprob: -18.25000762939453
    7. '')

' → logprob: -18.50000762939453
    8. '`)' → logprob: -18.62500762939453
    9. '')
' → logprob: -19.00000762939453
    10. '');' → logprob: -19.50000762939453


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 45
Tokens correctement prédits (1ère position, stricte): 15
Tokens correctement prédits (1ère position, avec adaptation): 16
Tokens correctement prédits (top 10): 36
Précision stricte (1ère position): 33.33%
Précision adaptée (1ère position): 35.56%
Précision (top 10): 80.00%
================================================================================
