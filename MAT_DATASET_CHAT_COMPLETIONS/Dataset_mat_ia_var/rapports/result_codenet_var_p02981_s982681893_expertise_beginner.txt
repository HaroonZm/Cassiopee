================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:52:30
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n, a, b = input().split()
n = int(n)
a = int(a)
b = int(b)

total = a * n

if total >= b:
    print(b)
else:
    print(total)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' a' (ID: 261)
  → Token d'amorce (pas de prédiction)

Token 3: ',' (ID: 11)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.0340353399515152
    2. ',' → logprob: -4.0340352058410645
    3. ' =' → logprob: -4.1590352058410645
    4. '[' → logprob: -9.659035682678223
    5. '+' → logprob: -11.034035682678223
    6. '_' → logprob: -11.659035682678223
    7. ')' → logprob: -11.659035682678223
    8. '*' → logprob: -11.909035682678223
    9. '.' → logprob: -12.284035682678223
    10. ' ' → logprob: -12.284035682678223

Token 4: ' b' (ID: 287)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.01396133191883564
    2. ' =' → logprob: -4.513961315155029
    3. ',' → logprob: -5.888961315155029
    4. ' ' → logprob: -10.263961791992188
    5. '_' → logprob: -10.763961791992188
    6. ')' → logprob: -10.763961791992188
    7. '.' → logprob: -10.763961791992188
    8. '[' → logprob: -10.888961791992188
    9. ';' → logprob: -12.138961791992188
    10. 'i' → logprob: -12.763961791992188

Token 5: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.0072115142829716206
    2. ' =' → logprob: -5.007211685180664
    3. ',' → logprob: -7.757211685180664
    4. ';' → logprob: -11.007211685180664
    5. '.' → logprob: -11.632211685180664
    6. '_' → logprob: -11.632211685180664
    7. '=
' → logprob: -11.757211685180664
    8. '[' → logprob: -11.882211685180664
    9. ')' → logprob: -12.632211685180664
    10. '#' → logprob: -12.757211685180664

Token 6: ' input' (ID: 3422)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5722630620002747
    2. ' map' → logprob: -1.4472630023956299
    3. '0' → logprob: -2.19726300239563
    4. 'map' → logprob: -2.94726300239563
    5. ' input' → logprob: -3.82226300239563
    6. 'input' → logprob: -4.322263240814209
    7. '1' → logprob: -6.947263240814209
    8. ' list' → logprob: -8.82226276397705
    9. '10' → logprob: -8.82226276397705
    10. ' [' → logprob: -8.82226276397705

Token 7: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.003260177094489336
    2. '()' → logprob: -6.878260135650635
    3. '.' → logprob: -7.378260135650635
    4. '('' → logprob: -8.003260612487793
    5. '(
' → logprob: -8.128260612487793
    6. ''' → logprob: -8.628260612487793
    7. '("("' → logprob: -8.628260612487793
    8. '(.)' → logprob: -9.128260612487793
    9. '```' → logprob: -9.253260612487793
    10. '[' → logprob: -9.503260612487793

Token 8: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00043734462815336883
    2. 'strip' → logprob: -7.750437259674072
    3. ' split' → logprob: -12.25043773651123
    4. '```' → logprob: -14.00043773651123
    5. 'spl' → logprob: -14.87543773651123
    6. 'rstrip' → logprob: -15.25043773651123
    7. '.split' → logprob: -16.250436782836914
    8. 's' → logprob: -16.250436782836914
    9. '()' → logprob: -16.250436782836914
    10. 'replace' → logprob: -16.375436782836914

Token 9: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0031030885875225067
    2. '()' → logprob: -6.003103256225586
    3. '('' → logprob: -8.253103256225586
    4. '(
' → logprob: -8.503103256225586
    5. '(

' → logprob: -9.878103256225586
    6. '`' → logprob: -10.628103256225586
    7. '```' → logprob: -10.878103256225586
    8. '(`' → logprob: -11.128103256225586
    9. ''' → logprob: -11.253103256225586
    10. '("("' → logprob: -11.378103256225586

Token 10: 'n' (ID: 77)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.802665114402771
    2. '=' → logprob: -1.052665114402771
    3. 'n' → logprob: -3.0526652336120605
    4. ',' → logprob: -3.6776652336120605
    5. 'int' → logprob: -3.9276652336120605
    6. '```' → logprob: -4.0526652336120605
    7. '.' → logprob: -4.1776652336120605
    8. '\n' → logprob: -4.1776652336120605
    9. '[int' → logprob: -4.4276652336120605
    10. '[' → logprob: -4.8026652336120605

Token 11: ' =' (ID: 314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 12: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.3869059979915619
    2. ' int' → logprob: -1.1369060277938843
    3. ' n' → logprob: -10.761905670166016
    4. 'n' → logprob: -11.636905670166016
    5. '0' → logprob: -13.511905670166016
    6. ' ' → logprob: -13.886905670166016
    7. '(int' → logprob: -14.511905670166016
    8. '[int' → logprob: -14.761905670166016
    9. '10' → logprob: -15.136905670166016
    10. ''int' → logprob: -15.261905670166016

Token 13: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.048674799501895905
    2. '(n' → logprob: -3.0486748218536377
    3. '('' → logprob: -9.923674583435059
    4. '(a' → logprob: -11.173674583435059
    5. '("("' → logprob: -12.048674583435059
    6. '()' → logprob: -13.173674583435059
    7. '(

' → logprob: -13.423674583435059
    8. '(`' → logprob: -13.548674583435059
    9. '("' → logprob: -13.548674583435059
    10. '(int' → logprob: -13.798674583435059

Token 14: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.6166903151315637e-05
    2. ')
' → logprob: -11.875016212463379
    3. ' )' → logprob: -12.875016212463379
    4. '```' → logprob: -13.625016212463379
    5. '`)' → logprob: -13.750016212463379
    6. '')' → logprob: -13.875016212463379
    7. ')n' → logprob: -14.250016212463379
    8. '),' → logprob: -14.500016212463379
    9. ')`' → logprob: -14.875016212463379
    10. '+' → logprob: -15.250016212463379

Token 15: 'a' (ID: 64)
  Prédit: 'a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.011338522657752037
    2. ' a' → logprob: -4.511338710784912
    3. 'c' → logprob: -9.261338233947754
    4. ' ' → logprob: -10.261338233947754
    5. '<|end|>' → logprob: -10.261338233947754
    6. 'b' → logprob: -10.386338233947754
    7. ',' → logprob: -10.511338233947754
    8. '```' → logprob: -10.761338233947754
    9. 'i' → logprob: -11.386338233947754
    10. 'n' → logprob: -11.386338233947754

Token 16: ' =' (ID: 314)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.28888311982154846
    2. '=' → logprob: -2.6638832092285156
    3. '+' → logprob: -2.9138832092285156
    4. ' =' → logprob: -2.9138832092285156
    5. '<|end|>' → logprob: -3.5388832092285156
    6. '[' → logprob: -4.663883209228516
    7. ')' → logprob: -4.663883209228516
    8. '*' → logprob: -5.288883209228516
    9. '.' → logprob: -5.538883209228516
    10. '=int' → logprob: -5.788883209228516

Token 17: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.0025962304789572954
    2. ' int' → logprob: -6.002596378326416
    3. 'input' → logprob: -10.002595901489258
    4. 'float' → logprob: -10.127595901489258
    5. 'list' → logprob: -11.127595901489258
    6. 'a' → logprob: -11.627595901489258
    7. '[int' → logprob: -11.752595901489258
    8. 'str' → logprob: -14.002595901489258
    9. '(int' → logprob: -14.627595901489258
    10. '0' → logprob: -14.877595901489258

Token 18: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.12699340283870697
    2. '(' → logprob: -2.126993417739868
    3. '(n' → logprob: -10.126993179321289
    4. ' (' → logprob: -12.126993179321289
    5. '(b' → logprob: -12.126993179321289
    6. '('' → logprob: -12.376993179321289
    7. '()' → logprob: -12.626993179321289
    8. 'a' → logprob: -13.626993179321289
    9. '(A' → logprob: -14.251993179321289
    10. '(x' → logprob: -14.376993179321289

Token 19: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0001940040965564549
    2. ')
' → logprob: -8.62519359588623
    3. ' )' → logprob: -12.37519359588623
    4. '')' → logprob: -12.62519359588623
    5. '`)' → logprob: -13.37519359588623
    6. '```' → logprob: -13.37519359588623
    7. ')`' → logprob: -14.12519359588623
    8. ')

' → logprob: -14.25019359588623
    9. '),' → logprob: -14.50019359588623
    10. ')a' → logprob: -15.25019359588623

Token 20: 'b' (ID: 65)
  Prédit: 'b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.687464714050293
    2. ' b' → logprob: -0.812464714050293
    3. ' ' → logprob: -3.062464714050293
    4. ' 
' → logprob: -5.937464714050293
    5. '```' → logprob: -6.062464714050293
    6. ''' → logprob: -7.937464714050293
    7. '`' → logprob: -8.062464714050293
    8. '<|end|>' → logprob: -8.437464714050293
    9. ')' → logprob: -9.187464714050293
    10. '``' → logprob: -9.187464714050293

Token 21: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.14278046786785126
    2. '=' → logprob: -2.0177805423736572
    3. ')' → logprob: -10.017780303955078
    4. '=int' → logprob: -10.517780303955078
    5. '<|end|>' → logprob: -11.892780303955078
    6. '_' → logprob: -12.392780303955078
    7. ' ' → logprob: -12.392780303955078
    8. 'int' → logprob: -13.267780303955078
    9. ',' → logprob: -13.267780303955078
    10. ' ==' → logprob: -13.517780303955078

Token 22: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.003219184000045061
    2. ' int' → logprob: -5.753219127655029
    3. '(int' → logprob: -10.128219604492188
    4. 'b' → logprob: -14.503219604492188
    5. '<int' → logprob: -14.753219604492188
    6. '0' → logprob: -15.503219604492188
    7. '[int' → logprob: -15.753219604492188
    8. 'input' → logprob: -16.503219604492188
    9. '=int' → logprob: -17.003219604492188
    10. '	int' → logprob: -17.128219604492188

Token 23: '(b' (ID: 3229)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.04591505602002144
    2. '(b' → logprob: -3.170915126800537
    3. '(a' → logprob: -6.420915126800537
    4. '(n' → logprob: -7.545915126800537
    5. '('' → logprob: -7.545915126800537
    6. ' (' → logprob: -10.170914649963379
    7. '()' → logprob: -10.545914649963379
    8. 'b' → logprob: -10.670914649963379
    9. '("("' → logprob: -10.670914649963379
    10. '((' → logprob: -11.045914649963379

Token 24: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -5.512236498361744e-07
    2. ')
' → logprob: -15.625000953674316
    3. ' )' → logprob: -16.125
    4. '')' → logprob: -16.625
    5. '))' → logprob: -16.75
    6. '```' → logprob: -16.75
    7. '<|end|>' → logprob: -17.0
    8. '`)' → logprob: -17.75
    9. '#' → logprob: -17.875
    10. '),' → logprob: -18.0

Token 25: 'total' (ID: 9577)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.6626805663108826
    2. 'i' → logprob: -1.9126806259155273
    3. 'for' → logprob: -2.1626806259155273
    4. 'c' → logprob: -2.4126806259155273
    5. 's' → logprob: -3.1626806259155273
    6. 'x' → logprob: -3.2876806259155273
    7. 'n' → logprob: -4.662680625915527
    8. 'result' → logprob: -4.912680625915527
    9. 'd' → logprob: -5.287680625915527
    10. 'p' → logprob: -5.662680625915527

Token 26: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.013219048269093037
    2. '_sum' → logprob: -5.513218879699707
    3. '_space' → logprob: -5.888218879699707
    4. ' =' → logprob: -6.638218879699707
    5. '_count' → logprob: -6.888218879699707
    6. '_amount' → logprob: -7.138218879699707
    7. '=' → logprob: -7.638218879699707
    8. ' ' → logprob: -8.013218879699707
    9. '_points' → logprob: -8.013218879699707
    10. ')' → logprob: -8.263218879699707

Token 27: ' a' (ID: 261)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0360301174223423
    2. 'a' → logprob: -4.036030292510986
    3. 'n' → logprob: -4.536030292510986
    4. ' ' → logprob: -5.411030292510986
    5. ' n' → logprob: -6.661030292510986
    6. 'b' → logprob: -7.786030292510986
    7. ' a' → logprob: -8.161029815673828
    8. 'max' → logprob: -9.036029815673828
    9. 'min' → logprob: -9.286029815673828
    10. '(n' → logprob: -9.661029815673828

Token 28: ' *' (ID: 425)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.056896429508924484
    2. ' +' → logprob: -3.681896448135376
    3. '*' → logprob: -4.306896209716797
    4. '<|end|>' → logprob: -4.431896209716797
    5. ' *' → logprob: -5.556896209716797
    6. ' ' → logprob: -7.681896209716797
    7. '+b' → logprob: -8.306896209716797
    8. '-' → logprob: -10.431896209716797
    9. ')' → logprob: -10.681896209716797
    10. '*n' → logprob: -10.931896209716797

Token 29: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.033142443746328354
    2. ' n' → logprob: -3.908142328262329
    3. 'b' → logprob: -4.408142566680908
    4. ' b' → logprob: -8.40814208984375
    5. '(n' → logprob: -10.40814208984375
    6. '0' → logprob: -10.90814208984375
    7. '100' → logprob: -11.28314208984375
    8. '2' → logprob: -11.40814208984375
    9. ' ' → logprob: -11.40814208984375
    10. '1' → logprob: -11.53314208984375

Token 30: '

' (ID: 279)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.07051661610603333
    2. ' +' → logprob: -2.695516586303711
    3. ' ' → logprob: -8.195516586303711
    4. ' if' → logprob: -9.320516586303711
    5. 'if' → logprob: -9.945516586303711
    6. '>' → logprob: -9.945516586303711
    7. '<|end|>' → logprob: -10.070516586303711
    8. '+b' → logprob: -10.320516586303711
    9. '-' → logprob: -10.695516586303711
    10. ' -' → logprob: -12.820516586303711

Token 31: 'if' (ID: 366)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -1.1017951965332031
    2. 'if' → logprob: -1.3517951965332031
    3. ' if' → logprob: -1.4767951965332031
    4. '-' → logprob: -2.351795196533203
    5. '<|end|>' → logprob: -2.851795196533203
    6. ' ' → logprob: -4.976795196533203
    7. ' +' → logprob: -5.101795196533203
    8. ' -' → logprob: -5.226795196533203
    9. '
' → logprob: -5.226795196533203
    10. '>' → logprob: -7.476795196533203

Token 32: ' total' (ID: 3609)
  Prédit: ' total'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' total' → logprob: -0.0007879483746364713
    2. ' ' → logprob: -7.875787734985352
    3. 'total' → logprob: -7.875787734985352
    4. '(total' → logprob: -11.625787734985352
    5. ' b' → logprob: -12.750787734985352
    6. ' ' → logprob: -12.875787734985352
    7. ' tot' → logprob: -12.875787734985352
    8. '  ' → logprob: -13.250787734985352
    9. '	total' → logprob: -13.375787734985352
    10. ' not' → logprob: -13.500787734985352

Token 33: ' >=' (ID: 5064)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.3425872027873993
    2. ' <=' → logprob: -1.7175872325897217
    3. ' <' → logprob: -2.4675872325897217
    4. ' >=' → logprob: -4.092586994171143
    5. '>' → logprob: -5.342586994171143
    6. '<' → logprob: -6.342586994171143
    7. ' ==' → logprob: -6.592586994171143
    8. '<=' → logprob: -7.217586994171143
    9. '>=' → logprob: -8.7175874710083
    10. ' !=' → logprob: -9.2175874710083

Token 34: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.20142056047916412
    2. ' b' → logprob: -1.701420545578003
    3. ' ' → logprob: -12.076420783996582
    4. '	b' → logprob: -14.576420783996582
    5. '100' → logprob: -14.701420783996582
    6. '0' → logprob: -15.576420783996582
    7. '<|end|>' → logprob: -16.576419830322266
    8. '>b' → logprob: -16.701419830322266
    9. '20' → logprob: -17.326419830322266
    10. '10' → logprob: -17.326419830322266

Token 35: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.038079943507909775
    2. ' :' → logprob: -3.2880799770355225
    3. ':
' → logprob: -10.788080215454102
    4. ' *' → logprob: -12.163080215454102
    5. ' :
' → logprob: -12.288080215454102
    6. '*' → logprob: -13.163080215454102
    7. ' and' → logprob: -13.663080215454102
    8. '*:' → logprob: -14.038080215454102
    9. '**' → logprob: -14.163080215454102
    10. '+:' → logprob: -14.538080215454102

Token 36: '   ' (ID: 271)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.6798900365829468
    2. 'print' → logprob: -1.3048900365829468
    3. '   ' → logprob: -1.6798900365829468
    4. ' total' → logprob: -3.5548901557922363
    5. 'total' → logprob: -5.804890155792236
    6. ':' → logprob: -6.554890155792236
    7. '\n' → logprob: -6.929890155792236
    8. '	print' → logprob: -7.929890155792236
    9. '+' → logprob: -8.429889678955078
    10. ' ' → logprob: -8.429889678955078

Token 37: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.164323627948761
    2. ' print' → logprob: -1.9143235683441162
    3. 'total' → logprob: -6.289323806762695
    4. '   ' → logprob: -6.664323806762695
    5. ' total' → logprob: -7.039323806762695
    6. ' ' → logprob: -10.414323806762695
    7. '    ' → logprob: -11.539323806762695
    8. '	print' → logprob: -11.664323806762695
    9. 'b' → logprob: -11.789323806762695
    10. 'pr' → logprob: -12.414323806762695

Token 38: '(b' (ID: 3229)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.25460878014564514
    2. '(total' → logprob: -2.2546088695526123
    3. '(b' → logprob: -2.6296088695526123
    4. '("' → logprob: -3.6296088695526123
    5. 'total' → logprob: -4.629608631134033
    6. '('' → logprob: -5.379608631134033
    7. '"' → logprob: -6.129608631134033
    8. '()' → logprob: -6.504608631134033
    9. 'b' → logprob: -6.504608631134033
    10. ' (' → logprob: -8.129609107971191

Token 39: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.688212614681106e-05
    2. ')
' → logprob: -11.500017166137695
    3. ' )' → logprob: -12.250017166137695
    4. '*' → logprob: -14.500017166137695
    5. '))' → logprob: -15.000017166137695
    6. '')' → logprob: -16.000017166137695
    7. '`)' → logprob: -16.125017166137695
    8. ')`' → logprob: -16.250017166137695
    9. '**' → logprob: -16.375017166137695
    10. ')#' → logprob: -16.500017166137695

Token 40: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -2.3676733690081164e-05
    2. ' else' → logprob: -10.87502384185791
    3. '```' → logprob: -13.25002384185791
    4. '<|end|>' → logprob: -13.25002384185791
    5. 'elif' → logprob: -14.12502384185791
    6. '_else' → logprob: -15.12502384185791
    7. '   ' → logprob: -16.625022888183594
    8. '#else' → logprob: -16.750022888183594
    9. '``' → logprob: -17.375022888183594
    10. '	else' → logprob: -17.500022888183594

Token 41: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.006783219985663891
    2. ':
' → logprob: -5.2567830085754395
    3. '   ' → logprob: -6.6317830085754395
    4. ' :' → logprob: -8.756783485412598
    5. 'print' → logprob: -10.631783485412598
    6. ' :
' → logprob: -10.631783485412598
    7. '    ' → logprob: -11.881783485412598
    8. ' print' → logprob: -12.006783485412598
    9. ':
' → logprob: -12.881783485412598
    10. '    
' → logprob: -13.131783485412598

Token 42: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.025955956429243088
    2. 'total' → logprob: -3.90095591545105
    3. '   ' → logprob: -5.275956153869629
    4. '(total' → logprob: -8.775956153869629
    5. ' print' → logprob: -9.775956153869629
    6. '```' → logprob: -10.900956153869629
    7. '(print' → logprob: -10.900956153869629
    8. ' total' → logprob: -11.150956153869629
    9. '    
' → logprob: -12.025956153869629
    10. '	print' → logprob: -12.525956153869629

Token 43: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.00012606535165105015
    2. 'total' → logprob: -9.000125885009766
    3. '   ' → logprob: -13.375125885009766
    4. ' print' → logprob: -13.750125885009766
    5. '	print' → logprob: -18.750125885009766
    6. '.print' → logprob: -19.000125885009766
    7. '  ' → logprob: -19.125125885009766
    8. 'pr' → logprob: -19.500125885009766
    9. ' total' → logprob: -19.500125885009766
    10. 'printf' → logprob: -19.500125885009766

Token 44: '(total' (ID: 39744)
  Prédit: '(total'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(total' → logprob: -0.0005597044946625829
    2. '(' → logprob: -7.5005598068237305
    3. '(t' → logprob: -12.50055980682373
    4. 'total' → logprob: -13.00055980682373
    5. '(a' → logprob: -14.50055980682373
    6. '((' → logprob: -16.875558853149414
    7. '(to' → logprob: -17.375558853149414
    8. '(n' → logprob: -17.625558853149414
    9. '(max' → logprob: -17.625558853149414
    10. ' total' → logprob: -17.750558853149414

Token 45: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.128163257315464e-07
    2. ')
' → logprob: -15.5
    3. ' )' → logprob: -16.875
    4. '))' → logprob: -17.375
    5. '）' → logprob: -19.875
    6. ')`' → logprob: -20.0
    7. ')#' → logprob: -20.25
    8. '')' → logprob: -20.875
    9. '}' → logprob: -21.25
    10. '`)' → logprob: -21.25


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 43
Tokens correctement prédits (1ère position, stricte): 9
Tokens correctement prédits (1ère position, avec adaptation): 11
Tokens correctement prédits (top 10): 36
Précision stricte (1ère position): 20.93%
Précision adaptée (1ère position): 25.58%
Précision (top 10): 83.72%
================================================================================
