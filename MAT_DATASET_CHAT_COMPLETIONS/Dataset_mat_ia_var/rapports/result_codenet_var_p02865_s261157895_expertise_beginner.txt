================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:39:21
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N = int(input())
a = 0
if N % 2 == 0:
    a = int(N / 2) - 1
else:
    a = int(N / 2)
print(a)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0003567959647625685
    2. '(N' → logprob: -9.000356674194336
    3. '('' → logprob: -9.500356674194336
    4. ''' → logprob: -9.875356674194336
    5. '`' → logprob: -10.500356674194336
    6. '```' → logprob: -10.500356674194336
    7. '("("' → logprob: -11.375356674194336
    8. '()' → logprob: -11.500356674194336
    9. '(input' → logprob: -11.625356674194336
    10. '(
' → logprob: -12.250356674194336

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5405747294425964
    2. ')' → logprob: -0.9155747294425964
    3. '()' → logprob: -4.290574550628662
    4. '())' → logprob: -5.915574550628662
    5. '(
' → logprob: -8.41557502746582
    6. '```' → logprob: -9.16557502746582
    7. '))' → logprob: -9.29057502746582
    8. '")' → logprob: -9.54057502746582
    9. '(

' → logprob: -9.79057502746582
    10. '`)' → logprob: -9.79057502746582

Token 5: 'a' (ID: 64)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.5391327142715454
    2. 'if' → logprob: -2.289132595062256
    3. 's' → logprob: -2.664132595062256
    4. 'a' → logprob: -2.664132595062256
    5. 'x' → logprob: -3.539132595062256
    6. 'i' → logprob: -3.539132595062256
    7. ' ' → logprob: -4.039132595062256
    8. 'f' → logprob: -4.164132595062256
    9. '[' → logprob: -4.539132595062256
    10. ' for' → logprob: -4.664132595062256

Token 6: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.000689082604367286
    2. '\[' → logprob: -8.625689506530762
    3. '[i' → logprob: -9.125689506530762
    4. '[a' → logprob: -9.125689506530762
    5. '+' → logprob: -9.875689506530762
    6. '[]' → logprob: -10.250689506530762
    7. '.' → logprob: -10.500689506530762
    8. '[r' → logprob: -10.625689506530762
    9. 'a' → logprob: -10.750689506530762
    10. '=' → logprob: -10.875689506530762

Token 7: ' ' (ID: 220)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.3034156560897827
    2. 'list' → logprob: -1.5534156560897827
    3. ' []' → logprob: -3.5534157752990723
    4. ' list' → logprob: -4.928415775299072
    5. '[' → logprob: -5.178415775299072
    6. '[input' → logprob: -5.678415775299072
    7. '[int' → logprob: -6.303415775299072
    8. 'input' → logprob: -6.428415775299072
    9. ' [' → logprob: -6.928415775299072
    10. '[list' → logprob: -7.928415775299072

Token 8: '0' (ID: 15)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.7167311310768127
    2. 'list' → logprob: -1.216731071472168
    3. 'input' → logprob: -1.966731071472168
    4. '0' → logprob: -3.591731071472168
    5. 'N' → logprob: -3.716731071472168
    6. 'int' → logprob: -4.091731071472168
    7. '1' → logprob: -6.216731071472168
    8. '[int' → logprob: -6.341731071472168
    9. '[input' → logprob: -6.841731071472168
    10. '[' → logprob: -7.091731071472168

Token 9: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.018427463248372078
    2. '<|end|>' → logprob: -5.26842737197876
    3. 'for' → logprob: -5.64342737197876
    4. 'a' → logprob: -6.14342737197876
    5. 'b' → logprob: -6.64342737197876
    6. '\n' → logprob: -6.89342737197876
    7. '
' → logprob: -7.14342737197876
    8. ' 
' → logprob: -7.26842737197876
    9. 'while' → logprob: -7.26842737197876
    10. '\' → logprob: -7.39342737197876

Token 10: 'if' (ID: 366)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.7233229279518127
    2. 'for' → logprob: -1.473322868347168
    3. 'b' → logprob: -1.598322868347168
    4. ' for' → logprob: -3.473322868347168
    5. 'x' → logprob: -4.598322868347168
    6. ' ' → logprob: -4.723322868347168
    7. ',' → logprob: -5.473322868347168
    8. '```' → logprob: -5.473322868347168
    9. 'a' → logprob: -5.598322868347168
    10. 'f' → logprob: -5.848322868347168

Token 11: ' N' (ID: 478)
  Prédit: ' N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.630833625793457
    2. ' ' → logprob: -1.005833625793457
    3. ' a' → logprob: -2.505833625793457
    4. 'a' → logprob: -4.005833625793457
    5. 'N' → logprob: -6.505833625793457
    6. '  ' → logprob: -8.380833625793457
    7. ' ' → logprob: -8.755833625793457
    8. ' not' → logprob: -9.005833625793457
    9. ' )' → logprob: -9.880833625793457
    10. ''' → logprob: -10.380833625793457

Token 12: ' %' (ID: 1851)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.1687995195388794
    2. ' ' → logprob: -2.41879940032959
    3. '>' → logprob: -3.66879940032959
    4. ' >=' → logprob: -4.04379940032959
    5. ' ==' → logprob: -4.66879940032959
    6. ' <' → logprob: -4.66879940032959
    7. ' <=' → logprob: -6.16879940032959
    8. ' %' → logprob: -7.54379940032959
    9. '==' → logprob: -7.91879940032959
    10. '%' → logprob: -8.04379940032959

Token 13: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3488006293773651
    2. '2' → logprob: -1.2238006591796875
    3. '3' → logprob: -8.223800659179688
    4. '4' → logprob: -10.223800659179688
    5. '1' → logprob: -10.598800659179688
    6. '10' → logprob: -12.098800659179688
    7. '6' → logprob: -12.223800659179688
    8. '5' → logprob: -12.598800659179688
    9. ' ' → logprob: -12.723800659179688
    10. '7' → logprob: -12.973800659179688

Token 14: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.019989803433418274
    2. '3' → logprob: -4.144989967346191
    3. ' ' → logprob: -6.394989967346191
    4. '4' → logprob: -7.144989967346191
    5. '5' → logprob: -7.269989967346191
    6. '10' → logprob: -7.894989967346191
    7. '7' → logprob: -8.769989967346191
    8. '6' → logprob: -9.269989967346191
    9. '1' → logprob: -9.519989967346191
    10. '9' → logprob: -10.519989967346191

Token 15: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.0895681157708168
    2. '==' → logprob: -2.5895681381225586
    3. '=' → logprob: -5.214568138122559
    4. ' !=' → logprob: -5.714568138122559
    5. ' =' → logprob: -6.589568138122559
    6. ' ' → logprob: -8.089568138122559
    7. '!=' → logprob: -9.089568138122559
    8. ':' → logprob: -10.214568138122559
    9. ')' → logprob: -10.839568138122559
    10. ' :' → logprob: -11.339568138122559

Token 16: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.17977629601955414
    2. '0' → logprob: -1.8047763109207153
    3. '1' → logprob: -10.804776191711426
    4. '2' → logprob: -11.429776191711426
    5. ' ' → logprob: -15.429776191711426
    6. '=' → logprob: -16.679777145385742
    7. '```' → logprob: -16.929777145385742
    8. ' a' → logprob: -17.617277145385742
    9. ')' → logprob: -17.679777145385742
    10. ''' → logprob: -17.804777145385742

Token 17: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.016299692913889885
    2. ' ' → logprob: -4.141299724578857
    3. '2' → logprob: -8.5162992477417
    4. '1' → logprob: -9.6412992477417
    5. '=' → logprob: -16.891300201416016
    6. '4' → logprob: -17.141300201416016
    7. '```' → logprob: -17.141300201416016
    8. '3' → logprob: -17.766300201416016
    9. '==' → logprob: -17.953800201416016
    10. '  ' → logprob: -18.078800201416016

Token 18: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.3663626305060461e-05
    2. ' :' → logprob: -11.50001335144043
    3. ':
' → logprob: -13.87501335144043
    4. '):' → logprob: -14.25001335144043
    5. ':**' → logprob: -14.25001335144043
    6. '':' → logprob: -14.75001335144043
    7. '':'' → logprob: -15.12501335144043
    8. '>:' → logprob: -15.62501335144043
    9. '+:' → logprob: -16.62501335144043
    10. '：' → logprob: -16.87501335144043

Token 19: '   ' (ID: 271)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.10470869392156601
    2. ' ' → logprob: -2.979708671569824
    3. 'a' → logprob: -3.979708671569824
    4. '   ' → logprob: -4.354708671569824
    5. ' 
' → logprob: -5.104708671569824
    6. '\' → logprob: -5.729708671569824
    7. ' \' → logprob: -6.104708671569824
    8. '\n' → logprob: -6.104708671569824
    9. '    ' → logprob: -7.104708671569824
    10. ''' → logprob: -7.229708671569824

Token 20: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.09198202192783356
    2. '   ' → logprob: -3.091982126235962
    3. 'a' (adapté à ' a') → logprob: -3.466982126235962
    4. ' ' → logprob: -4.966981887817383
    5. '    ' → logprob: -6.091981887817383
    6. ' print' → logprob: -7.466981887817383
    7. ''' → logprob: -8.091981887817383
    8. ' 
' → logprob: -8.341981887817383
    9. ' \' → logprob: -8.841981887817383
    10. ' `' → logprob: -8.841981887817383

Token 21: ' =' (ID: 314)
  Prédit: ' +='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.6426799893379211
    2. '=' → logprob: -1.1426799297332764
    3. '+=' → logprob: -2.2676799297332764
    4. ' =' → logprob: -3.1426799297332764
    5. '+' → logprob: -4.8926801681518555
    6. ' ' → logprob: -7.0176801681518555
    7. ' +' → logprob: -10.767680168151855
    8. '+='' → logprob: -12.767680168151855
    9. '_' → logprob: -13.142680168151855
    10. ' ' → logprob: -13.642680168151855

Token 22: ' int' (ID: 677)
  Prédit: ' N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.07087493687868118
    2. 'N' → logprob: -2.8208749294281006
    3. '1' → logprob: -5.57087516784668
    4. ' ' → logprob: -5.69587516784668
    5. '2' → logprob: -7.32087516784668
    6. '0' → logprob: -7.94587516784668
    7. '"' → logprob: -8.07087516784668
    8. ' "' → logprob: -9.07087516784668
    9. ''' → logprob: -9.69587516784668
    10. '"N' → logprob: -9.82087516784668

Token 23: '(N' (ID: 10564)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004787765443325043
    2. '('' → logprob: -5.629787921905518
    3. '(input' → logprob: -7.629787921905518
    4. ''' → logprob: -8.25478744506836
    5. '(N' → logprob: -8.37978744506836
    6. '(a' → logprob: -9.87978744506836
    7. 'a' → logprob: -10.50478744506836
    8. ' (' → logprob: -10.50478744506836
    9. '("' → logprob: -10.62978744506836
    10. '"' → logprob: -10.87978744506836

Token 24: ' /' (ID: 820)
  Prédit: '/'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '/' → logprob: -0.4376089572906494
    2. ' /' → logprob: -1.0626089572906494
    3. ')' → logprob: -5.06260871887207
    4. ' //' → logprob: -6.31260871887207
    5. '//' → logprob: -8.31260871887207
    6. ' ' → logprob: -8.68760871887207
    7. ' )' → logprob: -8.68760871887207
    8. '**' → logprob: -9.93760871887207
    9. '*' → logprob: -10.56260871887207
    10. ' ' → logprob: -10.93760871887207

Token 25: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.005929743405431509
    2. ' ' → logprob: -5.130929946899414
    3. ')' → logprob: -14.880929946899414
    4. '4' → logprob: -15.505929946899414
    5. '1' → logprob: -15.880929946899414
    6. '3' → logprob: -16.130929946899414
    7. ' )' → logprob: -17.443429946899414
    8. '   ' → logprob: -17.568429946899414
    9. '```' → logprob: -17.568429946899414
    10. ' ' → logprob: -17.630929946899414

Token 26: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0017120669363066554
    2. ' ' → logprob: -6.376711845397949
    3. '4' → logprob: -12.25171184539795
    4. '3' → logprob: -13.50171184539795
    5. '10' → logprob: -13.75171184539795
    6. '6' → logprob: -14.25171184539795
    7. ')' → logprob: -14.87671184539795
    8. '1' → logprob: -15.00171184539795
    9. '   ' → logprob: -15.00171184539795
    10. '  ' → logprob: -15.25171184539795

Token 27: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00018530222587287426
    2. '*' → logprob: -9.250185012817383
    3. ')
' → logprob: -10.250185012817383
    4. ' )' → logprob: -11.000185012817383
    5. ')*' → logprob: -11.375185012817383
    6. '))' → logprob: -11.875185012817383
    7. '+' → logprob: -12.125185012817383
    8. '**' → logprob: -12.750185012817383
    9. '*)' → logprob: -13.750185012817383
    10. ')+' → logprob: -13.750185012817383

Token 28: ' -' (ID: 533)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '*' → logprob: -0.8903154134750366
    2. '+' → logprob: -1.2653154134750366
    3. 'else' → logprob: -2.015315532684326
    4. '\n' → logprob: -3.265315532684326
    5. ' else' → logprob: -3.515315532684326
    6. '
' → logprob: -3.765315532684326
    7. '<|end|>' → logprob: -3.765315532684326
    8. ')' → logprob: -4.640315532684326
    9. ':' → logprob: -4.890315532684326
    10. '-' → logprob: -5.140315532684326

Token 29: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00761005561798811
    2. ' ' → logprob: -4.882609844207764
    3. '2' → logprob: -12.882610321044922
    4. '3' → logprob: -15.507610321044922
    5. '0' → logprob: -15.507610321044922
    6. '(' → logprob: -16.007610321044922
    7. '  ' → logprob: -16.007610321044922
    8. '9' → logprob: -16.257610321044922
    9. '4' → logprob: -16.507610321044922
    10. 'a' → logprob: -16.820110321044922

Token 30: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.4259644558478612e-05
    2. ' ' → logprob: -11.250014305114746
    3. '2' → logprob: -14.000014305114746
    4. '(' → logprob: -16.43751335144043
    5. '<|end|>' → logprob: -16.75001335144043
    6. '0' → logprob: -16.81251335144043
    7. '```' → logprob: -17.37501335144043
    8. '  ' → logprob: -17.68751335144043
    9. '   ' → logprob: -18.00001335144043
    10. 'a' → logprob: -18.12501335144043

Token 31: '
' (ID: 198)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.2552627921104431
    2. ' else' → logprob: -2.630262851715088
    3. '
' → logprob: -2.630262851715088
    4. '\n' → logprob: -3.130262851715088
    5. '```' → logprob: -4.880262851715088
    6. '<|end|>' → logprob: -5.380262851715088
    7. ' 
' → logprob: -5.630262851715088
    8. '\' → logprob: -5.755262851715088
    9. 'newline' → logprob: -5.880262851715088
    10. 'elif' → logprob: -6.255262851715088

Token 32: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.18726962804794312
    2. '\n' → logprob: -2.687269687652588
    3. ' else' → logprob: -3.312269687652588
    4. '```' → logprob: -4.062269687652588
    5. '
' → logprob: -4.187269687652588
    6. 'elif' → logprob: -5.187269687652588
    7. '\' → logprob: -5.437269687652588
    8. '<|end|>' → logprob: -5.562269687652588
    9. 'print' → logprob: -5.812269687652588
    10. 'newline' → logprob: -5.937269687652588

Token 33: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -4.978233846486546e-05
    2. ' :' → logprob: -10.250049591064453
    3. ':
' → logprob: -11.250049591064453
    4. '   ' → logprob: -15.000049591064453
    5. '：' → logprob: -15.000049591064453
    6. ':**' → logprob: -15.625049591064453
    7. '```' → logprob: -16.125049591064453
    8. '):' → logprob: -16.500049591064453
    9. ':
' → logprob: -16.625049591064453
    10. ':return' → logprob: -16.875049591064453

Token 34: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.1556729078292847
    2. '   ' → logprob: -1.1556729078292847
    3. '1' → logprob: -2.030673027038574
    4. ' a' → logprob: -2.030673027038574
    5. 'a' → logprob: -2.905673027038574
    6. ''' → logprob: -3.530673027038574
    7. '    ' → logprob: -5.030673027038574
    8. '"' → logprob: -5.530673027038574
    9. '0' → logprob: -5.655673027038574
    10. ' 
' → logprob: -5.780673027038574

Token 35: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.9182629585266113
    2. 'a' (adapté à ' a') → logprob: -1.0432629585266113
    3. 'int' → logprob: -2.5432629585266113
    4. ' ' → logprob: -2.5432629585266113
    5. ' int' → logprob: -3.5432629585266113
    6. '1' → logprob: -3.7932629585266113
    7. '0' → logprob: -4.168262958526611
    8. ''' → logprob: -4.293262958526611
    9. '   ' → logprob: -5.918262958526611
    10. ' (' → logprob: -6.168262958526611

Token 36: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.06249874457716942
    2. '=' → logprob: -2.8124988079071045
    3. ' ' → logprob: -7.812498569488525
    4. ' +=' → logprob: -9.062499046325684
    5. '+=' → logprob: -12.687499046325684
    6. ')' → logprob: -12.812499046325684
    7. '+' → logprob: -14.312499046325684
    8. 'a' → logprob: -14.687499046325684
    9. ' |=' → logprob: -14.687499046325684
    10. '0' → logprob: -15.062499046325684

Token 37: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.854871928691864
    2. ' int' → logprob: -0.979871928691864
    3. ' N' → logprob: -1.8548719882965088
    4. 'N' → logprob: -3.854871988296509
    5. ' (' → logprob: -3.979871988296509
    6. '(int' → logprob: -6.72987174987793
    7. '(N' → logprob: -6.85487174987793
    8. ' ' → logprob: -7.72987174987793
    9. '(' → logprob: -8.60487174987793
    10. '0' → logprob: -10.97987174987793

Token 38: '(N' (ID: 10564)
  Prédit: '(N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.5235284566879272
    2. '(' → logprob: -0.8985284566879272
    3. '((' → logprob: -8.023528099060059
    4. ' (' → logprob: -10.273528099060059
    5. '(n' → logprob: -11.148528099060059
    6. 'N' → logprob: -11.898528099060059
    7. '(
' → logprob: -12.148528099060059
    8. '('' → logprob: -12.523528099060059
    9. '(a' → logprob: -13.398528099060059
    10. 'a' → logprob: -13.523528099060059

Token 39: ' /' (ID: 820)
  Prédit: ' /'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' /' → logprob: -0.18349435925483704
    2. '/' → logprob: -1.8084943294525146
    3. ' ' → logprob: -5.683494567871094
    4. ')' → logprob: -8.183494567871094
    5. ' )' → logprob: -10.183494567871094
    6. '-' → logprob: -11.933494567871094
    7. ' ' → logprob: -12.308494567871094
    8. '2' → logprob: -13.433494567871094
    9. ' //' → logprob: -13.808494567871094
    10. ' (' → logprob: -13.808494567871094

Token 40: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.12693314254283905
    2. ' ' → logprob: -2.1269330978393555
    3. ')' → logprob: -13.501933097839355
    4. '  ' → logprob: -13.626933097839355
    5. '1' → logprob: -14.001933097839355
    6. '3' → logprob: -14.626933097839355
    7. ' )' → logprob: -15.001933097839355
    8. ' ' → logprob: -15.376933097839355
    9. '   ' → logprob: -15.501933097839355
    10. '4' → logprob: -16.564434051513672

Token 41: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0017029138980433345
    2. ' ' → logprob: -6.376702785491943
    3. '1' → logprob: -14.876703262329102
    4. '  ' → logprob: -15.751703262329102
    5. '3' → logprob: -16.2517032623291
    6. '   ' → logprob: -16.3767032623291
    7. ')' → logprob: -17.2517032623291
    8. '```' → logprob: -17.7517032623291
    9. '２' → logprob: -18.1267032623291
    10. '    ' → logprob: -19.0642032623291

Token 42: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0003724006237462163
    2. ' )' → logprob: -8.500371932983398
    3. '+' → logprob: -9.000371932983398
    4. ' +' → logprob: -10.625371932983398
    5. ')+' → logprob: -11.375371932983398
    6. ')
' → logprob: -12.250371932983398
    7. '}' → logprob: -14.375371932983398
    8. '   ' → logprob: -14.375371932983398
    9. ' ' → logprob: -14.750371932983398
    10. '')' → logprob: -15.000371932983398

Token 43: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.05517100170254707
    2. '<|end|>' → logprob: -4.305171012878418
    3. '\n' → logprob: -4.430171012878418
    4. '#' → logprob: -5.055171012878418
    5. '
' → logprob: -5.305171012878418
    6. ' ' → logprob: -5.555171012878418
    7. ')' → logprob: -5.805171012878418
    8. 'b' → logprob: -5.930171012878418
    9. '+' → logprob: -6.430171012878418
    10. ' print' → logprob: -6.930171012878418

Token 44: '(a' (ID: 6271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.02326865680515766
    2. '(a' → logprob: -3.773268699645996
    3. '('' → logprob: -11.398268699645996
    4. '((' → logprob: -12.273268699645996
    5. '()' → logprob: -13.148268699645996
    6. '("("' → logprob: -13.148268699645996
    7. 'a' → logprob: -13.648268699645996
    8. '(N' → logprob: -14.023268699645996
    9. '(`' → logprob: -14.398268699645996
    10. '(
' → logprob: -15.523268699645996

Token 45: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.320199877838604e-07
    2. '))' → logprob: -15.875
    3. ' )' → logprob: -15.875
    4. ')`' → logprob: -17.75
    5. ')
' → logprob: -18.0
    6. '')' → logprob: -18.75
    7. ')a' → logprob: -19.125
    8. '+' → logprob: -19.125
    9. '`)' → logprob: -19.25
    10. '）' → logprob: -19.375


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 43
Tokens correctement prédits (1ère position, stricte): 19
Tokens correctement prédits (1ère position, avec adaptation): 19
Tokens correctement prédits (top 10): 37
Précision stricte (1ère position): 44.19%
Précision adaptée (1ère position): 44.19%
Précision (top 10): 86.05%
================================================================================
