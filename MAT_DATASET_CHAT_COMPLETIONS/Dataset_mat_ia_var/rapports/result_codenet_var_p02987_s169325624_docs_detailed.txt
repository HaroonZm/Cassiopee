================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:53:17
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import sys

# Import sys module to access standard input and set recursion limit
stdin = sys.stdin

# Increase maximum recursion limit to prevent stack overflow on large recursive calls
sys.setrecursionlimit(10 ** 7)

def li():
    """
    Lis une ligne depuis l'entrée standard, la divise selon les espaces,
    convertit chaque élément en int, et renvoie un itérable de ces entiers.
    """
    return map(int, stdin.readline().split())

def li_():
    """
    Lis une ligne depuis l'entrée standard, la divise selon les espaces,
    convertit chaque élément en int, puis soustrait 1 à chaque valeur.
    Retourne un itérable de ces valeurs pour le cas d'indexation à partir de zéro.
    """
    return map(lambda x: int(x) - 1, stdin.readline().split())

def lf():
    """
    Lis une ligne depuis l'entrée standard, la divise selon les espaces,
    convertit chaque élément en float, et renvoie un itérable de ces flottants.
    """
    return map(float, stdin.readline().split())

def ls():
    """
    Lis une ligne depuis l'entrée standard et la divise en une liste de chaînes par espace.
    """
    return stdin.readline().split()

def ns():
    """
    Lis une ligne depuis l'entrée standard, enlève le retour à la ligne final,
    et retourne la chaîne résultante.
    """
    return stdin.readline().rstrip()

def lc():
    """
    Lis une ligne depuis l'entrée standard (sans le retour à la ligne)
    et retourne la chaîne sous forme de liste de caractères.
    """
    return list(ns())

def ni():
    """
    Lis une ligne depuis l'entrée standard, la convertit en entier, puis la retourne.
    """
    return int(stdin.readline())

def nf():
    """
    Lis une ligne depuis l'entrée standard, la convertit en float, puis la retourne.
    """
    return float(stdin.readline())

from collections import defaultdict

# Lecture de la chaîne à traiter depuis l'entrée standard
s = ns()

# Création d'un dictionnaire comptant les occurrences de chaque caractère de la chaîne
dic = defaultdict(int)
for si in s:
    dic[si] += 1

# Vérification de la condition : chaque caractère doit apparaître exactement deux fois
ok = True
for _, v in dic.items():
    if v != 2:
        ok = False
        break

# Affichage du résultat en fonction de la vérification
print("Yes" if ok else "No")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: '

' (ID: 279)
  → Token d'amorce (pas de prédiction)

Token 3: '#' (ID: 2)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0347585454583168
    2. '\n' → logprob: -4.034758567810059
    3. 'import' → logprob: -4.909758567810059
    4. '<|end|>' → logprob: -5.284758567810059
    5. '\' → logprob: -7.159758567810059
    6. '<|end|>' → logprob: -7.534758567810059
    7. 'newline' → logprob: -7.909758567810059
    8. ',' → logprob: -8.159758567810059
    9. '[' → logprob: -8.284758567810059
    10. '' → logprob: -8.284758567810059

Token 4: ' Import' (ID: 19998)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2402934730052948
    2. ' This' → logprob: -2.865293502807617
    3. ' The' → logprob: -3.740293502807617
    4. ' argparse' → logprob: -3.990293502807617
    5. ' is' → logprob: -4.615293502807617
    6. 'def' → logprob: -4.615293502807617
    7. ' argv' → logprob: -4.865293502807617
    8. ' def' → logprob: -4.990293502807617
    9. 'argv' → logprob: -4.990293502807617
    10. 'This' → logprob: -4.990293502807617

Token 5: ' sys' (ID: 12228)
  Prédit: ' os'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' os' → logprob: -0.051598772406578064
    2. ' sys' → logprob: -3.3015987873077393
    3. 'os' → logprob: -5.55159854888916
    4. '_' → logprob: -5.92659854888916
    5. ' numpy' → logprob: -6.42659854888916
    6. ' math' → logprob: -7.05159854888916
    7. '.' → logprob: -7.05159854888916
    8. 'import' → logprob: -7.42659854888916
    9. ',' → logprob: -7.80159854888916
    10. '_os' → logprob: -7.92659854888916

Token 6: ' module' (ID: 8827)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0007089786231517792
    2. 'import' → logprob: -9.00070858001709
    3. '.import' → logprob: -9.00070858001709
    4. '<|end|>' → logprob: -9.75070858001709
    5. '
' → logprob: -10.00070858001709
    6. '.readline' → logprob: -10.25070858001709
    7. 'newline' → logprob: -10.25070858001709
    8. '.
' → logprob: -10.25070858001709
    9. ' ' → logprob: -10.37570858001709
    10. ' .' → logprob: -10.50070858001709

Token 7: ' to' (ID: 316)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.046902384608983994
    2. '\n' → logprob: -4.296902179718018
    3. '
' → logprob: -4.421902179718018
    4. '<|end|>' → logprob: -4.796902179718018
    5. 'newline' → logprob: -5.421902179718018
    6. 'import' → logprob: -5.921902179718018
    7. '\' → logprob: -6.421902179718018
    8. '```' → logprob: -7.046902179718018
    9. '<|end|>' → logprob: -7.171902179718018
    10. '#' → logprob: -8.171902656555176

Token 8: ' access' (ID: 3158)
  Prédit: ' access'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' access' → logprob: -0.189570814371109
    2. ' provide' → logprob: -2.814570903778076
    3. ' handle' → logprob: -3.189570903778076
    4. ' use' → logprob: -3.939570903778076
    5. 'access' → logprob: -4.064570903778076
    6. 'handle' → logprob: -4.814570903778076
    7. 'provide' → logprob: -5.314570903778076
    8. ' allow' → logprob: -5.439570903778076
    9. ' exit' → logprob: -6.064570903778076
    10. ' manipulate' → logprob: -6.189570903778076

Token 9: ' standard' (ID: 7024)
  Prédit: ' argv'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' argv' → logprob: -0.5505401492118835
    2. ' system' → logprob: -1.5505402088165283
    3. '.argv' → logprob: -2.5505402088165283
    4. ' command' → logprob: -3.0505402088165283
    5. ' sys' → logprob: -3.1755402088165283
    6. 'argv' → logprob: -3.4255402088165283
    7. '.' → logprob: -5.550539970397949
    8. ' modules' → logprob: -6.550539970397949
    9. ' arguments' → logprob: -6.800539970397949
    10. '.system' → logprob: -7.175539970397949

Token 10: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.03145653009414673
    2. 'input' → logprob: -3.531456470489502
    3. ' output' → logprob: -6.656456470489502
    4. 'output' → logprob: -8.40645694732666
    5. ' streams' → logprob: -9.53145694732666
    6. ' I' → logprob: -9.65645694732666
    7. ' IO' → logprob: -10.90645694732666
    8. 'io' → logprob: -11.40645694732666
    9. '_input' → logprob: -12.03145694732666
    10. ' ' → logprob: -12.03145694732666

Token 11: ' and' (ID: 326)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.09708871692419052
    2. '\n' → logprob: -3.7220888137817383
    3. '
' → logprob: -4.222088813781738
    4. '<|end|>' → logprob: -4.472088813781738
    5. '\' → logprob: -4.597088813781738
    6. 'import' → logprob: -4.847088813781738
    7. 'newline' → logprob: -4.847088813781738
    8. '' → logprob: -5.347088813781738
    9. ',' → logprob: -5.597088813781738
    10. ' ' → logprob: -6.347088813781738

Token 12: ' set' (ID: 920)
  Prédit: 'output'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'output' → logprob: -0.04901299253106117
    2. ' output' → logprob: -3.0490128993988037
    3. 'stdout' → logprob: -7.924013137817383
    4. 'standard' → logprob: -10.674013137817383
    5. 'argv' → logprob: -11.424013137817383
    6. '#' → logprob: -12.424013137817383
    7. ' standard' → logprob: -12.424013137817383
    8. 'outputs' → logprob: -12.799013137817383
    9. '_output' → logprob: -12.799013137817383
    10. 'Output' → logprob: -12.924013137817383

Token 13: ' recursion' (ID: 122185)
  Prédit: ' recursion'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' recursion' → logprob: -0.182753786444664
    2. 'rec' → logprob: -2.057753801345825
    3. ' encoding' → logprob: -5.307753562927246
    4. ' the' → logprob: -5.432753562927246
    5. 's' → logprob: -5.557753562927246
    6. 'uptools' → logprob: -5.557753562927246
    7. 'stdin' → logprob: -5.932753562927246
    8. 'encoding' → logprob: -5.932753562927246
    9. ' standard' → logprob: -6.057753562927246
    10. ' sys' → logprob: -6.307753562927246

Token 14: ' limit' (ID: 5967)
  Prédit: '_limit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_limit' → logprob: -0.3381577432155609
    2. 'limit' → logprob: -1.8381577730178833
    3. ' limit' → logprob: -2.0881576538085938
    4. ' limits' → logprob: -6.213157653808594
    5. '_depth' → logprob: -7.088157653808594
    6. '_limits' → logprob: -7.338157653808594
    7. 'limits' → logprob: -9.463157653808594
    8. '_lim' → logprob: -9.463157653808594
    9. 'depth' → logprob: -9.838157653808594
    10. '_LIMIT' → logprob: -9.838157653808594

Token 15: '
' (ID: 198)
  Prédit: 'sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sys' → logprob: -0.029127294197678566
    2. '' → logprob: -4.40412712097168
    3. '
' → logprob: -4.65412712097168
    4. '\' → logprob: -6.15412712097168
    5. '
' → logprob: -6.15412712097168
    6. '\n' → logprob: -6.65412712097168
    7. 'import' → logprob: -7.02912712097168
    8. '#' → logprob: -8.77912712097168
    9. '.' → logprob: -9.40412712097168
    10. ' sys' → logprob: -10.02912712097168

Token 16: 'stdin' (ID: 132953)
  Prédit: 'sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'sys' → logprob: -0.48363566398620605
    2. '
' → logprob: -1.483635663986206
    3. '.' → logprob: -2.733635663986206
    4. '' → logprob: -3.233635663986206
    5. '
' → logprob: -3.983635663986206
    6. '\n' → logprob: -4.483635902404785
    7. 'import' → logprob: -4.483635902404785
    8. '\' → logprob: -5.608635902404785
    9. '.
' → logprob: -6.233635902404785
    10. '.sys' → logprob: -6.233635902404785

Token 17: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.000680265249684453
    2. '.readline' → logprob: -7.875680446624756
    3. '=' → logprob: -8.875679969787598
    4. '.read' → logprob: -10.375679969787598
    5. ' =' → logprob: -10.500679969787598
    6. '.stdin' → logprob: -10.750679969787598
    7. '=sys' → logprob: -11.000679969787598
    8. ')' → logprob: -11.500679969787598
    9. '.=' → logprob: -11.875679969787598
    10. ' .' → logprob: -11.875679969787598

Token 18: ' sys' (ID: 12228)
  Prédit: ' sys'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sys' → logprob: -0.6931576728820801
    2. 'sys' → logprob: -0.6931576728820801
    3. '=sys' → logprob: -12.068157196044922
    4. '	sys' → logprob: -12.818157196044922
    5. '(sys' → logprob: -13.568157196044922
    6. '.sys' → logprob: -15.193157196044922
    7. 'system' → logprob: -15.693157196044922
    8. 'import' → logprob: -15.943157196044922
    9. 'input' → logprob: -16.568157196044922
    10. '_sys' → logprob: -17.068157196044922

Token 19: '.stdin' (ID: 93480)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.10156562924385071
    2. '.stdin' → logprob: -2.3515655994415283
    3. '.stdout' → logprob: -7.351565837860107
    4. '.readline' → logprob: -8.35156536102295
    5. ' .' → logprob: -8.97656536102295
    6. '.argv' → logprob: -9.22656536102295
    7. '.setdefault' → logprob: -9.47656536102295
    8. '.std' → logprob: -9.85156536102295
    9. '.stderr' → logprob: -10.22656536102295
    10. '.input' → logprob: -10.85156536102295

Token 20: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.4767460823059082
    2. '.readline' → logprob: -0.9767460823059082
    3. '.read' → logprob: -6.351746082305908
    4. '
' → logprob: -8.22674560546875
    5. '<|end|>' → logprob: -8.85174560546875
    6. '.readlines' → logprob: -9.22674560546875
    7. '\' → logprob: -10.22674560546875
    8. '.\' → logprob: -10.35174560546875
    9. '.write' → logprob: -10.35174560546875
    10. ',' → logprob: -10.35174560546875

Token 21: '#' (ID: 2)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.06662500649690628
    2. '.readline' → logprob: -2.8166251182556152
    3. '.set' → logprob: -6.191625118255615
    4. 'sys' → logprob: -7.566625118255615
    5. '.write' → logprob: -7.941625118255615
    6. '.
' → logprob: -8.316624641418457
    7. '=sys' → logprob: -8.316624641418457
    8. ',' → logprob: -8.441624641418457
    9. '.setdefault' → logprob: -8.441624641418457
    10. '
' → logprob: -8.816624641418457

Token 22: ' Increase' (ID: 65344)
  Prédit: 'sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'sys' → logprob: -0.22679953277111053
    2. 'set' → logprob: -2.601799488067627
    3. 'import' → logprob: -3.101799488067627
    4. ' recursion' → logprob: -3.476799488067627
    5. 'rec' → logprob: -3.976799488067627
    6. 'Rec' → logprob: -4.601799488067627
    7. ' sys' → logprob: -4.601799488067627
    8. 'input' → logprob: -5.726799488067627
    9. 'stdin' → logprob: -5.976799488067627
    10. '#set' → logprob: -6.101799488067627

Token 23: ' maximum' (ID: 10562)
  Prédit: ' recursion'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' recursion' → logprob: -0.2167479693889618
    2. 'rec' → logprob: -2.091747999191284
    3. '_rec' → logprob: -2.716747999191284
    4. '.set' → logprob: -6.216747760772705
    5. '(sys' → logprob: -6.841747760772705
    6. 'set' → logprob: -7.716747760772705
    7. 'sys' → logprob: -7.966747760772705
    8. '.setdefault' → logprob: -8.591748237609863
    9. '(rec' → logprob: -8.716748237609863
    10. '_set' → logprob: -8.716748237609863

Token 24: ' recursion' (ID: 122185)
  Prédit: '_rec'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_rec' → logprob: -0.024290159344673157
    2. ' recursion' → logprob: -3.899290084838867
    3. '_depth' → logprob: -6.649290084838867
    4. 'rec' → logprob: -6.649290084838867
    5. '_stack' → logprob: -7.274290084838867
    6. '_recursive' → logprob: -8.399290084838867
    7. '_limit' → logprob: -9.399290084838867
    8. '_' → logprob: -10.024290084838867
    9. ' _' → logprob: -10.149290084838867
    10. '_re' → logprob: -10.149290084838867

Token 25: ' limit' (ID: 5967)
  Prédit: '_limit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_limit' → logprob: -0.03559938445687294
    2. '_depth' → logprob: -3.78559947013855
    3. 'limit' → logprob: -4.660599231719971
    4. ' limit' → logprob: -6.410599231719971
    5. '_' → logprob: -6.910599231719971
    6. ' _' → logprob: -9.285599708557129
    7. 'depth' → logprob: -10.285599708557129
    8. ' depth' → logprob: -10.285599708557129
    9. '_stack' → logprob: -12.285599708557129
    10. '_limits' → logprob: -12.285599708557129

Token 26: ' to' (ID: 316)
  Prédit: 'sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'sys' → logprob: -0.0062790438532829285
    2. 'import' → logprob: -5.756278991699219
    3. '=sys' → logprob: -6.506278991699219
    4. '(sys' → logprob: -7.256278991699219
    5. ' sys' → logprob: -7.381278991699219
    6. '.' → logprob: -9.881278991699219
    7. '=' → logprob: -10.381278991699219
    8. ' =' → logprob: -10.381278991699219
    9. '_sys' → logprob: -10.631278991699219
    10. 'set' → logprob: -10.881278991699219

Token 27: ' prevent' (ID: 7332)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.0013657122617587447
    2. '10' → logprob: -6.751365661621094
    3. '100' → logprob: -8.751365661621094
    4. ' sys' → logprob: -10.751365661621094
    5. 'int' → logprob: -12.751365661621094
    6. ' a' → logprob: -12.876365661621094
    7. '300' → logprob: -13.001365661621094
    8. '250' → logprob: -13.126365661621094
    9. '500' → logprob: -13.376365661621094
    10. 'sys' → logprob: -14.251365661621094

Token 28: ' stack' (ID: 10825)
  Prédit: ' Rec'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Rec' → logprob: -0.0740666463971138
    2. 'Rec' → logprob: -2.699066638946533
    3. ' recursion' → logprob: -5.824066638946533
    4. ' maximum' → logprob: -7.074066638946533
    5. ' Runtime' → logprob: -8.449067115783691
    6. 'Runtime' → logprob: -10.324067115783691
    7. ' stack' → logprob: -10.574067115783691
    8. 'Maximum' → logprob: -10.824067115783691
    9. ' possible' → logprob: -12.074067115783691
    10. 'maximum' → logprob: -12.574067115783691

Token 29: ' overflow' (ID: 28614)
  Prédit: ' overflow'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' overflow' → logprob: -0.007105582393705845
    2. 'overflow' → logprob: -5.007105350494385
    3. ' over' → logprob: -7.882105350494385
    4. 'over' → logprob: -11.757105827331543
    5. ' depth' → logprob: -13.257105827331543
    6. ' overflowing' → logprob: -13.757105827331543
    7. ' Overflow' → logprob: -14.382105827331543
    8. 'Overflow' → logprob: -15.007105827331543
    9. ' stack' → logprob: -15.382105827331543
    10. ' space' → logprob: -16.007104873657227

Token 30: ' on' (ID: 402)
  Prédit: 'sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'sys' → logprob: -0.007833742536604404
    2. '(sys' → logprob: -5.632833957672119
    3. 'import' → logprob: -6.257833957672119
    4. ' sys' → logprob: -6.507833957672119
    5. '=sys' → logprob: -7.757833957672119
    6. '(' → logprob: -9.757833480834961
    7. '.' → logprob: -9.757833480834961
    8. '_sys' → logprob: -10.007833480834961
    9. '\n' → logprob: -10.632833480834961
    10. '10' → logprob: -10.632833480834961

Token 31: ' large' (ID: 4410)
  Prédit: ' large'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' large' → logprob: -0.3215491473674774
    2. ' deep' → logprob: -1.4465491771697998
    3. ' recursive' → logprob: -3.9465491771698
    4. 'deep' → logprob: -4.571548938751221
    5. ' recursion' → logprob: -5.946548938751221
    6. 'large' → logprob: -6.071548938751221
    7. ' deeper' → logprob: -6.196548938751221
    8. ' long' → logprob: -7.446548938751221
    9. ' deeply' → logprob: -7.696548938751221
    10. ' ' → logprob: -7.696548938751221

Token 32: ' recursive' (ID: 66711)
  Prédit: ' inputs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' inputs' → logprob: -0.5733548402786255
    2. ' recursion' → logprob: -1.4483548402786255
    3. ' input' → logprob: -2.698354721069336
    4. 'rec' → logprob: -3.948354721069336
    5. ' rec' → logprob: -3.948354721069336
    6. ' data' → logprob: -4.448354721069336
    7. '_input' → logprob: -4.448354721069336
    8. ' recursive' → logprob: -4.573354721069336
    9. 'inputs' → logprob: -4.698354721069336
    10. '_rec' → logprob: -4.823354721069336

Token 33: ' calls' (ID: 11666)
  Prédit: ' calls'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' calls' → logprob: -0.09164119511842728
    2. '_calls' → logprob: -3.5916411876678467
    3. ' ' → logprob: -3.8416411876678467
    4. '_' → logprob: -4.466641426086426
    5. 'calls' → logprob: -4.466641426086426
    6. '_call' → logprob: -5.091641426086426
    7. ' _' → logprob: -5.841641426086426
    8. '_function' → logprob: -6.216641426086426
    9. ' function' → logprob: -6.216641426086426
    10. '_depth' → logprob: -7.466641426086426

Token 34: '
' (ID: 198)
  Prédit: 'sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sys' → logprob: -0.007620945107191801
    2. '(sys' → logprob: -6.007620811462402
    3. 'import' → logprob: -6.507620811462402
    4. '
' → logprob: -7.007620811462402
    5. '\' → logprob: -7.257620811462402
    6. '\n' → logprob: -7.632620811462402
    7. ' sys' → logprob: -7.882620811462402
    8. '=sys' → logprob: -8.007620811462402
    9. '```' → logprob: -8.507620811462402
    10. '_sys' → logprob: -8.757620811462402

Token 35: 'sys' (ID: 17324)
  Prédit: 'sys'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sys' → logprob: -0.01021568477153778
    2. ' sys' → logprob: -5.260215759277344
    3. '
' → logprob: -5.760215759277344
    4. '(sys' → logprob: -7.760215759277344
    5. 'import' → logprob: -8.135215759277344
    6. '  
' → logprob: -9.135215759277344
    7. '
' → logprob: -9.135215759277344
    8. '\' → logprob: -9.260215759277344
    9. '' → logprob: -9.260215759277344
    10. '\n' → logprob: -9.260215759277344

Token 36: '.set' (ID: 1230)
  Prédit: '.set'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.set' → logprob: -0.0013436852023005486
    2. '.setdefault' → logprob: -7.251343727111816
    3. '.' → logprob: -7.376343727111816
    4. ' .' → logprob: -12.251343727111816
    5. '.stdin' → logprob: -13.876343727111816
    6. '.exit' → logprob: -14.626343727111816
    7. '.stdout' → logprob: -14.876343727111816
    8. '.Set' → logprob: -15.376343727111816
    9. '.argv' → logprob: -15.501343727111816
    10. '.max' → logprob: -15.751343727111816

Token 37: 'rec' (ID: 9285)
  Prédit: '_rec'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_rec' → logprob: -0.5657879114151001
    2. '_limit' → logprob: -1.0657879114151
    3. 'rec' → logprob: -3.3157877922058105
    4. '_' → logprob: -3.4407877922058105
    5. '_max' → logprob: -4.1907877922058105
    6. '_recursive' → logprob: -6.6907877922058105
    7. '_depth' → logprob: -7.3157877922058105
    8. '_stack' → logprob: -7.4407877922058105
    9. '_exc' → logprob: -8.440788269042969
    10. '_ref' → logprob: -8.690788269042969

Token 38: 'ursion' (ID: 41658)
  Prédit: 'ursion'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ursion' → logprob: -0.0032500813249498606
    2. '_limit' → logprob: -6.0032501220703125
    3. 'limit' → logprob: -7.8782501220703125
    4. 'urs' → logprob: -8.503250122070312
    5. 'ursive' → logprob: -8.878250122070312
    6. 'ur' → logprob: -10.128250122070312
    7. '_' → logprob: -12.378250122070312
    8. 't' → logprob: -13.503250122070312
    9. 'urse' → logprob: -13.628250122070312
    10. 'ursively' → logprob: -13.628250122070312

Token 39: 'limit' (ID: 19698)
  Prédit: 'limit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'limit' → logprob: -0.04353802278637886
    2. '_limit' → logprob: -3.1685380935668945
    3. 'lim' → logprob: -7.9185380935668945
    4. 'l' → logprob: -10.043538093566895
    5. 'imit' → logprob: -10.168538093566895
    6. 'al' → logprob: -10.418538093566895
    7. 'li' → logprob: -11.168538093566895
    8. 'ault' → logprob: -11.543538093566895
    9. 'mit' → logprob: -12.168538093566895
    10. 'it' → logprob: -12.543538093566895

Token 40: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -2.1008713702030946e-06
    2. '()' → logprob: -14.500001907348633
    3. '((' → logprob: -15.125001907348633
    4. ' (' → logprob: -15.250001907348633
    5. '(

' → logprob: -15.250001907348633
    6. '(
' → logprob: -15.375001907348633
    7. '("("' → logprob: -15.625001907348633
    8. '(`' → logprob: -15.750001907348633
    9. '('' → logprob: -16.625001907348633
    10. '```' → logprob: -16.875001907348633

Token 41: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.002476016292348504
    2. '100' → logprob: -6.002476215362549
    3. ' ' → logprob: -15.50247573852539
    4. '500' → logprob: -17.12747573852539
    5. '300' → logprob: -17.25247573852539
    6. '200' → logprob: -17.62747573852539
    7. '999' → logprob: -18.12747573852539
    8. '1' → logprob: -18.50247573852539
    9. '１０' → logprob: -18.50247573852539
    10. '   ' → logprob: -19.37747573852539

Token 42: ' **' (ID: 6240)
  Prédit: '7'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '7' → logprob: -0.5241758823394775
    2. '6' → logprob: -1.0241758823394775
    3. '000' → logprob: -3.2741758823394775
    4. '0' → logprob: -5.149175643920898
    5. '5' → logprob: -6.024175643920898
    6. '**' → logprob: -6.524175643920898
    7. '4' → logprob: -7.149175643920898
    8. '00' → logprob: -8.149175643920898
    9. '8' → logprob: -8.399175643920898
    10. '07' → logprob: -11.274175643920898

Token 43: ' ' (ID: 220)
  Prédit: '7'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: -0.0007131471065804362
    2. '9' → logprob: -7.250713348388672
    3. '8' → logprob: -12.875713348388672
    4. '6' → logprob: -14.250713348388672
    5. '**' → logprob: -18.375713348388672
    6. '```' → logprob: -21.125713348388672
    7. ' ' → logprob: -22.250713348388672
    8. '

' → logprob: -22.500713348388672
    9. '+' → logprob: -23.000713348388672
    10. '７' → logprob: -23.125713348388672

Token 44: '7' (ID: 22)
  Prédit: '7'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: -0.014252005144953728
    2. '9' → logprob: -4.264252185821533
    3. '8' → logprob: -9.514251708984375
    4. '6' → logprob: -11.139251708984375
    5. '**' → logprob: -16.139251708984375
    6. '```' → logprob: -17.764251708984375
    7. '10' → logprob: -18.264251708984375
    8. ' ' → logprob: -18.889251708984375
    9. '

' → logprob: -19.639251708984375
    10. '``' → logprob: -19.764251708984375

Token 45: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -4.60414821645827e-06
    2. ' )' → logprob: -12.625004768371582
    3. '))' → logprob: -13.875004768371582
    4. ')
' → logprob: -15.375004768371582
    5. ')`' → logprob: -17.875003814697266
    6. '),' → logprob: -18.125003814697266
    7. '）' → logprob: -18.375003814697266
    8. '`)' → logprob: -18.625003814697266
    9. ')))' → logprob: -18.625003814697266
    10. '**' → logprob: -18.625003814697266

Token 46: 'def' (ID: 1314)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.06015700474381447
    2. '

' → logprob: -3.185157060623169
    3. '' → logprob: -4.93515682220459
    4. '#' → logprob: -5.68515682220459
    5. '
' → logprob: -5.68515682220459
    6. '\n' → logprob: -6.68515682220459
    7. 'def' → logprob: -7.68515682220459
    8. '```' → logprob: -7.68515682220459
    9. '\' → logprob: -8.18515682220459
    10. 'n' → logprob: -8.93515682220459

Token 47: ' li' (ID: 3476)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.13070623576641083
    2. ' factorial' → logprob: -3.130706310272217
    3. ' main' → logprob: -3.505706310272217
    4. ' dfs' → logprob: -3.880706310272217
    5. ' solve' → logprob: -5.005706310272217
    6. ' factor' → logprob: -5.755706310272217
    7. ' calculate' → logprob: -5.880706310272217
    8. ' fibonacci' → logprob: -5.880706310272217
    9. ' parse' → logprob: -6.130706310272217
    10. ' process' → logprob: -6.130706310272217

Token 48: '():
' (ID: 8595)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.7225594520568848
    2. 'st' → logprob: -0.7225594520568848
    3. 'ne' → logprob: -3.8475594520568848
    4. 't' → logprob: -5.097559452056885
    5. 'nt' → logprob: -7.347559452056885
    6. 'nst' → logprob: -7.972559452056885
    7. 'nist' → logprob: -8.347558975219727
    8. 'nit' → logprob: -8.472558975219727
    9. 'nest' → logprob: -10.222558975219727
    10. 'nes' → logprob: -11.347558975219727

Token 49: '   ' (ID: 271)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.5894155502319336
    2. ' return' → logprob: -1.8394155502319336
    3. ' ()' → logprob: -2.2144155502319336
    4. ' ' → logprob: -3.5894155502319336
    5. '():' → logprob: -3.5894155502319336
    6. ' =' → logprob: -3.5894155502319336
    7. '(' → logprob: -3.7144155502319336
    8. '=' → logprob: -3.8394155502319336
    9. 'n' → logprob: -4.089415550231934
    10. 'return' → logprob: -4.339415550231934

Token 50: ' """
' (ID: 7037)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.15348578989505768
    2. 'int' → logprob: -2.1534857749938965
    3. ' return' → logprob: -4.2784857749938965
    4. 'list' → logprob: -4.6534857749938965
    5. ' list' → logprob: -6.2784857749938965
    6. 'map' → logprob: -7.7784857749938965
    7. ' int' → logprob: -8.153486251831055
    8. '   ' → logprob: -8.778486251831055
    9. ' map' → logprob: -10.528486251831055
    10. ' ' → logprob: -11.028486251831055

Token 51: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5104992389678955
    2. 'eturn' → logprob: -1.7604992389678955
    3. ' return' → logprob: -2.2604992389678955
    4. 'return' → logprob: -2.5104992389678955
    5. 'n' → logprob: -3.3854992389678955
    6. 'int' → logprob: -6.635499000549316
    7. 'ine' → logprob: -6.885499000549316
    8. 'nt' → logprob: -7.135499000549316
    9. '[]' → logprob: -7.260499000549316
    10. ')' → logprob: -7.510499000549316

Token 52: ' Lis' (ID: 29571)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.13804000616073608
    2. ' return' → logprob: -2.138040065765381
    3. '   ' → logprob: -4.888040065765381
    4. 'r' → logprob: -6.138040065765381
    5. 'n' → logprob: -7.513040065765381
    6. 'ret' → logprob: -8.263039588928223
    7. 'eturn' → logprob: -8.763039588928223
    8. 'Return' → logprob: -9.138039588928223
    9. 'int' → logprob: -9.638039588928223
    10. ' ' → logprob: -10.388039588928223

Token 53: ' une' (ID: 2463)
  Prédit: 'ne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ne' → logprob: -0.036720745265483856
    2. 'st' → logprob: -3.4117207527160645
    3. 'n' → logprob: -6.5367207527160645
    4. 't' → logprob: -6.6617207527160645
    5. 'nes' → logprob: -9.161720275878906
    6. 'nt' → logprob: -9.661720275878906
    7. 'nest' → logprob: -9.786720275878906
    8. '()' → logprob: -10.286720275878906
    9. 'net' → logprob: -10.536720275878906
    10. '   ' → logprob: -11.286720275878906

Token 54: ' ligne' (ID: 19583)
  Prédit: 'ne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ne' → logprob: -0.7240840196609497
    2. 'n' → logprob: -0.8490840196609497
    3. '()' → logprob: -3.59908390045166
    4. 'put' → logprob: -4.84908390045166
    5. 'ligne' → logprob: -5.09908390045166
    6. 'nt' → logprob: -5.34908390045166
    7. 'né' → logprob: -5.47408390045166
    8. ' ligne' → logprob: -5.59908390045166
    9. 'une' → logprob: -5.72408390045166
    10. ' input' → logprob: -5.72408390045166

Token 55: ' depuis' (ID: 16277)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0063938298262655735
    2. ' ()' → logprob: -5.881393909454346
    3. '().' → logprob: -6.881393909454346
    4. '.' → logprob: -7.631393909454346
    5. '():' → logprob: -8.131393432617188
    6. '()\' → logprob: -8.256393432617188
    7. '()
' → logprob: -8.631393432617188
    8. '   ' → logprob: -9.006393432617188
    9. ':' → logprob: -9.131393432617188
    10. 'import' → logprob: -9.131393432617188

Token 56: ' l' (ID: 305)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -1.2251026630401611
    2. 'l' → logprob: -1.3501026630401611
    3. ' stdin' → logprob: -1.3501026630401611
    4. 'input' → logprob: -3.100102663040161
    5. ' input' → logprob: -3.350102663040161
    6. 'sys' → logprob: -3.475102663040161
    7. '   ' → logprob: -3.975102663040161
    8. 'la' → logprob: -4.350102424621582
    9. ' la' → logprob: -4.475102424621582
    10. ' standard' → logprob: -4.600102424621582

Token 57: ''entrée' (ID: 115820)
  Prédit: ' stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stdin' → logprob: -1.0674803256988525
    2. ''entrée' → logprob: -1.3174803256988525
    3. 'stdin' → logprob: -1.6924803256988525
    4. ' input' → logprob: -2.6924803256988525
    5. 'input' → logprob: -3.0674803256988525
    6. 'e' → logprob: -3.6924803256988525
    7. ' standard' → logprob: -3.9424803256988525
    8. 'entrée' → logprob: -4.442480087280273
    9. 'a' → logprob: -4.442480087280273
    10. ''' → logprob: -5.192480087280273

Token 58: ' standard' (ID: 7024)
  Prédit: ' standard'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' standard' → logprob: -0.2800865173339844
    2. '()' → logprob: -2.6550865173339844
    3. '   ' → logprob: -2.9050865173339844
    4. ' input' → logprob: -4.030086517333984
    5. 'standard' → logprob: -4.030086517333984
    6. '\n' → logprob: -4.155086517333984
    7. '"""
' → logprob: -4.655086517333984
    8. 'input' → logprob: -4.905086517333984
    9. ')' → logprob: -5.280086517333984
    10. '`' → logprob: -5.405086517333984

Token 59: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8676696419715881
    2. '\n' → logprob: -0.9926696419715881
    3. '.' → logprob: -2.3676695823669434
    4. ',' → logprob: -3.7426695823669434
    5. '()' → logprob: -3.8676695823669434
    6. ' (' → logprob: -4.492669582366943
    7. '    ' → logprob: -4.992669582366943
    8. ')' → logprob: -4.992669582366943
    9. '    
' → logprob: -5.242669582366943
    10. ' ' → logprob: -5.242669582366943

Token 60: ' la' (ID: 557)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.26563265919685364
    2. ' return' → logprob: -1.6406326293945312
    3. 'return' → logprob: -3.8906326293945312
    4. '    ' → logprob: -4.265632629394531
    5. ' ' → logprob: -6.640632629394531
    6. '  ' → logprob: -7.390632629394531
    7. '    
' → logprob: -7.515632629394531
    8. '()' → logprob: -7.890632629394531
    9. ' line' → logprob: -8.140632629394531
    10. ' 
' → logprob: -8.640632629394531

Token 61: ' div' (ID: 4223)
  Prédit: 'ret'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ret' → logprob: -1.4681434631347656
    2. 'convert' → logprob: -1.5931434631347656
    3. ' transforme' → logprob: -1.5931434631347656
    4. ' retourne' → logprob: -1.9681434631347656
    5. 'ren' → logprob: -2.2181434631347656
    6. ' ren' → logprob: -2.5931434631347656
    7. ' convert' → logprob: -3.7181434631347656
    8. 'transform' → logprob: -4.968143463134766
    9. 'split' → logprob: -6.593143463134766
    10. 'dé' → logprob: -6.718143463134766

Token 62: 'ise' (ID: 1096)
  Prédit: 'ise'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ise' → logprob: -0.05786747485399246
    2. 'ide' → logprob: -4.057867527008057
    3. 'isé' → logprob: -4.182867527008057
    4. 'i' → logprob: -5.307867527008057
    5. 'isée' → logprob: -5.807867527008057
    6. 'e' → logprob: -5.807867527008057
    7. '   ' → logprob: -6.057867527008057
    8. 'id' → logprob: -6.432867527008057
    9. 'iser' → logprob: -6.682867527008057
    10. 'er' → logprob: -7.057867527008057

Token 63: ' selon' (ID: 27571)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.4298971891403198
    2. '   ' → logprob: -2.1798973083496094
    3. ' en' → logprob: -2.3048973083496094
    4. '('' → logprob: -3.1798973083496094
    5. '(' → logprob: -3.3048973083496094
    6. ' par' → logprob: -4.554897308349609
    7. '    ' → logprob: -4.804897308349609
    8. '.' → logprob: -4.929897308349609
    9. 'par' → logprob: -5.054897308349609
    10. ' ' → logprob: -5.054897308349609

Token 64: ' les' (ID: 1341)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.22255440056324005
    2. ' l' → logprob: -2.9725544452667236
    3. '   ' → logprob: -3.3475544452667236
    4. 'l' → logprob: -3.3475544452667236
    5. ' les' → logprob: -4.0975542068481445
    6. 'le' → logprob: -4.3475542068481445
    7. '"' → logprob: -4.9725542068481445
    8. ' la' → logprob: -5.0975542068481445
    9. ''un' → logprob: -5.0975542068481445
    10. ' le' → logprob: -5.2225542068481445

Token 65: ' espaces' (ID: 98361)
  Prédit: ' espaces'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' espaces' → logprob: -0.45554956793785095
    2. 'esp' → logprob: -1.0805495977401733
    3. ''esp' → logprob: -3.705549478530884
    4. ''espace' → logprob: -8.080549240112305
    5. ' esp' → logprob: -8.330549240112305
    6. ''' → logprob: -8.455549240112305
    7. 'es' → logprob: -8.455549240112305
    8. 'spaces' → logprob: -8.455549240112305
    9. '’esp' → logprob: -8.955549240112305
    10. ' espace' → logprob: -9.080549240112305

Token 66: ',
' (ID: 412)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.31330275535583496
    2. ' en' → logprob: -1.938302755355835
    3. ' et' → logprob: -2.938302755355835
    4. ',' → logprob: -3.063302755355835
    5. '    ' → logprob: -4.938302993774414
    6. ' ,' → logprob: -5.063302993774414
    7. '    
' → logprob: -6.188302993774414
    8. ' ' → logprob: -6.813302993774414
    9. ' )' → logprob: -6.938302993774414
    10. 'et' → logprob: -7.063302993774414

Token 67: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18196547031402588
    2. ' et' → logprob: -2.0569653511047363
    3. 'et' → logprob: -3.3069653511047363
    4. ' puis' → logprob: -7.431965351104736
    5. '    ' → logprob: -7.806965351104736
    6. ' and' → logprob: -7.931965351104736
    7. ' retourne' → logprob: -8.681965827941895
    8. ' return' → logprob: -9.556965827941895
    9. 'p' → logprob: -9.681965827941895
    10. ',' → logprob: -9.806965827941895

Token 68: ' convert' (ID: 8452)
  Prédit: 'et'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'et' → logprob: -0.6690821647644043
    2. ' et' → logprob: -0.9190821647644043
    3. '   ' → logprob: -2.6690821647644043
    4. ' puis' → logprob: -4.669082164764404
    5. 'p' → logprob: -4.919082164764404
    6. ' retourne' → logprob: -7.044082164764404
    7. 'return' → logprob: -7.419082164764404
    8. '    ' → logprob: -8.044082641601562
    9. ' return' → logprob: -8.419082641601562
    10. ' ' → logprob: -8.544082641601562

Token 69: 'it' (ID: 278)
  Prédit: 'it'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'it' → logprob: -0.03482232242822647
    2. 'i' → logprob: -3.5348222255706787
    3. 'ie' → logprob: -5.909822463989258
    4. ' it' → logprob: -6.409822463989258
    5. 't' → logprob: -8.159822463989258
    6. 'is' → logprob: -8.534822463989258
    7. 'e' → logprob: -9.409822463989258
    8. 'issant' → logprob: -10.409822463989258
    9. ' ' → logprob: -10.909822463989258
    10. '   ' → logprob: -10.909822463989258

Token 70: ' chaque' (ID: 21194)
  Prédit: ' chaque'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaque' → logprob: -0.40129953622817993
    2. ' les' → logprob: -2.026299476623535
    3. ' en' → logprob: -2.651299476623535
    4. 'les' → logprob: -3.026299476623535
    5. 'cha' → logprob: -3.776299476623535
    6. ' each' → logprob: -4.151299476623535
    7. 'la' → logprob: -4.526299476623535
    8. ' ' → logprob: -5.026299476623535
    9. ' la' → logprob: -5.026299476623535
    10. 't' → logprob: -5.276299476623535

Token 71: ' élément' (ID: 99627)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.01461660023778677
    2. ' élément' → logprob: -5.1396164894104
    3. ' ' → logprob: -6.1396164894104
    4. ' token' → logprob: -6.8896164894104
    5. 'part' → logprob: -7.2646164894104
    6. ' element' → logprob: -7.5146164894104
    7. ' chaîne' → logprob: -7.5146164894104
    8. 'token' → logprob: -7.5146164894104
    9. 'element' → logprob: -7.6396164894104
    10. 'chaine' → logprob: -7.7646164894104

Token 72: ' en' (ID: 469)
  Prédit: ' en'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' en' → logprob: -0.012623838149011135
    2. 'en' → logprob: -4.3876237869262695
    3. ' ' → logprob: -9.88762378692627
    4. '   ' → logprob: -10.51262378692627
    5. '```' → logprob: -11.13762378692627
    6. ''en' → logprob: -12.13762378692627
    7. '_en' → logprob: -12.63762378692627
    8. ' in' → logprob: -13.38762378692627
    9. 's' → logprob: -13.63762378692627
    10. ',' → logprob: -13.63762378692627

Token 73: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.5572857856750488
    2. ' int' → logprob: -1.3072857856750488
    3. 'ent' → logprob: -2.057285785675049
    4. ' entier' → logprob: -4.057285785675049
    5. ' ent' → logprob: -4.557285785675049
    6. ' integer' → logprob: -7.432285785675049
    7. ' un' → logprob: -8.68228530883789
    8. ' ' → logprob: -9.68228530883789
    9. ' integers' → logprob: -9.93228530883789
    10. '=int' → logprob: -10.43228530883789

Token 74: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.561246395111084
    2. ',' → logprob: -0.936246395111084
    3. '()' → logprob: -4.436246395111084
    4. ' et' → logprob: -4.811246395111084
    5. ']' → logprob: -5.311246395111084
    6. '   ' → logprob: -5.561246395111084
    7. '.' → logprob: -6.311246395111084
    8. '(' → logprob: -6.811246395111084
    9. ' )' → logprob: -6.811246395111084
    10. '),' → logprob: -6.936246395111084

Token 75: ' et' (ID: 859)
  Prédit: ' et'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' et' → logprob: -0.13265782594680786
    2. 'et' → logprob: -2.257657766342163
    3. ' puis' → logprob: -4.257658004760742
    4. '   ' → logprob: -5.382658004760742
    5. '    ' → logprob: -8.132658004760742
    6. ' ' → logprob: -8.257658004760742
    7. ' and' → logprob: -8.382658004760742
    8. 'p' → logprob: -10.257658004760742
    9. ' retourne' → logprob: -11.132658004760742
    10. ' ' → logprob: -11.507658004760742

Token 76: ' ren' (ID: 5427)
  Prédit: ' retourne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' retourne' → logprob: -0.4998586177825928
    2. ' les' → logprob: -1.2498586177825928
    3. ' return' → logprob: -2.6248586177825928
    4. ' ren' → logprob: -3.9998586177825928
    5. 'return' → logprob: -4.499858856201172
    6. ' returns' → logprob: -5.749858856201172
    7. 'ren' → logprob: -7.874858856201172
    8. ' retour' → logprob: -8.249858856201172
    9. ' ' → logprob: -8.374858856201172
    10. '   ' → logprob: -8.749858856201172

Token 77: 'voie' (ID: 70072)
  Prédit: 'voie'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'voie' → logprob: -0.026592286303639412
    2. 'voit' → logprob: -3.776592254638672
    3. 't' → logprob: -6.401592254638672
    4. 'v' → logprob: -6.651592254638672
    5. 'vo' → logprob: -9.276592254638672
    6. 'voi' → logprob: -9.776592254638672
    7. 'oit' → logprob: -10.026592254638672
    8. 'voy' → logprob: -10.151592254638672
    9. '   ' → logprob: -10.276592254638672
    10. 'e' → logprob: -10.401592254638672

Token 78: ' un' (ID: 537)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.008025222457945347
    2. ' le' → logprob: -6.383025169372559
    3. ' une' → logprob: -6.633025169372559
    4. 'la' → logprob: -6.883025169372559
    5. ' ' → logprob: -7.008025169372559
    6. '[]' → logprob: -7.133025169372559
    7. '[' → logprob: -7.258025169372559
    8. ' un' → logprob: -7.883025169372559
    9. ' l' → logprob: -8.633025169372559
    10. ' les' → logprob: -8.633025169372559

Token 79: ' it' (ID: 480)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.001979072345420718
    2. ' list' → logprob: -7.126978874206543
    3. ' liste' → logprob: -7.876978874206543
    4. 'a' → logprob: -8.001978874206543
    5. ' e' → logprob: -8.751978874206543
    6. 'liste' → logprob: -9.376978874206543
    7. ' tableau' → logprob: -9.626978874206543
    8. 'es' → logprob: -9.751978874206543
    9. 'list' → logprob: -10.126978874206543
    10. 's' → logprob: -11.626978874206543

Token 80: 'ér' (ID: 2156)
  Prédit: 'er'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.26354047656059265
    2. 'érateur' → logprob: -1.513540506362915
    3. 'ér' → logprob: -4.513540267944336
    4. 'é' → logprob: -8.888540267944336
    5. 'e' → logprob: -9.138540267944336
    6. 'érant' → logprob: -9.388540267944336
    7. 'ertools' → logprob: -9.638540267944336
    8. 'erar' → logprob: -10.263540267944336
    9. 'érer' → logprob: -10.388540267944336
    10. '**' → logprob: -11.263540267944336

Token 81: 'able' (ID: 562)
  Prédit: 'ator'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ator' → logprob: -0.5718948841094971
    2. 'ateur' → logprob: -1.571894884109497
    3. 'er' → logprob: -1.821894884109497
    4. 'r' → logprob: -2.821894884109497
    5. 'able' → logprob: -5.446894645690918
    6. 'érateur' → logprob: -7.196894645690918
    7. 'artor' → logprob: -7.821894645690918
    8. 'reur' → logprob: -7.946894645690918
    9. 'eur' → logprob: -8.446894645690918
    10. '```' → logprob: -9.446894645690918

Token 82: ' de' (ID: 334)
  Prédit: ' des'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' des' → logprob: -0.5699967741966248
    2. ' de' → logprob: -1.0699968338012695
    3. ' map' → logprob: -3.1949968338012695
    4. ' of' → logprob: -3.8199968338012695
    5. ' d' → logprob: -5.1949968338012695
    6. '.' → logprob: -6.1949968338012695
    7. '   ' → logprob: -6.1949968338012695
    8. '`' → logprob: -6.3199968338012695
    9. 'map' → logprob: -6.3199968338012695
    10. ' sur' → logprob: -6.3199968338012695

Token 83: ' ces' (ID: 10532)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.7421936392784119
    2. ' int' → logprob: -1.2421936988830566
    3. 'ints' → logprob: -1.6171936988830566
    4. 'inte' → logprob: -3.9921936988830566
    5. ' ints' → logprob: -5.242193698883057
    6. 'ent' → logprob: -5.367193698883057
    7. ' integers' → logprob: -5.492193698883057
    8. ' ent' → logprob: -6.617193698883057
    9. ' map' → logprob: -6.867193698883057
    10. ' des' → logprob: -7.242193698883057

Token 84: ' ent' (ID: 1121)
  Prédit: ' ent'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ent' → logprob: -0.6924738883972168
    2. 'int' → logprob: -1.6924738883972168
    3. 'ent' → logprob: -2.067473888397217
    4. ' int' → logprob: -2.442473888397217
    5. 'ints' → logprob: -3.317473888397217
    6. ' integers' → logprob: -4.067473888397217
    7. 'inte' → logprob: -4.192473888397217
    8. ' nombres' → logprob: -4.192473888397217
    9. ' ints' → logprob: -4.942473888397217
    10. ' éléments' → logprob: -5.192473888397217

Token 85: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.00012594614236149937
    2. 'ers' → logprob: -10.000125885009766
    3. 'i' → logprob: -10.250125885009766
    4. 'ières' → logprob: -10.750125885009766
    5. 'ier' → logprob: -11.750125885009766
    6. '```' → logprob: -12.500125885009766
    7. 'gers' → logprob: -12.625125885009766
    8. 's' → logprob: -13.000125885009766
    9. 'ié' → logprob: -13.375125885009766
    10. 'er' → logprob: -13.500125885009766

Token 86: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6774885654449463
    2. ')' → logprob: -1.0524885654449463
    3. '.' → logprob: -2.3024885654449463
    4. ']' → logprob: -4.427488327026367
    5. '()' → logprob: -5.302488327026367
    6. '"""' → logprob: -5.302488327026367
    7. ',' → logprob: -5.802488327026367
    8. ':' → logprob: -5.927488327026367
    9. '\n' → logprob: -5.927488327026367
    10. '
' → logprob: -6.427488327026367

Token 87: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07178781181573868
    2. '"""' → logprob: -3.1967878341674805
    3. '\n' → logprob: -4.8217878341674805
    4. ')' → logprob: -5.1967878341674805
    5. '
' → logprob: -5.4467878341674805
    6. '    
' → logprob: -5.8217878341674805
    7. '```' → logprob: -6.5717878341674805
    8. '"""
' → logprob: -6.8217878341674805
    9. 'return' → logprob: -7.1967878341674805
    10. ' """' → logprob: -7.4467878341674805

Token 88: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5490856766700745
    2. 'return' → logprob: -1.1740856170654297
    3. ' return' → logprob: -2.6740856170654297
    4. ')' → logprob: -3.2990856170654297
    5. '"""' → logprob: -5.17408561706543
    6. ':return' → logprob: -7.67408561706543
    7. '	return' → logprob: -8.79908561706543
    8. '    
' → logprob: -8.79908561706543
    9. ' ' → logprob: -8.79908561706543
    10. '
' → logprob: -9.04908561706543

Token 89: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.20765098929405212
    2. 'return' → logprob: -1.7076510190963745
    3. ' return' → logprob: -5.082651138305664
    4. '    ' → logprob: -12.082651138305664
    5. '	return' → logprob: -12.707651138305664
    6. ' ' → logprob: -13.207651138305664
    7. '   ' → logprob: -13.457651138305664
    8. '  ' → logprob: -14.207651138305664
    9. '       ' → logprob: -14.207651138305664
    10. '    
' → logprob: -14.332651138305664

Token 90: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.0004474732850212604
    2. ' return' → logprob: -7.7504472732543945
    3. '   ' → logprob: -11.000447273254395
    4. 'ret' → logprob: -16.37544822692871
    5. '	return' → logprob: -17.87544822692871
    6. 'import' → logprob: -18.87544822692871
    7. ' ' → logprob: -19.00044822692871
    8. '    
' → logprob: -19.00044822692871
    9. '```' → logprob: -19.37544822692871
    10. 'line' → logprob: -19.75044822692871

Token 91: ' map' (ID: 4014)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.0008700100006535649
    2. ' map' → logprob: -7.250870227813721
    3. 'list' → logprob: -8.750869750976562
    4. '(map' → logprob: -14.125869750976562
    5. '   ' → logprob: -14.375869750976562
    6. ' list' → logprob: -15.375869750976562
    7. '	map' → logprob: -16.000869750976562
    8. 'int' → logprob: -16.125869750976562
    9. '  ' → logprob: -17.250869750976562
    10. '[' → logprob: -17.625869750976562

Token 92: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.00524454889819026
    2. '(' → logprob: -5.255244731903076
    3. 'int' → logprob: -11.630244255065918
    4. '<int' → logprob: -13.630244255065918
    5. '(
' → logprob: -15.130244255065918
    6. '=int' → logprob: -15.630244255065918
    7. '[int' → logprob: -16.255245208740234
    8. '```' → logprob: -16.880245208740234
    9. '(lambda' → logprob: -17.380245208740234
    10. '(

' → logprob: -17.630245208740234

Token 93: ',' (ID: 11)
  Prédit: '(stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(stdin' → logprob: -0.19400393962860107
    2. '(sys' → logprob: -1.819003939628601
    3. ',' → logprob: -4.694004058837891
    4. '(' → logprob: -5.569004058837891
    5. '(input' → logprob: -8.06900405883789
    6. 'sys' → logprob: -8.44400405883789
    7. 'stdin' → logprob: -8.44400405883789
    8. ')' → logprob: -8.81900405883789
    9. ' (' → logprob: -9.94400405883789
    10. '(std' → logprob: -10.06900405883789

Token 94: ' stdin' (ID: 75143)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.038263868540525436
    2. ' stdin' → logprob: -3.2882637977600098
    3. '(stdin' → logprob: -8.788264274597168
    4. 'sys' → logprob: -10.288264274597168
    5. '.stdin' → logprob: -10.663264274597168
    6. 'stdout' → logprob: -12.163264274597168
    7. '   ' → logprob: -12.913264274597168
    8. ' sys' → logprob: -13.038264274597168
    9. 'input' → logprob: -14.038264274597168
    10. ' ' → logprob: -14.663264274597168

Token 95: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.018651790916919708
    2. '.' → logprob: -4.018651962280273
    3. ' .' → logprob: -8.018651962280273
    4. ')' → logprob: -9.518651962280273
    5. ').' → logprob: -10.143651962280273
    6. '.read' → logprob: -10.643651962280273
    7. '().' → logprob: -10.768651962280273
    8. '.readlines' → logprob: -11.518651962280273
    9. '.)' → logprob: -13.393651962280273
    10. '.
' → logprob: -14.393651962280273

Token 96: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.002620846964418888
    2. '())' → logprob: -6.127620697021484
    3. '()' → logprob: -7.752620697021484
    4. ')' → logprob: -13.002620697021484
    5. ' ().' → logprob: -13.252620697021484
    6. '(' → logprob: -14.127620697021484
    7. ' ())' → logprob: -14.252620697021484
    8. '()
' → logprob: -15.627620697021484
    9. ' ()' → logprob: -16.002620697021484
    10. '()[' → logprob: -16.127620697021484

Token 97: 'split' (ID: 13627)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.10156723111867905
    2. 'split' → logprob: -2.351567268371582
    3. 'rstrip' → logprob: -6.601567268371582
    4. ' strip' → logprob: -13.726567268371582
    5. '(strip' → logprob: -15.851567268371582
    6. ' split' → logprob: -16.226566314697266
    7. 'spl' → logprob: -17.101566314697266
    8. 's' → logprob: -17.101566314697266
    9. '(split' → logprob: -17.226566314697266
    10. ')' → logprob: -18.476566314697266

Token 98: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0015771172475069761
    2. '()' → logprob: -6.501576900482178
    3. '()))' → logprob: -10.001577377319336
    4. ')' → logprob: -11.126577377319336
    5. '(' → logprob: -11.751577377319336
    6. ' ())' → logprob: -12.251577377319336
    7. '())
' → logprob: -13.376577377319336
    8. '()]' → logprob: -16.001577377319336
    9. '();)' → logprob: -16.626577377319336
    10. '())

' → logprob: -16.751577377319336

Token 99: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.545237123966217
    2. '\' → logprob: -2.1702370643615723
    3. 'n' → logprob: -2.2952370643615723
    4. '#' → logprob: -2.5452370643615723
    5. '\n' → logprob: -2.6702370643615723
    6. 'd' → logprob: -3.0452370643615723
    7. 'a' → logprob: -6.170237064361572
    8. '    
' → logprob: -6.545237064361572
    9. ' ' → logprob: -7.045237064361572
    10. '' → logprob: -7.420237064361572

Token 100: ' li' (ID: 3476)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.16601215302944183
    2. ' solve' → logprob: -1.916012167930603
    3. ' input' → logprob: -6.791012287139893
    4. 'solve' → logprob: -6.916012287139893
    5. ' dfs' → logprob: -6.916012287139893
    6. ' sum' → logprob: -7.791012287139893
    7. ' solution' → logprob: -8.416011810302734
    8. 'main' → logprob: -8.541011810302734
    9. ' max' → logprob: -8.666011810302734
    10. ' test' → logprob: -9.041011810302734

Token 101: '_' (ID: 62)
  Prédit: 'st'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'st' → logprob: -0.7353761792182922
    2. 'ne' → logprob: -0.7353761792182922
    3. 'n' → logprob: -3.2353761196136475
    4. 's' → logprob: -7.360376358032227
    5. 'nt' → logprob: -7.610376358032227
    6. 'nes' → logprob: -7.735376358032227
    7. 'sts' → logprob: -8.485376358032227
    8. 'nest' → logprob: -9.985376358032227
    9. '_' → logprob: -10.610376358032227
    10. '()' → logprob: -10.860376358032227

Token 102: '():
' (ID: 8595)
  Prédit: 'st'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'st' → logprob: -0.09079571068286896
    2. 's' → logprob: -2.5907957553863525
    3. 'n' → logprob: -5.715795516967773
    4. 'ist' → logprob: -6.465795516967773
    5. 'list' → logprob: -6.465795516967773
    6. 'str' → logprob: -6.715795516967773
    7. 'lst' → logprob: -6.715795516967773
    8. 'nt' → logprob: -7.590795516967773
    9. 't' → logprob: -8.090795516967773
    10. 'std' → logprob: -8.590795516967773

Token 103: '   ' (ID: 271)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.13411632180213928
    2. '():
' → logprob: -2.7591164112091064
    3. '()' → logprob: -3.0091164112091064
    4. '):' → logprob: -4.759116172790527
    5. ')' → logprob: -6.884116172790527
    6. '):
' → logprob: -7.009116172790527
    7. 'def' → logprob: -7.009116172790527
    8. '   ' → logprob: -7.634116172790527
    9. ' ():' → logprob: -7.884116172790527
    10. ':' → logprob: -8.634116172790527

Token 104: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5480848550796509
    2. 'return' → logprob: -1.6730848550796509
    3. '():
' → logprob: -2.0480847358703613
    4. ' return' → logprob: -2.9230847358703613
    5. '):
' → logprob: -3.5480847358703613
    6. 'def' → logprob: -4.923084735870361
    7. ':
' → logprob: -5.173084735870361
    8. '():' → logprob: -5.298084735870361
    9. '()' → logprob: -6.923084735870361
    10. '):' → logprob: -7.298084735870361

Token 105: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1242624968290329
    2. '"""
' → logprob: -2.249262571334839
    3. 'return' → logprob: -4.87426233291626
    4. 'def' → logprob: -6.24926233291626
    5. '"""' → logprob: -7.12426233291626
    6. ' return' → logprob: -7.74926233291626
    7. ' ' → logprob: -8.624262809753418
    8. '()' → logprob: -8.999262809753418
    9. '  ' → logprob: -9.499262809753418
    10. '"' → logprob: -10.249262809753418

Token 106: ' Lis' (ID: 29571)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.4783221185207367
    2. 'def' → logprob: -1.103322148323059
    3. '"""
' → logprob: -3.7283220291137695
    4. '"""' → logprob: -4.2283220291137695
    5. '   ' → logprob: -5.3533220291137695
    6. ' return' → logprob: -5.9783220291137695
    7. 'Return' → logprob: -7.4783220291137695
    8. 'Lis' (adapté à ' Lis') → logprob: -7.6033220291137695
    9. 'Retour' → logprob: -8.10332202911377
    10. 'L' → logprob: -8.22832202911377

Token 107: ' une' (ID: 2463)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.14647932350635529
    2. '():' → logprob: -2.146479368209839
    3. 'int' → logprob: -5.02147912979126
    4. 'une' → logprob: -5.89647912979126
    5. ' ()' → logprob: -5.89647912979126
    6. 'line' → logprob: -6.64647912979126
    7. ' une' → logprob: -6.77147912979126
    8. '[]' → logprob: -7.02147912979126
    9. '():
' → logprob: -7.64647912979126
    10. 'n' → logprob: -7.89647912979126

Token 108: ' ligne' (ID: 19583)
  Prédit: 'ligne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ligne' → logprob: -0.05415497347712517
    2. ' ligne' → logprob: -3.304154872894287
    3. 'liste' → logprob: -4.179154872894287
    4. 'l' → logprob: -8.054155349731445
    5. 'line' → logprob: -9.054155349731445
    6. '_l' → logprob: -9.304155349731445
    7. 'lig' → logprob: -10.054155349731445
    8. ' liste' → logprob: -10.179155349731445
    9. 'list' → logprob: -10.554155349731445
    10. '_' → logprob: -11.429155349731445

Token 109: ' depuis' (ID: 16277)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.012563922442495823
    2. '<|end|>' → logprob: -5.512563705444336
    3. '().' → logprob: -5.637563705444336
    4. 'with' → logprob: -7.137563705444336
    5. ')' → logprob: -7.637563705444336
    6. 'def' → logprob: -7.762563705444336
    7. '()[' → logprob: -7.887563705444336
    8. '(' → logprob: -8.512563705444336
    9. 'avec' → logprob: -8.512563705444336
    10. ',' → logprob: -8.637563705444336

Token 110: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.03063657507300377
    2. 'stdin' → logprob: -3.5306365489959717
    3. ' l' → logprob: -7.530636787414551
    4. ')' → logprob: -9.15563678741455
    5. '(stdin' → logprob: -9.28063678741455
    6. ' stdin' → logprob: -9.90563678741455
    7. '()' → logprob: -10.03063678741455
    8. 'la' → logprob: -10.53063678741455
    9. 'le' → logprob: -11.90563678741455
    10. 'sys' → logprob: -12.65563678741455

Token 111: ''entrée' (ID: 115820)
  Prédit: ''entrée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''entrée' → logprob: -0.005380553193390369
    2. 'stdin' → logprob: -6.130380630493164
    3. 'entrée' → logprob: -6.505380630493164
    4. ''' → logprob: -7.255380630493164
    5. ''ent' → logprob: -7.755380630493164
    6. '(stdin' → logprob: -7.755380630493164
    7. '’entrée' → logprob: -10.505380630493164
    8. ''s' → logprob: -10.630380630493164
    9. ' stdin' → logprob: -10.880380630493164
    10. 'l' → logprob: -11.380380630493164

Token 112: ' standard' (ID: 7024)
  Prédit: 'standard'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'standard' → logprob: -0.12961465120315552
    2. ' standard' → logprob: -2.1296145915985107
    3. '()' → logprob: -6.62961483001709
    4. '().' → logprob: -7.75461483001709
    5. '   ' → logprob: -7.87961483001709
    6. '()
' → logprob: -8.87961483001709
    7. 'std' → logprob: -9.12961483001709
    8. '(),' → logprob: -9.37961483001709
    9. '.standard' → logprob: -9.87961483001709
    10. '_standard' → logprob: -10.50461483001709

Token 113: ',' (ID: 11)
  Prédit: '().'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.02727983333170414
    2. '()' → logprob: -4.777279853820801
    3. ',' → logprob: -4.902279853820801
    4. '():' → logprob: -5.277279853820801
    5. '(),' → logprob: -5.527279853820801
    6. '   ' → logprob: -7.152279853820801
    7. '():
' → logprob: -7.902279853820801
    8. '.strip' → logprob: -8.7772798538208
    9. ')' → logprob: -8.9022798538208
    10. '.split' → logprob: -9.2772798538208

Token 114: ' la' (ID: 557)
  Prédit: 'split'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.8531100153923035
    2. 'return' → logprob: -1.4781100749969482
    3. 'strip' → logprob: -1.4781100749969482
    4. ' return' → logprob: -3.1031100749969482
    5. ' split' → logprob: -3.9781100749969482
    6. ' retourne' → logprob: -4.103109836578369
    7. 'rstrip' → logprob: -4.478109836578369
    8. 'spl' → logprob: -4.728109836578369
    9. 'ren' → logprob: -5.603109836578369
    10. ' strip' → logprob: -5.603109836578369

Token 115: ' div' (ID: 4223)
  Prédit: 'split'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.4401460587978363
    2. 'return' → logprob: -1.3151460886001587
    3. 'strip' → logprob: -2.940145969390869
    4. 'def' → logprob: -3.815145969390869
    5. ' return' → logprob: -5.815145969390869
    6. 'map' → logprob: -6.065145969390869
    7. '"""
' → logprob: -6.190145969390869
    8. 'div' → logprob: -7.315145969390869
    9. 'plit' → logprob: -7.315145969390869
    10. 'rstrip' → logprob: -7.315145969390869

Token 116: 'ise' (ID: 1096)
  Prédit: 'ise'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ise' → logprob: -0.10202020406723022
    2. 'ue' → logprob: -3.977020263671875
    3. 'ève' → logprob: -4.352020263671875
    4. 've' → logprob: -4.352020263671875
    5. 'ize' → logprob: -4.352020263671875
    6. 'e' → logprob: -4.602020263671875
    7. 'ide' → logprob: -5.102020263671875
    8. 'ues' → logprob: -5.727020263671875
    9. 'isée' → logprob: -5.727020263671875
    10. 'vise' → logprob: -6.102020263671875

Token 117: ' selon' (ID: 27571)
  Prédit: ' selon'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' selon' → logprob: -0.025063594803214073
    2. '()' → logprob: -4.275063514709473
    3. '   ' → logprob: -5.400063514709473
    4. ' according' → logprob: -5.650063514709473
    5. ' en' → logprob: -7.025063514709473
    6. '(' → logprob: -7.775063514709473
    7. 'Selon' → logprob: -8.150063514709473
    8. '(
' → logprob: -8.275063514709473
    9. 'according' → logprob: -8.775063514709473
    10. '_' → logprob: -9.025063514709473

Token 118: ' les' (ID: 1341)
  Prédit: ' les'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.1820199191570282
    2. 'les' → logprob: -1.8070199489593506
    3. '('' → logprob: -6.9320197105407715
    4. 'l' → logprob: -7.5570197105407715
    5. '   ' → logprob: -8.68202018737793
    6. '()' → logprob: -9.43202018737793
    7. ''' → logprob: -9.43202018737793
    8. '```' → logprob: -9.55702018737793
    9. 'spaces' → logprob: -9.80702018737793
    10. ' l' → logprob: -9.80702018737793

Token 119: ' espaces' (ID: 98361)
  Prédit: 'esp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'esp' → logprob: -0.04477633163332939
    2. 'spaces' → logprob: -3.294776439666748
    3. ' espaces' → logprob: -5.544776439666748
    4. 'es' → logprob: -6.169776439666748
    5. '_' → logprob: -7.919776439666748
    6. 'space' → logprob: -9.04477596282959
    7. ''esp' → logprob: -9.29477596282959
    8. 'sp' → logprob: -10.54477596282959
    9. '_spaces' → logprob: -10.91977596282959
    10. ' spaces' → logprob: -11.16977596282959

Token 120: ',
' (ID: 412)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.04868638142943382
    2. '   ' → logprob: -4.048686504364014
    3. ',
' → logprob: -4.173686504364014
    4. 'def' → logprob: -4.548686504364014
    5. '(),' → logprob: -6.173686504364014
    6. '()' → logprob: -6.673686504364014
    7. '(),
' → logprob: -8.298686027526855
    8. '.split' → logprob: -9.173686027526855
    9. 'split' → logprob: -9.423686027526855
    10. '#' → logprob: -10.173686027526855

Token 121: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0018842538120225072
    2. 'return' → logprob: -7.126884460449219
    3. ' return' → logprob: -7.501884460449219
    4. 'def' → logprob: -8.001884460449219
    5. ' ' → logprob: -9.501884460449219
    6. '  ' → logprob: -10.626884460449219
    7. '    ' → logprob: -10.751884460449219
    8. ' def' → logprob: -10.876884460449219
    9. '   ' → logprob: -11.376884460449219
    10. ')' → logprob: -12.126884460449219

Token 122: ' convert' (ID: 8452)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.5244349837303162
    2. 'def' → logprob: -1.649435043334961
    3. ' return' → logprob: -2.024435043334961
    4. '   ' → logprob: -2.524435043334961
    5. ' retourne' → logprob: -6.149435043334961
    6. ' def' → logprob: -7.024435043334961
    7. ' retour' → logprob: -9.399435043334961
    8. 'returns' → logprob: -9.524435043334961
    9. ' ' → logprob: -9.649435043334961
    10. '  ' → logprob: -9.899435043334961

Token 123: 'it' (ID: 278)
  Prédit: 'it'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'it' → logprob: -0.0053075160831213
    2. 't' → logprob: -5.255307674407959
    3. ' it' → logprob: -9.7553071975708
    4. 'tit' → logprob: -11.6303071975708
    5. 'i' → logprob: -13.7553071975708
    6. 'ert' → logprob: -14.0053071975708
    7. 'iert' → logprob: -14.5053071975708
    8. 'rt' → logprob: -14.8803071975708
    9. 'nt' → logprob: -15.0053071975708
    10. 'sit' → logprob: -15.1303071975708

Token 124: ' chaque' (ID: 21194)
  Prédit: '(int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.20792794227600098
    2. '()' → logprob: -1.832927942276001
    3. 'int' → logprob: -4.332927703857422
    4. 'list' → logprob: -5.582927703857422
    5. '(list' → logprob: -5.832927703857422
    6. '(lambda' → logprob: -6.207927703857422
    7. '(' → logprob: -6.332927703857422
    8. 'la' → logprob: -6.832927703857422
    9. 'lambda' → logprob: -7.582927703857422
    10. 'une' → logprob: -8.082927703857422

Token 125: ' élément' (ID: 99627)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.07512907683849335
    2. ' élément' → logprob: -3.2001290321350098
    3. 'int' → logprob: -3.9501290321350098
    4. 'element' → logprob: -4.70012903213501
    5. ' element' → logprob: -6.32512903213501
    6. 'elem' → logprob: -6.95012903213501
    7. ' int' → logprob: -8.575129508972168
    8. 'él' → logprob: -9.200129508972168
    9. ' элемент' → logprob: -10.200129508972168
    10. ' ' → logprob: -10.325129508972168

Token 126: ' en' (ID: 469)
  Prédit: 'en'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'en' → logprob: -0.6433600783348083
    2. ' en' → logprob: -0.8933600783348083
    3. '_en' → logprob: -2.768360137939453
    4. ''en' → logprob: -6.643360137939453
    5. 'in' → logprob: -8.643360137939453
    6. ' in' → logprob: -9.143360137939453
    7. '	en' → logprob: -9.143360137939453
    8. '()' → logprob: -9.393360137939453
    9. '(en' → logprob: -9.643360137939453
    10. ',' → logprob: -9.643360137939453

Token 127: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.011911414563655853
    2. 'str' → logprob: -4.761911392211914
    3. ' int' → logprob: -5.761911392211914
    4. ' str' → logprob: -9.136911392211914
    5. 'ints' → logprob: -11.386911392211914
    6. '(int' → logprob: -12.011911392211914
    7. 'float' → logprob: -12.261911392211914
    8. '=int' → logprob: -12.761911392211914
    9. 'list' → logprob: -13.136911392211914
    10. ' ' → logprob: -13.511911392211914

Token 128: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.07496871799230576
    2. '()' → logprob: -3.6999688148498535
    3. '(),' → logprob: -3.6999688148498535
    4. ')' → logprob: -3.9499688148498535
    5. '   ' → logprob: -6.3249688148498535
    6. ',
' → logprob: -7.4499688148498535
    7. '),' → logprob: -7.9499688148498535
    8. 'def' → logprob: -8.199968338012695
    9. '(),
' → logprob: -8.824968338012695
    10. 'return' → logprob: -9.074968338012695

Token 129: ' puis' (ID: 18766)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -1.0442334413528442
    2. '()' → logprob: -1.5442334413528442
    3. 'split' → logprob: -1.6692334413528442
    4. 'et' → logprob: -3.1692333221435547
    5. ')' → logprob: -3.4192333221435547
    6. 'def' → logprob: -3.6692333221435547
    7. '[]' → logprob: -3.6692333221435547
    8. '   ' → logprob: -3.6692333221435547
    9. ',' → logprob: -3.9192333221435547
    10. ' return' → logprob: -4.419233322143555

Token 130: ' sou' (ID: 4069)
  Prédit: 'les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'les' → logprob: -0.81048583984375
    2. 'ren' → logprob: -2.43548583984375
    3. 'return' → logprob: -2.68548583984375
    4. 'ret' → logprob: -2.81048583984375
    5. 'sou' → logprob: -2.81048583984375
    6. 's' → logprob: -3.18548583984375
    7. 'lambda' → logprob: -3.18548583984375
    8. 'la' → logprob: -3.43548583984375
    9. 'map' → logprob: -3.56048583984375
    10. '#' → logprob: -3.56048583984375

Token 131: 'stra' (ID: 14867)
  Prédit: 'stra'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stra' → logprob: -0.04028483107686043
    2. 'st' → logprob: -4.165284633636475
    3. 'met' → logprob: -4.540284633636475
    4. 'stract' → logprob: -5.415284633636475
    5. 'str' → logprob: -6.165284633636475
    6. 'ligne' → logprob: -6.290284633636475
    7. 'straction' → logprob: -6.540284633636475
    8. 'b' → logprob: -7.540284633636475
    9. 'rt' → logprob: -7.790284633636475
    10. 'it' → logprob: -7.790284633636475

Token 132: 'it' (ID: 278)
  Prédit: 'ct'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ct' → logprob: -0.11843753606081009
    2. 'it' → logprob: -2.3684375286102295
    3. '```' → logprob: -5.243437767028809
    4. 'cte' → logprob: -5.618437767028809
    5. 't' → logprob: -5.993437767028809
    6. '1' → logprob: -6.493437767028809
    7. '   ' → logprob: -6.993437767028809
    8. '
' → logprob: -7.368437767028809
    9. '\' → logprob: -7.493437767028809
    10. '(' → logprob: -7.493437767028809

Token 133: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.10021594911813736
    2. ' ' → logprob: -2.3502159118652344
    3. ' ' → logprob: -11.975215911865234
    4. ' one' → logprob: -13.225215911865234
    5. '   ' → logprob: -14.475215911865234
    6. '_' → logprob: -15.600215911865234
    7. '
' → logprob: -15.850215911865234
    8. 's' → logprob: -16.600215911865234
    9. '(' → logprob: -17.225215911865234
    10. '```' → logprob: -17.600215911865234

Token 134: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -8.518582762917504e-05
    2. ' ' → logprob: -9.37508487701416
    3. ' one' → logprob: -17.000085830688477
    4. '`' → logprob: -17.500085830688477
    5. '(' → logprob: -17.625085830688477
    6. '１' → logprob: -18.000085830688477
    7. '```' → logprob: -18.250085830688477
    8. '
' → logprob: -18.750085830688477
    9. 'one' → logprob: -19.000085830688477
    10. ' ' → logprob: -19.125085830688477

Token 135: ' à' (ID: 1221)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.008765721693634987
    2. '(' → logprob: -4.758765697479248
    3. 'from' → logprob: -9.883766174316406
    4. ' ()' → logprob: -10.883766174316406
    5. '   ' → logprob: -11.133766174316406
    6. ')' → logprob: -11.258766174316406
    7. 'def' → logprob: -11.508766174316406
    8. '():' → logprob: -11.508766174316406
    9. '(),' → logprob: -11.758766174316406
    10. '(
' → logprob: -12.258766174316406

Token 136: ' chaque' (ID: 21194)
  Prédit: ' chaque'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaque' → logprob: -0.480866938829422
    2. ' each' → logprob: -1.7308669090270996
    3. 'each' → logprob: -1.7308669090270996
    4. ' chacun' → logprob: -3.9808669090270996
    5. ' chacune' → logprob: -5.9808669090271
    6. ' ' → logprob: -6.6058669090271
    7. 'e' → logprob: -7.1058669090271
    8. ')' → logprob: -7.3558669090271
    9. 'x' → logprob: -7.3558669090271
    10. 'ch' → logprob: -7.3558669090271

Token 137: ' valeur' (ID: 41664)
  Prédit: 'élé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'élé' → logprob: -0.8575828671455383
    2. 'x' → logprob: -1.1075828075408936
    3. 'element' → logprob: -3.1075828075408936
    4. ' élément' → logprob: -3.2325828075408936
    5. 'elem' → logprob: -3.4825828075408936
    6. 'e' → logprob: -3.6075828075408936
    7. ' x' → logprob: -3.7325828075408936
    8. 'int' → logprob: -3.9825828075408936
    9. 'i' → logprob: -4.357583045959473
    10. 'val' → logprob: -4.732583045959473

Token 138: '.
' (ID: 558)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.03873084485530853
    2. '():' → logprob: -3.4137308597564697
    3. '(),' → logprob: -6.788730621337891
    4. ',' → logprob: -7.038730621337891
    5. ')' → logprob: -7.163730621337891
    6. '   ' → logprob: -7.163730621337891
    7. '(' → logprob: -7.288730621337891
    8. '())' → logprob: -8.16373062133789
    9. '():
' → logprob: -9.53873062133789
    10. '()]' → logprob: -9.66373062133789

Token 139: '   ' (ID: 271)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.44644293189048767
    2. '   ' → logprob: -1.82144296169281
    3. '():
' → logprob: -1.94644296169281
    4. '()' → logprob: -2.9464428424835205
    5. 'def' → logprob: -7.0714430809021
    6. '):' → logprob: -7.3214430809021
    7. '()
' → logprob: -7.8214430809021
    8. 'return' → logprob: -8.321442604064941
    9. ':' → logprob: -8.446442604064941
    10. '):
' → logprob: -8.821442604064941

Token 140: ' Retour' (ID: 146830)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():' → logprob: -0.08830682188272476
    2. '()' → logprob: -2.8383069038391113
    3. '   ' → logprob: -4.213306903839111
    4. '():
' → logprob: -5.463306903839111
    5. '):' → logprob: -5.588306903839111
    6. ':' → logprob: -6.463306903839111
    7. ')' → logprob: -7.588306903839111
    8. 'return' → logprob: -7.713306903839111
    9. 'def' → logprob: -8.588306427001953
    10. ' return' → logprob: -8.838306427001953

Token 141: 'ne' (ID: 611)
  Prédit: 'ne'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ne' → logprob: -3.15441757265944e-05
    2. 'n' → logprob: -10.500031471252441
    3. 'ner' → logprob: -13.375031471252441
    4. 'e' → logprob: -13.625031471252441
    5. 'neur' → logprob: -14.500031471252441
    6. 'nne' → logprob: -15.125031471252441
    7. 'na' → logprob: -15.625031471252441
    8. 'nes' → logprob: -16.250032424926758
    9. '   ' → logprob: -16.750032424926758
    10. 'nent' → logprob: -17.375032424926758

Token 142: ' un' (ID: 537)
  Prédit: ' map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.004667695611715317
    2. 'map' → logprob: -5.87966775894165
    3. ' la' → logprob: -6.87966775894165
    4. ' l' → logprob: -8.004667282104492
    5. ' un' → logprob: -8.629667282104492
    6. ' ' → logprob: -9.504667282104492
    7. ' an' → logprob: -9.629667282104492
    8. ' le' → logprob: -9.754667282104492
    9. ' list' → logprob: -10.129667282104492
    10. '   ' → logprob: -10.629667282104492

Token 143: ' it' (ID: 480)
  Prédit: ' map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.3138050138950348
    2. 'map' → logprob: -1.3138049840927124
    3. ' list' → logprob: -8.313804626464844
    4. 'list' → logprob: -8.688804626464844
    5. 'm' → logprob: -10.063804626464844
    6. ' generator' → logprob: -11.063804626464844
    7. 'iter' → logprob: -11.313804626464844
    8. ' iterator' → logprob: -11.688804626464844
    9. 's' → logprob: -12.063804626464844
    10. 'e' → logprob: -12.188804626464844

Token 144: 'ér' (ID: 2156)
  Prédit: 'er'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.13758954405784607
    2. 'ér' → logprob: -2.137589454650879
    3. 'r' → logprob: -4.762589454650879
    4. 'érateur' → logprob: -7.637589454650879
    5. 'able' → logprob: -7.887589454650879
    6. 'ritable' → logprob: -8.012589454650879
    7. 'érer' → logprob: -8.762589454650879
    8. 'é' → logprob: -8.887589454650879
    9. 'éré' → logprob: -9.512589454650879
    10. '   ' → logprob: -9.762589454650879

Token 145: 'able' (ID: 562)
  Prédit: 'able'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'able' → logprob: -5.300083648762666e-05
    2. 'r' → logprob: -10.250053405761719
    3. 'nable' → logprob: -11.500053405761719
    4. 'er' → logprob: -13.000053405761719
    5. 'ble' → logprob: -14.000053405761719
    6. 'ateur' → logprob: -14.125053405761719
    7. 'table' → logprob: -14.250053405761719
    8. 'abl' → logprob: -14.750053405761719
    9. 'ables' → logprob: -14.875053405761719
    10. 'e' → logprob: -15.125053405761719

Token 146: ' de' (ID: 334)
  Prédit: ' map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.8518635034561157
    2. 'map' → logprob: -1.4768635034561157
    3. '(map' → logprob: -1.4768635034561157
    4. '(' → logprob: -2.976863384246826
    5. ' de' → logprob: -3.976863384246826
    6. ' of' → logprob: -4.351863384246826
    7. ')' → logprob: -4.851863384246826
    8. '(
' → logprob: -5.226863384246826
    9. '.map' → logprob: -5.851863384246826
    10. ':' → logprob: -5.851863384246826

Token 147: ' ces' (ID: 10532)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.4177393913269043
    2. 'map' → logprob: -1.4177393913269043
    3. ' int' → logprob: -2.9177393913269043
    4. ' map' → logprob: -3.7927393913269043
    5. 'ces' → logprob: -4.292739391326904
    6. '[int' → logprob: -5.792739391326904
    7. 'ints' → logprob: -6.792739391326904
    8. ' la' → logprob: -7.167739391326904
    9. '[' → logprob: -7.417739391326904
    10. 's' → logprob: -7.792739391326904

Token 148: ' valeurs' (ID: 73668)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.3252607583999634
    2. 'ent' → logprob: -1.8252607583999634
    3. ' int' → logprob: -3.075260639190674
    4. ' ent' → logprob: -3.450260639190674
    5. 'val' → logprob: -3.950260639190674
    6. 'ints' → logprob: -4.200260639190674
    7. ' valeurs' → logprob: -6.325260639190674
    8. ' ints' → logprob: -6.825260639190674
    9. 'ents' → logprob: -7.825260639190674
    10. ' val' → logprob: -7.950260639190674

Token 149: ' pour' (ID: 1930)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7142143249511719
    2. '()' → logprob: -0.8392143249511719
    3. '(' → logprob: -3.714214324951172
    4. '.' → logprob: -4.214214324951172
    5. ':' → logprob: -4.464214324951172
    6. ',' → logprob: -4.464214324951172
    7. '   ' → logprob: -5.339214324951172
    8. 'def' → logprob: -5.839214324951172
    9. 'int' → logprob: -6.464214324951172
    10. '(int' → logprob: -6.964214324951172

Token 150: ' le' (ID: 505)
  Prédit: ' faciliter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' faciliter' → logprob: -0.7565907835960388
    2. ' l' → logprob: -1.5065908432006836
    3. ' zero' → logprob: -2.1315908432006836
    4. ' ' → logprob: -3.2565908432006836
    5. ' permettre' → logprob: -3.8815908432006836
    6. ' la' → logprob: -4.131590843200684
    7. ' usage' → logprob: -4.256590843200684
    8. ' use' → logprob: -4.256590843200684
    9. ' convenience' → logprob: -4.381590843200684
    10. ' les' → logprob: -5.006590843200684

Token 151: ' cas' (ID: 2108)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.7953587770462036
    2. ' code' → logprob: -1.9203587770462036
    3. ' zero' → logprob: -2.170358657836914
    4. ' traitement' → logprob: -2.670358657836914
    5. '0' → logprob: -3.420358657836914
    6. ' compt' → logprob: -3.420358657836914
    7. ' problème' → logprob: -3.670358657836914
    8. ' index' → logprob: -3.795358657836914
    9. ' usage' → logprob: -3.795358657836914
    10. ' continuer' → logprob: -3.795358657836914

Token 152: ' d' (ID: 272)
  Prédit: ' des'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' des' → logprob: -0.10178647935390472
    2. ' où' → logprob: -2.8517863750457764
    3. ' where' → logprob: -4.3517866134643555
    4. ' d' → logprob: -4.4767866134643555
    5. ' de' → logprob: -4.9767866134643555
    6. 's' → logprob: -5.9767866134643555
    7. 'où' → logprob: -6.3517866134643555
    8. '   ' → logprob: -6.7267866134643555
    9. 'd' → logprob: -7.7267866134643555
    10. ' ' → logprob: -7.8517866134643555

Token 153: ''' (ID: 6)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.32515570521354675
    2. ' des' → logprob: -2.450155735015869
    3. 'es' → logprob: -3.325155735015869
    4. ' les' → logprob: -3.700155735015869
    5. 'l' → logprob: -3.950155735015869
    6. '0' → logprob: -3.950155735015869
    7. ' index' → logprob: -4.075155735015869
    8. 'les' → logprob: -4.075155735015869
    9. ' l' → logprob: -4.200155735015869
    10. ' ' → logprob: -4.950155735015869

Token 154: 'index' (ID: 2257)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.8230469822883606
    2. ' des' → logprob: -2.198046922683716
    3. ' l' → logprob: -2.323046922683716
    4. 'index' → logprob: -2.573046922683716
    5. 'indices' → logprob: -2.698046922683716
    6. 'les' → logprob: -3.073046922683716
    7. '0' → logprob: -3.448046922683716
    8. ' indices' → logprob: -3.573046922683716
    9. 'un' → logprob: -3.698046922683716
    10. ' index' → logprob: -3.948046922683716

Token 155: 'ation' (ID: 387)
  Prédit: 'ation'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ation' → logprob: -0.42415091395378113
    2. '0' → logprob: -1.6741509437561035
    3. 'ing' → logprob: -2.9241509437561035
    4. 's' → logprob: -3.2991509437561035
    5. 'es' → logprob: -4.0491509437561035
    6. 'és' → logprob: -4.9241509437561035
    7. ' ' → logprob: -4.9241509437561035
    8. 'é' → logprob: -5.1741509437561035
    9. 'offset' → logprob: -5.1741509437561035
    10. '[' → logprob: -5.7991509437561035

Token 156: ' à' (ID: 1221)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.0654810667037964
    2. ' de' → logprob: -1.0654810667037964
    3. ' des' → logprob: -2.190481185913086
    4. '[' → logprob: -2.815481185913086
    5. ' ' → logprob: -3.815481185913086
    6. ' (' → logprob: -4.565481185913086
    7. ' à' → logprob: -4.565481185913086
    8. '_' → logprob: -4.565481185913086
    9. 'from' → logprob: -4.690481185913086
    10. '(' → logprob: -4.940481185913086

Token 157: ' partir' (ID: 12100)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.08946282416582108
    2. 'z' → logprob: -2.7144627571105957
    3. 'zero' → logprob: -5.089462757110596
    4. ' z' → logprob: -5.464462757110596
    5. ' zéro' → logprob: -5.464462757110596
    6. ' ' → logprob: -5.839462757110596
    7. ' zero' → logprob: -6.589462757110596
    8. ' ' → logprob: -9.464463233947754
    9. 'l' → logprob: -9.589463233947754
    10. ' partir' → logprob: -9.964463233947754

Token 158: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.5783733129501343
    2. '0' → logprob: -0.9533733129501343
    3. 'de' → logprob: -3.078373432159424
    4. '1' → logprob: -5.203373432159424
    5. ' ' → logprob: -6.703373432159424
    6. 'd' → logprob: -7.578373432159424
    7. ' d' → logprob: -8.453372955322266
    8. '   ' → logprob: -9.078372955322266
    9. ' du' → logprob: -9.578372955322266
    10. ' des' → logprob: -10.953372955322266

Token 159: ' zéro' (ID: 182040)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00013488641707226634
    2. 'zero' → logprob: -9.625134468078613
    3. 'z' → logprob: -10.750134468078613
    4. ' ' → logprob: -10.750134468078613
    5. ' zéro' → logprob: -11.000134468078613
    6. '1' → logprob: -11.875134468078613
    7. ' zero' → logprob: -13.875134468078613
    8. ' z' → logprob: -14.000134468078613
    9. '```' → logprob: -14.875134468078613
    10. 'Zero' → logprob: -16.87513542175293

Token 160: '.
' (ID: 558)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6319741606712341
    2. ':' → logprob: -2.006974220275879
    3. '   ' → logprob: -2.506974220275879
    4. '()' → logprob: -2.506974220275879
    5. '):' → logprob: -2.881974220275879
    6. '.' → logprob: -3.131974220275879
    7. '():' → logprob: -3.131974220275879
    8. '(' → logprob: -4.256974220275879
    9. 'def' → logprob: -5.256974220275879
    10. ',' → logprob: -5.881974220275879

Token 161: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06322280317544937
    2. ')' → logprob: -2.813222885131836
    3. 'def' → logprob: -7.813222885131836
    4. '()' → logprob: -8.188222885131836
    5. '):' → logprob: -8.313222885131836
    6. '```' → logprob: -9.188222885131836
    7. 'return' → logprob: -10.063222885131836
    8. '):
' → logprob: -10.563222885131836
    9. '")' → logprob: -10.688222885131836
    10. ')
' → logprob: -10.813222885131836

Token 162: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.002405027626082301
    2. ')' → logprob: -6.627405166625977
    3. 'return' → logprob: -8.002405166625977
    4. '
' → logprob: -8.127405166625977
    5. ' return' → logprob: -8.377405166625977
    6. 'def' → logprob: -9.627405166625977
    7. '```' → logprob: -10.502405166625977
    8. '	return' → logprob: -10.877405166625977
    9. '    
' → logprob: -11.127405166625977
    10. ')
' → logprob: -11.252405166625977

Token 163: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.014606494456529617
    2. 'return' → logprob: -4.264606475830078
    3. ' return' → logprob: -7.889606475830078
    4. 'def' → logprob: -9.639606475830078
    5. '	return' → logprob: -13.389606475830078
    6. '  ' → logprob: -14.389606475830078
    7. '```' → logprob: -14.389606475830078
    8. ' ' → logprob: -15.514606475830078
    9. '   ' → logprob: -16.139606475830078
    10. '       ' → logprob: -16.264606475830078

Token 164: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.0004944138927385211
    2. ' return' → logprob: -8.250494003295898
    3. '   ' → logprob: -8.375494003295898
    4. 'ret' → logprob: -14.125494003295898
    5. ' ' → logprob: -14.500494003295898
    6. 'def' → logprob: -14.500494003295898
    7. '	return' → logprob: -15.375494003295898
    8. '
' → logprob: -16.0004940032959
    9. 'r' → logprob: -16.1254940032959
    10. '  ' → logprob: -16.1254940032959

Token 165: ' map' (ID: 4014)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.04860575869679451
    2. ' map' → logprob: -3.0486056804656982
    3. ' ' → logprob: -12.048605918884277
    4. '(map' → logprob: -12.298605918884277
    5. 'm' → logprob: -12.673605918884277
    6. '[' → logprob: -13.673605918884277
    7. '	map' → logprob: -13.673605918884277
    8. '   ' → logprob: -14.423605918884277
    9. 'ma' → logprob: -14.548605918884277
    10. '  ' → logprob: -14.673605918884277

Token 166: '(lambda' (ID: 43341)
  Prédit: '(int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.1604289412498474
    2. '(lambda' → logprob: -1.9104290008544922
    3. '(' → logprob: -8.785429000854492
    4. 'int' → logprob: -10.410429000854492
    5. 'lambda' → logprob: -11.035429000854492
    6. '(
' → logprob: -13.035429000854492
    7. '(part' → logprob: -13.785429000854492
    8. '[int' → logprob: -13.910429000854492
    9. '<int' → logprob: -14.035429000854492
    10. '(f' → logprob: -15.660429000854492

Token 167: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.004078878089785576
    2. ' x' → logprob: -5.5040788650512695
    3. 'a' → logprob: -15.00407886505127
    4. 'int' → logprob: -16.629079818725586
    5. 'lambda' → logprob: -17.004079818725586
    6. 'i' → logprob: -17.504079818725586
    7. 'v' → logprob: -18.004079818725586
    8. 'z' → logprob: -18.504079818725586
    9. 'n' → logprob: -18.629079818725586
    10. '	x' → logprob: -18.629079818725586

Token 168: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.8364764451980591
    2. ':int' → logprob: -0.8364764451980591
    3. 'x' → logprob: -2.9614763259887695
    4. ' :' → logprob: -3.0864763259887695
    5. 'int' → logprob: -3.8364763259887695
    6. ' x' → logprob: -4.7114763259887695
    7. ':x' → logprob: -5.5864763259887695
    8. ' int' → logprob: -6.4614763259887695
    9. ',int' → logprob: -8.96147632598877
    10. '(int' → logprob: -10.21147632598877

Token 169: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.2014990895986557
    2. 'x' → logprob: -1.701499104499817
    3. ' int' → logprob: -9.951498985290527
    4. ' x' → logprob: -10.201498985290527
    5. '(int' → logprob: -13.951498985290527
    6. '<int' → logprob: -16.451499938964844
    7. '[int' → logprob: -17.201499938964844
    8. '	int' → logprob: -17.826499938964844
    9. '(x' → logprob: -17.951499938964844
    10. '   ' → logprob: -18.701499938964844

Token 170: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.014179147779941559
    2. 'x' → logprob: -4.264179229736328
    3. '(' → logprob: -11.139179229736328
    4. '(
' → logprob: -14.639179229736328
    5. ' x' → logprob: -15.389179229736328
    6. ' (' → logprob: -16.139179229736328
    7. '
' → logprob: -16.514179229736328
    8. '(int' → logprob: -16.514179229736328
    9. ')' → logprob: -16.764179229736328
    10. ':' → logprob: -17.014179229736328

Token 171: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.005937209352850914
    2. ')-' → logprob: -5.130937099456787
    3. ' )' → logprob: -12.130937576293945
    4. '-' → logprob: -13.505937576293945
    5. '())' → logprob: -13.880937576293945
    6. '()' → logprob: -14.880937576293945
    7. ' -' → logprob: -15.755937576293945
    8. 'x' → logprob: -16.130937576293945
    9. '(x' → logprob: -17.130937576293945
    10. ')
' → logprob: -17.130937576293945

Token 172: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.5772337317466736
    2. ' -' → logprob: -0.8272337317466736
    3. ',' → logprob: -7.577233791351318
    4. '()-' → logprob: -7.702233791351318
    5. ')' → logprob: -8.70223331451416
    6. '(stdin' → logprob: -9.95223331451416
    7. ')-' → logprob: -10.32723331451416
    8. '()' → logprob: -10.32723331451416
    9. 'stdin' → logprob: -11.07723331451416
    10. ' ' → logprob: -12.07723331451416

Token 173: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.002185118617489934
    2. ' ' → logprob: -6.127185344696045
    3. '<|end|>' → logprob: -17.127185821533203
    4. '0' → logprob: -19.502185821533203
    5. '   ' → logprob: -19.877185821533203
    6. ' ' → logprob: -20.127185821533203
    7. ')' → logprob: -20.627185821533203
    8. '  ' → logprob: -20.627185821533203
    9. ',' → logprob: -20.877185821533203
    10. '	' → logprob: -21.064685821533203

Token 174: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -6.2729995988775045e-06
    2. ' ' → logprob: -12.000006675720215
    3. '   ' → logprob: -20.6250057220459
    4. '
' → logprob: -21.7500057220459
    5. '１' → logprob: -21.7500057220459
    6. '  ' → logprob: -22.1250057220459
    7. '```' → logprob: -22.1250057220459
    8. '۱' → logprob: -23.2500057220459
    9. '' → logprob: -23.3750057220459
    10. '0' → logprob: -23.5000057220459

Token 175: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -3.893480243277736e-05
    2. ' ,' → logprob: -10.375039100646973
    3. ',
' → logprob: -12.625039100646973
    4. ')' → logprob: -12.875039100646973
    5. '),' → logprob: -14.625039100646973
    6. ',x' → logprob: -14.750039100646973
    7. '   ' → logprob: -15.625039100646973
    8. ',map' → logprob: -15.875039100646973
    9. ',l' → logprob: -16.000038146972656
    10. ',input' → logprob: -16.000038146972656

Token 176: ' stdin' (ID: 75143)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.00043341092532500625
    2. ' stdin' → logprob: -7.750433444976807
    3. '(stdin' → logprob: -13.625432968139648
    4. 'stdout' → logprob: -13.750432968139648
    5. '.stdin' → logprob: -15.500432968139648
    6. '   ' → logprob: -16.00043296813965
    7. 'st' → logprob: -17.12543296813965
    8. 'sys' → logprob: -17.37543296813965
    9. ' ' → logprob: -17.50043296813965
    10. 'stderr' → logprob: -17.50043296813965

Token 177: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.0006445261533372104
    2. '().' → logprob: -7.375644683837891
    3. '.' → logprob: -11.00064468383789
    4. ').' → logprob: -14.62564468383789
    5. ')' → logprob: -15.00064468383789
    6. '()' → logprob: -15.37564468383789
    7. '.readlines' → logprob: -16.00064468383789
    8. ' readline' → logprob: -16.00064468383789
    9. '.read' → logprob: -16.87564468383789
    10. ' .' → logprob: -17.25064468383789

Token 178: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -8.2994620242971e-06
    2. '()' → logprob: -11.875008583068848
    3. ')' → logprob: -14.375008583068848
    4. ' ().' → logprob: -15.375008583068848
    5. '(' → logprob: -15.875008583068848
    6. '())' → logprob: -16.00000762939453
    7. '.split' → logprob: -16.25000762939453
    8. '.' → logprob: -16.62500762939453
    9. '()[' → logprob: -16.75000762939453
    10. ' .' → logprob: -17.25000762939453

Token 179: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -2.2200749754119897e-06
    2. ')' → logprob: -13.500001907348633
    3. ' split' → logprob: -14.375001907348633
    4. 'strip' → logprob: -16.000001907348633
    5. '(split' → logprob: -17.750001907348633
    6. 'rstrip' → logprob: -17.875001907348633
    7. 'spl' → logprob: -19.000001907348633
    8. '_split' → logprob: -20.000001907348633
    9. '<|end|>' → logprob: -20.125001907348633
    10. '```' → logprob: -20.625001907348633

Token 180: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.20527487993240356
    2. ')' → logprob: -1.7052748203277588
    3. '()' → logprob: -5.580275058746338
    4. '))' → logprob: -9.70527458190918
    5. '()))' → logprob: -11.58027458190918
    6. '())
' → logprob: -12.20527458190918
    7. '(' → logprob: -12.95527458190918
    8. ' ())' → logprob: -13.33027458190918
    9. ' )' → logprob: -13.70527458190918
    10. ')
' → logprob: -15.08027458190918

Token 181: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0016908926190808415
    2. 'd' → logprob: -6.626690864562988
    3. '\' → logprob: -9.251690864562988
    4. '#' → logprob: -9.376690864562988
    5. 'n' → logprob: -9.626690864562988
    6. '
' → logprob: -10.251690864562988
    7. 'de' → logprob: -10.751690864562988
    8. 'ndef' → logprob: -11.751690864562988
    9. '\n' → logprob: -11.876690864562988
    10. '    
' → logprob: -12.001690864562988

Token 182: ' lf' (ID: 131463)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.5750077962875366
    2. 'int' → logprob: -1.8250077962875366
    3. 'i' → logprob: -2.200007915496826
    4. 'n' → logprob: -2.450007915496826
    5. ' s' → logprob: -3.450007915496826
    6. 'in' → logprob: -4.200007915496826
    7. 'str' → logprob: -5.200007915496826
    8. ' n' → logprob: -5.200007915496826
    9. ' int' → logprob: -5.575007915496826
    10. ' i' → logprob: -5.825007915496826

Token 183: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.06217863783240318
    2. '()' → logprob: -3.062178611755371
    3. '():
' → logprob: -4.312178611755371
    4. '():

' → logprob: -10.812178611755371
    5. '():
' → logprob: -11.312178611755371
    6. '()>' → logprob: -11.437178611755371
    7. ' ():' → logprob: -11.812178611755371
    8. '()):
' → logprob: -11.937178611755371
    9. '()">' → logprob: -11.937178611755371
    10. '()}' → logprob: -12.187178611755371

Token 184: '   ' (ID: 271)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():' → logprob: -0.004189755767583847
    2. '():
' → logprob: -5.504189968109131
    3. '()' → logprob: -9.129189491271973
    4. '():

' → logprob: -13.754189491271973
    5. ' ():' → logprob: -14.129189491271973
    6. '():
' → logprob: -14.129189491271973
    7. '(' → logprob: -16.00419044494629
    8. ':' → logprob: -16.87919044494629
    9. '()):
' → logprob: -17.25419044494629
    10. '):' → logprob: -17.37919044494629

Token 185: ' """
' (ID: 7037)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.12689167261123657
    2. '   ' → logprob: -2.251891613006592
    3. ' return' → logprob: -4.376891613006592
    4. '"""
' (adapté à ' """
') → logprob: -6.751891613006592
    5. '
' → logprob: -9.37689208984375
    6. ' ' → logprob: -10.00189208984375
    7. '"""' → logprob: -10.37689208984375
    8. '()' → logprob: -11.12689208984375
    9. ''''
' → logprob: -11.12689208984375
    10. '```' → logprob: -11.75189208984375

Token 186: '   ' (ID: 271)
  Prédit: '"""
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"""
' → logprob: -0.25583362579345703
    2. '   ' → logprob: -1.505833625793457
    3. '"""' → logprob: -5.630833625793457
    4. 'return' → logprob: -8.505833625793457
    5. '"' → logprob: -10.130833625793457
    6. '""' → logprob: -10.630833625793457
    7. ' """
' → logprob: -11.005833625793457
    8. '"""
' → logprob: -11.505833625793457
    9. '"""

' → logprob: -12.130833625793457
    10. ' ' → logprob: -12.880833625793457

Token 187: ' Lis' (ID: 29571)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7322245836257935
    2. 'return' → logprob: -1.1072245836257935
    3. '"""
' → logprob: -1.7322245836257935
    4. '"""' → logprob: -4.607224464416504
    5. ' return' → logprob: -6.857224464416504
    6. '""' → logprob: -7.607224464416504
    7. '
' → logprob: -9.732224464416504
    8. 'def' → logprob: -9.857224464416504
    9. '```' → logprob: -10.607224464416504
    10. ' ' → logprob: -10.732224464416504

Token 188: ' une' (ID: 2463)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.022282257676124573
    2. ' ()' → logprob: -4.022282123565674
    3. '[]' → logprob: -6.647282123565674
    4. '(' → logprob: -7.522282123565674
    5. '():' → logprob: -7.647282123565674
    6. 'int' → logprob: -7.897282123565674
    7. 'a' → logprob: -8.147282600402832
    8. 'stdin' → logprob: -8.897282600402832
    9. '(stdin' → logprob: -9.147282600402832
    10. ' (' → logprob: -9.522282600402832

Token 189: ' ligne' (ID: 19583)
  Prédit: 'ligne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ligne' → logprob: -0.7113385200500488
    2. ' ligne' → logprob: -0.8363385200500488
    3. 'line' → logprob: -2.711338520050049
    4. ' line' → logprob: -5.336338520050049
    5. '()' → logprob: -6.086338520050049
    6. 'igne' → logprob: -6.711338520050049
    7. 'l' → logprob: -7.586338520050049
    8. ')' → logprob: -9.21133804321289
    9. 'ine' → logprob: -9.46133804321289
    10. '[]' → logprob: -9.83633804321289

Token 190: ' depuis' (ID: 16277)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.004228104837238789
    2. 'from' → logprob: -6.254228115081787
    3. '()>' → logprob: -7.504228115081787
    4. '().' → logprob: -7.754228115081787
    5. '():' → logprob: -8.129227638244629
    6. '():
' → logprob: -8.254227638244629
    7. '<|end|>' → logprob: -8.879227638244629
    8. '()==' → logprob: -9.629227638244629
    9. ' =' → logprob: -9.629227638244629
    10. '()<' → logprob: -10.004227638244629

Token 191: ' l' (ID: 305)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.7462289333343506
    2. '(stdin' → logprob: -0.7462289333343506
    3. ' stdin' → logprob: -3.1212289333343506
    4. 'l' → logprob: -5.37122917175293
    5. 'le' → logprob: -7.37122917175293
    6. 'sys' → logprob: -7.87122917175293
    7. ' la' → logprob: -7.87122917175293
    8. 'stdout' → logprob: -7.87122917175293
    9. 'la' → logprob: -7.99622917175293
    10. 'the' → logprob: -8.62122917175293

Token 192: ''entrée' (ID: 115820)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.18144510686397552
    2. 'stdin' → logprob: -2.0564451217651367
    3. ''entrée' → logprob: -3.5564451217651367
    4. '(stdin' → logprob: -5.931445121765137
    5. 'e' → logprob: -6.181445121765137
    6. ' stdin' → logprob: -6.681445121765137
    7. 'entrée' → logprob: -6.806445121765137
    8. 'input' → logprob: -7.431445121765137
    9. 'sys' → logprob: -7.931445121765137
    10. ''l' → logprob: -8.181445121765137

Token 193: ' standard' (ID: 7024)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.013766412623226643
    2. 'standard' → logprob: -4.638766288757324
    3. ' standard' → logprob: -6.513766288757324
    4. '()
' → logprob: -7.138766288757324
    5. '_standard' → logprob: -7.638766288757324
    6. '().' → logprob: -7.888766288757324
    7. '```' → logprob: -8.638766288757324
    8. ' ()' → logprob: -9.013766288757324
    9. ')' → logprob: -9.513766288757324
    10. '(' → logprob: -9.888766288757324

Token 194: ',' (ID: 11)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.38263508677482605
    2. '():
' → logprob: -1.7576351165771484
    3. '()' → logprob: -2.3826351165771484
    4. '   ' → logprob: -3.1326351165771484
    5. 'def' → logprob: -5.132635116577148
    6. ',' → logprob: -6.632635116577148
    7. '(),' → logprob: -7.382635116577148
    8. '):
' → logprob: -8.132635116577148
    9. '):' → logprob: -8.132635116577148
    10. ':' → logprob: -8.257635116577148

Token 195: ' la' (ID: 557)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004563511349260807
    2. 'return' → logprob: -6.129563331604004
    3. ' return' → logprob: -6.254563331604004
    4. ' ' → logprob: -8.379563331604004
    5. '  ' → logprob: -9.629563331604004
    6. '    ' → logprob: -9.879563331604004
    7. '    
' → logprob: -10.504563331604004
    8. '
' → logprob: -10.504563331604004
    9. ' stdin' → logprob: -11.379563331604004
    10. 'stdin' → logprob: -11.379563331604004

Token 196: ' div' (ID: 4223)
  Prédit: 'split'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00991922989487648
    2. 'float' → logprob: -5.384919166564941
    3. ' split' → logprob: -5.634919166564941
    4. 'map' → logprob: -7.634919166564941
    5. '"""
' → logprob: -7.634919166564941
    6. ' float' → logprob: -8.384919166564941
    7. '   ' → logprob: -8.759919166564941
    8. 'return' → logprob: -9.384919166564941
    9. 'spl' → logprob: -9.509919166564941
    10. 'strip' → logprob: -10.134919166564941

Token 197: 'ise' (ID: 1096)
  Prédit: '.readline'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.readline' → logprob: -1.1251739263534546
    2. 'chaine' → logprob: -2.250174045562744
    3. 'line' → logprob: -2.500174045562744
    4. 'stdin' → logprob: -2.500174045562744
    5. 'standard' → logprob: -2.875174045562744
    6. 'def' → logprob: -3.125174045562744
    7. 'cline' → logprob: -3.250174045562744
    8. 'sert' → logprob: -3.750174045562744
    9. 'f' → logprob: -3.750174045562744
    10. 'read' → logprob: -4.000174045562744

Token 198: ' selon' (ID: 27571)
  Prédit: ' selon'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' selon' → logprob: -0.10519802570343018
    2. '()' → logprob: -2.6051979064941406
    3. ' according' → logprob: -3.8551979064941406
    4. 'according' → logprob: -5.730197906494141
    5. '   ' → logprob: -6.855197906494141
    6. 'Selon' → logprob: -9.23019790649414
    7. ' ' → logprob: -9.35519790649414
    8. '()
' → logprob: -9.98019790649414
    9. '```' → logprob: -9.98019790649414
    10. 'def' → logprob: -10.35519790649414

Token 199: ' les' (ID: 1341)
  Prédit: ' les'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.038383182138204575
    2. 'les' → logprob: -3.2883832454681396
    3. '()' → logprob: -8.913383483886719
    4. 'l' → logprob: -9.663383483886719
    5. ''' → logprob: -10.538383483886719
    6. ')' → logprob: -10.788383483886719
    7. '[]' → logprob: -11.163383483886719
    8. ' l' → logprob: -11.413383483886719
    9. '   ' → logprob: -11.538383483886719
    10. 's' → logprob: -11.538383483886719

Token 200: ' espaces' (ID: 98361)
  Prédit: 'esp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'esp' → logprob: -0.004529688972979784
    2. ' espaces' → logprob: -5.8795294761657715
    3. 'spaces' → logprob: -6.5045294761657715
    4. 'es' → logprob: -8.50452995300293
    5. ''esp' → logprob: -10.75452995300293
    6. 'paces' → logprob: -14.00452995300293
    7. ''espace' → logprob: -14.87952995300293
    8. 'Esp' → logprob: -15.00452995300293
    9. 'space' → logprob: -15.12952995300293
    10. '’esp' → logprob: -15.62952995300293

Token 201: ',
' (ID: 412)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.08074284344911575
    2. ',
' → logprob: -2.580742835998535
    3. '   ' → logprob: -6.455742835998535
    4. ')' → logprob: -8.580742835998535
    5. ',
' → logprob: -10.455742835998535
    6. 'return' → logprob: -11.080742835998535
    7. 'def' → logprob: -11.580742835998535
    8. ' ,' → logprob: -11.705742835998535
    9. '.' → logprob: -11.830742835998535
    10. ',

' → logprob: -12.455742835998535

Token 202: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.26810964941978455
    2. 'return' → logprob: -1.518109679222107
    3. 'def' → logprob: -4.3931097984313965
    4. ' return' → logprob: -5.6431097984313965
    5. '  ' → logprob: -10.268109321594238
    6. 'convert' → logprob: -10.768109321594238
    7. 'returns' → logprob: -10.893109321594238
    8. ' ' → logprob: -11.018109321594238
    9. 'float' → logprob: -11.893109321594238
    10. '	return' → logprob: -11.893109321594238

Token 203: ' convert' (ID: 8452)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.003433165606111288
    2. 'convert' (adapté à ' convert') → logprob: -6.2534332275390625
    3. ' return' → logprob: -6.6284332275390625
    4. '   ' → logprob: -9.378433227539062
    5. ' retourne' → logprob: -9.878433227539062
    6. 'ret' → logprob: -11.128433227539062
    7. 'def' → logprob: -11.628433227539062
    8. 'ren' → logprob: -11.628433227539062
    9. ' convert' → logprob: -12.753433227539062
    10. '  ' → logprob: -13.128433227539062

Token 204: 'it' (ID: 278)
  Prédit: 'it'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'it' → logprob: -0.005203758832067251
    2. 'issant' → logprob: -6.130203723907471
    3. 'ant' → logprob: -6.755203723907471
    4. 'e' → logprob: -7.505203723907471
    5. '()' → logprob: -8.255204200744629
    6. 'int' → logprob: -8.630204200744629
    7. 'er' → logprob: -8.630204200744629
    8. 'split' → logprob: -9.130204200744629
    9. 'et' → logprob: -9.130204200744629
    10. '(int' → logprob: -9.255204200744629

Token 205: ' chaque' (ID: 21194)
  Prédit: ' chaque'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaque' → logprob: -0.0212478619068861
    2. 'float' → logprob: -4.146247863769531
    3. 'each' → logprob: -6.396247863769531
    4. ' float' → logprob: -6.896247863769531
    5. '(float' → logprob: -6.896247863769531
    6. 'Chaque' → logprob: -7.521247863769531
    7. 'cha' → logprob: -7.771247863769531
    8. ' each' → logprob: -7.896247863769531
    9. '   ' → logprob: -9.896247863769531
    10. ' ' → logprob: -10.521247863769531

Token 206: ' élément' (ID: 99627)
  Prédit: 'float'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'float' → logprob: -0.518638014793396
    2. 'élé' → logprob: -1.018638014793396
    3. '(float' → logprob: -3.3936381340026855
    4. ' float' → logprob: -5.1436381340026855
    5. 'element' → logprob: -6.3936381340026855
    6. '=float' → logprob: -7.3936381340026855
    7. 'flo' → logprob: -7.8936381340026855
    8. 'elem' → logprob: -7.8936381340026855
    9. '_float' → logprob: -8.518637657165527
    10. ' élément' → logprob: -9.018637657165527

Token 207: ' en' (ID: 469)
  Prédit: ' en'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' en' → logprob: -0.10142485052347183
    2. '(int' → logprob: -3.1014249324798584
    3. '(' → logprob: -3.9764249324798584
    4. ' in' → logprob: -4.601424694061279
    5. 'in' → logprob: -4.976424694061279
    6. ',' → logprob: -5.351424694061279
    7. 'en' → logprob: -5.726424694061279
    8. ')' → logprob: -5.851424694061279
    9. '(en' → logprob: -6.476424694061279
    10. '   ' → logprob: -6.726424694061279

Token 208: ' float' (ID: 4428)
  Prédit: 'float'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'float' → logprob: -0.0009152670972980559
    2. ' float' → logprob: -7.000915050506592
    3. 'flo' → logprob: -12.50091552734375
    4. 'fl' → logprob: -17.25091552734375
    5. 'f' → logprob: -17.25091552734375
    6. 'flt' → logprob: -18.62591552734375
    7. '=float' → logprob: -18.75091552734375
    8. ',float' → logprob: -18.87591552734375
    9. '
' → logprob: -19.50091552734375
    10. '(float' → logprob: -19.87591552734375

Token 209: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.006844192277640104
    2. ')' → logprob: -5.6318440437316895
    3. '(),' → logprob: -6.6318440437316895
    4. '()' → logprob: -6.8818440437316895
    5. '   ' → logprob: -8.006844520568848
    6. ',
' → logprob: -8.256844520568848
    7. '(' → logprob: -8.756844520568848
    8. 'return' → logprob: -10.131844520568848
    9. ' ,' → logprob: -10.631844520568848
    10. '),' → logprob: -10.881844520568848

Token 210: ' et' (ID: 859)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06389167159795761
    2. 'return' → logprob: -3.688891649246216
    3. ' return' → logprob: -4.188891887664795
    4. ' stdin' → logprob: -4.938891887664795
    5. ' et' → logprob: -5.313891887664795
    6. 'stdin' → logprob: -5.563891887664795
    7. ' and' → logprob: -5.938891887664795
    8. ',' → logprob: -7.188891887664795
    9. 'et' → logprob: -7.188891887664795
    10. ')' → logprob: -7.438891887664795

Token 211: ' ren' (ID: 5427)
  Prédit: ' ren'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ren' → logprob: -0.06406991183757782
    2. ' return' → logprob: -3.689069986343384
    3. 'ren' → logprob: -3.814069986343384
    4. 'return' → logprob: -4.439069747924805
    5. ' retourne' → logprob: -5.814069747924805
    6. ' returns' → logprob: -9.439069747924805
    7. ' retour' → logprob: -10.064069747924805
    8. 'returns' → logprob: -10.689069747924805
    9. ' rend' → logprob: -10.814069747924805
    10. 'ret' → logprob: -11.314069747924805

Token 212: 'voie' (ID: 70072)
  Prédit: 'voie'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'voie' → logprob: -0.0002726601669564843
    2. 'voit' → logprob: -8.875272750854492
    3. 'v' → logprob: -9.125272750854492
    4. 'voi' → logprob: -11.500272750854492
    5. 'vo' → logprob: -12.375272750854492
    6. 'voy' → logprob: -12.625272750854492
    7. 'return' → logprob: -13.500272750854492
    8. 'e' → logprob: -13.875272750854492
    9. 't' → logprob: -14.000272750854492
    10. '   ' → logprob: -14.250272750854492

Token 213: ' un' (ID: 537)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.25193965435028076
    2. ' map' → logprob: -1.5019396543502808
    3. 'float' → logprob: -12.37693977355957
    4. ' ' → logprob: -12.75193977355957
    5. '   ' → logprob: -14.12693977355957
    6. 'list' → logprob: -14.37693977355957
    7. '	map' → logprob: -14.50193977355957
    8. ' ' → logprob: -14.75193977355957
    9. '(map' → logprob: -15.00193977355957
    10. ' float' → logprob: -15.12693977355957

Token 214: ' it' (ID: 480)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.3132651150226593
    2. ' map' → logprob: -1.313265085220337
    3. 'iter' → logprob: -13.688264846801758
    4. ' ' → logprob: -13.938264846801758
    5. '	map' → logprob: -13.938264846801758
    6. 'm' → logprob: -15.813264846801758
    7. ' iter' → logprob: -15.938264846801758
    8. 'float' → logprob: -16.438264846801758
    9. ' float' → logprob: -17.813264846801758
    10. '   ' → logprob: -17.938264846801758

Token 215: 'ér' (ID: 2156)
  Prédit: 'er'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.3500019311904907
    2. 'ér' → logprob: -1.3500019311904907
    3. 'érer' → logprob: -4.475001811981201
    4. 'érateur' → logprob: -5.100001811981201
    5. 'ritable' → logprob: -5.850001811981201
    6. 'ter' → logprob: -6.100001811981201
    7. 'éré' → logprob: -6.225001811981201
    8. 'éraire' → logprob: -6.475001811981201
    9. 'érale' → logprob: -6.600001811981201
    10. 'é' → logprob: -6.725001811981201

Token 216: 'able' (ID: 562)
  Prédit: 'able'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'able' → logprob: -0.3527924716472626
    2. 'table' → logprob: -1.227792501449585
    3. 't' → logprob: -5.602792263031006
    4. 'nable' → logprob: -7.977792263031006
    5. 'r' → logprob: -9.602792739868164
    6. 'atable' → logprob: -9.602792739868164
    7. 'utable' → logprob: -10.102792739868164
    8. 'tab' → logprob: -10.227792739868164
    9. 'etable' → logprob: -10.727792739868164
    10. 'itable' → logprob: -11.102792739868164

Token 217: ' de' (ID: 334)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03912493586540222
    2. '(int' → logprob: -3.5391249656677246
    3. '(float' → logprob: -6.039124965667725
    4. '(
' → logprob: -6.164124965667725
    5. ')' → logprob: -6.914124965667725
    6. 'def' → logprob: -7.164124965667725
    7. 'of' → logprob: -7.664124965667725
    8. '...' → logprob: -7.789124965667725
    9. ' of' → logprob: -8.039124488830566
    10. '<|end|>' → logprob: -8.164124488830566

Token 218: ' ces' (ID: 10532)
  Prédit: 'float'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'float' → logprob: -0.04345105215907097
    2. 'flo' → logprob: -3.2934510707855225
    3. ' float' → logprob: -5.793450832366943
    4. 'map' → logprob: -6.793450832366943
    5. ' floats' → logprob: -7.043450832366943
    6. 'stdin' → logprob: -8.418451309204102
    7. ' map' → logprob: -10.168451309204102
    8. 'fl' → logprob: -10.918451309204102
    9. ' ' → logprob: -11.293451309204102
    10. 'f' → logprob: -11.293451309204102

Token 219: ' flott' (ID: 108700)
  Prédit: 'flo'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'flo' → logprob: -0.2046726495027542
    2. 'float' → logprob: -2.2046725749969482
    3. ' floats' → logprob: -3.5796725749969482
    4. 'f' → logprob: -4.204672813415527
    5. ' float' → logprob: -4.329672813415527
    6. '<|end|>' → logprob: -4.829672813415527
    7. ' flott' → logprob: -5.829672813415527
    8. 'tokens' → logprob: -6.704672813415527
    9. ' f' → logprob: -7.079672813415527
    10. '<float' → logprob: -7.204672813415527

Token 220: 'ants' (ID: 2027)
  Prédit: 'ants'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ants' → logprob: -0.3641614615917206
    2. 'o' → logprob: -1.239161491394043
    3. 'eurs' → logprob: -4.489161491394043
    4. 'oints' → logprob: -6.864161491394043
    5. 's' → logprob: -7.114161491394043
    6. 'nants' → logprob: -7.364161491394043
    7. 'ant' → logprob: -8.364161491394043
    8. '```' → logprob: -8.614161491394043
    9. 'os' → logprob: -8.864161491394043
    10. 'auts' → logprob: -8.989161491394043

Token 221: '.
' (ID: 558)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.10510723292827606
    2. ')' → logprob: -2.355107307434082
    3. '.' → logprob: -6.480107307434082
    4. '().' → logprob: -6.605107307434082
    5. '())' → logprob: -6.730107307434082
    6. '   ' → logprob: -8.105107307434082
    7. '(' → logprob: -8.480107307434082
    8. ',' → logprob: -9.980107307434082
    9. ').' → logprob: -10.105107307434082
    10. '()
' → logprob: -10.105107307434082

Token 222: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00014764121442567557
    2. '"""
' → logprob: -9.500147819519043
    3. '"""' → logprob: -10.125147819519043
    4. ')' → logprob: -10.500147819519043
    5. '```' → logprob: -13.375147819519043
    6. ' ' → logprob: -13.500147819519043
    7. '  ' → logprob: -13.750147819519043
    8. 'return' → logprob: -14.750147819519043
    9. '""' → logprob: -16.000146865844727
    10. ')
' → logprob: -16.250146865844727

Token 223: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.003252342576161027
    2. ')' → logprob: -5.7532525062561035
    3. '")' → logprob: -10.753252029418945
    4. 'return' → logprob: -11.503252029418945
    5. '"""' → logprob: -11.503252029418945
    6. '()' → logprob: -11.753252029418945
    7. ' ' → logprob: -11.753252029418945
    8. '  ' → logprob: -11.753252029418945
    9. '"""
' (adapté à ' """
') → logprob: -12.378252029418945
    10. '```' → logprob: -13.878252029418945

Token 224: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.47530555725097656
    2. 'return' → logprob: -0.9753055572509766
    3. ' return' → logprob: -6.725305557250977
    4. 'def' → logprob: -10.850305557250977
    5. ' ' → logprob: -12.600305557250977
    6. '	return' → logprob: -13.225305557250977
    7. '```' → logprob: -13.475305557250977
    8. '  ' → logprob: -13.725305557250977
    9. '   ' → logprob: -15.225305557250977
    10. '
' → logprob: -15.600305557250977

Token 225: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.0003022153687197715
    2. ' return' → logprob: -8.1253023147583
    3. '   ' → logprob: -12.0003023147583
    4. '	return' → logprob: -17.250301361083984
    5. '
' → logprob: -17.875301361083984
    6. ' ' → logprob: -18.000301361083984
    7. 'def' → logprob: -18.125301361083984
    8. '```' → logprob: -19.250301361083984
    9. 'eturn' → logprob: -19.375301361083984
    10. '  ' → logprob: -19.500301361083984

Token 226: ' map' (ID: 4014)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -2.7610454708337784e-05
    2. ' map' → logprob: -10.500027656555176
    3. '	map' → logprob: -18.62502670288086
    4. 'float' → logprob: -19.87502670288086
    5. '(map' → logprob: -19.87502670288086
    6. ' ' → logprob: -20.62502670288086
    7. '   ' → logprob: -20.62502670288086
    8. 'm' → logprob: -21.12502670288086
    9. '  ' → logprob: -22.00002670288086
    10. '.map' → logprob: -22.12502670288086

Token 227: '(float' (ID: 17830)
  Prédit: '(float'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(float' → logprob: -7.493430894101039e-05
    2. '(' → logprob: -10.250075340270996
    3. 'float' → logprob: -10.375075340270996
    4. '<float' → logprob: -12.250075340270996
    5. ',float' → logprob: -13.375075340270996
    6. '=float' → logprob: -13.625075340270996
    7. ' float' → logprob: -14.375075340270996
    8. '	float' → logprob: -16.62507438659668
    9. '_float' → logprob: -16.75007438659668
    10. '(
' → logprob: -17.12507438659668

Token 228: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -2.5776860184123507e-06
    2. ' ,' → logprob: -13.12500286102295
    3. ',
' → logprob: -14.75000286102295
    4. ',std' → logprob: -17.750001907348633
    5. ',

' → logprob: -17.875001907348633
    6. '(stdin' → logprob: -18.000001907348633
    7. 'stdin' → logprob: -19.750001907348633
    8. ')' → logprob: -19.875001907348633
    9. '(),' → logprob: -19.875001907348633
    10. '，' → logprob: -20.750001907348633

Token 229: ' stdin' (ID: 75143)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.018245702609419823
    2. ' stdin' → logprob: -4.018245697021484
    3. '(stdin' → logprob: -9.268245697021484
    4. '.stdin' → logprob: -13.768245697021484
    5. 'stdout' → logprob: -15.018245697021484
    6. 'st' → logprob: -17.643245697021484
    7. 'stderr' → logprob: -17.768245697021484
    8. 'sys' → logprob: -18.143245697021484
    9. '
' → logprob: -18.643245697021484
    10. 'stdio' → logprob: -19.143245697021484

Token 230: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.10023795068264008
    2. '().' → logprob: -2.3502378463745117
    3. '.' → logprob: -11.100237846374512
    4. '()' → logprob: -11.600237846374512
    5. '.read' → logprob: -13.100237846374512
    6. '.readlines' → logprob: -13.350237846374512
    7. ').' → logprob: -13.850237846374512
    8. ')' → logprob: -13.975237846374512
    9. ' .' → logprob: -14.475237846374512
    10. ' readline' → logprob: -14.475237846374512

Token 231: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -1.747814349073451e-05
    2. '()' → logprob: -11.000017166137695
    3. ' ().' → logprob: -14.875017166137695
    4. '.' → logprob: -15.250017166137695
    5. ')' → logprob: -16.625017166137695
    6. ' .' → logprob: -17.125017166137695
    7. ').' → logprob: -17.500017166137695
    8. '(' → logprob: -18.125017166137695
    9. '()
' → logprob: -19.000017166137695
    10. '())' → logprob: -20.125017166137695

Token 232: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -8.180258191714529e-06
    2. ' split' → logprob: -11.750008583068848
    3. ')' → logprob: -16.00000762939453
    4. '(split' → logprob: -16.50000762939453
    5. '.split' → logprob: -17.25000762939453
    6. 'strip' → logprob: -18.37500762939453
    7. 'spl' → logprob: -18.75000762939453
    8. '```' → logprob: -19.00000762939453
    9. ' ' → logprob: -19.25000762939453
    10. 'rstrip' → logprob: -19.75000762939453

Token 233: '())

' (ID: 27654)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.048952843993902206
    2. '())' → logprob: -3.04895281791687
    3. '()' → logprob: -7.923953056335449
    4. ' )' → logprob: -13.17395305633545
    5. '))' → logprob: -14.54895305633545
    6. ')
' → logprob: -15.42395305633545
    7. ' ())' → logprob: -15.42395305633545
    8. ')`' → logprob: -15.54895305633545
    9. '())
' → logprob: -16.423952102661133
    10. '）' → logprob: -16.548952102661133

Token 234: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0010524577228352427
    2. '\' → logprob: -8.001052856445312
    3. 'd' → logprob: -8.001052856445312
    4. '\n' → logprob: -9.001052856445312
    5. '#' → logprob: -9.626052856445312
    6. '
' → logprob: -9.876052856445312
    7. '"\' → logprob: -10.376052856445312
    8. '```' → logprob: -10.751052856445312
    9. ''\' → logprob: -10.876052856445312
    10. 'n' → logprob: -11.376052856445312

Token 235: ' ls' (ID: 41498)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.03534557297825813
    2. 'i' → logprob: -3.7853455543518066
    3. 'input' → logprob: -5.535345554351807
    4. 'int' → logprob: -5.660345554351807
    5. 'n' → logprob: -6.285345554351807
    6. 'in' → logprob: -6.410345554351807
    7. ' s' → logprob: -8.035346031188965
    8. 'is' → logprob: -8.535346031188965
    9. 'ns' → logprob: -8.535346031188965
    10. '_s' → logprob: -8.785346031188965

Token 236: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.5498537421226501
    2. '()' → logprob: -0.9248537421226501
    3. 'tring' → logprob: -3.674853801727295
    4. '():
' → logprob: -7.549853801727295
    5. 'tr' → logprob: -8.174853324890137
    6. ' ()' → logprob: -10.299853324890137
    7. '()>' → logprob: -10.424853324890137
    8. 'read' → logprob: -10.674853324890137
    9. 'r' → logprob: -10.924853324890137
    10. '():

' → logprob: -10.924853324890137

Token 237: '   ' (ID: 271)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.03812846913933754
    2. '():
' → logprob: -3.28812837600708
    3. '()' → logprob: -9.788128852844238
    4. ' ():' → logprob: -10.913128852844238
    5. '():
' → logprob: -12.163128852844238
    6. 'def' → logprob: -12.288128852844238
    7. '():

' → logprob: -13.663128852844238
    8. '   ' → logprob: -14.038128852844238
    9. ':' → logprob: -14.413128852844238
    10. '):' → logprob: -15.663128852844238

Token 238: ' """
' (ID: 7037)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.6125963926315308
    2. 'return' → logprob: -0.8625963926315308
    3. 'lambda' → logprob: -4.36259651184082
    4. 'stdin' → logprob: -4.36259651184082
    5. '   ' → logprob: -5.73759651184082
    6. '(stdin' → logprob: -6.11259651184082
    7. '"""
' (adapté à ' """
') → logprob: -7.11259651184082
    8. '()' → logprob: -7.11259651184082
    9. '():
' → logprob: -7.48759651184082
    10. '"""' → logprob: -7.48759651184082

Token 239: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4396907687187195
    2. '"""
' → logprob: -1.8146908283233643
    3. ')' → logprob: -2.3146908283233643
    4. 'def' → logprob: -3.4396908283233643
    5. '"""' → logprob: -3.4396908283233643
    6. 'return' → logprob: -4.064690589904785
    7. '):
' → logprob: -5.564690589904785
    8. ')
' → logprob: -6.064690589904785
    9. '")' → logprob: -6.189690589904785
    10. '()' → logprob: -6.814690589904785

Token 240: ' Lis' (ID: 29571)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.3256448209285736
    2. 'return' → logprob: -1.575644850730896
    3. '"""
' → logprob: -2.7006447315216064
    4. '"""' → logprob: -5.9506449699401855
    5. '   ' → logprob: -7.5756449699401855
    6. ' return' → logprob: -7.7006449699401855
    7. '
' → logprob: -9.200644493103027
    8. ' def' → logprob: -10.200644493103027
    9. '```' → logprob: -10.200644493103027
    10. 'Return' → logprob: -10.450644493103027

Token 241: ' une' (ID: 2463)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.14316247403621674
    2. '(stdin' → logprob: -2.893162488937378
    3. 'stdin' → logprob: -3.018162488937378
    4. ')' → logprob: -5.143162250518799
    5. '()
' → logprob: -5.143162250518799
    6. 'line' → logprob: -5.393162250518799
    7. '():' → logprob: -6.143162250518799
    8. '.readline' → logprob: -6.268162250518799
    9. '():
' → logprob: -6.643162250518799
    10. '())' → logprob: -6.643162250518799

Token 242: ' ligne' (ID: 19583)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.0012826144229620695
    2. 'stdin' → logprob: -7.251282691955566
    3. 'ligne' → logprob: -7.626282691955566
    4. 'string' → logprob: -9.626282691955566
    5. '(stdin' → logprob: -12.876282691955566
    6. 'str' → logprob: -12.876282691955566
    7. 'strip' → logprob: -13.126282691955566
    8. 'tring' → logprob: -13.626282691955566
    9. 'ine' → logprob: -13.751282691955566
    10. 'l' → logprob: -13.876282691955566

Token 243: ' depuis' (ID: 16277)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0009071758831851184
    2. '()
' → logprob: -8.125906944274902
    3. '():
' → logprob: -8.500906944274902
    4. 'from' → logprob: -9.500906944274902
    5. '().' → logprob: -9.625906944274902
    6. '()[' → logprob: -9.750906944274902
    7. '():' → logprob: -9.875906944274902
    8. ' =' → logprob: -10.500906944274902
    9. ' ()' → logprob: -10.625906944274902
    10. '=' → logprob: -11.000906944274902

Token 244: ' l' (ID: 305)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -7.73183855926618e-05
    2. ' stdin' → logprob: -9.875077247619629
    3. '(stdin' → logprob: -10.750077247619629
    4. 'stdout' → logprob: -12.750077247619629
    5. 'sys' → logprob: -14.125077247619629
    6. 'str' → logprob: -14.875077247619629
    7. '.stdin' → logprob: -15.375077247619629
    8. 'stdlib' → logprob: -16.750078201293945
    9. 'stdio' → logprob: -18.000078201293945
    10. 'input' → logprob: -18.750078201293945

Token 245: ''entrée' (ID: 115820)
  Prédit: ''entrée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''entrée' → logprob: -0.011783482506871223
    2. 'entrée' → logprob: -4.511783599853516
    3. ''ent' → logprob: -8.886783599853516
    4. ''' → logprob: -9.136783599853516
    5. 'l' → logprob: -9.261783599853516
    6. 'stdin' → logprob: -9.386783599853516
    7. '_' → logprob: -10.011783599853516
    8. '’entrée' → logprob: -10.261783599853516
    9. ''import' → logprob: -10.636783599853516
    10. '__' → logprob: -10.636783599853516

Token 246: ' standard' (ID: 7024)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.26734596490859985
    2. 'standard' → logprob: -1.767345905303955
    3. '()
' → logprob: -2.892345905303955
    4. 'stdin' → logprob: -5.767345905303955
    5. ' standard' → logprob: -6.267345905303955
    6. '(stdin' → logprob: -7.017345905303955
    7. 'def' → logprob: -7.392345905303955
    8. 'std' → logprob: -8.267346382141113
    9. '   ' → logprob: -8.392346382141113
    10. '(
' → logprob: -8.642346382141113

Token 247: ' et' (ID: 859)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9085318446159363
    2. 'def' → logprob: -1.533531904220581
    3. '()' → logprob: -2.158531904220581
    4. ',' → logprob: -2.408531904220581
    5. '():
' → logprob: -2.408531904220581
    6. '():' → logprob: -2.783531904220581
    7. '(),' → logprob: -5.283531665802002
    8. ')' → logprob: -5.283531665802002
    9. '):
' → logprob: -5.533531665802002
    10. '):' → logprob: -5.783531665802002

Token 248: ' la' (ID: 557)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.28038352727890015
    2. ' return' → logprob: -1.780383586883545
    3. '   ' → logprob: -3.030383586883545
    4. 'rstrip' → logprob: -3.780383586883545
    5. 'stdin' → logprob: -5.905383586883545
    6. 'def' → logprob: -7.530383586883545
    7. 'strip' → logprob: -7.655383586883545
    8. ' stdin' → logprob: -8.030383110046387
    9. '(stdin' → logprob: -8.030383110046387
    10. ' retourne' → logprob: -9.530383110046387

Token 249: ' div' (ID: 4223)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.011091449297964573
    2. 'rstrip' → logprob: -4.511091232299805
    3. 'str' → logprob: -10.261091232299805
    4. ' strip' → logprob: -12.761091232299805
    5. 'split' → logprob: -12.886091232299805
    6. 'return' → logprob: -13.511091232299805
    7. '.strip' → logprob: -14.136091232299805
    8. '_strip' → logprob: -14.636091232299805
    9. 'trip' → logprob: -14.886091232299805
    10. 'r' → logprob: -16.136091232299805

Token 250: 'ise' (ID: 1096)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.5832781195640564
    2. 'ute' → logprob: -1.4582781791687012
    3. 'ut' → logprob: -2.458278179168701
    4. 'split' → logprob: -2.583278179168701
    5. 'rstrip' → logprob: -4.833278179168701
    6. 'uite' → logprob: -4.958278179168701
    7. 'ève' → logprob: -5.208278179168701
    8. '()' → logprob: -5.208278179168701
    9. '()
' → logprob: -5.583278179168701
    10. 'ue' → logprob: -6.083278179168701

Token 251: ' en' (ID: 469)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.07172267138957977
    2. '()
' → logprob: -3.3217227458953857
    3. '(' → logprob: -4.571722507476807
    4. '   ' → logprob: -4.821722507476807
    5. '(
' → logprob: -4.946722507476807
    6. '()[' → logprob: -5.571722507476807
    7. ' selon' → logprob: -6.696722507476807
    8. '('' → logprob: -7.571722507476807
    9. '(str' → logprob: -8.321722984313965
    10. 'def' → logprob: -8.321722984313965

Token 252: ' une' (ID: 2463)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.5844526886940002
    2. 'str' → logprob: -1.9594526290893555
    3. 'tokens' → logprob: -1.9594526290893555
    4. 'liste' → logprob: -2.8344526290893555
    5. 'strip' → logprob: -2.9594526290893555
    6. 'spaces' → logprob: -4.5844526290893555
    7. 'rstrip' → logprob: -4.8344526290893555
    8. 'words' → logprob: -4.8344526290893555
    9. '[' → logprob: -5.3344526290893555
    10. 'split' → logprob: -5.9594526290893555

Token 253: ' liste' (ID: 31719)
  Prédit: 'liste'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'liste' → logprob: -0.5296792984008789
    2. 'list' → logprob: -0.9046792984008789
    3. 'str' → logprob: -5.654679298400879
    4. 'ligne' → logprob: -6.904679298400879
    5. 'chaine' → logprob: -7.029679298400879
    6. ' liste' → logprob: -7.779679298400879
    7. 'lst' → logprob: -9.029679298400879
    8. 'string' → logprob: -9.404679298400879
    9. 'l' → logprob: -9.404679298400879
    10. 'chain' → logprob: -9.529679298400879

Token 254: ' de' (ID: 334)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00226170988753438
    2. 'de' → logprob: -7.002261638641357
    3. '(' → logprob: -7.377261638641357
    4. '   ' → logprob: -8.752262115478516
    5. ' ()' → logprob: -8.877262115478516
    6. '()
' → logprob: -9.252262115478516
    7. ' =' → logprob: -9.502262115478516
    8. '().' → logprob: -9.627262115478516
    9. 'of' → logprob: -10.127262115478516
    10. '=' → logprob: -10.627262115478516

Token 255: ' chaînes' (ID: 179904)
  Prédit: 'str'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'str' → logprob: -0.042323410511016846
    2. 'strings' → logprob: -3.417323350906372
    3. 'sys' → logprob: -5.292323589324951
    4. 'stdin' → logprob: -6.292323589324951
    5. 'input' → logprob: -7.292323589324951
    6. '(stdin' → logprob: -7.417323589324951
    7. 'list' → logprob: -8.042323112487793
    8. '[str' → logprob: -9.917323112487793
    9. 'tokens' → logprob: -10.042323112487793
    10. 'words' → logprob: -10.542323112487793

Token 256: ' par' (ID: 686)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.16897200047969818
    2. 'de' → logprob: -2.6689720153808594
    3. '()
' → logprob: -2.6689720153808594
    4. '   ' → logprob: -4.543972015380859
    5. 'def' → logprob: -6.293972015380859
    6. '().' → logprob: -7.293972015380859
    7. ' de' → logprob: -7.293972015380859
    8. 's' → logprob: -7.293972015380859
    9. '(
' → logprob: -8.54397201538086
    10. '[str' → logprob: -8.79397201538086

Token 257: ' espace' (ID: 66004)
  Prédit: 'rstrip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'rstrip' → logprob: -0.6312703490257263
    2. 'split' → logprob: -1.881270408630371
    3. ' espaces' → logprob: -2.881270408630371
    4. 'def' → logprob: -2.881270408630371
    5. 'spaces' → logprob: -3.131270408630371
    6. 'strip' → logprob: -3.381270408630371
    7. 'input' → logprob: -3.631270408630371
    8. '()' → logprob: -3.756270408630371
    9. 'esp' → logprob: -3.881270408630371
    10. 'le' → logprob: -4.631270408630371

Token 258: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.17613816261291504
    2. '()' → logprob: -2.176138162612915
    3. '():' → logprob: -4.051137924194336
    4. ')' → logprob: -4.176137924194336
    5. '):' → logprob: -5.301137924194336
    6. '():
' → logprob: -5.551137924194336
    7. '()
' → logprob: -5.676137924194336
    8. '):
' → logprob: -6.801137924194336
    9. ':' → logprob: -7.676137924194336
    10. 's' → logprob: -8.301137924194336

Token 259: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -9.126521035796031e-05
    2. '```' → logprob: -10.125091552734375
    3. 'def' → logprob: -10.500091552734375
    4. 'return' → logprob: -11.375091552734375
    5. '    
' → logprob: -12.250091552734375
    6. ')' → logprob: -13.250091552734375
    7. '    ' → logprob: -13.625091552734375
    8. ' return' → logprob: -13.625091552734375
    9. '()' → logprob: -14.375091552734375
    10. ' ' → logprob: -14.375091552734375

Token 260: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0013639278477057815
    2. '```' → logprob: -7.126363754272461
    3. 'return' → logprob: -7.626363754272461
    4. 'def' → logprob: -10.126363754272461
    5. ' return' → logprob: -11.001363754272461
    6. ')' → logprob: -12.626363754272461
    7. '    
' → logprob: -13.126363754272461
    8. ' ' → logprob: -13.251363754272461
    9. '``' → logprob: -13.251363754272461
    10. '	return' → logprob: -13.626363754272461

Token 261: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13640868663787842
    2. 'def' → logprob: -2.636408805847168
    3. 'return' → logprob: -2.886408805847168
    4. ' return' → logprob: -9.261408805847168
    5. '```' → logprob: -10.761408805847168
    6. '	return' → logprob: -13.386408805847168
    7. ' ' → logprob: -14.511408805847168
    8. '  ' → logprob: -14.761408805847168
    9. '[]' → logprob: -15.261408805847168
    10. '    ' → logprob: -15.511408805847168

Token 262: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -6.73052782076411e-05
    2. 'def' → logprob: -9.750067710876465
    3. ' return' → logprob: -11.875067710876465
    4. '   ' → logprob: -13.125067710876465
    5. '	return' → logprob: -17.75006675720215
    6. 'stdin' → logprob: -18.37506675720215
    7. '```' → logprob: -19.75006675720215
    8. '    
' → logprob: -19.75006675720215
    9. '
' → logprob: -20.25006675720215
    10. 'Return' → logprob: -21.75006675720215

Token 263: ' stdin' (ID: 75143)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -5.200166469876422e-06
    2. 'list' → logprob: -13.000004768371582
    3. 'stdout' → logprob: -13.000004768371582
    4. '(stdin' → logprob: -14.750004768371582
    5. ' stdin' → logprob: -16.0000057220459
    6. 'sys' → logprob: -17.1250057220459
    7. '.stdin' → logprob: -17.2500057220459
    8. 'stderr' → logprob: -18.5000057220459
    9. 'input' → logprob: -19.0000057220459
    10. 'std' → logprob: -19.0000057220459

Token 264: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -1.3856492842023727e-06
    2. '.' → logprob: -14.000000953674316
    3. '.readlines' → logprob: -15.000000953674316
    4. '.read' → logprob: -15.625000953674316
    5. ' readline' → logprob: -17.625001907348633
    6. '().' → logprob: -17.750001907348633
    7. 'read' → logprob: -18.875001907348633
    8. '.stdin' → logprob: -20.750001907348633
    9. '.rstrip' → logprob: -22.250001907348633
    10. '```' → logprob: -22.375001907348633

Token 265: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0036025596782565117
    2. '()' → logprob: -5.628602504730225
    3. ' ().' → logprob: -13.253602981567383
    4. '()).' → logprob: -16.378602981567383
    5. '()

' → logprob: -16.628602981567383
    6. '().'' → logprob: -16.753602981567383
    7. ' ()' → logprob: -16.878602981567383
    8. '()`' → logprob: -17.003602981567383
    9. '()
' → logprob: -17.128602981567383
    10. '()[' → logprob: -17.253602981567383

Token 266: 'split' (ID: 13627)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.07006825506687164
    2. 'rstrip' → logprob: -2.820068359375
    3. 'split' → logprob: -4.820068359375
    4. ' strip' → logprob: -14.695068359375
    5. 'decode' → logprob: -14.695068359375
    6. 'str' → logprob: -14.820068359375
    7. 'read' → logprob: -15.945068359375
    8. 'rs' → logprob: -16.195068359375
    9. '.rstrip' → logprob: -17.320068359375
    10. 'rst' → logprob: -18.070068359375

Token 267: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00019364648323971778
    2. '())' → logprob: -8.87519359588623
    3. '(' → logprob: -10.12519359588623
    4. '()]' → logprob: -12.50019359588623
    5. ')' → logprob: -12.62519359588623
    6. '()[' → logprob: -14.00019359588623
    7. '().' → logprob: -14.12519359588623
    8. '(),' → logprob: -14.25019359588623
    9. '()`' → logprob: -14.25019359588623
    10. '()
' → logprob: -14.50019359588623

Token 268: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -3.440506407059729e-05
    2. '#' → logprob: -10.75003433227539
    3. '\' → logprob: -12.12503433227539
    4. '<|end|>' → logprob: -12.62503433227539
    5. '```' → logprob: -12.62503433227539
    6. ' def' → logprob: -15.62503433227539
    7. '\n' → logprob: -15.75003433227539
    8. 'import' → logprob: -16.00003433227539
    9. '
' → logprob: -16.12503433227539
    10. 'class' → logprob: -17.25003433227539

Token 269: ' ns' (ID: 18343)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.04750938341021538
    2. 'input' → logprob: -3.7975094318389893
    3. 'read' → logprob: -5.17250919342041
    4. 'i' → logprob: -5.42250919342041
    5. 'r' → logprob: -5.92250919342041
    6. 'int' → logprob: -6.04750919342041
    7. 'rs' → logprob: -6.04750919342041
    8. 'a' → logprob: -6.54750919342041
    9. ' s' → logprob: -6.54750919342041
    10. 'n' → logprob: -7.17250919342041

Token 270: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.2877649664878845
    2. '()' → logprob: -1.4127650260925293
    3. '():
' → logprob: -5.162765026092529
    4. 'tring' → logprob: -7.537765026092529
    5. 'tr' → logprob: -9.037764549255371
    6. 'r' → logprob: -9.787764549255371
    7. '():

' → logprob: -10.162764549255371
    8. 'a' → logprob: -10.662764549255371
    9. '()>' → logprob: -10.912764549255371
    10. '().' → logprob: -11.537764549255371

Token 271: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7319201827049255
    2. '():' → logprob: -1.4819202423095703
    3. '()' → logprob: -1.8569202423095703
    4. 'def' → logprob: -2.2319202423095703
    5. '():
' → logprob: -4.10692024230957
    6. '(stdin' → logprob: -4.73192024230957
    7. 's' → logprob: -7.10692024230957
    8. '):' → logprob: -8.23192024230957
    9. 'stdin' → logprob: -8.48192024230957
    10. ')' → logprob: -8.48192024230957

Token 272: ' """
' (ID: 7037)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.003128640353679657
    2. 'def' → logprob: -6.253128528594971
    3. 'lambda' → logprob: -7.753128528594971
    4. '(stdin' → logprob: -8.378129005432129
    5. '"""' → logprob: -8.628129005432129
    6. 'return' → logprob: -9.253129005432129
    7. 'stdout' → logprob: -9.378129005432129
    8. '"""
' (adapté à ' """
') → logprob: -9.878129005432129
    9. '   ' → logprob: -10.628129005432129
    10. 'n' → logprob: -10.878129005432129

Token 273: '   ' (ID: 271)
  Prédit: '"""
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"""
' → logprob: -0.07551482319831848
    2. 'stdin' → logprob: -3.325514793395996
    3. '"""' → logprob: -4.450514793395996
    4. '   ' → logprob: -4.575514793395996
    5. 'def' → logprob: -4.825514793395996
    6. 'return' → logprob: -5.200514793395996
    7. '"
' → logprob: -7.950514793395996
    8. '""' → logprob: -8.450514793395996
    9. '(stdin' → logprob: -9.200514793395996
    10. '()
' → logprob: -9.450514793395996

Token 274: ' Lis' (ID: 29571)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.012959267944097519
    2. 'def' → logprob: -5.0129594802856445
    3. 'stdin' → logprob: -5.8879594802856445
    4. '"""' → logprob: -6.8879594802856445
    5. '"""
' → logprob: -7.2629594802856445
    6. 'Lire' → logprob: -7.5129594802856445
    7. ' return' → logprob: -8.512959480285645
    8. 'Lis' (adapté à ' Lis') → logprob: -8.637959480285645
    9. 'Return' → logprob: -9.137959480285645
    10. 'Retour' → logprob: -9.387959480285645

Token 275: ' une' (ID: 2463)
  Prédit: '().'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '().' → logprob: -0.591343879699707
    2. '()' → logprob: -0.966343879699707
    3. '():' → logprob: -3.091343879699707
    4. '():
' → logprob: -3.966343879699707
    5. '()
' → logprob: -7.216343879699707
    6. 'n' → logprob: -8.716343879699707
    7. 'stdin' → logprob: -8.841343879699707
    8. 'line' → logprob: -8.966343879699707
    9. ')' → logprob: -9.716343879699707
    10. 'int' → logprob: -10.091343879699707

Token 276: ' ligne' (ID: 19583)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.44295427203178406
    2. 'ligne' → logprob: -2.0679543018341064
    3. 'string' → logprob: -2.1929543018341064
    4. 'str' → logprob: -3.1929543018341064
    5. 'n' → logprob: -4.192954063415527
    6. 'strip' → logprob: -4.317954063415527
    7. '()' → logprob: -4.317954063415527
    8. 'tring' → logprob: -4.817954063415527
    9. 'newline' → logprob: -4.817954063415527
    10. 'raw' → logprob: -5.317954063415527

Token 277: ' depuis' (ID: 16277)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.01888987235724926
    2. '().' → logprob: -4.143889904022217
    3. '():' → logprob: -6.893889904022217
    4. '():
' → logprob: -7.018889904022217
    5. '=' → logprob: -7.643889904022217
    6. '()
' → logprob: -8.893889427185059
    7. ' =' → logprob: -9.268889427185059
    8. ')' → logprob: -9.893889427185059
    9. 'from' → logprob: -10.518889427185059
    10. '()[' → logprob: -10.518889427185059

Token 278: ' l' (ID: 305)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.006891792640089989
    2. '(stdin' → logprob: -5.63189172744751
    3. '()' → logprob: -6.25689172744751
    4. 'sys' → logprob: -7.50689172744751
    5. ' stdin' → logprob: -8.381892204284668
    6. '()
' → logprob: -8.506892204284668
    7. '().' → logprob: -8.631892204284668
    8. '   ' → logprob: -9.631892204284668
    9. 'input' → logprob: -9.881892204284668
    10. 'stdout' → logprob: -10.131892204284668

Token 279: ''entrée' (ID: 115820)
  Prédit: 'entrée'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'entrée' → logprob: -0.7986916303634644
    2. ''entrée' → logprob: -0.9236916303634644
    3. 'stdin' → logprob: -1.9236916303634644
    4. 'input' → logprob: -5.423691749572754
    5. 'a' → logprob: -6.798691749572754
    6. '(stdin' → logprob: -7.423691749572754
    7. ' stdin' → logprob: -8.673691749572754
    8. 'sys' → logprob: -9.048691749572754
    9. ' entrée' → logprob: -9.423691749572754
    10. 'e' → logprob: -9.923691749572754

Token 280: ' standard' (ID: 7024)
  Prédit: 'standard'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'standard' → logprob: -0.003939836751669645
    2. 'stdin' → logprob: -5.628939628601074
    3. 'stand' → logprob: -9.503939628601074
    4. '()
' → logprob: -9.753939628601074
    5. ' standard' → logprob: -9.753939628601074
    6. '(stdin' → logprob: -10.003939628601074
    7. '
' → logprob: -10.128939628601074
    8. '()' → logprob: -11.503939628601074
    9. 'string' → logprob: -11.628939628601074
    10. 'stdlib' → logprob: -11.878939628601074

Token 281: ',' (ID: 11)
  Prédit: '().'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '().' → logprob: -0.06646206229925156
    2. '()' → logprob: -2.9414620399475098
    3. '():
' → logprob: -5.31646203994751
    4. 'def' → logprob: -5.81646203994751
    5. '():' → logprob: -6.19146203994751
    6. '()
' → logprob: -7.69146203994751
    7. '   ' → logprob: -8.191462516784668
    8. ')' → logprob: -8.441462516784668
    9. ').' → logprob: -8.941462516784668
    10. ':' → logprob: -9.441462516784668

Token 282: ' enl' (ID: 116494)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.9605588912963867
    2. '().' → logprob: -1.2105588912963867
    3. 'rstrip' → logprob: -1.2105588912963867
    4. '   ' → logprob: -4.835558891296387
    5. '.strip' → logprob: -5.585558891296387
    6. 'return' → logprob: -5.585558891296387
    7. '.rstrip' → logprob: -5.710558891296387
    8. 'def' → logprob: -7.210558891296387
    9. 'n' → logprob: -7.460558891296387
    10. ').' → logprob: -8.085558891296387

Token 283: 'ève' (ID: 41151)
  Prédit: 'eve'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'eve' → logprob: -0.3293280005455017
    2. 'ève' → logprob: -1.4543280601501465
    3. 'e' → logprob: -3.5793280601501465
    4. 'ev' → logprob: -4.2043280601501465
    5. 'ever' → logprob: -5.7043280601501465
    6. 'erve' → logprob: -8.204327583312988
    7. 'er' → logprob: -9.329327583312988
    8. 'ez' → logprob: -9.454327583312988
    9. 'eva' → logprob: -9.454327583312988
    10. 'ieve' → logprob: -9.954327583312988

Token 284: ' le' (ID: 505)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.02256435714662075
    2. 'le' → logprob: -5.02256441116333
    3. '().' → logprob: -5.27256441116333
    4. '()\' → logprob: -5.64756441116333
    5. 'l' → logprob: -5.77256441116333
    6. '()
' → logprob: -6.89756441116333
    7. '('\' → logprob: -7.14756441116333
    8. ' l' → logprob: -7.27256441116333
    9. ' le' → logprob: -7.64756441116333
    10. ' la' → logprob: -8.147563934326172

Token 285: ' retour' (ID: 30714)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.00421338202431798
    2. ''\' → logprob: -6.004213333129883
    3. 'newline' → logprob: -7.629213333129883
    4. '
' → logprob: -8.379213333129883
    5. '"\' → logprob: -8.504213333129883
    6. ' \' → logprob: -8.629213333129883
    7. 'n' → logprob: -8.879213333129883
    8. '\s' → logprob: -9.254213333129883
    9. '\t' → logprob: -9.379213333129883
    10. '\
' → logprob: -9.379213333129883

Token 286: ' à' (ID: 1221)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -1.4203089475631714
    2. 'ne' → logprob: -1.6703089475631714
    3. 'neur' → logprob: -2.045309066772461
    4. 'ch' → logprob: -2.170309066772461
    5. 'ligne' → logprob: -2.420309066772461
    6. 'a' → logprob: -3.295309066772461
    7. ' à' → logprob: -3.795309066772461
    8. 'car' → logprob: -3.920309066772461
    9. ' ' → logprob: -3.920309066772461
    10. '```' → logprob: -4.045309066772461

Token 287: ' la' (ID: 557)
  Prédit: 'la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'la' → logprob: -0.0001238004770129919
    2. 'l' → logprob: -9.625123977661133
    3. '-la' → logprob: -11.375123977661133
    4. 'a' → logprob: -11.500123977661133
    5. 'ligne' → logprob: -11.500123977661133
    6. '_la' → logprob: -12.625123977661133
    7. 'lav' → logprob: -13.000123977661133
    8. 'line' → logprob: -13.125123977661133
    9. 'lap' → logprob: -13.250123977661133
    10. 'laf' → logprob: -13.375123977661133

Token 288: ' ligne' (ID: 19583)
  Prédit: 'ligne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ligne' → logprob: -0.01311811339110136
    2. 'l' → logprob: -4.888118267059326
    3. 'line' → logprob: -5.888118267059326
    4. 'la' → logprob: -6.388118267059326
    5. 'lig' → logprob: -7.763118267059326
    6. 'lin' → logprob: -8.763117790222168
    7. '\n' → logprob: -8.888117790222168
    8. 'newline' → logprob: -9.513117790222168
    9. 'fin' → logprob: -9.763117790222168
    10. '```' → logprob: -10.013117790222168

Token 289: ' final' (ID: 1721)
  Prédit: '().'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '().' → logprob: -0.02252810448408127
    2. '()' → logprob: -3.8975281715393066
    3. ')' → logprob: -7.272528171539307
    4. ').' → logprob: -7.772528171539307
    5. 'rstrip' → logprob: -7.897528171539307
    6. '()
' → logprob: -8.272527694702148
    7. 'strip' → logprob: -10.022527694702148
    8. 'return' → logprob: -10.647527694702148
    9. '.rstrip' → logprob: -10.647527694702148
    10. '   ' → logprob: -10.647527694702148

Token 290: ',
' (ID: 412)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.7391465902328491
    2. '()
' → logprob: -0.9891465902328491
    3. '().' → logprob: -2.4891467094421387
    4. '(),' → logprob: -3.6141467094421387
    5. ',' → logprob: -3.8641467094421387
    6. ')' → logprob: -5.364146709442139
    7. '   ' → logprob: -5.864146709442139
    8. '=' → logprob: -6.489146709442139
    9. '()\' → logprob: -6.489146709442139
    10. ' =' → logprob: -6.614146709442139

Token 291: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.002429644111543894
    2. ')' → logprob: -6.127429485321045
    3. 'return' → logprob: -9.752429962158203
    4. '()' → logprob: -10.377429962158203
    5. ' and' → logprob: -10.502429962158203
    6. ' ' → logprob: -10.752429962158203
    7. 'and' → logprob: -11.002429962158203
    8. '    ' → logprob: -11.127429962158203
    9. 'def' → logprob: -11.252429962158203
    10. ' return' → logprob: -11.377429962158203

Token 292: ' et' (ID: 859)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.22640691697597504
    2. '   ' → logprob: -2.3514068126678467
    3. ' return' → logprob: -2.4764068126678467
    4. 'et' (adapté à ' et') → logprob: -4.101407051086426
    5. ' et' → logprob: -5.851407051086426
    6. ' and' → logprob: -5.851407051086426
    7. 'and' → logprob: -8.601407051086426
    8. 'def' → logprob: -8.601407051086426
    9. 'rstrip' → logprob: -8.851407051086426
    10. ' retourne' → logprob: -9.101407051086426

Token 293: ' retourne' (ID: 178818)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.009649963118135929
    2. ' return' → logprob: -4.884649753570557
    3. 'ret' → logprob: -6.384649753570557
    4. ' retourne' → logprob: -8.259650230407715
    5. 'ren' → logprob: -10.134650230407715
    6. 'returns' → logprob: -10.759650230407715
    7. '@return' → logprob: -12.384650230407715
    8. 'r' → logprob: -12.384650230407715
    9. ' returns' → logprob: -12.634650230407715
    10. '   ' → logprob: -12.759650230407715

Token 294: ' la' (ID: 557)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.38885247707366943
    2. ' stdin' → logprob: -1.1388524770736694
    3. '(stdin' → logprob: -6.388852596282959
    4. 'stdout' → logprob: -9.1388521194458
    5. '   ' → logprob: -9.2638521194458
    6. 's' → logprob: -10.6388521194458
    7. ' ' → logprob: -10.8888521194458
    8. '.stdin' → logprob: -11.1388521194458
    9. 'st' → logprob: -11.2638521194458
    10. ' stdout' → logprob: -11.6388521194458

Token 295: ' chaîne' (ID: 89288)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.5086885094642639
    2. 'string' → logprob: -1.2586884498596191
    3. 'chaine' → logprob: -2.383688449859619
    4. 'st' → logprob: -4.883688449859619
    5. 'stdout' → logprob: -5.633688449859619
    6. ' stdin' → logprob: -5.758688449859619
    7. 'rstrip' → logprob: -6.133688449859619
    8. 'str' → logprob: -6.758688449859619
    9. 's' → logprob: -6.758688449859619
    10. '(stdin' → logprob: -7.008688449859619

Token 296: ' résult' (ID: 31657)
  Prédit: '().'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '().' → logprob: -0.028263280168175697
    2. '()' → logprob: -4.028263092041016
    3. '.rstrip' → logprob: -5.278263092041016
    4. '.strip' → logprob: -5.903263092041016
    5. 'rstrip' → logprob: -6.403263092041016
    6. 'strip' → logprob: -8.278263092041016
    7. '   ' → logprob: -8.653263092041016
    8. '()
' → logprob: -10.278263092041016
    9. '.' → logprob: -10.528263092041016
    10. '(strip' → logprob: -11.278263092041016

Token 297: 'ante' (ID: 2116)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.7961222529411316
    2. 'ue' → logprob: -1.5461223125457764
    3. 'ur' → logprob: -2.1711223125457764
    4. '"""
' → logprob: -2.9211223125457764
    5. '```' → logprob: -3.6711223125457764
    6. '`' → logprob: -3.9211223125457764
    7. 'ure' → logprob: -3.9211223125457764
    8. 'r' → logprob: -4.046122074127197
    9. '"""' → logprob: -4.421122074127197
    10. '"' → logprob: -4.546122074127197

Token 298: '.
' (ID: 558)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():' → logprob: -0.5314433574676514
    2. '():
' → logprob: -1.2814433574676514
    3. '()' → logprob: -2.0314433574676514
    4. '().' → logprob: -6.4064435958862305
    5. '   ' → logprob: -6.6564435958862305
    6. 'def' → logprob: -8.53144359588623
    7. '()
' → logprob: -9.03144359588623
    8. '():
' → logprob: -10.03144359588623
    9. ':' → logprob: -10.40644359588623
    10. 'return' → logprob: -10.53144359588623

Token 299: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4861697554588318
    2. 'def' → logprob: -0.9861697554588318
    3. '```' → logprob: -5.111169815063477
    4. ')' → logprob: -5.486169815063477
    5. '"""' → logprob: -7.486169815063477
    6. '"""
' → logprob: -7.986169815063477
    7. '()' → logprob: -7.986169815063477
    8. '):' → logprob: -8.736169815063477
    9. '():' → logprob: -8.986169815063477
    10. '):
' → logprob: -9.611169815063477

Token 300: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.39232245087623596
    2. 'def' → logprob: -1.1423224210739136
    3. ')' → logprob: -5.517322540283203
    4. '()' → logprob: -7.517322540283203
    5. '```' → logprob: -7.642322540283203
    6. 'return' → logprob: -8.142322540283203
    7. '
' → logprob: -11.517322540283203
    8. ' def' → logprob: -11.517322540283203
    9. ' ' → logprob: -11.892322540283203
    10. '):
' → logprob: -12.017322540283203

Token 301: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0009502872708253562
    2. 'return' → logprob: -7.000950336456299
    3. ' return' → logprob: -10.25094985961914
    4. 'def' → logprob: -13.25094985961914
    5. '```' → logprob: -13.87594985961914
    6. '	return' → logprob: -14.62594985961914
    7. '   ' → logprob: -15.75094985961914
    8. '    ' → logprob: -16.50094985961914
    9. '       ' → logprob: -16.75094985961914
    10. '  ' → logprob: -18.62594985961914

Token 302: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -1.0206720617134124e-05
    2. '   ' → logprob: -11.75001049041748
    3. ' return' → logprob: -13.00001049041748
    4. 'def' → logprob: -19.375009536743164
    5. '
' → logprob: -19.875009536743164
    6. '```' → logprob: -20.375009536743164
    7. '	return' → logprob: -20.625009536743164
    8. '    
' → logprob: -21.625009536743164
    9. '{return' → logprob: -23.375009536743164
    10. 'eturn' → logprob: -23.375009536743164

Token 303: ' stdin' (ID: 75143)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -1.6240566083070007e-06
    2. ' stdin' → logprob: -14.000001907348633
    3. 'stdout' → logprob: -14.875001907348633
    4. '(stdin' → logprob: -15.000001907348633
    5. '.stdin' → logprob: -17.125001907348633
    6. 'sys' → logprob: -19.125001907348633
    7. 'st' → logprob: -19.375001907348633
    8. 'std' → logprob: -20.375001907348633
    9. 'stderr' → logprob: -20.500001907348633
    10. 'stdio' → logprob: -22.125001907348633

Token 304: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -1.1472419600977446e-06
    2. '.' → logprob: -14.500000953674316
    3. '().' → logprob: -15.125000953674316
    4. '.read' → logprob: -15.625000953674316
    5. '.rstrip' → logprob: -16.750001907348633
    6. ' readline' → logprob: -17.000001907348633
    7. '.readlines' → logprob: -19.125001907348633
    8. ' .' → logprob: -21.125001907348633
    9. 'rstrip' → logprob: -21.375001907348633
    10. 'read' → logprob: -21.500001907348633

Token 305: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0004309076175559312
    2. '()' → logprob: -7.750431060791016
    3. ' ().' → logprob: -16.000431060791016
    4. '(' → logprob: -16.875431060791016
    5. '.rstrip' → logprob: -17.875431060791016
    6. '()
' → logprob: -18.000431060791016
    7. '.strip' → logprob: -18.375431060791016
    8. 'rstrip' → logprob: -18.375431060791016
    9. '()<' → logprob: -18.625431060791016
    10. '().__' → logprob: -18.750431060791016

Token 306: 'rstrip' (ID: 180429)
  Prédit: 'rstrip'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'rstrip' → logprob: -0.31326326727867126
    2. 'strip' → logprob: -1.3132632970809937
    3. 'read' → logprob: -14.438262939453125
    4. 'rst' → logprob: -14.563262939453125
    5. 'rs' → logprob: -15.563262939453125
    6. 'r' → logprob: -16.188262939453125
    7. ' strip' → logprob: -16.313262939453125
    8. '.rstrip' → logprob: -16.438262939453125
    9. '_strip' → logprob: -17.563262939453125
    10. 'decode' → logprob: -17.813262939453125

Token 307: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0010844941716641188
    2. '()\' → logprob: -7.626084327697754
    3. '('\' → logprob: -7.751084327697754
    4. '())' → logprob: -9.251084327697754
    5. '(' → logprob: -10.751084327697754
    6. ')' → logprob: -10.876084327697754
    7. '()
' → logprob: -11.251084327697754
    8. '("\' → logprob: -12.001084327697754
    9. '\n' → logprob: -12.876084327697754
    10. ' ()' → logprob: -13.251084327697754

Token 308: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.08073173463344574
    2. '#' → logprob: -3.0807316303253174
    3. '<|end|>' → logprob: -4.2057318687438965
    4. '\n' → logprob: -4.8307318687438965
    5. '\' → logprob: -5.8307318687438965
    6. '```' → logprob: -6.9557318687438965
    7. '
' → logprob: -7.4557318687438965
    8. '    
' → logprob: -7.4557318687438965
    9. 'n' → logprob: -7.5807318687438965
    10. '' → logprob: -7.7057318687438965

Token 309: ' lc' (ID: 77731)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.8101917505264282
    2. 'i' → logprob: -1.6851917505264282
    3. 'pr' → logprob: -2.3101916313171387
    4. 'print' → logprob: -2.3101916313171387
    5. 'int' → logprob: -2.3101916313171387
    6. 'main' → logprob: -3.4351916313171387
    7. 'n' → logprob: -4.560191631317139
    8. 't' → logprob: -5.435191631317139
    9. 'in' → logprob: -5.810191631317139
    10. 'input' → logprob: -6.060191631317139

Token 310: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.26462462544441223
    2. '():
' → logprob: -1.6396245956420898
    3. 'ount' → logprob: -3.63962459564209
    4. '()' → logprob: -5.38962459564209
    5. 'def' → logprob: -6.63962459564209
    6. 'i' → logprob: -7.01462459564209
    7. 'nt' → logprob: -7.01462459564209
    8. ':' → logprob: -7.26462459564209
    9. 's' → logprob: -7.76462459564209
    10. 'd' → logprob: -8.13962459564209

Token 311: '   ' (ID: 271)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.14934219419956207
    2. '():
' → logprob: -2.7743422985076904
    3. 'def' → logprob: -3.0243422985076904
    4. '()' → logprob: -3.6493422985076904
    5. '   ' → logprob: -6.524342060089111
    6. '):
' → logprob: -10.27434253692627
    7. '[]' → logprob: -10.39934253692627
    8. '()
' → logprob: -10.39934253692627
    9. '):' → logprob: -10.39934253692627
    10. '()[' → logprob: -10.52434253692627

Token 312: ' """
' (ID: 7037)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.8525334596633911
    2. 'def' → logprob: -1.1025334596633911
    3. '"""
' (adapté à ' """
') → logprob: -1.9775334596633911
    4. '()' → logprob: -3.1025333404541016
    5. '():
' → logprob: -3.8525333404541016
    6. '():' → logprob: -4.352533340454102
    7. '"""' → logprob: -4.852533340454102
    8. '   ' → logprob: -5.352533340454102
    9. ' return' → logprob: -6.477533340454102
    10. '):
' → logprob: -6.602533340454102

Token 313: '   ' (ID: 271)
  Prédit: '"""
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"""
' → logprob: -0.016062287613749504
    2. '   ' → logprob: -4.391062259674072
    3. '"""' → logprob: -6.016062259674072
    4. 'def' → logprob: -7.891062259674072
    5. 'return' → logprob: -8.14106273651123
    6. '""' → logprob: -8.76606273651123
    7. ' """
' → logprob: -9.64106273651123
    8. '"""

' → logprob: -9.76606273651123
    9. ''''
' → logprob: -9.89106273651123
    10. '"""
' → logprob: -10.89106273651123

Token 314: ' Lis' (ID: 29571)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.69105064868927
    2. '"""
' → logprob: -0.81605064868927
    3. 'def' → logprob: -2.9410505294799805
    4. '"""' → logprob: -5.6910505294799805
    5. ''''
' → logprob: -8.94105052947998
    6. '"""

' → logprob: -9.44105052947998
    7. '   ' → logprob: -9.81605052947998
    8. ' return' → logprob: -9.94105052947998
    9. 'Lis' (adapté à ' Lis') → logprob: -10.19105052947998
    10. '```' → logprob: -10.19105052947998

Token 315: ' une' (ID: 2463)
  Prédit: 'une'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'une' → logprob: -0.4971432089805603
    2. '()' → logprob: -1.372143268585205
    3. ' une' → logprob: -2.622143268585205
    4. '():' → logprob: -3.622143268585205
    5. '():
' → logprob: -4.372143268585205
    6. 'a' → logprob: -4.622143268585205
    7. 'la' → logprob: -5.122143268585205
    8. 'def' → logprob: -6.247143268585205
    9. 'un' → logprob: -6.872143268585205
    10. 'n' → logprob: -7.122143268585205

Token 316: ' ligne' (ID: 19583)
  Prédit: 'ligne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ligne' → logprob: -0.039903804659843445
    2. 'ine' → logprob: -3.6649038791656494
    3. 'line' → logprob: -5.28990364074707
    4. ' ligne' → logprob: -5.91490364074707
    5. 'liste' → logprob: -6.03990364074707
    6. 'igne' → logprob: -6.41490364074707
    7. 'ist' → logprob: -8.03990364074707
    8. 'chaine' → logprob: -8.28990364074707
    9. 'string' → logprob: -8.41490364074707
    10. 'list' → logprob: -8.41490364074707

Token 317: ' depuis' (ID: 16277)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.013619190081954002
    2. '().' → logprob: -4.763619422912598
    3. '():' → logprob: -7.013619422912598
    4. ' =' → logprob: -7.138619422912598
    5. 'def' → logprob: -7.138619422912598
    6. '()[' → logprob: -7.138619422912598
    7. '   ' → logprob: -7.263619422912598
    8. '()
' → logprob: -8.013619422912598
    9. '(),' → logprob: -8.763619422912598
    10. '():
' → logprob: -9.263619422912598

Token 318: ' l' (ID: 305)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.0034640561789274216
    2. ' stdin' → logprob: -6.628464221954346
    3. '(stdin' → logprob: -7.128464221954346
    4. 'sys' → logprob: -7.128464221954346
    5. 'la' → logprob: -8.003463745117188
    6. 'l' → logprob: -9.753463745117188
    7. 'le' → logprob: -9.878463745117188
    8. 'stdout' → logprob: -10.128463745117188
    9. 'list' → logprob: -11.503463745117188
    10. '```' → logprob: -11.628463745117188

Token 319: ''entrée' (ID: 115820)
  Prédit: ''entrée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''entrée' → logprob: -0.009106946177780628
    2. 'entrée' → logprob: -5.5091071128845215
    3. 'stdin' → logprob: -5.5091071128845215
    4. 'a' → logprob: -8.134106636047363
    5. '(stdin' → logprob: -8.634106636047363
    6. 'e' → logprob: -9.009106636047363
    7. 'input' → logprob: -9.384106636047363
    8. ' stdin' → logprob: -9.759106636047363
    9. 'es' → logprob: -9.884106636047363
    10. ''ent' → logprob: -10.259106636047363

Token 320: ' standard' (ID: 7024)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.02780970372259617
    2. '()
' → logprob: -4.7778096199035645
    3. '().' → logprob: -5.0278096199035645
    4. '   ' → logprob: -5.6528096199035645
    5. '(),' → logprob: -6.1528096199035645
    6. '()[' → logprob: -6.4028096199035645
    7. '():
' → logprob: -6.6528096199035645
    8. 'standard' → logprob: -6.7778096199035645
    9. '():' → logprob: -7.5278096199035645
    10. 'def' → logprob: -7.6528096199035645

Token 321: ' (' (ID: 350)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():' → logprob: -0.29129257798194885
    2. '()' → logprob: -2.166292667388916
    3. '():
' → logprob: -2.166292667388916
    4. '().' → logprob: -4.291292667388916
    5. '   ' → logprob: -5.166292667388916
    6. '()[' → logprob: -6.541292667388916
    7. '(),' → logprob: -7.291292667388916
    8. 'def' → logprob: -7.541292667388916
    9. '()
' → logprob: -7.666292667388916
    10. '):' → logprob: -7.791292667388916

Token 322: 'sans' (ID: 106726)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.01686282269656658
    2. '):
' → logprob: -4.641862869262695
    3. '),' → logprob: -6.141862869262695
    4. ').' → logprob: -6.266862869262695
    5. '):' → logprob: -6.766862869262695
    6. '   ' → logprob: -6.891862869262695
    7. ')
' → logprob: -8.391862869262695
    8. '()' → logprob: -8.516862869262695
    9. '):

' → logprob: -9.266862869262695
    10. 'return' → logprob: -9.766862869262695

Token 323: ' le' (ID: 505)
  Prédit: 'le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'le' → logprob: -1.6724780797958374
    2. 'ret' → logprob: -1.7974780797958374
    3. 'import' → logprob: -2.172478199005127
    4. '\n' → logprob: -2.547478199005127
    5. 'rstrip' → logprob: -2.672478199005127
    6. 'la' → logprob: -2.797478199005127
    7. 'l' → logprob: -3.172478199005127
    8. 'parent' → logprob: -3.422478199005127
    9. '\' → logprob: -3.422478199005127
    10. 'comment' → logprob: -3.797478199005127

Token 324: ' retour' (ID: 30714)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.19718550145626068
    2. ''\' → logprob: -2.197185516357422
    3. 'ret' → logprob: -3.572185516357422
    4. 's' → logprob: -4.572185516357422
    5. 'car' → logprob: -4.572185516357422
    6. '"\' → logprob: -5.072185516357422
    7. '\' → logprob: -5.072185516357422
    8. '
' → logprob: -6.322185516357422
    9. ' \' → logprob: -6.697185516357422
    10. ' retour' → logprob: -7.447185516357422

Token 325: ' à' (ID: 1221)
  Prédit: ' à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.044143516570329666
    2. 'à' → logprob: -3.6691434383392334
    3. ' ' → logprob: -4.1691436767578125
    4. '\' → logprob: -7.7941436767578125
    5. '   ' → logprob: -7.9191436767578125
    6. ''à' → logprob: -8.294143676757812
    7. '='\' → logprob: -8.544143676757812
    8. 'a' → logprob: -8.919143676757812
    9. ''\' → logprob: -9.044143676757812
    10. '\r' → logprob: -9.419143676757812

Token 326: ' la' (ID: 557)
  Prédit: 'la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'la' → logprob: -0.006131656467914581
    2. 'ligne' → logprob: -5.256131649017334
    3. 'l' → logprob: -7.631131649017334
    4. 'line' → logprob: -7.881131649017334
    5. '\' → logprob: -11.256132125854492
    6. ' ' → logprob: -12.756132125854492
    7. '   ' → logprob: -12.881132125854492
    8. '
' → logprob: -13.006132125854492
    9. 'lac' → logprob: -13.381132125854492
    10. 'lag' → logprob: -13.381132125854492

Token 327: ' ligne' (ID: 19583)
  Prédit: 'ligne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ligne' → logprob: -0.055896125733852386
    2. 'line' → logprob: -3.180896043777466
    3. 'newline' → logprob: -4.930896282196045
    4. 'l' → logprob: -5.805896282196045
    5. '\n' → logprob: -6.805896282196045
    6. 'n' → logprob: -8.055895805358887
    7. 'la' → logprob: -8.305895805358887
    8. 'lin' → logprob: -8.805895805358887
    9. '\' → logprob: -9.055895805358887
    10. 'lig' → logprob: -9.305895805358887

Token 328: ')
' (ID: 446)
  Prédit: '),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '),' → logprob: -0.24062088131904602
    2. ')' → logprob: -1.8656208515167236
    3. '),
' → logprob: -3.4906208515167236
    4. 'final' → logprob: -3.8656208515167236
    5. ' final' → logprob: -5.740621089935303
    6. ').' → logprob: -5.990621089935303
    7. ')
' → logprob: -6.990621089935303
    8. '"),' → logprob: -7.990621089935303
    9. '   ' → logprob: -8.615620613098145
    10. '"),
' → logprob: -9.115620613098145

Token 329: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.013362806290388107
    2. '()' → logprob: -5.138362884521484
    3. '().' → logprob: -6.263362884521484
    4. ')' → logprob: -6.763362884521484
    5. '):' → logprob: -6.763362884521484
    6. ',' → logprob: -6.763362884521484
    7. 'def' → logprob: -7.013362884521484
    8. '():' → logprob: -7.263362884521484
    9. '(),' → logprob: -9.013362884521484
    10. '():
' → logprob: -9.138362884521484

Token 330: ' et' (ID: 859)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.024417320266366005
    2. ',' → logprob: -3.8994174003601074
    3. 'return' → logprob: -7.149417400360107
    4. 'def' → logprob: -7.399417400360107
    5. ')' → logprob: -7.649417400360107
    6. '()' → logprob: -7.899417400360107
    7. ' return' → logprob: -8.02441692352295
    8. ' et' → logprob: -8.02441692352295
    9. '"""
' → logprob: -8.64941692352295
    10. '(),' → logprob: -8.89941692352295

Token 331: ' retourne' (ID: 178818)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.06369807571172714
    2. ' return' → logprob: -2.9386980533599854
    3. ' retourne' → logprob: -5.5636982917785645
    4. 'ret' → logprob: -6.3136982917785645
    5. 'list' → logprob: -6.9386982917785645
    6. ' list' → logprob: -7.5636982917785645
    7. '   ' → logprob: -7.8136982917785645
    8. 'returns' → logprob: -8.188697814941406
    9. 'eturn' → logprob: -8.313697814941406
    10. ' returns' → logprob: -8.813697814941406

Token 332: ' la' (ID: 557)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.2877977192401886
    2. 'stdin' → logprob: -1.4127976894378662
    3. ' list' → logprob: -5.287797927856445
    4. ' stdin' → logprob: -6.662797927856445
    5. '(stdin' → logprob: -8.912797927856445
    6. '   ' → logprob: -9.787797927856445
    7. '[' → logprob: -10.412797927856445
    8. '.stdin' → logprob: -11.162797927856445
    9. 'stdout' → logprob: -11.287797927856445
    10. '[list' → logprob: -11.412797927856445

Token 333: ' chaîne' (ID: 89288)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.07402115315198898
    2. 'stdin' → logprob: -2.699021100997925
    3. ' list' → logprob: -5.824021339416504
    4. ' stdin' → logprob: -7.949021339416504
    5. 'liste' → logprob: -8.699021339416504
    6. '(stdin' → logprob: -8.699021339416504
    7. 'line' → logprob: -9.824021339416504
    8. 'stdout' → logprob: -10.074021339416504
    9. 'char' → logprob: -10.074021339416504
    10. 'chaine' → logprob: -10.449021339416504

Token 334: ' sous' (ID: 14487)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.28290948271751404
    2. '().' → logprob: -1.5329095125198364
    3. '.rstrip' → logprob: -3.782909393310547
    4. '()[' → logprob: -5.782909393310547
    5. 'rstrip' → logprob: -6.657909393310547
    6. '[:-' → logprob: -7.532909393310547
    7. '<|end|>' → logprob: -7.657909393310547
    8. '[:]' → logprob: -7.907909393310547
    9. '(stdin' → logprob: -8.157909393310547
    10. '()
' → logprob: -8.282909393310547

Token 335: ' forme' (ID: 27450)
  Prédit: 'forme'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'forme' → logprob: -0.3080729842185974
    2. 'j' → logprob: -2.183073043823242
    3. ' forme' → logprob: -2.433073043823242
    4. 'list' → logprob: -3.808073043823242
    5. 'la' → logprob: -4.558073043823242
    6. '-j' → logprob: -4.558073043823242
    7. 'form' → logprob: -4.933073043823242
    8. 'liste' → logprob: -5.433073043823242
    9. 'chaine' → logprob: -5.808073043823242
    10. 'format' → logprob: -6.308073043823242

Token 336: ' de' (ID: 334)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.3195133209228516
    2. 'de' → logprob: -1.3195133209228516
    3. ' de' → logprob: -1.6945133209228516
    4. 'list' → logprob: -1.9445133209228516
    5. ' list' → logprob: -3.0695133209228516
    6. '[]' → logprob: -3.3195133209228516
    7. '=list' → logprob: -4.069513320922852
    8. ' d' → logprob: -4.569513320922852
    9. 'def' → logprob: -5.069513320922852
    10. 'd' → logprob: -5.319513320922852

Token 337: ' liste' (ID: 31719)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.03834279626607895
    2. 'liste' → logprob: -3.2883427143096924
    3. 'une' → logprob: -8.913342475891113
    4. ' list' → logprob: -9.038342475891113
    5. ' liste' → logprob: -10.413342475891113
    6. 'lista' → logprob: -12.413342475891113
    7. '```' → logprob: -12.538342475891113
    8. 'lis' → logprob: -12.913342475891113
    9. 'la' → logprob: -13.163342475891113
    10. 'un' → logprob: -13.163342475891113

Token 338: ' de' (ID: 334)
  Prédit: '(list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(list' → logprob: -1.057041049003601
    2. '(stdin' → logprob: -1.182041049003601
    3. '()' → logprob: -1.432041049003601
    4. '(' → logprob: -2.9320411682128906
    5. '(ls' → logprob: -4.057041168212891
    6. '(ns' → logprob: -4.432041168212891
    7. '(st' → logprob: -4.932041168212891
    8. '(s' → logprob: -5.682041168212891
    9. 'list' → logprob: -6.057041168212891
    10. '[:]' → logprob: -6.182041168212891

Token 339: ' caractères' (ID: 183106)
  Prédit: 'car'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'car' → logprob: -0.19332747161388397
    2. ' caractères' → logprob: -2.0683274269104004
    3. 'chars' → logprob: -3.0683274269104004
    4. 'str' → logprob: -6.8183274269104
    5. 'characters' → logprob: -7.0683274269104
    6. 'char' → logprob: -7.8183274269104
    7. ' caracteres' → logprob: -8.193327903747559
    8. 'list' → logprob: -9.318327903747559
    9. '```' → logprob: -10.193327903747559
    10. 'c' → logprob: -10.443327903747559

Token 340: '.
' (ID: 558)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.059134479612112045
    2. '   ' → logprob: -3.3091344833374023
    3. '():' → logprob: -4.309134483337402
    4. '()
' → logprob: -5.434134483337402
    5. '():
' → logprob: -5.934134483337402
    6. ')' → logprob: -8.809134483337402
    7. 'def' → logprob: -10.059134483337402
    8. '().' → logprob: -10.184134483337402
    9. '())' → logprob: -10.309134483337402
    10. ' ()' → logprob: -10.309134483337402

Token 341: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0007141007808968425
    2. ')' → logprob: -7.375714302062988
    3. '```' → logprob: -10.125714302062988
    4. '()' → logprob: -11.375714302062988
    5. 'return' → logprob: -11.875714302062988
    6. '):' → logprob: -11.875714302062988
    7. 'def' → logprob: -12.250714302062988
    8. '):
' → logprob: -12.625714302062988
    9. ']' → logprob: -13.125714302062988
    10. '"""
' → logprob: -13.250714302062988

Token 342: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.026186030358076096
    2. ')' → logprob: -4.026185989379883
    3. 'def' → logprob: -5.526185989379883
    4. '"""
' (adapté à ' """
') → logprob: -6.401185989379883
    5. '```' → logprob: -6.401185989379883
    6. '):
' → logprob: -8.526185989379883
    7. '"""' → logprob: -8.776185989379883
    8. ')
' → logprob: -8.776185989379883
    9. '):' → logprob: -9.776185989379883
    10. '()' → logprob: -10.776185989379883

Token 343: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00150390958879143
    2. 'return' → logprob: -6.501503944396973
    3. ' return' → logprob: -14.126503944396973
    4. '	return' → logprob: -14.626503944396973
    5. '```' → logprob: -15.501503944396973
    6. 'def' → logprob: -16.126502990722656
    7. '   ' → logprob: -18.001502990722656
    8. '       ' → logprob: -19.001502990722656
    9. 's' → logprob: -19.751502990722656
    10. '    
' → logprob: -19.751502990722656

Token 344: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.00012773419439326972
    2. '   ' → logprob: -9.000127792358398
    3. ' return' → logprob: -12.375127792358398
    4. '
' → logprob: -17.6251277923584
    5. 'def' → logprob: -17.7501277923584
    6. '	return' → logprob: -18.3751277923584
    7. '```' → logprob: -18.5001277923584
    8. 'line' → logprob: -18.6251277923584
    9. 's' → logprob: -19.5001277923584
    10. '    
' → logprob: -19.6251277923584

Token 345: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -4.320199877838604e-07
    2. ' list' → logprob: -15.5
    3. 'stdin' → logprob: -15.625
    4. 'ls' → logprob: -20.0
    5. '(list' → logprob: -20.0
    6. 'ns' → logprob: -21.625
    7. '[list' → logprob: -21.75
    8. '	list' → logprob: -22.375
    9. 'lst' → logprob: -22.625
    10. 'List' → logprob: -23.375

Token 346: '(ns' (ID: 79469)
  Prédit: '(ns'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ns' → logprob: -0.5761396288871765
    2. '(stdin' → logprob: -0.8261396288871765
    3. '(' → logprob: -8.701139450073242
    4. '(n' → logprob: -11.451139450073242
    5. '(st' → logprob: -11.576139450073242
    6. '(stdout' → logprob: -12.076139450073242
    7. '(stderr' → logprob: -12.826139450073242
    8. 'stdin' → logprob: -13.701139450073242
    9. '(ls' → logprob: -14.201139450073242
    10. 'ns' → logprob: -14.451139450073242

Token 347: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0002537104592192918
    2. '()' → logprob: -9.000253677368164
    3. '()))' → logprob: -9.125253677368164
    4. ' ())' → logprob: -11.375253677368164
    5. ')' → logprob: -11.750253677368164
    6. '())
' → logprob: -13.250253677368164
    7. '();)' → logprob: -16.125253677368164
    8. '))' → logprob: -17.250253677368164
    9. '(' → logprob: -17.375253677368164
    10. '()]' → logprob: -17.375253677368164

Token 348: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.025711994618177414
    2. '<|end|>' → logprob: -3.775712013244629
    3. '#' → logprob: -6.150712013244629
    4. '\' → logprob: -9.400712013244629
    5. '<|end|>' → logprob: -9.525712013244629
    6. '```' → logprob: -10.400712013244629
    7. '
' → logprob: -10.525712013244629
    8. '\n' → logprob: -11.275712013244629
    9. 'newline' → logprob: -11.400712013244629
    10. 'import' → logprob: -11.400712013244629

Token 349: ' ni' (ID: 2565)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 't' → logprob: -1.7420889139175415
    2. 'print' → logprob: -1.8670889139175415
    3. 'stdout' → logprob: -2.242088794708252
    4. 'r' → logprob: -2.492088794708252
    5. '_' → logprob: -2.867088794708252
    6. 's' → logprob: -3.242088794708252
    7. 'ns' → logprob: -3.367088794708252
    8. 'd' → logprob: -3.492088794708252
    9. 'range' → logprob: -3.617088794708252
    10. 'td' → logprob: -3.742088794708252

Token 350: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.49113139510154724
    2. '():
' → logprob: -0.9911314249038696
    3. '()' → logprob: -4.11613130569458
    4. 'n' → logprob: -7.49113130569458
    5. '():

' → logprob: -11.741131782531738
    6. 'nt' → logprob: -11.991131782531738
    7. 'def' → logprob: -12.241131782531738
    8. '():
' → logprob: -12.491131782531738
    9. ' ():' → logprob: -12.616131782531738
    10. 't' → logprob: -12.741131782531738

Token 351: '   ' (ID: 271)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.006327386014163494
    2. '   ' → logprob: -5.381327152252197
    3. '()' → logprob: -7.006327152252197
    4. 'return' → logprob: -7.381327152252197
    5. 'def' → logprob: -9.756327629089355
    6. '(int' → logprob: -9.881327629089355
    7. ')' → logprob: -11.131327629089355
    8. '()
' → logprob: -11.131327629089355
    9. ' int' → logprob: -11.756327629089355
    10. ' return' → logprob: -11.881327629089355

Token 352: ' """
' (ID: 7037)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.577210009098053
    2. 'return' → logprob: -0.827210009098053
    3. 'def' → logprob: -6.702209949493408
    4. ' return' → logprob: -11.202210426330566
    5. '   ' → logprob: -11.327210426330566
    6. '
' → logprob: -12.077210426330566
    7. '()
' → logprob: -12.952210426330566
    8. '"""
' (adapté à ' """
') → logprob: -12.952210426330566
    9. '()' → logprob: -13.327210426330566
    10. '(int' → logprob: -13.452210426330566

Token 353: '   ' (ID: 271)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.331267386674881
    2. 'return' → logprob: -1.7062673568725586
    3. 'def' → logprob: -2.9562673568725586
    4. '   ' → logprob: -4.331267356872559
    5. ')
' → logprob: -4.581267356872559
    6. 'int' → logprob: -4.831267356872559
    7. '):
' → logprob: -4.956267356872559
    8. '()' → logprob: -6.206267356872559
    9. 'nt' → logprob: -6.331267356872559
    10. 'n' → logprob: -6.706267356872559

Token 354: ' Lis' (ID: 29571)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.007226312067359686
    2. 'int' → logprob: -5.007226467132568
    3. 'def' → logprob: -8.00722599029541
    4. '   ' → logprob: -8.88222599029541
    5. ' return' → logprob: -10.25722599029541
    6. '"""' → logprob: -13.25722599029541
    7. '"""
' → logprob: -14.00722599029541
    8. '```' → logprob: -15.13222599029541
    9. 'n' → logprob: -15.38222599029541
    10. 'try' → logprob: -15.50722599029541

Token 355: ' une' (ID: 2463)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.002418702933937311
    2. '():' → logprob: -6.377418518066406
    3. 'int' → logprob: -7.627418518066406
    4. '():
' → logprob: -8.627418518066406
    5. ' ()' → logprob: -11.002418518066406
    6. '()
' → logprob: -11.877418518066406
    7. '()>' → logprob: -12.252418518066406
    8. ')' → logprob: -12.877418518066406
    9. '=int' → logprob: -13.377418518066406
    10. 'def' → logprob: -13.502418518066406

Token 356: ' ligne' (ID: 19583)
  Prédit: 'ligne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ligne' → logprob: -0.04657144844532013
    2. 'int' → logprob: -3.4215714931488037
    3. ' ligne' → logprob: -4.921571254730225
    4. 'line' → logprob: -5.546571254730225
    5. 'l' → logprob: -7.171571254730225
    6. 'n' → logprob: -8.171571731567383
    7. 'ine' → logprob: -8.296571731567383
    8. 'nt' → logprob: -9.046571731567383
    9. 'igne' → logprob: -9.921571731567383
    10. 'ent' → logprob: -10.671571731567383

Token 357: ' depuis' (ID: 16277)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0007099286303855479
    2. '()
' → logprob: -7.8757100105285645
    3. 'def' → logprob: -9.125709533691406
    4. '():' → logprob: -9.375709533691406
    5. '():
' → logprob: -9.625709533691406
    6. '().' → logprob: -11.125709533691406
    7. '()>' → logprob: -11.750709533691406
    8. '   ' → logprob: -11.875709533691406
    9. '()`' → logprob: -11.875709533691406
    10. 'return' → logprob: -12.000709533691406

Token 358: ' l' (ID: 305)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.02089918777346611
    2. 'int' → logprob: -4.145899295806885
    3. '(stdin' → logprob: -6.020899295806885
    4. 'l' → logprob: -6.770899295806885
    5. 'lambda' → logprob: -8.145898818969727
    6. ' stdin' → logprob: -8.145898818969727
    7. 'return' → logprob: -8.145898818969727
    8. 'sys' → logprob: -9.645898818969727
    9. '```' → logprob: -9.770898818969727
    10. 'stdout' → logprob: -9.895898818969727

Token 359: ''entrée' (ID: 115820)
  Prédit: 'put'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'put' → logprob: -0.7208465933799744
    2. 'stdin' → logprob: -1.2208466529846191
    3. 'entrée' → logprob: -2.095846652984619
    4. '(stdin' → logprob: -3.595846652984619
    5. ''entrée' → logprob: -3.720846652984619
    6. '()
' → logprob: -4.470846652984619
    7. 'n' → logprob: -4.720846652984619
    8. '()' → logprob: -5.345846652984619
    9. 'standard' → logprob: -5.720846652984619
    10. 'e' → logprob: -5.720846652984619

Token 360: ' standard' (ID: 7024)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.09547249227762222
    2. '()
' → logprob: -3.220472574234009
    3. 'def' → logprob: -3.595472574234009
    4. '():
' → logprob: -4.47047233581543
    5. '():' → logprob: -4.97047233581543
    6. '   ' → logprob: -6.47047233581543
    7. 'standard' → logprob: -7.09547233581543
    8. 'stdin' → logprob: -7.84547233581543
    9. 'return' → logprob: -7.97047233581543
    10. ' ()' → logprob: -7.97047233581543

Token 361: ',' (ID: 11)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0004966750275343657
    2. '():' → logprob: -7.750496864318848
    3. '()
' → logprob: -10.375496864318848
    4. '().' → logprob: -11.250496864318848
    5. ')' → logprob: -11.750496864318848
    6. '():
' → logprob: -12.250496864318848
    7. ' ()' → logprob: -12.375496864318848
    8. 'def' → logprob: -13.000496864318848
    9. '())' → logprob: -14.875496864318848
    10. '   ' → logprob: -14.875496864318848

Token 362: ' la' (ID: 557)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.006519968155771494
    2. '   ' → logprob: -5.756519794464111
    3. ' return' → logprob: -5.881519794464111
    4. 'int' → logprob: -8.63152027130127
    5. 'et' → logprob: -8.88152027130127
    6. '    
' → logprob: -9.88152027130127
    7. 'def' → logprob: -10.13152027130127
    8. '"""
' → logprob: -10.75652027130127
    9. 'ren' → logprob: -11.13152027130127
    10. '```' → logprob: -11.38152027130127

Token 363: ' convert' (ID: 8452)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.0006314247148111463
    2. 'int' → logprob: -8.000631332397461
    3. 'rstrip' → logprob: -9.000631332397461
    4. 'ret' → logprob: -9.625631332397461
    5. ' return' → logprob: -9.750631332397461
    6. 'def' → logprob: -11.250631332397461
    7. 'r' → logprob: -11.250631332397461
    8. 'strip' → logprob: -12.000631332397461
    9. 'eturn' → logprob: -12.250631332397461
    10. 'n' → logprob: -13.000631332397461

Token 364: 'it' (ID: 278)
  Prédit: 'it'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'it' → logprob: -8.947715832618997e-05
    2. 'int' → logprob: -10.125089645385742
    3. 'is' → logprob: -10.750089645385742
    4. 'i' → logprob: -10.875089645385742
    5. '   ' → logprob: -12.750089645385742
    6. 'return' → logprob: -13.625089645385742
    7. '
' → logprob: -13.750089645385742
    8. '"""
' → logprob: -14.250089645385742
    9. 'ît' → logprob: -14.375089645385742
    10. 'ir' → logprob: -14.750089645385742

Token 365: ' en' (ID: 469)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.12891019880771637
    2. 'en' → logprob: -2.1289103031158447
    3. 'int' → logprob: -6.878910064697266
    4. ' en' → logprob: -7.128910064697266
    5. 'def' → logprob: -9.628910064697266
    6. '()
' → logprob: -10.503910064697266
    7. 'import' → logprob: -11.628910064697266
    8. '```' → logprob: -12.253910064697266
    9. '(int' → logprob: -12.253910064697266
    10. '   ' → logprob: -12.378910064697266

Token 366: ' entier' (ID: 80473)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'int' → logprob: -4.36574100604048e-06
    2. ' int' → logprob: -12.750004768371582
    3. '[int' → logprob: -13.625004768371582
    4. 'integer' → logprob: -16.375003814697266
    5. '(int' → logprob: -17.125003814697266
    6. '=int' → logprob: -18.125003814697266
    7. '
' → logprob: -18.125003814697266
    8. '<int' → logprob: -18.625003814697266
    9. 'n' → logprob: -19.125003814697266
    10. ']int' → logprob: -19.500003814697266

Token 367: ',' (ID: 11)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0013579712249338627
    2. ')' → logprob: -7.2513580322265625
    3. '()
' → logprob: -7.5013580322265625
    4. '   ' → logprob: -10.251358032226562
    5. 'return' → logprob: -10.751358032226562
    6. '().' → logprob: -11.126358032226562
    7. '(),' → logprob: -11.751358032226562
    8. '())' → logprob: -12.001358032226562
    9. '()

' → logprob: -13.001358032226562
    10. ',' → logprob: -13.126358032226562

Token 368: ' puis' (ID: 18766)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.1518612802028656
    2. 'return' → logprob: -2.6518611907958984
    3. '   ' → logprob: -2.7768611907958984
    4. '()' → logprob: -5.276861190795898
    5. 'def' → logprob: -6.526861190795898
    6. ')
' → logprob: -8.026861190795898
    7. ' and' → logprob: -8.276861190795898
    8. ',' → logprob: -9.151861190795898
    9. ' return' → logprob: -9.151861190795898
    10. '"""' → logprob: -9.276861190795898

Token 369: ' la' (ID: 557)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.040059927850961685
    2. 'ret' → logprob: -3.290060043334961
    3. 'def' → logprob: -6.915060043334961
    4. 'ren' → logprob: -8.415060043334961
    5. ' retourne' → logprob: -8.540060043334961
    6. ' return' → logprob: -8.915060043334961
    7. 'rstrip' → logprob: -9.290060043334961
    8. 'r' → logprob: -9.540060043334961
    9. 'returns' → logprob: -9.915060043334961
    10. 'int' → logprob: -10.165060043334961

Token 370: ' retourne' (ID: 178818)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.859915018081665
    2. 'strip' → logprob: -0.984915018081665
    3. 'rstrip' → logprob: -1.609915018081665
    4. ' return' → logprob: -6.359914779663086
    5. 'int' → logprob: -7.109914779663086
    6. 'r' → logprob: -8.359914779663086
    7. '
' → logprob: -8.734914779663086
    8. '.strip' → logprob: -9.234914779663086
    9. ')' → logprob: -9.859914779663086
    10. '.readline' → logprob: -10.234914779663086

Token 371: '.
' (ID: 558)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0007007609237916768
    2. '()
' → logprob: -7.625700950622559
    3. ')' → logprob: -9.250700950622559
    4. '   ' → logprob: -9.375700950622559
    5. '().' → logprob: -10.875700950622559
    6. '.' → logprob: -11.875700950622559
    7. ' ()' → logprob: -13.250700950622559
    8. '():' → logprob: -13.875700950622559
    9. 'def' → logprob: -14.000700950622559
    10. '()`' → logprob: -14.375700950622559

Token 372: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00034535606391727924
    2. '()' → logprob: -8.625345230102539
    3. '```' → logprob: -10.250345230102539
    4. 'return' → logprob: -10.375345230102539
    5. ')' → logprob: -10.500345230102539
    6. ' return' → logprob: -11.125345230102539
    7. '
' → logprob: -11.625345230102539
    8. 'def' → logprob: -11.625345230102539
    9. '	return' → logprob: -11.875345230102539
    10. '    
' → logprob: -12.000345230102539

Token 373: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0006508402875624597
    2. 'return' → logprob: -8.000650405883789
    3. '```' → logprob: -8.500650405883789
    4. ')' → logprob: -10.750650405883789
    5. '
' → logprob: -10.875650405883789
    6. ' return' → logprob: -11.250650405883789
    7. '	return' → logprob: -11.625650405883789
    8. '    
' → logprob: -11.750650405883789
    9. '"""' → logprob: -11.750650405883789
    10. '    ' → logprob: -12.125650405883789

Token 374: '   ' (ID: 271)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.04456361010670662
    2. '   ' → logprob: -3.2945635318756104
    3. 'def' → logprob: -5.0445637702941895
    4. ' return' → logprob: -9.919563293457031
    5. '```' → logprob: -12.294563293457031
    6. '	return' → logprob: -13.169563293457031
    7. 'n' → logprob: -14.919563293457031
    8. '
' → logprob: -16.41956329345703
    9. '  ' → logprob: -16.79456329345703
    10. '    ' → logprob: -16.91956329345703

Token 375: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -2.999452772201039e-05
    2. '   ' → logprob: -10.500029563903809
    3. ' return' → logprob: -13.000029563903809
    4. 'int' → logprob: -16.500030517578125
    5. '
' → logprob: -16.750030517578125
    6. 'def' → logprob: -17.750030517578125
    7. 'try' → logprob: -18.875030517578125
    8. '```' → logprob: -19.125030517578125
    9. '	return' → logprob: -19.250030517578125
    10. '    
' → logprob: -20.375030517578125

Token 376: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -1.5048530030981055e-06
    2. ' int' → logprob: -13.500001907348633
    3. '	int' → logprob: -20.000001907348633
    4. '(int' → logprob: -20.750001907348633
    5. '   ' → logprob: -21.250001907348633
    6. '[int' → logprob: -21.375001907348633
    7. '=int' → logprob: -22.000001907348633
    8. '
' → logprob: -22.375001907348633
    9. 'ints' → logprob: -22.500001907348633
    10. '<int' → logprob: -22.750001907348633

Token 377: '(stdin' (ID: 176594)
  Prédit: '(stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(stdin' → logprob: -0.06288357079029083
    2. '(ns' → logprob: -2.8128836154937744
    3. '(' → logprob: -7.062883377075195
    4. 'stdin' → logprob: -10.562883377075195
    5. '(st' → logprob: -10.687883377075195
    6. '(n' → logprob: -12.562883377075195
    7. '(sys' → logprob: -13.187883377075195
    8. '(stdout' → logprob: -13.437883377075195
    9. 'ns' → logprob: -13.812883377075195
    10. '(ls' → logprob: -14.312883377075195

Token 378: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.011063147336244583
    2. '().' → logprob: -4.511063098907471
    3. '()' → logprob: -11.261063575744629
    4. ' readline' → logprob: -13.886063575744629
    5. ')' → logprob: -14.136063575744629
    6. '.' → logprob: -14.636063575744629
    7. '.read' → logprob: -16.761062622070312
    8. '())' → logprob: -16.761062622070312
    9. '()
' → logprob: -17.011062622070312
    10. ').' → logprob: -17.386062622070312

Token 379: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.323652982711792
    2. '().' → logprob: -1.323652982711792
    3. '()' → logprob: -4.573653221130371
    4. ')' → logprob: -11.823653221130371
    5. '.readline' → logprob: -12.698653221130371
    6. ' ())' → logprob: -12.823653221130371
    7. '();)' → logprob: -13.448653221130371
    8. '(' → logprob: -14.573653221130371
    9. '())
' → logprob: -14.573653221130371
    10. '())

' → logprob: -15.198653221130371

Token 380: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.016497045755386353
    2. '<|end|>' → logprob: -4.6414971351623535
    3. '
' → logprob: -5.7664971351623535
    4. '#' → logprob: -5.8914971351623535
    5. '```' → logprob: -8.766496658325195
    6. 'de' → logprob: -9.016496658325195
    7. 'ndef' → logprob: -9.141496658325195
    8. '<|end|>' → logprob: -9.391496658325195
    9. '

' → logprob: -9.516496658325195
    10. ' def' → logprob: -10.141496658325195

Token 381: ' nf' (ID: 89636)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -1.2828906774520874
    2. 'n' → logprob: -1.5328906774520874
    3. 'mi' → logprob: -2.157890796661377
    4. 'ns' → logprob: -2.657890796661377
    5. 'i' → logprob: -3.032890796661377
    6. 'print' → logprob: -3.157890796661377
    7. 'ni' → logprob: -3.157890796661377
    8. 'ms' → logprob: -3.407890796661377
    9. 'pr' → logprob: -4.157890796661377
    10. 'ny' → logprob: -4.407890796661377

Token 382: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.5433411598205566
    2. '()' → logprob: -0.9183411598205566
    3. '():
' → logprob: -3.9183411598205566
    4. '()>' → logprob: -10.668340682983398
    5. '()">' → logprob: -10.918340682983398
    6. '():
' → logprob: -11.043340682983398
    7. '():

' → logprob: -11.293340682983398
    8. '()
' → logprob: -11.293340682983398
    9. 'loat' → logprob: -11.418340682983398
    10. ' ()' → logprob: -11.668340682983398

Token 383: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5336334705352783
    2. 'return' → logprob: -1.0336334705352783
    3. '()' → logprob: -3.0336334705352783
    4. ')' → logprob: -5.408633232116699
    5. 'def' → logprob: -5.658633232116699
    6. '()
' → logprob: -7.158633232116699
    7. ' return' → logprob: -7.283633232116699
    8. '
' → logprob: -9.6586332321167
    9. '```' → logprob: -9.7836332321167
    10. '	return' → logprob: -11.0336332321167

Token 384: ' """
' (ID: 7037)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.008346719667315483
    2. 'def' → logprob: -5.1333465576171875
    3. '   ' → logprob: -6.6333465576171875
    4. '()' → logprob: -7.1333465576171875
    5. '()
' → logprob: -9.008346557617188
    6. ')' → logprob: -9.258346557617188
    7. ' return' → logprob: -9.883346557617188
    8. 'float' → logprob: -11.383346557617188
    9. '"""
' (adapté à ' """
') → logprob: -11.508346557617188
    10. '```' → logprob: -12.633346557617188

Token 385: '   ' (ID: 271)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.49702978134155273
    2. '   ' → logprob: -0.9970297813415527
    3. 'def' → logprob: -4.247029781341553
    4. 'float' → logprob: -5.247029781341553
    5. '"""
' → logprob: -5.997029781341553
    6. '"""' → logprob: -7.997029781341553
    7. ' return' → logprob: -8.747030258178711
    8. 'eturn' → logprob: -10.247030258178711
    9. ' ' → logprob: -10.372030258178711
    10. '  ' → logprob: -10.747030258178711

Token 386: ' Lis' (ID: 29571)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.0052588991820812225
    2. 'def' → logprob: -5.255259037017822
    3. ' return' → logprob: -11.255258560180664
    4. '"""
' → logprob: -12.005258560180664
    5. '   ' → logprob: -12.505258560180664
    6. '"""' → logprob: -13.505258560180664
    7. 'Return' → logprob: -14.630258560180664
    8. '	return' → logprob: -16.005258560180664
    9. '```' → logprob: -16.505258560180664
    10. '
' → logprob: -16.880258560180664

Token 387: ' une' (ID: 2463)
  Prédit: '(stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(stdin' → logprob: -0.009435292333364487
    2. 'stdin' → logprob: -4.759435176849365
    3. 'float' → logprob: -8.009435653686523
    4. '   ' → logprob: -9.134435653686523
    5. 'def' → logprob: -9.134435653686523
    6. 'a' → logprob: -9.384435653686523
    7. '(float' → logprob: -9.759435653686523
    8. '(' → logprob: -10.259435653686523
    9. 'n' → logprob: -11.009435653686523
    10. ' stdin' → logprob: -11.009435653686523

Token 388: ' ligne' (ID: 19583)
  Prédit: 'ligne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ligne' → logprob: -0.3498785197734833
    2. '(stdin' → logprob: -1.8498785495758057
    3. 'stdin' → logprob: -2.7248785495758057
    4. ' ligne' → logprob: -2.8498785495758057
    5. 'line' → logprob: -4.974878311157227
    6. 'float' → logprob: -5.599878311157227
    7. ' stdin' → logprob: -6.974878311157227
    8. '()' → logprob: -7.099878311157227
    9. 'l' → logprob: -7.349878311157227
    10. '.readline' → logprob: -8.099878311157227

Token 389: ' depuis' (ID: 16277)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.019938157871365547
    2. 'from' → logprob: -4.644937992095947
    3. '(stdin' → logprob: -5.019937992095947
    4. '()
' → logprob: -7.019937992095947
    5. '   ' → logprob: -7.144937992095947
    6. ' depuis' → logprob: -7.644937992095947
    7. '()>' → logprob: -8.269938468933105
    8. '().' → logprob: -8.519938468933105
    9. '()[' → logprob: -8.769938468933105
    10. '():
' → logprob: -9.519938468933105

Token 390: ' l' (ID: 305)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.39125552773475647
    2. '(stdin' → logprob: -1.266255497932434
    3. 'l' → logprob: -3.2662556171417236
    4. ' stdin' → logprob: -5.6412553787231445
    5. 'float' → logprob: -9.266255378723145
    6. 'stdout' → logprob: -9.891255378723145
    7. 'sys' → logprob: -11.391255378723145
    8. 'le' → logprob: -11.391255378723145
    9. ' l' → logprob: -11.516255378723145
    10. '.stdin' → logprob: -12.141255378723145

Token 391: ''entrée' (ID: 115820)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.03236834332346916
    2. '(stdin' → logprob: -3.9073684215545654
    3. 'l' → logprob: -5.282368183135986
    4. ' stdin' → logprob: -6.032368183135986
    5. '=' → logprob: -6.282368183135986
    6. '=sys' → logprob: -6.782368183135986
    7. 'stdout' → logprob: -7.782368183135986
    8. 'standard' → logprob: -8.907368659973145
    9. 'sys' → logprob: -9.157368659973145
    10. ''entrée' → logprob: -9.532368659973145

Token 392: ' standard' (ID: 7024)
  Prédit: 'standard'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'standard' → logprob: -0.007701387628912926
    2. 'stdin' → logprob: -5.257701396942139
    3. '(stdin' → logprob: -6.507701396942139
    4. 'stdout' → logprob: -8.25770092010498
    5. '_standard' → logprob: -8.38270092010498
    6. '   ' → logprob: -9.50770092010498
    7. '()' → logprob: -9.50770092010498
    8. 'stand' → logprob: -9.88270092010498
    9. '```' → logprob: -10.00770092010498
    10. 'def' → logprob: -10.25770092010498

Token 393: ',' (ID: 11)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.13214541971683502
    2. '   ' → logprob: -2.382145404815674
    3. ')' → logprob: -4.257145404815674
    4. '().' → logprob: -4.757145404815674
    5. 'def' → logprob: -6.257145404815674
    6. '()
' → logprob: -6.507145404815674
    7. '())' → logprob: -6.757145404815674
    8. 'return' → logprob: -6.757145404815674
    9. '():
' → logprob: -7.132145404815674
    10. '(),' → logprob: -7.382145404815674

Token 394: ' la' (ID: 557)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.009124781005084515
    2. '   ' → logprob: -5.009124755859375
    3. 'def' → logprob: -6.384124755859375
    4. 'float' → logprob: -7.634124755859375
    5. ' return' → logprob: -8.384124755859375
    6. '```' → logprob: -13.009124755859375
    7. '  ' → logprob: -13.509124755859375
    8. ' ' → logprob: -14.634124755859375
    9. '
' → logprob: -14.759124755859375
    10. '	return' → logprob: -15.009124755859375

Token 395: ' convert' (ID: 8452)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.6783223748207092
    2. 'return' → logprob: -1.5533223152160645
    3. 'float' → logprob: -1.5533223152160645
    4. '   ' → logprob: -3.0533223152160645
    5. '```' → logprob: -4.5533223152160645
    6. 'loat' → logprob: -5.0533223152160645
    7. '"""
' → logprob: -6.6783223152160645
    8. 'eturn' → logprob: -7.0533223152160645
    9. 'rstrip' → logprob: -7.1783223152160645
    10. 'astype' → logprob: -8.053322792053223

Token 396: 'it' (ID: 278)
  Prédit: 'it'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'it' → logprob: -3.4121114822482923e-06
    2. 'i' → logprob: -13.750003814697266
    3. 'int' → logprob: -13.750003814697266
    4. '   ' → logprob: -14.375003814697266
    5. 'ît' → logprob: -15.000003814697266
    6. 't' → logprob: -15.625003814697266
    7. 'irt' → logprob: -16.750003814697266
    8. '(it' → logprob: -17.625003814697266
    9. 'ит' → logprob: -17.750003814697266
    10. 'It' → logprob: -18.000003814697266

Token 397: ' en' (ID: 469)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.30507349967956543
    2. '(float' → logprob: -2.0550734996795654
    3. '(stdin' → logprob: -2.9300734996795654
    4. 'float' → logprob: -3.3050734996795654
    5. '(' → logprob: -4.1800737380981445
    6. 'en' → logprob: -4.5550737380981445
    7. '   ' → logprob: -5.6800737380981445
    8. '=float' → logprob: -6.0550737380981445
    9. 'import' → logprob: -6.3050737380981445
    10. '```' → logprob: -6.5550737380981445

Token 398: ' float' (ID: 4428)
  Prédit: 'float'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'float' → logprob: -4.842555426876061e-06
    2. ' float' → logprob: -12.250004768371582
    3. 'fl' → logprob: -18.2500057220459
    4. 'f' → logprob: -18.8750057220459
    5. 'flo' → logprob: -18.8750057220459
    6. '=float' → logprob: -20.3750057220459
    7. 'flt' → logprob: -21.3750057220459
    8. '   ' → logprob: -21.3750057220459
    9. '(float' → logprob: -21.5000057220459
    10. '	float' → logprob: -21.7500057220459

Token 399: ',' (ID: 11)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.1519414633512497
    2. '():' → logprob: -2.1519415378570557
    3. '():
' → logprob: -4.651941299438477
    4. '())' → logprob: -4.901941299438477
    5. ')' → logprob: -5.651941299438477
    6. '   ' → logprob: -6.276941299438477
    7. '):' → logprob: -6.776941299438477
    8. '()):
' → logprob: -8.026941299438477
    9. '()
' → logprob: -8.276941299438477
    10. 'def' → logprob: -8.276941299438477

Token 400: ' puis' (ID: 18766)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.21173962950706482
    2. ')' → logprob: -1.8367396593093872
    3. 'def' → logprob: -3.5867395401000977
    4. 'return' → logprob: -5.836739540100098
    5. ',' → logprob: -8.336739540100098
    6. '()' → logprob: -8.836739540100098
    7. ' def' → logprob: -9.211739540100098
    8. ' return' → logprob: -9.336739540100098
    9. 'then' → logprob: -9.711739540100098
    10. ' ' → logprob: -10.336739540100098

Token 401: ' la' (ID: 557)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.001003751065582037
    2. '   ' → logprob: -7.001003742218018
    3. 'float' → logprob: -10.376004219055176
    4. 'def' → logprob: -10.501004219055176
    5. 'ret' → logprob: -10.751004219055176
    6. 'returns' → logprob: -12.126004219055176
    7. '```' → logprob: -13.376004219055176
    8. ' return' → logprob: -13.376004219055176
    9. ':return' → logprob: -13.751004219055176
    10. ' retourne' → logprob: -14.001004219055176

Token 402: ' retourne' (ID: 178818)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.000644764571916312
    2. 'ret' → logprob: -7.375644683837891
    3. '   ' → logprob: -11.75064468383789
    4. ' return' → logprob: -12.37564468383789
    5. '```' → logprob: -12.62564468383789
    6. ' retourne' → logprob: -14.37564468383789
    7. 'returns' → logprob: -14.50064468383789
    8. 'def' → logprob: -14.75064468383789
    9. 'float' → logprob: -15.37564468383789
    10. '
' → logprob: -15.75064468383789

Token 403: '.
' (ID: 558)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.2821313142776489
    2. ')' → logprob: -1.782131314277649
    3. '():' → logprob: -3.0321311950683594
    4. '   ' → logprob: -3.9071311950683594
    5. '):' → logprob: -5.282131195068359
    6. '():
' → logprob: -6.032131195068359
    7. '())' → logprob: -7.532131195068359
    8. '()
' → logprob: -7.532131195068359
    9. '):
' → logprob: -8.28213119506836
    10. '.' → logprob: -8.78213119506836

Token 404: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0003256911295466125
    2. 'def' → logprob: -8.625326156616211
    3. 'return' → logprob: -9.125326156616211
    4. ')' → logprob: -10.875326156616211
    5. '"""
' → logprob: -11.625326156616211
    6. ' ' → logprob: -13.250326156616211
    7. '  ' → logprob: -13.375326156616211
    8. '```' → logprob: -13.375326156616211
    9. '"""' → logprob: -13.625326156616211
    10. '	return' → logprob: -13.750326156616211

Token 405: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.014847414568066597
    2. 'return' → logprob: -4.389847278594971
    3. ')' → logprob: -6.389847278594971
    4. 'def' → logprob: -7.514847278594971
    5. ' return' → logprob: -9.514847755432129
    6. '```' → logprob: -11.389847755432129
    7. '	return' → logprob: -11.764847755432129
    8. ' ' → logprob: -12.639847755432129
    9. '  ' → logprob: -12.889847755432129
    10. '"""
' (adapté à ' """
') → logprob: -13.139847755432129

Token 406: '   ' (ID: 271)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.01461225189268589
    2. '   ' → logprob: -4.264612197875977
    3. 'def' → logprob: -7.764612197875977
    4. ' return' → logprob: -10.764612197875977
    5. '```' → logprob: -13.139612197875977
    6. '	return' → logprob: -14.014612197875977
    7. '{return' → logprob: -16.389612197875977
    8. '
' → logprob: -17.014612197875977
    9. '``' → logprob: -17.389612197875977
    10. ':return' → logprob: -18.014612197875977

Token 407: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -4.394135612528771e-05
    2. 'def' → logprob: -10.500043869018555
    3. '   ' → logprob: -11.250043869018555
    4. ' return' → logprob: -12.625043869018555
    5. '```' → logprob: -17.750043869018555
    6. '
' → logprob: -18.250043869018555
    7. '	return' → logprob: -19.875043869018555
    8. 'float' → logprob: -20.125043869018555
    9. 'eturn' → logprob: -20.375043869018555
    10. '{return' → logprob: -21.125043869018555

Token 408: ' float' (ID: 4428)
  Prédit: 'float'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'float' → logprob: -4.842555426876061e-06
    2. ' float' → logprob: -12.250004768371582
    3. 'f' → logprob: -19.7500057220459
    4. '	float' → logprob: -20.6250057220459
    5. '(float' → logprob: -21.0000057220459
    6. 'flo' → logprob: -21.0000057220459
    7. 'fl' → logprob: -21.2500057220459
    8. 'int' → logprob: -22.0000057220459
    9. '
' → logprob: -22.0000057220459
    10. '=float' → logprob: -22.7500057220459

Token 409: '(stdin' (ID: 176594)
  Prédit: '(stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(stdin' → logprob: -7.465036105713807e-06
    2. '(' → logprob: -12.250007629394531
    3. '(st' → logprob: -13.375007629394531
    4. '(sys' → logprob: -14.375007629394531
    5. '(stdout' → logprob: -14.750007629394531
    6. '(stderr' → logprob: -16.75000762939453
    7. 'stdin' → logprob: -17.50000762939453
    8. ' (' → logprob: -18.00000762939453
    9. '(s' → logprob: -18.62500762939453
    10. '.stdin' → logprob: -19.12500762939453

Token 410: '.readline' (ID: 74673)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.4468569755554199
    2. '.readline' → logprob: -1.07185697555542
    3. '().' → logprob: -4.69685697555542
    4. '()' → logprob: -4.82185697555542
    5. ')' → logprob: -8.071857452392578
    6. '.stdin' → logprob: -8.821857452392578
    7. '(stdin' → logprob: -9.321857452392578
    8. '()[' → logprob: -9.571857452392578
    9. '();)' → logprob: -10.446857452392578
    10. '()]' → logprob: -10.446857452392578

Token 411: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -5.049755782238208e-05
    2. ')' → logprob: -10.12505054473877
    3. '()' → logprob: -11.87505054473877
    4. '())
' → logprob: -13.00005054473877
    5. ' ())' → logprob: -13.87505054473877
    6. '().' → logprob: -15.50005054473877
    7. '();)' → logprob: -17.625049591064453
    8. '())

' → logprob: -18.500049591064453
    9. '()))' → logprob: -18.500049591064453
    10. '()]' → logprob: -18.625049591064453

Token 412: 'from' (ID: 2845)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.005524727515876293
    2. '#' → logprob: -5.255524635314941
    3. 'class' → logprob: -8.880524635314941
    4. 'import' → logprob: -9.255524635314941
    5. 'from' → logprob: -10.505524635314941
    6. '```' → logprob: -11.380524635314941
    7. '\' → logprob: -12.630524635314941
    8. '<|end|>' → logprob: -12.880524635314941
    9. '@' → logprob: -13.255524635314941
    10. 'if' → logprob: -13.755524635314941

Token 413: ' collections' (ID: 22690)
  Prédit: ' collections'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' collections' → logprob: -0.20770783722400665
    2. 'collections' → logprob: -1.7077078819274902
    3. ' math' → logprob: -5.20770788192749
    4. ' itertools' → logprob: -7.83270788192749
    5. 'math' → logprob: -7.95770788192749
    6. ' heap' → logprob: -10.832707405090332
    7. '_math' → logprob: -11.582707405090332
    8. ' functools' → logprob: -11.832707405090332
    9. 'heap' → logprob: -12.082707405090332
    10. ' typing' → logprob: -12.582707405090332

Token 414: ' import' (ID: 1588)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'import' → logprob: -6.492120155598968e-05
    2. ' import' → logprob: -9.875064849853516
    3. 'port' → logprob: -11.750064849853516
    4. 'from' → logprob: -12.500064849853516
    5. 'n' → logprob: -14.375064849853516
    6. 't' → logprob: -15.500064849853516
    7. 'ort' → logprob: -16.000064849853516
    8. '#import' → logprob: -16.000064849853516
    9. 'nt' → logprob: -16.500064849853516
    10. 'm' → logprob: -16.500064849853516

Token 415: ' defaultdict' (ID: 107098)
  Prédit: 'deque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'deque' → logprob: -0.023755384609103203
    2. ' deque' → logprob: -3.7737553119659424
    3. ' defaultdict' → logprob: -7.7737555503845215
    4. 'default' → logprob: -9.523755073547363
    5. 'de' → logprob: -11.523755073547363
    6. 'collections' → logprob: -12.023755073547363
    7. 'named' → logprob: -16.52375602722168
    8. 'Deque' → logprob: -17.02375602722168
    9. 'Counter' → logprob: -18.02375602722168
    10. 'counter' → logprob: -18.27375602722168

Token 416: '

' (ID: 279)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'import' → logprob: -1.223774790763855
    2. 'deque' → logprob: -1.723774790763855
    3. ',' → logprob: -2.0987749099731445
    4. '
' → logprob: -2.2237749099731445
    5. 'def' → logprob: -2.4737749099731445
    6. 'from' → logprob: -2.4737749099731445
    7. '<|end|>' → logprob: -2.8487749099731445
    8. 'default' → logprob: -3.9737749099731445
    9. '

' → logprob: -4.0987749099731445
    10. 'd' → logprob: -4.2237749099731445

Token 417: '#' (ID: 2)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.11515185236930847
    2. 'graph' → logprob: -2.865151882171631
    3. 'd' → logprob: -3.615151882171631
    4. 'class' → logprob: -4.490151882171631
    5. 'n' → logprob: -5.615151882171631
    6. 'default' → logprob: -5.865151882171631
    7. 'dp' → logprob: -6.240151882171631
    8. 'from' → logprob: -6.490151882171631
    9. '#' → logprob: -6.740151882171631
    10. 'deque' → logprob: -7.240151882171631

Token 418: ' Lecture' (ID: 106534)
  Prédit: 'deque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'deque' → logprob: -0.1997121423482895
    2. 'default' → logprob: -2.324712038040161
    3. 'def' → logprob: -2.574712038040161
    4. 'Counter' → logprob: -5.69971227645874
    5. 'from' → logprob: -6.19971227645874
    6. 'queue' → logprob: -7.07471227645874
    7. 'import' → logprob: -8.574711799621582
    8. 'dp' → logprob: -8.949711799621582
    9. 'dq' → logprob: -9.324711799621582
    10. 'counter' → logprob: -9.449711799621582

Token 419: ' de' (ID: 334)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.5162752270698547
    2. 'n' → logprob: -1.26627516746521
    3. '(' → logprob: -3.26627516746521
    4. '(n' → logprob: -3.64127516746521
    5. 'def' → logprob: -3.76627516746521
    6. 'data' → logprob: -4.516275405883789
    7. '#' → logprob: -5.516275405883789
    8. 's' → logprob: -6.016275405883789
    9. '(
' → logprob: -6.391275405883789
    10. 'a' → logprob: -6.516275405883789

Token 420: ' la' (ID: 557)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.040241774171590805
    2. 'input' → logprob: -4.165241718292236
    3. 'sys' → logprob: -4.915241718292236
    4. 'default' → logprob: -5.040241718292236
    5. 'collections' → logprob: -5.040241718292236
    6. 'N' → logprob: -6.665241718292236
    7. 'def' → logprob: -7.540241718292236
    8. '...' → logprob: -7.915241718292236
    9. 'deque' → logprob: -7.915241718292236
    10. 'stdin' → logprob: -8.415242195129395

Token 421: ' chaîne' (ID: 89288)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.7147369980812073
    2. 'collections' → logprob: -1.2147369384765625
    3. 'input' → logprob: -1.9647369384765625
    4. 'graph' → logprob: -3.3397369384765625
    5. 'import' → logprob: -4.4647369384765625
    6. 'default' → logprob: -5.3397369384765625
    7. 'data' → logprob: -5.3397369384765625
    8. 'n' → logprob: -5.5897369384765625
    9. 'sys' → logprob: -5.7147369384765625
    10. 'deque' → logprob: -5.9647369384765625

Token 422: ' à' (ID: 1221)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.018169255927205086
    2. 'S' → logprob: -4.018169403076172
    3. '
' → logprob: -12.643169403076172
    4. '```' → logprob: -12.893169403076172
    5. '=' → logprob: -13.143169403076172
    6. 'string' → logprob: -13.268169403076172
    7. ' =' → logprob: -13.393169403076172
    8. 'input' → logprob: -13.518169403076172
    9. 'n' → logprob: -14.143169403076172
    10. 't' → logprob: -14.143169403076172

Token 423: ' traiter' (ID: 105852)
  Prédit: 'an'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'an' → logprob: -0.6413890719413757
    2. 'trait' → logprob: -1.2663891315460205
    3. 'comp' → logprob: -2.3913891315460205
    4. 'tr' → logprob: -2.6413891315460205
    5. 'man' → logprob: -4.766388893127441
    6. 'com' → logprob: -5.016388893127441
    7. 'process' → logprob: -6.141388893127441
    8. ' traiter' → logprob: -6.766388893127441
    9. 'analyse' → logprob: -6.766388893127441
    10. 'chercher' → logprob: -6.891388893127441

Token 424: ' depuis' (ID: 16277)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.04870988801121712
    2. 'S' → logprob: -3.0487098693847656
    3. '```' → logprob: -9.673709869384766
    4. '
' → logprob: -10.548709869384766
    5. 'text' → logprob: -11.298709869384766
    6. 'string' → logprob: -12.298709869384766
    7. 't' → logprob: -12.423709869384766
    8. 'input' → logprob: -12.673709869384766
    9. 'N' → logprob: -13.673709869384766
    10. '

' → logprob: -14.298709869384766

Token 425: ' l' (ID: 305)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.5248956680297852
    2. 'ns' → logprob: -0.8998956680297852
    3. 'input' → logprob: -6.774895668029785
    4. 'sys' → logprob: -7.524895668029785
    5. 's' → logprob: -11.024895668029785
    6. ' stdin' → logprob: -11.649895668029785
    7. '(stdin' → logprob: -11.649895668029785
    8. 'stdout' → logprob: -11.774895668029785
    9. 'st' → logprob: -11.899895668029785
    10. '```' → logprob: -12.024895668029785

Token 426: ''entrée' (ID: 115820)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.09710601717233658
    2. ''entrée' → logprob: -3.2221059799194336
    3. 'entrée' → logprob: -3.3471059799194336
    4. 'input' → logprob: -4.097105979919434
    5. '(stdin' → logprob: -7.972105979919434
    6. '.stdin' → logprob: -9.472105979919434
    7. 'entrada' → logprob: -9.472105979919434
    8. 'sys' → logprob: -9.597105979919434
    9. ' stdin' → logprob: -9.597105979919434
    10. 'a' → logprob: -9.847105979919434

Token 427: ' standard' (ID: 7024)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.0037739549297839403
    2. 'S' → logprob: -5.628774166107178
    3. 'chaine' → logprob: -10.25377368927002
    4. 'string' → logprob: -10.37877368927002
    5. '
' → logprob: -10.62877368927002
    6. 'text' → logprob: -10.75377368927002
    7. '```' → logprob: -10.87877368927002
    8. 't' → logprob: -11.37877368927002
    9. 'input' → logprob: -11.62877368927002
    10. 'code' → logprob: -12.75377368927002

Token 428: '
' (ID: 198)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.01268857903778553
    2. 'S' → logprob: -4.387688636779785
    3. '```' → logprob: -9.762688636779785
    4. '
' → logprob: -10.262688636779785
    5. 'string' → logprob: -10.637688636779785
    6. 'input' → logprob: -11.137688636779785
    7. 'text' → logprob: -11.137688636779785
    8. 't' → logprob: -11.262688636779785
    9. 'chaine' → logprob: -12.012688636779785
    10. 'str' → logprob: -13.387688636779785

Token 429: 's' (ID: 82)
  Prédit: 's'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.07897549122571945
    2. 'S' → logprob: -2.5789754390716553
    3. 't' → logprob: -10.453975677490234
    4. 'text' → logprob: -11.453975677490234
    5. 'T' → logprob: -11.703975677490234
    6. 'string' → logprob: -11.828975677490234
    7. 'a' → logprob: -12.203975677490234
    8. 'n' → logprob: -12.703975677490234
    9. 'A' → logprob: -12.828975677490234
    10. 'c' → logprob: -12.953975677490234

Token 430: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.3134896457195282
    2. ' =' → logprob: -1.3134896755218506
    3. 's' → logprob: -9.06348991394043
    4. '()' → logprob: -9.81348991394043
    5. '=s' → logprob: -10.06348991394043
    6. '   ' → logprob: -11.93848991394043
    7. '(' → logprob: -13.06348991394043
    8. ',' → logprob: -13.43848991394043
    9. ')' → logprob: -13.68848991394043
    10. '=input' → logprob: -14.06348991394043

Token 431: ' ns' (ID: 18343)
  Prédit: 'ns'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ns' → logprob: -0.003196131670847535
    2. ' ns' → logprob: -5.7531962394714355
    3. 'stdin' → logprob: -11.253195762634277
    4. 'input' → logprob: -12.628195762634277
    5. '	ns' → logprob: -14.378195762634277
    6. 's' → logprob: -14.378195762634277
    7. '(ns' → logprob: -15.003195762634277
    8. '_ns' → logprob: -15.253195762634277
    9. 'sys' → logprob: -16.378196716308594
    10. 'NS' → logprob: -16.503196716308594

Token 432: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.03342263773083687
    2. '()
' → logprob: -4.283422470092773
    3. 'n' → logprob: -4.408422470092773
    4. 'count' → logprob: -6.408422470092773
    5. '#' → logprob: -7.158422470092773
    6. 't' → logprob: -7.283422470092773
    7. 'for' → logprob: -7.783422470092773
    8. '(n' → logprob: -8.033422470092773
    9. 'length' → logprob: -8.158422470092773
    10. '(' → logprob: -8.283422470092773

Token 433: '#' (ID: 2)
  Prédit: 'freq'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'freq' → logprob: -0.9728905558586121
    2. 'n' → logprob: -1.8478906154632568
    3. 'count' → logprob: -2.097890615463257
    4. 'counter' → logprob: -2.222890615463257
    5. 'from' → logprob: -2.347890615463257
    6. 'counts' → logprob: -3.097890615463257
    7. 'char' → logprob: -3.722890615463257
    8. 'cnt' → logprob: -3.847890615463257
    9. 'd' → logprob: -4.222890377044678
    10. 'dp' → logprob: -4.722890377044678

Token 434: ' Cré' (ID: 109203)
  Prédit: 'freq'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'freq' → logprob: -1.0084108114242554
    2. 'count' → logprob: -1.7584108114242554
    3. 'd' → logprob: -1.8834108114242554
    4. 'counter' → logprob: -2.508410930633545
    5. 'counts' → logprob: -2.633410930633545
    6. 'from' → logprob: -2.633410930633545
    7. 'n' → logprob: -3.258410930633545
    8. 'cnt' → logprob: -3.758410930633545
    9. 'char' → logprob: -5.133410930633545
    10. 'stack' → logprob: -5.383410930633545

Token 435: 'ation' (ID: 387)
  Prédit: 'ar'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ar' → logprob: -1.3906493186950684
    2. 'nt' → logprob: -1.8906493186950684
    3. 'ounter' → logprob: -2.0156493186950684
    4. 'ount' → logprob: -2.1406493186950684
    5. 'count' → logprob: -2.6406493186950684
    6. 's' → logprob: -2.7656493186950684
    7. 'freq' → logprob: -3.2656493186950684
    8. '#' → logprob: -3.3906493186950684
    9. 'counter' → logprob: -4.140649318695068
    10. 'd' → logprob: -4.265649318695068

Token 436: ' d' (ID: 272)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.3838959336280823
    2. '=' → logprob: -1.5088958740234375
    3. 'default' → logprob: -3.3838958740234375
    4. ' =' → logprob: -3.5088958740234375
    5. 'de' → logprob: -4.1338958740234375
    6. 'from' → logprob: -4.5088958740234375
    7. 's' → logprob: -6.5088958740234375
    8. ' d' → logprob: -6.5088958740234375
    9. ' defaultdict' → logprob: -7.5088958740234375
    10. 'f' → logprob: -8.133895874023438

Token 437: ''un' (ID: 9788)
  Prédit: 'ef'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ef' → logprob: -0.001672802958637476
    2. 'efa' → logprob: -6.876672744750977
    3. 'e' → logprob: -7.751672744750977
    4. 'a' → logprob: -9.376672744750977
    5. 'default' → logprob: -9.751672744750977
    6. 'ault' → logprob: -10.251672744750977
    7. '=' → logprob: -11.251672744750977
    8. 'fault' → logprob: -11.501672744750977
    9. 'efs' → logprob: -13.126672744750977
    10. 'éf' → logprob: -13.251672744750977

Token 438: ' diction' (ID: 155259)
  Prédit: 'default'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'default' → logprob: -0.0009171743295155466
    2. 'd' → logprob: -7.125916957855225
    3. 'dd' → logprob: -10.000917434692383
    4. 'counter' → logprob: -10.250917434692383
    5. 'count' → logprob: -10.625917434692383
    6. 'freq' → logprob: -12.625917434692383
    7. 'cnt' → logprob: -13.250917434692383
    8. 'def' → logprob: -14.000917434692383
    9. 'dp' → logprob: -14.250917434692383
    10. 'counts' → logprob: -15.625917434692383

Token 439: 'naire' (ID: 30464)
  Prédit: 'default'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'default' → logprob: -0.10406950861215591
    2. 'ault' → logprob: -2.979069471359253
    3. ' defaultdict' → logprob: -3.729069471359253
    4. 'ion' → logprob: -5.229069709777832
    5. 'def' → logprob: -5.979069709777832
    6. 'ef' → logprob: -6.104069709777832
    7. 'al' → logprob: -6.354069709777832
    8. 'ort' → logprob: -6.979069709777832
    9. 'falt' → logprob: -7.104069709777832
    10. 't' → logprob: -7.104069709777832

Token 440: ' compt' (ID: 39238)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.5737805962562561
    2. 'char' → logprob: -1.9487805366516113
    3. 'freq' → logprob: -1.9487805366516113
    4. 'count' → logprob: -2.4487805366516113
    5. 'counts' → logprob: -3.3237805366516113
    6. 'counter' → logprob: -4.448780536651611
    7. 'cnt' → logprob: -4.698780536651611
    8. 'default' → logprob: -5.698780536651611
    9. '(char' → logprob: -6.323780536651611
    10. '(freq' → logprob: -7.573780536651611

Token 441: 'ant' (ID: 493)
  Prédit: 'default'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'default' → logprob: -0.02102164924144745
    2. ' defaultdict' → logprob: -4.521021842956543
    3. '=' → logprob: -6.646021842956543
    4. 'eur' → logprob: -7.021021842956543
    5. 'from' → logprob: -7.021021842956543
    6. '(default' → logprob: -7.146021842956543
    7. 'inue' → logprob: -7.521021842956543
    8. 'e' → logprob: -7.521021842956543
    9. 'count' → logprob: -7.521021842956543
    10. 'ef' → logprob: -7.771021842956543

Token 442: ' les' (ID: 1341)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.921704888343811
    2. 's' → logprob: -1.921704888343811
    3. 'default' → logprob: -1.921704888343811
    4. 'count' → logprob: -2.5467047691345215
    5. 'chars' → logprob: -2.9217047691345215
    6. 'car' → logprob: -3.2967047691345215
    7. 'le' → logprob: -3.7967047691345215
    8. 'les' → logprob: -4.0467047691345215
    9. '()' → logprob: -4.2967047691345215
    10. 'd' → logprob: -4.4217047691345215

Token 443: ' occurrences' (ID: 108073)
  Prédit: 'car'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'car' → logprob: -0.025663550943136215
    2. 'default' → logprob: -4.400663375854492
    3. 'fr' → logprob: -5.650663375854492
    4. 'occ' → logprob: -5.900663375854492
    5. ' caractères' → logprob: -6.525663375854492
    6. 'characters' → logprob: -6.650663375854492
    7. 'char' → logprob: -6.900663375854492
    8. 'chars' → logprob: -7.025663375854492
    9. 'd' → logprob: -7.900663375854492
    10. 'occur' → logprob: -7.900663375854492

Token 444: ' de' (ID: 334)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.9871945381164551
    2. 'count' → logprob: -1.862194538116455
    3. 'd' → logprob: -2.112194538116455
    4. 's' → logprob: -2.487194538116455
    5. '=' → logprob: -2.737194538116455
    6. 'of' → logprob: -2.737194538116455
    7. ' =' → logprob: -3.737194538116455
    8. 'occ' → logprob: -3.737194538116455
    9. 'counts' → logprob: -3.862194538116455
    10. '(char' → logprob: -4.487194538116455

Token 445: ' chaque' (ID: 21194)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.7683972120285034
    2. 'car' → logprob: -0.7683972120285034
    3. 'each' → logprob: -3.768397331237793
    4. 'default' → logprob: -3.893397331237793
    5. 'ch' → logprob: -4.768397331237793
    6. 'chars' → logprob: -5.143397331237793
    7. 'char' → logprob: -5.268397331237793
    8. 'characters' → logprob: -5.518397331237793
    9. 'c' → logprob: -6.393397331237793
    10. 'cha' → logprob: -6.518397331237793

Token 446: ' caractère' (ID: 80509)
  Prédit: 'car'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'car' → logprob: -0.0137123242020607
    2. 'char' → logprob: -4.388712406158447
    3. 'c' → logprob: -7.638712406158447
    4. ' caractère' → logprob: -7.888712406158447
    5. 'character' → logprob: -8.763711929321289
    6. 's' → logprob: -9.263711929321289
    7. ' caract' → logprob: -9.888711929321289
    8. '
' → logprob: -11.013711929321289
    9. 'élé' → logprob: -12.638711929321289
    10. '```' → logprob: -12.763711929321289

Token 447: ' de' (ID: 334)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.7011860609054565
    2. 'count' → logprob: -1.2011860609054565
    3. 'counter' → logprob: -3.076186180114746
    4. 'counts' → logprob: -3.076186180114746
    5. 'cnt' → logprob: -3.201186180114746
    6. 'freq' → logprob: -3.451186180114746
    7. 'occ' → logprob: -4.076186180114746
    8. 'd' → logprob: -4.076186180114746
    9. 'chars' → logprob: -5.701186180114746
    10. 'c' → logprob: -7.451186180114746

Token 448: ' la' (ID: 557)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.00020509003661572933
    2. ' s' → logprob: -8.625205039978027
    3. 'la' → logprob: -10.875205039978027
    4. 'default' → logprob: -13.250205039978027
    5. 'collections' → logprob: -13.500205039978027
    6. 'chaine' → logprob: -13.750205039978027
    7. ' la' → logprob: -14.000205039978027
    8. 'string' → logprob: -14.500205039978027
    9. '(s' → logprob: -15.500205039978027
    10. '`s' → logprob: -16.375205993652344

Token 449: ' chaîne' (ID: 89288)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.29302406311035156
    2. 'chaine' → logprob: -1.5430240631103516
    3. ' chaîne' → logprob: -3.7930240631103516
    4. 'string' → logprob: -4.168024063110352
    5. 'cha' → logprob: -6.543024063110352
    6. ' chaine' → logprob: -8.043024063110352
    7. ' s' → logprob: -8.668024063110352
    8. 'texte' → logprob: -9.293024063110352
    9. ' string' → logprob: -9.668024063110352
    10. 'chain' → logprob: -10.293024063110352

Token 450: '
' (ID: 198)
  Prédit: 'count'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'count' → logprob: -0.8459181189537048
    2. 'char' → logprob: -1.0959181785583496
    3. 'counts' → logprob: -2.5959181785583496
    4. 'counter' → logprob: -2.8459181785583496
    5. 'cnt' → logprob: -2.9709181785583496
    6. 'freq' → logprob: -3.4709181785583496
    7. 'd' → logprob: -4.47091817855835
    8. 'occ' → logprob: -4.84591817855835
    9. 'chars' → logprob: -6.34591817855835
    10. 'c' → logprob: -8.095917701721191

Token 451: 'dic' (ID: 62630)
  Prédit: 'count'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'count' → logprob: -0.49437791109085083
    2. 'cnt' → logprob: -1.619377851486206
    3. 'char' → logprob: -2.744377851486206
    4. 'counts' → logprob: -2.744377851486206
    5. 'counter' → logprob: -3.619377851486206
    6. 'd' → logprob: -3.869377851486206
    7. 'freq' → logprob: -4.369378089904785
    8. 'c' → logprob: -6.369378089904785
    9. 'occ' → logprob: -6.994378089904785
    10. 'ct' → logprob: -8.619378089904785

Token 452: ' =' (ID: 314)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' → logprob: -0.030657019466161728
    2. ' =' → logprob: -4.155656814575195
    3. '=' → logprob: -4.280656814575195
    4. 'tion' → logprob: -7.905656814575195
    5. 'tof' → logprob: -9.155656814575195
    6. 'd' → logprob: -10.155656814575195
    7. 's' → logprob: -10.530656814575195
    8. 'ton' → logprob: -10.780656814575195
    9. 'ts' → logprob: -11.405656814575195
    10. 'default' → logprob: -11.530656814575195

Token 453: ' defaultdict' (ID: 107098)
  Prédit: 'default'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'default' → logprob: -4.36574100604048e-06
    2. ' defaultdict' → logprob: -12.375004768371582
    3. '(default' → logprob: -17.375003814697266
    4. '"default' → logprob: -18.250003814697266
    5. '.default' → logprob: -19.375003814697266
    6. ' default' → logprob: -19.875003814697266
    7. ''default' → logprob: -20.250003814697266
    8. 'DEFAULT' → logprob: -20.625003814697266
    9. 'collections' → logprob: -21.125003814697266
    10. '```' → logprob: -22.000003814697266

Token 454: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0012272543972358108
    2. '(lambda' → logprob: -6.751227378845215
    3. 'int' → logprob: -9.876227378845215
    4. '[int' → logprob: -13.001227378845215
    5. '<int' → logprob: -13.251227378845215
    6. '(' → logprob: -13.626227378845215
    7. '(<' → logprob: -16.1262264251709
    8. '(i' → logprob: -16.1262264251709
    9. 'lambda' → logprob: -16.5012264251709
    10. ',int' → logprob: -16.5012264251709

Token 455: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.17104296386241913
    2. ')
' → logprob: -1.9210429191589355
    3. ')

' → logprob: -4.5460429191589355
    4. ')
' → logprob: -9.046043395996094
    5. 's' → logprob: -11.546043395996094
    6. ')

' → logprob: -11.796043395996094
    7. ',' → logprob: -12.171043395996094
    8. '[s' → logprob: -12.796043395996094
    9. ')s' → logprob: -12.921043395996094
    10. ' )' → logprob: -13.671043395996094

Token 456: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.4855663721391466e-05
    2. ' for' → logprob: -11.125015258789062
    3. '```' → logprob: -18.250015258789062
    4. '
' → logprob: -19.000015258789062
    5. '<|end|>' → logprob: -20.000015258789062
    6. 's' → logprob: -20.250015258789062
    7. 'n' → logprob: -20.625015258789062
    8. '[' → logprob: -20.750015258789062
    9. ')' → logprob: -21.125015258789062
    10. '	for' → logprob: -21.250015258789062

Token 457: ' si' (ID: 1784)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.03997436538338661
    2. ' c' → logprob: -3.2899744510650635
    3. 'ch' → logprob: -6.289974212646484
    4. ' ch' → logprob: -10.164974212646484
    5. 'char' → logprob: -10.289974212646484
    6. ' char' → logprob: -12.914974212646484
    7. 'i' → logprob: -14.539974212646484
    8. 'x' → logprob: -15.289974212646484
    9. 'e' → logprob: -15.789974212646484
    10. '	c' → logprob: -15.914974212646484

Token 458: ' in' (ID: 306)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.004866907373070717
    2. ' in' → logprob: -6.004867076873779
    3. 'in' → logprob: -6.129867076873779
    4. 's' → logprob: -8.879866600036621
    5. ' n' → logprob: -11.754866600036621
    6. 'nt' → logprob: -12.129866600036621
    7. 'i' → logprob: -12.129866600036621
    8. 'ni' → logprob: -12.129866600036621
    9. 'nd' → logprob: -12.379866600036621
    10. 'x' → logprob: -12.379866600036621

Token 459: ' s' (ID: 265)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -6.2729995988775045e-06
    2. ' s' → logprob: -12.000006675720215
    3. '(s' → logprob: -18.5000057220459
    4. '_s' → logprob: -19.8750057220459
    5. ' ' → logprob: -21.3750057220459
    6. '	s' → logprob: -21.3750057220459
    7. 'list' → logprob: -21.7500057220459
    8. 'c' → logprob: -22.1250057220459
    9. '`s' → logprob: -22.2500057220459
    10. 'range' → logprob: -23.6250057220459

Token 460: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0006786000449210405
    2. ':
' → logprob: -7.375678539276123
    3. ' :' → logprob: -10.125679016113281
    4. '):' → logprob: -11.500679016113281
    5. ')' → logprob: -14.500679016113281
    6. '):
' → logprob: -15.375679016113281
    7. 's' → logprob: -15.625679016113281
    8. ':
' → logprob: -15.625679016113281
    9. ':s' → logprob: -15.750679016113281
    10. ']:' → logprob: -15.875679016113281

Token 461: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004765341989696026
    2. ' dic' → logprob: -5.879765510559082
    3. 'dic' → logprob: -6.254765510559082
    4. '	d' → logprob: -10.879765510559082
    5. '(dic' → logprob: -11.629765510559082
    6. '   ' → logprob: -12.129765510559082
    7. 'd' → logprob: -13.879765510559082
    8. '       ' → logprob: -14.129765510559082
    9. '_dic' → logprob: -14.504765510559082
    10. '    
' → logprob: -14.754765510559082

Token 462: ' dic' (ID: 22318)
  Prédit: 'dic'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dic' (adapté à ' dic') → logprob: -0.0032397438772022724
    2. '   ' → logprob: -5.878239631652832
    3. ' dic' → logprob: -7.753239631652832
    4. ' ' → logprob: -13.503239631652832
    5. '  ' → logprob: -13.503239631652832
    6. '(dic' → logprob: -13.503239631652832
    7. 'dict' → logprob: -14.628239631652832
    8. '_dic' → logprob: -15.253239631652832
    9. 'dice' → logprob: -15.503239631652832
    10. '	d' → logprob: -16.00324058532715

Token 463: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -3.128163257315464e-07
    2. '[s' → logprob: -15.625
    3. '[
' → logprob: -17.25
    4. '```' → logprob: -17.375
    5. ' [' → logprob: -18.0
    6. '
' → logprob: -18.375
    7. '[d' → logprob: -19.0
    8. '[i' → logprob: -19.125
    9. 'si' → logprob: -19.625
    10. '[...]' → logprob: -19.75

Token 464: 'si' (ID: 4778)
  Prédit: 'si'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'si' → logprob: -1.9361264946837764e-07
    2. 's' → logprob: -16.0
    3. '(si' → logprob: -17.375
    4. ' si' → logprob: -17.625
    5. ']' → logprob: -19.375
    6. ')' → logprob: -20.375
    7. '-si' → logprob: -21.0
    8. 'си' → logprob: -21.375
    9. '.si' → logprob: -21.625
    10. '```' → logprob: -21.875

Token 465: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.008619893342256546
    2. ']+=' → logprob: -4.758619785308838
    3. ' ]' → logprob: -13.258620262145996
    4. '+=' → logprob: -13.258620262145996
    5. '+]' → logprob: -13.883620262145996
    6. '']' → logprob: -14.883620262145996
    7. ']+' → logprob: -15.883620262145996
    8. '[' → logprob: -16.13361930847168
    9. '"]' → logprob: -16.25861930847168
    10. ')' → logprob: -16.38361930847168

Token 466: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.006724602542817593
    2. ' +=' → logprob: -5.006724834442139
    3. ']+=' → logprob: -11.88172435760498
    4. '+' → logprob: -13.13172435760498
    5. '=' → logprob: -15.75672435760498
    6. '+='' → logprob: -16.381725311279297
    7. ')' → logprob: -17.631725311279297
    8. '+="' → logprob: -17.881725311279297
    9. '+=(' → logprob: -18.006725311279297
    10. '   ' → logprob: -18.881725311279297

Token 467: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.9361264946837764e-07
    2. ' ' → logprob: -15.625
    3. '```' → logprob: -22.0
    4. '<|end|>' → logprob: -23.625
    5. '   ' → logprob: -23.75
    6. '۱' → logprob: -24.125
    7. '0' → logprob: -24.25
    8. '１' → logprob: -24.25
    9. '
' → logprob: -24.5
    10. '[' → logprob: -25.875

Token 468: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: 0.0
    2. ' ' → logprob: -18.5
    3. '```' → logprob: -22.625
    4. '۱' → logprob: -23.25
    5. '１' → logprob: -23.5
    6. '१' → logprob: -24.75
    7. '   ' → logprob: -25.25
    8. '১' → logprob: -25.5
    9. '١' → logprob: -25.6875
    10. '0' → logprob: -26.25

Token 469: '

' (ID: 279)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.6274261474609375
    2. '#' → logprob: -2.1274261474609375
    3. 'k' → logprob: -3.1274261474609375
    4. 'n' → logprob: -3.3774261474609375
    5. 'for' → logprob: -3.5024261474609375
    6. 'm' → logprob: -3.5024261474609375
    7. 'ans' → logprob: -3.6274261474609375
    8. 'print' → logprob: -3.7524261474609375
    9. 'answer' → logprob: -4.0024261474609375
    10. 'q' → logprob: -4.3774261474609375

Token 470: '#' (ID: 2)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'max' → logprob: -1.1510286331176758
    2. 'n' → logprob: -2.526028633117676
    3. 'for' → logprob: -2.776028633117676
    4. 't' → logprob: -2.776028633117676
    5. 'k' → logprob: -2.901028633117676
    6. 'ans' → logprob: -3.026028633117676
    7. 'q' → logprob: -3.026028633117676
    8. '#' → logprob: -3.151028633117676
    9. 'if' → logprob: -3.401028633117676
    10. 'count' → logprob: -3.401028633117676

Token 471: ' Vér' (ID: 159169)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.9615197777748108
    2. 'res' → logprob: -2.086519718170166
    3. 'result' → logprob: -2.211519718170166
    4. 'ans' → logprob: -2.336519718170166
    5. 'for' → logprob: -2.711519718170166
    6. 'count' → logprob: -3.336519718170166
    7. '#' → logprob: -3.336519718170166
    8. 'answer' → logprob: -3.461519718170166
    9. 'pairs' → logprob: -3.836519718170166
    10. 'total' → logprob: -4.086519718170166

Token 472: 'ification' (ID: 3166)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.027161041274666786
    2. 'dict' → logprob: -4.652161121368408
    3. 'for' → logprob: -5.152161121368408
    4. 'ification' → logprob: -5.277161121368408
    5. '#' → logprob: -5.402161121368408
    6. 'dic' → logprob: -8.02716064453125
    7. 'd' → logprob: -8.15216064453125
    8. 'fort' → logprob: -8.40216064453125
    9. 'def' → logprob: -9.40216064453125
    10. '```' → logprob: -9.90216064453125

Token 473: ' de' (ID: 334)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.00929581094533205
    2. 'for' → logprob: -4.88429594039917
    3. ' if' → logprob: -7.63429594039917
    4. 'of' → logprob: -8.259295463562012
    5. 'de' → logprob: -8.634295463562012
    6. '#' → logprob: -8.759295463562012
    7. 'possible' → logprob: -8.884295463562012
    8. 'count' → logprob: -9.384295463562012
    9. ':' → logprob: -9.509295463562012
    10. 'v' → logprob: -9.884295463562012

Token 474: ' la' (ID: 557)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.394082635641098
    2. 'all' → logprob: -1.2690826654434204
    3. 'any' → logprob: -3.644082546234131
    4. 'sum' → logprob: -4.894082546234131
    5. ' all' → logprob: -5.144082546234131
    6. ' len' → logprob: -6.144082546234131
    7. 'max' → logprob: -6.394082546234131
    8. ' any' → logprob: -7.269082546234131
    9. '(len' → logprob: -7.769082546234131
    10. '"' → logprob: -10.019083023071289

Token 475: ' condition' (ID: 7060)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.08705593645572662
    2. 'sum' → logprob: -3.4620559215545654
    3. 'all' → logprob: -4.0870561599731445
    4. 'max' → logprob: -4.0870561599731445
    5. 'any' → logprob: -4.7120561599731445
    6. 'poss' → logprob: -5.5870561599731445
    7. 'presence' → logprob: -6.8370561599731445
    8. 'possible' → logprob: -6.8370561599731445
    9. 'long' → logprob: -7.0870561599731445
    10. '2' → logprob: -7.7120561599731445

Token 476: ' :' (ID: 712)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.004209109116345644
    2. 'for' → logprob: -6.004209041595459
    3. ':' → logprob: -6.879209041595459
    4. ' if' → logprob: -7.379209041595459
    5. 's' → logprob: -10.879209518432617
    6. '#' → logprob: -11.129209518432617
    7. 'possible' → logprob: -11.879209518432617
    8. 'd' → logprob: -12.129209518432617
    9. 'si' → logprob: -12.129209518432617
    10. ' for' → logprob: -12.254209518432617

Token 477: ' chaque' (ID: 21194)
  Prédit: 'all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'all' → logprob: -0.2700901925563812
    2. 'if' → logprob: -1.6450902223587036
    3. 'for' → logprob: -4.770090103149414
    4. 'any' → logprob: -5.020090103149414
    5. ' all' → logprob: -5.395090103149414
    6. 'ok' → logprob: -5.645090103149414
    7. 'odd' → logprob: -5.645090103149414
    8. 'len' → logprob: -5.895090103149414
    9. 'sum' → logprob: -6.020090103149414
    10. 'ans' → logprob: -6.020090103149414

Token 478: ' caractère' (ID: 80509)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.07428358495235443
    2. ' valeur' → logprob: -3.8242835998535156
    3. 'car' → logprob: -3.9492835998535156
    4. 'value' → logprob: -4.449283599853516
    5. 'clé' → logprob: -4.824283599853516
    6. 'occ' → logprob: -5.949283599853516
    7. 'count' → logprob: -5.949283599853516
    8. ' val' → logprob: -6.699283599853516
    9. 'nombre' → logprob: -6.699283599853516
    10. 'fr' → logprob: -7.449283599853516

Token 479: ' doit' (ID: 21822)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.18893684446811676
    2. 'do' → logprob: -2.063936948776245
    3. 'appe' → logprob: -4.938936710357666
    4. 'appar' → logprob: -4.938936710357666
    5. ' a' → logprob: -5.063936710357666
    6. 'dic' → logprob: -5.563936710357666
    7. 'dans' → logprob: -5.938936710357666
    8. 'appear' → logprob: -6.438936710357666
    9. 'du' → logprob: -6.563936710357666
    10. ' apparaît' → logprob: -6.563936710357666

Token 480: ' appara' (ID: 52982)
  Prédit: 'avoir'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'avoir' → logprob: -0.012163586914539337
    2. ' avoir' → logprob: -5.0121636390686035
    3. 'être' → logprob: -5.6371636390686035
    4. 'appar' → logprob: -7.3871636390686035
    5. ''avoir' → logprob: -8.512163162231445
    6. ' appara' → logprob: -8.887163162231445
    7. 'a' → logprob: -9.512163162231445
    8. 's' → logprob: -9.512163162231445
    9. 'comp' → logprob: -9.512163162231445
    10. 'have' → logprob: -9.512163162231445

Token 481: 'ître' (ID: 29135)
  Prédit: 're'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 're' → logprob: -1.0185866355895996
    2. 't' → logprob: -1.7685866355895996
    3. 'tre' → logprob: -1.8935866355895996
    4. 'ir' → logprob: -2.0185866355895996
    5. 'ître' → logprob: -2.2685866355895996
    6. 'î' → logprob: -3.0185866355895996
    7. 'r' → logprob: -4.2685866355896
    8. 'ît' → logprob: -4.8935866355896
    9. 'it' → logprob: -6.7685866355896
    10. 'ire' → logprob: -6.7685866355896

Token 482: ' exactement' (ID: 108701)
  Prédit: 'au'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'au' → logprob: -0.47569966316223145
    2. 'exact' → logprob: -1.6006996631622314
    3. 'de' → logprob: -2.8506996631622314
    4. 'une' → logprob: -3.2256996631622314
    5. '2' → logprob: -3.3506996631622314
    6. 'dans' → logprob: -3.8506996631622314
    7. 'un' → logprob: -4.350699424743652
    8. 'en' → logprob: -5.725699424743652
    9. ' au' → logprob: -6.475699424743652
    10. '```' → logprob: -6.850699424743652

Token 483: ' deux' (ID: 10301)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '2' → logprob: -0.004950054455548525
    2. 'de' → logprob: -5.754950046539307
    3. 'tw' → logprob: -7.254950046539307
    4. '1' → logprob: -8.379950523376465
    5. 'once' → logprob: -8.629950523376465
    6. '4' → logprob: -9.129950523376465
    7. 's' → logprob: -9.254950523376465
    8. '3' → logprob: -9.379950523376465
    9. ' twice' → logprob: -9.629950523376465
    10. 'len' → logprob: -9.629950523376465

Token 484: ' fois' (ID: 14697)
  Prédit: 'fois'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'fois' → logprob: -0.011180330067873001
    2. ' fois' → logprob: -4.511180400848389
    3. 'fo' → logprob: -9.88617992401123
    4. ' ' → logprob: -10.51117992401123
    5. ' ' → logprob: -10.63617992401123
    6. 'times' → logprob: -11.51117992401123
    7. '<|end|>' → logprob: -11.63617992401123
    8. '```' → logprob: -12.13617992401123
    9. '.' → logprob: -14.01117992401123
    10. '
' → logprob: -14.26117992401123

Token 485: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.16126202046871185
    2. 'if' → logprob: -1.911262035369873
    3. 'valid' → logprob: -8.286261558532715
    4. 'ok' → logprob: -8.286261558532715
    5. 'ans' → logprob: -8.661261558532715
    6. 'res' → logprob: -9.161261558532715
    7. ' for' → logprob: -9.411261558532715
    8. 'flag' → logprob: -9.661261558532715
    9. 'answer' → logprob: -10.536261558532715
    10. 'print' → logprob: -10.911261558532715

Token 486: 'ok' (ID: 525)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.7690646648406982
    2. 'if' → logprob: -1.0190646648406982
    3. 'print' → logprob: -2.3940646648406982
    4. 'ans' → logprob: -3.2690646648406982
    5. 'ok' → logprob: -3.2690646648406982
    6. 'res' → logprob: -6.144064903259277
    7. 'flag' → logprob: -6.144064903259277
    8. 'answer' → logprob: -6.269064903259277
    9. 'result' → logprob: -6.894064903259277
    10. 'valid' → logprob: -7.144064903259277

Token 487: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.3132636249065399
    2. ' =' → logprob: -1.3132636547088623
    3. '=True' → logprob: -13.438263893127441
    4. ' ' → logprob: -15.813263893127441
    5. '=False' → logprob: -16.563262939453125
    6. '＝' → logprob: -17.063262939453125
    7. ':' → logprob: -17.313262939453125
    8. ' =
' → logprob: -17.438262939453125
    9. ')' → logprob: -18.188262939453125
    10. '=
' → logprob: -18.813262939453125

Token 488: ' True' (ID: 6432)
  Prédit: 'all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'all' → logprob: -0.0031791406217962503
    2. 'True' → logprob: -5.75317907333374
    3. ' all' → logprob: -14.128179550170898
    4. '(all' → logprob: -15.378179550170898
    5. ' True' → logprob: -15.628179550170898
    6. 'len' → logprob: -15.753179550170898
    7. '(True' → logprob: -16.2531795501709
    8. 'true' → logprob: -17.1281795501709
    9. 'All' → logprob: -17.5031795501709
    10. '1' → logprob: -18.0031795501709

Token 489: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.010466042906045914
    2. '
' → logprob: -5.2604660987854
    3. ' for' → logprob: -5.2604660987854
    4. '<|end|>' → logprob: -11.135465621948242
    5. 'if' → logprob: -12.260465621948242
    6. ' 
' → logprob: -13.010465621948242
    7. '  
' → logprob: -13.510465621948242
    8. '#' → logprob: -14.760465621948242
    9. '' → logprob: -14.885465621948242
    10. ')' → logprob: -15.260465621948242

Token 490: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -5.512236498361744e-07
    2. ' for' → logprob: -14.625000953674316
    3. 'if' → logprob: -17.375
    4. '
' → logprob: -20.5
    5. '<|end|>' → logprob: -21.125
    6. '```' → logprob: -21.375
    7. '	for' → logprob: -22.125
    8. 'fo' → logprob: -22.125
    9. 'For' → logprob: -23.375
    10. '   ' → logprob: -23.375

Token 491: ' _,' (ID: 18042)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.0946098193526268
    2. 'k' → logprob: -3.0946097373962402
    3. 'value' → logprob: -4.46960973739624
    4. 'key' → logprob: -4.46960973739624
    5. 'c' → logprob: -4.96960973739624
    6. 'count' → logprob: -5.09460973739624
    7. 'val' → logprob: -5.09460973739624
    8. ' v' → logprob: -7.09460973739624
    9. 'si' → logprob: -7.09460973739624
    10. 'char' → logprob: -7.34460973739624

Token 492: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.009772500954568386
    2. 'count' → logprob: -5.009772300720215
    3. 'val' → logprob: -6.884772300720215
    4. 'c' → logprob: -6.884772300720215
    5. 'cnt' → logprob: -7.009772300720215
    6. 'value' → logprob: -9.634772300720215
    7. ' v' → logprob: -10.259772300720215
    8. ' count' → logprob: -13.884772300720215
    9. ' cnt' → logprob: -14.759772300720215
    10. 'ct' → logprob: -15.134772300720215

Token 493: ' in' (ID: 306)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.4287082552909851
    2. ' in' → logprob: -1.0537083148956299
    3. ' ' → logprob: -12.67870807647705
    4. '	in' → logprob: -13.80370807647705
    5. '   ' → logprob: -14.80370807647705
    6. 'i' → logprob: -15.42870807647705
    7. 'inth' → logprob: -15.42870807647705
    8. 's' → logprob: -15.67870807647705
    9. 'inal' → logprob: -15.80370807647705
    10. 'import' → logprob: -15.80370807647705

Token 494: ' dic' (ID: 22318)
  Prédit: 'dic'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dic' → logprob: -2.1888679839321412e-05
    2. ' dic' → logprob: -10.750021934509277
    3. '(dic' → logprob: -15.250021934509277
    4. 'dict' → logprob: -16.12502098083496
    5. '_dic' → logprob: -19.87502098083496
    6. 'd' → logprob: -20.12502098083496
    7. 'list' → logprob: -21.00002098083496
    8. 'ic' → logprob: -21.12502098083496
    9. '```' → logprob: -21.12502098083496
    10. '
' → logprob: -21.37502098083496

Token 495: '.items' (ID: 19607)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.9012056589126587
    2. ':' → logprob: -1.1512056589126587
    3. 'in' → logprob: -1.5262056589126587
    4. ')' → logprob: -3.651205539703369
    5. ':
' → logprob: -4.776205539703369
    6. 'if' → logprob: -4.776205539703369
    7. '=' → logprob: -5.401205539703369
    8. ' ==' → logprob: -5.776205539703369
    9. '==' → logprob: -6.026205539703369
    10. '<|end|>' → logprob: -6.776205539703369

Token 496: '():
' (ID: 8595)
  Prédit: '():
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():
' → logprob: -0.47617876529693604
    2. '():' → logprob: -0.976178765296936
    3. '()' → logprob: -6.2261786460876465
    4. '():
' → logprob: -9.851179122924805
    5. ':' → logprob: -10.601179122924805
    6. '(' → logprob: -10.601179122924805
    7. '()>' → logprob: -11.851179122924805
    8. '()):
' → logprob: -12.351179122924805
    9. ':
' → logprob: -12.976179122924805
    10. '():

' → logprob: -13.226179122924805

Token 497: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03767051547765732
    2. ' if' → logprob: -3.412670612335205
    3. 'if' → logprob: -5.787670612335205
    4. '	if' → logprob: -7.662670612335205
    5. '       ' → logprob: -8.037670135498047
    6. ' ok' → logprob: -9.662670135498047
    7. '<|end|>' → logprob: -10.662670135498047
    8. '    
' → logprob: -11.162670135498047
    9. '```' → logprob: -11.412670135498047
    10. '	ok' → logprob: -11.537670135498047

Token 498: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.006220635958015919
    2. '   ' → logprob: -5.256220817565918
    3. ' if' → logprob: -7.006220817565918
    4. 'ok' → logprob: -9.506220817565918
    5. ' ok' → logprob: -12.631220817565918
    6. '	if' → logprob: -13.631220817565918
    7. '       ' → logprob: -13.881220817565918
    8. ' ' → logprob: -15.131220817565918
    9. '    ' → logprob: -16.1312198638916
    10. '  ' → logprob: -16.7562198638916

Token 499: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.005234121344983578
    2. ' v' → logprob: -5.255234241485596
    3. '	v' → logprob: -14.880233764648438
    4. '   ' → logprob: -18.005233764648438
    5. '_v' → logprob: -19.880233764648438
    6. '$v' → logprob: -21.880233764648438
    7. ')v' → logprob: -21.880233764648438
    8. 'vj' → logprob: -22.005233764648438
    9. '    ' → logprob: -22.255233764648438
    10. '.v' → logprob: -23.880233764648438

Token 500: ' !=' (ID: 1666)
  Prédit: '!='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '!=' → logprob: -0.07890201359987259
    2. ' !=' → logprob: -2.578902006149292
    3. '()!=' → logprob: -12.078902244567871
    4. ')!=' → logprob: -13.078902244567871
    5. '!==' → logprob: -13.453902244567871
    6. '   ' → logprob: -13.828902244567871
    7. ']!=' → logprob: -14.703902244567871
    8. ')' → logprob: -15.203902244567871
    9. '```' → logprob: -15.203902244567871
    10. '<' → logprob: -15.328902244567871

Token 501: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.001170225441455841
    2. ' ' → logprob: -6.7511701583862305
    3. '２' → logprob: -17.751171112060547
    4. '۲' → logprob: -18.376171112060547
    5. '```' → logprob: -18.751171112060547
    6. '   ' → logprob: -18.751171112060547
    7. '  ' → logprob: -18.876171112060547
    8. ' ' → logprob: -19.876171112060547
    9. '
' → logprob: -20.751171112060547
    10. '    ' → logprob: -21.063671112060547

Token 502: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -1.318681188422488e-05
    2. ' ' → logprob: -11.25001335144043
    3. '２' → logprob: -17.25001335144043
    4. '۲' → logprob: -17.37501335144043
    5. '```' → logprob: -19.50001335144043
    6. '২' → logprob: -20.06251335144043
    7. '२' → logprob: -20.06251335144043
    8. '   ' → logprob: -20.50001335144043
    9. '  ' → logprob: -20.62501335144043
    10. '٢' → logprob: -20.93751335144043

Token 503: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.2520327568054199
    2. ':
' → logprob: -1.50203275680542
    3. '   ' → logprob: -9.877033233642578
    4. '       ' → logprob: -10.502033233642578
    5. ':
' → logprob: -11.252033233642578
    6. ':return' → logprob: -12.002033233642578
    7. '):
' → logprob: -13.627033233642578
    8. ' :' → logprob: -14.002033233642578
    9. '):' → logprob: -14.252033233642578
    10. ':

' → logprob: -14.377033233642578

Token 504: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.6668795943260193
    2. 'ok' → logprob: -1.291879653930664
    3. '   ' → logprob: -1.791879653930664
    4. ' ok' → logprob: -3.541879653930664
    5. '	ok' → logprob: -4.166879653930664
    6. '```' → logprob: -7.791879653930664
    7. '
' → logprob: -9.541879653930664
    8. '(ok' → logprob: -9.916879653930664
    9. '_ok' → logprob: -10.166879653930664
    10. ':
' → logprob: -10.166879653930664

Token 505: ' ok' (ID: 4763)
  Prédit: 'ok'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ok' (adapté à ' ok') → logprob: -1.3425219549390022e-05
    2. ' ok' → logprob: -11.50001335144043
    3. '   ' → logprob: -12.75001335144043
    4. '	ok' → logprob: -15.00001335144043
    5. '
' → logprob: -19.25001335144043
    6. 'okay' → logprob: -20.37501335144043
    7. '    
' → logprob: -20.62501335144043
    8. '  ' → logprob: -22.37501335144043
    9. '_ok' → logprob: -22.37501335144043
    10. '(ok' → logprob: -22.62501335144043

Token 506: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.16023103892803192
    2. ' =' → logprob: -1.9102309942245483
    3. '=False' → logprob: -11.91023063659668
    4. '   ' → logprob: -17.16023063659668
    5. '=
' → logprob: -17.16023063659668
    6. ' ' → logprob: -17.41023063659668
    7. '＝' → logprob: -17.41023063659668
    8. '=True' → logprob: -17.53523063659668
    9. '.=' → logprob: -18.16023063659668
    10. '=

' → logprob: -18.91023063659668

Token 507: ' False' (ID: 7983)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'False' → logprob: -5.512236498361744e-07
    2. ' False' → logprob: -14.500000953674316
    3. '=False' → logprob: -21.0
    4. '(False' → logprob: -22.25
    5. 'F' → logprob: -23.5
    6. 'false' → logprob: -23.875
    7. '   ' → logprob: -24.125
    8. 'True' → logprob: -24.5
    9. '_false' → logprob: -24.5
    10. 'Fa' → logprob: -25.0

Token 508: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -5.741137283621356e-05
    2. '<|end|>' → logprob: -11.000057220458984
    3. '	' → logprob: -11.625057220458984
    4. '
' → logprob: -11.750057220458984
    5. '      ' → logprob: -11.875057220458984
    6. '           ' → logprob: -12.375057220458984
    7. '   ' → logprob: -12.625057220458984
    8. 'break' → logprob: -13.625057220458984
    9. ',' → logprob: -13.750057220458984
    10. '        ' → logprob: -13.875057220458984

Token 509: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0015554478159174323
    2. '<|end|>' → logprob: -6.751555442810059
    3. 'if' → logprob: -9.751555442810059
    4. 'print' → logprob: -9.751555442810059
    5. 'break' → logprob: -9.751555442810059
    6. '   ' → logprob: -9.876555442810059
    7. '.' → logprob: -10.376555442810059
    8. '           ' → logprob: -10.626555442810059
    9. '      ' → logprob: -10.876555442810059
    10. '        ' → logprob: -10.876555442810059

Token 510: ' break' (ID: 2338)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'break' (adapté à ' break') → logprob: -0.16029195487499237
    2. '       ' → logprob: -1.9102919101715088
    3. ' break' → logprob: -9.78529167175293
    4. '	break' → logprob: -11.78529167175293
    5. '   ' → logprob: -13.16029167175293
    6. '```' → logprob: -13.66029167175293
    7. '           ' → logprob: -15.03529167175293
    8. '	' → logprob: -15.66029167175293
    9. '_break' → logprob: -16.16029167175293
    10. '               ' → logprob: -16.66029167175293

Token 511: '

' (ID: 279)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.16060318052768707
    2. 'if' → logprob: -1.9106031656265259
    3. '
' → logprob: -7.910603046417236
    4. '#' → logprob: -12.660603523254395
    5. ' if' → logprob: -13.410603523254395
    6. '```' → logprob: -13.535603523254395
    7. ' print' → logprob: -13.785603523254395
    8. '#print' → logprob: -14.035603523254395
    9. ')' → logprob: -14.160603523254395
    10. '  
' → logprob: -14.285603523254395

Token 512: '#' (ID: 2)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.029755352064967155
    2. 'if' → logprob: -3.5297553539276123
    3. ' print' → logprob: -13.654755592346191
    4. '```' → logprob: -13.904755592346191
    5. ' if' → logprob: -14.404755592346191
    6. 'import' → logprob: -14.654755592346191
    7. ')' → logprob: -14.904755592346191
    8. '#' → logprob: -14.904755592346191
    9. '<|end|>' → logprob: -15.279755592346191
    10. '.' → logprob: -15.279755592346191

Token 513: ' Aff' (ID: 13741)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.03804321587085724
    2. 'if' → logprob: -3.288043260574341
    3. 'pr' → logprob: -13.788043022155762
    4. 'ans' → logprob: -15.163043022155762
    5. 'for' → logprob: -16.288043975830078
    6. '```' → logprob: -16.663043975830078
    7. 'result' → logprob: -17.038043975830078
    8. '#' → logprob: -17.163043975830078
    9. ' print' → logprob: -17.413043975830078
    10. 'import' → logprob: -17.788043975830078

Token 514: 'ichage' (ID: 118475)
  Prédit: 'irm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'irm' → logprob: -0.7330641150474548
    2. 'ich' → logprob: -0.9830641150474548
    3. 'ichage' → logprob: -2.3580641746520996
    4. 'icher' → logprob: -3.7330641746520996
    5. 'iche' → logprob: -3.9830641746520996
    6. 'ic' → logprob: -6.1080641746521
    7. 'print' → logprob: -6.1080641746521
    8. 'er' → logprob: -6.9830641746521
    9. '   ' → logprob: -7.2330641746521
    10. '#' → logprob: -7.3580641746521

Token 515: ' du' (ID: 1462)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0004666577442549169
    2. 'if' → logprob: -7.750466823577881
    3. '("' → logprob: -10.750466346740723
    4. '(print' → logprob: -12.000466346740723
    5. '(
' → logprob: -12.750466346740723
    6. '(' → logprob: -13.125466346740723
    7. '('' → logprob: -13.375466346740723
    8. 'pr' → logprob: -13.500466346740723
    9. ' print' → logprob: -15.500466346740723
    10. '
' → logprob: -16.00046730041504

Token 516: ' résultat' (ID: 62556)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.14527662098407745
    2. '"' → logprob: -2.0202765464782715
    3. ''' → logprob: -6.1452765464782715
    4. 'YES' → logprob: -9.39527702331543
    5. 'if' → logprob: -9.64527702331543
    6. 'Yes' → logprob: -9.77027702331543
    7. 'pr' → logprob: -10.64527702331543
    8. '("' → logprob: -10.64527702331543
    9. 'result' → logprob: -10.77027702331543
    10. '"O' → logprob: -10.77027702331543

Token 517: ' en' (ID: 469)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -7.941850526549388e-06
    2. 'if' → logprob: -11.750007629394531
    3. '```' → logprob: -17.12500762939453
    4. ' print' → logprob: -18.62500762939453
    5. '
' → logprob: -19.00000762939453
    6. 'pr' → logprob: -19.50000762939453
    7. 'prin' → logprob: -21.87500762939453
    8. '#print' → logprob: -22.37500762939453
    9. '(print' → logprob: -22.62500762939453
    10. 'for' → logprob: -22.62500762939453

Token 518: ' fonction' (ID: 17610)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00045319506898522377
    2. '"' → logprob: -8.125452995300293
    3. 'pr' → logprob: -9.000452995300293
    4. ''' → logprob: -12.125452995300293
    5. 'put' → logprob: -12.500452995300293
    6. 'prin' → logprob: -12.500452995300293
    7. ' print' → logprob: -12.625452995300293
    8. '   ' → logprob: -12.750452995300293
    9. 'puts' → logprob: -12.750452995300293
    10. 'python' → logprob: -13.375452995300293

Token 519: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.001452140393666923
    2. 'de' → logprob: -6.7514519691467285
    3. '#' → logprob: -8.501452445983887
    4. 'print' → logprob: -10.251452445983887
    5. ' du' → logprob: -12.126452445983887
    6. 'ok' → logprob: -12.376452445983887
    7. 'd' → logprob: -12.626452445983887
    8. ' des' → logprob: -12.751452445983887
    9. ' print' → logprob: -12.751452445983887
    10. ')' → logprob: -12.876452445983887

Token 520: ' la' (ID: 557)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.016243860125541687
    2. 'ok' → logprob: -4.641243934631348
    3. ''ok' → logprob: -5.266243934631348
    4. ''' → logprob: -7.016243934631348
    5. ' "' → logprob: -8.391243934631348
    6. '"La' → logprob: -10.141243934631348
    7. '"D' → logprob: -10.516243934631348
    8. '("' → logprob: -10.641243934631348
    9. '"O' → logprob: -10.766243934631348
    10. '   ' → logprob: -11.266243934631348

Token 521: ' vér' (ID: 42524)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.1641148328781128
    2. 'ok' → logprob: -2.1641149520874023
    3. 'print' → logprob: -4.289114952087402
    4. 'result' → logprob: -4.414114952087402
    5. ''' → logprob: -6.164114952087402
    6. ''ok' → logprob: -6.289114952087402
    7. 'bool' → logprob: -6.414114952087402
    8. '1' → logprob: -6.789114952087402
    9. 'condition' → logprob: -7.414114952087402
    10. 'int' → logprob: -7.414114952087402

Token 522: 'ification' (ID: 3166)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.4095684885978699
    2. 'al' → logprob: -2.6595685482025146
    3. 'rit' → logprob: -3.0345685482025146
    4. 'ification' → logprob: -3.1595685482025146
    5. 'alité' → logprob: -3.4095685482025146
    6. 'rité' → logprob: -3.5345685482025146
    7. 'ication' → logprob: -3.7845685482025146
    8. 'ic' → logprob: -3.9095685482025146
    9. 'rite' → logprob: -4.5345683097839355
    10. 'ifie' → logprob: -4.5345683097839355

Token 523: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -9.627176768844947e-05
    2. 'if' → logprob: -9.250096321105957
    3. '```' → logprob: -15.750096321105957
    4. ' print' → logprob: -18.75009536743164
    5. 'pr' → logprob: -19.12509536743164
    6. '
' → logprob: -19.37509536743164
    7. 'prin' → logprob: -20.87509536743164
    8. '``' → logprob: -21.25009536743164
    9. 'for' → logprob: -21.50009536743164
    10. 'printf' → logprob: -21.87509536743164

Token 524: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -7.493430894101039e-05
    2. 'if' → logprob: -9.500075340270996
    3. 'pr' → logprob: -17.87507438659668
    4. '```' → logprob: -18.75007438659668
    5. ' print' → logprob: -19.75007438659668
    6. '
' → logprob: -19.75007438659668
    7. 'prin' → logprob: -20.87507438659668
    8. 'printf' → logprob: -22.50007438659668
    9. 'prit' → logprob: -22.62507438659668
    10. 'Print' → logprob: -22.62507438659668

Token 525: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.0003766919835470617
    2. '(' → logprob: -8.12537670135498
    3. '('' → logprob: -9.62537670135498
    4. '(ok' → logprob: -11.62537670135498
    5. '"' → logprob: -13.25037670135498
    6. '(
' → logprob: -13.37537670135498
    7. '(int' → logprob: -14.25037670135498
    8. '(("' → logprob: -14.37537670135498
    9. '(""' → logprob: -14.62537670135498
    10. ' ("' → logprob: -15.12537670135498

Token 526: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.01718030869960785
    2. 'YES' → logprob: -4.142180442810059
    3. 'Possible' → logprob: -7.392180442810059
    4. 'yes' → logprob: -8.517180442810059
    5. 'OK' → logprob: -9.767180442810059
    6. 'Second' → logprob: -10.017180442810059
    7. '"' → logprob: -10.142180442810059
    8. 'Oui' → logprob: -10.267180442810059
    9. 'First' → logprob: -10.517180442810059
    10. 'No' → logprob: -10.642180442810059

Token 527: '"' (ID: 1)
  Prédit: '"'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -5.1928003813372925e-05
    2. '")' → logprob: -9.875051498413086
    3. 'if' → logprob: -15.375051498413086
    4. ' if' → logprob: -16.250051498413086
    5. '!"' → logprob: -17.250051498413086
    6. '```' → logprob: -17.250051498413086
    7. 'Yes' → logprob: -17.500051498413086
    8. ' "' → logprob: -17.875051498413086
    9. ''' → logprob: -18.000051498413086
    10. '""' → logprob: -18.125051498413086

Token 528: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.17076906561851501
    2. 'if' → logprob: -1.9207690954208374
    3. ')' → logprob: -4.670769214630127
    4. '"' → logprob: -6.795769214630127
    5. '```' → logprob: -13.295768737792969
    6. '")' → logprob: -13.545768737792969
    7. '()' → logprob: -13.670768737792969
    8. 'If' → logprob: -14.670768737792969
    9. ' ' → logprob: -14.920768737792969
    10. '!' → logprob: -15.670768737792969

Token 529: ' ok' (ID: 4763)
  Prédit: ' ok'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ok' → logprob: -0.004078639671206474
    2. 'ok' → logprob: -5.5040788650512695
    3. ' ' → logprob: -16.129077911376953
    4. '(ok' → logprob: -16.129077911376953
    5. '	ok' → logprob: -16.754077911376953
    6. ' okay' → logprob: -18.379077911376953
    7. 'Ok' → logprob: -19.129077911376953
    8. '_ok' → logprob: -19.129077911376953
    9. ' ' → logprob: -19.754077911376953
    10. ' ок' → logprob: -19.754077911376953

Token 530: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.029752805829048157
    2. 'else' → logprob: -3.529752731323242
    3. ')' → logprob: -13.154752731323242
    4. '```' → logprob: -15.529752731323242
    5. ' ' → logprob: -16.404752731323242
    6. '==' → logprob: -16.654752731323242
    7. ' )' → logprob: -16.904752731323242
    8. '	else' → logprob: -17.154752731323242
    9. '()' → logprob: -17.904752731323242
    10. '_else' → logprob: -18.654752731323242

Token 531: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.3992449939250946
    2. '"No' → logprob: -1.149245023727417
    3. ' "' → logprob: -4.399244785308838
    4. ''' → logprob: -12.649245262145996
    5. ' ' → logprob: -12.649245262145996
    6. '   ' → logprob: -13.399245262145996
    7. '("' → logprob: -14.149245262145996
    8. ' No' → logprob: -14.274245262145996
    9. ')' → logprob: -14.524245262145996
    10. ' ' → logprob: -14.649245262145996

Token 532: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.002475777640938759
    2. '"No' → logprob: -6.002475738525391
    3. '"' → logprob: -16.25247573852539
    4. ' No' → logprob: -18.37747573852539
    5. '“No' → logprob: -18.87747573852539
    6. 'NO' → logprob: -19.37747573852539
    7. '_No' → logprob: -20.62747573852539
    8. '.No' → logprob: -22.00247573852539
    9. '>No' → logprob: -22.12747573852539
    10. 'no' → logprob: -22.37747573852539

Token 533: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.02513078600168228
    2. ')' → logprob: -3.7751307487487793
    3. ')")' → logprob: -6.275130748748779
    4. ')"' → logprob: -15.025131225585938
    5. '}")' → logprob: -15.525131225585938
    6. '")
' → logprob: -16.150131225585938
    7. ' )' → logprob: -16.400131225585938
    8. '`)' → logprob: -17.025131225585938
    9. '')' → logprob: -17.150131225585938
    10. '!")' → logprob: -17.525131225585938


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 531
Tokens correctement prédits (1ère position, stricte): 133
Tokens correctement prédits (1ère position, avec adaptation): 145
Tokens correctement prédits (top 10): 332
Précision stricte (1ère position): 25.05%
Précision adaptée (1ère position): 27.31%
Précision (top 10): 62.52%
================================================================================
