================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:41:43
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def get_input():
    return input()

def parse_input(input_str):
    return map(int, input_str.split())

def get_a(parsed):
    return next(parsed)

def get_b(parsed):
    return next(parsed)

def compute_twice_b(b):
    return b * 2

def check_condition(a, double_b):
    return a <= double_b

def print_zero():
    print(0)

def compute_difference(a, double_b):
    return a - double_b

def print_result(result):
    print(result)

def main():
    input_str = get_input()
    parsed = parse_input(input_str)
    a = get_a(parsed)
    b = get_b(parsed)
    double_b = compute_twice_b(b)
    if check_condition(a, double_b):
        print_zero()
    else:
        diff = compute_difference(a, double_b)
        print_result(diff)

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' get' (ID: 717)
  → Token d'amorce (pas de prédiction)

Token 2: '_input' (ID: 12507)
  → Token d'amorce (pas de prédiction)

Token 3: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004974370822310448
    2. '():' → logprob: -5.629974365234375
    3. '_' → logprob: -6.879974365234375
    4. '()' → logprob: -8.629974365234375
    5. '```' → logprob: -10.004974365234375
    6. '(:' → logprob: -10.629974365234375
    7. '(_' → logprob: -10.754974365234375
    8. '(_:' → logprob: -10.879974365234375
    9. ' (' → logprob: -11.379974365234375
    10. '("("' → logprob: -12.004974365234375

Token 4: '   ' (ID: 271)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.6653289198875427
    2. '\n' → logprob: -1.1653289794921875
    3. '\' → logprob: -2.4153289794921875
    4. '   ' → logprob: -3.1653289794921875
    5. '    
' → logprob: -5.0403289794921875
    6. '()' → logprob: -5.2903289794921875
    7. '``' → logprob: -5.5403289794921875
    8. '
' → logprob: -5.7903289794921875
    9. ' 
' → logprob: -5.9153289794921875
    10. ' return' → logprob: -6.0403289794921875

Token 5: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.359432190656662
    2. 'user' → logprob: -2.4844322204589844
    3. 'input' → logprob: -2.8594322204589844
    4. 'x' → logprob: -2.9844322204589844
    5. 'i' → logprob: -3.2344322204589844
    6. '   ' → logprob: -3.9844322204589844
    7. 'r' → logprob: -3.9844322204589844
    8. ' ' → logprob: -4.234432220458984
    9. 'u' → logprob: -5.359432220458984
    10. 'a' → logprob: -5.734432220458984

Token 6: ' input' (ID: 3422)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2113812267780304
    2. ' input' → logprob: -1.961381196975708
    3. 'input' → logprob: -3.336381196975708
    4. '"' → logprob: -4.836381435394287
    5. ''' → logprob: -5.586381435394287
    6. '  ' → logprob: -6.711381435394287
    7. ' "' → logprob: -7.711381435394287
    8. ' '' → logprob: -8.086380958557129
    9. '(input' → logprob: -8.586380958557129
    10. ' []' → logprob: -9.461380958557129

Token 7: '()

' (ID: 5874)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.001982640940696001
    2. '()' → logprob: -6.376982688903809
    3. '('' → logprob: -9.001982688903809
    4. ' (' → logprob: -10.251982688903809
    5. '("("' → logprob: -10.501982688903809
    6. '(
' → logprob: -10.501982688903809
    7. ''' → logprob: -11.251982688903809
    8. '.' → logprob: -11.501982688903809
    9. '```' → logprob: -11.876982688903809
    10. ' ' → logprob: -12.126982688903809

Token 8: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.9562095403671265
    2. '(' → logprob: -1.3312095403671265
    3. '()' → logprob: -2.456209659576416
    4. '\n' → logprob: -2.581209659576416
    5. '```' → logprob: -3.206209659576416
    6. '(
' → logprob: -3.456209659576416
    7. '#' → logprob: -3.706209659576416
    8. '<|end|>' → logprob: -3.831209659576416
    9. '\' → logprob: -4.331209659576416
    10. '
' → logprob: -4.706209659576416

Token 9: ' parse' (ID: 8420)
  Prédit: ' calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.4079475700855255
    2. ' get' → logprob: -2.032947540283203
    3. ' process' → logprob: -2.157947540283203
    4. ' main' → logprob: -3.407947540283203
    5. ' compute' → logprob: -4.657947540283203
    6. ' user' → logprob: -4.782947540283203
    7. ' print' → logprob: -4.907947540283203
    8. ' add' → logprob: -4.907947540283203
    9. ' space' → logprob: -5.282947540283203
    10. ' greet' → logprob: -5.907947540283203

Token 10: '_input' (ID: 12507)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.3120215833187103
    2. '(' → logprob: -1.4370216131210327
    3. '_input' → logprob: -3.562021493911743
    4. '_line' → logprob: -8.062021255493164
    5. '_token' → logprob: -8.312021255493164
    6. '_text' → logprob: -8.437021255493164
    7. '_data' → logprob: -8.812021255493164
    8. '(_)' → logprob: -9.062021255493164
    9. '('_' → logprob: -9.187021255493164
    10. '(_' → logprob: -9.187021255493164

Token 11: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.007172470446676016
    2. '_' → logprob: -5.007172584533691
    3. '("("' → logprob: -8.507172584533691
    4. '(_)' → logprob: -10.007172584533691
    5. '_(' → logprob: -10.632172584533691
    6. '_parent' → logprob: -10.632172584533691
    7. '('' → logprob: -11.132172584533691
    8. '(_' → logprob: -11.257172584533691
    9. '('_' → logprob: -11.382172584533691
    10. ' (' → logprob: -11.382172584533691

Token 12: '_str' (ID: 6182)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.07954858243465424
    2. '_' → logprob: -2.8295485973358154
    3. '):' → logprob: -5.329548358917236
    4. '_string' → logprob: -5.329548358917236
    5. '_)' → logprob: -5.704548358917236
    6. ')_' → logprob: -6.204548358917236
    7. '_text' → logprob: -6.954548358917236
    8. '_str' → logprob: -7.829548358917236
    9. '_data' → logprob: -8.204548835754395
    10. ' )' → logprob: -8.954548835754395

Token 13: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0036834515631198883
    2. ')' → logprob: -5.878683567047119
    3. ':' → logprob: -7.628683567047119
    4. '):
' → logprob: -8.878683090209961
    5. ',' → logprob: -9.253683090209961
    6. ' ):' → logprob: -9.628683090209961
    7. '(' → logprob: -10.753683090209961
    8. '[' → logprob: -11.628683090209961
    9. '():' → logprob: -12.003683090209961
    10. '   ' → logprob: -12.253683090209961

Token 14: '   ' (ID: 271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6748087406158447
    2. '   ' → logprob: -0.7998087406158447
    3. '    ' → logprob: -4.674808502197266
    4. ' return' → logprob: -4.924808502197266
    5. '_' → logprob: -5.674808502197266
    6. '[' → logprob: -5.924808502197266
    7. ' (' → logprob: -5.924808502197266
    8. ' input' → logprob: -6.049808502197266
    9. '(
' → logprob: -6.174808502197266
    10. '(input' → logprob: -6.299808502197266

Token 15: ' return' (ID: 622)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.22814059257507324
    2. '   ' → logprob: -1.8531405925750732
    3. ' return' → logprob: -3.6031405925750732
    4. 'input' → logprob: -4.478140830993652
    5. '    ' → logprob: -6.103140830993652
    6. ' split' → logprob: -6.228140830993652
    7. ' token' → logprob: -7.103140830993652
    8. ' tokens' → logprob: -7.103140830993652
    9. 'return' (adapté à ' return') → logprob: -7.478140830993652
    10. ' if' → logprob: -7.853140830993652

Token 16: ' map' (ID: 4014)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.01907561719417572
    2. 'input' → logprob: -4.144075393676758
    3. ' list' → logprob: -6.019075393676758
    4. ' int' → logprob: -8.019075393676758
    5. ' ' → logprob: -9.269075393676758
    6. 'list' → logprob: -9.269075393676758
    7. ' [' → logprob: -10.894075393676758
    8. '[input' → logprob: -11.019075393676758
    9. '[' → logprob: -11.269075393676758
    10. 'int' → logprob: -11.269075393676758

Token 17: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.26959478855133057
    2. '(int' → logprob: -1.7695947885513306
    3. '(str' → logprob: -2.769594669342041
    4. '(lambda' → logprob: -5.769594669342041
    5. '(input' → logprob: -10.6445951461792
    6. '(float' → logprob: -10.8945951461792
    7. '(
' → logprob: -11.6445951461792
    8. '(eval' → logprob: -11.7695951461792
    9. '("("' → logprob: -12.1445951461792
    10. '(split' → logprob: -12.1445951461792

Token 18: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.18941949307918549
    2. '(' → logprob: -1.8144195079803467
    3. ')' → logprob: -5.314419269561768
    4. ' (' → logprob: -6.314419269561768
    5. ',' → logprob: -6.439419269561768
    6. ',input' → logprob: -7.064419269561768
    7. 'input' → logprob: -9.439419746398926
    8. '(
' → logprob: -9.439419746398926
    9. '(user' → logprob: -9.939419746398926
    10. ' input' → logprob: -10.564419746398926

Token 19: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.1427479088306427
    2. 'input' → logprob: -2.0177478790283203
    3. ')' → logprob: -9.89274787902832
    4. '(input' → logprob: -11.14274787902832
    5. '   ' → logprob: -12.64274787902832
    6. ',input' → logprob: -13.64274787902832
    7. ' ' → logprob: -14.26774787902832
    8. ' )' → logprob: -14.26774787902832
    9. '	input' → logprob: -14.26774787902832
    10. '_input' → logprob: -15.26774787902832

Token 20: '_str' (ID: 6182)
  Prédit: '_str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_str' → logprob: -0.000158842682139948
    2. '(' → logprob: -9.00015926361084
    3. '_s' → logprob: -11.25015926361084
    4. '(_' → logprob: -11.87515926361084
    5. ')' → logprob: -12.62515926361084
    6. 'str' → logprob: -13.25015926361084
    7. '_split' → logprob: -13.37515926361084
    8. '_string' → logprob: -14.00015926361084
    9. '_STR' → logprob: -14.00015926361084
    10. '   ' → logprob: -14.12515926361084

Token 21: '.split' (ID: 10347)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.7272791266441345
    2. '.split' → logprob: -0.7272791266441345
    3. '.strip' → logprob: -4.227279186248779
    4. '().' → logprob: -4.602279186248779
    5. ' .' → logprob: -4.727279186248779
    6. '   ' → logprob: -9.977278709411621
    7. 'split' → logprob: -11.227278709411621
    8. '()' → logprob: -12.227278709411621
    9. ')' → logprob: -12.352278709411621
    10. '.rstrip' → logprob: -12.852278709411621

Token 22: '())

' (ID: 27654)
  Prédit: '(''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '('' → logprob: -0.00593033991754055
    2. '())' → logprob: -5.255930423736572
    3. '(' → logprob: -8.255929946899414
    4. '()' → logprob: -8.505929946899414
    5. '("("' → logprob: -9.130929946899414
    6. '("' → logprob: -9.255929946899414
    7. '()))' → logprob: -11.005929946899414
    8. '(','' → logprob: -11.755929946899414
    9. ')' → logprob: -13.130929946899414
    10. '(()' → logprob: -14.255929946899414

Token 23: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.016018060967326164
    2. '
' → logprob: -5.016017913818359
    3. '\' → logprob: -5.141017913818359
    4. 'd' → logprob: -6.516017913818359
    5. '

' → logprob: -7.516017913818359
    6. '\n' → logprob: -7.891017913818359
    7. '```' → logprob: -8.14101791381836
    8. '<|end|>' → logprob: -8.64101791381836
    9. 'for' → logprob: -9.26601791381836
    10. '#' → logprob: -9.64101791381836

Token 24: ' get' (ID: 717)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.07220323383808136
    2. ' solve' → logprob: -3.0722031593322754
    3. ' calculate' → logprob: -4.447203159332275
    4. ' process' → logprob: -4.947203159332275
    5. ' sum' → logprob: -6.072203159332275
    6. ' compute' → logprob: -6.822203159332275
    7. ' get' → logprob: -7.822203159332275
    8. 'main' → logprob: -8.197203636169434
    9. ' count' → logprob: -9.197203636169434
    10. 'solve' → logprob: -9.572203636169434

Token 25: '_a' (ID: 10852)
  Prédit: '_input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.7988346219062805
    2. '_max' → logprob: -1.6738345623016357
    3. '_' → logprob: -1.9238345623016357
    4. '_sum' → logprob: -2.2988345623016357
    5. '_output' → logprob: -3.4238345623016357
    6. '_data' → logprob: -3.9238345623016357
    7. '_user' → logprob: -4.048834800720215
    8. '_result' → logprob: -4.923834800720215
    9. '_numbers' → logprob: -5.048834800720215
    10. '_total' → logprob: -5.548834800720215

Token 26: '(parsed' (ID: 96597)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.4086238145828247
    2. 'dd' → logprob: -1.9086238145828247
    3. 'rray' → logprob: -3.533623695373535
    4. '():' → logprob: -3.533623695373535
    5. '_values' → logprob: -3.533623695373535
    6. '_b' → logprob: -4.033623695373535
    7. '_' → logprob: -4.158623695373535
    8. 'rg' → logprob: -4.533623695373535
    9. '_value' → logprob: -4.658623695373535
    10. '_and' → logprob: -4.658623695373535

Token 27: '):
' (ID: 1883)
  Prédit: '_values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_values' → logprob: -0.24323035776615143
    2. '_data' → logprob: -2.4932303428649902
    3. ')' → logprob: -2.7432303428649902
    4. '_numbers' → logprob: -3.9932303428649902
    5. ')_' → logprob: -4.36823034286499
    6. '_params' → logprob: -4.86823034286499
    7. '_input' → logprob: -5.24323034286499
    8. '_elements' → logprob: -5.74323034286499
    9. '_vals' → logprob: -5.86823034286499
    10. '())' → logprob: -5.99323034286499

Token 28: '   ' (ID: 271)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.6625279784202576
    2. ' next' → logprob: -1.4125280380249023
    3. '   ' → logprob: -2.2875280380249023
    4. 'next' → logprob: -3.0375280380249023
    5. ' ,' → logprob: -3.6625280380249023
    6. ' return' → logprob: -4.162528038024902
    7. ' =' → logprob: -4.537528038024902
    8. ',next' → logprob: -5.287528038024902
    9. '    ' → logprob: -5.412528038024902
    10. ' a' → logprob: -5.787528038024902

Token 29: ' return' (ID: 622)
  Prédit: 'next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'next' → logprob: -0.13416437804698944
    2. 'return' (adapté à ' return') → logprob: -2.634164333343506
    3. ' next' → logprob: -3.259164333343506
    4. '   ' → logprob: -4.884164333343506
    5. ' return' → logprob: -5.009164333343506
    6. 'parsed' → logprob: -7.009164333343506
    7. ' parsed' → logprob: -9.259164810180664
    8. 'a' → logprob: -9.259164810180664
    9. 'for' → logprob: -11.759164810180664
    10. '[next' → logprob: -13.009164810180664

Token 30: ' next' (ID: 2613)
  Prédit: ' next'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' next' → logprob: -0.04005672410130501
    2. 'next' → logprob: -3.5400567054748535
    3. ' parsed' → logprob: -4.6650567054748535
    4. 'parsed' → logprob: -7.1650567054748535
    5. ' list' → logprob: -10.165057182312012
    6. ' int' → logprob: -11.165057182312012
    7. 'list' → logprob: -12.540057182312012
    8. ' ' → logprob: -13.665057182312012
    9. '(next' → logprob: -14.165057182312012
    10. 'int' → logprob: -14.165057182312012

Token 31: '(parsed' (ID: 96597)
  Prédit: '(parsed'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(parsed' → logprob: -0.000918008794542402
    2. '(' → logprob: -7.000917911529541
    3. '(parse' → logprob: -13.3759183883667
    4. '(par' → logprob: -13.6259183883667
    5. '(p' → logprob: -13.6259183883667
    6. '(paren' → logprob: -13.8759183883667
    7. '(parser' → logprob: -14.2509183883667
    8. '(iter' → logprob: -15.1259183883667
    9. ' parsed' → logprob: -15.6259183883667
    10. 'parsed' → logprob: -16.250917434692383

Token 32: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -2.3795937522663735e-05
    2. ' )' → logprob: -11.50002384185791
    3. '())' → logprob: -12.00002384185791
    4. ',' → logprob: -13.00002384185791
    5. '),' → logprob: -13.50002384185791
    6. '))' → logprob: -13.50002384185791
    7. '()' → logprob: -13.62502384185791
    8. ' ' → logprob: -14.87502384185791
    9. '(' → logprob: -15.37502384185791
    10. ',)' → logprob: -15.75002384185791

Token 33: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.014114259742200375
    2. '_' → logprob: -5.2641143798828125
    3. '<|end|>' → logprob: -6.0141143798828125
    4. '(' → logprob: -6.2641143798828125
    5. '()' → logprob: -6.5141143798828125
    6. 'a' → logprob: -6.8891143798828125
    7. ' ' → logprob: -7.6391143798828125
    8. 'newline' → logprob: -8.014114379882812
    9. ')' → logprob: -8.264114379882812
    10. '<|end|>' → logprob: -8.639114379882812

Token 34: ' get' (ID: 717)
  Prédit: ' get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.08244460821151733
    2. '_' → logprob: -2.832444667816162
    3. ' def' → logprob: -4.582444667816162
    4. 'get' → logprob: -5.332444667816162
    5. 'def' → logprob: -5.957444667816162
    6. ' _' → logprob: -6.957444667816162
    7. '_get' → logprob: -7.207444667816162
    8. ' ' → logprob: -7.457444667816162
    9. ' a' → logprob: -8.832444190979004
    10. '_a' → logprob: -10.582444190979004

Token 35: '_b' (ID: 1535)
  Prédit: '_b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_b' → logprob: -0.0029123348649591208
    2. '_' → logprob: -6.752912521362305
    3. '_a' → logprob: -7.002912521362305
    4. '_rest' → logprob: -8.377912521362305
    5. '_input' → logprob: -8.502912521362305
    6. '_space' → logprob: -9.752912521362305
    7. ' _' → logprob: -9.877912521362305
    8. '_next' → logprob: -10.502912521362305
    9. '_remaining' → logprob: -10.502912521362305
    10. '_n' → logprob: -11.002912521362305

Token 36: '(parsed' (ID: 96597)
  Prédit: '(parsed'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(parsed' → logprob: -0.0010517460759729147
    2. '(' → logprob: -6.876051902770996
    3. ' (' → logprob: -12.251051902770996
    4. '(_' → logprob: -12.251051902770996
    5. '(next' → logprob: -13.376051902770996
    6. '_' → logprob: -13.626051902770996
    7. '(parse' → logprob: -13.751051902770996
    8. '(_)' → logprob: -14.001051902770996
    9. '(get' → logprob: -14.376051902770996
    10. '(decoded' → logprob: -14.501051902770996

Token 37: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0040831477381289005
    2. ')' → logprob: -5.504083156585693
    3. '):
' → logprob: -13.004082679748535
    4. ' ):' → logprob: -13.754082679748535
    5. ',' → logprob: -14.754082679748535
    6. '),' → logprob: -15.254082679748535
    7. '():' → logprob: -15.379082679748535
    8. ':' → logprob: -15.754082679748535
    9. '):

' → logprob: -16.50408363342285
    10. ')):' → logprob: -16.62908363342285

Token 38: '   ' (ID: 271)
  Prédit: ' next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' next' → logprob: -0.3199138641357422
    2. 'next' → logprob: -1.8199138641357422
    3. '   ' → logprob: -2.694913864135742
    4. ' return' → logprob: -3.444913864135742
    5. 'return' → logprob: -4.444913864135742
    6. '(next' → logprob: -7.694913864135742
    7. ' ' → logprob: -10.319913864135742
    8. '[next' → logprob: -10.944913864135742
    9. '	next' → logprob: -11.069913864135742
    10. '  ' → logprob: -11.319913864135742

Token 39: ' return' (ID: 622)
  Prédit: ' next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' next' → logprob: -0.4325961172580719
    2. 'next' → logprob: -1.4325960874557495
    3. ' return' → logprob: -2.557596206665039
    4. 'return' (adapté à ' return') → logprob: -3.432596206665039
    5. '   ' → logprob: -5.932596206665039
    6. ' ' → logprob: -11.057596206665039
    7. '  ' → logprob: -11.557596206665039
    8. '[next' → logprob: -12.182596206665039
    9. '(next' → logprob: -12.557596206665039
    10. '	next' → logprob: -13.182596206665039

Token 40: ' next' (ID: 2613)
  Prédit: 'next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'next' → logprob: -0.20149949193000793
    2. ' next' → logprob: -1.7014994621276855
    3. 'parsed' → logprob: -10.576499938964844
    4. ' ' → logprob: -10.701499938964844
    5. '  ' → logprob: -11.451499938964844
    6. ' parsed' → logprob: -11.951499938964844
    7. '(next' → logprob: -11.951499938964844
    8. '   ' → logprob: -12.451499938964844
    9. '[next' → logprob: -12.451499938964844
    10. '	next' → logprob: -13.076499938964844

Token 41: '(parsed' (ID: 96597)
  Prédit: '(parsed'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(parsed' → logprob: -0.2014915943145752
    2. '(' → logprob: -1.7014915943145752
    3. '(parse' → logprob: -10.826491355895996
    4. '(parser' → logprob: -11.451491355895996
    5. '(par' → logprob: -11.826491355895996
    6. '(_' → logprob: -11.951491355895996
    7. '(paren' → logprob: -12.451491355895996
    8. '((' → logprob: -12.576491355895996
    9. '(

' → logprob: -12.826491355895996
    10. ' (' → logprob: -13.076491355895996

Token 42: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -4.320199877838604e-07
    2. '()' → logprob: -15.625
    3. ')
' → logprob: -16.125
    4. '))' → logprob: -16.75
    5. ' )' → logprob: -17.5
    6. '())' → logprob: -18.625
    7. '}' → logprob: -18.75
    8. '),' → logprob: -19.125
    9. ')return' → logprob: -19.125
    10. ')}' → logprob: -19.25

Token 43: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.00024275471514556557
    2. 'a' → logprob: -9.000243186950684
    3. 'n' → logprob: -10.375243186950684
    4. 'if' → logprob: -10.750243186950684
    5. 'c' → logprob: -11.000243186950684
    6. '```' → logprob: -11.375243186950684
    7. 'for' → logprob: -12.000243186950684
    8. 'data' → logprob: -12.250243186950684
    9. 'result' → logprob: -12.625243186950684
    10. 'print' → logprob: -12.625243186950684

Token 44: ' compute' (ID: 23864)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.18557141721248627
    2. 'main' → logprob: -2.1855714321136475
    3. ' calculate' → logprob: -4.685571193695068
    4. ' solve' → logprob: -4.810571193695068
    5. ' get' → logprob: -4.935571193695068
    6. 'calculate' → logprob: -5.060571193695068
    7. 'solve' → logprob: -5.185571193695068
    8. 'get' → logprob: -5.685571193695068
    9. ' sum' → logprob: -6.310571193695068
    10. ' multiply' → logprob: -6.310571193695068

Token 45: '_tw' (ID: 139926)
  Prédit: '_sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.8460808396339417
    2. '(a' → logprob: -1.4710807800292969
    3. '(' → logprob: -2.096080780029297
    4. '_' → logprob: -2.221080780029297
    5. '_result' → logprob: -2.721080780029297
    6. '_difference' → logprob: -4.721080780029297
    7. '_value' → logprob: -5.221080780029297
    8. '_a' → logprob: -5.471080780029297
    9. '_product' → logprob: -5.596080780029297
    10. '_s' → logprob: -5.596080780029297

Token 46: 'ice' (ID: 603)
  Prédit: 'o'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'o' → logprob: -0.002117904368788004
    2. 'ice' → logprob: -6.627118110656738
    3. '_o' → logprob: -7.627118110656738
    4. 'os' → logprob: -9.627118110656738
    5. '(o' → logprob: -10.002118110656738
    6. 'ist' → logprob: -10.252118110656738
    7. 'ic' → logprob: -10.752118110656738
    8. ' o' → logprob: -11.252118110656738
    9. ''o' → logprob: -11.377118110656738
    10. 'isted' → logprob: -11.377118110656738

Token 47: '_b' (ID: 1535)
  Prédit: '(a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.5286210775375366
    2. '(' → logprob: -1.0286210775375366
    3. '_sum' → logprob: -4.403621196746826
    4. '_a' → logprob: -4.653621196746826
    5. '(x' → logprob: -5.278621196746826
    6. '(b' → logprob: -5.403621196746826
    7. '_' → logprob: -5.653621196746826
    8. '()' → logprob: -5.778621196746826
    9. '_value' → logprob: -5.903621196746826
    10. '_b' → logprob: -6.153621196746826

Token 48: '(b' (ID: 3229)
  Prédit: '(b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(b' → logprob: -0.2047457993030548
    2. '(' → logprob: -1.7047457695007324
    3. '(a' → logprob: -6.704745769500732
    4. '_' → logprob: -8.07974624633789
    5. '(*' → logprob: -8.07974624633789
    6. '(_' → logprob: -8.07974624633789
    7. 'def' → logprob: -8.32974624633789
    8. '_b' → logprob: -8.32974624633789
    9. '():' → logprob: -8.82974624633789
    10. '*' → logprob: -9.20474624633789

Token 49: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.40809619426727295
    2. '*' → logprob: -1.158096194267273
    3. ' *' → logprob: -4.2830963134765625
    4. ')' → logprob: -5.4080963134765625
    5. '):
' → logprob: -6.1580963134765625
    6. ' ):' → logprob: -9.158096313476562
    7. ' ' → logprob: -9.283096313476562
    8. '   ' → logprob: -9.283096313476562
    9. ')*' → logprob: -9.408096313476562
    10. '**' → logprob: -10.033096313476562

Token 50: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10773386806249619
    2. 'return' → logprob: -2.857733964920044
    3. ' return' → logprob: -3.107733964920044
    4. 'b' → logprob: -11.482733726501465
    5. ' ' → logprob: -11.857733726501465
    6. '```' → logprob: -11.982733726501465
    7. '	return' → logprob: -12.732733726501465
    8. '   ' → logprob: -13.482733726501465
    9. '  ' → logprob: -14.232733726501465
    10. '*' → logprob: -14.232733726501465

Token 51: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.6651698350906372
    2. '   ' → logprob: -1.4151698350906372
    3. ' return' → logprob: -1.4151698350906372
    4. 'b' → logprob: -11.290169715881348
    5. ' ' → logprob: -11.415169715881348
    6. '```' → logprob: -11.540169715881348
    7. '2' → logprob: -12.790169715881348
    8. '    
' → logprob: -13.040169715881348
    9. '	return' → logprob: -13.165169715881348
    10. '`' → logprob: -13.915169715881348

Token 52: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.6875046491622925
    2. 'b' → logprob: -1.6875046491622925
    3. ' ' → logprob: -1.6875046491622925
    4. '2' → logprob: -2.062504768371582
    5. ' ' → logprob: -9.937504768371582
    6. '   ' → logprob: -12.687504768371582
    7. '(b' → logprob: -13.000004768371582
    8. '(' → logprob: -13.187504768371582
    9. '```' → logprob: -13.187504768371582
    10. ' (' → logprob: -13.250004768371582

Token 53: ' *' (ID: 425)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.3132690191268921
    2. ' *' → logprob: -1.313269019126892
    3. ' ' → logprob: -12.438268661499023
    4. ' ' → logprob: -13.188268661499023
    5. '**' → logprob: -14.063268661499023
    6. ' **' → logprob: -15.188268661499023
    7. '2' → logprob: -15.563268661499023
    8. '*
' → logprob: -17.438268661499023
    9. '0' → logprob: -17.938268661499023
    10. '1' → logprob: -18.063268661499023

Token 54: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0028049908578395844
    2. ' ' → logprob: -5.877804756164551
    3. '```' → logprob: -17.252805709838867
    4. '   ' → logprob: -17.502805709838867
    5. '  ' → logprob: -18.002805709838867
    6. ' ' → logprob: -18.252805709838867
    7. '２' → logprob: -18.877805709838867
    8. '۲' → logprob: -19.002805709838867
    9. '²' → logprob: -19.627805709838867
    10. '`' → logprob: -20.565305709838867

Token 55: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0002036595979006961
    2. ' ' → logprob: -8.500204086303711
    3. '```' → logprob: -17.00020408630371
    4. ' ' → logprob: -18.12520408630371
    5. '２' → logprob: -18.12520408630371
    6. '   ' → logprob: -18.50020408630371
    7. '  ' → logprob: -18.87520408630371
    8. '۲' → logprob: -19.00020408630371
    9. '`' → logprob: -19.25020408630371
    10. 'b' → logprob: -19.37520408630371

Token 56: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.006475552450865507
    2. '<|end|>' → logprob: -5.381475448608398
    3. '```' → logprob: -7.131475448608398
    4. '\' → logprob: -8.006475448608398
    5. '#' → logprob: -8.256475448608398
    6. '<|end|>' → logprob: -8.631475448608398
    7. '\n' → logprob: -9.506475448608398
    8. '
' → logprob: -9.506475448608398
    9. 'a' → logprob: -10.631475448608398
    10. '[' → logprob: -11.131475448608398

Token 57: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.005946459714323282
    2. '#' → logprob: -5.630946636199951
    3. 'a' → logprob: -6.755946636199951
    4. '```' → logprob: -7.255946636199951
    5. '<|end|>' → logprob: -8.630946159362793
    6. 'print' → logprob: -9.505946159362793
    7. '\' → logprob: -9.755946159362793
    8. 'for' → logprob: -10.130946159362793
    9. 'b' → logprob: -10.255946159362793
    10. 'if' → logprob: -10.630946159362793

Token 58: ' check' (ID: 2371)
  Prédit: ' compute'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' compute' → logprob: -0.6348469853401184
    2. ' main' → logprob: -0.7598469853401184
    3. ' get' → logprob: -7.009847164154053
    4. ' calculate' → logprob: -7.134847164154053
    5. ' solve' → logprob: -8.384846687316895
    6. 'compute' → logprob: -9.509846687316895
    7. ' process' → logprob: -10.009846687316895
    8. ' ' → logprob: -10.259846687316895
    9. ' compare' → logprob: -10.759846687316895
    10. ' check' → logprob: -11.009846687316895

Token 59: '_condition' (ID: 64948)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10636384785175323
    2. '_' → logprob: -2.4813637733459473
    3. '_(' → logprob: -5.231363773345947
    4. '_b' → logprob: -5.356363773345947
    5. '_a' → logprob: -6.356363773345947
    6. '(a' → logprob: -6.731363773345947
    7. '(b' → logprob: -7.481363773345947
    8. '(_' → logprob: -7.981363773345947
    9. '_space' → logprob: -7.981363773345947
    10. '_for' → logprob: -8.231364250183105

Token 60: '(a' (ID: 6271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.18212324380874634
    2. '(b' → logprob: -1.9321231842041016
    3. '(a' → logprob: -4.432123184204102
    4. ' (' → logprob: -4.807123184204102
    5. ':' → logprob: -6.932123184204102
    6. '():' → logprob: -8.307123184204102
    7. '(s' → logprob: -8.557123184204102
    8. '(condition' → logprob: -10.432123184204102
    9. '(p' → logprob: -11.682123184204102
    10. '(user' → logprob: -11.807123184204102

Token 61: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.10551194846630096
    2. ' ,' → logprob: -2.7305119037628174
    3. '):' → logprob: -3.6055119037628174
    4. ' >=' → logprob: -5.7305121421813965
    5. ')' → logprob: -6.8555121421813965
    6. ' ):' → logprob: -6.9805121421813965
    7. ',b' → logprob: -7.2305121421813965
    8. ' ==' → logprob: -7.9805121421813965
    9. '>=' → logprob: -8.230511665344238
    10. ',a' → logprob: -8.355511665344238

Token 62: ' double' (ID: 3503)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.28182101249694824
    2. ' b' → logprob: -1.4068210124969482
    3. 'tw' → logprob: -8.281821250915527
    4. 'compute' → logprob: -8.656821250915527
    5. ' ' → logprob: -9.531821250915527
    6. '   ' → logprob: -10.156821250915527
    7. ' compute' → logprob: -10.406821250915527
    8. ' twice' → logprob: -10.781821250915527
    9. '2' → logprob: -11.281821250915527
    10. '	b' → logprob: -11.406821250915527

Token 63: '_b' (ID: 1535)
  Prédit: '_b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_b' → logprob: -0.03371855244040489
    2. 'b' → logprob: -3.4087185859680176
    3. '_' → logprob: -10.03371810913086
    4. 'B' → logprob: -12.15871810913086
    5. ')_' → logprob: -12.40871810913086
    6. ')' → logprob: -12.53371810913086
    7. ')b' → logprob: -13.03371810913086
    8. 'a' → logprob: -13.28371810913086
    9. '_B' → logprob: -13.78371810913086
    10. '```' → logprob: -13.78371810913086

Token 64: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0013859511818736792
    2. ')' → logprob: -6.7513861656188965
    3. '):
' → logprob: -8.626385688781738
    4. ' ):' → logprob: -10.376385688781738
    5. 'a' → logprob: -14.001385688781738
    6. '_' → logprob: -14.376385688781738
    7. ')>' → logprob: -14.751385688781738
    8. ')：' → logprob: -14.751385688781738
    9. ',' → logprob: -15.251385688781738
    10. ')):' → logprob: -15.251385688781738

Token 65: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0008833571337163448
    2. '   ' → logprob: -7.87588357925415
    3. ':
' → logprob: -8.250883102416992
    4. ' :' → logprob: -9.500883102416992
    5. ':return' → logprob: -9.750883102416992
    6. '():' → logprob: -9.875883102416992
    7. '(' → logprob: -11.000883102416992
    8. '(a' → logprob: -11.250883102416992
    9. '):' → logprob: -11.250883102416992
    10. ':**' → logprob: -12.875883102416992

Token 66: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.710331380367279
    2. ' return' → logprob: -0.960331380367279
    3. '   ' → logprob: -2.085331439971924
    4. 'a' → logprob: -6.835331439971924
    5. ' a' → logprob: -7.960331439971924
    6. 'if' → logprob: -10.710330963134766
    7. ' if' → logprob: -11.210330963134766
    8. '```' → logprob: -11.835330963134766
    9. '    
' → logprob: -12.585330963134766
    10. '    ' → logprob: -12.835330963134766

Token 67: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.5231837630271912
    2. ' a' → logprob: -0.8981837630271912
    3. ' ' → logprob: -10.773183822631836
    4. '   ' → logprob: -11.523183822631836
    5. ' ' → logprob: -11.773183822631836
    6. '(a' → logprob: -12.023183822631836
    7. '	a' → logprob: -12.523183822631836
    8. 'double' → logprob: -12.773183822631836
    9. 'b' → logprob: -12.898183822631836
    10. ' double' → logprob: -13.148183822631836

Token 68: ' <=' (ID: 5017)
  Prédit: '<'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<' → logprob: -0.840684175491333
    2. '>' → logprob: -1.465684175491333
    3. ' <' → logprob: -1.965684175491333
    4. ' >' → logprob: -2.340684175491333
    5. '<=' → logprob: -3.465684175491333
    6. ' <=' → logprob: -3.715684175491333
    7. '>=' → logprob: -3.840684175491333
    8. ' >=' → logprob: -4.465683937072754
    9. '==' → logprob: -4.715683937072754
    10. ' ==' → logprob: -6.090683937072754

Token 69: ' double' (ID: 3503)
  Prédit: 'double'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'double' → logprob: -0.575942873954773
    2. ' double' → logprob: -0.825942873954773
    3. ' ' → logprob: -13.325942993164062
    4. '(double' → logprob: -14.575942993164062
    5. '	double' → logprob: -14.700942993164062
    6. ' ' → logprob: -14.950942993164062
    7. ',double' → logprob: -16.200942993164062
    8. '   ' → logprob: -16.575942993164062
    9. 'ouble' → logprob: -16.575942993164062
    10. ' doble' → logprob: -17.075942993164062

Token 70: '_b' (ID: 1535)
  Prédit: '_b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_b' → logprob: -0.0036447341553866863
    2. '_' → logprob: -5.628644943237305
    3. ' _' → logprob: -10.628644943237305
    4. 'b' → logprob: -12.128644943237305
    5. '__' → logprob: -13.253644943237305
    6. '_a' → logprob: -13.378644943237305
    7. '\' → logprob: -13.628644943237305
    8. '_s' → logprob: -13.753644943237305
    9. '_f' → logprob: -13.878644943237305
    10. '_r' → logprob: -14.003644943237305

Token 71: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.019728491082787514
    2. '

' → logprob: -4.144728660583496
    3. '
' → logprob: -6.269728660583496
    4. '<|end|>' → logprob: -6.769728660583496
    5. '```' → logprob: -8.269728660583496
    6. '\' → logprob: -8.894728660583496
    7. '\n' → logprob: -9.019728660583496
    8. '<|end|>' → logprob: -10.269728660583496
    9. '#' → logprob: -11.269728660583496
    10. '---

' → logprob: -11.519728660583496

Token 72: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0028373266104608774
    2. 'if' → logprob: -6.377837181091309
    3. '```' → logprob: -7.877837181091309
    4. '<|end|>' → logprob: -8.252837181091309
    5. '\' → logprob: -8.377837181091309
    6. 'a' → logprob: -9.502837181091309
    7. 'for' → logprob: -10.002837181091309
    8. '#' → logprob: -10.002837181091309
    9. '\n' → logprob: -10.502837181091309
    10. '<|end|>' → logprob: -10.752837181091309

Token 73: ' print' (ID: 2123)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.07085860520601273
    2. ' main' → logprob: -2.6958587169647217
    3. 'solve' → logprob: -7.695858478546143
    4. 'def' → logprob: -9.0708589553833
    5. 'check' → logprob: -9.3208589553833
    6. 'process' → logprob: -9.8208589553833
    7. 'is' → logprob: -9.8208589553833
    8. 'solution' → logprob: -10.1958589553833
    9. 'run' → logprob: -10.9458589553833
    10. ' solve' → logprob: -11.1958589553833

Token 74: '_zero' (ID: 53468)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.007789859548211098
    2. '()' → logprob: -5.6327900886535645
    3. '("' → logprob: -6.0077900886535645
    4. '("")' → logprob: -7.5077900886535645
    5. '(True' → logprob: -8.007789611816406
    6. '(False' → logprob: -8.132789611816406
    7. '('' → logprob: -8.882789611816406
    8. '_result' → logprob: -9.382789611816406
    9. '("("' → logprob: -9.382789611816406
    10. '_' → logprob: -9.507789611816406

Token 75: '():
' (ID: 8595)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -6.623244553338736e-05
    2. '()
' → logprob: -10.000065803527832
    3. '()

' → logprob: -12.000065803527832
    4. '`()' → logprob: -12.000065803527832
    5. '()\' → logprob: -13.125065803527832
    6. ' ()' → logprob: -13.500065803527832
    7. '(' → logprob: -13.750065803527832
    8. '()`' → logprob: -13.750065803527832
    9. '():' → logprob: -14.250065803527832
    10. ']()' → logprob: -14.750065803527832

Token 76: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0034311427734792233
    2. 'print' → logprob: -5.87843132019043
    3. ' print' → logprob: -7.37843132019043
    4. '   ' → logprob: -14.00343132019043
    5. '    ' → logprob: -15.37843132019043
    6. '	print' → logprob: -15.75343132019043
    7. '```' → logprob: -15.75343132019043
    8. '()' → logprob: -16.62843132019043
    9. ' ' → logprob: -16.87843132019043
    10. '       ' → logprob: -17.00343132019043

Token 77: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.006876399274915457
    2. ' print' → logprob: -5.506876468658447
    3. '   ' → logprob: -5.881876468658447
    4. 'pass' → logprob: -12.756875991821289
    5. '```' → logprob: -13.756875991821289
    6. ' pass' → logprob: -15.631875991821289
    7. ' ' → logprob: -16.00687599182129
    8. '	print' → logprob: -16.50687599182129
    9. 'return' → logprob: -16.75687599182129
    10. '  ' → logprob: -16.88187599182129

Token 78: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.037114132195711136
    2. '0' → logprob: -3.662114143371582
    3. '()' → logprob: -4.537114143371582
    4. '('' → logprob: -10.662114143371582
    5. ' (' → logprob: -11.412114143371582
    6. '("' → logprob: -11.412114143371582
    7. ' ' → logprob: -13.412114143371582
    8. '(
' → logprob: -14.412114143371582
    9. ' ()' → logprob: -14.662114143371582
    10. '()(' → logprob: -14.662114143371582

Token 79: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0005097838002257049
    2. '"' → logprob: -7.625509738922119
    3. ''' → logprob: -11.250510215759277
    4. ' ' → logprob: -12.250510215759277
    5. ')' → logprob: -12.875510215759277
    6. '(' → logprob: -14.250510215759277
    7. '`' → logprob: -15.625510215759277
    8. '")' → logprob: -15.813010215759277
    9. '   ' → logprob: -16.00050926208496
    10. '00' → logprob: -16.68800926208496

Token 80: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -9.088346359931165e-07
    2. ')
' → logprob: -14.125000953674316
    3. '))' → logprob: -16.75
    4. ' )' → logprob: -17.0
    5. '()' → logprob: -17.625
    6. '')' → logprob: -18.75
    7. ')`' → logprob: -18.75
    8. ')")' → logprob: -18.75
    9. ')

' → logprob: -18.875
    10. '),' → logprob: -19.0

Token 81: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -6.64708495605737e-05
    2. '```' → logprob: -10.000066757202148
    3. '<|end|>' → logprob: -11.875066757202148
    4. '\' → logprob: -12.250066757202148
    5. ' def' → logprob: -12.500066757202148
    6. '

' → logprob: -13.500066757202148
    7. '
' → logprob: -13.625066757202148
    8. 'ndef' → logprob: -14.375066757202148
    9. '\n' → logprob: -14.625066757202148
    10. '(def' → logprob: -14.750066757202148

Token 82: ' compute' (ID: 23864)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.17682962119579315
    2. ' print' → logprob: -2.3018295764923096
    3. 'print' → logprob: -3.1768295764923096
    4. 'main' → logprob: -3.9268295764923096
    5. '_main' → logprob: -8.30182933807373
    6. 'def' → logprob: -8.55182933807373
    7. ' def' → logprob: -9.30182933807373
    8. ' ' → logprob: -11.30182933807373
    9. '_print' → logprob: -11.67682933807373
    10. '_' → logprob: -11.92682933807373

Token 83: '_difference' (ID: 123771)
  Prédit: '_result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_result' → logprob: -0.6677391529083252
    2. '_answer' → logprob: -2.167739152908325
    3. '_' → logprob: -2.417739152908325
    4. '_sum' → logprob: -3.042739152908325
    5. '_max' → logprob: -3.042739152908325
    6. '_a' → logprob: -3.167739152908325
    7. '_ans' → logprob: -3.542739152908325
    8. '_b' → logprob: -3.917739152908325
    9. '_value' → logprob: -4.417738914489746
    10. '_c' → logprob: -4.792738914489746

Token 84: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.0017219497822225094
    2. '(' → logprob: -6.3767218589782715
    3. '(b' → logprob: -11.12672233581543
    4. '((' → logprob: -13.62672233581543
    5. '():' → logprob: -13.75172233581543
    6. ' (' → logprob: -13.87672233581543
    7. '(
' → logprob: -13.87672233581543
    8. 'def' → logprob: -14.87672233581543
    9. 'a' → logprob: -16.25172233581543
    10. '```' → logprob: -16.50172233581543

Token 85: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0005271765403449535
    2. ',b' → logprob: -8.250527381896973
    3. ' ,' → logprob: -8.250527381896973
    4. '):' → logprob: -13.625527381896973
    5. '-' → logprob: -14.375527381896973
    6. ')' → logprob: -14.375527381896973
    7. ',
' → logprob: -14.625527381896973
    8. ',d' → logprob: -14.750527381896973
    9. ',a' → logprob: -14.875527381896973
    10. ' -' → logprob: -15.000527381896973

Token 86: ' double' (ID: 3503)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.03153126314282417
    2. 'double' → logprob: -4.28153133392334
    3. ' b' → logprob: -4.40653133392334
    4. 'compute' → logprob: -6.28153133392334
    5. ' double' → logprob: -7.03153133392334
    6. '0' → logprob: -7.53153133392334
    7. ')' → logprob: -7.90653133392334
    8. 'def' → logprob: -8.15653133392334
    9. ' ' → logprob: -8.28153133392334
    10. 'a' → logprob: -8.65653133392334

Token 87: '_b' (ID: 1535)
  Prédit: '_b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_b' → logprob: -0.00019579214858822525
    2. 'b' → logprob: -8.625195503234863
    3. ')_' → logprob: -12.750195503234863
    4. '_' → logprob: -12.875195503234863
    5. ')' → logprob: -13.375195503234863
    6. '_a' → logprob: -13.500195503234863
    7. ' _' → logprob: -13.500195503234863
    8. 'def' → logprob: -13.625195503234863
    9. '   ' → logprob: -13.875195503234863
    10. '```' → logprob: -14.000195503234863

Token 88: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.004106065724045038
    2. '):
' → logprob: -5.504106044769287
    3. ')' → logprob: -11.129106521606445
    4. ' ):' → logprob: -12.254106521606445
    5. '):
' → logprob: -12.504106521606445
    6. '   ' → logprob: -12.879106521606445
    7. ':' → logprob: -14.004106521606445
    8. '):

' → logprob: -14.629106521606445
    9. ' ' → logprob: -15.129106521606445
    10. ',' → logprob: -16.504106521606445

Token 89: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09720630198717117
    2. 'double' → logprob: -2.5972063541412354
    3. 'return' → logprob: -4.097206115722656
    4. ' double' → logprob: -6.972206115722656
    5. ' return' → logprob: -7.597206115722656
    6. 'def' → logprob: -10.097206115722656
    7. ' ' → logprob: -11.222206115722656
    8. '	return' → logprob: -11.972206115722656
    9. 'abs' → logprob: -12.097206115722656
    10. '	double' → logprob: -12.347206115722656

Token 90: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.08741667866706848
    2. '   ' → logprob: -3.212416648864746
    3. 'double' → logprob: -3.462416648864746
    4. ' return' → logprob: -4.462416648864746
    5. ' double' → logprob: -7.837416648864746
    6. 'def' → logprob: -9.212416648864746
    7. 'b' → logprob: -11.087416648864746
    8. 'print' → logprob: -11.087416648864746
    9. ' ' → logprob: -11.587416648864746
    10. '	return' → logprob: -11.962416648864746

Token 91: ' a' (ID: 261)
  Prédit: 'double'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'double' → logprob: -0.05258586257696152
    2. ' double' → logprob: -3.1775858402252197
    3. 'a' → logprob: -5.052586078643799
    4. 'abs' → logprob: -6.677586078643799
    5. 'max' → logprob: -7.552586078643799
    6. ' a' → logprob: -7.927586078643799
    7. ' ' → logprob: -8.05258560180664
    8. '(double' → logprob: -8.17758560180664
    9. 'int' → logprob: -9.30258560180664
    10. '(a' → logprob: -9.55258560180664

Token 92: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.10023105144500732
    2. ' -' → logprob: -2.350231170654297
    3. ' ' → logprob: -11.225231170654297
    4. ' ' → logprob: -12.725231170654297
    5. '-double' → logprob: -12.725231170654297
    6. '-
' → logprob: -13.350231170654297
    7. '-b' → logprob: -14.600231170654297
    8. ' -
' → logprob: -14.725231170654297
    9. '-ex' → logprob: -15.350231170654297
    10. '-int' → logprob: -15.350231170654297

Token 93: ' double' (ID: 3503)
  Prédit: 'double'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'double' → logprob: -0.014164566993713379
    2. ' double' → logprob: -4.264164447784424
    3. '2' → logprob: -14.514164924621582
    4. '	double' → logprob: -15.639164924621582
    5. '(double' → logprob: -15.889164924621582
    6. '   ' → logprob: -16.014163970947266
    7. ' ' → logprob: -16.014163970947266
    8. 'b' → logprob: -17.639163970947266
    9. 'dbl' → logprob: -18.014163970947266
    10. 'd' → logprob: -18.514163970947266

Token 94: '_b' (ID: 1535)
  Prédit: '_b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_b' → logprob: -0.00010807292710524052
    2. 'b' → logprob: -9.750107765197754
    3. '_' → logprob: -10.000107765197754
    4. ' _' → logprob: -13.375107765197754
    5. '_a' → logprob: -14.625107765197754
    6. '_p' → logprob: -15.000107765197754
    7. 'B' → logprob: -15.250107765197754
    8. '_r' → logprob: -15.250107765197754
    9. '_pb' → logprob: -15.750107765197754
    10. ' ' → logprob: -16.12510871887207

Token 95: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.00036561701563186944
    2. '<|end|>' → logprob: -9.125365257263184
    3. '

' → logprob: -9.625365257263184
    4. '```' → logprob: -9.750365257263184
    5. '()

' → logprob: -10.125365257263184
    6. '()' → logprob: -10.500365257263184
    7. '0' → logprob: -10.875365257263184
    8. '(' → logprob: -11.375365257263184
    9. '\' → logprob: -11.750365257263184
    10. '<|end|>' → logprob: -11.750365257263184

Token 96: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -1.5451681974809617e-05
    2. 'if' → logprob: -11.500015258789062
    3. '```' → logprob: -12.500015258789062
    4. 'a' → logprob: -14.375015258789062
    5. ' def' → logprob: -14.625015258789062
    6. '
' → logprob: -15.125015258789062
    7. 'print' → logprob: -16.750015258789062
    8. '``' → logprob: -17.375015258789062
    9. '0' → logprob: -17.500015258789062
    10. '    
' → logprob: -17.500015258789062

Token 97: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.2652672529220581
    2. 'main' → logprob: -1.515267252922058
    3. ' main' → logprob: -5.015267372131348
    4. ' print' → logprob: -6.015267372131348
    5. 'def' → logprob: -6.015267372131348
    6. 'compute' → logprob: -6.890267372131348
    7. 'process' → logprob: -8.640267372131348
    8. 'check' → logprob: -8.765267372131348
    9. 'solve' → logprob: -9.390267372131348
    10. 'get' → logprob: -9.390267372131348

Token 98: '_result' (ID: 11623)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.06736539304256439
    2. '(com' → logprob: -2.8173654079437256
    3. '()' → logprob: -5.9423651695251465
    4. '(-' → logprob: -6.4423651695251465
    5. '(abs' → logprob: -7.8173651695251465
    6. '_' → logprob: -8.317365646362305
    7. '((' → logprob: -9.192365646362305
    8. '(_' → logprob: -9.817365646362305
    9. '('' → logprob: -10.067365646362305
    10. '(diff' → logprob: -10.067365646362305

Token 99: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.010097911581397057
    2. '(com' → logprob: -5.135097980499268
    3. '()' → logprob: -5.760097980499268
    4. '(a' → logprob: -7.385097980499268
    5. '(result' → logprob: -9.38509750366211
    6. '(diff' → logprob: -9.63509750366211
    7. '((' → logprob: -9.76009750366211
    8. '(print' → logprob: -9.88509750366211
    9. '(def' → logprob: -10.13509750366211
    10. ' (' → logprob: -10.76009750366211

Token 100: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.01237261388450861
    2. ')' → logprob: -5.1373724937438965
    3. '):
' → logprob: -5.2623724937438965
    4. '():' → logprob: -7.2623724937438965
    5. '()' → logprob: -8.387372970581055
    6. '(result' → logprob: -9.387372970581055
    7. '():
' → logprob: -9.387372970581055
    8. ' ):' → logprob: -9.512372970581055
    9. '   ' → logprob: -10.137372970581055
    10. '(' → logprob: -11.012372970581055

Token 101: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04738659784197807
    2. ' print' → logprob: -3.547386646270752
    3. 'print' → logprob: -4.047386646270752
    4. '(print' → logprob: -12.047386169433594
    5. '```' → logprob: -12.297386169433594
    6. '(' → logprob: -13.422386169433594
    7. '	print' → logprob: -13.922386169433594
    8. '       ' → logprob: -14.672386169433594
    9. '    ' → logprob: -16.297386169433594
    10. ' ' → logprob: -16.547386169433594

Token 102: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.00071553117595613
    2. ' print' → logprob: -7.250715732574463
    3. '   ' → logprob: -12.125715255737305
    4. '```' → logprob: -16.000715255737305
    5. 'def' → logprob: -18.000715255737305
    6. 'if' → logprob: -18.125715255737305
    7. '(print' → logprob: -18.250715255737305
    8. '	print' → logprob: -18.875715255737305
    9. '``' → logprob: -20.750715255737305
    10. '(' → logprob: -20.875715255737305

Token 103: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.0005547016044147313
    2. '(' → logprob: -7.50055456161499
    3. 'result' → logprob: -13.750555038452148
    4. ' (' → logprob: -15.000555038452148
    5. '(abs' → logprob: -16.12555503845215
    6. '(results' → logprob: -17.37555503845215
    7. '((' → logprob: -17.62555503845215
    8. '=result' → logprob: -17.75055503845215
    9. ',result' → logprob: -17.87555503845215
    10. '(res' → logprob: -18.12555503845215

Token 104: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.128163257315464e-07
    2. ')
' → logprob: -15.625
    3. ' )' → logprob: -17.5
    4. '))' → logprob: -17.75
    5. '()' → logprob: -17.875
    6. '())' → logprob: -18.5
    7. ')

' → logprob: -19.0
    8. ')`' → logprob: -19.375
    9. '')' → logprob: -20.375
    10. '),' → logprob: -20.375

Token 105: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.004194979090243578
    2. 'if' → logprob: -5.504195213317871
    3. 'a' → logprob: -9.379195213317871
    4. 'for' → logprob: -10.754195213317871
    5. 'input' → logprob: -11.879195213317871
    6. 'parsed' → logprob: -12.754195213317871
    7. '```' → logprob: -14.379195213317871
    8. ' def' → logprob: -15.629195213317871
    9. '#' → logprob: -16.879194259643555
    10. 'try' → logprob: -17.004194259643555

Token 106: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.10025391727685928
    2. ' main' → logprob: -2.3502538204193115
    3. 'def' → logprob: -9.97525405883789
    4. '_main' → logprob: -14.97525405883789
    5. ' def' → logprob: -15.47525405883789
    6. 'if' → logprob: -16.22525405883789
    7. '	main' → logprob: -17.10025405883789
    8. 'run' → logprob: -17.60025405883789
    9. '__' → logprob: -17.60025405883789
    10. 'solve' → logprob: -17.85025405883789

Token 107: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -4.620622712536715e-05
    2. ' ():' → logprob: -10.000045776367188
    3. '():
' → logprob: -14.625045776367188
    4. '_' → logprob: -15.625045776367188
    5. '()' → logprob: -16.000045776367188
    6. '(' → logprob: -18.250045776367188
    7. '():
' → logprob: -19.750045776367188
    8. '(":' → logprob: -20.000045776367188
    9. '(:' → logprob: -20.250045776367188
    10. '_:' → logprob: -21.875045776367188

Token 108: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07707569748163223
    2. 'input' → logprob: -3.077075719833374
    3. ' input' → logprob: -3.577075719833374
    4. '(input' → logprob: -9.952075958251953
    5. '
' → logprob: -10.577075958251953
    6. '    
' → logprob: -10.952075958251953
    7. '	input' → logprob: -11.577075958251953
    8. '_input' → logprob: -11.702075958251953
    9. '```' → logprob: -12.577075958251953
    10. 'def' → logprob: -13.077075958251953

Token 109: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' (adapté à ' input') → logprob: -0.35072076320648193
    2. ' input' → logprob: -1.225720763206482
    3. '   ' → logprob: -6.3507208824157715
    4. ' raw' → logprob: -9.225720405578613
    5. ' inp' → logprob: -9.475720405578613
    6. 'inp' → logprob: -9.475720405578613
    7. 'raw' → logprob: -9.600720405578613
    8. 'parsed' → logprob: -9.850720405578613
    9. 'user' → logprob: -10.100720405578613
    10. 'inputs' → logprob: -10.850720405578613

Token 110: '_str' (ID: 6182)
  Prédit: '_str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_str' → logprob: -8.923874702304602e-05
    2. '_' → logprob: -9.500089645385742
    3. '_string' → logprob: -11.750089645385742
    4. '_line' → logprob: -12.750089645385742
    5. 'str' → logprob: -13.500089645385742
    6. '_s' → logprob: -14.000089645385742
    7. '_val' → logprob: -15.125089645385742
    8. '_text' → logprob: -15.250089645385742
    9. '_data' → logprob: -15.250089645385742
    10. '_input' → logprob: -15.500089645385742

Token 111: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.023246178403496742
    2. '=' → logprob: -3.7732462882995605
    3. '=input' → logprob: -15.148245811462402
    4. '()' → logprob: -15.523245811462402
    5. ' =)' → logprob: -17.52324676513672
    6. ')' → logprob: -17.52324676513672
    7. '_' → logprob: -17.64824676513672
    8. '	' → logprob: -17.64824676513672
    9. '   ' → logprob: -17.89824676513672
    10. ',' → logprob: -18.14824676513672

Token 112: ' get' (ID: 717)
  Prédit: ' get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.47427740693092346
    2. 'get' → logprob: -0.9742773771286011
    3. 'input' → logprob: -9.09927749633789
    4. ' input' → logprob: -9.34927749633789
    5. '(get' → logprob: -13.97427749633789
    6. '   ' → logprob: -14.97427749633789
    7. '	get' → logprob: -15.09927749633789
    8. ' ' → logprob: -15.84927749633789
    9. '_get' → logprob: -17.97427749633789
    10. '  ' → logprob: -18.09927749633789

Token 113: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -1.9361264946837764e-07
    2. '_' → logprob: -16.0
    3. 'input' → logprob: -17.5
    4. '_output' → logprob: -20.0
    5. '_Input' → logprob: -20.375
    6. '_line' → logprob: -20.5
    7. '_in' → logprob: -20.75
    8. ' _' → logprob: -20.875
    9. '_inputs' → logprob: -20.875
    10. '_INPUT' → logprob: -21.625

Token 114: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -1.0087516784551553e-05
    2. '()
' → logprob: -11.62501049041748
    3. '()

' → logprob: -14.37501049041748
    4. ' ()' → logprob: -16.000009536743164
    5. '()`' → logprob: -16.125009536743164
    6. '()\' → logprob: -16.375009536743164
    7. '()"' → logprob: -17.000009536743164
    8. '()<' → logprob: -17.125009536743164
    9. '();' → logprob: -17.250009536743164
    10. '().' → logprob: -17.250009536743164

Token 115: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01236366480588913
    2. 'parsed' → logprob: -4.762363433837891
    3. ' parsed' → logprob: -5.637363433837891
    4. '
' → logprob: -9.38736343383789
    5. '(parsed' → logprob: -9.38736343383789
    6. '    
' → logprob: -12.01236343383789
    7. '```' → logprob: -12.63736343383789
    8. 'Parsed' → logprob: -14.01236343383789
    9. '   ' → logprob: -14.51236343383789
    10. '    ' → logprob: -15.13736343383789

Token 116: ' parsed' (ID: 31111)
  Prédit: ' parsed'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' parsed' → logprob: -0.523849606513977
    2. 'parsed' (adapté à ' parsed') → logprob: -0.898849606513977
    3. '   ' → logprob: -7.2738494873046875
    4. '(parsed' → logprob: -10.773849487304688
    5. 'Parsed' → logprob: -12.148849487304688
    6. 'parser' → logprob: -13.273849487304688
    7. 'parse' → logprob: -13.773849487304688
    8. ' parser' → logprob: -14.398849487304688
    9. 'par' → logprob: -14.898849487304688
    10. ' ' → logprob: -15.023849487304688

Token 117: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.1603003889322281
    2. ' =' → logprob: -1.910300374031067
    3. '_' → logprob: -10.035300254821777
    4. '(' → logprob: -10.660300254821777
    5. '(parsed' → logprob: -13.160300254821777
    6. '()' → logprob: -13.535300254821777
    7. '=input' → logprob: -13.785300254821777
    8. ')' → logprob: -14.035300254821777
    9. '_=' → logprob: -14.160300254821777
    10. '=parse' → logprob: -14.285300254821777

Token 118: ' parse' (ID: 8420)
  Prédit: 'parse'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'parse' → logprob: -0.04895305633544922
    2. ' parse' → logprob: -3.048953056335449
    3. 'iter' → logprob: -8.42395305633545
    4. '   ' → logprob: -9.17395305633545
    5. ' iter' → logprob: -10.29895305633545
    6. '(parse' → logprob: -12.54895305633545
    7. ' ' → logprob: -12.67395305633545
    8. '  ' → logprob: -13.79895305633545
    9. '	parse' → logprob: -14.17395305633545
    10. '    ' → logprob: -15.79895305633545

Token 119: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.009110135957598686
    2. '(input' → logprob: -4.759109973907471
    3. '_' → logprob: -8.259110450744629
    4. 'input' → logprob: -8.509110450744629
    5. '(' → logprob: -10.509110450744629
    6. '_(' → logprob: -13.009110450744629
    7. '```' → logprob: -13.884110450744629
    8. '_user' → logprob: -14.384110450744629
    9. '(_' → logprob: -14.634110450744629
    10. '_in' → logprob: -14.759110450744629

Token 120: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -7.576873758807778e-05
    2. '(' → logprob: -9.500075340270996
    3. ' (' → logprob: -14.125075340270996
    4. ',input' → logprob: -16.375076293945312
    5. '(str' → logprob: -17.000076293945312
    6. '(
' → logprob: -17.250076293945312
    7. '=input' → logprob: -17.375076293945312
    8. '(output' → logprob: -17.500076293945312
    9. '(user' → logprob: -18.125076293945312
    10. '```' → logprob: -18.375076293945312

Token 121: '_str' (ID: 6182)
  Prédit: '_str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_str' → logprob: -4.572941179503687e-05
    2. 'str' → logprob: -10.000045776367188
    3. ')' → logprob: -16.625045776367188
    4. 'Str' → logprob: -17.625045776367188
    5. '   ' → logprob: -18.125045776367188
    6. ')_' → logprob: -18.625045776367188
    7. '_string' → logprob: -19.000045776367188
    8. '-str' → logprob: -19.250045776367188
    9. '_STR' → logprob: -19.250045776367188
    10. '_' → logprob: -19.250045776367188

Token 122: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5762921571731567
    2. ')
' → logprob: -0.8262921571731567
    3. '   ' → logprob: -8.701292037963867
    4. '()' → logprob: -9.326292037963867
    5. ')
' → logprob: -10.326292037963867
    6. '()
' → logprob: -10.826292037963867
    7. ' )
' → logprob: -11.201292037963867
    8. '())
' → logprob: -11.201292037963867
    9. ' )' → logprob: -12.076292037963867
    10. ' ' → logprob: -12.201292037963867

Token 123: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1269986629486084
    2. 'a' → logprob: -2.1269986629486084
    3. ' a' → logprob: -9.751998901367188
    4. '    
' → logprob: -12.001998901367188
    5. 'b' → logprob: -13.376998901367188
    6. '<|end|>' → logprob: -13.626998901367188
    7. ',a' → logprob: -14.376998901367188
    8. '  ' → logprob: -14.376998901367188
    9. '_a' → logprob: -14.876998901367188
    10. ')' → logprob: -14.876998901367188

Token 124: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' (adapté à ' a') → logprob: -0.000719222822226584
    2. '   ' → logprob: -7.62571907043457
    3. ' a' → logprob: -8.37571907043457
    4. '	a' → logprob: -15.12571907043457
    5. '    
' → logprob: -16.00071907043457
    6. '  ' → logprob: -16.37571907043457
    7. ' ' → logprob: -16.37571907043457
    8. '
' → logprob: -16.50071907043457
    9. '```' → logprob: -16.87571907043457
    10. '_a' → logprob: -18.62571907043457

Token 125: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.002814505249261856
    2. '=' → logprob: -5.877814292907715
    3. ',' → logprob: -11.627814292907715
    4. ' ' → logprob: -14.502814292907715
    5. ' ,' → logprob: -16.50281524658203
    6. ')' → logprob: -17.50281524658203
    7. ' =
' → logprob: -17.75281524658203
    8. '_' → logprob: -18.87781524658203
    9. ' ' → logprob: -18.87781524658203
    10. ' =)' → logprob: -19.25281524658203

Token 126: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.25193890929222107
    2. ' get' → logprob: -1.5019389390945435
    3. '   ' → logprob: -12.001938819885254
    4. '(get' → logprob: -13.251938819885254
    5. '    ' → logprob: -14.501938819885254
    6. '	get' → logprob: -14.626938819885254
    7. ' ' → logprob: -15.501938819885254
    8. '  ' → logprob: -15.501938819885254
    9. '=get' → logprob: -15.876938819885254
    10. '[get' → logprob: -16.00193977355957

Token 127: '_a' (ID: 10852)
  Prédit: '_a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_a' → logprob: -5.512236498361744e-07
    2. '_b' → logprob: -14.625000953674316
    3. 'a' → logprob: -20.0
    4. '_' → logprob: -21.5
    5. '_an' → logprob: -24.25
    6. '(a' → logprob: -25.375
    7. '	a' → logprob: -25.375
    8. '_c' → logprob: -25.75
    9. '_e' → logprob: -25.75
    10. '   ' → logprob: -25.875

Token 128: '(parsed' (ID: 96597)
  Prédit: '(parsed'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(parsed' → logprob: 0.0
    2. 'parsed' → logprob: -17.125
    3. ' (' → logprob: -17.625
    4. '(' → logprob: -18.0
    5. '(par' → logprob: -19.375
    6. ' parsed' → logprob: -20.5
    7. '(parse' → logprob: -20.875
    8. '(decoded' → logprob: -21.75
    9. '   ' → logprob: -22.0
    10. '(parser' → logprob: -22.375

Token 129: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.25197818875312805
    2. ')
' → logprob: -1.5019781589508057
    3. '   ' → logprob: -10.376977920532227
    4. ')
' → logprob: -11.501977920532227
    5. ')

' → logprob: -12.376977920532227
    6. ' ' → logprob: -14.001977920532227
    7. ')b' → logprob: -14.251977920532227
    8. ' )
' → logprob: -15.001977920532227
    9. ')a' → logprob: -15.126977920532227
    10. ' )' → logprob: -15.126977920532227

Token 130: '   ' (ID: 271)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.004631145857274532
    2. '   ' → logprob: -5.504631042480469
    3. ' b' → logprob: -7.504631042480469
    4. '	b' → logprob: -13.379631042480469
    5. ' ' → logprob: -15.004631042480469
    6. '  ' → logprob: -16.12963104248047
    7. '    ' → logprob: -18.00463104248047
    8. '
' → logprob: -18.50463104248047
    9. ',b' → logprob: -18.62963104248047
    10. '    
' → logprob: -19.00463104248047

Token 131: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' (adapté à ' b') → logprob: -1.981667537620524e-06
    2. ' b' → logprob: -13.375001907348633
    3. '   ' → logprob: -14.875001907348633
    4. ' ' → logprob: -19.750001907348633
    5. '  ' → logprob: -20.875001907348633
    6. '	b' → logprob: -21.000001907348633
    7. '_b' → logprob: -21.750001907348633
    8. '
' → logprob: -23.500001907348633
    9. ',b' → logprob: -23.875001907348633
    10. '    
' → logprob: -24.375001907348633

Token 132: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.02975071594119072
    2. '=' → logprob: -3.5297508239746094
    3. ' ' → logprob: -15.15475082397461
    4. '=get' → logprob: -18.65475082397461
    5. '   ' → logprob: -19.02975082397461
    6. ')' → logprob: -19.15475082397461
    7. '  ' → logprob: -19.77975082397461
    8. ' =)' → logprob: -20.02975082397461
    9. '	' → logprob: -20.65475082397461
    10. '(' → logprob: -20.90475082397461

Token 133: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.20141547918319702
    2. ' get' → logprob: -1.7014155387878418
    3. '(get' → logprob: -13.451415061950684
    4. ' ' → logprob: -14.826415061950684
    5. '   ' → logprob: -15.701415061950684
    6. '	get' → logprob: -16.826416015625
    7. '.get' → logprob: -17.076416015625
    8. '  ' → logprob: -17.451416015625
    9. '=get' → logprob: -17.576416015625
    10. ')get' → logprob: -18.076416015625

Token 134: '_b' (ID: 1535)
  Prédit: '_b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_b' → logprob: -4.60414821645827e-06
    2. '(parsed' → logprob: -12.375004768371582
    3. 'parsed' → logprob: -15.750004768371582
    4. '_a' → logprob: -16.000003814697266
    5. 'b' → logprob: -16.500003814697266
    6. ' parsed' → logprob: -20.375003814697266
    7. '_B' → logprob: -21.500003814697266
    8. '_par' → logprob: -22.000003814697266
    9. '_' → logprob: -22.000003814697266
    10. '(parse' → logprob: -22.125003814697266

Token 135: '(parsed' (ID: 96597)
  Prédit: '(parsed'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(parsed' → logprob: -2.45848218582978e-06
    2. '(' → logprob: -13.37500286102295
    3. 'parsed' → logprob: -14.62500286102295
    4. ' parsed' → logprob: -15.50000286102295
    5. ' (' → logprob: -16.000001907348633
    6. '(parse' → logprob: -18.625001907348633
    7. '(par' → logprob: -18.750001907348633
    8. '(parser' → logprob: -18.875001907348633
    9. '(decoded' → logprob: -20.625001907348633
    10. 'Parsed' → logprob: -21.000001907348633

Token 136: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6932559013366699
    2. ')
' → logprob: -0.6932559013366699
    3. '   ' → logprob: -9.193256378173828
    4. ')
' → logprob: -12.693256378173828
    5. ' )
' → logprob: -13.068256378173828
    6. ' )' → logprob: -14.443256378173828
    7. ')

' → logprob: -14.443256378173828
    8. ' ' → logprob: -15.568256378173828
    9. '()' → logprob: -16.193256378173828
    10. '
' → logprob: -16.318256378173828

Token 137: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.029538018628954887
    2. ' double' → logprob: -3.9045379161834717
    3. 'double' → logprob: -4.779538154602051
    4. ' ' → logprob: -7.654538154602051
    5. '
' → logprob: -10.65453815460205
    6. '    
' → logprob: -10.90453815460205
    7. '	double' → logprob: -11.65453815460205
    8. '  ' → logprob: -11.77953815460205
    9. ' twice' → logprob: -12.52953815460205
    10. ')' → logprob: -12.65453815460205

Token 138: ' double' (ID: 3503)
  Prédit: 'double'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'double' (adapté à ' double') → logprob: -0.0002569289645180106
    2. ' double' → logprob: -8.375256538391113
    3. '   ' → logprob: -10.625256538391113
    4. 'tw' → logprob: -14.000256538391113
    5. 'dbl' → logprob: -15.000256538391113
    6. '```' → logprob: -15.250256538391113
    7. 'd' → logprob: -15.375256538391113
    8. '	double' → logprob: -16.00025749206543
    9. ' ' → logprob: -16.12525749206543
    10. 'b' → logprob: -16.50025749206543

Token 139: '_b' (ID: 1535)
  Prédit: '_b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_b' → logprob: -6.511406809295295e-06
    2. '_' → logprob: -12.000006675720215
    3. '_double' → logprob: -15.875006675720215
    4. '_a' → logprob: -16.7500057220459
    5. '_B' → logprob: -16.8750057220459
    6. 'b' → logprob: -16.8750057220459
    7. '=_' → logprob: -18.3750057220459
    8. '_tw' → logprob: -19.0000057220459
    9. '__' → logprob: -19.2500057220459
    10. '```' → logprob: -19.7500057220459

Token 140: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0067156096920371056
    2. '=' → logprob: -5.006715774536133
    3. ' ' → logprob: -16.256715774536133
    4. ')' → logprob: -16.381715774536133
    5. '(' → logprob: -17.506715774536133
    6. ' ' → logprob: -19.256715774536133
    7. '   ' → logprob: -19.631715774536133
    8. '()' → logprob: -19.756715774536133
    9. '=b' → logprob: -20.006715774536133
    10. ',' → logprob: -20.381715774536133

Token 141: ' compute' (ID: 23864)
  Prédit: ' compute'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' compute' → logprob: -0.3868716359138489
    2. 'compute' → logprob: -1.136871576309204
    3. ' ' → logprob: -15.261871337890625
    4. '_compute' → logprob: -15.886871337890625
    5. '.compute' → logprob: -16.511871337890625
    6. 'comput' → logprob: -16.636871337890625
    7. 'computer' → logprob: -17.136871337890625
    8. '   ' → logprob: -17.386871337890625
    9. ' computer' → logprob: -17.886871337890625
    10. 'computed' → logprob: -18.386871337890625

Token 142: '_tw' (ID: 139926)
  Prédit: '_tw'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_tw' → logprob: 0.0
    2. 'tw' → logprob: -16.75
    3. '_double' → logprob: -19.25
    4. '_two' → logprob: -22.375
    5. '_thr' → logprob: -22.875
    6. 'Tw' → logprob: -23.125
    7. '_' → logprob: -23.5
    8. '_once' → logprob: -24.125
    9. '_b' → logprob: -24.125
    10. '.tw' → logprob: -24.5

Token 143: 'ice' (ID: 603)
  Prédit: 'ice'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ice' → logprob: -0.0008142740116454661
    2. 'o' → logprob: -7.125814437866211
    3. 'b' → logprob: -12.500814437866211
    4. 'ce' → logprob: -12.625814437866211
    5. 'e' → logprob: -14.250814437866211
    6. 'i' → logprob: -14.375814437866211
    7. 'ise' → logprob: -14.500814437866211
    8. 'ic' → logprob: -15.000814437866211
    9. 'oce' → logprob: -15.625814437866211
    10. '_b' → logprob: -15.875814437866211

Token 144: '_b' (ID: 1535)
  Prédit: '_b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_b' → logprob: -1.580929347255733e-05
    2. 'b' → logprob: -11.125016212463379
    3. '(b' → logprob: -14.000016212463379
    4. '_' → logprob: -16.375015258789062
    5. 'double' → logprob: -17.000015258789062
    6. '_double' → logprob: -17.125015258789062
    7. '_B' → logprob: -17.750015258789062
    8. '```' → logprob: -18.000015258789062
    9. '(_' → logprob: -18.125015258789062
    10. '(' → logprob: -18.750015258789062

Token 145: '(b' (ID: 3229)
  Prédit: '(b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(b' → logprob: -9.13388703338569e-06
    2. '(' → logprob: -11.625009536743164
    3. 'b' → logprob: -15.625009536743164
    4. ' (' → logprob: -17.750009536743164
    5. '	b' → logprob: -20.250009536743164
    6. '(
' → logprob: -20.250009536743164
    7. '(B' → logprob: -22.000009536743164
    8. '(

' → logprob: -22.750009536743164
    9. ')' → logprob: -22.875009536743164
    10. ' ' → logprob: -23.000009536743164

Token 146: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.584861744660884e-05
    2. ')
' → logprob: -10.000045776367188
    3. ' )' → logprob: -15.500045776367188
    4. '   ' → logprob: -16.375045776367188
    5. ')

' → logprob: -17.500045776367188
    6. '),' → logprob: -19.000045776367188
    7. ')`' → logprob: -19.000045776367188
    8. '))' → logprob: -19.125045776367188
    9. ' ' → logprob: -19.375045776367188
    10. ')
' → logprob: -19.500045776367188

Token 147: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.012122844345867634
    2. '
' → logprob: -4.762122631072998
    3. 'if' → logprob: -6.012122631072998
    4. ' if' → logprob: -7.387122631072998
    5. '    
' → logprob: -7.887122631072998
    6. '<|end|>' → logprob: -10.512123107910156
    7. '  
' → logprob: -11.887123107910156
    8. '```' → logprob: -12.012123107910156
    9. ')' → logprob: -12.762123107910156
    10. '	if' → logprob: -12.887123107910156

Token 148: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.002732835942879319
    2. ' if' → logprob: -6.252732753753662
    3. '   ' → logprob: -7.127732753753662
    4. 'condition' → logprob: -14.62773323059082
    5. 'result' → logprob: -14.75273323059082
    6. 'a' → logprob: -15.37773323059082
    7. ' ' → logprob: -15.87773323059082
    8. '	if' → logprob: -16.50273323059082
    9. '```' → logprob: -16.50273323059082
    10. '    
' → logprob: -17.25273323059082

Token 149: ' check' (ID: 2371)
  Prédit: ' check'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' check' → logprob: -0.0001214237418025732
    2. 'check' → logprob: -9.250121116638184
    3. ' not' → logprob: -10.875121116638184
    4. '(check' → logprob: -12.125121116638184
    5. '	check' → logprob: -14.500121116638184
    6. ' ' → logprob: -15.750121116638184
    7. ' ' → logprob: -16.6251220703125
    8. '_check' → logprob: -16.8751220703125
    9. '    ' → logprob: -17.3751220703125
    10. ' (' → logprob: -17.3751220703125

Token 150: '_condition' (ID: 64948)
  Prédit: '_condition'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_condition' → logprob: 0.0
    2. 'condition' → logprob: -18.375
    3. '_cond' → logprob: -20.375
    4. '_conditions' → logprob: -20.5
    5. '(condition' → logprob: -22.25
    6. '_' → logprob: -23.0
    7. 'Condition' → logprob: -23.125
    8. '_function' → logprob: -23.5
    9. ' condition' → logprob: -23.625
    10. '_constraint' → logprob: -24.25

Token 151: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -2.816093228830141e-06
    2. '(' → logprob: -12.87500286102295
    3. ' (' → logprob: -15.12500286102295
    4. '(
' → logprob: -18.875001907348633
    5. '(A' → logprob: -20.500001907348633
    6. 'a' → logprob: -21.000001907348633
    7. '   ' → logprob: -21.500001907348633
    8. ' ' → logprob: -21.625001907348633
    9. '(s' → logprob: -22.000001907348633
    10. '(i' → logprob: -22.375001907348633

Token 152: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.000329386442899704
    2. ' ,' → logprob: -8.50032901763916
    3. ',double' → logprob: -9.00032901763916
    4. ',
' → logprob: -13.62532901763916
    5. ',d' → logprob: -14.87532901763916
    6. ',

' → logprob: -15.00032901763916
    7. ' ' → logprob: -15.62532901763916
    8. ')' → logprob: -16.125329971313477
    9. 'double' → logprob: -16.250329971313477
    10. '   ' → logprob: -16.625329971313477

Token 153: ' double' (ID: 3503)
  Prédit: 'double'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'double' → logprob: -0.018154039978981018
    2. ' double' → logprob: -4.018154144287109
    3. '(double' → logprob: -13.39315414428711
    4. '   ' → logprob: -13.89315414428711
    5. ' ' → logprob: -14.01815414428711
    6. ')' → logprob: -14.64315414428711
    7. '	double' → logprob: -16.01815414428711
    8. ',double' → logprob: -16.76815414428711
    9. '  ' → logprob: -17.39315414428711
    10. '    ' → logprob: -17.76815414428711

Token 154: '_b' (ID: 1535)
  Prédit: '_b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_b' → logprob: -0.00014072739577386528
    2. 'b' → logprob: -8.875141143798828
    3. 'double' → logprob: -14.125141143798828
    4. 's' → logprob: -17.500141143798828
    5. '(b' → logprob: -17.500141143798828
    6. 'zero' → logprob: -17.750141143798828
    7. 'B' → logprob: -17.875141143798828
    8. ')' → logprob: -18.125141143798828
    9. '	b' → logprob: -18.875141143798828
    10. '_' → logprob: -19.375141143798828

Token 155: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0003380846756044775
    2. '):
' → logprob: -8.625338554382324
    3. ' ):' → logprob: -8.875338554382324
    4. ':' → logprob: -11.625338554382324
    5. ')' → logprob: -12.000338554382324
    6. '   ' → logprob: -13.250338554382324
    7. '():' → logprob: -14.625338554382324
    8. ' ' → logprob: -14.750338554382324
    9. ')):' → logprob: -15.750338554382324
    10. '=' → logprob: -16.000337600708008

Token 156: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0005904443096369505
    2. ':' → logprob: -7.8755903244018555
    3. '   ' → logprob: -9.000590324401855
    4. ':
' → logprob: -10.125590324401855
    5. 'print' → logprob: -10.375590324401855
    6. ' print' → logprob: -12.125590324401855
    7. '
' → logprob: -12.750590324401855
    8. '```' → logprob: -13.125590324401855
    9. ',' → logprob: -13.625590324401855
    10. '):
' → logprob: -14.000590324401855

Token 157: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.132097989320755
    2. '   ' → logprob: -2.1320979595184326
    3. ' print' → logprob: -5.382098197937012
    4. '       ' → logprob: -7.507098197937012
    5. '	print' → logprob: -11.757098197937012
    6. '           ' → logprob: -14.507098197937012
    7. '.print' → logprob: -14.757098197937012
    8. '(print' → logprob: -15.257098197937012
    9. '_print' → logprob: -16.507097244262695
    10. '    ' → logprob: -16.507097244262695

Token 158: '_zero' (ID: 53468)
  Prédit: '_zero'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_zero' → logprob: -2.236549335066229e-05
    2. '0' → logprob: -11.000021934509277
    3. '_' → logprob: -12.375021934509277
    4. '(' → logprob: -14.500021934509277
    5. 'zero' → logprob: -14.500021934509277
    6. '```' → logprob: -15.875021934509277
    7. '(_' → logprob: -16.375022888183594
    8. '_ZERO' → logprob: -17.125022888183594
    9. '__' → logprob: -17.250022888183594
    10. ' _' → logprob: -17.625022888183594

Token 159: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.001506409258581698
    2. '()
' → logprob: -6.501506328582764
    3. '()

' → logprob: -13.126506805419922
    4. '()`' → logprob: -14.126506805419922
    5. ' ()' → logprob: -14.626506805419922
    6. '()"' → logprob: -15.126506805419922
    7. '()
' → logprob: -15.626506805419922
    8. '(' → logprob: -15.876506805419922
    9. '()\' → logprob: -16.001506805419922
    10. '())' → logprob: -17.126506805419922

Token 160: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0024999137967824936
    2. 'else' → logprob: -6.002500057220459
    3. ' else' → logprob: -10.6274995803833
    4. '```' → logprob: -17.252500534057617
    5. '       ' → logprob: -17.502500534057617
    6. '    
' → logprob: -18.377500534057617
    7. '	else' → logprob: -19.377500534057617
    8. 'elif' → logprob: -19.627500534057617
    9. '   ' → logprob: -20.627500534057617
    10. '  ' → logprob: -20.627500534057617

Token 161: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.5767845511436462
    2. '   ' → logprob: -0.8267845511436462
    3. ' else' → logprob: -7.076784610748291
    4. '	else' → logprob: -16.826784133911133
    5. '       ' → logprob: -17.326784133911133
    6. '```' → logprob: -17.451784133911133
    7. 'elif' → logprob: -17.576784133911133
    8. ' ' → logprob: -17.826784133911133
    9. '    
' → logprob: -18.076784133911133
    10. '
' → logprob: -18.701784133911133

Token 162: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.48051828145980835
    2. ':
' → logprob: -0.9805182814598083
    3. '():
' → logprob: -5.480518341064453
    4. '       ' → logprob: -7.105518341064453
    5. '   ' → logprob: -7.480518341064453
    6. '():' → logprob: -8.230518341064453
    7. '(' → logprob: -8.230518341064453
    8. ' :
' → logprob: -8.480518341064453
    9. '()' → logprob: -10.355518341064453
    10. '    ' → logprob: -11.230518341064453

Token 163: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00044592362246476114
    2. 'result' → logprob: -8.250446319580078
    3. ' result' → logprob: -8.625446319580078
    4. '   ' → logprob: -12.375446319580078
    5. '```' → logprob: -15.500446319580078
    6. '
' → logprob: -15.875446319580078
    7. '           ' → logprob: -16.000446319580078
    8. '(result' → logprob: -16.250446319580078
    9. '      ' → logprob: -16.250446319580078
    10. '     ' → logprob: -16.750446319580078

Token 164: ' diff' (ID: 8868)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.00660962238907814
    2. ' result' → logprob: -5.7566094398498535
    3. '       ' → logprob: -5.8816094398498535
    4. '   ' → logprob: -8.006609916687012
    5. 'print' → logprob: -8.131609916687012
    6. 'difference' → logprob: -12.506609916687012
    7. '           ' → logprob: -13.506609916687012
    8. 'diff' (adapté à ' diff') → logprob: -13.881609916687012
    9. 'res' → logprob: -14.131609916687012
    10. '	result' → logprob: -14.756609916687012

Token 165: ' =' (ID: 314)
  Prédit: 'er'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.28712335228919983
    2. ' =' → logprob: -1.5371233224868774
    3. '=' → logprob: -3.412123441696167
    4. 'rence' → logprob: -7.287123203277588
    5. 'ference' → logprob: -7.412123203277588
    6. 'érence' → logprob: -9.412123680114746
    7. 'eren' → logprob: -9.787123680114746
    8. 'ere' → logprob: -10.287123680114746
    9. '_result' → logprob: -10.287123680114746
    10. 'ence' → logprob: -10.787123680114746

Token 166: ' compute' (ID: 23864)
  Prédit: 'compute'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'compute' → logprob: -0.014163628220558167
    2. ' compute' → logprob: -4.264163494110107
    3. '   ' → logprob: -16.139163970947266
    4. '.compute' → logprob: -17.764163970947266
    5. 'computer' → logprob: -18.639163970947266
    6. 'print' → logprob: -19.014163970947266
    7. 'comput' → logprob: -19.014163970947266
    8. ' ' → logprob: -19.639163970947266
    9. '_compute' → logprob: -19.764163970947266
    10. '    ' → logprob: -20.639163970947266

Token 167: '_difference' (ID: 123771)
  Prédit: '_difference'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_difference' → logprob: -4.842555426876061e-06
    2. 'difference' → logprob: -12.250004768371582
    3. 'ifference' → logprob: -18.5000057220459
    4. ' difference' → logprob: -19.7500057220459
    5. '_result' → logprob: -20.2500057220459
    6. 'Difference' → logprob: -20.3750057220459
    7. '_diff' → logprob: -20.7500057220459
    8. '_distance' → logprob: -21.8750057220459
    9. '_' → logprob: -23.7500057220459
    10. '差' → logprob: -23.7500057220459

Token 168: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -2.7729658540920354e-05
    2. '(' → logprob: -10.500027656555176
    3. '(
' → logprob: -16.250028610229492
    4. 'a' → logprob: -17.000028610229492
    5. ' (' → logprob: -17.875028610229492
    6. '   ' → logprob: -19.000028610229492
    7. '```' → logprob: -19.625028610229492
    8. '(A' → logprob: -20.625028610229492
    9. '(ai' → logprob: -21.375028610229492
    10. '(

' → logprob: -21.750028610229492

Token 169: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.059118419885635376
    2. ',double' → logprob: -2.9341185092926025
    3. '(double' → logprob: -5.934118270874023
    4. '(' → logprob: -6.809118270874023
    5. ' ,' → logprob: -7.809118270874023
    6. 'double' → logprob: -10.184118270874023
    7. ' double' → logprob: -11.059118270874023
    8. ',d' → logprob: -12.434118270874023
    9. ')' → logprob: -12.934118270874023
    10. ' ' → logprob: -13.059118270874023

Token 170: ' double' (ID: 3503)
  Prédit: 'double'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'double' → logprob: -0.011048762127757072
    2. ' double' → logprob: -4.511048793792725
    3. '(double' → logprob: -15.011048316955566
    4. '   ' → logprob: -15.136048316955566
    5. ' ' → logprob: -15.511048316955566
    6. '       ' → logprob: -18.136049270629883
    7. '	double' → logprob: -18.386049270629883
    8. ',double' → logprob: -18.511049270629883
    9. '  ' → logprob: -19.011049270629883
    10. '_double' → logprob: -19.136049270629883

Token 171: '_b' (ID: 1535)
  Prédit: '_b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_b' → logprob: -2.45848218582978e-06
    2. 'b' → logprob: -13.12500286102295
    3. '-b' → logprob: -16.250001907348633
    4. '   ' → logprob: -16.750001907348633
    5. ')' → logprob: -17.500001907348633
    6. '_' → logprob: -17.625001907348633
    7. 's' → logprob: -17.625001907348633
    8. '```' → logprob: -17.625001907348633
    9. 'B' → logprob: -18.125001907348633
    10. '	b' → logprob: -18.250001907348633

Token 172: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.03002365492284298
    2. ')' → logprob: -3.5300235748291016
    3. '       ' → logprob: -8.655023574829102
    4. ')
' → logprob: -9.280023574829102
    5. '   ' → logprob: -12.280023574829102
    6. ')

' → logprob: -14.280023574829102
    7. ')`
' → logprob: -16.2800235748291
    8. '           ' → logprob: -16.5300235748291
    9. 'diff' → logprob: -17.1550235748291
    10. '(diff' → logprob: -17.1550235748291

Token 173: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0006446453626267612
    2. 'print' → logprob: -7.375644683837891
    3. '   ' → logprob: -11.00064468383789
    4. ' print' → logprob: -14.87564468383789
    5. '(print' → logprob: -14.87564468383789
    6. '      ' → logprob: -15.62564468383789
    7. '(' → logprob: -15.75064468383789
    8. '           ' → logprob: -15.87564468383789
    9. '```' → logprob: -16.12564468383789
    10. '     ' → logprob: -17.37564468383789

Token 174: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.003180094063282013
    2. ' print' → logprob: -5.753180027008057
    3. '       ' → logprob: -13.253180503845215
    4. '   ' → logprob: -14.503180503845215
    5. '(print' → logprob: -16.3781795501709
    6. ' ' → logprob: -17.0031795501709
    7. '	print' → logprob: -18.2531795501709
    8. '.print' → logprob: -18.7531795501709
    9. '_print' → logprob: -20.1281795501709
    10. '  ' → logprob: -20.2531795501709

Token 175: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -1.6240566083070007e-06
    2. 'result' → logprob: -13.500001907348633
    3. '_results' → logprob: -15.750001907348633
    4. '```' → logprob: -18.000001907348633
    5. '_' → logprob: -18.875001907348633
    6. '"_' → logprob: -19.625001907348633
    7. '(_' → logprob: -19.875001907348633
    8. '_RESULT' → logprob: -20.000001907348633
    9. '(result' → logprob: -20.000001907348633
    10. 'Result' → logprob: -20.000001907348633

Token 176: '(diff' (ID: 84195)
  Prédit: '(diff'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(diff' → logprob: -0.0007114782347343862
    2. '(' → logprob: -7.250711441040039
    3. ' (' → logprob: -13.500711441040039
    4. '(
' → logprob: -17.37571144104004
    5. 'diff' → logprob: -17.50071144104004
    6. '	diff' → logprob: -19.12571144104004
    7. '(di' → logprob: -19.12571144104004
    8. ' diff' → logprob: -19.25071144104004
    9. '(dist' → logprob: -19.25071144104004
    10. '((' → logprob: -19.25071144104004

Token 177: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.1008713702030946e-06
    2. ')
' → logprob: -13.750001907348633
    3. '()' → logprob: -14.750001907348633
    4. '())' → logprob: -14.875001907348633
    5. ' )' → logprob: -16.375001907348633
    6. '))' → logprob: -16.625001907348633
    7. '   ' → logprob: -16.875001907348633
    8. ')))' → logprob: -19.500001907348633
    9. ')

' → logprob: -19.625001907348633
    10. ')#' → logprob: -19.750001907348633

Token 178: 'main' (ID: 7731)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.04024292156100273
    2. '\n' → logprob: -3.790242910385132
    3. '
' → logprob: -4.415243148803711
    4. 'main' → logprob: -5.540243148803711
    5. '\' → logprob: -7.665243148803711
    6. ' if' → logprob: -8.915243148803711
    7. '```' → logprob: -9.915243148803711
    8. '    
' → logprob: -10.290243148803711
    9. '  
' → logprob: -10.665243148803711
    10. '\
' → logprob: -11.165243148803711

Token 179: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00039706481038592756
    2. '(' → logprob: -8.000396728515625
    3. '()
' → logprob: -9.750396728515625
    4. '()

' → logprob: -14.250396728515625
    5. '(
' → logprob: -14.625396728515625
    6. ' ()' → logprob: -14.625396728515625
    7. '()`' → logprob: -14.875396728515625
    8. '();' → logprob: -14.875396728515625
    9. '()"' → logprob: -15.750396728515625
    10. '()">' → logprob: -15.750396728515625


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 177
Tokens correctement prédits (1ère position, stricte): 78
Tokens correctement prédits (1ère position, avec adaptation): 92
Tokens correctement prédits (top 10): 155
Précision stricte (1ère position): 44.07%
Précision adaptée (1ère position): 51.98%
Précision (top 10): 87.57%
================================================================================
