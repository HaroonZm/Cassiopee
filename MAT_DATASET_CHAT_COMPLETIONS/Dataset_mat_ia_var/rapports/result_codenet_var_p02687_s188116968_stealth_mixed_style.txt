================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:15:21
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
S = input()
def changer(val):
    return "ARC" if val == "ABC" else "ABC"
class Affiche:
    def expose(self, x):
        print(x)

afficheur = Affiche()
resultat = changer(S)
afficheur.expose(resultat)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'S' (ID: 50)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' input' (ID: 3422)
  → Token d'amorce (pas de prédiction)

Token 3: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.013371978886425495
    2. ''' → logprob: -5.01337194442749
    3. '('' → logprob: -5.63837194442749
    4. '"' → logprob: -6.63837194442749
    5. '()' → logprob: -7.01337194442749
    6. '("("' → logprob: -8.013372421264648
    7. '`' → logprob: -8.888372421264648
    8. '(
' → logprob: -9.138372421264648
    9. '```' → logprob: -9.763372421264648
    10. '[' → logprob: -10.388372421264648

Token 4: 'def' (ID: 1314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.013521704822778702
    2. '[' → logprob: -5.263521671295166
    3. '+' → logprob: -5.888521671295166
    4. '[::-' → logprob: -6.013521671295166
    5. '.strip' → logprob: -6.388521671295166
    6. '.split' → logprob: -8.138522148132324
    7. '.lower' → logprob: -8.263522148132324
    8. 'print' → logprob: -9.263522148132324
    9. '.upper' → logprob: -9.263522148132324
    10. '.count' → logprob: -9.388522148132324

Token 5: ' changer' (ID: 47099)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.15818031132221222
    2. '_' → logprob: -2.0331802368164062
    3. ''' → logprob: -5.033180236816406
    4. ' _' → logprob: -6.408180236816406
    5. ' f' → logprob: -6.783180236816406
    6. '(' → logprob: -6.908180236816406
    7. '"' → logprob: -7.033180236816406
    8. ' space' → logprob: -7.283180236816406
    9. ' my' → logprob: -7.533180236816406
    10. '`' → logprob: -7.783180236816406

Token 6: '(val' (ID: 17391)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.044236693531274796
    2. '_' → logprob: -3.294236660003662
    3. '(_' → logprob: -5.919236660003662
    4. '(S' → logprob: -6.919236660003662
    5. '(s' → logprob: -7.669236660003662
    6. '_:' → logprob: -7.669236660003662
    7. 's' → logprob: -8.04423713684082
    8. '(_:' → logprob: -8.16923713684082
    9. '_(' → logprob: -8.29423713684082
    10. '(:' → logprob: -8.41923713684082

Token 7: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.007909203879535198
    2. ')' → logprob: -4.882909297943115
    3. ',' → logprob: -8.882908821105957
    4. '):
' → logprob: -10.382908821105957
    5. 't' → logprob: -10.757908821105957
    6. ' ):' → logprob: -10.757908821105957
    7. 's' → logprob: -11.007908821105957
    8. '_' → logprob: -11.007908821105957
    9. 'a' → logprob: -11.132908821105957
    10. ':' → logprob: -12.132908821105957

Token 8: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.10141526162624359
    2. '   ' → logprob: -2.4764151573181152
    3. '(' → logprob: -5.226415157318115
    4. ' ' → logprob: -5.726415157318115
    5. '_' → logprob: -6.851415157318115
    6. ')' → logprob: -7.101415157318115
    7. ':return' → logprob: -7.726415157318115
    8. ' :' → logprob: -8.351415634155273
    9. '):' → logprob: -8.476415634155273
    10. ' return' → logprob: -8.726415634155273

Token 9: ' return' (ID: 622)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2593466341495514
    2. '   ' → logprob: -2.3843467235565186
    3. ' return' → logprob: -2.7593467235565186
    4. '    ' → logprob: -3.6343467235565186
    5. '_' → logprob: -4.5093464851379395
    6. 'r' → logprob: -4.8843464851379395
    7. 'return' (adapté à ' return') → logprob: -5.0093464851379395
    8. ' if' → logprob: -5.7593464851379395
    9. 's' → logprob: -5.8843464851379395
    10. ' \' → logprob: -6.1343464851379395

Token 10: ' "' (ID: 392)
  Prédit: ' val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' val' → logprob: -0.053776245564222336
    2. 'val' → logprob: -3.428776264190674
    3. ' ' → logprob: -4.678776264190674
    4. '"' → logprob: -5.303776264190674
    5. ''' → logprob: -6.178776264190674
    6. ' '' → logprob: -6.428776264190674
    7. ' "' → logprob: -7.178776264190674
    8. ' S' → logprob: -8.303775787353516
    9. ' ord' → logprob: -8.678775787353516
    10. ' chr' → logprob: -8.803775787353516

Token 11: 'ARC' (ID: 64758)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'val' → logprob: -1.1602704524993896
    2. '#' → logprob: -1.5352704524993896
    3. 'S' → logprob: -2.4102704524993896
    4. '"' → logprob: -2.4102704524993896
    5. 'a' → logprob: -3.4102704524993896
    6. 'A' → logprob: -3.4102704524993896
    7. 'Hello' → logprob: -3.5352704524993896
    8. 's' → logprob: -4.160270690917969
    9. '_' → logprob: -4.285270690917969
    10. '1' → logprob: -4.285270690917969

Token 12: '"' (ID: 1)
  Prédit: '"'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -1.0470749139785767
    2. 'A' → logprob: -1.4220749139785767
    3. '"""' → logprob: -1.9220749139785767
    4. 'S' → logprob: -2.672074794769287
    5. '_' → logprob: -3.297074794769287
    6. '")' → logprob: -3.422074794769287
    7. 'a' → logprob: -4.047074794769287
    8. '"}' → logprob: -4.672074794769287
    9. '""' → logprob: -4.797074794769287
    10. 'E' → logprob: -4.922074794769287

Token 13: ' if' (ID: 538)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.35413914918899536
    2. '[' → logprob: -1.8541390895843506
    3. '_' → logprob: -2.2291390895843506
    4. 'S' → logprob: -3.7291390895843506
    5. '(S' → logprob: -6.10413932800293
    6. 'def' → logprob: -6.60413932800293
    7. ')' → logprob: -6.72913932800293
    8. '<|end|>' → logprob: -6.97913932800293
    9. 's' → logprob: -7.10413932800293
    10. '(
' → logprob: -7.10413932800293

Token 14: ' val' (ID: 1459)
  Prédit: ' val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' val' → logprob: -0.002478985348716378
    2. 'val' → logprob: -6.002479076385498
    3. ' ' → logprob: -13.62747859954834
    4. ' S' → logprob: -14.50247859954834
    5. '"' → logprob: -15.12747859954834
    6. '(val' → logprob: -15.12747859954834
    7. '	val' → logprob: -15.37747859954834
    8. '[val' → logprob: -15.50247859954834
    9. ' "' → logprob: -15.62747859954834
    10. '_val' → logprob: -16.127479553222656

Token 15: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.5391864776611328
    2. ' ==' → logprob: -0.9141864776611328
    3. ' ' → logprob: -5.539186477661133
    4. '.startswith' → logprob: -5.789186477661133
    5. '>' → logprob: -6.289186477661133
    6. ' in' → logprob: -6.539186477661133
    7. ' else' → logprob: -6.664186477661133
    8. 'else' → logprob: -7.414186477661133
    9. ' >' → logprob: -7.664186477661133
    10. '[' → logprob: -7.664186477661133

Token 16: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.5476588010787964
    2. '"S' → logprob: -1.6726588010787964
    3. ' "' → logprob: -2.422658920288086
    4. ''S' → logprob: -2.797658920288086
    5. ''' → logprob: -3.172658920288086
    6. '"A' → logprob: -3.797658920288086
    7. ' '' → logprob: -4.672658920288086
    8. ''A' → logprob: -5.672658920288086
    9. ' ' → logprob: -6.672658920288086
    10. '"I' → logprob: -6.797658920288086

Token 17: 'ABC' (ID: 44197)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.47404664754867554
    2. 'ABC' → logprob: -1.4740467071533203
    3. 'S' → logprob: -2.3490467071533203
    4. 'R' → logprob: -3.8490467071533203
    5. 'ARC' → logprob: -4.97404670715332
    6. 'AG' → logprob: -4.97404670715332
    7. 'B' → logprob: -5.72404670715332
    8. 'I' → logprob: -5.84904670715332
    9. 'At' → logprob: -6.47404670715332
    10. 'D' → logprob: -6.84904670715332

Token 18: '"' (ID: 1)
  Prédit: '"'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -1.676292231422849e-05
    2. '```' → logprob: -12.500017166137695
    3. ' else' → logprob: -13.000017166137695
    4. '"""' → logprob: -13.375017166137695
    5. 'else' → logprob: -13.375017166137695
    6. 'ABC' → logprob: -13.500017166137695
    7. 'A' → logprob: -13.625017166137695
    8. '\"' → logprob: -13.750017166137695
    9. 'S' → logprob: -14.125017166137695
    10. '"A' → logprob: -14.375017166137695

Token 19: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.04300786554813385
    2. 'else' → logprob: -3.1680078506469727
    3. ' ' → logprob: -12.793007850646973
    4. '+' → logprob: -13.668007850646973
    5. '   ' → logprob: -13.918007850646973
    6. '	else' → logprob: -13.918007850646973
    7. '_else' → logprob: -14.543007850646973
    8. '==' → logprob: -14.793007850646973
    9. '```' → logprob: -14.793007850646973
    10. '-' → logprob: -15.168007850646973

Token 20: ' "' (ID: 392)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.3077014684677124
    2. ' val' → logprob: -1.9327014684677124
    3. '"' → logprob: -2.182701587677002
    4. '"S' → logprob: -5.682701587677002
    5. ' "' → logprob: -5.932701587677002
    6. '""' → logprob: -7.807701587677002
    7. ' ' → logprob: -8.432701110839844
    8. '   ' → logprob: -8.807701110839844
    9. 'S' → logprob: -9.057701110839844
    10. ' S' → logprob: -9.807701110839844

Token 21: 'ABC' (ID: 44197)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.11166843771934509
    2. '"' → logprob: -2.361668348312378
    3. 'S' → logprob: -5.986668586730957
    4. '"S' → logprob: -6.486668586730957
    5. 'XYZ' → logprob: -6.611668586730957
    6. ' val' → logprob: -6.986668586730957
    7. '""' → logprob: -7.486668586730957
    8. 'BCD' → logprob: -7.486668586730957
    9. 'DEF' → logprob: -7.611668586730957
    10. 'ABD' → logprob: -7.736668586730957

Token 22: '"
' (ID: 1092)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -2.069664333248511e-05
    2. '")' → logprob: -11.250020980834961
    3. '```' → logprob: -12.125020980834961
    4. '"
' → logprob: -14.375020980834961
    5. '"value' → logprob: -14.500020980834961
    6. '"""' → logprob: -15.250020980834961
    7. '"`' → logprob: -15.750020980834961
    8. '"}' → logprob: -15.875020980834961
    9. '<|end|>' → logprob: -16.00002098083496
    10. ''' → logprob: -16.37502098083496

Token 23: 'class' (ID: 1444)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.2669570446014404
    2. '\n' → logprob: -1.2669570446014404
    3. '
' → logprob: -2.3919570446014404
    4. 'result' → logprob: -2.5169570446014404
    5. 'for' → logprob: -2.8919570446014404
    6. 's' → logprob: -3.1419570446014404
    7. 'print' → logprob: -3.3919570446014404
    8. 'newline' → logprob: -3.6419570446014404
    9. 'n' → logprob: -4.0169572830200195
    10. 'x' → logprob: -4.8919572830200195

Token 24: ' Aff' (ID: 13741)
  Prédit: ' Solution'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' Solution' → logprob: -1.2501946687698364
    2. ' My' → logprob: -1.3751946687698364
    3. ' ' → logprob: -2.000194549560547
    4. ' Solver' → logprob: -2.125194549560547
    5. ' Tester' → logprob: -2.875194549560547
    6. ' User' → logprob: -3.500194549560547
    7. ' S' → logprob: -4.000194549560547
    8. ' Converter' → logprob: -4.500194549560547
    9. ' Student' → logprob: -4.750194549560547
    10. ' Matcher' → logprob: -4.750194549560547

Token 25: 'iche' (ID: 7509)
  Prédit: 'ine'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ine' → logprob: -0.2152438908815384
    2. 'inity' → logprob: -3.2152438163757324
    3. 'iliation' → logprob: -3.4652438163757324
    4. 'ection' → logprob: -3.4652438163757324
    5. 'ix' → logprob: -3.9652438163757324
    6. 'ector' → logprob: -4.340243816375732
    7. 'iliate' → logprob: -4.715243816375732
    8. 'ective' → logprob: -4.840243816375732
    9. 'ili' → logprob: -5.215243816375732
    10. ' ine' → logprob: -5.340243816375732

Token 26: ':
' (ID: 734)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.889106035232544
    2. 'ur' → logprob: -1.014106035232544
    3. ':' → logprob: -1.514106035232544
    4. '(' → logprob: -6.139105796813965
    5. '():' → logprob: -6.389105796813965
    6. 'urer' → logprob: -7.264105796813965
    7. '):' → logprob: -8.014105796813965
    8. 'Printer' → logprob: -8.014105796813965
    9. 'er' → logprob: -8.389105796813965
    10. 'urator' → logprob: -9.139105796813965

Token 27: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 28: ' def' (ID: 1056)
  Prédit: ' def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' def' → logprob: -0.06988708674907684
    2. '   ' → logprob: -2.944887161254883
    3. 'def' (adapté à ' def') → logprob: -4.319887161254883
    4. '	def' → logprob: -6.694887161254883
    5. '    ' → logprob: -8.819887161254883
    6. ' pass' → logprob: -9.944887161254883
    7. '    
' → logprob: -10.194887161254883
    8. '```' → logprob: -10.569887161254883
    9. ' indentation' → logprob: -10.819887161254883
    10. ' ' → logprob: -11.569887161254883

Token 29: ' expose' (ID: 49768)
  Prédit: ' __'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.15934839844703674
    2. ' ' → logprob: -2.034348487854004
    3. ' _' → logprob: -5.409348487854004
    4. ' init' → logprob: -5.409348487854004
    5. '__' → logprob: -6.034348487854004
    6. '_' → logprob: -6.034348487854004
    7. ' ' → logprob: -6.409348487854004
    8. '_init' → logprob: -7.159348487854004
    9. ' def' → logprob: -9.034348487854004
    10. 'init' → logprob: -9.784348487854004

Token 30: '(self' (ID: 2402)
  Prédit: '(self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(self' → logprob: -0.198686420917511
    2. 'r' → logprob: -1.9486863613128662
    3. '(' → logprob: -3.323686361312866
    4. 'self' → logprob: -7.573686599731445
    5. ' (' → logprob: -7.698686599731445
    6. '(s' → logprob: -8.573686599731445
    7. 's' → logprob: -9.323686599731445
    8. '()' → logprob: -9.323686599731445
    9. 'd' → logprob: -9.573686599731445
    10. ' self' → logprob: -9.698686599731445

Token 31: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.6951531767845154
    2. '):' → logprob: -0.8201531767845154
    3. 'self' → logprob: -3.44515323638916
    4. ')' → logprob: -4.57015323638916
    5. ' ,' → logprob: -5.07015323638916
    6. ',val' → logprob: -5.32015323638916
    7. ',self' → logprob: -6.19515323638916
    8. ',s' → logprob: -6.44515323638916
    9. ',arg' → logprob: -7.07015323638916
    10. ',f' → logprob: -7.94515323638916

Token 32: ' x' (ID: 1215)
  Prédit: 'S'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'S' → logprob: -0.9316563010215759
    2. ' S' → logprob: -1.6816563606262207
    3. ' self' → logprob: -2.1816563606262207
    4. 'val' → logprob: -2.1816563606262207
    5. 'self' → logprob: -2.3066563606262207
    6. ' val' → logprob: -3.4316563606262207
    7. 's' → logprob: -4.181656360626221
    8. ' s' → logprob: -4.306656360626221
    9. ' text' → logprob: -4.806656360626221
    10. 'text' → logprob: -4.931656360626221

Token 33: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.004417178686708212
    2. ':' → logprob: -5.8794169425964355
    3. ' ):' → logprob: -7.3794169425964355
    4. ')' → logprob: -7.5044169425964355
    5. '):
' → logprob: -8.254417419433594
    6. ',' → logprob: -9.379417419433594
    7. '   ' → logprob: -10.379417419433594
    8. ' :' → logprob: -10.754417419433594
    9. ' ' → logprob: -11.754417419433594
    10. '():' → logprob: -12.129417419433594

Token 34: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0002844576956704259
    2. ' return' → logprob: -9.750284194946289
    3. 'return' → logprob: -10.000284194946289
    4. '   ' → logprob: -10.125284194946289
    5. ' ' → logprob: -10.750284194946289
    6. '    ' → logprob: -11.000284194946289
    7. '        
' → logprob: -11.125284194946289
    8. '<|end|>' → logprob: -11.125284194946289
    9. 'print' → logprob: -11.625284194946289
    10. '      ' → logprob: -11.875284194946289

Token 35: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -1.1728479862213135
    2. 'return' → logprob: -1.2978479862213135
    3. '       ' → logprob: -1.7978479862213135
    4. ' return' → logprob: -2.1728479862213135
    5. ' print' → logprob: -2.2978479862213135
    6. 'self' → logprob: -3.9228479862213135
    7. ' self' → logprob: -4.422847747802734
    8. 'x' → logprob: -6.047847747802734
    9. ' x' → logprob: -6.922847747802734
    10. ' if' → logprob: -7.297847747802734

Token 36: '(x' (ID: 4061)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5243275761604309
    2. '(x' → logprob: -0.8993275761604309
    3. '(f' → logprob: -7.149327754974365
    4. '("("' → logprob: -9.024327278137207
    5. '('' → logprob: -9.274327278137207
    6. '((' → logprob: -10.024327278137207
    7. '("' → logprob: -10.024327278137207
    8. '(S' → logprob: -10.399327278137207
    9. '(s' → logprob: -10.649327278137207
    10. '()' → logprob: -10.649327278137207

Token 37: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.723973582556937e-05
    2. ' )' → logprob: -11.750017166137695
    3. '))' → logprob: -12.000017166137695
    4. '   ' → logprob: -14.000017166137695
    5. ')
' → logprob: -14.375017166137695
    6. ')))' → logprob: -15.125017166137695
    7. ' ' → logprob: -15.500017166137695
    8. '       ' → logprob: -15.500017166137695
    9. ')}' → logprob: -15.750017166137695
    10. '`)' → logprob: -15.875017166137695

Token 38: 'aff' (ID: 2857)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.1794612407684326
    2. 'a' → logprob: -1.4294612407684326
    3. 'S' → logprob: -1.9294612407684326
    4. 'aff' → logprob: -2.5544612407684326
    5. 's' → logprob: -2.6794612407684326
    6. 'x' → logprob: -3.5544612407684326
    7. 'print' → logprob: -3.6794612407684326
    8. '
' → logprob: -3.8044612407684326
    9. 'Aff' → logprob: -4.179461479187012
    10. 'obj' → logprob: -4.304461479187012

Token 39: 'iche' (ID: 7509)
  Prédit: 'iche'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iche' → logprob: -4.0484450437361374e-05
    2. 'ichage' → logprob: -11.000040054321289
    3. 'ich' → logprob: -11.875040054321289
    4. 'ic' → logprob: -12.125040054321289
    5. 'icher' → logprob: -12.750040054321289
    6. 'i' → logprob: -13.375040054321289
    7. 'ixe' → logprob: -13.500040054321289
    8. ' iche' → logprob: -13.875040054321289
    9. 'iché' → logprob: -14.375040054321289
    10. '```' → logprob: -14.500040054321289

Token 40: 'ur' (ID: 330)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.010409192182123661
    2. '.ex' → logprob: -4.635409355163574
    3. '.aff' → logprob: -8.260409355163574
    4. ').' → logprob: -8.510409355163574
    5. ' .' → logprob: -9.385409355163574
    6. '.

' → logprob: -11.010409355163574
    7. '.
' → logprob: -11.135409355163574
    8. ')' → logprob: -11.260409355163574
    9. '.e' → logprob: -11.385409355163574
    10. '.s' → logprob: -11.510409355163574

Token 41: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.026521477848291397
    2. '.ex' → logprob: -3.6515214443206787
    3. ' .' → logprob: -9.276521682739258
    4. '.aff' → logprob: -9.401521682739258
    5. ' =' → logprob: -11.276521682739258
    6. '.s' → logprob: -11.776521682739258
    7. ').' → logprob: -11.901521682739258
    8. '.

' → logprob: -12.651521682739258
    9. '.)' → logprob: -13.526521682739258
    10. '.e' → logprob: -13.651521682739258

Token 42: ' Aff' (ID: 13741)
  Prédit: 'Aff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Aff' → logprob: -0.20197299122810364
    2. ' Aff' → logprob: -1.7019729614257812
    3. 'Affine' → logprob: -8.201972961425781
    4. 'Changer' → logprob: -9.201972961425781
    5. 'Afficher' → logprob: -9.951972961425781
    6. 'Affinity' → logprob: -10.076972961425781
    7. 'aff' → logprob: -10.326972961425781
    8. '_aff' → logprob: -10.701972961425781
    9. ' aff' → logprob: -10.826972961425781
    10. 'A' → logprob: -11.951972961425781

Token 43: 'iche' (ID: 7509)
  Prédit: 'iche'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iche' → logprob: -2.045823566731997e-05
    2. 'icher' → logprob: -11.250020027160645
    3. 'ichage' → logprob: -12.875020027160645
    4. 'ich' → logprob: -13.000020027160645
    5. 'ic' → logprob: -14.250020027160645
    6. 'ice' → logprob: -14.375020027160645
    7. ' iche' → logprob: -14.500020027160645
    8. 'i' → logprob: -15.000020027160645
    9. 'ichel' → logprob: -16.37502098083496
    10. 'che' → logprob: -16.37502098083496

Token 44: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0017391976434737444
    2. '()
' → logprob: -6.501739025115967
    3. '(' → logprob: -8.876739501953125
    4. '()

' → logprob: -10.126739501953125
    5. '().' → logprob: -10.501739501953125
    6. '.' → logprob: -10.876739501953125
    7. ' ()' → logprob: -12.751739501953125
    8. ')' → logprob: -13.251739501953125
    9. '(
' → logprob: -13.376739501953125
    10. '()<' → logprob: -13.501739501953125

Token 45: 'result' (ID: 2521)
  Prédit: 'aff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'aff' → logprob: -0.0989876240491867
    2. 'if' → logprob: -2.848987579345703
    3. 'for' → logprob: -3.848987579345703
    4. 'x' → logprob: -5.473987579345703
    5. 'result' → logprob: -5.973987579345703
    6. 'print' → logprob: -6.223987579345703
    7. '
' → logprob: -6.223987579345703
    8. 'changer' → logprob: -6.848987579345703
    9. 's' → logprob: -7.348987579345703
    10. 'while' → logprob: -7.473987579345703

Token 46: 'at' (ID: 266)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.02741079591214657
    2. '=' → logprob: -3.9024107456207275
    3. ' ' → logprob: -5.277410984039307
    4. 's' → logprob: -6.527410984039307
    5. '_' → logprob: -9.027410507202148
    6. 'er' → logprob: -9.402410507202148
    7. '   ' → logprob: -10.277410507202148
    8. '  ' → logprob: -11.277410507202148
    9. '(' → logprob: -12.277410507202148
    10. ')' → logprob: -12.277410507202148

Token 47: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.01581086963415146
    2. '=' → logprob: -4.265810966491699
    3. ' ' → logprob: -6.890810966491699
    4. '.' → logprob: -8.2658109664917
    5. '_' → logprob: -8.8908109664917
    6. '(' → logprob: -9.6408109664917
    7. ')' → logprob: -10.0158109664917
    8. 's' → logprob: -10.0158109664917
    9. ' .' → logprob: -10.7658109664917
    10. '   ' → logprob: -11.5158109664917

Token 48: ' changer' (ID: 47099)
  Prédit: 'changer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'changer' → logprob: -0.42937004566192627
    2. ' changer' → logprob: -1.0543700456619263
    3. 'aff' → logprob: -7.804369926452637
    4. 'Changer' → logprob: -8.929369926452637
    5. 'change' → logprob: -11.179369926452637
    6. ' afficher' → logprob: -11.304369926452637
    7. 'chang' → logprob: -11.304369926452637
    8. 'charger' → logprob: -11.804369926452637
    9. 'chg' → logprob: -11.866869926452637
    10. ' chang' → logprob: -11.866869926452637

Token 49: '(S' (ID: 6181)
  Prédit: '(S'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(S' → logprob: -0.10066790878772736
    2. '(' → logprob: -2.350667953491211
    3. '(s' → logprob: -7.725667953491211
    4. ' (' → logprob: -12.100667953491211
    5. '((' → logprob: -12.225667953491211
    6. '('' → logprob: -12.350667953491211
    7. '(
' → logprob: -12.850667953491211
    8. '("("' → logprob: -14.350667953491211
    9. '(f' → logprob: -15.350667953491211
    10. '(

' → logprob: -15.850667953491211

Token 50: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0013298832345753908
    2. '))' → logprob: -6.6263298988342285
    3. ' )' → logprob: -13.12632942199707
    4. ')))' → logprob: -13.37632942199707
    5. ')
' → logprob: -15.00132942199707
    6. ')`' → logprob: -16.87632942199707
    7. ')")' → logprob: -17.00132942199707
    8. ')}' → logprob: -17.87632942199707
    9. ')**' → logprob: -18.25132942199707
    10. '')' → logprob: -18.37632942199707

Token 51: 'aff' (ID: 2857)
  Prédit: 'aff'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'aff' → logprob: -0.024037526920437813
    2. '.' → logprob: -5.0240373611450195
    3. '.aff' → logprob: -5.2740373611450195
    4. ')' → logprob: -5.3990373611450195
    5. '_aff' → logprob: -5.7740373611450195
    6. '<|end|>' → logprob: -6.8990373611450195
    7. '
' → logprob: -7.6490373611450195
    8. '_' → logprob: -7.7740373611450195
    9. '.
' → logprob: -7.8990373611450195
    10. '\' → logprob: -7.8990373611450195

Token 52: 'iche' (ID: 7509)
  Prédit: 'iche'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iche' → logprob: -2.4034345187828876e-05
    2. 'ichage' → logprob: -10.87502384185791
    3. ' iche' → logprob: -13.00002384185791
    4. 'icher' → logprob: -14.12502384185791
    5. 'che' → logprob: -14.25002384185791
    6. 'ich' → logprob: -15.12502384185791
    7. 'ic' → logprob: -15.37502384185791
    8. '{"' → logprob: -15.75002384185791
    9. 'ichean' → logprob: -16.000024795532227
    10. 'i' → logprob: -16.375024795532227

Token 53: 'ur' (ID: 330)
  Prédit: 'ur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ur' → logprob: -0.00013047587708570063
    2. 'eur' → logprob: -9.000130653381348
    3. 'er' → logprob: -13.125130653381348
    4. 'ueur' → logprob: -13.375130653381348
    5. 'u' → logprob: -14.500130653381348
    6. 'e' → logprob: -14.500130653381348
    7. 'reur' → logprob: -14.750130653381348
    8. '```' → logprob: -15.000130653381348
    9. 'r' → logprob: -15.125130653381348
    10. 'uer' → logprob: -15.625130653381348

Token 54: '.ex' (ID: 3482)
  Prédit: '.ex'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.ex' → logprob: -0.02988065779209137
    2. '.' → logprob: -3.5298807621002197
    3. ' .' → logprob: -9.90488052368164
    4. '.aff' → logprob: -9.90488052368164
    5. '.e' → logprob: -11.90488052368164
    6. '.show' → logprob: -12.52988052368164
    7. '.exp' → logprob: -12.52988052368164
    8. ').' → logprob: -13.77988052368164
    9. '​.' → logprob: -13.90488052368164
    10. '.mainloop' → logprob: -13.90488052368164

Token 55: 'pose' (ID: 4397)
  Prédit: 'pose'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pose' → logprob: -0.4741101562976837
    2. 'ose' → logprob: -0.9741101264953613
    3. 'opse' → logprob: -11.09911060333252
    4. 'oser' → logprob: -12.22411060333252
    5. 'poser' → logprob: -12.72411060333252
    6. 'osse' → logprob: -13.34911060333252
    7. 'p' → logprob: -13.59911060333252
    8. 'o' → logprob: -13.84911060333252
    9. 'pos' → logprob: -14.09911060333252
    10. '.pose' → logprob: -14.34911060333252

Token 56: '(result' (ID: 8111)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.12699466943740845
    2. '(result' → logprob: -2.1269946098327637
    3. '(
' → logprob: -10.751995086669922
    4. '(S' → logprob: -11.501995086669922
    5. '("("' → logprob: -11.626995086669922
    6. '(

' → logprob: -12.001995086669922
    7. '((' → logprob: -12.126995086669922
    8. '('' → logprob: -12.751995086669922
    9. '(resultado' → logprob: -13.001995086669922
    10. '(results' → logprob: -13.251995086669922

Token 57: 'at' (ID: 266)
  Prédit: 'at'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'at' → logprob: -3.292907877039397e-06
    2. 't' → logprob: -14.12500286102295
    3. 'ат' → logprob: -14.37500286102295
    4. ')' → logprob: -14.87500286102295
    5. 'a' → logprob: -15.00000286102295
    6. '))' → logprob: -15.25000286102295
    7. 'atat' → logprob: -15.37500286102295
    8. 'ât' → logprob: -16.250003814697266
    9. ' at' → logprob: -16.500003814697266
    10. 'ats' → logprob: -16.500003814697266

Token 58: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.5048530030981055e-06
    2. ' )' → logprob: -13.875001907348633
    3. '))' → logprob: -15.125001907348633
    4. ')
' → logprob: -15.875001907348633
    5. ')`' → logprob: -16.875001907348633
    6. '`)' → logprob: -19.250001907348633
    7. '(' → logprob: -19.500001907348633
    8. ')

' → logprob: -19.625001907348633
    9. '）' → logprob: -19.875001907348633
    10. '())' → logprob: -20.125001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 56
Tokens correctement prédits (1ère position, stricte): 19
Tokens correctement prédits (1ère position, avec adaptation): 20
Tokens correctement prédits (top 10): 39
Précision stricte (1ère position): 33.93%
Précision adaptée (1ère position): 35.71%
Précision (top 10): 69.64%
================================================================================
