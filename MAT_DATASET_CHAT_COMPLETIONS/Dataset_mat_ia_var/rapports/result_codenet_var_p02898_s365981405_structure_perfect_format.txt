================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:43:31
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n, k = map(int, input().split())
h = list(map(int, input().split()))

h.sort()
for i in range(n):
    if h[i] >= k:
        print(n - i)
        exit()
print(0)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' k' (ID: 372)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.017802316695451736
    2. ' =' → logprob: -4.5178022384643555
    3. ',' → logprob: -5.0178022384643555
    4. '+' → logprob: -11.017802238464355
    5. ' ' → logprob: -11.142802238464355
    6. '_' → logprob: -11.517802238464355
    7. '=
' → logprob: -11.517802238464355
    8. ')' → logprob: -11.767802238464355
    9. '.' → logprob: -12.017802238464355
    10. ';' → logprob: -12.017802238464355

Token 4: ' map' (ID: 4014)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3693707287311554
    2. ' map' → logprob: -2.244370698928833
    3. ' input' → logprob: -2.494370698928833
    4. ' n' → logprob: -3.244370698928833
    5. 'input' → logprob: -3.369370698928833
    6. '0' → logprob: -3.869370698928833
    7. 'map' → logprob: -3.994370698928833
    8. '10' → logprob: -5.869370937347412
    9. ' int' → logprob: -6.244370937347412
    10. 'int' → logprob: -7.119370937347412

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3105434477329254
    2. '<|end|>' → logprob: -1.685543417930603
    3. '(int' → logprob: -3.1855435371398926
    4. '(lambda' → logprob: -4.185543537139893
    5. '```' → logprob: -5.185543537139893
    6. '<|end|>' → logprob: -5.435543537139893
    7. '(str' → logprob: -5.435543537139893
    8. '[int' → logprob: -6.435543537139893
    9. ')' → logprob: -6.685543537139893
    10. '(len' → logprob: -7.248043537139893

Token 6: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.24169281125068665
    2. '(' → logprob: -2.2416927814483643
    3. '(input' → logprob: -2.3666927814483643
    4. '```' → logprob: -5.741693019866943
    5. '`)' → logprob: -6.241693019866943
    6. '(n' → logprob: -6.366693019866943
    7. '(int' → logprob: -6.366693019866943
    8. ')(' → logprob: -6.741693019866943
    9. '<|end|>' → logprob: -7.241693019866943
    10. '(str' → logprob: -7.241693019866943

Token 7: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.3133276700973511
    2. ' input' → logprob: -1.313327670097351
    3. '(input' → logprob: -9.68832778930664
    4. ')' → logprob: -12.81332778930664
    5. ',input' → logprob: -14.18832778930664
    6. '=input' → logprob: -16.06332778930664
    7. '```' → logprob: -16.18832778930664
    8. '[input' → logprob: -16.56332778930664
    9. '<input' → logprob: -17.06332778930664
    10. '	input' → logprob: -17.81332778930664

Token 8: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.8731092810630798
    2. '()' → logprob: -0.8731092810630798
    3. '())' → logprob: -2.6231093406677246
    4. '('' → logprob: -3.2481093406677246
    5. ')' → logprob: -4.248109340667725
    6. '().' → logprob: -4.373109340667725
    7. '(()' → logprob: -4.748109340667725
    8. '()>' → logprob: -6.248109340667725
    9. '`()' → logprob: -6.498109340667725
    10. '```' → logprob: -6.623109340667725

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0067443884909152985
    2. 'strip' → logprob: -5.006744384765625
    3. 'rstrip' → logprob: -10.756744384765625
    4. ' split' → logprob: -12.381744384765625
    5. 'read' → logprob: -13.006744384765625
    6. ')' → logprob: -13.881744384765625
    7. '(split' → logprob: -15.256744384765625
    8. 'spl' → logprob: -16.756744384765625
    9. ' strip' → logprob: -17.006744384765625
    10. 'startswith' → logprob: -17.256744384765625

Token 10: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.017316220328211784
    2. '))' → logprob: -4.3923163414001465
    3. '())' → logprob: -5.3923163414001465
    4. '()' → logprob: -9.392315864562988
    5. '`)' → logprob: -9.767315864562988
    6. '(' → logprob: -9.892315864562988
    7. ')`' → logprob: -10.642315864562988
    8. '()))' → logprob: -11.642315864562988
    9. ')))' → logprob: -12.767315864562988
    10. ')")' → logprob: -13.142315864562988

Token 11: 'h' (ID: 71)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.132415771484375
    2. '```' → logprob: -1.632415771484375
    3. '\n' → logprob: -2.382415771484375
    4. ''' → logprob: -2.507415771484375
    5. '\' → logprob: -2.882415771484375
    6. '<|end|>' → logprob: -3.257415771484375
    7. '[' → logprob: -3.632415771484375
    8. 'if' → logprob: -4.007415771484375
    9. 'for' → logprob: -4.007415771484375
    10. '*' → logprob: -4.132415771484375

Token 12: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0501495823264122
    2. 'e' → logprob: -3.42514967918396
    3. '[i' → logprob: -4.425149440765381
    4. '[e' → logprob: -6.425149440765381
    5. ' =' → logprob: -6.675149440765381
    6. 's' → logprob: -7.425149440765381
    7. '=' → logprob: -8.675149917602539
    8. '[]' → logprob: -8.675149917602539
    9. '_' → logprob: -9.050149917602539
    10. 't' → logprob: -9.800149917602539

Token 13: ' list' (ID: 1562)
  Prédit: ' ['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' [' → logprob: -0.8828330636024475
    2. ' list' → logprob: -1.2578330039978027
    3. '[int' → logprob: -2.2578330039978027
    4. 'list' → logprob: -2.3828330039978027
    5. '[' → logprob: -2.5078330039978027
    6. ' []' → logprob: -4.132833003997803
    7. '[]' → logprob: -5.382833003997803
    8. '[list' → logprob: -6.132833003997803
    9. '[n' → logprob: -7.882833003997803
    10. 'int' → logprob: -9.132833480834961

Token 14: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0012795224320143461
    2. '(range' → logprob: -7.001279354095459
    3. '(h' → logprob: -8.876279830932617
    4. '(.' → logprob: -10.501279830932617
    5. '```' → logprob: -10.501279830932617
    6. ' (' → logprob: -10.501279830932617
    7. '(n' → logprob: -10.876279830932617
    8. '(np' → logprob: -11.376279830932617
    9. '(int' → logprob: -11.626279830932617
    10. '(input' → logprob: -11.876279830932617

Token 15: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.05512181296944618
    2. '(' → logprob: -2.930121898651123
    3. '(input' → logprob: -9.805121421813965
    4. ')' → logprob: -10.055121421813965
    5. '[int' → logprob: -10.180121421813965
    6. '<int' → logprob: -10.555121421813965
    7. '=int' → logprob: -10.930121421813965
    8. 'int' → logprob: -10.930121421813965
    9. '(
' → logprob: -11.930121421813965
    10. ',int' → logprob: -11.930121421813965

Token 16: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.4161333739757538
    2. ',input' → logprob: -1.6661334037780762
    3. ',' → logprob: -1.9161334037780762
    4. '(' → logprob: -5.666133403778076
    5. ' ,' → logprob: -7.666133403778076
    6. '(int' → logprob: -9.041132926940918
    7. ' (' → logprob: -9.916132926940918
    8. ',int' → logprob: -10.041132926940918
    9. ',(' → logprob: -10.916132926940918
    10. '(),' → logprob: -10.916132926940918

Token 17: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.048590321093797684
    2. ' input' → logprob: -3.0485904216766357
    3. '(input' → logprob: -12.923590660095215
    4. ',input' → logprob: -14.798590660095215
    5. '=input' → logprob: -16.9235897064209
    6. ')' → logprob: -17.1735897064209
    7. '<input' → logprob: -17.1735897064209
    8. '	input' → logprob: -17.6735897064209
    9. '[input' → logprob: -18.2985897064209
    10. '_input' → logprob: -18.4235897064209

Token 18: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.00802652258425951
    2. '()' → logprob: -5.008026599884033
    3. '()))' → logprob: -7.383026599884033
    4. '(' → logprob: -7.758026599884033
    5. '())' → logprob: -8.758026123046875
    6. '()));' → logprob: -10.883026123046875
    7. '(.' → logprob: -11.383026123046875
    8. ' ().' → logprob: -11.508026123046875
    9. '(),' → logprob: -11.633026123046875
    10. ')' → logprob: -12.008026123046875

Token 19: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -3.054500666621607e-06
    2. 'strip' → logprob: -13.00000286102295
    3. ' split' → logprob: -15.00000286102295
    4. '(split' → logprob: -15.37500286102295
    5. 'rstrip' → logprob: -16.625003814697266
    6. 'spl' → logprob: -17.625003814697266
    7. ')' → logprob: -19.500003814697266
    8. 'plit' → logprob: -20.000003814697266
    9. '.split' → logprob: -20.750003814697266
    10. 's' → logprob: -20.750003814697266

Token 20: '()))

' (ID: 125972)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.27338531613349915
    2. '))' → logprob: -1.5233852863311768
    3. '())' → logprob: -4.398385524749756
    4. ')' → logprob: -5.023385524749756
    5. '()' → logprob: -6.148385524749756
    6. '(' → logprob: -8.648385047912598
    7. '()))
' → logprob: -11.898385047912598
    8. '()));' → logprob: -11.898385047912598
    9. ')))' → logprob: -12.523385047912598
    10. '()),' → logprob: -12.898385047912598

Token 21: 'h' (ID: 71)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dp' → logprob: -0.7514961361885071
    2. 'h' → logprob: -1.0014960765838623
    3. 'd' → logprob: -3.3764960765838623
    4. '```' → logprob: -3.7514960765838623
    5. 'if' → logprob: -4.001496315002441
    6. 'for' → logprob: -4.126496315002441
    7. 'sorted' → logprob: -4.251496315002441
    8. 'count' → logprob: -4.626496315002441
    9. 'result' → logprob: -4.751496315002441
    10. 's' → logprob: -4.751496315002441

Token 22: '.sort' (ID: 19551)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.3569587171077728
    2. '.' → logprob: -1.4819587469100952
    3. '<|end|>' → logprob: -2.8569586277008057
    4. '[n' → logprob: -5.731958866119385
    5. '[h' → logprob: -5.981958866119385
    6. '```' → logprob: -6.356958866119385
    7. '[:]' → logprob: -6.606958866119385
    8. ')' → logprob: -6.731958866119385
    9. '<|end|>' → logprob: -6.731958866119385
    10. '[
' → logprob: -7.606958866119385

Token 23: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.34909260272979736
    2. '(' → logprob: -1.2240926027297974
    3. '(h' → logprob: -8.724092483520508
    4. '(()' → logprob: -8.974092483520508
    5. '((' → logprob: -9.474092483520508
    6. '().' → logprob: -9.599092483520508
    7. '()`' → logprob: -9.724092483520508
    8. '(.)' → logprob: -10.599092483520508
    9. '```' → logprob: -10.724092483520508
    10. '(.' → logprob: -11.099092483520508

Token 24: 'for' (ID: 1938)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dp' → logprob: -0.41928935050964355
    2. 'for' → logprob: -1.9192893505096436
    3. 'd' → logprob: -2.6692893505096436
    4. 'diff' → logprob: -2.9192893505096436
    5. 'import' → logprob: -3.2942893505096436
    6. 'ans' → logprob: -4.294289588928223
    7. 'if' → logprob: -4.794289588928223
    8. 'result' → logprob: -5.794289588928223
    9. 'answer' → logprob: -5.919289588928223
    10. 'cost' → logprob: -6.919289588928223

Token 25: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.007990812882781029
    2. ' ' → logprob: -5.007990837097168
    3. ' _' → logprob: -7.257990837097168
    4. 'i' → logprob: -8.132990837097168
    5. '_' → logprob: -8.257990837097168
    6. ' h' → logprob: -12.257990837097168
    7. ' x' → logprob: -13.132990837097168
    8. ' range' → logprob: -13.257990837097168
    9. ' ‌' → logprob: -13.382990837097168
    10. '_i' → logprob: -13.632990837097168

Token 26: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.016188738867640495
    2. 'in' → logprob: -4.141188621520996
    3. ' ' → logprob: -9.391188621520996
    4. 'n' → logprob: -9.891188621520996
    5. '	in' → logprob: -12.266188621520996
    6. '  ' → logprob: -12.641188621520996
    7. ',' → logprob: -12.891188621520996
    8. ' n' → logprob: -13.266188621520996
    9. 'range' → logprob: -13.391188621520996
    10. '```' → logprob: -14.016188621520996

Token 27: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.47407975792884827
    2. ' range' → logprob: -0.9740797281265259
    3. ' ' → logprob: -13.724080085754395
    4. '	range' → logprob: -14.224080085754395
    5. '(range' → logprob: -15.099080085754395
    6. 'r' → logprob: -15.599080085754395
    7. '  ' → logprob: -16.224079132080078
    8. 'rang' → logprob: -16.599079132080078
    9. ' h' → logprob: -16.724079132080078
    10. '```' → logprob: -16.974079132080078

Token 28: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7445112466812134
    2. '(k' → logprob: -0.7445112466812134
    3. '(n' → logprob: -2.994511127471924
    4. '(len' → logprob: -12.994511604309082
    5. '(i' → logprob: -14.369511604309082
    6. ' (' → logprob: -14.369511604309082
    7. '(range' → logprob: -14.619511604309082
    8. '(s' → logprob: -14.994511604309082
    9. '((' → logprob: -14.994511604309082
    10. '()' → logprob: -15.119511604309082

Token 29: '):
' (ID: 1883)
  Prédit: '-k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-k' → logprob: -0.6218822598457336
    2. '-' → logprob: -0.9968822598457336
    3. ' -' → logprob: -2.496882200241089
    4. '):' → logprob: -4.496882438659668
    5. '-n' → logprob: -8.246882438659668
    6. '):
' → logprob: -8.996882438659668
    7. ')' → logprob: -9.496882438659668
    8. ' ):' → logprob: -10.121882438659668
    9. '-m' → logprob: -10.621882438659668
    10. ' ' → logprob: -12.496882438659668

Token 30: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08640459924936295
    2. ' ' → logprob: -3.08640456199646
    3. ':' → logprob: -4.086404800415039
    4. '    ' → logprob: -4.711404800415039
    5. ' if' → logprob: -5.336404800415039
    6. ' :' → logprob: -6.086404800415039
    7. '  ' → logprob: -7.086404800415039
    8. ' h' → logprob: -7.211404800415039
    9. ' for' → logprob: -8.086404800415039
    10. 'if' → logprob: -8.211404800415039

Token 31: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -1.3438847064971924
    2. ' for' → logprob: -1.4688847064971924
    3. 'if' (adapté à ' if') → logprob: -1.5938847064971924
    4. 'for' → logprob: -2.0938847064971924
    5. '   ' → logprob: -2.3438847064971924
    6. ' h' → logprob: -3.0938847064971924
    7. 'h' → logprob: -3.8438847064971924
    8. 'j' → logprob: -5.718884468078613
    9. ' j' → logprob: -5.843884468078613
    10. ' k' → logprob: -6.593884468078613

Token 32: ' h' (ID: 312)
  Prédit: ' h'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' h' → logprob: -0.5205367207527161
    2. ' i' → logprob: -1.1455366611480713
    3. 'h' → logprob: -3.0205366611480713
    4. 'i' → logprob: -3.3955366611480713
    5. ' k' → logprob: -6.14553689956665
    6. ' n' → logprob: -6.39553689956665
    7. ' ' → logprob: -7.77053689956665
    8. 'k' → logprob: -8.020536422729492
    9. '   ' → logprob: -8.270536422729492
    10. ' abs' → logprob: -8.270536422729492

Token 33: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.0003246183041483164
    2. '[' → logprob: -8.125324249267578
    3. '[n' → logprob: -11.625324249267578
    4. '[j' → logprob: -11.750324249267578
    5. '[k' → logprob: -11.875324249267578
    6. '[-' → logprob: -13.625324249267578
    7. '[h' → logprob: -13.625324249267578
    8. '[min' → logprob: -15.125324249267578
    9. '[
' → logprob: -15.250324249267578
    10. ' [' → logprob: -15.375324249267578

Token 34: ']' (ID: 60)
  Prédit: ' >='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >=' → logprob: -0.5838077068328857
    2. ' >' → logprob: -1.5838077068328857
    3. '>' → logprob: -2.3338077068328857
    4. '>=' → logprob: -2.8338077068328857
    5. ']' → logprob: -3.5838077068328857
    6. '+' → logprob: -3.9588077068328857
    7. ' <' → logprob: -4.208807945251465
    8. ' +' → logprob: -4.833807945251465
    9. ' ' → logprob: -5.583807945251465
    10. ']>=' → logprob: -5.958807945251465

Token 35: ' >=' (ID: 5064)
  Prédit: ' >='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >=' → logprob: -0.13512690365314484
    2. '>=' → logprob: -2.885126829147339
    3. ' >' → logprob: -3.510126829147339
    4. ' <' → logprob: -4.135127067565918
    5. '>' → logprob: -4.885127067565918
    6. ' +' → logprob: -5.135127067565918
    7. '+' → logprob: -5.135127067565918
    8. ' ' → logprob: -6.260127067565918
    9. ' -' → logprob: -6.885127067565918
    10. '<' → logprob: -7.135127067565918

Token 36: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.1604124903678894
    2. ' k' → logprob: -1.9104125499725342
    3. 'h' → logprob: -9.285412788391113
    4. ' h' → logprob: -9.785412788391113
    5. ' ' → logprob: -11.285412788391113
    6. '1' → logprob: -12.285412788391113
    7. ' n' → logprob: -12.410412788391113
    8. '   ' → logprob: -12.972912788391113
    9. 'n' → logprob: -13.035412788391113
    10. '0' → logprob: -13.222912788391113

Token 37: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.001409878022968769
    2. ' :' → logprob: -6.751410007476807
    3. ':
' → logprob: -8.376409530639648
    4. ' :
' → logprob: -13.001409530639648
    5. '-' → logprob: -13.251409530639648
    6. '   ' → logprob: -14.001409530639648
    7. '):' → logprob: -14.376409530639648
    8. ' and' → logprob: -14.626409530639648
    9. ' break' → logprob: -14.626409530639648
    10. '+:' → logprob: -14.751409530639648

Token 38: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.22815588116645813
    2. ':' → logprob: -1.6031558513641357
    3. '   ' → logprob: -6.728156089782715
    4. ' break' → logprob: -7.603156089782715
    5. ' :' → logprob: -7.978156089782715
    6. ':
' → logprob: -8.228156089782715
    7. '    ' → logprob: -9.353156089782715
    8. 'break' → logprob: -9.728156089782715
    9. '           ' → logprob: -9.978156089782715
    10. '	break' → logprob: -10.103156089782715

Token 39: ' print' (ID: 2123)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.33804765343666077
    2. 'break' → logprob: -1.7130476236343384
    3. 'print' (adapté à ' print') → logprob: -2.463047742843628
    4. ' break' → logprob: -4.088047504425049
    5. ' print' → logprob: -6.213047504425049
    6. '   ' → logprob: -6.463047504425049
    7. '           ' → logprob: -7.463047504425049
    8. '```' → logprob: -8.338047981262207
    9. '	break' → logprob: -10.213047981262207
    10. 'b' → logprob: -10.713047981262207

Token 40: '(n' (ID: 2406)
  Prédit: 'h'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'h' → logprob: -0.4891849458217621
    2. 'i' → logprob: -1.7391849756240845
    3. '0' → logprob: -2.614184856414795
    4. 'k' → logprob: -2.614184856414795
    5. ' h' → logprob: -3.489184856414795
    6. ' i' → logprob: -4.614184856414795
    7. 'n' → logprob: -5.239184856414795
    8. '(i' → logprob: -5.239184856414795
    9. ' k' → logprob: -5.739184856414795
    10. ' ' → logprob: -5.864184856414795

Token 41: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.23870661854743958
    2. '-i' → logprob: -1.8637065887451172
    3. ' -' → logprob: -2.988706588745117
    4. ')' → logprob: -4.988706588745117
    5. 'i' → logprob: -10.863706588745117
    6. '   ' → logprob: -10.988706588745117
    7. '-k' → logprob: -11.738706588745117
    8. '-n' → logprob: -11.863706588745117
    9. '-
' → logprob: -12.113706588745117
    10. ' ' → logprob: -12.113706588745117

Token 42: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.00030161935137584805
    2. ' i' → logprob: -8.125301361083984
    3. '   ' → logprob: -12.250301361083984
    4. ' ' → logprob: -14.875301361083984
    5. '	i' → logprob: -15.375301361083984
    6. '1' → logprob: -16.250301361083984
    7. '  ' → logprob: -16.750301361083984
    8. ')i' → logprob: -18.500301361083984
    9. '[i' → logprob: -19.000301361083984
    10. '       ' → logprob: -19.125301361083984

Token 43: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.029779309406876564
    2. ')' → logprob: -3.5297791957855225
    3. ')
' → logprob: -10.529779434204102
    4. ' )
' → logprob: -13.654779434204102
    5. ')

' → logprob: -15.279779434204102
    6. ')`
' → logprob: -15.404779434204102
    7. '   ' → logprob: -15.529779434204102
    8. ')return' → logprob: -16.5297794342041
    9. ' )' → logprob: -16.6547794342041
    10. '       ' → logprob: -16.9047794342041

Token 44: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.027263246476650238
    2. '   ' → logprob: -3.6522631645202637
    3. 'else' → logprob: -7.902263164520264
    4. '<|end|>' → logprob: -7.902263164520264
    5. '```' → logprob: -9.152263641357422
    6. '           ' → logprob: -10.527263641357422
    7. ' else' → logprob: -10.652263641357422
    8. '#' → logprob: -11.152263641357422
    9. ' ' → logprob: -11.652263641357422
    10. '  ' → logprob: -12.152263641357422

Token 45: ' exit' (ID: 10654)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'break' → logprob: -0.015539669431746006
    2. '       ' → logprob: -4.265539646148682
    3. ' break' → logprob: -6.640539646148682
    4. '   ' → logprob: -10.26554012298584
    5. '	break' → logprob: -10.89054012298584
    6. '```' → logprob: -11.26554012298584
    7. 'else' → logprob: -13.89054012298584
    8. 'b' → logprob: -14.39054012298584
    9. '           ' → logprob: -15.01554012298584
    10. 'exit' (adapté à ' exit') → logprob: -15.26554012298584

Token 46: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00021343429398257285
    2. '(' → logprob: -8.500213623046875
    3. '()
' → logprob: -12.125213623046875
    4. '()`' → logprob: -13.250213623046875
    5. '()

' → logprob: -14.125213623046875
    6. '())' → logprob: -14.250213623046875
    7. '`()' → logprob: -15.250213623046875
    8. ' ()' → logprob: -15.375213623046875
    9. '()\' → logprob: -15.500213623046875
    10. '().' → logprob: -15.875213623046875

Token 47: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -5.013994814362377e-05
    2. '```' → logprob: -10.75005054473877
    3. 'else' → logprob: -11.00005054473877
    4. '0' → logprob: -11.37505054473877
    5. '``' → logprob: -15.12505054473877
    6. ' print' → logprob: -15.87505054473877
    7. '1' → logprob: -17.250049591064453
    8. '#print' → logprob: -18.375049591064453
    9. '    
' → logprob: -18.625049591064453
    10. '  
' → logprob: -19.125049591064453

Token 48: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.008693988434970379
    2. '(n' → logprob: -5.383694171905518
    3. '0' → logprob: -5.633694171905518
    4. '()' → logprob: -7.633694171905518
    5. 'n' → logprob: -12.75869369506836
    6. '(len' → logprob: -13.50869369506836
    7. ' (' → logprob: -14.25869369506836
    8. '()
' → logprob: -15.00869369506836
    9. '(
' → logprob: -15.13369369506836
    10. '((' → logprob: -15.50869369506836

Token 49: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.9385402993066236e-05
    2. 'n' → logprob: -11.625019073486328
    3. ' ' → logprob: -12.125019073486328
    4. '"' → logprob: -13.375019073486328
    5. '(' → logprob: -13.625019073486328
    6. ')' → logprob: -14.250019073486328
    7. ''' → logprob: -14.750019073486328
    8. '`' → logprob: -15.000019073486328
    9. '   ' → logprob: -15.750019073486328
    10. '00' → logprob: -16.250019073486328

Token 50: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.320199877838604e-07
    2. ' )' → logprob: -15.5
    3. ')
' → logprob: -16.875
    4. '))' → logprob: -16.875
    5. '）' → logprob: -17.875
    6. ')`' → logprob: -17.875
    7. '`)' → logprob: -18.25
    8. '')' → logprob: -20.375
    9. '())' → logprob: -20.625
    10. '()' → logprob: -21.0


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 48
Tokens correctement prédits (1ère position, stricte): 18
Tokens correctement prédits (1ère position, avec adaptation): 18
Tokens correctement prédits (top 10): 40
Précision stricte (1ère position): 37.50%
Précision adaptée (1ère position): 37.50%
Précision (top 10): 83.33%
================================================================================
