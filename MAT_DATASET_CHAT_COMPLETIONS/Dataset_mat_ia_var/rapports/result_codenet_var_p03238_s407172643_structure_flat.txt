================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:06:41
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from sys import stdin

input = lambda: stdin.readline()

N = int(input())
if N < 2:
    print('Hello World')
else:
    A = int(input())
    B = int(input())
    print(A + B)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' stdin' (ID: 75143)
  Prédit: 'argv'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'argv' → logprob: -0.0775282010436058
    2. ' argv' → logprob: -2.827528238296509
    3. 'exit' → logprob: -4.57752799987793
    4. ' exit' → logprob: -6.07752799987793
    5. 'stdout' → logprob: -6.45252799987793
    6. 'path' → logprob: -7.82752799987793
    7. 'stdin' → logprob: -7.82752799987793
    8. 'import' → logprob: -8.32752799987793
    9. 'version' → logprob: -9.57752799987793
    10. 'stderr' → logprob: -10.07752799987793

Token 4: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0006422612932510674
    2. '.readline' → logprob: -8.250641822814941
    3. '\n' → logprob: -8.500641822814941
    4. '.
' → logprob: -10.125641822814941
    5. 'import' → logprob: -10.250641822814941
    6. '\' → logprob: -10.500641822814941
    7. '```' → logprob: -10.875641822814941
    8. '.read' → logprob: -10.875641822814941
    9. '' → logprob: -12.000641822814941
    10. ',' → logprob: -12.125641822814941

Token 5: 'input' (ID: 2586)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0316447988152504
    2. '.readline' → logprob: -3.781644821166992
    3. '.read' → logprob: -6.031644821166992
    4. '\n' → logprob: -6.781644821166992
    5. 'for' → logprob: -6.781644821166992
    6. 'print' → logprob: -7.156644821166992
    7. 'import' → logprob: -7.406644821166992
    8. ',' → logprob: -7.531644821166992
    9. '
' → logprob: -7.781644821166992
    10. '```' → logprob: -8.156644821166992

Token 6: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.01810733787715435
    2. '.' → logprob: -4.1431074142456055
    3. '()' → logprob: -6.2681074142456055
    4. '(
' → logprob: -10.268107414245605
    5. ')' → logprob: -10.643107414245605
    6. '(.)' → logprob: -11.143107414245605
    7. '_' → logprob: -11.268107414245605
    8. '().' → logprob: -11.393107414245605
    9. '('.')' → logprob: -11.643107414245605
    10. '=' → logprob: -11.768107414245605

Token 7: ' lambda' (ID: 27871)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.42950910329818726
    2. ' stdin' → logprob: -1.054509162902832
    3. '(stdin' → logprob: -7.179509162902832
    4. '.stdin' → logprob: -10.179509162902832
    5. 'input' → logprob: -12.429509162902832
    6. 'stdout' → logprob: -13.804509162902832
    7. ' input' → logprob: -14.179509162902832
    8. 'lambda' → logprob: -14.804509162902832
    9. ' lambda' → logprob: -14.804509162902832
    10. ' std' → logprob: -15.179509162902832

Token 8: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.01011490449309349
    2. ' :' → logprob: -5.135114669799805
    3. ' line' → logprob: -6.135114669799805
    4. ' stdin' → logprob: -7.260114669799805
    5. 'line' → logprob: -7.385114669799805
    6. 'stdin' → logprob: -8.010114669799805
    7. ' x' → logprob: -9.385114669799805
    8. 'x' → logprob: -9.510114669799805
    9. '.readline' → logprob: -10.135114669799805
    10. ':void' → logprob: -10.510114669799805

Token 9: ' stdin' (ID: 75143)
  Prédit: 'stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stdin' → logprob: -0.0004511685692705214
    2. ' stdin' → logprob: -7.75045108795166
    3. '(stdin' → logprob: -11.00045108795166
    4. '.stdin' → logprob: -12.87545108795166
    5. 'stdout' → logprob: -13.75045108795166
    6. 'std' → logprob: -16.375452041625977
    7. 'sys' → logprob: -17.750452041625977
    8. 'stderr' → logprob: -17.875452041625977
    9. 'stdio' → logprob: -18.875452041625977
    10. 'st' → logprob: -19.250452041625977

Token 10: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.0003408263437449932
    2. '.read' → logprob: -8.000340461730957
    3. '.' → logprob: -12.500340461730957
    4. '.readlines' → logprob: -13.500340461730957
    5. 'read' → logprob: -15.375340461730957
    6. ' readline' → logprob: -17.000341415405273
    7. '.write' → logprob: -17.250341415405273
    8. '.Read' → logprob: -18.875341415405273
    9. '().' → logprob: -19.125341415405273
    10. '```' → logprob: -19.250341415405273

Token 11: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.02536977455019951
    2. '().' → logprob: -3.775369882583618
    3. '()
' → logprob: -6.400369644165039
    4. '()\' → logprob: -8.275369644165039
    5. '()

' → logprob: -9.650369644165039
    6. '(' → logprob: -9.775369644165039
    7. '()<' → logprob: -10.400369644165039
    8. ' ()' → logprob: -11.400369644165039
    9. '()+' → logprob: -11.650369644165039
    10. '()`' → logprob: -12.025369644165039

Token 12: 'N' (ID: 45)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -1.1076024770736694
    2. '<|end|>' → logprob: -1.1076024770736694
    3. '()' → logprob: -2.482602596282959
    4. '#' → logprob: -2.732602596282959
    5. '\n' → logprob: -2.982602596282959
    6. ' ' → logprob: -3.482602596282959
    7. ')' → logprob: -3.732602596282959
    8. '
' → logprob: -3.857602596282959
    9. 'x' → logprob: -4.482602596282959
    10. 'print' → logprob: -4.982602596282959

Token 13: ' =' (ID: 314)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.32129889726638794
    2. '=' → logprob: -2.571298837661743
    3. '<|end|>' → logprob: -2.946298837661743
    4. ' =' → logprob: -3.071298837661743
    5. ')' → logprob: -3.071298837661743
    6. '.' → logprob: -3.821298837661743
    7. '+' → logprob: -5.071299076080322
    8. '*' → logprob: -5.321299076080322
    9. '>' → logprob: -5.446299076080322
    10. '```' → logprob: -6.196299076080322

Token 14: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.013927715830504894
    2. 'int' → logprob: -4.638927936553955
    3. ' input' → logprob: -5.638927936553955
    4. ' ' → logprob: -7.763927936553955
    5. 'input' → logprob: -8.638927459716797
    6. '=int' → logprob: -13.388927459716797
    7. '10' → logprob: -14.263927459716797
    8. '  ' → logprob: -14.513927459716797
    9. '<int' → logprob: -14.763927459716797
    10. ' map' → logprob: -15.263927459716797

Token 15: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.027073564007878304
    2. '(' → logprob: -3.652073621749878
    3. '(stdin' → logprob: -7.277073383331299
    4. '('' → logprob: -9.902073860168457
    5. 'input' → logprob: -11.402073860168457
    6. '()' → logprob: -12.027073860168457
    7. ' (' → logprob: -12.527073860168457
    8. '(`' → logprob: -13.152073860168457
    9. '("' → logprob: -13.152073860168457
    10. '(N' → logprob: -13.777073860168457

Token 16: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.1606065183877945
    2. ')' → logprob: -2.160606622695923
    3. '()' → logprob: -3.410606622695923
    4. '(' → logprob: -9.660606384277344
    5. ' ())' → logprob: -11.535606384277344
    6. '))' → logprob: -11.660606384277344
    7. '()))' → logprob: -12.410606384277344
    8. '().' → logprob: -13.035606384277344
    9. '')' → logprob: -13.410606384277344
    10. '())
' → logprob: -13.660606384277344

Token 17: 'if' (ID: 366)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.25137242674827576
    2. ' ' → logprob: -2.0013723373413086
    3. ' for' → logprob: -3.2513723373413086
    4. '\n' → logprob: -4.376372337341309
    5. 'data' → logprob: -4.626372337341309
    6. 'a' → logprob: -5.751372337341309
    7. 's' → logprob: -5.876372337341309
    8. '\' → logprob: -6.001372337341309
    9. '#' → logprob: -6.126372337341309
    10. ' 
' → logprob: -6.626372337341309

Token 18: ' N' (ID: 478)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3873150944709778
    2. ' N' → logprob: -1.137315034866333
    3. '  ' → logprob: -8.887314796447754
    4. 'N' → logprob: -9.012314796447754
    5. ' not' → logprob: -9.012314796447754
    6. ' ' → logprob: -11.012314796447754
    7. ' )' → logprob: -11.637314796447754
    8. '<|end|>' → logprob: -11.887314796447754
    9. ' (' → logprob: -12.012314796447754
    10. ' input' → logprob: -12.012314796447754

Token 19: ' <' (ID: 464)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.043295811861753464
    2. ' ==' → logprob: -4.168295860290527
    3. '>' → logprob: -4.668295860290527
    4. ' <' → logprob: -4.918295860290527
    5. ' ' → logprob: -5.418295860290527
    6. ' %' → logprob: -5.793295860290527
    7. ' >=' → logprob: -6.668295860290527
    8. ' <=' → logprob: -7.293295860290527
    9. '%' → logprob: -8.293295860290527
    10. '==' → logprob: -8.543295860290527

Token 20: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5231183767318726
    2. '=' → logprob: -1.0231183767318726
    3. '0' → logprob: -3.648118495941162
    4. '10' → logprob: -4.523118495941162
    5. ' =' → logprob: -5.773118495941162
    6. '20' → logprob: -5.773118495941162
    7. '1' → logprob: -6.773118495941162
    8. '3' → logprob: -7.023118495941162
    9. '5' → logprob: -7.273118495941162
    10. '2' → logprob: -7.523118495941162

Token 21: '2' (ID: 17)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.0866385698318481
    2. '=' → logprob: -1.3366385698318481
    3. '10' → logprob: -1.5866385698318481
    4. '0' → logprob: -2.0866384506225586
    5. '1' → logprob: -3.2116384506225586
    6. '5' → logprob: -4.836638450622559
    7. '3' → logprob: -5.086638450622559
    8. '100' → logprob: -5.461638450622559
    9. '20' → logprob: -5.461638450622559
    10. '2' → logprob: -5.961638450622559

Token 22: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00017445837147533894
    2. ' :' → logprob: -8.875174522399902
    3. ':
' → logprob: -10.375174522399902
    4. '):' → logprob: -13.250174522399902
    5. '>:' → logprob: -14.250174522399902
    6. ' or' → logprob: -15.250174522399902
    7. ':**' → logprob: -15.500174522399902
    8. '():' → logprob: -16.125173568725586
    9. ':return' → logprob: -16.125173568725586
    10. ' :
' → logprob: -16.875173568725586

Token 23: '   ' (ID: 271)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.6317174434661865
    2. '   ' → logprob: -0.8817174434661865
    3. '    ' → logprob: -4.006717681884766
    4. '\n' → logprob: -4.256717681884766
    5. 'print' → logprob: -4.256717681884766
    6. ' pass' → logprob: -5.881717681884766
    7. ' ' → logprob: -6.881717681884766
    8. '    
' → logprob: -7.006717681884766
    9. ' 
' → logprob: -7.131717681884766
    10. '	print' → logprob: -7.756717681884766

Token 24: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.013137880712747574
    2. 'print' (adapté à ' print') → logprob: -4.7631378173828125
    3. ' pass' → logprob: -6.2631378173828125
    4. '   ' → logprob: -6.6381378173828125
    5. '    ' → logprob: -6.8881378173828125
    6. ' ' → logprob: -9.388137817382812
    7. ' exit' → logprob: -9.513137817382812
    8. ' 
' → logprob: -10.263137817382812
    9. 'pass' → logprob: -10.513137817382812
    10. '\n' → logprob: -11.388137817382812

Token 25: '('' (ID: 706)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.7319616079330444
    2. '(' → logprob: -0.8569616079330444
    3. '(N' → logprob: -2.606961727142334
    4. '("' → logprob: -4.231961727142334
    5. '('' → logprob: -5.356961727142334
    6. '("")' → logprob: -6.856961727142334
    7. '(None' → logprob: -8.481961250305176
    8. '(-' → logprob: -8.981961250305176
    9. '(False' → logprob: -9.481961250305176
    10. '("("' → logprob: -10.481961250305176

Token 26: 'Hello' (ID: 13225)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.0256577730178833
    2. 'No' → logprob: -1.2756577730178833
    3. '-' → logprob: -2.4006576538085938
    4. '1' → logprob: -2.5256576538085938
    5. 'NO' → logprob: -3.2756576538085938
    6. '2' → logprob: -3.5256576538085938
    7. 'N' → logprob: -3.7756576538085938
    8. 'no' → logprob: -4.150657653808594
    9. 'Hello' → logprob: -4.400657653808594
    10. ' ' → logprob: -4.650657653808594

Token 27: ' World' (ID: 5922)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.29216036200523376
    2. ',' → logprob: -2.0421602725982666
    3. 'World' → logprob: -2.6671602725982666
    4. ' World' → logprob: -3.5421602725982666
    5. '!' → logprob: -4.042160511016846
    6. ' world' → logprob: -5.792160511016846
    7. '')
' → logprob: -6.042160511016846
    8. ')' → logprob: -7.292160511016846
    9. '')
' → logprob: -8.167160034179688
    10. ' ')' → logprob: -8.542160034179688

Token 28: '')
' (ID: 2515)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.05614409223198891
    2. '!' → logprob: -3.3061439990997314
    3. '')
' → logprob: -4.0561442375183105
    4. '!')
' → logprob: -7.8061442375183105
    5. '')
' → logprob: -8.681143760681152
    6. ')' → logprob: -10.181143760681152
    7. '")' → logprob: -12.806143760681152
    8. '()' → logprob: -13.431143760681152
    9. '!)' → logprob: -13.681143760681152
    10. ''' → logprob: -13.806143760681152

Token 29: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.007300279103219509
    2. 'elif' → logprob: -5.88230037689209
    3. ' else' → logprob: -6.00730037689209
    4. '
' → logprob: -6.75730037689209
    5. '   ' → logprob: -7.38230037689209
    6. '    
' → logprob: -9.63230037689209
    7. '```' → logprob: -10.00730037689209
    8. ')' → logprob: -10.25730037689209
    9. '<|end|>' → logprob: -10.38230037689209
    10. '\n' → logprob: -10.38230037689209

Token 30: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -8.828512363834307e-05
    2. ':
' → logprob: -10.125088691711426
    3. '   ' → logprob: -10.375088691711426
    4. ' :' → logprob: -11.625088691711426
    5. '```' → logprob: -13.000088691711426
    6. ',' → logprob: -13.500088691711426
    7. '<|end|>' → logprob: -13.625088691711426
    8. '):' → logprob: -14.750088691711426
    9. 'print' → logprob: -14.750088691711426
    10. '():' → logprob: -14.750088691711426

Token 31: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0018153596902266145
    2. '    
' → logprob: -6.626815319061279
    3. '    ' → logprob: -8.626815795898438
    4. 'print' → logprob: -9.251815795898438
    5. ' print' → logprob: -9.376815795898438
    6. '       ' → logprob: -9.876815795898438
    7. '```' → logprob: -10.501815795898438
    8. '<|end|>' → logprob: -12.126815795898438
    9. ' ' → logprob: -12.501815795898438
    10. '    
    
' → logprob: -12.564315795898438

Token 32: ' A' (ID: 355)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01803732104599476
    2. ' for' → logprob: -4.39303731918335
    3. ' print' → logprob: -6.01803731918335
    4. '    ' → logprob: -6.76803731918335
    5. '    
' → logprob: -7.01803731918335
    6. 'print' → logprob: -7.64303731918335
    7. 'for' → logprob: -8.018037796020508
    8. '```' → logprob: -9.518037796020508
    9. ' sum' → logprob: -10.268037796020508
    10. ' ' → logprob: -10.268037796020508

Token 33: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2827743589878082
    2. ',' → logprob: -1.7827743291854858
    3. '=' → logprob: -2.6577744483947754
    4. ' ,' → logprob: -5.782774448394775
    5. '[' → logprob: -6.282774448394775
    6. ' ' → logprob: -7.157774448394775
    7. ',b' → logprob: -7.282774448394775
    8. ',B' → logprob: -7.907774448394775
    9. '=int' → logprob: -9.032773971557617
    10. '[i' → logprob: -9.282773971557617

Token 34: ' int' (ID: 677)
  Prédit: '[int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[int' → logprob: -0.6410454511642456
    2. 'int' → logprob: -1.3910454511642456
    3. 'list' → logprob: -2.016045570373535
    4. '[]' → logprob: -2.891045570373535
    5. '[' → logprob: -4.391045570373535
    6. ' list' → logprob: -4.891045570373535
    7. ' int' → logprob: -5.516045570373535
    8. ' [' → logprob: -5.516045570373535
    9. '[N' → logprob: -5.891045570373535
    10. ' []' → logprob: -6.141045570373535

Token 35: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -3.5597102396423e-05
    2. '(' → logprob: -10.375035285949707
    3. 'input' → logprob: -12.375035285949707
    4. ' (' → logprob: -16.250036239624023
    5. '=input' → logprob: -16.750036239624023
    6. ' input' → logprob: -17.375036239624023
    7. ',input' → logprob: -18.125036239624023
    8. '()' → logprob: -19.125036239624023
    9. '	input' → logprob: -19.375036239624023
    10. '(stdin' → logprob: -19.375036239624023

Token 36: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.008886249735951424
    2. '()' → logprob: -4.758886337280273
    3. '())
' → logprob: -8.758886337280273
    4. ')' → logprob: -9.258886337280273
    5. '()
' → logprob: -11.008886337280273
    6. '())

' → logprob: -13.508886337280273
    7. ' ())' → logprob: -15.133886337280273
    8. '(' → logprob: -15.258886337280273
    9. '();)' → logprob: -15.258886337280273
    10. '().' → logprob: -15.633886337280273

Token 37: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.039313942193984985
    2. '<|end|>' → logprob: -3.289314031600952
    3. ' B' → logprob: -7.664313793182373
    4. '<|end|>' → logprob: -8.414314270019531
    5. '    ' → logprob: -8.539314270019531
    6. '    
' → logprob: -9.164314270019531
    7. ' ' → logprob: -9.789314270019531
    8. 'print' → logprob: -10.289314270019531
    9. 'B' → logprob: -10.539314270019531
    10. ')' → logprob: -10.789314270019531

Token 38: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' (adapté à ' B') → logprob: -0.5704092979431152
    2. '   ' → logprob: -1.3204092979431152
    3. ' B' → logprob: -1.8204092979431152
    4. '    ' → logprob: -6.195409297943115
    5. ' ' → logprob: -6.695409297943115
    6. '	B' → logprob: -7.195409297943115
    7. '+B' → logprob: -8.070409774780273
    8. 'print' → logprob: -8.695409774780273
    9. '+' → logprob: -9.070409774780273
    10. '<|end|>' → logprob: -9.195409774780273

Token 39: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.02328786998987198
    2. '=' → logprob: -3.773287773132324
    3. ' ' → logprob: -10.648287773132324
    4. '=input' → logprob: -11.898287773132324
    5. ')' → logprob: -12.148287773132324
    6. '=int' → logprob: -13.273287773132324
    7. ' +=' → logprob: -13.398287773132324
    8. '+' → logprob: -14.523287773132324
    9. ' )' → logprob: -14.773287773132324
    10. '.' → logprob: -14.898287773132324

Token 40: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.25193676352500916
    2. 'int' → logprob: -1.5019367933273315
    3. ' ' → logprob: -13.001936912536621
    4. '   ' → logprob: -13.126936912536621
    5. ' A' → logprob: -13.376936912536621
    6. '=int' → logprob: -14.501936912536621
    7. '  ' → logprob: -14.876936912536621
    8. '(int' → logprob: -15.126936912536621
    9. '	int' → logprob: -15.376936912536621
    10. '[int' → logprob: -15.501936912536621

Token 41: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0015753291081637144
    2. '(' → logprob: -6.501575469970703
    3. '()' → logprob: -9.876575469970703
    4. 'input' → logprob: -11.251575469970703
    5. ' (' → logprob: -12.251575469970703
    6. ' input' → logprob: -13.751575469970703
    7. '[input' → logprob: -14.001575469970703
    8. '=input' → logprob: -14.251575469970703
    9. '<input' → logprob: -15.501575469970703
    10. '(stdin' → logprob: -15.751575469970703

Token 42: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.6691761016845703
    2. ')' → logprob: -0.9191761016845703
    3. '()' → logprob: -2.4191761016845703
    4. '())
' → logprob: -11.79417610168457
    5. '(' → logprob: -12.41917610168457
    6. ' ())' → logprob: -12.41917610168457
    7. '()
' → logprob: -12.91917610168457
    8. ' )' → logprob: -13.04417610168457
    9. '))' → logprob: -13.79417610168457
    10. ')
' → logprob: -14.16917610168457

Token 43: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.056831445544958115
    2. '
' → logprob: -4.181831359863281
    3. '<|end|>' → logprob: -4.306831359863281
    4. '    
' → logprob: -4.556831359863281
    5. 'print' → logprob: -4.556831359863281
    6. '\n' → logprob: -6.056831359863281
    7. '  
' → logprob: -6.556831359863281
    8. ' print' → logprob: -7.681831359863281
    9. '```' → logprob: -7.806831359863281
    10. ' 
' → logprob: -8.681831359863281

Token 44: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.006472829729318619
    2. 'print' (adapté à ' print') → logprob: -6.006473064422607
    3. '    
' → logprob: -6.256473064422607
    4. '
' → logprob: -6.381473064422607
    5. ' print' → logprob: -8.75647258758545
    6. '\n' → logprob: -8.88147258758545
    7. '```' → logprob: -10.13147258758545
    8. '  
' → logprob: -11.25647258758545
    9. '	print' → logprob: -12.38147258758545
    10. ' 
' → logprob: -12.38147258758545

Token 45: '(A' (ID: 10706)
  Prédit: '(A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(A' → logprob: -0.12900115549564362
    2. '(' → logprob: -2.1290011405944824
    3. '('' → logprob: -6.254001140594482
    4. '((' → logprob: -10.25400161743164
    5. ' (' → logprob: -10.50400161743164
    6. 'A' → logprob: -10.75400161743164
    7. '(a' → logprob: -11.00400161743164
    8. '("' → logprob: -11.25400161743164
    9. '(f' → logprob: -11.50400161743164
    10. '()' → logprob: -11.87900161743164

Token 46: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.3138982951641083
    2. ' +' → logprob: -1.3138983249664307
    3. '+B' → logprob: -7.438898086547852
    4. ' ' → logprob: -10.938898086547852
    5. ')' → logprob: -10.938898086547852
    6. '+)' → logprob: -12.688898086547852
    7. ' )' → logprob: -12.688898086547852
    8. '*' → logprob: -12.938898086547852
    9. '+b' → logprob: -13.688898086547852
    10. ' ,' → logprob: -14.063898086547852

Token 47: ' B' (ID: 418)
  Prédit: ' B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.31326526403427124
    2. 'B' → logprob: -1.313265323638916
    3. ' ' → logprob: -13.563264846801758
    4. '    ' → logprob: -13.688264846801758
    5. '   ' → logprob: -14.688264846801758
    6. ')' → logprob: -14.688264846801758
    7. '	B' → logprob: -15.563264846801758
    8. '  ' → logprob: -17.688264846801758
    9. '<|end|>' → logprob: -17.813264846801758
    10. ' )' → logprob: -17.938264846801758

Token 48: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.2664456789934775e-06
    2. '))' → logprob: -14.500000953674316
    3. '')' → logprob: -14.875000953674316
    4. ' )' → logprob: -15.375000953674316
    5. '`)' → logprob: -16.875001907348633
    6. ')`' → logprob: -17.625001907348633
    7. '())' → logprob: -17.750001907348633
    8. ')
' → logprob: -18.000001907348633
    9. '()' → logprob: -18.000001907348633
    10. '```' → logprob: -18.750001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 46
Tokens correctement prédits (1ère position, stricte): 18
Tokens correctement prédits (1ère position, avec adaptation): 19
Tokens correctement prédits (top 10): 39
Précision stricte (1ère position): 39.13%
Précision adaptée (1ère position): 41.30%
Précision (top 10): 84.78%
================================================================================
