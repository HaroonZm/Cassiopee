================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:31:55
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import itertools

N = int(input())
P = tuple(map(int, input().split()))
Q = tuple(map(int, input().split()))

if P == Q:
    print(0)
else:
    PQ = [P, Q]
    PQ = sorted(PQ)
    li = list(range(1, N + 1))
    i = 0
    j = 0
    a = []
    stop = False
    for v in itertools.permutations(li, N):
        j += 1
        if PQ[i] == v:
            a.append(j)
            if i == 1:
                stop = True
                break
            else:
                i += 1
    ans = a[1] - a[0]
    print(ans)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' itertools' (ID: 103178)
  → Token d'amorce (pas de prédiction)

Token 2: '

' (ID: 279)
  → Token d'amorce (pas de prédiction)

Token 3: 'N' (ID: 45)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -1.676292231422849e-05
    2. '\' → logprob: -13.000017166137695
    3. '(' → logprob: -13.125017166137695
    4. '```' → logprob: -13.375017166137695
    5. 'as' → logprob: -13.500017166137695
    6. 'import' → logprob: -13.500017166137695
    7. ' as' → logprob: -13.625017166137695
    8. '\.' → logprob: -13.750017166137695
    9. ',' → logprob: -13.875017166137695
    10. '.`' → logprob: -14.250017166137695

Token 4: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.4013555645942688
    2. '_' → logprob: -2.026355504989624
    3. '=' → logprob: -2.276355504989624
    4. ',' → logprob: -3.151355504989624
    5. ' =' → logprob: -4.026355743408203
    6. ' ' → logprob: -4.151355743408203
    7. '[' → logprob: -5.026355743408203
    8. ')' → logprob: -5.651355743408203
    9. 'T' → logprob: -5.901355743408203
    10. 'u' → logprob: -6.901355743408203

Token 5: ' int' (ID: 677)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.006553609389811754
    2. ' itertools' → logprob: -5.756553649902344
    3. '10' → logprob: -6.881553649902344
    4. '5' → logprob: -6.881553649902344
    5. '4' → logprob: -7.006553649902344
    6. '3' → logprob: -8.006553649902344
    7. '1' → logprob: -10.506553649902344
    8. ' int' → logprob: -11.256553649902344
    9. '6' → logprob: -11.631553649902344
    10. 'it' → logprob: -12.506553649902344

Token 6: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -4.847109812544659e-05
    2. ' (' → logprob: -10.875048637390137
    3. '('' → logprob: -12.250048637390137
    4. ''' → logprob: -12.375048637390137
    5. '```' → logprob: -12.500048637390137
    6. '()' → logprob: -12.625048637390137
    7. '(
' → logprob: -13.000048637390137
    8. ')' → logprob: -13.125048637390137
    9. '(N' → logprob: -13.250048637390137
    10. '`' → logprob: -13.500048637390137

Token 7: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.18248197436332703
    2. '()' → logprob: -2.4324820041656494
    3. ')' → logprob: -2.8074820041656494
    4. '())' → logprob: -4.05748176574707
    5. '(
' → logprob: -7.30748176574707
    6. '(

' → logprob: -8.68248176574707
    7. '))' → logprob: -8.93248176574707
    8. '('' → logprob: -9.05748176574707
    9. '`)' → logprob: -10.30748176574707
    10. '("("' → logprob: -10.43248176574707

Token 8: 'P' (ID: 47)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.9965741634368896
    2. 'for' → logprob: -1.8715741634368896
    3. 'a' → logprob: -2.2465741634368896
    4. '_' → logprob: -2.6215741634368896
    5. '(' → logprob: -2.7465741634368896
    6. '[' → logprob: -3.1215741634368896
    7. '.' → logprob: -3.6215741634368896
    8. 'data' → logprob: -3.9965741634368896
    9. '*' → logprob: -4.121574401855469
    10. 's' → logprob: -4.246574401855469

Token 9: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.4786316454410553
    2. '.' → logprob: -2.1036317348480225
    3. 'erm' → logprob: -2.2286317348480225
    4. '[:]' → logprob: -2.6036317348480225
    5. '[i' → logprob: -4.103631496429443
    6. 'ermut' → logprob: -4.103631496429443
    7. '[]' → logprob: -4.353631496429443
    8. 'ERM' → logprob: -5.228631496429443
    9. '[I' → logprob: -5.853631496429443
    10. 'r' → logprob: -6.103631496429443

Token 10: ' tuple' (ID: 31311)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.49226680397987366
    2. ' list' → logprob: -1.3672667741775513
    3. ' itertools' → logprob: -2.492266893386841
    4. 'it' → logprob: -2.992266893386841
    5. ' [' → logprob: -8.117266654968262
    6. '[' → logprob: -8.242266654968262
    7. '[list' → logprob: -8.742266654968262
    8. ' it' → logprob: -9.367266654968262
    9. '[it' → logprob: -9.867266654968262
    10. 'tuple' → logprob: -10.492266654968262

Token 11: '(map' (ID: 16946)
  Prédit: '(it'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(it' → logprob: -0.03403879329562187
    2. '(' → logprob: -3.409038782119751
    3. '(range' → logprob: -8.409038543701172
    4. '(int' → logprob: -10.284038543701172
    5. '(iter' → logprob: -10.659038543701172
    6. '(list' → logprob: -10.784038543701172
    7. ' itertools' → logprob: -10.784038543701172
    8. '(input' → logprob: -11.409038543701172
    9. '([' → logprob: -11.909038543701172
    10. '(import' → logprob: -12.034038543701172

Token 12: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0041363416239619255
    2. '(' → logprob: -5.879136562347412
    3. 'int' → logprob: -7.004136562347412
    4. '(str' → logprob: -8.379136085510254
    5. '(lambda' → logprob: -9.504136085510254
    6. 'list' → logprob: -10.004136085510254
    7. '<int' → logprob: -10.504136085510254
    8. '=int' → logprob: -11.379136085510254
    9. '[int' → logprob: -11.754136085510254
    10. '```' → logprob: -11.754136085510254

Token 13: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.6166917085647583
    2. ',' → logprob: -1.4916917085647583
    3. ',input' → logprob: -1.6166917085647583
    4. '(' → logprob: -3.6166915893554688
    5. '))' → logprob: -5.866691589355469
    6. ')' → logprob: -6.241691589355469
    7. 'input' → logprob: -6.366691589355469
    8. ' ,' → logprob: -6.991691589355469
    9. '),' → logprob: -6.991691589355469
    10. '(),' → logprob: -8.366691589355469

Token 14: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.023349134251475334
    2. ' input' → logprob: -3.7733490467071533
    3. '(input' → logprob: -10.273348808288574
    4. 'range' → logprob: -10.398348808288574
    5. ',input' → logprob: -10.773348808288574
    6. ')' → logprob: -12.273348808288574
    7. '=input' → logprob: -12.398348808288574
    8. ' range' → logprob: -12.898348808288574
    9. '	input' → logprob: -13.273348808288574
    10. ' ' → logprob: -13.648348808288574

Token 15: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.00011570196511456743
    2. '()))' → logprob: -9.875115394592285
    3. '()' → logprob: -10.375115394592285
    4. '(' → logprob: -11.375115394592285
    5. '())' → logprob: -11.750115394592285
    6. '))' → logprob: -11.875115394592285
    7. '(),' → logprob: -13.000115394592285
    8. ')' → logprob: -13.250115394592285
    9. ' ().' → logprob: -14.375115394592285
    10. '.split' → logprob: -15.000115394592285

Token 16: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0004320996522437781
    2. 'strip' → logprob: -7.750432014465332
    3. 'rstrip' → logprob: -14.500432014465332
    4. ' split' → logprob: -14.625432014465332
    5. '(split' → logprob: -15.000432014465332
    6. ')' → logprob: -16.00043296813965
    7. 's' → logprob: -17.50043296813965
    8. 'read' → logprob: -18.00043296813965
    9. 'spl' → logprob: -18.12543296813965
    10. '.split' → logprob: -19.50043296813965

Token 17: '()))
' (ID: 24521)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.004679088015109301
    2. ')' → logprob: -5.629679203033447
    3. '()))' → logprob: -7.129679203033447
    4. '(' → logprob: -8.504678726196289
    5. ')))' → logprob: -10.129678726196289
    6. ''))' → logprob: -11.754678726196289
    7. '),' → logprob: -12.129678726196289
    8. '())' → logprob: -12.129678726196289
    9. ' ))' → logprob: -12.504678726196289
    10. '()' → logprob: -12.754678726196289

Token 18: 'Q' (ID: 48)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.1457955241203308
    2. ')' → logprob: -2.1457955837249756
    3. ')
' → logprob: -5.2707953453063965
    4. '\n' → logprob: -6.1457953453063965
    5. '\' → logprob: -6.2707953453063965
    6. '(' → logprob: -6.2707953453063965
    7. 'if' → logprob: -6.3957953453063965
    8. '.' → logprob: -7.0207953453063965
    9. '.
' → logprob: -7.1457953453063965
    10. 'possible' → logprob: -7.6457953453063965

Token 19: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.006799917668104172
    2. '=' → logprob: -5.006799697875977
    3. ')' → logprob: -9.881799697875977
    4. '_' → logprob: -11.131799697875977
    5. ' =)' → logprob: -11.881799697875977
    6. ' )' → logprob: -13.131799697875977
    7. 's' → logprob: -13.131799697875977
    8. '[' → logprob: -13.631799697875977
    9. '.' → logprob: -13.881799697875977
    10. '(' → logprob: -14.256799697875977

Token 20: ' tuple' (ID: 31311)
  Prédit: 'tuple'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tuple' → logprob: -0.25194698572158813
    2. ' tuple' → logprob: -1.5019469261169434
    3. '(tuple' → logprob: -11.001947402954102
    4. 'list' → logprob: -14.751947402954102
    5. 'int' → logprob: -15.001947402954102
    6. ' ' → logprob: -16.1269474029541
    7. 'tu' → logprob: -16.2519474029541
    8. 't' → logprob: -16.5019474029541
    9. '_tuple' → logprob: -16.8769474029541
    10. ' list' → logprob: -17.3769474029541

Token 21: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.28460004925727844
    2. '(it' → logprob: -2.034600019454956
    3. '(' → logprob: -2.159600019454956
    4. '(int' → logprob: -6.909600257873535
    5. '(import' → logprob: -7.784600257873535
    6. ' (' → logprob: -9.659600257873535
    7. '(list' → logprob: -10.409600257873535
    8. '(iter' → logprob: -10.909600257873535
    9. '(range' → logprob: -11.409600257873535
    10. 'it' → logprob: -11.534600257873535

Token 22: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.00010330478107789531
    2. 'int' → logprob: -10.125102996826172
    3. '<int' → logprob: -10.500102996826172
    4. '=int' → logprob: -10.875102996826172
    5. '(' → logprob: -11.625102996826172
    6. '[int' → logprob: -12.375102996826172
    7. ',int' → logprob: -13.000102996826172
    8. ']int' → logprob: -14.625102996826172
    9. '```' → logprob: -14.750102996826172
    10. ':int' → logprob: -15.750102996826172

Token 23: ',' (ID: 11)
  Prédit: ',int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',int' → logprob: -0.5917945504188538
    2. '(int' → logprob: -0.8417945504188538
    3. ',' → logprob: -4.216794490814209
    4. 'int' → logprob: -7.341794490814209
    5. '<int' → logprob: -8.966794967651367
    6. '[int' → logprob: -9.216794967651367
    7. '=int' → logprob: -9.591794967651367
    8. ':int' → logprob: -10.966794967651367
    9. '(' → logprob: -11.966794967651367
    10. ' ,' → logprob: -12.341794967651367

Token 24: ' input' (ID: 3422)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.0006396461394615471
    2. 'input' → logprob: -8.000639915466309
    3. ' int' → logprob: -8.125639915466309
    4. '(int' → logprob: -12.250639915466309
    5. ' input' → logprob: -13.500639915466309
    6. '<int' → logprob: -14.000639915466309
    7. '[int' → logprob: -14.000639915466309
    8. '=int' → logprob: -16.375638961791992
    9. ',int' → logprob: -16.375638961791992
    10. 'import' → logprob: -16.375638961791992

Token 25: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0734395757317543
    2. '(int' → logprob: -2.698439598083496
    3. '(' → logprob: -6.323439598083496
    4. '()' → logprob: -7.823439598083496
    5. '=int' → logprob: -8.073439598083496
    6. 'int' → logprob: -8.448439598083496
    7. '```' → logprob: -8.698439598083496
    8. '())' → logprob: -9.073439598083496
    9. '()))' → logprob: -9.073439598083496
    10. '(),' → logprob: -9.323439598083496

Token 26: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -7.896309739408025e-07
    2. ')' → logprob: -15.375000953674316
    3. ' split' → logprob: -15.750000953674316
    4. 'spl' → logprob: -16.25
    5. '))' → logprob: -16.5
    6. 'int' → logprob: -16.625
    7. '(split' → logprob: -16.625
    8. 'strip' → logprob: -17.25
    9. 'plit' → logprob: -18.0
    10. '.split' → logprob: -18.125

Token 27: '()))

' (ID: 125972)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.3379007577896118
    2. '()))' → logprob: -1.3379007577896118
    3. ')' → logprob: -4.337900638580322
    4. '())' → logprob: -4.712900638580322
    5. '()' → logprob: -6.087900638580322
    6. '()))
' → logprob: -12.08790111541748
    7. ')))' → logprob: -12.21290111541748
    8. '(' → logprob: -12.58790111541748
    9. ''))' → logprob: -12.96290111541748
    10. '()));' → logprob: -13.08790111541748

Token 28: 'if' (ID: 366)
  Prédit: 'per'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'per' → logprob: -0.13314157724380493
    2. 'all' → logprob: -2.63314151763916
    3. 'perm' → logprob: -3.75814151763916
    4. 'def' → logprob: -4.75814151763916
    5. 'factor' → logprob: -4.75814151763916
    6. 'fact' → logprob: -5.75814151763916
    7. 'for' → logprob: -6.25814151763916
    8. 'indices' → logprob: -7.00814151763916
    9. 'a' → logprob: -7.13314151763916
    10. 'pos' → logprob: -7.50814151763916

Token 29: ' P' (ID: 398)
  Prédit: ' P'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' P' → logprob: -0.3229627311229706
    2. 'P' → logprob: -1.447962760925293
    3. ' len' → logprob: -4.447962760925293
    4. ' ' → logprob: -4.947962760925293
    5. ' all' → logprob: -5.197962760925293
    6. 'len' → logprob: -5.197962760925293
    7. ' N' → logprob: -5.322962760925293
    8. 'N' → logprob: -6.197962760925293
    9. ' sorted' → logprob: -7.197962760925293
    10. 'all' → logprob: -7.322962760925293

Token 30: ' ==' (ID: 951)
  Prédit: ' <'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -1.3163964748382568
    2. ' ==' → logprob: -1.3163964748382568
    3. ' !=' → logprob: -1.9413964748382568
    4. '[' → logprob: -2.441396474838257
    5. '_' → logprob: -2.566396474838257
    6. '==' → logprob: -3.441396474838257
    7. '<' → logprob: -3.691396474838257
    8. ' in' → logprob: -3.941396474838257
    9. '!=' → logprob: -3.941396474838257
    10. ' not' → logprob: -4.066396713256836

Token 31: ' Q' (ID: 1486)
  Prédit: 'Q'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Q' → logprob: -0.006491662003099918
    2. 'tuple' → logprob: -6.256491661071777
    3. ' Q' → logprob: -6.506491661071777
    4. '()' → logprob: -6.631491661071777
    5. '():' → logprob: -7.006491661071777
    6. '(' → logprob: -7.506491661071777
    7. ' tuple' → logprob: -9.506491661071777
    8. '(Q' → logprob: -9.631491661071777
    9. 'sorted' → logprob: -9.881491661071777
    10. '(tuple' → logprob: -10.631491661071777

Token 32: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -7.255023956531659e-05
    2. ':
' → logprob: -10.250072479248047
    3. ' :' → logprob: -10.250072479248047
    4. ':return' → logprob: -13.500072479248047
    5. '):' → logprob: -16.250072479248047
    6. ':**' → logprob: -16.375072479248047
    7. '.' → logprob: -16.750072479248047
    8. ':
' → logprob: -17.500072479248047
    9. ':

' → logprob: -17.500072479248047
    10. ':\' → logprob: -17.750072479248047

Token 33: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.0251628160476685
    2. 'print' → logprob: -1.4001628160476685
    3. '\n' → logprob: -1.9001628160476685
    4. '   ' → logprob: -2.150162696838379
    5. ':
' → logprob: -2.775162696838379
    6. ' print' → logprob: -3.025162696838379
    7. '\' → logprob: -5.025162696838379
    8. '
' → logprob: -6.275162696838379
    9. ' :' → logprob: -6.275162696838379
    10. '0' → logprob: -6.525162696838379

Token 34: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.681138813495636
    2. 'print' (adapté à ' print') → logprob: -0.931138813495636
    3. '   ' → logprob: -2.306138753890991
    4. '0' → logprob: -9.05613899230957
    5. '\n' → logprob: -10.18113899230957
    6. '```' → logprob: -10.80613899230957
    7. ' ' → logprob: -11.18113899230957
    8. '	print' → logprob: -12.43113899230957
    9. ' \' → logprob: -12.80613899230957
    10. '\' → logprob: -12.80613899230957

Token 35: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.002382664941251278
    2. '(P' → logprob: -6.377382755279541
    3. '("' → logprob: -8.002382278442383
    4. '('' → logprob: -8.377382278442383
    5. '(N' → logprob: -10.252382278442383
    6. '(Q' → logprob: -10.752382278442383
    7. '0' → logprob: -11.002382278442383
    8. '("("' → logprob: -11.002382278442383
    9. '((' → logprob: -11.752382278442383
    10. '()' → logprob: -12.377382278442383

Token 36: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -7.386147626675665e-05
    2. '1' → logprob: -10.250073432922363
    3. ' ' → logprob: -11.000073432922363
    4. '"' → logprob: -11.250073432922363
    5. 'P' → logprob: -12.000073432922363
    6. '   ' → logprob: -14.125073432922363
    7. ''' → logprob: -14.500073432922363
    8. '-' → logprob: -14.750073432922363
    9. ')' → logprob: -15.000073432922363
    10. 'N' → logprob: -15.625073432922363

Token 37: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0017157548572868109
    2. ')
' → logprob: -6.376715660095215
    3. 'else' → logprob: -11.626715660095215
    4. '   ' → logprob: -13.376715660095215
    5. ')
' → logprob: -14.001715660095215
    6. ' )' → logprob: -14.626715660095215
    7. '
' → logprob: -15.251715660095215
    8. '))' → logprob: -15.376715660095215
    9. '`)' → logprob: -15.376715660095215
    10. '')' → logprob: -15.751715660095215

Token 38: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.0006913475226610899
    2. ' else' → logprob: -7.7506914138793945
    3. '
' → logprob: -10.125691413879395
    4. '```' → logprob: -10.375691413879395
    5. 'elif' → logprob: -10.375691413879395
    6. 'n' → logprob: -10.500691413879395
    7. 'for' → logprob: -10.750691413879395
    8. '_else' → logprob: -10.875691413879395
    9. '' → logprob: -11.000691413879395
    10. ' ' → logprob: -11.500691413879395

Token 39: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0019671740010380745
    2. ':
' → logprob: -6.251966953277588
    3. ' :' → logprob: -10.251967430114746
    4. ' :
' → logprob: -13.376967430114746
    5. ':
' → logprob: -13.876967430114746
    6. ':

' → logprob: -14.751967430114746
    7. ',' → logprob: -15.251967430114746
    8. '：' → logprob: -17.25196647644043
    9. ':def' → logprob: -17.75196647644043
    10. '   ' → logprob: -18.00196647644043

Token 40: '   ' (ID: 271)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -1.8284903764724731
    2. ' all' → logprob: -1.9534903764724731
    3. ' permutations' → logprob: -2.4534902572631836
    4. 'pos' → logprob: -3.0784902572631836
    5. ' ans' → logprob: -3.0784902572631836
    6. 'for' → logprob: -3.3284902572631836
    7. 'all' → logprob: -3.4534902572631836
    8. ' pos' → logprob: -3.4534902572631836
    9. ' idx' → logprob: -3.4534902572631836
    10. ' cnt' → logprob: -3.4534902572631836

Token 41: ' PQ' (ID: 77170)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.05823541432619095
    2. ' for' → logprob: -4.5582356452941895
    3. 'per' → logprob: -4.5582356452941895
    4. 'ans' → logprob: -4.9332356452941895
    5. 'pos' → logprob: -5.3082356452941895
    6. 'count' → logprob: -5.5582356452941895
    7. 'idx' → logprob: -5.5582356452941895
    8. 'cnt' → logprob: -5.6832356452941895
    9. 'perm' → logprob: -5.8082356452941895
    10. 'answer' → logprob: -6.6832356452941895

Token 42: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.022359201684594154
    2. ' =' → logprob: -4.772359371185303
    3. '=' → logprob: -5.022359371185303
    4. '_index' → logprob: -6.147359371185303
    5. 'x' → logprob: -7.022359371185303
    6. '_indices' → logprob: -7.272359371185303
    7. '_idx' → logprob: -7.397359371185303
    8. ' _' → logprob: -7.772359371185303
    9. '_positions' → logprob: -8.022358894348145
    10. '_=' → logprob: -8.147358894348145

Token 43: ' [' (ID: 723)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.03222648799419403
    2. 'it' → logprob: -3.9072265625
    3. ' list' → logprob: -4.9072265625
    4. 'tuple' → logprob: -5.9072265625
    5. '0' → logprob: -7.7822265625
    6. 'range' → logprob: -8.1572265625
    7. ' itertools' → logprob: -8.7822265625
    8. '[list' → logprob: -9.0322265625
    9. '[' → logprob: -9.5322265625
    10. ' tuple' → logprob: -9.6572265625

Token 44: 'P' (ID: 47)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.3840967118740082
    2. 'i' → logprob: -1.2590967416763306
    3. 'perm' → logprob: -4.259096622467041
    4. 'list' → logprob: -5.259096622467041
    5. 'tuple' → logprob: -5.634096622467041
    6. 'P' → logprob: -5.759096622467041
    7. 'x' → logprob: -5.884096622467041
    8. 'idx' → logprob: -6.134096622467041
    9. '*' → logprob: -6.509096622467041
    10. 'it' → logprob: -7.134096622467041

Token 45: ',' (ID: 11)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.2395489662885666
    2. ',' → logprob: -1.989548921585083
    3. ']
' → logprob: -2.864548921585083
    4. 'for' → logprob: -5.114549160003662
    5. ' for' → logprob: -5.989549160003662
    6. ' ]' → logprob: -6.114549160003662
    7. ',
' → logprob: -6.614549160003662
    8. ' ,' → logprob: -6.739549160003662
    9. ']

' → logprob: -6.739549160003662
    10. ')]' → logprob: -6.739549160003662

Token 46: ' Q' (ID: 1486)
  Prédit: 'Q'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Q' → logprob: -0.00032759839086793363
    2. ' Q' → logprob: -8.250328063964844
    3. ']' → logprob: -9.875328063964844
    4. '...' → logprob: -12.000328063964844
    5. 'None' → logprob: -12.625328063964844
    6. '*' → logprob: -13.000328063964844
    7. ' ]' → logprob: -15.000328063964844
    8. '	Q' → logprob: -15.000328063964844
    9. ')' → logprob: -15.125328063964844
    10. ']*' → logprob: -15.250328063964844

Token 47: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0018982905894517899
    2. ']
' → logprob: -6.626898288726807
    3. ',' → logprob: -8.001898765563965
    4. ']

' → logprob: -8.876898765563965
    5. ' ]' → logprob: -9.376898765563965
    6. ']
' → logprob: -12.501898765563965
    7. ')' → logprob: -12.626898765563965
    8. ',
' → logprob: -13.251898765563965
    9. ']

' → logprob: -13.626898765563965
    10. ' ]
' → logprob: -14.501898765563965

Token 48: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.754990816116333
    2. 'for' → logprob: -1.254990816116333
    3. ' permutations' → logprob: -2.129990816116333
    4. ' for' → logprob: -3.504990816116333
    5. 'index' → logprob: -3.504990816116333
    6. 'idx' → logprob: -4.754990577697754
    7. 'indices' → logprob: -5.379990577697754
    8. 'all' → logprob: -5.629990577697754
    9. 'else' → logprob: -5.629990577697754
    10. '
' → logprob: -5.754990577697754

Token 49: ' PQ' (ID: 77170)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.14100013673305511
    2. 'per' → logprob: -3.0160000324249268
    3. ' for' → logprob: -3.2660000324249268
    4. 'all' → logprob: -5.266000270843506
    5. 'count' → logprob: -5.266000270843506
    6. 'cnt' → logprob: -5.266000270843506
    7. 'ans' → logprob: -5.391000270843506
    8. 'A' → logprob: -5.891000270843506
    9. 'idx' → logprob: -5.891000270843506
    10. 'perm' → logprob: -6.266000270843506

Token 50: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.9854841828346252
    2. '_index' → logprob: -1.8604841232299805
    3. '.index' → logprob: -1.9854841232299805
    4. '=' → logprob: -2.2354841232299805
    5. '_' → logprob: -2.2354841232299805
    6. 'index' → logprob: -2.8604841232299805
    7. '.' → logprob: -3.3604841232299805
    8. '_indices' → logprob: -4.9854841232299805
    9. '_idx' → logprob: -5.4854841232299805
    10. '.append' → logprob: -6.1104841232299805

Token 51: ' sorted' (ID: 20099)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.11194249987602234
    2. 'sorted' → logprob: -2.3619425296783447
    3. ' list' → logprob: -5.111942291259766
    4. '[list' → logprob: -6.111942291259766
    5. '[' → logprob: -6.736942291259766
    6. 'tuple' → logprob: -7.611942291259766
    7. 'it' → logprob: -7.736942291259766
    8. ' sorted' → logprob: -7.861942291259766
    9. '[P' → logprob: -8.361942291259766
    10. '[it' → logprob: -8.486942291259766

Token 52: '(P' (ID: 8952)
  Prédit: '(it'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(it' → logprob: -0.045101482421159744
    2. '(' → logprob: -3.6701014041900635
    3. '(list' → logprob: -4.045101642608643
    4. '(P' → logprob: -7.045101642608643
    5. '(iter' → logprob: -9.670101165771484
    6. '((' → logprob: -9.795101165771484
    7. '(range' → logprob: -9.920101165771484
    8. 'it' → logprob: -11.045101165771484
    9. '([' → logprob: -11.295101165771484
    10. '(tuple' → logprob: -11.545101165771484

Token 53: 'Q' (ID: 48)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.4179065227508545
    2. '(P' → logprob: -1.9179065227508545
    3. ')' → logprob: -2.9179065227508545
    4. '(' → logprob: -3.5429065227508545
    5. '(Q' → logprob: -4.042906761169434
    6. 'PQ' → logprob: -4.292906761169434
    7. 'Q' → logprob: -4.542906761169434
    8. '),' → logprob: -4.542906761169434
    9. '))' → logprob: -5.042906761169434
    10. ' ,' → logprob: -5.292906761169434

Token 54: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.015809109434485435
    2. ',' → logprob: -4.390809059143066
    3. ')
' → logprob: -6.015809059143066
    4. '))' → logprob: -8.515809059143066
    5. ' )' → logprob: -9.015809059143066
    6. ',key' → logprob: -9.015809059143066
    7. '   ' → logprob: -9.265809059143066
    8. '(' → logprob: -9.765809059143066
    9. ')

' → logprob: -10.140809059143066
    10. '())' → logprob: -10.140809059143066

Token 55: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -1.4461610317230225
    2. 'for' → logprob: -1.4461610317230225
    3. '   ' → logprob: -2.1961610317230225
    4. ' permutations' → logprob: -2.8211610317230225
    5. 'all' → logprob: -2.9461610317230225
    6. ',' → logprob: -3.1961610317230225
    7. 'idx' → logprob: -3.6961610317230225
    8. 'A' → logprob: -3.9461610317230225
    9. ' for' → logprob: -4.071161270141602
    10. 'index' → logprob: -4.321161270141602

Token 56: ' li' (ID: 3476)
  Prédit: 'per'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'per' → logprob: -1.1588045358657837
    2. 'for' → logprob: -1.1588045358657837
    3. 'list' → logprob: -2.658804416656494
    4. 'pos' → logprob: -3.283804416656494
    5. 'ans' → logprob: -3.283804416656494
    6. 'perm' → logprob: -3.283804416656494
    7. 'cnt' → logprob: -3.658804416656494
    8. 'count' → logprob: -3.658804416656494
    9. 'all' → logprob: -3.783804416656494
    10. 'idx' → logprob: -3.908804416656494

Token 57: ' =' (ID: 314)
  Prédit: 'st'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'st' → logprob: -0.010600289329886436
    2. ' =' → logprob: -4.7606000900268555
    3. 'sts' → logprob: -6.7606000900268555
    4. '=' → logprob: -7.7606000900268555
    5. 's' → logprob: -8.760600090026855
    6. '   ' → logprob: -10.010600090026855
    7. '=list' → logprob: -10.135600090026855
    8. 'ne' → logprob: -10.885600090026855
    9. 'stin' → logprob: -11.260600090026855
    10. 'stop' → logprob: -11.260600090026855

Token 58: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.03104047104716301
    2. 'it' → logprob: -3.6560404300689697
    3. '[]' → logprob: -6.031040668487549
    4. '[list' → logprob: -6.906040668487549
    5. 'range' → logprob: -7.906040668487549
    6. '[' → logprob: -8.03104019165039
    7. ' list' → logprob: -8.78104019165039
    8. '[]
' → logprob: -8.90604019165039
    9. '0' → logprob: -9.03104019165039
    10. '[it' → logprob: -9.53104019165039

Token 59: '(range' (ID: 50017)
  Prédit: '(it'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(it' → logprob: -0.00010664248111424968
    2. 'it' → logprob: -9.375106811523438
    3. '(' → logprob: -11.000106811523438
    4. '(iter' → logprob: -12.875106811523438
    5. '(range' → logprob: -13.375106811523438
    6. '(map' → logprob: -14.500106811523438
    7. '(set' → logprob: -16.250106811523438
    8. ' itertools' → logprob: -16.625106811523438
    9. '()' → logprob: -16.750106811523438
    10. '(list' → logprob: -17.375106811523438

Token 60: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00035143180866725743
    2. '1' → logprob: -8.000351905822754
    3. '(N' → logprob: -11.250351905822754
    4. ' ' → logprob: -13.500351905822754
    5. '   ' → logprob: -14.000351905822754
    6. ' (' → logprob: -15.250351905822754
    7. 'N' → logprob: -15.625351905822754
    8. ',' → logprob: -15.750351905822754
    9. ')' → logprob: -17.000350952148438
    10. '	' → logprob: -17.125350952148438

Token 61: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.006764279678463936
    2. 'N' → logprob: -5.0067644119262695
    3. ' ' → logprob: -10.38176441192627
    4. '   ' → logprob: -11.50676441192627
    5. ' N' → logprob: -12.13176441192627
    6. '(' → logprob: -13.13176441192627
    7. '	N' → logprob: -16.006763458251953
    8. 'len' → logprob: -16.131763458251953
    9. '(N' → logprob: -16.381763458251953
    10. '    ' → logprob: -17.006763458251953

Token 62: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -3.8219583075260743e-05
    2. ' ,' → logprob: -10.375038146972656
    3. ',N' → logprob: -12.500038146972656
    4. ',
' → logprob: -13.375038146972656
    5. ',

' → logprob: -13.875038146972656
    6. ',n' → logprob: -15.000038146972656
    7. '<|end|>' → logprob: -16.125038146972656
    8. '1' → logprob: -16.875038146972656
    9. ' ' → logprob: -17.250038146972656
    10. '‌,' → logprob: -17.500038146972656

Token 63: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.10020871460437775
    2. ' N' → logprob: -2.3502087593078613
    3. 'n' → logprob: -13.475208282470703
    4. '	N' → logprob: -15.350208282470703
    5. ' n' → logprob: -15.350208282470703
    6. ' ' → logprob: -16.350208282470703
    7. '>N' → logprob: -16.850208282470703
    8. '   ' → logprob: -17.725208282470703
    9. '    ' → logprob: -17.850208282470703
    10. '<N' → logprob: -17.975208282470703

Token 64: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.31326258182525635
    2. ' +' → logprob: -1.3132625818252563
    3. ' ' → logprob: -15.313262939453125
    4. '+
' → logprob: -15.938262939453125
    5. ' +
' → logprob: -16.063262939453125
    6. '＋' → logprob: -16.563262939453125
    7. '))' → logprob: -16.688262939453125
    8. '1' → logprob: -16.813262939453125
    9. '```' → logprob: -16.938262939453125
    10. '   ' → logprob: -16.938262939453125

Token 65: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -6.611323624383658e-05
    2. ' ' → logprob: -9.625065803527832
    3. '   ' → logprob: -18.12506675720215
    4. '  ' → logprob: -18.87506675720215
    5. '```' → logprob: -19.50006675720215
    6. '2' → logprob: -19.75006675720215
    7. '１' → logprob: -20.50006675720215
    8. ')' → logprob: -20.93756675720215
    9. 'N' → logprob: -21.18756675720215
    10. '    ' → logprob: -21.31256675720215

Token 66: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.0280383548888494e-06
    2. ' ' → logprob: -13.875000953674316
    3. '2' → logprob: -18.625001907348633
    4. '```' → logprob: -19.250001907348633
    5. '１' → logprob: -19.625001907348633
    6. 'N' → logprob: -19.750001907348633
    7. '   ' → logprob: -19.875001907348633
    8. '3' → logprob: -19.937501907348633
    9. '۱' → logprob: -20.750001907348633
    10. '  ' → logprob: -20.750001907348633

Token 67: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.004345971625298262
    2. ')' → logprob: -5.504345893859863
    3. '))
' → logprob: -8.629345893859863
    4. ')))' → logprob: -9.879345893859863
    5. '+' → logprob: -10.754345893859863
    6. ' ))' → logprob: -11.379345893859863
    7. '))

' → logprob: -13.504345893859863
    8. '))
' → logprob: -14.254345893859863
    9. ')
' → logprob: -14.629345893859863
    10. '),' → logprob: -15.129345893859863

Token 68: '   ' (ID: 271)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.27067938446998596
    2. 'idx' → logprob: -2.395679473876953
    3. 'cnt' → logprob: -3.645679473876953
    4. 'ans' → logprob: -3.895679473876953
    5. 'count' → logprob: -3.895679473876953
    6. 'pos' → logprob: -3.895679473876953
    7. 'rank' → logprob: -4.145679473876953
    8. 'answer' → logprob: -5.020679473876953
    9. 'counter' → logprob: -5.020679473876953
    10. 'per' → logprob: -5.145679473876953

Token 69: ' i' (ID: 575)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.6877543926239014
    2. 'ans' → logprob: -1.5627543926239014
    3. 'idx' → logprob: -2.4377543926239014
    4. 'cnt' → logprob: -2.9377543926239014
    5. 'count' → logprob: -3.4377543926239014
    6. 'pos' → logprob: -3.5627543926239014
    7. 'answer' → logprob: -3.6877543926239014
    8. 'res' → logprob: -4.5627546310424805
    9. 'index' → logprob: -4.8127546310424805
    10. 'import' → logprob: -4.9377546310424805

Token 70: ' =' (ID: 314)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'm' → logprob: -1.3495516777038574
    2. '=' → logprob: -1.5995516777038574
    3. 'f' → logprob: -1.7245516777038574
    4. ' =' → logprob: -1.7245516777038574
    5. 'nd' → logprob: -2.0995516777038574
    6. 't' → logprob: -3.8495516777038574
    7. 'ter' → logprob: -4.849551677703857
    8. 'n' → logprob: -4.849551677703857
    9. 'mp' → logprob: -4.974551677703857
    10. 'dx' → logprob: -5.474551677703857

Token 71: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.08299016207456589
    2. '1' → logprob: -2.8329901695251465
    3. ' ' → logprob: -3.9579901695251465
    4. 'it' → logprob: -6.8329901695251465
    5. ' itertools' → logprob: -8.582989692687988
    6. 'list' → logprob: -8.832989692687988
    7. 'next' → logprob: -9.332989692687988
    8. '-' → logprob: -9.707989692687988
    9. ' list' → logprob: -10.332989692687988
    10. ' next' → logprob: -10.582989692687988

Token 72: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.048327524214982986
    2. '1' → logprob: -3.4233274459838867
    3. 'it' → logprob: -4.298327445983887
    4. 'list' → logprob: -7.798327445983887
    5. '-' → logprob: -8.423327445983887
    6. ' ' → logprob: -8.798327445983887
    7. 'next' → logprob: -9.048327445983887
    8. 'enumer' → logprob: -10.048327445983887
    9. 'int' → logprob: -11.423327445983887
    10. 'iter' → logprob: -12.173327445983887

Token 73: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.644250214099884
    2. ' for' → logprob: -0.769250214099884
    3. ' ' → logprob: -5.019250392913818
    4. ',' → logprob: -6.769250392913818
    5. ':' → logprob: -7.144250392913818
    6. ' 
' → logprob: -7.394250392913818
    7. '
' → logprob: -7.644250392913818
    8. 'while' → logprob: -8.14424991607666
    9. ' while' → logprob: -8.14424991607666
    10. '' → logprob: -8.64424991607666

Token 74: '   ' (ID: 271)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.13316766917705536
    2. ' for' → logprob: -2.1331677436828613
    3. '
' → logprob: -5.508167743682861
    4. 'while' → logprob: -7.633167743682861
    5. ' ' → logprob: -8.008167266845703
    6. ')' → logprob: -8.383167266845703
    7. '<|end|>' → logprob: -8.633167266845703
    8. ' while' → logprob: -8.883167266845703
    9. ':' → logprob: -9.008167266845703
    10. ',' → logprob: -9.008167266845703

Token 75: ' j' (ID: 441)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.024012040346860886
    2. 'while' → logprob: -4.149012088775635
    3. 'ans' → logprob: -5.524012088775635
    4. ' for' → logprob: -6.274012088775635
    5. 'res' → logprob: -7.399012088775635
    6. 'count' → logprob: -8.024011611938477
    7. 'answer' → logprob: -8.149011611938477
    8. 'cnt' → logprob: -8.399011611938477
    9. 'f' → logprob: -9.524011611938477
    10. 'c' → logprob: -9.774011611938477

Token 76: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.011090856045484543
    2. '=' → logprob: -4.5110907554626465
    3. ' ' → logprob: -10.261091232299805
    4. '0' → logprob: -12.636091232299805
    5. ' +=' → logprob: -12.761091232299805
    6. ',' → logprob: -14.886091232299805
    7. '   ' → logprob: -15.136091232299805
    8. '1' → logprob: -15.386091232299805
    9. ' ,' → logprob: -15.636091232299805
    10. ' i' → logprob: -16.011091232299805

Token 77: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.1319868415594101
    2. '1' → logprob: -2.8819868564605713
    3. ' ' → logprob: -2.8819868564605713
    4. 'len' → logprob: -5.006986618041992
    5. '100' → logprob: -7.256986618041992
    6. '-' → logprob: -7.381986618041992
    7. ' len' → logprob: -7.381986618041992
    8. 'i' → logprob: -7.506986618041992
    9. '10' → logprob: -7.881986618041992
    10. 'int' → logprob: -8.131986618041992

Token 78: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.20894017815589905
    2. '1' → logprob: -1.8339401483535767
    3. 'len' → logprob: -4.083940029144287
    4. 'i' → logprob: -5.083940029144287
    5. ' ' → logprob: -6.083940029144287
    6. 'N' → logprob: -6.958940029144287
    7. '100' → logprob: -7.083940029144287
    8. '-' → logprob: -8.208940505981445
    9. 'int' → logprob: -8.208940505981445
    10. '10' → logprob: -8.708940505981445

Token 79: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.26135724782943726
    2. ' for' → logprob: -1.511357307434082
    3. '
' → logprob: -4.761357307434082
    4. '    
' → logprob: -8.636357307434082
    5. '' → logprob: -9.511357307434082
    6. '   ' → logprob: -9.511357307434082
    7. '  
' → logprob: -9.511357307434082
    8. '\n' → logprob: -10.136357307434082
    9. ' 
' → logprob: -10.261357307434082
    10. ',' → logprob: -10.511357307434082

Token 80: '   ' (ID: 271)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.2547875940799713
    2. '
' → logprob: -2.1297876834869385
    3. ' for' → logprob: -2.2547876834869385
    4. '    
' → logprob: -8.00478744506836
    5. '  
' → logprob: -8.12978744506836
    6. '   ' → logprob: -8.75478744506836
    7. ' 
' → logprob: -9.25478744506836
    8. '
' → logprob: -9.75478744506836
    9. '\n' → logprob: -10.00478744506836
    10. '

' → logprob: -10.62978744506836

Token 81: ' a' (ID: 261)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.014392667450010777
    2. ' for' → logprob: -4.264392852783203
    3. 'f' → logprob: -9.389392852783203
    4. '0' → logprob: -9.889392852783203
    5. 'while' → logprob: -11.389392852783203
    6. ' ' → logprob: -11.514392852783203
    7. '
' → logprob: -12.014392852783203
    8. ':' → logprob: -12.139392852783203
    9. ')' → logprob: -12.389392852783203
    10. 'count' → logprob: -12.514392852783203

Token 82: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.759252667427063
    2. 'for' → logprob: -1.009252667427063
    3. ' =' → logprob: -2.1342525482177734
    4. ' ' → logprob: -3.8842525482177734
    5. ' for' → logprob: -4.384252548217773
    6. ':' → logprob: -4.884252548217773
    7. '   ' → logprob: -6.259252548217773
    8. 'ns' → logprob: -6.884252548217773
    9. '
' → logprob: -7.009252548217773
    10. 'll' → logprob: -7.259252548217773

Token 83: ' []
' (ID: 8911)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.08931860327720642
    2. ' ' → logprob: -2.9643185138702393
    3. '1' → logprob: -3.7143185138702393
    4. '-' → logprob: -6.464318752288818
    5. 'None' → logprob: -6.589318752288818
    6. 'it' → logprob: -6.839318752288818
    7. ' -' → logprob: -7.089318752288818
    8. '[]' → logprob: -7.214318752288818
    9. ' None' → logprob: -7.214318752288818
    10. ' itertools' → logprob: -7.339318752288818

Token 84: '   ' (ID: 271)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.02979273721575737
    2. ' for' → logprob: -3.5297927856445312
    3. '   ' → logprob: -11.904792785644531
    4. ':' → logprob: -12.029792785644531
    5. '
' → logprob: -12.779792785644531
    6. '+' → logprob: -13.029792785644531
    7. '0' → logprob: -13.029792785644531
    8. 'f' → logprob: -13.154792785644531
    9. 'a' → logprob: -13.654792785644531
    10. ')' → logprob: -13.654792785644531

Token 85: ' stop' (ID: 5666)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.00526091456413269
    2. ' for' → logprob: -5.255260944366455
    3. 'while' → logprob: -11.630260467529297
    4. '0' → logprob: -12.630260467529297
    5. '[' → logprob: -13.255260467529297
    6. 'count' → logprob: -13.380260467529297
    7. 'f' → logprob: -13.505260467529297
    8. 'a' → logprob: -13.505260467529297
    9. ' ' → logprob: -13.755260467529297
    10. ')' → logprob: -13.880260467529297

Token 86: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.627793550491333
    2. '=' → logprob: -1.002793550491333
    3. ':' → logprob: -2.877793550491333
    4. 'for' → logprob: -3.627793550491333
    5. '_' → logprob: -4.877793312072754
    6. ' ' → logprob: -6.627793312072754
    7. '    ' → logprob: -6.877793312072754
    8. '[:]' → logprob: -7.252793312072754
    9. '   ' → logprob: -7.502793312072754
    10. ' for' → logprob: -7.502793312072754

Token 87: ' False' (ID: 7983)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'False' → logprob: -0.023406894877552986
    2. ' False' → logprob: -3.773406982421875
    3. 'True' → logprob: -8.898406982421875
    4. '0' → logprob: -11.023406982421875
    5. ' True' → logprob: -12.148406982421875
    6. ' ' → logprob: -13.648406982421875
    7. '   ' → logprob: -14.023406982421875
    8. '(False' → logprob: -14.648406982421875
    9. 'len' → logprob: -14.898406982421875
    10. 'F' → logprob: -15.398406982421875

Token 88: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.3893134891986847
    2. ' for' → logprob: -1.2643134593963623
    3. '
' → logprob: -3.2643134593963623
    4. ' 
' → logprob: -6.889313697814941
    5. '\n' → logprob: -8.639313697814941
    6. '  
' → logprob: -8.889313697814941
    7. '' → logprob: -9.264313697814941
    8. ' ' → logprob: -9.264313697814941
    9. '    
' → logprob: -9.389313697814941
    10. '
' → logprob: -10.139313697814941

Token 89: '   ' (ID: 271)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.5419860482215881
    2. ' for' → logprob: -0.9169860482215881
    3. '
' → logprob: -4.416985988616943
    4. ' 
' → logprob: -5.541985988616943
    5. ' ' → logprob: -7.166985988616943
    6. ':' → logprob: -7.541985988616943
    7. '\n' → logprob: -7.791985988616943
    8. '' → logprob: -8.291986465454102
    9. '  
' → logprob: -8.291986465454102
    10. '\' → logprob: -9.166986465454102

Token 90: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.28120291233062744
    2. ' for' → logprob: -1.4062029123306274
    3. ' ' → logprob: -10.906203269958496
    4. '   ' → logprob: -11.406203269958496
    5. 'while' → logprob: -11.531203269958496
    6. ' while' → logprob: -13.031203269958496
    7. '```' → logprob: -13.031203269958496
    8. ' 
' → logprob: -13.531203269958496
    9. ' permutations' → logprob: -13.781203269958496
    10. '    
' → logprob: -14.656203269958496

Token 91: ' v' (ID: 323)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.4442470967769623
    2. 'perm' → logprob: -1.5692471265792847
    3. ' p' → logprob: -2.819247007369995
    4. ' perm' → logprob: -3.944247007369995
    5. 'per' → logprob: -3.944247007369995
    6. 'x' → logprob: -4.069247245788574
    7. 'c' → logprob: -4.944247245788574
    8. 'i' → logprob: -5.569247245788574
    9. '_' → logprob: -6.194247245788574
    10. '_perm' → logprob: -6.444247245788574

Token 92: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.04881127178668976
    2. 'in' → logprob: -3.048811197280884
    3. ' ' → logprob: -9.548810958862305
    4. ',' → logprob: -9.923810958862305
    5. 's' → logprob: -9.923810958862305
    6. 'n' → logprob: -11.048810958862305
    7. ' i' → logprob: -12.423810958862305
    8. '  ' → logprob: -12.486310958862305
    9. 'v' → logprob: -12.548810958862305
    10. 'i' → logprob: -12.548810958862305

Token 93: ' itertools' (ID: 103178)
  Prédit: 'it'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'it' → logprob: -0.00324842007830739
    2. ' itertools' → logprob: -5.75324821472168
    3. '   ' → logprob: -9.75324821472168
    4. '(it' → logprob: -12.37824821472168
    5. ' it' → logprob: -12.87824821472168
    6. 'list' → logprob: -13.12824821472168
    7. 'iter' → logprob: -14.25324821472168
    8. '	it' → logprob: -14.25324821472168
    9. '  ' → logprob: -14.50324821472168
    10. ' ' → logprob: -14.75324821472168

Token 94: '.per' (ID: 18361)
  Prédit: '.per'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.per' → logprob: -0.00026503115077503026
    2. '.' → logprob: -8.875265121459961
    3. ' .' → logprob: -9.125265121459961
    4. '.com' → logprob: -12.125265121459961
    5. '.product' → logprob: -12.125265121459961
    6. '.p' → logprob: -12.500265121459961
    7. 'per' → logprob: -14.875265121459961
    8. '.acc' → logprob: -15.250265121459961
    9. '.import' → logprob: -15.625265121459961
    10. '.groupby' → logprob: -15.875265121459961

Token 95: 'mut' (ID: 10522)
  Prédit: 'mut'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'mut' → logprob: -0.35019153356552124
    2. 'utations' → logprob: -1.225191593170166
    3. 'ut' → logprob: -6.725191593170166
    4. 'r' → logprob: -8.850191116333008
    5. '```' → logprob: -9.100191116333008
    6. 'u' → logprob: -9.600191116333008
    7. 'utions' → logprob: -9.850191116333008
    8. 'per' → logprob: -10.600191116333008
    9. 'binations' → logprob: -10.725191116333008
    10. 'tools' → logprob: -11.350191116333008

Token 96: 'ations' (ID: 929)
  Prédit: 'ations'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ations' → logprob: -0.009420289658010006
    2. 'utations' → logprob: -4.759420394897461
    3. 'tools' → logprob: -7.634420394897461
    4. 'utions' → logprob: -8.634420394897461
    5. 'ut' → logprob: -10.259420394897461
    6. 's' → logprob: -10.384420394897461
    7. 'at' → logprob: -10.634420394897461
    8. 'r' → logprob: -11.634420394897461
    9. 't' → logprob: -11.634420394897461
    10. 'ertools' → logprob: -11.759420394897461

Token 97: '(li' (ID: 111234)
  Prédit: '(li'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(li' → logprob: -7.941850526549388e-06
    2. '(range' → logprob: -12.500007629394531
    3. '(' → logprob: -12.750007629394531
    4. ' (' → logprob: -14.625007629394531
    5. '<li' → logprob: -15.250007629394531
    6. '(list' → logprob: -15.750007629394531
    7. ' li' → logprob: -15.750007629394531
    8. 'li' → logprob: -16.25000762939453
    9. '(lo' → logprob: -16.50000762939453
    10. '(ls' → logprob: -18.00000762939453

Token 98: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.1678876280784607
    2. '(),' → logprob: -2.2928876876831055
    3. '):' → logprob: -4.1678876876831055
    4. '(N' → logprob: -4.6678876876831055
    5. '()' → logprob: -4.7928876876831055
    6. '(' → logprob: -4.9178876876831055
    7. ',N' → logprob: -4.9178876876831055
    8. ')' → logprob: -6.2928876876831055
    9. ',n' → logprob: -6.5428876876831055
    10. ' ,' → logprob: -6.5428876876831055

Token 99: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.0007136239437386394
    2. ' N' → logprob: -7.25071382522583
    3. ' ' → logprob: -13.125713348388672
    4. ')' → logprob: -13.750713348388672
    5. 'len' → logprob: -15.000713348388672
    6. '  ' → logprob: -16.125713348388672
    7. '   ' → logprob: -16.625713348388672
    8. 'n' → logprob: -16.875713348388672
    9. '	N' → logprob: -17.000713348388672
    10. '```' → logprob: -18.000713348388672

Token 100: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.000253591249929741
    2. ')' → logprob: -8.375253677368164
    3. '):
' → logprob: -11.000253677368164
    4. ':' → logprob: -12.750253677368164
    5. ' ):' → logprob: -12.750253677368164
    6. '():' → logprob: -16.125253677368164
    7. ')):' → logprob: -16.625253677368164
    8. '   ' → logprob: -17.000253677368164
    9. ''):' → logprob: -17.250253677368164
    10. '):
' → logprob: -17.250253677368164

Token 101: '       ' (ID: 309)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.7809580564498901
    2. '       ' → logprob: -0.9059580564498901
    3. '<|end|>' → logprob: -2.1559581756591797
    4. ' ' → logprob: -4.65595817565918
    5. '   ' → logprob: -5.53095817565918
    6. '    ' → logprob: -6.40595817565918
    7. '<|end|>' → logprob: -6.40595817565918
    8. '):' → logprob: -6.53095817565918
    9. ':
' → logprob: -6.78095817565918
    10. ',' → logprob: -7.40595817565918

Token 102: ' j' (ID: 441)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.12534745037555695
    2. ' if' → logprob: -3.125347375869751
    3. ' ' → logprob: -4.12534761428833
    4. '        ' → logprob: -4.12534761428833
    5. 'if' → logprob: -4.37534761428833
    6. '<|end|>' → logprob: -4.50034761428833
    7. '   ' → logprob: -4.87534761428833
    8. '    ' → logprob: -5.62534761428833
    9. '
' → logprob: -6.00034761428833
    10. ' 
' → logprob: -7.00034761428833

Token 103: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.3007102906703949
    2. ' +=' → logprob: -1.4257103204727173
    3. '==' → logprob: -5.050710201263428
    4. '+' → logprob: -5.050710201263428
    5. '=' → logprob: -5.550710201263428
    6. ' ==' → logprob: -6.175710201263428
    7. 'f' → logprob: -7.800710201263428
    8. ' =' → logprob: -9.925710678100586
    9. ' ' → logprob: -10.050710678100586
    10. 'if' → logprob: -10.175710678100586

Token 104: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.4121114822482923e-06
    2. ' ' → logprob: -12.625003814697266
    3. '   ' → logprob: -17.000003814697266
    4. '  ' → logprob: -20.500003814697266
    5. '       ' → logprob: -20.500003814697266
    6. '１' → logprob: -21.250003814697266
    7. '```' → logprob: -21.500003814697266
    8. '    ' → logprob: -21.625003814697266
    9. '+' → logprob: -21.750003814697266
    10. '           ' → logprob: -22.250003814697266

Token 105: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -2.339278580620885e-06
    2. ' ' → logprob: -13.000001907348633
    3. '   ' → logprob: -19.250001907348633
    4. 'a' → logprob: -20.500001907348633
    5. 'v' → logprob: -20.562501907348633
    6. '0' → logprob: -20.625001907348633
    7. '１' → logprob: -20.750001907348633
    8. '```' → logprob: -20.937501907348633
    9. '  ' → logprob: -21.000001907348633
    10. '<|end|>' → logprob: -21.250001907348633

Token 106: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.157919242978096
    2. '
' → logprob: -2.65791916847229
    3. '<|end|>' → logprob: -2.90791916847229
    4. ' ' → logprob: -4.532919406890869
    5. ' if' → logprob: -5.532919406890869
    6. '   ' → logprob: -5.782919406890869
    7. 'if' → logprob: -6.782919406890869
    8. '<|end|>' → logprob: -7.032919406890869
    9. '        
' → logprob: -7.782919406890869
    10. '  
' → logprob: -8.157918930053711

Token 107: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.020917054265737534
    2. '   ' → logprob: -4.270916938781738
    3. ' if' → logprob: -5.520916938781738
    4. ' ' → logprob: -6.645916938781738
    5. 'if' → logprob: -6.895916938781738
    6. '<|end|>' → logprob: -8.395916938781738
    7. '  ' → logprob: -10.145916938781738
    8. '    ' → logprob: -10.270916938781738
    9. '           ' → logprob: -10.270916938781738
    10. '     ' → logprob: -11.145916938781738

Token 108: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.002014763653278351
    2. ' if' → logprob: -6.252014636993408
    3. '   ' → logprob: -9.877015113830566
    4. '       ' → logprob: -10.377015113830566
    5. ' ' → logprob: -13.627015113830566
    6. '```' → logprob: -13.752015113830566
    7. '	if' → logprob: -14.502015113830566
    8. '           ' → logprob: -15.127015113830566
    9. '    ' → logprob: -15.377015113830566
    10. '
' → logprob: -16.50201416015625

Token 109: ' PQ' (ID: 77170)
  Prédit: ' v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' v' → logprob: -0.30149945616722107
    2. 'v' → logprob: -1.9264994859695435
    3. ' stop' → logprob: -2.926499366760254
    4. ' not' → logprob: -3.426499366760254
    5. 'stop' → logprob: -4.801499366760254
    6. ' PQ' → logprob: -4.926499366760254
    7. 'PQ' → logprob: -5.176499366760254
    8. ' tuple' → logprob: -5.801499366760254
    9. 'not' → logprob: -6.676499366760254
    10. ' list' → logprob: -7.176499366760254

Token 110: '[i' (ID: 1768)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.00037848003557883203
    2. '[i' → logprob: -8.000378608703613
    3. '==' → logprob: -10.625378608703613
    4. '[j' → logprob: -12.125378608703613
    5. '[-' → logprob: -12.375378608703613
    6. '[a' → logprob: -12.875378608703613
    7. ' [' → logprob: -14.000378608703613
    8. '[
' → logprob: -14.000378608703613
    9. '[v' → logprob: -14.250378608703613
    10. ' ==' → logprob: -14.375378608703613

Token 111: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.3492540121078491
    2. ']==' → logprob: -1.2242540121078491
    3. '==' → logprob: -7.724254131317139
    4. '][' → logprob: -8.34925365447998
    5. '[i' → logprob: -9.72425365447998
    6. '][:' → logprob: -11.84925365447998
    7. ']!=' → logprob: -11.84925365447998
    8. ' ]' → logprob: -11.97425365447998
    9. '[j' → logprob: -12.34925365447998
    10. '-' → logprob: -12.34925365447998

Token 112: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.11293241381645203
    2. ' ==' → logprob: -2.2379324436187744
    3. ']==' → logprob: -9.862932205200195
    4. ')==' → logprob: -11.237932205200195
    5. '==
' → logprob: -11.737932205200195
    6. '<=' → logprob: -11.737932205200195
    7. '===' → logprob: -12.112932205200195
    8. '[' → logprob: -12.362932205200195
    9. '>=' → logprob: -12.487932205200195
    10. '=' → logprob: -12.487932205200195

Token 113: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.22543251514434814
    2. ' v' → logprob: -1.6004325151443481
    3. 'list' → logprob: -11.350432395935059
    4. ' list' → logprob: -12.975432395935059
    5. ' ' → logprob: -13.225432395935059
    6. ' ' → logprob: -13.725432395935059
    7. '	v' → logprob: -13.725432395935059
    8. 'tuple' → logprob: -14.475432395935059
    9. '(v' → logprob: -15.475432395935059
    10. '   ' → logprob: -15.975432395935059

Token 114: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.523490846157074
    2. ':
' → logprob: -0.898490846157074
    3. ' and' → logprob: -9.023490905761719
    4. ':
' → logprob: -9.898490905761719
    5. '):' → logprob: -9.898490905761719
    6. '):
' → logprob: -9.898490905761719
    7. 'and' → logprob: -10.398490905761719
    8. ':

' → logprob: -10.648490905761719
    9. '       ' → logprob: -11.398490905761719
    10. '   ' → logprob: -11.523490905761719

Token 115: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.10187357664108276
    2. 'i' → logprob: -2.3518736362457275
    3. ' i' → logprob: -7.101873397827148
    4. 'a' → logprob: -7.851873397827148
    5. '   ' → logprob: -8.851873397827148
    6. '       ' → logprob: -9.226873397827148
    7. '```' → logprob: -9.476873397827148
    8. ' ' → logprob: -10.601873397827148
    9. '0' → logprob: -10.601873397827148
    10. ':' → logprob: -11.351873397827148

Token 116: ' a' (ID: 261)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.0010777069255709648
    2. 'a' (adapté à ' a') → logprob: -7.001077651977539
    3. '           ' → logprob: -9.626077651977539
    4. 'j' → logprob: -9.876077651977539
    5. ' i' → logprob: -11.001077651977539
    6. '       ' → logprob: -11.126077651977539
    7. '   ' → logprob: -12.376077651977539
    8. 'if' → logprob: -12.376077651977539
    9. '```' → logprob: -12.501077651977539
    10. '`' → logprob: -13.626077651977539

Token 117: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.3952817916870117
    2. 'pp' → logprob: -1.1452817916870117
    3. '=' → logprob: -5.395281791687012
    4. '.' → logprob: -5.770281791687012
    5. 'p' → logprob: -7.645281791687012
    6. '.pp' → logprob: -8.770281791687012
    7. 'append' → logprob: -10.770281791687012
    8. 'ppen' → logprob: -11.020281791687012
    9. '.app' → logprob: -11.645281791687012
    10. '.p' → logprob: -11.895281791687012

Token 118: '(j' (ID: 4997)
  Prédit: '(j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(j' → logprob: -0.0020129792392253876
    2. 'j' → logprob: -6.252013206481934
    3. '(i' → logprob: -9.877013206481934
    4. '(' → logprob: -10.377013206481934
    5. '(len' → logprob: -14.002013206481934
    6. '(v' → logprob: -14.127013206481934
    7. ' j' → logprob: -16.377012252807617
    8. '((' → logprob: -17.002012252807617
    9. ' (' → logprob: -17.002012252807617
    10. '(a' → logprob: -17.252012252807617

Token 119: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.20164820551872253
    2. ')
' → logprob: -1.701648235321045
    3. '           ' → logprob: -9.576647758483887
    4. '       ' → logprob: -9.576647758483887
    5. ')
' → logprob: -10.076647758483887
    6. '               ' → logprob: -10.826647758483887
    7. '<|end|>' → logprob: -11.326647758483887
    8. ')

' → logprob: -11.951647758483887
    9. '<|end|>' → logprob: -13.076647758483887
    10. ' )' → logprob: -13.451647758483887

Token 120: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.3183945119380951
    2. '       ' → logprob: -1.3183945417404175
    3. '   ' → logprob: -5.318394660949707
    4. 'if' → logprob: -9.818394660949707
    5. '	       ' → logprob: -9.943394660949707
    6. '        
' → logprob: -10.693394660949707
    7. '```' → logprob: -10.693394660949707
    8. '        ' → logprob: -11.443394660949707
    9. '               ' → logprob: -11.693394660949707
    10. 'i' → logprob: -11.943394660949707

Token 121: ' if' (ID: 538)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -1.0061278343200684
    2. 'i' → logprob: -1.2561278343200684
    3. '           ' → logprob: -1.2561278343200684
    4. '   ' → logprob: -2.7561278343200684
    5. 'if' (adapté à ' if') → logprob: -7.006127834320068
    6. ' i' → logprob: -8.131128311157227
    7. ' ' → logprob: -9.756128311157227
    8. '  ' → logprob: -11.131128311157227
    9. '               ' → logprob: -11.506128311157227
    10. ' if' → logprob: -12.006128311157227

Token 122: ' i' (ID: 575)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.0020512896589934826
    2. ' len' → logprob: -6.37705135345459
    3. 'stop' → logprob: -8.12705135345459
    4. 'i' → logprob: -10.12705135345459
    5. 'a' → logprob: -11.75205135345459
    6. ' stop' → logprob: -13.12705135345459
    7. 'not' → logprob: -13.37705135345459
    8. ' i' → logprob: -14.62705135345459
    9. '(len' → logprob: -14.62705135345459
    10. ' ' → logprob: -14.87705135345459

Token 123: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.1272180825471878
    2. ' ==' → logprob: -2.127218008041382
    3. '+' → logprob: -8.877218246459961
    4. '=' → logprob: -10.002218246459961
    5. '<' → logprob: -10.752218246459961
    6. '2' → logprob: -11.252218246459961
    7. '0' → logprob: -11.252218246459961
    8. '1' → logprob: -11.377218246459961
    9. '>' → logprob: -11.502218246459961
    10. '<|end|>' → logprob: -12.252218246459961

Token 124: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.002996005117893219
    2. 'len' → logprob: -6.37799596786499
    3. ' ' → logprob: -7.12799596786499
    4. '0' → logprob: -7.87799596786499
    5. ' len' → logprob: -9.127996444702148
    6. '(len' → logprob: -13.002996444702148
    7. '   ' → logprob: -15.440496444702148
    8. '<len' → logprob: -16.19049644470215
    9. '(' → logprob: -16.44049644470215
    10. 'max' → logprob: -16.94049644470215

Token 125: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0037120769266039133
    2. 'len' → logprob: -5.628712177276611
    3. '0' → logprob: -9.253711700439453
    4. ' len' → logprob: -11.878711700439453
    5. ' ' → logprob: -12.128711700439453
    6. '(len' → logprob: -12.753711700439453
    7. '(' → logprob: -15.878711700439453
    8. 'length' → logprob: -16.066211700439453
    9. '<len' → logprob: -16.378711700439453
    10. 'max' → logprob: -16.441211700439453

Token 126: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.05574009194970131
    2. ':
' → logprob: -2.9307401180267334
    3. ' and' → logprob: -8.180740356445312
    4. '       ' → logprob: -9.180740356445312
    5. ' ' → logprob: -9.305740356445312
    6. ' :' → logprob: -9.430740356445312
    7. ' break' → logprob: -9.555740356445312
    8. '   ' → logprob: -9.680740356445312
    9. 'and' → logprob: -10.305740356445312
    10. ':return' → logprob: -10.305740356445312

Token 127: '               ' (ID: 506)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.08272834122180939
    2. '           ' → logprob: -2.582728385925293
    3. '               ' → logprob: -6.332728385925293
    4. 'break' → logprob: -6.957728385925293
    5. ' break' → logprob: -7.207728385925293
    6. '   ' → logprob: -8.082728385925293
    7. '	break' → logprob: -10.832728385925293
    8. 'stop' → logprob: -11.832728385925293
    9. ' stop' → logprob: -12.332728385925293
    10. '     ' → logprob: -12.457728385925293

Token 128: ' stop' (ID: 5666)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.45557594299316406
    2. 'break' → logprob: -1.080575942993164
    3. 'stop' (adapté à ' stop') → logprob: -4.580575942993164
    4. ' break' → logprob: -4.955575942993164
    5. '   ' → logprob: -5.205575942993164
    6. '           ' → logprob: -5.955575942993164
    7. 'print' → logprob: -7.080575942993164
    8. '	break' → logprob: -8.580575942993164
    9. ' stop' → logprob: -9.580575942993164
    10. '```' → logprob: -11.330575942993164

Token 129: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.04639166221022606
    2. ' =' → logprob: -3.671391725540161
    3. '=True' → logprob: -3.921391725540161
    4. '   ' → logprob: -10.046391487121582
    5. ':' → logprob: -11.796391487121582
    6. '=
' → logprob: -11.921391487121582
    7. '==' → logprob: -12.171391487121582
    8. '(True' → logprob: -13.171391487121582
    9. '       ' → logprob: -13.421391487121582
    10. ' ' → logprob: -13.546391487121582

Token 130: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.0007099286303855479
    2. ' True' → logprob: -7.2507100105285645
    3. '   ' → logprob: -18.750709533691406
    4. '(True' → logprob: -19.125709533691406
    5. '=True' → logprob: -19.250709533691406
    6. ' ' → logprob: -21.625709533691406
    7. '  ' → logprob: -22.000709533691406
    8. 'not' → logprob: -22.000709533691406
    9. '1' → logprob: -22.000709533691406
    10. 'Tr' → logprob: -22.500709533691406

Token 131: '
' (ID: 198)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.038159918040037155
    2. '       ' → logprob: -3.2881598472595215
    3. '           ' → logprob: -9.78816032409668
    4. 'break' → logprob: -10.91316032409668
    5. '   ' → logprob: -11.16316032409668
    6. 'if' → logprob: -11.53816032409668
    7. '        
' → logprob: -12.16316032409668
    8. ' if' → logprob: -12.41316032409668
    9. '                
' → logprob: -12.41316032409668
    10. '
' → logprob: -13.53816032409668

Token 132: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.2259938269853592
    2. '       ' → logprob: -1.6009938716888428
    3. '           ' → logprob: -8.475994110107422
    4. '   ' → logprob: -8.725994110107422
    5. '        
' → logprob: -9.600994110107422
    6. '                
' → logprob: -10.100994110107422
    7. ' if' → logprob: -10.225994110107422
    8. 'if' → logprob: -10.600994110107422
    9. 'break' → logprob: -11.600994110107422
    10. '    
' → logprob: -12.100994110107422

Token 133: ' break' (ID: 2338)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'break' (adapté à ' break') → logprob: -0.41751861572265625
    2. ' break' → logprob: -1.1675186157226562
    3. '               ' → logprob: -3.5425186157226562
    4. '       ' → logprob: -6.917518615722656
    5. '           ' → logprob: -8.917518615722656
    6. '	break' → logprob: -9.292518615722656
    7. '   ' → logprob: -11.167518615722656
    8. '
' → logprob: -12.042518615722656
    9. ' ' → logprob: -13.542518615722656
    10. '                   ' → logprob: -13.792518615722656

Token 134: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00742986099794507
    2. '   ' → logprob: -5.007430076599121
    3. '           ' → logprob: -7.507430076599121
    4. '    ' → logprob: -9.007430076599121
    5. ' ' → logprob: -11.007430076599121
    6. '        ' → logprob: -11.382430076599121
    7. 'if' → logprob: -12.632430076599121
    8. '      ' → logprob: -13.257430076599121
    9. '     ' → logprob: -13.382430076599121
    10. '               ' → logprob: -13.632430076599121

Token 135: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.012073610909283161
    2. '   ' → logprob: -4.512073516845703
    3. '           ' → logprob: -7.387073516845703
    4. '    ' → logprob: -8.637073516845703
    5. '        ' → logprob: -10.262073516845703
    6. 'else' → logprob: -10.262073516845703
    7. 'elif' → logprob: -10.387073516845703
    8. 'if' → logprob: -10.762073516845703
    9. ' ' → logprob: -10.887073516845703
    10. '```' → logprob: -10.887073516845703

Token 136: ' else' (ID: 1203)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.004788122605532408
    2. '   ' → logprob: -6.004787921905518
    3. 'else' (adapté à ' else') → logprob: -6.879787921905518
    4. 'i' → logprob: -7.629787921905518
    5. ' else' → logprob: -7.629787921905518
    6. '           ' → logprob: -8.379788398742676
    7. ' i' → logprob: -10.379788398742676
    8. ' ' → logprob: -11.379788398742676
    9. 'elif' → logprob: -12.004788398742676
    10. '	' → logprob: -12.129788398742676

Token 137: ':
' (ID: 734)
  Prédit: ':
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':
' → logprob: -0.706035852432251
    2. ':' → logprob: -1.206035852432251
    3. '               ' → logprob: -1.581035852432251
    4. '   ' → logprob: -7.706035614013672
    5. '           ' → logprob: -7.706035614013672
    6. ':i' → logprob: -8.831035614013672
    7. ' :
' → logprob: -9.706035614013672
    8. 'i' → logprob: -10.206035614013672
    9. ' :' → logprob: -10.581035614013672
    10. '       ' → logprob: -11.331035614013672

Token 138: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.44534817337989807
    2. 'i' → logprob: -1.6953481435775757
    3. '   ' → logprob: -1.9453481435775757
    4. ' i' → logprob: -3.9453482627868652
    5. '       ' → logprob: -4.570348262786865
    6. '           ' → logprob: -5.945348262786865
    7. '    
' → logprob: -8.820347785949707
    8. '```' → logprob: -9.445347785949707
    9. '                   ' → logprob: -9.570347785949707
    10. '
' → logprob: -9.695347785949707

Token 139: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' (adapté à ' i') → logprob: -0.0006148627726361156
    2. '   ' → logprob: -7.750614643096924
    3. '               ' → logprob: -9.375615119934082
    4. ' i' → logprob: -9.375615119934082
    5. '           ' → logprob: -11.375615119934082
    6. '                   ' → logprob: -13.500615119934082
    7. '  ' → logprob: -14.500615119934082
    8. '	i' → logprob: -14.500615119934082
    9. '       ' → logprob: -15.250615119934082
    10. ' ' → logprob: -15.375615119934082

Token 140: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.06256504356861115
    2. '=' → logprob: -2.8125650882720947
    3. ' +=' → logprob: -7.437564849853516
    4. '+' → logprob: -12.437564849853516
    5. ' =' → logprob: -12.437564849853516
    6. '<|end|>' → logprob: -15.562564849853516
    7. '1' → logprob: -16.187564849853516
    8. '+='' → logprob: -16.687564849853516
    9. '=True' → logprob: -16.937564849853516
    10. ']+=' → logprob: -17.437564849853516

Token 141: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.130576806142926e-05
    2. ' ' → logprob: -10.375031471252441
    3. '   ' → logprob: -20.625030517578125
    4. '  ' → logprob: -20.687530517578125
    5. '１' → logprob: -20.687530517578125
    6. '<|end|>' → logprob: -20.875030517578125
    7. '```' → logprob: -20.937530517578125
    8. '
' → logprob: -21.312530517578125
    9. '+' → logprob: -21.437530517578125
    10. '۱' → logprob: -21.625030517578125

Token 142: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.7697225252486533e-06
    2. ' ' → logprob: -12.500003814697266
    3. '<|end|>' → logprob: -19.625003814697266
    4. '```' → logprob: -20.000003814697266
    5. '   ' → logprob: -20.250003814697266
    6. '
' → logprob: -20.687503814697266
    7. '１' → logprob: -20.937503814697266
    8. '2' → logprob: -21.125003814697266
    9. '  ' → logprob: -21.125003814697266
    10. '-' → logprob: -21.250003814697266

Token 143: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 144: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 145: ' ans' (ID: 3345)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.015038831159472466
    2. 'if' → logprob: -4.640038967132568
    3. '   ' → logprob: -5.765038967132568
    4. ' print' → logprob: -6.515038967132568
    5. ' if' → logprob: -7.765038967132568
    6. 'for' → logprob: -9.26503849029541
    7. 'while' → logprob: -10.39003849029541
    8. ' ' → logprob: -10.76503849029541
    9. ')' → logprob: -10.89003849029541
    10. '    
' → logprob: -11.64003849029541

Token 146: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.4740825593471527
    2. '=' → logprob: -0.9740825891494751
    3. ' ' → logprob: -13.099082946777344
    4. '=int' → logprob: -13.724082946777344
    5. '＝' → logprob: -13.724082946777344
    6. 's' → logprob: -15.224082946777344
    7. '_' → logprob: -15.349082946777344
    8. ')' → logprob: -15.724082946777344
    9. ' ' → logprob: -16.474082946777344
    10. '1' → logprob: -16.599082946777344

Token 147: ' a' (ID: 261)
  Prédit: 'abs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'abs' → logprob: -0.025757314637303352
    2. 'a' → logprob: -3.775757312774658
    3. ' abs' → logprob: -6.025757312774658
    4. ' a' → logprob: -9.650757789611816
    5. 'max' → logprob: -10.775757789611816
    6. '   ' → logprob: -12.775757789611816
    7. '(abs' → logprob: -12.900757789611816
    8. ' ' → logprob: -14.025757789611816
    9. ' max' → logprob: -14.650757789611816
    10. 'int' → logprob: -15.150757789611816

Token 148: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -2.45848218582978e-06
    2. '1' → logprob: -13.62500286102295
    3. '[-' → logprob: -14.50000286102295
    4. '```' → logprob: -15.00000286102295
    5. '-' → logprob: -15.50000286102295
    6. '0' → logprob: -16.500001907348633
    7. '\[' → logprob: -17.250001907348633
    8. 'abs' → logprob: -17.250001907348633
    9. ' [' → logprob: -18.000001907348633
    10. 's' → logprob: -18.625001907348633

Token 149: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0008061755215749145
    2. '-' → logprob: -7.2508063316345215
    3. '0' → logprob: -9.250805854797363
    4. ' ' → logprob: -16.50080680847168
    5. '::-' → logprob: -16.75080680847168
    6. ' -' → logprob: -16.87580680847168
    7. '4' → logprob: -17.75080680847168
    8. ']' → logprob: -17.75080680847168
    9. '```' → logprob: -17.75080680847168
    10. '' → logprob: -18.12580680847168

Token 150: ']' (ID: 60)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.3869136571884155
    2. ' -' → logprob: -1.1369136571884155
    3. ']' → logprob: -10.511913299560547
    4. ' ' → logprob: -11.761913299560547
    5. ' ' → logprob: -12.511913299560547
    6. '   ' → logprob: -13.636913299560547
    7. ']-' → logprob: -14.386913299560547
    8. '−' → logprob: -14.636913299560547
    9. '–' → logprob: -15.011913299560547
    10. '  ' → logprob: -15.136913299560547

Token 151: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.0067176250740885735
    2. ' -' → logprob: -5.006717681884766
    3. '-
' → logprob: -13.881717681884766
    4. '-a' → logprob: -14.881717681884766
    5. '-i' → logprob: -15.631717681884766
    6. '-an' → logprob: -16.256717681884766
    7. ' ' → logprob: -16.381717681884766
    8. '-int' → logprob: -16.506717681884766
    9. '   ' → logprob: -16.756717681884766
    10. '-ai' → logprob: -16.756717681884766

Token 152: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.0001584850688232109
    2. ' a' → logprob: -8.750158309936523
    3. '   ' → logprob: -18.750158309936523
    4. 'ans' → logprob: -20.125158309936523
    5. '	a' → logprob: -21.000158309936523
    6. '1' → logprob: -21.125158309936523
    7. ' ' → logprob: -21.500158309936523
    8. '  ' → logprob: -22.250158309936523
    9. ' ans' → logprob: -22.875158309936523
    10. '       ' → logprob: -23.125158309936523

Token 153: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0010537689086049795
    2. '0' → logprob: -6.876053810119629
    3. '\[' → logprob: -11.001053810119629
    4. ' [' → logprob: -13.876053810119629
    5. '][' → logprob: -13.876053810119629
    6. '1' → logprob: -14.251053810119629
    7. '```' → logprob: -14.501053810119629
    8. '()[' → logprob: -14.626053810119629
    9. ''[' → logprob: -16.001052856445312
    10. 's' → logprob: -16.126052856445312

Token 154: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.2664456789934775e-06
    2. ' ' → logprob: -13.625000953674316
    3. '1' → logprob: -17.250001907348633
    4. '   ' → logprob: -18.250001907348633
    5. '[' → logprob: -18.375001907348633
    6. '01' → logprob: -18.875001907348633
    7. '۰' → logprob: -18.937501907348633
    8. '012' → logprob: -19.250001907348633
    9. '  ' → logprob: -19.625001907348633
    10. '010' → logprob: -19.687501907348633

Token 155: ']
' (ID: 1592)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.02324967086315155
    2. ')
' → logprob: -3.773249626159668
    3. ')

' → logprob: -13.398249626159668
    4. ' )' → logprob: -14.023249626159668
    5. ')
' → logprob: -14.148249626159668
    6. '```' → logprob: -15.523249626159668
    7. ' )
' → logprob: -15.648249626159668
    8. '),' → logprob: -15.773249626159668
    9. ']' → logprob: -15.898249626159668
    10. '}' → logprob: -16.148250579833984

Token 156: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.252315878868103
    2. 'print' → logprob: -1.502315878868103
    3. '   ' → logprob: -8.377315521240234
    4. '    
' → logprob: -9.752315521240234
    5. ' print' → logprob: -10.252315521240234
    6. '```' → logprob: -10.377315521240234
    7. '\n' → logprob: -11.377315521240234
    8. '  
' → logprob: -11.377315521240234
    9. '
' → logprob: -12.127315521240234
    10. '

' → logprob: -13.377315521240234

Token 157: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -9.85366350505501e-05
    2. ' print' → logprob: -9.25009822845459
    3. '
' → logprob: -13.00009822845459
    4. '   ' → logprob: -16.125099182128906
    5. '```' → logprob: -17.625099182128906
    6. '    
' → logprob: -18.875099182128906
    7. ' 
' → logprob: -21.500099182128906
    8. '
' → logprob: -22.250099182128906
    9. '	print' → logprob: -22.250099182128906
    10. '  
' → logprob: -22.375099182128906

Token 158: '(ans' (ID: 70054)
  Prédit: '(ans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ans' → logprob: -0.005240394733846188
    2. '(' → logprob: -5.255240440368652
    3. '(abs' → logprob: -13.005240440368652
    4. ' (' → logprob: -13.255240440368652
    5. '(answer' → logprob: -13.380240440368652
    6. '(a' → logprob: -14.630240440368652
    7. '(an' → logprob: -14.880240440368652
    8. '(
' → logprob: -16.130239486694336
    9. '()' → logprob: -17.005239486694336
    10. '(

' → logprob: -17.130239486694336

Token 159: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.320199877838604e-07
    2. ' )' → logprob: -15.125
    3. ')
' → logprob: -17.0
    4. ')`' → logprob: -18.25
    5. '))' → logprob: -18.375
    6. ')}' → logprob: -20.5
    7. '）' → logprob: -20.75
    8. ')#' → logprob: -20.875
    9. '')' → logprob: -21.0
    10. ')**' → logprob: -21.125


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 157
Tokens correctement prédits (1ère position, stricte): 47
Tokens correctement prédits (1ère position, avec adaptation): 52
Tokens correctement prédits (top 10): 125
Précision stricte (1ère position): 29.94%
Précision adaptée (1ère position): 33.12%
Précision (top 10): 79.62%
================================================================================
