================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:21:03
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def get_input():
    return input()

def convert_to_int(s):
    return int(s)

def divide_by_three(n):
    return n / 3

def power_of_three(n):
    return n ** 3

def print_result(res):
    print(res)

def main():
    value_str = get_input()
    value_int = convert_to_int(value_str)
    divided = divide_by_three(value_int)
    result = power_of_three(divided)
    print_result(result)

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' get' (ID: 717)
  → Token d'amorce (pas de prédiction)

Token 2: '_input' (ID: 12507)
  → Token d'amorce (pas de prédiction)

Token 3: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.016520852223038673
    2. '_' → logprob: -4.141520977020264
    3. '():' → logprob: -8.516520500183105
    4. '(:' → logprob: -9.266520500183105
    5. ' (' → logprob: -10.141520500183105
    6. '(_' → logprob: -10.141520500183105
    7. '(_:' → logprob: -10.516520500183105
    8. '```' → logprob: -11.016520500183105
    9. '()' → logprob: -11.516520500183105
    10. ':' → logprob: -11.766520500183105

Token 4: '   ' (ID: 271)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.09528274089097977
    2. '\' → logprob: -3.845282793045044
    3. '   ' → logprob: -4.095282554626465
    4. '(' → logprob: -4.470282554626465
    5. '\n' → logprob: -4.470282554626465
    6. '    
' → logprob: -4.970282554626465
    7. '``' → logprob: -5.970282554626465
    8. ':' → logprob: -5.970282554626465
    9. '`' → logprob: -6.220282554626465
    10. '()' → logprob: -6.220282554626465

Token 5: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.2881501317024231
    2. 'input' → logprob: -2.4131500720977783
    3. 'i' → logprob: -3.1631500720977783
    4. ' ' → logprob: -3.6631500720977783
    5. 'user' → logprob: -3.6631500720977783
    6. '   ' → logprob: -3.9131500720977783
    7. 'x' → logprob: -3.9131500720977783
    8. 'r' → logprob: -5.038150310516357
    9. '```' → logprob: -5.038150310516357
    10. 'a' → logprob: -5.788150310516357

Token 6: ' input' (ID: 3422)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3344734013080597
    2. ' input' → logprob: -1.5844733715057373
    3. '"' → logprob: -3.3344733715057373
    4. 'input' → logprob: -3.5844733715057373
    5. ''' → logprob: -4.334473609924316
    6. ' '' → logprob: -7.084473609924316
    7. ' "' → logprob: -7.209473609924316
    8. '  ' → logprob: -7.459473609924316
    9. ' None' → logprob: -9.209473609924316
    10. '(input' → logprob: -9.209473609924316

Token 7: '()

' (ID: 5874)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0017678854055702686
    2. '()' → logprob: -6.501768112182617
    3. '('' → logprob: -9.001768112182617
    4. ' (' → logprob: -10.376768112182617
    5. '("("' → logprob: -10.501768112182617
    6. '(
' → logprob: -10.626768112182617
    7. ''' → logprob: -11.376768112182617
    8. '.' → logprob: -11.626768112182617
    9. '```' → logprob: -12.001768112182617
    10. '"' → logprob: -12.251768112182617

Token 8: 'def' (ID: 1314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.24907560646533966
    2. '#' → logprob: -2.7490756511688232
    3. '\n' → logprob: -3.3740756511688232
    4. 'def' → logprob: -3.6240756511688232
    5. ':' → logprob: -4.124075412750244
    6. ')' → logprob: -4.249075412750244
    7. '()' → logprob: -4.499075412750244
    8. '```' → logprob: -4.749075412750244
    9. '.' → logprob: -4.874075412750244
    10. '(
' → logprob: -4.999075412750244

Token 9: ' convert' (ID: 8452)
  Prédit: ' get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.7384844422340393
    2. ' calculate' → logprob: -1.1134843826293945
    3. ' process' → logprob: -2.9884843826293945
    4. ' user' → logprob: -3.2384843826293945
    5. ' main' → logprob: -4.1134843826293945
    6. ' print' → logprob: -4.1134843826293945
    7. ' add' → logprob: -4.2384843826293945
    8. '_' → logprob: -4.8634843826293945
    9. ' space' → logprob: -4.9884843826293945
    10. ' check' → logprob: -5.2384843826293945

Token 10: '_to' (ID: 5089)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.584696888923645
    2. '_to' → logprob: -0.834696888923645
    3. '_string' → logprob: -6.0846967697143555
    4. '(' → logprob: -6.3346967697143555
    5. '_token' → logprob: -6.9596967697143555
    6. '_value' → logprob: -7.2096967697143555
    7. '_case' → logprob: -7.2096967697143555
    8. '_lower' → logprob: -8.209696769714355
    9. '_input' → logprob: -8.334696769714355
    10. '_text' → logprob: -8.709696769714355

Token 11: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.7310923337936401
    2. '_string' → logprob: -1.2310923337936401
    3. '_upper' → logprob: -2.3560924530029297
    4. '_lower' → logprob: -3.2310924530029297
    5. '_integer' → logprob: -3.3560924530029297
    6. '_number' → logprob: -4.10609245300293
    7. '_' → logprob: -4.10609245300293
    8. '_float' → logprob: -4.35609245300293
    9. '_str' → logprob: -5.23109245300293
    10. '_c' → logprob: -6.35609245300293

Token 12: '(s' (ID: 1858)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.06325056403875351
    2. '_' → logprob: -2.8132505416870117
    3. '(_)' → logprob: -8.063250541687012
    4. '("("' → logprob: -8.188250541687012
    5. '(_' → logprob: -8.813250541687012
    6. ' (' → logprob: -9.563250541687012
    7. 's' → logprob: -9.813250541687012
    8. '()' → logprob: -10.313250541687012
    9. '_(' → logprob: -10.438250541687012
    10. '```' → logprob: -10.563250541687012

Token 13: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.1805480569601059
    2. ')' → logprob: -1.805548071861267
    3. '):
' → logprob: -8.680547714233398
    4. 's' → logprob: -8.805547714233398
    5. ' ):' → logprob: -8.805547714233398
    6. ':' → logprob: -9.180547714233398
    7. '   ' → logprob: -9.430547714233398
    8. ' )' → logprob: -10.555547714233398
    9. ' ' → logprob: -11.305547714233398
    10. '(' → logprob: -11.430547714233398

Token 14: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.012131327763199806
    2. 'int' → logprob: -5.512131214141846
    3. ' return' → logprob: -6.137131214141846
    4. ' int' → logprob: -6.387131214141846
    5. '    ' → logprob: -6.512131214141846
    6. '(int' → logprob: -6.637131214141846
    7. '(' → logprob: -7.012131214141846
    8. 'return' → logprob: -9.012131690979004
    9. ':int' → logprob: -9.137131690979004
    10. '[int' → logprob: -9.137131690979004

Token 15: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3476502001285553
    2. ' return' → logprob: -1.597650170326233
    3. ' try' → logprob: -2.4726502895355225
    4. 'return' (adapté à ' return') → logprob: -5.597650051116943
    5. 'try' → logprob: -6.347650051116943
    6. '    ' → logprob: -6.847650051116943
    7. ' int' → logprob: -8.472650527954102
    8. 'int' → logprob: -9.722650527954102
    9. ' ' → logprob: -9.847650527954102
    10. '```' → logprob: -10.222650527954102

Token 16: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.0007127894787117839
    2. 'int' → logprob: -7.250712871551514
    3. '   ' → logprob: -14.000712394714355
    4. ' ' → logprob: -14.000712394714355
    5. '(int' → logprob: -14.250712394714355
    6. ' ' → logprob: -16.125713348388672
    7. '	int' → logprob: -16.250713348388672
    8. '=int' → logprob: -16.250713348388672
    9. '```' → logprob: -16.500713348388672
    10. '<int' → logprob: -16.750713348388672

Token 17: '(s' (ID: 1858)
  Prédit: '(s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(s' → logprob: -0.0485999770462513
    2. '(' → logprob: -3.0485999584198
    3. 's' → logprob: -11.673600196838379
    4. ' (' → logprob: -12.798600196838379
    5. '("("' → logprob: -15.298600196838379
    6. '(`' → logprob: -15.923600196838379
    7. '((' → logprob: -15.923600196838379
    8. '('' → logprob: -16.048599243164062
    9. '(ss' → logprob: -16.173599243164062
    10. ')' → logprob: -16.423599243164062

Token 18: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0001242772996192798
    2. '))' → logprob: -9.000123977661133
    3. ')))' → logprob: -14.750123977661133
    4. ' )' → logprob: -15.375123977661133
    5. ')
' → logprob: -16.375123977661133
    6. '`)' → logprob: -17.500123977661133
    7. '')' → logprob: -18.125123977661133
    8. '[' → logprob: -18.125123977661133
    9. ')`' → logprob: -18.125123977661133
    10. '())' → logprob: -18.250123977661133

Token 19: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0011063982965424657
    2. '\' → logprob: -7.876106262207031
    3. '\n' → logprob: -8.876106262207031
    4. '
' → logprob: -8.876106262207031
    5. '

' → logprob: -9.126106262207031
    6. '#' → logprob: -9.626106262207031
    7. '```' → logprob: -9.626106262207031
    8. 'd' → logprob: -9.751106262207031
    9. ' def' → logprob: -10.751106262207031
    10. '<|end|>' → logprob: -11.126106262207031

Token 20: ' divide' (ID: 38484)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.16679410636425018
    2. ' calculate' → logprob: -2.5417940616607666
    3. ' add' → logprob: -3.4167940616607666
    4. ' multiply' → logprob: -4.291794300079346
    5. ' square' → logprob: -4.666794300079346
    6. ' process' → logprob: -5.291794300079346
    7. ' sum' → logprob: -5.416794300079346
    8. 'main' → logprob: -6.291794300079346
    9. 'calculate' → logprob: -6.416794300079346
    10. ' is' → logprob: -6.541794300079346

Token 21: '_by' (ID: 8214)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.034181658178567886
    2. '(a' → logprob: -3.409181594848633
    3. ' (' → logprob: -9.034181594848633
    4. '_' → logprob: -9.159181594848633
    5. '(x' → logprob: -9.159181594848633
    6. '(div' → logprob: -9.784181594848633
    7. '()' → logprob: -10.159181594848633
    8. '_div' → logprob: -10.784181594848633
    9. '```' → logprob: -11.409181594848633
    10. '_numbers' → logprob: -11.659181594848633

Token 22: '_three' (ID: 121681)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.6995723843574524
    2. '_number' → logprob: -1.6995723247528076
    3. '_two' → logprob: -2.1995723247528076
    4. '_zero' → logprob: -2.6995723247528076
    5. '2' → logprob: -2.8245723247528076
    6. '_input' → logprob: -3.1995723247528076
    7. '_value' → logprob: -3.5745723247528076
    8. '_int' → logprob: -5.074572563171387
    9. '10' → logprob: -6.699572563171387
    10. ' ' → logprob: -6.949572563171387

Token 23: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.012225063517689705
    2. '(s' → logprob: -5.137225151062012
    3. '(n' → logprob: -5.762225151062012
    4. '()' → logprob: -6.512225151062012
    5. '(x' → logprob: -7.387225151062012
    6. ' (' → logprob: -7.762225151062012
    7. '():' → logprob: -8.762225151062012
    8. 'def' → logprob: -9.262225151062012
    9. '(def' → logprob: -9.387225151062012
    10. '(a' → logprob: -9.762225151062012

Token 24: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00784924067556858
    2. ')' → logprob: -4.882849216461182
    3. ' ):' → logprob: -8.50784969329834
    4. '):
' → logprob: -10.38284969329834
    5. ' )' → logprob: -12.88284969329834
    6. ':' → logprob: -12.88284969329834
    7. '   ' → logprob: -13.38284969329834
    8. '*' → logprob: -13.88284969329834
    9. ' ' → logprob: -14.63284969329834
    10. '():' → logprob: -15.25784969329834

Token 25: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -7.946405094116926e-05
    2. ' return' → logprob: -10.000079154968262
    3. 'return' → logprob: -10.375079154968262
    4. '```' → logprob: -13.500079154968262
    5. '   ' → logprob: -14.250079154968262
    6. '    
' → logprob: -14.875079154968262
    7. '       ' → logprob: -15.750079154968262
    8. '    ' → logprob: -16.125080108642578
    9. '  ' → logprob: -17.000080108642578
    10. '`' → logprob: -17.250080108642578

Token 26: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -1.0223865509033203
    2. 'return' (adapté à ' return') → logprob: -1.0223865509033203
    3. '   ' → logprob: -1.2723865509033203
    4. ' if' → logprob: -8.14738655090332
    5. 'if' → logprob: -10.02238655090332
    6. ' ' → logprob: -11.39738655090332
    7. '    ' → logprob: -11.64738655090332
    8. '```' → logprob: -12.14738655090332
    9. '  ' → logprob: -12.27238655090332
    10. ' n' → logprob: -13.27238655090332

Token 27: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.0019305398454889655
    2. 'n' → logprob: -6.2519307136535645
    3. ' ' → logprob: -13.626930236816406
    4. ' ' → logprob: -14.501930236816406
    5. ' (' → logprob: -16.251930236816406
    6. '	n' → logprob: -17.001930236816406
    7. '(n' → logprob: -17.126930236816406
    8. '/' → logprob: -17.876930236816406
    9. '3' → logprob: -17.876930236816406
    10. ' /' → logprob: -18.126930236816406

Token 28: ' /' (ID: 820)
  Prédit: ' //'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.0075590601190924644
    2. ' /' → logprob: -5.257558822631836
    3. '//' → logprob: -6.382558822631836
    4. ' ' → logprob: -8.007558822631836
    5. '/' → logprob: -8.382558822631836
    6. ' ' → logprob: -11.132558822631836
    7. '`' → logprob: -11.382558822631836
    8. ' ///' → logprob: -11.507558822631836
    9. '```' → logprob: -11.632558822631836
    10. ' %' → logprob: -12.382558822631836

Token 29: ' ' (ID: 220)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.020544106140732765
    2. ' ' → logprob: -3.8955440521240234
    3. '   ' → logprob: -14.270544052124023
    4. '  ' → logprob: -14.520544052124023
    5. ' ' → logprob: -14.770544052124023
    6. '```' → logprob: -15.270544052124023
    7. 'three' → logprob: -15.395544052124023
    8. ' three' → logprob: -15.645544052124023
    9. '３' → logprob: -17.270544052124023
    10. '۳' → logprob: -17.395544052124023

Token 30: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -4.320199877838604e-07
    2. ' ' → logprob: -15.0
    3. '```' → logprob: -17.625
    4. '   ' → logprob: -18.25
    5. 'three' → logprob: -19.375
    6. '۳' → logprob: -20.125
    7. '３' → logprob: -20.375
    8. '  ' → logprob: -20.5
    9. '٣' → logprob: -21.25
    10. '³' → logprob: -21.5

Token 31: '

' (ID: 279)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -1.262830138206482
    2. '<|end|>' → logprob: -1.512830138206482
    3. '*' → logprob: -1.887830138206482
    4. '
' → logprob: -2.1378302574157715
    5. 'def' → logprob: -2.8878302574157715
    6. '#' → logprob: -3.2628302574157715
    7. '```' → logprob: -3.5128302574157715
    8. '\' → logprob: -3.6378302574157715
    9. '(' → logprob: -3.7628302574157715
    10. ')' → logprob: -4.1378302574157715

Token 32: 'def' (ID: 1314)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.7430049777030945
    2. 'def' → logprob: -1.2430050373077393
    3. '#' → logprob: -2.3680050373077393
    4. '\' → logprob: -3.3680050373077393
    5. 'n' → logprob: -3.6180050373077393
    6. '*' → logprob: -3.9930050373077393
    7. '(' → logprob: -4.11800479888916
    8. '\n' → logprob: -4.24300479888916
    9. '```' → logprob: -4.61800479888916
    10. '
' → logprob: -5.49300479888916

Token 33: ' power' (ID: 3470)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.020635318011045456
    2. ' calculate' → logprob: -4.14563512802124
    3. ' multiply' → logprob: -5.77063512802124
    4. 'main' → logprob: -7.52063512802124
    5. ' get' → logprob: -8.145635604858398
    6. ' compute' → logprob: -8.895635604858398
    7. 'calculate' → logprob: -9.020635604858398
    8. ' square' → logprob: -9.145635604858398
    9. ' is' → logprob: -9.520635604858398
    10. 'multiply' → logprob: -9.770635604858398

Token 34: '_of' (ID: 8023)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0025514080189168453
    2. '_' → logprob: -6.377551555633545
    3. ' (' → logprob: -7.877551555633545
    4. '_(' → logprob: -8.377551078796387
    5. ' ' → logprob: -10.252551078796387
    6. 's' → logprob: -10.877551078796387
    7. '```' → logprob: -10.877551078796387
    8. '_^(' → logprob: -11.002551078796387
    9. '_of' → logprob: -11.502551078796387
    10. '2' → logprob: -11.627551078796387

Token 35: '_three' (ID: 121681)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.6905152201652527
    2. '3' → logprob: -1.6905152797698975
    3. '2' → logprob: -2.0655152797698975
    4. '(' → logprob: -2.5655152797698975
    5. ' ' → logprob: -2.6905152797698975
    6. '_two' → logprob: -3.5655152797698975
    7. '_three' → logprob: -4.565515041351318
    8. ' (' → logprob: -6.690515041351318
    9. 'two' → logprob: -7.315515041351318
    10. ' two' → logprob: -7.440515041351318

Token 36: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6008108258247375
    2. '(n' → logprob: -0.8508108258247375
    3. ' (' → logprob: -3.7258107662200928
    4. '(s' → logprob: -8.850811004638672
    5. '(x' → logprob: -9.100811004638672
    6. 's' → logprob: -10.600811004638672
    7. '(num' → logprob: -10.600811004638672
    8. '**' → logprob: -10.975811004638672
    9. '<|end|>' → logprob: -10.975811004638672
    10. ' ' → logprob: -10.975811004638672

Token 37: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.2821553349494934
    2. ')' → logprob: -1.4071552753448486
    3. '**' → logprob: -7.157155513763428
    4. ')**' → logprob: -9.28215503692627
    5. '(n' → logprob: -9.90715503692627
    6. ':' → logprob: -10.78215503692627
    7. ' ):' → logprob: -11.03215503692627
    8. '*' → logprob: -11.65715503692627
    9. ' )' → logprob: -11.78215503692627
    10. '):
' → logprob: -11.90715503692627

Token 38: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.002580178203061223
    2. ' return' → logprob: -6.252580165863037
    3. 'return' → logprob: -7.377580165863037
    4. ':' → logprob: -11.252580642700195
    5. 'n' → logprob: -12.752580642700195
    6. '```' → logprob: -13.627580642700195
    7. '   ' → logprob: -13.752580642700195
    8. '3' → logprob: -13.877580642700195
    9. '(' → logprob: -14.002580642700195
    10. '  ' → logprob: -14.127580642700195

Token 39: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4984644055366516
    2. 'return' (adapté à ' return') → logprob: -1.2484643459320068
    3. ' return' → logprob: -2.248464345932007
    4. ' ' → logprob: -11.373464584350586
    5. '```' → logprob: -11.623464584350586
    6. '  ' → logprob: -12.123464584350586
    7. 'n' → logprob: -13.248464584350586
    8. '3' → logprob: -13.373464584350586
    9. '	return' → logprob: -14.248464584350586
    10. 'eturn' → logprob: -14.998464584350586

Token 40: ' n' (ID: 297)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.8538213968276978
    2. ' n' → logprob: -1.1038213968276978
    3. ' ' → logprob: -1.4788213968276978
    4. 'n' → logprob: -4.228821277618408
    5. 'pow' → logprob: -9.603821754455566
    6. '   ' → logprob: -10.353821754455566
    7. ' pow' → logprob: -10.853821754455566
    8. ' three' → logprob: -11.603821754455566
    9. '```' → logprob: -12.853821754455566
    10. ' ' → logprob: -13.353821754455566

Token 41: ' **' (ID: 6240)
  Prédit: ' **'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' **' → logprob: -0.014701995067298412
    2. '**' → logprob: -4.264701843261719
    3. ' *' → logprob: -7.639701843261719
    4. ' ***' → logprob: -10.639701843261719
    5. '*' → logprob: -10.764701843261719
    6. ' ' → logprob: -12.139701843261719
    7. '***' → logprob: -12.764701843261719
    8. ' ' → logprob: -13.764701843261719
    9. '3' → logprob: -14.014701843261719
    10. ' ***
' → logprob: -14.014701843261719

Token 42: ' ' (ID: 220)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.1602250337600708
    2. ' ' → logprob: -1.9102250337600708
    3. ' ' → logprob: -14.285224914550781
    4. '  ' → logprob: -15.660224914550781
    5. '2' → logprob: -16.91022491455078
    6. '   ' → logprob: -18.16022491455078
    7. '۳' → logprob: -18.16022491455078
    8. '1' → logprob: -18.66022491455078
    9. '³' → logprob: -18.91022491455078
    10. '' → logprob: -19.28522491455078

Token 43: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -4.320199877838604e-07
    2. ' ' → logprob: -14.75
    3. '```' → logprob: -20.5
    4. '³' → logprob: -20.875
    5. '۳' → logprob: -21.125
    6. '３' → logprob: -21.375
    7. '   ' → logprob: -21.75
    8. '٣' → logprob: -22.125
    9. '  ' → logprob: -22.75
    10. '' → logprob: -22.75

Token 44: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.39275923371315
    2. '
' → logprob: -1.6427592039108276
    3. '<|end|>' → logprob: -2.642759323120117
    4. '\n' → logprob: -3.767759323120117
    5. '\' → logprob: -4.267759323120117
    6. '#' → logprob: -4.642759323120117
    7. 'n' → logprob: -5.642759323120117
    8. '

' → logprob: -6.017759323120117
    9. '```' → logprob: -6.267759323120117
    10. '[' → logprob: -7.017759323120117

Token 45: 'def' (ID: 1314)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.3065582811832428
    2. 'def' → logprob: -1.4315582513809204
    3. '#' → logprob: -4.306558132171631
    4. '\' → logprob: -5.931558132171631
    5. 'n' → logprob: -5.931558132171631
    6. 'a' → logprob: -6.181558132171631
    7. 'p' → logprob: -7.181558132171631
    8. '(' → logprob: -7.431558132171631
    9. '
' → logprob: -7.556558132171631
    10. 'i' → logprob: -8.056558609008789

Token 46: ' print' (ID: 2123)
  Prédit: ' calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.5356358289718628
    2. ' main' → logprob: -1.2856358289718628
    3. ' multiply' → logprob: -2.4106359481811523
    4. ' cube' → logprob: -4.035635948181152
    5. ' square' → logprob: -4.660635948181152
    6. ' factorial' → logprob: -4.785635948181152
    7. ' compute' → logprob: -5.035635948181152
    8. ' get' → logprob: -6.410635948181152
    9. ' process' → logprob: -6.410635948181152
    10. 'calculate' → logprob: -6.910635948181152

Token 47: '_result' (ID: 11623)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0007561430102214217
    2. '()' → logprob: -7.87575626373291
    3. '_' → logprob: -8.62575626373291
    4. '('' → logprob: -9.50075626373291
    5. '("' → logprob: -10.00075626373291
    6. ' (' → logprob: -10.75075626373291
    7. '("")' → logprob: -11.12575626373291
    8. '("("' → logprob: -11.25075626373291
    9. '("""' → logprob: -12.12575626373291
    10. ' ' → logprob: -13.12575626373291

Token 48: '(res' (ID: 8331)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0009411195642314851
    2. '()' → logprob: -7.375941276550293
    3. '():' → logprob: -8.625941276550293
    4. '("("' → logprob: -10.500941276550293
    5. ':' → logprob: -11.250941276550293
    6. '_' → logprob: -11.250941276550293
    7. '```' → logprob: -11.750941276550293
    8. ' (' → logprob: -12.000941276550293
    9. '(user' → logprob: -12.000941276550293
    10. '(def' → logprob: -12.125941276550293

Token 49: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.47430315613746643
    2. ')' → logprob: -0.974303126335144
    3. 't' → logprob: -9.849303245544434
    4. '):
' → logprob: -10.224303245544434
    5. ' ):' → logprob: -10.224303245544434
    6. ' )' → logprob: -11.224303245544434
    7. ')**' → logprob: -11.599303245544434
    8. 'es' → logprob: -11.724303245544434
    9. 'et' → logprob: -11.724303245544434
    10. 'e' → logprob: -11.974303245544434

Token 50: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -3.273621405242011e-05
    2. 'print' → logprob: -10.875032424926758
    3. ' print' → logprob: -11.250032424926758
    4. '```' → logprob: -14.875032424926758
    5. '   ' → logprob: -15.000032424926758
    6. '    
' → logprob: -17.750032424926758
    7. '	print' → logprob: -18.000032424926758
    8. '       ' → logprob: -18.125032424926758
    9. '(' → logprob: -18.250032424926758
    10. '    ' → logprob: -18.375032424926758

Token 51: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.08268213272094727
    2. '   ' → logprob: -2.5826821327209473
    3. 'print' (adapté à ' print') → logprob: -5.582682132720947
    4. '    ' → logprob: -10.957681655883789
    5. '```' → logprob: -13.332681655883789
    6. '  ' → logprob: -13.832681655883789
    7. '	print' → logprob: -14.207681655883789
    8. ' ' → logprob: -14.457681655883789
    9. ' pass' → logprob: -14.707681655883789
    10. '   ' → logprob: -14.832681655883789

Token 52: '(res' (ID: 8331)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6931908130645752
    2. '(res' → logprob: -0.6931908130645752
    3. '(result' → logprob: -10.443190574645996
    4. ' (' → logprob: -11.943190574645996
    5. '()' → logprob: -12.818190574645996
    6. 'res' → logprob: -13.068190574645996
    7. '(
' → logprob: -13.943190574645996
    8. '(

' → logprob: -15.068190574645996
    9. '(results' → logprob: -15.318190574645996
    10. '(`' → logprob: -15.318190574645996

Token 53: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.9361264946837764e-07
    2. '))' → logprob: -16.75
    3. ' )' → logprob: -17.375
    4. '`)' → logprob: -17.75
    5. ')
' → logprob: -17.875
    6. '')' → logprob: -18.25
    7. '")' → logprob: -19.25
    8. '}' → logprob: -19.375
    9. ')`' → logprob: -19.375
    10. '()' → logprob: -19.875

Token 54: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0009483799804002047
    2. 'n' → logprob: -7.375948429107666
    3. 'd' → logprob: -8.500947952270508
    4. '\' → logprob: -9.750947952270508
    5. '```' → logprob: -11.500947952270508
    6. '#' → logprob: -11.750947952270508
    7. '\n' → logprob: -12.125947952270508
    8. 'result' → logprob: -12.250947952270508
    9. '  
' → logprob: -12.375947952270508
    10. '    
' → logprob: -12.375947952270508

Token 55: ' main' (ID: 2758)
  Prédit: ' main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.00012094692647224292
    2. ' calculate' → logprob: -9.500121116638184
    3. ' process' → logprob: -10.125121116638184
    4. 'main' → logprob: -12.750121116638184
    5. ' compute' → logprob: -13.250121116638184
    6. ' run' → logprob: -14.000121116638184
    7. '	main' → logprob: -16.250120162963867
    8. ' execute' → logprob: -16.625120162963867
    9. ' get' → logprob: -16.625120162963867
    10. '_main' → logprob: -16.750120162963867

Token 56: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.007047702558338642
    2. '(' → logprob: -5.007047653198242
    3. '()' → logprob: -8.132047653198242
    4. '(:' → logprob: -11.132047653198242
    5. '_' → logprob: -11.257047653198242
    6. ' ():' → logprob: -12.382047653198242
    7. ':' → logprob: -12.632047653198242
    8. '(":' → logprob: -14.132047653198242
    9. '(**' → logprob: -14.132047653198242
    10. '():
' → logprob: -15.257047653198242

Token 57: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00495337788015604
    2. ' input' → logprob: -6.379953384399414
    3. 'input' → logprob: -6.629953384399414
    4. '    ' → logprob: -7.129953384399414
    5. 'n' → logprob: -7.879953384399414
    6. '    
' → logprob: -8.379953384399414
    7. ' n' → logprob: -8.629953384399414
    8. ' user' → logprob: -9.504953384399414
    9. ' ' → logprob: -10.504953384399414
    10. 'user' → logprob: -10.629953384399414

Token 58: ' value' (ID: 1432)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.8523069620132446
    2. ' n' → logprob: -2.227306842803955
    3. '   ' → logprob: -2.227306842803955
    4. 's' → logprob: -2.602306842803955
    5. ' user' → logprob: -2.602306842803955
    6. 'num' → logprob: -2.852306842803955
    7. 'user' → logprob: -2.977306842803955
    8. 'x' → logprob: -3.602306842803955
    9. ' s' → logprob: -3.602306842803955
    10. 'value' (adapté à ' value') → logprob: -4.227306842803955

Token 59: '_str' (ID: 6182)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0002979240380227566
    2. '=' → logprob: -8.625297546386719
    3. ' ' → logprob: -9.250297546386719
    4. '_' → logprob: -11.000297546386719
    5. '   ' → logprob: -12.750297546386719
    6. '  ' → logprob: -13.875297546386719
    7. ' =)' → logprob: -14.375297546386719
    8. ' _' → logprob: -15.250297546386719
    9. '    ' → logprob: -15.250297546386719
    10. '_input' → logprob: -15.500297546386719

Token 60: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0002969703928101808
    2. '=' → logprob: -8.125296592712402
    3. ' ' → logprob: -14.125296592712402
    4. ' =)' → logprob: -16.37529754638672
    5. ' ' → logprob: -17.62529754638672
    6. '  ' → logprob: -17.75029754638672
    7. ' =
' → logprob: -18.12529754638672
    8. '   ' → logprob: -18.87529754638672
    9. ' ==' → logprob: -19.25029754638672
    10. ' ,' → logprob: -19.25029754638672

Token 61: ' get' (ID: 717)
  Prédit: ' get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.023746652528643608
    2. 'get' → logprob: -4.148746490478516
    3. ' input' → logprob: -4.898746490478516
    4. 'input' → logprob: -8.398746490478516
    5. ' ' → logprob: -14.648746490478516
    6. '	get' → logprob: -14.898746490478516
    7. '(get' → logprob: -14.898746490478516
    8. '=get' → logprob: -15.898746490478516
    9. ')get' → logprob: -16.648746490478516
    10. '    ' → logprob: -16.773746490478516

Token 62: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.0001319063303526491
    2. '_' → logprob: -9.500131607055664
    3. '_value' → logprob: -9.875131607055664
    4. ' _' → logprob: -13.000131607055664
    5. '_in' → logprob: -14.250131607055664
    6. '_output' → logprob: -14.625131607055664
    7. '_put' → logprob: -14.750131607055664
    8. '_line' → logprob: -14.875131607055664
    9. '_val' → logprob: -15.000131607055664
    10. '_str' → logprob: -15.875131607055664

Token 63: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -4.008129963040119e-06
    2. '()
' → logprob: -12.875003814697266
    3. '(' → logprob: -14.750003814697266
    4. '()

' → logprob: -14.875003814697266
    5. ' ()' → logprob: -15.250003814697266
    6. '()`' → logprob: -16.500003814697266
    7. '()(' → logprob: -16.750003814697266
    8. '())' → logprob: -16.875003814697266
    9. '().' → logprob: -17.250003814697266
    10. '(),' → logprob: -17.750003814697266

Token 64: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10239225625991821
    2. '
' → logprob: -3.1023921966552734
    3. 'value' → logprob: -3.6023921966552734
    4. '    
' → logprob: -4.102392196655273
    5. '    ' → logprob: -5.852392196655273
    6. ' value' → logprob: -6.477392196655273
    7. '   
' → logprob: -6.977392196655273
    8. ' ' → logprob: -6.977392196655273
    9. '  
' → logprob: -7.477392196655273
    10. '  ' → logprob: -7.727392196655273

Token 65: ' value' (ID: 1432)
  Prédit: 'value'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'value' (adapté à ' value') → logprob: -0.3928375244140625
    2. ' value' → logprob: -1.2678375244140625
    3. '   ' → logprob: -3.1428375244140625
    4. 'n' → logprob: -8.767837524414062
    5. '    ' → logprob: -10.642837524414062
    6. ' n' → logprob: -10.767837524414062
    7. '
' → logprob: -11.142837524414062
    8. ' ' → logprob: -11.517837524414062
    9. '	value' → logprob: -11.642837524414062
    10. '    
' → logprob: -11.767837524414062

Token 66: '_int' (ID: 12285)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.46878963708877563
    2. '_' → logprob: -1.4687895774841309
    3. '_int' → logprob: -1.9687895774841309
    4. '_num' → logprob: -6.218789577484131
    5. '=' → logprob: -6.718789577484131
    6. '_str' → logprob: -7.968789577484131
    7. ' _' → logprob: -8.093790054321289
    8. '_n' → logprob: -8.843790054321289
    9. '_val' → logprob: -9.593790054321289
    10. '_value' → logprob: -9.593790054321289

Token 67: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0013277375837787986
    2. '=' → logprob: -6.6263275146484375
    3. ' ' → logprob: -13.376327514648438
    4. ' =)' → logprob: -15.751327514648438
    5. ' ' → logprob: -17.001327514648438
    6. ' =
' → logprob: -17.001327514648438
    7. ')' → logprob: -18.001327514648438
    8. '_' → logprob: -18.876327514648438
    9. ' =(' → logprob: -19.001327514648438
    10. ' =
' → logprob: -19.001327514648438

Token 68: ' convert' (ID: 8452)
  Prédit: ' convert'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' convert' → logprob: -0.00103352265432477
    2. 'convert' → logprob: -6.876033306121826
    3. '(convert' → logprob: -14.251033782958984
    4. '_convert' → logprob: -17.001033782958984
    5. '.convert' → logprob: -17.751033782958984
    6. '    ' → logprob: -18.501033782958984
    7. ' convertir' → logprob: -18.876033782958984
    8. ' covert' → logprob: -19.001033782958984
    9. ' conversion' → logprob: -19.501033782958984
    10. ' int' → logprob: -19.626033782958984

Token 69: '_to' (ID: 5089)
  Prédit: '_to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_to' → logprob: -2.696889623621246e-06
    2. '_t' → logprob: -13.12500286102295
    3. '_' → logprob: -15.00000286102295
    4. ' _' → logprob: -16.750001907348633
    5. '```' → logprob: -17.000001907348633
    6. '##_' → logprob: -17.625001907348633
    7. ')_' → logprob: -17.750001907348633
    8. '_value' → logprob: -18.000001907348633
    9. '_into' → logprob: -18.000001907348633
    10. '__' → logprob: -18.125001907348633

Token 70: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.0017764460062608123
    2. 'int' → logprob: -6.376776218414307
    3. '_t' → logprob: -10.001776695251465
    4. 't' → logprob: -10.751776695251465
    5. 'nt' → logprob: -12.376776695251465
    6. '_str' → logprob: -14.376776695251465
    7. '_nt' → logprob: -14.501776695251465
    8. '```' → logprob: -14.626776695251465
    9. ' _' → logprob: -14.751776695251465
    10. '_' → logprob: -14.876776695251465

Token 71: '(value' (ID: 6333)
  Prédit: '(value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(value' → logprob: -0.00047630956396460533
    2. '(' → logprob: -7.750476360321045
    3. ' (' → logprob: -10.000475883483887
    4. ' ' → logprob: -16.250476837158203
    5. '```' → logprob: -16.875476837158203
    6. '(Value' → logprob: -17.500476837158203
    7. '(user' → logprob: -18.125476837158203
    8. '(valor' → logprob: -18.750476837158203
    9. '(
' → logprob: -19.250476837158203
    10. '('' → logprob: -19.375476837158203

Token 72: '_str' (ID: 6182)
  Prédit: '_str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_str' → logprob: -0.0007663871510885656
    2. '_int' → logprob: -7.500766277313232
    3. ')' → logprob: -8.87576675415039
    4. 'str' → logprob: -10.12576675415039
    5. 'int' → logprob: -11.37576675415039
    6. '(str' → logprob: -12.00076675415039
    7. '(' → logprob: -13.12576675415039
    8. '))' → logprob: -13.12576675415039
    9. '_)' → logprob: -13.12576675415039
    10. '   ' → logprob: -13.75076675415039

Token 73: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0002116462419508025
    2. ')
' → logprob: -8.500211715698242
    3. '   ' → logprob: -12.375211715698242
    4. ' )' → logprob: -12.500211715698242
    5. ')
' → logprob: -16.750211715698242
    6. ')

' → logprob: -17.000211715698242
    7. ' ' → logprob: -17.000211715698242
    8. '#' → logprob: -17.750211715698242
    9. '),' → logprob: -17.875211715698242
    10. '()' → logprob: -18.000211715698242

Token 74: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05538521707057953
    2. ' result' → logprob: -3.430385112762451
    3. 'result' → logprob: -4.305385112762451
    4. '    
' → logprob: -5.805385112762451
    5. ' res' → logprob: -6.180385112762451
    6. '
' → logprob: -6.180385112762451
    7. 'res' → logprob: -7.305385112762451
    8. '```' → logprob: -10.05538558959961
    9. '	result' → logprob: -10.55538558959961
    10. '   ' → logprob: -11.30538558959961

Token 75: ' divided' (ID: 28261)
  Prédit: ' result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' result' → logprob: -1.0964478254318237
    2. 'result' → logprob: -1.0964478254318237
    3. 'div' → logprob: -1.7214478254318237
    4. '   ' → logprob: -2.4714479446411133
    5. ' divided' → logprob: -3.0964479446411133
    6. ' div' → logprob: -4.221447944641113
    7. ' res' → logprob: -6.096447944641113
    8. 'res' → logprob: -6.221447944641113
    9. ' division' → logprob: -6.471447944641113
    10. 'division' → logprob: -7.471447944641113

Token 76: ' =' (ID: 314)
  Prédit: '_by'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_by' → logprob: -0.579739511013031
    2. '_value' → logprob: -0.829739511013031
    3. '_' → logprob: -5.829739570617676
    4. '_val' → logprob: -7.329739570617676
    5. '_result' → logprob: -8.829739570617676
    6. ' =' → logprob: -10.454739570617676
    7. '=' → logprob: -11.829739570617676
    8. '_b' → logprob: -12.204739570617676
    9. '=_' → logprob: -13.204739570617676
    10. ' _' → logprob: -14.079739570617676

Token 77: ' divide' (ID: 38484)
  Prédit: ' divide'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' divide' → logprob: -0.018165510147809982
    2. 'divide' → logprob: -4.018165588378906
    3. ' value' → logprob: -11.768165588378906
    4. 'div' → logprob: -12.018165588378906
    5. 'value' → logprob: -14.018165588378906
    6. ' division' → logprob: -15.268165588378906
    7. ' ' → logprob: -15.268165588378906
    8. ' divided' → logprob: -15.393165588378906
    9. ' divid' → logprob: -15.893165588378906
    10. '.divide' → logprob: -16.643165588378906

Token 78: '_by' (ID: 8214)
  Prédit: '_by'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_by' → logprob: -6.630610641877865e-06
    2. '_' → logprob: -12.625006675720215
    3. 'd' → logprob: -13.875006675720215
    4. 'ed' → logprob: -14.500006675720215
    5. '_b' → logprob: -14.750006675720215
    6. '_value' → logprob: -14.875006675720215
    7. ')_' → logprob: -15.250006675720215
    8. '_of' → logprob: -15.875006675720215
    9. '_to' → logprob: -16.3750057220459
    10. '_d' → logprob: -16.5000057220459

Token 79: '_three' (ID: 121681)
  Prédit: '_three'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_three' → logprob: -0.003630715887993574
    2. 'three' → logprob: -5.628630638122559
    3. '_' → logprob: -10.878630638122559
    4. ' three' → logprob: -12.003630638122559
    5. '_th' → logprob: -12.378630638122559
    6. '3' → logprob: -14.753630638122559
    7. '_thr' → logprob: -14.878630638122559
    8. 'Three' → logprob: -15.128630638122559
    9. ' три' → logprob: -15.753630638122559
    10. 't' → logprob: -16.253631591796875

Token 80: '(value' (ID: 6333)
  Prédit: '(value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(value' → logprob: -0.2606893479824066
    2. '(div' → logprob: -1.510689377784729
    3. '(' → logprob: -4.7606892585754395
    4. ' (' → logprob: -8.760689735412598
    5. '(d' → logprob: -13.385689735412598
    6. '   ' → logprob: -13.510689735412598
    7. '(
' → logprob: -15.010689735412598
    8. ' ' → logprob: -15.010689735412598
    9. '(dis' → logprob: -15.260689735412598
    10. '(de' → logprob: -15.385689735412598

Token 81: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.03980483487248421
    2. 'int' → logprob: -3.7898049354553223
    3. ')' → logprob: -4.164804935455322
    4. 'nt' → logprob: -7.914804935455322
    5. 't' → logprob: -7.914804935455322
    6. 'Int' → logprob: -10.289804458618164
    7. '_)' → logprob: -10.914804458618164
    8. '(' → logprob: -10.914804458618164
    9. 'div' → logprob: -11.289804458618164
    10. '   ' → logprob: -11.414804458618164

Token 82: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.003662191331386566
    2. ')
' → logprob: -5.628662109375
    3. '   ' → logprob: -9.753662109375
    4. ')
' → logprob: -12.753662109375
    5. ' )' → logprob: -14.253662109375
    6. ')

' → logprob: -15.378662109375
    7. ' ' → logprob: -16.378662109375
    8. ' )
' → logprob: -17.128662109375
    9. ')`' → logprob: -17.628662109375
    10. '),' → logprob: -17.878662109375

Token 83: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03444405272603035
    2. 'powered' → logprob: -4.0344438552856445
    3. 'result' → logprob: -4.6594438552856445
    4. 'power' → logprob: -6.0344438552856445
    5. '    
' → logprob: -6.9094438552856445
    6. ' powered' → logprob: -6.9094438552856445
    7. 'cub' → logprob: -7.1594438552856445
    8. 'pow' → logprob: -7.6594438552856445
    9. ' result' → logprob: -8.159443855285645
    10. ' cub' → logprob: -8.784443855285645

Token 84: ' result' (ID: 1534)
  Prédit: 'powered'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'powered' → logprob: -0.6612496972084045
    2. 'result' (adapté à ' result') → logprob: -1.2862496376037598
    3. '   ' → logprob: -1.9112496376037598
    4. 'power' → logprob: -3.5362496376037598
    5. 'pow' → logprob: -4.66124963760376
    6. 'cub' → logprob: -4.66124963760376
    7. ' powered' → logprob: -5.03624963760376
    8. 'res' → logprob: -6.66124963760376
    9. '    
' → logprob: -6.91124963760376
    10. ' result' → logprob: -7.03624963760376

Token 85: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.032874979078769684
    2. '=' → logprob: -3.6578750610351562
    3. '_' → logprob: -5.032875061035156
    4. 's' → logprob: -10.532875061035156
    5. '_=' → logprob: -13.282875061035156
    6. 'ed' → logprob: -13.782875061035156
    7. '=_' → logprob: -13.907875061035156
    8. ' ' → logprob: -14.032875061035156
    9. '_power' → logprob: -14.657875061035156
    10. '_pow' → logprob: -14.907875061035156

Token 86: ' power' (ID: 3470)
  Prédit: ' power'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' power' → logprob: -0.1603497415781021
    2. 'power' → logprob: -1.910349726676941
    3. 'pow' → logprob: -9.28534984588623
    4. ' pow' → logprob: -10.66034984588623
    5. ' ' → logprob: -12.91034984588623
    6. '(power' → logprob: -12.91034984588623
    7. '   ' → logprob: -13.03534984588623
    8. '_power' → logprob: -14.28534984588623
    9. ' powers' → logprob: -14.53534984588623
    10. ' ' → logprob: -14.91034984588623

Token 87: '_of' (ID: 8023)
  Prédit: '_of'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_of' → logprob: -1.1472419600977446e-06
    2. '_' → logprob: -14.125000953674316
    3. ' _' → logprob: -15.750000953674316
    4. '_o' → logprob: -16.125001907348633
    5. '_or' → logprob: -17.250001907348633
    6. '\' → logprob: -17.750001907348633
    7. '_for' → logprob: -17.875001907348633
    8. '```' → logprob: -18.125001907348633
    9. 'of' → logprob: -18.625001907348633
    10. '_off' → logprob: -18.750001907348633

Token 88: '_three' (ID: 121681)
  Prédit: '_three'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_three' → logprob: -0.0007129086880013347
    2. 'three' → logprob: -7.250712871551514
    3. '_' → logprob: -13.875713348388672
    4. ' three' → logprob: -14.000713348388672
    5. '_th' → logprob: -14.375713348388672
    6. '_thr' → logprob: -15.250713348388672
    7. '3' → logprob: -15.625713348388672
    8. ' три' → logprob: -16.750713348388672
    9. 'Three' → logprob: -16.750713348388672
    10. '_tree' → logprob: -17.875713348388672

Token 89: '(div' (ID: 73108)
  Prédit: '(div'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(div' → logprob: -0.014179493300616741
    2. '(' → logprob: -4.264179706573486
    3. ' (' → logprob: -11.764179229736328
    4. 'div' → logprob: -13.389179229736328
    5. '(value' → logprob: -13.639179229736328
    6. '(d' → logprob: -13.764179229736328
    7. '(
' → logprob: -13.764179229736328
    8. '(

' → logprob: -14.514179229736328
    9. '(di' → logprob: -14.764179229736328
    10. ' ' → logprob: -14.764179229736328

Token 90: 'ided' (ID: 6350)
  Prédit: 'ided'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ided' → logprob: -0.010834753513336182
    2. 'ide' → logprob: -4.885834693908691
    3. 'ed' → logprob: -6.385834693908691
    4. 'id' → logprob: -6.760834693908691
    5. 'ded' → logprob: -8.260834693908691
    6. '_id' → logprob: -10.135834693908691
    7. 'ied' → logprob: -10.635834693908691
    8. '   ' → logprob: -11.260834693908691
    9. '_' → logprob: -12.010834693908691
    10. 'eded' → logprob: -12.135834693908691

Token 91: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0006293982733041048
    2. ')
' → logprob: -7.375629425048828
    3. '   ' → logprob: -14.125629425048828
    4. ' )' → logprob: -14.250629425048828
    5. ')
' → logprob: -14.625629425048828
    6. '()' → logprob: -15.000629425048828
    7. ')`' → logprob: -15.375629425048828
    8. '))' → logprob: -15.625629425048828
    9. ')

' → logprob: -15.875629425048828
    10. ')`
' → logprob: -17.000629425048828

Token 92: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.006644918117672205
    2. '
' → logprob: -5.6316447257995605
    3. '    
' → logprob: -5.8816447257995605
    4. 'print' → logprob: -9.381645202636719
    5. '  
' → logprob: -9.631645202636719
    6. ')' → logprob: -10.631645202636719
    7. '(' → logprob: -11.506645202636719
    8. ' 
' → logprob: -11.756645202636719
    9. '()' → logprob: -11.881645202636719
    10. '\n' → logprob: -11.881645202636719

Token 93: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.20177581906318665
    2. 'print' (adapté à ' print') → logprob: -1.7017757892608643
    3. '    
' → logprob: -9.576775550842285
    4. 'result' → logprob: -9.701775550842285
    5. '```' → logprob: -9.951775550842285
    6. ' print' → logprob: -10.076775550842285
    7. '(print' → logprob: -10.326775550842285
    8. ')' → logprob: -10.576775550842285
    9. '
' → logprob: -10.576775550842285
    10. '	print' → logprob: -11.326775550842285

Token 94: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -4.127333340875339e-06
    2. '_' → logprob: -13.000003814697266
    3. '_res' → logprob: -13.625003814697266
    4. ' _' → logprob: -15.000003814697266
    5. '_results' → logprob: -16.000003814697266
    6. '_Result' → logprob: -17.125003814697266
    7. '_RESULT' → logprob: -17.250003814697266
    8. '(_' → logprob: -17.750003814697266
    9. '```' → logprob: -18.000003814697266
    10. '_r' → logprob: -18.000003814697266

Token 95: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.16268706321716309
    2. '(' → logprob: -1.912687063217163
    3. '(res' → logprob: -6.037687301635742
    4. ' (' → logprob: -10.787687301635742
    5. '(value' → logprob: -10.912687301635742
    6. '(results' → logprob: -11.037687301635742
    7. '(return' → logprob: -12.537687301635742
    8. '(resultado' → logprob: -12.787687301635742
    9. '(
' → logprob: -13.037687301635742
    10. '(

' → logprob: -13.662687301635742

Token 96: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.6240566083070007e-06
    2. ')
' → logprob: -13.750001907348633
    3. ' )' → logprob: -15.250001907348633
    4. '()' → logprob: -15.875001907348633
    5. '())' → logprob: -17.625001907348633
    6. '   ' → logprob: -18.125001907348633
    7. '))' → logprob: -18.250001907348633
    8. ')`' → logprob: -18.625001907348633
    9. ')

' → logprob: -19.000001907348633
    10. '`)' → logprob: -19.625001907348633

Token 97: 'main' (ID: 7731)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.28793591260910034
    2. 'main' → logprob: -1.7879359722137451
    3. '\n' → logprob: -2.662935972213745
    4. '
' → logprob: -4.912935733795166
    5. '\' → logprob: -5.287935733795166
    6. ' main' → logprob: -9.162936210632324
    7. '  
' → logprob: -9.162936210632324
    8. ' if' → logprob: -9.287936210632324
    9. '```' → logprob: -9.412936210632324
    10. '    
' → logprob: -9.537936210632324

Token 98: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0012436824617907405
    2. '(' → logprob: -6.751243591308594
    3. '()
' → logprob: -9.626243591308594
    4. '()

' → logprob: -13.126243591308594
    5. '(
' → logprob: -13.501243591308594
    6. ' ()' → logprob: -13.626243591308594
    7. '()`' → logprob: -13.876243591308594
    8. '```' → logprob: -14.751243591308594
    9. '();' → logprob: -14.876243591308594
    10. '()\' → logprob: -15.501243591308594


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 96
Tokens correctement prédits (1ère position, stricte): 44
Tokens correctement prédits (1ère position, avec adaptation): 46
Tokens correctement prédits (top 10): 81
Précision stricte (1ère position): 45.83%
Précision adaptée (1ère position): 47.92%
Précision (top 10): 84.38%
================================================================================
