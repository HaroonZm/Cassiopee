================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:03:41
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
a = []
for x in range(0,5):
    number = int(input())
    a.append(number) # Ok bon, je mets ça ici...
min_a = min(a)
# Pas sûr que ce soit optimal mais bon
if n % min_a == 0:
    print(4 + n // min_a)
else:
    print(5 + n // min_a) # on rajoute 1, ça doit marcher?
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.000133098365040496
    2. '(n' → logprob: -10.000133514404297
    3. '```' → logprob: -10.750133514404297
    4. '`' → logprob: -10.875133514404297
    5. '(input' → logprob: -11.125133514404297
    6. ''' → logprob: -11.750133514404297
    7. '('' → logprob: -11.875133514404297
    8. '(
' → logprob: -12.625133514404297
    9. '()' → logprob: -12.875133514404297
    10. '("("' → logprob: -13.250133514404297

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.48536184430122375
    2. ')' → logprob: -0.9853618144989014
    3. '()' → logprob: -4.7353620529174805
    4. '())' → logprob: -6.3603620529174805
    5. '(
' → logprob: -8.48536205291748
    6. '```' → logprob: -9.73536205291748
    7. '[' → logprob: -9.86036205291748
    8. '")' → logprob: -9.98536205291748
    9. '(

' → logprob: -10.23536205291748
    10. '')' → logprob: -10.36036205291748

Token 5: 'a' (ID: 64)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.7043631672859192
    2. 'if' → logprob: -1.4543631076812744
    3. 'for' → logprob: -2.3293631076812744
    4. 's' → logprob: -2.4543631076812744
    5. 'f' → logprob: -4.3293633460998535
    6. ' ' → logprob: -4.4543633460998535
    7. 'x' → logprob: -4.8293633460998535
    8. ')' → logprob: -4.9543633460998535
    9. 'a' → logprob: -4.9543633460998535
    10. ''' → logprob: -5.0793633460998535

Token 6: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0034722555428743362
    2. '[a' → logprob: -6.503472328186035
    3. 'a' → logprob: -7.628472328186035
    4. '[i' → logprob: -7.878472328186035
    5. '+' → logprob: -8.253472328186035
    6. '[n' → logprob: -8.378472328186035
    7. '[:]' → logprob: -9.378472328186035
    8. '.' → logprob: -9.503472328186035
    9. '\[' → logprob: -9.503472328186035
    10. '=' → logprob: -9.628472328186035

Token 7: ' []
' (ID: 8911)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.5739748477935791
    2. '[]' → logprob: -1.198974847793579
    3. ' [' → logprob: -2.448974847793579
    4. '[' → logprob: -4.323974609375
    5. '[int' → logprob: -4.448974609375
    6. ' list' → logprob: -4.823974609375
    7. 'list' → logprob: -4.948974609375
    8. '[input' → logprob: -5.823974609375
    9. '0' → logprob: -6.448974609375
    10. '[n' → logprob: -7.073974609375

Token 8: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.013682806864380836
    2. ' for' → logprob: -4.388682842254639
    3. '```' → logprob: -8.13868236541748
    4. '[' → logprob: -8.38868236541748
    5. '`' → logprob: -8.51368236541748
    6. '\n' → logprob: -8.76368236541748
    7. ' 
' → logprob: -9.38868236541748
    8. '\' → logprob: -9.51368236541748
    9. ' ' → logprob: -10.26368236541748
    10. '_' → logprob: -10.88868236541748

Token 9: ' x' (ID: 1215)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.09234697371721268
    2. ' i' → logprob: -2.5923469066619873
    3. '  ' → logprob: -4.342347145080566
    4. 'i' → logprob: -8.717347145080566
    5. ' n' → logprob: -9.342347145080566
    6. ' ‌' → logprob: -9.967347145080566
    7. ' a' → logprob: -10.842347145080566
    8. '_' → logprob: -12.092347145080566
    9. ' ' → logprob: -12.217347145080566
    10. ' _' → logprob: -12.467347145080566

Token 10: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.008887192234396935
    2. 'in' → logprob: -5.00888729095459
    3. ' ' → logprob: -6.25888729095459
    4. 'n' → logprob: -9.00888729095459
    5. '  ' → logprob: -9.75888729095459
    6. ' i' → logprob: -11.13388729095459
    7. 'space' → logprob: -11.13388729095459
    8. ' n' → logprob: -11.38388729095459
    9. '_' → logprob: -12.13388729095459
    10. 's' → logprob: -12.25888729095459

Token 11: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.06200544163584709
    2. 'range' → logprob: -2.8120055198669434
    3. ' ' → logprob: -10.437005043029785
    4. ' a' → logprob: -12.687005043029785
    5. '	range' → logprob: -13.437005043029785
    6. ' n' → logprob: -14.437005043029785
    7. 'n' → logprob: -14.437005043029785
    8. ' in' → logprob: -14.437005043029785
    9. 'a' → logprob: -14.937005043029785
    10. '  ' → logprob: -15.062005043029785

Token 12: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.010776967741549015
    2. '(n' → logprob: -4.635776996612549
    3. ' (' → logprob: -7.260776996612549
    4. '(len' → logprob: -8.13577651977539
    5. '(
' → logprob: -11.88577651977539
    6. '(range' → logprob: -12.38577651977539
    7. '(length' → logprob: -13.01077651977539
    8. '(x' → logprob: -13.13577651977539
    9. '(int' → logprob: -13.38577651977539
    10. '```' → logprob: -14.13577651977539

Token 13: '0' (ID: 15)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.003269095439463854
    2. '1' → logprob: -6.628269195556641
    3. '0' → logprob: -7.003269195556641
    4. ' n' → logprob: -7.128269195556641
    5. '10' → logprob: -10.00326919555664
    6. ')n' → logprob: -10.00326919555664
    7. ')' → logprob: -10.12826919555664
    8. '2' → logprob: -10.75326919555664
    9. '(n' → logprob: -11.00326919555664
    10. 'x' → logprob: -11.12826919555664

Token 14: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.017903150990605354
    2. ',n' → logprob: -4.1429033279418945
    3. ',)' → logprob: -6.8929033279418945
    4. ')' → logprob: -7.5179033279418945
    5. '):' → logprob: -9.142903327941895
    6. ' ,' → logprob: -9.642903327941895
    7. ',a' → logprob: -10.017903327941895
    8. ',:)' → logprob: -10.767903327941895
    9. 'n' → logprob: -10.767903327941895
    10. 'a' → logprob: -10.892903327941895

Token 15: '5' (ID: 20)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.06197318062186241
    2. ' n' → logprob: -2.8119730949401855
    3. ')n' → logprob: -12.811973571777344
    4. ')' → logprob: -13.811973571777344
    5. '10' → logprob: -14.061973571777344
    6. ' ' → logprob: -14.686973571777344
    7. ',n' → logprob: -15.936973571777344
    8. '1' → logprob: -15.936973571777344
    9. '	n' → logprob: -16.061973571777344
    10. '20' → logprob: -16.936973571777344

Token 16: '):
' (ID: 1883)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5237316489219666
    2. '):' → logprob: -0.8987316489219666
    3. ',' → logprob: -8.023731231689453
    4. '[' → logprob: -9.648731231689453
    5. '*' → logprob: -9.773731231689453
    6. ' ):' → logprob: -10.148731231689453
    7. ' )' → logprob: -10.648731231689453
    8. ',n' → logprob: -11.398731231689453
    9. ',)' → logprob: -11.523731231689453
    10. ':' → logprob: -11.773731231689453

Token 17: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.4282970726490021
    2. 'a' → logprob: -1.5532970428466797
    3. ' a' → logprob: -2.3032970428466797
    4. '    ' → logprob: -4.17829704284668
    5. '   ' → logprob: -4.80329704284668
    6. '     
' → logprob: -5.55329704284668
    7. ' 
' → logprob: -5.55329704284668
    8. 'n' → logprob: -6.67829704284668
    9. ' n' → logprob: -6.80329704284668
    10. '    
' → logprob: -7.05329704284668

Token 18: ' number' (ID: 2086)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.5385263562202454
    2. 'a' → logprob: -1.0385262966156006
    3. '    ' → logprob: -3.1635262966156006
    4. '   ' → logprob: -4.28852653503418
    5. ' ' → logprob: -5.28852653503418
    6. '     
' → logprob: -8.41352653503418
    7. ' ```' → logprob: -8.66352653503418
    8. ' n' → logprob: -8.78852653503418
    9. '```' → logprob: -8.78852653503418
    10. 'n' → logprob: -8.91352653503418

Token 19: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.05155404284596443
    2. 's' → logprob: -3.551553964614868
    3. '=' → logprob: -3.926553964614868
    4. ')' → logprob: -6.926554203033447
    5. '_' → logprob: -7.926554203033447
    6. ' ' → logprob: -7.926554203033447
    7. ' s' → logprob: -10.551553726196289
    8. '.append' → logprob: -10.926553726196289
    9. '[' → logprob: -11.051553726196289
    10. ']' → logprob: -11.426553726196289

Token 20: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.04519969969987869
    2. 'int' → logprob: -3.1701996326446533
    3. ' n' → logprob: -6.420199871063232
    4. 'n' → logprob: -8.045199394226074
    5. ' input' → logprob: -9.045199394226074
    6. ' ' → logprob: -9.920199394226074
    7. ' a' → logprob: -10.795199394226074
    8. ' x' → logprob: -10.795199394226074
    9. 'a' → logprob: -11.420199394226074
    10. 'input' → logprob: -11.795199394226074

Token 21: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.14278489351272583
    2. '(' → logprob: -2.017784833908081
    3. ' (' → logprob: -9.39278507232666
    4. '()' → logprob: -11.76778507232666
    5. '(user' → logprob: -12.51778507232666
    6. '(x' → logprob: -13.39278507232666
    7. '('' → logprob: -13.39278507232666
    8. '(
' → logprob: -13.51778507232666
    9. '(open' → logprob: -13.89278507232666
    10. 'input' → logprob: -13.89278507232666

Token 22: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.029478875920176506
    2. '()' → logprob: -3.7794787883758545
    3. ')' → logprob: -5.279479026794434
    4. '()))' → logprob: -6.904479026794434
    5. '))' → logprob: -9.904479026794434
    6. '(' → logprob: -10.279479026794434
    7. ' ())' → logprob: -10.779479026794434
    8. '())
' → logprob: -13.154479026794434
    9. '")' → logprob: -13.779479026794434
    10. '();)' → logprob: -13.904479026794434

Token 23: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0584024153649807
    2. 'a' → logprob: -3.1834022998809814
    3. '    
' → logprob: -4.8084025382995605
    4. '    ' → logprob: -6.0584025382995605
    5. ')' → logprob: -6.9334025382995605
    6. '<|end|>' → logprob: -7.0584025382995605
    7. '```' → logprob: -7.0584025382995605
    8. ' ' → logprob: -7.8084025382995605
    9. ' a' → logprob: -8.183402061462402
    10. '  ' → logprob: -8.433402061462402

Token 24: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' (adapté à ' a') → logprob: -0.14154572784900665
    2. '   ' → logprob: -2.1415457725524902
    3. ' a' → logprob: -4.39154577255249
    4. '    
' → logprob: -7.51654577255249
    5. ' ' → logprob: -7.76654577255249
    6. '    ' → logprob: -7.89154577255249
    7. '	a' → logprob: -7.89154577255249
    8. '<|end|>' → logprob: -9.266545295715332
    9. '```' → logprob: -9.766545295715332
    10. ')' → logprob: -9.891545295715332

Token 25: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.20159731805324554
    2. '.' → logprob: -1.7015973329544067
    3. ' .' → logprob: -9.576597213745117
    4. '.app' → logprob: -9.701597213745117
    5. '.ap' → logprob: -10.701597213745117
    6. '.a' → logprob: -11.576597213745117
    7. '[' → logprob: -12.201597213745117
    8. 'append' → logprob: -12.576597213745117
    9. '.Append' → logprob: -12.701597213745117
    10. '.push' → logprob: -12.951597213745117

Token 26: '(number' (ID: 32955)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3141668736934662
    2. '(number' → logprob: -1.3141669034957886
    3. '(a' → logprob: -7.064167022705078
    4. '(x' → logprob: -11.564167022705078
    5. '(
' → logprob: -11.564167022705078
    6. '(n' → logprob: -11.689167022705078
    7. '(num' → logprob: -11.814167022705078
    8. '((' → logprob: -12.439167022705078
    9. '(numbers' → logprob: -12.689167022705078
    10. '(numero' → logprob: -13.189167022705078

Token 27: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -8.180258191714529e-06
    2. ')
' → logprob: -11.875008583068848
    3. ' )' → logprob: -14.000008583068848
    4. '))' → logprob: -15.625008583068848
    5. '`)' → logprob: -17.37500762939453
    6. ')

' → logprob: -17.50000762939453
    7. '')' → logprob: -17.62500762939453
    8. '   ' → logprob: -17.75000762939453
    9. ')a' → logprob: -17.75000762939453
    10. ')`' → logprob: -17.87500762939453

Token 28: ' #' (ID: 1069)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -1.962716817855835
    2. 'a' → logprob: -2.087716817855835
    3. ' ' → logprob: -2.212716817855835
    4. '#' → logprob: -2.337716817855835
    5. '[' → logprob: -2.462716817855835
    6. ' 
' → logprob: -2.587716817855835
    7. 'n' → logprob: -2.712716817855835
    8. '<|end|>' → logprob: -2.837716817855835
    9. '+' → logprob: -3.212716817855835
    10. '
' → logprob: -3.462716817855835

Token 29: ' Ok' (ID: 13927)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2818625569343567
    2. ' 
' → logprob: -2.531862497329712
    3. ' if' → logprob: -3.531862497329712
    4. '  
' → logprob: -3.781862497329712
    5. ')' → logprob: -4.031862735748291
    6. 'a' → logprob: -4.406862735748291
    7. ' a' → logprob: -4.406862735748291
    8. 'n' → logprob: -4.906862735748291
    9. '[' → logprob: -5.031862735748291
    10. '\' → logprob: -5.031862735748291

Token 30: ' bon' (ID: 4846)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -1.4491146802902222
    2. 'if' → logprob: -1.6991146802902222
    3. '#' → logprob: -1.9491146802902222
    4. 'for' → logprob: -2.3241147994995117
    5. 'print' → logprob: -2.3241147994995117
    6. '[' → logprob: -3.1991147994995117
    7. '.' → logprob: -3.4491147994995117
    8. '
' → logprob: -3.8241147994995117
    9. 'n' → logprob: -3.9491147994995117
    10. ')' → logprob: -4.199114799499512

Token 31: ',' (ID: 11)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.158858060836792
    2. '
' → logprob: -1.908858060836792
    3. 'a' → logprob: -2.408858060836792
    4. ')' → logprob: -2.658858060836792
    5. '\n' → logprob: -2.908858060836792
    6. '<|end|>' → logprob: -2.908858060836792
    7. 'n' → logprob: -3.158858060836792
    8. 's' → logprob: -3.283858060836792
    9. '#' → logprob: -3.533858060836792
    10. ' 
' → logprob: -3.908858060836792

Token 32: ' je' (ID: 1264)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8305859565734863
    2. ' a' → logprob: -1.9555859565734863
    3. 'a' → logprob: -2.3305859565734863
    4. ' n' → logprob: -2.7055859565734863
    5. ')' → logprob: -3.2055859565734863
    6. 'n' → logprob: -3.3305859565734863
    7. ' if' → logprob: -3.5805859565734863
    8. '    ' → logprob: -3.9555859565734863
    9. '   ' → logprob: -3.9555859565734863
    10. ''' → logprob: -4.205585956573486

Token 33: ' mets' (ID: 87155)
  Prédit: ' pense'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' pense' → logprob: -1.2577234506607056
    2. 's' → logprob: -1.7577234506607056
    3. 'vais' → logprob: -2.007723331451416
    4. 'veux' → logprob: -2.882723331451416
    5. ' vais' → logprob: -2.882723331451416
    6. ' continue' → logprob: -2.882723331451416
    7. 'voud' → logprob: -3.507723331451416
    8. ' suppose' → logprob: -3.632723331451416
    9. ' peux' → logprob: -3.882723331451416
    10. 'p' → logprob: -4.007723331451416

Token 34: ' ça' (ID: 13590)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.07492382824420929
    2. ' un' → logprob: -4.074923992156982
    3. 'a' → logprob: -4.324923992156982
    4. ' a' → logprob: -4.449923992156982
    5. '_' → logprob: -4.574923992156982
    6. '<|end|>' → logprob: -5.324923992156982
    7. ' ' → logprob: -5.699923992156982
    8. 's' → logprob: -6.574923992156982
    9. '  ' → logprob: -6.699923992156982
    10. 'le' → logprob: -6.949923992156982

Token 35: ' ici' (ID: 27994)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 36: '...
' (ID: 4908)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.6200997829437256
    2. '\n' → logprob: -1.7450997829437256
    3. '<|end|>' → logprob: -1.8700997829437256
    4. '
' → logprob: -2.1200997829437256
    5. 'n' → logprob: -3.1200997829437256
    6. 'a' → logprob: -3.1200997829437256
    7. ')' → logprob: -3.2450997829437256
    8. '.' → logprob: -3.9950997829437256
    9. ' 
' → logprob: -3.9950997829437256
    10. '[' → logprob: -3.9950997829437256

Token 37: 'min' (ID: 1493)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -1.2586311101913452
    2. 'n' → logprob: -1.3836311101913452
    3. '\n' → logprob: -2.5086312294006348
    4. '#' → logprob: -2.6336312294006348
    5. 'a' → logprob: -2.8836312294006348
    6. ' ' → logprob: -3.2586312294006348
    7. ' 
' → logprob: -3.7586312294006348
    8. 'print' → logprob: -3.7586312294006348
    9. 'for' → logprob: -3.8836312294006348
    10. '.' → logprob: -4.008631229400635

Token 38: '_a' (ID: 10852)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.07765714824199677
    2. '(' → logprob: -2.8276572227478027
    3. '(a' → logprob: -4.952657222747803
    4. '_a' → logprob: -5.202657222747803
    5. '_val' → logprob: -6.452657222747803
    6. '_value' → logprob: -8.077656745910645
    7. 'a' → logprob: -8.077656745910645
    8. 'imum' → logprob: -8.077656745910645
    9. '_(' → logprob: -9.452656745910645
    10. '(_)' → logprob: -10.202656745910645

Token 39: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.16373609006404877
    2. '_' → logprob: -2.03873610496521
    3. 'a' → logprob: -5.413735866546631
    4. '(a' → logprob: -5.413735866546631
    5. '[' → logprob: -5.538735866546631
    6. 's' → logprob: -6.288735866546631
    7. '=' → logprob: -6.788735866546631
    8. ' =' → logprob: -6.913735866546631
    9. '_a' → logprob: -6.913735866546631
    10. ')' → logprob: -7.288735866546631

Token 40: ' min' (ID: 1349)
  Prédit: ' min'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' min' → logprob: -0.5356312990188599
    2. 'min' → logprob: -0.9106312990188599
    3. 'a' → logprob: -4.78563117980957
    4. ' float' → logprob: -6.41063117980957
    5. ' a' → logprob: -6.66063117980957
    6. 'float' → logprob: -6.91063117980957
    7. ' ' → logprob: -10.16063117980957
    8. '100' → logprob: -10.28563117980957
    9. ' None' → logprob: -10.41063117980957
    10. 'None' → logprob: -11.66063117980957

Token 41: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.02977536804974079
    2. '(' → logprob: -3.529775381088257
    3. '(_' → logprob: -11.154775619506836
    4. '(n' → logprob: -12.404775619506836
    5. '(s' → logprob: -13.654775619506836
    6. '(min' → logprob: -13.654775619506836
    7. '(
' → logprob: -14.029775619506836
    8. ' (' → logprob: -14.654775619506836
    9. '(A' → logprob: -14.779775619506836
    10. '((' → logprob: -14.779775619506836

Token 42: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00020187153131701052
    2. '))' → logprob: -8.875202178955078
    3. 'a' → logprob: -11.125202178955078
    4. ' )' → logprob: -11.375202178955078
    5. '[' → logprob: -11.500202178955078
    6. ')
' → logprob: -11.875202178955078
    7. ')))' → logprob: -12.125202178955078
    8. ')a' → logprob: -12.125202178955078
    9. '[a' → logprob: -13.375202178955078
    10. '')' → logprob: -14.000202178955078

Token 43: '#' (ID: 2)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 44: ' Pas' (ID: 18323)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.9339829087257385
    2. ' if' → logprob: -1.1839828491210938
    3. 'if' → logprob: -1.8089828491210938
    4. 'print' → logprob: -2.6839828491210938
    5. ' for' → logprob: -4.308982849121094
    6. 'n' → logprob: -4.308982849121094
    7. 'for' → logprob: -4.433982849121094
    8. 'a' → logprob: -4.933982849121094
    9. ' n' → logprob: -5.558982849121094
    10. ' print' → logprob: -5.558982849121094

Token 45: ' sûr' (ID: 46415)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' de' → logprob: -1.2212363481521606
    2. ' question' → logprob: -2.221236228942871
    3. ' mal' → logprob: -2.221236228942871
    4. 'de' → logprob: -2.346236228942871
    5. ' ' → logprob: -2.721236228942871
    6. ' besoin' → logprob: -3.096236228942871
    7. ' d' → logprob: -3.346236228942871
    8. 'cal' → logprob: -3.846236228942871
    9. 'question' → logprob: -3.971236228942871
    10. '#' → logprob: -3.971236228942871

Token 46: ' que' (ID: 661)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.2297864854335785
    2. ')' → logprob: -2.3547863960266113
    3. ' if' → logprob: -3.2297863960266113
    4. 'if' → logprob: -3.2297863960266113
    5. '<|end|>' → logprob: -3.9797863960266113
    6. ',' → logprob: -5.729786396026611
    7. ' ' → logprob: -6.104786396026611
    8. ' print' → logprob: -6.479786396026611
    9. 'n' → logprob: -6.979786396026611
    10. '.' → logprob: -7.854786396026611

Token 47: ' ce' (ID: 2357)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.12658323347568512
    2. ' min' → logprob: -2.2515833377838135
    3. 'len' → logprob: -5.751583099365234
    4. 'a' → logprob: -6.001583099365234
    5. 'print' → logprob: -6.126583099365234
    6. 'c' → logprob: -6.876583099365234
    7. ' len' → logprob: -7.001583099365234
    8. ' ça' → logprob: -7.251583099365234
    9. 'max' → logprob: -7.751583099365234
    10. ' c' → logprob: -7.876583099365234

Token 48: ' soit' (ID: 17293)
  Prédit: ' soit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' soit' → logprob: -0.1521504521369934
    2. 'so' → logprob: -2.2771503925323486
    3. 's' → logprob: -4.652150630950928
    4. ' code' → logprob: -5.027150630950928
    5. 'min' → logprob: -5.277150630950928
    6. ' so' → logprob: -5.777150630950928
    7. 'l' → logprob: -5.902150630950928
    8. ' min' → logprob: -6.277150630950928
    9. 'code' → logprob: -6.777150630950928
    10. 'a' → logprob: -6.902150630950928

Token 49: ' optimal' (ID: 24174)
  Prédit: 'correct'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'correct' → logprob: -1.5321383476257324
    2. 'ce' → logprob: -1.7821383476257324
    3. 'bien' → logprob: -2.5321383476257324
    4. 'tout' → logprob: -2.5321383476257324
    5. 'le' → logprob: -2.7821383476257324
    6. 'utile' → logprob: -2.9071383476257324
    7. ' correct' → logprob: -3.2821383476257324
    8. '```' → logprob: -3.4071383476257324
    9. 'bon' → logprob: -3.5321383476257324
    10. 'exact' → logprob: -3.7821383476257324

Token 50: ' mais' (ID: 2899)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.8346466422080994
    2. 'if' → logprob: -2.084646701812744
    3. ')' → logprob: -2.209646701812744
    4. '<|end|>' → logprob: -2.334646701812744
    5. ' if' → logprob: -2.459646701812744
    6. ',' → logprob: -3.334646701812744
    7. '.' → logprob: -4.084646701812744
    8. 'a' → logprob: -4.209646701812744
    9. '
' → logprob: -4.334646701812744
    10. 'n' → logprob: -4.334646701812744

Token 51: ' bon' (ID: 4846)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.29460862278938293
    2. 'print' → logprob: -1.4196085929870605
    3. ' n' → logprob: -4.7946085929870605
    4. ' for' → logprob: -6.4196085929870605
    5. ' a' → logprob: -7.1696085929870605
    6. ' min' → logprob: -7.5446085929870605
    7. 'n' → logprob: -7.6696085929870605
    8. ' if' → logprob: -7.6696085929870605
    9. 'a' → logprob: -8.419609069824219
    10. ' on' → logprob: -8.669609069824219

Token 52: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.096546471118927
    2. 'if' → logprob: -3.5965464115142822
    3. '<|end|>' → logprob: -3.9715464115142822
    4. ' if' → logprob: -4.471546649932861
    5. '
' → logprob: -4.596546649932861
    6. ' print' → logprob: -5.346546649932861
    7. ' 
' → logprob: -5.346546649932861
    8. ')' → logprob: -5.346546649932861
    9. 'n' → logprob: -6.096546649932861
    10. 'max' → logprob: -6.596546649932861

Token 53: 'if' (ID: 366)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.1269545704126358
    2. 'if' → logprob: -2.7519545555114746
    3. 'for' → logprob: -4.001954555511475
    4. 'n' → logprob: -5.001954555511475
    5. ' if' → logprob: -5.001954555511475
    6. 'max' → logprob: -5.126954555511475
    7. 'diff' → logprob: -5.376954555511475
    8. 'result' → logprob: -5.501954555511475
    9. 'a' → logprob: -6.376954555511475
    10. ' for' → logprob: -6.626954555511475

Token 54: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.493960976600647
    2. ' min' → logprob: -0.993960976600647
    3. 'min' → logprob: -4.368960857391357
    4. 'n' → logprob: -5.368960857391357
    5. ' ' → logprob: -6.368960857391357
    6. ' ' → logprob: -8.618961334228516
    7. ' len' → logprob: -8.868961334228516
    8. ' a' → logprob: -8.993961334228516
    9. ' x' → logprob: -10.493961334228516
    10. ' m' → logprob: -10.868961334228516

Token 55: ' %' (ID: 1851)
  Prédit: ' <'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.43029141426086426
    2. ' >' → logprob: -1.5552914142608643
    3. ' <=' → logprob: -2.4302914142608643
    4. ' >=' → logprob: -3.6802914142608643
    5. '<' → logprob: -4.805291175842285
    6. '>' → logprob: -4.930291175842285
    7. ' ==' → logprob: -5.305291175842285
    8. ' ' → logprob: -6.055291175842285
    9. ' %' → logprob: -7.055291175842285
    10. '<=' → logprob: -7.305291175842285

Token 56: ' min' (ID: 1349)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.13436689972877502
    2. ' min' → logprob: -2.259366989135742
    3. '2' → logprob: -4.259366989135742
    4. '5' → logprob: -5.384366989135742
    5. ' ' → logprob: -6.884366989135742
    6. '10' → logprob: -6.884366989135742
    7. '1' → logprob: -8.759366989135742
    8. '3' → logprob: -8.884366989135742
    9. '4' → logprob: -10.009366989135742
    10. '(min' → logprob: -10.259366989135742

Token 57: '_a' (ID: 10852)
  Prédit: '_a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_a' → logprob: -8.73314929776825e-05
    2. '_' → logprob: -9.50008773803711
    3. '(a' → logprob: -12.00008773803711
    4. '(' → logprob: -12.87508773803711
    5. 'a' → logprob: -13.62508773803711
    6. '(_' → logprob: -14.25008773803711
    7. '_e' → logprob: -15.00008773803711
    8. ' _' → logprob: -15.62508773803711
    9. '(min' → logprob: -15.75008773803711
    10. '```' → logprob: -15.87508773803711

Token 58: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.1696721613407135
    2. '==' → logprob: -1.9196721315383911
    3. ' !=' → logprob: -4.919672012329102
    4. '!=' → logprob: -6.794672012329102
    5. '=' → logprob: -8.044672012329102
    6. ':' → logprob: -8.044672012329102
    7. ' =' → logprob: -9.169672012329102
    8. '>' → logprob: -9.669672012329102
    9. ' :' → logprob: -9.794672012329102
    10. ' ' → logprob: -10.044672012329102

Token 59: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.25192946195602417
    2. '0' → logprob: -1.501929521560669
    3. '  ' → logprob: -15.00192928314209
    4. ' ' → logprob: -17.376930236816406
    5. '=' → logprob: -17.501930236816406
    6. '```' → logprob: -18.001930236816406
    7. '   ' → logprob: -18.126930236816406
    8. ':' → logprob: -18.376930236816406
    9. '<|end|>' → logprob: -18.939430236816406
    10. ')' → logprob: -19.314430236816406

Token 60: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00020354038861114532
    2. ' ' → logprob: -8.500203132629395
    3. '  ' → logprob: -17.75020408630371
    4. '۰' → logprob: -18.37520408630371
    5. '<|end|>' → logprob: -18.50020408630371
    6. ')' → logprob: -18.56270408630371
    7. '1' → logprob: -19.06270408630371
    8. '```' → logprob: -19.25020408630371
    9. '०' → logprob: -19.62520408630371
    10. 'o' → logprob: -19.75020408630371

Token 61: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0003448792558629066
    2. ' :' → logprob: -8.000345230102539
    3. ':
' → logprob: -11.750345230102539
    4. ':**' → logprob: -14.125345230102539
    5. '):' → logprob: -15.500345230102539
    6. ' and' → logprob: -16.25034523010254
    7. ':

' → logprob: -16.75034523010254
    8. '=' → logprob: -16.87534523010254
    9. ' :
' → logprob: -16.87534523010254
    10. ',' → logprob: -16.87534523010254

Token 62: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.44069045782089233
    2. 'print' → logprob: -2.190690517425537
    3. '\n' → logprob: -2.190690517425537
    4. ' print' → logprob: -2.565690517425537
    5. ' ' → logprob: -4.440690517425537
    6. ' n' → logprob: -4.690690517425537
    7. '    ' → logprob: -4.815690517425537
    8. ' 
' → logprob: -4.940690517425537
    9. 'n' → logprob: -5.690690517425537
    10. '\' → logprob: -6.065690517425537

Token 63: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.03656790405511856
    2. ' print' → logprob: -3.5365679264068604
    3. '   ' → logprob: -5.036567687988281
    4. 'n' → logprob: -9.786567687988281
    5. ' ' → logprob: -9.786567687988281
    6. 'result' → logprob: -10.536567687988281
    7. 'a' → logprob: -10.786567687988281
    8. '    ' → logprob: -10.786567687988281
    9. 'for' → logprob: -10.911567687988281
    10. ' n' → logprob: -11.661567687988281

Token 64: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0998368039727211
    2. '(n' → logprob: -2.849836826324463
    3. '("' → logprob: -3.474836826324463
    4. '("("' → logprob: -6.349836826324463
    5. '('' → logprob: -6.474836826324463
    6. '(min' → logprob: -6.724836826324463
    7. '(a' → logprob: -7.849836826324463
    8. '"' → logprob: -7.974836826324463
    9. '()' → logprob: -7.974836826324463
    10. '((' → logprob: -8.349836349487305

Token 65: '4' (ID: 19)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.3556336760520935
    2. 'n' → logprob: -1.2306337356567383
    3. 'min' → logprob: -6.480633735656738
    4. 'True' → logprob: -6.730633735656738
    5. ''' → logprob: -7.105633735656738
    6. '0' → logprob: -7.355633735656738
    7. '1' → logprob: -7.855633735656738
    8. ' n' → logprob: -7.855633735656738
    9. ' "' → logprob: -7.980633735656738
    10. ''n' → logprob: -8.230633735656738

Token 66: ' +' (ID: 659)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0020977992098778486
    2. '*' → logprob: -6.5020976066589355
    3. ' )' → logprob: -8.002098083496094
    4. ')
' → logprob: -9.002098083496094
    5. '+' → logprob: -9.752098083496094
    6. '0' → logprob: -10.377098083496094
    7. '*)' → logprob: -11.627098083496094
    8. '*n' → logprob: -11.627098083496094
    9. ' *' → logprob: -12.002098083496094
    10. '))' → logprob: -12.877098083496094

Token 67: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.03353549912571907
    2. 'n' → logprob: -3.7835354804992676
    3. ' (' → logprob: -4.658535480499268
    4. '(n' → logprob: -7.658535480499268
    5. '(' → logprob: -9.158535957336426
    6. ' ' → logprob: -9.658535957336426
    7. ')' → logprob: -10.033535957336426
    8. ' )' → logprob: -10.408535957336426
    9. ' int' → logprob: -11.533535957336426
    10. '1' → logprob: -12.283535957336426

Token 68: ' //' (ID: 602)
  Prédit: '//'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '//' → logprob: -0.47542116045951843
    2. ' //' → logprob: -0.9754211902618408
    3. ')' → logprob: -6.975420951843262
    4. '/' → logprob: -9.350420951843262
    5. ' /' → logprob: -9.475420951843262
    6. '/min' → logprob: -9.600420951843262
    7. ' )' → logprob: -9.975420951843262
    8. ' ' → logprob: -10.350420951843262
    9. '   ' → logprob: -10.475420951843262
    10. '-' → logprob: -10.975420951843262

Token 69: ' min' (ID: 1349)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.006716317031532526
    2. ' min' → logprob: -5.006716251373291
    3. '	min' → logprob: -14.50671672821045
    4. '_min' → logprob: -16.006715774536133
    5. '[min' → logprob: -16.256715774536133
    6. ' ' → logprob: -16.881715774536133
    7. '(min' → logprob: -17.256715774536133
    8. '-min' → logprob: -18.506715774536133
    9. '.min' → logprob: -18.631715774536133
    10. '<|end|>' → logprob: -18.631715774536133

Token 70: '_a' (ID: 10852)
  Prédit: '_a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_a' → logprob: -4.60414821645827e-06
    2. 'a' → logprob: -12.500004768371582
    3. '_' → logprob: -15.125004768371582
    4. '_min' → logprob: -15.250004768371582
    5. ')' → logprob: -15.750004768371582
    6. 'min' → logprob: -16.750003814697266
    7. '_ai' → logprob: -17.000003814697266
    8. '_)' → logprob: -17.875003814697266
    9. '_an' → logprob: -18.000003814697266
    10. ' _' → logprob: -18.625003814697266

Token 71: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0004990590969100595
    2. ' )' → logprob: -8.00049877166748
    3. ')
' → logprob: -9.00049877166748
    4. '))' → logprob: -11.00049877166748
    5. '*' → logprob: -11.75049877166748
    6. '   ' → logprob: -12.75049877166748
    7. '```' → logprob: -13.37549877166748
    8. '`)' → logprob: -13.75049877166748
    9. 'else' → logprob: -13.75049877166748
    10. '*)' → logprob: -13.87549877166748

Token 72: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.4329544007778168
    2. ' else' → logprob: -1.0579544305801392
    3. ':' → logprob: -6.43295431137085
    4. 'elif' → logprob: -7.55795431137085
    5. ')' → logprob: -7.93295431137085
    6. '*' → logprob: -8.182954788208008
    7. '<|end|>' → logprob: -8.557954788208008
    8. '```' → logprob: -8.682954788208008
    9. ' elif' → logprob: -8.807954788208008
    10. ' ' → logprob: -8.807954788208008

Token 73: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.002371012233197689
    2. ' :' → logprob: -6.127370834350586
    3. '   ' → logprob: -9.252370834350586
    4. ':
' → logprob: -9.627370834350586
    5. '    ' → logprob: -11.002370834350586
    6. ' :
' → logprob: -12.502370834350586
    7. ' ' → logprob: -15.002370834350586
    8. '(' → logprob: -15.002370834350586
    9. '):' → logprob: -15.002370834350586
    10. '       ' → logprob: -15.127370834350586

Token 74: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.028688257560133934
    2. '4' → logprob: -3.9036881923675537
    3. ' ' → logprob: -5.528688430786133
    4. '1' → logprob: -5.903688430786133
    5. 'print' → logprob: -7.278688430786133
    6. '    ' → logprob: -8.653688430786133
    7. '0' → logprob: -9.028688430786133
    8. '       ' → logprob: -9.278688430786133
    9. ' print' → logprob: -9.403688430786133
    10. '  ' → logprob: -9.528688430786133

Token 75: ' print' (ID: 2123)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3461155891418457
    2. 'print' (adapté à ' print') → logprob: -2.0961155891418457
    3. '1' → logprob: -2.3461155891418457
    4. '4' → logprob: -3.4711155891418457
    5. '    ' → logprob: -4.346115589141846
    6. '   ' → logprob: -4.471115589141846
    7. ' print' → logprob: -4.471115589141846
    8. '0' → logprob: -5.971115589141846
    9. ' n' → logprob: -6.846115589141846
    10. '"' → logprob: -7.221115589141846

Token 76: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.006755275186151266
    2. '(n' → logprob: -5.881755352020264
    3. '('' → logprob: -6.256755352020264
    4. '((' → logprob: -7.256755352020264
    5. '("' → logprob: -7.381755352020264
    6. '()' → logprob: -7.756755352020264
    7. ' (' → logprob: -10.131754875183105
    8. '(int' → logprob: -10.131754875183105
    9. '(
' → logprob: -10.506754875183105
    10. '(a' → logprob: -10.756754875183105

Token 77: '5' (ID: 20)
  Prédit: '4'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.011337227188050747
    2. ' ' → logprob: -4.8863372802734375
    3. '0' → logprob: -7.0113372802734375
    4. '3' → logprob: -7.1363372802734375
    5. '5' → logprob: -7.7613372802734375
    6. '"' → logprob: -8.011337280273438
    7. 'n' → logprob: -8.136337280273438
    8. '(' → logprob: -8.261337280273438
    9. '1' → logprob: -8.511337280273438
    10. '-' → logprob: -8.886337280273438

Token 78: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.16152872145175934
    2. '+' → logprob: -1.9115287065505981
    3. ')' → logprob: -6.661528587341309
    4. '   ' → logprob: -11.286528587341309
    5. ' ' → logprob: -12.786528587341309
    6. '))' → logprob: -12.786528587341309
    7. '+)' → logprob: -13.286528587341309
    8. '+n' → logprob: -13.411528587341309
    9. '-' → logprob: -14.161528587341309
    10. ' )' → logprob: -14.536528587341309

Token 79: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.03382284566760063
    2. 'n' → logprob: -3.408822774887085
    3. ' ' → logprob: -9.283823013305664
    4. ' (' → logprob: -10.658823013305664
    5. '"' → logprob: -11.533823013305664
    6. '1' → logprob: -11.658823013305664
    7. '(n' → logprob: -11.658823013305664
    8. '(' → logprob: -11.908823013305664
    9. ' ' → logprob: -12.033823013305664
    10. '   ' → logprob: -12.408823013305664

Token 80: ' //' (ID: 602)
  Prédit: ' //'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.6332302689552307
    2. '//' → logprob: -0.7582302689552307
    3. '/' → logprob: -8.258230209350586
    4. ' ' → logprob: -8.258230209350586
    5. ')' → logprob: -10.383230209350586
    6. '   ' → logprob: -10.633230209350586
    7. ' /' → logprob: -10.883230209350586
    8. '-' → logprob: -11.758230209350586
    9. '  ' → logprob: -12.258230209350586
    10. ' ' → logprob: -12.633230209350586

Token 81: ' min' (ID: 1349)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.018152866512537003
    2. ' min' → logprob: -4.018152713775635
    3. '(min' → logprob: -14.268153190612793
    4. '	min' → logprob: -14.393153190612793
    5. ' ' → logprob: -14.643153190612793
    6. '[min' → logprob: -14.643153190612793
    7. '-min' → logprob: -15.643153190612793
    8. 'max' → logprob: -15.768153190612793
    9. '_min' → logprob: -16.018152236938477
    10. '   ' → logprob: -16.268152236938477

Token 82: '_a' (ID: 10852)
  Prédit: '_a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_a' → logprob: -1.9623810658231378e-05
    2. 'a' → logprob: -11.375020027160645
    3. '_' → logprob: -12.000020027160645
    4. ')' → logprob: -14.875020027160645
    5. ')_' → logprob: -15.000020027160645
    6. '_)' → logprob: -15.375020027160645
    7. ' _' → logprob: -15.500020027160645
    8. '```' → logprob: -16.250019073486328
    9. 'A' → logprob: -16.375019073486328
    10. '_ai' → logprob: -16.750019073486328

Token 83: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.811348480870947e-05
    2. '))' → logprob: -10.62504768371582
    3. '*' → logprob: -12.12504768371582
    4. ' )' → logprob: -12.37504768371582
    5. '`)' → logprob: -12.75004768371582
    6. '(' → logprob: -13.00004768371582
    7. '-' → logprob: -13.25004768371582
    8. '()' → logprob: -13.25004768371582
    9. ')`' → logprob: -14.00004768371582
    10. '')' → logprob: -14.00004768371582

Token 84: ' #' (ID: 1069)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7272805571556091
    2. '<|end|>' → logprob: -1.602280616760254
    3. '#' → logprob: -2.227280616760254
    4. ' ' → logprob: -2.977280616760254
    5. '
' → logprob: -3.102280616760254
    6. '+' → logprob: -3.227280616760254
    7. '```' → logprob: -4.102280616760254
    8. '\n' → logprob: -4.227280616760254
    9. '(' → logprob: -4.727280616760254
    10. '[' → logprob: -4.852280616760254

Token 85: ' on' (ID: 402)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 86: ' raj' (ID: 46358)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '%' → logprob: -0.3421427309513092
    2. ' ' → logprob: -1.8421427011489868
    3. '<|end|>' → logprob: -2.8421428203582764
    4. '+' → logprob: -3.4671428203582764
    5. '*' → logprob: -4.717142581939697
    6. ')' → logprob: -4.842142581939697
    7. ' %' → logprob: -4.967142581939697
    8. '#' → logprob: -5.217142581939697
    9. '-' → logprob: -5.842142581939697
    10. '\n' → logprob: -6.342142581939697

Token 87: 'oute' (ID: 3509)
  Prédit: 'oute'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'oute' → logprob: -0.00017886889690998942
    2. 'out' → logprob: -9.375179290771484
    3. 'outer' → logprob: -9.750179290771484
    4. 'o' → logprob: -10.750179290771484
    5. 'outez' → logprob: -11.625179290771484
    6. '-' → logprob: -13.875179290771484
    7. 'outes' → logprob: -14.125179290771484
    8. '#' → logprob: -14.625179290771484
    9. '0' → logprob: -14.875179290771484
    10. '+' → logprob: -14.875179290771484

Token 88: ' ' (ID: 220)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 89: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.038229912519454956
    2. ' ' → logprob: -4.163229942321777
    3. '(n' → logprob: -5.538229942321777
    4. '0' → logprob: -5.788229942321777
    5. '(' → logprob: -5.913229942321777
    6. ' (' → logprob: -6.163229942321777
    7. 'n' → logprob: -6.288229942321777
    8. 'min' → logprob: -6.288229942321777
    9. '-' → logprob: -6.538229942321777
    10. ' min' → logprob: -6.663229942321777

Token 90: ',' (ID: 11)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 91: ' ça' (ID: 13590)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.05019856616854668
    2. '<|end|>' → logprob: -3.800198554992676
    3. '\n' → logprob: -4.925198554992676
    4. '```' → logprob: -5.050198554992676
    5. ' ' → logprob: -5.800198554992676
    6. ' )' → logprob: -6.300198554992676
    7. '
' → logprob: -6.800198554992676
    8. '1' → logprob: -6.925198554992676
    9. '0' → logprob: -7.050198554992676
    10. '()' → logprob: -7.050198554992676

Token 92: ' doit' (ID: 21822)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 93: ' marcher' (ID: 171848)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.1336172819137573
    2. ' be' → logprob: -1.6336172819137573
    3. ' suff' → logprob: -2.008617401123047
    4. ' être' → logprob: -2.133617401123047
    5. ' fonctionner' → logprob: -3.258617401123047
    6. 'être' → logprob: -3.758617401123047
    7. '<|end|>' → logprob: -3.758617401123047
    8. '\n' → logprob: -3.758617401123047
    9. ' faire' → logprob: -4.008617401123047
    10. '+' → logprob: -4.383617401123047

Token 94: '?' (ID: 30)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 92
Tokens correctement prédits (1ère position, stricte): 33
Tokens correctement prédits (1ère position, avec adaptation): 35
Tokens correctement prédits (top 10): 56
Précision stricte (1ère position): 35.87%
Précision adaptée (1ère position): 38.04%
Précision (top 10): 60.87%
================================================================================
