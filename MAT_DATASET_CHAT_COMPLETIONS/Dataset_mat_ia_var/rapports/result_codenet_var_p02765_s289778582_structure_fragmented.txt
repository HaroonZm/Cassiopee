================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:24:44
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def read_input():
    return input()

def split_input(user_input):
    return user_input.split()

def convert_to_ints(str_list):
    return [int(x) for x in str_list]

def get_n(vals):
    return vals[0]

def get_r(vals):
    return vals[1]

def compute_r_if_n_gt_10(n, r):
    return r

def compute_r_else(n, r):
    return r + 100 * (10 - n)

def should_use_regular_case(n):
    return n > 10

def calculate_R(n, r):
    if should_use_regular_case(n):
        return compute_r_if_n_gt_10(n, r)
    else:
        return compute_r_else(n, r)

def output_result(R):
    print(R)

def main():
    user_input = read_input()
    split_vals = split_input(user_input)
    n_r = convert_to_ints(split_vals)
    n = get_n(n_r)
    r = get_r(n_r)
    R = calculate_R(n, r)
    output_result(R)

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' read' (ID: 1729)
  → Token d'amorce (pas de prédiction)

Token 2: '_input' (ID: 12507)
  → Token d'amorce (pas de prédiction)

Token 3: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0032197798136621714
    2. '_' → logprob: -6.0032196044921875
    3. '():' → logprob: -8.003219604492188
    4. '(:' → logprob: -8.628219604492188
    5. '(_:' → logprob: -9.503219604492188
    6. '```' → logprob: -9.878219604492188
    7. ':' → logprob: -10.253219604492188
    8. ' (' → logprob: -10.878219604492188
    9. '(_' → logprob: -11.253219604492188
    10. '()' → logprob: -12.253219604492188

Token 4: '   ' (ID: 271)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -1.006394386291504
    2. '```' → logprob: -1.131394386291504
    3. '\' → logprob: -1.506394386291504
    4. '   ' → logprob: -4.006394386291504
    5. ''\' → logprob: -4.506394386291504
    6. '``' → logprob: -4.506394386291504
    7. '    
' → logprob: -4.881394386291504
    8. ':' → logprob: -5.131394386291504
    9. ' 
' → logprob: -5.631394386291504
    10. '
' → logprob: -5.756394386291504

Token 5: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.4959542751312256
    2. 'input' → logprob: -1.4959542751312256
    3. 'data' → logprob: -3.6209542751312256
    4. 'x' → logprob: -3.6209542751312256
    5. '   ' → logprob: -3.6209542751312256
    6. '```' → logprob: -3.8709542751312256
    7. 'n' → logprob: -3.9959542751312256
    8. 'user' → logprob: -4.120954513549805
    9. 'text' → logprob: -4.370954513549805
    10. 'r' → logprob: -5.745954513549805

Token 6: ' input' (ID: 3422)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2530839145183563
    2. '"' → logprob: -2.3780839443206787
    3. 'input' → logprob: -2.6280839443206787
    4. ' input' → logprob: -3.1280839443206787
    5. ''' → logprob: -4.3780837059021
    6. '  ' → logprob: -7.5030837059021
    7. ' "' → logprob: -8.253084182739258
    8. '(' → logprob: -8.378084182739258
    9. '(input' → logprob: -8.503084182739258
    10. ' []' → logprob: -8.628084182739258

Token 7: '()

' (ID: 5874)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.006159742828458548
    2. '()' → logprob: -5.131159782409668
    3. '```' → logprob: -9.881159782409668
    4. '(
' → logprob: -10.256159782409668
    5. '.' → logprob: -10.381159782409668
    6. ' (' → logprob: -10.756159782409668
    7. '('' → logprob: -11.256159782409668
    8. '(

' → logprob: -11.506159782409668
    9. '("("' → logprob: -11.631159782409668
    10. '(.)' → logprob: -11.881159782409668

Token 8: 'def' (ID: 1314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.592180073261261
    2. '\n' → logprob: -1.8421800136566162
    3. '()' → logprob: -2.217180013656616
    4. ':' → logprob: -3.467180013656616
    5. '(
' → logprob: -3.467180013656616
    6. 'def' → logprob: -3.842180013656616
    7. '\' → logprob: -4.217180252075195
    8. '```' → logprob: -4.217180252075195
    9. '.' → logprob: -4.467180252075195
    10. '
' → logprob: -4.717180252075195

Token 9: ' split' (ID: 12648)
  Prédit: ' write'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' write' → logprob: -1.0810298919677734
    2. ' calculate' → logprob: -1.3310298919677734
    3. ' process' → logprob: -1.4560298919677734
    4. ' read' → logprob: -2.7060298919677734
    5. ' main' → logprob: -3.3310298919677734
    6. ' compute' → logprob: -4.456029891967773
    7. ' space' → logprob: -4.581029891967773
    8. ' parse' → logprob: -4.706029891967773
    9. ' user' → logprob: -5.331029891967773
    10. ' validate' → logprob: -5.831029891967773

Token 10: '_input' (ID: 12507)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.008633476682007313
    2. '(' → logprob: -5.258633613586426
    3. '_text' → logprob: -7.133633613586426
    4. '_line' → logprob: -7.133633613586426
    5. '_input' → logprob: -8.258633613586426
    6. '('_' → logprob: -8.383633613586426
    7. '_words' → logprob: -8.383633613586426
    8. '_string' → logprob: -8.508633613586426
    9. '_word' → logprob: -9.133633613586426
    10. '_s' → logprob: -9.633633613586426

Token 11: '(user' (ID: 7195)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.039124246686697006
    2. '_' → logprob: -3.4141242504119873
    3. '('_' → logprob: -6.039124011993408
    4. '(_' → logprob: -7.914124011993408
    5. '_line' → logprob: -8.039124488830566
    6. '(_)' → logprob: -8.164124488830566
    7. '_text' → logprob: -8.164124488830566
    8. '_(' → logprob: -8.539124488830566
    9. '```' → logprob: -8.539124488830566
    10. '("_' → logprob: -8.664124488830566

Token 12: '_input' (ID: 12507)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.5067588686943054
    2. ')' → logprob: -1.7567589282989502
    3. '_' → logprob: -2.13175892829895
    4. '_input' → logprob: -2.63175892829895
    5. ')_' → logprob: -4.506758689880371
    6. '_text' → logprob: -4.881758689880371
    7. '_string' → logprob: -5.256758689880371
    8. '()' → logprob: -5.631758689880371
    9. '_line' → logprob: -7.006758689880371
    10. '):
' → logprob: -7.256758689880371

Token 13: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.006652137730270624
    2. ',' → logprob: -5.256652355194092
    3. ')' → logprob: -6.756652355194092
    4. '):
' → logprob: -9.006651878356934
    5. ':' → logprob: -9.631651878356934
    6. ' ):' → logprob: -10.881651878356934
    7. '=' → logprob: -11.631651878356934
    8. '   ' → logprob: -11.881651878356934
    9. '(' → logprob: -12.256651878356934
    10. '[' → logprob: -13.006651878356934

Token 14: '   ' (ID: 271)
  Prédit: ' user'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' user' → logprob: -0.17896336317062378
    2. 'user' → logprob: -2.3039634227752686
    3. '   ' → logprob: -2.8039634227752686
    4. ' return' → logprob: -6.1789631843566895
    5. '(user' → logprob: -6.8039631843566895
    6. 'return' → logprob: -9.053963661193848
    7. '_user' → logprob: -9.928963661193848
    8. '	user' → logprob: -10.678963661193848
    9. '_' → logprob: -11.428963661193848
    10. '[user' → logprob: -11.678963661193848

Token 15: ' return' (ID: 622)
  Prédit: ' user'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' user' → logprob: -0.45968255400657654
    2. 'user' → logprob: -1.334682583808899
    3. '   ' → logprob: -3.2096824645996094
    4. ' return' → logprob: -3.2096824645996094
    5. 'return' (adapté à ' return') → logprob: -3.7096824645996094
    6. '[user' → logprob: -10.95968246459961
    7. '(user' → logprob: -11.83468246459961
    8. '    ' → logprob: -12.45968246459961
    9. '=user' → logprob: -12.95968246459961
    10. '	user' → logprob: -12.95968246459961

Token 16: ' user' (ID: 1825)
  Prédit: ' user'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' user' → logprob: -0.054904624819755554
    2. 'user' → logprob: -2.9299046993255615
    3. ' ' → logprob: -11.42990493774414
    4. '(user' → logprob: -12.92990493774414
    5. '"user' → logprob: -12.92990493774414
    6. ''user' → logprob: -13.05490493774414
    7. '	user' → logprob: -13.67990493774414
    8. '[user' → logprob: -13.67990493774414
    9. '.user' → logprob: -14.55490493774414
    10. ',user' → logprob: -15.30490493774414

Token 17: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.019776765257120132
    2. '_' → logprob: -4.269776821136475
    3. '_put' → logprob: -5.769776821136475
    4. ' _' → logprob: -6.644776821136475
    5. '_p' → logprob: -7.769776821136475
    6. '_s' → logprob: -8.019776344299316
    7. '_in' → logprob: -9.394776344299316
    8. '_output' → logprob: -9.644776344299316
    9. '_n' → logprob: -9.644776344299316
    10. '```' → logprob: -9.769776344299316

Token 18: '.split' (ID: 10347)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.16057312488555908
    2. '.split' → logprob: -1.910573124885559
    3. '.strip' → logprob: -8.16057300567627
    4. ' .' → logprob: -10.16057300567627
    5. '.s' → logprob: -10.91057300567627
    6. '().' → logprob: -13.28557300567627
    7. '.rstrip' → logprob: -13.78557300567627
    8. 'split' → logprob: -14.03557300567627
    9. '.replace' → logprob: -14.28557300567627
    10. '   ' → logprob: -14.41057300567627

Token 19: '()

' (ID: 5874)
  Prédit: '(''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '('' → logprob: -0.3633628785610199
    2. '(' → logprob: -1.2383629083633423
    3. '("("' → logprob: -4.238362789154053
    4. '()' → logprob: -8.363363265991211
    5. ''' → logprob: -9.988363265991211
    6. '(`' → logprob: -10.363363265991211
    7. '((' → logprob: -10.988363265991211
    8. '(('' → logprob: -11.988363265991211
    9. '('.')' → logprob: -11.988363265991211
    10. '(\'' → logprob: -12.363363265991211

Token 20: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.00020854694594163448
    2. 'd' → logprob: -8.750208854675293
    3. '```' → logprob: -10.625208854675293
    4. 'de' → logprob: -11.500208854675293
    5. '<|end|>' → logprob: -11.875208854675293
    6. '\' → logprob: -12.500208854675293
    7. '#' → logprob: -13.250208854675293
    8. '(' → logprob: -14.250208854675293
    9. ' def' → logprob: -14.625208854675293
    10. '(def' → logprob: -15.250208854675293

Token 21: ' convert' (ID: 8452)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.32511091232299805
    2. 'main' → logprob: -1.450110912322998
    3. 'process' → logprob: -3.950110912322998
    4. ' process' → logprob: -4.200110912322998
    5. ' join' → logprob: -5.575110912322998
    6. 'join' → logprob: -6.325110912322998
    7. 'parse' → logprob: -7.450110912322998
    8. ' parse' → logprob: -7.825110912322998
    9. 'calculate' → logprob: -7.825110912322998
    10. 'convert' → logprob: -8.450111389160156

Token 22: '_to' (ID: 5089)
  Prédit: '_to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_to' → logprob: -0.6430965662002563
    2. '_' → logprob: -0.7680965662002563
    3. '(' → logprob: -5.643096446990967
    4. '_token' → logprob: -6.018096446990967
    5. '_tokens' → logprob: -6.018096446990967
    6. '_input' → logprob: -8.018096923828125
    7. '```' → logprob: -8.143096923828125
    8. '_user' → logprob: -8.768096923828125
    9. '_string' → logprob: -8.893096923828125
    10. '(_' → logprob: -9.143096923828125

Token 23: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.00047583275591023266
    2. 'int' → logprob: -8.250475883483887
    3. '_tokens' → logprob: -9.875475883483887
    4. '_in' → logprob: -10.125475883483887
    5. '_numbers' → logprob: -10.250475883483887
    6. '_' → logprob: -10.375475883483887
    7. '_integer' → logprob: -10.875475883483887
    8. '_float' → logprob: -10.875475883483887
    9. '_list' → logprob: -12.250475883483887
    10. '_words' → logprob: -12.375475883483887

Token 24: 's' (ID: 82)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.046613775193691254
    2. 's' → logprob: -3.1716136932373047
    3. '(s' → logprob: -6.171613693237305
    4. '()' → logprob: -8.171613693237305
    5. '(user' → logprob: -8.421613693237305
    6. '_' → logprob: -8.546613693237305
    7. '("("' → logprob: -8.546613693237305
    8. '():' → logprob: -9.171613693237305
    9. ' (' → logprob: -9.671613693237305
    10. '(_)' → logprob: -9.796613693237305

Token 25: '(str' (ID: 7946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.07043040543794632
    2. '(user' → logprob: -2.6954305171966553
    3. '("("' → logprob: -9.445430755615234
    4. '(users' → logprob: -9.695430755615234
    5. ' (' → logprob: -9.820430755615234
    6. '(def' → logprob: -10.070430755615234
    7. '(input' → logprob: -10.320430755615234
    8. '(u' → logprob: -10.570430755615234
    9. '(tokens' → logprob: -10.820430755615234
    10. '(data' → logprob: -11.195430755615234

Token 26: '_list' (ID: 4162)
  Prédit: 'ings'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ings' → logprob: -0.2983294725418091
    2. 's' → logprob: -1.548329472541809
    3. 'ing' → logprob: -3.2983293533325195
    4. '_list' → logprob: -5.6733293533325195
    5. '_' → logprob: -5.7983293533325195
    6. '_s' → logprob: -6.5483293533325195
    7. '_array' → logprob: -9.42332935333252
    8. '_vals' → logprob: -9.54832935333252
    9. '_tokens' → logprob: -9.54832935333252
    10. 'ingss' → logprob: -10.29832935333252

Token 27: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00024608144303783774
    2. ' ):' → logprob: -8.750246047973633
    3. ')' → logprob: -9.875246047973633
    4. '):
' → logprob: -10.375246047973633
    5. '[]):' → logprob: -13.500246047973633
    6. '   ' → logprob: -14.250246047973633
    7. '):

' → logprob: -14.625246047973633
    8. ']:' → logprob: -14.625246047973633
    9. '):
' → logprob: -15.000246047973633
    10. ']):' → logprob: -15.625246047973633

Token 28: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02107861265540123
    2. '[' → logprob: -4.021078586578369
    3. '[int' → logprob: -6.021078586578369
    4. 'return' → logprob: -8.396079063415527
    5. ' [' → logprob: -9.271079063415527
    6. '[]' → logprob: -9.646079063415527
    7. '[
' → logprob: -9.896079063415527
    8. ' return' → logprob: -10.396079063415527
    9. '[i' → logprob: -11.146079063415527
    10. '[:]' → logprob: -12.146079063415527

Token 29: ' return' (ID: 622)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.9918090105056763
    2. '   ' → logprob: -0.9918090105056763
    3. '[int' → logprob: -1.4918090105056763
    4. 'return' (adapté à ' return') → logprob: -3.8668088912963867
    5. ' return' → logprob: -4.741808891296387
    6. ' [' → logprob: -5.991808891296387
    7. '[i' → logprob: -8.116808891296387
    8. '[]' → logprob: -8.241808891296387
    9. '[
' → logprob: -8.366808891296387
    10. 'int' → logprob: -9.866808891296387

Token 30: ' [' (ID: 723)
  Prédit: ' ['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' [' → logprob: -0.04399430751800537
    2. '[' → logprob: -3.793994426727295
    3. ' list' → logprob: -4.293994426727295
    4. '[list' → logprob: -5.043994426727295
    5. 'list' → logprob: -8.293993949890137
    6. '[int' → logprob: -8.668993949890137
    7. '[List' → logprob: -11.543993949890137
    8. '[len' → logprob: -13.543993949890137
    9. '[i' → logprob: -13.793993949890137
    10. ' ' → logprob: -14.418993949890137

Token 31: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -1.318681188422488e-05
    2. ' int' → logprob: -11.25001335144043
    3. '   ' → logprob: -16.50001335144043
    4. '(int' → logprob: -19.37501335144043
    5. '  ' → logprob: -19.62501335144043
    6. '```' → logprob: -20.12501335144043
    7. '<int' → logprob: -21.12501335144043
    8. ' ' → logprob: -21.25001335144043
    9. '	int' → logprob: -21.25001335144043
    10. ':int' → logprob: -21.25001335144043

Token 32: '(x' (ID: 4061)
  Prédit: '(s'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(s' → logprob: -0.18870815634727478
    2. '(x' → logprob: -1.9387081861495972
    3. '(' → logprob: -4.063708305358887
    4. '(item' → logprob: -4.813708305358887
    5. '(i' → logprob: -6.813708305358887
    6. '(elem' → logprob: -6.813708305358887
    7. '(element' → logprob: -8.313708305358887
    8. '(token' → logprob: -8.438708305358887
    9. 's' → logprob: -10.313708305358887
    10. '(el' → logprob: -11.063708305358887

Token 33: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0002639582962729037
    2. ' )' → logprob: -8.375264167785645
    3. ')]' → logprob: -10.375264167785645
    4. ')])' → logprob: -14.750264167785645
    5. ']' → logprob: -15.000264167785645
    6. 'for' → logprob: -15.125264167785645
    7. ' for' → logprob: -15.375264167785645
    8. '))' → logprob: -15.500264167785645
    9. '')' → logprob: -15.625264167785645
    10. '   ' → logprob: -16.000263214111328

Token 34: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.7439209222793579
    2. ')' → logprob: -0.9939209222793579
    3. 'for' → logprob: -1.868920922279358
    4. ' in' → logprob: -9.243921279907227
    5. ' )' → logprob: -9.368921279907227
    6. ']' → logprob: -9.493921279907227
    7. 'in' → logprob: -10.618921279907227
    8. ' ' → logprob: -11.243921279907227
    9. '   ' → logprob: -11.243921279907227
    10. ' x' → logprob: -11.743921279907227

Token 35: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.06350566446781158
    2. ' str' → logprob: -2.8135056495666504
    3. ' ' → logprob: -7.31350564956665
    4. 'x' → logprob: -7.31350564956665
    5. 'str' → logprob: -8.938506126403809
    6. '<|end|>' → logprob: -9.938506126403809
    7. '	str' → logprob: -11.563506126403809
    8. '<|end|>' → logprob: -12.438506126403809
    9. '  ' → logprob: -12.563506126403809
    10. ' ' → logprob: -13.313506126403809

Token 36: ' in' (ID: 306)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.5803869962692261
    2. ' in' → logprob: -0.9553869962692261
    3. 'in' → logprob: -2.9553871154785156
    4. ' ' → logprob: -6.705387115478516
    5. ' n' → logprob: -7.205387115478516
    6. '_' → logprob: -7.205387115478516
    7. 's' → logprob: -8.205387115478516
    8. '   ' → logprob: -8.705387115478516
    9. ')' → logprob: -8.830387115478516
    10. '  ' → logprob: -9.705387115478516

Token 37: ' str' (ID: 989)
  Prédit: ' str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' str' → logprob: -0.07890234887599945
    2. 'str' → logprob: -2.578902244567871
    3. '	str' → logprob: -11.953902244567871
    4. '(str' → logprob: -12.703902244567871
    5. '_str' → logprob: -13.828902244567871
    6. ' ' → logprob: -14.078902244567871
    7. 's' → logprob: -14.828902244567871
    8. '[str' → logprob: -15.328902244567871
    9. 'stra' → logprob: -15.453902244567871
    10. '$str' → logprob: -16.328903198242188

Token 38: '_list' (ID: 4162)
  Prédit: '_list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_list' → logprob: -0.001126763760112226
    2. '_' → logprob: -7.001126766204834
    3. '_l' → logprob: -8.501126289367676
    4. '_li' → logprob: -12.126126289367676
    5. '_lst' → logprob: -13.126126289367676
    6. ')_' → logprob: -13.251126289367676
    7. '_)' → logprob: -14.126126289367676
    8. ')' → logprob: -15.001126289367676
    9. ' _' → logprob: -15.126126289367676
    10. 's' → logprob: -15.251126289367676

Token 39: ']

' (ID: 3144)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0007269674097187817
    2. ')]' → logprob: -7.25072717666626
    3. '])' → logprob: -11.625726699829102
    4. ' ]' → logprob: -12.250726699829102
    5. ']
' → logprob: -13.250726699829102
    6. '()]' → logprob: -15.000726699829102
    7. ')' → logprob: -15.000726699829102
    8. '])]' → logprob: -15.125726699829102
    9. '`]' → logprob: -15.500726699829102
    10. '']' → logprob: -16.0007266998291

Token 40: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.07703068107366562
    2. 'd' → logprob: -2.827030658721924
    3. 'n' → logprob: -5.202030658721924
    4. '\' → logprob: -5.577030658721924
    5. '
' → logprob: -5.827030658721924
    6. '#' → logprob: -6.577030658721924
    7. '\n' → logprob: -7.827030658721924
    8. '

' → logprob: -8.327031135559082
    9. '```' → logprob: -8.702031135559082
    10. 'a' → logprob: -9.452031135559082

Token 41: ' get' (ID: 717)
  Prédit: ' calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.5896538496017456
    2. ' main' → logprob: -1.4646538496017456
    3. ' process' → logprob: -2.214653968811035
    4. ' solve' → logprob: -2.964653968811035
    5. ' sum' → logprob: -4.214653968811035
    6. ' compute' → logprob: -4.339653968811035
    7. ' find' → logprob: -4.339653968811035
    8. ' sort' → logprob: -5.839653968811035
    9. 'calculate' → logprob: -6.089653968811035
    10. ' count' → logprob: -6.339653968811035

Token 42: '_n' (ID: 2170)
  Prédit: '_max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_max' → logprob: -0.7057392001152039
    2. '_sum' → logprob: -1.5807392597198486
    3. '_input' → logprob: -2.5807392597198486
    4. '_user' → logprob: -2.7057392597198486
    5. '_' → logprob: -2.8307392597198486
    6. '_data' → logprob: -4.0807390213012695
    7. '_numbers' → logprob: -4.0807390213012695
    8. '_min' → logprob: -4.2057390213012695
    9. '_total' → logprob: -4.5807390213012695
    10. '_unique' → logprob: -4.7057390213012695

Token 43: '(vals' (ID: 167053)
  Prédit: 'um'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'um' → logprob: -0.8673779964447021
    2. '_' → logprob: -1.8673779964447021
    3. 'umber' → logprob: -1.9923779964447021
    4. 'ext' → logprob: -2.117377996444702
    5. 'ame' → logprob: -2.992377996444702
    6. 'u' → logprob: -3.367377996444702
    7. 'a' → logprob: -3.367377996444702
    8. 'umbers' → logprob: -4.242378234863281
    9. '_u' → logprob: -4.867378234863281
    10. '_a' → logprob: -5.117378234863281

Token 44: '):
' (ID: 1883)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.02995307929813862
    2. '[' → logprob: -4.2799530029296875
    3. '_' → logprob: -4.6549530029296875
    4. ',' → logprob: -6.7799530029296875
    5. ')_' → logprob: -6.7799530029296875
    6. 'a' → logprob: -7.4049530029296875
    7. 'ame' → logprob: -7.7799530029296875
    8. '(' → logprob: -7.7799530029296875
    9. ' )' → logprob: -8.029953002929688
    10. '):' → logprob: -8.154953002929688

Token 45: '   ' (ID: 271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.027876950800418854
    2. '(vals' → logprob: -4.027876853942871
    3. '   ' → logprob: -6.277876853942871
    4. '[' → logprob: -6.277876853942871
    5. '(n' → logprob: -6.277876853942871
    6. '_' → logprob: -6.652876853942871
    7. 'vals' → logprob: -6.902876853942871
    8. ' vals' → logprob: -7.402876853942871
    9. ' (' → logprob: -8.027876853942871
    10. '(
' → logprob: -8.652876853942871

Token 46: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.8452145457267761
    2. 'return' (adapté à ' return') → logprob: -0.9702145457267761
    3. '   ' → logprob: -1.720214605331421
    4. 'vals' → logprob: -5.095214366912842
    5. ' vals' → logprob: -5.095214366912842
    6. '    ' → logprob: -9.84521484375
    7. ' ' → logprob: -9.97021484375
    8. 'val' → logprob: -10.09521484375
    9. '    
' → logprob: -10.72021484375
    10. '(vals' → logprob: -10.97021484375

Token 47: ' vals' (ID: 58985)
  Prédit: ' vals'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' vals' → logprob: -0.0028021486941725016
    2. 'vals' → logprob: -6.00280237197876
    3. ' len' → logprob: -8.627801895141602
    4. ' int' → logprob: -9.002801895141602
    5. ' ' → logprob: -11.877801895141602
    6. ' val' → logprob: -12.252801895141602
    7. '(vals' → logprob: -12.252801895141602
    8. 'len' → logprob: -12.502801895141602
    9. 'int' → logprob: -13.752801895141602
    10. '_vals' → logprob: -14.252801895141602

Token 48: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.282920129597187e-05
    2. '```' → logprob: -12.875012397766113
    3. '\[' → logprob: -12.875012397766113
    4. ' [' → logprob: -13.125012397766113
    5. '0' → logprob: -13.250012397766113
    6. '[
' → logprob: -13.500012397766113
    7. '[-' → logprob: -14.250012397766113
    8. ' ' → logprob: -14.625012397766113
    9. '[len' → logprob: -15.000012397766113
    10. '[n' → logprob: -15.250012397766113

Token 49: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -4.36574100604048e-06
    2. ' ' → logprob: -12.375004768371582
    3. '1' → logprob: -17.125003814697266
    4. ')' → logprob: -17.625003814697266
    5. '۰' → logprob: -18.125003814697266
    6. '-' → logprob: -18.750003814697266
    7. '   ' → logprob: -19.125003814697266
    8. ']' → logprob: -19.312503814697266
    9. '[' → logprob: -19.562503814697266
    10. '00' → logprob: -19.875003814697266

Token 50: ']

' (ID: 3144)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']' → logprob: -0.00021295747137628496
    2. ')' → logprob: -8.750212669372559
    3. ' ]' → logprob: -9.875212669372559
    4. ')]' → logprob: -13.500212669372559
    5. ']
' → logprob: -14.125212669372559
    6. '}' → logprob: -14.875212669372559
    7. ':]' → logprob: -15.750212669372559
    8. '']' → logprob: -16.000213623046875
    9. '[' → logprob: -16.625213623046875
    10. '])' → logprob: -17.125213623046875

Token 51: 'def' (ID: 1314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 52: ' get' (ID: 717)
  Prédit: ' get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.12408570945262909
    2. '_' → logprob: -2.3740856647491455
    3. ' g' → logprob: -4.499085903167725
    4. 'get' → logprob: -4.874085903167725
    5. '_get' → logprob: -6.499085903167725
    6. ' _' → logprob: -6.624085903167725
    7. ' main' → logprob: -7.374085903167725
    8. ' space' → logprob: -8.249085426330566
    9. ' def' → logprob: -8.374085426330566
    10. 'g' → logprob: -8.374085426330566

Token 53: '_r' (ID: 3442)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.9963732361793518
    2. '_m' → logprob: -0.9963732361793518
    3. '_n' → logprob: -2.371373176574707
    4. '_rest' → logprob: -2.871373176574707
    5. '_k' → logprob: -3.371373176574707
    6. '_vals' → logprob: -3.496373176574707
    7. '_values' → logprob: -4.621373176574707
    8. '_a' → logprob: -4.746373176574707
    9. '_s' → logprob: -5.621373176574707
    10. '1' → logprob: -5.871373176574707

Token 54: '(vals' (ID: 167053)
  Prédit: '(vals'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(vals' → logprob: -0.03455198183655739
    2. '(' → logprob: -3.4095520973205566
    3. '_vals' → logprob: -8.034551620483398
    4. '(val' → logprob: -8.909551620483398
    5. 'ange' → logprob: -9.784551620483398
    6. 's' → logprob: -9.784551620483398
    7. 'an' → logprob: -9.909551620483398
    8. 'vals' → logprob: -10.034551620483398
    9. '(values' → logprob: -10.034551620483398
    10. '(nums' → logprob: -10.159551620483398

Token 55: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.39375999569892883
    2. ')' → logprob: -1.1437599658966064
    3. '[' → logprob: -5.0187602043151855
    4. '):
' → logprob: -8.893759727478027
    5. ',' → logprob: -10.268759727478027
    6. '   ' → logprob: -10.643759727478027
    7. '[]):' → logprob: -11.143759727478027
    8. ' ):' → logprob: -11.643759727478027
    9. ':' → logprob: -11.893759727478027
    10. '):

' → logprob: -12.768759727478027

Token 56: '   ' (ID: 271)
  Prédit: ' vals'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' vals' → logprob: -0.0020353456493467093
    2. 'vals' → logprob: -6.627035140991211
    3. '(vals' → logprob: -7.377035140991211
    4. ' return' → logprob: -10.252035140991211
    5. ' values' → logprob: -11.127035140991211
    6. '   ' → logprob: -11.377035140991211
    7. ' val' → logprob: -11.627035140991211
    8. '_vals' → logprob: -12.002035140991211
    9. ' ' → logprob: -13.127035140991211
    10. '1' → logprob: -14.002035140991211

Token 57: ' return' (ID: 622)
  Prédit: ' vals'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' vals' → logprob: -0.018561692908406258
    2. 'vals' → logprob: -4.018561840057373
    3. ' return' → logprob: -7.893561840057373
    4. '(vals' → logprob: -11.018561363220215
    5. 'return' (adapté à ' return') → logprob: -11.393561363220215
    6. ' val' → logprob: -12.518561363220215
    7. '   ' → logprob: -12.643561363220215
    8. 'val' → logprob: -12.643561363220215
    9. '_vals' → logprob: -15.393561363220215
    10. ' values' → logprob: -15.893561363220215

Token 58: ' vals' (ID: 58985)
  Prédit: ' vals'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' vals' → logprob: -0.018162349238991737
    2. 'vals' → logprob: -4.018162250518799
    3. '(vals' → logprob: -11.393162727355957
    4. 'val' → logprob: -15.143162727355957
    5. ' val' → logprob: -15.393162727355957
    6. ' values' → logprob: -15.518162727355957
    7. '_vals' → logprob: -15.893162727355957
    8. 'v' → logprob: -16.64316177368164
    9. 'values' → logprob: -16.76816177368164
    10. 'Vals' → logprob: -17.26816177368164

Token 59: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0010511501459404826
    2. '1' → logprob: -7.25105094909668
    3. '[-' → logprob: -8.12605094909668
    4. '```' → logprob: -11.37605094909668
    5. '[len' → logprob: -11.62605094909668
    6. '[
' → logprob: -11.87605094909668
    7. ' [' → logprob: -12.50105094909668
    8. '\[' → logprob: -13.12605094909668
    9. '2' → logprob: -13.25105094909668
    10. '[:]' → logprob: -13.37605094909668

Token 60: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.0683535037969705e-05
    2. '0' → logprob: -11.62501049041748
    3. ' ' → logprob: -13.50001049041748
    4. '-' → logprob: -15.75001049041748
    5. '```' → logprob: -16.375011444091797
    6. ']' → logprob: -16.500011444091797
    7. '   ' → logprob: -16.750011444091797
    8. '2' → logprob: -17.125011444091797
    9. '' → logprob: -18.500011444091797
    10. '>' → logprob: -18.687511444091797

Token 61: ']

' (ID: 3144)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -2.339278580620885e-06
    2. '}' → logprob: -13.375001907348633
    3. ']' → logprob: -15.125001907348633
    4. ' )' → logprob: -15.375001907348633
    5. ')
' → logprob: -16.125001907348633
    6. '()' → logprob: -17.625001907348633
    7. '))' → logprob: -17.750001907348633
    8. ')}' → logprob: -18.000001907348633
    9. '),' → logprob: -18.250001907348633
    10. '）' → logprob: -18.375001907348633

Token 62: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.004704714752733707
    2. '\' → logprob: -6.12970495223999
    3. '
' → logprob: -7.00470495223999
    4. '```' → logprob: -7.25470495223999
    5. 'd' → logprob: -8.254704475402832
    6. '\n' → logprob: -8.379704475402832
    7. '<|end|>' → logprob: -8.879704475402832
    8. '#' → logprob: -9.254704475402832
    9. '

' → logprob: -9.504704475402832
    10. 'n' → logprob: -10.129704475402832

Token 63: ' compute' (ID: 23864)
  Prédit: ' calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.3778294622898102
    2. ' get' → logprob: -2.3778295516967773
    3. ' compute' → logprob: -3.0028295516967773
    4. ' main' → logprob: -3.1278295516967773
    5. ' is' → logprob: -3.3778295516967773
    6. 'calculate' → logprob: -3.8778295516967773
    7. ' factorial' → logprob: -4.752829551696777
    8. ' solve' → logprob: -4.752829551696777
    9. 'def' → logprob: -5.002829551696777
    10. ' check' → logprob: -5.377829551696777

Token 64: '_r' (ID: 3442)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -1.0409115552902222
    2. '_sum' → logprob: -1.0409115552902222
    3. '_factor' → logprob: -2.2909116744995117
    4. '_max' → logprob: -3.0409116744995117
    5. '_area' → logprob: -4.040911674499512
    6. '_total' → logprob: -4.290911674499512
    7. '_r' → logprob: -4.540911674499512
    8. '(' → logprob: -4.665911674499512
    9. '_comb' → logprob: -5.040911674499512
    10. '_per' → logprob: -5.290911674499512

Token 65: '_if' (ID: 25821)
  Prédit: '_pow'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_pow' → logprob: -0.9721265435218811
    2. '_power' → logprob: -1.5971264839172363
    3. '_' → logprob: -1.9721264839172363
    4. '(' → logprob: -2.3471264839172363
    5. '_sum' → logprob: -2.8471264839172363
    6. '_to' → logprob: -3.8471264839172363
    7. '_raise' → logprob: -4.472126483917236
    8. 'adius' → logprob: -4.847126483917236
    9. '_factor' → logprob: -4.972126483917236
    10. 'ange' → logprob: -4.972126483917236

Token 66: '_n' (ID: 2170)
  Prédit: '_r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_r' → logprob: -1.2838059663772583
    2. '_less' → logprob: -1.4088059663772583
    3. '_g' → logprob: -1.5338059663772583
    4. '_n' → logprob: -2.2838058471679688
    5. '_else' → logprob: -2.7838058471679688
    6. '_needed' → logprob: -3.4088058471679688
    7. '_possible' → logprob: -4.033805847167969
    8. '_' → logprob: -5.408805847167969
    9. '_zero' → logprob: -5.658805847167969
    10. '_equal' → logprob: -5.658805847167969

Token 67: '_gt' (ID: 87310)
  Prédit: '_g'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_g' → logprob: -0.5404642224311829
    2. '_less' → logprob: -1.165464162826538
    3. '_equals' → logprob: -3.540464162826538
    4. '_equal' → logprob: -4.165464401245117
    5. '_gt' → logprob: -4.290464401245117
    6. '_eq' → logprob: -4.790464401245117
    7. '_div' → logprob: -5.415464401245117
    8. '_l' → logprob: -5.415464401245117
    9. '_n' → logprob: -5.415464401245117
    10. '_' → logprob: -5.540464401245117

Token 68: '_' (ID: 62)
  Prédit: '_n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_n' → logprob: -0.6336793303489685
    2. '_r' → logprob: -1.1336793899536133
    3. '_' → logprob: -3.2586793899536133
    4. '(vals' → logprob: -3.2586793899536133
    5. 'n' → logprob: -3.5086793899536133
    6. 'r' → logprob: -3.8836793899536133
    7. '(' → logprob: -5.008679389953613
    8. '(n' → logprob: -5.383679389953613
    9. '0' → logprob: -6.258679389953613
    10. '_equal' → logprob: -6.758679389953613

Token 69: '10' (ID: 702)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.5677544474601746
    2. '_r' → logprob: -0.9427544474601746
    3. '0' → logprob: -4.19275426864624
    4. '_' → logprob: -4.31775426864624
    5. '1' → logprob: -4.69275426864624
    6. 'n' → logprob: -6.81775426864624
    7. '_n' → logprob: -7.06775426864624
    8. '100' → logprob: -7.56775426864624
    9. 'zero' → logprob: -7.56775426864624
    10. '2' → logprob: -7.81775426864624

Token 70: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.19420695304870605
    2. '(n' → logprob: -1.944206953048706
    3. '_' → logprob: -3.444206953048706
    4. '_(' → logprob: -7.694207191467285
    5. '(_' → logprob: -8.319207191467285
    6. '_n' → logprob: -8.569207191467285
    7. 'def' → logprob: -9.069207191467285
    8. '(_)' → logprob: -9.444207191467285
    9. ' (' → logprob: -9.819207191467285
    10. '```' → logprob: -10.319207191467285

Token 71: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00873630028218031
    2. ' ,' → logprob: -5.3837361335754395
    3. '):' → logprob: -5.6337361335754395
    4. ',r' → logprob: -8.008736610412598
    5. ')' → logprob: -9.258736610412598
    6. ' ):' → logprob: -10.133736610412598
    7. ',n' → logprob: -10.758736610412598
    8. ',
' → logprob: -11.508736610412598
    9. ' ' → logprob: -11.758736610412598
    10. '_,' → logprob: -12.133736610412598

Token 72: ' r' (ID: 428)
  Prédit: ' r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' r' → logprob: -0.12706439197063446
    2. 'r' → logprob: -2.1270644664764404
    3. ' ' → logprob: -9.25206470489502
    4. ' ' → logprob: -11.81456470489502
    5. ' )' → logprob: -12.43956470489502
    6. ' ,' → logprob: -12.75206470489502
    7. ',' → logprob: -13.06456470489502
    8. ' n' → logprob: -13.12706470489502
    9. ' 
' → logprob: -13.12706470489502
    10. '```' → logprob: -13.25206470489502

Token 73: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.02781480923295021
    2. ',' → logprob: -3.6528148651123047
    3. ')' → logprob: -6.902814865112305
    4. ' ):' → logprob: -8.527814865112305
    5. '):
' → logprob: -8.652814865112305
    6. ':' → logprob: -9.402814865112305
    7. ' ,' → logprob: -10.902814865112305
    8. '   ' → logprob: -11.527814865112305
    9. '=' → logprob: -12.152814865112305
    10. 'if' → logprob: -12.527814865112305

Token 74: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.10491126030683517
    2. '   ' → logprob: -2.3549113273620605
    3. ':
' → logprob: -5.8549113273620605
    4. ' :' → logprob: -7.4799113273620605
    5. '():' → logprob: -7.7299113273620605
    6. '(' → logprob: -8.479910850524902
    7. '):' → logprob: -8.854910850524902
    8. ' if' → logprob: -9.354910850524902
    9. '    ' → logprob: -10.104910850524902
    10. '       ' → logprob: -10.229910850524902

Token 75: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.010901855304837227
    2. ' if' → logprob: -5.260901927947998
    3. 'if' → logprob: -6.010901927947998
    4. ':' → logprob: -6.885901927947998
    5. '    ' → logprob: -7.760901927947998
    6. ' return' → logprob: -7.885901927947998
    7. '    
' → logprob: -7.885901927947998
    8. ' 
' → logprob: -8.51090145111084
    9. ' ' → logprob: -8.51090145111084
    10. 'return' (adapté à ' return') → logprob: -8.76090145111084

Token 76: ' r' (ID: 428)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.4932309091091156
    2. ' r' → logprob: -1.118230938911438
    3. ' n' → logprob: -4.118230819702148
    4. 'n' → logprob: -4.743230819702148
    5. ' ' → logprob: -5.243230819702148
    6. ' (' → logprob: -5.368230819702148
    7. '0' → logprob: -5.368230819702148
    8. '(' → logprob: -5.868230819702148
    9. '10' → logprob: -5.868230819702148
    10. '(r' → logprob: -5.868230819702148

Token 77: '

' (ID: 279)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.0797971487045288
    2. '
' → logprob: -1.2047971487045288
    3. '<|end|>' → logprob: -1.2047971487045288
    4. ' if' → logprob: -3.3297972679138184
    5. 'def' → logprob: -5.704797267913818
    6. '\n' → logprob: -5.704797267913818
    7. '   ' → logprob: -5.829797267913818
    8. '*' → logprob: -5.954797267913818
    9. '<|end|>' → logprob: -6.204797267913818
    10. '    
' → logprob: -6.204797267913818

Token 78: 'def' (ID: 1314)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.9111346006393433
    2. 'def' → logprob: -1.0361346006393433
    3. '
' → logprob: -2.036134719848633
    4. '_' → logprob: -3.036134719848633
    5. '<|end|>' → logprob: -4.161134719848633
    6. '\' → logprob: -4.286134719848633
    7. '```' → logprob: -4.661134719848633
    8. '\n' → logprob: -5.411134719848633
    9. '

' → logprob: -5.911134719848633
    10. ' if' → logprob: -5.911134719848633

Token 79: ' compute' (ID: 23864)
  Prédit: ' compute'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' compute' → logprob: -0.002396698109805584
    2. 'compute' → logprob: -6.252396583557129
    3. ' ' → logprob: -8.877396583557129
    4. ' main' → logprob: -9.252396583557129
    5. ' def' → logprob: -9.752396583557129
    6. '_compute' → logprob: -9.877396583557129
    7. ' calculate' → logprob: -10.127396583557129
    8. '_' → logprob: -10.377396583557129
    9. ' _' → logprob: -11.377396583557129
    10. 'n' → logprob: -12.002396583557129

Token 80: '_r' (ID: 3442)
  Prédit: '_r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_r' → logprob: -0.009044683538377285
    2. '_' → logprob: -5.384044647216797
    3. '_n' → logprob: -5.884044647216797
    4. '_if' → logprob: -7.634044647216797
    5. '_s' → logprob: -8.509044647216797
    6. 'r' → logprob: -9.259044647216797
    7. '_sum' → logprob: -9.384044647216797
    8. '_result' → logprob: -9.509044647216797
    9. '_a' → logprob: -9.884044647216797
    10. '_p' → logprob: -10.259044647216797

Token 81: '_else' (ID: 148349)
  Prédit: '_if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_if' → logprob: -0.6619262099266052
    2. '(' → logprob: -0.7869262099266052
    3. '(n' → logprob: -4.16192626953125
    4. 'if' → logprob: -5.03692626953125
    5. '_' → logprob: -6.16192626953125
    6. '(if' → logprob: -6.41192626953125
    7. '(_' → logprob: -7.03692626953125
    8. ' (' → logprob: -7.66192626953125
    9. ' if' → logprob: -7.66192626953125
    10. 'If' → logprob: -8.41192626953125

Token 82: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2313718944787979
    2. '(n' → logprob: -1.7313718795776367
    3. '(r' → logprob: -3.9813718795776367
    4. '_' → logprob: -4.981371879577637
    5. '_r' → logprob: -6.231371879577637
    6. '_(' → logprob: -6.981371879577637
    7. ' (' → logprob: -7.731371879577637
    8. '(_' → logprob: -9.106371879577637
    9. '_if' → logprob: -9.106371879577637
    10. 'r' → logprob: -9.231371879577637

Token 83: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.006015183869749308
    2. ',r' → logprob: -5.756015300750732
    3. ' ,' → logprob: -5.881015300750732
    4. ',n' → logprob: -10.881014823913574
    5. 'r' → logprob: -12.006014823913574
    6. '   ' → logprob: -12.881014823913574
    7. ',
' → logprob: -13.006014823913574
    8. ' ' → logprob: -13.131014823913574
    9. '_r' → logprob: -13.131014823913574
    10. ')' → logprob: -13.131014823913574

Token 84: ' r' (ID: 428)
  Prédit: ' r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' r' → logprob: -0.1799982637166977
    2. 'r' → logprob: -1.8049982786178589
    3. ' ' → logprob: -8.929998397827148
    4. ' ' → logprob: -9.929998397827148
    5. ' n' → logprob: -11.054998397827148
    6. ')' → logprob: -11.429998397827148
    7. '   ' → logprob: -11.742498397827148
    8. '	r' → logprob: -11.992498397827148
    9. 'n' → logprob: -12.054998397827148
    10. 's' → logprob: -12.804998397827148

Token 85: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.004337783437222242
    2. ':' → logprob: -5.754337787628174
    3. '):
' → logprob: -7.379337787628174
    4. ')' → logprob: -7.629337787628174
    5. '   ' → logprob: -10.504337310791016
    6. ' ):' → logprob: -11.754337310791016
    7. ',' → logprob: -12.504337310791016
    8. ' ' → logprob: -13.504337310791016
    9. '():' → logprob: -13.754337310791016
    10. '=' → logprob: -13.879337310791016

Token 86: '   ' (ID: 271)
  Prédit: ' r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' r' → logprob: -0.7807196378707886
    2. '   ' → logprob: -1.1557196378707886
    3. 'r' → logprob: -2.530719757080078
    4. ' return' → logprob: -2.655719757080078
    5. '0' → logprob: -3.280719757080078
    6. 'return' → logprob: -4.030719757080078
    7. ' ' → logprob: -4.780719757080078
    8. ' n' → logprob: -5.780719757080078
    9. '10' → logprob: -6.155719757080078
    10. '    ' → logprob: -6.530719757080078

Token 87: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.19257229566574097
    2. ' return' → logprob: -1.8175723552703857
    3. 'r' → logprob: -4.817572116851807
    4. '   ' → logprob: -6.317572116851807
    5. ' if' → logprob: -7.067572116851807
    6. ' r' → logprob: -7.192572116851807
    7. 'if' → logprob: -7.442572116851807
    8. '0' → logprob: -8.442572593688965
    9. '10' → logprob: -8.692572593688965
    10. 'n' → logprob: -9.692572593688965

Token 88: ' r' (ID: 428)
  Prédit: ' r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' r' → logprob: -0.4551292657852173
    2. ' n' → logprob: -2.0801291465759277
    3. ' ' → logprob: -2.4551291465759277
    4. 'r' → logprob: -2.7051291465759277
    5. '0' → logprob: -3.0801291465759277
    6. 'n' → logprob: -4.580129146575928
    7. ' max' → logprob: -4.705129146575928
    8. ' (' → logprob: -4.705129146575928
    9. ' min' → logprob: -5.330129146575928
    10. '10' → logprob: -5.955129146575928

Token 89: ' +' (ID: 659)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.11870773881673813
    2. '
' → logprob: -3.1187076568603516
    3. '\' → logprob: -3.4937076568603516
    4. '\n' → logprob: -4.243707656860352
    5. '<|end|>' → logprob: -5.118707656860352
    6. '

' → logprob: -5.243707656860352
    7. 'n' → logprob: -5.368707656860352
    8. 'd' → logprob: -5.993707656860352
    9. '#' → logprob: -6.243707656860352
    10. '```' → logprob: -7.493707656860352

Token 90: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.5951179265975952
    2. ' n' → logprob: -2.0951180458068848
    3. 'n' → logprob: -2.2201180458068848
    4. ' ' → logprob: -2.3451180458068848
    5. '10' → logprob: -2.5951180458068848
    6. '5' → logprob: -3.5951180458068848
    7. '2' → logprob: -4.970118045806885
    8. '(' → logprob: -5.595118045806885
    9. ' (' → logprob: -5.720118045806885
    10. '(n' → logprob: -5.845118045806885

Token 91: '100' (ID: 1353)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.8188887238502502
    2. '10' → logprob: -1.4438886642456055
    3. 'n' → logprob: -1.9438886642456055
    4. '5' → logprob: -1.9438886642456055
    5. '(n' → logprob: -4.0688886642456055
    6. '(' → logprob: -4.8188886642456055
    7. '2' → logprob: -5.0688886642456055
    8. ' ' → logprob: -6.1938886642456055
    9. ' n' → logprob: -7.1938886642456055
    10. '3' → logprob: -7.5688886642456055

Token 92: ' *' (ID: 425)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.019475175067782402
    2. '\' → logprob: -4.894474983215332
    3. '
' → logprob: -5.644474983215332
    4. '\n' → logprob: -5.894474983215332
    5. 'n' → logprob: -6.394474983215332
    6. 'd' → logprob: -6.519474983215332
    7. '```' → logprob: -7.144474983215332
    8. '<|end|>' → logprob: -7.144474983215332
    9. '#' → logprob: -8.519474983215332
    10. '

' → logprob: -9.269474983215332

Token 93: ' (' (ID: 350)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.31766197085380554
    2. '(' → logprob: -1.942662000656128
    3. '(n' → logprob: -2.442662000656128
    4. ' n' → logprob: -3.692662000656128
    5. ' (' → logprob: -4.317661762237549
    6. '1' → logprob: -6.692661762237549
    7. '0' → logprob: -7.317661762237549
    8. '10' → logprob: -7.567661762237549
    9. '2' → logprob: -8.067662239074707
    10. ' ' → logprob: -8.317662239074707

Token 94: '10' (ID: 702)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6842021942138672
    2. 'n' → logprob: -0.9342021942138672
    3. '10' → logprob: -2.684202194213867
    4. '(n' → logprob: -4.059202194213867
    5. '1' → logprob: -4.559202194213867
    6. ' (' → logprob: -5.434202194213867
    7. ' n' → logprob: -6.559202194213867
    8. ' ' → logprob: -7.684202194213867
    9. '0' → logprob: -8.809202194213867
    10. '11' → logprob: -10.059202194213867

Token 95: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.34501999616622925
    2. '-' → logprob: -1.345020055770874
    3. '-n' → logprob: -3.470020055770874
    4. ' ' → logprob: -9.220020294189453
    5. '0' → logprob: -10.470020294189453
    6. ' ' → logprob: -12.845020294189453
    7. 'n' → logprob: -12.970020294189453
    8. '-r' → logprob: -13.095020294189453
    9. ' n' → logprob: -13.845020294189453
    10. '(n' → logprob: -14.470020294189453

Token 96: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.6931529641151428
    2. ' n' → logprob: -0.6931529641151428
    3. '	n' → logprob: -12.443153381347656
    4. ')n' → logprob: -14.068153381347656
    5. ' ' → logprob: -15.193153381347656
    6. 'int' → logprob: -15.693153381347656
    7. '(n' → logprob: -16.318153381347656
    8. '1' → logprob: -16.568153381347656
    9. ')' → logprob: -16.693153381347656
    10. '_n' → logprob: -16.818153381347656

Token 97: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.452426608419046e-05
    2. ' )' → logprob: -10.37503433227539
    3. ')
' → logprob: -13.00003433227539
    4. '))' → logprob: -16.00003433227539
    5. '*' → logprob: -16.00003433227539
    6. ')}' → logprob: -16.37503433227539
    7. ')

' → logprob: -16.37503433227539
    8. ')n' → logprob: -16.37503433227539
    9. '}' → logprob: -17.00003433227539
    10. ')}}' → logprob: -17.12503433227539

Token 98: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0031215064227581024
    2. '
' → logprob: -6.253121376037598
    3. '

' → logprob: -7.003121376037598
    4. '\' → logprob: -9.253121376037598
    5. '\n' → logprob: -10.003121376037598
    6. ' def' → logprob: -10.003121376037598
    7. '<|end|>' → logprob: -10.253121376037598
    8. '```' → logprob: -10.378121376037598
    9. ' 

' → logprob: -12.128121376037598
    10. 'n' → logprob: -12.503121376037598

Token 99: ' should' (ID: 1757)
  Prédit: ' compute'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' compute' → logprob: -0.18247880041599274
    2. ' main' → logprob: -2.557478904724121
    3. ' calculate' → logprob: -2.807478904724121
    4. ' process' → logprob: -4.182478904724121
    5. ' def' → logprob: -5.182478904724121
    6. ' get' → logprob: -6.307478904724121
    7. ' solve' → logprob: -6.307478904724121
    8. ' run' → logprob: -6.807478904724121
    9. ' calc' → logprob: -6.932478904724121
    10. ' solution' → logprob: -7.807478904724121

Token 100: '_use' (ID: 36283)
  Prédit: '_continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_continue' → logprob: -0.4845854341983795
    2. '_apply' → logprob: -1.8595854043960571
    3. '_use' → logprob: -2.3595855236053467
    4. '_' → logprob: -2.9845855236053467
    5. '_compute' → logprob: -3.4845855236053467
    6. '_take' → logprob: -4.609585285186768
    7. '_run' → logprob: -4.859585285186768
    8. '_go' → logprob: -5.359585285186768
    9. '_keep' → logprob: -5.484585285186768
    10. '_include' → logprob: -5.484585285186768

Token 101: '_regular' (ID: 123992)
  Prédit: '_compute'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_compute' → logprob: -0.08124733716249466
    2. '_r' → logprob: -3.081247329711914
    3. '(n' → logprob: -3.956247329711914
    4. '_' → logprob: -4.831247329711914
    5. '_n' → logprob: -5.956247329711914
    6. '_if' → logprob: -7.081247329711914
    7. 'compute' → logprob: -7.331247329711914
    8. '(' → logprob: -8.456247329711914
    9. 'r' → logprob: -8.956247329711914
    10. '_else' → logprob: -9.331247329711914

Token 102: '_case' (ID: 43667)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.08686820417642593
    2. '(' → logprob: -2.5868682861328125
    3. '_r' → logprob: -5.3368682861328125
    4. '_n' → logprob: -6.9618682861328125
    5. '_' → logprob: -7.0868682861328125
    6. 'def' → logprob: -8.211868286132812
    7. 'r' → logprob: -8.461868286132812
    8. '(r' → logprob: -8.586868286132812
    9. ' (' → logprob: -9.586868286132812
    10. '_return' → logprob: -9.711868286132812

Token 103: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.01947166584432125
    2. '(' → logprob: -4.019471645355225
    3. '():' → logprob: -6.644471645355225
    4. '()' → logprob: -11.894472122192383
    5. ':' → logprob: -12.394472122192383
    6. ' (' → logprob: -12.769472122192383
    7. '(s' → logprob: -13.644472122192383
    8. '(def' → logprob: -13.769472122192383
    9. '(user' → logprob: -14.019472122192383
    10. '(get' → logprob: -14.269472122192383

Token 104: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.001150102005340159
    2. ' ):' → logprob: -7.376150131225586
    3. ')' → logprob: -7.876150131225586
    4. '):
' → logprob: -9.376150131225586
    5. ',' → logprob: -10.001150131225586
    6. ',n' → logprob: -12.751150131225586
    7. '(n' → logprob: -13.001150131225586
    8. ':' → logprob: -13.501150131225586
    9. '<n' → logprob: -14.001150131225586
    10. ' )' → logprob: -14.126150131225586

Token 105: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0008522743592038751
    2. ' return' → logprob: -7.250852108001709
    3. 'return' → logprob: -8.875852584838867
    4. '	return' → logprob: -13.625852584838867
    5. '   ' → logprob: -15.250852584838867
    6. ':return' → logprob: -15.375852584838867
    7. '    
' → logprob: -15.625852584838867
    8. '```' → logprob: -15.750852584838867
    9. '    ' → logprob: -15.750852584838867
    10. '  ' → logprob: -16.250852584838867

Token 106: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.15614458918571472
    2. 'n' → logprob: -2.781144618988037
    3. ' n' → logprob: -3.031144618988037
    4. 'return' (adapté à ' return') → logprob: -3.406144618988037
    5. '   ' → logprob: -6.781144618988037
    6. ' ' → logprob: -10.906144142150879
    7. '    ' → logprob: -12.281144142150879
    8. ' if' → logprob: -12.531144142150879
    9. '    
' → logprob: -13.906144142150879
    10. '  ' → logprob: -14.031144142150879

Token 107: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.014165159314870834
    2. 'n' → logprob: -4.264164924621582
    3. '(n' → logprob: -15.014164924621582
    4. ' True' → logprob: -15.264164924621582
    5. '	n' → logprob: -15.264164924621582
    6. ' ' → logprob: -15.639164924621582
    7. 'True' → logprob: -15.889164924621582
    8. ' ' → logprob: -16.0141658782959
    9. ' not' → logprob: -16.3891658782959
    10. ' (' → logprob: -16.7641658782959

Token 108: ' >' (ID: 1424)
  Prédit: ' >'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.6552761197090149
    2. ' <=' → logprob: -0.9052761197090149
    3. '>' → logprob: -2.90527606010437
    4. '<=' → logprob: -4.030276298522949
    5. ' <' → logprob: -6.405276298522949
    6. ' >=' → logprob: -6.905276298522949
    7. ' ' → logprob: -7.155276298522949
    8. '<' → logprob: -8.53027629852295
    9. '>=' → logprob: -9.28027629852295
    10. ' >
' → logprob: -11.90527629852295

Token 109: ' ' (ID: 220)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.023400846868753433
    2. ' ' → logprob: -3.7734007835388184
    3. '9' → logprob: -8.773401260375977
    4. '```' → logprob: -15.023401260375977
    5. '0' → logprob: -16.398401260375977
    6. '  ' → logprob: -17.648401260375977
    7. '   ' → logprob: -17.648401260375977
    8. '`' → logprob: -17.710901260375977
    9. '_' → logprob: -17.773401260375977
    10. '>' → logprob: -17.773401260375977

Token 110: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -8.180258191714529e-06
    2. '9' → logprob: -11.875008583068848
    3. ' ' → logprob: -13.875008583068848
    4. '```' → logprob: -16.50000762939453
    5. '0' → logprob: -18.12500762939453
    6. '`' → logprob: -19.00000762939453
    7. '>' → logprob: -19.75000762939453
    8. '1' → logprob: -20.25000762939453
    9. '``' → logprob: -20.25000762939453
    10. '１０' → logprob: -20.62500762939453

Token 111: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.012770846486091614
    2. 'n' → logprob: -5.262770652770996
    3. '
' → logprob: -5.262770652770996
    4. '<|end|>' → logprob: -7.012770652770996
    5. '\n' → logprob: -7.387770652770996
    6. '

' → logprob: -7.762770652770996
    7. '\' → logprob: -9.137770652770996
    8. '```' → logprob: -9.262770652770996
    9. '#' → logprob: -10.262770652770996
    10. 'ndef' → logprob: -10.262770652770996

Token 112: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -7.684157026233152e-05
    2. 'n' → logprob: -10.375077247619629
    3. '\' → logprob: -11.125077247619629
    4. '<|end|>' → logprob: -11.250077247619629
    5. 'for' → logprob: -12.250077247619629
    6. '```' → logprob: -12.625077247619629
    7. '\n' → logprob: -12.875077247619629
    8. '#' → logprob: -13.125077247619629
    9. 'if' → logprob: -13.625077247619629
    10. 'ndef' → logprob: -14.125077247619629

Token 113: ' calculate' (ID: 17950)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.46180158853530884
    2. 'main' → logprob: -1.211801528930664
    3. 'process' → logprob: -3.586801528930664
    4. ' process' → logprob: -4.086801528930664
    5. 'compute' → logprob: -4.461801528930664
    6. ' compute' → logprob: -5.211801528930664
    7. 'calculate' → logprob: -5.211801528930664
    8. ' calculate' → logprob: -6.211801528930664
    9. 'solve' → logprob: -6.961801528930664
    10. ' solve' → logprob: -7.336801528930664

Token 114: '_R' (ID: 5190)
  Prédit: '_total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_total' → logprob: -0.9809308052062988
    2. '_result' → logprob: -1.8559308052062988
    3. '_price' → logprob: -2.105930805206299
    4. '_r' → logprob: -2.480930805206299
    5. '_final' → logprob: -2.480930805206299
    6. '_discount' → logprob: -3.105930805206299
    7. '_cost' → logprob: -3.980930805206299
    8. '_output' → logprob: -4.355930805206299
    9. '_' → logprob: -4.355930805206299
    10. '(' → logprob: -4.480930805206299

Token 115: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6940433979034424
    2. '(n' → logprob: -0.6940433979034424
    3. '_(' → logprob: -8.194043159484863
    4. '(_' → logprob: -8.444043159484863
    5. '(user' → logprob: -8.944043159484863
    6. '():' → logprob: -8.944043159484863
    7. '((' → logprob: -10.069043159484863
    8. ' (' → logprob: -11.194043159484863
    9. '(`' → logprob: -11.444043159484863
    10. '_' → logprob: -11.444043159484863

Token 116: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0001830410328693688
    2. ',r' → logprob: -8.62518310546875
    3. ' ,' → logprob: -12.62518310546875
    4. ',
' → logprob: -16.62518310546875
    5. ',n' → logprob: -17.50018310546875
    6. ',R' → logprob: -18.00018310546875
    7. 'r' → logprob: -18.12518310546875
    8. ')' → logprob: -18.25018310546875
    9. '‌,' → logprob: -18.50018310546875
    10. '_,' → logprob: -18.62518310546875

Token 117: ' r' (ID: 428)
  Prédit: ' r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' r' → logprob: -0.31326761841773987
    2. 'r' → logprob: -1.3132675886154175
    3. ' ' → logprob: -13.063267707824707
    4. ')' → logprob: -14.438267707824707
    5. '	r' → logprob: -14.438267707824707
    6. '_r' → logprob: -14.563267707824707
    7. ' ' → logprob: -14.813267707824707
    8. 'R' → logprob: -14.813267707824707
    9. '   ' → logprob: -14.875767707824707
    10. '    ' → logprob: -15.750767707824707

Token 118: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -9.066919301403686e-05
    2. ')' → logprob: -9.875090599060059
    3. '):
' → logprob: -10.625090599060059
    4. ':' → logprob: -11.750090599060059
    5. ',' → logprob: -12.125090599060059
    6. ' ):' → logprob: -13.750090599060059
    7. '   ' → logprob: -16.000091552734375
    8. '):
' → logprob: -16.125091552734375
    9. '():' → logprob: -17.000091552734375
    10. ' ' → logprob: -17.625091552734375

Token 119: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.003100827569141984
    2. ' if' → logprob: -6.378100872039795
    3. '
' → logprob: -7.503100872039795
    4. '    
' → logprob: -7.753100872039795
    5. ' 
' → logprob: -8.628100395202637
    6. '    ' → logprob: -9.503100395202637
    7. ' ' → logprob: -9.753100395202637
    8. 'if' → logprob: -10.878100395202637
    9. '  
' → logprob: -11.003100395202637
    10. '  ' → logprob: -11.128100395202637

Token 120: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2569044828414917
    2. ' if' → logprob: -1.6319044828414917
    3. 'if' (adapté à ' if') → logprob: -3.7569046020507812
    4. '
' → logprob: -5.506904602050781
    5. '    
' → logprob: -6.631904602050781
    6. ' 
' → logprob: -6.631904602050781
    7. '    ' → logprob: -8.131904602050781
    8. '```' → logprob: -8.506904602050781
    9. ' return' → logprob: -9.256904602050781
    10. '	if' → logprob: -9.256904602050781

Token 121: ' should' (ID: 1757)
  Prédit: ' should'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' should' → logprob: -0.7379904389381409
    2. ' n' → logprob: -0.8629904389381409
    3. ' ' → logprob: -2.362990379333496
    4. 'should' → logprob: -5.362990379333496
    5. ' not' → logprob: -7.362990379333496
    6. 'n' → logprob: -8.112990379333496
    7. ' space' → logprob: -9.237990379333496
    8. '_should' → logprob: -9.362990379333496
    9. ' (' → logprob: -10.737990379333496
    10. '  ' → logprob: -10.737990379333496

Token 122: '_use' (ID: 36283)
  Prédit: '_use'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_use' → logprob: -1.0325924449716695e-05
    2. ' _' → logprob: -11.87501049041748
    3. '_' → logprob: -13.87501049041748
    4. 'use' → logprob: -14.37501049041748
    5. '_user' → logprob: -14.75001049041748
    6. ' use' → logprob: -15.25001049041748
    7. '_USE' → logprob: -15.50001049041748
    8. '_have' → logprob: -15.62501049041748
    9. 'Use' → logprob: -16.250009536743164
    10. ' ' → logprob: -16.500009536743164

Token 123: '_regular' (ID: 123992)
  Prédit: '_regular'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_regular' → logprob: -3.6312321753939614e-05
    2. '_' → logprob: -10.500036239624023
    3. '_use' → logprob: -12.750036239624023
    4. ' _' → logprob: -12.875036239624023
    5. 'regular' → logprob: -13.875036239624023
    6. '_reg' → logprob: -14.250036239624023
    7. '_r' → logprob: -14.375036239624023
    8. '_n' → logprob: -15.000036239624023
    9. ' regular' → logprob: -15.625036239624023
    10. '_normal' → logprob: -16.250036239624023

Token 124: '_case' (ID: 43667)
  Prédit: '_case'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_case' → logprob: -0.00025037277373485267
    2. '_' → logprob: -8.750250816345215
    3. '(n' → logprob: -10.000250816345215
    4. '(' → logprob: -11.250250816345215
    5. ' _' → logprob: -11.375250816345215
    6. '(_' → logprob: -11.625250816345215
    7. '_c' → logprob: -12.625250816345215
    8. '_use' → logprob: -12.875250816345215
    9. 'case' → logprob: -13.500250816345215
    10. '_n' → logprob: -13.875250816345215

Token 125: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -7.302704761968926e-05
    2. '(' → logprob: -9.625073432922363
    3. ' (' → logprob: -11.875073432922363
    4. ' ' → logprob: -18.500072479248047
    5. '(
' → logprob: -19.125072479248047
    6. ')' → logprob: -19.125072479248047
    7. '(

' → logprob: -20.750072479248047
    8. '   ' → logprob: -21.125072479248047
    9. '  ' → logprob: -21.625072479248047
    10. '(no' → logprob: -22.000072479248047

Token 126: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.014278686605393887
    2. ' ):' → logprob: -4.264278888702393
    3. ')' → logprob: -9.639278411865234
    4. '):
' → logprob: -10.264278411865234
    5. ':' → logprob: -11.764278411865234
    6. ' )' → logprob: -13.139278411865234
    7. ' ' → logprob: -13.389278411865234
    8. ' ):
' → logprob: -14.264278411865234
    9. '>:' → logprob: -14.514278411865234
    10. '():' → logprob: -14.639278411865234

Token 127: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.9786301851272583
    2. ':' → logprob: -1.2286301851272583
    3. '
' → logprob: -2.1036300659179688
    4. ':
' → logprob: -2.2286300659179688
    5. ':return' → logprob: -2.6036300659179688
    6. '   ' → logprob: -4.478630065917969
    7. ' return' → logprob: -4.728630065917969
    8. 'return' → logprob: -6.353630065917969
    9. ' :' → logprob: -7.103630065917969
    10. ' :
' → logprob: -7.353630065917969

Token 128: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.11736304312944412
    2. '       ' → logprob: -2.7423629760742188
    3. ' return' → logprob: -3.1173629760742188
    4. '   ' → logprob: -6.367362976074219
    5. '
' → logprob: -8.617362976074219
    6. 'r' → logprob: -9.617362976074219
    7. '	return' → logprob: -10.492362976074219
    8. ' ' → logprob: -11.492362976074219
    9. ':return' → logprob: -11.867362976074219
    10. 'result' → logprob: -12.117362976074219

Token 129: ' compute' (ID: 23864)
  Prédit: ' compute'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' compute' → logprob: -0.01648496650159359
    2. 'compute' → logprob: -4.14148473739624
    3. ' r' → logprob: -7.89148473739624
    4. 'r' → logprob: -9.641485214233398
    5. ' ' → logprob: -12.016485214233398
    6. ' ' → logprob: -12.641485214233398
    7. ' computer' → logprob: -14.391485214233398
    8. '_compute' → logprob: -14.641485214233398
    9. ' calculate' → logprob: -14.766485214233398
    10. '   ' → logprob: -15.516485214233398

Token 130: '_r' (ID: 3442)
  Prédit: '_r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_r' → logprob: -0.0008403576212003827
    2. '_' → logprob: -7.125840187072754
    3. ' _' → logprob: -10.750840187072754
    4. '_s' → logprob: -13.125840187072754
    5. 'r' → logprob: -13.250840187072754
    6. '__' → logprob: -13.375840187072754
    7. '_R' → logprob: -13.500840187072754
    8. '```' → logprob: -13.625840187072754
    9. '_f' → logprob: -14.000840187072754
    10. '_n' → logprob: -14.375840187072754

Token 131: '_if' (ID: 25821)
  Prédit: '_if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_if' → logprob: -2.339278580620885e-06
    2. '_' → logprob: -14.500001907348633
    3. '_IF' → logprob: -15.250001907348633
    4. ' _' → logprob: -15.250001907348633
    5. '(_' → logprob: -15.375001907348633
    6. '_else' → logprob: -15.375001907348633
    7. '(' → logprob: -15.500001907348633
    8. 'If' → logprob: -15.625001907348633
    9. ' if' → logprob: -16.375001907348633
    10. 'if' → logprob: -16.500001907348633

Token 132: '_n' (ID: 2170)
  Prédit: '_n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_n' → logprob: -0.00016671013145241886
    2. '_' → logprob: -9.125166893005371
    3. '_gt' → logprob: -9.875166893005371
    4. ' _' → logprob: -12.750166893005371
    5. '_nt' → logprob: -14.875166893005371
    6. '_r' → logprob: -14.875166893005371
    7. '```' → logprob: -15.000166893005371
    8. 'n' → logprob: -15.125166893005371
    9. '_lt' → logprob: -15.500166893005371
    10. '_regular' → logprob: -15.750166893005371

Token 133: '_gt' (ID: 87310)
  Prédit: '_gt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_gt' → logprob: -4.1557283111615106e-05
    2. '_' → logprob: -10.625041961669922
    3. 'gt' → logprob: -12.250041961669922
    4. '_g' → logprob: -12.250041961669922
    5. ' _' → logprob: -12.875041961669922
    6. '_lt' → logprob: -13.625041961669922
    7. '>' → logprob: -13.875041961669922
    8. '(_' → logprob: -14.625041961669922
    9. '(gt' → logprob: -15.250041961669922
    10. '__' → logprob: -15.375041961669922

Token 134: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -7.302704761968926e-05
    2. ' _' → logprob: -10.375073432922363
    3. '_n' → logprob: -11.375073432922363
    4. '_gt' → logprob: -11.500073432922363
    5. '__' → logprob: -12.000073432922363
    6. '_
' → logprob: -12.875073432922363
    7. '10' → logprob: -13.000073432922363
    8. ' ' → logprob: -13.375073432922363
    9. '_t' → logprob: -14.000073432922363
    10. '_

' → logprob: -14.625073432922363

Token 135: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.001088662538677454
    2. '_' → logprob: -7.001088619232178
    3. ' ' → logprob: -8.876089096069336
    4. '1' → logprob: -10.501089096069336
    5. 'n' → logprob: -12.751089096069336
    6. '-' → logprob: -13.251089096069336
    7. 'r' → logprob: -13.626089096069336
    8. '>' → logprob: -14.563589096069336
    9. '```' → logprob: -14.813589096069336
    10. '  ' → logprob: -15.001089096069336

Token 136: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.02394290640950203
    2. '(' → logprob: -3.7739429473876953
    3. ' (' → logprob: -7.773942947387695
    4. '_' → logprob: -9.398942947387695
    5. '(r' → logprob: -9.398942947387695
    6. '(
' → logprob: -10.023942947387695
    7. ' ' → logprob: -10.773942947387695
    8. '_(' → logprob: -10.773942947387695
    9. '(_' → logprob: -12.773942947387695
    10. 'r' → logprob: -12.773942947387695

Token 137: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0019341122824698687
    2. ',r' → logprob: -6.251934051513672
    3. ' ,' → logprob: -13.501934051513672
    4. ',
' → logprob: -13.751934051513672
    5. ')' → logprob: -14.501934051513672
    6. 'r' → logprob: -14.876934051513672
    7. '‌,' → logprob: -15.001934051513672
    8. ' ' → logprob: -15.001934051513672
    9. '<|end|>' → logprob: -15.126934051513672
    10. '   ' → logprob: -15.251934051513672

Token 138: ' r' (ID: 428)
  Prédit: ' r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' r' → logprob: -0.010438450612127781
    2. 'r' → logprob: -4.635438442230225
    3. ' ' → logprob: -7.510438442230225
    4. ')' → logprob: -9.135438919067383
    5. ' )' → logprob: -12.260438919067383
    6. '"' → logprob: -12.385438919067383
    7. '_r' → logprob: -12.510438919067383
    8. ''' → logprob: -12.635438919067383
    9. 's' → logprob: -13.010438919067383
    10. '	r' → logprob: -13.260438919067383

Token 139: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.018178390339016914
    2. ')
' → logprob: -4.018178462982178
    3. '   ' → logprob: -11.14317798614502
    4. ')
' → logprob: -11.39317798614502
    5. ')

' → logprob: -13.39317798614502
    6. ' )' → logprob: -14.14317798614502
    7. ' ' → logprob: -14.76817798614502
    8. ' )
' → logprob: -16.268178939819336
    9. ')\
' → logprob: -17.518178939819336
    10. ')`' → logprob: -18.268178939819336

Token 140: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00665355334058404
    2. '
' → logprob: -5.381653785705566
    3. '    
' → logprob: -6.756653785705566
    4. ' else' → logprob: -7.506653785705566
    5. 'else' → logprob: -8.131653785705566
    6. '	else' → logprob: -11.131653785705566
    7. '  
' → logprob: -13.256653785705566
    8. '	
' → logprob: -13.631653785705566
    9. '   
' → logprob: -13.756653785705566
    10. '\n' → logprob: -13.881653785705566

Token 141: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.18277622759342194
    2. 'else' (adapté à ' else') → logprob: -1.9327762126922607
    3. '   ' → logprob: -3.8077762126922607
    4. '
' → logprob: -9.80777645111084
    5. '	else' → logprob: -10.18277645111084
    6. '    
' → logprob: -12.55777645111084
    7. ' ' → logprob: -12.80777645111084
    8. 'return' → logprob: -14.68277645111084
    9. 'e' → logprob: -14.80777645111084
    10. ' return' → logprob: -15.18277645111084

Token 142: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.018396329134702682
    2. ':
' → logprob: -4.018396377563477
    3. ':return' → logprob: -8.643396377563477
    4. '       ' → logprob: -9.768396377563477
    5. '   ' → logprob: -12.268396377563477
    6. ':

' → logprob: -13.893396377563477
    7. '(' → logprob: -13.893396377563477
    8. ' :' → logprob: -14.143396377563477
    9. '():
' → logprob: -14.268396377563477
    10. ' return' → logprob: -14.268396377563477

Token 143: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.25824424624443054
    2. ' return' → logprob: -1.508244276046753
    3. '   ' → logprob: -5.508244037628174
    4. 'return' → logprob: -6.133244037628174
    5. ' compute' → logprob: -10.133244514465332
    6. '    ' → logprob: -11.758244514465332
    7. '     ' → logprob: -12.383244514465332
    8. '	return' → logprob: -12.633244514465332
    9. 'compute' → logprob: -12.633244514465332
    10. '      ' → logprob: -12.883244514465332

Token 144: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.16023671627044678
    2. ' return' → logprob: -1.9102367162704468
    3. '   ' → logprob: -11.910236358642578
    4. 'compute' → logprob: -12.660236358642578
    5. '       ' → logprob: -13.410236358642578
    6. ' compute' → logprob: -14.785236358642578
    7. ' ' → logprob: -14.785236358642578
    8. '	return' → logprob: -16.035236358642578
    9. 'calculate' → logprob: -16.660236358642578
    10. '{return' → logprob: -16.660236358642578

Token 145: ' compute' (ID: 23864)
  Prédit: ' compute'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' compute' → logprob: -0.001502598519437015
    2. 'compute' → logprob: -6.501502513885498
    3. ' calculate' → logprob: -15.501502990722656
    4. ' ' → logprob: -17.126502990722656
    5. '_compute' → logprob: -17.626502990722656
    6. '.compute' → logprob: -18.376502990722656
    7. ' ' → logprob: -18.626502990722656
    8. ' computer' → logprob: -20.876502990722656
    9. '(com' → logprob: -21.001502990722656
    10. 'calculate' → logprob: -21.001502990722656

Token 146: '_r' (ID: 3442)
  Prédit: '_r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_r' → logprob: -5.5577775128767826e-06
    2. '_' → logprob: -12.250005722045898
    3. ' _' → logprob: -15.375005722045898
    4. 'r' → logprob: -15.375005722045898
    5. '_R' → logprob: -16.7500057220459
    6. '```' → logprob: -16.8750057220459
    7. '_c' → logprob: -18.0000057220459
    8. '_compute' → logprob: -18.1250057220459
    9. ')_' → logprob: -18.2500057220459
    10. '_s' → logprob: -18.5000057220459

Token 147: '_else' (ID: 148349)
  Prédit: '_else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_else' → logprob: -4.246537173457909e-06
    2. '_' → logprob: -12.625003814697266
    3. 'else' → logprob: -14.500003814697266
    4. '_except' → logprob: -16.000003814697266
    5. ' _' → logprob: -17.000003814697266
    6. '_continue' → logprob: -17.500003814697266
    7. '_less' → logprob: -18.375003814697266
    8. '_other' → logprob: -18.500003814697266
    9. '_if' → logprob: -18.500003814697266
    10. '_here' → logprob: -18.750003814697266

Token 148: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0007395883440040052
    2. '(' → logprob: -7.250739574432373
    3. ' (' → logprob: -10.625740051269531
    4. '(
' → logprob: -12.500740051269531
    5. ' ' → logprob: -14.750740051269531
    6. '   ' → logprob: -15.250740051269531
    7. '```' → logprob: -15.250740051269531
    8. '(

' → logprob: -15.875740051269531
    9. '<|end|>' → logprob: -16.50074005126953
    10. ')(' → logprob: -16.75074005126953

Token 149: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0016557788476347923
    2. ',r' → logprob: -6.876655578613281
    3. ' ,' → logprob: -7.876655578613281
    4. ')' → logprob: -8.376655578613281
    5. 'r' → logprob: -12.126655578613281
    6. ',
' → logprob: -12.626655578613281
    7. ',n' → logprob: -13.126655578613281
    8. ' ' → logprob: -13.876655578613281
    9. ' r' → logprob: -14.751655578613281
    10. '   ' → logprob: -15.126655578613281

Token 150: ' r' (ID: 428)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.4285931885242462
    2. 'n' → logprob: -1.4285931587219238
    3. ' r' → logprob: -2.803593158721924
    4. ' n' → logprob: -3.053593158721924
    5. ')' → logprob: -6.928593158721924
    6. ' ' → logprob: -9.428593635559082
    7. '   ' → logprob: -10.303593635559082
    8. '  ' → logprob: -10.928593635559082
    9. ' )' → logprob: -11.553593635559082
    10. ')n' → logprob: -11.678593635559082

Token 151: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.742448022123426e-05
    2. ')
' → logprob: -9.625067710876465
    3. '   ' → logprob: -14.500067710876465
    4. ' )' → logprob: -14.750067710876465
    5. ')

' → logprob: -15.375067710876465
    6. '<|end|>' → logprob: -16.12506675720215
    7. ')
' → logprob: -17.25006675720215
    8. ')#' → logprob: -17.25006675720215
    9. '())' → logprob: -17.75006675720215
    10. ')return' → logprob: -17.87506675720215

Token 152: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.00013047587708570063
    2. 'if' → logprob: -9.500130653381348
    3. 'print' → logprob: -10.750130653381348
    4. '```' → logprob: -11.625130653381348
    5. 'user' → logprob: -12.125130653381348
    6. 'n' → logprob: -12.250130653381348
    7. '\' → logprob: -12.375130653381348
    8. '\n' → logprob: -12.875130653381348
    9. 'input' → logprob: -13.250130653381348
    10. '#' → logprob: -13.625130653381348

Token 153: ' output' (ID: 4733)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.47409141063690186
    2. 'main' → logprob: -0.9740914106369019
    3. 'def' → logprob: -11.724091529846191
    4. ' run' → logprob: -13.599091529846191
    5. 'run' → logprob: -13.599091529846191
    6. ' def' → logprob: -14.099091529846191
    7. '_main' → logprob: -14.224091529846191
    8. 'process' → logprob: -14.599091529846191
    9. '	main' → logprob: -14.974091529846191
    10. 'solve' → logprob: -14.974091529846191

Token 154: '_result' (ID: 11623)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.06639066338539124
    2. '_' → logprob: -3.5663907527923584
    3. '(R' → logprob: -3.6913907527923584
    4. '_result' → logprob: -5.691390514373779
    5. '(_' → logprob: -6.441390514373779
    6. '_R' → logprob: -6.566390514373779
    7. '_(' → logprob: -6.816390514373779
    8. '(value' → logprob: -7.066390514373779
    9. '(result' → logprob: -7.191390514373779
    10. '_value' → logprob: -7.566390514373779

Token 155: '(R' (ID: 4092)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.27205049991607666
    2. '(result' → logprob: -1.5220504999160767
    3. '(output' → logprob: -4.647050380706787
    4. '(R' → logprob: -5.272050380706787
    5. '(value' → logprob: -6.397050380706787
    6. '(r' → logprob: -6.522050380706787
    7. '(results' → logprob: -7.397050380706787
    8. '(user' → logprob: -7.772050380706787
    9. '(n' → logprob: -8.397050857543945
    10. ' (' → logprob: -8.772050857543945

Token 156: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.005960322450846434
    2. ')' → logprob: -5.255960464477539
    3. '):
' → logprob: -7.255960464477539
    4. ' ):' → logprob: -11.880960464477539
    5. '):
' → logprob: -12.005960464477539
    6. ':' → logprob: -13.005960464477539
    7. '):

' → logprob: -13.130960464477539
    8. '   ' → logprob: -14.505960464477539
    9. ')：' → logprob: -14.755960464477539
    10. ')):' → logprob: -15.255960464477539

Token 157: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00035333906998857856
    2. ' print' → logprob: -8.000353813171387
    3. 'print' → logprob: -11.000353813171387
    4. '   ' → logprob: -13.875353813171387
    5. '```' → logprob: -15.625353813171387
    6. '    
' → logprob: -16.37535285949707
    7. '   ' → logprob: -18.12535285949707
    8. '	print' → logprob: -18.37535285949707
    9. '    ' → logprob: -18.37535285949707
    10. '       ' → logprob: -18.37535285949707

Token 158: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.1305236965417862
    2. 'print' (adapté à ' print') → logprob: -2.130523681640625
    3. '   ' → logprob: -5.630523681640625
    4. '```' → logprob: -13.255523681640625
    5. '    ' → logprob: -15.005523681640625
    6. ' return' → logprob: -15.880523681640625
    7. '	print' → logprob: -15.880523681640625
    8. ' prin' → logprob: -16.755523681640625
    9. 'pr' → logprob: -16.880523681640625
    10. '    
' → logprob: -17.255523681640625

Token 159: '(R' (ID: 4092)
  Prédit: '(R'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(R' → logprob: -0.0010342379100620747
    2. '(' → logprob: -6.876034259796143
    3. '()' → logprob: -14.001033782958984
    4. 'R' → logprob: -15.251033782958984
    5. '(f' → logprob: -16.376033782958984
    6. '(
' → logprob: -16.376033782958984
    7. '((' → logprob: -16.501033782958984
    8. '(`' → logprob: -18.001033782958984
    9. '(F' → logprob: -18.126033782958984
    10. '(r' → logprob: -18.251033782958984

Token 160: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.9361264946837764e-07
    2. ')
' → logprob: -16.0
    3. ' )' → logprob: -17.375
    4. ')`' → logprob: -18.0
    5. '))' → logprob: -18.5
    6. '()' → logprob: -19.25
    7. ')}' → logprob: -19.625
    8. '())' → logprob: -19.875
    9. '')' → logprob: -20.0
    10. '),' → logprob: -20.0

Token 161: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -2.7848862373502925e-05
    2. 'if' → logprob: -10.500027656555176
    3. 'for' → logprob: -15.125027656555176
    4. ' def' → logprob: -17.875028610229492
    5. 'while' → logprob: -18.625028610229492
    6. '#' → logprob: -18.750028610229492
    7. '```' → logprob: -20.250028610229492
    8. 'user' → logprob: -20.375028610229492
    9. 'print' → logprob: -21.500028610229492
    10. 'ndef' → logprob: -21.750028610229492

Token 162: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.002480412134900689
    2. ' main' → logprob: -6.002480506896973
    3. 'run' → logprob: -12.877480506896973
    4. 'def' → logprob: -13.127480506896973
    5. ' run' → logprob: -17.002479553222656
    6. 'process' → logprob: -17.502479553222656
    7. '_main' → logprob: -18.252479553222656
    8. '__' → logprob: -18.627479553222656
    9. '	main' → logprob: -18.627479553222656
    10. 'if' → logprob: -18.877479553222656

Token 163: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -1.843177233240567e-05
    2. '():
' → logprob: -11.625018119812012
    3. ' ():' → logprob: -11.750018119812012
    4. '()' → logprob: -14.000018119812012
    5. '(' → logprob: -14.875018119812012
    6. '_' → logprob: -15.500018119812012
    7. '():
' → logprob: -16.875019073486328
    8. '()>' → logprob: -18.125019073486328
    9. '():

' → logprob: -18.875019073486328
    10. ':' → logprob: -18.875019073486328

Token 164: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.022689979523420334
    2. ' user' → logprob: -3.8976900577545166
    3. 'user' → logprob: -6.1476898193359375
    4. '	user' → logprob: -13.147689819335938
    5. '   ' → logprob: -13.147689819335938
    6. 'input' → logprob: -14.022689819335938
    7. '       ' → logprob: -14.397689819335938
    8. ' input' → logprob: -14.522689819335938
    9. '    
' → logprob: -14.522689819335938
    10. '
' → logprob: -15.272689819335938

Token 165: ' user' (ID: 1825)
  Prédit: 'user'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'user' (adapté à ' user') → logprob: -0.007157546002417803
    2. ' user' → logprob: -5.007157325744629
    3. '   ' → logprob: -7.757157325744629
    4. 'vals' → logprob: -12.757157325744629
    5. 'input' → logprob: -12.882157325744629
    6. 'raw' → logprob: -13.257157325744629
    7. 'inputs' → logprob: -13.632157325744629
    8. '
' → logprob: -13.757157325744629
    9. '	user' → logprob: -13.882157325744629
    10. '    
' → logprob: -13.882157325744629

Token 166: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.0019398193107917905
    2. '_' → logprob: -6.25193977355957
    3. '_user' → logprob: -12.12693977355957
    4. ' _' → logprob: -12.37693977355957
    5. '_in' → logprob: -14.12693977355957
    6. '_output' → logprob: -15.37693977355957
    7. '_Input' → logprob: -16.12693977355957
    8. '_inputs' → logprob: -16.37693977355957
    9. '_data' → logprob: -16.50193977355957
    10. '__' → logprob: -16.75193977355957

Token 167: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.009844746440649033
    2. '=' → logprob: -4.634844779968262
    3. '()' → logprob: -9.384844779968262
    4. '(' → logprob: -12.759844779968262
    5. ' ' → logprob: -13.884844779968262
    6. ' ()' → logprob: -14.759844779968262
    7. ')' → logprob: -15.509844779968262
    8. '   ' → logprob: -16.009843826293945
    9. '_' → logprob: -16.509843826293945
    10. '	' → logprob: -16.634843826293945

Token 168: ' read' (ID: 1729)
  Prédit: 'read'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'read' → logprob: -0.38688117265701294
    2. ' read' → logprob: -1.1368811130523682
    3. 'input' → logprob: -12.261880874633789
    4. ' input' → logprob: -12.261880874633789
    5. '	read' → logprob: -14.886880874633789
    6. '(read' → logprob: -15.636880874633789
    7. ' ' → logprob: -16.01188087463379
    8. '   ' → logprob: -18.13688087463379
    9. ' readline' → logprob: -18.63688087463379
    10. '  ' → logprob: -18.88688087463379

Token 169: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.000826421775855124
    2. '_' → logprob: -7.500826358795166
    3. '_user' → logprob: -8.250826835632324
    4. '_output' → logprob: -12.750826835632324
    5. '()' → logprob: -13.375826835632324
    6. '_line' → logprob: -13.750826835632324
    7. 'input' → logprob: -13.875826835632324
    8. ' _' → logprob: -14.125826835632324
    9. '_Input' → logprob: -14.250826835632324
    10. '_inputs' → logprob: -14.375826835632324

Token 170: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -1.2352385965641588e-05
    2. '()
' → logprob: -11.500012397766113
    3. '(' → logprob: -14.000012397766113
    4. '()

' → logprob: -14.000012397766113
    5. ' ()' → logprob: -15.375012397766113
    6. '().' → logprob: -16.625011444091797
    7. '()`' → logprob: -16.875011444091797
    8. '()\' → logprob: -17.500011444091797
    9. '()"' → logprob: -17.750011444091797
    10. '();' → logprob: -17.750011444091797

Token 171: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13123473525047302
    2. '
' → logprob: -2.756234645843506
    3. '    
' → logprob: -3.881234645843506
    4. 'tokens' → logprob: -4.381234645843506
    5. 'vals' → logprob: -4.756234645843506
    6. 'user' → logprob: -5.131234645843506
    7. '  
' → logprob: -5.506234645843506
    8. 'split' → logprob: -6.506234645843506
    9. '   
' → logprob: -6.881234645843506
    10. ' 
' → logprob: -6.881234645843506

Token 172: ' split' (ID: 12648)
  Prédit: 'vals'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'vals' → logprob: -0.45256710052490234
    2. ' vals' → logprob: -1.4525671005249023
    3. ' values' → logprob: -3.7025671005249023
    4. 'values' → logprob: -3.7025671005249023
    5. 'split' (adapté à ' split') → logprob: -3.7025671005249023
    6. 'str' → logprob: -4.452567100524902
    7. '   ' → logprob: -4.702567100524902
    8. 'tokens' → logprob: -4.827567100524902
    9. ' parts' → logprob: -5.077567100524902
    10. ' split' → logprob: -5.202567100524902

Token 173: '_vals' (ID: 71688)
  Prédit: '_input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.002031657611951232
    2. '_user' → logprob: -6.6270318031311035
    3. '_' → logprob: -7.7520318031311035
    4. 'ed' → logprob: -8.752031326293945
    5. '_output' → logprob: -9.252031326293945
    6. '_result' → logprob: -12.002031326293945
    7. '_line' → logprob: -12.877031326293945
    8. '_inputs' → logprob: -13.127031326293945
    9. '_in' → logprob: -13.627031326293945
    10. 'd' → logprob: -13.877031326293945

Token 174: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.3010191023349762
    2. ' =' → logprob: -1.4260190725326538
    3. 'ed' → logprob: -4.926019191741943
    4. '=user' → logprob: -5.051019191741943
    5. '_' → logprob: -6.176019191741943
    6. '(user' → logprob: -6.301019191741943
    7. '_user' → logprob: -7.051019191741943
    8. '   ' → logprob: -7.676019191741943
    9. 'user' → logprob: -7.926019191741943
    10. 's' → logprob: -8.801018714904785

Token 175: ' split' (ID: 12648)
  Prédit: 'split'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.25193482637405396
    2. ' split' → logprob: -1.5019347667694092
    3. '(split' → logprob: -12.126935005187988
    4. ' ' → logprob: -16.001934051513672
    5. 'plit' → logprob: -16.251934051513672
    6. '.split' → logprob: -16.751934051513672
    7. 'spl' → logprob: -16.876934051513672
    8. '_split' → logprob: -17.001934051513672
    9. '   ' → logprob: -17.751934051513672
    10. 's' → logprob: -18.251934051513672

Token 176: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -1.0564331205387134e-05
    2. '_user' → logprob: -11.75001049041748
    3. 'input' → logprob: -13.12501049041748
    4. '_' → logprob: -15.12501049041748
    5. '(input' → logprob: -15.87501049041748
    6. '_inputs' → logprob: -16.125011444091797
    7. 'user' → logprob: -16.375011444091797
    8. '_output' → logprob: -17.250011444091797
    9. '(user' → logprob: -17.625011444091797
    10. '```' → logprob: -18.625011444091797

Token 177: '(user' (ID: 7195)
  Prédit: '(user'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(user' → logprob: -3.5716304410016164e-05
    2. '(' → logprob: -10.250035285949707
    3. 'user' → logprob: -16.125036239624023
    4. '(use' → logprob: -17.125036239624023
    5. ' (' → logprob: -17.250036239624023
    6. '(users' → logprob: -17.875036239624023
    7. '(us' → logprob: -18.000036239624023
    8. '(input' → logprob: -18.125036239624023
    9. '(u' → logprob: -18.375036239624023
    10. '(split' → logprob: -18.750036239624023

Token 178: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.012979383580386639
    2. 'put' → logprob: -4.637979507446289
    3. 'input' → logprob: -5.762979507446289
    4. 'ut' → logprob: -10.512979507446289
    5. 'puts' → logprob: -10.887979507446289
    6. 's' → logprob: -12.637979507446289
    7. '(input' → logprob: -12.637979507446289
    8. ' input' → logprob: -12.762979507446289
    9. '_' → logprob: -12.762979507446289
    10. ')' → logprob: -12.887979507446289

Token 179: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.006486096419394016
    2. '(user' → logprob: -5.131485939025879
    3. ')
' → logprob: -8.131485939025879
    4. '   ' → logprob: -8.381485939025879
    5. '(' → logprob: -11.131485939025879
    6. 'user' → logprob: -11.756485939025879
    7. ' ' → logprob: -12.381485939025879
    8. ',' → logprob: -13.381485939025879
    9. '=user' → logprob: -13.506485939025879
    10. ',user' → logprob: -13.631485939025879

Token 180: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04186509549617767
    2. 'vals' → logprob: -3.916865110397339
    3. '
' → logprob: -4.54186487197876
    4. 'ints' → logprob: -5.41686487197876
    5. 'converted' → logprob: -5.79186487197876
    6. '    
' → logprob: -6.79186487197876
    7. ' vals' → logprob: -7.29186487197876
    8. 'int' → logprob: -8.416865348815918
    9. ' converted' → logprob: -8.541865348815918
    10. ' ints' → logprob: -9.166865348815918

Token 181: ' n' (ID: 297)
  Prédit: 'ints'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ints' → logprob: -0.41884931921958923
    2. 'int' → logprob: -2.043849229812622
    3. 'vals' → logprob: -2.168849229812622
    4. ' ints' → logprob: -2.668849229812622
    5. ' int' → logprob: -4.793849468231201
    6. ' vals' → logprob: -5.043849468231201
    7. '   ' → logprob: -5.543849468231201
    8. 'nums' → logprob: -5.668849468231201
    9. 'converted' → logprob: -5.668849468231201
    10. 'intval' → logprob: -7.543849468231201

Token 182: '_r' (ID: 3442)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.37827855348587036
    2. ',' → logprob: -1.2532784938812256
    3. '_vals' → logprob: -3.7532784938812256
    4. ' ,' → logprob: -5.628278732299805
    5. '=' → logprob: -6.628278732299805
    6. '_' → logprob: -8.128278732299805
    7. ',_' → logprob: -8.253278732299805
    8. 's' → logprob: -8.878278732299805
    9. '_values' → logprob: -9.128278732299805
    10. ' ' → logprob: -9.628278732299805

Token 183: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.06082328408956528
    2. 's' → logprob: -3.0608232021331787
    3. '=' → logprob: -5.060823440551758
    4. '_vals' → logprob: -5.185823440551758
    5. 'ist' → logprob: -9.810823440551758
    6. ' ' → logprob: -9.935823440551758
    7. '_values' → logprob: -9.935823440551758
    8. '_list' → logprob: -10.560823440551758
    9. 'vals' → logprob: -10.935823440551758
    10. 'ists' → logprob: -11.935823440551758

Token 184: ' convert' (ID: 8452)
  Prédit: 'convert'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'convert' → logprob: -0.3868747651576996
    2. ' convert' → logprob: -1.136874794960022
    3. '(convert' → logprob: -12.88687515258789
    4. '_convert' → logprob: -14.88687515258789
    5. '.convert' → logprob: -15.13687515258789
    6. '[' → logprob: -15.51187515258789
    7. '   ' → logprob: -15.51187515258789
    8. 'split' → logprob: -15.76187515258789
    9. ' split' → logprob: -18.13687515258789
    10. ' ' → logprob: -18.38687515258789

Token 185: '_to' (ID: 5089)
  Prédit: '_to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_to' → logprob: -1.9361264946837764e-07
    2. '_' → logprob: -17.0
    3. '_t' → logprob: -17.875
    4. '##_' → logprob: -19.0
    5. ' _' → logprob: -19.125
    6. '```' → logprob: -19.25
    7. '_of' → logprob: -19.625
    8. '_into' → logprob: -19.875
    9. 'to' → logprob: -19.875
    10. 's' → logprob: -19.875

Token 186: '_int' (ID: 12285)
  Prédit: '_int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.02813347987830639
    2. 'int' → logprob: -4.278133392333984
    3. 'ints' → logprob: -4.278133392333984
    4. 'Ints' → logprob: -13.278133392333984
    5. 'Int' → logprob: -14.778133392333984
    6. '_' → logprob: -14.903133392333984
    7. '```' → logprob: -15.278133392333984
    8. ' ints' → logprob: -15.528133392333984
    9. '_str' → logprob: -16.028133392333984
    10. '_list' → logprob: -16.028133392333984

Token 187: 's' (ID: 82)
  Prédit: 's'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -7.896309739408025e-07
    2. ' s' → logprob: -15.000000953674316
    3. '(s' → logprob: -15.500000953674316
    4. '_s' → logprob: -15.625000953674316
    5. 'ints' → logprob: -17.0
    6. '{s' → logprob: -18.5
    7. 'int' → logprob: -18.625
    8. '```' → logprob: -19.0
    9. '[s' → logprob: -19.25
    10. 'ss' → logprob: -19.375

Token 188: '(split' (ID: 74985)
  Prédit: '(split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(split' → logprob: -0.001929228543303907
    2. '(' → logprob: -6.25192928314209
    3. ' (' → logprob: -15.50192928314209
    4. '(
' → logprob: -16.376928329467773
    5. '(s' → logprob: -16.376928329467773
    6. '(open' → logprob: -16.876928329467773
    7. '(skip' → logprob: -17.251928329467773
    8. '(sp' → logprob: -17.376928329467773
    9. '((' → logprob: -17.876928329467773
    10. '(strip' → logprob: -18.126928329467773

Token 189: '_vals' (ID: 71688)
  Prédit: '_vals'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_vals' → logprob: -3.054500666621607e-06
    2. '_val' → logprob: -13.37500286102295
    3. 'vals' → logprob: -14.00000286102295
    4. '(vals' → logprob: -14.50000286102295
    5. '_' → logprob: -15.87500286102295
    6. '_v' → logprob: -17.875003814697266
    7. ' _' → logprob: -18.625003814697266
    8. 's' → logprob: -18.750003814697266
    9. 'Vals' → logprob: -18.875003814697266
    10. '(_' → logprob: -18.875003814697266

Token 190: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00018101456225849688
    2. ')
' → logprob: -8.625181198120117
    3. '()' → logprob: -14.375181198120117
    4. ')

' → logprob: -15.000181198120117
    5. '())' → logprob: -15.125181198120117
    6. ' )' → logprob: -15.875181198120117
    7. '   ' → logprob: -16.875181198120117
    8. ' ' → logprob: -17.250181198120117
    9. '))' → logprob: -17.750181198120117
    10. ')n' → logprob: -17.750181198120117

Token 191: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.23849016427993774
    2. '
' → logprob: -1.738490104675293
    3. 'n' → logprob: -4.113490104675293
    4. '    
' → logprob: -4.113490104675293
    5. '	n' → logprob: -6.238490104675293
    6. '  
' → logprob: -7.863490104675293
    7. ' n' → logprob: -8.113490104675293
    8. '(n' → logprob: -8.363490104675293
    9. '[' → logprob: -8.738490104675293
    10. ' 
' → logprob: -8.988490104675293

Token 192: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' (adapté à ' n') → logprob: -0.0013273799559101462
    2. ' n' → logprob: -6.6263275146484375
    3. '   ' → logprob: -13.626327514648438
    4. '	n' → logprob: -16.501327514648438
    5. '
' → logprob: -16.626327514648438
    6. '_n' → logprob: -17.001327514648438
    7. '```' → logprob: -17.001327514648438
    8. '    
' → logprob: -17.876327514648438
    9. ' ' → logprob: -18.376327514648438
    10. '  ' → logprob: -19.126327514648438

Token 193: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.3189656734466553
    2. ',' → logprob: -1.3189656734466553
    3. '=' → logprob: -5.193965911865234
    4. ' ,' → logprob: -8.943965911865234
    5. ',n' → logprob: -13.318965911865234
    6. '_' → logprob: -13.443965911865234
    7. ')' → logprob: -13.943965911865234
    8. ' ' → logprob: -14.193965911865234
    9. 's' → logprob: -15.068965911865234
    10. ' =
' → logprob: -15.193965911865234

Token 194: ' get' (ID: 717)
  Prédit: ' get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.0089618731290102
    2. 'get' → logprob: -4.7589616775512695
    3. ' n' → logprob: -8.00896167755127
    4. 'n' → logprob: -11.13396167755127
    5. '(get' → logprob: -16.758962631225586
    6. '=get' → logprob: -18.133962631225586
    7. '	get' → logprob: -18.258962631225586
    8. '_get' → logprob: -18.508962631225586
    9. '.get' → logprob: -19.133962631225586
    10. ')get' → logprob: -19.508962631225586

Token 195: '_n' (ID: 2170)
  Prédit: '_n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_n' → logprob: -1.9361264946837764e-07
    2. '_' → logprob: -15.625
    3. '_r' → logprob: -20.5
    4. 'n' → logprob: -21.0
    5. ' _' → logprob: -22.875
    6. '_
' → logprob: -23.0
    7. '```' → logprob: -23.125
    8. '_a' → logprob: -23.625
    9. '\' → logprob: -23.75
    10. '_i' → logprob: -24.125

Token 196: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -7.493430894101039e-05
    2. '(' → logprob: -9.500075340270996
    3. '(
' → logprob: -19.00007438659668
    4. ' (' → logprob: -19.25007438659668
    5. 'n' → logprob: -19.37507438659668
    6. '(

' → logprob: -20.37507438659668
    7. '()' → logprob: -21.75007438659668
    8. '\(' → logprob: -21.75007438659668
    9. '(i' → logprob: -22.75007438659668
    10. ' n' → logprob: -23.00007438659668

Token 197: '_r' (ID: 3442)
  Prédit: '_r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_r' → logprob: -0.0014259485760703683
    2. ')' → logprob: -6.626425743103027
    3. '_)' → logprob: -9.251425743103027
    4. '_' → logprob: -13.376425743103027
    5. '_n' → logprob: -14.251425743103027
    6. 'r' → logprob: -14.501425743103027
    7. '[' → logprob: -14.751425743103027
    8. ')_' → logprob: -15.126425743103027
    9. ',' → logprob: -15.501425743103027
    10. ' _' → logprob: -16.501426696777344

Token 198: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.5759644508361816
    2. ')' → logprob: -0.8259644508361816
    3. ')
' → logprob: -11.075963973999023
    4. ')

' → logprob: -12.200963973999023
    5. '   ' → logprob: -12.825963973999023
    6. ' )
' → logprob: -13.700963973999023
    7. ')n' → logprob: -15.075963973999023
    8. ' )' → logprob: -15.825963973999023
    9. ' ' → logprob: -15.950963973999023
    10. '),' → logprob: -17.200963973999023

Token 199: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04329124465584755
    2. 'r' → logprob: -3.2932913303375244
    3. ' r' → logprob: -5.293291091918945
    4. '
' → logprob: -8.543291091918945
    5. '	r' → logprob: -11.418291091918945
    6. '    
' → logprob: -13.043291091918945
    7. ' ' → logprob: -14.043291091918945
    8. '_r' → logprob: -14.668291091918945
    9. '  ' → logprob: -15.043291091918945
    10. '```' → logprob: -15.418291091918945

Token 200: ' r' (ID: 428)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' (adapté à ' r') → logprob: -1.688212614681106e-05
    2. ' r' → logprob: -11.000017166137695
    3. '   ' → logprob: -16.125017166137695
    4. '_r' → logprob: -20.125017166137695
    5. '	r' → logprob: -20.375017166137695
    6. '```' → logprob: -20.750017166137695
    7. ' ' → logprob: -21.875017166137695
    8. '
' → logprob: -22.500017166137695
    9. ',r' → logprob: -22.625017166137695
    10. 'R' → logprob: -23.750017166137695

Token 201: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.004083266947418451
    2. '=' → logprob: -5.504083156585693
    3. ',' → logprob: -12.379083633422852
    4. ' ' → logprob: -14.504083633422852
    5. ' =
' → logprob: -17.37908363342285
    6. ' ,' → logprob: -17.62908363342285
    7. '_' → logprob: -17.75408363342285
    8. ')' → logprob: -17.87908363342285
    9. '   ' → logprob: -18.12908363342285
    10. '  ' → logprob: -18.37908363342285

Token 202: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.25192907452583313
    2. ' get' → logprob: -1.5019290447235107
    3. '_get' → logprob: -18.376928329467773
    4. '(get' → logprob: -19.001928329467773
    5. '	get' → logprob: -19.376928329467773
    6. '=get' → logprob: -19.751928329467773
    7. '[get' → logprob: -21.126928329467773
    8. '/get' → logprob: -21.251928329467773
    9. '.get' → logprob: -21.626928329467773
    10. '@get' → logprob: -22.501928329467773

Token 203: '_r' (ID: 3442)
  Prédit: '_r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_r' → logprob: -3.531315314830863e-06
    2. 'get' → logprob: -13.125003814697266
    3. '_n' → logprob: -13.500003814697266
    4. ' get' → logprob: -16.375003814697266
    5. 'r' → logprob: -17.375003814697266
    6. '(get' → logprob: -17.500003814697266
    7. '_' → logprob: -17.875003814697266
    8. '_s' → logprob: -19.750003814697266
    9. '_get' → logprob: -20.125003814697266
    10. '=get' → logprob: -20.875003814697266

Token 204: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -9.088346359931165e-07
    2. '(' → logprob: -14.125000953674316
    3. ' (' → logprob: -15.625000953674316
    4. 'n' → logprob: -19.25
    5. '(
' → logprob: -20.875
    6. '```' → logprob: -21.125
    7. ' ' → logprob: -21.5
    8. '
' → logprob: -21.875
    9. '   ' → logprob: -22.5
    10. '((' → logprob: -22.625

Token 205: '_r' (ID: 3442)
  Prédit: '_r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_r' → logprob: -1.6240566083070007e-06
    2. '_' → logprob: -14.625001907348633
    3. ' _' → logprob: -15.000001907348633
    4. ')' → logprob: -15.000001907348633
    5. 'r' → logprob: -15.625001907348633
    6. '_n' → logprob: -15.750001907348633
    7. '   ' → logprob: -16.000001907348633
    8. ' ' → logprob: -17.250001907348633
    9. '-r' → logprob: -17.250001907348633
    10. ')_' → logprob: -17.250001907348633

Token 206: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0003364158037584275
    2. ')
' → logprob: -8.000336647033691
    3. '   ' → logprob: -14.000336647033691
    4. ' )' → logprob: -15.750336647033691
    5. ')
' → logprob: -17.250335693359375
    6. ')

' → logprob: -18.000335693359375
    7. ')n' → logprob: -18.375335693359375
    8. ' ' → logprob: -19.250335693359375
    9. ')#' → logprob: -19.500335693359375
    10. '),' → logprob: -20.000335693359375

Token 207: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1024806872010231
    2. 'R' → logprob: -2.47748064994812
    3. '
' → logprob: -4.477480888366699
    4. ' R' → logprob: -6.727480888366699
    5. '    
' → logprob: -7.602480888366699
    6. '	R' → logprob: -9.1024808883667
    7. '```' → logprob: -9.6024808883667
    8. ' ' → logprob: -9.9774808883667
    9. '  
' → logprob: -10.8524808883667
    10. '    ' → logprob: -10.8524808883667

Token 208: ' R' (ID: 460)
  Prédit: 'R'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'R' (adapté à ' R') → logprob: -0.0009697027853690088
    2. ' R' → logprob: -7.125969886779785
    3. '   ' → logprob: -8.750969886779785
    4. 'r' → logprob: -12.750969886779785
    5. '	R' → logprob: -13.625969886779785
    6. ' ' → logprob: -13.750969886779785
    7. 'result' → logprob: -14.250969886779785
    8. '```' → logprob: -14.750969886779785
    9. '_R' → logprob: -14.875969886779785
    10. '       ' → logprob: -16.25096893310547

Token 209: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.01815076172351837
    2. '=' → logprob: -4.018150806427002
    3. ')' → logprob: -15.643150329589844
    4. ' =
' → logprob: -15.768150329589844
    5. ' ' → logprob: -15.893150329589844
    6. ',' → logprob: -16.393150329589844
    7. ' =)' → logprob: -16.643150329589844
    8. '<|end|>' → logprob: -16.643150329589844
    9. '_' → logprob: -16.768150329589844
    10. ' ' → logprob: -17.393150329589844

Token 210: ' calculate' (ID: 17950)
  Prédit: 'calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'calculate' → logprob: -0.061967913061380386
    2. ' calculate' → logprob: -2.8119678497314453
    3. '.calculate' → logprob: -16.186967849731445
    4. '   ' → logprob: -16.436967849731445
    5. 'alculate' → logprob: -18.436967849731445
    6. 'Calculate' → logprob: -19.436967849731445
    7. 'calc' → logprob: -19.561967849731445
    8. 'compute' → logprob: -19.811967849731445
    9. ' ' → logprob: -20.436967849731445
    10. ' calcular' → logprob: -20.686967849731445

Token 211: '_R' (ID: 5190)
  Prédit: '_R'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_R' → logprob: -6.988221684878226e-06
    2. '_' → logprob: -12.125006675720215
    3. '```' → logprob: -14.250006675720215
    4. 'R' → logprob: -14.875006675720215
    5. '(R' → logprob: -16.62500762939453
    6. '_Result' → logprob: -16.87500762939453
    7. '(_' → logprob: -16.87500762939453
    8. '(' → logprob: -17.00000762939453
    9. '_(' → logprob: -17.00000762939453
    10. ' _' → logprob: -17.25000762939453

Token 212: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.10021087527275085
    2. '(' → logprob: -2.3502109050750732
    3. ' (' → logprob: -12.850211143493652
    4. '(
' → logprob: -14.100211143493652
    5. '(N' → logprob: -15.100211143493652
    6. '((' → logprob: -15.475211143493652
    7. 'n' → logprob: -17.100210189819336
    8. '(

' → logprob: -17.100210189819336
    9. '\(' → logprob: -17.225210189819336
    10. ' ' → logprob: -17.350210189819336

Token 213: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.8312570318812504e-05
    2. ',r' → logprob: -11.000018119812012
    3. ' ,' → logprob: -13.500018119812012
    4. ')' → logprob: -16.125019073486328
    5. ',
' → logprob: -16.250019073486328
    6. ',R' → logprob: -16.750019073486328
    7. ',n' → logprob: -17.125019073486328
    8. 'r' → logprob: -18.375019073486328
    9. '   ' → logprob: -19.875019073486328
    10. ',

' → logprob: -19.875019073486328

Token 214: ' r' (ID: 428)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.12692810595035553
    2. ' r' → logprob: -2.1269280910491943
    3. '   ' → logprob: -17.501928329467773
    4. ' ' → logprob: -18.251928329467773
    5. '	r' → logprob: -19.626928329467773
    6. ')' → logprob: -20.251928329467773
    7. '_r' → logprob: -20.501928329467773
    8. '
' → logprob: -20.876928329467773
    9. '    ' → logprob: -21.001928329467773
    10. 's' → logprob: -21.126928329467773

Token 215: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -8.494741632603109e-05
    2. ')
' → logprob: -9.37508487701416
    3. ' )' → logprob: -17.000085830688477
    4. '   ' → logprob: -17.625085830688477
    5. ')

' → logprob: -18.000085830688477
    6. ')
' → logprob: -18.375085830688477
    7. ')`' → logprob: -19.125085830688477
    8. ')return' → logprob: -20.000085830688477
    9. '),' → logprob: -20.000085830688477
    10. '))' → logprob: -20.125085830688477

Token 216: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.015510679222643375
    2. 'output' → logprob: -4.640510559082031
    3. '
' → logprob: -5.515510559082031
    4. ' output' → logprob: -6.640510559082031
    5. '    
' → logprob: -8.890510559082031
    6. '	output' → logprob: -9.265510559082031
    7. '(output' → logprob: -9.890510559082031
    8. '  
' → logprob: -10.390510559082031
    9. '<|end|>' → logprob: -10.890510559082031
    10. ' ' → logprob: -11.265510559082031

Token 217: ' output' (ID: 4733)
  Prédit: 'output'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'output' (adapté à ' output') → logprob: -0.00012415809032972902
    2. ' output' → logprob: -9.000123977661133
    3. '   ' → logprob: -14.500123977661133
    4. '(output' → logprob: -16.625123977661133
    5. '_output' → logprob: -16.875123977661133
    6. '	output' → logprob: -17.875123977661133
    7. '
' → logprob: -18.000123977661133
    8. '$output' → logprob: -19.875123977661133
    9. 'Output' → logprob: -20.000123977661133
    10. 'outputs' → logprob: -20.625123977661133

Token 218: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -2.1008713702030946e-06
    2. '_' → logprob: -13.375001907348633
    3. '_res' → logprob: -15.625001907348633
    4. '_Result' → logprob: -16.125001907348633
    5. '_RESULT' → logprob: -16.250001907348633
    6. '_results' → logprob: -16.750001907348633
    7. 'Result' → logprob: -18.375001907348633
    8. '_r' → logprob: -18.875001907348633
    9. 'result' → logprob: -18.875001907348633
    10. '_output' → logprob: -19.250001907348633

Token 219: '(R' (ID: 4092)
  Prédit: '(R'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(R' → logprob: -0.004078997299075127
    2. '(' → logprob: -5.5040788650512695
    3. ' (' → logprob: -15.12907886505127
    4. '(
' → logprob: -16.129079818725586
    5. '(

' → logprob: -17.004079818725586
    6. '(S' → logprob: -17.629079818725586
    7. '(T' → logprob: -17.754079818725586
    8. '\(' → logprob: -18.004079818725586
    9. '((' → logprob: -18.129079818725586
    10. '(E' → logprob: -18.129079818725586

Token 220: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.9153885558771435e-06
    2. ')
' → logprob: -12.625005722045898
    3. '()' → logprob: -13.625005722045898
    4. '())' → logprob: -14.125005722045898
    5. ' )' → logprob: -14.500005722045898
    6. '(' → logprob: -16.2500057220459
    7. ')

' → logprob: -18.0000057220459
    8. ')`' → logprob: -18.0000057220459
    9. '))' → logprob: -18.5000057220459
    10. '#' → logprob: -19.5000057220459

Token 221: 'main' (ID: 7731)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.20787324011325836
    2. 'main' → logprob: -2.2078733444213867
    3. '
' → logprob: -2.5828733444213867
    4. '\n' → logprob: -6.957873344421387
    5. '#' → logprob: -7.832873344421387
    6. ' main' → logprob: -8.582873344421387
    7. '<|end|>' → logprob: -8.957873344421387
    8. ' if' → logprob: -9.207873344421387
    9. '```' → logprob: -9.207873344421387
    10. '_' → logprob: -9.707873344421387

Token 222: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.07984007894992828
    2. '(' → logprob: -2.5798401832580566
    3. '()
' → logprob: -7.204840183258057
    4. '(
' → logprob: -8.829839706420898
    5. '#' → logprob: -11.079839706420898
    6. '```' → logprob: -11.329839706420898
    7. '()\' → logprob: -11.704839706420898
    8. '
' → logprob: -12.329839706420898
    9. '()

' → logprob: -12.329839706420898
    10. ' ()' → logprob: -12.704839706420898


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 220
Tokens correctement prédits (1ère position, stricte): 108
Tokens correctement prédits (1ère position, avec adaptation): 117
Tokens correctement prédits (top 10): 188
Précision stricte (1ère position): 49.09%
Précision adaptée (1ère position): 53.18%
Précision (top 10): 85.45%
================================================================================
