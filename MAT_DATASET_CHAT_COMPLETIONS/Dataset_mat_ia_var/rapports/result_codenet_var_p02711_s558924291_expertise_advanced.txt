================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:18:17
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
print("Yes" if "7" in (n := input()) else "No")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'print' (ID: 1598)
  → Token d'amorce (pas de prédiction)

Token 1: '("' (ID: 568)
  → Token d'amorce (pas de prédiction)

Token 2: 'Yes' (ID: 13022)
  → Token d'amorce (pas de prédiction)

Token 3: '"' (ID: 1)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.0022293562069535255
    2. '!")' → logprob: -6.2522292137146
    3. ')' → logprob: -8.252229690551758
    4. ')")' → logprob: -10.502229690551758
    5. '\")' → logprob: -12.002229690551758
    6. '"' → logprob: -12.502229690551758
    7. '!)' → logprob: -14.377229690551758
    8. '!' → logprob: -14.377229690551758
    9. '}")' → logprob: -15.002229690551758
    10. '\"' → logprob: -15.377229690551758

Token 4: ' if' (ID: 538)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -2.045823566731997e-05
    2. '`)' → logprob: -11.250020027160645
    3. '```' → logprob: -12.625020027160645
    4. '")' → logprob: -13.875020027160645
    5. '))' → logprob: -14.250020027160645
    6. '<|end|>' → logprob: -14.750020027160645
    7. ')
' → logprob: -14.875020027160645
    8. ')`' → logprob: -14.875020027160645
    9. ')")' → logprob: -15.000020027160645
    10. '')' → logprob: -15.625020027160645

Token 5: ' "' (ID: 392)
  Prédit: ' True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' True' → logprob: -0.48156970739364624
    2. ' x' → logprob: -1.731569766998291
    3. ' user' → logprob: -2.731569766998291
    4. ' a' → logprob: -2.856569766998291
    5. ' condition' → logprob: -3.481569766998291
    6. ' ' → logprob: -3.481569766998291
    7. ' not' → logprob: -4.856569766998291
    8. 'True' → logprob: -5.481569766998291
    9. 'x' → logprob: -6.481569766998291
    10. 'condition' → logprob: -6.856569766998291

Token 6: '7' (ID: 22)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -1.0270938873291016
    2. '"' → logprob: -1.1520938873291016
    3. 'Hello' → logprob: -2.9020938873291016
    4. 'True' → logprob: -3.0270938873291016
    5. 'Yes' → logprob: -3.2770938873291016
    6. ' "' → logprob: -3.9020938873291016
    7. 'hello' → logprob: -4.027093887329102
    8. '1' → logprob: -4.027093887329102
    9. 'code' → logprob: -4.027093887329102
    10. 'y' → logprob: -4.402093887329102

Token 7: '"' (ID: 1)
  Prédit: '7'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: -0.029359878972172737
    2. '"' → logprob: -3.654359817504883
    3. ' in' → logprob: -7.029359817504883
    4. ' ' → logprob: -7.904359817504883
    5. '0' → logprob: -8.029359817504883
    6. '"in' → logprob: -8.529359817504883
    7. ' "' → logprob: -8.654359817504883
    8. '2' → logprob: -8.779359817504883
    9. 'in' → logprob: -9.029359817504883
    10. '9' → logprob: -9.029359817504883

Token 8: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.008164522238075733
    2. 'in' → logprob: -4.883164405822754
    3. ' ' → logprob: -8.258164405822754
    4. ')' → logprob: -8.758164405822754
    5. ' not' → logprob: -9.758164405822754
    6. '==' → logprob: -11.133164405822754
    7. ' )' → logprob: -11.258164405822754
    8. 'not' → logprob: -11.633164405822754
    9. ' ==' → logprob: -11.758164405822754
    10. '>' → logprob: -12.133164405822754

Token 9: ' (' (ID: 350)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.92705899477005
    2. 'input' → logprob: -1.3020589351654053
    3. ' input' → logprob: -1.8020589351654053
    4. ''' → logprob: -2.9270589351654053
    5. ' "' → logprob: -3.8020589351654053
    6. 's' → logprob: -4.052059173583984
    7. 'str' → logprob: -4.302059173583984
    8. ' '' → logprob: -4.802059173583984
    9. 'x' → logprob: -4.802059173583984
    10. 'a' → logprob: -5.302059173583984

Token 10: 'n' (ID: 77)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.24239419400691986
    2. '"' → logprob: -2.117394208908081
    3. 'str' → logprob: -2.492394208908081
    4. ' input' → logprob: -5.117393970489502
    5. '7' → logprob: -6.367393970489502
    6. ''' → logprob: -6.367393970489502
    7. 'user' → logprob: -8.11739444732666
    8. ')' → logprob: -8.24239444732666
    9. 'x' → logprob: -8.36739444732666
    10. ' str' → logprob: -8.36739444732666

Token 11: ' :=' (ID: 3405)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.009545345790684223
    2. ' )' → logprob: -5.38454532623291
    3. '```' → logprob: -7.00954532623291
    4. 'else' → logprob: -7.13454532623291
    5. '.strip' → logprob: -7.63454532623291
    6. ' else' → logprob: -7.75954532623291
    7. ')**' → logprob: -8.38454532623291
    8. ' ' → logprob: -8.38454532623291
    9. '))' → logprob: -8.50954532623291
    10. ',' → logprob: -8.50954532623291

Token 12: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.02632131800055504
    2. ' input' → logprob: -3.6513214111328125
    3. '(input' → logprob: -11.526321411132812
    4. 'str' → logprob: -12.776321411132812
    5. ' ' → logprob: -13.276321411132812
    6. '<input' → logprob: -13.776321411132812
    7. 'int' → logprob: -14.151321411132812
    8. '```' → logprob: -14.151321411132812
    9. '=input' → logprob: -14.276321411132812
    10. '"' → logprob: -14.276321411132812

Token 13: '())' (ID: 3516)
  Prédit: '())'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.019105903804302216
    2. '()' → logprob: -4.269105911254883
    3. '("' → logprob: -6.394105911254883
    4. '()))' → logprob: -6.519105911254883
    5. ')' → logprob: -7.269105911254883
    6. '(""))' → logprob: -8.144105911254883
    7. '(' → logprob: -8.269105911254883
    8. ' ())' → logprob: -9.269105911254883
    9. '")' → logprob: -9.394105911254883
    10. '`()' → logprob: -9.644105911254883

Token 14: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.004128861241042614
    2. 'else' → logprob: -5.879128932952881
    3. ' ' → logprob: -7.379128932952881
    4. ' and' → logprob: -7.754128932952881
    5. ')' → logprob: -8.379128456115723
    6. ' )' → logprob: -10.754128456115723
    7. 'and' → logprob: -12.004128456115723
    8. '```' → logprob: -12.004128456115723
    9. ' or' → logprob: -13.629128456115723
    10. '  ' → logprob: -13.879128456115723

Token 15: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.015366880223155022
    2. '"No' → logprob: -4.765367031097412
    3. ' "' → logprob: -5.140367031097412
    4. ' ' → logprob: -7.265367031097412
    5. 'No' → logprob: -10.140366554260254
    6. '(' → logprob: -10.265366554260254
    7. 'print' → logprob: -10.390366554260254
    8. ' No' → logprob: -10.640366554260254
    9. ' print' → logprob: -11.390366554260254
    10. ''' → logprob: -11.390366554260254

Token 16: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.0010103036183863878
    2. ' No' → logprob: -7.126010417938232
    3. '"No' → logprob: -8.501009941101074
    4. 'NO' → logprob: -13.876009941101074
    5. ' ' → logprob: -14.501009941101074
    6. '"' → logprob: -14.876009941101074
    7. '>No' → logprob: -15.501009941101074
    8. ' no' → logprob: -15.626009941101074
    9. '_No' → logprob: -16.50101089477539
    10. '(No' → logprob: -16.87601089477539

Token 17: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.08908537030220032
    2. ')' → logprob: -2.464085340499878
    3. ')")' → logprob: -9.464085578918457
    4. '```' → logprob: -10.339085578918457
    5. '`)' → logprob: -10.964085578918457
    6. '')' → logprob: -12.089085578918457
    7. '"' → logprob: -12.089085578918457
    8. ' )' → logprob: -13.464085578918457
    9. '")
' → logprob: -13.714085578918457
    10. ':' → logprob: -14.339085578918457


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 15
Tokens correctement prédits (1ère position, stricte): 5
Tokens correctement prédits (1ère position, avec adaptation): 5
Tokens correctement prédits (top 10): 9
Précision stricte (1ère position): 33.33%
Précision adaptée (1ère position): 33.33%
Précision (top 10): 60.00%
================================================================================
