================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:49:34
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def calc(nb):
	res = 0
	j = 1
	while j <= nb:
		val = str(j)
		if len(val) & 1:
			res = res + 1
		j += 1
	return res

class Runner:
	pass

get = lambda: int(input())
Runner.result = calc(get())
print(Runner.result)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' calc' (ID: 25691)
  → Token d'amorce (pas de prédiction)

Token 2: '(nb' (ID: 127388)
  → Token d'amorce (pas de prédiction)

Token 3: '):
' (ID: 1883)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00837982539087534
    2. '_' → logprob: -5.258379936218262
    3. '_)' → logprob: -6.758379936218262
    4. ')_' → logprob: -6.883379936218262
    5. ',' → logprob: -7.633379936218262
    6. 's' → logprob: -8.758379936218262
    7. 'u' → logprob: -9.633379936218262
    8. 'a' → logprob: -10.883379936218262
    9. ' )' → logprob: -10.883379936218262
    10. '=' → logprob: -11.383379936218262

Token 4: '	res' (ID: 18266)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.935373842716217
    2. ':' → logprob: -1.3103737831115723
    3. '   ' → logprob: -1.8103737831115723
    4. '```' → logprob: -2.4353737831115723
    5. ''' → logprob: -2.8103737831115723
    6. '    ' → logprob: -5.935373783111572
    7. '_' → logprob: -5.935373783111572
    8. '\' → logprob: -6.060373783111572
    9. ' (' → logprob: -6.060373783111572
    10. ' return' → logprob: -6.310373783111572

Token 5: ' =' (ID: 314)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'u' → logprob: -0.01678065024316311
    2. '=' → logprob: -4.766780853271484
    3. ' =' → logprob: -5.766780853271484
    4. 't' → logprob: -6.766780853271484
    5. 'ult' → logprob: -6.766780853271484
    6. '	' → logprob: -7.641780853271484
    7. '*' → logprob: -8.016780853271484
    8. ' ' → logprob: -8.266780853271484
    9. 'ults' → logprob: -8.266780853271484
    10. 'ul' → logprob: -8.641780853271484

Token 6: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.09603513032197952
    2. ' []' → logprob: -2.4710352420806885
    3. ' nb' → logprob: -5.596035003662109
    4. '0' → logprob: -6.346035003662109
    5. ' ' → logprob: -6.721035003662109
    6. '[]' → logprob: -8.47103500366211
    7. '  ' → logprob: -10.47103500366211
    8. ' {}' → logprob: -10.59603500366211
    9. ' [' → logprob: -11.22103500366211
    10. ''' → logprob: -11.34603500366211

Token 7: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.018568826839327812
    2. ' ' → logprob: -4.518568992614746
    3. 'nb' → logprob: -5.518568992614746
    4. ' nb' → logprob: -6.268568992614746
    5. '[]' → logprob: -7.143568992614746
    6. ' []' → logprob: -7.768568992614746
    7. '1' → logprob: -8.768568992614746
    8. '[' → logprob: -9.393568992614746
    9. '(nb' → logprob: -10.393568992614746
    10. 'sum' → logprob: -10.768568992614746

Token 8: '
' (ID: 198)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.9027775526046753
    2. '```' → logprob: -2.027777671813965
    3. '	' → logprob: -2.402777671813965
    4. '\' → logprob: -2.777777671813965
    5. '   ' → logprob: -2.902777671813965
    6. ' ' → logprob: -3.027777671813965
    7. '	return' → logprob: -3.152777671813965
    8. '	for' → logprob: -3.527777671813965
    9. '<|end|>' → logprob: -3.902777671813965
    10. '    ' → logprob: -4.027777671813965

Token 9: '	j' (ID: 22672)
  Prédit: '	'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '	' → logprob: -1.3156397342681885
    2. '	for' → logprob: -1.5656397342681885
    3. '```' → logprob: -1.9406397342681885
    4. '+' → logprob: -2.8156397342681885
    5. '   ' → logprob: -3.0656397342681885
    6. '	return' → logprob: -3.3156397342681885
    7. '\' → logprob: -3.3156397342681885
    8. '\t' → logprob: -3.4406397342681885
    9. ' ' → logprob: -3.6906397342681885
    10. ' +' → logprob: -3.9406397342681885

Token 10: ' =' (ID: 314)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'u' → logprob: -0.5086144804954529
    2. '=' → logprob: -1.3836145401000977
    3. '+' → logprob: -3.0086145401000977
    4. ' ' → logprob: -3.6336145401000977
    5. ' =' → logprob: -4.008614540100098
    6. 'i' → logprob: -4.633614540100098
    7. 's' → logprob: -4.883614540100098
    8. '	u' → logprob: -5.133614540100098
    9. 'o' → logprob: -5.258614540100098
    10. 'e' → logprob: -5.258614540100098

Token 11: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.034636832773685455
    2. '0' → logprob: -3.5346367359161377
    3. '1' → logprob: -5.534636974334717
    4. '	' → logprob: -7.409636974334717
    5. ' ' → logprob: -8.159636497497559
    6. '2' → logprob: -12.409636497497559
    7. ' 	' → logprob: -12.722136497497559
    8. ' nb' → logprob: -12.722136497497559
    9. '4' → logprob: -13.284636497497559
    10. ' j' → logprob: -13.534636497497559

Token 12: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.22883953154087067
    2. ' ' → logprob: -1.9788395166397095
    3. '1' → logprob: -2.728839635848999
    4. '2' → logprob: -7.72883939743042
    5. ' nb' → logprob: -8.228839874267578
    6. 'nb' → logprob: -8.353839874267578
    7. '10' → logprob: -11.353839874267578
    8. '  ' → logprob: -11.728839874267578
    9. ' -' → logprob: -12.103839874267578
    10. '   ' → logprob: -12.228839874267578

Token 13: '
' (ID: 198)
  Prédit: '	while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '	while' → logprob: -1.360580563545227
    2. ' for' → logprob: -1.860580563545227
    3. '	for' → logprob: -1.860580563545227
    4. ' while' → logprob: -2.7355804443359375
    5. '\n' → logprob: -2.8605804443359375
    6. ' ' → logprob: -2.9855804443359375
    7. '\' → logprob: -3.3605804443359375
    8. '	
' → logprob: -3.4855804443359375
    9. '
' → logprob: -3.8605804443359375
    10. ' 
' → logprob: -4.2355804443359375

Token 14: '	while' (ID: 10883)
  Prédit: '	while'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '	while' → logprob: -0.315403014421463
    2. ' while' → logprob: -2.4404029846191406
    3. '<|end|>' → logprob: -2.6904029846191406
    4. '	for' → logprob: -3.4404029846191406
    5. '	
' → logprob: -3.5654029846191406
    6. ' ' → logprob: -4.690402984619141
    7. ' for' → logprob: -4.690402984619141
    8. '```' → logprob: -4.815402984619141
    9. ' 
' → logprob: -5.815402984619141
    10. '	' → logprob: -5.940402984619141

Token 15: ' j' (ID: 441)
  Prédit: ' nb'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nb' → logprob: -0.5180192589759827
    2. ' ' → logprob: -1.393019199371338
    3. ' j' → logprob: -1.893019199371338
    4. 'j' → logprob: -6.018019199371338
    5. '	nb' → logprob: -7.018019199371338
    6. 'nb' → logprob: -7.143019199371338
    7. '(nb' → logprob: -7.768019199371338
    8. '  ' → logprob: -8.268019676208496
    9. ' (' → logprob: -8.518019676208496
    10. ' ' → logprob: -8.768019676208496

Token 16: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.2729244530200958
    2. ' <' → logprob: -1.5229244232177734
    3. '<' → logprob: -4.272924423217773
    4. '<=' → logprob: -5.147924423217773
    5. ' ' → logprob: -7.022924423217773
    6. ' <<=' → logprob: -10.772924423217773
    7. '*' → logprob: -10.897924423217773
    8. '	' → logprob: -11.022924423217773
    9. '<|end|>' → logprob: -11.522924423217773
    10. ' *' → logprob: -11.647924423217773

Token 17: ' nb' (ID: 28791)
  Prédit: ' nb'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nb' → logprob: -0.0011986821191385388
    2. 'nb' → logprob: -6.751198768615723
    3. '	nb' → logprob: -11.251198768615723
    4. ' ' → logprob: -11.626198768615723
    5. ' ' → logprob: -12.626198768615723
    6. '(nb' → logprob: -13.001198768615723
    7. '_nb' → logprob: -15.251198768615723
    8. ' len' → logprob: -15.251198768615723
    9. '.nb' → logprob: -15.751198768615723
    10. ' n' → logprob: -16.501197814941406

Token 18: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.01155820768326521
    2. ' :' → logprob: -5.0115580558776855
    3. ':
' → logprob: -5.3865580558776855
    4. ' :
' → logprob: -8.886558532714844
    5. '	' → logprob: -10.886558532714844
    6. '   ' → logprob: -11.261558532714844
    7. '```' → logprob: -11.761558532714844
    8. ':**' → logprob: -11.886558532714844
    9. ':j' → logprob: -12.011558532714844
    10. '**' → logprob: -12.011558532714844

Token 19: '	' (ID: 197)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.4775402843952179
    2. ' 
' → logprob: -1.2275402545928955
    3. '     
' → logprob: -3.9775402545928955
    4. '    ' → logprob: -4.102540493011475
    5. '\' → logprob: -4.852540493011475
    6. ' 	' → logprob: -4.977540493011475
    7. '       ' → logprob: -5.602540493011475
    8. ' \' → logprob: -5.852540493011475
    9. '	' → logprob: -5.852540493011475
    10. '```' → logprob: -5.977540493011475

Token 20: '	val' (ID: 42587)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1997656524181366
    2. '	' → logprob: -2.449765682220459
    3. ' 	' → logprob: -4.074765682220459
    4. '    ' → logprob: -4.824765682220459
    5. '	   ' → logprob: -4.949765682220459
    6. '<|end|>' → logprob: -5.074765682220459
    7. '	 ' → logprob: -5.324765682220459
    8. '   ' → logprob: -5.324765682220459
    9. '		' → logprob: -5.449765682220459
    10. ' ' → logprob: -5.574765682220459

Token 21: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.14812171459197998
    2. '=' → logprob: -2.8981218338012695
    3. '	' → logprob: -3.3981218338012695
    4. 'ue' → logprob: -3.6481218338012695
    5. ' ' → logprob: -5.0231218338012695
    6. ' +=' → logprob: -5.7731218338012695
    7. '*' → logprob: -5.8981218338012695
    8. '	j' → logprob: -6.7731218338012695
    9. '	val' → logprob: -6.8981218338012695
    10. ' *=' → logprob: -7.1481218338012695

Token 22: ' str' (ID: 989)
  Prédit: 'j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.6639932990074158
    2. ' j' → logprob: -0.9139932990074158
    3. '	j' → logprob: -2.9139933586120605
    4. '	' → logprob: -4.4139933586120605
    5. '	nb' → logprob: -5.6639933586120605
    6. ' ' → logprob: -5.6639933586120605
    7. ' nb' → logprob: -6.1639933586120605
    8. '2' → logprob: -6.2889933586120605
    9. 'nb' → logprob: -6.7889933586120605
    10. '1' → logprob: -7.0389933586120605

Token 23: '(j' (ID: 4997)
  Prédit: '(j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(j' → logprob: -0.012423350475728512
    2. '(' → logprob: -4.637423515319824
    3. '(nb' → logprob: -6.387423515319824
    4. '(val' → logprob: -7.637423515319824
    5. '(int' → logprob: -8.762423515319824
    6. '(eval' → logprob: -9.262423515319824
    7. '(i' → logprob: -10.012423515319824
    8. '((' → logprob: -10.012423515319824
    9. '(bin' → logprob: -10.887423515319824
    10. '(len' → logprob: -10.887423515319824

Token 24: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3857951760292053
    2. '**' → logprob: -1.3857951164245605
    3. '*' → logprob: -3.6357951164245605
    4. ')+' → logprob: -4.1357951164245605
    5. '*j' → logprob: -4.5107951164245605
    6. ')**' → logprob: -4.8857951164245605
    7. ' *' → logprob: -6.2607951164245605
    8. '+' → logprob: -6.5107951164245605
    9. ' )' → logprob: -6.5107951164245605
    10. ')+'' → logprob: -7.3857951164245605

Token 25: '	' (ID: 197)
  Prédit: '	'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '	' → logprob: -0.09309244900941849
    2. '+' → logprob: -2.968092441558838
    3. '[' → logprob: -5.093092441558838
    4. '		
' → logprob: -5.593092441558838
    5. '	if' → logprob: -5.593092441558838
    6. '.' → logprob: -5.718092441558838
    7. '		' → logprob: -5.843092441558838
    8. '<|end|>' → logprob: -5.843092441558838
    9. '[::-' → logprob: -6.343092441558838
    10. ')' → logprob: -6.468092441558838

Token 26: '	if' (ID: 1224)
  Prédit: '	'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '	' → logprob: -0.3259968161582947
    2. '	if' → logprob: -1.9509968757629395
    3. '+' → logprob: -2.4509968757629395
    4. ' if' → logprob: -4.3259968757629395
    5. '.' → logprob: -4.7009968757629395
    6. 'if' → logprob: -4.7009968757629395
    7. '[' → logprob: -5.5759968757629395
    8. '	for' → logprob: -5.9509968757629395
    9. '		' → logprob: -6.3259968757629395
    10. ' +' → logprob: -7.2009968757629395

Token 27: ' len' (ID: 4631)
  Prédit: ' j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' j' → logprob: -0.9042354226112366
    2. ' val' → logprob: -1.1542353630065918
    3. ' '' → logprob: -2.654235363006592
    4. 'j' → logprob: -2.654235363006592
    5. 'val' → logprob: -2.904235363006592
    6. ' len' → logprob: -3.654235363006592
    7. ''' → logprob: -3.904235363006592
    8. ' ' → logprob: -4.779235363006592
    9. ' "' → logprob: -5.154235363006592
    10. '"' → logprob: -5.404235363006592

Token 28: '(val' (ID: 17391)
  Prédit: '(val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(val' → logprob: -0.07057160139083862
    2. '(' → logprob: -2.6955716609954834
    3. ' (' → logprob: -7.445571422576904
    4. '	val' → logprob: -10.570571899414062
    5. ' ' → logprob: -11.945571899414062
    6. ' val' → logprob: -12.945571899414062
    7. 'val' → logprob: -12.945571899414062
    8. '(value' → logprob: -13.320571899414062
    9. '(res' → logprob: -13.570571899414062
    10. '	' → logprob: -13.820571899414062

Token 29: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.03365227207541466
    2. ')==' → logprob: -4.158652305603027
    3. ')>' → logprob: -4.908652305603027
    4. ' )' → logprob: -4.908652305603027
    5. ')>=' → logprob: -6.408652305603027
    6. ')<' → logprob: -8.533652305603027
    7. '	' → logprob: -8.783652305603027
    8. ')<=' → logprob: -8.908652305603027
    9. '==' → logprob: -9.033652305603027
    10. ')%' → logprob: -9.408652305603027

Token 30: ' &' (ID: 827)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.7938908934593201
    2. '==' → logprob: -1.1688909530639648
    3. '%' → logprob: -2.293890953063965
    4. ' %' → logprob: -2.918890953063965
    5. '<|end|>' → logprob: -4.043890953063965
    6. ' ' → logprob: -4.293890953063965
    7. '	' → logprob: -4.668890953063965
    8. '>' → logprob: -4.793890953063965
    9. ' >' → logprob: -5.168890953063965
    10. ' <' → logprob: -5.168890953063965

Token 31: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.0016573667526245
    2. ' ' → logprob: -1.0016573667526245
    3. '&' → logprob: -1.8766573667526245
    4. 'nbsp' → logprob: -3.251657485961914
    5. ' val' → logprob: -3.501657485961914
    6. 'j' → logprob: -4.751657485961914
    7. ' j' → logprob: -5.126657485961914
    8. 'val' → logprob: -5.376657485961914
    9. 'amp' → logprob: -5.501657485961914
    10. '32' → logprob: -5.501657485961914

Token 32: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.04850186035037041
    2. '&' → logprob: -3.548501968383789
    3. ' ' → logprob: -4.423501968383789
    4. 'nbsp' → logprob: -5.923501968383789
    5. 'val' → logprob: -6.673501968383789
    6. 'amp' → logprob: -6.798501968383789
    7. ' val' → logprob: -7.798501968383789
    8. 'j' → logprob: -8.173501968383789
    9. '2' → logprob: -9.173501968383789
    10. '#' → logprob: -9.298501968383789

Token 33: ':
' (ID: 734)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '==' → logprob: -0.5044616460800171
    2. ':' → logprob: -1.129461646080017
    3. ' ==' → logprob: -3.1294617652893066
    4. '=' → logprob: -5.254461765289307
    5. '!=' → logprob: -5.254461765289307
    6. '):' → logprob: -5.379461765289307
    7. ')' → logprob: -5.629461765289307
    8. ' :' → logprob: -6.129461765289307
    9. '>' → logprob: -6.129461765289307
    10. '0' → logprob: -6.254461765289307

Token 34: '		' (ID: 335)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.011835549958050251
    2. '	' → logprob: -5.38683557510376
    3. '		' → logprob: -6.01183557510376
    4. ' :' → logprob: -6.76183557510376
    5. ' and' → logprob: -6.88683557510376
    6. '==' → logprob: -7.26183557510376
    7. '=' → logprob: -7.26183557510376
    8. ':
' → logprob: -7.63683557510376
    9. ' ==' → logprob: -8.886835098266602
    10. '):' → logprob: -9.386835098266602

Token 35: '	res' (ID: 18266)
  Prédit: '	res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '	res' → logprob: -0.605835497379303
    2. '		' → logprob: -1.7308354377746582
    3. 'res' → logprob: -2.105835437774658
    4. '	' → logprob: -2.480835437774658
    5. '+' → logprob: -3.355835437774658
    6. ':' → logprob: -3.980835437774658
    7. ' res' → logprob: -4.980835437774658
    8. '			' → logprob: -6.105835437774658
    9. '=' → logprob: -6.480835437774658
    10. '*' → logprob: -6.480835437774658

Token 36: ' =' (ID: 314)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.47435301542282104
    2. ' +=' → logprob: -0.974353015422821
    3. '=' → logprob: -8.974352836608887
    4. '	' → logprob: -9.599352836608887
    5. ' =' → logprob: -10.099352836608887
    6. '+' → logprob: -10.349352836608887
    7. '+=(' → logprob: -12.724352836608887
    8. ' ' → logprob: -13.724352836608887
    9. ' +' → logprob: -13.724352836608887
    10. '+='' → logprob: -14.099352836608887

Token 37: ' res' (ID: 694)
  Prédit: ' res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' res' → logprob: -0.35042425990104675
    2. ' j' → logprob: -1.7254242897033691
    3. '+' → logprob: -3.225424289703369
    4. 'j' → logprob: -3.475424289703369
    5. 'res' → logprob: -3.600424289703369
    6. ' ' → logprob: -4.225424289703369
    7. ' +' → logprob: -6.350424289703369
    8. ' ' → logprob: -7.725424289703369
    9. ' val' → logprob: -7.725424289703369
    10. '	res' → logprob: -7.850424289703369

Token 38: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.029941167682409286
    2. ' +' → logprob: -3.5299410820007324
    3. '+j' → logprob: -9.02994155883789
    4. '*' → logprob: -10.02994155883789
    5. '	' → logprob: -12.02994155883789
    6. '+=' → logprob: -12.15494155883789
    7. '+i' → logprob: -13.27994155883789
    8. ' *' → logprob: -13.40494155883789
    9. '-' → logprob: -13.65494155883789
    10. '＋' → logprob: -13.77994155883789

Token 39: ' ' (ID: 220)
  Prédit: 'j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.01343479473143816
    2. '	j' → logprob: -5.013434886932373
    3. ' j' → logprob: -5.263434886932373
    4. '1' → logprob: -7.263434886932373
    5. 'int' → logprob: -7.388434886932373
    6. 'len' → logprob: -9.888434410095215
    7. '	' → logprob: -10.138434410095215
    8. '	int' → logprob: -10.388434410095215
    9. ' int' → logprob: -10.888434410095215
    10. ' ' → logprob: -10.888434410095215

Token 40: '1' (ID: 16)
  Prédit: 'j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.014494070783257484
    2. '	j' → logprob: -4.514493942260742
    3. 'int' → logprob: -6.139493942260742
    4. ' j' → logprob: -7.389493942260742
    5. '1' → logprob: -7.889493942260742
    6. '	int' → logprob: -8.639493942260742
    7. '	' → logprob: -10.389493942260742
    8. '   ' → logprob: -11.014493942260742
    9. 'len' → logprob: -11.139493942260742
    10. ' int' → logprob: -11.264493942260742

Token 41: '
' (ID: 198)
  Prédit: '	'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '	' → logprob: -0.15459591150283813
    2. '		
' → logprob: -2.6545958518981934
    3. '
' → logprob: -3.1545958518981934
    4. '	j' → logprob: -4.029595851898193
    5. '
' → logprob: -6.029595851898193
    6. '		
' → logprob: -6.279595851898193
    7. '		' → logprob: -6.404595851898193
    8. 'j' → logprob: -6.529595851898193
    9. '	
' → logprob: -6.779595851898193
    10. '\n' → logprob: -6.779595851898193

Token 42: '	' (ID: 197)
  Prédit: '	'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '	' → logprob: -0.040141697973012924
    2. '	j' → logprob: -4.290141582489014
    3. '
' → logprob: -4.540141582489014
    4. '		
' → logprob: -4.665141582489014
    5. 'j' → logprob: -6.415141582489014
    6. '
' → logprob: -6.415141582489014
    7. '		' → logprob: -7.415141582489014
    8. '```' → logprob: -8.165142059326172
    9. '	
' → logprob: -8.290142059326172
    10. '		
' → logprob: -8.415142059326172

Token 43: '	j' (ID: 22672)
  Prédit: '	'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '	' → logprob: -0.02085121162235737
    2. '	j' → logprob: -3.8958511352539062
    3. 'j' → logprob: -8.645851135253906
    4. '		' → logprob: -9.395851135253906
    5. '		
' → logprob: -10.395851135253906
    6. '```' → logprob: -12.645851135253906
    7. '		
' → logprob: -12.895851135253906
    8. '	
' → logprob: -13.395851135253906
    9. ' 	' → logprob: -13.895851135253906
    10. '	   ' → logprob: -14.020851135253906

Token 44: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.09510834515094757
    2. '+=' → logprob: -2.4701082706451416
    3. '+' → logprob: -5.470108509063721
    4. '=' → logprob: -6.470108509063721
    5. ' +' → logprob: -8.220108032226562
    6. ' =' → logprob: -9.470108032226562
    7. ' ' → logprob: -10.720108032226562
    8. '<|end|>' → logprob: -11.970108032226562
    9. '	' → logprob: -12.345108032226562
    10. ' <<=' → logprob: -12.595108032226562

Token 45: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0076085166074335575
    2. ' ' → logprob: -4.882608413696289
    3. '	' → logprob: -13.882608413696289
    4. '   ' → logprob: -14.257608413696289
    5. '```' → logprob: -15.257608413696289
    6. ' ' → logprob: -15.507608413696289
    7. '  ' → logprob: -16.00760841369629
    8. '2' → logprob: -16.25760841369629
    9. '    ' → logprob: -17.50760841369629
    10. '１' → logprob: -17.82010841369629

Token 46: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -6.869017852295656e-06
    2. ' ' → logprob: -12.000006675720215
    3. '2' → logprob: -14.500006675720215
    4. '```' → logprob: -17.25000762939453
    5. '   ' → logprob: -18.43750762939453
    6. '4' → logprob: -18.56250762939453
    7. '	' → logprob: -18.56250762939453
    8. '10' → logprob: -18.68750762939453
    9. '۱' → logprob: -18.75000762939453
    10. 'def' → logprob: -18.93750762939453

Token 47: '
' (ID: 198)
  Prédit: '	return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '	return' → logprob: -0.0751088485121727
    2. '
' → logprob: -2.700108766555786
    3. '\n' → logprob: -6.950109004974365
    4. '	
' → logprob: -7.325109004974365
    5. '<|end|>' → logprob: -7.450109004974365
    6. 'return' → logprob: -7.950109004974365
    7. ':return' → logprob: -7.950109004974365
    8. '
' → logprob: -8.075108528137207
    9. ' return' → logprob: -8.200108528137207
    10. '' → logprob: -8.200108528137207

Token 48: '	return' (ID: 1393)
  Prédit: '	return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '	return' → logprob: -0.0032782447524368763
    2. '	' → logprob: -7.0032782554626465
    3. '
' → logprob: -7.3782782554626465
    4. '   ' → logprob: -7.8782782554626465
    5. ' ' → logprob: -8.503277778625488
    6. '	res' → logprob: -8.753277778625488
    7. '<|end|>' → logprob: -8.753277778625488
    8. ' return' → logprob: -9.003277778625488
    9. ':return' → logprob: -9.128277778625488
    10. '	
' → logprob: -9.378277778625488

Token 49: ' res' (ID: 694)
  Prédit: ' res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' res' → logprob: -0.1427232027053833
    2. 'res' → logprob: -2.0177230834960938
    3. '	res' → logprob: -10.267723083496094
    4. ' ' → logprob: -12.142723083496094
    5. '(res' → logprob: -12.767723083496094
    6. ' val' → logprob: -13.017723083496094
    7. 'val' → logprob: -13.642723083496094
    8. ' ' → logprob: -15.142723083496094
    9. '$res' → logprob: -15.267723083496094
    10. '```' → logprob: -15.392723083496094

Token 50: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 51: 'class' (ID: 1444)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 52: ' Runner' (ID: 82168)
  Prédit: ' My'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' My' → logprob: -0.8281478881835938
    2. ' Solution' → logprob: -1.5781478881835938
    3. ' Counter' → logprob: -2.2031478881835938
    4. ' Count' → logprob: -2.2031478881835938
    5. ' Calculator' → logprob: -2.3281478881835938
    6. ' ' → logprob: -3.7031478881835938
    7. ' ' → logprob: -5.453147888183594
    8. ' Number' → logprob: -6.453147888183594
    9. ' Test' → logprob: -6.578147888183594
    10. ' Solver' → logprob: -6.828147888183594

Token 53: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0002943479048553854
    2. ':
' → logprob: -9.00029468536377
    3. '(' → logprob: -9.62529468536377
    4. ' :' → logprob: -10.00029468536377
    5. '():' → logprob: -10.00029468536377
    6. '<|end|>' → logprob: -12.62529468536377
    7. '(object' → logprob: -12.75029468536377
    8. ':

' → logprob: -13.75029468536377
    9. ':def' → logprob: -13.87529468536377
    10. '(:' → logprob: -13.87529468536377

Token 54: '	pass' (ID: 100653)
  Prédit: '	def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '	def' → logprob: -0.40450403094291687
    2. ' def' → logprob: -1.1545040607452393
    3. '   ' → logprob: -4.90450382232666
    4. '<|end|>' → logprob: -5.40450382232666
    5. '	pass' → logprob: -6.27950382232666
    6. 'def' → logprob: -6.40450382232666
    7. ' ' → logprob: -7.77950382232666
    8. ' pass' → logprob: -7.77950382232666
    9. '<|end|>' → logprob: -8.40450382232666
    10. '
' → logprob: -8.40450382232666

Token 55: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.3438950777053833
    2. '<|end|>' → logprob: -2.0938949584960938
    3. 'def' → logprob: -2.4688949584960938
    4. ' ' → logprob: -4.093894958496094
    5. '

' → logprob: -4.843894958496094
    6. '\n' → logprob: -5.093894958496094
    7. ' def' → logprob: -5.093894958496094
    8. ' 
' → logprob: -5.218894958496094
    9. '<|end|>' → logprob: -5.218894958496094
    10. '  
' → logprob: -5.218894958496094

Token 56: 'get' (ID: 522)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 57: ' =' (ID: 314)
  Prédit: 'attr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'attr' → logprob: -0.011717735789716244
    2. '_' → logprob: -5.136717796325684
    3. '_runner' → logprob: -5.636717796325684
    4. ' _' → logprob: -7.886717796325684
    5. '_attr' → logprob: -7.886717796325684
    6. ' attr' → logprob: -8.136717796325684
    7. '_result' → logprob: -8.261717796325684
    8. '_ip' → logprob: -8.636717796325684
    9. '_input' → logprob: -8.636717796325684
    10. '_user' → logprob: -9.886717796325684

Token 58: ' lambda' (ID: 27871)
  Prédit: 'calc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'calc' → logprob: -0.09373392164707184
    2. 'Runner' → logprob: -2.8437340259552
    3. ' calc' → logprob: -4.718733787536621
    4. 'max' → logprob: -5.093733787536621
    5. 'int' → logprob: -5.968733787536621
    6. 'input' → logprob: -6.093733787536621
    7. 'lambda' → logprob: -6.093733787536621
    8. ' Runner' → logprob: -6.093733787536621
    9. 'sum' → logprob: -6.218733787536621
    10. 'len' → logprob: -6.718733787536621

Token 59: ':' (ID: 25)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.2611413300037384
    2. ' lambda' → logprob: -1.636141300201416
    3. ' n' → logprob: -4.011141300201416
    4. ' nb' → logprob: -5.636141300201416
    5. ' ' → logprob: -6.261141300201416
    6. ' a' → logprob: -6.511141300201416
    7. 'lambda' → logprob: -6.511141300201416
    8. ' calc' → logprob: -6.636141300201416
    9. ' s' → logprob: -6.886141300201416
    10. 'x' → logprob: -7.261141300201416

Token 60: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.01521038357168436
    2. ' int' → logprob: -4.765210151672363
    3. 'input' → logprob: -5.140210151672363
    4. '[int' → logprob: -7.890210151672363
    5. ' input' → logprob: -9.140210151672363
    6. '(int' → logprob: -9.640210151672363
    7. '	int' → logprob: -9.765210151672363
    8. ' ' → logprob: -11.015210151672363
    9. '[' → logprob: -11.140210151672363
    10. 'list' → logprob: -11.140210151672363

Token 61: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.00021617230959236622
    2. '(' → logprob: -8.500216484069824
    3. 'input' → logprob: -11.625216484069824
    4. '()' → logprob: -13.000216484069824
    5. '((' → logprob: -14.250216484069824
    6. '(
' → logprob: -15.500216484069824
    7. '(in' → logprob: -15.500216484069824
    8. '(raw' → logprob: -16.000215530395508
    9. '(eval' → logprob: -16.750215530395508
    10. '(i' → logprob: -16.750215530395508

Token 62: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0049947709776461124
    2. '()' → logprob: -6.004994869232178
    3. '()))' → logprob: -6.004994869232178
    4. '(' → logprob: -11.25499439239502
    5. '().' → logprob: -11.50499439239502
    6. '();)' → logprob: -11.87999439239502
    7. '());' → logprob: -12.62999439239502
    8. ' ())' → logprob: -12.62999439239502
    9. '()),' → logprob: -13.12999439239502
    10. '()>' → logprob: -13.25499439239502

Token 63: 'Runner' (ID: 26032)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.10655771940946579
    2. '<|end|>' → logprob: -2.981557607650757
    3. 'for' → logprob: -3.356557607650757
    4. '```' → logprob: -5.606557846069336
    5. 'run' → logprob: -5.731557846069336
    6. 'print' → logprob: -6.231557846069336
    7. '()' → logprob: -6.981557846069336
    8. 'runner' → logprob: -6.981557846069336
    9. '<|end|>' → logprob: -7.481557846069336
    10. '#' → logprob: -7.481557846069336

Token 64: '.result' (ID: 22965)
  Prédit: '().'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '().' → logprob: -0.24093976616859436
    2. '()' → logprob: -1.615939736366272
    3. '.' → logprob: -4.365939617156982
    4. '.get' → logprob: -7.115939617156982
    5. '.run' → logprob: -7.240939617156982
    6. '(' → logprob: -7.490939617156982
    7. '.Run' → logprob: -7.865939617156982
    8. '.calc' → logprob: -9.36594009399414
    9. '().__' → logprob: -10.86594009399414
    10. '(get' → logprob: -11.24094009399414

Token 65: ' =' (ID: 314)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.06617367267608643
    2. '=' → logprob: -3.441173553466797
    3. ' =' → logprob: -3.941173553466797
    4. '(' → logprob: -5.066173553466797
    5. '<|end|>' → logprob: -5.441173553466797
    6. ')' → logprob: -7.816173553466797
    7. '().' → logprob: -8.566173553466797
    8. 'def' → logprob: -8.566173553466797
    9. '<|end|>' → logprob: -8.941173553466797
    10. ' ()' → logprob: -8.941173553466797

Token 66: ' calc' (ID: 25691)
  Prédit: 'calc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'calc' → logprob: -0.029971128329634666
    2. ' calc' → logprob: -3.529971122741699
    3. '(calc' → logprob: -8.9049711227417
    4. 'str' → logprob: -10.9049711227417
    5. 'sum' → logprob: -10.9049711227417
    6. 'lambda' → logprob: -11.9049711227417
    7. ' str' → logprob: -12.1549711227417
    8. 'max' → logprob: -12.4049711227417
    9. 'get' → logprob: -12.5299711227417
    10. '0' → logprob: -12.6549711227417

Token 67: '(get' (ID: 7119)
  Prédit: '(get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(get' → logprob: -0.03821511194109917
    2. '(' → logprob: -3.288215160369873
    3. '((' → logprob: -9.788214683532715
    4. '(
' → logprob: -10.663214683532715
    5. 'get' → logprob: -11.663214683532715
    6. '<|end|>' → logprob: -11.663214683532715
    7. '(None' → logprob: -11.788214683532715
    8. '("("' → logprob: -12.038214683532715
    9. '()' → logprob: -12.163214683532715
    10. '```' → logprob: -12.538214683532715

Token 68: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.5761343836784363
    2. '()))' → logprob: -0.8261343836784363
    3. '()' → logprob: -8.95113468170166
    4. '))' → logprob: -10.95113468170166
    5. '())
' → logprob: -11.07613468170166
    6. ' ())' → logprob: -11.70113468170166
    7. '()))
' → logprob: -11.95113468170166
    8. ')' → logprob: -11.95113468170166
    9. '())))' → logprob: -12.32613468170166
    10. '()));' → logprob: -12.95113468170166

Token 69: 'print' (ID: 1598)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 70: '(R' (ID: 4092)
  Prédit: '(R'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(R' → logprob: -0.04860350117087364
    2. '(' → logprob: -3.0486035346984863
    3. '(Render' → logprob: -12.548603057861328
    4. ' (' → logprob: -12.798603057861328
    5. '((' → logprob: -13.298603057861328
    6. '()' → logprob: -13.298603057861328
    7. '(r' → logprob: -13.798603057861328
    8. '(run' → logprob: -13.923603057861328
    9. '(
' → logprob: -14.173603057861328
    10. '(get' → logprob: -14.423603057861328

Token 71: 'unner' (ID: 49975)
  Prédit: 'unner'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'unner' → logprob: -8.537868779967539e-06
    2. 'un' → logprob: -11.875008583068848
    3. 'Runner' → logprob: -14.875008583068848
    4. 'uner' → logprob: -14.875008583068848
    5. 'unners' → logprob: -15.625008583068848
    6. 'unn' → logprob: -15.750008583068848
    7. 'runner' → logprob: -16.00000762939453
    8. 'inner' → logprob: -16.37500762939453
    9. 'unning' → logprob: -16.62500762939453
    10. 'unne' → logprob: -17.00000762939453

Token 72: '.result' (ID: 22965)
  Prédit: '.result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.result' → logprob: -3.292907877039397e-06
    2. '.' → logprob: -13.75000286102295
    3. ').' → logprob: -13.87500286102295
    4. '.results' → logprob: -14.87500286102295
    5. 'result' → logprob: -15.25000286102295
    6. ' .' → logprob: -15.37500286102295
    7. ')' → logprob: -15.87500286102295
    8. '.status' → logprob: -16.750003814697266
    9. '.output' → logprob: -16.875003814697266
    10. '.res' → logprob: -16.875003814697266

Token 73: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.6240566083070007e-06
    2. ' )' → logprob: -14.125001907348633
    3. '))' → logprob: -14.250001907348633
    4. ')`' → logprob: -16.500001907348633
    5. ')
' → logprob: -17.000001907348633
    6. '())' → logprob: -17.750001907348633
    7. ')#' → logprob: -17.875001907348633
    8. '`)' → logprob: -18.500001907348633
    9. '})' → logprob: -18.875001907348633
    10. '）' → logprob: -19.000001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 71
Tokens correctement prédits (1ère position, stricte): 25
Tokens correctement prédits (1ère position, avec adaptation): 25
Tokens correctement prédits (top 10): 51
Précision stricte (1ère position): 35.21%
Précision adaptée (1ère position): 35.21%
Précision (top 10): 71.83%
================================================================================
