================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:15:50
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
input_value_first, input_value_second = map(int, input().split())
if input_value_first <= 8 and input_value_second <= 8:
    print('Yay!')
else:
    print(':(')
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'input' (ID: 2586)
  → Token d'amorce (pas de prédiction)

Token 1: '_value' (ID: 6734)
  → Token d'amorce (pas de prédiction)

Token 2: '_first' (ID: 29347)
  → Token d'amorce (pas de prédiction)

Token 3: ',' (ID: 11)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.0891716331243515
    2. '+' → logprob: -3.2141716480255127
    3. '.' → logprob: -3.9641716480255127
    4. '[' → logprob: -4.589171409606934
    5. '=' → logprob: -4.714171409606934
    6. ')' → logprob: -6.464171409606934
    7. '```' → logprob: -6.589171409606934
    8. ':' → logprob: -7.214171409606934
    9. ' +' → logprob: -7.339171409606934
    10. ' =' → logprob: -7.589171409606934

Token 4: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.30299726128578186
    2. ' ' → logprob: -2.302997350692749
    3. '_' → logprob: -2.677997350692749
    4. ' input' → logprob: -2.802997350692749
    5. '_input' → logprob: -4.30299711227417
    6. ' ,' → logprob: -5.67799711227417
    7. '=' → logprob: -5.80299711227417
    8. 'space' → logprob: -5.80299711227417
    9. ' =' → logprob: -6.17799711227417
    10. ' _' → logprob: -7.05299711227417

Token 5: '_value' (ID: 6734)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.08551045507192612
    2. ')' → logprob: -3.460510492324829
    3. '.' → logprob: -3.710510492324829
    4. '[' → logprob: -4.21051025390625
    5. '_value' → logprob: -5.58551025390625
    6. '=' → logprob: -5.83551025390625
    7. '```' → logprob: -6.58551025390625
    8. ')_' → logprob: -7.21051025390625
    9. '._' → logprob: -7.58551025390625
    10. ',' → logprob: -8.21051025390625

Token 6: '_second' (ID: 67724)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.014060676097869873
    2. ')' → logprob: -5.5140604972839355
    3. '=' → logprob: -5.5140604972839355
    4. '[' → logprob: -5.7640604972839355
    5. ',' → logprob: -7.2640604972839355
    6. '.' → logprob: -7.2640604972839355
    7. '```' → logprob: -7.6390604972839355
    8. ' =' → logprob: -8.514060974121094
    9. '_,' → logprob: -9.764060974121094
    10. '+' → logprob: -10.014060974121094

Token 7: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.0842793732881546
    2. ',' → logprob: -3.0842792987823486
    3. '=' → logprob: -3.7092792987823486
    4. ')' → logprob: -5.584279537200928
    5. '+' → logprob: -6.209279537200928
    6. '.' → logprob: -6.459279537200928
    7. '```' → logprob: -6.709279537200928
    8. '[' → logprob: -7.209279537200928
    9. '(' → logprob: -8.08427906036377
    10. ':' → logprob: -8.70927906036377

Token 8: ' map' (ID: 4014)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.5989841222763062
    2. 'input' → logprob: -0.8489841222763062
    3. ' ' → logprob: -4.098984241485596
    4. ' map' → logprob: -5.598984241485596
    5. ' []' → logprob: -6.848984241485596
    6. 'map' → logprob: -7.348984241485596
    7. ' int' → logprob: -9.223983764648438
    8. '[]' → logprob: -9.473983764648438
    9. ' None' → logprob: -9.723983764648438
    10. '0' → logprob: -9.848983764648438

Token 9: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.9388097524642944
    2. '(lambda' → logprob: -1.1888097524642944
    3. '(' → logprob: -1.6888097524642944
    4. '(str' → logprob: -2.688809871673584
    5. '<|end|>' → logprob: -3.938809871673584
    6. '(input' → logprob: -4.688809871673584
    7. '```' → logprob: -5.063809871673584
    8. 'int' → logprob: -5.938809871673584
    9. '[int' → logprob: -6.188809871673584
    10. '(eval' → logprob: -6.188809871673584

Token 10: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.013504412025213242
    2. ')' → logprob: -4.638504505157471
    3. 'input' → logprob: -6.388504505157471
    4. '(' → logprob: -6.888504505157471
    5. '(user' → logprob: -7.763504505157471
    6. ' input' → logprob: -8.638504028320312
    7. ',input' → logprob: -9.013504028320312
    8. ',' → logprob: -9.763504028320312
    9. '```' → logprob: -9.888504028320312
    10. '('' → logprob: -10.138504028320312

Token 11: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.07891303300857544
    2. ' input' → logprob: -2.5789129734039307
    3. '(input' → logprob: -11.203912734985352
    4. ')' → logprob: -11.953912734985352
    5. 'user' → logprob: -14.078912734985352
    6. ',input' → logprob: -14.828912734985352
    7. '```' → logprob: -14.953912734985352
    8. '[input' → logprob: -14.953912734985352
    9. 'str' → logprob: -15.453912734985352
    10. '<input' → logprob: -15.453912734985352

Token 12: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.7473865747451782
    2. '())' → logprob: -1.3723865747451782
    3. '(' → logprob: -1.4973865747451782
    4. '`()' → logprob: -3.8723864555358887
    5. ')' → logprob: -5.247386455535889
    6. '('' → logprob: -5.372386455535889
    7. '().' → logprob: -5.372386455535889
    8. '(()' → logprob: -5.872386455535889
    9. '```' → logprob: -6.247386455535889
    10. ' ())' → logprob: -6.372386455535889

Token 13: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -4.0722858102526516e-05
    2. 'strip' → logprob: -10.250041007995605
    3. ' split' → logprob: -13.000041007995605
    4. 'rstrip' → logprob: -13.625041007995605
    5. ')' → logprob: -14.000041007995605
    6. 'spl' → logprob: -14.250041007995605
    7. '(split' → logprob: -16.25004005432129
    8. 'startswith' → logprob: -16.50004005432129
    9. '```' → logprob: -16.75004005432129
    10. '_split' → logprob: -17.00004005432129

Token 14: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.07305561006069183
    2. ')' → logprob: -2.9480555057525635
    3. '))' → logprob: -4.573055744171143
    4. '()))' → logprob: -5.323055744171143
    5. '()' → logprob: -6.073055744171143
    6. '(' → logprob: -8.073055267333984
    7. '('' → logprob: -9.073055267333984
    8. ' ())' → logprob: -10.448055267333984
    9. '`)' → logprob: -11.573055267333984
    10. '')' → logprob: -12.073055267333984

Token 15: 'if' (ID: 366)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.06259280443191528
    2. '+
' → logprob: -3.8125927448272705
    3. '*' → logprob: -4.43759298324585
    4. '#' → logprob: -4.56259298324585
    5. '<|end|>' → logprob: -5.68759298324585
    6. 'if' → logprob: -5.81259298324585
    7. ')' → logprob: -5.93759298324585
    8. ',' → logprob: -6.31259298324585
    9. '
' → logprob: -7.18759298324585
    10. ' ' → logprob: -7.43759298324585

Token 16: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.006678186822682619
    2. 'input' → logprob: -5.131678104400635
    3. ' ' → logprob: -7.256678104400635
    4. ' not' → logprob: -10.756678581237793
    5. '(input' → logprob: -11.631678581237793
    6. ' len' → logprob: -12.881678581237793
    7. ' (' → logprob: -12.881678581237793
    8. '_input' → logprob: -13.506678581237793
    9. ' a' → logprob: -14.006678581237793
    10. ' user' → logprob: -14.381678581237793

Token 17: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.013880329206585884
    2. '_' → logprob: -4.388880252838135
    3. '_val' → logprob: -7.138880252838135
    4. ' _' → logprob: -8.013880729675293
    5. ')_' → logprob: -9.263880729675293
    6. '_values' → logprob: -10.388880729675293
    7. '```' → logprob: -10.888880729675293
    8. '('_' → logprob: -11.388880729675293
    9. '(' → logprob: -11.763880729675293
    10. 'Value' → logprob: -11.763880729675293

Token 18: '_first' (ID: 29347)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.5417096614837646
    2. '_first' → logprob: -0.9167096614837646
    3. '_second' → logprob: -4.166709899902344
    4. ' _' → logprob: -6.291709899902344
    5. '_f' → logprob: -8.166709899902344
    6. '__' → logprob: -8.666709899902344
    7. '_FIRST' → logprob: -9.291709899902344
    8. ''_' → logprob: -9.541709899902344
    9. '___' → logprob: -9.916709899902344
    10. 'First' → logprob: -10.041709899902344

Token 19: ' <=' (ID: 5017)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.0355905257165432
    2. ' ==' → logprob: -4.160590648651123
    3. '>' → logprob: -5.035590648651123
    4. ' ' → logprob: -5.410590648651123
    5. ' <' → logprob: -5.660590648651123
    6. ' >=' → logprob: -6.035590648651123
    7. ' <=' → logprob: -6.910590648651123
    8. '==' → logprob: -7.285590648651123
    9. '  ' → logprob: -8.160590171813965
    10. ' !=' → logprob: -9.160590171813965

Token 20: ' ' (ID: 220)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.4109959900379181
    2. 'input' → logprob: -1.1609959602355957
    3. ' ' → logprob: -4.660995960235596
    4. '0' → logprob: -4.910995960235596
    5. '10' → logprob: -5.160995960235596
    6. '100' → logprob: -7.660995960235596
    7. '20' → logprob: -8.285996437072754
    8. '5' → logprob: -8.285996437072754
    9. '1' → logprob: -9.035996437072754
    10. '50' → logprob: -10.160996437072754

Token 21: '8' (ID: 23)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.16320249438285828
    2. ' input' → logprob: -2.0382025241851807
    3. '0' → logprob: -4.288202285766602
    4. '10' → logprob: -5.663202285766602
    5. ' ' → logprob: -6.163202285766602
    6. '1' → logprob: -8.038202285766602
    7. '5' → logprob: -8.538202285766602
    8. '100' → logprob: -8.663202285766602
    9. '20' → logprob: -9.288202285766602
    10. '50' → logprob: -9.913202285766602

Token 22: ' and' (ID: 326)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.010381107218563557
    2. ' :' → logprob: -4.76038122177124
    3. ' and' → logprob: -6.38538122177124
    4. 'and' → logprob: -10.760380744934082
    5. ':
' → logprob: -11.260380744934082
    6. ':**' → logprob: -12.135380744934082
    7. '>' → logprob: -12.260380744934082
    8. '):' → logprob: -12.510380744934082
    9. '   ' → logprob: -12.510380744934082
    10. '>:' → logprob: -12.635380744934082

Token 23: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.01720256358385086
    2. 'input' → logprob: -4.142202377319336
    3. ' ' → logprob: -6.767202377319336
    4. '(input' → logprob: -12.892202377319336
    5. ' (' → logprob: -12.892202377319336
    6. '0' → logprob: -13.017202377319336
    7. '  ' → logprob: -13.142202377319336
    8. ' ' → logprob: -13.267202377319336
    9. '"' → logprob: -14.267202377319336
    10. '	input' → logprob: -14.392202377319336

Token 24: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -3.297462171758525e-05
    2. '_' → logprob: -10.750033378601074
    3. ' _' → logprob: -12.625033378601074
    4. '_val' → logprob: -13.000033378601074
    5. '```' → logprob: -13.250033378601074
    6. ')_' → logprob: -14.000033378601074
    7. ''_' → logprob: -14.375033378601074
    8. '"_' → logprob: -14.625033378601074
    9. '_Value' → logprob: -14.875033378601074
    10. '__' → logprob: -15.500033378601074

Token 25: '_second' (ID: 67724)
  Prédit: '_second'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_second' → logprob: -0.00028731857310049236
    2. '_first' → logprob: -8.875287055969238
    3. '_' → logprob: -9.375287055969238
    4. '_value' → logprob: -9.750287055969238
    5. 'second' → logprob: -14.125287055969238
    6. '_seconds' → logprob: -14.375287055969238
    7. '```' → logprob: -14.375287055969238
    8. '_s' → logprob: -14.750287055969238
    9. '_last' → logprob: -14.875287055969238
    10. ' _' → logprob: -15.250287055969238

Token 26: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.003241881961002946
    2. '<=' → logprob: -6.503242015838623
    3. ' >' → logprob: -7.253242015838623
    4. ' >=' → logprob: -7.378242015838623
    5. ' ' → logprob: -8.503241539001465
    6. ' <' → logprob: -8.753241539001465
    7. ' ==' → logprob: -11.128241539001465
    8. '>' → logprob: -11.378241539001465
    9. '<|end|>' → logprob: -12.503241539001465
    10. '>=' → logprob: -13.128241539001465

Token 27: ' ' (ID: 220)
  Prédit: '8'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '8' → logprob: -0.17023217678070068
    2. ' ' → logprob: -2.0452322959899902
    3. '3' → logprob: -5.79523229598999
    4. '15' → logprob: -5.92023229598999
    5. '10' → logprob: -5.92023229598999
    6. '4' → logprob: -6.17023229598999
    7. '9' → logprob: -6.17023229598999
    8. '7' → logprob: -6.42023229598999
    9. '12' → logprob: -6.42023229598999
    10. '16' → logprob: -6.79523229598999

Token 28: '8' (ID: 23)
  Prédit: '8'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '8' → logprob: -0.011940868571400642
    2. '3' → logprob: -6.511940956115723
    3. '4' → logprob: -7.136940956115723
    4. '7' → logprob: -7.136940956115723
    5. '10' → logprob: -7.136940956115723
    6. '12' → logprob: -7.136940956115723
    7. '15' → logprob: -7.136940956115723
    8. ' ' → logprob: -7.136940956115723
    9. '23' → logprob: -7.136940956115723
    10. '9' → logprob: -7.261940956115723

Token 29: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00042268994729965925
    2. ' :' → logprob: -8.000422477722168
    3. ':
' → logprob: -10.250422477722168
    4. ':**' → logprob: -10.750422477722168
    5. ' and' → logprob: -11.500422477722168
    6. '):' → logprob: -11.750422477722168
    7. ',' → logprob: -12.500422477722168
    8. '':' → logprob: -12.750422477722168
    9. '>:' → logprob: -13.750422477722168
    10. ',:' → logprob: -14.125422477722168

Token 30: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.059468816965818405
    2. '\n' → logprob: -3.8094687461853027
    3. ' print' → logprob: -4.559468746185303
    4. '
' → logprob: -4.684468746185303
    5. 'print' → logprob: -4.934468746185303
    6. '    
' → logprob: -5.934468746185303
    7. ':' → logprob: -6.809468746185303
    8. '<|end|>' → logprob: -7.184468746185303
    9. '```' → logprob: -7.309468746185303
    10. '\' → logprob: -7.434468746185303

Token 31: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.04047683626413345
    2. 'print' (adapté à ' print') → logprob: -3.4154767990112305
    3. '   ' → logprob: -5.2904767990112305
    4. ' pass' → logprob: -6.6654767990112305
    5. '    ' → logprob: -8.91547679901123
    6. ' ' → logprob: -8.91547679901123
    7. '       ' → logprob: -10.29047679901123
    8. '```' → logprob: -10.66547679901123
    9. 'pass' → logprob: -10.66547679901123
    10. ' ' → logprob: -11.04047679901123

Token 32: '('' (ID: 706)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.01753903739154339
    2. '("("' → logprob: -5.017539024353027
    3. '("' → logprob: -5.392539024353027
    4. '('' → logprob: -5.767539024353027
    5. '(input' → logprob: -5.892539024353027
    6. '((' → logprob: -8.642539024353027
    7. '()' → logprob: -10.017539024353027
    8. '("(' → logprob: -11.017539024353027
    9. '("")' → logprob: -11.142539024353027
    10. '(max' → logprob: -11.517539024353027

Token 33: 'Y' (ID: 56)
  Prédit: 'Y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Y' → logprob: -0.40809693932533264
    2. 'Yes' → logprob: -1.2830969095230103
    3. 'YES' → logprob: -4.158096790313721
    4. '*' → logprob: -4.283096790313721
    5. 'yes' → logprob: -4.533096790313721
    6. '8' → logprob: -6.033096790313721
    7. 'Hello' → logprob: -6.408096790313721
    8. '2' → logprob: -6.658096790313721
    9. '[Y' → logprob: -6.783096790313721
    10. '1' → logprob: -6.908096790313721

Token 34: 'ay' (ID: 356)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '')' → logprob: -0.5191956162452698
    2. 'es' → logprob: -1.519195556640625
    3. ')' → logprob: -2.269195556640625
    4. 'ES' → logprob: -2.519195556640625
    5. 'E' → logprob: -7.269195556640625
    6. 'e' → logprob: -7.519195556640625
    7. 'Es' → logprob: -7.769195556640625
    8. ''es' → logprob: -8.644195556640625
    9. 'ou' → logprob: -10.269195556640625
    10. 'A' → logprob: -10.519195556640625

Token 35: '!')
' (ID: 82203)
  Prédit: '!'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '!' → logprob: -0.007778518367558718
    2. '')' → logprob: -4.882778644561768
    3. ')' → logprob: -8.75777816772461
    4. '!)' → logprob: -11.75777816772461
    5. '!")' → logprob: -12.63277816772461
    6. '!')
' → logprob: -13.38277816772461
    7. '!'' → logprob: -13.38277816772461
    8. '！' → logprob: -15.25777816772461
    9. ''' → logprob: -15.63277816772461
    10. '")' → logprob: -15.88277816772461

Token 36: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.6180922985076904
    2. '<|end|>' → logprob: -1.3680922985076904
    3. '
' → logprob: -2.1180922985076904
    4. ' else' → logprob: -3.3680922985076904
    5. '!' → logprob: -3.6180922985076904
    6. '\n' → logprob: -4.8680925369262695
    7. 'elif' → logprob: -5.8680925369262695
    8. ')' → logprob: -6.1180925369262695
    9. ' ' → logprob: -6.2430925369262695
    10. '```' → logprob: -6.3680925369262695

Token 37: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -9.610702363715973e-06
    2. ':
' → logprob: -12.250009536743164
    3. ' :' → logprob: -12.625009536743164
    4. '):' → logprob: -14.250009536743164
    5. '   ' → logprob: -14.625009536743164
    6. ':**' → logprob: -15.375009536743164
    7. '():' → logprob: -16.750009536743164
    8. '.' → logprob: -17.125009536743164
    9. ':return' → logprob: -17.250009536743164
    10. '<|end|>' → logprob: -17.500009536743164

Token 38: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07331740111112595
    2. '<|end|>' → logprob: -3.698317289352417
    3. ''' → logprob: -3.948317289352417
    4. '    ' → logprob: -4.698317527770996
    5. ' ' → logprob: -4.698317527770996
    6. ' print' → logprob: -6.323317527770996
    7. '```' → logprob: -6.698317527770996
    8. 'print' → logprob: -6.948317527770996
    9. '<|end|>' → logprob: -7.198317527770996
    10. ' ' → logprob: -7.323317527770996

Token 39: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.02105993963778019
    2. ' print' → logprob: -3.896059989929199
    3. '   ' → logprob: -8.2710599899292
    4. 'pass' → logprob: -9.2710599899292
    5. ' ' → logprob: -10.0210599899292
    6. ''' → logprob: -10.2710599899292
    7. ' pass' → logprob: -11.2710599899292
    8. '('' → logprob: -11.3960599899292
    9. 'Print' → logprob: -11.5210599899292
    10. '	print' → logprob: -11.8960599899292

Token 40: '(':' (ID: 36524)
  Prédit: '(''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '('' → logprob: -0.16029144823551178
    2. '(' → logprob: -1.9102914333343506
    3. '()' → logprob: -10.28529167175293
    4. '("' → logprob: -11.53529167175293
    5. '('(' → logprob: -11.66029167175293
    6. '(False' → logprob: -11.91029167175293
    7. '("("' → logprob: -12.66029167175293
    8. '(True' → logprob: -13.41029167175293
    9. '(None' → logprob: -13.53529167175293
    10. '('.')' → logprob: -14.78529167175293

Token 41: '('' (ID: 706)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4716298282146454
    2. ''(' → logprob: -1.5966298580169678
    3. ''' → logprob: -2.0966298580169678
    4. '('' → logprob: -3.0966298580169678
    5. '')' → logprob: -6.221629619598389
    6. ')' → logprob: -6.846629619598389
    7. '-(' → logprob: -7.221629619598389
    8. ''''' → logprob: -8.221630096435547
    9. '((' → logprob: -8.471630096435547
    10. ''-' → logprob: -9.471630096435547

Token 42: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -7.433829159708694e-05
    2. ')
' → logprob: -9.75007438659668
    3. '')' → logprob: -11.25007438659668
    4. '```' → logprob: -14.12507438659668
    5. '`)' → logprob: -14.37507438659668
    6. '<|end|>' → logprob: -14.62507438659668
    7. '\n' → logprob: -14.87507438659668
    8. ')

' → logprob: -15.75007438659668
    9. '")' → logprob: -15.87507438659668
    10. '))' → logprob: -16.00007438659668


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 40
Tokens correctement prédits (1ère position, stricte): 15
Tokens correctement prédits (1ère position, avec adaptation): 16
Tokens correctement prédits (top 10): 33
Précision stricte (1ère position): 37.50%
Précision adaptée (1ère position): 40.00%
Précision (top 10): 82.50%
================================================================================
