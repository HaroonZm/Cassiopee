================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:16:43
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
s, w = map(int, input().split())
if s <= w:
    print('unsafe')
else:
    print('safe')
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 's' (ID: 82)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' w' (ID: 286)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.19768375158309937
    2. '.' → logprob: -2.197683811187744
    3. ',' → logprob: -3.072683811187744
    4. ' =' → logprob: -4.197683811187744
    5. '[' → logprob: -5.447683811187744
    6. '+' → logprob: -7.072683811187744
    7. '_' → logprob: -7.947683811187744
    8. ':' → logprob: -8.197683334350586
    9. ''' → logprob: -8.447683334350586
    10. ')' → logprob: -8.572683334350586

Token 4: ' map' (ID: 4014)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -1.1673004627227783
    2. ' input' → logprob: -1.7923004627227783
    3. ' ' → logprob: -1.9173004627227783
    4. ' s' → logprob: -2.1673004627227783
    5. 's' → logprob: -2.6673004627227783
    6. '0' → logprob: -2.9173004627227783
    7. 'map' → logprob: -2.9173004627227783
    8. ' map' → logprob: -3.0423004627227783
    9. '5' → logprob: -5.542300224304199
    10. '1' → logprob: -5.792300224304199

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.8690384030342102
    2. '(int' → logprob: -1.4940383434295654
    3. '(lambda' → logprob: -1.6190383434295654
    4. '(str' → logprob: -2.4940383434295654
    5. '[int' → logprob: -3.3690383434295654
    6. '<|end|>' → logprob: -3.8690383434295654
    7. ')' → logprob: -5.8690385818481445
    8. '[str' → logprob: -5.9940385818481445
    9. '```' → logprob: -6.2440385818481445
    10. 'int' → logprob: -6.4940385818481445

Token 6: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.3881245255470276
    2. ')' → logprob: -1.2631244659423828
    3. '(' → logprob: -3.513124465942383
    4. '(s' → logprob: -6.138124465942383
    5. 'input' → logprob: -6.513124465942383
    6. '```' → logprob: -6.888124465942383
    7. '(str' → logprob: -7.013124465942383
    8. ')(' → logprob: -7.388124465942383
    9. '`)' → logprob: -7.763124465942383
    10. '(raw' → logprob: -7.763124465942383

Token 7: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.02975917048752308
    2. ' input' → logprob: -3.529759168624878
    3. '(input' → logprob: -12.404759407043457
    4. 's' → logprob: -13.029759407043457
    5. ')' → logprob: -13.529759407043457
    6. ',input' → logprob: -15.279759407043457
    7. ' s' → logprob: -15.654759407043457
    8. '<input' → logprob: -15.779759407043457
    9. '=input' → logprob: -15.779759407043457
    10. 'str' → logprob: -16.27975845336914

Token 8: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.27269232273101807
    2. '())' → logprob: -1.522692322731018
    3. '(' → logprob: -4.8976922035217285
    4. '().' → logprob: -5.8976922035217285
    5. '(()' → logprob: -5.8976922035217285
    6. ')' → logprob: -6.3976922035217285
    7. '`()' → logprob: -6.3976922035217285
    8. '());' → logprob: -6.8976922035217285
    9. '()`' → logprob: -7.2726922035217285
    10. '();)' → logprob: -7.7726922035217285

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0004969134461134672
    2. 'strip' → logprob: -7.625496864318848
    3. ' split' → logprob: -12.500496864318848
    4. ')' → logprob: -12.875496864318848
    5. 'rstrip' → logprob: -13.375496864318848
    6. '(split' → logprob: -14.250496864318848
    7. 'read' → logprob: -15.250496864318848
    8. 'spl' → logprob: -16.750497817993164
    9. 'startswith' → logprob: -17.250497817993164
    10. '```' → logprob: -17.500497817993164

Token 10: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.10660368949174881
    2. ')' → logprob: -2.3566036224365234
    3. '()' → logprob: -5.356603622436523
    4. '()))' → logprob: -7.106603622436523
    5. '))' → logprob: -7.481603622436523
    6. '`)' → logprob: -9.356603622436523
    7. '('' → logprob: -9.606603622436523
    8. '(' → logprob: -9.856603622436523
    9. ' ())' → logprob: -11.106603622436523
    10. '()),' → logprob: -12.356603622436523

Token 11: 'if' (ID: 366)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -1.4288368225097656
    2. 'x' → logprob: -1.9288368225097656
    3. 'a' → logprob: -2.0538368225097656
    4. 'd' → logprob: -2.0538368225097656
    5. 'i' → logprob: -2.4288368225097656
    6. 'if' → logprob: -2.4288368225097656
    7. 'r' → logprob: -3.3038368225097656
    8. '`' → logprob: -3.5538368225097656
    9. 'h' → logprob: -3.6788368225097656
    10. '#' → logprob: -3.6788368225097656

Token 12: ' s' (ID: 265)
  Prédit: ' s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.011145210824906826
    2. 's' → logprob: -4.761145114898682
    3. ' w' → logprob: -6.636145114898682
    4. ' ' → logprob: -6.886145114898682
    5. ' ' → logprob: -9.51114559173584
    6. ' not' → logprob: -9.76114559173584
    7. 'w' → logprob: -10.13614559173584
    8. ' (' → logprob: -12.01114559173584
    9. '(s' → logprob: -12.51114559173584
    10. '_' → logprob: -13.01114559173584

Token 13: ' <=' (ID: 5017)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.09703408181667328
    2. '>' → logprob: -3.347033977508545
    3. ' >=' → logprob: -3.597033977508545
    4. ' <' → logprob: -4.347033977508545
    5. ' ==' → logprob: -4.972033977508545
    6. ' ' → logprob: -5.472033977508545
    7. ' <=' → logprob: -5.722033977508545
    8. '<' → logprob: -6.972033977508545
    9. '==' → logprob: -7.847033977508545
    10. '>=' → logprob: -8.097034454345703

Token 14: ' w' (ID: 286)
  Prédit: 'w'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'w' → logprob: -0.211553156375885
    2. ' w' → logprob: -1.7115530967712402
    3. ' ' → logprob: -5.46155309677124
    4. '0' → logprob: -6.33655309677124
    5. '10' → logprob: -7.08655309677124
    6. '100' → logprob: -7.58655309677124
    7. '20' → logprob: -7.83655309677124
    8. '50' → logprob: -7.96155309677124
    9. '5' → logprob: -8.586553573608398
    10. '48' → logprob: -9.336553573608398

Token 15: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00046558488975279033
    2. ' :' → logprob: -8.000465393066406
    3. '':' → logprob: -9.875465393066406
    4. '+:' → logprob: -10.750465393066406
    5. '>:' → logprob: -11.250465393066406
    6. '>' → logprob: -11.250465393066406
    7. ':**' → logprob: -11.625465393066406
    8. ' and' → logprob: -12.500465393066406
    9. '):' → logprob: -12.875465393066406
    10. '+' → logprob: -13.000465393066406

Token 16: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.3677365183830261
    2. 'print' → logprob: -1.367736577987671
    3. ' print' → logprob: -3.867736577987671
    4. '   ' → logprob: -3.867736577987671
    5. ':
' → logprob: -4.867736339569092
    6. ' :' → logprob: -7.117736339569092
    7. ':
' → logprob: -7.617736339569092
    8. ' ' → logprob: -7.992736339569092
    9. ''' → logprob: -8.49273681640625
    10. '.' → logprob: -8.74273681640625

Token 17: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.006728991866111755
    2. ' print' → logprob: -5.0067291259765625
    3. '   ' → logprob: -12.631729125976562
    4. '"' → logprob: -12.756729125976562
    5. ''' → logprob: -13.131729125976562
    6. 's' → logprob: -14.131729125976562
    7. 'pr' → logprob: -14.256729125976562
    8. '```' → logprob: -14.256729125976562
    9. ' ' → logprob: -14.506729125976562
    10. 'pass' → logprob: -14.881729125976562

Token 18: '('' (ID: 706)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.01880049519240856
    2. '("' → logprob: -4.143800258636475
    3. '('' → logprob: -6.893800258636475
    4. '(s' → logprob: -6.893800258636475
    5. '("("' → logprob: -7.643800258636475
    6. '(True' → logprob: -9.518800735473633
    7. '"' → logprob: -10.268800735473633
    8. '(False' → logprob: -10.768800735473633
    9. '("")' → logprob: -10.893800735473633
    10. '()' → logprob: -11.018800735473633

Token 19: 'unsafe' (ID: 66907)
  Prédit: 'unsafe'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'unsafe' → logprob: -0.02009379118680954
    2. 'safe' → logprob: -4.64509391784668
    3. 'Yes' → logprob: -5.77009391784668
    4. 'yes' → logprob: -6.14509391784668
    5. ' unsafe' → logprob: -6.64509391784668
    6. 'Unsafe' → logprob: -6.89509391784668
    7. ''' → logprob: -6.89509391784668
    8. 'danger' → logprob: -7.52009391784668
    9. 'uns' → logprob: -8.14509391784668
    10. 'YES' → logprob: -8.52009391784668

Token 20: '')
' (ID: 2515)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.00021331508469302207
    2. ')' → logprob: -8.500213623046875
    3. ''' → logprob: -12.250213623046875
    4. '')
' → logprob: -12.750213623046875
    5. '")' → logprob: -13.375213623046875
    6. '')
' → logprob: -16.250213623046875
    7. '')

' → logprob: -16.250213623046875
    8. '('' → logprob: -16.500213623046875
    9. ':' → logprob: -17.125213623046875
    10. ' ')' → logprob: -17.250213623046875

Token 21: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.0248874444514513
    2. ' else' → logprob: -4.024887561798096
    3. '<|end|>' → logprob: -5.149887561798096
    4. '```' → logprob: -7.649887561798096
    5. 'elif' → logprob: -8.274887084960938
    6. ')' → logprob: -9.649887084960938
    7. '<|end|>' → logprob: -10.024887084960938
    8. '#else' → logprob: -11.024887084960938
    9. '_else' → logprob: -11.024887084960938
    10. '	else' → logprob: -11.774887084960938

Token 22: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -8.566264295950532e-05
    2. ':
' → logprob: -9.375085830688477
    3. '   ' → logprob: -14.875085830688477
    4. ' :' → logprob: -15.250085830688477
    5. ':return' → logprob: -16.875085830688477
    6. '):' → logprob: -17.000085830688477
    7. '```' → logprob: -17.500085830688477
    8. ':
' → logprob: -17.500085830688477
    9. ':

' → logprob: -17.625085830688477
    10. ':**' → logprob: -17.625085830688477

Token 23: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0024753010366111994
    2. 'print' → logprob: -6.377475261688232
    3. ' print' → logprob: -7.252475261688232
    4. '```' → logprob: -10.50247573852539
    5. '    ' → logprob: -10.62747573852539
    6. '   ' → logprob: -12.75247573852539
    7. '       ' → logprob: -13.12747573852539
    8. '\n' → logprob: -13.25247573852539
    9. '``' → logprob: -13.37747573852539
    10. '	print' → logprob: -13.62747573852539

Token 24: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.04053487628698349
    2. ' print' → logprob: -3.2905349731445312
    3. '   ' → logprob: -6.040534973144531
    4. '```' → logprob: -10.415534973144531
    5. '\n' → logprob: -11.040534973144531
    6. '    ' → logprob: -11.540534973144531
    7. '	print' → logprob: -11.665534973144531
    8. ''' → logprob: -11.790534973144531
    9. ' safe' → logprob: -11.915534973144531
    10. '       ' → logprob: -12.040534973144531

Token 25: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.12695099413394928
    2. '(' → logprob: -2.126950979232788
    3. '()' → logprob: -11.376951217651367
    4. '("' → logprob: -11.876951217651367
    5. '('(' → logprob: -13.376951217651367
    6. '(('' → logprob: -14.001951217651367
    7. '(True' → logprob: -14.126951217651367
    8. '(False' → logprob: -15.001951217651367
    9. '(
' → logprob: -15.251951217651367
    10. ''' → logprob: -15.251951217651367

Token 26: 'safe' (ID: 46891)
  Prédit: ''s'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''s' → logprob: -0.0010971187148243189
    2. 'safe' → logprob: -6.876097202301025
    3. ''' → logprob: -9.876096725463867
    4. ' safe' → logprob: -12.376096725463867
    5. '   ' → logprob: -12.501096725463867
    6. 's' → logprob: -13.376096725463867
    7. '"' → logprob: -13.876096725463867
    8. ' '' → logprob: -14.251096725463867
    9. '`s' → logprob: -15.126096725463867
    10. ''ok' → logprob: -15.126096725463867

Token 27: '')' (ID: 1542)
  Prédit: '')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -7.541112427134067e-05
    2. ')' → logprob: -9.500075340270996
    3. '')
' → logprob: -15.500075340270996
    4. ''' → logprob: -15.750075340270996
    5. '")' → logprob: -15.875075340270996
    6. '('' → logprob: -17.625076293945312
    7. '')

' → logprob: -18.375076293945312
    8. '')
' → logprob: -18.500076293945312
    9. ' ')' → logprob: -19.375076293945312
    10. ''))' → logprob: -19.750076293945312


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 25
Tokens correctement prédits (1ère position, stricte): 7
Tokens correctement prédits (1ère position, avec adaptation): 9
Tokens correctement prédits (top 10): 22
Précision stricte (1ère position): 28.00%
Précision adaptée (1ère position): 36.00%
Précision (top 10): 88.00%
================================================================================
