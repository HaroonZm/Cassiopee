================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:21:01
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def get_input():
    return input()

def convert_to_float(value):
    return float(value)

def cube(value):
    return value ** 3

def divide(value, divisor):
    return value / divisor

def format_output(value, decimals=10):
    format_str = '{:.' + str(decimals) + 'f}'
    return format_str.format(value)

def print_output(formatted_value):
    print(formatted_value)

def calculate_result(L):
    cubed = cube(L)
    divided = divide(cubed, 27.0)
    return divided

def main():
    raw_input = get_input()
    L = convert_to_float(raw_input)
    result = calculate_result(L)
    formatted_result = format_output(result, 10)
    print_output(formatted_result)

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' get' (ID: 717)
  → Token d'amorce (pas de prédiction)

Token 2: '_input' (ID: 12507)
  → Token d'amorce (pas de prédiction)

Token 3: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.016520852223038673
    2. '_' → logprob: -4.141520977020264
    3. '():' → logprob: -8.516520500183105
    4. '(:' → logprob: -9.266520500183105
    5. ' (' → logprob: -10.141520500183105
    6. '(_' → logprob: -10.141520500183105
    7. '(_:' → logprob: -10.516520500183105
    8. '```' → logprob: -11.016520500183105
    9. '()' → logprob: -11.516520500183105
    10. ':' → logprob: -11.766520500183105

Token 4: '   ' (ID: 271)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.09528274089097977
    2. '\' → logprob: -3.845282793045044
    3. '   ' → logprob: -4.095282554626465
    4. '(' → logprob: -4.470282554626465
    5. '\n' → logprob: -4.470282554626465
    6. '    
' → logprob: -4.970282554626465
    7. '``' → logprob: -5.970282554626465
    8. ':' → logprob: -5.970282554626465
    9. '`' → logprob: -6.220282554626465
    10. '()' → logprob: -6.220282554626465

Token 5: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.1634688824415207
    2. 'input' → logprob: -2.538468837738037
    3. 'user' → logprob: -3.413468837738037
    4. '   ' → logprob: -4.038468837738037
    5. ' return' → logprob: -5.288468837738037
    6. 'x' → logprob: -5.538468837738037
    7. '```' → logprob: -5.538468837738037
    8. ' ' → logprob: -5.663468837738037
    9. 'text' → logprob: -6.788468837738037
    10. 'i' → logprob: -7.288468837738037

Token 6: ' input' (ID: 3422)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.376924067735672
    2. ' input' → logprob: -1.3769240379333496
    3. 'input' → logprob: -3.3769240379333496
    4. '"' → logprob: -4.00192403793335
    5. ''' → logprob: -5.25192403793335
    6. ' "' → logprob: -6.62692403793335
    7. ' '' → logprob: -7.12692403793335
    8. '  ' → logprob: -7.37692403793335
    9. ' None' → logprob: -8.126924514770508
    10. '(input' → logprob: -8.126924514770508

Token 7: '()

' (ID: 5874)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0012204634258523583
    2. '('' → logprob: -7.251220226287842
    3. '()' → logprob: -7.876220226287842
    4. '("("' → logprob: -9.501220703125
    5. ''' → logprob: -11.001220703125
    6. '("")' → logprob: -11.501220703125
    7. ' (' → logprob: -11.876220703125
    8. '(
' → logprob: -12.501220703125
    9. ' ' → logprob: -12.626220703125
    10. '```' → logprob: -13.001220703125

Token 8: 'def' (ID: 1314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -1.0797399282455444
    2. 'def' → logprob: -1.4547399282455444
    3. '```' → logprob: -2.454740047454834
    4. ':' → logprob: -2.704740047454834
    5. '\n' → logprob: -2.829740047454834
    6. '\' → logprob: -3.329740047454834
    7. '.' → logprob: -3.329740047454834
    8. '(
' → logprob: -3.454740047454834
    9. ')' → logprob: -3.829740047454834
    10. '()' → logprob: -3.829740047454834

Token 9: ' convert' (ID: 8452)
  Prédit: ' calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.6993071436882019
    2. ' get' → logprob: -1.1993072032928467
    3. ' process' → logprob: -2.8243072032928467
    4. ' space' → logprob: -2.9493072032928467
    5. ' user' → logprob: -3.5743072032928467
    6. ' main' → logprob: -4.824306964874268
    7. ' add' → logprob: -4.949306964874268
    8. ' compute' → logprob: -5.074306964874268
    9. ' my' → logprob: -5.199306964874268
    10. '_' → logprob: -5.324306964874268

Token 10: '_to' (ID: 5089)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.27105745673179626
    2. '_to' → logprob: -1.5210574865341187
    3. '(' → logprob: -4.146057605743408
    4. '_string' → logprob: -7.271057605743408
    5. '_token' → logprob: -8.52105712890625
    6. '_text' → logprob: -8.64605712890625
    7. '_value' → logprob: -8.64605712890625
    8. '_lower' → logprob: -8.64605712890625
    9. '(_' → logprob: -8.89605712890625
    10. '_case' → logprob: -9.02105712890625

Token 11: '_float' (ID: 44505)
  Prédit: '_int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_int' → logprob: -0.5231056213378906
    2. '_string' → logprob: -2.3981056213378906
    3. '_lower' → logprob: -2.6481056213378906
    4. '_upper' → logprob: -2.6481056213378906
    5. '_integer' → logprob: -2.7731056213378906
    6. '_' → logprob: -3.2731056213378906
    7. '_float' → logprob: -3.5231056213378906
    8. '_number' → logprob: -3.6481056213378906
    9. '_str' → logprob: -5.148105621337891
    10. '_c' → logprob: -5.898105621337891

Token 12: '(value' (ID: 6333)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0007233949727378786
    2. '_' → logprob: -7.625723361968994
    3. ' (' → logprob: -9.125723838806152
    4. '("("' → logprob: -9.875723838806152
    5. ''' → logprob: -11.625723838806152
    6. ' ' → logprob: -12.000723838806152
    7. '```' → logprob: -12.250723838806152
    8. '(token' → logprob: -12.375723838806152
    9. '   ' → logprob: -12.500723838806152
    10. '()' → logprob: -12.750723838806152

Token 13: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.02188672311604023
    2. ')' → logprob: -3.8968868255615234
    3. ' ):' → logprob: -7.521886825561523
    4. '):
' → logprob: -7.646886825561523
    5. '   ' → logprob: -9.271886825561523
    6. ':' → logprob: -9.521886825561523
    7. '(' → logprob: -10.396886825561523
    8. ' )' → logprob: -10.521886825561523
    9. '=' → logprob: -10.646886825561523
    10. ' ' → logprob: -10.771886825561523

Token 14: '   ' (ID: 271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.026035750284790993
    2. '   ' → logprob: -3.776035785675049
    3. '(float' → logprob: -6.776035785675049
    4. ' (' → logprob: -7.651035785675049
    5. '(
' → logprob: -7.776035785675049
    6. ' return' → logprob: -8.77603530883789
    7. '    ' → logprob: -9.02603530883789
    8. ' ' → logprob: -9.15103530883789
    9. '(value' → logprob: -10.02603530883789
    10. ')' → logprob: -10.02603530883789

Token 15: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1558670848608017
    2. ' try' → logprob: -2.155867099761963
    3. ' return' → logprob: -4.655867099761963
    4. '    ' → logprob: -4.905867099761963
    5. ' ' → logprob: -5.280867099761963
    6. 'try' → logprob: -5.905867099761963
    7. ' float' → logprob: -6.780867099761963
    8. '    
' → logprob: -7.155867099761963
    9. ' 
' → logprob: -7.405867099761963
    10. 'return' (adapté à ' return') → logprob: -7.530867099761963

Token 16: ' float' (ID: 4428)
  Prédit: ' float'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' float' → logprob: -0.008409373462200165
    2. ' ' → logprob: -4.88340950012207
    3. 'float' → logprob: -7.13340950012207
    4. '  ' → logprob: -13.63340950012207
    5. '	float' → logprob: -13.88340950012207
    6. '(float' → logprob: -14.00840950012207
    7. '   ' → logprob: -14.13340950012207
    8. ' ' → logprob: -14.38340950012207
    9. ',float' → logprob: -15.63340950012207
    10. '=float' → logprob: -16.00840950012207

Token 17: '(value' (ID: 6333)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.061985164880752563
    2. '(value' → logprob: -2.8119852542877197
    3. ' (' → logprob: -11.56198501586914
    4. '('' → logprob: -12.56198501586914
    5. '("("' → logprob: -13.93698501586914
    6. '(user' → logprob: -14.06198501586914
    7. '(
' → logprob: -14.06198501586914
    8. '(

' → logprob: -14.93698501586914
    9. '(convert' → logprob: -15.18698501586914
    10. '()' → logprob: -15.18698501586914

Token 18: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.2664456789934775e-06
    2. '))' → logprob: -14.000000953674316
    3. ' )' → logprob: -15.875000953674316
    4. ')))' → logprob: -17.000001907348633
    5. '())' → logprob: -17.750001907348633
    6. ')
' → logprob: -17.750001907348633
    7. '')' → logprob: -18.125001907348633
    8. '()' → logprob: -18.625001907348633
    9. '`)' → logprob: -19.000001907348633
    10. ')`' → logprob: -19.375001907348633

Token 19: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.011530856601893902
    2. 'd' → logprob: -5.761530876159668
    3. '\' → logprob: -6.011530876159668
    4. '#' → logprob: -6.636530876159668
    5. '
' → logprob: -6.636530876159668
    6. '

' → logprob: -6.886530876159668
    7. '```' → logprob: -6.886530876159668
    8. '<|end|>' → logprob: -7.636530876159668
    9. '\n' → logprob: -8.261530876159668
    10. '*' → logprob: -9.886530876159668

Token 20: ' cube' (ID: 46822)
  Prédit: ' calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.12018049508333206
    2. 'calculate' → logprob: -2.370180606842041
    3. ' convert' → logprob: -4.870180606842041
    4. ' main' → logprob: -5.745180606842041
    5. ' process' → logprob: -5.870180606842041
    6. ' square' → logprob: -6.245180606842041
    7. 'convert' → logprob: -7.120180606842041
    8. ' compute' → logprob: -7.245180606842041
    9. 'square' → logprob: -7.870180606842041
    10. 'process' → logprob: -7.870180606842041

Token 21: '(value' (ID: 6333)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00012511172099038959
    2. '_' → logprob: -10.25012493133545
    3. 's' → logprob: -10.62512493133545
    4. '_cube' → logprob: -10.75012493133545
    5. 'def' → logprob: -11.12512493133545
    6. '("("' → logprob: -12.50012493133545
    7. '(
' → logprob: -12.62512493133545
    8. '('' → logprob: -12.75012493133545
    9. ' (' → logprob: -13.00012493133545
    10. '_s' → logprob: -13.37512493133545

Token 22: '):
' (ID: 1883)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.18126600980758667
    2. '):' → logprob: -1.8062660694122314
    3. '(' → logprob: -6.931265830993652
    4. '   ' → logprob: -8.306265830993652
    5. '):
' → logprob: -8.806265830993652
    6. ' ' → logprob: -10.306265830993652
    7. '):

' → logprob: -10.556265830993652
    8. ' )' → logprob: -10.931265830993652
    9. '**' → logprob: -11.181265830993652
    10. ')**' → logprob: -11.431265830993652

Token 23: '   ' (ID: 271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10346996039152145
    2. '(value' → logprob: -2.4784698486328125
    3. 'value' → logprob: -4.8534698486328125
    4. '   ' → logprob: -6.1034698486328125
    5. '**' → logprob: -6.2284698486328125
    6. ' value' → logprob: -7.1034698486328125
    7. '*' → logprob: -7.7284698486328125
    8. ')' → logprob: -8.603469848632812
    9. 'return' → logprob: -8.728469848632812
    10. ' (' → logprob: -8.853469848632812

Token 24: ' return' (ID: 622)
  Prédit: 'value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'value' → logprob: -0.20681659877300262
    2. ' value' → logprob: -2.4568166732788086
    3. 'return' (adapté à ' return') → logprob: -2.8318166732788086
    4. ' return' → logprob: -3.3318166732788086
    5. '   ' → logprob: -5.081816673278809
    6. ' ' → logprob: -9.206816673278809
    7. '(value' → logprob: -9.331816673278809
    8. '**' → logprob: -10.456816673278809
    9. ' **' → logprob: -10.956816673278809
    10. '  ' → logprob: -11.331816673278809

Token 25: ' value' (ID: 1432)
  Prédit: ' value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' value' → logprob: -0.03804963827133179
    2. 'value' → logprob: -3.2880496978759766
    3. '(value' → logprob: -12.538049697875977
    4. ' ' → logprob: -12.788049697875977
    5. ' (' → logprob: -14.913049697875977
    6. '   ' → logprob: -15.038049697875977
    7. '"value' → logprob: -16.163049697875977
    8. '	value' → logprob: -16.288049697875977
    9. ' pow' → logprob: -16.288049697875977
    10. '  ' → logprob: -16.288049697875977

Token 26: ' **' (ID: 6240)
  Prédit: ' **'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' **' → logprob: -0.1614977866411209
    2. '**' → logprob: -1.9114978313446045
    3. ' *' → logprob: -6.786497592926025
    4. '*' → logprob: -9.286498069763184
    5. ' ***' → logprob: -10.661498069763184
    6. ' ' → logprob: -11.036498069763184
    7. '***' → logprob: -11.786498069763184
    8. '3' → logprob: -13.661498069763184
    9. ' ' → logprob: -14.036498069763184
    10. '  ' → logprob: -14.161498069763184

Token 27: ' ' (ID: 220)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.0013260759878903627
    2. ' ' → logprob: -6.626326084136963
    3. '  ' → logprob: -17.126325607299805
    4. '   ' → logprob: -17.126325607299805
    5. ' ' → logprob: -18.501325607299805
    6. '```' → logprob: -18.751325607299805
    7. '۳' → logprob: -19.376325607299805
    8. '３' → logprob: -20.001325607299805
    9. '³' → logprob: -20.001325607299805
    10. '    ' → logprob: -20.063825607299805

Token 28: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -1.9361264946837764e-07
    2. ' ' → logprob: -16.0
    3. '```' → logprob: -18.625
    4. '   ' → logprob: -20.75
    5. '³' → logprob: -21.125
    6. '۳' → logprob: -21.25
    7. '３' → logprob: -22.0
    8. '' → logprob: -22.0
    9. '=' → logprob: -22.0
    10. '٣' → logprob: -22.125

Token 29: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.058842193335294724
    2. '

' → logprob: -3.558842182159424
    3. '
' → logprob: -3.683842182159424
    4. '\' → logprob: -6.558842182159424
    5. '\n' → logprob: -7.058842182159424
    6. '<|end|>' → logprob: -7.808842182159424
    7. '```' → logprob: -7.933842182159424
    8. '#' → logprob: -8.433842658996582
    9. '
' → logprob: -10.183842658996582
    10. 'newline' → logprob: -10.308842658996582

Token 30: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.012099763378500938
    2. 'n' → logprob: -5.262099742889404
    3. 'd' → logprob: -6.012099742889404
    4. 'value' → logprob: -6.512099742889404
    5. 'print' → logprob: -7.387099742889404
    6. '
' → logprob: -7.762099742889404
    7. '#' → logprob: -7.762099742889404
    8. '\' → logprob: -7.887099742889404
    9. 'result' → logprob: -8.762100219726562
    10. '\n' → logprob: -8.762100219726562

Token 31: ' divide' (ID: 38484)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.47626128792762756
    2. ' calculate' → logprob: -0.9762612581253052
    3. ' compute' → logprob: -7.226261138916016
    4. 'calculate' → logprob: -7.351261138916016
    5. ' square' → logprob: -7.976261138916016
    6. ' get' → logprob: -8.351261138916016
    7. ' cube' → logprob: -9.476261138916016
    8. 'main' → logprob: -9.726261138916016
    9. ' find' → logprob: -10.601261138916016
    10. ' is' → logprob: -11.351261138916016

Token 32: '(value' (ID: 6333)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004336121957749128
    2. '_' → logprob: -5.629336357116699
    3. '(a' → logprob: -8.6293363571167
    4. '(value' → logprob: -8.6293363571167
    5. ' (' → logprob: -9.6293363571167
    6. '```' → logprob: -9.8793363571167
    7. '_by' → logprob: -10.1293363571167
    8. 'def' → logprob: -10.5043363571167
    9. '_(' → logprob: -10.6293363571167
    10. '_div' → logprob: -10.8793363571167

Token 33: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.019605522975325584
    2. ')' → logprob: -4.76960563659668
    3. '(' → logprob: -5.89460563659668
    4. '):' → logprob: -6.01960563659668
    5. ' by' → logprob: -6.39460563659668
    6. ' ,' → logprob: -6.51960563659668
    7. '_by' → logprob: -6.89460563659668
    8. 'by' → logprob: -7.39460563659668
    9. '(value' → logprob: -8.14460563659668
    10. ' ' → logprob: -8.26960563659668

Token 34: ' divisor' (ID: 100482)
  Prédit: ' divisor'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' divisor' → logprob: -0.012098820880055428
    2. 'div' → logprob: -5.262098789215088
    3. '3' → logprob: -6.387098789215088
    4. ' denominator' → logprob: -6.387098789215088
    5. ' cube' → logprob: -6.512098789215088
    6. ' ' → logprob: -6.887098789215088
    7. 'den' → logprob: -7.762098789215088
    8. ' divider' → logprob: -8.512099266052246
    9. '2' → logprob: -8.637099266052246
    10. 'divider' → logprob: -10.637099266052246

Token 35: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0003637097543105483
    2. ')' → logprob: -8.00036334991455
    3. ' ):' → logprob: -11.25036334991455
    4. ':' → logprob: -11.50036334991455
    5. '=' → logprob: -12.62536334991455
    6. '):
' → logprob: -14.12536334991455
    7. ',' → logprob: -14.37536334991455
    8. ' ' → logprob: -15.50036334991455
    9. '   ' → logprob: -16.125364303588867
    10. ''):' → logprob: -17.250364303588867

Token 36: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01418301835656166
    2. '    ' → logprob: -5.139183044433594
    3. ':' → logprob: -5.514183044433594
    4. ' ' → logprob: -6.014183044433594
    5. ' return' → logprob: -7.139183044433594
    6. ' :' → logprob: -8.014183044433594
    7. '    
' → logprob: -8.639183044433594
    8. '  ' → logprob: -9.139183044433594
    9. ':return' → logprob: -10.014183044433594
    10. 'return' → logprob: -10.389183044433594

Token 37: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.13979575037956238
    2. '   ' → logprob: -2.1397957801818848
    3. 'return' (adapté à ' return') → logprob: -4.764795780181885
    4. ' if' → logprob: -5.639795780181885
    5. ' try' → logprob: -8.264795303344727
    6. ' value' → logprob: -8.639795303344727
    7. '    ' → logprob: -8.889795303344727
    8. 'if' → logprob: -10.389795303344727
    9. 'value' → logprob: -10.514795303344727
    10. 'try' → logprob: -10.889795303344727

Token 38: ' value' (ID: 1432)
  Prédit: ' value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' value' → logprob: -0.0067156096920371056
    2. 'value' → logprob: -5.006715774536133
    3. ' float' → logprob: -16.131715774536133
    4. '   ' → logprob: -17.131715774536133
    5. ' ' → logprob: -17.631715774536133
    6. '    ' → logprob: -18.256715774536133
    7. '(value' → logprob: -18.256715774536133
    8. '	value' → logprob: -18.506715774536133
    9. 'float' → logprob: -18.506715774536133
    10. '"value' → logprob: -18.756715774536133

Token 39: ' /' (ID: 820)
  Prédit: ' /'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' /' → logprob: -0.020643964409828186
    2. '/' → logprob: -3.895643949508667
    3. ' ' → logprob: -9.395644187927246
    4. '/div' → logprob: -11.895644187927246
    5. ' ' → logprob: -12.145644187927246
    6. 'div' → logprob: -12.770644187927246
    7. ' /
' → logprob: -13.145644187927246
    8. '_' → logprob: -15.145644187927246
    9. ')' → logprob: -15.270644187927246
    10. ' div' → logprob: -15.770644187927246

Token 40: ' divisor' (ID: 100482)
  Prédit: 'div'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'div' → logprob: -0.01815076172351837
    2. ' divisor' → logprob: -4.018150806427002
    3. ' div' → logprob: -14.893150329589844
    4. ' divis' → logprob: -15.518150329589844
    5. '	div' → logprob: -16.143150329589844
    6. ' ' → logprob: -16.268150329589844
    7. 'dis' → logprob: -16.518150329589844
    8. '(div' → logprob: -17.393150329589844
    9. '_div' → logprob: -17.518150329589844
    10. 'd' → logprob: -17.768150329589844

Token 41: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.22912615537643433
    2. '

' → logprob: -1.604126214981079
    3. '
' → logprob: -6.4791259765625
    4. '\n' → logprob: -6.8541259765625
    5. '\' → logprob: -7.6041259765625
    6. '```' → logprob: -8.2291259765625
    7. ' 

' → logprob: -9.7291259765625
    8. 'n' → logprob: -9.7291259765625
    9. '  

' → logprob: -9.8541259765625
    10. 'newline' → logprob: -10.4791259765625

Token 42: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0007700824644416571
    2. 'value' → logprob: -8.62576961517334
    3. '\' → logprob: -9.12576961517334
    4. 'n' → logprob: -9.25076961517334
    5. '\n' → logprob: -9.25076961517334
    6. '

' → logprob: -9.50076961517334
    7. 'result' → logprob: -9.75076961517334
    8. 'if' → logprob: -10.12576961517334
    9. 'number' → logprob: -10.25076961517334
    10. '
' → logprob: -11.12576961517334

Token 43: ' format' (ID: 6011)
  Prédit: ' calculate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.3532334864139557
    2. ' main' → logprob: -1.2282334566116333
    3. ' average' → logprob: -5.978233337402344
    4. ' compute' → logprob: -6.478233337402344
    5. 'calculate' → logprob: -7.603233337402344
    6. ' process' → logprob: -10.103233337402344
    7. ' area' → logprob: -10.978233337402344
    8. ' find' → logprob: -11.103233337402344
    9. ' mean' → logprob: -11.228233337402344
    10. 'main' → logprob: -11.228233337402344

Token 44: '_output' (ID: 16732)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.04506341740489006
    2. '_value' → logprob: -3.5450634956359863
    3. '(' → logprob: -5.420063495635986
    4. '_string' → logprob: -5.670063495635986
    5. '_output' → logprob: -6.170063495635986
    6. '_number' → logprob: -6.170063495635986
    7. '_text' → logprob: -6.670063495635986
    8. '_(' → logprob: -8.170063018798828
    9. '_float' → logprob: -8.295063018798828
    10. '_name' → logprob: -8.795063018798828

Token 45: '(value' (ID: 6333)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10145383328199387
    2. '(value' → logprob: -2.3514537811279297
    3. '(output' → logprob: -7.22645378112793
    4. ' (' → logprob: -7.97645378112793
    5. '(data' → logprob: -9.97645378112793
    6. '(user' → logprob: -11.10145378112793
    7. '_' → logprob: -11.10145378112793
    8. '(input' → logprob: -11.22645378112793
    9. '("("' → logprob: -11.85145378112793
    10. '```' → logprob: -12.22645378112793

Token 46: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00039170795935206115
    2. ')' → logprob: -8.000391960144043
    3. ' ):' → logprob: -10.625391960144043
    4. '):
' → logprob: -10.750391960144043
    5. ':' → logprob: -11.625391960144043
    6. ',' → logprob: -14.500391960144043
    7. '   ' → logprob: -15.000391960144043
    8. '=' → logprob: -15.375391960144043
    9. '}:' → logprob: -16.375391006469727
    10. '):
' → logprob: -16.375391006469727

Token 47: ' decimals' (ID: 102128)
  Prédit: ' precision'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' precision' → logprob: -0.2241213619709015
    2. ' decimals' → logprob: -2.224121332168579
    3. ' decimal' → logprob: -3.099121332168579
    4. 'precision' → logprob: -4.099121570587158
    5. ' ' → logprob: -4.224121570587158
    6. ' places' → logprob: -4.474121570587158
    7. '2' → logprob: -6.599121570587158
    8. 'dec' → logprob: -6.724121570587158
    9. ' digits' → logprob: -7.474121570587158
    10. 'decimal' → logprob: -7.599121570587158

Token 48: '=' (ID: 28)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.5928283333778381
    2. '=' → logprob: -0.8428283333778381
    3. ')' → logprob: -4.092828273773193
    4. ':' → logprob: -10.717828750610352
    5. ')=' → logprob: -11.592828750610352
    6. '=None' → logprob: -12.217828750610352
    7. ' ):' → logprob: -12.217828750610352
    8. '):
' → logprob: -12.217828750610352
    9. ',' → logprob: -12.467828750610352
    10. 's' → logprob: -13.717828750610352

Token 49: '10' (ID: 702)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '2' → logprob: -0.004673276096582413
    2. ' ' → logprob: -5.379673480987549
    3. '3' → logprob: -9.87967300415039
    4. ')' → logprob: -14.25467300415039
    5. '4' → logprob: -14.25467300415039
    6. '1' → logprob: -15.00467300415039
    7. '0' → logprob: -16.50467300415039
    8. '   ' → logprob: -17.37967300415039
    9. '```' → logprob: -17.37967300415039
    10. '5' → logprob: -17.62967300415039

Token 50: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.007610651198774576
    2. ')' → logprob: -4.88261079788208
    3. ' ):' → logprob: -12.632610321044922
    4. '):
' → logprob: -14.507610321044922
    5. ':' → logprob: -15.132610321044922
    6. ',' → logprob: -16.007610321044922
    7. ')：' → logprob: -16.382610321044922
    8. ''):' → logprob: -16.507610321044922
    9. '   ' → logprob: -16.757610321044922
    10. '),' → logprob: -17.257610321044922

Token 51: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0012102338951081038
    2. ' return' → logprob: -6.7512102127075195
    3. 'return' → logprob: -10.37621021270752
    4. '   ' → logprob: -12.50121021270752
    5. ' f' → logprob: -12.87621021270752
    6. '    ' → logprob: -14.75121021270752
    7. '	return' → logprob: -15.00121021270752
    8. '{' → logprob: -15.00121021270752
    9. '   ' → logprob: -15.12621021270752
    10. ':return' → logprob: -15.50121021270752

Token 52: ' format' (ID: 6011)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.3137603998184204
    2. 'return' → logprob: -1.3137603998184204
    3. '   ' → logprob: -8.063760757446289
    4. ' f' → logprob: -9.313760757446289
    5. 'f' → logprob: -9.438760757446289
    6. 'format' (adapté à ' format') → logprob: -12.688760757446289
    7. ' format' → logprob: -12.813760757446289
    8. '{return' → logprob: -12.813760757446289
    9. ' formatted' → logprob: -13.063760757446289
    10. '{' → logprob: -13.188760757446289

Token 53: '_str' (ID: 6182)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0017359900521114469
    2. '(value' → logprob: -6.376736164093018
    3. '_string' → logprob: -11.62673568725586
    4. '(
' → logprob: -11.62673568725586
    5. '{' → logprob: -13.00173568725586
    6. '(

' → logprob: -13.12673568725586
    7. '({' → logprob: -13.25173568725586
    8. 'string' → logprob: -13.50173568725586
    9. 'ter' → logprob: -13.87673568725586
    10. ' (' → logprob: -14.00173568725586

Token 54: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0788973867893219
    2. '=' → logprob: -2.578897476196289
    3. '(' → logprob: -12.453897476196289
    4. '   ' → logprob: -13.703897476196289
    5. ' ' → logprob: -13.953897476196289
    6. '={}' → logprob: -14.828897476196289
    7. '=}' → logprob: -15.328897476196289
    8. '=format' → logprob: -15.703897476196289
    9. ' ='' → logprob: -15.953897476196289
    10. ' =)' → logprob: -16.32889747619629

Token 55: ' '{' (ID: 24918)
  Prédit: ' f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' f' → logprob: -0.20771093666553497
    2. ' "{' → logprob: -1.9577109813690186
    3. 'f' → logprob: -3.7077109813690186
    4. '"{' → logprob: -3.9577109813690186
    5. '"' → logprob: -6.4577107429504395
    6. ' '{' → logprob: -7.7077107429504395
    7. ' "' → logprob: -7.8327107429504395
    8. ' ' → logprob: -9.082711219787598
    9. ''{' → logprob: -9.332711219787598
    10. '	f' → logprob: -9.957711219787598

Token 56: ':' (ID: 25)
  Prédit: ':.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':.' → logprob: -0.08074427396059036
    2. ':' → logprob: -2.5807442665100098
    3. '0' → logprob: -6.58074426651001
    4. 'value' → logprob: -8.205744743347168
    5. '.' → logprob: -8.830744743347168
    6. '}' → logprob: -10.705744743347168
    7. ':value' → logprob: -11.455744743347168
    8. ':{}' → logprob: -12.705744743347168
    9. ':{' → logprob: -12.830744743347168
    10. ':,' → logprob: -13.080744743347168

Token 57: '.'' (ID: 8856)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0001290454383706674
    2. '0' → logprob: -9.250128746032715
    3. ' .' → logprob: -10.875128746032715
    4. '.<' → logprob: -12.000128746032715
    5. '.{' → logprob: -13.250128746032715
    6. '."' → logprob: -13.625128746032715
    7. '.,' → logprob: -14.000128746032715
    8. ',.' → logprob: -14.125128746032715
    9. '.»' → logprob: -14.125128746032715
    10. '.
' → logprob: -14.875128746032715

Token 58: ' +' (ID: 659)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '10' → logprob: -0.03742411360144615
    2. '{' → logprob: -3.787424087524414
    3. '{}' → logprob: -4.287424087524414
    4. 'dec' → logprob: -8.912424087524414
    5. 'f' → logprob: -9.037424087524414
    6. '```' → logprob: -10.287424087524414
    7. '%d' → logprob: -10.662424087524414
    8. ' ' → logprob: -11.912424087524414
    9. '1' → logprob: -13.162424087524414
    10. '%' → logprob: -13.162424087524414

Token 59: ' str' (ID: 989)
  Prédit: 'str'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'str' → logprob: -0.0794166848063469
    2. 'dec' → logprob: -2.5794167518615723
    3. 'f' → logprob: -8.079416275024414
    4. ' str' → logprob: -8.704416275024414
    5. '{' → logprob: -10.454416275024414
    6. '10' → logprob: -11.329416275024414
    7. '{}' → logprob: -12.579416275024414
    8. ' f' → logprob: -13.329416275024414
    9. 'Decimals' → logprob: -13.829416275024414
    10. 'decimal' → logprob: -14.204416275024414

Token 60: '(dec' (ID: 77281)
  Prédit: 'dec'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dec' → logprob: -0.00016277639952022582
    2. '(dec' → logprob: -8.750163078308105
    3. ' decimals' → logprob: -13.250163078308105
    4. 'Decimals' → logprob: -13.250163078308105
    5. '{' → logprob: -15.500163078308105
    6. '.dec' → logprob: -15.750163078308105
    7. 'decimal' → logprob: -15.875163078308105
    8. '_dec' → logprob: -16.12516212463379
    9. '10' → logprob: -17.87516212463379
    10. ' dec' → logprob: -18.37516212463379

Token 61: 'imals' (ID: 54879)
  Prédit: 'imals'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'imals' → logprob: -0.006829036865383387
    2. 'als' → logprob: -5.006829261779785
    3. 'mals' → logprob: -9.506829261779785
    4. '   ' → logprob: -11.631829261779785
    5. '```' → logprob: -11.881829261779785
    6. 'ials' → logprob: -12.006829261779785
    7. ' ' → logprob: -12.881829261779785
    8. '>' → logprob: -13.256829261779785
    9. 'inals' → logprob: -13.381829261779785
    10. '.' → logprob: -13.631829261779785

Token 62: ')' (ID: 8)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.0032534082420170307
    2. ''f' → logprob: -5.75325345993042
    3. '}' → logprob: -10.003252983093262
    4. ')' → logprob: -11.003252983093262
    5. ' f' → logprob: -12.253252983093262
    6. ''d' → logprob: -12.503252983093262
    7. '```' → logprob: -13.753252983093262
    8. '+' → logprob: -13.878252983093262
    9. 'F' → logprob: -14.128252983093262
    10. ''}' → logprob: -14.378252983093262

Token 63: ' +' (ID: 659)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.001627217628993094
    2. ''f' → logprob: -6.501627445220947
    3. ' f' → logprob: -9.751626968383789
    4. '+' → logprob: -9.876626968383789
    5. 'F' → logprob: -13.001626968383789
    6. '}' → logprob: -13.126626968383789
    7. '```' → logprob: -13.251626968383789
    8. ' ' → logprob: -13.251626968383789
    9. '	f' → logprob: -13.626626968383789
    10. ''d' → logprob: -14.001626968383789

Token 64: ' '' (ID: 461)
  Prédit: ''f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''f' → logprob: -0.029834723100066185
    2. 'f' → logprob: -3.529834747314453
    3. ' f' → logprob: -10.154834747314453
    4. ' '' → logprob: -11.029834747314453
    5. '}' → logprob: -11.529834747314453
    6. ' ' → logprob: -12.279834747314453
    7. '   ' → logprob: -12.779834747314453
    8. ''d' → logprob: -12.779834747314453
    9. '```' → logprob: -13.154834747314453
    10. ''}' → logprob: -13.279834747314453

Token 65: 'f' (ID: 69)
  Prédit: 'f'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'f' → logprob: -6.0033853515051305e-05
    2. ''f' → logprob: -10.000060081481934
    3. '}' → logprob: -11.375060081481934
    4. ' f' → logprob: -12.875060081481934
    5. '```' → logprob: -15.250060081481934
    6. '	f' → logprob: -16.500059127807617
    7. 'g' → logprob: -16.625059127807617
    8. ''' → logprob: -17.000059127807617
    9. '
' → logprob: -17.000059127807617
    10. '

' → logprob: -17.375059127807617

Token 66: '}'
' (ID: 96587)
  Prédit: '}''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '}'' → logprob: -7.588793960167095e-05
    2. '}' → logprob: -9.625076293945312
    3. ''}' → logprob: -12.000076293945312
    4. '}'.' → logprob: -13.375076293945312
    5. '}'
' → logprob: -13.375076293945312
    6. '}"' → logprob: -15.125076293945312
    7. ''' → logprob: -15.625076293945312
    8. '}')' → logprob: -16.500076293945312
    9. '}',' → logprob: -18.125076293945312
    10. '"}' → logprob: -18.375076293945312

Token 67: '   ' (ID: 271)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '}' → logprob: -0.10870227217674255
    2. 'return' → logprob: -2.3587021827697754
    3. 'format' → logprob: -5.733702182769775
    4. '.format' → logprob: -5.983702182769775
    5. '   ' → logprob: -6.983702182769775
    6. ' return' → logprob: -7.233702182769775
    7. ''}' → logprob: -8.483702659606934
    8. ')' → logprob: -8.608702659606934
    9. '.' → logprob: -9.233702659606934
    10. '{return' → logprob: -9.358702659606934

Token 68: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.0063457307405769825
    2. ' return' → logprob: -5.256345748901367
    3. '   ' → logprob: -7.256345748901367
    4. 'format' → logprob: -8.131345748901367
    5. '}' → logprob: -10.131345748901367
    6. '	return' → logprob: -10.756345748901367
    7. '.format' → logprob: -11.131345748901367
    8. '{return' → logprob: -11.756345748901367
    9. ')' → logprob: -11.881345748901367
    10. '<|end|>' → logprob: -12.006345748901367

Token 69: ' format' (ID: 6011)
  Prédit: ' format'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' format' → logprob: -0.10020678490400314
    2. 'format' → logprob: -2.3502068519592285
    3. '(format' → logprob: -16.85020637512207
    4. '.format' → logprob: -17.60020637512207
    5. '	format' → logprob: -17.60020637512207
    6. ' formatting' → logprob: -18.47520637512207
    7. ' formatted' → logprob: -18.97520637512207
    8. 'formatted' → logprob: -19.60020637512207
    9. '_format' → logprob: -19.97520637512207
    10. '=format' → logprob: -19.97520637512207

Token 70: '_str' (ID: 6182)
  Prédit: '_str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_str' → logprob: -0.01037509460002184
    2. '(format' → logprob: -4.760375022888184
    3. 'format' → logprob: -6.635375022888184
    4. '(value' → logprob: -8.385375022888184
    5. 'value' → logprob: -8.885375022888184
    6. 'str' → logprob: -10.760375022888184
    7. '(' → logprob: -11.260375022888184
    8. '_format' → logprob: -11.385375022888184
    9. 'output' → logprob: -11.885375022888184
    10. 'formatted' → logprob: -12.510375022888184

Token 71: '.format' (ID: 12277)
  Prédit: '.format'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.format' → logprob: -0.0012307076249271631
    2. '.' → logprob: -6.751230716705322
    3. '.value' → logprob: -10.626230239868164
    4. '}.' → logprob: -11.251230239868164
    5. 'format' → logprob: -11.751230239868164
    6. ').' → logprob: -11.751230239868164
    7. ' .' → logprob: -12.501230239868164
    8. '{}.' → logprob: -13.626230239868164
    9. '   ' → logprob: -14.126230239868164
    10. 'value' → logprob: -14.251230239868164

Token 72: '(value' (ID: 6333)
  Prédit: '(value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(value' → logprob: -0.0024764856789261103
    2. '(' → logprob: -6.002476692199707
    3. 'value' → logprob: -14.127476692199707
    4. ')value' → logprob: -17.25247573852539
    5. ' (' → logprob: -17.75247573852539
    6. '(
' → logprob: -17.87747573852539
    7. '(valor' → logprob: -18.12747573852539
    8. '(values' → logprob: -18.25247573852539
    9. '()' → logprob: -18.50247573852539
    10. '(val' → logprob: -18.87747573852539

Token 73: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -3.128163257315464e-07
    2. ')
' → logprob: -15.625
    3. '}' → logprob: -16.5
    4. ' )' → logprob: -16.875
    5. ')}' → logprob: -17.375
    6. '))' → logprob: -19.125
    7. ')return' → logprob: -19.25
    8. ')}}' → logprob: -20.0
    9. ')#' → logprob: -20.125
    10. ')`' → logprob: -20.25

Token 74: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0008569086203351617
    2. 'print' → logprob: -7.625856876373291
    3. '

' → logprob: -8.75085735321045
    4. '```' → logprob: -9.62585735321045
    5. 'if' → logprob: -9.87585735321045
    6. '\' → logprob: -10.75085735321045
    7. '
' → logprob: -11.25085735321045
    8. 'value' → logprob: -11.37585735321045
    9. 'n' → logprob: -11.62585735321045
    10. 'number' → logprob: -11.87585735321045

Token 75: ' print' (ID: 2123)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.043259624391794205
    2. ' calculate' → logprob: -3.168259620666504
    3. ' compute' → logprob: -8.668259620666504
    4. 'calculate' → logprob: -10.043259620666504
    5. 'main' → logprob: -10.543259620666504
    6. ' calcular' → logprob: -12.668259620666504
    7. ' calc' → logprob: -13.168259620666504
    8. ' process' → logprob: -13.293259620666504
    9. ' calculates' → logprob: -13.418259620666504
    10. ' solve' → logprob: -13.543259620666504

Token 76: '_output' (ID: 16732)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0072289202362298965
    2. '_output' → logprob: -5.382228851318359
    3. '_' → logprob: -6.257228851318359
    4. '_out' → logprob: -9.25722885131836
    5. '_line' → logprob: -9.38222885131836
    6. '_(' → logprob: -9.88222885131836
    7. '(output' → logprob: -10.00722885131836
    8. '_value' → logprob: -10.13222885131836
    9. '_result' → logprob: -10.13222885131836
    10. '(value' → logprob: -10.63222885131836

Token 77: '(form' (ID: 33445)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0162191204726696
    2. '(value' → logprob: -4.141219139099121
    3. '(output' → logprob: -9.891219139099121
    4. ' (' → logprob: -10.016219139099121
    5. '()' → logprob: -10.516219139099121
    6. '("("' → logprob: -11.766219139099121
    7. '(user' → logprob: -12.016219139099121
    8. '(data' → logprob: -12.141219139099121
    9. '():' → logprob: -12.266219139099121
    10. '(def' → logprob: -12.391219139099121

Token 78: 'atted' (ID: 19639)
  Prédit: 'at'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'at' → logprob: -9.674858301877975e-05
    2. 'atted' → logprob: -9.250096321105957
    3. 'ат' → logprob: -15.250096321105957
    4. '(at' → logprob: -15.875096321105957
    5. 'atter' → logprob: -16.250097274780273
    6. 'ated' → logprob: -16.750097274780273
    7. 'atting' → logprob: -17.375097274780273
    8. ' at' → logprob: -17.625097274780273
    9. '_at' → logprob: -18.375097274780273
    10. '	at' → logprob: -18.625097274780273

Token 79: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.4408514201641083
    2. '_output' → logprob: -1.1908514499664307
    3. ')' → logprob: -3.3158514499664307
    4. '_' → logprob: -4.940851211547852
    5. ')_' → logprob: -5.440851211547852
    6. '_result' → logprob: -6.940851211547852
    7. '(value' → logprob: -7.315851211547852
    8. '_out' → logprob: -7.565851211547852
    9. 'value' → logprob: -7.690851211547852
    10. '_text' → logprob: -7.940851211547852

Token 80: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.011068690568208694
    2. ')' → logprob: -4.511068820953369
    3. '):
' → logprob: -11.511068344116211
    4. ' ):' → logprob: -12.261068344116211
    5. '   ' → logprob: -13.136068344116211
    6. ',' → logprob: -13.386068344116211
    7. ':' → logprob: -14.511068344116211
    8. ' ' → logprob: -14.636068344116211
    9. '(' → logprob: -14.636068344116211
    10. '(value' → logprob: -14.761068344116211

Token 81: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -7.791440293658525e-05
    2. ' print' → logprob: -9.625078201293945
    3. 'print' → logprob: -11.375078201293945
    4. '   ' → logprob: -15.125078201293945
    5. '```' → logprob: -17.625078201293945
    6. '    ' → logprob: -18.625078201293945
    7. '   ' → logprob: -18.875078201293945
    8. '       ' → logprob: -19.125078201293945
    9. '	print' → logprob: -19.625078201293945
    10. '    
' → logprob: -20.000078201293945

Token 82: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.41186991333961487
    2. 'print' (adapté à ' print') → logprob: -1.6618698835372925
    3. '   ' → logprob: -1.9118698835372925
    4. '```' → logprob: -13.786870002746582
    5. '	print' → logprob: -14.786870002746582
    6. 'def' → logprob: -15.536870002746582
    7. '    ' → logprob: -15.786870002746582
    8. ' ' → logprob: -16.911869049072266
    9. '  ' → logprob: -17.411869049072266
    10. '``' → logprob: -17.786869049072266

Token 83: '(form' (ID: 33445)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6931570768356323
    2. '(form' → logprob: -0.6931570768356323
    3. ' (' → logprob: -12.693157196044922
    4. '('' → logprob: -13.193157196044922
    5. '(f' → logprob: -13.318157196044922
    6. '(`' → logprob: -14.068157196044922
    7. '()' → logprob: -14.193157196044922
    8. 'formatted' → logprob: -14.443157196044922
    9. '("("' → logprob: -15.443157196044922
    10. '((' → logprob: -15.818157196044922

Token 84: 'atted' (ID: 19639)
  Prédit: 'atted'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'atted' → logprob: -0.06328290700912476
    2. 'at' → logprob: -2.9382829666137695
    3. 'ated' → logprob: -4.8132829666137695
    4. '_at' → logprob: -9.18828296661377
    5. '_' → logprob: -9.43828296661377
    6. 'atte' → logprob: -11.43828296661377
    7. 'att' → logprob: -11.56328296661377
    8. 'a' → logprob: -11.68828296661377
    9. ' at' → logprob: -12.06328296661377
    10. ')' → logprob: -12.18828296661377

Token 85: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.001207615016028285
    2. '_val' → logprob: -7.6262078285217285
    3. '_' → logprob: -7.8762078285217285
    4. 'value' → logprob: -8.50120735168457
    5. ')_' → logprob: -9.37620735168457
    6. ')' → logprob: -10.37620735168457
    7. '_v' → logprob: -12.12620735168457
    8. '_va' → logprob: -12.25120735168457
    9. 'valu' → logprob: -13.25120735168457
    10. '_values' → logprob: -13.37620735168457

Token 86: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.0280383548888494e-06
    2. ')
' → logprob: -13.875000953674316
    3. ' )' → logprob: -17.250001907348633
    4. ')

' → logprob: -19.875001907348633
    5. ')`' → logprob: -20.625001907348633
    6. '))' → logprob: -20.875001907348633
    7. '')' → logprob: -21.000001907348633
    8. '()' → logprob: -22.250001907348633
    9. '),' → logprob: -22.250001907348633
    10. '）' → logprob: -22.375001907348633

Token 87: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.00047654795343987644
    2. 'if' → logprob: -8.000476837158203
    3. '\' → logprob: -9.875476837158203
    4. '
' → logprob: -10.250476837158203
    5. 'value' → logprob: -11.500476837158203
    6. 'n' → logprob: -11.500476837158203
    7. '```' → logprob: -11.500476837158203
    8. '\n' → logprob: -11.750476837158203
    9. '

' → logprob: -12.000476837158203
    10. 'ndef' → logprob: -13.250476837158203

Token 88: ' calculate' (ID: 17950)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.00989160779863596
    2. ' calculate' → logprob: -4.634891510009766
    3. 'main' → logprob: -9.634891510009766
    4. ' compute' → logprob: -10.009891510009766
    5. ' process' → logprob: -11.259891510009766
    6. 'calculate' → logprob: -11.509891510009766
    7. ' cube' → logprob: -14.634891510009766
    8. ' run' → logprob: -14.634891510009766
    9. ' solve' → logprob: -15.509891510009766
    10. '	main' → logprob: -15.634891510009766

Token 89: '_result' (ID: 11623)
  Prédit: '_c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_c' → logprob: -0.8645145893096924
    2. '_cube' → logprob: -0.8645145893096924
    3. '(' → logprob: -2.3645145893096924
    4. '_' → logprob: -2.9895145893096924
    5. '_volume' → logprob: -6.489514350891113
    6. '_average' → logprob: -6.614514350891113
    7. '(_' → logprob: -6.614514350891113
    8. '_total' → logprob: -6.614514350891113
    9. '_sum' → logprob: -7.114514350891113
    10. '_(' → logprob: -7.114514350891113

Token 90: '(L' (ID: 11075)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.06681659817695618
    2. '(value' → logprob: -3.066816568374634
    3. '():' → logprob: -4.066816806793213
    4. '(input' → logprob: -8.191816329956055
    5. '(user' → logprob: -8.816816329956055
    6. ' (' → logprob: -8.816816329956055
    7. '()' → logprob: -10.316816329956055
    8. '(a' → logprob: -10.566816329956055
    9. '(data' → logprob: -10.566816329956055
    10. '(parent' → logprob: -10.566816329956055

Token 91: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.08313059061765671
    2. ')' → logprob: -3.2081305980682373
    3. ',' → logprob: -3.4581305980682373
    4. ' ):' → logprob: -5.708130359649658
    5. 'ength' → logprob: -6.708130359649658
    6. 'ambda' → logprob: -7.083130359649658
    7. '):
' → logprob: -7.708130359649658
    8. ' )' → logprob: -8.208130836486816
    9. 'a' → logprob: -8.458130836486816
    10. 'value' → logprob: -8.833130836486816

Token 92: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.039113353937864304
    2. ' L' → logprob: -4.414113521575928
    3. '(' → logprob: -4.664113521575928
    4. '    
' → logprob: -5.164113521575928
    5. '    ' → logprob: -5.664113521575928
    6. ' (' → logprob: -6.289113521575928
    7. ' ' → logprob: -6.664113521575928
    8. '```' → logprob: -7.039113521575928
    9. ' return' → logprob: -7.789113521575928
    10. ' divide' → logprob: -7.914113521575928

Token 93: ' cub' (ID: 18538)
  Prédit: 'cube'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cube' → logprob: -1.2245240211486816
    2. 'c' → logprob: -1.8495240211486816
    3. ' cube' → logprob: -1.9745240211486816
    4. 'result' → logprob: -2.7245240211486816
    5. 'return' → logprob: -3.3495240211486816
    6. 'L' → logprob: -3.3495240211486816
    7. ' result' → logprob: -3.3495240211486816
    8. ' L' → logprob: -3.7245240211486816
    9. 'cub' (adapté à ' cub') → logprob: -3.7245240211486816
    10. ' return' → logprob: -3.9745240211486816

Token 94: 'ed' (ID: 295)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -4.60414821645827e-06
    2. 'ed' → logprob: -12.500004768371582
    3. '(e' → logprob: -14.500004768371582
    4. 'ic' → logprob: -15.875004768371582
    5. 'е' → logprob: -16.250003814697266
    6. ' e' → logprob: -17.000003814697266
    7. ')e' → logprob: -17.250003814697266
    8. '	e' → logprob: -17.875003814697266
    9. '(' → logprob: -18.375003814697266
    10. '.e' → logprob: -18.500003814697266

Token 95: ' =' (ID: 314)
  Prédit: '_value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.2822284996509552
    2. '_L' → logprob: -2.407228469848633
    3. ' =' → logprob: -2.657228469848633
    4. '_' → logprob: -2.907228469848633
    5. '=' → logprob: -4.032228469848633
    6. '_val' → logprob: -4.407228469848633
    7. 'L' → logprob: -7.907228469848633
    8. '(L' → logprob: -8.032228469848633
    9. '_l' → logprob: -9.032228469848633
    10. '_length' → logprob: -9.657228469848633

Token 96: ' cube' (ID: 46822)
  Prédit: ' cube'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cube' → logprob: -0.3214820623397827
    2. 'cube' → logprob: -1.3214820623397827
    3. ' L' → logprob: -5.071482181549072
    4. 'L' → logprob: -6.321482181549072
    5. 'cub' → logprob: -10.571481704711914
    6. ' cub' → logprob: -10.571481704711914
    7. 'c' → logprob: -10.946481704711914
    8. ' ' → logprob: -10.946481704711914
    9. '   ' → logprob: -11.446481704711914
    10. ' cubic' → logprob: -11.946481704711914

Token 97: '(L' (ID: 11075)
  Prédit: '(L'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(L' → logprob: -0.0004309076175559312
    2. '(' → logprob: -7.750431060791016
    3. '(l' → logprob: -15.750431060791016
    4. '(
' → logprob: -17.125431060791016
    5. ' (' → logprob: -17.375431060791016
    6. '((' → logprob: -17.750431060791016
    7. '(I' → logprob: -18.625431060791016
    8. '(E' → logprob: -18.750431060791016
    9. ' ' → logprob: -18.875431060791016
    10. '(C' → logprob: -18.875431060791016

Token 98: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.7385154428193346e-05
    2. ')
' → logprob: -10.37503719329834
    3. ' )' → logprob: -12.12503719329834
    4. ')

' → logprob: -15.12503719329834
    5. ' ' → logprob: -15.87503719329834
    6. '   ' → logprob: -16.125038146972656
    7. ')
' → logprob: -16.375038146972656
    8. '),' → logprob: -17.250038146972656
    9. '))' → logprob: -17.625038146972656
    10. ')`' → logprob: -18.125038146972656

Token 99: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.029764965176582336
    2. '
' → logprob: -4.6547651290893555
    3. '    
' → logprob: -5.1547651290893555
    4. ' divided' → logprob: -5.5297651290893555
    5. ' /' → logprob: -6.0297651290893555
    6. 'div' → logprob: -6.4047651290893555
    7. ' result' → logprob: -7.4047651290893555
    8. '/' → logprob: -7.5297651290893555
    9. ' div' → logprob: -7.5297651290893555
    10. 'result' → logprob: -7.8422651290893555

Token 100: ' divided' (ID: 28261)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2699124813079834
    2. 'div' → logprob: -1.6449124813079834
    3. ' divided' → logprob: -4.1449127197265625
    4. 'result' → logprob: -4.7699127197265625
    5. 'd' → logprob: -6.3324127197265625
    6. ' result' → logprob: -6.4574127197265625
    7. ' div' → logprob: -6.7074127197265625
    8. 'cub' → logprob: -6.8949127197265625
    9. 'divide' → logprob: -6.9574127197265625
    10. '    
' → logprob: -6.9574127197265625

Token 101: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.576504647731781
    2. '(' → logprob: -1.2015047073364258
    3. '=' → logprob: -2.826504707336426
    4. '_' → logprob: -3.326504707336426
    5. '(c' → logprob: -3.451504707336426
    6. '_value' → logprob: -5.826504707336426
    7. '_result' → logprob: -5.826504707336426
    8. ' ' → logprob: -5.951504707336426
    9. ' (' → logprob: -7.201504707336426
    10. 's' → logprob: -8.326504707336426

Token 102: ' divide' (ID: 38484)
  Prédit: ' divide'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' divide' → logprob: -0.13374942541122437
    2. 'divide' → logprob: -2.258749485015869
    3. ' cub' → logprob: -4.508749485015869
    4. 'div' → logprob: -5.758749485015869
    5. ' divided' → logprob: -5.758749485015869
    6. 'cub' → logprob: -6.508749485015869
    7. ' cube' → logprob: -7.008749485015869
    8. 'cube' → logprob: -8.508749008178711
    9. '(div' → logprob: -8.758749008178711
    10. ' div' → logprob: -8.883749008178711

Token 103: '(c' (ID: 2410)
  Prédit: '(c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -0.06197787821292877
    2. '(' → logprob: -2.8119778633117676
    3. '(div' → logprob: -12.561978340148926
    4. ' (' → logprob: -12.686978340148926
    5. '(
' → logprob: -12.936978340148926
    6. '(com' → logprob: -14.811978340148926
    7. '(

' → logprob: -14.936978340148926
    8. '(C' → logprob: -15.686978340148926
    9. '(L' → logprob: -15.936978340148926
    10. ' ' → logprob: -16.93697738647461

Token 104: 'ub' (ID: 431)
  Prédit: 'ub'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ub' → logprob: -0.012670333497226238
    2. 'cub' → logprob: -4.387670516967773
    3. '   ' → logprob: -10.137670516967773
    4. ' cub' → logprob: -10.137670516967773
    5. 'div' → logprob: -10.887670516967773
    6. 'u' → logprob: -11.262670516967773
    7. 'cube' → logprob: -11.262670516967773
    8. 'kub' → logprob: -12.512670516967773
    9. 'ube' → logprob: -12.637670516967773
    10. 'b' → logprob: -12.887670516967773

Token 105: 'ed' (ID: 295)
  Prédit: 'ed'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ed' → logprob: -4.9424725148128346e-05
    2. 'e' → logprob: -11.375049591064453
    3. '   ' → logprob: -11.875049591064453
    4. 'cub' → logprob: -12.250049591064453
    5. 'L' → logprob: -12.375049591064453
    6. 'eded' → logprob: -12.750049591064453
    7. ' ' → logprob: -13.375049591064453
    8. 'ед' → logprob: -13.625049591064453
    9. '  ' → logprob: -13.750049591064453
    10. '3' → logprob: -13.875049591064453

Token 106: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.004361048340797424
    2. '(' → logprob: -6.004361152648926
    3. ' ,' → logprob: -6.629361152648926
    4. '(div' → logprob: -8.254361152648926
    5. ' (' → logprob: -9.379361152648926
    6. '(L' → logprob: -9.754361152648926
    7. ',(' → logprob: -10.254361152648926
    8. ',L' → logprob: -10.379361152648926
    9. '(len' → logprob: -11.129361152648926
    10. ')' → logprob: -11.254361152648926

Token 107: ' ' (ID: 220)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.060471463948488235
    2. '7' → logprob: -4.060471534729004
    3. '6' → logprob: -4.060471534729004
    4. '2' → logprob: -5.310471534729004
    5. ' ' → logprob: -5.435471534729004
    6. '42' → logprob: -6.185471534729004
    7. '10' → logprob: -6.435471534729004
    8. '12' → logprob: -6.560471534729004
    9. '8' → logprob: -6.685471534729004
    10. '5' → logprob: -6.685471534729004

Token 108: '27' (ID: 2092)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '3' → logprob: -0.10329797118902206
    2. '12' → logprob: -2.8532979488372803
    3. '6' → logprob: -4.853298187255859
    4. '2' → logprob: -5.228298187255859
    5. '24' → logprob: -6.103298187255859
    6. '4' → logprob: -6.103298187255859
    7. '7' → logprob: -6.228298187255859
    8. '8' → logprob: -6.353298187255859
    9. '42' → logprob: -6.353298187255859
    10. '409' → logprob: -6.353298187255859

Token 109: '.' (ID: 13)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.008925831876695156
    2. ')
' → logprob: -4.883925914764404
    3. '   ' → logprob: -7.258925914764404
    4. ' )' → logprob: -8.383925437927246
    5. '.' → logprob: -8.508925437927246
    6. ')

' → logprob: -9.633925437927246
    7. ' ' → logprob: -10.383925437927246
    8. ' )
' → logprob: -10.883925437927246
    9. '*' → logprob: -11.008925437927246
    10. ')
' → logprob: -11.133925437927246

Token 110: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0010656783124431968
    2. ')' → logprob: -6.876065731048584
    3. ' ' → logprob: -10.501065254211426
    4. ' )' → logprob: -13.126065254211426
    5. '5' → logprob: -14.251065254211426
    6. '.' → logprob: -14.751065254211426
    7. '')' → logprob: -15.251065254211426
    8. ')
' → logprob: -15.251065254211426
    9. '   ' → logprob: -15.251065254211426
    10. '```' → logprob: -15.376065254211426

Token 111: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.1270742565393448
    2. ')
' → logprob: -2.1270742416381836
    3. ')
' → logprob: -9.627074241638184
    4. '   ' → logprob: -10.127074241638184
    5. ')

' → logprob: -10.377074241638184
    6. ' )' → logprob: -12.752074241638184
    7. ' )
' → logprob: -13.002074241638184
    8. ' ' → logprob: -13.127074241638184
    9. ')return' → logprob: -13.627074241638184
    10. ')`' → logprob: -15.877074241638184

Token 112: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.002670780522748828
    2. 'return' → logprob: -6.252670764923096
    3. '    
' → logprob: -8.002671241760254
    4. ' return' → logprob: -8.252671241760254
    5. '
' → logprob: -9.252671241760254
    6. 'formatted' → logprob: -11.252671241760254
    7. 'result' → logprob: -12.002671241760254
    8. '  ' → logprob: -12.877671241760254
    9. '  
' → logprob: -13.002671241760254
    10. ' ' → logprob: -13.002671241760254

Token 113: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.014881362207233906
    2. 'return' (adapté à ' return') → logprob: -4.764881134033203
    3. ' return' → logprob: -5.264881134033203
    4. '    
' → logprob: -8.139881134033203
    5. 'result' → logprob: -8.264881134033203
    6. ' result' → logprob: -8.889881134033203
    7. '
' → logprob: -9.139881134033203
    8. 'formatted' → logprob: -9.389881134033203
    9. ' rounded' → logprob: -10.514881134033203
    10. 'rounded' → logprob: -10.639881134033203

Token 114: ' divided' (ID: 28261)
  Prédit: 'div'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'div' → logprob: -0.018222520127892494
    2. ' divided' → logprob: -4.018222332000732
    3. '(div' → logprob: -10.39322280883789
    4. 'float' → logprob: -10.89322280883789
    5. ' div' → logprob: -11.51822280883789
    6. 'divide' → logprob: -12.51822280883789
    7. '	div' → logprob: -13.39322280883789
    8. '<div' → logprob: -13.51822280883789
    9. ' divid' → logprob: -13.76822280883789
    10. 'round' → logprob: -13.76822280883789

Token 115: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.38160356879234314
    2. '

' → logprob: -1.3816035985946655
    3. '<|end|>' → logprob: -3.506603479385376
    4. '
' → logprob: -3.881603479385376
    5. '**' → logprob: -5.006603717803955
    6. '*' → logprob: -5.631603717803955
    7. '<|end|>' → logprob: -6.756603717803955
    8. '```' → logprob: -7.381603717803955
    9. '**

' → logprob: -8.006603240966797
    10. '.' → logprob: -8.006603240966797

Token 116: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0009427884360775352
    2. 'L' → logprob: -7.375942707061768
    3. 'if' → logprob: -8.500943183898926
    4. '\' → logprob: -10.250943183898926
    5. '
' → logprob: -10.750943183898926
    6. '```' → logprob: -10.750943183898926
    7. 'for' → logprob: -11.625943183898926
    8. '\n' → logprob: -11.750943183898926
    9. '

' → logprob: -12.250943183898926
    10. 'result' → logprob: -12.750943183898926

Token 117: ' main' (ID: 2758)
  Prédit: ' main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.000399925687815994
    2. ' calculate' → logprob: -7.875400066375732
    3. 'main' → logprob: -11.125399589538574
    4. ' process' → logprob: -13.500399589538574
    5. ' run' → logprob: -13.500399589538574
    6. ' compute' → logprob: -13.750399589538574
    7. ' solve' → logprob: -14.250399589538574
    8. 'calculate' → logprob: -15.500399589538574
    9. ' get' → logprob: -16.50040054321289
    10. ' cube' → logprob: -16.87540054321289

Token 118: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -5.5027299822540954e-05
    2. '()' → logprob: -10.750055313110352
    3. '(' → logprob: -10.875055313110352
    4. ' ():' → logprob: -11.375055313110352
    5. '():
' → logprob: -12.875055313110352
    6. '(:' → logprob: -16.12505531311035
    7. '()>' → logprob: -16.12505531311035
    8. '_' → logprob: -16.37505531311035
    9. ':' → logprob: -16.75005531311035
    10. '(":' → logprob: -17.12505531311035

Token 119: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004740195348858833
    2. 'L' → logprob: -5.879740238189697
    3. ' L' → logprob: -6.379740238189697
    4. '    
' → logprob: -9.129739761352539
    5. 'value' → logprob: -10.129739761352539
    6. '
' → logprob: -10.254739761352539
    7. 'input' → logprob: -11.629739761352539
    8. 'try' → logprob: -11.754739761352539
    9. '       ' → logprob: -11.879739761352539
    10. ' value' → logprob: -12.004739761352539

Token 120: ' raw' (ID: 11428)
  Prédit: ' L'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' L' → logprob: -0.4208170473575592
    2. 'L' → logprob: -1.1708170175552368
    3. '   ' → logprob: -3.4208171367645264
    4. 'value' → logprob: -8.420817375183105
    5. ' value' → logprob: -8.545817375183105
    6. ' user' → logprob: -9.795817375183105
    7. ' try' → logprob: -10.295817375183105
    8. 'try' → logprob: -10.295817375183105
    9. '    
' → logprob: -10.420817375183105
    10. ' ' → logprob: -10.545817375183105

Token 121: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.35286781191825867
    2. '_' → logprob: -1.602867841720581
    3. '_value' → logprob: -2.352867841720581
    4. '_val' → logprob: -7.977867603302002
    5. '_L' → logprob: -8.10286808013916
    6. ' _' → logprob: -8.85286808013916
    7. '_length' → logprob: -10.22786808013916
    8. '_user' → logprob: -10.72786808013916
    9. '_in' → logprob: -10.97786808013916
    10. '_Input' → logprob: -11.35286808013916

Token 122: ' =' (ID: 314)
  Prédit: '_value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.2553133964538574
    2. '_' → logprob: -2.1303133964538574
    3. '(' → logprob: -3.1303133964538574
    4. ' =' → logprob: -3.5053133964538574
    5. '_val' → logprob: -4.380313396453857
    6. '=' → logprob: -4.630313396453857
    7. '()' → logprob: -5.130313396453857
    8. ' ' → logprob: -6.505313396453857
    9. '_data' → logprob: -7.505313396453857
    10. '_str' → logprob: -7.505313396453857

Token 123: ' get' (ID: 717)
  Prédit: ' get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.251930296421051
    2. 'get' → logprob: -1.5019302368164062
    3. '(get' → logprob: -14.126930236816406
    4. '	get' → logprob: -14.751930236816406
    5. ' ' → logprob: -17.126930236816406
    6. '_get' → logprob: -18.126930236816406
    7. '=get' → logprob: -18.376930236816406
    8. '.get' → logprob: -18.876930236816406
    9. '   ' → logprob: -19.251930236816406
    10. ')get' → logprob: -19.376930236816406

Token 124: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.029872331768274307
    2. '_' → logprob: -3.529872417449951
    3. ' _' → logprob: -9.654871940612793
    4. ' ' → logprob: -11.404871940612793
    5. '()' → logprob: -11.529871940612793
    6. '_in' → logprob: -11.779871940612793
    7. '_raw' → logprob: -12.029871940612793
    8. '_user' → logprob: -12.279871940612793
    9. '_value' → logprob: -12.654871940612793
    10. '(' → logprob: -12.779871940612793

Token 125: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0007295898394659162
    2. '(' → logprob: -7.250729560852051
    3. '()
' → logprob: -11.12572956085205
    4. '()

' → logprob: -13.12572956085205
    5. ' ()' → logprob: -14.00072956085205
    6. '_' → logprob: -14.50072956085205
    7. '(
' → logprob: -15.00072956085205
    8. '().' → logprob: -15.12572956085205
    9. ' ' → logprob: -15.75072956085205
    10. '(

' → logprob: -15.87572956085205

Token 126: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0299599040299654
    2. '    
' → logprob: -3.9049599170684814
    3. 'value' → logprob: -5.904959678649902
    4. '
' → logprob: -6.154959678649902
    5. ')' → logprob: -7.154959678649902
    6. ' ' → logprob: -7.529959678649902
    7. '    ' → logprob: -7.654959678649902
    8. ' value' → logprob: -7.654959678649902
    9. '   
' → logprob: -7.779959678649902
    10. '  
' → logprob: -8.154959678649902

Token 127: ' L' (ID: 451)
  Prédit: ' value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' value' → logprob: -0.6307656168937683
    2. ' converted' → logprob: -1.505765676498413
    3. ' L' → logprob: -2.505765676498413
    4. 'value' → logprob: -2.755765676498413
    5. 'converted' → logprob: -2.755765676498413
    6. 'L' (adapté à ' L') → logprob: -4.130765438079834
    7. ' try' → logprob: -4.380765438079834
    8. '   ' → logprob: -5.630765438079834
    9. 'try' → logprob: -6.255765438079834
    10. ' raw' → logprob: -7.130765438079834

Token 128: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0007854487630538642
    2. '=' → logprob: -7.3757853507995605
    3. '_' → logprob: -8.875785827636719
    4. ' ' → logprob: -11.250785827636719
    5. '_space' → logprob: -12.375785827636719
    6. ' =
' → logprob: -14.875785827636719
    7. '.' → logprob: -14.875785827636719
    8. ' _' → logprob: -15.250785827636719
    9. ' =)' → logprob: -15.500785827636719
    10. ')' → logprob: -15.750785827636719

Token 129: ' convert' (ID: 8452)
  Prédit: ' convert'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' convert' → logprob: -0.005295784678310156
    2. 'convert' → logprob: -5.255295753479004
    3. ' float' → logprob: -9.755295753479004
    4. '(convert' → logprob: -13.255295753479004
    5. ' ' → logprob: -13.380295753479004
    6. 'float' → logprob: -15.130295753479004
    7. ' int' → logprob: -15.630295753479004
    8. '.convert' → logprob: -16.25529670715332
    9. '_convert' → logprob: -16.25529670715332
    10. ' convertir' → logprob: -17.63029670715332

Token 130: '_to' (ID: 5089)
  Prédit: '_to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_to' → logprob: -2.6656825866666622e-05
    2. '_' → logprob: -10.62502670288086
    3. '_t' → logprob: -14.37502670288086
    4. '(' → logprob: -14.62502670288086
    5. 'to' → logprob: -14.87502670288086
    6. 'To' → logprob: -15.00002670288086
    7. '##_' → logprob: -16.50002670288086
    8. '('_' → logprob: -16.62502670288086
    9. '_into' → logprob: -16.62502670288086
    10. '_TO' → logprob: -16.62502670288086

Token 131: '_float' (ID: 44505)
  Prédit: '_float'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_float' → logprob: -6.492120155598968e-05
    2. 'float' → logprob: -10.125064849853516
    3. '_' → logprob: -10.750064849853516
    4. ' _' → logprob: -13.375064849853516
    5. '_f' → logprob: -14.125064849853516
    6. ' float' → logprob: -15.375064849853516
    7. '_floor' → logprob: -15.750064849853516
    8. ')_' → logprob: -16.250064849853516
    9. '_FLOAT' → logprob: -16.500064849853516
    10. 'Float' → logprob: -16.500064849853516

Token 132: '(raw' (ID: 46707)
  Prédit: '(raw'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(raw' → logprob: -0.10028193891048431
    2. '(' → logprob: -2.3502819538116455
    3. '(L' → logprob: -9.600281715393066
    4. ' (' → logprob: -12.225281715393066
    5. '(
' → logprob: -13.225281715393066
    6. '(

' → logprob: -15.225281715393066
    7. ' ' → logprob: -16.225282669067383
    8. 'raw' → logprob: -16.600282669067383
    9. '('' → logprob: -16.725282669067383
    10. '(value' → logprob: -16.850282669067383

Token 133: '_input' (ID: 12507)
  Prédit: '_input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.00011534435179783031
    2. '_' → logprob: -9.250115394592285
    3. ' _' → logprob: -12.000115394592285
    4. '_in' → logprob: -12.250115394592285
    5. '_inputs' → logprob: -12.750115394592285
    6. 'Input' → logprob: -13.500115394592285
    7. ')' → logprob: -14.125115394592285
    8. '_value' → logprob: -14.500115394592285
    9. 'input' → logprob: -14.500115394592285
    10. '   ' → logprob: -14.750115394592285

Token 134: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.723352049040841e-06
    2. ')
' → logprob: -12.375004768371582
    3. ' )' → logprob: -14.875004768371582
    4. '   ' → logprob: -17.000003814697266
    5. '))' → logprob: -18.250003814697266
    6. ')

' → logprob: -18.375003814697266
    7. ')`' → logprob: -18.875003814697266
    8. '),' → logprob: -19.125003814697266
    9. ')return' → logprob: -19.125003814697266
    10. ')#' → logprob: -19.125003814697266

Token 135: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05347232148051262
    2. 'result' → logprob: -3.5534722805023193
    3. '
' → logprob: -4.178472518920898
    4. '    
' → logprob: -5.303472518920898
    5. ' result' → logprob: -5.803472518920898
    6. '  
' → logprob: -10.303472518920898
    7. '	result' → logprob: -10.803472518920898
    8. '   
' → logprob: -11.428472518920898
    9. ')' → logprob: -11.553472518920898
    10. ' 
' → logprob: -11.678472518920898

Token 136: ' result' (ID: 1534)
  Prédit: ' result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' result' → logprob: -0.5087661743164062
    2. 'result' (adapté à ' result') → logprob: -1.0087661743164062
    3. '   ' → logprob: -3.3837661743164062
    4. '    
' → logprob: -9.508766174316406
    5. '_result' → logprob: -10.758766174316406
    6. '	result' → logprob: -10.758766174316406
    7. '
' → logprob: -11.633766174316406
    8. 'value' → logprob: -11.883766174316406
    9. ' value' → logprob: -12.008766174316406
    10. ' res' → logprob: -12.383766174316406

Token 137: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.002479581395164132
    2. '=' → logprob: -6.002479553222656
    3. '_' → logprob: -13.002479553222656
    4. ' ' → logprob: -14.002479553222656
    5. ' =
' → logprob: -14.627479553222656
    6. ' =)' → logprob: -15.127479553222656
    7. ' ' → logprob: -16.752479553222656
    8. ')' → logprob: -17.127479553222656
    9. ' =
' → logprob: -18.377479553222656
    10. '.' → logprob: -18.627479553222656

Token 138: ' calculate' (ID: 17950)
  Prédit: ' calculate'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' calculate' → logprob: -0.2014201581478119
    2. 'calculate' → logprob: -1.7014201879501343
    3. '   ' → logprob: -12.201419830322266
    4. '.calculate' → logprob: -13.951419830322266
    5. ' ' → logprob: -14.826419830322266
    6. 'alculate' → logprob: -15.201419830322266
    7. ' calcular' → logprob: -16.451419830322266
    8. ' compute' → logprob: -17.326419830322266
    9. 'calc' → logprob: -17.326419830322266
    10. '    ' → logprob: -17.326419830322266

Token 139: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -8.2994620242971e-06
    2. '_' → logprob: -12.250008583068848
    3. '_res' → logprob: -13.250008583068848
    4. '_results' → logprob: -13.875008583068848
    5. '_Result' → logprob: -15.375008583068848
    6. ' _' → logprob: -15.750008583068848
    7. '_output' → logprob: -15.875008583068848
    8. '_RESULT' → logprob: -16.25000762939453
    9. 'result' → logprob: -16.37500762939453
    10. '_value' → logprob: -16.75000762939453

Token 140: '(L' (ID: 11075)
  Prédit: '(result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.033852577209472656
    2. '(' → logprob: -3.5338525772094727
    3. '(L' → logprob: -5.533852577209473
    4. 'result' → logprob: -9.408852577209473
    5. '_result' → logprob: -9.783852577209473
    6. '(value' → logprob: -13.658852577209473
    7. '(
' → logprob: -13.658852577209473
    8. '(Result' → logprob: -13.908852577209473
    9. ' result' → logprob: -14.783852577209473
    10. '(results' → logprob: -15.408852577209473

Token 141: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -7.755678961984813e-05
    2. ')
' → logprob: -9.500077247619629
    3. ' )' → logprob: -13.000077247619629
    4. '   ' → logprob: -15.625077247619629
    5. ')

' → logprob: -16.125078201293945
    6. '))' → logprob: -18.000078201293945
    7. ' ' → logprob: -18.125078201293945
    8. ')
' → logprob: -18.375078201293945
    9. '()' → logprob: -18.500078201293945
    10. ')`' → logprob: -18.500078201293945

Token 142: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04364803805947304
    2. ' formatted' → logprob: -4.0436482429504395
    3. 'formatted' → logprob: -4.0436482429504395
    4. '
' → logprob: -5.0436482429504395
    5. '    
' → logprob: -6.9186482429504395
    6. ' form' → logprob: -10.043647766113281
    7. 'form' → logprob: -10.293647766113281
    8. 'Formatted' → logprob: -10.293647766113281
    9. '	form' → logprob: -10.668647766113281
    10. ' 
' → logprob: -11.043647766113281

Token 143: ' formatted' (ID: 43831)
  Prédit: 'formatted'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'formatted' (adapté à ' formatted') → logprob: -0.1272764354944229
    2. ' formatted' → logprob: -2.1272764205932617
    3. 'output' → logprob: -9.002276420593262
    4. ' output' → logprob: -9.252276420593262
    5. '   ' → logprob: -9.377276420593262
    6. '
' → logprob: -10.627276420593262
    7. 'form' → logprob: -11.252276420593262
    8. 'print' → logprob: -13.377276420593262
    9. '    
' → logprob: -13.877276420593262
    10. 'final' → logprob: -14.002276420593262

Token 144: '_result' (ID: 11623)
  Prédit: '_output'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_output' → logprob: -0.06917704641819
    2. '_result' → logprob: -3.4441771507263184
    3. '_' → logprob: -3.9441771507263184
    4. '_value' → logprob: -4.194177150726318
    5. '_out' → logprob: -8.94417667388916
    6. ' _' → logprob: -9.69417667388916
    7. '("_' → logprob: -10.06917667388916
    8. '"_' → logprob: -10.44417667388916
    9. '('_' → logprob: -10.56917667388916
    10. '_input' → logprob: -10.81917667388916

Token 145: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.019823508337140083
    2. '=' → logprob: -4.6448235511779785
    3. ' =' → logprob: -4.7698235511779785
    4. '('' → logprob: -7.7698235511779785
    5. '()' → logprob: -8.51982307434082
    6. ')' → logprob: -8.64482307434082
    7. ' (' → logprob: -8.76982307434082
    8. '(form' → logprob: -8.76982307434082
    9. '(result' → logprob: -9.39482307434082
    10. ' ' → logprob: -9.64482307434082

Token 146: ' format' (ID: 6011)
  Prédit: ' format'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' format' → logprob: -0.0005535095697268844
    2. 'format' → logprob: -7.500553607940674
    3. '(format' → logprob: -15.500553131103516
    4. ' form' → logprob: -15.625553131103516
    5. '	format' → logprob: -16.500553131103516
    6. '=format' → logprob: -17.500553131103516
    7. '_format' → logprob: -17.875553131103516
    8. ' formatted' → logprob: -19.375553131103516
    9. ' ' → logprob: -19.375553131103516
    10. '.format' → logprob: -19.375553131103516

Token 147: '_output' (ID: 16732)
  Prédit: '_output'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_output' → logprob: -2.7014437364414334e-05
    2. '_' → logprob: -10.62502670288086
    3. '_out' → logprob: -13.37502670288086
    4. '_result' → logprob: -14.12502670288086
    5. '_input' → logprob: -15.50002670288086
    6. '_value' → logprob: -16.75002670288086
    7. '(output' → logprob: -17.50002670288086
    8. '_Output' → logprob: -17.50002670288086
    9. ' _' → logprob: -18.00002670288086
    10. '_format' → logprob: -18.25002670288086

Token 148: '(result' (ID: 8111)
  Prédit: '(result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(result' → logprob: -0.5759665966033936
    2. '(' → logprob: -0.8259665966033936
    3. ' (' → logprob: -11.325966835021973
    4. '(
' → logprob: -11.950966835021973
    5. '(

' → logprob: -13.325966835021973
    6. '(value' → logprob: -13.450966835021973
    7. '(results' → logprob: -13.575966835021973
    8. '(resultado' → logprob: -13.825966835021973
    9. '(form' → logprob: -13.950966835021973
    10. '(res' → logprob: -14.325966835021973

Token 149: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0001105762057704851
    2. ',' → logprob: -9.250110626220703
    3. ')
' → logprob: -11.250110626220703
    4. ' )' → logprob: -14.000110626220703
    5. ',)' → logprob: -15.375110626220703
    6. ' ' → logprob: -16.125110626220703
    7. '),' → logprob: -16.125110626220703
    8. '   ' → logprob: -16.375110626220703
    9. '))' → logprob: -17.000110626220703
    10. ')`' → logprob: -17.125110626220703

Token 150: ' ' (ID: 220)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.01573941670358181
    2. ' ' → logprob: -4.265739440917969
    3. ')' → logprob: -6.640739440917969
    4. '1' → logprob: -8.765739440917969
    5. ' )' → logprob: -10.390739440917969
    6. '12' → logprob: -10.640739440917969
    7. '9' → logprob: -10.640739440917969
    8. '11' → logprob: -11.390739440917969
    9. '6' → logprob: -11.640739440917969
    10. '2' → logprob: -12.515739440917969

Token 151: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.0032816906459629536
    2. '9' → logprob: -7.128281593322754
    3. '1' → logprob: -7.378281593322754
    4. '12' → logprob: -7.378281593322754
    5. '3' → logprob: -8.003281593322754
    6. '6' → logprob: -8.753281593322754
    7. '7' → logprob: -8.753281593322754
    8. ' ' → logprob: -8.878281593322754
    9. '11' → logprob: -9.253281593322754
    10. ')' → logprob: -9.378281593322754

Token 152: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.796184723294573e-06
    2. ')
' → logprob: -12.375005722045898
    3. ' )' → logprob: -13.500005722045898
    4. ')

' → logprob: -19.2500057220459
    5. ' ' → logprob: -19.3750057220459
    6. ')`' → logprob: -19.3750057220459
    7. '')' → logprob: -19.5000057220459
    8. '))' → logprob: -19.6250057220459
    9. '   ' → logprob: -20.1250057220459
    10. '),' → logprob: -20.2500057220459

Token 153: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.17293930053710938
    2. '
' → logprob: -2.0479393005371094
    3. '    
' → logprob: -3.6729393005371094
    4. 'print' → logprob: -6.797939300537109
    5. ')' → logprob: -7.172939300537109
    6. ')
' → logprob: -7.547939300537109
    7. '  
' → logprob: -7.797939300537109
    8. ' 
' → logprob: -8.17293930053711
    9. '<|end|>' → logprob: -8.17293930053711
    10. '\n' → logprob: -8.29793930053711

Token 154: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.00403636833652854
    2. '   ' → logprob: -6.0040364265441895
    3. ' print' → logprob: -6.5040364265441895
    4. '
' → logprob: -10.004035949707031
    5. '	print' → logprob: -11.504035949707031
    6. '    
' → logprob: -12.879035949707031
    7. '_print' → logprob: -13.129035949707031
    8. '(print' → logprob: -14.254035949707031
    9. ' ' → logprob: -14.879035949707031
    10. '.print' → logprob: -14.879035949707031

Token 155: '_output' (ID: 16732)
  Prédit: '_output'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_output' → logprob: -0.004995244089514017
    2. '_' → logprob: -5.379995346069336
    3. '_form' → logprob: -9.129995346069336
    4. '(' → logprob: -9.254995346069336
    5. '(_' → logprob: -9.504995346069336
    6. '_out' → logprob: -10.754995346069336
    7. '_(' → logprob: -11.379995346069336
    8. '(form' → logprob: -11.379995346069336
    9. '('_' → logprob: -11.504995346069336
    10. '("_' → logprob: -11.879995346069336

Token 156: '(form' (ID: 33445)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6945446133613586
    2. '(form' → logprob: -0.6945446133613586
    3. '(result' → logprob: -6.819544792175293
    4. '(format' → logprob: -9.444544792175293
    5. '(filtered' → logprob: -9.819544792175293
    6. '(print' → logprob: -11.194544792175293
    7. '(final' → logprob: -11.444544792175293
    8. '(raw' → logprob: -11.444544792175293
    9. '(output' → logprob: -11.569544792175293
    10. ' (' → logprob: -11.694544792175293

Token 157: 'atted' (ID: 19639)
  Prédit: 'atted'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'atted' → logprob: -0.46848151087760925
    2. 'ated' → logprob: -1.0934815406799316
    3. 'at' → logprob: -4.468481540679932
    4. 'itted' → logprob: -4.593481540679932
    5. 'ed' → logprob: -4.718481540679932
    6. '_' → logprob: -5.218481540679932
    7. 'ited' → logprob: -6.968481540679932
    8. '_form' → logprob: -7.968481540679932
    9. '_at' → logprob: -7.968481540679932
    10. 'uted' → logprob: -8.343481063842773

Token 158: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -0.011081892065703869
    2. 'ed' → logprob: -4.511081695556641
    3. '_res' → logprob: -10.88608169555664
    4. '_' → logprob: -12.38608169555664
    5. '_value' → logprob: -12.88608169555664
    6. '_results' → logprob: -13.76108169555664
    7. 'e' → logprob: -13.88608169555664
    8. 'es' → logprob: -14.01108169555664
    9. '_output' → logprob: -14.13608169555664
    10. 'ted' → logprob: -14.13608169555664

Token 159: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.4121114822482923e-06
    2. ')
' → logprob: -12.875003814697266
    3. ' )' → logprob: -14.125003814697266
    4. '()' → logprob: -16.750003814697266
    5. ')

' → logprob: -17.000003814697266
    6. ')`' → logprob: -17.500003814697266
    7. '(' → logprob: -18.000003814697266
    8. '   ' → logprob: -18.500003814697266
    9. '())' → logprob: -18.750003814697266
    10. '))' → logprob: -19.000003814697266

Token 160: 'main' (ID: 7731)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.004192844033241272
    2. '
' → logprob: -5.75419282913208
    3. '\n' → logprob: -7.50419282913208
    4. 'main' → logprob: -8.004193305969238
    5. '\' → logprob: -9.879193305969238
    6. ' if' → logprob: -11.129193305969238
    7. '<|end|>' → logprob: -11.379193305969238
    8. '_' → logprob: -11.754193305969238
    9. 'i' → logprob: -11.754193305969238
    10. ' 
' → logprob: -12.129193305969238

Token 161: '()' (ID: 416)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.38705718517303467
    2. '()' → logprob: -1.1370571851730347
    3. '(
' → logprob: -9.137057304382324
    4. '()
' → logprob: -10.262057304382324
    5. '#' → logprob: -11.387057304382324
    6. '(

' → logprob: -11.512057304382324
    7. '```' → logprob: -12.387057304382324
    8. '()

' → logprob: -12.512057304382324
    9. '();' → logprob: -13.512057304382324
    10. ' (' → logprob: -13.637057304382324


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 159
Tokens correctement prédits (1ère position, stricte): 67
Tokens correctement prédits (1ère position, avec adaptation): 71
Tokens correctement prédits (top 10): 138
Précision stricte (1ère position): 42.14%
Précision adaptée (1ère position): 44.65%
Précision (top 10): 86.79%
================================================================================
