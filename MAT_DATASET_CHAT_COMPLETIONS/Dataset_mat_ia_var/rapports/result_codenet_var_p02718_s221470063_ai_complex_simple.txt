================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:19:01
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from functools import reduce
from operator import add
from itertools import starmap, count
from math import ceil

N, M = map(int, input().split())
A = list(map(int, input().split()))

total = reduce(add, A)
threshold = total / (4 * M)

elaborate = lambda x: (lambda z: not (z < 0))(x - threshold)

cnt = sum(starmap(lambda idx, val: elaborate(val), zip(count(), A)))
print((lambda x: ["No", "Yes"][x])(cnt >= M))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' functools' (ID: 142636)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' reduce' (ID: 10389)
  Prédit: 'wrap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'wrap' → logprob: -0.534712553024292
    2. 'partial' → logprob: -1.034712553024292
    3. 'reduce' → logprob: -3.034712553024292
    4. ' wraps' → logprob: -5.284712791442871
    5. 'l' → logprob: -5.659712791442871
    6. 'cached' → logprob: -6.909712791442871
    7. 'cache' → logprob: -7.659712791442871
    8. ' partial' → logprob: -8.534712791442871
    9. 'cmp' → logprob: -8.659712791442871
    10. '```' → logprob: -8.784712791442871

Token 4: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0009063414763659239
    2. ' (' → logprob: -8.250905990600586
    3. ',' → logprob: -8.375905990600586
    4. '(lambda' → logprob: -8.625905990600586
    5. '.' → logprob: -9.625905990600586
    6. 'def' → logprob: -9.750905990600586
    7. '(
' → logprob: -10.750905990600586
    8. 'a' → logprob: -11.000905990600586
    9. '```' → logprob: -11.250905990600586
    10. '\' → logprob: -11.500905990600586

Token 5: 'from' (ID: 2845)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.014403714798390865
    2. '(
' → logprob: -5.139403820037842
    3. '(lambda' → logprob: -5.389403820037842
    4. 'def' → logprob: -6.639403820037842
    5. ',' → logprob: -7.139403820037842
    6. '\' → logprob: -8.139403343200684
    7. ' ' → logprob: -8.264403343200684
    8. ' (' → logprob: -8.389403343200684
    9. '
' → logprob: -9.139403343200684
    10. '' → logprob: -9.139403343200684

Token 6: ' operator' (ID: 11019)
  Prédit: ' math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.9289020299911499
    2. ' operator' → logprob: -1.42890202999115
    3. ' itertools' → logprob: -1.55390202999115
    4. ' collections' → logprob: -1.92890202999115
    5. ' os' → logprob: -4.9289021492004395
    6. 'operator' → logprob: -7.4289021492004395
    7. ' sys' → logprob: -8.553901672363281
    8. ' typing' → logprob: -8.553901672363281
    9. 'collections' → logprob: -8.928901672363281
    10. 'math' → logprob: -9.053901672363281

Token 7: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.044668834656476974
    2. 'import' → logprob: -3.6696689128875732
    3. '.' → logprob: -4.169668674468994
    4. ' ' → logprob: -6.044668674468994
    5. ' .' → logprob: -8.419669151306152
    6. '.import' → logprob: -9.169669151306152
    7. '	import' → logprob: -11.419669151306152
    8. '_import' → logprob: -11.544669151306152
    9. '<|end|>' → logprob: -11.794669151306152
    10. ' Import' → logprob: -13.169669151306152

Token 8: ' add' (ID: 1147)
  Prédit: ' add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' add' → logprob: -0.22591231763362885
    2. ' import' → logprob: -1.97591233253479
    3. ' mul' → logprob: -3.60091233253479
    4. 'add' → logprob: -3.97591233253479
    5. ' ' → logprob: -4.350912094116211
    6. 'import' → logprob: -5.975912094116211
    7. 'mul' → logprob: -6.600912094116211
    8. ' item' → logprob: -8.100912094116211
    9. ' icon' → logprob: -9.475912094116211
    10. ' ad' → logprob: -10.100912094116211

Token 9: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5770491361618042
    2. '\n' → logprob: -1.4520491361618042
    3. '\' → logprob: -2.4520492553710938
    4. '(
' → logprob: -2.7020492553710938
    5. ',' → logprob: -4.827049255371094
    6. 'newline' → logprob: -5.077049255371094
    7. 'def' → logprob: -5.202049255371094
    8. '
' → logprob: -5.702049255371094
    9. 'result' → logprob: -5.827049255371094
    10. '#' → logprob: -5.952049255371094

Token 10: 'from' (ID: 2845)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.053393661975860596
    2. '(
' → logprob: -3.178393602371216
    3. '\n' → logprob: -6.428393840789795
    4. 'def' → logprob: -6.428393840789795
    5. '\' → logprob: -6.928393840789795
    6. ',' → logprob: -7.178393840789795
    7. 'a' → logprob: -7.178393840789795
    8. '(

' → logprob: -7.178393840789795
    9. 'result' → logprob: -7.303393840789795
    10. '#' → logprob: -7.928393840789795

Token 11: ' itertools' (ID: 103178)
  Prédit: ' itertools'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' itertools' → logprob: -0.035821154713630676
    2. 'it' → logprob: -4.785820960998535
    3. ' math' → logprob: -4.910820960998535
    4. '_' → logprob: -5.035820960998535
    5. 'math' → logprob: -5.660820960998535
    6. 'collections' → logprob: -5.910820960998535
    7. ' collections' → logprob: -6.410820960998535
    8. ' functools' → logprob: -6.785820960998535
    9. ' os' → logprob: -7.035820960998535
    10. 'os' → logprob: -7.285820960998535

Token 12: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.7141642570495605
    2. 'import' → logprob: -0.8391642570495605
    3. '.' → logprob: -2.7141642570495605
    4. ' .' → logprob: -4.8391642570495605
    5. '.import' → logprob: -5.5891642570495605
    6. '.im' → logprob: -9.089164733886719
    7. '	import' → logprob: -9.589164733886719
    8. ' ' → logprob: -9.964164733886719
    9. '.groupby' → logprob: -10.214164733886719
    10. '_import' → logprob: -10.839164733886719

Token 13: ' st' (ID: 420)
  Prédit: ' chain'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' chain' → logprob: -0.8969243168830872
    2. ' accumulate' → logprob: -1.3969242572784424
    3. 'chain' → logprob: -2.1469242572784424
    4. ' cycle' → logprob: -2.6469242572784424
    5. 'acc' → logprob: -2.8969242572784424
    6. ' group' → logprob: -3.3969242572784424
    7. 'cycle' → logprob: -3.6469242572784424
    8. 'count' → logprob: -4.2719244956970215
    9. 'group' → logprob: -4.7719244956970215
    10. 'com' → logprob: -5.0219244956970215

Token 14: 'arm' (ID: 2218)
  Prédit: 'arm'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'arm' → logprob: -0.5807985067367554
    2. 'ar' → logprob: -0.8307985067367554
    3. 'art' → logprob: -5.955798625946045
    4. 'arp' → logprob: -6.580798625946045
    5. 'arl' → logprob: -7.830798625946045
    6. 'a' → logprob: -9.330798149108887
    7. 'r' → logprob: -9.705798149108887
    8. 'ertools' → logprob: -9.705798149108887
    9. 'arb' → logprob: -9.955798149108887
    10. 'ep' → logprob: -10.580798149108887

Token 15: 'ap' (ID: 403)
  Prédit: 'ap'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ap' → logprob: -0.0052398028783500195
    2. 'atch' → logprob: -5.255239963531494
    3. 'apse' → logprob: -13.255239486694336
    4. 'ach' → logprob: -13.630239486694336
    5. 'ethod' → logprob: -14.755239486694336
    6. 'app' → logprob: -14.880239486694336
    7. 'patch' → logprob: -14.880239486694336
    8. 'ep' → logprob: -15.005239486694336
    9. 'atched' → logprob: -15.130239486694336
    10. 'at' → logprob: -15.505239486694336

Token 16: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5437047481536865
    2. ',' → logprob: -1.5437047481536865
    3. 'def' → logprob: -2.1687047481536865
    4. '(
' → logprob: -3.5437047481536865
    5. '\' → logprob: -4.668704986572266
    6. 'import' → logprob: -4.668704986572266
    7. ')' → logprob: -4.793704986572266
    8. '\n' → logprob: -5.043704986572266
    9. '.' → logprob: -5.543704986572266
    10. '#' → logprob: -5.668704986572266

Token 17: ' count' (ID: 3605)
  Prédit: 'acc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'acc' → logprob: -0.9415664076805115
    2. 'product' → logprob: -1.1915664672851562
    3. 'group' → logprob: -2.8165664672851562
    4. 'chain' → logprob: -2.9415664672851562
    5. ' product' → logprob: -3.4415664672851562
    6. 'cycle' → logprob: -3.8165664672851562
    7. 'repeat' → logprob: -3.9415664672851562
    8. 'tee' → logprob: -4.066566467285156
    9. 'filter' → logprob: -4.191566467285156
    10. 'count' → logprob: -4.316566467285156

Token 18: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.22424615919589996
    2. '(
' → logprob: -2.7242462635040283
    3. ',' → logprob: -2.9742462635040283
    4. '\' → logprob: -3.8492462635040283
    5. '\n' → logprob: -3.8492462635040283
    6. 'def' → logprob: -4.349246025085449
    7. ',
' → logprob: -4.349246025085449
    8. '```' → logprob: -5.724246025085449
    9. '(

' → logprob: -6.224246025085449
    10. ',

' → logprob: -6.974246025085449

Token 19: 'from' (ID: 2845)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.34005576372146606
    2. '(
' → logprob: -2.3400557041168213
    3. ',' → logprob: -2.4650557041168213
    4. 'def' → logprob: -3.0900557041168213
    5. ',
' → logprob: -4.2150559425354
    6. '(

' → logprob: -4.2150559425354
    7. '
' → logprob: -4.8400559425354
    8. '\n' → logprob: -4.9650559425354
    9. '

' → logprob: -5.4650559425354
    10. ',

' → logprob: -5.5900559425354

Token 20: ' math' (ID: 13324)
  Prédit: 'math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'math' → logprob: -0.7138320207595825
    2. ' math' → logprob: -1.3388320207595825
    3. 'operator' → logprob: -2.463831901550293
    4. ' operator' → logprob: -2.588831901550293
    5. ' functools' → logprob: -3.588831901550293
    6. ' ' → logprob: -4.213831901550293
    7. 'collections' → logprob: -5.088831901550293
    8. ' itertools' → logprob: -5.213831901550293
    9. ' more' → logprob: -5.338831901550293
    10. 'more' → logprob: -5.463831901550293

Token 21: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.6346951723098755
    2. 'import' → logprob: -0.7596951723098755
    3. '.' → logprob: -8.009695053100586
    4. '.sqrt' → logprob: -8.259695053100586
    5. '<|end|>' → logprob: -8.384695053100586
    6. ' ' → logprob: -8.884695053100586
    7. '	import' → logprob: -9.009695053100586
    8. '```' → logprob: -9.259695053100586
    9. '_import' → logprob: -9.509695053100586
    10. '>' → logprob: -9.509695053100586

Token 22: ' ceil' (ID: 35964)
  Prédit: 'inf'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'inf' → logprob: -1.4219014644622803
    2. 'sqrt' → logprob: -1.5469014644622803
    3. 'factor' → logprob: -1.7969014644622803
    4. 'is' → logprob: -2.2969014644622803
    5. ' factorial' → logprob: -2.6719014644622803
    6. 'prod' → logprob: -3.0469014644622803
    7. ' inf' → logprob: -3.5469014644622803
    8. 'log' → logprob: -3.6719014644622803
    9. ' gcd' → logprob: -3.6719014644622803
    10. 'ceil' → logprob: -3.7969014644622803

Token 23: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.9478363394737244
    2. '(
' → logprob: -0.9478363394737244
    3. 'def' → logprob: -2.072836399078369
    4. '\' → logprob: -3.072836399078369
    5. '\n' → logprob: -4.072836399078369
    6. '
' → logprob: -4.572836399078369
    7. '```' → logprob: -5.322836399078369
    8. 'd' → logprob: -5.697836399078369
    9. '(

' → logprob: -5.697836399078369
    10. '`' → logprob: -6.072836399078369

Token 24: 'N' (ID: 45)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.2363368719816208
    2. 'def' → logprob: -2.3613369464874268
    3. '#' → logprob: -2.9863369464874268
    4. '(' → logprob: -4.361336708068848
    5. '\' → logprob: -4.611336708068848
    6. '`' → logprob: -4.861336708068848
    7. 'f' → logprob: -5.361336708068848
    8. 'n' → logprob: -5.361336708068848
    9. '```' → logprob: -5.736336708068848
    10. ',' → logprob: -5.986336708068848

Token 25: ',' (ID: 11)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.26885372400283813
    2. '=' → logprob: -2.1438536643981934
    3. ' =' → logprob: -2.7688536643981934
    4. ' ' → logprob: -4.018853664398193
    5. ',' → logprob: -4.393853664398193
    6. '(' → logprob: -4.768853664398193
    7. ')' → logprob: -6.018853664398193
    8. '  ' → logprob: -6.143853664398193
    9. '>' → logprob: -6.643853664398193
    10. '.' → logprob: -6.643853664398193

Token 26: ' M' (ID: 391)
  Prédit: ' K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.4945131838321686
    2. ' M' → logprob: -1.3695131540298462
    3. 'K' → logprob: -2.3695132732391357
    4. 'M' → logprob: -3.6195132732391357
    5. ' k' → logprob: -4.994513034820557
    6. 'k' → logprob: -6.119513034820557
    7. ' =' → logprob: -6.369513034820557
    8. ' ' → logprob: -7.619513034820557
    9. '=' → logprob: -7.744513034820557
    10. ' n' → logprob: -7.994513034820557

Token 27: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.026327118277549744
    2. '=' → logprob: -3.651327133178711
    3. ',' → logprob: -10.651327133178711
    4. ' ' → logprob: -14.026327133178711
    5. ')' → logprob: -14.526327133178711
    6. ' =
' → logprob: -14.651327133178711
    7. '<|end|>' → logprob: -14.651327133178711
    8. ' ,' → logprob: -15.276327133178711
    9. ' =",' → logprob: -16.15132713317871
    10. '  ' → logprob: -16.40132713317871

Token 28: ' map' (ID: 4014)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6879207491874695
    2. ' map' → logprob: -0.8129207491874695
    3. '10' → logprob: -3.6879208087921143
    4. 'map' → logprob: -3.8129208087921143
    5. '100' → logprob: -5.312920570373535
    6. '20' → logprob: -7.687920570373535
    7. '5' → logprob: -7.937920570373535
    8. '50' → logprob: -8.312920570373535
    9. ' int' → logprob: -9.187920570373535
    10. '1' → logprob: -9.187920570373535

Token 29: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2755705416202545
    2. '(int' → logprob: -1.5255705118179321
    3. '(lambda' → logprob: -3.9005706310272217
    4. '(str' → logprob: -6.525570392608643
    5. '(input' → logprob: -7.150570392608643
    6. '<|end|>' → logprob: -7.650570392608643
    7. '(
' → logprob: -9.6505708694458
    8. 'int' → logprob: -9.7755708694458
    9. '(range' → logprob: -10.0255708694458
    10. '(list' → logprob: -10.6505708694458

Token 30: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.4910714626312256
    2. ',input' → logprob: -1.3660714626312256
    3. '(input' → logprob: -2.7410714626312256
    4. 'input' → logprob: -2.8660714626312256
    5. '(' → logprob: -5.241071701049805
    6. ' input' → logprob: -5.866071701049805
    7. ')' → logprob: -6.241071701049805
    8. '=input' → logprob: -7.866071701049805
    9. ',int' → logprob: -7.866071701049805
    10. ' ,' → logprob: -8.491071701049805

Token 31: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.0304414015263319
    2. ' input' → logprob: -3.5304412841796875
    3. 'str' → logprob: -8.280441284179688
    4. 'int' → logprob: -8.780441284179688
    5. ')' → logprob: -9.030441284179688
    6. 'lambda' → logprob: -9.280441284179688
    7. 'open' → logprob: -11.030441284179688
    8. ' ' → logprob: -11.155441284179688
    9. 'range' → logprob: -11.405441284179688
    10. ',input' → logprob: -11.655441284179688

Token 32: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.02919757552444935
    2. '()' → logprob: -4.279197692871094
    3. '())' → logprob: -4.279197692871094
    4. ')' → logprob: -7.529197692871094
    5. '(' → logprob: -8.279197692871094
    6. '());' → logprob: -9.529197692871094
    7. '(),' → logprob: -9.654197692871094
    8. '(()' → logprob: -10.154197692871094
    9. '()>' → logprob: -10.904197692871094
    10. '();)' → logprob: -11.279197692871094

Token 33: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0006432149093598127
    2. 'strip' → logprob: -7.375643253326416
    3. ')' → logprob: -11.625642776489258
    4. ' split' → logprob: -12.375642776489258
    5. 'rstrip' → logprob: -13.375642776489258
    6. 'read' → logprob: -14.125642776489258
    7. '(split' → logprob: -14.125642776489258
    8. ' ' → logprob: -15.375642776489258
    9. 'spl' → logprob: -16.500642776489258
    10. ' strip' → logprob: -17.875642776489258

Token 34: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.02070152573287487
    2. '))' → logprob: -3.8957014083862305
    3. '()' → logprob: -9.52070140838623
    4. '())' → logprob: -9.64570140838623
    5. '),' → logprob: -11.14570140838623
    6. ')))' → logprob: -13.27070140838623
    7. ')`' → logprob: -13.39570140838623
    8. '(' → logprob: -13.89570140838623
    9. '()))' → logprob: -14.39570140838623
    10. '`)' → logprob: -14.52070140838623

Token 35: 'A' (ID: 32)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.8442409038543701
    2. '
' → logprob: -1.3442409038543701
    3. 'data' → logprob: -2.21924090385437
    4. ')
' → logprob: -3.46924090385437
    5. 'result' → logprob: -3.96924090385437
    6. '\n' → logprob: -4.344241142272949
    7. 'for' → logprob: -4.469241142272949
    8. 'def' → logprob: -4.469241142272949
    9. ' 
' → logprob: -4.469241142272949
    10. 'n' → logprob: -4.594241142272949

Token 36: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.1617484837770462
    2. '=' → logprob: -1.9117485284805298
    3. ',' → logprob: -6.66174840927124
    4. ' ' → logprob: -9.161748886108398
    5. 's' → logprob: -9.911748886108398
    6. '[' → logprob: -10.411748886108398
    7. '=[]' → logprob: -10.911748886108398
    8. ' =[' → logprob: -11.536748886108398
    9. '_' → logprob: -12.161748886108398
    10. '[]' → logprob: -12.286748886108398

Token 37: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.5413565635681152
    2. ' list' → logprob: -1.0413565635681152
    3. ' [' → logprob: -3.6663565635681152
    4. '[' → logprob: -3.7913565635681152
    5. '[list' → logprob: -4.416356563568115
    6. '[]' → logprob: -5.916356563568115
    7. ' []' → logprob: -7.166356563568115
    8. '[int' → logprob: -7.291356563568115
    9. '[input' → logprob: -8.541357040405273
    10. 'map' → logprob: -9.666357040405273

Token 38: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.23594865202903748
    2. '(' → logprob: -1.7359486818313599
    3. '(int' → logprob: -3.9859485626220703
    4. '(input' → logprob: -4.86094856262207
    5. '(range' → logprob: -4.98594856262207
    6. '(filter' → logprob: -8.61094856262207
    7. '()' → logprob: -8.73594856262207
    8. '(eval' → logprob: -9.11094856262207
    9. '(s' → logprob: -9.61094856262207
    10. '(list' → logprob: -10.98594856262207

Token 39: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0028223509434610605
    2. '(' → logprob: -5.877822399139404
    3. 'int' → logprob: -11.627821922302246
    4. '[int' → logprob: -12.627821922302246
    5. ',int' → logprob: -13.752821922302246
    6. '<int' → logprob: -13.752821922302246
    7. ')' → logprob: -14.252821922302246
    8. '(eval' → logprob: -14.502821922302246
    9. '(input' → logprob: -14.627821922302246
    10. '(str' → logprob: -14.627821922302246

Token 40: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.8030068278312683
    2. ',input' → logprob: -0.8030068278312683
    3. '(input' → logprob: -2.303006887435913
    4. '(' → logprob: -6.303006649017334
    5. 'input' → logprob: -6.428006649017334
    6. ' ,' → logprob: -7.428006649017334
    7. ' (' → logprob: -11.553007125854492
    8. '```' → logprob: -11.928007125854492
    9. '(),' → logprob: -12.053007125854492
    10. ' input' → logprob: -12.178007125854492

Token 41: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.02976691536605358
    2. ' input' → logprob: -3.529766798019409
    3. '(input' → logprob: -12.029767036437988
    4. ',input' → logprob: -12.779767036437988
    5. ' ' → logprob: -12.904767036437988
    6. ')' → logprob: -13.404767036437988
    7. '=input' → logprob: -13.654767036437988
    8. '	input' → logprob: -13.779767036437988
    9. '<input' → logprob: -15.404767036437988
    10. '   ' → logprob: -15.404767036437988

Token 42: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -5.3120038501219824e-05
    2. '()' → logprob: -10.125053405761719
    3. '()))' → logprob: -11.750053405761719
    4. '())' → logprob: -13.500053405761719
    5. ')' → logprob: -13.875053405761719
    6. '(' → logprob: -14.625053405761719
    7. '))' → logprob: -14.625053405761719
    8. '()));' → logprob: -14.750053405761719
    9. ' ().' → logprob: -14.875053405761719
    10. '())))' → logprob: -15.250053405761719

Token 43: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -1.0921942703134846e-05
    2. 'strip' → logprob: -12.00001049041748
    3. '(split' → logprob: -13.12501049041748
    4. ')' → logprob: -13.62501049041748
    5. 'read' → logprob: -14.37501049041748
    6. '())' → logprob: -15.12501049041748
    7. ' split' → logprob: -15.37501049041748
    8. '()' → logprob: -15.50001049041748
    9. 'spl' → logprob: -16.125011444091797
    10. 'rstrip' → logprob: -16.875011444091797

Token 44: '()))

' (ID: 125972)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5878502130508423
    2. '))' → logprob: -0.8378502130508423
    3. '()))' → logprob: -4.712850093841553
    4. '())' → logprob: -6.462850093841553
    5. '(' → logprob: -7.087850093841553
    6. ')))' → logprob: -8.587850570678711
    7. '()' → logprob: -8.587850570678711
    8. '),' → logprob: -9.837850570678711
    9. ')>' → logprob: -11.587850570678711
    10. ').' → logprob: -11.837850570678711

Token 45: 'total' (ID: 9577)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -1.9451322555541992
    2. 'max' → logprob: -2.320132255554199
    3. 'k' → logprob: -2.445132255554199
    4. 's' → logprob: -2.695132255554199
    5. 'd' → logprob: -2.820132255554199
    6. 'dp' → logprob: -2.945132255554199
    7. '#' → logprob: -3.195132255554199
    8. '```' → logprob: -3.445132255554199
    9. 'result' → logprob: -3.570132255554199
    10. 'c' → logprob: -3.945132255554199

Token 46: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.044011082500219345
    2. '_' → logprob: -3.169011116027832
    3. ' =' → logprob: -7.794011116027832
    4. '=' → logprob: -7.919011116027832
    5. '_space' → logprob: -10.169011116027832
    6. '(_)' → logprob: -10.169011116027832
    7. '_sum' → logprob: -10.669011116027832
    8. ' (' → logprob: -10.669011116027832
    9. '_total' → logprob: -11.169011116027832
    10. '(sum' → logprob: -11.544011116027832

Token 47: ' reduce' (ID: 10389)
  Prédit: ' sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sum' → logprob: -0.2279406487941742
    2. 'sum' → logprob: -1.7279406785964966
    3. ' reduce' → logprob: -4.102940559387207
    4. 'reduce' → logprob: -4.727940559387207
    5. ' add' → logprob: -7.977940559387207
    6. ' ceil' → logprob: -9.227940559387207
    7. 'add' → logprob: -9.352940559387207
    8. ' ' → logprob: -9.602940559387207
    9. '0' → logprob: -9.977940559387207
    10. ' max' → logprob: -10.477940559387207

Token 48: '(add' (ID: 40159)
  Prédit: '(add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(add' → logprob: -0.1004418358206749
    2. '(' → logprob: -2.3504419326782227
    3. '(lambda' → logprob: -8.475441932678223
    4. 'add' → logprob: -10.975441932678223
    5. '(operator' → logprob: -12.850441932678223
    6. '(
' → logprob: -13.225441932678223
    7. '(re' → logprob: -13.850441932678223
    8. ')add' → logprob: -14.100441932678223
    9. '(sum' → logprob: -14.475441932678223
    10. ' add' → logprob: -15.100441932678223

Token 49: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.007629703730344772
    2. ',A' → logprob: -4.882629871368408
    3. ' ,' → logprob: -10.88262939453125
    4. 'A' → logprob: -12.63262939453125
    5. '(A' → logprob: -15.13262939453125
    6. '`,' → logprob: -15.13262939453125
    7. ',a' → logprob: -15.13262939453125
    8. ',
' → logprob: -16.00762939453125
    9. ',N' → logprob: -16.63262939453125
    10. '(' → logprob: -16.75762939453125

Token 50: ' A' (ID: 355)
  Prédit: ' A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.25202980637550354
    2. 'A' → logprob: -1.5020297765731812
    3. ')' → logprob: -9.627029418945312
    4. ',A' → logprob: -11.002029418945312
    5. '(A' → logprob: -11.252029418945312
    6. ',' → logprob: -13.252029418945312
    7. '	A' → logprob: -13.502029418945312
    8. ' )' → logprob: -14.002029418945312
    9. ' ' → logprob: -15.252029418945312
    10. ' ,' → logprob: -15.252029418945312

Token 51: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0004176833899691701
    2. ',' → logprob: -7.875417709350586
    3. '))' → logprob: -10.625417709350586
    4. ' )' → logprob: -11.875417709350586
    5. ')))' → logprob: -12.875417709350586
    6. ')`' → logprob: -14.125417709350586
    7. ')
' → logprob: -14.375417709350586
    8. ')+' → logprob: -14.625417709350586
    9. ',)' → logprob: -15.000417709350586
    10. '),' → logprob: -15.250417709350586

Token 52: 'threshold' (ID: 67677)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -1.5183995962142944
    2. '+
' → logprob: -1.7683995962142944
    3. '+' → logprob: -1.8933995962142944
    4. '
' → logprob: -2.268399715423584
    5. '\' → logprob: -2.518399715423584
    6. ' 
' → logprob: -2.643399715423584
    7. '*' → logprob: -3.518399715423584
    8. 'if' → logprob: -4.018399715423584
    9. '//' → logprob: -4.143399715423584
    10. ',' → logprob: -4.268399715423584

Token 53: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.31826767325401306
    2. '=' → logprob: -1.3182677030563354
    3. '_' → logprob: -5.318267822265625
    4. 's' → logprob: -10.568267822265625
    5. ' ' → logprob: -10.568267822265625
    6. ',' → logprob: -11.693267822265625
    7. ')' → logprob: -11.818267822265625
    8. '_=' → logprob: -11.818267822265625
    9. '_space' → logprob: -12.943267822265625
    10. '(' → logprob: -13.068267822265625

Token 54: ' total' (ID: 3609)
  Prédit: ' ceil'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ceil' → logprob: -0.21509796380996704
    2. ' total' → logprob: -2.5900979042053223
    3. 'ceil' → logprob: -2.5900979042053223
    4. ' (' → logprob: -3.5900979042053223
    5. '(total' → logprob: -4.715097904205322
    6. 'total' → logprob: -5.590097904205322
    7. '(' → logprob: -6.215097904205322
    8. ' ' → logprob: -7.715097904205322
    9. ' max' → logprob: -8.21509838104248
    10. ' N' → logprob: -9.09009838104248

Token 55: ' /' (ID: 820)
  Prédit: ' //'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.1585482358932495
    2. ' *' → logprob: -2.658548355102539
    3. '//' → logprob: -3.408548355102539
    4. ' /' → logprob: -3.658548355102539
    5. '*' → logprob: -5.283548355102539
    6. '/' → logprob: -5.783548355102539
    7. '+' → logprob: -6.158548355102539
    8. ' ' → logprob: -6.158548355102539
    9. ' +' → logprob: -6.658548355102539
    10. '<|end|>' → logprob: -7.596048355102539

Token 56: ' (' (ID: 350)
  Prédit: 'M'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'M' → logprob: -0.01497354730963707
    2. 'N' → logprob: -4.8899736404418945
    3. ' M' → logprob: -5.0149736404418945
    4. '2' → logprob: -7.3899736404418945
    5. ' N' → logprob: -10.639973640441895
    6. '(' → logprob: -10.764973640441895
    7. ' ' → logprob: -11.014973640441895
    8. '3' → logprob: -11.639973640441895
    9. '4' → logprob: -12.514973640441895
    10. '(M' → logprob: -13.014973640441895

Token 57: '4' (ID: 19)
  Prédit: 'M'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'M' → logprob: -0.2599485218524933
    2. 'N' → logprob: -1.634948492050171
    3. ' M' → logprob: -3.509948492050171
    4. ' N' → logprob: -5.63494873046875
    5. '(' → logprob: -8.63494873046875
    6. ' ' → logprob: -9.38494873046875
    7. '(M' → logprob: -9.75994873046875
    8. ' (' → logprob: -10.00994873046875
    9. '   ' → logprob: -10.50994873046875
    10. '100' → logprob: -11.13494873046875

Token 58: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.40401849150657654
    2. '*' → logprob: -1.654018521308899
    3. '*M' → logprob: -2.0290184020996094
    4. '*N' → logprob: -5.029018402099609
    5. 'M' → logprob: -6.279018402099609
    6. ' M' → logprob: -7.529018402099609
    7. ')' → logprob: -8.15401840209961
    8. '0' → logprob: -8.65401840209961
    9. 'N' → logprob: -9.02901840209961
    10. ' ' → logprob: -10.40401840209961

Token 59: ' M' (ID: 391)
  Prédit: 'M'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'M' → logprob: -0.040267542004585266
    2. ' M' → logprob: -3.4152674674987793
    3. 'N' → logprob: -5.040267467498779
    4. ' N' → logprob: -9.040267944335938
    5. ' ' → logprob: -12.790267944335938
    6. '   ' → logprob: -13.415267944335938
    7. '*M' → logprob: -14.040267944335938
    8. ')' → logprob: -14.540267944335938
    9. '	M' → logprob: -14.540267944335938
    10. '4' → logprob: -14.852767944335938

Token 60: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.001331190811470151
    2. ' )' → logprob: -7.126331329345703
    3. ')
' → logprob: -7.626331329345703
    4. ')

' → logprob: -11.001331329345703
    5. '))' → logprob: -11.876331329345703
    6. '*' → logprob: -12.251331329345703
    7. '0' → logprob: -13.376331329345703
    8. '**' → logprob: -13.376331329345703
    9. ')**' → logprob: -13.626331329345703
    10. ' )
' → logprob: -13.751331329345703

Token 61: 'el' (ID: 296)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.25454649329185486
    2. 'for' → logprob: -2.8795464038848877
    3. 'sorted' → logprob: -3.0045464038848877
    4. 'count' → logprob: -3.3795464038848877
    5. 'sum' → logprob: -3.5045464038848877
    6. 'valid' → logprob: -4.004546642303467
    7. '```' → logprob: -5.129546642303467
    8. 's' → logprob: -5.254546642303467
    9. 'answer' → logprob: -5.879546642303467
    10. 'if' → logprob: -6.129546642303467

Token 62: 'abor' (ID: 4181)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.23813463747501373
    2. 'se' → logprob: -1.6131346225738525
    3. 'ement' → logprob: -5.488134860992432
    4. 'ements' → logprob: -5.863134860992432
    5. 'em' → logprob: -6.113134860992432
    6. 'e' → logprob: -6.863134860992432
    7. 'for' → logprob: -7.738134860992432
    8. 'emin' → logprob: -8.238134384155273
    9. 'ems' → logprob: -8.488134384155273
    10. 'f' → logprob: -8.488134384155273

Token 63: 'ate' (ID: 379)
  Prédit: 'ate'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ate' → logprob: -0.0447516031563282
    2. 'ated' → logprob: -3.4197516441345215
    3. 'ating' → logprob: -5.6697516441345215
    4. 'ates' → logprob: -6.2947516441345215
    5. 'ation' → logprob: -6.9197516441345215
    6. 'ately' → logprob: -7.2947516441345215
    7. 'rate' → logprob: -7.4197516441345215
    8. '=' → logprob: -8.044751167297363
    9. '

' → logprob: -8.044751167297363
    10. 'A' → logprob: -8.107251167297363

Token 64: ' =' (ID: 314)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.5179683566093445
    2. '```' → logprob: -2.7679684162139893
    3. '\' → logprob: -3.1429684162139893
    4. 'for' → logprob: -3.3929684162139893
    5. '_' → logprob: -3.5179684162139893
    6. ')' → logprob: -3.6429684162139893
    7. 'A' → logprob: -3.7679684162139893
    8. '(' → logprob: -3.7679684162139893
    9. '[' → logprob: -3.8929684162139893
    10. ',' → logprob: -4.14296817779541

Token 65: ' lambda' (ID: 27871)
  Prédit: 'sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'sum' → logprob: -0.6433573365211487
    2. 'lambda' → logprob: -2.268357276916504
    3. '[' → logprob: -2.893357276916504
    4. 'list' → logprob: -3.143357276916504
    5. 'any' → logprob: -3.143357276916504
    6. '0' → logprob: -3.268357276916504
    7. '[]' → logprob: -4.018357276916504
    8. 'len' → logprob: -4.018357276916504
    9. '(lambda' → logprob: -4.018357276916504
    10. '[A' → logprob: -4.268357276916504

Token 66: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.0943218469619751
    2. 'a' → logprob: -2.9693217277526855
    3. ' x' → logprob: -3.4693217277526855
    4. ' a' → logprob: -5.5943217277526855
    5. 'A' → logprob: -6.7193217277526855
    6. 'i' → logprob: -7.2193217277526855
    7. 'n' → logprob: -7.5943217277526855
    8. 'lambda' → logprob: -7.8443217277526855
    9. 'k' → logprob: -7.9693217277526855
    10. ' A' → logprob: -8.469322204589844

Token 67: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0019148342544212937
    2. ' :' → logprob: -6.376914978027344
    3. ':x' → logprob: -9.251914978027344
    4. ',' → logprob: -9.501914978027344
    5. 'x' → logprob: -11.001914978027344
    6. ' x' → logprob: -11.501914978027344
    7. '=' → logprob: -12.751914978027344
    8. ':
' → logprob: -12.876914978027344
    9. ',x' → logprob: -13.126914978027344
    10. ',:' → logprob: -14.251914978027344

Token 68: ' (' (ID: 350)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.4939572513103485
    2. ' x' → logprob: -1.368957281112671
    3. 'sum' → logprob: -3.368957281112671
    4. 'ceil' → logprob: -3.493957281112671
    5. '(x' → logprob: -4.493957042694092
    6. ' sum' → logprob: -4.493957042694092
    7. 'count' → logprob: -4.618957042694092
    8. ' ceil' → logprob: -4.993957042694092
    9. 'any' → logprob: -5.493957042694092
    10. 'all' → logprob: -5.493957042694092

Token 69: 'lambda' (ID: 35280)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.19004398584365845
    2. 'ceil' → logprob: -2.3150439262390137
    3. '(x' → logprob: -4.065043926239014
    4. '(' → logprob: -4.315043926239014
    5. '1' → logprob: -4.315043926239014
    6. 'count' → logprob: -4.565043926239014
    7. ' x' → logprob: -5.565043926239014
    8. 'sum' → logprob: -5.815043926239014
    9. 'A' → logprob: -6.190043926239014
    10. 'max' → logprob: -6.815043926239014

Token 70: ' z' (ID: 579)
  Prédit: ' y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' y' → logprob: -1.1032129526138306
    2. 'y' → logprob: -1.3532129526138306
    3. 'n' → logprob: -2.353212833404541
    4. ' n' → logprob: -2.603212833404541
    5. 'i' → logprob: -3.103212833404541
    6. 'a' → logprob: -3.228212833404541
    7. ' i' → logprob: -3.603212833404541
    8. 'x' → logprob: -3.728212833404541
    9. 'k' → logprob: -4.228212833404541
    10. ' a' → logprob: -4.478212833404541

Token 71: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.011066801846027374
    2. ' :' → logprob: -4.886066913604736
    3. ',' → logprob: -6.636066913604736
    4. '=' → logprob: -6.761066913604736
    5. ',z' → logprob: -8.261066436767578
    6. ':x' → logprob: -8.636066436767578
    7. ':z' → logprob: -9.136066436767578
    8. ':(' → logprob: -9.136066436767578
    9. ':
' → logprob: -9.761066436767578
    10. ':max' → logprob: -10.136066436767578

Token 72: ' not' (ID: 625)
  Prédit: 'z'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'z' → logprob: -0.5535728931427002
    2. 'x' → logprob: -1.8035728931427002
    3. ' z' → logprob: -2.0535728931427
    4. ' x' → logprob: -3.4285728931427
    5. 'ceil' → logprob: -3.4285728931427
    6. '(x' → logprob: -4.178572654724121
    7. '(' → logprob: -4.803572654724121
    8. ' (' → logprob: -5.178572654724121
    9. ' ceil' → logprob: -5.178572654724121
    10. '(z' → logprob: -5.553572654724121

Token 73: ' (' (ID: 350)
  Prédit: ' z'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' z' → logprob: -0.8146949410438538
    2. ' (' → logprob: -1.939694881439209
    3. '(z' → logprob: -1.939694881439209
    4. 'z' → logprob: -2.064694881439209
    5. '(' → logprob: -2.814694881439209
    6. '(x' → logprob: -3.814694881439209
    7. ' any' → logprob: -4.314694881439209
    8. ' all' → logprob: -4.689694881439209
    9. ' x' → logprob: -4.814694881439209
    10. 'x' → logprob: -4.939694881439209

Token 74: 'z' (ID: 89)
  Prédit: 'z'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'z' → logprob: -0.12960627675056458
    2. 'x' → logprob: -3.004606246948242
    3. ' z' → logprob: -3.254606246948242
    4. '(z' → logprob: -5.129606246948242
    5. '(x' → logprob: -5.254606246948242
    6. 'ceil' → logprob: -5.379606246948242
    7. 'threshold' → logprob: -5.879606246948242
    8. 'abs' → logprob: -6.129606246948242
    9. ' x' → logprob: -6.129606246948242
    10. '(' → logprob: -6.379606246948242

Token 75: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.4080005884170532
    2. '<' → logprob: -2.6580004692077637
    3. ' ' → logprob: -2.6580004692077637
    4. ' >' → logprob: -3.1580004692077637
    5. ' %' → logprob: -3.4080004692077637
    6. ' >=' → logprob: -3.6580004692077637
    7. ' <=' → logprob: -3.7830004692077637
    8. '>' → logprob: -3.9080004692077637
    9. '%' → logprob: -4.158000469207764
    10. '<=' → logprob: -4.908000469207764

Token 76: ' ' (ID: 220)
  Prédit: 'threshold'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'threshold' → logprob: -0.334002822637558
    2. ' threshold' → logprob: -1.7090028524398804
    3. 'x' → logprob: -2.709002733230591
    4. ' x' → logprob: -3.334002733230591
    5. 'z' → logprob: -8.709002494812012
    6. ' z' → logprob: -8.834002494812012
    7. '0' → logprob: -9.584002494812012
    8. ' ' → logprob: -9.959002494812012
    9. '=' → logprob: -10.646502494812012
    10. 'reshold' → logprob: -10.709002494812012

Token 77: '0' (ID: 15)
  Prédit: 'threshold'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'threshold' → logprob: -0.004959185607731342
    2. 'x' → logprob: -5.6299591064453125
    3. ' threshold' → logprob: -6.6299591064453125
    4. ' x' → logprob: -11.629959106445312
    5. 'reshold' → logprob: -12.129959106445312
    6. 'z' → logprob: -12.129959106445312
    7. 'th' → logprob: -12.254959106445312
    8. 'int' → logprob: -12.504959106445312
    9. '0' → logprob: -13.754959106445312
    10. ')' → logprob: -13.754959106445312

Token 78: '))(' (ID: 72297)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.698388934135437
    2. ' or' → logprob: -1.198388934135437
    3. ')' → logprob: -2.6983890533447266
    4. ' and' → logprob: -2.9483890533447266
    5. ')))' → logprob: -3.4483890533447266
    6. ' ))' → logprob: -4.198389053344727
    7. 'or' → logprob: -4.698389053344727
    8. 'and' → logprob: -4.823389053344727
    9. 'x' → logprob: -5.323389053344727
    10. ' -' → logprob: -5.823389053344727

Token 79: 'x' (ID: 87)
  Prédit: 'x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.16614896059036255
    2. 'threshold' → logprob: -1.9161489009857178
    3. ' x' → logprob: -5.541149139404297
    4. ' threshold' → logprob: -7.166149139404297
    5. '(x' → logprob: -7.541149139404297
    6. '(' → logprob: -8.166149139404297
    7. 'ceil' → logprob: -8.916149139404297
    8. 'abs' → logprob: -10.041149139404297
    9. ' ' → logprob: -10.416149139404297
    10. '   ' → logprob: -10.791149139404297

Token 80: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.12466743588447571
    2. '-' → logprob: -2.4996674060821533
    3. ')' → logprob: -4.124667644500732
    4. '))' → logprob: -4.124667644500732
    5. ' )' → logprob: -7.249667644500732
    6. '-th' → logprob: -7.374667644500732
    7. 'threshold' → logprob: -7.624667644500732
    8. ' ))' → logprob: -8.124667167663574
    9. ' ' → logprob: -8.874667167663574
    10. ' threshold' → logprob: -9.249667167663574

Token 81: ' threshold' (ID: 24313)
  Prédit: 'threshold'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'threshold' → logprob: -0.0382951945066452
    2. ' threshold' → logprob: -3.288295269012451
    3. 'ceil' → logprob: -8.413294792175293
    4. ' ceil' → logprob: -11.163294792175293
    5. 'int' → logprob: -12.038294792175293
    6. ' ' → logprob: -12.788294792175293
    7. '.threshold' → logprob: -13.288294792175293
    8. ' int' → logprob: -13.538294792175293
    9. 'reshold' → logprob: -13.788294792175293
    10. '   ' → logprob: -14.163294792175293

Token 82: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.020946713164448738
    2. '))' → logprob: -3.895946741104126
    3. ')))' → logprob: -8.020946502685547
    4. ' )' → logprob: -9.645946502685547
    5. '+' → logprob: -13.395946502685547
    6. ' ))' → logprob: -14.020946502685547
    7. ')
' → logprob: -14.270946502685547
    8. '))))' → logprob: -14.270946502685547
    9. ')x' → logprob: -14.270946502685547
    10. '*' → logprob: -14.395946502685547

Token 83: 'cnt' (ID: 33160)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7140557765960693
    2. '
' → logprob: -1.3390557765960693
    3. '<|end|>' → logprob: -1.8390557765960693
    4. 'A' → logprob: -3.5890557765960693
    5. 'for' → logprob: -3.5890557765960693
    6. ')
' → logprob: -4.589056015014648
    7. '.' → logprob: -6.214056015014648
    8. ' 
' → logprob: -6.464056015014648
    9. '\n' → logprob: -6.464056015014648
    10. '  
' → logprob: -6.464056015014648

Token 84: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.11282965540885925
    2. '=' → logprob: -2.2378296852111816
    3. ' ' → logprob: -12.862829208374023
    4. '_' → logprob: -13.737829208374023
    5. '  ' → logprob: -13.862829208374023
    6. '(' → logprob: -14.362829208374023
    7. ' ' → logprob: -14.987829208374023
    8. ',' → logprob: -15.112829208374023
    9. ' =)' → logprob: -15.112829208374023
    10. 's' → logprob: -15.237829208374023

Token 85: ' sum' (ID: 4215)
  Prédit: 'sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sum' → logprob: -0.5916582942008972
    2. ' sum' → logprob: -0.8416582942008972
    3. 'len' → logprob: -4.841658115386963
    4. ' len' → logprob: -4.966658115386963
    5. '0' → logprob: -7.466658115386963
    6. 'reduce' → logprob: -9.341658592224121
    7. ' ' → logprob: -10.216658592224121
    8. ' reduce' → logprob: -10.966658592224121
    9. 'list' → logprob: -12.216658592224121
    10. '(sum' → logprob: -12.216658592224121

Token 86: '(st' (ID: 4065)
  Prédit: '(el'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(el' → logprob: -0.09965285658836365
    2. '(' → logprob: -2.4746527671813965
    3. '(lambda' → logprob: -5.0996527671813965
    4. '((' → logprob: -5.8496527671813965
    5. '(map' → logprob: -6.7246527671813965
    6. '(int' → logprob: -8.974653244018555
    7. '([' → logprob: -9.099653244018555
    8. '(
' → logprob: -9.099653244018555
    9. '(st' → logprob: -9.974653244018555
    10. '(list' → logprob: -11.224653244018555

Token 87: 'arm' (ID: 2218)
  Prédit: '(map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.18212206661701202
    2. 'ap' → logprob: -2.807121992111206
    3. 'arp' → logprob: -3.182121992111206
    4. 'map' → logprob: -3.807121992111206
    5. '(ap' → logprob: -4.057122230529785
    6. 'ar' → logprob: -4.557122230529785
    7. '(' → logprob: -5.182122230529785
    8. 'r' → logprob: -5.807122230529785
    9. 'rap' → logprob: -6.057122230529785
    10. 'arm' → logprob: -6.682122230529785

Token 88: 'ap' (ID: 403)
  Prédit: 'ap'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ap' → logprob: -2.2200749754119897e-06
    2. 'map' → logprob: -13.125001907348633
    3. ' ' → logprob: -17.250001907348633
    4. 'a' → logprob: -17.375001907348633
    5. 'p' → logprob: -17.375001907348633
    6. '(ap' → logprob: -17.375001907348633
    7. 'at' → logprob: -18.125001907348633
    8. 'ап' → logprob: -18.125001907348633
    9. '   ' → logprob: -18.125001907348633
    10. ' map' → logprob: -18.375001907348633

Token 89: '(lambda' (ID: 43341)
  Prédit: '(el'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(el' → logprob: -0.05204485356807709
    2. '(lambda' → logprob: -3.6770448684692383
    3. '(' → logprob: -3.8020448684692383
    4. '((' → logprob: -5.927044868469238
    5. '(
' → logprob: -8.302044868469238
    6. ' (' → logprob: -9.802044868469238
    7. ')' → logprob: -10.302044868469238
    8. 'el' → logprob: -10.427044868469238
    9. '(tuple' → logprob: -11.552044868469238
    10. '(e' → logprob: -12.177044868469238

Token 90: ' idx' (ID: 14016)
  Prédit: 'lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'lambda' → logprob: -0.705955445766449
    2. 'el' → logprob: -0.955955445766449
    3. ' lambda' → logprob: -3.7059555053710938
    4. '(lambda' → logprob: -4.080955505371094
    5. 'x' → logprob: -4.205955505371094
    6. ' elaborate' → logprob: -4.455955505371094
    7. 'add' → logprob: -4.830955505371094
    8. 'int' → logprob: -4.830955505371094
    9. ',' → logprob: -4.830955505371094
    10. ' elabor' → logprob: -5.205955505371094

Token 91: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0067926980555057526
    2. ' ,' → logprob: -5.2567925453186035
    3. ' lambda' → logprob: -7.2567925453186035
    4. ' A' → logprob: -8.631793022155762
    5. ' ' → logprob: -8.756793022155762
    6. 'lambda' → logprob: -8.756793022155762
    7. '=lambda' → logprob: -9.506793022155762
    8. ',A' → logprob: -10.131793022155762
    9. 'A' → logprob: -10.381793022155762
    10. '   ' → logprob: -10.569293022155762

Token 92: ' val' (ID: 1459)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.9522834420204163
    2. 'a' → logprob: -1.0772833824157715
    3. ' a' → logprob: -2.4522833824157715
    4. ' x' → logprob: -2.7022833824157715
    5. 'val' → logprob: -2.8272833824157715
    6. ' val' → logprob: -3.0772833824157715
    7. 'value' → logprob: -5.7022833824157715
    8. 'score' → logprob: -5.8272833824157715
    9. ' score' → logprob: -6.3272833824157715
    10. ' value' → logprob: -6.4522833824157715

Token 93: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.046979498118162155
    2. ' :' → logprob: -3.6719794273376465
    3. ',' → logprob: -3.9219794273376465
    4. ' ,' → logprob: -8.046979904174805
    5. '   ' → logprob: -9.296979904174805
    6. ',:' → logprob: -9.421979904174805
    7. '=' → logprob: -9.546979904174805
    8. '=lambda' → logprob: -10.921979904174805
    9. ' ' → logprob: -11.296979904174805
    10. 'lambda' → logprob: -12.171979904174805

Token 94: ' elaborate' (ID: 65742)
  Prédit: 'el'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'el' → logprob: -0.14115989208221436
    2. '1' → logprob: -3.141160011291504
    3. 'int' → logprob: -3.141160011291504
    4. ' elaborate' → logprob: -3.516160011291504
    5. ' int' → logprob: -5.141160011291504
    6. ' ' → logprob: -5.766160011291504
    7. '(el' → logprob: -6.516160011291504
    8. ' el' → logprob: -6.766160011291504
    9. '(' → logprob: -7.266160011291504
    10. '(int' → logprob: -7.266160011291504

Token 95: '(val' (ID: 17391)
  Prédit: '(idx'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(idx' → logprob: -0.5915408134460449
    2. '(val' → logprob: -1.341540813446045
    3. '(' → logprob: -2.591540813446045
    4. 'val' → logprob: -3.091540813446045
    5. ' (' → logprob: -3.841540813446045
    6. 'idx' → logprob: -4.591540813446045
    7. ' val' → logprob: -4.841540813446045
    8. '(lambda' → logprob: -5.466540813446045
    9. ',' → logprob: -5.591540813446045
    10. ')' → logprob: -5.716540813446045

Token 96: '),' (ID: 936)
  Prédit: '),'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '),' → logprob: -0.033244505524635315
    2. ' ),' → logprob: -4.033244609832764
    3. ')' → logprob: -4.658244609832764
    4. ',' → logprob: -6.658244609832764
    5. ' ' → logprob: -7.283244609832764
    6. ')))' → logprob: -7.533244609832764
    7. ')),' → logprob: -7.658244609832764
    8. ' -' → logprob: -7.908244609832764
    9. '+' → logprob: -8.158244132995605
    10. '-' → logprob: -8.158244132995605

Token 97: ' zip' (ID: 16216)
  Prédit: 'enumer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'enumer' → logprob: -0.6825293302536011
    2. ' enumerate' → logprob: -0.8075293302536011
    3. ' zip' → logprob: -3.5575294494628906
    4. 'zip' → logprob: -3.9325294494628906
    5. 'en' → logprob: -9.18252944946289
    6. ' ' → logprob: -9.18252944946289
    7. 'st' → logprob: -9.30752944946289
    8. '(en' → logprob: -9.43252944946289
    9. '(zip' → logprob: -9.68252944946289
    10. ')' → logprob: -10.05752944946289

Token 98: '(count' (ID: 25892)
  Prédit: '(count'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(count' → logprob: -0.5869383811950684
    2. '(range' → logprob: -0.8369383811950684
    3. '(' → logprob: -4.586938381195068
    4. '(A' → logprob: -7.461938381195068
    5. 'count' → logprob: -10.086938858032227
    6. '(
' → logprob: -10.086938858032227
    7. '((' → logprob: -10.336938858032227
    8. 'range' → logprob: -10.961938858032227
    9. ' (' → logprob: -11.961938858032227
    10. '(en' → logprob: -12.211938858032227

Token 99: '(),' (ID: 2547)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.002037964528426528
    2. '(),' → logprob: -6.37703800201416
    3. '(N' → logprob: -8.62703800201416
    4. '0' → logprob: -9.50203800201416
    5. '(start' → logprob: -10.12703800201416
    6. ',' → logprob: -11.62703800201416
    7. ' (' → logprob: -11.87703800201416
    8. '()(' → logprob: -12.25203800201416
    9. '()' → logprob: -12.37703800201416
    10. '(len' → logprob: -12.50203800201416

Token 100: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.016042228788137436
    2. ' A' → logprob: -4.141042232513428
    3. ' ' → logprob: -12.64104175567627
    4. '   ' → logprob: -13.01604175567627
    5. '  ' → logprob: -14.14104175567627
    6. '	A' → logprob: -14.39104175567627
    7. ')' → logprob: -14.89104175567627
    8. '(A' → logprob: -16.516042709350586
    9. '```' → logprob: -16.641042709350586
    10. '    ' → logprob: -16.766042709350586

Token 101: ')))
' (ID: 12562)
  Prédit: ')))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.10032937675714493
    2. '))' → logprob: -2.3503293991088867
    3. ')' → logprob: -9.475329399108887
    4. '))))' → logprob: -10.725329399108887
    5. ')))
' → logprob: -11.225329399108887
    6. ')));' → logprob: -12.850329399108887
    7. ' ' → logprob: -12.975329399108887
    8. '))
' → logprob: -13.225329399108887
    9. ' ))' → logprob: -13.850329399108887
    10. ')))

' → logprob: -13.975329399108887

Token 102: 'print' (ID: 1598)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.10497856140136719
    2. 'print' → logprob: -3.479978561401367
    3. ')' → logprob: -4.104978561401367
    4. ' if' → logprob: -4.104978561401367
    5. '>=' → logprob: -4.604978561401367
    6. '<|end|>' → logprob: -4.979978561401367
    7. '>' → logprob: -5.229978561401367
    8. '
' → logprob: -5.604978561401367
    9. 'cnt' → logprob: -5.979978561401367
    10. ' ' → logprob: -6.479978561401367

Token 103: '((' (ID: 2054)
  Prédit: '(cnt'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(cnt' → logprob: -0.38697710633277893
    2. '(' → logprob: -1.1369770765304565
    3. ' (' → logprob: -10.636977195739746
    4. '(len' → logprob: -11.011977195739746
    5. '(
' → logprob: -11.261977195739746
    6. '(sum' → logprob: -11.636977195739746
    7. '('' → logprob: -11.761977195739746
    8. '((' → logprob: -12.136977195739746
    9. '(count' → logprob: -12.136977195739746
    10. '()' → logprob: -12.261977195739746

Token 104: 'lambda' (ID: 35280)
  Prédit: 'cnt'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'cnt' → logprob: -0.1336839348077774
    2. '"' → logprob: -2.383683919906616
    3. ''' → logprob: -4.633684158325195
    4. ' cnt' → logprob: -5.508684158325195
    5. '"M' → logprob: -5.633684158325195
    6. '(cnt' → logprob: -5.758684158325195
    7. 'N' → logprob: -6.008684158325195
    8. '"N' → logprob: -6.383684158325195
    9. ' "' → logprob: -6.508684158325195
    10. '1' → logprob: -6.633684158325195

Token 105: ' x' (ID: 1215)
  Prédit: ' cnt'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' cnt' → logprob: -0.43228715658187866
    2. 'cnt' → logprob: -1.5572872161865234
    3. ' M' → logprob: -2.9322872161865234
    4. ' lambda' → logprob: -3.6822872161865234
    5. 'lambda' → logprob: -4.057287216186523
    6. 'M' → logprob: -4.307287216186523
    7. ' N' → logprob: -4.432287216186523
    8. 'N' → logprob: -5.432287216186523
    9. '(cnt' → logprob: -5.432287216186523
    10. ' ' → logprob: -5.932287216186523

Token 106: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.021836455911397934
    2. ' :' → logprob: -3.896836519241333
    3. ':x' → logprob: -7.521836280822754
    4. ',' → logprob: -7.646836280822754
    5. 'x' → logprob: -9.771836280822754
    6. ' x' → logprob: -9.896836280822754
    7. ':n' → logprob: -10.646836280822754
    8. ':
' → logprob: -10.646836280822754
    9. '=' → logprob: -11.021836280822754
    10. ':M' → logprob: -11.146836280822754

Token 107: ' ["' (ID: 9129)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -1.5633825063705444
    2. '"' → logprob: -1.8133825063705444
    3. 'M' → logprob: -1.9383825063705444
    4. '"M' → logprob: -2.063382625579834
    5. ' x' → logprob: -2.313382625579834
    6. ''M' → logprob: -2.563382625579834
    7. ' M' → logprob: -2.688382625579834
    8. ''' → logprob: -3.563382625579834
    9. ' "' → logprob: -3.938382625579834
    10. 'N' → logprob: -3.938382625579834

Token 108: 'No' (ID: 3160)
  Prédit: 'Yes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.6291853785514832
    2. 'No' → logprob: -1.379185438156128
    3. '"' → logprob: -2.754185438156128
    4. 'M' → logprob: -3.254185438156128
    5. 'NO' → logprob: -3.379185438156128
    6. 'YES' → logprob: -4.129185199737549
    7. '"No' → logprob: -4.254185199737549
    8. 'Fail' → logprob: -4.879185199737549
    9. 'NG' → logprob: -5.629185199737549
    10. 'AC' → logprob: -6.004185199737549

Token 109: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.023304175585508347
    2. '","' → logprob: -3.7733042240142822
    3. '"' → logprob: -10.023303985595703
    4. ' ",' → logprob: -11.523303985595703
    5. '(",' → logprob: -13.148303985595703
    6. 'Yes' → logprob: -14.273303985595703
    7. '()",' → logprob: -15.148303985595703
    8. 'If' → logprob: -15.273303985595703
    9. 'No' → logprob: -15.273303985595703
    10. ' ","' → logprob: -15.773303985595703

Token 110: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.05503980442881584
    2. ' "' → logprob: -2.930039882659912
    3. '"No' → logprob: -8.930039405822754
    4. ''' → logprob: -11.305039405822754
    5. ' ' → logprob: -13.055039405822754
    6. ' ' → logprob: -13.430039405822754
    7. '"You' → logprob: -13.555039405822754
    8. '
' → logprob: -13.930039405822754
    9. '	' → logprob: -14.055039405822754
    10. '"\' → logprob: -14.430039405822754

Token 111: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.00891247857362032
    2. ' Yes' → logprob: -4.758912563323975
    3. '"' → logprob: -8.133912086486816
    4. ' "' → logprob: -12.758912086486816
    5. '",' → logprob: -14.508912086486816
    6. '","' → logprob: -15.633912086486816
    7. ' ' → logprob: -15.633912086486816
    8. 'Ok' → logprob: -15.758912086486816
    9. 'Sure' → logprob: -15.758912086486816
    10. 'No' → logprob: -16.008913040161133

Token 112: '"][' (ID: 40438)
  Prédit: '"]['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"][' → logprob: -0.00023011912708170712
    2. '"]' → logprob: -8.875229835510254
    3. '")[' → logprob: -10.000229835510254
    4. '"](' → logprob: -10.375229835510254
    5. '"]["' → logprob: -12.125229835510254
    6. '"[' → logprob: -12.250229835510254
    7. '][' → logprob: -13.500229835510254
    8. '"' → logprob: -14.125229835510254
    9. ''][' → logprob: -14.875229835510254
    10. ' ")[' → logprob: -15.000229835510254

Token 113: 'x' (ID: 87)
  Prédit: 'x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.07958998531103134
    2. ' x' → logprob: -2.704590082168579
    3. 'int' → logprob: -5.07958984375
    4. ' int' → logprob: -5.95458984375
    5. 'cnt' → logprob: -7.82958984375
    6. '(x' → logprob: -8.95458984375
    7. '1' → logprob: -9.07958984375
    8. ' cnt' → logprob: -9.82958984375
    9. ' ' → logprob: -10.45458984375
    10. ' (' → logprob: -10.82958984375

Token 114: '])(' (ID: 164063)
  Prédit: ' >='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' >=' → logprob: -0.42878270149230957
    2. '>=' → logprob: -1.0537827014923096
    3. ' ' → logprob: -9.80378246307373
    4. '>' → logprob: -11.17878246307373
    5. ' >' → logprob: -11.80378246307373
    6. ']>=' → logprob: -12.55378246307373
    7. ')>=' → logprob: -15.55378246307373
    8. '≥' → logprob: -15.55378246307373
    9. '   ' → logprob: -15.67878246307373
    10. 'x' → logprob: -15.80378246307373

Token 115: 'cnt' (ID: 33160)
  Prédit: 'cnt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cnt' → logprob: -0.032124102115631104
    2. ' cnt' → logprob: -3.6571240425109863
    3. '(cnt' → logprob: -5.157124042510986
    4. ' ' → logprob: -11.532124519348145
    5. ' (' → logprob: -11.782124519348145
    6. '(' → logprob: -12.157124519348145
    7. '   ' → logprob: -12.282124519348145
    8. '	cnt' → logprob: -12.657124519348145
    9. '[cnt' → logprob: -12.657124519348145
    10. 'M' → logprob: -13.157124519348145

Token 116: ' >=' (ID: 5064)
  Prédit: ' >='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >=' → logprob: -0.3869333863258362
    2. '>=' → logprob: -1.1369333267211914
    3. ' ' → logprob: -10.511933326721191
    4. ')' → logprob: -11.011933326721191
    5. ')>=' → logprob: -11.636933326721191
    6. '==' → logprob: -12.761933326721191
    7. ' ==' → logprob: -13.261933326721191
    8. '>' → logprob: -13.636933326721191
    9. '   ' → logprob: -14.136933326721191
    10. ' )' → logprob: -14.261933326721191

Token 117: ' M' (ID: 391)
  Prédit: 'M'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'M' → logprob: -0.048761092126369476
    2. ' M' → logprob: -3.0487611293792725
    3. 'N' → logprob: -9.173761367797852
    4. ' ' → logprob: -10.048761367797852
    5. '   ' → logprob: -12.173761367797852
    6. ')' → logprob: -12.548761367797852
    7. '  ' → logprob: -13.048761367797852
    8. ' N' → logprob: -13.048761367797852
    9. '4' → logprob: -13.173761367797852
    10. '3' → logprob: -13.173761367797852

Token 118: '))' (ID: 915)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4740912914276123
    2. '))' → logprob: -0.9740912914276123
    3. ')))' → logprob: -11.599091529846191
    4. ')
' → logprob: -12.849091529846191
    5. '))
' → logprob: -13.974091529846191
    6. ' )' → logprob: -14.349091529846191
    7. ' ))' → logprob: -15.724091529846191
    8. '])' → logprob: -15.974091529846191
    9. '})' → logprob: -16.099090576171875
    10. ')")' → logprob: -16.349090576171875


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 116
Tokens correctement prédits (1ère position, stricte): 42
Tokens correctement prédits (1ère position, avec adaptation): 42
Tokens correctement prédits (top 10): 82
Précision stricte (1ère position): 36.21%
Précision adaptée (1ère position): 36.21%
Précision (top 10): 70.69%
================================================================================
