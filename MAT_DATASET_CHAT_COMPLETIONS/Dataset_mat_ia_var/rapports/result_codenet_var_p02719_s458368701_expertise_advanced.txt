================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:19:17
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from sys import stdin

def main():
    n, k = map(int, stdin.readline().split())
    mod = n % k
    print(min(n, mod, k - mod))

if __name__ == "__main__":
    main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' stdin' (ID: 75143)
  Prédit: 'argv'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'argv' → logprob: -0.10406220704317093
    2. ' argv' → logprob: -2.72906231880188
    3. 'exit' → logprob: -4.354062080383301
    4. 'path' → logprob: -4.979062080383301
    5. 'stdout' → logprob: -5.104062080383301
    6. ' exit' → logprob: -5.729062080383301
    7. 'stdin' → logprob: -6.104062080383301
    8. ' path' → logprob: -7.354062080383301
    9. 'version' → logprob: -7.479062080383301
    10. 'import' → logprob: -7.729062080383301

Token 4: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0020769787952303886
    2. '.readline' → logprob: -6.627077102661133
    3. '.
' → logprob: -8.252077102661133
    4. '\n' → logprob: -8.627077102661133
    5. 'import' → logprob: -9.502077102661133
    6. '
' → logprob: -9.627077102661133
    7. '.read' → logprob: -9.752077102661133
    8. '```' → logprob: -10.127077102661133
    9. 'newline' → logprob: -11.377077102661133
    10. 'for' → logprob: -11.627077102661133

Token 5: 'def' (ID: 1314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.07668990641832352
    2. '.readline' → logprob: -2.7016899585723877
    3. '.read' → logprob: -6.076689720153809
    4. 'print' → logprob: -6.576689720153809
    5. '\n' → logprob: -6.951689720153809
    6. 'import' → logprob: -7.951689720153809
    7. ',' → logprob: -7.951689720153809
    8. 'for' → logprob: -8.076689720153809
    9. 'newline' → logprob: -8.576689720153809
    10. '.
' → logprob: -8.826689720153809

Token 6: ' main' (ID: 2758)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.15942637622356415
    2. ' read' → logprob: -2.15942645072937
    3. ' process' → logprob: -3.90942645072937
    4. ' parse' → logprob: -5.909426212310791
    5. ' main' → logprob: -6.409426212310791
    6. '_read' → logprob: -6.534426212310791
    7. ' space' → logprob: -6.534426212310791
    8. ' readline' → logprob: -6.534426212310791
    9. ' ' → logprob: -7.534426212310791
    10. 'read' → logprob: -7.659426212310791

Token 7: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.027679502964019775
    2. '():' → logprob: -4.152679443359375
    3. ':' → logprob: -4.902679443359375
    4. '(:' → logprob: -5.527679443359375
    5. ' (' → logprob: -10.527679443359375
    6. '(
' → logprob: -10.527679443359375
    7. '```' → logprob: -10.527679443359375
    8. '(":' → logprob: -10.777679443359375
    9. '):' → logprob: -11.277679443359375
    10. '(`' → logprob: -11.652679443359375

Token 8: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01045649778097868
    2. ':' → logprob: -5.635456562042236
    3. '(' → logprob: -6.385456562042236
    4. '(stdin' → logprob: -6.510456562042236
    5. 'print' → logprob: -6.760456562042236
    6. '    ' → logprob: -7.385456562042236
    7. ' ' → logprob: -8.010456085205078
    8. '\' → logprob: -8.135456085205078
    9. 'input' → logprob: -8.510456085205078
    10. '    
' → logprob: -8.635456085205078

Token 9: ' n' (ID: 297)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.7531194090843201
    2. '   ' → logprob: -1.3781194686889648
    3. 'pass' → logprob: -2.628119468688965
    4. 'n' (adapté à ' n') → logprob: -3.128119468688965
    5. 'data' → logprob: -3.378119468688965
    6. ' for' → logprob: -3.503119468688965
    7. 'user' → logprob: -3.753119468688965
    8. 'input' → logprob: -4.253119468688965
    9. 'print' → logprob: -4.753119468688965
    10. ' line' → logprob: -5.128119468688965

Token 10: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.27085772156715393
    2. '=' → logprob: -1.5208576917648315
    3. ' ' → logprob: -4.770857810974121
    4. ')' → logprob: -6.145857810974121
    5. '_' → logprob: -6.270857810974121
    6. '  ' → logprob: -6.270857810974121
    7. 'u' → logprob: -6.645857810974121
    8. '.' → logprob: -7.270857810974121
    9. ',' → logprob: -7.395857810974121
    10. '   ' → logprob: -7.520857810974121

Token 11: ' k' (ID: 372)
  Prédit: ' m'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' m' → logprob: -0.06214996054768562
    2. 'm' → logprob: -3.687150001525879
    3. ' k' → logprob: -4.062150001525879
    4. ' ' → logprob: -4.437150001525879
    5. '=' → logprob: -6.312150001525879
    6. ' =' → logprob: -6.687150001525879
    7. ' t' → logprob: -7.062150001525879
    8. ' x' → logprob: -7.812150001525879
    9. ' s' → logprob: -8.312150001525879
    10. ' input' → logprob: -8.312150001525879

Token 12: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.004622018430382013
    2. '=' → logprob: -5.379621982574463
    3. ' ' → logprob: -13.879622459411621
    4. ',' → logprob: -14.129622459411621
    5. ' =
' → logprob: -16.629621505737305
    6. ' =",' → logprob: -17.004621505737305
    7. '  ' → logprob: -17.379621505737305
    8. ' =
' → logprob: -17.504621505737305
    9. '    ' → logprob: -17.629621505737305
    10. ')' → logprob: -18.004621505737305

Token 13: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.020561041310429573
    2. 'map' → logprob: -3.8955609798431396
    3. ' ' → logprob: -12.395561218261719
    4. ' list' → logprob: -12.395561218261719
    5. '[' → logprob: -12.770561218261719
    6. ' [' → logprob: -13.145561218261719
    7. ' stdin' → logprob: -13.270561218261719
    8. '   ' → logprob: -13.895561218261719
    9. '	map' → logprob: -14.145561218261719
    10. '(map' → logprob: -14.145561218261719

Token 14: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3058967888355255
    2. '(int' → logprob: -1.6808967590332031
    3. '(str' → logprob: -2.930896759033203
    4. '(lambda' → logprob: -3.930896759033203
    5. '(stdin' → logprob: -6.055896759033203
    6. '<|end|>' → logprob: -7.180896759033203
    7. '(input' → logprob: -8.430896759033203
    8. '()' → logprob: -8.680896759033203
    9. '(
' → logprob: -9.180896759033203
    10. '(eval' → logprob: -10.055896759033203

Token 15: ',' (ID: 11)
  Prédit: '(stdin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(stdin' → logprob: -0.017923396080732346
    2. ',' → logprob: -4.642923355102539
    3. ')' → logprob: -5.517923355102539
    4. '(' → logprob: -5.767923355102539
    5. '(input' → logprob: -7.017923355102539
    6. '(st' → logprob: -10.517923355102539
    7. 'stdin' → logprob: -10.892923355102539
    8. ')(' → logprob: -11.267923355102539
    9. '),' → logprob: -12.142923355102539
    10. ',input' → logprob: -12.392923355102539

Token 16: ' stdin' (ID: 75143)
  Prédit: ' stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stdin' → logprob: -0.38807645440101624
    2. 'stdin' → logprob: -1.1380764245986938
    3. '(stdin' → logprob: -6.763076305389404
    4. ')' → logprob: -10.638076782226562
    5. '.stdin' → logprob: -10.888076782226562
    6. 'input' → logprob: -12.388076782226562
    7. ' input' → logprob: -14.013076782226562
    8. ' )' → logprob: -14.513076782226562
    9. ' readline' → logprob: -14.513076782226562
    10. ' ' → logprob: -16.388076782226562

Token 17: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.00016182278341148049
    2. '.read' → logprob: -9.000162124633789
    3. '.' → logprob: -10.375162124633789
    4. '().' → logprob: -12.250162124633789
    5. ').' → logprob: -13.500162124633789
    6. '.readlines' → logprob: -14.500162124633789
    7. ' .' → logprob: -14.500162124633789
    8. ')' → logprob: -17.50016212463379
    9. '.next' → logprob: -18.37516212463379
    10. ' readline' → logprob: -18.37516212463379

Token 18: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.07387036830186844
    2. '().' → logprob: -3.0738704204559326
    3. '()' → logprob: -3.6988704204559326
    4. ')' → logprob: -9.323870658874512
    5. '()))' → logprob: -9.448870658874512
    6. ' ())' → logprob: -11.073870658874512
    7. '()[' → logprob: -11.448870658874512
    8. '());' → logprob: -12.823870658874512
    9. '()]' → logprob: -13.073870658874512
    10. '(' → logprob: -13.198870658874512

Token 19: 'split' (ID: 13627)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.0819319412112236
    2. 'split' → logprob: -2.5819318294525146
    3. 'rstrip' → logprob: -5.831932067871094
    4. 'read' → logprob: -9.331932067871094
    5. ')' → logprob: -11.581932067871094
    6. ' strip' → logprob: -12.331932067871094
    7. '```' → logprob: -13.331932067871094
    8. ' split' → logprob: -14.831932067871094
    9. 'replace' → logprob: -15.081932067871094
    10. 'decode' → logprob: -15.706932067871094

Token 20: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.04119551554322243
    2. '))' → logprob: -3.6661956310272217
    3. '())' → logprob: -4.291195392608643
    4. '()' → logprob: -6.916195392608643
    5. '()))' → logprob: -9.2911958694458
    6. ')))' → logprob: -12.4161958694458
    7. ')
' → logprob: -13.2911958694458
    8. '),' → logprob: -13.6661958694458
    9. '(' → logprob: -13.6661958694458
    10. '`)' → logprob: -14.1661958694458

Token 21: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3090325593948364
    2. ')' → logprob: -2.559032440185547
    3. '    
' → logprob: -2.809032440185547
    4. '
' → logprob: -3.059032440185547
    5. '\n' → logprob: -3.809032440185547
    6. ' 
' → logprob: -4.309032440185547
    7. '\' → logprob: -4.684032440185547
    8. ' ' → logprob: -4.809032440185547
    9. ',' → logprob: -5.059032440185547
    10. '   
' → logprob: -5.309032440185547

Token 22: ' mod' (ID: 1812)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -1.2529525756835938
    2. ' ' → logprob: -2.1279525756835938
    3. '   ' → logprob: -2.2529525756835938
    4. 'r' → logprob: -2.6279525756835938
    5. 'd' → logprob: -2.6279525756835938
    6. 'for' → logprob: -2.8779525756835938
    7. ' 
' → logprob: -3.0029525756835938
    8. ' for' → logprob: -3.6279525756835938
    9. 'data' → logprob: -3.7529525756835938
    10. ' a' → logprob: -3.7529525756835938

Token 23: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.253035306930542
    2. '=' → logprob: -1.503035306930542
    3. ' ' → logprob: -7.628035545349121
    4. '_' → logprob: -7.878035545349121
    5. ')' → logprob: -9.753035545349121
    6. ',' → logprob: -10.003035545349121
    7. '  ' → logprob: -10.003035545349121
    8. '   ' → logprob: -11.128035545349121
    9. ' =)' → logprob: -11.503035545349121
    10. '<|end|>' → logprob: -11.628035545349121

Token 24: ' n' (ID: 297)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.11289940029382706
    2. '10' → logprob: -2.2378993034362793
    3. '100' → logprob: -9.612899780273438
    4. '1' → logprob: -11.987899780273438
    5. ' ' → logprob: -13.237899780273438
    6. ' int' → logprob: -13.862899780273438
    7. 'int' → logprob: -14.487899780273438
    8. '998' → logprob: -15.237899780273438
    9. '0' → logprob: -16.112899780273438
    10. '109' → logprob: -16.362899780273438

Token 25: ' %' (ID: 1851)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '%' → logprob: -0.5282349586486816
    2. ' %' → logprob: -1.2782349586486816
    3. '+' → logprob: -2.9032349586486816
    4. '**' → logprob: -3.0282349586486816
    5. ' **' → logprob: -4.028234958648682
    6. ' +' → logprob: -5.153234958648682
    7. ')' → logprob: -5.778234958648682
    8. '-' → logprob: -8.278234481811523
    9. '```' → logprob: -8.403234481811523
    10. ' %
' → logprob: -8.778234481811523

Token 26: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.038192275911569595
    2. ' k' → logprob: -3.2881922721862793
    3. ' ' → logprob: -9.413192749023438
    4. '(k' → logprob: -10.413192749023438
    5. '100' → logprob: -11.163192749023438
    6. '10' → logprob: -11.288192749023438
    7. '26' → logprob: -13.163192749023438
    8. '	k' → logprob: -13.538192749023438
    9. '2' → logprob: -13.788192749023438
    10. '20' → logprob: -14.038192749023438

Token 27: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.9895341396331787
    2. '\n' → logprob: -1.2395341396331787
    3. '<|end|>' → logprob: -2.8645341396331787
    4. ')' → logprob: -2.8645341396331787
    5. '=' → logprob: -3.3645341396331787
    6. '   ' → logprob: -3.4895341396331787
    7. ',' → logprob: -3.6145341396331787
    8. '```' → logprob: -3.8645341396331787
    9. '\' → logprob: -3.9895341396331787
    10. ' ' → logprob: -4.239534378051758

Token 28: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.45362743735313416
    2. '\n' → logprob: -1.9536274671554565
    3. '
' → logprob: -2.203627347946167
    4. '    
' → logprob: -3.578627347946167
    5. '<|end|>' → logprob: -3.828627347946167
    6. ' 
' → logprob: -4.578627586364746
    7. '```' → logprob: -4.578627586364746
    8. ')' → logprob: -4.578627586364746
    9. '+' → logprob: -4.703627586364746
    10. '\' → logprob: -5.453627586364746

Token 29: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.3886529207229614
    2. ' ' → logprob: -1.6386529207229614
    3. '\n' → logprob: -1.8886529207229614
    4. ' 
' → logprob: -2.388652801513672
    5. '\' → logprob: -2.888652801513672
    6. '=' → logprob: -2.888652801513672
    7. ',' → logprob: -3.138652801513672
    8. ' if' → logprob: -3.513652801513672
    9. '
' → logprob: -4.138652801513672
    10. '+' → logprob: -4.138652801513672

Token 30: '(min' (ID: 26035)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.12856988608837128
    2. '(mod' → logprob: -2.1285698413848877
    3. '((' → logprob: -7.628570079803467
    4. '(f' → logprob: -7.878570079803467
    5. '()' → logprob: -8.253569602966309
    6. '(k' → logprob: -9.003569602966309
    7. '(n' → logprob: -9.378569602966309
    8. '(abs' → logprob: -9.503569602966309
    9. '('' → logprob: -10.003569602966309
    10. '(
' → logprob: -10.253569602966309

Token 31: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2820862829685211
    2. '(mod' → logprob: -1.4070862531661987
    3. '(k' → logprob: -7.782086372375488
    4. ' (' → logprob: -8.407086372375488
    5. '(n' → logprob: -8.657086372375488
    6. '(m' → logprob: -10.657086372375488
    7. ')' → logprob: -10.907086372375488
    8. '(s' → logprob: -11.282086372375488
    9. '((' → logprob: -11.407086372375488
    10. '()' → logprob: -11.782086372375488

Token 32: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.04255625978112221
    2. ' ,' → logprob: -4.042556285858154
    3. ' mod' → logprob: -4.667556285858154
    4. ' %' → logprob: -4.917556285858154
    5. '%' → logprob: -5.167556285858154
    6. 'mod' → logprob: -6.667556285858154
    7. ')' → logprob: -8.792555809020996
    8. '_mod' → logprob: -9.417555809020996
    9. ' ' → logprob: -9.542555809020996
    10. ' -' → logprob: -10.792555809020996

Token 33: ' mod' (ID: 1812)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.32071414589881897
    2. 'k' → logprob: -1.8207141160964966
    3. ' mod' → logprob: -2.320714235305786
    4. 'mod' → logprob: -4.320713996887207
    5. ' ' → logprob: -7.695713996887207
    6. ' abs' → logprob: -8.570713996887207
    7. ' n' → logprob: -8.695713996887207
    8. 'abs' → logprob: -9.820713996887207
    9. ')' → logprob: -11.070713996887207
    10. 'n' → logprob: -11.195713996887207

Token 34: ',' (ID: 11)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0036858171224594116
    2. ')' → logprob: -5.75368595123291
    3. ' ))' → logprob: -8.62868595123291
    4. ')))' → logprob: -8.75368595123291
    5. ',' → logprob: -8.87868595123291
    6. '+' → logprob: -11.37868595123291
    7. '))
' → logprob: -12.25368595123291
    8. ' ' → logprob: -13.00368595123291
    9. ' )' → logprob: -13.12868595123291
    10. '//' → logprob: -13.50368595123291

Token 35: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.01297410111874342
    2. 'k' → logprob: -4.387974262237549
    3. ' ' → logprob: -8.01297378540039
    4. '(k' → logprob: -10.13797378540039
    5. ' (' → logprob: -10.63797378540039
    6. '	k' → logprob: -11.01297378540039
    7. ',k' → logprob: -11.88797378540039
    8. ' n' → logprob: -12.01297378540039
    9. ' abs' → logprob: -12.01297378540039
    10. ')' → logprob: -12.26297378540039

Token 36: ' -' (ID: 533)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0017571680946275592
    2. ')' → logprob: -6.5017571449279785
    3. ')))' → logprob: -8.876757621765137
    4. ' ))' → logprob: -9.626757621765137
    5. '))
' → logprob: -10.501757621765137
    6. '-' → logprob: -11.876757621765137
    7. ' -' → logprob: -12.501757621765137
    8. ',' → logprob: -12.751757621765137
    9. '**' → logprob: -13.626757621765137
    10. '+' → logprob: -13.626757621765137

Token 37: ' mod' (ID: 1812)
  Prédit: 'mod'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'mod' → logprob: -0.4786392152309418
    2. ' mod' → logprob: -0.9786392450332642
    3. '1' → logprob: -5.478639125823975
    4. ' ' → logprob: -7.978639125823975
    5. '	mod' → logprob: -10.978639602661133
    6. '_mod' → logprob: -11.228639602661133
    7. '(mod' → logprob: -13.603639602661133
    8. '  ' → logprob: -14.353639602661133
    9. '.mod' → logprob: -14.728639602661133
    10. ')' → logprob: -14.978639602661133

Token 38: '))

' (ID: 9746)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0036191970575600863
    2. ')' → logprob: -5.628619194030762
    3. ')))' → logprob: -11.503619194030762
    4. ' ))' → logprob: -11.878619194030762
    5. '))
' → logprob: -13.378619194030762
    6. '),' → logprob: -15.878619194030762
    7. ' )' → logprob: -16.003620147705078
    8. '()))' → logprob: -16.378620147705078
    9. ' ' → logprob: -16.753620147705078
    10. '))

' → logprob: -17.253620147705078

Token 39: 'if' (ID: 366)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.007294843439012766
    2. '
' → logprob: -5.632294654846191
    3. '<|end|>' → logprob: -5.757294654846191
    4. ' ' → logprob: -8.757294654846191
    5. ' )' → logprob: -9.382294654846191
    6. '\n' → logprob: -10.007294654846191
    7. '#' → logprob: -10.257294654846191
    8. ' 
' → logprob: -10.507294654846191
    9. '  
' → logprob: -10.507294654846191
    10. '```' → logprob: -10.507294654846191

Token 40: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.014183484017848969
    2. '__' → logprob: -4.264183521270752
    3. '_' → logprob: -10.889183044433594
    4. ' ' → logprob: -14.639183044433594
    5. ' ___' → logprob: -15.389183044433594
    6. ' ' → logprob: -15.389183044433594
    7. ' _' → logprob: -15.639183044433594
    8. '_name' → logprob: -15.764183044433594
    9. '___' → logprob: -16.264183044433594
    10. 'name' → logprob: -16.639183044433594

Token 41: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.011370349675416946
    2. ' ==' → logprob: -4.8863701820373535
    3. '==' → logprob: -6.0113701820373535
    4. ' __' → logprob: -7.1363701820373535
    5. '_' → logprob: -7.6363701820373535
    6. '___' → logprob: -11.636370658874512
    7. '=' → logprob: -12.761370658874512
    8. '__.__' → logprob: -12.761370658874512
    9. '=="' → logprob: -13.011370658874512
    10. ' _' → logprob: -13.636370658874512

Token 42: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -5.319370302458992e-06
    2. '__.__' → logprob: -13.000005722045898
    3. '_' → logprob: -13.375005722045898
    4. '___' → logprob: -14.125005722045898
    5. '____' → logprob: -15.000005722045898
    6. '__
' → logprob: -16.6250057220459
    7. '__.' → logprob: -16.8750057220459
    8. ' __' → logprob: -17.0000057220459
    9. '__('' → logprob: -17.1250057220459
    10. '__

' → logprob: -17.2500057220459

Token 43: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.10168267041444778
    2. '__' → logprob: -2.726682662963867
    3. '==' → logprob: -3.476682662963867
    4. '=="' → logprob: -8.851682662963867
    5. '=' → logprob: -9.601682662963867
    6. ' =' → logprob: -10.101682662963867
    7. '.' → logprob: -10.476682662963867
    8. '"' → logprob: -10.976682662963867
    9. '_' → logprob: -11.601682662963867
    10. ' =="' → logprob: -11.726682662963867

Token 44: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.16023986041545868
    2. ''' → logprob: -1.910239815711975
    3. ' "__' → logprob: -12.160240173339844
    4. ' "' → logprob: -12.285240173339844
    5. '__' → logprob: -12.285240173339844
    6. ' '__' → logprob: -14.785240173339844
    7. ' '' → logprob: -15.035240173339844
    8. '"user' → logprob: -16.285240173339844
    9. '`' → logprob: -16.535240173339844
    10. ' ' → logprob: -16.660240173339844

Token 45: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.00018232580623589456
    2. 'name' → logprob: -8.625182151794434
    3. ' main' → logprob: -13.500182151794434
    4. 'm' → logprob: -14.500182151794434
    5. 'ma' → logprob: -15.500182151794434
    6. 'built' → logprob: -15.750182151794434
    7. 'mp' → logprob: -15.875182151794434
    8. 'g' → logprob: -16.25018310546875
    9. '_main' → logprob: -16.75018310546875
    10. 'py' → logprob: -17.12518310546875

Token 46: '__":
' (ID: 49892)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.023294275626540184
    2. '__":
' → logprob: -3.77329421043396
    3. '__.' → logprob: -10.398294448852539
    4. '__:' → logprob: -11.273294448852539
    5. '__["' → logprob: -12.648294448852539
    6. '__.__' → logprob: -14.398294448852539
    7. '__",' → logprob: -14.398294448852539
    8. '__':
' → logprob: -14.773294448852539
    9. '.' → logprob: -15.148294448852539
    10. '"' → logprob: -15.523294448852539

Token 47: '   ' (ID: 271)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.005399053916335106
    2. '   ' → logprob: -5.630399227142334
    3. '	main' → logprob: -7.005399227142334
    4. 'main' → logprob: -7.130399227142334
    5. ' ' → logprob: -10.630398750305176
    6. '    
' → logprob: -10.880398750305176
    7. ' 
' → logprob: -11.005398750305176
    8. '_main' → logprob: -11.505398750305176
    9. '<|end|>' → logprob: -12.755398750305176
    10. '    ' → logprob: -13.005398750305176

Token 48: ' main' (ID: 2758)
  Prédit: ' main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.008617766201496124
    2. 'main' (adapté à ' main') → logprob: -4.758617877960205
    3. '	main' → logprob: -12.758617401123047
    4. ' ma' → logprob: -16.008617401123047
    5. '(main' → logprob: -16.758617401123047
    6. '   ' → logprob: -17.008617401123047
    7. ' ' → logprob: -17.008617401123047
    8. ' mains' → logprob: -17.758617401123047
    9. ' m' → logprob: -18.383617401123047
    10. '_main' → logprob: -19.133617401123047

Token 49: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -6.64708495605737e-05
    2. '(' → logprob: -10.750066757202148
    3. '`()' → logprob: -10.750066757202148
    4. ']()' → logprob: -11.250066757202148
    5. '()`' → logprob: -12.875066757202148
    6. '()
' → logprob: -12.875066757202148
    7. ' ()' → logprob: -13.375066757202148
    8. ')' → logprob: -14.500066757202148
    9. '```' → logprob: -14.500066757202148
    10. '>()' → logprob: -14.625066757202148


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 47
Tokens correctement prédits (1ère position, stricte): 17
Tokens correctement prédits (1ère position, avec adaptation): 17
Tokens correctement prédits (top 10): 36
Précision stricte (1ère position): 36.17%
Précision adaptée (1ère position): 36.17%
Précision (top 10): 76.60%
================================================================================
