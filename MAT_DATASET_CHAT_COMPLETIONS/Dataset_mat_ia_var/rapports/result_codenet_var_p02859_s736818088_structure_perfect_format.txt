================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:38:14
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
r = int(input())
print(r ** 2)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'r' (ID: 81)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004195455927401781
    2. 'r' → logprob: -6.254195690155029
    3. '(r' → logprob: -6.254195690155029
    4. '```' → logprob: -8.629195213317871
    5. ''' → logprob: -9.879195213317871
    6. '('' → logprob: -10.254195213317871
    7. '`' → logprob: -11.379195213317871
    8. '("("' → logprob: -11.629195213317871
    9. '(
' → logprob: -12.129195213317871
    10. '()' → logprob: -12.129195213317871

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.06202247366309166
    2. ')' → logprob: -2.9370224475860596
    3. '()' → logprob: -6.062022686004639
    4. '(
' → logprob: -7.312022686004639
    5. ''' → logprob: -7.437022686004639
    6. 'r' → logprob: -7.437022686004639
    7. '```' → logprob: -7.437022686004639
    8. '`' → logprob: -7.687022686004639
    9. '(r' → logprob: -8.06202220916748
    10. '('' → logprob: -8.31202220916748

Token 5: 'print' (ID: 1598)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.820533812046051
    2. '+' → logprob: -1.4455337524414062
    3. '%' → logprob: -2.0705337524414062
    4. '*' → logprob: -3.1955337524414062
    5. 's' → logprob: -3.3205337524414062
    6. '\n' → logprob: -3.8205337524414062
    7. 'for' → logprob: -3.9455337524414062
    8. 'i' → logprob: -4.695533752441406
    9. '`' → logprob: -4.695533752441406
    10. ''' → logprob: -4.820533752441406

Token 6: '(r' (ID: 4729)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.005143985152244568
    2. '('' → logprob: -5.380144119262695
    3. '("("' → logprob: -7.755144119262695
    4. '(r' → logprob: -9.380144119262695
    5. '()' → logprob: -12.755144119262695
    6. '(f' → logprob: -12.880144119262695
    7. '("""' → logprob: -13.505144119262695
    8. '("")' → logprob: -14.255144119262695
    9. '(
' → logprob: -14.505144119262695
    10. '((' → logprob: -14.505144119262695

Token 7: ' **' (ID: 6240)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.000283265660982579
    2. '))' → logprob: -8.375283241271973
    3. '`)' → logprob: -10.250283241271973
    4. '')' → logprob: -11.875283241271973
    5. ' )' → logprob: -13.125283241271973
    6. '[' → logprob: -13.125283241271973
    7. '")' → logprob: -13.250283241271973
    8. ')`' → logprob: -14.000283241271973
    9. '*' → logprob: -14.375283241271973
    10. ')))' → logprob: -14.625283241271973

Token 8: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.1467406153678894
    2. ' ' → logprob: -2.021740674972534
    3. '3' → logprob: -5.521740436553955
    4. '0' → logprob: -9.896740913391113
    5. ')' → logprob: -12.646740913391113
    6. ' r' → logprob: -13.771740913391113
    7. '1' → logprob: -13.896740913391113
    8. 'r' → logprob: -13.896740913391113
    9. ' )' → logprob: -14.146740913391113
    10. '(' → logprob: -15.146740913391113

Token 9: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.018256472423672676
    2. '3' → logprob: -4.018256664276123
    3. ' ' → logprob: -9.518256187438965
    4. '0' → logprob: -10.643256187438965
    5. 'r' → logprob: -12.143256187438965
    6. '1' → logprob: -13.768256187438965
    7. ')' → logprob: -14.143256187438965
    8. '5' → logprob: -14.268256187438965
    9. '4' → logprob: -14.518256187438965
    10. '(' → logprob: -15.018256187438965

Token 10: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -9.13388703338569e-06
    2. '))' → logprob: -12.250009536743164
    3. '`)' → logprob: -12.625009536743164
    4. ')`' → logprob: -14.625009536743164
    5. ' )' → logprob: -14.750009536743164
    6. '')' → logprob: -16.500009536743164
    7. ')
' → logprob: -16.875009536743164
    8. ')**' → logprob: -17.500009536743164
    9. '```' → logprob: -18.000009536743164
    10. '）' → logprob: -18.125009536743164


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 8
Tokens correctement prédits (1ère position, stricte): 2
Tokens correctement prédits (1ère position, avec adaptation): 2
Tokens correctement prédits (top 10): 4
Précision stricte (1ère position): 25.00%
Précision adaptée (1ère position): 25.00%
Précision (top 10): 50.00%
================================================================================
