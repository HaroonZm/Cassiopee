================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:47:56
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
vals = list(map(int, input().split()))
vals.sort()
somme = 0   # Je ne me sers pas de cette variable mais bon...
j = 0   # Pareil, lol
# Je vais faire la boucle sur un range un peu différent, mais ça doit aller...
for i in range(n - 1):
    vals[i + 1] = (vals[i] + vals[i + 1]) / 2
# Je suppose qu'on affiche juste le dernier élément ?
print(vals[-1])
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00038134094211272895
    2. '(n' → logprob: -9.000381469726562
    3. ''' → logprob: -9.500381469726562
    4. '('' → logprob: -10.125381469726562
    5. '```' → logprob: -10.125381469726562
    6. '`' → logprob: -10.750381469726562
    7. '("("' → logprob: -10.750381469726562
    8. '()' → logprob: -11.250381469726562
    9. 'n' → logprob: -11.625381469726562
    10. ')' → logprob: -12.000381469726562

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03871168941259384
    2. ')' → logprob: -3.5387117862701416
    3. '()' → logprob: -4.9137115478515625
    4. '())' → logprob: -7.1637115478515625
    5. '(
' → logprob: -8.663711547851562
    6. '```' → logprob: -9.163711547851562
    7. '(()' → logprob: -9.413711547851562
    8. '("("' → logprob: -9.663711547851562
    9. '('' → logprob: -9.913711547851562
    10. '`' → logprob: -10.163711547851562

Token 5: 'vals' (ID: 44567)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -1.0521364212036133
    2. 'for' → logprob: -1.3021364212036133
    3. 'if' → logprob: -1.4271364212036133
    4. 's' → logprob: -3.1771364212036133
    5. 'f' → logprob: -4.177136421203613
    6. 'x' → logprob: -4.177136421203613
    7. 'a' → logprob: -4.552136421203613
    8. ')' → logprob: -4.677136421203613
    9. ' ' → logprob: -4.677136421203613
    10. '*' → logprob: -4.927136421203613

Token 6: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0013117826310917735
    2. ')' → logprob: -7.251311779022217
    3. '\[' → logprob: -8.626312255859375
    4. '[n' → logprob: -9.001312255859375
    5. '[]' → logprob: -9.251312255859375
    6. '[:]' → logprob: -9.751312255859375
    7. '.' → logprob: -10.126312255859375
    8. '(' → logprob: -10.501312255859375
    9. '[val' → logprob: -10.876312255859375
    10. '_vals' → logprob: -12.001312255859375

Token 7: ' list' (ID: 1562)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.1025744155049324
    2. '[]' → logprob: -2.477574348449707
    3. ' list' → logprob: -5.602574348449707
    4. 'list' → logprob: -5.602574348449707
    5. ' [' → logprob: -5.727574348449707
    6. '[' → logprob: -6.227574348449707
    7. '[input' → logprob: -7.852574348449707
    8. ' ' → logprob: -8.227574348449707
    9. 'input' → logprob: -8.852574348449707
    10. ' input' → logprob: -9.977574348449707

Token 8: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0002518031978979707
    2. '(range' → logprob: -8.625251770019531
    3. '(values' → logprob: -10.250251770019531
    4. '(vals' → logprob: -12.375251770019531
    5. '(input' → logprob: -12.750251770019531
    6. '("("' → logprob: -12.875251770019531
    7. '((' → logprob: -13.000251770019531
    8. ' (' → logprob: -13.250251770019531
    9. '(
' → logprob: -13.250251770019531
    10. '```' → logprob: -13.250251770019531

Token 9: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.04453807324171066
    2. '(' → logprob: -3.1695380210876465
    3. ')' → logprob: -7.9195380210876465
    4. '(str' → logprob: -8.294538497924805
    5. '(lambda' → logprob: -8.419538497924805
    6. '(input' → logprob: -8.544538497924805
    7. 'int' → logprob: -8.669538497924805
    8. '<int' → logprob: -9.294538497924805
    9. '(eval' → logprob: -9.294538497924805
    10. '=int' → logprob: -10.169538497924805

Token 10: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.002894975244998932
    2. ',input' → logprob: -6.752894878387451
    3. '(' → logprob: -7.252894878387451
    4. '))' → logprob: -7.377894878387451
    5. ')' → logprob: -8.50289535522461
    6. ',' → logprob: -9.87789535522461
    7. '=input' → logprob: -10.12789535522461
    8. 'input' → logprob: -10.75289535522461
    9. '```' → logprob: -11.12789535522461
    10. '),' → logprob: -11.75289535522461

Token 11: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.2519523501396179
    2. ' input' → logprob: -1.5019524097442627
    3. '(input' → logprob: -10.876952171325684
    4. ',input' → logprob: -12.876952171325684
    5. ')' → logprob: -14.001952171325684
    6. '=input' → logprob: -14.626952171325684
    7. '	input' → logprob: -15.376952171325684
    8. '<input' → logprob: -16.376953125
    9. ' ' → logprob: -16.751953125
    10. '[input' → logprob: -17.126953125

Token 12: '().' (ID: 1454)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.3803340196609497
    2. '()' → logprob: -1.3803340196609497
    3. '())' → logprob: -2.88033390045166
    4. '().' → logprob: -5.25533390045166
    5. '()));' → logprob: -6.25533390045166
    6. '())))' → logprob: -7.38033390045166
    7. '))' → logprob: -8.38033390045166
    8. '(' → logprob: -8.38033390045166
    9. '()>' → logprob: -8.63033390045166
    10. ')' → logprob: -9.25533390045166

Token 13: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0012307076249271631
    2. 'strip' → logprob: -6.751230716705322
    3. 'rstrip' → logprob: -9.876230239868164
    4. ' split' → logprob: -11.751230239868164
    5. '(split' → logprob: -14.126230239868164
    6. ')' → logprob: -15.501230239868164
    7. 'spl' → logprob: -15.751230239868164
    8. 's' → logprob: -16.501230239868164
    9. ' strip' → logprob: -17.501230239868164
    10. 'rs' → logprob: -17.876230239868164

Token 14: '()))
' (ID: 24521)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.5065826177597046
    2. '()))' → logprob: -1.2565826177597046
    3. ')' → logprob: -2.506582736968994
    4. '())' → logprob: -3.631582736968994
    5. '()' → logprob: -6.256582736968994
    6. '(' → logprob: -6.256582736968994
    7. ')))' → logprob: -7.756582736968994
    8. ''))' → logprob: -8.381582260131836
    9. '('' → logprob: -8.881582260131836
    10. '())))' → logprob: -9.881582260131836

Token 15: 'vals' (ID: 44567)
  Prédit: 'vals'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'vals' → logprob: -0.7467361092567444
    2. 's' → logprob: -1.4967360496520996
    3. 'dp' → logprob: -2.2467360496520996
    4. 'sum' → logprob: -3.1217360496520996
    5. 'total' → logprob: -3.3717360496520996
    6. 'max' → logprob: -3.9967360496520996
    7. 'sorted' → logprob: -4.1217360496521
    8. 'count' → logprob: -4.1217360496521
    9. 'ans' → logprob: -4.4967360496521
    10. 'result' → logprob: -4.9967360496521

Token 16: '.sort' (ID: 19551)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.07138797640800476
    2. '```' → logprob: -3.446388006210327
    3. '<|end|>' → logprob: -4.071387767791748
    4. '.' → logprob: -5.196387767791748
    5. '[
' → logprob: -5.446387767791748
    6. '\[' → logprob: -5.821387767791748
    7. ')' → logprob: -6.696387767791748
    8. '\n' → logprob: -6.946387767791748
    9. '[n' → logprob: -7.071387767791748
    10. '[len' → logprob: -7.696387767791748

Token 17: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.22573131322860718
    2. '()' → logprob: -1.600731372833252
    3. '(
' → logprob: -9.975730895996094
    4. '('' → logprob: -10.100730895996094
    5. '```' → logprob: -10.350730895996094
    6. ' (' → logprob: -10.725730895996094
    7. '`()' → logprob: -10.850730895996094
    8. '((' → logprob: -10.975730895996094
    9. '(()' → logprob: -10.975730895996094
    10. '("("' → logprob: -11.225730895996094

Token 18: 's' (ID: 82)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.7847662568092346
    2. 'k' → logprob: -2.15976619720459
    3. 'sum' → logprob: -2.28476619720459
    4. 'median' → logprob: -2.90976619720459
    5. 'print' → logprob: -3.03476619720459
    6. 's' → logprob: -3.03476619720459
    7. 'count' → logprob: -3.53476619720459
    8. '```' → logprob: -3.78476619720459
    9. 'x' → logprob: -4.03476619720459
    10. 'if' → logprob: -4.28476619720459

Token 19: 'omme' (ID: 30420)
  Prédit: 'um'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'um' → logprob: -0.027576522901654243
    2. 'u' → logprob: -3.777576446533203
    3. '[u' → logprob: -6.402576446533203
    4. '[' → logprob: -6.652576446533203
    5. 'ums' → logprob: -7.152576446533203
    6. '[:]' → logprob: -9.152576446533203
    7. ' =' → logprob: -9.652576446533203
    8. '[-' → logprob: -9.652576446533203
    9. '=' → logprob: -10.027576446533203
    10. '[:' → logprob: -10.027576446533203

Token 20: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2598131000995636
    2. '_' → logprob: -1.6348130702972412
    3. 's' → logprob: -3.509813070297241
    4. ')' → logprob: -6.25981330871582
    5. '()' → logprob: -7.25981330871582
    6. '[' → logprob: -7.88481330871582
    7. '=' → logprob: -8.63481330871582
    8. '_s' → logprob: -8.63481330871582
    9. '('' → logprob: -9.50981330871582
    10. '(s' → logprob: -9.88481330871582

Token 21: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.14292824268341064
    2. ' ' → logprob: -2.017928123474121
    3. ' vals' → logprob: -9.017928123474121
    4. 'vals' → logprob: -10.017928123474121
    5. 'sum' → logprob: -10.142928123474121
    6. ' sum' → logprob: -10.517928123474121
    7. '(vals' → logprob: -11.392928123474121
    8. 's' → logprob: -12.142928123474121
    9. ' ' → logprob: -13.392928123474121
    10. 'val' → logprob: -13.892928123474121

Token 22: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.015047288499772549
    2. 'vals' → logprob: -4.390047073364258
    3. 'sum' → logprob: -6.265047073364258
    4. ' ' → logprob: -7.890047073364258
    5. 'val' → logprob: -8.765047073364258
    6. ' vals' → logprob: -10.265047073364258
    7. 's' → logprob: -10.390047073364258
    8. '(vals' → logprob: -11.140047073364258
    9. ' sum' → logprob: -12.015047073364258
    10. 'v' → logprob: -12.640047073364258

Token 23: '  ' (ID: 256)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.06768395751714706
    2. ' for' → logprob: -2.8176839351654053
    3. '
' → logprob: -5.817684173583984
    4. '\n' → logprob: -7.692684173583984
    5. 's' → logprob: -7.817684173583984
    6. '' → logprob: -8.067684173583984
    7. '<|end|>' → logprob: -8.192684173583984
    8. '_' → logprob: -8.442684173583984
    9. ' ' → logprob: -8.692684173583984
    10. '+' → logprob: -8.817684173583984

Token 24: ' #' (ID: 1069)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.009492556564509869
    2. '
' → logprob: -5.25949239730835
    3. ' for' → logprob: -6.25949239730835
    4. 'f' → logprob: -6.75949239730835
    5. 'i' → logprob: -7.50949239730835
    6. '' → logprob: -7.88449239730835
    7. 'n' → logprob: -10.259492874145508
    8. ' 
' → logprob: -10.509492874145508
    9. '\n' → logprob: -10.509492874145508
    10. '=' → logprob: -10.759492874145508

Token 25: ' Je' (ID: 4678)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6892939805984497
    2. 'for' → logprob: -1.3142939805984497
    3. ' for' → logprob: -1.5642939805984497
    4. 'i' → logprob: -4.93929386138916
    5. 's' → logprob: -5.18929386138916
    6. '#' → logprob: -6.06429386138916
    7. 'f' → logprob: -6.93929386138916
    8. ' 
' → logprob: -7.06429386138916
    9. '=' → logprob: -7.68929386138916
    10. 'n' → logprob: -7.68929386138916

Token 26: ' ne' (ID: 453)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.9622386693954468
    2. ' veux' → logprob: -1.3372386693954468
    3. ' vais' → logprob: -1.8372386693954468
    4. ' ' → logprob: -2.5872387886047363
    5. 'veux' → logprob: -3.8372387886047363
    6. 'voud' → logprob: -4.212238788604736
    7. ' souhaite' → logprob: -4.337238788604736
    8. ' voudrais' → logprob: -4.587238788604736
    9. ' m' → logprob: -4.837238788604736
    10. ' continue' → logprob: -4.837238788604736

Token 27: ' me' (ID: 668)
  Prédit: ' peux'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' peux' → logprob: -1.5166404247283936
    2. 'veux' → logprob: -1.5166404247283936
    3. 'pe' → logprob: -1.8916404247283936
    4. 's' → logprob: -2.1416404247283936
    5. 'vais' → logprob: -2.2666404247283936
    6. 'compr' → logprob: -2.6416404247283936
    7. ' veux' → logprob: -4.016640663146973
    8. ' comprends' → logprob: -4.016640663146973
    9. 'comp' → logprob: -4.641640663146973
    10. 'do' → logprob: -4.766640663146973

Token 28: ' s' (ID: 265)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.04278654605150223
    2. 'sou' → logprob: -4.542786598205566
    3. 'r' → logprob: -5.292786598205566
    4. ' sens' → logprob: -5.667786598205566
    5. 'sens' → logprob: -5.667786598205566
    6. 'f' → logprob: -5.917786598205566
    7. 'sert' → logprob: -6.167786598205566
    8. 'sers' → logprob: -6.292786598205566
    9. 'serv' → logprob: -6.292786598205566
    10. ' rappelle' → logprob: -6.417786598205566

Token 29: 'ers' (ID: 409)
  Prédit: 'uis'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'uis' → logprob: -0.01736612431704998
    2. 'er' → logprob: -4.7673659324646
    3. 'ers' → logprob: -6.2673659324646
    4. 'ou' → logprob: -6.8923659324646
    5. 'ais' → logprob: -6.8923659324646
    6. 'erv' → logprob: -6.8923659324646
    7. 'ens' → logprob: -7.0173659324646
    8. 'o' → logprob: -7.5173659324646
    9. 'ors' → logprob: -7.8923659324646
    10. 'ommes' → logprob: -8.517366409301758

Token 30: ' pas' (ID: 2173)
  Prédit: ' plus'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' plus' → logprob: -0.8813917636871338
    2. ' pas' → logprob: -1.2563917636871338
    3. 'pas' → logprob: -1.8813917636871338
    4. 'plus' → logprob: -2.881391763687134
    5. ' ' → logprob: -3.381391763687134
    6. ' de' → logprob: -3.756391763687134
    7. 'de' → logprob: -3.756391763687134
    8. ' jamais' → logprob: -5.006391525268555
    9. ' que' → logprob: -6.756391525268555
    10. 'que' → logprob: -7.131391525268555

Token 31: ' de' (ID: 334)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2744514048099518
    2. 'for' → logprob: -2.524451494216919
    3. '.' → logprob: -3.524451494216919
    4. '<|end|>' → logprob: -3.649451494216919
    5. 's' → logprob: -3.899451494216919
    6. '#' → logprob: -4.02445125579834
    7. '_' → logprob: -4.14945125579834
    8. ' for' → logprob: -4.14945125579834
    9. ',' → logprob: -4.27445125579834
    10. 'n' → logprob: -5.39945125579834

Token 32: ' cette' (ID: 7696)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.8635665774345398
    2. 'l' → logprob: -1.8635666370391846
    3. ' la' → logprob: -2.3635666370391846
    4. 'range' → logprob: -2.4885666370391846
    5. ' range' → logprob: -3.2385666370391846
    6. 'la' → logprob: -3.7385666370391846
    7. 'sum' → logprob: -3.7385666370391846
    8. ' l' → logprob: -4.1135663986206055
    9. ' somme' → logprob: -4.2385663986206055
    10. ' som' → logprob: -4.3635663986206055

Token 33: ' variable' (ID: 11076)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.44245001673698425
    2. 'variable' → logprob: -1.3174500465393066
    3. 's' → logprob: -3.1924500465393066
    4. ' variable' → logprob: -3.6924500465393066
    5. '_' → logprob: -4.942450046539307
    6. 'v' → logprob: -5.442450046539307
    7. 'a' → logprob: -6.192450046539307
    8. '#' → logprob: -6.692450046539307
    9. '<|end|>' → logprob: -7.067450046539307
    10. 'l' → logprob: -7.192450046539307

Token 34: ' mais' (ID: 2899)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.11432557553052902
    2. ' ' → logprob: -3.864325523376465
    3. '\n' → logprob: -3.864325523376465
    4. '
' → logprob: -3.989325523376465
    5. '<|end|>' → logprob: -4.239325523376465
    6. '\' → logprob: -4.739325523376465
    7. 'n' → logprob: -5.239325523376465
    8. ',' → logprob: -5.489325523376465
    9. 's' → logprob: -5.614325523376465
    10. '' → logprob: -6.114325523376465

Token 35: ' bon' (ID: 4846)
  Prédit: 'je'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'je' → logprob: -0.6405212879180908
    2. ' elle' → logprob: -2.265521287918091
    3. 's' → logprob: -3.015521287918091
    4. ' je' → logprob: -3.390521287918091
    5. 'la' → logprob: -3.390521287918091
    6. 'j' → logprob: -3.515521287918091
    7. 'for' → logprob: -3.765521287918091
    8. 'n' → logprob: -3.890521287918091
    9. 'pour' → logprob: -3.890521287918091
    10. '...' → logprob: -4.015521049499512

Token 36: '...
' (ID: 4908)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -1.554748296737671
    2. '
' → logprob: -1.679748296737671
    3. 'for' → logprob: -1.804748296737671
    4. ' ' → logprob: -2.179748296737671
    5. ',' → logprob: -2.429748296737671
    6. '<|end|>' → logprob: -3.179748296737671
    7. 'n' → logprob: -3.429748296737671
    8. '' → logprob: -3.804748296737671
    9. ' for' → logprob: -3.804748296737671
    10. ' 
' → logprob: -3.929748296737671

Token 37: 'j' (ID: 73)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.8699880242347717
    2. '
' → logprob: -1.244987964630127
    3. 'i' → logprob: -2.619987964630127
    4. ' for' → logprob: -2.619987964630127
    5. ' 
' → logprob: -3.619987964630127
    6. ',' → logprob: -3.744987964630127
    7. 's' → logprob: -3.869987964630127
    8. 'n' → logprob: -4.244987964630127
    9. 'a' → logprob: -4.869987964630127
    10. ' ' → logprob: -5.119987964630127

Token 38: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.25600242614746094
    2. ' =' → logprob: -1.631002426147461
    3. 's' → logprob: -4.881002426147461
    4. 'u' → logprob: -4.881002426147461
    5. ' ' → logprob: -5.506002426147461
    6. 'i' → logprob: -5.631002426147461
    7. 'a' → logprob: -6.381002426147461
    8. 'e' → logprob: -6.756002426147461
    9. '+' → logprob: -7.256002426147461
    10. 'f' → logprob: -7.381002426147461

Token 39: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.4324621260166168
    2. ' ' → logprob: -1.0574620962142944
    3. '1' → logprob: -5.807462215423584
    4. ' n' → logprob: -8.307461738586426
    5. '2' → logprob: -8.557461738586426
    6. 'n' → logprob: -8.807461738586426
    7. ' len' → logprob: -9.557461738586426
    8. 'len' → logprob: -10.807461738586426
    9. '10' → logprob: -11.432461738586426
    10. ' -' → logprob: -11.557461738586426

Token 40: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.01928086206316948
    2. '1' → logprob: -4.394280910491943
    3. ' ' → logprob: -5.519280910491943
    4. 'n' → logprob: -6.394280910491943
    5. '2' → logprob: -8.144280433654785
    6. 'len' → logprob: -8.269280433654785
    7. '-' → logprob: -8.394280433654785
    8. ' n' → logprob: -9.394280433654785
    9. ' len' → logprob: -9.894280433654785
    10. ' -' → logprob: -10.144280433654785

Token 41: '  ' (ID: 256)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 42: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 43: ' Pare' (ID: 62462)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8134853839874268
    2. 'for' → logprob: -1.0634853839874268
    3. ' for' → logprob: -2.8134853839874268
    4. 'i' → logprob: -3.0634853839874268
    5. 'while' → logprob: -3.5634853839874268
    6. '<|end|>' → logprob: -4.063485145568848
    7. ' while' → logprob: -4.563485145568848
    8. 'n' → logprob: -4.563485145568848
    9. ' 
' → logprob: -4.938485145568848
    10. '
' → logprob: -5.063485145568848

Token 44: 'il' (ID: 311)
  Prédit: 'il'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'il' → logprob: -0.010817530564963818
    2. 't' → logprob: -5.260817527770996
    3. 'ils' → logprob: -6.510817527770996
    4. 'm' → logprob: -6.885817527770996
    5. 's' → logprob: -7.885817527770996
    6. 'ille' → logprob: -8.135817527770996
    7. '```' → logprob: -8.135817527770996
    8. 'x' → logprob: -8.385817527770996
    9. 'r' → logprob: -8.635817527770996
    10. 'son' → logprob: -9.010817527770996

Token 45: ',' (ID: 11)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -1.1432565450668335
    2. 'for' → logprob: -1.1432565450668335
    3. ' ' → logprob: -2.393256664276123
    4. 'f' → logprob: -2.768256664276123
    5. '' → logprob: -2.768256664276123
    6. 'i' → logprob: -3.018256664276123
    7. ' for' → logprob: -3.768256664276123
    8. ' 
' → logprob: -4.018256664276123
    9. 'n' → logprob: -4.143256664276123
    10. '<|end|>' → logprob: -4.518256664276123

Token 46: ' lol' (ID: 27504)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.05184928700327873
    2. ' i' → logprob: -4.301849365234375
    3. 'i' → logprob: -4.926849365234375
    4. 'n' → logprob: -5.051849365234375
    5. ' for' → logprob: -5.051849365234375
    6. ' n' → logprob: -5.426849365234375
    7. ' 
' → logprob: -6.176849365234375
    8. 'for' → logprob: -6.176849365234375
    9. ' while' → logprob: -6.301849365234375
    10. '<|end|>' → logprob: -6.426849365234375

Token 47: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.37854209542274475
    2. 'for' → logprob: -1.5035420656204224
    3. ' for' → logprob: -4.003541946411133
    4. '<|end|>' → logprob: -4.003541946411133
    5. 'i' → logprob: -4.253541946411133
    6. ' ' → logprob: -4.503541946411133
    7. ' 
' → logprob: -4.753541946411133
    8. 'n' → logprob: -5.003541946411133
    9. 'f' → logprob: -5.253541946411133
    10. '' → logprob: -5.378541946411133

Token 48: '#' (ID: 2)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.023667482659220695
    2. 'while' → logprob: -4.898667335510254
    3. 'i' → logprob: -5.273667335510254
    4. '<|end|>' → logprob: -5.273667335510254
    5. ' for' → logprob: -5.523667335510254
    6. 'n' → logprob: -7.398667335510254
    7. '
' → logprob: -7.648667335510254
    8. 's' → logprob: -8.523667335510254
    9. ')' → logprob: -9.773667335510254
    10. 'j' → logprob: -10.148667335510254

Token 49: ' Je' (ID: 4678)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.3561791479587555
    2. ' for' → logprob: -2.6061792373657227
    3. ' ' → logprob: -2.6061792373657227
    4. 'i' → logprob: -2.7311792373657227
    5. 'f' → logprob: -3.3561792373657227
    6. '#' → logprob: -3.3561792373657227
    7. 'n' → logprob: -5.481179237365723
    8. 's' → logprob: -5.981179237365723
    9. 'while' → logprob: -6.606179237365723
    10. ' #' → logprob: -6.731179237365723

Token 50: ' vais' (ID: 42975)
  Prédit: ' vais'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' vais' → logprob: -0.6400590538978577
    2. ' continue' → logprob: -1.765058994293213
    3. ' veux' → logprob: -2.515058994293213
    4. ' n' → logprob: -2.890058994293213
    5. ' pense' → logprob: -3.015058994293213
    6. 's' → logprob: -3.890058994293213
    7. ' suis' → logprob: -4.265058994293213
    8. ' suppose' → logprob: -4.265058994293213
    9. ' ' → logprob: -4.640058994293213
    10. ' #' → logprob: -4.640058994293213

Token 51: ' faire' (ID: 8119)
  Prédit: 'contin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'contin' → logprob: -1.510687232017517
    2. ' continuer' → logprob: -1.635687232017517
    3. 'faire' → logprob: -2.1356873512268066
    4. ' faire' → logprob: -2.6356873512268066
    5. 'tr' → logprob: -3.2606873512268066
    6. 'prendre' → logprob: -3.2606873512268066
    7. ' calcul' → logprob: -3.5106873512268066
    8. 'util' → logprob: -3.7606873512268066
    9. 'for' → logprob: -3.8856873512268066
    10. ' utiliser' → logprob: -3.8856873512268066

Token 52: ' la' (ID: 557)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.9286864995956421
    2. 'une' → logprob: -1.428686499595642
    3. ' for' → logprob: -1.928686499595642
    4. ' une' → logprob: -2.4286866188049316
    5. 'un' → logprob: -3.3036866188049316
    6. ' un' → logprob: -3.4286866188049316
    7. ' ' → logprob: -3.5536866188049316
    8. ' quelque' → logprob: -5.178686618804932
    9. ' la' → logprob: -5.678686618804932
    10. 'la' → logprob: -5.803686618804932

Token 53: ' boucle' (ID: 174211)
  Prédit: 'suite'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'suite' → logprob: -0.5119501352310181
    2. 'm' → logprob: -2.3869500160217285
    3. 's' → logprob: -2.3869500160217285
    4. ' suite' → logprob: -2.8869500160217285
    5. 'for' → logprob: -3.6369500160217285
    6. 'diff' → logprob: -3.8869500160217285
    7. ' somme' → logprob: -4.0119500160217285
    8. ' boucle' → logprob: -4.1369500160217285
    9. 'while' → logprob: -4.3869500160217285
    10. 'bou' → logprob: -4.8869500160217285

Token 54: ' sur' (ID: 1512)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.1291554719209671
    2. ' for' → logprob: -2.129155397415161
    3. 'f' → logprob: -7.12915563583374
    4. 'i' → logprob: -7.62915563583374
    5. ' ' → logprob: -7.87915563583374
    6. '
' → logprob: -8.754155158996582
    7. ' 
' → logprob: -8.879155158996582
    8. '_' → logprob: -9.754155158996582
    9. '<|end|>' → logprob: -10.004155158996582
    10. ':' → logprob: -10.504155158996582

Token 55: ' un' (ID: 537)
  Prédit: ' range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.05138488858938217
    2. 'range' → logprob: -3.301384925842285
    3. ' i' → logprob: -5.051384925842285
    4. ' la' → logprob: -6.676384925842285
    5. '_' → logprob: -6.801384925842285
    6. ' ' → logprob: -7.176384925842285
    7. ' n' → logprob: -7.176384925842285
    8. 'i' → logprob: -7.426384925842285
    9. ' vals' → logprob: -7.801384925842285
    10. ' _' → logprob: -7.926384925842285

Token 56: ' range' (ID: 3352)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.7086999416351318
    2. ' range' → logprob: -0.8336999416351318
    3. ' for' → logprob: -3.583699941635132
    4. 'range' → logprob: -3.958699941635132
    5. 'for' → logprob: -5.083700180053711
    6. ' i' → logprob: -5.083700180053711
    7. 'i' → logprob: -5.583700180053711
    8. '_' → logprob: -5.583700180053711
    9. 'a' → logprob: -6.833700180053711
    10. ' e' → logprob: -7.083700180053711

Token 57: ' un' (ID: 537)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.013312576338648796
    2. '(n' → logprob: -5.638312339782715
    3. '(range' → logprob: -5.638312339782715
    4. '[' → logprob: -6.263312339782715
    5. 's' → logprob: -6.763312339782715
    6. '(
' → logprob: -7.013312339782715
    7. '(len' → logprob: -7.513312339782715
    8. ' (' → logprob: -7.888312339782715
    9. 'for' → logprob: -8.263312339782715
    10. '(i' → logprob: -8.763312339782715

Token 58: ' peu' (ID: 9235)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.035513781011104584
    2. '(n' → logprob: -3.9105138778686523
    3. '(range' → logprob: -4.910513877868652
    4. 'range' → logprob: -6.535513877868652
    5. 'n' → logprob: -7.285513877868652
    6. ')' → logprob: -7.535513877868652
    7. ' range' → logprob: -7.660513877868652
    8. 's' → logprob: -7.660513877868652
    9. '()' → logprob: -7.785513877868652
    10. ' (' → logprob: -7.910513877868652

Token 59: ' différent' (ID: 114823)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.25875532627105713
    2. '(n' → logprob: -1.5087553262710571
    3. '(len' → logprob: -6.008755207061768
    4. '(
' → logprob: -6.008755207061768
    5. '(j' → logprob: -6.758755207061768
    6. '(range' → logprob: -7.883755207061768
    7. '(s' → logprob: -9.758755683898926
    8. ' (' → logprob: -9.883755683898926
    9. 's' → logprob: -9.883755683898926
    10. ')' → logprob: -10.383755683898926

Token 60: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.027554262429475784
    2. ':' → logprob: -4.402554035186768
    3. '[' → logprob: -5.152554035186768
    4. '(n' → logprob: -6.152554035186768
    5. '(range' → logprob: -6.652554035186768
    6. ',' → logprob: -6.777554035186768
    7. '(
' → logprob: -6.777554035186768
    8. 'for' → logprob: -7.027554035186768
    9. ' (' → logprob: -7.402554035186768
    10. 's' → logprob: -7.527554035186768

Token 61: ' mais' (ID: 2899)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.6335604786872864
    2. ' for' → logprob: -2.1335604190826416
    3. ' n' → logprob: -2.2585604190826416
    4. 'range' → logprob: -2.3835604190826416
    5. 'for' → logprob: -2.8835604190826416
    6. ' range' → logprob: -4.133560657501221
    7. '(' → logprob: -4.633560657501221
    8. 'i' → logprob: -4.633560657501221
    9. '_' → logprob: -5.008560657501221
    10. '1' → logprob: -5.133560657501221

Token 62: ' ça' (ID: 13590)
  Prédit: 'j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'j' → logprob: -1.4186596870422363
    2. 'for' → logprob: -1.4186596870422363
    3. 'pas' → logprob: -2.1686596870422363
    4. 'je' → logprob: -2.7936596870422363
    5. ' j' → logprob: -2.7936596870422363
    6. 'range' → logprob: -3.0436596870422363
    7. '...' → logprob: -3.6686596870422363
    8. 'n' → logprob: -3.7936596870422363
    9. '#' → logprob: -3.9186596870422363
    10. ' for' → logprob: -4.043659687042236

Token 63: ' doit' (ID: 21822)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.014950293116271496
    2. 'for' → logprob: -4.889950275421143
    3. ' for' → logprob: -6.639950275421143
    4. 'range' → logprob: -6.639950275421143
    5. ' :' → logprob: -6.764950275421143
    6. '(range' → logprob: -7.139950275421143
    7. '(n' → logprob: -7.389950275421143
    8. 'n' → logprob: -7.889950275421143
    9. '(' → logprob: -8.2649507522583
    10. ' range' → logprob: -8.3899507522583

Token 64: ' aller' (ID: 18383)
  Prédit: 'faire'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'faire' → logprob: -1.2339855432510376
    2. 'march' → logprob: -1.4839855432510376
    3. 'fonction' → logprob: -1.9839855432510376
    4. 'être' → logprob: -2.608985424041748
    5. 'aller' → logprob: -2.858985424041748
    6. ' marcher' → logprob: -3.858985424041748
    7. ' fonctionner' → logprob: -4.108985424041748
    8. 'bien' → logprob: -4.108985424041748
    9. 'all' → logprob: -4.233985424041748
    10. 's' → logprob: -4.858985424041748

Token 65: '...
' (ID: 4908)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.17961165308952332
    2. ' for' → logprob: -1.9296116828918457
    3. 'range' → logprob: -5.054611682891846
    4. 'n' → logprob: -5.429611682891846
    5. '<|end|>' → logprob: -6.429611682891846
    6. '
' → logprob: -6.429611682891846
    7. 'i' → logprob: -7.054611682891846
    8. ')' → logprob: -7.054611682891846
    9. ':' → logprob: -7.554611682891846
    10. '(' → logprob: -7.679611682891846

Token 66: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.07829537987709045
    2. ' for' → logprob: -2.7032954692840576
    3. 'range' → logprob: -5.8282952308654785
    4. '
' → logprob: -5.8282952308654785
    5. '```' → logprob: -6.7032952308654785
    6. 'n' → logprob: -7.8282952308654785
    7. '<|end|>' → logprob: -7.8282952308654785
    8. ' 
' → logprob: -9.828295707702637
    9. 'i' → logprob: -9.828295707702637
    10. '  
' → logprob: -10.078295707702637

Token 67: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.001472960808314383
    2. 'i' → logprob: -7.5014729499816895
    3. ' _' → logprob: -7.6264729499816895
    4. ' ' → logprob: -8.126473426818848
    5. ' ' → logprob: -10.376473426818848
    6. '_' → logprob: -10.751473426818848
    7. ' range' → logprob: -10.876473426818848
    8. '	i' → logprob: -10.876473426818848
    9. ' k' → logprob: -11.626473426818848
    10. ' j' → logprob: -12.001473426818848

Token 68: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.03377329185605049
    2. 'in' → logprob: -3.408773183822632
    3. ' ' → logprob: -9.283773422241211
    4. 'range' → logprob: -11.283773422241211
    5. ',' → logprob: -12.408773422241211
    6. '1' → logprob: -12.658773422241211
    7. 'n' → logprob: -13.033773422241211
    8. ' range' → logprob: -13.158773422241211
    9. '  ' → logprob: -13.596273422241211
    10. ')' → logprob: -14.096273422241211

Token 69: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.03804952651262283
    2. 'range' → logprob: -3.2880494594573975
    3. ' ' → logprob: -12.413049697875977
    4. '(range' → logprob: -13.663049697875977
    5. '	range' → logprob: -13.663049697875977
    6. ' ' → logprob: -14.538049697875977
    7. '  ' → logprob: -14.913049697875977
    8. '   ' → logprob: -15.663049697875977
    9. ' xrange' → logprob: -15.663049697875977
    10. '```' → logprob: -16.038049697875977

Token 70: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4785429537296295
    2. '(n' → logprob: -0.9785429239273071
    3. '(len' → logprob: -5.603542804718018
    4. '(j' → logprob: -7.228542804718018
    5. '(s' → logprob: -10.978543281555176
    6. '((' → logprob: -10.978543281555176
    7. '(i' → logprob: -12.478543281555176
    8. ' (' → logprob: -13.603543281555176
    9. '(-' → logprob: -13.853543281555176
    10. '(k' → logprob: -14.103543281555176

Token 71: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.9486143589019775
    2. '):' → logprob: -1.0736143589019775
    3. ' -' → logprob: -1.5736143589019775
    4. ',' → logprob: -3.9486143589019775
    5. ' ):' → logprob: -4.073614120483398
    6. '//' → logprob: -4.323614120483398
    7. ')' → logprob: -4.948614120483398
    8. ' //' → logprob: -5.573614120483398
    9. ' ,' → logprob: -6.948614120483398
    10. ' ' → logprob: -7.073614120483398

Token 72: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.03700811043381691
    2. '2' → logprob: -3.412008047103882
    3. ' ' → logprob: -5.787008285522461
    4. '3' → logprob: -8.412008285522461
    5. '4' → logprob: -10.287008285522461
    6. '5' → logprob: -11.412008285522461
    7. 'j' → logprob: -12.349508285522461
    8. '   ' → logprob: -12.349508285522461
    9. '-' → logprob: -12.849508285522461
    10. '  ' → logprob: -13.037008285522461

Token 73: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.012833932414650917
    2. '2' → logprob: -4.387834072113037
    3. ' ' → logprob: -8.637833595275879
    4. '3' → logprob: -9.012833595275879
    5. '4' → logprob: -11.137833595275879
    6. '5' → logprob: -12.012833595275879
    7. '   ' → logprob: -14.262833595275879
    8. '10' → logprob: -14.637833595275879
    9. 'k' → logprob: -14.825333595275879
    10. 'j' → logprob: -14.887833595275879

Token 74: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.011889629997313023
    2. ',' → logprob: -4.511889457702637
    3. ' ):' → logprob: -7.636889457702637
    4. ')' → logprob: -8.136889457702637
    5. '):
' → logprob: -10.636889457702637
    6. ' ,' → logprob: -10.761889457702637
    7. ':' → logprob: -11.886889457702637
    8. '-' → logprob: -12.511889457702637
    9. ',-' → logprob: -12.636889457702637
    10. '):

' → logprob: -13.636889457702637

Token 75: '   ' (ID: 271)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -1.4361283779144287
    2. '   ' → logprob: -1.4361283779144287
    3. ' ' → logprob: -1.5611283779144287
    4. ':' → logprob: -1.5611283779144287
    5. 's' → logprob: -2.9361283779144287
    6. '<|end|>' → logprob: -3.9361283779144287
    7. ')' → logprob: -5.436128616333008
    8. ' :' → logprob: -5.561128616333008
    9. '  ' → logprob: -5.561128616333008
    10. ',' → logprob: -5.686128616333008

Token 76: ' vals' (ID: 58985)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5090185403823853
    2. 's' → logprob: -1.8840185403823853
    3. 'if' → logprob: -2.1340184211730957
    4. ' if' → logprob: -2.2590184211730957
    5. ' ' → logprob: -4.884018421173096
    6. ' somme' → logprob: -5.509018421173096
    7. 'j' → logprob: -5.634018421173096
    8. '  ' → logprob: -6.259018421173096
    9. ' j' → logprob: -6.634018421173096
    10. '    ' → logprob: -6.759018421173096

Token 77: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.06489239633083344
    2. '[j' → logprob: -2.939892292022705
    3. '[' → logprob: -4.689892292022705
    4. '[-' → logprob: -7.689892292022705
    5. 'j' → logprob: -9.939892768859863
    6. '.append' → logprob: -10.564892768859863
    7. 's' → logprob: -10.814892768859863
    8. 'i' → logprob: -11.064892768859863
    9. '+=' → logprob: -11.064892768859863
    10. ' [' → logprob: -11.189892768859863

Token 78: ' +' (ID: 659)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']' → logprob: -0.02221754752099514
    2. '+' → logprob: -4.022217750549316
    3. ']+=' → logprob: -5.647217750549316
    4. ']+' → logprob: -8.647217750549316
    5. ']=' → logprob: -8.772217750549316
    6. '],' → logprob: -9.397217750549316
    7. ']*' → logprob: -10.647217750549316
    8. '+=' → logprob: -11.022217750549316
    9. ']<' → logprob: -11.147217750549316
    10. '-' → logprob: -11.272217750549316

Token 79: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00034630970912985504
    2. ' ' → logprob: -8.125346183776855
    3. ']' → logprob: -10.375346183776855
    4. '0' → logprob: -11.875346183776855
    5. '<|end|>' → logprob: -11.875346183776855
    6. ')' → logprob: -13.125346183776855
    7. '   ' → logprob: -14.000346183776855
    8. '2' → logprob: -14.375346183776855
    9. '  ' → logprob: -15.000346183776855
    10. '+' → logprob: -15.375346183776855

Token 80: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -6.742448022123426e-05
    2. ' ' → logprob: -9.625067710876465
    3. '0' → logprob: -13.750067710876465
    4. '   ' → logprob: -15.937567710876465
    5. '  ' → logprob: -17.00006675720215
    6. '2' → logprob: -17.43756675720215
    7. '```' → logprob: -17.56256675720215
    8. ']' → logprob: -17.93756675720215
    9. '१' → logprob: -18.56256675720215
    10. '১' → logprob: -18.68756675720215

Token 81: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0019677700474858284
    2. ']+=' → logprob: -6.376967906951904
    3. ' ]' → logprob: -8.626967430114746
    4. ']=' → logprob: -10.751967430114746
    5. ')' → logprob: -11.126967430114746
    6. '-' → logprob: -11.251967430114746
    7. '+' → logprob: -11.876967430114746
    8. ']+' → logprob: -12.251967430114746
    9. ' +=' → logprob: -12.251967430114746
    10. '+=' → logprob: -12.251967430114746

Token 82: ' =' (ID: 314)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.4002124071121216
    2. ' +=' → logprob: -1.1502124071121216
    3. '=' → logprob: -4.400212287902832
    4. '+' → logprob: -7.525212287902832
    5. ' =' → logprob: -8.775212287902832
    6. ']+=' → logprob: -9.275212287902832
    7. ' -=' → logprob: -9.275212287902832
    8. '-=' → logprob: -9.650212287902832
    9. ' *=' → logprob: -12.150212287902832
    10. ' ' → logprob: -12.275212287902832

Token 83: ' (' (ID: 350)
  Prédit: 'vals'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'vals' → logprob: -0.07101086527109146
    2. ' vals' → logprob: -2.9460108280181885
    3. 'max' → logprob: -4.321011066436768
    4. '(vals' → logprob: -7.071011066436768
    5. ' max' → logprob: -7.196011066436768
    6. 'val' → logprob: -7.321011066436768
    7. 'min' → logprob: -8.57101058959961
    8. 'abs' → logprob: -8.94601058959961
    9. ' ' → logprob: -10.19601058959961
    10. '   ' → logprob: -11.44601058959961

Token 84: 'vals' (ID: 44567)
  Prédit: 'vals'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'vals' → logprob: -0.22707484662532806
    2. ' vals' → logprob: -1.6020748615264893
    3. '(vals' → logprob: -7.35207462310791
    4. 'val' → logprob: -7.47707462310791
    5. ')' → logprob: -8.85207462310791
    6. '   ' → logprob: -9.35207462310791
    7. ' ' → logprob: -10.22707462310791
    8. '2' → logprob: -10.66457462310791
    9. ' val' → logprob: -11.03957462310791
    10. '_vals' → logprob: -11.10207462310791

Token 85: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -2.6776029699249193e-05
    2. '[' → logprob: -11.12502670288086
    3. ')[' → logprob: -12.62502670288086
    4. 'i' → logprob: -13.00002670288086
    5. ' [' → logprob: -13.00002670288086
    6. '[j' → logprob: -13.25002670288086
    7. ')' → logprob: -13.87502670288086
    8. ' i' → logprob: -14.75002670288086
    9. ' ' → logprob: -15.25002670288086
    10. '   ' → logprob: -15.37502670288086

Token 86: ']' (ID: 60)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.37026628851890564
    2. ' +' → logprob: -1.870266318321228
    3. ']' → logprob: -1.995266318321228
    4. ']+' → logprob: -3.9952661991119385
    5. ' ]' → logprob: -8.37026596069336
    6. ' ' → logprob: -8.49526596069336
    7. ')' → logprob: -9.49526596069336
    8. '-' → logprob: -9.49526596069336
    9. '   ' → logprob: -9.74526596069336
    10. '    ' → logprob: -9.87026596069336

Token 87: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.47455063462257385
    2. ' +' → logprob: -0.9745506048202515
    3. '*' → logprob: -8.349550247192383
    4. ' ' → logprob: -9.599550247192383
    5. ' *' → logprob: -9.724550247192383
    6. ' -' → logprob: -10.474550247192383
    7. '-' → logprob: -10.724550247192383
    8. ')' → logprob: -11.099550247192383
    9. '%' → logprob: -11.849550247192383
    10. '   ' → logprob: -12.099550247192383

Token 88: ' vals' (ID: 58985)
  Prédit: ' vals'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' vals' → logprob: -0.021284611895680428
    2. 'vals' → logprob: -3.896284580230713
    3. ' ' → logprob: -8.021285057067871
    4. '(vals' → logprob: -8.146285057067871
    5. ' val' → logprob: -10.271285057067871
    6. '   ' → logprob: -11.271285057067871
    7. 'val' → logprob: -11.271285057067871
    8. '_vals' → logprob: -11.521285057067871
    9. '  ' → logprob: -11.646285057067871
    10. ')' → logprob: -12.271285057067871

Token 89: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.000998155795969069
    2. '[' → logprob: -7.625998020172119
    3. 's' → logprob: -8.125998497009277
    4. '][' → logprob: -9.625998497009277
    5. 'i' → logprob: -10.000998497009277
    6. 'vals' → logprob: -10.375998497009277
    7. ']' → logprob: -10.375998497009277
    8. ' ' → logprob: -12.000998497009277
    9. '[j' → logprob: -12.375998497009277
    10. '_vals' → logprob: -12.500998497009277

Token 90: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.18750980496406555
    2. ']' → logprob: -1.9375097751617432
    3. '[i' → logprob: -3.937509775161743
    4. '   ' → logprob: -5.937510013580322
    5. '])' → logprob: -6.312510013580322
    6. 'i' → logprob: -6.812510013580322
    7. ' +' → logprob: -7.187510013580322
    8. ']+' → logprob: -8.062509536743164
    9. '+i' → logprob: -8.937509536743164
    10. ' ' → logprob: -8.937509536743164

Token 91: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00010187433508690447
    2. ' ' → logprob: -9.500102043151855
    3. '2' → logprob: -11.125102043151855
    4. '0' → logprob: -12.500102043151855
    5. '+' → logprob: -13.250102043151855
    6. ')' → logprob: -13.375102043151855
    7. '   ' → logprob: -13.750102043151855
    8. ' ' → logprob: -14.250102043151855
    9. ']' → logprob: -14.375102043151855
    10. '[' → logprob: -14.937602043151855

Token 92: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -2.629921436891891e-05
    2. ' ' → logprob: -11.00002670288086
    3. '0' → logprob: -11.75002670288086
    4. '   ' → logprob: -14.62502670288086
    5. ']' → logprob: -15.18752670288086
    6. '2' → logprob: -15.43752670288086
    7. ')' → logprob: -16.12502670288086
    8. '  ' → logprob: -16.56252670288086
    9. '    ' → logprob: -16.81252670288086
    10. '```' → logprob: -16.87502670288086

Token 93: '])' (ID: 4636)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0054605938494205475
    2. ')//' → logprob: -5.255460739135742
    3. ' )' → logprob: -8.630460739135742
    4. ')>>' → logprob: -11.630460739135742
    5. '+' → logprob: -11.880460739135742
    6. '))' → logprob: -11.880460739135742
    7. ')#' → logprob: -11.880460739135742
    8. ')/' → logprob: -12.380460739135742
    9. '//' → logprob: -13.005460739135742
    10. ')
' → logprob: -13.255460739135742

Token 94: ' /' (ID: 820)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.6893519759178162
    2. '<|end|>' → logprob: -0.9393519759178162
    3. '+' → logprob: -2.689352035522461
    4. ' 
' → logprob: -4.064352035522461
    5. '```' → logprob: -5.314352035522461
    6. '<|end|>' → logprob: -5.564352035522461
    7. ' ' → logprob: -5.939352035522461
    8. '  
' → logprob: -6.064352035522461
    9. '
' → logprob: -6.064352035522461
    10. '+
' → logprob: -6.939352035522461

Token 95: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.02632293477654457
    2. ' ' → logprob: -3.651322841644287
    3. '3' → logprob: -11.276323318481445
    4. '(' → logprob: -12.901323318481445
    5. '10' → logprob: -13.026323318481445
    6. '1' → logprob: -13.901323318481445
    7. ' i' → logprob: -14.838823318481445
    8. '20' → logprob: -14.901323318481445
    9. '4' → logprob: -15.026323318481445
    10. 'i' → logprob: -15.088823318481445

Token 96: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -7.147740689106286e-05
    2. ' ' → logprob: -10.12507152557373
    3. '(' → logprob: -11.00007152557373
    4. '3' → logprob: -12.25007152557373
    5. '10' → logprob: -13.12507152557373
    6. 'i' → logprob: -13.12507152557373
    7. '(i' → logprob: -13.62507152557373
    8. '1' → logprob: -13.75007152557373
    9. '100' → logprob: -13.75007152557373
    10. '4' → logprob: -14.87507152557373

Token 97: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5631139874458313
    2. '<|end|>' → logprob: -0.9381139874458313
    3. '\n' → logprob: -3.4381139278411865
    4. ')' → logprob: -6.188114166259766
    5. ' ' → logprob: -7.063114166259766
    6. '```' → logprob: -7.188114166259766
    7. '<|end|>' → logprob: -7.438114166259766
    8. '#' → logprob: -7.938114166259766
    9. ' 
' → logprob: -7.938114166259766
    10. '  
' → logprob: -8.188114166259766

Token 98: '#' (ID: 2)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.605064332485199
    2. '<|end|>' → logprob: -1.4800643920898438
    3. '
' → logprob: -1.8550643920898438
    4. ' ' → logprob: -4.230064392089844
    5. ')' → logprob: -4.355064392089844
    6. '#' → logprob: -4.730064392089844
    7. ' 
' → logprob: -4.730064392089844
    8. '  
' → logprob: -5.230064392089844
    9. '```' → logprob: -5.480064392089844
    10. '   ' → logprob: -6.105064392089844

Token 99: ' Je' (ID: 4678)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.1143261045217514
    2. 's' → logprob: -3.239326000213623
    3. '<|end|>' → logprob: -4.114326000213623
    4. ' ' → logprob: -4.739326000213623
    5. 'n' → logprob: -5.114326000213623
    6. 'i' → logprob: -5.239326000213623
    7. '0' → logprob: -5.614326000213623
    8. ' print' → logprob: -5.614326000213623
    9. '```' → logprob: -5.614326000213623
    10. ')' → logprob: -5.739326000213623

Token 100: ' suppose' (ID: 35968)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.3109772205352783
    2. ' vais' → logprob: -2.0609772205352783
    3. ' continue' → logprob: -2.0609772205352783
    4. 's' → logprob: -2.4359772205352783
    5. ' n' → logprob: -2.6859772205352783
    6. ' veux' → logprob: -2.8109772205352783
    7. ' pense' → logprob: -2.9359772205352783
    8. 'n' → logprob: -3.4359772205352783
    9. ' print' → logprob: -3.5609772205352783
    10. ' peux' → logprob: -4.185976982116699

Token 101: ' qu' (ID: 474)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 102: ''on' (ID: 25812)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.11548029631376266
    2. ''' → logprob: -2.3654801845550537
    3. '   ' → logprob: -5.240480422973633
    4. ' e' → logprob: -6.115480422973633
    5. 'a' → logprob: -6.615480422973633
    6. 'u' → logprob: -6.740480422973633
    7. ''il' → logprob: -7.490480422973633
    8. ' que' → logprob: -7.865480422973633
    9. ' ' → logprob: -8.115480422973633
    10. '  ' → logprob: -8.115480422973633

Token 103: ' affiche' (ID: 127479)
  Prédit: ' peux'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' peux' → logprob: -0.2199695110321045
    2. ' veux' → logprob: -2.8449695110321045
    3. ' vais' → logprob: -3.8449695110321045
    4. 's' → logprob: -3.8449695110321045
    5. 'print' → logprob: -3.9699695110321045
    6. 'vais' → logprob: -4.219969749450684
    7. 'n' → logprob: -4.469969749450684
    8. ' n' → logprob: -4.719969749450684
    9. ' dois' → logprob: -5.594969749450684
    10. ' continue' → logprob: -5.719969749450684

Token 104: ' juste' (ID: 31553)
  Prédit: '(vals'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(vals' → logprob: -0.29770898818969727
    2. '(int' → logprob: -2.2977089881896973
    3. 'int' → logprob: -2.5477089881896973
    4. 'vals' → logprob: -2.9227089881896973
    5. '(' → logprob: -4.547708988189697
    6. '(round' → logprob: -4.672708988189697
    7. 'print' → logprob: -6.672708988189697
    8. '("{' → logprob: -6.922708988189697
    9. 'round' → logprob: -7.172708988189697
    10. '(f' → logprob: -7.672708988189697

Token 105: ' le' (ID: 505)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00019305046589579433
    2. ')
' → logprob: -8.875192642211914
    3. '
' → logprob: -10.750192642211914
    4. ' print' → logprob: -11.500192642211914
    5. '(print' → logprob: -12.125192642211914
    6. '```' → logprob: -12.125192642211914
    7. 'vals' → logprob: -12.500192642211914
    8. '(vals' → logprob: -12.750192642211914
    9. ')' → logprob: -13.125192642211914
    10. '()
' → logprob: -14.625192642211914

Token 106: ' dernier' (ID: 27982)
  Prédit: ' dernier'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' dernier' → logprob: -0.2082034945487976
    2. 'dern' → logprob: -2.3332035541534424
    3. ' résultat' → logprob: -3.4582035541534424
    4. 'vals' → logprob: -3.9582035541534424
    5. ' last' → logprob: -4.958203315734863
    6. 'val' → logprob: -5.208203315734863
    7. ' result' → logprob: -5.458203315734863
    8. ' dernière' → logprob: -5.583203315734863
    9. ' resultat' → logprob: -5.708203315734863
    10. 'result' → logprob: -5.708203315734863

Token 107: ' élément' (ID: 99627)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.02008724957704544
    2. ')
' → logprob: -4.020087242126465
    3. ' print' → logprob: -6.520087242126465
    4. '
' → logprob: -8.020087242126465
    5. ')' → logprob: -9.395087242126465
    6. '```' → logprob: -10.895087242126465
    7. ' )
' → logprob: -12.395087242126465
    8. '\n' → logprob: -12.395087242126465
    9. ' 
' → logprob: -12.770087242126465
    10. '  
' → logprob: -13.145087242126465

Token 108: ' ?
' (ID: 19740)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.004496823064982891
    2. ')
' → logprob: -5.879497051239014
    3. ' print' → logprob: -7.004497051239014
    4. '
' → logprob: -7.254497051239014
    5. '```' → logprob: -10.254496574401855
    6. ')' → logprob: -10.754496574401855
    7. '   ' → logprob: -12.754496574401855
    8. '``' → logprob: -13.004496574401855
    9. ' )
' → logprob: -13.254496574401855
    10. '\n' → logprob: -13.254496574401855

Token 109: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -9.372294698550832e-06
    2. ' print' → logprob: -12.500009536743164
    3. '```' → logprob: -12.500009536743164
    4. '
' → logprob: -13.250009536743164
    5. '``' → logprob: -17.875009536743164
    6. '<|end|>' → logprob: -18.250009536743164
    7. '  
' → logprob: -18.875009536743164
    8. ')
' → logprob: -18.875009536743164
    9. '#print' → logprob: -19.375009536743164
    10. '`' → logprob: -19.625009536743164

Token 110: '(vals' (ID: 167053)
  Prédit: '(vals'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(vals' → logprob: -0.07891380041837692
    2. '(' → logprob: -2.578913688659668
    3. '(val' → logprob: -11.078913688659668
    4. '(round' → logprob: -13.203913688659668
    5. '(vars' → logprob: -13.328913688659668
    6. 'vals' → logprob: -14.328913688659668
    7. '(
' → logprob: -14.578913688659668
    8. '()' → logprob: -14.578913688659668
    9. '(values' → logprob: -14.703913688659668
    10. '(int' → logprob: -14.703913688659668

Token 111: '[-' (ID: 17503)
  Prédit: '[-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[-' → logprob: -0.003265765029937029
    2. ')' → logprob: -5.878265857696533
    3. '-' → logprob: -8.128265380859375
    4. '[' → logprob: -9.503265380859375
    5. '[n' → logprob: -9.503265380859375
    6. '[len' → logprob: -11.878265380859375
    7. '))' → logprob: -13.378265380859375
    8. ')
' → logprob: -13.753265380859375
    9. '[i' → logprob: -13.878265380859375
    10. '   ' → logprob: -13.878265380859375

Token 112: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.128163257315464e-07
    2. ' ' → logprob: -15.375
    3. '
' → logprob: -18.375
    4. ']' → logprob: -18.875
    5. '```' → logprob: -18.875
    6. ')' → logprob: -19.1875
    7. '

' → logprob: -19.25
    8. '])' → logprob: -19.3125
    9. '   ' → logprob: -19.3125
    10. '2' → logprob: -19.4375

Token 113: '])' (ID: 4636)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00029387109680101275
    2. '])' → logprob: -8.250293731689453
    3. '))' → logprob: -10.500293731689453
    4. '})' → logprob: -12.500293731689453
    5. '`)' → logprob: -15.000293731689453
    6. '）' → logprob: -15.250293731689453
    7. '>)' → logprob: -15.625293731689453
    8. ')`' → logprob: -15.875293731689453
    9. ''])' → logprob: -16.000293731689453
    10. ' )' → logprob: -16.250293731689453


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 111
Tokens correctement prédits (1ère position, stricte): 28
Tokens correctement prédits (1ère position, avec adaptation): 28
Tokens correctement prédits (top 10): 58
Précision stricte (1ère position): 25.23%
Précision adaptée (1ère position): 25.23%
Précision (top 10): 52.25%
================================================================================
