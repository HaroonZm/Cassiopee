================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:27:00
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def main():
    N = int(input())
    A = list(map(int, input().split()))
    A.sort()
    res = "YES"
    for i in range(N - 1):
        if A[i] == A[i + 1]:
            res = "NO"
    print(res)

if __name__ == "__main__":
    main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' main' (ID: 2758)
  → Token d'amorce (pas de prédiction)

Token 2: '():
' (ID: 8595)
  → Token d'amorce (pas de prédiction)

Token 3: '   ' (ID: 271)
  Prédit: '\'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\' → logprob: -0.35815900564193726
    2. '(' → logprob: -1.858159065246582
    3. '   ' → logprob: -3.108159065246582
    4. '\n' → logprob: -3.108159065246582
    5. ''' → logprob: -4.608159065246582
    6. ' 
' → logprob: -4.733159065246582
    7. ' ' → logprob: -4.733159065246582
    8. '    
' → logprob: -4.983159065246582
    9. '```' → logprob: -5.483159065246582
    10. ' return' → logprob: -6.358159065246582

Token 4: ' N' (ID: 478)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.8913612365722656
    2. '   ' → logprob: -1.0163612365722656
    3. 'pass' → logprob: -1.7663612365722656
    4. 'return' → logprob: -3.2663612365722656
    5. '```' → logprob: -5.141361236572266
    6. '#' → logprob: -6.016361236572266
    7. ' pass' → logprob: -6.016361236572266
    8. '    ' → logprob: -6.266361236572266
    9. '\' → logprob: -6.516361236572266
    10. '    
' → logprob: -7.016361236572266

Token 5: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5276263356208801
    2. ' =' → logprob: -1.1526262760162354
    3. '_' → logprob: -2.9026262760162354
    4. ',' → logprob: -4.6526265144348145
    5. ')' → logprob: -4.7776265144348145
    6. ' ' → logprob: -4.9026265144348145
    7. '.' → logprob: -5.4026265144348145
    8. '   ' → logprob: -5.5276265144348145
    9. '  ' → logprob: -6.7776265144348145
    10. '[' → logprob: -7.0276265144348145

Token 6: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.056584883481264114
    2. ' ' → logprob: -3.0565848350524902
    3. 'int' → logprob: -5.05658483505249
    4. '10' → logprob: -6.68158483505249
    5. ' input' → logprob: -8.931585311889648
    6. '5' → logprob: -9.681585311889648
    7. '20' → logprob: -10.056585311889648
    8. '0' → logprob: -10.431585311889648
    9. '=int' → logprob: -11.431585311889648
    10. '40' → logprob: -11.556585311889648

Token 7: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.009632955305278301
    2. '(input' → logprob: -4.7596330642700195
    3. '('' → logprob: -7.1346330642700195
    4. ' (' → logprob: -9.75963306427002
    5. '()' → logprob: -9.75963306427002
    6. 'input' → logprob: -10.63463306427002
    7. '("' → logprob: -10.88463306427002
    8. '(N' → logprob: -11.13463306427002
    9. ''' → logprob: -11.38463306427002
    10. '(
' → logprob: -11.63463306427002

Token 8: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1523105651140213
    2. ')' → logprob: -2.402310609817505
    3. '()' → logprob: -3.277310609817505
    4. '())' → logprob: -4.527310371398926
    5. '))' → logprob: -7.027310371398926
    6. '(
' → logprob: -7.777310371398926
    7. '('' → logprob: -8.527310371398926
    8. '()))' → logprob: -8.777310371398926
    9. '(""))' → logprob: -9.027310371398926
    10. '```' → logprob: -9.652310371398926

Token 9: '   ' (ID: 271)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.9784807562828064
    2. '\' → logprob: -1.7284808158874512
    3. '   ' → logprob: -1.9784808158874512
    4. '    
' → logprob: -2.228480815887451
    5. '
' → logprob: -3.353480815887451
    6. 'for' → logprob: -3.353480815887451
    7. '```' → logprob: -3.853480815887451
    8. ')' → logprob: -4.103480815887451
    9. '  
' → logprob: -4.353480815887451
    10. ' 
' → logprob: -4.478480815887451

Token 10: ' A' (ID: 355)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.2784596681594849
    2. '\n' → logprob: -1.7784596681594849
    3. '   ' → logprob: -2.1534595489501953
    4. '\' → logprob: -2.5284595489501953
    5. ' for' → logprob: -2.5284595489501953
    6. ' ' → logprob: -3.2784595489501953
    7. 'i' → logprob: -3.5284595489501953
    8. '`' → logprob: -3.5284595489501953
    9. '    
' → logprob: -3.6534595489501953
    10. 'if' → logprob: -4.028459548950195

Token 11: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.001112116384319961
    2. '[]' → logprob: -7.62611198425293
    3. '[:]' → logprob: -8.75111198425293
    4. '.' → logprob: -9.12611198425293
    5. '=' → logprob: -9.25111198425293
    6. '[i' → logprob: -9.87611198425293
    7. ')' → logprob: -10.00111198425293
    8. ' =' → logprob: -10.00111198425293
    9. '_' → logprob: -11.00111198425293
    10. '\[' → logprob: -11.25111198425293

Token 12: ' list' (ID: 1562)
  Prédit: ' list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.03882315754890442
    2. 'list' → logprob: -3.288823127746582
    3. ' [' → logprob: -7.413823127746582
    4. ' []' → logprob: -9.663823127746582
    5. ' input' → logprob: -9.788823127746582
    6. 'input' → logprob: -10.913823127746582
    7. '[list' → logprob: -11.038823127746582
    8. '[input' → logprob: -11.788823127746582
    9. '[' → logprob: -11.913823127746582
    10. '[]' → logprob: -12.038823127746582

Token 13: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.006254634819924831
    2. '(range' → logprob: -5.50625467300415
    3. '(input' → logprob: -6.50625467300415
    4. '(int' → logprob: -7.75625467300415
    5. '()' → logprob: -10.131254196166992
    6. '(eval' → logprob: -10.256254196166992
    7. '(map' → logprob: -10.506254196166992
    8. '(
' → logprob: -11.131254196166992
    9. '(

' → logprob: -11.131254196166992
    10. '(np' → logprob: -11.881254196166992

Token 14: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.3038277328014374
    2. '(' → logprob: -1.4288277626037598
    3. '(str' → logprob: -4.05382776260376
    4. '(lambda' → logprob: -5.67882776260376
    5. '(input' → logprob: -6.92882776260376
    6. ')' → logprob: -8.678827285766602
    7. 'int' → logprob: -9.053827285766602
    8. '(
' → logprob: -9.553827285766602
    9. '```' → logprob: -9.553827285766602
    10. '(eval' → logprob: -10.053827285766602

Token 15: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.19109557569026947
    2. ',input' → logprob: -2.3160955905914307
    3. ',' → logprob: -2.8160955905914307
    4. '(' → logprob: -4.441095352172852
    5. '(int' → logprob: -6.941095352172852
    6. ' (' → logprob: -6.941095352172852
    7. '=input' → logprob: -7.941095352172852
    8. ' ,' → logprob: -8.066095352172852
    9. 'input' → logprob: -8.191095352172852
    10. ')' → logprob: -8.691095352172852

Token 16: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.16026079654693604
    2. ' input' → logprob: -1.910260796546936
    3. '(input' → logprob: -10.410261154174805
    4. ')' → logprob: -12.910261154174805
    5. ',input' → logprob: -13.035261154174805
    6. '=input' → logprob: -14.410261154174805
    7. '	input' → logprob: -14.785261154174805
    8. ' ' → logprob: -15.160261154174805
    9. '<input' → logprob: -15.660261154174805
    10. '   ' → logprob: -15.910261154174805

Token 17: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.7582187056541443
    2. '()))' → logprob: -0.8832187056541443
    3. '()' → logprob: -2.633218765258789
    4. '())' → logprob: -3.133218765258789
    5. '()));' → logprob: -6.633218765258789
    6. '(' → logprob: -7.508218765258789
    7. '())))' → logprob: -8.133218765258789
    8. '))' → logprob: -9.008218765258789
    9. '()>' → logprob: -9.258218765258789
    10. ')' → logprob: -9.633218765258789

Token 18: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00016110755677800626
    2. 'strip' → logprob: -8.750161170959473
    3. 'rstrip' → logprob: -13.000161170959473
    4. ' split' → logprob: -15.500161170959473
    5. '(split' → logprob: -16.250160217285156
    6. 'spl' → logprob: -17.375160217285156
    7. ')' → logprob: -18.000160217285156
    8. 'sp' → logprob: -18.750160217285156
    9. 's' → logprob: -19.000160217285156
    10. '.split' → logprob: -20.875160217285156

Token 19: '()))
' (ID: 24521)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.2104642689228058
    2. ')' → logprob: -2.0854642391204834
    3. '()))' → logprob: -2.8354642391204834
    4. '()' → logprob: -5.8354644775390625
    5. '())' → logprob: -6.4604644775390625
    6. '(' → logprob: -6.5854644775390625
    7. ')))' → logprob: -6.9604644775390625
    8. '())))' → logprob: -11.210464477539062
    9. ''))' → logprob: -11.835464477539062
    10. '),' → logprob: -13.335464477539062

Token 20: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16111093759536743
    2. '```' → logprob: -2.9111108779907227
    3. ')' → logprob: -3.1611108779907227
    4. '    
' → logprob: -4.036110877990723
    5. '
' → logprob: -4.036110877990723
    6. '`' → logprob: -6.036110877990723
    7. 'for' → logprob: -6.161110877990723
    8. ' ' → logprob: -6.411110877990723
    9. ' for' → logprob: -6.786110877990723
    10. '#' → logprob: -6.786110877990723

Token 21: ' A' (ID: 355)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8075173497200012
    2. 'for' → logprob: -1.5575172901153564
    3. ')' → logprob: -2.8075172901153564
    4. 'i' → logprob: -3.0575172901153564
    5. '```' → logprob: -3.1825172901153564
    6. ' for' → logprob: -3.1825172901153564
    7. ' ' → logprob: -3.5575172901153564
    8. 'n' → logprob: -4.0575175285339355
    9. 'r' → logprob: -4.1825175285339355
    10. '    
' → logprob: -4.1825175285339355

Token 22: '.sort' (ID: 19551)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.11452928185462952
    2. '.' → logprob: -2.3645293712615967
    3. '<|end|>' → logprob: -5.114529132843018
    4. '[:]' → logprob: -5.989529132843018
    5. ')' → logprob: -6.239529132843018
    6. '[]' → logprob: -7.239529132843018
    7. '\[' → logprob: -7.364529132843018
    8. '```' → logprob: -7.489529132843018
    9. '.sort' → logprob: -7.489529132843018
    10. '[::-' → logprob: -7.739529132843018

Token 23: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.42886897921562195
    2. '(' → logprob: -1.0538690090179443
    3. '()`' → logprob: -10.303869247436523
    4. '```' → logprob: -10.428869247436523
    5. '().' → logprob: -11.303869247436523
    6. '(`' → logprob: -11.678869247436523
    7. '`()' → logprob: -11.803869247436523
    8. ')' → logprob: -11.803869247436523
    9. '(.)' → logprob: -12.053869247436523
    10. '())' → logprob: -12.178869247436523

Token 24: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8073641657829285
    2. '```' → logprob: -1.0573642253875732
    3. '    
' → logprob: -3.0573642253875732
    4. '\' → logprob: -3.0573642253875732
    5. '\n' → logprob: -3.3073642253875732
    6. '
' → logprob: -3.8073642253875732
    7. '`' → logprob: -4.307363986968994
    8. '[' → logprob: -4.682363986968994
    9. '``' → logprob: -4.807363986968994
    10. ' 
' → logprob: -5.682363986968994

Token 25: ' res' (ID: 694)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.5207157135009766
    2. 'for' → logprob: -1.8957157135009766
    3. '```' → logprob: -2.6457157135009766
    4. '   ' → logprob: -3.5207157135009766
    5. 'n' → logprob: -3.6457157135009766
    6. ' for' → logprob: -3.6457157135009766
    7. '`' → logprob: -3.6457157135009766
    8. '\n' → logprob: -4.395715713500977
    9. 'if' → logprob: -4.520715713500977
    10. '\' → logprob: -4.520715713500977

Token 26: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.03955449163913727
    2. '=' → logprob: -3.9145545959472656
    3. ' ' → logprob: -5.039554595947266
    4. ' +=' → logprob: -5.539554595947266
    5. '_' → logprob: -5.664554595947266
    6. '[' → logprob: -5.914554595947266
    7. '[:]' → logprob: -6.789554595947266
    8. '  ' → logprob: -7.414554595947266
    9. '[]' → logprob: -9.164554595947266
    10. ')' → logprob: -9.664554595947266

Token 27: ' "' (ID: 392)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.49348267912864685
    2. ' ' → logprob: -0.9934827089309692
    3. ' A' → logprob: -4.11848258972168
    4. 'A' → logprob: -6.11848258972168
    5. ' []' → logprob: -7.74348258972168
    6. '[]' → logprob: -9.36848258972168
    7. ' float' → logprob: -10.11848258972168
    8. '1' → logprob: -10.11848258972168
    9. '10' → logprob: -10.74348258972168
    10. ' None' → logprob: -10.86848258972168

Token 28: 'YES' (ID: 31958)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.34729158878326416
    2. '0' → logprob: -2.3472914695739746
    3. '-' → logprob: -2.9722914695739746
    4. 'NO' → logprob: -3.7222914695739746
    5. '"A' → logprob: -3.7222914695739746
    6. 'No' → logprob: -3.8472914695739746
    7. 'YES' → logprob: -3.9722914695739746
    8. '1' → logprob: -4.597291469573975
    9. 'Yes' → logprob: -4.972291469573975
    10. '"No' → logprob: -5.347291469573975

Token 29: '"
' (ID: 1092)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.28442084789276123
    2. '
' → logprob: -2.159420967102051
    3. '<|end|>' → logprob: -3.034420967102051
    4. ' if' → logprob: -3.659420967102051
    5. 'if' → logprob: -3.909420967102051
    6. '   ' → logprob: -4.659420967102051
    7. '<|end|>' → logprob: -4.909420967102051
    8. ')' → logprob: -5.034420967102051
    9. ' for' → logprob: -5.159420967102051
    10. 'for' → logprob: -5.909420967102051

Token 30: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2198815941810608
    2. '    
' → logprob: -2.594881534576416
    3. '\n' → logprob: -3.094881534576416
    4. '
' → logprob: -3.469881534576416
    5. '<|end|>' → logprob: -3.594881534576416
    6. ')' → logprob: -5.844881534576416
    7. ',' → logprob: -5.969881534576416
    8. 'n' → logprob: -6.094881534576416
    9. '' → logprob: -6.469881534576416
    10. '\' → logprob: -6.594881534576416

Token 31: ' for' (ID: 395)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.15763060748577118
    2. '   ' → logprob: -2.782630681991577
    3. '```' → logprob: -3.282630681991577
    4. '
' → logprob: -3.407630681991577
    5. '\' → logprob: -5.532630443572998
    6. '    
' → logprob: -5.782630443572998
    7. 'for' (adapté à ' for') → logprob: -6.282630443572998
    8. ' for' → logprob: -6.657630443572998
    9. 'n' → logprob: -7.157630443572998
    10. '<|end|>' → logprob: -7.657630443572998

Token 32: ' i' (ID: 575)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5254285335540771
    2. ' i' → logprob: -0.9004285335540771
    3. 'i' → logprob: -6.900428771972656
    4. '_' → logprob: -7.025428771972656
    5. ' _' → logprob: -8.275428771972656
    6. '  ' → logprob: -9.900428771972656
    7. ' ‌' → logprob: -10.525428771972656
    8. ' A' → logprob: -10.650428771972656
    9. ' a' → logprob: -11.275428771972656
    10. ' x' → logprob: -11.525428771972656

Token 33: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.04805101826786995
    2. ' ' → logprob: -3.298051118850708
    3. 'in' → logprob: -4.798050880432129
    4. '  ' → logprob: -6.673050880432129
    5. ' i' → logprob: -8.423050880432129
    6. 'n' → logprob: -10.298050880432129
    7. '   ' → logprob: -10.548050880432129
    8. '+' → logprob: -10.673050880432129
    9. '_' → logprob: -10.673050880432129
    10. '	in' → logprob: -10.673050880432129

Token 34: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.008743513375520706
    2. 'range' → logprob: -4.7587432861328125
    3. ' ' → logprob: -9.008743286132812
    4. '	range' → logprob: -13.133743286132812
    5. ' xrange' → logprob: -13.758743286132812
    6. '  ' → logprob: -13.883743286132812
    7. ' A' → logprob: -13.883743286132812
    8. ' ran' → logprob: -14.133743286132812
    9. '   ' → logprob: -15.383743286132812
    10. ' r' → logprob: -15.383743286132812

Token 35: '(N' (ID: 10564)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.07458445429801941
    2. '(len' → logprob: -2.949584484100342
    3. '(N' → logprob: -3.949584484100342
    4. '(n' → logprob: -8.824584007263184
    5. ' (' → logprob: -9.449584007263184
    6. '(A' → logprob: -12.324584007263184
    7. '(
' → logprob: -12.449584007263184
    8. ' ' → logprob: -12.574584007263184
    9. '(length' → logprob: -13.574584007263184
    10. '(

' → logprob: -13.574584007263184

Token 36: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.3729684054851532
    2. '):' → logprob: -1.4979684352874756
    3. ' -' → logprob: -2.6229684352874756
    4. ' ):' → logprob: -4.2479681968688965
    5. ')' → logprob: -7.8729681968688965
    6. ' ' → logprob: -8.247968673706055
    7. '):
' → logprob: -9.372968673706055
    8. '   ' → logprob: -10.372968673706055
    9. ' )' → logprob: -10.497968673706055
    10. '1' → logprob: -11.122968673706055

Token 37: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.2812267541885376
    2. ' ' → logprob: -1.4062267541885376
    3. '2' → logprob: -9.781227111816406
    4. '  ' → logprob: -12.343727111816406
    5. '3' → logprob: -12.406227111816406
    6. '-' → logprob: -12.781227111816406
    7. ')' → logprob: -12.843727111816406
    8. '   ' → logprob: -13.656227111816406
    9. ' ' → logprob: -14.531227111816406
    10. '4' → logprob: -14.843727111816406

Token 38: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00022249009634833783
    2. ' ' → logprob: -8.500222206115723
    3. '2' → logprob: -11.125222206115723
    4. '   ' → logprob: -13.500222206115723
    5. '  ' → logprob: -14.125222206115723
    6. '3' → logprob: -14.750222206115723
    7. '-' → logprob: -15.062722206115723
    8. ')' → logprob: -15.187722206115723
    9. '    ' → logprob: -16.12522315979004
    10. '...' → logprob: -16.18772315979004

Token 39: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.05102936178445816
    2. '):
' → logprob: -3.6760294437408447
    3. ':' → logprob: -4.051029205322266
    4. ')' → logprob: -5.551029205322266
    5. ' ):' → logprob: -6.301029205322266
    6. ',' → logprob: -7.301029205322266
    7. ' :' → logprob: -8.676029205322266
    8. '   ' → logprob: -9.176029205322266
    9. ' ):
' → logprob: -9.176029205322266
    10. ' ' → logprob: -9.801029205322266

Token 40: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.054087087512016296
    2. '   ' → logprob: -3.1790871620178223
    3. ':' → logprob: -4.679087162017822
    4. '    ' → logprob: -7.554087162017822
    5. ' ' → logprob: -8.179086685180664
    6. ' if' → logprob: -8.304086685180664
    7. '<|end|>' → logprob: -8.804086685180664
    8. '     ' → logprob: -9.429086685180664
    9. '```' → logprob: -9.554086685180664
    10. ',' → logprob: -9.679086685180664

Token 41: ' if' (ID: 538)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.9644165635108948
    2. ' if' → logprob: -0.9644165635108948
    3. '   ' → logprob: -1.58941650390625
    4. 'if' (adapté à ' if') → logprob: -3.58941650390625
    5. ' ' → logprob: -6.21441650390625
    6. '```' → logprob: -6.21441650390625
    7. '    ' → logprob: -7.71441650390625
    8. ' 
' → logprob: -8.21441650390625
    9. '\n' → logprob: -8.46441650390625
    10. '\' → logprob: -8.96441650390625

Token 42: ' A' (ID: 355)
  Prédit: ' A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.18628141283988953
    2. 'A' → logprob: -1.811281442642212
    3. ' abs' → logprob: -5.436281204223633
    4. ' ' → logprob: -7.061281204223633
    5. 'abs' → logprob: -7.311281204223633
    6. '   ' → logprob: -7.436281204223633
    7. '    ' → logprob: -10.936281204223633
    8. ' not' → logprob: -11.936281204223633
    9. '	A' → logprob: -11.936281204223633
    10. '  ' → logprob: -12.186281204223633

Token 43: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.0001801801408873871
    2. '[' → logprob: -8.6251802444458
    3. '[j' → logprob: -16.000179290771484
    4. ' [' → logprob: -16.000179290771484
    5. '[n' → logprob: -16.500179290771484
    6. '[
' → logprob: -17.000179290771484
    7. '[-' → logprob: -17.125179290771484
    8. '[index' → logprob: -17.250179290771484
    9. '[a' → logprob: -17.625179290771484
    10. '[I' → logprob: -17.625179290771484

Token 44: ']' (ID: 60)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.6175592541694641
    2. '>' → logprob: -1.4925591945648193
    3. '==' → logprob: -1.8675591945648193
    4. '!=' → logprob: -3.4925591945648193
    5. ' ==' → logprob: -3.8675591945648193
    6. ' +' → logprob: -4.367559432983398
    7. ' >' → logprob: -4.742559432983398
    8. ' !=' → logprob: -5.867559432983398
    9. ']' → logprob: -6.492559432983398
    10. '>=' → logprob: -6.742559432983398

Token 45: ' ==' (ID: 951)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.6092572808265686
    2. '==' → logprob: -0.8592572808265686
    3. ' ==' → logprob: -4.234257221221924
    4. '>' → logprob: -4.734257221221924
    5. ' +' → logprob: -5.484257221221924
    6. '!=' → logprob: -5.484257221221924
    7. '>=' → logprob: -8.109257698059082
    8. '<' → logprob: -8.109257698059082
    9. ' >' → logprob: -8.734257698059082
    10. ' !=' → logprob: -9.359257698059082

Token 46: ' A' (ID: 355)
  Prédit: ' A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.3490608334541321
    2. 'A' → logprob: -1.2240607738494873
    3. ' ' → logprob: -7.474061012268066
    4. '   ' → logprob: -10.974061012268066
    5. '  ' → logprob: -11.349061012268066
    6. '	A' → logprob: -11.474061012268066
    7. '    ' → logprob: -12.349061012268066
    8. ' ' → logprob: -13.974061012268066
    9. '0' → logprob: -14.724061012268066
    10. '>A' → logprob: -14.724061012268066

Token 47: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.0011982052819803357
    2. '[' → logprob: -6.7511982917785645
    3. '+' → logprob: -11.126197814941406
    4. ' [' → logprob: -12.251197814941406
    5. '[I' → logprob: -12.876197814941406
    6. '[
' → logprob: -13.501197814941406
    7. '```' → logprob: -14.126197814941406
    8. '[A' → logprob: -14.501197814941406
    9. '   ' → logprob: -14.626197814941406
    10. '[j' → logprob: -14.751197814941406

Token 48: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.0012335648061707616
    2. ' +' → logprob: -6.8762335777282715
    3. ']' → logprob: -9.126233100891113
    4. ']+' → logprob: -10.251233100891113
    5. '   ' → logprob: -10.626233100891113
    6. '-' → logprob: -11.626233100891113
    7. '1' → logprob: -12.376233100891113
    8. ' ' → logprob: -12.626233100891113
    9. '[i' → logprob: -12.751233100891113
    10. '+i' → logprob: -12.751233100891113

Token 49: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0027676676400005817
    2. ' ' → logprob: -6.002767562866211
    3. ']' → logprob: -8.877767562866211
    4. '0' → logprob: -9.127767562866211
    5. '   ' → logprob: -11.127767562866211
    6. '```' → logprob: -12.002767562866211
    7. '  ' → logprob: -12.377767562866211
    8. '-' → logprob: -12.377767562866211
    9. ' ]' → logprob: -12.752767562866211
    10. 'i' → logprob: -12.877767562866211

Token 50: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0002559753193054348
    2. ' ' → logprob: -9.250255584716797
    3. '0' → logprob: -9.375255584716797
    4. 'i' → logprob: -10.375255584716797
    5. ']' → logprob: -10.750255584716797
    6. ']:' → logprob: -11.500255584716797
    7. '-' → logprob: -11.875255584716797
    8. '   ' → logprob: -13.500255584716797
    9. '```' → logprob: -14.125255584716797
    10. '2' → logprob: -14.625255584716797

Token 51: ']:
' (ID: 22152)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.030638640746474266
    2. '):' → logprob: -3.9056386947631836
    3. ' :' → logprob: -4.780638694763184
    4. ' ):' → logprob: -7.655638694763184
    5. '-' → logprob: -8.530638694763184
    6. ')' → logprob: -8.655638694763184
    7. ':
' → logprob: -8.905638694763184
    8. ' or' → logprob: -8.905638694763184
    9. ']:' → logprob: -9.030638694763184
    10. '+:' → logprob: -9.280638694763184

Token 52: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.46209412813186646
    2. ':' → logprob: -1.7120940685272217
    3. '       ' → logprob: -1.7120940685272217
    4. ':
' → logprob: -6.212094306945801
    5. ' :' → logprob: -6.337094306945801
    6. ' or' → logprob: -6.462094306945801
    7. ' and' → logprob: -6.712094306945801
    8. '   ' → logprob: -7.587094306945801
    9. '\' → logprob: -8.0870943069458
    10. '\n' → logprob: -8.2120943069458

Token 53: ' res' (ID: 694)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' (adapté à ' res') → logprob: -0.19715771079063416
    2. '           ' → logprob: -2.197157621383667
    3. '       ' → logprob: -3.322157621383667
    4. '               ' → logprob: -3.572157621383667
    5. ' res' → logprob: -5.947157859802246
    6. '   ' → logprob: -7.322157859802246
    7. '```' → logprob: -8.447157859802246
    8. ' ' → logprob: -10.072157859802246
    9. '
' → logprob: -10.197157859802246
    10. '	res' → logprob: -11.197157859802246

Token 54: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.01816621422767639
    2. '=' → logprob: -4.0181660652160645
    3. ' ' → logprob: -11.518166542053223
    4. ' +=' → logprob: -12.143166542053223
    5. '+=' → logprob: -15.393166542053223
    6. ' ="' → logprob: -15.393166542053223
    7. ' ==' → logprob: -15.768166542053223
    8. ' ='' → logprob: -16.518165588378906
    9. ' *=' → logprob: -16.768165588378906
    10. '```' → logprob: -16.893165588378906

Token 55: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.002060330705717206
    2. ' "' → logprob: -6.502060413360596
    3. '"No' → logprob: -7.627060413360596
    4. ' ' → logprob: -10.002059936523438
    5. '"N' → logprob: -11.002059936523438
    6. ''' → logprob: -12.627059936523438
    7. '   ' → logprob: -13.752059936523438
    8. '""' → logprob: -13.877059936523438
    9. '"D' → logprob: -14.127059936523438
    10. ' NO' → logprob: -15.002059936523438

Token 56: 'NO' (ID: 14695)
  Prédit: 'NO'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'NO' → logprob: -0.0002625278721097857
    2. 'N' → logprob: -8.750262260437012
    3. '"' → logprob: -9.875262260437012
    4. ' NO' → logprob: -11.000262260437012
    5. '"No' → logprob: -11.500262260437012
    6. 'No' → logprob: -11.625262260437012
    7. 'YES' → logprob: -12.250262260437012
    8. ' ' → logprob: -12.625262260437012
    9. '"N' → logprob: -13.000262260437012
    10. 'NA' → logprob: -13.250262260437012

Token 57: '"
' (ID: 1092)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.009136472828686237
    2. '"' → logprob: -5.38413667678833
    3. '               ' → logprob: -5.88413667678833
    4. '       ' → logprob: -6.75913667678833
    5. ')' → logprob: -8.384136199951172
    6. '   ' → logprob: -9.384136199951172
    7. '")' → logprob: -9.384136199951172
    8. '"
' → logprob: -10.134136199951172
    9. '```' → logprob: -10.759136199951172
    10. '                   ' → logprob: -11.009136199951172

Token 58: '   ' (ID: 271)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.13151142001152039
    2. '   ' → logprob: -2.6315114498138428
    3. '       ' → logprob: -3.1315114498138428
    4. '
' → logprob: -5.131511211395264
    5. '    
' → logprob: -7.631511211395264
    6. '\n' → logprob: -8.631511688232422
    7. '    ' → logprob: -8.756511688232422
    8. '            
' → logprob: -8.756511688232422
    9. '```' → logprob: -9.006511688232422
    10. '<|end|>' → logprob: -9.006511688232422

Token 59: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06000501289963722
    2. 'print' (adapté à ' print') → logprob: -3.185004949569702
    3. '       ' → logprob: -4.935005187988281
    4. '           ' → logprob: -5.185005187988281
    5. '    
' → logprob: -6.560005187988281
    6. '
' → logprob: -6.810005187988281
    7. ' print' → logprob: -7.060005187988281
    8. '```' → logprob: -8.310005187988281
    9. '\n' → logprob: -8.935005187988281
    10. '            
' → logprob: -9.185005187988281

Token 60: '(res' (ID: 8331)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.023411085829138756
    2. '(res' → logprob: -3.7734110355377197
    3. '("("' → logprob: -8.89841079711914
    4. '('' → logprob: -11.14841079711914
    5. '()' → logprob: -11.52341079711914
    6. '(
' → logprob: -13.39841079711914
    7. '(f' → logprob: -13.77341079711914
    8. '(

' → logprob: -14.64841079711914
    9. 'res' → logprob: -15.02341079711914
    10. ' (' → logprob: -15.14841079711914

Token 61: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -7.896309739408025e-07
    2. ')
' → logprob: -15.125000953674316
    3. '`)' → logprob: -15.875000953674316
    4. ' )' → logprob: -17.0
    5. '()' → logprob: -17.25
    6. '))' → logprob: -17.25
    7. ')`' → logprob: -17.5
    8. '```' → logprob: -17.75
    9. '')' → logprob: -18.0
    10. '   ' → logprob: -18.25

Token 62: 'if' (ID: 366)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 63: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.0007004032959230244
    2. ' ' → logprob: -7.6257004737854
    3. '__' → logprob: -8.625699996948242
    4. ' ' → logprob: -11.125699996948242
    5. ' ​' → logprob: -11.875699996948242
    6. ' _' → logprob: -12.875699996948242
    7. '_' → logprob: -13.000699996948242
    8. ' ﻿' → logprob: -13.000699996948242
    9. ' ‌' → logprob: -13.500699996948242
    10. ' ' → logprob: -14.500699996948242

Token 64: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.029894080013036728
    2. ' ==' → logprob: -4.15489387512207
    3. ' __' → logprob: -4.40489387512207
    4. '__.__' → logprob: -7.90489387512207
    5. '_' → logprob: -8.15489387512207
    6. ' .' → logprob: -8.40489387512207
    7. '==' → logprob: -8.65489387512207
    8. '.__' → logprob: -8.90489387512207
    9. '.' → logprob: -9.27989387512207
    10. '__.' → logprob: -9.77989387512207

Token 65: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -5.526570384972729e-05
    2. '__.__' → logprob: -10.750055313110352
    3. '==' → logprob: -11.125055313110352
    4. '___' → logprob: -12.125055313110352
    5. '_' → logprob: -12.375055313110352
    6. '__["' → logprob: -13.125055313110352
    7. '__[' → logprob: -13.125055313110352
    8. '____' → logprob: -13.750055313110352
    9. '__.' → logprob: -13.750055313110352
    10. '__*/' → logprob: -14.125055313110352

Token 66: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.09004995971918106
    2. '.' → logprob: -3.590049982070923
    3. '==' → logprob: -3.590049982070923
    4. '<|end|>' → logprob: -4.215049743652344
    5. '[' → logprob: -5.090049743652344
    6. '__' → logprob: -5.715049743652344
    7. '.__' → logprob: -6.340049743652344
    8. ' .' → logprob: -6.340049743652344
    9. '["' → logprob: -7.590049743652344
    10. '```' → logprob: -7.840049743652344

Token 67: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.2528073191642761
    2. ''' → logprob: -1.502807378768921
    3. ' "' → logprob: -7.752807140350342
    4. ' '' → logprob: -7.752807140350342
    5. '__' → logprob: -11.6278076171875
    6. ' "__' → logprob: -13.2528076171875
    7. ' __' → logprob: -13.2528076171875
    8. ' ' → logprob: -13.2528076171875
    9. ' '__' → logprob: -14.0028076171875
    10. '_' → logprob: -14.1278076171875

Token 68: 'main' (ID: 7731)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.5767512917518616
    2. 'main' → logprob: -0.8267512917518616
    3. 'name' → logprob: -8.076751708984375
    4. '_main' → logprob: -8.701751708984375
    5. '__":
' → logprob: -9.576751708984375
    6. 'python' → logprob: -10.076751708984375
    7. 'py' → logprob: -10.201751708984375
    8. '___' → logprob: -10.576751708984375
    9. '__
' → logprob: -10.701751708984375
    10. '```' → logprob: -10.826751708984375

Token 69: '__":
' (ID: 49892)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.12695971131324768
    2. '__":
' → logprob: -2.126959800720215
    3. '__["' → logprob: -11.626959800720215
    4. '__.' → logprob: -11.751959800720215
    5. '__':
' → logprob: -12.626959800720215
    6. '_' → logprob: -12.626959800720215
    7. '__("' → logprob: -12.751959800720215
    8. '__.__' → logprob: -13.001959800720215
    9. '__:' → logprob: -13.126959800720215
    10. '__",' → logprob: -14.751959800720215

Token 70: '   ' (ID: 271)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.0004297155828680843
    2. '	main' → logprob: -8.5004301071167
    3. 'main' → logprob: -8.8754301071167
    4. '   ' → logprob: -10.2504301071167
    5. ' ' → logprob: -10.6254301071167
    6. ' ' → logprob: -11.3754301071167
    7. ' 
' → logprob: -12.3754301071167
    8. '<|end|>' → logprob: -12.5004301071167
    9. '(main' → logprob: -13.1254301071167
    10. '_main' → logprob: -13.8754301071167

Token 71: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' (adapté à ' main') → logprob: -0.12692926824092865
    2. ' main' → logprob: -2.12692928314209
    3. '	main' → logprob: -13.75192928314209
    4. 'm' → logprob: -17.251928329467773
    5. '(main' → logprob: -17.501928329467773
    6. '   ' → logprob: -17.751928329467773
    7. '.main' → logprob: -18.126928329467773
    8. '```' → logprob: -18.376928329467773
    9. ' ' → logprob: -18.501928329467773
    10. 'ma' → logprob: -18.501928329467773

Token 72: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -1.27099974633893e-05
    2. '()`' → logprob: -12.250012397766113
    3. '(' → logprob: -12.875012397766113
    4. '()
' → logprob: -13.500012397766113
    5. ' ()' → logprob: -13.625012397766113
    6. '`()' → logprob: -14.125012397766113
    7. '()<' → logprob: -14.500012397766113
    8. '();' → logprob: -15.250012397766113
    9. '()]' → logprob: -15.750012397766113
    10. '```' → logprob: -15.750012397766113


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 70
Tokens correctement prédits (1ère position, stricte): 25
Tokens correctement prédits (1ère position, avec adaptation): 27
Tokens correctement prédits (top 10): 57
Précision stricte (1ère position): 35.71%
Précision adaptée (1ère position): 38.57%
Précision (top 10): 81.43%
================================================================================
