================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:06:54
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def getVal():
    return tuple(map(int,input().split()))
N,M = getVal()
from math import floor
x = M // N
flag = False; i = x
while i > 0:
    if not (M%i): print(i); flag=True; break
    i -= 1
if not flag:
    def p():pass
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' get' (ID: 717)
  → Token d'amorce (pas de prédiction)

Token 2: 'Val' (ID: 2863)
  → Token d'amorce (pas de prédiction)

Token 3: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.022586261853575706
    2. 'u' → logprob: -4.022586345672607
    3. 'ue' → logprob: -6.022586345672607
    4. 'a' → logprob: -7.147586345672607
    5. '(u' → logprob: -7.897586345672607
    6. '```' → logprob: -8.02258586883545
    7. '(a' → logprob: -8.39758586883545
    8. '(:' → logprob: -9.39758586883545
    9. '():' → logprob: -10.77258586883545
    10. 'def' → logprob: -10.77258586883545

Token 4: '   ' (ID: 271)
  Prédit: '\'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\' → logprob: -0.5548335909843445
    2. '\n' → logprob: -1.6798336505889893
    3. '(' → logprob: -2.5548336505889893
    4. '```' → logprob: -2.8048336505889893
    5. '   ' → logprob: -3.3048336505889893
    6. ':' → logprob: -3.9298336505889893
    7. '    
' → logprob: -4.55483341217041
    8. ' 
' → logprob: -4.92983341217041
    9. '    ' → logprob: -5.67983341217041
    10. ' ' → logprob: -5.92983341217041

Token 5: ' return' (ID: 622)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.29749155044555664
    2. ' ' → logprob: -2.1724915504455566
    3. '   ' → logprob: -2.5474915504455566
    4. '\n' → logprob: -4.422491550445557
    5. 'return' (adapté à ' return') → logprob: -4.422491550445557
    6. 'a' → logprob: -4.922491550445557
    7. '    ' → logprob: -4.922491550445557
    8. '\' → logprob: -5.547491550445557
    9. ' \' → logprob: -5.672491550445557
    10. '(' → logprob: -5.672491550445557

Token 6: ' tuple' (ID: 31311)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.022999461740255356
    2. '"' → logprob: -4.897999286651611
    3. ''' → logprob: -4.897999286651611
    4. ' None' → logprob: -5.772999286651611
    5. '    ' → logprob: -6.272999286651611
    6. '0' → logprob: -7.897999286651611
    7. '  ' → logprob: -7.897999286651611
    8. 'None' → logprob: -8.02299976348877
    9. '32' → logprob: -8.64799976348877
    10. '1' → logprob: -8.77299976348877

Token 7: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0011692718835547566
    2. '.' → logprob: -7.001169204711914
    3. '[' → logprob: -9.501169204711914
    4. 's' → logprob: -10.626169204711914
    5. '(
' → logprob: -10.751169204711914
    6. '((' → logprob: -10.751169204711914
    7. ')' → logprob: -10.876169204711914
    8. ' (' → logprob: -11.251169204711914
    9. '()' → logprob: -11.376169204711914
    10. '('' → logprob: -11.501169204711914

Token 8: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6086925864219666
    2. '(str' → logprob: -1.1086926460266113
    3. '(int' → logprob: -2.6086926460266113
    4. '(lambda' → logprob: -2.9836926460266113
    5. '<|end|>' → logprob: -8.483692169189453
    6. '(abs' → logprob: -8.608692169189453
    7. ')' → logprob: -8.733692169189453
    8. '(list' → logprob: -8.858692169189453
    9. '(eval' → logprob: -9.108692169189453
    10. '(len' → logprob: -9.233692169189453

Token 9: ',input' (ID: 123014)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.4071504473686218
    2. '(' → logprob: -1.2821505069732666
    3. ')' → logprob: -4.6571502685546875
    4. ',' → logprob: -4.7821502685546875
    5. '(user' → logprob: -5.0321502685546875
    6. '))' → logprob: -5.1571502685546875
    7. '(str' → logprob: -5.2821502685546875
    8. '(x' → logprob: -5.6571502685546875
    9. '('' → logprob: -6.0321502685546875
    10. ',input' → logprob: -6.5321502685546875

Token 10: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6868695020675659
    2. '()))' → logprob: -0.9368695020675659
    3. '('' → logprob: -3.3118696212768555
    4. '()' → logprob: -3.6868696212768555
    5. '())' → logprob: -4.5618696212768555
    6. '().' → logprob: -4.9368696212768555
    7. '()));' → logprob: -4.9368696212768555
    8. '(()' → logprob: -5.0618696212768555
    9. '())))' → logprob: -5.8118696212768555
    10. '(""))' → logprob: -5.8118696212768555

Token 11: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00043555660522542894
    2. 'strip' → logprob: -7.7504353523254395
    3. 'rstrip' → logprob: -12.625435829162598
    4. ' split' → logprob: -13.375435829162598
    5. '(split' → logprob: -17.00043487548828
    6. 'replace' → logprob: -17.37543487548828
    7. 'read' → logprob: -18.62543487548828
    8. 'spl' → logprob: -18.75043487548828
    9. '.split' → logprob: -19.87543487548828
    10. ')' → logprob: -19.87543487548828

Token 12: '()))
' (ID: 24521)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.7833602428436279
    2. '()))' → logprob: -0.7833602428436279
    3. '())))' → logprob: -3.033360242843628
    4. '()' → logprob: -3.908360242843628
    5. '(' → logprob: -4.908360481262207
    6. '('' → logprob: -5.283360481262207
    7. ')' → logprob: -5.908360481262207
    8. ')))' → logprob: -6.658360481262207
    9. '))' → logprob: -6.783360481262207
    10. '()));' → logprob: -9.408360481262207

Token 13: 'N' (ID: 45)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -1.2785192728042603
    2. '(' → logprob: -2.0285191535949707
    3. '
' → logprob: -2.0285191535949707
    4. '#' → logprob: -2.7785191535949707
    5. '<|end|>' → logprob: -2.7785191535949707
    6. '```' → logprob: -2.9035191535949707
    7. '\' → logprob: -2.9035191535949707
    8. ')' → logprob: -3.0285191535949707
    9. '' → logprob: -3.4035191535949707
    10. 'newline' → logprob: -3.9035191535949707

Token 14: ',M' (ID: 54127)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6406366229057312
    2. '[' → logprob: -1.265636682510376
    3. ' =' → logprob: -2.765636682510376
    4. '=' → logprob: -3.140636682510376
    5. '.' → logprob: -3.515636682510376
    6. ',' → logprob: -4.015636444091797
    7. '(' → logprob: -4.015636444091797
    8. ' )' → logprob: -5.015636444091797
    9. ' ' → logprob: -6.265636444091797
    10. '_' → logprob: -6.265636444091797

Token 15: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.12055717408657074
    2. ' =' → logprob: -2.4955570697784424
    3. ',' → logprob: -3.4955570697784424
    4. ')' → logprob: -7.8705573081970215
    5. '<|end|>' → logprob: -8.995556831359863
    6. ' ,' → logprob: -9.870556831359863
    7. '[' → logprob: -10.120556831359863
    8. '.' → logprob: -10.495556831359863
    9. ''' → logprob: -10.995556831359863
    10. ')=' → logprob: -11.245556831359863

Token 16: ' get' (ID: 717)
  Prédit: ' get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' get' → logprob: -0.252418577671051
    2. 'get' → logprob: -1.5024185180664062
    3. ' map' → logprob: -7.877418518066406
    4. 'map' → logprob: -9.127418518066406
    5. 'int' → logprob: -14.877418518066406
    6. ' input' → logprob: -15.002418518066406
    7. ' int' → logprob: -15.127418518066406
    8. ' ' → logprob: -15.752418518066406
    9. 'input' → logprob: -16.127418518066406
    10. '(get' → logprob: -16.252418518066406

Token 17: 'Val' (ID: 2863)
  Prédit: 'Val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Val' → logprob: -3.054500666621607e-06
    2. 'Va' → logprob: -13.62500286102295
    3. ' Val' → logprob: -14.25000286102295
    4. 'V' → logprob: -14.75000286102295
    5. 'val' → logprob: -14.87500286102295
    6. '_val' → logprob: -15.37500286102295
    7. 'Vel' → logprob: -16.500003814697266
    8. 'Var' → logprob: -17.375003814697266
    9. '(' → logprob: -17.750003814697266
    10. 'Vale' → logprob: -18.250003814697266

Token 18: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.01119176484644413
    2. '(' → logprob: -4.5111918449401855
    3. '`()' → logprob: -9.386191368103027
    4. '()(' → logprob: -10.386191368103027
    5. '```' → logprob: -11.886191368103027
    6. '()`' → logprob: -12.761191368103027
    7. ']()' → logprob: -13.386191368103027
    8. '|()
' → logprob: -13.511191368103027
    9. ' ()' → logprob: -13.636191368103027
    10. '()<' → logprob: -13.886191368103027

Token 19: 'from' (ID: 2845)
  Prédit: 'graph'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'graph' → logprob: -1.0135163068771362
    2. 'A' → logprob: -2.138516426086426
    3. 'a' → logprob: -2.263516426086426
    4. 'grid' → logprob: -2.763516426086426
    5. 'edges' → logprob: -3.388516426086426
    6. 'for' → logprob: -3.513516426086426
    7. 'data' → logprob: -3.638516426086426
    8. 'matrix' → logprob: -3.638516426086426
    9. 'd' → logprob: -3.763516426086426
    10. 'arr' → logprob: -3.888516426086426

Token 20: ' math' (ID: 13324)
  Prédit: ' collections'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' collections' → logprob: -0.27051621675491333
    2. ' itertools' → logprob: -1.8955161571502686
    3. ' sys' → logprob: -2.5205161571502686
    4. 'collections' → logprob: -5.895516395568848
    5. ' math' → logprob: -6.145516395568848
    6. '_' → logprob: -6.895516395568848
    7. ' typing' → logprob: -8.770516395568848
    8. 'sys' → logprob: -9.270516395568848
    9. ' ' → logprob: -9.395516395568848
    10. ' collection' → logprob: -10.395516395568848

Token 21: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.006766056176275015
    2. 'import' → logprob: -5.006765842437744
    3. '	import' → logprob: -10.881766319274902
    4. ' ' → logprob: -11.881766319274902
    5. ' importar' → logprob: -11.881766319274902
    6. ' impor' → logprob: -12.256766319274902
    7. '_import' → logprob: -12.506766319274902
    8. ' imports' → logprob: -13.006766319274902
    9. ' im' → logprob: -13.131766319274902
    10. ' itertools' → logprob: -13.381766319274902

Token 22: ' floor' (ID: 8350)
  Prédit: 'g'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'g' → logprob: -0.1451333910226822
    2. 'ceil' → logprob: -2.7701334953308105
    3. ' gcd' → logprob: -3.3951334953308105
    4. 'sqrt' → logprob: -4.2701334953308105
    5. 'comb' → logprob: -5.0201334953308105
    6. 'log' → logprob: -5.2701334953308105
    7. 'factor' → logprob: -5.2701334953308105
    8. 'inf' → logprob: -5.8951334953308105
    9. 'floor' → logprob: -6.2701334953308105
    10. ' ceil' → logprob: -6.7701334953308105

Token 23: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3190608620643616
    2. ',' → logprob: -1.3190608024597168
    3. 's' → logprob: -6.944060802459717
    4. ' (' → logprob: -7.194060802459717
    5. 'div' → logprob: -7.319060802459717
    6. '(s' → logprob: -7.569060802459717
    7. ' ,' → logprob: -7.694060802459717
    8. '```' → logprob: -8.069061279296875
    9. '((' → logprob: -8.194061279296875
    10. '(n' → logprob: -8.444061279296875

Token 24: 'x' (ID: 87)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1447647213935852
    2. ',' → logprob: -2.1447646617889404
    3. '(f' → logprob: -5.2697649002075195
    4. '(s' → logprob: -5.2697649002075195
    5. 's' → logprob: -6.6447649002075195
    6. '(n' → logprob: -7.3947649002075195
    7. '(N' → logprob: -7.5197649002075195
    8. '<|end|>' → logprob: -7.5197649002075195
    9. '(
' → logprob: -7.6447649002075195
    10. ')' → logprob: -7.8947649002075195

Token 25: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.9304772019386292
    2. ' =' → logprob: -0.9304772019386292
    3. '=' → logprob: -2.1804771423339844
    4. ',' → logprob: -2.9304771423339844
    5. '1' → logprob: -4.180477142333984
    6. ' ' → logprob: -4.555477142333984
    7. 's' → logprob: -5.430477142333984
    8. '/' → logprob: -6.180477142333984
    9. 'y' → logprob: -6.305477142333984
    10. '_i' → logprob: -6.555477142333984

Token 26: ' M' (ID: 391)
  Prédit: ' floor'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' floor' → logprob: -0.6602540016174316
    2. 'floor' → logprob: -1.0352540016174316
    3. ' M' → logprob: -2.7852540016174316
    4. 'M' → logprob: -3.4102540016174316
    5. ' N' → logprob: -4.160254001617432
    6. 'N' → logprob: -4.660254001617432
    7. ' (' → logprob: -5.660254001617432
    8. ' ' → logprob: -6.160254001617432
    9. '(M' → logprob: -7.535254001617432
    10. '(' → logprob: -7.660254001617432

Token 27: ' //' (ID: 602)
  Prédit: '/'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '/' → logprob: -0.3212068974971771
    2. ' /' → logprob: -1.3212069272994995
    3. '/N' → logprob: -5.321207046508789
    4. '**' → logprob: -7.071207046508789
    5. '/f' → logprob: -7.071207046508789
    6. '*' → logprob: -7.196207046508789
    7. ' *' → logprob: -8.821207046508789
    8. '/x' → logprob: -9.321207046508789
    9. ' ' → logprob: -9.321207046508789
    10. '/K' → logprob: -10.071207046508789

Token 28: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.019257700070738792
    2. '2' → logprob: -4.019257545471191
    3. '3' → logprob: -7.894257545471191
    4. '4' → logprob: -8.644257545471191
    5. '6' → logprob: -8.769257545471191
    6. '10' → logprob: -9.019257545471191
    7. '9' → logprob: -9.894257545471191
    8. ' N' → logprob: -10.019257545471191
    9. '5' → logprob: -10.394257545471191
    10. '7' → logprob: -10.644257545471191

Token 29: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 30: 'flag' (ID: 17665)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.13343849778175354
    2. '
' → logprob: -3.3834385871887207
    3. '*' → logprob: -3.6334385871887207
    4. '<|end|>' → logprob: -3.7584385871887207
    5. 'x' → logprob: -4.133438587188721
    6. ' ' → logprob: -4.883438587188721
    7. '%' → logprob: -5.008438587188721
    8. '#' → logprob: -6.383438587188721
    9. '+
' → logprob: -6.633438587188721
    10. ')' → logprob: -6.633438587188721

Token 31: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.05773550644516945
    2. '=' → logprob: -2.9327354431152344
    3. '_' → logprob: -5.932735443115234
    4. ' ' → logprob: -9.307735443115234
    5. '=False' → logprob: -10.057735443115234
    6. '_=' → logprob: -10.682735443115234
    7. 's' → logprob: -11.182735443115234
    8. '=True' → logprob: -11.807735443115234
    9. ',' → logprob: -12.182735443115234
    10. ' _' → logprob: -12.307735443115234

Token 32: ' False' (ID: 7983)
  Prédit: ' True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' True' → logprob: -0.955965518951416
    2. 'True' → logprob: -1.205965518951416
    3. 'False' → logprob: -1.580965518951416
    4. ' False' → logprob: -2.705965518951416
    5. '0' → logprob: -3.705965518951416
    6. 'x' → logprob: -4.330965518951416
    7. ' x' → logprob: -5.705965518951416
    8. '1' → logprob: -6.330965518951416
    9. ' ' → logprob: -7.705965518951416
    10. '(True' → logprob: -9.205965042114258

Token 33: ';' (ID: 26)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.8894521594047546
    2. 'for' → logprob: -1.5144522190093994
    3. '<|end|>' → logprob: -2.2644522190093994
    4. '\n' → logprob: -2.6394522190093994
    5. ' 
' → logprob: -2.6394522190093994
    6. 'if' → logprob: -3.6394522190093994
    7. ' for' → logprob: -3.6394522190093994
    8. ':' → logprob: -4.13945198059082
    9. 'x' → logprob: -4.38945198059082
    10. ',' → logprob: -4.76445198059082

Token 34: ' i' (ID: 575)
  Prédit: ' 
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' 
' → logprob: -0.10292205214500427
    2. ' ' → logprob: -2.727921962738037
    3. '
' → logprob: -4.852921962738037
    4. '\n' → logprob: -4.977921962738037
    5. 'for' → logprob: -5.352921962738037
    6. '<|end|>' → logprob: -5.352921962738037
    7. ' for' → logprob: -5.852921962738037
    8. ' 

' → logprob: -6.477921962738037
    9. 'n' → logprob: -6.852921962738037
    10. ' 
 
' → logprob: -7.227921962738037

Token 35: ' =' (ID: 314)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.36917024850845337
    2. '=' → logprob: -1.6191701889038086
    3. ' =' → logprob: -2.2441701889038086
    4. ' n' → logprob: -5.619170188903809
    5. 'nt' → logprob: -7.744170188903809
    6. ' ' → logprob: -8.369170188903809
    7. 'nd' → logprob: -9.619170188903809
    8. '=n' → logprob: -9.619170188903809
    9. ' in' → logprob: -10.119170188903809
    10. 'f' → logprob: -10.494170188903809

Token 36: ' x' (ID: 1215)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8031099438667297
    2. '0' → logprob: -1.053109884262085
    3. '1' → logprob: -1.678109884262085
    4. 'x' → logprob: -4.678110122680664
    5. ' x' → logprob: -5.553110122680664
    6. '2' → logprob: -5.803110122680664
    7. 'N' → logprob: -9.803110122680664
    8. ' N' → logprob: -9.803110122680664
    9. ' M' → logprob: -10.053110122680664
    10. '10' → logprob: -10.678110122680664

Token 37: '
' (ID: 198)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.01373701449483633
    2. '-' → logprob: -5.513737201690674
    3. ' +' → logprob: -6.013737201690674
    4. ' ' → logprob: -6.263737201690674
    5. '**' → logprob: -6.638737201690674
    6. '*' → logprob: -7.263737201690674
    7. '<|end|>' → logprob: -7.388737201690674
    8. '>' → logprob: -7.513737201690674
    9. ';' → logprob: -7.638737201690674
    10. ',' → logprob: -8.138736724853516

Token 38: 'while' (ID: 7032)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.09123584628105164
    2. '<|end|>' → logprob: -3.341235876083374
    3. '-' → logprob: -3.716235876083374
    4. '
' → logprob: -4.591235637664795
    5. ' +' → logprob: -5.716235637664795
    6. ' while' → logprob: -5.716235637664795
    7. 'while' → logprob: -5.966235637664795
    8. ' ' → logprob: -6.091235637664795
    9. ';' → logprob: -6.466235637664795
    10. '+
' → logprob: -6.716235637664795

Token 39: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.15461592376232147
    2. 'i' → logprob: -2.279615879058838
    3. ' not' → logprob: -3.279615879058838
    4. 'not' → logprob: -6.529615879058838
    5. ' True' → logprob: -7.404615879058838
    6. '(i' → logprob: -7.529615879058838
    7. ' ' → logprob: -8.404616355895996
    8. 'True' → logprob: -8.904616355895996
    9. ' x' → logprob: -9.279616355895996
    10. ' (' → logprob: -9.654616355895996

Token 40: ' >' (ID: 1424)
  Prédit: '>='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>=' → logprob: -0.3884390592575073
    2. '>' → logprob: -1.8884390592575073
    3. ' >=' → logprob: -2.263439178466797
    4. ' >' → logprob: -3.388439178466797
    5. '<=' → logprob: -3.638439178466797
    6. ' <=' → logprob: -5.138439178466797
    7. '*' → logprob: -8.263439178466797
    8. '<' → logprob: -9.013439178466797
    9. ' <' → logprob: -9.388439178466797
    10. '+' → logprob: -10.263439178466797

Token 41: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.3894578814506531
    2. ' ' → logprob: -1.1394579410552979
    3. '1' → logprob: -6.639457702636719
    4. '=' → logprob: -7.139457702636719
    5. ' floor' → logprob: -8.639457702636719
    6. 'floor' → logprob: -8.764457702636719
    7. 'x' → logprob: -10.389457702636719
    8. ' x' → logprob: -10.639457702636719
    9. '2' → logprob: -10.764457702636719
    10. ' -' → logprob: -11.014457702636719

Token 42: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.013489237055182457
    2. ' ' → logprob: -4.638489246368408
    3. '1' → logprob: -5.888489246368408
    4. 'floor' → logprob: -7.638489246368408
    5. 'x' → logprob: -9.13848876953125
    6. '-' → logprob: -9.51348876953125
    7. '2' → logprob: -9.76348876953125
    8. ' floor' → logprob: -9.88848876953125
    9. 'N' → logprob: -10.13848876953125
    10. '=' → logprob: -10.38848876953125

Token 43: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0038566088769584894
    2. ' and' → logprob: -6.128856658935547
    3. ' :' → logprob: -7.003856658935547
    4. ':
' → logprob: -7.253856658935547
    5. 'and' → logprob: -10.503856658935547
    6. ' :
' → logprob: -11.753856658935547
    7. '   ' → logprob: -12.753856658935547
    8. ',' → logprob: -12.878856658935547
    9. ' ' → logprob: -12.878856658935547
    10. '-' → logprob: -13.128856658935547

Token 44: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.10693646222352982
    2. ' and' → logprob: -3.106936454772949
    3. ' :' → logprob: -3.606936454772949
    4. ' ' → logprob: -4.856936454772949
    5. ':
' → logprob: -5.106936454772949
    6. '   ' → logprob: -5.106936454772949
    7. ' :
' → logprob: -5.356936454772949
    8. '<|end|>' → logprob: -6.231936454772949
    9. ' i' → logprob: -7.356936454772949
    10. ' if' → logprob: -7.981936454772949

Token 45: ' if' (ID: 538)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.7863783240318298
    2. ' ' → logprob: -1.2863783836364746
    3. ' :' → logprob: -2.5363783836364746
    4. ' i' → logprob: -2.9113783836364746
    5. '   ' → logprob: -3.1613783836364746
    6. ' if' → logprob: -3.1613783836364746
    7. '    ' → logprob: -4.661378383636475
    8. ' and' → logprob: -4.661378383636475
    9. '<|end|>' → logprob: -5.286378383636475
    10. ' 
' → logprob: -5.661378383636475

Token 46: ' not' (ID: 625)
  Prédit: ' M'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' M' → logprob: -0.6276348829269409
    2. ' N' → logprob: -2.0026350021362305
    3. ' x' → logprob: -2.3776350021362305
    4. 'x' → logprob: -2.5026350021362305
    5. 'M' → logprob: -2.7526350021362305
    6. ' (' → logprob: -3.2526350021362305
    7. 'N' → logprob: -3.5026350021362305
    8. ' i' → logprob: -4.8776350021362305
    9. '(' → logprob: -5.2526350021362305
    10. 'i' → logprob: -5.8776350021362305

Token 47: ' (' (ID: 350)
  Prédit: ' M'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' M' → logprob: -0.47046878933906555
    2. ' (' → logprob: -1.8454687595367432
    3. ' flag' → logprob: -2.970468759536743
    4. 'M' → logprob: -3.220468759536743
    5. ' x' → logprob: -3.345468759536743
    6. '(' → logprob: -4.095468997955322
    7. ' N' → logprob: -4.345468997955322
    8. '(x' → logprob: -4.345468997955322
    9. '(flag' → logprob: -4.720468997955322
    10. 'x' → logprob: -4.845468997955322

Token 48: 'M' (ID: 44)
  Prédit: 'M'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'M' → logprob: -0.44003304839134216
    2. ' M' → logprob: -1.4400330781936646
    3. 'x' → logprob: -2.940032958984375
    4. 'N' → logprob: -4.065032958984375
    5. ' (' → logprob: -4.565032958984375
    6. ' x' → logprob: -4.815032958984375
    7. '(x' → logprob: -5.065032958984375
    8. ' N' → logprob: -5.315032958984375
    9. '(M' → logprob: -5.315032958984375
    10. 'i' → logprob: -5.440032958984375

Token 49: '%i' (ID: 157265)
  Prédit: ' %'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.538233757019043
    2. '%' → logprob: -0.913233757019043
    3. '%i' → logprob: -4.288233757019043
    4. ' ' → logprob: -7.038233757019043
    5. ')' → logprob: -8.913233757019043
    6. ' i' → logprob: -9.788233757019043
    7. '%x' → logprob: -10.038233757019043
    8. '-' → logprob: -10.663233757019043
    9. '```' → logprob: -11.038233757019043
    10. ' )' → logprob: -11.163233757019043

Token 50: '):' (ID: 3127)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.729763925075531
    2. '%' → logprob: -0.854763925075531
    3. '):' → logprob: -3.729763984680176
    4. '==' → logprob: -3.979763984680176
    5. ')%' → logprob: -3.979763984680176
    6. ' %' → logprob: -4.104763984680176
    7. ' ==' → logprob: -5.479763984680176
    8. ' or' → logprob: -6.104763984680176
    9. ' and' → logprob: -6.229763984680176
    10. '%)' → logprob: -6.479763984680176

Token 51: ' print' (ID: 2123)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.22526361048221588
    2. '   ' → logprob: -2.1002635955810547
    3. '    ' → logprob: -3.7252635955810547
    4. ' i' → logprob: -4.225263595581055
    5. ' if' → logprob: -4.225263595581055
    6. ' print' → logprob: -4.350263595581055
    7. ' ' → logprob: -5.475263595581055
    8. ' flag' → logprob: -6.225263595581055
    9. ' 
' → logprob: -6.600263595581055
    10. ' N' → logprob: -7.225263595581055

Token 52: '(i' (ID: 3649)
  Prédit: '(i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(i' → logprob: -0.03488461300730705
    2. '(' → logprob: -3.4098846912384033
    3. '("' → logprob: -7.409884452819824
    4. '('' → logprob: -7.784884452819824
    5. 'i' → logprob: -9.659884452819824
    6. '(x' → logprob: -9.784884452819824
    7. '(f' → logprob: -10.159884452819824
    8. '("("' → logprob: -11.659884452819824
    9. '()' → logprob: -11.784884452819824
    10. ' (' → logprob: -11.784884452819824

Token 53: ');' (ID: 2245)
  Prédit: ');'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ');' → logprob: -0.08522345870733261
    2. ')' → logprob: -2.710223436355591
    3. ',' → logprob: -4.58522367477417
    4. ')
' → logprob: -5.96022367477417
    5. '   ' → logprob: -7.33522367477417
    6. ',end' → logprob: -7.71022367477417
    7. ' );' → logprob: -7.71022367477417
    8. '),' → logprob: -8.335223197937012
    9. ',i' → logprob: -9.085223197937012
    10. ';' → logprob: -9.210223197937012

Token 54: ' flag' (ID: 9641)
  Prédit: ' break'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' break' → logprob: -0.2952732443809509
    2. ' flag' → logprob: -1.5452733039855957
    3. '       ' → logprob: -3.7952733039855957
    4. 'flag' → logprob: -5.045273303985596
    5. 'break' → logprob: -5.420273303985596
    6. '    ' → logprob: -5.420273303985596
    7. '   ' → logprob: -5.920273303985596
    8. ' i' → logprob: -6.670273303985596
    9. ' ' → logprob: -8.545272827148438
    10. ' exit' → logprob: -9.170272827148438

Token 55: '=True' (ID: 7827)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.023337023332715034
    2. '=' → logprob: -3.7733371257781982
    3. '=True' → logprob: -9.398337364196777
    4. '=False' → logprob: -12.398337364196777
    5. ' ' → logprob: -13.148337364196777
    6. ' |=' → logprob: -13.273337364196777
    7. '  ' → logprob: -16.14833641052246
    8. ',' → logprob: -16.14833641052246
    9. ' =)' → logprob: -16.52333641052246
    10. '   ' → logprob: -16.64833641052246

Token 56: ';' (ID: 26)
  Prédit: ';'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ';' → logprob: -0.5625640153884888
    2. '       ' → logprob: -0.9375640153884888
    3. '   ' → logprob: -3.562563896179199
    4. ';i' → logprob: -5.687563896179199
    5. ' ;' → logprob: -6.062563896179199
    6. '
' → logprob: -6.937563896179199
    7. '    ' → logprob: -7.062563896179199
    8. '     ' → logprob: -7.312563896179199
    9. '    
' → logprob: -7.937563896179199
    10. ' ' → logprob: -7.937563896179199

Token 57: ' break' (ID: 2338)
  Prédit: ' break'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' break' → logprob: -0.9155733585357666
    2. '       ' → logprob: -1.1655733585357666
    3. '   ' → logprob: -1.7905733585357666
    4. '    ' → logprob: -2.4155733585357666
    5. ' ' → logprob: -4.4155731201171875
    6. 'break' → logprob: -4.4155731201171875
    7. ' i' → logprob: -5.2905731201171875
    8. '	break' → logprob: -7.2905731201171875
    9. '     ' → logprob: -7.7905731201171875
    10. '  ' → logprob: -8.665573120117188

Token 58: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.016025803983211517
    2. '
' → logprob: -4.641026020050049
    3. '    
' → logprob: -6.016026020050049
    4. ' i' → logprob: -6.516026020050049
    5. '  
' → logprob: -7.016026020050049
    6. 'i' → logprob: -7.766026020050049
    7. ' ' → logprob: -7.891026020050049
    8. '   
' → logprob: -8.76602554321289
    9. ' 
' → logprob: -9.14102554321289
    10. '  ' → logprob: -9.26602554321289

Token 59: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00013834332639817148
    2. 'i' → logprob: -9.875138282775879
    3. '    
' → logprob: -10.000138282775879
    4. ' i' → logprob: -10.375138282775879
    5. '
' → logprob: -12.250138282775879
    6. '  ' → logprob: -14.125138282775879
    7. '```' → logprob: -14.125138282775879
    8. ' ' → logprob: -14.500138282775879
    9. '<|end|>' → logprob: -14.500138282775879
    10. 'else' → logprob: -14.500138282775879

Token 60: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' (adapté à ' i') → logprob: -0.13705968856811523
    2. ' i' → logprob: -2.2620596885681152
    3. '   ' → logprob: -3.7620596885681152
    4. '-' → logprob: -7.637059688568115
    5. ' ' → logprob: -8.637060165405273
    6. '    
' → logprob: -11.262060165405273
    7. '	i' → logprob: -11.512060165405273
    8. '  ' → logprob: -11.637060165405273
    9. ' 
' → logprob: -11.887060165405273
    10. ' else' → logprob: -12.512060165405273

Token 61: ' -=' (ID: 12583)
  Prédit: '-='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-=' → logprob: -0.0797002837061882
    2. ' -=' → logprob: -2.829700231552124
    3. '-' → logprob: -4.079700469970703
    4. '=' → logprob: -7.329700469970703
    5. ' -' → logprob: -12.454700469970703
    6. '+=' → logprob: -13.329700469970703
    7. ' ' → logprob: -13.579700469970703
    8. ' =' → logprob: -14.454700469970703
    9. '```' → logprob: -15.204700469970703
    10. ' +=' → logprob: -15.829700469970703

Token 62: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -8.506661833962426e-05
    2. ' ' → logprob: -9.37508487701416
    3. '<|end|>' → logprob: -17.500085830688477
    4. '   ' → logprob: -17.750085830688477
    5. '```' → logprob: -17.937585830688477
    6. '  ' → logprob: -18.500085830688477
    7. '１' → logprob: -19.500085830688477
    8. '2' → logprob: -19.687585830688477
    9. '۱' → logprob: -19.687585830688477
    10. 's' → logprob: -19.812585830688477

Token 63: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -8.506661833962426e-05
    2. ' ' → logprob: -9.37508487701416
    3. '2' → logprob: -16.812585830688477
    4. '   ' → logprob: -18.312585830688477
    5. '10' → logprob: -18.562585830688477
    6. '  ' → logprob: -18.750085830688477
    7. '```' → logprob: -18.750085830688477
    8. '１' → logprob: -19.062585830688477
    9. 's' → logprob: -19.125085830688477
    10. '3' → logprob: -19.187585830688477

Token 64: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 65: 'if' (ID: 366)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 66: ' not' (ID: 625)
  Prédit: ' not'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.3502639830112457
    2. 'not' → logprob: -1.2252639532089233
    3. ' flag' → logprob: -6.850264072418213
    4. 'flag' → logprob: -7.225264072418213
    5. ' ' → logprob: -10.600263595581055
    6. ' no' → logprob: -13.475263595581055
    7. '(not' → logprob: -13.600263595581055
    8. ' ' → logprob: -14.100263595581055
    9. 'no' → logprob: -14.350263595581055
    10. '   ' → logprob: -14.600263595581055

Token 67: ' flag' (ID: 9641)
  Prédit: ' flag'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' flag' → logprob: -0.012581352144479752
    2. 'flag' → logprob: -4.3875813484191895
    3. '(flag' → logprob: -9.637581825256348
    4. ' ' → logprob: -12.262581825256348
    5. ' space' → logprob: -14.012581825256348
    6. '	flag' → logprob: -14.637581825256348
    7. 'space' → logprob: -14.887581825256348
    8. ' ' → logprob: -16.26258087158203
    9. '.flag' → logprob: -17.01258087158203
    10. ' (' → logprob: -17.13758087158203

Token 68: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0007106438861228526
    2. ':
' → logprob: -7.250710487365723
    3. 'print' → logprob: -15.500710487365723
    4. ':return' → logprob: -15.875710487365723
    5. ' :' → logprob: -16.12571144104004
    6. ':

' → logprob: -16.37571144104004
    7. '   ' → logprob: -16.62571144104004
    8. ' and' → logprob: -17.50071144104004
    9. ':
' → logprob: -17.50071144104004
    10. ':def' → logprob: -17.87571144104004

Token 69: '   ' (ID: 271)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.08897501975297928
    2. 'print' → logprob: -2.463974952697754
    3. '   ' → logprob: -10.588974952697754
    4. '.print' → logprob: -12.588974952697754
    5. '```' → logprob: -13.088974952697754
    6. '>' → logprob: -13.963974952697754
    7. '	print' → logprob: -14.213974952697754
    8. '-print' → logprob: -14.838974952697754
    9. ' 
' → logprob: -15.088974952697754
    10. '    ' → logprob: -15.213974952697754

Token 70: ' def' (ID: 1056)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.018158137798309326
    2. ' print' → logprob: -4.018157958984375
    3. '   ' → logprob: -11.768157958984375
    4. 'pr' → logprob: -15.768157958984375
    5. '	print' → logprob: -16.268157958984375
    6. '1' → logprob: -16.518157958984375
    7. '```' → logprob: -16.768157958984375
    8. '.print' → logprob: -17.393157958984375
    9. '    ' → logprob: -18.143157958984375
    10. 'prit' → logprob: -18.268157958984375

Token 71: ' p' (ID: 275)
  Prédit: ' gcd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' gcd' → logprob: -0.08120205253362656
    2. ' get' → logprob: -3.3312020301818848
    3. ' main' → logprob: -3.8312020301818848
    4. ' f' → logprob: -4.706202030181885
    5. 'g' → logprob: -5.956202030181885
    6. ' solution' → logprob: -6.456202030181885
    7. 'ault' → logprob: -6.706202030181885
    8. ' is' → logprob: -7.081202030181885
    9. ' print' → logprob: -7.331202030181885
    10. ' factorial' → logprob: -7.456202030181885

Token 72: '():' (ID: 9442)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'r' → logprob: -1.4736459888808895e-05
    2. 'int' → logprob: -12.000014305114746
    3. 'print' → logprob: -12.250014305114746
    4. 'ass' → logprob: -13.000014305114746
    5. '
' → logprob: -15.250014305114746
    6. ' r' → logprob: -15.500014305114746
    7. 'rin' → logprob: -15.625014305114746
    8. '```' → logprob: -15.750014305114746
    9. '(r' → logprob: -15.875014305114746
    10. '(int' → logprob: -15.875014305114746

Token 73: 'pass' (ID: 9948)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8452539443969727
    2. 'print' → logprob: -1.2202539443969727
    3. ' print' → logprob: -1.3452539443969727
    4. '       ' → logprob: -4.470253944396973
    5. ' pass' → logprob: -6.345253944396973
    6. ' ' → logprob: -7.220253944396973
    7. ' return' → logprob: -8.345253944396973
    8. '    ' → logprob: -8.720253944396973
    9. 'return' → logprob: -9.095253944396973
    10. '	print' → logprob: -9.095253944396973


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 71
Tokens correctement prédits (1ère position, stricte): 16
Tokens correctement prédits (1ère position, avec adaptation): 17
Tokens correctement prédits (top 10): 47
Précision stricte (1ère position): 22.54%
Précision adaptée (1ère position): 23.94%
Précision (top 10): 66.20%
================================================================================
