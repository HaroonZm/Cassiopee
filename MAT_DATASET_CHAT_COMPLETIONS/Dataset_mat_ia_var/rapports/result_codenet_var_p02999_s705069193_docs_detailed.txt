================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:55:25
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def check_value(x: int, a: int) -> int:
    """
    Compare deux entiers et retourne 0 si le premier est strictement inférieur au second, sinon retourne 10.

    Args:
        x (int): La première valeur entière à comparer.
        a (int): La seconde valeur entière à comparer.

    Returns:
        int: 0 si x < a, sinon 10.
    """
    # On compare les deux valeurs et retourne le résultat approprié.
    if x < a:
        return 0
    else:
        return 10

def main():
    """
    Fonction principale.
    Lit deux entiers depuis l'entrée standard, puis affiche le résultat de la comparaison
    selon les spécifications de la fonction check_value.
    """
    # Lecture de deux entiers séparés par un espace à partir de l'entrée standard.
    x, a = map(int, input().split())

    # Appel de la fonction de comparaison, puis impression du résultat.
    print(check_value(x, a))

# Exécute la fonction principale si ce script est appelé directement.
if __name__ == "__main__":
    main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' check' (ID: 2371)
  → Token d'amorce (pas de prédiction)

Token 2: '_value' (ID: 6734)
  → Token d'amorce (pas de prédiction)

Token 3: '(x' (ID: 4061)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2288966029882431
    2. '_' → logprob: -1.6038966178894043
    3. '```' → logprob: -6.228896617889404
    4. ' (' → logprob: -7.478896617889404
    5. '(_' → logprob: -8.228896141052246
    6. '(value' → logprob: -9.478896141052246
    7. '(token' → logprob: -9.603896141052246
    8. '__' → logprob: -10.103896141052246
    9. '_token' → logprob: -10.228896141052246
    10. ':' → logprob: -10.353896141052246

Token 4: ':' (ID: 25)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0818847119808197
    2. ')' → logprob: -2.5818846225738525
    3. ':' → logprob: -5.831884860992432
    4. ',' → logprob: -11.456884384155273
    5. '):
' → logprob: -11.456884384155273
    6. ')>' → logprob: -11.706884384155273
    7. '=' → logprob: -12.081884384155273
    8. ''):' → logprob: -12.706884384155273
    9. '>' → logprob: -12.956884384155273
    10. '**' → logprob: -13.206884384155273

Token 5: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.2787030041217804
    2. ')' → logprob: -1.528702974319458
    3. ' int' → logprob: -4.153703212738037
    4. ' )' → logprob: -4.778703212738037
    5. ' ' → logprob: -7.153703212738037
    6. '):' → logprob: -8.028702735900879
    7. '<int' → logprob: -8.153702735900879
    8. '"' → logprob: -8.903702735900879
    9. ''' → logprob: -9.153702735900879
    10. ':int' → logprob: -9.278702735900879

Token 6: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.002883926033973694
    2. '):' → logprob: -5.8778839111328125
    3. ')->' → logprob: -9.627883911132812
    4. '`)' → logprob: -12.877883911132812
    5. '):
' → logprob: -13.002883911132812
    6. ')>' → logprob: -13.127883911132812
    7. ',' → logprob: -13.627883911132812
    8. '')' → logprob: -13.877883911132812
    9. ':' → logprob: -14.002883911132812
    10. ' )' → logprob: -14.627883911132812

Token 7: ' a' (ID: 261)
  Prédit: ' y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.480327844619751
    2. 'y' → logprob: -1.230327844619751
    3. ')' → logprob: -2.480327844619751
    4. 'value' → logprob: -5.605327606201172
    5. ' )' → logprob: -7.355327606201172
    6. ' value' → logprob: -7.855327606201172
    7. '):' → logprob: -8.230327606201172
    8. ' ' → logprob: -8.605327606201172
    9. 'x' → logprob: -9.730327606201172
    10. ')->' → logprob: -9.855327606201172

Token 8: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.16377860307693481
    2. '):' → logprob: -2.53877854347229
    3. ',' → logprob: -2.91377854347229
    4. ')' → logprob: -4.663778781890869
    5. '=' → logprob: -5.913778781890869
    6. '>=' → logprob: -6.788778781890869
    7. 's' → logprob: -7.163778781890869
    8. ' >=' → logprob: -7.538778781890869
    9. 'b' → logprob: -8.163778305053711
    10. '>' → logprob: -8.288778305053711

Token 9: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.009220578707754612
    2. ' int' → logprob: -5.384220600128174
    3. 'list' → logprob: -6.134220600128174
    4. 'List' → logprob: -6.259220600128174
    5. ')' → logprob: -9.134220123291016
    6. '[int' → logprob: -9.259220123291016
    7. ' list' → logprob: -9.384220123291016
    8. 'float' → logprob: -10.259220123291016
    9. ' List' → logprob: -10.634220123291016
    10. 'str' → logprob: -11.009220123291016

Token 10: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.11669233441352844
    2. ',' → logprob: -2.491692304611206
    3. '):' → logprob: -3.616692304611206
    4. ')->' → logprob: -8.866692543029785
    5. '```' → logprob: -8.866692543029785
    6. '`)' → logprob: -9.741692543029785
    7. ':' → logprob: -10.116692543029785
    8. '):
' → logprob: -10.616692543029785
    9. ',
' → logprob: -11.116692543029785
    10. '),' → logprob: -11.116692543029785

Token 11: ' ->' (ID: 2747)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0006643029628321528
    2. '->' → logprob: -8.250664710998535
    3. '':' → logprob: -9.625664710998535
    4. ' ->' → logprob: -9.750664710998535
    5. ':return' → logprob: -9.750664710998535
    6. '):' → logprob: -10.125664710998535
    7. '```' → logprob: -10.125664710998535
    8. ')' → logprob: -10.500664710998535
    9. '   ' → logprob: -10.625664710998535
    10. ':
' → logprob: -10.875664710998535

Token 12: ' int' (ID: 677)
  Prédit: ' bool'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' bool' → logprob: -0.10617756098508835
    2. 'bool' → logprob: -2.731177568435669
    3. ' int' → logprob: -3.481177568435669
    4. 'int' → logprob: -5.48117733001709
    5. ' None' → logprob: -7.60617733001709
    6. ' str' → logprob: -9.98117733001709
    7. ' ' → logprob: -10.23117733001709
    8. 'None' → logprob: -10.60617733001709
    9. ' ' → logprob: -10.85617733001709
    10. '"' → logprob: -12.23117733001709

Token 13: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0003978992172051221
    2. '':' → logprob: -8.750397682189941
    3. ':
' → logprob: -9.125397682189941
    4. '':'' → logprob: -10.625397682189941
    5. '():' → logprob: -11.000397682189941
    6. '):' → logprob: -11.250397682189941
    7. '```' → logprob: -11.250397682189941
    8. '":' → logprob: -11.500397682189941
    9. ':return' → logprob: -11.625397682189941
    10. '`:' → logprob: -11.750397682189941

Token 14: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.2836284935474396
    2. '   ' → logprob: -1.4086284637451172
    3. ':
' → logprob: -7.033628463745117
    4. '```' → logprob: -7.783628463745117
    5. ' ' → logprob: -8.158628463745117
    6. ':return' → logprob: -8.408628463745117
    7. '    ' → logprob: -9.033628463745117
    8. ' return' → logprob: -9.783628463745117
    9. '\n' → logprob: -9.783628463745117
    10. ''' → logprob: -10.158628463745117

Token 15: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09699328988790512
    2. '```' → logprob: -3.5969932079315186
    3. ' if' → logprob: -3.9719932079315186
    4. ':' → logprob: -4.346993446350098
    5. 'if' → logprob: -4.471993446350098
    6. 'i' → logprob: -5.096993446350098
    7. ' ' → logprob: -5.221993446350098
    8. 'return' → logprob: -6.096993446350098
    9. '    ' → logprob: -6.096993446350098
    10. ' return' → logprob: -6.221993446350098

Token 16: '   ' (ID: 271)
  Prédit: '"""'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"""' → logprob: -0.9780961871147156
    2. '   ' → logprob: -1.3530962467193604
    3. 'Returns' → logprob: -2.3530962467193604
    4. 'i' → logprob: -2.4780962467193604
    5. 'R' → logprob: -2.6030962467193604
    6. 'Return' → logprob: -3.6030962467193604
    7. 'I' → logprob: -3.6030962467193604
    8. 'If' → logprob: -4.603096008300781
    9. '"""
' → logprob: -4.853096008300781
    10. 'r' → logprob: -5.228096008300781

Token 17: ' Compare' (ID: 38200)
  Prédit: 'Returns'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Returns' → logprob: -1.106958270072937
    2. '"""' → logprob: -1.481958270072937
    3. '   ' → logprob: -1.606958270072937
    4. 'Return' → logprob: -1.731958270072937
    5. 'If' → logprob: -4.731958389282227
    6. 'if' → logprob: -4.731958389282227
    7. 'i' → logprob: -5.106958389282227
    8. 'Checks' → logprob: -5.231958389282227
    9. 'Check' → logprob: -5.356958389282227
    10. '"""
' → logprob: -5.606958389282227

Token 18: ' deux' (ID: 10301)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.5102422833442688
    2. 'x' → logprob: -1.885242223739624
    3. ' the' → logprob: -2.510242223739624
    4. ' ' → logprob: -2.510242223739624
    5. 's' → logprob: -3.635242223739624
    6. ' if' → logprob: -3.635242223739624
    7. ' a' → logprob: -4.885242462158203
    8. '   ' → logprob: -4.885242462158203
    9. ' two' → logprob: -5.510242462158203
    10. '_' → logprob: -5.760242462158203

Token 19: ' ent' (ID: 1121)
  Prédit: ' valeurs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' valeurs' → logprob: -0.21147887408733368
    2. ' espaces' → logprob: -2.4614789485931396
    3. ' ' → logprob: -2.9614789485931396
    4. ' val' → logprob: -4.5864787101745605
    5. ' nombres' → logprob: -4.7114787101745605
    6. ' chaînes' → logprob: -5.0864787101745605
    7. 'val' → logprob: -5.3364787101745605
    8. ' strings' → logprob: -5.4614787101745605
    9. ' valeur' → logprob: -5.7114787101745605
    10. '   ' → logprob: -5.9614787101745605

Token 20: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.01198551058769226
    2. 'ités' → logprob: -5.1369853019714355
    3. 'ier' → logprob: -5.5119853019714355
    4. 'ières' → logprob: -6.8869853019714355
    5. 'êtes' → logprob: -8.011985778808594
    6. 'etes' → logprob: -8.511985778808594
    7. 'ité' → logprob: -8.511985778808594
    8. 'ites' → logprob: -9.636985778808594
    9. 'r' → logprob: -10.261985778808594
    10. 'i' → logprob: -10.386985778808594

Token 21: ' et' (ID: 859)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.3863251209259033
    2. '   ' → logprob: -2.1363251209259033
    3. '\n' → logprob: -2.5113251209259033
    4. ',' → logprob: -3.1363251209259033
    5. '\' → logprob: -4.011324882507324
    6. '```' → logprob: -4.386324882507324
    7. ' et' → logprob: -4.886324882507324
    8. 's' → logprob: -4.886324882507324
    9. ''' → logprob: -5.011324882507324
    10. ':' → logprob: -5.761324882507324

Token 22: ' retourne' (ID: 178818)
  Prédit: ' ren'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ren' → logprob: -0.8182244300842285
    2. ' retourne' → logprob: -1.5682244300842285
    3. ' retourner' → logprob: -2.3182244300842285
    4. 'ret' → logprob: -2.3182244300842285
    5. ' return' → logprob: -2.4432244300842285
    6. 'return' → logprob: -3.6932244300842285
    7. 'ren' → logprob: -3.6932244300842285
    8. ' ret' → logprob: -4.5682244300842285
    9. '   ' → logprob: -6.1932244300842285
    10. ' retour' → logprob: -6.6932244300842285

Token 23: ' ' (ID: 220)
  Prédit: 'leur'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'leur' → logprob: -1.2264114618301392
    2. ' ' → logprob: -1.7264114618301392
    3. ' le' → logprob: -1.8514114618301392
    4. ' True' → logprob: -2.6014113426208496
    5. ' l' → logprob: -2.8514113426208496
    6. '   ' → logprob: -2.9764113426208496
    7. ' leur' → logprob: -3.1014113426208496
    8. 'le' → logprob: -3.4764113426208496
    9. '1' → logprob: -3.8514113426208496
    10. '```' → logprob: -4.10141134262085

Token 24: '0' (ID: 15)
  Prédit: 'le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'le' → logprob: -0.7276487350463867
    2. 'x' → logprob: -1.7276487350463867
    3. ' le' → logprob: -2.3526487350463867
    4. 'leur' → logprob: -2.4776487350463867
    5. ' x' → logprob: -2.8526487350463867
    6. 'a' → logprob: -3.3526487350463867
    7. 'l' → logprob: -3.8526487350463867
    8. '-' → logprob: -4.852648735046387
    9. '1' → logprob: -5.227648735046387
    10. ' a' → logprob: -5.227648735046387

Token 25: ' si' (ID: 1784)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.984000563621521
    2. '   ' → logprob: -1.734000563621521
    3. ' ' → logprob: -1.859000563621521
    4. ' if' → logprob: -2.4840006828308105
    5. '```' → logprob: -2.9840006828308105
    6. '\n' → logprob: -3.2340006828308105
    7. '  ' → logprob: -3.7340006828308105
    8. '.' → logprob: -3.9840006828308105
    9. ' si' → logprob: -4.2340006828308105
    10. 'si' → logprob: -4.3590006828308105

Token 26: ' le' (ID: 505)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.7264527678489685
    2. ' x' → logprob: -0.7264527678489685
    3. ' a' → logprob: -4.226452827453613
    4. 'a' → logprob: -4.351452827453613
    5. 'leur' → logprob: -6.976452827453613
    6. ' le' → logprob: -7.101452827453613
    7. ' ils' → logprob: -7.351452827453613
    8. 'le' → logprob: -7.601452827453613
    9. ' les' → logprob: -7.976452827453613
    10. 'l' → logprob: -8.101452827453613

Token 27: ' premier' (ID: 15506)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.7859777212142944
    2. 's' → logprob: -1.0359777212142944
    3. ' premier' → logprob: -2.660977840423584
    4. 'prem' → logprob: -2.660977840423584
    5. 'ur' → logprob: -3.910977840423584
    6. ' x' → logprob: -4.910977840423584
    7. 'ux' → logprob: -5.035977840423584
    8. 'a' → logprob: -5.910977840423584
    9. 'u' → logprob: -6.410977840423584
    10. 'n' → logprob: -6.660977840423584

Token 28: ' est' (ID: 893)
  Prédit: ' est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' est' → logprob: -0.32530122995376587
    2. 'est' → logprob: -1.450301170349121
    3. 's' → logprob: -4.700301170349121
    4. ' ' → logprob: -4.700301170349121
    5. ' is' → logprob: -4.825301170349121
    6. '>' → logprob: -5.450301170349121
    7. 'x' → logprob: -5.950301170349121
    8. ' x' → logprob: -6.200301170349121
    9. ' >' → logprob: -6.700301170349121
    10. ' vaut' → logprob: -6.950301170349121

Token 29: ' strict' (ID: 12035)
  Prédit: ' inférieur'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' inférieur' → logprob: -0.8108471632003784
    2. 'inf' → logprob: -1.8108471632003784
    3. ' supérieur' → logprob: -2.810847282409668
    4. 'strict' → logprob: -2.935847282409668
    5. 'sup' → logprob: -2.935847282409668
    6. '<|end|>' → logprob: -3.185847282409668
    7. ' plus' → logprob: -3.310847282409668
    8. '<' → logprob: -3.685847282409668
    9. '   ' → logprob: -4.185847282409668
    10. ' égal' → logprob: -4.185847282409668

Token 30: 'ement' (ID: 962)
  Prédit: 'ement'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ement' → logprob: -0.03204479068517685
    2. '<' → logprob: -3.6570448875427246
    3. ' inférieur' → logprob: -6.032044887542725
    4. 'ment' → logprob: -6.407044887542725
    5. 'e' → logprob: -7.407044887542725
    6. 'emen' → logprob: -8.532044410705566
    7. '>' → logprob: -8.907044410705566
    8. ' <' → logprob: -9.282044410705566
    9. 'ément' → logprob: -9.407044410705566
    10. ' supérieur' → logprob: -9.532044410705566

Token 31: ' inférieur' (ID: 191498)
  Prédit: 'inf'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'inf' → logprob: -0.5553302764892578
    2. ' inférieur' → logprob: -1.1803302764892578
    3. 'plus' → logprob: -3.680330276489258
    4. 'infer' → logprob: -3.805330276489258
    5. 'sup' → logprob: -4.180330276489258
    6. ' inf' → logprob: -4.180330276489258
    7. ' plus' → logprob: -4.180330276489258
    8. ' supérieur' → logprob: -4.430330276489258
    9. '<' → logprob: -4.930330276489258
    10. 'super' → logprob: -5.930330276489258

Token 32: ' au' (ID: 2791)
  Prédit: ' à'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.6076712012290955
    2. ' ' → logprob: -1.4826712608337402
    3. ',' → logprob: -2.1076712608337402
    4. '  ' → logprob: -3.3576712608337402
    5. ' au' → logprob: -3.7326712608337402
    6. '   ' → logprob: -4.35767126083374
    7. 'à' → logprob: -4.48267126083374
    8. ' a' → logprob: -4.85767126083374
    9. ' ,' → logprob: -5.10767126083374
    10. 's' → logprob: -5.48267126083374

Token 33: ' second' (ID: 3099)
  Prédit: ' second'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' second' → logprob: -0.8413352370262146
    2. 'second' → logprob: -0.8413352370262146
    3. 'de' → logprob: -2.0913352966308594
    4. ' deuxième' → logprob: -4.966335296630859
    5. 'a' → logprob: -5.341335296630859
    6. ' a' → logprob: -6.966335296630859
    7. '```' → logprob: -8.09133529663086
    8. 'se' → logprob: -8.34133529663086
    9. 'prem' → logprob: -8.46633529663086
    10. ' ' → logprob: -8.59133529663086

Token 34: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.007633247412741184
    2. ' ,' → logprob: -5.132633209228516
    3. ',
' → logprob: -7.132633209228516
    4. '.' → logprob: -7.757633209228516
    5. '   ' → logprob: -8.882633209228516
    6. '```' → logprob: -9.007633209228516
    7. ';' → logprob: -9.382633209228516
    8. ' ' → logprob: -10.757633209228516
    9. 's' → logprob: -11.007633209228516
    10. ',

' → logprob: -11.132633209228516

Token 35: ' sinon' (ID: 52915)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.4577512741088867
    2. '   ' → logprob: -1.5827512741088867
    3. ' sinon' → logprob: -2.4577512741088867
    4. ' ,' → logprob: -3.0827512741088867
    5. '0' → logprob: -5.082751274108887
    6. '    ' → logprob: -5.207751274108887
    7. '  ' → logprob: -5.457751274108887
    8. ' ' → logprob: -5.707751274108887
    9. 's' → logprob: -6.332751274108887
    10. '1' → logprob: -6.457751274108887

Token 36: ' retourne' (ID: 178818)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.17011582851409912
    2. ' ' → logprob: -2.0451159477233887
    3. ' retourne' → logprob: -4.545115947723389
    4. '   ' → logprob: -4.670115947723389
    5. '0' → logprob: -5.670115947723389
    6. ':' → logprob: -7.795115947723389
    7. '  ' → logprob: -8.04511547088623
    8. 'un' → logprob: -8.29511547088623
    9. ' ' → logprob: -8.29511547088623
    10. 'return' → logprob: -8.54511547088623

Token 37: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1446736603975296
    2. '1' → logprob: -2.0196735858917236
    3. ' ' → logprob: -6.394673824310303
    4. '0' → logprob: -9.769673347473145
    5. '  ' → logprob: -10.019673347473145
    6. ' x' → logprob: -10.394673347473145
    7. ' l' → logprob: -10.644673347473145
    8. '   ' → logprob: -11.019673347473145
    9. ' un' → logprob: -11.144673347473145
    10. '2' → logprob: -11.269673347473145

Token 38: '10' (ID: 702)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.003064699238166213
    2. ' ' → logprob: -6.0030646324157715
    3. 'x' → logprob: -8.50306510925293
    4. '0' → logprob: -8.62806510925293
    5. 'l' → logprob: -10.50306510925293
    6. '2' → logprob: -10.62806510925293
    7. '   ' → logprob: -10.62806510925293
    8. 'a' → logprob: -10.87806510925293
    9. '-' → logprob: -11.00306510925293
    10. '```' → logprob: -11.00306510925293

Token 39: '.

' (ID: 364)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.018141286447644234
    2. '```' → logprob: -4.643141269683838
    3. '.' → logprob: -5.143141269683838
    4. ':' → logprob: -7.268141269683838
    5. '"""' → logprob: -7.518141269683838
    6. '\n' → logprob: -8.518141746520996
    7. '  ' → logprob: -8.518141746520996
    8. '
' → logprob: -8.643141746520996
    9. '0' → logprob: -9.018141746520996
    10. 'def' → logprob: -9.393141746520996

Token 40: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2837008535861969
    2. '"""' → logprob: -1.7837008237838745
    3. ' """' → logprob: -3.033700942993164
    4. ' """
' → logprob: -4.283700942993164
    5. '"' → logprob: -5.158700942993164
    6. '"""
' → logprob: -5.408700942993164
    7. '""' → logprob: -5.783700942993164
    8. '```' → logprob: -5.908700942993164
    9. ' ' → logprob: -8.283700942993164
    10. '  ' → logprob: -8.283700942993164

Token 41: ' Args' (ID: 39185)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08128514140844345
    2. '"""' → logprob: -3.581285238265991
    3. '```' → logprob: -4.081284999847412
    4. ' """
' → logprob: -4.331284999847412
    5. '"""
' → logprob: -4.456284999847412
    6. ' """' → logprob: -6.331284999847412
    7. '\n' → logprob: -6.456284999847412
    8. '
' → logprob: -6.956284999847412
    9. '    
' → logprob: -7.081284999847412
    10. ' 
' → logprob: -7.081284999847412

Token 42: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.1457090675830841
    2. ',' → logprob: -2.8957090377807617
    3. ' :' → logprob: -2.8957090377807617
    4. ')' → logprob: -5.020709037780762
    5. '   ' → logprob: -5.020709037780762
    6. ' ' → logprob: -5.395709037780762
    7. '):' → logprob: -5.395709037780762
    8. 'x' → logprob: -7.520709037780762
    9. '```' → logprob: -7.770709037780762
    10. ' ,' → logprob: -8.145709037780762

Token 43: '       ' (ID: 309)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.03538895025849342
    2. ' x' → logprob: -3.660388946533203
    3. '   ' → logprob: -4.910388946533203
    4. 'a' → logprob: -7.660388946533203
    5. ' ' → logprob: -7.660388946533203
    6. '```' → logprob: -7.660388946533203
    7. ')' → logprob: -9.035388946533203
    8. '  ' → logprob: -9.785388946533203
    9. ' a' → logprob: -9.910388946533203
    10. '    ' → logprob: -11.785388946533203

Token 44: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' (adapté à ' x') → logprob: -0.019939327612519264
    2. 'a' → logprob: -4.019939422607422
    3. '   ' → logprob: -7.019939422607422
    4. ' x' → logprob: -7.144939422607422
    5. ' a' → logprob: -9.519939422607422
    6. '```' → logprob: -11.769939422607422
    7. '  ' → logprob: -12.769939422607422
    8. '    ' → logprob: -13.019939422607422
    9. ' ' → logprob: -13.019939422607422
    10. ')' → logprob: -13.269939422607422

Token 45: ' (' (ID: 350)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.4907993674278259
    2. ' :' → logprob: -1.6157994270324707
    3. ',' → logprob: -2.1157994270324707
    4. '   ' → logprob: -3.4907994270324707
    5. ' ,' → logprob: -4.615799427032471
    6. ')' → logprob: -4.990799427032471
    7. '    ' → logprob: -5.365799427032471
    8. ':int' → logprob: -5.615799427032471
    9. '  ' → logprob: -5.740799427032471
    10. ' (' → logprob: -5.990799427032471

Token 46: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.0022378049325197935
    2. ' int' → logprob: -6.127237796783447
    3. '   ' → logprob: -10.502238273620605
    4. ')' → logprob: -11.377238273620605
    5. '[int' → logprob: -12.377238273620605
    6. ':int' → logprob: -13.002238273620605
    7. '    ' → logprob: -13.377238273620605
    8. '<int' → logprob: -14.002238273620605
    9. ' )' → logprob: -14.002238273620605
    10. '```' → logprob: -14.377238273620605

Token 47: '):' (ID: 3127)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.019455071538686752
    2. '):' → logprob: -4.1444549560546875
    3. ',' → logprob: -6.3944549560546875
    4. '<|end|>' → logprob: -6.7694549560546875
    5. ' )' → logprob: -7.8944549560546875
    6. ' ' → logprob: -9.269454956054688
    7. '),' → logprob: -9.894454956054688
    8. '<|end|>' → logprob: -10.769454956054688
    9. ' ):' → logprob: -11.019454956054688
    10. '   ' → logprob: -11.269454956054688

Token 48: ' La' (ID: 3038)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6251819133758545
    2. 'x' → logprob: -1.5001819133758545
    3. ' x' → logprob: -2.6251819133758545
    4. ' Le' → logprob: -3.1251819133758545
    5. ')' → logprob: -3.5001819133758545
    6. 'l' → logprob: -3.7501819133758545
    7. ' l' → logprob: -4.375182151794434
    8. '    ' → logprob: -4.875182151794434
    9. ' L' → logprob: -4.875182151794434
    10. ' The' → logprob: -5.000182151794434

Token 49: ' première' (ID: 23423)
  Prédit: 'prem'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prem' → logprob: -0.680583119392395
    2. ' valeur' → logprob: -1.055583119392395
    3. 'val' → logprob: -2.3055830001831055
    4. ' première' → logprob: -4.6805830001831055
    5. ' premi' → logprob: -4.6805830001831055
    6. ' ' → logprob: -4.6805830001831055
    7. ' premier' → logprob: -4.9305830001831055
    8. '   ' → logprob: -5.4305830001831055
    9. ' val' → logprob: -5.5555830001831055
    10. ' premiere' → logprob: -6.9305830001831055

Token 50: ' valeur' (ID: 41664)
  Prédit: ' valeur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' valeur' → logprob: -0.019995061680674553
    2. ' ent' → logprob: -5.019995212554932
    3. ' variable' → logprob: -5.644995212554932
    4. 'val' → logprob: -5.644995212554932
    5. '   ' → logprob: -6.394995212554932
    6. ' val' → logprob: -6.519995212554932
    7. ' ' → logprob: -6.519995212554932
    8. 'ent' → logprob: -7.519995212554932
    9. ' value' → logprob: -8.144994735717773
    10. 'int' → logprob: -9.269994735717773

Token 51: ' entière' (ID: 61583)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.336381733417511
    2. ',' → logprob: -1.8363816738128662
    3. '<|end|>' → logprob: -2.711381673812866
    4. ')' → logprob: -3.336381673812866
    5. '```' → logprob: -5.086381912231445
    6. '<|end|>' → logprob: -5.461381912231445
    7. '
' → logprob: -5.711381912231445
    8. '.' → logprob: -6.211381912231445
    9. '       ' → logprob: -6.336381912231445
    10. '    
' → logprob: -6.461381912231445

Token 52: ' à' (ID: 1221)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.023564796894788742
    2. ',' → logprob: -4.39856481552124
    3. '   ' → logprob: -4.89856481552124
    4. '),' → logprob: -6.39856481552124
    5. ')
' → logprob: -7.64856481552124
    6. ' )' → logprob: -7.89856481552124
    7. '):' → logprob: -8.273564338684082
    8. '```' → logprob: -8.273564338684082
    9. '<|end|>' → logprob: -8.648564338684082
    10. ' ' → logprob: -9.648564338684082

Token 53: ' comparer' (ID: 125081)
  Prédit: ' comparer'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' comparer' → logprob: -0.16794206202030182
    2. 'com' → logprob: -1.9179420471191406
    3. '   ' → logprob: -6.042942047119141
    4. 'comp' → logprob: -6.292942047119141
    5. 'compare' → logprob: -6.792942047119141
    6. 'Comparer' → logprob: -7.417942047119141
    7. 'compar' → logprob: -7.917942047119141
    8. '  ' → logprob: -8.16794204711914
    9. ' ' → logprob: -8.66794204711914
    10. ' vérifier' → logprob: -8.91794204711914

Token 54: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.15452635288238525
    2. ',' → logprob: -2.1545262336730957
    3. ')' → logprob: -3.9045262336730957
    4. '```' → logprob: -5.529526233673096
    5. ',
' → logprob: -7.904526233673096
    6. '<|end|>' → logprob: -8.154526710510254
    7. '    
' → logprob: -8.279526710510254
    8. '\n' → logprob: -8.279526710510254
    9. '
' → logprob: -8.279526710510254
    10. '    ' → logprob: -8.279526710510254

Token 55: '       ' (ID: 309)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.16370947659015656
    2. ' a' → logprob: -2.4137094020843506
    3. '    ' → logprob: -3.4137094020843506
    4. '   ' → logprob: -4.28870964050293
    5. '```' → logprob: -4.53870964050293
    6. ' ' → logprob: -6.78870964050293
    7. '     
' → logprob: -6.91370964050293
    8. ' 
' → logprob: -7.78870964050293
    9. 'x' → logprob: -7.78870964050293
    10. '       ' → logprob: -8.28870964050293

Token 56: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' (adapté à ' a') → logprob: -0.056530021131038666
    2. ' a' → logprob: -2.931529998779297
    3. '   ' → logprob: -6.931529998779297
    4. '       ' → logprob: -8.181529998779297
    5. '    ' → logprob: -8.556529998779297
    6. 'y' → logprob: -9.431529998779297
    7. ' y' → logprob: -9.806529998779297
    8. '```' → logprob: -10.181529998779297
    9. '        ' → logprob: -12.056529998779297
    10. 'x' → logprob: -12.556529998779297

Token 57: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -1.036592960357666
    2. ' <' → logprob: -1.411592960357666
    3. ':' → logprob: -2.036592960357666
    4. ')' → logprob: -2.786592960357666
    5. '   ' → logprob: -2.786592960357666
    6. '<int' → logprob: -2.786592960357666
    7. ':int' → logprob: -3.661592960357666
    8. '(int' → logprob: -3.661592960357666
    9. ' :' → logprob: -4.786592960357666
    10. '):' → logprob: -5.036592960357666

Token 58: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.000340111117111519
    2. ' int' → logprob: -8.000340461730957
    3. ')' → logprob: -13.125340461730957
    4. '[int' → logprob: -14.125340461730957
    5. ':int' → logprob: -14.500340461730957
    6. '   ' → logprob: -14.875340461730957
    7. '=int' → logprob: -15.250340461730957
    8. '(int' → logprob: -15.500340461730957
    9. '<int' → logprob: -15.875340461730957
    10. '```' → logprob: -16.50033950805664

Token 59: '):' (ID: 3127)
  Prédit: '):'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.20334981381893158
    2. ')' → logprob: -1.7033498287200928
    3. '   ' → logprob: -6.703349590301514
    4. ' ):' → logprob: -8.078350067138672
    5. ':' → logprob: -8.328350067138672
    6. '):
' → logprob: -9.328350067138672
    7. ' )' → logprob: -10.203350067138672
    8. ' ' → logprob: -11.453350067138672
    9. '```' → logprob: -11.828350067138672
    10. '):

' → logprob: -12.703350067138672

Token 60: ' La' (ID: 3038)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -1.3409498929977417
    2. ' l' → logprob: -1.4659498929977417
    3. ' int' → logprob: -2.2159500122070312
    4. '   ' → logprob: -2.5909500122070312
    5. ')' → logprob: -2.9659500122070312
    6. '    ' → logprob: -2.9659500122070312
    7. ' la' → logprob: -3.0909500122070312
    8. ' ' → logprob: -3.0909500122070312
    9. ' La' → logprob: -3.4659500122070312
    10. ' L' → logprob: -3.9659500122070312

Token 61: ' seconde' (ID: 66204)
  Prédit: 'se'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'se' → logprob: -0.840345561504364
    2. 'de' → logprob: -1.0903456211090088
    3. ' seconde' → logprob: -2.215345621109009
    4. ' deuxième' → logprob: -2.340345621109009
    5. ' valeur' → logprob: -4.34034538269043
    6. 'val' → logprob: -4.96534538269043
    7. 'prem' → logprob: -6.09034538269043
    8. 'second' → logprob: -6.34034538269043
    9. ' ' → logprob: -7.71534538269043
    10. ' deux' → logprob: -7.71534538269043

Token 62: ' valeur' (ID: 41664)
  Prédit: ' valeur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' valeur' → logprob: -0.32502591609954834
    2. 'int' → logprob: -2.950026035308838
    3. ' int' → logprob: -2.950026035308838
    4. ':' → logprob: -3.575026035308838
    5. ' ent' → logprob: -3.575026035308838
    6. '):' → logprob: -3.700026035308838
    7. ' value' → logprob: -3.950026035308838
    8. 'val' → logprob: -4.075026035308838
    9. ' val' → logprob: -4.325026035308838
    10. ')' → logprob: -4.700026035308838

Token 63: ' entière' (ID: 61583)
  Prédit: ' entière'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' entière' → logprob: -0.07659009099006653
    2. 'ent' → logprob: -3.201590061187744
    3. ' à' → logprob: -4.451590061187744
    4. ' ent' → logprob: -4.576590061187744
    5. 'int' → logprob: -5.576590061187744
    6. '   ' → logprob: -5.826590061187744
    7. ':' → logprob: -7.326590061187744
    8. ' entier' → logprob: -7.576590061187744
    9. 'à' → logprob: -7.701590061187744
    10. ' enti' → logprob: -8.076590538024902

Token 64: ' à' (ID: 1221)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.6673659086227417
    2. '   ' → logprob: -0.9173659086227417
    3. ' à' → logprob: -2.9173660278320312
    4. ')' → logprob: -4.042366027832031
    5. 'à' → logprob: -4.667366027832031
    6. '):
' → logprob: -5.917366027832031
    7. ' ):' → logprob: -7.417366027832031
    8. '  ' → logprob: -7.792366027832031
    9. '```' → logprob: -7.792366027832031
    10. ':' → logprob: -7.792366027832031

Token 65: ' comparer' (ID: 125081)
  Prédit: ' comparer'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' comparer' → logprob: -0.14601866900920868
    2. 'com' → logprob: -2.1460187435150146
    3. 'int' → logprob: -5.2710185050964355
    4. 'Comparer' → logprob: -5.3960185050964355
    5. 'compare' → logprob: -5.8960185050964355
    6. 'comp' → logprob: -6.2710185050964355
    7. 'compar' → logprob: -6.7710185050964355
    8. ' ' → logprob: -6.7710185050964355
    9. '   ' → logprob: -7.3960185050964355
    10. '  ' → logprob: -7.8960185050964355

Token 66: '.

' (ID: 364)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5371432304382324
    2. ')' → logprob: -1.1621432304382324
    3. '):' → logprob: -2.7871432304382324
    4. '):
' → logprob: -3.2871432304382324
    5. '```' → logprob: -5.787143230438232
    6. '
' → logprob: -8.28714370727539
    7. '"""' → logprob: -9.03714370727539
    8. '):

' → logprob: -9.41214370727539
    9. '  ' → logprob: -9.78714370727539
    10. ' )' → logprob: -10.16214370727539

Token 67: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.015564199537038803
    2. ')' → logprob: -5.01556396484375
    3. '"""' → logprob: -5.26556396484375
    4. '```' → logprob: -6.64056396484375
    5. '"""
' → logprob: -6.76556396484375
    6. ')
' → logprob: -7.89056396484375
    7. '
' → logprob: -8.26556396484375
    8. '):' → logprob: -8.64056396484375
    9. '    
' → logprob: -9.01556396484375
    10. 'Returns' → logprob: -9.64056396484375

Token 68: ' Returns' (ID: 9609)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1509941667318344
    2. '"""' → logprob: -2.525994062423706
    3. ' """' → logprob: -3.900994062423706
    4. '```' → logprob: -4.025994300842285
    5. ')' → logprob: -4.775994300842285
    6. ' """
' → logprob: -5.400994300842285
    7. '"""
' → logprob: -6.150994300842285
    8. 'if' → logprob: -6.400994300842285
    9. ' if' → logprob: -6.525994300842285
    10. '):' → logprob: -6.775994300842285

Token 69: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.07255949825048447
    2. ')' → logprob: -3.6975595951080322
    3. '   ' → logprob: -3.9475595951080322
    4. '0' → logprob: -4.322559356689453
    5. ' int' → logprob: -5.572559356689453
    6. ' :' → logprob: -6.072559356689453
    7. ':int' → logprob: -6.322559356689453
    8. '):' → logprob: -6.947559356689453
    9. 'int' → logprob: -7.072559356689453
    10. ' )' → logprob: -7.322559356689453

Token 70: '       ' (ID: 309)
  Prédit: ' int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.40075942873954773
    2. '   ' → logprob: -1.1507594585418701
    3. 'int' → logprob: -4.525759220123291
    4. '0' → logprob: -6.400759220123291
    5. '       ' → logprob: -7.025759220123291
    6. '    ' → logprob: -8.15075969696045
    7. '```' → logprob: -10.27575969696045
    8. ' ' → logprob: -10.77575969696045
    9. '  ' → logprob: -11.02575969696045
    10. '[int' → logprob: -11.27575969696045

Token 71: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' (adapté à ' int') → logprob: -0.0009918416617438197
    2. ' int' → logprob: -7.0009918212890625
    3. '0' → logprob: -9.625991821289062
    4. '```' → logprob: -11.875991821289062
    5. '   ' → logprob: -12.000991821289062
    6. '10' → logprob: -14.500991821289062
    7. '       ' → logprob: -15.750991821289062
    8. '[int' → logprob: -16.000991821289062
    9. 'Int' → logprob: -16.375991821289062
    10. 'i' → logprob: -16.625991821289062

Token 72: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.005885421764105558
    2. ':
' → logprob: -5.880885601043701
    3. '0' → logprob: -6.630885601043701
    4. '   ' → logprob: -6.880885601043701
    5. ' :' → logprob: -7.505885601043701
    6. '10' → logprob: -9.255885124206543
    7. '```' → logprob: -10.630885124206543
    8. ':
' → logprob: -10.880885124206543
    9. '    ' → logprob: -12.130885124206543
    10. '):' → logprob: -12.505885124206543

Token 73: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5765812993049622
    2. '0' → logprob: -0.8265812993049622
    3. '   ' → logprob: -7.9515814781188965
    4. ' ' → logprob: -9.201581001281738
    5. '```' → logprob: -10.201581001281738
    6. ' int' → logprob: -10.326581001281738
    7. '10' → logprob: -10.451581001281738
    8. ' La' → logprob: -10.951581001281738
    9. ' Le' → logprob: -11.076581001281738
    10. '       ' → logprob: -11.201581001281738

Token 74: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.001261067809537053
    2. ' ' → logprob: -6.876261234283447
    3. '10' → logprob: -8.501260757446289
    4. '   ' → logprob: -11.501260757446289
    5. 'La' → logprob: -12.751260757446289
    6. '```' → logprob: -12.751260757446289
    7. 'int' → logprob: -13.251260757446289
    8. 'la' → logprob: -13.876260757446289
    9. 'Retour' → logprob: -13.876260757446289
    10. '`' → logprob: -14.251260757446289

Token 75: ' si' (ID: 1784)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9044899344444275
    2. '10' → logprob: -1.1544899940490723
    3. '0' → logprob: -1.4044899940490723
    4. ' if' → logprob: -4.529489994049072
    5. ' ' → logprob: -4.904489994049072
    6. ' si' → logprob: -5.029489994049072
    7. '```' → logprob: -5.779489994049072
    8. '       ' → logprob: -6.029489994049072
    9. '    ' → logprob: -6.404489994049072
    10. '    
' → logprob: -6.779489994049072

Token 76: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.001692911726422608
    2. 'x' → logprob: -6.626692771911621
    3. ' le' → logprob: -8.251692771911621
    4. ' ' → logprob: -9.501692771911621
    5. ' ' → logprob: -10.876692771911621
    6. ' l' → logprob: -12.126692771911621
    7. 'le' → logprob: -13.251692771911621
    8. '  ' → logprob: -14.251692771911621
    9. ' (' → logprob: -14.251692771911621
    10. ' `' → logprob: -14.376692771911621

Token 77: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.013331637717783451
    2. '<' → logprob: -4.388331413269043
    3. ' ' → logprob: -7.138331413269043
    4. ' ' → logprob: -11.763331413269043
    5. ' >=' → logprob: -12.263331413269043
    6. '<|end|>' → logprob: -13.138331413269043
    7. ' >' → logprob: -13.513331413269043
    8. '  ' → logprob: -13.763331413269043
    9. ' <",' → logprob: -13.763331413269043
    10. ' est' → logprob: -14.013331413269043

Token 78: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.11308488249778748
    2. 'a' → logprob: -2.2380847930908203
    3. ' ' → logprob: -8.48808479309082
    4. ' ' → logprob: -9.86308479309082
    5. '	a' → logprob: -13.11308479309082
    6. '  ' → logprob: -14.86308479309082
    7. ''a' → logprob: -15.11308479309082
    8. '   ' → logprob: -15.23808479309082
    9. '```' → logprob: -15.61308479309082
    10. '    ' → logprob: -15.73808479309082

Token 79: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.345670610666275
    2. ',' → logprob: -1.3456705808639526
    3. '0' → logprob: -3.720670700073242
    4. '    ' → logprob: -6.470670700073242
    5. '       ' → logprob: -6.595670700073242
    6. '```' → logprob: -6.845670700073242
    7. '10' → logprob: -7.345670700073242
    8. ' ,' → logprob: -7.345670700073242
    9. '    
' → logprob: -7.345670700073242
    10. ';' → logprob: -7.845670700073242

Token 80: ' sinon' (ID: 52915)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.07291176170110703
    2. '   ' → logprob: -3.4479117393493652
    3. ' ' → logprob: -3.6979117393493652
    4. ' sinon' → logprob: -4.822911739349365
    5. '0' → logprob: -5.572911739349365
    6. '       ' → logprob: -7.447911739349365
    7. ' else' → logprob: -7.697911739349365
    8. 'else' → logprob: -7.947911739349365
    9. '```' → logprob: -8.822912216186523
    10. ' autrement' → logprob: -9.197912216186523

Token 81: ' ' (ID: 220)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.12698574364185333
    2. ' ' → logprob: -2.126985788345337
    3. '```' → logprob: -10.876985549926758
    4. '   ' → logprob: -11.251985549926758
    5. ' ' → logprob: -11.501985549926758
    6. '1' → logprob: -11.626985549926758
    7. '`' → logprob: -13.751985549926758
    8. '0' → logprob: -14.126985549926758
    9. '20' → logprob: -14.189485549926758
    10. '  ' → logprob: -14.314485549926758

Token 82: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.000630947935860604
    2. '1' → logprob: -7.500630855560303
    3. ' ' → logprob: -9.500631332397461
    4. '```' → logprob: -13.250631332397461
    5. 'd' → logprob: -15.000631332397461
    6. '   ' → logprob: -15.375631332397461
    7. '`' → logprob: -15.500631332397461
    8. 'l' → logprob: -16.06313133239746
    9. '``' → logprob: -16.31313133239746
    10. '
' → logprob: -16.31313133239746

Token 83: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04419917240738869
    2. '
' → logprob: -3.419199228286743
    3. '```' → logprob: -5.169198989868164
    4. '"""' → logprob: -6.544198989868164
    5. ':' → logprob: -6.669198989868164
    6. '"""
' → logprob: -6.794198989868164
    7. ':
' → logprob: -7.919198989868164
    8. '    
' → logprob: -8.419198989868164
    9. '):
' → logprob: -9.669198989868164
    10. '\n' → logprob: -9.794198989868164

Token 84: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.014052911661565304
    2. '"""' → logprob: -4.764052867889404
    3. '
' → logprob: -5.514052867889404
    4. '```' → logprob: -7.764052867889404
    5. '"""
' → logprob: -8.014053344726562
    6. '    
' → logprob: -8.639053344726562
    7. ' """' → logprob: -8.639053344726562
    8. ')' → logprob: -9.639053344726562
    9. '"' → logprob: -10.014053344726562
    10. ':' → logprob: -10.389053344726562

Token 85: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.041203178465366364
    2. '
' → logprob: -3.916203260421753
    3. '"""' → logprob: -4.166203022003174
    4. ':' → logprob: -6.541203022003174
    5. '```' → logprob: -6.666203022003174
    6. '    
' → logprob: -7.166203022003174
    7. '"""
' (adapté à ' """
') → logprob: -8.041203498840332
    8. ')' → logprob: -8.291203498840332
    9. ' """' → logprob: -8.541203498840332
    10. '""' → logprob: -9.041203498840332

Token 86: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.001472960808314383
    2. '
' → logprob: -6.7514729499816895
    3. '    
' → logprob: -8.626473426818848
    4. 'return' → logprob: -10.626473426818848
    5. 'if' → logprob: -10.876473426818848
    6. ' return' → logprob: -11.001473426818848
    7. '```' → logprob: -11.126473426818848
    8. ' 
' → logprob: -11.501473426818848
    9. ' if' → logprob: -11.626473426818848
    10. '    ' → logprob: -11.751473426818848

Token 87: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7125707268714905
    2. 'if' → logprob: -0.7125707268714905
    3. ' if' → logprob: -4.462570667266846
    4. 'i' → logprob: -5.212570667266846
    5. 'return' → logprob: -6.337570667266846
    6. ' i' → logprob: -8.212571144104004
    7. '```' → logprob: -9.462571144104004
    8. ' return' → logprob: -9.587571144104004
    9. '    
' → logprob: -10.962571144104004
    10. 'r' → logprob: -10.962571144104004

Token 88: ' On' (ID: 2160)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.6244956851005554
    2. 'if' → logprob: -0.9994956851005554
    3. '   ' → logprob: -3.2494957447052
    4. ' i' → logprob: -3.7494957447052
    5. 'i' → logprob: -3.8744957447052
    6. ' return' → logprob: -4.999495506286621
    7. ' ' → logprob: -5.374495506286621
    8. 'return' → logprob: -6.874495506286621
    9. 'x' → logprob: -8.249495506286621
    10. 'r' → logprob: -8.874495506286621

Token 89: ' compare' (ID: 12221)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8283502459526062
    2. '   ' → logprob: -1.078350305557251
    3. ' if' → logprob: -3.078350305557251
    4. ' return' → logprob: -3.453350305557251
    5. 'r' → logprob: -3.578350305557251
    6. 'if' → logprob: -3.578350305557251
    7. ' i' → logprob: -3.703350305557251
    8. ' ' → logprob: -4.328350067138672
    9. '    ' → logprob: -4.578350067138672
    10. '  ' → logprob: -5.203350067138672

Token 90: ' les' (ID: 1341)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.15156975388526917
    2. ' x' → logprob: -2.5265698432922363
    3. ' if' → logprob: -3.5265698432922363
    4. ' ' → logprob: -3.7765698432922363
    5. '    ' → logprob: -5.776569843292236
    6. 'x' → logprob: -5.901569843292236
    7. '  ' → logprob: -7.276569843292236
    8. 'if' → logprob: -7.526569843292236
    9. '    
' → logprob: -8.151569366455078
    10. ' ' → logprob: -8.151569366455078

Token 91: ' deux' (ID: 10301)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.06598041206598282
    2. 'x' → logprob: -2.8159804344177246
    3. ' ' → logprob: -5.690980434417725
    4. ' valeurs' → logprob: -8.315979957580566
    5. 'de' → logprob: -8.815979957580566
    6. ' deux' → logprob: -9.315979957580566
    7. ' espaces' → logprob: -10.690979957580566
    8. ' ' → logprob: -10.815979957580566
    9. 'val' → logprob: -11.190979957580566
    10. ' val' → logprob: -11.565979957580566

Token 92: ' valeurs' (ID: 73668)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -1.1615734100341797
    2. '   ' → logprob: -1.4115734100341797
    3. ' ' → logprob: -2.1615734100341797
    4. ' if' → logprob: -2.1615734100341797
    5. ' valeurs' → logprob: -2.5365734100341797
    6. 'x' → logprob: -2.6615734100341797
    7. 'if' → logprob: -4.16157341003418
    8. ' espaces' → logprob: -4.41157341003418
    9. ' ' → logprob: -4.91157341003418
    10. ' i' → logprob: -5.03657341003418

Token 93: ' et' (ID: 859)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.039267636835575104
    2. '
' → logprob: -3.5392675399780273
    3. '    
' → logprob: -4.914267539978027
    4. '```' → logprob: -7.164267539978027
    5. ':' → logprob: -8.164267539978027
    6. 'if' → logprob: -8.414267539978027
    7. ' if' → logprob: -8.539267539978027
    8. '\n' → logprob: -8.539267539978027
    9. '  
' → logprob: -8.539267539978027
    10. '   
' → logprob: -9.789267539978027

Token 94: ' retourne' (ID: 178818)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.455289751291275
    2. ' return' → logprob: -1.5802897214889526
    3. ' if' → logprob: -2.830289840698242
    4. ' retourne' → logprob: -2.830289840698242
    5. 'return' → logprob: -4.580289840698242
    6. '    ' → logprob: -5.080289840698242
    7. ' on' → logprob: -5.455289840698242
    8. '    
' → logprob: -5.830289840698242
    9. ' ' → logprob: -5.830289840698242
    10. '```' → logprob: -5.955289840698242

Token 95: ' le' (ID: 505)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.016152963042259216
    2. '0' → logprob: -4.141152858734131
    3. '10' → logprob: -9.766153335571289
    4. '   ' → logprob: -10.641153335571289
    5. '  ' → logprob: -11.391153335571289
    6. ' ' → logprob: -11.516153335571289
    7. '    ' → logprob: -12.141153335571289
    8. ' x' → logprob: -12.141153335571289
    9. '```' → logprob: -13.266153335571289
    10. ' (' → logprob: -13.766153335571289

Token 96: ' résultat' (ID: 62556)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.02014777809381485
    2. '0' → logprob: -4.020147800445557
    3. '10' → logprob: -6.395147800445557
    4. ' ' → logprob: -9.270147323608398
    5. '  ' → logprob: -9.770147323608398
    6. '   ' → logprob: -9.770147323608398
    7. '```' → logprob: -10.270147323608398
    8. '1' → logprob: -11.707647323608398
    9. '    ' → logprob: -12.020147323608398
    10. ' if' → logprob: -12.270147323608398

Token 97: ' appropri' (ID: 71769)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00843171589076519
    2. '
' → logprob: -5.508431911468506
    3. '    
' → logprob: -5.883431911468506
    4. ':' → logprob: -7.008431911468506
    5. '\n' → logprob: -8.133431434631348
    6. '\' → logprob: -9.508431434631348
    7. '```' → logprob: -10.258431434631348
    8. '   
' → logprob: -10.383431434631348
    9. ' ' → logprob: -10.633431434631348
    10. '    ' → logprob: -10.633431434631348

Token 98: 'é' (ID: 377)
  Prédit: 'é'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'é' → logprob: -0.010562201030552387
    2. 'ément' → logprob: -4.760562419891357
    3. 'e' → logprob: -7.135562419891357
    4. '   ' → logprob: -7.510562419891357
    5. ' ' → logprob: -8.2605619430542
    6. 'ement' → logprob: -9.6355619430542
    7. ')' → logprob: -9.7605619430542
    8. ':' → logprob: -9.8855619430542
    9. '```' → logprob: -10.2605619430542
    10. 'if' → logprob: -10.5105619430542

Token 99: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.016159415245056152
    2. '
' → logprob: -4.641159534454346
    3. ':' → logprob: -5.391159534454346
    4. '    
' → logprob: -6.766159534454346
    5. '\n' → logprob: -9.141159057617188
    6. ':
' → logprob: -9.141159057617188
    7. ':return' → logprob: -9.516159057617188
    8. '  
' → logprob: -9.641159057617188
    9. 'return' → logprob: -9.766159057617188
    10. '```' → logprob: -9.891159057617188

Token 100: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11435981094837189
    2. '
' → logprob: -2.3643598556518555
    3. '    
' → logprob: -4.7393598556518555
    4. ' 
' → logprob: -5.6143598556518555
    5. '\n' → logprob: -6.9893598556518555
    6. '  
' → logprob: -8.239359855651855
    7. ' return' → logprob: -8.989359855651855
    8. '   
' → logprob: -9.364359855651855
    9. '```' → logprob: -9.864359855651855
    10. 'return' → logprob: -9.864359855651855

Token 101: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5818349123001099
    2. 'if' (adapté à ' if') → logprob: -1.3318349123001099
    3. 'return' → logprob: -2.3318347930908203
    4. ' if' → logprob: -2.7068347930908203
    5. ' return' → logprob: -4.45683479309082
    6. '```' → logprob: -7.45683479309082
    7. 'i' → logprob: -8.08183479309082
    8. 'r' → logprob: -8.58183479309082
    9. '
' → logprob: -8.58183479309082
    10. ' i' → logprob: -9.08183479309082

Token 102: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.0009774327045306563
    2. 'x' → logprob: -7.500977516174316
    3. ' ' → logprob: -8.000977516174316
    4. ' ' → logprob: -9.375977516174316
    5. '	x' → logprob: -12.500977516174316
    6. ' ‌' → logprob: -14.375977516174316
    7. '    ' → logprob: -16.5009765625
    8. ' ' → logprob: -16.7509765625
    9. '‌' → logprob: -16.8759765625
    10. '  ' → logprob: -17.7509765625

Token 103: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.01831265166401863
    2. ' ' → logprob: -4.018312454223633
    3. '<' → logprob: -9.518312454223633
    4. '<|end|>' → logprob: -10.268312454223633
    5. ' <",' → logprob: -10.893312454223633
    6. '  ' → logprob: -10.893312454223633
    7. '    ' → logprob: -12.518312454223633
    8. ' ' → logprob: -12.893312454223633
    9. ' >=' → logprob: -13.143312454223633
    10. '   ' → logprob: -13.268312454223633

Token 104: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.01605748012661934
    2. 'a' → logprob: -4.14105749130249
    3. ' ' → logprob: -11.266057014465332
    4. ' ' → logprob: -11.891057014465332
    5. '	a' → logprob: -13.016057014465332
    6. '```' → logprob: -15.766057014465332
    7. '  ' → logprob: -15.891057014465332
    8. '    ' → logprob: -16.01605796813965
    9. '   ' → logprob: -16.01605796813965
    10. ' ' → logprob: -16.01605796813965

Token 105: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00016325322212651372
    2. ':
' → logprob: -9.375163078308105
    3. ' :' → logprob: -9.750163078308105
    4. ':return' → logprob: -11.125163078308105
    5. '):' → logprob: -12.500163078308105
    6. '   ' → logprob: -14.125163078308105
    7. ':**' → logprob: -14.750163078308105
    8. '       ' → logprob: -15.750163078308105
    9. '():' → logprob: -16.125164031982422
    10. ' :
' → logprob: -16.750164031982422

Token 106: '       ' (ID: 309)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00899129081517458
    2. ' :' → logprob: -5.633991241455078
    3. '       ' → logprob: -6.008991241455078
    4. ':return' → logprob: -6.758991241455078
    5. '   ' → logprob: -6.883991241455078
    6. ':
' → logprob: -7.508991241455078
    7. ' :
' → logprob: -10.258991241455078
    8. ' return' → logprob: -10.258991241455078
    9. ' ' → logprob: -10.508991241455078
    10. '    ' → logprob: -10.758991241455078

Token 107: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.07444115728139877
    2. '       ' → logprob: -2.9494411945343018
    3. ' return' → logprob: -4.199440956115723
    4. '0' → logprob: -5.449440956115723
    5. '   ' → logprob: -10.449440956115723
    6. '
' → logprob: -11.574440956115723
    7. 'r' → logprob: -12.324440956115723
    8. 'ret' → logprob: -12.449440956115723
    9. '```' → logprob: -12.574440956115723
    10. ' ' → logprob: -12.949440956115723

Token 108: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.018150413408875465
    2. '0' → logprob: -4.018150329589844
    3. ' ' → logprob: -14.518150329589844
    4. '10' → logprob: -18.393150329589844
    5. ' 
' → logprob: -20.643150329589844
    6. '```' → logprob: -21.018150329589844
    7. ' ' → logprob: -21.268150329589844
    8. '1' → logprob: -22.018150329589844
    9. '۰' → logprob: -22.018150329589844
    10. '  ' → logprob: -22.393150329589844

Token 109: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.9361264946837764e-07
    2. ' ' → logprob: -16.375
    3. '۰' → logprob: -23.625
    4. '０' → logprob: -24.75
    5. '  ' → logprob: -25.25
    6. '   ' → logprob: -25.75
    7. ' ' → logprob: -26.75
    8. '٠' → logprob: -27.0
    9. ' ' → logprob: -27.375
    10. '```' → logprob: -27.375

Token 110: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.008434196934103966
    2. '
' → logprob: -5.508434295654297
    3. '    
' → logprob: -6.258434295654297
    4. ' else' → logprob: -6.383434295654297
    5. 'else' → logprob: -7.383434295654297
    6. '   
' → logprob: -9.633434295654297
    7. '	else' → logprob: -11.258434295654297
    8. '       ' → logprob: -11.383434295654297
    9. '  
' → logprob: -11.883434295654297
    10. '    ' → logprob: -12.008434295654297

Token 111: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07638590782880783
    2. ' else' → logprob: -2.951385974884033
    3. 'else' → logprob: -4.576385974884033
    4. '    
' → logprob: -4.826385974884033
    5. '
' → logprob: -5.951385974884033
    6. '   
' → logprob: -8.826385498046875
    7. ' 
' → logprob: -9.576385498046875
    8. '	else' → logprob: -9.701385498046875
    9. '  
' → logprob: -10.576385498046875
    10. '        
' → logprob: -11.701385498046875

Token 112: ' else' (ID: 1203)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.17718037962913513
    2. ' else' → logprob: -2.427180290222168
    3. 'else' (adapté à ' else') → logprob: -2.677180290222168
    4. '    
' → logprob: -5.552180290222168
    5. '
' → logprob: -7.677180290222168
    6. '   
' → logprob: -8.552180290222168
    7. ' ' → logprob: -8.802180290222168
    8. 'e' → logprob: -9.052180290222168
    9. 'return' → logprob: -9.302180290222168
    10. '       ' → logprob: -9.302180290222168

Token 113: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.09112582355737686
    2. '       ' → logprob: -2.466125726699829
    3. ':
' → logprob: -7.216125965118408
    4. '   ' → logprob: -7.341125965118408
    5. ':return' → logprob: -7.341125965118408
    6. ' :' → logprob: -9.71612548828125
    7. ' return' → logprob: -10.46612548828125
    8. '    ' → logprob: -10.84112548828125
    9. '10' → logprob: -10.96612548828125
    10. '      ' → logprob: -12.21612548828125

Token 114: '       ' (ID: 309)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.30408865213394165
    2. '       ' → logprob: -1.5540885925292969
    3. ' ' → logprob: -3.304088592529297
    4. '   ' → logprob: -4.804088592529297
    5. ' return' → logprob: -5.429088592529297
    6. 'return' → logprob: -7.304088592529297
    7. '    ' → logprob: -7.429088592529297
    8. '```' → logprob: -9.929088592529297
    9. ' ' → logprob: -10.429088592529297
    10. '1' → logprob: -10.554088592529297

Token 115: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.13178971409797668
    2. '10' → logprob: -2.1317896842956543
    3. ' return' → logprob: -5.381789684295654
    4. '   ' → logprob: -8.506790161132812
    5. '       ' → logprob: -10.631790161132812
    6. ' ' → logprob: -10.881790161132812
    7. 'ret' → logprob: -13.256790161132812
    8. '```' → logprob: -13.506790161132812
    9. '  ' → logprob: -14.381790161132812
    10. '1' → logprob: -14.881790161132812

Token 116: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.06994665414094925
    2. '10' → logprob: -2.694946765899658
    3. ' ' → logprob: -11.9449462890625
    4. '1' → logprob: -12.5699462890625
    5. '```' → logprob: -16.1949462890625
    6. ' ' → logprob: -17.5699462890625
    7. '`' → logprob: -17.6324462890625
    8. ' 
' → logprob: -17.6324462890625
    9. '<|end|>' → logprob: -18.0074462890625
    10. '0' → logprob: -18.0074462890625

Token 117: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -7.896309739408025e-07
    2. '1' → logprob: -14.750000953674316
    3. ' ' → logprob: -14.875000953674316
    4. '```' → logprob: -19.375
    5. '   ' → logprob: -19.875
    6. '۱۰' → logprob: -20.375
    7. '１０' → logprob: -21.0
    8. '0' → logprob: -22.0
    9. '  ' → logprob: -22.0625
    10. '`' → logprob: -22.125

Token 118: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.4040251076221466
    2. '<|end|>' → logprob: -1.4040250778198242
    3. '\n' → logprob: -2.654025077819824
    4. '```' → logprob: -4.779025077819824
    5. '' → logprob: -6.404025077819824
    6. 'newline' → logprob: -6.529025077819824
    7. ' ' → logprob: -7.279025077819824
    8. '#' → logprob: -7.279025077819824
    9. '<|end|>' → logprob: -7.279025077819824
    10. ' 
' → logprob: -7.529025077819824

Token 119: 'def' (ID: 1314)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5776485204696655
    2. '\n' → logprob: -1.0776485204696655
    3. '<|end|>' → logprob: -2.702648639678955
    4. '```' → logprob: -4.202648639678955
    5. '#' → logprob: -5.327648639678955
    6. '\' → logprob: -6.077648639678955
    7. '<|end|>' → logprob: -6.452648639678955
    8. 'newline' → logprob: -6.577648639678955
    9. '' → logprob: -6.827648639678955
    10. '  
' → logprob: -7.077648639678955

Token 120: ' main' (ID: 2758)
  Prédit: ' check'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' check' → logprob: -0.21042387187480927
    2. ' ' → logprob: -2.3354239463806152
    3. ' calculate' → logprob: -3.3354239463806152
    4. ' space' → logprob: -3.7104239463806152
    5. ' compute' → logprob: -4.210423946380615
    6. ' add' → logprob: -4.835423946380615
    7. ' test' → logprob: -5.835423946380615
    8. ' compare' → logprob: -6.460423946380615
    9. ' process' → logprob: -6.710423946380615
    10. ' multiply' → logprob: -7.460423946380615

Token 121: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -0.013522647321224213
    2. '(' → logprob: -4.388522624969482
    3. '()' → logprob: -7.138522624969482
    4. ':' → logprob: -9.01352310180664
    5. '_' → logprob: -9.76352310180664
    6. '():
' → logprob: -11.01352310180664
    7. ' ():' → logprob: -11.51352310180664
    8. '(
' → logprob: -13.01352310180664
    9. '_:' → logprob: -13.13852310180664
    10. '(:' → logprob: -13.13852310180664

Token 122: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00413942988961935
    2. '
' → logprob: -6.004139423370361
    3. '    
' → logprob: -6.754139423370361
    4. ' 
' → logprob: -8.12913990020752
    5. 'x' → logprob: -9.12913990020752
    6. 'n' → logprob: -10.75413990020752
    7. '    ' → logprob: -11.37913990020752
    8. ' ' → logprob: -11.62913990020752
    9. '```' → logprob: -11.75413990020752
    10. '   
' → logprob: -12.00413990020752

Token 123: ' """
' (ID: 7037)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.023639319464564323
    2. ' x' → logprob: -4.77363920211792
    3. 'value' → logprob: -4.89863920211792
    4. 'val' → logprob: -6.02363920211792
    5. '   ' → logprob: -6.27363920211792
    6. 'result' → logprob: -6.64863920211792
    7. 'n' → logprob: -7.39863920211792
    8. 'print' → logprob: -8.273639678955078
    9. ' value' → logprob: -8.398639678955078
    10. 'a' → logprob: -8.773639678955078

Token 124: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0038487708661705256
    2. ' print' → logprob: -7.628848552703857
    3. 'print' → logprob: -7.753848552703857
    4. ' test' → logprob: -7.878848552703857
    5. 'x' → logprob: -8.128849029541016
    6. '    
' → logprob: -8.128849029541016
    7. '#' → logprob: -8.128849029541016
    8. 'if' → logprob: -8.378849029541016
    9. ' if' → logprob: -8.503849029541016
    10. ' x' → logprob: -8.628849029541016

Token 125: ' Fonction' (ID: 189149)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -1.2977832555770874
    2. 'print' → logprob: -1.4227832555770874
    3. '   ' → logprob: -1.5477832555770874
    4. ' x' → logprob: -2.547783374786377
    5. ' print' → logprob: -2.547783374786377
    6. ' test' → logprob: -4.172783374786377
    7. '#' → logprob: -4.672783374786377
    8. ' pass' → logprob: -4.672783374786377
    9. 'value' → logprob: -4.797783374786377
    10. 'test' → logprob: -4.922783374786377

Token 126: ' principale' (ID: 68926)
  Prédit: ' principale'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' principale' → logprob: -0.5426270961761475
    2. ' de' → logprob: -1.4176270961761475
    3. ' main' → logprob: -2.9176270961761475
    4. ' d' → logprob: -2.9176270961761475
    5. ' test' → logprob: -4.292627334594727
    6. ' ' → logprob: -4.542627334594727
    7. ' check' → logprob: -4.917627334594727
    8. ' ' → logprob: -5.042627334594727
    9. ' principal' → logprob: -5.167627334594727
    10. ' to' → logprob: -5.167627334594727

Token 127: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11577730625867844
    2. ':' → logprob: -2.6157772541046143
    3. 'def' → logprob: -3.7407772541046143
    4. '    
' → logprob: -5.240777492523193
    5. '
' → logprob: -6.490777492523193
    6. ':
' → logprob: -6.615777492523193
    7. ' qui' → logprob: -7.240777492523193
    8. ' :' → logprob: -7.240777492523193
    9. ' def' → logprob: -7.865777492523193
    10. ' pour' → logprob: -7.990777492523193

Token 128: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0070059094578027725
    2. '    
' → logprob: -5.13200569152832
    3. ' 
' → logprob: -8.13200569152832
    4. '
' → logprob: -8.25700569152832
    5. '    ' → logprob: -8.38200569152832
    6. '  
' → logprob: -9.25700569152832
    7. '   
' → logprob: -9.50700569152832
    8. 'def' → logprob: -10.38200569152832
    9. '  ' → logprob: -10.50700569152832
    10. ' ' → logprob: -10.75700569152832

Token 129: ' Lit' (ID: 45595)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.011896217241883278
    2. '    
' → logprob: -5.011896133422852
    3. '
' → logprob: -5.886896133422852
    4. 'x' → logprob: -7.511896133422852
    5. ' 
' → logprob: -7.511896133422852
    6. ' x' → logprob: -8.636896133422852
    7. 'n' → logprob: -9.011896133422852
    8. '#' → logprob: -9.136896133422852
    9. 'print' → logprob: -9.136896133422852
    10. '   
' → logprob: -9.136896133422852

Token 130: ' deux' (ID: 10301)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7398048043251038
    2. '()' → logprob: -0.9898048043251038
    3. '   ' → logprob: -3.364804744720459
    4. ' un' → logprob: -3.489804744720459
    5. ' une' → logprob: -3.489804744720459
    6. ' des' → logprob: -4.364804744720459
    7. ' la' → logprob: -4.739804744720459
    8. ' les' → logprob: -4.739804744720459
    9. ' l' → logprob: -4.989804744720459
    10. '(' → logprob: -6.114804744720459

Token 131: ' ent' (ID: 1121)
  Prédit: ' ent'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ent' → logprob: -0.1396288424730301
    2. ' valeurs' → logprob: -2.5146288871765137
    3. ' nombres' → logprob: -3.7646288871765137
    4. ' ' → logprob: -4.639628887176514
    5. 'ent' → logprob: -4.764628887176514
    6. ' integers' → logprob: -5.264628887176514
    7. ' entier' → logprob: -6.764628887176514
    8. 'val' → logprob: -8.139628410339355
    9. ' ' → logprob: -8.139628410339355
    10. ' int' → logprob: -8.264628410339355

Token 132: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.16698719561100006
    2. 'ières' → logprob: -2.916987180709839
    3. 'rees' → logprob: -3.166987180709839
    4. 'r' → logprob: -3.291987180709839
    5. 'ier' → logprob: -4.666987419128418
    6. 't' → logprob: -6.041987419128418
    7. 'rée' → logprob: -6.041987419128418
    8. 'ers' → logprob: -6.541987419128418
    9. '   ' → logprob: -6.791987419128418
    10. 'er' → logprob: -7.416987419128418

Token 133: ' depuis' (ID: 16277)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.7228542566299438
    2. ' depuis' → logprob: -0.9728542566299438
    3. ' à' → logprob: -3.8478541374206543
    4. ' de' → logprob: -3.9728541374206543
    5. ' au' → logprob: -3.9728541374206543
    6. ' et' → logprob: -3.9728541374206543
    7. ' ' → logprob: -3.9728541374206543
    8. ' ,' → logprob: -4.597854137420654
    9. 'from' → logprob: -5.097854137420654
    10. ' from' → logprob: -5.222854137420654

Token 134: ' l' (ID: 305)
  Prédit: ' l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.19720683991909027
    2. ' input' → logprob: -2.572206735610962
    3. 'l' → logprob: -2.947206735610962
    4. ' ' → logprob: -3.572206735610962
    5. 'input' → logprob: -4.072206974029541
    6. ' la' → logprob: -6.322206974029541
    7. ' ' → logprob: -6.697206974029541
    8. '	l' → logprob: -8.072206497192383
    9. ' stdin' → logprob: -8.947206497192383
    10. ' le' → logprob: -9.009706497192383

Token 135: ''entrée' (ID: 115820)
  Prédit: ''entrée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''entrée' → logprob: -0.34163299202919006
    2. ''' → logprob: -2.2166330814361572
    3. 'a' → logprob: -2.2166330814361572
    4. ''utilisateur' → logprob: -3.2166330814361572
    5. 'e' → logprob: -3.9666330814361572
    6. 'input' → logprob: -5.341632843017578
    7. '   ' → logprob: -6.591632843017578
    8. 'entrée' → logprob: -6.716632843017578
    9. 'es' → logprob: -7.091632843017578
    10. 'u' → logprob: -7.591632843017578

Token 136: ' standard' (ID: 7024)
  Prédit: ' standard'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' standard' → logprob: -0.016069913282990456
    2. 'standard' → logprob: -4.3910698890686035
    3. ' utilisateur' → logprob: -5.7660698890686035
    4. ',' → logprob: -8.141070365905762
    5. 's' → logprob: -10.641070365905762
    6. 'Standard' → logprob: -11.016070365905762
    7. ' ' → logprob: -11.141070365905762
    8. '   ' → logprob: -11.516070365905762
    9. ' user' → logprob: -11.641070365905762
    10. '()' → logprob: -11.766070365905762

Token 137: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.004403651691973209
    2. ' ,' → logprob: -5.879403591156006
    3. ' ' → logprob: -7.129403591156006
    4. ' et' → logprob: -7.379403591156006
    5. '   ' → logprob: -9.754404067993164
    6. '()' → logprob: -10.629404067993164
    7. '.' → logprob: -11.004404067993164
    8. 'et' → logprob: -11.004404067993164
    9. '(),' → logprob: -11.004404067993164
    10. ',
' → logprob: -11.754404067993164

Token 138: ' puis' (ID: 18766)
  Prédit: ' les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.24700728058815002
    2. ' puis' → logprob: -2.122007369995117
    3. ' appelle' → logprob: -2.747007369995117
    4. ' compare' → logprob: -4.872007369995117
    5. ' compares' → logprob: -5.372007369995117
    6. '   ' → logprob: -5.497007369995117
    7. ' effect' → logprob: -5.622007369995117
    8. ' et' → logprob: -5.747007369995117
    9. ' appels' → logprob: -6.622007369995117
    10. ' crée' → logprob: -7.122007369995117

Token 139: ' affiche' (ID: 127479)
  Prédit: ' appelle'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' appelle' → logprob: -0.04887484759092331
    2. ' les' → logprob: -3.298874855041504
    3. ' affiche' → logprob: -6.048874855041504
    4. ' vér' → logprob: -6.298874855041504
    5. ' appel' → logprob: -7.048874855041504
    6. ' utilise' → logprob: -7.298874855041504
    7. ' appels' → logprob: -7.298874855041504
    8. ' appeler' → logprob: -7.298874855041504
    9. ' compare' → logprob: -8.048874855041504
    10. ' ' → logprob: -8.048874855041504

Token 140: ' le' (ID: 505)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.413996160030365
    2. ' le' → logprob: -1.9139962196350098
    3. ' ' → logprob: -2.0389962196350098
    4. ' la' → logprob: -3.5389962196350098
    5. '(check' → logprob: -4.66399621963501
    6. '(
' → logprob: -4.91399621963501
    7. '("' → logprob: -5.28899621963501
    8. ' leur' → logprob: -5.66399621963501
    9. ' l' → logprob: -6.03899621963501
    10. 'leur' → logprob: -7.41399621963501

Token 141: ' résultat' (ID: 62556)
  Prédit: ' résultat'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' résultat' → logprob: -0.06888967007398605
    2. 'result' → logprob: -3.693889617919922
    3. 'rés' → logprob: -3.693889617919922
    4. ' resultat' → logprob: -4.568889617919922
    5. ' result' → logprob: -5.693889617919922
    6. 'r' → logprob: -6.568889617919922
    7. ' ' → logprob: -8.193889617919922
    8. ' résultats' → logprob: -8.568889617919922
    9. ' rés' → logprob: -8.568889617919922
    10. 'Rés' → logprob: -8.568889617919922

Token 142: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.001011730288155377
    2. ' du' → logprob: -7.126011848449707
    3. 'de' → logprob: -9.001011848449707
    4. ' ' → logprob: -9.751011848449707
    5. '   ' → logprob: -11.626011848449707
    6. ' obtenu' → logprob: -11.876011848449707
    7. ' of' → logprob: -12.501011848449707
    8. ' d' → logprob: -14.001011848449707
    9. ' obten' → logprob: -14.001011848449707
    10. 'du' → logprob: -14.501011848449707

Token 143: ' la' (ID: 557)
  Prédit: ' check'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' check' → logprob: -0.005903434474021196
    2. ' ' → logprob: -5.380903244018555
    3. ' l' → logprob: -7.255903244018555
    4. ' la' → logprob: -7.880903244018555
    5. ' ' → logprob: -8.880903244018555
    6. 'check' → logprob: -10.255903244018555
    7. '(check' → logprob: -11.755903244018555
    8. 'l' → logprob: -12.630903244018555
    9. '	check' → logprob: -12.880903244018555
    10. '  ' → logprob: -12.880903244018555

Token 144: ' comparaison' (ID: 170508)
  Prédit: ' check'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' check' → logprob: -0.462968111038208
    2. ' fonction' → logprob: -1.087968111038208
    3. 'fonction' → logprob: -4.712967872619629
    4. ' function' → logprob: -4.837967872619629
    5. ' vér' → logprob: -4.837967872619629
    6. ' comparaison' → logprob: -5.462967872619629
    7. ' ' → logprob: -6.337967872619629
    8. 'check' → logprob: -6.962967872619629
    9. ' call' → logprob: -7.087967872619629
    10. ' ' → logprob: -8.337967872619629

Token 145: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8676883578300476
    2. '.' → logprob: -1.3676884174346924
    3. ' des' → logprob: -2.1176884174346924
    4. ' entre' → logprob: -2.1176884174346924
    5. ' ' → logprob: -2.9926884174346924
    6. '    
' → logprob: -3.8676884174346924
    7. ' de' → logprob: -5.367688179016113
    8. ' ' → logprob: -6.742688179016113
    9. ' between' → logprob: -6.992688179016113
    10. ',' → logprob: -6.992688179016113

Token 146: '   ' (ID: 271)
  Prédit: ' des'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' des' → logprob: -0.30740997195243835
    2. '.' → logprob: -1.9324100017547607
    3. '   ' → logprob: -2.6824100017547607
    4. ' entre' → logprob: -3.8074100017547607
    5. ' ' → logprob: -4.557409763336182
    6. ' de' → logprob: -4.932409763336182
    7. ' en' → logprob: -5.557409763336182
    8. 'des' → logprob: -6.057409763336182
    9. '    
' → logprob: -6.307409763336182
    10. '.
' → logprob: -7.057409763336182

Token 147: ' selon' (ID: 27571)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.8528957962989807
    2. ' des' → logprob: -0.8528957962989807
    3. ' entre' → logprob: -2.602895736694336
    4. '   ' → logprob: -3.477895736694336
    5. ' ' → logprob: -4.227895736694336
    6. ' de' → logprob: -4.602895736694336
    7. ' en' → logprob: -5.602895736694336
    8. '    
' → logprob: -5.852895736694336
    9. 'des' → logprob: -5.977895736694336
    10. '.
' → logprob: -6.477895736694336

Token 148: ' les' (ID: 1341)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.39585354924201965
    2. ' check' → logprob: -1.1458535194396973
    3. ' l' → logprob: -5.520853519439697
    4. ' le' → logprob: -6.020853519439697
    5. ' leur' → logprob: -7.020853519439697
    6. ' ' → logprob: -7.020853519439697
    7. ' the' → logprob: -8.395853996276855
    8. ' les' → logprob: -9.020853996276855
    9. ' ' → logprob: -9.270853996276855
    10. 'check' → logprob: -10.145853996276855

Token 149: ' spéc' (ID: 20135)
  Prédit: ' critères'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' critères' → logprob: -0.562052845954895
    2. ' résultats' → logprob: -1.437052845954895
    3. ' règles' → logprob: -2.1870527267456055
    4. ' valeurs' → logprob: -3.4370527267456055
    5. ' instructions' → logprob: -4.1870527267456055
    6. ' conditions' → logprob: -5.1870527267456055
    7. ' résultat' → logprob: -5.1870527267456055
    8. ' fonctions' → logprob: -5.6870527267456055
    9. ' crit' → logprob: -5.9370527267456055
    10. ' check' → logprob: -6.4370527267456055

Token 150: 'ifications' (ID: 9110)
  Prédit: 'ifications'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ifications' → logprob: -0.023454755544662476
    2. 'ific' → logprob: -3.7734546661376953
    3. 'ification' → logprob: -9.773454666137695
    4. 'ificat' → logprob: -10.148454666137695
    5. 'ifiés' → logprob: -10.148454666137695
    6. 'ifi' → logprob: -10.523454666137695
    7. 'if' → logprob: -10.898454666137695
    8. 'ications' → logprob: -11.898454666137695
    9. 'ifiques' → logprob: -12.398454666137695
    10. 'ifié' → logprob: -12.523454666137695

Token 151: ' de' (ID: 334)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.8587085008621216
    2. ' de' → logprob: -1.4837085008621216
    3. ' données' → logprob: -1.4837085008621216
    4. ' du' → logprob: -2.983708381652832
    5. 'de' → logprob: -3.483708381652832
    6. '   ' → logprob: -4.108708381652832
    7. ' fourn' → logprob: -4.733708381652832
    8. 'du' → logprob: -5.608708381652832
    9. 'def' → logprob: -6.108708381652832
    10. 'd' → logprob: -6.233708381652832

Token 152: ' la' (ID: 557)
  Prédit: ' check'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' check' → logprob: -0.12774665653705597
    2. ' la' → logprob: -2.12774658203125
    3. ' ' → logprob: -7.87774658203125
    4. ' l' → logprob: -8.75274658203125
    5. 'check' → logprob: -9.50274658203125
    6. ' ' → logprob: -9.50274658203125
    7. ' def' → logprob: -10.12774658203125
    8. ' the' → logprob: -10.62774658203125
    9. '	check' → logprob: -10.62774658203125
    10. 'la' → logprob: -11.12774658203125

Token 153: ' fonction' (ID: 17610)
  Prédit: ' check'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' check' → logprob: -0.18046574294567108
    2. 'check' → logprob: -1.8054656982421875
    3. 'def' → logprob: -8.180465698242188
    4. 'fonction' → logprob: -8.555465698242188
    5. ' function' → logprob: -9.680465698242188
    6. '`' → logprob: -10.305465698242188
    7. ' def' → logprob: -10.305465698242188
    8. 'function' → logprob: -10.430465698242188
    9. ' fonction' → logprob: -10.930465698242188
    10. '```' → logprob: -11.180465698242188

Token 154: ' check' (ID: 2371)
  Prédit: ' check'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' check' → logprob: -0.00413942988961935
    2. 'check' → logprob: -5.504139423370361
    3. ' `' → logprob: -10.25413990020752
    4. '`' → logprob: -11.37913990020752
    5. ' ' → logprob: -11.87913990020752
    6. '   ' → logprob: -13.37913990020752
    7. '```' → logprob: -14.12913990020752
    8. '	check' → logprob: -14.25413990020752
    9. ' '' → logprob: -14.50413990020752
    10. '"' → logprob: -14.50413990020752

Token 155: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -8.602024900028482e-05
    2. '_val' → logprob: -10.000085830688477
    3. '_' → logprob: -10.125085830688477
    4. ' _' → logprob: -16.000085830688477
    5. 'val' → logprob: -16.375085830688477
    6. '_Value' → logprob: -16.500085830688477
    7. '_values' → logprob: -16.750085830688477
    8. '_va' → logprob: -17.125085830688477
    9. '_VALUE' → logprob: -17.250085830688477
    10. 'value' → logprob: -17.250085830688477

Token 156: '.
' (ID: 558)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.6748365759849548
    2. '   ' → logprob: -1.1748366355895996
    3. '(x' → logprob: -1.9248366355895996
    4. '.
' → logprob: -3.4248366355895996
    5. '(' → logprob: -6.2998366355896
    6. '
' → logprob: -7.7998366355896
    7. '.

' → logprob: -8.174836158752441
    8. ',' → logprob: -8.299836158752441
    9. ').' → logprob: -9.049836158752441
    10. '(
' → logprob: -9.174836158752441

Token 157: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04902922362089157
    2. '
' → logprob: -3.2990291118621826
    3. '    
' → logprob: -4.549029350280762
    4. ' 
' → logprob: -9.299029350280762
    5. '   
' → logprob: -9.674029350280762
    6. '  
' → logprob: -9.924029350280762
    7. '```' → logprob: -10.174029350280762
    8. 'import' → logprob: -11.049029350280762
    9. ')' → logprob: -11.174029350280762
    10. 'def' → logprob: -11.299029350280762

Token 158: ' """
' (ID: 7037)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.12375618517398834
    2. '
' → logprob: -2.498756170272827
    3. '    
' → logprob: -3.873756170272827
    4. 'import' → logprob: -4.623756408691406
    5. 'x' → logprob: -6.373756408691406
    6. '   
' → logprob: -7.498756408691406
    7. ' 
' → logprob: -7.623756408691406
    8. '  
' → logprob: -8.248756408691406
    9. '```' → logprob: -8.748756408691406
    10. ' ' → logprob: -9.623756408691406

Token 159: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.007296385709196329
    2. 'x' → logprob: -5.132296562194824
    3. 'import' → logprob: -7.382296562194824
    4. ' x' → logprob: -8.257296562194824
    5. '    
' → logprob: -8.757296562194824
    6. 'try' → logprob: -9.007296562194824
    7. '
' → logprob: -9.757296562194824
    8. ' try' → logprob: -9.757296562194824
    9. ' import' → logprob: -10.007296562194824
    10. '    ' → logprob: -11.132296562194824

Token 160: ' #' (ID: 1069)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.011032376438379288
    2. ' x' → logprob: -4.761032581329346
    3. 'try' → logprob: -6.261032581329346
    4. 'import' → logprob: -8.511032104492188
    5. '   ' → logprob: -8.761032104492188
    6. ' try' → logprob: -8.886032104492188
    7. ' import' → logprob: -12.136032104492188
    8. '#' (adapté à ' #') → logprob: -14.136032104492188
    9. '    
' → logprob: -14.386032104492188
    10. 'while' → logprob: -14.761032104492188

Token 161: ' Lecture' (ID: 106534)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.1339106261730194
    2. 'try' → logprob: -2.633910655975342
    3. ' x' → logprob: -3.508910655975342
    4. ' try' → logprob: -3.883910655975342
    5. 'import' → logprob: -6.258910655975342
    6. '   ' → logprob: -8.133910179138184
    7. 'value' → logprob: -8.758910179138184
    8. ' import' → logprob: -8.883910179138184
    9. 'val' → logprob: -9.258910179138184
    10. '#' → logprob: -9.383910179138184

Token 162: ' de' (ID: 334)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.517612874507904
    2. '(' → logprob: -1.2676129341125488
    3. '()' → logprob: -2.517612934112549
    4. ' (' → logprob: -4.392612934112549
    5. ' des' → logprob: -4.892612934112549
    6. ' ' → logprob: -5.142612934112549
    7. 'x' → logprob: -5.767612934112549
    8. ' x' → logprob: -5.892612934112549
    9. '    ' → logprob: -6.142612934112549
    10. ' =' → logprob: -6.267612934112549

Token 163: ' deux' (ID: 10301)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.49919092655181885
    2. ' ' → logprob: -1.6241909265518188
    3. ' la' → logprob: -2.7491908073425293
    4. 'x' → logprob: -2.8741908073425293
    5. ' l' → logprob: -3.1241908073425293
    6. ' deux' → logprob: -4.499190807342529
    7. ' input' → logprob: -4.624190807342529
    8. 'l' → logprob: -5.624190807342529
    9. ' two' → logprob: -6.624190807342529
    10. 'input' → logprob: -7.249190807342529

Token 164: ' ent' (ID: 1121)
  Prédit: ' ent'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ent' → logprob: -0.014357770793139935
    2. 'ent' → logprob: -4.764357566833496
    3. ' valeurs' → logprob: -6.264357566833496
    4. ' integers' → logprob: -6.389357566833496
    5. ' nombres' → logprob: -6.514357566833496
    6. ' entier' → logprob: -8.514357566833496
    7. ' ' → logprob: -8.639357566833496
    8. ' int' → logprob: -9.139357566833496
    9. 'int' → logprob: -9.889357566833496
    10. 'val' → logprob: -9.889357566833496

Token 165: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.2879372537136078
    2. 't' → logprob: -1.4129372835159302
    3. 'ti' → logprob: -5.662937164306641
    4. 'tiers' → logprob: -6.662937164306641
    5. 'tries' → logprob: -7.537937164306641
    6. '   ' → logprob: -7.662937164306641
    7. 'tiens' → logprob: -8.91293716430664
    8. 'tes' → logprob: -9.03793716430664
    9. 'ières' → logprob: -9.03793716430664
    10. 'ts' → logprob: -9.16293716430664

Token 166: ' sépar' (ID: 97160)
  Prédit: ' x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' x' → logprob: -1.037736177444458
    2. '   ' → logprob: -1.287736177444458
    3. ',' → logprob: -1.412736177444458
    4. 'x' → logprob: -2.287736177444458
    5. ' ,' → logprob: -4.912735939025879
    6. '    
' → logprob: -4.912735939025879
    7. 's' → logprob: -5.162735939025879
    8. ' ' → logprob: -7.287735939025879
    9. 'import' → logprob: -7.537735939025879
    10. ' =' → logprob: -7.787735939025879

Token 167: 'és' (ID: 1756)
  Prédit: 'és'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'és' → logprob: -0.0029277801513671875
    2. 'é' → logprob: -5.877927780151367
    3. 'es' → logprob: -9.377927780151367
    4. 's' → logprob: -11.752927780151367
    5. 'ée' → logprob: -12.002927780151367
    6. 'ées' → logprob: -12.252927780151367
    7. 'ès' → logprob: -12.377927780151367
    8. 'e' → logprob: -12.377927780151367
    9. 'er' → logprob: -12.877927780151367
    10. 'par' → logprob: -13.127927780151367

Token 168: ' par' (ID: 686)
  Prédit: ' par'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' par' → logprob: -0.015575584955513477
    2. 'par' → logprob: -4.515575408935547
    3. ',' → logprob: -5.890575408935547
    4. ' ' → logprob: -7.140575408935547
    5. ' by' → logprob: -7.890575408935547
    6. 'es' → logprob: -9.015575408935547
    7. 's' → logprob: -9.140575408935547
    8. ')' → logprob: -10.265575408935547
    9. 'e' → logprob: -10.390575408935547
    10. '   ' → logprob: -10.640575408935547

Token 169: ' un' (ID: 537)
  Prédit: ' un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.01845754124224186
    2. 'un' → logprob: -4.768457412719727
    3. ' espace' → logprob: -5.518457412719727
    4. ' ' → logprob: -6.018457412719727
    5. ' une' → logprob: -6.893457412719727
    6. ' espaces' → logprob: -7.643457412719727
    7. 'space' → logprob: -7.768457412719727
    8. ''un' → logprob: -7.893457412719727
    9. ' ' → logprob: -8.518457412719727
    10. ' space' → logprob: -8.768457412719727

Token 170: ' espace' (ID: 66004)
  Prédit: ' espace'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' espace' → logprob: -0.6677772998809814
    2. 'es' → logprob: -1.0427772998809814
    3. ''espace' → logprob: -2.5427772998809814
    4. 'space' → logprob: -4.292777061462402
    5. ' ' → logprob: -4.667777061462402
    6. 'e' → logprob: -4.667777061462402
    7. 'esp' → logprob: -4.792777061462402
    8. ''' → logprob: -5.042777061462402
    9. ' espaces' → logprob: -5.917777061462402
    10. ' space' → logprob: -6.167777061462402

Token 171: ' à' (ID: 1221)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6212167739868164
    2. '
' → logprob: -1.9962167739868164
    3. 'x' → logprob: -2.1212167739868164
    4. '    
' → logprob: -2.6212167739868164
    5. 's' → logprob: -2.9962167739868164
    6. ',' → logprob: -3.7462167739868164
    7. 'input' → logprob: -3.8712167739868164
    8. 'n' → logprob: -4.621216773986816
    9. ' line' → logprob: -4.871216773986816
    10. ' x' → logprob: -5.121216773986816

Token 172: ' partir' (ID: 12100)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.4455212652683258
    2. ' input' → logprob: -1.9455212354660034
    3. ' l' → logprob: -2.195521354675293
    4. 'input' → logprob: -2.445521354675293
    5. ' ' → logprob: -5.320521354675293
    6. ' partir' → logprob: -5.570521354675293
    7. '=input' → logprob: -6.320521354675293
    8. ' ' → logprob: -6.570521354675293
    9. 'la' → logprob: -6.695521354675293
    10. 'n' → logprob: -6.820521354675293

Token 173: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.04912502318620682
    2. ' d' → logprob: -3.1741249561309814
    3. 'de' → logprob: -5.6741251945495605
    4. ' input' → logprob: -6.1741251945495605
    5. 'd' → logprob: -8.299124717712402
    6. '   ' → logprob: -9.049124717712402
    7. ' ' → logprob: -10.049124717712402
    8. ' du' → logprob: -10.049124717712402
    9. 'input' → logprob: -10.049124717712402
    10. ' of' → logprob: -10.299124717712402

Token 174: ' l' (ID: 305)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.19254937767982483
    2. ' l' → logprob: -1.9425493478775024
    3. 'input' → logprob: -4.192549228668213
    4. 'l' → logprob: -4.192549228668213
    5. ' la' → logprob: -6.817549228668213
    6. ' ' → logprob: -8.567549705505371
    7. ' ' → logprob: -9.192549705505371
    8. ' une' → logprob: -10.067549705505371
    9. 'la' → logprob: -10.317549705505371
    10. '=input' → logprob: -10.692549705505371

Token 175: ''entrée' (ID: 115820)
  Prédit: ''entrée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''entrée' → logprob: -0.28825703263282776
    2. 'input' → logprob: -1.6632570028305054
    3. 'entrée' → logprob: -3.913257122039795
    4. 'a' → logprob: -3.913257122039795
    5. 'e' → logprob: -4.663257122039795
    6. ''' → logprob: -4.788257122039795
    7. ' input' → logprob: -6.038257122039795
    8. ''utilisateur' → logprob: -8.538256645202637
    9. '’entrée' → logprob: -9.038256645202637
    10. 'es' → logprob: -9.163256645202637

Token 176: ' standard' (ID: 7024)
  Prédit: ' standard'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' standard' → logprob: -0.034997884184122086
    2. 'standard' → logprob: -3.5349979400634766
    3. ' input' → logprob: -5.909997940063477
    4. 'input' → logprob: -7.159997940063477
    5. ' utilisateur' → logprob: -7.159997940063477
    6. '()' → logprob: -7.784997940063477
    7. ' ' → logprob: -8.909997940063477
    8. ' user' → logprob: -9.284997940063477
    9. 'stdin' → logprob: -9.909997940063477
    10. 'user' → logprob: -10.409997940063477

Token 177: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07518602907657623
    2. '    
' → logprob: -3.075186014175415
    3. '
' → logprob: -3.700186014175415
    4. '  
' → logprob: -7.825186252593994
    5. '   
' → logprob: -7.825186252593994
    6. 'x' → logprob: -8.825185775756836
    7. ',' → logprob: -9.075185775756836
    8. ':' → logprob: -9.450185775756836
    9. '\n' → logprob: -9.575185775756836
    10. 'input' → logprob: -9.825185775756836

Token 178: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05788525193929672
    2. 'x' → logprob: -3.43288516998291
    3. ' x' → logprob: -4.18288516998291
    4. '    
' → logprob: -5.43288516998291
    5. 'input' → logprob: -6.30788516998291
    6. ' line' → logprob: -7.55788516998291
    7. ' input' → logprob: -7.68288516998291
    8. ' 
' → logprob: -8.18288516998291
    9. 'n' → logprob: -8.80788516998291
    10. 'a' → logprob: -8.93288516998291

Token 179: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' (adapté à ' x') → logprob: -0.08149580657482147
    2. ' x' → logprob: -2.581495761871338
    3. 'val' → logprob: -6.956495761871338
    4. 'values' → logprob: -7.706495761871338
    5. ' line' → logprob: -8.456496238708496
    6. ' values' → logprob: -8.581496238708496
    7. 'line' → logprob: -8.831496238708496
    8. '   ' → logprob: -8.956496238708496
    9. 'input' → logprob: -8.956496238708496
    10. 'user' → logprob: -9.331496238708496

Token 180: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -4.127333340875339e-06
    2. ',a' → logprob: -12.875003814697266
    3. ' ,' → logprob: -13.625003814697266
    4. 'a' → logprob: -15.125003814697266
    5. ',
' → logprob: -17.000003814697266
    6. ',int' → logprob: -18.125003814697266
    7. 's' → logprob: -18.375003814697266
    8. '_,' → logprob: -19.125003814697266
    9. '‌,' → logprob: -19.250003814697266
    10. ',\
' → logprob: -19.250003814697266

Token 181: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.5759593844413757
    2. 'a' → logprob: -0.8259593844413757
    3. ' ' → logprob: -10.950959205627441
    4. '	a' → logprob: -14.200959205627441
    5. '<|end|>' → logprob: -14.700959205627441
    6. ' ' → logprob: -14.825959205627441
    7. '  ' → logprob: -15.450959205627441
    8. '_a' → logprob: -15.575959205627441
    9. '>a' → logprob: -16.450960159301758
    10. '    ' → logprob: -16.575960159301758

Token 182: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.029751179739832878
    2. '=' → logprob: -3.5297510623931885
    3. ' ' → logprob: -15.15475082397461
    4. '=input' → logprob: -15.65475082397461
    5. ')' → logprob: -15.77975082397461
    6. ',' → logprob: -16.65475082397461
    7. ' ' → logprob: -17.52975082397461
    8. '=int' → logprob: -17.52975082397461
    9. ' =
' → logprob: -18.15475082397461
    10. ')=' → logprob: -18.90475082397461

Token 183: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.012514711357653141
    2. 'map' → logprob: -4.387514591217041
    3. ' ' → logprob: -13.6375150680542
    4. ' ' → logprob: -13.7625150680542
    5. ' input' → logprob: -13.8875150680542
    6. '	map' → logprob: -14.0125150680542
    7. '[' → logprob: -15.1375150680542
    8. ' [' → logprob: -15.2625150680542
    9. 'input' → logprob: -15.6375150680542
    10. ' list' → logprob: -15.8875150680542

Token 184: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.008667164482176304
    2. '(' → logprob: -4.7586669921875
    3. 'int' → logprob: -10.0086669921875
    4. '(
' → logprob: -12.7586669921875
    5. ' int' → logprob: -13.3836669921875
    6. '(input' → logprob: -13.5086669921875
    7. ' (' → logprob: -14.1336669921875
    8. '<int' → logprob: -14.8836669921875
    9. '[int' → logprob: -15.3836669921875
    10. '=int' → logprob: -15.8836669921875

Token 185: ',' (ID: 11)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.3769877552986145
    2. '(input' → logprob: -1.3769876956939697
    3. ',input' → logprob: -3.6269876956939697
    4. ')' → logprob: -4.376987934112549
    5. ',' → logprob: -4.501987934112549
    6. ' input' → logprob: -4.626987934112549
    7. '(' → logprob: -6.751987934112549
    8. '   ' → logprob: -8.37698745727539
    9. ' (' → logprob: -9.12698745727539
    10. ' )' → logprob: -9.87698745727539

Token 186: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.2014157623052597
    2. 'input' → logprob: -1.701415777206421
    3. '(input' → logprob: -13.701416015625
    4. ')' → logprob: -14.201416015625
    5. '	input' → logprob: -15.701416015625
    6. '=input' → logprob: -15.701416015625
    7. ',input' → logprob: -15.826416015625
    8. ' )' → logprob: -16.326416015625
    9. '   ' → logprob: -16.451416015625
    10. ' ' → logprob: -16.951416015625

Token 187: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0019511326681822538
    2. '()' → logprob: -6.251951217651367
    3. '())' → logprob: -10.876951217651367
    4. ' ().' → logprob: -13.376951217651367
    5. '(' → logprob: -14.251951217651367
    6. ')' → logprob: -14.376951217651367
    7. '()
' → logprob: -14.876951217651367
    8. '("").' → logprob: -16.376951217651367
    9. '()).' → logprob: -16.751951217651367
    10. ' ()' → logprob: -16.876951217651367

Token 188: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00043102685594931245
    2. 'strip' → logprob: -7.750431060791016
    3. ' split' → logprob: -15.000431060791016
    4. 'rstrip' → logprob: -17.625431060791016
    5. 'spl' → logprob: -18.750431060791016
    6. '(split' → logprob: -18.875431060791016
    7. '.split' → logprob: -19.875431060791016
    8. 'read' → logprob: -20.875431060791016
    9. ')' → logprob: -21.500431060791016
    10. ' strip' → logprob: -21.500431060791016

Token 189: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.004942700732499361
    2. '()))' → logprob: -5.629942893981934
    3. '()' → logprob: -6.879942893981934
    4. ')' → logprob: -8.254942893981934
    5. '))' → logprob: -10.504942893981934
    6. '())
' → logprob: -11.504942893981934
    7. '(' → logprob: -11.629942893981934
    8. ' ())' → logprob: -12.254942893981934
    9. '()))
' → logprob: -13.629942893981934
    10. '('' → logprob: -14.879942893981934

Token 190: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0554482601583004
    2. 'print' → logprob: -2.930448293685913
    3. ' print' → logprob: -7.930448055267334
    4. 'result' → logprob: -9.305448532104492
    5. '    
' → logprob: -9.555448532104492
    6. '
' → logprob: -10.180448532104492
    7. ' result' → logprob: -13.305448532104492
    8. '```' → logprob: -13.930448532104492
    9. '	print' → logprob: -13.930448532104492
    10. '  
' → logprob: -14.055448532104492

Token 191: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.030039029195904732
    2. 'result' → logprob: -3.530039072036743
    3. ' print' → logprob: -8.280038833618164
    4. ' result' → logprob: -10.530038833618164
    5. '   ' → logprob: -11.905038833618164
    6. 'res' → logprob: -13.905038833618164
    7. 'r' → logprob: -16.030038833618164
    8. 'resultado' → logprob: -16.030038833618164
    9. 'value' → logprob: -16.655038833618164
    10. 'pr' → logprob: -16.905038833618164

Token 192: ' App' (ID: 2583)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.31799405813217163
    2. 'result' → logprob: -1.3179941177368164
    3. ' result' → logprob: -5.942994117736816
    4. ' print' → logprob: -6.192994117736816
    5. 'value' → logprob: -10.942994117736816
    6. 'res' → logprob: -11.567994117736816
    7. '   ' → logprob: -12.067994117736816
    8. 'pr' → logprob: -12.567994117736816
    9. 'rés' → logprob: -12.817994117736816
    10. '
' → logprob: -12.817994117736816

Token 193: 'el' (ID: 296)
  Prédit: 'el'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'el' → logprob: -0.1442064642906189
    2. 'eler' → logprob: -2.0192065238952637
    3. '   ' → logprob: -6.894206523895264
    4. '       ' → logprob: -9.394206047058105
    5. 'l' → logprob: -9.519206047058105
    6. '.py' → logprob: -9.769206047058105
    7. 'er' → logprob: -10.269206047058105
    8. 'pel' → logprob: -10.394206047058105
    9. 'ler' → logprob: -10.519206047058105
    10. 'le' → logprob: -10.894206047058105

Token 194: ' de' (ID: 334)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.039931997656822205
    2. ' result' → logprob: -4.414931774139404
    3. 'result' → logprob: -4.789931774139404
    4. ' de' → logprob: -5.164931774139404
    5. '_result' → logprob: -5.664931774139404
    6. ' print' → logprob: -5.789931774139404
    7. '(' → logprob: -6.039931774139404
    8. 'print' → logprob: -7.164931774139404
    9. ' resultat' → logprob: -7.414931774139404
    10. ' check' → logprob: -7.789931774139404

Token 195: ' la' (ID: 557)
  Prédit: ' check'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' check' → logprob: -0.39713573455810547
    2. 'check' → logprob: -1.3971357345581055
    3. 'print' → logprob: -2.6471357345581055
    4. ' print' → logprob: -4.6471357345581055
    5. ' la' → logprob: -12.147135734558105
    6. ' ' → logprob: -13.272135734558105
    7. '(check' → logprob: -14.147135734558105
    8. ' the' → logprob: -14.147135734558105
    9. '	check' → logprob: -14.522135734558105
    10. '_check' → logprob: -15.522135734558105

Token 196: ' fonction' (ID: 17610)
  Prédit: 'check'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'check' → logprob: -0.10791301727294922
    2. 'print' → logprob: -2.482913017272949
    3. 'result' → logprob: -4.357913017272949
    4. ' check' → logprob: -5.232913017272949
    5. 'fonction' → logprob: -7.982913017272949
    6. 'function' → logprob: -8.98291301727295
    7. ' print' → logprob: -9.23291301727295
    8. ' result' → logprob: -10.60791301727295
    9. 'value' → logprob: -11.85791301727295
    10. '
' → logprob: -11.85791301727295

Token 197: ' de' (ID: 334)
  Prédit: ' check'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' check' → logprob: -0.1287815123796463
    2. ' result' → logprob: -2.87878155708313
    3. ' print' → logprob: -3.25378155708313
    4. 'result' → logprob: -4.253781318664551
    5. 'check' → logprob: -4.753781318664551
    6. 'print' → logprob: -6.253781318664551
    7. '   ' → logprob: -7.253781318664551
    8. ' resultat' → logprob: -7.753781318664551
    9. ' résultat' → logprob: -9.75378131866455
    10. ' de' → logprob: -11.37878131866455

Token 198: ' comparaison' (ID: 170508)
  Prédit: 'check'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'check' → logprob: -0.4761222004890442
    2. ' check' → logprob: -0.9761222004890442
    3. 'r' → logprob: -6.9761223793029785
    4. 'print' → logprob: -8.72612190246582
    5. ' comparaison' → logprob: -8.72612190246582
    6. ' vér' → logprob: -8.97612190246582
    7. ' ' → logprob: -9.22612190246582
    8. 'c' → logprob: -9.47612190246582
    9. 'v' → logprob: -9.60112190246582
    10. 'compare' → logprob: -9.97612190246582

Token 199: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.011087201535701752
    2. 'result' → logprob: -5.386087417602539
    3. ' result' → logprob: -6.261087417602539
    4. ',' → logprob: -6.261087417602539
    5. ' print' → logprob: -6.511087417602539
    6. 'print' → logprob: -7.511087417602539
    7. ' et' → logprob: -7.886087417602539
    8. '    
' → logprob: -9.386087417602539
    9. ' and' → logprob: -10.386087417602539
    10. ')' → logprob: -11.261087417602539

Token 200: ' puis' (ID: 18766)
  Prédit: ' result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' result' → logprob: -0.483990341424942
    2. 'result' → logprob: -0.9839903116226196
    3. ' print' → logprob: -5.48399019241333
    4. '   ' → logprob: -5.60899019241333
    5. 'print' → logprob: -6.98399019241333
    6. ' resultat' → logprob: -7.35899019241333
    7. ' résultat' → logprob: -8.358990669250488
    8. ' res' → logprob: -9.233990669250488
    9. 'res' → logprob: -9.233990669250488
    10. ' resultado' → logprob: -10.233990669250488

Token 201: ' impression' (ID: 24462)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.10075380653142929
    2. 'print' → logprob: -2.3507537841796875
    3. ' affich' → logprob: -7.7257537841796875
    4. '   ' → logprob: -9.850753784179688
    5. ' afficher' → logprob: -10.725753784179688
    6. 'aff' → logprob: -11.100753784179688
    7. ' affiche' → logprob: -12.225753784179688
    8. ' prin' → logprob: -12.975753784179688
    9. '#' → logprob: -13.100753784179688
    10. ' ' → logprob: -14.100753784179688

Token 202: ' du' (ID: 1462)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10019480437040329
    2. '(check' → logprob: -3.1001946926116943
    3. '(result' → logprob: -3.6001946926116943
    4. ' du' → logprob: -4.225194931030273
    5. '()' → logprob: -6.350194931030273
    6. ' (' → logprob: -6.350194931030273
    7. '   ' → logprob: -6.600194931030273
    8. '(
' → logprob: -6.850194931030273
    9. '(print' → logprob: -7.350194931030273
    10. '(f' → logprob: -7.725194931030273

Token 203: ' résultat' (ID: 62556)
  Prédit: ' résultat'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' résultat' → logprob: -0.013116932474076748
    2. 'rés' → logprob: -4.513116836547852
    3. 'result' → logprob: -6.763116836547852
    4. ' resultat' → logprob: -7.638116836547852
    5. ' result' → logprob: -8.013116836547852
    6. ' rés' → logprob: -10.388116836547852
    7. ' résultats' → logprob: -10.513116836547852
    8. 'r' → logprob: -11.638116836547852
    9. ' check' → logprob: -11.638116836547852
    10. 'Rés' → logprob: -11.638116836547852

Token 204: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0005064461147412658
    2. ',' → logprob: -8.250506401062012
    3. ' print' → logprob: -9.500506401062012
    4. 'print' → logprob: -9.625506401062012
    5. '.' → logprob: -10.125506401062012
    6. '(' → logprob: -10.750506401062012
    7. 'result' → logprob: -11.250506401062012
    8. ' result' → logprob: -12.125506401062012
    9. ')' → logprob: -12.250506401062012
    10. '    
' → logprob: -12.250506401062012

Token 205: '   ' (ID: 271)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.20387399196624756
    2. 'print' → logprob: -2.078874111175537
    3. '   ' → logprob: -2.828874111175537
    4. ' result' → logprob: -8.703873634338379
    5. 'result' → logprob: -9.953873634338379
    6. '
' → logprob: -10.578873634338379
    7. '```' → logprob: -11.078873634338379
    8. '    
' → logprob: -11.453873634338379
    9. ' 
' → logprob: -11.828873634338379
    10. '	print' → logprob: -12.828873634338379

Token 206: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.009246796369552612
    2. ' print' → logprob: -4.759246826171875
    3. 'result' → logprob: -7.384246826171875
    4. ' result' → logprob: -11.884246826171875
    5. '   ' → logprob: -13.134246826171875
    6. 'pr' → logprob: -13.509246826171875
    7. 'prin' → logprob: -15.134246826171875
    8. 'r' → logprob: -16.009246826171875
    9. '```' → logprob: -16.009246826171875
    10. '
' → logprob: -16.259246826171875

Token 207: '(check' (ID: 40506)
  Prédit: '(check'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(check' → logprob: -0.011049943044781685
    2. '(' → logprob: -4.511049747467041
    3. '(
' → logprob: -13.5110502243042
    4. ' (' → logprob: -15.1360502243042
    5. '(

' → logprob: -15.8860502243042
    6. '(Check' → logprob: -16.136049270629883
    7. 'check' → logprob: -16.511049270629883
    8. '(c' → logprob: -17.511049270629883
    9. '(call' → logprob: -17.636049270629883
    10. '((' → logprob: -17.761049270629883

Token 208: '_value' (ID: 6734)
  Prédit: '_value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -2.45848218582978e-06
    2. '_val' → logprob: -13.25000286102295
    3. '_' → logprob: -14.25000286102295
    4. '_Value' → logprob: -19.750001907348633
    5. '_VALUE' → logprob: -20.375001907348633
    6. '_values' → logprob: -21.000001907348633
    7. ' _' → logprob: -21.125001907348633
    8. 'value' → logprob: -21.500001907348633
    9. '_va' → logprob: -21.500001907348633
    10. '_v' → logprob: -22.000001907348633

Token 209: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.126963809132576
    2. '(' → logprob: -2.1269638538360596
    3. ' (' → logprob: -10.37696361541748
    4. '(
' → logprob: -12.50196361541748
    5. ')' → logprob: -14.50196361541748
    6. 'x' → logprob: -15.37696361541748
    7. '(

' → logprob: -16.501964569091797
    8. ' ' → logprob: -17.001964569091797
    9. ')(' → logprob: -17.501964569091797
    10. ' x' → logprob: -18.251964569091797

Token 210: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0031379126012325287
    2. ',a' → logprob: -5.878138065338135
    3. ' ,' → logprob: -8.128137588500977
    4. 'a' → logprob: -10.253137588500977
    5. ' a' → logprob: -13.503137588500977
    6. ',
' → logprob: -14.128137588500977
    7. '   ' → logprob: -15.503137588500977
    8. ',x' → logprob: -16.628137588500977
    9. ' ' → logprob: -16.878137588500977
    10. '‌,' → logprob: -17.503137588500977

Token 211: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.5759400129318237
    2. ' a' → logprob: -0.8259400129318237
    3. ' ' → logprob: -15.450940132141113
    4. '	a' → logprob: -15.575940132141113
    5. ')' → logprob: -16.825939178466797
    6. '   ' → logprob: -16.950939178466797
    7. ')a' → logprob: -16.950939178466797
    8. '    ' → logprob: -17.325939178466797
    9. ' ' → logprob: -17.575939178466797
    10. '_a' → logprob: -18.450939178466797

Token 212: '))

' (ID: 9746)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0009164590737782419
    2. ')' → logprob: -7.000916481018066
    3. '))
' → logprob: -12.875916481018066
    4. ')))' → logprob: -13.500916481018066
    5. ' ))' → logprob: -14.000916481018066
    6. '()))' → logprob: -16.25091552734375
    7. ' ' → logprob: -17.25091552734375
    8. ')
' → logprob: -17.87591552734375
    9. '   ' → logprob: -17.87591552734375
    10. '))

' → logprob: -18.50091552734375

Token 213: '#' (ID: 2)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.01727696880698204
    2. '
' → logprob: -4.267276763916016
    3. '<|end|>' → logprob: -6.267276763916016
    4. '```' → logprob: -7.267276763916016
    5. ' if' → logprob: -8.142276763916016
    6. '\n' → logprob: -9.267276763916016
    7. '#' → logprob: -9.767276763916016
    8. '

' → logprob: -10.517276763916016
    9. 'print' → logprob: -11.267276763916016
    10. '\' → logprob: -11.392276763916016

Token 214: ' Ex' (ID: 1771)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.0002613358374219388
    2. ' if' → logprob: -8.250261306762695
    3. 'If' → logprob: -17.625261306762695
    4. '__' → logprob: -19.000261306762695
    5. 'i' → logprob: -21.000261306762695
    6. '```' → logprob: -21.250261306762695
    7. '#' → logprob: -22.000261306762695
    8. 'main' → logprob: -22.875261306762695
    9. ' If' → logprob: -23.500261306762695
    10. '_' → logprob: -23.625261306762695

Token 215: 'éc' (ID: 5675)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.025096019729971886
    2. 'ecute' → logprob: -3.9000959396362305
    3. 'ecut' → logprob: -6.2750959396362305
    4. 'e' → logprob: -6.6500959396362305
    5. 'ec' → logprob: -6.9000959396362305
    6. 'ecution' → logprob: -9.65009593963623
    7. ' if' → logprob: -9.65009593963623
    8. 'ecu' → logprob: -9.90009593963623
    9. 'éc' → logprob: -10.02509593963623
    10. 'ecutable' → logprob: -10.15009593963623

Token 216: 'ute' (ID: 1331)
  Prédit: 'ecute'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ecute' → logprob: -0.5728923678398132
    2. 'ute' → logprob: -1.072892427444458
    3. 'cute' → logprob: -3.072892427444458
    4. 'if' → logprob: -4.197892189025879
    5. 'ec' → logprob: -4.322892189025879
    6. 'ecution' → logprob: -4.947892189025879
    7. 'ecut' → logprob: -5.072892189025879
    8. 'ution' → logprob: -6.447892189025879
    9. 'uter' → logprob: -6.572892189025879
    10. 'cut' → logprob: -6.947892189025879

Token 217: ' la' (ID: 557)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.19222483038902283
    2. ' la' → logprob: -2.4422247409820557
    3. ' if' → logprob: -3.0672247409820557
    4. ' le' → logprob: -3.5672247409820557
    5. 'er' → logprob: -5.692224979400635
    6. '```' → logprob: -6.317224979400635
    7. ' main' → logprob: -6.442224979400635
    8. '_' → logprob: -6.942224979400635
    9. 'main' → logprob: -7.192224979400635
    10. 'le' → logprob: -7.317224979400635

Token 218: ' fonction' (ID: 17610)
  Prédit: ' script'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' script' → logprob: -0.8870640993118286
    2. ' main' → logprob: -1.2620640993118286
    3. '_' → logprob: -2.012063980102539
    4. ' programme' → logprob: -2.762063980102539
    5. 'if' → logprob: -3.387063980102539
    6. ' code' → logprob: -3.512063980102539
    7. 'main' → logprob: -4.762063980102539
    8. 's' → logprob: -4.887063980102539
    9. 'programme' → logprob: -5.262063980102539
    10. ' if' → logprob: -5.387063980102539

Token 219: ' principale' (ID: 68926)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.3947230577468872
    2. 'main' → logprob: -1.6447230577468872
    3. ' main' → logprob: -2.1447229385375977
    4. ' if' → logprob: -4.144722938537598
    5. '_main' → logprob: -9.894722938537598
    6. 'si' → logprob: -11.269722938537598
    7. '```' → logprob: -11.269722938537598
    8. ' si' → logprob: -11.769722938537598
    9. '	main' → logprob: -11.769722938537598
    10. '__' → logprob: -11.769722938537598

Token 220: ' si' (ID: 1784)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.1619383990764618
    2. 'if' → logprob: -1.9119384288787842
    3. '

' → logprob: -6.536938190460205
    4. ' if' → logprob: -8.411938667297363
    5. '
' → logprob: -10.536938667297363
    6. '\n' → logprob: -12.161938667297363
    7. ' 
' → logprob: -12.786938667297363
    8. '
    
' → logprob: -13.036938667297363
    9. '  
' → logprob: -14.036938667297363
    10. ',
' → logprob: -14.036938667297363

Token 221: ' ce' (ID: 2357)
  Prédit: ' __'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.03365837410092354
    2. '__' → logprob: -3.408658266067505
    3. ' ' → logprob: -11.658658027648926
    4. 'name' → logprob: -13.033658027648926
    5. ' ' → logprob: -14.408658027648926
    6. '_name' → logprob: -14.658658027648926
    7. ' name' → logprob: -15.658658027648926
    8. '/__' → logprob: -15.658658027648926
    9. ' "__' → logprob: -16.158658981323242
    10. ' ' → logprob: -16.158658981323242

Token 222: ' script' (ID: 11713)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.40025386214256287
    2. ' script' → logprob: -2.0252537727355957
    3. ' __' → logprob: -2.1502537727355957
    4. 'n' → logprob: -3.9002537727355957
    5. '_' → logprob: -4.400253772735596
    6. ' ' → logprob: -4.400253772735596
    7. 'est' → logprob: -5.150253772735596
    8. ' n' → logprob: -5.150253772735596
    9. '.py' → logprob: -5.150253772735596
    10. ' module' → logprob: -5.900253772735596

Token 223: ' est' (ID: 893)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.7951464056968689
    2. ' __' → logprob: -0.9201464056968689
    3. ' is' → logprob: -2.2951464653015137
    4. ' ==' → logprob: -3.2951464653015137
    5. ' est' → logprob: -5.420146465301514
    6. 'est' → logprob: -5.920146465301514
    7. 'is' → logprob: -6.170146465301514
    8. 'name' → logprob: -6.920146465301514
    9. '==' → logprob: -7.045146465301514
    10. ' ' → logprob: -8.420145988464355

Token 224: ' appelé' (ID: 101427)
  Prédit: ' __'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.28254422545433044
    2. '__' → logprob: -1.4075442552566528
    3. 'name' → logprob: -6.907544136047363
    4. ' "__' → logprob: -8.907544136047363
    5. ' exécut' → logprob: -9.282544136047363
    6. '_name' → logprob: -9.782544136047363
    7. ' run' → logprob: -10.782544136047363
    8. ' nommé' → logprob: -11.032544136047363
    9. ' name' → logprob: -11.282544136047363
    10. ' le' → logprob: -11.907544136047363

Token 225: ' directement' (ID: 52317)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.9911572933197021
    2. ' en' → logprob: -1.4911572933197021
    3. ' __' → logprob: -1.4911572933197021
    4. ' directement' → logprob: -2.491157293319702
    5. 'direct' → logprob: -2.741157293319702
    6. 'en' → logprob: -3.866157293319702
    7. ' directly' → logprob: -6.491157531738281
    8. '_name' → logprob: -6.616157531738281
    9. ' au' → logprob: -6.866157531738281
    10. 'au' → logprob: -7.116157531738281

Token 226: '.
' (ID: 558)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.13541783392429352
    2. '
' → logprob: -2.135417938232422
    3. ':
' → logprob: -5.135417938232422
    4. ' if' → logprob: -6.885417938232422
    5. '

' → logprob: -7.635417938232422
    6. '\n' → logprob: -8.260417938232422
    7. '  
' → logprob: -8.760417938232422
    8. '_
' → logprob: -8.885417938232422
    9. ':' → logprob: -9.010417938232422
    10. '.
' → logprob: -9.385417938232422

Token 227: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.16036009788513184
    2. '
' → logprob: -1.9103600978851318
    3. ' if' → logprob: -9.785360336303711
    4. '

' → logprob: -9.785360336303711
    5. '\n' → logprob: -11.410360336303711
    6. '```' → logprob: -12.410360336303711
    7. ' 
' → logprob: -12.535360336303711
    8. '  
' → logprob: -12.910360336303711
    9. '    
' → logprob: -13.660360336303711
    10. '
' → logprob: -14.785360336303711

Token 228: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.01105984952300787
    2. '__' → logprob: -4.511059761047363
    3. ' ' → logprob: -11.386059761047363
    4. '_' → logprob: -15.511059761047363
    5. ' ' → logprob: -15.511059761047363
    6. 'name' → logprob: -16.13606071472168
    7. '_name' → logprob: -16.63606071472168
    8. ' ' → logprob: -17.26106071472168
    9. ' _' → logprob: -17.63606071472168
    10. ' name' → logprob: -18.38606071472168

Token 229: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.08210217207670212
    2. ' __' → logprob: -3.082102060317993
    3. ' ==' → logprob: -3.457102060317993
    4. '==' → logprob: -7.332102298736572
    5. '_' → logprob: -7.832102298736572
    6. 'name' → logprob: -8.082101821899414
    7. ' _' → logprob: -10.582101821899414
    8. '_name' → logprob: -11.332101821899414
    9. '___' → logprob: -11.832101821899414
    10. ' ' → logprob: -11.957101821899414

Token 230: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -5.512236498361744e-07
    2. '_' → logprob: -14.750000953674316
    3. '==' → logprob: -16.625
    4. '____' → logprob: -17.375
    5. ' __' → logprob: -17.625
    6. '___' → logprob: -17.625
    7. '__.__' → logprob: -18.0
    8. '__
' → logprob: -18.25
    9. '__

' → logprob: -19.5
    10. '______' → logprob: -19.5

Token 231: ' ==' (ID: 951)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.0005001319805160165
    2. '==' → logprob: -7.750500202178955
    3. ' ==' → logprob: -9.875499725341797
    4. '=="' → logprob: -11.375499725341797
    5. '_' → logprob: -12.375499725341797
    6. '___' → logprob: -14.125499725341797
    7. '=' → logprob: -14.875499725341797
    8. ' __' → logprob: -15.625499725341797
    9. '__
' → logprob: -15.625499725341797
    10. '=='' → logprob: -15.625499725341797

Token 232: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.01835736073553562
    2. ''' → logprob: -4.018357276916504
    3. ' "__' → logprob: -8.518357276916504
    4. '__' → logprob: -12.268357276916504
    5. ' '__' → logprob: -12.768357276916504
    6. '"name' → logprob: -17.01835823059082
    7. '"user' → logprob: -17.26835823059082
    8. '"_' → logprob: -17.89335823059082
    9. '("__' → logprob: -18.14335823059082
    10. ' "' → logprob: -18.76835823059082

Token 233: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -1.9361264946837764e-07
    2. 'name' → logprob: -15.875
    3. ' main' → logprob: -18.25
    4. '__' → logprob: -19.5
    5. '_main' → logprob: -19.5
    6. '	main' → logprob: -21.625
    7. 'ma' → logprob: -22.25
    8. 'm' → logprob: -23.0
    9. 'maine' → logprob: -23.25
    10. '"' → logprob: -24.0

Token 234: '__":
' (ID: 49892)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.04859248176217079
    2. '__":
' → logprob: -3.0485925674438477
    3. '_"' → logprob: -12.673592567443848
    4. '"' → logprob: -13.798592567443848
    5. '__':
' → logprob: -14.923592567443848
    6. '__["' → logprob: -15.298592567443848
    7. '_' → logprob: -15.923592567443848
    8. '__("' → logprob: -16.17359161376953
    9. '___' → logprob: -16.92359161376953
    10. '__",' → logprob: -17.17359161376953

Token 235: '   ' (ID: 271)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.13303107023239136
    2. '"' → logprob: -2.508031129837036
    3. 'main' → logprob: -3.758031129837036
    4. ' __' → logprob: -4.758030891418457
    5. ' main' → logprob: -5.008030891418457
    6. ' "__' → logprob: -5.508030891418457
    7. ''' → logprob: -8.133030891418457
    8. '_main' → logprob: -9.133030891418457
    9. ' '__' → logprob: -10.383030891418457
    10. '   ' → logprob: -11.633030891418457

Token 236: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' (adapté à ' main') → logprob: -0.01815146580338478
    2. ' main' → logprob: -4.01815128326416
    3. '	main' → logprob: -13.51815128326416
    4. '   ' → logprob: -15.89315128326416
    5. '_main' → logprob: -17.268152236938477
    6. '(main' → logprob: -19.393152236938477
    7. 'maine' → logprob: -20.518152236938477
    8. '.main' → logprob: -20.893152236938477
    9. ' ' → logprob: -21.018152236938477
    10. 'm' → logprob: -21.268152236938477

Token 237: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -1.306760805164231e-05
    2. '()
' → logprob: -11.37501335144043
    3. '(' → logprob: -13.75001335144043
    4. ' ()' → logprob: -15.50001335144043
    5. '()`' → logprob: -16.12501335144043
    6. '()

' → logprob: -17.12501335144043
    7. '()<' → logprob: -17.12501335144043
    8. '()"' → logprob: -17.50001335144043
    9. '()\' → logprob: -18.00001335144043
    10. '(
' → logprob: -18.75001335144043


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 235
Tokens correctement prédits (1ère position, stricte): 85
Tokens correctement prédits (1ère position, avec adaptation): 93
Tokens correctement prédits (top 10): 175
Précision stricte (1ère position): 36.17%
Précision adaptée (1ère position): 39.57%
Précision (top 10): 74.47%
================================================================================
