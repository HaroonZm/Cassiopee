================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:28:20
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def main():
    # Lecture des entrées
    n, k = map(int, input().split())
    h = list(map(int, input().split()))
    h.sort(reverse=True)   # on trie du plus grand au plus petit (pas sûr qu'on ait besoin, mais bon...)

    # Petite vérif (je pense que ça ne sert à rien mais au cas où)
    if n <= k:
        print(0)
        return
    res = 0
    # Ici je prends juste la somme en ignorant les K plus grands
    for idx in range(k, len(h)):
        res += h[idx]
    print(res)

if __name__ == "__main__":
    main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' main' (ID: 2758)
  → Token d'amorce (pas de prédiction)

Token 2: '():
' (ID: 8595)
  → Token d'amorce (pas de prédiction)

Token 3: '   ' (ID: 271)
  Prédit: '\'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\' → logprob: -0.33774250745773315
    2. '\n' → logprob: -1.837742567062378
    3. ' 
' → logprob: -2.712742567062378
    4. '    
' → logprob: -3.712742567062378
    5. ' ' → logprob: -4.837742328643799
    6. '   ' → logprob: -5.462742328643799
    7. '  
' → logprob: -5.712742328643799
    8. '(' → logprob: -5.837742328643799
    9. '    ' → logprob: -5.962742328643799
    10. ''' → logprob: -6.087742328643799

Token 4: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.7860245108604431
    2. '   ' → logprob: -1.536024570465088
    3. 'pass' → logprob: -2.286024570465088
    4. 'p' → logprob: -2.911024570465088
    5. 'r' → logprob: -2.911024570465088
    6. 'return' → logprob: -3.161024570465088
    7. '#' (adapté à ' #') → logprob: -3.786024570465088
    8. 'a' → logprob: -4.161024570465088
    9. 'i' → logprob: -4.411024570465088
    10. '```' → logprob: -5.411024570465088

Token 5: ' Lecture' (ID: 106534)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.02947598323225975
    2. '#' → logprob: -4.404476165771484
    3. '    ' → logprob: -4.654476165771484
    4. '   ' → logprob: -5.904476165771484
    5. ' pass' → logprob: -6.904476165771484
    6. '     ' → logprob: -7.654476165771484
    7. ' #' → logprob: -7.779476165771484
    8. '  ' → logprob: -7.904476165771484
    9. ''' → logprob: -8.154476165771484
    10. '\' → logprob: -8.279476165771484

Token 6: ' des' (ID: 731)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.4819064736366272
    2. ' ' → logprob: -1.8569064140319824
    3. '(' → logprob: -1.9819064140319824
    4. 's' → logprob: -3.2319064140319824
    5. '   ' → logprob: -4.356906414031982
    6. ' =' → logprob: -4.356906414031982
    7. ' (' → logprob: -5.106906414031982
    8. ''' → logprob: -5.856906414031982
    9. '()' → logprob: -5.981906414031982
    10. ',' → logprob: -6.106906414031982

Token 7: ' entr' (ID: 7072)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.023300914093852043
    2. '   ' → logprob: -4.898301124572754
    3. 'f' → logprob: -5.523301124572754
    4. ' f' → logprob: -6.023301124572754
    5. 'l' → logprob: -6.148301124572754
    6. '_' → logprob: -6.398301124572754
    7. ' données' → logprob: -7.023301124572754
    8. ' fichier' → logprob: -7.023301124572754
    9. ' fichiers' → logprob: -7.148301124572754
    10. '  ' → logprob: -7.398301124572754

Token 8: 'ées' (ID: 5161)
  Prédit: 'ées'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ées' → logprob: -0.6383116245269775
    2. 'é' → logprob: -1.1383116245269775
    3. 'ée' → logprob: -1.8883116245269775
    4. 'e' → logprob: -9.888311386108398
    5. 'és' → logprob: -10.388311386108398
    6. 'á' → logprob: -11.763311386108398
    7. 'éer' → logprob: -11.763311386108398
    8. 'ê' → logprob: -11.888311386108398
    9. 'è' → logprob: -12.013311386108398
    10. 'í' → logprob: -12.888311386108398

Token 9: '
' (ID: 198)
  Prédit: '\'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\' → logprob: -0.3240589499473572
    2. '\n' → logprob: -2.324059009552002
    3. '   ' → logprob: -2.699059009552002
    4. '```' → logprob: -3.074059009552002
    5. 'n' → logprob: -4.574059009552002
    6. ''' → logprob: -4.949059009552002
    7. '    
' → logprob: -4.949059009552002
    8. ' ' → logprob: -5.199059009552002
    9. '`' → logprob: -5.699059009552002
    10. 'newline' → logprob: -5.699059009552002

Token 10: '   ' (ID: 271)
  Prédit: '\'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\' → logprob: -0.1626017540693283
    2. '   ' → logprob: -2.4126017093658447
    3. '\n' → logprob: -3.6626017093658447
    4. '```' → logprob: -4.787601947784424
    5. 'n' → logprob: -5.662601947784424
    6. '       ' → logprob: -5.662601947784424
    7. '    ' → logprob: -5.787601947784424
    8. '    
' → logprob: -5.787601947784424
    9. ''' → logprob: -6.037601947784424
    10. 'newline' → logprob: -6.162601947784424

Token 11: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' (adapté à ' n') → logprob: -0.9429867267608643
    2. ' ' → logprob: -1.5679867267608643
    3. '   ' → logprob: -2.4429867267608643
    4. '_' → logprob: -2.4429867267608643
    5. 'r' → logprob: -3.5679867267608643
    6. 'space' → logprob: -3.5679867267608643
    7. 'x' → logprob: -3.8179867267608643
    8. '\' → logprob: -4.192986488342285
    9. 'data' → logprob: -4.317986488342285
    10. 'i' → logprob: -4.317986488342285

Token 12: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.35097628831863403
    2. '_' → logprob: -1.4759762287139893
    3. '=' → logprob: -3.1009762287139893
    4. ',' → logprob: -4.600976467132568
    5. ' ' → logprob: -4.975976467132568
    6. 'u' → logprob: -5.725976467132568
    7. ')' → logprob: -8.10097599029541
    8. ' ,' → logprob: -8.10097599029541
    9. '_space' → logprob: -8.10097599029541
    10. 'space' → logprob: -8.35097599029541

Token 13: ' k' (ID: 372)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1681559830904007
    2. ' m' → logprob: -2.1681559085845947
    3. 'm' → logprob: -3.9181559085845947
    4. ' k' → logprob: -5.668156147003174
    5. ' t' → logprob: -5.793156147003174
    6. ' input' → logprob: -5.793156147003174
    7. ' =' → logprob: -6.168156147003174
    8. '  ' → logprob: -6.418156147003174
    9. 'input' → logprob: -6.543156147003174
    10. ' q' → logprob: -7.168156147003174

Token 14: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.12742798030376434
    2. '=' → logprob: -2.1274280548095703
    3. ',' → logprob: -7.62742805480957
    4. ')' → logprob: -12.25242805480957
    5. ' ' → logprob: -12.50242805480957
    6. ' ,' → logprob: -14.37742805480957
    7. '<|end|>' → logprob: -14.37742805480957
    8. '  ' → logprob: -14.75242805480957
    9. ' =
' → logprob: -14.75242805480957
    10. '   ' → logprob: -14.75242805480957

Token 15: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.007842732593417168
    2. 'map' → logprob: -4.882842540740967
    3. ' input' → logprob: -8.507843017578125
    4. ' ' → logprob: -11.132843017578125
    5. ' list' → logprob: -11.507843017578125
    6. 'input' → logprob: -12.257843017578125
    7. ' [' → logprob: -13.257843017578125
    8. ' ' → logprob: -14.007843017578125
    9. ' tuple' → logprob: -14.382843017578125
    10. '	map' → logprob: -14.382843017578125

Token 16: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.20440177619457245
    2. '(int' → logprob: -1.9544017314910889
    3. '(str' → logprob: -3.204401731491089
    4. '(lambda' → logprob: -6.079401969909668
    5. '(input' → logprob: -9.079401969909668
    6. '(
' → logprob: -9.329401969909668
    7. 'int' → logprob: -10.329401969909668
    8. '(list' → logprob: -10.579401969909668
    9. 'str' → logprob: -10.829401969909668
    10. '(eval' → logprob: -10.954401969909668

Token 17: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.1042431965470314
    2. ')' → logprob: -3.104243278503418
    3. 'input' → logprob: -3.104243278503418
    4. ',input' → logprob: -5.854243278503418
    5. ' input' → logprob: -5.979243278503418
    6. '(' → logprob: -6.229243278503418
    7. ',' → logprob: -6.354243278503418
    8. '=input' → logprob: -9.354243278503418
    9. '<input' → logprob: -10.854243278503418
    10. '[input' → logprob: -11.104243278503418

Token 18: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.2014312595129013
    2. 'input' → logprob: -1.7014312744140625
    3. ')' → logprob: -11.326431274414062
    4. ' )' → logprob: -13.076431274414062
    5. '(input' → logprob: -13.076431274414062
    6. '=input' → logprob: -14.326431274414062
    7. ',input' → logprob: -14.701431274414062
    8. ' ' → logprob: -15.326431274414062
    9. '	input' → logprob: -15.701431274414062
    10. ' raw' → logprob: -16.951431274414062

Token 19: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.4334944486618042
    2. '())' → logprob: -1.4334944486618042
    3. '(' → logprob: -2.9334945678710938
    4. '().' → logprob: -3.4334945678710938
    5. ')' → logprob: -4.558494567871094
    6. '('' → logprob: -4.808494567871094
    7. '()))' → logprob: -6.183494567871094
    8. '(""))' → logprob: -6.433494567871094
    9. '("")' → logprob: -6.558494567871094
    10. '());' → logprob: -6.933494567871094

Token 20: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0024894531816244125
    2. 'strip' → logprob: -6.0024895668029785
    3. 'rstrip' → logprob: -11.37748908996582
    4. ')' → logprob: -13.75248908996582
    5. ' split' → logprob: -14.12748908996582
    6. 'spl' → logprob: -15.37748908996582
    7. '(split' → logprob: -16.12748908996582
    8. 'read' → logprob: -16.50248908996582
    9. 'replace' → logprob: -16.87748908996582
    10. ' strip' → logprob: -17.75248908996582

Token 21: '())
' (ID: 4574)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.5764764547348022
    2. ')' → logprob: -0.8264764547348022
    3. '()))' → logprob: -8.326476097106934
    4. '())' → logprob: -8.451476097106934
    5. '()' → logprob: -9.826476097106934
    6. ')))' → logprob: -11.326476097106934
    7. ''))' → logprob: -12.576476097106934
    8. '),' → logprob: -12.826476097106934
    9. ' ))' → logprob: -13.326476097106934
    10. '(' → logprob: -13.451476097106934

Token 22: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.4325557351112366
    2. ')' → logprob: -1.8075556755065918
    3. '   ' → logprob: -3.057555675506592
    4. '\n' → logprob: -3.432555675506592
    5. ' ' → logprob: -4.057555675506592
    6. ' 
' → logprob: -4.057555675506592
    7. '    
' → logprob: -4.182555675506592
    8. '  
' → logprob: -4.182555675506592
    9. '<|end|>' → logprob: -4.432555675506592
    10. '\' → logprob: -5.182555675506592

Token 23: ' h' (ID: 312)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.9699111580848694
    2. '   ' → logprob: -1.0949110984802246
    3. '
' → logprob: -2.8449110984802246
    4. ' 
' → logprob: -3.0949110984802246
    5. ')' → logprob: -3.4699110984802246
    6. '    
' → logprob: -3.8449110984802246
    7. 'n' → logprob: -3.9699110984802246
    8. '\' → logprob: -3.9699110984802246
    9. 'result' → logprob: -4.469911098480225
    10. ' ' → logprob: -4.719911098480225

Token 24: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.09020496159791946
    2. '=' → logprob: -2.840204954147339
    3. '[' → logprob: -3.840204954147339
    4. ' ' → logprob: -6.590205192565918
    5. '   ' → logprob: -7.090205192565918
    6. '[i' → logprob: -7.090205192565918
    7. '_' → logprob: -7.465205192565918
    8. '[]' → logprob: -7.715205192565918
    9. 's' → logprob: -7.840205192565918
    10. '.' → logprob: -8.340205192565918

Token 25: ' list' (ID: 1562)
  Prédit: ' list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.01106373593211174
    2. 'list' → logprob: -4.511063575744629
    3. ' [' → logprob: -11.636063575744629
    4. '[' → logprob: -12.761063575744629
    5. ' []' → logprob: -13.261063575744629
    6. ' map' → logprob: -13.511063575744629
    7. '[list' → logprob: -14.636063575744629
    8. ' ' → logprob: -15.136063575744629
    9. 'map' → logprob: -15.761063575744629
    10. '[]' → logprob: -16.261064529418945

Token 26: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004628772847354412
    2. '(range' → logprob: -6.004628658294678
    3. '(int' → logprob: -7.004628658294678
    4. '(map' → logprob: -7.254628658294678
    5. '(input' → logprob: -8.879629135131836
    6. '(
' → logprob: -9.879629135131836
    7. '()' → logprob: -10.004629135131836
    8. '(h' → logprob: -10.129629135131836
    9. '(eval' → logprob: -10.504629135131836
    10. '("("' → logprob: -10.504629135131836

Token 27: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0025508119724690914
    2. '(' → logprob: -6.0025506019592285
    3. '<int' → logprob: -10.252551078796387
    4. '(str' → logprob: -11.502551078796387
    5. 'int' → logprob: -11.877551078796387
    6. '[int' → logprob: -12.377551078796387
    7. '=int' → logprob: -12.502551078796387
    8. ')(' → logprob: -12.752551078796387
    9. ' (' → logprob: -13.002551078796387
    10. ')' → logprob: -13.127551078796387

Token 28: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.006729934364557266
    2. ',input' → logprob: -5.506730079650879
    3. '(' → logprob: -6.506730079650879
    4. '(input' → logprob: -7.381730079650879
    5. ' ,' → logprob: -7.756730079650879
    6. ')' → logprob: -10.256730079650879
    7. ',int' → logprob: -11.131730079650879
    8. '(),' → logprob: -11.381730079650879
    9. '```' → logprob: -11.506730079650879
    10. ',(' → logprob: -11.756730079650879

Token 29: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.6931524872779846
    2. ' input' → logprob: -0.6931524872779846
    3. '(input' → logprob: -12.44315242767334
    4. ',input' → logprob: -14.19315242767334
    5. '=input' → logprob: -15.31815242767334
    6. '	input' → logprob: -15.44315242767334
    7. ')' → logprob: -16.318153381347656
    8. '<input' → logprob: -16.943153381347656
    9. ' ' → logprob: -17.693153381347656
    10. '[input' → logprob: -17.693153381347656

Token 30: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.002661266131326556
    2. '()' → logprob: -6.002661228179932
    3. '(' → logprob: -10.00266170501709
    4. ')' → logprob: -10.50266170501709
    5. '())' → logprob: -10.50266170501709
    6. '()))' → logprob: -10.87766170501709
    7. '()));' → logprob: -11.00266170501709
    8. '()>' → logprob: -11.62766170501709
    9. '()-' → logprob: -11.62766170501709
    10. '());' → logprob: -12.00266170501709

Token 31: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -3.128163257315464e-07
    2. 'strip' → logprob: -15.875
    3. '(split' → logprob: -16.125
    4. ' split' → logprob: -16.75
    5. 'spl' → logprob: -18.125
    6. 'rstrip' → logprob: -18.375
    7. 'plit' → logprob: -18.875
    8. 's' → logprob: -19.625
    9. '.split' → logprob: -20.125
    10. '_split' → logprob: -20.75

Token 32: '()))
' (ID: 24521)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.2704172730445862
    2. '()))' → logprob: -1.5204172134399414
    3. ')' → logprob: -4.395417213439941
    4. '(' → logprob: -5.895417213439941
    5. '())' → logprob: -6.395417213439941
    6. '()' → logprob: -6.520417213439941
    7. ')))' → logprob: -9.645417213439941
    8. ' ))' → logprob: -12.020417213439941
    9. '())))' → logprob: -12.895417213439941
    10. '()))
' → logprob: -12.895417213439941

Token 33: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.3867541253566742
    2. '   ' → logprob: -1.3867541551589966
    3. '    
' → logprob: -3.511754035949707
    4. ')' → logprob: -4.386754035949707
    5. 'n' → logprob: -5.511754035949707
    6. ' ' → logprob: -5.511754035949707
    7. '```' → logprob: -5.511754035949707
    8. '  
' → logprob: -5.886754035949707
    9. '' → logprob: -6.011754035949707
    10. '\n' → logprob: -6.011754035949707

Token 34: ' h' (ID: 312)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dp' → logprob: -0.40126320719718933
    2. 'h' (adapté à ' h') → logprob: -2.0262632369995117
    3. '   ' → logprob: -2.4012632369995117
    4. '#' → logprob: -3.1512632369995117
    5. ')' → logprob: -3.6512632369995117
    6. '    
' → logprob: -4.526263236999512
    7. 'd' → logprob: -5.651263236999512
    8. 'c' → logprob: -5.651263236999512
    9. 'f' → logprob: -5.901263236999512
    10. 'n' → logprob: -6.151263236999512

Token 35: '.sort' (ID: 19551)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.568183422088623
    2. '[' → logprob: -0.943183422088623
    3. '[:]' → logprob: -4.193183422088623
    4. ')' → logprob: -4.818183422088623
    5. '.sort' → logprob: -4.943183422088623
    6. '[h' → logprob: -5.568183422088623
    7. '<|end|>' → logprob: -5.818183422088623
    8. ',' → logprob: -6.693183422088623
    9. '=' → logprob: -6.943183422088623
    10. '[n' → logprob: -7.193183422088623

Token 36: '(reverse' (ID: 110806)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.28123459219932556
    2. '(' → logprob: -1.406234622001648
    3. '(h' → logprob: -11.656234741210938
    4. '()`' → logprob: -11.656234741210938
    5. '(()' → logprob: -11.656234741210938
    6. '(.)' → logprob: -11.781234741210938
    7. '().' → logprob: -11.906234741210938
    8. '((' → logprob: -12.156234741210938
    9. ' ()' → logprob: -12.531234741210938
    10. '(`' → logprob: -12.656234741210938

Token 37: '=True' (ID: 7827)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.11808115243911743
    2. '()' → logprob: -2.4930810928344727
    3. ')' → logprob: -3.6180810928344727
    4. '(' → logprob: -6.868081092834473
    5. '()))' → logprob: -7.868081092834473
    6. ' ())' → logprob: -8.868081092834473
    7. '=True' → logprob: -9.493081092834473
    8. '))' → logprob: -9.868081092834473
    9. '(),' → logprob: -9.993081092834473
    10. '(True' → logprob: -10.493081092834473

Token 38: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.080963092041202e-06
    2. ')
' → logprob: -12.875004768371582
    3. '))' → logprob: -13.500004768371582
    4. ' )' → logprob: -14.000004768371582
    5. ']' → logprob: -16.7500057220459
    6. '`)' → logprob: -17.0000057220459
    7. '   ' → logprob: -17.0000057220459
    8. '[' → logprob: -17.0000057220459
    9. ')

' → logprob: -18.2500057220459
    10. ')))' → logprob: -18.3750057220459

Token 39: '  ' (ID: 256)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 40: ' #' (ID: 1069)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.0775763988494873
    2. '\n' → logprob: -1.5775763988494873
    3. '
' → logprob: -1.8275763988494873
    4. '   ' → logprob: -2.4525763988494873
    5. 'n' → logprob: -3.5775763988494873
    6. '\' → logprob: -3.8275763988494873
    7. '<|end|>' → logprob: -3.8275763988494873
    8. ' for' → logprob: -4.077576637268066
    9. ' ' → logprob: -4.202576637268066
    10. 'for' → logprob: -4.452576637268066

Token 41: ' on' (ID: 402)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.35215869545936584
    2. ' #' → logprob: -2.477158784866333
    3. ' if' → logprob: -2.477158784866333
    4. '#' → logprob: -3.227158784866333
    5. 'for' → logprob: -3.227158784866333
    6. ' h' → logprob: -3.602158784866333
    7. 'if' → logprob: -5.102158546447754
    8. ' ' → logprob: -5.477158546447754
    9. ' n' → logprob: -6.227158546447754
    10. ' ' → logprob: -6.227158546447754

Token 42: ' trie' (ID: 139428)
  Prédit: 'g'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'g' → logprob: -1.4189839363098145
    2. ' continue' → logprob: -1.9189839363098145
    3. ' g' → logprob: -2.6689839363098145
    4. 's' → logprob: -3.2939839363098145
    5. 'continue' → logprob: -3.4189839363098145
    6. ' garde' → logprob: -3.6689839363098145
    7. 'tr' → logprob: -3.7939839363098145
    8. 'for' → logprob: -3.7939839363098145
    9. ' retire' → logprob: -4.0439839363098145
    10. ' va' → logprob: -4.0439839363098145

Token 43: ' du' (ID: 1462)
  Prédit: '(h'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(h' → logprob: -0.26188746094703674
    2. '(' → logprob: -2.386887550354004
    3. '()' → logprob: -2.636887550354004
    4. ' les' → logprob: -3.261887550354004
    5. 'h' → logprob: -4.636887550354004
    6. ' la' → logprob: -5.386887550354004
    7. ' h' → logprob: -5.511887550354004
    8. 'les' → logprob: -5.511887550354004
    9. 's' → logprob: -5.886887550354004
    10. ')' → logprob: -7.636887550354004

Token 44: ' plus' (ID: 2932)
  Prédit: ' plus'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' plus' → logprob: -0.7243808507919312
    2. 'plus' → logprob: -0.7243808507919312
    3. 'pl' → logprob: -3.8493809700012207
    4. 'p' → logprob: -5.974380970001221
    5. 's' → logprob: -6.599380970001221
    6. 'grand' → logprob: -6.849380970001221
    7. '+' → logprob: -7.099380970001221
    8. '_plus' → logprob: -7.349380970001221
    9. 'Plus' → logprob: -7.974380970001221
    10. '```' → logprob: -7.974380970001221

Token 45: ' grand' (ID: 6363)
  Prédit: 'grand'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'grand' → logprob: -0.00196110550314188
    2. ' grand' → logprob: -6.3769612312316895
    3. 'gr' → logprob: -8.626960754394531
    4. 'gran' → logprob: -10.626960754394531
    5. 'Grand' → logprob: -11.251960754394531
    6. '```' → logprob: -11.501960754394531
    7. 'haut' → logprob: -11.626960754394531
    8. 'pet' → logprob: -11.751960754394531
    9. 'g' → logprob: -12.626960754394531
    10. '_gr' → logprob: -13.126960754394531

Token 46: ' au' (ID: 2791)
  Prédit: ' au'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' au' → logprob: -0.8486285209655762
    2. 'au' → logprob: -1.0986285209655762
    3. ' vers' → logprob: -1.4736285209655762
    4. '```' → logprob: -6.348628520965576
    5. ' ' → logprob: -6.473628520965576
    6. 'aux' → logprob: -6.473628520965576
    7. 'vers' → logprob: -6.848628520965576
    8. ''au' → logprob: -7.348628520965576
    9. ' aux' → logprob: -8.036128997802734
    10. '<|end|>' → logprob: -8.223628997802734

Token 47: ' plus' (ID: 2932)
  Prédit: 'pet'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pet' → logprob: -0.38795536756515503
    2. 'plus' → logprob: -1.1379554271697998
    3. '```' → logprob: -8.137955665588379
    4. 'pe' → logprob: -8.512955665588379
    5. ' petit' → logprob: -8.887955665588379
    6. 'moins' → logprob: -9.262955665588379
    7. 'grand' → logprob: -9.387955665588379
    8. ' plus' → logprob: -9.512955665588379
    9. 'p' → logprob: -9.762955665588379
    10. 'pu' → logprob: -10.387955665588379

Token 48: ' petit' (ID: 20577)
  Prédit: 'pet'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pet' → logprob: -0.0933915302157402
    2. 'grand' → logprob: -2.4683914184570312
    3. ' petit' → logprob: -5.968391418457031
    4. 'small' → logprob: -7.093391418457031
    5. '```' → logprob: -7.343391418457031
    6. 'pe' → logprob: -8.968391418457031
    7. 'pit' → logprob: -10.593391418457031
    8. 'Petit' → logprob: -10.593391418457031
    9. 'pu' → logprob: -10.718391418457031
    10. 'prem' → logprob: -10.718391418457031

Token 49: ' (' (ID: 350)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.8867481350898743
    2. '   ' → logprob: -1.7617480754852295
    3. '    
' → logprob: -2.7617480754852295
    4. '<|end|>' → logprob: -2.7617480754852295
    5. 'n' → logprob: -3.1367480754852295
    6. ' for' → logprob: -3.2617480754852295
    7. ')' → logprob: -3.3867480754852295
    8. 'for' → logprob: -3.3867480754852295
    9. 's' → logprob: -4.136748313903809
    10. ' ' → logprob: -4.261748313903809

Token 50: 'pas' (ID: 21122)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.04514750838279724
    2. ' )' → logprob: -3.17014741897583
    3. ' pour' → logprob: -6.79514741897583
    4. 'pour' → logprob: -8.295147895812988
    5. ' ' → logprob: -8.670147895812988
    6. ' afin' → logprob: -8.795147895812988
    7. ')
' → logprob: -9.670147895812988
    8. ',' → logprob: -9.670147895812988
    9. ' for' → logprob: -9.795147895812988
    10. 'h' → logprob: -10.420147895812988

Token 51: ' sûr' (ID: 46415)
  Prédit: 'que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'que' → logprob: -2.31644606590271
    2. 'comme' → logprob: -2.56644606590271
    3. 'utile' → logprob: -2.56644606590271
    4. ' nécessaire' → logprob: -2.69144606590271
    5. 'pour' → logprob: -2.81644606590271
    6. 'tout' → logprob: -2.94144606590271
    7. ' forcément' → logprob: -3.06644606590271
    8. ' seulement' → logprob: -3.19144606590271
    9. ' ' → logprob: -3.19144606590271
    10. ' besoin' → logprob: -3.31644606590271

Token 52: ' qu' (ID: 474)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.016731416806578636
    2. ' )' → logprob: -4.266731262207031
    3. ' de' → logprob: -6.641731262207031
    4. ',' → logprob: -7.641731262207031
    5. ' que' → logprob: -8.266731262207031
    6. ' ' → logprob: -8.266731262207031
    7. 'de' → logprob: -9.516731262207031
    8. ' ' → logprob: -10.516731262207031
    9. 'pour' → logprob: -11.141731262207031
    10. 'e' → logprob: -11.141731262207031

Token 53: ''on' (ID: 25812)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.3107070326805115
    2. ''on' → logprob: -1.8107070922851562
    3. ''il' → logprob: -3.1857070922851562
    4. ''' → logprob: -3.9357070922851562
    5. ')' → logprob: -4.685707092285156
    6. '')' → logprob: -4.685707092285156
    7. 'on' → logprob: -5.185707092285156
    8. 'u' → logprob: -5.685707092285156
    9. 'cela' → logprob: -5.685707092285156
    10. 'a' → logprob: -6.060707092285156

Token 54: ' ait' (ID: 43015)
  Prédit: ' soit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' soit' → logprob: -0.08113807439804077
    2. ' aide' → logprob: -4.2061381340026855
    3. 'so' → logprob: -4.3311381340026855
    4. '   ' → logprob: -5.3311381340026855
    5. ' f' → logprob: -5.4561381340026855
    6. ' so' → logprob: -5.7061381340026855
    7. ' ' → logprob: -5.7061381340026855
    8. 's' → logprob: -5.8311381340026855
    9. ' ait' → logprob: -5.9561381340026855
    10. 'serve' → logprob: -5.9561381340026855

Token 55: ' besoin' (ID: 27703)
  Prédit: 'bes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bes' → logprob: -0.18062785267829895
    2. ' besoin' → logprob: -1.9306278228759766
    3. 'raison' → logprob: -5.555627822875977
    4. '_' → logprob: -6.305627822875977
    5. ' ' → logprob: -6.305627822875977
    6. 'à' → logprob: -6.430627822875977
    7. 'b' → logprob: -6.680627822875977
    8. 'tout' → logprob: -6.930627822875977
    9. '  ' → logprob: -7.305627822875977
    10. 'bien' → logprob: -7.430627822875977

Token 56: ',' (ID: 11)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.19232791662216187
    2. ')' → logprob: -2.5673279762268066
    3. 'de' → logprob: -3.4423279762268066
    4. ' d' → logprob: -3.4423279762268066
    5. ' )' → logprob: -4.067327976226807
    6. ' ' → logprob: -4.567327976226807
    7. 'd' → logprob: -5.692327976226807
    8. ' du' → logprob: -6.692327976226807
    9. '   ' → logprob: -7.067327976226807
    10. '  ' → logprob: -7.942327976226807

Token 57: ' mais' (ID: 2899)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.07726771384477615
    2. ' )' → logprob: -2.952267646789551
    3. ' but' → logprob: -4.577267646789551
    4. ' mais' → logprob: -5.077267646789551
    5. ' ' → logprob: -5.952267646789551
    6. '   ' → logprob: -6.952267646789551
    7. ' h' → logprob: -7.327267646789551
    8. 'n' → logprob: -8.20226764678955
    9. 'h' → logprob: -8.57726764678955
    10. '    ' → logprob: -9.07726764678955

Token 58: ' bon' (ID: 4846)
  Prédit: ' c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.4927446246147156
    2. 'c' → logprob: -2.2427446842193604
    3. 'ça' → logprob: -2.4927446842193604
    4. ' ça' → logprob: -2.8677446842193604
    5. ' on' → logprob: -2.9927446842193604
    6. 'on' → logprob: -3.6177446842193604
    7. 'pe' → logprob: -4.117744445800781
    8. 'cela' → logprob: -4.242744445800781
    9. ' bon' → logprob: -4.992744445800781
    10. 'je' → logprob: -5.492744445800781

Token 59: '...)

' (ID: 98555)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00012642296496778727
    2. ' )' → logprob: -9.125126838684082
    3. ')
' → logprob: -11.125126838684082
    4. '`)' → logprob: -14.500126838684082
    5. ')

' → logprob: -14.750126838684082
    6. ' ' → logprob: -14.750126838684082
    7. '))' → logprob: -15.125126838684082
    8. ')`' → logprob: -15.625126838684082
    9. '#' → logprob: -15.875126838684082
    10. '   ' → logprob: -16.000125885009766

Token 60: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.48590806126594543
    2. 'dp' → logprob: -1.610908031463623
    3. '    
' → logprob: -2.485908031463623
    4. '
' → logprob: -3.610908031463623
    5. ' dp' → logprob: -3.860908031463623
    6. '```' → logprob: -5.110908031463623
    7. 'max' → logprob: -5.485908031463623
    8. 'result' → logprob: -5.610908031463623
    9. 's' → logprob: -5.610908031463623
    10. '   
' → logprob: -5.985908031463623

Token 61: ' #' (ID: 1069)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dp' → logprob: -1.062233805656433
    2. 'd' → logprob: -1.187233805656433
    3. 'c' → logprob: -2.1872339248657227
    4. '   ' → logprob: -2.5622339248657227
    5. ' dp' → logprob: -2.9372339248657227
    6. '#' (adapté à ' #') → logprob: -4.812233924865723
    7. 'max' → logprob: -4.937233924865723
    8. 'i' → logprob: -4.937233924865723
    9. 'result' → logprob: -5.062233924865723
    10. 'best' → logprob: -5.062233924865723

Token 62: ' Petite' (ID: 129719)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dp' → logprob: -0.16243749856948853
    2. 'res' → logprob: -3.2874374389648438
    3. '#' → logprob: -3.7874374389648438
    4. ' dp' → logprob: -4.037437438964844
    5. 'result' → logprob: -4.287437438964844
    6. 'diff' → logprob: -4.412437438964844
    7. 'ans' → logprob: -4.662437438964844
    8. ' res' → logprob: -5.287437438964844
    9. 'if' → logprob: -5.787437438964844
    10. ' ans' → logprob: -5.912437438964844

Token 63: ' vér' (ID: 42524)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.654467761516571
    2. 'diff' → logprob: -2.279467821121216
    3. 'dp' → logprob: -2.404467821121216
    4. ' ast' → logprob: -2.904467821121216
    5. ' dp' → logprob: -4.029467582702637
    6. 'f' → logprob: -4.029467582702637
    7. 'est' → logprob: -4.279467582702637
    8. '#' → logprob: -4.654467582702637
    9. 'ast' → logprob: -4.654467582702637
    10. ' note' → logprob: -4.654467582702637

Token 64: 'if' (ID: 366)
  Prédit: 'ification'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ification' → logprob: -0.0897727683186531
    2. 'if' → logprob: -2.7147727012634277
    3. 'ifi' → logprob: -4.214772701263428
    4. 'ifie' → logprob: -5.839772701263428
    5. 'i' → logprob: -7.339772701263428
    6. '```' → logprob: -7.839772701263428
    7. '   ' → logprob: -7.964772701263428
    8. '#' → logprob: -7.964772701263428
    9. ' if' → logprob: -10.464773178100586
    10. ')' → logprob: -11.089773178100586

Token 65: ' (' (ID: 350)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0961816310882568
    2. ' if' → logprob: -1.2211816310882568
    3. ':' → logprob: -2.096181631088257
    4. 'if' → logprob: -2.471181631088257
    5. '```' → logprob: -3.346181631088257
    6. '<|end|>' → logprob: -3.721181631088257
    7. ' ' → logprob: -3.846181631088257
    8. '  ' → logprob: -4.221181869506836
    9. 'n' → logprob: -4.221181869506836
    10. 's' → logprob: -4.471181869506836

Token 66: 'je' (ID: 1587)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.32050496339797974
    2. ' )' → logprob: -2.070504903793335
    3. ' if' → logprob: -2.320504903793335
    4. ' n' → logprob: -3.820504903793335
    5. ' k' → logprob: -4.320505142211914
    6. ' si' → logprob: -5.320505142211914
    7. 'if' → logprob: -5.320505142211914
    8. 'n' → logprob: -6.070505142211914
    9. ' ' → logprob: -7.570505142211914
    10. ' len' → logprob: -7.820505142211914

Token 67: ' pense' (ID: 29077)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' continue' → logprob: -1.8586127758026123
    2. ' pense' → logprob: -1.8586127758026123
    3. 's' → logprob: -1.9836127758026123
    4. ' n' → logprob: -2.4836127758026123
    5. ' m' → logprob: -2.7336127758026123
    6. ' veux' → logprob: -2.8586127758026123
    7. ')' → logprob: -3.1086127758026123
    8. ' vais' → logprob: -3.2336127758026123
    9. ' voulais' → logprob: -3.3586127758026123
    10. ' suppose' → logprob: -3.6086127758026123

Token 68: ' que' (ID: 661)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4943163990974426
    2. ' )' → logprob: -1.2443163394927979
    3. ' ' → logprob: -2.369316339492798
    4. ' que' → logprob: -5.244316577911377
    5. ' ' → logprob: -6.619316577911377
    6. '   ' → logprob: -7.994316577911377
    7. ' à' → logprob: -8.244316101074219
    8. ' ):' → logprob: -8.244316101074219
    9. '):' → logprob: -8.369316101074219
    10. 's' → logprob: -8.994316101074219

Token 69: ' ça' (ID: 13590)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.5511354207992554
    2. ' c' → logprob: -1.6761354207992554
    3. ' len' → logprob: -2.676135540008545
    4. ' n' → logprob: -3.176135540008545
    5. ' le' → logprob: -4.051135540008545
    6. 'k' → logprob: -4.176135540008545
    7. ' on' → logprob: -4.301135540008545
    8. ' la' → logprob: -4.426135540008545
    9. ' ça' → logprob: -4.426135540008545
    10. ' h' → logprob: -4.676135540008545

Token 70: ' ne' (ID: 453)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.4364181458950043
    2. ' ne' → logprob: -1.8114181756973267
    3. 's' → logprob: -3.311418056488037
    4. ' vaut' → logprob: -3.311418056488037
    5. 'n' → logprob: -3.436418056488037
    6. ')' → logprob: -4.436418056488037
    7. ' va' → logprob: -4.561418056488037
    8. ' s' → logprob: -5.311418056488037
    9. ' sert' → logprob: -5.311418056488037
    10. ' manque' → logprob: -5.436418056488037

Token 71: ' sert' (ID: 52405)
  Prédit: 'sert'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'sert' → logprob: -0.9593576192855835
    2. 'f' → logprob: -2.834357738494873
    3. 's' → logprob: -2.834357738494873
    4. 'sera' → logprob: -2.834357738494873
    5. 'change' → logprob: -2.959357738494873
    6. 'serve' → logprob: -3.209357738494873
    7. 'co' → logprob: -3.334357738494873
    8. 'fait' → logprob: -3.334357738494873
    9. 'serv' → logprob: -3.334357738494873
    10. 'se' → logprob: -3.584357738494873

Token 72: ' à' (ID: 1221)
  Prédit: ' à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.17203199863433838
    2. 'à' → logprob: -2.047031879425049
    3. ' pas' → logprob: -4.547031879425049
    4. 'a' → logprob: -5.047031879425049
    5. ')' → logprob: -5.422031879425049
    6. 'pas' → logprob: -5.672031879425049
    7. ' ' → logprob: -6.672031879425049
    8. ' a' → logprob: -6.922031879425049
    9. ''à' → logprob: -8.172032356262207
    10. ' juste' → logprob: -8.922032356262207

Token 73: ' rien' (ID: 23082)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.0025404668413102627
    2. ' rien' → logprob: -6.002540588378906
    3. 'quoi' → logprob: -10.377540588378906
    4. '	r' → logprob: -11.252540588378906
    5. 'ri' → logprob: -12.252540588378906
    6. 'pas' → logprob: -13.002540588378906
    7. '_r' → logprob: -13.377540588378906
    8. ' ' → logprob: -13.877540588378906
    9. 'ras' → logprob: -13.877540588378906
    10. '-r' → logprob: -14.002540588378906

Token 74: ' mais' (ID: 2899)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.09056434780359268
    2. '   ' → logprob: -2.590564250946045
    3. ' )' → logprob: -5.465564250946045
    4. ',' → logprob: -6.215564250946045
    5. '):' → logprob: -6.215564250946045
    6. ':' → logprob: -6.465564250946045
    7. ' ' → logprob: -7.215564250946045
    8. '  ' → logprob: -8.590564727783203
    9. 'if' → logprob: -8.965564727783203
    10. ' :' → logprob: -9.090564727783203

Token 75: ' au' (ID: 2791)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.6666435599327087
    2. ')' → logprob: -1.6666436195373535
    3. ' on' → logprob: -2.1666436195373535
    4. ' c' → logprob: -3.1666436195373535
    5. 'if' → logprob: -3.2916436195373535
    6. '):' → logprob: -3.9166436195373535
    7. ' )' → logprob: -3.9166436195373535
    8. ' ' → logprob: -4.0416436195373535
    9. ' for' → logprob: -4.7916436195373535
    10. ' je' → logprob: -5.4166436195373535

Token 76: ' cas' (ID: 2108)
  Prédit: 'cas'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cas' → logprob: -0.05309595167636871
    2. 'case' → logprob: -3.553096055984497
    3. ' cas' → logprob: -4.928095817565918
    4. '   ' → logprob: -5.178095817565918
    5. '```' → logprob: -5.803095817565918
    6. 'final' → logprob: -6.428095817565918
    7. 'moins' → logprob: -7.053095817565918
    8. 'jourd' → logprob: -7.553095817565918
    9. '  ' → logprob: -7.928095817565918
    10. 'c' → logprob: -7.928095817565918

Token 77: ' où' (ID: 15113)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.9354128837585449
    2. ' où' → logprob: -0.9354128837585449
    3. '  ' → logprob: -2.685412883758545
    4. 'où' → logprob: -2.935412883758545
    5. '   ' → logprob: -3.685412883758545
    6. ' d' → logprob: -3.810412883758545
    7. ' de' → logprob: -4.185412883758545
    8. ' ça' → logprob: -5.060412883758545
    9. ' where' → logprob: -5.185412883758545
    10. ')' → logprob: -5.810412883758545

Token 78: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.36185362935066223
    2. ':' → logprob: -2.11185359954834
    3. '):' → logprob: -2.11185359954834
    4. ' :' → logprob: -3.86185359954834
    5. '   ' → logprob: -4.36185359954834
    6. ' if' → logprob: -4.73685359954834
    7. ' )' → logprob: -4.86185359954834
    8. ',' → logprob: -5.61185359954834
    9. ' ):' → logprob: -6.11185359954834
    10. 'if' → logprob: -6.48685359954834

Token 79: '   ' (ID: 271)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.5781856179237366
    2. '   ' → logprob: -0.9531856179237366
    3. 'if' → logprob: -3.328185558319092
    4. '<|end|>' → logprob: -4.328185558319092
    5. '```' → logprob: -7.078185558319092
    6. '    
' → logprob: -7.453185558319092
    7. ' for' → logprob: -7.578185558319092
    8. '<|end|>' → logprob: -7.578185558319092
    9. ':' → logprob: -7.828185558319092
    10. '    ' → logprob: -8.07818603515625

Token 80: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.4370756149291992
    2. ' if' → logprob: -1.0620756149291992
    3. ' i' → logprob: -6.062075614929199
    4. ' for' → logprob: -6.312075614929199
    5. 'for' → logprob: -6.312075614929199
    6. 'i' → logprob: -6.562075614929199
    7. 'n' → logprob: -8.3120756149292
    8. '   ' → logprob: -8.4370756149292
    9. 'h' → logprob: -9.4370756149292
    10. '```' → logprob: -9.4370756149292

Token 81: ' n' (ID: 297)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.31487998366355896
    2. ' n' → logprob: -1.3148800134658813
    3. ' ' → logprob: -7.064879894256592
    4. 'k' → logprob: -8.18988037109375
    5. 'n' → logprob: -8.43988037109375
    6. ' len' → logprob: -8.93988037109375
    7. ' ' → logprob: -9.18988037109375
    8. ' not' → logprob: -11.06488037109375
    9. '  ' → logprob: -12.18988037109375
    10. ' ' → logprob: -13.31488037109375

Token 82: ' <=' (ID: 5017)
  Prédit: ' <'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.3473389148712158
    2. ' <=' → logprob: -1.5973389148712158
    3. '<' → logprob: -2.847338914871216
    4. '<=' → logprob: -4.347338676452637
    5. ' ==' → logprob: -4.847338676452637
    6. ' >' → logprob: -4.972338676452637
    7. ' ' → logprob: -6.347338676452637
    8. '==' → logprob: -6.597338676452637
    9. '>' → logprob: -6.722338676452637
    10. ' >=' → logprob: -7.722338676452637

Token 83: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.5970930457115173
    2. 'k' → logprob: -1.097093105316162
    3. ' ' → logprob: -2.722093105316162
    4. '0' → logprob: -3.472093105316162
    5. '1' → logprob: -3.972093105316162
    6. '	k' → logprob: -9.972092628479004
    7. '2' → logprob: -10.847092628479004
    8. ' ' → logprob: -11.097092628479004
    9. '10' → logprob: -12.284592628479004
    10. '  ' → logprob: -12.284592628479004

Token 84: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0011943945428356528
    2. ' :' → logprob: -7.251194477081299
    3. ':
' → logprob: -8.12619400024414
    4. ':return' → logprob: -8.62619400024414
    5. ' or' → logprob: -12.00119400024414
    6. ' :
' → logprob: -13.75119400024414
    7. '   ' → logprob: -13.87619400024414
    8. '):' → logprob: -14.87619400024414
    9. ':**' → logprob: -16.00119400024414
    10. '():' → logprob: -16.25119400024414

Token 85: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.18882136046886444
    2. ':' → logprob: -2.688821315765381
    3. '   ' → logprob: -2.688821315765381
    4. ' return' → logprob: -3.813821315765381
    5. ':return' → logprob: -5.313821315765381
    6. ':
' → logprob: -5.438821315765381
    7. 'return' → logprob: -5.563821315765381
    8. '
' → logprob: -8.063821792602539
    9. '    
' → logprob: -8.438821792602539
    10. '	return' → logprob: -8.938821792602539

Token 86: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.6330763697624207
    2. 'print' (adapté à ' print') → logprob: -1.2580764293670654
    3. '   ' → logprob: -2.2580764293670654
    4. ' return' → logprob: -3.1330764293670654
    5. 'return' → logprob: -3.3830764293670654
    6. '       ' → logprob: -6.633076190948486
    7. '    ' → logprob: -6.883076190948486
    8. '	print' → logprob: -9.008076667785645
    9. ' ' → logprob: -9.383076667785645
    10. '  ' → logprob: -10.008076667785645

Token 87: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.19517570734024048
    2. '(n' → logprob: -1.8201756477355957
    3. '(max' → logprob: -4.320175647735596
    4. '(sum' → logprob: -7.195175647735596
    5. '(k' → logprob: -7.695175647735596
    6. '("' → logprob: -7.820175647735596
    7. '(h' → logprob: -9.070176124572754
    8. '()' → logprob: -9.570176124572754
    9. '('' → logprob: -9.945176124572754
    10. '(min' → logprob: -10.195176124572754

Token 88: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -8.864272967912257e-05
    2. ' ' → logprob: -10.125088691711426
    3. '(' → logprob: -11.250088691711426
    4. '"' → logprob: -11.250088691711426
    5. '   ' → logprob: -11.375088691711426
    6. '1' → logprob: -12.500088691711426
    7. ''' → logprob: -13.625088691711426
    8. 'n' → logprob: -14.000088691711426
    9. '00' → logprob: -14.437588691711426
    10. '    ' → logprob: -14.500088691711426

Token 89: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.010041034780442715
    2. ')
' → logprob: -4.635041236877441
    3. ' )' → logprob: -8.635041236877441
    4. ')return' → logprob: -9.510041236877441
    5. '   ' → logprob: -11.260041236877441
    6. ' )
' → logprob: -11.635041236877441
    7. ')
' → logprob: -12.760041236877441
    8. '')' → logprob: -13.385041236877441
    9. '`)' → logprob: -13.635041236877441
    10. '")' → logprob: -13.760041236877441

Token 90: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.037461429834365845
    2. '    
' → logprob: -4.537461280822754
    3. 'return' → logprob: -5.162461280822754
    4. '       ' → logprob: -5.162461280822754
    5. ' return' → logprob: -5.662461280822754
    6. ')' → logprob: -5.787461280822754
    7. '
' → logprob: -6.037461280822754
    8. '	return' → logprob: -6.412461280822754
    9. ':return' → logprob: -7.287461280822754
    10. '<|end|>' → logprob: -7.287461280822754

Token 91: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.14945738017559052
    2. '   ' → logprob: -2.6494574546813965
    3. ' return' → logprob: -2.7744574546813965
    4. '       ' → logprob: -5.7744574546813965
    5. '	return' → logprob: -6.2744574546813965
    6. '
' → logprob: -7.8994574546813965
    7. '    
' → logprob: -8.649456977844238
    8. ' ' → logprob: -9.149456977844238
    9. '\n' → logprob: -10.399456977844238
    10. ':return' → logprob: -11.024456977844238

Token 92: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.2222125381231308
    2. 'n' → logprob: -2.847212553024292
    3. '    
' → logprob: -2.847212553024292
    4. '\n' → logprob: -3.472212553024292
    5. ' 
' → logprob: -4.097212314605713
    6. '  
' → logprob: -4.472212314605713
    7. '   ' → logprob: -4.722212314605713
    8. '' → logprob: -5.472212314605713
    9. '   
' → logprob: -5.597212314605713
    10. '```' → logprob: -6.847212314605713

Token 93: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0275795459747314
    2. '
' → logprob: -1.2775795459747314
    3. '    
' → logprob: -1.5275795459747314
    4. '   
' → logprob: -2.9025795459747314
    5. '  
' → logprob: -4.652579307556152
    6. 's' → logprob: -4.652579307556152
    7. 'n' → logprob: -4.902579307556152
    8. ' 
' → logprob: -4.902579307556152
    9. '    ' → logprob: -5.027579307556152
    10. '  ' → logprob: -5.027579307556152

Token 94: ' res' (ID: 694)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dp' → logprob: -0.4862944185733795
    2. '    
' → logprob: -1.8612943887710571
    3. '   ' → logprob: -2.7362945079803467
    4. '#' → logprob: -3.4862945079803467
    5. '
' → logprob: -3.8612945079803467
    6. '   
' → logprob: -4.111294269561768
    7. 's' → logprob: -4.111294269561768
    8. 'd' → logprob: -4.486294269561768
    9. ' 
' → logprob: -4.861294269561768
    10. 'm' → logprob: -5.361294269561768

Token 95: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.023834658786654472
    2. '=' → logprob: -3.773834705352783
    3. ' ' → logprob: -8.523834228515625
    4. 'u' → logprob: -9.023834228515625
    5. 'ult' → logprob: -9.148834228515625
    6. '_' → logprob: -10.273834228515625
    7. 'ault' → logprob: -10.523834228515625
    8. '[' → logprob: -10.648834228515625
    9. ' +=' → logprob: -11.523834228515625
    10. 'ultat' → logprob: -11.523834228515625

Token 96: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.4696579575538635
    2. 'h' → logprob: -1.2196578979492188
    3. 'sum' → logprob: -3.4696578979492188
    4. ' h' → logprob: -4.094657897949219
    5. '[]' → logprob: -4.719657897949219
    6. '[h' → logprob: -4.844657897949219
    7. ' ' → logprob: -4.969657897949219
    8. 'float' → logprob: -5.844657897949219
    9. ' sum' → logprob: -6.344657897949219
    10. '[' → logprob: -7.219657897949219

Token 97: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.2223329097032547
    2. 'h' → logprob: -1.8473329544067383
    3. 'sum' → logprob: -3.3473329544067383
    4. 'float' → logprob: -5.722332954406738
    5. '[]' → logprob: -6.597332954406738
    6. '10' → logprob: -7.847332954406738
    7. '[h' → logprob: -7.972332954406738
    8. '[' → logprob: -8.472332954406738
    9. '100' → logprob: -8.597332954406738
    10. '[]
' → logprob: -8.847332954406738

Token 98: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.08498784899711609
    2. '   ' → logprob: -3.0849878787994385
    3. '    
' → logprob: -4.209987640380859
    4. '\n' → logprob: -4.584987640380859
    5. 'for' → logprob: -5.709987640380859
    6. ' for' → logprob: -6.084987640380859
    7. '  
' → logprob: -6.584987640380859
    8. ' 
' → logprob: -6.959987640380859
    9. '   
' → logprob: -6.959987640380859
    10. '
' → logprob: -7.834987640380859

Token 99: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4034227430820465
    2. 'for' → logprob: -1.6534227132797241
    3. '
' → logprob: -3.0284228324890137
    4. '\n' → logprob: -3.1534228324890137
    5. ' for' → logprob: -3.7784228324890137
    6. '    
' → logprob: -4.153422832489014
    7. '   
' → logprob: -6.153422832489014
    8. '\' → logprob: -6.528422832489014
    9. '	for' → logprob: -7.153422832489014
    10. '' → logprob: -7.153422832489014

Token 100: ' #' (ID: 1069)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.004063202068209648
    2. ' for' → logprob: -6.504063129425049
    3. 'h' → logprob: -6.879063129425049
    4. 'i' → logprob: -7.004063129425049
    5. 'diff' → logprob: -8.004063606262207
    6. '   ' → logprob: -9.004063606262207
    7. 'while' → logprob: -10.504063606262207
    8. 'j' → logprob: -11.004063606262207
    9. 'dif' → logprob: -11.254063606262207
    10. 'd' → logprob: -11.254063606262207

Token 101: ' Ici' (ID: 145754)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.10862676799297333
    2. 'h' → logprob: -2.9836268424987793
    3. ' for' → logprob: -3.4836268424987793
    4. 'diff' → logprob: -4.358626842498779
    5. 'i' → logprob: -5.608626842498779
    6. '   ' → logprob: -7.233626842498779
    7. 'd' → logprob: -7.358626842498779
    8. 'dif' → logprob: -7.608626842498779
    9. 'k' → logprob: -7.858626842498779
    10. 's' → logprob: -8.233626365661621

Token 102: ' je' (ID: 1264)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5058679580688477
    2. 'for' → logprob: -1.0058679580688477
    3. ' for' → logprob: -3.5058679580688477
    4. 'h' → logprob: -7.630867958068848
    5. '    
' → logprob: -8.880867958068848
    6. ' h' → logprob: -8.880867958068848
    7. '  ' → logprob: -9.130867958068848
    8. ',' → logprob: -9.880867958068848
    9. '
' → logprob: -10.005867958068848
    10. '    ' → logprob: -10.005867958068848

Token 103: ' prends' (ID: 151723)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.05695396289229393
    2. ' for' → logprob: -3.6819539070129395
    3. 'range' → logprob: -4.4319539070129395
    4. 'continue' → logprob: -4.8069539070129395
    5. 'vais' → logprob: -6.5569539070129395
    6. '<|end|>' → logprob: -6.8069539070129395
    7. 'veux' → logprob: -6.9319539070129395
    8. ' vais' → logprob: -7.0569539070129395
    9. 'contin' → logprob: -7.0569539070129395
    10. '   ' → logprob: -7.3069539070129395

Token 104: ' juste' (ID: 31553)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.5799644589424133
    2. ' for' → logprob: -1.8299643993377686
    3. 'h' → logprob: -2.4549643993377686
    4. ' h' → logprob: -3.3299643993377686
    5. 'k' → logprob: -3.4549643993377686
    6. ' k' → logprob: -3.5799643993377686
    7. 'les' → logprob: -3.5799643993377686
    8. 'range' → logprob: -3.7049643993377686
    9. ' les' → logprob: -4.204964637756348
    10. 'n' → logprob: -5.079964637756348

Token 105: ' la' (ID: 557)
  Prédit: 'les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'les' → logprob: -0.9385023713111877
    2. ' les' → logprob: -2.063502311706543
    3. 'k' → logprob: -2.188502311706543
    4. 'for' → logprob: -2.313502311706543
    5. 'h' → logprob: -2.438502311706543
    6. ' k' → logprob: -2.563502311706543
    7. ' for' → logprob: -3.438502311706543
    8. ' h' → logprob: -3.938502311706543
    9. ' la' → logprob: -4.188502311706543
    10. 'la' → logprob: -4.938502311706543

Token 106: ' somme' (ID: 64484)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.1489803045988083
    2. 'diff' → logprob: -3.0239803791046143
    3. ' k' → logprob: -3.0239803791046143
    4. 'plus' → logprob: -3.8989803791046143
    5. '(k' → logprob: -4.398980140686035
    6. ' différence' → logprob: -6.148980140686035
    7. 'difference' → logprob: -6.773980140686035
    8. 's' → logprob: -6.773980140686035
    9. ' plus' → logprob: -7.648980140686035
    10. ' (' → logprob: -7.773980140686035

Token 107: ' en' (ID: 469)
  Prédit: ' des'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' des' → logprob: -0.33388176560401917
    2. '(' → logprob: -2.3338818550109863
    3. 'des' → logprob: -2.3338818550109863
    4. '(sum' → logprob: -3.3338818550109863
    5. '(res' → logprob: -4.708881855010986
    6. '(h' → logprob: -4.708881855010986
    7. 'sum' → logprob: -4.708881855010986
    8. 'res' → logprob: -4.958881855010986
    9. '(
' → logprob: -5.708881855010986
    10. ' +=' → logprob: -6.083881855010986

Token 108: ' ignorant' (ID: 89043)
  Prédit: 'h'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'h' → logprob: -0.14875555038452148
    2. 'range' → logprob: -3.1487555503845215
    3. 'k' → logprob: -3.3987555503845215
    4. ' h' → logprob: -4.2737555503845215
    5. 'diff' → logprob: -4.2737555503845215
    6. 'addition' → logprob: -5.1487555503845215
    7. 'comp' → logprob: -5.3987555503845215
    8. 'com' → logprob: -5.5237555503845215
    9. 's' → logprob: -5.5237555503845215
    10. 'continue' → logprob: -6.3987555503845215

Token 109: ' les' (ID: 1341)
  Prédit: 'les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'les' → logprob: -0.28748923540115356
    2. ' les' → logprob: -2.037489175796509
    3. 'h' → logprob: -2.287489175796509
    4. ' h' → logprob: -4.412489414215088
    5. 'la' → logprob: -6.037489414215088
    6. 'le' → logprob: -6.662489414215088
    7. ' la' → logprob: -6.912489414215088
    8. 'l' → logprob: -8.53748893737793
    9. 'the' → logprob: -8.53748893737793
    10. ' celles' → logprob: -8.66248893737793

Token 110: ' K' (ID: 658)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.13496848940849304
    2. ' k' → logprob: -2.2599685192108154
    3. 'plus' → logprob: -4.759968280792236
    4. 'prem' → logprob: -5.009968280792236
    5. 'h' → logprob: -6.509968280792236
    6. ' plus' → logprob: -6.884968280792236
    7. 'indices' → logprob: -7.259968280792236
    8. ' ' → logprob: -7.259968280792236
    9. '(k' → logprob: -7.509968280792236
    10. ' premiers' → logprob: -7.634968280792236

Token 111: ' plus' (ID: 2932)
  Prédit: 'h'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'h' → logprob: -0.4144183099269867
    2. '[' → logprob: -3.0394182205200195
    3. 'plus' → logprob: -3.1644182205200195
    4. 'k' → logprob: -3.4144182205200195
    5. 'res' → logprob: -3.7894182205200195
    6. '-k' → logprob: -3.9144182205200195
    7. '[k' → logprob: -4.0394182205200195
    8. '+k' → logprob: -4.0394182205200195
    9. '[h' → logprob: -4.0394182205200195
    10. 's' → logprob: -4.2894182205200195

Token 112: ' grands' (ID: 43085)
  Prédit: 'gr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'gr' → logprob: -0.24145188927650452
    2. ' grandes' → logprob: -2.1164519786834717
    3. 'grand' → logprob: -2.7414519786834717
    4. ' grands' → logprob: -4.366451740264893
    5. ' grand' → logprob: -4.991451740264893
    6. ' grans' → logprob: -5.866451740264893
    7. '_gr' → logprob: -6.116451740264893
    8. 'gran' → logprob: -6.616451740264893
    9. 'import' → logprob: -7.241451740264893
    10. 'ha' → logprob: -7.866451740264893

Token 113: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.09145236015319824
    2. ' for' → logprob: -2.7164523601531982
    3. 'h' → logprob: -4.716452598571777
    4. 'res' → logprob: -4.966452598571777
    5. 's' → logprob: -5.966452598571777
    6. 'tokens' → logprob: -7.091452598571777
    7. ' h' → logprob: -7.466452598571777
    8. ',' → logprob: -7.591452598571777
    9. '   ' → logprob: -8.841452598571777
    10. 'rest' → logprob: -9.216452598571777

Token 114: '   ' (ID: 271)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.08497197180986404
    2. ' for' → logprob: -2.5849719047546387
    3. '   ' → logprob: -6.209971904754639
    4. '\n' → logprob: -6.334971904754639
    5. '
' → logprob: -7.084971904754639
    6. '\' → logprob: -7.334971904754639
    7. ' 
' → logprob: -8.334972381591797
    8. ' ' → logprob: -8.709972381591797
    9. '    
' → logprob: -9.209972381591797
    10. 's' → logprob: -10.459972381591797

Token 115: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.004588910844177008
    2. 'res' → logprob: -5.504589080810547
    3. ' for' → logprob: -7.629589080810547
    4. '   ' → logprob: -10.879589080810547
    5. ' res' → logprob: -13.504589080810547
    6. 'h' → logprob: -14.004589080810547
    7. 'ress' → logprob: -14.129589080810547
    8. '```' → logprob: -14.504589080810547
    9. '
' → logprob: -14.629589080810547
    10. 's' → logprob: -14.754589080810547

Token 116: ' idx' (ID: 14016)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.043386682868003845
    2. 'i' → logprob: -3.168386697769165
    3. ' ' → logprob: -8.168386459350586
    4. '	i' → logprob: -10.043386459350586
    5. '_' → logprob: -11.043386459350586
    6. '   ' → logprob: -11.168386459350586
    7. '  ' → logprob: -11.793386459350586
    8. ' ' → logprob: -12.168386459350586
    9. '_i' → logprob: -12.543386459350586
    10. ' _' → logprob: -13.043386459350586

Token 117: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0058291335590183735
    2. 'in' → logprob: -5.255829334259033
    3. ',' → logprob: -8.130828857421875
    4. ' ' → logprob: -8.255828857421875
    5. 's' → logprob: -11.380828857421875
    6. 'n' → logprob: -12.130828857421875
    7. '  ' → logprob: -12.505828857421875
    8. ' i' → logprob: -12.755828857421875
    9. '   ' → logprob: -12.880828857421875
    10. '	in' → logprob: -12.880828857421875

Token 118: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.14279627799987793
    2. ' range' → logprob: -2.017796277999878
    3. ' ' → logprob: -10.642796516418457
    4. ' h' → logprob: -11.017796516418457
    5. 'h' → logprob: -11.267796516418457
    6. 'r' → logprob: -11.267796516418457
    7. '   ' → logprob: -11.517796516418457
    8. 'rang' → logprob: -11.767796516418457
    9. '	range' → logprob: -11.892796516418457
    10. '(range' → logprob: -11.892796516418457

Token 119: '(k' (ID: 12125)
  Prédit: '(k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(k' → logprob: -0.0017138548428192735
    2. '(' → logprob: -6.376713752746582
    3. '(n' → logprob: -11.876713752746582
    4. ' (' → logprob: -13.001713752746582
    5. 'k' → logprob: -13.751713752746582
    6. ' k' → logprob: -15.501713752746582
    7. '(K' → logprob: -15.501713752746582
    8. '(
' → logprob: -15.501713752746582
    9. ')' → logprob: -15.626713752746582
    10. '(i' → logprob: -15.876713752746582

Token 120: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0005944972508586943
    2. ',n' → logprob: -7.625594615936279
    3. ' ,' → logprob: -9.500594139099121
    4. ',k' → logprob: -10.500594139099121
    5. ',len' → logprob: -13.500594139099121
    6. '):' → logprob: -14.625594139099121
    7. ',num' → logprob: -15.000594139099121
    8. '  ' → logprob: -15.500594139099121
    9. '   ' → logprob: -15.625594139099121
    10. ',h' → logprob: -15.750594139099121

Token 121: ' len' (ID: 4631)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.062196455895900726
    2. ' n' → logprob: -2.8121964931488037
    3. '   ' → logprob: -8.562196731567383
    4. 'len' → logprob: -10.812196731567383
    5. ' len' → logprob: -11.687196731567383
    6. '	n' → logprob: -12.062196731567383
    7. ')n' → logprob: -13.812196731567383
    8. '
' → logprob: -14.687196731567383
    9. '<|end|>' → logprob: -14.687196731567383
    10. ' ' → logprob: -14.812196731567383

Token 122: '(h' (ID: 8120)
  Prédit: '(h'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(h' → logprob: -0.0009405235759913921
    2. '(' → logprob: -7.000940322875977
    3. 'h' → logprob: -10.875940322875977
    4. '(
' → logprob: -12.500940322875977
    5. '(n' → logprob: -13.125940322875977
    6. ')' → logprob: -13.500940322875977
    7. '(s' → logprob: -13.750940322875977
    8. '(k' → logprob: -15.000940322875977
    9. ' (' → logprob: -15.250940322875977
    10. '(a' → logprob: -15.625940322875977

Token 123: ')):
' (ID: 22530)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.021599194034934044
    2. ')):' → logprob: -3.896599292755127
    3. ')' → logprob: -7.271599292755127
    4. '):
' → logprob: -8.646598815917969
    5. '))' → logprob: -9.021598815917969
    6. ' ):' → logprob: -10.771598815917969
    7. ')):
' → logprob: -10.771598815917969
    8. ']):' → logprob: -11.521598815917969
    9. ':' → logprob: -12.021598815917969
    10. '   ' → logprob: -13.021598815917969

Token 124: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5919873714447021
    2. '       ' → logprob: -0.9669873714447021
    3. 'res' → logprob: -3.341987371444702
    4. ' res' → logprob: -3.716987371444702
    5. ':' → logprob: -5.716987609863281
    6. '
' → logprob: -7.091987609863281
    7. '    
' → logprob: -7.716987609863281
    8. ' ' → logprob: -7.966987609863281
    9. '  ' → logprob: -8.341987609863281
    10. '    ' → logprob: -8.341987609863281

Token 125: ' res' (ID: 694)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' (adapté à ' res') → logprob: -0.06790731847286224
    2. '   ' → logprob: -2.9429073333740234
    3. ' res' → logprob: -4.442907333374023
    4. '       ' → logprob: -6.817907333374023
    5. '
' → logprob: -10.567907333374023
    6. '	res' → logprob: -11.192907333374023
    7. ' ' → logprob: -11.317907333374023
    8. '    
' → logprob: -11.442907333374023
    9. '  ' → logprob: -11.692907333374023
    10. 'ress' → logprob: -12.442907333374023

Token 126: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.009595300070941448
    2. '+=' → logprob: -4.7595953941345215
    3. '+' → logprob: -7.3845953941345215
    4. ' -=' → logprob: -8.509594917297363
    5. ' +' → logprob: -9.384594917297363
    6. ' ' → logprob: -10.259594917297363
    7. '+='' → logprob: -11.634594917297363
    8. '    ' → logprob: -12.134594917297363
    9. ']+=' → logprob: -12.259594917297363
    10. ' ' → logprob: -12.759594917297363

Token 127: ' h' (ID: 312)
  Prédit: 'h'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'h' → logprob: -0.04858827963471413
    2. ' h' → logprob: -3.048588275909424
    3. '	h' → logprob: -14.548588752746582
    4. ' ' → logprob: -15.923588752746582
    5. '(h' → logprob: -15.923588752746582
    6. '   ' → logprob: -16.548587799072266
    7. ' ' → logprob: -17.048587799072266
    8. 'hq' → logprob: -17.673587799072266
    9. '<h' → logprob: -17.798587799072266
    10. '"h' → logprob: -18.548587799072266

Token 128: '[idx' (ID: 25582)
  Prédit: '[idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[idx' → logprob: -0.1270461231470108
    2. '[' → logprob: -2.1270461082458496
    3. '[h' → logprob: -9.752046585083008
    4. ' [' → logprob: -10.752046585083008
    5. '[
' → logprob: -11.502046585083008
    6. '[token' → logprob: -12.377046585083008
    7. '[id' → logprob: -12.377046585083008
    8. '[index' → logprob: -12.877046585083008
    9. '```' → logprob: -13.002046585083008
    10. '[int' → logprob: -13.502046585083008

Token 129: ']
' (ID: 1592)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0010761572048068047
    2. ')
' → logprob: -7.5010762214660645
    3. ' )' → logprob: -8.376075744628906
    4. ']' → logprob: -8.626075744628906
    5. '<|end|>' → logprob: -10.626075744628906
    6. '   ' → logprob: -10.876075744628906
    7. '-' → logprob: -11.376075744628906
    8. '])' → logprob: -11.376075744628906
    9. ' ' → logprob: -11.876075744628906
    10. ' -' → logprob: -12.376075744628906

Token 130: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.5692632794380188
    2. '   ' → logprob: -1.319263219833374
    3. '
' → logprob: -1.819263219833374
    4. '    
' → logprob: -6.194263458251953
    5. ' print' → logprob: -6.444263458251953
    6. '```' → logprob: -7.569263458251953
    7. '\n' → logprob: -8.694263458251953
    8. '  
' → logprob: -9.319263458251953
    9. ' 
' → logprob: -10.319263458251953
    10. '
' → logprob: -10.819263458251953

Token 131: ' print' (ID: 2123)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.07980804890394211
    2. 'print' (adapté à ' print') → logprob: -3.704807996749878
    3. '   ' → logprob: -3.954807996749878
    4. '\n' → logprob: -4.079808235168457
    5. '    
' → logprob: -5.204808235168457
    6. '  
' → logprob: -6.204808235168457
    7. ' 
' → logprob: -6.204808235168457
    8. '<|end|>' → logprob: -6.329808235168457
    9. ' print' → logprob: -7.079808235168457
    10. '' → logprob: -7.079808235168457

Token 132: '(res' (ID: 8331)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0017202809685841203
    2. '(res' → logprob: -6.376720428466797
    3. '("("' → logprob: -12.001720428466797
    4. '('' → logprob: -12.626720428466797
    5. '()' → logprob: -12.751720428466797
    6. '(
' → logprob: -13.001720428466797
    7. ' (' → logprob: -13.501720428466797
    8. '(

' → logprob: -14.001720428466797
    9. '(`' → logprob: -14.876720428466797
    10. '((' → logprob: -15.376720428466797

Token 133: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.8889261304575484e-06
    2. ')
' → logprob: -13.125003814697266
    3. ' )' → logprob: -13.375003814697266
    4. '()' → logprob: -15.875003814697266
    5. ')`' → logprob: -16.875003814697266
    6. '))' → logprob: -17.500003814697266
    7. '())' → logprob: -17.625003814697266
    8. '```' → logprob: -17.750003814697266
    9. '(' → logprob: -18.250003814697266
    10. ')

' → logprob: -18.625003814697266

Token 134: 'if' (ID: 366)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 135: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.16449029743671417
    2. ' ' → logprob: -2.039490222930908
    3. '__' → logprob: -4.414490222930908
    4. ' ' → logprob: -5.539490222930908
    5. ' main' → logprob: -6.164490222930908
    6. '_' → logprob: -6.164490222930908
    7. ' _' → logprob: -6.914490222930908
    8. '  ' → logprob: -9.289490699768066
    9. ' ‌' → logprob: -9.664490699768066
    10. ' ' → logprob: -10.164490699768066

Token 136: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.006477329879999161
    2. ' __' → logprob: -5.256477355957031
    3. '__.__' → logprob: -7.506477355957031
    4. ' ==' → logprob: -8.381477355957031
    5. '.__' → logprob: -8.881477355957031
    6. '__.' → logprob: -8.881477355957031
    7. '_' → logprob: -9.381477355957031
    8. '.' → logprob: -10.506477355957031
    9. '==' → logprob: -10.881477355957031
    10. '___' → logprob: -11.256477355957031

Token 137: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -9.491498531133402e-06
    2. '__.__' → logprob: -11.750009536743164
    3. '_' → logprob: -14.000009536743164
    4. '__.' → logprob: -14.750009536743164
    5. '==' → logprob: -16.250009536743164
    6. ' __' → logprob: -16.375009536743164
    7. '____' → logprob: -16.625009536743164
    8. '___' → logprob: -17.000009536743164
    9. '__
' → logprob: -17.250009536743164
    10. ' ==' → logprob: -17.625009536743164

Token 138: ' ==' (ID: 951)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.5396761298179626
    2. ' ==' → logprob: -1.0396761894226074
    3. '==' → logprob: -2.7896761894226074
    4. '.' → logprob: -7.414676189422607
    5. '_' → logprob: -8.03967571258545
    6. '__.__' → logprob: -8.28967571258545
    7. '=="' → logprob: -8.41467571258545
    8. '.__' → logprob: -8.53967571258545
    9. '=='' → logprob: -8.91467571258545
    10. '<|end|>' → logprob: -9.03967571258545

Token 139: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.06198606267571449
    2. ''' → logprob: -2.811985969543457
    3. ' "__' → logprob: -11.311985969543457
    4. '__' → logprob: -12.436985969543457
    5. '"name' → logprob: -14.311985969543457
    6. '"user' → logprob: -14.561985969543457
    7. ' '__' → logprob: -15.061985969543457
    8. ' "' → logprob: -15.311985969543457
    9. ''name' → logprob: -16.686986923217773
    10. '"class' → logprob: -16.811986923217773

Token 140: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -1.306760805164231e-05
    2. 'name' → logprob: -11.25001335144043
    3. ' main' → logprob: -17.37501335144043
    4. '_main' → logprob: -18.12501335144043
    5. '__' → logprob: -18.75001335144043
    6. 'ma' → logprob: -19.37501335144043
    7. 'built' → logprob: -19.37501335144043
    8. '"' → logprob: -20.25001335144043
    9. '(main' → logprob: -21.12501335144043
    10. '	main' → logprob: -21.75001335144043

Token 141: '__":
' (ID: 49892)
  Prédit: '__":
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__":
' → logprob: -0.5759535431861877
    2. '__' → logprob: -0.8259535431861877
    3. '__':
' → logprob: -11.700953483581543
    4. '_' → logprob: -12.325953483581543
    5. '__.' → logprob: -14.450953483581543
    6. '__["' → logprob: -15.075953483581543
    7. '"' → logprob: -15.575953483581543
    8. '__:' → logprob: -16.07595443725586
    9. '__("' → logprob: -16.57595443725586
    10. '__.__' → logprob: -16.82595443725586

Token 142: '   ' (ID: 271)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.015124785713851452
    2. 'main' → logprob: -4.265124797821045
    3. '"' → logprob: -8.015124320983887
    4. '	main' → logprob: -8.140124320983887
    5. ' ' → logprob: -8.890124320983887
    6. '   ' → logprob: -9.765124320983887
    7. ' 
' → logprob: -10.140124320983887
    8. '    
' → logprob: -11.140124320983887
    9. '    ' → logprob: -11.265124320983887
    10. ' ' → logprob: -11.390124320983887

Token 143: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' (adapté à ' main') → logprob: -0.00033558503491804004
    2. ' main' → logprob: -8.000335693359375
    3. '	main' → logprob: -16.250335693359375
    4. 'ma' → logprob: -17.250335693359375
    5. ' ' → logprob: -18.125335693359375
    6. '   ' → logprob: -18.500335693359375
    7. 'm' → logprob: -18.875335693359375
    8. 'mai' → logprob: -18.875335693359375
    9. 'maine' → logprob: -19.625335693359375
    10. '  ' → logprob: -19.625335693359375

Token 144: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.016257816925644875
    2. '(' → logprob: -4.2662577629089355
    3. '()
' → logprob: -6.5162577629089355
    4. '(
' → logprob: -8.891258239746094
    5. '
' → logprob: -9.016258239746094
    6. '```' → logprob: -9.391258239746094
    7. '<|end|>' → logprob: -9.516258239746094
    8. '\n' → logprob: -9.516258239746094
    9. '#' → logprob: -10.266258239746094
    10. '\' → logprob: -10.641258239746094


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 142
Tokens correctement prédits (1ère position, stricte): 38
Tokens correctement prédits (1ère position, avec adaptation): 44
Tokens correctement prédits (top 10): 100
Précision stricte (1ère position): 26.76%
Précision adaptée (1ère position): 30.99%
Précision (top 10): 70.42%
================================================================================
