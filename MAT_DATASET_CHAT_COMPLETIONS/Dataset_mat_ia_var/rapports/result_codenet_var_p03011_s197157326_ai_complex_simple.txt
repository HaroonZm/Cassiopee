================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:56:38
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import functools
import operator

a = list(map(int, input().split()))
print(functools.reduce(operator.add, sorted(a)[:2]))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' functools' (ID: 142636)
  → Token d'amorce (pas de prédiction)

Token 2: '
' (ID: 198)
  → Token d'amorce (pas de prédiction)

Token 3: 'import' (ID: 561)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0001329791557509452
    2. '(' → logprob: -10.62513256072998
    3. 'def' → logprob: -10.62513256072998
    4. '\' → logprob: -11.12513256072998
    5. '```' → logprob: -11.62513256072998
    6. '\.' → logprob: -11.87513256072998
    7. '.def' → logprob: -12.00013256072998
    8. '.​' → logprob: -12.00013256072998
    9. '<|end|>' → logprob: -12.12513256072998
    10. 'import' → logprob: -12.12513256072998

Token 4: ' operator' (ID: 11019)
  Prédit: ' os'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' os' → logprob: -0.037730906158685684
    2. ' sys' → logprob: -3.4127309322357178
    3. ' operator' → logprob: -6.162730693817139
    4. 'os' → logprob: -7.287730693817139
    5. ' math' → logprob: -7.662730693817139
    6. ' itertools' → logprob: -7.787730693817139
    7. ' json' → logprob: -8.787731170654297
    8. ' collections' → logprob: -8.912731170654297
    9. 'operator' → logprob: -10.287731170654297
    10. 'sys' → logprob: -10.412731170654297

Token 5: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.00023739055905025452
    2. '\' → logprob: -10.250237464904785
    3. '```' → logprob: -10.375237464904785
    4. '.
' → logprob: -11.000237464904785
    5. 'def' → logprob: -11.000237464904785
    6. '(' → logprob: -11.125237464904785
    7. ',' → logprob: -11.250237464904785
    8. 'as' → logprob: -11.375237464904785
    9. '_' → logprob: -11.625237464904785
    10. '#' → logprob: -12.000237464904785

Token 6: 'a' (ID: 64)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0033160268794745207
    2. '=' → logprob: -6.7533159255981445
    3. '(' → logprob: -7.5033159255981445
    4. '#' → logprob: -8.003315925598145
    5. 'def' → logprob: -8.253315925598145
    6. '*' → logprob: -8.378315925598145
    7. '.reduce' → logprob: -8.878315925598145
    8. ',' → logprob: -8.878315925598145
    9. '@' → logprob: -9.253315925598145
    10. '+' → logprob: -9.378315925598145

Token 7: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0033686580136418343
    2. 's' → logprob: -6.628368854522705
    3. '[' → logprob: -7.128368854522705
    4. '=' → logprob: -7.503368854522705
    5. ',' → logprob: -8.628368377685547
    6. '_' → logprob: -9.128368377685547
    7. 'r' → logprob: -9.253368377685547
    8. ' ' → logprob: -10.003368377685547
    9. 'a' → logprob: -10.128368377685547
    10. ' .' → logprob: -10.253368377685547

Token 8: ' list' (ID: 1562)
  Prédit: ' functools'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' functools' → logprob: -0.6691660284996033
    2. ' [' → logprob: -0.9191660284996033
    3. ' []' → logprob: -3.169166088104248
    4. ' ' → logprob: -3.919166088104248
    5. '[' → logprob: -4.544166088104248
    6. 'fun' → logprob: -4.919166088104248
    7. '1' → logprob: -5.919166088104248
    8. ' fun' → logprob: -6.794166088104248
    9. '[]' → logprob: -7.044166088104248
    10. '5' → logprob: -7.419166088104248

Token 9: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.006491188891232014
    2. '(range' → logprob: -5.631491184234619
    3. '(a' → logprob: -6.006491184234619
    4. '([' → logprob: -9.506491661071777
    5. '(operator' → logprob: -9.881491661071777
    6. '(filter' → logprob: -10.006491661071777
    7. '[' → logprob: -10.131491661071777
    8. 'a' → logprob: -10.881491661071777
    9. '((' → logprob: -10.881491661071777
    10. '(s' → logprob: -11.131491661071777

Token 10: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4289639890193939
    2. '(operator' → logprob: -1.1789640188217163
    3. '(lambda' → logprob: -3.9289638996124268
    4. '(f' → logprob: -3.9289638996124268
    5. '(fun' → logprob: -6.928964138031006
    6. '(op' → logprob: -8.303963661193848
    7. 'operator' → logprob: -8.803963661193848
    8. '(func' → logprob: -8.928963661193848
    9. '(int' → logprob: -9.303963661193848
    10. '(str' → logprob: -9.928963661193848

Token 11: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.01459075603634119
    2. ',' → logprob: -5.389590740203857
    3. '(input' → logprob: -5.514590740203857
    4. '(a' → logprob: -6.639590740203857
    5. '))' → logprob: -6.764590740203857
    6. '(data' → logprob: -7.514590740203857
    7. ')' → logprob: -7.639590740203857
    8. '(range' → logprob: -8.639591217041016
    9. '(','' → logprob: -8.764591217041016
    10. '(token' → logprob: -8.889591217041016

Token 12: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.6382262706756592
    2. ' input' → logprob: -0.7632262706756592
    3. '(input' → logprob: -5.888226509094238
    4. ' '' → logprob: -7.138226509094238
    5. ''' → logprob: -7.263226509094238
    6. ')' → logprob: -7.888226509094238
    7. '"' → logprob: -8.388226509094238
    8. ' "' → logprob: -8.513226509094238
    9. ',input' → logprob: -8.888226509094238
    10. ' (' → logprob: -10.013226509094238

Token 13: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.24058669805526733
    2. '()))' → logprob: -2.240586757659912
    3. '()' → logprob: -3.240586757659912
    4. '('' → logprob: -3.615586757659912
    5. '(()' → logprob: -3.990586757659912
    6. '()));' → logprob: -4.865586757659912
    7. '())' → logprob: -5.490586757659912
    8. '(""))' → logprob: -5.865586757659912
    9. '())))' → logprob: -6.615586757659912
    10. '))' → logprob: -6.865586757659912

Token 14: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0005692371050827205
    2. 'strip' → logprob: -7.5005693435668945
    3. ' split' → logprob: -11.750569343566895
    4. 'rstrip' → logprob: -11.750569343566895
    5. '(split' → logprob: -15.125569343566895
    6. 'spl' → logprob: -16.000568389892578
    7. 'replace' → logprob: -17.125568389892578
    8. 's' → logprob: -17.750568389892578
    9. ' strip' → logprob: -18.375568389892578
    10. 'sp' → logprob: -18.625568389892578

Token 15: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.4720233082771301
    2. '())' → logprob: -1.0970232486724854
    3. '))' → logprob: -4.0970234870910645
    4. ')' → logprob: -4.5970234870910645
    5. '())))' → logprob: -4.9720234870910645
    6. '()' → logprob: -5.2220234870910645
    7. ')))' → logprob: -6.3470234870910645
    8. '(' → logprob: -6.7220234870910645
    9. '()));' → logprob: -9.097023010253906
    10. '()))
' → logprob: -9.847023010253906

Token 16: 'print' (ID: 1598)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6752897500991821
    2. 'print' → logprob: -1.1752897500991821
    3. '*' → logprob: -2.3002896308898926
    4. '[' → logprob: -3.3002896308898926
    5. ')
' → logprob: -5.300289630889893
    6. 'result' → logprob: -5.425289630889893
    7. 'reduce' → logprob: -5.425289630889893
    8. '[::-' → logprob: -5.675289630889893
    9. '#' → logprob: -5.800289630889893
    10. '*
' → logprob: -5.925289630889893

Token 17: '(f' (ID: 1526)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.023422496393322945
    2. '(f' → logprob: -3.7734224796295166
    3. '(operator' → logprob: -9.773422241210938
    4. '("("' → logprob: -9.773422241210938
    5. '(fun' → logprob: -10.648422241210938
    6. '((' → logprob: -11.023422241210938
    7. '(
' → logprob: -12.023422241210938
    8. '(.' → logprob: -12.648422241210938
    9. '(func' → logprob: -12.773422241210938
    10. '(

' → logprob: -13.273422241210938

Token 18: 'unct' (ID: 29752)
  Prédit: 'unct'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'unct' → logprob: -0.061872441321611404
    2. 'un' → logprob: -2.9368724822998047
    3. 'unc' → logprob: -5.561872482299805
    4. 'u' → logprob: -6.186872482299805
    5. ''un' → logprob: -7.311872482299805
    6. ''u' → logprob: -8.686872482299805
    7. 'unt' → logprob: -9.561872482299805
    8. 'unch' → logprob: -10.811872482299805
    9. 'fun' → logprob: -11.186872482299805
    10. 'unci' → logprob: -11.436872482299805

Token 19: 'ools' (ID: 10710)
  Prédit: 'ools'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ools' → logprob: -0.01087956316769123
    2. '.tools' → logprob: -5.5108795166015625
    3. '.l' → logprob: -5.7608795166015625
    4. '.' → logprob: -6.5108795166015625
    5. 'ls' → logprob: -6.6358795166015625
    6. 'ols' → logprob: -8.010879516601562
    7. 'l' → logprob: -10.135879516601562
    8. 'ool' → logprob: -10.260879516601562
    9. '```' → logprob: -10.510879516601562
    10. '[' → logprob: -10.510879516601562

Token 20: '.reduce' (ID: 49441)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0005141906440258026
    2. '.)' → logprob: -8.375514030456543
    3. '.reduce' → logprob: -8.500514030456543
    4. '.operator' → logprob: -11.125514030456543
    5. '.groupby' → logprob: -11.750514030456543
    6. ' .' → logprob: -11.875514030456543
    7. '.period' → logprob: -12.125514030456543
    8. ')' → logprob: -12.250514030456543
    9. '.chain' → logprob: -12.500514030456543
    10. '.softmax' → logprob: -12.750514030456543

Token 21: '(operator' (ID: 145734)
  Prédit: '(operator'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(operator' → logprob: -0.011060908436775208
    2. '(' → logprob: -4.51106071472168
    3. ' (' → logprob: -12.01106071472168
    4. '(op' → logprob: -12.63606071472168
    5. '(f' → logprob: -13.13606071472168
    6. 'operator' → logprob: -14.13606071472168
    7. '(
' → logprob: -14.88606071472168
    8. '(operation' → logprob: -15.88606071472168
    9. ' operator' → logprob: -16.01106071472168
    10. '```' → logprob: -16.13606071472168

Token 22: '.add' (ID: 1950)
  Prédit: '.mul'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.mul' → logprob: -0.004399736411869526
    2. '.' → logprob: -5.62939977645874
    3. '.add' → logprob: -7.25439977645874
    4. '.im' → logprob: -10.254399299621582
    5. '.mult' → logprob: -10.754399299621582
    6. '.multiply' → logprob: -11.504399299621582
    7. ' .' → logprob: -11.754399299621582
    8. '.matmul' → logprob: -12.379399299621582
    9. '.m' → logprob: -12.879399299621582
    10. '.and' → logprob: -13.004399299621582

Token 23: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0001317871210630983
    2. ',a' → logprob: -9.000131607055664
    3. 'a' → logprob: -12.250131607055664
    4. ' ,' → logprob: -12.875131607055664
    5. ',
' → logprob: -14.875131607055664
    6. '(a' → logprob: -15.250131607055664
    7. '`,' → logprob: -15.875131607055664
    8. '),' → logprob: -16.875131607055664
    9. ' a' → logprob: -17.000131607055664
    10. ')' → logprob: -17.000131607055664

Token 24: ' sorted' (ID: 20099)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.5759417414665222
    2. 'a' → logprob: -0.8259417414665222
    3. '(a' → logprob: -14.450942039489746
    4. ',a' → logprob: -14.700942039489746
    5. ' ' → logprob: -14.950942039489746
    6. '	a' → logprob: -15.325942039489746
    7. ')a' → logprob: -15.450942039489746
    8. '_a' → logprob: -15.825942039489746
    9. ',' → logprob: -15.950942039489746
    10. ')' → logprob: -16.32594108581543

Token 25: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.0009151478880085051
    2. '(' → logprob: -7.000915050506592
    3. 'a' → logprob: -13.25091552734375
    4. '((' → logprob: -13.75091552734375
    5. '(
' → logprob: -14.87591552734375
    6. ' (' → logprob: -15.25091552734375
    7. '(s' → logprob: -17.00091552734375
    8. '(abs' → logprob: -17.12591552734375
    9. '(len' → logprob: -17.50091552734375
    10. '(x' → logprob: -17.62591552734375

Token 26: ')' (ID: 8)
  Prédit: ')))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.3906409442424774
    2. '))' → logprob: -1.5156409740447998
    3. ')' → logprob: -3.0156409740448
    4. ',' → logprob: -3.7656409740448
    5. '(' → logprob: -3.8906409740448
    6. '),' → logprob: -4.890640735626221
    7. '(a' → logprob: -7.015640735626221
    8. '))))' → logprob: -7.765640735626221
    9. '())))' → logprob: -8.015641212463379
    10. '[' → logprob: -8.265641212463379

Token 27: '[:' (ID: 7808)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.01819969341158867
    2. ')' → logprob: -4.143199920654297
    3. '[' → logprob: -7.018199920654297
    4. ')))' → logprob: -7.018199920654297
    5. ',' → logprob: -8.518199920654297
    6. '),' → logprob: -10.018199920654297
    7. '))
' → logprob: -10.393199920654297
    8. '[:-' → logprob: -10.518199920654297
    9. ' ))' → logprob: -11.393199920654297
    10. ''))' → logprob: -11.768199920654297

Token 28: '2' (ID: 17)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.1555446982383728
    2. '5' → logprob: -2.0305447578430176
    3. '2' → logprob: -5.030544757843018
    4. '4' → logprob: -5.780544757843018
    5. 'len' → logprob: -7.030544757843018
    6. '10' → logprob: -7.155544757843018
    7. ' ' → logprob: -7.655544757843018
    8. '-' → logprob: -8.03054428100586
    9. '6' → logprob: -8.40554428100586
    10. 'k' → logprob: -8.65554428100586

Token 29: ']))' (ID: 20259)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.016285963356494904
    2. ')' → logprob: -4.5162858963012695
    3. ')))' → logprob: -5.2662858963012695
    4. '),' → logprob: -10.76628589630127
    5. ']))' → logprob: -10.76628589630127
    6. ' ))' → logprob: -12.26628589630127
    7. '))
' → logprob: -12.39128589630127
    8. ',' → logprob: -13.14128589630127
    9. '))))' → logprob: -13.26628589630127
    10. '])' → logprob: -13.39128589630127


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 27
Tokens correctement prédits (1ère position, stricte): 6
Tokens correctement prédits (1ère position, avec adaptation): 6
Tokens correctement prédits (top 10): 19
Précision stricte (1ère position): 22.22%
Précision adaptée (1ère position): 22.22%
Précision (top 10): 70.37%
================================================================================
