================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:15:57
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N = int(input())
a = list(map(int, input().split()))
count = 0
for n in a:
    while True:
        if n % 2 == 0:
            count += 1
            n //= 2
        else:
            break
print(count)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0001967457792488858
    2. '```' → logprob: -9.50019645690918
    3. '(N' → logprob: -10.37519645690918
    4. '`' → logprob: -10.87519645690918
    5. '(
' → logprob: -11.00019645690918
    6. ')' → logprob: -11.62519645690918
    7. '("("' → logprob: -11.62519645690918
    8. ''' → logprob: -11.62519645690918
    9. '()' → logprob: -11.87519645690918
    10. '('' → logprob: -12.25019645690918

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5316423177719116
    2. ')' → logprob: -0.9066423177719116
    3. '()' → logprob: -5.156642436981201
    4. '())' → logprob: -6.656642436981201
    5. '(
' → logprob: -7.656642436981201
    6. '```' → logprob: -8.781641960144043
    7. '))' → logprob: -8.906641960144043
    8. '")' → logprob: -9.406641960144043
    9. '')' → logprob: -9.531641960144043
    10. '(

' → logprob: -9.906641960144043

Token 5: 'a' (ID: 64)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.6051552891731262
    2. 'if' → logprob: -1.3551552295684814
    3. '\n' → logprob: -2.8551552295684814
    4. 'i' → logprob: -3.7301552295684814
    5. 's' → logprob: -3.8551552295684814
    6. '```' → logprob: -4.2301554679870605
    7. '`' → logprob: -4.3551554679870605
    8. 'x' → logprob: -4.7301554679870605
    9. 'a' → logprob: -4.7301554679870605
    10. '\' → logprob: -4.8551554679870605

Token 6: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0054806252010166645
    2. '[a' → logprob: -6.380480766296387
    3. 'a' → logprob: -7.255480766296387
    4. ' =' → logprob: -7.505480766296387
    5. '[i' → logprob: -7.505480766296387
    6. '.' → logprob: -8.005480766296387
    7. '=' → logprob: -8.005480766296387
    8. '.append' → logprob: -8.380480766296387
    9. '+' → logprob: -8.630480766296387
    10. '[]' → logprob: -8.630480766296387

Token 7: ' list' (ID: 1562)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.5684943199157715
    2. ' []' → logprob: -1.1934943199157715
    3. 'list' → logprob: -2.6934943199157715
    4. '[input' → logprob: -4.1934943199157715
    5. ' list' → logprob: -4.4434943199157715
    6. ' [' → logprob: -4.5684943199157715
    7. '[' → logprob: -4.6934943199157715
    8. 'input' → logprob: -4.6934943199157715
    9. '[int' → logprob: -5.3184943199157715
    10. ' input' → logprob: -7.3184943199157715

Token 8: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0011860613012686372
    2. '(range' → logprob: -7.001185894012451
    3. '(a' → logprob: -8.75118637084961
    4. '(
' → logprob: -10.50118637084961
    5. '```' → logprob: -10.50118637084961
    6. '("("' → logprob: -11.62618637084961
    7. ' (' → logprob: -11.75118637084961
    8. '(input' → logprob: -12.00118637084961
    9. '((' → logprob: -12.50118637084961
    10. '(

' → logprob: -12.75118637084961

Token 9: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.13223983347415924
    2. '(' → logprob: -2.257239818572998
    3. '(str' → logprob: -4.257239818572998
    4. ')' → logprob: -6.507239818572998
    5. '(input' → logprob: -6.632239818572998
    6. '(lambda' → logprob: -6.882239818572998
    7. '<int' → logprob: -8.382240295410156
    8. 'int' → logprob: -8.632240295410156
    9. '[int' → logprob: -8.632240295410156
    10. '=int' → logprob: -9.007240295410156

Token 10: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.021475985646247864
    2. '(' → logprob: -4.521475791931152
    3. ',input' → logprob: -4.646475791931152
    4. ',' → logprob: -7.771475791931152
    5. ')' → logprob: -9.146475791931152
    6. 'input' → logprob: -9.896475791931152
    7. '=input' → logprob: -9.896475791931152
    8. '))' → logprob: -10.646475791931152
    9. ' (' → logprob: -11.021475791931152
    10. '(int' → logprob: -11.021475791931152

Token 11: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.011090267449617386
    2. ' input' → logprob: -4.511090278625488
    3. '(input' → logprob: -10.136090278625488
    4. ',input' → logprob: -13.386090278625488
    5. '=input' → logprob: -14.761090278625488
    6. ')' → logprob: -15.011090278625488
    7. '	input' → logprob: -15.511090278625488
    8. '<input' → logprob: -15.636090278625488
    9. ' ' → logprob: -16.136089324951172
    10. '_input' → logprob: -17.011089324951172

Token 12: '().' (ID: 1454)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.43470820784568787
    2. '()' → logprob: -1.5597082376480103
    3. '())' → logprob: -2.0597081184387207
    4. '().' → logprob: -5.434708118438721
    5. '(' → logprob: -5.434708118438721
    6. '()));' → logprob: -5.684708118438721
    7. '())))' → logprob: -7.309708118438721
    8. '))' → logprob: -7.684708118438721
    9. '()>' → logprob: -7.684708118438721
    10. ')' → logprob: -7.809708118438721

Token 13: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0004050514253322035
    2. 'strip' → logprob: -7.8754048347473145
    3. 'rstrip' → logprob: -10.750405311584473
    4. ' split' → logprob: -12.750405311584473
    5. '(split' → logprob: -14.875405311584473
    6. 'spl' → logprob: -15.750405311584473
    7. ')' → logprob: -16.375404357910156
    8. 's' → logprob: -17.625404357910156
    9. 'sp' → logprob: -18.500404357910156
    10. '```' → logprob: -18.625404357910156

Token 14: '()))
' (ID: 24521)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7344193458557129
    2. '))' → logprob: -0.7344193458557129
    3. '()))' → logprob: -4.109419345855713
    4. '(' → logprob: -4.484419345855713
    5. '())' → logprob: -5.109419345855713
    6. ')))' → logprob: -5.859419345855713
    7. '('' → logprob: -5.859419345855713
    8. ''))' → logprob: -7.859419345855713
    9. '()' → logprob: -8.609418869018555
    10. '(','' → logprob: -8.609418869018555

Token 15: 'count' (ID: 5420)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.752990186214447
    2. 'a' → logprob: -0.877990186214447
    3. 'c' → logprob: -3.127990245819092
    4. 'for' → logprob: -3.627990245819092
    5. 'sum' → logprob: -4.377990245819092
    6. 'b' → logprob: -4.502990245819092
    7. 'count' → logprob: -5.127990245819092
    8. 'max' → logprob: -6.002990245819092
    9. 'result' → logprob: -6.377990245819092
    10. 'm' → logprob: -6.502990245819092

Token 16: ' =' (ID: 314)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.9809179306030273
    2. '(' → logprob: -1.1059179306030273
    3. '_' → logprob: -1.3559179306030273
    4. '[' → logprob: -3.3559179306030273
    5. '_s' → logprob: -8.605917930603027
    6. '[(' → logprob: -8.730917930603027
    7. '(_)' → logprob: -8.730917930603027
    8. '('' → logprob: -9.230917930603027
    9. '```' → logprob: -9.230917930603027
    10. '\[' → logprob: -9.730917930603027

Token 17: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.04242110997438431
    2. ' ' → logprob: -3.4174211025238037
    3. '{}' → logprob: -4.917421340942383
    4. '{' → logprob: -7.292421340942383
    5. ' {}' → logprob: -7.292421340942383
    6. ' {' → logprob: -10.542421340942383
    7. 'a' → logprob: -11.167421340942383
    8. '[' → logprob: -12.417421340942383
    9. '(' → logprob: -12.417421340942383
    10. ' defaultdict' → logprob: -13.167421340942383

Token 18: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.4783094823360443
    2. '{}' → logprob: -0.9783095121383667
    3. '{' → logprob: -5.478309631347656
    4. '[' → logprob: -10.728309631347656
    5. ' ' → logprob: -12.228309631347656
    6. 'default' → logprob: -12.603309631347656
    7. '{})' → logprob: -12.603309631347656
    8. 'dict' → logprob: -12.603309631347656
    9. '{}
' → logprob: -12.853309631347656
    10. ' {}' → logprob: -12.978309631347656

Token 19: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.05717060714960098
    2. '
' → logprob: -3.6821706295013428
    3. '\n' → logprob: -3.6821706295013428
    4. ' for' → logprob: -5.682170391082764
    5. '```' → logprob: -7.307170391082764
    6. '<|end|>' → logprob: -7.807170391082764
    7. '\' → logprob: -7.932170391082764
    8. '' → logprob: -8.557170867919922
    9. '
' → logprob: -10.182170867919922
    10. '	for' → logprob: -10.807170867919922

Token 20: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0002387018030276522
    2. '```' → logprob: -9.125238418579102
    3. '
' → logprob: -9.875238418579102
    4. '\n' → logprob: -10.125238418579102
    5. ' for' → logprob: -10.500238418579102
    6. '``' → logprob: -12.625238418579102
    7. '`' → logprob: -12.750238418579102
    8. '\' → logprob: -13.250238418579102
    9. '	for' → logprob: -14.125238418579102
    10. '' → logprob: -14.375238418579102

Token 21: ' n' (ID: 297)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3020370602607727
    2. ' i' → logprob: -1.427037000656128
    3. '  ' → logprob: -3.927037000656128
    4. ' _' → logprob: -8.052037239074707
    5. '_' → logprob: -8.177037239074707
    6. ' x' → logprob: -9.552037239074707
    7. ' ‌' → logprob: -9.552037239074707
    8. ' item' → logprob: -9.677037239074707
    9. 'i' → logprob: -10.177037239074707
    10. ' a' → logprob: -10.302037239074707

Token 22: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.051603302359580994
    2. 'in' → logprob: -3.551603317260742
    3. ' ' → logprob: -3.926603317260742
    4. ' i' → logprob: -7.176603317260742
    5. 'i' → logprob: -8.051603317260742
    6. '  ' → logprob: -8.176603317260742
    7. '_' → logprob: -8.801603317260742
    8. 'n' → logprob: -9.176603317260742
    9. ')' → logprob: -9.551603317260742
    10. '[' → logprob: -9.676603317260742

Token 23: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.35762766003608704
    2. 'a' → logprob: -1.2326276302337646
    3. ' range' → logprob: -4.857627868652344
    4. 'range' → logprob: -6.607627868652344
    5. ' ' → logprob: -11.482627868652344
    6. '(a' → logprob: -13.107627868652344
    7. '	a' → logprob: -13.357627868652344
    8. ' xrange' → logprob: -13.857627868652344
    9. '```' → logprob: -14.107627868652344
    10. 's' → logprob: -14.482627868652344

Token 24: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0001801801408873871
    2. ' :' → logprob: -8.8751802444458
    3. ':**' → logprob: -11.5001802444458
    4. '[:]' → logprob: -11.6251802444458
    5. ':
' → logprob: -11.7501802444458
    6. '   ' → logprob: -12.7501802444458
    7. '[' → logprob: -12.7501802444458
    8. '):' → logprob: -13.1251802444458
    9. '>' → logprob: -14.0001802444458
    10. ')' → logprob: -14.2501802444458

Token 25: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14473594725131989
    2. ' if' → logprob: -2.6447360515594482
    3. ' ' → logprob: -3.7697360515594482
    4. '    ' → logprob: -4.519735813140869
    5. '```' → logprob: -5.019735813140869
    6. '<|end|>' → logprob: -5.019735813140869
    7. 'if' → logprob: -5.394735813140869
    8. '    
' → logprob: -5.519735813140869
    9. ' 
' → logprob: -5.519735813140869
    10. ''' → logprob: -7.144735813140869

Token 26: ' while' (ID: 2049)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.20595386624336243
    2. 'if' → logprob: -1.95595383644104
    3. '   ' → logprob: -3.83095383644104
    4. '    ' → logprob: -4.080954074859619
    5. ' ' → logprob: -6.330954074859619
    6. '```' → logprob: -6.330954074859619
    7. ' ```' → logprob: -6.830954074859619
    8. 'count' → logprob: -7.080954074859619
    9. ' count' → logprob: -8.580953598022461
    10. ' `' → logprob: -9.705953598022461

Token 27: ' True' (ID: 6432)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.11504974216222763
    2. 'n' → logprob: -2.2400498390197754
    3. 'count' → logprob: -6.490049839019775
    4. ' count' → logprob: -7.365049839019775
    5. '(n' → logprob: -10.615049362182617
    6. ' ' → logprob: -10.990049362182617
    7. ' (' → logprob: -11.740049362182617
    8. ' a' → logprob: -12.490049362182617
    9. 'a' → logprob: -12.490049362182617
    10. '(' → logprob: -12.740049362182617

Token 28: ':
' (ID: 734)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.18785524368286133
    2. ':' → logprob: -2.0628552436828613
    3. '<|end|>' → logprob: -4.437855243682861
    4. '   ' → logprob: -4.687855243682861
    5. '    ' → logprob: -4.687855243682861
    6. ' :' → logprob: -5.187855243682861
    7. ' ' → logprob: -5.562855243682861
    8. ':
' → logprob: -6.562855243682861
    9. '        ' → logprob: -6.937855243682861
    10. '           ' → logprob: -8.187854766845703

Token 29: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5489799976348877
    2. '    ' → logprob: -1.2989799976348877
    3. ' ' → logprob: -2.2989799976348877
    4. '        ' → logprob: -3.6739799976348877
    5. '        
' → logprob: -5.173979759216309
    6. '     
' → logprob: -5.173979759216309
    7. '   ' → logprob: -5.548979759216309
    8. '<|end|>' → logprob: -5.923979759216309
    9. ' n' → logprob: -7.298979759216309
    10. '         
' → logprob: -7.298979759216309

Token 30: ' if' (ID: 538)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.2507930994033813
    2. 'n' → logprob: -1.3757930994033813
    3. ' n' → logprob: -1.5007930994033813
    4. '        ' → logprob: -2.250792980194092
    5. '       ' → logprob: -3.500792980194092
    6. '    ' → logprob: -3.750792980194092
    7. ' if' → logprob: -3.750792980194092
    8. '<|end|>' → logprob: -4.250792980194092
    9. '```' → logprob: -5.000792980194092
    10. 'if' (adapté à ' if') → logprob: -5.250792980194092

Token 31: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.31326404213905334
    2. 'n' → logprob: -1.313264012336731
    3. '	n' → logprob: -14.438263893127441
    4. 'count' → logprob: -14.563263893127441
    5. '(n' → logprob: -14.938263893127441
    6. ')n' → logprob: -15.313263893127441
    7. ' count' → logprob: -15.813263893127441
    8. ' ' → logprob: -16.063264846801758
    9. '<|end|>' → logprob: -16.063264846801758
    10. '```' → logprob: -16.438264846801758

Token 32: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.02330324426293373
    2. '%' → logprob: -3.773303270339966
    3. ' ' → logprob: -9.898303031921387
    4. ' ' → logprob: -12.273303031921387
    5. ' ==' → logprob: -13.523303031921387
    6. '<|end|>' → logprob: -15.523303031921387
    7. '   ' → logprob: -15.648303031921387
    8. '  ' → logprob: -15.773303031921387
    9. '==' → logprob: -16.148303985595703
    10. ' %
' → logprob: -16.273303985595703

Token 33: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0005265804938971996
    2. '3' → logprob: -8.125526428222656
    3. ' ' → logprob: -9.000526428222656
    4. '6' → logprob: -9.875526428222656
    5. '26' → logprob: -11.000526428222656
    6. '10' → logprob: -11.500526428222656
    7. '5' → logprob: -11.625526428222656
    8. '4' → logprob: -12.125526428222656
    9. '7' → logprob: -13.250526428222656
    10. '202' → logprob: -13.625526428222656

Token 34: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -5.490809417096898e-05
    2. '3' → logprob: -10.375055313110352
    3. '6' → logprob: -11.250055313110352
    4. ' ' → logprob: -13.000055313110352
    5. '4' → logprob: -13.375055313110352
    6. '   ' → logprob: -13.625055313110352
    7. '10' → logprob: -14.000055313110352
    8. '

' → logprob: -14.500055313110352
    9. '7' → logprob: -14.750055313110352
    10. '5' → logprob: -14.750055313110352

Token 35: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.34893691539764404
    2. '==' → logprob: -1.223936915397644
    3. '0' → logprob: -8.098937034606934
    4. ' !=' → logprob: -9.098937034606934
    5. '!=' → logprob: -10.473937034606934
    6. '=' → logprob: -10.848937034606934
    7. ' ' → logprob: -11.473937034606934
    8. ')==' → logprob: -11.723937034606934
    9. ')' → logprob: -12.473937034606934
    10. ' =' → logprob: -12.723937034606934

Token 36: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.07889099419116974
    2. ' ' → logprob: -2.5788910388946533
    3. '1' → logprob: -14.328890800476074
    4. '  ' → logprob: -15.578890800476074
    5. '2' → logprob: -15.828890800476074
    6. '   ' → logprob: -16.45389175415039
    7. '==' → logprob: -17.07889175415039
    8. '    ' → logprob: -17.39139175415039
    9. ' ' → logprob: -17.76639175415039
    10. '```' → logprob: -18.01639175415039

Token 37: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0003818140830844641
    2. ' ' → logprob: -7.875381946563721
    3. '1' → logprob: -13.750381469726562
    4. '۰' → logprob: -16.000381469726562
    5. '  ' → logprob: -16.625381469726562
    6. ')' → logprob: -17.000381469726562
    7. '   ' → logprob: -17.000381469726562
    8. '2' → logprob: -17.062881469726562
    9. '```' → logprob: -17.375381469726562
    10. '০' → logprob: -17.625381469726562

Token 38: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0007105246186256409
    2. ' :' → logprob: -8.375710487365723
    3. ' and' → logprob: -8.625710487365723
    4. '):' → logprob: -8.875710487365723
    5. ':
' → logprob: -9.125710487365723
    6. '       ' → logprob: -10.875710487365723
    7. '<|end|>' → logprob: -11.000710487365723
    8. '           ' → logprob: -12.500710487365723
    9. ':**' → logprob: -13.250710487365723
    10. ',' → logprob: -13.250710487365723

Token 39: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.06346964091062546
    2. ' ' → logprob: -3.938469648361206
    3. '            ' → logprob: -4.438469409942627
    4. '<|end|>' → logprob: -4.688469409942627
    5. '       ' → logprob: -4.813469409942627
    6. '\n' → logprob: -5.313469409942627
    7. '        ' → logprob: -5.938469409942627
    8. '            
' → logprob: -6.938469409942627
    9. '               ' → logprob: -7.188469409942627
    10. '\' → logprob: -7.188469409942627

Token 40: ' count' (ID: 3605)
  Prédit: ' count'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' count' → logprob: -1.049543023109436
    2. '               ' → logprob: -1.799543023109436
    3. 'count' (adapté à ' count') → logprob: -1.799543023109436
    4. ' n' → logprob: -2.0495429039001465
    5. ' ' → logprob: -2.4245429039001465
    6. '           ' → logprob: -3.1745429039001465
    7. '            ' → logprob: -3.4245429039001465
    8. 'n' → logprob: -4.2995429039001465
    9. ' ' → logprob: -5.6745429039001465
    10. '<|end|>' → logprob: -5.6745429039001465

Token 41: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.003194589400663972
    2. '+=' → logprob: -5.753194808959961
    3. ' =' → logprob: -11.503194808959961
    4. ' +' → logprob: -12.878194808959961
    5. '+' → logprob: -13.128194808959961
    6. '=' → logprob: -13.503194808959961
    7. ' ' → logprob: -14.878194808959961
    8. ' -=' → logprob: -15.753194808959961
    9. ']+=' → logprob: -16.62819480895996
    10. '    ' → logprob: -16.87819480895996

Token 42: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.42870190739631653
    2. '1' → logprob: -1.0537018775939941
    3. '           ' → logprob: -14.928702354431152
    4. '2' → logprob: -15.053702354431152
    5. '        ' → logprob: -16.178701400756836
    6. '    ' → logprob: -16.303701400756836
    7. '       ' → logprob: -16.616201400756836
    8. '   ' → logprob: -16.928701400756836
    9. '```' → logprob: -16.928701400756836
    10. '            ' → logprob: -17.116201400756836

Token 43: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -2.7610454708337784e-05
    2. ' ' → logprob: -10.500027656555176
    3. '2' → logprob: -17.37502670288086
    4. '   ' → logprob: -18.87502670288086
    5. '       ' → logprob: -19.75002670288086
    6. '１' → logprob: -20.12502670288086
    7. '           ' → logprob: -20.87502670288086
    8. '```' → logprob: -20.87502670288086
    9. '0' → logprob: -20.93752670288086
    10. '  ' → logprob: -21.06252670288086

Token 44: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.6987520456314087
    2. '
' → logprob: -1.8237520456314087
    3. 'n' → logprob: -2.698751926422119
    4. '\n' → logprob: -2.698751926422119
    5. ' 
' → logprob: -2.698751926422119
    6. '            
' → logprob: -2.948751926422119
    7. '       ' → logprob: -3.323751926422119
    8. ' n' → logprob: -4.073751926422119
    9. '        
' → logprob: -4.823751926422119
    10. '               ' → logprob: -5.323751926422119

Token 45: '           ' (ID: 352)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.9141741991043091
    2. ' 
' → logprob: -2.0391740798950195
    3. 'n' → logprob: -2.1641740798950195
    4. '
' → logprob: -2.1641740798950195
    5. '           ' → logprob: -2.5391740798950195
    6. '               ' → logprob: -3.2891740798950195
    7. '       ' → logprob: -3.2891740798950195
    8. '            
' → logprob: -3.6641740798950195
    9. ' n' → logprob: -3.7891740798950195
    10. '  
' → logprob: -4.9141740798950195

Token 46: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' (adapté à ' n') → logprob: -0.20242469012737274
    2. ' n' → logprob: -1.7024246454238892
    3. '           ' → logprob: -7.4524245262146
    4. '               ' → logprob: -8.827425003051758
    5. '```' → logprob: -9.327425003051758
    6. ' ' → logprob: -9.827425003051758
    7. '       ' → logprob: -10.077425003051758
    8. '            ' → logprob: -10.327425003051758
    9. ' ' → logprob: -11.077425003051758
    10. '   ' → logprob: -11.702425003051758

Token 47: ' //' (ID: 602)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.2913084328174591
    2. '//=' → logprob: -1.5413084030151367
    3. ' =' → logprob: -3.2913084030151367
    4. '/=' → logprob: -7.291308403015137
    5. ' //' → logprob: -7.541308403015137
    6. ' /=' → logprob: -8.791308403015137
    7. '//' → logprob: -10.291308403015137
    8. ' ' → logprob: -12.291308403015137
    9. '/' → logprob: -13.166308403015137
    10. '＝' → logprob: -13.541308403015137

Token 48: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.0008290443220175803
    2. '2' → logprob: -7.125829219818115
    3. ' ' → logprob: -10.625828742980957
    4. '=}' → logprob: -16.125829696655273
    5. '=
' → logprob: -17.250829696655273
    6. '```' → logprob: -17.625829696655273
    7. 'div' → logprob: -18.000829696655273
    8. ' =' → logprob: -18.000829696655273
    9. '_' → logprob: -18.125829696655273
    10. '=

' → logprob: -18.375829696655273

Token 49: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.00017970333283301443
    2. ' ' → logprob: -8.625179290771484
    3. '   ' → logprob: -17.125179290771484
    4. '```' → logprob: -17.250179290771484
    5. '２' → logprob: -18.750179290771484
    6. '۲' → logprob: -19.125179290771484
    7. '  ' → logprob: -19.500179290771484
    8. ' ' → logprob: -20.187679290771484
    9. '
' → logprob: -20.375179290771484
    10. '`' → logprob: -20.687679290771484

Token 50: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -2.816093228830141e-06
    2. ' ' → logprob: -12.87500286102295
    3. '   ' → logprob: -16.875001907348633
    4. '```' → logprob: -17.625001907348633
    5. '２' → logprob: -18.500001907348633
    6. '۲' → logprob: -19.000001907348633
    7. '  ' → logprob: -19.312501907348633
    8. '>' → logprob: -20.312501907348633
    9. '२' → logprob: -20.562501907348633
    10. '২' → logprob: -20.687501907348633

Token 51: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.004611695650964975
    2. 'else' → logprob: -5.879611492156982
    3. ' else' → logprob: -6.379611492156982
    4. '<|end|>' → logprob: -9.62961196899414
    5. '```' → logprob: -10.87961196899414
    6. '   ' → logprob: -11.12961196899414
    7. '           ' → logprob: -13.50461196899414
    8. '      ' → logprob: -13.75461196899414
    9. '	else' → logprob: -13.75461196899414
    10. '<|end|>' → logprob: -14.12961196899414

Token 52: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.003049365943297744
    2. ' else' → logprob: -6.378049373626709
    3. 'else' → logprob: -6.628049373626709
    4. '<|end|>' → logprob: -11.62804889678955
    5. '```' → logprob: -12.25304889678955
    6. '   ' → logprob: -12.25304889678955
    7. '	else' → logprob: -13.87804889678955
    8. '      ' → logprob: -13.87804889678955
    9. '...' → logprob: -14.37804889678955
    10. '           ' → logprob: -14.75304889678955

Token 53: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.6203404664993286
    2. '       ' → logprob: -1.1203404664993286
    3. ' else' → logprob: -1.9953404664993286
    4. '   ' → logprob: -9.620340347290039
    5. '	else' → logprob: -10.995340347290039
    6. '```' → logprob: -11.245340347290039
    7. 'elif' → logprob: -13.745340347290039
    8. ' ' → logprob: -13.870340347290039
    9. '_else' → logprob: -13.870340347290039
    10. '           ' → logprob: -14.245340347290039

Token 54: ':
' (ID: 734)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.11332736909389496
    2. ':' → logprob: -2.2383272647857666
    3. '       ' → logprob: -8.738327026367188
    4. '          ' → logprob: -9.363327026367188
    5. ':
' → logprob: -9.613327026367188
    6. '               ' → logprob: -9.738327026367188
    7. '         ' → logprob: -10.238327026367188
    8. '            ' → logprob: -10.488327026367188
    9. '        ' → logprob: -10.988327026367188
    10. ' break' → logprob: -11.113327026367188

Token 55: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.00866030529141426
    2. 'break' → logprob: -4.883660316467285
    3. ' break' → logprob: -6.883660316467285
    4. '               ' → logprob: -11.383660316467285
    5. '	break' → logprob: -12.008660316467285
    6. '          ' → logprob: -12.133660316467285
    7. '		' → logprob: -13.508660316467285
    8. '```' → logprob: -13.508660316467285
    9. '            ' → logprob: -13.883660316467285
    10. '       ' → logprob: -14.133660316467285

Token 56: ' break' (ID: 2338)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'break' (adapté à ' break') → logprob: -0.555097222328186
    2. ' break' → logprob: -1.055097222328186
    3. '           ' → logprob: -2.5550971031188965
    4. '	break' → logprob: -9.680097579956055
    5. '       ' → logprob: -9.805097579956055
    6. '               ' → logprob: -11.430097579956055
    7. '```' → logprob: -12.180097579956055
    8. '_break' → logprob: -13.055097579956055
    9. '   ' → logprob: -13.180097579956055
    10. '-break' → logprob: -14.805097579956055

Token 57: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0020491473842412233
    2. '```' → logprob: -7.127048969268799
    3. '<|end|>' → logprob: -7.752048969268799
    4. '\n' → logprob: -7.877048969268799
    5. '
' → logprob: -8.127049446105957
    6. ' print' → logprob: -9.877049446105957
    7. ')' → logprob: -10.627049446105957
    8. '#print' → logprob: -11.627049446105957
    9. 'newline' → logprob: -11.627049446105957
    10. '#' → logprob: -11.752049446105957

Token 58: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -6.778209353797138e-05
    2. '```' → logprob: -10.375067710876465
    3. '<|end|>' → logprob: -10.750067710876465
    4. ' print' → logprob: -12.000067710876465
    5. '
' → logprob: -13.000067710876465
    6. '#print' → logprob: -13.500067710876465
    7. '\n' → logprob: -13.500067710876465
    8. ')' → logprob: -13.500067710876465
    9. '#' → logprob: -13.750067710876465
    10. '(print' → logprob: -14.875067710876465

Token 59: '(count' (ID: 25892)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3868960440158844
    2. '(count' → logprob: -1.136896014213562
    3. '('' → logprob: -11.261896133422852
    4. '()' → logprob: -11.886896133422852
    5. '(sum' → logprob: -13.136896133422852
    6. 'count' → logprob: -13.386896133422852
    7. '("' → logprob: -14.636896133422852
    8. '((' → logprob: -15.136896133422852
    9. '(
' → logprob: -15.511896133422852
    10. '("("' → logprob: -15.511896133422852

Token 60: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.320199877838604e-07
    2. '))' → logprob: -15.625
    3. ' )' → logprob: -16.625
    4. ')`' → logprob: -17.25
    5. ')
' → logprob: -17.5
    6. '`)' → logprob: -18.125
    7. '')' → logprob: -18.5
    8. '）' → logprob: -19.5
    9. ')}' → logprob: -20.0
    10. '#' → logprob: -20.125


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 58
Tokens correctement prédits (1ère position, stricte): 24
Tokens correctement prédits (1ère position, avec adaptation): 27
Tokens correctement prédits (top 10): 49
Précision stricte (1ère position): 41.38%
Précision adaptée (1ère position): 46.55%
Précision (top 10): 84.48%
================================================================================
