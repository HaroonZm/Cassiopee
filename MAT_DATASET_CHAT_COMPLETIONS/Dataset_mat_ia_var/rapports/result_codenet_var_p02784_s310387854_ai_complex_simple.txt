================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:28:02
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from functools import reduce
from operator import add
H, N = map(int, input().split())
A = list(map(int, input().split()))
outcome = ['No', 'Yes'][int(H <= reduce(add, A, 0))]
print(outcome)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' functools' (ID: 142636)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' reduce' (ID: 10389)
  Prédit: 'wrap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'wrap' → logprob: -0.25372281670570374
    2. 'partial' → logprob: -1.7537227869033813
    3. 'reduce' → logprob: -3.503722906112671
    4. ' wraps' → logprob: -4.003722667694092
    5. 'l' → logprob: -6.753722667694092
    6. ' partial' → logprob: -7.378722667694092
    7. 'cache' → logprob: -8.37872314453125
    8. '```' → logprob: -8.62872314453125
    9. 'cached' → logprob: -9.00372314453125
    10. 'cmp' → logprob: -9.25372314453125

Token 4: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.019195254892110825
    2. '(lambda' → logprob: -4.394195079803467
    3. '.' → logprob: -5.144195079803467
    4. ',' → logprob: -8.019195556640625
    5. ' (' → logprob: -8.519195556640625
    6. '```' → logprob: -9.519195556640625
    7. '(
' → logprob: -10.144195556640625
    8. '\(' → logprob: -10.269195556640625
    9. '\' → logprob: -10.394195556640625
    10. 'lambda' → logprob: -11.019195556640625

Token 5: 'from' (ID: 2845)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.06892794370651245
    2. 'def' → logprob: -3.5689280033111572
    3. '\' → logprob: -3.6939280033111572
    4. '```' → logprob: -5.443927764892578
    5. ' ' → logprob: -6.193927764892578
    6. '(
' → logprob: -6.943927764892578
    7. '\(' → logprob: -7.193927764892578
    8. '(lambda' → logprob: -7.318927764892578
    9. 'a' → logprob: -7.568927764892578
    10. '[' → logprob: -7.693927764892578

Token 6: ' operator' (ID: 11019)
  Prédit: ' math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' math' → logprob: -0.4525923430919647
    2. ' operator' → logprob: -1.702592372894287
    3. ' itertools' → logprob: -2.202592372894287
    4. ' collections' → logprob: -2.702592372894287
    5. ' os' → logprob: -5.952592372894287
    6. 'operator' → logprob: -7.202592372894287
    7. 'math' → logprob: -7.827592372894287
    8. ' sys' → logprob: -8.702591896057129
    9. 'collections' → logprob: -9.202591896057129
    10. ' ' → logprob: -9.202591896057129

Token 7: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.02191914990544319
    2. 'import' → logprob: -3.8969192504882812
    3. ' ' → logprob: -7.146919250488281
    4. '.' → logprob: -7.521919250488281
    5. ' .' → logprob: -11.021919250488281
    6. '.import' → logprob: -11.271919250488281
    7. '	import' → logprob: -11.771919250488281
    8. '<|end|>' → logprob: -12.396919250488281
    9. '_import' → logprob: -13.271919250488281
    10. '-import' → logprob: -14.021919250488281

Token 8: ' add' (ID: 1147)
  Prédit: ' add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' add' → logprob: -0.15542560815811157
    2. ' import' → logprob: -2.280425548553467
    3. 'add' → logprob: -3.905425548553467
    4. ' mul' → logprob: -4.405425548553467
    5. ' ' → logprob: -5.530425548553467
    6. 'import' → logprob: -5.655425548553467
    7. 'mul' → logprob: -7.030425548553467
    8. ' item' → logprob: -7.405425548553467
    9. ' icon' → logprob: -9.155426025390625
    10. 'item' → logprob: -9.530426025390625

Token 9: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.01737925596535206
    2. '(
' → logprob: -4.767379283905029
    3. '\' → logprob: -5.392379283905029
    4. '\n' → logprob: -6.642379283905029
    5. ',' → logprob: -6.767379283905029
    6. '\(' → logprob: -8.017378807067871
    7. '.' → logprob: -8.267378807067871
    8. '`' → logprob: -8.642378807067871
    9. '#' → logprob: -8.767378807067871
    10. '```' → logprob: -9.017378807067871

Token 10: 'H' (ID: 39)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -1.2341631650924683
    2. '(
' → logprob: -1.3591631650924683
    3. '
' → logprob: -1.8591631650924683
    4. '\n' → logprob: -2.359163284301758
    5. '\' → logprob: -2.859163284301758
    6. 'def' → logprob: -3.484163284301758
    7. '

' → logprob: -3.609163284301758
    8. '(

' → logprob: -4.109163284301758
    9. ',' → logprob: -4.484163284301758
    10. 'reduce' → logprob: -4.859163284301758

Token 11: ',' (ID: 11)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.4818589687347412
    2. '=' → logprob: -1.2318589687347412
    3. ' =' → logprob: -3.481858968734741
    4. ',' → logprob: -3.481858968734741
    5. '_' → logprob: -5.10685920715332
    6. 'ello' → logprob: -5.23185920715332
    7. 'i' → logprob: -5.60685920715332
    8. '(' → logprob: -5.73185920715332
    9. '.' → logprob: -5.98185920715332
    10. 'H' → logprob: -6.23185920715332

Token 12: ' N' (ID: 478)
  Prédit: 'W'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'W' → logprob: -0.4729475975036621
    2. ' W' → logprob: -1.097947597503662
    3. 'T' → logprob: -3.472947597503662
    4. ' T' → logprob: -5.472947597503662
    5. 'w' → logprob: -5.722947597503662
    6. 'L' → logprob: -6.847947597503662
    7. ' =' → logprob: -7.597947597503662
    8. ' w' → logprob: -7.722947597503662
    9. '*' → logprob: -7.847947597503662
    10. 'D' → logprob: -7.972947597503662

Token 13: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.4741034209728241
    2. ' =' → logprob: -0.9741034507751465
    3. ',' → logprob: -10.724102973937988
    4. ' ' → logprob: -13.349102973937988
    5. ')' → logprob: -14.224102973937988
    6. '=

' → logprob: -14.599102973937988
    7. ' =
' → logprob: -14.724102973937988
    8. '=int' → logprob: -15.099102973937988
    9. '=
' → logprob: -15.724102973937988
    10. '[' → logprob: -15.974102973937988

Token 14: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.2841123640537262
    2. 'map' → logprob: -1.4091123342514038
    3. ' ' → logprob: -6.784112453460693
    4. '5' → logprob: -6.909112453460693
    5. '10' → logprob: -8.659111976623535
    6. '0' → logprob: -8.784111976623535
    7. '3' → logprob: -9.534111976623535
    8. 'list' → logprob: -9.659111976623535
    9. 'input' → logprob: -9.784111976623535
    10. '(map' → logprob: -9.909111976623535

Token 15: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.05271196737885475
    2. '(' → logprob: -3.0527119636535645
    3. '(str' → logprob: -6.0527119636535645
    4. '(lambda' → logprob: -6.5527119636535645
    5. 'int' → logprob: -8.427712440490723
    6. '(input' → logprob: -9.927712440490723
    7. '[int' → logprob: -11.052712440490723
    8. '<int' → logprob: -11.302712440490723
    9. '(eval' → logprob: -11.802712440490723
    10. '(range' → logprob: -12.052712440490723

Token 16: ',' (ID: 11)
  Prédit: ',input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',input' → logprob: -0.24288436770439148
    2. ',' → logprob: -1.6178843975067139
    3. 'input' → logprob: -4.117884159088135
    4. '(input' → logprob: -6.992884159088135
    5. ' input' → logprob: -9.867884635925293
    6. ')' → logprob: -10.742884635925293
    7. ',int' → logprob: -11.117884635925293
    8. ' ,' → logprob: -11.117884635925293
    9. '(' → logprob: -11.367884635925293
    10. '```' → logprob: -13.367884635925293

Token 17: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.3868849575519562
    2. ' input' → logprob: -1.1368849277496338
    3. '(input' → logprob: -12.261884689331055
    4. ' ' → logprob: -12.261884689331055
    5. ',input' → logprob: -12.761884689331055
    6. '	input' → logprob: -14.511884689331055
    7. ')' → logprob: -14.886884689331055
    8. '=input' → logprob: -15.761884689331055
    9. 'list' → logprob: -15.886884689331055
    10. '```' → logprob: -16.261884689331055

Token 18: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.11241617053747177
    2. '()' → logprob: -2.7374162673950195
    3. '())' → logprob: -3.3624162673950195
    4. '(' → logprob: -5.4874162673950195
    5. ')' → logprob: -6.2374162673950195
    6. '('' → logprob: -8.23741626739502
    7. '());' → logprob: -8.73741626739502
    8. '()`' → logprob: -9.48741626739502
    9. '`()' → logprob: -9.61241626739502
    10. '(),' → logprob: -10.48741626739502

Token 19: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0001129602751461789
    2. 'strip' → logprob: -9.125112533569336
    3. 'rstrip' → logprob: -12.625112533569336
    4. '(split' → logprob: -15.000112533569336
    5. ' split' → logprob: -15.250112533569336
    6. 'spl' → logprob: -16.000112533569336
    7. 'read' → logprob: -16.875112533569336
    8. ')' → logprob: -17.875112533569336
    9. '_split' → logprob: -18.625112533569336
    10. 's' → logprob: -18.625112533569336

Token 20: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.20380046963691711
    2. '))' → logprob: -1.7038004398345947
    3. '())' → logprob: -6.328800678253174
    4. '),' → logprob: -8.203800201416016
    5. '`)' → logprob: -9.453800201416016
    6. '()))' → logprob: -9.703800201416016
    7. '()' → logprob: -10.203800201416016
    8. '')' → logprob: -10.578800201416016
    9. ')))' → logprob: -10.953800201416016
    10. '('' → logprob: -10.953800201416016

Token 21: 'A' (ID: 32)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.8523461222648621
    2. 'arr' → logprob: -1.9773461818695068
    3. 'A' → logprob: -2.352346181869507
    4. 'numbers' → logprob: -2.602346181869507
    5. 'data' → logprob: -2.977346181869507
    6. ' A' → logprob: -3.352346181869507
    7. 'nums' → logprob: -3.602346181869507
    8. ' a' → logprob: -4.102345943450928
    9. 'lst' → logprob: -4.102345943450928
    10. 's' → logprob: -4.352345943450928

Token 22: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.09461958706378937
    2. '=' → logprob: -2.4696195125579834
    3. ' ' → logprob: -5.8446197509765625
    4. 's' → logprob: -6.0946197509765625
    5. ',' → logprob: -8.594619750976562
    6. '_' → logprob: -9.094619750976562
    7. '[' → logprob: -9.469619750976562
    8. '_list' → logprob: -10.469619750976562
    9. '.' → logprob: -10.719619750976562
    10. '[]' → logprob: -10.969619750976562

Token 23: ' list' (ID: 1562)
  Prédit: 'list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'list' → logprob: -0.12842898070812225
    2. ' list' → logprob: -2.6284289360046387
    3. '[' → logprob: -4.003428936004639
    4. '[list' → logprob: -4.003428936004639
    5. '[int' → logprob: -5.503428936004639
    6. '[]' → logprob: -5.753428936004639
    7. ' [' → logprob: -5.753428936004639
    8. '[input' → logprob: -7.253428936004639
    9. 'map' → logprob: -8.003429412841797
    10. ' []' → logprob: -9.128429412841797

Token 24: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.07499880343675613
    2. '(' → logprob: -2.6999988555908203
    3. '(int' → logprob: -6.07499885559082
    4. '(input' → logprob: -6.57499885559082
    5. '(range' → logprob: -6.82499885559082
    6. '(filter' → logprob: -9.07499885559082
    7. '(eval' → logprob: -10.07499885559082
    8. '()' → logprob: -11.44999885559082
    9. '(re' → logprob: -11.69999885559082
    10. 'map' → logprob: -11.82499885559082

Token 25: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0007182692061178386
    2. '(' → logprob: -7.375718116760254
    3. 'int' → logprob: -9.500718116760254
    4. '<int' → logprob: -12.000718116760254
    5. '=int' → logprob: -12.750718116760254
    6. ',int' → logprob: -13.000718116760254
    7. '[int' → logprob: -13.125718116760254
    8. '```' → logprob: -13.625718116760254
    9. '(lambda' → logprob: -14.500718116760254
    10. ')' → logprob: -15.000718116760254

Token 26: ',' (ID: 11)
  Prédit: ',input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',input' → logprob: -0.24028176069259644
    2. ',' → logprob: -1.8652818202972412
    3. '(input' → logprob: -2.865281820297241
    4. '(' → logprob: -6.740281581878662
    5. ' ,' → logprob: -7.865281581878662
    6. 'input' → logprob: -8.74028205871582
    7. '(),' → logprob: -10.86528205871582
    8. ',(' → logprob: -11.99028205871582
    9. ' (' → logprob: -11.99028205871582
    10. '```' → logprob: -12.11528205871582

Token 27: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.04859974980354309
    2. ' input' → logprob: -3.0485997200012207
    3. '(input' → logprob: -11.798600196838379
    4. ',input' → logprob: -12.548600196838379
    5. '=input' → logprob: -14.798600196838379
    6. ' ' → logprob: -15.048600196838379
    7. '	input' → logprob: -15.548600196838379
    8. '<input' → logprob: -16.173599243164062
    9. ')' → logprob: -16.798599243164062
    10. '_input' → logprob: -17.173599243164062

Token 28: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -4.227250610711053e-05
    2. '()' → logprob: -10.375041961669922
    3. '(' → logprob: -12.750041961669922
    4. ' ().' → logprob: -13.000041961669922
    5. '()))' → logprob: -13.250041961669922
    6. ')' → logprob: -13.625041961669922
    7. '())' → logprob: -13.875041961669922
    8. '.' → logprob: -14.375041961669922
    9. '))' → logprob: -15.500041961669922
    10. '(),' → logprob: -15.875041961669922

Token 29: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -5.080963092041202e-06
    2. 'strip' → logprob: -12.250004768371582
    3. ' split' → logprob: -16.0000057220459
    4. '(split' → logprob: -16.5000057220459
    5. 'spl' → logprob: -17.0000057220459
    6. 'rstrip' → logprob: -17.6250057220459
    7. ')' → logprob: -18.3750057220459
    8. 'plit' → logprob: -19.8750057220459
    9. 'read' → logprob: -20.3750057220459
    10. '.split' → logprob: -20.6250057220459

Token 30: '()))
' (ID: 24521)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7075892686843872
    2. '))' → logprob: -0.7075892686843872
    3. '()))' → logprob: -4.707589149475098
    4. '())' → logprob: -5.582589149475098
    5. '(' → logprob: -6.707589149475098
    6. ')))' → logprob: -8.957589149475098
    7. '()' → logprob: -8.957589149475098
    8. '),' → logprob: -10.582589149475098
    9. ')>' → logprob: -11.332589149475098
    10. ')(' → logprob: -11.832589149475098

Token 31: 'out' (ID: 468)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.07011338323354721
    2. 'print' → logprob: -3.94511342048645
    3. 'sum' → logprob: -4.445113182067871
    4. 'if' → logprob: -4.570113182067871
    5. 'result' → logprob: -4.820113182067871
    6. 'a' → logprob: -5.320113182067871
    7. '+' → logprob: -6.320113182067871
    8. 'for' → logprob: -6.820113182067871
    9. 'reduce' → logprob: -6.945113182067871
    10. '*' → logprob: -6.945113182067871

Token 32: 'come' (ID: 2512)
  Prédit: 'put'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'put' → logprob: -0.07378832250833511
    2. '=' → logprob: -3.0737884044647217
    3. '_' → logprob: -4.698788166046143
    4. 'puts' → logprob: -5.198788166046143
    5. '(' → logprob: -5.323788166046143
    6. 'p' → logprob: -6.198788166046143
    7. ' =' → logprob: -7.073788166046143
    8. '_put' → logprob: -7.198788166046143
    9. '\xed\x92' → logprob: -8.0737886428833
    10. '[' → logprob: -8.3237886428833

Token 33: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.29402491450309753
    2. ' =' → logprob: -1.54402494430542
    3. '_' → logprob: -3.29402494430542
    4. '(' → logprob: -5.79402494430542
    5. 's' → logprob: -7.04402494430542
    6. ':' → logprob: -10.169024467468262
    7. '_=' → logprob: -10.294024467468262
    8. ')' → logprob: -10.669024467468262
    9. '[:]' → logprob: -11.169024467468262
    10. ',' → logprob: -11.294024467468262

Token 34: ' ['' (ID: 5140)
  Prédit: ' reduce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' reduce' → logprob: -0.22978070378303528
    2. 'reduce' → logprob: -1.854780673980713
    3. ' sum' → logprob: -4.229780673980713
    4. ' min' → logprob: -4.354780673980713
    5. ' max' → logprob: -4.979780673980713
    6. ' H' → logprob: -5.729780673980713
    7. '"' → logprob: -5.854780673980713
    8. 'sum' → logprob: -5.979780673980713
    9. ''' → logprob: -6.729780673980713
    10. ' '' → logprob: -6.854780673980713

Token 35: 'No' (ID: 3160)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -2.037848472595215
    2. 'NO' → logprob: -2.537848472595215
    3. '-' → logprob: -2.662848472595215
    4. 'No' → logprob: -2.662848472595215
    5. 'H' → logprob: -2.912848472595215
    6. ''.' → logprob: -2.912848472595215
    7. '+' → logprob: -3.162848472595215
    8. '1' → logprob: -3.162848472595215
    9. 'YES' → logprob: -3.287848472595215
    10. 'W' → logprob: -3.412848472595215

Token 36: '',' (ID: 787)
  Prédit: '']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '']' → logprob: -0.29930248856544495
    2. ''' → logprob: -1.6743024587631226
    3. ' ']' → logprob: -2.674302577972412
    4. ' '' → logprob: -7.299302577972412
    5. '',' → logprob: -7.299302577972412
    6. '\n' → logprob: -7.424302577972412
    7. ' if' → logprob: -9.549302101135254
    8. ' ',' → logprob: -9.674302101135254
    9. '','' → logprob: -10.049302101135254
    10. 'if' → logprob: -10.549302101135254

Token 37: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -7.32654589228332e-05
    2. ' '' → logprob: -10.000073432922363
    3. '"' → logprob: -11.250073432922363
    4. ''\' → logprob: -12.375073432922363
    5. ' ' → logprob: -12.750073432922363
    6. '''' → logprob: -13.375073432922363
    7. '
' → logprob: -14.000073432922363
    8. '

' → logprob: -14.000073432922363
    9. ' ' → logprob: -14.500073432922363
    10. '',' → logprob: -14.750073432922363

Token 38: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.03226273134350777
    2. ''' → logprob: -3.5322628021240234
    3. ' Yes' → logprob: -6.157262802124023
    4. ' ' → logprob: -9.657262802124023
    5. ' '' → logprob: -9.657262802124023
    6. '']' → logprob: -9.782262802124023
    7. 'No' → logprob: -9.907262802124023
    8. '\n' → logprob: -10.157262802124023
    9. ''\' → logprob: -10.407262802124023
    10. '''' → logprob: -11.157262802124023

Token 39: ''][' (ID: 22110)
  Prédit: '']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '']' → logprob: -0.00019245444855187088
    2. ''' → logprob: -8.875192642211914
    3. ']' → logprob: -10.750192642211914
    4. ''][' → logprob: -10.750192642211914
    5. '"]' → logprob: -12.875192642211914
    6. '']
' → logprob: -12.875192642211914
    7. ' ']' → logprob: -13.625192642211914
    8. '']
' → logprob: -13.750192642211914
    9. ''[' → logprob: -14.000192642211914
    10. '\n' → logprob: -14.625192642211914

Token 40: 'int' (ID: 491)
  Prédit: 'reduce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'reduce' → logprob: -0.14599023759365082
    2. 'sum' → logprob: -2.3959901332855225
    3. ' reduce' → logprob: -3.3959901332855225
    4. ' sum' → logprob: -5.020990371704102
    5. 'H' → logprob: -5.895990371704102
    6. 're' → logprob: -7.520990371704102
    7. '(re' → logprob: -8.270990371704102
    8. ' H' → logprob: -8.520990371704102
    9. 'min' → logprob: -8.770990371704102
    10. '(sum' → logprob: -8.895990371704102

Token 41: '(H' (ID: 20904)
  Prédit: '(sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(sum' → logprob: -0.23190835118293762
    2. '(re' → logprob: -1.6069083213806152
    3. '(' → logprob: -5.231908321380615
    4. 'sum' → logprob: -7.731908321380615
    5. '((' → logprob: -8.106908798217773
    6. 'reduce' → logprob: -8.606908798217773
    7. '(H' → logprob: -9.606908798217773
    8. 'H' → logprob: -10.231908798217773
    9. '(s' → logprob: -11.356908798217773
    10. '('' → logprob: -11.856908798217773

Token 42: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.4746344983577728
    2. '<=' → logprob: -0.9746345281600952
    3. '>=' → logprob: -9.099634170532227
    4. '>' → logprob: -9.099634170532227
    5. ' >=' → logprob: -9.224634170532227
    6. ' ' → logprob: -9.974634170532227
    7. ')' → logprob: -10.099634170532227
    8. '==' → logprob: -10.099634170532227
    9. '<' → logprob: -10.849634170532227
    10. ' >' → logprob: -10.974634170532227

Token 43: ' reduce' (ID: 10389)
  Prédit: 'reduce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'reduce' → logprob: -0.004555323161184788
    2. 'sum' → logprob: -5.8795552253723145
    3. ' reduce' → logprob: -6.3795552253723145
    4. 'redu' → logprob: -10.504555702209473
    5. 're' → logprob: -11.254555702209473
    6. ' sum' → logprob: -11.879555702209473
    7. '.reduce' → logprob: -13.504555702209473
    8. '   ' → logprob: -13.879555702209473
    9. '(re' → logprob: -14.379555702209473
    10. ' ' → logprob: -14.629555702209473

Token 44: '(add' (ID: 40159)
  Prédit: '(add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(add' → logprob: -0.01454246323555708
    2. '(' → logprob: -4.264542579650879
    3. '(lambda' → logprob: -8.139542579650879
    4. '(operator' → logprob: -10.139542579650879
    5. 'add' → logprob: -10.514542579650879
    6. ' (' → logprob: -11.764542579650879
    7. '(
' → logprob: -12.514542579650879
    8. ' add' → logprob: -12.764542579650879
    9. '((' → logprob: -13.514542579650879
    10. ')' → logprob: -13.639542579650879

Token 45: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.1488872468471527
    2. '(A' → logprob: -2.6488871574401855
    3. ',A' → logprob: -2.7738871574401855
    4. '(' → logprob: -6.0238871574401855
    5. ' ,' → logprob: -6.1488871574401855
    6. ',(' → logprob: -8.398887634277344
    7. 'A' → logprob: -8.648887634277344
    8. '(),' → logprob: -9.648887634277344
    9. ',sum' → logprob: -10.148887634277344
    10. ' (' → logprob: -10.648887634277344

Token 46: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.019531873986124992
    2. '(A' → logprob: -4.644531726837158
    3. ' A' → logprob: -4.644531726837158
    4. '(' → logprob: -10.144532203674316
    5. ' ' → logprob: -10.769532203674316
    6. ',A' → logprob: -10.894532203674316
    7. ')' → logprob: -11.644532203674316
    8. '	A' → logprob: -12.019532203674316
    9. 'sorted' → logprob: -12.394532203674316
    10. 'a' → logprob: -12.769532203674316

Token 47: ',' (ID: 11)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.002142408862709999
    2. '))]
' → logprob: -6.752142429351807
    3. ')' → logprob: -8.127141952514648
    4. ' ))' → logprob: -8.252141952514648
    5. ')]' → logprob: -8.627141952514648
    6. ')))' → logprob: -8.627141952514648
    7. ')])' → logprob: -11.377141952514648
    8. '()))' → logprob: -11.377141952514648
    9. ' ' → logprob: -12.127141952514648
    10. ',' → logprob: -12.377141952514648

Token 48: ' ' (ID: 220)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.2472270131111145
    2. ' H' → logprob: -1.7472269535064697
    3. '0' → logprob: -3.4972269535064697
    4. ' ' → logprob: -4.372227191925049
    5. ')' → logprob: -7.497227191925049
    6. ' sum' → logprob: -7.747227191925049
    7. 'sum' → logprob: -7.872227191925049
    8. ' -' → logprob: -8.62222671508789
    9. ' )' → logprob: -9.99722671508789
    10. '-H' → logprob: -10.37222671508789

Token 49: '0' (ID: 15)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.18263274431228638
    2. '0' → logprob: -1.8076326847076416
    3. ' ' → logprob: -6.682632923126221
    4. '-H' → logprob: -6.932632923126221
    5. ' H' → logprob: -8.057632446289062
    6. ')' → logprob: -8.807632446289062
    7. '-' → logprob: -9.182632446289062
    8. ' -' → logprob: -10.932632446289062
    9. '))' → logprob: -10.932632446289062
    10. '1' → logprob: -11.432632446289062

Token 50: '))]
' (ID: 53695)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.003942213952541351
    2. ')]' → logprob: -6.003942012786865
    3. ')' → logprob: -6.628942012786865
    4. ')))' → logprob: -10.003942489624023
    5. ')])' → logprob: -10.128942489624023
    6. '))]
' → logprob: -10.253942489624023
    7. ' ))' → logprob: -11.503942489624023
    8. '])]' → logprob: -12.628942489624023
    9. ')>' → logprob: -12.753942489624023
    10. '),' → logprob: -13.628942489624023

Token 51: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -5.438573680294212e-06
    2. ')' → logprob: -12.875005722045898
    3. ' print' → logprob: -13.500005722045898
    4. 'prin' → logprob: -14.875005722045898
    5. '(print' → logprob: -15.500005722045898
    6. '#print' → logprob: -15.500005722045898
    7. 'pr' → logprob: -15.750005722045898
    8. '```' → logprob: -15.750005722045898
    9. ']' → logprob: -16.1250057220459
    10. 'output' → logprob: -16.7500057220459

Token 52: '(out' (ID: 20090)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.016734231263399124
    2. '('' → logprob: -4.3917341232299805
    3. '(out' → logprob: -5.7667341232299805
    4. '("("' → logprob: -6.8917341232299805
    5. '()' → logprob: -10.51673412322998
    6. '((' → logprob: -11.76673412322998
    7. '(

' → logprob: -12.01673412322998
    8. '(output' → logprob: -12.14173412322998
    9. '(end' → logprob: -12.76673412322998
    10. '(`' → logprob: -12.89173412322998

Token 53: 'come' (ID: 2512)
  Prédit: 'ome'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ome' → logprob: -0.577313244342804
    2. 'come' → logprob: -0.827313244342804
    3. 'me' → logprob: -7.077313423156738
    4. 'ame' → logprob: -8.202313423156738
    5. '```' → logprob: -9.202313423156738
    6. 'com' → logprob: -10.327313423156738
    7. 'e' → logprob: -10.452313423156738
    8. ')' → logprob: -10.702313423156738
    9. 'came' → logprob: -11.827313423156738
    10. '[' → logprob: -11.827313423156738

Token 54: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.762356209335849e-05
    2. '))' → logprob: -10.25003719329834
    3. '])' → logprob: -13.62503719329834
    4. ')]' → logprob: -15.50003719329834
    5. ')`' → logprob: -15.50003719329834
    6. ' )' → logprob: -16.000038146972656
    7. '`)' → logprob: -16.375038146972656
    8. '）' → logprob: -16.500038146972656
    9. ')])' → logprob: -16.625038146972656
    10. '')' → logprob: -16.625038146972656


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 52
Tokens correctement prédits (1ère position, stricte): 17
Tokens correctement prédits (1ère position, avec adaptation): 17
Tokens correctement prédits (top 10): 40
Précision stricte (1ère position): 32.69%
Précision adaptée (1ère position): 32.69%
Précision (top 10): 76.92%
================================================================================
