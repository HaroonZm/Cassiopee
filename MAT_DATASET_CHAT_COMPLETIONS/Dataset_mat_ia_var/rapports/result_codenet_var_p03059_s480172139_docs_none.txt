================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:01:49
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
a,b,t=map(int,input().split())
print(t//a*b)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'a' (ID: 64)
  → Token d'amorce (pas de prédiction)

Token 1: ',b' (ID: 17568)
  → Token d'amorce (pas de prédiction)

Token 2: ',t' (ID: 26927)
  → Token d'amorce (pas de prédiction)

Token 3: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.019641879945993423
    2. ' =' → logprob: -4.019641876220703
    3. ',' → logprob: -6.769641876220703
    4. '+' → logprob: -8.894641876220703
    5. ';' → logprob: -9.269641876220703
    6. '.' → logprob: -10.144641876220703
    7. ')' → logprob: -10.769641876220703
    8. ':' → logprob: -11.894641876220703
    9. '_' → logprob: -11.894641876220703
    10. '(' → logprob: -12.519641876220703

Token 4: 'map' (ID: 3726)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.06367726624011993
    2. ' ' → logprob: -2.9386773109436035
    3. '1' → logprob: -5.1886773109436035
    4. 'a' → logprob: -6.1886773109436035
    5. ' a' → logprob: -8.438676834106445
    6. 'map' → logprob: -8.563676834106445
    7. '(' → logprob: -8.813676834106445
    8. '[]' → logprob: -8.938676834106445
    9. 'input' → logprob: -9.688676834106445
    10. '```' → logprob: -10.063676834106445

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.26763415336608887
    2. '(lambda' → logprob: -1.5176341533660889
    3. '<|end|>' → logprob: -5.017634391784668
    4. '```' → logprob: -5.392634391784668
    5. '(int' → logprob: -6.642634391784668
    6. '(user' → logprob: -7.767634391784668
    7. '(str' → logprob: -7.892634391784668
    8. '(input' → logprob: -8.267634391784668
    9. '(eval' → logprob: -8.767634391784668
    10. ')' → logprob: -8.767634391784668

Token 6: ',input' (ID: 123014)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.2974998950958252
    2. '(input' → logprob: -1.4224998950958252
    3. '(' → logprob: -4.922499656677246
    4. '<|end|>' → logprob: -6.047499656677246
    5. ')(' → logprob: -7.047499656677246
    6. '(raw' → logprob: -7.422499656677246
    7. '(token' → logprob: -7.547499656677246
    8. '(user' → logprob: -7.922499656677246
    9. '`)' → logprob: -7.922499656677246
    10. '(range' → logprob: -8.047499656677246

Token 7: '().' (ID: 1454)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.2421489655971527
    2. '())' → logprob: -2.1171488761901855
    3. '(' → logprob: -3.2421488761901855
    4. '()' → logprob: -3.6171488761901855
    5. '<|end|>' → logprob: -5.1171488761901855
    6. '('' → logprob: -5.9921488761901855
    7. '```' → logprob: -5.9921488761901855
    8. '(""))' → logprob: -6.6171488761901855
    9. '(token' → logprob: -6.6171488761901855
    10. '(()' → logprob: -6.7421488761901855

Token 8: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00012689977302215993
    2. 'strip' → logprob: -9.625126838684082
    3. ')' → logprob: -10.125126838684082
    4. ' split' → logprob: -11.500126838684082
    5. '(split' → logprob: -11.625126838684082
    6. 'rstrip' → logprob: -14.000126838684082
    7. 's' → logprob: -15.625126838684082
    8. 'spl' → logprob: -16.1251277923584
    9. 'replace' → logprob: -16.6251277923584
    10. 'read' → logprob: -16.6251277923584

Token 9: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.027758227661252022
    2. '())' → logprob: -3.6527581214904785
    3. '))' → logprob: -7.5277581214904785
    4. '`)' → logprob: -7.6527581214904785
    5. '()' → logprob: -7.9027581214904785
    6. '(' → logprob: -11.027758598327637
    7. ' )' → logprob: -11.527758598327637
    8. '')' → logprob: -11.777758598327637
    9. ')`' → logprob: -11.777758598327637
    10. '()))' → logprob: -12.152758598327637

Token 10: 'print' (ID: 1598)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.7839447259902954
    2. 'c' → logprob: -1.0339447259902954
    3. '+' → logprob: -3.283944606781006
    4. '\n' → logprob: -3.783944606781006
    5. 'x' → logprob: -4.033944606781006
    6. 'i' → logprob: -4.033944606781006
    7. '#' → logprob: -4.033944606781006
    8. '
' → logprob: -4.283944606781006
    9. 's' → logprob: -4.283944606781006
    10. '*' → logprob: -4.658944606781006

Token 11: '(t' (ID: 2025)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0002278542669955641
    2. '("("' → logprob: -9.125227928161621
    3. '('' → logprob: -9.375227928161621
    4. '((' → logprob: -10.625227928161621
    5. '(`' → logprob: -13.125227928161621
    6. '()' → logprob: -13.125227928161621
    7. '(a' → logprob: -13.500227928161621
    8. '(
' → logprob: -14.500227928161621
    9. '(

' → logprob: -14.625227928161621
    10. '(()' → logprob: -14.875227928161621

Token 12: '//' (ID: 393)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -2.975612187583465e-05
    2. '))' → logprob: -11.625029563903809
    3. '*' → logprob: -12.000029563903809
    4. ' )' → logprob: -12.250029563903809
    5. '`)' → logprob: -13.000029563903809
    6. '+' → logprob: -13.250029563903809
    7. '**' → logprob: -14.000029563903809
    8. ')`' → logprob: -14.250029563903809
    9. ',)' → logprob: -14.375029563903809
    10. ')**' → logprob: -14.500029563903809

Token 13: 'a' (ID: 64)
  Prédit: 'a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.2522451877593994
    2. 'b' → logprob: -1.5022451877593994
    3. '2' → logprob: -8.37724494934082
    4. '60' → logprob: -10.50224494934082
    5. '3' → logprob: -11.37724494934082
    6. '(a' → logprob: -11.37724494934082
    7. '(b' → logprob: -11.50224494934082
    8. '100' → logprob: -12.12724494934082
    9. '6' → logprob: -12.50224494934082
    10. 'c' → logprob: -12.62724494934082

Token 14: '*b' (ID: 72162)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0005582740413956344
    2. '*' → logprob: -8.375557899475098
    3. '//' → logprob: -8.375557899475098
    4. '*)' → logprob: -10.125557899475098
    5. '*a' → logprob: -11.125557899475098
    6. '`)' → logprob: -11.750557899475098
    7. ')*' → logprob: -12.000557899475098
    8. '))' → logprob: -12.125557899475098
    9. ')//' → logprob: -12.125557899475098
    10. ')`' → logprob: -13.000557899475098

Token 15: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.9875325708417222e-05
    2. '//' → logprob: -11.250029563903809
    3. '*' → logprob: -11.875029563903809
    4. '))' → logprob: -12.500029563903809
    5. ' )' → logprob: -13.125029563903809
    6. '```' → logprob: -14.375029563903809
    7. '`)' → logprob: -14.625029563903809
    8. ')*' → logprob: -14.750029563903809
    9. ')`' → logprob: -14.875029563903809
    10. ')//' → logprob: -15.125029563903809


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 13
Tokens correctement prédits (1ère position, stricte): 4
Tokens correctement prédits (1ère position, avec adaptation): 4
Tokens correctement prédits (top 10): 6
Précision stricte (1ère position): 30.77%
Précision adaptée (1ère position): 30.77%
Précision (top 10): 46.15%
================================================================================
