================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:06:45
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
input_count, time_limit = map(int, input().split())
candidates = []
for _ in range(input_count):
    cost, time = map(int, input().split())
    if time <= time_limit:
        candidates.append(cost)
if len(candidates) == 0:
    print("TLE")
else:
    print(min(candidates))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'input' (ID: 2586)
  → Token d'amorce (pas de prédiction)

Token 1: '_count' (ID: 7536)
  → Token d'amorce (pas de prédiction)

Token 2: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 3: ' time' (ID: 1058)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.9501565098762512
    2. 'output' → logprob: -1.2001564502716064
    3. ' output' → logprob: -2.3251564502716064
    4. ' _' → logprob: -3.0751564502716064
    5. 'input' → logprob: -3.5751564502716064
    6. '=' → logprob: -3.7001564502716064
    7. '_output' → logprob: -3.8251564502716064
    8. '_' → logprob: -3.9501564502716064
    9. ' input' → logprob: -4.5751566886901855
    10. ' =' → logprob: -4.5751566886901855

Token 4: '_limit' (ID: 34361)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.12503495812416077
    2. '_' → logprob: -3.125035047531128
    3. ' =' → logprob: -3.250035047531128
    4. ',' → logprob: -3.750035047531128
    5. ')' → logprob: -4.875034809112549
    6. ':' → logprob: -6.625034809112549
    7. '*' → logprob: -7.625034809112549
    8. '(' → logprob: -7.750034809112549
    9. '.' → logprob: -8.000035285949707
    10. '```' → logprob: -8.125035285949707

Token 5: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.05670733004808426
    2. ',' → logprob: -3.1817073822021484
    3. ' =' → logprob: -5.056707382202148
    4. ':' → logprob: -5.431707382202148
    5. '_' → logprob: -6.056707382202148
    6. '```' → logprob: -8.556707382202148
    7. '.' → logprob: -8.681707382202148
    8. ')' → logprob: -9.306707382202148
    9. ';' → logprob: -11.181707382202148
    10. '_=' → logprob: -11.681707382202148

Token 6: ' map' (ID: 4014)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.41059309244155884
    2. '0' → logprob: -1.285593032836914
    3. 'input' → logprob: -3.910593032836914
    4. '10' → logprob: -4.410593032836914
    5. '5' → logprob: -4.910593032836914
    6. '1' → logprob: -4.910593032836914
    7. ' input' → logprob: -5.285593032836914
    8. '3' → logprob: -6.160593032836914
    9. ' map' → logprob: -6.285593032836914
    10. '2' → logprob: -6.535593032836914

Token 7: '(int' (ID: 2742)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 8: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.04729848355054855
    2. ')' → logprob: -3.4222984313964844
    3. '(' → logprob: -4.547298431396484
    4. '(user' → logprob: -6.297298431396484
    5. 'input' → logprob: -7.672298431396484
    6. '<|end|>' → logprob: -9.172298431396484
    7. '```' → logprob: -9.297298431396484
    8. '(raw' → logprob: -9.297298431396484
    9. '[input' → logprob: -9.547298431396484
    10. '('' → logprob: -10.047298431396484

Token 9: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.38690951466560364
    2. ' input' → logprob: -1.1369094848632812
    3. '(input' → logprob: -10.261909484863281
    4. ')' → logprob: -13.011909484863281
    5. ',input' → logprob: -14.011909484863281
    6. ' )' → logprob: -16.26190948486328
    7. '<input' → logprob: -16.38690948486328
    8. '=input' → logprob: -16.38690948486328
    9. '[input' → logprob: -16.51190948486328
    10. '	input' → logprob: -16.63690948486328

Token 10: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.5430598258972168
    2. '()' → logprob: -0.9180598258972168
    3. '())' → logprob: -4.793059825897217
    4. '(' → logprob: -4.793059825897217
    5. ')' → logprob: -7.043059825897217
    6. '('' → logprob: -7.168059825897217
    7. '());' → logprob: -7.668059825897217
    8. '(()' → logprob: -8.418060302734375
    9. '("("' → logprob: -8.793060302734375
    10. '('').' → logprob: -8.793060302734375

Token 11: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0009178895270451903
    2. 'strip' → logprob: -7.000917911529541
    3. 'rstrip' → logprob: -12.125917434692383
    4. ' split' → logprob: -14.875917434692383
    5. '(split' → logprob: -15.000917434692383
    6. 'read' → logprob: -16.000917434692383
    7. 'spl' → logprob: -16.000917434692383
    8. ')' → logprob: -16.500917434692383
    9. 'startswith' → logprob: -17.000917434692383
    10. 'replace' → logprob: -17.125917434692383

Token 12: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.061633508652448654
    2. ')' → logprob: -3.061633586883545
    3. '()))' → logprob: -5.186633586883545
    4. '))' → logprob: -5.561633586883545
    5. '()' → logprob: -5.811633586883545
    6. '(' → logprob: -7.936633586883545
    7. ' ())' → logprob: -10.061633110046387
    8. '('' → logprob: -10.436633110046387
    9. '`)' → logprob: -10.436633110046387
    10. '`()' → logprob: -11.311633110046387

Token 13: 'c' (ID: 66)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.767478883266449
    2. '
' → logprob: -1.0174789428710938
    3. '```' → logprob: -3.0174789428710938
    4. '\' → logprob: -3.6424789428710938
    5. 'for' → logprob: -3.7674789428710938
    6. 'if' → logprob: -3.8924789428710938
    7. '#' → logprob: -4.142478942871094
    8. ':' → logprob: -4.517478942871094
    9. '' → logprob: -5.517478942871094
    10. '\r' → logprob: -5.767478942871094

Token 14: 'andidates' (ID: 38168)
  Prédit: 'ount'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ount' → logprob: -1.0216959714889526
    2. 'ounter' → logprob: -1.1466959714889526
    3. 'o' → logprob: -2.021696090698242
    4. 'ont' → logprob: -2.521696090698242
    5. 'ol' → logprob: -4.146696090698242
    6. 'for' → logprob: -4.271696090698242
    7. 'on' → logprob: -4.271696090698242
    8. ' =' → logprob: -4.896696090698242
    9. '=' → logprob: -5.146696090698242
    10. '_' → logprob: -5.396696090698242

Token 15: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2597876489162445
    2. '=' → logprob: -1.509787678718567
    3. ')' → logprob: -5.759787559509277
    4. '[' → logprob: -6.759787559509277
    5. '_count' → logprob: -6.759787559509277
    6. '_' → logprob: -7.509787559509277
    7. '.' → logprob: -7.634787559509277
    8. ',' → logprob: -8.259787559509277
    9. '_counts' → logprob: -8.259787559509277
    10. '=[]' → logprob: -8.384787559509277

Token 16: ' []
' (ID: 8911)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.03835335373878479
    2. '[]' → logprob: -3.288353443145752
    3. ' [' → logprob: -8.538352966308594
    4. ' ' → logprob: -10.288352966308594
    5. '[' → logprob: -10.413352966308594
    6. ' list' → logprob: -10.913352966308594
    7. 'list' → logprob: -11.038352966308594
    8. '[int' → logprob: -11.913352966308594
    9. '[]}' → logprob: -13.288352966308594
    10. ' []
' → logprob: -13.413352966308594

Token 17: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.00016158436483237892
    2. ' for' → logprob: -8.750161170959473
    3. '```' → logprob: -13.250161170959473
    4. 'range' → logprob: -15.000161170959473
    5. '`' → logprob: -15.250161170959473
    6. '\n' → logprob: -15.625161170959473
    7. 'n' → logprob: -16.00016212463379
    8. '	for' → logprob: -16.12516212463379
    9. '   ' → logprob: -16.25016212463379
    10. '[' → logprob: -16.87516212463379

Token 18: ' _' (ID: 1175)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2592306435108185
    2. ' i' → logprob: -1.509230613708496
    3. ' _' → logprob: -5.884230613708496
    4. '_' → logprob: -6.259230613708496
    5. '  ' → logprob: -6.759230613708496
    6. ' candidate' → logprob: -7.509230613708496
    7. ' ▁' → logprob: -8.384230613708496
    8. 'i' → logprob: -8.884230613708496
    9. ' ‌' → logprob: -9.259230613708496
    10. ' item' → logprob: -9.259230613708496

Token 19: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.05033177137374878
    2. 'in' → logprob: -3.0503318309783936
    3. ' ' → logprob: -6.4253315925598145
    4. 'i' → logprob: -9.925332069396973
    5. ' _' → logprob: -11.300332069396973
    6. '  ' → logprob: -11.425332069396973
    7. ' i' → logprob: -11.425332069396973
    8. 'count' → logprob: -11.675332069396973
    9. 'c' → logprob: -12.175332069396973
    10. 's' → logprob: -12.425332069396973

Token 20: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.008615161292254925
    2. ' range' → logprob: -4.758615016937256
    3. 'input' → logprob: -15.008615493774414
    4. '	range' → logprob: -15.883615493774414
    5. '_range' → logprob: -16.883615493774414
    6. 'c' → logprob: -17.133615493774414
    7. '(range' → logprob: -17.133615493774414
    8. '```' → logprob: -17.758615493774414
    9. ' ' → logprob: -18.133615493774414
    10. '_' → logprob: -18.133615493774414

Token 21: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.42986437678337097
    2. '(input' → logprob: -1.3048644065856934
    3. ' (' → logprob: -2.5548644065856934
    4. '(range' → logprob: -8.804863929748535
    5. '(in' → logprob: -9.304863929748535
    6. ' input' → logprob: -9.304863929748535
    7. '(int' → logprob: -9.804863929748535
    8. '(time' → logprob: -11.054863929748535
    9. '(len' → logprob: -11.054863929748535
    10. '(
' → logprob: -11.304863929748535

Token 22: '_count' (ID: 7536)
  Prédit: '_count'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_count' → logprob: -2.570319702499546e-05
    2. '_counts' → logprob: -11.500025749206543
    3. 'count' → logprob: -12.125025749206543
    4. '()' → logprob: -12.625025749206543
    5. ')' → logprob: -13.500025749206543
    6. 's' → logprob: -13.875025749206543
    7. '_COUNT' → logprob: -14.000025749206543
    8. '_cnt' → logprob: -14.125025749206543
    9. '_' → logprob: -14.250025749206543
    10. '_c' → logprob: -14.375025749206543

Token 23: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0006211769068613648
    2. ')' → logprob: -8.25062084197998
    3. '):
' → logprob: -8.37562084197998
    4. ':' → logprob: -9.12562084197998
    5. ' ):' → logprob: -11.25062084197998
    6. '+' → logprob: -13.12562084197998
    7. '():' → logprob: -13.75062084197998
    8. ',' → logprob: -14.00062084197998
    9. '):
' → logprob: -14.12562084197998
    10. '```' → logprob: -15.00062084197998

Token 24: '   ' (ID: 271)
  Prédit: ' candidates'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' candidates' → logprob: -0.5859102010726929
    2. '   ' → logprob: -1.0859102010726929
    3. ' candidate' → logprob: -2.3359103202819824
    4. ' line' → logprob: -4.960910320281982
    5. ' data' → logprob: -7.585910320281982
    6. ' input' → logprob: -7.585910320281982
    7. 'candidate' → logprob: -8.460909843444824
    8. ' code' → logprob: -8.585909843444824
    9. '```' → logprob: -8.710909843444824
    10. '    
' → logprob: -9.085909843444824

Token 25: ' cost' (ID: 3097)
  Prédit: 'candidate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'candidate' → logprob: -0.45835116505622864
    2. ' candidate' → logprob: -1.4583511352539062
    3. 'c' → logprob: -2.9583511352539062
    4. 'name' → logprob: -3.2083511352539062
    5. ' candidates' → logprob: -4.083351135253906
    6. ' name' → logprob: -4.208351135253906
    7. 'data' → logprob: -5.458351135253906
    8. 'cand' → logprob: -6.583351135253906
    9. ' data' → logprob: -6.708351135253906
    10. ' line' → logprob: -6.708351135253906

Token 26: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.003025125479325652
    2. ' ,' → logprob: -6.878025054931641
    3. ' =' → logprob: -7.128025054931641
    4. 's' → logprob: -7.753025054931641
    5. '_candidates' → logprob: -8.37802505493164
    6. '_,' → logprob: -8.62802505493164
    7. '_cost' → logprob: -9.25302505493164
    8. '=' → logprob: -9.50302505493164
    9. ')' → logprob: -10.25302505493164
    10. ',c' → logprob: -10.62802505493164

Token 27: ' time' (ID: 1058)
  Prédit: 'time'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'time' → logprob: -0.7079563736915588
    2. ' time' → logprob: -0.9579563736915588
    3. 'score' → logprob: -2.957956314086914
    4. ' score' → logprob: -3.957956314086914
    5. ' capacity' → logprob: -5.082956314086914
    6. 'capacity' → logprob: -5.457956314086914
    7. 'value' → logprob: -5.832956314086914
    8. 'points' → logprob: -5.957956314086914
    9. 'prob' → logprob: -6.332956314086914
    10. ' points' → logprob: -6.457956314086914

Token 28: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.4751293659210205
    2. ' =' → logprob: -0.9751293659210205
    3. '_limit' → logprob: -7.100129127502441
    4. '_' → logprob: -9.600129127502441
    5. '_taken' → logprob: -9.600129127502441
    6. 's' → logprob: -10.475129127502441
    7. '_required' → logprob: -10.850129127502441
    8. '_cost' → logprob: -11.350129127502441
    9. 'limit' → logprob: -12.100129127502441
    10. '_needed' → logprob: -12.350129127502441

Token 29: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.0013272607466205955
    2. 'map' → logprob: -6.626327037811279
    3. '	map' → logprob: -14.376327514648438
    4. '   ' → logprob: -14.501327514648438
    5. ' list' → logprob: -16.876327514648438
    6. ' ' → logprob: -17.126327514648438
    7. '    ' → logprob: -17.126327514648438
    8. ' mapa' → logprob: -17.376327514648438
    9. ' ' → logprob: -17.626327514648438
    10. '(map' → logprob: -18.376327514648438

Token 30: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -4.596781946020201e-05
    2. '<int' → logprob: -11.000045776367188
    3. '(' → logprob: -11.125045776367188
    4. 'int' → logprob: -11.750045776367188
    5. '[int' → logprob: -12.875045776367188
    6. '=int' → logprob: -12.875045776367188
    7. ',int' → logprob: -14.375045776367188
    8. ' (' → logprob: -15.625045776367188
    9. '(str' → logprob: -15.625045776367188
    10. ']int' → logprob: -15.750045776367188

Token 31: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0007355354027822614
    2. ',input' → logprob: -7.250735759735107
    3. '(),' → logprob: -11.75073528289795
    4. '(' → logprob: -12.00073528289795
    5. '(input' → logprob: -12.12573528289795
    6. 'input' → logprob: -12.37573528289795
    7. ' ,' → logprob: -13.87573528289795
    8. ')' → logprob: -14.87573528289795
    9. '`,' → logprob: -15.87573528289795
    10. '```' → logprob: -16.000736236572266

Token 32: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.31326422095298767
    2. ' input' → logprob: -1.31326425075531
    3. ')' → logprob: -14.063263893127441
    4. '	input' → logprob: -14.688263893127441
    5. ' ' → logprob: -15.313263893127441
    6. '=input' → logprob: -15.563263893127441
    7. '(input' → logprob: -15.563263893127441
    8. '_input' → logprob: -15.938263893127441
    9. 'Input' → logprob: -16.188264846801758
    10. '<input' → logprob: -16.188264846801758

Token 33: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -3.4121114822482923e-06
    2. '()' → logprob: -12.750003814697266
    3. '.' → logprob: -15.375003814697266
    4. ' ().' → logprob: -16.750003814697266
    5. ')' → logprob: -17.000003814697266
    6. '().__' → logprob: -17.250003814697266
    7. '>().' → logprob: -17.750003814697266
    8. '.split' → logprob: -18.125003814697266
    9. ').' → logprob: -18.375003814697266
    10. '```' → logprob: -18.500003814697266

Token 34: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -4.320199877838604e-07
    2. 'strip' → logprob: -16.0
    3. ' split' → logprob: -16.125
    4. ')' → logprob: -17.25
    5. '(split' → logprob: -17.375
    6. 'spl' → logprob: -17.375
    7. 'rstrip' → logprob: -17.875
    8. '.split' → logprob: -18.875
    9. 'plit' → logprob: -19.0
    10. '().' → logprob: -19.875

Token 35: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0026387954130768776
    2. '())' → logprob: -6.502638816833496
    3. '()' → logprob: -6.877638816833496
    4. '))' → logprob: -9.627638816833496
    5. ')
' → logprob: -10.377638816833496
    6. ')`' → logprob: -12.752638816833496
    7. '`)' → logprob: -13.002638816833496
    8. '())
' → logprob: -13.877638816833496
    9. '),' → logprob: -15.002638816833496
    10. ')")' → logprob: -15.627638816833496

Token 36: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.020781273022294044
    2. ')' → logprob: -4.52078104019165
    3. '    
' → logprob: -5.52078104019165
    4. '```' → logprob: -6.39578104019165
    5. 'c' → logprob: -6.89578104019165
    6. '<|end|>' → logprob: -7.27078104019165
    7. '
' → logprob: -7.64578104019165
    8. '_candidates' → logprob: -7.89578104019165
    9. ' candidates' → logprob: -8.270781517028809
    10. ')
' → logprob: -8.520781517028809

Token 37: ' if' (ID: 538)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.7681249380111694
    2. ' candidates' → logprob: -0.7681249380111694
    3. '   ' → logprob: -2.643125057220459
    4. '	c' → logprob: -7.768125057220459
    5. '_candidates' → logprob: -7.893125057220459
    6. ' c' → logprob: -9.3931245803833
    7. 'candidate' → logprob: -10.1431245803833
    8. 'andidates' → logprob: -10.2681245803833
    9. 'Candidates' → logprob: -10.6431245803833
    10. ' candidatos' → logprob: -10.6431245803833

Token 38: ' time' (ID: 1058)
  Prédit: ' time'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' time' → logprob: -0.012217526324093342
    2. ' cost' → logprob: -4.5122175216674805
    3. 'time' → logprob: -7.0122175216674805
    4. ' ' → logprob: -9.38721752166748
    5. 'cost' → logprob: -9.76221752166748
    6. '(time' → logprob: -10.38721752166748
    7. ' (' → logprob: -10.38721752166748
    8. ' ' → logprob: -10.76221752166748
    9. '    ' → logprob: -11.76221752166748
    10. '	time' → logprob: -11.88721752166748

Token 39: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.313623309135437
    2. '<=' → logprob: -1.313623309135437
    3. '<' → logprob: -8.563623428344727
    4. ' <' → logprob: -9.188623428344727
    5. ' ' → logprob: -10.438623428344727
    6. '<|end|>' → logprob: -12.063623428344727
    7. '=' → logprob: -12.313623428344727
    8. '>' → logprob: -12.688623428344727
    9. '   ' → logprob: -12.813623428344727
    10. ')' → logprob: -12.813623428344727

Token 40: ' time' (ID: 1058)
  Prédit: ' time'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' time' → logprob: -0.12692883610725403
    2. 'time' → logprob: -2.1269288063049316
    3. '	time' → logprob: -14.75192928314209
    4. ' ' → logprob: -16.126928329467773
    5. ' ' → logprob: -16.626928329467773
    6. ' t' → logprob: -16.876928329467773
    7. '=time' → logprob: -17.751928329467773
    8. '"time' → logprob: -18.001928329467773
    9. 't' → logprob: -18.126928329467773
    10. '20' → logprob: -18.251928329467773

Token 41: '_limit' (ID: 34361)
  Prédit: '_limit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_limit' → logprob: -9.253090865968261e-06
    2. 'limit' → logprob: -12.000009536743164
    3. '_' → logprob: -13.500009536743164
    4. '_l' → logprob: -14.125009536743164
    5. '_lim' → logprob: -14.125009536743164
    6. '-limit' → logprob: -16.125009536743164
    7. '_limits' → logprob: -16.875009536743164
    8. '_count' → logprob: -17.125009536743164
    9. '_LIMIT' → logprob: -17.375009536743164
    10. ' _' → logprob: -17.375009536743164

Token 42: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.000344640837283805
    2. ' :' → logprob: -9.000344276428223
    3. '):' → logprob: -9.125344276428223
    4. ':
' → logprob: -10.000344276428223
    5. ' and' → logprob: -10.500344276428223
    6. '   ' → logprob: -10.875344276428223
    7. '       ' → logprob: -11.500344276428223
    8. ',' → logprob: -12.625344276428223
    9. 'and' → logprob: -13.250344276428223
    10. ':**' → logprob: -13.875344276428223

Token 43: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0007995037594810128
    2. '   ' → logprob: -7.250799655914307
    3. 'c' → logprob: -10.375799179077148
    4. '<|end|>' → logprob: -11.000799179077148
    5. ' candidates' → logprob: -11.375799179077148
    6. ',' → logprob: -11.875799179077148
    7. '      ' → logprob: -12.625799179077148
    8. ',c' → logprob: -12.875799179077148
    9. '_candidates' → logprob: -13.000799179077148
    10. ')' → logprob: -13.250799179077148

Token 44: ' candidates' (ID: 18116)
  Prédit: ' candidates'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' candidates' → logprob: -0.04525836929678917
    2. 'c' → logprob: -4.045258522033691
    3. '   ' → logprob: -4.170258522033691
    4. '       ' → logprob: -5.045258522033691
    5. '           ' → logprob: -5.795258522033691
    6. '_candidates' → logprob: -6.920258522033691
    7. ' c' → logprob: -7.545258522033691
    8. '	c' → logprob: -9.545258522033691
    9. ' candidats' → logprob: -9.795258522033691
    10. 'andidates' → logprob: -9.920258522033691

Token 45: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.038056984543800354
    2. '.' → logprob: -3.2880570888519287
    3. '.extend' → logprob: -12.163057327270508
    4. '.push' → logprob: -12.288057327270508
    5. ' .' → logprob: -13.163057327270508
    6. '.add' → logprob: -13.538057327270508
    7. '.app' → logprob: -14.413057327270508
    8. '.py' → logprob: -14.538057327270508
    9. '.Append' → logprob: -14.788057327270508
    10. '.setdefault' → logprob: -15.038057327270508

Token 46: '(cost' (ID: 133554)
  Prédit: '(('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '((' → logprob: -0.01508663035929203
    2. '(cost' → logprob: -4.515086650848389
    3. '(' → logprob: -5.515086650848389
    4. '(
' → logprob: -13.39008617401123
    5. '([' → logprob: -13.64008617401123
    6. '(c' → logprob: -14.89008617401123
    7. '(('' → logprob: -14.89008617401123
    8. '(`' → logprob: -15.39008617401123
    9. '(int' → logprob: -15.76508617401123
    10. '((_' → logprob: -15.76508617401123

Token 47: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.438573680294212e-06
    2. ')
' → logprob: -12.625005722045898
    3. ' )' → logprob: -13.500005722045898
    4. '   ' → logprob: -15.125005722045898
    5. '))' → logprob: -15.500005722045898
    6. '`)' → logprob: -16.8750057220459
    7. '')' → logprob: -17.3750057220459
    8. ')return' → logprob: -17.3750057220459
    9. ')))' → logprob: -17.7500057220459
    10. '+' → logprob: -18.0000057220459

Token 48: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.18602639436721802
    2. 'print' → logprob: -2.6860263347625732
    3. 'c' → logprob: -3.3110263347625732
    4. '```' → logprob: -3.5610263347625732
    5. '
' → logprob: -4.311026573181152
    6. ' if' → logprob: -5.561026573181152
    7. 'cost' → logprob: -5.686026573181152
    8. ' candidates' → logprob: -6.186026573181152
    9. '_candidates' → logprob: -6.311026573181152
    10. '<|end|>' → logprob: -6.311026573181152

Token 49: ' len' (ID: 4631)
  Prédit: ' candidates'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' candidates' → logprob: -0.00432887626811862
    2. ' len' → logprob: -5.629328727722168
    3. 'c' → logprob: -8.254328727722168
    4. ' not' → logprob: -8.379328727722168
    5. ' c' → logprob: -8.504328727722168
    6. ' ' → logprob: -10.504328727722168
    7. 'len' → logprob: -12.629328727722168
    8. '_candidates' → logprob: -13.629328727722168
    9. ' candidats' → logprob: -13.754328727722168
    10. ' ' → logprob: -13.754328727722168

Token 50: '(c' (ID: 2410)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5759567022323608
    2. '(c' → logprob: -0.8259567022323608
    3. '(candidate' → logprob: -11.575956344604492
    4. '(s' → logprob: -12.200956344604492
    5. ' (' → logprob: -14.325956344604492
    6. 'c' → logprob: -15.575956344604492
    7. '(a' → logprob: -15.700956344604492
    8. '(max' → logprob: -16.075956344604492
    9. '(cost' → logprob: -16.075956344604492
    10. '(cap' → logprob: -16.200956344604492

Token 51: 'andidates' (ID: 38168)
  Prédit: 'andidates'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'andidates' → logprob: -0.00021688752167392522
    2. 'and' → logprob: -8.750216484069824
    3. 'andidate' → logprob: -10.500216484069824
    4. 'andid' → logprob: -11.375216484069824
    5. ')' → logprob: -11.875216484069824
    6. 'andidat' → logprob: -12.375216484069824
    7. '_candidates' → logprob: -12.625216484069824
    8. 'andi' → logprob: -13.750216484069824
    9. 'c' → logprob: -14.000216484069824
    10. '_and' → logprob: -14.250216484069824

Token 52: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.008792542852461338
    2. ')>' → logprob: -5.758792400360107
    3. ' )' → logprob: -6.008792400360107
    4. ' >' → logprob: -6.633792400360107
    5. ')==' → logprob: -7.133792400360107
    6. '>' → logprob: -7.133792400360107
    7. ' ==' → logprob: -8.758792877197266
    8. '==' → logprob: -9.633792877197266
    9. '):' → logprob: -11.883792877197266
    10. ')=' → logprob: -15.383792877197266

Token 53: ' ==' (ID: 951)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.6922745108604431
    2. '>' → logprob: -0.9422745108604431
    3. ' ==' → logprob: -2.567274570465088
    4. '==' → logprob: -3.567274570465088
    5. ')' → logprob: -5.567274570465088
    6. ':' → logprob: -7.317274570465088
    7. ')>' → logprob: -8.56727409362793
    8. ')==' → logprob: -10.19227409362793
    9. '">' → logprob: -10.31727409362793
    10. '):' → logprob: -10.81727409362793

Token 54: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.22541861236095428
    2. ' ' → logprob: -1.6004185676574707
    3. '1' → logprob: -13.350419044494629
    4. ')' → logprob: -13.350419044494629
    5. ' ' → logprob: -14.475419044494629
    6. '  ' → logprob: -14.537919044494629
    7. '>' → logprob: -15.225419044494629
    8. '100' → logprob: -15.287919044494629
    9. '20' → logprob: -16.100418090820312
    10. '=' → logprob: -16.100418090820312

Token 55: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0004914337769150734
    2. ' ' → logprob: -7.625491619110107
    3. '1' → logprob: -12.75049114227295
    4. '   ' → logprob: -15.87549114227295
    5. '2' → logprob: -16.625492095947266
    6. '  ' → logprob: -16.625492095947266
    7. '4' → logprob: -17.312992095947266
    8. '20' → logprob: -17.625492095947266
    9. '>' → logprob: -17.625492095947266
    10. '100' → logprob: -17.750492095947266

Token 56: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00016158436483237892
    2. ':
' → logprob: -8.750161170959473
    3. ':return' → logprob: -14.000161170959473
    4. ' or' → logprob: -14.500161170959473
    5. ' :' → logprob: -14.875161170959473
    6. '):' → logprob: -14.875161170959473
    7. ',' → logprob: -15.500161170959473
    8. '   ' → logprob: -15.625161170959473
    9. 'print' → logprob: -16.12516212463379
    10. ')' → logprob: -16.25016212463379

Token 57: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11601618677377701
    2. 'print' → logprob: -2.616016149520874
    3. ' print' → logprob: -3.866016149520874
    4. ':' → logprob: -4.241016387939453
    5. '    
' → logprob: -8.241016387939453
    6. ':
' → logprob: -8.616016387939453
    7. '-' → logprob: -8.616016387939453
    8. '\n' → logprob: -8.991016387939453
    9. '    ' → logprob: -9.241016387939453
    10. '	print' → logprob: -10.616016387939453

Token 58: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.10527505725622177
    2. ' print' → logprob: -2.6052751541137695
    3. '   ' → logprob: -3.8552751541137695
    4. '-' → logprob: -5.6052751541137695
    5. ' -' → logprob: -6.9802751541137695
    6. '    ' → logprob: -9.23027515411377
    7. '-print' → logprob: -10.23027515411377
    8. '\n' → logprob: -10.60527515411377
    9. '0' → logprob: -10.85527515411377
    10. '    
' → logprob: -11.10527515411377

Token 59: '("' (ID: 568)
  Prédit: '(-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(-' → logprob: -0.20597609877586365
    2. '(' → logprob: -1.705976128578186
    3. '("' → logprob: -5.5809760093688965
    4. '('' → logprob: -8.205976486206055
    5. '-' → logprob: -8.330976486206055
    6. '()' → logprob: -9.330976486206055
    7. '(None' → logprob: -9.330976486206055
    8. '("-' → logprob: -9.580976486206055
    9. '(
' → logprob: -11.830976486206055
    10. '(

' → logprob: -12.955976486206055

Token 60: 'T' (ID: 51)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '-' → logprob: -0.0021039829589426517
    2. 'Impossible' → logprob: -6.627103805541992
    3. ' -' → logprob: -7.752103805541992
    4. 'No' → logprob: -9.002103805541992
    5. '0' → logprob: -9.377103805541992
    6. 'None' → logprob: -10.877103805541992
    7. '"' → logprob: -10.877103805541992
    8. 'Poor' → logprob: -11.127103805541992
    9. 'im' → logprob: -11.627103805541992
    10. 'Too' → logprob: -11.752103805541992

Token 61: 'LE' (ID: 1400)
  Prédit: 'oo'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'oo' → logprob: -0.34623783826828003
    2. 'ime' → logprob: -1.7212378978729248
    3. 'LE' → logprob: -2.721237897872925
    4. 'o' → logprob: -3.846237897872925
    5. 'im' → logprob: -5.346237659454346
    6. 'I' → logprob: -5.721237659454346
    7. 'O' → logprob: -5.971237659454346
    8. 'r' → logprob: -6.096237659454346
    9. 'L' → logprob: -6.471237659454346
    10. 'IME' → logprob: -6.846237659454346

Token 62: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.0038653970696032047
    2. ')' → logprob: -5.8788652420043945
    3. '")
' → logprob: -7.0038652420043945
    4. ')")' → logprob: -9.628865242004395
    5. '!")' → logprob: -9.878865242004395
    6. '"' → logprob: -11.378865242004395
    7. '")
' → logprob: -11.628865242004395
    8. ')
' → logprob: -12.253865242004395
    9. ')")
' → logprob: -13.378865242004395
    10. '')' → logprob: -13.878865242004395

Token 63: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.00038980069803074
    2. ' else' → logprob: -7.875389575958252
    3. 'elif' → logprob: -11.75039005279541
    4. '_else' → logprob: -14.62539005279541
    5. '    
' → logprob: -15.25039005279541
    6. '<|end|>' → logprob: -15.37539005279541
    7. '```' → logprob: -15.50039005279541
    8. ')' → logprob: -16.000389099121094
    9. '   ' → logprob: -16.250389099121094
    10. '-' → logprob: -16.500389099121094

Token 64: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00042447797022759914
    2. '   ' → logprob: -8.0004243850708
    3. ':
' → logprob: -9.3754243850708
    4. 'print' → logprob: -12.7504243850708
    5. ' :' → logprob: -14.5004243850708
    6. ' print' → logprob: -15.8754243850708
    7. '  ' → logprob: -16.375425338745117
    8. '.' → logprob: -16.375425338745117
    9. ',' → logprob: -16.500425338745117
    10. '    ' → logprob: -16.625425338745117

Token 65: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01245137583464384
    2. 'print' → logprob: -5.012451171875
    3. ' print' → logprob: -5.387451171875
    4. '    
' → logprob: -7.137451171875
    5. '
' → logprob: -9.137451171875
    6. '    ' → logprob: -9.262451171875
    7. '       ' → logprob: -9.887451171875
    8. '  ' → logprob: -10.887451171875
    9. '```' → logprob: -11.012451171875
    10. ' 
' → logprob: -11.137451171875

Token 66: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.16372071206569672
    2. ' print' → logprob: -2.4137206077575684
    3. '   ' → logprob: -2.7887206077575684
    4. '```' → logprob: -10.288721084594727
    5. '`' → logprob: -13.163721084594727
    6. '	print' → logprob: -14.163721084594727
    7. '    ' → logprob: -14.288721084594727
    8. ' `' → logprob: -14.788721084594727
    9. ' ' → logprob: -15.163721084594727
    10. '``' → logprob: -15.288721084594727

Token 67: '(min' (ID: 26035)
  Prédit: '(min'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(min' → logprob: -0.1276567429304123
    2. '(' → logprob: -2.1276566982269287
    3. '(max' → logprob: -7.252656936645508
    4. 'min' → logprob: -11.127656936645508
    5. '("' → logprob: -13.252656936645508
    6. ' (' → logprob: -13.752656936645508
    7. '(
' → logprob: -14.002656936645508
    8. ' min' → logprob: -14.127656936645508
    9. '('' → logprob: -15.252656936645508
    10. '(m' → logprob: -15.627656936645508

Token 68: '(c' (ID: 2410)
  Prédit: '(c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -0.01105878408998251
    2. '(' → logprob: -4.511058807373047
    3. '(candidate' → logprob: -12.011058807373047
    4. '()' → logprob: -12.761058807373047
    5. '(cost' → logprob: -14.011058807373047
    6. ' (' → logprob: -15.136058807373047
    7. ')' → logprob: -15.261058807373047
    8. 'c' → logprob: -15.636058807373047
    9. '(
' → logprob: -15.761058807373047
    10. '(

' → logprob: -16.261058807373047

Token 69: 'andidates' (ID: 38168)
  Prédit: 'andidates'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'andidates' → logprob: -0.00014704519708175212
    2. 'and' → logprob: -8.875146865844727
    3. 'andid' → logprob: -12.750146865844727
    4. 'andi' → logprob: -13.625146865844727
    5. 'ost' → logprob: -13.625146865844727
    6. ')' → logprob: -14.375146865844727
    7. 'andidate' → logprob: -14.625146865844727
    8. '_candidates' → logprob: -14.875146865844727
    9. 'c' → logprob: -15.125146865844727
    10. '))' → logprob: -16.500146865844727

Token 70: '))' (ID: 915)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.014168326742947102
    2. '))' → logprob: -4.2641682624816895
    3. '())' → logprob: -12.764168739318848
    4. ')))' → logprob: -13.514168739318848
    5. ' )' → logprob: -15.389168739318848
    6. '()' → logprob: -15.764168739318848
    7. ')")' → logprob: -16.13916778564453
    8. '`)' → logprob: -16.26416778564453
    9. ')`' → logprob: -17.13916778564453
    10. '")' → logprob: -17.13916778564453


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 68
Tokens correctement prédits (1ère position, stricte): 30
Tokens correctement prédits (1ère position, avec adaptation): 32
Tokens correctement prédits (top 10): 58
Précision stricte (1ère position): 44.12%
Précision adaptée (1ère position): 47.06%
Précision (top 10): 85.29%
================================================================================
