================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:19:26
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N, K = map(int, input().split()) # récupère les valeurs, j'espère qu'elles sont des entiers...

# Je calcule le nombre de fois que K "rentre" dans N (même si je ne m'en sers pas finalement)
x = int(N / K) # pas sûr que ça serve mais bon...

reste = N % K # ça c'est le reste, logique

# Je me mélange un peu : j'avais envie de tester la différence absolue (c'est pas forcément utile)
autre = abs(reste - K)

# On veut le plus petit résultat possible...
if autre < reste:
    print(autre)
else:
    print(reste)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' K' (ID: 658)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.024730099365115166
    2. ' =' → logprob: -4.024730205535889
    3. ',' → logprob: -5.274730205535889
    4. '```' → logprob: -7.774730205535889
    5. ')' → logprob: -7.899730205535889
    6. '+' → logprob: -8.14972972869873
    7. '.' → logprob: -9.64972972869873
    8. '[' → logprob: -9.77472972869873
    9. '*' → logprob: -9.89972972869873
    10. ':' → logprob: -10.27472972869873

Token 4: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.195722296833992
    2. ' input' → logprob: -2.4457223415374756
    3. 'map' → logprob: -2.6957223415374756
    4. 'input' → logprob: -4.3207221031188965
    5. ' ' → logprob: -5.1957221031188965
    6. '10' → logprob: -6.1957221031188965
    7. ' int' → logprob: -6.6957221031188965
    8. ' list' → logprob: -7.5707221031188965
    9. 'int' → logprob: -8.570722579956055
    10. ' N' → logprob: -8.695722579956055

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03809954971075058
    2. '```' → logprob: -3.913099527359009
    3. '(lambda' → logprob: -4.913099765777588
    4. '(int' → logprob: -5.538099765777588
    5. '<|end|>' → logprob: -6.538099765777588
    6. '(str' → logprob: -7.038099765777588
    7. ')' → logprob: -7.538099765777588
    8. '(input' → logprob: -7.538099765777588
    9. '[int' → logprob: -8.28809928894043
    10. '(user' → logprob: -8.28809928894043

Token 6: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.08176223188638687
    2. ')' → logprob: -2.8317623138427734
    3. '(' → logprob: -4.456762313842773
    4. 'input' → logprob: -4.956762313842773
    5. ',input' → logprob: -8.581762313842773
    6. '`)' → logprob: -8.706762313842773
    7. ' input' → logprob: -9.331762313842773
    8. '=input' → logprob: -9.706762313842773
    9. '(raw' → logprob: -9.831762313842773
    10. '```' → logprob: -9.831762313842773

Token 7: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.02334889955818653
    2. ' input' → logprob: -3.773348808288574
    3. ')' → logprob: -9.773348808288574
    4. '(input' → logprob: -10.148348808288574
    5. ',input' → logprob: -11.898348808288574
    6. '```' → logprob: -15.648348808288574
    7. '=input' → logprob: -16.52334976196289
    8. '<input' → logprob: -16.64834976196289
    9. ' )' → logprob: -17.02334976196289
    10. '[input' → logprob: -17.14834976196289

Token 8: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.3274463415145874
    2. '())' → logprob: -1.3274463415145874
    3. '(' → logprob: -4.952446460723877
    4. ')' → logprob: -5.702446460723877
    5. '().' → logprob: -7.452446460723877
    6. '(),' → logprob: -7.952446460723877
    7. '(input' → logprob: -7.952446460723877
    8. '`()' → logprob: -7.952446460723877
    9. '('' → logprob: -8.077445983886719
    10. '("")' → logprob: -8.327445983886719

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0019567059352993965
    2. 'strip' → logprob: -6.251956939697266
    3. 'rstrip' → logprob: -11.251956939697266
    4. ' split' → logprob: -11.751956939697266
    5. ')' → logprob: -12.126956939697266
    6. 'read' → logprob: -13.626956939697266
    7. 'spl' → logprob: -15.376956939697266
    8. 'startswith' → logprob: -16.126956939697266
    9. '(split' → logprob: -16.376956939697266
    10. 'replace' → logprob: -16.876956939697266

Token 10: '())' (ID: 3516)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.023908568546175957
    2. '())' → logprob: -4.398908615112305
    3. '))' → logprob: -4.523908615112305
    4. '()' → logprob: -8.398908615112305
    5. '(' → logprob: -9.273908615112305
    6. '`)' → logprob: -9.398908615112305
    7. '()))' → logprob: -10.898908615112305
    8. ')`' → logprob: -11.148908615112305
    9. '('' → logprob: -11.398908615112305
    10. '>)' → logprob: -11.898908615112305

Token 11: ' #' (ID: 1069)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.11225209385156631
    2. 'for' → logprob: -3.7372519969940186
    3. 'd' → logprob: -3.8622519969940186
    4. 'A' → logprob: -4.862252235412598
    5. 'dp' → logprob: -4.987252235412598
    6. 'if' → logprob: -5.112252235412598
    7. 'data' → logprob: -5.237252235412598
    8. '`' → logprob: -5.487252235412598
    9. 'x' → logprob: -5.487252235412598
    10. 's' → logprob: -5.612252235412598

Token 12: ' récup' (ID: 62856)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.6869767904281616
    2. ' ' → logprob: -1.6869767904281616
    3. ' a' → logprob: -2.561976909637451
    4. 'a' → logprob: -2.561976909637451
    5. ' A' → logprob: -2.811976909637451
    6. 's' → logprob: -3.061976909637451
    7. ' #' → logprob: -3.311976909637451
    8. ' array' → logprob: -3.436976909637451
    9. 'd' → logprob: -3.686976909637451
    10. 'array' → logprob: -3.811976909637451

Token 13: 'ère' (ID: 4346)
  Prédit: 'ération'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ération' → logprob: -0.5550087094306946
    2. 'up' → logprob: -1.5550086498260498
    3. 'é' → logprob: -2.18000864982605
    4. 'érer' → logprob: -4.055008888244629
    5. 'è' → logprob: -4.305008888244629
    6. 'érez' → logprob: -4.305008888244629
    7. 'er' → logprob: -4.555008888244629
    8. 'ép' → logprob: -5.180008888244629
    9. 'éré' → logprob: -5.305008888244629
    10. 'ér' → logprob: -5.680008888244629

Token 14: ' les' (ID: 1341)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.05526035279035568
    2. '(' → logprob: -3.430260419845581
    3. ')' → logprob: -5.055260181427002
    4. ' ' → logprob: -5.555260181427002
    5. '('' → logprob: -5.680260181427002
    6. ',' → logprob: -6.805260181427002
    7. ' la' → logprob: -7.055260181427002
    8. ' )' → logprob: -7.180260181427002
    9. ' ()' → logprob: -7.305260181427002
    10. ''' → logprob: -7.430260181427002

Token 15: ' valeurs' (ID: 73668)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.5638256669044495
    2. ' variables' → logprob: -2.4388256072998047
    3. ' nombres' → logprob: -2.4388256072998047
    4. ' données' → logprob: -2.9388256072998047
    5. ' valeurs' → logprob: -3.3138256072998047
    6. 'ent' → logprob: -3.3138256072998047
    7. ' ent' → logprob: -4.063825607299805
    8. 'd' → logprob: -4.063825607299805
    9. 'variables' → logprob: -4.313825607299805
    10. 'élé' → logprob: -4.563825607299805

Token 16: ',' (ID: 11)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.1873384267091751
    2. '```' → logprob: -3.062338352203369
    3. ')' → logprob: -3.187338352203369
    4. '\' → logprob: -3.812338352203369
    5. ',' → logprob: -4.312338352203369
    6. '<|end|>' → logprob: -4.437338352203369
    7. '
' → logprob: -4.812338352203369
    8. 'n' → logprob: -4.937338352203369
    9. '`' → logprob: -5.312338352203369
    10. ' ' → logprob: -5.937338352203369

Token 17: ' j' (ID: 441)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -1.578830599784851
    2. ')' → logprob: -1.953830599784851
    3. ' ' → logprob: -1.953830599784851
    4. ''' → logprob: -2.3288307189941406
    5. '\n' → logprob: -2.5788307189941406
    6. 'n' → logprob: -3.0788307189941406
    7. '"' → logprob: -3.3288307189941406
    8. '```' → logprob: -3.5788307189941406
    9. '\' → logprob: -3.7038307189941406
    10. ' n' → logprob: -3.7038307189941406

Token 18: ''espère' (ID: 116557)
  Prédit: 'uste'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'uste' → logprob: -0.13024650514125824
    2. 'e' → logprob: -2.75524640083313
    3. 'ust' → logprob: -3.13024640083313
    4. ''' → logprob: -5.380246639251709
    5. 'us' → logprob: -6.005246639251709
    6. ''ai' → logprob: -6.505246639251709
    7. ''espère' → logprob: -6.880246639251709
    8. '```' → logprob: -7.130246639251709
    9. 'u' → logprob: -7.630246639251709
    10. '')' → logprob: -7.630246639251709

Token 19: ' qu' (ID: 474)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.1077875867486
    2. '
' → logprob: -2.607787609100342
    3. '\' → logprob: -4.357787609100342
    4. '```' → logprob: -5.732787609100342
    5. '' → logprob: -5.857787609100342
    6. '  
' → logprob: -5.982787609100342
    7. ' 
' → logprob: -6.357787609100342
    8. ' ' → logprob: -6.857787609100342
    9. ')' → logprob: -7.232787609100342
    10. '`' → logprob: -7.357787609100342

Token 20: ''elles' (ID: 118359)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.4735790193080902
    2. ''' → logprob: -1.4735790491104126
    3. 'que' → logprob: -3.223578929901123
    4. ''ils' → logprob: -3.473578929901123
    5. ''il' → logprob: -3.723578929901123
    6. ''elles' → logprob: -3.723578929901123
    7. 'u' → logprob: -4.723578929901123
    8. ''un' → logprob: -5.098578929901123
    9. ''une' → logprob: -6.098578929901123
    10. 'ue' → logprob: -6.598578929901123

Token 21: ' sont' (ID: 5242)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 22: ' des' (ID: 731)
  Prédit: ' correct'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' correct' → logprob: -0.09509305655956268
    2. ' bien' → logprob: -3.595093011856079
    3. ' val' → logprob: -3.845093011856079
    4. ' valid' → logprob: -4.345093250274658
    5. ' positives' → logprob: -4.470093250274658
    6. ' correctement' → logprob: -5.970093250274658
    7. ' bonnes' → logprob: -6.345093250274658
    8. ' des' → logprob: -6.345093250274658
    9. 'correct' → logprob: -6.595093250274658
    10. ' just' → logprob: -6.845093250274658

Token 23: ' ent' (ID: 1121)
  Prédit: 'ent'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ent' → logprob: -0.03537008538842201
    2. ' ent' → logprob: -3.410370111465454
    3. ' nombres' → logprob: -7.410369873046875
    4. 'int' → logprob: -7.910369873046875
    5. 'n' → logprob: -8.535369873046875
    6. 'enti' → logprob: -9.285369873046875
    7. 'ints' → logprob: -9.535369873046875
    8. 'posit' → logprob: -9.660369873046875
    9. 'inte' → logprob: -10.035369873046875
    10. '```' → logprob: -10.035369873046875

Token 24: 'iers' (ID: 11012)
  Prédit: 'iers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iers' → logprob: -0.00042412037146277726
    2. 'ières' → logprob: -8.7504243850708
    3. 'i' → logprob: -9.1254243850708
    4. 'ires' → logprob: -9.6254243850708
    5. '```' → logprob: -10.5004243850708
    6. 'ti' → logprob: -10.8754243850708
    7. 'ier' → logprob: -11.2504243850708
    8. 't' → logprob: -11.5004243850708
    9. '#' → logprob: -12.2504243850708
    10. '   ' → logprob: -12.7504243850708

Token 25: '...

' (ID: 2161)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.21175958216190338
    2. '
' → logprob: -1.7117595672607422
    3. '\' → logprob: -5.461759567260742
    4. '```' → logprob: -6.211759567260742
    5. '' → logprob: -6.836759567260742
    6. '  
' → logprob: -7.086759567260742
    7. ' 
' → logprob: -8.211759567260742
    8. '`' → logprob: -8.461759567260742
    9. '`
' → logprob: -8.461759567260742
    10. ')' → logprob: -8.461759567260742

Token 26: '#' (ID: 2)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.8545677661895752
    2. '
' → logprob: -1.2295677661895752
    3. '```' → logprob: -2.604567766189575
    4. 'n' → logprob: -3.229567766189575
    5. 'x' → logprob: -3.354567766189575
    6. '\' → logprob: -3.854567766189575
    7. '#' → logprob: -4.104567527770996
    8. 'a' → logprob: -4.104567527770996
    9. 'if' → logprob: -4.354567527770996
    10. ')' → logprob: -4.354567527770996

Token 27: ' Je' (ID: 4678)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dp' → logprob: -1.8172537088394165
    2. '#' → logprob: -1.9422537088394165
    3. 'for' → logprob: -2.067253589630127
    4. 'result' → logprob: -2.317253589630127
    5. 'a' → logprob: -2.567253589630127
    6. 's' → logprob: -2.817253589630127
    7. ' for' → logprob: -2.942253589630127
    8. ' #' → logprob: -3.442253589630127
    9. 'arr' → logprob: -3.442253589630127
    10. 'def' → logprob: -3.567253589630127

Token 28: ' calc' (ID: 25691)
  Prédit: ' vais'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' vais' → logprob: -1.02862548828125
    2. ' #' → logprob: -1.40362548828125
    3. ' veux' → logprob: -1.65362548828125
    4. ' suis' → logprob: -3.27862548828125
    5. ' continue' → logprob: -3.65362548828125
    6. ' ' → logprob: -3.90362548828125
    7. ' n' → logprob: -4.15362548828125
    8. ' peux' → logprob: -4.27862548828125
    9. 's' → logprob: -4.40362548828125
    10. ' souhaite' → logprob: -4.40362548828125

Token 29: 'ule' (ID: 1601)
  Prédit: 'ule'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ule' → logprob: -0.00045426786527968943
    2. 'ul' → logprob: -7.875454425811768
    3. '#' → logprob: -10.37545394897461
    4. 'u' → logprob: -11.75045394897461
    5. 'cule' → logprob: -12.25045394897461
    6. 'ulé' → logprob: -12.25045394897461
    7. '\' → logprob: -12.62545394897461
    8. '_' → logprob: -12.62545394897461
    9. 'uler' → logprob: -12.87545394897461
    10. '```' → logprob: -12.87545394897461

Token 30: ' le' (ID: 505)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.47523099184036255
    2. ' result' → logprob: -1.9752309322357178
    3. ' s' → logprob: -3.3502309322357178
    4. ' le' → logprob: -3.6002309322357178
    5. 'result' → logprob: -3.6002309322357178
    6. 's' → logprob: -3.8502309322357178
    7. ' sum' → logprob: -3.8502309322357178
    8. ' max' → logprob: -4.100231170654297
    9. 'sum' → logprob: -4.475231170654297
    10. ' total' → logprob: -4.475231170654297

Token 31: ' nombre' (ID: 9733)
  Prédit: ' nombre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.9569958448410034
    2. 's' → logprob: -2.081995964050293
    3. ' facteur' → logprob: -2.081995964050293
    4. 'nombre' → logprob: -2.206995964050293
    5. ' résultat' → logprob: -3.331995964050293
    6. ' maximum' → logprob: -3.456995964050293
    7. 'maximum' → logprob: -3.956995964050293
    8. 'factor' → logprob: -3.956995964050293
    9. 'plus' → logprob: -4.081995964050293
    10. 'fact' → logprob: -4.081995964050293

Token 32: ' de' (ID: 334)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -1.4331674575805664
    2. 'de' → logprob: -1.4331674575805664
    3. '_' → logprob: -1.8081674575805664
    4. ' d' → logprob: -1.9331674575805664
    5. ' de' → logprob: -2.3081674575805664
    6. '_de' → logprob: -2.6831674575805664
    7. '_d' → logprob: -3.9331674575805664
    8. '_total' → logprob: -4.433167457580566
    9. 'total' → logprob: -5.433167457580566
    10. ' ' → logprob: -5.808167457580566

Token 33: ' fois' (ID: 14697)
  Prédit: ' comb'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' comb' → logprob: -1.5431512594223022
    2. ' façons' → logprob: -1.6681512594223022
    3. ' man' → logprob: -2.293151378631592
    4. 'comb' → logprob: -2.418151378631592
    5. 'man' → logprob: -2.918151378631592
    6. '_' → logprob: -2.918151378631592
    7. 'voy' → logprob: -3.543151378631592
    8. ' ways' → logprob: -3.918151378631592
    9. ' permutations' → logprob: -4.168151378631592
    10. 'v' → logprob: -4.293151378631592

Token 34: ' que' (ID: 661)
  Prédit: ' que'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.46565955877304077
    2. ' ' → logprob: -1.5906596183776855
    3. 'que' → logprob: -2.7156596183776855
    4. ' that' → logprob: -3.5906596183776855
    5. ' où' → logprob: -4.0906596183776855
    6. 'où' → logprob: -4.4656596183776855
    7. ' qu' → logprob: -4.7156596183776855
    8. '<|end|>' → logprob: -5.5906596183776855
    9. ' where' → logprob: -5.7156596183776855
    10. '  ' → logprob: -5.9656596183776855

Token 35: ' K' (ID: 658)
  Prédit: ' K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.9383655786514282
    2. ''' → logprob: -1.8133655786514282
    3. 'K' → logprob: -2.1883654594421387
    4. ' je' → logprob: -2.5633654594421387
    5. '"' → logprob: -2.9383654594421387
    6. ' '' → logprob: -3.0633654594421387
    7. ' "' → logprob: -3.8133654594421387
    8. ' j' → logprob: -3.9383654594421387
    9. 'je' → logprob: -3.9383654594421387
    10. ' ' → logprob: -4.438365459442139

Token 36: ' "' (ID: 392)
  Prédit: ' apparaît'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' apparaît' → logprob: -1.111707329750061
    2. '%' → logprob: -1.611707329750061
    3. ' peut' → logprob: -3.2367072105407715
    4. 's' → logprob: -3.3617072105407715
    5. 'appe' → logprob: -3.4867072105407715
    6. ' appara' → logprob: -3.4867072105407715
    7. 'occur' → logprob: -3.6117072105407715
    8. 'in' → logprob: -3.6117072105407715
    9. 'appear' → logprob: -3.9867072105407715
    10. '_' → logprob: -4.1117072105407715

Token 37: 'r' (ID: 81)
  Prédit: 'ap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ap' → logprob: -0.13714709877967834
    2. 'app' → logprob: -3.3871471881866455
    3. 'pe' → logprob: -3.6371471881866455
    4. 'appar' → logprob: -3.7621471881866455
    5. ' apparaît' → logprob: -4.387146949768066
    6. 's' → logprob: -4.762146949768066
    7. 'entre' → logprob: -5.137146949768066
    8. 'entr' → logprob: -6.262146949768066
    9. '```' → logprob: -6.387146949768066
    10. 'se' → logprob: -6.637146949768066

Token 38: 'entre' (ID: 17935)
  Prédit: 'entre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'entre' → logprob: -0.9291194081306458
    2. 'ep' → logprob: -1.054119348526001
    3. 'ép' → logprob: -2.054119348526001
    4. 'ent' → logprob: -2.929119348526001
    5. 'em' → logprob: -3.804119348526001
    6. 'e' → logprob: -3.804119348526001
    7. 'appe' → logprob: -5.67911958694458
    8. 'app' → logprob: -5.80411958694458
    9. 'empl' → logprob: -5.80411958694458
    10. 'entr' → logprob: -6.05411958694458

Token 39: '"' (ID: 1)
  Prédit: ' dans'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' dans' → logprob: -0.3228873014450073
    2. 'dans' → logprob: -1.8228873014450073
    3. ' "' → logprob: -2.197887420654297
    4. '"' → logprob: -6.822887420654297
    5. ' ' → logprob: -7.197887420654297
    6. 'd' → logprob: -7.947887420654297
    7. 's' → logprob: -8.322887420654297
    8. '"d' → logprob: -8.697887420654297
    9. ' d' → logprob: -9.072887420654297
    10. ' '' → logprob: -9.197887420654297

Token 40: ' dans' (ID: 2671)
  Prédit: ' dans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' dans' → logprob: -0.17337150871753693
    2. 'dans' → logprob: -1.9233715534210205
    3. ' in' → logprob: -4.798371315002441
    4. ' ' → logprob: -5.923371315002441
    5. 'in' → logprob: -6.673371315002441
    6. ',' → logprob: -8.923371315002441
    7. ' into' → logprob: -9.173371315002441
    8. ' dan' → logprob: -9.173371315002441
    9. ' i' → logprob: -9.298371315002441
    10. '```' → logprob: -9.923371315002441

Token 41: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.06998656690120697
    2. ' N' → logprob: -2.694986581802368
    3. ' ' → logprob: -10.694986343383789
    4. ' ' → logprob: -11.444986343383789
    5. '`' → logprob: -12.194986343383789
    6. 'l' → logprob: -12.444986343383789
    7. 'n' → logprob: -12.944986343383789
    8. ' la' → logprob: -13.444986343383789
    9. ' `' → logprob: -14.194986343383789
    10. 'la' → logprob: -14.694986343383789

Token 42: ' (' (ID: 350)
  Prédit: ' 
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' 
' → logprob: -0.7949907183647156
    2. '
' → logprob: -1.6699907779693604
    3. '\n' → logprob: -2.2949907779693604
    4. 'result' → logprob: -2.7949907779693604
    5. '  
' → logprob: -2.9199907779693604
    6. '\' → logprob: -3.5449907779693604
    7. 'n' → logprob: -3.7949907779693604
    8. 'div' → logprob: -4.044990539550781
    9. 'count' → logprob: -4.294990539550781
    10. 'r' → logprob: -4.669990539550781

Token 43: 'm' (ID: 76)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.018846359103918076
    2. ' )' → logprob: -4.01884651184082
    3. 'N' → logprob: -9.01884651184082
    4. ',' → logprob: -9.14384651184082
    5. '),' → logprob: -9.39384651184082
    6. 'n' → logprob: -9.39384651184082
    7. ' N' → logprob: -9.51884651184082
    8. '')' → logprob: -10.26884651184082
    9. 'div' → logprob: -10.51884651184082
    10. '#' → logprob: -11.01884651184082

Token 44: 'ême' (ID: 7961)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.8091229200363159
    2. 'e' → logprob: -1.684122920036316
    3. 'od' → logprob: -1.684122920036316
    4. 'ultip' → logprob: -2.4341230392456055
    5. 'o' → logprob: -4.4341230392456055
    6. '')' → logprob: -4.5591230392456055
    7. 'odule' → logprob: -4.6841230392456055
    8. 'a' → logprob: -4.9341230392456055
    9. '#' → logprob: -5.1841230392456055
    10. 'odu' → logprob: -5.3091230392456055

Token 45: ' si' (ID: 1784)
  Prédit: 'si'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'si' → logprob: -0.2671983242034912
    2. ' si' → logprob: -2.892198324203491
    3. 's' → logprob: -3.017198324203491
    4. 'en' → logprob: -3.267198324203491
    5. 'sans' → logprob: -3.517198324203491
    6. 'if' → logprob: -3.892198324203491
    7. 'pas' → logprob: -4.51719856262207
    8. 'div' → logprob: -5.14219856262207
    9. 'avant' → logprob: -5.26719856262207
    10. 'sur' → logprob: -5.89219856262207

Token 46: ' je' (ID: 1264)
  Prédit: ' K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.5905360579490662
    2. 'K' → logprob: -1.590536117553711
    3. ' N' → logprob: -2.590536117553711
    4. ' ce' → logprob: -2.965536117553711
    5. 'N' → logprob: -3.465536117553711
    6. ' on' → logprob: -3.715536117553711
    7. ' je' → logprob: -4.465536117553711
    8. 'le' → logprob: -5.340536117553711
    9. 'je' → logprob: -5.715536117553711
    10. ' la' → logprob: -5.840536117553711

Token 47: ' ne' (ID: 453)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -1.2275325059890747
    2. ' n' → logprob: -1.3525325059890747
    3. 'ne' → logprob: -2.227532386779785
    4. 's' → logprob: -2.602532386779785
    5. ' ne' → logprob: -2.727532386779785
    6. 'div' → logprob: -3.352532386779785
    7. 'veux' → logprob: -3.977532386779785
    8. 'pe' → logprob: -4.102532386779785
    9. 'p' → logprob: -4.102532386779785
    10. ' div' → logprob: -4.352532386779785

Token 48: ' m' (ID: 284)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.8584577441215515
    2. 'veux' → logprob: -1.6084578037261963
    3. 'pe' → logprob: -2.1084578037261963
    4. 'voud' → logprob: -3.1084578037261963
    5. 'vo' → logprob: -3.2334578037261963
    6. 'compr' → logprob: -3.7334578037261963
    7. 'f' → logprob: -3.9834578037261963
    8. 'le' → logprob: -4.108457565307617
    9. 'vais' → logprob: -4.233457565307617
    10. 'p' → logprob: -4.483457565307617

Token 49: ''en' (ID: 16740)
  Prédit: 'ets'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ets' → logprob: -0.206505686044693
    2. 'e' → logprob: -2.70650577545166
    3. 'et' → logprob: -2.83150577545166
    4. 'on' → logprob: -4.08150577545166
    5. 'ont' → logprob: -4.58150577545166
    6. 'ange' → logprob: -5.45650577545166
    7. 'ent' → logprob: -5.70650577545166
    8. 'exc' → logprob: -5.83150577545166
    9. '```' → logprob: -5.83150577545166
    10. 'en' → logprob: -6.20650577545166

Token 50: ' s' (ID: 265)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.038842421025037766
    2. 'serv' → logprob: -3.4138424396514893
    3. 'sers' → logprob: -5.53884220123291
    4. 'ser' → logprob: -7.53884220123291
    5. ' s' → logprob: -8.78884220123291
    6. 'r' → logprob: -8.91384220123291
    7. 'sert' → logprob: -9.16384220123291
    8. 'f' → logprob: -9.41384220123291
    9. 'serve' → logprob: -10.16384220123291
    10. '```' → logprob: -10.78884220123291

Token 51: 'ers' (ID: 409)
  Prédit: 'uis'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'uis' → logprob: -1.1413819789886475
    2. 'ers' → logprob: -1.2663819789886475
    3. 'er' → logprob: -1.5163819789886475
    4. '```' → logprob: -3.5163819789886475
    5. 'erv' → logprob: -3.7663819789886475
    6. 'ou' → logprob: -4.141382217407227
    7. 'o' → logprob: -4.266382217407227
    8. 'ais' → logprob: -4.766382217407227
    9. '#' → logprob: -4.891382217407227
    10. 'ér' → logprob: -4.891382217407227

Token 52: ' pas' (ID: 2173)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.008195385336875916
    2. ' )' → logprob: -4.883195400238037
    3. ',' → logprob: -8.133194923400879
    4. 'n' → logprob: -9.883194923400879
    5. '(' → logprob: -10.508194923400879
    6. ' ' → logprob: -10.508194923400879
    7. ')n' → logprob: -10.883194923400879
    8. '`)' → logprob: -11.008194923400879
    9. ' ' → logprob: -11.258194923400879
    10. '=' → logprob: -11.383194923400879

Token 53: ' finalement' (ID: 77979)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -1.3121815919876099
    2. 'n' → logprob: -1.5621815919876099
    3. ' 
' → logprob: -1.6871815919876099
    4. '\n' → logprob: -2.9371814727783203
    5. '`' → logprob: -3.0621814727783203
    6. ')' → logprob: -3.4371814727783203
    7. 's' → logprob: -3.5621814727783203
    8. ')
' → logprob: -3.8121814727783203
    9. 'result' → logprob: -3.8121814727783203
    10. '  
' → logprob: -4.06218147277832

Token 54: ')
' (ID: 446)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.6761109232902527
    2. ')' → logprob: -1.5511109828948975
    3. 'N' → logprob: -2.9261109828948975
    4. ',' → logprob: -3.3011109828948975
    5. ' 
' → logprob: -3.3011109828948975
    6. 'result' → logprob: -3.8011109828948975
    7. 'div' → logprob: -3.8011109828948975
    8. ')
' → logprob: -4.551110744476318
    9. '`' → logprob: -4.801110744476318
    10. 'r' → logprob: -5.051110744476318

Token 55: 'x' (ID: 87)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -1.4408868551254272
    2. 'n' → logprob: -1.8158868551254272
    3. 'result' → logprob: -1.9408868551254272
    4. 'count' → logprob: -1.9408868551254272
    5. 'q' → logprob: -3.065886974334717
    6. 'quot' → logprob: -3.065886974334717
    7. 'r' → logprob: -3.190886974334717
    8. ' 
' → logprob: -3.690886974334717
    9. ',' → logprob: -4.065886974334717
    10. 'div' → logprob: -4.190886974334717

Token 56: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2256735861301422
    2. '=' → logprob: -1.6006735563278198
    3. '_' → logprob: -8.60067367553711
    4. ',' → logprob: -10.60067367553711
    5. ' ' → logprob: -11.22567367553711
    6. '=int' → logprob: -11.60067367553711
    7. ' ' → logprob: -11.60067367553711
    8. '=x' → logprob: -12.47567367553711
    9. 'x' → logprob: -13.35067367553711
    10. '=N' → logprob: -13.35067367553711

Token 57: ' int' (ID: 677)
  Prédit: ' N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.2520071864128113
    2. 'N' → logprob: -1.502007246017456
    3. ' ' → logprob: -9.502007484436035
    4. ' ' → logprob: -13.377007484436035
    5. '	N' → logprob: -13.877007484436035
    6. '  ' → logprob: -14.752007484436035
    7. 'n' → logprob: -15.502007484436035
    8. '   ' → logprob: -16.75200653076172
    9. ' n' → logprob: -16.75200653076172
    10. ' int' → logprob: -17.50200653076172

Token 58: '(N' (ID: 10564)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4743218719959259
    2. '(N' → logprob: -0.9743218421936035
    3. '(K' → logprob: -9.224322319030762
    4. '()' → logprob: -10.099322319030762
    5. '((' → logprob: -10.349322319030762
    6. '(
' → logprob: -10.349322319030762
    7. '(x' → logprob: -11.349322319030762
    8. '('' → logprob: -12.099322319030762
    9. ' (' → logprob: -12.099322319030762
    10. '(n' → logprob: -12.224322319030762

Token 59: ' /' (ID: 820)
  Prédit: '/'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '/' → logprob: -0.173196479678154
    2. '/K' → logprob: -2.04819655418396
    3. ' /' → logprob: -3.67319655418396
    4. ')' → logprob: -5.423196315765381
    5. '/k' → logprob: -9.798196792602539
    6. '//' → logprob: -9.798196792602539
    7. ' )' → logprob: -9.923196792602539
    8. ' ' → logprob: -10.423196792602539
    9. '/x' → logprob: -11.173196792602539
    10. '/
' → logprob: -11.923196792602539

Token 60: ' K' (ID: 658)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.05491872876882553
    2. ' K' → logprob: -2.9299187660217285
    3. ' ' → logprob: -10.30491828918457
    4. ')' → logprob: -14.30491828918457
    5. '	K' → logprob: -14.30491828918457
    6. ' ' → logprob: -14.30491828918457
    7. '  ' → logprob: -15.05491828918457
    8. 'k' → logprob: -15.30491828918457
    9. '>K' → logprob: -15.55491828918457
    10. '1' → logprob: -16.17991828918457

Token 61: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0002441741817165166
    2. '))' → logprob: -8.375244140625
    3. ' )' → logprob: -11.625244140625
    4. ')))' → logprob: -13.750244140625
    5. ')`' → logprob: -13.875244140625
    6. '*' → logprob: -15.000244140625
    7. ')
' → logprob: -15.250244140625
    8. '),' → logprob: -15.375244140625
    9. '**' → logprob: -15.500244140625
    10. ')**' → logprob: -15.750244140625

Token 62: ' #' (ID: 1069)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.7969323396682739
    2. '
' → logprob: -1.796932339668274
    3. '\n' → logprob: -2.5469322204589844
    4. '*' → logprob: -2.6719322204589844
    5. 'x' → logprob: -2.9219322204589844
    6. '<|end|>' → logprob: -3.1719322204589844
    7. '+' → logprob: -3.6719322204589844
    8. ' ' → logprob: -3.9219322204589844
    9. '```' → logprob: -3.9219322204589844
    10. ')' → logprob: -3.9219322204589844

Token 63: ' pas' (ID: 2173)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -1.188570499420166
    2. '#' → logprob: -1.563570499420166
    3. ')' → logprob: -1.938570499420166
    4. '
' → logprob: -2.313570499420166
    5. ' 

' → logprob: -2.688570499420166
    6. ' 
' → logprob: -3.063570499420166
    7. ' ' → logprob: -3.438570499420166
    8. '' → logprob: -4.188570499420166
    9. '.' → logprob: -4.438570499420166
    10. '<|end|>' → logprob: -4.563570499420166

Token 64: ' sûr' (ID: 46415)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5039433836936951
    2. ' vraiment' → logprob: -2.25394344329834
    3. ' ' → logprob: -2.62894344329834
    4. '_' → logprob: -4.00394344329834
    5. ' utilisé' → logprob: -4.37894344329834
    6. 's' → logprob: -4.50394344329834
    7. '\' → logprob: -4.50394344329834
    8. 'f' → logprob: -4.75394344329834
    9. 'used' → logprob: -4.75394344329834
    10. ' #' → logprob: -4.75394344329834

Token 65: ' que' (ID: 661)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.3062221109867096
    2. '<|end|>' → logprob: -2.1812222003936768
    3. '' → logprob: -3.6812222003936768
    4. ' ' → logprob: -3.9312222003936768
    5. ' 
' → logprob: -3.9312222003936768
    6. '#' → logprob: -4.181221961975098
    7. '```' → logprob: -4.181221961975098
    8. '\n' → logprob: -4.306221961975098
    9. 'x' → logprob: -4.431221961975098
    10. '  
' → logprob: -5.306221961975098

Token 66: ' ça' (ID: 13590)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.8329260349273682
    2. 'int' → logprob: -0.8329260349273682
    3. 'ce' → logprob: -3.707926034927368
    4. ' ce' → logprob: -3.957926034927368
    5. ' int' → logprob: -4.207925796508789
    6. ' x' → logprob: -4.332925796508789
    7. 'c' → logprob: -4.457925796508789
    8. 'cela' → logprob: -4.707925796508789
    9. 'la' → logprob: -4.832925796508789
    10. 'le' → logprob: -5.082925796508789

Token 67: ' serve' (ID: 10505)
  Prédit: ' marche'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' marche' → logprob: -0.9240608215332031
    2. 'fonction' → logprob: -1.6740608215332031
    3. ' fonctionne' → logprob: -1.9240608215332031
    4. ' soit' → logprob: -2.424060821533203
    5. 'mar' → logprob: -2.924060821533203
    6. ' fasse' → logprob: -3.174060821533203
    7. 'f' → logprob: -3.299060821533203
    8. 'so' → logprob: -4.049060821533203
    9. 'do' → logprob: -5.174060821533203
    10. ' f' → logprob: -5.674060821533203

Token 68: ' mais' (ID: 2899)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.3774525225162506
    2. 'x' → logprob: -2.1274526119232178
    3. '<|end|>' → logprob: -2.3774526119232178
    4. ' ' → logprob: -3.5024526119232178
    5. '#' → logprob: -3.7524526119232178
    6. '\n' → logprob: -4.752452373504639
    7. '' → logprob: -5.002452373504639
    8. ' 
' → logprob: -5.127452373504639
    9. '
' → logprob: -5.627452373504639
    10. '

' → logprob: -5.752452373504639

Token 69: ' bon' (ID: 4846)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7076342701911926
    2. ' x' → logprob: -1.2076342105865479
    3. 'x' → logprob: -2.082634210586548
    4. ''' → logprob: -4.582634449005127
    5. ' je' → logprob: -4.957634449005127
    6. ' '' → logprob: -5.082634449005127
    7. ' #' → logprob: -5.332634449005127
    8. 'print' → logprob: -5.457634449005127
    9. '  ' → logprob: -5.707634449005127
    10. ' print' → logprob: -5.707634449005127

Token 70: '...

' (ID: 2161)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.12110228091478348
    2. 'x' → logprob: -3.8711023330688477
    3. ' 
' → logprob: -3.8711023330688477
    4. '' → logprob: -4.246102333068848
    5. '\n' → logprob: -4.371102333068848
    6. '#' → logprob: -4.496102333068848
    7. '<|end|>' → logprob: -5.246102333068848
    8. '  
' → logprob: -5.371102333068848
    9. '```' → logprob: -5.496102333068848
    10. '
' → logprob: -5.621102333068848

Token 71: 'reste' (ID: 84661)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -1.3005361557006836
    2. '#' → logprob: -1.4255361557006836
    3. ' ' → logprob: -2.3005361557006836
    4. '<|end|>' → logprob: -2.4255361557006836
    5. 'n' → logprob: -2.5505361557006836
    6. '\n' → logprob: -2.8005361557006836
    7. '+' → logprob: -4.050536155700684
    8. 'print' → logprob: -4.175536155700684
    9. '.' → logprob: -4.300536155700684
    10. ' 
' → logprob: -4.425536155700684

Token 72: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.23292891681194305
    2. ' =' → logprob: -1.8579288721084595
    3. '_' → logprob: -3.107928991317749
    4. 's' → logprob: -4.98292875289917
    5. ' ' → logprob: -9.107929229736328
    6. ',' → logprob: -10.357929229736328
    7. ')' → logprob: -10.607929229736328
    8. '_=' → logprob: -11.482929229736328
    9. 'r' → logprob: -11.732929229736328
    10. 'space' → logprob: -11.857929229736328

Token 73: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.16023285686969757
    2. ' N' → logprob: -1.9102329015731812
    3. ' ' → logprob: -12.035232543945312
    4. 'int' → logprob: -13.910232543945312
    5. ' ' → logprob: -14.410232543945312
    6. '	N' → logprob: -14.660232543945312
    7. ' int' → logprob: -15.410232543945312
    8. '0' → logprob: -16.035232543945312
    9. '`' → logprob: -16.035232543945312
    10. 'x' → logprob: -16.285232543945312

Token 74: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.18262767791748047
    2. '%' → logprob: -1.8076276779174805
    3. ' -' → logprob: -6.3076276779174805
    4. '-' → logprob: -7.5576276779174805
    5. ' ' → logprob: -7.8076276779174805
    6. '<|end|>' → logprob: -9.55762767791748
    7. ' ' → logprob: -10.55762767791748
    8. ' %
' → logprob: -12.18262767791748
    9. ')' → logprob: -12.30762767791748
    10. '%x' → logprob: -12.68262767791748

Token 75: ' K' (ID: 658)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.1002117469906807
    2. ' K' → logprob: -2.3502118587493896
    3. ' ' → logprob: -12.475212097167969
    4. ' ' → logprob: -14.725212097167969
    5. '	K' → logprob: -14.850212097167969
    6. '>K' → logprob: -15.850212097167969
    7. '  ' → logprob: -16.10021209716797
    8. '<K' → logprob: -16.35021209716797
    9. ',K' → logprob: -16.47521209716797
    10. '(K' → logprob: -17.22521209716797

Token 76: ' #' (ID: 1069)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -1.1583181619644165
    2. '#' → logprob: -1.2833181619644165
    3. '<|end|>' → logprob: -1.6583181619644165
    4. '\n' → logprob: -2.783318042755127
    5. ' ' → logprob: -3.033318042755127
    6. '+' → logprob: -3.533318042755127
    7. 'print' → logprob: -3.658318042755127
    8. ' 
' → logprob: -4.283318042755127
    9. '```' → logprob: -4.908318042755127
    10. '\' → logprob: -5.033318042755127

Token 77: ' ça' (ID: 13590)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.18008090555667877
    2. ' ' → logprob: -3.0550808906555176
    3. ' calcul' → logprob: -3.8050808906555176
    4. ' print' → logprob: -4.055080890655518
    5. ' reste' → logprob: -4.180080890655518
    6. '1' → logprob: -4.555080890655518
    7. ' rest' → logprob: -4.805080890655518
    8. ' #' → logprob: -5.055080890655518
    9. 'print' → logprob: -5.180080890655518
    10. ' calculate' → logprob: -5.805080890655518

Token 78: ' c' (ID: 274)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.4515061378479004
    2. ' semble' → logprob: -2.0765061378479004
    3. ' va' → logprob: -2.2015061378479004
    4. ' continue' → logprob: -2.2015061378479004
    5. ' s' → logprob: -2.8265061378479004
    6. '<|end|>' → logprob: -3.3265061378479004
    7. ' reste' → logprob: -3.4515061378479004
    8. ' #' → logprob: -3.5765061378479004
    9. ' print' → logprob: -3.5765061378479004
    10. ' vaut' → logprob: -3.9515061378479004

Token 79: ''est' (ID: 6616)
  Prédit: 'alc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'alc' → logprob: -0.24573038518428802
    2. 'al' → logprob: -2.495730400085449
    3. 'om' → logprob: -3.370730400085449
    4. 'omp' → logprob: -3.620730400085449
    5. 'omme' → logprob: -4.120730400085449
    6. 'on' → logprob: -4.370730400085449
    7. 'ont' → logprob: -4.620730400085449
    8. 'omm' → logprob: -4.995730400085449
    9. 'a' → logprob: -5.620730400085449
    10. 'r' → logprob: -6.120730400085449

Token 80: ' le' (ID: 505)
  Prédit: 'le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'le' → logprob: -0.7683812379837036
    2. ' le' → logprob: -2.018381118774414
    3. ' important' → logprob: -2.768381118774414
    4. 'important' → logprob: -2.893381118774414
    5. 'la' → logprob: -3.143381118774414
    6. 'l' → logprob: -3.143381118774414
    7. ' ce' → logprob: -3.518381118774414
    8. ' utile' → logprob: -3.518381118774414
    9. ' la' → logprob: -4.018381118774414
    10. 'utile' → logprob: -4.268381118774414

Token 81: ' reste' (ID: 26769)
  Prédit: 'reste'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'reste' → logprob: -0.08683355897665024
    2. ' reste' → logprob: -2.5868334770202637
    3. 'nombre' → logprob: -5.211833477020264
    4. 'rest' → logprob: -7.086833477020264
    5. 're' → logprob: -7.211833477020264
    6. ' nombre' → logprob: -7.836833477020264
    7. 'mod' → logprob: -9.211833953857422
    8. 'plus' → logprob: -9.461833953857422
    9. 'r' → logprob: -9.711833953857422
    10. '```' → logprob: -10.586833953857422

Token 82: ',' (ID: 11)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.46925389766693115
    2. '#' → logprob: -1.4692538976669312
    3. '<|end|>' → logprob: -3.5942540168762207
    4. ' ' → logprob: -3.8442540168762207
    5. '\' → logprob: -4.219254016876221
    6. 'x' → logprob: -4.594254016876221
    7. '```' → logprob: -4.719254016876221
    8. 'if' → logprob: -4.719254016876221
    9. '\n' → logprob: -4.844254016876221
    10. '+' → logprob: -4.969254016876221

Token 83: ' logique' (ID: 115350)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.593418836593628
    2. ' ' → logprob: -1.843418836593628
    3. ' which' → logprob: -2.093418836593628
    4. '<|end|>' → logprob: -2.218418836593628
    5. '#' → logprob: -2.468418836593628
    6. ' qui' → logprob: -3.093418836593628
    7. 'which' → logprob: -3.343418836593628
    8. ' on' → logprob: -3.718418836593628
    9. ' je' → logprob: -3.843418836593628
    10. ' and' → logprob: -3.843418836593628

Token 84: '

' (ID: 279)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.17053920030593872
    2. '\n' → logprob: -3.295539140701294
    3. '<|end|>' → logprob: -3.545539140701294
    4. '#' → logprob: -3.795539140701294
    5. ' ' → logprob: -3.920539140701294
    6. '```' → logprob: -4.920539379119873
    7. '
' → logprob: -5.045539379119873
    8. '\' → logprob: -5.295539379119873
    9. 'if' → logprob: -5.545539379119873
    10. 's' → logprob: -5.795539379119873

Token 85: '#' (ID: 2)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.638094425201416
    2. '#' → logprob: -1.888094425201416
    3. '\n' → logprob: -2.388094425201416
    4. '<|end|>' → logprob: -2.638094425201416
    5. '+' → logprob: -3.388094425201416
    6. 'if' → logprob: -3.888094425201416
    7. '\' → logprob: -4.388094425201416
    8. '```' → logprob: -4.388094425201416
    9. 'x' → logprob: -4.513094425201416
    10. '
' → logprob: -4.638094425201416

Token 86: ' Je' (ID: 4678)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.4810902178287506
    2. 'if' → logprob: -1.2310901880264282
    3. ' if' → logprob: -3.4810903072357178
    4. '#' → logprob: -3.8560903072357178
    5. 'for' → logprob: -4.106090068817139
    6. 'result' → logprob: -4.606090068817139
    7. ' print' → logprob: -5.356090068817139
    8. ' for' → logprob: -6.356090068817139
    9. 'def' → logprob: -6.481090068817139
    10. 'x' → logprob: -7.231090068817139

Token 87: ' me' (ID: 668)
  Prédit: ' veux'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' veux' → logprob: -0.555258572101593
    2. 'print' → logprob: -1.8052585124969482
    3. ' vais' → logprob: -2.4302585124969482
    4. 'veux' → logprob: -2.9302585124969482
    5. ' print' → logprob: -3.6802585124969482
    6. ' souhaite' → logprob: -4.555258750915527
    7. ' continue' → logprob: -4.555258750915527
    8. ' peux' → logprob: -4.680258750915527
    9. ' voudrais' → logprob: -4.680258750915527
    10. ' cherche' → logprob: -4.930258750915527

Token 88: ' mélange' (ID: 80391)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.13791756331920624
    2. 'f' → logprob: -3.5129175186157227
    3. 'sers' → logprob: -4.262917518615723
    4. 'dem' → logprob: -4.387917518615723
    5. 'serv' → logprob: -4.762917518615723
    6. 'pose' → logprob: -5.137917518615723
    7. 'dis' → logprob: -5.137917518615723
    8. 'pr' → logprob: -5.512917518615723
    9. 'place' → logprob: -5.512917518615723
    10. 'r' → logprob: -5.512917518615723

Token 89: ' un' (ID: 537)
  Prédit: ' un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.21251872181892395
    2. 'dans' → logprob: -2.5875186920166016
    3. 'un' → logprob: -2.7125186920166016
    4. 'a' → logprob: -4.962518692016602
    5. ' dans' → logprob: -5.087518692016602
    6. 's' → logprob: -5.337518692016602
    7. 'pour' → logprob: -5.337518692016602
    8. 'sur' → logprob: -5.462518692016602
    9. 'les' → logprob: -5.712518692016602
    10. ':' → logprob: -6.212518692016602

Token 90: ' peu' (ID: 9235)
  Prédit: 'pe'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pe' → logprob: -0.008627697825431824
    2. ' peu' → logprob: -6.008627891540527
    3. 'u' → logprob: -6.758627891540527
    4. ' peux' → logprob: -6.758627891540527
    5. '```' → logprob: -7.008627891540527
    6. 'p' → logprob: -7.258627891540527
    7. ' peut' → logprob: -7.258627891540527
    8. 'pu' → logprob: -7.633627891540527
    9. '  ' → logprob: -9.008627891540527
    10. 'tout' → logprob: -9.008627891540527

Token 91: ' :' (ID: 712)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.9606833457946777
    2. ' ' → logprob: -2.2106833457946777
    3. ' entre' → logprob: -2.2106833457946777
    4. ' pour' → logprob: -2.4606833457946777
    5. 'pour' → logprob: -2.4606833457946777
    6. ' si' → logprob: -2.9606833457946777
    7. 's' → logprob: -2.9606833457946777
    8. '#' → logprob: -2.9606833457946777
    9. ' if' → logprob: -3.3356833457946777
    10. ',' → logprob: -3.5856833457946777

Token 92: ' j' (ID: 441)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.1337474584579468
    2. ' if' → logprob: -1.8837474584579468
    3. 'print' → logprob: -1.8837474584579468
    4. 'result' → logprob: -1.8837474584579468
    5. ' result' → logprob: -3.3837475776672363
    6. ' print' → logprob: -3.5087475776672363
    7. ' res' → logprob: -3.7587475776672363
    8. 'res' → logprob: -4.008747577667236
    9. 'for' → logprob: -4.258747577667236
    10. 'q' → logprob: -4.633747577667236

Token 93: ''avais' (ID: 61286)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.031153719872236252
    2. ''ess' → logprob: -4.781153678894043
    3. ''ai' → logprob: -4.906153678894043
    4. ''' → logprob: -5.406153678894043
    5. 'a' → logprob: -6.656153678894043
    6. ''a' → logprob: -6.781153678894043
    7. 'ai' → logprob: -7.031153678894043
    8. 'uste' → logprob: -7.281153678894043
    9. ''avais' → logprob: -7.281153678894043
    10. ''é' → logprob: -7.781153678894043

Token 94: ' envie' (ID: 51635)
  Prédit: 'oub'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'oub' → logprob: -0.14709022641181946
    2. 'l' → logprob: -3.772090196609497
    3. 'pe' → logprob: -4.022090435028076
    4. 'pas' → logprob: -4.147090435028076
    5. 'bes' → logprob: -4.397090435028076
    6. 'un' → logprob: -4.522090435028076
    7. 'vou' → logprob: -5.022090435028076
    8. 'une' → logprob: -5.272090435028076
    9. 'pré' → logprob: -5.647090435028076
    10. 'com' → logprob: -5.772090435028076

Token 95: ' de' (ID: 334)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.6124976277351379
    2. 'de' → logprob: -0.8624976277351379
    3. '#' → logprob: -3.362497568130493
    4. ' de' → logprob: -7.612497806549072
    5. ' d' → logprob: -8.112497329711914
    6. 'print' → logprob: -8.362497329711914
    7. 'x' → logprob: -10.112497329711914
    8. ' ' → logprob: -10.362497329711914
    9. 'à' → logprob: -10.612497329711914
    10. '#print' → logprob: -11.112497329711914

Token 96: ' tester' (ID: 51819)
  Prédit: 'faire'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'faire' → logprob: -0.3490835130214691
    2. 'div' → logprob: -2.974083423614502
    3. 'mettre' → logprob: -3.099083423614502
    4. 'print' → logprob: -3.224083423614502
    5. 'tr' → logprob: -3.724083423614502
    6. 'dire' → logprob: -3.849083423614502
    7. 'coder' → logprob: -4.224083423614502
    8. 'contin' → logprob: -4.474083423614502
    9. 'prendre' → logprob: -4.599083423614502
    10. 'penser' → logprob: -4.849083423614502

Token 97: ' la' (ID: 557)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.2699897289276123
    2. 'if' → logprob: -1.5199897289276123
    3. ' if' → logprob: -5.394989967346191
    4. 'reste' → logprob: -5.394989967346191
    5. 'for' → logprob: -6.144989967346191
    6. ' print' → logprob: -6.144989967346191
    7. 'x' → logprob: -7.019989967346191
    8. '#' → logprob: -7.019989967346191
    9. 'rest' → logprob: -7.644989967346191
    10. 'result' → logprob: -7.769989967346191

Token 98: ' différence' (ID: 79196)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.3134295344352722
    2. 'div' → logprob: -2.938429594039917
    3. 'if' → logprob: -3.563429594039917
    4. '#' → logprob: -3.813429594039917
    5. 'f' → logprob: -3.813429594039917
    6. 'pow' → logprob: -3.813429594039917
    7. 's' → logprob: -4.313429355621338
    8. 'str' → logprob: -4.438429355621338
    9. 'for' → logprob: -4.563429355621338
    10. 'fonction' → logprob: -4.813429355621338

Token 99: ' absol' (ID: 7374)
  Prédit: 'diff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'diff' → logprob: -0.7229021787643433
    2. ' =' → logprob: -1.9729021787643433
    3. '=' → logprob: -2.097902297973633
    4. 'print' → logprob: -2.222902297973633
    5. 'd' → logprob: -2.722902297973633
    6. 'y' → logprob: -3.722902297973633
    7. 'difference' → logprob: -3.847902297973633
    8. 'between' → logprob: -4.472902297973633
    9. 's' → logprob: -5.222902297973633
    10. ' entre' → logprob: -5.472902297973633

Token 100: 'ue' (ID: 466)
  Prédit: 'ue'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ue' → logprob: -0.0004846538067795336
    2. 'u' → logprob: -7.875484466552734
    3. 'ule' → logprob: -9.625484466552734
    4. 'ol' → logprob: -11.250484466552734
    5. 'uée' → logprob: -12.000484466552734
    6. '#' → logprob: -12.750484466552734
    7. 'uele' → logprob: -13.000484466552734
    8. ' ue' → logprob: -13.500484466552734
    9. 'uelle' → logprob: -13.750484466552734
    10. 'ute' → logprob: -14.000484466552734

Token 101: ' (' (ID: 350)
  Prédit: 'diff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'diff' → logprob: -0.2637748420238495
    2. 'print' → logprob: -2.013774871826172
    3. 'difference' → logprob: -3.388774871826172
    4. 'abs' → logprob: -3.513774871826172
    5. 'd' → logprob: -3.763774871826172
    6. 's' → logprob: -6.013774871826172
    7. 'a' → logprob: -6.013774871826172
    8. ',' → logprob: -6.388774871826172
    9. 'result' → logprob: -6.513774871826172
    10. 't' → logprob: -7.763774871826172

Token 102: 'c' (ID: 66)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.20803621411323547
    2. ' entre' → logprob: -2.958036184310913
    3. ',' → logprob: -3.083036184310913
    4. 'entre' → logprob: -4.083036422729492
    5. 'abs' → logprob: -4.208036422729492
    6. ' )' → logprob: -4.333036422729492
    7. '(' → logprob: -4.458036422729492
    8. '#' → logprob: -4.958036422729492
    9. 'print' → logprob: -4.958036422729492
    10. '()' → logprob: -5.208036422729492

Token 103: ''est' (ID: 6616)
  Prédit: ''est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''est' → logprob: -0.44156089425086975
    2. ''' → logprob: -2.066560983657837
    3. '')' → logprob: -2.316560983657837
    4. 'e' → logprob: -2.566560983657837
    5. '#' → logprob: -4.191560745239258
    6. 'a' → logprob: -4.441560745239258
    7. ')' → logprob: -5.066560745239258
    8. ''a' → logprob: -5.566560745239258
    9. ''e' → logprob: -5.691560745239258
    10. ''était' → logprob: -5.941560745239258

Token 104: ' pas' (ID: 2173)
  Prédit: 'pour'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pour' → logprob: -1.0957751274108887
    2. 'une' → logprob: -1.8457751274108887
    3. 'just' → logprob: -2.2207751274108887
    4. 'la' → logprob: -3.2207751274108887
    5. 'le' → logprob: -3.3457751274108887
    6. 'pas' → logprob: -3.4707751274108887
    7. 'v' → logprob: -3.5957751274108887
    8. 'abs' → logprob: -3.5957751274108887
    9. 'un' → logprob: -3.7207751274108887
    10. 'pe' → logprob: -4.095775127410889

Token 105: ' forcément' (ID: 96692)
  Prédit: ' une'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' une' → logprob: -1.2090271711349487
    2. 'b' → logprob: -2.7090272903442383
    3. ' un' → logprob: -2.7090272903442383
    4. 'une' → logprob: -2.7090272903442383
    5. 'abs' → logprob: -3.2090272903442383
    6. 'pour' → logprob: -3.2090272903442383
    7. 'm' → logprob: -3.8340272903442383
    8. 'ça' → logprob: -3.8340272903442383
    9. 'moins' → logprob: -3.8340272903442383
    10. 'bien' → logprob: -3.9590272903442383

Token 106: ' utile' (ID: 68237)
  Prédit: 'utile'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'utile' → logprob: -0.5185896158218384
    2. 'une' → logprob: -2.268589496612549
    3. 'la' → logprob: -3.018589496612549
    4. ' utile' → logprob: -3.143589496612549
    5. 'plus' → logprob: -3.643589496612549
    6. 'm' → logprob: -3.893589496612549
    7. 'un' → logprob: -4.018589496612549
    8. 'just' → logprob: -4.143589496612549
    9. 'b' → logprob: -4.393589496612549
    10. 'mal' → logprob: -4.643589496612549

Token 107: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.35454097390174866
    2. ' entre' → logprob: -1.3545409440994263
    3. ',' → logprob: -4.479540824890137
    4. ' )' → logprob: -4.854540824890137
    5. ' mais' → logprob: -4.979540824890137
    6. '),' → logprob: -5.354540824890137
    7. 'entre' → logprob: -5.729540824890137
    8. ' between' → logprob: -6.604540824890137
    9. 'between' → logprob: -7.229540824890137
    10. ' de' → logprob: -7.479540824890137

Token 108: 'aut' (ID: 1828)
  Prédit: 'diff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'diff' → logprob: -0.08386696130037308
    2. 'abs' → logprob: -3.083867073059082
    3. 'print' → logprob: -3.833867073059082
    4. 'difference' → logprob: -4.833867073059082
    5. 'result' → logprob: -6.208867073059082
    6. 'd' → logprob: -6.708867073059082
    7. 'if' → logprob: -6.958867073059082
    8. 'res' → logprob: -8.708867073059082
    9. 'answer' → logprob: -8.833867073059082
    10. 'delta' → logprob: -9.083867073059082

Token 109: 're' (ID: 264)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.6962752938270569
    2. 're' → logprob: -0.6962752938270569
    3. 'res' → logprob: -6.321275234222412
    4. 'o' → logprob: -8.07127571105957
    5. 'or' → logprob: -8.32127571105957
    6. 'es' → logprob: -8.32127571105957
    7. 'er' → logprob: -8.82127571105957
    8. 'ores' → logprob: -9.44627571105957
    9. 'r' → logprob: -10.07127571105957
    10. '_re' → logprob: -10.44627571105957

Token 110: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.11650880426168442
    2. '_diff' → logprob: -3.116508722305298
    3. 'e' → logprob: -3.616508722305298
    4. ' =' → logprob: -4.241508960723877
    5. '_difference' → logprob: -4.616508960723877
    6. '_e' → logprob: -5.366508960723877
    7. '_d' → logprob: -5.741508960723877
    8. '=' → logprob: -5.741508960723877
    9. '_re' → logprob: -6.741508960723877
    10. '_r' → logprob: -7.366508960723877

Token 111: ' abs' (ID: 8443)
  Prédit: ' abs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' abs' → logprob: -0.47407880425453186
    2. 'abs' → logprob: -0.9740787744522095
    3. '(abs' → logprob: -13.974079132080078
    4. ' ' → logprob: -14.224079132080078
    5. ' N' → logprob: -16.224079132080078
    6. '  ' → logprob: -16.849079132080078
    7. ' min' → logprob: -16.849079132080078
    8. ' ' → logprob: -17.099079132080078
    9. 'min' → logprob: -17.724079132080078
    10. 'N' → logprob: -17.849079132080078

Token 112: '(re' (ID: 8178)
  Prédit: '(re'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(re' → logprob: -0.5293763875961304
    2. '(N' → logprob: -1.0293763875961304
    3. '(K' → logprob: -4.15437650680542
    4. '(rest' → logprob: -4.15437650680542
    5. '(x' → logprob: -4.27937650680542
    6. '(' → logprob: -5.02937650680542
    7. '(k' → logprob: -7.02937650680542
    8. '(r' → logprob: -7.27937650680542
    9. '(n' → logprob: -8.029376029968262
    10. '((' → logprob: -10.029376029968262

Token 113: 'ste' (ID: 2277)
  Prédit: 'ste'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ste' → logprob: -1.1472419600977446e-06
    2. 'st' → logprob: -14.500000953674316
    3. 'te' → logprob: -15.375000953674316
    4. 'stre' → logprob: -16.625001907348633
    5. 'm' → logprob: -16.875001907348633
    6. 's' → logprob: -16.875001907348633
    7. '#' → logprob: -17.125001907348633
    8. 'sta' → logprob: -17.250001907348633
    9. 'stes' → logprob: -18.000001907348633
    10. 'sti' → logprob: -18.750001907348633

Token 114: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.6337195634841919
    2. '-' → logprob: -0.7587195634841919
    3. ')' → logprob: -6.883719444274902
    4. ' ' → logprob: -10.133719444274902
    5. '-)' → logprob: -11.008719444274902
    6. ' )' → logprob: -11.383719444274902
    7. '-K' → logprob: -11.633719444274902
    8. ',' → logprob: -12.508719444274902
    9. ' ' → logprob: -12.696219444274902
    10. '-k' → logprob: -13.383719444274902

Token 115: ' K' (ID: 658)
  Prédit: 'K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.16023652255535126
    2. '(K' → logprob: -2.2852365970611572
    3. 'x' → logprob: -3.6602365970611572
    4. '(x' → logprob: -5.035236358642578
    5. ' K' → logprob: -5.535236358642578
    6. ' (' → logprob: -5.660236358642578
    7. '(N' → logprob: -5.785236358642578
    8. '(' → logprob: -7.035236358642578
    9. '1' → logprob: -7.660236358642578
    10. '0' → logprob: -7.785236358642578

Token 116: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.1637164789135568e-05
    2. ' )' → logprob: -11.625011444091797
    3. ')
' → logprob: -13.375011444091797
    4. '))' → logprob: -14.500011444091797
    5. ')#' → logprob: -15.750011444091797
    6. ')`' → logprob: -16.250011444091797
    7. '#' → logprob: -16.500011444091797
    8. ')

' → logprob: -16.750011444091797
    9. '),' → logprob: -16.875011444091797
    10. ' ' → logprob: -17.125011444091797

Token 117: '#' (ID: 2)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.08443331718444824
    2. ')' → logprob: -3.7094333171844482
    3. '
' → logprob: -3.9594333171844482
    4. 'if' → logprob: -3.9594333171844482
    5. '+' → logprob: -5.209433555603027
    6. ' if' → logprob: -5.334433555603027
    7. '<|end|>' → logprob: -6.459433555603027
    8. ' print' → logprob: -6.584433555603027
    9. ' ' → logprob: -6.709433555603027
    10. '#' → logprob: -7.459433555603027

Token 118: ' On' (ID: 2160)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.2733211815357208
    2. 'print' → logprob: -1.5233211517333984
    3. '#' → logprob: -4.398321151733398
    4. 'result' → logprob: -5.398321151733398
    5. ' if' → logprob: -5.773321151733398
    6. 'diff' → logprob: -7.773321151733398
    7. 'max' → logprob: -8.898321151733398
    8. 'min' → logprob: -9.273321151733398
    9. 'answer' → logprob: -9.398321151733398
    10. 'reste' → logprob: -9.648321151733398

Token 119: ' veut' (ID: 41653)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.020676851272583
    2. 'print' → logprob: -1.270676851272583
    3. '#' → logprob: -1.395676851272583
    4. ' if' → logprob: -2.770676851272583
    5. ' reste' → logprob: -4.145676612854004
    6. ' =' → logprob: -4.395676612854004
    7. ' print' → logprob: -4.520676612854004
    8. ' #' → logprob: -6.270676612854004
    9. '=' → logprob: -7.020676612854004
    10. '#print' → logprob: -7.020676612854004

Token 120: ' le' (ID: 505)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.3208925127983093
    2. 'print' → logprob: -1.320892572402954
    3. ' min' → logprob: -5.195892333984375
    4. ' print' → logprob: -6.695892333984375
    5. 'le' → logprob: -8.695892333984375
    6. 'im' → logprob: -8.820892333984375
    7. '#' → logprob: -8.945892333984375
    8. 'aff' → logprob: -9.695892333984375
    9. ' impr' → logprob: -10.320892333984375
    10. '(min' → logprob: -10.570892333984375

Token 121: ' plus' (ID: 2932)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.18989503383636475
    2. 'minimum' → logprob: -1.8148950338363647
    3. ' minimum' → logprob: -5.564895153045654
    4. 'print' → logprob: -5.814895153045654
    5. 'nombre' → logprob: -7.064895153045654
    6. 'max' → logprob: -7.314895153045654
    7. 'plus' → logprob: -7.439895153045654
    8. ' min' → logprob: -7.814895153045654
    9. '#' → logprob: -7.939895153045654
    10. 'maximum' → logprob: -8.939894676208496

Token 122: ' petit' (ID: 20577)
  Prédit: 'pet'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pet' → logprob: -0.1567239612340927
    2. ' petit' → logprob: -2.031723976135254
    3. '```' → logprob: -4.906723976135254
    4. 'grand' → logprob: -5.531723976135254
    5. 'court' → logprob: -6.531723976135254
    6. 'small' → logprob: -7.531723976135254
    7. 'pro' → logprob: -9.281723976135254
    8. ' grand' → logprob: -9.781723976135254
    9. 'Petit' → logprob: -9.781723976135254
    10. 'plus' → logprob: -10.406723976135254

Token 123: ' résultat' (ID: 62556)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'min' → logprob: -1.5633949041366577
    2. ':' → logprob: -1.6883949041366577
    3. ',' → logprob: -2.1883950233459473
    4. 'result' → logprob: -2.3133950233459473
    5. 'diff' → logprob: -2.6883950233459473
    6. ')' → logprob: -3.0633950233459473
    7. '<|end|>' → logprob: -3.3133950233459473
    8. 'print' → logprob: -3.5633950233459473
    9. '```' → logprob: -3.9383950233459473
    10. '=' → logprob: -3.9383950233459473

Token 124: ' possible' (ID: 4149)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.2972000539302826
    2. 'result' → logprob: -1.547200083732605
    3. 'if' → logprob: -3.4221999645233154
    4. 'min' → logprob: -5.1722002029418945
    5. ' if' → logprob: -6.9222002029418945
    6. 'res' → logprob: -7.2972002029418945
    7. ' print' → logprob: -7.4222002029418945
    8. 'output' → logprob: -7.6722002029418945
    9. '```' → logprob: -7.7972002029418945
    10. ',' → logprob: -7.9222002029418945

Token 125: '...
' (ID: 4908)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.17516769468784332
    2. 'if' → logprob: -2.6751677989959717
    3. 'result' → logprob: -3.6751677989959717
    4. 'print' → logprob: -3.6751677989959717
    5. '\n' → logprob: -4.425167560577393
    6. ' if' → logprob: -4.550167560577393
    7. '  
' → logprob: -5.300167560577393
    8. '<|end|>' → logprob: -6.175167560577393
    9. ' 
' → logprob: -6.300167560577393
    10. '\' → logprob: -6.300167560577393

Token 126: 'if' (ID: 366)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.013755358755588531
    2. 'result' → logprob: -4.5137553215026855
    3. 'if' → logprob: -6.2637553215026855
    4. 'min' → logprob: -7.5137553215026855
    5. '
' → logprob: -10.138755798339844
    6. 'answer' → logprob: -10.263755798339844
    7. 'res' → logprob: -10.513755798339844
    8. 'output' → logprob: -10.513755798339844
    9. ' print' → logprob: -10.763755798339844
    10. '#' → logprob: -11.013755798339844

Token 127: ' autre' (ID: 20278)
  Prédit: ' reste'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' reste' → logprob: -0.11287704110145569
    2. ' min' → logprob: -2.362877130508423
    3. 'reste' → logprob: -4.612876892089844
    4. 'min' → logprob: -6.362876892089844
    5. ' rester' → logprob: -8.362876892089844
    6. ' restante' → logprob: -8.737876892089844
    7. ' ' → logprob: -8.862876892089844
    8. ' resto' → logprob: -9.237876892089844
    9. '(min' → logprob: -9.737876892089844
    10. ' ' → logprob: -10.112876892089844

Token 128: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.012829584069550037
    2. '<' → logprob: -4.387829780578613
    3. ' <=' → logprob: -8.137829780578613
    4. ' >' → logprob: -11.387829780578613
    5. '<=' → logprob: -12.137829780578613
    6. ' ' → logprob: -13.137829780578613
    7. ' >=' → logprob: -14.012829780578613
    8. '<int' → logprob: -14.012829780578613
    9. '<K' → logprob: -14.137829780578613
    10. ':' → logprob: -14.137829780578613

Token 129: ' reste' (ID: 26769)
  Prédit: 'reste'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'reste' → logprob: -5.943783253314905e-05
    2. 'rest' → logprob: -10.000059127807617
    3. ' reste' → logprob: -11.375059127807617
    4. '=' → logprob: -13.000059127807617
    5. 're' → logprob: -16.875059127807617
    6. '```' → logprob: -17.500059127807617
    7. '0' → logprob: -17.625059127807617
    8. 'remain' → logprob: -18.500059127807617
    9. 'reten' → logprob: -18.875059127807617
    10. 'x' → logprob: -19.250059127807617

Token 130: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.011141198687255383
    2. ':
' → logprob: -4.511141300201416
    3. ' :' → logprob: -9.386140823364258
    4. ':
' → logprob: -12.011140823364258
    5. ' :
' → logprob: -13.261140823364258
    6. ':return' → logprob: -14.761140823364258
    7. ':

' → logprob: -14.886140823364258
    8. '=' → logprob: -15.886140823364258
    9. 'rest' → logprob: -16.011140823364258
    10. '):' → logprob: -16.136140823364258

Token 131: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.02415180392563343
    2. '   ' → logprob: -4.149151802062988
    3. ' print' → logprob: -5.149151802062988
    4. 'result' → logprob: -6.399151802062988
    5. ' ' → logprob: -8.399151802062988
    6. '	print' → logprob: -8.649151802062988
    7. 'answer' → logprob: -10.024151802062988
    8. 'reste' → logprob: -10.024151802062988
    9. 'res' → logprob: -10.399151802062988
    10. ' result' → logprob: -10.899151802062988

Token 132: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0002453662164043635
    2. 'result' → logprob: -8.500245094299316
    3. '   ' → logprob: -10.875245094299316
    4. ' print' → logprob: -11.625245094299316
    5. 'reste' → logprob: -12.000245094299316
    6. 'answer' → logprob: -12.875245094299316
    7. 'res' → logprob: -13.125245094299316
    8. 'rest' → logprob: -13.750245094299316
    9. 'prin' → logprob: -14.875245094299316
    10. 'pr' → logprob: -14.875245094299316

Token 133: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -1.5213274309644476e-05
    2. 'aut' → logprob: -11.250015258789062
    3. '()' → logprob: -14.500015258789062
    4. '(
' → logprob: -14.875015258789062
    5. '(a' → logprob: -14.875015258789062
    6. '(x' → logprob: -15.250015258789062
    7. '((' → logprob: -15.750015258789062
    8. ' (' → logprob: -16.000015258789062
    9. '(other' → logprob: -16.375015258789062
    10. ''autre' → logprob: -16.500015258789062

Token 134: 'aut' (ID: 1828)
  Prédit: 'aut'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'aut' → logprob: -5.512236498361744e-07
    2. 'autore' → logprob: -15.375000953674316
    3. '   ' → logprob: -16.125
    4. ''autre' → logprob: -17.0
    5. '```' → logprob: -17.125
    6. ' autre' → logprob: -17.125
    7. 'other' → logprob: -18.25
    8. '0' → logprob: -18.25
    9. 'a' → logprob: -18.25
    10. 'reste' → logprob: -18.375

Token 135: 're' (ID: 264)
  Prédit: 're'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 're' → logprob: -0.0005475530633702874
    2. 'e' → logprob: -7.750547409057617
    3. 'ore' → logprob: -9.375547409057617
    4. 'tre' → logprob: -12.000547409057617
    5. 'aut' → logprob: -12.250547409057617
    6. 'otre' → logprob: -12.375547409057617
    7. 'ure' → logprob: -12.625547409057617
    8. 'ire' → logprob: -12.750547409057617
    9. 'oire' → logprob: -13.125547409057617
    10. 'reste' → logprob: -13.500547409057617

Token 136: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.011084488593041897
    2. ')
' → logprob: -4.63608455657959
    3. 'else' → logprob: -6.63608455657959
    4. ' else' → logprob: -11.38608455657959
    5. ' )' → logprob: -13.38608455657959
    6. '')' → logprob: -14.51108455657959
    7. ')
' → logprob: -15.01108455657959
    8. '}' → logprob: -15.13608455657959
    9. '#else' → logprob: -15.38608455657959
    10. '<|end|>' → logprob: -15.38608455657959

Token 137: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -3.531315314830863e-06
    2. ' else' → logprob: -12.625003814697266
    3. 'elif' → logprob: -15.625003814697266
    4. 'elser' → logprob: -17.250003814697266
    5. 'elses' → logprob: -18.625003814697266
    6. '```' → logprob: -18.750003814697266
    7. 'els' → logprob: -19.000003814697266
    8. '_else' → logprob: -20.000003814697266
    9. '}else' → logprob: -20.125003814697266
    10. '#else' → logprob: -20.625003814697266

Token 138: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.000805341056548059
    2. '(rest' → logprob: -8.000804901123047
    3. '   ' → logprob: -8.625804901123047
    4. ' :' → logprob: -9.000804901123047
    5. ':
' → logprob: -9.625804901123047
    6. 'rest' → logprob: -9.875804901123047
    7. 'reste' → logprob: -11.250804901123047
    8. 'print' → logprob: -11.500804901123047
    9. ' reste' → logprob: -12.250804901123047
    10. '(' → logprob: -12.375804901123047

Token 139: '   ' (ID: 271)
  Prédit: 'reste'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'reste' → logprob: -4.143808109802194e-05
    2. 'rest' → logprob: -10.500041007995605
    3. 'print' → logprob: -11.625041007995605
    4. '   ' → logprob: -12.875041007995605
    5. ' reste' → logprob: -13.000041007995605
    6. 're' → logprob: -16.500041961669922
    7. 'resse' → logprob: -17.125041961669922
    8. '    
' → logprob: -18.750041961669922
    9. '  ' → logprob: -19.125041961669922
    10. 'remain' → logprob: -19.250041961669922

Token 140: ' print' (ID: 2123)
  Prédit: 'reste'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'reste' → logprob: -0.003231306094676256
    2. 'print' (adapté à ' print') → logprob: -5.753231525421143
    3. 'rest' → logprob: -9.878231048583984
    4. ' reste' → logprob: -13.503231048583984
    5. '   ' → logprob: -14.128231048583984
    6. 're' → logprob: -17.003231048583984
    7. 'resse' → logprob: -17.378231048583984
    8. '    
' → logprob: -17.753231048583984
    9. 'remain' → logprob: -18.003231048583984
    10. '  ' → logprob: -18.378231048583984

Token 141: '(re' (ID: 8178)
  Prédit: '(re'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(re' → logprob: -0.0008766854298301041
    2. '(rest' → logprob: -7.8758769035339355
    3. 'reste' → logprob: -8.000876426696777
    4. '(' → logprob: -8.750876426696777
    5. 're' → logprob: -13.250876426696777
    6. '(r' → logprob: -14.875876426696777
    7. ' reste' → logprob: -15.375876426696777
    8. ' (' → logprob: -15.500876426696777
    9. '()' → logprob: -15.500876426696777
    10. '((' → logprob: -16.250877380371094

Token 142: 'ste' (ID: 2277)
  Prédit: 'ste'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ste' → logprob: -1.2664456789934775e-06
    2. 'stre' → logprob: -13.875000953674316
    3. 'st' → logprob: -16.125001907348633
    4. 'te' → logprob: -16.375001907348633
    5. 'step' → logprob: -17.875001907348633
    6. 'sta' → logprob: -18.250001907348633
    7. '#' → logprob: -18.375001907348633
    8. 'reste' → logprob: -18.750001907348633
    9. 'steh' → logprob: -19.000001907348633
    10. 'stes' → logprob: -19.000001907348633

Token 143: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.128163257315464e-07
    2. ')
' → logprob: -15.875
    3. ' )' → logprob: -15.875
    4. '))' → logprob: -18.0
    5. ')`' → logprob: -18.375
    6. '}' → logprob: -19.0
    7. ')}' → logprob: -19.625
    8. ')#' → logprob: -19.75
    9. '')' → logprob: -20.125
    10. '）' → logprob: -20.25


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 141
Tokens correctement prédits (1ère position, stricte): 27
Tokens correctement prédits (1ère position, avec adaptation): 28
Tokens correctement prédits (top 10): 78
Précision stricte (1ère position): 19.15%
Précision adaptée (1ère position): 19.86%
Précision (top 10): 55.32%
================================================================================
