================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:47:48
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N = int(input())
A = list(map(int, input().split()))
rev_sum = 0
for a_part in A:
    if a_part != 0:
        rev_sum += 1 / a_part
if rev_sum != 0:
    print(1 / rev_sum)
else:
    print(0)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0003063838230445981
    2. '('' → logprob: -8.500306129455566
    3. '(N' → logprob: -10.000306129455566
    4. '(
' → logprob: -10.750306129455566
    5. '(input' → logprob: -11.250306129455566
    6. ''' → logprob: -12.125306129455566
    7. '("("' → logprob: -12.375306129455566
    8. '```' → logprob: -12.375306129455566
    9. '`' → logprob: -12.750306129455566
    10. '(`' → logprob: -13.000306129455566

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5405747294425964
    2. ')' → logprob: -0.9155747294425964
    3. '()' → logprob: -4.290574550628662
    4. '())' → logprob: -5.915574550628662
    5. '(
' → logprob: -8.41557502746582
    6. '```' → logprob: -9.16557502746582
    7. '))' → logprob: -9.29057502746582
    8. '")' → logprob: -9.54057502746582
    9. '`)' → logprob: -9.79057502746582
    10. '(

' → logprob: -9.79057502746582

Token 5: 'A' (ID: 32)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.5059829354286194
    2. 'if' → logprob: -2.5059828758239746
    3. 's' → logprob: -2.6309828758239746
    4. 'a' → logprob: -2.6309828758239746
    5. 'x' → logprob: -3.5059828758239746
    6. '`' → logprob: -3.6309828758239746
    7. 'i' → logprob: -3.8809828758239746
    8. '[' → logprob: -4.380982875823975
    9. 'f' → logprob: -4.505982875823975
    10. ' ' → logprob: -4.630982875823975

Token 6: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0016465028747916222
    2. '.' → logprob: -7.501646518707275
    3. '[]' → logprob: -8.376646041870117
    4. '=' → logprob: -8.751646041870117
    5. '[A' → logprob: -9.001646041870117
    6. '\[' → logprob: -9.126646041870117
    7. '[i' → logprob: -9.251646041870117
    8. ' =' → logprob: -9.376646041870117
    9. '[:]' → logprob: -9.501646041870117
    10. '.append' → logprob: -10.001646041870117

Token 7: ' list' (ID: 1562)
  Prédit: ' list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.5259736180305481
    2. 'list' → logprob: -1.5259735584259033
    3. ' []' → logprob: -2.2759735584259033
    4. '[]' → logprob: -2.7759735584259033
    5. ' [' → logprob: -3.9009735584259033
    6. '[' → logprob: -5.525973796844482
    7. '[input' → logprob: -6.900973796844482
    8. '[list' → logprob: -7.525973796844482
    9. '[int' → logprob: -7.650973796844482
    10. 'input' → logprob: -8.525973320007324

Token 8: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004554015584290028
    2. '(range' → logprob: -5.87955379486084
    3. '```' → logprob: -7.00455379486084
    4. '[' → logprob: -8.12955379486084
    5. '[(' → logprob: -8.87955379486084
    6. '(
' → logprob: -8.87955379486084
    7. ')' → logprob: -9.37955379486084
    8. '(

' → logprob: -10.37955379486084
    9. '<|end|>' → logprob: -10.87955379486084
    10. ' (' → logprob: -10.87955379486084

Token 9: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.19810597598552704
    2. '(' → logprob: -1.8231059312820435
    3. '(str' → logprob: -4.698105812072754
    4. '(input' → logprob: -5.073105812072754
    5. '(lambda' → logprob: -6.948105812072754
    6. 'int' → logprob: -7.323105812072754
    7. ')' → logprob: -8.323105812072754
    8. '```' → logprob: -8.323105812072754
    9. '(eval' → logprob: -8.823105812072754
    10. '(
' → logprob: -9.448105812072754

Token 10: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0033155500423163176
    2. '(' → logprob: -6.003315448760986
    3. ',input' → logprob: -8.253315925598145
    4. '))' → logprob: -8.378315925598145
    5. ')' → logprob: -8.628315925598145
    6. 'input' → logprob: -10.128315925598145
    7. '=input' → logprob: -10.253315925598145
    8. '(int' → logprob: -11.128315925598145
    9. '<input' → logprob: -11.253315925598145
    10. ',' → logprob: -11.628315925598145

Token 11: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.10027416795492172
    2. ' input' → logprob: -2.350274085998535
    3. '(input' → logprob: -9.725274085998535
    4. ',input' → logprob: -11.975274085998535
    5. ')' → logprob: -14.600274085998535
    6. '=input' → logprob: -14.850274085998535
    7. '<input' → logprob: -15.725274085998535
    8. '	input' → logprob: -15.725274085998535
    9. ' ' → logprob: -15.725274085998535
    10. '```' → logprob: -15.725274085998535

Token 12: '().' (ID: 1454)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.27297863364219666
    2. '()' → logprob: -1.772978663444519
    3. '())' → logprob: -3.0229785442352295
    4. '().' → logprob: -4.522978782653809
    5. '(' → logprob: -5.272978782653809
    6. '()));' → logprob: -6.022978782653809
    7. '))' → logprob: -7.522978782653809
    8. '())))' → logprob: -8.272978782653809
    9. '()>' → logprob: -8.397978782653809
    10. ')' → logprob: -8.522978782653809

Token 13: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0005719788023270667
    2. 'strip' → logprob: -7.500572204589844
    3. 'rstrip' → logprob: -11.000572204589844
    4. ' split' → logprob: -13.250572204589844
    5. '(split' → logprob: -14.875572204589844
    6. ')' → logprob: -16.375572204589844
    7. 'spl' → logprob: -17.375572204589844
    8. 'replace' → logprob: -18.875572204589844
    9. '```' → logprob: -19.125572204589844
    10. ' ' → logprob: -19.125572204589844

Token 14: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.5317336916923523
    2. '))' → logprob: -1.031733751296997
    3. ')' → logprob: -3.906733751296997
    4. '(' → logprob: -4.281733512878418
    5. '())' → logprob: -4.406733512878418
    6. '()' → logprob: -4.656733512878418
    7. ')))' → logprob: -8.781733512878418
    8. '('' → logprob: -9.531733512878418
    9. '())))' → logprob: -9.781733512878418
    10. ''))' → logprob: -10.031733512878418

Token 15: 'rev' (ID: 25656)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.9090546369552612
    2. 'A' → logprob: -1.5340546369552612
    3. 'for' → logprob: -2.534054756164551
    4. 'S' → logprob: -2.784054756164551
    5. 'sum' → logprob: -3.034054756164551
    6. 'count' → logprob: -3.409054756164551
    7. 'M' → logprob: -3.659054756164551
    8. 'max' → logprob: -3.909054756164551
    9. 'print' → logprob: -3.909054756164551
    10. 'result' → logprob: -4.159054756164551

Token 16: '_sum' (ID: 29859)
  Prédit: 'erse'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'erse' → logprob: -0.08630257844924927
    2. 'ers' → logprob: -3.5863025188446045
    3. '(' → logprob: -3.9613025188446045
    4. '(A' → logprob: -3.9613025188446045
    5. '()' → logprob: -4.211302757263184
    6. 'er' → logprob: -7.461302757263184
    7. 'A' → logprob: -7.586302757263184
    8. '_' → logprob: -7.961302757263184
    9. '_e' → logprob: -9.336302757263184
    10. 'ersion' → logprob: -9.586302757263184

Token 17: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.001557355048134923
    2. 's' → logprob: -7.501557350158691
    3. '_' → logprob: -7.626557350158691
    4. '()' → logprob: -8.376557350158691
    5. '[' → logprob: -10.251557350158691
    6. ' (' → logprob: -10.251557350158691
    7. '=' → logprob: -10.376557350158691
    8. '(A' → logprob: -10.376557350158691
    9. ')' → logprob: -10.626557350158691
    10. ' =' → logprob: -11.001557350158691

Token 18: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.013613780029118061
    2. ' ' → logprob: -4.513613700866699
    3. 'sum' → logprob: -6.263613700866699
    4. 'A' → logprob: -8.6386137008667
    5. '[' → logprob: -8.6386137008667
    6. ' sum' → logprob: -9.2636137008667
    7. ' A' → logprob: -9.5136137008667
    8. '[]' → logprob: -10.1386137008667
    9. '(' → logprob: -10.2636137008667
    10. '(sum' → logprob: -10.5136137008667

Token 19: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.10404136776924133
    2. 'sum' → logprob: -2.479041337966919
    3. '[' → logprob: -5.229041576385498
    4. 'A' → logprob: -5.354041576385498
    5. '[]' → logprob: -5.604041576385498
    6. '[A' → logprob: -6.979041576385498
    7. ' ' → logprob: -10.10404109954834
    8. '[::-' → logprob: -10.10404109954834
    9. '[len' → logprob: -10.47904109954834
    10. '[max' → logprob: -10.85404109954834

Token 20: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.109564408659935
    2. ' for' → logprob: -2.3595643043518066
    3. '
' → logprob: -4.984564304351807
    4. '<|end|>' → logprob: -7.109564304351807
    5. '\n' → logprob: -7.609564304351807
    6. '' → logprob: -7.734564304351807
    7. ' ' → logprob: -8.609564781188965
    8. ')' → logprob: -8.984564781188965
    9. '\' → logprob: -9.484564781188965
    10. '+' → logprob: -9.734564781188965

Token 21: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.00012976066500414163
    2. ' for' → logprob: -9.125129699707031
    3. '```' → logprob: -11.625129699707031
    4. '
' → logprob: -12.000129699707031
    5. '\n' → logprob: -12.875129699707031
    6. '\' → logprob: -14.250129699707031
    7. 'i' → logprob: -14.500129699707031
    8. '' → logprob: -15.000129699707031
    9. 'n' → logprob: -15.375129699707031
    10. 'r' → logprob: -15.625129699707031

Token 22: ' a' (ID: 261)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.01227652095258236
    2. ' ' → logprob: -4.887276649475098
    3. ' _' → logprob: -5.887276649475098
    4. '_' → logprob: -7.012276649475098
    5. 'i' → logprob: -7.137276649475098
    6. ' A' → logprob: -9.387276649475098
    7. '  ' → logprob: -9.887276649475098
    8. ' x' → logprob: -10.762276649475098
    9. ' ' → logprob: -10.887276649475098
    10. ' ‌' → logprob: -12.762276649475098

Token 23: '_part' (ID: 24053)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.228662371635437
    2. 'in' → logprob: -1.728662371635437
    3. ' ' → logprob: -3.8536624908447266
    4. 'n' → logprob: -5.353662490844727
    5. '  ' → logprob: -8.228662490844727
    6. ' n' → logprob: -8.603662490844727
    7. '_' → logprob: -8.728662490844727
    8. 'i' → logprob: -9.103662490844727
    9. ' i' → logprob: -9.728662490844727
    10. 's' → logprob: -10.103662490844727

Token 24: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.43035784363746643
    2. 'in' → logprob: -1.055357813835144
    3. 's' → logprob: -6.930357933044434
    4. ' ' → logprob: -8.055357933044434
    5. '_' → logprob: -9.305357933044434
    6. ',' → logprob: -9.555357933044434
    7. 'i' → logprob: -9.805357933044434
    8. '_in' → logprob: -10.180357933044434
    9. 'a' → logprob: -10.680357933044434
    10. 'n' → logprob: -10.930357933044434

Token 25: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.05490902438759804
    2. ' A' → logprob: -2.9299089908599854
    3. 'range' → logprob: -11.679908752441406
    4. ' range' → logprob: -12.554908752441406
    5. ' reversed' → logprob: -12.804908752441406
    6. ' ' → logprob: -13.054908752441406
    7. 'a' → logprob: -13.304908752441406
    8. 'rev' → logprob: -13.429908752441406
    9. '	A' → logprob: -13.554908752441406
    10. 're' → logprob: -13.804908752441406

Token 26: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.000784495088737458
    2. ':
' → logprob: -8.125784873962402
    3. '[' → logprob: -8.375784873962402
    4. '[::-' → logprob: -8.500784873962402
    5. '[:-' → logprob: -10.875784873962402
    6. '+' → logprob: -11.625784873962402
    7. '   ' → logprob: -11.875784873962402
    8. '[:' → logprob: -12.375784873962402
    9. ' :' → logprob: -12.500784873962402
    10. '[:]' → logprob: -12.750784873962402

Token 27: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3331420123577118
    2. '    ' → logprob: -2.958142042160034
    3. ' 
' → logprob: -2.958142042160034
    4. '    
' → logprob: -2.958142042160034
    5. 'a' → logprob: -3.458142042160034
    6. ' a' → logprob: -3.833142042160034
    7. ' if' → logprob: -3.958142042160034
    8. 'rev' → logprob: -4.083141803741455
    9. ' ' → logprob: -4.583141803741455
    10. ' rev' → logprob: -5.208141803741455

Token 28: ' if' (ID: 538)
  Prédit: ' rev'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' rev' → logprob: -0.2183302938938141
    2. 'rev' → logprob: -1.9683302640914917
    3. ' if' → logprob: -3.2183303833007812
    4. '   ' → logprob: -4.718330383300781
    5. '```' → logprob: -6.218330383300781
    6. ' a' → logprob: -6.343330383300781
    7. 'a' → logprob: -7.218330383300781
    8. '_rev' → logprob: -7.468330383300781
    9. 'if' (adapté à ' if') → logprob: -7.718330383300781
    10. ' for' → logprob: -7.968330383300781

Token 29: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.04344455897808075
    2. 'a' → logprob: -3.1684446334838867
    3. 'rev' → logprob: -8.293444633483887
    4. ' ' → logprob: -9.668444633483887
    5. ' rev' → logprob: -9.918444633483887
    6. '_a' → logprob: -10.668444633483887
    7. ' not' → logprob: -11.043444633483887
    8. '_rev' → logprob: -11.668444633483887
    9. '_' → logprob: -11.918444633483887
    10. ' isinstance' → logprob: -11.918444633483887

Token 30: '_part' (ID: 24053)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>' → logprob: -1.3117594718933105
    2. '_part' → logprob: -1.5617594718933105
    3. '_' → logprob: -1.6867594718933105
    4. '%' → logprob: -2.3117594718933105
    5. '==' → logprob: -2.5617594718933105
    6. ' >' → logprob: -3.1867594718933105
    7. '<' → logprob: -3.8117594718933105
    8. ' ==' → logprob: -4.1867594718933105
    9. ' ' → logprob: -4.1867594718933105
    10. ' <' → logprob: -4.3117594718933105

Token 31: ' !=' (ID: 1666)
  Prédit: ' %'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.9341516494750977
    2. ' >' → logprob: -1.4341516494750977
    3. '%' → logprob: -2.0591516494750977
    4. ' ==' → logprob: -2.5591516494750977
    5. ' <' → logprob: -2.6841516494750977
    6. '>' → logprob: -3.0591516494750977
    7. ' >=' → logprob: -3.9341516494750977
    8. '==' → logprob: -4.684151649475098
    9. ' ' → logprob: -5.184151649475098
    10. ' <=' → logprob: -5.309151649475098

Token 32: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1279987245798111
    2. '0' → logprob: -2.1279988288879395
    3. ' a' → logprob: -8.127998352050781
    4. '1' → logprob: -8.377998352050781
    5. 'a' → logprob: -8.627998352050781
    6. 'rev' → logprob: -9.127998352050781
    7. ' A' → logprob: -9.877998352050781
    8. ' -' → logprob: -10.002998352050781
    9. 'A' → logprob: -10.627998352050781
    10. '  ' → logprob: -10.752998352050781

Token 33: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0677906796336174
    2. ' ' → logprob: -2.8177907466888428
    3. 'a' → logprob: -5.942790508270264
    4. '1' → logprob: -6.817790508270264
    5. '-' → logprob: -7.317790508270264
    6. 'rev' → logprob: -7.317790508270264
    7. 'A' → logprob: -8.817790985107422
    8. ' a' → logprob: -9.442790985107422
    9. ' -' → logprob: -9.442790985107422
    10. '7' → logprob: -9.942790985107422

Token 34: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0003175889723934233
    2. ':
' → logprob: -8.750317573547363
    3. ' :' → logprob: -9.375317573547363
    4. ' and' → logprob: -9.625317573547363
    5. 'and' → logprob: -12.875317573547363
    6. '<|end|>' → logprob: -13.750317573547363
    7. '):' → logprob: -14.125317573547363
    8. '   ' → logprob: -14.375317573547363
    9. ':

' → logprob: -14.500317573547363
    10. ':return' → logprob: -14.750317573547363

Token 35: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0020022729877382517
    2. '   ' → logprob: -7.877002239227295
    3. 'rev' → logprob: -7.877002239227295
    4. '    ' → logprob: -8.002002716064453
    5. ' rev' → logprob: -8.502002716064453
    6. '<|end|>' → logprob: -9.252002716064453
    7. ' ' → logprob: -9.377002716064453
    8. '      ' → logprob: -9.752002716064453
    9. '        ' → logprob: -10.002002716064453
    10. '\n' → logprob: -10.127002716064453

Token 36: ' rev' (ID: 10808)
  Prédit: ' rev'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' rev' → logprob: -0.43319299817085266
    2. 'rev' (adapté à ' rev') → logprob: -1.0581929683685303
    3. '       ' → logprob: -6.933193206787109
    4. '_rev' → logprob: -7.308193206787109
    5. '           ' → logprob: -7.433193206787109
    6. ' ' → logprob: -7.683193206787109
    7. '   ' → logprob: -7.933193206787109
    8. '    ' → logprob: -8.18319320678711
    9. '        ' → logprob: -8.93319320678711
    10. '.rev' → logprob: -8.93319320678711

Token 37: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -8.709308167453855e-05
    2. '_' → logprob: -9.625086784362793
    3. '_s' → logprob: -11.250086784362793
    4. ' _' → logprob: -12.375086784362793
    5. 'sum' → logprob: -13.125086784362793
    6. '_rev' → logprob: -15.625086784362793
    7. '_add' → logprob: -15.875086784362793
    8. '   ' → logprob: -16.00008773803711
    9. '__' → logprob: -16.00008773803711
    10. '_val' → logprob: -16.12508773803711

Token 38: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.5766361355781555
    2. ' +=' → logprob: -0.8266361355781555
    3. '+' → logprob: -7.45163631439209
    4. '=' → logprob: -9.57663631439209
    5. ' -=' → logprob: -11.45163631439209
    6. ' +' → logprob: -11.95163631439209
    7. ']+=' → logprob: -12.32663631439209
    8. '   ' → logprob: -12.45163631439209
    9. ' =' → logprob: -12.45163631439209
    10. '+=(' → logprob: -12.57663631439209

Token 39: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.5559430122375488
    2. 'a' → logprob: -1.1809430122375488
    3. ' ' → logprob: -2.680943012237549
    4. ' a' → logprob: -3.055943012237549
    5. 'pow' → logprob: -6.930943012237549
    6. 'int' → logprob: -7.930943012237549
    7. 'rev' → logprob: -7.930943012237549
    8. '10' → logprob: -7.930943012237549
    9. '(' → logprob: -8.43094253540039
    10. 'abs' → logprob: -8.55594253540039

Token 40: '1' (ID: 16)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.6393139958381653
    2. '1' → logprob: -0.7643139958381653
    3. 'int' → logprob: -6.2643141746521
    4. 'pow' → logprob: -6.6393141746521
    5. '10' → logprob: -7.0143141746521
    6. ' ' → logprob: -7.7643141746521
    7. ' a' → logprob: -8.014313697814941
    8. '(' → logprob: -8.139313697814941
    9. '100' → logprob: -8.139313697814941
    10. 'abs' → logprob: -8.389313697814941

Token 41: ' /' (ID: 820)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 42: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.00038348292582668364
    2. ' a' → logprob: -7.875383377075195
    3. 'abs' → logprob: -14.125383377075195
    4. ' ' → logprob: -14.750383377075195
    5. 'int' → logprob: -15.000383377075195
    6. '   ' → logprob: -15.125383377075195
    7. '10' → logprob: -15.250383377075195
    8. 'float' → logprob: -15.375383377075195
    9. '  ' → logprob: -15.750383377075195
    10. '2' → logprob: -16.000383377075195

Token 43: '_part' (ID: 24053)
  Prédit: '_part'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_part' → logprob: -0.0007001649355515838
    2. 'part' → logprob: -8.000699996948242
    3. '_' → logprob: -9.000699996948242
    4. 'a' → logprob: -9.000699996948242
    5. '_parts' → logprob: -9.750699996948242
    6. '_p' → logprob: -11.125699996948242
    7. 'p' → logprob: -11.250699996948242
    8. '_PART' → logprob: -12.375699996948242
    9. 't' → logprob: -12.625699996948242
    10. '_sum' → logprob: -12.750699996948242

Token 44: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.005093103274703026
    2. ')' → logprob: -6.130093097686768
    3. '
' → logprob: -6.880093097686768
    4. ' print' → logprob: -7.130093097686768
    5. '<|end|>' → logprob: -7.630093097686768
    6. '#' → logprob: -9.130093574523926
    7. '*' → logprob: -9.255093574523926
    8. '\n' → logprob: -9.505093574523926
    9. '```' → logprob: -9.630093574523926
    10. '+' → logprob: -10.380093574523926

Token 45: 'if' (ID: 366)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.5407432317733765
    2. 'rev' → logprob: -1.7907432317733765
    3. 'r' → logprob: -2.165743350982666
    4. 'result' → logprob: -2.665743350982666
    5. '
' → logprob: -3.665743350982666
    6. 'if' → logprob: -4.290743350982666
    7. '1' → logprob: -5.040743350982666
    8. '0' → logprob: -5.790743350982666
    9. '\n' → logprob: -5.790743350982666
    10. '```' → logprob: -6.165743350982666

Token 46: ' rev' (ID: 10808)
  Prédit: ' rev'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' rev' → logprob: -0.02642442099750042
    2. 'rev' → logprob: -3.6514244079589844
    3. ' ' → logprob: -9.401424407958984
    4. ' ' → logprob: -10.651424407958984
    5. ' not' → logprob: -12.276424407958984
    6. '  ' → logprob: -12.276424407958984
    7. ' len' → logprob: -12.901424407958984
    8. '   ' → logprob: -14.026424407958984
    9. '0' → logprob: -14.026424407958984
    10. ' rep' → logprob: -14.151424407958984

Token 47: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -7.541112427134067e-05
    2. '_s' → logprob: -10.250075340270996
    3. '_' → logprob: -10.500075340270996
    4. ' _' → logprob: -11.625075340270996
    5. '>' → logprob: -14.250075340270996
    6. 'sum' → logprob: -14.875075340270996
    7. 's' → logprob: -15.125075340270996
    8. '_split' → logprob: -15.500075340270996
    9. '\' → logprob: -16.000076293945312
    10. '_SUM' → logprob: -16.125076293945312

Token 48: ' !=' (ID: 1666)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.8840869665145874
    2. '==' → logprob: -1.2590869665145874
    3. ' >' → logprob: -1.8840869665145874
    4. '>' → logprob: -2.259087085723877
    5. ' !=' → logprob: -3.509087085723877
    6. '!=' → logprob: -4.134087085723877
    7. '=' → logprob: -8.509086608886719
    8. '>=' → logprob: -9.134086608886719
    9. ' >=' → logprob: -9.759086608886719
    10. '">' → logprob: -10.259086608886719

Token 49: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.054925501346588135
    2. '0' → logprob: -2.9299254417419434
    3. ' ' → logprob: -10.054925918579102
    4. '  ' → logprob: -16.4299259185791
    5. '```' → logprob: -17.1174259185791
    6. '​' → logprob: -17.6174259185791
    7. '   ' → logprob: -17.9299259185791
    8. '1' → logprob: -18.2424259185791
    9. ' ' → logprob: -18.3674259185791
    10. '	' → logprob: -18.5549259185791

Token 50: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.029752222821116447
    2. ' ' → logprob: -3.529752254486084
    3. ' ' → logprob: -13.779751777648926
    4. '   ' → logprob: -15.279751777648926
    5. '```' → logprob: -16.529752731323242
    6. '  ' → logprob: -16.654752731323242
    7. '=' → logprob: -17.217252731323242
    8. '​' → logprob: -17.404752731323242
    9. '０' → logprob: -17.592252731323242
    10. ' ' → logprob: -17.717252731323242

Token 51: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00013917774776928127
    2. ':
' → logprob: -9.000139236450195
    3. ' :' → logprob: -11.125139236450195
    4. ':

' → logprob: -14.625139236450195
    5. '):' → logprob: -16.000139236450195
    6. ':
' → logprob: -16.000139236450195
    7. ':return' → logprob: -16.125139236450195
    8. ':**' → logprob: -17.000139236450195
    9. ':\' → logprob: -17.250139236450195
    10. ' :
' → logprob: -17.500139236450195

Token 52: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.008493427187204361
    2. ' print' → logprob: -5.383493423461914
    3. 'print' → logprob: -5.633493423461914
    4. '       ' → logprob: -9.633493423461914
    5. '```' → logprob: -9.633493423461914
    6. ':' → logprob: -9.883493423461914
    7. '	print' → logprob: -10.008493423461914
    8. ' ' → logprob: -10.758493423461914
    9. '<|end|>' → logprob: -11.258493423461914
    10. '    
' → logprob: -12.133493423461914

Token 53: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.09578689932823181
    2. ' print' → logprob: -2.4707868099212646
    3. '   ' → logprob: -5.470787048339844
    4. '```' → logprob: -5.970787048339844
    5. '	print' → logprob: -10.845787048339844
    6. '       ' → logprob: -11.095787048339844
    7. '``' → logprob: -11.970787048339844
    8. 'result' → logprob: -12.470787048339844
    9. ' ' → logprob: -12.595787048339844
    10. '<|end|>' → logprob: -12.720787048339844

Token 54: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.014794321730732918
    2. '(round' → logprob: -4.51479434967041
    3. '(int' → logprob: -6.51479434967041
    4. '1' → logprob: -6.88979434967041
    5. '(f' → logprob: -7.76479434967041
    6. '("' → logprob: -8.38979434967041
    7. ' (' → logprob: -8.76479434967041
    8. '((' → logprob: -9.13979434967041
    9. '('' → logprob: -9.38979434967041
    10. '()' → logprob: -9.63979434967041

Token 55: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.012087751179933548
    2. 'round' → logprob: -4.762087821960449
    3. ' ' → logprob: -6.262087821960449
    4. '(' → logprob: -7.762087821960449
    5. 'int' → logprob: -8.13708782196045
    6. ')' → logprob: -8.26208782196045
    7. '{' → logprob: -8.76208782196045
    8. ' round' → logprob: -9.26208782196045
    9. '   ' → logprob: -9.38708782196045
    10. '"{' → logprob: -9.51208782196045

Token 56: ' /' (ID: 820)
  Prédit: '/'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '/' → logprob: -0.021136987954378128
    2. ' /' → logprob: -3.896136999130249
    3. ')' → logprob: -7.52113676071167
    4. '/)' → logprob: -10.021137237548828
    5. ' ' → logprob: -13.021137237548828
    6. '   ' → logprob: -13.146137237548828
    7. ' )' → logprob: -14.021137237548828
    8. ' ' → logprob: -14.521137237548828
    9. '"' → logprob: -14.771137237548828
    10. '0' → logprob: -14.771137237548828

Token 57: ' rev' (ID: 10808)
  Prédit: 'rev'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'rev' → logprob: -5.836499985889532e-05
    2. ' rev' → logprob: -9.7500581741333
    3. '_rev' → logprob: -18.750059127807617
    4. 'rep' → logprob: -20.125059127807617
    5. '.rev' → logprob: -20.375059127807617
    6. ' ' → logprob: -21.750059127807617
    7. 'revet' → logprob: -21.750059127807617
    8. '```' → logprob: -21.750059127807617
    9. '   ' → logprob: -21.875059127807617
    10. 'rv' → logprob: -21.875059127807617

Token 58: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -4.961759259458631e-06
    2. 'sum' → logprob: -13.000004768371582
    3. '_s' → logprob: -13.375004768371582
    4. '_' → logprob: -13.750004768371582
    5. ' _' → logprob: -18.0000057220459
    6. '_SUM' → logprob: -18.2500057220459
    7. 's' → logprob: -19.2500057220459
    8. '_sym' → logprob: -19.3750057220459
    9. '_

' → logprob: -19.6250057220459
    10. ' sum' → logprob: -19.7500057220459

Token 59: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.1008713702030946e-06
    2. '))' → logprob: -14.000001907348633
    3. ' )' → logprob: -14.125001907348633
    4. ')
' → logprob: -15.000001907348633
    5. ')`' → logprob: -16.250001907348633
    6. '`)' → logprob: -16.750001907348633
    7. '）' → logprob: -17.375001907348633
    8. '')' → logprob: -17.500001907348633
    9. ')}' → logprob: -18.250001907348633
    10. '")' → logprob: -18.750001907348633

Token 60: 'else' (ID: 2807)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 61: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0012221322394907475
    2. ':
' → logprob: -6.751222133636475
    3. ' :' → logprob: -10.251221656799316
    4. '   ' → logprob: -11.251221656799316
    5. ' :
' → logprob: -13.501221656799316
    6. '):' → logprob: -14.376221656799316
    7. '    ' → logprob: -14.751221656799316
    8. ':
' → logprob: -15.626221656799316
    9. '```' → logprob: -15.876221656799316
    10. '():' → logprob: -16.251222610473633

Token 62: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01799786649644375
    2. '0' → logprob: -4.517997741699219
    3. 'print' → logprob: -5.142997741699219
    4. '    
' → logprob: -7.892997741699219
    5. ' print' → logprob: -8.267997741699219
    6. ' ' → logprob: -8.517997741699219
    7. '       ' → logprob: -9.267997741699219
    8. '    ' → logprob: -9.892997741699219
    9. '  ' → logprob: -10.642997741699219
    10. ' 
' → logprob: -10.642997741699219

Token 63: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.005441262852400541
    2. ' print' → logprob: -5.755441188812256
    3. '   ' → logprob: -6.130441188812256
    4. '0' → logprob: -9.505441665649414
    5. ' ' → logprob: -12.505441665649414
    6. '```' → logprob: -12.630441665649414
    7. 'pass' → logprob: -13.255441665649414
    8. '  ' → logprob: -14.630441665649414
    9. '    ' → logprob: -14.880441665649414
    10. '    
' → logprob: -15.255441665649414

Token 64: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0028252042829990387
    2. '0' → logprob: -6.3778252601623535
    3. '()' → logprob: -7.0028252601623535
    4. '("' → logprob: -9.002824783325195
    5. '(None' → logprob: -10.002824783325195
    6. '('' → logprob: -10.877824783325195
    7. '(-' → logprob: -10.877824783325195
    8. ' (' → logprob: -13.877824783325195
    9. '(
' → logprob: -13.877824783325195
    10. '("")' → logprob: -14.127824783325195

Token 65: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0013319060672074556
    2. '"' → logprob: -6.751331806182861
    3. ')' → logprob: -9.12633228302002
    4. ''' → logprob: -10.62633228302002
    5. ' ' → logprob: -11.25133228302002
    6. '")' → logprob: -12.25133228302002
    7. '(' → logprob: -12.75133228302002
    8. '-' → logprob: -13.62633228302002
    9. 'a' → logprob: -13.75133228302002
    10. '   ' → logprob: -13.75133228302002

Token 66: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.704273118884885e-07
    2. ')
' → logprob: -15.375000953674316
    3. '`)' → logprob: -15.750000953674316
    4. ' )' → logprob: -16.125
    5. '))' → logprob: -16.5
    6. '')' → logprob: -17.75
    7. '）' → logprob: -17.875
    8. '")' → logprob: -18.25
    9. '())' → logprob: -18.25
    10. '()' → logprob: -18.375


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 64
Tokens correctement prédits (1ère position, stricte): 26
Tokens correctement prédits (1ère position, avec adaptation): 28
Tokens correctement prédits (top 10): 53
Précision stricte (1ère position): 40.62%
Précision adaptée (1ère position): 43.75%
Précision (top 10): 82.81%
================================================================================
