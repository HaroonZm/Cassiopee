================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:28:34
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def fun(n):
    if n == 1:
        return 1
    else:
        return 1 + 2 * fun(n // 2)
n = int(input())
print(fun(n))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' fun' (ID: 2827)
  → Token d'amorce (pas de prédiction)

Token 2: '(n' (ID: 2406)
  → Token d'amorce (pas de prédiction)

Token 3: '):
' (ID: 1883)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.2016831785440445
    2. '):' → logprob: -1.7016831636428833
    3. 'a' → logprob: -10.076683044433594
    4. '(' → logprob: -10.201683044433594
    5. '[' → logprob: -10.201683044433594
    6. ')n' → logprob: -10.701683044433594
    7. ':' → logprob: -11.201683044433594
    8. '```' → logprob: -11.326683044433594
    9. ')>' → logprob: -11.451683044433594
    10. ')：' → logprob: -11.576683044433594

Token 4: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.527282178401947
    2. '\' → logprob: -1.2772822380065918
    3. '\n' → logprob: -2.777282238006592
    4. ':' → logprob: -3.902282238006592
    5. '```' → logprob: -4.152282238006592
    6. '    ' → logprob: -4.777282238006592
    7. '    
' → logprob: -5.277282238006592
    8. ''' → logprob: -5.402282238006592
    9. ''\' → logprob: -5.652282238006592
    10. ' return' → logprob: -6.152282238006592

Token 5: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4649010896682739
    2. ' ' → logprob: -1.214901089668274
    3. '    ' → logprob: -3.9649009704589844
    4. ' if' → logprob: -4.089900970458984
    5. 'return' → logprob: -4.839900970458984
    6. ' return' → logprob: -5.089900970458984
    7. '\' → logprob: -5.464900970458984
    8. 'if' (adapté à ' if') → logprob: -5.714900970458984
    9. '_' → logprob: -5.839900970458984
    10. ''' → logprob: -6.214900970458984

Token 6: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.0015941266901791096
    2. 'n' → logprob: -6.751594066619873
    3. ' ' → logprob: -8.001594543457031
    4. ' not' → logprob: -9.376594543457031
    5. '(n' → logprob: -13.751594543457031
    6. '	n' → logprob: -14.251594543457031
    7. ' ' → logprob: -14.376594543457031
    8. 'not' → logprob: -14.376594543457031
    9. '  ' → logprob: -15.251594543457031
    10. ' н' → logprob: -16.00159454345703

Token 7: ' ==' (ID: 951)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.3726870119571686
    2. ' ==' → logprob: -1.7476869821548462
    3. ' <=' → logprob: -2.6226871013641357
    4. ' ' → logprob: -3.6226871013641357
    5. ' <' → logprob: -4.247686862945557
    6. '>' → logprob: -4.747686862945557
    7. ' %' → logprob: -4.997686862945557
    8. '==' → logprob: -5.497686862945557
    9. ' >=' → logprob: -6.497686862945557
    10. '%' → logprob: -7.122686862945557

Token 8: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3868785798549652
    2. '0' → logprob: -1.1368786096572876
    3. '1' → logprob: -12.136878967285156
    4. ' None' → logprob: -13.636878967285156
    5. ' ' → logprob: -14.886878967285156
    6. 'None' → logprob: -15.136878967285156
    7. '=' → logprob: -16.011878967285156
    8. '  ' → logprob: -17.136878967285156
    9. '   ' → logprob: -17.136878967285156
    10. '2' → logprob: -17.261878967285156

Token 9: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -2.1888679839321412e-05
    2. ' ' → logprob: -11.375021934509277
    3. '1' → logprob: -11.500021934509277
    4. '42' → logprob: -16.50002098083496
    5. 'None' → logprob: -16.62502098083496
    6. '10' → logprob: -18.00002098083496
    7. '5' → logprob: -18.62502098083496
    8. '```' → logprob: -19.00002098083496
    9. '2' → logprob: -19.12502098083496
    10. ''' → logprob: -19.37502098083496

Token 10: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00015062130114529282
    2. ':
' → logprob: -9.000150680541992
    3. ':return' → logprob: -10.750150680541992
    4. '):' → logprob: -12.625150680541992
    5. '':' → logprob: -14.500150680541992
    6. '():' → logprob: -14.875150680541992
    7. ':**' → logprob: -15.000150680541992
    8. ':\' → logprob: -15.250150680541992
    9. ' :' → logprob: -15.625150680541992
    10. '```' → logprob: -16.000150680541992

Token 11: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.08730733394622803
    2. '\n' → logprob: -2.5873074531555176
    3. ' return' → logprob: -5.337307453155518
    4. '\' → logprob: -6.212307453155518
    5. 'return' → logprob: -7.212307453155518
    6. '   ' → logprob: -8.71230697631836
    7. '\r' → logprob: -9.08730697631836
    8. '    ' → logprob: -9.08730697631836
    9. '<|end|>' → logprob: -9.46230697631836
    10. ' \' → logprob: -9.83730697631836

Token 12: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.2759402394294739
    2. ' return' → logprob: -1.525940179824829
    3. '       ' → logprob: -3.775940179824829
    4. '   ' → logprob: -7.900940418243408
    5. '           ' → logprob: -8.27593994140625
    6. '\' → logprob: -10.15093994140625
    7. ' ' → logprob: -10.52593994140625
    8. '```' → logprob: -10.52593994140625
    9. ':return' → logprob: -10.77593994140625
    10. '\n' → logprob: -11.40093994140625

Token 13: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.20956118404865265
    2. '1' → logprob: -2.0845611095428467
    3. ' True' → logprob: -3.4595611095428467
    4. ' None' → logprob: -3.8345611095428467
    5. ' n' → logprob: -4.709561347961426
    6. 'n' → logprob: -6.584561347961426
    7. 'None' → logprob: -7.584561347961426
    8. '0' → logprob: -8.209561347961426
    9. 'True' → logprob: -8.209561347961426
    10. '   ' → logprob: -9.459561347961426

Token 14: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0011329513508826494
    2. 'n' → logprob: -6.876132965087891
    3. ' ' → logprob: -9.62613296508789
    4. 'True' → logprob: -10.62613296508789
    5. '0' → logprob: -12.37613296508789
    6. ' n' → logprob: -12.75113296508789
    7. ' True' → logprob: -13.50113296508789
    8. '   ' → logprob: -14.00113296508789
    9. 'None' → logprob: -14.87613296508789
    10. '  ' → logprob: -16.75113296508789

Token 15: '
' (ID: 198)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.030298227444291115
    2. '
' → logprob: -4.530298233032227
    3. '   ' → logprob: -4.530298233032227
    4. '    
' → logprob: -5.655298233032227
    5. '\' → logprob: -6.155298233032227
    6. '  
' → logprob: -6.780298233032227
    7. ' 
' → logprob: -7.780298233032227
    8. '   
' → logprob: -8.405298233032227
    9. '```' → logprob: -8.655298233032227
    10. '\r' → logprob: -8.905298233032227

Token 16: '   ' (ID: 271)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.26609155535697937
    2. '   ' → logprob: -1.8910915851593018
    3. '    
' → logprob: -2.8910915851593018
    4. '
' → logprob: -4.391091346740723
    5. '```' → logprob: -5.266091346740723
    6. '  
' → logprob: -5.516091346740723
    7. '\' → logprob: -6.141091346740723
    8. ''\' → logprob: -7.141091346740723
    9. '   
' → logprob: -7.391091346740723
    10. ' 
' → logprob: -8.141091346740723

Token 17: ' else' (ID: 1203)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9049983620643616
    2. '\n' → logprob: -0.9049983620643616
    3. '\' → logprob: -2.279998302459717
    4. '    
' → logprob: -2.904998302459717
    5. '```' → logprob: -4.529998302459717
    6. ' 
' → logprob: -5.279998302459717
    7. '  
' → logprob: -5.529998302459717
    8. '   
' → logprob: -6.029998302459717
    9. '    ' → logprob: -6.404998302459717
    10. '`' → logprob: -6.404998302459717

Token 18: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.030570900067687035
    2. '       ' → logprob: -3.7805709838867188
    3. '   ' → logprob: -5.530570983886719
    4. '    ' → logprob: -6.655570983886719
    5. ':
' → logprob: -7.280570983886719
    6. ':return' → logprob: -7.530570983886719
    7. ' return' → logprob: -8.655570983886719
    8. '     ' → logprob: -9.030570983886719
    9. '      ' → logprob: -9.530570983886719
    10. '        ' → logprob: -9.780570983886719

Token 19: '       ' (ID: 309)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.1098218709230423
    2. '    ' → logprob: -3.4848217964172363
    3. 'n' → logprob: -3.8598217964172363
    4. '   ' → logprob: -3.9848217964172363
    5. ' ' → logprob: -4.234821796417236
    6. ' 
' → logprob: -4.484821796417236
    7. '     
' → logprob: -6.234821796417236
    8. ' return' → logprob: -6.359821796417236
    9. ' ' → logprob: -6.609821796417236
    10. '       ' → logprob: -7.734821796417236

Token 20: ' return' (ID: 622)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.6169777512550354
    2. 'n' → logprob: -1.6169776916503906
    3. ' return' → logprob: -1.8669776916503906
    4. 'return' (adapté à ' return') → logprob: -2.2419776916503906
    5. '   ' → logprob: -7.491977691650391
    6. '       ' → logprob: -8.99197769165039
    7. ' ' → logprob: -9.11697769165039
    8. '    ' → logprob: -9.36697769165039
    9. '1' → logprob: -10.24197769165039
    10. '0' → logprob: -10.24197769165039

Token 21: ' ' (ID: 220)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.05330301821231842
    2. 'n' → logprob: -3.4283030033111572
    3. ' fun' → logprob: -4.053303241729736
    4. 'fun' → logprob: -6.178303241729736
    5. ' ' → logprob: -10.928302764892578
    6. ' ' → logprob: -12.553302764892578
    7. '(n' → logprob: -13.803302764892578
    8. '(fun' → logprob: -14.428302764892578
    9. '_fun' → logprob: -14.553302764892578
    10. ' func' → logprob: -14.928302764892578

Token 22: '1' (ID: 16)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.1246626004576683
    2. 'fun' → logprob: -2.3746626377105713
    3. ' n' → logprob: -3.7496626377105713
    4. ' fun' → logprob: -7.374662399291992
    5. ''n' → logprob: -13.499662399291992
    6. '(fun' → logprob: -13.999662399291992
    7. ' ' → logprob: -14.249662399291992
    8. '	n' → logprob: -14.249662399291992
    9. '   ' → logprob: -14.749662399291992
    10. '(n' → logprob: -14.749662399291992

Token 23: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.10454238951206207
    2. ' +' → logprob: -2.3545424938201904
    3. '*' → logprob: -5.979542255401611
    4. '0' → logprob: -7.479542255401611
    5. ' *' → logprob: -7.604542255401611
    6. '-' → logprob: -7.729542255401611
    7. ' ' → logprob: -8.60454273223877
    8. '+n' → logprob: -10.22954273223877
    9. '_' → logprob: -10.72954273223877
    10. ',' → logprob: -11.85454273223877

Token 24: ' ' (ID: 220)
  Prédit: 'fun'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'fun' → logprob: -0.16022463142871857
    2. ' fun' → logprob: -1.9102246761322021
    3. 'func' → logprob: -15.910224914550781
    4. '(fun' → logprob: -16.03522491455078
    5. '_fun' → logprob: -16.28522491455078
    6. 'f' → logprob: -17.03522491455078
    7. ' func' → logprob: -18.41022491455078
    8. 'def' → logprob: -18.53522491455078
    9. '.fun' → logprob: -18.91022491455078
    10. '```' → logprob: -18.91022491455078

Token 25: '2' (ID: 17)
  Prédit: 'fun'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'fun' → logprob: -1.1472419600977446e-06
    2. ' fun' → logprob: -13.750000953674316
    3. 'func' → logprob: -20.875001907348633
    4. '(fun' → logprob: -20.875001907348633
    5. '```' → logprob: -22.625001907348633
    6. '_fun' → logprob: -22.750001907348633
    7. 'fn' → logprob: -23.875001907348633
    8. 'Fun' → logprob: -23.875001907348633
    9. 'f' → logprob: -24.375001907348633
    10. 'def' → logprob: -24.500001907348633

Token 26: ' *' (ID: 425)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.715336263179779
    2. ' *' → logprob: -0.715336263179779
    3. '*n' → logprob: -3.840336322784424
    4. '**' → logprob: -8.715335845947266
    5. ' **' → logprob: -9.215335845947266
    6. '(n' → logprob: -9.590335845947266
    7. '*(' → logprob: -9.715335845947266
    8. ' ' → logprob: -10.590335845947266
    9. 'n' → logprob: -11.965335845947266
    10. '0' → logprob: -12.215335845947266

Token 27: ' fun' (ID: 2827)
  Prédit: 'fun'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'fun' → logprob: -0.008626751601696014
    2. ' fun' → logprob: -4.758626937866211
    3. 'n' → logprob: -11.508626937866211
    4. '(fun' → logprob: -13.383626937866211
    5. ' n' → logprob: -15.633626937866211
    6. 'func' → logprob: -15.758626937866211
    7. 'f' → logprob: -16.63362693786621
    8. 'Fun' → logprob: -16.75862693786621
    9. '_fun' → logprob: -17.00862693786621
    10. ' ' → logprob: -17.63362693786621

Token 28: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.06197004392743111
    2. '(' → logprob: -2.8119699954986572
    3. ' (' → logprob: -13.936969757080078
    4. '(
' → logprob: -14.686969757080078
    5. '((' → logprob: -15.311969757080078
    6. '("("' → logprob: -15.561969757080078
    7. '```' → logprob: -15.811969757080078
    8. '(

' → logprob: -16.436969757080078
    9. '('' → logprob: -16.936969757080078
    10. '(s' → logprob: -17.436969757080078

Token 29: ' //' (ID: 602)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '-' → logprob: -0.10373401641845703
    2. '(' → logprob: -2.478734016418457
    3. '(n' → logprob: -4.478734016418457
    4. ' -' → logprob: -5.853734016418457
    5. '(-' → logprob: -8.103734016418457
    6. ')' → logprob: -9.228734016418457
    7. ' (' → logprob: -10.103734016418457
    8. '-)' → logprob: -11.603734016418457
    9. '(
' → logprob: -12.228734016418457
    10. '()-' → logprob: -13.103734016418457

Token 30: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0006266565760597587
    2. ' ' → logprob: -7.375626564025879
    3. '3' → logprob: -16.250627517700195
    4. '```' → logprob: -17.375627517700195
    5. '1' → logprob: -18.875627517700195
    6. ')' → logprob: -19.250627517700195
    7. '۲' → logprob: -20.000627517700195
    8. '6' → logprob: -20.125627517700195
    9. '   ' → logprob: -20.250627517700195
    10. '  ' → logprob: -20.250627517700195

Token 31: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -5.7530574849806726e-05
    2. ' ' → logprob: -10.000057220458984
    3. '3' → logprob: -11.375057220458984
    4. '```' → logprob: -15.250057220458984
    5. '4' → logprob: -15.625057220458984
    6. '1' → logprob: -16.500057220458984
    7. '10' → logprob: -17.250057220458984
    8. '   ' → logprob: -17.375057220458984
    9. '5' → logprob: -17.500057220458984
    10. '6' → logprob: -17.875057220458984

Token 32: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.650518920039758e-06
    2. ' )' → logprob: -13.500003814697266
    3. '))' → logprob: -13.875003814697266
    4. ')`' → logprob: -14.375003814697266
    5. '`)' → logprob: -15.375003814697266
    6. ')
' → logprob: -15.875003814697266
    7. ')))' → logprob: -16.375003814697266
    8. '(' → logprob: -16.625003814697266
    9. '')' → logprob: -16.750003814697266
    10. '   ' → logprob: -17.375003814697266

Token 33: 'n' (ID: 77)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.8005866408348083
    2. '<|end|>' → logprob: -1.1755867004394531
    3. ')' → logprob: -2.300586700439453
    4. '
' → logprob: -2.425586700439453
    5. '\n' → logprob: -3.925586700439453
    6. '\' → logprob: -4.550586700439453
    7. '```' → logprob: -4.925586700439453
    8. '(
' → logprob: -6.050586700439453
    9. ' ' → logprob: -6.175586700439453
    10. '*' → logprob: -6.175586700439453

Token 34: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.09640835225582123
    2. '%' → logprob: -3.3464083671569824
    3. ')' → logprob: -3.7214083671569824
    4. '<|end|>' → logprob: -4.096408367156982
    5. ' ' → logprob: -5.096408367156982
    6. '[' → logprob: -5.221408367156982
    7. ' %' → logprob: -7.346408367156982
    8. '+' → logprob: -7.596408367156982
    9. '(n' → logprob: -7.596408367156982
    10. '#' → logprob: -7.971408367156982

Token 35: ' int' (ID: 677)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.6435824036598206
    2. ' ' → logprob: -0.7685824036598206
    3. '16' → logprob: -5.518582344055176
    4. '5' → logprob: -6.393582344055176
    5. ' int' → logprob: -6.393582344055176
    6. '8' → logprob: -6.393582344055176
    7. '4' → logprob: -7.018582344055176
    8. 'int' → logprob: -7.393582344055176
    9. '1' → logprob: -8.268582344055176
    10. '2' → logprob: -10.143582344055176

Token 36: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0001439459010725841
    2. '(input' → logprob: -9.750144004821777
    3. '('' → logprob: -10.125144004821777
    4. ' (' → logprob: -10.500144004821777
    5. '(n' → logprob: -11.750144004821777
    6. '(
' → logprob: -13.000144004821777
    7. '<|end|>' → logprob: -13.625144004821777
    8. '(

' → logprob: -14.250144004821777
    9. 'input' → logprob: -14.250144004821777
    10. '("' → logprob: -14.375144004821777

Token 37: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03231536224484444
    2. '()' → logprob: -4.282315254211426
    3. '('' → logprob: -4.407315254211426
    4. '("("' → logprob: -5.782315254211426
    5. '())' → logprob: -6.657315254211426
    6. '(()' → logprob: -7.157315254211426
    7. ')' → logprob: -8.657315254211426
    8. '(""))' → logprob: -8.782315254211426
    9. '("")' → logprob: -9.657315254211426
    10. '(`' → logprob: -10.032315254211426

Token 38: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.008745405822992325
    2. 'fun' → logprob: -4.758745193481445
    3. '\n' → logprob: -10.258745193481445
    4. '(fun' → logprob: -10.758745193481445
    5. '
' → logprob: -11.383745193481445
    6. ' fun' → logprob: -11.758745193481445
    7. ')' → logprob: -12.008745193481445
    8. 'f' → logprob: -12.008745193481445
    9. ' print' → logprob: -12.133745193481445
    10. 'result' → logprob: -12.133745193481445

Token 39: '(fun' (ID: 177968)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1271846890449524
    2. '(fun' → logprob: -2.1271846294403076
    3. '(f' → logprob: -8.502184867858887
    4. '(func' → logprob: -10.377184867858887
    5. '(n' → logprob: -10.877184867858887
    6. '(fn' → logprob: -14.002184867858887
    7. '((' → logprob: -14.252184867858887
    8. '('' → logprob: -14.877184867858887
    9. '(`' → logprob: -15.127184867858887
    10. '(function' → logprob: -15.252184867858887

Token 40: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.38694193959236145
    2. '(' → logprob: -1.136941909790039
    3. ')' → logprob: -9.636941909790039
    4. '(
' → logprob: -12.761941909790039
    5. ' (' → logprob: -14.011941909790039
    6. ')n' → logprob: -14.761941909790039
    7. '(

' → logprob: -15.136941909790039
    8. '))' → logprob: -15.136941909790039
    9. '((' → logprob: -15.386941909790039
    10. '(`' → logprob: -15.636941909790039

Token 41: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.004089678172022104
    2. ')' → logprob: -5.504089832305908
    3. ')))' → logprob: -11.62908935546875
    4. ' ))' → logprob: -13.75408935546875
    5. '))
' → logprob: -14.25408935546875
    6. '()))' → logprob: -14.87908935546875
    7. ''))' → logprob: -15.75408935546875
    8. '"))' → logprob: -16.87908935546875
    9. ' )' → logprob: -17.00408935546875
    10. ')
' → logprob: -17.62908935546875


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 39
Tokens correctement prédits (1ère position, stricte): 11
Tokens correctement prédits (1ère position, avec adaptation): 12
Tokens correctement prédits (top 10): 30
Précision stricte (1ère position): 28.21%
Précision adaptée (1ère position): 30.77%
Précision (top 10): 76.92%
================================================================================
