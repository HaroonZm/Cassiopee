================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:00:49
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
input_n, input_k = map(int, input().split())
result_total = 0.0
for loop_i in range(1, input_n + 1):
    multiplier_t = 1
    while loop_i * multiplier_t < input_k:
        multiplier_t *= 2
    result_total += 1.0 / multiplier_t
average_result = result_total / input_n
print(average_result)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'input' (ID: 2586)
  → Token d'amorce (pas de prédiction)

Token 1: '_n' (ID: 2170)
  → Token d'amorce (pas de prédiction)

Token 2: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 3: ' input' (ID: 3422)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.3344864249229431
    2. 'output' → logprob: -1.834486484527588
    3. '_' → logprob: -3.209486484527588
    4. ' ' → logprob: -3.709486484527588
    5. 'input' → logprob: -4.584486484527588
    6. ' =' → logprob: -4.584486484527588
    7. ')' → logprob: -4.834486484527588
    8. 'space' → logprob: -5.584486484527588
    9. '.' → logprob: -5.709486484527588
    10. ',' → logprob: -5.709486484527588

Token 4: '_k' (ID: 11637)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5916396975517273
    2. '.' → logprob: -1.341639757156372
    3. '[' → logprob: -2.591639757156372
    4. ' =' → logprob: -2.966639757156372
    5. '_' → logprob: -3.216639757156372
    6. ',' → logprob: -4.341639518737793
    7. ')' → logprob: -5.966639518737793
    8. '(' → logprob: -6.591639518737793
    9. '```' → logprob: -7.716639518737793
    10. ':' → logprob: -7.841639518737793

Token 5: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.018887057900428772
    2. ' =' → logprob: -4.393887042999268
    3. ',' → logprob: -6.143887042999268
    4. '_' → logprob: -6.643887042999268
    5. '+' → logprob: -6.768887042999268
    6. '*' → logprob: -7.893887042999268
    7. ')' → logprob: -8.393887519836426
    8. '.' → logprob: -8.393887519836426
    9. ':' → logprob: -8.518887519836426
    10. '[' → logprob: -8.518887519836426

Token 6: ' map' (ID: 4014)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.9950357675552368
    2. ' map' → logprob: -1.3700357675552368
    3. 'map' → logprob: -1.3700357675552368
    4. ' input' → logprob: -2.1200356483459473
    5. '0' → logprob: -7.120035648345947
    6. ' ' → logprob: -7.370035648345947
    7. 'int' → logprob: -8.995036125183105
    8. ' list' → logprob: -8.995036125183105
    9. 'list' → logprob: -9.120036125183105
    10. ' int' → logprob: -9.245036125183105

Token 7: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.09583780169487
    2. '<|end|>' → logprob: -2.4708378314971924
    3. '(lambda' → logprob: -5.970837593078613
    4. '```' → logprob: -6.470837593078613
    5. '<|end|>' → logprob: -6.720837593078613
    6. ')' → logprob: -7.720837593078613
    7. '[' → logprob: -8.220837593078613
    8. '(int' → logprob: -8.720837593078613
    9. '(input' → logprob: -9.345837593078613
    10. 'user' → logprob: -9.720837593078613

Token 8: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.03400169312953949
    2. ')' → logprob: -3.784001588821411
    3. 'input' → logprob: -5.15900182723999
    4. '(' → logprob: -5.40900182723999
    5. ' input' → logprob: -9.034001350402832
    6. '```' → logprob: -9.409001350402832
    7. '[input' → logprob: -9.659001350402832
    8. '<input' → logprob: -9.909001350402832
    9. ',input' → logprob: -10.034001350402832
    10. '=input' → logprob: -10.659001350402832

Token 9: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.6931689381599426
    2. ' input' → logprob: -0.6931689381599426
    3. ')' → logprob: -11.318168640136719
    4. '(input' → logprob: -11.693168640136719
    5. ',input' → logprob: -14.443168640136719
    6. '<input' → logprob: -15.693168640136719
    7. '=input' → logprob: -15.818168640136719
    8. ' )' → logprob: -15.943168640136719
    9. '```' → logprob: -15.943168640136719
    10. '	input' → logprob: -16.94316864013672

Token 10: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.43568533658981323
    2. '()' → logprob: -1.435685396194458
    3. '(' → logprob: -2.685685396194458
    4. ')' → logprob: -3.435685396194458
    5. '().' → logprob: -5.060685157775879
    6. '(()' → logprob: -5.810685157775879
    7. '`()' → logprob: -6.810685157775879
    8. '('' → logprob: -7.060685157775879
    9. '```' → logprob: -7.685685157775879
    10. '();)' → logprob: -7.810685157775879

Token 11: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0007210109033621848
    2. 'strip' → logprob: -7.250720977783203
    3. 'rstrip' → logprob: -11.625720977783203
    4. ' split' → logprob: -13.375720977783203
    5. 'spl' → logprob: -15.375720977783203
    6. '(split' → logprob: -15.500720977783203
    7. 'startswith' → logprob: -15.625720977783203
    8. 'read' → logprob: -17.125720977783203
    9. ')' → logprob: -17.625720977783203
    10. 's' → logprob: -18.875720977783203

Token 12: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.22386467456817627
    2. '())' → logprob: -1.7238646745681763
    3. '))' → logprob: -3.9738645553588867
    4. '()' → logprob: -6.598864555358887
    5. '(' → logprob: -7.348864555358887
    6. '`)' → logprob: -7.473864555358887
    7. '()))' → logprob: -7.598864555358887
    8. '('' → logprob: -8.973864555358887
    9. ')`' → logprob: -10.473864555358887
    10. '')' → logprob: -10.848864555358887

Token 13: 'result' (ID: 2521)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.7053216695785522
    2. '
' → logprob: -1.5803216695785522
    3. 'if' → logprob: -2.955321788787842
    4. '#' → logprob: -3.330321788787842
    5. ',' → logprob: -3.455321788787842
    6. '```' → logprob: -3.705321788787842
    7. '\' → logprob: -4.205321788787842
    8. 'x' → logprob: -4.205321788787842
    9. '+' → logprob: -4.205321788787842
    10. '`' → logprob: -4.455321788787842

Token 14: '_total' (ID: 23814)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.792874813079834
    2. '_' → logprob: -1.292874813079834
    3. ' =' → logprob: -1.417874813079834
    4. '(' → logprob: -4.292874813079834
    5. '[' → logprob: -4.917874813079834
    6. ' +=' → logprob: -6.167874813079834
    7. ')' → logprob: -6.667874813079834
    8. '.' → logprob: -6.917874813079834
    9. ' ' → logprob: -6.917874813079834
    10. '_space' → logprob: -7.042874813079834

Token 15: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.3931947350502014
    2. '=' → logprob: -1.3931946754455566
    3. '(' → logprob: -3.7681946754455566
    4. '+' → logprob: -4.143194675445557
    5. '[' → logprob: -4.518194675445557
    6. ' =' → logprob: -4.768194675445557
    7. ' +=' → logprob: -4.893194675445557
    8. ')' → logprob: -5.268194675445557
    9. '+=' → logprob: -6.643194675445557
    10. '.' → logprob: -7.018194675445557

Token 16: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.5787914395332336
    2. ' ' → logprob: -0.8287914395332336
    3. 'input' → logprob: -6.828791618347168
    4. ' input' → logprob: -6.953791618347168
    5. ' []' → logprob: -8.453791618347168
    6. ' sum' → logprob: -8.953791618347168
    7. 'sum' → logprob: -9.078791618347168
    8. '[]' → logprob: -9.203791618347168
    9. ' [' → logprob: -9.703791618347168
    10. '1' → logprob: -9.953791618347168

Token 17: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.006709447130560875
    2. 'input' → logprob: -5.381709575653076
    3. '[]' → logprob: -7.131709575653076
    4. 'sum' → logprob: -8.131709098815918
    5. '[' → logprob: -8.256709098815918
    6. ' ' → logprob: -8.506709098815918
    7. 'result' → logprob: -8.506709098815918
    8. 'max' → logprob: -9.631709098815918
    9. '[input' → logprob: -9.756709098815918
    10. '1' → logprob: -9.756709098815918

Token 18: '.' (ID: 13)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.6858751773834229
    2. 'for' → logprob: -1.0608751773834229
    3. ' for' → logprob: -2.185875177383423
    4. '\n' → logprob: -4.185874938964844
    5. '' → logprob: -4.810874938964844
    6. '```' → logprob: -5.435874938964844
    7. '
' → logprob: -5.810874938964844
    8. '<|end|>' → logprob: -5.935874938964844
    9. ' 
' → logprob: -6.185874938964844
    10. '\' → logprob: -6.810874938964844

Token 19: '0' (ID: 15)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.37340691685676575
    2. '0' → logprob: -1.8734068870544434
    3. '+' → logprob: -2.8734068870544434
    4. '=' → logprob: -3.1234068870544434
    5. '<|end|>' → logprob: -4.123406887054443
    6. '.' → logprob: -5.123406887054443
    7. '_' → logprob: -5.373406887054443
    8. ' 
' → logprob: -5.498406887054443
    9. '```' → logprob: -5.998406887054443
    10. 'result' → logprob: -5.998406887054443

Token 20: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.19182363152503967
    2. '
' → logprob: -2.441823720932007
    3. ' for' → logprob: -2.691823720932007
    4. '\n' → logprob: -4.566823482513428
    5. '' → logprob: -6.066823482513428
    6. '\' → logprob: -6.191823482513428
    7. '<|end|>' → logprob: -6.191823482513428
    8. ' 
' → logprob: -7.191823482513428
    9. '```' → logprob: -7.441823482513428
    10. ' ' → logprob: -7.816823482513428

Token 21: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.056594349443912506
    2. '\n' → logprob: -3.3065943717956543
    3. '
' → logprob: -4.556594371795654
    4. ' for' → logprob: -5.181594371795654
    5. '```' → logprob: -7.556594371795654
    6. '`' → logprob: -7.806594371795654
    7. '' → logprob: -8.056593894958496
    8. ' 
' → logprob: -8.681593894958496
    9. '\' → logprob: -8.681593894958496
    10. 'i' → logprob: -9.181593894958496

Token 22: ' loop' (ID: 11453)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.23816817998886108
    2. ' ' → logprob: -1.9881682395935059
    3. ' _' → logprob: -2.863168239593506
    4. '_' → logprob: -4.113168239593506
    5. ' input' → logprob: -7.238168239593506
    6. 'i' → logprob: -7.613168239593506
    7. '  ' → logprob: -9.363167762756348
    8. ' ' → logprob: -9.613167762756348
    9. ' n' → logprob: -10.113167762756348
    10. ' x' → logprob: -10.863167762756348

Token 23: '_i' (ID: 10853)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.28572216629981995
    2. ' in' → logprob: -2.410722255706787
    3. ' ' → logprob: -2.535722255706787
    4. ' _' → logprob: -2.785722255706787
    5. 'in' → logprob: -5.160722255706787
    6. '_range' → logprob: -5.410722255706787
    7. '_in' → logprob: -6.285722255706787
    8. ' i' → logprob: -6.410722255706787
    9. '_i' → logprob: -6.660722255706787
    10. '  ' → logprob: -7.660722255706787

Token 24: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.059225160628557205
    2. 'in' → logprob: -2.934225082397461
    3. 'n' → logprob: -5.684225082397461
    4. ' ' → logprob: -7.309225082397461
    5. ' n' → logprob: -8.809225082397461
    6. '_' → logprob: -9.684225082397461
    7. '  ' → logprob: -11.309225082397461
    8. '_in' → logprob: -11.684225082397461
    9. ' _' → logprob: -11.934225082397461
    10. ',' → logprob: -12.184225082397461

Token 25: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.20142298936843872
    2. 'range' → logprob: -1.701422929763794
    3. ' ' → logprob: -12.451422691345215
    4. '	range' → logprob: -12.576422691345215
    5. '(range' → logprob: -13.951422691345215
    6. '_range' → logprob: -15.326422691345215
    7. '```' → logprob: -15.326422691345215
    8. 'Range' → logprob: -15.326422691345215
    9. ' ' → logprob: -15.701422691345215
    10. ' xrange' → logprob: -15.951422691345215

Token 26: '(' (ID: 7)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.5759890079498291
    2. '(' → logprob: -0.8259890079498291
    3. '(n' → logprob: -10.95098876953125
    4. '(in' → logprob: -11.45098876953125
    5. '(
' → logprob: -11.82598876953125
    6. ' (' → logprob: -12.45098876953125
    7. '(int' → logprob: -12.45098876953125
    8. '((' → logprob: -13.57598876953125
    9. '(len' → logprob: -13.95098876953125
    10. '(

' → logprob: -14.45098876953125

Token 27: '1' (ID: 16)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.006993369664996862
    2. ' input' → logprob: -5.006993293762207
    3. '1' → logprob: -8.256993293762207
    4. 'n' → logprob: -12.006993293762207
    5. '0' → logprob: -12.506993293762207
    6. 'int' → logprob: -13.631993293762207
    7. '2' → logprob: -13.631993293762207
    8. '<input' → logprob: -13.756993293762207
    9. ',input' → logprob: -13.881993293762207
    10. ' ' → logprob: -14.006993293762207

Token 28: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0015583087224513292
    2. ',input' → logprob: -6.751558303833008
    3. ' ,' → logprob: -7.876558303833008
    4. ',n' → logprob: -12.001558303833008
    5. ',int' → logprob: -14.626558303833008
    6. ',len' → logprob: -14.751558303833008
    7. '+' → logprob: -15.126558303833008
    8. ' ' → logprob: -15.751558303833008
    9. ',num' → logprob: -15.751558303833008
    10. 'input' → logprob: -16.001558303833008

Token 29: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.16025307774543762
    2. 'input' → logprob: -1.9102530479431152
    3. ' ' → logprob: -11.535253524780273
    4. ' n' → logprob: -12.035253524780273
    5. '(input' → logprob: -12.535253524780273
    6. 'n' → logprob: -13.035253524780273
    7. '=input' → logprob: -13.535253524780273
    8. '10' → logprob: -13.910253524780273
    9. '<input' → logprob: -14.035253524780273
    10. 'int' → logprob: -14.160253524780273

Token 30: '_n' (ID: 2170)
  Prédit: '_n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_n' → logprob: -0.20168815553188324
    2. '_k' → logprob: -1.7016881704330444
    3. '_i' → logprob: -8.326687812805176
    4. '_' → logprob: -11.201687812805176
    5. '+' → logprob: -11.576687812805176
    6. '_a' → logprob: -13.576687812805176
    7. '_j' → logprob: -13.576687812805176
    8. ' ' → logprob: -14.076687812805176
    9. '```' → logprob: -14.326687812805176
    10. '_,' → logprob: -14.576687812805176

Token 31: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.6327005624771118
    2. '+' → logprob: -0.7577005624771118
    3. ' ' → logprob: -9.75770092010498
    4. '):
' → logprob: -11.75770092010498
    5. '   ' → logprob: -12.13270092010498
    6. '):' → logprob: -12.25770092010498
    7. '+k' → logprob: -12.63270092010498
    8. '-' → logprob: -12.63270092010498
    9. '```' → logprob: -12.75770092010498
    10. '  ' → logprob: -13.00770092010498

Token 32: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.1002088338136673
    2. ' ' → logprob: -2.3502087593078613
    3. ')' → logprob: -14.47520923614502
    4. '  ' → logprob: -14.85020923614502
    5. '```' → logprob: -14.85020923614502
    6. ' ' → logprob: -15.35020923614502
    7. '   ' → logprob: -15.47520923614502
    8. 'input' → logprob: -16.662708282470703
    9. '

' → logprob: -16.850208282470703
    10. '۱' → logprob: -16.975208282470703

Token 33: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00043138445471413434
    2. ' ' → logprob: -7.750431537628174
    3. ')' → logprob: -15.625431060791016
    4. '   ' → logprob: -15.625431060791016
    5. '  ' → logprob: -16.000431060791016
    6. '```' → logprob: -16.500431060791016
    7. '１' → logprob: -17.500431060791016
    8. '-' → logprob: -17.875431060791016
    9. '2' → logprob: -17.937931060791016
    10. '۱' → logprob: -18.000431060791016

Token 34: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.002146216109395027
    2. ':' → logprob: -6.502146244049072
    3. ')' → logprob: -7.502146244049072
    4. ' ):' → logprob: -9.877145767211914
    5. ',' → logprob: -11.002145767211914
    6. '):
' → logprob: -11.127145767211914
    7. '+' → logprob: -12.502145767211914
    8. ' ' → logprob: -14.002145767211914
    9. '   ' → logprob: -14.377145767211914
    10. '**' → logprob: -14.502145767211914

Token 35: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1358622908592224
    2. '   ' → logprob: -2.885862350463867
    3. '    ' → logprob: -3.260862350463867
    4. ' 
' → logprob: -4.010862350463867
    5. '<|end|>' → logprob: -5.135862350463867
    6. '    
' → logprob: -6.385862350463867
    7. '  ' → logprob: -6.385862350463867
    8. '     
' → logprob: -6.510862350463867
    9. '```' → logprob: -7.135862350463867
    10. ' for' → logprob: -7.760862350463867

Token 36: ' multiplier' (ID: 61814)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.350128412246704
    2. ' for' → logprob: -1.475128412246704
    3. ' result' → logprob: -1.725128412246704
    4. '    ' → logprob: -2.100128412246704
    5. 'result' → logprob: -2.475128412246704
    6. '   ' → logprob: -2.725128412246704
    7. 'for' → logprob: -3.975128412246704
    8. ' if' → logprob: -4.100128173828125
    9. 'prob' → logprob: -5.100128173828125
    10. ' probability' → logprob: -6.475128173828125

Token 37: '_t' (ID: 838)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.00822435598820448
    2. '=' → logprob: -4.8832244873046875
    3. ' *=' → logprob: -7.8832244873046875
    4. '_' → logprob: -9.258224487304688
    5. 's' → logprob: -10.258224487304688
    6. ' *' → logprob: -10.383224487304688
    7. ' ' → logprob: -10.633224487304688
    8. '   ' → logprob: -11.633224487304688
    9. '*' → logprob: -12.133224487304688
    10. '  ' → logprob: -12.258224487304688

Token 38: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.06197473779320717
    2. '=' → logprob: -2.9369747638702393
    3. 'ime' → logprob: -6.56197452545166
    4. 'imes' → logprob: -6.68697452545166
    5. 'otal' → logprob: -6.81197452545166
    6. ' *=' → logprob: -6.81197452545166
    7. 'erm' → logprob: -7.93697452545166
    8. 'o' → logprob: -8.31197452545166
    9. 'i' → logprob: -8.56197452545166
    10. 'oken' → logprob: -8.81197452545166

Token 39: ' ' (ID: 220)
  Prédit: ' loop'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' loop' → logprob: -0.9731690883636475
    2. 'loop' → logprob: -0.9731690883636475
    3. '1' → logprob: -2.5981690883636475
    4. '(loop' → logprob: -2.7231690883636475
    5. 'input' → logprob: -3.2231690883636475
    6. '(' → logprob: -4.348169326782227
    7. ' input' → logprob: -4.348169326782227
    8. '0' → logprob: -4.598169326782227
    9. ' (' → logprob: -4.848169326782227
    10. ' ' → logprob: -4.973169326782227

Token 40: '1' (ID: 16)
  Prédit: 'loop'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'loop' → logprob: -0.43228310346603394
    2. '(loop' → logprob: -1.9322831630706787
    3. '1' → logprob: -2.4322831630706787
    4. 'input' → logprob: -3.0572831630706787
    5. '(' → logprob: -3.1822831630706787
    6. '(input' → logprob: -5.1822829246521
    7. 'float' → logprob: -5.1822829246521
    8. ' loop' → logprob: -5.3072829246521
    9. '0' → logprob: -5.5572829246521
    10. 'min' → logprob: -5.6822829246521

Token 41: '
' (ID: 198)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.32512983679771423
    2. ' +' → logprob: -2.825129747390747
    3. ' /' → logprob: -2.950129747390747
    4. '0' → logprob: -3.075129747390747
    5. '/' → logprob: -3.200129747390747
    6. '.' → logprob: -3.450129747390747
    7. '<|end|>' → logprob: -4.325129985809326
    8. '    ' → logprob: -4.950129985809326
    9. '*' → logprob: -5.450129985809326
    10. '   ' → logprob: -5.700129985809326

Token 42: '   ' (ID: 271)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.5150885581970215
    2. '   ' → logprob: -2.1400885581970215
    3. '/' → logprob: -2.6400885581970215
    4. ' /' → logprob: -3.1400885581970215
    5. ' +' → logprob: -3.2650885581970215
    6. '0' → logprob: -3.3900885581970215
    7. '    ' → logprob: -3.7650885581970215
    8. '*' → logprob: -4.5150885581970215
    9. ' ' → logprob: -4.6400885581970215
    10. ' *' → logprob: -4.6400885581970215

Token 43: ' while' (ID: 2049)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.22640074789524078
    2. ' for' → logprob: -1.8514007329940796
    3. '   ' → logprob: -4.101400852203369
    4. '+' → logprob: -4.351400852203369
    5. '0' → logprob: -5.851400852203369
    6. ' ' → logprob: -5.976400852203369
    7. '/' → logprob: -5.976400852203369
    8. '    ' → logprob: -6.476400852203369
    9. ' /' → logprob: -6.851400852203369
    10. '.' → logprob: -6.976400852203369

Token 44: ' loop' (ID: 11453)
  Prédit: ' multiplier'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' multiplier' → logprob: -0.5465511083602905
    2. ' loop' → logprob: -1.0465511083602905
    3. 'loop' → logprob: -3.67155122756958
    4. 'mult' → logprob: -3.92155122756958
    5. ' True' → logprob: -4.79655122756958
    6. ' input' → logprob: -5.29655122756958
    7. '(loop' → logprob: -5.42155122756958
    8. '(mult' → logprob: -5.79655122756958
    9. 'True' → logprob: -6.92155122756958
    10. ' ' → logprob: -7.29655122756958

Token 45: '_i' (ID: 10853)
  Prédit: '_i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_i' → logprob: -6.659005157416686e-05
    2. '_t' → logprob: -10.750066757202148
    3. '_' → logprob: -11.250066757202148
    4. '_j' → logprob: -11.500066757202148
    5. '_k' → logprob: -12.625066757202148
    6. ' _' → logprob: -13.125066757202148
    7. '_x' → logprob: -13.125066757202148
    8. '_s' → logprob: -13.125066757202148
    9. '_a' → logprob: -13.250066757202148
    10. '_m' → logprob: -13.375066757202148

Token 46: ' *' (ID: 425)
  Prédit: ' %'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.9208723306655884
    2. ' <=' → logprob: -1.5458723306655884
    3. ' >=' → logprob: -1.7958723306655884
    4. '%' → logprob: -2.045872211456299
    5. '*' → logprob: -3.670872211456299
    6. ' *' → logprob: -4.045872211456299
    7. '<=' → logprob: -4.045872211456299
    8. '>=' → logprob: -4.170872211456299
    9. ' <' → logprob: -4.795872211456299
    10. '<' → logprob: -6.045872211456299

Token 47: ' multiplier' (ID: 61814)
  Prédit: 'mult'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'mult' → logprob: -0.031522948294878006
    2. ' multiplier' → logprob: -3.5315229892730713
    3. '2' → logprob: -6.531522750854492
    4. '(mult' → logprob: -8.406522750854492
    5. ' ' → logprob: -10.656522750854492
    6. 'multip' → logprob: -11.531522750854492
    7. '_multiplier' → logprob: -11.656522750854492
    8. 't' → logprob: -11.906522750854492
    9. '7' → logprob: -12.031522750854492
    10. '*' → logprob: -12.156522750854492

Token 48: '_t' (ID: 838)
  Prédit: '_t'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_t' → logprob: -6.253713218029588e-05
    2. 't' → logprob: -10.625062942504883
    3. '<|end|>' → logprob: -11.375062942504883
    4. '_' → logprob: -12.375062942504883
    5. '<|end|>' → logprob: -12.625062942504883
    6. '<=' → logprob: -12.750062942504883
    7. '_r' → logprob: -12.875062942504883
    8. '_s' → logprob: -13.000062942504883
    9. 's' → logprob: -13.250062942504883
    10. '```' → logprob: -13.500062942504883

Token 49: ' <' (ID: 464)
  Prédit: ' <='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.08713024109601974
    2. '<=' → logprob: -2.587130308151245
    3. ' <' → logprob: -4.962130069732666
    4. '<' → logprob: -6.837130069732666
    5. ' ' → logprob: -9.212130546569824
    6. '<|end|>' → logprob: -11.712130546569824
    7. ' <<=' → logprob: -12.962130546569824
    8. ')<=' → logprob: -13.212130546569824
    9. '0' → logprob: -13.337130546569824
    10. '<n' → logprob: -13.462130546569824

Token 50: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -1.0121760368347168
    2. '=input' → logprob: -1.0121760368347168
    3. '=' → logprob: -1.3871760368347168
    4. ' input' → logprob: -3.762176036834717
    5. ' =' → logprob: -10.512176513671875
    6. '_input' → logprob: -11.137176513671875
    7. '<input' → logprob: -11.137176513671875
    8. '	input' → logprob: -11.637176513671875
    9. '=int' → logprob: -11.762176513671875
    10. '=in' → logprob: -11.762176513671875

Token 51: '_k' (ID: 11637)
  Prédit: '_k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_k' → logprob: -0.02978532575070858
    2. '_n' → logprob: -3.529785394668579
    3. '_' → logprob: -10.77978515625
    4. '_s' → logprob: -12.40478515625
    5. '_j' → logprob: -13.02978515625
    6. '_i' → logprob: -13.02978515625
    7. ' _' → logprob: -13.40478515625
    8. '_t' → logprob: -13.90478515625
    9. '_a' → logprob: -14.40478515625
    10. '_p' → logprob: -14.52978515625

Token 52: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0033512013033032417
    2. ':
' → logprob: -6.128351211547852
    3. ' and' → logprob: -7.253351211547852
    4. 'and' → logprob: -7.878351211547852
    5. '+' → logprob: -10.628351211547852
    6. ' :' → logprob: -10.753351211547852
    7. ' or' → logprob: -12.128351211547852
    8. '   ' → logprob: -12.503351211547852
    9. '-' → logprob: -12.628351211547852
    10. '*' → logprob: -13.253351211547852

Token 53: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.004268696531653404
    2. '   ' → logprob: -5.879268646240234
    3. '    ' → logprob: -7.629268646240234
    4. '<|end|>' → logprob: -8.379268646240234
    5. '1' → logprob: -8.629268646240234
    6. 'mult' → logprob: -9.504268646240234
    7. ' multiplier' → logprob: -9.504268646240234
    8. '        
' → logprob: -9.629268646240234
    9. ' ' → logprob: -9.879268646240234
    10. '<|end|>' → logprob: -10.129268646240234

Token 54: ' multiplier' (ID: 61814)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -1.6883277893066406
    2. ' multiplier' → logprob: -1.6883277893066406
    3. 'mult' → logprob: -1.9383277893066406
    4. 'result' → logprob: -1.9383277893066406
    5. '           ' → logprob: -2.0633277893066406
    6. ' result' → logprob: -2.5633277893066406
    7. ' ' → logprob: -2.9383277893066406
    8. '   ' → logprob: -3.9383277893066406
    9. ' multip' → logprob: -4.188327789306641
    10. '    ' → logprob: -4.313327789306641

Token 55: '_t' (ID: 838)
  Prédit: '_t'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_t' → logprob: -4.1318875446449965e-05
    2. '_' → logprob: -10.125041007995605
    3. '_s' → logprob: -14.875041007995605
    4. 't' → logprob: -15.375041007995605
    5. '_=' → logprob: -15.625041007995605
    6. '=' → logprob: -16.000041961669922
    7. '```' → logprob: -16.000041961669922
    8. ' _' → logprob: -16.750041961669922
    9. 's' → logprob: -17.125041961669922
    10. '   ' → logprob: -17.125041961669922

Token 56: ' *=' (ID: 25253)
  Prédit: ' +='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.10034069418907166
    2. '+=' → logprob: -2.3503406047821045
    3. '+' → logprob: -9.850340843200684
    4. ' ' → logprob: -10.850340843200684
    5. '=' → logprob: -11.100340843200684
    6. ' *=' → logprob: -11.225340843200684
    7. ' +' → logprob: -12.350340843200684
    8. ' =' → logprob: -12.475340843200684
    9. '   ' → logprob: -12.475340843200684
    10. '    ' → logprob: -12.600340843200684

Token 57: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.004671495407819748
    2. '3' → logprob: -5.754671573638916
    3. ' ' → logprob: -7.129671573638916
    4. '6' → logprob: -8.254671096801758
    5. '10' → logprob: -8.629671096801758
    6. '1' → logprob: -9.504671096801758
    7. '4' → logprob: -10.004671096801758
    8. '5' → logprob: -10.254671096801758
    9. 'loop' → logprob: -10.379671096801758
    10. '   ' → logprob: -10.754671096801758

Token 58: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.002830673009157181
    2. '3' → logprob: -6.252830505371094
    3. '10' → logprob: -7.627830505371094
    4. ' ' → logprob: -9.252830505371094
    5. '   ' → logprob: -9.627830505371094
    6. '4' → logprob: -9.877830505371094
    7. '5' → logprob: -9.877830505371094
    8. '1' → logprob: -10.377830505371094
    9. 'input' → logprob: -10.377830505371094
    10. 'loop' → logprob: -11.002830505371094

Token 59: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -1.1554515361785889
    2. '   ' → logprob: -1.4054515361785889
    3. '<|end|>' → logprob: -1.4054515361785889
    4. '       ' → logprob: -3.030451536178589
    5. ' ' → logprob: -3.530451536178589
    6. '+' → logprob: -3.530451536178589
    7. '    ' → logprob: -4.030451774597168
    8. 'result' → logprob: -4.405451774597168
    9. '<|end|>' → logprob: -4.780451774597168
    10. ' 
' → logprob: -4.780451774597168

Token 60: '   ' (ID: 271)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.16998609900474548
    2. '   ' → logprob: -2.7949860095977783
    3. '
' → logprob: -3.1699860095977783
    4. '<|end|>' → logprob: -3.6699860095977783
    5. ' ' → logprob: -4.544986248016357
    6. '+' → logprob: -5.794986248016357
    7. '    ' → logprob: -6.044986248016357
    8. '        ' → logprob: -6.044986248016357
    9. '<|end|>' → logprob: -6.044986248016357
    10. '        
' → logprob: -6.669986248016357

Token 61: ' result' (ID: 1534)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04524344578385353
    2. ' ' → logprob: -4.545243263244629
    3. '
' → logprob: -5.045243263244629
    4. 'print' → logprob: -5.295243263244629
    5. ' if' → logprob: -5.420243263244629
    6. 'if' → logprob: -5.670243263244629
    7. '+' → logprob: -6.295243263244629
    8. 'result' (adapté à ' result') → logprob: -6.295243263244629
    9. '.' → logprob: -6.420243263244629
    10. '<|end|>' → logprob: -6.545243263244629

Token 62: '_total' (ID: 23814)
  Prédit: '_total'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_total' → logprob: -3.7697225252486533e-06
    2. '_' → logprob: -12.750003814697266
    3. 'total' → logprob: -15.250003814697266
    4. '_tot' → logprob: -15.875003814697266
    5. '_final' → logprob: -16.500003814697266
    6. '_t' → logprob: -16.750003814697266
    7. ' _' → logprob: -17.000003814697266
    8. ')_' → logprob: -17.250003814697266
    9. 'Total' → logprob: -17.375003814697266
    10. '_Total' → logprob: -17.625003814697266

Token 63: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.055104102939367294
    2. '+=' → logprob: -2.9301040172576904
    3. '+' → logprob: -8.93010425567627
    4. ' /=' → logprob: -10.80510425567627
    5. ' *=' → logprob: -11.30510425567627
    6. ' +' → logprob: -11.43010425567627
    7. '=' → logprob: -11.68010425567627
    8. '/' → logprob: -12.18010425567627
    9. '+=(' → logprob: -12.18010425567627
    10. '   ' → logprob: -12.55510425567627

Token 64: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.7483531832695007
    2. 'loop' → logprob: -1.1233532428741455
    3. ' loop' → logprob: -2.3733532428741455
    4. '(loop' → logprob: -3.4983532428741455
    5. 'mult' → logprob: -3.8733532428741455
    6. ' ' → logprob: -4.123353004455566
    7. ' (' → logprob: -4.248353004455566
    8. '(mult' → logprob: -5.248353004455566
    9. 'min' → logprob: -5.373353004455566
    10. '(' → logprob: -5.498353004455566

Token 65: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.3676760792732239
    2. 'loop' → logprob: -1.617676019668579
    3. '(loop' → logprob: -3.117676019668579
    4. 'mult' → logprob: -3.492676019668579
    5. '(' → logprob: -4.367676258087158
    6. '(mult' → logprob: -4.492676258087158
    7. 'input' → logprob: -5.492676258087158
    8. '0' → logprob: -6.367676258087158
    9. ' loop' → logprob: -6.367676258087158
    10. ' ' → logprob: -6.992676258087158

Token 66: '.' (ID: 13)
  Prédit: '/'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '/' → logprob: -0.1465620994567871
    2. ' /' → logprob: -2.021562099456787
    3. '*' → logprob: -5.896562099456787
    4. ' *' → logprob: -7.771562099456787
    5. '<|end|>' → logprob: -8.646562576293945
    6. '/log' → logprob: -9.396562576293945
    7. '/input' → logprob: -9.521562576293945
    8. '/(' → logprob: -9.896562576293945
    9. '/m' → logprob: -10.146562576293945
    10. '0' → logprob: -10.146562576293945

Token 67: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.020179443061351776
    2. '-' → logprob: -4.020179271697998
    3. '/' → logprob: -6.895179271697998
    4. '-f' → logprob: -8.145179748535156
    5. '/log' → logprob: -8.395179748535156
    6. '5' → logprob: -9.395179748535156
    7. '1' → logprob: -10.145179748535156
    8. '-k' → logprob: -10.395179748535156
    9. '-log' → logprob: -10.520179748535156
    10. '-t' → logprob: -10.520179748535156

Token 68: ' /' (ID: 820)
  Prédit: '/'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '/' → logprob: -0.05530118569731712
    2. ' /' → logprob: -2.9303011894226074
    3. '*' → logprob: -8.05530071258545
    4. '/input' → logprob: -10.55530071258545
    5. ' *' → logprob: -10.93030071258545
    6. '/(' → logprob: -11.05530071258545
    7. '0' → logprob: -12.05530071258545
    8. '/
' → logprob: -12.18030071258545
    9. '/log' → logprob: -12.93030071258545
    10. '/m' → logprob: -12.93030071258545

Token 69: ' multiplier' (ID: 61814)
  Prédit: 'mult'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'mult' → logprob: -0.003385295392945409
    2. 'loop' → logprob: -6.753385066986084
    3. '(mult' → logprob: -6.878385066986084
    4. ' multiplier' → logprob: -7.128385066986084
    5. 'multip' → logprob: -8.378385543823242
    6. 'input' → logprob: -9.878385543823242
    7. '(' → logprob: -10.378385543823242
    8. ' loop' → logprob: -10.753385543823242
    9. 'mul' → logprob: -11.628385543823242
    10. ' multip' → logprob: -11.878385543823242

Token 70: '_t' (ID: 838)
  Prédit: '_t'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_t' → logprob: -5.676981345459353e-06
    2. 't' → logprob: -12.500005722045898
    3. '_' → logprob: -13.500005722045898
    4. ' _' → logprob: -15.250005722045898
    5. '```' → logprob: -17.3750057220459
    6. '_s' → logprob: -17.6250057220459
    7. '__' → logprob: -17.6250057220459
    8. '"_' → logprob: -17.7500057220459
    9. '*_' → logprob: -17.8750057220459
    10. ' ' → logprob: -17.8750057220459

Token 71: '
' (ID: 198)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.5221685767173767
    2. 'print' → logprob: -1.1471686363220215
    3. '<|end|>' → logprob: -4.1471686363220215
    4. ')' → logprob: -4.2721686363220215
    5. '*' → logprob: -4.2721686363220215
    6. '+' → logprob: -4.5221686363220215
    7. '
' → logprob: -4.6471686363220215
    8. '```' → logprob: -4.8971686363220215
    9. ' ' → logprob: -5.3971686363220215
    10. ' print' → logprob: -6.0221686363220215

Token 72: 'average' (ID: 33570)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.007405719719827175
    2. '\n' → logprob: -5.757405757904053
    3. '<|end|>' → logprob: -6.132405757904053
    4. ' print' → logprob: -7.132405757904053
    5. ')' → logprob: -7.507405757904053
    6. '
' → logprob: -8.507405281066895
    7. '```' → logprob: -8.632405281066895
    8. '+' → logprob: -9.632405281066895
    9. '*' → logprob: -10.257405281066895
    10. '\' → logprob: -10.382405281066895

Token 73: '_result' (ID: 11623)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.07208677381277084
    2. ' =' → logprob: -2.947086811065674
    3. '=' → logprob: -4.322086811065674
    4. '_result' → logprob: -6.197086811065674
    5. '_total' → logprob: -7.322086811065674
    6. '_value' → logprob: -8.197086334228516
    7. '_=' → logprob: -8.947086334228516
    8. '_n' → logprob: -9.072086334228516
    9. '_output' → logprob: -9.447086334228516
    10. '_score' → logprob: -9.447086334228516

Token 74: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0442468523979187
    2. '=' → logprob: -3.1692469120025635
    3. ' /=' → logprob: -7.169246673583984
    4. '_' → logprob: -8.044246673583984
    5. ' /' → logprob: -9.544246673583984
    6. '/' → logprob: -9.669246673583984
    7. ' ' → logprob: -12.669246673583984
    8. ')' → logprob: -12.669246673583984
    9. ' +=' → logprob: -13.169246673583984
    10. 's' → logprob: -13.544246673583984

Token 75: ' result' (ID: 1534)
  Prédit: ' result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' result' → logprob: -0.31326422095298767
    2. 'result' → logprob: -1.31326425075531
    3. ' ' → logprob: -13.188263893127441
    4. '(result' → logprob: -14.813263893127441
    5. ' float' → logprob: -15.938263893127441
    6. ' (' → logprob: -17.063264846801758
    7. 'float' → logprob: -17.313264846801758
    8. ' input' → logprob: -17.938264846801758
    9. ' ' → logprob: -18.063264846801758
    10. '   ' → logprob: -18.188264846801758

Token 76: '_total' (ID: 23814)
  Prédit: '_total'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_total' → logprob: -6.392202976712724e-06
    2. '_' → logprob: -12.500006675720215
    3. '_t' → logprob: -13.250006675720215
    4. ' _' → logprob: -15.000006675720215
    5. '_tot' → logprob: -15.000006675720215
    6. '_to' → logprob: -16.6250057220459
    7. '__' → logprob: -16.7500057220459
    8. '_Total' → logprob: -17.5000057220459
    9. '_TOTAL' → logprob: -18.6250057220459
    10. ')_' → logprob: -18.7500057220459

Token 77: ' /' (ID: 820)
  Prédit: ' /'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' /' → logprob: -0.22547084093093872
    2. '/' → logprob: -1.600470781326294
    3. '/input' → logprob: -9.850470542907715
    4. ' ' → logprob: -12.725470542907715
    5. ' ' → logprob: -13.850470542907715
    6. '*' → logprob: -14.600470542907715
    7. 'input' → logprob: -15.850470542907715
    8. '/output' → logprob: -15.850470542907715
    9. '/(' → logprob: -16.35047149658203
    10. ' /
' → logprob: -16.35047149658203

Token 78: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.00020354038861114532
    2. ' input' → logprob: -8.500203132629395
    3. '<input' → logprob: -17.75020408630371
    4. '(input' → logprob: -17.87520408630371
    5. '  ' → logprob: -19.37520408630371
    6. 'float' → logprob: -19.50020408630371
    7. 'int' → logprob: -19.50020408630371
    8. 'in' → logprob: -19.75020408630371
    9. '=input' → logprob: -19.75020408630371
    10. ' ' → logprob: -20.12520408630371

Token 79: '_n' (ID: 2170)
  Prédit: '_n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_n' → logprob: -7.896309739408025e-07
    2. '_k' → logprob: -14.750000953674316
    3. '_' → logprob: -14.875000953674316
    4. '_x' → logprob: -21.875
    5. ' _' → logprob: -22.0
    6. '_a' → logprob: -22.0
    7. '_m' → logprob: -22.125
    8. '_t' → logprob: -22.125
    9. '_i' → logprob: -22.25
    10. '_
' → logprob: -22.375

Token 80: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0014314282452687621
    2. '<|end|>' → logprob: -6.751431465148926
    3. '
' → logprob: -9.251431465148926
    4. ' print' → logprob: -9.376431465148926
    5. ')' → logprob: -10.251431465148926
    6. '\n' → logprob: -11.751431465148926
    7. '```' → logprob: -12.001431465148926
    8. '#' → logprob: -12.251431465148926
    9. ' ' → logprob: -12.626431465148926
    10. '+' → logprob: -12.751431465148926

Token 81: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00023154958034865558
    2. '<|end|>' → logprob: -8.750231742858887
    3. ' print' → logprob: -11.000231742858887
    4. '\n' → logprob: -11.125231742858887
    5. '
' → logprob: -11.750231742858887
    6. ')' → logprob: -11.750231742858887
    7. '+' → logprob: -11.875231742858887
    8. 'pr' → logprob: -13.125231742858887
    9. '#' → logprob: -13.125231742858887
    10. '\' → logprob: -13.375231742858887

Token 82: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -2.3915141355246305e-05
    2. '('' → logprob: -12.00002384185791
    3. '("("' → logprob: -12.50002384185791
    4. '(avg' → logprob: -12.75002384185791
    5. ' (' → logprob: -13.12502384185791
    6. '()' → logprob: -13.37502384185791
    7. '(round' → logprob: -13.50002384185791
    8. '((' → logprob: -13.62502384185791
    9. '(
' → logprob: -13.87502384185791
    10. '(f' → logprob: -13.87502384185791

Token 83: 'average' (ID: 33570)
  Prédit: 'average'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'average' → logprob: -1.306760805164231e-05
    2. ' average' → logprob: -11.87501335144043
    3. 'round' → logprob: -12.12501335144043
    4. '{' → logprob: -15.62501335144043
    5. 'f' → logprob: -15.75001335144043
    6. 'format' → logprob: -15.87501335144043
    7. ')' → logprob: -16.87501335144043
    8. '"{' → logprob: -17.00001335144043
    9. 'avg' → logprob: -17.00001335144043
    10. '   ' → logprob: -18.25001335144043

Token 84: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -9.674858301877975e-05
    2. '_' → logprob: -10.375096321105957
    3. '_results' → logprob: -10.375096321105957
    4. ')_' → logprob: -11.125096321105957
    5. '_res' → logprob: -11.375096321105957
    6. ' _' → logprob: -13.000096321105957
    7. ')' → logprob: -13.250096321105957
    8. '_)' → logprob: -13.750096321105957
    9. '_average' → logprob: -13.750096321105957
    10. '_Result' → logprob: -14.500096321105957

Token 85: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.36574100604048e-06
    2. ' )' → logprob: -12.750004768371582
    3. '))' → logprob: -13.625004768371582
    4. ')
' → logprob: -17.000003814697266
    5. ')}' → logprob: -17.375003814697266
    6. ')`' → logprob: -17.500003814697266
    7. ')))' → logprob: -18.625003814697266
    8. '')' → logprob: -18.875003814697266
    9. '）' → logprob: -19.250003814697266
    10. '),' → logprob: -19.375003814697266


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 83
Tokens correctement prédits (1ère position, stricte): 33
Tokens correctement prédits (1ère position, avec adaptation): 33
Tokens correctement prédits (top 10): 69
Précision stricte (1ère position): 39.76%
Précision adaptée (1ère position): 39.76%
Précision (top 10): 83.13%
================================================================================
