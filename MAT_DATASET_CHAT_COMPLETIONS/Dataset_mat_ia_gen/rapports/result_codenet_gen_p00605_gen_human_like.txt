================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:08:51
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
while True:
    line = input().strip()
    if not line:
        continue
    N, K = map(int, line.split())
    if N == 0 and K == 0:
        break
    fridge = list(map(int, input().split()))
    vampires = [list(map(int, input().split())) for _ in range(N)]

    total_need = [0]*K
    for v in vampires:
        for i in range(K):
            total_need[i] += v[i]

    can_prepare = all(total_need[i] <= fridge[i] for i in range(K))
    print("Yes" if can_prepare else "No")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'while' (ID: 7032)
  → Token d'amorce (pas de prédiction)

Token 1: ' True' (ID: 6432)
  → Token d'amorce (pas de prédiction)

Token 2: ':
' (ID: 734)
  → Token d'amorce (pas de prédiction)

Token 3: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08060130476951599
    2. ' ' → logprob: -3.955601215362549
    3. '    ' → logprob: -4.455601215362549
    4. '    
' → logprob: -4.580601215362549
    5. '\n' → logprob: -5.080601215362549
    6. '\' → logprob: -5.080601215362549
    7. '```' → logprob: -5.080601215362549
    8. ' 
' → logprob: -5.205601215362549
    9. '<|end|>' → logprob: -5.705601215362549
    10. ':' → logprob: -6.580601215362549

Token 4: ' line' (ID: 2543)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.30723127722740173
    2. '    ' → logprob: -1.6822313070297241
    3. '```' → logprob: -3.5572311878204346
    4. ' ' → logprob: -3.8072311878204346
    5. '       ' → logprob: -4.807231426239014
    6. '    
' → logprob: -5.932231426239014
    7. '  ' → logprob: -6.182231426239014
    8. '\' → logprob: -6.182231426239014
    9. '\n' → logprob: -6.682231426239014
    10. '\t' → logprob: -6.807231426239014

Token 5: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.6717475652694702
    2. '=' → logprob: -0.7967475652694702
    3. 's' → logprob: -3.5467476844787598
    4. '.' → logprob: -5.79674768447876
    5. ')' → logprob: -6.29674768447876
    6. ' ' → logprob: -7.17174768447876
    7. '.startswith' → logprob: -7.29674768447876
    8. '_' → logprob: -7.67174768447876
    9. '[' → logprob: -7.67174768447876
    10. '[:]' → logprob: -7.67174768447876

Token 6: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.08903424441814423
    2. 'input' → logprob: -2.46403431892395
    3. ' ' → logprob: -9.714034080505371
    4. ' f' → logprob: -10.964034080505371
    5. '=input' → logprob: -12.589034080505371
    6. ' readline' → logprob: -12.714034080505371
    7. ' file' → logprob: -12.839034080505371
    8. '   ' → logprob: -13.589034080505371
    9. ' s' → logprob: -14.089034080505371
    10. '(input' → logprob: -14.464034080505371

Token 7: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.002882141387090087
    2. '()' → logprob: -6.25288200378418
    3. '('' → logprob: -7.37788200378418
    4. '("("' → logprob: -8.62788200378418
    5. '```' → logprob: -10.00288200378418
    6. ''' → logprob: -10.37788200378418
    7. ')' → logprob: -10.87788200378418
    8. '("")' → logprob: -11.50288200378418
    9. ''s' → logprob: -12.00288200378418
    10. '"' → logprob: -12.25288200378418

Token 8: 'strip' (ID: 23905)
  Prédit: 'strip'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.00015681622608099133
    2. 'rstrip' → logprob: -9.00015640258789
    3. 'split' → logprob: -10.37515640258789
    4. 'startswith' → logprob: -13.37515640258789
    5. 'replace' → logprob: -15.50015640258789
    6. 'lower' → logprob: -15.87515640258789
    7. ' strip' → logprob: -15.87515640258789
    8. 'str' → logprob: -16.37515640258789
    9. 'read' → logprob: -17.62515640258789
    10. 'l' → logprob: -18.25015640258789

Token 9: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.22553707659244537
    2. '()' → logprob: -1.6005370616912842
    3. '(
' → logprob: -9.975537300109863
    4. '`()' → logprob: -10.975537300109863
    5. '```' → logprob: -11.475537300109863
    6. '(

' → logprob: -11.600537300109863
    7. '`' → logprob: -12.225537300109863
    8. '()`' → logprob: -12.350537300109863
    9. ')' → logprob: -12.600537300109863
    10. '(`' → logprob: -12.725537300109863

Token 10: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9383642673492432
    2. ' if' → logprob: -1.0633642673492432
    3. 'if' → logprob: -1.6883642673492432
    4. '<|end|>' → logprob: -3.188364267349243
    5. ' ' → logprob: -4.313364028930664
    6. ':' → logprob: -4.313364028930664
    7. '    ' → logprob: -5.938364028930664
    8. '<|end|>' → logprob: -6.313364028930664
    9. '       ' → logprob: -7.313364028930664
    10. ':
' → logprob: -7.313364028930664

Token 11: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.03470177203416824
    2. ' if' → logprob: -3.5347018241882324
    3. '   ' → logprob: -5.909701824188232
    4. 'i' → logprob: -6.284701824188232
    5. '```' → logprob: -8.284701347351074
    6. ' ' → logprob: -10.284701347351074
    7. 'If' → logprob: -10.784701347351074
    8. '    ' → logprob: -11.409701347351074
    9. '<|end|>' → logprob: -11.409701347351074
    10. '#' → logprob: -11.534701347351074

Token 12: ' not' (ID: 625)
  Prédit: ' not'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.00830250047147274
    2. 'not' → logprob: -5.008302688598633
    3. ' line' → logprob: -6.508302688598633
    4. 'line' → logprob: -9.383302688598633
    5. ' ' → logprob: -11.633302688598633
    6. ' len' → logprob: -13.758302688598633
    7. ' ' → logprob: -15.508302688598633
    8. '!' → logprob: -15.883302688598633
    9. '	not' → logprob: -16.008302688598633
    10. 'len' → logprob: -16.758302688598633

Token 13: ' line' (ID: 2543)
  Prédit: ' line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' line' → logprob: -0.20141783356666565
    2. 'line' → logprob: -1.7014178037643433
    3. ' ' → logprob: -12.451417922973633
    4. '	line' → logprob: -15.076417922973633
    5. '   ' → logprob: -16.326417922973633
    6. '(line' → logprob: -16.451417922973633
    7. ' lin' → logprob: -16.576417922973633
    8. ' ' → logprob: -17.576417922973633
    9. ' lines' → logprob: -17.951417922973633
    10. '#line' → logprob: -18.576417922973633

Token 14: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.10059148073196411
    2. ' :' → logprob: -2.3505914211273193
    3. '.' → logprob: -9.725591659545898
    4. '):' → logprob: -9.975591659545898
    5. ':
' → logprob: -10.225591659545898
    6. ' or' → logprob: -10.600591659545898
    7. '():' → logprob: -10.600591659545898
    8. '':' → logprob: -10.600591659545898
    9. ' ==' → logprob: -10.725591659545898
    10. ' :
' → logprob: -10.975591659545898

Token 15: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.010594622232019901
    2. ' break' → logprob: -5.260594844818115
    3. '   ' → logprob: -5.385594844818115
    4. 'break' → logprob: -8.260594367980957
    5. ' continue' → logprob: -8.385594367980957
    6. '    ' → logprob: -10.010594367980957
    7. '<|end|>' → logprob: -10.010594367980957
    8. 'continue' → logprob: -10.260594367980957
    9. '	break' → logprob: -10.260594367980957
    10. ' ' → logprob: -10.635594367980957

Token 16: ' continue' (ID: 4901)
  Prédit: ' break'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' break' → logprob: -0.21060994267463684
    2. 'break' → logprob: -1.9606099128723145
    3. '       ' → logprob: -3.3356099128723145
    4. '   ' → logprob: -4.3356099128723145
    5. '```' → logprob: -8.585610389709473
    6. '	break' → logprob: -8.835610389709473
    7. '_break' → logprob: -10.085610389709473
    8. '           ' → logprob: -10.585610389709473
    9. 'Break' → logprob: -11.335610389709473
    10. ' ' → logprob: -11.335610389709473

Token 17: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.006358523853123188
    2. '    
' → logprob: -5.381358623504639
    3. '<|end|>' → logprob: -8.38135814666748
    4. '```' → logprob: -8.50635814666748
    5. 'if' → logprob: -8.63135814666748
    6. '  ' → logprob: -8.75635814666748
    7. ' if' → logprob: -8.88135814666748
    8. 'print' → logprob: -9.13135814666748
    9. '  
' → logprob: -9.25635814666748
    10. ')' → logprob: -9.38135814666748

Token 18: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.001463793101720512
    2. '```' → logprob: -7.251463890075684
    3. 'if' → logprob: -7.626463890075684
    4. '    
' → logprob: -9.001463890075684
    5. 'print' → logprob: -9.501463890075684
    6. ' if' → logprob: -10.751463890075684
    7. 'try' → logprob: -11.876463890075684
    8. '       ' → logprob: -12.126463890075684
    9. ':' → logprob: -12.501463890075684
    10. 'i' → logprob: -12.626463890075684

Token 19: ' N' (ID: 478)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.2715218663215637
    2. '   ' → logprob: -2.021521806716919
    3. 'try' → logprob: -2.646521806716919
    4. 'i' → logprob: -4.146522045135498
    5. ' if' → logprob: -4.646522045135498
    6. 'break' → logprob: -5.896522045135498
    7. '#' → logprob: -6.146522045135498
    8. 'b' → logprob: -6.896522045135498
    9. ' try' → logprob: -7.396522045135498
    10. '```' → logprob: -7.771522045135498

Token 20: ',' (ID: 11)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5659411549568176
    2. ' =' → logprob: -1.0659410953521729
    3. ' ==' → logprob: -2.565941095352173
    4. ' ' → logprob: -5.565941333770752
    5. '==' → logprob: -5.815941333770752
    6. ')' → logprob: -6.940941333770752
    7. '-' → logprob: -7.190941333770752
    8. ',' → logprob: -7.690941333770752
    9. '>' → logprob: -7.690941333770752
    10. '=int' → logprob: -8.065940856933594

Token 21: ' K' (ID: 658)
  Prédit: 'M'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'M' → logprob: -1.1505526304244995
    2. 'line' → logprob: -1.9005526304244995
    3. 'K' → logprob: -2.025552749633789
    4. '=' → logprob: -2.900552749633789
    5. 's' → logprob: -2.900552749633789
    6. 'space' → logprob: -2.900552749633789
    7. ' K' → logprob: -3.525552749633789
    8. ' M' → logprob: -4.025552749633789
    9. ' line' → logprob: -4.150552749633789
    10. 'token' → logprob: -4.275552749633789

Token 22: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.03806765750050545
    2. '=' → logprob: -3.288067579269409
    3. ',' → logprob: -10.663067817687988
    4. ' ' → logprob: -13.663067817687988
    5. ')' → logprob: -14.288067817687988
    6. ' ,' → logprob: -14.538067817687988
    7. ' =
' → logprob: -15.788067817687988
    8. ' =)' → logprob: -16.163066864013672
    9. ' =",' → logprob: -16.913066864013672
    10. '.' → logprob: -17.038066864013672

Token 23: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.048887450248003006
    2. 'map' → logprob: -3.0488874912261963
    3. ' line' → logprob: -8.173887252807617
    4. 'line' → logprob: -11.173887252807617
    5. '(map' → logprob: -13.798887252807617
    6. ' [' → logprob: -13.923887252807617
    7. ' list' → logprob: -14.423887252807617
    8. '[' → logprob: -14.673887252807617
    9. ' ' → logprob: -14.798887252807617
    10. '	map' → logprob: -15.423887252807617

Token 24: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.45389920473098755
    2. '(' → logprob: -1.7038991451263428
    3. '(str' → logprob: -1.7038991451263428
    4. '(lambda' → logprob: -7.078899383544922
    5. 'str' → logprob: -10.703899383544922
    6. '(
' → logprob: -11.203899383544922
    7. '(list' → logprob: -11.703899383544922
    8. '(input' → logprob: -12.828899383544922
    9. '(eval' → logprob: -12.828899383544922
    10. 'int' → logprob: -12.953899383544922

Token 25: ',' (ID: 11)
  Prédit: '(line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(line' → logprob: -0.04778943955898285
    2. ')' → logprob: -3.4227893352508545
    3. '(input' → logprob: -4.547789573669434
    4. '(' → logprob: -5.797789573669434
    5. ',' → logprob: -8.922789573669434
    6. ' line' → logprob: -9.297789573669434
    7. ' (' → logprob: -10.172789573669434
    8. ',line' → logprob: -10.297789573669434
    9. '(
' → logprob: -10.797789573669434
    10. '=line' → logprob: -10.922789573669434

Token 26: ' line' (ID: 2543)
  Prédit: ' line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' line' → logprob: -0.12694302201271057
    2. 'line' → logprob: -2.1269431114196777
    3. ')' → logprob: -12.00194263458252
    4. '(line' → logprob: -13.12694263458252
    5. ' input' → logprob: -13.12694263458252
    6. '	line' → logprob: -13.50194263458252
    7. 'input' → logprob: -13.75194263458252
    8. '[line' → logprob: -14.37694263458252
    9. '   ' → logprob: -14.50194263458252
    10. '=line' → logprob: -14.87694263458252

Token 27: '.split' (ID: 10347)
  Prédit: '.split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.split' → logprob: -0.0064306678250432014
    2. ')' → logprob: -5.131430625915527
    3. '.strip' → logprob: -8.131430625915527
    4. '.' → logprob: -9.631430625915527
    5. '.readline' → logprob: -9.631430625915527
    6. '().' → logprob: -10.381430625915527
    7. '   ' → logprob: -11.131430625915527
    8. '))' → logprob: -11.631430625915527
    9. '.rstrip' → logprob: -11.756430625915527
    10. ').' → logprob: -12.506430625915527

Token 28: '())
' (ID: 4574)
  Prédit: '(''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '('' → logprob: -0.0034450457897037268
    2. '())' → logprob: -5.878445148468018
    3. '()' → logprob: -8.12844467163086
    4. '(' → logprob: -9.00344467163086
    5. ')' → logprob: -9.50344467163086
    6. '("' → logprob: -9.87844467163086
    7. '("("' → logprob: -10.00344467163086
    8. '(','' → logprob: -10.12844467163086
    9. '('='' → logprob: -12.50344467163086
    10. '(',' → logprob: -12.87844467163086

Token 29: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.07290710508823395
    2. ')' → logprob: -3.3229072093963623
    3. '   ' → logprob: -4.697906970977783
    4. '\n' → logprob: -5.072906970977783
    5. ',' → logprob: -5.572906970977783
    6. ':
' → logprob: -6.072906970977783
    7. '<|end|>' → logprob: -6.072906970977783
    8. '#' → logprob: -6.072906970977783
    9. ' if' → logprob: -6.197906970977783
    10. '```' → logprob: -6.697906970977783

Token 30: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -1.5151631832122803
    2. '   ' → logprob: -1.6401631832122803
    3. '#' → logprob: -1.7651631832122803
    4. ':' → logprob: -2.0151631832122803
    5. ' if' → logprob: -2.2651631832122803
    6. ' ' → logprob: -2.5151631832122803
    7. ')' → logprob: -3.5151631832122803
    8. '[' → logprob: -4.390163421630859
    9. 'i' → logprob: -4.765163421630859
    10. '    ' → logprob: -4.890163421630859

Token 31: ' N' (ID: 478)
  Prédit: ' N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.012096581049263477
    2. 'N' → logprob: -4.637096405029297
    3. ' K' → logprob: -6.762096405029297
    4. ' ' → logprob: -6.762096405029297
    5. 'K' → logprob: -11.387096405029297
    6. ' not' → logprob: -11.512096405029297
    7. ' ' → logprob: -13.012096405029297
    8. '	N' → logprob: -15.887096405029297
    9. 'not' → logprob: -16.012096405029297
    10. ' (' → logprob: -16.012096405029297

Token 32: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.046174269169569016
    2. '==' → logprob: -3.6711742877960205
    3. ' <' → logprob: -4.421174049377441
    4. ' <=' → logprob: -4.921174049377441
    5. '<' → logprob: -8.671174049377441
    6. '<=' → logprob: -9.046174049377441
    7. ' ' → logprob: -10.296174049377441
    8. '=' → logprob: -11.296174049377441
    9. ' >' → logprob: -11.546174049377441
    10. '   ' → logprob: -12.171174049377441

Token 33: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6326057314872742
    2. '0' → logprob: -0.7576057314872742
    3. ' K' → logprob: -13.25760555267334
    4. '-' → logprob: -13.38260555267334
    5. 'K' → logprob: -13.75760555267334
    6. '=' → logprob: -14.88260555267334
    7. '  ' → logprob: -15.19510555267334
    8. ' ' → logprob: -15.32010555267334
    9. '   ' → logprob: -15.44510555267334
    10. ' -' → logprob: -15.63260555267334

Token 34: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.11284669488668442
    2. ' ' → logprob: -2.237846612930298
    3. '-' → logprob: -11.487846374511719
    4. 'K' → logprob: -11.987846374511719
    5. ' K' → logprob: -12.612846374511719
    6. ' -' → logprob: -13.800346374511719
    7. '  ' → logprob: -14.675346374511719
    8. 'and' → logprob: -14.737846374511719
    9. '```' → logprob: -14.737846374511719
    10. ' ' → logprob: -15.112846374511719

Token 35: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.021004963666200638
    2. ':' → logprob: -4.521005153656006
    3. 'and' → logprob: -4.646005153656006
    4. ' or' → logprob: -8.646004676818848
    5. ' ' → logprob: -9.271004676818848
    6. '   ' → logprob: -11.146004676818848
    7. ' a' → logprob: -12.146004676818848
    8. '	and' → logprob: -12.146004676818848
    9. ':
' → logprob: -12.396004676818848
    10. '  ' → logprob: -13.146004676818848

Token 36: ' K' (ID: 658)
  Prédit: ' K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.0025235803332179785
    2. 'K' → logprob: -6.127523422241211
    3. ' ' → logprob: -8.002523422241211
    4. '<|end|>' → logprob: -12.752523422241211
    5. '	K' → logprob: -15.127523422241211
    6. '  ' → logprob: -15.377523422241211
    7. ' ' → logprob: -15.877523422241211
    8. '<|end|>' → logprob: -16.25252342224121
    9. '>K' → logprob: -16.87752342224121
    10. ',K' → logprob: -17.75252342224121

Token 37: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.10042966157197952
    2. '==' → logprob: -2.3504297733306885
    3. ' ' → logprob: -9.22542953491211
    4. '=' → logprob: -9.72542953491211
    5. '0' → logprob: -10.85042953491211
    6. '<|end|>' → logprob: -10.85042953491211
    7. '  ' → logprob: -12.10042953491211
    8. ' =' → logprob: -12.22542953491211
    9. ')==' → logprob: -12.72542953491211
    10. ' ' → logprob: -12.85042953491211

Token 38: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.011047935113310814
    2. ' ' → logprob: -4.511047840118408
    3. '  ' → logprob: -17.01104736328125
    4. '   ' → logprob: -17.13604736328125
    5. '۰' → logprob: -17.88604736328125
    6. ' ' → logprob: -18.76104736328125
    7. '<|end|>' → logprob: -19.38604736328125
    8. '```' → logprob: -20.26104736328125
    9. '<|end|>' → logprob: -20.26104736328125
    10. '‌' → logprob: -20.63604736328125

Token 39: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0010329303331673145
    2. ' ' → logprob: -6.876032829284668
    3. '<|end|>' → logprob: -16.751033782958984
    4. '  ' → logprob: -17.251033782958984
    5. '۰' → logprob: -17.751033782958984
    6. '   ' → logprob: -18.376033782958984
    7. '<|end|>' → logprob: -19.001033782958984
    8. '-' → logprob: -19.001033782958984
    9. '०' → logprob: -19.438533782958984
    10. '০' → logprob: -19.438533782958984

Token 40: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00042328593553975224
    2. ':
' → logprob: -8.125423431396484
    3. '       ' → logprob: -9.625423431396484
    4. '   ' → logprob: -9.750423431396484
    5. ' :' → logprob: -13.625423431396484
    6. ':return' → logprob: -14.625423431396484
    7. '    ' → logprob: -15.125423431396484
    8. '	break' → logprob: -15.750423431396484
    9. '.' → logprob: -15.875423431396484
    10. '):' → logprob: -16.125423431396484

Token 41: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0004527182609308511
    2. '   ' → logprob: -7.875452518463135
    3. ' break' → logprob: -9.875452995300293
    4. ':' → logprob: -11.625452995300293
    5. '	break' → logprob: -12.875452995300293
    6. 'break' → logprob: -12.875452995300293
    7. '      ' → logprob: -13.125452995300293
    8. '     ' → logprob: -13.375452995300293
    9. '           ' → logprob: -14.125452995300293
    10. '    ' → logprob: -14.500452995300293

Token 42: ' break' (ID: 2338)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'break' (adapté à ' break') → logprob: -0.3165527880191803
    2. ' break' → logprob: -1.316552758216858
    3. '       ' → logprob: -5.941552639007568
    4. '   ' → logprob: -7.441552639007568
    5. '	break' → logprob: -9.691553115844727
    6. '           ' → logprob: -12.316553115844727
    7. '```' → logprob: -13.066553115844727
    8. '_break' → logprob: -13.691553115844727
    9. 'Break' → logprob: -14.316553115844727
    10. '-break' → logprob: -14.566553115844727

Token 43: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.22472062706947327
    2. '
' → logprob: -2.0997207164764404
    3. '    
' → logprob: -2.8497207164764404
    4. '<|end|>' → logprob: -4.849720478057861
    5. '\n' → logprob: -4.974720478057861
    6. '```' → logprob: -5.474720478057861
    7. ')' → logprob: -8.22472095489502
    8. '#' → logprob: -8.34972095489502
    9. '  
' → logprob: -8.47472095489502
    10. 'newline' → logprob: -8.84972095489502

Token 44: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05555585399270058
    2. '
' → logprob: -3.430555820465088
    3. '    
' → logprob: -4.555555820465088
    4. ')' → logprob: -6.180555820465088
    5. '<|end|>' → logprob: -6.305555820465088
    6. 'print' → logprob: -6.930555820465088
    7. '#' → logprob: -7.055555820465088
    8. '```' → logprob: -7.180555820465088
    9. '[' → logprob: -7.305555820465088
    10. 'for' → logprob: -7.805555820465088

Token 45: ' fridge' (ID: 44820)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -1.0784968137741089
    2. '   ' → logprob: -1.2034968137741089
    3. 'count' → logprob: -2.5784969329833984
    4. ' result' → logprob: -2.9534969329833984
    5. 'dp' → logprob: -3.3284969329833984
    6. ' count' → logprob: -4.078496932983398
    7. 's' → logprob: -4.328496932983398
    8. 'sum' → logprob: -4.328496932983398
    9. 'max' → logprob: -4.578496932983398
    10. 'res' → logprob: -4.828496932983398

Token 46: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2827029228210449
    2. '_' → logprob: -2.157702922821045
    3. '_items' → logprob: -2.782702922821045
    4. 's' → logprob: -3.782702922821045
    5. '=' → logprob: -3.907702922821045
    6. '_contents' → logprob: -4.532702922821045
    7. '_space' → logprob: -5.657702922821045
    8. '_size' → logprob: -5.907702922821045
    9. '_count' → logprob: -6.407702922821045
    10. '_sizes' → logprob: -6.532702922821045

Token 47: ' list' (ID: 1562)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.577900767326355
    2. '[]' → logprob: -1.077900767326355
    3. ' [' → logprob: -2.5779008865356445
    4. '[' → logprob: -4.5779008865356445
    5. '{}' → logprob: -5.3279008865356445
    6. ' {}' → logprob: -5.4529008865356445
    7. ' [[]' → logprob: -7.0779008865356445
    8. 'set' → logprob: -7.3279008865356445
    9. ' set' → logprob: -7.9529008865356445
    10. '[list' → logprob: -8.452900886535645

Token 48: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.21161963045597076
    2. '(map' → logprob: -1.8366196155548096
    3. '(range' → logprob: -3.9616196155548096
    4. '()' → logprob: -4.586619853973389
    5. '(input' → logprob: -6.961619853973389
    6. '(int' → logprob: -7.211619853973389
    7. '(
' → logprob: -8.96161937713623
    8. '[int' → logprob: -9.21161937713623
    9. '(filter' → logprob: -10.33661937713623
    10. '([' → logprob: -10.58661937713623

Token 49: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.00028266964363865554
    2. '(' → logprob: -8.250282287597656
    3. '<int' → logprob: -12.000282287597656
    4. 'int' → logprob: -12.625282287597656
    5. '=int' → logprob: -12.625282287597656
    6. ',int' → logprob: -13.125282287597656
    7. '[int' → logprob: -13.250282287597656
    8. '<|end|>' → logprob: -13.375282287597656
    9. '(
' → logprob: -14.125282287597656
    10. '```' → logprob: -14.250282287597656

Token 50: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.024347983300685883
    2. ',input' → logprob: -4.27434778213501
    3. '(' → logprob: -4.77434778213501
    4. 'input' → logprob: -7.27434778213501
    5. ',' → logprob: -7.39934778213501
    6. ')' → logprob: -8.149348258972168
    7. '=input' → logprob: -10.399348258972168
    8. '(),' → logprob: -11.024348258972168
    9. '(
' → logprob: -11.149348258972168
    10. ' input' → logprob: -11.774348258972168

Token 51: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.05488860234618187
    2. ' input' → logprob: -2.9298884868621826
    3. '   ' → logprob: -13.179888725280762
    4. ')' → logprob: -13.679888725280762
    5. '(input' → logprob: -13.679888725280762
    6. '[input' → logprob: -14.679888725280762
    7. '=input' → logprob: -14.804888725280762
    8. '	input' → logprob: -15.054888725280762
    9. ',input' → logprob: -15.054888725280762
    10. 'range' → logprob: -16.054887771606445

Token 52: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0005535095697268844
    2. '()' → logprob: -7.500553607940674
    3. '())' → logprob: -15.875553131103516
    4. '()))' → logprob: -15.875553131103516
    5. ' ().' → logprob: -16.625553131103516
    6. '(' → logprob: -17.000553131103516
    7. '().'' → logprob: -17.250553131103516
    8. '()
' → logprob: -17.375553131103516
    9. '()[' → logprob: -17.500553131103516
    10. '();' → logprob: -17.500553131103516

Token 53: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.03804688900709152
    2. 'strip' → logprob: -3.2880468368530273
    3. 'rstrip' → logprob: -12.913046836853027
    4. '(split' → logprob: -13.413046836853027
    5. ' split' → logprob: -13.663046836853027
    6. ' strip' → logprob: -16.413047790527344
    7. '(strip' → logprob: -16.413047790527344
    8. ')' → logprob: -16.538047790527344
    9. 'read' → logprob: -17.663047790527344
    10. '().' → logprob: -17.788047790527344

Token 54: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.015897106379270554
    2. '())' → logprob: -5.140897274017334
    3. '()' → logprob: -5.265897274017334
    4. '))' → logprob: -5.390897274017334
    5. '()))
' → logprob: -9.390896797180176
    6. '(' → logprob: -10.015896797180176
    7. ')' → logprob: -10.140896797180176
    8. '()));' → logprob: -11.390896797180176
    9. '())))' → logprob: -12.390896797180176
    10. '()))

' → logprob: -12.765896797180176

Token 55: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5117781162261963
    2. 'fr' → logprob: -1.0117781162261963
    3. ' fridge' → logprob: -4.761777877807617
    4. 'count' → logprob: -5.511777877807617
    5. '```' → logprob: -5.761777877807617
    6. 'if' → logprob: -5.886777877807617
    7. ' if' → logprob: -6.761777877807617
    8. 'counts' → logprob: -6.886777877807617
    9. 'counter' → logprob: -7.011777877807617
    10. 's' → logprob: -7.011777877807617

Token 56: ' vampires' (ID: 128429)
  Prédit: 'fr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'fr' → logprob: -0.40245890617370605
    2. '   ' → logprob: -1.777458906173706
    3. 'count' → logprob: -3.777458906173706
    4. ' fridge' → logprob: -3.902458906173706
    5. 'dp' → logprob: -4.152459144592285
    6. 'counter' → logprob: -4.652459144592285
    7. 'free' → logprob: -4.777459144592285
    8. 's' → logprob: -5.527459144592285
    9. 'sorted' → logprob: -5.652459144592285
    10. 'result' → logprob: -5.652459144592285

Token 57: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.06750378757715225
    2. '=' → logprob: -2.8175036907196045
    3. '_count' → logprob: -6.317503929138184
    4. '_' → logprob: -7.067503929138184
    5. '_in' → logprob: -7.192503929138184
    6. '_found' → logprob: -8.192503929138184
    7. '_present' → logprob: -9.067503929138184
    8. '_remaining' → logprob: -9.192503929138184
    9. '=[]' → logprob: -9.317503929138184
    10. 'count' → logprob: -9.442503929138184

Token 58: ' [' (ID: 723)
  Prédit: ' list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.19288887083530426
    2. 'list' → logprob: -1.942888855934143
    3. ' [' → logprob: -4.5678887367248535
    4. '[]' → logprob: -4.6928887367248535
    5. ' []' → logprob: -5.0678887367248535
    6. '[' → logprob: -5.5678887367248535
    7. ' sorted' → logprob: -6.4428887367248535
    8. 'sorted' → logprob: -8.192889213562012
    9. ' K' → logprob: -8.692889213562012
    10. '[list' → logprob: -9.442889213562012

Token 59: 'list' (ID: 2641)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.6455202698707581
    2. 'int' → logprob: -0.7705202698707581
    3. 'map' → logprob: -5.520520210266113
    4. 'list' → logprob: -5.895520210266113
    5. 'False' → logprob: -6.145520210266113
    6. ']' → logprob: -6.270520210266113
    7. '[]' → logprob: -7.520520210266113
    8. ' int' → logprob: -8.395520210266113
    9. 'True' → logprob: -8.395520210266113
    10. ']int' → logprob: -8.395520210266113

Token 60: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.00027134892297908664
    2. '(range' → logprob: -8.875271797180176
    3. '(' → logprob: -9.125271797180176
    4. 'map' → logprob: -11.500271797180176
    5. '()' → logprob: -12.125271797180176
    6. '(int' → logprob: -13.375271797180176
    7. ' map' → logprob: -13.500271797180176
    8. ')' → logprob: -14.000271797180176
    9. ',map' → logprob: -14.125271797180176
    10. '()]' → logprob: -14.375271797180176

Token 61: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0010673471260815859
    2. '(' → logprob: -7.001067161560059
    3. ')' → logprob: -9.876067161560059
    4. '<|end|>' → logprob: -10.626067161560059
    5. '<int' → logprob: -10.751067161560059
    6. ',int' → logprob: -11.126067161560059
    7. ']int' → logprob: -11.376067161560059
    8. '[int' → logprob: -11.501067161560059
    9. ')(' → logprob: -11.751067161560059
    10. '(lambda' → logprob: -12.501067161560059

Token 62: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.6749541163444519
    2. ',' → logprob: -0.9249541163444519
    3. ',input' → logprob: -2.5499541759490967
    4. '(' → logprob: -4.174953937530518
    5. '(),' → logprob: -8.174954414367676
    6. '=input' → logprob: -9.049954414367676
    7. ' ,' → logprob: -9.174954414367676
    8. ')' → logprob: -9.424954414367676
    9. 'input' → logprob: -9.424954414367676
    10. '<|end|>' → logprob: -10.549954414367676

Token 63: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.4741043448448181
    2. ' input' → logprob: -0.9741043448448181
    3. ' ' → logprob: -11.849103927612305
    4. ')' → logprob: -12.099103927612305
    5. '(input' → logprob: -12.349103927612305
    6. ',input' → logprob: -13.349103927612305
    7. '   ' → logprob: -13.599103927612305
    8. '	input' → logprob: -13.599103927612305
    9. '  ' → logprob: -13.786603927612305
    10. '<input' → logprob: -13.911603927612305

Token 64: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -1.1994775377388578e-05
    2. '()' → logprob: -11.375012397766113
    3. ' ().' → logprob: -15.375012397766113
    4. '.' → logprob: -16.500011444091797
    5. '   ' → logprob: -17.875011444091797
    6. '(' → logprob: -18.250011444091797
    7. '()[' → logprob: -18.500011444091797
    8. '()
' → logprob: -19.250011444091797
    9. ')' → logprob: -19.500011444091797
    10. ' .' → logprob: -20.000011444091797

Token 65: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00010211274639004841
    2. 'strip' → logprob: -9.250102043151855
    3. ' split' → logprob: -12.375102043151855
    4. '(split' → logprob: -13.750102043151855
    5. ')' → logprob: -15.000102043151855
    6. 'rstrip' → logprob: -16.250102996826172
    7. '.split' → logprob: -16.375102996826172
    8. '().' → logprob: -16.500102996826172
    9. 'plit' → logprob: -17.125102996826172
    10. 'read' → logprob: -17.250102996826172

Token 66: '()))' (ID: 16829)
  Prédit: '()))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.004328641574829817
    2. '()' → logprob: -5.754328727722168
    3. '())' → logprob: -7.379328727722168
    4. '))' → logprob: -7.629328727722168
    5. '()))
' → logprob: -11.129328727722168
    6. '(' → logprob: -11.629328727722168
    7. '())).' → logprob: -12.504328727722168
    8. '()));' → logprob: -12.629328727722168
    9. '())))' → logprob: -12.754328727722168
    10. '().' → logprob: -12.879328727722168

Token 67: ' for' (ID: 395)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.2492220401763916
    2. ')' → logprob: -2.4992220401763916
    3. ')]' → logprob: -2.6242220401763916
    4. '()' → logprob: -3.2492220401763916
    5. '()]' → logprob: -3.6242220401763916
    6. '()[' → logprob: -9.124221801757812
    7. '(' → logprob: -9.874221801757812
    8. '()),' → logprob: -9.999221801757812
    9. '   ' → logprob: -10.124221801757812
    10. ']' → logprob: -10.124221801757812

Token 68: ' _' (ID: 1175)
  Prédit: ' _'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' _' → logprob: -0.6337136030197144
    2. ' range' → logprob: -0.8837136030197144
    3. '_' → logprob: -2.883713722229004
    4. ' i' → logprob: -9.133713722229004
    5. 'range' → logprob: -10.383713722229004
    6. '_range' → logprob: -10.508713722229004
    7. ' ' → logprob: -10.508713722229004
    8. ' in' → logprob: -11.383713722229004
    9. ' xrange' → logprob: -13.008713722229004
    10. '(range' → logprob: -14.008713722229004

Token 69: ' in' (ID: 306)
  Prédit: ' range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.17212383449077606
    2. ' in' → logprob: -2.547123908996582
    3. 'range' → logprob: -2.547123908996582
    4. ' xrange' → logprob: -7.672123908996582
    5. ' _' → logprob: -8.672123908996582
    6. ' ' → logprob: -8.672123908996582
    7. 'in' → logprob: -8.797123908996582
    8. '_' → logprob: -9.047123908996582
    9. ' ran' → logprob: -9.172123908996582
    10. 's' → logprob: -9.422123908996582

Token 70: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.4740837514400482
    2. 'range' → logprob: -0.9740837812423706
    3. '	range' → logprob: -12.09908390045166
    4. ' ' → logprob: -14.47408390045166
    5. '(range' → logprob: -15.47408390045166
    6. '_' → logprob: -15.97408390045166
    7. '  ' → logprob: -16.099082946777344
    8. 'rang' → logprob: -16.224082946777344
    9. '_range' → logprob: -16.724082946777344
    10. '   ' → logprob: -16.849082946777344

Token 71: '(N' (ID: 10564)
  Prédit: '(K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(K' → logprob: -0.10025918483734131
    2. '(' → logprob: -2.350259304046631
    3. '(N' → logprob: -10.225258827209473
    4. '(k' → logprob: -12.225258827209473
    5. '(
' → logprob: -12.225258827209473
    6. ' (' → logprob: -12.475258827209473
    7. ' K' → logprob: -14.475258827209473
    8. '(int' → logprob: -14.475258827209473
    9. '(s' → logprob: -15.600258827209473
    10. '(Q' → logprob: -15.850258827209473

Token 72: ')]

' (ID: 56882)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')]' → logprob: -9.579495235811919e-05
    2. ')' → logprob: -10.00009536743164
    3. ']' → logprob: -10.37509536743164
    4. ')])' → logprob: -12.00009536743164
    5. '   ' → logprob: -12.62509536743164
    6. '])]' → logprob: -12.87509536743164
    7. ')]
' → logprob: -13.00009536743164
    8. '])' → logprob: -13.37509536743164
    9. ' )' → logprob: -13.50009536743164
    10. '))' → logprob: -14.00009536743164

Token 73: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11110620945692062
    2. '
' → logprob: -2.6111061573028564
    3. 'v' → logprob: -3.9861061573028564
    4. '    
' → logprob: -5.2361063957214355
    5. '#' → logprob: -7.1111063957214355
    6. '<|end|>' → logprob: -7.1111063957214355
    7. ':' → logprob: -7.2361063957214355
    8. '    ' → logprob: -7.3611063957214355
    9. 'result' → logprob: -7.4861063957214355
    10. 'if' → logprob: -7.9861063957214355

Token 74: ' total' (ID: 3609)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dp' → logprob: -0.267844021320343
    2. 'v' → logprob: -2.0178439617156982
    3. '   ' → logprob: -3.3928439617156982
    4. 'def' → logprob: -5.267844200134277
    5. ' dp' → logprob: -5.267844200134277
    6. 'possible' → logprob: -5.267844200134277
    7. 'fr' → logprob: -5.392844200134277
    8. 'used' → logprob: -5.642844200134277
    9. 'available' → logprob: -5.767844200134277
    10. 'valid' → logprob: -5.767844200134277

Token 75: '_need' (ID: 188284)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.0368284173309803
    2. ' =' → logprob: -5.036828517913818
    3. '=' → logprob: -5.286828517913818
    4. '_space' → logprob: -5.411828517913818
    5. '_cost' → logprob: -5.911828517913818
    6. '_sum' → logprob: -6.286828517913818
    7. '_capacity' → logprob: -6.411828517913818
    8. '_time' → logprob: -6.536828517913818
    9. '_amount' → logprob: -6.786828517913818
    10. '_energy' → logprob: -6.786828517913818

Token 76: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.1610122174024582
    2. '=' → logprob: -1.9110121726989746
    3. 's' → logprob: -7.786012172698975
    4. '_' → logprob: -8.286012649536133
    5. ',' → logprob: -9.911012649536133
    6. ' ' → logprob: -10.786012649536133
    7. 'ed' → logprob: -11.661012649536133
    8. '  ' → logprob: -12.286012649536133
    9. ' +=' → logprob: -12.411012649536133
    10. ')' → logprob: -12.411012649536133

Token 77: ' [' (ID: 723)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.43201637268066406
    2. ' sum' → logprob: -1.682016372680664
    3. ' ' → logprob: -2.182016372680664
    4. 'sum' → logprob: -3.057016372680664
    5. ' K' → logprob: -5.807016372680664
    6. '[' → logprob: -7.557016372680664
    7. ' [' → logprob: -7.557016372680664
    8. ' max' → logprob: -8.307016372680664
    9. 'K' → logprob: -8.682016372680664
    10. 'v' → logprob: -9.057016372680664

Token 78: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.000559108448214829
    2. ' ' → logprob: -8.500558853149414
    3. 'K' → logprob: -8.875558853149414
    4. 'fr' → logprob: -9.500558853149414
    5. 'v' → logprob: -9.875558853149414
    6. ']' → logprob: -10.500558853149414
    7. 'sum' → logprob: -11.000558853149414
    8. '1' → logprob: -11.500558853149414
    9. ' K' → logprob: -12.125558853149414
    10. ')' → logprob: -12.250558853149414

Token 79: ']*' (ID: 18579)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.00411829212680459
    2. ' ]' → logprob: -6.2541184425354
    3. ',' → logprob: -7.0041184425354
    4. ' for' → logprob: -7.7541184425354
    5. ']*' → logprob: -7.7541184425354
    6. ')' → logprob: -9.004117965698242
    7. 'for' → logprob: -9.254117965698242
    8. '<|end|>' → logprob: -9.879117965698242
    9. '   ' → logprob: -10.129117965698242
    10. ']+' → logprob: -10.879117965698242

Token 80: 'K' (ID: 42)
  Prédit: 'K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.06525306403636932
    2. '(K' → logprob: -4.440253257751465
    3. '101' → logprob: -4.440253257751465
    4. '100' → logprob: -4.565253257751465
    5. '10' → logprob: -5.440253257751465
    6. '31' → logprob: -5.690253257751465
    7. '5' → logprob: -5.815253257751465
    8. '11' → logprob: -5.940253257751465
    9. '7' → logprob: -6.190253257751465
    10. '21' → logprob: -6.315253257751465

Token 81: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.4559973478317261
    2. 'for' → logprob: -1.455997347831726
    3. ' for' → logprob: -2.0809974670410156
    4. '<|end|>' → logprob: -5.955997467041016
    5. '   ' → logprob: -6.330997467041016
    6. ' 
' → logprob: -6.580997467041016
    7. '\n' → logprob: -7.080997467041016
    8. '' → logprob: -7.955997467041016
    9. '  
' → logprob: -8.080997467041016
    10. '    
' → logprob: -8.205997467041016

Token 82: '   ' (ID: 271)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -1.1286934614181519
    2. '
' → logprob: -1.2536934614181519
    3. 'for' → logprob: -1.3786934614181519
    4. '   ' → logprob: -2.5036935806274414
    5. '<|end|>' → logprob: -3.2536935806274414
    6. ' ' → logprob: -5.253693580627441
    7. ' 
' → logprob: -5.628693580627441
    8. '\n' → logprob: -5.753693580627441
    9. '    
' → logprob: -6.253693580627441
    10. '	for' → logprob: -6.628693580627441

Token 83: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.014773071743547916
    2. ' for' → logprob: -4.389772891998291
    3. '   ' → logprob: -6.139772891998291
    4. '	for' → logprob: -9.76477336883545
    5. '<|end|>' → logprob: -11.26477336883545
    6. '
' → logprob: -11.76477336883545
    7. ' ' → logprob: -12.13977336883545
    8. ')' → logprob: -12.51477336883545
    9. '  ' → logprob: -13.01477336883545
    10. '\t' → logprob: -13.13977336883545

Token 84: ' v' (ID: 323)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.575124979019165
    2. 'v' → logprob: -1.825124979019165
    3. ' v' → logprob: -2.200124979019165
    4. 'i' → logprob: -2.200124979019165
    5. ' vampire' → logprob: -3.325124979019165
    6. ' j' → logprob: -5.075124740600586
    7. 'j' → logprob: -5.075124740600586
    8. ' vamp' → logprob: -6.575124740600586
    9. ' r' → logprob: -7.700124740600586
    10. ' day' → logprob: -7.762624740600586

Token 85: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.26348599791526794
    2. 'amp' → logprob: -1.6384860277175903
    3. ' range' → logprob: -4.138485908508301
    4. 'range' → logprob: -4.888485908508301
    5. 'in' → logprob: -5.888485908508301
    6. 'amps' → logprob: -6.138485908508301
    7. 'am' → logprob: -6.513485908508301
    8. '   ' → logprob: -7.013485908508301
    9. ' for' → logprob: -7.013485908508301
    10. 'ampi' → logprob: -7.263485908508301

Token 86: ' vampires' (ID: 128429)
  Prédit: ' vampires'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' vampires' → logprob: -0.6155582666397095
    2. 'v' → logprob: -1.3655582666397095
    3. ' range' → logprob: -2.11555814743042
    4. 'range' → logprob: -2.49055814743042
    5. ' v' → logprob: -7.61555814743042
    6. '[v' → logprob: -8.990558624267578
    7. ' vamp' → logprob: -9.365558624267578
    8. ' ' → logprob: -9.490558624267578
    9. 'vap' → logprob: -10.490558624267578
    10. '   ' → logprob: -10.490558624267578

Token 87: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0002905334113165736
    2. ':
' → logprob: -8.500290870666504
    3. '):' → logprob: -9.625290870666504
    4. '[' → logprob: -11.750290870666504
    5. ' :' → logprob: -12.500290870666504
    6. ':**' → logprob: -12.625290870666504
    7. '[:]' → logprob: -13.125290870666504
    8. ']:' → logprob: -14.375290870666504
    9. '<|end|>' → logprob: -14.375290870666504
    10. '>:' → logprob: -14.500290870666504

Token 88: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.4204812049865723
    2. ':' → logprob: -1.5454812049865723
    3. ' ' → logprob: -1.7954812049865723
    4. '       ' → logprob: -2.0454812049865723
    5. '    ' → logprob: -2.1704812049865723
    6. ' for' → logprob: -3.2954812049865723
    7. ' range' → logprob: -3.5454812049865723
    8. 'range' → logprob: -4.045481204986572
    9. '  ' → logprob: -4.170481204986572
    10. ' :' → logprob: -4.920481204986572

Token 89: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.16037604212760925
    2. ' for' → logprob: -1.9103760719299316
    3. '   ' → logprob: -9.035375595092773
    4. ' ' → logprob: -11.035375595092773
    5. '	for' → logprob: -11.910375595092773
    6. 'range' → logprob: -12.410375595092773
    7. ' range' → logprob: -13.285375595092773
    8. '    ' → logprob: -14.035375595092773
    9. '  ' → logprob: -14.285375595092773
    10. '```' → logprob: -14.535375595092773

Token 90: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.10428906232118607
    2. ' j' → logprob: -3.1042890548706055
    3. 'i' → logprob: -3.3542890548706055
    4. 'j' → logprob: -4.2292890548706055
    5. ' range' → logprob: -5.6042890548706055
    6. 'range' → logprob: -7.6042890548706055
    7. 'k' → logprob: -8.604289054870605
    8. ' idx' → logprob: -8.729289054870605
    9. ' k' → logprob: -9.104289054870605
    10. ' ' → logprob: -10.604289054870605

Token 91: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.020740997046232224
    2. 'in' → logprob: -4.020740985870361
    3. ',' → logprob: -6.020740985870361
    4. ' ' → logprob: -9.14574146270752
    5. ' ,' → logprob: -10.52074146270752
    6. '	in' → logprob: -11.64574146270752
    7. '  ' → logprob: -12.77074146270752
    8. 'n' → logprob: -12.89574146270752
    9. 's' → logprob: -13.27074146270752
    10. 'x' → logprob: -13.52074146270752

Token 92: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.16023002564907074
    2. 'range' → logprob: -1.910230040550232
    3. '	range' → logprob: -12.410229682922363
    4. ' ' → logprob: -13.910229682922363
    5. '(range' → logprob: -15.285229682922363
    6. ' xrange' → logprob: -15.285229682922363
    7. '   ' → logprob: -16.41023063659668
    8. '  ' → logprob: -16.66023063659668
    9. '<|end|>' → logprob: -16.78523063659668
    10. '_range' → logprob: -17.53523063659668

Token 93: '(K' (ID: 28797)
  Prédit: ' K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.7221310138702393
    2. '(K' → logprob: -0.8471310138702393
    3. '(' → logprob: -2.8471310138702393
    4. ' ' → logprob: -4.47213077545166
    5. '	K' → logprob: -4.59713077545166
    6. '   ' → logprob: -6.22213077545166
    7. ' (' → logprob: -6.72213077545166
    8. 'K' → logprob: -6.97213077545166
    9. '    ' → logprob: -7.59713077545166
    10. '	' → logprob: -7.72213077545166

Token 94: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.04986235871911049
    2. '):
' → logprob: -3.0498623847961426
    3. ' ):' → logprob: -6.924862384796143
    4. ')' → logprob: -8.674861907958984
    5. ' ):
' → logprob: -9.424861907958984
    6. ':' → logprob: -11.049861907958984
    7. ' )' → logprob: -11.924861907958984
    8. '):
' → logprob: -12.299861907958984
    9. '   ' → logprob: -12.424861907958984
    10. ' ' → logprob: -13.049861907958984

Token 95: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.12098293006420135
    2. ' total' → logprob: -2.6209828853607178
    3. 'total' → logprob: -3.4959828853607178
    4. '           ' → logprob: -4.870983123779297
    5. '+' → logprob: -6.745983123779297
    6. ' ' → logprob: -7.495983123779297
    7. '   ' → logprob: -7.745983123779297
    8. ' +' → logprob: -8.995983123779297
    9. '0' → logprob: -9.120983123779297
    10. '	total' → logprob: -9.120983123779297

Token 96: ' total' (ID: 3609)
  Prédit: 'total'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'total' (adapté à ' total') → logprob: -0.08047295361757278
    2. ' total' → logprob: -2.955472946166992
    3. '       ' → logprob: -3.705472946166992
    4. '           ' → logprob: -7.580472946166992
    5. '   ' → logprob: -8.955472946166992
    6. '	total' → logprob: -11.080472946166992
    7. ' ' → logprob: -11.955472946166992
    8. 'v' → logprob: -12.080472946166992
    9. '               ' → logprob: -12.580472946166992
    10. '_total' → logprob: -13.830472946166992

Token 97: '_need' (ID: 188284)
  Prédit: '_need'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_need' → logprob: -0.0002557369298301637
    2. 'need' → logprob: -8.875255584716797
    3. '_' → logprob: -9.875255584716797
    4. ']' → logprob: -11.375255584716797
    5. ']+=' → logprob: -11.625255584716797
    6. '[i' → logprob: -12.125255584716797
    7. '+=' → logprob: -12.250255584716797
    8. ']_' → logprob: -12.375255584716797
    9. '```' → logprob: -12.375255584716797
    10. '_have' → logprob: -12.375255584716797

Token 98: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.00018089536752086133
    2. ' +=' → logprob: -9.750181198120117
    3. '[' → logprob: -10.000181198120117
    4. ']+=' → logprob: -10.500181198120117
    5. '+=' → logprob: -10.625181198120117
    6. '][' → logprob: -11.750181198120117
    7. ' [' → logprob: -11.750181198120117
    8. '```' → logprob: -12.875181198120117
    9. ']' → logprob: -13.125181198120117
    10. '[I' → logprob: -13.500181198120117

Token 99: ']' (ID: 60)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.38775864243507385
    2. ' +=' → logprob: -1.1377586126327515
    3. ']+=' → logprob: -7.512758731842041
    4. '+' → logprob: -8.012758255004883
    5. '+=(' → logprob: -12.762758255004883
    6. ' +' → logprob: -13.137758255004883
    7. ')' → logprob: -13.512758255004883
    8. '+='' → logprob: -14.012758255004883
    9. ')+' → logprob: -14.387758255004883
    10. ']' → logprob: -14.512758255004883

Token 100: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.0026669732760638
    2. ' +=' → logprob: -6.00266695022583
    3. '+' → logprob: -9.002667427062988
    4. ']+=' → logprob: -9.752667427062988
    5. '=' → logprob: -12.002667427062988
    6. '+=(' → logprob: -13.127667427062988
    7. '+='' → logprob: -14.252667427062988
    8. '<|end|>' → logprob: -14.752667427062988
    9. '>' → logprob: -15.502667427062988
    10. '```' → logprob: -16.127666473388672

Token 101: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.03364662081003189
    2. ' v' → logprob: -3.408646583557129
    3. '	v' → logprob: -14.908646583557129
    4. '   ' → logprob: -15.408646583557129
    5. '(v' → logprob: -16.033647537231445
    6. '*v' → logprob: -16.908647537231445
    7. ' ' → logprob: -16.908647537231445
    8. ')v' → logprob: -17.408647537231445
    9. '[v' → logprob: -17.658647537231445
    10. '-v' → logprob: -17.908647537231445

Token 102: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -5.4192871175473556e-05
    2. '[' → logprob: -10.000054359436035
    3. 'i' → logprob: -12.250054359436035
    4. ' [' → logprob: -12.875054359436035
    5. ' i' → logprob: -15.250054359436035
    6. '[v' → logprob: -15.625054359436035
    7. '   ' → logprob: -15.625054359436035
    8. '[I' → logprob: -15.875054359436035
    9. '[
' → logprob: -16.00005340576172
    10. '```' → logprob: -16.12505340576172

Token 103: ']

' (ID: 3144)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']' → logprob: -0.2742041051387787
    2. ')' → logprob: -1.649204134941101
    3. '<|end|>' → logprob: -3.2742040157318115
    4. ' ]' → logprob: -4.899204254150391
    5. ' )' → logprob: -7.274204254150391
    6. ')]' → logprob: -7.524204254150391
    7. '<|end|>' → logprob: -8.02420425415039
    8. '[i' → logprob: -8.77420425415039
    9. ' ' → logprob: -8.89920425415039
    10. '*' → logprob: -9.27420425415039

Token 104: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6904643177986145
    2. 'if' → logprob: -1.1904642581939697
    3. ' if' → logprob: -1.6904642581939697
    4. ' for' → logprob: -5.815464496612549
    5. 'for' → logprob: -5.815464496612549
    6. '    
' → logprob: -7.065464496612549
    7. 'possible' → logprob: -7.690464496612549
    8. 'valid' → logprob: -7.815464496612549
    9. '<|end|>' → logprob: -7.815464496612549
    10. '
' → logprob: -7.940464496612549

Token 105: ' can' (ID: 665)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.5411024689674377
    2. 'if' → logprob: -0.9161024689674377
    3. '   ' → logprob: -4.541102409362793
    4. 'possible' → logprob: -6.166102409362793
    5. ' for' → logprob: -7.041102409362793
    6. ' possible' → logprob: -7.166102409362793
    7. ' ' → logprob: -7.291102409362793
    8. ' valid' → logprob: -7.416102409362793
    9. 'valid' → logprob: -7.541102409362793
    10. 'for' → logprob: -7.916102409362793

Token 106: '_prepare' (ID: 121133)
  Prédit: '_buy'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_buy' → logprob: -1.1212354898452759
    2. '_' → logprob: -1.8712354898452759
    3. '_use' → logprob: -1.8712354898452759
    4. '_store' → logprob: -1.9962354898452759
    5. ' =' → logprob: -2.3712353706359863
    6. '_feed' → logprob: -3.6212353706359863
    7. '_save' → logprob: -3.9962353706359863
    8. '_hold' → logprob: -4.121235370635986
    9. '_make' → logprob: -4.496235370635986
    10. '_keep' → logprob: -4.496235370635986

Token 107: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.03365273401141167
    2. '=' → logprob: -3.4086527824401855
    3. ' ' → logprob: -12.158652305603027
    4. '_' → logprob: -14.408652305603027
    5. '=True' → logprob: -14.658652305603027
    6. '  ' → logprob: -16.033653259277344
    7. ' =
' → logprob: -16.033653259277344
    8. '=False' → logprob: -16.658653259277344
    9. '   ' → logprob: -16.783653259277344
    10. '[' → logprob: -16.908653259277344

Token 108: ' all' (ID: 722)
  Prédit: 'all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'all' → logprob: -0.6500924229621887
    2. 'True' → logprob: -1.275092363357544
    3. ' True' → logprob: -2.275092363357544
    4. ' all' → logprob: -2.400092363357544
    5. 'sum' → logprob: -6.525092601776123
    6. '"' → logprob: -7.775092601776123
    7. '   ' → logprob: -7.775092601776123
    8. 'False' → logprob: -7.775092601776123
    9. ' sum' → logprob: -8.025092124938965
    10. '[' → logprob: -8.150092124938965

Token 109: '(total' (ID: 39744)
  Prédit: '(total'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(total' → logprob: -0.49415844678878784
    2. '(fr' → logprob: -1.2441585063934326
    3. '(' → logprob: -2.3691585063934326
    4. '(f' → logprob: -5.6191582679748535
    5. '(x' → logprob: -6.7441582679748535
    6. '(t' → logprob: -6.7441582679748535
    7. '((' → logprob: -7.7441582679748535
    8. ' (' → logprob: -8.119158744812012
    9. '([' → logprob: -8.119158744812012
    10. '(food' → logprob: -8.244158744812012

Token 110: '_need' (ID: 188284)
  Prédit: '_need'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_need' → logprob: -0.00015121731848921627
    2. 'need' → logprob: -9.125151634216309
    3. '[i' → logprob: -11.000151634216309
    4. '_needed' → logprob: -11.500151634216309
    5. '_' → logprob: -12.125151634216309
    6. '_have' → logprob: -12.625151634216309
    7. '[' → logprob: -12.875151634216309
    8. '[_' → logprob: -13.875151634216309
    9. '_ne' → logprob: -14.500151634216309
    10. ' _' → logprob: -14.750151634216309

Token 111: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -1.652451464906335e-05
    2. '[' → logprob: -12.250016212463379
    3. ' <=' → logprob: -12.375016212463379
    4. ')' → logprob: -13.000016212463379
    5. '<=' → logprob: -13.250016212463379
    6. 'i' → logprob: -13.625016212463379
    7. '[j' → logprob: -14.375016212463379
    8. ' [' → logprob: -14.625016212463379
    9. '   ' → logprob: -15.125016212463379
    10. '[
' → logprob: -15.875016212463379

Token 112: ']' (ID: 60)
  Prédit: ' <='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.005401191767305136
    2. '<=' → logprob: -5.255401134490967
    3. ' ' → logprob: -8.755401611328125
    4. ']<=' → logprob: -13.380401611328125
    5. ')' → logprob: -13.505401611328125
    6. '[' → logprob: -13.755401611328125
    7. ')<=' → logprob: -13.755401611328125
    8. '[i' → logprob: -14.255401611328125
    9. 'le' → logprob: -14.755401611328125
    10. '  ' → logprob: -15.005401611328125

Token 113: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.0430498905479908
    2. '<=' → logprob: -3.1680498123168945
    3. ' ' → logprob: -10.168049812316895
    4. ')<=' → logprob: -12.168049812316895
    5. ')' → logprob: -12.918049812316895
    6. ']<=' → logprob: -13.168049812316895
    7. '<|end|>' → logprob: -14.293049812316895
    8. '[i' → logprob: -14.918049812316895
    9. '[' → logprob: -15.043049812316895
    10. ' ' → logprob: -15.418049812316895

Token 114: ' fridge' (ID: 44820)
  Prédit: ' fridge'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' fridge' → logprob: -0.25196588039398193
    2. 'fr' → logprob: -1.501965880393982
    3. ' ' → logprob: -11.251965522766113
    4. '   ' → logprob: -12.001965522766113
    5. ' fr' → logprob: -12.501965522766113
    6. '	fr' → logprob: -12.876965522766113
    7. ' refrigerator' → logprob: -13.001965522766113
    8. '(fr' → logprob: -13.876965522766113
    9. '```' → logprob: -14.001965522766113
    10. 'frig' → logprob: -14.001965522766113

Token 115: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -9.014684110297821e-06
    2. '[' → logprob: -12.000008583068848
    3. ' [' → logprob: -12.875008583068848
    4. '[
' → logprob: -16.375009536743164
    5. '```' → logprob: -17.875009536743164
    6. ')' → logprob: -18.625009536743164
    7. '[I' → logprob: -18.625009536743164
    8. ' i' → logprob: -18.750009536743164
    9. '(i' → logprob: -19.250009536743164
    10. ' ' → logprob: -19.250009536743164

Token 116: ']' (ID: 60)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.011397935450077057
    2. ' )' → logprob: -4.511397838592529
    3. ' for' → logprob: -8.011398315429688
    4. ' ' → logprob: -11.636398315429688
    5. 'for' → logprob: -12.386398315429688
    6. ']' → logprob: -13.761398315429688
    7. '   ' → logprob: -14.261398315429688
    8. '[' → logprob: -14.761398315429688
    9. '）' → logprob: -14.761398315429688
    10. ')
' → logprob: -14.886398315429688

Token 117: ' for' (ID: 395)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6434897184371948
    2. ' for' → logprob: -0.7684897184371948
    3. ' )' → logprob: -4.893489837646484
    4. 'for' → logprob: -5.768489837646484
    5. ' ' → logprob: -9.393489837646484
    6. '   ' → logprob: -9.643489837646484
    7. '<|end|>' → logprob: -11.393489837646484
    8. ')
' → logprob: -11.518489837646484
    9. '    ' → logprob: -11.518489837646484
    10. '	for' → logprob: -11.768489837646484

Token 118: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.4327933192253113
    2. ' range' → logprob: -1.182793378829956
    3. 'i' → logprob: -3.182793378829956
    4. 'range' → logprob: -5.682793140411377
    5. ' ' → logprob: -12.057793617248535
    6. ')' → logprob: -13.307793617248535
    7. ' in' → logprob: -13.807793617248535
    8. '  ' → logprob: -14.682793617248535
    9. '   ' → logprob: -14.932793617248535
    10. '	i' → logprob: -15.432793617248535

Token 119: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.06388586014509201
    2. 'in' → logprob: -2.8138859272003174
    3. ' range' → logprob: -6.688885688781738
    4. 'range' → logprob: -7.313885688781738
    5. ' ' → logprob: -13.438885688781738
    6. ')' → logprob: -13.563885688781738
    7. '(range' → logprob: -14.063885688781738
    8. '<|end|>' → logprob: -14.313885688781738
    9. '   ' → logprob: -14.688885688781738
    10. '  ' → logprob: -15.063885688781738

Token 120: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.16022777557373047
    2. ' range' → logprob: -1.9102277755737305
    3. '   ' → logprob: -13.78522777557373
    4. ' ' → logprob: -13.91022777557373
    5. '(range' → logprob: -13.91022777557373
    6. '	range' → logprob: -14.41022777557373
    7. '  ' → logprob: -16.160228729248047
    8. ')' → logprob: -16.535228729248047
    9. 'rang' → logprob: -17.410228729248047
    10. ' xrange' → logprob: -18.160228729248047

Token 121: '(K' (ID: 28797)
  Prédit: '(K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(K' → logprob: -2.7610454708337784e-05
    2. '(' → logprob: -11.250027656555176
    3. '(range' → logprob: -12.250027656555176
    4. 'K' → logprob: -12.250027656555176
    5. '(k' → logprob: -13.000027656555176
    6. 'range' → logprob: -13.625027656555176
    7. ')' → logprob: -14.875027656555176
    8. ' range' → logprob: -15.000027656555176
    9. '(len' → logprob: -15.125027656555176
    10. '   ' → logprob: -15.625027656555176

Token 122: '))
' (ID: 2210)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0004353181866463274
    2. ' )' → logprob: -7.7504353523254395
    3. '))' → logprob: -12.750434875488281
    4. '   ' → logprob: -14.250434875488281
    5. ')
' → logprob: -15.250434875488281
    6. ' ' → logprob: -15.625434875488281
    7. '):' → logprob: -16.00043487548828
    8. ')`' → logprob: -16.62543487548828
    9. ')...' → logprob: -17.25043487548828
    10. ')**' → logprob: -17.25043487548828

Token 123: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.036903221160173416
    2. '   ' → logprob: -3.661903142929077
    3. ':
' → logprob: -5.286903381347656
    4. ' if' → logprob: -6.161903381347656
    5. 'if' → logprob: -6.661903381347656
    6. ')' → logprob: -7.536903381347656
    7. '
' → logprob: -7.661903381347656
    8. '    
' → logprob: -8.786903381347656
    9. '\n' → logprob: -8.786903381347656
    10. '<|end|>' → logprob: -8.911903381347656

Token 124: ' print' (ID: 2123)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.12240110337734222
    2. ':' → logprob: -3.372400999069214
    3. 'if' → logprob: -3.497400999069214
    4. '   ' → logprob: -3.872400999069214
    5. '\n' → logprob: -4.497401237487793
    6. ' if' → logprob: -4.747401237487793
    7. ':
' → logprob: -5.247401237487793
    8. '    
' → logprob: -6.622401237487793
    9. 'print' (adapté à ' print') → logprob: -7.122401237487793
    10. '  
' → logprob: -7.122401237487793

Token 125: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.24568414688110352
    2. '("' → logprob: -1.8706841468811035
    3. '('' → logprob: -3.1206841468811035
    4. '("("' → logprob: -4.6206841468811035
    5. '(can' → logprob: -5.2456841468811035
    6. '()' → logprob: -6.2456841468811035
    7. '("")' → logprob: -7.1206841468811035
    8. '(True' → logprob: -7.3706841468811035
    9. '("(' → logprob: -7.6206841468811035
    10. '(bool' → logprob: -8.245683670043945

Token 126: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.14693349599838257
    2. 'yes' → logprob: -2.3969335556030273
    3. 'possible' → logprob: -4.021933555603027
    4. 'Possible' → logprob: -4.271933555603027
    5. '"' → logprob: -5.146933555603027
    6. 'YES' → logprob: -5.896933555603027
    7. 'Y' → logprob: -6.271933555603027
    8. 'poss' → logprob: -7.021933555603027
    9. 'Sim' → logprob: -8.521933555603027
    10. 'No' → logprob: -8.646933555603027

Token 127: '"' (ID: 1)
  Prédit: '"'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.06197956204414368
    2. '")' → logprob: -2.8119795322418213
    3. '")
' → logprob: -11.811979293823242
    4. ' if' → logprob: -12.936979293823242
    5. '```' → logprob: -14.561979293823242
    6. 'if' → logprob: -14.686979293823242
    7. '\n' → logprob: -15.061979293823242
    8. ')' → logprob: -15.311979293823242
    9. '")

' → logprob: -16.061979293823242
    10. '"If' → logprob: -16.311979293823242

Token 128: ' if' (ID: 538)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3234216272830963
    2. ' if' → logprob: -1.323421597480774
    3. 'if' → logprob: -4.698421478271484
    4. ',' → logprob: -7.823421478271484
    5. '")' → logprob: -8.698421478271484
    6. ' else' → logprob: -9.073421478271484
    7. '"' → logprob: -9.198421478271484
    8. 'else' → logprob: -9.323421478271484
    9. '   ' → logprob: -9.448421478271484
    10. ' )' → logprob: -10.448421478271484

Token 129: ' can' (ID: 665)
  Prédit: ' can'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' can' → logprob: -0.00033677343162707984
    2. 'can' → logprob: -8.000336647033691
    3. '	can' → logprob: -13.875336647033691
    4. ' ' → logprob: -15.375336647033691
    5. '_can' → logprob: -16.250337600708008
    6. '(can' → logprob: -16.875337600708008
    7. ' ' → logprob: -17.125337600708008
    8. ' not' → logprob: -19.125337600708008
    9. 'Can' → logprob: -19.250337600708008
    10. '  ' → logprob: -19.625337600708008

Token 130: '_prepare' (ID: 121133)
  Prédit: '_prepare'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_prepare' → logprob: -1.652451464906335e-05
    2. '_' → logprob: -11.875016212463379
    3. 'prepare' → logprob: -12.500016212463379
    4. ' _' → logprob: -12.500016212463379
    5. 'Prepare' → logprob: -13.750016212463379
    6. '_continue' → logprob: -14.875016212463379
    7. ' prepare' → logprob: -16.375017166137695
    8. '_create' → logprob: -16.375017166137695
    9. '_have' → logprob: -17.250017166137695
    10. '   ' → logprob: -17.500017166137695

Token 131: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.0021861877758055925
    2. 'else' → logprob: -6.127186298370361
    3. ' ' → logprob: -14.002185821533203
    4. ')' → logprob: -16.627185821533203
    5. '	else' → logprob: -16.627185821533203
    6. '   ' → logprob: -17.127185821533203
    7. '  ' → logprob: -17.627185821533203
    8. '()' → logprob: -18.127185821533203
    9. '    ' → logprob: -18.127185821533203
    10. ' ' → logprob: -18.502185821533203

Token 132: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.029783355072140694
    2. ' "' → logprob: -3.529783248901367
    3. ' ' → logprob: -11.279783248901367
    4. ')' → logprob: -11.404783248901367
    5. '"No' → logprob: -12.154783248901367
    6. '   ' → logprob: -13.154783248901367
    7. ' ' → logprob: -14.029783248901367
    8. ''' → logprob: -15.154783248901367
    9. '	' → logprob: -15.779783248901367
    10. '  ' → logprob: -15.904783248901367

Token 133: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.005376525688916445
    2. '"No' → logprob: -5.25537633895874
    3. ' No' → logprob: -8.880376815795898
    4. '"' → logprob: -12.880376815795898
    5. 'NO' → logprob: -14.630376815795898
    6. 'no' → logprob: -16.1303768157959
    7. ' ' → logprob: -16.2553768157959
    8. '“No' → logprob: -16.5053768157959
    9. '_No' → logprob: -16.6303768157959
    10. '")' → logprob: -17.3803768157959

Token 134: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.14743520319461823
    2. ')' → logprob: -2.147435188293457
    3. ')")' → logprob: -3.897435188293457
    4. ')"' → logprob: -12.772435188293457
    5. '")
' → logprob: -14.897435188293457
    6. ')")
' → logprob: -15.147435188293457
    7. '}")' → logprob: -15.147435188293457
    8. ' )' → logprob: -15.772435188293457
    9. '!")' → logprob: -15.897435188293457
    10. ')
' → logprob: -16.397436141967773


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 132
Tokens correctement prédits (1ère position, stricte): 68
Tokens correctement prédits (1ère position, avec adaptation): 74
Tokens correctement prédits (top 10): 113
Précision stricte (1ère position): 51.52%
Précision adaptée (1ère position): 56.06%
Précision (top 10): 85.61%
================================================================================
