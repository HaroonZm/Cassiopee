================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 16:58:06
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
e = list(map(int, input().split()))
print("yes" if sorted(e)[0] == sorted(e)[1] and sorted(e)[2] == sorted(e)[3] else "no")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'e' (ID: 68)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' list' (ID: 1562)
  → Token d'amorce (pas de prédiction)

Token 3: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.12056023627519608
    2. '[' → logprob: -2.2455601692199707
    3. '.' → logprob: -5.120560169219971
    4. '(e' → logprob: -7.495560169219971
    5. 'e' → logprob: -8.495560646057129
    6. '[(' → logprob: -8.495560646057129
    7. '[e' → logprob: -8.745560646057129
    8. '(
' → logprob: -9.245560646057129
    9. '```' → logprob: -9.370560646057129
    10. ')' → logprob: -9.995560646057129

Token 4: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.02457122690975666
    2. '(lambda' → logprob: -3.899571180343628
    3. ')' → logprob: -6.649571418762207
    4. '<|end|>' → logprob: -6.649571418762207
    5. '(()' → logprob: -8.524571418762207
    6. '```' → logprob: -8.524571418762207
    7. '(str' → logprob: -9.024571418762207
    8. '(eval' → logprob: -9.024571418762207
    9. '(token' → logprob: -9.149571418762207
    10. ' (' → logprob: -9.274571418762207

Token 5: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7306190133094788
    2. '))' → logprob: -1.355618953704834
    3. ')' → logprob: -2.980618953704834
    4. '(e' → logprob: -2.980618953704834
    5. '(input' → logprob: -2.980618953704834
    6. '()))' → logprob: -3.980618953704834
    7. '(user' → logprob: -4.105618953704834
    8. '```' → logprob: -4.605618953704834
    9. '(range' → logprob: -4.855618953704834
    10. '(data' → logprob: -5.230618953704834

Token 6: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.18304161727428436
    2. ' input' → logprob: -2.183041572570801
    3. '(input' → logprob: -2.933041572570801
    4. ')' → logprob: -8.3080415725708
    5. 'data' → logprob: -8.3080415725708
    6. 'range' → logprob: -8.6830415725708
    7. ',input' → logprob: -8.9330415725708
    8. '[input' → logprob: -9.6830415725708
    9. 's' → logprob: -9.8080415725708
    10. ' data' → logprob: -10.0580415725708

Token 7: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.16888028383255005
    2. '()))' → logprob: -2.6688802242279053
    3. '))' → logprob: -4.293880462646484
    4. '()' → logprob: -4.418880462646484
    5. '(""))' → logprob: -4.668880462646484
    6. '('' → logprob: -4.918880462646484
    7. '())' → logprob: -5.293880462646484
    8. '()));' → logprob: -5.293880462646484
    9. '(()' → logprob: -5.668880462646484
    10. ')' → logprob: -5.668880462646484

Token 8: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0003200922510586679
    2. 'strip' → logprob: -8.375320434570312
    3. ' split' → logprob: -9.500320434570312
    4. 'rstrip' → logprob: -11.250320434570312
    5. 'spl' → logprob: -14.500320434570312
    6. ')' → logprob: -14.500320434570312
    7. '(split' → logprob: -14.625320434570312
    8. ' strip' → logprob: -16.750320434570312
    9. 'replace' → logprob: -17.625320434570312
    10. 's' → logprob: -17.625320434570312

Token 9: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.08736556768417358
    2. '())' → logprob: -3.4623656272888184
    3. '))' → logprob: -3.7123656272888184
    4. '(' → logprob: -3.9623656272888184
    5. '()' → logprob: -4.962365627288818
    6. ')' → logprob: -7.337365627288818
    7. '())))' → logprob: -7.337365627288818
    8. ')))' → logprob: -8.33736515045166
    9. '()));' → logprob: -8.83736515045166
    10. '('' → logprob: -10.58736515045166

Token 10: 'print' (ID: 1598)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.331685334444046
    2. '[' → logprob: -1.8316853046417236
    3. 'if' → logprob: -3.3316853046417236
    4. '#' → logprob: -3.4566853046417236
    5. 'for' → logprob: -4.581685543060303
    6. 'e' → logprob: -4.706685543060303
    7. 'print' → logprob: -5.206685543060303
    8. '+' → logprob: -5.331685543060303
    9. '```' → logprob: -5.456685543060303
    10. '`' → logprob: -5.706685543060303

Token 11: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.008627340197563171
    2. '(e' → logprob: -4.758627414703369
    3. '("("' → logprob: -12.758626937866211
    4. '(
' → logprob: -13.008626937866211
    5. '()' → logprob: -13.008626937866211
    6. '('' → logprob: -13.133626937866211
    7. '((' → logprob: -14.008626937866211
    8. '(

' → logprob: -14.383626937866211
    9. '(`' → logprob: -15.133626937866211
    10. '(**' → logprob: -15.258626937866211

Token 12: 'yes' (ID: 6763)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -1.237167477607727
    2. '".' → logprob: -1.362167477607727
    3. '"' → logprob: -2.1121673583984375
    4. '"))' → logprob: -2.3621673583984375
    5. ' ".' → logprob: -2.9871673583984375
    6. '{' → logprob: -3.7371673583984375
    7. '")' → logprob: -3.7371673583984375
    8. 'Sum' → logprob: -3.7371673583984375
    9. '*' → logprob: -3.8621673583984375
    10. ''' → logprob: -4.1121673583984375

Token 13: '"' (ID: 1)
  Prédit: '"))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"))' → logprob: -0.037075769156217575
    2. '))' → logprob: -3.5370757579803467
    3. '")' → logprob: -5.412075996398926
    4. ')' → logprob: -5.912075996398926
    5. ')")' → logprob: -9.162075996398926
    6. '"' → logprob: -11.287075996398926
    7. '",' → logprob: -12.287075996398926
    8. ' "))' → logprob: -13.412075996398926
    9. ''))' → logprob: -13.787075996398926
    10. '")))' → logprob: -14.037075996398926

Token 14: ' if' (ID: 538)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0010373335098847747
    2. '))' → logprob: -6.876037120819092
    3. ')))' → logprob: -14.00103759765625
    4. ',' → logprob: -14.50103759765625
    5. '")' → logprob: -14.87603759765625
    6. ' )' → logprob: -14.87603759765625
    7. '()' → logprob: -14.87603759765625
    8. ',)' → logprob: -14.87603759765625
    9. '`)' → logprob: -15.12603759765625
    10. ')")' → logprob: -15.25103759765625

Token 15: ' sorted' (ID: 20099)
  Prédit: ' e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' e' → logprob: -0.45112860202789307
    2. ' all' → logprob: -1.701128602027893
    3. ' sum' → logprob: -2.5761284828186035
    4. 'e' → logprob: -3.0761284828186035
    5. ' len' → logprob: -3.4511284828186035
    6. 'sum' → logprob: -4.3261284828186035
    7. ' any' → logprob: -5.4511284828186035
    8. 'all' → logprob: -5.5761284828186035
    9. 'len' → logprob: -5.7011284828186035
    10. ' ' → logprob: -7.4511284828186035

Token 16: '(e' (ID: 3454)
  Prédit: '(e'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(e' → logprob: -0.00026288547087460756
    2. '(' → logprob: -8.250263214111328
    3. ' (' → logprob: -13.750263214111328
    4. '(s' → logprob: -14.750263214111328
    5. '((' → logprob: -16.875263214111328
    6. ' e' → logprob: -17.125263214111328
    7. 'e' → logprob: -17.250263214111328
    8. ')' → logprob: -18.125263214111328
    9. ',e' → logprob: -18.125263214111328
    10. '(
' → logprob: -18.250263214111328

Token 17: ')[' (ID: 13637)
  Prédit: '(e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(e' → logprob: -0.4161909222602844
    2. ')' → logprob: -1.2911908626556396
    3. '==' → logprob: -3.7911908626556396
    4. '(' → logprob: -3.9161908626556396
    5. ')==' → logprob: -4.041191101074219
    6. '()' → logprob: -5.916191101074219
    7. ' ==' → logprob: -6.916191101074219
    8. '()==' → logprob: -7.166191101074219
    9. 'e' → logprob: -8.291191101074219
    10. ')e' → logprob: -8.791191101074219

Token 18: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.45795756578445435
    2. ':' → logprob: -1.7079575061798096
    3. '==' → logprob: -2.9579575061798096
    4. ' ' → logprob: -3.5829575061798096
    5. ':]' → logprob: -3.8329575061798096
    6. ']==' → logprob: -3.9579575061798096
    7. '<' → logprob: -4.082957744598389
    8. ' :' → logprob: -4.332957744598389
    9. '-' → logprob: -4.832957744598389
    10. ' ==' → logprob: -4.957957744598389

Token 19: ']' (ID: 60)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.14996019005775452
    2. '==' → logprob: -2.0249602794647217
    3. ' <=' → logprob: -5.649960041046143
    4. ')' → logprob: -6.149960041046143
    5. ' <' → logprob: -7.149960041046143
    6. '<=' → logprob: -8.2749605178833
    7. ' ' → logprob: -8.5249605178833
    8. '<' → logprob: -9.5249605178833
    9. ' !=' → logprob: -9.7749605178833
    10. '=' → logprob: -9.7749605178833

Token 20: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.39510786533355713
    2. '==' → logprob: -1.1451078653335571
    3. ' <=' → logprob: -5.895107746124268
    4. '<=' → logprob: -6.520107746124268
    5. ')' → logprob: -6.770107746124268
    6. '<' → logprob: -6.770107746124268
    7. ' <' → logprob: -7.145107746124268
    8. ' !=' → logprob: -8.270108222961426
    9. '!=' → logprob: -8.770108222961426
    10. ' in' → logprob: -9.020108222961426

Token 21: ' sorted' (ID: 20099)
  Prédit: ' e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' e' → logprob: -0.5221595764160156
    2. 'e' → logprob: -1.2721595764160156
    3. ' min' → logprob: -3.1471595764160156
    4. '0' → logprob: -3.6471595764160156
    5. 'min' → logprob: -3.7721595764160156
    6. ' ' → logprob: -4.147159576416016
    7. ' sorted' → logprob: -4.772159576416016
    8. 'sorted' → logprob: -4.772159576416016
    9. '1' → logprob: -7.522159576416016
    10. ' max' → logprob: -7.647159576416016

Token 22: '(e' (ID: 3454)
  Prédit: '(e'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(e' → logprob: -0.0002533528604544699
    2. '(' → logprob: -8.375253677368164
    3. 'e' → logprob: -11.125253677368164
    4. ' (' → logprob: -12.000253677368164
    5. '((' → logprob: -15.000253677368164
    6. ' e' → logprob: -15.125253677368164
    7. '(s' → logprob: -15.750253677368164
    8. '(
' → logprob: -15.875253677368164
    9. '(a' → logprob: -15.875253677368164
    10. '`' → logprob: -16.250253677368164

Token 23: ')[' (ID: 13637)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.026591358706355095
    2. ')[' → logprob: -4.0265913009643555
    3. '()[' → logprob: -5.1515913009643555
    4. '[-' → logprob: -6.4015913009643555
    5. '][' → logprob: -8.276591300964355
    6. ')' → logprob: -8.526591300964355
    7. ' [' → logprob: -8.901591300964355
    8. ' )[' → logprob: -9.776591300964355
    9. '()' → logprob: -10.026591300964355
    10. '   ' → logprob: -10.589091300964355

Token 24: '1' (ID: 16)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.10102453082799911
    2. '0' → logprob: -2.601024627685547
    3. '1' → logprob: -3.851024627685547
    4. 'len' → logprob: -7.851024627685547
    5. ' -' → logprob: -8.851024627685547
    6. ' ' → logprob: -9.976024627685547
    7. '2' → logprob: -10.351024627685547
    8. '-e' → logprob: -12.351024627685547
    9. '   ' → logprob: -12.851024627685547
    10. '-n' → logprob: -13.101024627685547

Token 25: ']' (ID: 60)
  Prédit: ' else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.23840555548667908
    2. ')' → logprob: -1.9884055852890015
    3. ']' → logprob: -3.113405466079712
    4. 'else' → logprob: -3.613405466079712
    5. ' ' → logprob: -6.613405704498291
    6. ' and' → logprob: -7.238405704498291
    7. ' or' → logprob: -7.863405704498291
    8. ' )' → logprob: -8.238405227661133
    9. 'and' → logprob: -8.613405227661133
    10. ' ]' → logprob: -8.613405227661133

Token 26: ' and' (ID: 326)
  Prédit: ' else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.10796921700239182
    2. ')' → logprob: -2.982969284057617
    3. 'else' → logprob: -2.982969284057617
    4. ' and' → logprob: -7.857969284057617
    5. ' ' → logprob: -8.107969284057617
    6. ' )' → logprob: -8.857969284057617
    7. 'and' → logprob: -9.607969284057617
    8. ' or' → logprob: -9.857969284057617
    9. '==' → logprob: -10.732969284057617
    10. '  ' → logprob: -10.982969284057617

Token 27: ' sorted' (ID: 20099)
  Prédit: ' sorted'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sorted' → logprob: -0.010615389794111252
    2. 'sorted' → logprob: -5.135615348815918
    3. ' e' → logprob: -5.510615348815918
    4. 'e' → logprob: -8.010615348815918
    5. ' ' → logprob: -8.885615348815918
    6. ' ' → logprob: -9.885615348815918
    7. ' not' → logprob: -10.510615348815918
    8. ' len' → logprob: -10.760615348815918
    9. ' True' → logprob: -11.260615348815918
    10. ' s' → logprob: -12.010615348815918

Token 28: '(e' (ID: 3454)
  Prédit: '(e'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(e' → logprob: -0.0002036595979006961
    2. '(' → logprob: -8.500204086303711
    3. '(s' → logprob: -15.750204086303711
    4. ' (' → logprob: -17.25020408630371
    5. '(a' → logprob: -17.62520408630371
    6. '(d' → logprob: -18.62520408630371
    7. '(en' → logprob: -19.00020408630371
    8. '(f' → logprob: -19.25020408630371
    9. '(end' → logprob: -19.25020408630371
    10. '(E' → logprob: -19.62520408630371

Token 29: ')[' (ID: 13637)
  Prédit: ')['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')[' → logprob: -0.01739564910531044
    2. ')' → logprob: -4.892395496368408
    3. '())[' → logprob: -5.267395496368408
    4. ' )[' → logprob: -6.517395496368408
    5. '()[' → logprob: -6.767395496368408
    6. '[' → logprob: -7.142395496368408
    7. '()' → logprob: -7.767395496368408
    8. '")[' → logprob: -9.142395973205566
    9. '')[' → logprob: -9.267395973205566
    10. ' ' → logprob: -9.267395973205566

Token 30: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.24855491518974304
    2. '1' → logprob: -2.1235549449920654
    3. '-' → logprob: -2.7485549449920654
    4. '0' → logprob: -3.3735549449920654
    5. ' ' → logprob: -6.373554706573486
    6. ' -' → logprob: -8.623555183410645
    7. '3' → logprob: -8.998555183410645
    8. '[' → logprob: -9.748555183410645
    9. '```' → logprob: -10.623555183410645
    10. '   ' → logprob: -10.873555183410645

Token 31: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.09118589758872986
    2. ']==' → logprob: -2.5911858081817627
    3. ' ]' → logprob: -4.966186046600342
    4. ')' → logprob: -6.216186046600342
    5. ' ==' → logprob: -6.591186046600342
    6. '==' → logprob: -6.716186046600342
    7. '[' → logprob: -9.216185569763184
    8. '-' → logprob: -9.466185569763184
    9. ']>' → logprob: -9.591185569763184
    10. ' ' → logprob: -9.591185569763184

Token 32: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.2302696257829666
    2. '==' → logprob: -1.6052696704864502
    3. ')' → logprob: -5.730269432067871
    4. ' <=' → logprob: -7.855269432067871
    5. '[' → logprob: -7.980269432067871
    6. '>' → logprob: -9.230269432067871
    7. ' ' → logprob: -9.355269432067871
    8. ')==' → logprob: -9.480269432067871
    9. ' >' → logprob: -9.605269432067871
    10. '<=' → logprob: -9.855269432067871

Token 33: ' sorted' (ID: 20099)
  Prédit: ' sorted'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sorted' → logprob: -0.043576259166002274
    2. 'sorted' → logprob: -3.168576240539551
    3. ''' → logprob: -8.66857624053955
    4. ' ' → logprob: -8.79357624053955
    5. ' ' → logprob: -9.91857624053955
    6. '"' → logprob: -9.91857624053955
    7. 'e' → logprob: -9.91857624053955
    8. 's' → logprob: -10.54357624053955
    9. '(sorted' → logprob: -10.91857624053955
    10. ' e' → logprob: -11.04357624053955

Token 34: '(e' (ID: 3454)
  Prédit: '(e'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(e' → logprob: -0.0003357006062287837
    2. '(' → logprob: -8.000335693359375
    3. '(s' → logprob: -16.500335693359375
    4. 'e' → logprob: -16.750335693359375
    5. '<|end|>' → logprob: -17.500335693359375
    6. '(
' → logprob: -18.500335693359375
    7. '```' → logprob: -19.125335693359375
    8. ' (' → logprob: -19.125335693359375
    9. '(

' → logprob: -19.500335693359375
    10. '<|end|>' → logprob: -19.625335693359375

Token 35: ')[' (ID: 13637)
  Prédit: ')['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')[' → logprob: -0.0030865666922181845
    2. ')' → logprob: -6.378086566925049
    3. '(e' → logprob: -8.37808609008789
    4. '-' → logprob: -8.50308609008789
    5. 'e' → logprob: -8.50308609008789
    6. '[e' → logprob: -8.50308609008789
    7. ')e' → logprob: -8.87808609008789
    8. '[' → logprob: -9.12808609008789
    9. '][' → logprob: -9.50308609008789
    10. ' )[' → logprob: -9.50308609008789

Token 36: '3' (ID: 18)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.2840560972690582
    2. '1' → logprob: -1.6590560674667358
    3. '3' → logprob: -2.9090561866760254
    4. '0' → logprob: -6.034056186676025
    5. ' ' → logprob: -10.909055709838867
    6. '-' → logprob: -11.784055709838867
    7. '4' → logprob: -12.909055709838867
    8. ']' → logprob: -13.284055709838867
    9. '```' → logprob: -13.284055709838867
    10. '   ' → logprob: -13.909055709838867

Token 37: ']' (ID: 60)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0007196996593847871
    2. ' )' → logprob: -8.125720024108887
    3. ' else' → logprob: -8.375720024108887
    4. ' and' → logprob: -9.250720024108887
    5. 'and' → logprob: -10.000720024108887
    6. '")' → logprob: -11.375720024108887
    7. 'else' → logprob: -11.500720024108887
    8. '')' → logprob: -11.750720024108887
    9. ' ' → logprob: -12.625720024108887
    10. '`)' → logprob: -12.750720024108887

Token 38: ' else' (ID: 1203)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.002045817207545042
    2. ' and' → logprob: -7.127045631408691
    3. ' else' → logprob: -7.127045631408691
    4. 'and' → logprob: -8.127045631408691
    5. 'else' → logprob: -9.377045631408691
    6. ' )' → logprob: -10.127045631408691
    7. '))' → logprob: -12.502045631408691
    8. '')' → logprob: -13.127045631408691
    9. '```' → logprob: -13.127045631408691
    10. '")' → logprob: -13.627045631408691

Token 39: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.0010718696285039186
    2. ' "' → logprob: -6.876071929931641
    3. ''' → logprob: -10.62607192993164
    4. '")' → logprob: -12.25107192993164
    5. ')' → logprob: -12.50107192993164
    6. '""' → logprob: -12.75107192993164
    7. ''"' → logprob: -13.75107192993164
    8. ' ' → logprob: -13.87607192993164
    9. '"No' → logprob: -14.50107192993164
    10. '"""' → logprob: -15.87607192993164

Token 40: 'no' (ID: 1750)
  Prédit: 'no'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'no' → logprob: -4.966313281329349e-05
    2. 'yes' → logprob: -10.750049591064453
    3. ' no' → logprob: -11.250049591064453
    4. '"' → logprob: -11.250049591064453
    5. '")' → logprob: -13.250049591064453
    6. 'not' → logprob: -16.500049591064453
    7. 'n' → logprob: -16.875049591064453
    8. '	no' → logprob: -16.875049591064453
    9. '""' → logprob: -17.000049591064453
    10. 'No' → logprob: -17.125049591064453

Token 41: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.03809496387839317
    2. ')' → logprob: -3.288094997406006
    3. '"' → logprob: -10.288094520568848
    4. ')")' → logprob: -11.038094520568848
    5. ')"' → logprob: -14.038094520568848
    6. '```' → logprob: -14.288094520568848
    7. '')' → logprob: -14.413094520568848
    8. '`)' → logprob: -14.413094520568848
    9. '”)' → logprob: -15.413094520568848
    10. '")
' → logprob: -16.038095474243164


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 39
Tokens correctement prédits (1ère position, stricte): 16
Tokens correctement prédits (1ère position, avec adaptation): 16
Tokens correctement prédits (top 10): 27
Précision stricte (1ère position): 41.03%
Précision adaptée (1ère position): 41.03%
Précision (top 10): 69.23%
================================================================================
