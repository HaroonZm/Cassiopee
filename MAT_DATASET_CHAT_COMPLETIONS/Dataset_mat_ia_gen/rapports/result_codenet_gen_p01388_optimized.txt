================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:15:44
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from collections import Counter

s = input().upper()
c = Counter(s)
print(min(c[ch] for ch in "KUPC"))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' collections' (ID: 22690)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' Counter' (ID: 32251)
  Prédit: 'default'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'default' → logprob: -1.086537480354309
    2. 'deque' → logprob: -1.086537480354309
    3. 'abc' → logprob: -1.836537480354309
    4. 'Counter' → logprob: -2.4615373611450195
    5. ' defaultdict' → logprob: -2.7115373611450195
    6. 'named' → logprob: -5.4615373611450195
    7. ' Counter' → logprob: -5.5865373611450195
    8. ' abc' → logprob: -6.0865373611450195
    9. ' deque' → logprob: -6.4615373611450195
    10. '```' → logprob: -6.8365373611450195

Token 4: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -5.8961017202818766e-05
    2. '\(' → logprob: -10.375059127807617
    3. ' (' → logprob: -11.500059127807617
    4. '()' → logprob: -12.625059127807617
    5. '\' → logprob: -12.875059127807617
    6. '(
' → logprob: -12.875059127807617
    7. 'a' → logprob: -12.875059127807617
    8. '\n' → logprob: -14.000059127807617
    9. '```' → logprob: -14.000059127807617
    10. '.' → logprob: -14.250059127807617

Token 5: 's' (ID: 82)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.001178439473733306
    2. 'a' → logprob: -7.75117826461792
    3. '.' → logprob: -8.251178741455078
    4. '\(' → logprob: -9.126178741455078
    5. '(
' → logprob: -9.251178741455078
    6. '\n' → logprob: -9.751178741455078
    7. 'newline' → logprob: -9.751178741455078
    8. '\' → logprob: -10.001178741455078
    9. ',' → logprob: -10.751178741455078
    10. '```' → logprob: -11.626178741455078

Token 6: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.4714297950267792
    2. '(' → logprob: -1.9714298248291016
    3. 'u' → logprob: -2.7214298248291016
    4. '=' → logprob: -2.8464298248291016
    5. 't' → logprob: -3.2214298248291016
    6. 's' → logprob: -4.221429824829102
    7. '[' → logprob: -4.346429824829102
    8. 'a' → logprob: -4.596429824829102
    9. 'tring' → logprob: -4.721429824829102
    10. ' =' → logprob: -4.721429824829102

Token 7: ' input' (ID: 3422)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.5184921622276306
    2. ' "' → logprob: -1.2684922218322754
    3. ''' → logprob: -2.2684922218322754
    4. ' '' → logprob: -4.143492221832275
    5. ' Counter' → logprob: -6.268492221832275
    6. ' ' → logprob: -6.768492221832275
    7. 'input' → logprob: -8.893491744995117
    8. ''s' → logprob: -9.018491744995117
    9. 'Counter' → logprob: -9.018491744995117
    10. ' input' → logprob: -9.518491744995117

Token 8: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0038392639253288507
    2. '('' → logprob: -6.003839492797852
    3. ''' → logprob: -7.128839492797852
    4. '`' → logprob: -8.628839492797852
    5. '"' → logprob: -9.378839492797852
    6. '()' → logprob: -9.628839492797852
    7. '("("' → logprob: -9.628839492797852
    8. '(
' → logprob: -10.128839492797852
    9. ')' → logprob: -10.253839492797852
    10. '```' → logprob: -10.378839492797852

Token 9: 'upper' (ID: 26119)
  Prédit: 'lower'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'lower' → logprob: -0.050314538180828094
    2. 'strip' → logprob: -3.550314426422119
    3. 'count' → logprob: -4.050314426422119
    4. 'split' → logprob: -6.425314426422119
    5. 'counter' → logprob: -6.925314426422119
    6. 'Counter' → logprob: -9.050314903259277
    7. '```' → logprob: -9.675314903259277
    8. 'read' → logprob: -9.925314903259277
    9. 'most' → logprob: -10.300314903259277
    10. 'replace' → logprob: -10.675314903259277

Token 10: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.018390947952866554
    2. '()' → logprob: -4.018391132354736
    3. '(
' → logprob: -9.143390655517578
    4. ' (' → logprob: -9.893390655517578
    5. '(

' → logprob: -10.268390655517578
    6. ')' → logprob: -10.643390655517578
    7. ' ' → logprob: -12.518390655517578
    8. '```' → logprob: -12.643390655517578
    9. '('' → logprob: -13.393390655517578
    10. 's' → logprob: -13.643390655517578

Token 11: 'c' (ID: 66)
  Prédit: 'c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.5919039845466614
    2. 'count' → logprob: -1.9669039249420166
    3. 'counter' → logprob: -2.0919039249420166
    4. ')' → logprob: -2.7169039249420166
    5. '(' → logprob: -2.8419039249420166
    6. 'counts' → logprob: -4.091904163360596
    7. 'Counter' → logprob: -4.591904163360596
    8. 'C' → logprob: -4.966904163360596
    9. 'result' → logprob: -5.716904163360596
    10. '[' → logprob: -5.841904163360596

Token 12: ' =' (ID: 314)
  Prédit: 'ounter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ounter' → logprob: -0.5634822249412537
    2. 'ount' → logprob: -1.1884822845458984
    3. '.' → logprob: -3.1884822845458984
    4. '=' → logprob: -3.1884822845458984
    5. ' =' → logprob: -3.3134822845458984
    6. 'o' → logprob: -5.438482284545898
    7. 'ounters' → logprob: -7.188482284545898
    8. '(' → logprob: -7.563482284545898
    9. '.=' → logprob: -8.063482284545898
    10. 'ont' → logprob: -8.188482284545898

Token 13: ' Counter' (ID: 32251)
  Prédit: 'Counter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Counter' → logprob: -0.38687586784362793
    2. ' Counter' → logprob: -1.136875867843628
    3. '.Counter' → logprob: -12.511876106262207
    4. ' counter' → logprob: -14.386876106262207
    5. '_counter' → logprob: -15.261876106262207
    6. 'counter' → logprob: -16.01187515258789
    7. 'C' → logprob: -16.76187515258789
    8. 'Counters' → logprob: -16.88687515258789
    9. ' ' → logprob: -17.13687515258789
    10. '	C' → logprob: -18.26187515258789

Token 14: '(s' (ID: 1858)
  Prédit: '(s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(s' → logprob: -0.02978162094950676
    2. '(' → logprob: -3.5297815799713135
    3. 's' → logprob: -11.029781341552734
    4. '()' → logprob: -12.154781341552734
    5. '(c' → logprob: -12.529781341552734
    6. '((' → logprob: -13.654781341552734
    7. '('' → logprob: -13.779781341552734
    8. '(
' → logprob: -14.154781341552734
    9. '(ss' → logprob: -14.654781341552734
    10. '(str' → logprob: -15.029781341552734

Token 15: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.8312570318812504e-05
    2. '))' → logprob: -11.375018119812012
    3. '()' → logprob: -13.375018119812012
    4. '`)' → logprob: -13.375018119812012
    5. ' )' → logprob: -13.875018119812012
    6. '())' → logprob: -14.000018119812012
    7. '[' → logprob: -14.625018119812012
    8. '(' → logprob: -14.750018119812012
    9. ')`' → logprob: -15.000018119812012
    10. ').' → logprob: -15.250018119812012

Token 16: 'print' (ID: 1598)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.5332228541374207
    2. '(' → logprob: -1.0332229137420654
    3. 'm' → logprob: -3.2832229137420654
    4. ')' → logprob: -4.908222675323486
    5. 'print' → logprob: -5.533222675323486
    6. 'p' → logprob: -6.158222675323486
    7. '[' → logprob: -6.908222675323486
    8. 'for' → logprob: -7.158222675323486
    9. '#' → logprob: -7.408222675323486
    10. ' ' → logprob: -7.533222675323486

Token 17: '(min' (ID: 26035)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0017183773452416062
    2. '(c' → logprob: -6.376718521118164
    3. '(C' → logprob: -12.251718521118164
    4. '(s' → logprob: -12.501718521118164
    5. '('' → logprob: -12.501718521118164
    6. '()' → logprob: -14.001718521118164
    7. '((' → logprob: -14.001718521118164
    8. '(
' → logprob: -14.126718521118164
    9. '("("' → logprob: -14.251718521118164
    10. '(`' → logprob: -15.876718521118164

Token 18: '(c' (ID: 2410)
  Prédit: '(c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -0.08926703035831451
    2. '(' → logprob: -2.4642670154571533
    3. '(s' → logprob: -8.589266777038574
    4. '((' → logprob: -9.964266777038574
    5. '(()' → logprob: -10.214266777038574
    6. '()' → logprob: -10.839266777038574
    7. '(k' → logprob: -11.589266777038574
    8. '(a' → logprob: -12.589266777038574
    9. '(len' → logprob: -12.589266777038574
    10. ')' → logprob: -12.714266777038574

Token 19: '[ch' (ID: 140164)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.5570548176765442
    2. ')' → logprob: -1.5570547580718994
    3. '))' → logprob: -2.3070547580718994
    4. '(' → logprob: -3.3070547580718994
    5. '.values' → logprob: -3.6820547580718994
    6. '(),' → logprob: -3.8070547580718994
    7. '()' → logprob: -5.4320549964904785
    8. '),' → logprob: -5.4320549964904785
    9. '.keys' → logprob: -5.5570549964904785
    10. ',key' → logprob: -5.6820549964904785

Token 20: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.7356445789337158
    2. ']))' → logprob: -0.8606445789337158
    3. ')' → logprob: -3.485644578933716
    4. '],' → logprob: -3.610644578933716
    5. ')])' → logprob: -4.235644340515137
    6. '])' → logprob: -4.735644340515137
    7. 's' → logprob: -5.235644340515137
    8. ' for' → logprob: -5.610644340515137
    9. 'for' → logprob: -6.235644340515137
    10. ' ]' → logprob: -6.485644340515137

Token 21: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.0723029226064682
    2. 'for' → logprob: -3.32230281829834
    3. ')' → logprob: -3.44730281829834
    4. '))' → logprob: -7.19730281829834
    5. ',' → logprob: -7.32230281829834
    6. ' ' → logprob: -8.32230281829834
    7. ' )' → logprob: -8.82230281829834
    8. ' ))' → logprob: -11.07230281829834
    9. ' ,' → logprob: -11.57230281829834
    10. '),' → logprob: -11.94730281829834

Token 22: ' ch' (ID: 549)
  Prédit: ' ch'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ch' → logprob: -0.003395871492102742
    2. ' s' → logprob: -6.253396034240723
    3. ' c' → logprob: -7.253396034240723
    4. 'ch' → logprob: -7.628396034240723
    5. ' ' → logprob: -8.753396034240723
    6. ')' → logprob: -11.003396034240723
    7. 's' → logprob: -11.128396034240723
    8. ' range' → logprob: -11.503396034240723
    9. ' in' → logprob: -11.503396034240723
    10. '[ch' → logprob: -11.628396034240723

Token 23: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0006621609791181982
    2. 'in' → logprob: -7.500662326812744
    3. ' ' → logprob: -9.375661849975586
    4. '<|end|>' → logprob: -11.750661849975586
    5. 's' → logprob: -12.000661849975586
    6. ' )' → logprob: -12.625661849975586
    7. ')' → logprob: -12.875661849975586
    8. ' s' → logprob: -13.500661849975586
    9. '  ' → logprob: -13.750661849975586
    10. ' "' → logprob: -15.000661849975586

Token 24: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.632465660572052
    2. ''' → logprob: -1.7574656009674072
    3. 'c' → logprob: -2.1324656009674072
    4. ' c' → logprob: -2.2574656009674072
    5. ' "' → logprob: -4.007465839385986
    6. ' s' → logprob: -4.132465839385986
    7. 's' → logprob: -4.757465839385986
    8. ' '' → logprob: -4.882465839385986
    9. '['' → logprob: -5.007465839385986
    10. ''A' → logprob: -5.382465839385986

Token 25: 'K' (ID: 42)
  Prédit: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' → logprob: -0.10980904847383499
    2. 'ABC' → logprob: -2.859809160232544
    3. 'AE' → logprob: -4.359808921813965
    4. 'AC' → logprob: -4.484808921813965
    5. 'ACE' → logprob: -4.734808921813965
    6. 'AT' → logprob: -5.359808921813965
    7. 'ABCDEFGHI' → logprob: -7.109808921813965
    8. 'abcdefghijklmnopqrstuvwxyz' → logprob: -7.234808921813965
    9. 'ABCDEFGHIJKLMNOP' → logprob: -7.359808921813965
    10. 'ABCDE' → logprob: -7.359808921813965

Token 26: 'UPC' (ID: 163535)
  Prédit: 'L'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'L' → logprob: -1.383945345878601
    2. 'ORE' → logprob: -1.883945345878601
    3. 'EY' → logprob: -1.883945345878601
    4. 'O' → logprob: -2.3839454650878906
    5. 'E' → logprob: -3.1339454650878906
    6. 'A' → logprob: -3.1339454650878906
    7. 'AE' → logprob: -3.5089454650878906
    8. 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' → logprob: -3.7589454650878906
    9. 'W' → logprob: -3.8839454650878906
    10. 'R' → logprob: -4.008945465087891

Token 27: '"))' (ID: 5063)
  Prédit: '"))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"))' → logprob: -0.19715869426727295
    2. 'H' → logprob: -3.4471588134765625
    3. 'O' → logprob: -3.5721588134765625
    4. '"' → logprob: -4.1971588134765625
    5. 'A' → logprob: -4.5721588134765625
    6. '")))' → logprob: -4.6971588134765625
    7. 'E' → logprob: -4.8221588134765625
    8. 'AE' → logprob: -5.1971588134765625
    9. 'K' → logprob: -5.3221588134765625
    10. 'Y' → logprob: -5.4471588134765625


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 25
Tokens correctement prédits (1ère position, stricte): 8
Tokens correctement prédits (1ère position, avec adaptation): 8
Tokens correctement prédits (top 10): 15
Précision stricte (1ère position): 32.00%
Précision adaptée (1ère position): 32.00%
Précision (top 10): 60.00%
================================================================================
