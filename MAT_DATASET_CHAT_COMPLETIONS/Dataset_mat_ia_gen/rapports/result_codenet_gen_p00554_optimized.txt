================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:15:31
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N,M=map(int,input().split())
costs=[]
count=0
for _ in range(M):
    A,B=map(int,input().split())
    if A>=N:
        count+=1
    else:
        costs.append(N-A)
costs.sort()
needed = max(0,M-1 - count)
print(sum(costs[:needed]))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: ',M' (ID: 54127)
  → Token d'amorce (pas de prédiction)

Token 2: '=' (ID: 28)
  → Token d'amorce (pas de prédiction)

Token 3: 'map' (ID: 3726)
  Prédit: 'map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.29158642888069153
    2. ' map' → logprob: -1.4165863990783691
    3. 'input' → logprob: -4.916586399078369
    4. ' input' → logprob: -6.666586399078369
    5. '10' → logprob: -7.041586399078369
    6. 'list' → logprob: -7.916586399078369
    7. ' ' → logprob: -8.666586875915527
    8. '0' → logprob: -9.041586875915527
    9. ' list' → logprob: -9.041586875915527
    10. 'int' → logprob: -9.416586875915527

Token 4: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.09014461934566498
    2. '(int' → logprob: -2.590144634246826
    3. '(str' → logprob: -4.965144634246826
    4. '(lambda' → logprob: -6.215144634246826
    5. '```' → logprob: -6.465144634246826
    6. '(input' → logprob: -8.715144157409668
    7. '[int' → logprob: -9.090144157409668
    8. '(len' → logprob: -9.840144157409668
    9. '(eval' → logprob: -10.340144157409668
    10. '<|end|>' → logprob: -10.590144157409668

Token 5: ',input' (ID: 123014)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7012292742729187
    2. '(input' → logprob: -1.4512293338775635
    3. '```' → logprob: -2.3262293338775635
    4. '`)' → logprob: -2.5762293338775635
    5. '(' → logprob: -2.7012293338775635
    6. '`' → logprob: -5.326229095458984
    7. '(int' → logprob: -5.326229095458984
    8. '<|end|>' → logprob: -5.701229095458984
    9. '(user' → logprob: -6.076229095458984
    10. '(data' → logprob: -6.576229095458984

Token 6: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.21142327785491943
    2. '()' → logprob: -2.086423397064209
    3. ')' → logprob: -3.461423397064209
    4. '(' → logprob: -4.836423397064209
    5. '('' → logprob: -4.961423397064209
    6. '().' → logprob: -5.336423397064209
    7. '(""))' → logprob: -5.711423397064209
    8. '`()' → logprob: -6.836423397064209
    9. '()>' → logprob: -6.836423397064209
    10. '()">' → logprob: -6.836423397064209

Token 7: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0008045066497288644
    2. 'strip' → logprob: -7.250804424285889
    3. ')' → logprob: -9.375804901123047
    4. ' split' → logprob: -12.500804901123047
    5. 'read' → logprob: -13.250804901123047
    6. 'rstrip' → logprob: -13.375804901123047
    7. 'replace' → logprob: -13.750804901123047
    8. '(split' → logprob: -14.000804901123047
    9. 'spl' → logprob: -14.875804901123047
    10. '())' → logprob: -15.875804901123047

Token 8: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.02915705367922783
    2. '())' → logprob: -3.7791571617126465
    3. '))' → logprob: -5.4041571617126465
    4. '`)' → logprob: -7.1541571617126465
    5. '()' → logprob: -7.7791571617126465
    6. '(' → logprob: -10.154156684875488
    7. ')`' → logprob: -10.529156684875488
    8. '')' → logprob: -10.654156684875488
    9. '()))' → logprob: -10.654156684875488
    10. '```' → logprob: -11.654156684875488

Token 9: 'cost' (ID: 33457)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.0982971116900444
    2. '\n' → logprob: -3.348297119140625
    3. 'for' → logprob: -3.598297119140625
    4. '```' → logprob: -5.348297119140625
    5. 's' → logprob: -5.473297119140625
    6. '
' → logprob: -5.598297119140625
    7. 'array' → logprob: -6.223297119140625
    8. '`' → logprob: -6.223297119140625
    9. 'x' → logprob: -6.348297119140625
    10. 'A' → logprob: -6.723297119140625

Token 10: 's' (ID: 82)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.00040993880247697234
    2. '_' → logprob: -8.625410079956055
    3. '=' → logprob: -9.375410079956055
    4. '\[' → logprob: -9.875410079956055
    5. 's' → logprob: -10.375410079956055
    6. '[]' → logprob: -10.875410079956055
    7. '(' → logprob: -11.125410079956055
    8. '[:]' → logprob: -12.375410079956055
    9. '[
' → logprob: -12.625410079956055
    10. ' =' → logprob: -12.875410079956055

Token 11: '=[]
' (ID: 63466)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.013186115771532059
    2. '=' → logprob: -4.513185977935791
    3. ' =' → logprob: -7.263185977935791
    4. '=[' → logprob: -8.01318645477295
    5. '\[' → logprob: -8.01318645477295
    6. '=[]' → logprob: -8.51318645477295
    7. '[:]' → logprob: -9.13818645477295
    8. '```' → logprob: -9.63818645477295
    9. '[i' → logprob: -9.63818645477295
    10. '[]' → logprob: -9.76318645477295

Token 12: 'count' (ID: 5420)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0001805377542041242
    2. ' for' → logprob: -8.6251802444458
    3. '```' → logprob: -14.2501802444458
    4. '	for' → logprob: -16.250181198120117
    5. '\n' → logprob: -16.375181198120117
    6. 'n' → logprob: -17.500181198120117
    7. '[' → logprob: -17.625181198120117
    8. '
' → logprob: -17.875181198120117
    9. '\' → logprob: -18.250181198120117
    10. 'f' → logprob: -18.375181198120117

Token 13: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6841939687728882
    2. '_' → logprob: -1.1841939687728882
    3. '(' → logprob: -1.9341939687728882
    4. 's' → logprob: -3.3091940879821777
    5. '[' → logprob: -5.559194087982178
    6. '_=' → logprob: -6.309194087982178
    7. ' =' → logprob: -6.309194087982178
    8. ' (' → logprob: -8.43419361114502
    9. 'er' → logprob: -9.05919361114502
    10. '[:]' → logprob: -9.30919361114502

Token 14: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -6.372916686814278e-05
    2. '[' → logprob: -10.5000638961792
    3. '{}' → logprob: -11.0000638961792
    4. ' ' → logprob: -11.5000638961792
    5. '{' → logprob: -12.0000638961792
    6. '1' → logprob: -13.1250638961792
    7. '[]' → logprob: -14.7500638961792
    8. '3' → logprob: -16.125062942504883
    9. '```' → logprob: -16.125062942504883
    10. ')' → logprob: -16.500062942504883

Token 15: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.03616097569465637
    2. ' for' → logprob: -3.536160945892334
    3. '<|end|>' → logprob: -5.661160945892334
    4. '
' → logprob: -6.661160945892334
    5. '\n' → logprob: -6.786160945892334
    6. '\' → logprob: -8.536161422729492
    7. '```' → logprob: -9.661161422729492
    8. ' ' → logprob: -9.911161422729492
    9. '' → logprob: -9.911161422729492
    10. ' 
' → logprob: -10.161161422729492

Token 16: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.018952690064907074
    2. ' for' → logprob: -4.0189528465271
    3. '
' → logprob: -7.5189528465271
    4. '\n' → logprob: -8.518952369689941
    5. ' 
' → logprob: -11.268952369689941
    6. '	for' → logprob: -11.393952369689941
    7. '<|end|>' → logprob: -11.518952369689941
    8. '```' → logprob: -11.643952369689941
    9. '\' → logprob: -11.768952369689941
    10. ' ' → logprob: -12.518952369689941

Token 17: ' _' (ID: 1175)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.0579242929816246
    2. ' i' → logprob: -3.182924270629883
    3. '  ' → logprob: -4.432924270629883
    4. ' _' → logprob: -6.182924270629883
    5. 'i' → logprob: -8.057924270629883
    6. ' ‌' → logprob: -8.182924270629883
    7. '_' → logprob: -8.932924270629883
    8. ' item' → logprob: -10.557924270629883
    9. ' )' → logprob: -10.932924270629883
    10. ' I' → logprob: -10.932924270629883

Token 18: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.003209918737411499
    2. 'in' → logprob: -5.753210067749023
    3. ' ' → logprob: -10.628210067749023
    4. 'n' → logprob: -13.253210067749023
    5. '```' → logprob: -13.253210067749023
    6. 'range' → logprob: -13.503210067749023
    7. 'i' → logprob: -13.878210067749023
    8. ' i' → logprob: -14.753210067749023
    9. 'import' → logprob: -15.003210067749023
    10. ',' → logprob: -15.128210067749023

Token 19: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.0040807779878377914
    2. ' range' → logprob: -5.504080772399902
    3. '_' → logprob: -14.004080772399902
    4. '```' → logprob: -14.754080772399902
    5. '_range' → logprob: -15.254080772399902
    6. '(range' → logprob: -15.629080772399902
    7. '	range' → logprob: -16.50408172607422
    8. 'input' → logprob: -16.62908172607422
    9. 'in' → logprob: -16.62908172607422
    10. 'ran' → logprob: -16.62908172607422

Token 20: '(M' (ID: 6103)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.04676644876599312
    2. '(N' → logprob: -3.546766519546509
    3. ' (' → logprob: -4.79676628112793
    4. '(M' → logprob: -4.92176628112793
    5. '(range' → logprob: -6.79676628112793
    6. '(int' → logprob: -9.42176628112793
    7. '(
' → logprob: -9.92176628112793
    8. ' range' → logprob: -10.79676628112793
    9. '(s' → logprob: -11.04676628112793
    10. '(n' → logprob: -11.04676628112793

Token 21: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0041290996596217155
    2. ')' → logprob: -5.754128932952881
    3. ' ):' → logprob: -7.754128932952881
    4. ':' → logprob: -7.879128932952881
    5. '):
' → logprob: -9.004129409790039
    6. '+' → logprob: -11.754129409790039
    7. ' )' → logprob: -13.004129409790039
    8. ',' → logprob: -13.379129409790039
    9. '```' → logprob: -13.504129409790039
    10. '):
' → logprob: -13.754129409790039

Token 22: '   ' (ID: 271)
  Prédit: ' cost'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cost' → logprob: -0.7109511494636536
    2. ' costs' → logprob: -0.8359511494636536
    3. '   ' → logprob: -3.460951089859009
    4. ' c' → logprob: -4.335951328277588
    5. 'cost' → logprob: -4.460951328277588
    6. ' ' → logprob: -5.460951328277588
    7. ' code' → logprob: -5.585951328277588
    8. ' input' → logprob: -5.960951328277588
    9. ' s' → logprob: -6.335951328277588
    10. ' 
' → logprob: -6.585951328277588

Token 23: ' A' (ID: 355)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.3251117765903473
    2. ' a' → logprob: -2.3251118659973145
    3. 'u' → logprob: -3.5751118659973145
    4. ' line' → logprob: -3.5751118659973145
    5. 'cost' → logprob: -3.8251118659973145
    6. 'line' → logprob: -4.0751118659973145
    7. ' cost' → logprob: -4.3251118659973145
    8. 'x' → logprob: -4.4501118659973145
    9. ' u' → logprob: -4.5751118659973145
    10. 'c' → logprob: -5.0751118659973145

Token 24: ',B' (ID: 19853)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.03778932988643646
    2. ',B' → logprob: -3.5377893447875977
    3. ' ,' → logprob: -5.537789344787598
    4. ',A' → logprob: -6.537789344787598
    5. ',b' → logprob: -7.037789344787598
    6. ',c' → logprob: -7.787789344787598
    7. ',C' → logprob: -8.037789344787598
    8. ',S' → logprob: -8.662789344787598
    9. ',M' → logprob: -9.037789344787598
    10. 'cost' → logprob: -9.162789344787598

Token 25: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.05132294446229935
    2. ',c' → logprob: -3.8013229370117188
    3. ',' → logprob: -4.051322937011719
    4. ',C' → logprob: -4.926322937011719
    5. ' =' → logprob: -5.926322937011719
    6. '=input' → logprob: -9.301322937011719
    7. ',input' → logprob: -10.301322937011719
    8. ',i' → logprob: -10.926322937011719
    9. ',num' → logprob: -11.301322937011719
    10. ',value' → logprob: -11.426322937011719

Token 26: 'map' (ID: 3726)
  Prédit: 'map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.01815146580338478
    2. ' map' → logprob: -4.01815128326416
    3. '	map' → logprob: -14.26815128326416
    4. 'list' → logprob: -14.39315128326416
    5. ' ' → logprob: -16.018152236938477
    6. 'input' → logprob: -16.018152236938477
    7. 'm' → logprob: -17.268152236938477
    8. '(map' → logprob: -17.393152236938477
    9. '.map' → logprob: -18.143152236938477
    10. ',map' → logprob: -18.143152236938477

Token 27: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.007006028667092323
    2. '(' → logprob: -5.0070061683654785
    3. '(str' → logprob: -9.00700569152832
    4. '<int' → logprob: -9.75700569152832
    5. '(lambda' → logprob: -10.25700569152832
    6. '[int' → logprob: -10.50700569152832
    7. '<|end|>' → logprob: -11.13200569152832
    8. 'int' → logprob: -12.00700569152832
    9. '```' → logprob: -12.00700569152832
    10. ' (' → logprob: -12.00700569152832

Token 28: ',input' (ID: 123014)
  Prédit: ',input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',input' → logprob: -0.015318386256694794
    2. ',' → logprob: -4.640318393707275
    3. ',int' → logprob: -5.265318393707275
    4. '(input' → logprob: -8.140317916870117
    5. ' ,' → logprob: -10.765317916870117
    6. '(' → logprob: -11.765317916870117
    7. '<|end|>' → logprob: -11.890317916870117
    8. 'input' → logprob: -12.015317916870117
    9. '`,' → logprob: -12.390317916870117
    10. ')' → logprob: -12.515317916870117

Token 29: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -8.41866585687967e-06
    2. '()' → logprob: -12.375008583068848
    3. '.' → logprob: -13.375008583068848
    4. '())' → logprob: -13.875008583068848
    5. ')' → logprob: -14.375008583068848
    6. ' ().' → logprob: -15.375008583068848
    7. '()).' → logprob: -15.500008583068848
    8. ').' → logprob: -15.875008583068848
    9. '.split' → logprob: -16.62500762939453
    10. '(' → logprob: -16.62500762939453

Token 30: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -5.512236498361744e-07
    2. ' split' → logprob: -15.375000953674316
    3. 'plit' → logprob: -16.625
    4. 'strip' → logprob: -16.75
    5. 'rstrip' → logprob: -17.0
    6. 'spl' → logprob: -17.125
    7. '(split' → logprob: -17.625
    8. 's' → logprob: -18.875
    9. '_split' → logprob: -19.125
    10. '.split' → logprob: -20.5

Token 31: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.051860369741916656
    2. '())' → logprob: -3.0518603324890137
    3. '()' → logprob: -5.801860332489014
    4. ')
' → logprob: -9.051860809326172
    5. '`)' → logprob: -9.926860809326172
    6. '())
' → logprob: -10.051860809326172
    7. '))' → logprob: -11.301860809326172
    8. ')`' → logprob: -11.926860809326172
    9. '')' → logprob: -13.051860809326172
    10. '),' → logprob: -13.051860809326172

Token 32: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 33: ' if' (ID: 538)
  Prédit: 'cost'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cost' → logprob: -0.45906704664230347
    2. ' if' → logprob: -2.0840671062469482
    3. ' cost' → logprob: -2.3340671062469482
    4. '<|end|>' → logprob: -2.5840671062469482
    5. ' costs' → logprob: -3.3340671062469482
    6. 'if' (adapté à ' if') → logprob: -4.584066867828369
    7. ')' → logprob: -4.584066867828369
    8. '   ' → logprob: -4.959066867828369
    9. 'count' → logprob: -6.209066867828369
    10. ',' → logprob: -6.709066867828369

Token 34: ' A' (ID: 355)
  Prédit: ' A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.13586801290512085
    2. 'A' → logprob: -2.1358680725097656
    3. 'count' → logprob: -6.135868072509766
    4. ' count' → logprob: -6.260868072509766
    5. ' B' → logprob: -6.385868072509766
    6. ' ' → logprob: -7.260868072509766
    7. ' abs' → logprob: -7.635868072509766
    8. 'B' → logprob: -7.635868072509766
    9. 'cost' → logprob: -8.010868072509766
    10. ' cost' → logprob: -8.135868072509766

Token 35: '>=' (ID: 20974)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '>' → logprob: -0.4372844994068146
    2. '==' → logprob: -1.9372844696044922
    3. ' >' → logprob: -2.562284469604492
    4. '<' → logprob: -2.812284469604492
    5. ' ==' → logprob: -3.437284469604492
    6. '!=' → logprob: -4.062284469604492
    7. ' <' → logprob: -4.687284469604492
    8. ' !=' → logprob: -5.312284469604492
    9. '<=' → logprob: -5.562284469604492
    10. '%' → logprob: -6.687284469604492

Token 36: 'N' (ID: 45)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.0785861387848854
    2. '1' → logprob: -3.4535861015319824
    3. 'N' → logprob: -3.5785861015319824
    4. '0' → logprob: -4.953586101531982
    5. ' B' → logprob: -5.828586101531982
    6. 'cost' → logprob: -6.328586101531982
    7. ' ' → logprob: -6.578586101531982
    8. 'A' → logprob: -7.203586101531982
    9. '100' → logprob: -7.828586101531982
    10. '10' → logprob: -7.953586101531982

Token 37: ':
' (ID: 734)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.4053143858909607
    2. ':' → logprob: -1.1553144454956055
    3. 'and' → logprob: -4.4053144454956055
    4. ' or' → logprob: -6.2803144454956055
    5. '   ' → logprob: -6.4053144454956055
    6. '-' → logprob: -6.5303144454956055
    7. ' :' → logprob: -7.5303144454956055
    8. ' ' → logprob: -8.780314445495605
    9. '+' → logprob: -9.155314445495605
    10. ' -' → logprob: -9.405314445495605

Token 38: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.661001980304718
    2. ':' → logprob: -1.4110019207000732
    3. '   ' → logprob: -2.0360019207000732
    4. ' and' → logprob: -2.5360019207000732
    5. '    ' → logprob: -4.411002159118652
    6. ' :' → logprob: -4.786002159118652
    7. 'and' → logprob: -6.286002159118652
    8. ' or' → logprob: -6.286002159118652
    9. ' ' → logprob: -6.411002159118652
    10. '<|end|>' → logprob: -7.161002159118652

Token 39: ' count' (ID: 3605)
  Prédit: ' count'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' count' → logprob: -0.6908813714981079
    2. 'count' (adapté à ' count') → logprob: -1.315881371498108
    3. '       ' → logprob: -2.4408812522888184
    4. ' continue' → logprob: -3.0658812522888184
    5. '    ' → logprob: -3.4408812522888184
    6. ' cost' → logprob: -3.5658812522888184
    7. '   ' → logprob: -4.315881252288818
    8. 'continue' → logprob: -5.065881252288818
    9. 'cost' → logprob: -5.690881252288818
    10. '	count' → logprob: -6.065881252288818

Token 40: '+=' (ID: 18287)
  Prédit: '+='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.03322916477918625
    2. ' +=' → logprob: -3.658229112625122
    3. '+' → logprob: -5.033229351043701
    4. '=' → logprob: -8.158228874206543
    5. ']+=' → logprob: -10.283228874206543
    6. '+='' → logprob: -11.283228874206543
    7. '++' → logprob: -11.283228874206543
    8. '<|end|>' → logprob: -11.658228874206543
    9. '+=(' → logprob: -11.783228874206543
    10. ')' → logprob: -11.783228874206543

Token 41: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.010028285905718803
    2. 'B' → logprob: -5.26002836227417
    3. ' ' → logprob: -5.38502836227417
    4. ' B' → logprob: -9.010027885437012
    5. 'A' → logprob: -11.010027885437012
    6. '0' → logprob: -11.260027885437012
    7. 'N' → logprob: -11.385027885437012
    8. 'cost' → logprob: -11.635027885437012
    9. '(B' → logprob: -12.010027885437012
    10. '2' → logprob: -12.385027885437012

Token 42: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 43: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 44: ' else' (ID: 1203)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 45: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.004206259269267321
    2. '       ' → logprob: -6.00420618057251
    3. ':
' → logprob: -6.87920618057251
    4. '   ' → logprob: -7.50420618057251
    5. '<|end|>' → logprob: -9.629206657409668
    6. '    ' → logprob: -10.254206657409668
    7. ' :' → logprob: -11.754206657409668
    8. ',' → logprob: -11.879206657409668
    9. '      ' → logprob: -12.379206657409668
    10. '```' → logprob: -12.629206657409668

Token 46: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.09546305984258652
    2. '   ' → logprob: -2.4704630374908447
    3. 'cost' → logprob: -5.845463275909424
    4. ' cost' → logprob: -5.970463275909424
    5. ' costs' → logprob: -7.470463275909424
    6. '    ' → logprob: -8.345462799072266
    7. '```' → logprob: -8.970462799072266
    8. '<|end|>' → logprob: -10.595462799072266
    9. 'count' → logprob: -10.720462799072266
    10. '    
' → logprob: -11.220462799072266

Token 47: ' costs' (ID: 8959)
  Prédit: 'cost'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cost' → logprob: -0.008496496826410294
    2. 'count' → logprob: -5.133496284484863
    3. ' costs' → logprob: -6.633496284484863
    4. ' cost' → logprob: -7.508496284484863
    5. 'counts' → logprob: -7.883496284484863
    6. '   ' → logprob: -8.133496284484863
    7. 'A' → logprob: -11.508496284484863
    8. 'pass' → logprob: -12.508496284484863
    9. '```' → logprob: -12.758496284484863
    10. '       ' → logprob: -13.258496284484863

Token 48: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.02978045865893364
    2. '.' → logprob: -3.529780387878418
    3. '.extend' → logprob: -11.279780387878418
    4. ' .' → logprob: -12.154780387878418
    5. '.ap' → logprob: -12.404780387878418
    6. '.app' → logprob: -12.779780387878418
    7. '.setdefault' → logprob: -13.029780387878418
    8. '[' → logprob: -13.779780387878418
    9. '.Append' → logprob: -14.904780387878418
    10. '.add' → logprob: -14.904780387878418

Token 49: '(N' (ID: 10564)
  Prédit: '(('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '((' → logprob: -0.08623336255550385
    2. '(' → logprob: -3.086233377456665
    3. '(B' → logprob: -3.336233377456665
    4. '(A' → logprob: -7.211233139038086
    5. '(int' → logprob: -7.461233139038086
    6. '(abs' → logprob: -10.961233139038086
    7. '([' → logprob: -12.086233139038086
    8. '(max' → logprob: -12.086233139038086
    9. '((_' → logprob: -12.086233139038086
    10. '(((' → logprob: -12.211233139038086

Token 50: '-A' (ID: 9406)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.43586352467536926
    2. '-A' → logprob: -1.8108634948730469
    3. '-B' → logprob: -2.185863494873047
    4. ' -' → logprob: -2.560863494873047
    5. ')' → logprob: -9.810863494873047
    6. '-C' → logprob: -10.685863494873047
    7. '-)' → logprob: -11.060863494873047
    8. '*' → logprob: -11.810863494873047
    9. '[' → logprob: -11.935863494873047
    10. '-
' → logprob: -12.060863494873047

Token 51: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0002560945285949856
    2. '))' → logprob: -9.375256538391113
    3. '-' → logprob: -9.750256538391113
    4. '-)' → logprob: -9.875256538391113
    5. '+' → logprob: -10.625256538391113
    6. ' )' → logprob: -11.000256538391113
    7. '`)' → logprob: -12.875256538391113
    8. ')))' → logprob: -13.250256538391113
    9. '*' → logprob: -13.375256538391113
    10. '),' → logprob: -13.375256538391113

Token 52: 'cost' (ID: 33457)
  Prédit: 'cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cost' → logprob: -0.4809621274471283
    2. 'if' → logprob: -1.2309621572494507
    3. '```' → logprob: -3.480962038040161
    4. 'for' → logprob: -4.10596227645874
    5. 'max' → logprob: -4.85596227645874
    6. 'c' → logprob: -5.10596227645874
    7. '
' → logprob: -5.48096227645874
    8. 'count' → logprob: -5.73096227645874
    9. 'min' → logprob: -5.85596227645874
    10. ')' → logprob: -5.98096227645874

Token 53: 's' (ID: 82)
  Prédit: 's'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -1.0280383548888494e-06
    2. '[s' → logprob: -14.375000953674316
    3. '[' → logprob: -15.375000953674316
    4. ')' → logprob: -16.625001907348633
    5. ')s' → logprob: -18.375001907348633
    6. ' s' → logprob: -18.375001907348633
    7. ''s' → logprob: -18.500001907348633
    8. ']' → logprob: -18.750001907348633
    9. '[:]' → logprob: -18.875001907348633
    10. '.append' → logprob: -19.375001907348633

Token 54: '.sort' (ID: 19551)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.09759173542261124
    2. '.sort' → logprob: -2.5975916385650635
    3. '<|end|>' → logprob: -4.597591876983643
    4. '```' → logprob: -5.597591876983643
    5. '
' → logprob: -6.472591876983643
    6. '\n' → logprob: -7.097591876983643
    7. '.
' → logprob: -7.347591876983643
    8. ')' → logprob: -7.597591876983643
    9. '[' → logprob: -8.347591400146484
    10. '\' → logprob: -8.597591400146484

Token 55: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3485232889652252
    2. '()' → logprob: -1.2235232591629028
    3. '('' → logprob: -11.098523139953613
    4. '(
' → logprob: -11.348523139953613
    5. '((' → logprob: -11.598523139953613
    6. '(`' → logprob: -12.098523139953613
    7. '("("' → logprob: -12.473523139953613
    8. ' (' → logprob: -12.848523139953613
    9. '()`' → logprob: -12.848523139953613
    10. ' ()' → logprob: -12.973523139953613

Token 56: 'needed' (ID: 57162)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.6503617763519287
    2. 'for' → logprob: -1.4003617763519287
    3. 'if' → logprob: -1.9003617763519287
    4. 'i' → logprob: -4.150362014770508
    5. '0' → logprob: -4.275362014770508
    6. '```' → logprob: -4.400362014770508
    7. '[' → logprob: -5.275362014770508
    8. '\n' → logprob: -5.400362014770508
    9. '+
' → logprob: -5.400362014770508
    10. '<|end|>' → logprob: -5.775362014770508

Token 57: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.05279077962040901
    2. '_' → logprob: -3.552790880203247
    3. '_count' → logprob: -4.927790641784668
    4. '_=' → logprob: -5.302790641784668
    5. '_cost' → logprob: -5.677790641784668
    6. '=[]' → logprob: -6.427790641784668
    7. ' =' → logprob: -6.427790641784668
    8. '=_' → logprob: -6.802790641784668
    9. '=count' → logprob: -7.802790641784668
    10. '=int' → logprob: -8.052790641784668

Token 58: ' max' (ID: 2999)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.4203473627567291
    2. 'count' → logprob: -2.0453474521636963
    3. 'cost' → logprob: -2.5453474521636963
    4. 'len' → logprob: -2.7953474521636963
    5. 'max' → logprob: -3.0453474521636963
    6. ' N' → logprob: -4.670347213745117
    7. 'M' → logprob: -5.295347213745117
    8. '0' → logprob: -5.545347213745117
    9. ' max' → logprob: -6.420347213745117
    10. 'sum' → logprob: -6.670347213745117

Token 59: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.010238460265100002
    2. '(cost' → logprob: -5.1352386474609375
    3. '(count' → logprob: -5.7602386474609375
    4. '(len' → logprob: -7.5102386474609375
    5. ' (' → logprob: -8.135238647460938
    6. '((' → logprob: -9.260238647460938
    7. '(
' → logprob: -9.635238647460938
    8. '([' → logprob: -10.510238647460938
    9. 'cost' → logprob: -10.510238647460938
    10. '(`' → logprob: -10.760238647460938

Token 60: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.050312042236328125
    2. '(' → logprob: -3.300312042236328
    3. ' ' → logprob: -5.675312042236328
    4. 'count' → logprob: -5.800312042236328
    5. 'len' → logprob: -6.175312042236328
    6. 'cost' → logprob: -7.300312042236328
    7. ')' → logprob: -7.675312042236328
    8. 'M' → logprob: -7.925312042236328
    9. 'N' → logprob: -7.925312042236328
    10. '(len' → logprob: -8.050312042236328

Token 61: ',M' (ID: 54127)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.15849706530570984
    2. '-' → logprob: -2.7834970951080322
    3. ' -' → logprob: -2.7834970951080322
    4. ' ,' → logprob: -4.658496856689453
    5. ',len' → logprob: -5.033496856689453
    6. '-cost' → logprob: -5.908496856689453
    7. ',count' → logprob: -6.158496856689453
    8. ')' → logprob: -6.408496856689453
    9. '-count' → logprob: -8.908496856689453
    10. ' )' → logprob: -9.283496856689453

Token 62: '-' (ID: 12)
  Prédit: '-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.49274471402168274
    2. ' -' → logprob: -0.9927446842193604
    3. '-count' → logprob: -4.1177449226379395
    4. '-l' → logprob: -6.3677449226379395
    5. '-cost' → logprob: -7.9927449226379395
    6. '-n' → logprob: -9.492744445800781
    7. '-N' → logprob: -11.367744445800781
    8. '-c' → logprob: -11.367744445800781
    9. '-length' → logprob: -11.367744445800781
    10. '-C' → logprob: -11.992744445800781

Token 63: '1' (ID: 16)
  Prédit: 'count'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'count' → logprob: -0.012582525610923767
    2. ' count' → logprob: -4.387582302093506
    3. 'cost' → logprob: -9.887582778930664
    4. '(count' → logprob: -11.887582778930664
    5. 'counts' → logprob: -12.637582778930664
    6. ' ' → logprob: -13.262582778930664
    7. 'c' → logprob: -13.387582778930664
    8. '	count' → logprob: -13.387582778930664
    9. '   ' → logprob: -13.637582778930664
    10. 'len' → logprob: -14.262582778930664

Token 64: ' -' (ID: 533)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.2932548224925995
    2. '-' → logprob: -1.9182548522949219
    3. ' -' → logprob: -2.793254852294922
    4. '-)' → logprob: -3.793254852294922
    5. ' )' → logprob: -5.043254852294922
    6. '+' → logprob: -5.043254852294922
    7. '-cost' → logprob: -5.418254852294922
    8. '-count' → logprob: -5.543254852294922
    9. '+)' → logprob: -7.293254852294922
    10. ')-' → logprob: -7.793254852294922

Token 65: ' count' (ID: 3605)
  Prédit: 'count'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'count' → logprob: -0.38688376545906067
    2. ' count' → logprob: -1.1368837356567383
    3. '	count' → logprob: -12.761883735656738
    4. 'cost' → logprob: -13.011883735656738
    5. ' counts' → logprob: -13.261883735656738
    6. '(count' → logprob: -13.636883735656738
    7. ' cost' → logprob: -13.761883735656738
    8. 'counts' → logprob: -13.761883735656738
    9. ' ' → logprob: -14.011883735656738
    10. ' len' → logprob: -14.636883735656738

Token 66: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.002534521510824561
    2. '-' → logprob: -6.62753438949585
    3. ' )' → logprob: -7.37753438949585
    4. '+' → logprob: -7.75253438949585
    5. '-)' → logprob: -9.627534866333008
    6. ' -' → logprob: -10.627534866333008
    7. '-cost' → logprob: -11.127534866333008
    8. ')
' → logprob: -11.252534866333008
    9. ')-' → logprob: -11.752534866333008
    10. '))' → logprob: -12.627534866333008

Token 67: 'print' (ID: 1598)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.28153401613235474
    2. 'total' → logprob: -2.28153395652771
    3. '<|end|>' → logprob: -2.90653395652771
    4. ' for' → logprob: -3.15653395652771
    5. 'cost' → logprob: -4.656534194946289
    6. 'sum' → logprob: -4.656534194946289
    7. 'if' → logprob: -5.406534194946289
    8. 'print' → logprob: -5.656534194946289
    9. ' 
' → logprob: -5.656534194946289
    10. 'result' → logprob: -5.906534194946289

Token 68: '(sum' (ID: 45528)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.25247249007225037
    2. '(cost' → logprob: -1.5024725198745728
    3. '(sum' → logprob: -7.752472400665283
    4. '((' → logprob: -10.752472877502441
    5. '(len' → logprob: -10.877472877502441
    6. ' (' → logprob: -11.127472877502441
    7. '(count' → logprob: -11.127472877502441
    8. '(`' → logprob: -11.502472877502441
    9. '(
' → logprob: -12.002472877502441
    10. '('' → logprob: -12.377472877502441

Token 69: '(cost' (ID: 133554)
  Prédit: '(cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(cost' → logprob: -0.006724368315190077
    2. '(' → logprob: -5.0067243576049805
    3. ' (' → logprob: -12.38172435760498
    4. ')' → logprob: -13.25672435760498
    5. '(
' → logprob: -13.50672435760498
    6. '(c' → logprob: -14.38172435760498
    7. 'cost' → logprob: -14.75672435760498
    8. '(sorted' → logprob: -15.38172435760498
    9. '(

' → logprob: -16.131725311279297
    10. '()' → logprob: -16.631725311279297

Token 70: 's' (ID: 82)
  Prédit: 's'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.3880796730518341
    2. 'ost' → logprob: -1.1380796432495117
    3. '(cost' → logprob: -7.013079643249512
    4. 'cost' → logprob: -8.638079643249512
    5. 'sts' → logprob: -9.888079643249512
    6. 'ots' → logprob: -10.388079643249512
    7. '[' → logprob: -11.638079643249512
    8. ')' → logprob: -11.638079643249512
    9. 'os' → logprob: -12.138079643249512
    10. 'st' → logprob: -12.138079643249512

Token 71: '[:' (ID: 7808)
  Prédit: '[:'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[:' → logprob: -4.1318875446449965e-05
    2. '[-' → logprob: -10.500041007995605
    3. '[' → logprob: -11.375041007995605
    4. '[:-' → logprob: -13.000041007995605
    5. ' [:' → logprob: -17.250041961669922
    6. ')' → logprob: -18.250041961669922
    7. '[:]' → logprob: -18.875041961669922
    8. '[i' → logprob: -20.125041961669922
    9. '[
' → logprob: -20.625041961669922
    10. '   ' → logprob: -21.000041961669922

Token 72: 'needed' (ID: 57162)
  Prédit: 'needed'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'needed' → logprob: -0.002476604888215661
    2. ' needed' → logprob: -6.002476692199707
    3. '-needed' → logprob: -15.002476692199707
    4. 'need' → logprob: -15.002476692199707
    5. '_needed' → logprob: -15.252476692199707
    6. ' ' → logprob: -17.25247573852539
    7. 'required' → logprob: -17.62747573852539
    8. 'necessary' → logprob: -17.75247573852539
    9. 'needs' → logprob: -17.87747573852539
    10. 'Needed' → logprob: -18.12747573852539

Token 73: ']))' (ID: 20259)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0005548207554966211
    2. ')' → logprob: -7.500555038452148
    3. '))
' → logprob: -14.000555038452148
    4. ')))' → logprob: -14.250555038452148
    5. '])' → logprob: -15.625555038452148
    6. ' ))' → logprob: -15.625555038452148
    7. '),' → logprob: -17.12555503845215
    8. ')
' → logprob: -17.75055503845215
    9. '+' → logprob: -18.12555503845215
    10. ']))' → logprob: -18.62555503845215


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 71
Tokens correctement prédits (1ère position, stricte): 28
Tokens correctement prédits (1ère position, avec adaptation): 28
Tokens correctement prédits (top 10): 53
Précision stricte (1ère position): 39.44%
Précision adaptée (1ère position): 39.44%
Précision (top 10): 74.65%
================================================================================
