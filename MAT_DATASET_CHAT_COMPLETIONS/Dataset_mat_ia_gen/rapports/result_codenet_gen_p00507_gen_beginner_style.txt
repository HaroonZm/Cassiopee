================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:08:17
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
a = []
for _ in range(n):
    a.append(input().strip())
perms = []
for i in range(n):
    for j in range(n):
        if i != j:
            perms.append(a[i] + a[j])
perms.sort()
print(perms[2])
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00038134094211272895
    2. '(n' → logprob: -9.000381469726562
    3. ''' → logprob: -9.500381469726562
    4. '('' → logprob: -10.125381469726562
    5. '```' → logprob: -10.125381469726562
    6. '`' → logprob: -10.750381469726562
    7. '("("' → logprob: -10.750381469726562
    8. '()' → logprob: -11.250381469726562
    9. 'n' → logprob: -11.625381469726562
    10. ')' → logprob: -12.000381469726562

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0733630508184433
    2. ')' → logprob: -2.8233630657196045
    3. '()' → logprob: -4.698362827301025
    4. '())' → logprob: -6.948362827301025
    5. '```' → logprob: -8.198363304138184
    6. '(
' → logprob: -8.448363304138184
    7. '('' → logprob: -8.948363304138184
    8. '(()' → logprob: -9.073363304138184
    9. '`' → logprob: -9.198363304138184
    10. '("("' → logprob: -9.698363304138184

Token 5: 'a' (ID: 64)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.9194893836975098
    2. 'if' → logprob: -1.1694893836975098
    3. 'for' → logprob: -2.2944893836975098
    4. 's' → logprob: -2.4194893836975098
    5. ' ' → logprob: -3.7944893836975098
    6. ''' → logprob: -4.41948938369751
    7. 'x' → logprob: -4.66948938369751
    8. ')' → logprob: -4.91948938369751
    9. 'a' → logprob: -5.04448938369751
    10. '`' → logprob: -5.29448938369751

Token 6: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.030097683891654015
    2. ' =' → logprob: -4.405097484588623
    3. '=' → logprob: -5.405097484588623
    4. '[i' → logprob: -5.905097484588623
    5. 'r' → logprob: -6.030097484588623
    6. '.' → logprob: -6.655097484588623
    7. 'a' → logprob: -6.780097484588623
    8. '[a' → logprob: -7.030097484588623
    9. 'rray' → logprob: -7.280097484588623
    10. '[:]' → logprob: -7.530097484588623

Token 7: ' []
' (ID: 8911)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.4218459725379944
    2. '[]' → logprob: -1.5468459129333496
    3. ' [' → logprob: -2.4218459129333496
    4. '[int' → logprob: -4.54684591293335
    5. '[' → logprob: -4.67184591293335
    6. 'list' → logprob: -5.29684591293335
    7. ' list' → logprob: -5.29684591293335
    8. '0' → logprob: -5.54684591293335
    9. '[input' → logprob: -5.92184591293335
    10. 'input' → logprob: -6.79684591293335

Token 8: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.008081277832388878
    2. ' for' → logprob: -5.008081436157227
    3. '[' → logprob: -7.508081436157227
    4. '\n' → logprob: -8.008081436157227
    5. '```' → logprob: -9.008081436157227
    6. '\' → logprob: -9.133081436157227
    7. '
' → logprob: -9.508081436157227
    8. '`' → logprob: -10.508081436157227
    9. '_' → logprob: -10.633081436157227
    10. '\r' → logprob: -11.008081436157227

Token 9: ' _' (ID: 1175)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.029188428074121475
    2. ' i' → logprob: -3.904188394546509
    3. '  ' → logprob: -4.779188632965088
    4. 'i' → logprob: -8.90418815612793
    5. ' n' → logprob: -10.90418815612793
    6. ' ‌' → logprob: -10.90418815612793
    7. ' a' → logprob: -11.65418815612793
    8. ' )' → logprob: -13.02918815612793
    9. ' I' → logprob: -13.15418815612793
    10. ' ▁' → logprob: -13.27918815612793

Token 10: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.012580170296132565
    2. 'in' → logprob: -4.387580394744873
    3. ' ' → logprob: -9.762579917907715
    4. 'range' → logprob: -12.137579917907715
    5. 'n' → logprob: -12.762579917907715
    6. 'import' → logprob: -13.762579917907715
    7. ' i' → logprob: -14.262579917907715
    8. 'a' → logprob: -14.637579917907715
    9. 'space' → logprob: -14.762579917907715
    10. ' range' → logprob: -14.887579917907715

Token 11: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.5759491920471191
    2. 'range' → logprob: -0.8259491920471191
    3. ' a' → logprob: -13.075948715209961
    4. 'a' → logprob: -13.200948715209961
    5. '	range' → logprob: -13.325948715209961
    6. ' ' → logprob: -13.575948715209961
    7. 'n' → logprob: -13.825948715209961
    8. '(range' → logprob: -14.700948715209961
    9. ' xrange' → logprob: -15.075948715209961
    10. 'rang' → logprob: -15.450948715209961

Token 12: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.030001556500792503
    2. ' (' → logprob: -4.155001640319824
    3. '(n' → logprob: -4.280001640319824
    4. ' ' → logprob: -11.655001640319824
    5. ' n' → logprob: -11.780001640319824
    6. '(range' → logprob: -12.530001640319824
    7. '(
' → logprob: -13.155001640319824
    8. 'n' → logprob: -13.530001640319824
    9. '(space' → logprob: -14.155001640319824
    10. '(int' → logprob: -14.530001640319824

Token 13: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.11298277229070663
    2. ')' → logprob: -2.237982749938965
    3. ' ):' → logprob: -9.487982749938965
    4. ' )' → logprob: -10.362982749938965
    5. '):
' → logprob: -10.612982749938965
    6. ':' → logprob: -10.862982749938965
    7. '+' → logprob: -13.112982749938965
    8. 'a' → logprob: -14.112982749938965
    9. ')**' → logprob: -14.487982749938965
    10. '```' → logprob: -14.487982749938965

Token 14: '   ' (ID: 271)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.13332457840442657
    2. '   ' → logprob: -2.63332462310791
    3. '    ' → logprob: -3.63332462310791
    4. ' ' → logprob: -4.75832462310791
    5. 'a' → logprob: -4.88332462310791
    6. ' ```' → logprob: -6.13332462310791
    7. '     
' → logprob: -6.50832462310791
    8. '```' → logprob: -6.50832462310791
    9. ' 
' → logprob: -6.75832462310791
    10. ' input' → logprob: -6.88332462310791

Token 15: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' (adapté à ' a') → logprob: -0.5463385581970215
    2. 'x' → logprob: -1.5463385581970215
    3. ' a' → logprob: -2.1713385581970215
    4. ' x' → logprob: -2.5463385581970215
    5. '   ' → logprob: -5.2963385581970215
    6. 'value' → logprob: -6.2963385581970215
    7. ' val' → logprob: -6.4213385581970215
    8. 'data' → logprob: -6.5463385581970215
    9. 'val' → logprob: -6.7963385581970215
    10. 'num' → logprob: -7.0463385581970215

Token 16: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.4741235375404358
    2. '.' → logprob: -0.9741235375404358
    3. '.app' → logprob: -10.84912395477295
    4. ' .' → logprob: -11.22412395477295
    5. '.ap' → logprob: -11.97412395477295
    6. '.extend' → logprob: -12.47412395477295
    7. '.a' → logprob: -13.84912395477295
    8. 'append' → logprob: -14.34912395477295
    9. '.insert' → logprob: -14.97412395477295
    10. '.push' → logprob: -15.09912395477295

Token 17: '(input' (ID: 10054)
  Prédit: '(int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.025444386526942253
    2. '(' → logprob: -3.775444269180298
    3. '(list' → logprob: -6.150444507598877
    4. '(float' → logprob: -10.775444030761719
    5. 'int' → logprob: -11.400444030761719
    6. '(
' → logprob: -11.650444030761719
    7. '(i' → logprob: -12.275444030761719
    8. '(input' → logprob: -12.275444030761719
    9. 'list' → logprob: -12.650444030761719
    10. '(tuple' → logprob: -12.900444030761719

Token 18: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.3154884874820709
    2. '()' → logprob: -1.3154884576797485
    3. ')' → logprob: -6.690488338470459
    4. '(' → logprob: -7.315488338470459
    5. '()))' → logprob: -8.315488815307617
    6. '().' → logprob: -10.315488815307617
    7. ' ())' → logprob: -11.190488815307617
    8. '();)' → logprob: -11.940488815307617
    9. '()
' → logprob: -12.690488815307617
    10. '()]' → logprob: -13.065488815307617

Token 19: 'strip' (ID: 23905)
  Prédit: 'strip'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.005956052802503109
    2. 'rstrip' → logprob: -5.255956172943115
    3. 'split' → logprob: -7.255956172943115
    4. 'append' → logprob: -11.630955696105957
    5. ')' → logprob: -12.380955696105957
    6. 'read' → logprob: -13.630955696105957
    7. ' strip' → logprob: -13.880955696105957
    8. 'isdigit' → logprob: -15.505955696105957
    9. 'replace' → logprob: -15.755955696105957
    10. '```' → logprob: -16.130956649780273

Token 20: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.15725155174732208
    2. '()))' → logprob: -2.0322515964508057
    3. ')' → logprob: -4.907251358032227
    4. '()' → logprob: -5.157251358032227
    5. '))' → logprob: -6.782251358032227
    6. '(' → logprob: -9.032251358032227
    7. '())
' → logprob: -10.532251358032227
    8. ' ())' → logprob: -11.782251358032227
    9. '()))
' → logprob: -11.907251358032227
    10. '()),' → logprob: -12.532251358032227

Token 21: 'per' (ID: 543)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -1.0946261882781982
    2. 'for' → logprob: -1.3446261882781982
    3. '```' → logprob: -2.0946261882781982
    4. 'b' → logprob: -2.2196261882781982
    5. '\' → logprob: -3.9696261882781982
    6. 'if' → logprob: -4.094626426696777
    7. 'm' → logprob: -4.219626426696777
    8. 's' → logprob: -4.219626426696777
    9. '``' → logprob: -4.219626426696777
    10. '\n' → logprob: -4.594626426696777

Token 22: 'ms' (ID: 1782)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'm' → logprob: -0.8345580697059631
    2. 's' → logprob: -1.0845580101013184
    3. 'mutation' → logprob: -2.4595580101013184
    4. 'mut' → logprob: -2.5845580101013184
    5. 'son' → logprob: -4.209558010101318
    6. 'mu' → logprob: -4.959558010101318
    7. 'f' → logprob: -4.959558010101318
    8. 't' → logprob: -5.209558010101318
    9. 'sum' → logprob: -5.334558010101318
    10. '```' → logprob: -5.709558010101318

Token 23: ' =' (ID: 314)
  Prédit: 'utations'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'utations' → logprob: -0.817668080329895
    2. '.' → logprob: -1.442668080329895
    3. '(' → logprob: -2.0676679611206055
    4. '[' → logprob: -2.1926679611206055
    5. 's' → logprob: -3.0676679611206055
    6. 'utation' → logprob: -4.1926679611206055
    7. '()' → logprob: -5.9426679611206055
    8. '[:]' → logprob: -6.0676679611206055
    9. '=' → logprob: -6.4426679611206055
    10. 'utate' → logprob: -6.6926679611206055

Token 24: ' []
' (ID: 8911)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.2827492952346802
    2. 'it' → logprob: -2.4077491760253906
    3. 'list' → logprob: -3.4077491760253906
    4. ' permutations' → logprob: -3.6577491760253906
    5. ' itertools' → logprob: -3.9077491760253906
    6. 'a' → logprob: -4.032749176025391
    7. 'per' → logprob: -4.282749176025391
    8. 'sorted' → logprob: -4.282749176025391
    9. '[a' → logprob: -4.532749176025391
    10. '[' → logprob: -4.657749176025391

Token 25: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.15923944115638733
    2. 'import' → logprob: -2.9092395305633545
    3. 'from' → logprob: -3.0342395305633545
    4. ' for' → logprob: -4.034239292144775
    5. '(' → logprob: -4.534239292144775
    6. '[' → logprob: -4.784239292144775
    7. '.' → logprob: -5.659239292144775
    8. 'def' → logprob: -7.159239292144775
    9. ' from' → logprob: -7.409239292144775
    10. '```' → logprob: -7.659239292144775

Token 26: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.04078439623117447
    2. ' _' → logprob: -3.7907843589782715
    3. '_' → logprob: -4.9157843589782715
    4. 'i' → logprob: -5.2907843589782715
    5. ' p' → logprob: -6.2907843589782715
    6. ' a' → logprob: -6.7907843589782715
    7. ' ' → logprob: -7.4157843589782715
    8. ' x' → logprob: -7.6657843589782715
    9. 'a' → logprob: -8.41578483581543
    10. ' s' → logprob: -8.66578483581543

Token 27: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.04070302098989487
    2. 'n' → logprob: -3.415703058242798
    3. 'in' → logprob: -5.040702819824219
    4. ' ' → logprob: -8.040702819824219
    5. ' n' → logprob: -9.290702819824219
    6. ',' → logprob: -10.165702819824219
    7. '_' → logprob: -10.540702819824219
    8. 's' → logprob: -10.790702819824219
    9. '  ' → logprob: -11.040702819824219
    10. 'nt' → logprob: -11.915702819824219

Token 28: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.13302189111709595
    2. ' range' → logprob: -2.133021831512451
    3. 'a' → logprob: -5.133021831512451
    4. ' a' → logprob: -8.75802230834961
    5. 'per' → logprob: -11.88302230834961
    6. '(range' → logprob: -12.63302230834961
    7. '	range' → logprob: -13.25802230834961
    8. 'ranges' → logprob: -13.50802230834961
    9. 'r' → logprob: -13.88302230834961
    10. ' permutations' → logprob: -14.00802230834961

Token 29: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.20436522364616394
    2. '(' → logprob: -1.7043652534484863
    3. '(len' → logprob: -5.829365253448486
    4. ' (' → logprob: -12.954364776611328
    5. '()' → logprob: -13.704364776611328
    6. '(length' → logprob: -14.204364776611328
    7. '(a' → logprob: -14.579364776611328
    8. '(s' → logprob: -14.704364776611328
    9. '(i' → logprob: -14.704364776611328
    10. '(l' → logprob: -15.079364776611328

Token 30: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.056266702711582184
    2. '):
' → logprob: -3.5562667846679688
    3. ')' → logprob: -4.806266784667969
    4. '-' → logprob: -4.806266784667969
    5. '+' → logprob: -5.056266784667969
    6. ' ):' → logprob: -6.181266784667969
    7. ' -' → logprob: -7.056266784667969
    8. ' +' → logprob: -8.556266784667969
    9. ' )' → logprob: -9.681266784667969
    10. ' ' → logprob: -9.681266784667969

Token 31: '   ' (ID: 271)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.2909529209136963
    2. '   ' → logprob: -2.0409529209136963
    3. '    ' → logprob: -2.2909529209136963
    4. 'for' → logprob: -4.415952682495117
    5. ' ' → logprob: -5.665952682495117
    6. '<|end|>' → logprob: -5.915952682495117
    7. '    
' → logprob: -6.665952682495117
    8. '     
' → logprob: -7.915952682495117
    9. '	for' → logprob: -8.040952682495117
    10. ' 
' → logprob: -8.415952682495117

Token 32: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.013515124097466469
    2. 'for' (adapté à ' for') → logprob: -4.388514995574951
    3. '   ' → logprob: -7.388514995574951
    4. '    ' → logprob: -8.88851547241211
    5. ' ' → logprob: -9.01351547241211
    6. '	for' → logprob: -10.01351547241211
    7. ' a' → logprob: -11.01351547241211
    8. ' if' → logprob: -11.13851547241211
    9. ' ' → logprob: -11.38851547241211
    10. ' perm' → logprob: -11.51351547241211

Token 33: ' j' (ID: 441)
  Prédit: ' range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.6851024627685547
    2. ' n' → logprob: -1.0601024627685547
    3. ' j' → logprob: -2.4351024627685547
    4. 'range' → logprob: -3.3101024627685547
    5. 'n' → logprob: -3.9351024627685547
    6. 'j' → logprob: -5.560102462768555
    7. '(n' → logprob: -7.810102462768555
    8. ' i' → logprob: -7.810102462768555
    9. ' ' → logprob: -8.185102462768555
    10. '(range' → logprob: -8.560102462768555

Token 34: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.012687401846051216
    2. 'in' → logprob: -4.3876872062683105
    3. ' ' → logprob: -9.762687683105469
    4. '+' → logprob: -10.262687683105469
    5. 'range' → logprob: -10.762687683105469
    6. '   ' → logprob: -11.012687683105469
    7. '	in' → logprob: -11.887687683105469
    8. ' range' → logprob: -12.012687683105469
    9. '(' → logprob: -12.262687683105469
    10. 'n' → logprob: -12.262687683105469

Token 35: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.8419910669326782
    2. ' range' → logprob: -1.2169910669326782
    3. '(i' → logprob: -2.4669909477233887
    4. 'i' → logprob: -2.7169909477233887
    5. ' i' → logprob: -2.8419909477233887
    6. '(n' → logprob: -3.5919909477233887
    7. 'n' → logprob: -3.9669909477233887
    8. ' n' → logprob: -4.466990947723389
    9. '(range' → logprob: -5.466990947723389
    10. '(' → logprob: -6.966990947723389

Token 36: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.028514491394162178
    2. '(' → logprob: -3.7785143852233887
    3. '(i' → logprob: -5.278514385223389
    4. ' (' → logprob: -9.028514862060547
    5. '(range' → logprob: -10.653514862060547
    6. ' n' → logprob: -12.153514862060547
    7. '(j' → logprob: -14.028514862060547
    8. '(
' → logprob: -14.028514862060547
    9. ' range' → logprob: -14.153514862060547
    10. ')' → logprob: -14.153514862060547

Token 37: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.002209973521530628
    2. ')' → logprob: -6.2522101402282715
    3. ':' → logprob: -8.752209663391113
    4. '):
' → logprob: -9.252209663391113
    5. '+' → logprob: -11.127209663391113
    6. ' ):' → logprob: -12.502209663391113
    7. '-' → logprob: -13.252209663391113
    8. '():' → logprob: -13.377209663391113
    9. '   ' → logprob: -13.752209663391113
    10. ':)' → logprob: -14.377209663391113

Token 38: '       ' (ID: 309)
  Prédit: '    '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '    ' → logprob: -0.7690469026565552
    2. ' ' → logprob: -1.1440469026565552
    3. '       ' → logprob: -2.0190467834472656
    4. ' if' → logprob: -3.3940467834472656
    5. '   ' → logprob: -3.8940467834472656
    6. 'if' → logprob: -4.394046783447266
    7. '[' → logprob: -5.019046783447266
    8. '<|end|>' → logprob: -5.894046783447266
    9. '        ' → logprob: -6.019046783447266
    10. ' (' → logprob: -6.644046783447266

Token 39: ' if' (ID: 538)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5476510524749756
    2. ' if' → logprob: -1.5476510524749756
    3. '    ' → logprob: -2.1726510524749756
    4. 'if' (adapté à ' if') → logprob: -2.6726510524749756
    5. '   ' → logprob: -4.672651290893555
    6. '<|end|>' → logprob: -5.047651290893555
    7. '       ' → logprob: -5.422651290893555
    8. '[' → logprob: -6.297651290893555
    9. ' (' → logprob: -7.297651290893555
    10. '  ' → logprob: -7.297651290893555

Token 40: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.12786667048931122
    2. 'i' → logprob: -2.252866744995117
    3. ' a' → logprob: -4.752866744995117
    4. 'a' → logprob: -5.252866744995117
    5. ' ' → logprob: -7.502866744995117
    6. ' (' → logprob: -9.002866744995117
    7. '(i' → logprob: -9.127866744995117
    8. '    ' → logprob: -9.627866744995117
    9. '(' → logprob: -9.877866744995117
    10. ' abs' → logprob: -9.877866744995117

Token 41: ' !=' (ID: 1666)
  Prédit: ' !='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' !=' → logprob: -0.045364994555711746
    2. '!=' → logprob: -3.17036509513855
    3. ' >' → logprob: -6.670364856719971
    4. ' <' → logprob: -8.045365333557129
    5. ' ==' → logprob: -8.045365333557129
    6. '+' → logprob: -8.295365333557129
    7. '>' → logprob: -9.170365333557129
    8. '==' → logprob: -10.295365333557129
    9. '<' → logprob: -10.920365333557129
    10. ' ' → logprob: -11.545365333557129

Token 42: ' j' (ID: 441)
  Prédit: 'j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.06197160854935646
    2. ' j' → logprob: -2.811971664428711
    3. ' ' → logprob: -12.811971664428711
    4. '	j' → logprob: -13.811971664428711
    5. ' ' → logprob: -16.31197166442871
    6. '   ' → logprob: -16.56197166442871
    7. '    ' → logprob: -17.68697166442871
    8. '  ' → logprob: -18.18697166442871
    9. '<|end|>' → logprob: -18.68697166442871
    10. '_j' → logprob: -18.81197166442871

Token 43: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.18272916972637177
    2. ' and' → logprob: -1.8077291250228882
    3. 'and' → logprob: -7.182729244232178
    4. ' :' → logprob: -7.432729244232178
    5. ':
' → logprob: -7.557729244232178
    6. '           ' → logprob: -7.557729244232178
    7. '):' → logprob: -8.18272876739502
    8. ')' → logprob: -8.80772876739502
    9. '       ' → logprob: -9.68272876739502
    10. '   ' → logprob: -10.30772876739502

Token 44: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.05450091511011124
    2. ':' → logprob: -3.4295008182525635
    3. ' and' → logprob: -4.304501056671143
    4. ' :' → logprob: -6.054501056671143
    5. '               ' → logprob: -6.304501056671143
    6. '            ' → logprob: -7.179501056671143
    7. 'per' → logprob: -7.929501056671143
    8. ' ' → logprob: -8.304500579833984
    9. '       ' → logprob: -8.304500579833984
    10. 'and' → logprob: -8.429500579833984

Token 45: ' perms' (ID: 189933)
  Prédit: 'per'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'per' → logprob: -0.1835218369960785
    2. ' perms' → logprob: -2.0585217475891113
    3. '               ' → logprob: -3.6835217475891113
    4. ' per' → logprob: -5.058521747589111
    5. '           ' → logprob: -5.808521747589111
    6. ' perm' → logprob: -6.433521747589111
    7. 'perm' → logprob: -6.808521747589111
    8. 'for' → logprob: -7.558521747589111
    9. ' for' → logprob: -7.683521747589111
    10. ' if' → logprob: -7.683521747589111

Token 46: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.04316772520542145
    2. '.' → logprob: -3.16816782951355
    3. ' .' → logprob: -9.043168067932129
    4. '.extend' → logprob: -10.293168067932129
    5. '.app' → logprob: -12.668168067932129
    6. ').' → logprob: -12.918168067932129
    7. 'append' → logprob: -13.043168067932129
    8. '.push' → logprob: -13.293168067932129
    9. '.add' → logprob: -13.418168067932129
    10. '.Append' → logprob: -14.043168067932129

Token 47: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.846043050289154
    2. '(' → logprob: -1.0960431098937988
    3. '((' → logprob: -1.4710431098937988
    4. '(f' → logprob: -5.096043109893799
    5. '("("' → logprob: -8.09604263305664
    6. '('' → logprob: -8.59604263305664
    7. ' (' → logprob: -9.09604263305664
    8. '([' → logprob: -9.34604263305664
    9. '(
' → logprob: -9.72104263305664
    10. '(list' → logprob: -11.09604263305664

Token 48: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.006141376681625843
    2. '[j' → logprob: -5.381141185760498
    3. '[' → logprob: -6.506141185760498
    4. '[a' → logprob: -12.506141662597656
    5. '[I' → logprob: -12.506141662597656
    6. ' [' → logprob: -12.631141662597656
    7. ')' → logprob: -13.006141662597656
    8. '[x' → logprob: -13.506141662597656
    9. '[u' → logprob: -13.756141662597656
    10. '[k' → logprob: -13.881141662597656

Token 49: ']' (ID: 60)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.1924978643655777
    2. ' +' → logprob: -1.9424978494644165
    3. ']' → logprob: -4.067497730255127
    4. '[j' → logprob: -5.317497730255127
    5. '[' → logprob: -5.692497730255127
    6. '+j' → logprob: -6.067497730255127
    7. '[i' → logprob: -6.567497730255127
    8. ']+' → logprob: -6.692497730255127
    9. '])' → logprob: -7.942497730255127
    10. '][' → logprob: -8.067498207092285

Token 50: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.010769065469503403
    2. ' +' → logprob: -4.635768890380859
    3. '+j' → logprob: -7.135768890380859
    4. ')' → logprob: -9.38576889038086
    5. '[' → logprob: -9.76076889038086
    6. '+)' → logprob: -10.51076889038086
    7. '[j' → logprob: -11.13576889038086
    8. '+a' → logprob: -12.01076889038086
    9. '+i' → logprob: -12.26076889038086
    10. '+
' → logprob: -12.63576889038086

Token 51: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.00835984107106924
    2. ' a' → logprob: -4.883359909057617
    3. '"' → logprob: -7.508359909057617
    4. ''' → logprob: -9.383359909057617
    5. ' ' → logprob: -9.633359909057617
    6. '"a' → logprob: -10.883359909057617
    7. ''a' → logprob: -11.133359909057617
    8. ' "' → logprob: -12.008359909057617
    9. '   ' → logprob: -12.508359909057617
    10. '  ' → logprob: -12.883359909057617

Token 52: '[j' (ID: 7895)
  Prédit: '[j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[j' → logprob: -5.514650183613412e-05
    2. '[' → logprob: -10.125055313110352
    3. ''[' → logprob: -12.000055313110352
    4. 'j' → logprob: -13.250055313110352
    5. '```' → logprob: -13.375055313110352
    6. '[a' → logprob: -13.875055313110352
    7. '[i' → logprob: -14.000055313110352
    8. '"[' → logprob: -14.125055313110352
    9. '[
' → logprob: -14.375055313110352
    10. ' [' → logprob: -15.000055313110352

Token 53: '])
' (ID: 5169)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0942801982164383
    2. '])' → logprob: -2.469280242919922
    3. ''])' → logprob: -5.469280242919922
    4. '))' → logprob: -7.969280242919922
    5. ']' → logprob: -8.344280242919922
    6. ')])' → logprob: -8.344280242919922
    7. '')' → logprob: -9.219280242919922
    8. '"])' → logprob: -9.594280242919922
    9. '`)' → logprob: -9.844280242919922
    10. ')
' → logprob: -10.844280242919922

Token 54: 'per' (ID: 543)
  Prédit: 'per'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'per' → logprob: -1.2348637580871582
    2. 'for' → logprob: -1.4848637580871582
    3. 'print' → logprob: -1.6098637580871582
    4. 'max' → logprob: -1.7348637580871582
    5. 'result' → logprob: -3.734863758087158
    6. ')' → logprob: -4.109863758087158
    7. 'sorted' → logprob: -4.859863758087158
    8. 'valid' → logprob: -4.984863758087158
    9. '.' → logprob: -5.109863758087158
    10. 'ans' → logprob: -5.484863758087158

Token 55: 'ms' (ID: 1782)
  Prédit: 'ms'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ms' → logprob: -0.0011940367985516787
    2. 's' → logprob: -6.876194000244141
    3. 'm' → logprob: -9.37619400024414
    4. 'ps' → logprob: -10.62619400024414
    5. '.append' → logprob: -10.75119400024414
    6. 'ts' → logprob: -11.62619400024414
    7. '[' → logprob: -12.50119400024414
    8. '```' → logprob: -12.50119400024414
    9. 'ns' → logprob: -13.25119400024414
    10. 'ls' → logprob: -13.50119400024414

Token 56: '.sort' (ID: 19551)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 57: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.04302419722080231
    2. '(' → logprob: -3.1680243015289307
    3. '()
' → logprob: -11.668024063110352
    4. '(
' → logprob: -12.793024063110352
    5. '()`' → logprob: -12.918024063110352
    6. '()

' → logprob: -13.043024063110352
    7. '();' → logprob: -13.793024063110352
    8. ' ()' → logprob: -14.168024063110352
    9. '()\' → logprob: -14.293024063110352
    10. '(

' → logprob: -14.293024063110352

Token 58: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.004175271838903427
    2. 'if' → logprob: -5.629175186157227
    3. 'for' → logprob: -8.129175186157227
    4. '[' → logprob: -8.504175186157227
    5. '#' → logprob: -10.629175186157227
    6. 'prin' → logprob: -11.129175186157227
    7. '[
' → logprob: -11.504175186157227
    8. '```' → logprob: -11.754175186157227
    9. '#print' → logprob: -12.004175186157227
    10. 'pr' → logprob: -12.754175186157227

Token 59: '(per' (ID: 96497)
  Prédit: '(per'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(per' → logprob: -0.2268896996974945
    2. '(' → logprob: -1.601889729499817
    3. '('' → logprob: -7.351889610290527
    4. '("("' → logprob: -7.601889610290527
    5. 'per' → logprob: -8.726889610290527
    6. '()' → logprob: -9.101889610290527
    7. '("' → logprob: -11.226889610290527
    8. '(paren' → logprob: -11.476889610290527
    9. '(len' → logprob: -11.726889610290527
    10. '((' → logprob: -12.351889610290527

Token 60: 'ms' (ID: 1782)
  Prédit: 'ms'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ms' → logprob: -0.004424539860337973
    2. 's' → logprob: -5.504424571990967
    3. 'ps' → logprob: -8.004424095153809
    4. 'ams' → logprob: -13.004424095153809
    5. 'fs' → logprob: -13.004424095153809
    6. 'm' → logprob: -13.129424095153809
    7. 'ts' → logprob: -13.629424095153809
    8. ')' → logprob: -13.754424095153809
    9. 'ls' → logprob: -13.754424095153809
    10. 'print' → logprob: -14.254424095153809

Token 61: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.006782623939216137
    2. ')' → logprob: -5.006782531738281
    3. '[-' → logprob: -9.631782531738281
    4. '0' → logprob: -14.506782531738281
    5. ']' → logprob: -14.881782531738281
    6. '])' → logprob: -15.131782531738281
    7. '))' → logprob: -16.25678253173828
    8. '[
' → logprob: -16.38178253173828
    9. '[len' → logprob: -16.75678253173828
    10. ')[' → logprob: -17.00678253173828

Token 62: '2' (ID: 17)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -2.5776860184123507e-06
    2. ' ' → logprob: -13.37500286102295
    3. '[' → logprob: -14.37500286102295
    4. '1' → logprob: -16.562501907348633
    5. '۰' → logprob: -16.937501907348633
    6. '00' → logprob: -17.187501907348633
    7. ')' → logprob: -17.937501907348633
    8. '   ' → logprob: -18.250001907348633
    9. '000' → logprob: -18.375001907348633
    10. '```' → logprob: -18.562501907348633

Token 63: '])' (ID: 4636)
  Prédit: '])'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '])' → logprob: -0.00028016636497341096
    2. ')' → logprob: -8.625280380249023
    3. ']' → logprob: -9.250280380249023
    4. ' ])' → logprob: -13.125280380249023
    5. '])
' → logprob: -13.875280380249023
    6. '))' → logprob: -14.875280380249023
    7. ')])' → logprob: -15.000280380249023
    8. ']))' → logprob: -15.250280380249023
    9. ']])' → logprob: -15.750280380249023
    10. ')]' → logprob: -16.000280380249023


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 61
Tokens correctement prédits (1ère position, stricte): 26
Tokens correctement prédits (1ère position, avec adaptation): 27
Tokens correctement prédits (top 10): 50
Précision stricte (1ère position): 42.62%
Précision adaptée (1ère position): 44.26%
Précision (top 10): 81.97%
================================================================================
