================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:11:11
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
total = 0
for i in range(n):
    v = int(input())
    total += v
average = total // n
print(average)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00038134094211272895
    2. '(n' → logprob: -9.000381469726562
    3. ''' → logprob: -9.500381469726562
    4. '('' → logprob: -10.125381469726562
    5. '```' → logprob: -10.125381469726562
    6. '`' → logprob: -10.750381469726562
    7. '("("' → logprob: -10.750381469726562
    8. '()' → logprob: -11.250381469726562
    9. 'n' → logprob: -11.625381469726562
    10. ')' → logprob: -12.000381469726562

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0733630508184433
    2. ')' → logprob: -2.8233630657196045
    3. '()' → logprob: -4.698362827301025
    4. '())' → logprob: -6.948362827301025
    5. '```' → logprob: -8.198363304138184
    6. '(
' → logprob: -8.448363304138184
    7. '('' → logprob: -8.948363304138184
    8. '(()' → logprob: -9.073363304138184
    9. '`' → logprob: -9.198363304138184
    10. '("("' → logprob: -9.698363304138184

Token 5: 'total' (ID: 9577)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -1.0521364212036133
    2. 'for' → logprob: -1.3021364212036133
    3. 'if' → logprob: -1.4271364212036133
    4. 's' → logprob: -3.1771364212036133
    5. 'f' → logprob: -4.177136421203613
    6. 'x' → logprob: -4.177136421203613
    7. 'a' → logprob: -4.552136421203613
    8. ')' → logprob: -4.677136421203613
    9. ' ' → logprob: -4.677136421203613
    10. '*' → logprob: -4.927136421203613

Token 6: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.2741996645927429
    2. '+' → logprob: -2.3991997241973877
    3. ' +=' → logprob: -2.8991997241973877
    4. '[' → logprob: -3.6491997241973877
    5. '.' → logprob: -3.8991997241973877
    6. '_space' → logprob: -4.024199485778809
    7. ' ' → logprob: -4.774199485778809
    8. ')' → logprob: -4.774199485778809
    9. '=' → logprob: -5.274199485778809
    10. '+=' → logprob: -6.399199485778809

Token 7: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.16109320521354675
    2. '0' → logprob: -1.9110932350158691
    3. ' n' → logprob: -7.161093235015869
    4. 'n' → logprob: -9.411092758178711
    5. ' int' → logprob: -12.911092758178711
    6. 'int' → logprob: -13.161092758178711
    7. 'input' → logprob: -13.286092758178711
    8. ')' → logprob: -14.161092758178711
    9. ' input' → logprob: -14.161092758178711
    10. ' )' → logprob: -14.786092758178711

Token 8: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0034165321849286556
    2. 'n' → logprob: -5.753416538238525
    3. ' ' → logprob: -8.503416061401367
    4. ' n' → logprob: -10.503416061401367
    5. 'input' → logprob: -12.503416061401367
    6. 'sum' → logprob: -13.128416061401367
    7. 'total' → logprob: -13.753416061401367
    8. '"' → logprob: -15.128416061401367
    9. ')' → logprob: -15.378416061401367
    10. 'int' → logprob: -15.378416061401367

Token 9: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0932621955871582
    2. '
' → logprob: -3.093262195587158
    3. '\n' → logprob: -3.468262195587158
    4. '```' → logprob: -4.843262195587158
    5. ' for' → logprob: -5.718262195587158
    6. '\' → logprob: -7.968262195587158
    7. '``' → logprob: -8.09326171875
    8. ' 
' → logprob: -8.34326171875
    9. '`' → logprob: -8.96826171875
    10. '  
' → logprob: -9.59326171875

Token 10: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0014972452772781253
    2. '
' → logprob: -7.251497268676758
    3. ' for' → logprob: -8.001497268676758
    4. '\n' → logprob: -8.126497268676758
    5. '```' → logprob: -9.251497268676758
    6. '\' → logprob: -10.001497268676758
    7. '`' → logprob: -12.501497268676758
    8. '' → logprob: -12.626497268676758
    9. '``' → logprob: -13.251497268676758
    10. ' 
' → logprob: -13.876497268676758

Token 11: ' i' (ID: 575)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.07406764477491379
    2. ' i' → logprob: -2.6990675926208496
    3. ' n' → logprob: -5.82406759262085
    4. '  ' → logprob: -6.82406759262085
    5. ' ‌' → logprob: -10.449068069458008
    6. 'i' → logprob: -11.574068069458008
    7. '_' → logprob: -11.824068069458008
    8. ' _' → logprob: -12.324068069458008
    9. ' )' → logprob: -12.324068069458008
    10. ' ' → logprob: -12.449068069458008

Token 12: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.014208877459168434
    2. 'in' → logprob: -4.764208793640137
    3. ' ' → logprob: -5.264208793640137
    4. '<|end|>' → logprob: -9.389208793640137
    5. '  ' → logprob: -9.514208793640137
    6. ' i' → logprob: -9.889208793640137
    7. ' n' → logprob: -10.139208793640137
    8. ')' → logprob: -10.389208793640137
    9. 'range' → logprob: -10.639208793640137
    10. ' range' → logprob: -11.139208793640137

Token 13: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.014194413088262081
    2. 'range' → logprob: -4.264194488525391
    3. ' ' → logprob: -10.63919448852539
    4. ' n' → logprob: -12.63919448852539
    5. ' in' → logprob: -13.26419448852539
    6. '	range' → logprob: -14.38919448852539
    7. ')' → logprob: -14.51419448852539
    8. '(range' → logprob: -15.01419448852539
    9. 'n' → logprob: -15.63919448852539
    10. ' xrange' → logprob: -16.01419448852539

Token 14: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.38713398575782776
    2. '(n' → logprob: -1.1371339559555054
    3. ' (' → logprob: -9.262133598327637
    4. '(len' → logprob: -9.512133598327637
    5. '(i' → logprob: -9.512133598327637
    6. '(range' → logprob: -11.262133598327637
    7. '((' → logprob: -13.387133598327637
    8. '(
' → logprob: -14.012133598327637
    9. '(length' → logprob: -14.012133598327637
    10. '(a' → logprob: -14.637133598327637

Token 15: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.2526545524597168
    2. ')' → logprob: -1.5026545524597168
    3. '+' → logprob: -7.502654552459717
    4. ' ):' → logprob: -10.127655029296875
    5. '):
' → logprob: -10.252655029296875
    6. ' )' → logprob: -10.627655029296875
    7. ',' → logprob: -10.752655029296875
    8. ':' → logprob: -10.752655029296875
    9. '**' → logprob: -12.002655029296875
    10. ')**' → logprob: -12.252655029296875

Token 16: '   ' (ID: 271)
  Prédit: '    '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '    ' → logprob: -0.31833937764167786
    2. '     
' → logprob: -1.5683393478393555
    3. ' ' → logprob: -3.9433393478393555
    4. '   ' → logprob: -3.9433393478393555
    5. '    
' → logprob: -4.8183393478393555
    6. '```' → logprob: -4.8183393478393555
    7. ' 
' → logprob: -5.1933393478393555
    8. ' total' → logprob: -6.4433393478393555
    9. '`' → logprob: -7.9433393478393555
    10. '[' → logprob: -8.318339347839355

Token 17: ' v' (ID: 323)
  Prédit: ' total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' total' → logprob: -0.07769796997308731
    2. 'total' → logprob: -3.077697992324829
    3. '    ' → logprob: -4.45269775390625
    4. '   ' → logprob: -4.82769775390625
    5. ' ' → logprob: -4.95269775390625
    6. ' input' → logprob: -7.57769775390625
    7. ' t' → logprob: -8.07769775390625
    8. ' i' → logprob: -8.70269775390625
    9. ' s' → logprob: -9.32769775390625
    10. 't' → logprob: -9.45269775390625

Token 18: ' =' (ID: 314)
  Prédit: 'al'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'al' → logprob: -0.7519198060035706
    2. ' ' → logprob: -1.2519197463989258
    3. '   ' → logprob: -2.251919746398926
    4. ' =' → logprob: -2.501919746398926
    5. 'alue' → logprob: -3.876919746398926
    6. '=' → logprob: -4.001919746398926
    7. 'a' → logprob: -5.251919746398926
    8. '  ' → logprob: -5.876919746398926
    9. '       ' → logprob: -6.376919746398926
    10. '    ' → logprob: -6.626919746398926

Token 19: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.2520114779472351
    2. ' int' → logprob: -1.5020115375518799
    3. '0' → logprob: -10.0020112991333
    4. 'float' → logprob: -11.6270112991333
    5. '   ' → logprob: -11.7520112991333
    6. ' float' → logprob: -12.3770112991333
    7. ' ' → logprob: -12.7520112991333
    8. '(int' → logprob: -13.0020112991333
    9. '<int' → logprob: -13.1270112991333
    10. 'input' → logprob: -13.3770112991333

Token 20: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.2015189826488495
    2. '(' → logprob: -1.7015190124511719
    3. ' (' → logprob: -9.701519012451172
    4. 'input' → logprob: -10.576519012451172
    5. '(v' → logprob: -12.201519012451172
    6. '()' → logprob: -12.326519012451172
    7. '(
' → logprob: -13.201519012451172
    8. ' input' → logprob: -13.701519012451172
    9. '`' → logprob: -14.201519012451172
    10. '=input' → logprob: -14.451519012451172

Token 21: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.10448623448610306
    2. '()' → logprob: -2.3544862270355225
    3. ')' → logprob: -5.479486465454102
    4. '(' → logprob: -9.479486465454102
    5. '()))' → logprob: -11.729486465454102
    6. '())
' → logprob: -12.604486465454102
    7. ' ())' → logprob: -12.729486465454102
    8. 'v' → logprob: -13.229486465454102
    9. '()
' → logprob: -13.729486465454102
    10. '('' → logprob: -13.979486465454102

Token 22: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14535722136497498
    2. 'total' → logprob: -2.520357131958008
    3. ' total' → logprob: -3.520357131958008
    4. ' ' → logprob: -4.770357131958008
    5. '    
' → logprob: -4.770357131958008
    6. '    ' → logprob: -6.270357131958008
    7. ' 
' → logprob: -6.395357131958008
    8. '
' → logprob: -6.645357131958008
    9. '  ' → logprob: -7.645357131958008
    10. '(total' → logprob: -7.645357131958008

Token 23: ' total' (ID: 3609)
  Prédit: 'total'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'total' (adapté à ' total') → logprob: -0.4052322506904602
    2. ' total' → logprob: -1.1552321910858154
    3. '   ' → logprob: -4.0302324295043945
    4. '	total' → logprob: -9.030232429504395
    5. '    ' → logprob: -9.655232429504395
    6. ' ' → logprob: -9.905232429504395
    7. ' if' → logprob: -9.905232429504395
    8. 'if' → logprob: -10.280232429504395
    9. '+' → logprob: -10.530232429504395
    10. '       ' → logprob: -11.405232429504395

Token 24: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.0029700954910367727
    2. '+=' → logprob: -6.002970218658447
    3. ' ' → logprob: -8.252969741821289
    4. '+' → logprob: -8.627969741821289
    5. '<|end|>' → logprob: -11.127969741821289
    6. '    ' → logprob: -11.752969741821289
    7. ' +' → logprob: -11.752969741821289
    8. '```' → logprob: -12.002969741821289
    9. '+='' → logprob: -12.752969741821289
    10. ' -=' → logprob: -13.127969741821289

Token 25: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.5759403705596924
    2. ' v' → logprob: -0.8259403705596924
    3. ' ' → logprob: -14.200940132141113
    4. ' ' → logprob: -15.825940132141113
    5. '	v' → logprob: -16.70094108581543
    6. 'i' → logprob: -18.07594108581543
    7. '```' → logprob: -19.07594108581543
    8. ' i' → logprob: -19.32594108581543
    9. '(v' → logprob: -19.57594108581543
    10. '   ' → logprob: -20.07594108581543

Token 26: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.4255906641483307
    2. '\n' → logprob: -1.8005906343460083
    3. '
' → logprob: -2.675590753555298
    4. ' 
' → logprob: -3.800590753555298
    5. '<|end|>' → logprob: -4.425590515136719
    6. ' ' → logprob: -4.550590515136719
    7. '  
' → logprob: -4.675590515136719
    8. '#' → logprob: -4.800590515136719
    9. '%' → logprob: -4.800590515136719
    10. ')' → logprob: -5.300590515136719

Token 27: 'average' (ID: 33570)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.35856229066848755
    2. '\n' → logprob: -1.8585622310638428
    3. '\' → logprob: -3.1085622310638428
    4. '
' → logprob: -3.2335622310638428
    5. ' 
' → logprob: -4.858562469482422
    6. 'p' → logprob: -5.233562469482422
    7. '  
' → logprob: -5.233562469482422
    8. '#' → logprob: -5.358562469482422
    9. ' ' → logprob: -5.483562469482422
    10. '    
' → logprob: -5.733562469482422

Token 28: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -1.0451786518096924
    2. '(' → logprob: -1.2951786518096924
    3. ' /' → logprob: -2.2951786518096924
    4. '_' → logprob: -2.2951786518096924
    5. '/' → logprob: -2.6701786518096924
    6. ' ' → logprob: -2.9201786518096924
    7. '=' → logprob: -3.6701786518096924
    8. '()' → logprob: -4.295178413391113
    9. ')' → logprob: -5.670178413391113
    10. '_total' → logprob: -6.670178413391113

Token 29: ' total' (ID: 3609)
  Prédit: ' total'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' total' → logprob: -0.002190233441069722
    2. 'total' → logprob: -6.127190113067627
    3. ' tot' → logprob: -13.127190589904785
    4. ' ' → logprob: -13.627190589904785
    5. '(total' → logprob: -14.002190589904785
    6. ' ' → logprob: -15.127190589904785
    7. ' totals' → logprob: -15.127190589904785
    8. ' tota' → logprob: -16.00218963623047
    9. ' average' → logprob: -16.25218963623047
    10. ' float' → logprob: -16.50218963623047

Token 30: ' //' (ID: 602)
  Prédit: ' /'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' /' → logprob: -0.09077447652816772
    2. '/' → logprob: -2.4657745361328125
    3. '/n' → logprob: -6.3407745361328125
    4. ' ' → logprob: -10.215774536132812
    5. ' ' → logprob: -11.465774536132812
    6. ' //' → logprob: -11.840774536132812
    7. ''' → logprob: -12.840774536132812
    8. ' n' → logprob: -13.340774536132812
    9. '`' → logprob: -13.465774536132812
    10. '"' → logprob: -13.465774536132812

Token 31: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.02324908785521984
    2. ' n' → logprob: -3.7732491493225098
    3. '(n' → logprob: -12.898248672485352
    4. 'max' → logprob: -14.898248672485352
    5. '(' → logprob: -15.148248672485352
    6. ' ' → logprob: -15.398248672485352
    7. ' (' → logprob: -15.648248672485352
    8. '	n' → logprob: -16.77324867248535
    9. '   ' → logprob: -17.52324867248535
    10. ' max' → logprob: -17.77324867248535

Token 32: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.6875085234642029
    2. '<|end|>' → logprob: -1.0625085830688477
    3. '\n' → logprob: -2.0625085830688477
    4. ')' → logprob: -5.187508583068848
    5. '\' → logprob: -5.437508583068848
    6. '```' → logprob: -5.437508583068848
    7. 'print' → logprob: -5.937508583068848
    8. 'newline' → logprob: -6.687508583068848
    9. '*' → logprob: -6.812508583068848
    10. ' ' → logprob: -6.937508583068848

Token 33: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.026975532993674278
    2. '
' → logprob: -3.776975631713867
    3. '<|end|>' → logprob: -6.026975631713867
    4. '\n' → logprob: -8.276975631713867
    5. '```' → logprob: -8.526975631713867
    6. '#' → logprob: -8.526975631713867
    7. 'if' → logprob: -8.776975631713867
    8. ' print' → logprob: -9.276975631713867
    9. 'for' → logprob: -9.651975631713867
    10. ' 
' → logprob: -10.026975631713867

Token 34: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0005256305448710918
    2. '("("' → logprob: -8.37552547454834
    3. '(total' → logprob: -9.00052547454834
    4. '('' → logprob: -9.00052547454834
    5. '()' → logprob: -10.75052547454834
    6. '(avg' → logprob: -11.87552547454834
    7. 'average' → logprob: -12.12552547454834
    8. '((' → logprob: -12.50052547454834
    9. '(f' → logprob: -12.75052547454834
    10. '("' → logprob: -12.87552547454834

Token 35: 'average' (ID: 33570)
  Prédit: 'average'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'average' → logprob: -9.491498531133402e-06
    2. ' average' → logprob: -11.750009536743164
    3. 'avg' → logprob: -14.500009536743164
    4. 'total' → logprob: -14.500009536743164
    5. ')' → logprob: -15.375009536743164
    6. '"' → logprob: -16.375009536743164
    7. 'aver' → logprob: -17.375009536743164
    8. 'v' → logprob: -17.875009536743164
    9. 'ave' → logprob: -18.000009536743164
    10. 'av' → logprob: -18.250009536743164

Token 36: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.128163257315464e-07
    2. '))' → logprob: -16.125
    3. ' )' → logprob: -16.375
    4. ')`' → logprob: -17.125
    5. ')
' → logprob: -18.0
    6. '`)' → logprob: -18.625
    7. '')' → logprob: -19.25
    8. '）' → logprob: -20.375
    9. '),' → logprob: -20.375
    10. '#' → logprob: -20.375


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 34
Tokens correctement prédits (1ère position, stricte): 15
Tokens correctement prédits (1ère position, avec adaptation): 16
Tokens correctement prédits (top 10): 28
Précision stricte (1ère position): 44.12%
Précision adaptée (1ère position): 47.06%
Précision (top 10): 82.35%
================================================================================
