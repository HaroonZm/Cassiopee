================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:02:13
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
while True:
    s = input()
    if s == '.':
        break
    stack = []
    balanced = True
    for c in s:
        if c == '(' or c == '[':
            stack.append(c)
        elif c == ')':
            if not stack or stack.pop() != '(':
                balanced = False
                break
        elif c == ']':
            if not stack or stack.pop() != '[':
                balanced = False
                break
    if balanced and not stack:
        print("yes")
    else:
        print("no")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'while' (ID: 7032)
  → Token d'amorce (pas de prédiction)

Token 1: ' True' (ID: 6432)
  → Token d'amorce (pas de prédiction)

Token 2: ':
' (ID: 734)
  → Token d'amorce (pas de prédiction)

Token 3: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6668558716773987
    2. ' ' → logprob: -2.041855812072754
    3. '\' → logprob: -2.416855812072754
    4. '    ' → logprob: -2.916855812072754
    5. '\n' → logprob: -2.916855812072754
    6. '    
' → logprob: -3.041855812072754
    7. '```' → logprob: -3.541855812072754
    8. ' 
' → logprob: -3.666855812072754
    9. '  
' → logprob: -4.166855812072754
    10. '     
' → logprob: -5.541855812072754

Token 4: ' s' (ID: 265)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.47797805070877075
    2. '    ' → logprob: -1.727977991104126
    3. ' ' → logprob: -1.977977991104126
    4. '```' → logprob: -3.602977991104126
    5. '       ' → logprob: -4.727978229522705
    6. '  ' → logprob: -5.352978229522705
    7. '    
' → logprob: -5.602978229522705
    8. '        
' → logprob: -6.602978229522705
    9. '`' → logprob: -6.602978229522705
    10. 'pass' → logprob: -6.727978229522705

Token 5: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.17073699831962585
    2. '.' → logprob: -3.1707370281219482
    3. 'u' → logprob: -3.2957370281219482
    4. 't' → logprob: -4.045736789703369
    5. '   ' → logprob: -4.545736789703369
    6. ':' → logprob: -4.920736789703369
    7. ' ' → logprob: -5.045736789703369
    8. ' =' → logprob: -5.170736789703369
    9. ')' → logprob: -5.420736789703369
    10. ',' → logprob: -5.920736789703369

Token 6: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.6931726932525635
    2. ' input' → logprob: -0.6931726932525635
    3. 's' → logprob: -12.318172454833984
    4. ' ' → logprob: -12.318172454833984
    5. '(input' → logprob: -12.443172454833984
    6. ' s' → logprob: -12.818172454833984
    7. '=input' → logprob: -13.068172454833984
    8. 'raw' → logprob: -13.818172454833984
    9. 'int' → logprob: -14.068172454833984
    10. '   ' → logprob: -14.318172454833984

Token 7: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03704417496919632
    2. '('' → logprob: -3.7870442867279053
    3. '("("' → logprob: -4.787044048309326
    4. ''' → logprob: -5.912044048309326
    5. '()' → logprob: -6.662044048309326
    6. '"' → logprob: -7.912044048309326
    7. '```' → logprob: -8.162044525146484
    8. '   ' → logprob: -8.912044525146484
    9. ' ' → logprob: -9.287044525146484
    10. '("")' → logprob: -9.412044525146484

Token 8: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.614962637424469
    2. '<|end|>' → logprob: -1.8649625778198242
    3. ' ' → logprob: -2.364962577819824
    4. ':' → logprob: -2.739962577819824
    5. ' if' → logprob: -2.864962577819824
    6. '.' → logprob: -3.239962577819824
    7. '    ' → logprob: -4.739962577819824
    8. ')' → logprob: -5.114962577819824
    9. '  
' → logprob: -5.364962577819824
    10. '  ' → logprob: -5.614962577819824

Token 9: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.4590074121952057
    2. ' ' → logprob: -1.9590073823928833
    3. '   ' → logprob: -1.9590073823928833
    4. 'if' (adapté à ' if') → logprob: -3.209007501602173
    5. '    ' → logprob: -4.584007263183594
    6. ':' → logprob: -4.834007263183594
    7. ')' → logprob: -4.959007263183594
    8. '.' → logprob: -5.209007263183594
    9. 'i' → logprob: -5.334007263183594
    10. '<|end|>' → logprob: -5.834007263183594

Token 10: ' s' (ID: 265)
  Prédit: ' s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.13767816126346588
    2. ' not' → logprob: -2.2626781463623047
    3. ' ' → logprob: -3.7626781463623047
    4. 's' → logprob: -6.762678146362305
    5. '  ' → logprob: -9.512678146362305
    6. ' len' → logprob: -9.762678146362305
    7. 'not' → logprob: -10.512678146362305
    8. ' isinstance' → logprob: -12.887678146362305
    9. '    ' → logprob: -13.637678146362305
    10. ' a' → logprob: -13.887678146362305

Token 11: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.06463161110877991
    2. '==' → logprob: -3.439631700515747
    3. '.' → logprob: -3.689631700515747
    4. '.startswith' → logprob: -6.064631462097168
    5. ' .' → logprob: -6.189631462097168
    6. '.strip' → logprob: -7.314631462097168
    7. ' !=' → logprob: -8.939631462097168
    8. ' ' → logprob: -9.189631462097168
    9. '.endswith' → logprob: -10.064631462097168
    10. ' =' → logprob: -10.189631462097168

Token 12: ' '.' (ID: 12662)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.08357401192188263
    2. ''' → logprob: -2.583574056625366
    3. ' "' → logprob: -5.583573818206787
    4. ' '' → logprob: -7.583573818206787
    5. '""' → logprob: -8.333574295043945
    6. '''' → logprob: -9.833574295043945
    7. ' ' → logprob: -9.958574295043945
    8. ' ""' → logprob: -11.083574295043945
    9. ' ''' → logprob: -11.958574295043945
    10. '"I' → logprob: -12.458574295043945

Token 13: '':
' (ID: 7669)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.7621073722839355
    2. '':' → logprob: -0.7621073722839355
    3. '.' → logprob: -3.6371073722839355
    4. '\n' → logprob: -4.3871073722839355
    5. ''\' → logprob: -4.5121073722839355
    6. '"' → logprob: -4.8871073722839355
    7. ':' → logprob: -6.5121073722839355
    8. ''):' → logprob: -6.6371073722839355
    9. '':
' → logprob: -7.0121073722839355
    10. ''.' → logprob: -7.0121073722839355

Token 14: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.006546027958393097
    2. '   ' → logprob: -5.6315460205078125
    3. ' break' → logprob: -5.8815460205078125
    4. '    ' → logprob: -10.131546020507812
    5. '	break' → logprob: -10.131546020507812
    6. 'break' → logprob: -10.506546020507812
    7. '    ' → logprob: -11.631546020507812
    8. '     ' → logprob: -11.756546020507812
    9. '      ' → logprob: -11.756546020507812
    10. ' ' → logprob: -12.756546020507812

Token 15: ' break' (ID: 2338)
  Prédit: ' break'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' break' → logprob: -0.021656004711985588
    2. '       ' → logprob: -3.896656036376953
    3. '   ' → logprob: -7.646656036376953
    4. '    ' → logprob: -8.021656036376953
    5. 'break' (adapté à ' break') → logprob: -8.396656036376953
    6. '	break' → logprob: -10.271656036376953
    7. '        ' → logprob: -11.521656036376953
    8. '_break' → logprob: -12.021656036376953
    9. '           ' → logprob: -12.146656036376953
    10. ' ' → logprob: -12.521656036376953

Token 16: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05816692113876343
    2. '    
' → logprob: -3.808166980743408
    3. 'print' → logprob: -4.933166980743408
    4. ' ' → logprob: -5.058166980743408
    5. '
' → logprob: -5.183166980743408
    6. '\n' → logprob: -5.183166980743408
    7. '  
' → logprob: -6.058166980743408
    8. '<|end|>' → logprob: -6.808166980743408
    9. '    ' → logprob: -6.933166980743408
    10. ')' → logprob: -7.183166980743408

Token 17: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0467398427426815
    2. 'print' → logprob: -3.2967398166656494
    3. ' ' → logprob: -6.0467400550842285
    4. ' print' → logprob: -6.5467400550842285
    5. '<|end|>' → logprob: -7.4217400550842285
    6. '  ' → logprob: -7.5467400550842285
    7. ' continue' → logprob: -7.5467400550842285
    8. ' if' → logprob: -7.5467400550842285
    9. '    
' → logprob: -7.6717400550842285
    10. 'continue' → logprob: -8.17173957824707

Token 18: ' stack' (ID: 10825)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.804657518863678
    2. '   ' → logprob: -1.0546574592590332
    3. ' print' → logprob: -2.054657459259033
    4. 'a' → logprob: -4.429657459259033
    5. 'n' → logprob: -4.554657459259033
    6. 'p' → logprob: -4.804657459259033
    7. 'try' → logprob: -5.554657459259033
    8. ' if' → logprob: -5.804657459259033
    9. ' try' → logprob: -5.804657459259033
    10. 'count' → logprob: -5.929657459259033

Token 19: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.029777921736240387
    2. '.append' → logprob: -3.529778003692627
    3. '.setdefault' → logprob: -11.029777526855469
    4. ' .' → logprob: -12.654777526855469
    5. ' =' → logprob: -13.279777526855469
    6. '.push' → logprob: -13.654777526855469
    7. '.extend' → logprob: -13.904777526855469
    8. '.add' → logprob: -14.029777526855469
    9. '.put' → logprob: -14.279777526855469
    10. '=' → logprob: -14.404777526855469

Token 20: ' []
' (ID: 8911)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.029760213568806648
    2. ' []' → logprob: -3.5297601222991943
    3. '[' → logprob: -12.279760360717773
    4. '[]}' → logprob: -12.779760360717773
    5. '[]>' → logprob: -13.529760360717773
    6. '[]
' → logprob: -14.404760360717773
    7. ' [' → logprob: -15.654760360717773
    8. '[]

' → logprob: -16.029760360717773
    9. '[],' → logprob: -17.029760360717773
    10. '[]"' → logprob: -17.654760360717773

Token 21: '   ' (ID: 271)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.8858458995819092
    2. ' ' → logprob: -1.5108458995819092
    3. '<|end|>' → logprob: -1.6358458995819092
    4. 'for' → logprob: -2.260845899581909
    5. '   ' → logprob: -3.135845899581909
    6. '<|end|>' → logprob: -5.260846138000488
    7. '  ' → logprob: -5.760846138000488
    8. '    ' → logprob: -5.760846138000488
    9. '[' → logprob: -6.635846138000488
    10. '.' → logprob: -6.635846138000488

Token 22: ' balanced' (ID: 32879)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.018953969702124596
    2. ' for' → logprob: -4.018953800201416
    3. '   ' → logprob: -7.268953800201416
    4. ' ' → logprob: -10.643954277038574
    5. 'is' → logprob: -11.393954277038574
    6. 'valid' → logprob: -11.518954277038574
    7. 'error' → logprob: -11.518954277038574
    8. '  ' → logprob: -12.268954277038574
    9. 'token' → logprob: -12.393954277038574
    10. 'if' → logprob: -12.643954277038574

Token 23: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.31027987599372864
    2. '=' → logprob: -1.4352798461914062
    3. '_' → logprob: -3.8102798461914062
    4. ' ' → logprob: -5.685279846191406
    5. '(' → logprob: -6.685279846191406
    6. '_space' → logprob: -8.185279846191406
    7. ')' → logprob: -8.810279846191406
    8. ',' → logprob: -8.810279846191406
    9. '?' → logprob: -8.935279846191406
    10. 'ness' → logprob: -9.310279846191406

Token 24: ' True' (ID: 6432)
  Prédit: ' True'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' True' → logprob: -0.029752222821116447
    2. 'True' → logprob: -3.529752254486084
    3. '(True' → logprob: -14.529751777648926
    4. ' ' → logprob: -14.779751777648926
    5. '   ' → logprob: -14.904751777648926
    6. '=True' → logprob: -15.029751777648926
    7. ' False' → logprob: -15.904751777648926
    8. 'False' → logprob: -16.529752731323242
    9. '    ' → logprob: -17.654752731323242
    10. '1' → logprob: -18.279752731323242

Token 25: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 26: '   ' (ID: 271)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.7127945423126221
    2. 'for' → logprob: -1.212794542312622
    3. '   ' → logprob: -1.837794542312622
    4. ' ' → logprob: -3.212794542312622
    5. ' 
' → logprob: -5.712794303894043
    6. ':' → logprob: -5.962794303894043
    7. '<|end|>' → logprob: -5.962794303894043
    8. '    
' → logprob: -6.712794303894043
    9. '  ' → logprob: -7.212794303894043
    10. '   
' → logprob: -7.462794303894043

Token 27: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.00901561975479126
    2. ' for' → logprob: -4.7590155601501465
    3. '   ' → logprob: -7.8840155601501465
    4. ' ' → logprob: -11.009016036987305
    5. '  ' → logprob: -12.384016036987305
    6. '	for' → logprob: -13.009016036987305
    7. '    ' → logprob: -14.009016036987305
    8. '<|end|>' → logprob: -16.134016036987305
    9. '    
' → logprob: -16.634016036987305
    10. '       ' → logprob: -17.009016036987305

Token 28: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.12673594057559967
    2. ' ' → logprob: -2.5017359256744385
    3. ' char' → logprob: -3.7517359256744385
    4. 'c' → logprob: -4.751736164093018
    5. ' ch' → logprob: -5.626736164093018
    6. 'char' → logprob: -7.876736164093018
    7. 'ch' → logprob: -8.25173568725586
    8. '  ' → logprob: -8.62673568725586
    9. '    ' → logprob: -9.12673568725586
    10. ' )' → logprob: -9.25173568725586

Token 29: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0029878057539463043
    2. 'in' → logprob: -5.877987861633301
    3. ' ' → logprob: -9.3779878616333
    4. 's' → logprob: -9.5029878616333
    5. ' i' → logprob: -12.3779878616333
    6. '  ' → logprob: -12.6279878616333
    7. ' s' → logprob: -12.7529878616333
    8. '   ' → logprob: -13.0029878616333
    9. '<|end|>' → logprob: -13.1279878616333
    10. '    ' → logprob: -13.2529878616333

Token 30: ' s' (ID: 265)
  Prédit: ' s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.005238736979663372
    2. 's' → logprob: -5.2552385330200195
    3. ' ' → logprob: -12.38023853302002
    4. '  ' → logprob: -15.50523853302002
    5. '   ' → logprob: -15.88023853302002
    6. '	s' → logprob: -15.88023853302002
    7. ' ' → logprob: -16.255239486694336
    8. '    ' → logprob: -16.442739486694336
    9. '<s' → logprob: -16.817739486694336
    10. '_s' → logprob: -17.505239486694336

Token 31: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.000387535837944597
    2. ' :' → logprob: -8.125387191772461
    3. '):' → logprob: -9.750387191772461
    4. '<|end|>' → logprob: -11.375387191772461
    5. ':**' → logprob: -11.500387191772461
    6. ':
' → logprob: -12.625387191772461
    7. '<|end|>' → logprob: -13.625387191772461
    8. '>:' → logprob: -13.625387191772461
    9. '():' → logprob: -13.875387191772461
    10. ' in' → logprob: -14.375387191772461

Token 32: '       ' (ID: 309)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.09195996075868607
    2. '<|end|>' → logprob: -3.0919599533081055
    3. '    ' → logprob: -3.5919599533081055
    4. '       ' → logprob: -4.4669599533081055
    5. '   ' → logprob: -7.0919599533081055
    6. '        ' → logprob: -7.2169599533081055
    7. '<|end|>' → logprob: -7.8419599533081055
    8. '  ' → logprob: -7.9669599533081055
    9. ' if' → logprob: -8.091959953308105
    10. ' 
' → logprob: -8.966959953308105

Token 33: ' if' (ID: 538)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.007182280067354441
    2. '    ' → logprob: -6.0071821212768555
    3. ' if' → logprob: -6.5071821212768555
    4. '        ' → logprob: -7.0071821212768555
    5. '<|end|>' → logprob: -7.1321821212768555
    6. 'if' (adapté à ' if') → logprob: -7.2571821212768555
    7. '       ' → logprob: -8.132182121276855
    8. ' )' → logprob: -9.382182121276855
    9. '  ' → logprob: -9.507182121276855
    10. '   ' → logprob: -9.632182121276855

Token 34: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.009175807237625122
    2. 'c' → logprob: -4.884175777435303
    3. ' ' → logprob: -6.509175777435303
    4. ' (' → logprob: -10.134176254272461
    5. '(' → logprob: -10.759176254272461
    6. '(c' → logprob: -11.884176254272461
    7. '  ' → logprob: -12.759176254272461
    8. '    ' → logprob: -13.259176254272461
    9. '	c' → logprob: -13.259176254272461
    10. ')' → logprob: -13.821676254272461

Token 35: ' ==' (ID: 951)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.023284733295440674
    2. ' ==' → logprob: -3.898284673690796
    3. 'in' → logprob: -6.648284912109375
    4. '==' → logprob: -6.773284912109375
    5. ' ' → logprob: -8.523284912109375
    6. ' =='' → logprob: -10.898284912109375
    7. '[' → logprob: -11.148284912109375
    8. '=='' → logprob: -11.523284912109375
    9. '  ' → logprob: -11.648284912109375
    10. ' (' → logprob: -11.773284912109375

Token 36: ' '('' (ID: 87284)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.018093634396791458
    2. ' '' → logprob: -4.518093585968018
    3. ' '('' → logprob: -5.018093585968018
    4. '"' → logprob: -8.518094062805176
    5. '(' → logprob: -9.268094062805176
    6. ' ' → logprob: -9.643094062805176
    7. ' (' → logprob: -11.518094062805176
    8. '')' → logprob: -11.893094062805176
    9. ' '['' → logprob: -12.268094062805176
    10. ''a' → logprob: -12.643094062805176

Token 37: ' or' (ID: 503)
  Prédit: ' or'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.01248481497168541
    2. ':' → logprob: -5.262485027313232
    3. 'or' → logprob: -5.762485027313232
    4. ')' → logprob: -5.762485027313232
    5. ' ' → logprob: -7.762485027313232
    6. ' )' → logprob: -8.637484550476074
    7. '<|end|>' → logprob: -9.137484550476074
    8. '):' → logprob: -9.262484550476074
    9. ' :' → logprob: -9.387484550476074
    10. ' ):' → logprob: -10.762484550476074

Token 38: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.1803434193134308
    2. ' ' → logprob: -2.9303433895111084
    3. '[' → logprob: -3.1803433895111084
    4. 'c' → logprob: -3.9303433895111084
    5. ''' → logprob: -4.5553436279296875
    6. ' '['' → logprob: -4.5553436279296875
    7. ' '' → logprob: -4.6803436279296875
    8. 's' → logprob: -5.0553436279296875
    9. 'space' → logprob: -5.3053436279296875
    10. '<|end|>' → logprob: -5.8053436279296875

Token 39: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.05548378825187683
    2. '==' → logprob: -2.930483818054199
    3. '=='' → logprob: -7.680483818054199
    4. ' =='' → logprob: -9.1804838180542
    5. '=' → logprob: -11.5554838180542
    6. ' ' → logprob: -11.8054838180542
    7. '[' → logprob: -12.1804838180542
    8. ' =' → logprob: -12.8054838180542
    9. '=="' → logprob: -13.3054838180542
    10. '<|end|>' → logprob: -13.5554838180542

Token 40: ' '['' (ID: 114468)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.2541086971759796
    2. '')' → logprob: -2.1291086673736572
    3. ' '['' → logprob: -2.5041086673736572
    4. ' '' → logprob: -4.254108905792236
    5. '[' → logprob: -5.629108905792236
    6. ' ')'' → logprob: -5.754108905792236
    7. ' ')' → logprob: -6.629108905792236
    8. ')' → logprob: -7.379108905792236
    9. '['' → logprob: -7.629108905792236
    10. ' ' → logprob: -9.629108428955078

Token 41: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.012511532753705978
    2. ':
' → logprob: -4.762511730194092
    3. '):' → logprob: -5.762511730194092
    4. '       ' → logprob: -7.512511730194092
    5. '):
' → logprob: -9.387511253356934
    6. ' :' → logprob: -10.637511253356934
    7. '<|end|>' → logprob: -10.762511253356934
    8. ')' → logprob: -11.012511253356934
    9. '(stack' → logprob: -11.262511253356934
    10. '   ' → logprob: -11.387511253356934

Token 42: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0680278092622757
    2. '           ' → logprob: -3.1930277347564697
    3. 'stack' → logprob: -4.068027973175049
    4. '<|end|>' → logprob: -5.693027973175049
    5. ' stack' → logprob: -6.068027973175049
    6. '	stack' → logprob: -7.318027973175049
    7. '(stack' → logprob: -7.818027973175049
    8. '_stack' → logprob: -8.31802749633789
    9. '        ' → logprob: -8.94302749633789
    10. '   ' → logprob: -9.31802749633789

Token 43: ' stack' (ID: 10825)
  Prédit: ' stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.34873712062835693
    2. 'stack' (adapté à ' stack') → logprob: -1.223737120628357
    3. '           ' → logprob: -9.223736763000488
    4. '	stack' → logprob: -9.473736763000488
    5. '(stack' → logprob: -10.223736763000488
    6. '_stack' → logprob: -10.473736763000488
    7. '.stack' → logprob: -10.973736763000488
    8. '               ' → logprob: -11.098736763000488
    9. '       ' → logprob: -12.348736763000488
    10. 'Stack' → logprob: -12.848736763000488

Token 44: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.002483031013980508
    2. '.' → logprob: -6.002482891082764
    3. '.push' → logprob: -13.002483367919922
    4. '.app' → logprob: -13.252483367919922
    5. 'append' → logprob: -13.252483367919922
    6. ' .' → logprob: -14.752483367919922
    7. '.setdefault' → logprob: -14.752483367919922
    8. '.extend' → logprob: -15.502483367919922
    9. '.add' → logprob: -15.502483367919922
    10. '.Append' → logprob: -16.127483367919922

Token 45: '(c' (ID: 2410)
  Prédit: '(c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -0.014174672774970531
    2. '(' → logprob: -4.264174461364746
    3. '('' → logprob: -12.514174461364746
    4. ' (' → logprob: -12.639174461364746
    5. '((' → logprob: -13.389174461364746
    6. '(
' → logprob: -13.639174461364746
    7. '(

' → logprob: -15.014174461364746
    8. '(i' → logprob: -15.264174461364746
    9. 'c' → logprob: -16.014175415039062
    10. '("("' → logprob: -16.139175415039062

Token 46: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.01526837982237339
    2. ')
' → logprob: -4.890268325805664
    3. '       ' → logprob: -4.890268325805664
    4. '<|end|>' → logprob: -11.015268325805664
    5. ' )' → logprob: -11.140268325805664
    6. '
' → logprob: -11.140268325805664
    7. '   ' → logprob: -11.515268325805664
    8. 'elif' → logprob: -11.640268325805664
    9. ')
' → logprob: -11.640268325805664
    10. ' elif' → logprob: -12.640268325805664

Token 47: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.11231857538223267
    2. 'elif' → logprob: -2.862318515777588
    3. ' elif' → logprob: -3.862318515777588
    4. '<|end|>' → logprob: -4.362318515777588
    5. '
' → logprob: -4.737318515777588
    6. '        
' → logprob: -6.487318515777588
    7. '    
' → logprob: -6.862318515777588
    8. '   ' → logprob: -6.987318515777588
    9. '  
' → logprob: -7.237318515777588
    10. ')' → logprob: -7.612318515777588

Token 48: ' elif' (ID: 9497)
  Prédit: ' elif'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' elif' → logprob: -0.38944563269615173
    2. 'elif' (adapté à ' elif') → logprob: -1.1394456624984741
    3. '       ' → logprob: -6.264445781707764
    4. ' else' → logprob: -8.014445304870605
    5. '   ' → logprob: -9.014445304870605
    6. 'else' → logprob: -9.264445304870605
    7. '	elif' → logprob: -9.639445304870605
    8. ')' → logprob: -10.264445304870605
    9. ' ' → logprob: -12.014445304870605
    10. '    ' → logprob: -12.139445304870605

Token 49: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.03878108039498329
    2. 'c' → logprob: -3.28878116607666
    3. ' ' → logprob: -7.78878116607666
    4. ')' → logprob: -9.03878116607666
    5. ' (' → logprob: -9.16378116607666
    6. '(c' → logprob: -10.66378116607666
    7. '<|end|>' → logprob: -10.91378116607666
    8. ')c' → logprob: -11.41378116607666
    9. '(' → logprob: -11.53878116607666
    10. ''' → logprob: -11.91378116607666

Token 50: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.03477385640144348
    2. '==' → logprob: -3.659773826599121
    3. ' in' → logprob: -4.909773826599121
    4. ' ' → logprob: -7.409773826599121
    5. ')' → logprob: -7.909773826599121
    6. '=' → logprob: -10.659773826599121
    7. '    ' → logprob: -11.284773826599121
    8. ' )' → logprob: -11.409773826599121
    9. 'in' → logprob: -11.659773826599121
    10. 'elif' → logprob: -12.034773826599121

Token 51: ' ')' (ID: 35910)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.006613295525312424
    2. ''' → logprob: -5.631613254547119
    3. ' ')'' → logprob: -6.631613254547119
    4. '']' → logprob: -6.881613254547119
    5. ')' → logprob: -8.006613731384277
    6. ' ')' → logprob: -8.381613731384277
    7. ' '' → logprob: -10.256613731384277
    8. '")' → logprob: -10.881613731384277
    9. '')]' → logprob: -10.881613731384277
    10. ' ' → logprob: -12.131613731384277

Token 52: '':
' (ID: 7669)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.041643738746643066
    2. '):' → logprob: -3.4166436195373535
    3. ':
' → logprob: -5.6666436195373535
    4. ' :' → logprob: -6.1666436195373535
    5. ')' → logprob: -6.2916436195373535
    6. '':' → logprob: -9.291644096374512
    7. '   ' → logprob: -9.541644096374512
    8. '):
' → logprob: -9.541644096374512
    9. ' and' → logprob: -10.041644096374512
    10. '       ' → logprob: -10.291644096374512

Token 53: '           ' (ID: 352)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.3528071641921997
    2. ' ' → logprob: -1.3528071641921997
    3. 'if' → logprob: -3.97780704498291
    4. '<|end|>' → logprob: -4.97780704498291
    5. '        ' → logprob: -5.35280704498291
    6. '       ' → logprob: -5.60280704498291
    7. '           ' → logprob: -5.60280704498291
    8. ')' → logprob: -8.47780704498291
    9. '            ' → logprob: -8.72780704498291
    10. ' )' → logprob: -9.10280704498291

Token 54: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.25566959381103516
    2. ' if' → logprob: -1.5056695938110352
    3. '           ' → logprob: -5.630669593811035
    4. '       ' → logprob: -9.005669593811035
    5. '```' → logprob: -12.005669593811035
    6. '   ' → logprob: -12.255669593811035
    7. 'If' → logprob: -12.505669593811035
    8. '               ' → logprob: -12.755669593811035
    9. '	if' → logprob: -13.130669593811035
    10. ' ' → logprob: -13.755669593811035

Token 55: ' not' (ID: 625)
  Prédit: ' not'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.04449589550495148
    2. 'not' → logprob: -3.2944958209991455
    3. ' stack' → logprob: -5.544496059417725
    4. ' len' → logprob: -6.169496059417725
    5. 'len' → logprob: -8.544495582580566
    6. 'stack' → logprob: -8.669495582580566
    7. ' ' → logprob: -10.294495582580566
    8. '(stack' → logprob: -11.669495582580566
    9. ')' → logprob: -11.794495582580566
    10. '(not' → logprob: -12.294495582580566

Token 56: ' stack' (ID: 10825)
  Prédit: ' stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.043042123317718506
    2. 'stack' → logprob: -3.1680421829223633
    3. '(stack' → logprob: -10.293042182922363
    4. ' ' → logprob: -12.418042182922363
    5. '	stack' → logprob: -12.543042182922363
    6. '.stack' → logprob: -15.043042182922363
    7. '_stack' → logprob: -15.543042182922363
    8. ' (' → logprob: -15.543042182922363
    9. 'Stack' → logprob: -16.480541229248047
    10. ' len' → logprob: -16.480541229248047

Token 57: ' or' (ID: 503)
  Prédit: ' or'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.033716704696416855
    2. 'or' → logprob: -3.4087166786193848
    3. '	or' → logprob: -9.783717155456543
    4. ')' → logprob: -12.033717155456543
    5. '<|end|>' → logprob: -12.908717155456543
    6. ' ' → logprob: -13.783717155456543
    7. '          ' → logprob: -14.283717155456543
    8. '.pop' → logprob: -14.283717155456543
    9. ':' → logprob: -14.533717155456543
    10. '[]' → logprob: -14.658717155456543

Token 58: ' stack' (ID: 10825)
  Prédit: ' stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.5760246515274048
    2. 'stack' → logprob: -0.8260246515274048
    3. '(stack' → logprob: -10.326025009155273
    4. ' ' → logprob: -10.451025009155273
    5. '	stack' → logprob: -10.951025009155273
    6. '  ' → logprob: -12.576025009155273
    7. 'stackoverflow' → logprob: -14.201025009155273
    8. '   ' → logprob: -15.201025009155273
    9. '.stack' → logprob: -15.701025009155273
    10. ' ' → logprob: -15.701025009155273

Token 59: '.pop' (ID: 15746)
  Prédit: '[-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[-' → logprob: -0.3885577321052551
    2. '.pop' → logprob: -1.1385576725006104
    3. 'pop' → logprob: -6.3885579109191895
    4. ' pop' → logprob: -13.138557434082031
    5. '```' → logprob: -13.388557434082031
    6. '.' → logprob: -14.888557434082031
    7. 'Pop' → logprob: -15.263557434082031
    8. '.append' → logprob: -15.888557434082031
    9. '_pop' → logprob: -16.38855743408203
    10. '-pop' → logprob: -17.01355743408203

Token 60: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.003202073508873582
    2. '(' → logprob: -6.003201961517334
    3. '()!=' → logprob: -7.253201961517334
    4. '()='' → logprob: -12.253202438354492
    5. '()==' → logprob: -12.378202438354492
    6. '('' → logprob: -12.503202438354492
    7. ' ()' → logprob: -13.628202438354492
    8. '()<' → logprob: -13.753202438354492
    9. ''' → logprob: -13.753202438354492
    10. ')' → logprob: -14.503202438354492

Token 61: ' !=' (ID: 1666)
  Prédit: ' !='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' !=' → logprob: -0.5775408148765564
    2. '!=' → logprob: -0.8275408148765564
    3. '()!=' → logprob: -6.827540874481201
    4. '(' → logprob: -8.327540397644043
    5. '!='' → logprob: -9.202540397644043
    6. '!=(' → logprob: -9.952540397644043
    7. ' ' → logprob: -10.077540397644043
    8. ' not' → logprob: -10.577540397644043
    9. ''' → logprob: -11.077540397644043
    10. '!==' → logprob: -11.577540397644043

Token 62: ' '('' (ID: 87284)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.03457637131214142
    2. ' '('' → logprob: -3.784576416015625
    3. '(' → logprob: -4.659576416015625
    4. ''(' → logprob: -6.409576416015625
    5. '('' → logprob: -9.284576416015625
    6. '"' → logprob: -10.034576416015625
    7. ' (' → logprob: -12.659576416015625
    8. '("("' → logprob: -12.659576416015625
    9. ' '' → logprob: -12.909576416015625
    10. ''>' → logprob: -13.284576416015625

Token 63: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.07902319729328156
    2. ':
' → logprob: -2.5790231227874756
    3. '):
' → logprob: -9.954023361206055
    4. '):' → logprob: -10.079023361206055
    5. ')' → logprob: -10.454023361206055
    6. '       ' → logprob: -12.204023361206055
    7. ':

' → logprob: -12.329023361206055
    8. '           ' → logprob: -12.829023361206055
    9. ':
' → logprob: -13.829023361206055
    10. '   ' → logprob: -14.329023361206055

Token 64: '               ' (ID: 506)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.31774917244911194
    2. '               ' → logprob: -1.3177491426467896
    3. 'balanced' → logprob: -5.8177490234375
    4. ' balanced' → logprob: -6.5677490234375
    5. '```' → logprob: -10.9427490234375
    6. '              ' → logprob: -11.1927490234375
    7. '             ' → logprob: -11.4427490234375
    8. '       ' → logprob: -11.4427490234375
    9. '            
' → logprob: -11.5677490234375
    10. '            ' → logprob: -11.9427490234375

Token 65: ' balanced' (ID: 32879)
  Prédit: ' balanced'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' balanced' → logprob: -0.2542329728603363
    2. 'balanced' (adapté à ' balanced') → logprob: -1.5042330026626587
    3. '               ' → logprob: -6.254232883453369
    4. '           ' → logprob: -8.379233360290527
    5. '                   ' → logprob: -9.504233360290527
    6. '   ' → logprob: -10.129233360290527
    7. '                ' → logprob: -11.754233360290527
    8. '_bal' → logprob: -12.254233360290527
    9. ' ' → logprob: -12.629233360290527
    10. '            ' → logprob: -12.879233360290527

Token 66: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.12694133818149567
    2. '=' → logprob: -2.126941442489624
    3. '=False' → logprob: -11.376941680908203
    4. ' ' → logprob: -13.501941680908203
    5. '=True' → logprob: -15.376941680908203
    6. '<|end|>' → logprob: -16.626941680908203
    7. 's' → logprob: -16.751941680908203
    8. '=false' → logprob: -17.251941680908203
    9. ')' → logprob: -17.376941680908203
    10. ' ' → logprob: -17.501941680908203

Token 67: ' False' (ID: 7983)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'False' → logprob: -0.3868716359138489
    2. ' False' → logprob: -1.136871576309204
    3. '=False' → logprob: -15.136871337890625
    4. '(False' → logprob: -16.011871337890625
    5. 'F' → logprob: -16.386871337890625
    6. '_false' → logprob: -17.511871337890625
    7. '.False' → logprob: -18.136871337890625
    8. ' F' → logprob: -18.261871337890625
    9. ' false' → logprob: -18.511871337890625
    10. ' ' → logprob: -18.636871337890625

Token 68: '
' (ID: 198)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.001173321157693863
    2. '<|end|>' → logprob: -7.001173496246338
    3. '           ' → logprob: -9.00117301940918
    4. '       ' → logprob: -10.00117301940918
    5. '              ' → logprob: -10.75117301940918
    6. '                   ' → logprob: -10.87617301940918
    7. '                
' → logprob: -11.00117301940918
    8. '                ' → logprob: -11.12617301940918
    9. ')' → logprob: -12.37617301940918
    10. '<|end|>' → logprob: -12.75117301940918

Token 69: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -6.229872087715194e-05
    2. '       ' → logprob: -10.500061988830566
    3. '           ' → logprob: -10.625061988830566
    4. '                
' → logprob: -12.750061988830566
    5. '              ' → logprob: -13.125061988830566
    6. '                   ' → logprob: -13.750061988830566
    7. '```' → logprob: -14.250061988830566
    8. '   ' → logprob: -14.375061988830566
    9. '			' → logprob: -14.500061988830566
    10. '                ' → logprob: -14.625061988830566

Token 70: ' break' (ID: 2338)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.377105176448822
    2. 'break' (adapté à ' break') → logprob: -1.8771052360534668
    3. ' break' → logprob: -1.8771052360534668
    4. '       ' → logprob: -5.002105236053467
    5. '           ' → logprob: -6.877105236053467
    6. '	break' → logprob: -9.377104759216309
    7. '   ' → logprob: -9.502104759216309
    8. ' ' → logprob: -9.627104759216309
    9. '```' → logprob: -9.752104759216309
    10. '                   ' → logprob: -11.252104759216309

Token 71: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0015395039226859808
    2. ')' → logprob: -6.876539707183838
    3. '   ' → logprob: -9.00153923034668
    4. ' elif' → logprob: -9.00153923034668
    5. 'elif' → logprob: -9.50153923034668
    6. ' else' → logprob: -10.25153923034668
    7. '```' → logprob: -10.37653923034668
    8. ' )' → logprob: -10.62653923034668
    9. ']' → logprob: -10.75153923034668
    10. '           ' → logprob: -11.12653923034668

Token 72: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0008249913225881755
    2. ')' → logprob: -8.125824928283691
    3. ' elif' → logprob: -8.500824928283691
    4. 'elif' → logprob: -9.125824928283691
    5. ' else' → logprob: -9.625824928283691
    6. ' )' → logprob: -10.375824928283691
    7. '   ' → logprob: -10.750824928283691
    8. ']' → logprob: -10.875824928283691
    9. ' ]' → logprob: -11.125824928283691
    10. '[' → logprob: -11.250824928283691

Token 73: ' elif' (ID: 9497)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.14396598935127258
    2. 'elif' (adapté à ' elif') → logprob: -2.26896595954895
    3. '       ' → logprob: -3.89396595954895
    4. ' elif' → logprob: -5.143966197967529
    5. '']' → logprob: -6.018966197967529
    6. 'else' → logprob: -7.143966197967529
    7. '           ' → logprob: -8.143965721130371
    8. ' else' → logprob: -8.143965721130371
    9. ' ]' → logprob: -8.268965721130371
    10. '               ' → logprob: -8.893965721130371

Token 74: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.012615831568837166
    2. 'c' → logprob: -4.38761568069458
    3. ' ' → logprob: -9.387616157531738
    4. ' ' → logprob: -12.262616157531738
    5. 's' → logprob: -12.637616157531738
    6. '  ' → logprob: -12.762616157531738
    7. '	c' → logprob: -12.887616157531738
    8. ']' → logprob: -13.012616157531738
    9. ')' → logprob: -13.762616157531738
    10. ''' → logprob: -13.762616157531738

Token 75: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.01821444369852543
    2. '==' → logprob: -4.018214225769043
    3. ' ' → logprob: -10.768214225769043
    4. '=='' → logprob: -10.768214225769043
    5. ' =='' → logprob: -12.268214225769043
    6. '=' → logprob: -12.768214225769043
    7. ']' → logprob: -12.893214225769043
    8. ']==' → logprob: -13.143214225769043
    9. ' =' → logprob: -13.268214225769043
    10. ''' → logprob: -13.518214225769043

Token 76: ' ']' (ID: 98922)
  Prédit: '']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '']' → logprob: -0.0026828988920897245
    2. ' '' → logprob: -6.252682685852051
    3. ' ']' → logprob: -7.752682685852051
    4. ''' → logprob: -8.37768268585205
    5. ']' → logprob: -9.62768268585205
    6. '"]' → logprob: -11.62768268585205
    7. '']]' → logprob: -11.87768268585205
    8. ' ' → logprob: -13.00268268585205
    9. '	' → logprob: -13.25268268585205
    10. '   ' → logprob: -13.37768268585205

Token 77: '':
' (ID: 7669)
  Prédit: ':
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':
' → logprob: -0.2955305576324463
    2. ':' → logprob: -1.7955305576324463
    3. '           ' → logprob: -2.4205305576324463
    4. '       ' → logprob: -8.045530319213867
    5. 'if' → logprob: -8.545530319213867
    6. '):
' → logprob: -8.795530319213867
    7. '               ' → logprob: -9.045530319213867
    8. '   ' → logprob: -10.045530319213867
    9. '          ' → logprob: -10.295530319213867
    10. '):' → logprob: -10.545530319213867

Token 78: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.3042077422142029
    2. ' if' → logprob: -1.4292078018188477
    3. 'if' → logprob: -3.8042078018188477
    4. '       ' → logprob: -8.554207801818848
    5. '               ' → logprob: -8.554207801818848
    6. '          ' → logprob: -10.054207801818848
    7. '   ' → logprob: -10.179207801818848
    8. ' ' → logprob: -11.304207801818848
    9. '        ' → logprob: -11.554207801818848
    10. '         ' → logprob: -12.054207801818848

Token 79: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.2206612527370453
    2. 'if' (adapté à ' if') → logprob: -1.7206612825393677
    3. '           ' → logprob: -3.970661163330078
    4. '               ' → logprob: -8.720661163330078
    5. '       ' → logprob: -10.720661163330078
    6. '   ' → logprob: -12.220661163330078
    7. 'If' → logprob: -12.720661163330078
    8. '            ' → logprob: -12.970661163330078
    9. '          ' → logprob: -13.345661163330078
    10. '```' → logprob: -13.470661163330078

Token 80: ' not' (ID: 625)
  Prédit: ' not'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.0013277375837787986
    2. 'not' → logprob: -6.6263275146484375
    3. ' ' → logprob: -13.876327514648438
    4. '<|end|>' → logprob: -15.251327514648438
    5. '	not' → logprob: -15.751327514648438
    6. '(not' → logprob: -16.126327514648438
    7. '_not' → logprob: -16.251327514648438
    8. ' ' → logprob: -16.626327514648438
    9. '    ' → logprob: -16.876327514648438
    10. '   ' → logprob: -17.626327514648438

Token 81: ' stack' (ID: 10825)
  Prédit: ' stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.07890553772449493
    2. 'stack' → logprob: -2.5789055824279785
    3. '(stack' → logprob: -11.32890510559082
    4. '	stack' → logprob: -13.07890510559082
    5. '.stack' → logprob: -14.57890510559082
    6. 'stackoverflow' → logprob: -14.95390510559082
    7. '_stack' → logprob: -15.07890510559082
    8. ' ' → logprob: -15.45390510559082
    9. 'Stack' → logprob: -15.82890510559082
    10. 's' → logprob: -16.07890510559082

Token 82: ' or' (ID: 503)
  Prédit: ' or'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.00014048899174667895
    2. 'or' → logprob: -8.875140190124512
    3. '<|end|>' → logprob: -14.875140190124512
    4. '	or' → logprob: -16.250141143798828
    5. ' ' → logprob: -17.000141143798828
    6. ')' → logprob: -17.250141143798828
    7. '           ' → logprob: -17.625141143798828
    8. ' или' → logprob: -18.375141143798828
    9. '<|end|>' → logprob: -18.500141143798828
    10. '[]' → logprob: -18.625141143798828

Token 83: ' stack' (ID: 10825)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.003184959525242448
    2. ' stack' → logprob: -5.753184795379639
    3. '(stack' → logprob: -12.878185272216797
    4. '	stack' → logprob: -13.128185272216797
    5. 'stackoverflow' → logprob: -13.378185272216797
    6. '.stack' → logprob: -15.003185272216797
    7. '<|end|>' → logprob: -15.378185272216797
    8. '   ' → logprob: -16.128185272216797
    9. 'stock' → logprob: -16.503185272216797
    10. '_stack' → logprob: -16.628185272216797

Token 84: '.pop' (ID: 15746)
  Prédit: '.pop'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.pop' → logprob: -3.011373155459296e-05
    2. 'pop' → logprob: -10.625030517578125
    3. '.' → logprob: -12.500030517578125
    4. ' .' → logprob: -13.375030517578125
    5. '[-' → logprob: -15.500030517578125
    6. ' pop' → logprob: -16.500030517578125
    7. '	pop' → logprob: -16.625030517578125
    8. '_pop' → logprob: -17.250030517578125
    9. '.p' → logprob: -17.500030517578125
    10. '.Pop' → logprob: -17.625030517578125

Token 85: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0008345239912159741
    2. '()!=' → logprob: -7.6258344650268555
    3. '(' → logprob: -8.000834465026855
    4. ' ()' → logprob: -11.625834465026855
    5. ')' → logprob: -14.375834465026855
    6. ' !=' → logprob: -14.625834465026855
    7. ' (' → logprob: -15.625834465026855
    8. '()='' → logprob: -15.875834465026855
    9. ']' → logprob: -16.375835418701172
    10. ' ' → logprob: -16.500835418701172

Token 86: ' !=' (ID: 1666)
  Prédit: ' !='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' !=' → logprob: -0.5766909122467041
    2. '!=' → logprob: -0.8266909122467041
    3. ''' → logprob: -7.451690673828125
    4. '()!=' → logprob: -9.201690673828125
    5. '!='' → logprob: -10.326690673828125
    6. ']!=' → logprob: -11.451690673828125
    7. ')!=' → logprob: -11.951690673828125
    8. '(' → logprob: -12.076690673828125
    9. '!=(' → logprob: -12.701690673828125
    10. ' ' → logprob: -12.951690673828125

Token 87: ' '['' (ID: 114468)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.011195658706128597
    2. ' '['' → logprob: -4.886195659637451
    3. ''[' → logprob: -5.761195659637451
    4. '[' → logprob: -7.761195659637451
    5. '['' → logprob: -11.886195182800293
    6. ''>' → logprob: -14.011195182800293
    7. ' ' → logprob: -14.636195182800293
    8. '[
' → logprob: -15.136195182800293
    9. '"[' → logprob: -15.261195182800293
    10. '"' → logprob: -15.511195182800293

Token 88: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.31336402893066406
    2. ':
' → logprob: -1.313364028930664
    3. '):
' → logprob: -9.938364028930664
    4. ':

' → logprob: -10.688364028930664
    5. '):' → logprob: -11.438364028930664
    6. ':
' → logprob: -11.563364028930664
    7. ')' → logprob: -12.438364028930664
    8. '():
' → logprob: -13.813364028930664
    9. ' :
' → logprob: -13.813364028930664
    10. '           ' → logprob: -14.313364028930664

Token 89: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.001177012687548995
    2. 'balanced' → logprob: -7.751176834106445
    3. ' balanced' → logprob: -8.001176834106445
    4. '           ' → logprob: -8.126176834106445
    5. '                   ' → logprob: -9.626176834106445
    6. '```' → logprob: -11.376176834106445
    7. '   ' → logprob: -11.626176834106445
    8. '_bal' → logprob: -11.626176834106445
    9. '              ' → logprob: -12.626176834106445
    10. ':
' → logprob: -12.751176834106445

Token 90: ' balanced' (ID: 32879)
  Prédit: 'balanced'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'balanced' (adapté à ' balanced') → logprob: -0.07890047132968903
    2. ' balanced' → logprob: -2.5789005756378174
    3. 'bal' → logprob: -12.203900337219238
    4. '               ' → logprob: -12.703900337219238
    5. 'Balanced' → logprob: -13.703900337219238
    6. '_bal' → logprob: -15.203900337219238
    7. 'False' → logprob: -15.328900337219238
    8. '           ' → logprob: -15.578900337219238
    9. 'balance' → logprob: -15.578900337219238
    10. '-balanced' → logprob: -15.953900337219238

Token 91: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.632710337638855
    2. '=' → logprob: -0.757710337638855
    3. '=False' → logprob: -9.507710456848145
    4. ' ' → logprob: -11.007710456848145
    5. '=True' → logprob: -11.507710456848145
    6. 'False' → logprob: -13.007710456848145
    7. '<|end|>' → logprob: -13.257710456848145
    8. '_' → logprob: -13.882710456848145
    9. ' is' → logprob: -14.007710456848145
    10. 's' → logprob: -14.007710456848145

Token 92: ' False' (ID: 7983)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'False' → logprob: -0.0019286326132714748
    2. ' False' → logprob: -6.251928806304932
    3. '(False' → logprob: -17.376928329467773
    4. 'F' → logprob: -18.376928329467773
    5. '=False' → logprob: -18.501928329467773
    6. '.False' → logprob: -18.876928329467773
    7. '_false' → logprob: -20.001928329467773
    8. 'True' → logprob: -21.626928329467773
    9. 'Falsy' → logprob: -21.626928329467773
    10. '_FALSE' → logprob: -22.126928329467773

Token 93: '
' (ID: 198)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.0017313449643552303
    2. '<|end|>' → logprob: -6.6267313957214355
    3. '                
' → logprob: -9.001730918884277
    4. '			' → logprob: -9.376730918884277
    5. '           ' → logprob: -9.876730918884277
    6. '
' → logprob: -10.001730918884277
    7. '```' → logprob: -11.126730918884277
    8. '		       ' → logprob: -11.251730918884277
    9. '<|end|>' → logprob: -11.501730918884277
    10. '       ' → logprob: -11.501730918884277

Token 94: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.00033522743615321815
    2. '           ' → logprob: -9.375335693359375
    3. '			' → logprob: -9.750335693359375
    4. '                ' → logprob: -10.125335693359375
    5. '                   ' → logprob: -10.125335693359375
    6. '
' → logprob: -10.250335693359375
    7. '                
' → logprob: -10.625335693359375
    8. '              ' → logprob: -11.000335693359375
    9. '       ' → logprob: -12.000335693359375
    10. '<|end|>' → logprob: -12.125335693359375

Token 95: ' break' (ID: 2338)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'break' (adapté à ' break') → logprob: -0.011382726021111012
    2. ' break' → logprob: -4.511382579803467
    3. '               ' → logprob: -8.011383056640625
    4. '                   ' → logprob: -13.761383056640625
    5. '	break' → logprob: -13.886383056640625
    6. '           ' → logprob: -14.511383056640625
    7. 'Break' → logprob: -15.511383056640625
    8. '```' → logprob: -15.511383056640625
    9. '
' → logprob: -16.386383056640625
    10. '   ' → logprob: -16.511383056640625

Token 96: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.011542764492332935
    2. '
' → logprob: -5.136542797088623
    3. '    
' → logprob: -5.261542797088623
    4. '  
' → logprob: -9.011542320251465
    5. '   
' → logprob: -9.386542320251465
    6. '        
' → logprob: -10.011542320251465
    7. '```' → logprob: -10.011542320251465
    8. ' 
' → logprob: -10.511542320251465
    9. '            
' → logprob: -10.886542320251465
    10. ' if' → logprob: -11.136542320251465

Token 97: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0007579309749417007
    2. '```' → logprob: -7.875757694244385
    3. '    
' → logprob: -8.375758171081543
    4. '
' → logprob: -9.875758171081543
    5. ' if' → logprob: -10.125758171081543
    6. '  
' → logprob: -11.250758171081543
    7. '``' → logprob: -11.500758171081543
    8. 'if' → logprob: -11.875758171081543
    9. '        
' → logprob: -12.000758171081543
    10. '       ' → logprob: -12.125758171081543

Token 98: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.38555046916007996
    2. 'if' (adapté à ' if') → logprob: -1.8855504989624023
    3. ' if' → logprob: -1.8855504989624023
    4. '
' → logprob: -4.510550498962402
    5. '    
' → logprob: -5.760550498962402
    6. ' 
' → logprob: -7.385550498962402
    7. ' ' → logprob: -7.385550498962402
    8. '  
' → logprob: -7.635550498962402
    9. '   
' → logprob: -8.010550498962402
    10. '  ' → logprob: -9.385550498962402

Token 99: ' balanced' (ID: 32879)
  Prédit: ' balanced'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' balanced' → logprob: -0.00318912067450583
    2. ' not' → logprob: -6.2531890869140625
    3. 'balanced' → logprob: -6.7531890869140625
    4. ' stack' → logprob: -9.378189086914062
    5. ' len' → logprob: -13.003189086914062
    6. 'not' → logprob: -13.128189086914062
    7. ' ' → logprob: -13.378189086914062
    8. 'stack' → logprob: -14.253189086914062
    9. ' balance' → logprob: -14.253189086914062
    10. ' bal' → logprob: -14.628189086914062

Token 100: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.007943740114569664
    2. 'and' → logprob: -4.882943630218506
    3. ':' → logprob: -8.132944107055664
    4. ' ' → logprob: -10.132944107055664
    5. '   ' → logprob: -13.757944107055664
    6. '	and' → logprob: -14.132944107055664
    7. '    ' → logprob: -14.507944107055664
    8. ' ' → logprob: -14.757944107055664
    9. ':
' → logprob: -15.132944107055664
    10. '  ' → logprob: -15.257944107055664

Token 101: ' not' (ID: 625)
  Prédit: ' not'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.0017114708898589015
    2. 'not' → logprob: -6.376711368560791
    3. ' len' → logprob: -12.25171184539795
    4. ' stack' → logprob: -12.37671184539795
    5. ' ' → logprob: -15.87671184539795
    6. 'len' → logprob: -16.126710891723633
    7. ' no' → logprob: -16.376710891723633
    8. 'stack' → logprob: -16.376710891723633
    9. '!' → logprob: -17.376710891723633
    10. ' !' → logprob: -18.501710891723633

Token 102: ' stack' (ID: 10825)
  Prédit: ' stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.006719282828271389
    2. 'stack' → logprob: -5.00671911239624
    3. '	stack' → logprob: -13.131719589233398
    4. '(stack' → logprob: -13.381719589233398
    5. ' ' → logprob: -15.256719589233398
    6. '.stack' → logprob: -16.6317195892334
    7. '_stack' → logprob: -17.1317195892334
    8. '<|end|>' → logprob: -19.1317195892334
    9. 'Stack' → logprob: -19.2567195892334
    10. 's' → logprob: -19.5067195892334

Token 103: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.002545101335272193
    2. '.' → logprob: -6.62754487991333
    3. ':
' → logprob: -7.00254487991333
    4. '.append' → logprob: -9.127545356750488
    5. '.empty' → logprob: -10.127545356750488
    6. '):' → logprob: -10.127545356750488
    7. '():' → logprob: -10.752545356750488
    8. '[:]' → logprob: -10.752545356750488
    9. '.:' → logprob: -11.127545356750488
    10. '.pop' → logprob: -11.627545356750488

Token 104: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0009595814626663923
    2. ' print' → logprob: -7.000959396362305
    3. 'print' → logprob: -10.500959396362305
    4. '   ' → logprob: -11.875959396362305
    5. ':' → logprob: -12.375959396362305
    6. '        
' → logprob: -13.125959396362305
    7. ':
' → logprob: -13.250959396362305
    8. '
' → logprob: -13.375959396362305
    9. '           ' → logprob: -14.125959396362305
    10. ' ' → logprob: -14.750959396362305

Token 105: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.6712465286254883
    2. '       ' → logprob: -0.7962465286254883
    3. 'print' (adapté à ' print') → logprob: -3.4212465286254883
    4. '   ' → logprob: -5.296246528625488
    5. '    ' → logprob: -9.046246528625488
    6. '	print' → logprob: -10.546246528625488
    7. '           ' → logprob: -11.046246528625488
    8. '```' → logprob: -11.171246528625488
    9. ' 
' → logprob: -11.296246528625488
    10. '        ' → logprob: -11.921246528625488

Token 106: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.19221852719783783
    2. '('' → logprob: -1.942218542098999
    3. '(' → logprob: -3.567218542098999
    4. '("("' → logprob: -5.81721830368042
    5. '("(' → logprob: -8.317218780517578
    6. '('(' → logprob: -10.692218780517578
    7. '()' → logprob: -12.692218780517578
    8. '"' → logprob: -12.692218780517578
    9. '("")' → logprob: -13.692218780517578
    10. ' ("' → logprob: -13.817218780517578

Token 107: 'yes' (ID: 6763)
  Prédit: 'yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'yes' → logprob: -0.012324214912950993
    2. 'balanced' → logprob: -5.387324333190918
    3. 'Yes' → logprob: -5.637324333190918
    4. 'YES' → logprob: -6.387324333190918
    5. 'Balanced' → logprob: -6.637324333190918
    6. '"' → logprob: -7.637324333190918
    7. ' yes' → logprob: -7.887324333190918
    8. ' balanced' → logprob: -9.012324333190918
    9. 'True' → logprob: -10.262324333190918
    10. ''' → logprob: -10.387324333190918

Token 108: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.1271715760231018
    2. '")
' → logprob: -2.127171516418457
    3. '")
' → logprob: -8.502171516418457
    4. ')' → logprob: -10.377171516418457
    5. ')
' → logprob: -12.377171516418457
    6. ')")' → logprob: -12.752171516418457
    7. '"' → logprob: -13.627171516418457
    8. ')")
' → logprob: -14.627171516418457
    9. '")

' → logprob: -15.002171516418457
    10. ' ")' → logprob: -15.877171516418457

Token 109: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03064524382352829
    2. 'else' → logprob: -3.5306451320648193
    3. ' else' → logprob: -7.030645370483398
    4. '	else' → logprob: -11.530645370483398
    5. '```' → logprob: -15.780645370483398
    6. ' ' → logprob: -17.2806453704834
    7. '   ' → logprob: -17.2806453704834
    8. '  ' → logprob: -17.4056453704834
    9. '_else' → logprob: -17.5306453704834
    10. 'elif' → logprob: -17.6556453704834

Token 110: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.2700496017932892
    2. '   ' → logprob: -1.5200495719909668
    3. ' else' → logprob: -4.020049571990967
    4. '	else' → logprob: -12.270050048828125
    5. ' ' → logprob: -14.645050048828125
    6. '  ' → logprob: -16.270050048828125
    7. 'elif' → logprob: -18.395050048828125
    8. '```' → logprob: -18.645050048828125
    9. '       ' → logprob: -18.770050048828125
    10. '    ' → logprob: -18.770050048828125

Token 111: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0019441033946350217
    2. '       ' → logprob: -6.626944065093994
    3. ':
' → logprob: -7.751944065093994
    4. '   ' → logprob: -9.126944541931152
    5. ' :' → logprob: -10.001944541931152
    6. '):' → logprob: -11.126944541931152
    7. '():' → logprob: -12.126944541931152
    8. '    ' → logprob: -12.376944541931152
    9. ' :
' → logprob: -13.376944541931152
    10. ')' → logprob: -13.626944541931152

Token 112: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.12455187737941742
    2. '   ' → logprob: -2.749551773071289
    3. ' print' → logprob: -3.499551773071289
    4. '    ' → logprob: -3.874551773071289
    5. '"' → logprob: -7.249551773071289
    6. 'print' → logprob: -7.624551773071289
    7. '     ' → logprob: -7.999551773071289
    8. ' ' → logprob: -8.749551773071289
    9. '```' → logprob: -9.249551773071289
    10. '           ' → logprob: -9.999551773071289

Token 113: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.3869980573654175
    2. 'print' (adapté à ' print') → logprob: -1.1369980573654175
    3. '   ' → logprob: -9.511998176574707
    4. '       ' → logprob: -10.136998176574707
    5. '    ' → logprob: -11.386998176574707
    6. '	print' → logprob: -13.886998176574707
    7. '"' → logprob: -14.386998176574707
    8. '        ' → logprob: -15.761998176574707
    9. '```' → logprob: -15.761998176574707
    10. ' ' → logprob: -15.886998176574707

Token 114: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.06201103702187538
    2. '(' → logprob: -2.8120110034942627
    3. '("("' → logprob: -10.187010765075684
    4. '("")' → logprob: -12.937010765075684
    5. '('' → logprob: -13.187010765075684
    6. '(
' → logprob: -14.812010765075684
    7. '()' → logprob: -15.062010765075684
    8. '(""' → logprob: -15.187010765075684
    9. '("(' → logprob: -15.187010765075684
    10. '("""' → logprob: -16.93701171875

Token 115: 'no' (ID: 1750)
  Prédit: 'no'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'no' → logprob: -2.339278580620885e-06
    2. ' no' → logprob: -13.250001907348633
    3. '"' → logprob: -14.750001907348633
    4. '	no' → logprob: -17.250001907348633
    5. 'No' → logprob: -18.625001907348633
    6. '(no' → logprob: -19.125001907348633
    7. '"No' → logprob: -20.750001907348633
    8. ':no' → logprob: -20.875001907348633
    9. '")' → logprob: -21.375001907348633
    10. '   ' → logprob: -21.750001907348633

Token 116: '")' (ID: 1405)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.004092292860150337
    2. '")' → logprob: -5.504092216491699
    3. ')
' → logprob: -12.2540922164917
    4. ')")' → logprob: -12.6290922164917
    5. '')' → logprob: -13.0040922164917
    6. ' )' → logprob: -13.1290922164917
    7. '`)' → logprob: -13.5040922164917
    8. '```' → logprob: -15.8790922164917
    9. '")
' → logprob: -17.754093170166016
    10. '))' → logprob: -17.754093170166016


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 114
Tokens correctement prédits (1ère position, stricte): 61
Tokens correctement prédits (1ère position, avec adaptation): 66
Tokens correctement prédits (top 10): 103
Précision stricte (1ère position): 53.51%
Précision adaptée (1ère position): 57.89%
Précision (top 10): 90.35%
================================================================================
