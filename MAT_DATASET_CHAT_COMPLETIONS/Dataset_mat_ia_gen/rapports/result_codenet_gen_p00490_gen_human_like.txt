================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:08:09
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N = int(input())
A, B = map(int, input().split())
C = int(input())
toppings = [int(input()) for _ in range(N)]

max_cal_per_dollar = C // A  # cas sans garniture

toppings.sort(reverse=True)

total_cal = C
for i in range(N):
    total_cal += toppings[i]
    price = A + B * (i + 1)
    cal_per_dollar = total_cal // price
    if cal_per_dollar > max_cal_per_dollar:
        max_cal_per_dollar = cal_per_dollar

print(max_cal_per_dollar)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0003063838230445981
    2. '('' → logprob: -8.500306129455566
    3. '(N' → logprob: -10.000306129455566
    4. '(
' → logprob: -10.750306129455566
    5. '(input' → logprob: -11.250306129455566
    6. ''' → logprob: -12.125306129455566
    7. '("("' → logprob: -12.375306129455566
    8. '```' → logprob: -12.375306129455566
    9. '`' → logprob: -12.750306129455566
    10. '(`' → logprob: -13.000306129455566

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2372170090675354
    2. ')' → logprob: -1.7372169494628906
    3. '()' → logprob: -3.4872169494628906
    4. '())' → logprob: -5.737216949462891
    5. '```' → logprob: -7.987216949462891
    6. '(
' → logprob: -8.23721694946289
    7. '`' → logprob: -9.61221694946289
    8. '(()' → logprob: -9.61221694946289
    9. '("("' → logprob: -9.61221694946289
    10. '")' → logprob: -9.73721694946289

Token 5: 'A' (ID: 32)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.31470787525177
    2. 'if' → logprob: -2.1897077560424805
    3. 'i' → logprob: -3.3147077560424805
    4. 'a' → logprob: -3.6897077560424805
    5. 's' → logprob: -3.9397077560424805
    6. 'x' → logprob: -4.3147077560424805
    7. '*' → logprob: -4.8147077560424805
    8. 'f' → logprob: -4.9397077560424805
    9. '`' → logprob: -4.9397077560424805
    10. ')' → logprob: -4.9397077560424805

Token 6: ',' (ID: 11)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0007823493797332048
    2. '[]' → logprob: -8.500782012939453
    3. '\[' → logprob: -9.125782012939453
    4. '.' → logprob: -9.250782012939453
    5. '[A' → logprob: -9.375782012939453
    6. '[i' → logprob: -9.500782012939453
    7. '[:]' → logprob: -9.750782012939453
    8. '+' → logprob: -10.250782012939453
    9. '=' → logprob: -10.750782012939453
    10. '[a' → logprob: -11.500782012939453

Token 7: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.36144351959228516
    2. ' B' → logprob: -1.7364435195922852
    3. ' =' → logprob: -3.236443519592285
    4. ' ' → logprob: -3.361443519592285
    5. '_' → logprob: -4.236443519592285
    6. '=' → logprob: -4.361443519592285
    7. 'map' → logprob: -4.986443519592285
    8. '[' → logprob: -4.986443519592285
    9. 'list' → logprob: -5.236443519592285
    10. 'input' → logprob: -5.986443519592285

Token 8: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5830649733543396
    2. '=' → logprob: -0.8330649733543396
    3. ',' → logprob: -4.958065032958984
    4. ' ,' → logprob: -10.333065032958984
    5. ' ' → logprob: -11.083065032958984
    6. '[' → logprob: -11.333065032958984
    7. '=input' → logprob: -12.708065032958984
    8. ')' → logprob: -12.708065032958984
    9. '.' → logprob: -13.833065032958984
    10. '_' → logprob: -13.958065032958984

Token 9: ' map' (ID: 4014)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.5789433717727661
    2. ' map' → logprob: -0.8289433717727661
    3. 'input' → logprob: -6.078943252563477
    4. ' input' → logprob: -8.203943252563477
    5. 'list' → logprob: -8.578943252563477
    6. ' ' → logprob: -9.703943252563477
    7. ' list' → logprob: -10.078943252563477
    8. '0' → logprob: -10.078943252563477
    9. '[' → logprob: -10.453943252563477
    10. '(map' → logprob: -10.578943252563477

Token 10: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5715097188949585
    2. '(int' → logprob: -0.9465097188949585
    3. '(str' → logprob: -3.696509838104248
    4. '(lambda' → logprob: -4.446509838104248
    5. '(input' → logprob: -4.821509838104248
    6. 'int' → logprob: -7.446509838104248
    7. '```' → logprob: -7.946509838104248
    8. ')' → logprob: -8.32150936126709
    9. '[int' → logprob: -8.32150936126709
    10. '(eval' → logprob: -8.57150936126709

Token 11: ',' (ID: 11)
  Prédit: ',input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',input' → logprob: -0.5575137734413147
    2. ',' → logprob: -0.9325137734413147
    3. '(input' → logprob: -3.43251371383667
    4. ')' → logprob: -7.43251371383667
    5. '(' → logprob: -7.68251371383667
    6. 'input' → logprob: -7.93251371383667
    7. ' ,' → logprob: -10.557514190673828
    8. '`,' → logprob: -11.307514190673828
    9. '```' → logprob: -11.807514190673828
    10. ' input' → logprob: -11.932514190673828

Token 12: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.20144949853420258
    2. ' input' → logprob: -1.7014495134353638
    3. ')' → logprob: -10.576449394226074
    4. ',input' → logprob: -12.326449394226074
    5. '(input' → logprob: -12.451449394226074
    6. '=input' → logprob: -13.951449394226074
    7. ' ' → logprob: -14.576449394226074
    8. ' )' → logprob: -15.201449394226074
    9. '[input' → logprob: -15.701449394226074
    10. 'list' → logprob: -15.951449394226074

Token 13: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.19815240800380707
    2. '()' → logprob: -1.8231524229049683
    3. '().' → logprob: -4.073152542114258
    4. ')' → logprob: -6.823152542114258
    5. '(' → logprob: -10.448152542114258
    6. ' ())' → logprob: -10.573152542114258
    7. '());' → logprob: -10.948152542114258
    8. '(),' → logprob: -11.448152542114258
    9. '()))' → logprob: -11.823152542114258
    10. '();)' → logprob: -12.198152542114258

Token 14: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00043734462815336883
    2. 'strip' → logprob: -7.750437259674072
    3. 'rstrip' → logprob: -12.75043773651123
    4. ' split' → logprob: -13.12543773651123
    5. ')' → logprob: -13.37543773651123
    6. '(split' → logprob: -15.75043773651123
    7. '```' → logprob: -17.875436782836914
    8. 'replace' → logprob: -18.500436782836914
    9. ').' → logprob: -18.500436782836914
    10. '.split' → logprob: -18.625436782836914

Token 15: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5884659290313721
    2. '())' → logprob: -0.8384659290313721
    3. '()' → logprob: -4.713465690612793
    4. '))' → logprob: -5.838465690612793
    5. '`)' → logprob: -8.338465690612793
    6. '()))' → logprob: -8.588465690612793
    7. '('' → logprob: -9.838465690612793
    8. '')' → logprob: -10.588465690612793
    9. '(' → logprob: -11.088465690612793
    10. ')`' → logprob: -11.588465690612793

Token 16: 'C' (ID: 34)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.22823841869831085
    2. 'print' → logprob: -2.228238344192505
    3. 'C' → logprob: -3.228238344192505
    4. 'for' → logprob: -3.478238344192505
    5. 'result' → logprob: -5.228238582611084
    6. 'c' → logprob: -5.353238582611084
    7. 'x' → logprob: -5.603238582611084
    8. 's' → logprob: -5.603238582611084
    9. 'sum' → logprob: -6.103238582611084
    10. 'X' → logprob: -7.103238582611084

Token 17: ' =' (ID: 314)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.18322622776031494
    2. ' =' → logprob: -1.933226227760315
    3. '=' → logprob: -3.8082261085510254
    4. ' ,' → logprob: -7.933226108551025
    5. ')' → logprob: -10.058226585388184
    6. ',D' → logprob: -10.558226585388184
    7. '.' → logprob: -11.058226585388184
    8. ' ' → logprob: -11.308226585388184
    9. '=int' → logprob: -11.433226585388184
    10. 'D' → logprob: -11.683226585388184

Token 18: ' int' (ID: 677)
  Prédit: ' A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.31162676215171814
    2. ' int' → logprob: -1.9366267919540405
    3. 'int' → logprob: -2.561626672744751
    4. 'A' → logprob: -3.186626672744751
    5. ' N' → logprob: -6.68662691116333
    6. ' ' → logprob: -6.81162691116333
    7. '0' → logprob: -7.31162691116333
    8. ' max' → logprob: -7.93662691116333
    9. 'max' → logprob: -8.436626434326172
    10. ' list' → logprob: -8.561626434326172

Token 19: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.5471392869949341
    2. '(' → logprob: -0.9221392869949341
    3. '()' → logprob: -3.7971391677856445
    4. '('' → logprob: -7.4221391677856445
    5. '(A' → logprob: -8.172139167785645
    6. 'input' → logprob: -8.922139167785645
    7. ' (' → logprob: -9.672139167785645
    8. '(C' → logprob: -9.672139167785645
    9. '(
' → logprob: -10.797139167785645
    10. '("("' → logprob: -11.047139167785645

Token 20: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5862133502960205
    2. '())' → logprob: -1.3362133502960205
    3. '()' → logprob: -1.7112133502960205
    4. '`)' → logprob: -10.086213111877441
    5. '(' → logprob: -11.086213111877441
    6. ' ())' → logprob: -11.836213111877441
    7. '))' → logprob: -12.961213111877441
    8. '()
' → logprob: -13.211213111877441
    9. ' )' → logprob: -13.211213111877441
    10. '")' → logprob: -13.211213111877441

Token 21: 't' (ID: 83)
  Prédit: 'D'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'D' → logprob: -1.0072623491287231
    2. 'print' → logprob: -1.7572623491287231
    3. 'if' → logprob: -1.8822623491287231
    4. 'total' → logprob: -2.0072622299194336
    5. 'result' → logprob: -2.7572622299194336
    6. 'sum' → logprob: -3.0072622299194336
    7. 'S' → logprob: -4.132262229919434
    8. 's' → logprob: -4.882262229919434
    9. 'ans' → logprob: -5.007262229919434
    10. 'X' → logprob: -5.007262229919434

Token 22: 'oppings' (ID: 167500)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.4513565003871918
    2. 'otal' → logprob: -1.7013565301895142
    3. 'ime' → logprob: -2.2013564109802246
    4. '=' → logprob: -3.2013564109802246
    5. '1' → logprob: -5.201356410980225
    6. 'o' → logprob: -5.326356410980225
    7. 'ot' → logprob: -5.576356410980225
    8. 'h' → logprob: -5.701356410980225
    9. 'r' → logprob: -5.826356410980225
    10. 'imes' → logprob: -5.826356410980225

Token 23: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0906522125005722
    2. '=' → logprob: -3.3406522274017334
    3. '_' → logprob: -3.3406522274017334
    4. '_counts' → logprob: -5.215651988983154
    5. 's' → logprob: -5.840651988983154
    6. '_count' → logprob: -5.965651988983154
    7. '[' → logprob: -6.715651988983154
    8. '_s' → logprob: -6.965651988983154
    9. '_list' → logprob: -7.965651988983154
    10. '_prices' → logprob: -8.215652465820312

Token 24: ' [' (ID: 723)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.2052491307258606
    2. 'list' → logprob: -2.455249071121216
    3. ' []' → logprob: -2.580249071121216
    4. '[' → logprob: -4.205249309539795
    5. ' list' → logprob: -4.955249309539795
    6. ' [' → logprob: -6.955249309539795
    7. '[list' → logprob: -7.330249309539795
    8. '[int' → logprob: -8.705248832702637
    9. '[input' → logprob: -10.080248832702637
    10. 'set' → logprob: -10.330248832702637

Token 25: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.3707696497440338
    2. '0' → logprob: -1.3707696199417114
    3. '[]' → logprob: -4.495769500732422
    4. ']' → logprob: -4.495769500732422
    5. ' int' → logprob: -4.495769500732422
    6. 'list' → logprob: -4.495769500732422
    7. 'map' → logprob: -5.370769500732422
    8. '(int' → logprob: -6.370769500732422
    9. 'False' → logprob: -7.245769500732422
    10. ' ' → logprob: -7.245769500732422

Token 26: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.04502797871828079
    2. '(' → logprob: -3.1700279712677
    3. '(x' → logprob: -7.295028209686279
    4. ']' → logprob: -7.420028209686279
    5. ' (' → logprob: -8.045027732849121
    6. '()' → logprob: -8.920027732849121
    7. '()]' → logprob: -9.045027732849121
    8. '(i' → logprob: -9.545027732849121
    9. '](' → logprob: -10.045027732849121
    10. '(int' → logprob: -11.670027732849121

Token 27: '())' (ID: 3516)
  Prédit: '())'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0006952775875106454
    2. '()' → logprob: -7.37569522857666
    3. '()]' → logprob: -9.75069522857666
    4. ')' → logprob: -12.25069522857666
    5. '()),' → logprob: -13.00069522857666
    6. ' ())' → logprob: -13.12569522857666
    7. '())
' → logprob: -14.62569522857666
    8. '()))' → logprob: -14.62569522857666
    9. '`()' → logprob: -16.250696182250977
    10. '()`' → logprob: -16.250696182250977

Token 28: ' for' (ID: 395)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.2458943873643875
    2. ']' → logprob: -2.120894432067871
    3. ' for' → logprob: -2.995894432067871
    4. ')]' → logprob: -3.245894432067871
    5. 'for' → logprob: -4.745894432067871
    6. ' )' → logprob: -8.495894432067871
    7. ' ]' → logprob: -8.995894432067871
    8. ',' → logprob: -10.995894432067871
    9. ' ' → logprob: -11.370894432067871
    10. '])' → logprob: -11.370894432067871

Token 29: ' _' (ID: 1175)
  Prédit: ' range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -8.268254896393046e-05
    2. 'range' → logprob: -9.750082969665527
    3. ' ' → logprob: -11.500082969665527
    4. '_' → logprob: -12.000082969665527
    5. ' _' → logprob: -12.375082969665527
    6. '_range' → logprob: -13.000082969665527
    7. '	range' → logprob: -14.125082969665527
    8. ' in' → logprob: -14.875082969665527
    9. '(range' → logprob: -14.875082969665527
    10. ' xrange' → logprob: -16.75008201599121

Token 30: ' in' (ID: 306)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.11415001004934311
    2. ' range' → logprob: -2.239150047302246
    3. ' in' → logprob: -6.989150047302246
    4. 'in' → logprob: -7.989150047302246
    5. '_' → logprob: -10.739150047302246
    6. ' ' → logprob: -10.989150047302246
    7. '	range' → logprob: -10.989150047302246
    8. '(range' → logprob: -12.739150047302246
    9. '  ' → logprob: -13.239150047302246
    10. '_range' → logprob: -13.489150047302246

Token 31: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.06196914613246918
    2. ' range' → logprob: -2.811969041824341
    3. ' ' → logprob: -14.561968803405762
    4. '	range' → logprob: -15.186968803405762
    5. 'rang' → logprob: -15.561968803405762
    6. '(range' → logprob: -15.936968803405762
    7. 'A' → logprob: -16.186969757080078
    8. 'r' → logprob: -16.686969757080078
    9. 't' → logprob: -16.811969757080078
    10. '  ' → logprob: -16.811969757080078

Token 32: '(N' (ID: 10564)
  Prédit: '(N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.003963112831115723
    2. '(' → logprob: -5.878962993621826
    3. '(C' → logprob: -6.878962993621826
    4. '(A' → logprob: -9.378963470458984
    5. '(n' → logprob: -10.878963470458984
    6. '(T' → logprob: -11.753963470458984
    7. 'N' → logprob: -12.503963470458984
    8. '(K' → logprob: -12.753963470458984
    9. '(t' → logprob: -13.003963470458984
    10. '(B' → logprob: -13.253963470458984

Token 33: ')]

' (ID: 56882)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')]' → logprob: -9.591415437171236e-05
    2. ')' → logprob: -9.750096321105957
    3. ']' → logprob: -10.250096321105957
    4. ' )' → logprob: -14.500096321105957
    5. ')])' → logprob: -14.750096321105957
    6. '])]' → logprob: -15.000096321105957
    7. ')]
' → logprob: -15.125096321105957
    8. '')]' → logprob: -15.625096321105957
    9. '])' → logprob: -15.875096321105957
    10. '))' → logprob: -16.25009536743164

Token 34: 'max' (ID: 3228)
  Prédit: 'total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'total' → logprob: -0.4465717077255249
    2. 'result' → logprob: -1.821571707725525
    3. 't' → logprob: -2.4465718269348145
    4. 'sum' → logprob: -3.8215718269348145
    5. 'answer' → logprob: -4.4465718269348145
    6. 'print' → logprob: -4.4465718269348145
    7. 'ans' → logprob: -4.5715718269348145
    8. 's' → logprob: -4.6965718269348145
    9. 'cost' → logprob: -4.8215718269348145
    10. 'if' → logprob: -5.4465718269348145

Token 35: '_cal' (ID: 50948)
  Prédit: '_sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.806118369102478
    2. '_price' → logprob: -1.431118369102478
    3. '_total' → logprob: -2.0561184883117676
    4. '_' → logprob: -2.8061184883117676
    5. '_value' → logprob: -3.0561184883117676
    6. '_t' → logprob: -3.4311184883117676
    7. '_cost' → logprob: -4.181118488311768
    8. '_val' → logprob: -4.306118488311768
    9. '_score' → logprob: -4.681118488311768
    10. '_amount' → logprob: -7.056118488311768

Token 36: '_per' (ID: 10938)
  Prédit: 'ories'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ories' → logprob: -0.43844443559646606
    2. 'orie' → logprob: -1.1884443759918213
    3. ' =' → logprob: -3.5634443759918213
    4. '=' → logprob: -4.4384446144104
    5. 'ory' → logprob: -4.9384446144104
    6. 's' → logprob: -6.6884446144104
    7. 'o' → logprob: -7.5634446144104
    8. 'oric' → logprob: -7.8134446144104
    9. 'or' → logprob: -8.188444137573242
    10. '```' → logprob: -9.188444137573242

Token 37: '_d' (ID: 1565)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 't' → logprob: -1.1534013748168945
    2. 's' → logprob: -1.5284013748168945
    3. 'son' → logprob: -1.9034013748168945
    4. 'slice' → logprob: -2.9034013748168945
    5. '```' → logprob: -3.1534013748168945
    6. 'centage' → logprob: -3.9034013748168945
    7. '100' → logprob: -3.9034013748168945
    8. 'cal' → logprob: -4.0284013748168945
    9. 'pizza' → logprob: -4.1534013748168945
    10. 'c' → logprob: -4.9034013748168945

Token 38: 'ollar' (ID: 25481)
  Prédit: 'ay'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ay' → logprob: -0.02528945729136467
    2. 'ish' → logprob: -3.900289535522461
    3. 'a' → logprob: -5.525289535522461
    4. 'i' → logprob: -8.025289535522461
    5. 'y' → logprob: -9.525289535522461
    6. 'ia' → logprob: -10.275289535522461
    7. 'r' → logprob: -10.400289535522461
    8. 'e' → logprob: -10.525289535522461
    9. 'ie' → logprob: -10.775289535522461
    10. '```' → logprob: -10.900289535522461

Token 39: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.014169503934681416
    2. '=' → logprob: -4.264169692993164
    3. ' ' → logprob: -12.889169692993164
    4. '_' → logprob: -13.889169692993164
    5. ',' → logprob: -14.014169692993164
    6. 's' → logprob: -14.139169692993164
    7. ' =
' → logprob: -15.014169692993164
    8. ' ' → logprob: -16.014169692993164
    9. '.' → logprob: -16.264169692993164
    10. ')' → logprob: -16.639169692993164

Token 40: ' C' (ID: 363)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.17184187471866608
    2. ' ' → logprob: -2.421841859817505
    3. 'max' → logprob: -3.296841859817505
    4. ' max' → logprob: -3.546841859817505
    5. '-' → logprob: -7.296842098236084
    6. '(max' → logprob: -7.546842098236084
    7. 't' → logprob: -7.671842098236084
    8. ' -' → logprob: -7.921842098236084
    9. ' toppings' → logprob: -7.921842098236084
    10. 'float' → logprob: -8.296841621398926

Token 41: ' //' (ID: 602)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.04990261420607567
    2. '*' → logprob: -4.049902439117432
    3. ' +' → logprob: -4.549902439117432
    4. '
' → logprob: -5.299902439117432
    5. 'for' → logprob: -5.549902439117432
    6. '+
' → logprob: -5.674902439117432
    7. '<|end|>' → logprob: -6.424902439117432
    8. '/' → logprob: -6.799902439117432
    9. ' for' → logprob: -6.924902439117432
    10. ' *' → logprob: -6.924902439117432

Token 42: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.3847152292728424
    2. 'B' → logprob: -1.63471519947052
    3. '(A' → logprob: -2.6347153186798096
    4. '(B' → logprob: -3.7597153186798096
    5. 'max' → logprob: -4.5097150802612305
    6. '(' → logprob: -5.1347150802612305
    7. 'min' → logprob: -5.3847150802612305
    8. '100' → logprob: -6.0097150802612305
    9. '1' → logprob: -6.6347150802612305
    10. 't' → logprob: -6.7597150802612305

Token 43: ' ' (ID: 220)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.29427605867385864
    2. '\n' → logprob: -1.7942759990692139
    3. '+' → logprob: -3.419275999069214
    4. '<|end|>' → logprob: -4.044276237487793
    5. 'for' → logprob: -4.544276237487793
    6. ' for' → logprob: -4.919276237487793
    7. ' if' → logprob: -5.294276237487793
    8. '+
' → logprob: -5.419276237487793
    9. 'if' → logprob: -5.794276237487793
    10. '*' → logprob: -6.544276237487793

Token 44: ' #' (ID: 1069)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.26497966051101685
    2. '\n' → logprob: -2.264979600906372
    3. '<|end|>' → logprob: -3.389979600906372
    4. 'for' → logprob: -3.514979600906372
    5. 'if' → logprob: -3.889979600906372
    6. '+' → logprob: -3.889979600906372
    7. ' for' → logprob: -4.764979839324951
    8. ' if' → logprob: -5.389979839324951
    9. '+
' → logprob: -5.889979839324951
    10. ' 
' → logprob: -6.139979839324951

Token 45: ' cas' (ID: 2108)
  Prédit: ' max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' max' → logprob: -1.0311152935028076
    2. 'max' → logprob: -1.5311152935028076
    3. '0' → logprob: -1.7811152935028076
    4. '1' → logprob: -2.5311152935028076
    5. ' ' → logprob: -2.5311152935028076
    6. 't' → logprob: -3.1561152935028076
    7. ' for' → logprob: -3.7811152935028076
    8. 'for' → logprob: -4.406115531921387
    9. ' toppings' → logprob: -5.031115531921387
    10. '100' → logprob: -6.156115531921387

Token 46: ' sans' (ID: 9828)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.4814988076686859
    2. 'l' → logprob: -1.6064988374710083
    3. 'h' → logprob: -2.6064987182617188
    4. 's' → logprob: -4.231498718261719
    5. 'c' → logprob: -4.481498718261719
    6. 'lc' → logprob: -4.481498718261719
    7. 'll' → logprob: -5.106498718261719
    8. 'le' → logprob: -5.106498718261719
    9. 't' → logprob: -5.106498718261719
    10. 'ual' → logprob: -5.481498718261719

Token 47: ' garn' (ID: 63261)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 't' → logprob: -0.20417261123657227
    2. ' toppings' → logprob: -1.9541726112365723
    3. ' topping' → logprob: -5.079172611236572
    4. 'B' → logprob: -5.579172611236572
    5. '0' → logprob: -6.079172611236572
    6. 's' → logprob: -6.141672611236572
    7. 'T' → logprob: -6.266672611236572
    8. '+' → logprob: -6.329172611236572
    9. 'C' → logprob: -6.391672611236572
    10. 'b' → logprob: -6.454172611236572

Token 48: 'iture' (ID: 9428)
  Prédit: 'ings'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ings' → logprob: -0.4170011281967163
    2. 's' → logprob: -1.6670011281967163
    3. 'es' → logprob: -2.917001247406006
    4. 'ing' → logprob: -3.292001247406006
    5. '<|end|>' → logprob: -4.417001247406006
    6. '#' → logprob: -4.667001247406006
    7. 'e' → logprob: -5.167001247406006
    8. 'in' → logprob: -5.854501247406006
    9. 'ning' → logprob: -5.917001247406006
    10. 'i' → logprob: -5.917001247406006

Token 49: '

' (ID: 279)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.0506078004837036
    2. ' for' → logprob: -1.1756078004837036
    3. '
' → logprob: -1.3006078004837036
    4. '\n' → logprob: -3.050607681274414
    5. '<|end|>' → logprob: -4.800607681274414
    6. ' 
' → logprob: -5.050607681274414
    7. '
' → logprob: -6.425607681274414
    8. '' → logprob: -6.800607681274414
    9. 'max' → logprob: -7.675607681274414
    10. ' max' → logprob: -7.675607681274414

Token 50: 't' (ID: 83)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.07350980490446091
    2. ' for' → logprob: -3.323509693145752
    3. '\n' → logprob: -3.948509693145752
    4. '
' → logprob: -4.198509693145752
    5. 'max' → logprob: -8.44851016998291
    6. '\' → logprob: -9.44851016998291
    7. '
' → logprob: -9.57351016998291
    8. '```' → logprob: -9.82351016998291
    9. '%' → logprob: -10.94851016998291
    10. '

' → logprob: -11.07351016998291

Token 51: 'oppings' (ID: 167500)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.7517294883728027
    2. 'op' → logprob: -1.1267294883728027
    3. 'oppings' → logprob: -2.3767294883728027
    4. 'ops' → logprob: -3.3767294883728027
    5. 'opping' → logprob: -3.5017294883728027
    6. 'otal' → logprob: -3.7517294883728027
    7. 'max' → logprob: -5.251729488372803
    8. 'or' → logprob: -5.376729488372803
    9. 'o' → logprob: -5.876729488372803
    10. 'ot' → logprob: -6.126729488372803

Token 52: '.sort' (ID: 19551)
  Prédit: '.sort'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.sort' → logprob: -0.6828702092170715
    2. '<|end|>' → logprob: -0.8078702092170715
    3. '.' → logprob: -4.182870388031006
    4. '<|end|>' → logprob: -5.557870388031006
    5. ' =' → logprob: -5.807870388031006
    6. ')' → logprob: -5.807870388031006
    7. '
' → logprob: -5.807870388031006
    8. '[' → logprob: -5.932870388031006
    9. '_sorted' → logprob: -5.932870388031006
    10. '=' → logprob: -6.182870388031006

Token 53: '(reverse' (ID: 110806)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.07146556675434113
    2. '(reverse' → logprob: -3.071465492248535
    3. '()
' → logprob: -4.071465492248535
    4. '()

' → logprob: -5.446465492248535
    5. 'reverse' → logprob: -6.821465492248535
    6. '(' → logprob: -9.321465492248535
    7. '()
' → logprob: -11.071465492248535
    8. '.reverse' → logprob: -11.571465492248535
    9. 'def' → logprob: -11.946465492248535
    10. '(key' → logprob: -12.071465492248535

Token 54: '=True' (ID: 7827)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.2952415645122528
    2. '())' → logprob: -1.4202415943145752
    3. '()' → logprob: -4.295241355895996
    4. '=True' → logprob: -8.545241355895996
    5. '())
' → logprob: -10.670241355895996
    6. '(True' → logprob: -10.920241355895996
    7. ')
' → logprob: -10.920241355895996
    8. 't' → logprob: -11.045241355895996
    9. '))' → logprob: -11.295241355895996
    10. '();)' → logprob: -11.295241355895996

Token 55: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0009858887642621994
    2. ')
' → logprob: -7.125986099243164
    3. ')

' → logprob: -9.000986099243164
    4. ' )' → logprob: -9.875986099243164
    5. ')
' → logprob: -13.375986099243164
    6. ')#' → logprob: -14.375986099243164
    7. 't' → logprob: -14.625986099243164
    8. '))' → logprob: -14.625986099243164
    9. ')

' → logprob: -14.625986099243164
    10. ')t' → logprob: -14.750986099243164

Token 56: 'total' (ID: 9577)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.2239508181810379
    2. 'total' → logprob: -1.9739508628845215
    3. 'current' → logprob: -3.3489508628845215
    4. 'max' → logprob: -4.0989508628845215
    5. 'cal' → logprob: -6.0989508628845215
    6. 'result' → logprob: -6.2239508628845215
    7. ' for' → logprob: -6.4739508628845215
    8. 'cost' → logprob: -6.8489508628845215
    9. 'i' → logprob: -7.4739508628845215
    10. 'curr' → logprob: -8.223950386047363

Token 57: '_cal' (ID: 50948)
  Prédit: '_cal'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_cal' → logprob: -0.1977131962776184
    2. ' =' → logprob: -1.8227131366729736
    3. '=' → logprob: -4.322713375091553
    4. '_' → logprob: -6.072713375091553
    5. '_t' → logprob: -6.947713375091553
    6. '_c' → logprob: -7.572713375091553
    7. 'cal' → logprob: -7.822713375091553
    8. '_points' → logprob: -9.697712898254395
    9. '_sum' → logprob: -9.947712898254395
    10. 'Cal' → logprob: -10.072712898254395

Token 58: ' =' (ID: 314)
  Prédit: 'ories'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ories' → logprob: -0.3188115060329437
    2. ' =' → logprob: -1.8188115358352661
    3. '=' → logprob: -2.9438114166259766
    4. 's' → logprob: -3.0688114166259766
    5. 'orie' → logprob: -4.818811416625977
    6. 'or' → logprob: -6.443811416625977
    7. ' +=' → logprob: -7.443811416625977
    8. '_per' → logprob: -7.568811416625977
    9. '+=' → logprob: -8.193811416625977
    10. '```' → logprob: -8.818811416625977

Token 59: ' C' (ID: 363)
  Prédit: ' C'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' C' → logprob: -0.47613388299942017
    2. 'C' → logprob: -1.1011338233947754
    3. '0' → logprob: -3.3511338233947754
    4. ' ' → logprob: -4.726133823394775
    5. ' max' → logprob: -6.851133823394775
    6. 'max' → logprob: -8.476134300231934
    7. 'B' → logprob: -8.476134300231934
    8. ' B' → logprob: -8.788634300231934
    9. ' A' → logprob: -8.851134300231934
    10. 't' → logprob: -9.163634300231934

Token 60: '
' (ID: 198)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.5878168344497681
    2. '<|end|>' → logprob: -1.212816834449768
    3. ' +' → logprob: -1.962816834449768
    4. '<|end|>' → logprob: -6.0878167152404785
    5. 'for' → logprob: -6.4628167152404785
    6. ' for' → logprob: -7.0878167152404785
    7. '+
' → logprob: -7.4628167152404785
    8. ')' → logprob: -8.337817192077637
    9. ' 
' → logprob: -8.462817192077637
    10. '
' → logprob: -8.462817192077637

Token 61: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.042661357671022415
    2. ' for' → logprob: -3.292661428451538
    3. 'total' → logprob: -6.292661190032959
    4. 'price' → logprob: -7.042661190032959
    5. 'd' → logprob: -7.167661190032959
    6. '+' → logprob: -7.792661190032959
    7. 'count' → logprob: -8.292661666870117
    8. 'cost' → logprob: -9.042661666870117
    9. 'money' → logprob: -10.167661666870117
    10. 'current' → logprob: -10.667661666870117

Token 62: ' i' (ID: 575)
  Prédit: ' topping'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' topping' → logprob: -0.5400262475013733
    2. ' cal' → logprob: -2.0400261878967285
    3. 'cal' → logprob: -2.6650261878967285
    4. ' t' → logprob: -2.6650261878967285
    5. ' i' → logprob: -2.7900261878967285
    6. 't' → logprob: -3.1650261878967285
    7. 'i' → logprob: -3.9150261878967285
    8. 'top' → logprob: -4.6650261878967285
    9. ' top' → logprob: -4.7900261878967285
    10. ' calorie' → logprob: -5.6650261878967285

Token 63: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0016298363916575909
    2. 'in' → logprob: -7.001629829406738
    3. ' ' → logprob: -7.251629829406738
    4. ',' → logprob: -12.126629829406738
    5. '  ' → logprob: -13.251629829406738
    6. 'n' → logprob: -14.626629829406738
    7. ' ' → logprob: -15.251629829406738
    8. ' i' → logprob: -15.501629829406738
    9. '	in' → logprob: -15.626629829406738
    10. ' n' → logprob: -15.751629829406738

Token 64: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.00479358434677124
    2. 'range' → logprob: -5.379793643951416
    3. ' toppings' → logprob: -9.129793167114258
    4. '(range' → logprob: -10.879793167114258
    5. ' ' → logprob: -10.879793167114258
    6. 't' → logprob: -12.004793167114258
    7. '	range' → logprob: -12.379793167114258
    8. ' topp' → logprob: -13.129793167114258
    9. ' ' → logprob: -13.129793167114258
    10. ' xrange' → logprob: -13.379793167114258

Token 65: '(N' (ID: 10564)
  Prédit: '(N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.20280268788337708
    2. '(' → logprob: -1.9528026580810547
    3. '(len' → logprob: -3.5778026580810547
    4. '(min' → logprob: -4.327802658081055
    5. '(n' → logprob: -7.827802658081055
    6. ' (' → logprob: -9.827802658081055
    7. '(max' → logprob: -9.952802658081055
    8. '(t' → logprob: -11.702802658081055
    9. '(
' → logprob: -11.827802658081055
    10. '(M' → logprob: -12.077802658081055

Token 66: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.03067922033369541
    2. '):
' → logprob: -3.530679225921631
    3. ' ):' → logprob: -7.530679225921631
    4. '):
' → logprob: -8.780678749084473
    5. '+' → logprob: -9.030678749084473
    6. ':' → logprob: -9.655678749084473
    7. ')' → logprob: -10.780678749084473
    8. ' ):
' → logprob: -10.780678749084473
    9. '-' → logprob: -12.405678749084473
    10. '):

' → logprob: -13.405678749084473

Token 67: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6410518288612366
    2. ' if' → logprob: -1.0160517692565918
    3. ' total' → logprob: -2.266051769256592
    4. 'total' → logprob: -5.891051769256592
    5. ' max' → logprob: -6.641051769256592
    6. '    
' → logprob: -6.766051769256592
    7. 'if' → logprob: -7.391051769256592
    8. '   ' → logprob: -7.641051769256592
    9. '+' → logprob: -8.39105224609375
    10. '
' → logprob: -8.89105224609375

Token 68: ' total' (ID: 3609)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.11185979098081589
    2. ' total' → logprob: -2.9868597984313965
    3. '   ' → logprob: -3.6118597984313965
    4. 'if' → logprob: -4.1118597984313965
    5. 'total' (adapté à ' total') → logprob: -5.2368597984313965
    6. '    ' → logprob: -5.9868597984313965
    7. ' ' → logprob: -6.9868597984313965
    8. 'cal' → logprob: -7.3618597984313965
    9. '+' → logprob: -7.6118597984313965
    10. ' next' → logprob: -8.236859321594238

Token 69: '_cal' (ID: 50948)
  Prédit: '_cal'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_cal' → logprob: -0.009182185865938663
    2. '_' → logprob: -5.759181976318359
    3. ' +=' → logprob: -6.009181976318359
    4. '+=' → logprob: -6.259181976318359
    5. '+' → logprob: -6.759181976318359
    6. 'cal' → logprob: -8.50918197631836
    7. '	cal' → logprob: -9.88418197631836
    8. ' +' → logprob: -10.50918197631836
    9. '_c' → logprob: -11.00918197631836
    10. '```' → logprob: -11.13418197631836

Token 70: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.6988838911056519
    2. '+=' → logprob: -0.6988838911056519
    3. '+' → logprob: -5.448884010314941
    4. ' +' → logprob: -6.823884010314941
    5. '+=(' → logprob: -9.198884010314941
    6. '=' → logprob: -9.698884010314941
    7. '   ' → logprob: -9.823884010314941
    8. '>' → logprob: -9.948884010314941
    9. ']+=' → logprob: -11.448884010314941
    10. '```' → logprob: -11.448884010314941

Token 71: ' toppings' (ID: 135361)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' → logprob: -0.018692508339881897
    2. ' toppings' → logprob: -4.018692493438721
    3. 'max' → logprob: -9.018692970275879
    4. 'top' → logprob: -9.268692970275879
    5. 'A' → logprob: -9.518692970275879
    6. '   ' → logprob: -9.643692970275879
    7. 'min' → logprob: -9.893692970275879
    8. ' ' → logprob: -10.018692970275879
    9. 'tops' → logprob: -10.893692970275879
    10. ' t' → logprob: -11.018692970275879

Token 72: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -4.191489642835222e-05
    2. '[' → logprob: -10.125041961669922
    3. ' [' → logprob: -14.375041961669922
    4. 'i' → logprob: -15.000041961669922
    5. '\[' → logprob: -15.750041961669922
    6. '[max' → logprob: -16.250041961669922
    7. '[
' → logprob: -16.625041961669922
    8. ' ' → logprob: -16.625041961669922
    9. '[I' → logprob: -16.625041961669922
    10. '[min' → logprob: -17.000041961669922

Token 73: ']
' (ID: 1592)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.08870082348585129
    2. ')
' → logprob: -3.213700771331787
    3. ']' → logprob: -3.463700771331787
    4. '])' → logprob: -5.588700771331787
    5. ' )' → logprob: -5.838700771331787
    6. '<|end|>' → logprob: -6.463700771331787
    7. '
' → logprob: -7.088700771331787
    8. ' *' → logprob: -7.463700771331787
    9. ' if' → logprob: -7.588700771331787
    10. '>' → logprob: -7.713700771331787

Token 74: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10729802399873734
    2. ' if' → logprob: -2.3572981357574463
    3. 'if' → logprob: -5.232297897338867
    4. '```' → logprob: -8.107297897338867
    5. ' max' → logprob: -8.232297897338867
    6. '    
' → logprob: -8.357297897338867
    7. ' B' → logprob: -8.357297897338867
    8. 'max' → logprob: -9.107297897338867
    9. ' i' → logprob: -9.607297897338867
    10. '+' → logprob: -9.857297897338867

Token 75: ' price' (ID: 3911)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.6015064120292664
    2. '(i' → logprob: -2.226506471633911
    3. ' if' → logprob: -2.726506471633911
    4. '(A' → logprob: -2.851506471633911
    5. 'i' → logprob: -2.976506471633911
    6. 'max' → logprob: -3.101506471633911
    7. 'A' → logprob: -3.476506471633911
    8. ' i' → logprob: -3.976506471633911
    9. ' (' → logprob: -4.226506233215332
    10. '   ' → logprob: -4.351506233215332

Token 76: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.201828733086586
    2. '=' → logprob: -1.7018287181854248
    3. 's' → logprob: -8.076828956604004
    4. ' +=' → logprob: -9.951828956604004
    5. '_per' → logprob: -10.826828956604004
    6. ' ' → logprob: -11.451828956604004
    7. '+=' → logprob: -12.076828956604004
    8. '=(' → logprob: -12.826828956604004
    9. '=A' → logprob: -12.826828956604004
    10. '_cost' → logprob: -13.201828956604004

Token 77: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.4121447503566742
    2. 'B' → logprob: -1.4121447801589966
    3. ' A' → logprob: -2.662144660949707
    4. ' B' → logprob: -4.162144660949707
    5. '(A' → logprob: -5.662144660949707
    6. '(B' → logprob: -6.412144660949707
    7. ' (' → logprob: -6.787144660949707
    8. 'i' → logprob: -7.537144660949707
    9. ' ' → logprob: -7.537144660949707
    10. '(' → logprob: -8.037144660949707

Token 78: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.17614924907684326
    2. ' +' → logprob: -1.9261492490768433
    3. '+B' → logprob: -4.176149368286133
    4. '*' → logprob: -8.426149368286133
    5. '+i' → logprob: -8.551149368286133
    6. '+(' → logprob: -12.176149368286133
    7. ' *' → logprob: -12.551149368286133
    8. '*(' → logprob: -12.676149368286133
    9. '+A' → logprob: -13.051149368286133
    10. '+
' → logprob: -13.051149368286133

Token 79: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.1321764439344406
    2. '(B' → logprob: -2.632176399230957
    3. '(i' → logprob: -3.257176399230957
    4. '(' → logprob: -4.757176399230957
    5. ' B' → logprob: -6.007176399230957
    6. ' (' → logprob: -6.632176399230957
    7. 'i' → logprob: -7.132176399230957
    8. '((' → logprob: -9.382176399230957
    9. ' ' → logprob: -10.382176399230957
    10. '   ' → logprob: -10.882176399230957

Token 80: ' *' (ID: 425)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.3364987373352051
    2. ' *' → logprob: -1.336498737335205
    3. '*(' → logprob: -3.836498737335205
    4. '*i' → logprob: -6.586498737335205
    5. ' ' → logprob: -11.461498260498047
    6. ' *(' → logprob: -12.836498260498047
    7. '(i' → logprob: -13.086498260498047
    8. ' ' → logprob: -13.211498260498047
    9. 'i' → logprob: -13.961498260498047
    10. '```' → logprob: -14.586498260498047

Token 81: ' (' (ID: 350)
  Prédit: '(i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(i' → logprob: -0.0019470835104584694
    2. ' (' → logprob: -6.251946926116943
    3. '(' → logprob: -11.001947402954102
    4. '[i' → logprob: -14.501947402954102
    5. '{i' → logprob: -15.126947402954102
    6. '(len' → logprob: -15.376947402954102
    7. '   ' → logprob: -15.876947402954102
    8. ' ' → logprob: -16.0019474029541
    9. '(ii' → logprob: -16.0019474029541
    10. '(I' → logprob: -16.2519474029541

Token 82: 'i' (ID: 72)
  Prédit: 'i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.0019705044105648994
    2. ' i' → logprob: -6.251970291137695
    3. '(i' → logprob: -10.251970291137695
    4. '   ' → logprob: -12.501970291137695
    5. ' (' → logprob: -13.626970291137695
    6. ' ' → logprob: -14.626970291137695
    7. ')' → logprob: -14.751970291137695
    8. '(' → logprob: -15.626970291137695
    9. ')i' → logprob: -15.751970291137695
    10. '{i' → logprob: -15.876970291137695

Token 83: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.16022545099258423
    2. ' +' → logprob: -1.9102253913879395
    3. '1' → logprob: -14.785225868225098
    4. ')' → logprob: -15.535225868225098
    5. '＋' → logprob: -16.03522491455078
    6. ' +
' → logprob: -16.16022491455078
    7. ' ' → logprob: -16.16022491455078
    8. '+)' → logprob: -16.41022491455078
    9. '<|end|>' → logprob: -16.78522491455078
    10. '+
' → logprob: -17.03522491455078

Token 84: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0004908377304673195
    2. ' ' → logprob: -7.625490665435791
    3. '```' → logprob: -14.06299114227295
    4. ')' → logprob: -14.75049114227295
    5. '2' → logprob: -15.00049114227295
    6. '   ' → logprob: -15.06299114227295
    7. '<|end|>' → logprob: -15.50049114227295
    8. '+' → logprob: -16.500490188598633
    9. ' ' → logprob: -16.812990188598633
    10. '  ' → logprob: -16.875490188598633

Token 85: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -7.3458322731312364e-06
    2. ' ' → logprob: -11.875007629394531
    3. ')' → logprob: -16.18750762939453
    4. '2' → logprob: -16.31250762939453
    5. '```' → logprob: -17.25000762939453
    6. '   ' → logprob: -17.68750762939453
    7. '0' → logprob: -18.37500762939453
    8. '１' → logprob: -18.50000762939453
    9. ' ' → logprob: -18.93750762939453
    10. '`' → logprob: -19.12500762939453

Token 86: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.5761876702308655
    2. ')' → logprob: -0.8261876702308655
    3. ' )
' → logprob: -9.076188087463379
    4. ')
' → logprob: -9.201188087463379
    5. ' )' → logprob: -11.076188087463379
    6. ')

' → logprob: -11.201188087463379
    7. '   ' → logprob: -14.076188087463379
    8. ' ' → logprob: -14.201188087463379
    9. '))' → logprob: -15.076188087463379
    10. ')`
' → logprob: -15.451188087463379

Token 87: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0576037168502808
    2. '
' → logprob: -1.1826037168502808
    3. ' if' → logprob: -1.3076037168502808
    4. '<|end|>' → logprob: -3.1826038360595703
    5. 'if' → logprob: -4.68260383605957
    6. '```' → logprob: -5.05760383605957
    7. '    
' → logprob: -5.18260383605957
    8. ' 
' → logprob: -5.43260383605957
    9. '  
' → logprob: -5.80760383605957
    10. ' ' → logprob: -5.80760383605957

Token 88: ' cal' (ID: 2005)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.5882662534713745
    2. 'if' → logprob: -1.2132662534713745
    3. 'max' → logprob: -2.463266372680664
    4. ' max' → logprob: -2.838266372680664
    5. 'cal' (adapté à ' cal') → logprob: -6.088266372680664
    6. ' ratio' → logprob: -7.963266372680664
    7. '
' → logprob: -8.213266372680664
    8. 'ratio' → logprob: -8.338266372680664
    9. ' current' → logprob: -9.338266372680664
    10. '   ' → logprob: -9.338266372680664

Token 89: '_per' (ID: 10938)
  Prédit: '_per'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_per' → logprob: -5.3358446166384965e-05
    2. 'per' → logprob: -10.250053405761719
    3. '=' → logprob: -12.625053405761719
    4. '	per' → logprob: -12.875053405761719
    5. ' =' → logprob: -13.375053405761719
    6. ' per' → logprob: -13.750053405761719
    7. 'Per' → logprob: -13.750053405761719
    8. '_p' → logprob: -13.875053405761719
    9. '   ' → logprob: -13.875053405761719
    10. 's' → logprob: -14.000053405761719

Token 90: '_d' (ID: 1565)
  Prédit: '_d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_d' → logprob: -0.029715774580836296
    2. '=' → logprob: -4.154715538024902
    3. ' =' → logprob: -4.779715538024902
    4. 'd' → logprob: -5.654715538024902
    5. '_' → logprob: -7.529715538024902
    6. '_price' → logprob: -8.154715538024902
    7. 'Dollar' → logprob: -8.654715538024902
    8. ' ' → logprob: -8.779715538024902
    9. '```' → logprob: -9.904715538024902
    10. '   ' → logprob: -10.029715538024902

Token 91: 'ollar' (ID: 25481)
  Prédit: 'ol'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ol' → logprob: -0.7294544577598572
    2. 'ollar' → logprob: -0.7294544577598572
    3. 'olar' → logprob: -3.729454517364502
    4. 'o' → logprob: -4.729454517364502
    5. 'oller' → logprob: -6.354454517364502
    6. 'al' → logprob: -8.479454040527344
    7. 'oll' → logprob: -8.729454040527344
    8. 'olla' → logprob: -8.729454040527344
    9. 'ar' → logprob: -9.229454040527344
    10. 'olor' → logprob: -9.229454040527344

Token 92: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0046264105476439
    2. '=' → logprob: -5.379626274108887
    3. ' ' → logprob: -12.754626274108887
    4. ' >' → logprob: -13.254626274108887
    5. '>' → logprob: -14.754626274108887
    6. ' ' → logprob: -15.129626274108887
    7. '_' → logprob: -15.379626274108887
    8. ' =
' → logprob: -16.129627227783203
    9. 'max' → logprob: -16.254627227783203
    10. 's' → logprob: -16.504627227783203

Token 93: ' total' (ID: 3609)
  Prédit: ' total'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' total' → logprob: -0.005236837547272444
    2. 'total' → logprob: -5.255236625671387
    3. '(total' → logprob: -13.130236625671387
    4. ' ' → logprob: -15.005236625671387
    5. '	total' → logprob: -15.130236625671387
    6. ' max' → logprob: -15.505236625671387
    7. ' int' → logprob: -15.880236625671387
    8. '_total' → logprob: -16.755237579345703
    9. ' t' → logprob: -17.255237579345703
    10. ' tot' → logprob: -17.380237579345703

Token 94: '_cal' (ID: 50948)
  Prédit: '_cal'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_cal' → logprob: -5.240481914370321e-05
    2. '_' → logprob: -10.750052452087402
    3. 'cal' → logprob: -10.750052452087402
    4. 'Cal' → logprob: -13.625052452087402
    5. '	cal' → logprob: -14.000052452087402
    6. '-_' → logprob: -14.250052452087402
    7. '<|end|>' → logprob: -14.250052452087402
    8. '_cap' → logprob: -14.250052452087402
    9. ' _' → logprob: -14.500052452087402
    10. '_c' → logprob: -15.000052452087402

Token 95: ' //' (ID: 602)
  Prédit: ' //'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.04563039913773537
    2. '//' → logprob: -3.17063045501709
    3. ' /' → logprob: -6.04563045501709
    4. '/' → logprob: -8.79563045501709
    5. ' ' → logprob: -9.79563045501709
    6. ' ' → logprob: -10.79563045501709
    7. '   ' → logprob: -12.42063045501709
    8. '<|end|>' → logprob: -12.42063045501709
    9. ' ///' → logprob: -12.79563045501709
    10. '`' → logprob: -12.79563045501709

Token 96: ' price' (ID: 3911)
  Prédit: 'price'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'price' → logprob: -0.0019289902411401272
    2. ' price' → logprob: -6.251928806304932
    3. '(price' → logprob: -15.37692928314209
    4. '	price' → logprob: -16.001928329467773
    5. '_price' → logprob: -20.876928329467773
    6. ' ' → logprob: -20.876928329467773
    7. '.price' → logprob: -21.126928329467773
    8. '<|end|>' → logprob: -21.751928329467773
    9. 'precio' → logprob: -22.126928329467773
    10. '```' → logprob: -22.626928329467773

Token 97: '
' (ID: 198)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.0943959951400757
    2. '\n' → logprob: -1.4693959951400757
    3. '
' → logprob: -1.8443959951400757
    4. '   ' → logprob: -2.2193961143493652
    5. ' if' → logprob: -2.4693961143493652
    6. '<|end|>' → logprob: -3.0943961143493652
    7. '    
' → logprob: -4.344396114349365
    8. ')' → logprob: -4.469396114349365
    9. '\' → logprob: -5.719396114349365
    10. '  
' → logprob: -6.344396114349365

Token 98: '   ' (ID: 271)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.6737178564071655
    2. '\n' → logprob: -1.1737178564071655
    3. '   ' → logprob: -2.423717975616455
    4. ' if' → logprob: -3.423717975616455
    5. '
' → logprob: -3.923717975616455
    6. '    
' → logprob: -4.548717975616455
    7. ')' → logprob: -4.548717975616455
    8. '<|end|>' → logprob: -4.923717975616455
    9. '  
' → logprob: -5.798717975616455
    10. ' ' → logprob: -6.298717975616455

Token 99: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.005958307068794966
    2. ' if' → logprob: -5.255958080291748
    3. '   ' → logprob: -7.255958080291748
    4. '    
' → logprob: -11.880958557128906
    5. 'max' → logprob: -12.630958557128906
    6. '\n' → logprob: -13.130958557128906
    7. '	if' → logprob: -13.755958557128906
    8. ' ' → logprob: -13.880958557128906
    9. '```' → logprob: -13.880958557128906
    10. '
' → logprob: -14.255958557128906

Token 100: ' cal' (ID: 2005)
  Prédit: 'cal'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cal' → logprob: -0.47430819272994995
    2. ' cal' → logprob: -0.97430819272995
    3. ' max' → logprob: -8.849308013916016
    4. 'max' → logprob: -9.599308013916016
    5. '	cal' → logprob: -11.474308013916016
    6. ' ' → logprob: -12.349308013916016
    7. '(cal' → logprob: -13.099308013916016
    8. ' ' → logprob: -13.724308013916016
    9. 'c' → logprob: -14.349308013916016
    10. '   ' → logprob: -15.286808013916016

Token 101: '_per' (ID: 10938)
  Prédit: '_per'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_per' → logprob: -0.0007303050952032208
    2. '_cal' → logprob: -7.250730514526367
    3. 'per' → logprob: -11.500730514526367
    4. '_' → logprob: -12.250730514526367
    5. 'cal' → logprob: -13.750730514526367
    6. '_max' → logprob: -14.250730514526367
    7. '>' → logprob: -14.625730514526367
    8. 's' → logprob: -14.875730514526367
    9. '_pro' → logprob: -15.000730514526367
    10. ' _' → logprob: -15.250730514526367

Token 102: '_d' (ID: 1565)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.019216308370232582
    2. '_d' → logprob: -4.769216537475586
    3. 'rr' → logprob: -5.519216537475586
    4. '_per' → logprob: -6.269216537475586
    5. 'per' → logprob: -6.644216537475586
    6. 'er' → logprob: -6.769216537475586
    7. 'cal' → logprob: -6.894216537475586
    8. '_cal' → logprob: -8.144216537475586
    9. 'd' → logprob: -8.394216537475586
    10. 'or' → logprob: -9.269216537475586

Token 103: 'ollar' (ID: 25481)
  Prédit: 'ol'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ol' → logprob: -0.7431776523590088
    2. 'cal' → logprob: -2.118177652359009
    3. 'per' → logprob: -2.368177652359009
    4. 'al' → logprob: -2.368177652359009
    5. 'ar' → logprob: -2.618177652359009
    6. 'ollar' → logprob: -2.618177652359009
    7. 'er' → logprob: -3.618177652359009
    8. 'o' → logprob: -3.993177652359009
    9. '>' → logprob: -5.24317741394043
    10. 'e' → logprob: -6.11817741394043

Token 104: ' >' (ID: 1424)
  Prédit: ' >'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.6412028670310974
    2. '>' → logprob: -0.7662028670310974
    3. ' <=' → logprob: -4.891202926635742
    4. '<=' → logprob: -6.891202926635742
    5. ' ' → logprob: -11.266202926635742
    6. '>=' → logprob: -11.891202926635742
    7. '   ' → logprob: -12.141202926635742
    8. ' >=' → logprob: -12.516202926635742
    9. ' <' → logprob: -13.016202926635742
    10. '<' → logprob: -13.516202926635742

Token 105: ' max' (ID: 2999)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.0001234428636962548
    2. ' max' → logprob: -9.000123023986816
    3. '	max' → logprob: -18.375123977661133
    4. '_max' → logprob: -18.875123977661133
    5. '   ' → logprob: -19.875123977661133
    6. '(max' → logprob: -21.000123977661133
    7. '```' → logprob: -21.000123977661133
    8. '[max' → logprob: -21.750123977661133
    9. '=max' → logprob: -21.875123977661133
    10. 'maximum' → logprob: -22.500123977661133

Token 106: '_cal' (ID: 50948)
  Prédit: '_cal'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_cal' → logprob: -1.8624639324116288e-06
    2. 'cal' → logprob: -13.625001907348633
    3. '_' → logprob: -14.875001907348633
    4. '_per' → logprob: -17.000001907348633
    5. '_max' → logprob: -17.500001907348633
    6. '_c' → logprob: -17.625001907348633
    7. 'Cal' → logprob: -17.750001907348633
    8. '	cal' → logprob: -17.750001907348633
    9. '_ca' → logprob: -18.500001907348633
    10. '_CAL' → logprob: -19.125001907348633

Token 107: '_per' (ID: 10938)
  Prédit: '_per'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_per' → logprob: -5.7888184528565034e-05
    2. 'per' → logprob: -10.3750581741333
    3. '_cal' → logprob: -10.6250581741333
    4. '_' → logprob: -13.7500581741333
    5. ' _' → logprob: -15.2500581741333
    6. '_p' → logprob: -16.125057220458984
    7. '_d' → logprob: -16.625057220458984
    8. '_or' → logprob: -16.750057220458984
    9. '_pro' → logprob: -16.750057220458984
    10. '_PER' → logprob: -16.750057220458984

Token 108: '_d' (ID: 1565)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.11324924230575562
    2. 'cal' → logprob: -2.4882493019104004
    3. 'dol' → logprob: -4.2382493019104
    4. '_d' → logprob: -5.4882493019104
    5. 'dor' → logprob: -6.9882493019104
    6. 'don' → logprob: -7.2382493019104
    7. 'per' → logprob: -7.2382493019104
    8. 't' → logprob: -7.6132493019104
    9. 'ollar' → logprob: -7.7382493019104
    10. '-dollar' → logprob: -8.113248825073242

Token 109: 'ollar' (ID: 25481)
  Prédit: 'ollar'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ollar' → logprob: -0.02044541947543621
    2. 'olar' → logprob: -4.395445346832275
    3. 'lar' → logprob: -5.520445346832275
    4. 'd' → logprob: -6.770445346832275
    5. 'r' → logprob: -7.395445346832275
    6. 'ol' → logprob: -7.645445346832275
    7. 'll' → logprob: -8.020445823669434
    8. 'oller' → logprob: -8.270445823669434
    9. 'tar' → logprob: -9.270445823669434
    10. 'o' → logprob: -9.395445823669434

Token 110: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.01562921702861786
    2. ':
' → logprob: -4.390629291534424
    3. '       ' → logprob: -6.640629291534424
    4. 'max' → logprob: -6.890629291534424
    5. '   ' → logprob: -7.890629291534424
    6. ':max' → logprob: -8.265628814697266
    7. '):' → logprob: -10.140628814697266
    8. ' max' → logprob: -10.140628814697266
    9. '):
' → logprob: -11.140628814697266
    10. '(max' → logprob: -11.265628814697266

Token 111: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.05000569298863411
    2. 'max' → logprob: -3.1750056743621826
    3. '   ' → logprob: -5.550005912780762
    4. ' max' → logprob: -5.800005912780762
    5. '           ' → logprob: -10.925005912780762
    6. '	max' → logprob: -10.925005912780762
    7. '        
' → logprob: -12.050005912780762
    8. '```' → logprob: -12.300005912780762
    9. '    
' → logprob: -12.425005912780762
    10. '      ' → logprob: -12.550005912780762

Token 112: ' max' (ID: 2999)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'max' (adapté à ' max') → logprob: -0.004489462357014418
    2. ' max' → logprob: -5.504489421844482
    3. '       ' → logprob: -7.879489421844482
    4. '   ' → logprob: -10.62948989868164
    5. '	max' → logprob: -12.87948989868164
    6. '           ' → logprob: -13.25448989868164
    7. '
' → logprob: -13.87948989868164
    8. '```' → logprob: -13.87948989868164
    9. '_max' → logprob: -14.12948989868164
    10. '        
' → logprob: -14.87948989868164

Token 113: '_cal' (ID: 50948)
  Prédit: '_cal'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_cal' → logprob: -5.5577775128767826e-06
    2. 'cal' → logprob: -12.250005722045898
    3. '	cal' → logprob: -15.000005722045898
    4. '_' → logprob: -16.0000057220459
    5. 'Cal' → logprob: -16.3750057220459
    6. '_c' → logprob: -16.6250057220459
    7. '_cap' → logprob: -17.3750057220459
    8. '<|end|>' → logprob: -17.8750057220459
    9. '_ca' → logprob: -18.0000057220459
    10. '_per' → logprob: -18.3750057220459

Token 114: '_per' (ID: 10938)
  Prédit: '_per'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_per' → logprob: -0.0015378349926322699
    2. 'per' → logprob: -6.501537799835205
    3. '_cal' → logprob: -10.376538276672363
    4. '=' → logprob: -13.876538276672363
    5. 'cal' → logprob: -13.876538276672363
    6. '	per' → logprob: -14.501538276672363
    7. '_p' → logprob: -14.626538276672363
    8. 'Per' → logprob: -15.126538276672363
    9. '_' → logprob: -15.751538276672363
    10. '_d' → logprob: -16.376537322998047

Token 115: '_d' (ID: 1565)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.06587471812963486
    2. '_d' → logprob: -3.0658748149871826
    3. 'dol' → logprob: -4.6908745765686035
    4. 'cal' → logprob: -4.9408745765686035
    5. '_cal' → logprob: -8.565875053405762
    6. 'dor' → logprob: -9.440875053405762
    7. 't' → logprob: -9.815875053405762
    8. '```' → logprob: -9.815875053405762
    9. '-dollar' → logprob: -10.440875053405762
    10. 'p' → logprob: -10.565875053405762

Token 116: 'ollar' (ID: 25481)
  Prédit: 'ollar'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ollar' → logprob: -0.08838168531656265
    2. 'cal' → logprob: -3.338381767272949
    3. 'olar' → logprob: -3.463381767272949
    4. 'ol' → logprob: -4.213381767272949
    5. 'per' → logprob: -7.463381767272949
    6. 'oller' → logprob: -7.713381767272949
    7. 'd' → logprob: -8.33838176727295
    8. 'al' → logprob: -8.33838176727295
    9. 'o' → logprob: -8.58838176727295
    10. 'lar' → logprob: -8.96338176727295

Token 117: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.061967797577381134
    2. '=' → logprob: -2.8119678497314453
    3. ' ' → logprob: -16.686967849731445
    4. '=max' → logprob: -17.561967849731445
    5. ' +=' → logprob: -18.186967849731445
    6. 'cal' → logprob: -18.311967849731445
    7. '＝' → logprob: -18.436967849731445
    8. '+=' → logprob: -19.311967849731445
    9. '   ' → logprob: -19.436967849731445
    10. ',' → logprob: -19.436967849731445

Token 118: ' cal' (ID: 2005)
  Prédit: 'cal'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cal' → logprob: -0.0024764856789261103
    2. ' cal' → logprob: -6.002476692199707
    3. '	cal' → logprob: -14.252476692199707
    4. '   ' → logprob: -17.00247573852539
    5. '(cal' → logprob: -17.50247573852539
    6. ' ' → logprob: -18.12747573852539
    7. 'c' → logprob: -18.25247573852539
    8. 'ca' → logprob: -18.62747573852539
    9. '```' → logprob: -18.62747573852539
    10. ' ' → logprob: -18.75247573852539

Token 119: '_per' (ID: 10938)
  Prédit: '_cal'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_cal' → logprob: -0.12722457945346832
    2. '_per' → logprob: -2.1272246837615967
    3. 'per' → logprob: -9.252224922180176
    4. 'cal' → logprob: -9.377224922180176
    5. '_c' → logprob: -10.627224922180176
    6. '_' → logprob: -10.752224922180176
    7. 't' → logprob: -11.377224922180176
    8. '_t' → logprob: -11.877224922180176
    9. '_p' → logprob: -12.127224922180176
    10. 'al' → logprob: -12.502224922180176

Token 120: '_d' (ID: 1565)
  Prédit: '_d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_d' → logprob: -0.13545218110084534
    2. 'd' → logprob: -2.7604522705078125
    3. 'cal' → logprob: -3.0104522705078125
    4. '_cal' → logprob: -5.3854522705078125
    5. 'dol' → logprob: -5.6354522705078125
    6. 't' → logprob: -7.2604522705078125
    7. 'r' → logprob: -7.3854522705078125
    8. 'od' → logprob: -7.3854522705078125
    9. '-dollar' → logprob: -8.135452270507812
    10. 'Dollar' → logprob: -8.260452270507812

Token 121: 'ollar' (ID: 25481)
  Prédit: 'ollar'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ollar' → logprob: -0.006361012347042561
    2. 'olar' → logprob: -5.25636100769043
    3. 'ol' → logprob: -7.25636100769043
    4. 'oller' → logprob: -8.50636100769043
    5. 'cal' → logprob: -9.75636100769043
    6. 'lar' → logprob: -10.00636100769043
    7. 'l' → logprob: -10.25636100769043
    8. 'al' → logprob: -10.75636100769043
    9. 'per' → logprob: -12.00636100769043
    10. 'oll' → logprob: -12.13136100769043

Token 122: '

' (ID: 279)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -6.027225754223764e-05
    2. ' print' → logprob: -10.375060081481934
    3. '
' → logprob: -11.000060081481934
    4. ')' → logprob: -11.500060081481934
    5. '\n' → logprob: -13.875060081481934
    6. '(print' → logprob: -15.000060081481934
    7. '```' → logprob: -15.250060081481934
    8. '#' → logprob: -15.750060081481934
    9. ' 
' → logprob: -16.00006103515625
    10. '\' → logprob: -16.00006103515625

Token 123: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -3.2020991056924686e-05
    2. ')' → logprob: -10.500032424926758
    3. ' print' → logprob: -12.375032424926758
    4. '
' → logprob: -16.500032424926758
    5. '```' → logprob: -16.750032424926758
    6. 'max' → logprob: -17.250032424926758
    7. '(print' → logprob: -17.500032424926758
    8. 'pr' → logprob: -17.625032424926758
    9. ')
' → logprob: -17.750032424926758
    10. '#' → logprob: -18.000032424926758

Token 124: '(max' (ID: 17178)
  Prédit: '(max'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(max' → logprob: -0.2519415020942688
    2. '(' → logprob: -1.501941442489624
    3. 'max' → logprob: -11.876941680908203
    4. '()' → logprob: -12.626941680908203
    5. '(
' → logprob: -13.876941680908203
    6. '('' → logprob: -15.001941680908203
    7. ' (' → logprob: -15.626941680908203
    8. '(Max' → logprob: -15.876941680908203
    9. '("' → logprob: -16.251941680908203
    10. '((' → logprob: -16.501941680908203

Token 125: '_cal' (ID: 50948)
  Prédit: '_cal'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_cal' → logprob: -1.3856492842023727e-06
    2. 'cal' → logprob: -13.875000953674316
    3. '_' → logprob: -16.375001907348633
    4. '_max' → logprob: -16.500001907348633
    5. ')' → logprob: -17.375001907348633
    6. '_per' → logprob: -17.625001907348633
    7. '	cal' → logprob: -17.750001907348633
    8. '_ca' → logprob: -17.875001907348633
    9. '_co' → logprob: -18.000001907348633
    10. ' _' → logprob: -18.125001907348633

Token 126: '_per' (ID: 10938)
  Prédit: '_per'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_per' → logprob: -0.0013270224444568157
    2. 'per' → logprob: -6.626327037811279
    3. 'Per' → logprob: -15.251326560974121
    4. '_p' → logprob: -15.626326560974121
    5. '_cal' → logprob: -16.126327514648438
    6. '_PER' → logprob: -16.251327514648438
    7. '	per' → logprob: -16.501327514648438
    8. ')' → logprob: -16.751327514648438
    9. 'p' → logprob: -17.376327514648438
    10. '_por' → logprob: -17.376327514648438

Token 127: '_d' (ID: 1565)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.2568807601928711
    2. 'cal' → logprob: -2.006880760192871
    3. 'dol' → logprob: -4.256880760192871
    4. '_d' → logprob: -4.256880760192871
    5. 'ollar' → logprob: -4.256880760192871
    6. 'al' → logprob: -4.381880760192871
    7. 'per' → logprob: -4.506880760192871
    8. 't' → logprob: -5.631880760192871
    9. 'tar' → logprob: -5.756880760192871
    10. 'ter' → logprob: -5.881880760192871

Token 128: 'ollar' (ID: 25481)
  Prédit: 'ollar'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ollar' → logprob: -0.002568760421127081
    2. 'olar' → logprob: -6.00256872177124
    3. 'oller' → logprob: -9.752569198608398
    4. 'lar' → logprob: -11.377569198608398
    5. 'o' → logprob: -11.627569198608398
    6. 'oll' → logprob: -12.502569198608398
    7. 'ol' → logprob: -12.502569198608398
    8. 'll' → logprob: -13.127569198608398
    9. 'ollars' → logprob: -13.377569198608398
    10. 'olla' → logprob: -13.502569198608398

Token 129: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.128163257315464e-07
    2. ' )' → logprob: -16.5
    3. ')
' → logprob: -17.125
    4. ')`' → logprob: -17.5
    5. '))' → logprob: -18.875
    6. ')#' → logprob: -20.0
    7. ')}' → logprob: -20.125
    8. '）' → logprob: -20.125
    9. '')' → logprob: -20.375
    10. '),' → logprob: -20.75


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 127
Tokens correctement prédits (1ère position, stricte): 50
Tokens correctement prédits (1ère position, avec adaptation): 52
Tokens correctement prédits (top 10): 100
Précision stricte (1ère position): 39.37%
Précision adaptée (1ère position): 40.94%
Précision (top 10): 78.74%
================================================================================
