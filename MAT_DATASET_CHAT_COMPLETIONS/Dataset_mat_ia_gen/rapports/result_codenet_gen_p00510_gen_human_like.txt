================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:24:39
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
m = int(input())
cars_in_tunnel = m
max_cars = m
error = False

for _ in range(n):
    entered, exited = map(int, input().split())
    cars_in_tunnel += entered - exited
    if cars_in_tunnel < 0:
        error = True
    if cars_in_tunnel > max_cars:
        max_cars = cars_in_tunnel

if error:
    print(0)
else:
    print(max_cars)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0005687602679245174
    2. '('' → logprob: -8.000568389892578
    3. ''' → logprob: -9.125568389892578
    4. '```' → logprob: -10.500568389892578
    5. '(n' → logprob: -10.750568389892578
    6. '("("' → logprob: -10.875568389892578
    7. '`' → logprob: -11.000568389892578
    8. '(
' → logprob: -11.000568389892578
    9. '()' → logprob: -12.000568389892578
    10. ')' → logprob: -12.875568389892578

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7217922210693359
    2. ')' → logprob: -0.7217922210693359
    3. '()' → logprob: -3.846792221069336
    4. '())' → logprob: -5.221792221069336
    5. '(
' → logprob: -8.096792221069336
    6. '```' → logprob: -8.596792221069336
    7. '(()' → logprob: -9.346792221069336
    8. '[' → logprob: -9.346792221069336
    9. '))' → logprob: -9.346792221069336
    10. '")' → logprob: -9.471792221069336

Token 5: 'm' (ID: 76)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.7043631672859192
    2. 'if' → logprob: -1.4543631076812744
    3. 'for' → logprob: -2.3293631076812744
    4. 's' → logprob: -2.4543631076812744
    5. 'f' → logprob: -4.3293633460998535
    6. ' ' → logprob: -4.4543633460998535
    7. 'x' → logprob: -4.8293633460998535
    8. ')' → logprob: -4.9543633460998535
    9. 'a' → logprob: -4.9543633460998535
    10. ''' → logprob: -5.0793633460998535

Token 6: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.9383952021598816
    2. '+' → logprob: -1.3133952617645264
    3. '=' → logprob: -1.6883952617645264
    4. ' =' → logprob: -2.8133952617645264
    5. '*' → logprob: -3.6883952617645264
    6. ')' → logprob: -3.6883952617645264
    7. ' ' → logprob: -4.063395023345947
    8. ''' → logprob: -4.813395023345947
    9. ' +=' → logprob: -6.313395023345947
    10. '.' → logprob: -6.438395023345947

Token 7: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.3453800082206726
    2. 'int' → logprob: -1.3453800678253174
    3. ' n' → logprob: -3.8453800678253174
    4. 'n' → logprob: -4.970379829406738
    5. ' ' → logprob: -6.345379829406738
    6. '0' → logprob: -7.220379829406738
    7. '1' → logprob: -8.595379829406738
    8. '[int' → logprob: -8.595379829406738
    9. 'input' → logprob: -8.845379829406738
    10. ' input' → logprob: -9.095379829406738

Token 8: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.005688918754458427
    2. '(input' → logprob: -5.5056891441345215
    3. '()' → logprob: -7.1306891441345215
    4. ' (' → logprob: -8.255688667297363
    5. '('' → logprob: -8.630688667297363
    6. ')' → logprob: -9.255688667297363
    7. ' ' → logprob: -9.630688667297363
    8. '(
' → logprob: -10.880688667297363
    9. '(space' → logprob: -11.005688667297363
    10. '[' → logprob: -11.255688667297363

Token 9: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.22051985561847687
    2. '()' → logprob: -1.7205199003219604
    3. ')' → logprob: -3.970519781112671
    4. '(' → logprob: -11.22052001953125
    5. '()))' → logprob: -11.22052001953125
    6. ' ())' → logprob: -11.59552001953125
    7. '()
' → logprob: -12.09552001953125
    8. '())
' → logprob: -12.34552001953125
    9. '().' → logprob: -12.34552001953125
    10. '`)' → logprob: -13.09552001953125

Token 10: 'cars' (ID: 87072)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.47381988167762756
    2. 'for' → logprob: -2.3488199710845947
    3. 'if' → logprob: -2.3488199710845947
    4. 'result' → logprob: -2.8488199710845947
    5. 'sum' → logprob: -3.2238199710845947
    6. 'r' → logprob: -3.7238199710845947
    7. 'a' → logprob: -3.9738199710845947
    8. 'g' → logprob: -5.098819732666016
    9. 'i' → logprob: -5.473819732666016
    10. 'd' → logprob: -5.473819732666016

Token 11: '_in' (ID: 2267)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.39274558424949646
    2. '_' → logprob: -1.3927456140518188
    3. ' =' → logprob: -3.2677454948425293
    4. '.' → logprob: -3.6427454948425293
    5. 's' → logprob: -5.642745494842529
    6. '=' → logprob: -6.017745494842529
    7. '_count' → logprob: -6.517745494842529
    8. '[]' → logprob: -7.017745494842529
    9. '_space' → logprob: -7.267745494842529
    10. '[:]' → logprob: -7.767745494842529

Token 12: '_t' (ID: 838)
  Prédit: '_g'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_g' → logprob: -0.8377533555030823
    2. '_lane' → logprob: -1.0877532958984375
    3. '_' → logprob: -2.0877532958984375
    4. '_st' → logprob: -3.3377532958984375
    5. '_line' → logprob: -3.9627532958984375
    6. '_par' → logprob: -4.4627532958984375
    7. '_l' → logprob: -4.5877532958984375
    8. '_queue' → logprob: -5.0877532958984375
    9. '_r' → logprob: -5.8377532958984375
    10. '_city' → logprob: -6.0877532958984375

Token 13: 'unnel' (ID: 24757)
  Prédit: 'ra'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ra' → logprob: -0.47206276655197144
    2. 'he' → logprob: -2.097062826156616
    3. 'rack' → logprob: -2.222062826156616
    4. 'own' → logprob: -3.597062826156616
    5. 'ank' → logprob: -3.722062826156616
    6. 'r' → logprob: -3.972062826156616
    7. 'race' → logprob: -4.097062587738037
    8. 'unnel' → logprob: -4.597062587738037
    9. 'ime' → logprob: -4.847062587738037
    10. 'rail' → logprob: -5.222062587738037

Token 14: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2132297158241272
    2. '_' → logprob: -1.8382296562194824
    3. '=' → logprob: -4.213229656219482
    4. '[' → logprob: -4.963229656219482
    5. ' ' → logprob: -4.963229656219482
    6. '_space' → logprob: -6.213229656219482
    7. '_count' → logprob: -7.588229656219482
    8. ')' → logprob: -8.08823013305664
    9. ' _' → logprob: -8.83823013305664
    10. '.' → logprob: -8.96323013305664

Token 15: ' m' (ID: 284)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5581105351448059
    2. ' []' → logprob: -1.5581104755401611
    3. '0' → logprob: -1.6831104755401611
    4. ' set' → logprob: -4.30811071395874
    5. '[]' → logprob: -4.43311071395874
    6. 'set' → logprob: -5.43311071395874
    7. ' {}' → logprob: -7.05811071395874
    8. '[' → logprob: -8.183110237121582
    9. ' [' → logprob: -8.183110237121582
    10. '{}' → logprob: -8.808110237121582

Token 16: '
' (ID: 198)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -1.219649076461792
    2. '>' → logprob: -1.344649076461792
    3. '%' → logprob: -2.594649076461792
    4. 'for' → logprob: -2.844649076461792
    5. '*' → logprob: -2.969649076461792
    6. ')' → logprob: -3.219649076461792
    7. '<|end|>' → logprob: -3.219649076461792
    8. '-' → logprob: -3.344649076461792
    9. '=' → logprob: -3.844649076461792
    10. ' ' → logprob: -3.969649076461792

Token 17: 'max' (ID: 3228)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.5388140082359314
    2. '<|end|>' → logprob: -2.163814067840576
    3. '>' → logprob: -2.913814067840576
    4. ' ' → logprob: -3.038814067840576
    5. '-' → logprob: -3.788814067840576
    6. '
' → logprob: -3.913814067840576
    7. '=' → logprob: -4.038814067840576
    8. 'for' → logprob: -4.288814067840576
    9. ' for' → logprob: -4.288814067840576
    10. ' while' → logprob: -4.288814067840576

Token 18: '_c' (ID: 1303)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.038374003022909164
    2. '_c' → logprob: -3.5383739471435547
    3. '_capacity' → logprob: -6.038373947143555
    4. '_length' → logprob: -6.163373947143555
    5. '_space' → logprob: -6.538373947143555
    6. ' _' → logprob: -7.163373947143555
    7. '_len' → logprob: -7.913373947143555
    8. '_car' → logprob: -8.288373947143555
    9. '_l' → logprob: -8.538373947143555
    10. '_size' → logprob: -8.913373947143555

Token 19: 'ars' (ID: 1904)
  Prédit: 'ars'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ars' → logprob: -0.8650264739990234
    2. 'ap' → logprob: -0.9900264739990234
    3. 'ar' → logprob: -1.6150264739990234
    4. 'ount' → logprob: -6.365026473999023
    5. 'a' → logprob: -6.740026473999023
    6. '_' → logprob: -6.740026473999023
    7. 'urrent' → logprob: -7.115026473999023
    8. '=' → logprob: -7.865026473999023
    9. 'ont' → logprob: -7.990026473999023
    10. '_ar' → logprob: -8.115026473999023

Token 20: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.1972411870956421
    2. ' =' → logprob: -1.822241187095642
    3. '=' → logprob: -4.447241306304932
    4. ' _' → logprob: -6.197241306304932
    5. '<|end|>' → logprob: -6.822241306304932
    6. '_space' → logprob: -7.322241306304932
    7. '_=' → logprob: -7.322241306304932
    8. '_in' → logprob: -8.572240829467773
    9. ' ' → logprob: -8.822240829467773
    10. '```' → logprob: -9.322240829467773

Token 21: ' m' (ID: 284)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.15289799869060516
    2. ' cars' → logprob: -2.777898073196411
    3. ' m' → logprob: -3.277898073196411
    4. '0' → logprob: -4.152897834777832
    5. 'cars' → logprob: -4.277897834777832
    6. ' n' → logprob: -4.527897834777832
    7. ' max' → logprob: -7.277897834777832
    8. 'n' → logprob: -8.027897834777832
    9. 'm' → logprob: -8.027897834777832
    10. 'max' → logprob: -9.902897834777832

Token 22: '
' (ID: 198)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.7737358212471008
    2. '
' → logprob: -1.523735761642456
    3. '+' → logprob: -1.648735761642456
    4. '<|end|>' → logprob: -3.148735761642456
    5. 'for' → logprob: -3.648735761642456
    6. '\' → logprob: -4.898736000061035
    7. '```' → logprob: -4.898736000061035
    8. 'while' → logprob: -5.148736000061035
    9. ' ' → logprob: -5.148736000061035
    10. ' for' → logprob: -5.398736000061035

Token 23: 'error' (ID: 1544)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.5372868776321411
    2. '
' → logprob: -0.9122868776321411
    3. 'for' → logprob: -5.412286758422852
    4. ' 
' → logprob: -5.787286758422852
    5. '\' → logprob: -6.412286758422852
    6. ' for' → logprob: -6.662286758422852
    7. '
' → logprob: -7.162286758422852
    8. '```' → logprob: -7.162286758422852
    9. 'n' → logprob: -7.537286758422852
    10. '+' → logprob: -7.912286758422852

Token 24: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.7164303660392761
    2. ' =' → logprob: -0.9664303660392761
    3. ' ' → logprob: -2.966430425643921
    4. '=' → logprob: -3.216430425643921
    5. ':' → logprob: -4.591430187225342
    6. '[' → logprob: -4.841430187225342
    7. ')' → logprob: -5.466430187225342
    8. '[:]' → logprob: -5.716430187225342
    9. '```' → logprob: -5.966430187225342
    10. '.' → logprob: -5.966430187225342

Token 25: ' False' (ID: 7983)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6246156096458435
    2. ' False' → logprob: -1.1246156692504883
    3. '0' → logprob: -2.4996156692504883
    4. 'False' → logprob: -2.9996156692504883
    5. '"' → logprob: -5.374615669250488
    6. ' True' → logprob: -6.874615669250488
    7. ' "' → logprob: -7.124615669250488
    8. ''' → logprob: -7.749615669250488
    9. ' '' → logprob: -7.999615669250488
    10. ' false' → logprob: -9.624615669250488

Token 26: '

' (ID: 279)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.026435917243361473
    2. '
' → logprob: -4.526435852050781
    3. '\' → logprob: -5.526435852050781
    4. 'for' → logprob: -5.651435852050781
    5. '```' → logprob: -5.776435852050781
    6. ' 
' → logprob: -6.276435852050781
    7. ' for' → logprob: -7.026435852050781
    8. '' → logprob: -7.401435852050781
    9. 'while' → logprob: -7.901435852050781
    10. ' while' → logprob: -8.026435852050781

Token 27: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.004883857909590006
    2. 'while' → logprob: -5.504883766174316
    3. ' for' → logprob: -7.629883766174316
    4. '
' → logprob: -8.379883766174316
    5. '```' → logprob: -9.629883766174316
    6. '\n' → logprob: -11.129883766174316
    7. ' while' → logprob: -12.754883766174316
    8. 'if' → logprob: -13.129883766174316
    9. 'i' → logprob: -13.379883766174316
    10. 'n' → logprob: -13.879883766174316

Token 28: ' _' (ID: 1175)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.002517753979191184
    2. ' i' → logprob: -6.1275177001953125
    3. '  ' → logprob: -8.377517700195312
    4. ' n' → logprob: -10.002517700195312
    5. ' ‌' → logprob: -10.377517700195312
    6. ' _' → logprob: -11.002517700195312
    7. ' car' → logprob: -12.377517700195312
    8. '_' → logprob: -13.877517700195312
    9. ' ' → logprob: -14.127517700195312
    10. ' )' → logprob: -14.252517700195312

Token 29: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.2559107840061188
    2. ' ' → logprob: -1.5059107542037964
    3. 'in' → logprob: -5.630910873413086
    4. ' i' → logprob: -8.880910873413086
    5. '  ' → logprob: -9.380910873413086
    6. '<|end|>' → logprob: -10.130910873413086
    7. ' ```' → logprob: -10.880910873413086
    8. ' ,' → logprob: -11.005910873413086
    9. '_' → logprob: -11.130910873413086
    10. ' n' → logprob: -11.505910873413086

Token 30: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.014173506759107113
    2. 'range' → logprob: -4.26417350769043
    3. ' ' → logprob: -12.38917350769043
    4. '	range' → logprob: -13.38917350769043
    5. ' ran' → logprob: -13.76417350769043
    6. '(range' → logprob: -14.51417350769043
    7. ' xrange' → logprob: -14.76417350769043
    8. ' rang' → logprob: -14.76417350769043
    9. 'rang' → logprob: -14.88917350769043
    10. ' r' → logprob: -15.26417350769043

Token 31: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.2901453971862793
    2. '(' → logprob: -1.5401453971862793
    3. ' (' → logprob: -3.2901453971862793
    4. ' n' → logprob: -9.040145874023438
    5. '(range' → logprob: -9.165145874023438
    6. ' range' → logprob: -12.290145874023438
    7. '(m' → logprob: -12.290145874023438
    8. '(int' → logprob: -12.415145874023438
    9. '(
' → logprob: -12.665145874023438
    10. ' ' → logprob: -13.040145874023438

Token 32: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.31734636425971985
    2. ')' → logprob: -1.3173463344573975
    3. ' )' → logprob: -6.192346572875977
    4. ':' → logprob: -6.942346572875977
    5. ' ):' → logprob: -6.942346572875977
    6. '):
' → logprob: -10.067346572875977
    7. '+' → logprob: -11.442346572875977
    8. '>' → logprob: -11.692346572875977
    9. ')>' → logprob: -11.817346572875977
    10. ',' → logprob: -12.317346572875977

Token 33: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.10168720036745071
    2. ' car' → logprob: -3.22668719291687
    3. ' cars' → logprob: -4.476687431335449
    4. ' input' → logprob: -4.476687431335449
    5. ' s' → logprob: -4.851687431335449
    6. ' space' → logprob: -5.601687431335449
    7. '_' → logprob: -5.976687431335449
    8. '   ' → logprob: -6.101687431335449
    9. '    ' → logprob: -6.351687431335449
    10. ' ,' → logprob: -6.601687431335449

Token 34: ' entered' (ID: 18375)
  Prédit: ' cars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' cars' → logprob: -1.195888638496399
    2. ' car' → logprob: -1.570888638496399
    3. ' direction' → logprob: -1.695888638496399
    4. ' action' → logprob: -1.945888638496399
    5. ' line' → logprob: -2.3208885192871094
    6. ' s' → logprob: -4.320888519287109
    7. ' step' → logprob: -4.695888519287109
    8. ' space' → logprob: -4.695888519287109
    9. ' traffic' → logprob: -4.820888519287109
    10. ' event' → logprob: -5.445888519287109

Token 35: ',' (ID: 11)
  Prédit: '_c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_c' → logprob: -0.3327349126338959
    2. ' =' → logprob: -1.9577349424362183
    3. '_' → logprob: -2.4577348232269287
    4. ',' → logprob: -3.4577348232269287
    5. '_or' → logprob: -4.207735061645508
    6. '_car' → logprob: -5.832735061645508
    7. '_count' → logprob: -6.332735061645508
    8. '=' → logprob: -6.582735061645508
    9. ' ' → logprob: -7.082735061645508
    10. ')' → logprob: -7.332735061645508

Token 36: ' exited' (ID: 121635)
  Prédit: ' exited'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' exited' → logprob: -0.12686730921268463
    2. ' left' → logprob: -2.2518672943115234
    3. ' ex' → logprob: -5.001867294311523
    4. 'ex' → logprob: -5.501867294311523
    5. 'left' → logprob: -6.626867294311523
    6. ' departed' → logprob: -7.501867294311523
    7. ' ' → logprob: -7.751867294311523
    8. 'Exited' → logprob: -9.376867294311523
    9. ' _' → logprob: -9.501867294311523
    10. ' exiting' → logprob: -9.626867294311523

Token 37: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.005938159301877022
    2. '=' → logprob: -5.1309380531311035
    3. ' ' → logprob: -12.255938529968262
    4. ',' → logprob: -13.380938529968262
    5. ')' → logprob: -13.630938529968262
    6. '   ' → logprob: -14.755938529968262
    7. '  ' → logprob: -14.880938529968262
    8. '    ' → logprob: -15.130938529968262
    9. '_' → logprob: -15.255938529968262
    10. '<|end|>' → logprob: -15.755938529968262

Token 38: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.012685162015259266
    2. 'map' → logprob: -4.387685298919678
    3. ' input' → logprob: -9.51268482208252
    4. ' [' → logprob: -10.01268482208252
    5. ' list' → logprob: -10.26268482208252
    6. '[' → logprob: -11.76268482208252
    7. 'input' → logprob: -12.01268482208252
    8. '(map' → logprob: -13.01268482208252
    9. 'list' → logprob: -13.38768482208252
    10. ' tuple' → logprob: -13.76268482208252

Token 39: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.026978760957717896
    2. '(' → logprob: -3.9019787311553955
    3. '(lambda' → logprob: -5.276978969573975
    4. '(str' → logprob: -7.526978969573975
    5. '(input' → logprob: -7.901978969573975
    6. '<|end|>' → logprob: -8.651978492736816
    7. '<int' → logprob: -9.026978492736816
    8. 'int' → logprob: -10.276978492736816
    9. '[int' → logprob: -10.276978492736816
    10. '()' → logprob: -12.151978492736816

Token 40: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.758791446685791
    2. ',input' → logprob: -1.383791446685791
    3. '(input' → logprob: -1.508791446685791
    4. ')' → logprob: -3.133791446685791
    5. '(' → logprob: -4.508791446685791
    6. 'input' → logprob: -5.508791446685791
    7. ' ,' → logprob: -7.133791446685791
    8. '(),' → logprob: -9.133790969848633
    9. ' input' → logprob: -9.258790969848633
    10. ',)' → logprob: -10.008790969848633

Token 41: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.03808189183473587
    2. 'input' → logprob: -3.2880818843841553
    3. ')' → logprob: -10.663082122802734
    4. ' )' → logprob: -11.163082122802734
    5. '(input' → logprob: -13.913082122802734
    6. ' ' → logprob: -13.913082122802734
    7. '=input' → logprob: -14.663082122802734
    8. ',input' → logprob: -15.788082122802734
    9. '[input' → logprob: -16.788082122802734
    10. ' list' → logprob: -16.913082122802734

Token 42: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.00030614540446549654
    2. '()' → logprob: -8.125306129455566
    3. '())' → logprob: -11.875306129455566
    4. ' ().' → logprob: -13.125306129455566
    5. '(' → logprob: -14.750306129455566
    6. ')' → logprob: -15.000306129455566
    7. '()))' → logprob: -15.875306129455566
    8. '()
' → logprob: -15.875306129455566
    9. '()

' → logprob: -17.000307083129883
    10. '()`' → logprob: -17.250307083129883

Token 43: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0002690840628929436
    2. 'strip' → logprob: -8.250268936157227
    3. 'rstrip' → logprob: -12.375268936157227
    4. ' split' → logprob: -12.750268936157227
    5. ')' → logprob: -15.125268936157227
    6. '(split' → logprob: -15.250268936157227
    7. 'spl' → logprob: -17.000268936157227
    8. ' ' → logprob: -17.000268936157227
    9. 's' → logprob: -18.250268936157227
    10. 'plit' → logprob: -19.125268936157227

Token 44: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.11107728630304337
    2. ')' → logprob: -3.111077308654785
    3. '()))' → logprob: -3.486077308654785
    4. '))' → logprob: -3.861077308654785
    5. '()' → logprob: -4.736077308654785
    6. '())
' → logprob: -9.736077308654785
    7. '(' → logprob: -10.111077308654785
    8. '('' → logprob: -11.361077308654785
    9. '()))
' → logprob: -11.736077308654785
    10. '(),' → logprob: -12.736077308654785

Token 45: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.30286625027656555
    2. '<|end|>' → logprob: -2.427866220474243
    3. '    
' → logprob: -2.802866220474243
    4. '   ' → logprob: -3.802866220474243
    5. '  
' → logprob: -4.177866458892822
    6. ' 
' → logprob: -4.302866458892822
    7. ')' → logprob: -4.427866458892822
    8. '   
' → logprob: -4.427866458892822
    9. '```' → logprob: -4.677866458892822
    10. 'cars' → logprob: -5.177866458892822

Token 46: ' cars' (ID: 13653)
  Prédit: ' cars'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cars' → logprob: -0.5703367590904236
    2. ' 
' → logprob: -1.1953368186950684
    3. 'cars' (adapté à ' cars') → logprob: -2.1953368186950684
    4. '
' → logprob: -5.070336818695068
    5. '<|end|>' → logprob: -5.320336818695068
    6. '    
' → logprob: -5.820336818695068
    7. '```' → logprob: -6.820336818695068
    8. ' car' → logprob: -6.820336818695068
    9. 'car' → logprob: -7.320336818695068
    10. '     
' → logprob: -7.570336818695068

Token 47: '_in' (ID: 2267)
  Prédit: '_in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_in' → logprob: -0.02334587648510933
    2. '_' → logprob: -3.773345947265625
    3. ' +=' → logprob: -10.148345947265625
    4. 'in' → logprob: -11.773345947265625
    5. '=' → logprob: -12.023345947265625
    6. ' =' → logprob: -12.148345947265625
    7. ' _' → logprob: -12.148345947265625
    8. 'In' → logprob: -12.398345947265625
    9. '_IN' → logprob: -12.523345947265625
    10. '   ' → logprob: -12.648345947265625

Token 48: '_t' (ID: 838)
  Prédit: '_t'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_t' → logprob: -0.0004049322451464832
    2. '_' → logprob: -8.625405311584473
    3. ' _' → logprob: -9.000405311584473
    4. '_in' → logprob: -9.250405311584473
    5. '_c' → logprob: -14.125405311584473
    6. '_s' → logprob: -14.125405311584473
    7. 't' → logprob: -14.500405311584473
    8. '```' → logprob: -14.500405311584473
    9. '_the' → logprob: -14.750405311584473
    10. ' ' → logprob: -14.875405311584473

Token 49: 'unnel' (ID: 24757)
  Prédit: 'unnel'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'unnel' → logprob: -0.04400286450982094
    2. '_' → logprob: -3.9190027713775635
    3. 'un' → logprob: -4.919003009796143
    4. 'el' → logprob: -5.294003009796143
    5. 'nel' → logprob: -5.669003009796143
    6. '```' → logprob: -6.419003009796143
    7. '=' → logprob: -7.544003009796143
    8. '+' → logprob: -7.669003009796143
    9. '   ' → logprob: -7.794003009796143
    10. '__' → logprob: -7.794003009796143

Token 50: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.03865469992160797
    2. ' -=' → logprob: -3.5386548042297363
    3. '+=' → logprob: -4.913654804229736
    4. ' =' → logprob: -7.413654804229736
    5. '+' → logprob: -7.788654804229736
    6. '=' → logprob: -8.538654327392578
    7. ' +' → logprob: -9.288654327392578
    8. '<|end|>' → logprob: -9.788654327392578
    9. '    ' → logprob: -10.288654327392578
    10. '   ' → logprob: -10.413654327392578

Token 51: ' entered' (ID: 18375)
  Prédit: 'entered'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'entered' → logprob: -0.4742179811000824
    2. ' entered' → logprob: -0.9742180109024048
    3. 'enter' → logprob: -9.474218368530273
    4. '+' → logprob: -11.099218368530273
    5. 'ent' → logprob: -11.349218368530273
    6. ' +' → logprob: -11.599218368530273
    7. ' enter' → logprob: -11.974218368530273
    8. '   ' → logprob: -12.224218368530273
    9. ' ' → logprob: -12.349218368530273
    10. '-enter' → logprob: -12.849218368530273

Token 52: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.2151198834180832
    2. '-' → logprob: -1.7151198387145996
    3. '<|end|>' → logprob: -4.3401198387146
    4. '-ex' → logprob: -8.715120315551758
    5. '<|end|>' → logprob: -8.840120315551758
    6. ' ' → logprob: -9.465120315551758
    7. '   ' → logprob: -10.090120315551758
    8. ')' → logprob: -10.590120315551758
    9. '+' → logprob: -10.590120315551758
    10. ' ' → logprob: -10.965120315551758

Token 53: ' exited' (ID: 121635)
  Prédit: 'ex'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ex' → logprob: -0.029864342883229256
    2. ' exited' → logprob: -3.5298643112182617
    3. 'exit' → logprob: -9.904864311218262
    4. 'Exited' → logprob: -10.279864311218262
    5. ' ex' → logprob: -11.029864311218262
    6. '   ' → logprob: -12.529864311218262
    7. ' ' → logprob: -12.779864311218262
    8. '	ex' → logprob: -13.654864311218262
    9. '```' → logprob: -14.279864311218262
    10. '  ' → logprob: -14.529864311218262

Token 54: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0904998779296875
    2. '
' → logprob: -1.2154998779296875
    3. '<|end|>' → logprob: -1.3404998779296875
    4. '```' → logprob: -3.3404998779296875
    5. ' if' → logprob: -4.0904998779296875
    6. ' 
' → logprob: -4.0904998779296875
    7. '    
' → logprob: -4.4654998779296875
    8. '\n' → logprob: -4.5904998779296875
    9. '  
' → logprob: -5.2154998779296875
    10. '<|end|>' → logprob: -5.9654998779296875

Token 55: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2617722451686859
    2. '
' → logprob: -1.8867722749710083
    3. '```' → logprob: -3.3867721557617188
    4. '<|end|>' → logprob: -4.261772155761719
    5. ' if' → logprob: -4.761772155761719
    6. '    
' → logprob: -4.886772155761719
    7. '\n' → logprob: -5.011772155761719
    8. 'if' → logprob: -5.761772155761719
    9. '  
' → logprob: -6.011772155761719
    10. '   
' → logprob: -7.011772155761719

Token 56: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.5961912274360657
    2. '   ' → logprob: -0.8461912274360657
    3. 'if' (adapté à ' if') → logprob: -3.971191167831421
    4. '```' → logprob: -6.97119140625
    5. '    
' → logprob: -9.84619140625
    6. '    ' → logprob: -9.84619140625
    7. ' ' → logprob: -9.97119140625
    8. '  ' → logprob: -10.72119140625
    9. ' 
' → logprob: -10.84619140625
    10. '<|end|>' → logprob: -10.97119140625

Token 57: ' cars' (ID: 13653)
  Prédit: ' cars'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cars' → logprob: -0.00019543453527148813
    2. 'cars' → logprob: -8.625195503234863
    3. ' car' → logprob: -12.125195503234863
    4. ' ' → logprob: -12.250195503234863
    5. ' not' → logprob: -12.875195503234863
    6. ' error' → logprob: -13.375195503234863
    7. ' ' → logprob: -13.750195503234863
    8. ' errors' → logprob: -15.625195503234863
    9. ' cats' → logprob: -16.625194549560547
    10. ' c' → logprob: -17.375194549560547

Token 58: '_in' (ID: 2267)
  Prédit: '_in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_in' → logprob: -0.0002146226615877822
    2. '_' → logprob: -8.625214576721191
    3. '>' → logprob: -11.750214576721191
    4. '<' → logprob: -11.875214576721191
    5. 'n' → logprob: -11.875214576721191
    6. ' _' → logprob: -12.000214576721191
    7. '._' → logprob: -13.500214576721191
    8. '_i' → logprob: -14.000214576721191
    9. 'in' → logprob: -14.500214576721191
    10. ' >' → logprob: -14.875214576721191

Token 59: '_t' (ID: 838)
  Prédit: '_t'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_t' → logprob: -0.000736846646759659
    2. 't' → logprob: -7.375736713409424
    3. 'error' → logprob: -9.750737190246582
    4. '_c' → logprob: -11.125737190246582
    5. '_' → logprob: -11.250737190246582
    6. ' tunnel' → logprob: -11.750737190246582
    7. 'cars' → logprob: -11.875737190246582
    8. 'tun' → logprob: -13.500737190246582
    9. '_error' → logprob: -13.750737190246582
    10. 'unnel' → logprob: -14.000737190246582

Token 60: 'unnel' (ID: 24757)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>' → logprob: -0.10829596221446991
    2. '_' → logprob: -3.6082959175109863
    3. 'cars' → logprob: -3.7332959175109863
    4. '_error' → logprob: -4.483295917510986
    5. '```' → logprob: -4.983295917510986
    6. 'u' → logprob: -5.608295917510986
    7. '_in' → logprob: -5.608295917510986
    8. '>=' → logprob: -5.733295917510986
    9. 'unnel' → logprob: -6.108295917510986
    10. ''>' → logprob: -6.483295917510986

Token 61: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.016963383182883263
    2. '<' → logprob: -4.141963481903076
    3. ' >' → logprob: -7.016963481903076
    4. ' ' → logprob: -11.141963005065918
    5. '>' → logprob: -11.266963005065918
    6. '<|end|>' → logprob: -13.266963005065918
    7. '   ' → logprob: -14.016963005065918
    8. '[' → logprob: -15.141963005065918
    9. '  ' → logprob: -15.266963005065918
    10. ' <",' → logprob: -15.641963005065918

Token 62: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0006277294596657157
    2. ' ' → logprob: -7.375627517700195
    3. '=' → logprob: -14.375627517700195
    4. '```' → logprob: -15.875627517700195
    5. ' ' → logprob: -16.000627517700195
    6. '۰' → logprob: -16.500627517700195
    7. '   ' → logprob: -16.938127517700195
    8. ')' → logprob: -17.313127517700195
    9. '1' → logprob: -18.000627517700195
    10. '<|end|>' → logprob: -18.063127517700195

Token 63: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -2.935296834039036e-06
    2. ' ' → logprob: -12.87500286102295
    3. '۰' → logprob: -16.125003814697266
    4. '```' → logprob: -16.500003814697266
    5. '=' → logprob: -17.000003814697266
    6. '<|end|>' → logprob: -17.750003814697266
    7. '1' → logprob: -18.000003814697266
    8. '-' → logprob: -18.000003814697266
    9. '   ' → logprob: -18.250003814697266
    10. 'zero' → logprob: -18.312503814697266

Token 64: ':
' (ID: 734)
  Prédit: ' or'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.01914309710264206
    2. ':' → logprob: -4.019143104553223
    3. '   ' → logprob: -7.519143104553223
    4. 'or' → logprob: -8.144143104553223
    5. ' ' → logprob: -9.769143104553223
    6. '	or' → logprob: -10.394143104553223
    7. ' :' → logprob: -10.769143104553223
    8. '<|end|>' → logprob: -11.019143104553223
    9. '    ' → logprob: -11.644143104553223
    10. ':
' → logprob: -12.019143104553223

Token 65: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.443438857793808
    2. ' error' → logprob: -1.1934388875961304
    3. 'error' → logprob: -2.943438768386841
    4. '       ' → logprob: -6.56843900680542
    5. '    ' → logprob: -7.69343900680542
    6. '```' → logprob: -8.943438529968262
    7. '	error' → logprob: -9.318438529968262
    8. '    
' → logprob: -9.943438529968262
    9. ' ' → logprob: -10.068438529968262
    10. '  ' → logprob: -10.443438529968262

Token 66: ' error' (ID: 2915)
  Prédit: ' error'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' error' → logprob: -0.03038867376744747
    2. 'error' (adapté à ' error') → logprob: -3.530388593673706
    3. '   ' → logprob: -7.405388832092285
    4. '```' → logprob: -11.405388832092285
    5. ' break' → logprob: -11.780388832092285
    6. '	error' → logprob: -12.155388832092285
    7. 'break' → logprob: -13.530388832092285
    8. '       ' → logprob: -14.280388832092285
    9. '    ' → logprob: -14.405388832092285
    10. ' ' → logprob: -14.405388832092285

Token 67: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0003001888981088996
    2. '=' → logprob: -8.125300407409668
    3. 's' → logprob: -13.250300407409668
    4. '=True' → logprob: -13.875300407409668
    5. ' ' → logprob: -14.125300407409668
    6. ' |=' → logprob: -15.000300407409668
    7. '_' → logprob: -15.875300407409668
    8. ' ' → logprob: -16.62529945373535
    9. 'True' → logprob: -17.12529945373535
    10. ')' → logprob: -17.25029945373535

Token 68: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.474077433347702
    2. ' True' → logprob: -0.9740774631500244
    3. '=True' → logprob: -14.974077224731445
    4. '(True' → logprob: -16.849077224731445
    5. ' Tru' → logprob: -17.349077224731445
    6. 'Tr' → logprob: -18.849077224731445
    7. ' ' → logprob: -19.099077224731445
    8. 'T' → logprob: -19.724077224731445
    9. '1' → logprob: -20.224077224731445
    10. '.True' → logprob: -20.599077224731445

Token 69: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05783328786492348
    2. '       ' → logprob: -2.932833194732666
    3. '<|end|>' → logprob: -6.307833194732666
    4. '    
' → logprob: -7.057833194732666
    5. '\n' → logprob: -9.682833671569824
    6. '
' → logprob: -10.182833671569824
    7. '    ' → logprob: -10.182833671569824
    8. '        
' → logprob: -10.307833671569824
    9. ')' → logprob: -11.182833671569824
    10. '           ' → logprob: -11.432833671569824

Token 70: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0013697614194825292
    2. '       ' → logprob: -7.001369953155518
    3. '    
' → logprob: -9.12636947631836
    4. 'elif' → logprob: -9.25136947631836
    5. '<|end|>' → logprob: -9.37636947631836
    6. '    ' → logprob: -9.75136947631836
    7. ' elif' → logprob: -10.00136947631836
    8. '  ' → logprob: -11.12636947631836
    9. '```' → logprob: -11.25136947631836
    10. ' ' → logprob: -11.50136947631836

Token 71: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.034102510660886765
    2. ' if' → logprob: -4.284102439880371
    3. ' elif' → logprob: -4.784102439880371
    4. '<|end|>' → logprob: -5.284102439880371
    5. 'elif' → logprob: -6.409102439880371
    6. ' ' → logprob: -6.659102439880371
    7. '    ' → logprob: -7.159102439880371
    8. '  ' → logprob: -7.284102439880371
    9. ' or' → logprob: -7.784102439880371
    10. ' and' → logprob: -8.034102439880371

Token 72: ' cars' (ID: 13653)
  Prédit: ' cars'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cars' → logprob: -0.0010993726318702102
    2. 'cars' → logprob: -7.001099586486816
    3. ' ' → logprob: -9.376099586486816
    4. ' max' → logprob: -9.626099586486816
    5. ' ' → logprob: -11.501099586486816
    6. ' error' → logprob: -11.626099586486816
    7. ' car' → logprob: -11.876099586486816
    8. ' not' → logprob: -12.001099586486816
    9. '   ' → logprob: -14.001099586486816
    10. 'max' → logprob: -14.251099586486816

Token 73: '_in' (ID: 2267)
  Prédit: '_in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_in' → logprob: -5.466968650580384e-05
    2. '_' → logprob: -10.500054359436035
    3. '>' → logprob: -11.250054359436035
    4. 'n' → logprob: -11.750054359436035
    5. 'in' → logprob: -13.500054359436035
    6. '_t' → logprob: -13.875054359436035
    7. 'nt' → logprob: -14.250054359436035
    8. '_out' → logprob: -14.500054359436035
    9. '_int' → logprob: -15.125054359436035
    10. '_on' → logprob: -15.125054359436035

Token 74: '_t' (ID: 838)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' → logprob: -0.6983404755592346
    2. '_t' → logprob: -0.6983404755592346
    3. ' tunnel' → logprob: -6.19834041595459
    4. 'unnel' → logprob: -6.57334041595459
    5. 'tun' → logprob: -6.82334041595459
    6. 'Tunnel' → logprob: -8.44834041595459
    7. ' тун' → logprob: -9.07334041595459
    8. 'a' → logprob: -9.07334041595459
    9. ' tún' → logprob: -10.19834041595459
    10. '```' → logprob: -10.94834041595459

Token 75: 'unnel' (ID: 24757)
  Prédit: 'unnel'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'unnel' → logprob: -0.13575279712677002
    2. 'un' → logprob: -2.1357526779174805
    3. 'el' → logprob: -6.3857526779174805
    4. 'nel' → logprob: -6.5107526779174805
    5. '>' → logprob: -6.6357526779174805
    6. 'max' → logprob: -7.2607526779174805
    7. 'u' → logprob: -7.5107526779174805
    8. 'unnels' → logprob: -7.8857526779174805
    9. 'n' → logprob: -8.13575267791748
    10. '```' → logprob: -8.38575267791748

Token 76: ' >' (ID: 1424)
  Prédit: ' >'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.00196110550314188
    2. '>' → logprob: -6.2519612312316895
    3. ' ' → logprob: -10.501960754394531
    4. '<|end|>' → logprob: -13.251960754394531
    5. '  ' → logprob: -13.876960754394531
    6. ' ' → logprob: -14.001960754394531
    7. ' />' → logprob: -15.251960754394531
    8. '   ' → logprob: -15.376960754394531
    9. '<|end|>' → logprob: -15.626960754394531
    10. ')' → logprob: -15.876960754394531

Token 77: ' max' (ID: 2999)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.18132488429546356
    2. ' max' → logprob: -1.80632483959198
    3. 'm' → logprob: -6.6813249588012695
    4. ' m' → logprob: -8.05632495880127
    5. ' ' → logprob: -12.80632495880127
    6. 'cars' → logprob: -13.80632495880127
    7. '	max' → logprob: -14.05632495880127
    8. ' cars' → logprob: -14.55632495880127
    9. ' maximum' → logprob: -14.86882495880127
    10. 'maximum' → logprob: -14.99382495880127

Token 78: '_c' (ID: 1303)
  Prédit: '_c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_c' → logprob: -1.688212614681106e-05
    2. '_' → logprob: -11.000017166137695
    3. 'cars' → logprob: -16.625017166137695
    4. ' _' → logprob: -17.000017166137695
    5. '_max' → logprob: -17.500017166137695
    6. 'Cars' → logprob: -17.750017166137695
    7. '_)' → logprob: -18.375017166137695
    8. ')' → logprob: -18.500017166137695
    9. ' cars' → logprob: -18.750017166137695
    10. 's' → logprob: -18.875017166137695

Token 79: 'ars' (ID: 1904)
  Prédit: 'ars'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ars' → logprob: -0.0005096645909361541
    2. 'ar' → logprob: -8.250509262084961
    3. 'cars' → logprob: -8.375509262084961
    4. '_c' → logprob: -12.875509262084961
    5. '```' → logprob: -13.000509262084961
    6. '_' → logprob: -13.375509262084961
    7. '   ' → logprob: -13.625509262084961
    8. 'a' → logprob: -13.750509262084961
    9. 'rs' → logprob: -13.875509262084961
    10. 'arts' → logprob: -14.063009262084961

Token 80: ':
' (ID: 734)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5913570523262024
    2. ':' → logprob: -0.9663570523262024
    3. '=' → logprob: -2.8413569927215576
    4. ' :' → logprob: -5.341357231140137
    5. '<|end|>' → logprob: -6.091357231140137
    6. ',' → logprob: -8.966357231140137
    7. ' or' → logprob: -9.591357231140137
    8. ' ' → logprob: -9.841357231140137
    9. '<|end|>' → logprob: -9.966357231140137
    10. '):' → logprob: -10.091357231140137

Token 81: '       ' (ID: 309)
  Prédit: ' cars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cars' → logprob: -0.11336621642112732
    2. ' max' → logprob: -2.48836612701416
    3. 'cars' → logprob: -4.48836612701416
    4. '       ' → logprob: -4.73836612701416
    5. 'max' → logprob: -5.73836612701416
    6. '   ' → logprob: -8.11336612701416
    7. ' ' → logprob: -8.48836612701416
    8. ' m' → logprob: -9.48836612701416
    9. '    ' → logprob: -9.48836612701416
    10. 'm' → logprob: -9.98836612701416

Token 82: ' max' (ID: 2999)
  Prédit: ' max'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' max' → logprob: -0.3136976957321167
    2. 'max' (adapté à ' max') → logprob: -1.3136976957321167
    3. ' cars' → logprob: -9.063697814941406
    4. '   ' → logprob: -9.188697814941406
    5. '       ' → logprob: -9.438697814941406
    6. 'cars' → logprob: -9.563697814941406
    7. '	max' → logprob: -10.063697814941406
    8. '_max' → logprob: -12.438697814941406
    9. 'car' → logprob: -12.688697814941406
    10. '[max' → logprob: -12.938697814941406

Token 83: '_c' (ID: 1303)
  Prédit: '_c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_c' → logprob: -4.246537173457909e-06
    2. '_' → logprob: -12.500003814697266
    3. 'cars' → logprob: -15.625003814697266
    4. '_car' → logprob: -15.875003814697266
    5. ' _' → logprob: -17.375003814697266
    6. '=_' → logprob: -17.625003814697266
    7. '=' → logprob: -17.625003814697266
    8. 's' → logprob: -18.375003814697266
    9. '```' → logprob: -18.375003814697266
    10. 'Cars' → logprob: -18.625003814697266

Token 84: 'ars' (ID: 1904)
  Prédit: 'ars'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ars' → logprob: -0.004528503865003586
    2. 'ar' → logprob: -6.129528522491455
    3. '_c' → logprob: -6.629528522491455
    4. 'cars' → logprob: -7.004528522491455
    5. '_' → logprob: -9.379528045654297
    6. 'a' → logprob: -11.754528045654297
    7. '   ' → logprob: -13.129528045654297
    8. ' cars' → logprob: -13.629528045654297
    9. '```' → logprob: -13.629528045654297
    10. 's' → logprob: -13.629528045654297

Token 85: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.007606389466673136
    2. '=' → logprob: -4.882606506347656
    3. ' ' → logprob: -16.007606506347656
    4. ' +=' → logprob: -16.632606506347656
    5. '=max' → logprob: -18.257606506347656
    6. ' =
' → logprob: -19.132606506347656
    7. ' =)' → logprob: -19.132606506347656
    8. '=m' → logprob: -19.507606506347656
    9. '=cut' → logprob: -19.757606506347656
    10. '<|end|>' → logprob: -20.132606506347656

Token 86: ' cars' (ID: 13653)
  Prédit: ' cars'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cars' → logprob: -0.12693682312965393
    2. 'cars' → logprob: -2.126936912536621
    3. 'car' → logprob: -12.376936912536621
    4. ' ' → logprob: -13.001936912536621
    5. 'c' → logprob: -13.501936912536621
    6. '	c' → logprob: -15.126936912536621
    7. ' car' → logprob: -15.501936912536621
    8. 'Cars' → logprob: -15.751936912536621
    9. '   ' → logprob: -16.626935958862305
    10. 'cats' → logprob: -17.001935958862305

Token 87: '_in' (ID: 2267)
  Prédit: '_in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_in' → logprob: -0.31660160422325134
    2. 's' → logprob: -1.3166016340255737
    3. '_' → logprob: -5.816601753234863
    4. '_s' → logprob: -9.191601753234863
    5. 'cars' → logprob: -9.566601753234863
    6. 'in' → logprob: -9.941601753234863
    7. ' _' → logprob: -10.066601753234863
    8. 'n' → logprob: -10.441601753234863
    9. 'rs' → logprob: -11.191601753234863
    10. 'r' → logprob: -12.191601753234863

Token 88: '_t' (ID: 838)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' → logprob: -0.01305434200912714
    2. '_t' → logprob: -4.513054370880127
    3. 'unnel' → logprob: -7.013054370880127
    4. ' tunnel' → logprob: -7.138054370880127
    5. 'tun' → logprob: -9.138053894042969
    6. '_' → logprob: -9.888053894042969
    7. ' ' → logprob: -10.513053894042969
    8. 'Tunnel' → logprob: -11.138053894042969
    9. '   ' → logprob: -11.263053894042969
    10. '           ' → logprob: -11.638053894042969

Token 89: 'unnel' (ID: 24757)
  Prédit: 'unnel'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'unnel' → logprob: -0.09785681962966919
    2. 'un' → logprob: -2.4728567600250244
    3. 'u' → logprob: -5.3478569984436035
    4. 'el' → logprob: -6.3478569984436035
    5. 'nel' → logprob: -6.7228569984436035
    6. 'a' → logprob: -8.347856521606445
    7. 'unn' → logprob: -8.722856521606445
    8. 'n' → logprob: -8.722856521606445
    9. 'usel' → logprob: -8.972856521606445
    10. 'unnels' → logprob: -9.722856521606445

Token 90: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 91: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.13012197613716125
    2. ' if' → logprob: -2.755121946334839
    3. '<|end|>' → logprob: -3.630121946334839
    4. 'print' → logprob: -4.755122184753418
    5. ' ' → logprob: -5.130122184753418
    6. '\n' → logprob: -5.380122184753418
    7. ')' → logprob: -5.630122184753418
    8. '```' → logprob: -5.755122184753418
    9. '#' → logprob: -6.255122184753418
    10. '
' → logprob: -6.880122184753418

Token 92: ' error' (ID: 2915)
  Prédit: ' error'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' error' → logprob: -0.013252700679004192
    2. 'error' → logprob: -4.3882527351379395
    3. ' not' → logprob: -7.2632527351379395
    4. ' cars' → logprob: -10.763252258300781
    5. 'not' → logprob: -11.263252258300781
    6. ' ' → logprob: -12.763252258300781
    7. ' ' → logprob: -13.638252258300781
    8. ' erro' → logprob: -13.638252258300781
    9. '	error' → logprob: -14.388252258300781
    10. ' er' → logprob: -14.763252258300781

Token 93: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.010784282349050045
    2. ' :' → logprob: -4.635784149169922
    3. ':
' → logprob: -8.010784149169922
    4. ' or' → logprob: -8.010784149169922
    5. ' ==' → logprob: -8.010784149169922
    6. '==' → logprob: -11.135784149169922
    7. ' :
' → logprob: -11.260784149169922
    8. ' is' → logprob: -13.635784149169922
    9. 'or' → logprob: -13.635784149169922
    10. ' and' → logprob: -13.885784149169922

Token 94: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.2045087814331055
    2. 'print' → logprob: -1.4545087814331055
    3. '   ' → logprob: -1.5795087814331055
    4. ':
' → logprob: -1.7045087814331055
    5. ' print' → logprob: -2.5795087814331055
    6. '
' → logprob: -6.9545087814331055
    7. ' :
' → logprob: -7.7045087814331055
    8. ' or' → logprob: -8.329508781433105
    9. ' :' → logprob: -8.454508781433105
    10. '\n' → logprob: -8.579508781433105

Token 95: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.632756769657135
    2. 'print' (adapté à ' print') → logprob: -0.757756769657135
    3. '   ' → logprob: -9.132757186889648
    4. '
' → logprob: -10.757757186889648
    5. '\n' → logprob: -12.132757186889648
    6. '	print' → logprob: -12.257757186889648
    7. '    
' → logprob: -12.507757186889648
    8. '```' → logprob: -12.757757186889648
    9. ' 
' → logprob: -12.882757186889648
    10. '    ' → logprob: -13.257757186889648

Token 96: '(' (ID: 7)
  Prédit: '("'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.10377604514360428
    2. '(' → logprob: -2.353775978088379
    3. '('' → logprob: -5.853775978088379
    4. '(-' → logprob: -7.603775978088379
    5. '()' → logprob: -8.978775978088379
    6. '(False' → logprob: -10.728775978088379
    7. '("")' → logprob: -10.853775978088379
    8. '(True' → logprob: -11.728775978088379
    9. ' ("' → logprob: -12.228775978088379
    10. '("-' → logprob: -12.853775978088379

Token 97: '0' (ID: 15)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.2134530395269394
    2. '-' → logprob: -1.7134530544281006
    3. ''' → logprob: -5.2134528160095215
    4. '"W' → logprob: -6.7134528160095215
    5. '"No' → logprob: -7.3384528160095215
    6. '0' → logprob: -7.8384528160095215
    7. 'ERROR' → logprob: -7.8384528160095215
    8. 'Incorrect' → logprob: -8.33845329284668
    9. 'Wrong' → logprob: -8.33845329284668
    10. '"H' → logprob: -8.58845329284668

Token 98: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.2519630789756775
    2. ')
' → logprob: -1.5019631385803223
    3. ')
' → logprob: -11.251962661743164
    4. ' )' → logprob: -11.626962661743164
    5. ' )
' → logprob: -11.751962661743164
    6. 'else' → logprob: -13.126962661743164
    7. ')

' → logprob: -14.501962661743164
    8. '')' → logprob: -15.501962661743164
    9. '')
' → logprob: -15.876962661743164
    10. '0' → logprob: -16.001962661743164

Token 99: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.016125163063406944
    2. 'elif' → logprob: -4.141125202178955
    3. ' else' → logprob: -9.391124725341797
    4. '
' → logprob: -12.641124725341797
    5. 'el' → logprob: -13.266124725341797
    6. ' elif' → logprob: -14.266124725341797
    7. '```' → logprob: -15.016124725341797
    8. 'els' → logprob: -15.141124725341797
    9. '    
' → logprob: -15.266124725341797
    10. 'elses' → logprob: -15.891124725341797

Token 100: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.05667984485626221
    2. ':
' → logprob: -3.1816797256469727
    3. '   ' → logprob: -4.306679725646973
    4. ' :' → logprob: -9.931679725646973
    5. ' :
' → logprob: -10.181679725646973
    6. '       ' → logprob: -12.181679725646973
    7. 'print' → logprob: -12.431679725646973
    8. '  ' → logprob: -12.806679725646973
    9. ' print' → logprob: -13.431679725646973
    10. '    ' → logprob: -13.431679725646973

Token 101: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00603343453258276
    2. 'print' → logprob: -5.506033420562744
    3. ' print' → logprob: -6.256033420562744
    4. '       ' → logprob: -11.381033897399902
    5. '```' → logprob: -11.381033897399902
    6. '    
' → logprob: -13.381033897399902
    7. ' ' → logprob: -13.506033897399902
    8. '4' → logprob: -13.756033897399902
    9. '1' → logprob: -13.881033897399902
    10. '	print' → logprob: -14.006033897399902

Token 102: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.06495697051286697
    2. '   ' → logprob: -2.8149569034576416
    3. ' print' → logprob: -5.814957141876221
    4. '```' → logprob: -13.939956665039062
    5. ' ' → logprob: -14.439956665039062
    6. '	print' → logprob: -14.689956665039062
    7. '       ' → logprob: -16.064956665039062
    8. '.print' → logprob: -17.064956665039062
    9. '  ' → logprob: -17.064956665039062
    10. 'printf' → logprob: -17.189956665039062

Token 103: '(max' (ID: 17178)
  Prédit: '(max'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(max' → logprob: -0.01557617262005806
    2. '(' → logprob: -4.265576362609863
    3. 'max' → logprob: -6.765576362609863
    4. ' max' → logprob: -8.265576362609863
    5. ' (' → logprob: -13.765576362609863
    6. '(m' → logprob: -15.390576362609863
    7. '	max' → logprob: -16.765575408935547
    8. '('' → logprob: -16.890575408935547
    9. '()' → logprob: -17.015575408935547
    10. ',max' → logprob: -17.140575408935547

Token 104: '_c' (ID: 1303)
  Prédit: '_c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_c' → logprob: -1.0280383548888494e-06
    2. '_' → logprob: -13.875000953674316
    3. '_)' → logprob: -18.000001907348633
    4. '_car' → logprob: -18.250001907348633
    5. ')' → logprob: -18.625001907348633
    6. ')_' → logprob: -19.000001907348633
    7. '_a' → logprob: -20.250001907348633
    8. ' _' → logprob: -20.375001907348633
    9. '_n' → logprob: -22.125001907348633
    10. '_
' → logprob: -22.625001907348633

Token 105: 'ars' (ID: 1904)
  Prédit: 'ars'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ars' → logprob: -0.0013640470569953322
    2. 'ar' → logprob: -6.876364231109619
    3. 'cars' → logprob: -8.251363754272461
    4. '_c' → logprob: -10.751363754272461
    5. '_' → logprob: -11.126363754272461
    6. 'a' → logprob: -11.376363754272461
    7. 'aps' → logprob: -12.251363754272461
    8. 'as' → logprob: -13.126363754272461
    9. '```' → logprob: -13.376363754272461
    10. ' cars' → logprob: -13.376363754272461

Token 106: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.3856492842023727e-06
    2. ' )' → logprob: -13.875000953674316
    3. ')
' → logprob: -14.875000953674316
    4. '))' → logprob: -18.250001907348633
    5. ')`' → logprob: -18.250001907348633
    6. '`)' → logprob: -18.500001907348633
    7. '')' → logprob: -18.750001907348633
    8. ')#' → logprob: -19.125001907348633
    9. '）' → logprob: -19.375001907348633
    10. '```' → logprob: -20.250001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 104
Tokens correctement prédits (1ère position, stricte): 53
Tokens correctement prédits (1ère position, avec adaptation): 54
Tokens correctement prédits (top 10): 90
Précision stricte (1ère position): 50.96%
Précision adaptée (1ère position): 51.92%
Précision (top 10): 86.54%
================================================================================
