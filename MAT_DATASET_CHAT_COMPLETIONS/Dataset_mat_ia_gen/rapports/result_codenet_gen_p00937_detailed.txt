================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:06:41
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from collections import deque

# On modélise le problème comme un jeu à plusieurs étapes sur un graphe orienté.
# Chaque "état" est un cercle (noeud). Le mouvement possible en un tour est de 
# faire exactement k pas sur les arêtes, avec k ∈ {a,b,c}.
# On veut trouver le nombre minimum de tours pour garantir d'atteindre le but peu
# importe les choix adverses, ou détecter qu'il est impossible d'y parvenir.

def main():
    n, m, a, b, c = map(int, input().split())
    graph = [[] for _ in range(n+1)]
    
    for _ in range(m):
        u, v = map(int, input().split())
        graph[u].append(v)
    
    # On va créer des graphes dérivés représentant les transitions possibles
    # en un nombre donné de pas
    # Pour chaque longueur k dans {a,b,c}, on construit un graphe "k-step" où il y a une arête
    # entre u et v s'il existe un chemin de longueur k dans le graphe original.
    # Pour cela, on fait une recherche BFS allongée en k étapes à partir de chaque noeud.
    
    def build_k_step_graph(k):
        kstep_graph = [[] for _ in range(n+1)]
        for start in range(1, n+1):
            # BFS pour trouver les noeuds accessibles en exactement k étapes depuis start
            queue = deque()
            queue.append((start, 0))
            visited = [False]*(n+1)
            # Mais on doit distinguer les états selon la profondeur, donc on mémorise (node, step)
            visited_steps = [[False]*(k+1) for _ in range(n+1)]
            visited_steps[start][0] = True
            
            while queue:
                node, step = queue.popleft()
                if step == k:
                    # ajout d'une arête "k-step" de start à node
                    if node != start:  # éviter boucle inutile dans ce graphe (mais pas obligatoire)
                        kstep_graph[start].append(node)
                    continue
                for nxt in graph[node]:
                    if not visited_steps[nxt][step+1]:
                        visited_steps[nxt][step+1] = True
                        queue.append((nxt, step+1))
        return kstep_graph

    # Construction des trois graphes à 1, 2, ... pas etc.
    # Ici on a seulement trois longueurs a,b,c
    sets = [a,b,c]
    kstep_graphs = [build_k_step_graph(k) for k in sets]

    # Maintenant on modélise le jeu de façon inversée:
    # État du jeu : cercle courant où l'on se trouve au début d'un tour.
    # On veut minimiser le nb de tours pour atteindre le but n quel que soit le choix adverse.

    # On définira dp[node] = nombre minimum de tours nécessaires pour atteindre n depuis node,
    # si on peut forcer la victoire. Sinon, dp[node] = inf ou marqueur impossible

    INF = 10**9
    dp = [INF]*(n+1)
    dp[n] = 0  # On est déjà au but, donc 0 tours nécessaires

    # On utilise une approche de programmation dynamique par ordre inverse,
    # on met à jour une valeur pour un noeud s'il existe une stratégie pour lequel
    # pour tous les choix adverses (i.e. tous les kstep_graphs),
    # on peut aller vers un noeud avec dp < inf en une étape.

    # C'est un problème classique de résolution de jeu alterné :
    # On fixe dp[n] = 0, puis on boucle jusqu'à convergence.

    changed = True
    while changed:
        changed = False
        for node in range(1, n+1):
            if node == n: continue
            # On veut vérifier si on peut garantir finir
            # Cela signifie: pour T = 1 + max_{for adversary's choice k} min_{next nodes after k steps} dp[next]
            # En d'autres termes, on doit pouvoir pour chaque choix de k (a,b,c)
            # atteindre un noeud avec dp[next] fini, sinon l'adversaire choisira ce k
            # donc on doit considérer "max sur k des min dp des noeuds accessibles en k pas"
            # Pour gagner, ce max doit être fini => pour chaque k, on doit pouvoir aller en un noeud "bon"
            # en k pas.

            # Pour chaque k-step graph, on regarde tous les prochains noeuds accessibles en k pas:
            # si aucun noeud accessible n'a dp[next] < INF -> perdu pour ce k choice.

            max_min = -1  # max des min de dp[next] sur chaque choix k
            possible = True
            max_over_choices = -1

            for g in kstep_graphs:
                next_nodes = g[node]
                # Si pas d'arêtes, on perd (car on doit faire exactement k pas)
                if not next_nodes:
                    # Cela signifie qu'avec cette longueur, on est bloqué => adversaire peut forcer défaite
                    possible = False
                    break
                # Min dp[next] parmi next_nodes
                min_dp_next = INF
                for nxt in next_nodes:
                    if dp[nxt] < min_dp_next:
                        min_dp_next = dp[nxt]
                if min_dp_next == INF:
                    # Aucune ligne d'attaque gagnante pour ce choix k
                    possible = False
                    break
                # Sinon on garde max sur ces min dp[next]
                if min_dp_next > max_over_choices:
                    max_over_choices = min_dp_next
            
            if possible:
                # T = 1 + max_over_choices
                candidate = 1 + max_over_choices
                if candidate < dp[node]:
                    dp[node] = candidate
                    changed = True
            # sinon pas de victoire possible à partir de node
    
    # Résultat
    if dp[1] == INF:
        print("IMPOSSIBLE")
    else:
        print(dp[1])

if __name__ == "__main__":
    main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' collections' (ID: 22690)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' deque' (ID: 90347)
  Prédit: 'abc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'abc' → logprob: -0.9447221159934998
    2. 'default' → logprob: -1.3197221755981445
    3. 'deque' → logprob: -1.6947221755981445
    4. ' defaultdict' → logprob: -2.5697221755981445
    5. 'Counter' → logprob: -2.8197221755981445
    6. ' abc' → logprob: -4.4447221755981445
    7. ' Counter' → logprob: -5.4447221755981445
    8. 'named' → logprob: -5.5697221755981445
    9. ' deque' → logprob: -6.5697221755981445
    10. '```' → logprob: -6.6947221755981445

Token 4: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.02697448618710041
    2. '\' → logprob: -4.901974678039551
    3. '.' → logprob: -5.026974678039551
    4. '[' → logprob: -6.026974678039551
    5. '\(' → logprob: -6.401974678039551
    6. '\n' → logprob: -6.651974678039551
    7. 'newline' → logprob: -6.651974678039551
    8. '```' → logprob: -6.776974678039551
    9. 'import' → logprob: -6.901974678039551
    10. '(
' → logprob: -7.151974678039551

Token 5: '#' (ID: 2)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.028613658621907234
    2. '\' → logprob: -4.528613567352295
    3. '\n' → logprob: -5.403613567352295
    4. '\(' → logprob: -5.653613567352295
    5. 'a' → logprob: -6.278613567352295
    6. 'd' → logprob: -6.278613567352295
    7. '[' → logprob: -6.653613567352295
    8. 'newline' → logprob: -6.903613567352295
    9. 'import' → logprob: -7.403613567352295
    10. '.' → logprob: -7.903613567352295

Token 6: ' On' (ID: 2160)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'd' → logprob: -1.228877067565918
    2. ' d' → logprob: -1.728877067565918
    3. 'deque' → logprob: -1.853877067565918
    4. ' ' → logprob: -2.478877067565918
    5. ' my' → logprob: -2.728877067565918
    6. 'b' → logprob: -3.353877067565918
    7. ' use' → logprob: -4.478877067565918
    8. 'my' → logprob: -4.603877067565918
    9. 'queue' → logprob: -4.728877067565918
    10. 'q' → logprob: -4.853877067565918

Token 7: ' mod' (ID: 1812)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.005185732152312994
    2. 'line' → logprob: -6.505185604095459
    3. ' e' → logprob: -6.630185604095459
    4. 'el' → logprob: -7.005185604095459
    5. '_' → logprob: -7.505185604095459
    6. '-' → logprob: -8.005186080932617
    7. 'eline' → logprob: -8.255186080932617
    8. 'ly' → logprob: -10.130186080932617
    9. 'ce' → logprob: -10.505186080932617
    10. ' line' → logprob: -10.505186080932617

Token 8: 'él' (ID: 6778)
  Prédit: 'ule'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ule' → logprob: -0.007290462497621775
    2. 'ular' → logprob: -5.757290363311768
    3. 'el' → logprob: -6.507290363311768
    4. 'ules' → logprob: -7.007290363311768
    5. 'e' → logprob: -7.382290363311768
    6. 'ulo' → logprob: -7.632290363311768
    7. 'els' → logprob: -8.507290840148926
    8. 'ifying' → logprob: -9.132290840148926
    9. '```' → logprob: -9.632290840148926
    10. 'ul' → logprob: -9.882290840148926

Token 9: 'ise' (ID: 1096)
  Prédit: 'é'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'é' → logprob: -0.537264347076416
    2. 'è' → logprob: -1.037264347076416
    3. 'él' → logprob: -3.412264347076416
    4. 'èl' → logprob: -4.662264347076416
    5. 'èle' → logprob: -4.787264347076416
    6. 'e' → logprob: -5.537264347076416
    7. '```' → logprob: -6.537264347076416
    8. '`' → logprob: -6.662264347076416
    9. 'èles' → logprob: -7.412264347076416
    10. 'el' → logprob: -7.537264347076416

Token 10: ' le' (ID: 505)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6878962516784668
    2. ' l' → logprob: -1.8128962516784668
    3. '_' → logprob: -2.312896251678467
    4. ' un' → logprob: -2.687896251678467
    5. ' la' → logprob: -3.062896251678467
    6. 'l' → logprob: -3.312896251678467
    7. ' une' → logprob: -4.312896251678467
    8. ' ' → logprob: -4.312896251678467
    9. ' le' → logprob: -4.687896251678467
    10. ' a' → logprob: -4.937896251678467

Token 11: ' problème' (ID: 35630)
  Prédit: ' grap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' grap' → logprob: -0.4404216408729553
    2. 'gr' → logprob: -1.0654215812683105
    3. ' ' → logprob: -6.6904215812683105
    4. 's' → logprob: -6.8154215812683105
    5. ' graph' → logprob: -7.1904215812683105
    6. ' déplacement' → logprob: -7.3154215812683105
    7. ' chemin' → logprob: -7.4404215812683105
    8. '```' → logprob: -7.5654215812683105
    9. '   ' → logprob: -7.6904215812683105
    10. ' lab' → logprob: -7.8154215812683105

Token 12: ' comme' (ID: 7971)
  Prédit: '\'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\' → logprob: -0.551500678062439
    2. '\n' → logprob: -2.0515007972717285
    3. '#' → logprob: -2.9265007972717285
    4. 's' → logprob: -3.0515007972717285
    5. 'd' → logprob: -3.0515007972717285
    6. 'n' → logprob: -3.3015007972717285
    7. ':' → logprob: -4.0515007972717285
    8. '`' → logprob: -4.3015007972717285
    9. 'queue' → logprob: -4.3015007972717285
    10. '```' → logprob: -4.8015007972717285

Token 13: ' un' (ID: 537)
  Prédit: 'une'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'une' → logprob: -0.5798920392990112
    2. ' une' → logprob: -1.2048920392990112
    3. ' un' → logprob: -2.079892158508301
    4. 'un' → logprob: -4.454892158508301
    5. ' la' → logprob: -6.579892158508301
    6. 'la' → logprob: -7.079892158508301
    7. 'l' → logprob: -7.704892158508301
    8. ' BFS' → logprob: -8.0798921585083
    9. '```' → logprob: -8.9548921585083
    10. '#' → logprob: -8.9548921585083

Token 14: ' jeu' (ID: 24626)
  Prédit: ' grap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' grap' → logprob: -0.3916257619857788
    2. 'gr' → logprob: -1.1416257619857788
    3. 'graph' → logprob: -7.141625881195068
    4. ' BFS' → logprob: -7.266625881195068
    5. '```' → logprob: -7.516625881195068
    6. ' état' → logprob: -7.516625881195068
    7. ' graph' → logprob: -7.766625881195068
    8. ' flux' → logprob: -8.14162540435791
    9. 'flux' → logprob: -8.39162540435791
    10. ' arbre' → logprob: -8.76662540435791

Token 15: ' à' (ID: 1221)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.9506128430366516
    2. '\' → logprob: -1.7006127834320068
    3. ' ' → logprob: -1.8256127834320068
    4. ',' → logprob: -2.325612783432007
    5. ' :' → logprob: -2.950612783432007
    6. '.' → logprob: -3.200612783432007
    7. ' de' → logprob: -3.325612783432007
    8. '_' → logprob: -3.950612783432007
    9. 's' → logprob: -5.325613021850586
    10. ' \' → logprob: -5.825613021850586

Token 16: ' plusieurs' (ID: 20875)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.19772398471832275
    2. 'de' → logprob: -3.072723865509033
    3. 'som' → logprob: -3.197723865509033
    4. '2' → logprob: -3.822723865509033
    5. 'tour' → logprob: -4.322723865509033
    6. ' somme' → logprob: -5.447723865509033
    7. 'faire' → logprob: -5.697723865509033
    8. '0' → logprob: -5.822723865509033
    9. 'pe' → logprob: -5.947723865509033
    10. '```' → logprob: -5.947723865509033

Token 17: ' étapes' (ID: 96583)
  Prédit: 'jou'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'jou' → logprob: -0.6682876944541931
    2. ' joueurs' → logprob: -0.7932876944541931
    3. '```' → logprob: -4.293287754058838
    4. 'players' → logprob: -5.168287754058838
    5. 'j' → logprob: -5.543287754058838
    6. 's' → logprob: -5.793287754058838
    7. 'agents' → logprob: -6.918287754058838
    8. ' joueur' → logprob: -7.043287754058838
    9. ' players' → logprob: -7.043287754058838
    10. 'p' → logprob: -7.168287754058838

Token 18: ' sur' (ID: 1512)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.7370052337646484
    2. ':' → logprob: -1.4870052337646484
    3. '\' → logprob: -1.9870052337646484
    4. '\n' → logprob: -2.6120052337646484
    5. '.' → logprob: -2.9870052337646484
    6. '#' → logprob: -4.487005233764648
    7. 's' → logprob: -4.987005233764648
    8. 'd' → logprob: -5.862005233764648
    9. '
' → logprob: -6.112005233764648
    10. ',
' → logprob: -6.237005233764648

Token 19: ' un' (ID: 537)
  Prédit: ' une'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' une' → logprob: -0.5750482678413391
    2. ' un' → logprob: -1.7000482082366943
    3. ' les' → logprob: -2.3250482082366943
    4. ' des' → logprob: -2.5750482082366943
    5. ' la' → logprob: -3.9500482082366943
    6. ' ' → logprob: -4.325048446655273
    7. ' plusieurs' → logprob: -4.575048446655273
    8. ' deque' → logprob: -4.950048446655273
    9. 'une' → logprob: -5.200048446655273
    10. ' graph' → logprob: -5.325048446655273

Token 20: ' grap' (ID: 60955)
  Prédit: ' grap'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' grap' → logprob: -0.16755367815494537
    2. 'gr' → logprob: -2.042553663253784
    3. ' graph' → logprob: -3.917553663253784
    4. 'graph' → logprob: -6.417553901672363
    5. ' plateau' → logprob: -6.667553901672363
    6. ' état' → logprob: -7.417553901672363
    7. ' espace' → logprob: -8.292553901672363
    8. ' arbre' → logprob: -8.292553901672363
    9. 'ét' → logprob: -8.792553901672363
    10. ' graphique' → logprob: -9.667553901672363

Token 21: 'he' (ID: 273)
  Prédit: 'he'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'he' → logprob: -0.014252358116209507
    2. 'h' → logprob: -4.264252185821533
    3. '#' → logprob: -10.139252662658691
    4. 'heme' → logprob: -11.264252662658691
    5. 'hé' → logprob: -11.889252662658691
    6. '```' → logprob: -12.139252662658691
    7. '<h' → logprob: -12.764252662658691
    8. 'heur' → logprob: -13.014252662658691
    9. 'aphe' → logprob: -13.139252662658691
    10. 'hep' → logprob: -13.264252662658691

Token 22: ' orient' (ID: 13198)
  Prédit: '\'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\' → logprob: -0.9587276577949524
    2. '\n' → logprob: -1.7087275981903076
    3. '.' → logprob: -1.9587275981903076
    4. ',' → logprob: -2.0837275981903076
    5. ':' → logprob: -2.2087275981903076
    6. '
' → logprob: -3.3337275981903076
    7. '#' → logprob: -4.958727836608887
    8. 'd' → logprob: -5.458727836608887
    9. ',
' → logprob: -5.833727836608887
    10. '```' → logprob: -6.208727836608887

Token 23: 'é' (ID: 377)
  Prédit: 'é'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'é' → logprob: -0.0004201866395305842
    2. 'ed' → logprob: -7.875420093536377
    3. 'e' → logprob: -10.625420570373535
    4. '```' → logprob: -11.375420570373535
    5. 'éd' → logprob: -13.375420570373535
    6. 'è' → logprob: -13.625420570373535
    7. 'és' → logprob: -15.625420570373535
    8. 'ê' → logprob: -15.875420570373535
    9. 'd' → logprob: -15.875420570373535
    10. 'ė' → logprob: -16.00041961669922

Token 24: '.
' (ID: 558)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -1.1281460523605347
    2. '\' → logprob: -1.3781460523605347
    3. '\n' → logprob: -1.8781460523605347
    4. '.' → logprob: -2.003146171569824
    5. ':' → logprob: -2.128146171569824
    6. '#' → logprob: -4.628146171569824
    7. ' :' → logprob: -6.628146171569824
    8. ',
' → logprob: -6.753146171569824
    9. '
' → logprob: -7.128146171569824
    10. '```' → logprob: -7.253146171569824

Token 25: '#' (ID: 2)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -1.1386260986328125
    2. 'def' → logprob: -1.3886260986328125
    3. '\' → logprob: -2.1386260986328125
    4. '#' → logprob: -2.3886260986328125
    5. 'd' → logprob: -2.6386260986328125
    6. 'n' → logprob: -2.7636260986328125
    7. '\n' → logprob: -3.3886260986328125
    8. '

' → logprob: -4.1386260986328125
    9. ' 

' → logprob: -4.7636260986328125
    10. ' 
' → logprob: -5.1386260986328125

Token 26: ' Chaque' (ID: 94758)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.6111582517623901
    2. ' 
' → logprob: -1.2361582517623901
    3. 'def' → logprob: -2.7361583709716797
    4. ' #' → logprob: -4.23615837097168
    5. '  
' → logprob: -4.36115837097168
    6. ' 

' → logprob: -4.48615837097168
    7. '
' → logprob: -4.48615837097168
    8. '\' → logprob: -4.86115837097168
    9. ' ' → logprob: -4.86115837097168
    10. ' Chaque' → logprob: -5.11115837097168

Token 27: ' "' (ID: 392)
  Prédit: ' noe'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' noe' → logprob: -0.9512788653373718
    2. ' sommet' → logprob: -1.0762789249420166
    3. ' état' → logprob: -1.7012789249420166
    4. 'ét' → logprob: -2.8262789249420166
    5. ' n' → logprob: -4.5762786865234375
    6. ' étape' → logprob: -4.7012786865234375
    7. ' ' → logprob: -6.5762786865234375
    8. ' étage' → logprob: -6.8262786865234375
    9. 'som' → logprob: -6.9512786865234375
    10. 's' → logprob: -7.2012786865234375

Token 28: 'ét' (ID: 3913)
  Prédit: 'ét'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ét' → logprob: -0.4212783873081207
    2. ' noe' → logprob: -2.546278476715088
    3. ' sommet' → logprob: -2.546278476715088
    4. 's' → logprob: -3.296278476715088
    5. ' ' → logprob: -3.546278476715088
    6. ' état' → logprob: -4.046278476715088
    7. '```' → logprob: -4.421278476715088
    8. 'n' → logprob: -4.421278476715088
    9. 'som' → logprob: -4.546278476715088
    10. 'é' → logprob: -4.796278476715088

Token 29: 'at' (ID: 266)
  Prédit: 'ape'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ape' → logprob: -0.658452570438385
    2. 'a' → logprob: -1.2834525108337402
    3. 'ap' → logprob: -1.7834525108337402
    4. 'at' → logprob: -3.4084525108337402
    5. 'apé' → logprob: -7.84595251083374
    6. '```' → logprob: -7.84595251083374
    7. '#' → logprob: -7.97095251083374
    8. 'ап' → logprob: -8.220952987670898
    9. 'e' → logprob: -8.345952987670898
    10. 'à' → logprob: -8.908452987670898

Token 30: '"' (ID: 1)
  Prédit: ' "'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' "' → logprob: -0.049424491822719574
    2. '"' → logprob: -3.049424409866333
    3. ' de' → logprob: -8.674424171447754
    4. ' =' → logprob: -8.674424171447754
    5. ' ' → logprob: -9.049424171447754
    6. '_' → logprob: -9.674424171447754
    7. ' ")' → logprob: -10.174424171447754
    8. '```' → logprob: -10.549424171447754
    9. '="' → logprob: -10.674424171447754
    10. ' "]' → logprob: -10.799424171447754

Token 31: ' est' (ID: 893)
  Prédit: ' est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' est' → logprob: -0.8582448363304138
    2. ' ' → logprob: -1.2332448959350586
    3. ' du' → logprob: -1.9832448959350586
    4. ' représente' → logprob: -2.9832448959350586
    5. ' correspond' → logprob: -3.3582448959350586
    6. ' de' → logprob: -3.8582448959350586
    7. ' :' → logprob: -4.858244895935059
    8. ' corresponds' → logprob: -4.983244895935059
    9. ':' → logprob: -5.483244895935059
    10. ' =' → logprob: -5.733244895935059

Token 32: ' un' (ID: 537)
  Prédit: 'un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'un' → logprob: -0.9358635544776917
    2. ' un' → logprob: -1.0608634948730469
    3. 'une' → logprob: -2.060863494873047
    4. ' une' → logprob: -2.185863494873047
    5. ' représent' → logprob: -4.310863494873047
    6. ' déf' → logprob: -6.185863494873047
    7. 'dé' → logprob: -6.435863494873047
    8. 're' → logprob: -6.560863494873047
    9. ' identifié' → logprob: -7.310863494873047
    10. ' caractér' → logprob: -7.560863494873047

Token 33: ' cercle' (ID: 172399)
  Prédit: ' noe'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' noe' → logprob: -0.34756556153297424
    2. ' sommet' → logprob: -1.3475655317306519
    3. ' n' → logprob: -3.5975656509399414
    4. ' état' → logprob: -5.597565650939941
    5. ' trip' → logprob: -7.722565650939941
    6. ' couple' → logprob: -8.097565650939941
    7. ' tuple' → logprob: -8.347565650939941
    8. 'n' → logprob: -8.347565650939941
    9. 'ét' → logprob: -8.472565650939941
    10. ' ' → logprob: -8.722565650939941

Token 34: ' (' (ID: 350)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.4506378769874573
    2. '.' → logprob: -1.7006378173828125
    3. '_' → logprob: -2.3256378173828125
    4. ')' → logprob: -3.3256378173828125
    5. 's' → logprob: -4.0756378173828125
    6. ' (' → logprob: -4.9506378173828125
    7. '<|end|>' → logprob: -4.9506378173828125
    8. ' ,' → logprob: -5.8256378173828125
    9. ' ' → logprob: -6.4506378173828125
    10. '#' → logprob: -6.4506378173828125

Token 35: 'no' (ID: 1750)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.026185106486082077
    2. ',' → logprob: -4.651185035705566
    3. '),' → logprob: -5.651185035705566
    4. ' )' → logprob: -5.651185035705566
    5. ').' → logprob: -5.776185035705566
    6. ' de' → logprob: -6.401185035705566
    7. 's' → logprob: -6.526185035705566
    8. 'de' → logprob: -6.901185035705566
    9. ' ou' → logprob: -8.526185035705566
    10. ' dans' → logprob: -8.526185035705566

Token 36: 'e' (ID: 68)
  Prédit: 'ud'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ud' → logprob: -0.3247968554496765
    2. 'e' → logprob: -1.3247969150543213
    3. 'de' → logprob: -5.074796676635742
    4. 'd' → logprob: -5.574796676635742
    5. 'u' → logprob: -6.949796676635742
    6. ')' → logprob: -9.074796676635742
    7. 'ude' → logprob: -9.324796676635742
    8. '```' → logprob: -9.324796676635742
    9. ' de' → logprob: -10.074796676635742
    10. '#' → logprob: -10.324796676635742

Token 37: 'ud' (ID: 527)
  Prédit: 'ud'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ud' → logprob: -0.0006133131100796163
    2. 'u' → logprob: -8.12561321258545
    3. 'd' → logprob: -8.25061321258545
    4. ')' → logprob: -10.50061321258545
    5. ' ud' → logprob: -11.00061321258545
    6. 'уд' → logprob: -12.87561321258545
    7. '```' → logprob: -13.37561321258545
    8. '#' → logprob: -13.37561321258545
    9. 'e' → logprob: -14.12561321258545
    10. 'uds' → logprob: -14.62561321258545

Token 38: ').' (ID: 741)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.004839618690311909
    2. ' )' → logprob: -6.3798394203186035
    3. ',' → logprob: -6.5048394203186035
    4. '),' → logprob: -7.1298394203186035
    5. ').' → logprob: -7.5048394203186035
    6. ' de' → logprob: -9.379839897155762
    7. 's' → logprob: -10.004839897155762
    8. ' dans' → logprob: -10.129839897155762
    9. 'de' → logprob: -10.504839897155762
    10. ' ,' → logprob: -11.254839897155762

Token 39: ' Le' (ID: 2018)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.7216573357582092
    2. '
' → logprob: -1.2216572761535645
    3. ' 

' → logprob: -2.2216572761535645
    4. '

' → logprob: -2.9716572761535645
    5. ' ' → logprob: -4.0966572761535645
    6. ' 
' → logprob: -4.5966572761535645
    7. '.' → logprob: -4.7216572761535645
    8. 'def' → logprob: -5.0966572761535645
    9. '' → logprob: -5.8466572761535645
    10. 's' → logprob: -6.2216572761535645

Token 40: ' mouvement' (ID: 62236)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.3904477059841156
    2. ' code' → logprob: -2.6404476165771484
    3. ' espace' → logprob: -3.0154476165771484
    4. ' s' → logprob: -3.5154476165771484
    5. ' '' → logprob: -3.7654476165771484
    6. ' suivant' → logprob: -3.8904476165771484
    7. ' ' → logprob: -4.015447616577148
    8. ' grap' → logprob: -4.640447616577148
    9. ' ' → logprob: -4.640447616577148
    10. ' graph' → logprob: -4.640447616577148

Token 41: ' possible' (ID: 4149)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.7285314202308655
    2. ' ' → logprob: -0.7285314202308655
    3. ' s' → logprob: -4.603531360626221
    4. ' est' → logprob: -4.978531360626221
    5. ' suivant' → logprob: -5.353531360626221
    6. ' de' → logprob: -6.103531360626221
    7. ' d' → logprob: -6.228531360626221
    8. ' se' → logprob: -6.353531360626221
    9. ' =' → logprob: -6.853531360626221
    10. '  ' → logprob: -7.353531360626221

Token 42: ' en' (ID: 469)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.0354316420853138
    2. ' est' → logprob: -3.6604316234588623
    3. ' ' → logprob: -5.785431861877441
    4. ' suivant' → logprob: -5.785431861877441
    5. ' s' → logprob: -7.035431861877441
    6. 'est' → logprob: -7.410431861877441
    7. 'd' → logprob: -8.410431861877441
    8. ',' → logprob: -8.410431861877441
    9. '#' → logprob: -8.535431861877441
    10. 'su' → logprob: -9.535431861877441

Token 43: ' un' (ID: 537)
  Prédit: ' part'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' part' → logprob: -0.9674735069274902
    2. 'part' → logprob: -0.9674735069274902
    3. ' suivant' → logprob: -3.3424735069274902
    4. 'fonction' → logprob: -3.7174735069274902
    5. 'f' → logprob: -3.9674735069274902
    6. ' fonction' → logprob: -3.9674735069274902
    7. 'su' → logprob: -4.21747350692749
    8. ' partir' → logprob: -4.34247350692749
    9. 's' → logprob: -4.46747350692749
    10. 'l' → logprob: -4.84247350692749

Token 44: ' tour' (ID: 6970)
  Prédit: 'arc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'arc' → logprob: -0.2607279121875763
    2. ' arc' → logprob: -2.385727882385254
    3. ' ' → logprob: -3.760727882385254
    4. ' déplacement' → logprob: -3.760727882385254
    5. 'e' → logprob: -4.760727882385254
    6. 'c' → logprob: -4.760727882385254
    7. 's' → logprob: -5.198227882385254
    8. ' sommet' → logprob: -5.198227882385254
    9. ' pas' → logprob: -5.260727882385254
    10. 'ar' → logprob: -5.260727882385254

Token 45: ' est' (ID: 893)
  Prédit: ' est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' est' → logprob: -0.04749936982989311
    2. ' ' → logprob: -3.297499418258667
    3. 'est' → logprob: -6.047499179840088
    4. 's' → logprob: -6.172499179840088
    5. ' is' → logprob: -6.922499179840088
    6. ' =' → logprob: -7.047499179840088
    7. ')' → logprob: -7.922499179840088
    8. '=' → logprob: -7.922499179840088
    9. ' correspond' → logprob: -8.047499656677246
    10. ',' → logprob: -8.297499656677246

Token 46: ' de' (ID: 334)
  Prédit: ' soit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' soit' → logprob: -0.9509871602058411
    2. ' d' → logprob: -1.0759871006011963
    3. 'd' → logprob: -2.2009871006011963
    4. ' de' → logprob: -2.3259871006011963
    5. 'de' → logprob: -4.075987339019775
    6. ' either' → logprob: -4.700987339019775
    7. ' ' → logprob: -4.700987339019775
    8. 's' → logprob: -5.200987339019775
    9. ' un' → logprob: -5.700987339019775
    10. ' l' → logprob: -5.700987339019775

Token 47: ' 
' (ID: 793)
  Prédit: ' partir'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' partir' → logprob: -1.6807498931884766
    2. ' passer' → logprob: -1.6807498931884766
    3. ' se' → logprob: -2.0557498931884766
    4. 'aller' → logprob: -2.0557498931884766
    5. 's' → logprob: -2.6807498931884766
    6. ' aller' → logprob: -3.0557498931884766
    7. ' prendre' → logprob: -3.0557498931884766
    8. ' suivre' → logprob: -3.4307498931884766
    9. 'pass' → logprob: -3.5557498931884766
    10. ' choisir' → logprob: -3.5557498931884766

Token 48: '#' (ID: 2)
  Prédit: 'aller'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'aller' → logprob: -1.945764422416687
    2. ' passer' → logprob: -2.1957645416259766
    3. ' partir' → logprob: -2.4457645416259766
    4. ' ' → logprob: -2.5707645416259766
    5. ' aller' → logprob: -2.5707645416259766
    6. 'l' → logprob: -2.6957645416259766
    7. 's' → logprob: -2.8207645416259766
    8. ' suivre' → logprob: -2.8207645416259766
    9. ' se' → logprob: -2.9457645416259766
    10. 'pass' → logprob: -3.6957645416259766

Token 49: ' faire' (ID: 8119)
  Prédit: ' passer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' passer' → logprob: -1.2770280838012695
    2. ' suivre' → logprob: -2.0270280838012695
    3. ' se' → logprob: -2.2770280838012695
    4. ' aller' → logprob: -2.2770280838012695
    5. 'aller' → logprob: -2.6520280838012695
    6. ' prendre' → logprob: -2.7770280838012695
    7. ' parcour' → logprob: -3.0270280838012695
    8. ' partir' → logprob: -3.2770280838012695
    9. ' ' → logprob: -3.4020280838012695
    10. ' rejoindre' → logprob: -4.2770280838012695

Token 50: ' exactement' (ID: 108701)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.14190791547298431
    2. 'un' → logprob: -3.3919079303741455
    3. ' un' → logprob: -3.6419079303741455
    4. ' avancer' → logprob: -3.7669079303741455
    5. 's' → logprob: -3.8919079303741455
    6. '```' → logprob: -5.391907691955566
    7. 'l' → logprob: -5.641907691955566
    8. 'a' → logprob: -6.016907691955566
    9. ''un' → logprob: -6.641907691955566
    10. 'le' → logprob: -6.641907691955566

Token 51: ' k' (ID: 372)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3423141837120056
    2. ' un' → logprob: -1.5923142433166504
    3. '1' → logprob: -3.5923142433166504
    4. 'un' → logprob: -3.7173142433166504
    5. ' une' → logprob: -3.8423142433166504
    6. ''un' → logprob: -5.46731424331665
    7. '```' → logprob: -5.71731424331665
    8. '  ' → logprob: -7.09231424331665
    9. 'une' → logprob: -7.21731424331665
    10. 'l' → logprob: -7.21731424331665

Token 52: ' pas' (ID: 2173)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.45744335651397705
    2. ' pas' → logprob: -2.2074432373046875
    3. 's' → logprob: -3.0824432373046875
    4. '<|end|>' → logprob: -3.3324432373046875
    5. ' steps' → logprob: -3.4574432373046875
    6. ' ar' → logprob: -3.8324432373046875
    7. 'cases' → logprob: -4.0824432373046875
    8. ' étapes' → logprob: -4.2074432373046875
    9. '-' → logprob: -4.4574432373046875
    10. 'pas' → logprob: -4.5824432373046875

Token 53: ' sur' (ID: 1512)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.634014904499054
    2. ',' → logprob: -1.2590148448944092
    3. ' ' → logprob: -1.8840148448944092
    4. ' ,' → logprob: -4.134015083312988
    5. '_' → logprob: -5.634015083312988
    6. 's' → logprob: -5.759015083312988
    7. '<|end|>' → logprob: -6.509015083312988
    8. ' (' → logprob: -6.759015083312988
    9. ')' → logprob: -6.759015083312988
    10. ' .' → logprob: -7.259015083312988

Token 54: ' les' (ID: 1341)
  Prédit: 'le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'le' → logprob: -1.1092833280563354
    2. ' le' → logprob: -1.1092833280563354
    3. ' un' → logprob: -1.7342833280563354
    4. ' les' → logprob: -2.609283447265625
    5. ' une' → logprob: -3.484283447265625
    6. 'les' → logprob: -3.984283447265625
    7. 'une' → logprob: -4.484283447265625
    8. ' la' → logprob: -4.984283447265625
    9. ' des' → logprob: -5.484283447265625
    10. 'un' → logprob: -5.734283447265625

Token 55: ' ar' (ID: 646)
  Prédit: ' arcs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' arcs' → logprob: -0.7819420695304871
    2. 'ar' → logprob: -1.2819421291351318
    3. ' ar' → logprob: -2.531942129135132
    4. ' voisins' → logprob: -2.781942129135132
    5. ' ' → logprob: -3.656942129135132
    6. ' somm' → logprob: -4.031941890716553
    7. ' edges' → logprob: -4.406941890716553
    8. ' graph' → logprob: -4.656941890716553
    9. ' chemins' → logprob: -4.656941890716553
    10. 's' → logprob: -5.156941890716553

Token 56: 'êtes' (ID: 23720)
  Prédit: 'êtes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'êtes' → logprob: -0.13015326857566833
    2. 'cs' → logprob: -2.755153179168701
    3. '^' → logprob: -3.755153179168701
    4. 'c' → logprob: -4.630153179168701
    5. 'ê' → logprob: -4.755153179168701
    6. 'ç' → logprob: -5.755153179168701
    7. 'ˆ' → logprob: -6.255153179168701
    8. 'êts' → logprob: -6.380153179168701
    9. 'tes' → logprob: -6.380153179168701
    10. '\xc8' → logprob: -7.005153179168701

Token 57: ',' (ID: 11)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.137570321559906
    2. ',' → logprob: -2.512570381164551
    3. ':' → logprob: -4.387570381164551
    4. ' ' → logprob: -4.887570381164551
    5. '\' → logprob: -5.512570381164551
    6. '#' → logprob: -5.637570381164551
    7. 's' → logprob: -5.637570381164551
    8. ')' → logprob: -6.012570381164551
    9. '[' → logprob: -6.137570381164551
    10. '_' → logprob: -6.512570381164551

Token 58: ' avec' (ID: 3937)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.5212258100509644
    2. ' où' → logprob: -1.5212258100509644
    3. ',' → logprob: -1.8962258100509644
    4. ' en' → logprob: -2.021225929260254
    5. '.' → logprob: -2.771225929260254
    6. 'où' → logprob: -3.521225929260254
    7. ' k' → logprob: -3.771225929260254
    8. ' et' → logprob: -3.771225929260254
    9. ' avec' → logprob: -4.021225929260254
    10. ' mais' → logprob: -4.021225929260254

Token 59: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.04507458582520485
    2. ' un' → logprob: -3.920074701309204
    3. 'k' → logprob: -4.795074462890625
    4. ' des' → logprob: -5.420074462890625
    5. ' ' → logprob: -5.920074462890625
    6. 'le' → logprob: -6.545074462890625
    7. ' le' → logprob: -6.795074462890625
    8. ' la' → logprob: -6.920074462890625
    9. 'une' → logprob: -7.045074462890625
    10. ' une' → logprob: -7.045074462890625

Token 60: ' �' (ID: 35353)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.646400511264801
    2. ' =' → logprob: -0.896400511264801
    3. ' >=' → logprob: -3.2714004516601562
    4. ' >' → logprob: -4.521400451660156
    5. '>=' → logprob: -4.771400451660156
    6. '<|end|>' → logprob: -5.896400451660156
    7. '>' → logprob: -6.146400451660156
    8. ' ' → logprob: -6.646400451660156
    9. ' <=' → logprob: -6.896400451660156
    10. ' <' → logprob: -7.396400451660156

Token 61: '�' (ID: 230)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.11906560510396957
    2. '+' → logprob: -3.619065523147583
    3. ' =' → logprob: -3.619065523147583
    4. '>' → logprob: -4.119065761566162
    5. ' ' → logprob: -4.619065761566162
    6. ''' → logprob: -5.869065761566162
    7. 'a' → logprob: -5.994065761566162
    8. 'u' → logprob: -5.994065761566162
    9. ''un' → logprob: -5.994065761566162
    10. '>=' → logprob: -5.994065761566162

Token 62: ' {' (ID: 354)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6447710990905762
    2. '1' → logprob: -1.0197710990905762
    3. '<|end|>' → logprob: -3.144771099090576
    4. '2' → logprob: -3.644771099090576
    5. 'range' → logprob: -4.519771099090576
    6. '0' → logprob: -5.519771099090576
    7. 's' → logprob: -5.894771099090576
    8. '{' → logprob: -5.894771099090576
    9. '=' → logprob: -6.144771099090576
    10. '+' → logprob: -6.269771099090576

Token 63: 'a' (ID: 64)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.06079692021012306
    2. ' ' → logprob: -3.4357969760894775
    3. '2' → logprob: -4.810796737670898
    4. '0' → logprob: -4.935796737670898
    5. '3' → logprob: -5.060796737670898
    6. '-' → logprob: -5.935796737670898
    7. '{' → logprob: -7.060796737670898
    8. '4' → logprob: -7.685796737670898
    9. '6' → logprob: -8.310796737670898
    10. '5' → logprob: -8.998296737670898

Token 64: ',b' (ID: 17568)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.05556069314479828
    2. '}' → logprob: -4.18056058883667
    3. '1' → logprob: -4.68056058883667
    4. '+' → logprob: -4.68056058883667
    5. 'a' → logprob: -5.18056058883667
    6. '0' → logprob: -6.05556058883667
    7. '-' → logprob: -6.18056058883667
    8. ',b' → logprob: -6.30556058883667
    9. '_' → logprob: -6.68056058883667
    10. '2' → logprob: -6.93056058883667

Token 65: ',c' (ID: 22261)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '}' → logprob: -0.04223324730992317
    2. ',' → logprob: -3.2922332286834717
    3. ' }' → logprob: -6.167233467102051
    4. '1' → logprob: -7.792233467102051
    5. ',c' → logprob: -7.792233467102051
    6. 'a' → logprob: -8.04223346710205
    7. '},' → logprob: -8.66723346710205
    8. '+' → logprob: -9.29223346710205
    9. '}.' → logprob: -9.91723346710205
    10. '{' → logprob: -10.04223346710205

Token 66: '}.
' (ID: 40066)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '}' → logprob: -0.0024279789067804813
    2. ' }' → logprob: -6.62742805480957
    3. ',' → logprob: -7.37742805480957
    4. '},' → logprob: -8.50242805480957
    5. '}.' → logprob: -8.87742805480957
    6. 's' → logprob: -10.50242805480957
    7. ',...' → logprob: -12.00242805480957
    8. 'd' → logprob: -12.12742805480957
    9. 'a' → logprob: -12.12742805480957
    10. ' ' → logprob: -12.25242805480957

Token 67: '#' (ID: 2)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.18826712667942047
    2. ',' → logprob: -3.063267230987549
    3. 'a' → logprob: -3.938267230987549
    4. '.' → logprob: -3.938267230987549
    5. ' ' → logprob: -4.063267230987549
    6. ' =' → logprob: -4.063267230987549
    7. ':' → logprob: -4.563267230987549
    8. '_' → logprob: -4.813267230987549
    9. ')' → logprob: -5.188267230987549
    10. '[' → logprob: -5.313267230987549

Token 68: ' On' (ID: 2160)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.15347996354103088
    2. ' =' → logprob: -2.903480052947998
    3. '{' → logprob: -3.778480052947998
    4. ',' → logprob: -3.903480052947998
    5. '[' → logprob: -4.403480052947998
    6. '.' → logprob: -4.778480052947998
    7. 'a' → logprob: -5.403480052947998
    8. '_' → logprob: -5.528480052947998
    9. '}' → logprob: -5.653480052947998
    10. ' {' → logprob: -6.028480052947998

Token 69: ' veut' (ID: 41653)
  Prédit: ' suppose'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' suppose' → logprob: -0.7637275457382202
    2. ' a' → logprob: -2.3887276649475098
    3. ' veut' → logprob: -2.3887276649475098
    4. ' peut' → logprob: -2.5137276649475098
    5. ' considère' → logprob: -3.2637276649475098
    6. 's' → logprob: -3.3887276649475098
    7. 'a' → logprob: -3.5137276649475098
    8. ' ' → logprob: -3.6387276649475098
    9. ' souhaite' → logprob: -4.01372766494751
    10. 'supp' → logprob: -4.13872766494751

Token 70: ' trouver' (ID: 23195)
  Prédit: ' trouver'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' trouver' → logprob: -1.0073250532150269
    2. ' pouvoir' → logprob: -1.2573250532150269
    3. ' ' → logprob: -1.8823250532150269
    4. ' calcul' → logprob: -2.7573251724243164
    5. ' déterminer' → logprob: -4.132325172424316
    6. ' choisir' → logprob: -4.507325172424316
    7. ' savoir' → logprob: -4.507325172424316
    8. ' ' → logprob: -4.632325172424316
    9. '  ' → logprob: -5.132325172424316
    10. ' obtenir' → logprob: -5.507325172424316

Token 71: ' le' (ID: 505)
  Prédit: ' le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' le' → logprob: -1.1728129386901855
    2. ' un' → logprob: -1.5478129386901855
    3. ' ' → logprob: -1.7978129386901855
    4. ' la' → logprob: -2.0478129386901855
    5. ' l' → logprob: -2.6728129386901855
    6. 'le' → logprob: -3.2978129386901855
    7. ' une' → logprob: -3.7978129386901855
    8. 'l' → logprob: -4.2978129386901855
    9. ' les' → logprob: -4.6728129386901855
    10. ' ' → logprob: -5.1728129386901855

Token 72: ' nombre' (ID: 9733)
  Prédit: ' plus'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' plus' → logprob: -0.5135967135429382
    2. ' nombre' → logprob: -1.263596773147583
    3. ' chemin' → logprob: -3.638596773147583
    4. ' meilleur' → logprob: -3.888596773147583
    5. ' moyen' → logprob: -4.138596534729004
    6. ' minimum' → logprob: -4.138596534729004
    7. ' minimal' → logprob: -4.888596534729004
    8. ' ' → logprob: -5.138596534729004
    9. 's' → logprob: -5.263596534729004
    10. ' shortest' → logprob: -5.513596534729004

Token 73: ' minimum' (ID: 11085)
  Prédit: ' d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.49484363198280334
    2. ' de' → logprob: -1.494843602180481
    3. ' ' → logprob: -1.994843602180481
    4. 'd' → logprob: -3.9948437213897705
    5. '  ' → logprob: -6.119843482971191
    6. ' total' → logprob: -6.369843482971191
    7. '_' → logprob: -6.869843482971191
    8. '#' → logprob: -7.119843482971191
    9. ' ' → logprob: -7.119843482971191
    10. 'de' → logprob: -7.119843482971191

Token 74: ' de' (ID: 334)
  Prédit: ' d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.674214243888855
    2. ' de' → logprob: -1.299214243888855
    3. ' ' → logprob: -1.924214243888855
    4. 'd' → logprob: -3.1742143630981445
    5. 'de' → logprob: -4.0492143630981445
    6. '  ' → logprob: -5.6742143630981445
    7. '#' → logprob: -6.0492143630981445
    8. '_' → logprob: -6.6742143630981445
    9. '<|end|>' → logprob: -6.6742143630981445
    10. 's' → logprob: -6.9242143630981445

Token 75: ' tours' (ID: 32603)
  Prédit: ' pas'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pas' → logprob: -0.16160133481025696
    2. ' ' → logprob: -3.1616013050079346
    3. 's' → logprob: -3.6616013050079346
    4. ' tours' → logprob: -3.9116013050079346
    5. ' déplacements' → logprob: -4.286601543426514
    6. ' passages' → logprob: -5.036601543426514
    7. ' steps' → logprob: -5.036601543426514
    8. ' mouvements' → logprob: -5.161601543426514
    9. ' étapes' → logprob: -5.411601543426514
    10. 'm' → logprob: -5.911601543426514

Token 76: ' pour' (ID: 1930)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5868847370147705
    2. '.' → logprob: -2.3368847370147705
    3. '=' → logprob: -2.3368847370147705
    4. ':' → logprob: -2.5868847370147705
    5. ',' → logprob: -2.8368847370147705
    6. '_' → logprob: -3.4618847370147705
    7. ' =' → logprob: -4.211884498596191
    8. ' :' → logprob: -4.836884498596191
    9. 's' → logprob: -4.961884498596191
    10. ')' → logprob: -5.211884498596191

Token 77: ' garantir' (ID: 48328)
  Prédit: ' atteindre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' atteindre' → logprob: -0.4040655195713043
    2. ' rejoindre' → logprob: -3.0290656089782715
    3. ' parcour' → logprob: -3.0290656089782715
    4. ' pouvoir' → logprob: -3.2790656089782715
    5. ' revenir' → logprob: -3.5290656089782715
    6. ' arriver' → logprob: -3.7790656089782715
    7. ' parvenir' → logprob: -3.9040656089782715
    8. ' ' → logprob: -3.9040656089782715
    9. ' visiter' → logprob: -4.5290656089782715
    10. 're' → logprob: -4.5290656089782715

Token 78: ' d' (ID: 272)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7201783657073975
    2. ' que' → logprob: -1.7201783657073975
    3. ' un' → logprob: -2.2201783657073975
    4. ' l' → logprob: -2.8451783657073975
    5. ' la' → logprob: -2.9701783657073975
    6. ' d' → logprob: -3.8451783657073975
    7. '<|end|>' → logprob: -3.9701783657073975
    8. ' le' → logprob: -4.220178604125977
    9. ' une' → logprob: -4.220178604125977
    10. '  ' → logprob: -4.345178604125977

Token 79: ''' (ID: 6)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.17947715520858765
    2. ''' → logprob: -2.6794772148132324
    3. ''arr' → logprob: -3.6794772148132324
    4. ''être' → logprob: -3.8044772148132324
    5. 'u' → logprob: -4.429477214813232
    6. ''avoir' → logprob: -4.429477214813232
    7. ''aller' → logprob: -4.554477214813232
    8. ''obtenir' → logprob: -5.679477214813232
    9. ''assurer' → logprob: -6.179477214813232
    10. ''é' → logprob: -6.429477214813232

Token 80: 'atte' (ID: 23975)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -1.1430895328521729
    2. ''arr' → logprob: -1.1430895328521729
    3. 'e' → logprob: -1.2680895328521729
    4. ''aller' → logprob: -3.893089532852173
    5. 'é' → logprob: -4.643089294433594
    6. ''être' → logprob: -4.893089294433594
    7. 're' → logprob: -5.143089294433594
    8. 'être' → logprob: -5.143089294433594
    9. 'éc' → logprob: -6.143089294433594
    10. '’arr' → logprob: -6.143089294433594

Token 81: 'indre' (ID: 28945)
  Prédit: 'indre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'indre' → logprob: -0.2818569839000702
    2. 'i' → logprob: -1.5318570137023926
    3. 'ind' → logprob: -4.156857013702393
    4. 'n' → logprob: -5.156857013702393
    5. '#' → logprob: -5.531857013702393
    6. 'in' → logprob: -7.781857013702393
    7. 'int' → logprob: -7.781857013702393
    8. 'inder' → logprob: -8.031856536865234
    9. 'indra' → logprob: -8.281856536865234
    10. '```' → logprob: -8.531856536865234

Token 82: ' le' (ID: 505)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.09709898382425308
    2. ' l' → logprob: -3.4720990657806396
    3. ' le' → logprob: -4.0970988273620605
    4. ' un' → logprob: -4.3470988273620605
    5. ' u' → logprob: -4.7220988273620605
    6. ' la' → logprob: -5.8470988273620605
    7. ' a' → logprob: -5.9720988273620605
    8. ' toutes' → logprob: -6.4720988273620605
    9. '_' → logprob: -6.5970988273620605
    10. 'u' → logprob: -6.5970988273620605

Token 83: ' but' (ID: 889)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3418263792991638
    2. ' sommet' → logprob: -1.5918264389038086
    3. 's' → logprob: -4.341826438903809
    4. '_' → logprob: -4.341826438903809
    5. ' n' → logprob: -4.716826438903809
    6. ' but' → logprob: -4.966826438903809
    7. ' noe' → logprob: -5.091826438903809
    8. 'u' → logprob: -5.466826438903809
    9. ''' → logprob: -5.591826438903809
    10. ' même' → logprob: -6.029326438903809

Token 84: ' peu' (ID: 9235)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3550066351890564
    2. '_' → logprob: -2.230006694793701
    3. '.' → logprob: -2.730006694793701
    4. '=' → logprob: -3.480006694793701
    5. ',' → logprob: -3.980006694793701
    6. ' =' → logprob: -3.980006694793701
    7. ':' → logprob: -4.230006694793701
    8. ')' → logprob: -5.105006694793701
    9. '[' → logprob: -5.230006694793701
    10. 'u' → logprob: -5.605006694793701

Token 85: '
' (ID: 198)
  Prédit: ' importe'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' importe' → logprob: -0.9725279808044434
    2. 'importe' → logprob: -1.5975279808044434
    3. 'u' → logprob: -1.8475279808044434
    4. '```' → logprob: -2.9725279808044434
    5. 't' → logprob: -3.3475279808044434
    6. '' → logprob: -3.4725279808044434
    7. 'd' → logprob: -3.7225279808044434
    8. 'r' → logprob: -3.8475279808044434
    9. 's' → logprob: -3.8475279808044434
    10. 'vent' → logprob: -4.097527980804443

Token 86: '#' (ID: 2)
  Prédit: ' importe'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' importe' → logprob: -0.3383067548274994
    2. '' → logprob: -2.7133066654205322
    3. 'importe' → logprob: -2.7133066654205322
    4. ' ' → logprob: -2.9633066654205322
    5. 'vent' → logprob: -4.213306903839111
    6. '-' → logprob: -4.338306903839111
    7. '#' → logprob: -4.463306903839111
    8. '' → logprob: -4.713306903839111
    9. '' → logprob: -4.963306903839111
    10. ' après' → logprob: -5.088306903839111

Token 87: ' importe' (ID: 80493)
  Prédit: 'importe'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'importe' → logprob: -0.13750581443309784
    2. ' importe' → logprob: -2.6375057697296143
    3. 'import' → logprob: -3.2625057697296143
    4. 'près' → logprob: -5.512506008148193
    5. '```' → logprob: -5.512506008148193
    6. '#' → logprob: -5.637506008148193
    7. 'vent' → logprob: -6.262506008148193
    8. '' → logprob: -6.387506008148193
    9. 't' → logprob: -7.512506008148193
    10. '' → logprob: -7.887506008148193

Token 88: ' les' (ID: 1341)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.7005742788314819
    2. ' les' → logprob: -1.325574278831482
    3. ' ' → logprob: -2.4505743980407715
    4. ' l' → logprob: -2.9505743980407715
    5. ' le' → logprob: -3.3255743980407715
    6. ' la' → logprob: -4.3255743980407715
    7. 'l' → logprob: -4.7005743980407715
    8. ''' → logprob: -4.7005743980407715
    9. ' des' → logprob: -5.3255743980407715
    10. 'r' → logprob: -5.5755743980407715

Token 89: ' choix' (ID: 28642)
  Prédit: ' choix'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' choix' → logprob: -0.4702678918838501
    2. ' valeurs' → logprob: -2.9702677726745605
    3. 'd' → logprob: -3.2202677726745605
    4. 'val' → logprob: -3.2202677726745605
    5. ' états' → logprob: -3.5952677726745605
    6. ' mouvements' → logprob: -3.9702677726745605
    7. 'choices' → logprob: -4.0952677726745605
    8. 'cho' → logprob: -4.2202677726745605
    9. 'dé' → logprob: -4.4702677726745605
    10. ' choices' → logprob: -4.8452677726745605

Token 90: ' advers' (ID: 33091)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.292443186044693
    2. '_' → logprob: -3.04244327545166
    3. 'u' → logprob: -3.04244327545166
    4. ',' → logprob: -3.29244327545166
    5. 'a' → logprob: -3.29244327545166
    6. '=' → logprob: -3.91744327545166
    7. 's' → logprob: -4.29244327545166
    8. '.' → logprob: -4.66744327545166
    9. ''' → logprob: -5.41744327545166
    10. '```' → logprob: -5.54244327545166

Token 91: 'es' (ID: 268)
  Prédit: 'gn'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'gn' → logprob: -1.3849542140960693
    2. 'fi' → logprob: -2.1349542140960693
    3. 'l' → logprob: -2.5099542140960693
    4. 'i' → logprob: -3.1349542140960693
    5. 'im' → logprob: -3.2599542140960693
    6. 'é' → logprob: -3.2599542140960693
    7. '#' → logprob: -3.2599542140960693
    8. 's' → logprob: -3.8849542140960693
    9. 'li' → logprob: -4.009954452514648
    10. 'u' → logprob: -4.134954452514648

Token 92: ',' (ID: 11)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6676828861236572
    2. '_' → logprob: -1.2926828861236572
    3. '#' → logprob: -3.2926828861236572
    4. '=' → logprob: -3.4176828861236572
    5. '[' → logprob: -3.7926828861236572
    6. 'a' → logprob: -3.9176828861236572
    7. '.' → logprob: -3.9176828861236572
    8. ',' → logprob: -4.292682647705078
    9. ' =' → logprob: -4.417682647705078
    10. ':' → logprob: -4.917682647705078

Token 93: ' ou' (ID: 2031)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -1.0087413787841797
    2. ' ' → logprob: -1.2587413787841797
    3. ':' → logprob: -2.0087413787841797
    4. ',' → logprob: -2.7587413787841797
    5. ' :' → logprob: -3.3837413787841797
    6. 'a' → logprob: -4.25874137878418
    7. '#' → logprob: -4.38374137878418
    8. 's' → logprob: -4.63374137878418
    9. ' ,' → logprob: -4.63374137878418
    10. 'u' → logprob: -4.75874137878418

Token 94: ' détect' (ID: 118715)
  Prédit: ' None'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' None' → logprob: -0.15945471823215485
    2. ' ' → logprob: -3.034454822540283
    3. ' sinon' → logprob: -3.909454822540283
    4. ' bien' → logprob: -4.534454822540283
    5. ' aucune' → logprob: -5.034454822540283
    6. ' si' → logprob: -5.034454822540283
    7. ' ' → logprob: -5.159454822540283
    8. ' aucun' → logprob: -5.159454822540283
    9. 'None' → logprob: -5.284454822540283
    10. ' alors' → logprob: -5.659454822540283

Token 95: 'er' (ID: 259)
  Prédit: 'er'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.011739065870642662
    2. 'é' → logprob: -4.636739253997803
    3. 'e' → logprob: -6.261739253997803
    4. '\' → logprob: -10.386738777160645
    5. '#' → logprob: -11.636738777160645
    6. '```' → logprob: -12.136738777160645
    7. 'erer' → logprob: -12.886738777160645
    8. '­er' → logprob: -13.136738777160645
    9. 'ter' → logprob: -13.386738777160645
    10. 'è' → logprob: -13.386738777160645

Token 96: ' qu' (ID: 474)
  Prédit: ' un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.7622929215431213
    2. ' une' → logprob: -1.2622928619384766
    3. ' l' → logprob: -2.6372928619384766
    4. ' ' → logprob: -3.3872928619384766
    5. ' si' → logprob: -3.8872928619384766
    6. ' qu' → logprob: -4.137292861938477
    7. 's' → logprob: -4.137292861938477
    8. ' que' → logprob: -4.387292861938477
    9. 'une' → logprob: -4.387292861938477
    10. '```' → logprob: -4.512292861938477

Token 97: ''il' (ID: 14683)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.546244204044342
    2. 'e' → logprob: -1.2962441444396973
    3. 'u' → logprob: -2.9212441444396973
    4. 'ue' → logprob: -3.0462441444396973
    5. ''un' → logprob: -4.171244144439697
    6. ''une' → logprob: -4.171244144439697
    7. ''il' → logprob: -4.796244144439697
    8. ''é' → logprob: -6.421244144439697
    9. ''u' → logprob: -6.421244144439697
    10. ''e' → logprob: -7.421244144439697

Token 98: ' est' (ID: 893)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.711985170841217
    2. ' n' → logprob: -1.0869851112365723
    3. ''est' → logprob: -1.8369851112365723
    4. 'est' → logprob: -4.961985111236572
    5. ''' → logprob: -6.586985111236572
    6. ' est' → logprob: -6.711985111236572
    7. 'n't' → logprob: -7.336985111236572
    8. 's' → logprob: -7.461985111236572
    9. ''ex' → logprob: -7.711985111236572
    10. ''s' → logprob: -7.836985111236572

Token 99: ' impossible' (ID: 19786)
  Prédit: ' impossible'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' impossible' → logprob: -0.037203844636678696
    2. 'im' → logprob: -3.412203788757324
    3. ' inf' → logprob: -6.037203788757324
    4. 'inf' → logprob: -7.287203788757324
    5. ' ' → logprob: -8.912203788757324
    6. ' imposible' → logprob: -9.537203788757324
    7. ' pas' → logprob: -10.037203788757324
    8. 'import' → logprob: -10.787203788757324
    9. ' impr' → logprob: -10.787203788757324
    10. ' ' → logprob: -11.037203788757324

Token 100: ' d' (ID: 272)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2936007082462311
    2. '_' → logprob: -2.7936007976531982
    3. ',' → logprob: -3.1686007976531982
    4. '.' → logprob: -3.2936007976531982
    5. '=' → logprob: -3.5436007976531982
    6. ':' → logprob: -3.9186007976531982
    7. '#' → logprob: -4.543600559234619
    8. ')' → logprob: -4.668600559234619
    9. ' =' → logprob: -4.668600559234619
    10. '[' → logprob: -5.293600559234619

Token 101: ''y' (ID: 27913)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.3906007409095764
    2. ''' → logprob: -1.2656006813049316
    3. 'a' → logprob: -4.390600681304932
    4. ''arr' → logprob: -4.640600681304932
    5. ''être' → logprob: -5.390600681304932
    6. 'atte' → logprob: -6.015600681304932
    7. ''aller' → logprob: -6.140600681304932
    8. ''é' → logprob: -6.390600681304932
    9. '')' → logprob: -6.515600681304932
    10. 'être' → logprob: -6.640600681304932

Token 102: ' parvenir' (ID: 172188)
  Prédit: 'arr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'arr' → logprob: -0.22718466818332672
    2. ' parvenir' → logprob: -1.7271846532821655
    3. ' arriver' → logprob: -3.852184772491455
    4. 'avoir' → logprob: -6.727184772491455
    5. 'arra' → logprob: -7.227184772491455
    6. 'a' → logprob: -7.602184772491455
    7. 'aller' → logprob: -8.102184295654297
    8. ''arr' → logprob: -8.227184295654297
    9. 'venir' → logprob: -8.977184295654297
    10. 'voir' → logprob: -9.102184295654297

Token 103: '.

' (ID: 364)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8450271487236023
    2. '_' → logprob: -2.095027208328247
    3. '=' → logprob: -2.220027208328247
    4. '#' → logprob: -2.595027208328247
    5. 'a' → logprob: -2.970027208328247
    6. ':' → logprob: -3.345027208328247
    7. ',' → logprob: -3.345027208328247
    8. '[' → logprob: -3.470027208328247
    9. ' =' → logprob: -3.845027208328247
    10. ')' → logprob: -4.095026969909668

Token 104: 'def' (ID: 1314)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.115257740020752
    2. '#' → logprob: -1.490257740020752
    3. 'a' → logprob: -1.990257740020752
    4. '_' → logprob: -2.240257740020752
    5. ',' → logprob: -2.740257740020752
    6. ':' → logprob: -2.990257740020752
    7. '=' → logprob: -3.365257740020752
    8. '(' → logprob: -5.365257740020752
    9. '
' → logprob: -5.365257740020752
    10. ' 
' → logprob: -5.365257740020752

Token 105: ' main' (ID: 2758)
  Prédit: ' min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' min' → logprob: -0.409541517496109
    2. ' minimum' → logprob: -3.034541606903076
    3. ' solve' → logprob: -3.159541606903076
    4. ' minimal' → logprob: -3.284541606903076
    5. 'min' → logprob: -3.409541606903076
    6. ' guaranteed' → logprob: -3.659541606903076
    7. ' bfs' → logprob: -4.034541606903076
    8. ' find' → logprob: -4.159541606903076
    9. ' shortest' → logprob: -4.159541606903076
    10. 'solve' → logprob: -4.284541606903076

Token 106: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():' → logprob: -0.22613483667373657
    2. '(' → logprob: -1.6011347770690918
    3. ':' → logprob: -8.47613525390625
    4. '_' → logprob: -8.72613525390625
    5. '()' → logprob: -8.72613525390625
    6. ' ():' → logprob: -9.97613525390625
    7. ' (' → logprob: -10.22613525390625
    8. '(:' → logprob: -10.47613525390625
    9. '):' → logprob: -10.60113525390625
    10. '(":' → logprob: -11.47613525390625

Token 107: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.21493470668792725
    2. ' ' → logprob: -3.089934825897217
    3. 'n' → logprob: -3.464934825897217
    4. '    ' → logprob: -3.839934825897217
    5. 'a' → logprob: -4.464934825897217
    6. 'import' → logprob: -4.714934825897217
    7. ' n' → logprob: -4.714934825897217
    8. 'def' → logprob: -4.714934825897217
    9. '```' → logprob: -5.214934825897217
    10. '(n' → logprob: -5.339934825897217

Token 108: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.6335011124610901
    2. 'n' (adapté à ' n') → logprob: -0.7585011124610901
    3. ' pass' → logprob: -8.383501052856445
    4. ' import' → logprob: -8.883501052856445
    5. ' N' → logprob: -9.133501052856445
    6. 'from' → logprob: -9.383501052856445
    7. ' ' → logprob: -9.383501052856445
    8. ' #' → logprob: -9.508501052856445
    9. 'N' → logprob: -10.258501052856445
    10. ' from' → logprob: -10.633501052856445

Token 109: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5373055338859558
    2. ',' → logprob: -1.0373055934906006
    3. ' ,' → logprob: -2.9123055934906006
    4. '=' → logprob: -5.0373053550720215
    5. ' ' → logprob: -8.41230583190918
    6. '=int' → logprob: -9.66230583190918
    7. ' =
' → logprob: -10.16230583190918
    8. ')' → logprob: -10.78730583190918
    9. '<|end|>' → logprob: -10.91230583190918
    10. ',n' → logprob: -11.16230583190918

Token 110: ' m' (ID: 284)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.8357140421867371
    2. 'm' → logprob: -1.4607141017913818
    3. ' a' → logprob: -2.085714101791382
    4. ' m' → logprob: -2.085714101791382
    5. 'k' → logprob: -2.835714101791382
    6. ' k' → logprob: -3.710714101791382
    7. 'q' → logprob: -6.960713863372803
    8. ' q' → logprob: -7.585713863372803
    9. 's' → logprob: -8.210714340209961
    10. 'r' → logprob: -8.960714340209961

Token 111: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.14457865059375763
    2. '=' → logprob: -2.019578695297241
    3. ',' → logprob: -6.269578456878662
    4. '=input' → logprob: -13.01957893371582
    5. ' =
' → logprob: -13.51957893371582
    6. '=int' → logprob: -13.64457893371582
    7. ' ' → logprob: -13.76957893371582
    8. ' ,' → logprob: -14.39457893371582
    9. ')' → logprob: -14.51957893371582
    10. '  ' → logprob: -14.89457893371582

Token 112: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.1649174839258194
    2. ' a' → logprob: -1.9149174690246582
    3. 'k' → logprob: -6.289917469024658
    4. ' k' → logprob: -6.789917469024658
    5. 'abc' → logprob: -7.914917469024658
    6. '_a' → logprob: -8.539917945861816
    7. '_' → logprob: -8.914917945861816
    8. 'q' → logprob: -9.289917945861816
    9. ' ' → logprob: -9.352417945861816
    10. ' s' → logprob: -9.414917945861816

Token 113: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00015455135144293308
    2. ',b' → logprob: -8.875154495239258
    3. ' ,' → logprob: -11.625154495239258
    4. 'b' → logprob: -12.125154495239258
    5. ' =' → logprob: -15.875154495239258
    6. ' b' → logprob: -15.875154495239258
    7. '=' → logprob: -16.375154495239258
    8. '1' → logprob: -18.500154495239258
    9. ' ' → logprob: -18.875154495239258
    10. '_b' → logprob: -18.875154495239258

Token 114: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.2014162540435791
    2. ' b' → logprob: -1.701416254043579
    3. ' =' → logprob: -13.576416015625
    4. ',b' → logprob: -14.326416015625
    5. 'c' → logprob: -14.826416015625
    6. ' ' → logprob: -15.076416015625
    7. '=' → logprob: -15.826416015625
    8. '=b' → logprob: -15.951416015625
    9. ',' → logprob: -16.826416015625
    10. '<|end|>' → logprob: -16.951416015625

Token 115: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -4.5014188799541444e-05
    2. ' =' → logprob: -10.750044822692871
    3. ' ,' → logprob: -11.000044822692871
    4. '=' → logprob: -12.000044822692871
    5. ',c' → logprob: -15.250044822692871
    6. ',b' → logprob: -16.125045776367188
    7. '<|end|>' → logprob: -16.250045776367188
    8. ' ' → logprob: -17.250045776367188
    9. '  ' → logprob: -17.500045776367188
    10. ',s' → logprob: -17.625045776367188

Token 116: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.009784892201423645
    2. 'c' → logprob: -4.634784698486328
    3. ' =' → logprob: -11.009784698486328
    4. ' ' → logprob: -12.384784698486328
    5. ',' → logprob: -12.759784698486328
    6. ',c' → logprob: -12.884784698486328
    7. '  ' → logprob: -14.009784698486328
    8. '=' → logprob: -14.509784698486328
    9. '	c' → logprob: -14.634784698486328
    10. '=c' → logprob: -15.509784698486328

Token 117: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5759479999542236
    2. ' =' → logprob: -0.8259479999542236
    3. ',' → logprob: -11.950947761535645
    4. '=input' → logprob: -14.075947761535645
    5. ')' → logprob: -14.825947761535645
    6. '=int' → logprob: -14.950947761535645
    7. ' ' → logprob: -15.950947761535645
    8. '=
' → logprob: -16.32594871520996
    9. '  ' → logprob: -16.57594871520996
    10. ' =
' → logprob: -16.57594871520996

Token 118: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.011049113236367702
    2. 'map' → logprob: -4.511049270629883
    3. '	map' → logprob: -13.761049270629883
    4. ' ' → logprob: -15.386049270629883
    5. '(map' → logprob: -17.011049270629883
    6. ' input' → logprob: -17.261049270629883
    7. '_map' → logprob: -18.136049270629883
    8. 'input' → logprob: -18.136049270629883
    9. ' mapa' → logprob: -18.636049270629883
    10. ' list' → logprob: -18.761049270629883

Token 119: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0067225913517177105
    2. '(' → logprob: -5.631722450256348
    3. '(input' → logprob: -6.006722450256348
    4. '<|end|>' → logprob: -7.881722450256348
    5. 'int' → logprob: -9.131722450256348
    6. '(str' → logprob: -9.131722450256348
    7. '(
' → logprob: -11.381722450256348
    8. 'input' → logprob: -11.631722450256348
    9. '<int' → logprob: -11.881722450256348
    10. '[int' → logprob: -12.131722450256348

Token 120: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.013007387518882751
    2. 'input' → logprob: -4.388007164001465
    3. ',input' → logprob: -8.263007164001465
    4. ')' → logprob: -9.263007164001465
    5. '(' → logprob: -9.513007164001465
    6. ' input' → logprob: -10.263007164001465
    7. '=input' → logprob: -11.013007164001465
    8. ' (' → logprob: -11.888007164001465
    9. '```' → logprob: -12.638007164001465
    10. '   ' → logprob: -13.263007164001465

Token 121: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.014166101813316345
    2. ' input' → logprob: -4.264165878295898
    3. '   ' → logprob: -13.514165878295898
    4. '=input' → logprob: -14.889165878295898
    5. ' ' → logprob: -15.764165878295898
    6. 'int' → logprob: -15.889165878295898
    7. '(input' → logprob: -16.0141658782959
    8. ',input' → logprob: -16.1391658782959
    9. '	input' → logprob: -16.2641658782959
    10. 'str' → logprob: -16.3891658782959

Token 122: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0001158211671281606
    2. '()' → logprob: -9.125115394592285
    3. '())' → logprob: -12.250115394592285
    4. ')' → logprob: -14.125115394592285
    5. ' ().' → logprob: -14.375115394592285
    6. '(' → logprob: -15.250115394592285
    7. '()
' → logprob: -16.2501163482666
    8. '());' → logprob: -16.8751163482666
    9. '.readline' → logprob: -17.5001163482666
    10. '()>' → logprob: -17.5001163482666

Token 123: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -5.872261317563243e-05
    2. 'strip' → logprob: -9.750059127807617
    3. '(split' → logprob: -15.375059127807617
    4. 'rstrip' → logprob: -16.000059127807617
    5. 'spl' → logprob: -16.250059127807617
    6. ' split' → logprob: -16.750059127807617
    7. 'read' → logprob: -18.125059127807617
    8. ')' → logprob: -19.500059127807617
    9. '()' → logprob: -20.875059127807617
    10. '```' → logprob: -21.000059127807617

Token 124: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.002558422740548849
    2. '())' → logprob: -6.25255823135376
    3. '()' → logprob: -7.50255823135376
    4. '))' → logprob: -9.627558708190918
    5. '(' → logprob: -11.627558708190918
    6. '),' → logprob: -14.252558708190918
    7. ' )' → logprob: -14.502558708190918
    8. '()))' → logprob: -15.377558708190918
    9. ')))' → logprob: -15.627558708190918
    10. ')")' → logprob: -15.627558708190918

Token 125: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 126: ' graph' (ID: 7465)
  Prédit: 'graph'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'graph' (adapté à ' graph') → logprob: -0.5722794532775879
    2. ' graph' → logprob: -1.072279453277588
    3. ' edges' → logprob: -2.572279453277588
    4. 'edges' → logprob: -4.822279453277588
    5. ' 
' → logprob: -5.947279453277588
    6. 'n' → logprob: -6.447279453277588
    7. '	graph' → logprob: -6.947279453277588
    8. '
' → logprob: -7.322279453277588
    9. 'adj' → logprob: -7.447279453277588
    10. ' adjacency' → logprob: -7.697279453277588

Token 127: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.009773085825145245
    2. '=' → logprob: -4.634773254394531
    3. '[' → logprob: -12.259773254394531
    4. 's' → logprob: -12.509773254394531
    5. '[]' → logprob: -12.884773254394531
    6. ')' → logprob: -13.259773254394531
    7. '	' → logprob: -13.759773254394531
    8. ' ' → logprob: -14.259773254394531
    9. ']' → logprob: -14.634773254394531
    10. ' =[' → logprob: -15.259773254394531

Token 128: ' [[]' (ID: 182908)
  Prédit: ' [[]'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' [[]' → logprob: -0.007644728757441044
    2. '[' → logprob: -5.0076446533203125
    3. ' [' → logprob: -7.0076446533203125
    4. ' {' → logprob: -11.132644653320312
    5. ' defaultdict' → logprob: -12.257644653320312
    6. '{' → logprob: -12.632644653320312
    7. '[n' → logprob: -14.507644653320312
    8. ' [{}' → logprob: -15.007644653320312
    9. 'default' → logprob: -15.382644653320312
    10. 'collections' → logprob: -17.007644653320312

Token 129: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.6346163749694824
    2. 'for' → logprob: -0.8846163749694824
    3. ')' → logprob: -2.8846163749694824
    4. ']' → logprob: -7.759616374969482
    5. ',' → logprob: -8.13461685180664
    6. '(n' → logprob: -8.25961685180664
    7. '()' → logprob: -10.50961685180664
    8. ' ' → logprob: -10.75961685180664
    9. '	for' → logprob: -11.25961685180664
    10. '   ' → logprob: -11.50961685180664

Token 130: ' _' (ID: 1175)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.03828418254852295
    2. ' _' → logprob: -3.7882843017578125
    3. ' range' → logprob: -4.6632843017578125
    4. 'range' → logprob: -5.6632843017578125
    5. ' in' → logprob: -6.7882843017578125
    6. '_range' → logprob: -7.9132843017578125
    7. '(range' → logprob: -8.163284301757812
    8. ' ' → logprob: -9.913284301757812
    9. '_in' → logprob: -10.288284301757812
    10. 'in' → logprob: -10.413284301757812

Token 131: ' in' (ID: 306)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.010008218698203564
    2. ' range' → logprob: -5.010008335113525
    3. 'in' → logprob: -5.760008335113525
    4. ' in' → logprob: -9.010007858276367
    5. 'n' → logprob: -11.885007858276367
    6. '(range' → logprob: -12.510007858276367
    7. 'ange' → logprob: -12.760007858276367
    8. '(n' → logprob: -15.010007858276367
    9. '   ' → logprob: -16.010007858276367
    10. ' ' → logprob: -16.135007858276367

Token 132: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.008615399710834026
    2. ' range' → logprob: -4.758615493774414
    3. '(range' → logprob: -14.133615493774414
    4. 'n' → logprob: -16.008615493774414
    5. '	range' → logprob: -18.008615493774414
    6. 'rang' → logprob: -18.383615493774414
    7. '   ' → logprob: -19.008615493774414
    8. ' ' → logprob: -19.383615493774414
    9. 'r' → logprob: -20.133615493774414
    10. 'ran' → logprob: -20.883615493774414

Token 133: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -1.0206720617134124e-05
    2. '(' → logprob: -11.87501049041748
    3. 'range' → logprob: -13.37501049041748
    4. 'n' → logprob: -14.12501049041748
    5. '(range' → logprob: -14.50001049041748
    6. ' (' → logprob: -15.62501049041748
    7. ' range' → logprob: -16.000009536743164
    8. '   ' → logprob: -16.750009536743164
    9. ')n' → logprob: -17.375009536743164
    10. ' n' → logprob: -17.625009536743164

Token 134: '+' (ID: 10)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')]' → logprob: -7.465036105713807e-06
    2. ')]
' → logprob: -12.500007629394531
    3. ')' → logprob: -13.500007629394531
    4. ' )' → logprob: -14.000007629394531
    5. '+' → logprob: -14.125007629394531
    6. ')]

' → logprob: -15.000007629394531
    7. ')]
' → logprob: -16.12500762939453
    8. ']' → logprob: -16.12500762939453
    9. ')])' → logprob: -17.00000762939453
    10. '')]' → logprob: -17.37500762939453

Token 135: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00018363336857873946
    2. '0' → logprob: -8.750184059143066
    3. ' ' → logprob: -10.625184059143066
    4. ')' → logprob: -15.000184059143066
    5. '   ' → logprob: -15.500184059143066
    6. '2' → logprob: -16.00018310546875
    7. '```' → logprob: -17.12518310546875
    8. '7' → logprob: -17.93768310546875
    9. '``' → logprob: -18.00018310546875
    10. '6' → logprob: -18.12518310546875

Token 136: ')]
' (ID: 11587)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.00016706773021724075
    2. ']' → logprob: -8.750166893005371
    3. ')' → logprob: -11.875166893005371
    4. ' ]' → logprob: -14.375166893005371
    5. ' )' → logprob: -15.125166893005371
    6. ')]
' → logprob: -15.375166893005371
    7. '])' → logprob: -15.625166893005371
    8. '}]' → logprob: -16.375167846679688
    9. '')]' → logprob: -16.500167846679688
    10. ')]

' → logprob: -16.875167846679688

Token 137: '    
' (ID: 1944)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 138: '   ' (ID: 271)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.3169945478439331
    2. ' for' → logprob: -1.316994547843933
    3. '   ' → logprob: -5.816994667053223
    4. '	for' → logprob: -7.816994667053223
    5. '<|end|>' → logprob: -8.191994667053223
    6. ' ' → logprob: -10.441994667053223
    7. '    
' → logprob: -12.066994667053223
    8. '
' → logprob: -12.066994667053223
    9. ' 
' → logprob: -12.066994667053223
    10. '  ' → logprob: -12.191994667053223

Token 139: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.0010935462778434157
    2. ' for' → logprob: -7.25109338760376
    3. 'range' → logprob: -7.87609338760376
    4. ' range' → logprob: -13.626093864440918
    5. '
' → logprob: -14.001093864440918
    6. '_' → logprob: -14.751093864440918
    7. '   ' → logprob: -15.001093864440918
    8. '	for' → logprob: -15.001093864440918
    9. 'm' → logprob: -15.376093864440918
    10. 'in' → logprob: -15.501093864440918

Token 140: ' _' (ID: 1175)
  Prédit: ' _'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' _' → logprob: -0.03804194927215576
    2. '_' → logprob: -3.2880420684814453
    3. ' ' → logprob: -15.163042068481445
    4. '_i' → logprob: -16.288042068481445
    5. ' ' → logprob: -16.538042068481445
    6. ' i' → logprob: -17.038042068481445
    7. ' in' → logprob: -17.788042068481445
    8. '	' → logprob: -18.663042068481445
    9. ' _
' → logprob: -18.913042068481445
    10. ' __' → logprob: -18.913042068481445

Token 141: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.4811502993106842
    2. 'in' → logprob: -0.9811502695083618
    3. 'range' → logprob: -4.981150150299072
    4. ' range' → logprob: -8.98115062713623
    5. ' ' → logprob: -10.23115062713623
    6. '_' → logprob: -11.60615062713623
    7. '  ' → logprob: -12.48115062713623
    8. 'input' → logprob: -12.73115062713623
    9. 'int' → logprob: -14.10615062713623
    10. 'import' → logprob: -14.35615062713623

Token 142: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -8.64970643306151e-05
    2. ' range' → logprob: -9.375086784362793
    3. 'input' → logprob: -13.875086784362793
    4. '(range' → logprob: -15.500086784362793
    5. '	range' → logprob: -16.875085830688477
    6. '```' → logprob: -16.875085830688477
    7. 'r' → logprob: -17.125085830688477
    8. 'map' → logprob: -17.250085830688477
    9. ')' → logprob: -17.500085830688477
    10. 'int' → logprob: -17.625085830688477

Token 143: '(m' (ID: 2145)
  Prédit: '(m'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(m' → logprob: -0.0031929241959005594
    2. 'm' → logprob: -5.753192901611328
    3. ' m' → logprob: -11.378192901611328
    4. '(' → logprob: -13.378192901611328
    5. '	m' → logprob: -13.878192901611328
    6. ' (' → logprob: -14.628192901611328
    7. '   ' → logprob: -14.628192901611328
    8. ')m' → logprob: -15.628192901611328
    9. ',m' → logprob: -16.128192901611328
    10. '[m' → logprob: -16.753192901611328

Token 144: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0246173944324255
    2. '):
' → logprob: -3.7746174335479736
    3. ' ):' → logprob: -6.7746171951293945
    4. ')' → logprob: -9.024617195129395
    5. '):
' → logprob: -9.649617195129395
    6. ' ):
' → logprob: -10.649617195129395
    7. ':' → logprob: -11.149617195129395
    8. ' )' → logprob: -13.649617195129395
    9. '):

' → logprob: -14.149617195129395
    10. '   ' → logprob: -14.399617195129395

Token 145: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.7041396498680115
    2. '   ' → logprob: -1.5791397094726562
    3. ' u' → logprob: -1.7041397094726562
    4. ' line' → logprob: -3.2041397094726562
    5. '<|end|>' → logprob: -4.579139709472656
    6. ' x' → logprob: -4.704139709472656
    7. ' ' → logprob: -5.204139709472656
    8. 'u' → logprob: -5.204139709472656
    9. '```' → logprob: -5.204139709472656
    10. ' s' → logprob: -5.329139709472656

Token 146: ' u' (ID: 337)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'u' (adapté à ' u') → logprob: -0.016230842098593712
    2. ' u' → logprob: -4.141231060028076
    3. 'x' → logprob: -8.641230583190918
    4. '   ' → logprob: -11.141230583190918
    5. '	u' → logprob: -13.391230583190918
    6. '    
' → logprob: -14.266230583190918
    7. ' ' → logprob: -14.641230583190918
    8. ' x' → logprob: -14.766230583190918
    9. '```' → logprob: -14.766230583190918
    10. 'f' → logprob: -15.016230583190918

Token 147: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0001843485952122137
    2. ' ,' → logprob: -8.625184059143066
    3. ',v' → logprob: -12.500184059143066
    4. ',input' → logprob: -15.125184059143066
    5. ',u' → logprob: -15.375184059143066
    6. '‌,' → logprob: -15.500184059143066
    7. ',int' → logprob: -15.875184059143066
    8. ',n' → logprob: -16.500185012817383
    9. ',
' → logprob: -17.125185012817383
    10. '<|end|>' → logprob: -17.125185012817383

Token 148: ' v' (ID: 323)
  Prédit: ' v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' v' → logprob: -0.31327590346336365
    2. 'v' → logprob: -1.313275933265686
    3. ' ' → logprob: -12.063276290893555
    4. ',v' → logprob: -12.438276290893555
    5. '	v' → logprob: -13.313276290893555
    6. '_v' → logprob: -13.438276290893555
    7. '  ' → logprob: -15.313276290893555
    8. ' 
' → logprob: -15.563276290893555
    9. ',' → logprob: -15.813276290893555
    10. 'vv' → logprob: -16.063276290893555

Token 149: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.1269349306821823
    2. ' =' → logprob: -2.1269350051879883
    3. ')' → logprob: -12.376935005187988
    4. '=input' → logprob: -13.876935005187988
    5. ',' → logprob: -14.376935005187988
    6. '=int' → logprob: -14.376935005187988
    7. ')=' → logprob: -15.501935005187988
    8. '<|end|>' → logprob: -16.251934051513672
    9. ' ' → logprob: -16.626934051513672
    10. '=}' → logprob: -17.251934051513672

Token 150: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.001170460251159966
    2. 'map' → logprob: -6.751170635223389
    3. ' ' → logprob: -16.126171112060547
    4. '	map' → logprob: -16.126171112060547
    5. '(map' → logprob: -19.376171112060547
    6. '   ' → logprob: -19.626171112060547
    7. '  ' → logprob: -19.751171112060547
    8. ' mapa' → logprob: -19.751171112060547
    9. '.map' → logprob: -20.126171112060547
    10. ' ' → logprob: -20.751171112060547

Token 151: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.00017505438881926239
    2. '(input' → logprob: -9.125175476074219
    3. '(' → logprob: -9.875175476074219
    4. '<int' → logprob: -12.250175476074219
    5. '(str' → logprob: -12.375175476074219
    6. '=int' → logprob: -12.625175476074219
    7. '[int' → logprob: -14.250175476074219
    8. 'int' → logprob: -14.375175476074219
    9. '(in' → logprob: -15.375175476074219
    10. ' (' → logprob: -15.500175476074219

Token 152: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.9765217304229736
    2. '(input' → logprob: -1.1015217304229736
    3. ',input' → logprob: -1.6015217304229736
    4. '(int' → logprob: -2.7265217304229736
    5. ',int' → logprob: -4.7265214920043945
    6. '(' → logprob: -4.7265214920043945
    7. '(),' → logprob: -6.1015214920043945
    8. '=input' → logprob: -6.4765214920043945
    9. ' ,' → logprob: -7.2265214920043945
    10. ' (' → logprob: -7.7265214920043945

Token 153: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.03805079311132431
    2. ' input' → logprob: -3.288050889968872
    3. 'map' → logprob: -11.788050651550293
    4. 'int' → logprob: -13.663050651550293
    5. ' map' → logprob: -14.413050651550293
    6. 'list' → logprob: -17.66305160522461
    7. '(input' → logprob: -17.91305160522461
    8. ' ' → logprob: -18.03805160522461
    9. '=input' → logprob: -18.03805160522461
    10. '_input' → logprob: -18.28805160522461

Token 154: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -3.7697225252486533e-06
    2. '()' → logprob: -12.750003814697266
    3. ' ().' → logprob: -14.500003814697266
    4. '(' → logprob: -15.375003814697266
    5. '.' → logprob: -16.375003814697266
    6. '.split' → logprob: -17.500003814697266
    7. ')' → logprob: -18.000003814697266
    8. '())' → logprob: -19.125003814697266
    9. 'split' → logprob: -19.125003814697266
    10. '.readline' → logprob: -19.875003814697266

Token 155: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -3.128163257315464e-07
    2. 'strip' → logprob: -15.25
    3. ' split' → logprob: -17.625
    4. 'spl' → logprob: -18.125
    5. '.split' → logprob: -19.125
    6. '(split' → logprob: -20.0
    7. 'rstrip' → logprob: -21.125
    8. 'plit' → logprob: -21.25
    9. '_split' → logprob: -21.625
    10. 's' → logprob: -21.875

Token 156: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.1362965703010559
    2. '())' → logprob: -2.136296510696411
    3. '()' → logprob: -4.76129674911499
    4. '())
' → logprob: -7.76129674911499
    5. ')
' → logprob: -8.136296272277832
    6. '(' → logprob: -11.136296272277832
    7. '()
' → logprob: -11.511296272277832
    8. ' )' → logprob: -12.011296272277832
    9. '   ' → logprob: -12.261296272277832
    10. ')`' → logprob: -13.011296272277832

Token 157: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0002599053841549903
    2. ')' → logprob: -8.750260353088379
    3. '
' → logprob: -10.000260353088379
    4. '<|end|>' → logprob: -10.875260353088379
    5. '        
' → logprob: -11.500260353088379
    6. '   ' → logprob: -11.500260353088379
    7. ',' → logprob: -12.625260353088379
    8. ')
' → logprob: -13.000260353088379
    9. '):
' → logprob: -13.125260353088379
    10. '#' → logprob: -13.250260353088379

Token 158: ' graph' (ID: 7465)
  Prédit: ' graph'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' graph' → logprob: -0.5241413712501526
    2. 'graph' (adapté à ' graph') → logprob: -0.8991413712501526
    3. '	graph' → logprob: -7.524141311645508
    4. '       ' → logprob: -8.274141311645508
    5. '   ' → logprob: -8.649141311645508
    6. '(graph' → logprob: -11.524141311645508
    7. '
' → logprob: -11.774141311645508
    8. '```' → logprob: -11.774141311645508
    9. '_graph' → logprob: -12.024141311645508
    10. ' 
' → logprob: -12.899141311645508

Token 159: '[u' (ID: 48750)
  Prédit: '[u'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[u' → logprob: -2.1888679839321412e-05
    2. '[v' → logprob: -10.750021934509277
    3. '[' → logprob: -14.750021934509277
    4. ' [' → logprob: -17.75002098083496
    5. 'u' → logprob: -19.50002098083496
    6. '[user' → logprob: -20.00002098083496
    7. '```' → logprob: -20.50002098083496
    8. '][' → logprob: -20.75002098083496
    9. '\[' → logprob: -20.75002098083496
    10. '[node' → logprob: -21.12502098083496

Token 160: '].' (ID: 1651)
  Prédit: '].'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '].' → logprob: -0.0008974085212685168
    2. '.append' → logprob: -7.625897407531738
    3. ').' → logprob: -8.125897407531738
    4. '[u' → logprob: -10.000897407531738
    5. ']' → logprob: -10.375897407531738
    6. '.' → logprob: -11.000897407531738
    7. ' ].' → logprob: -11.125897407531738
    8. '[' → logprob: -13.125897407531738
    9. '   ' → logprob: -13.125897407531738
    10. '[v' → logprob: -15.000897407531738

Token 161: 'append' (ID: 9132)
  Prédit: 'append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'append' → logprob: -6.704273118884885e-07
    2. ' append' → logprob: -14.875000953674316
    3. '.append' → logprob: -15.500000953674316
    4. 'appen' → logprob: -18.625
    5. '_append' → logprob: -19.75
    6. '	append' → logprob: -19.75
    7. 'app' → logprob: -20.0
    8. 'add' → logprob: -21.25
    9. 'Append' → logprob: -21.375
    10. ' ' → logprob: -21.625

Token 162: '(v' (ID: 6932)
  Prédit: '(v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(v' → logprob: -6.2729995988775045e-06
    2. '(' → logprob: -12.000006675720215
    3. '((' → logprob: -18.7500057220459
    4. ' (' → logprob: -19.1250057220459
    5. '(
' → logprob: -19.3750057220459
    6. 'v' → logprob: -20.2500057220459
    7. '(V' → logprob: -21.1250057220459
    8. '(u' → logprob: -21.2500057220459
    9. '(n' → logprob: -21.8750057220459
    10. '(vo' → logprob: -22.1250057220459

Token 163: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.057743949990254e-05
    2. ' )' → logprob: -10.875020980834961
    3. ')
' → logprob: -13.625020980834961
    4. ')}' → logprob: -16.62502098083496
    5. '))' → logprob: -16.75002098083496
    6. '   ' → logprob: -17.00002098083496
    7. ')`' → logprob: -17.00002098083496
    8. '),' → logprob: -17.25002098083496
    9. ')#' → logprob: -17.87502098083496
    10. ' ' → logprob: -17.87502098083496

Token 164: '    
' (ID: 1944)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 165: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5472499132156372
    2. 'dist' → logprob: -1.1722499132156372
    3. ' dist' → logprob: -3.4222497940063477
    4. 'dp' → logprob: -3.4222497940063477
    5. 'from' → logprob: -4.672249794006348
    6. ' distances' → logprob: -4.797249794006348
    7. 'distance' → logprob: -5.297249794006348
    8. ' dp' → logprob: -5.672249794006348
    9. '    
' → logprob: -5.797249794006348
    10. ' from' → logprob: -5.922249794006348

Token 166: ' #' (ID: 1069)
  Prédit: 'dist'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dist' → logprob: -0.294055312871933
    2. 'from' → logprob: -2.294055223464966
    3. 'dp' → logprob: -2.669055223464966
    4. 'INF' → logprob: -3.294055223464966
    5. '#' (adapté à ' #') → logprob: -4.294055461883545
    6. 'distance' → logprob: -5.294055461883545
    7. 'turn' → logprob: -5.669055461883545
    8. 'steps' → logprob: -5.919055461883545
    9. 'inf' → logprob: -6.169055461883545
    10. 'max' → logprob: -6.169055461883545

Token 167: ' On' (ID: 2160)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.0275245904922485
    2. 'from' → logprob: -1.1525245904922485
    3. ' from' → logprob: -3.027524471282959
    4. 'distance' → logprob: -3.027524471282959
    5. ' distances' → logprob: -3.527524471282959
    6. 'dist' → logprob: -3.527524471282959
    7. ' dist' → logprob: -3.777524471282959
    8. 'def' → logprob: -4.027524471282959
    9. 'INF' → logprob: -4.152524471282959
    10. 'dp' → logprob: -4.402524471282959

Token 168: ' va' (ID: 3423)
  Prédit: ' dist'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' dist' → logprob: -1.272942066192627
    2. ' from' → logprob: -1.397942066192627
    3. ' distances' → logprob: -1.897942066192627
    4. 'from' → logprob: -2.272942066192627
    5. ' queue' → logprob: -3.022942066192627
    6. 'dist' → logprob: -3.272942066192627
    7. ' distance' → logprob: -3.522942066192627
    8. ' reverse' → logprob: -3.897942066192627
    9. ' que' → logprob: -4.397942066192627
    10. 'queue' → logprob: -5.022942066192627

Token 169: ' créer' (ID: 40938)
  Prédit: ' utiliser'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' utiliser' → logprob: -1.3666667938232422
    2. ' créer' → logprob: -1.8666667938232422
    3. ' invers' → logprob: -2.366666793823242
    4. ' construire' → logprob: -2.366666793823242
    5. 'util' → logprob: -2.616666793823242
    6. ' stock' → logprob: -2.991666793823242
    7. 'tr' → logprob: -3.366666793823242
    8. 'impl' → logprob: -3.491666793823242
    9. ' travailler' → logprob: -3.491666793823242
    10. ' calcul' → logprob: -3.616666793823242

Token 170: ' des' (ID: 731)
  Prédit: ' un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.2864100933074951
    2. ' une' → logprob: -1.5364100933074951
    3. 'un' → logprob: -4.161410331726074
    4. 'une' → logprob: -4.536410331726074
    5. ' trois' → logprob: -6.411410331726074
    6. ' la' → logprob: -6.536410331726074
    7. ' le' → logprob: -6.786410331726074
    8. ' les' → logprob: -8.036410331726074
    9. ' graph' → logprob: -8.286410331726074
    10. ' ' → logprob: -8.286410331726074

Token 171: ' graph' (ID: 7465)
  Prédit: ' états'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' états' → logprob: -0.47147253155708313
    2. ' graph' → logprob: -1.9714725017547607
    3. ' niveaux' → logprob: -2.7214725017547607
    4. ' distances' → logprob: -3.0964725017547607
    5. 'graph' → logprob: -3.5964725017547607
    6. ' tableaux' → logprob: -3.8464725017547607
    7. ' listes' → logprob: -4.34647274017334
    8. 'n' → logprob: -5.09647274017334
    9. 'gr' → logprob: -5.22147274017334
    10. ' couches' → logprob: -5.34647274017334

Token 172: 'es' (ID: 268)
  Prédit: 'es'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'es' → logprob: -0.11020833998918533
    2. 's' → logprob: -2.48520827293396
    3. 'e' → logprob: -4.735208511352539
    4. 'iques' → logprob: -4.860208511352539
    5. 'raph' → logprob: -6.610208511352539
    6. 'res' → logprob: -7.360208511352539
    7. '#' → logprob: -7.735208511352539
    8. '[]' → logprob: -8.110208511352539
    9. 'mes' → logprob: -8.485208511352539
    10. 'ues' → logprob: -8.735208511352539

Token 173: ' dér' (ID: 75583)
  Prédit: ' auxilia'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' auxilia' → logprob: -1.2363091707229614
    2. ' invers' → logprob: -1.8613091707229614
    3. ' de' → logprob: -2.361309051513672
    4. 'aux' → logprob: -2.486309051513672
    5. ' secondaires' → logprob: -2.611309051513672
    6. ' supplémentaires' → logprob: -2.736309051513672
    7. 'de' → logprob: -3.861309051513672
    8. 'd' → logprob: -3.861309051513672
    9. ' interm' → logprob: -3.861309051513672
    10. 's' → logprob: -3.861309051513672

Token 174: 'iv' (ID: 349)
  Prédit: 'iv'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iv' → logprob: -0.0024875495582818985
    2. 'ivée' → logprob: -6.627487659454346
    3. 'ivé' → logprob: -7.252487659454346
    4. '```' → logprob: -7.877487659454346
    5. '``' → logprob: -11.877487182617188
    6. 'ives' → logprob: -11.877487182617188
    7. 'ív' → logprob: -12.002487182617188
    8. 'i' → logprob: -12.127487182617188
    9. 'ités' → logprob: -12.377487182617188
    10. '#' → logprob: -12.377487182617188

Token 175: 'és' (ID: 1756)
  Prédit: 'és'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'és' → logprob: -0.02687758021056652
    2. 'es' → logprob: -3.6518776416778564
    3. 'é' → logprob: -7.901877403259277
    4. '#' → logprob: -9.776877403259277
    5. '```' → logprob: -10.151877403259277
    6. 'e' → logprob: -10.651877403259277
    7. 'ées' → logprob: -11.651877403259277
    8. '##' → logprob: -12.151877403259277
    9. 'ès' → logprob: -12.151877403259277
    10. 's' → logprob: -12.276877403259277

Token 176: ' représentant' (ID: 136122)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.31710314750671387
    2. '<|end|>' → logprob: -2.567103147506714
    3. ' ,' → logprob: -3.567103147506714
    4. '   ' → logprob: -3.692103147506714
    5. ' ' → logprob: -4.192103385925293
    6. ' (' → logprob: -4.317103385925293
    7. 's' → logprob: -4.692103385925293
    8. ' de' → logprob: -4.817103385925293
    9. '.' → logprob: -4.942103385925293
    10. '[' → logprob: -5.067103385925293

Token 177: ' les' (ID: 1341)
  Prédit: ' les'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.5672912001609802
    2. 'les' → logprob: -1.067291259765625
    3. ' des' → logprob: -3.442291259765625
    4. ' l' → logprob: -3.817291259765625
    5. 'l' → logprob: -4.692291259765625
    6. ' states' → logprob: -5.817291259765625
    7. 'le' → logprob: -5.817291259765625
    8. ' le' → logprob: -6.067291259765625
    9. ' chaque' → logprob: -6.067291259765625
    10. ' toutes' → logprob: -6.192291259765625

Token 178: ' transitions' (ID: 59824)
  Prédit: ' états'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' états' → logprob: -0.04266878217458725
    2. ' déplacements' → logprob: -4.54266881942749
    3. ' mouvements' → logprob: -4.79266881942749
    4. 'ét' → logprob: -5.04266881942749
    5. ' positions' → logprob: -6.29266881942749
    6. ' étapes' → logprob: -6.41766881942749
    7. ' transitions' → logprob: -6.41766881942749
    8. ' différents' → logprob: -6.54266881942749
    9. ' ' → logprob: -6.66766881942749
    10. 'positions' → logprob: -6.91766881942749

Token 179: ' possibles' (ID: 97753)
  Prédit: ' entre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' entre' → logprob: -0.31954917311668396
    2. ' between' → logprob: -2.444549083709717
    3. ' de' → logprob: -3.194549083709717
    4. ' possibles' → logprob: -3.569549083709717
    5. ' des' → logprob: -3.694549083709717
    6. 's' → logprob: -5.069549083709717
    7. 'between' → logprob: -5.069549083709717
    8. ' supplémentaires' → logprob: -5.069549083709717
    9. ' possible' → logprob: -5.194549083709717
    10. 'possible' → logprob: -5.444549083709717

Token 180: '
' (ID: 198)
  Prédit: ' des'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' des' → logprob: -1.5075101852416992
    2. ' en' → logprob: -2.132510185241699
    3. ',' → logprob: -2.257510185241699
    4. ' entre' → logprob: -2.382510185241699
    5. ' pour' → logprob: -2.882510185241699
    6. '.' → logprob: -2.882510185241699
    7. ' avec' → logprob: -2.882510185241699
    8. ' sur' → logprob: -3.132510185241699
    9. ' à' → logprob: -3.132510185241699
    10. '   ' → logprob: -3.757510185241699

Token 181: '   ' (ID: 271)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.1720610857009888
    2. ' ' → logprob: -1.9220610857009888
    3. ' entre' → logprob: -2.047060966491699
    4. ' ,' → logprob: -2.297060966491699
    5. ' en' → logprob: -2.547060966491699
    6. ' des' → logprob: -3.297060966491699
    7. '  
' → logprob: -3.672060966491699
    8. ' 
' → logprob: -3.797060966491699
    9. ' de' → logprob: -4.047060966491699
    10. '   ' → logprob: -4.297060966491699

Token 182: ' #' (ID: 1069)
  Prédit: ' entre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' entre' → logprob: -1.4574397802352905
    2. ',' → logprob: -1.8324397802352905
    3. ' des' → logprob: -2.08243989944458
    4. ' en' → logprob: -2.08243989944458
    5. ' sur' → logprob: -3.20743989944458
    6. ' à' → logprob: -3.45743989944458
    7. ' de' → logprob: -3.58243989944458
    8. '.' → logprob: -3.58243989944458
    9. ' pour' → logprob: -3.58243989944458
    10. ' ,' → logprob: -3.58243989944458

Token 183: ' en' (ID: 469)
  Prédit: ' des'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' des' → logprob: -1.2890278100967407
    2. ' for' → logprob: -2.039027690887451
    3. ' states' → logprob: -2.664027690887451
    4. 'from' → logprob: -2.789027690887451
    5. ' par' → logprob: -2.914027690887451
    6. 'for' → logprob: -3.039027690887451
    7. ' de' → logprob: -3.539027690887451
    8. ' entre' → logprob: -3.664027690887451
    9. ' pour' → logprob: -3.789027690887451
    10. '<|end|>' → logprob: -3.914027690887451

Token 184: ' un' (ID: 537)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.29402226209640503
    2. '3' → logprob: -2.79402232170105
    3. 'exact' → logprob: -2.79402232170105
    4. ' k' → logprob: -3.29402232170105
    5. 'k' → logprob: -4.044022083282471
    6. ' trois' → logprob: -4.169022083282471
    7. '1' → logprob: -4.419022083282471
    8. 't' → logprob: -4.794022083282471
    9. ' un' → logprob: -5.419022083282471
    10. 'nombre' → logprob: -5.544022083282471

Token 185: ' nombre' (ID: 9733)
  Prédit: 'tour'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tour' → logprob: -0.661960244178772
    2. ' tour' → logprob: -0.911960244178772
    3. ' seul' → logprob: -3.5369601249694824
    4. ' ' → logprob: -4.536960124969482
    5. 'se' → logprob: -4.661960124969482
    6. 't' → logprob: -4.786960124969482
    7. 'pas' → logprob: -5.661960124969482
    8. 'k' → logprob: -5.786960124969482
    9. ' pas' → logprob: -6.036960124969482
    10. ' tours' → logprob: -6.411960124969482

Token 186: ' donné' (ID: 52079)
  Prédit: ' exact'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' exact' → logprob: -0.5439848303794861
    2. 'exact' → logprob: -1.2939848899841309
    3. ' de' → logprob: -2.793984889984131
    4. ' d' → logprob: -3.668984889984131
    5. ' ' → logprob: -4.043984889984131
    6. 'de' → logprob: -4.543984889984131
    7. 'd' → logprob: -5.293984889984131
    8. '_' → logprob: -5.543984889984131
    9. '  ' → logprob: -5.918984889984131
    10. '=' → logprob: -5.918984889984131

Token 187: ' de' (ID: 334)
  Prédit: ' d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.6997984647750854
    2. ' de' → logprob: -1.0747984647750854
    3. 'de' → logprob: -2.324798583984375
    4. '  ' → logprob: -3.824798583984375
    5. 'd' → logprob: -3.949798583984375
    6. ' ' → logprob: -4.449798583984375
    7. '=' → logprob: -5.574798583984375
    8. 'exact' → logprob: -6.199798583984375
    9. ' exact' → logprob: -7.074798583984375
    10. ' =' → logprob: -7.074798583984375

Token 188: ' pas' (ID: 2173)
  Prédit: ' pas'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pas' → logprob: -0.6708155274391174
    2. 'pas' → logprob: -0.7958155274391174
    3. ' ' → logprob: -3.7958154678344727
    4. ' steps' → logprob: -5.420815467834473
    5. 'steps' → logprob: -5.920815467834473
    6. 'k' → logprob: -6.045815467834473
    7. 't' → logprob: -7.295815467834473
    8. ' pasos' → logprob: -7.420815467834473
    9. ' passos' → logprob: -7.670815467834473
    10. ' tours' → logprob: -7.920815467834473

Token 189: '
' (ID: 198)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.903494656085968
    2. '.' → logprob: -1.7784945964813232
    3. 'a' → logprob: -2.4034945964813232
    4. ' ' → logprob: -2.7784945964813232
    5. ' (' → logprob: -3.0284945964813232
    6. ' ,' → logprob: -3.1534945964813232
    7. '=' → logprob: -3.7784945964813232
    8. ':' → logprob: -3.9034945964813232
    9. ' de' → logprob: -3.9034945964813232
    10. '(' → logprob: -4.028494834899902

Token 190: '   ' (ID: 271)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.9530001878738403
    2. '[' → logprob: -2.078000068664551
    3. ',' → logprob: -2.203000068664551
    4. '.' → logprob: -2.828000068664551
    5. '=' → logprob: -3.203000068664551
    6. ':' → logprob: -3.328000068664551
    7. ' ' → logprob: -3.453000068664551
    8. '_' → logprob: -3.703000068664551
    9. ' a' → logprob: -3.828000068664551
    10. '#' → logprob: -3.953000068664551

Token 191: ' #' (ID: 1069)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.9608082175254822
    2. 'a' → logprob: -1.460808277130127
    3. ' ' → logprob: -1.835808277130127
    4. '#' (adapté à ' #') → logprob: -2.960808277130127
    5. '_' → logprob: -3.335808277130127
    6. ' 
' → logprob: -4.085808277130127
    7. ' def' → logprob: -4.335808277130127
    8. '
' → logprob: -4.460808277130127
    9. ' a' → logprob: -4.710808277130127
    10. '.' → logprob: -4.835808277130127

Token 192: ' Pour' (ID: 13931)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -1.3430511951446533
    2. ' for' → logprob: -1.9680511951446533
    3. 'from' → logprob: -2.0930511951446533
    4. 'for' → logprob: -2.2180511951446533
    5. 'a' → logprob: -2.5930511951446533
    6. 'k' → logprob: -2.9680511951446533
    7. ' from' → logprob: -3.0930511951446533
    8. ' ' → logprob: -3.2180511951446533
    9. ' def' → logprob: -3.5930511951446533
    10. ' a' → logprob: -4.093050956726074

Token 193: ' chaque' (ID: 21194)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.523306667804718
    2. 'k' → logprob: -1.3983066082000732
    3. ' pas' → logprob: -2.8983066082000732
    4. ' step' → logprob: -3.2733066082000732
    5. 'step' → logprob: -4.148306846618652
    6. 'pas' → logprob: -4.773306846618652
    7. ' distance' → logprob: -4.898306846618652
    8. ' length' → logprob: -5.148306846618652
    9. ' dist' → logprob: -5.273306846618652
    10. ' d' → logprob: -5.398306846618652

Token 194: ' longueur' (ID: 104613)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.0513894259929657
    2. ' k' → logprob: -3.551389455795288
    3. 'step' → logprob: -4.426389217376709
    4. 'distance' → logprob: -6.051389217376709
    5. ' step' → logprob: -6.176389217376709
    6. 'length' → logprob: -6.676389217376709
    7. 'steps' → logprob: -7.176389217376709
    8. 'pas' → logprob: -7.551389217376709
    9. 'd' → logprob: -7.551389217376709
    10. ' length' → logprob: -7.801389217376709

Token 195: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.40981248021125793
    2. 'k' → logprob: -1.9098124504089355
    3. ' in' → logprob: -2.2848124504089355
    4. ' de' → logprob: -2.9098124504089355
    5. 'de' → logprob: -4.6598124504089355
    6. ' d' → logprob: -5.1598124504089355
    7. 'in' → logprob: -6.2848124504089355
    8. ' possible' → logprob: -6.4098124504089355
    9. ' i' → logprob: -6.5348124504089355
    10. '1' → logprob: -6.5348124504089355

Token 196: ' dans' (ID: 2671)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.03487148508429527
    2. 'in' → logprob: -3.4098715782165527
    3. ' ' → logprob: -8.284871101379395
    4. 's' → logprob: -8.409871101379395
    5. ',' → logprob: -9.222371101379395
    6. 'en' → logprob: -9.284871101379395
    7. 'dans' → logprob: -9.534871101379395
    8. 'k' → logprob: -9.597371101379395
    9. 'a' → logprob: -10.034871101379395
    10. '_in' → logprob: -10.222371101379395

Token 197: ' {' (ID: 354)
  Prédit: '[a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[a' → logprob: -0.025738604366779327
    2. ' [' → logprob: -4.025738716125488
    3. '{' → logprob: -5.400738716125488
    4. '(a' → logprob: -6.150738716125488
    5. ' (' → logprob: -7.525738716125488
    6. ' {' → logprob: -8.025738716125488
    7. '[' → logprob: -10.275738716125488
    8. ' a' → logprob: -11.900738716125488
    9. 'a' → logprob: -12.275738716125488
    10. '   ' → logprob: -13.775738716125488

Token 198: 'a' (ID: 64)
  Prédit: 'a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -4.1557283111615106e-05
    2. ' a' → logprob: -10.125041961669922
    3. '[a' → logprob: -14.000041961669922
    4. '   ' → logprob: -15.000041961669922
    5. ''a' → logprob: -16.500041961669922
    6. ' ' → logprob: -16.500041961669922
    7. '	a' → logprob: -17.500041961669922
    8. '{' → logprob: -17.625041961669922
    9. '(a' → logprob: -17.625041961669922
    10. '  ' → logprob: -18.750041961669922

Token 199: ',b' (ID: 17568)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.04864073172211647
    2. ',b' → logprob: -3.048640727996826
    3. ' ,' → logprob: -9.923641204833984
    4. ',a' → logprob: -12.673641204833984
    5. 'b' → logprob: -14.923641204833984
    6. ',c' → logprob: -16.048641204833984
    7. ',y' → logprob: -16.173641204833984
    8. '}' → logprob: -16.298641204833984
    9. ',k' → logprob: -16.298641204833984
    10. ',B' → logprob: -16.673641204833984

Token 200: ',c' (ID: 22261)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.20149002969264984
    2. ',c' → logprob: -1.701490044593811
    3. ' ,' → logprob: -9.70149040222168
    4. ',b' → logprob: -11.57649040222168
    5. 'c' → logprob: -13.32649040222168
    6. ',a' → logprob: -13.95149040222168
    7. ',k' → logprob: -14.32649040222168
    8. ',",' → logprob: -14.45149040222168
    9. ',char' → logprob: -15.20149040222168
    10. ',p' → logprob: -15.32649040222168

Token 201: '},' (ID: 4180)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '}' → logprob: -0.7076713442802429
    2. '}:' → logprob: -0.8326713442802429
    3. '},' → logprob: -3.5826714038848877
    4. ' }' → logprob: -3.9576714038848877
    5. ' }:' → logprob: -4.332671165466309
    6. ',' → logprob: -4.707671165466309
    7. ' },' → logprob: -6.207671165466309
    8. ':' → logprob: -7.332671165466309
    9. ' ,' → logprob: -8.207671165466309
    10. '   ' → logprob: -9.082671165466309

Token 202: ' on' (ID: 402)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -1.0899536609649658
    2. '   ' → logprob: -1.2149536609649658
    3. ' distances' → logprob: -2.339953660964966
    4. ' next' → logprob: -2.589953660964966
    5. 'for' → logprob: -3.339953660964966
    6. ' dist' → logprob: -3.589953660964966
    7. 'next' → logprob: -4.089953422546387
    8. ' k' → logprob: -4.214953422546387
    9. ' steps' → logprob: -4.339953422546387
    10. 'dist' → logprob: -4.464953422546387

Token 203: ' construit' (ID: 119882)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.6133607029914856
    2. 'for' → logprob: -1.6133606433868408
    3. 'def' → logprob: -1.7383606433868408
    4. ' def' → logprob: -2.988360643386841
    5. ':' → logprob: -4.61336088180542
    6. ' bfs' → logprob: -5.61336088180542
    7. ' will' → logprob: -5.73836088180542
    8. ' =' → logprob: -6.86336088180542
    9. '...' → logprob: -6.98836088180542
    10. ' continue' → logprob: -7.11336088180542

Token 204: ' un' (ID: 537)
  Prédit: ' un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.09877392649650574
    2. ' a' → logprob: -3.098773956298828
    3. ' une' → logprob: -4.473773956298828
    4. ' def' → logprob: -4.723773956298828
    5. ' k' → logprob: -4.848773956298828
    6. 'def' → logprob: -5.098773956298828
    7. ' graph' → logprob: -5.348773956298828
    8. 'un' → logprob: -5.973773956298828
    9. 'k' → logprob: -6.473773956298828
    10. 'a' → logprob: -7.098773956298828

Token 205: ' grap' (ID: 60955)
  Prédit: 'graph'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'graph' → logprob: -1.0412203073501587
    2. ' graph' → logprob: -1.1662203073501587
    3. ' new' → logprob: -2.791220188140869
    4. 'def' → logprob: -2.791220188140869
    5. 'new' → logprob: -3.291220188140869
    6. 'dist' → logprob: -3.541220188140869
    7. 'distance' → logprob: -3.791220188140869
    8. 'reachable' → logprob: -3.916220188140869
    9. 'next' → logprob: -4.041220188140869
    10. ' next' → logprob: -4.416220188140869

Token 206: 'he' (ID: 273)
  Prédit: 'h'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'h' → logprob: -0.7053472995758057
    2. 'he' → logprob: -0.7053472995758057
    3. 'aphe' → logprob: -4.705347061157227
    4. 'ph' → logprob: -6.455347061157227
    5. '#' → logprob: -8.080347061157227
    6. '   ' → logprob: -8.705347061157227
    7. 'phe' → logprob: -8.830347061157227
    8. 'hap' → logprob: -8.955347061157227
    9. '       ' → logprob: -9.705347061157227
    10. '[' → logprob: -9.705347061157227

Token 207: ' "' (ID: 392)
  Prédit: '_k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_k' → logprob: -0.07073500007390976
    2. '_' → logprob: -4.695734977722168
    3. ' de' → logprob: -4.695734977722168
    4. 'de' → logprob: -4.695734977722168
    5. 'k' → logprob: -5.070734977722168
    6. '_der' → logprob: -5.570734977722168
    7. '_de' → logprob: -5.945734977722168
    8. ' des' → logprob: -6.195734977722168
    9. ' k' → logprob: -6.195734977722168
    10. '_d' → logprob: -6.320734977722168

Token 208: 'k' (ID: 74)
  Prédit: 'k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -1.1620240211486816
    2. ' k' → logprob: -1.2870240211486816
    3. ' de' → logprob: -3.0370240211486816
    4. ' step' → logprob: -3.0370240211486816
    5. 'de' → logprob: -3.2870240211486816
    6. ' multi' → logprob: -3.5370240211486816
    7. 'step' → logprob: -3.6620240211486816
    8. ' derived' → logprob: -3.7870240211486816
    9. '_k' → logprob: -4.037024021148682
    10. 'steps' → logprob: -4.162024021148682

Token 209: '-step' (ID: 41570)
  Prédit: '-step'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-step' → logprob: -0.615291178226471
    2. '_steps' → logprob: -1.8652911186218262
    3. '-' → logprob: -1.9902911186218262
    4. '_step' → logprob: -3.240291118621826
    5. '_' → logprob: -3.740291118621826
    6. ')' → logprob: -3.990291118621826
    7. ' -' → logprob: -4.490291118621826
    8. ')-' → logprob: -4.615291118621826
    9. '}' → logprob: -4.865291118621826
    10. '_edges' → logprob: -4.990291118621826

Token 210: '"' (ID: 1)
  Prédit: '"'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.1579955816268921
    2. '_graph' → logprob: -2.1579957008361816
    3. 's' → logprob: -3.6579957008361816
    4. 'graph' → logprob: -5.907995700836182
    5. '_edges' → logprob: -7.532995700836182
    6. '"}' → logprob: -8.657995223999023
    7. ' graph' → logprob: -8.907995223999023
    8. '_' → logprob: -9.032995223999023
    9. ' "' → logprob: -9.157995223999023
    10. '"_' → logprob: -9.282995223999023

Token 211: ' où' (ID: 15113)
  Prédit: '_graph'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_graph' → logprob: -0.30896419286727905
    2. 's' → logprob: -1.9339642524719238
    3. ' s' → logprob: -3.683964252471924
    4. '_k' → logprob: -4.058964252471924
    5. '_steps' → logprob: -4.058964252471924
    6. '_s' → logprob: -4.308964252471924
    7. '_' → logprob: -4.683964252471924
    8. 'graph' → logprob: -5.058964252471924
    9. 'graphs' → logprob: -5.558964252471924
    10. '_edges' → logprob: -5.808964252471924

Token 212: ' il' (ID: 1793)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.2763127386569977
    2. 'for' → logprob: -2.151312828063965
    3. ' edges' → logprob: -3.026312828063965
    4. ' each' → logprob: -4.276312828063965
    5. ' distances' → logprob: -4.651312828063965
    6. ' next' → logprob: -4.776312828063965
    7. ' the' → logprob: -4.901312828063965
    8. 'edges' → logprob: -5.276312828063965
    9. 'def' → logprob: -5.401312828063965
    10. '   ' → logprob: -5.651312828063965

Token 213: ' y' (ID: 342)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.04258984699845314
    2. ''s' → logprob: -4.2925896644592285
    3. 'est' → logprob: -4.6675896644592285
    4. ' y' → logprob: -5.1675896644592285
    5. ' est' → logprob: -5.5425896644592285
    6. ' is' → logprob: -5.7925896644592285
    7. ' ' → logprob: -6.5425896644592285
    8. ' s' → logprob: -6.9175896644592285
    9. 'is' → logprob: -6.9175896644592285
    10. '   ' → logprob: -7.6675896644592285

Token 214: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.9511205554008484
    2. 's' → logprob: -1.0761206150054932
    3. 'est' → logprob: -2.076120615005493
    4. ' a' → logprob: -3.451120615005493
    5. 'ex' → logprob: -3.826120615005493
    6. 'are' → logprob: -4.076120376586914
    7. 'n' → logprob: -4.201120376586914
    8. 'is' → logprob: -4.451120376586914
    9. 'possible' → logprob: -4.576120376586914
    10. 'edges' → logprob: -5.076120376586914

Token 215: ' une' (ID: 2463)
  Prédit: ' un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.251420259475708
    2. ' une' → logprob: -2.376420259475708
    3. 'un' → logprob: -2.751420259475708
    4. ' des' → logprob: -3.626420259475708
    5. 'n' → logprob: -4.376420021057129
    6. 'une' → logprob: -5.001420021057129
    7. ' ' → logprob: -5.376420021057129
    8. ' a' → logprob: -5.501420021057129
    9. 'des' → logprob: -6.376420021057129
    10. ' n' → logprob: -6.751420021057129

Token 216: ' ar' (ID: 646)
  Prédit: ' queue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' queue' → logprob: -1.2126506567001343
    2. 'queue' → logprob: -2.087650775909424
    3. 'edge' → logprob: -2.587650775909424
    4. ' edge' → logprob: -2.712650775909424
    5. 'ar' → logprob: -2.837650775909424
    6. ' are' → logprob: -3.212650775909424
    7. 'for' → logprob: -3.337650775909424
    8. 'are' → logprob: -3.462650775909424
    9. ' ar' → logprob: -3.587650775909424
    10. 'edges' → logprob: -3.587650775909424

Token 217: 'ête' (ID: 16808)
  Prédit: 'te'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'te' → logprob: -0.40545138716697693
    2. 'ête' → logprob: -1.5304514169692993
    3. '^' → logprob: -2.7804512977600098
    4. 't' → logprob: -3.6554512977600098
    5. 'ˆ' → logprob: -5.03045129776001
    6. 'c' → logprob: -5.40545129776001
    7. '�' → logprob: -5.90545129776001
    8. '#' → logprob: -6.28045129776001
    9. '̂' → logprob: -6.28045129776001
    10. 'ê' → logprob: -6.65545129776001

Token 218: '
' (ID: 198)
  Prédit: ' entre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' entre' → logprob: -0.5405740141868591
    2. 's' → logprob: -1.915574073791504
    3. ' ' → logprob: -2.540574073791504
    4. ' de' → logprob: -2.915574073791504
    5. 'from' → logprob: -3.165574073791504
    6. ' between' → logprob: -3.915574073791504
    7. ' from' → logprob: -4.040574073791504
    8. 'u' → logprob: -4.415574073791504
    9. '<|end|>' → logprob: -4.790574073791504
    10. 'entre' → logprob: -4.915574073791504

Token 219: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5555455684661865
    2. '<|end|>' → logprob: -2.0555455684661865
    3. ' entre' → logprob: -2.0555455684661865
    4. 's' → logprob: -2.5555455684661865
    5. ',' → logprob: -4.430545806884766
    6. ' between' → logprob: -4.430545806884766
    7. 'from' → logprob: -4.680545806884766
    8. ' s' → logprob: -4.680545806884766
    9. '  ' → logprob: -5.055545806884766
    10. ' ,' → logprob: -5.555545806884766

Token 220: ' #' (ID: 1069)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7200736999511719
    2. ' entre' → logprob: -0.9700736999511719
    3. '  ' → logprob: -3.470073699951172
    4. 's' → logprob: -4.095073699951172
    5. ' between' → logprob: -4.095073699951172
    6. ',' → logprob: -4.345073699951172
    7. 'from' → logprob: -5.220073699951172
    8. '   ' → logprob: -5.470073699951172
    9. ' =' → logprob: -5.595073699951172
    10. ' de' → logprob: -5.595073699951172

Token 221: ' entre' (ID: 3853)
  Prédit: ' entre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' entre' → logprob: -1.2345905303955078
    2. 'from' → logprob: -1.3595905303955078
    3. ' de' → logprob: -1.8595905303955078
    4. ' from' → logprob: -1.9845905303955078
    5. ' ' → logprob: -2.484590530395508
    6. ' u' → logprob: -3.984590530395508
    7. 'entre' → logprob: -4.109590530395508
    8. ' between' → logprob: -4.609590530395508
    9. ' vers' → logprob: -5.484590530395508
    10. ' depuis' → logprob: -5.734590530395508

Token 222: ' u' (ID: 337)
  Prédit: ' u'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' u' → logprob: -0.580016553401947
    2. 'u' → logprob: -0.830016553401947
    3. 'i' → logprob: -7.080016613006592
    4. ' node' → logprob: -7.205016613006592
    5. ' chaque' → logprob: -7.580016613006592
    6. ' deux' → logprob: -7.830016613006592
    7. ' i' → logprob: -8.080016136169434
    8. ' tous' → logprob: -8.080016136169434
    9. ' sommet' → logprob: -9.205016136169434
    10. ' les' → logprob: -9.330016136169434

Token 223: ' et' (ID: 859)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.3967837393283844
    2. '<|end|>' → logprob: -2.0217838287353516
    3. ' et' → logprob: -2.5217838287353516
    4. ',' → logprob: -2.7717838287353516
    5. ' ,' → logprob: -4.771783828735352
    6. ' ' → logprob: -4.896783828735352
    7. 'u' → logprob: -5.146783828735352
    8. '   ' → logprob: -5.646783828735352
    9. 'and' → logprob: -5.771783828735352
    10. ')' → logprob: -5.771783828735352

Token 224: ' v' (ID: 323)
  Prédit: ' v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' v' → logprob: -0.020673036575317383
    2. 'v' → logprob: -3.8956730365753174
    3. ' u' → logprob: -9.520672798156738
    4. ' w' → logprob: -10.520672798156738
    5. ' ' → logprob: -11.520672798156738
    6. 'u' → logprob: -12.020672798156738
    7. 'w' → logprob: -12.520672798156738
    8. '	v' → logprob: -12.895672798156738
    9. ' un' → logprob: -12.895672798156738
    10. ' ' → logprob: -13.645672798156738

Token 225: ' s' (ID: 265)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.08327056467533112
    2. ' si' → logprob: -3.45827054977417
    3. ',' → logprob: -4.20827054977417
    4. ' ' → logprob: -4.83327054977417
    5. ' for' → logprob: -4.95827054977417
    6. 's' → logprob: -5.45827054977417
    7. 'if' → logprob: -5.83327054977417
    8. ' s' → logprob: -6.08327054977417
    9. '   ' → logprob: -6.33327054977417
    10. ' ,' → logprob: -6.95827054977417

Token 226: ''il' (ID: 14683)
  Prédit: ''il'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''il' → logprob: -0.3957699239253998
    2. 'u' → logprob: -1.8957699537277222
    3. 'ur' → logprob: -2.3957698345184326
    4. 'i' → logprob: -3.0207698345184326
    5. ''' → logprob: -4.020770072937012
    6. ''agit' → logprob: -5.395770072937012
    7. '   ' → logprob: -5.770770072937012
    8. ''i' → logprob: -6.020770072937012
    9. 't' → logprob: -6.520770072937012
    10. 'si' → logprob: -6.645770072937012

Token 227: ' existe' (ID: 19498)
  Prédit: ' existe'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' existe' → logprob: -0.20127688348293304
    2. 'u' → logprob: -2.5762767791748047
    3. ' a' → logprob: -4.201276779174805
    4. 'v' → logprob: -4.326276779174805
    5. ' ex' → logprob: -4.701276779174805
    6. 'ex' → logprob: -4.826276779174805
    7. 'y' → logprob: -4.951276779174805
    8. ' possible' → logprob: -5.076276779174805
    9. ''ex' → logprob: -5.076276779174805
    10. ' v' → logprob: -5.451276779174805

Token 228: ' un' (ID: 537)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.7972467541694641
    2. '<|end|>' → logprob: -1.6722466945648193
    3. ' un' → logprob: -1.9222466945648193
    4. ' ' → logprob: -2.2972466945648193
    5. ' une' → logprob: -3.2972466945648193
    6. 'a' → logprob: -3.6722466945648193
    7. ')' → logprob: -3.7972466945648193
    8. ' an' → logprob: -5.297246932983398
    9. ' at' → logprob: -5.422246932983398
    10. ' w' → logprob: -6.047246932983398

Token 229: ' chemin' (ID: 45035)
  Prédit: 'che'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'che' → logprob: -0.5903248190879822
    2. ' chemin' → logprob: -0.8403248190879822
    3. '_che' → logprob: -4.590324878692627
    4. '-che' → logprob: -7.590324878692627
    5. ' Che' → logprob: -7.590324878692627
    6. ' che' → logprob: -7.715324878692627
    7. '```' → logprob: -7.965324878692627
    8. ' ' → logprob: -8.215324401855469
    9. 'sent' → logprob: -8.340324401855469
    10. 'Che' → logprob: -8.465324401855469

Token 230: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.18880242109298706
    2. ' ' → logprob: -1.9388024806976318
    3. ' d' → logprob: -5.188802242279053
    4. ' of' → logprob: -5.438802242279053
    5. '  ' → logprob: -5.938802242279053
    6. 'de' → logprob: -6.063802242279053
    7. '    ' → logprob: -6.063802242279053
    8. ' entre' → logprob: -6.063802242279053
    9. '<|end|>' → logprob: -6.563802242279053
    10. ' from' → logprob: -6.938802242279053

Token 231: ' longueur' (ID: 104613)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.3145275115966797
    2. ' k' → logprob: -1.4395275115966797
    3. ' longueur' → logprob: -4.18952751159668
    4. 'length' → logprob: -5.06452751159668
    5. ' length' → logprob: -5.31452751159668
    6. 'long' → logprob: -5.68952751159668
    7. 'exact' → logprob: -7.31452751159668
    8. 'a' → logprob: -7.56452751159668
    9. 'u' → logprob: -7.68952751159668
    10. ' ' → logprob: -8.06452751159668

Token 232: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.6987706422805786
    2. ' k' → logprob: -0.6987706422805786
    3. 'exact' → logprob: -6.073770523071289
    4. '1' → logprob: -6.823770523071289
    5. ' exactly' → logprob: -6.823770523071289
    6. ' ' → logprob: -7.323770523071289
    7. ' exactement' → logprob: -8.073770523071289
    8. ' exact' → logprob: -9.198770523071289
    9. '_exact' → logprob: -10.573770523071289
    10. '=k' → logprob: -11.823770523071289

Token 233: ' dans' (ID: 2671)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.4701135158538818
    2. ' en' → logprob: -1.5951135158538818
    3. ' de' → logprob: -1.7201135158538818
    4. ' entre' → logprob: -2.220113515853882
    5. ' dans' → logprob: -2.345113515853882
    6. ',' → logprob: -3.845113515853882
    7. '   ' → logprob: -3.970113515853882
    8. 'from' → logprob: -4.220113754272461
    9. 'de' → logprob: -4.345113754272461
    10. ' from' → logprob: -4.470113754272461

Token 234: ' le' (ID: 505)
  Prédit: ' graph'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' graph' → logprob: -0.2016175091266632
    2. 'graph' → logprob: -1.7016174793243408
    3. '	graph' → logprob: -9.826617240905762
    4. ' le' → logprob: -9.951617240905762
    5. 'le' → logprob: -10.701617240905762
    6. '(graph' → logprob: -10.951617240905762
    7. ' l' → logprob: -11.076617240905762
    8. ' la' → logprob: -11.326617240905762
    9. 'l' → logprob: -11.326617240905762
    10. '```' → logprob: -12.701617240905762

Token 235: ' grap' (ID: 60955)
  Prédit: ' graph'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' graph' → logprob: -0.5762713551521301
    2. 'graph' → logprob: -0.8262713551521301
    3. ' original' → logprob: -8.951271057128906
    4. ' grap' → logprob: -9.451271057128906
    5. ' code' → logprob: -9.826271057128906
    6. '	graph' → logprob: -10.826271057128906
    7. '(graph' → logprob: -11.201271057128906
    8. 'code' → logprob: -11.451271057128906
    9. 'original' → logprob: -11.701271057128906
    10. 'def' → logprob: -12.951271057128906

Token 236: 'he' (ID: 273)
  Prédit: 'h'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'h' → logprob: -0.3060295581817627
    2. 'ph' → logprob: -1.4310295581817627
    3. 'aph' → logprob: -3.8060295581817627
    4. '   ' → logprob: -7.306029319763184
    5. 'ah' → logprob: -8.056029319763184
    6. 'aphe' → logprob: -8.681029319763184
    7. 'he' → logprob: -8.931029319763184
    8. '       ' → logprob: -8.931029319763184
    9. '
' → logprob: -9.181029319763184
    10. '[' → logprob: -9.181029319763184

Token 237: ' original' (ID: 4756)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -1.5036087036132812
    2. '   ' → logprob: -2.0036087036132812
    3. ' de' → logprob: -2.0036087036132812
    4. 'from' → logprob: -2.6286087036132812
    5. 'graph' → logprob: -2.7536087036132812
    6. ' original' → logprob: -3.0036087036132812
    7. ' from' → logprob: -3.3786087036132812
    8. ' for' → logprob: -3.5036087036132812
    9. ' graph' → logprob: -3.8786087036132812
    10. '[u' → logprob: -4.128608703613281

Token 238: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5300866365432739
    2. 'def' → logprob: -2.0300865173339844
    3. ' for' → logprob: -2.0300865173339844
    4. ' def' → logprob: -3.7800865173339844
    5. '    ' → logprob: -4.030086517333984
    6. ' ' → logprob: -4.280086517333984
    7. 'for' → logprob: -4.405086517333984
    8. '  ' → logprob: -4.405086517333984
    9. 'graph' → logprob: -4.405086517333984
    10. '
' → logprob: -4.530086517333984

Token 239: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7723888754844666
    2. ':' → logprob: -2.1473889350891113
    3. ' ' → logprob: -2.1473889350891113
    4. 'def' → logprob: -2.3973889350891113
    5. ' for' → logprob: -3.3973889350891113
    6. ')' → logprob: -3.8973889350891113
    7. 'for' → logprob: -4.022388935089111
    8. ' :' → logprob: -4.397388935089111
    9. '    ' → logprob: -4.397388935089111
    10. '[' → logprob: -4.522388935089111

Token 240: ' #' (ID: 1069)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.28998929262161255
    2. '   ' → logprob: -2.7899892330169678
    3. ' def' → logprob: -2.7899892330169678
    4. '
' → logprob: -3.2899892330169678
    5. 'steps' → logprob: -4.539989471435547
    6. '  
' → logprob: -4.664989471435547
    7. 'step' → logprob: -4.664989471435547
    8. 'k' → logprob: -4.789989471435547
    9. 'dist' → logprob: -4.789989471435547
    10. ' step' → logprob: -4.914989471435547

Token 241: ' Pour' (ID: 13931)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -1.19597327709198
    2. ' ' → logprob: -1.44597327709198
    3. ' def' → logprob: -2.1959733963012695
    4. '   ' → logprob: -2.3209733963012695
    5. '
' → logprob: -2.5709733963012695
    6. ' 
' → logprob: -3.0709733963012695
    7. '  
' → logprob: -3.5709733963012695
    8. '    
' → logprob: -4.1959733963012695
    9. '   
' → logprob: -4.1959733963012695
    10. ' for' → logprob: -4.8209733963012695

Token 242: ' cela' (ID: 17542)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.1104620024561882
    2. 'k' → logprob: -2.360461950302124
    3. ' length' → logprob: -5.485462188720703
    4. ' step' → logprob: -5.610462188720703
    5. 'step' → logprob: -7.485462188720703
    6. 'length' → logprob: -7.735462188720703
    7. ' dist' → logprob: -8.360462188720703
    8. ' longueur' → logprob: -8.735462188720703
    9. ' steps' → logprob: -8.860462188720703
    10. ' pas' → logprob: -8.860462188720703

Token 243: ',' (ID: 11)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.015819203108549118
    2. ',' → logprob: -4.265819072723389
    3. 'in' → logprob: -7.140819072723389
    4. ' ,' → logprob: -7.765819072723389
    5. ' for' → logprob: -8.390819549560547
    6. 'def' → logprob: -9.890819549560547
    7. ' u' → logprob: -10.390819549560547
    8. 'for' → logprob: -10.765819549560547
    9. ' k' → logprob: -11.015819549560547
    10. 'u' → logprob: -11.140819549560547

Token 244: ' on' (ID: 402)
  Prédit: ' def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' def' → logprob: -0.5187143683433533
    2. 'def' → logprob: -2.018714427947998
    3. ' k' → logprob: -2.018714427947998
    4. 'k' → logprob: -3.143714427947998
    5. ' step' → logprob: -3.393714427947998
    6. ' dist' → logprob: -3.643714427947998
    7. 'step' → logprob: -4.268714427947998
    8. ' distances' → logprob: -5.643714427947998
    9. 'dist' → logprob: -5.768714427947998
    10. ' ' → logprob: -6.018714427947998

Token 245: ' fait' (ID: 7473)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.6127641797065735
    2. 'for' → logprob: -0.9877641797065735
    3. 'def' → logprob: -2.7377641201019287
    4. ' def' → logprob: -5.237764358520508
    5. ' queue' → logprob: -5.362764358520508
    6. 'queue' → logprob: -6.362764358520508
    7. 'from' → logprob: -6.612764358520508
    8. ' =' → logprob: -7.237764358520508
    9. ' bfs' → logprob: -7.237764358520508
    10. ' continue' → logprob: -7.362764358520508

Token 246: ' une' (ID: 2463)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.13654619455337524
    2. ' def' → logprob: -2.6365461349487305
    3. 'for' → logprob: -3.6365461349487305
    4. ' for' → logprob: -3.7615461349487305
    5. ' une' → logprob: -6.6365461349487305
    6. ' un' → logprob: -6.8865461349487305
    7. ' a' → logprob: -7.2615461349487305
    8. 'n' → logprob: -7.3865461349487305
    9. 'from' → logprob: -7.5115461349487305
    10. 'dist' → logprob: -8.51154613494873

Token 247: ' recherche' (ID: 24975)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.05106798931956291
    2. 'for' → logprob: -3.551068067550659
    3. ' def' → logprob: -5.55106782913208
    4. 'from' → logprob: -5.67606782913208
    5. 'queue' → logprob: -5.80106782913208
    6. ' for' → logprob: -5.80106782913208
    7. ' queue' → logprob: -6.17606782913208
    8. ' bfs' → logprob: -7.05106782913208
    9. 'range' → logprob: -7.30106782913208
    10. 'distance' → logprob: -7.67606782913208

Token 248: ' BFS' (ID: 190016)
  Prédit: 'en'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'en' → logprob: -0.6901373863220215
    2. ' en' → logprob: -1.3151373863220215
    3. 'def' → logprob: -2.0651373863220215
    4. 'b' → logprob: -3.1901373863220215
    5. 'de' → logprob: -3.8151373863220215
    6. 'from' → logprob: -4.4401373863220215
    7. ' bfs' → logprob: -4.6901373863220215
    8. ' de' → logprob: -5.1901373863220215
    9. ' BFS' → logprob: -5.3151373863220215
    10. 'B' → logprob: -5.9401373863220215

Token 249: ' all' (ID: 722)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.40202149748802185
    2. ' for' → logprob: -2.6520214080810547
    3. '(' → logprob: -3.0270214080810547
    4. ':' → logprob: -3.5270214080810547
    5. 'def' → logprob: -3.7770214080810547
    6. ' ' → logprob: -3.9020214080810547
    7. ' (' → logprob: -4.027021408081055
    8. 'for' → logprob: -4.152021408081055
    9. ')' → logprob: -4.277021408081055
    10. ',' → logprob: -4.402021408081055

Token 250: 'ong' (ID: 705)
  Prédit: 'er'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.8923043012619019
    2. '   ' → logprob: -1.5173043012619019
    3. 'e' → logprob: -2.7673044204711914
    4. '       ' → logprob: -3.3923044204711914
    5. '_nodes' → logprob: -3.5173044204711914
    6. 'graph' → logprob: -3.6423044204711914
    7. 'es' → logprob: -3.8923044204711914
    8. 'u' → logprob: -3.8923044204711914
    9. '(graph' → logprob: -3.8923044204711914
    10. ' graph' → logprob: -4.142304420471191

Token 251: 'ée' (ID: 2894)
  Prédit: 'er'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.27306127548217773
    2. 'e' → logprob: -2.0230612754821777
    3. 'th' → logprob: -3.2730612754821777
    4. 'ue' → logprob: -3.6480612754821777
    5. 'ueur' → logprob: -4.273061275482178
    6. 'u' → logprob: -5.148061275482178
    7. 'uer' → logprob: -6.023061275482178
    8. '(' → logprob: -6.023061275482178
    9. 'ée' → logprob: -6.148061275482178
    10. 'ur' → logprob: -6.148061275482178

Token 252: ' en' (ID: 469)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9271987676620483
    2. 'def' → logprob: -2.427198886871338
    3. ' ' → logprob: -2.802198886871338
    4. ':' → logprob: -2.802198886871338
    5. ',' → logprob: -2.927198886871338
    6. '(' → logprob: -3.052198886871338
    7. ' (' → logprob: -3.177198886871338
    8. '    ' → logprob: -3.427198886871338
    9. '.' → logprob: -3.552198886871338
    10. ' for' → logprob: -3.677198886871338

Token 253: ' k' (ID: 372)
  Prédit: ' graph'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' graph' → logprob: -1.4477289915084839
    2. ' longueur' → logprob: -1.5727289915084839
    3. ' profondeur' → logprob: -1.9477289915084839
    4. 'graph' → logprob: -2.3227291107177734
    5. 'for' → logprob: -3.4477291107177734
    6. ' breadth' → logprob: -3.5727291107177734
    7. 'range' → logprob: -3.6977291107177734
    8. '```' → logprob: -3.8227291107177734
    9. 'length' → logprob: -4.072729110717773
    10. 'def' → logprob: -4.072729110717773

Token 254: ' étapes' (ID: 96583)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5520000457763672
    2. ':' → logprob: -1.5520000457763672
    3. ')' → logprob: -2.802000045776367
    4. '):' → logprob: -3.177000045776367
    5. '    ' → logprob: -3.802000045776367
    6. 'def' → logprob: -4.052000045776367
    7. 'for' → logprob: -4.552000045776367
    8. ' for' → logprob: -4.677000045776367
    9. '  ' → logprob: -4.927000045776367
    10. ' ' → logprob: -5.052000045776367

Token 255: ' à' (ID: 1221)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.051108092069625854
    2. '    
' → logprob: -3.1761081218719482
    3. 'def' → logprob: -6.301107883453369
    4. '
' → logprob: -6.301107883453369
    5. '    ' → logprob: -6.551107883453369
    6. ',' → logprob: -7.051107883453369
    7. '.' → logprob: -7.676107883453369
    8. '   
' → logprob: -8.176108360290527
    9. ' for' → logprob: -8.676108360290527
    10. ')' → logprob: -8.926108360290527

Token 256: ' partir' (ID: 12100)
  Prédit: 'part'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'part' → logprob: -0.2090872824192047
    2. ' partir' → logprob: -1.8340872526168823
    3. ' part' → logprob: -3.834087371826172
    4. 'from' → logprob: -6.334087371826172
    5. 'u' → logprob: -6.709087371826172
    6. 'niveau' → logprob: -6.709087371826172
    7. ' chaque' → logprob: -7.209087371826172
    8. 'graph' → logprob: -8.209087371826172
    9. 'each' → logprob: -8.334087371826172
    10. 'distance' → logprob: -8.709087371826172

Token 257: ' de' (ID: 334)
  Prédit: ' chaque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' chaque' → logprob: -0.534221887588501
    2. 'u' → logprob: -1.284221887588501
    3. ' u' → logprob: -2.909221887588501
    4. 'each' → logprob: -3.284221887588501
    5. ' each' → logprob: -3.409221887588501
    6. '   ' → logprob: -5.909221649169922
    7. ' chacune' → logprob: -6.534221649169922
    8. 'every' → logprob: -6.909221649169922
    9. '<|end|>' → logprob: -6.909221649169922
    10. '[u' → logprob: -7.409221649169922

Token 258: ' chaque' (ID: 21194)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'u' → logprob: -0.552412211894989
    2. ' u' → logprob: -0.927412211894989
    3. ' each' → logprob: -4.177412033081055
    4. 'each' → logprob: -5.052412033081055
    5. ' chaque' → logprob: -5.052412033081055
    6. '[u' → logprob: -8.427412033081055
    7. ' every' → logprob: -9.427412033081055
    8. ' ' → logprob: -9.427412033081055
    9. 'every' → logprob: -9.802412033081055
    10. 'v' → logprob: -9.927412033081055

Token 259: ' noe' (ID: 49921)
  Prédit: ' u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' u' → logprob: -0.3985326290130615
    2. ' node' → logprob: -1.1485326290130615
    3. 'u' → logprob: -4.648532867431641
    4. 'node' → logprob: -6.773532867431641
    5. '   ' → logprob: -8.14853286743164
    6. ' sommet' → logprob: -8.64853286743164
    7. ' ' → logprob: -9.14853286743164
    8. ' vertex' → logprob: -9.64853286743164
    9. ' noe' → logprob: -9.89853286743164
    10. 'n' → logprob: -10.02353286743164

Token 260: 'ud' (ID: 527)
  Prédit: 'ud'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ud' → logprob: -5.8126592193730175e-05
    2. 'u' → logprob: -9.8750581741333
    3. 'd' → logprob: -12.0000581741333
    4. 'ude' → logprob: -15.1250581741333
    5. 'уд' → logprob: -17.250057220458984
    6. ' ud' → logprob: -17.875057220458984
    7. 'e' → logprob: -17.875057220458984
    8. 'ur' → logprob: -17.875057220458984
    9. '#' → logprob: -18.125057220458984
    10. 'uf' → logprob: -18.625057220458984

Token 261: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03688184544444084
    2. '    ' → logprob: -4.161881923675537
    3. '    
' → logprob: -4.661881923675537
    4. '.' → logprob: -5.411881923675537
    5. ':' → logprob: -5.786881923675537
    6. ',' → logprob: -7.411881923675537
    7. '  ' → logprob: -7.786881923675537
    8. ' for' → logprob: -7.911881923675537
    9. '   
' → logprob: -7.911881923675537
    10. ' ' → logprob: -7.911881923675537

Token 262: '    
' (ID: 1944)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.47802844643592834
    2. '    ' → logprob: -2.4780285358428955
    3. ' ' → logprob: -2.4780285358428955
    4. ':' → logprob: -2.6030285358428955
    5. '    
' → logprob: -3.1030285358428955
    6. ' :' → logprob: -3.9780285358428955
    7. ' 
' → logprob: -3.9780285358428955
    8. ' for' → logprob: -4.353028297424316
    9. '  
' → logprob: -4.728028297424316
    10. '   
' → logprob: -5.103028297424316

Token 263: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.039140183478593826
    2. ' for' → logprob: -3.914140224456787
    3. 'for' → logprob: -5.289140224456787
    4. '    
' → logprob: -5.539140224456787
    5. 'def' → logprob: -6.289140224456787
    6. '
' → logprob: -6.414140224456787
    7. ' distances' → logprob: -7.039140224456787
    8. 'dist' → logprob: -7.539140224456787
    9. 'distance' → logprob: -7.914140224456787
    10. 'dp' → logprob: -8.039139747619629

Token 264: ' def' (ID: 1056)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.1199522390961647
    2. 'def' (adapté à ' def') → logprob: -3.1199522018432617
    3. ' k' → logprob: -3.3699522018432617
    4. ' def' → logprob: -4.869952201843262
    5. '   ' → logprob: -5.119952201843262
    6. 'step' → logprob: -5.244952201843262
    7. 'dist' → logprob: -5.369952201843262
    8. ' step' → logprob: -6.619952201843262
    9. 'graph' → logprob: -6.744952201843262
    10. ' dist' → logprob: -6.869952201843262

Token 265: ' build' (ID: 3024)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.5404856204986572
    2. ' compute' → logprob: -1.7904856204986572
    3. ' multi' → logprob: -2.7904856204986572
    4. ' build' → logprob: -2.7904856204986572
    5. 'k' → logprob: -3.0404856204986572
    6. ' bfs' → logprob: -3.4154856204986572
    7. ' get' → logprob: -4.165485382080078
    8. ' reachable' → logprob: -4.915485382080078
    9. 'compute' → logprob: -5.165485382080078
    10. ' all' → logprob: -5.540485382080078

Token 266: '_k' (ID: 11637)
  Prédit: '_k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_k' → logprob: -0.2640193998813629
    2. '_graph' → logprob: -1.7640193700790405
    3. '_step' → logprob: -2.88901948928833
    4. '_' → logprob: -5.76401948928833
    5. '_steps' → logprob: -6.88901948928833
    6. '_paths' → logprob: -9.389019012451172
    7. '_next' → logprob: -9.514019012451172
    8. '_path' → logprob: -9.514019012451172
    9. '_distance' → logprob: -9.514019012451172
    10. '_transition' → logprob: -9.764019012451172

Token 267: '_step' (ID: 27360)
  Prédit: '_step'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_step' → logprob: -0.004230358637869358
    2. '_graph' → logprob: -5.754230499267578
    3. '-step' → logprob: -7.629230499267578
    4. '_steps' → logprob: -7.879230499267578
    5. '_' → logprob: -9.379230499267578
    6. '_path' → logprob: -10.504230499267578
    7. '_edge' → logprob: -11.379230499267578
    8. '_adj' → logprob: -11.379230499267578
    9. '-' → logprob: -12.004230499267578
    10. '_walk' → logprob: -12.004230499267578

Token 268: '_graph' (ID: 33441)
  Prédit: '_graph'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_graph' → logprob: -0.0019794299732893705
    2. '(graph' → logprob: -6.876979351043701
    3. 'graph' → logprob: -7.626979351043701
    4. '(' → logprob: -8.62697982788086
    5. '_' → logprob: -8.87697982788086
    6. '(k' → logprob: -10.37697982788086
    7. '_k' → logprob: -11.00197982788086
    8. '(_' → logprob: -11.25197982788086
    9. 'Graph' → logprob: -11.25197982788086
    10. ' graph' → logprob: -11.50197982788086

Token 269: '(k' (ID: 12125)
  Prédit: '(k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(k' → logprob: -0.002833172446116805
    2. '(' → logprob: -5.877833366394043
    3. '(graph' → logprob: -11.252833366394043
    4. '(u' → logprob: -11.377833366394043
    5. ' (' → logprob: -13.502833366394043
    6. '(n' → logprob: -14.252833366394043
    7. '(node' → logprob: -14.752833366394043
    8. '_k' → logprob: -15.002833366394043
    9. 'k' → logprob: -15.877833366394043
    10. '(s' → logprob: -16.127832412719727

Token 270: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0004017137107439339
    2. '):
' → logprob: -8.500401496887207
    3. ',' → logprob: -9.375401496887207
    4. ')' → logprob: -10.000401496887207
    5. ' ):' → logprob: -10.000401496887207
    6. ':' → logprob: -11.000401496887207
    7. '   ' → logprob: -12.375401496887207
    8. '):
' → logprob: -14.125401496887207
    9. ' :' → logprob: -16.000402450561523
    10. 'u' → logprob: -16.000402450561523

Token 271: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.09099533408880234
    2. ':' → logprob: -2.8409953117370605
    3. '   ' → logprob: -3.8409953117370605
    4. '(graph' → logprob: -5.8409953117370605
    5. '():' → logprob: -6.0909953117370605
    6. 'graph' → logprob: -7.0909953117370605
    7. ' graph' → logprob: -8.090995788574219
    8. '):' → logprob: -8.465995788574219
    9. '	graph' → logprob: -8.965995788574219
    10. '    ' → logprob: -9.590995788574219

Token 272: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.37411341071128845
    2. '   ' → logprob: -1.6241134405136108
    3. 'k' (adapté à ' k') → logprob: -3.3741133213043213
    4. ' new' → logprob: -3.7491133213043213
    5. ' step' → logprob: -3.8741133213043213
    6. ' n' → logprob: -4.8741135597229
    7. '       ' → logprob: -5.1241135597229
    8. 'n' → logprob: -5.1241135597229
    9. ' graph' → logprob: -5.3741135597229
    10. ' result' → logprob: -5.8741135597229

Token 273: 'step' (ID: 17509)
  Prédit: '_step'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_step' → logprob: -0.014914709143340588
    2. '_graph' → logprob: -4.264914512634277
    3. '_k' → logprob: -7.889914512634277
    4. '_steps' → logprob: -9.264914512634277
    5. '_' → logprob: -9.764914512634277
    6. '-step' → logprob: -9.889914512634277
    7. '-' → logprob: -10.264914512634277
    8. '_adj' → logprob: -11.014914512634277
    9. 'step' → logprob: -11.389914512634277
    10. '_-' → logprob: -11.514914512634277

Token 274: '_graph' (ID: 33441)
  Prédit: '_graph'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_graph' → logprob: -0.00011188744247192517
    2. 'graph' → logprob: -9.62511157989502
    3. ' =' → logprob: -11.37511157989502
    4. '_' → logprob: -11.50011157989502
    5. 'd' → logprob: -11.75011157989502
    6. '=' → logprob: -12.25011157989502
    7. '_g' → logprob: -13.00011157989502
    8. 'raph' → logprob: -13.37511157989502
    9. '   ' → logprob: -13.75011157989502
    10. '_adj' → logprob: -13.75011157989502

Token 275: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.08902496844530106
    2. '=' → logprob: -2.4640250205993652
    3. '   ' → logprob: -9.714024543762207
    4. ' ' → logprob: -11.214024543762207
    5. '=[' → logprob: -12.839024543762207
    6. '=[]' → logprob: -13.214024543762207
    7. ' =[' → logprob: -13.839024543762207
    8. '  ' → logprob: -13.839024543762207
    9. '[u' → logprob: -13.964024543762207
    10. '    ' → logprob: -13.964024543762207

Token 276: ' [[]' (ID: 182908)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0031878093723207712
    2. ' [[]' → logprob: -5.753187656402588
    3. ' [' → logprob: -11.753188133239746
    4. '[[' → logprob: -13.628188133239746
    5. '   ' → logprob: -14.003188133239746
    6. '[n' → logprob: -16.00318717956543
    7. '[s' → logprob: -18.00318717956543
    8. '[node' → logprob: -18.12818717956543
    9. '[['' → logprob: -18.37818717956543
    10. '[u' → logprob: -18.75318717956543

Token 277: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.3132987320423126
    2. 'for' → logprob: -1.3132987022399902
    3. '   ' → logprob: -10.563299179077148
    4. ' ' → logprob: -12.563299179077148
    5. 'n' → logprob: -12.688299179077148
    6. ')' → logprob: -13.813299179077148
    7. '       ' → logprob: -14.063299179077148
    8. '(n' → logprob: -14.438299179077148
    9. '	for' → logprob: -14.688299179077148
    10. ' (' → logprob: -15.188299179077148

Token 278: ' _' (ID: 1175)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.9471188187599182
    2. ' in' → logprob: -0.9471188187599182
    3. ' range' → logprob: -2.0721187591552734
    4. ' _' → logprob: -2.9471187591552734
    5. 'in' → logprob: -3.5721187591552734
    6. 'range' → logprob: -4.072118759155273
    7. '_in' → logprob: -7.697118759155273
    8. '_range' → logprob: -9.197118759155273
    9. '(range' → logprob: -9.822118759155273
    10. ' ' → logprob: -10.322118759155273

Token 279: ' in' (ID: 306)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.1602376252412796
    2. ' range' → logprob: -1.9102376699447632
    3. '(range' → logprob: -11.285237312316895
    4. 'n' → logprob: -14.535237312316895
    5. '(n' → logprob: -15.535237312316895
    6. ' ' → logprob: -17.16023826599121
    7. '	range' → logprob: -17.66023826599121
    8. '   ' → logprob: -17.78523826599121
    9. 'k' → logprob: -17.91023826599121
    10. ' in' → logprob: -17.91023826599121

Token 280: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.038088079541921616
    2. ' range' → logprob: -3.288088083267212
    3. '(range' → logprob: -10.038087844848633
    4. '(n' → logprob: -12.788087844848633
    5. 'n' → logprob: -16.163087844848633
    6. '	range' → logprob: -16.663087844848633
    7. '   ' → logprob: -17.163087844848633
    8. '
' → logprob: -19.038087844848633
    9. ' (' → logprob: -19.163087844848633
    10. ' ' → logprob: -19.288087844848633

Token 281: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.05361921340227127
    2. 'range' → logprob: -3.053619146347046
    3. ' range' → logprob: -5.553619384765625
    4. '(range' → logprob: -7.178619384765625
    5. ' (' → logprob: -8.178619384765625
    6. 'n' → logprob: -9.303619384765625
    7. ' n' → logprob: -12.053619384765625
    8. '(' → logprob: -13.178619384765625
    9. '(len' → logprob: -13.678619384765625
    10. '   ' → logprob: -14.053619384765625

Token 282: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.00038086410495452583
    2. ' +' → logprob: -7.875380992889404
    3. '+
' → logprob: -14.625380516052246
    4. '
' → logprob: -16.375381469726562
    5. '   ' → logprob: -16.750381469726562
    6. ')' → logprob: -17.125381469726562
    7. ')]' → logprob: -17.625381469726562
    8. '+k' → logprob: -17.750381469726562
    9. '+n' → logprob: -18.000381469726562
    10. ' +
' → logprob: -19.375381469726562

Token 283: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -9.388769103679806e-05
    2. ' ' → logprob: -9.500093460083008
    3. '   ' → logprob: -11.375093460083008
    4. '
' → logprob: -13.375093460083008
    5. '

' → logprob: -14.125093460083008
    6. 'range' → logprob: -14.125093460083008
    7. '```' → logprob: -14.812593460083008
    8. '       ' → logprob: -14.812593460083008
    9. '0' → logprob: -14.875093460083008
    10. '(' → logprob: -14.875093460083008

Token 284: ')]
' (ID: 11587)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.030900979414582253
    2. ']' → logprob: -3.5309009552001953
    3. ')]
' → logprob: -7.155900955200195
    4. ')' → logprob: -8.905900955200195
    5. ' ]' → logprob: -9.280900955200195
    6. ']
' → logprob: -9.530900955200195
    7. '   ' → logprob: -10.655900955200195
    8. ')]
' → logprob: -11.405900955200195
    9. '       ' → logprob: -11.530900955200195
    10. ' )' → logprob: -11.655900955200195

Token 285: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.05397200584411621
    2. '   ' → logprob: -4.303972244262695
    3. '        
' → logprob: -4.678972244262695
    4. ' for' → logprob: -4.803972244262695
    5. '
' → logprob: -4.928972244262695
    6. '    ' → logprob: -5.928972244262695
    7. '	' → logprob: -6.053972244262695
    8. '    
' → logprob: -6.053972244262695
    9. ' ' → logprob: -6.553972244262695
    10. '<|end|>' → logprob: -6.678972244262695

Token 286: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.5925354361534119
    2. '       ' → logprob: -1.4675354957580566
    3. ' for' → logprob: -1.5925354957580566
    4. '   ' → logprob: -4.342535495758057
    5. ' ' → logprob: -9.342535018920898
    6. '	for' → logprob: -10.092535018920898
    7. '  ' → logprob: -11.217535018920898
    8. '    ' → logprob: -12.092535018920898
    9. '        
' → logprob: -12.467535018920898
    10. '      ' → logprob: -12.592535018920898

Token 287: ' start' (ID: 1604)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'u' → logprob: -0.5484018921852112
    2. ' u' → logprob: -1.5484018325805664
    3. ' start' → logprob: -2.0484018325805664
    4. 'start' → logprob: -2.5484018325805664
    5. ' node' → logprob: -6.173401832580566
    6. 'node' → logprob: -8.298401832580566
    7. 'src' → logprob: -11.048401832580566
    8. 's' → logprob: -11.673401832580566
    9. ' source' → logprob: -11.673401832580566
    10. 'i' → logprob: -12.048401832580566

Token 288: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.004086708649992943
    2. 'in' → logprob: -5.504086494445801
    3. '_' → logprob: -12.7540864944458
    4. ' ' → logprob: -12.8790864944458
    5. 's' → logprob: -14.8790864944458
    6. '_in' → logprob: -15.2540864944458
    7. 'node' → logprob: -15.2540864944458
    8. '_node' → logprob: -15.7540864944458
    9. ',' → logprob: -15.8790864944458
    10. '```' → logprob: -16.004087448120117

Token 289: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.16022412478923798
    2. ' range' → logprob: -1.9102240800857544
    3. '(range' → logprob: -17.28522491455078
    4. ' ' → logprob: -17.53522491455078
    5. '	range' → logprob: -18.16022491455078
    6. '   ' → logprob: -18.28522491455078
    7. '  ' → logprob: -20.28522491455078
    8. '1' → logprob: -20.28522491455078
    9. 'rang' → logprob: -20.66022491455078
    10. '```' → logprob: -20.78522491455078

Token 290: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -7.183501293184236e-05
    2. ' (' → logprob: -10.50007152557373
    3. '(n' → logprob: -10.75007152557373
    4. '1' → logprob: -10.87507152557373
    5. ' ' → logprob: -12.87507152557373
    6. '   ' → logprob: -14.25007152557373
    7. ',' → logprob: -15.62507152557373
    8. '(
' → logprob: -15.75007152557373
    9. '	' → logprob: -16.250072479248047
    10. 'n' → logprob: -16.375072479248047

Token 291: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00021295747137628496
    2. ' ' → logprob: -8.625212669372559
    3. 'n' → logprob: -10.750212669372559
    4. '   ' → logprob: -11.375212669372559
    5. ' n' → logprob: -15.375212669372559
    6. '0' → logprob: -16.250213623046875
    7. '       ' → logprob: -17.250213623046875
    8. '
' → logprob: -17.625213623046875
    9. '  ' → logprob: -17.875213623046875
    10. '    ' → logprob: -17.875213623046875

Token 292: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00398021237924695
    2. ',n' → logprob: -5.7539801597595215
    3. ' ,' → logprob: -7.1289801597595215
    4. ',len' → logprob: -15.75398063659668
    5. '   ' → logprob: -16.25398063659668
    6. 'n' → logprob: -16.25398063659668
    7. ',
' → logprob: -16.37898063659668
    8. 'to' → logprob: -17.37898063659668
    9. ',num' → logprob: -17.75398063659668
    10. ',k' → logprob: -18.00398063659668

Token 293: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.0052342405542731285
    2. ' n' → logprob: -5.255234241485596
    3. '   ' → logprob: -14.880233764648438
    4. '	n' → logprob: -16.755233764648438
    5. ' ' → logprob: -17.505233764648438
    6. '    ' → logprob: -19.755233764648438
    7. ')n' → logprob: -20.005233764648438
    8. '       ' → logprob: -20.380233764648438
    9. '  ' → logprob: -20.630233764648438
    10. ')' → logprob: -20.755233764648438

Token 294: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.0006341627449728549
    2. ' +' → logprob: -7.50063419342041
    3. '):
' → logprob: -9.75063419342041
    4. '):' → logprob: -10.75063419342041
    5. '   ' → logprob: -14.25063419342041
    6. '+
' → logprob: -14.50063419342041
    7. '+n' → logprob: -16.250633239746094
    8. '1' → logprob: -16.625633239746094
    9. '       ' → logprob: -17.125633239746094
    10. '
' → logprob: -17.375633239746094

Token 295: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -6.511406809295295e-06
    2. ' ' → logprob: -12.125006675720215
    3. ')' → logprob: -14.500006675720215
    4. '   ' → logprob: -15.375006675720215
    5. '2' → logprob: -15.500006675720215
    6. 'n' → logprob: -17.2500057220459
    7. '):
' → logprob: -17.6250057220459
    8. '```' → logprob: -17.6250057220459
    9. '+' → logprob: -18.0000057220459
    10. '
' → logprob: -19.2500057220459

Token 296: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.16383010149002075
    2. '):
' → logprob: -1.913830041885376
    3. ':' → logprob: -5.663830280303955
    4. '       ' → logprob: -10.038829803466797
    5. '):
' → logprob: -10.163829803466797
    6. ':
' → logprob: -10.663829803466797
    7. '           ' → logprob: -11.538829803466797
    8. ')' → logprob: -11.788829803466797
    9. '   ' → logprob: -13.163829803466797
    10. ' ):' → logprob: -13.288829803466797

Token 297: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.04358059912919998
    2. '       ' → logprob: -3.1685805320739746
    3. ':' → logprob: -7.793580532073975
    4. '	       ' → logprob: -10.543581008911133
    5. ' queue' → logprob: -10.793581008911133
    6. '         ' → logprob: -10.918581008911133
    7. '        
' → logprob: -11.043581008911133
    8. '        ' → logprob: -11.043581008911133
    9. '               ' → logprob: -11.418581008911133
    10. '          ' → logprob: -11.418581008911133

Token 298: ' #' (ID: 1069)
  Prédit: 'queue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'queue' → logprob: -0.8077853918075562
    2. ' queue' → logprob: -1.4327853918075562
    3. '           ' → logprob: -2.0577855110168457
    4. 'visited' → logprob: -2.4327855110168457
    5. '   ' → logprob: -3.3077855110168457
    6. '       ' → logprob: -3.6827855110168457
    7. ' visited' → logprob: -3.9327855110168457
    8. 'dist' → logprob: -4.307785511016846
    9. ' dist' → logprob: -5.807785511016846
    10. 'q' → logprob: -6.932785511016846

Token 299: ' BFS' (ID: 190016)
  Prédit: 'visited'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'visited' → logprob: -0.11221447587013245
    2. 'queue' → logprob: -2.4872145652770996
    3. 'dist' → logprob: -4.1122145652771
    4. '           ' → logprob: -5.9872145652771
    5. ' visited' → logprob: -6.2372145652771
    6. '   ' → logprob: -7.6122145652771
    7. '       ' → logprob: -7.9872145652771
    8. 'q' → logprob: -8.362214088439941
    9. 'vis' → logprob: -8.487214088439941
    10. 'distance' → logprob: -8.612214088439941

Token 300: ' pour' (ID: 1930)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.04386734217405319
    2. '
' → logprob: -4.793867111206055
    3. ' =' → logprob: -4.918867111206055
    4. ' queue' → logprob: -5.043867111206055
    5. 'queue' → logprob: -5.168867111206055
    6. 'visited' → logprob: -5.293867111206055
    7. '            
' → logprob: -6.043867111206055
    8. ',' → logprob: -6.168867111206055
    9. '(queue' → logprob: -6.668867111206055
    10. ' visited' → logprob: -6.793867111206055

Token 301: ' trouver' (ID: 23195)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -1.0529054403305054
    2. ' trouver' → logprob: -1.5529054403305054
    3. 'find' → logprob: -2.052905559539795
    4. 'k' → logprob: -2.427905559539795
    5. ' find' → logprob: -2.552905559539795
    6. ' distances' → logprob: -3.552905559539795
    7. ' chaque' → logprob: -4.552905559539795
    8. 'distance' → logprob: -4.677905559539795
    9. 'depth' → logprob: -4.677905559539795
    10. ' parcour' → logprob: -4.927905559539795

Token 302: ' les' (ID: 1341)
  Prédit: 'les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'les' → logprob: -0.5731675028800964
    2. ' les' → logprob: -1.1981675624847412
    3. ' tous' → logprob: -2.323167562484741
    4. ' toutes' → logprob: -3.698167562484741
    5. 't' → logprob: -5.573167324066162
    6. 'all' → logprob: -6.323167324066162
    7. ' all' → logprob: -6.448167324066162
    8. 'le' → logprob: -6.823167324066162
    9. 'tout' → logprob: -7.448167324066162
    10. 'dist' → logprob: -7.948167324066162

Token 303: ' noe' (ID: 49921)
  Prédit: 'nodes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'nodes' → logprob: -0.5272791385650635
    2. ' nodes' → logprob: -1.1522791385650635
    3. 'paths' → logprob: -3.9022791385650635
    4. ' chemins' → logprob: -4.027278900146484
    5. 'dist' → logprob: -4.652278900146484
    6. ' distances' → logprob: -4.902278900146484
    7. 'che' → logprob: -5.152278900146484
    8. 'k' → logprob: -5.152278900146484
    9. 'vertices' → logprob: -5.402278900146484
    10. ' somm' → logprob: -6.027278900146484

Token 304: 'uds' (ID: 44387)
  Prédit: 'uds'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'uds' → logprob: -0.0006973040290176868
    2. 'ud' → logprob: -7.375697135925293
    3. 'ds' → logprob: -10.000697135925293
    4. 'nds' → logprob: -11.375697135925293
    5. '```' → logprob: -12.250697135925293
    6. ' uds' → logprob: -13.375697135925293
    7. 'e' → logprob: -13.875697135925293
    8. 's' → logprob: -13.875697135925293
    9. '#' → logprob: -14.500697135925293
    10. '(' → logprob: -14.625697135925293

Token 305: ' accessibles' (ID: 156723)
  Prédit: ' atte'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' atte' → logprob: -1.4126728773117065
    2. ' accessibles' → logprob: -1.4126728773117065
    3. ' à' → logprob: -2.037672996520996
    4. 'reachable' → logprob: -2.162672996520996
    5. 'atte' → logprob: -2.287672996520996
    6. 'à' → logprob: -2.787672996520996
    7. ' reachable' → logprob: -2.912672996520996
    8. ' at' → logprob: -4.037672996520996
    9. 'accessible' → logprob: -5.037672996520996
    10. 'access' → logprob: -5.287672996520996

Token 306: ' en' (ID: 469)
  Prédit: 'en'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'en' → logprob: -0.6631329655647278
    2. ' en' → logprob: -0.7881329655647278
    3. ' à' → logprob: -4.038133144378662
    4. 'à' → logprob: -5.288133144378662
    5. 'au' → logprob: -6.288133144378662
    6. ' au' → logprob: -6.663133144378662
    7. ' avec' → logprob: -6.788133144378662
    8. 'avec' → logprob: -7.038133144378662
    9. ' ' → logprob: -7.663133144378662
    10. '```' → logprob: -7.913133144378662

Token 307: ' exactement' (ID: 108701)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.27003586292266846
    2. 'k' → logprob: -1.6450358629226685
    3. 'exact' → logprob: -3.270035743713379
    4. ' exactly' → logprob: -5.645035743713379
    5. ' exactement' → logprob: -6.520035743713379
    6. ' exact' → logprob: -7.895035743713379
    7. '    ' → logprob: -8.770035743713379
    8. ' ' → logprob: -10.520035743713379
    9. '        ' → logprob: -10.770035743713379
    10. '   ' → logprob: -11.020035743713379

Token 308: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.25195688009262085
    2. ' k' → logprob: -1.5019569396972656
    3. '    ' → logprob: -11.501956939697266
    4. '           ' → logprob: -12.126956939697266
    5. '   ' → logprob: -12.626956939697266
    6. ' ' → logprob: -12.876956939697266
    7. '            ' → logprob: -13.501956939697266
    8. ' ' → logprob: -13.876956939697266
    9. '	k' → logprob: -13.876956939697266
    10. 'exact' → logprob: -14.501956939697266

Token 309: ' étapes' (ID: 96583)
  Prédit: ' steps'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' steps' → logprob: -0.06714548915624619
    2. 'steps' → logprob: -3.317145586013794
    3. ' pasos' → logprob: -4.317145347595215
    4. ' ' → logprob: -5.692145347595215
    5. ' passos' → logprob: -5.692145347595215
    6. ' pas' → logprob: -6.442145347595215
    7. ' étapes' → logprob: -6.942145347595215
    8. '<|end|>' → logprob: -7.067145347595215
    9. ' step' → logprob: -7.317145347595215
    10. '_steps' → logprob: -7.567145347595215

Token 310: ' depuis' (ID: 16277)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0036655140575021505
    2. ':' → logprob: -6.003665447235107
    3. '            
' → logprob: -7.628665447235107
    4. '          ' → logprob: -8.753665924072266
    5. '       ' → logprob: -9.253665924072266
    6. '
' → logprob: -9.503665924072266
    7. '               ' → logprob: -9.628665924072266
    8. ',' → logprob: -9.753665924072266
    9. '		' → logprob: -10.003665924072266
    10. '            ' → logprob: -10.378665924072266

Token 311: ' start' (ID: 1604)
  Prédit: 'start'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'start' → logprob: -0.16041462123394012
    2. ' start' → logprob: -1.9104145765304565
    3. '           ' → logprob: -8.660414695739746
    4. '   ' → logprob: -12.285414695739746
    5. '	start' → logprob: -12.660414695739746
    6. '[start' → logprob: -12.660414695739746
    7. '               ' → logprob: -13.285414695739746
    8. ' ' → logprob: -13.785414695739746
    9. ' ' → logprob: -14.785414695739746
    10. '          ' → logprob: -14.785414695739746

Token 312: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0021058868151158094
    2. ':' → logprob: -6.877105712890625
    3. '            
' → logprob: -7.877105712890625
    4. '       ' → logprob: -8.752105712890625
    5. '          ' → logprob: -9.127105712890625
    6. ',' → logprob: -9.377105712890625
    7. '
' → logprob: -9.502105712890625
    8. '		' → logprob: -9.752105712890625
    9. '	       ' → logprob: -10.377105712890625
    10. '               ' → logprob: -10.752105712890625

Token 313: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0015617619501426816
    2. '            
' → logprob: -7.251561641693115
    3. ':' → logprob: -8.001562118530273
    4. '       ' → logprob: -8.626562118530273
    5. '          ' → logprob: -9.126562118530273
    6. ',' → logprob: -10.376562118530273
    7. '               ' → logprob: -10.376562118530273
    8. '            ' → logprob: -10.501562118530273
    9. '<|end|>' → logprob: -10.626562118530273
    10. '
' → logprob: -11.126562118530273

Token 314: ' queue' (ID: 13661)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.5463905334472656
    2. 'queue' (adapté à ' queue') → logprob: -1.0463905334472656
    3. ' queue' → logprob: -3.0463905334472656
    4. 'visited' → logprob: -4.171390533447266
    5. '   ' → logprob: -5.421390533447266
    6. ' visited' → logprob: -7.171390533447266
    7. 'for' → logprob: -7.171390533447266
    8. '       ' → logprob: -7.921390533447266
    9. '            
' → logprob: -9.671390533447266
    10. '
' → logprob: -9.671390533447266

Token 315: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.47407856583595276
    2. '=' → logprob: -0.9740785360336304
    3. '.append' → logprob: -13.974078178405762
    4. '   ' → logprob: -15.349078178405762
    5. 'deque' → logprob: -15.599078178405762
    6. ' ' → logprob: -16.349079132080078
    7. ',' → logprob: -16.349079132080078
    8. '=[' → logprob: -17.599079132080078
    9. ' deque' → logprob: -17.724079132080078
    10. '	' → logprob: -17.724079132080078

Token 316: ' deque' (ID: 90347)
  Prédit: 'deque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'deque' → logprob: -1.27099974633893e-05
    2. ' deque' → logprob: -11.750012397766113
    3. '[(' → logprob: -12.250012397766113
    4. 'collections' → logprob: -18.00001335144043
    5. 'Deque' → logprob: -19.50001335144043
    6. '   ' → logprob: -20.62501335144043
    7. 'de' → logprob: -21.50001335144043
    8. '(de' → logprob: -22.12501335144043
    9. '((' → logprob: -22.25001335144043
    10. '{' → logprob: -22.25001335144043

Token 317: '()
' (ID: 1234)
  Prédit: '([('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '([(' → logprob: -0.0028080830816179514
    2. '()
' → logprob: -6.002808094024658
    3. '()' → logprob: -8.1278076171875
    4. '([' → logprob: -10.7528076171875
    5. '[(' → logprob: -11.1278076171875
    6. '((' → logprob: -14.7528076171875
    7. '()

' → logprob: -15.1278076171875
    8. '(' → logprob: -16.0028076171875
    9. '()
' → logprob: -16.3778076171875
    10. '([
' → logprob: -16.7528076171875

Token 318: '           ' (ID: 352)
  Prédit: '[('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[(' → logprob: -0.2115488201379776
    2. '(start' → logprob: -2.7115488052368164
    3. '           ' → logprob: -2.9615488052368164
    4. '[start' → logprob: -3.3365488052368164
    5. ' [(' → logprob: -4.461548805236816
    6. '(queue' → logprob: -4.586548805236816
    7. '([(' → logprob: -4.961548805236816
    8. '.append' → logprob: -6.086548805236816
    9. ' (' → logprob: -6.211548805236816
    10. '[' → logprob: -6.586548805236816

Token 319: ' queue' (ID: 13661)
  Prédit: 'queue'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'queue' (adapté à ' queue') → logprob: -0.0639539584517479
    2. ' queue' → logprob: -2.8139538764953613
    3. '(queue' → logprob: -6.313953876495361
    4. '           ' → logprob: -8.68895435333252
    5. ' (' → logprob: -13.68895435333252
    6. '(' → logprob: -13.68895435333252
    7. '       ' → logprob: -14.06395435333252
    8. '	queue' → logprob: -14.43895435333252
    9. '   ' → logprob: -14.56395435333252
    10. '.queue' → logprob: -14.93895435333252

Token 320: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.00019710339256562293
    2. '.' → logprob: -8.625197410583496
    3. 'append' → logprob: -11.375197410583496
    4. '.extend' → logprob: -12.500197410583496
    5. ' .' → logprob: -14.000197410583496
    6. '_append' → logprob: -14.250197410583496
    7. '=' → logprob: -14.875197410583496
    8. '   ' → logprob: -15.375197410583496
    9. '.enqueue' → logprob: -17.25019645690918
    10. 'Append' → logprob: -17.50019645690918

Token 321: '((' (ID: 2054)
  Prédit: '(start'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(start' → logprob: -0.008767137303948402
    2. '(' → logprob: -4.758767127990723
    3. '((' → logprob: -8.883767127990723
    4. ' (' → logprob: -11.508767127990723
    5. '   ' → logprob: -13.383767127990723
    6. '(Start' → logprob: -14.133767127990723
    7. '[start' → logprob: -15.133767127990723
    8. '(step' → logprob: -15.508767127990723
    9. ',start' → logprob: -15.633767127990723
    10. '(s' → logprob: -15.758767127990723

Token 322: 'start' (ID: 5236)
  Prédit: 'start'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'start' → logprob: -4.811348480870947e-05
    2. ' start' → logprob: -10.00004768371582
    3. '(start' → logprob: -13.00004768371582
    4. '[start' → logprob: -15.75004768371582
    5. ',start' → logprob: -15.87504768371582
    6. '=start' → logprob: -17.37504768371582
    7. '   ' → logprob: -17.75004768371582
    8. '	start' → logprob: -17.75004768371582
    9. ':start' → logprob: -17.87504768371582
    10. ')' → logprob: -18.12504768371582

Token 323: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -2.6060808522743173e-05
    2. ' ,' → logprob: -10.625025749206543
    3. '0' → logprob: -13.375025749206543
    4. ' ' → logprob: -17.00002670288086
    5. ',
' → logprob: -17.00002670288086
    6. '1' → logprob: -18.12502670288086
    7. ',k' → logprob: -18.12502670288086
    8. '،' → logprob: -18.62502670288086
    9. '，' → logprob: -18.75002670288086
    10. '```' → logprob: -19.12502670288086

Token 324: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00010902655776590109
    2. ' ' → logprob: -9.12510871887207
    3. '1' → logprob: -16.87510871887207
    4. '   ' → logprob: -18.25010871887207
    5. ' ' → logprob: -19.12510871887207
    6. '۰' → logprob: -19.12510871887207
    7. ')' → logprob: -19.75010871887207
    8. 'k' → logprob: -20.12510871887207
    9. '  ' → logprob: -20.56260871887207
    10. '
' → logprob: -21.43760871887207

Token 325: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -2.15310683415737e-05
    2. ' ' → logprob: -10.750021934509277
    3. '1' → logprob: -17.87502098083496
    4. '۰' → logprob: -18.50002098083496
    5. '   ' → logprob: -18.87502098083496
    6. ')' → logprob: -19.68752098083496
    7. 'k' → logprob: -20.37502098083496
    8. '))' → logprob: -20.62502098083496
    9. '  ' → logprob: -21.12502098083496
    10. '00' → logprob: -21.31252098083496

Token 326: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0007806805660948157
    2. ')' → logprob: -7.2507805824279785
    3. '))
' → logprob: -9.750781059265137
    4. ' ))' → logprob: -11.500781059265137
    5. '))

' → logprob: -14.250781059265137
    6. '));' → logprob: -14.875781059265137
    7. '),' → logprob: -15.000781059265137
    8. ')))' → logprob: -15.000781059265137
    9. ',' → logprob: -15.250781059265137
    10. ' ' → logprob: -16.12578010559082

Token 327: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.004704119171947241
    2. '
' → logprob: -6.254703998565674
    3. '       ' → logprob: -6.379703998565674
    4. '            
' → logprob: -8.004704475402832
    5. ')' → logprob: -8.879704475402832
    6. ' 
' → logprob: -9.004704475402832
    7. '   ' → logprob: -9.129704475402832
    8. '  
' → logprob: -9.504704475402832
    9. '<|end|>' → logprob: -9.504704475402832
    10. '```' → logprob: -10.129704475402832

Token 328: ' visited' (ID: 18416)
  Prédit: ' visited'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' visited' → logprob: -0.1912679821252823
    2. 'visited' (adapté à ' visited') → logprob: -1.816267967224121
    3. '           ' → logprob: -4.566267967224121
    4. ' visit' → logprob: -8.191267967224121
    5. '   ' → logprob: -8.191267967224121
    6. ' while' → logprob: -9.066267967224121
    7. ' seen' → logprob: -9.441267967224121
    8. '       ' → logprob: -9.691267967224121
    9. 'visit' → logprob: -10.066267967224121
    10. ' ' → logprob: -10.441267967224121

Token 329: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2255462110042572
    2. '=' → logprob: -1.6005462408065796
    3. '=set' → logprob: -9.100545883178711
    4. '[' → logprob: -11.100545883178711
    5. ' ' → logprob: -13.725545883178711
    6. '   ' → logprob: -13.725545883178711
    7. '=[' → logprob: -14.100545883178711
    8. '[start' → logprob: -14.100545883178711
    9. '=[[' → logprob: -14.225545883178711
    10. '	' → logprob: -14.850545883178711

Token 330: ' [' (ID: 723)
  Prédit: 'set'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'set' → logprob: -0.6534058451652527
    2. '{' → logprob: -0.9034058451652527
    3. '[[' → logprob: -3.1534059047698975
    4. ' set' → logprob: -4.028405666351318
    5. '[' → logprob: -4.653405666351318
    6. ' {' → logprob: -6.153405666351318
    7. '[(' → logprob: -7.528405666351318
    8. '[{' → logprob: -7.528405666351318
    9. ' {(' → logprob: -7.528405666351318
    10. ' [[' → logprob: -7.903405666351318

Token 331: 'False' (ID: 8168)
  Prédit: 'False'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'False' → logprob: -0.0004402055055834353
    2. '-' → logprob: -8.00044059753418
    3. ' False' → logprob: -10.12544059753418
    4. 'n' → logprob: -10.25044059753418
    5. '0' → logprob: -10.75044059753418
    6. '(False' → logprob: -12.75044059753418
    7. '[' → logprob: -13.12544059753418
    8. 'set' → logprob: -13.87544059753418
    9. '[n' → logprob: -14.87544059753418
    10. '-f' → logprob: -15.12544059753418

Token 332: ']*(' (ID: 92627)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.19752174615859985
    2. ']*(' → logprob: -2.197521686553955
    3. ' for' → logprob: -3.322521686553955
    4. ']*' → logprob: -3.572521686553955
    5. 'for' → logprob: -5.697521686553955
    6. '(n' → logprob: -8.322522163391113
    7. ',' → logprob: -9.197522163391113
    8. ']+' → logprob: -9.697522163391113
    9. ' ]' → logprob: -9.697522163391113
    10. '*(' → logprob: -9.822522163391113

Token 333: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -1.580929347255733e-05
    2. ' n' → logprob: -11.375016212463379
    3. '   ' → logprob: -13.000016212463379
    4. 'k' → logprob: -14.000016212463379
    5. '(n' → logprob: -14.125016212463379
    6. ')n' → logprob: -16.375015258789062
    7. '
' → logprob: -16.875015258789062
    8. '  ' → logprob: -17.000015258789062
    9. '	n' → logprob: -17.250015258789062
    10. ' ' → logprob: -17.500015258789062

Token 334: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -1.4140441635390744e-05
    2. ' +' → logprob: -11.250014305114746
    3. '+
' → logprob: -13.750014305114746
    4. '+n' → logprob: -17.50001335144043
    5. '1' → logprob: -18.75001335144043
    6. '+

' → logprob: -19.25001335144043
    7. '＋' → logprob: -19.62501335144043
    8. '
' → logprob: -19.75001335144043
    9. '[' → logprob: -20.00001335144043
    10. 'plus' → logprob: -20.62501335144043

Token 335: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.9743012671824545e-05
    2. ' ' → logprob: -11.000020027160645
    3. '2' → logprob: -14.000020027160645
    4. 'n' → logprob: -14.125020027160645
    5. 'm' → logprob: -14.625020027160645
    6. '   ' → logprob: -15.375020027160645
    7. '(' → logprob: -15.750020027160645
    8. '+' → logprob: -16.000019073486328
    9. '
' → logprob: -16.125019073486328
    10. 'graph' → logprob: -16.250019073486328

Token 336: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0019725270103663206
    2. ')
' → logprob: -6.251972675323486
    3. ' )' → logprob: -10.376972198486328
    4. '           ' → logprob: -11.751972198486328
    5. ')

' → logprob: -13.251972198486328
    6. ')
' → logprob: -13.876972198486328
    7. ' )
' → logprob: -14.876972198486328
    8. '<|end|>' → logprob: -14.876972198486328
    9. '       ' → logprob: -15.501972198486328
    10. '```' → logprob: -15.876972198486328

Token 337: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.01604246348142624
    2. ' visited' → logprob: -5.391042232513428
    3. '            
' → logprob: -5.391042232513428
    4. 'visited' → logprob: -5.891042232513428
    5. '<|end|>' → logprob: -6.641042232513428
    6. ' 
' → logprob: -6.891042232513428
    7. '            ' → logprob: -8.016042709350586
    8. ' ' → logprob: -8.391042709350586
    9. '       ' → logprob: -8.516042709350586
    10. '
' → logprob: -8.641042709350586

Token 338: ' #' (ID: 1069)
  Prédit: 'visited'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'visited' → logprob: -0.13686758279800415
    2. ' visited' → logprob: -2.1368675231933594
    3. '           ' → logprob: -4.636867523193359
    4. 'True' → logprob: -10.01186752319336
    5. '            
' → logprob: -10.51186752319336
    6. '            ' → logprob: -10.51186752319336
    7. ' True' → logprob: -10.76186752319336
    8. 'while' → logprob: -11.26186752319336
    9. '   ' → logprob: -11.26186752319336
    10. '       ' → logprob: -11.51186752319336

Token 339: ' Mais' (ID: 13880)
  Prédit: 'visited'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'visited' → logprob: -0.02453085593879223
    2. ' visited' → logprob: -3.8995308876037598
    3. '           ' → logprob: -5.64953088760376
    4. 'while' → logprob: -7.89953088760376
    5. '            
' → logprob: -10.399530410766602
    6. ' while' → logprob: -10.649530410766602
    7. '            ' → logprob: -11.524530410766602
    8. '   ' → logprob: -12.274530410766602
    9. '
' → logprob: -12.899530410766602
    10. '       ' → logprob: -13.024530410766602

Token 340: ' on' (ID: 402)
  Prédit: 'visited'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'visited' → logprob: -0.3871482312679291
    2. ' visited' → logprob: -1.1371482610702515
    3. '
' → logprob: -9.387147903442383
    4. '<|end|>' → logprob: -10.262147903442383
    5. ' ' → logprob: -10.387147903442383
    6. 'while' → logprob: -10.762147903442383
    7. '           ' → logprob: -10.887147903442383
    8. ' not' → logprob: -11.262147903442383
    9. ' while' → logprob: -11.387147903442383
    10. '            
' → logprob: -11.762147903442383

Token 341: ' doit' (ID: 21822)
  Prédit: 'visited'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'visited' → logprob: -0.0937090739607811
    2. 'need' → logprob: -3.8437089920043945
    3. ' visited' → logprob: -3.9687089920043945
    4. 'do' → logprob: -4.8437089920043945
    5. ' ne' → logprob: -4.9687089920043945
    6. ' need' → logprob: -5.0937089920043945
    7. 'vis' → logprob: -5.5937089920043945
    8. ' n' → logprob: -5.5937089920043945
    9. 's' → logprob: -5.9687089920043945
    10. 'continue' → logprob: -6.2187089920043945

Token 342: ' disting' (ID: 68664)
  Prédit: 'mar'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'mar' → logprob: -0.6491822600364685
    2. ' mar' → logprob: -1.8991823196411133
    3. 'tenir' → logprob: -3.0241823196411133
    4. 'prendre' → logprob: -3.0241823196411133
    5. 'maint' → logprob: -3.3991823196411133
    6. 'vis' → logprob: -3.5241823196411133
    7. 'comp' → logprob: -3.6491823196411133
    8. 'visited' → logprob: -3.7741823196411133
    9. 'com' → logprob: -4.649182319641113
    10. ' prendre' → logprob: -4.899182319641113

Token 343: 'uer' (ID: 4615)
  Prédit: 'uer'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'uer' → logprob: -0.00039015832589939237
    2. 'u' → logprob: -8.25039005279541
    3. '[' → logprob: -9.37539005279541
    4. 'ue' → logprob: -12.25039005279541
    5. '(' → logprob: -12.37539005279541
    6. '#' → logprob: -12.50039005279541
    7. '``' → logprob: -12.75039005279541
    8. 'uir' → logprob: -13.00039005279541
    9. '
' → logprob: -13.12539005279541
    10. 'er' → logprob: -13.25039005279541

Token 344: ' les' (ID: 1341)
  Prédit: ' les'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.49385231733322144
    2. 'les' → logprob: -1.9938523769378662
    3. ' states' → logprob: -2.743852376937866
    4. ' le' → logprob: -3.368852376937866
    5. ' la' → logprob: -3.493852376937866
    6. ' entre' → logprob: -3.743852376937866
    7. ' visited' → logprob: -3.868852376937866
    8. ' l' → logprob: -4.493852138519287
    9. 'visited' → logprob: -4.743852138519287
    10. ' not' → logprob: -5.118852138519287

Token 345: ' états' (ID: 184259)
  Prédit: 'ét'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ét' → logprob: -1.3758822679519653
    2. 'n' → logprob: -2.000882148742676
    3. ' niveaux' → logprob: -2.125882148742676
    4. 'positions' → logprob: -2.625882148742676
    5. 'visited' → logprob: -2.750882148742676
    6. ' noe' → logprob: -3.000882148742676
    7. 'no' → logprob: -3.000882148742676
    8. 'nodes' → logprob: -3.000882148742676
    9. 'levels' → logprob: -3.125882148742676
    10. 'pas' → logprob: -4.000882148742676

Token 346: ' selon' (ID: 27571)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.3079307973384857
    2. ' ,' → logprob: -2.4329307079315186
    3. ' par' → logprob: -2.9329307079315186
    4. ' (' → logprob: -3.5579307079315186
    5. ' des' → logprob: -3.6829307079315186
    6. '<|end|>' → logprob: -4.182930946350098
    7. ' de' → logprob: -4.682930946350098
    8. 'visited' → logprob: -5.182930946350098
    9. ' visited' → logprob: -5.682930946350098
    10. 'par' → logprob: -5.807930946350098

Token 347: ' la' (ID: 557)
  Prédit: 'le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'le' → logprob: -0.3354296386241913
    2. 'l' → logprob: -2.2104296684265137
    3. 'la' → logprob: -2.3354296684265137
    4. 'steps' → logprob: -3.7104296684265137
    5. 'len' → logprob: -3.9604296684265137
    6. ' le' → logprob: -4.835429668426514
    7. ' la' → logprob: -4.960429668426514
    8. 'distance' → logprob: -5.210429668426514
    9. 'leur' → logprob: -6.085429668426514
    10. 'k' → logprob: -6.210429668426514

Token 348: ' profondeur' (ID: 128210)
  Prédit: 'distance'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'distance' → logprob: -0.5581870675086975
    2. 'pro' → logprob: -1.0581870079040527
    3. 'prof' → logprob: -4.058187007904053
    4. ' profondeur' → logprob: -4.058187007904053
    5. 'pas' → logprob: -4.683187007904053
    6. ' distance' → logprob: -5.058187007904053
    7. 'depth' → logprob: -5.183187007904053
    8. 'nombre' → logprob: -5.308187007904053
    9. 'position' → logprob: -5.683187007904053
    10. 'ét' → logprob: -6.058187007904053

Token 349: ',' (ID: 11)
  Prédit: ' ,'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ,' → logprob: -0.6762520670890808
    2. ',' → logprob: -0.8012520670890808
    3. '<|end|>' → logprob: -4.9262518882751465
    4. '.' → logprob: -5.5512518882751465
    5. ' )' → logprob: -5.6762518882751465
    6. ')' → logprob: -5.9262518882751465
    7. ' (' → logprob: -6.0512518882751465
    8. ',
' → logprob: -6.0512518882751465
    9. '(queue' → logprob: -6.1762518882751465
    10. '           ' → logprob: -6.1762518882751465

Token 350: ' donc' (ID: 14206)
  Prédit: ' not'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.220525860786438
    2. 'visited' → logprob: -2.2205257415771484
    3. ' visited' → logprob: -3.2205257415771484
    4. 'not' → logprob: -3.3455257415771484
    5. '           ' → logprob: -5.595525741577148
    6. '            ' → logprob: -5.720525741577148
    7. '<|end|>' → logprob: -5.970525741577148
    8. ' so' → logprob: -7.220525741577148
    9. ' queue' → logprob: -7.595525741577148
    10. 'queue' → logprob: -7.845525741577148

Token 351: ' on' (ID: 402)
  Prédit: 'visited'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'visited' → logprob: -0.02198725752532482
    2. ' visited' → logprob: -4.146987438201904
    3. '           ' → logprob: -5.521987438201904
    4. 'while' → logprob: -7.146987438201904
    5. '            
' → logprob: -8.271986961364746
    6. '
' → logprob: -8.646986961364746
    7. '            ' → logprob: -9.021986961364746
    8. 'queue' → logprob: -9.771986961364746
    9. '   ' → logprob: -9.896986961364746
    10. '               ' → logprob: -10.021986961364746

Token 352: ' mém' (ID: 136981)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.5498599410057068
    2. 'visited' → logprob: -1.4248600006103516
    3. '=' → logprob: -2.2998600006103516
    4. ' =' → logprob: -4.299860000610352
    5. '[]' → logprob: -4.549860000610352
    6. 'continue' → logprob: -4.674860000610352
    7. ']' → logprob: -4.799860000610352
    8. '[
' → logprob: -5.299860000610352
    9. '           ' → logprob: -5.674860000610352
    10. ' continue' → logprob: -5.799860000610352

Token 353: 'or' (ID: 267)
  Prédit: 'or'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'or' → logprob: -0.04068654030561447
    2. 'oire' → logprob: -3.41568660736084
    3. 'ory' → logprob: -5.29068660736084
    4. '[' → logprob: -7.91568660736084
    5. 'oi' → logprob: -8.04068660736084
    6. 'oir' → logprob: -8.29068660736084
    7. 'oriz' → logprob: -8.54068660736084
    8. 'orie' → logprob: -8.66568660736084
    9. 'oris' → logprob: -8.66568660736084
    10. 'o' → logprob: -8.91568660736084

Token 354: 'ise' (ID: 1096)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.3673647940158844
    2. 'ise' → logprob: -1.367364764213562
    3. 'is' → logprob: -4.117364883422852
    4. 'iser' → logprob: -4.367364883422852
    5. 'ize' → logprob: -4.617364883422852
    6. 'se' → logprob: -5.742364883422852
    7. 'ate' → logprob: -5.992364883422852
    8. 'te' → logprob: -6.492364883422852
    9. 'isé' → logprob: -6.867364883422852
    10. 'r' → logprob: -6.992364883422852

Token 355: ' (' (ID: 350)
  Prédit: 'visited'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'visited' → logprob: -0.8772237300872803
    2. 'not' → logprob: -1.6272237300872803
    3. '(' → logprob: -2.2522237300872803
    4. 'the' → logprob: -2.8772237300872803
    5. ' (' → logprob: -2.8772237300872803
    6. ' not' → logprob: -3.3772237300872803
    7. '(True' → logprob: -3.5022237300872803
    8. '(v' → logprob: -4.002223968505859
    9. '(False' → logprob: -4.627223968505859
    10. '((' → logprob: -4.752223968505859

Token 356: 'node' (ID: 7005)
  Prédit: 'start'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'start' → logprob: -0.17311367392539978
    2. 'node' → logprob: -2.0481135845184326
    3. ' start' → logprob: -4.298113822937012
    4. ' node' → logprob: -4.923113822937012
    5. 'state' → logprob: -6.048113822937012
    6. 'current' → logprob: -6.423113822937012
    7. ')' → logprob: -6.798113822937012
    8. 'u' → logprob: -6.923113822937012
    9. 'pos' → logprob: -7.548113822937012
    10. ',' → logprob: -7.548113822937012

Token 357: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00035095500061288476
    2. ' ,' → logprob: -9.125350952148438
    3. ',state' → logprob: -9.250350952148438
    4. ',
' → logprob: -10.375350952148438
    5. ',current' → logprob: -10.750350952148438
    6. ',index' → logprob: -10.875350952148438
    7. ',next' → logprob: -11.125350952148438
    8. ')' → logprob: -11.250350952148438
    9. 'visited' → logprob: -12.000350952148438
    10. ',pos' → logprob: -12.375350952148438

Token 358: ' step' (ID: 5983)
  Prédit: 'depth'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'depth' → logprob: -0.0786297619342804
    2. 'steps' → logprob: -3.203629732131958
    3. ' depth' → logprob: -4.078629970550537
    4. 'step' → logprob: -4.578629970550537
    5. 'distance' → logprob: -5.578629970550537
    6. 'dist' → logprob: -6.328629970550537
    7. ' steps' → logprob: -6.953629970550537
    8. 'level' → logprob: -7.203629970550537
    9. ' step' → logprob: -8.453629493713379
    10. ' dist' → logprob: -8.578629493713379

Token 359: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.014393957331776619
    2. '_count' → logprob: -4.5143938064575195
    3. 's' → logprob: -6.2643938064575195
    4. 'count' → logprob: -7.3893938064575195
    5. ' )' → logprob: -8.88939380645752
    6. ')s' → logprob: -8.88939380645752
    7. ')_' → logprob: -9.01439380645752
    8. '_depth' → logprob: -9.13939380645752
    9. ')
' → logprob: -9.76439380645752
    10. 'depth' → logprob: -10.01439380645752

Token 360: '           ' (ID: 352)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.10148108005523682
    2. '           ' → logprob: -2.9764809608459473
    3. '<|end|>' → logprob: -4.226480960845947
    4. ',' → logprob: -4.351480960845947
    5. ' )' → logprob: -4.601480960845947
    6. ' ' → logprob: -6.351480960845947
    7. '            ' → logprob: -6.851480960845947
    8. '
' → logprob: -7.476480960845947
    9. '		' → logprob: -7.476480960845947
    10. ')
' → logprob: -7.601480960845947

Token 361: ' visited' (ID: 18416)
  Prédit: 'visited'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'visited' (adapté à ' visited') → logprob: -0.17333130538463593
    2. ' visited' → logprob: -2.4233312606811523
    3. '           ' → logprob: -3.7983312606811523
    4. 'True' → logprob: -4.548331260681152
    5. ' True' → logprob: -4.673331260681152
    6. 'set' → logprob: -4.673331260681152
    7. '{' → logprob: -4.798331260681152
    8. ' {(' → logprob: -6.048331260681152
    9. 'False' → logprob: -6.423331260681152
    10. ' set' → logprob: -6.548331260681152

Token 362: '_steps' (ID: 52120)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.42457467317581177
    2. ' =' → logprob: -1.924574613571167
    3. '[start' → logprob: -2.049574613571167
    4. '[' → logprob: -3.299574613571167
    5. '[node' → logprob: -4.049574851989746
    6. '[(' → logprob: -4.424574851989746
    7. '=[' → logprob: -6.924574851989746
    8. '=[[' → logprob: -7.174574851989746
    9. '[[' → logprob: -7.924574851989746
    10. '[state' → logprob: -7.924574851989746

Token 363: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.06997067481279373
    2. ' =' → logprob: -2.6949706077575684
    3. '=[[' → logprob: -11.569971084594727
    4. '=[' → logprob: -11.819971084594727
    5. '[' → logprob: -12.069971084594727
    6. ')' → logprob: -12.694971084594727
    7. '=set' → logprob: -13.194971084594727
    8. '<|end|>' → logprob: -13.569971084594727
    9. ']' → logprob: -13.819971084594727
    10. '[node' → logprob: -14.069971084594727

Token 364: ' [[' (ID: 9237)
  Prédit: '[['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[[' → logprob: -0.05379895865917206
    2. 'set' → logprob: -3.5537989139556885
    3. '[' → logprob: -4.053799152374268
    4. ' [[' → logprob: -5.803799152374268
    5. '{' → logprob: -6.053799152374268
    6. ' set' → logprob: -7.553799152374268
    7. ' [' → logprob: -8.55379867553711
    8. '[(' → logprob: -8.92879867553711
    9. '[{' → logprob: -8.92879867553711
    10. '{}' → logprob: -10.42879867553711

Token 365: 'False' (ID: 8168)
  Prédit: 'False'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'False' → logprob: -9.088346359931165e-07
    2. ' False' → logprob: -14.125000953674316
    3. '(False' → logprob: -16.75
    4. 'n' → logprob: -17.75
    5. '   ' → logprob: -19.75
    6. '=False' → logprob: -20.25
    7. '0' → logprob: -20.375
    8. '
' → logprob: -20.75
    9. '-' → logprob: -21.75
    10. ']' → logprob: -22.0

Token 366: ']*(' (ID: 92627)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.6092999577522278
    2. 'for' → logprob: -0.8592999577522278
    3. ']*(' → logprob: -3.609299898147583
    4. ']' → logprob: -5.734300136566162
    5. '(n' → logprob: -6.109300136566162
    6. ']*' → logprob: -8.734299659729004
    7. 'n' → logprob: -10.484299659729004
    8. '	for' → logprob: -10.859299659729004
    9. '   ' → logprob: -11.109299659729004
    10. '*(' → logprob: -11.234299659729004

Token 367: 'k' (ID: 74)
  Prédit: 'k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -1.1875571544806007e-05
    2. 'n' → logprob: -11.875011444091797
    3. ' k' → logprob: -13.125011444091797
    4. '(k' → logprob: -13.250011444091797
    5. 'graph' → logprob: -14.250011444091797
    6. '{k' → logprob: -15.375011444091797
    7. '(n' → logprob: -16.500011444091797
    8. '   ' → logprob: -17.000011444091797
    9. ' (' → logprob: -17.250011444091797
    10. ' ' → logprob: -18.125011444091797

Token 368: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.0004462812503334135
    2. ' +' → logprob: -7.750446319580078
    3. '+
' → logprob: -11.250446319580078
    4. '
' → logprob: -13.875446319580078
    5. '   ' → logprob: -14.750446319580078
    6. '+n' → logprob: -15.250446319580078
    7. '+k' → logprob: -15.375446319580078
    8. '+)' → logprob: -15.625446319580078
    9. ')' → logprob: -15.750446319580078
    10. ' +
' → logprob: -16.500446319580078

Token 369: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -4.723352049040841e-06
    2. ' ' → logprob: -12.375004768371582
    3. '2' → logprob: -15.000004768371582
    4. '   ' → logprob: -16.500003814697266
    5. '
' → logprob: -16.875003814697266
    6. '

' → logprob: -18.250003814697266
    7. '  ' → logprob: -18.375003814697266
    8. '```' → logprob: -19.250003814697266
    9. 'k' → logprob: -20.000003814697266
    10. '(' → logprob: -20.437503814697266

Token 370: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00027254095766693354
    2. ' )' → logprob: -8.250272750854492
    3. ')]' → logprob: -12.250272750854492
    4. ')
' → logprob: -12.500272750854492
    5. 'for' → logprob: -13.875272750854492
    6. '))' → logprob: -14.375272750854492
    7. ' for' → logprob: -15.000272750854492
    8. '),' → logprob: -15.750272750854492
    9. ']' → logprob: -15.875272750854492
    10. '   ' → logprob: -16.000272750854492

Token 371: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.03854309767484665
    2. 'for' → logprob: -3.2885429859161377
    3. ')' → logprob: -8.163542747497559
    4. '           ' → logprob: -9.663542747497559
    5. '       ' → logprob: -9.913542747497559
    6. ']' → logprob: -10.413542747497559
    7. '               ' → logprob: -10.788542747497559
    8. '	for' → logprob: -11.413542747497559
    9. '   ' → logprob: -11.663542747497559
    10. ' ' → logprob: -12.163542747497559

Token 372: ' _' (ID: 1175)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.18040943145751953
    2. ' _' → logprob: -1.8054094314575195
    3. ' in' → logprob: -7.6804094314575195
    4. ' range' → logprob: -9.18040943145752
    5. '_node' → logprob: -10.43040943145752
    6. ' node' → logprob: -10.68040943145752
    7. 'range' → logprob: -10.93040943145752
    8. '_range' → logprob: -11.55540943145752
    9. ' ' → logprob: -11.93040943145752
    10. '   ' → logprob: -13.30540943145752

Token 373: ' in' (ID: 306)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.14172057807445526
    2. 'in' → logprob: -2.6417205333709717
    3. ' in' → logprob: -2.8917205333709717
    4. ' _' → logprob: -5.766720771789551
    5. 'range' → logprob: -6.391720771789551
    6. ' range' → logprob: -8.89172077178955
    7. '_node' → logprob: -9.01672077178955
    8. 'node' → logprob: -9.26672077178955
    9. '_in' → logprob: -9.39172077178955
    10. ' ' → logprob: -10.51672077178955

Token 374: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.10073753446340561
    2. ' range' → logprob: -2.3507375717163086
    3. '_' → logprob: -7.600737571716309
    4. ' in' → logprob: -11.475737571716309
    5. '   ' → logprob: -12.100737571716309
    6. 'in' → logprob: -12.350737571716309
    7. 'n' → logprob: -12.850737571716309
    8. ' _' → logprob: -12.850737571716309
    9. ' ' → logprob: -13.225737571716309
    10. '_range' → logprob: -13.600737571716309

Token 375: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.29779157042503357
    2. 'range' → logprob: -1.922791600227356
    3. 'n' → logprob: -2.4227914810180664
    4. ' range' → logprob: -4.172791481018066
    5. '(range' → logprob: -5.422791481018066
    6. ' (' → logprob: -6.547791481018066
    7. ' n' → logprob: -7.422791481018066
    8. '   ' → logprob: -7.672791481018066
    9. 'graph' → logprob: -8.672791481018066
    10. '(' → logprob: -10.047791481018066

Token 376: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -1.1398757123970427e-05
    2. '+
' → logprob: -12.500011444091797
    3. ' +' → logprob: -12.625011444091797
    4. '1' → logprob: -13.375011444091797
    5. '   ' → logprob: -14.625011444091797
    6. '
' → logprob: -14.750011444091797
    7. ')+' → logprob: -15.500011444091797
    8. ')]' → logprob: -15.500011444091797
    9. '[' → logprob: -15.812511444091797
    10. ')' → logprob: -15.937511444091797

Token 377: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0003909927327185869
    2. 'k' → logprob: -8.000391006469727
    3. ' ' → logprob: -10.500391006469727
    4. ')' → logprob: -12.250391006469727
    5. '
' → logprob: -12.625391006469727
    6. '(' → logprob: -12.625391006469727
    7. '0' → logprob: -12.875391006469727
    8. '2' → logprob: -13.000391006469727
    9. ' k' → logprob: -13.000391006469727
    10. '   ' → logprob: -13.250391006469727

Token 378: ')]
' (ID: 11587)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.0013560713268816471
    2. ')]
' → logprob: -6.75135612487793
    3. ')' → logprob: -8.75135612487793
    4. '           ' → logprob: -11.87635612487793
    5. ']' → logprob: -12.00135612487793
    6. ' )' → logprob: -12.12635612487793
    7. '       ' → logprob: -12.37635612487793
    8. ')]

' → logprob: -13.62635612487793
    9. ')]
' → logprob: -13.87635612487793
    10. ')])' → logprob: -14.25135612487793

Token 379: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.21887703239917755
    2. '<|end|>' → logprob: -2.593877077102661
    3. ' ' → logprob: -3.343877077102661
    4. '		' → logprob: -4.093876838684082
    5. '	       ' → logprob: -4.468876838684082
    6. '[' → logprob: -4.718876838684082
    7. ' 
' → logprob: -4.843876838684082
    8. ')' → logprob: -4.843876838684082
    9. '            ' → logprob: -5.093876838684082
    10. '       ' → logprob: -5.093876838684082

Token 380: ' visited' (ID: 18416)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.014711393043398857
    2. '       ' → logprob: -5.514711380004883
    3. 'visited' (adapté à ' visited') → logprob: -5.889711380004883
    4. '   ' → logprob: -6.514711380004883
    5. ' while' → logprob: -7.014711380004883
    6. ' visited' → logprob: -7.139711380004883
    7. '	       ' → logprob: -7.264711380004883
    8. ')' → logprob: -7.389711380004883
    9. 'while' → logprob: -7.639711380004883
    10. '            
' → logprob: -7.889711380004883

Token 381: '_steps' (ID: 52120)
  Prédit: '_steps'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_steps' → logprob: -4.8590300139039755e-05
    2. '[' → logprob: -10.125048637390137
    3. '[_' → logprob: -12.500048637390137
    4. 'steps' → logprob: -12.875048637390137
    5. '[start' → logprob: -14.875048637390137
    6. '```' → logprob: -15.125048637390137
    7. 'Steps' → logprob: -15.625048637390137
    8. '_tokens' → logprob: -15.625048637390137
    9. '_nodes' → logprob: -15.750048637390137
    10. '[node' → logprob: -15.875048637390137

Token 382: '[start' (ID: 62179)
  Prédit: '[start'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[start' → logprob: -9.674858301877975e-05
    2. '[' → logprob: -9.250096321105957
    3. 'start' → logprob: -15.625096321105957
    4. ' [' → logprob: -15.750096321105957
    5. '[node' → logprob: -16.125097274780273
    6. '[current' → logprob: -17.250097274780273
    7. '
' → logprob: -17.875097274780273
    8. '=start' → logprob: -18.250097274780273
    9. '```' → logprob: -18.250097274780273
    10. '[end' → logprob: -18.375097274780273

Token 383: '][' (ID: 2696)
  Prédit: ']['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '][' → logprob: -0.0016720877029001713
    2. '[' → logprob: -6.501672267913818
    3. ')][' → logprob: -9.00167179107666
    4. ')[' → logprob: -10.62667179107666
    5. ']' → logprob: -11.50167179107666
    6. '0' → logprob: -12.37667179107666
    7. ' ][' → logprob: -12.75167179107666
    8. ']][' → logprob: -13.50167179107666
    9. ')' → logprob: -13.75167179107666
    10. ',' → logprob: -14.00167179107666

Token 384: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -4.320199877838604e-07
    2. ' ' → logprob: -15.0
    3. '۰' → logprob: -17.5
    4. '০' → logprob: -19.5
    5. '   ' → logprob: -19.5625
    6. '```' → logprob: -19.8125
    7. '1' → logprob: -19.9375
    8. '000' → logprob: -20.1875
    9. '=' → logprob: -20.1875
    10. 'to' → logprob: -20.6875

Token 385: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.002398720709607005
    2. ']=' → logprob: -6.127398490905762
    3. '=' → logprob: -8.502398490905762
    4. 'True' → logprob: -12.502398490905762
    5. ' ]' → logprob: -12.502398490905762
    6. '=True' → logprob: -13.252398490905762
    7. ' =' → logprob: -13.752398490905762
    8. ')' → logprob: -16.252399444580078
    9. ' True' → logprob: -16.377399444580078
    10. ']
' → logprob: -16.502399444580078

Token 386: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.018155092373490334
    2. ' =' → logprob: -4.018155097961426
    3. '=True' → logprob: -12.268155097961426
    4. ']=' → logprob: -15.393155097961426
    5. ']' → logprob: -15.518155097961426
    6. '=False' → logprob: -17.89315414428711
    7. ',' → logprob: -18.26815414428711
    8. '[' → logprob: -18.64315414428711
    9. '   ' → logprob: -19.01815414428711
    10. '=true' → logprob: -19.14315414428711

Token 387: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -1.306760805164231e-05
    2. ' True' → logprob: -11.25001335144043
    3. 'Tr' → logprob: -20.75001335144043
    4. '(True' → logprob: -20.87501335144043
    5. '1' → logprob: -22.00001335144043
    6. '   ' → logprob: -22.75001335144043
    7. '=True' → logprob: -22.87501335144043
    8. 'False' → logprob: -23.12501335144043
    9. 'true' → logprob: -23.12501335144043
    10. '.True' → logprob: -24.25001335144043

Token 388: '
            
' (ID: 45334)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.17952388525009155
    2. '<|end|>' → logprob: -2.8045239448547363
    3. '
' → logprob: -3.0545239448547363
    4. ')' → logprob: -3.9295239448547363
    5. '       ' → logprob: -4.554523944854736
    6. '<|end|>' → logprob: -5.054523944854736
    7. '            
' → logprob: -5.929523944854736
    8. '		' → logprob: -6.179523944854736
    9. ',' → logprob: -6.304523944854736
    10. ' 
' → logprob: -6.304523944854736

Token 389: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.10192009061574936
    2. '       ' → logprob: -3.1019201278686523
    3. '   ' → logprob: -4.476920127868652
    4. '	while' → logprob: -4.851920127868652
    5. '	       ' → logprob: -4.976920127868652
    6. '<|end|>' → logprob: -4.976920127868652
    7. ' while' → logprob: -5.226920127868652
    8. ' ' → logprob: -6.476920127868652
    9. '            
' → logprob: -6.726920127868652
    10. '  
' → logprob: -6.726920127868652

Token 390: ' while' (ID: 2049)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' (adapté à ' while') → logprob: -0.47008663415908813
    2. ' while' → logprob: -1.4700865745544434
    3. '           ' → logprob: -2.2200865745544434
    4. '       ' → logprob: -3.7200865745544434
    5. '   ' → logprob: -4.845086574554443
    6. '	while' → logprob: -5.595086574554443
    7. '	       ' → logprob: -8.345087051391602
    8. '```' → logprob: -8.970087051391602
    9. ')' → logprob: -9.845087051391602
    10. ' ' → logprob: -9.845087051391602

Token 391: ' queue' (ID: 13661)
  Prédit: 'queue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'queue' → logprob: -0.004081724211573601
    2. ' queue' → logprob: -5.504081726074219
    3. '	queue' → logprob: -13.879081726074219
    4. '   ' → logprob: -14.004081726074219
    5. 'len' → logprob: -14.129081726074219
    6. ' ' → logprob: -14.879081726074219
    7. '(queue' → logprob: -15.254081726074219
    8. 'que' → logprob: -16.12908172607422
    9. '       ' → logprob: -17.25408172607422
    10. '  ' → logprob: -17.37908172607422

Token 392: ':
' (ID: 734)
  Prédit: ':
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':
' → logprob: -0.6482406258583069
    2. '.p' → logprob: -1.023240566253662
    3. ':' → logprob: -2.398240566253662
    4. '.append' → logprob: -4.023240566253662
    5. '           ' → logprob: -5.898240566253662
    6. '.pop' → logprob: -6.148240566253662
    7. '               ' → logprob: -6.523240566253662
    8. ' and' → logprob: -7.023240566253662
    9. 'opleft' → logprob: -8.02324104309082
    10. '.' → logprob: -8.52324104309082

Token 393: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.897675633430481
    2. 'node' → logprob: -1.022675633430481
    3. ' node' → logprob: -1.522675633430481
    4. '(node' → logprob: -4.522675514221191
    5. ',node' → logprob: -6.147675514221191
    6. ',' → logprob: -7.522675514221191
    7. ' u' → logprob: -8.147675514221191
    8. 'u' → logprob: -9.022675514221191
    9. 'current' → logprob: -9.147675514221191
    10. ' (' → logprob: -9.147675514221191

Token 394: ' node' (ID: 4596)
  Prédit: 'node'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'node' (adapté à ' node') → logprob: -0.03442919999361038
    2. ' node' → logprob: -3.6594293117523193
    3. 'u' → logprob: -5.65942907333374
    4. 'current' → logprob: -5.90942907333374
    5. ' u' → logprob: -7.03442907333374
    6. '               ' → logprob: -8.159429550170898
    7. 'cur' → logprob: -8.284429550170898
    8. 'curr' → logprob: -8.784429550170898
    9. '                   ' → logprob: -9.034429550170898
    10. ' current' → logprob: -9.284429550170898

Token 395: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -3.3451433409936726e-05
    2. ' ,' → logprob: -10.750033378601074
    3. ',node' → logprob: -11.625033378601074
    4. ',n' → logprob: -13.375033378601074
    5. ',
' → logprob: -14.875033378601074
    6. ',k' → logprob: -15.625033378601074
    7. ',current' → logprob: -16.12503433227539
    8. '               ' → logprob: -16.37503433227539
    9. '                   ' → logprob: -16.50003433227539
    10. ',next' → logprob: -16.50003433227539

Token 396: ' step' (ID: 5983)
  Prédit: ' step'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' step' → logprob: -0.5811589956283569
    2. 'step' → logprob: -0.8311589956283569
    3. 'steps' → logprob: -6.0811591148376465
    4. 'depth' → logprob: -6.4561591148376465
    5. ' steps' → logprob: -7.2061591148376465
    6. ' depth' → logprob: -7.4561591148376465
    7. ' next' → logprob: -11.706158638000488
    8. ' current' → logprob: -12.581158638000488
    9. 'next' → logprob: -12.706158638000488
    10. ' curr' → logprob: -12.956158638000488

Token 397: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5260459184646606
    2. ' =' → logprob: -0.9010459184646606
    3. '+' → logprob: -6.526045799255371
    4. ')' → logprob: -7.151045799255371
    5. ' +=' → logprob: -8.026045799255371
    6. '+=' → logprob: -8.651045799255371
    7. ' ' → logprob: -9.401045799255371
    8. ' +' → logprob: -9.776045799255371
    9. ' )' → logprob: -11.901045799255371
    10. '    ' → logprob: -12.776045799255371

Token 398: ' queue' (ID: 13661)
  Prédit: ' queue'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' queue' → logprob: -0.16023214161396027
    2. 'queue' → logprob: -1.9102321863174438
    3. '(queue' → logprob: -12.035232543945312
    4. '	queue' → logprob: -14.285232543945312
    5. '                ' → logprob: -14.785232543945312
    6. '               ' → logprob: -15.160232543945312
    7. '.queue' → logprob: -15.285232543945312
    8. '                   ' → logprob: -15.785232543945312
    9. ' ' → logprob: -16.160232543945312
    10. 'deque' → logprob: -16.160232543945312

Token 399: '.p' (ID: 1201)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.1143985167145729
    2. ' =' → logprob: -2.36439847946167
    3. ')' → logprob: -4.73939847946167
    4. ' ' → logprob: -6.48939847946167
    5. '               ' → logprob: -7.23939847946167
    6. '           ' → logprob: -7.48939847946167
    7. '                   ' → logprob: -7.98939847946167
    8. '            ' → logprob: -8.114398956298828
    9. '                ' → logprob: -8.239398956298828
    10. '   ' → logprob: -8.489398956298828

Token 400: 'opleft' (ID: 182170)
  Prédit: 'opleft'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'opleft' → logprob: -0.0028062984347343445
    2. 'op' → logprob: -5.877806186676025
    3. 'opup' → logprob: -14.127806663513184
    4. 'ople' → logprob: -15.502806663513184
    5. 'opl' → logprob: -16.127805709838867
    6. '```' → logprob: -16.502805709838867
    7. '   ' → logprob: -16.877805709838867
    8. 'оп' → logprob: -17.127805709838867
    9. ' op' → logprob: -17.252805709838867
    10. 'oplevel' → logprob: -17.627805709838867

Token 401: '()
' (ID: 1234)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.04792432114481926
    2. '<|end|>' → logprob: -4.172924518585205
    3. ')' → logprob: -4.422924518585205
    4. '                
' → logprob: -4.547924518585205
    5. '
' → logprob: -6.547924518585205
    6. '                ' → logprob: -6.672924518585205
    7. '  
' → logprob: -6.922924518585205
    8. ' 
' → logprob: -7.047924518585205
    9. '<|end|>' → logprob: -7.047924518585205
    10. '           ' → logprob: -7.547924518585205

Token 402: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.0018155979923903942
    2. '                
' → logprob: -6.6268157958984375
    3. ' if' → logprob: -8.501815795898438
    4. '                ' → logprob: -9.126815795898438
    5. '           ' → logprob: -10.251815795898438
    6. '                   ' → logprob: -10.376815795898438
    7. ' 
' → logprob: -10.626815795898438
    8. ' for' → logprob: -11.001815795898438
    9. '              ' → logprob: -11.001815795898438
    10. '<|end|>' → logprob: -11.626815795898438

Token 403: ' if' (ID: 538)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.7313237190246582
    2. ' if' → logprob: -1.1063237190246582
    3. ' for' → logprob: -1.8563237190246582
    4. 'if' (adapté à ' if') → logprob: -3.856323719024658
    5. 'for' → logprob: -4.981323719024658
    6. '                
' → logprob: -5.856323719024658
    7. ' 
' → logprob: -7.981323719024658
    8. '           ' → logprob: -8.4813232421875
    9. '
' → logprob: -9.4813232421875
    10. '                ' → logprob: -10.3563232421875

Token 404: ' step' (ID: 5983)
  Prédit: 'step'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'step' → logprob: -0.5759404897689819
    2. ' step' → logprob: -0.8259404897689819
    3. '	step' → logprob: -14.200940132141113
    4. '(step' → logprob: -14.825940132141113
    5. ' ' → logprob: -18.57594108581543
    6. 'Step' → logprob: -19.32594108581543
    7. '_step' → logprob: -19.82594108581543
    8. '.step' → logprob: -19.95094108581543
    9. '   ' → logprob: -19.95094108581543
    10. 'steps' → logprob: -20.20094108581543

Token 405: ' ==' (ID: 951)
  Prédit: ' <'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.2723108232021332
    2. '+' → logprob: -2.147310733795166
    3. ' ==' → logprob: -2.772310733795166
    4. '<' → logprob: -3.272310733795166
    5. ' +' → logprob: -4.397310733795166
    6. '==' → logprob: -5.022310733795166
    7. ' ' → logprob: -6.772310733795166
    8. ' !=' → logprob: -7.522310733795166
    9. ' >=' → logprob: -8.522311210632324
    10. '=' → logprob: -9.647311210632324

Token 406: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.005233882926404476
    2. ' k' → logprob: -5.2552337646484375
    3. '0' → logprob: -16.005233764648438
    4. '	k' → logprob: -17.130233764648438
    5. ' ' → logprob: -17.880233764648438
    6. '
' → logprob: -19.630233764648438
    7. '   ' → logprob: -19.755233764648438
    8. ' к' → logprob: -20.005233764648438
    9. '               ' → logprob: -20.380233764648438
    10. '{k' → logprob: -20.505233764648438

Token 407: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.20146965980529785
    2. ':
' → logprob: -1.7014696598052979
    3. ':return' → logprob: -11.201469421386719
    4. 'continue' → logprob: -11.326469421386719
    5. ':
' → logprob: -11.826469421386719
    6. '           ' → logprob: -11.826469421386719
    7. '               ' → logprob: -11.951469421386719
    8. ' continue' → logprob: -12.951469421386719
    9. '                   ' → logprob: -13.451469421386719
    10. '   ' → logprob: -13.701469421386719

Token 408: '                   ' (ID: 699)
  Prédit: '                   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.009693527594208717
    2. ':
' → logprob: -5.634693622589111
    3. '               ' → logprob: -6.384693622589111
    4. ' continue' → logprob: -6.634693622589111
    5. ':' → logprob: -6.759693622589111
    6. '
' → logprob: -7.384693622589111
    7. '           ' → logprob: -7.759693622589111
    8. '                       ' → logprob: -8.384693145751953
    9. '   ' → logprob: -9.134693145751953
    10. 'continue' → logprob: -9.259693145751953

Token 409: ' #' (ID: 1069)
  Prédit: '                   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.5679954290390015
    2. ' k' → logprob: -1.0679954290390015
    3. 'k' → logprob: -2.567995548248291
    4. '               ' → logprob: -4.692995548248291
    5. '                       ' → logprob: -6.192995548248291
    6. ' for' → logprob: -7.567995548248291
    7. ' continue' → logprob: -8.317995071411133
    8. 'for' → logprob: -8.317995071411133
    9. '   ' → logprob: -8.567995071411133
    10. '           ' → logprob: -8.817995071411133

Token 410: ' ajout' (ID: 64605)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.35269424319267273
    2. ' k' → logprob: -1.2276942729949951
    3. '                   ' → logprob: -5.977694034576416
    4. 'for' → logprob: -7.477694034576416
    5. '               ' → logprob: -7.602694034576416
    6. ' for' → logprob: -7.852694034576416
    7. '           ' → logprob: -9.227694511413574
    8. '   ' → logprob: -9.852694511413574
    9. '                       ' → logprob: -10.352694511413574
    10. ' ' → logprob: -10.602694511413574

Token 411: ' d' (ID: 272)
  Prédit: '                   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.0412418507039547
    2. ' (' → logprob: -4.291241645812988
    3. '               ' → logprob: -4.416241645812988
    4. '                       ' → logprob: -4.916241645812988
    5. ',' → logprob: -6.166241645812988
    6. '                           ' → logprob: -7.041241645812988
    7. 's' → logprob: -7.416241645812988
    8. ')' → logprob: -7.541241645812988
    9. '                    ' → logprob: -7.666241645812988
    10. '           ' → logprob: -7.791241645812988

Token 412: ''une' (ID: 13337)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.8515774011611938
    2. 'e' → logprob: -2.2265772819519043
    3. 'u' → logprob: -2.3515772819519043
    4. ''une' → logprob: -2.6015772819519043
    5. ' une' → logprob: -2.7265772819519043
    6. 'k' → logprob: -2.7265772819519043
    7. '(k' → logprob: -3.2265772819519043
    8. ' u' → logprob: -3.6015772819519043
    9. 'a' → logprob: -4.101577281951904
    10. ' an' → logprob: -4.476577281951904

Token 413: ' ar' (ID: 646)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -1.2038861513137817
    2. ' ar' → logprob: -1.4538861513137817
    3. ' edge' → logprob: -1.5788861513137817
    4. ' k' → logprob: -1.8288861513137817
    5. 'edge' → logprob: -2.953886032104492
    6. 'ar' → logprob: -3.328886032104492
    7. ' ' → logprob: -5.328886032104492
    8. 'are' → logprob: -6.953886032104492
    9. ' are' → logprob: -6.953886032104492
    10. ' lien' → logprob: -7.203886032104492

Token 414: 'ête' (ID: 16808)
  Prédit: 'ête'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ête' → logprob: -0.00385102815926075
    2. 'ète' → logprob: -6.378850936889648
    3. 'ètre' → logprob: -7.628850936889648
    4. 'être' → logprob: -8.003850936889648
    5. 'ôte' → logprob: -8.003850936889648
    6. 'êtes' → logprob: -8.378850936889648
    7. 'êt' → logprob: -8.378850936889648
    8. '^' → logprob: -9.253850936889648
    9. 't' → logprob: -9.628850936889648
    10. 'ère' → logprob: -10.503850936889648

Token 415: ' "' (ID: 392)
  Prédit: '                   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.38232073187828064
    2. '               ' → logprob: -1.507320761680603
    3. ' between' → logprob: -3.1323206424713135
    4. ' k' → logprob: -3.8823206424713135
    5. '           ' → logprob: -4.507320880889893
    6. ' entre' → logprob: -5.257320880889893
    7. 'k' → logprob: -5.507320880889893
    8. ' (' → logprob: -5.882320880889893
    9. '                       ' → logprob: -6.007320880889893
    10. ',' → logprob: -7.007320880889893

Token 416: 'k' (ID: 74)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.6052230596542358
    2. 'k' → logprob: -1.9802230596542358
    3. '(node' → logprob: -1.9802230596542358
    4. ' k' → logprob: -3.1052231788635254
    5. '               ' → logprob: -3.4802231788635254
    6. '(k' → logprob: -3.8552231788635254
    7. ',' → logprob: -3.9802231788635254
    8. '                   ' → logprob: -4.105223178863525
    9. '[node' → logprob: -5.105223178863525
    10. ' ,' → logprob: -5.230223178863525

Token 417: '-step' (ID: 41570)
  Prédit: '-step'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-step' → logprob: -0.001922087394632399
    2. '-' → logprob: -6.626922130584717
    3. '_step' → logprob: -8.001921653747559
    4. ' -' → logprob: -9.626921653747559
    5. ')-' → logprob: -9.876921653747559
    6. '   ' → logprob: -10.501921653747559
    7. ')' → logprob: -10.501921653747559
    8. '"-' → logprob: -10.876921653747559
    9. 'step' → logprob: -11.126921653747559
    10. '-)' → logprob: -11.376921653747559

Token 418: '"' (ID: 1)
  Prédit: '"'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.3008703589439392
    2. '_graph' → logprob: -1.550870418548584
    3. '",' → logprob: -3.925870418548584
    4. ' "' → logprob: -4.175870418548584
    5. ')' → logprob: -5.175870418548584
    6. ' graph' → logprob: -6.175870418548584
    7. ',' → logprob: -7.300870418548584
    8. ' entre' → logprob: -7.425870418548584
    9. ')"' → logprob: -7.550870418548584
    10. 'graph' → logprob: -7.675870418548584

Token 419: ' de' (ID: 334)
  Prédit: '                   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.7114441990852356
    2. '               ' → logprob: -1.5864441394805908
    3. ' k' → logprob: -1.8364441394805908
    4. ',' → logprob: -2.586444139480591
    5. '           ' → logprob: -3.086444139480591
    6. ' ,' → logprob: -4.96144437789917
    7. '                       ' → logprob: -5.71144437789917
    8. 'k' → logprob: -5.96144437789917
    9. '[k' → logprob: -6.21144437789917
    10. '   ' → logprob: -6.33644437789917

Token 420: ' start' (ID: 1604)
  Prédit: 'start'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'start' → logprob: -0.20050925016403198
    2. 'k' → logprob: -2.0755093097686768
    3. ' start' → logprob: -3.0755093097686768
    4. ' k' → logprob: -4.825509071350098
    5. 'node' → logprob: -6.950509071350098
    6. 'u' → logprob: -7.575509071350098
    7. '(start' → logprob: -8.450509071350098
    8. ' node' → logprob: -9.200509071350098
    9. ' u' → logprob: -9.950509071350098
    10. '[start' → logprob: -10.200509071350098

Token 421: ' à' (ID: 1221)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.19101117551326752
    2. ' ,' → logprob: -2.6910111904144287
    3. ' à' → logprob: -2.8160111904144287
    4. '                   ' → logprob: -3.6910111904144287
    5. ' vers' → logprob: -4.31601095199585
    6. '               ' → logprob: -5.81601095199585
    7. '   ' → logprob: -6.81601095199585
    8. '```' → logprob: -7.19101095199585
    9. ' ' → logprob: -7.31601095199585
    10. ' ->' → logprob: -7.56601095199585

Token 422: ' node' (ID: 4596)
  Prédit: 'node'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'node' → logprob: -0.05249673128128052
    2. ' node' → logprob: -3.0524966716766357
    3. 'v' → logprob: -5.552496910095215
    4. ' v' → logprob: -10.677496910095215
    5. '(node' → logprob: -14.677496910095215
    6. '[node' → logprob: -15.677496910095215
    7. '	node' → logprob: -16.4274959564209
    8. 'vertex' → logprob: -17.0524959564209
    9. 've' → logprob: -17.1774959564209
    10. '
' → logprob: -17.8024959564209

Token 423: '
' (ID: 198)
  Prédit: '                   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.32263436913490295
    2. '               ' → logprob: -1.4476343393325806
    3. '           ' → logprob: -4.697634220123291
    4. ')' → logprob: -4.947634220123291
    5. ' k' → logprob: -4.947634220123291
    6. '                       ' → logprob: -5.322634220123291
    7. 'k' → logprob: -5.322634220123291
    8. ':
' → logprob: -6.197634220123291
    9. ':' → logprob: -6.322634220123291
    10. '):
' → logprob: -6.572634220123291

Token 424: '                   ' (ID: 699)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.5378704071044922
    2. '                   ' → logprob: -0.9128704071044922
    3. '           ' → logprob: -5.037870407104492
    4. '                       ' → logprob: -5.787870407104492
    5. ':' → logprob: -6.537870407104492
    6. ')' → logprob: -6.662870407104492
    7. ' k' → logprob: -7.037870407104492
    8. 'k' → logprob: -7.662870407104492
    9. ',' → logprob: -8.412870407104492
    10. '   ' → logprob: -9.037870407104492

Token 425: ' if' (ID: 538)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.40551719069480896
    2. 'k' → logprob: -1.1555172204971313
    3. '                   ' → logprob: -4.280517101287842
    4. '               ' → logprob: -5.405517101287842
    5. '           ' → logprob: -9.655517578125
    6. '                       ' → logprob: -10.655517578125
    7. '	k' → logprob: -10.780517578125
    8. '
' → logprob: -11.405517578125
    9. '                    
' → logprob: -12.530517578125
    10. '   ' → logprob: -12.530517578125

Token 426: ' node' (ID: 4596)
  Prédit: 'node'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'node' → logprob: -0.025696774944663048
    2. ' node' → logprob: -3.9006967544555664
    3. 'start' → logprob: -5.400696754455566
    4. ' start' → logprob: -8.650696754455566
    5. 'step' → logprob: -8.900696754455566
    6. 'not' → logprob: -9.025696754455566
    7. '   ' → logprob: -9.650696754455566
    8. 'k' → logprob: -10.275696754455566
    9. 'len' → logprob: -11.025696754455566
    10. ' not' → logprob: -11.150696754455566

Token 427: ' !=' (ID: 1666)
  Prédit: ' !='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' !=' → logprob: -0.4438134431838989
    2. '!=' → logprob: -1.193813443183899
    3. ' not' → logprob: -2.9438133239746094
    4. 'not' → logprob: -6.443813323974609
    5. ')' → logprob: -7.193813323974609
    6. ')!=' → logprob: -8.19381332397461
    7. ']!=' → logprob: -10.31881332397461
    8. ',' → logprob: -11.81881332397461
    9. '!' → logprob: -12.19381332397461
    10. '!="' → logprob: -12.69381332397461

Token 428: ' start' (ID: 1604)
  Prédit: 'start'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'start' → logprob: -0.029751179739832878
    2. ' start' → logprob: -3.5297510623931885
    3. ' ' → logprob: -14.90475082397461
    4. '	start' → logprob: -15.65475082397461
    5. '   ' → logprob: -16.90475082397461
    6. '0' → logprob: -17.02975082397461
    7. '[start' → logprob: -17.40475082397461
    8. '    ' → logprob: -17.40475082397461
    9. '=start' → logprob: -17.90475082397461
    10. '  ' → logprob: -18.27975082397461

Token 429: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.6653234958648682
    2. ':
' → logprob: -0.7903234958648682
    3. '):
' → logprob: -3.915323495864868
    4. '):' → logprob: -5.040323257446289
    5. '                       ' → logprob: -6.415323257446289
    6. ' and' → logprob: -6.415323257446289
    7. '                           ' → logprob: -7.290323257446289
    8. '                   ' → logprob: -7.665323257446289
    9. '               ' → logprob: -7.790323257446289
    10. ')' → logprob: -7.915323257446289

Token 430: ' ' (ID: 220)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.3347669541835785
    2. ' k' → logprob: -1.7097669839859009
    3. '                   ' → logprob: -3.3347668647766113
    4. 'k' → logprob: -3.9597668647766113
    5. '                           ' → logprob: -4.459766864776611
    6. '               ' → logprob: -4.459766864776611
    7. '                               ' → logprob: -4.709766864776611
    8. '
' → logprob: -4.834766864776611
    9. '                        
' → logprob: -5.334766864776611
    10. '```' → logprob: -7.084766864776611

Token 431: ' #' (ID: 1069)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.8844542503356934
    2. '                       ' → logprob: -1.3844542503356934
    3. 'k' → logprob: -1.7594542503356934
    4. '                   ' → logprob: -2.0094542503356934
    5. '
' → logprob: -4.009454250335693
    6. '               ' → logprob: -4.509454250335693
    7. '                        
' → logprob: -8.759454727172852
    8. '                           ' → logprob: -8.884454727172852
    9. '```' → logprob: -9.009454727172852
    10. '                               ' → logprob: -9.384454727172852

Token 432: ' éviter' (ID: 64013)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.3708598017692566
    2. '               ' → logprob: -1.8708598613739014
    3. '                   ' → logprob: -2.6208598613739014
    4. 'k' → logprob: -2.7458598613739014
    5. '                       ' → logprob: -4.120859622955322
    6. '                           ' → logprob: -6.995859622955322
    7. '           ' → logprob: -7.120859622955322
    8. '                               ' → logprob: -8.12086009979248
    9. '
' → logprob: -8.74586009979248
    10. ' ' → logprob: -9.24586009979248

Token 433: ' boucle' (ID: 174211)
  Prédit: ' graph'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' graph' → logprob: -0.7411620020866394
    2. 'self' → logprob: -1.2411620616912842
    3. 'graph' → logprob: -2.116162061691284
    4. ' self' → logprob: -2.491162061691284
    5. 'start' → logprob: -4.866161823272705
    6. ' k' → logprob: -5.741161823272705
    7. '(graph' → logprob: -5.991161823272705
    8. ' start' → logprob: -5.991161823272705
    9. ' d' → logprob: -6.491161823272705
    10. 'k' → logprob: -6.491161823272705

Token 434: ' inutile' (ID: 157748)
  Prédit: 'self'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'self' → logprob: -0.9381006956100464
    2. '               ' → logprob: -1.4381006956100464
    3. ' self' → logprob: -2.063100814819336
    4. '           ' → logprob: -2.563100814819336
    5. ',' → logprob: -3.063100814819336
    6. '                   ' → logprob: -3.563100814819336
    7. ')' → logprob: -3.688100814819336
    8. '                       ' → logprob: -4.813100814819336
    9. 's' → logprob: -5.188100814819336
    10. '   ' → logprob: -5.438100814819336

Token 435: ' dans' (ID: 2671)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -1.3779796361923218
    2. '                   ' → logprob: -1.3779796361923218
    3. '               ' → logprob: -1.6279796361923218
    4. '                       ' → logprob: -2.1279797554016113
    5. ':
' → logprob: -2.2529797554016113
    6. ')' → logprob: -3.8779797554016113
    7. '):
' → logprob: -4.002979755401611
    8. '                           ' → logprob: -4.252979755401611
    9. '           ' → logprob: -4.752979755401611
    10. '):' → logprob: -5.502979755401611

Token 436: ' ce' (ID: 2357)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.2425021529197693
    2. ' k' → logprob: -1.617502212524414
    3. 'graph' → logprob: -4.742502212524414
    4. 'range' → logprob: -5.367502212524414
    5. ' graph' → logprob: -6.992502212524414
    6. 'l' → logprob: -7.367502212524414
    7. '[k' → logprob: -7.367502212524414
    8. ' le' → logprob: -8.117502212524414
    9. 'le' → logprob: -8.117502212524414
    10. ' la' → logprob: -8.492502212524414

Token 437: ' grap' (ID: 60955)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.5417516827583313
    2. 'k' → logprob: -1.2917516231536865
    3. ' k' → logprob: -3.1667516231536865
    4. ' if' → logprob: -3.1667516231536865
    5. 'graph' → logprob: -4.291751861572266
    6. ' case' → logprob: -4.916751861572266
    7. 'case' → logprob: -5.041751861572266
    8. 'for' → logprob: -5.041751861572266
    9. ' graph' → logprob: -5.166751861572266
    10. ' code' → logprob: -5.291751861572266

Token 438: 'he' (ID: 273)
  Prédit: 'ph'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ph' → logprob: -0.3526335060596466
    2. 'h' → logprob: -1.4776334762573242
    3. 'he' → logprob: -3.227633476257324
    4. 'phe' → logprob: -3.977633476257324
    5. 'aphe' → logprob: -5.227633476257324
    6. '       ' → logprob: -7.102633476257324
    7. '   ' → logprob: -7.477633476257324
    8. '           ' → logprob: -7.602633476257324
    9. 'pe' → logprob: -7.602633476257324
    10. 'p' → logprob: -7.727633476257324

Token 439: ' (' (ID: 350)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.9157673716545105
    2. ':
' → logprob: -1.4157674312591553
    3. '                   ' → logprob: -1.5407674312591553
    4. ':' → logprob: -2.6657674312591553
    5. '                       ' → logprob: -3.2907674312591553
    6. '):
' → logprob: -3.7907674312591553
    7. '           ' → logprob: -5.040767192840576
    8. ')' → logprob: -5.915767192840576
    9. '):' → logprob: -6.415767192840576
    10. ' :
' → logprob: -7.040767192840576

Token 440: 'mais' (ID: 29170)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.15156832337379456
    2. ' )' → logprob: -2.1515684127807617
    3. 'continue' → logprob: -4.401568412780762
    4. ' continue' → logprob: -5.401568412780762
    5. ')
' → logprob: -6.151568412780762
    6. ' )
' → logprob: -6.776568412780762
    7. 'True' → logprob: -7.151568412780762
    8. ' True' → logprob: -7.651568412780762
    9. '):
' → logprob: -7.776568412780762
    10. ' k' → logprob: -7.901568412780762

Token 441: ' pas' (ID: 2173)
  Prédit: ' not'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' not' → logprob: -1.2026596069335938
    2. 'not' → logprob: -1.5776596069335938
    3. ' node' → logprob: -1.7026596069335938
    4. ')' → logprob: -2.2026596069335938
    5. 'node' → logprob: -2.2026596069335938
    6. 'continue' → logprob: -3.7026596069335938
    7. ' continue' → logprob: -4.327659606933594
    8. ' True' → logprob: -4.452659606933594
    9. 'True' → logprob: -4.827659606933594
    10. ' )' → logprob: -5.202659606933594

Token 442: ' obligatoire' (ID: 109362)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.8734077215194702
    2. 'tou' → logprob: -1.2484077215194702
    3. 'always' → logprob: -2.6234078407287598
    4. ' toujours' → logprob: -2.9984078407287598
    5. 'inter' → logprob: -3.3734078407287598
    6. 'if' → logprob: -3.9984078407287598
    7. 'strict' → logprob: -4.24840784072876
    8. ' interdit' → logprob: -4.49840784072876
    9. 'pour' → logprob: -4.49840784072876
    10. 't' → logprob: -4.49840784072876

Token 443: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5535521507263184
    2. '):
' → logprob: -1.1785521507263184
    3. '):' → logprob: -2.6785521507263184
    4. ')
' → logprob: -3.0535521507263184
    5. '               ' → logprob: -6.928552150726318
    6. '                   ' → logprob: -8.678552627563477
    7. '           ' → logprob: -9.428552627563477
    8. '):
' → logprob: -9.803552627563477
    9. ' )' → logprob: -10.053552627563477
    10. ' ):
' → logprob: -10.178552627563477

Token 444: '                       ' (ID: 968)
  Prédit: '                   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.4742504358291626
    2. '                       ' → logprob: -1.2242504358291626
    3. '               ' → logprob: -2.599250316619873
    4. ' k' → logprob: -5.974250316619873
    5. ')' → logprob: -6.349250316619873
    6. '           ' → logprob: -6.599250316619873
    7. 'k' → logprob: -6.974250316619873
    8. '):
' → logprob: -6.974250316619873
    9. '                           ' → logprob: -7.349250316619873
    10. '       ' → logprob: -8.474250793457031

Token 445: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' (adapté à ' k') → logprob: -0.023483753204345703
    2. ' k' → logprob: -3.7734837532043457
    3. '                   ' → logprob: -8.773483276367188
    4. '               ' → logprob: -10.273483276367188
    5. '                           ' → logprob: -10.648483276367188
    6. '                       ' → logprob: -11.148483276367188
    7. '           ' → logprob: -11.773483276367188
    8. '                               ' → logprob: -13.898483276367188
    9. '	k' → logprob: -14.523483276367188
    10. '   ' → logprob: -15.273483276367188

Token 446: 'step' (ID: 17509)
  Prédit: 'step'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'step' → logprob: -2.339278580620885e-06
    2. '_step' → logprob: -13.250001907348633
    3. '-step' → logprob: -15.000001907348633
    4. ' step' → logprob: -15.875001907348633
    5. 'Step' → logprob: -17.125001907348633
    6. '```' → logprob: -18.000001907348633
    7. '-' → logprob: -18.250001907348633
    8. 'stop' → logprob: -18.375001907348633
    9. 'set' → logprob: -18.625001907348633
    10. 'ste' → logprob: -18.750001907348633

Token 447: '_graph' (ID: 33441)
  Prédit: '_graph'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_graph' → logprob: -3.128163257315464e-07
    2. 'graph' → logprob: -16.25
    3. '_' → logprob: -17.125
    4. '"_' → logprob: -17.875
    5. '_k' → logprob: -17.875
    6. ' _' → logprob: -18.375
    7. '```' → logprob: -18.75
    8. '_GRAPH' → logprob: -18.875
    9. '_code' → logprob: -18.875
    10. '_gr' → logprob: -19.125

Token 448: '[start' (ID: 62179)
  Prédit: '[start'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[start' → logprob: -9.088346359931165e-07
    2. '[' → logprob: -14.125000953674316
    3. 'start' → logprob: -15.875000953674316
    4. ' [' → logprob: -17.5
    5. '[k' → logprob: -18.5
    6. '```' → logprob: -18.5
    7. '
' → logprob: -18.875
    8. ')[' → logprob: -20.125
    9. '[end' → logprob: -20.5
    10. '[current' → logprob: -20.75

Token 449: '].' (ID: 1651)
  Prédit: '].'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '].' → logprob: -2.856408536899835e-05
    2. ']' → logprob: -11.250028610229492
    3. '[node' → logprob: -11.875028610229492
    4. '][' → logprob: -12.750028610229492
    5. ').' → logprob: -13.375028610229492
    6. '.append' → logprob: -13.625028610229492
    7. '           ' → logprob: -14.000028610229492
    8. ' ].' → logprob: -14.500028610229492
    9. '   ' → logprob: -14.875028610229492
    10. '       ' → logprob: -15.125028610229492

Token 450: 'append' (ID: 9132)
  Prédit: 'append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'append' → logprob: -1.9361264946837764e-07
    2. '.append' → logprob: -16.5
    3. ' append' → logprob: -18.25
    4. 'appen' → logprob: -21.5
    5. 'app' → logprob: -22.875
    6. '	append' → logprob: -23.25
    7. '_append' → logprob: -23.875
    8. 'Append' → logprob: -24.625
    9. 'add' → logprob: -27.0
    10. 'appe' → logprob: -28.375

Token 451: '(node' (ID: 13356)
  Prédit: '(node'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(node' → logprob: -0.01815076172351837
    2. 'node' → logprob: -4.018150806427002
    3. ' node' → logprob: -14.643150329589844
    4. '(' → logprob: -14.768150329589844
    5. '(
' → logprob: -17.393150329589844
    6. '[node' → logprob: -18.268150329589844
    7. ',node' → logprob: -18.768150329589844
    8. '	node' → logprob: -19.143150329589844
    9. '=node' → logprob: -19.893150329589844
    10. ' (' → logprob: -20.143150329589844

Token 452: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -7.111979357432574e-05
    2. ')
' → logprob: -9.75007152557373
    3. ' )' → logprob: -11.62507152557373
    4. '))' → logprob: -13.50007152557373
    5. ')`' → logprob: -14.75007152557373
    6. '       ' → logprob: -15.12507152557373
    7. '               ' → logprob: -15.37507152557373
    8. ')
' → logprob: -15.37507152557373
    9. ')}' → logprob: -15.50007152557373
    10. '           ' → logprob: -15.50007152557373

Token 453: '                   ' (ID: 699)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.5772985219955444
    2. '                   ' → logprob: -0.8272985219955444
    3. '           ' → logprob: -7.702298641204834
    4. 'continue' → logprob: -7.952298641204834
    5. '
' → logprob: -8.202298164367676
    6. '                       ' → logprob: -8.577298164367676
    7. ' continue' → logprob: -10.577298164367676
    8. '                ' → logprob: -11.702298164367676
    9. '                    
' → logprob: -11.952298164367676
    10. ')' → logprob: -12.077298164367676

Token 454: ' continue' (ID: 4901)
  Prédit: 'continue'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'continue' (adapté à ' continue') → logprob: -0.21575532853603363
    2. '               ' → logprob: -1.7157553434371948
    3. '                   ' → logprob: -4.340755462646484
    4. ' continue' → logprob: -6.840755462646484
    5. '           ' → logprob: -9.090755462646484
    6. '
' → logprob: -11.465755462646484
    7. 'else' → logprob: -11.965755462646484
    8. '	continue' → logprob: -12.965755462646484
    9. 'continu' → logprob: -13.090755462646484
    10. '                       ' → logprob: -13.340755462646484

Token 455: '
' (ID: 198)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.00992713961750269
    2. '                
' → logprob: -4.634927272796631
    3. '                ' → logprob: -10.009926795959473
    4. '			' → logprob: -11.384926795959473
    5. '  
' → logprob: -11.384926795959473
    6. 'for' → logprob: -11.509926795959473
    7. '           ' → logprob: -11.509926795959473
    8. ' 
' → logprob: -11.634926795959473
    9. '                    
' → logprob: -11.759926795959473
    10. '              ' → logprob: -11.759926795959473

Token 456: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.010359636507928371
    2. '                
' → logprob: -4.635359764099121
    3. ' for' → logprob: -8.760359764099121
    4. 'for' → logprob: -8.885359764099121
    5. '
' → logprob: -9.385359764099121
    6. ' 
' → logprob: -9.635359764099121
    7. '  
' → logprob: -10.385359764099121
    8. '    
' → logprob: -10.760359764099121
    9. '                    
' → logprob: -11.010359764099121
    10. '                ' → logprob: -11.260359764099121

Token 457: ' for' (ID: 395)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.6679602265357971
    2. ' for' → logprob: -1.4179601669311523
    3. 'for' (adapté à ' for') → logprob: -1.4179601669311523
    4. '           ' → logprob: -6.292960166931152
    5. '                
' → logprob: -7.042960166931152
    6. '            
' → logprob: -10.042960166931152
    7. '	for' → logprob: -10.292960166931152
    8. '       ' → logprob: -12.167960166931152
    9. '   ' → logprob: -12.292960166931152
    10. 'next' → logprob: -12.292960166931152

Token 458: ' nxt' (ID: 160200)
  Prédit: 'neighbor'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'neighbor' → logprob: -0.06720545887947083
    2. 'next' → logprob: -2.8172054290771484
    3. 'nei' → logprob: -6.442205429077148
    4. ' neighbor' → logprob: -6.442205429077148
    5. 'ne' → logprob: -6.817205429077148
    6. 'nbr' → logprob: -8.317205429077148
    7. ' next' → logprob: -8.692205429077148
    8. ' nxt' → logprob: -8.942205429077148
    9. ' nei' → logprob: -9.067205429077148
    10. 'v' → logprob: -9.442205429077148

Token 459: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.023279141634702682
    2. 'in' → logprob: -3.7732791900634766
    3. 'n' → logprob: -11.273279190063477
    4. ' ' → logprob: -11.773279190063477
    5. '<|end|>' → logprob: -12.398279190063477
    6. ',' → logprob: -13.148279190063477
    7. '	in' → logprob: -13.273279190063477
    8. '_in' → logprob: -13.273279190063477
    9. ')' → logprob: -13.648279190063477
    10. '<|end|>' → logprob: -14.273279190063477

Token 460: ' graph' (ID: 7465)
  Prédit: 'graph'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'graph' → logprob: -5.848420551046729e-05
    2. ' graph' → logprob: -9.7500581741333
    3. '	graph' → logprob: -16.500059127807617
    4. '(graph' → logprob: -17.500059127807617
    5. '   ' → logprob: -17.875059127807617
    6. ' ' → logprob: -19.250059127807617
    7. 'node' → logprob: -19.500059127807617
    8. '  ' → logprob: -20.125059127807617
    9. 'Graph' → logprob: -20.125059127807617
    10. '[' → logprob: -20.500059127807617

Token 461: '[node' (ID: 67268)
  Prédit: '[node'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[node' → logprob: -2.339278580620885e-06
    2. 'node' → logprob: -13.125001907348633
    3. '(node' → logprob: -15.750001907348633
    4. '[' → logprob: -16.375001907348633
    5. '   ' → logprob: -17.875001907348633
    6. '               ' → logprob: -18.000001907348633
    7. ' [' → logprob: -18.250001907348633
    8. ',node' → logprob: -18.500001907348633
    9. '[
' → logprob: -18.750001907348633
    10. '       ' → logprob: -19.000001907348633

Token 462: ']:
' (ID: 22152)
  Prédit: ']:'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']:' → logprob: -0.35043418407440186
    2. ']:
' → logprob: -1.2254341840744019
    3. '):
' → logprob: -7.475434303283691
    4. ']:
' → logprob: -7.725434303283691
    5. '):' → logprob: -8.225434303283691
    6. ':' → logprob: -8.225434303283691
    7. ']' → logprob: -8.350434303283691
    8. ':
' → logprob: -10.100434303283691
    9. '       ' → logprob: -10.225434303283691
    10. ']:

' → logprob: -10.475434303283691

Token 463: '                   ' (ID: 699)
  Prédit: '                   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.005868824664503336
    2. ' if' → logprob: -6.505868911743164
    3. '               ' → logprob: -6.755868911743164
    4. '                    
' → logprob: -6.880868911743164
    5. '                    ' → logprob: -7.880868911743164
    6. '   ' → logprob: -7.880868911743164
    7. ' queue' → logprob: -8.130868911743164
    8. 'if' → logprob: -8.505868911743164
    9. '                ' → logprob: -8.630868911743164
    10. '                       ' → logprob: -9.130868911743164

Token 464: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.23981873691082
    2. '                   ' → logprob: -1.7398186922073364
    3. '                       ' → logprob: -4.489818572998047
    4. ' ' → logprob: -4.864818572998047
    5. ' ' → logprob: -5.114818572998047
    6. '                    ' → logprob: -5.614818572998047
    7. 'if' (adapté à ' if') → logprob: -5.989818572998047
    8. ' 
' → logprob: -6.489818572998047
    9. '                    
' → logprob: -6.614818572998047
    10. '               ' → logprob: -6.864818572998047

Token 465: ' not' (ID: 625)
  Prédit: 'not'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'not' → logprob: -0.5242196917533875
    2. ' not' → logprob: -0.8992196917533875
    3. 'step' → logprob: -7.524219512939453
    4. ' step' → logprob: -7.774219512939453
    5. 'n' → logprob: -9.774219512939453
    6. '                   ' → logprob: -10.649219512939453
    7. '   ' → logprob: -10.899219512939453
    8. '(not' → logprob: -11.524219512939453
    9. '	not' → logprob: -11.649219512939453
    10. 'visited' → logprob: -12.899219512939453

Token 466: ' visited' (ID: 18416)
  Prédit: 'visited'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'visited' → logprob: -0.31326422095298767
    2. ' visited' → logprob: -1.31326425075531
    3. '   ' → logprob: -13.688263893127441
    4. ' ' → logprob: -14.438263893127441
    5. '    ' → logprob: -15.438263893127441
    6. 'vis' → logprob: -16.313264846801758
    7. 'Visited' → logprob: -16.313264846801758
    8. ' ' → logprob: -16.438264846801758
    9. '       ' → logprob: -17.188264846801758
    10. '           ' → logprob: -17.188264846801758

Token 467: '_steps' (ID: 52120)
  Prédit: '_steps'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_steps' → logprob: -9.088346359931165e-07
    2. 'steps' → logprob: -14.250000953674316
    3. '```' → logprob: -16.75
    4. '[n' → logprob: -16.875
    5. '[' → logprob: -17.875
    6. '
' → logprob: -18.0
    7. ' steps' → logprob: -18.875
    8. 'Steps' → logprob: -18.875
    9. '[_' → logprob: -19.25
    10. 'n' → logprob: -19.375

Token 468: '[n' (ID: 15433)
  Prédit: '[n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[n' → logprob: -0.003645449411123991
    2. '[node' → logprob: -5.628645420074463
    3. '[next' → logprob: -10.503645896911621
    4. '[' → logprob: -11.128645896911621
    5. ' [' → logprob: -13.753645896911621
    6. 'n' → logprob: -13.878645896911621
    7. '[now' → logprob: -15.753645896911621
    8. '```' → logprob: -15.878645896911621
    9. '][' → logprob: -16.128644943237305
    10. '
' → logprob: -16.628644943237305

Token 469: 'xt' (ID: 711)
  Prédit: 'xt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'xt' → logprob: -0.00023131117632146925
    2. '[n' → logprob: -8.875231742858887
    3. '[' → logprob: -9.750231742858887
    4. 'x' → logprob: -11.250231742858887
    5. '[node' → logprob: -12.125231742858887
    6. 'st' → logprob: -12.375231742858887
    7. '   ' → logprob: -12.750231742858887
    8. 'ode' → logprob: -13.125231742858887
    9. '[x' → logprob: -13.500231742858887
    10. '```' → logprob: -13.875231742858887

Token 470: '][' (ID: 2696)
  Prédit: ']['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '][' → logprob: -0.12755434215068817
    2. '[' → logprob: -2.127554416656494
    3. ' ][' → logprob: -8.502553939819336
    4. '[node' → logprob: -8.877553939819336
    5. ']' → logprob: -9.127553939819336
    6. '               ' → logprob: -10.127553939819336
    7. ' [' → logprob: -10.502553939819336
    8. '                   ' → logprob: -10.502553939819336
    9. '           ' → logprob: -11.502553939819336
    10. ''][' → logprob: -11.502553939819336

Token 471: 'step' (ID: 17509)
  Prédit: 'step'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'step' → logprob: -7.505351095460355e-05
    2. ' step' → logprob: -9.500075340270996
    3. '(step' → logprob: -16.12507438659668
    4. '   ' → logprob: -18.00007438659668
    5. '	step' → logprob: -18.50007438659668
    6. 'space' → logprob: -18.75007438659668
    7. 'Step' → logprob: -20.00007438659668
    8. ' ' → logprob: -20.50007438659668
    9. '               ' → logprob: -21.00007438659668
    10. '                   ' → logprob: -21.00007438659668

Token 472: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.008614926598966122
    2. ' +' → logprob: -4.758615016937256
    3. '   ' → logprob: -16.633615493774414
    4. '1' → logprob: -16.883615493774414
    5. '＋' → logprob: -16.883615493774414
    6. '+
' → logprob: -17.383615493774414
    7. '```' → logprob: -17.633615493774414
    8. ']' → logprob: -17.883615493774414
    9. ']+' → logprob: -18.383615493774414
    10. '+]' → logprob: -19.008615493774414

Token 473: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.054500666621607e-06
    2. ' ' → logprob: -12.75000286102295
    3. '   ' → logprob: -16.250003814697266
    4. '
' → logprob: -17.437503814697266
    5. ']' → logprob: -17.937503814697266
    6. '```' → logprob: -18.000003814697266
    7. '+' → logprob: -18.250003814697266
    8. '  ' → logprob: -18.625003814697266
    9. '0' → logprob: -19.312503814697266
    10. ')' → logprob: -19.937503814697266

Token 474: ']:
' (ID: 22152)
  Prédit: ']:'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']:' → logprob: -0.480377197265625
    2. ']:
' → logprob: -0.980377197265625
    3. ']' → logprob: -5.355377197265625
    4. ' ]' → logprob: -7.105377197265625
    5. ']:
' → logprob: -7.855377197265625
    6. ']:

' → logprob: -8.980377197265625
    7. '                   ' → logprob: -9.355377197265625
    8. '                       ' → logprob: -9.980377197265625
    9. ']]:
' → logprob: -10.855377197265625
    10. '']:' → logprob: -11.230377197265625

Token 475: '                       ' (ID: 968)
  Prédit: '                       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.005754818674176931
    2. '                        
' → logprob: -6.3807549476623535
    3. '                        ' → logprob: -6.7557549476623535
    4. '                           ' → logprob: -6.8807549476623535
    5. '                   ' → logprob: -7.0057549476623535
    6. '                    ' → logprob: -8.255754470825195
    7. '                               ' → logprob: -9.005754470825195
    8. '               ' → logprob: -9.255754470825195
    9. ' ' → logprob: -9.755754470825195
    10. '```' → logprob: -9.755754470825195

Token 476: ' visited' (ID: 18416)
  Prédit: ' visited'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' visited' → logprob: -0.569391667842865
    2. 'visited' (adapté à ' visited') → logprob: -1.1943917274475098
    3. '                           ' → logprob: -2.3193917274475098
    4. '                       ' → logprob: -4.31939172744751
    5. '                               ' → logprob: -4.44439172744751
    6. ' queue' → logprob: -5.19439172744751
    7. 'queue' → logprob: -6.94439172744751
    8. '```' → logprob: -8.319391250610352
    9. '   ' → logprob: -8.444391250610352
    10. '           ' → logprob: -8.819391250610352

Token 477: '_steps' (ID: 52120)
  Prédit: '_steps'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_steps' → logprob: -3.2378600735682994e-05
    2. '_tokens' → logprob: -10.750032424926758
    3. '_parts' → logprob: -13.250032424926758
    4. '_' → logprob: -13.625032424926758
    5. '_states' → logprob: -13.750032424926758
    6. '_tasks' → logprob: -13.750032424926758
    7. '_s' → logprob: -14.375032424926758
    8. '_spaces' → logprob: -14.375032424926758
    9. '```' → logprob: -14.625032424926758
    10. '_levels' → logprob: -14.750032424926758

Token 478: '[n' (ID: 15433)
  Prédit: '[n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[n' → logprob: -2.696889623621246e-06
    2. '[' → logprob: -14.25000286102295
    3. '[next' → logprob: -14.50000286102295
    4. '][' → logprob: -15.00000286102295
    5. '```' → logprob: -15.37500286102295
    6. 'n' → logprob: -15.87500286102295
    7. '                   ' → logprob: -16.125001907348633
    8. '           ' → logprob: -16.125001907348633
    9. '       ' → logprob: -16.125001907348633
    10. ' [' → logprob: -16.125001907348633

Token 479: 'xt' (ID: 711)
  Prédit: 'xt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'xt' → logprob: -0.027257679030299187
    2. 'x' → logprob: -3.6522576808929443
    3. 'ext' → logprob: -8.027257919311523
    4. '][' → logprob: -8.152257919311523
    5. '+' → logprob: -8.777257919311523
    6. '[n' → logprob: -9.652257919311523
    7. '   ' → logprob: -10.027257919311523
    8. '[next' → logprob: -10.902257919311523
    9. 'n' → logprob: -11.277257919311523
    10. ']' → logprob: -11.402257919311523

Token 480: '][' (ID: 2696)
  Prédit: ']['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '][' → logprob: -0.000802480208221823
    2. '[' → logprob: -7.250802516937256
    3. ']' → logprob: -10.500802040100098
    4. ' ][' → logprob: -10.625802040100098
    5. '[node' → logprob: -11.000802040100098
    6. '[n' → logprob: -11.250802040100098
    7. '[next' → logprob: -12.875802040100098
    8. ']][' → logprob: -13.875802040100098
    9. '   ' → logprob: -14.000802040100098
    10. ''][' → logprob: -14.125802040100098

Token 481: 'step' (ID: 17509)
  Prédit: 'step'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'step' → logprob: -0.00043925188947468996
    2. 'True' → logprob: -7.750439167022705
    3. ' step' → logprob: -11.750439643859863
    4. ' True' → logprob: -15.250439643859863
    5. '1' → logprob: -15.875439643859863
    6. '
' → logprob: -16.000438690185547
    7. '(step' → logprob: -16.125438690185547
    8. '   ' → logprob: -16.750438690185547
    9. 'true' → logprob: -17.250438690185547
    10. '	step' → logprob: -17.500438690185547

Token 482: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.0008060562540777028
    2. ' +' → logprob: -7.125805854797363
    3. '][' → logprob: -15.000805854797363
    4. '   ' → logprob: -15.500805854797363
    5. '[' → logprob: -15.500805854797363
    6. '+[' → logprob: -15.750805854797363
    7. ']+' → logprob: -15.875805854797363
    8. ']' → logprob: -15.875805854797363
    9. '＋' → logprob: -16.12580680847168
    10. '+
' → logprob: -16.50080680847168

Token 483: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -7.3458322731312364e-06
    2. '2' → logprob: -12.375007629394531
    3. ' ' → logprob: -13.500007629394531
    4. '```' → logprob: -13.750007629394531
    5. '                       ' → logprob: -15.625007629394531
    6. '+' → logprob: -16.00000762939453
    7. '   ' → logprob: -16.25000762939453
    8. '                   ' → logprob: -16.62500762939453
    9. '           ' → logprob: -17.37500762939453
    10. ']' → logprob: -17.87500762939453

Token 484: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.005443400703370571
    2. ']=' → logprob: -5.255443572998047
    3. '=' → logprob: -8.505443572998047
    4. ' ]' → logprob: -12.130443572998047
    5. ' =' → logprob: -14.005443572998047
    6. 'True' → logprob: -14.630443572998047
    7. '=True' → logprob: -15.630443572998047
    8. '                       ' → logprob: -16.005443572998047
    9. '                   ' → logprob: -16.505443572998047
    10. '[' → logprob: -16.880443572998047

Token 485: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.0005541055579669774
    2. ' =' → logprob: -7.500554084777832
    3. '=True' → logprob: -14.000554084777832
    4. ']=' → logprob: -15.250554084777832
    5. ']' → logprob: -17.37555503845215
    6. '=
' → logprob: -18.00055503845215
    7. '                           ' → logprob: -19.00055503845215
    8. '.=' → logprob: -19.25055503845215
    9. '                       ' → logprob: -20.12555503845215
    10. '   ' → logprob: -20.37555503845215

Token 486: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -1.0206720617134124e-05
    2. ' True' → logprob: -11.50001049041748
    3. '(True' → logprob: -21.625009536743164
    4. '=True' → logprob: -22.875009536743164
    5. 'true' → logprob: -23.750009536743164
    6. '.True' → logprob: -24.375009536743164
    7. 'Tr' → logprob: -24.625009536743164
    8. '   ' → logprob: -24.750009536743164
    9. 'TRUE' → logprob: -24.875009536743164
    10. '_true' → logprob: -25.250009536743164

Token 487: '
' (ID: 198)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.00020127551397308707
    2. '					' → logprob: -10.250201225280762
    3. '               ' → logprob: -10.375201225280762
    4. '                        
' → logprob: -10.500201225280762
    5. '                   ' → logprob: -10.750201225280762
    6. '           ' → logprob: -11.125201225280762
    7. ',' → logprob: -11.250201225280762
    8. '
' → logprob: -11.500201225280762
    9. '                           ' → logprob: -11.500201225280762
    10. '<|end|>' → logprob: -11.500201225280762

Token 488: '                       ' (ID: 968)
  Prédit: '                       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.0015976991271600127
    2. '```' → logprob: -7.001597881317139
    3. '                        
' → logprob: -8.37659740447998
    4. '                   ' → logprob: -8.75159740447998
    5. '                           ' → logprob: -9.12659740447998
    6. ',' → logprob: -10.12659740447998
    7. '               ' → logprob: -10.50159740447998
    8. '
' → logprob: -10.62659740447998
    9. '                        ' → logprob: -10.75159740447998
    10. '``' → logprob: -11.37659740447998

Token 489: ' queue' (ID: 13661)
  Prédit: 'queue'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'queue' (adapté à ' queue') → logprob: -0.3868836760520935
    2. ' queue' → logprob: -1.1368837356567383
    3. '                           ' → logprob: -12.011883735656738
    4. '                       ' → logprob: -12.261883735656738
    5. '	queue' → logprob: -14.261883735656738
    6. '```' → logprob: -14.636883735656738
    7. '                   ' → logprob: -15.386883735656738
    8. '                               ' → logprob: -15.761883735656738
    9. '   ' → logprob: -15.761883735656738
    10. '(queue' → logprob: -16.261882781982422

Token 490: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -2.5941604690160602e-05
    2. '.' → logprob: -11.000025749206543
    3. '.enqueue' → logprob: -12.625025749206543
    4. '.extend' → logprob: -13.000025749206543
    5. 'append' → logprob: -13.625025749206543
    6. '.push' → logprob: -14.000025749206543
    7. ' .' → logprob: -15.000025749206543
    8. ').' → logprob: -15.375025749206543
    9. '().' → logprob: -15.500025749206543
    10. '```' → logprob: -15.750025749206543

Token 491: '((' (ID: 2054)
  Prédit: '(('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '((' → logprob: -0.6693502068519592
    2. '(' → logprob: -0.9193502068519592
    3. '(n' → logprob: -2.4193501472473145
    4. ' (' → logprob: -8.544350624084473
    5. '(
' → logprob: -12.169350624084473
    6. '(('' → logprob: -14.794350624084473
    7. ' ((' → logprob: -14.919350624084473
    8. '(nx' → logprob: -15.294350624084473
    9. '(next' → logprob: -16.044349670410156
    10. '(

' → logprob: -16.669349670410156

Token 492: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -9.841743303695694e-05
    2. '(n' → logprob: -9.37509822845459
    3. ' nxt' → logprob: -11.25009822845459
    4. '   ' → logprob: -15.25009822845459
    5. '	n' → logprob: -16.500099182128906
    6. '[n' → logprob: -17.000099182128906
    7. ' (' → logprob: -17.500099182128906
    8. '<n' → logprob: -17.625099182128906
    9. ')n' → logprob: -17.625099182128906
    10. 'nx' → logprob: -18.000099182128906

Token 493: 'xt' (ID: 711)
  Prédit: 'xt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'xt' → logprob: -0.0005792465526610613
    2. 'x' → logprob: -7.500579357147217
    3. ',' → logprob: -11.625578880310059
    4. 'n' → logprob: -12.000578880310059
    5. ' nxt' → logprob: -12.125578880310059
    6. '   ' → logprob: -13.125578880310059
    7. 't' → logprob: -13.250578880310059
    8. '       ' → logprob: -14.250578880310059
    9. '(n' → logprob: -15.125578880310059
    10. 'xn' → logprob: -15.625578880310059

Token 494: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -6.73052782076411e-05
    2. ' ,' → logprob: -9.875067710876465
    3. ',n' → logprob: -11.250067710876465
    4. ',node' → logprob: -13.500067710876465
    5. ',
' → logprob: -14.125067710876465
    6. 'n' → logprob: -16.00006675720215
    7. '),' → logprob: -16.62506675720215
    8. '(n' → logprob: -16.87506675720215
    9. '       ' → logprob: -17.00006675720215
    10. ',next' → logprob: -17.00006675720215

Token 495: ' step' (ID: 5983)
  Prédit: 'step'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'step' → logprob: -0.3132619559764862
    2. ' step' → logprob: -1.3132619857788086
    3. '(step' → logprob: -15.813261985778809
    4. '	step' → logprob: -16.813261032104492
    5. ' ' → logprob: -17.938261032104492
    6. '   ' → logprob: -18.188261032104492
    7. '
' → logprob: -19.313261032104492
    8. '    ' → logprob: -19.813261032104492
    9. 'Step' → logprob: -20.313261032104492
    10. '  ' → logprob: -20.688261032104492

Token 496: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.0006265374249778688
    2. ' +' → logprob: -7.375626564025879
    3. '+
' → logprob: -17.875625610351562
    4. '＋' → logprob: -18.000625610351562
    5. ')+' → logprob: -18.500625610351562
    6. '   ' → logprob: -19.000625610351562
    7. '1' → logprob: -19.625625610351562
    8. '()+' → logprob: -20.000625610351562
    9. '+xml' → logprob: -20.000625610351562
    10. ' ' → logprob: -20.000625610351562

Token 497: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.6405310816480778e-05
    2. ' ' → logprob: -11.375016212463379
    3. '2' → logprob: -12.375016212463379
    4. '   ' → logprob: -15.000016212463379
    5. '```' → logprob: -15.625016212463379
    6. '+' → logprob: -16.375017166137695
    7. ')' → logprob: -16.375017166137695
    8. '  ' → logprob: -18.437517166137695
    9. '0' → logprob: -18.875017166137695
    10. '                   ' → logprob: -19.187517166137695

Token 498: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0789414495229721
    2. ')' → logprob: -2.5789413452148438
    3. '))
' → logprob: -9.953941345214844
    4. ')
' → logprob: -13.203941345214844
    5. ')))' → logprob: -13.953941345214844
    6. ' ))' → logprob: -14.203941345214844
    7. ' )' → logprob: -15.453941345214844
    8. ')}' → logprob: -16.203941345214844
    9. '                       ' → logprob: -16.328941345214844
    10. '                   ' → logprob: -16.453941345214844

Token 499: '       ' (ID: 309)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4144247770309448
    2. '       ' → logprob: -1.1644247770309448
    3. '<|end|>' → logprob: -3.7894248962402344
    4. '   ' → logprob: -6.789424896240234
    5. '           ' → logprob: -7.039424896240234
    6. ')return' → logprob: -7.914424896240234
    7. '        ' → logprob: -8.164424896240234
    8. '                       ' → logprob: -8.539424896240234
    9. '<|end|>' → logprob: -8.664424896240234
    10. '```' → logprob: -8.789424896240234

Token 500: ' return' (ID: 622)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.08055379241704941
    2. '   ' → logprob: -2.5805537700653076
    3. ' return' → logprob: -7.080554008483887
    4. 'return' (adapté à ' return') → logprob: -7.705554008483887
    5. ')' → logprob: -8.705554008483887
    6. '	return' → logprob: -9.205554008483887
    7. '        
' → logprob: -10.080554008483887
    8. '    
' → logprob: -11.205554008483887
    9. '	' → logprob: -11.330554008483887
    10. '
' → logprob: -11.705554008483887

Token 501: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -4.5491004129871726e-05
    2. ' k' → logprob: -10.000045776367188
    3. '[k' → logprob: -19.625045776367188
    4. '   ' → logprob: -21.000045776367188
    5. '```' → logprob: -21.625045776367188
    6. '	k' → logprob: -21.625045776367188
    7. '_k' → logprob: -22.625045776367188
    8. '{k' → logprob: -22.750045776367188
    9. '(k' → logprob: -23.125045776367188
    10. ' к' → logprob: -23.750045776367188

Token 502: 'step' (ID: 17509)
  Prédit: '_step'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_step' → logprob: -0.015930311754345894
    2. 'step' → logprob: -4.89093017578125
    3. '_k' → logprob: -5.14093017578125
    4. 'k' → logprob: -6.26593017578125
    5. '_graph' → logprob: -7.89093017578125
    6. ')' → logprob: -9.64093017578125
    7. '-step' → logprob: -10.89093017578125
    8. '```' → logprob: -11.39093017578125
    9. ')_' → logprob: -11.64093017578125
    10. '_' → logprob: -11.76593017578125

Token 503: '_graph' (ID: 33441)
  Prédit: '_graph'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_graph' → logprob: -6.630610641877865e-06
    2. 'raph' → logprob: -12.250006675720215
    3. 'graph' → logprob: -13.500006675720215
    4. 'r' → logprob: -15.875006675720215
    5. '_ph' → logprob: -16.5000057220459
    6. '_' → logprob: -17.1250057220459
    7. ' _' → logprob: -17.3750057220459
    8. '\' → logprob: -17.8750057220459
    9. '_GRAPH' → logprob: -17.8750057220459
    10. '_g' → logprob: -18.0000057220459

Token 504: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 505: '   ' (ID: 271)
  Prédit: '    
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '    
' → logprob: -0.8415048122406006
    2. 'a' → logprob: -1.5915048122406006
    3. '   ' → logprob: -1.8415048122406006
    4. '
' → logprob: -2.5915048122406006
    5. ')' → logprob: -3.2165048122406006
    6. 'k' → logprob: -3.7165048122406006
    7. '_a' → logprob: -4.09150505065918
    8. 'graph' → logprob: -5.09150505065918
    9. ',' → logprob: -5.46650505065918
    10. '[a' → logprob: -5.59150505065918

Token 506: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6514002084732056
    2. '    
' → logprob: -1.1514002084732056
    3. 'a' → logprob: -2.401400089263916
    4. '
' → logprob: -4.151400089263916
    5. 'k' → logprob: -4.151400089263916
    6. ')' → logprob: -4.276400089263916
    7. '   
' → logprob: -5.026400089263916
    8. '  
' → logprob: -5.276400089263916
    9. ',' → logprob: -5.651400089263916
    10. ':' → logprob: -6.901400089263916

Token 507: ' Construction' (ID: 31452)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.18209463357925415
    2. 'graph' → logprob: -2.8070945739746094
    3. '   ' → logprob: -3.4320945739746094
    4. ' k' → logprob: -3.5570945739746094
    5. 'a' → logprob: -3.9320945739746094
    6. 'ka' → logprob: -4.932094573974609
    7. ' graph' → logprob: -5.432094573974609
    8. 'step' → logprob: -5.932094573974609
    9. '    
' → logprob: -6.182094573974609
    10. 'ks' → logprob: -6.182094573974609

Token 508: ' des' (ID: 731)
  Prédit: '_a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_a' → logprob: -0.6252359747886658
    2. '   ' → logprob: -1.2502360343933105
    3. 'a' → logprob: -2.5002360343933105
    4. ' =' → logprob: -2.6252360343933105
    5. '_k' → logprob: -5.1252360343933105
    6. '_' → logprob: -5.2502360343933105
    7. 'k' → logprob: -5.6252360343933105
    8. ' a' → logprob: -5.7502360343933105
    9. '=' → logprob: -5.8752360343933105
    10. 'graph' → logprob: -7.6252360343933105

Token 509: ' trois' (ID: 25564)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.3575722873210907
    2. 'a' → logprob: -1.482572317123413
    3. ' k' → logprob: -3.107572317123413
    4. '_k' → logprob: -4.732572078704834
    5. ' a' → logprob: -4.857572078704834
    6. '_a' → logprob: -5.357572078704834
    7. 'graph' → logprob: -6.357572078704834
    8. '[k' → logprob: -6.857572078704834
    9. '[a' → logprob: -6.982572078704834
    10. 'ka' → logprob: -7.107572078704834

Token 510: ' graph' (ID: 7465)
  Prédit: '_k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_k' → logprob: -0.31584835052490234
    2. '_graph' → logprob: -1.4408483505249023
    3. 'k' → logprob: -4.190848350524902
    4. ' k' → logprob: -4.940848350524902
    5. '_' → logprob: -5.565848350524902
    6. ' _' → logprob: -5.815848350524902
    7. 'graphs' → logprob: -6.690848350524902
    8. 'graph' → logprob: -6.940848350524902
    9. '_gr' → logprob: -7.315848350524902
    10. '_g' → logprob: -7.440848350524902

Token 511: 'es' (ID: 268)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.5804359316825867
    2. 'es' → logprob: -0.8304359316825867
    3. 'k' → logprob: -6.205435752868652
    4. '_k' → logprob: -6.580435752868652
    5. 'e' → logprob: -7.330435752868652
    6. '_s' → logprob: -8.955435752868652
    7. '_' → logprob: -10.205435752868652
    8. '```' → logprob: -10.455435752868652
    9. ' s' → logprob: -10.830435752868652
    10. ' k' → logprob: -10.955435752868652

Token 512: ' à' (ID: 1221)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7260910868644714
    2. 'a' → logprob: -0.8510910868644714
    3. '_a' → logprob: -2.851091146469116
    4. 'graph' → logprob: -4.351090908050537
    5. 'k' → logprob: -5.226090908050537
    6. ' a' → logprob: -5.601090908050537
    7. '_graph' → logprob: -5.601090908050537
    8. '    
' → logprob: -6.476090908050537
    9. '_' → logprob: -6.851090908050537
    10. ' graph' → logprob: -7.476090908050537

Token 513: ' ' (ID: 220)
  Prédit: 'part'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'part' → logprob: -0.2396242767572403
    2. 'k' → logprob: -1.864624261856079
    3. 'pas' → logprob: -3.614624261856079
    4. 'a' → logprob: -3.739624261856079
    5. 'aj' → logprob: -6.114624500274658
    6. 'step' → logprob: -6.614624500274658
    7. '[a' → logprob: -7.864624500274658
    8. 'steps' → logprob: -8.1146240234375
    9. 'tr' → logprob: -8.1146240234375
    10. 'l' → logprob: -8.2396240234375

Token 514: '1' (ID: 16)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.0011480755638331175
    2. '[a' → logprob: -7.001148223876953
    3. 'part' → logprob: -8.876148223876953
    4. '{' → logprob: -10.501148223876953
    5. 'k' → logprob: -10.501148223876953
    6. ' a' → logprob: -10.876148223876953
    7. 'pas' → logprob: -11.876148223876953
    8. '[' → logprob: -12.001148223876953
    9. 'l' → logprob: -13.876148223876953
    10. 'build' → logprob: -14.126148223876953

Token 515: ',' (ID: 11)
  Prédit: 'step'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'step' → logprob: -0.8471219539642334
    2. '_step' → logprob: -0.8471219539642334
    3. '-step' → logprob: -2.2221219539642334
    4. ',' → logprob: -3.9721219539642334
    5. 'pas' → logprob: -5.0971221923828125
    6. ' -' → logprob: -5.5971221923828125
    7. '-,' → logprob: -6.9721221923828125
    8. '-' → logprob: -7.0971221923828125
    9. 'a' → logprob: -7.3471221923828125
    10. ' ,' → logprob: -7.9721221923828125

Token 516: ' ' (ID: 220)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.07011160999536514
    2. ' a' → logprob: -2.6951115131378174
    3. ' ' → logprob: -8.820111274719238
    4. '2' → logprob: -11.445111274719238
    5. '   ' → logprob: -12.320111274719238
    6. ')' → logprob: -13.070111274719238
    7. '  ' → logprob: -13.320111274719238
    8. '	a' → logprob: -13.445111274719238
    9. '#a' → logprob: -13.820111274719238
    10. ')a' → logprob: -13.945111274719238

Token 517: '2' (ID: 17)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.0035025496035814285
    2. ' a' → logprob: -5.753502368927002
    3. '2' → logprob: -8.50350284576416
    4. 'b' → logprob: -9.62850284576416
    5. ' ' → logprob: -11.00350284576416
    6. 'k' → logprob: -11.75350284576416
    7. '#a' → logprob: -12.25350284576416
    8. '   ' → logprob: -13.00350284576416
    9. '1' → logprob: -13.06600284576416
    10. '3' → logprob: -13.44100284576416

Token 518: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.019171984866261482
    2. ',
' → logprob: -4.894172191619873
    3. ' ,' → logprob: -5.519172191619873
    4. '-step' → logprob: -6.269172191619873
    5. 'et' → logprob: -7.019172191619873
    6. '-' → logprob: -7.019172191619873
    7. 'step' → logprob: -7.144172191619873
    8. ' and' → logprob: -7.769172191619873
    9. ',...' → logprob: -7.894172191619873
    10. '
' → logprob: -8.019171714782715

Token 519: ' ...' (ID: 2550)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.48685383796691895
    2. '3' → logprob: -0.986853837966919
    3. '...' → logprob: -4.98685359954834
    4. 'a' → logprob: -6.61185359954834
    5. '1' → logprob: -7.11185359954834
    6. ' ...' → logprob: -7.36185359954834
    7. '```' → logprob: -7.61185359954834
    8. '  ' → logprob: -7.73685359954834
    9. ',' → logprob: -7.98685359954834
    10. '    ' → logprob: -8.36185359954834

Token 520: ' pas' (ID: 2173)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.01713835634291172
    2. '(' → logprob: -5.142138481140137
    3. '(a' → logprob: -5.267138481140137
    4. ' a' → logprob: -6.267138481140137
    5. '_a' → logprob: -6.892138481140137
    6. 'k' → logprob: -7.767138481140137
    7. ' (' → logprob: -7.767138481140137
    8. ',' → logprob: -7.892138481140137
    9. '{' → logprob: -8.392138481140137
    10. '[a' → logprob: -8.517138481140137

Token 521: ' etc' (ID: 5178)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.6791786551475525
    2. 's' → logprob: -1.9291787147521973
    3. '[' → logprob: -2.3041787147521973
    4. 'for' → logprob: -2.3041787147521973
    5. '_a' → logprob: -3.5541787147521973
    6. '[a' → logprob: -3.6791787147521973
    7. ' for' → logprob: -3.9291787147521973
    8. '=' → logprob: -3.9291787147521973
    9. ' =' → logprob: -4.429178714752197
    10. '(' → logprob: -4.679178714752197

Token 522: '.
' (ID: 558)
  Prédit: '(a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.038850218057632446
    2. 'a' → logprob: -3.2888503074645996
    3. '(' → logprob: -7.2888503074646
    4. 'for' → logprob: -11.038849830627441
    5. ' =' → logprob: -11.038849830627441
    6. '   ' → logprob: -11.163849830627441
    7. 'def' → logprob: -11.288849830627441
    8. '[a' → logprob: -11.288849830627441
    9. '=' → logprob: -11.663849830627441
    10. '=a' → logprob: -12.288849830627441

Token 523: '   ' (ID: 271)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.3658811151981354
    2. '=' → logprob: -2.1158812046051025
    3. '_a' → logprob: -2.3658812046051025
    4. ' =' → logprob: -2.6158812046051025
    5. '1' → logprob: -5.115880966186523
    6. '_' → logprob: -5.740880966186523
    7. '(' → logprob: -5.990880966186523
    8. '[a' → logprob: -6.115880966186523
    9. '[' → logprob: -6.615880966186523
    10. ' a' → logprob: -6.990880966186523

Token 524: ' #' (ID: 1069)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.04249457269906998
    2. ' a' → logprob: -4.667494773864746
    3. '_a' → logprob: -4.667494773864746
    4. ' =' → logprob: -4.917494773864746
    5. '=' → logprob: -5.417494773864746
    6. 'for' → logprob: -5.792494773864746
    7. ' for' → logprob: -6.167494773864746
    8. '[' → logprob: -6.542494773864746
    9. '   ' → logprob: -6.792494773864746
    10. '(' → logprob: -7.042494773864746

Token 525: ' Ici' (ID: 145754)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.43218734860420227
    2. '_a' → logprob: -1.4321873188018799
    3. ' a' → logprob: -3.18218731880188
    4. '   ' → logprob: -3.55718731880188
    5. ' =' → logprob: -4.557187557220459
    6. 'for' → logprob: -4.682187557220459
    7. '=' → logprob: -5.182187557220459
    8. '[a' → logprob: -5.307187557220459
    9. ' for' → logprob: -5.432187557220459
    10. '[' → logprob: -6.307187557220459

Token 526: ' on' (ID: 402)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5344588756561279
    2. 'for' → logprob: -2.034458875656128
    3. ' =' → logprob: -2.034458875656128
    4. 'a' → logprob: -2.784458875656128
    5. ' for' → logprob: -3.284458875656128
    6. '_a' → logprob: -4.159459114074707
    7. '1' → logprob: -4.534459114074707
    8. '=' → logprob: -4.784459114074707
    9. 'k' → logprob: -5.659459114074707
    10. '    
' → logprob: -5.784459114074707

Token 527: ' a' (ID: 261)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.13426434993743896
    2. ' =' → logprob: -2.1342644691467285
    3. 'continue' → logprob: -6.5092644691467285
    4. 's' → logprob: -7.1342644691467285
    5. 'build' → logprob: -7.2592644691467285
    6. '.append' → logprob: -7.2592644691467285
    7. 'contin' → logprob: -7.3842644691467285
    8. '_' → logprob: -7.5092644691467285
    9. 'append' → logprob: -8.00926399230957
    10. 'a' → logprob: -8.00926399230957

Token 528: ' seulement' (ID: 32072)
  Prédit: ' ['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' [' → logprob: -1.565647006034851
    2. '[a' → logprob: -1.565647006034851
    3. 'a' → logprob: -1.690647006034851
    4. '_a' → logprob: -2.1906471252441406
    5. ' a' → logprob: -2.3156471252441406
    6. '   ' → logprob: -3.0656471252441406
    7. '[' → logprob: -3.0656471252441406
    8. ' for' → logprob: -3.4406471252441406
    9. 'for' → logprob: -4.315647125244141
    10. 'graph' → logprob: -4.815647125244141

Token 529: ' trois' (ID: 25564)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.18695570528507233
    2. '[a' → logprob: -2.686955690383911
    3. ' a' → logprob: -3.186955690383911
    4. 'for' → logprob: -3.436955690383911
    5. ' for' → logprob: -4.43695592880249
    6. ' in' → logprob: -5.81195592880249
    7. '[' → logprob: -5.93695592880249
    8. ' =' → logprob: -6.43695592880249
    9. '   ' → logprob: -6.43695592880249
    10. 'in' → logprob: -6.68695592880249

Token 530: ' longue' (ID: 59564)
  Prédit: '_graph'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_graph' → logprob: -0.46449369192123413
    2. 'graphs' → logprob: -2.214493751525879
    3. 'k' → logprob: -2.464493751525879
    4. '_k' → logprob: -2.714493751525879
    5. ' =' → logprob: -3.339493751525879
    6. ' graphs' → logprob: -3.839493751525879
    7. 'graph' → logprob: -3.964493751525879
    8. '_' → logprob: -4.964493751525879
    9. ' graph' → logprob: -5.214493751525879
    10. '_gr' → logprob: -5.339493751525879

Token 531: 'urs' (ID: 1628)
  Prédit: 'urs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'urs' → logprob: -0.016849694773554802
    2. 's' → logprob: -4.641849517822266
    3. 'rs' → logprob: -5.391849517822266
    4. 'r' → logprob: -6.641849517822266
    5. 'ur' → logprob: -7.016849517822266
    6. 'ts' → logprob: -9.641849517822266
    7. ' =' → logprob: -9.891849517822266
    8. '=' → logprob: -10.516849517822266
    9. '```' → logprob: -10.516849517822266
    10. 'eurs' → logprob: -11.141849517822266

Token 532: ' a' (ID: 261)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.612156331539154
    2. 's' → logprob: -1.6121563911437988
    3. ':' → logprob: -2.612156391143799
    4. '=' → logprob: -2.987156391143799
    5. 'for' → logprob: -3.487156391143799
    6. '_k' → logprob: -4.362156391143799
    7. '_' → logprob: -4.612156391143799
    8. ' in' → logprob: -4.612156391143799
    9. '_a' → logprob: -4.737156391143799
    10. 'k' → logprob: -4.862156391143799

Token 533: ',b' (ID: 17568)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.021348796784877777
    2. '=' → logprob: -5.02134895324707
    3. ',b' → logprob: -5.52134895324707
    4. ' =' → logprob: -5.64634895324707
    5. ' ,' → logprob: -5.89634895324707
    6. 'a' → logprob: -7.27134895324707
    7. ')' → logprob: -7.52134895324707
    8. ',a' → logprob: -7.77134895324707
    9. ':' → logprob: -8.02134895324707
    10. '_steps' → logprob: -8.27134895324707

Token 534: ',c' (ID: 22261)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.27590930461883545
    2. '    
' → logprob: -2.400909423828125
    3. '_a' → logprob: -3.150909423828125
    4. 'a' → logprob: -3.400909423828125
    5. ' =' → logprob: -3.525909423828125
    6. '
' → logprob: -4.275909423828125
    7. '=' → logprob: -4.400909423828125
    8. ',' → logprob: -4.775909423828125
    9. '_' → logprob: -6.275909423828125
    10. '_graph' → logprob: -6.650909423828125

Token 535: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3334743082523346
    2. 'a' → logprob: -2.7084743976593018
    3. '=' → logprob: -2.9584743976593018
    4. ' =' → logprob: -2.9584743976593018
    5. '_a' → logprob: -3.4584743976593018
    6. '    
' → logprob: -3.7084743976593018
    7. '
' → logprob: -3.9584743976593018
    8. 'k' → logprob: -4.958474159240723
    9. '1' → logprob: -4.958474159240723
    10. '_' → logprob: -5.208474159240723

Token 536: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.035310130566358566
    2. '    
' → logprob: -3.9103100299835205
    3. '
' → logprob: -5.0353102684021
    4. 'a' → logprob: -5.7853102684021
    5. ' =' → logprob: -6.5353102684021
    6. '=' → logprob: -7.0353102684021
    7. ',' → logprob: -7.2853102684021
    8. 'k' → logprob: -7.5353102684021
    9. '```' → logprob: -8.285309791564941
    10. '1' → logprob: -8.910309791564941

Token 537: ' sets' (ID: 11982)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08314649015665054
    2. '    
' → logprob: -3.333146572113037
    3. 'k' → logprob: -3.708146572113037
    4. 'a' → logprob: -4.583146572113037
    5. '
' → logprob: -5.333146572113037
    6. ' k' → logprob: -6.708146572113037
    7. 'graph' → logprob: -7.333146572113037
    8. '   
' → logprob: -7.583146572113037
    9. '  
' → logprob: -7.833146572113037
    10. ' a' → logprob: -8.958146095275879

Token 538: ' =' (ID: 314)
  Prédit: '_k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_k' → logprob: -0.3776155412197113
    2. '_' → logprob: -1.7526155710220337
    3. ' =' → logprob: -2.127615451812744
    4. '_of' → logprob: -4.752615451812744
    5. '_graph' → logprob: -4.877615451812744
    6. '_sets' → logprob: -6.377615451812744
    7. '_a' → logprob: -6.877615451812744
    8. '_steps' → logprob: -7.377615451812744
    9. '=' → logprob: -7.752615451812744
    10. '_lengths' → logprob: -7.752615451812744

Token 539: ' [' (ID: 723)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.2996354103088379
    2. '{' → logprob: -2.049635410308838
    3. '[a' → logprob: -2.299635410308838
    4. '[]
' → logprob: -4.549635410308838
    5. '[]' → logprob: -5.049635410308838
    6. '[k' → logprob: -5.549635410308838
    7. '{k' → logprob: -6.549635410308838
    8. ' [' → logprob: -6.674635410308838
    9. '[{' → logprob: -6.799635410308838
    10. '{}' → logprob: -6.924635410308838

Token 540: 'a' (ID: 64)
  Prédit: 'a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.0008940708357840776
    2. 'build' → logprob: -7.625894069671631
    3. '(a' → logprob: -8.250894546508789
    4. '[a' → logprob: -9.500894546508789
    5. '(build' → logprob: -10.500894546508789
    6. '   ' → logprob: -10.750894546508789
    7. ' a' → logprob: -11.625894546508789
    8. '{' → logprob: -12.750894546508789
    9. ']' → logprob: -13.250894546508789
    10. '(' → logprob: -13.250894546508789

Token 541: ',b' (ID: 17568)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.023267146199941635
    2. ',b' → logprob: -3.7732670307159424
    3. ' ,' → logprob: -11.023266792297363
    4. ',
' → logprob: -12.773266792297363
    5. '   ' → logprob: -14.148266792297363
    6. 'b' → logprob: -14.773266792297363
    7. ']' → logprob: -15.023266792297363
    8. '],' → logprob: -15.273266792297363
    9. ',",' → logprob: -15.398266792297363
    10. ',c' → logprob: -15.523266792297363

Token 542: ',c' (ID: 22261)
  Prédit: ',c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',c' → logprob: -0.2526710331439972
    2. ',' → logprob: -1.5026710033416748
    3. ' ,' → logprob: -7.252671241760254
    4. 'c' → logprob: -11.127671241760254
    5. ',
' → logprob: -11.752671241760254
    6. ']' → logprob: -12.752671241760254
    7. ',b' → logprob: -13.252671241760254
    8. '   ' → logprob: -13.752671241760254
    9. ',k' → logprob: -14.127671241760254
    10. ',C' → logprob: -14.252671241760254

Token 543: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -2.1054253011243418e-05
    2. ' ]' → logprob: -11.250020980834961
    3. ',' → logprob: -12.250020980834961
    4. ']
' → logprob: -13.375020980834961
    5. ')' → logprob: -13.875020980834961
    6. '   ' → logprob: -15.250020980834961
    7. '}' → logprob: -15.875020980834961
    8. ']

' → logprob: -15.875020980834961
    9. '])' → logprob: -16.50002098083496
    10. ')]' → logprob: -16.87502098083496

Token 544: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7868468761444092
    2. ' =' → logprob: -2.036846876144409
    3. ',' → logprob: -2.661846876144409
    4. '=' → logprob: -2.661846876144409
    5. '_k' → logprob: -3.161846876144409
    6. 'k' → logprob: -3.286846876144409
    7. 'graphs' → logprob: -3.411846876144409
    8. ']' → logprob: -3.536846876144409
    9. '_' → logprob: -3.536846876144409
    10. '_graph' → logprob: -3.536846876144409

Token 545: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' (adapté à ' k') → logprob: -0.062265340238809586
    2. ' k' → logprob: -2.937265396118164
    3. 'step' → logprob: -6.312265396118164
    4. '   ' → logprob: -6.312265396118164
    5. '_k' → logprob: -6.937265396118164
    6. '    
' → logprob: -7.187265396118164
    7. 'graphs' → logprob: -7.437265396118164
    8. ' step' → logprob: -8.187265396118164
    9. ']' → logprob: -8.687265396118164
    10. 'steps' → logprob: -8.937265396118164

Token 546: 'step' (ID: 17509)
  Prédit: '_step'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_step' → logprob: -0.06544290482997894
    2. 'step' → logprob: -2.8154428005218506
    3. '_set' → logprob: -6.31544303894043
    4. '_sets' → logprob: -6.94044303894043
    5. '_graph' → logprob: -7.56544303894043
    6. '_steps' → logprob: -9.31544303894043
    7. '_' → logprob: -10.81544303894043
    8. '=' → logprob: -11.06544303894043
    9. 'set' → logprob: -11.56544303894043
    10. '_to' → logprob: -12.19044303894043

Token 547: '_graph' (ID: 33441)
  Prédit: '_graph'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_graph' → logprob: -1.6240566083070007e-06
    2. '_gr' → logprob: -13.750001907348633
    3. '_sets' → logprob: -15.750001907348633
    4. '_g' → logprob: -15.875001907348633
    5. '_' → logprob: -16.375001907348633
    6. '_maps' → logprob: -16.875001907348633
    7. 'graphs' → logprob: -17.500001907348633
    8. '_k' → logprob: -17.750001907348633
    9. '_step' → logprob: -18.250001907348633
    10. '\' → logprob: -18.375001907348633

Token 548: 's' (ID: 82)
  Prédit: 's'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.12242663651704788
    2. '=' → logprob: -2.247426748275757
    3. ' =' → logprob: -4.747426509857178
    4. '_s' → logprob: -7.247426509857178
    5. '_' → logprob: -9.497426986694336
    6. ' s' → logprob: -10.372426986694336
    7. '_graph' → logprob: -10.372426986694336
    8. '=_' → logprob: -11.497426986694336
    9. '=s' → logprob: -11.997426986694336
    10. '_=' → logprob: -11.997426986694336

Token 549: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.03804333135485649
    2. '=' → logprob: -3.288043260574341
    3. '[' → logprob: -14.538043022155762
    4. '=[]' → logprob: -14.788043022155762
    5. ' =[' → logprob: -14.913043022155762
    6. 's' → logprob: -15.538043022155762
    7. '_' → logprob: -16.038043975830078
    8. ',' → logprob: -16.163043975830078
    9. ']' → logprob: -16.163043975830078
    10. ' ' → logprob: -16.538043975830078

Token 550: ' [' (ID: 723)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.008776235394179821
    2. '[list' → logprob: -4.7587761878967285
    3. '{' → logprob: -9.883776664733887
    4. '[]' → logprob: -10.258776664733887
    5. '{}' → logprob: -11.133776664733887
    6. '[k' → logprob: -11.258776664733887
    7. '[]
' → logprob: -11.383776664733887
    8. ' [' → logprob: -11.758776664733887
    9. '[b' → logprob: -12.383776664733887
    10. '[array' → logprob: -12.508776664733887

Token 551: 'build' (ID: 9242)
  Prédit: 'build'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'build' → logprob: -4.723352049040841e-06
    2. ' build' → logprob: -12.375004768371582
    3. '(build' → logprob: -14.500004768371582
    4. '	build' → logprob: -18.250003814697266
    5. ']' → logprob: -19.000003814697266
    6. '.build' → logprob: -20.000003814697266
    7. '   ' → logprob: -20.250003814697266
    8. 'None' → logprob: -20.250003814697266
    9. '[' → logprob: -20.500003814697266
    10. '[]' → logprob: -21.000003814697266

Token 552: '_k' (ID: 11637)
  Prédit: '_k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_k' → logprob: -0.00022451656695920974
    2. '_' → logprob: -9.125224113464355
    3. '(k' → logprob: -9.375224113464355
    4. 'k' → logprob: -11.375224113464355
    5. '(' → logprob: -11.750224113464355
    6. '(a' → logprob: -12.875224113464355
    7. '_a' → logprob: -13.625224113464355
    8. 's' → logprob: -13.750224113464355
    9. 'a' → logprob: -13.750224113464355
    10. ')' → logprob: -14.250224113464355

Token 553: '_step' (ID: 27360)
  Prédit: '_step'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_step' → logprob: -0.00026181264547631145
    2. 'step' → logprob: -8.250262260437012
    3. 'tep' → logprob: -15.500262260437012
    4. '-step' → logprob: -16.375261306762695
    5. '_' → logprob: -17.125261306762695
    6. 'ep' → logprob: -17.500261306762695
    7. 'Step' → logprob: -17.500261306762695
    8. ' step' → logprob: -17.625261306762695
    9. '(step' → logprob: -17.625261306762695
    10. '_STEP' → logprob: -18.000261306762695

Token 554: '_graph' (ID: 33441)
  Prédit: '_graph'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_graph' → logprob: -0.0025074053555727005
    2. 'graph' → logprob: -6.002507209777832
    3. '(graph' → logprob: -11.377507209777832
    4. '_' → logprob: -11.627507209777832
    5. '(_' → logprob: -12.752507209777832
    6. '(' → logprob: -13.752507209777832
    7. '_gr' → logprob: -14.002507209777832
    8. ' _' → logprob: -14.127507209777832
    9. '(k' → logprob: -14.377507209777832
    10. ')' → logprob: -14.377507209777832

Token 555: '(k' (ID: 12125)
  Prédit: '(k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(k' → logprob: -0.0009381395066156983
    2. '(s' → logprob: -7.7509379386901855
    3. '(x' → logprob: -7.7509379386901855
    4. '(' → logprob: -10.125938415527344
    5. 'k' → logprob: -10.375938415527344
    6. '(i' → logprob: -13.375938415527344
    7. ' (' → logprob: -13.375938415527344
    8. 's' → logprob: -14.000938415527344
    9. '(sz' → logprob: -14.750938415527344
    10. 'x' → logprob: -15.500938415527344

Token 556: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -8.180258191714529e-06
    2. ' )' → logprob: -11.750008583068848
    3. ')
' → logprob: -15.625008583068848
    4. '   ' → logprob: -17.00000762939453
    5. ')`' → logprob: -17.87500762939453
    6. ' ' → logprob: -18.12500762939453
    7. '(' → logprob: -18.12500762939453
    8. 'for' → logprob: -18.25000762939453
    9. '))' → logprob: -18.37500762939453
    10. '  ' → logprob: -19.50000762939453

Token 557: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.06197742745280266
    2. 'for' → logprob: -2.8119773864746094
    3. ')' → logprob: -11.93697738647461
    4. '   ' → logprob: -12.93697738647461
    5. ' ' → logprob: -14.93697738647461
    6. '	for' → logprob: -14.93697738647461
    7. '    ' → logprob: -16.06197738647461
    8. '       ' → logprob: -17.31197738647461
    9. ']' → logprob: -17.31197738647461
    10. '  ' → logprob: -17.93697738647461

Token 558: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.4493524730205536
    2. ' k' → logprob: -1.074352502822876
    3. ' sets' → logprob: -4.324352264404297
    4. 'sets' → logprob: -4.949352264404297
    5. 'set' → logprob: -9.699352264404297
    6. ' set' → logprob: -10.324352264404297
    7. 'ks' → logprob: -12.324352264404297
    8. ' ' → logprob: -12.324352264404297
    9. '	k' → logprob: -12.949352264404297
    10. 's' → logprob: -14.199352264404297

Token 559: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.07889826595783234
    2. 'in' → logprob: -2.5788981914520264
    3. 'sets' → logprob: -12.703898429870605
    4. 's' → logprob: -13.078898429870605
    5. ' ' → logprob: -13.453898429870605
    6. 'k' → logprob: -13.703898429870605
    7. 'set' → logprob: -14.828898429870605
    8. 'ins' → logprob: -15.453898429870605
    9. ' sets' → logprob: -15.703898429870605
    10. 'n' → logprob: -16.57889747619629

Token 560: ' sets' (ID: 11982)
  Prédit: 'sets'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sets' → logprob: -0.0009118211455643177
    2. ' sets' → logprob: -7.000911712646484
    3. 'set' → logprob: -15.000911712646484
    4. '[' → logprob: -16.750911712646484
    5. '{' → logprob: -19.625911712646484
    6. ' ' → logprob: -20.625911712646484
    7. '(' → logprob: -21.000911712646484
    8. '   ' → logprob: -21.375911712646484
    9. ' [' → logprob: -21.625911712646484
    10. 'range' → logprob: -22.000911712646484

Token 561: ']

' (ID: 3144)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -6.12258882028982e-05
    2. ' ]' → logprob: -10.00006103515625
    3. ')]' → logprob: -11.37506103515625
    4. ']
' → logprob: -13.37506103515625
    5. '()]' → logprob: -13.37506103515625
    6. '   ' → logprob: -14.25006103515625
    7. ')' → logprob: -15.25006103515625
    8. '<|end|>' → logprob: -16.25006103515625
    9. ']

' → logprob: -16.87506103515625
    10. '])' → logprob: -17.00006103515625

Token 562: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.045297443866729736
    2. '   ' → logprob: -3.420297384262085
    3. '#' → logprob: -5.170297622680664
    4. '    
' → logprob: -5.795297622680664
    5. 'state' → logprob: -7.545297622680664
    6. 'states' → logprob: -7.670297622680664
    7. '<|end|>' → logprob: -7.920297622680664
    8. 'visited' → logprob: -8.545297622680664
    9. '```' → logprob: -8.795297622680664
    10. '  
' → logprob: -8.920297622680664

Token 563: ' #' (ID: 1069)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.9903037548065186
    2. '#' (adapté à ' #') → logprob: -1.9903037548065186
    3. 'dp' → logprob: -2.2403037548065186
    4. 'states' → logprob: -2.3653037548065186
    5. 'dist' → logprob: -2.6153037548065186
    6. 'state' → logprob: -2.9903037548065186
    7. '   ' → logprob: -3.3653037548065186
    8. 'from' → logprob: -3.3653037548065186
    9. 'distance' → logprob: -3.4903037548065186
    10. 'queue' → logprob: -4.240303993225098

Token 564: ' Maintenant' (ID: 163349)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.39754125475883484
    2. 'from' → logprob: -1.2725412845611572
    3. 'dist' → logprob: -3.8975412845611572
    4. 'state' → logprob: -5.272541046142578
    5. 'dp' → logprob: -5.397541046142578
    6. 'def' → logprob: -5.522541046142578
    7. 'distance' → logprob: -5.522541046142578
    8. 'queue' → logprob: -5.772541046142578
    9. 'visited' → logprob: -6.397541046142578
    10. 'depth' → logprob: -7.147541046142578

Token 565: ' on' (ID: 402)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.25276973843574524
    2. '   ' → logprob: -1.8777697086334229
    3. ' #' → logprob: -3.377769708633423
    4. 'distance' → logprob: -4.877769947052002
    5. ' on' → logprob: -5.002769947052002
    6. ' dist' → logprob: -5.502769947052002
    7. 'dist' → logprob: -5.877769947052002
    8. 'def' → logprob: -6.127769947052002
    9. ' distance' → logprob: -6.252769947052002
    10. ',' → logprob: -6.252769947052002

Token 566: ' mod' (ID: 1812)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.2700425982475281
    2. 'continue' → logprob: -2.520042657852173
    3. 'va' → logprob: -2.770042657852173
    4. '   ' → logprob: -2.895042657852173
    5. ' #' → logprob: -4.770042419433594
    6. ' va' → logprob: -4.770042419433594
    7. 'def' → logprob: -5.145042419433594
    8. 'cherche' → logprob: -5.645042419433594
    9. 'vais' → logprob: -6.270042419433594
    10. ' continue' → logprob: -6.395042419433594

Token 567: 'él' (ID: 6778)
  Prédit: 'él'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'él' → logprob: -0.002283241832628846
    2. 'é' → logprob: -7.002283096313477
    3. 'èl' → logprob: -7.252283096313477
    4. 'èle' → logprob: -7.877283096313477
    5. 'l' → logprob: -9.502283096313477
    6. '```' → logprob: -10.002283096313477
    7. 'el' → logprob: -10.377283096313477
    8. 'è' → logprob: -10.502283096313477
    9. 'elif' → logprob: -10.752283096313477
    10. 'éf' → logprob: -10.877283096313477

Token 568: 'ise' (ID: 1096)
  Prédit: 'ise'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ise' → logprob: -0.00023238400171976537
    2. 'is' → logprob: -9.250232696533203
    3. 'e' → logprob: -10.250232696533203
    4. 'aise' → logprob: -10.625232696533203
    5. '```' → logprob: -10.875232696533203
    6. 'iser' → logprob: -11.250232696533203
    7. '#' → logprob: -11.375232696533203
    8. 'isé' → logprob: -12.500232696533203
    9. 'isent' → logprob: -12.875232696533203
    10. '   ' → logprob: -12.875232696533203

Token 569: ' le' (ID: 505)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.7566379904747009
    2. ' l' → logprob: -1.3816380500793457
    3. 'le' → logprob: -2.7566380500793457
    4. ' le' → logprob: -2.8816380500793457
    5. '#' → logprob: -3.2566380500793457
    6. ' un' → logprob: -3.7566380500793457
    7. 'la' → logprob: -3.8816380500793457
    8. ' les' → logprob: -4.006638050079346
    9. ' states' → logprob: -4.131638050079346
    10. 'les' → logprob: -4.631638050079346

Token 570: ' jeu' (ID: 24626)
  Prédit: 'jeu'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'jeu' → logprob: -0.2778947055339813
    2. ' jeu' → logprob: -1.9028947353363037
    3. ' problème' → logprob: -3.0278947353363037
    4. 'pro' → logprob: -4.027894496917725
    5. 'proble' → logprob: -4.777894496917725
    6. '#' → logprob: -5.027894496917725
    7. 'ét' → logprob: -6.402894496917725
    8. ' reste' → logprob: -6.402894496917725
    9. ' #' → logprob: -6.777894496917725
    10. ' état' → logprob: -6.902894496917725

Token 571: ' de' (ID: 334)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.3436421751976013
    2. '   ' → logprob: -1.468642234802246
    3. '
' → logprob: -3.968642234802246
    4. '    
' → logprob: -4.468642234802246
    5. ':
' → logprob: -4.968642234802246
    6. ' :' → logprob: -5.218642234802246
    7. '.' → logprob: -5.218642234802246
    8. '#' → logprob: -5.718642234802246
    9. ',' → logprob: -5.718642234802246
    10. '```' → logprob: -7.468642234802246

Token 572: ' façon' (ID: 33381)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'l' → logprob: -1.096102237701416
    2. 'la' → logprob: -1.471102237701416
    3. 'positions' → logprob: -2.471102237701416
    4. 't' → logprob: -2.596102237701416
    5. '#' → logprob: -3.846102237701416
    6. '```' → logprob: -3.846102237701416
    7. 'states' → logprob: -3.846102237701416
    8. ' la' → logprob: -3.971102237701416
    9. ' l' → logprob: -4.096102237701416
    10. 'tour' → logprob: -4.096102237701416

Token 573: ' invers' (ID: 38721)
  Prédit: ' complète'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' complète' → logprob: -0.8668814897537231
    2. 'com' → logprob: -1.7418814897537231
    3. ' complet' → logprob: -2.1168813705444336
    4. ' à' → logprob: -2.3668813705444336
    5. ' compl' → logprob: -2.9918813705444336
    6. 'à' → logprob: -3.3668813705444336
    7. 'compl' → logprob: -3.7418813705444336
    8. ' complément' → logprob: -4.866881370544434
    9. ' advers' → logprob: -4.866881370544434
    10. ' classique' → logprob: -5.116881370544434

Token 574: 'ée' (ID: 2894)
  Prédit: 'ée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ée' → logprob: -0.014186188578605652
    2. 'e' → logprob: -4.389186382293701
    3. 'é' → logprob: -6.514186382293701
    4. 'rée' → logprob: -10.014185905456543
    5. 'érée' → logprob: -10.264185905456543
    6. 'er' → logprob: -10.389185905456543
    7. 'urée' → logprob: -11.264185905456543
    8. 'ivée' → logprob: -11.389185905456543
    9. 'érieure' → logprob: -11.764185905456543
    10. 'cée' → logprob: -11.764185905456543

Token 575: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.14258770644664764
    2. '.' → logprob: -3.142587661743164
    3. ',' → logprob: -3.267587661743164
    4. '   ' → logprob: -3.517587661743164
    5. '
' → logprob: -4.767587661743164
    6. ' :' → logprob: -4.767587661743164
    7. ':
' → logprob: -6.392587661743164
    8. 'def' → logprob: -7.642587661743164
    9. ',
' → logprob: -8.517587661743164
    10. '```' → logprob: -8.517587661743164

Token 576: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.011345356702804565
    2. ' states' → logprob: -5.386345386505127
    3. ' dp' → logprob: -5.886345386505127
    4. '    ' → logprob: -7.261345386505127
    5. '    
' → logprob: -7.386345386505127
    6. ' dist' → logprob: -7.886345386505127
    7. ' #' → logprob: -8.261344909667969
    8. ' visited' → logprob: -8.261344909667969
    9. ' reverse' → logprob: -8.386344909667969
    10. ' distances' → logprob: -8.511344909667969

Token 577: ' #' (ID: 1069)
  Prédit: ' dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' dp' → logprob: -1.3755019903182983
    2. '   ' → logprob: -1.6255019903182983
    3. 'dp' → logprob: -2.250502109527588
    4. ' dist' → logprob: -2.250502109527588
    5. '#' (adapté à ' #') → logprob: -2.500502109527588
    6. ' states' → logprob: -2.625502109527588
    7. ' #' → logprob: -2.750502109527588
    8. ' distance' → logprob: -3.500502109527588
    9. 'dist' → logprob: -4.750502109527588
    10. ' from' → logprob: -4.750502109527588

Token 578: ' É' (ID: 10055)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.6852095723152161
    2. 'from' → logprob: -1.0602095127105713
    3. 'dist' → logprob: -3.0602095127105713
    4. 'dp' → logprob: -3.1852095127105713
    5. ' from' → logprob: -4.31020975112915
    6. 'distance' → logprob: -4.31020975112915
    7. 'visited' → logprob: -5.18520975112915
    8. '   ' → logprob: -5.43520975112915
    9. 'states' → logprob: -5.43520975112915
    10. ' #' → logprob: -5.93520975112915

Token 579: 'tat' (ID: 32232)
  Prédit: 'tat'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tat' → logprob: -0.3950915038585663
    2. '#' → logprob: -1.5200915336608887
    3. 't' → logprob: -2.6450915336608887
    4. 'tage' → logprob: -4.895091533660889
    5. 'states' → logprob: -4.895091533660889
    6. 'gal' → logprob: -5.145091533660889
    7. 'tant' → logprob: -5.395091533660889
    8. 'def' → logprob: -6.145091533660889
    9. ' #' → logprob: -6.895091533660889
    10. 'x' → logprob: -7.145091533660889

Token 580: ' du' (ID: 1462)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.6107913851737976
    2. ' =' → logprob: -0.8607913851737976
    3. ' s' → logprob: -4.485791206359863
    4. ':' → logprob: -4.610791206359863
    5. ' :' → logprob: -5.485791206359863
    6. '=' → logprob: -6.110791206359863
    7. '_s' → logprob: -6.735791206359863
    8. '_' → logprob: -6.985791206359863
    9. ',' → logprob: -7.110791206359863
    10. ' ' → logprob: -7.360791206359863

Token 581: ' jeu' (ID: 24626)
  Prédit: ' jeu'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' jeu' → logprob: -0.5954111218452454
    2. 'jeu' → logprob: -1.3454110622406006
    3. ' joueur' → logprob: -1.9704110622406006
    4. ' code' → logprob: -4.34541130065918
    5. ' la' → logprob: -4.47041130065918
    6. 'code' → logprob: -4.97041130065918
    7. '#' → logprob: -5.47041130065918
    8. ' #' → logprob: -5.84541130065918
    9. 'jou' → logprob: -5.97041130065918
    10. 'la' → logprob: -6.59541130065918

Token 582: ' :' (ID: 712)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2400892823934555
    2. ':' → logprob: -1.9900892972946167
    3. ' :' → logprob: -2.740089178085327
    4. '=' → logprob: -4.740089416503906
    5. 's' → logprob: -6.365089416503906
    6. ':
' → logprob: -7.490089416503906
    7. ',' → logprob: -8.115089416503906
    8. ' s' → logprob: -8.490089416503906
    9. ' :
' → logprob: -9.115089416503906
    10. ' (' → logprob: -9.490089416503906

Token 583: ' cercle' (ID: 172399)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.2866995632648468
    2. '(' → logprob: -2.2866995334625244
    3. '(n' → logprob: -2.5366995334625244
    4. '(node' → logprob: -3.0366995334625244
    5. ' node' → logprob: -5.2866997718811035
    6. 'node' → logprob: -5.4116997718811035
    7. '(state' → logprob: -5.9116997718811035
    8. '(current' → logprob: -6.4116997718811035
    9. 'state' → logprob: -6.9116997718811035
    10. 'current' → logprob: -7.0366997718811035

Token 584: ' courant' (ID: 74694)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.11419636756181717
    2. ')' → logprob: -2.864196300506592
    3. ' ,' → logprob: -3.364196300506592
    4. ' =' → logprob: -4.614196300506592
    5. '   ' → logprob: -6.239196300506592
    6. ' (' → logprob: -6.864196300506592
    7. ' )' → logprob: -7.239196300506592
    8. ',
' → logprob: -7.364196300506592
    9. '),' → logprob: -7.739196300506592
    10. 's' → logprob: -8.36419677734375

Token 585: ' où' (ID: 15113)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.10507386177778244
    2. ' ,' → logprob: -2.605073928833008
    3. '   ' → logprob: -4.480073928833008
    4. ')' → logprob: -5.105073928833008
    5. ',
' → logprob: -5.605073928833008
    6. '
' → logprob: -7.105073928833008
    7. ' ' → logprob: -7.230073928833008
    8. ' (' → logprob: -7.480073928833008
    9. ' )' → logprob: -7.730073928833008
    10. ':' → logprob: -7.855073928833008

Token 586: ' l' (ID: 305)
  Prédit: 'on'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'on' → logprob: -1.0093512535095215
    2. ' on' → logprob: -1.0093512535095215
    3. 'l' → logprob: -2.3843512535095215
    4. 'se' → logprob: -2.5093512535095215
    5. ' l' → logprob: -3.2593512535095215
    6. ' se' → logprob: -3.6343512535095215
    7. 'le' → logprob: -4.1343512535095215
    8. 's' → logprob: -5.3843512535095215
    9. ' le' → logprob: -5.6343512535095215
    10. '#' → logprob: -6.0093512535095215

Token 587: ''on' (ID: 25812)
  Prédit: ''on'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''on' → logprob: -0.015248076058924198
    2. 'on' → logprob: -4.5152482986450195
    3. ''' → logprob: -6.1402482986450195
    4. 'e' → logprob: -7.5152482986450195
    5. ' on' → logprob: -7.6402482986450195
    6. ''utilisateur' → logprob: -7.8902482986450195
    7. 'a' → logprob: -8.51524829864502
    8. '’on' → logprob: -9.14024829864502
    9. ' joueur' → logprob: -9.26524829864502
    10. 'player' → logprob: -9.51524829864502

Token 588: ' se' (ID: 458)
  Prédit: 'se'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'se' → logprob: -0.20912210643291473
    2. 'est' → logprob: -1.8341220617294312
    3. ' se' → logprob: -3.8341221809387207
    4. ' est' → logprob: -4.959122180938721
    5. 'arr' → logprob: -8.959121704101562
    6. 's' → logprob: -9.459121704101562
    7. 'a' → logprob: -10.334121704101562
    8. ''est' → logprob: -11.584121704101562
    9. 'pe' → logprob: -11.834121704101562
    10. 'semble' → logprob: -12.084121704101562

Token 589: ' trouve' (ID: 30913)
  Prédit: 'tr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tr' → logprob: -0.00020306356600485742
    2. ' trouve' → logprob: -9.250203132629395
    3. '<tr' → logprob: -10.125203132629395
    4. 'sit' → logprob: -11.250203132629395
    5. '```' → logprob: -11.250203132629395
    6. 't' → logprob: -11.375203132629395
    7. 'tro' → logprob: -12.375203132629395
    8. '{
' → logprob: -12.500203132629395
    9. 'trate' → logprob: -13.000203132629395
    10. 'place' → logprob: -13.125203132629395

Token 590: ' au' (ID: 2791)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.24259473383426666
    2. '   ' → logprob: -1.7425947189331055
    3. ' ,' → logprob: -3.3675947189331055
    4. ' (' → logprob: -6.4925947189331055
    5. ')' → logprob: -6.7425947189331055
    6. ',
' → logprob: -6.9925947189331055
    7. ' ' → logprob: -7.6175947189331055
    8. '
' → logprob: -8.242594718933105
    9. '    
' → logprob: -8.367594718933105
    10. '.' → logprob: -8.492594718933105

Token 591: ' début' (ID: 29589)
  Prédit: 'tour'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tour' → logprob: -0.009616424329578876
    2. ' tour' → logprob: -5.259616374969482
    3. 't' → logprob: -6.009616374969482
    4. 'to' → logprob: -7.509616374969482
    5. 'c' → logprob: -7.759616374969482
    6. ' ' → logprob: -8.38461685180664
    7. '   ' → logprob: -8.63461685180664
    8. 'un' → logprob: -9.13461685180664
    9. 'jou' → logprob: -10.13461685180664
    10. 'toc' → logprob: -10.38461685180664

Token 592: ' d' (ID: 272)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0838177353143692
    2. ' ,' → logprob: -3.333817720413208
    3. '   ' → logprob: -3.708817720413208
    4. ' (' → logprob: -4.583817958831787
    5. ',
' → logprob: -5.833817958831787
    6. ' et' → logprob: -6.208817958831787
    7. ' du' → logprob: -6.833817958831787
    8. ' de' → logprob: -6.958817958831787
    9. '.' → logprob: -7.208817958831787
    10. ')' → logprob: -7.333817958831787

Token 593: ''un' (ID: 9788)
  Prédit: ''un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''un' → logprob: -0.06980003416538239
    2. 'un' → logprob: -3.1948001384735107
    3. 'u' → logprob: -4.069799900054932
    4. 'a' → logprob: -6.194799900054932
    5. ' un' → logprob: -6.194799900054932
    6. ''une' → logprob: -6.319799900054932
    7. ''' → logprob: -6.944799900054932
    8. 'd' → logprob: -7.819799900054932
    9. '’un' → logprob: -8.19480037689209
    10. 't' → logprob: -8.19480037689209

Token 594: ' tour' (ID: 6970)
  Prédit: 'tour'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tour' → logprob: -0.015283637680113316
    2. ' tour' → logprob: -4.265283584594727
    3. 'turn' → logprob: -6.890283584594727
    4. 't' → logprob: -10.015283584594727
    5. ' ' → logprob: -11.640283584594727
    6. ' turn' → logprob: -11.890283584594727
    7. 'to' → logprob: -12.140283584594727
    8. '```' → logprob: -12.390283584594727
    9. 'move' → logprob: -12.515283584594727
    10. 'round' → logprob: -12.765283584594727

Token 595: '.
' (ID: 558)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.046761784702539444
    2. ' ,' → logprob: -3.2967617511749268
    3. '   ' → logprob: -5.796761989593506
    4. ',
' → logprob: -6.046761989593506
    5. ' (' → logprob: -6.296761989593506
    6. '.' → logprob: -8.171761512756348
    7. ' ' → logprob: -8.421761512756348
    8. ' et' → logprob: -8.421761512756348
    9. '
' → logprob: -8.921761512756348
    10. ')' → logprob: -9.046761512756348

Token 596: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05175567418336868
    2. '
' → logprob: -3.426755666732788
    3. '    
' → logprob: -4.426755905151367
    4. ',' → logprob: -5.801755905151367
    5. ')' → logprob: -7.676755905151367
    6. '  
' → logprob: -7.801755905151367
    7. ' ' → logprob: -8.051755905151367
    8. ' 
' → logprob: -8.176755905151367
    9. '    ' → logprob: -9.051755905151367
    10. 'state' → logprob: -9.051755905151367

Token 597: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.040183380246162415
    2. '
' → logprob: -4.9151835441589355
    3. '    
' → logprob: -4.9151835441589355
    4. ',' → logprob: -5.9151835441589355
    5. 'dp' → logprob: -6.0401835441589355
    6. 'turn' → logprob: -6.4151835441589355
    7. '#' (adapté à ' #') → logprob: -6.4151835441589355
    8. 'state' → logprob: -6.5401835441589355
    9. ' next' → logprob: -6.6651835441589355
    10. '  
' → logprob: -6.9151835441589355

Token 598: ' On' (ID: 2160)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0581519603729248
    2. ' next' → logprob: -2.058151960372925
    3. 'turn' → logprob: -2.308151960372925
    4. 'dp' → logprob: -2.808151960372925
    5. 'next' → logprob: -3.058151960372925
    6. ' turn' → logprob: -3.183151960372925
    7. '\n' → logprob: -3.183151960372925
    8. ' dp' → logprob: -3.808151960372925
    9. 'possible' → logprob: -3.808151960372925
    10. 'distance' → logprob: -3.933151960372925

Token 599: ' veut' (ID: 41653)
  Prédit: ' veut'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' veut' → logprob: -0.7886325120925903
    2. ' continue' → logprob: -1.9136325120925903
    3. ' souhaite' → logprob: -2.413632392883301
    4. ' veux' → logprob: -2.663632392883301
    5. '#' → logprob: -3.038632392883301
    6. ':' → logprob: -3.788632392883301
    7. ' want' → logprob: -3.788632392883301
    8. 'continue' → logprob: -4.038632392883301
    9. ' wants' → logprob: -4.413632392883301
    10. ' va' → logprob: -4.413632392883301

Token 600: ' minim' (ID: 23874)
  Prédit: ' déterminer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' déterminer' → logprob: -0.6130329370498657
    2. ' savoir' → logprob: -1.8630329370498657
    3. ' trouver' → logprob: -2.238032817840576
    4. ' connaître' → logprob: -2.488032817840576
    5. 'tr' → logprob: -3.113032817840576
    6. 's' → logprob: -4.238032817840576
    7. ' calcul' → logprob: -4.363032817840576
    8. 'con' → logprob: -4.863032817840576
    9. '   ' → logprob: -5.363032817840576
    10. ' connaitre' → logprob: -5.488032817840576

Token 601: 'iser' (ID: 7466)
  Prédit: 'ser'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ser' → logprob: -0.05052388831973076
    2. 'zer' → logprob: -4.17552375793457
    3. 'er' → logprob: -4.42552375793457
    4. 'mer' → logprob: -4.67552375793457
    5. 'm' → logprob: -4.80052375793457
    6. 'iser' → logprob: -5.80052375793457
    7. 'um' → logprob: -7.55052375793457
    8. 'ner' → logprob: -8.80052375793457
    9. 'user' → logprob: -8.92552375793457
    10. '#' → logprob: -9.80052375793457

Token 602: ' le' (ID: 505)
  Prédit: 'le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'le' → logprob: -0.6942537426948547
    2. ' le' → logprob: -0.6942537426948547
    3. ' les' → logprob: -7.319253921508789
    4. 'les' → logprob: -8.194253921508789
    5. 'l' → logprob: -9.569253921508789
    6. '_le' → logprob: -9.694253921508789
    7. ' l' → logprob: -11.069253921508789
    8. 'nombre' → logprob: -12.319253921508789
    9. ' ' → logprob: -12.694253921508789
    10. ' ' → logprob: -12.819253921508789

Token 603: ' nb' (ID: 28791)
  Prédit: ' nombre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.6933522820472717
    2. 'nombre' → logprob: -0.6933522820472717
    3. '_nombre' → logprob: -9.943352699279785
    4. ' nombres' → logprob: -10.068352699279785
    5. ' ' → logprob: -10.693352699279785
    6. ' ' → logprob: -10.693352699279785
    7. 'Nombre' → logprob: -10.943352699279785
    8. ' nb' → logprob: -11.568352699279785
    9. 'nb' → logprob: -11.818352699279785
    10. ' number' → logprob: -12.443352699279785

Token 604: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.01676107570528984
    2. '_de' → logprob: -4.266761302947998
    3. '_' → logprob: -6.266761302947998
    4. 'de' → logprob: -8.39176082611084
    5. '  ' → logprob: -8.64176082611084
    6. ' d' → logprob: -9.76676082611084
    7. ' _' → logprob: -9.89176082611084
    8. ' ' → logprob: -10.14176082611084
    9. '_s' → logprob: -10.39176082611084
    10. '    ' → logprob: -10.89176082611084

Token 605: ' tours' (ID: 32603)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' → logprob: -0.10188262909650803
    2. ' tours' → logprob: -2.3518826961517334
    3. 'turn' → logprob: -7.726882457733154
    4. 'tour' → logprob: -7.851882457733154
    5. ' t' → logprob: -8.226882934570312
    6. '_t' → logprob: -8.601882934570312
    7. ' coups' → logprob: -8.976882934570312
    8. ' ' → logprob: -10.226882934570312
    9. 'moves' → logprob: -10.601882934570312
    10. 'cou' → logprob: -10.601882934570312

Token 606: ' pour' (ID: 1930)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4047244191169739
    2. ' pour' → logprob: -1.529724359512329
    3. ',' → logprob: -3.279724359512329
    4. ' nécessaires' → logprob: -4.279724597930908
    5. 'pour' → logprob: -4.904724597930908
    6. ' for' → logprob: -5.029724597930908
    7. '    
' → logprob: -5.029724597930908
    8. ' ' → logprob: -5.029724597930908
    9. ' nécessaire' → logprob: -5.279724597930908
    10. '.' → logprob: -5.404724597930908

Token 607: ' atteindre' (ID: 95734)
  Prédit: 'atte'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'atte' → logprob: -0.6812068819999695
    2. ' atteindre' → logprob: -0.8062068819999695
    3. ' arriver' → logprob: -3.8062069416046143
    4. ' ' → logprob: -4.931206703186035
    5. 'arr' → logprob: -5.306206703186035
    6. ' atte' → logprob: -5.681206703186035
    7. 're' → logprob: -6.056206703186035
    8. '   ' → logprob: -6.556206703186035
    9. ' parvenir' → logprob: -7.056206703186035
    10. 'at' → logprob: -7.556206703186035

Token 608: ' le' (ID: 505)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.48828572034835815
    2. 'n' → logprob: -1.613285779953003
    3. ' la' → logprob: -2.738285779953003
    4. ' le' → logprob: -2.863285779953003
    5. 'le' → logprob: -3.113285779953003
    6. 'la' → logprob: -4.488285541534424
    7. '1' → logprob: -5.363285541534424
    8. 'l' → logprob: -6.488285541534424
    9. ' ' → logprob: -6.738285541534424
    10. ' l' → logprob: -7.113285541534424

Token 609: ' but' (ID: 889)
  Prédit: ' but'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' but' → logprob: -0.5752291679382324
    2. 'but' → logprob: -0.9502291679382324
    3. ' n' → logprob: -3.4502291679382324
    4. 'n' → logprob: -5.200229167938232
    5. ' sommet' → logprob: -5.825229167938232
    6. 'goal' → logprob: -5.950229167938232
    7. 'objectif' → logprob: -6.075229167938232
    8. 'som' → logprob: -6.200229167938232
    9. 'c' → logprob: -6.700229167938232
    10. '#' → logprob: -7.075229167938232

Token 610: ' n' (ID: 297)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.15709884464740753
    2. 'goal' → logprob: -3.4070987701416016
    3. '
' → logprob: -3.5320987701416016
    4. ' (' → logprob: -4.032098770141602
    5. '(goal' → logprob: -4.032098770141602
    6. ',' → logprob: -4.032098770141602
    7. '(' → logprob: -5.282098770141602
    8. '    
' → logprob: -5.282098770141602
    9. '(n' → logprob: -5.657098770141602
    10. ':' → logprob: -5.782098770141602

Token 611: ' quel' (ID: 10613)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.28701847791671753
    2. '   ' → logprob: -1.5370185375213623
    3. ',' → logprob: -4.037018299102783
    4. '.' → logprob: -4.912018299102783
    5. '    
' → logprob: -5.287018299102783
    6. ',
' → logprob: -6.537018299102783
    7. ')' → logprob: -7.162018299102783
    8. '.
' → logprob: -7.537018299102783
    9. '   
' → logprob: -8.287018775939941
    10. '  
' → logprob: -8.537018775939941

Token 612: ' que' (ID: 661)
  Prédit: 'que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'que' → logprob: -0.020297084003686905
    2. 'ques' → logprob: -4.895297050476074
    3. 'qu' → logprob: -5.145297050476074
    4. ' que' → logprob: -5.895297050476074
    5. 'quel' → logprob: -6.770297050476074
    6. 'le' → logprob: -7.520297050476074
    7. 'point' → logprob: -7.520297050476074
    8. 'import' → logprob: -7.645297050476074
    9. 'qui' → logprob: -8.145297050476074
    10. 'q' → logprob: -8.645297050476074

Token 613: ' soit' (ID: 17293)
  Prédit: ' que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.7711383700370789
    2. 'que' → logprob: -1.1461384296417236
    3. ' soit' → logprob: -2.5211384296417236
    4. 'le' → logprob: -2.6461384296417236
    5. '```' → logprob: -3.1461384296417236
    6. 'con' → logprob: -5.3961381912231445
    7. 'so' → logprob: -5.3961381912231445
    8. '   ' → logprob: -5.5211381912231445
    9. 'l' → logprob: -6.5211381912231445
    10. 'ques' → logprob: -6.8961381912231445

Token 614: ' le' (ID: 505)
  Prédit: 'le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'le' → logprob: -0.49618005752563477
    2. 'les' → logprob: -1.3711800575256348
    3. 'l' → logprob: -2.3711800575256348
    4. ' le' → logprob: -4.121180057525635
    5. 'la' → logprob: -4.371180057525635
    6. ' les' → logprob: -4.871180057525635
    7. ' l' → logprob: -5.871180057525635
    8. 'cho' → logprob: -6.871180057525635
    9. '#' → logprob: -7.371180057525635
    10. '   ' → logprob: -7.371180057525635

Token 615: ' choix' (ID: 28642)
  Prédit: 'cho'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cho' → logprob: -0.07886389642953873
    2. ' choix' → logprob: -2.7038638591766357
    3. 'c' → logprob: -6.078864097595215
    4. 'choice' → logprob: -6.953864097595215
    5. 'jou' → logprob: -7.453864097595215
    6. 'dé' → logprob: -7.453864097595215
    7. ' advers' → logprob: -7.828864097595215
    8. 'd' → logprob: -7.953864097595215
    9. 'jeu' → logprob: -8.078864097595215
    10. ' joueur' → logprob: -8.203864097595215

Token 616: ' adverse' (ID: 45641)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11678928136825562
    2. 'de' → logprob: -2.9917893409729004
    3. 'du' → logprob: -3.2417893409729004
    4. ' du' → logprob: -4.6167893409729
    5. ' de' → logprob: -5.2417893409729
    6. '#' → logprob: -6.2417893409729
    7. 'd' → logprob: -6.8667893409729
    8. 'des' → logprob: -6.8667893409729
    9. 'final' → logprob: -7.6167893409729
    10. 'possible' → logprob: -7.7417893409729

Token 617: '.

' (ID: 364)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08113686740398407
    2. '
' → logprob: -2.95613694190979
    3. '    
' → logprob: -4.206136703491211
    4. ',' → logprob: -5.331136703491211
    5. '#' → logprob: -6.706136703491211
    6. ',
' → logprob: -6.956136703491211
    7. ')' → logprob: -7.331136703491211
    8. '.' → logprob: -7.581136703491211
    9. 'n' → logprob: -7.831136703491211
    10. 'distance' → logprob: -7.831136703491211

Token 618: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18187403678894043
    2. '
' → logprob: -2.4318740367889404
    3. 'distance' → logprob: -3.6818740367889404
    4. 'dist' → logprob: -3.9318740367889404
    5. '    
' → logprob: -4.6818742752075195
    6. 'states' → logprob: -4.8068742752075195
    7. 'dp' → logprob: -5.3068742752075195
    8. 'state' → logprob: -5.5568742752075195
    9. 'visited' → logprob: -6.3068742752075195
    10. 'def' → logprob: -7.0568742752075195

Token 619: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6513448357582092
    2. 'dist' → logprob: -1.2763447761535645
    3. 'distance' → logprob: -2.1513447761535645
    4. 'dp' → logprob: -2.6513447761535645
    5. 'from' → logprob: -5.2763447761535645
    6. 'def' → logprob: -5.6513447761535645
    7. '#' (adapté à ' #') → logprob: -6.7763447761535645
    8. ' dist' → logprob: -7.0263447761535645
    9. '    
' → logprob: -7.4013447761535645
    10. ' distance' → logprob: -8.026345252990723

Token 620: ' On' (ID: 2160)
  Prédit: 'from'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'from' → logprob: -0.7933355569839478
    2. 'dist' → logprob: -0.9183355569839478
    3. 'dp' → logprob: -2.293335437774658
    4. 'distance' → logprob: -3.793335437774658
    5. '#' → logprob: -4.668335437774658
    6. '   ' → logprob: -4.918335437774658
    7. 'INF' → logprob: -6.168335437774658
    8. 'target' → logprob: -6.543335437774658
    9. ' dist' → logprob: -6.668335437774658
    10. 'queue' → logprob: -7.168335437774658

Token 621: ' défin' (ID: 57890)
  Prédit: 'dist'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dist' → logprob: -1.0175262689590454
    2. '#' → logprob: -1.8925262689590454
    3. 'distance' → logprob: -2.017526149749756
    4. 'def' → logprob: -2.642526149749756
    5. 'from' → logprob: -2.767526149749756
    6. 'queue' → logprob: -3.392526149749756
    7. 'goal' → logprob: -3.392526149749756
    8. ' =' → logprob: -4.017526149749756
    9. ' dist' → logprob: -4.267526149749756
    10. 'visited' → logprob: -4.392526149749756

Token 622: 'ira' (ID: 2633)
  Prédit: 'it'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'it' → logprob: -0.4308302700519562
    2. 'is' → logprob: -1.5558302402496338
    3. 'def' → logprob: -2.055830240249634
    4. 'ir' → logprob: -6.430830478668213
    5. '   ' → logprob: -6.555830478668213
    6. '#' → logprob: -6.680830478668213
    7. 't' → logprob: -6.680830478668213
    8. 'issait' → logprob: -6.930830478668213
    9. 'issez' → logprob: -7.305830478668213
    10. 'e' → logprob: -7.305830478668213

Token 623: ' dp' (ID: 21546)
  Prédit: 'dist'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dist' → logprob: -1.347957730293274
    2. 'dp' → logprob: -1.972957730293274
    3. 'def' → logprob: -2.0979576110839844
    4. ' la' → logprob: -2.3479576110839844
    5. 'distance' → logprob: -2.5979576110839844
    6. ' dist' → logprob: -2.9729576110839844
    7. 'INF' → logprob: -2.9729576110839844
    8. ' une' → logprob: -3.3479576110839844
    9. 'une' → logprob: -3.5979576110839844
    10. ' INF' → logprob: -3.9729576110839844

Token 624: '[node' (ID: 67268)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0010757996933534741
    2. '=' → logprob: -6.876075744628906
    3. '=[' → logprob: -11.626075744628906
    4. ']' → logprob: -11.876075744628906
    5. '[' → logprob: -11.876075744628906
    6. ' ' → logprob: -12.126075744628906
    7. '[n' → logprob: -12.251075744628906
    8. ' =[' → logprob: -13.376075744628906
    9. ',' → logprob: -13.501075744628906
    10. ')' → logprob: -13.626075744628906

Token 625: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0021287298295646906
    2. '][' → logprob: -6.502128601074219
    3. ']=' → logprob: -7.877128601074219
    4. ' ]' → logprob: -8.752128601074219
    5. ']:' → logprob: -9.877128601074219
    6. ',' → logprob: -11.502128601074219
    7. ']={' → logprob: -11.627128601074219
    8. ']
' → logprob: -12.627128601074219
    9. '][]' → logprob: -12.877128601074219
    10. ']:
' → logprob: -12.877128601074219

Token 626: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.05497334897518158
    2. '=' → logprob: -2.9299733638763428
    3. ']' → logprob: -10.054973602294922
    4. ',' → logprob: -10.679973602294922
    5. ' ' → logprob: -11.304973602294922
    6. '[' → logprob: -13.179973602294922
    7. 's' → logprob: -13.179973602294922
    8. ')' → logprob: -13.429973602294922
    9. '   ' → logprob: -13.429973602294922
    10. ' =
' → logprob: -13.679973602294922

Token 627: ' nombre' (ID: 9733)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.639212429523468
    2. 'float' → logprob: -1.0142123699188232
    3. '-' → logprob: -2.2642123699188232
    4. 'None' → logprob: -6.139212608337402
    5. ' float' → logprob: -6.889212608337402
    6. '[' → logprob: -7.139212608337402
    7. ' ' → logprob: -7.889212608337402
    8. ' -' → logprob: -8.389212608337402
    9. 'inf' → logprob: -8.389212608337402
    10. '(' → logprob: -8.514212608337402

Token 628: ' minimum' (ID: 11085)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.7659567594528198
    2. '_de' → logprob: -1.3909567594528198
    3. '_des' → logprob: -2.5159568786621094
    4. '_' → logprob: -2.7659568786621094
    5. ' des' → logprob: -3.3909568786621094
    6. '   ' → logprob: -3.3909568786621094
    7. 'de' → logprob: -3.7659568786621094
    8. '_min' → logprob: -4.515956878662109
    9. ' =' → logprob: -4.890956878662109
    10. '  ' → logprob: -5.140956878662109

Token 629: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.7269106507301331
    2. '_de' → logprob: -0.7269106507301331
    3. 'de' → logprob: -3.6019105911254883
    4. '_' → logprob: -6.476910591125488
    5. '_des' → logprob: -6.476910591125488
    6. '   ' → logprob: -7.226910591125488
    7. '_t' → logprob: -7.476910591125488
    8. '  ' → logprob: -7.976910591125488
    9. '_turn' → logprob: -8.101910591125488
    10. '    ' → logprob: -8.726910591125488

Token 630: ' tours' (ID: 32603)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' → logprob: -0.007054103072732687
    2. ' tours' → logprob: -5.257054328918457
    3. 'turn' → logprob: -7.757054328918457
    4. 'tour' → logprob: -7.882054328918457
    5. '_t' → logprob: -8.632054328918457
    6. ' t' → logprob: -8.757054328918457
    7. 'pas' → logprob: -9.257054328918457
    8. 'moves' → logprob: -9.257054328918457
    9. 'steps' → logprob: -9.382054328918457
    10. 'cou' → logprob: -9.882054328918457

Token 631: ' nécessaires' (ID: 74402)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.16585148870944977
    2. '=' → logprob: -2.665851593017578
    3. '   ' → logprob: -3.790851593017578
    4. ' pour' → logprob: -4.165851593017578
    5. 'pour' → logprob: -5.040851593017578
    6. ' ' → logprob: -5.165851593017578
    7. ',' → logprob: -5.290851593017578
    8. ']' → logprob: -5.540851593017578
    9. 's' → logprob: -6.165851593017578
    10. ' nécessaire' → logprob: -6.290851593017578

Token 632: ' pour' (ID: 1930)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08956342190504074
    2. ' =' → logprob: -2.5895633697509766
    3. ' pour' → logprob: -5.464563369750977
    4. '       ' → logprob: -6.214563369750977
    5. ',' → logprob: -6.589563369750977
    6. ' ' → logprob: -7.589563369750977
    7. '=' → logprob: -7.589563369750977
    8. ']' → logprob: -7.964563369750977
    9. ')' → logprob: -7.964563369750977
    10. ' à' → logprob: -8.214563369750977

Token 633: ' atteindre' (ID: 95734)
  Prédit: 'atte'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'atte' → logprob: -0.0033650966361165047
    2. ' atteindre' → logprob: -6.0033650398254395
    3. 're' → logprob: -8.628365516662598
    4. 'n' → logprob: -8.628365516662598
    5. 'at' → logprob: -8.628365516662598
    6. 'arr' → logprob: -9.128365516662598
    7. 'reach' → logprob: -10.128365516662598
    8. 'atta' → logprob: -10.628365516662598
    9. '#' → logprob: -10.628365516662598
    10. ' atte' → logprob: -10.628365516662598

Token 634: ' n' (ID: 297)
  Prédit: 'le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'le' → logprob: -0.7492470741271973
    2. 'node' → logprob: -1.6242470741271973
    3. ' le' → logprob: -1.7492470741271973
    4. ' node' → logprob: -1.9992470741271973
    5. 'n' → logprob: -4.499247074127197
    6. 'la' → logprob: -5.749247074127197
    7. 'l' → logprob: -6.374247074127197
    8. ' n' → logprob: -6.499247074127197
    9. '(node' → logprob: -6.624247074127197
    10. ' la' → logprob: -6.749247074127197

Token 635: ' depuis' (ID: 16277)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.43547967076301575
    2. ' from' → logprob: -2.3104796409606934
    3. 'dp' → logprob: -2.6854796409606934
    4. 'from' → logprob: -3.0604796409606934
    5. ' (' → logprob: -3.4354796409606934
    6. ',' → logprob: -3.8104796409606934
    7. '
' → logprob: -3.9354796409606934
    8. '}' → logprob: -4.185479640960693
    9. ' dp' → logprob: -4.560479640960693
    10. ' depuis' → logprob: -5.310479640960693

Token 636: ' node' (ID: 4596)
  Prédit: 'node'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'node' → logprob: -0.4761368930339813
    2. ' node' → logprob: -0.9761369228363037
    3. '[node' → logprob: -6.601136684417725
    4. ' ce' → logprob: -8.101137161254883
    5. '(node' → logprob: -8.851137161254883
    6. 'le' → logprob: -9.226137161254883
    7. 'l' → logprob: -10.351137161254883
    8. ' le' → logprob: -10.726137161254883
    9. '=node' → logprob: -10.726137161254883
    10. 'la' → logprob: -11.601137161254883

Token 637: ',
' (ID: 412)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14660204946994781
    2. '
' → logprob: -2.771602153778076
    3. 'dp' → logprob: -2.771602153778076
    4. ' =' → logprob: -5.771602153778076
    5. ' dp' → logprob: -6.271602153778076
    6. ' ' → logprob: -6.646602153778076
    7. ',' → logprob: -6.771602153778076
    8. '    
' → logprob: -7.646602153778076
    9. ']' → logprob: -8.021601676940918
    10. '_dp' → logprob: -8.021601676940918

Token 638: '   ' (ID: 271)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dp' → logprob: -0.8454720377922058
    2. '   ' → logprob: -1.4704720973968506
    3. ' dp' → logprob: -1.9704720973968506
    4. 'INF' → logprob: -3.2204720973968506
    5. ' =' → logprob: -3.4704720973968506
    6. ' None' → logprob: -4.3454718589782715
    7. '#' → logprob: -4.3454718589782715
    8. 'inf' → logprob: -4.3454718589782715
    9. ' INF' → logprob: -4.3454718589782715
    10. ')' → logprob: -4.3454718589782715

Token 639: ' #' (ID: 1069)
  Prédit: ' default'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' default' → logprob: -1.0443480014801025
    2. 'dp' → logprob: -1.4193480014801025
    3. 'default' → logprob: -2.0443480014801025
    4. ' dp' → logprob: -2.1693480014801025
    5. '   ' → logprob: -2.6693480014801025
    6. 'inf' → logprob: -3.7943480014801025
    7. ' =' → logprob: -4.169347763061523
    8. 'INF' → logprob: -4.294347763061523
    9. ' inf' → logprob: -4.794347763061523
    10. '#' (adapté à ' #') → logprob: -5.419347763061523

Token 640: ' si' (ID: 1784)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dp' → logprob: -0.08698436617851257
    2. '#' → logprob: -3.336984395980835
    3. 'INF' → logprob: -3.961984395980835
    4. 'inf' → logprob: -4.086984157562256
    5. ' dp' → logprob: -4.836984157562256
    6. '   ' → logprob: -7.086984157562256
    7. ' #' → logprob: -7.586984157562256
    8. ' inf' → logprob: -7.961984157562256
    9. 'visited' → logprob: -7.961984157562256
    10. ' INF' → logprob: -8.086984634399414

Token 641: ' on' (ID: 402)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dp' → logprob: -0.6720603108406067
    2. 'node' → logprob: -1.422060251235962
    3. ' node' → logprob: -1.547060251235962
    4. ' dp' → logprob: -3.797060251235962
    5. ' on' → logprob: -4.672060489654541
    6. 'on' → logprob: -6.547060489654541
    7. '(node' → logprob: -8.422060012817383
    8. '   ' → logprob: -8.672060012817383
    9. ' ' → logprob: -8.672060012817383
    10. ' ' → logprob: -8.797060012817383

Token 642: ' peut' (ID: 9216)
  Prédit: 'est'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'est' → logprob: -1.1053853034973145
    2. 'continue' → logprob: -1.7303853034973145
    3. 've' → logprob: -2.6053853034973145
    4. ' veut' → logprob: -3.1053853034973145
    5. ' continue' → logprob: -3.1053853034973145
    6. 'n' → logprob: -3.2303853034973145
    7. 'a' → logprob: -3.3553853034973145
    8. ' est' → logprob: -3.6053853034973145
    9. 'le' → logprob: -3.7303853034973145
    10. ' considère' → logprob: -3.7303853034973145

Token 643: ' for' (ID: 395)
  Prédit: ' atteindre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' atteindre' → logprob: -0.38253745436668396
    2. 'atte' → logprob: -1.6325374841690063
    3. 'le' → logprob: -3.007537364959717
    4. ' le' → logprob: -3.632537364959717
    5. 're' → logprob: -4.632537364959717
    6. 'contin' → logprob: -4.757537364959717
    7. 'aller' → logprob: -5.007537364959717
    8. 'reach' → logprob: -5.507537364959717
    9. ' continuer' → logprob: -5.757537364959717
    10. 'faire' → logprob: -6.257537364959717

Token 644: 'cer' (ID: 3308)
  Prédit: 'cer'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cer' → logprob: -0.02277330867946148
    2. 'ce' → logprob: -5.022773265838623
    3. 'cé' → logprob: -5.397773265838623
    4. 'm' → logprob: -5.772773265838623
    5. 't' → logprob: -5.897773265838623
    6. 'ç' → logprob: -6.647773265838623
    7. 'mer' → logprob: -7.147773265838623
    8. 'ça' → logprob: -7.397773265838623
    9. 'cement' → logprob: -7.772773265838623
    10. 'mat' → logprob: -8.147773742675781

Token 645: ' la' (ID: 557)
  Prédit: ' la'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.3188646137714386
    2. 'la' → logprob: -2.318864583969116
    3. ' une' → logprob: -3.318864583969116
    4. 'le' → logprob: -3.318864583969116
    5. ' le' → logprob: -3.443864583969116
    6. ' l' → logprob: -4.193864822387695
    7. 'l' → logprob: -4.568864822387695
    8. ' que' → logprob: -4.818864822387695
    9. ' node' → logprob: -5.443864822387695
    10. 'une' → logprob: -5.568864822387695

Token 646: ' victoire' (ID: 96596)
  Prédit: ' victoire'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' victoire' → logprob: -0.3166600167751312
    2. 'vic' → logprob: -1.4416600465774536
    3. 'destination' → logprob: -5.316659927368164
    4. 'position' → logprob: -5.566659927368164
    5. ' vic' → logprob: -5.816659927368164
    6. 'vict' → logprob: -5.941659927368164
    7. ' destination' → logprob: -6.191659927368164
    8. 'che' → logprob: -6.316659927368164
    9. 'fin' → logprob: -6.441659927368164
    10. 'suite' → logprob: -6.941659927368164

Token 647: '.' (ID: 13)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.24798397719860077
    2. 'dp' → logprob: -2.247983932495117
    3. ' =' → logprob: -2.997983932495117
    4. ' dp' → logprob: -3.497983932495117
    5. '
' → logprob: -3.622983932495117
    6. ',' → logprob: -6.122983932495117
    7. '    
' → logprob: -6.372983932495117
    8. ' ' → logprob: -7.372983932495117
    9. '.' → logprob: -7.747983932495117
    10. '.
' → logprob: -8.122983932495117

Token 648: ' Sinon' (ID: 154924)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dp' → logprob: -0.1865406483411789
    2. '   ' → logprob: -2.3115406036376953
    3. ' dp' → logprob: -2.6865406036376953
    4. '
' → logprob: -6.186540603637695
    5. 'import' → logprob: -8.436540603637695
    6. '	dp' → logprob: -8.436540603637695
    7. '    
' → logprob: -8.561540603637695
    8. ' ' → logprob: -9.561540603637695
    9. 'def' → logprob: -9.561540603637695
    10. '_dp' → logprob: -10.186540603637695

Token 649: ',' (ID: 11)
  Prédit: ' None'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' None' → logprob: -0.540741503238678
    2. 'None' → logprob: -1.5407414436340332
    3. 'dp' → logprob: -2.540741443634033
    4. '   ' → logprob: -3.040741443634033
    5. ' dp' → logprob: -3.540741443634033
    6. ' =' → logprob: -3.915741443634033
    7. ' -' → logprob: -4.665741443634033
    8. '=' → logprob: -5.040741443634033
    9. '-' → logprob: -5.165741443634033
    10. '=None' → logprob: -6.040741443634033

Token 650: ' dp' (ID: 21546)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dp' → logprob: -0.12956418097019196
    2. ' dp' → logprob: -2.1295642852783203
    3. '   ' → logprob: -6.75456428527832
    4. '-' → logprob: -7.50456428527832
    5. 'None' → logprob: -7.87956428527832
    6. ' None' → logprob: -8.37956428527832
    7. 'float' → logprob: -8.62956428527832
    8. ' -' → logprob: -9.37956428527832
    9. ' float' → logprob: -10.50456428527832
    10. 'import' → logprob: -11.87956428527832

Token 651: '[node' (ID: 67268)
  Prédit: '[node'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[node' → logprob: -0.048715222626924515
    2. ' =' → logprob: -3.048715114593506
    3. '=' → logprob: -9.298715591430664
    4. '=node' → logprob: -10.923715591430664
    5. '=[' → logprob: -11.298715591430664
    6. '```' → logprob: -13.048715591430664
    7. '=None' → logprob: -14.423715591430664
    8. '[]' → logprob: -14.548715591430664
    9. '   ' → logprob: -14.673715591430664
    10. 'node' → logprob: -15.173715591430664

Token 652: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.00023691373644396663
    2. ']=' → logprob: -8.750236511230469
    3. '=' → logprob: -9.625236511230469
    4. ' ]' → logprob: -11.625236511230469
    5. ' =' → logprob: -12.875236511230469
    6. '   ' → logprob: -15.250236511230469
    7. ']
' → logprob: -15.750236511230469
    8. ']=-' → logprob: -16.25023651123047
    9. ']={' → logprob: -16.50023651123047
    10. '']' → logprob: -16.75023651123047

Token 653: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.029778847470879555
    2. ' =' → logprob: -3.5297789573669434
    3. '=None' → logprob: -10.529778480529785
    4. '=-' → logprob: -14.654778480529785
    5. '=[' → logprob: -14.654778480529785
    6. '=float' → logprob: -15.529778480529785
    7. '=int' → logprob: -15.779778480529785
    8. '[' → logprob: -16.2797794342041
    9. '=np' → logprob: -16.6547794342041
    10. '```' → logprob: -16.9047794342041

Token 654: ' inf' (ID: 5603)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '-' → logprob: -0.043610263615846634
    2. 'float' → logprob: -3.2936103343963623
    3. 'None' → logprob: -5.293610095977783
    4. ' -' → logprob: -7.793610095977783
    5. ' float' → logprob: -9.543610572814941
    6. ' None' → logprob: -10.543610572814941
    7. '-f' → logprob: -11.293610572814941
    8. '-inf' → logprob: -12.668610572814941
    9. '-in' → logprob: -13.543610572814941
    10. '   ' → logprob: -13.668610572814941

Token 655: ' ou' (ID: 2031)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10099069029092789
    2. '
' → logprob: -2.6009907722473145
    3. 'dp' → logprob: -4.4759907722473145
    4. '    
' → logprob: -5.3509907722473145
    5. ' dp' → logprob: -6.3509907722473145
    6. 'import' → logprob: -7.4759907722473145
    7. ' =' → logprob: -7.6009907722473145
    8. '	dp' → logprob: -7.7259907722473145
    9. 'INF' → logprob: -8.100990295410156
    10. ')' → logprob: -8.225990295410156

Token 656: ' marque' (ID: 38644)
  Prédit: 'None'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'None' → logprob: -0.16267672181129456
    2. '-' → logprob: -1.9126766920089722
    3. ' None' → logprob: -6.162676811218262
    4. 'float' → logprob: -8.162676811218262
    5. ' -' → logprob: -10.037676811218262
    6. 'n' → logprob: -11.537676811218262
    7. '   ' → logprob: -13.162676811218262
    8. '-n' → logprob: -14.162676811218262
    9. '-none' → logprob: -15.037676811218262
    10. '0' → logprob: -15.287676811218262

Token 657: 'ur' (ID: 330)
  Prédit: 'ur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ur' → logprob: -0.0809374526143074
    2. 'ed' → logprob: -2.955937385559082
    3. 'eur' → logprob: -4.705937385559082
    4. 'er' → logprob: -4.830937385559082
    5. 'd' → logprob: -5.580937385559082
    6. 'é' → logprob: -6.580937385559082
    7. '=' → logprob: -7.205937385559082
    8. 'ure' → logprob: -7.705937385559082
    9. 'None' → logprob: -8.080937385559082
    10. ' =' → logprob: -8.080937385559082

Token 658: ' impossible' (ID: 19786)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5662521719932556
    2. 'INF' → logprob: -1.8162522315979004
    3. 'inf' → logprob: -2.4412522315979004
    4. 'import' → logprob: -2.5662522315979004
    5. '   ' → logprob: -3.0662522315979004
    6. '_inf' → logprob: -3.8162522315979004
    7. 'dp' → logprob: -4.5662522315979
    8. '=' → logprob: -4.6912522315979
    9. 's' → logprob: -5.8162522315979
    10. ',' → logprob: -6.3162522315979

Token 659: '

' (ID: 279)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.48741406202316284
    2. '
' → logprob: -1.6124141216278076
    3. 'dp' → logprob: -1.8624141216278076
    4. ' dp' → logprob: -4.6124138832092285
    5. '    
' → logprob: -5.1124138832092285
    6. 'import' → logprob: -5.8624138832092285
    7. ',' → logprob: -6.2374138832092285
    8. ')' → logprob: -6.6124138832092285
    9. ' =' → logprob: -6.7374138832092285
    10. 'inf' → logprob: -6.7374138832092285

Token 660: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14530536532402039
    2. 'dp' → logprob: -2.0203053951263428
    3. ' dp' → logprob: -6.645305156707764
    4. '    
' → logprob: -7.520305156707764
    5. '
' → logprob: -7.770305156707764
    6. '	dp' → logprob: -9.020305633544922
    7. 'import' → logprob: -9.270305633544922
    8. '```' → logprob: -9.395305633544922
    9. 'def' → logprob: -11.645305633544922
    10. '(dp' → logprob: -11.770305633544922

Token 661: ' INF' (ID: 69196)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dp' → logprob: -0.6128669381141663
    2. '   ' → logprob: -0.8628669381141663
    3. ' dp' → logprob: -3.9878668785095215
    4. 'import' → logprob: -4.6128668785095215
    5. 'INF' (adapté à ' INF') → logprob: -5.7378668785095215
    6. '
' → logprob: -6.2378668785095215
    7. 'inf' → logprob: -6.4878668785095215
    8. 'from' → logprob: -8.36286735534668
    9. '    
' → logprob: -8.48786735534668
    10. '```' → logprob: -8.86286735534668

Token 662: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.12692904472351074
    2. '=' → logprob: -2.1269290447235107
    3. '=int' → logprob: -14.50192928314209
    4. '_' → logprob: -15.50192928314209
    5. ',' → logprob: -16.126928329467773
    6. ')' → logprob: -16.251928329467773
    7. '=float' → logprob: -17.001928329467773
    8. '＝' → logprob: -17.126928329467773
    9. '_=' → logprob: -17.126928329467773
    10. '   ' → logprob: -17.251928329467773

Token 663: ' ' (ID: 220)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.06208520755171776
    2. 'float' → logprob: -2.8120851516723633
    3. 'int' → logprob: -9.062085151672363
    4. ' float' → logprob: -13.562085151672363
    5. '1' → logprob: -15.562085151672363
    6. ' ' → logprob: -16.31208610534668
    7. '100' → logprob: -16.56208610534668
    8. '-' → logprob: -18.93708610534668
    9. '(float' → logprob: -19.31208610534668
    10. '999' → logprob: -19.43708610534668

Token 664: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.06221449002623558
    2. 'float' → logprob: -2.8122143745422363
    3. 'int' → logprob: -8.312214851379395
    4. ' float' → logprob: -13.687214851379395
    5. '1' → logprob: -16.437213897705078
    6. '100' → logprob: -16.687213897705078
    7. ' ' → logprob: -17.562213897705078
    8. '999' → logprob: -18.937213897705078
    9. '(float' → logprob: -19.312213897705078
    10. '-' → logprob: -19.812213897705078

Token 665: '**' (ID: 410)
  Prédit: '9'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '9' → logprob: -0.0006095095886848867
    2. '18' → logprob: -8.125609397888184
    3. '10' → logprob: -8.250609397888184
    4. '15' → logprob: -10.625609397888184
    5. '12' → logprob: -11.000609397888184
    6. '6' → logprob: -12.000609397888184
    7. '8' → logprob: -13.250609397888184
    8. '09' → logprob: -13.375609397888184
    9. '7' → logprob: -13.500609397888184
    10. '20' → logprob: -15.250609397888184

Token 666: '9' (ID: 24)
  Prédit: '9'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '9' → logprob: -0.004879350308328867
    2. '15' → logprob: -5.504879474639893
    3. '18' → logprob: -7.254879474639893
    4. '12' → logprob: -9.629878997802734
    5. '10' → logprob: -10.879878997802734
    6. '14' → logprob: -12.629878997802734
    7. '7' → logprob: -12.629878997802734
    8. '13' → logprob: -13.504878997802734
    9. '16' → logprob: -13.879878997802734
    10. '8' → logprob: -15.504878997802734

Token 667: '
' (ID: 198)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dp' → logprob: -0.35324376821517944
    2. '
' → logprob: -1.3532438278198242
    3. '   ' → logprob: -3.353243827819824
    4. '    
' → logprob: -5.978243827819824
    5. ' dp' → logprob: -6.853243827819824
    6. '	dp' → logprob: -7.853243827819824
    7. '_dp' → logprob: -9.603243827819824
    8. '
' → logprob: -9.728243827819824
    9. '```' → logprob: -10.228243827819824
    10. '  
' → logprob: -10.978243827819824

Token 668: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2943554222583771
    2. 'dp' → logprob: -1.4193553924560547
    3. ' dp' → logprob: -5.294355392456055
    4. '
' → logprob: -5.544355392456055
    5. '    
' → logprob: -6.169355392456055
    6. '	dp' → logprob: -6.294355392456055
    7. '(dp' → logprob: -9.669355392456055
    8. '_dp' → logprob: -10.169355392456055
    9. 'DP' → logprob: -10.544355392456055
    10. '```' → logprob: -10.669355392456055

Token 669: ' dp' (ID: 21546)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dp' (adapté à ' dp') → logprob: -0.007390452548861504
    2. '   ' → logprob: -5.00739049911499
    3. ' dp' → logprob: -7.38239049911499
    4. '
' → logprob: -10.632390022277832
    5. '    
' → logprob: -11.882390022277832
    6. '	dp' → logprob: -11.882390022277832
    7. 'from' → logprob: -12.007390022277832
    8. 'import' → logprob: -12.757390022277832
    9. '```' → logprob: -13.382390022277832
    10. '_dp' → logprob: -13.882390022277832

Token 670: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.1002175584435463
    2. '=' → logprob: -2.350217580795288
    3. '=[' → logprob: -12.475217819213867
    4. '[' → logprob: -12.600217819213867
    5. ' =[' → logprob: -12.975217819213867
    6. ')' → logprob: -14.850217819213867
    7. ',' → logprob: -15.475217819213867
    8. ']' → logprob: -15.600217819213867
    9. '```' → logprob: -15.850217819213867
    10. ' ' → logprob: -16.350217819213867

Token 671: ' [' (ID: 723)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.6047699318733066e-05
    2. ' [' → logprob: -12.000016212463379
    3. '[int' → logprob: -12.625016212463379
    4. '{' → logprob: -13.125016212463379
    5. '[I' → logprob: -13.125016212463379
    6. '[n' → logprob: -13.625016212463379
    7. '[in' → logprob: -14.125016212463379
    8. '[Int' → logprob: -15.375016212463379
    9. '[Index' → logprob: -16.875015258789062
    10. '[ind' → logprob: -17.000015258789062

Token 672: 'INF' (ID: 64358)
  Prédit: 'INF'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'INF' → logprob: -1.2664456789934775e-06
    2. '0' → logprob: -14.000000953674316
    3. ' INF' → logprob: -15.875000953674316
    4. 'inf' → logprob: -16.375001907348633
    5. '-INF' → logprob: -16.875001907348633
    6. '-' → logprob: -17.125001907348633
    7. '_INF' → logprob: -17.875001907348633
    8. '   ' → logprob: -20.000001907348633
    9. 'Inf' → logprob: -20.125001907348633
    10. 'None' → logprob: -20.125001907348633

Token 673: ']*(' (ID: 92627)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.023410269990563393
    2. ' for' → logprob: -4.398410320281982
    3. 'for' → logprob: -4.898410320281982
    4. ']*(' → logprob: -5.898410320281982
    5. ']*' → logprob: -7.773410320281982
    6. ' ]' → logprob: -9.023409843444824
    7. '   ' → logprob: -9.898409843444824
    8. ']+' → logprob: -10.148409843444824
    9. '+' → logprob: -12.273409843444824
    10. '	for' → logprob: -13.898409843444824

Token 674: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.0001278534036828205
    2. '(n' → logprob: -9.000127792358398
    3. ' n' → logprob: -12.375127792358398
    4. '   ' → logprob: -16.8751277923584
    5. ' (' → logprob: -17.3751277923584
    6. '	n' → logprob: -17.3751277923584
    7. ')n' → logprob: -17.7501277923584
    8. 'len' → logprob: -17.7501277923584
    9. '
' → logprob: -18.3751277923584
    10. ',n' → logprob: -18.5001277923584

Token 675: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -5.204720582696609e-05
    2. ' +' → logprob: -9.875052452087402
    3. '+
' → logprob: -14.750052452087402
    4. '1' → logprob: -17.000051498413086
    5. '
' → logprob: -17.250051498413086
    6. ')+' → logprob: -17.875051498413086
    7. '+n' → logprob: -18.500051498413086
    8. '＋' → logprob: -19.625051498413086
    9. '   ' → logprob: -19.625051498413086
    10. ')' → logprob: -19.875051498413086

Token 676: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -8.180258191714529e-06
    2. '+' → logprob: -12.250008583068848
    3. ' ' → logprob: -13.000008583068848
    4. '2' → logprob: -14.250008583068848
    5. '   ' → logprob: -15.500008583068848
    6. '```' → logprob: -15.875008583068848
    7. ')' → logprob: -16.75000762939453
    8. '
' → logprob: -17.12500762939453
    9. '１' → logprob: -18.12500762939453
    10. '۱' → logprob: -18.43750762939453

Token 677: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00012535012501757592
    2. ')
' → logprob: -9.00012493133545
    3. ' )' → logprob: -13.25012493133545
    4. ')
' → logprob: -16.875125885009766
    5. ')

' → logprob: -17.375125885009766
    6. '   ' → logprob: -17.875125885009766
    7. '),' → logprob: -18.500125885009766
    8. ']' → logprob: -18.750125885009766
    9. '))' → logprob: -19.375125885009766
    10. '
' → logprob: -19.500125885009766

Token 678: '   ' (ID: 271)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dp' → logprob: -0.0003136552404612303
    2. '   ' → logprob: -8.125313758850098
    3. ' dp' → logprob: -11.375313758850098
    4. '	dp' → logprob: -13.000313758850098
    5. '
' → logprob: -13.375313758850098
    6. '```' → logprob: -13.875313758850098
    7. '_dp' → logprob: -14.625313758850098
    8. ')' → logprob: -14.875313758850098
    9. '    
' → logprob: -16.00031280517578
    10. 'def' → logprob: -16.25031280517578

Token 679: ' dp' (ID: 21546)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dp' (adapté à ' dp') → logprob: -2.8325677703833207e-05
    2. 'from' → logprob: -10.500028610229492
    3. ' dp' → logprob: -14.375028610229492
    4. 'queue' → logprob: -16.000028610229492
    5. '   ' → logprob: -17.000028610229492
    6. 'import' → logprob: -17.125028610229492
    7. 'dq' → logprob: -17.625028610229492
    8. 'deque' → logprob: -17.875028610229492
    9. '	dp' → logprob: -18.500028610229492
    10. ' from' → logprob: -19.875028610229492

Token 680: '[n' (ID: 15433)
  Prédit: '[n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[n' → logprob: -3.416665640543215e-05
    2. '[' → logprob: -10.62503433227539
    3. 'n' → logprob: -12.50003433227539
    4. '[-' → logprob: -12.75003433227539
    5. ']' → logprob: -14.00003433227539
    6. '[end' → logprob: -14.62503433227539
    7. '[node' → logprob: -14.75003433227539
    8. '```' → logprob: -15.00003433227539
    9. '[
' → logprob: -16.00003433227539
    10. '[:]' → logprob: -16.00003433227539

Token 681: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -4.7755875129951164e-05
    2. ']=' → logprob: -10.00004768371582
    3. ' ]' → logprob: -13.62504768371582
    4. ')' → logprob: -14.25004768371582
    5. '=' → logprob: -15.12504768371582
    6. ')]' → logprob: -17.25004768371582
    7. '   ' → logprob: -17.50004768371582
    8. ']
' → logprob: -17.50004768371582
    9. ']==' → logprob: -17.75004768371582
    10. ' =' → logprob: -18.25004768371582

Token 682: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.12692810595035553
    2. ' =' → logprob: -2.1269280910491943
    3. '＝' → logprob: -17.126928329467773
    4. '=True' → logprob: -18.376928329467773
    5. '.=' → logprob: -18.501928329467773
    6. '=}' → logprob: -18.626928329467773
    7. '=
' → logprob: -18.876928329467773
    8. ',' → logprob: -19.001928329467773
    9. ')=' → logprob: -19.376928329467773
    10. ']=' → logprob: -19.376928329467773

Token 683: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: 0.0
    2. ' ' → logprob: -17.0
    3. '   ' → logprob: -21.625
    4. '۰' → logprob: -22.375
    5. '```' → logprob: -24.125
    6. '00' → logprob: -24.375
    7. '000' → logprob: -24.375
    8. '=' → logprob: -24.875
    9. '０' → logprob: -24.875
    10. ' ' → logprob: -25.125

Token 684: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: 0.0
    2. ' ' → logprob: -18.25
    3. '۰' → logprob: -21.25
    4. '00' → logprob: -22.0
    5. '000' → logprob: -22.125
    6. '```' → logprob: -22.25
    7. '   ' → logprob: -22.5
    8. '1' → logprob: -23.125
    9. '=' → logprob: -23.75
    10. '０' → logprob: -24.125

Token 685: ' ' (ID: 220)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.883721649646759
    2. 'from' → logprob: -0.883721649646759
    3. 'queue' → logprob: -1.7587215900421143
    4. ' from' → logprob: -7.008721828460693
    5. ' queue' → logprob: -8.758721351623535
    6. '	queue' → logprob: -9.883721351623535
    7. '```' → logprob: -10.133721351623535
    8. 'deque' → logprob: -10.508721351623535
    9. '    
' → logprob: -11.008721351623535
    10. '	from' → logprob: -11.258721351623535

Token 686: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2170647531747818
    2. 'queue' → logprob: -1.9670647382736206
    3. '
' → logprob: -3.09206485748291
    4. 'from' → logprob: -5.09206485748291
    5. '    
' → logprob: -6.46706485748291
    6. ' queue' → logprob: -6.46706485748291
    7. '	queue' → logprob: -8.21706485748291
    8. ' from' → logprob: -8.34206485748291
    9. '```' → logprob: -10.09206485748291
    10. '  ' → logprob: -11.96706485748291

Token 687: ' On' (ID: 2160)
  Prédit: 'queue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'queue' → logprob: -0.018787158653140068
    2. '#' → logprob: -4.893787384033203
    3. 'from' → logprob: -4.893787384033203
    4. 'start' → logprob: -6.143787384033203
    5. '
' → logprob: -7.768787384033203
    6. 'goal' → logprob: -8.018787384033203
    7. 'deque' → logprob: -8.268787384033203
    8. ' queue' → logprob: -8.518787384033203
    9. 'que' → logprob: -9.643787384033203
    10. 'for' → logprob: -10.018787384033203

Token 688: ' est' (ID: 893)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.0120218992233276
    2. 'veux' → logprob: -1.8870218992233276
    3. 'n' → logprob: -2.262022018432617
    4. 'continue' → logprob: -2.387022018432617
    5. 'a' → logprob: -2.762022018432617
    6. 'def' → logprob: -3.387022018432617
    7. 's' → logprob: -3.512022018432617
    8. 'vais' → logprob: -3.637022018432617
    9. 'contin' → logprob: -3.762022018432617
    10. 'part' → logprob: -4.012022018432617

Token 689: ' déjà' (ID: 21229)
  Prédit: 'dé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dé' → logprob: -0.41718044877052307
    2. 'au' → logprob: -1.5421804189682007
    3. 'à' → logprob: -2.1671805381774902
    4. ' déjà' → logprob: -5.04218053817749
    5. 'sur' → logprob: -6.29218053817749
    6. 'arr' → logprob: -6.29218053817749
    7. 'dans' → logprob: -7.29218053817749
    8. 'already' → logprob: -7.54218053817749
    9. 'd' → logprob: -8.042180061340332
    10. ' au' → logprob: -8.167180061340332

Token 690: ' au' (ID: 2791)
  Prédit: 'au'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'au' → logprob: -0.04376203194260597
    2. 'à' → logprob: -3.168761968612671
    3. 'arr' → logprob: -7.41876220703125
    4. ' au' → logprob: -9.16876220703125
    5. 'sur' → logprob: -10.91876220703125
    6. ' à' → logprob: -11.41876220703125
    7. '```' → logprob: -11.66876220703125
    8. 'a' → logprob: -11.91876220703125
    9. 'dans' → logprob: -12.79376220703125
    10. 'at' → logprob: -12.91876220703125

Token 691: ' but' (ID: 889)
  Prédit: 'but'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'but' → logprob: -0.004809010773897171
    2. ' but' → logprob: -6.1298089027404785
    3. 'n' → logprob: -6.2548089027404785
    4. 'goal' → logprob: -7.6298089027404785
    5. 'objectif' → logprob: -9.379809379577637
    6. 'node' → logprob: -10.254809379577637
    7. 'But' → logprob: -10.254809379577637
    8. 'som' → logprob: -10.754809379577637
    9. 'b' → logprob: -11.504809379577637
    10. ' But' → logprob: -11.629809379577637

Token 692: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.007870767265558243
    2. 'from' → logprob: -5.257870674133301
    3. 'queue' → logprob: -6.132870674133301
    4. '    
' → logprob: -7.757870674133301
    5. '```' → logprob: -11.2578706741333
    6. '
' → logprob: -12.0078706741333
    7. ' from' → logprob: -12.2578706741333
    8. ' queue' → logprob: -12.6328706741333
    9. 'que' → logprob: -13.2578706741333
    10. 'reverse' → logprob: -13.5078706741333

Token 693: ' donc' (ID: 14206)
  Prédit: 'queue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'queue' → logprob: -0.2702864408493042
    2. '   ' → logprob: -1.5202864408493042
    3. 'from' → logprob: -4.020286560058594
    4. '    
' → logprob: -8.645286560058594
    5. ' queue' → logprob: -10.645286560058594
    6. 'que' → logprob: -11.020286560058594
    7. '	queue' → logprob: -12.145286560058594
    8. 'deque' → logprob: -12.145286560058594
    9. '
' → logprob: -12.770286560058594
    10. 'q' → logprob: -13.145286560058594

Token 694: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0007841374608688056
    2. ' ' → logprob: -8.000783920288086
    3. 'auc' → logprob: -8.000783920288086
    4. 'le' → logprob: -10.000783920288086
    5. '   ' → logprob: -10.375783920288086
    6. 'pas' → logprob: -10.625783920288086
    7. 'la' → logprob: -12.875783920288086
    8. ' aucun' → logprob: -13.500783920288086
    9. 'zero' → logprob: -13.500783920288086
    10. 'au' → logprob: -14.000783920288086

Token 695: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -9.014684110297821e-06
    2. ' ' → logprob: -11.750008583068848
    3. 'auc' → logprob: -14.875008583068848
    4. 'zero' → logprob: -15.625008583068848
    5. 'le' → logprob: -16.000009536743164
    6. 'pas' → logprob: -16.625009536743164
    7. '   ' → logprob: -17.125009536743164
    8. 't' → logprob: -17.250009536743164
    9. 'au' → logprob: -17.250009536743164
    10. 'dé' → logprob: -17.375009536743164

Token 696: ' tours' (ID: 32603)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.22639569640159607
    2. '    
' → logprob: -1.7263957262039185
    3. 'queue' → logprob: -4.476395606994629
    4. '
' → logprob: -4.601395606994629
    5. 'for' → logprob: -6.476395606994629
    6. '   
' → logprob: -7.726395606994629
    7. '  
' → logprob: -8.101395606994629
    8. 'que' → logprob: -8.976395606994629
    9. 'from' → logprob: -9.101395606994629
    10. '        
' → logprob: -9.101395606994629

Token 697: ' nécessaires' (ID: 74402)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.009476159699261189
    2. 'from' → logprob: -5.009476184844971
    3. 'queue' → logprob: -6.009476184844971
    4. '    
' → logprob: -8.134475708007812
    5. '
' → logprob: -13.134475708007812
    6. '```' → logprob: -13.134475708007812
    7. '	queue' → logprob: -13.884475708007812
    8. 'que' → logprob: -14.134475708007812
    9. ' from' → logprob: -14.259475708007812
    10. 'deque' → logprob: -15.134475708007812

Token 698: '

' (ID: 279)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4753239154815674
    2. 'queue' → logprob: -1.2253239154815674
    3. 'from' → logprob: -2.4753239154815674
    4. '    
' → logprob: -9.100323677062988
    5. 'for' → logprob: -9.100323677062988
    6. '```' → logprob: -9.350323677062988
    7. ' queue' → logprob: -10.225323677062988
    8. '	queue' → logprob: -10.475323677062988
    9. 'import' → logprob: -10.850323677062988
    10. 'deque' → logprob: -10.975323677062988

Token 699: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6341367363929749
    2. 'queue' → logprob: -1.25913667678833
    3. 'from' → logprob: -1.88413667678833
    4. ' queue' → logprob: -4.25913667678833
    5. ' from' → logprob: -4.38413667678833
    6. 'for' → logprob: -6.25913667678833
    7. 'in' → logprob: -6.75913667678833
    8. ' for' → logprob: -7.50913667678833
    9. ' in' → logprob: -8.009137153625488
    10. 'reverse' → logprob: -8.009137153625488

Token 700: ' #' (ID: 1069)
  Prédit: 'queue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'queue' → logprob: -0.25245165824890137
    2. 'from' → logprob: -1.5024516582489014
    3. '   ' → logprob: -8.75245189666748
    4. 'in' → logprob: -9.37745189666748
    5. 'for' → logprob: -9.62745189666748
    6. 'changed' → logprob: -9.87745189666748
    7. 'q' → logprob: -10.25245189666748
    8. 'deque' → logprob: -10.62745189666748
    9. ' queue' → logprob: -11.00245189666748
    10. 'reverse' → logprob: -11.00245189666748

Token 701: ' On' (ID: 2160)
  Prédit: 'queue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'queue' → logprob: -0.5797157883644104
    2. 'from' → logprob: -0.8297157883644104
    3. 'changed' → logprob: -5.829715728759766
    4. 'deque' → logprob: -8.454715728759766
    5. 'change' → logprob: -9.079715728759766
    6. '#' → logprob: -9.329715728759766
    7. 'q' → logprob: -9.329715728759766
    8. 'in' → logprob: -9.704715728759766
    9. 'import' → logprob: -9.704715728759766
    10. 'que' → logprob: -9.954715728759766

Token 702: ' utilise' (ID: 70283)
  Prédit: 'from'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'from' → logprob: -0.005721505265682936
    2. 'queue' → logprob: -5.380721569061279
    3. ' from' → logprob: -7.630721569061279
    4. 'import' → logprob: -9.255721092224121
    5. 'for' → logprob: -9.755721092224121
    6. 'in' → logprob: -9.880721092224121
    7. '   ' → logprob: -9.880721092224121
    8. 'to' → logprob: -10.005721092224121
    9. 'que' → logprob: -10.380721092224121
    10. '#' → logprob: -10.380721092224121

Token 703: ' une' (ID: 2463)
  Prédit: 'deque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'deque' → logprob: -0.09014799445867538
    2. 'queue' → logprob: -2.8401479721069336
    3. 'from' → logprob: -3.5901479721069336
    4. ' deque' → logprob: -9.215147972106934
    5. 'import' → logprob: -10.090147972106934
    6. '```' → logprob: -10.965147972106934
    7. 'q' → logprob: -11.590147972106934
    8. ' queue' → logprob: -11.715147972106934
    9. 'que' → logprob: -11.965147972106934
    10. 'a' → logprob: -12.715147972106934

Token 704: ' approche' (ID: 102373)
  Prédit: 'deque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'deque' → logprob: -0.12699498236179352
    2. 'queue' → logprob: -2.126995086669922
    3. 'from' → logprob: -9.626995086669922
    4. ' deque' → logprob: -14.501995086669922
    5. ' queue' → logprob: -15.501995086669922
    6. 'que' → logprob: -15.501995086669922
    7. 'dq' → logprob: -17.501995086669922
    8. 'import' → logprob: -17.626995086669922
    9. 'deck' → logprob: -17.876995086669922
    10. '```' → logprob: -17.876995086669922

Token 705: ' de' (ID: 334)
  Prédit: 'deque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'deque' → logprob: -0.5344396829605103
    2. 'from' → logprob: -1.5344396829605103
    3. 'queue' → logprob: -1.7844396829605103
    4. 'de' → logprob: -4.409439563751221
    5. 'b' → logprob: -4.784439563751221
    6. ' deque' → logprob: -5.034439563751221
    7. '   ' → logprob: -6.909439563751221
    8. ' queue' → logprob: -7.534439563751221
    9. 'à' → logprob: -7.534439563751221
    10. '_queue' → logprob: -7.909439563751221

Token 706: ' programmation' (ID: 166376)
  Prédit: 'deque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'deque' → logprob: -0.02997540682554245
    2. 'queue' → logprob: -3.529975414276123
    3. 'b' → logprob: -8.529974937438965
    4. 'from' → logprob: -11.529974937438965
    5. ' deque' → logprob: -11.779974937438965
    6. '```' → logprob: -12.279974937438965
    7. 'while' → logprob: -12.779974937438965
    8. 'import' → logprob: -14.279974937438965
    9. ' queue' → logprob: -14.654974937438965
    10. 'collections' → logprob: -14.779974937438965

Token 707: ' dynamique' (ID: 98708)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.1294253021478653
    2. 'dynamic' → logprob: -2.629425287246704
    3. ' dynamique' → logprob: -3.129425287246704
    4. 'din' → logprob: -6.129425525665283
    5. 'dyn' → logprob: -6.504425525665283
    6. '```' → logprob: -7.879425525665283
    7. 'deque' → logprob: -8.129425048828125
    8. 'à' → logprob: -8.504425048828125
    9. 'par' → logprob: -8.754425048828125
    10. 'dp' → logprob: -9.004425048828125

Token 708: ' par' (ID: 686)
  Prédit: 'from'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'from' → logprob: -0.27568766474723816
    2. 'import' → logprob: -2.5256876945495605
    3. 'queue' → logprob: -2.7756876945495605
    4. '   ' → logprob: -3.0256876945495605
    5. ',' → logprob: -3.6506876945495605
    6. ' from' → logprob: -4.4006876945495605
    7. 'deque' → logprob: -5.7756876945495605
    8. ' queue' → logprob: -5.9006876945495605
    9. 'de' → logprob: -6.2756876945495605
    10. '#' → logprob: -7.0256876945495605

Token 709: ' ordre' (ID: 103061)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.5600041747093201
    2. 'file' → logprob: -1.8100042343139648
    3. 'queue' → logprob: -3.060004234313965
    4. 'B' → logprob: -3.060004234313965
    5. 'large' → logprob: -3.185004234313965
    6. 'deque' → logprob: -3.310004234313965
    7. '
' → logprob: -3.810004234313965
    8. 'larg' → logprob: -4.060004234313965
    9. 'reverse' → logprob: -4.560004234313965
    10. 'files' → logprob: -4.560004234313965

Token 710: ' inverse' (ID: 53743)
  Prédit: 'top'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'top' → logprob: -0.22220605611801147
    2. 'inverse' → logprob: -1.9722061157226562
    3. 'de' → logprob: -3.0972061157226562
    4. ' inverse' → logprob: -4.972206115722656
    5. ' top' → logprob: -5.722206115722656
    6. ' de' → logprob: -7.222206115722656
    7. 'from' → logprob: -7.222206115722656
    8. 'def' → logprob: -7.472206115722656
    9. 'deque' → logprob: -8.097206115722656
    10. ' invers' → logprob: -8.097206115722656

Token 711: ',
' (ID: 412)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14407704770565033
    2. 'from' → logprob: -2.2690770626068115
    3. 'queue' → logprob: -3.5190770626068115
    4. ' from' → logprob: -7.394076824188232
    5. ' queue' → logprob: -9.01907730102539
    6. ',' → logprob: -9.26907730102539
    7. '	queue' → logprob: -9.39407730102539
    8. 'deque' → logprob: -9.76907730102539
    9. 'que' → logprob: -10.14407730102539
    10. '	from' → logprob: -10.76907730102539

Token 712: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5430269241333008
    2. 'queue' → logprob: -0.9180269241333008
    3. '#' → logprob: -4.793026924133301
    4. ' queue' → logprob: -6.168026924133301
    5. 'from' → logprob: -6.293026924133301
    6. 'visited' → logprob: -6.543026924133301
    7. 'for' → logprob: -6.543026924133301
    8. 'in' → logprob: -6.793026924133301
    9. 'inverse' → logprob: -7.668026924133301
    10. 'to' → logprob: -7.793026924133301

Token 713: ' #' (ID: 1069)
  Prédit: 'queue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'queue' → logprob: -0.11700690537691116
    2. 'from' → logprob: -2.49200701713562
    3. 'in' → logprob: -4.867006778717041
    4. 'import' → logprob: -4.992006778717041
    5. '#' (adapté à ' #') → logprob: -5.867006778717041
    6. 'out' → logprob: -6.117006778717041
    7. '   ' → logprob: -6.242006778717041
    8. 'for' → logprob: -6.742006778717041
    9. 'stack' → logprob: -6.742006778717041
    10. 'degree' → logprob: -6.992006778717041

Token 714: ' on' (ID: 402)
  Prédit: 'queue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'queue' → logprob: -0.6032237410545349
    2. '#' → logprob: -1.1032238006591797
    3. 'from' → logprob: -2.6032238006591797
    4. 'in' → logprob: -3.7282238006591797
    5. 'import' → logprob: -5.10322380065918
    6. 'out' → logprob: -5.22822380065918
    7. 'deg' → logprob: -5.85322380065918
    8. '   ' → logprob: -6.22822380065918
    9. 'for' → logprob: -6.60322380065918
    10. 'changed' → logprob: -6.72822380065918

Token 715: ' met' (ID: 1421)
  Prédit: 'from'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'from' → logprob: -0.2211190015077591
    2. 'continue' → logprob: -2.846118927001953
    3. 'queue' → logprob: -3.346118927001953
    4. 'import' → logprob: -3.721118927001953
    5. ' from' → logprob: -3.846118927001953
    6. ' continue' → logprob: -4.346118927001953
    7. 'contin' → logprob: -4.721118927001953
    8. ' va' → logprob: -5.346118927001953
    9. 'enqueue' → logprob: -5.846118927001953
    10. 'que' → logprob: -6.096118927001953

Token 716: ' à' (ID: 1221)
  Prédit: 'à'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'à' → logprob: -0.45419350266456604
    2. 'en' → logprob: -1.3291934728622437
    3. 'queue' → logprob: -3.579193592071533
    4. 'import' → logprob: -3.829193592071533
    5. ' à' → logprob: -4.204193592071533
    6. '#' → logprob: -5.079193592071533
    7. '```' → logprob: -5.329193592071533
    8. 'from' → logprob: -5.454193592071533
    9. 'que' → logprob: -5.829193592071533
    10. 'a' → logprob: -5.829193592071533

Token 717: ' jour' (ID: 8379)
  Prédit: 'jour'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'jour' → logprob: -0.016365833580493927
    2. 'jours' → logprob: -5.266366004943848
    3. 'trait' → logprob: -5.516366004943848
    4. 'jou' → logprob: -5.766366004943848
    5. 'j' → logprob: -6.641366004943848
    6. 'l' → logprob: -6.891366004943848
    7. ' jour' → logprob: -8.266366004943848
    8. 'journ' → logprob: -8.266366004943848
    9. 'faire' → logprob: -8.391366004943848
    10. '```' → logprob: -9.391366004943848

Token 718: ' une' (ID: 2463)
  Prédit: 'changed'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'changed' → logprob: -0.24932925403118134
    2. ' changed' → logprob: -1.8743292093276978
    3. 'queue' → logprob: -3.7493293285369873
    4. 'a' → logprob: -4.999329090118408
    5. 'to' → logprob: -4.999329090118408
    6. 'from' → logprob: -5.374329090118408
    7. 'import' → logprob: -5.499329090118408
    8. '   ' → logprob: -5.749329090118408
    9. ' à' → logprob: -6.124329090118408
    10. 'la' → logprob: -6.374329090118408

Token 719: ' valeur' (ID: 41664)
  Prédit: 'queue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'queue' → logprob: -0.0723804384469986
    2. 'deque' → logprob: -2.822380542755127
    3. 'from' → logprob: -4.572380542755127
    4. ' queue' → logprob: -11.697380065917969
    5. 'file' → logprob: -12.322380065917969
    6. 'stack' → logprob: -12.572380065917969
    7. 'import' → logprob: -12.572380065917969
    8. 'que' → logprob: -13.072380065917969
    9. '```' → logprob: -13.947380065917969
    10. ' deque' → logprob: -13.947380065917969

Token 720: ' pour' (ID: 1930)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.7269763350486755
    2. 'queue' → logprob: -1.8519763946533203
    3. ' queue' → logprob: -2.7269763946533203
    4. '   ' → logprob: -3.1019763946533203
    5. ' =' → logprob: -3.2269763946533203
    6. ' des' → logprob: -3.2269763946533203
    7. '_queue' → logprob: -3.3519763946533203
    8. 'es' → logprob: -4.10197639465332
    9. 'deque' → logprob: -4.10197639465332
    10. 'des' → logprob: -4.85197639465332

Token 721: ' un' (ID: 537)
  Prédit: 'les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'les' → logprob: -0.18489110469818115
    2. ' chaque' → logprob: -2.5598912239074707
    3. 'la' → logprob: -3.4348912239074707
    4. ' les' → logprob: -4.184891223907471
    5. 'queue' → logprob: -4.934891223907471
    6. 'each' → logprob: -5.059891223907471
    7. 'le' → logprob: -5.434891223907471
    8. 'l' → logprob: -5.434891223907471
    9. 'deque' → logprob: -5.809891223907471
    10. 'which' → logprob: -6.309891223907471

Token 722: ' noe' (ID: 49921)
  Prédit: ' node'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' node' → logprob: -1.1149063110351562
    2. 'node' → logprob: -1.4899063110351562
    3. 'e' → logprob: -1.7399063110351562
    4. 'deque' → logprob: -2.3649063110351562
    5. 'queue' → logprob: -3.3649063110351562
    6. 'n' → logprob: -3.6149063110351562
    7. 'file' → logprob: -4.114906311035156
    8. ' file' → logprob: -4.364906311035156
    9. ' noe' → logprob: -4.489906311035156
    10. ' deque' → logprob: -4.489906311035156

Token 723: 'ud' (ID: 527)
  Prédit: 'ud'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ud' → logprob: -0.00015300170343834907
    2. 'd' → logprob: -9.375152587890625
    3. 'e' → logprob: -10.000152587890625
    4. 'u' → logprob: -11.125152587890625
    5. '```' → logprob: -12.500152587890625
    6. '#' → logprob: -14.000152587890625
    7. 'уд' → logprob: -14.250152587890625
    8. 'œ' → logprob: -14.750152587890625
    9. ' ud' → logprob: -14.750152587890625
    10. '\xc2' → logprob: -15.125152587890625

Token 724: ' s' (ID: 265)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.610074520111084
    2. 's' → logprob: -1.235074520111084
    3. '   ' → logprob: -3.360074520111084
    4. ' ,' → logprob: -4.360074520111084
    5. ' =' → logprob: -4.485074520111084
    6. ' que' → logprob: -4.485074520111084
    7. '.' → logprob: -4.735074520111084
    8. ')' → logprob: -5.110074520111084
    9. 'u' → logprob: -5.110074520111084
    10. ' en' → logprob: -5.110074520111084

Token 725: ''il' (ID: 14683)
  Prédit: 'ur'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ur' → logprob: -0.2956896126270294
    2. 'u' → logprob: -1.545689582824707
    3. 'dp' → logprob: -4.045689582824707
    4. 'ont' → logprob: -5.295689582824707
    5. 'atisf' → logprob: -5.295689582824707
    6. ''il' → logprob: -5.420689582824707
    7. 'il' → logprob: -7.045689582824707
    8. 'uis' → logprob: -7.045689582824707
    9. 'ait' → logprob: -7.170689582824707
    10. 'i' → logprob: -7.170689582824707

Token 726: ' existe' (ID: 19498)
  Prédit: ' existe'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' existe' → logprob: -0.7458028793334961
    2. 's' → logprob: -1.995802879333496
    3. ' peut' → logprob: -2.745802879333496
    4. ' y' → logprob: -2.870802879333496
    5. ' est' → logprob: -2.995802879333496
    6. ' is' → logprob: -3.245802879333496
    7. ' a' → logprob: -3.495802879333496
    8. 'y' → logprob: -3.745802879333496
    9. 'est' → logprob: -3.995802879333496
    10. ' has' → logprob: -4.620802879333496

Token 727: ' une' (ID: 2463)
  Prédit: ' un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.45636752247810364
    2. ' une' → logprob: -1.3313674926757812
    3. 'un' → logprob: -2.9563674926757812
    4. 'une' → logprob: -3.0813674926757812
    5. ' ' → logprob: -7.081367492675781
    6. ' a' → logprob: -7.081367492675781
    7. ' au' → logprob: -7.206367492675781
    8. ' u' → logprob: -8.081367492675781
    9. ' k' → logprob: -8.206367492675781
    10. 'u' → logprob: -8.331367492675781

Token 728: ' stratégie' (ID: 79899)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.27351808547973633
    2. 't' → logprob: -2.8985180854797363
    3. 'transition' → logprob: -3.0235180854797363
    4. 'poss' → logprob: -3.3985180854797363
    5. 'possible' → logprob: -4.148518085479736
    6. 'ar' → logprob: -4.273518085479736
    7. 'tour' → logprob: -4.648518085479736
    8. ' possibilité' → logprob: -4.898518085479736
    9. 'long' → logprob: -5.023518085479736
    10. 'trans' → logprob: -5.023518085479736

Token 729: ' pour' (ID: 1930)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.3465120792388916
    2. ' qui' → logprob: -2.0965120792388916
    3. ' for' → logprob: -2.5965120792388916
    4. '    ' → logprob: -2.5965120792388916
    5. ' that' → logprob: -2.9715120792388916
    6. ' possible' → logprob: -3.2215120792388916
    7. '       ' → logprob: -3.2215120792388916
    8. ' permettant' → logprob: -3.2215120792388916
    9. 'possible' → logprob: -3.2215120792388916
    10. ' ' → logprob: -3.3465120792388916

Token 730: ' lequel' (ID: 55154)
  Prédit: ' garantir'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' garantir' → logprob: -1.3375226259231567
    2. 'aller' → logprob: -1.8375226259231567
    3. 'atte' → logprob: -2.462522506713867
    4. ' atteindre' → logprob: -2.587522506713867
    5. 'forcer' → logprob: -2.962522506713867
    6. ' gagner' → logprob: -2.962522506713867
    7. 'le' → logprob: -3.087522506713867
    8. 'g' → logprob: -3.212522506713867
    9. 're' → logprob: -3.212522506713867
    10. 'faire' → logprob: -4.087522506713867

Token 731: '
' (ID: 198)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dp' → logprob: -0.80874103307724
    2. ' dp' → logprob: -1.9337410926818848
    3. 'all' → logprob: -2.3087410926818848
    4. 'for' → logprob: -2.4337410926818848
    5. ' for' → logprob: -2.5587410926818848
    6. ' all' → logprob: -2.9337410926818848
    7. 't' → logprob: -3.1837410926818848
    8. '
' → logprob: -4.808741092681885
    9. ' toutes' → logprob: -4.933741092681885
    10. 'on' → logprob: -5.183741092681885

Token 732: '   ' (ID: 271)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dp' → logprob: -1.7374213933944702
    2. ' for' → logprob: -1.9874213933944702
    3. ' on' → logprob: -2.1124215126037598
    4. ' dp' → logprob: -2.3624215126037598
    5. ' que' → logprob: -2.4874215126037598
    6. 'for' → logprob: -2.4874215126037598
    7. ' le' → logprob: -3.2374215126037598
    8. ' il' → logprob: -3.4874215126037598
    9. ' k' → logprob: -3.7374215126037598
    10. 'le' → logprob: -3.8624215126037598

Token 733: ' #' (ID: 1069)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.8608753085136414
    2. ' for' → logprob: -1.4858753681182861
    3. 'k' → logprob: -1.9858753681182861
    4. 'for' → logprob: -2.860875368118286
    5. ' on' → logprob: -3.485875368118286
    6. ' all' → logprob: -3.735875368118286
    7. 'all' → logprob: -4.360875129699707
    8. '   ' → logprob: -4.735875129699707
    9. ' pour' → logprob: -4.735875129699707
    10. '#' (adapté à ' #') → logprob: -4.860875129699707

Token 734: ' pour' (ID: 1930)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 't' → logprob: -1.0587130784988403
    2. 'dp' → logprob: -1.3087130784988403
    3. 'all' → logprob: -1.4337130784988403
    4. 'tout' → logprob: -2.683712959289551
    5. 'for' → logprob: -2.808712959289551
    6. '
' → logprob: -5.183712959289551
    7. 'pour' → logprob: -6.683712959289551
    8. 'cha' → logprob: -6.808712959289551
    9. 'every' → logprob: -6.933712959289551
    10. 'any' → logprob: -7.058712959289551

Token 735: ' tous' (ID: 10688)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' → logprob: -0.36872851848602295
    2. 'tout' → logprob: -2.8687286376953125
    3. ' tous' → logprob: -2.9937286376953125
    4. ' all' → logprob: -2.9937286376953125
    5. 'dp' → logprob: -3.7437286376953125
    6. ' dp' → logprob: -3.8687286376953125
    7. 'all' → logprob: -3.9937286376953125
    8. ' toutes' → logprob: -4.2437286376953125
    9. ' which' → logprob: -4.2437286376953125
    10. ' chaque' → logprob: -4.4937286376953125

Token 736: ' les' (ID: 1341)
  Prédit: ' les'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.2803337872028351
    2. ' k' → logprob: -2.1553337574005127
    3. 'k' → logprob: -2.6553337574005127
    4. 'les' → logprob: -3.1553337574005127
    5. ' le' → logprob: -6.280333995819092
    6. ' voisins' → logprob: -6.280333995819092
    7. ' next' → logprob: -6.405333995819092
    8. 's' → logprob: -6.905333995819092
    9. ' sets' → logprob: -6.905333995819092
    10. ' tokens' → logprob: -7.405333995819092

Token 737: ' choix' (ID: 28642)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.10075218975543976
    2. ' k' → logprob: -3.850752115249634
    3. 'sets' → logprob: -4.225752353668213
    4. 's' → logprob: -4.725752353668213
    5. 'cho' → logprob: -4.975752353668213
    6. 'next' → logprob: -5.100752353668213
    7. 'succ' → logprob: -5.100752353668213
    8. 'vo' → logprob: -5.225752353668213
    9. ' choix' → logprob: -5.725752353668213
    10. ' voisins' → logprob: -5.725752353668213

Token 738: ' advers' (ID: 33091)
  Prédit: ' advers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' advers' → logprob: -0.28895285725593567
    2. ' possibles' → logprob: -1.5389528274536133
    3. 'possible' → logprob: -4.288952827453613
    4. ' possible' → logprob: -5.038952827453613
    5. ' des' → logprob: -5.163952827453613
    6. ' de' → logprob: -6.538952827453613
    7. 'de' → logprob: -6.788952827453613
    8. ' du' → logprob: -6.788952827453613
    9. 'des' → logprob: -7.038952827453613
    10. 's' → logprob: -7.038952827453613

Token 739: 'es' (ID: 268)
  Prédit: 'aires'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'aires' → logprob: -0.04641487076878548
    2. 'aire' → logprob: -3.546414852142334
    3. 'es' → logprob: -4.796414852142334
    4. '#' → logprob: -6.421414852142334
    5. 'eurs' → logprob: -6.546414852142334
    6. 'e' → logprob: -6.921414852142334
    7. 'ers' → logprob: -7.796414852142334
    8. 'vers' → logprob: -7.796414852142334
    9. '`' → logprob: -7.796414852142334
    10. 'ent' → logprob: -8.046415328979492

Token 740: ' (' (ID: 350)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.052643436938524246
    2. ':' → logprob: -3.6776435375213623
    3. ' ,' → logprob: -4.677643299102783
    4. '<|end|>' → logprob: -4.802643299102783
    5. '   ' → logprob: -6.177643299102783
    6. ')' → logprob: -6.427643299102783
    7. '):' → logprob: -6.677643299102783
    8. ' ' → logprob: -7.427643299102783
    9. '.' → logprob: -7.677643299102783
    10. ' (' → logprob: -8.302643775939941

Token 741: 'i' (ID: 72)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.9369465708732605
    2. ',' → logprob: -2.0619466304779053
    3. ' ,' → logprob: -2.3119466304779053
    4. 'k' → logprob: -2.4369466304779053
    5. '),' → logprob: -2.5619466304779053
    6. ' ),' → logprob: -2.9369466304779053
    7. ' de' → logprob: -3.6869466304779053
    8. ')' → logprob: -4.186946392059326
    9. ' des' → logprob: -4.186946392059326
    10. ' possibles' → logprob: -4.311946392059326

Token 742: '.e' (ID: 2560)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.6349998116493225
    2. 'l' → logprob: -1.3849997520446777
    3. '=' → logprob: -3.2599997520446777
    4. '   ' → logprob: -3.8849997520446777
    5. '),' → logprob: -3.8849997520446777
    6. ')' → logprob: -4.009999752044678
    7. 'm' → logprob: -4.134999752044678
    8. 'nt' → logprob: -4.384999752044678
    9. 'ls' → logprob: -4.634999752044678
    10. 'en' → logprob: -4.884999752044678

Token 743: '.' (ID: 13)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.7268108129501343
    2. '#' → logprob: -2.101810932159424
    3. 'ci' → logprob: -2.601810932159424
    4. 'def' → logprob: -2.726810932159424
    5. 'l' → logprob: -3.476810932159424
    6. 't' → logprob: -3.476810932159424
    7. '.e' → logprob: -4.101810932159424
    8. 'c' → logprob: -4.226810932159424
    9. '.' → logprob: -4.226810932159424
    10. 'x' → logprob: -4.351810932159424

Token 744: ' tous' (ID: 10688)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -1.8242509365081787
    2. ' k' → logprob: -2.1992509365081787
    3. ' for' → logprob: -2.4492509365081787
    4. ' sets' → logprob: -2.4492509365081787
    5. ' les' → logprob: -2.4492509365081787
    6. ' tous' → logprob: -2.8242509365081787
    7. 'les' → logprob: -3.3242509365081787
    8. ' le' → logprob: -3.3242509365081787
    9. 't' → logprob: -3.4492509365081787
    10. ' chaque' → logprob: -3.4492509365081787

Token 745: ' les' (ID: 1341)
  Prédit: ' les'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.2981198728084564
    2. ' k' → logprob: -2.2981197834014893
    3. 'les' → logprob: -2.7981197834014893
    4. 'k' → logprob: -3.0481197834014893
    5. ' des' → logprob: -4.298120021820068
    6. ' possible' → logprob: -5.423120021820068
    7. ' le' → logprob: -5.673120021820068
    8. ' ' → logprob: -5.798120021820068
    9. ' sets' → logprob: -6.173120021820068
    10. ' s' → logprob: -6.173120021820068

Token 746: ' k' (ID: 372)
  Prédit: 'next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'next' → logprob: -1.0113180875778198
    2. 'k' → logprob: -1.2613180875778198
    3. 'v' → logprob: -1.8863180875778198
    4. 'vo' → logprob: -3.1363182067871094
    5. 'nodes' → logprob: -3.6363182067871094
    6. 's' → logprob: -4.261318206787109
    7. 'neighbors' → logprob: -4.261318206787109
    8. 'succ' → logprob: -4.386318206787109
    9. 'moves' → logprob: -4.511318206787109
    10. 'graph' → logprob: -4.636318206787109

Token 747: 'step' (ID: 17509)
  Prédit: '-step'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-step' → logprob: -0.2893528342247009
    2. '_step' → logprob: -2.7893528938293457
    3. 'step' → logprob: -2.9143528938293457
    4. ')' → logprob: -3.1643528938293457
    5. '),' → logprob: -3.4143528938293457
    6. ',' → logprob: -3.9143528938293457
    7. '-' → logprob: -4.539352893829346
    8. '_graph' → logprob: -4.914352893829346
    9. '_steps' → logprob: -5.789352893829346
    10. ')-' → logprob: -6.164352893829346

Token 748: '_graph' (ID: 33441)
  Prédit: '_graph'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_graph' → logprob: -0.0025905270595103502
    2. 's' → logprob: -6.627590656280518
    3. ']_' → logprob: -7.377590656280518
    4. ')_' → logprob: -8.75259017944336
    5. '_s' → logprob: -8.75259017944336
    6. ' _' → logprob: -9.87759017944336
    7. '   ' → logprob: -10.00259017944336
    8. '_' → logprob: -10.50259017944336
    9. ''_' → logprob: -10.75259017944336
    10. ')' → logprob: -10.87759017944336

Token 749: 's' (ID: 82)
  Prédit: 's'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.0035419787745922804
    2. '_s' → logprob: -6.503541946411133
    3. ')' → logprob: -7.253541946411133
    4. '
' → logprob: -8.253541946411133
    5. '_graph' → logprob: -8.503541946411133
    6. '[s' → logprob: -8.878541946411133
    7. ')s' → logprob: -9.128541946411133
    8. ' s' → logprob: -9.253541946411133
    9. '_edges' → logprob: -9.253541946411133
    10. 'graphs' → logprob: -9.378541946411133

Token 750: '),
' (ID: 2313)
  Prédit: '),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '),' → logprob: -0.0743187740445137
    2. ')' → logprob: -2.8243188858032227
    3. '):' → logprob: -5.074318885803223
    4. ' ),' → logprob: -5.824318885803223
    5. 's' → logprob: -7.449318885803223
    6. ',' → logprob: -7.449318885803223
    7. ')],' → logprob: -7.699318885803223
    8. '):
' → logprob: -7.824318885803223
    9. ']),' → logprob: -8.199318885803223
    10. '],' → logprob: -8.699318885803223

Token 751: '   ' (ID: 271)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.7795112133026123
    2. '   ' → logprob: -1.6545112133026123
    3. '#' → logprob: -2.0295112133026123
    4. ' #' → logprob: -2.2795112133026123
    5. ' il' → logprob: -3.0295112133026123
    6. 'for' → logprob: -3.4045112133026123
    7. ' on' → logprob: -4.529511451721191
    8. '       ' → logprob: -5.904511451721191
    9. ')' → logprob: -5.904511451721191
    10. ' la' → logprob: -6.154511451721191

Token 752: ' #' (ID: 1069)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' (adapté à ' #') → logprob: -0.7521451711654663
    2. ' #' → logprob: -1.3771451711654663
    3. '   ' → logprob: -1.8771451711654663
    4. ' on' → logprob: -3.252145290374756
    5. ' for' → logprob: -3.377145290374756
    6. ' il' → logprob: -4.002145290374756
    7. 'for' → logprob: -4.877145290374756
    8. '    ' → logprob: -5.752145290374756
    9. ' la' → logprob: -6.377145290374756
    10. ')' → logprob: -6.377145290374756

Token 753: ' on' (ID: 402)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.14035876095294952
    2. 'for' → logprob: -2.2653586864471436
    3. ' node' → logprob: -3.7653586864471436
    4. '   ' → logprob: -6.265358924865723
    5. 'node' → logprob: -7.890358924865723
    6. ' dp' → logprob: -7.890358924865723
    7. 'dp' → logprob: -8.765358924865723
    8. ' u' → logprob: -8.765358924865723
    9. ' on' → logprob: -9.265358924865723
    10. ' all' → logprob: -9.390358924865723

Token 754: ' peut' (ID: 9216)
  Prédit: 'pe'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pe' → logprob: -0.3330448865890503
    2. ' peut' → logprob: -1.7080448865890503
    3. 'a' → logprob: -3.20804500579834
    4. 'for' → logprob: -3.45804500579834
    5. ' a' → logprob: -4.70804500579834
    6. 'can' → logprob: -4.95804500579834
    7. ' for' → logprob: -5.70804500579834
    8. ' peux' → logprob: -6.20804500579834
    9. 'pour' → logprob: -6.58304500579834
    10. 'at' → logprob: -6.70804500579834

Token 755: ' aller' (ID: 18383)
  Prédit: ' trouver'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' trouver' → logprob: -0.5729393362998962
    2. 'tr' → logprob: -2.072939395904541
    3. ' atteindre' → logprob: -2.697939395904541
    4. ' at' → logprob: -2.822939395904541
    5. ' garantir' → logprob: -3.572939395904541
    6. ' avancer' → logprob: -4.072939395904541
    7. ' ' → logprob: -4.197939395904541
    8. ' choisir' → logprob: -4.197939395904541
    9. 'prendre' → logprob: -4.447939395904541
    10. 'aller' → logprob: -4.447939395904541

Token 756: ' vers' (ID: 3640)
  Prédit: ' vers'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' vers' → logprob: -0.16491951048374176
    2. 'sur' → logprob: -3.16491961479187
    3. ' à' → logprob: -4.039919376373291
    4. 'to' → logprob: -4.039919376373291
    5. 'dans' → logprob: -4.164919376373291
    6. ' to' → logprob: -4.164919376373291
    7. 'vers' → logprob: -4.414919376373291
    8. 'à' → logprob: -4.414919376373291
    9. ' sur' → logprob: -4.664919376373291
    10. ' dans' → logprob: -5.414919376373291

Token 757: ' un' (ID: 537)
  Prédit: ' un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.30970489978790283
    2. ' une' → logprob: -1.9347048997879028
    3. ' au' → logprob: -2.9347047805786133
    4. 'un' → logprob: -3.0597047805786133
    5. 'une' → logprob: -4.059704780578613
    6. ' a' → logprob: -6.434704780578613
    7. 'au' → logprob: -6.809704780578613
    8. ' des' → logprob: -7.559704780578613
    9. 'a' → logprob: -8.434704780578613
    10. ' u' → logprob: -8.684704780578613

Token 758: ' noe' (ID: 49921)
  Prédit: ' node'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' node' → logprob: -0.2741498351097107
    2. 'node' → logprob: -2.2741498947143555
    3. ' voisin' → logprob: -2.7741498947143555
    4. ' next' → logprob: -4.1491498947143555
    5. 'neighbor' → logprob: -4.6491498947143555
    6. ' sommet' → logprob: -5.0241498947143555
    7. 'next' → logprob: -5.0241498947143555
    8. 'state' → logprob: -5.0241498947143555
    9. ' k' → logprob: -5.1491498947143555
    10. ' noe' → logprob: -5.2741498947143555

Token 759: 'ud' (ID: 527)
  Prédit: 'ud'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ud' → logprob: -1.4855663721391466e-05
    2. 'd' → logprob: -12.125015258789062
    3. 'udh' → logprob: -12.375015258789062
    4. 'e' → logprob: -13.250015258789062
    5. 'u' → logprob: -14.000015258789062
    6. '#' → logprob: -14.500015258789062
    7. '```' → logprob: -15.000015258789062
    8. 't' → logprob: -15.000015258789062
    9. 'уд' → logprob: -15.125015258789062
    10. '   ' → logprob: -15.375015258789062

Token 760: ' avec' (ID: 3937)
  Prédit: ' avec'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' avec' → logprob: -1.750454306602478
    2. ' où' → logprob: -2.0004544258117676
    3. ' dp' → logprob: -2.1254544258117676
    4. ' dans' → logprob: -2.3754544258117676
    5. 'où' → logprob: -2.7504544258117676
    6. ' with' → logprob: -2.7504544258117676
    7. ' for' → logprob: -3.1254544258117676
    8. 'dp' → logprob: -3.3754544258117676
    9. 'with' → logprob: -3.3754544258117676
    10. '   ' → logprob: -3.5004544258117676

Token 761: ' dp' (ID: 21546)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dp' → logprob: -0.024920467287302017
    2. ' dp' → logprob: -3.7749204635620117
    3. 'a' → logprob: -6.899920463562012
    4. ' a' → logprob: -7.649920463562012
    5. '   ' → logprob: -10.399920463562012
    6. ' smaller' → logprob: -11.024920463562012
    7. '	dp' → logprob: -11.024920463562012
    8. 'sm' → logprob: -11.274920463562012
    9. ')' → logprob: -11.274920463562012
    10. '
' → logprob: -11.399920463562012

Token 762: ' <' (ID: 464)
  Prédit: '[v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[v' → logprob: -0.6309259533882141
    2. '[node' → logprob: -1.1309258937835693
    3. '[' → logprob: -3.0059258937835693
    4. '[next' → logprob: -3.1309258937835693
    5. '[u' → logprob: -3.3809258937835693
    6. '[val' → logprob: -5.005926132202148
    7. '[j' → logprob: -5.630926132202148
    8. '[n' → logprob: -5.755926132202148
    9. '[]' → logprob: -6.630926132202148
    10. '```' → logprob: -7.005926132202148

Token 763: ' inf' (ID: 5603)
  Prédit: 'INF'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'INF' → logprob: -0.501397967338562
    2. 'dp' → logprob: -1.001397967338562
    3. ' dp' → logprob: -4.001398086547852
    4. ' INF' → logprob: -4.751398086547852
    5. 'inf' → logprob: -12.126398086547852
    6. '	dp' → logprob: -12.751398086547852
    7. ' ' → logprob: -13.126398086547852
    8. ' ' → logprob: -13.251398086547852
    9. '_INF' → logprob: -13.626398086547852
    10. '   ' → logprob: -13.626398086547852

Token 764: ' en' (ID: 469)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5443081855773926
    2. '   ' → logprob: -0.9193081855773926
    3. '    
' → logprob: -3.9193081855773926
    4. '
' → logprob: -8.294307708740234
    5. ',' → logprob: -8.794307708740234
    6. '  
' → logprob: -9.169307708740234
    7. '   
' → logprob: -9.294307708740234
    8. ')' → logprob: -9.419307708740234
    9. ')
' → logprob: -9.544307708740234
    10. ',
' → logprob: -10.044307708740234

Token 765: ' une' (ID: 2463)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dp' → logprob: -1.0107051134109497
    2. ' dp' → logprob: -1.2607051134109497
    3. '1' → logprob: -1.8857051134109497
    4. ' at' → logprob: -3.26070499420166
    5. 'moins' → logprob: -3.38570499420166
    6. ' moins' → logprob: -3.88570499420166
    7. ' ' → logprob: -4.13570499420166
    8. 'plus' → logprob: -4.88570499420166
    9. ' au' → logprob: -5.01070499420166
    10. '```' → logprob: -5.01070499420166

Token 766: ' étape' (ID: 83661)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.01401952002197504
    2. '+' → logprob: -5.51401948928833
    3. ' ' → logprob: -5.88901948928833
    4. '
' → logprob: -6.51401948928833
    5. 't' → logprob: -7.38901948928833
    6. '   ' → logprob: -7.38901948928833
    7. 'tour' → logprob: -7.51401948928833
    8. ' tour' → logprob: -7.76401948928833
    9. ' +' → logprob: -8.014019966125488
    10. '`' → logprob: -8.014019966125488

Token 767: '.

' (ID: 364)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14634166657924652
    2. '
' → logprob: -2.021341562271118
    3. '    
' → logprob: -5.771341800689697
    4. 'queue' → logprob: -8.771341323852539
    5. ')' → logprob: -9.271341323852539
    6. '
' → logprob: -9.771341323852539
    7. 'from' → logprob: -10.521341323852539
    8. ',' → logprob: -10.771341323852539
    9. '```' → logprob: -10.896341323852539
    10. 'count' → logprob: -11.396341323852539

Token 768: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.035946059972047806
    2. 'from' → logprob: -4.035945892333984
    3. 'queue' → logprob: -4.160945892333984
    4. 'for' → logprob: -7.410945892333984
    5. 'count' → logprob: -8.035945892333984
    6. '```' → logprob: -8.160945892333984
    7. 'in' → logprob: -8.785945892333984
    8. 'changed' → logprob: -9.160945892333984
    9. 'degree' → logprob: -9.410945892333984
    10. '    
' → logprob: -9.535945892333984

Token 769: ' #' (ID: 1069)
  Prédit: 'from'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'from' → logprob: -0.5148969292640686
    2. 'changed' → logprob: -1.2648968696594238
    3. 'queue' → logprob: -2.264896869659424
    4. 'change' → logprob: -4.764896869659424
    5. '   ' → logprob: -5.264896869659424
    6. 'updated' → logprob: -7.139896869659424
    7. 'in' → logprob: -7.264896869659424
    8. 'while' → logprob: -8.014897346496582
    9. ' changed' → logprob: -8.389897346496582
    10. 'degree' → logprob: -9.014897346496582

Token 770: ' C' (ID: 363)
  Prédit: 'from'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'from' → logprob: -0.6229723691940308
    2. 'changed' → logprob: -1.7479723691940308
    3. 'queue' → logprob: -1.7479723691940308
    4. 'in' → logprob: -2.6229724884033203
    5. 'out' → logprob: -4.37297248840332
    6. 'degree' → logprob: -4.62297248840332
    7. 'change' → logprob: -4.87297248840332
    8. 'for' → logprob: -5.99797248840332
    9. 'pending' → logprob: -6.62297248840332
    10. 'deg' → logprob: -6.62297248840332

Token 771: ''est' (ID: 6616)
  Prédit: 'ount'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ount' → logprob: -0.6316933035850525
    2. 'om' → logprob: -2.0066933631896973
    3. 'olor' → logprob: -2.3816933631896973
    4. 'ol' → logprob: -2.6316933631896973
    5. 'ounter' → logprob: -2.8816933631896973
    6. '#' → logprob: -3.3816933631896973
    7. 'for' → logprob: -3.7566933631896973
    8. 'ont' → logprob: -5.006693363189697
    9. 'h' → logprob: -5.006693363189697
    10. 'urrent' → logprob: -5.131693363189697

Token 772: ' un' (ID: 537)
  Prédit: ' un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -1.0420693159103394
    2. ' une' → logprob: -1.0420693159103394
    3. 'à' → logprob: -1.9170693159103394
    4. ' à' → logprob: -3.042069435119629
    5. ' a' → logprob: -4.542069435119629
    6. 'une' → logprob: -4.542069435119629
    7. 'a' → logprob: -4.917069435119629
    8. '_' → logprob: -5.042069435119629
    9. '   ' → logprob: -5.292069435119629
    10. ' =' → logprob: -5.292069435119629

Token 773: ' problème' (ID: 35630)
  Prédit: ' jeu'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' jeu' → logprob: -0.7598574161529541
    2. 'jeu' → logprob: -1.634857416152954
    3. ' problème' → logprob: -1.884857416152954
    4. 'pro' → logprob: -2.634857416152954
    5. 'proble' → logprob: -3.509857416152954
    6. 'process' → logprob: -4.259857177734375
    7. 'je' → logprob: -4.634857177734375
    8. 'e' → logprob: -4.634857177734375
    9. ' probl' → logprob: -5.384857177734375
    10. 'problem' → logprob: -5.509857177734375

Token 774: ' classique' (ID: 76895)
  Prédit: 'de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'de' → logprob: -0.46755489706993103
    2. 'typ' → logprob: -1.7175549268722534
    3. ' de' → logprob: -2.342554807662964
    4. 'd' → logprob: -2.717554807662964
    5. 'à' → logprob: -4.717555046081543
    6. '#' → logprob: -4.717555046081543
    7. 'class' → logprob: -5.092555046081543
    8. ' classique' → logprob: -5.967555046081543
    9. 'type' → logprob: -6.592555046081543
    10. 'com' → logprob: -7.217555046081543

Token 775: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.33997541666030884
    2. 'de' → logprob: -1.464975357055664
    3. '   ' → logprob: -3.089975357055664
    4. 'd' → logprob: -5.964975357055664
    5. 'from' → logprob: -6.339975357055664
    6. ' des' → logprob: -6.464975357055664
    7. '#' → logprob: -6.839975357055664
    8. ' d' → logprob: -7.214975357055664
    9. '_de' → logprob: -7.714975357055664
    10. '    
' → logprob: -7.839975357055664

Token 776: ' résolution' (ID: 147402)
  Prédit: 'jeu'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'jeu' → logprob: -0.8059247732162476
    2. ' jeu' → logprob: -1.1809247732162476
    3. ' jeux' → logprob: -2.055924892425537
    4. 'je' → logprob: -3.180924892425537
    5. 'gr' → logprob: -3.555924892425537
    6. 'game' → logprob: -3.930924892425537
    7. 'par' → logprob: -4.930924892425537
    8. ' game' → logprob: -5.055924892425537
    9. '"' → logprob: -6.305924892425537
    10. '
' → logprob: -6.305924892425537

Token 777: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.594998836517334
    2. ' des' → logprob: -1.344998836517334
    3. 'de' → logprob: -2.094998836517334
    4. 'des' → logprob: -4.344998836517334
    5. ' d' → logprob: -4.594998836517334
    6. 'd' → logprob: -4.969998836517334
    7. ' du' → logprob: -5.344998836517334
    8. '   ' → logprob: -6.094998836517334
    9. ' of' → logprob: -6.219998836517334
    10. '<|end|>' → logprob: -6.344998836517334

Token 778: ' jeu' (ID: 24626)
  Prédit: 'jeu'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'jeu' → logprob: -0.3624700903892517
    2. ' jeux' → logprob: -1.9874701499938965
    3. ' jeu' → logprob: -2.6124701499938965
    4. 'gr' → logprob: -3.7374701499938965
    5. 'je' → logprob: -3.7374701499938965
    6. 'game' → logprob: -3.8624701499938965
    7. '
' → logprob: -5.2374701499938965
    8. 'graph' → logprob: -5.4874701499938965
    9. 'positions' → logprob: -6.1124701499938965
    10. 'games' → logprob: -6.3624701499938965

Token 779: ' altern' (ID: 7310)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.005949183367192745
    2. ',' → logprob: -6.005949020385742
    3. 'from' → logprob: -7.005949020385742
    4. '    
' → logprob: -8.005949020385742
    5. 'import' → logprob: -8.130949020385742
    6. '
' → logprob: -8.255949020385742
    7. '.' → logprob: -8.255949020385742
    8. ')' → logprob: -9.005949020385742
    9. 'queue' → logprob: -9.005949020385742
    10. 'def' → logprob: -9.130949020385742

Token 780: 'é' (ID: 377)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.7349339723587036
    2. 'é' → logprob: -1.6099339723587036
    3. '#' → logprob: -1.8599339723587036
    4. 'ance' → logprob: -2.484933853149414
    5. 'es' → logprob: -3.359933853149414
    6. 'atif' → logprob: -3.984933853149414
    7. '```' → logprob: -4.859933853149414
    8. '   ' → logprob: -5.484933853149414
    9. 'ant' → logprob: -5.609933853149414
    10. 'def' → logprob: -5.859933853149414

Token 781: ' :
' (ID: 10039)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7258787155151367
    2. '
' → logprob: -0.9758787155151367
    3. ')' → logprob: -2.7258787155151367
    4. ',' → logprob: -3.2258787155151367
    5. '    
' → logprob: -4.475878715515137
    6. '.' → logprob: -5.475878715515137
    7. '  
' → logprob: -5.850878715515137
    8. '<|end|>' → logprob: -5.850878715515137
    9. ':' → logprob: -6.475878715515137
    10. '  ' → logprob: -6.475878715515137

Token 782: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0282201636582613
    2. 'from' → logprob: -4.278220176696777
    3. 'queue' → logprob: -5.153220176696777
    4. ' from' → logprob: -6.403220176696777
    5. 'degree' → logprob: -6.528220176696777
    6. ' queue' → logprob: -7.028220176696777
    7. 'out' → logprob: -7.278220176696777
    8. 'in' → logprob: -7.528220176696777
    9. ' out' → logprob: -7.778220176696777
    10. ' in' → logprob: -7.903220176696777

Token 783: ' #' (ID: 1069)
  Prédit: 'out'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'out' → logprob: -0.5081955790519714
    2. 'from' → logprob: -1.6331956386566162
    3. ' out' → logprob: -2.008195638656616
    4. 'queue' → logprob: -4.008195400238037
    5. ' from' → logprob: -4.258195400238037
    6. 'in' → logprob: -5.008195400238037
    7. '   ' → logprob: -5.008195400238037
    8. 'degree' → logprob: -5.133195400238037
    9. ' queue' → logprob: -5.883195400238037
    10. ' in' → logprob: -5.883195400238037

Token 784: ' On' (ID: 2160)
  Prédit: 'queue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'queue' → logprob: -0.9506276845932007
    2. 'from' → logprob: -1.0756276845932007
    3. 'out' → logprob: -1.9506276845932007
    4. 'degree' → logprob: -3.0756278038024902
    5. 'in' → logprob: -3.9506278038024902
    6. '   ' → logprob: -4.07562780380249
    7. 'pending' → logprob: -4.70062780380249
    8. 'deg' → logprob: -4.82562780380249
    9. 'remaining' → logprob: -5.07562780380249
    10. '#' → logprob: -5.20062780380249

Token 785: ' fixe' (ID: 111690)
  Prédit: 'from'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'from' → logprob: -0.42130598425865173
    2. ' from' → logprob: -1.6713060140609741
    3. ' #' → logprob: -3.6713058948516846
    4. ' need' → logprob: -4.296306133270264
    5. ' queue' → logprob: -4.296306133270264
    6. 'queue' → logprob: -4.421306133270264
    7. ' continue' → logprob: -4.546306133270264
    8. ' for' → logprob: -4.671306133270264
    9. ' vais' → logprob: -4.796306133270264
    10. 'for' → logprob: -4.921306133270264

Token 786: ' dp' (ID: 21546)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.9790174961090088
    2. ' un' → logprob: -2.479017496109009
    3. ')' → logprob: -2.854017496109009
    4. ' for' → logprob: -2.854017496109009
    5. ' le' → logprob: -2.854017496109009
    6. 'def' → logprob: -2.979017496109009
    7. ' l' → logprob: -2.979017496109009
    8. ' les' → logprob: -3.104017496109009
    9. 'le' → logprob: -3.229017496109009
    10. '   ' → logprob: -3.354017496109009

Token 787: '[n' (ID: 15433)
  Prédit: '[node'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[node' → logprob: -0.05137583240866661
    2. '<|end|>' → logprob: -3.9263758659362793
    3. '[u' → logprob: -4.426375865936279
    4. ' =' → logprob: -5.551375865936279
    5. '[' → logprob: -5.676375865936279
    6. '[user' → logprob: -6.176375865936279
    7. '[next' → logprob: -6.676375865936279
    8. ')' → logprob: -6.926375865936279
    9. ',' → logprob: -7.051375865936279
    10. '[player' → logprob: -7.176375865936279

Token 788: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.01926577463746071
    2. '[n' → logprob: -4.644265651702881
    3. ']=' → logprob: -5.644265651702881
    4. '])' → logprob: -6.394265651702881
    5. ')' → logprob: -6.894265651702881
    6. ']
' → logprob: -7.144265651702881
    7. ']==' → logprob: -7.894265651702881
    8. '[node' → logprob: -7.894265651702881
    9. '-' → logprob: -8.394266128540039
    10. '[' → logprob: -8.519266128540039

Token 789: ' =' (ID: 314)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.260961890220642
    2. ' =' → logprob: -1.260961890220642
    3. '
' → logprob: -1.510961890220642
    4. '=' → logprob: -2.5109620094299316
    5. 'queue' → logprob: -4.010962009429932
    6. ',' → logprob: -4.135962009429932
    7. 'visited' → logprob: -4.385962009429932
    8. ')' → logprob: -4.635962009429932
    9. ']' → logprob: -4.760962009429932
    10. '    
' → logprob: -4.760962009429932

Token 790: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.4855663721391466e-05
    2. ' ' → logprob: -11.125015258789062
    3. '   ' → logprob: -19.125015258789062
    4. ' ' → logprob: -19.875015258789062
    5. '  ' → logprob: -19.875015258789062
    6. '۰' → logprob: -20.500015258789062
    7. '```' → logprob: -21.500015258789062
    8. '[' → logprob: -21.625015258789062
    9. '=' → logprob: -22.250015258789062
    10. '`' → logprob: -22.625015258789062

Token 791: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.318681188422488e-05
    2. ' ' → logprob: -11.25001335144043
    3. '   ' → logprob: -16.87501335144043
    4. '۰' → logprob: -17.50001335144043
    5. ' ' → logprob: -18.06251335144043
    6. '  ' → logprob: -18.75001335144043
    7. '[' → logprob: -18.81251335144043
    8. '```' → logprob: -19.06251335144043
    9. 'O' → logprob: -19.56251335144043
    10. '=' → logprob: -20.12501335144043

Token 792: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.34511277079582214
    2. '
' → logprob: -1.3451128005981445
    3. ' for' → logprob: -4.3451128005981445
    4. 'for' → logprob: -4.4701128005981445
    5. '    
' → logprob: -6.2201128005981445
    6. ')' → logprob: -6.9701128005981445
    7. 'from' → logprob: -7.0951128005981445
    8. ' queue' → logprob: -7.8451128005981445
    9. '  
' → logprob: -8.095112800598145
    10. 'queue' → logprob: -8.095112800598145

Token 793: ' puis' (ID: 18766)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.0850087404251099
    2. 'queue' → logprob: -1.3350087404251099
    3. '   ' → logprob: -1.7100087404251099
    4. ' queue' → logprob: -2.2100086212158203
    5. ' for' → logprob: -2.5850086212158203
    6. '
' → logprob: -4.33500862121582
    7. ' and' → logprob: -5.71000862121582
    8. '    
' → logprob: -6.08500862121582
    9. ' ' → logprob: -6.46000862121582
    10. '#' → logprob: -6.96000862121582

Token 794: ' on' (ID: 402)
  Prédit: 'queue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'queue' → logprob: -0.08238072693347931
    2. 'from' → logprob: -3.082380771636963
    3. '   ' → logprob: -4.207380771636963
    4. 'for' → logprob: -4.207380771636963
    5. 'changed' → logprob: -7.082380771636963
    6. 'import' → logprob: -7.707380771636963
    7. 'deque' → logprob: -7.707380771636963
    8. ' queue' → logprob: -8.082380294799805
    9. ' ' → logprob: -8.582380294799805
    10. 'que' → logprob: -8.582380294799805

Token 795: ' boucle' (ID: 174211)
  Prédit: 'from'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'from' → logprob: -0.0444556400179863
    2. 'queue' → logprob: -3.2944555282592773
    3. ' from' → logprob: -5.919455528259277
    4. 'import' → logprob: -6.169455528259277
    5. '```' → logprob: -7.919455528259277
    6. 'deque' → logprob: -8.669455528259277
    7. 'while' → logprob: -8.794455528259277
    8. ' queue' → logprob: -8.794455528259277
    9. 'enqueue' → logprob: -8.794455528259277
    10. 'queues' → logprob: -9.044455528259277

Token 796: ' jusqu' (ID: 21961)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.25882360339164734
    2. ':' → logprob: -1.8838236331939697
    3. ' over' → logprob: -4.008823394775391
    4. 'for' → logprob: -4.258823394775391
    5. ' for' → logprob: -4.633823394775391
    6. ' ' → logprob: -5.258823394775391
    7. '
' → logprob: -5.383823394775391
    8. '  ' → logprob: -5.633823394775391
    9. 'while' → logprob: -5.633823394775391
    10. '    ' → logprob: -5.883823394775391

Token 797: ''à' (ID: 33688)
  Prédit: ''à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''à' → logprob: -0.001111639547161758
    2. '’à' → logprob: -6.8761115074157715
    3. ''au' → logprob: -9.87611198425293
    4. ''a' → logprob: -11.37611198425293
    5. 'à' → logprob: -11.50111198425293
    6. ''' → logprob: -12.62611198425293
    7. ' à' → logprob: -13.25111198425293
    8. 'a' → logprob: -14.75111198425293
    9. 'au' → logprob: -16.37611198425293
    10. '   ' → logprob: -16.37611198425293

Token 798: ' convergence' (ID: 99389)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.39726486802101135
    2. 'stable' → logprob: -1.897264838218689
    3. ' True' → logprob: -2.5222649574279785
    4. 'st' → logprob: -4.1472649574279785
    5. 'con' → logprob: -4.3972649574279785
    6. 'False' → logprob: -4.5222649574279785
    7. 'not' → logprob: -4.6472649574279785
    8. 'ce' → logprob: -4.6472649574279785
    9. ' convergence' → logprob: -4.6472649574279785
    10. ' ce' → logprob: -4.7722649574279785

Token 799: '.

' (ID: 364)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.48148077726364136
    2. '   ' → logprob: -1.4814808368682861
    3. '
' → logprob: -1.9814808368682861
    4. ':
' → logprob: -4.981480598449707
    5. '  
' → logprob: -5.606480598449707
    6. '    
' → logprob: -6.231480598449707
    7. 'while' → logprob: -6.231480598449707
    8. ' while' → logprob: -7.356480598449707
    9. '   
' → logprob: -7.356480598449707
    10. ' 
' → logprob: -8.481480598449707

Token 800: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.044501472264528275
    2. '
' → logprob: -3.544501543045044
    3. '    
' → logprob: -5.169501304626465
    4. 'while' → logprob: -5.169501304626465
    5. ' while' → logprob: -5.919501304626465
    6. ' 
' → logprob: -8.794501304626465
    7. '  
' → logprob: -8.919501304626465
    8. '    ' → logprob: -9.169501304626465
    9. '   
' → logprob: -10.044501304626465
    10. '```' → logprob: -10.169501304626465

Token 801: ' changed' (ID: 9180)
  Prédit: 'changed'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'changed' (adapté à ' changed') → logprob: -0.2647797763347626
    2. 'while' → logprob: -1.764779806137085
    3. '   ' → logprob: -3.014779806137085
    4. 'queue' → logprob: -5.139779567718506
    5. 'updated' → logprob: -5.639779567718506
    6. ' changed' → logprob: -6.764779567718506
    7. 'change' → logprob: -7.014779567718506
    8. 'from' → logprob: -7.514779567718506
    9. '    
' → logprob: -9.014780044555664
    10. '
' → logprob: -9.389780044555664

Token 802: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0031905474606901407
    2. '=' → logprob: -5.753190517425537
    3. '=True' → logprob: -11.503190994262695
    4. ':' → logprob: -13.503190994262695
    5. ' ' → logprob: -14.003190994262695
    6. ',' → logprob: -16.128190994262695
    7. ' ' → logprob: -16.253190994262695
    8. '  ' → logprob: -16.378190994262695
    9. '=False' → logprob: -16.628190994262695
    10. '   ' → logprob: -17.003190994262695

Token 803: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -7.493430894101039e-05
    2. ' True' → logprob: -9.500075340270996
    3. 'true' → logprob: -21.62507438659668
    4. '=True' → logprob: -22.37507438659668
    5. '(True' → logprob: -22.75007438659668
    6. 'Tr' → logprob: -23.50007438659668
    7. 'False' → logprob: -25.37507438659668
    8. '   ' → logprob: -25.37507438659668
    9. ' ' → logprob: -25.50007438659668
    10. ' ' → logprob: -25.50007438659668

Token 804: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6036752462387085
    2. '
' → logprob: -0.8536752462387085
    3. 'while' → logprob: -4.228675365447998
    4. ' while' → logprob: -5.478675365447998
    5. '\n' → logprob: -5.853675365447998
    6. '    
' → logprob: -5.853675365447998
    7. '	while' → logprob: -6.853675365447998
    8. ':' → logprob: -7.228675365447998
    9. '<|end|>' → logprob: -8.35367488861084
    10. '  
' → logprob: -8.47867488861084

Token 805: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.39517080783843994
    2. 'while' → logprob: -1.77017080783844
    3. '
' → logprob: -2.1451706886291504
    4. ' while' → logprob: -3.5201706886291504
    5. '    
' → logprob: -5.52017068862915
    6. '\n' → logprob: -6.14517068862915
    7. '	while' → logprob: -7.02017068862915
    8. ':' → logprob: -7.39517068862915
    9. ',' → logprob: -7.77017068862915
    10. ' 
' → logprob: -8.145171165466309

Token 806: ' while' (ID: 2049)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' (adapté à ' while') → logprob: -0.000808082812000066
    2. '   ' → logprob: -7.250808238983154
    3. ' while' → logprob: -9.250807762145996
    4. '	while' → logprob: -13.625807762145996
    5. '
' → logprob: -14.250807762145996
    6. '    
' → logprob: -16.500808715820312
    7. '```' → logprob: -17.625808715820312
    8. '  ' → logprob: -18.375808715820312
    9. 'While' → logprob: -19.375808715820312
    10. 'from' → logprob: -19.750808715820312

Token 807: ' changed' (ID: 9180)
  Prédit: 'changed'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'changed' → logprob: -0.31326204538345337
    2. ' changed' → logprob: -1.3132619857788086
    3. '_changed' → logprob: -16.563262939453125
    4. ' ' → logprob: -16.563262939453125
    5. ' ' → logprob: -16.813262939453125
    6. '.changed' → logprob: -17.188262939453125
    7. '   ' → logprob: -17.188262939453125
    8. 'ch' → logprob: -18.813262939453125
    9. '  ' → logprob: -18.938262939453125
    10. '
' → logprob: -19.438262939453125

Token 808: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0011749862460419536
    2. ':
' → logprob: -6.7511749267578125
    3. '=' → logprob: -12.876174926757812
    4. ' :' → logprob: -13.751174926757812
    5. '):' → logprob: -15.126174926757812
    6. '):
' → logprob: -15.626174926757812
    7. '   ' → logprob: -15.626174926757812
    8. ':
' → logprob: -15.876174926757812
    9. ':

' → logprob: -16.001174926757812
    10. ' =' → logprob: -16.501174926757812

Token 809: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.10026588290929794
    2. '   ' → logprob: -2.3502659797668457
    3. '    
' → logprob: -11.475265502929688
    4. '	   ' → logprob: -11.600265502929688
    5. '        
' → logprob: -11.975265502929688
    6. '     ' → logprob: -11.975265502929688
    7. '```' → logprob: -11.975265502929688
    8. '    ' → logprob: -12.475265502929688
    9. '<|end|>' → logprob: -12.600265502929688
    10. '           ' → logprob: -12.600265502929688

Token 810: ' changed' (ID: 9180)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6961386203765869
    2. 'changed' (adapté à ' changed') → logprob: -0.6961386203765869
    3. ' changed' → logprob: -6.071138381958008
    4. '       ' → logprob: -7.321138381958008
    5. '	' → logprob: -12.071138381958008
    6. '.changed' → logprob: -12.321138381958008
    7. '_changed' → logprob: -13.446138381958008
    8. '   ' → logprob: -13.446138381958008
    9. '
' → logprob: -13.946138381958008
    10. '    
' → logprob: -14.696138381958008

Token 811: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.4740793704986572
    2. ' =' → logprob: -0.9740793704986572
    3. '   ' → logprob: -13.849079132080078
    4. ' ' → logprob: -13.849079132080078
    5. '  ' → logprob: -15.224079132080078
    6. ',' → logprob: -15.974079132080078
    7. '=False' → logprob: -16.224079132080078
    8. ':' → logprob: -17.724079132080078
    9. '	' → logprob: -17.974079132080078
    10. '＝' → logprob: -17.974079132080078

Token 812: ' False' (ID: 7983)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'False' → logprob: -0.00317783304490149
    2. ' False' → logprob: -5.753177642822266
    3. 'True' → logprob: -15.878177642822266
    4. 'false' → logprob: -20.878177642822266
    5. ' True' → logprob: -22.003177642822266
    6. '   ' → logprob: -22.753177642822266
    7. '(False' → logprob: -22.878177642822266
    8. '=False' → logprob: -23.128177642822266
    9. '_false' → logprob: -23.128177642822266
    10. '0' → logprob: -25.003177642822266

Token 813: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.023979226127266884
    2. '   ' → logprob: -4.148979187011719
    3. ' for' → logprob: -5.773979187011719
    4. 'for' → logprob: -5.898979187011719
    5. '
' → logprob: -6.273979187011719
    6. '        
' → logprob: -8.898979187011719
    7. '    
' → logprob: -10.648979187011719
    8. '           ' → logprob: -12.523979187011719
    9. '  
' → logprob: -12.523979187011719
    10. '     ' → logprob: -13.148979187011719

Token 814: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.010900197550654411
    2. 'for' → logprob: -5.135900020599365
    3. '   ' → logprob: -5.385900020599365
    4. ' for' → logprob: -7.885900020599365
    5. '	for' → logprob: -14.010900497436523
    6. '
' → logprob: -14.885900497436523
    7. '        
' → logprob: -15.135900497436523
    8. '	   ' → logprob: -15.260900497436523
    9. '	' → logprob: -15.510900497436523
    10. ' ' → logprob: -16.135900497436523

Token 815: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.0010113727767020464
    2. '       ' → logprob: -7.001011371612549
    3. ' for' → logprob: -9.251011848449707
    4. '   ' → logprob: -12.501011848449707
    5. '	for' → logprob: -15.751011848449707
    6. '        
' → logprob: -19.62601089477539
    7. ' ' → logprob: -20.37601089477539
    8. '           ' → logprob: -20.50101089477539
    9. '```' → logprob: -20.62601089477539
    10. '      ' → logprob: -21.62601089477539

Token 816: ' node' (ID: 4596)
  Prédit: 'node'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'node' → logprob: -0.24415014684200287
    2. ' node' → logprob: -1.744150161743164
    3. 'u' → logprob: -3.244150161743164
    4. ' u' → logprob: -5.869150161743164
    5. 'v' → logprob: -11.869150161743164
    6. ' v' → logprob: -13.744150161743164
    7. 'i' → logprob: -15.119150161743164
    8. 'current' → logprob: -15.619150161743164
    9. '	node' → logprob: -15.619150161743164
    10. 'state' → logprob: -16.369150161743164

Token 817: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0040799472481012344
    2. 'in' → logprob: -5.504079818725586
    3. ' ' → logprob: -14.129079818725586
    4. '	in' → logprob: -15.504079818725586
    5. '   ' → logprob: -16.004079818725586
    6. '1' → logprob: -16.254079818725586
    7. '```' → logprob: -16.879079818725586
    8. 'from' → logprob: -16.879079818725586
    9. 'import' → logprob: -17.004079818725586
    10. 'd' → logprob: -17.129079818725586

Token 818: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.0001234428636962548
    2. ' range' → logprob: -9.000123023986816
    3. '1' → logprob: -18.500123977661133
    4. '(range' → logprob: -19.000123977661133
    5. '   ' → logprob: -20.250123977661133
    6. '```' → logprob: -20.375123977661133
    7. '	range' → logprob: -21.125123977661133
    8. 'rang' → logprob: -21.625123977661133
    9. 'Range' → logprob: -21.750123977661133
    10. ' ' → logprob: -21.750123977661133

Token 819: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.06235382333397865
    2. '1' → logprob: -2.8123538494110107
    3. '(n' → logprob: -7.937353610992432
    4. 'n' → logprob: -10.68735408782959
    5. '   ' → logprob: -12.43735408782959
    6. ' ' → logprob: -13.43735408782959
    7. ' (' → logprob: -14.56235408782959
    8. ',n' → logprob: -16.187353134155273
    9. '(
' → logprob: -16.937353134155273
    10. ',' → logprob: -17.062353134155273

Token 820: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.001704102149233222
    2. 'n' → logprob: -6.376704216003418
    3. '   ' → logprob: -14.001704216003418
    4. ' ' → logprob: -14.126704216003418
    5. ' n' → logprob: -16.0017032623291
    6. '0' → logprob: -16.8767032623291
    7. '```' → logprob: -17.2517032623291
    8. '
' → logprob: -17.5017032623291
    9. '2' → logprob: -18.5017032623291
    10. ',n' → logprob: -18.8767032623291

Token 821: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.018576201051473618
    2. ',n' → logprob: -4.018576145172119
    3. ' ,' → logprob: -7.768576145172119
    4. 'n' → logprob: -13.893576622009277
    5. '   ' → logprob: -13.893576622009277
    6. '1' → logprob: -14.393576622009277
    7. ',
' → logprob: -14.393576622009277
    8. ',num' → logprob: -16.39357566833496
    9. ',next' → logprob: -17.01857566833496
    10. ',len' → logprob: -17.14357566833496

Token 822: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -5.512236498361744e-07
    2. ' n' → logprob: -14.500000953674316
    3. '
' → logprob: -19.75
    4. '	n' → logprob: -20.25
    5. '   ' → logprob: -20.625
    6. '­n' → logprob: -24.375
    7. ')n' → logprob: -24.875
    8. '

' → logprob: -25.0
    9. '```' → logprob: -25.25
    10. ',n' → logprob: -25.375

Token 823: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.0011714138090610504
    2. ' +' → logprob: -6.751171588897705
    3. '+
' → logprob: -14.001171112060547
    4. '):
' → logprob: -15.501171112060547
    5. '+n' → logprob: -16.751171112060547
    6. '1' → logprob: -17.251171112060547
    7. '   ' → logprob: -17.876171112060547
    8. '()+' → logprob: -17.876171112060547
    9. '
' → logprob: -18.126171112060547
    10. '＋' → logprob: -18.501171112060547

Token 824: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.03083082288503647
    2. 'n' → logprob: -3.5308308601379395
    3. '+' → logprob: -6.9058308601379395
    4. '   ' → logprob: -9.655830383300781
    5. ' n' → logprob: -12.405830383300781
    6. ' ' → logprob: -12.780830383300781
    7. '       ' → logprob: -12.905830383300781
    8. '```' → logprob: -13.530830383300781
    9. '           ' → logprob: -14.155830383300781
    10. ')' → logprob: -14.280830383300781

Token 825: '):
' (ID: 1883)
  Prédit: '):
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.12731274962425232
    2. '):' → logprob: -2.127312660217285
    3. ':' → logprob: -8.502312660217285
    4. '           ' → logprob: -9.502312660217285
    5. '       ' → logprob: -9.627312660217285
    6. '):
' → logprob: -11.252312660217285
    7. ':
' → logprob: -11.377312660217285
    8. ')' → logprob: -11.752312660217285
    9. ' ):
' → logprob: -12.377312660217285
    10. '   ' → logprob: -12.877312660217285

Token 826: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0005978313274681568
    2. ':' → logprob: -8.125597953796387
    3. ' if' → logprob: -8.500597953796387
    4. '            
' → logprob: -11.000597953796387
    5. '               ' → logprob: -11.125597953796387
    6. '	       ' → logprob: -11.250597953796387
    7. '       ' → logprob: -11.625597953796387
    8. '          ' → logprob: -12.000597953796387
    9. '   ' → logprob: -12.125597953796387
    10. ' :' → logprob: -12.375597953796387

Token 827: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.16249535977840424
    2. ' if' → logprob: -1.9124953746795654
    3. '           ' → logprob: -6.162495136260986
    4. '               ' → logprob: -8.787495613098145
    5. 'min' → logprob: -12.662495613098145
    6. '   ' → logprob: -13.412495613098145
    7. 'for' → logprob: -13.537495613098145
    8. '       ' → logprob: -14.287495613098145
    9. '
' → logprob: -14.412495613098145
    10. ' min' → logprob: -14.537495613098145

Token 828: ' node' (ID: 4596)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dp' → logprob: -0.013039158657193184
    2. 'node' → logprob: -4.5130391120910645
    3. ' dp' → logprob: -6.2630391120910645
    4. ' node' → logprob: -9.513039588928223
    5. '   ' → logprob: -12.013039588928223
    6. '	dp' → logprob: -13.388039588928223
    7. '(dp' → logprob: -14.763039588928223
    8. ' ' → logprob: -14.888039588928223
    9. '  ' → logprob: -14.888039588928223
    10. '       ' → logprob: -15.388039588928223

Token 829: ' ==' (ID: 951)
  Prédit: ' !='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' !=' → logprob: -0.6519603133201599
    2. ' ==' → logprob: -1.4019603729248047
    3. '!=' → logprob: -2.1519603729248047
    4. '==' → logprob: -2.1519603729248047
    5. '   ' → logprob: -9.401960372924805
    6. ')' → logprob: -9.526960372924805
    7. ']' → logprob: -10.401960372924805
    8. ']==' → logprob: -10.401960372924805
    9. ']!=' → logprob: -10.526960372924805
    10. '=' → logprob: -11.151960372924805

Token 830: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.0024779161904007196
    2. ' n' → logprob: -6.002478122711182
    3. ' ' → logprob: -13.502477645874023
    4. '   ' → logprob: -14.877477645874023
    5. '	n' → logprob: -15.252477645874023
    6. '
' → logprob: -16.752477645874023
    7. '0' → logprob: -17.252477645874023
    8. '  ' → logprob: -17.252477645874023
    9. '```' → logprob: -17.377477645874023
    10. '    ' → logprob: -18.377477645874023

Token 831: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.2569775879383087
    2. ':
' → logprob: -1.5069775581359863
    3. '               ' → logprob: -5.756977558135986
    4. ' or' → logprob: -6.756977558135986
    5. '           ' → logprob: -8.631978034973145
    6. 'continue' → logprob: -8.631978034973145
    7. ':return' → logprob: -8.756978034973145
    8. ' continue' → logprob: -9.506978034973145
    9. 'or' → logprob: -10.381978034973145
    10. '       ' → logprob: -11.131978034973145

Token 832: ' continue' (ID: 4901)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.04178597405552864
    2. ' continue' → logprob: -3.791785955429077
    3. 'continue' → logprob: -4.041786193847656
    4. '           ' → logprob: -7.666786193847656
    5. '	continue' → logprob: -9.041786193847656
    6. '	           ' → logprob: -9.166786193847656
    7. '   ' → logprob: -10.791786193847656
    8. '
' → logprob: -10.916786193847656
    9. '       ' → logprob: -11.041786193847656
    10. '		       ' → logprob: -11.166786193847656

Token 833: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.011645406484603882
    2. '       ' → logprob: -5.261645317077637
    3. '
' → logprob: -5.511645317077637
    4. '            
' → logprob: -6.761645317077637
    5. '               ' → logprob: -8.011645317077637
    6. '        
' → logprob: -8.261645317077637
    7. '  
' → logprob: -9.011645317077637
    8. '    
' → logprob: -9.761645317077637
    9. ' 
' → logprob: -9.886645317077637
    10. '<|end|>' → logprob: -10.136645317077637

Token 834: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.010509109124541283
    2. '
' → logprob: -5.135509014129639
    3. '       ' → logprob: -5.635509014129639
    4. '            
' → logprob: -8.135509490966797
    5. '        
' → logprob: -8.385509490966797
    6. '    
' → logprob: -8.760509490966797
    7. ' for' → logprob: -9.385509490966797
    8. ' 
' → logprob: -10.260509490966797
    9. '               ' → logprob: -10.510509490966797
    10. '```' → logprob: -10.635509490966797

Token 835: ' #' (ID: 1069)
  Prédit: 'possible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'possible' → logprob: -1.0454350709915161
    2. 'min' → logprob: -1.1704350709915161
    3. 'for' → logprob: -1.7954350709915161
    4. 'if' → logprob: -3.2954349517822266
    5. ' min' → logprob: -3.5454349517822266
    6. 'all' → logprob: -3.6704349517822266
    7. '           ' → logprob: -3.9204349517822266
    8. 'can' → logprob: -4.045434951782227
    9. ' for' → logprob: -5.045434951782227
    10. ' possible' → logprob: -5.170434951782227

Token 836: ' On' (ID: 2160)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.9896877408027649
    2. 'min' → logprob: -1.1146876811981201
    3. 'possible' → logprob: -1.6146876811981201
    4. 'for' → logprob: -3.23968768119812
    5. 'can' → logprob: -3.23968768119812
    6. '           ' → logprob: -4.739687919616699
    7. 'all' → logprob: -5.614687919616699
    8. 'options' → logprob: -6.364687919616699
    9. 'next' → logprob: -6.739687919616699
    10. 'valid' → logprob: -6.864687919616699

Token 837: ' veut' (ID: 41653)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -1.3141367435455322
    2. 'for' → logprob: -1.5641367435455322
    3. ' for' → logprob: -1.9391367435455322
    4. '           ' → logprob: -2.6891367435455322
    5. 'possible' → logprob: -2.9391367435455322
    6. ' can' → logprob: -3.0641367435455322
    7. ' =' → logprob: -3.1891367435455322
    8. ' possible' → logprob: -3.6891367435455322
    9. ' if' → logprob: -4.314136505126953
    10. 'if' → logprob: -4.439136505126953

Token 838: ' vérifier' (ID: 93671)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.5807151198387146
    2. 'tr' → logprob: -1.3307151794433594
    3. ' trouver' → logprob: -2.2057151794433594
    4. 'dp' → logprob: -3.7057151794433594
    5. ' min' → logprob: -3.9557151794433594
    6. ' dp' → logprob: -5.330715179443359
    7. 'find' → logprob: -5.455715179443359
    8. 'val' → logprob: -6.080715179443359
    9. 'voir' → logprob: -6.205715179443359
    10. '   ' → logprob: -6.705715179443359

Token 839: ' si' (ID: 1784)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.4363662898540497
    2. 'if' → logprob: -1.061366319656372
    3. 'all' → logprob: -5.561366081237793
    4. ' si' → logprob: -6.811366081237793
    5. '           ' → logprob: -7.061366081237793
    6. 'possible' → logprob: -7.561366081237793
    7. '   ' → logprob: -8.186366081237793
    8. ' all' → logprob: -8.686366081237793
    9. 'for' → logprob: -9.061366081237793
    10. ' whether' → logprob: -9.061366081237793

Token 840: ' on' (ID: 402)
  Prédit: ' all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' all' → logprob: -0.24670349061489105
    2. ' any' → logprob: -1.7467035055160522
    3. ' dp' → logprob: -3.9967033863067627
    4. 'all' → logprob: -4.121703624725342
    5. 'any' → logprob: -4.996703624725342
    6. 'dp' → logprob: -5.871703624725342
    7. ' True' → logprob: -10.996703147888184
    8. ' node' → logprob: -11.496703147888184
    9. '(dp' → logprob: -11.621703147888184
    10. ')' → logprob: -11.871703147888184

Token 841: ' peut' (ID: 9216)
  Prédit: ' peut'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' peut' → logprob: -0.8035448789596558
    2. ' peux' → logprob: -1.0535448789596558
    3. 'pe' → logprob: -1.6785448789596558
    4. ' can' → logprob: -5.178544998168945
    5. 'can' → logprob: -5.303544998168945
    6. 'est' → logprob: -6.678544998168945
    7. ' pe' → logprob: -6.803544998168945
    8. ' a' → logprob: -7.303544998168945
    9. ' peu' → logprob: -7.428544998168945
    10. '           ' → logprob: -7.928544998168945

Token 842: ' garantir' (ID: 48328)
  Prédit: ' trouver'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' trouver' → logprob: -0.29979339241981506
    2. ' atteindre' → logprob: -2.7997934818267822
    3. ' choisir' → logprob: -3.0497934818267822
    4. 'min' → logprob: -3.6747934818267822
    5. ' find' → logprob: -4.299793243408203
    6. ' at' → logprob: -4.299793243408203
    7. ' mettre' → logprob: -4.424793243408203
    8. ' garantir' → logprob: -4.674793243408203
    9. 'mettre' → logprob: -4.799793243408203
    10. ' for' → logprob: -4.799793243408203

Token 843: ' finir' (ID: 97022)
  Prédit: ' que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.17394337058067322
    2. ' that' → logprob: -2.548943281173706
    3. ' un' → logprob: -3.923943281173706
    4. ' for' → logprob: -4.048943519592285
    5. ' ' → logprob: -4.423943519592285
    6. 'that' → logprob: -5.173943519592285
    7. ' dp' → logprob: -5.423943519592285
    8. ' une' → logprob: -5.673943519592285
    9. '    ' → logprob: -6.048943519592285
    10. 'for' → logprob: -6.673943519592285

Token 844: '
' (ID: 198)
  Prédit: 'en'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'en' → logprob: -0.36832526326179504
    2. 'le' → logprob: -2.1183252334594727
    3. ' en' → logprob: -2.2433252334594727
    4. 'in' → logprob: -3.7433252334594727
    5. ' in' → logprob: -4.118325233459473
    6. 'la' → logprob: -4.868325233459473
    7. ' le' → logprob: -4.868325233459473
    8. 'dans' → logprob: -5.118325233459473
    9. 'les' → logprob: -5.243325233459473
    10. 'the' → logprob: -5.868325233459473

Token 845: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.014108380302786827
    2. '               ' → logprob: -5.389108180999756
    3. ' en' → logprob: -6.389108180999756
    4. '            ' → logprob: -6.639108180999756
    5. ':' → logprob: -7.014108180999756
    6. ' dans' → logprob: -7.264108180999756
    7. ' =' → logprob: -7.389108180999756
    8. ' par' → logprob: -7.514108180999756
    9. ' if' → logprob: -7.764108180999756
    10. ',' → logprob: -7.889108180999756

Token 846: ' #' (ID: 1069)
  Prédit: 'all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'all' → logprob: -1.1924101114273071
    2. 'possible' → logprob: -1.1924101114273071
    3. ' possible' → logprob: -1.6924101114273071
    4. '           ' → logprob: -3.0674099922180176
    5. ' can' → logprob: -3.3174099922180176
    6. 'can' → logprob: -3.3174099922180176
    7. ' all' → logprob: -3.4424099922180176
    8. ' choices' → logprob: -4.567409992218018
    9. ' next' → logprob: -4.817409992218018
    10. 'next' → logprob: -5.067409992218018

Token 847: ' Cela' (ID: 44403)
  Prédit: 'possible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'possible' → logprob: -0.5711082816123962
    2. ' possible' → logprob: -2.446108341217041
    3. 'can' → logprob: -2.446108341217041
    4. 'all' → logprob: -2.571108341217041
    5. ' if' → logprob: -3.321108341217041
    6. 'if' → logprob: -3.321108341217041
    7. ' can' → logprob: -3.446108341217041
    8. 'poss' → logprob: -4.071108341217041
    9. 'next' → logprob: -4.821108341217041
    10. '           ' → logprob: -5.071108341217041

Token 848: ' signifie' (ID: 81149)
  Prédit: 'possible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'possible' → logprob: -1.7601960897445679
    2. ' signifie' → logprob: -1.8851960897445679
    3. ' possible' → logprob: -2.2601962089538574
    4. ' means' → logprob: -2.7601962089538574
    5. ' peut' → logprob: -3.0101962089538574
    6. '           ' → logprob: -3.1351962089538574
    7. ' revient' → logprob: -3.1351962089538574
    8. ' can' → logprob: -3.2601962089538574
    9. ' veut' → logprob: -3.3851962089538574
    10. 'means' → logprob: -3.5101962089538574

Token 849: ':' (ID: 25)
  Prédit: ' all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' all' → logprob: -0.5235503911972046
    2. 'all' → logprob: -0.8985503911972046
    3. ' True' → logprob: -8.648550033569336
    4. '           ' → logprob: -9.523550033569336
    5. 'True' → logprob: -10.023550033569336
    6. ' that' → logprob: -10.523550033569336
    7. '               ' → logprob: -10.773550033569336
    8. 'dp' → logprob: -11.148550033569336
    9. 'possible' → logprob: -11.273550033569336
    10. ' dp' → logprob: -11.523550033569336

Token 850: ' pour' (ID: 1930)
  Prédit: ' all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' all' → logprob: -0.10960233956575394
    2. 'all' → logprob: -2.734602451324463
    3. ' dp' → logprob: -3.609602451324463
    4. ' possible' → logprob: -5.359602451324463
    5. ' can' → logprob: -6.484602451324463
    6. 'possible' → logprob: -6.734602451324463
    7. ' for' → logprob: -6.859602451324463
    8. 'dp' → logprob: -6.859602451324463
    9. ' if' → logprob: -6.984602451324463
    10. ' reachable' → logprob: -8.359601974487305

Token 851: ' T' (ID: 353)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' k' → logprob: -1.1540976762771606
    2. ' chaque' → logprob: -1.2790976762771606
    3. ' all' → logprob: -2.279097557067871
    4. 'all' → logprob: -2.404097557067871
    5. 'k' → logprob: -2.904097557067871
    6. ' tous' → logprob: -3.279097557067871
    7. ' toutes' → logprob: -3.654097557067871
    8. ' each' → logprob: -4.154097557067871
    9. 't' → logprob: -4.529097557067871
    10. 'tout' → logprob: -4.529097557067871

Token 852: ' =' (ID: 314)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -1.2580230236053467
    2. 'he' → logprob: -2.0080230236053467
    3. 'ous' → logprob: -2.2580230236053467
    4. 'okens' → logprob: -2.5080230236053467
    5. 'out' → logprob: -2.7580230236053467
    6. 'outes' → logprob: -3.1330230236053467
    7. 'sets' → logprob: -3.3830230236053467
    8. ' sets' → logprob: -3.5080230236053467
    9. 'oken' → logprob: -3.6330230236053467
    10. ' in' → logprob: -4.008023262023926

Token 853: ' ' (ID: 220)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.6967781186103821
    2. '0' → logprob: -1.9467780590057373
    3. 'all' → logprob: -2.4467780590057373
    4. 'k' → logprob: -2.4467780590057373
    5. 't' → logprob: -2.5717780590057373
    6. ' True' → logprob: -3.6967780590057373
    7. 'step' → logprob: -4.571778297424316
    8. 'range' → logprob: -4.571778297424316
    9. 'False' → logprob: -4.696778297424316
    10. ' all' → logprob: -4.821778297424316

Token 854: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.4521232545375824
    2. 'all' → logprob: -2.3271231651306152
    3. 'k' → logprob: -2.4521231651306152
    4. 'True' → logprob: -2.5771231651306152
    5. 'sets' → logprob: -3.7021231651306152
    6. 'range' → logprob: -4.077123165130615
    7. 'set' → logprob: -4.202123165130615
    8. 't' → logprob: -4.702123165130615
    9. 'dp' → logprob: -4.702123165130615
    10. 'False' → logprob: -4.702123165130615

Token 855: ' +' (ID: 659)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.1362895965576172
    2. ':' → logprob: -3.136289596557617
    3. ' in' → logprob: -3.636289596557617
    4. ' if' → logprob: -4.636289596557617
    5. ' ,' → logprob: -4.636289596557617
    6. ' ' → logprob: -4.761289596557617
    7. '3' → logprob: -4.886289596557617
    8. '
' → logprob: -5.511289596557617
    9. '0' → logprob: -6.386289596557617
    10. '  ' → logprob: -6.636289596557617

Token 856: ' max' (ID: 2999)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.39786458015441895
    2. 'dp' → logprob: -1.772864580154419
    3. 'max' → logprob: -2.397864580154419
    4. ' min' → logprob: -2.897864580154419
    5. ' max' → logprob: -5.14786434173584
    6. ' dp' → logprob: -5.77286434173584
    7. 'INF' → logprob: -6.27286434173584
    8. 'all' → logprob: -8.27286434173584
    9. 'inf' → logprob: -8.52286434173584
    10. '   ' → logprob: -8.64786434173584

Token 857: '_{' (ID: 22305)
  Prédit: '(dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(dp' → logprob: -0.26801154017448425
    2. '(' → logprob: -1.5180115699768066
    3. '([' → logprob: -4.893011569976807
    4. '(
' → logprob: -5.018011569976807
    5. '((' → logprob: -7.518011569976807
    6. 'dp' → logprob: -7.643011569976807
    7. '(k' → logprob: -7.643011569976807
    8. '_dp' → logprob: -10.018011093139648
    9. '(`' → logprob: -10.268011093139648
    10. ' (' → logprob: -10.268011093139648

Token 858: 'for' (ID: 1938)
  Prédit: 'g'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'g' → logprob: -0.7134110331535339
    2. 'graph' → logprob: -1.4634110927581787
    3. 'k' → logprob: -2.3384110927581787
    4. 'range' → logprob: -2.3384110927581787
    5. 'kg' → logprob: -4.0884108543396
    6. 'i' → logprob: -4.2134108543396
    7. 'idx' → logprob: -4.3384108543396
    8. ' g' → logprob: -4.9634108543396
    9. 'next' → logprob: -5.7134108543396
    10. ' graph' → logprob: -6.2134108543396

Token 859: ' advers' (ID: 33091)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.40880388021469116
    2. ' k' → logprob: -1.783803939819336
    3. ' s' → logprob: -2.658803939819336
    4. 's' → logprob: -3.033803939819336
    5. 'sets' → logprob: -4.408803939819336
    6. 'all' → logprob: -4.408803939819336
    7. ' all' → logprob: -4.658803939819336
    8. 'S' → logprob: -5.908803939819336
    9. ' sets' → logprob: -6.283803939819336
    10. '_k' → logprob: -6.658803939819336

Token 860: 'ary' (ID: 815)
  Prédit: 'aire'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'aire' → logprob: -0.1587553322315216
    2. 'ary' → logprob: -3.533755302429199
    3. 'aires' → logprob: -3.533755302429199
    4. 'a' → logprob: -3.908755302429199
    5. 'aise' → logprob: -4.158755302429199
    6. 'sa' → logprob: -5.158755302429199
    7. 's' → logprob: -5.658755302429199
    8. 'se' → logprob: -5.658755302429199
    9. 'arial' → logprob: -5.658755302429199
    10. '```' → logprob: -5.658755302429199

Token 861: ''s' (ID: 885)
  Prédit: '_choices'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_choices' → logprob: -1.1978896856307983
    2. '_choice' → logprob: -2.072889804840088
    3. 'k' → logprob: -2.197889804840088
    4. 's' → logprob: -2.572889804840088
    5. '}' → logprob: -2.572889804840088
    6. ''s' → logprob: -2.822889804840088
    7. 'choices' → logprob: -2.947889804840088
    8. 'choice' → logprob: -3.322889804840088
    9. '_sets' → logprob: -4.197889804840088
    10. '}{' → logprob: -4.322889804840088

Token 862: ' choice' (ID: 7158)
  Prédit: 'choice'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'choice' → logprob: -1.127698540687561
    2. '_choice' → logprob: -1.502698540687561
    3. 'choices' → logprob: -1.752698540687561
    4. ' choice' → logprob: -2.0026984214782715
    5. '_choices' → logprob: -2.6276984214782715
    6. ' choices' → logprob: -3.2526984214782715
    7. 'k' → logprob: -4.7526984214782715
    8. 'sets' → logprob: -5.6276984214782715
    9. '}' → logprob: -5.8776984214782715
    10. '(choice' → logprob: -5.8776984214782715

Token 863: ' k' (ID: 372)
  Prédit: ' of'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' of' → logprob: -1.1550681591033936
    2. '}' → logprob: -1.4050681591033936
    3. 'k' → logprob: -1.6550681591033936
    4. 'of' → logprob: -2.6550681591033936
    5. ' k' → logprob: -3.2800681591033936
    6. '_k' → logprob: -3.5300681591033936
    7. 's' → logprob: -3.6550681591033936
    8. '}{' → logprob: -4.530068397521973
    9. '}(' → logprob: -4.780068397521973
    10. ' de' → logprob: -5.030068397521973

Token 864: '}' (ID: 92)
  Prédit: '}'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '}' → logprob: -0.12117303907871246
    2. 'in' → logprob: -3.496173143386841
    3. ' in' → logprob: -3.621173143386841
    4. '}(' → logprob: -3.621173143386841
    5. '}{' → logprob: -4.871172904968262
    6. '}[' → logprob: -4.996172904968262
    7. ' of' → logprob: -5.996172904968262
    8. 's' → logprob: -5.996172904968262
    9. 'of' → logprob: -6.246172904968262
    10. '}s' → logprob: -6.496172904968262

Token 865: ' min' (ID: 1349)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.9910640120506287
    2. ' (' → logprob: -1.6160640716552734
    3. ' dp' → logprob: -1.8660640716552734
    4. '(dp' → logprob: -1.9910640716552734
    5. ' of' → logprob: -3.1160640716552734
    6. 'dp' → logprob: -3.7410640716552734
    7. '(
' → logprob: -3.8660640716552734
    8. '   ' → logprob: -4.616064071655273
    9. ' ' → logprob: -4.866064071655273
    10. ' min' → logprob: -5.741064071655273

Token 866: '_{' (ID: 22305)
  Prédit: '_{'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_{' → logprob: -1.0482300519943237
    2. '(' → logprob: -1.4232300519943237
    3. '(dp' → logprob: -2.0482301712036133
    4. '_' → logprob: -2.2982301712036133
    5. '(
' → logprob: -2.9232301712036133
    6. '(k' → logprob: -3.1732301712036133
    7. '([' → logprob: -3.2982301712036133
    8. '_k' → logprob: -4.048230171203613
    9. '(_' → logprob: -4.923230171203613
    10. '_(' → logprob: -5.298230171203613

Token 867: 'next' (ID: 7311)
  Prédit: 'neighbor'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'neighbor' → logprob: -0.6324127316474915
    2. 'v' → logprob: -1.3824126720428467
    3. 'next' → logprob: -1.7574126720428467
    4. 'nei' → logprob: -4.132412910461426
    5. 'ne' → logprob: -4.257412910461426
    6. 'succ' → logprob: -5.507412910461426
    7. 'nbr' → logprob: -5.632412910461426
    8. 'node' → logprob: -6.757412910461426
    9. 'dest' → logprob: -6.882412910461426
    10. 'n' → logprob: -7.132412910461426

Token 868: ' nodes' (ID: 15749)
  Prédit: '_node'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_node' → logprob: -0.2837306261062622
    2. '_' → logprob: -1.6587306261062622
    3. '_nodes' → logprob: -3.9087305068969727
    4. ' in' → logprob: -4.408730506896973
    5. 'node' → logprob: -4.783730506896973
    6. '_neighbor' → logprob: -5.033730506896973
    7. '(node' → logprob: -6.033730506896973
    8. '_in' → logprob: -6.283730506896973
    9. '}_' → logprob: -7.283730506896973
    10. '_next' → logprob: -7.533730506896973

Token 869: ' after' (ID: 1934)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.09508894383907318
    2. 'in' → logprob: -3.0950889587402344
    3. '}' → logprob: -3.5950889587402344
    4. ' of' → logprob: -4.970088958740234
    5. '_in' → logprob: -5.845088958740234
    6. ' }' → logprob: -7.095088958740234
    7. '           ' → logprob: -7.095088958740234
    8. '}(' → logprob: -7.345088958740234
    9. '}[' → logprob: -7.595088958740234
    10. '(k' → logprob: -7.595088958740234

Token 870: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.12648679316043854
    2. ' k' → logprob: -2.2514867782592773
    3. 'node' → logprob: -5.501486778259277
    4. ' node' → logprob: -5.626486778259277
    5. 'step' → logprob: -6.876486778259277
    6. ' step' → logprob: -6.876486778259277
    7. 'choice' → logprob: -6.876486778259277
    8. ' move' → logprob: -7.876486778259277
    9. ' choice' → logprob: -8.251486778259277
    10. '   ' → logprob: -8.501486778259277

Token 871: ' steps' (ID: 10331)
  Prédit: '-step'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '-step' → logprob: -1.046566367149353
    2. 'step' → logprob: -1.296566367149353
    3. '_step' → logprob: -1.796566367149353
    4. '}' → logprob: -2.1715664863586426
    5. '_graph' → logprob: -2.7965664863586426
    6. ' step' → logprob: -4.421566486358643
    7. 'graph' → logprob: -5.796566486358643
    8. '_steps' → logprob: -5.921566486358643
    9. 'steps' → logprob: -6.171566486358643
    10. ' in' → logprob: -6.171566486358643

Token 872: '}' (ID: 92)
  Prédit: '}'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '}' → logprob: -0.004069020971655846
    2. ' }' → logprob: -6.129068851470947
    3. ' in' → logprob: -7.754068851470947
    4. ')}' → logprob: -8.254069328308105
    5. '}:' → logprob: -8.754069328308105
    6. '[]}' → logprob: -8.879069328308105
    7. ')' → logprob: -9.004069328308105
    8. '           ' → logprob: -9.504069328308105
    9. '()}' → logprob: -9.629069328308105
    10. '   ' → logprob: -9.754069328308105

Token 873: ' dp' (ID: 21546)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.5948607921600342
    2. '(' → logprob: -2.594860792160034
    3. ':' → logprob: -2.719860792160034
    4. ' =' → logprob: -2.844860792160034
    5. ' in' → logprob: -2.969860792160034
    6. ' :' → logprob: -3.219860792160034
    7. ' _' → logprob: -3.969860792160034
    8. ')' → logprob: -4.469861030578613
    9. '(node' → logprob: -4.469861030578613
    10. '           ' → logprob: -4.594861030578613

Token 874: '[next' (ID: 103383)
  Prédit: '[node'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[node' → logprob: -0.024510381743311882
    2. '[' → logprob: -4.899510383605957
    3. ' =' → logprob: -5.149510383605957
    4. ')' → logprob: -6.399510383605957
    5. '           ' → logprob: -6.524510383605957
    6. '[
' → logprob: -7.024510383605957
    7. ']' → logprob: -7.024510383605957
    8. '_' → logprob: -7.524510383605957
    9. '=node' → logprob: -7.524510383605957
    10. '_candidate' → logprob: -7.649510383605957

Token 875: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']' → logprob: -0.17403823137283325
    2. '[node' → logprob: -1.9240381717681885
    3. '_node' → logprob: -5.424038410186768
    4. '_nodes' → logprob: -6.299038410186768
    5. '[' → logprob: -6.549038410186768
    6. '_]' → logprob: -6.674038410186768
    7. ')]' → logprob: -7.049038410186768
    8. '   ' → logprob: -7.924038410186768
    9. '])' → logprob: -8.17403793334961
    10. 'node' → logprob: -8.17403793334961

Token 876: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.022762004286050797
    2. ':' → logprob: -4.272761821746826
    3. '               ' → logprob: -5.647761821746826
    4. ')' → logprob: -7.272761821746826
    5. ' :' → logprob: -7.522761821746826
    6. ' =' → logprob: -7.647761821746826
    7. '):' → logprob: -7.897761821746826
    8. '                   ' → logprob: -8.147762298583984
    9. '            ' → logprob: -8.147762298583984
    10. ' ' → logprob: -8.397762298583984

Token 877: ' #' (ID: 1069)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.011244812980294228
    2. 'possible' → logprob: -6.261244773864746
    3. ' possible' → logprob: -6.511244773864746
    4. '            
' → logprob: -6.511244773864746
    5. '   ' → logprob: -6.886244773864746
    6. '       ' → logprob: -7.011244773864746
    7. '               ' → logprob: -7.636244773864746
    8. ' next' → logprob: -7.886244773864746
    9. ' choices' → logprob: -8.136244773864746
    10. ' =' → logprob: -8.136244773864746

Token 878: ' En' (ID: 2130)
  Prédit: ' min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' min' → logprob: -0.7761814594268799
    2. '           ' → logprob: -1.1511814594268799
    3. 'min' → logprob: -2.77618145942688
    4. ' best' → logprob: -3.40118145942688
    5. ' possible' → logprob: -3.65118145942688
    6. 'best' → logprob: -3.77618145942688
    7. ' max' → logprob: -4.026181221008301
    8. ' candidates' → logprob: -4.901181221008301
    9. 'possible' → logprob: -4.901181221008301
    10. ' val' → logprob: -5.026181221008301

Token 879: ' d' (ID: 272)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.6581680774688721
    2. 'range' → logprob: -2.033168077468872
    3. 'def' → logprob: -2.408168077468872
    4. '#' → logprob: -3.408168077468872
    5. 't' → logprob: -3.658168077468872
    6. 'pass' → logprob: -4.158167839050293
    7. 'com' → logprob: -4.283167839050293
    8. 'suite' → logprob: -4.283167839050293
    9. 'code' → logprob: -4.533167839050293
    10. 'continue' → logprob: -4.658167839050293

Token 880: ''autres' (ID: 38753)
  Prédit: 'éf'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'éf' → logprob: -1.2526668310165405
    2. 'p' → logprob: -1.6276668310165405
    3. 'ef' → logprob: -1.7526668310165405
    4. 'range' → logprob: -2.00266695022583
    5. 'e' → logprob: -2.37766695022583
    6. 'é' → logprob: -3.25266695022583
    7. '=' → logprob: -4.50266695022583
    8. 'f' → logprob: -4.62766695022583
    9. '[node' → logprob: -5.12766695022583
    10. 'u' → logprob: -5.12766695022583

Token 881: ' termes' (ID: 72480)
  Prédit: ' mots'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' mots' → logprob: -1.792760968208313
    2. ' =' → logprob: -2.5427608489990234
    3. 'part' → logprob: -2.5427608489990234
    4. 'for' → logprob: -2.6677608489990234
    5. ' termes' → logprob: -2.6677608489990234
    6. 'words' → logprob: -3.0427608489990234
    7. 'ligne' → logprob: -3.1677608489990234
    8. '   ' → logprob: -3.2927608489990234
    9. '           ' → logprob: -3.2927608489990234
    10. '=' → logprob: -3.4177608489990234

Token 882: ',' (ID: 11)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.012784861959517002
    2. ':' → logprob: -5.637784957885742
    3. ',' → logprob: -5.762784957885742
    4. '               ' → logprob: -6.012784957885742
    5. '   ' → logprob: -7.012784957885742
    6. '       ' → logprob: -7.887784957885742
    7. '            
' → logprob: -8.137784957885742
    8. ' if' → logprob: -8.762784957885742
    9. '	       ' → logprob: -9.012784957885742
    10. ')' → logprob: -9.325284957885742

Token 883: ' on' (ID: 402)
  Prédit: ' min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' min' → logprob: -0.07138597220182419
    2. ' possible' → logprob: -3.6963858604431152
    3. 'min' → logprob: -4.196385860443115
    4. ' max' → logprob: -4.946385860443115
    5. ' best' → logprob: -5.071385860443115
    6. 'possible' → logprob: -5.696385860443115
    7. ' if' → logprob: -6.321385860443115
    8. ' minimum' → logprob: -6.446385860443115
    9. 'best' → logprob: -7.071385860443115
    10. ' val' → logprob: -7.196385860443115

Token 884: ' doit' (ID: 21822)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.9969746470451355
    2. 'continue' → logprob: -1.2469747066497803
    3. 'do' → logprob: -2.1219747066497803
    4. ' doit' → logprob: -2.8719747066497803
    5. 'for' → logprob: -3.8719747066497803
    6. ' continue' → logprob: -3.9969747066497803
    7. 'indent' → logprob: -4.121974468231201
    8. 'if' → logprob: -4.246974468231201
    9. 'must' → logprob: -4.496974468231201
    10. 'contin' → logprob: -4.746974468231201

Token 885: ' pouvoir' (ID: 27197)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'v' → logprob: -1.576216697692871
    2. 'tr' → logprob: -1.576216697692871
    3. ' vérifier' → logprob: -1.951216697692871
    4. 'p' → logprob: -2.451216697692871
    5. 'calcul' → logprob: -2.701216697692871
    6. ' trouver' → logprob: -2.826216697692871
    7. '   ' → logprob: -3.201216697692871
    8. 'min' → logprob: -3.701216697692871
    9. 'prendre' → logprob: -4.201216697692871
    10. 's' → logprob: -4.451216697692871

Token 886: ' pour' (ID: 1930)
  Prédit: ' garantir'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' garantir' → logprob: -0.24328093230724335
    2. ' trouver' → logprob: -2.3682808876037598
    3. ' assurer' → logprob: -3.3682808876037598
    4. ' choisir' → logprob: -3.8682808876037598
    5. 'prendre' → logprob: -4.86828088760376
    6. ' garant' → logprob: -4.86828088760376
    7. 'min' → logprob: -5.11828088760376
    8. '   ' → logprob: -5.24328088760376
    9. 'for' → logprob: -5.49328088760376
    10. ' for' → logprob: -5.61828088760376

Token 887: ' chaque' (ID: 21194)
  Prédit: 'all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'all' → logprob: -0.955486536026001
    2. ' all' → logprob: -1.705486536026001
    3. 'k' → logprob: -2.330486536026001
    4. ' k' → logprob: -2.580486536026001
    5. ' tous' → logprob: -3.330486536026001
    6. 'tout' → logprob: -3.330486536026001
    7. 't' → logprob: -3.705486536026001
    8. ' ' → logprob: -3.705486536026001
    9. ' chaque' → logprob: -3.830486536026001
    10. ' les' → logprob: -3.830486536026001

Token 888: ' choix' (ID: 28642)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.6286925673484802
    2. ' k' → logprob: -0.8786925673484802
    3. ' choice' → logprob: -4.253692626953125
    4. ' sets' → logprob: -4.628692626953125
    5. 'choice' → logprob: -4.878692626953125
    6. ' choix' → logprob: -5.003692626953125
    7. 'sets' → logprob: -6.128692626953125
    8. ' graph' → logprob: -6.253692626953125
    9. 'graph' → logprob: -6.253692626953125
    10. ' set' → logprob: -6.753692626953125

Token 889: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.4391530156135559
    2. 'de' → logprob: -2.564152956008911
    3. ' des' → logprob: -2.814152956008911
    4. ':' → logprob: -3.314152956008911
    5. 'possible' → logprob: -3.564152956008911
    6. 'des' → logprob: -4.18915319442749
    7. '_' → logprob: -4.18915319442749
    8. ' advers' → logprob: -4.18915319442749
    9. 'k' → logprob: -4.18915319442749
    10. ' possible' → logprob: -4.56415319442749

Token 890: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.5309767723083496
    2. 'k' → logprob: -1.0309767723083496
    3. ' sets' → logprob: -3.0309767723083496
    4. 'sets' → logprob: -5.53097677230835
    5. ' la' → logprob: -7.40597677230835
    6. ' l' → logprob: -7.53097677230835
    7. ' set' → logprob: -7.65597677230835
    8. 'set' → logprob: -8.530977249145508
    9. 'l' → logprob: -8.655977249145508
    10. ' graph' → logprob: -9.030977249145508

Token 891: ' (' (ID: 350)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.16428923606872559
    2. ' in' → logprob: -2.6642892360687256
    3. ',' → logprob: -3.2892892360687256
    4. 'in' → logprob: -4.914289474487305
    5. ':
' → logprob: -4.914289474487305
    6. ' :' → logprob: -5.289289474487305
    7. 'dans' → logprob: -5.664289474487305
    8. 's' → logprob: -5.789289474487305
    9. ' dans' → logprob: -6.164289474487305
    10. ' choisir' → logprob: -6.414289474487305

Token 892: 'a' (ID: 64)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.9124914407730103
    2. ' )' → logprob: -0.9124914407730103
    3. ' in' → logprob: -2.7874913215637207
    4. '):' → logprob: -3.1624913215637207
    5. ' ):' → logprob: -3.4124913215637207
    6. ' ' → logprob: -4.537491321563721
    7. ' k' → logprob: -4.787491321563721
    8. 'in' → logprob: -5.287491321563721
    9. '    ' → logprob: -5.287491321563721
    10. '  ' → logprob: -5.787491321563721

Token 893: ',b' (ID: 17568)
  Prédit: ',b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',b' → logprob: -0.059895772486925125
    2. ',' → logprob: -2.9348957538604736
    3. 'b' → logprob: -6.184895992279053
    4. ' ,' → logprob: -7.184895992279053
    5. '+b' → logprob: -7.684895992279053
    6. ')' → logprob: -8.059895515441895
    7. ',
' → logprob: -8.184895515441895
    8. '   ' → logprob: -8.559895515441895
    9. ',c' → logprob: -9.184895515441895
    10. ' ' → logprob: -9.434895515441895

Token 894: ',c' (ID: 22261)
  Prédit: ',c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',c' → logprob: -0.04335813224315643
    2. ',' → logprob: -3.168358087539673
    3. 'c' → logprob: -8.043357849121094
    4. ',
' → logprob: -12.168357849121094
    5. ' ,' → logprob: -12.293357849121094
    6. '),' → logprob: -12.293357849121094
    7. ',b' → logprob: -12.793357849121094
    8. ')' → logprob: -12.918357849121094
    9. ',...' → logprob: -13.293357849121094
    10. 'ou' → logprob: -13.418357849121094

Token 895: ')
' (ID: 446)
  Prédit: '),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '),' → logprob: -0.8103353381156921
    2. ')' → logprob: -0.9353353381156921
    3. '):' → logprob: -2.310335397720337
    4. '):
' → logprob: -2.935335397720337
    5. ' )' → logprob: -5.560335159301758
    6. ' ),' → logprob: -5.935335159301758
    7. '):

' → logprob: -6.560335159301758
    8. ')
' → logprob: -6.810335159301758
    9. ',' → logprob: -8.060335159301758
    10. ' ):
' → logprob: -8.185335159301758

Token 896: '           ' (ID: 352)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.907275378704071
    2. '               ' → logprob: -1.4072754383087158
    3. '           ' → logprob: -1.4072754383087158
    4. ',' → logprob: -2.532275438308716
    5. ' :' → logprob: -4.907275199890137
    6. ':
' → logprob: -5.907275199890137
    7. ' ,' → logprob: -6.157275199890137
    8. ')' → logprob: -6.407275199890137
    9. '                           ' → logprob: -6.407275199890137
    10. '            ' → logprob: -6.907275199890137

Token 897: ' #' (ID: 1069)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.3920363187789917
    2. '           ' → logprob: -1.8920363187789917
    3. '               ' → logprob: -3.0170364379882812
    4. ')' → logprob: -3.6420364379882812
    5. ' :' → logprob: -3.6420364379882812
    6. '):' → logprob: -3.7670364379882812
    7. ':
' → logprob: -3.8920364379882812
    8. ',' → logprob: -4.767036437988281
    9. '):
' → logprob: -5.392036437988281
    10. ' =' → logprob: -5.517036437988281

Token 898: ' atteindre' (ID: 95734)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.6693868637084961
    2. ' choisir' → logprob: -2.044386863708496
    3. ' possible' → logprob: -2.294386863708496
    4. 'possible' → logprob: -3.169386863708496
    5. ' #' → logprob: -3.919386863708496
    6. ':' → logprob: -4.169386863708496
    7. 'all' → logprob: -4.169386863708496
    8. ' able' → logprob: -4.169386863708496
    9. ' trouver' → logprob: -4.544386863708496
    10. '#' → logprob: -4.669386863708496

Token 899: ' un' (ID: 537)
  Prédit: ' un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.44054532051086426
    2. 'un' → logprob: -1.5655453205108643
    3. ' au' → logprob: -2.0655453205108643
    4. 'au' → logprob: -5.315545082092285
    5. ' a' → logprob: -5.690545082092285
    6. ' une' → logprob: -5.815545082092285
    7. 'a' → logprob: -5.815545082092285
    8. ' at' → logprob: -6.065545082092285
    9. 'une' → logprob: -6.940545082092285
    10. 'node' → logprob: -8.315545082092285

Token 900: ' noe' (ID: 49921)
  Prédit: ' node'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' node' → logprob: -0.50215083360672
    2. 'node' → logprob: -1.3771507740020752
    3. ' noe' → logprob: -3.002150774002075
    4. ' next' → logprob: -3.127150774002075
    5. 'next' → logprob: -3.627150774002075
    6. ' ' → logprob: -5.127151012420654
    7. 'no' → logprob: -6.377151012420654
    8. 'inf' → logprob: -6.502151012420654
    9. ' no' → logprob: -6.627151012420654
    10. ' dp' → logprob: -6.752151012420654

Token 901: 'ud' (ID: 527)
  Prédit: 'ud'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ud' → logprob: -0.004243061877787113
    2. 'd' → logprob: -5.504242897033691
    3. '```' → logprob: -9.879242897033691
    4. 'e' → logprob: -10.129242897033691
    5. 't' → logprob: -11.004242897033691
    6. 'œ' → logprob: -11.129242897033691
    7. 'u' → logprob: -11.379242897033691
    8. '\xc2' → logprob: -12.254242897033691
    9. '#' → logprob: -12.754242897033691
    10. '_' → logprob: -13.004242897033691

Token 902: ' avec' (ID: 3937)
  Prédit: ' avec'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' avec' → logprob: -0.1276719570159912
    2. ' with' → logprob: -3.252671957015991
    3. 'avec' → logprob: -3.502671957015991
    4. 'with' → logprob: -4.00267219543457
    5. ' où' → logprob: -4.62767219543457
    6. 'où' → logprob: -4.87767219543457
    7. ' ayant' → logprob: -5.50267219543457
    8. ' ' → logprob: -6.37767219543457
    9. 'ayant' → logprob: -7.00267219543457
    10. ',' → logprob: -7.25267219543457

Token 903: ' dp' (ID: 21546)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dp' → logprob: -0.018180379644036293
    2. ' dp' → logprob: -4.0181803703308105
    3. 'a' → logprob: -12.143180847167969
    4. '   ' → logprob: -12.643180847167969
    5. '	dp' → logprob: -12.768180847167969
    6. ' a' → logprob: -12.893180847167969
    7. '
' → logprob: -13.018180847167969
    8. 'd' → logprob: -13.143180847167969
    9. '```' → logprob: -13.393180847167969
    10. '(dp' → logprob: -13.643180847167969

Token 904: '[next' (ID: 103383)
  Prédit: '[next'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[next' → logprob: -0.0032109846360981464
    2. ' <' → logprob: -6.12821102142334
    3. '[node' → logprob: -7.37821102142334
    4. '<' → logprob: -8.75321102142334
    5. '[' → logprob: -9.25321102142334
    6. ' less' → logprob: -9.87821102142334
    7. '```' → logprob: -10.87821102142334
    8. '[
' → logprob: -11.12821102142334
    9. ' next' → logprob: -11.25321102142334
    10. 'next' → logprob: -11.50321102142334

Token 905: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.27256500720977783
    2. '[next' → logprob: -1.5225650072097778
    3. '[node' → logprob: -4.647564888000488
    4. ']<' → logprob: -4.772564888000488
    5. ' <' → logprob: -7.522564888000488
    6. '[' → logprob: -7.647564888000488
    7. '']' → logprob: -8.022564888000488
    8. '```' → logprob: -8.147564888000488
    9. ' ]' → logprob: -8.522564888000488
    10. '[
' → logprob: -8.897564888000488

Token 906: ' fini' (ID: 63561)
  Prédit: ' <'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.011999057605862617
    2. '<' → logprob: -5.011999130249023
    3. '<n' → logprob: -7.011999130249023
    4. '[' → logprob: -7.136999130249023
    5. '[node' → logprob: -7.386999130249023
    6. '[k' → logprob: -7.511999130249023
    7. '```' → logprob: -7.886999130249023
    8. '[next' → logprob: -8.011999130249023
    9. '[n' → logprob: -8.636999130249023
    10. '<p' → logprob: -9.011999130249023

Token 907: ',' (ID: 11)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0597362145781517
    2. '               ' → logprob: -3.6847362518310547
    3. ',' → logprob: -4.309736251831055
    4. ':' → logprob: -4.684736251831055
    5. '                   ' → logprob: -5.684736251831055
    6. ')' → logprob: -6.559736251831055
    7. '                       ' → logprob: -6.684736251831055
    8. '.' → logprob: -7.184736251831055
    9. '                           ' → logprob: -7.309736251831055
    10. ' (' → logprob: -7.809736251831055

Token 908: ' sinon' (ID: 52915)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.36409813165664673
    2. '               ' → logprob: -2.239098072052002
    3. ')' → logprob: -2.364098072052002
    4. ' and' → logprob: -3.989098072052002
    5. ',' → logprob: -4.739098072052002
    6. '...' → logprob: -4.864098072052002
    7. '.' → logprob: -5.114098072052002
    8. '<|end|>' → logprob: -5.114098072052002
    9. '            ' → logprob: -5.239098072052002
    10. '                   ' → logprob: -5.364098072052002

Token 909: ' l' (ID: 305)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' continue' → logprob: -0.8441952466964722
    2. 'continue' → logprob: -0.9691952466964722
    3. '           ' → logprob: -1.8441952466964722
    4. '               ' → logprob: -3.8441953659057617
    5. '```' → logprob: -6.219195365905762
    6. 'contin' → logprob: -6.344195365905762
    7. '                   ' → logprob: -6.594195365905762
    8. 'return' → logprob: -6.594195365905762
    9. ' return' → logprob: -6.969195365905762
    10. ' continues' → logprob: -7.469195365905762

Token 910: ''ad' (ID: 36162)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.6229804158210754
    2. 'e' → logprob: -1.2479803562164307
    3. '#' → logprob: -3.3729803562164307
    4. 'à' → logprob: -3.8729803562164307
    5. 'im' → logprob: -4.24798059463501
    6. 'continue' → logprob: -4.37298059463501
    7. 'n' → logprob: -4.74798059463501
    8. ''ensemble' → logprob: -4.74798059463501
    9. 'aisser' → logprob: -4.99798059463501
    10. 'INF' → logprob: -5.12298059463501

Token 911: 'vers' (ID: 3674)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.046500567346811295
    2. 'v' → logprob: -4.0465006828308105
    3. 'j' → logprob: -4.4215006828308105
    4. 'vers' → logprob: -4.9215006828308105
    5. 'ded' → logprob: -5.2965006828308105
    6. 'dr' → logprob: -7.2965006828308105
    7. '#' → logprob: -7.4215006828308105
    8. 'dp' → logprob: -8.171500205993652
    9. 'dj' → logprob: -8.546500205993652
    10. '
' → logprob: -8.671500205993652

Token 912: 'aire' (ID: 8189)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6690068244934082
    2. 'vers' → logprob: -2.169006824493408
    3. 'verse' → logprob: -2.294006824493408
    4. '           ' → logprob: -2.794006824493408
    5. '=' → logprob: -3.169006824493408
    6. ' node' → logprob: -3.544006824493408
    7. 'node' → logprob: -3.669006824493408
    8. '[node' → logprob: -3.669006824493408
    9. '                   ' → logprob: -4.669006824493408
    10. '       ' → logprob: -5.044006824493408

Token 913: ' chois' (ID: 33475)
  Prédit: 'can'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'can' → logprob: -0.7522937655448914
    2. ' pourra' → logprob: -2.002293825149536
    3. ' peut' → logprob: -2.127293825149536
    4. 'could' → logprob: -2.877293825149536
    5. ' pourrait' → logprob: -3.002293825149536
    6. 'pe' → logprob: -3.377293825149536
    7. '           ' → logprob: -3.502293825149536
    8. '#' → logprob: -3.502293825149536
    9. ' can' → logprob: -4.752293586730957
    10. '<|end|>' → logprob: -4.877293586730957

Token 914: 'ira' (ID: 2633)
  Prédit: 'era'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'era' → logprob: -0.3525221049785614
    2. 'ira' → logprob: -1.6025221347808838
    3. 'er' → logprob: -3.477522134780884
    4. 'it' → logprob: -3.602522134780884
    5. 'ra' → logprob: -3.727522134780884
    6. 'e' → logprob: -4.602521896362305
    7. 'a' → logprob: -6.477521896362305
    8. '#' → logprob: -8.227521896362305
    9. 'ait' → logprob: -8.352521896362305
    10. 'ent' → logprob: -8.477521896362305

Token 915: ' ce' (ID: 2357)
  Prédit: ' un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.2168002724647522
    2. 'un' → logprob: -1.9668002128601074
    3. ' une' → logprob: -4.091800212860107
    4. 'le' → logprob: -5.216800212860107
    5. ' le' → logprob: -5.216800212860107
    6. 'next' → logprob: -5.966800212860107
    7. ' ' → logprob: -5.966800212860107
    8. '   ' → logprob: -5.966800212860107
    9. '           ' → logprob: -6.091800212860107
    10. '```' → logprob: -6.091800212860107

Token 916: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.1868956983089447
    2. '```' → logprob: -3.0618956089019775
    3. ' k' → logprob: -3.3118956089019775
    4. 'next' → logprob: -3.9368956089019775
    5. 'token' → logprob: -4.311895847320557
    6. ' next' → logprob: -4.561895847320557
    7. ' qui' → logprob: -5.186895847320557
    8. 'qui' → logprob: -5.436895847320557
    9. ' choix' → logprob: -5.686895847320557
    10. ' ' → logprob: -6.061895847320557

Token 917: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.3290043771266937
    2. ':' → logprob: -1.3290044069290161
    3. '               ' → logprob: -5.579004287719727
    4. ':
' → logprob: -6.079004287719727
    5. '   ' → logprob: -6.454004287719727
    6. ' :' → logprob: -6.579004287719727
    7. ',' → logprob: -6.829004287719727
    8. ')' → logprob: -6.829004287719727
    9. '                   ' → logprob: -7.329004287719727
    10. '                           ' → logprob: -7.704004287719727

Token 918: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.01068615261465311
    2. '               ' → logprob: -5.260685920715332
    3. ':' → logprob: -5.885685920715332
    4. ',' → logprob: -7.385685920715332
    5. '                   ' → logprob: -7.385685920715332
    6. '.' → logprob: -7.885685920715332
    7. ')' → logprob: -8.010685920715332
    8. '                       ' → logprob: -9.260685920715332
    9. '):' → logprob: -9.510685920715332
    10. '       ' → logprob: -9.635685920715332

Token 919: ' #' (ID: 1069)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.005574406124651432
    2. 'possible' → logprob: -6.6305742263793945
    3. 'next' → logprob: -7.2555742263793945
    4. ' next' → logprob: -7.3805742263793945
    5. ' possible' → logprob: -7.3805742263793945
    6. 'all' → logprob: -7.6305742263793945
    7. '            
' → logprob: -8.130574226379395
    8. ' choices' → logprob: -8.130574226379395
    9. '       ' → logprob: -8.505574226379395
    10. '   ' → logprob: -8.880574226379395

Token 920: ' donc' (ID: 14206)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.039460185915231705
    2. 'possible' → logprob: -4.539460182189941
    3. ' possible' → logprob: -4.914460182189941
    4. ' choices' → logprob: -5.539460182189941
    5. ' next' → logprob: -5.664460182189941
    6. 'next' → logprob: -6.164460182189941
    7. '   ' → logprob: -6.664460182189941
    8. 'all' → logprob: -6.914460182189941
    9. '       ' → logprob: -7.039460182189941
    10. 'choices' → logprob: -7.039460182189941

Token 921: ' on' (ID: 402)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' continue' → logprob: -1.012638807296753
    2. 'continue' → logprob: -1.137638807296753
    3. ' min' → logprob: -2.262638807296753
    4. 'min' → logprob: -2.262638807296753
    5. '           ' → logprob: -3.137638807296753
    6. 'possible' → logprob: -3.512638807296753
    7. 'if' → logprob: -4.887639045715332
    8. '   ' → logprob: -5.387639045715332
    9. ' possible' → logprob: -5.512639045715332
    10. ' if' → logprob: -5.512639045715332

Token 922: ' doit' (ID: 21822)
  Prédit: 'continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'continue' → logprob: -0.17465317249298096
    2. '           ' → logprob: -3.5496530532836914
    3. ' continue' → logprob: -3.6746530532836914
    4. 'contin' → logprob: -3.6746530532836914
    5. 'for' → logprob: -3.9246530532836914
    6. '#' → logprob: -4.424653053283691
    7. 'if' → logprob: -4.549653053283691
    8. 'def' → logprob: -5.049653053283691
    9. 'must' → logprob: -5.049653053283691
    10. 'can' → logprob: -5.299653053283691

Token 923: ' considérer' (ID: 172894)
  Prédit: 'all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'all' → logprob: -0.459574431180954
    2. ' vérifier' → logprob: -2.4595744609832764
    3. ' all' → logprob: -3.2095744609832764
    4. 's' → logprob: -3.5845744609832764
    5. 'contin' → logprob: -3.5845744609832764
    6. 'v' → logprob: -3.5845744609832764
    7. ' trouver' → logprob: -3.7095744609832764
    8. 'tr' → logprob: -3.7095744609832764
    9. 'for' → logprob: -4.334574222564697
    10. 'check' → logprob: -4.584574222564697

Token 924: ' "' (ID: 392)
  Prédit: 'all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'all' → logprob: -0.5386151075363159
    2. ' all' → logprob: -1.163615107536316
    3. '   ' → logprob: -3.2886152267456055
    4. ' k' → logprob: -3.9136152267456055
    5. ' sets' → logprob: -4.1636152267456055
    6. 'sets' → logprob: -4.7886152267456055
    7. 'k' → logprob: -5.4136152267456055
    8. '    ' → logprob: -5.7886152267456055
    9. ' min' → logprob: -6.1636152267456055
    10. 'for' → logprob: -6.4136152267456055

Token 925: 'max' (ID: 3228)
  Prédit: ' all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' all' → logprob: -0.6008186340332031
    2. 'all' → logprob: -0.8508186340332031
    3. ' k' → logprob: -4.975818634033203
    4. '   ' → logprob: -5.225818634033203
    5. 'k' → logprob: -6.100818634033203
    6. ' min' → logprob: -6.225818634033203
    7. '    ' → logprob: -6.600818634033203
    8. ' sets' → logprob: -6.600818634033203
    9. ' True' → logprob: -7.100818634033203
    10. 'min' → logprob: -7.475818634033203

Token 926: ' sur' (ID: 1512)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4570247530937195
    2. '_{' → logprob: -2.0820248126983643
    3. '([' → logprob: -2.2070248126983643
    4. '(
' → logprob: -3.0820248126983643
    5. '_' → logprob: -3.9570248126983643
    6. '(_' → logprob: -4.082024574279785
    7. '(max' → logprob: -4.582024574279785
    8. '(k' → logprob: -5.207024574279785
    9. '(dp' → logprob: -5.207024574279785
    10. '_over' → logprob: -5.582024574279785

Token 927: ' k' (ID: 372)
  Prédit: 'sets'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sets' → logprob: -0.5969955325126648
    2. 'k' → logprob: -0.9719955325126648
    3. ' sets' → logprob: -3.3469955921173096
    4. ' k' → logprob: -3.4719955921173096
    5. 'range' → logprob: -5.9719953536987305
    6. ' range' → logprob: -6.9719953536987305
    7. '   ' → logprob: -7.9719953536987305
    8. 'ranges' → logprob: -8.47199535369873
    9. ' ' → logprob: -8.59699535369873
    10. '[' → logprob: -8.84699535369873

Token 928: ' des' (ID: 731)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.792504608631134
    2. ')"' → logprob: -1.6675045490264893
    3. ')' → logprob: -2.2925045490264893
    4. ' des' → logprob: -3.4175045490264893
    5. 'de' → logprob: -3.5425045490264893
    6. 'k' → logprob: -3.6675045490264893
    7. ' de' → logprob: -3.7925045490264893
    8. 'sets' → logprob: -3.9175045490264893
    9. ' of' → logprob: -3.9175045490264893
    10. 'des' → logprob: -4.042504787445068

Token 929: ' min' (ID: 1349)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.20126664638519287
    2. ' min' → logprob: -2.0762667655944824
    3. '[min' → logprob: -3.2012667655944824
    4. '(min' → logprob: -5.076266765594482
    5. '[' → logprob: -5.201266765594482
    6. 'k' → logprob: -7.576266765594482
    7. ' ' → logprob: -7.576266765594482
    8. 'mins' → logprob: -7.701266765594482
    9. '[
' → logprob: -7.951266765594482
    10. ' [' → logprob: -7.951266765594482

Token 930: ' dp' (ID: 21546)
  Prédit: '(dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(dp' → logprob: -0.5238831043243408
    2. '_{' → logprob: -1.6488831043243408
    3. '_' → logprob: -2.523883104324341
    4. '([' → logprob: -3.148883104324341
    5. '_dp' → logprob: -3.148883104324341
    6. '_[' → logprob: -4.273882865905762
    7. '(' → logprob: -4.773882865905762
    8. '[' → logprob: -5.273882865905762
    9. '_next' → logprob: -5.398882865905762
    10. '[next' → logprob: -5.398882865905762

Token 931: ' des' (ID: 731)
  Prédit: '[next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[next' → logprob: -0.005216444376856089
    2. '[' → logprob: -6.005216598510742
    3. '"' → logprob: -6.755216598510742
    4. '(next' → logprob: -8.005216598510742
    5. '[node' → logprob: -8.130216598510742
    6. 'next' → logprob: -8.505216598510742
    7. '_next' → logprob: -8.505216598510742
    8. '["' → logprob: -8.880216598510742
    9. '[k' → logprob: -9.130216598510742
    10. ')"' → logprob: -10.130216598510742

Token 932: ' noe' (ID: 49921)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.08755429834127426
    2. '(k' → logprob: -3.2125542163848877
    3. ' k' → logprob: -3.8375542163848877
    4. 'next' → logprob: -4.587554454803467
    5. '[k' → logprob: -5.462554454803467
    6. '[next' → logprob: -6.087554454803467
    7. 'nodes' → logprob: -6.212554454803467
    8. '(next' → logprob: -7.337554454803467
    9. '[
' → logprob: -8.087553977966309
    10. ' next' → logprob: -8.087553977966309

Token 933: 'uds' (ID: 44387)
  Prédit: 'uds'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'uds' → logprob: -0.1303112953901291
    2. 'ds' → logprob: -2.1303112506866455
    3. 'ud' → logprob: -6.130311489105225
    4. 'nds' → logprob: -7.880311489105225
    5. '[' → logprob: -8.130311012268066
    6. 'd' → logprob: -9.130311012268066
    7. 'des' → logprob: -9.255311012268066
    8. 'x' → logprob: -9.505311012268066
    9. 'e' → logprob: -9.880311012268066
    10. 'ods' → logprob: -10.630311012268066

Token 934: ' accessibles' (ID: 156723)
  Prédit: ']"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']"' → logprob: -0.3510153889656067
    2. '"' → logprob: -2.476015329360962
    3. ')"' → logprob: -3.101015329360962
    4. ']' → logprob: -3.726015329360962
    5. ' suivants' → logprob: -3.726015329360962
    6. '[next' → logprob: -3.851015329360962
    7. '])' → logprob: -4.101015567779541
    8. ' après' → logprob: -4.226015567779541
    9. '}"' → logprob: -4.726015567779541
    10. '[node' → logprob: -4.976015567779541

Token 935: ' en' (ID: 469)
  Prédit: ')"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')"' → logprob: -0.8482370376586914
    2. '"' → logprob: -1.2232370376586914
    3. ')' → logprob: -2.3482370376586914
    4. '):' → logprob: -3.2232370376586914
    5. ' )' → logprob: -3.8482370376586914
    6. ']"' → logprob: -3.9732370376586914
    7. '":' → logprob: -4.098237037658691
    8. '           ' → logprob: -4.473237037658691
    9. '[node' → logprob: -4.598237037658691
    10. ' "' → logprob: -4.723237037658691

Token 936: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.5242831110954285
    2. ' k' → logprob: -0.8992831110954285
    3. ' ' → logprob: -7.774282932281494
    4. '[k' → logprob: -8.899283409118652
    5. 'exact' → logprob: -8.899283409118652
    6. '1' → logprob: -9.149283409118652
    7. '```' → logprob: -9.524283409118652
    8. '`' → logprob: -10.149283409118652
    9. ' une' → logprob: -10.649283409118652
    10. ' one' → logprob: -10.649283409118652

Token 937: ' pas' (ID: 2173)
  Prédit: '_steps'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_steps' → logprob: -0.2733113765716553
    2. '_step' → logprob: -1.6483113765716553
    3. '_graph' → logprob: -3.7733113765716553
    4. '-' → logprob: -4.898311614990234
    5. 'steps' → logprob: -5.023311614990234
    6. '"_' → logprob: -6.273311614990234
    7. '"' → logprob: -6.273311614990234
    8. 'step' → logprob: -6.523311614990234
    9. '-step' → logprob: -6.898311614990234
    10. '"-' → logprob: -7.773311614990234

Token 938: '"
' (ID: 1092)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.6377855539321899
    2. ')"' → logprob: -2.0127854347229004
    3. ')' → logprob: -2.6377854347229004
    4. ')"
' → logprob: -2.6377854347229004
    5. '"' → logprob: -2.8877854347229004
    6. ']"' → logprob: -3.3877854347229004
    7. '):' → logprob: -3.8877854347229004
    8. ']' → logprob: -4.0127854347229
    9. ']"
' → logprob: -4.2627854347229
    10. '":' → logprob: -5.0127854347229

Token 939: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0536116398870945
    2. ':' → logprob: -3.0536117553710938
    3. '               ' → logprob: -6.178611755371094
    4. ' :' → logprob: -7.803611755371094
    5. '[' → logprob: -8.178611755371094
    6. ',' → logprob: -8.178611755371094
    7. '   ' → logprob: -8.178611755371094
    8. '       ' → logprob: -8.428611755371094
    9. ')' → logprob: -8.678611755371094
    10. ' ' → logprob: -8.803611755371094

Token 940: ' #' (ID: 1069)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.003865992883220315
    2. '       ' → logprob: -7.503866195678711
    3. '            
' → logprob: -7.503866195678711
    4. '
' → logprob: -7.753866195678711
    5. '   ' → logprob: -7.878866195678711
    6. ' max' → logprob: -8.253866195678711
    7. ',' → logprob: -8.378866195678711
    8. ' possible' → logprob: -8.753866195678711
    9. ' if' → logprob: -9.003866195678711
    10. ')' → logprob: -9.003866195678711

Token 941: ' Pour' (ID: 13931)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.6250155568122864
    2. ' min' → logprob: -1.1250154972076416
    3. ' max' → logprob: -2.8750154972076416
    4. 'min' → logprob: -4.250015735626221
    5. ' possible' → logprob: -4.250015735626221
    6. 'max' → logprob: -5.250015735626221
    7. ' options' → logprob: -5.250015735626221
    8. '   ' → logprob: -5.500015735626221
    9. 'possible' → logprob: -5.500015735626221
    10. ' reachable' → logprob: -5.750015735626221

Token 942: ' gagner' (ID: 64227)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.2251480519771576
    2. ' k' → logprob: -1.72514808177948
    3. 'ks' → logprob: -4.9751482009887695
    4. 'sets' → logprob: -5.2251482009887695
    5. ' sets' → logprob: -5.6001482009887695
    6. ' ks' → logprob: -6.2251482009887695
    7. 'step' → logprob: -6.9751482009887695
    8. ' step' → logprob: -7.6001482009887695
    9. 'neighbors' → logprob: -8.10014820098877
    10. ' next' → logprob: -8.22514820098877

Token 943: ',' (ID: 11)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0363776832818985
    2. ',' → logprob: -4.661377906799316
    3. ':' → logprob: -5.036377906799316
    4. '               ' → logprob: -5.286377906799316
    5. ' =' → logprob: -5.911377906799316
    6. ':
' → logprob: -6.536377906799316
    7. '       ' → logprob: -6.661377906799316
    8. '=' → logprob: -6.911377906799316
    9. '
' → logprob: -7.411377906799316
    10. '   ' → logprob: -7.411377906799316

Token 944: ' ce' (ID: 2357)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.5491100549697876
    2. 'possible' → logprob: -1.9241100549697876
    3. 'max' → logprob: -2.799109935760498
    4. ' min' → logprob: -2.924109935760498
    5. 'reachable' → logprob: -3.049109935760498
    6. 'all' → logprob: -3.674109935760498
    7. 'accessible' → logprob: -4.549109935760498
    8. '   ' → logprob: -4.674109935760498
    9. ' reachable' → logprob: -4.674109935760498
    10. '           ' → logprob: -5.299109935760498

Token 945: ' max' (ID: 2999)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -1.4546992778778076
    2. ':' → logprob: -1.5796992778778076
    3. '=' → logprob: -2.3296992778778076
    4. ' ' → logprob: -2.7046992778778076
    5. ' :' → logprob: -2.9546992778778076
    6. ' ' → logprob: -3.0796992778778076
    7. ' must' → logprob: -3.2046992778778076
    8. '   ' → logprob: -3.5796992778778076
    9. ' n' → logprob: -3.7046992778778076
    10. ' )' → logprob: -3.8296992778778076

Token 946: ' doit' (ID: 21822)
  Prédit: '_dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_dp' → logprob: -1.1824063062667847
    2. ' =' → logprob: -1.4324063062667847
    3. 'dp' → logprob: -2.182406425476074
    4. '=' → logprob: -2.432406425476074
    5. ')' → logprob: -3.432406425476074
    6. '_sur' → logprob: -3.682406425476074
    7. '           ' → logprob: -3.807406425476074
    8. '_' → logprob: -3.932406425476074
    9. '_val' → logprob: -3.932406425476074
    10. ' dp' → logprob: -4.432406425476074

Token 947: ' être' (ID: 9104)
  Prédit: ' be'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' be' → logprob: -0.047434236854314804
    2. 'be' → logprob: -4.172434329986572
    3. '<' → logprob: -4.297434329986572
    4. ' <' → logprob: -4.422434329986572
    5. ' être' → logprob: -5.547434329986572
    6. 'être' → logprob: -7.672434329986572
    7. 'strict' → logprob: -8.922433853149414
    8. ')' → logprob: -9.172433853149414
    9. '    ' → logprob: -9.422433853149414
    10. ' ' → logprob: -9.672433853149414

Token 948: ' fini' (ID: 63561)
  Prédit: '<'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '<' → logprob: -0.207570880651474
    2. ' <' → logprob: -2.707570791244507
    3. 'moins' → logprob: -3.457570791244507
    4. 'strict' → logprob: -3.457570791244507
    5. 'inf' → logprob: -3.957570791244507
    6. ' moins' → logprob: -4.582571029663086
    7. 'less' → logprob: -4.832571029663086
    8. ' inférieur' → logprob: -4.957571029663086
    9. ' less' → logprob: -5.582571029663086
    10. '<int' → logprob: -6.832571029663086

Token 949: ' =>' (ID: 871)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.029121503233909607
    2. ':' → logprob: -4.029121398925781
    3. '   ' → logprob: -6.029121398925781
    4. ' =' → logprob: -6.779121398925781
    5. '               ' → logprob: -6.779121398925781
    6. '       ' → logprob: -6.904121398925781
    7. ',' → logprob: -7.279121398925781
    8. ')' → logprob: -7.404121398925781
    9. '=' → logprob: -7.779121398925781
    10. '[' → logprob: -7.779121398925781

Token 950: ' pour' (ID: 1930)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'True' → logprob: -1.359764575958252
    2. ' True' → logprob: -1.609764575958252
    3. 'all' → logprob: -2.359764575958252
    4. 'possible' → logprob: -2.359764575958252
    5. 'min' → logprob: -2.484764575958252
    6. ' all' → logprob: -2.859764575958252
    7. 'False' → logprob: -2.859764575958252
    8. ' min' → logprob: -3.109764575958252
    9. 'max' → logprob: -3.234764575958252
    10. ' possible' → logprob: -3.859764575958252

Token 951: ' chaque' (ID: 21194)
  Prédit: ' node'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' node' → logprob: -0.45044514536857605
    2. 'node' → logprob: -1.9504451751708984
    3. 'k' → logprob: -2.3254451751708984
    4. ' k' → logprob: -2.5754451751708984
    5. 'all' → logprob: -4.075445175170898
    6. ' all' → logprob: -4.575445175170898
    7. ' chaque' → logprob: -5.075445175170898
    8. 'each' → logprob: -6.450445175170898
    9. 't' → logprob: -6.950445175170898
    10. 'le' → logprob: -7.200445175170898

Token 952: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.10141117125749588
    2. ' k' → logprob: -2.3514111042022705
    3. ' choix' → logprob: -7.97641134262085
    4. 'choice' → logprob: -8.601410865783691
    5. ' sets' → logprob: -8.976410865783691
    6. ' choice' → logprob: -9.226410865783691
    7. ' ' → logprob: -9.476410865783691
    8. 'sets' → logprob: -9.726410865783691
    9. 'set' → logprob: -9.851410865783691
    10. ' set' → logprob: -10.101410865783691

Token 953: ',' (ID: 11)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.1912335306406021
    2. ':' → logprob: -2.1912336349487305
    3. 'in' → logprob: -3.5662336349487305
    4. ',' → logprob: -5.4412336349487305
    5. ' _' → logprob: -5.4412336349487305
    6. ':
' → logprob: -5.5662336349487305
    7. ' :' → logprob: -5.6912336349487305
    8. '_in' → logprob: -5.6912336349487305
    9. '_sets' → logprob: -6.1912336349487305
    10. '_' → logprob: -6.3162336349487305

Token 954: ' on' (ID: 402)
  Prédit: 'all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'all' → logprob: -0.32216182351112366
    2. 'min' → logprob: -2.572161912918091
    3. 'reachable' → logprob: -2.947161912918091
    4. 'k' → logprob: -3.697161912918091
    5. 'possible' → logprob: -3.947161912918091
    6. ' all' → logprob: -3.947161912918091
    7. ' reachable' → logprob: -3.947161912918091
    8. 'max' → logprob: -4.697161674499512
    9. 'accessible' → logprob: -5.072161674499512
    10. ' min' → logprob: -5.197161674499512

Token 955: ' doit' (ID: 21822)
  Prédit: 'must'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'must' → logprob: -0.683531641960144
    2. ' must' → logprob: -1.683531641960144
    3. 'can' → logprob: -2.3085317611694336
    4. 'has' → logprob: -3.0585317611694336
    5. 'for' → logprob: -3.5585317611694336
    6. ' has' → logprob: -4.058531761169434
    7. 'have' → logprob: -4.058531761169434
    8. 's' → logprob: -4.433531761169434
    9. ' can' → logprob: -4.558531761169434
    10. 'continue' → logprob: -5.058531761169434

Token 956: ' pouvoir' (ID: 27197)
  Prédit: ' pouvoir'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pouvoir' → logprob: -1.0017318725585938
    2. 'avoir' → logprob: -1.3767318725585938
    3. ' trouver' → logprob: -1.8767318725585938
    4. ' avoir' → logprob: -3.5017318725585938
    5. 'être' → logprob: -3.6267318725585938
    6. ' vérifier' → logprob: -3.7517318725585938
    7. 'all' → logprob: -4.501731872558594
    8. 'for' → logprob: -4.626731872558594
    9. ' all' → logprob: -4.751731872558594
    10. ' find' → logprob: -4.751731872558594

Token 957: ' aller' (ID: 18383)
  Prédit: ' trouver'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' trouver' → logprob: -0.4898950457572937
    2. ' choisir' → logprob: -1.3648951053619385
    3. ' find' → logprob: -3.7398951053619385
    4. ' garantir' → logprob: -3.8648951053619385
    5. ' atteindre' → logprob: -3.9898951053619385
    6. ' at' → logprob: -4.114894866943359
    7. ' min' → logprob: -4.739894866943359
    8. 'find' → logprob: -5.239894866943359
    9. 'min' → logprob: -5.364894866943359
    10. ' for' → logprob: -5.739894866943359

Token 958: ' en' (ID: 469)
  Prédit: ' vers'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' vers' → logprob: -0.4052511751651764
    2. 'vers' → logprob: -1.280251145362854
    3. 'à' → logprob: -3.5302512645721436
    4. ' à' → logprob: -3.9052512645721436
    5. '           ' → logprob: -6.7802510261535645
    6. 'sur' → logprob: -7.0302510261535645
    7. '   ' → logprob: -7.1552510261535645
    8. ' ' → logprob: -7.9052510261535645
    9. '    ' → logprob: -8.155251502990723
    10. 'dans' → logprob: -8.155251502990723

Token 959: ' un' (ID: 537)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.48335057497024536
    2. ' au' → logprob: -1.9833505153656006
    3. '[' → logprob: -2.7333505153656006
    4. 'un' → logprob: -2.9833505153656006
    5. ' k' → logprob: -3.2333505153656006
    6. 'au' → logprob: -4.73335075378418
    7. '[k' → logprob: -4.73335075378418
    8. '[node' → logprob: -4.73335075378418
    9. 'min' → logprob: -4.98335075378418
    10. ' un' → logprob: -5.23335075378418

Token 960: ' noe' (ID: 49921)
  Prédit: ' node'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' node' → logprob: -1.274424433708191
    2. 'k' → logprob: -1.649424433708191
    3. '```' → logprob: -1.899424433708191
    4. 'node' → logprob: -2.7744245529174805
    5. '[' → logprob: -2.7744245529174805
    6. ' noe' → logprob: -2.8994245529174805
    7. ' k' → logprob: -3.2744245529174805
    8. ']' → logprob: -3.5244245529174805
    9. '`' → logprob: -3.5244245529174805
    10. ')' → logprob: -4.2744245529174805

Token 961: 'ud' (ID: 527)
  Prédit: 'ud'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ud' → logprob: -0.0017793069127947092
    2. 'e' → logprob: -6.751779079437256
    3. 'u' → logprob: -8.126779556274414
    4. 'd' → logprob: -8.376779556274414
    5. 'œ' → logprob: -11.376779556274414
    6. '```' → logprob: -11.376779556274414
    7. '\xc2' → logprob: -11.626779556274414
    8. '\' → logprob: -12.251779556274414
    9. '#' → logprob: -12.501779556274414
    10. '=' → logprob: -12.626779556274414

Token 962: ' "' (ID: 392)
  Prédit: ' accessible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' accessible' → logprob: -0.6637275218963623
    2. ' avec' → logprob: -2.1637275218963623
    3. '           ' → logprob: -2.5387275218963623
    4. ':' → logprob: -3.1637275218963623
    5. 'accessible' → logprob: -3.5387275218963623
    6. ' reachable' → logprob: -3.5387275218963623
    7. '   ' → logprob: -3.6637275218963623
    8. ' ' → logprob: -3.9137275218963623
    9. ' with' → logprob: -3.9137275218963623
    10. '               ' → logprob: -4.288727760314941

Token 963: 'bon' (ID: 6865)
  Prédit: ' avec'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' avec' → logprob: -0.4870569109916687
    2. ' fini' → logprob: -2.4870569705963135
    3. 'avec' → logprob: -2.8620569705963135
    4. '"' → logprob: -3.3620569705963135
    5. ' à' → logprob: -3.4870569705963135
    6. ' ayant' → logprob: -3.8620569705963135
    7. 'with' → logprob: -4.112056732177734
    8. 'reachable' → logprob: -4.237056732177734
    9. ' ' → logprob: -4.362056732177734
    10. ' de' → logprob: -4.362056732177734

Token 964: '"
' (ID: 1092)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.015258758328855038
    2. '```' → logprob: -5.8902587890625
    3. ')' → logprob: -6.5152587890625
    4. ' "' → logprob: -6.7652587890625
    5. '":' → logprob: -6.8902587890625
    6. '"
' → logprob: -7.1402587890625
    7. ']' → logprob: -7.2652587890625
    8. '"]' → logprob: -7.5152587890625
    9. 'fin' → logprob: -7.6402587890625
    10. '   ' → logprob: -7.6402587890625

Token 965: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.006203107535839081
    2. ':' → logprob: -5.5062031745910645
    3. '               ' → logprob: -7.3812031745910645
    4. '       ' → logprob: -8.006202697753906
    5. '   ' → logprob: -8.631202697753906
    6. '            
' → logprob: -8.756202697753906
    7. '                   ' → logprob: -9.381202697753906
    8. '                       ' → logprob: -9.381202697753906
    9. ':
' → logprob: -9.506202697753906
    10. ',' → logprob: -9.506202697753906

Token 966: ' #' (ID: 1069)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.008829176425933838
    2. ':' → logprob: -5.258829116821289
    3. ':
' → logprob: -7.258829116821289
    4. '   ' → logprob: -7.383829116821289
    5. ')' → logprob: -7.633829116821289
    6. '            
' → logprob: -8.133829116821289
    7. '       ' → logprob: -8.383829116821289
    8. '.' → logprob: -8.508829116821289
    9. '               ' → logprob: -8.508829116821289
    10. ',' → logprob: -8.883829116821289

Token 967: ' en' (ID: 469)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.002441170159727335
    2. '       ' → logprob: -7.00244140625
    3. '               ' → logprob: -7.75244140625
    4. '   ' → logprob: -8.37744140625
    5. ':' → logprob: -8.75244140625
    6. '            
' → logprob: -8.87744140625
    7. '```' → logprob: -9.37744140625
    8. ',' → logprob: -9.87744140625
    9. ')' → logprob: -9.87744140625
    10. '                   ' → logprob: -10.12744140625

Token 968: ' k' (ID: 372)
  Prédit: 'all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'all' → logprob: -0.5661038160324097
    2. ' all' → logprob: -1.4411038160324097
    3. ' k' → logprob: -2.316103935241699
    4. 'k' → logprob: -3.441103935241699
    5. 'range' → logprob: -4.316103935241699
    6. ' toutes' → logprob: -4.566103935241699
    7. ' range' → logprob: -4.941103935241699
    8. ' tous' → logprob: -5.316103935241699
    9. 'tout' → logprob: -5.566103935241699
    10. ' any' → logprob: -5.691103935241699

Token 969: ' pas' (ID: 2173)
  Prédit: '_step'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_step' → logprob: -0.6021228432655334
    2. '_steps' → logprob: -1.1021227836608887
    3. 'step' → logprob: -2.4771227836608887
    4. 'steps' → logprob: -3.8521227836608887
    5. '-step' → logprob: -6.477122783660889
    6. '       ' → logprob: -6.602122783660889
    7. '_graph' → logprob: -6.602122783660889
    8. '
' → logprob: -6.727122783660889
    9. '-' → logprob: -6.852122783660889
    10. ')' → logprob: -6.852122783660889

Token 970: '.

' (ID: 364)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.021719928830862045
    2. ':' → logprob: -4.021719932556152
    3. '   ' → logprob: -6.771719932556152
    4. '       ' → logprob: -6.896719932556152
    5. ':
' → logprob: -7.896719932556152
    6. ',' → logprob: -8.146719932556152
    7. '            
' → logprob: -8.896719932556152
    8. '               ' → logprob: -9.396719932556152
    9. '
' → logprob: -9.896719932556152
    10. '    
' → logprob: -10.021719932556152

Token 971: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.022460266947746277
    2. '       ' → logprob: -3.8974602222442627
    3. '   ' → logprob: -6.897460460662842
    4. '               ' → logprob: -8.022459983825684
    5. '	   ' → logprob: -9.147459983825684
    6. '	       ' → logprob: -9.272459983825684
    7. '		' → logprob: -9.897459983825684
    8. '    
' → logprob: -10.022459983825684
    9. '            
' → logprob: -10.272459983825684
    10. '```' → logprob: -10.397459983825684

Token 972: ' #' (ID: 1069)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.9325816631317139
    2. 'vals' → logprob: -2.057581663131714
    3. 'possible' → logprob: -2.182581663131714
    4. 'best' → logprob: -2.432581663131714
    5. '           ' → logprob: -2.557581663131714
    6. 'max' → logprob: -2.932581663131714
    7. 'all' → logprob: -3.432581663131714
    8. 'mins' → logprob: -3.557581663131714
    9. 'can' → logprob: -4.057581901550293
    10. 'poss' → logprob: -4.182581901550293

Token 973: ' Pour' (ID: 13931)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -1.335890769958496
    2. 'possible' → logprob: -1.585890769958496
    3. 'vals' → logprob: -1.960890769958496
    4. 'min' → logprob: -2.085890769958496
    5. 'all' → logprob: -2.585890769958496
    6. 'best' → logprob: -3.460890769958496
    7. 'values' → logprob: -3.835890769958496
    8. 'max' → logprob: -3.835890769958496
    9. 'next' → logprob: -3.835890769958496
    10. 'poss' → logprob: -4.210890769958496

Token 974: ' chaque' (ID: 21194)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.05192602425813675
    2. ' k' → logprob: -3.6769261360168457
    3. 'step' → logprob: -4.926926136016846
    4. 'steps' → logprob: -5.551926136016846
    5. 'sets' → logprob: -5.676926136016846
    6. 'choice' → logprob: -6.676926136016846
    7. ' sets' → logprob: -6.801926136016846
    8. 'ks' → logprob: -7.051926136016846
    9. 'idx' → logprob: -7.051926136016846
    10. ' step' → logprob: -7.051926136016846

Token 975: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.14987511932849884
    2. ' k' → logprob: -2.0248751640319824
    3. 'graph' → logprob: -6.149875164031982
    4. ' graph' → logprob: -7.274875164031982
    5. ' next' → logprob: -7.399875164031982
    6. ' choice' → logprob: -7.399875164031982
    7. 'choice' → logprob: -7.524875164031982
    8. 'ks' → logprob: -7.649875164031982
    9. 'step' → logprob: -8.024874687194824
    10. ' step' → logprob: -8.399874687194824

Token 976: '-step' (ID: 41570)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.20396409928798676
    2. 'in' → logprob: -1.703964114189148
    3. '_in' → logprob: -7.4539642333984375
    4. '_graph' → logprob: -7.8289642333984375
    5. '_idx' → logprob: -8.078964233398438
    6. ',' → logprob: -8.078964233398438
    7. '           ' → logprob: -9.078964233398438
    8. '   ' → logprob: -9.203964233398438
    9. '_' → logprob: -9.453964233398438
    10. 'idx' → logprob: -9.578964233398438

Token 977: ' graph' (ID: 7465)
  Prédit: '_graph'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_graph' → logprob: -0.023950587958097458
    2. 'graph' → logprob: -3.8989505767822266
    3. ' in' → logprob: -6.023950576782227
    4. '   ' → logprob: -8.148950576782227
    5. ' graph' → logprob: -8.898950576782227
    6. '_index' → logprob: -9.398950576782227
    7. 'in' → logprob: -10.023950576782227
    8. ',' → logprob: -10.023950576782227
    9. '_gr' → logprob: -10.523950576782227
    10. '	graph' → logprob: -10.648950576782227

Token 978: ',' (ID: 11)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.3395116627216339
    2. '           ' → logprob: -2.2145116329193115
    3. 'in' → logprob: -2.4645116329193115
    4. ':
' → logprob: -3.3395116329193115
    5. ':' → logprob: -3.4645116329193115
    6. ',' → logprob: -4.964511871337891
    7. ' for' → logprob: -5.339511871337891
    8. 'for' → logprob: -5.839511871337891
    9. '               ' → logprob: -6.214511871337891
    10. '=' → logprob: -6.214511871337891

Token 979: ' on' (ID: 402)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.8532010316848755
    2. '           ' → logprob: -1.9782010316848755
    3. 'best' → logprob: -2.103200912475586
    4. 'min' → logprob: -2.103200912475586
    5. 'vals' → logprob: -2.353200912475586
    6. 'all' → logprob: -2.728200912475586
    7. 'results' → logprob: -2.728200912475586
    8. 'possible' → logprob: -2.853200912475586
    9. ' for' → logprob: -3.228200912475586
    10. ' min' → logprob: -3.478200912475586

Token 980: ' regarde' (ID: 115760)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.41242146492004395
    2. '=' → logprob: -2.662421464920044
    3. 'for' → logprob: -3.162421464920044
    4. 'continue' → logprob: -3.287421464920044
    5. 'possible' → logprob: -3.912421464920044
    6. 'in' → logprob: -4.287421226501465
    7. '               ' → logprob: -4.537421226501465
    8. '            
' → logprob: -4.537421226501465
    9. 'try' → logprob: -4.787421226501465
    10. '   ' → logprob: -4.912421226501465

Token 981: ' tous' (ID: 10688)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.6207448244094849
    2. 'k' → logprob: -1.4957448244094849
    3. ' next' → logprob: -3.2457447052001953
    4. ' possible' → logprob: -3.3707447052001953
    5. 'all' → logprob: -3.4957447052001953
    6. 'possible' → logprob: -3.4957447052001953
    7. ' all' → logprob: -3.8707447052001953
    8. '           ' → logprob: -4.245744705200195
    9. ' reachable' → logprob: -4.245744705200195
    10. 'next' → logprob: -4.495744705200195

Token 982: ' les' (ID: 1341)
  Prédit: 'next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'next' → logprob: -0.11242830753326416
    2. ' next' → logprob: -2.7374281883239746
    3. 'k' → logprob: -4.862428188323975
    4. 'neighbor' → logprob: -4.987428188323975
    5. '   ' → logprob: -5.237428188323975
    6. '[next' → logprob: -5.862428188323975
    7. 'v' → logprob: -5.862428188323975
    8. ' nxt' → logprob: -5.987428188323975
    9. '(next' → logprob: -6.237428188323975
    10. 'node' → logprob: -6.487428188323975

Token 983: ' prochains' (ID: 188913)
  Prédit: 'next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'next' → logprob: -0.04072420299053192
    2. 'neighbors' → logprob: -3.665724277496338
    3. 'n' → logprob: -5.540724277496338
    4. 'v' → logprob: -5.790724277496338
    5. 'neighbor' → logprob: -5.790724277496338
    6. 'succ' → logprob: -6.665724277496338
    7. 'success' → logprob: -6.915724277496338
    8. 'dest' → logprob: -7.165724277496338
    9. 'nodes' → logprob: -7.665724277496338
    10. 'nbr' → logprob: -8.41572380065918

Token 984: ' noe' (ID: 49921)
  Prédit: 'nodes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'nodes' → logprob: -0.09529628604650497
    2. ' nodes' → logprob: -2.7202963829040527
    3. '   ' → logprob: -4.970296382904053
    4. 'neighbors' → logprob: -4.970296382904053
    5. '           ' → logprob: -5.470296382904053
    6. 'next' → logprob: -5.970296382904053
    7. '_nodes' → logprob: -6.970296382904053
    8. '	nodes' → logprob: -7.345296382904053
    9. ' next' → logprob: -7.595296382904053
    10. 'for' → logprob: -8.095295906066895

Token 985: 'uds' (ID: 44387)
  Prédit: 'uds'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'uds' → logprob: -0.2837878465652466
    2. 'ds' → logprob: -1.4087878465652466
    3. 'ud' → logprob: -6.283787727355957
    4. '```' → logprob: -7.533787727355957
    5. 's' → logprob: -9.158787727355957
    6. 'nds' → logprob: -10.658787727355957
    7. '#' → logprob: -11.283787727355957
    8. '{}' → logprob: -11.658787727355957
    9. 'd' → logprob: -11.658787727355957
    10. '``' → logprob: -11.783787727355957

Token 986: ' accessibles' (ID: 156723)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.13416948914527893
    2. '           ' → logprob: -2.509169578552246
    3. ':
' → logprob: -4.259169578552246
    4. ' in' → logprob: -4.634169578552246
    5. '   ' → logprob: -5.259169578552246
    6. '[' → logprob: -5.509169578552246
    7. ',' → logprob: -5.884169578552246
    8. ' :' → logprob: -6.009169578552246
    9. '       ' → logprob: -7.009169578552246
    10. 'in' → logprob: -7.259169578552246

Token 987: ' en' (ID: 469)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.000987200066447258
    2. '       ' → logprob: -8.25098705291748
    3. ' for' → logprob: -8.62598705291748
    4. ',' → logprob: -8.62598705291748
    5. ':' → logprob: -9.12598705291748
    6. 'for' → logprob: -9.37598705291748
    7. '            
' → logprob: -10.62598705291748
    8. '.' → logprob: -11.37598705291748
    9. '   ' → logprob: -11.37598705291748
    10. ' in' → logprob: -11.62598705291748

Token 988: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.18031495809555054
    2. ' k' → logprob: -1.8053150177001953
    3. '   ' → logprob: -8.555315017700195
    4. 'node' → logprob: -9.430315017700195
    5. '           ' → logprob: -10.055315017700195
    6. 'range' → logprob: -10.180315017700195
    7. '[k' → logprob: -10.305315017700195
    8. ' ' → logprob: -10.305315017700195
    9. ' node' → logprob: -10.680315017700195
    10. '       ' → logprob: -10.930315017700195

Token 989: ' pas' (ID: 2173)
  Prédit: '_step'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_step' → logprob: -1.3962193727493286
    2. '   ' → logprob: -1.7712193727493286
    3. 'step' → logprob: -2.021219253540039
    4. '_steps' → logprob: -2.146219253540039
    5. 'steps' → logprob: -2.396219253540039
    6. '       ' → logprob: -2.521219253540039
    7. ':' → logprob: -3.271219253540039
    8. '_graph' → logprob: -3.521219253540039
    9. '           ' → logprob: -3.771219253540039
    10. 'for' → logprob: -3.896219253540039

Token 990: ':
' (ID: 734)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0665028840303421
    2. ':' → logprob: -2.816502809524536
    3. ',' → logprob: -6.816503047943115
    4. '       ' → logprob: -6.941503047943115
    5. '   ' → logprob: -7.316503047943115
    6. ':
' → logprob: -7.941503047943115
    7. '=' → logprob: -8.441502571105957
    8. '.' → logprob: -8.816502571105957
    9. ' :' → logprob: -8.816502571105957
    10. ' for' → logprob: -9.191502571105957

Token 991: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.02286524325609207
    2. ' for' → logprob: -5.022865295410156
    3. '   ' → logprob: -5.522865295410156
    4. '       ' → logprob: -5.647865295410156
    5. '               ' → logprob: -6.272865295410156
    6. ':' → logprob: -7.147865295410156
    7. ')' → logprob: -7.272865295410156
    8. ',' → logprob: -7.522865295410156
    9. '```' → logprob: -7.647865295410156
    10. '            
' → logprob: -7.897865295410156

Token 992: ' #' (ID: 1069)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'min' → logprob: -1.0630759000778198
    2. 'all' → logprob: -1.4380759000778198
    3. '           ' → logprob: -1.9380759000778198
    4. 'possible' → logprob: -2.4380760192871094
    5. 'best' → logprob: -3.3130760192871094
    6. ' min' → logprob: -3.5630760192871094
    7. 'results' → logprob: -3.6880760192871094
    8. 'max' → logprob: -3.8130760192871094
    9. 'vals' → logprob: -4.313076019287109
    10. 'valid' → logprob: -4.438076019287109

Token 993: ' si' (ID: 1784)
  Prédit: 'all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'all' → logprob: -1.1174355745315552
    2. '           ' → logprob: -1.2424355745315552
    3. 'possible' → logprob: -2.1174354553222656
    4. 'results' → logprob: -3.3674354553222656
    5. 'good' → logprob: -3.4924354553222656
    6. 'min' → logprob: -3.4924354553222656
    7. 'best' → logprob: -3.6174354553222656
    8. ' good' → logprob: -4.367435455322266
    9. 'max' → logprob: -4.367435455322266
    10. ' possible' → logprob: -4.492435455322266

Token 994: ' aucun' (ID: 41678)
  Prédit: 'all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'all' → logprob: -0.06734821945428848
    2. ' all' → logprob: -2.8173482418060303
    3. 'any' → logprob: -5.817348003387451
    4. 'not' → logprob: -7.067348003387451
    5. 'k' → logprob: -7.442348003387451
    6. ' not' → logprob: -7.567348003387451
    7. ' any' → logprob: -8.31734848022461
    8. ' k' → logprob: -9.56734848022461
    9. 'len' → logprob: -9.56734848022461
    10. ' ' → logprob: -10.81734848022461

Token 995: ' noe' (ID: 49921)
  Prédit: ' next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' next' → logprob: -0.6390712857246399
    2. 'next' → logprob: -1.1390712261199951
    3. ' accessible' → logprob: -4.014071464538574
    4. ' node' → logprob: -4.264071464538574
    5. 'reachable' → logprob: -4.264071464538574
    6. 'accessible' → logprob: -4.264071464538574
    7. '_next' → logprob: -4.889071464538574
    8. '[next' → logprob: -4.889071464538574
    9. ' reachable' → logprob: -5.014071464538574
    10. 'neighbor' → logprob: -5.139071464538574

Token 996: 'ud' (ID: 527)
  Prédit: 'accessible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'accessible' → logprob: -0.7276104092597961
    2. ' accessible' → logprob: -1.2276103496551514
    3. 't' → logprob: -1.9776103496551514
    4. 'reachable' → logprob: -3.8526103496551514
    5. 'k' → logprob: -3.9776103496551514
    6. 'ud' → logprob: -4.6026105880737305
    7. 'u' → logprob: -5.2276105880737305
    8. 'node' → logprob: -5.6026105880737305
    9. 'e' → logprob: -5.7276105880737305
    10. 'Accessible' → logprob: -5.8526105880737305

Token 997: ' accessible' (ID: 18240)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.8366158604621887
    2. ' accessible' → logprob: -1.086615800857544
    3. 'accessible' → logprob: -2.336615800857544
    4. ' reachable' → logprob: -2.961615800857544
    5. 'reachable' → logprob: -3.586615800857544
    6. ' dans' → logprob: -3.836615800857544
    7. 'in' → logprob: -4.586616039276123
    8. 'dans' → logprob: -5.211616039276123
    9. ' accessibles' → logprob: -5.461616039276123
    10. ' not' → logprob: -6.336616039276123

Token 998: ' n' (ID: 297)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.720370352268219
    2. ' in' → logprob: -1.2203702926635742
    3. '           ' → logprob: -2.845370292663574
    4. 'en' → logprob: -2.970370292663574
    5. '==' → logprob: -3.220370292663574
    6. ':' → logprob: -3.970370292663574
    7. ' ==' → logprob: -4.220370292663574
    8. '                   ' → logprob: -4.720370292663574
    9. '               ' → logprob: -4.970370292663574
    10. '[node' → logprob: -5.470370292663574

Token 999: ''a' (ID: 10443)
  Prédit: 'est'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'est' → logprob: -1.5186713933944702
    2. ''est' → logprob: -1.5186713933944702
    3. 'n' → logprob: -2.8936715126037598
    4. ' n' → logprob: -3.0186715126037598
    5. ' est' → logprob: -3.1436715126037598
    6. ' in' → logprob: -3.1436715126037598
    7. '           ' → logprob: -3.6436715126037598
    8. 'not' → logprob: -3.6436715126037598
    9. 's' → logprob: -3.6436715126037598
    10. ':' → logprob: -3.7686715126037598

Token 1000: ' dp' (ID: 21546)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dp' → logprob: -0.02977907471358776
    2. ' dp' → logprob: -3.5297789573669434
    3. 'd' → logprob: -11.779779434204102
    4. '	dp' → logprob: -12.404779434204102
    5. '(dp' → logprob: -12.904779434204102
    6. '   ' → logprob: -12.904779434204102
    7. '
' → logprob: -13.404779434204102
    8. '<' → logprob: -13.654779434204102
    9. '_dp' → logprob: -13.779779434204102
    10. '```' → logprob: -13.779779434204102

Token 1001: '[next' (ID: 103383)
  Prédit: '[next'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[next' → logprob: -0.08259730041027069
    2. '[node' → logprob: -2.582597255706787
    3. '<' → logprob: -6.332597255706787
    4. ' <' → logprob: -6.707597255706787
    5. '[' → logprob: -7.457597255706787
    6. '[n' → logprob: -10.332597732543945
    7. '<n' → logprob: -11.082597732543945
    8. '[
' → logprob: -11.207597732543945
    9. '[u' → logprob: -11.707597732543945
    10. '[j' → logprob: -12.207597732543945

Token 1002: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.17895588278770447
    2. '[node' → logprob: -2.1789557933807373
    3. '[next' → logprob: -3.9289557933807373
    4. '<' → logprob: -4.303956031799316
    5. ']<' → logprob: -4.928956031799316
    6. ' <' → logprob: -5.053956031799316
    7. '[' → logprob: -6.928956031799316
    8. '[j' → logprob: -7.553956031799316
    9. '']' → logprob: -8.178956031799316
    10. '<n' → logprob: -8.303956031799316

Token 1003: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.2286338210105896
    2. '<' → logprob: -1.6036338806152344
    3. ' ==' → logprob: -6.853633880615234
    4. ' !=' → logprob: -7.478633880615234
    5. '<int' → logprob: -8.228633880615234
    6. '<n' → logprob: -8.228633880615234
    7. '==' → logprob: -8.603633880615234
    8. '<f' → logprob: -8.603633880615234
    9. '!=' → logprob: -8.853633880615234
    10. '<u' → logprob: -9.728633880615234

Token 1004: ' INF' (ID: 69196)
  Prédit: 'INF'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'INF' → logprob: -0.00417100265622139
    2. ' INF' → logprob: -5.504170894622803
    3. 'inf' → logprob: -9.879171371459961
    4. 'float' → logprob: -10.629171371459961
    5. 'IN' → logprob: -12.129171371459961
    6. '_INF' → logprob: -12.379171371459961
    7. ' float' → logprob: -13.129171371459961
    8. ' inf' → logprob: -13.379171371459961
    9. '
' → logprob: -13.754171371459961
    10. 'Inf' → logprob: -13.879171371459961

Token 1005: ' ->' (ID: 2747)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.17697744071483612
    2. ':
' → logprob: -2.6769773960113525
    3. '           ' → logprob: -3.1769773960113525
    4. '               ' → logprob: -3.8019773960113525
    5. ',' → logprob: -4.676977634429932
    6. '                   ' → logprob: -5.051977634429932
    7. '=' → logprob: -5.551977634429932
    8. '                       ' → logprob: -5.801977634429932
    9. '[' → logprob: -6.926977634429932
    10. '   ' → logprob: -7.051977634429932

Token 1006: ' perdu' (ID: 72976)
  Prédit: 'continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'continue' → logprob: -0.26726582646369934
    2. ' continue' → logprob: -1.767265796661377
    3. '           ' → logprob: -3.517265796661377
    4. 'pass' → logprob: -4.767265796661377
    5. 'possible' → logprob: -5.017265796661377
    6. '               ' → logprob: -5.767265796661377
    7. 'break' → logprob: -6.142265796661377
    8. 'changed' → logprob: -6.392265796661377
    9. 'False' → logprob: -6.517265796661377
    10. 'contin' → logprob: -6.767265796661377

Token 1007: ' pour' (ID: 1930)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0520402155816555
    2. ':' → logprob: -3.0520401000976562
    3. ':
' → logprob: -6.427040100097656
    4. '               ' → logprob: -7.677040100097656
    5. ',' → logprob: -7.802040100097656
    6. '            
' → logprob: -8.802040100097656
    7. '       ' → logprob: -8.927040100097656
    8. '.' → logprob: -9.052040100097656
    9. '   ' → logprob: -9.177040100097656
    10. ')' → logprob: -9.552040100097656

Token 1008: ' ce' (ID: 2357)
  Prédit: 'node'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'node' → logprob: -0.0794191062450409
    2. 'k' → logprob: -3.2044191360473633
    3. 'this' → logprob: -4.079419136047363
    4. ' node' → logprob: -4.579419136047363
    5. 'that' → logprob: -6.079419136047363
    6. ' ce' → logprob: -6.454419136047363
    7. 'l' → logprob: -6.829419136047363
    8. 'le' → logprob: -6.829419136047363
    9. 'c' → logprob: -8.204419136047363
    10. '[node' → logprob: -8.204419136047363

Token 1009: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.4445924460887909
    2. 'node' → logprob: -1.0695924758911133
    3. ' node' → logprob: -4.444592475891113
    4. ' k' → logprob: -6.194592475891113
    5. 'cho' → logprob: -7.694592475891113
    6. '
' → logprob: -8.194592475891113
    7. 'tour' → logprob: -8.694592475891113
    8. 'for' → logprob: -8.819592475891113
    9. 'player' → logprob: -8.944592475891113
    10. 'c' → logprob: -9.194592475891113

Token 1010: ' choice' (ID: 7158)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.03528423234820366
    2. ':' → logprob: -4.160284042358398
    3. '   ' → logprob: -5.035284042358398
    4. '       ' → logprob: -5.410284042358398
    5. ',' → logprob: -7.035284042358398
    6. '
' → logprob: -7.410284042358398
    7. '               ' → logprob: -7.535284042358398
    8. ' =' → logprob: -7.660284042358398
    9. '	   ' → logprob: -7.660284042358398
    10. '            
' → logprob: -7.660284042358398

Token 1011: '.

' (ID: 364)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.006026200018823147
    2. '            
' → logprob: -5.881026268005371
    3. '
' → logprob: -6.881026268005371
    4. '   ' → logprob: -7.756026268005371
    5. ',' → logprob: -7.881026268005371
    6. '    
' → logprob: -8.131026268005371
    7. ':' → logprob: -8.506026268005371
    8. '       ' → logprob: -8.631026268005371
    9. '  
' → logprob: -9.506026268005371
    10. '               ' → logprob: -9.756026268005371

Token 1012: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0011593853123486042
    2. '```' → logprob: -8.25115966796875
    3. '       ' → logprob: -8.62615966796875
    4. '   ' → logprob: -8.75115966796875
    5. '            
' → logprob: -8.75115966796875
    6. 'possible' → logprob: -9.50115966796875
    7. 'all' → logprob: -9.75115966796875
    8. 'if' → logprob: -10.00115966796875
    9. '		' → logprob: -10.75115966796875
    10. '               ' → logprob: -10.87615966796875

Token 1013: ' max' (ID: 2999)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.15888194739818573
    2. 'max' (adapté à ' max') → logprob: -3.158881902694702
    3. 'min' → logprob: -3.783881902694702
    4. 'possible' → logprob: -4.033882141113281
    5. 'all' → logprob: -4.158882141113281
    6. ' max' → logprob: -4.283882141113281
    7. ' min' → logprob: -4.658882141113281
    8. 'next' → logprob: -5.783882141113281
    9. ' possible' → logprob: -6.158882141113281
    10. 'vals' → logprob: -6.283882141113281

Token 1014: '_min' (ID: 15950)
  Prédit: '_dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_dp' → logprob: -0.41020986437797546
    2. '_val' → logprob: -1.7852098941802979
    3. '_' → logprob: -2.410209894180298
    4. '_value' → logprob: -3.910209894180298
    5. '_max' → logprob: -4.035209655761719
    6. '_cost' → logprob: -4.285209655761719
    7. '_k' → logprob: -4.660209655761719
    8. ' =' → logprob: -5.535209655761719
    9. '_min' → logprob: -6.035209655761719
    10. '_possible' → logprob: -6.160209655761719

Token 1015: ' =' (ID: 314)
  Prédit: '_dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_dp' → logprob: -0.33227473497390747
    2. '_' → logprob: -1.5822746753692627
    3. '_val' → logprob: -3.0822746753692627
    4. '_value' → logprob: -4.082274913787842
    5. '=' → logprob: -5.207274913787842
    6. '_min' → logprob: -5.707274913787842
    7. ' =' → logprob: -5.832274913787842
    8. '_=' → logprob: -7.332274913787842
    9. '_cost' → logprob: -7.707274913787842
    10. '_max' → logprob: -8.207274436950684

Token 1016: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.03094756044447422
    2. '-INF' → logprob: -4.030947685241699
    3. '-inf' → logprob: -4.405947685241699
    4. '0' → logprob: -8.2809476852417
    5. ' -' → logprob: -8.6559476852417
    6. '-IN' → logprob: -10.5309476852417
    7. '-in' → logprob: -10.5309476852417
    8. '-In' → logprob: -11.4059476852417
    9. 'float' → logprob: -12.4059476852417
    10. '-L' → logprob: -12.6559476852417

Token 1017: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.04320620372891426
    2. 'INF' → logprob: -3.168206214904785
    3. 'inf' → logprob: -9.293206214904785
    4. ' ' → logprob: -9.543206214904785
    5. ' INF' → logprob: -11.043206214904785
    6. '   ' → logprob: -12.043206214904785
    7. 'float' → logprob: -12.043206214904785
    8. '10' → logprob: -12.418206214904785
    9. '
' → logprob: -12.668206214904785
    10. '100' → logprob: -13.418206214904785

Token 1018: ' ' (ID: 220)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.2572695314884186
    2. '
' → logprob: -1.7572695016860962
    3. '            
' → logprob: -4.507269382476807
    4. ' 
' → logprob: -5.007269382476807
    5. '<|end|>' → logprob: -5.007269382476807
    6. '  
' → logprob: -5.757269382476807
    7. ':' → logprob: -5.882269382476807
    8. '            ' → logprob: -6.007269382476807
    9. '    
' → logprob: -6.132269382476807
    10. ' for' → logprob: -6.132269382476807

Token 1019: ' #' (ID: 1069)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.04108180105686188
    2. ' 
' → logprob: -4.29108190536499
    3. 'for' → logprob: -4.41608190536499
    4. ' ' → logprob: -5.41608190536499
    5. ' for' → logprob: -5.91608190536499
    6. '0' → logprob: -6.54108190536499
    7. '  
' → logprob: -7.04108190536499
    8. '<|end|>' → logprob: -7.16608190536499
    9. '+' → logprob: -7.54108190536499
    10. '    
' → logprob: -7.66608190536499

Token 1020: ' max' (ID: 2999)
  Prédit: 'INF'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'INF' → logprob: -0.003144681453704834
    2. '0' → logprob: -6.12814474105835
    3. ' INF' → logprob: -7.00314474105835
    4. '-INF' → logprob: -11.878144264221191
    5. '
' → logprob: -12.003144264221191
    6. 'inf' → logprob: -12.128144264221191
    7. '_INF' → logprob: -12.253144264221191
    8. ' ' → logprob: -12.378144264221191
    9. '   ' → logprob: -12.378144264221191
    10. 'IN' → logprob: -12.753144264221191

Token 1021: ' des' (ID: 731)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.629130482673645
    2. ' +' → logprob: -1.754130482673645
    3. '=' → logprob: -2.1291303634643555
    4. '+' → logprob: -2.6291303634643555
    5. 'max' → logprob: -3.7541303634643555
    6. 'import' → logprob: -4.5041303634643555
    7. '=max' → logprob: -4.7541303634643555
    8. '<|end|>' → logprob: -4.7541303634643555
    9. '           ' → logprob: -5.0041303634643555
    10. 'for' → logprob: -5.3791303634643555

Token 1022: ' min' (ID: 1349)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.4578034579753876
    2. 'dp' → logprob: -1.70780348777771
    3. 'float' → logprob: -2.45780348777771
    4. 'min' → logprob: -3.45780348777771
    5. 'inf' → logprob: -4.207803249359131
    6. 'max' → logprob: -4.332803249359131
    7. ' dp' → logprob: -4.582803249359131
    8. '-' → logprob: -5.457803249359131
    9. 'INF' → logprob: -5.582803249359131
    10. '_min' → logprob: -5.957803249359131

Token 1023: ' de' (ID: 334)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.04088006913661957
    2. '_dp' → logprob: -4.41588020324707
    3. '_inf' → logprob: -5.04088020324707
    4. ' _' → logprob: -5.04088020324707
    5. 'dp' → logprob: -6.16588020324707
    6. ' =' → logprob: -6.29088020324707
    7. '_possible' → logprob: -6.41588020324707
    8. 'for' → logprob: -7.04088020324707
    9. '_val' → logprob: -7.16588020324707
    10. '_
' → logprob: -7.16588020324707

Token 1024: ' dp' (ID: 21546)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dp' → logprob: -0.12196064740419388
    2. 'INF' → logprob: -2.4969606399536133
    3. '[' → logprob: -3.8719606399536133
    4. '(dp' → logprob: -5.121960639953613
    5. ' dp' → logprob: -6.371960639953613
    6. 'inf' → logprob: -7.871960639953613
    7. '[
' → logprob: -7.996960639953613
    8. '[k' → logprob: -8.121960639953613
    9. 'min' → logprob: -8.246960639953613
    10. '[in' → logprob: -8.371960639953613

Token 1025: '[next' (ID: 103383)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.4590763747692108
    2. '=' → logprob: -2.334076404571533
    3. '
' → logprob: -2.334076404571533
    4. 'for' → logprob: -3.084076404571533
    5. '           ' → logprob: -3.459076404571533
    6. ' for' → logprob: -4.459076404571533
    7. '_tokens' → logprob: -4.584076404571533
    8. '   ' → logprob: -4.959076404571533
    9. ' +' → logprob: -5.209076404571533
    10. ')' → logprob: -5.334076404571533

Token 1026: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.03654676303267479
    2. ']+' → logprob: -4.03654670715332
    3. '+' → logprob: -4.41154670715332
    4. ']
' → logprob: -5.53654670715332
    5. '[next' → logprob: -7.91154670715332
    6. ' +' → logprob: -8.03654670715332
    7. '           ' → logprob: -8.41154670715332
    8. '']' → logprob: -8.91154670715332
    9. '                   ' → logprob: -9.16154670715332
    10. ')' → logprob: -9.16154670715332

Token 1027: ' sur' (ID: 1512)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.1701665222644806
    2. 'for' → logprob: -3.545166492462158
    3. ' for' → logprob: -3.920166492462158
    4. '<|end|>' → logprob: -4.045166492462158
    5. ' =' → logprob: -4.295166492462158
    6. '+' → logprob: -4.670166492462158
    7. '<|end|>' → logprob: -4.670166492462158
    8. '=' → logprob: -4.920166492462158
    9. ' +' → logprob: -5.045166492462158
    10. '           ' → logprob: -5.045166492462158

Token 1028: ' chaque' (ID: 21194)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.4192129373550415
    2. 'range' → logprob: -1.1692129373550415
    3. 'sets' → logprob: -4.419212818145752
    4. ' range' → logprob: -4.544212818145752
    5. ' k' → logprob: -5.044212818145752
    6. '[' → logprob: -6.669212818145752
    7. '[k' → logprob: -7.419212818145752
    8. ' sets' → logprob: -8.04421329498291
    9. 'graph' → logprob: -8.79421329498291
    10. 'set' → logprob: -9.54421329498291

Token 1029: ' choix' (ID: 28642)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.11082186549901962
    2. ' k' → logprob: -2.6108219623565674
    3. '_k' → logprob: -4.610821723937988
    4. ']' → logprob: -5.360821723937988
    5. '_sets' → logprob: -5.610821723937988
    6. ' sets' → logprob: -6.110821723937988
    7. 'sets' → logprob: -6.235821723937988
    8. ' range' → logprob: -6.985821723937988
    9. '_graph' → logprob: -6.985821723937988
    10. 'range' → logprob: -6.985821723937988

Token 1030: ' k' (ID: 372)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -1.1718332767486572
    2. ' =' → logprob: -2.0468332767486572
    3. '_' → logprob: -2.0468332767486572
    4. 'for' → logprob: -2.6718332767486572
    5. '           ' → logprob: -2.7968332767486572
    6. '_tokens' → logprob: -2.7968332767486572
    7. '_k' → logprob: -2.9218332767486572
    8. 'tokens' → logprob: -3.7968332767486572
    9. '   ' → logprob: -4.421833038330078
    10. '+' → logprob: -4.421833038330078

Token 1031: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.4323548376560211
    2. '<|end|>' → logprob: -2.1823549270629883
    3. '<|end|>' → logprob: -2.4323549270629883
    4. ':' → logprob: -3.0573549270629883
    5. '           ' → logprob: -3.4323549270629883
    6. ')' → logprob: -4.557354927062988
    7. '=' → logprob: -4.807354927062988
    8. ' =' → logprob: -4.932354927062988
    9. ' ' → logprob: -5.057354927062988
    10. '   ' → logprob: -5.307354927062988

Token 1032: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.7677257657051086
    2. ' =' → logprob: -1.8927257061004639
    3. '+' → logprob: -2.642725706100464
    4. ':' → logprob: -2.892725706100464
    5. ' for' → logprob: -3.142725706100464
    6. ' +' → logprob: -3.267725706100464
    7. '=' → logprob: -3.267725706100464
    8. '```' → logprob: -3.392725706100464
    9. '   ' → logprob: -4.017725944519043
    10. 'for' → logprob: -4.267725944519043

Token 1033: ' possible' (ID: 4149)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.0301226377487183
    2. ' for' → logprob: -1.1551226377487183
    3. '           ' → logprob: -2.655122756958008
    4. 'min' → logprob: -2.780122756958008
    5. 'possible' (adapté à ' possible') → logprob: -2.905122756958008
    6. 'all' → logprob: -3.030122756958008
    7. ' min' → logprob: -3.280122756958008
    8. ' possible' → logprob: -3.905122756958008
    9. 'found' → logprob: -5.155122756958008
    10. 'max' → logprob: -5.280122756958008

Token 1034: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5245732665061951
    2. ' =' → logprob: -0.8995732665061951
    3. ':' → logprob: -7.02457332611084
    4. '   ' → logprob: -8.77457332611084
    5. 'for' → logprob: -8.89957332611084
    6. '=True' → logprob: -10.27457332611084
    7. '           ' → logprob: -10.64957332611084
    8. ' ' → logprob: -10.77457332611084
    9. ',' → logprob: -10.89957332611084
    10. '    ' → logprob: -11.02457332611084

Token 1035: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.14532774686813354
    2. ' True' → logprob: -2.3953278064727783
    3. 'False' → logprob: -3.1453278064727783
    4. ' False' → logprob: -6.895327568054199
    5. '   ' → logprob: -9.8953275680542
    6. '0' → logprob: -13.2703275680542
    7. '(True' → logprob: -14.6453275680542
    8. '=True' → logprob: -15.7703275680542
    9. '[]' → logprob: -16.270328521728516
    10. '    ' → logprob: -16.395328521728516

Token 1036: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.14323385059833527
    2. ':' → logprob: -2.6432337760925293
    3. '<|end|>' → logprob: -4.268233776092529
    4. ')' → logprob: -4.893233776092529
    5. ':
' → logprob: -5.143233776092529
    6. '            ' → logprob: -5.143233776092529
    7. '               ' → logprob: -5.643233776092529
    8. '
' → logprob: -6.143233776092529
    9. '<|end|>' → logprob: -6.143233776092529
    10. ' ' → logprob: -6.268233776092529

Token 1037: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0032336791045963764
    2. ':' → logprob: -7.628233909606934
    3. '            
' → logprob: -7.628233909606934
    4. ')' → logprob: -8.128233909606934
    5. '            ' → logprob: -8.253233909606934
    6. '   ' → logprob: -8.378233909606934
    7. ' 
' → logprob: -8.503233909606934
    8. ' ' → logprob: -8.628233909606934
    9. '<|end|>' → logprob: -8.628233909606934
    10. '               ' → logprob: -8.878233909606934

Token 1038: ' max' (ID: 2999)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.3522542417049408
    2. ' for' → logprob: -1.3522542715072632
    3. 'for' → logprob: -3.3522541522979736
    4. '		' → logprob: -7.102254390716553
    5. ' ' → logprob: -7.227254390716553
    6. '
' → logprob: -8.477253913879395
    7. '	       ' → logprob: -8.477253913879395
    8. '	for' → logprob: -8.727253913879395
    9. ' ' → logprob: -8.852253913879395
    10. '               ' → logprob: -8.977253913879395

Token 1039: '_over' (ID: 34788)
  Prédit: '_min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_min' → logprob: -0.005286411382257938
    2. '=' → logprob: -6.00528621673584
    3. ' =' → logprob: -7.00528621673584
    4. 'min' → logprob: -7.25528621673584
    5. '_val' → logprob: -8.25528621673584
    6. '_max' → logprob: -8.63028621673584
    7. '(min' → logprob: -8.63028621673584
    8. '_tokens' → logprob: -9.13028621673584
    9. '_token' → logprob: -9.75528621673584
    10. '_' → logprob: -10.00528621673584

Token 1040: '_choices' (ID: 163292)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.6837949156761169
    2. ' k' → logprob: -1.1837949752807617
    3. '_k' → logprob: -2.0587949752807617
    4. 'all' → logprob: -4.808794975280762
    5. '   ' → logprob: -4.933794975280762
    6. 'range' → logprob: -5.058794975280762
    7. '_sets' → logprob: -5.308794975280762
    8. '[' → logprob: -5.683794975280762
    9. ' sets' → logprob: -5.808794975280762
    10. 'sets' → logprob: -5.808794975280762

Token 1041: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.22544707357883453
    2. '=' → logprob: -1.6004470586776733
    3. ' ' → logprob: -11.600446701049805
    4. ' +=' → logprob: -11.725446701049805
    5. '            ' → logprob: -12.225446701049805
    6. '           ' → logprob: -12.850446701049805
    7. '+=' → logprob: -13.100446701049805
    8. '=max' → logprob: -13.600446701049805
    9. '   ' → logprob: -13.725446701049805
    10. ',' → logprob: -14.225446701049805

Token 1042: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.35323333740234375
    2. '-INF' → logprob: -1.2282333374023438
    3. '-inf' → logprob: -5.978233337402344
    4. '-IN' → logprob: -7.103233337402344
    5. ' -' → logprob: -7.228233337402344
    6. '0' → logprob: -7.728233337402344
    7. '-In' → logprob: -9.228233337402344
    8. 'INF' → logprob: -9.978233337402344
    9. '-in' → logprob: -9.978233337402344
    10. '   ' → logprob: -11.228233337402344

Token 1043: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -9.627176768844947e-05
    2. 'INF' → logprob: -10.000096321105957
    3. ' ' → logprob: -10.250096321105957
    4. '   ' → logprob: -11.625096321105957
    5. 'inf' → logprob: -13.250096321105957
    6. 'float' → logprob: -14.000096321105957
    7. '2' → logprob: -14.125096321105957
    8. '           ' → logprob: -14.375096321105957
    9. '
' → logprob: -14.375096321105957
    10. '```' → logprob: -14.750096321105957

Token 1044: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.1107281893491745
    2. '           ' → logprob: -2.7357282638549805
    3. '            
' → logprob: -4.6107282638549805
    4. '<|end|>' → logprob: -4.9857282638549805
    5. ' 
' → logprob: -5.3607282638549805
    6. '  
' → logprob: -5.7357282638549805
    7. ':' → logprob: -6.1107282638549805
    8. ':
' → logprob: -6.2357282638549805
    9. '<|end|>' → logprob: -6.3607282638549805
    10. '=' → logprob: -6.3607282638549805

Token 1045: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.08237984776496887
    2. '
' → logprob: -3.2073798179626465
    3. '            
' → logprob: -4.5823798179626465
    4. ' 
' → logprob: -4.7073798179626465
    5. ':' → logprob: -5.7073798179626465
    6. '  
' → logprob: -5.7073798179626465
    7. '<|end|>' → logprob: -6.0823798179626465
    8. ':
' → logprob: -6.4573798179626465
    9. ' ' → logprob: -6.4573798179626465
    10. '    
' → logprob: -6.9573798179626465

Token 1046: ' for' (ID: 395)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.34377142786979675
    2. ' for' → logprob: -1.8437714576721191
    3. 'for' (adapté à ' for') → logprob: -2.593771457672119
    4. ' max' → logprob: -3.468771457672119
    5. ' min' → logprob: -4.468771457672119
    6. 'max' → logprob: -5.468771457672119
    7. 'min' → logprob: -5.968771457672119
    8. '0' → logprob: -6.718771457672119
    9. '
' → logprob: -6.718771457672119
    10. 'possible' → logprob: -6.718771457672119

Token 1047: ' g' (ID: 329)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.12997125089168549
    2. 'g' → logprob: -3.0049712657928467
    3. 'graph' → logprob: -3.1299712657928467
    4. 'kg' → logprob: -4.379971027374268
    5. 'edges' → logprob: -5.129971027374268
    6. 'ks' → logprob: -5.754971027374268
    7. 'idx' → logprob: -6.254971027374268
    8. 'step' → logprob: -6.379971027374268
    9. 'choice' → logprob: -7.254971027374268
    10. 'kgs' → logprob: -7.629971027374268

Token 1048: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.04320859536528587
    2. 'in' → logprob: -3.168208599090576
    3. ' ' → logprob: -10.043208122253418
    4. '[' → logprob: -10.168208122253418
    5. '_idx' → logprob: -11.043208122253418
    6. '_in' → logprob: -11.293208122253418
    7. ' _' → logprob: -11.418208122253418
    8. '_' → logprob: -11.418208122253418
    9. 'k' → logprob: -11.543208122253418
    10. '  ' → logprob: -11.793208122253418

Token 1049: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -4.842555426876061e-06
    2. ' k' → logprob: -12.250004768371582
    3. '   ' → logprob: -19.8750057220459
    4. '[k' → logprob: -20.1250057220459
    5. '[' → logprob: -20.7500057220459
    6. '{k' → logprob: -21.5000057220459
    7. '	k' → logprob: -22.6250057220459
    8. 'range' → logprob: -23.0000057220459
    9. '           ' → logprob: -23.2500057220459
    10. ' ' → logprob: -23.2500057220459

Token 1050: 'step' (ID: 17509)
  Prédit: 'step'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'step' → logprob: -2.3319124011322856e-05
    2. '_step' → logprob: -11.000022888183594
    3. ' step' → logprob: -12.875022888183594
    4. 'k' → logprob: -14.250022888183594
    5. '[' → logprob: -14.500022888183594
    6. '(step' → logprob: -14.500022888183594
    7. 's' → logprob: -14.625022888183594
    8. ')' → logprob: -14.750022888183594
    9. '=' → logprob: -15.500022888183594
    10. 'set' → logprob: -15.625022888183594

Token 1051: '_graph' (ID: 33441)
  Prédit: '_graph'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_graph' → logprob: -1.1517960956552997e-05
    2. 's' → logprob: -11.875011444091797
    3. '_g' → logprob: -13.000011444091797
    4. '_' → logprob: -14.125011444091797
    5. 'graphs' → logprob: -14.500011444091797
    6. '_gr' → logprob: -15.500011444091797
    7. '_s' → logprob: -15.875011444091797
    8. 'graph' → logprob: -16.500011444091797
    9. ' _' → logprob: -16.625011444091797
    10. '\' → logprob: -16.625011444091797

Token 1052: 's' (ID: 82)
  Prédit: 's'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -1.1637164789135568e-05
    2. '_s' → logprob: -12.750011444091797
    3. '_graph' → logprob: -12.875011444091797
    4. '[s' → logprob: -13.875011444091797
    5. 'graphs' → logprob: -14.125011444091797
    6. 'sg' → logprob: -14.250011444091797
    7. ' s' → logprob: -14.250011444091797
    8. 'g' → logprob: -14.625011444091797
    9. ')' → logprob: -15.125011444091797
    10. 'raph' → logprob: -15.375011444091797

Token 1053: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.10095211118459702
    2. ':
' → logprob: -2.3509521484375
    3. '               ' → logprob: -8.1009521484375
    4. '           ' → logprob: -8.7259521484375
    5. ' :' → logprob: -8.9759521484375
    6. '=' → logprob: -9.8509521484375
    7. '[' → logprob: -10.8509521484375
    8. '):
' → logprob: -11.2259521484375
    9. ' :
' → logprob: -11.2259521484375
    10. ' =' → logprob: -11.7259521484375

Token 1054: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.0008205882040783763
    2. ':' → logprob: -8.12582015991211
    3. '                
' → logprob: -8.50082015991211
    4. ':
' → logprob: -9.12582015991211
    5. ',' → logprob: -10.37582015991211
    6. '           ' → logprob: -10.62582015991211
    7. '   ' → logprob: -11.00082015991211
    8. '    
' → logprob: -11.25082015991211
    9. '[' → logprob: -11.37582015991211
    10. '+' → logprob: -11.62582015991211

Token 1055: ' next' (ID: 2613)
  Prédit: 'next'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'next' (adapté à ' next') → logprob: -0.3760967254638672
    2. '               ' → logprob: -2.126096725463867
    3. 'min' → logprob: -2.376096725463867
    4. 'reachable' → logprob: -3.251096725463867
    5. 'possible' → logprob: -3.501096725463867
    6. 'nodes' → logprob: -4.126096725463867
    7. '   ' → logprob: -6.126096725463867
    8. 'mins' → logprob: -6.251096725463867
    9. ' next' → logprob: -6.376096725463867
    10. 'neighbors' → logprob: -6.376096725463867

Token 1056: '_nodes' (ID: 34593)
  Prédit: '_nodes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_nodes' → logprob: -0.005419211462140083
    2. 's' → logprob: -5.3804192543029785
    3. 'nodes' → logprob: -7.2554192543029785
    4. ' =' → logprob: -10.88041877746582
    5. '_list' → logprob: -10.88041877746582
    6. '=' → logprob: -11.25541877746582
    7. '               ' → logprob: -11.63041877746582
    8. '_vals' → logprob: -12.13041877746582
    9. 'Nodes' → logprob: -12.38041877746582
    10. '_states' → logprob: -13.13041877746582

Token 1057: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.474164217710495
    2. ' =' → logprob: -0.9741642475128174
    3. '               ' → logprob: -10.224164009094238
    4. '                ' → logprob: -10.474164009094238
    5. '                   ' → logprob: -11.474164009094238
    6. ':' → logprob: -12.349164009094238
    7. '                    ' → logprob: -13.099164009094238
    8. '            ' → logprob: -13.724164009094238
    9. '=max' → logprob: -14.599164009094238
    10. '=node' → logprob: -14.599164009094238

Token 1058: ' g' (ID: 329)
  Prédit: 'g'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'g' → logprob: -0.0011732018319889903
    2. ' g' → logprob: -6.75117301940918
    3. '   ' → logprob: -13.62617301940918
    4. '[g' → logprob: -14.75117301940918
    5. '	g' → logprob: -14.87617301940918
    6. '           ' → logprob: -14.87617301940918
    7. '       ' → logprob: -15.50117301940918
    8. 'graph' → logprob: -15.50117301940918
    9. '               ' → logprob: -16.50117301940918
    10. '                   ' → logprob: -17.12617301940918

Token 1059: '[node' (ID: 67268)
  Prédit: '[node'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[node' → logprob: -1.1472419600977446e-06
    2. '[' → logprob: -14.625000953674316
    3. 'node' → logprob: -15.125000953674316
    4. '(node' → logprob: -15.875000953674316
    5. '=node' → logprob: -16.125001907348633
    6. ' [' → logprob: -17.125001907348633
    7. '```' → logprob: -18.125001907348633
    8. '[
' → logprob: -18.375001907348633
    9. '[user' → logprob: -18.750001907348633
    10. '   ' → logprob: -19.000001907348633

Token 1060: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0009209888521581888
    2. ']
' → logprob: -7.50092077255249
    3. '])' → logprob: -9.125921249389648
    4. ')]' → logprob: -9.500921249389648
    5. ')' → logprob: -9.750921249389648
    6. '<|end|>' → logprob: -9.875921249389648
    7. '<|end|>' → logprob: -10.000921249389648
    8. ' ]' → logprob: -11.375921249389648
    9. '()]' → logprob: -13.125921249389648
    10. ']()' → logprob: -13.125921249389648

Token 1061: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.1605074256658554
    2. 'if' → logprob: -2.1605074405670166
    3. ' if' → logprob: -3.5355074405670166
    4. 'min' → logprob: -6.1605072021484375
    5. 'dp' → logprob: -7.0355072021484375
    6. '
' → logprob: -8.535507202148438
    7. '```' → logprob: -8.660507202148438
    8. '                
' → logprob: -9.035507202148438
    9. 'next' → logprob: -9.660507202148438
    10. ' min' → logprob: -9.785507202148438

Token 1062: ' #' (ID: 1069)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.12245110422372818
    2. 'min' → logprob: -2.247451066970825
    3. 'best' → logprob: -6.122451305389404
    4. 'possible' → logprob: -6.747451305389404
    5. 'vals' → logprob: -6.747451305389404
    6. '               ' → logprob: -6.872451305389404
    7. 'm' → logprob: -6.997451305389404
    8. ' if' → logprob: -7.247451305389404
    9. 'mins' → logprob: -7.372451305389404
    10. 'c' → logprob: -8.122450828552246

Token 1063: ' Si' (ID: 7832)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.06394714117050171
    2. 'min' → logprob: -2.9389472007751465
    3. 'best' → logprob: -6.0639472007751465
    4. 'vals' → logprob: -6.0639472007751465
    5. 'mins' → logprob: -6.9389472007751465
    6. 'next' → logprob: -7.1889472007751465
    7. 'm' → logprob: -7.5639472007751465
    8. 'possible' → logprob: -7.9389472007751465
    9. 'c' → logprob: -7.9389472007751465
    10. ' if' → logprob: -8.563946723937988

Token 1064: ' pas' (ID: 2173)
  Prédit: 'not'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'not' → logprob: -0.007086522877216339
    2. ' not' → logprob: -5.007086753845215
    3. 'len' → logprob: -8.007086753845215
    4. 'next' → logprob: -10.757086753845215
    5. 'all' → logprob: -11.132086753845215
    6. '   ' → logprob: -14.257086753845215
    7. '       ' → logprob: -14.507086753845215
    8. ' len' → logprob: -14.757086753845215
    9. '           ' → logprob: -15.507086753845215
    10. '(not' → logprob: -16.2570858001709

Token 1065: ' d' (ID: 272)
  Prédit: 'next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'next' → logprob: -0.25223731994628906
    2. ' next' → logprob: -1.502237319946289
    3. 'len' → logprob: -8.877237319946289
    4. '[next' → logprob: -9.627237319946289
    5. '(next' → logprob: -10.627237319946289
    6. 'possible' → logprob: -10.627237319946289
    7. 'not' → logprob: -11.002237319946289
    8. ' len' → logprob: -12.127237319946289
    9. '	next' → logprob: -12.252237319946289
    10. ' possible' → logprob: -12.252237319946289

Token 1066: ''ar' (ID: 54307)
  Prédit: 'next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'next' → logprob: -0.019601663574576378
    2. ' next' → logprob: -4.144601821899414
    3. 'e' → logprob: -6.144601821899414
    4. '_next' → logprob: -7.394601821899414
    5. '[next' → logprob: -8.144601821899414
    6. '(next' → logprob: -9.019601821899414
    7. 'en' → logprob: -9.519601821899414
    8. 'len' → logprob: -9.769601821899414
    9. 'ext' → logprob: -9.769601821899414
    10. '`' → logprob: -10.519601821899414

Token 1067: 'êtes' (ID: 23720)
  Prédit: 'êtes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'êtes' → logprob: -0.01306786946952343
    2. 'ête' → logprob: -4.638067722320557
    3. 'cs' → logprob: -6.388067722320557
    4. 'g' → logprob: -7.388067722320557
    5. 'tes' → logprob: -8.263068199157715
    6. 'ètes' → logprob: -8.388068199157715
    7. 'c' → logprob: -9.013068199157715
    8. 'ê' → logprob: -9.388068199157715
    9. 'etes' → logprob: -9.763068199157715
    10. 'edges' → logprob: -9.888068199157715

Token 1068: ',' (ID: 11)
  Prédit: ' or'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.34963056445121765
    2. ':' → logprob: -1.72463059425354
    3. '               ' → logprob: -2.97463059425354
    4. '==' → logprob: -3.34963059425354
    5. ' ==' → logprob: -4.599630355834961
    6. 'or' → logprob: -4.974630355834961
    7. ' ou' → logprob: -5.224630355834961
    8. '                   ' → logprob: -5.474630355834961
    9. '=' → logprob: -6.599630355834961
    10. ' :' → logprob: -7.724630355834961

Token 1069: ' on' (ID: 402)
  Prédit: 'possible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'possible' → logprob: -0.06336559355258942
    2. 'if' → logprob: -3.3133656978607178
    3. ' possible' → logprob: -4.063365459442139
    4. '                   ' → logprob: -5.563365459442139
    5. ' if' → logprob: -6.063365459442139
    6. 'max' → logprob: -7.063365459442139
    7. '               ' → logprob: -7.563365459442139
    8. '#' → logprob: -9.563365936279297
    9. ' max' → logprob: -10.188365936279297
    10. 'continue' → logprob: -10.313365936279297

Token 1070: ' perd' (ID: 17696)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '               ' → logprob: -1.4045463800430298
    2. 'continue' → logprob: -1.4045463800430298
    3. 'n' → logprob: -2.1545462608337402
    4. 'if' → logprob: -2.2795462608337402
    5. '                   ' → logprob: -2.6545462608337402
    6. '           ' → logprob: -2.7795462608337402
    7. ' continue' → logprob: -2.9045462608337402
    8. '```' → logprob: -3.9045462608337402
    9. ' n' → logprob: -4.27954626083374
    10. ':' → logprob: -4.27954626083374

Token 1071: ' (' (ID: 350)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.07833373546600342
    2. ':' → logprob: -3.328333854675293
    3. '                   ' → logprob: -3.453333854675293
    4. ' or' → logprob: -6.078333854675293
    5. ':
' → logprob: -6.328333854675293
    6. ' =' → logprob: -6.828333854675293
    7. ',' → logprob: -7.203333854675293
    8. ' :' → logprob: -7.828333854675293
    9. '.' → logprob: -8.203333854675293
    10. ')' → logprob: -8.328333854675293

Token 1072: 'car' (ID: 6830)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.3962891697883606
    2. '               ' → logprob: -2.521289110183716
    3. '                   ' → logprob: -2.521289110183716
    4. 'not' → logprob: -2.771289110183716
    5. 'possible' → logprob: -2.771289110183716
    6. ' True' → logprob: -4.146289348602295
    7. ')' → logprob: -4.896289348602295
    8. 'len' → logprob: -5.646289348602295
    9. ' not' → logprob: -6.021289348602295
    10. '           ' → logprob: -6.021289348602295

Token 1073: ' on' (ID: 402)
  Prédit: 'possible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'possible' → logprob: -0.8899655342102051
    2. 'len' → logprob: -1.389965534210205
    3. ' possible' → logprob: -2.514965534210205
    4. 'True' → logprob: -2.764965534210205
    5. 'not' → logprob: -3.264965534210205
    6. ' len' → logprob: -3.389965534210205
    7. 'max' → logprob: -3.389965534210205
    8. ' True' → logprob: -3.764965534210205
    9. ' not' → logprob: -4.264965534210205
    10. 'true' → logprob: -4.389965534210205

Token 1074: ' doit' (ID: 21822)
  Prédit: 'ne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ne' → logprob: -0.5698782801628113
    2. 'n' → logprob: -1.194878339767456
    3. 'cannot' → logprob: -2.819878339767456
    4. 'continue' → logprob: -3.569878339767456
    5. ' ne' → logprob: -4.194878101348877
    6. 'do' → logprob: -4.319878101348877
    7. 'can't' → logprob: -5.319878101348877
    8. ' n' → logprob: -5.444878101348877
    9. ' cannot' → logprob: -6.444878101348877
    10. 'pe' → logprob: -6.944878101348877

Token 1075: ' faire' (ID: 8119)
  Prédit: 'contin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'contin' → logprob: -0.29723405838012695
    2. ' continuer' → logprob: -2.297234058380127
    3. 'max' → logprob: -3.547234058380127
    4. 'consider' → logprob: -4.047234058380127
    5. 'continue' → logprob: -4.547234058380127
    6. 'not' → logprob: -4.547234058380127
    7. ' choisir' → logprob: -4.797234058380127
    8. ' pouvoir' → logprob: -4.797234058380127
    9. ' considérer' → logprob: -4.797234058380127
    10. 'possible' → logprob: -5.047234058380127

Token 1076: ' exactement' (ID: 108701)
  Prédit: 'exact'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'exact' → logprob: -0.2197212129831314
    2. 'au' → logprob: -2.0947213172912598
    3. 'un' → logprob: -2.9697213172912598
    4. ' au' → logprob: -4.09472131729126
    5. ' exactement' → logprob: -6.21972131729126
    6. 'une' → logprob: -6.21972131729126
    7. ' un' → logprob: -7.21972131729126
    8. 'quel' → logprob: -7.96972131729126
    9. ' exactly' → logprob: -7.96972131729126
    10. '```' → logprob: -8.469720840454102

Token 1077: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.10021896660327911
    2. ' k' → logprob: -2.3502190113067627
    3. ' ' → logprob: -12.600218772888184
    4. '1' → logprob: -12.725218772888184
    5. '                   ' → logprob: -13.475218772888184
    6. '```' → logprob: -13.975218772888184
    7. '               ' → logprob: -14.475218772888184
    8. '
' → logprob: -14.600218772888184
    9. ')' → logprob: -15.100218772888184
    10. '`' → logprob: -15.225218772888184

Token 1078: ' pas' (ID: 2173)
  Prédit: ' steps'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' steps' → logprob: -1.1128119230270386
    2. ' pas' → logprob: -1.2378119230270386
    3. 'pas' → logprob: -1.8628119230270386
    4. '_steps' → logprob: -2.237812042236328
    5. 'steps' → logprob: -3.737812042236328
    6. ' _' → logprob: -3.862812042236328
    7. '_pas' → logprob: -4.112812042236328
    8. '_' → logprob: -4.362812042236328
    9. ' step' → logprob: -4.362812042236328
    10. ' pasos' → logprob: -4.487812042236328

Token 1079: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.22492408752441406
    2. '               ' → logprob: -1.849924087524414
    3. '):' → logprob: -4.349924087524414
    4. '):
' → logprob: -4.849924087524414
    5. '                   ' → logprob: -4.974924087524414
    6. ' )' → logprob: -5.099924087524414
    7. ')
' → logprob: -5.974924087524414
    8. ',' → logprob: -6.224924087524414
    9. ').' → logprob: -6.599924087524414
    10. '),' → logprob: -7.349924087524414

Token 1080: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.0013526180991902947
    2. '                   ' → logprob: -7.626352787017822
    3. ')' → logprob: -8.501352310180664
    4. ' if' → logprob: -8.876352310180664
    5. '                
' → logprob: -8.876352310180664
    6. ',' → logprob: -9.376352310180664
    7. '```' → logprob: -9.751352310180664
    8. ' or' → logprob: -10.001352310180664
    9. '                ' → logprob: -10.751352310180664
    10. '                       ' → logprob: -10.751352310180664

Token 1081: ' if' (ID: 538)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.958096981048584
    2. ' if' → logprob: -0.958096981048584
    3. 'if' (adapté à ' if') → logprob: -1.458096981048584
    4. '                   ' → logprob: -10.833097457885742
    5. '           ' → logprob: -11.333097457885742
    6. '
' → logprob: -11.583097457885742
    7. '```' → logprob: -11.708097457885742
    8. '                
' → logprob: -11.833097457885742
    9. '   ' → logprob: -11.958097457885742
    10. '                ' → logprob: -12.333097457885742

Token 1082: ' not' (ID: 625)
  Prédit: 'not'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'not' → logprob: -0.3216640055179596
    2. 'len' → logprob: -1.3216639757156372
    3. ' not' → logprob: -4.821663856506348
    4. ' len' → logprob: -8.071663856506348
    5. '(len' → logprob: -13.946663856506348
    6. '(not' → logprob: -15.571663856506348
    7. '   ' → logprob: -15.821663856506348
    8. '```' → logprob: -16.446664810180664
    9. '	not' → logprob: -17.196664810180664
    10. '	len' → logprob: -17.321664810180664

Token 1083: ' next' (ID: 2613)
  Prédit: 'next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'next' → logprob: -0.0015024791937321424
    2. ' next' → logprob: -6.501502513885498
    3. '(next' → logprob: -16.251502990722656
    4. '[next' → logprob: -18.751502990722656
    5. '	next' → logprob: -18.876502990722656
    6. 'len' → logprob: -19.376502990722656
    7. '.next' → logprob: -21.251502990722656
    8. '
' → logprob: -21.876502990722656
    9. '_next' → logprob: -22.001502990722656
    10. 'g' → logprob: -22.876502990722656

Token 1084: '_nodes' (ID: 34593)
  Prédit: '_nodes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_nodes' → logprob: -4.723352049040841e-06
    2. 'nodes' → logprob: -13.250004768371582
    3. '_' → logprob: -14.000004768371582
    4. 's' → logprob: -15.125004768371582
    5. '_n' → logprob: -15.250004768371582
    6. '_node' → logprob: -15.500004768371582
    7. '_next' → logprob: -15.750004768371582
    8. '               ' → logprob: -15.875004768371582
    9. '                   ' → logprob: -15.875004768371582
    10. ' _' → logprob: -15.875004768371582

Token 1085: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.08927270025014877
    2. ':
' → logprob: -2.4642727375030518
    3. '):' → logprob: -9.339272499084473
    4. ' or' → logprob: -9.464272499084473
    5. '               ' → logprob: -9.964272499084473
    6. '):
' → logprob: -10.589272499084473
    7. ':return' → logprob: -10.714272499084473
    8. ')' → logprob: -11.214272499084473
    9. '==' → logprob: -11.214272499084473
    10. '                   ' → logprob: -11.339272499084473

Token 1086: '                   ' (ID: 699)
  Prédit: '                   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.006471760105341673
    2. '               ' → logprob: -5.131471633911133
    3. '                       ' → logprob: -7.756471633911133
    4. '           ' → logprob: -10.381471633911133
    5. '```' → logprob: -11.006471633911133
    6. ',' → logprob: -11.131471633911133
    7. '                  ' → logprob: -11.631471633911133
    8. ':
' → logprob: -11.756471633911133
    9. '   ' → logprob: -12.006471633911133
    10. '                 ' → logprob: -12.131471633911133

Token 1087: ' #' (ID: 1069)
  Prédit: 'possible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'possible' → logprob: -0.15150542557239532
    2. '                   ' → logprob: -2.401505470275879
    3. ' possible' → logprob: -3.401505470275879
    4. '               ' → logprob: -4.401505470275879
    5. '                       ' → logprob: -5.901505470275879
    6. '
' → logprob: -7.151505470275879
    7. '   ' → logprob: -8.401505470275879
    8. '           ' → logprob: -8.401505470275879
    9. '       ' → logprob: -8.526505470275879
    10. '```' → logprob: -9.651505470275879

Token 1088: ' Cela' (ID: 44403)
  Prédit: 'possible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'possible' → logprob: -0.0013013073476031423
    2. ' possible' → logprob: -6.751301288604736
    3. '                   ' → logprob: -9.126301765441895
    4. '               ' → logprob: -11.376301765441895
    5. '   ' → logprob: -12.501301765441895
    6. '           ' → logprob: -12.626301765441895
    7. 'max' → logprob: -13.376301765441895
    8. '
' → logprob: -13.876301765441895
    9. '```' → logprob: -14.876301765441895
    10. 'poss' → logprob: -15.626301765441895

Token 1089: ' signifie' (ID: 81149)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.15238672494888306
    2. ' =' → logprob: -2.9023866653442383
    3. '                   ' → logprob: -3.2773866653442383
    4. '               ' → logprob: -3.4023866653442383
    5. 'est' → logprob: -5.402386665344238
    6. '           ' → logprob: -5.902386665344238
    7. 'continue' → logprob: -6.902386665344238
    8. 'means' → logprob: -7.277386665344238
    9. 'im' → logprob: -7.402386665344238
    10. ':' → logprob: -7.527386665344238

Token 1090: ' qu' (ID: 474)
  Prédit: 'possible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'possible' → logprob: -0.06449079513549805
    2. ' possible' → logprob: -2.814490795135498
    3. '                   ' → logprob: -6.064490795135498
    4. '                       ' → logprob: -9.564491271972656
    5. '               ' → logprob: -9.564491271972656
    6. ' impossible' → logprob: -10.689491271972656
    7. '_possible' → logprob: -10.689491271972656
    8. 'Possible' → logprob: -12.689491271972656
    9. '           ' → logprob: -13.064491271972656
    10. ' posible' → logprob: -13.564491271972656

Token 1091: ''' (ID: 6)
  Prédit: 'possible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'possible' → logprob: -0.020691365003585815
    2. ' possible' → logprob: -3.895691394805908
    3. '   ' → logprob: -10.14569091796875
    4. '           ' → logprob: -10.14569091796875
    5. '                   ' → logprob: -10.77069091796875
    6. '               ' → logprob: -10.89569091796875
    7. '_possible' → logprob: -12.14569091796875
    8. ' impossible' → logprob: -12.52069091796875
    9. 'True' → logprob: -12.64569091796875
    10. 'poss' → logprob: -12.89569091796875

Token 1092: 'avec' (ID: 64065)
  Prédit: 'possible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'possible' → logprob: -0.23852838575839996
    2. 'on' → logprob: -1.6135283708572388
    3. ' possible' → logprob: -6.113528251647949
    4. '#' → logprob: -6.363528251647949
    5. 'True' → logprob: -6.488528251647949
    6. 'im' → logprob: -6.488528251647949
    7. ' on' → logprob: -6.613528251647949
    8. 'il' → logprob: -7.238528251647949
    9. 'le' → logprob: -7.363528251647949
    10. ''on' → logprob: -7.488528251647949

Token 1093: ' cette' (ID: 7696)
  Prédit: ' ce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ce' → logprob: -0.2134026736021042
    2. ' cette' → logprob: -3.33840274810791
    3. 'k' → logprob: -3.83840274810791
    4. 'le' → logprob: -3.83840274810791
    5. 'len' → logprob: -3.96340274810791
    6. 'cho' → logprob: -3.96340274810791
    7. ' k' → logprob: -4.33840274810791
    8. 'ce' → logprob: -4.33840274810791
    9. ' le' → logprob: -4.71340274810791
    10. 'l' → logprob: -4.96340274810791

Token 1094: ' longueur' (ID: 104613)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.5364982485771179
    2. ' choice' → logprob: -1.6614983081817627
    3. 'k' → logprob: -2.1614983081817627
    4. 'choice' → logprob: -2.4114983081817627
    5. ' choix' → logprob: -4.911498069763184
    6. ' g' → logprob: -5.536498069763184
    7. 'g' → logprob: -5.536498069763184
    8. '_choice' → logprob: -6.161498069763184
    9. 'cho' → logprob: -7.161498069763184
    10. ')' → logprob: -8.286498069763184

Token 1095: ',' (ID: 11)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.12295343726873398
    2. ' k' → logprob: -3.497953414916992
    3. ',' → logprob: -3.622953414916992
    4. 'de' → logprob: -3.622953414916992
    5. 'k' → logprob: -3.997953414916992
    6. '                   ' → logprob: -5.747953414916992
    7. '               ' → logprob: -6.622953414916992
    8. ' des' → logprob: -6.872953414916992
    9. ' ,' → logprob: -6.997953414916992
    10. ' d' → logprob: -7.372953414916992

Token 1096: ' on' (ID: 402)
  Prédit: 'possible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'possible' → logprob: -0.023272618651390076
    2. ' possible' → logprob: -3.7732725143432617
    3. 'changed' → logprob: -12.398272514343262
    4. ' impossible' → logprob: -12.398272514343262
    5. '#' → logprob: -12.773272514343262
    6. '           ' → logprob: -12.773272514343262
    7. 'poss' → logprob: -12.898272514343262
    8. '_possible' → logprob: -13.148272514343262
    9. '   ' → logprob: -13.523272514343262
    10. '                   ' → logprob: -13.773272514343262

Token 1097: ' est' (ID: 893)
  Prédit: 'per'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'per' → logprob: -1.0695310831069946
    2. 'n' → logprob: -1.4445310831069946
    3. 'ne' → logprob: -1.8195310831069946
    4. ' ne' → logprob: -2.694530963897705
    5. 'max' → logprob: -3.069530963897705
    6. 'cannot' → logprob: -3.069530963897705
    7. ' n' → logprob: -3.819530963897705
    8. '                   ' → logprob: -4.319530963897705
    9. 'possible' → logprob: -4.569530963897705
    10. 'pe' → logprob: -4.819530963897705

Token 1098: ' blo' (ID: 13098)
  Prédit: 'blo'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'blo' → logprob: -0.3356812298297882
    2. ' blo' → logprob: -1.7106812000274658
    3. 'per' → logprob: -2.710681200027466
    4. 'for' → logprob: -5.085681438446045
    5. 'co' → logprob: -5.210681438446045
    6. 'b' → logprob: -5.960681438446045
    7. 'cond' → logprob: -6.210681438446045
    8. ' perdu' → logprob: -6.210681438446045
    9. 'certain' → logprob: -6.210681438446045
    10. ' coinc' → logprob: -6.460681438446045

Token 1099: 'qué' (ID: 23535)
  Prédit: 'qué'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'qué' → logprob: -0.007331287022680044
    2. 'q' → logprob: -5.507331371307373
    3. 'qu' → logprob: -5.882331371307373
    4. 'é' → logprob: -8.507330894470215
    5. 'quée' → logprob: -9.632330894470215
    6. 'c' → logprob: -10.007330894470215
    7. 'qués' → logprob: -10.132330894470215
    8. 'que' → logprob: -10.382330894470215
    9. 'què' → logprob: -11.007330894470215
    10. 'né' → logprob: -11.007330894470215

Token 1100: ' =>' (ID: 871)
  Prédit: '                   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.016729891300201416
    2. '               ' → logprob: -4.391729831695557
    3. ',' → logprob: -6.016729831695557
    4. '                       ' → logprob: -6.766729831695557
    5. '.' → logprob: -8.641730308532715
    6. '           ' → logprob: -9.016730308532715
    7. '                  ' → logprob: -9.766730308532715
    8. ':' → logprob: -10.266730308532715
    9. ';' → logprob: -10.266730308532715
    10. '                    ' → logprob: -10.641730308532715

Token 1101: ' advers' (ID: 33091)
  Prédit: 'possible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'possible' → logprob: -0.04876949265599251
    2. ' possible' → logprob: -3.048769474029541
    3. '                   ' → logprob: -8.7987699508667
    4. '               ' → logprob: -11.1737699508667
    5. '   ' → logprob: -12.0487699508667
    6. '           ' → logprob: -12.0487699508667
    7. '
' → logprob: -13.6737699508667
    8. ' impossible' → logprob: -13.6737699508667
    9. 'Possible' → logprob: -14.2987699508667
    10. '_possible' → logprob: -14.5487699508667

Token 1102: 'aire' (ID: 8189)
  Prédit: 'aire'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'aire' → logprob: -0.34540414810180664
    2. 'ère' → logprob: -2.0954041481018066
    3. 'iaire' → logprob: -2.7204041481018066
    4. 'naire' → logprob: -4.470404148101807
    5. ' advers' → logprob: -4.595404148101807
    6. ')' → logprob: -4.845404148101807
    7. 'rière' → logprob: -4.970404148101807
    8. 'inaire' → logprob: -4.970404148101807
    9. 'ataire' → logprob: -4.970404148101807
    10. 'ière' → logprob: -5.095404148101807

Token 1103: ' peut' (ID: 9216)
  Prédit: ' chois'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chois' → logprob: -0.28527361154556274
    2. 'cho' → logprob: -2.660273551940918
    3. ' peut' → logprob: -3.410273551940918
    4. '                   ' → logprob: -3.910273551940918
    5. ' choisir' → logprob: -4.035273551940918
    6. ' choisi' → logprob: -4.160273551940918
    7. ' pourra' → logprob: -4.285273551940918
    8. ')' → logprob: -4.410273551940918
    9. '_choose' → logprob: -4.785273551940918
    10. '_choice' → logprob: -5.285273551940918

Token 1104: ' for' (ID: 395)
  Prédit: 'cho'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'cho' → logprob: -0.32614222168922424
    2. ' choisir' → logprob: -2.0761423110961914
    3. 'g' → logprob: -2.8261423110961914
    4. 'faire' → logprob: -2.9511423110961914
    5. 'forcer' → logprob: -4.201142311096191
    6. 'util' → logprob: -4.951142311096191
    7. 'nous' → logprob: -5.951142311096191
    8. 'prendre' → logprob: -6.201142311096191
    9. 'blo' → logprob: -6.326142311096191
    10. 'prof' → logprob: -6.576142311096191

Token 1105: 'cer' (ID: 3308)
  Prédit: 'cer'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cer' → logprob: -0.001382378744892776
    2. 'ce' → logprob: -8.251382827758789
    3. 'cement' → logprob: -8.376382827758789
    4. 'ç' → logprob: -9.001382827758789
    5. '```' → logprob: -9.251382827758789
    6. 'mer' → logprob: -9.876382827758789
    7. 'cé' → logprob: -10.001382827758789
    8. 'acer' → logprob: -10.001382827758789
    9. '#' → logprob: -10.251382827758789
    10. 'er' → logprob: -10.563882827758789

Token 1106: ' dé' (ID: 2393)
  Prédit: '                   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                   ' → logprob: -1.4578022956848145
    2. 'le' → logprob: -1.7078022956848145
    3. ' la' → logprob: -2.2078022956848145
    4. 'possible' → logprob: -2.3328022956848145
    5. 'per' → logprob: -2.5828022956848145
    6. 'lose' → logprob: -2.7078022956848145
    7. 'la' → logprob: -2.9578022956848145
    8. 'l' → logprob: -3.5828022956848145
    9. '               ' → logprob: -3.8328022956848145
    10. '           ' → logprob: -3.9578022956848145

Token 1107: 'faite' (ID: 69848)
  Prédit: 'faite'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'faite' → logprob: -0.011125163175165653
    2. 'fait' → logprob: -4.511125087738037
    3. 'fa' → logprob: -10.386125564575195
    4. 'faire' → logprob: -10.386125564575195
    5. 'f' → logprob: -11.261125564575195
    6. 'feit' → logprob: -14.511125564575195
    7. '
' → logprob: -14.511125564575195
    8. 'fic' → logprob: -14.761125564575195
    9. 'feat' → logprob: -15.386125564575195
    10. 'part' → logprob: -15.636125564575195

Token 1108: '
' (ID: 198)
  Prédit: '                   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.024055570363998413
    2. '               ' → logprob: -3.7740554809570312
    3. ',' → logprob: -8.399055480957031
    4. '                       ' → logprob: -9.024055480957031
    5. '           ' → logprob: -9.399055480957031
    6. '
' → logprob: -9.399055480957031
    7. '.' → logprob: -9.649055480957031
    8. '                    
' → logprob: -9.774055480957031
    9. '                  ' → logprob: -10.649055480957031
    10. '   ' → logprob: -10.899055480957031

Token 1109: '                   ' (ID: 699)
  Prédit: '                   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.0004954866599291563
    2. '               ' → logprob: -8.125495910644531
    3. '                       ' → logprob: -9.375495910644531
    4. '
' → logprob: -10.000495910644531
    5. '                    
' → logprob: -10.250495910644531
    6. ',' → logprob: -11.750495910644531
    7. '           ' → logprob: -12.000495910644531
    8. '                  ' → logprob: -12.625495910644531
    9. '    
' → logprob: -12.875495910644531
    10. '```' → logprob: -13.125495910644531

Token 1110: ' possible' (ID: 4149)
  Prédit: '                   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.13020120561122894
    2. 'possible' (adapté à ' possible') → logprob: -2.2552011013031006
    3. ' possible' → logprob: -4.88020133972168
    4. '               ' → logprob: -5.00520133972168
    5. '                       ' → logprob: -6.00520133972168
    6. '
' → logprob: -8.13020133972168
    7. '           ' → logprob: -10.00520133972168
    8. '   ' → logprob: -10.00520133972168
    9. '       ' → logprob: -10.88020133972168
    10. '_possible' → logprob: -11.63020133972168

Token 1111: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.00877517368644476
    2. ' =' → logprob: -5.008775234222412
    3. '=False' → logprob: -7.258775234222412
    4. '               ' → logprob: -7.383775234222412
    5. '=True' → logprob: -7.758775234222412
    6. '                   ' → logprob: -8.133774757385254
    7. '                       ' → logprob: -11.883774757385254
    8. '           ' → logprob: -12.633774757385254
    9. '=
' → logprob: -14.383774757385254
    10. '       ' → logprob: -15.508774757385254

Token 1112: ' False' (ID: 7983)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'False' → logprob: -0.00019388488726690412
    2. ' False' → logprob: -8.75019359588623
    3. 'True' → logprob: -10.25019359588623
    4. '=False' → logprob: -18.500194549560547
    5. '(False' → logprob: -18.625194549560547
    6. ' True' → logprob: -18.625194549560547
    7. 'false' → logprob: -19.000194549560547
    8. '   ' → logprob: -20.250194549560547
    9. '
' → logprob: -20.625194549560547
    10. '```' → logprob: -21.125194549560547

Token 1113: '
' (ID: 198)
  Prédit: '                   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.003984246868640184
    2. '               ' → logprob: -5.628984451293945
    3. '                       ' → logprob: -8.128984451293945
    4. '           ' → logprob: -9.878984451293945
    5. 'continue' → logprob: -11.378984451293945
    6. '                           ' → logprob: -11.628984451293945
    7. '       ' → logprob: -12.253984451293945
    8. ' continue' → logprob: -12.503984451293945
    9. '   ' → logprob: -13.128984451293945
    10. '                  ' → logprob: -13.753984451293945

Token 1114: '                   ' (ID: 699)
  Prédit: '                   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.0006988536333665252
    2. '               ' → logprob: -7.375699043273926
    3. '                       ' → logprob: -10.375699043273926
    4. '           ' → logprob: -10.625699043273926
    5. '       ' → logprob: -12.625699043273926
    6. '                  ' → logprob: -12.875699043273926
    7. '                           ' → logprob: -12.875699043273926
    8. '<|end|>' → logprob: -13.000699043273926
    9. '   ' → logprob: -13.500699043273926
    10. 'continue' → logprob: -14.125699043273926

Token 1115: ' break' (ID: 2338)
  Prédit: '                   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.031126338988542557
    2. 'break' (adapté à ' break') → logprob: -3.5311262607574463
    3. '               ' → logprob: -7.281126499176025
    4. ' break' → logprob: -7.906126499176025
    5. 'continue' → logprob: -8.406126022338867
    6. '                       ' → logprob: -9.781126022338867
    7. '           ' → logprob: -10.656126022338867
    8. '
' → logprob: -13.156126022338867
    9. ' continue' → logprob: -13.156126022338867
    10. '   ' → logprob: -13.281126022338867

Token 1116: '
' (ID: 198)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.2017851024866104
    2. '                   ' → logprob: -1.7017850875854492
    3. '           ' → logprob: -8.32678508758545
    4. '                       ' → logprob: -10.20178508758545
    5. '                
' → logprob: -10.95178508758545
    6. '   ' → logprob: -11.32678508758545
    7. '       ' → logprob: -11.57678508758545
    8. 'continue' → logprob: -11.70178508758545
    9. '
' → logprob: -12.32678508758545
    10. '```' → logprob: -12.32678508758545

Token 1117: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.016301093623042107
    2. '                   ' → logprob: -4.266301155090332
    3. '           ' → logprob: -6.766301155090332
    4. '                
' → logprob: -8.016301155090332
    5. '  
' → logprob: -9.266301155090332
    6. '                ' → logprob: -9.516301155090332
    7. '<|end|>' → logprob: -9.516301155090332
    8. '       ' → logprob: -9.766301155090332
    9. '                    
' → logprob: -10.141301155090332
    10. '    
' → logprob: -10.391301155090332

Token 1118: ' #' (ID: 1069)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.2668779492378235
    2. '               ' → logprob: -1.6418778896331787
    3. ' min' → logprob: -3.2668778896331787
    4. 'mins' → logprob: -7.641878128051758
    5. 'current' → logprob: -8.266878128051758
    6. 'max' → logprob: -8.266878128051758
    7. '_min' → logprob: -8.516878128051758
    8. 'm' → logprob: -8.891878128051758
    9. '           ' → logprob: -9.016878128051758
    10. 'curr' → logprob: -9.266878128051758

Token 1119: ' Min' (ID: 4438)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.08679377287626266
    2. 'best' → logprob: -3.8367936611175537
    3. ' min' → logprob: -3.9617936611175537
    4. 'current' → logprob: -4.711793899536133
    5. 'curr' → logprob: -4.836793899536133
    6. 'cur' → logprob: -4.961793899536133
    7. '               ' → logprob: -5.086793899536133
    8. 'dp' → logprob: -5.586793899536133
    9. 'next' → logprob: -6.961793899536133
    10. ' cur' → logprob: -7.086793899536133

Token 1120: ' dp' (ID: 21546)
  Prédit: '_dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_dp' → logprob: -0.0015499753644689918
    2. 'dp' → logprob: -6.751550197601318
    3. '_val' → logprob: -8.00154972076416
    4. '(dp' → logprob: -11.00154972076416
    5. '_next' → logprob: -11.37654972076416
    6. '_value' → logprob: -11.62654972076416
    7. ' dp' → logprob: -12.37654972076416
    8. '	dp' → logprob: -13.87654972076416
    9. 'val' → logprob: -14.25154972076416
    10. '_min' → logprob: -14.25154972076416

Token 1121: '[next' (ID: 103383)
  Prédit: '_val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.7802521586418152
    2. '[next' → logprob: -1.03025221824646
    3. '_next' → logprob: -2.03025221824646
    4. '_value' → logprob: -3.40525221824646
    5. '_dp' → logprob: -4.780251979827881
    6. 'val' → logprob: -5.530251979827881
    7. 'next' → logprob: -5.655251979827881
    8. 'dp' → logprob: -6.780251979827881
    9. '_' → logprob: -6.780251979827881
    10. '(next' → logprob: -7.405251979827881

Token 1122: ']' (ID: 60)
  Prédit: '[next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[next' → logprob: -0.018474046140909195
    2. ']' → logprob: -4.018474102020264
    3. '[node' → logprob: -9.643473625183105
    4. '[' → logprob: -9.768473625183105
    5. '])' → logprob: -10.393473625183105
    6. ')' → logprob: -10.643473625183105
    7. '_next' → logprob: -10.893473625183105
    8. '```' → logprob: -10.893473625183105
    9. '(next' → logprob: -11.268473625183105
    10. ']+' → logprob: -11.518473625183105

Token 1123: ' parmi' (ID: 51713)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.28981515765190125
    2. '=' → logprob: -1.4148151874542236
    3. '_val' → logprob: -5.7898149490356445
    4. '=min' → logprob: -6.5398149490356445
    5. '_next' → logprob: -6.9148149490356445
    6. 'next' → logprob: -7.6648149490356445
    7. '[next' → logprob: -7.9148149490356445
    8. '_value' → logprob: -7.9148149490356445
    9. '_=' → logprob: -8.164814949035645
    10. 'val' → logprob: -8.414814949035645

Token 1124: ' next' (ID: 2613)
  Prédit: 'next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'next' → logprob: -0.021595224738121033
    2. '[next' → logprob: -4.021595001220703
    3. '(next' → logprob: -5.771595001220703
    4. ' next' → logprob: -8.396595001220703
    5. 'dp' → logprob: -9.396595001220703
    6. 'n' → logprob: -12.021595001220703
    7. 'node' → logprob: -12.896595001220703
    8. '   ' → logprob: -13.021595001220703
    9. '	next' → logprob: -13.771595001220703
    10. '[n' → logprob: -14.021595001220703

Token 1125: '_nodes' (ID: 34593)
  Prédit: '_nodes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_nodes' → logprob: -0.010052834637463093
    2. '[next' → logprob: -5.260052680969238
    3. '_dp' → logprob: -7.135052680969238
    4. 'next' → logprob: -7.510052680969238
    5. 'dp' → logprob: -7.510052680969238
    6. '(next' → logprob: -7.635052680969238
    7. '_next' → logprob: -7.635052680969238
    8. '_node' → logprob: -7.760052680969238
    9. '_' → logprob: -8.260052680969238
    10. '(dp' → logprob: -8.510052680969238

Token 1126: '
' (ID: 198)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.23666056990623474
    2. '=' → logprob: -2.6116604804992676
    3. '               ' → logprob: -2.7366604804992676
    4. '=min' → logprob: -3.3616604804992676
    5. 'min' → logprob: -3.4866604804992676
    6. 'dp' → logprob: -5.736660480499268
    7. ' min' → logprob: -6.236660480499268
    8. '[min' → logprob: -7.611660480499268
    9. '(min' → logprob: -7.861660480499268
    10. ' dp' → logprob: -8.236660957336426

Token 1127: '               ' (ID: 506)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.22765985131263733
    2. '               ' → logprob: -1.852659821510315
    3. '=' → logprob: -3.3526599407196045
    4. '                   ' → logprob: -4.977659702301025
    5. '=min' → logprob: -5.977659702301025
    6. 'min' → logprob: -7.352659702301025
    7. '           ' → logprob: -8.102660179138184
    8. '[next' → logprob: -8.352660179138184
    9. 'next' → logprob: -8.602660179138184
    10. '```' → logprob: -8.727660179138184

Token 1128: ' min' (ID: 1349)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'min' (adapté à ' min') → logprob: -0.00596991553902626
    2. ' min' → logprob: -5.380970001220703
    3. 'dp' → logprob: -7.130970001220703
    4. 'cur' → logprob: -8.130970001220703
    5. 'current' → logprob: -9.630970001220703
    6. 'temp' → logprob: -10.255970001220703
    7. '   ' → logprob: -10.755970001220703
    8. 'curr' → logprob: -10.755970001220703
    9. 'tmp' → logprob: -10.880970001220703
    10. 'next' → logprob: -11.005970001220703

Token 1129: '_dp' (ID: 133252)
  Prédit: '_dp'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_dp' → logprob: -0.009426552802324295
    2. '_val' → logprob: -5.009426593780518
    3. 'dp' → logprob: -6.384426593780518
    4. '_cost' → logprob: -7.634426593780518
    5. '_value' → logprob: -7.884426593780518
    6. '_next' → logprob: -9.13442611694336
    7. '_' → logprob: -10.38442611694336
    8. '(dp' → logprob: -12.50942611694336
    9. 'val' → logprob: -12.88442611694336
    10. '_d' → logprob: -13.13442611694336

Token 1130: '_next' (ID: 25436)
  Prédit: '[next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[next' → logprob: -0.27002131938934326
    2. '=' → logprob: -2.020021438598633
    3. '_val' → logprob: -3.520021438598633
    4. ' =' → logprob: -3.520021438598633
    5. '_next' → logprob: -3.645021438598633
    6. '_' → logprob: -4.395021438598633
    7. '_value' → logprob: -5.520021438598633
    8. '_=' → logprob: -7.395021438598633
    9. '_token' → logprob: -7.770021438598633
    10. '(next' → logprob: -7.895021438598633

Token 1131: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.3139941096305847
    2. ' =' → logprob: -1.3139941692352295
    3. '[next' → logprob: -7.43899393081665
    4. '_next' → logprob: -10.063994407653809
    5. '   ' → logprob: -10.688994407653809
    6. '=min' → logprob: -11.438994407653809
    7. '_' → logprob: -11.563994407653809
    8. '[' → logprob: -11.563994407653809
    9. ' ' → logprob: -11.688994407653809
    10. '_=' → logprob: -12.063994407653809

Token 1132: ' INF' (ID: 69196)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.35032618045806885
    2. 'INF' → logprob: -1.2253261804580688
    3. ' min' → logprob: -6.350326061248779
    4. ' INF' → logprob: -9.475326538085938
    5. 'inf' → logprob: -10.475326538085938
    6. 'MIN' → logprob: -10.850326538085938
    7. 'max' → logprob: -12.600326538085938
    8. 'minimum' → logprob: -13.350326538085938
    9. '	min' → logprob: -13.725326538085938
    10. 'IN' → logprob: -13.850326538085938

Token 1133: '
' (ID: 198)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -1.273877739906311
    2. '<|end|>' → logprob: -1.398877739906311
    3. ')' → logprob: -1.523877739906311
    4. '
' → logprob: -3.0238776206970215
    5. '<|end|>' → logprob: -3.2738776206970215
    6. ' for' → logprob: -4.0238776206970215
    7. ' ' → logprob: -4.2738776206970215
    8. ' =' → logprob: -4.3988776206970215
    9. '[min' → logprob: -4.3988776206970215
    10. '[token' → logprob: -4.5238776206970215

Token 1134: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.8392815589904785
    2. ' for' → logprob: -1.4642815589904785
    3. '                   ' → logprob: -2.4642815589904785
    4. '=' → logprob: -2.9642815589904785
    5. 'for' → logprob: -3.0892815589904785
    6. '<|end|>' → logprob: -3.7142815589904785
    7. ' =' → logprob: -4.2142815589904785
    8. '                               ' → logprob: -4.5892815589904785
    9. '
' → logprob: -4.7142815589904785
    10. '+' → logprob: -4.9642815589904785

Token 1135: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.5247186422348022
    2. 'for' (adapté à ' for') → logprob: -0.8997186422348022
    3. '               ' → logprob: -6.774718761444092
    4. '                   ' → logprob: -8.399718284606934
    5. '	for' → logprob: -8.774718284606934
    6. '                ' → logprob: -11.149718284606934
    7. '           ' → logprob: -11.274718284606934
    8. '                       ' → logprob: -11.774718284606934
    9. ' ' → logprob: -12.149718284606934
    10. ' ' → logprob: -12.524718284606934

Token 1136: ' nxt' (ID: 160200)
  Prédit: 'next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'next' → logprob: -0.22734898328781128
    2. 'n' → logprob: -1.977349042892456
    3. ' nxt' → logprob: -3.102349042892456
    4. 'nx' → logprob: -4.102348804473877
    5. 'nbr' → logprob: -6.602348804473877
    6. 'v' → logprob: -6.602348804473877
    7. 'nn' → logprob: -7.977348804473877
    8. 'neighbor' → logprob: -8.852349281311035
    9. 'nd' → logprob: -9.852349281311035
    10. 'nei' → logprob: -10.227349281311035

Token 1137: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.07889506965875626
    2. 'in' → logprob: -2.578895092010498
    3. '_in' → logprob: -13.57889461517334
    4. ' ' → logprob: -13.57889461517334
    5. '<|end|>' → logprob: -13.82889461517334
    6. '	in' → logprob: -14.07889461517334
    7. '
' → logprob: -14.82889461517334
    8. '```' → logprob: -15.82889461517334
    9. '  ' → logprob: -16.203895568847656
    10. 'n' → logprob: -16.703895568847656

Token 1138: ' next' (ID: 2613)
  Prédit: 'next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'next' → logprob: -0.1602262556552887
    2. ' next' → logprob: -1.9102262258529663
    3. '   ' → logprob: -14.410225868225098
    4. '	next' → logprob: -14.410225868225098
    5. ' ' → logprob: -15.285225868225098
    6. 'n' → logprob: -15.410225868225098
    7. '(next' → logprob: -15.660225868225098
    8. '[next' → logprob: -15.660225868225098
    9. 'node' → logprob: -17.035226821899414
    10. ' nex' → logprob: -17.035226821899414

Token 1139: '_nodes' (ID: 34593)
  Prédit: '_nodes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_nodes' → logprob: -0.0016234104987233877
    2. 'node' → logprob: -7.001623630523682
    3. ' in' → logprob: -8.376623153686523
    4. 'in' → logprob: -9.001623153686523
    5. 'nodes' → logprob: -9.126623153686523
    6. '_node' → logprob: -9.501623153686523
    7. '   ' → logprob: -9.876623153686523
    8. 'n' → logprob: -10.251623153686523
    9. 's' → logprob: -11.251623153686523
    10. '_' → logprob: -11.251623153686523

Token 1140: ':
' (ID: 734)
  Prédit: '                   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.1601909101009369
    2. ':' → logprob: -3.0351908206939697
    3. ':
' → logprob: -3.2851908206939697
    4. '               ' → logprob: -3.9101908206939697
    5. '                       ' → logprob: -4.660191059112549
    6. ' if' → logprob: -4.660191059112549
    7. '<|end|>' → logprob: -5.410191059112549
    8. '                           ' → logprob: -5.535191059112549
    9. '<|end|>' → logprob: -6.035191059112549
    10. '                    ' → logprob: -6.285191059112549

Token 1141: '                   ' (ID: 699)
  Prédit: '                   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.03838329762220383
    2. '                       ' → logprob: -3.6633832454681396
    3. ' if' → logprob: -5.413383483886719
    4. '               ' → logprob: -5.538383483886719
    5. '                               ' → logprob: -6.913383483886719
    6. '                           ' → logprob: -6.913383483886719
    7. 'if' → logprob: -7.788383483886719
    8. '           ' → logprob: -8.663383483886719
    9. '                    ' → logprob: -8.663383483886719
    10. '                ' → logprob: -9.163383483886719

Token 1142: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.033012814819812775
    2. 'min' → logprob: -4.033012866973877
    3. '                       ' → logprob: -4.908012866973877
    4. ' if' → logprob: -5.158012866973877
    5. '                           ' → logprob: -6.783012866973877
    6. '                               ' → logprob: -8.783012390136719
    7. ' min' → logprob: -9.033012390136719
    8. '
' → logprob: -9.283012390136719
    9. '                   ' → logprob: -9.658012390136719
    10. '```' → logprob: -10.783012390136719

Token 1143: ' dp' (ID: 21546)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dp' → logprob: -1.4974866644479334e-05
    2. ' dp' → logprob: -11.125015258789062
    3. '	dp' → logprob: -16.250015258789062
    4. '(dp' → logprob: -17.875015258789062
    5. '   ' → logprob: -19.125015258789062
    6. '
' → logprob: -19.375015258789062
    7. '           ' → logprob: -19.750015258789062
    8. '               ' → logprob: -20.125015258789062
    9. '_dp' → logprob: -20.250015258789062
    10. 'd' → logprob: -20.500015258789062

Token 1144: '[n' (ID: 15433)
  Prédit: '[n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[n' → logprob: -7.755678961984813e-05
    2. '[next' → logprob: -9.750077247619629
    3. 'n' → logprob: -11.625077247619629
    4. '<n' → logprob: -12.375077247619629
    5. '[node' → logprob: -13.000077247619629
    6. '[' → logprob: -13.000077247619629
    7. '[
' → logprob: -15.125077247619629
    8. '][' → logprob: -15.500077247619629
    9. '(n' → logprob: -15.750077247619629
    10. '   ' → logprob: -15.875077247619629

Token 1145: 'xt' (ID: 711)
  Prédit: 'xt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'xt' → logprob: -0.0014249986270442605
    2. '[n' → logprob: -6.751424789428711
    3. 'n' → logprob: -9.376424789428711
    4. 'x' → logprob: -9.751424789428711
    5. 'ext' → logprob: -10.251424789428711
    6. 't' → logprob: -11.126424789428711
    7. '```' → logprob: -11.126424789428711
    8. '[next' → logprob: -11.376424789428711
    9. '[node' → logprob: -11.501424789428711
    10. '[' → logprob: -11.626424789428711

Token 1146: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.23221808671951294
    2. '<n' → logprob: -2.357218027114868
    3. '<' → logprob: -2.982218027114868
    4. '[' → logprob: -3.357218027114868
    5. ']<' → logprob: -4.107218265533447
    6. '[n' → logprob: -4.732218265533447
    7. ' <' → logprob: -7.107218265533447
    8. '[
' → logprob: -8.607217788696289
    9. '<N' → logprob: -8.982217788696289
    10. '']' → logprob: -8.982217788696289

Token 1147: ' <' (ID: 464)
  Prédit: '<'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<' → logprob: -0.055041830986738205
    2. ' <' → logprob: -2.930041790008545
    3. '<n' → logprob: -9.180042266845703
    4. '<int' → logprob: -10.680042266845703
    5. '<size' → logprob: -11.805042266845703
    6. '<p' → logprob: -12.055042266845703
    7. '<len' → logprob: -12.430042266845703
    8. '<th' → logprob: -13.680042266845703
    9. '<m' → logprob: -13.680042266845703
    10. '<ll' → logprob: -13.805042266845703

Token 1148: ' min' (ID: 1349)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'min' → logprob: -1.5451681974809617e-05
    2. 'INF' → logprob: -11.250015258789062
    3. ' min' → logprob: -13.000015258789062
    4. 'inf' → logprob: -16.750015258789062
    5. 'MIN' → logprob: -17.750015258789062
    6. 'dp' → logprob: -18.375015258789062
    7. '
' → logprob: -19.250015258789062
    8. '   ' → logprob: -19.875015258789062
    9. '	min' → logprob: -19.875015258789062
    10. 'mi' → logprob: -20.750015258789062

Token 1149: '_dp' (ID: 133252)
  Prédit: '_dp'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_dp' → logprob: -0.0013171432074159384
    2. 'dp' → logprob: -6.751317024230957
    3. 'min' → logprob: -9.376317024230957
    4. 'INF' → logprob: -10.001317024230957
    5. '_inf' → logprob: -12.001317024230957
    6. '```' → logprob: -12.501317024230957
    7. '	dp' → logprob: -13.251317024230957
    8. '[min' → logprob: -13.626317024230957
    9. 'inf' → logprob: -13.751317024230957
    10. '_DP' → logprob: -14.001317024230957

Token 1150: '_next' (ID: 25436)
  Prédit: '_next'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_next' → logprob: -0.18300269544124603
    2. 'next' → logprob: -1.8080027103424072
    3. ' next' → logprob: -6.808002471923828
    4. 'min' → logprob: -6.808002471923828
    5. 'Next' → logprob: -8.183002471923828
    6. '_dp' → logprob: -8.308002471923828
    7. '[next' → logprob: -8.558002471923828
    8. '_min' → logprob: -8.683002471923828
    9. 'dp' → logprob: -9.933002471923828
    10. 'INF' → logprob: -11.058002471923828

Token 1151: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.6260672211647034
    2. ':
' → logprob: -0.8760672211647034
    3. '                       ' → logprob: -3.5010671615600586
    4. '):
' → logprob: -4.876067161560059
    5. '                           ' → logprob: -5.626067161560059
    6. '):' → logprob: -5.876067161560059
    7. '                               ' → logprob: -6.501067161560059
    8. '                   ' → logprob: -6.876067161560059
    9. ':min' → logprob: -7.251067161560059
    10. '=min' → logprob: -7.876067161560059

Token 1152: '                       ' (ID: 968)
  Prédit: '                       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.17421261966228485
    2. '                   ' → logprob: -2.799212694168091
    3. ' min' → logprob: -3.049212694168091
    4. '                           ' → logprob: -3.549212694168091
    5. '                               ' → logprob: -4.299212455749512
    6. ' =' → logprob: -6.549212455749512
    7. '               ' → logprob: -6.674212455749512
    8. '=min' → logprob: -6.674212455749512
    9. '):
' → logprob: -7.299212455749512
    10. ':' → logprob: -7.299212455749512

Token 1153: ' min' (ID: 1349)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'min' (adapté à ' min') → logprob: -0.006199907511472702
    2. ' min' → logprob: -5.131199836730957
    3. '                           ' → logprob: -8.256199836730957
    4. '                               ' → logprob: -12.506199836730957
    5. '	min' → logprob: -13.131199836730957
    6. '                       ' → logprob: -13.506199836730957
    7. '=min' → logprob: -14.131199836730957
    8. '```' → logprob: -14.256199836730957
    9. '_min' → logprob: -14.381199836730957
    10. '                   ' → logprob: -14.506199836730957

Token 1154: '_dp' (ID: 133252)
  Prédit: '_dp'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_dp' → logprob: -2.816093228830141e-06
    2. 'dp' → logprob: -13.12500286102295
    3. '	dp' → logprob: -14.50000286102295
    4. '(dp' → logprob: -15.87500286102295
    5. '```' → logprob: -16.250001907348633
    6. '_dc' → logprob: -17.375001907348633
    7. '
' → logprob: -18.000001907348633
    8. '_ds' → logprob: -18.250001907348633
    9. '_dx' → logprob: -18.375001907348633
    10. ' dp' → logprob: -18.875001907348633

Token 1155: '_next' (ID: 25436)
  Prédit: '_next'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_next' → logprob: -0.00024370834580622613
    2. 'next' → logprob: -8.500244140625
    3. 'Next' → logprob: -10.250244140625
    4. '[next' → logprob: -12.625244140625
    5. 'n' → logprob: -14.375244140625
    6. 'dp' → logprob: -15.250244140625
    7. '_NEXT' → logprob: -15.375244140625
    8. ' next' → logprob: -16.000244140625
    9. '```' → logprob: -16.125244140625
    10. '.next' → logprob: -17.000244140625

Token 1156: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.0031837786082178354
    2. ' =' → logprob: -5.753183841705322
    3. '=min' → logprob: -12.128183364868164
    4. '                           ' → logprob: -14.503183364868164
    5. '=
' → logprob: -16.128183364868164
    6. '＝' → logprob: -18.003183364868164
    7. '                       ' → logprob: -18.503183364868164
    8. '                               ' → logprob: -18.503183364868164
    9. '           ' → logprob: -18.878183364868164
    10. '                   ' → logprob: -19.253183364868164

Token 1157: ' dp' (ID: 21546)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dp' → logprob: -0.023246875032782555
    2. ' dp' → logprob: -3.7732467651367188
    3. '	dp' → logprob: -14.023246765136719
    4. '(dp' → logprob: -14.773246765136719
    5. '
' → logprob: -16.02324676513672
    6. '_dp' → logprob: -16.77324676513672
    7. '.dp' → logprob: -18.64824676513672
    8. 'd' → logprob: -19.39824676513672
    9. 'dt' → logprob: -19.52324676513672
    10. '           ' → logprob: -19.52324676513672

Token 1158: '[n' (ID: 15433)
  Prédit: '[n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[n' → logprob: -0.3900180459022522
    2. '[next' → logprob: -1.7650179862976074
    3. '_next' → logprob: -1.8900179862976074
    4. ' nxt' → logprob: -8.640018463134766
    5. '```' → logprob: -9.015018463134766
    6. '   ' → logprob: -9.390018463134766
    7. '       ' → logprob: -9.765018463134766
    8. '_n' → logprob: -9.765018463134766
    9. 'n' → logprob: -9.890018463134766
    10. 'next' → logprob: -10.265018463134766

Token 1159: 'xt' (ID: 711)
  Prédit: 'xt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'xt' → logprob: -0.36241182684898376
    2. '[n' → logprob: -1.2374118566513062
    3. 'n' → logprob: -5.487411975860596
    4. '[next' → logprob: -5.737411975860596
    5. 'ext' → logprob: -5.862411975860596
    6. 'x' → logprob: -6.112411975860596
    7. ' nxt' → logprob: -6.862411975860596
    8. '[' → logprob: -8.987411499023438
    9. ']' → logprob: -9.362411499023438
    10. '```' → logprob: -10.237411499023438

Token 1160: ']
' (ID: 1592)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7534030079841614
    2. '+' → logprob: -2.0034029483795166
    3. '<|end|>' → logprob: -2.2534029483795166
    4. '                   ' → logprob: -2.3784029483795166
    5. ']' → logprob: -2.7534029483795166
    6. '               ' → logprob: -2.8784029483795166
    7. '<|end|>' → logprob: -3.8784029483795166
    8. ' +' → logprob: -4.128403186798096
    9. '           ' → logprob: -4.378403186798096
    10. '                           ' → logprob: -4.628403186798096

Token 1161: '               ' (ID: 506)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 1162: ' if' (ID: 538)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.007508194539695978
    2. ' if' → logprob: -5.382508277893066
    3. '           ' → logprob: -6.882508277893066
    4. 'if' (adapté à ' if') → logprob: -7.257508277893066
    5. '```' → logprob: -7.632508277893066
    6. ' max' → logprob: -8.257508277893066
    7. 'max' → logprob: -8.382508277893066
    8. '                   ' → logprob: -9.382508277893066
    9. ')' → logprob: -11.132508277893066
    10. '              ' → logprob: -11.257508277893066

Token 1163: ' min' (ID: 1349)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.06207478791475296
    2. ' min' → logprob: -2.812074899673462
    3. 'max' → logprob: -9.312074661254883
    4. '   ' → logprob: -11.687074661254883
    5. '	min' → logprob: -12.812074661254883
    6. ' max' → logprob: -12.937074661254883
    7. '(min' → logprob: -14.062074661254883
    8. ' ' → logprob: -14.312074661254883
    9. '  ' → logprob: -14.437074661254883
    10. 'possible' → logprob: -14.812074661254883

Token 1164: '_dp' (ID: 133252)
  Prédit: '_dp'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_dp' → logprob: -6.73052782076411e-05
    2. '_min' → logprob: -9.625067710876465
    3. 'dp' → logprob: -14.125067710876465
    4. 'min' → logprob: -15.500067710876465
    5. '	dp' → logprob: -16.25006675720215
    6. '_dt' → logprob: -16.62506675720215
    7. '_max' → logprob: -16.87506675720215
    8. '```' → logprob: -17.12506675720215
    9. '[min' → logprob: -17.25006675720215
    10. '(dp' → logprob: -17.50006675720215

Token 1165: '_next' (ID: 25436)
  Prédit: '_next'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_next' → logprob: -0.0019199562957510352
    2. 'next' → logprob: -6.501919746398926
    3. 'Next' → logprob: -7.876919746398926
    4. '[next' → logprob: -10.876919746398926
    5. ' next' → logprob: -12.126919746398926
    6. '_over' → logprob: -12.501919746398926
    7. '_min' → logprob: -13.001919746398926
    8. '   ' → logprob: -13.626919746398926
    9. '_max' → logprob: -14.126919746398926
    10. '	next' → logprob: -14.126919746398926

Token 1166: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.5404859781265259
    2. ' ==' → logprob: -1.0404859781265259
    3. '>=' → logprob: -3.1654858589172363
    4. ' >=' → logprob: -4.290485858917236
    5. '>' → logprob: -5.540485858917236
    6. ' >' → logprob: -6.290485858917236
    7. '<' → logprob: -7.040485858917236
    8. '<=' → logprob: -7.790485858917236
    9. '==-' → logprob: -8.540486335754395
    10. ' <' → logprob: -8.540486335754395

Token 1167: ' INF' (ID: 69196)
  Prédit: 'INF'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'INF' → logprob: -5.512236498361744e-07
    2. ' INF' → logprob: -15.375000953674316
    3. '   ' → logprob: -15.500000953674316
    4. 'inf' → logprob: -17.0
    5. 'IN' → logprob: -17.375
    6. '-INF' → logprob: -17.625
    7. '_INF' → logprob: -17.875
    8. 'Inf' → logprob: -19.875
    9. '0' → logprob: -20.0
    10. '       ' → logprob: -20.5

Token 1168: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.6228153109550476
    2. '                   ' → logprob: -0.9978153109550476
    3. ':
' → logprob: -2.4978153705596924
    4. '               ' → logprob: -5.122815132141113
    5. '                           ' → logprob: -5.747815132141113
    6. '                       ' → logprob: -6.247815132141113
    7. ')' → logprob: -7.997815132141113
    8. '           ' → logprob: -8.622815132141113
    9. '):
' → logprob: -8.622815132141113
    10. '):' → logprob: -8.872815132141113

Token 1169: '                   ' (ID: 699)
  Prédit: '                   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.00014442270912695676
    2. '               ' → logprob: -9.125144004821777
    3. '                       ' → logprob: -10.625144004821777
    4. '                           ' → logprob: -12.750144004821777
    5. '           ' → logprob: -13.125144004821777
    6. '                  ' → logprob: -13.750144004821777
    7. '   ' → logprob: -13.750144004821777
    8. '
' → logprob: -13.750144004821777
    9. 'possible' → logprob: -14.875144004821777
    10. ' possible' → logprob: -15.000144004821777

Token 1170: ' #' (ID: 1069)
  Prédit: 'possible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'possible' → logprob: -0.061783574521541595
    2. '               ' → logprob: -3.3117835521698
    3. '                   ' → logprob: -3.8117835521698
    4. ' possible' → logprob: -6.936783790588379
    5. '                       ' → logprob: -8.061783790588379
    6. '           ' → logprob: -10.311783790588379
    7. '   ' → logprob: -10.686783790588379
    8. '       ' → logprob: -12.686783790588379
    9. '```' → logprob: -12.811783790588379
    10. '_possible' → logprob: -12.936783790588379

Token 1171: ' A' (ID: 355)
  Prédit: 'possible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'possible' → logprob: -0.01678803563117981
    2. '                   ' → logprob: -4.266788005828857
    3. ' possible' → logprob: -6.016788005828857
    4. '               ' → logprob: -9.391788482666016
    5. '                       ' → logprob: -10.016788482666016
    6. 'Possible' → logprob: -10.266788482666016
    7. '           ' → logprob: -11.266788482666016
    8. '   ' → logprob: -12.641788482666016
    9. '#' → logprob: -12.891788482666016
    10. '_possible' → logprob: -14.141788482666016

Token 1172: 'ucune' (ID: 165629)
  Prédit: 'possible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'possible' → logprob: -0.01369186770170927
    2. ' possible' → logprob: -4.7636919021606445
    3. 'll' → logprob: -6.1386919021606445
    4. 'l' → logprob: -7.3886919021606445
    5. 'ucune' → logprob: -7.5136919021606445
    6. 'cc' → logprob: -8.138691902160645
    7. '_possible' → logprob: -8.388691902160645
    8. '           ' → logprob: -8.513691902160645
    9. 'u' → logprob: -8.888691902160645
    10. 'd' → logprob: -8.888691902160645

Token 1173: ' ligne' (ID: 19583)
  Prédit: 'next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'next' → logprob: -0.8617452383041382
    2. 'node' → logprob: -1.6117452383041382
    3. 'reachable' → logprob: -2.6117453575134277
    4. 'possible' → logprob: -3.3617453575134277
    5. ' prochaine' → logprob: -3.4867453575134277
    6. ' node' → logprob: -3.4867453575134277
    7. ' next' → logprob: -3.7367453575134277
    8. '(next' → logprob: -3.7367453575134277
    9. ' des' → logprob: -3.7367453575134277
    10. '[next' → logprob: -3.9867453575134277

Token 1174: ' d' (ID: 272)
  Prédit: 'accessible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'accessible' → logprob: -0.7098596096038818
    2. ' accessible' → logprob: -1.4598596096038818
    3. 'reachable' → logprob: -1.7098596096038818
    4. ' reachable' → logprob: -3.584859609603882
    5. 'n' → logprob: -4.084859848022461
    6. '                   ' → logprob: -5.209859848022461
    7. ' des' → logprob: -5.459859848022461
    8. '               ' → logprob: -5.459859848022461
    9. 'des' → logprob: -5.584859848022461
    10. 'possible' → logprob: -5.584859848022461

Token 1175: ''' (ID: 6)
  Prédit: 'code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'code' → logprob: -1.0762399435043335
    2. 'dp' → logprob: -1.0762399435043335
    3. 'g' → logprob: -2.701240062713623
    4. 'continue' → logprob: -3.201240062713623
    5. 'vic' → logprob: -4.201240062713623
    6. 'vie' → logprob: -4.451240062713623
    7. 'n' → logprob: -4.576240062713623
    8. 'issue' → logprob: -4.826240062713623
    9. 'e' → logprob: -4.951240062713623
    10. 'possible' → logprob: -4.951240062713623

Token 1176: 'attaque' (ID: 153350)
  Prédit: 'code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'code' → logprob: -0.5007697343826294
    2. 'vic' → logprob: -1.8757697343826294
    3. 'dp' → logprob: -2.25076961517334
    4. 'vict' → logprob: -3.25076961517334
    5. 'issue' → logprob: -3.62576961517334
    6. 'dé' → logprob: -4.25076961517334
    7. 'é' → logprob: -5.12576961517334
    8. 'f' → logprob: -5.12576961517334
    9. 'attaque' → logprob: -5.25076961517334
    10. 'vie' → logprob: -5.37576961517334

Token 1177: ' gagn' (ID: 58408)
  Prédit: '                   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.18184371292591095
    2. 'possible' → logprob: -2.5568437576293945
    3. ' possible' → logprob: -2.5568437576293945
    4. '               ' → logprob: -5.1818437576293945
    5. '                       ' → logprob: -6.5568437576293945
    6. '_possible' → logprob: -6.8068437576293945
    7. 'n' → logprob: -6.9318437576293945
    8. 'Possible' → logprob: -7.9318437576293945
    9. '           ' → logprob: -8.431843757629395
    10. ':' → logprob: -8.556843757629395

Token 1178: 'ante' (ID: 2116)
  Prédit: 'ante'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ante' → logprob: -0.41219788789749146
    2. 'able' → logprob: -2.4121978282928467
    3. 'ée' → logprob: -2.5371978282928467
    4. 'ace' → logprob: -2.6621978282928467
    5. 'ique' → logprob: -4.037198066711426
    6. 'ale' → logprob: -4.412198066711426
    7. 'u' → logprob: -4.412198066711426
    8. 'ance' → logprob: -4.787198066711426
    9. 'nante' → logprob: -5.037198066711426
    10. 'age' → logprob: -5.162198066711426

Token 1179: ' pour' (ID: 1930)
  Prédit: '                   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.007472336292266846
    2. '                       ' → logprob: -5.882472515106201
    3. '               ' → logprob: -6.132472515106201
    4. ' possible' → logprob: -7.257472515106201
    5. '           ' → logprob: -7.632472515106201
    6. ',' → logprob: -7.632472515106201
    7. 'possible' → logprob: -8.257472038269043
    8. ':' → logprob: -8.507472038269043
    9. ':
' → logprob: -9.257472038269043
    10. '       ' → logprob: -9.757472038269043

Token 1180: ' ce' (ID: 2357)
  Prédit: 'ce'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ce' → logprob: -0.8082597851753235
    2. ' ce' → logprob: -1.1832597255706787
    3. 'cet' → logprob: -2.1832597255706787
    4. 'c' → logprob: -2.5582597255706787
    5. ' cette' → logprob: -4.058259963989258
    6. 'this' → logprob: -4.058259963989258
    7. 'cel' → logprob: -5.183259963989258
    8. 'cela' → logprob: -5.433259963989258
    9. 'ces' → logprob: -5.933259963989258
    10. ' cet' → logprob: -6.058259963989258

Token 1181: ' choix' (ID: 28642)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.32887035608291626
    2. 'choice' → logprob: -1.9538702964782715
    3. ' k' → logprob: -2.3288702964782715
    4. ' choix' → logprob: -4.5788702964782715
    5. ' choice' → logprob: -4.5788702964782715
    6. 'cho' → logprob: -4.9538702964782715
    7. 'length' → logprob: -5.4538702964782715
    8. ' longueur' → logprob: -6.2038702964782715
    9. 'long' → logprob: -6.8288702964782715
    10. 'node' → logprob: -6.9538702964782715

Token 1182: ' k' (ID: 372)
  Prédit: '                   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.2616901993751526
    2. ' possible' → logprob: -1.8866901397705078
    3. 'possible' → logprob: -2.761690139770508
    4. '               ' → logprob: -4.636690139770508
    5. '                       ' → logprob: -6.386690139770508
    6. '           ' → logprob: -7.011690139770508
    7. '_possible' → logprob: -7.136690139770508
    8. ',' → logprob: -7.761690139770508
    9. '=True' → logprob: -8.636690139770508
    10. 'Possible' → logprob: -8.636690139770508

Token 1183: '
' (ID: 198)
  Prédit: '                   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.007477664388716221
    2. '                       ' → logprob: -5.257477760314941
    3. '               ' → logprob: -6.757477760314941
    4. ':' → logprob: -7.882477760314941
    5. ':
' → logprob: -8.507477760314941
    6. ' possible' → logprob: -9.257477760314941
    7. 'possible' → logprob: -9.382477760314941
    8. '                           ' → logprob: -9.882477760314941
    9. '                    
' → logprob: -10.007477760314941
    10. ',' → logprob: -10.007477760314941

Token 1184: '                   ' (ID: 699)
  Prédit: '                   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.017142338678240776
    2. '                       ' → logprob: -4.142142295837402
    3. '               ' → logprob: -7.267142295837402
    4. '                           ' → logprob: -9.267142295837402
    5. '           ' → logprob: -9.642142295837402
    6. '```' → logprob: -9.892142295837402
    7. ':' → logprob: -10.392142295837402
    8. ' continue' → logprob: -10.642142295837402
    9. '                        
' → logprob: -10.892142295837402
    10. '                    
' → logprob: -11.017142295837402

Token 1185: ' possible' (ID: 4149)
  Prédit: 'possible'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'possible' (adapté à ' possible') → logprob: -0.08013664186000824
    2. '                   ' → logprob: -2.58013653755188
    3. ' possible' → logprob: -6.955136775970459
    4. '                       ' → logprob: -8.7051362991333
    5. '               ' → logprob: -9.3301362991333
    6. '           ' → logprob: -10.4551362991333
    7. '   ' → logprob: -12.5801362991333
    8. '       ' → logprob: -13.3301362991333
    9. '_possible' → logprob: -13.4551362991333
    10. 'poss' → logprob: -14.0801362991333

Token 1186: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.490290105342865
    2. ' =' → logprob: -0.990290105342865
    3. '=False' → logprob: -4.61529016494751
    4. '                   ' → logprob: -5.24029016494751
    5. '               ' → logprob: -7.74029016494751
    6. '           ' → logprob: -8.740289688110352
    7. '=True' → logprob: -8.865289688110352
    8. '                       ' → logprob: -8.990289688110352
    9. '                           ' → logprob: -12.115289688110352
    10. '       ' → logprob: -12.365289688110352

Token 1187: ' False' (ID: 7983)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'False' → logprob: -4.5491004129871726e-05
    2. ' False' → logprob: -10.000045776367188
    3. '(False' → logprob: -18.750045776367188
    4. '=False' → logprob: -19.250045776367188
    5. 'false' → logprob: -20.625045776367188
    6. '_false' → logprob: -21.750045776367188
    7. '   ' → logprob: -22.000045776367188
    8. '.False' → logprob: -22.125045776367188
    9. 'True' → logprob: -23.125045776367188
    10. '```' → logprob: -23.750045776367188

Token 1188: '
' (ID: 198)
  Prédit: '                   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.0019499406917020679
    2. '               ' → logprob: -6.376949787139893
    3. '                       ' → logprob: -9.00195026397705
    4. '           ' → logprob: -9.25195026397705
    5. '<|end|>' → logprob: -11.37695026397705
    6. '                           ' → logprob: -11.87695026397705
    7. '       ' → logprob: -13.12695026397705
    8. '		           ' → logprob: -13.37695026397705
    9. '				' → logprob: -13.87695026397705
    10. '   ' → logprob: -13.87695026397705

Token 1189: '                   ' (ID: 699)
  Prédit: '                   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.0006433341186493635
    2. '               ' → logprob: -8.125643730163574
    3. '                       ' → logprob: -8.125643730163574
    4. '           ' → logprob: -11.375643730163574
    5. '                           ' → logprob: -11.500643730163574
    6. '<|end|>' → logprob: -11.750643730163574
    7. '```' → logprob: -12.375643730163574
    8. '                    
' → logprob: -12.500643730163574
    9. '                  ' → logprob: -12.875643730163574
    10. '                    ' → logprob: -12.875643730163574

Token 1190: ' break' (ID: 2338)
  Prédit: '                   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.5873563289642334
    2. 'break' (adapté à ' break') → logprob: -0.8373563289642334
    3. ' break' → logprob: -4.9623565673828125
    4. '                       ' → logprob: -6.0873565673828125
    5. '               ' → logprob: -6.4623565673828125
    6. '           ' → logprob: -8.337356567382812
    7. '	break' → logprob: -8.837356567382812
    8. '				' → logprob: -9.587356567382812
    9. '```' → logprob: -10.337356567382812
    10. '                           ' → logprob: -11.587356567382812

Token 1191: '
' (ID: 198)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.0011403346434235573
    2. '           ' → logprob: -7.376140117645264
    3. '                   ' → logprob: -8.376140594482422
    4. '
' → logprob: -8.626140594482422
    5. ')' → logprob: -10.376140594482422
    6. '```' → logprob: -10.876140594482422
    7. '+' → logprob: -11.876140594482422
    8. '  
' → logprob: -11.876140594482422
    9. '<|end|>' → logprob: -12.001140594482422
    10. '                
' → logprob: -12.376140594482422

Token 1192: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.005142203997820616
    2. '           ' → logprob: -5.5051422119140625
    3. '                   ' → logprob: -7.3801422119140625
    4. '                
' → logprob: -9.255142211914062
    5. '  
' → logprob: -10.005142211914062
    6. '```' → logprob: -10.130142211914062
    7. '    
' → logprob: -10.255142211914062
    8. '              ' → logprob: -10.255142211914062
    9. '            
' → logprob: -10.380142211914062
    10. '       ' → logprob: -10.380142211914062

Token 1193: ' #' (ID: 1069)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.012951615266501904
    2. 'if' → logprob: -4.512951850891113
    3. '
' → logprob: -7.012951850891113
    4. '           ' → logprob: -7.387951850891113
    5. 'else' → logprob: -8.637951850891113
    6. 'max' → logprob: -9.512951850891113
    7. ' if' → logprob: -9.637951850891113
    8. 'import' → logprob: -11.137951850891113
    9. '                   ' → logprob: -11.262951850891113
    10. '```' → logprob: -11.512951850891113

Token 1194: ' Sinon' (ID: 154924)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.06687814742326736
    2. '           ' → logprob: -3.566878080368042
    3. '               ' → logprob: -4.066878318786621
    4. ' if' → logprob: -4.066878318786621
    5. 'max' → logprob: -6.316878318786621
    6. '                   ' → logprob: -8.816878318786621
    7. '
' → logprob: -9.316878318786621
    8. '   ' → logprob: -10.066878318786621
    9. '       ' → logprob: -10.316878318786621
    10. '```' → logprob: -10.691878318786621

Token 1195: ' on' (ID: 402)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.6759511232376099
    2. 'if' → logprob: -1.3009511232376099
    3. '           ' → logprob: -1.8009511232376099
    4. '               ' → logprob: -3.1759510040283203
    5. 'max' → logprob: -5.05095100402832
    6. '                   ' → logprob: -5.67595100402832
    7. ' =' → logprob: -7.30095100402832
    8. '
' → logprob: -7.30095100402832
    9. ' max' → logprob: -7.92595100402832
    10. '=' → logprob: -8.55095100402832

Token 1196: ' garde' (ID: 65309)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.20055821537971497
    2. 'max' → logprob: -1.8255581855773926
    3. ' if' → logprob: -4.325558185577393
    4. '               ' → logprob: -5.575558185577393
    5. '=' → logprob: -6.325558185577393
    6. '=max' → logprob: -7.075558185577393
    7. '           ' → logprob: -7.950558185577393
    8. ' max' → logprob: -8.45055866241455
    9. '                   ' → logprob: -8.57555866241455
    10. '
' → logprob: -10.57555866241455

Token 1197: ' max' (ID: 2999)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.28630465269088745
    2. 'if' → logprob: -1.4113047122955322
    3. 'min' → logprob: -6.036304473876953
    4. '                   ' → logprob: -7.036304473876953
    5. ' if' → logprob: -7.036304473876953
    6. ' max' → logprob: -7.286304473876953
    7. '               ' → logprob: -8.536304473876953
    8. '                       ' → logprob: -9.911304473876953
    9. '(max' → logprob: -10.911304473876953
    10. '```' → logprob: -10.911304473876953

Token 1198: ' sur' (ID: 1512)
  Prédit: '_over'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_over' → logprob: -0.00038837024476379156
    2. '(max' → logprob: -9.000388145446777
    3. '_possible' → logprob: -10.000388145446777
    4. '_max' → logprob: -10.125388145446777
    5. '_of' → logprob: -10.125388145446777
    6. '(min' → logprob: -10.250388145446777
    7. '=max' → logprob: -10.625388145446777
    8. 'over' → logprob: -10.750388145446777
    9. '_min' → logprob: -10.875388145446777
    10. '(' → logprob: -11.250388145446777

Token 1199: ' ces' (ID: 10532)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.0614919438958168
    2. 'min' → logprob: -2.9364919662475586
    3. '(max' → logprob: -6.061491966247559
    4. 'choices' → logprob: -6.686491966247559
    5. ' max' → logprob: -7.186491966247559
    6. 'possible' → logprob: -7.311491966247559
    7. '(min' → logprob: -7.811491966247559
    8. '   ' → logprob: -8.186491966247559
    9. '_choices' → logprob: -8.561491966247559
    10. 'k' → logprob: -8.686491966247559

Token 1200: ' min' (ID: 1349)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.026281487196683884
    2. 'max' → logprob: -4.026281356811523
    3. ' min' → logprob: -5.526281356811523
    4. '_min' → logprob: -5.651281356811523
    5. 'choices' → logprob: -8.401281356811523
    6. 'possible' → logprob: -8.776281356811523
    7. '_max' → logprob: -10.151281356811523
    8. ' max' → logprob: -10.276281356811523
    9. '   ' → logprob: -10.401281356811523
    10. '_choices' → logprob: -11.026281356811523

Token 1201: ' dp' (ID: 21546)
  Prédit: '_over'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_over' → logprob: -0.005514061078429222
    2. '(max' → logprob: -6.755514144897461
    3. '(min' → logprob: -6.880514144897461
    4. '_possible' → logprob: -6.880514144897461
    5. 'max' → logprob: -7.755514144897461
    6. '=max' → logprob: -7.880514144897461
    7. '_next' → logprob: -8.005514144897461
    8. '_min' → logprob: -8.380514144897461
    9. '_of' → logprob: -8.505514144897461
    10. '_max' → logprob: -8.880514144897461

Token 1202: '[next' (ID: 103383)
  Prédit: '_over'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_over' → logprob: -0.2508992850780487
    2. ' =' → logprob: -2.250899314880371
    3. '               ' → logprob: -3.125899314880371
    4. '_next' → logprob: -3.500899314880371
    5. '=max' → logprob: -4.375899314880371
    6. '                   ' → logprob: -4.625899314880371
    7. 'max' → logprob: -5.375899314880371
    8. 'next' → logprob: -5.750899314880371
    9. '=' → logprob: -6.250899314880371
    10. '           ' → logprob: -6.375899314880371

Token 1203: ']
' (ID: 1592)
  Prédit: '_next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_next' → logprob: -0.6839858293533325
    2. '               ' → logprob: -0.8089858293533325
    3. '                   ' → logprob: -4.058985710144043
    4. 'next' → logprob: -4.683985710144043
    5. ' next' → logprob: -5.683985710144043
    6. ']' → logprob: -5.808985710144043
    7. '[next' → logprob: -6.058985710144043
    8. 'max' → logprob: -6.183985710144043
    9. '           ' → logprob: -6.308985710144043
    10. ',' → logprob: -6.433985710144043

Token 1204: '               ' (ID: 506)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.17844243347644806
    2. ' +' → logprob: -2.9284424781799316
    3. '               ' → logprob: -3.5534424781799316
    4. ' +=' → logprob: -3.9284424781799316
    5. '+' → logprob: -4.178442478179932
    6. '=' → logprob: -4.303442478179932
    7. '           ' → logprob: -4.428442478179932
    8. ' max' → logprob: -4.803442478179932
    9. '=max' → logprob: -5.553442478179932
    10. '                   ' → logprob: -5.678442478179932

Token 1205: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.41711995005607605
    2. 'if' (adapté à ' if') → logprob: -1.2921199798583984
    3. 'max' → logprob: -3.0421199798583984
    4. ' max' → logprob: -4.542119979858398
    5. '                   ' → logprob: -5.667119979858398
    6. '           ' → logprob: -5.917119979858398
    7. '               ' → logprob: -6.417119979858398
    8. '
' → logprob: -9.542119979858398
    9. '```' → logprob: -10.417119979858398
    10. '                       ' → logprob: -10.667119979858398

Token 1206: ' min' (ID: 1349)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.07028673589229584
    2. ' min' → logprob: -2.695286750793457
    3. 'max' → logprob: -8.070286750793457
    4. '   ' → logprob: -10.820286750793457
    5. ' max' → logprob: -11.445286750793457
    6. '	min' → logprob: -12.820286750793457
    7. ' ' → logprob: -13.445286750793457
    8. 'possible' → logprob: -13.820286750793457
    9. '(min' → logprob: -14.695286750793457
    10. '  ' → logprob: -15.070286750793457

Token 1207: '_dp' (ID: 133252)
  Prédit: '_dp'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_dp' → logprob: -2.816093228830141e-06
    2. '_min' → logprob: -13.12500286102295
    3. 'dp' → logprob: -15.37500286102295
    4. '```' → logprob: -16.250001907348633
    5. '(dp' → logprob: -16.500001907348633
    6. '_dt' → logprob: -16.625001907348633
    7. '_max' → logprob: -16.750001907348633
    8. '	dp' → logprob: -17.250001907348633
    9. '_dx' → logprob: -17.625001907348633
    10. '
' → logprob: -18.000001907348633

Token 1208: '_next' (ID: 25436)
  Prédit: '_next'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_next' → logprob: -0.0017449157312512398
    2. 'next' → logprob: -6.376744747161865
    3. 'Next' → logprob: -11.001745223999023
    4. '[next' → logprob: -11.626745223999023
    5. ' next' → logprob: -12.751745223999023
    6. '
' → logprob: -12.876745223999023
    7. '```' → logprob: -13.001745223999023
    8. '   ' → logprob: -13.376745223999023
    9. '_max' → logprob: -13.626745223999023
    10. '_min' → logprob: -14.001745223999023

Token 1209: ' >' (ID: 1424)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>' → logprob: -0.03804401680827141
    2. ' >' → logprob: -3.288043975830078
    3. '   ' → logprob: -13.913043975830078
    4. ' ' → logprob: -14.538043975830078
    5. '>
' → logprob: -15.038043975830078
    6. 'max' → logprob: -15.288043975830078
    7. '  ' → logprob: -16.788043975830078
    8. '           ' → logprob: -16.788043975830078
    9. '">' → logprob: -17.038043975830078
    10. '>b' → logprob: -17.038043975830078

Token 1210: ' max' (ID: 2999)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.0011705794604495168
    2. ' max' → logprob: -6.751170635223389
    3. '	max' → logprob: -15.87617015838623
    4. '   ' → logprob: -16.251171112060547
    5. '           ' → logprob: -16.251171112060547
    6. '               ' → logprob: -16.876171112060547
    7. '                   ' → logprob: -17.501171112060547
    8. 'maximum' → logprob: -17.626171112060547
    9. 'possible' → logprob: -18.001171112060547
    10. '_max' → logprob: -18.126171112060547

Token 1211: '_over' (ID: 34788)
  Prédit: '_over'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_over' → logprob: -0.127016082406044
    2. '_min' → logprob: -2.127016067504883
    3. '_max' → logprob: -9.502016067504883
    4. 'min' → logprob: -11.377016067504883
    5. 'over' → logprob: -13.627016067504883
    6. 'Over' → logprob: -15.502016067504883
    7. '(min' → logprob: -16.002016067504883
    8. '_possible' → logprob: -16.252016067504883
    9. '_dp' → logprob: -16.877016067504883
    10. 'max' → logprob: -16.877016067504883

Token 1212: '_choices' (ID: 163292)
  Prédit: '_choices'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_choices' → logprob: -2.4868770196917467e-05
    2. 'choices' → logprob: -10.625024795532227
    3. '_choice' → logprob: -15.500024795532227
    4. '\' → logprob: -16.250024795532227
    5. '```' → logprob: -16.375024795532227
    6. '_CHO' → logprob: -16.375024795532227
    7. '
' → logprob: -17.125024795532227
    8. '_changes' → logprob: -17.750024795532227
    9. '`' → logprob: -18.250024795532227
    10. 'Choices' → logprob: -18.250024795532227

Token 1213: ':
' (ID: 734)
  Prédit: '                   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.9727138876914978
    2. ':' → logprob: -1.2227139472961426
    3. ':
' → logprob: -1.8477139472961426
    4. '               ' → logprob: -2.4727139472961426
    5. '                       ' → logprob: -2.7227139472961426
    6. '=max' → logprob: -4.972713947296143
    7. '=' → logprob: -5.222713947296143
    8. '                           ' → logprob: -6.222713947296143
    9. ':max' → logprob: -6.847713947296143
    10. '           ' → logprob: -6.972713947296143

Token 1214: '                   ' (ID: 699)
  Prédit: ' max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' max' → logprob: -0.6843389272689819
    2. ' =' → logprob: -0.8093389272689819
    3. '=' → logprob: -3.4343390464782715
    4. '=max' → logprob: -4.3093390464782715
    5. 'max' → logprob: -5.6843390464782715
    6. '                   ' → logprob: -7.0593390464782715
    7. '               ' → logprob: -8.059338569641113
    8. '                       ' → logprob: -9.184338569641113
    9. '	max' → logprob: -11.434338569641113
    10. '                           ' → logprob: -11.809338569641113

Token 1215: ' max' (ID: 2999)
  Prédit: ' max'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' max' → logprob: -0.3869752287864685
    2. 'max' (adapté à ' max') → logprob: -1.1369752883911133
    3. '                   ' → logprob: -9.261975288391113
    4. ' min' → logprob: -13.136975288391113
    5. '=max' → logprob: -13.511975288391113
    6. '                       ' → logprob: -13.761975288391113
    7. '```' → logprob: -13.886975288391113
    8. 'min' → logprob: -13.886975288391113
    9. '(max' → logprob: -14.386975288391113
    10. '_max' → logprob: -14.636975288391113

Token 1216: '_over' (ID: 34788)
  Prédit: '_over'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_over' → logprob: -1.9361264946837764e-07
    2. 'over' → logprob: -16.625
    3. '_' → logprob: -17.625
    4. '_override' → logprob: -17.75
    5. '_overlap' → logprob: -18.625
    6. '_OVER' → logprob: -19.0
    7. '
' → logprob: -19.125
    8. 'Over' → logprob: -19.125
    9. '=' → logprob: -19.125
    10. '\' → logprob: -19.25

Token 1217: '_choices' (ID: 163292)
  Prédit: '_choices'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_choices' → logprob: -0.0010348338400945067
    2. 'choices' → logprob: -6.876034736633301
    3. 'Choices' → logprob: -13.3760347366333
    4. '_choice' → logprob: -15.5010347366333
    5. '_CHO' → logprob: -16.126035690307617
    6. ' choices' → logprob: -16.501035690307617
    7. ' Choices' → logprob: -16.751035690307617
    8. '```' → logprob: -17.001035690307617
    9. '`' → logprob: -18.126035690307617
    10. '_changes' → logprob: -19.251035690307617

Token 1218: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.3868734836578369
    2. ' =' → logprob: -1.136873483657837
    3. '=max' → logprob: -13.011873245239258
    4. '                   ' → logprob: -16.886873245239258
    5. '                       ' → logprob: -17.011873245239258
    6. '＝' → logprob: -18.136873245239258
    7. '               ' → logprob: -18.261873245239258
    8. '   ' → logprob: -18.386873245239258
    9. '=
' → logprob: -18.886873245239258
    10. ' ' → logprob: -19.136873245239258

Token 1219: ' min' (ID: 1349)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.4740772247314453
    2. ' min' → logprob: -0.9740772247314453
    3. '	min' → logprob: -15.974077224731445
    4. 'max' → logprob: -16.974077224731445
    5. '_min' → logprob: -17.474077224731445
    6. '(min' → logprob: -17.724077224731445
    7. ' ' → logprob: -18.099077224731445
    8. '   ' → logprob: -18.224077224731445
    9. '[min' → logprob: -19.099077224731445
    10. '=min' → logprob: -19.599077224731445

Token 1220: '_dp' (ID: 133252)
  Prédit: '_dp'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_dp' → logprob: 0.0
    2. '_dt' → logprob: -17.125
    3. 'dp' → logprob: -17.375
    4. '_dx' → logprob: -17.75
    5. '_dc' → logprob: -19.0
    6. '_mp' → logprob: -19.625
    7. '_dn' → logprob: -19.625
    8. '	dp' → logprob: -19.875
    9. '_cp' → logprob: -19.875
    10. '_tp' → logprob: -19.875

Token 1221: '_next' (ID: 25436)
  Prédit: '_next'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_next' → logprob: -0.0003384422743692994
    2. 'next' → logprob: -8.000338554382324
    3. 'Next' → logprob: -13.250338554382324
    4. '[next' → logprob: -14.750338554382324
    5. ' next' → logprob: -15.000338554382324
    6. '.next' → logprob: -16.000337600708008
    7. '_over' → logprob: -16.375337600708008
    8. '_' → logprob: -16.625337600708008
    9. '_n' → logprob: -16.625337600708008
    10. '	next' → logprob: -16.750337600708008

Token 1222: '
            
' (ID: 45334)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.012580055743455887
    2. '
' → logprob: -4.387579917907715
    3. '            
' → logprob: -10.762579917907715
    4. '    
' → logprob: -11.512579917907715
    5. '       ' → logprob: -11.637579917907715
    6. '               ' → logprob: -12.137579917907715
    7. '   ' → logprob: -12.387579917907715
    8. '+' → logprob: -12.512579917907715
    9. ' 
' → logprob: -12.762579917907715
    10. '          ' → logprob: -12.887579917907715

Token 1223: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.00076114950934425
    2. '               ' → logprob: -8.000761032104492
    3. ')' → logprob: -8.625761032104492
    4. '       ' → logprob: -9.250761032104492
    5. '   ' → logprob: -10.375761032104492
    6. ' )' → logprob: -10.750761032104492
    7. ' =' → logprob: -11.125761032104492
    8. '
' → logprob: -11.125761032104492
    9. '            
' → logprob: -11.500761032104492
    10. '<|end|>' → logprob: -11.500761032104492

Token 1224: ' if' (ID: 538)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.11675959080457687
    2. 'if' (adapté à ' if') → logprob: -2.3667595386505127
    3. ' if' → logprob: -4.116759777069092
    4. '       ' → logprob: -9.616759300231934
    5. '   ' → logprob: -10.991759300231934
    6. '
' → logprob: -11.366759300231934
    7. '               ' → logprob: -11.616759300231934
    8. '```' → logprob: -12.116759300231934
    9. '+' → logprob: -12.491759300231934
    10. '		' → logprob: -13.491759300231934

Token 1225: ' possible' (ID: 4149)
  Prédit: 'possible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'possible' → logprob: -1.0183299779891968
    2. ' max' → logprob: -1.3933299779891968
    3. ' possible' → logprob: -1.6433299779891968
    4. 'max' → logprob: -1.6433299779891968
    5. ' not' → logprob: -6.143330097198486
    6. ' dp' → logprob: -7.143330097198486
    7. 'dp' → logprob: -7.268330097198486
    8. 'not' → logprob: -8.643329620361328
    9. ' ' → logprob: -10.018329620361328
    10. '   ' → logprob: -11.768329620361328

Token 1226: ':
' (ID: 734)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.44650736451148987
    2. ' and' → logprob: -1.1965073347091675
    3. ':' → logprob: -3.946507453918457
    4. '==' → logprob: -4.321507453918457
    5. 'and' → logprob: -4.821507453918457
    6. ' =' → logprob: -4.946507453918457
    7. ' <=' → logprob: -5.446507453918457
    8. '               ' → logprob: -5.946507453918457
    9. ':
' → logprob: -7.071507453918457
    10. '           ' → logprob: -7.446507453918457

Token 1227: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.0013442812487483025
    2. '           ' → logprob: -7.001344203948975
    3. ' dp' → logprob: -9.001344680786133
    4. ' if' → logprob: -9.876344680786133
    5. '	           ' → logprob: -10.001344680786133
    6. 'dp' → logprob: -10.126344680786133
    7. '		       ' → logprob: -10.626344680786133
    8. ' and' → logprob: -10.876344680786133
    9. '	       ' → logprob: -10.876344680786133
    10. '```' → logprob: -11.251344680786133

Token 1228: ' #' (ID: 1069)
  Prédit: ' new'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' new' → logprob: -0.25085484981536865
    2. '               ' → logprob: -2.250854969024658
    3. 'new' → logprob: -2.875854969024658
    4. ' if' → logprob: -3.250854969024658
    5. ' dp' → logprob: -4.250854969024658
    6. 'dp' → logprob: -5.625854969024658
    7. 'if' → logprob: -6.125854969024658
    8. 'val' → logprob: -7.625854969024658
    9. ' val' → logprob: -8.3758544921875
    10. '                   ' → logprob: -9.5008544921875

Token 1229: ' T' (ID: 353)
  Prédit: 'new'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'new' → logprob: -0.09295862168073654
    2. 'if' → logprob: -2.842958688735962
    3. 'val' → logprob: -4.092958450317383
    4. ' new' → logprob: -5.467958450317383
    5. 'nd' → logprob: -5.592958450317383
    6. '                   ' → logprob: -6.842958450317383
    7. 'cost' → logprob: -6.842958450317383
    8. '               ' → logprob: -7.217958450317383
    9. 'candidate' → logprob: -7.217958450317383
    10. ' if' → logprob: -7.717958450317383

Token 1230: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.007435888983309269
    2. '=' → logprob: -5.3824357986450195
    3. '               ' → logprob: -7.3824357986450195
    4. '_candidate' → logprob: -7.6324357986450195
    5. '[node' → logprob: -7.6324357986450195
    6. '_val' → logprob: -7.8824357986450195
    7. '_new' → logprob: -8.13243579864502
    8. '                   ' → logprob: -8.75743579864502
    9. '           ' → logprob: -9.00743579864502
    10. '=node' → logprob: -9.25743579864502

Token 1231: ' ' (ID: 220)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.023792168125510216
    2. '1' → logprob: -3.773792266845703
    3. ' max' → logprob: -7.523792266845703
    4. '               ' → logprob: -13.023792266845703
    5. ' ' → logprob: -13.523792266845703
    6. '                   ' → logprob: -14.023792266845703
    7. '   ' → logprob: -14.023792266845703
    8. '           ' → logprob: -14.773792266845703
    9. '=max' → logprob: -15.148792266845703
    10. '(max' → logprob: -15.523792266845703

Token 1232: '1' (ID: 16)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.3868933916091919
    2. '1' → logprob: -1.136893391609192
    3. ' max' → logprob: -10.886893272399902
    4. ' ' → logprob: -13.511893272399902
    5. '   ' → logprob: -14.136893272399902
    6. '(max' → logprob: -14.261893272399902
    7. 'min' → logprob: -15.511893272399902
    8. '`' → logprob: -15.761893272399902
    9. '+' → logprob: -16.13689422607422
    10. '	max' → logprob: -16.38689422607422

Token 1233: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.575939953327179
    2. '+' → logprob: -0.825939953327179
    3. '+
' → logprob: -15.325940132141113
    4. ' +
' → logprob: -16.575939178466797
    5. ' ' → logprob: -17.075939178466797
    6. '＋' → logprob: -17.075939178466797
    7. ' ' → logprob: -17.825939178466797
    8. '+#' → logprob: -18.075939178466797
    9. ' plus' → logprob: -18.450939178466797
    10. '+i' → logprob: -18.575939178466797

Token 1234: ' max' (ID: 2999)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'max' → logprob: -4.842555426876061e-06
    2. ' max' → logprob: -12.250004768371582
    3. '[max' → logprob: -22.3750057220459
    4. '           ' → logprob: -22.5000057220459
    5. '	max' → logprob: -22.8750057220459
    6. '(max' → logprob: -23.6250057220459
    7. '_max' → logprob: -23.7500057220459
    8. '   ' → logprob: -24.1250057220459
    9. '               ' → logprob: -24.3750057220459
    10. '                   ' → logprob: -24.5000057220459

Token 1235: '_over' (ID: 34788)
  Prédit: '_over'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_over' → logprob: -5.512236498361744e-07
    2. 'over' → logprob: -14.500000953674316
    3. 'Over' → logprob: -18.75
    4. '```' → logprob: -19.0
    5. '(over' → logprob: -19.125
    6. '_OVER' → logprob: -19.375
    7. '\' → logprob: -19.5
    8. '(_' → logprob: -20.0
    9. 'sover' → logprob: -20.125
    10. '   ' → logprob: -20.5

Token 1236: '_choices' (ID: 163292)
  Prédit: '_choices'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_choices' → logprob: -2.248469718324486e-05
    2. '_over' → logprob: -10.750022888183594
    3. '\' → logprob: -14.500022888183594
    4. '_CHO' → logprob: -16.000022888183594
    5. '_choice' → logprob: -16.125022888183594
    6. '_changes' → logprob: -16.625022888183594
    7. '```' → logprob: -16.750022888183594
    8. 'choices' → logprob: -17.125022888183594
    9. '
' → logprob: -17.875022888183594
    10. '`' → logprob: -18.750022888183594

Token 1237: '
' (ID: 198)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.4126425087451935
    2. '
' → logprob: -1.162642478942871
    3. '           ' → logprob: -4.537642478942871
    4. '                   ' → logprob: -5.537642478942871
    5. ')' → logprob: -6.162642478942871
    6. ' 
' → logprob: -6.412642478942871
    7. '                
' → logprob: -6.537642478942871
    8. '            
' → logprob: -7.162642478942871
    9. '<|end|>' → logprob: -7.162642478942871
    10. '```' → logprob: -7.787642478942871

Token 1238: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.001979072345420718
    2. '                   ' → logprob: -7.251978874206543
    3. ' =' → logprob: -8.251978874206543
    4. ':
' → logprob: -8.376978874206543
    5. '           ' → logprob: -8.876978874206543
    6. ':' → logprob: -9.001978874206543
    7. ')' → logprob: -9.126978874206543
    8. '                       ' → logprob: -9.126978874206543
    9. '                
' → logprob: -9.751978874206543
    10. '):
' → logprob: -10.001978874206543

Token 1239: ' candidate' (ID: 17098)
  Prédit: ' new'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' new' → logprob: -0.19776740670204163
    2. 'new' → logprob: -2.447767496109009
    3. ' dp' → logprob: -3.322767496109009
    4. '               ' → logprob: -3.447767496109009
    5. 'dp' → logprob: -4.69776725769043
    6. ' if' → logprob: -5.19776725769043
    7. 't' → logprob: -5.32276725769043
    8. ' t' → logprob: -6.69776725769043
    9. 'if' → logprob: -7.19776725769043
    10. ' T' → logprob: -7.69776725769043

Token 1240: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.20141470432281494
    2. '=' → logprob: -1.701414704322815
    3. '_' → logprob: -13.951415061950684
    4. ' =
' → logprob: -16.201414108276367
    5. ' ' → logprob: -16.326414108276367
    6. ' ' → logprob: -16.576414108276367
    7. '_dp' → logprob: -16.576414108276367
    8. ')' → logprob: -17.076414108276367
    9. '_value' → logprob: -17.326414108276367
    10. ' =
' → logprob: -17.451414108276367

Token 1241: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.39758989214897156
    2. ' max' → logprob: -1.647589921951294
    3. ' ' → logprob: -2.522589921951294
    4. 'max' → logprob: -2.897589921951294
    5. '               ' → logprob: -9.647589683532715
    6. '                   ' → logprob: -9.897589683532715
    7. '                ' → logprob: -11.522589683532715
    8. '   ' → logprob: -12.397589683532715
    9. '            ' → logprob: -13.022589683532715
    10. '           ' → logprob: -13.022589683532715

Token 1242: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.005942898336797953
    2. 'max' → logprob: -5.1309428215026855
    3. ' ' → logprob: -11.630943298339844
    4. '   ' → logprob: -13.130943298339844
    5. 'dp' → logprob: -13.255943298339844
    6. ' max' → logprob: -13.630943298339844
    7. '           ' → logprob: -16.130943298339844
    8. '       ' → logprob: -17.380943298339844
    9. '               ' → logprob: -17.380943298339844
    10. '(max' → logprob: -17.380943298339844

Token 1243: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.3868737816810608
    2. '+' → logprob: -1.136873722076416
    3. '               ' → logprob: -13.136874198913574
    4. '                ' → logprob: -15.386874198913574
    5. '                   ' → logprob: -15.761874198913574
    6. '+c' → logprob: -15.886874198913574
    7. '           ' → logprob: -16.511873245239258
    8. ' ' → logprob: -17.261873245239258
    9. ' +
' → logprob: -17.636873245239258
    10. '+
' → logprob: -17.886873245239258

Token 1244: ' max' (ID: 2999)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'max' → logprob: -7.941850526549388e-06
    2. ' max' → logprob: -11.750007629394531
    3. '[max' → logprob: -23.12500762939453
    4. '(max' → logprob: -23.75000762939453
    5. '	max' → logprob: -24.00000762939453
    6. '_max' → logprob: -24.37500762939453
    7. '           ' → logprob: -25.25000762939453
    8. '   ' → logprob: -26.37500762939453
    9. '=max' → logprob: -26.50000762939453
    10. '.max' → logprob: -27.00000762939453

Token 1245: '_over' (ID: 34788)
  Prédit: '_over'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_over' → logprob: 0.0
    2. 'over' → logprob: -18.625
    3. '_OVER' → logprob: -19.375
    4. '_overlap' → logprob: -20.5
    5. 'Over' → logprob: -20.625
    6. '\' → logprob: -21.125
    7. '_under' → logprob: -21.125
    8. '```' → logprob: -21.375
    9. '_or' → logprob: -21.875
    10. '_' → logprob: -22.0

Token 1246: '_choices' (ID: 163292)
  Prédit: '_choices'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_choices' → logprob: -0.00023321842309087515
    2. 'choices' → logprob: -8.37523365020752
    3. 'Choices' → logprob: -13.50023365020752
    4. '_choice' → logprob: -13.87523365020752
    5. '_CHO' → logprob: -15.87523365020752
    6. ' choices' → logprob: -17.000232696533203
    7. 'choice' → logprob: -18.125232696533203
    8. ' Choices' → logprob: -18.250232696533203
    9. '```' → logprob: -18.250232696533203
    10. '`' → logprob: -18.500232696533203

Token 1247: '
' (ID: 198)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.06713356077671051
    2. '           ' → logprob: -2.817133665084839
    3. '
' → logprob: -6.31713342666626
    4. '       ' → logprob: -6.56713342666626
    5. '<|end|>' → logprob: -7.06713342666626
    6. ' if' → logprob: -7.94213342666626
    7. ')' → logprob: -8.067133903503418
    8. 'if' → logprob: -8.692133903503418
    9. '                   ' → logprob: -9.817133903503418
    10. ')
' → logprob: -10.317133903503418

Token 1248: '               ' (ID: 506)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.010608668439090252
    2. '               ' → logprob: -4.635608673095703
    3. ' if' → logprob: -8.135608673095703
    4. '		' → logprob: -9.135608673095703
    5. '<|end|>' → logprob: -9.510608673095703
    6. '            
' → logprob: -9.760608673095703
    7. '                   ' → logprob: -10.010608673095703
    8. 'if' → logprob: -10.135608673095703
    9. '	       ' → logprob: -10.260608673095703
    10. '       ' → logprob: -10.260608673095703

Token 1249: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.012972804717719555
    2. ' if' → logprob: -4.512972831726074
    3. '           ' → logprob: -6.262972831726074
    4. '               ' → logprob: -11.137972831726074
    5. '	if' → logprob: -13.637972831726074
    6. '                   ' → logprob: -14.637972831726074
    7. '       ' → logprob: -15.012972831726074
    8. '		' → logprob: -16.137971878051758
    9. '          ' → logprob: -16.137971878051758
    10. '   ' → logprob: -16.262971878051758

Token 1250: ' candidate' (ID: 17098)
  Prédit: 'candidate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'candidate' → logprob: -0.010850912891328335
    2. ' candidate' → logprob: -5.01085090637207
    3. 'dp' → logprob: -5.51085090637207
    4. ' dp' → logprob: -9.38585090637207
    5. '(candidate' → logprob: -15.76085090637207
    6. 'cand' → logprob: -16.76085090637207
    7. '   ' → logprob: -17.01085090637207
    8. '_candidate' → logprob: -17.51085090637207
    9. '           ' → logprob: -18.01085090637207
    10. '	dp' → logprob: -18.51085090637207

Token 1251: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.016282567754387856
    2. '<' → logprob: -4.141282558441162
    3. '[' → logprob: -8.39128303527832
    4. '<|end|>' → logprob: -11.76628303527832
    5. '<int' → logprob: -12.76628303527832
    6. '<n' → logprob: -13.26628303527832
    7. ')' → logprob: -13.76628303527832
    8. ' ' → logprob: -14.01628303527832
    9. '<th' → logprob: -14.14128303527832
    10. '[token' → logprob: -14.14128303527832

Token 1252: ' dp' (ID: 21546)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dp' → logprob: -2.339278580620885e-06
    2. ' dp' → logprob: -13.000001907348633
    3. '	dp' → logprob: -18.375001907348633
    4. '_dp' → logprob: -19.500001907348633
    5. '(dp' → logprob: -19.875001907348633
    6. '   ' → logprob: -20.000001907348633
    7. '           ' → logprob: -20.125001907348633
    8. 'INF' → logprob: -20.500001907348633
    9. '=' → logprob: -21.125001907348633
    10. '                   ' → logprob: -21.875001907348633

Token 1253: '[node' (ID: 67268)
  Prédit: '[node'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[node' → logprob: 0.0
    2. 'node' → logprob: -19.875
    3. '(node' → logprob: -20.0
    4. '[' → logprob: -21.625
    5. '```' → logprob: -21.875
    6. '=node' → logprob: -22.125
    7. ' node' → logprob: -22.5
    8. '[token' → logprob: -22.5
    9. ' [' → logprob: -22.75
    10. '[
' → logprob: -22.875

Token 1254: ']:
' (ID: 22152)
  Prédit: '[node'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[node' → logprob: -0.019311733543872833
    2. ']:
' → logprob: -4.019311904907227
    3. ']:' → logprob: -7.019311904907227
    4. ']' → logprob: -8.269311904907227
    5. '):
' → logprob: -13.519311904907227
    6. ']:

' → logprob: -13.519311904907227
    7. ']:
' → logprob: -13.894311904907227
    8. '               ' → logprob: -13.894311904907227
    9. '(node' → logprob: -14.019311904907227
    10. '       ' → logprob: -14.144311904907227

Token 1255: '                   ' (ID: 699)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.21918901801109314
    2. '                   ' → logprob: -1.8441890478134155
    3. ' dp' → logprob: -4.094189167022705
    4. '                       ' → logprob: -4.469189167022705
    5. 'dp' → logprob: -5.594189167022705
    6. '                               ' → logprob: -6.344189167022705
    7. '                           ' → logprob: -6.719189167022705
    8. '           ' → logprob: -7.219189167022705
    9. '```' → logprob: -7.469189167022705
    10. '(dp' → logprob: -7.719189167022705

Token 1256: ' dp' (ID: 21546)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dp' (adapté à ' dp') → logprob: -0.0726417526602745
    2. ' dp' → logprob: -2.8226418495178223
    3. '                   ' → logprob: -4.572641849517822
    4. '               ' → logprob: -8.572641372680664
    5. '                       ' → logprob: -9.322641372680664
    6. '	dp' → logprob: -12.947641372680664
    7. '(dp' → logprob: -13.197641372680664
    8. '_dp' → logprob: -13.822641372680664
    9. '```' → logprob: -13.947641372680664
    10. '           ' → logprob: -14.322641372680664

Token 1257: '[node' (ID: 67268)
  Prédit: '[node'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[node' → logprob: 0.0
    2. '```' → logprob: -20.0
    3. '[' → logprob: -20.75
    4. '(node' → logprob: -20.75
    5. '[token' → logprob: -21.75
    6. '\[' → logprob: -21.75
    7. 'node' → logprob: -22.0
    8. '[
' → logprob: -22.125
    9. '=node' → logprob: -22.125
    10. '[player' → logprob: -22.75

Token 1258: ']' (ID: 60)
  Prédit: '[node'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[node' → logprob: -0.023780174553394318
    2. ']' → logprob: -3.773780107498169
    3. '=' → logprob: -8.52377986907959
    4. '[' → logprob: -8.89877986907959
    5. '=node' → logprob: -9.39877986907959
    6. ']=' → logprob: -9.52377986907959
    7. ' =' → logprob: -10.39877986907959
    8. '[
' → logprob: -12.39877986907959
    9. '                   ' → logprob: -13.39877986907959
    10. '```' → logprob: -13.52377986907959

Token 1259: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.023245712742209435
    2. ' =' → logprob: -3.7732458114624023
    3. '＝' → logprob: -16.148244857788086
    4. '=
' → logprob: -17.023244857788086
    5. '.=' → logprob: -17.398244857788086
    6. '=

' → logprob: -18.398244857788086
    7. '=c' → logprob: -19.648244857788086
    8. '=}' → logprob: -20.648244857788086
    9. ' =
' → logprob: -20.773244857788086
    10. ',' → logprob: -21.148244857788086

Token 1260: ' candidate' (ID: 17098)
  Prédit: 'candidate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'candidate' → logprob: -6.2729995988775045e-06
    2. ' candidate' → logprob: -12.000006675720215
    3. '(candidate' → logprob: -20.2500057220459
    4. 'c' → logprob: -22.6250057220459
    5. '_candidate' → logprob: -23.5000057220459
    6. ' candidat' → logprob: -25.3750057220459
    7. '候' → logprob: -25.3750057220459
    8. 'cand' → logprob: -25.5000057220459
    9. '                   ' → logprob: -25.6250057220459
    10. 'andidate' → logprob: -26.7500057220459

Token 1261: '
' (ID: 198)
  Prédit: '                   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                   ' → logprob: -4.0484450437361374e-05
    2. '				' → logprob: -11.500040054321289
    3. '               ' → logprob: -11.750040054321289
    4. '           ' → logprob: -11.875040054321289
    5. '		           ' → logprob: -12.500040054321289
    6. '                    
' → logprob: -12.875040054321289
    7. '
' → logprob: -13.125040054321289
    8. '                  ' → logprob: -13.375040054321289
    9. '                       ' → logprob: -13.500040054321289
    10. '<|end|>' → logprob: -13.625040054321289

Token 1262: '                   ' (ID: 699)
  Prédit: '                   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.0012151175178587437
    2. '```' → logprob: -7.626214981079102
    3. '                    
' → logprob: -8.376214981079102
    4. '               ' → logprob: -8.501214981079102
    5. '           ' → logprob: -9.001214981079102
    6. '                       ' → logprob: -9.376214981079102
    7. '
' → logprob: -11.126214981079102
    8. '\' → logprob: -11.376214981079102
    9. '                        
' → logprob: -11.626214981079102
    10. '``' → logprob: -12.251214981079102

Token 1263: ' changed' (ID: 9180)
  Prédit: 'changed'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'changed' (adapté à ' changed') → logprob: -0.4584552049636841
    2. '                   ' → logprob: -1.208455204963684
    3. ' changed' → logprob: -2.7084550857543945
    4. '                       ' → logprob: -6.7084550857543945
    5. '               ' → logprob: -7.2084550857543945
    6. '           ' → logprob: -8.458455085754395
    7. '```' → logprob: -8.583455085754395
    8. '   ' → logprob: -10.833455085754395
    9. '       ' → logprob: -11.083455085754395
    10. '                           ' → logprob: -11.083455085754395

Token 1264: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.25193527340888977
    2. ' =' → logprob: -1.5019352436065674
    3. '=True' → logprob: -12.001935005187988
    4. '   ' → logprob: -16.626935958862305
    5. ' ' → logprob: -18.751935958862305
    6. '    ' → logprob: -19.001935958862305
    7. '           ' → logprob: -19.126935958862305
    8. '       ' → logprob: -19.376935958862305
    9. 'True' → logprob: -19.376935958862305
    10. '<|end|>' → logprob: -19.501935958862305

Token 1265: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.004078401252627373
    2. ' True' → logprob: -5.504078388214111
    3. '(True' → logprob: -19.004077911376953
    4. '=True' → logprob: -19.754077911376953
    5. '   ' → logprob: -21.254077911376953
    6. 'true' → logprob: -22.754077911376953
    7. ' ' → logprob: -24.754077911376953
    8. '    ' → logprob: -25.129077911376953
    9. '_true' → logprob: -25.254077911376953
    10. '                   ' → logprob: -25.379077911376953

Token 1266: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 1267: '           ' (ID: 352)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 1268: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 1269: ' sinon' (ID: 52915)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 1270: ' pas' (ID: 2173)
  Prédit: 'continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'continue' → logprob: -0.8962046504020691
    2. 'pass' → logprob: -1.1462047100067139
    3. ' pass' → logprob: -1.8962047100067139
    4. ' continue' → logprob: -2.146204710006714
    5. '       ' → logprob: -6.021204471588135
    6. '   ' → logprob: -6.146204471588135
    7. '               ' → logprob: -6.146204471588135
    8. '           ' → logprob: -8.521204948425293
    9. '	pass' → logprob: -10.646204948425293
    10. '	continue' → logprob: -10.896204948425293

Token 1271: ' de' (ID: 334)
  Prédit: 'possible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'possible' → logprob: -0.47614091634750366
    2. '#' → logprob: -1.8511409759521484
    3. 'de' → logprob: -2.3511409759521484
    4. 'd' → logprob: -2.6011409759521484
    5. 'mod' → logprob: -4.226140975952148
    6. ' possible' → logprob: -5.601140975952148
    7. 'change' → logprob: -5.726140975952148
    8. '   ' → logprob: -5.726140975952148
    9. 'changed' → logprob: -5.976140975952148
    10. ' de' → logprob: -6.101140975952148

Token 1272: ' victoire' (ID: 96596)
  Prédit: 'ch'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ch' → logprob: -0.17921751737594604
    2. 'mod' → logprob: -2.554217576980591
    3. 'change' → logprob: -2.554217576980591
    4. ' changement' → logprob: -5.554217338562012
    5. 'chang' → logprob: -6.054217338562012
    6. 'code' → logprob: -7.679217338562012
    7. 'mise' → logprob: -8.304217338562012
    8. 'pass' → logprob: -8.304217338562012
    9. '```' → logprob: -8.304217338562012
    10. 'action' → logprob: -8.554217338562012

Token 1273: ' possible' (ID: 4149)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 1274: ' à' (ID: 1221)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 1275: ' partir' (ID: 12100)
  Prédit: 'cet'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'cet' → logprob: -0.4094092845916748
    2. 'ce' → logprob: -1.2844092845916748
    3. 'c' → logprob: -3.034409284591675
    4. ' cet' → logprob: -5.159409523010254
    5. ' ce' → logprob: -5.534409523010254
    6. 'court' → logprob: -8.034409523010254
    7. 'node' → logprob: -8.159409523010254
    8. 'cela' → logprob: -8.909409523010254
    9. 'cel' → logprob: -9.034409523010254
    10. 'this' → logprob: -9.034409523010254

Token 1276: ' de' (ID: 334)
  Prédit: 'de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'de' → logprob: -0.16594602167606354
    2. ' de' → logprob: -2.4159460067749023
    3. '           ' → logprob: -3.0409460067749023
    4. 'node' → logprob: -4.790946006774902
    5. 'du' → logprob: -5.915946006774902
    6. '(node' → logprob: -6.165946006774902
    7. '[node' → logprob: -6.915946006774902
    8. '               ' → logprob: -7.290946006774902
    9. ' node' → logprob: -8.415946006774902
    10. '=node' → logprob: -8.415946006774902

Token 1277: ' node' (ID: 4596)
  Prédit: 'node'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'node' → logprob: -0.000694919959641993
    2. 'ce' → logprob: -7.750694751739502
    3. ' node' → logprob: -9.25069522857666
    4. '```' → logprob: -10.12569522857666
    5. 'cet' → logprob: -10.50069522857666
    6. 'c' → logprob: -10.50069522857666
    7. '[node' → logprob: -11.00069522857666
    8. ' ce' → logprob: -11.12569522857666
    9. 'cel' → logprob: -11.50069522857666
    10. 'ici' → logprob: -11.87569522857666

Token 1278: '
    
' (ID: 15698)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 1279: '   ' (ID: 271)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.15756797790527344
    2. 'main' → logprob: -2.9075679779052734
    3. '<|end|>' → logprob: -3.2825679779052734
    4. '   ' → logprob: -3.7825679779052734
    5. '```' → logprob: -3.7825679779052734
    6. '
' → logprob: -5.657567977905273
    7. '    
' → logprob: -6.407567977905273
    8. 'return' → logprob: -6.657567977905273
    9. '(main' → logprob: -8.282567977905273
    10. '``' → logprob: -8.407567977905273

Token 1280: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5708639621734619
    2. 'print' → logprob: -1.320863962173462
    3. 'for' → logprob: -1.820863962173462
    4. '```' → logprob: -5.570863723754883
    5. 'if' → logprob: -6.695863723754883
    6. '    
' → logprob: -7.570863723754883
    7. ' for' → logprob: -8.570863723754883
    8. 'return' → logprob: -8.695863723754883
    9. '
' → logprob: -8.695863723754883
    10. ' print' → logprob: -10.070863723754883

Token 1281: ' Rés' (ID: 104378)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2950044274330139
    2. 'for' → logprob: -1.9200043678283691
    3. 'print' → logprob: -2.295004367828369
    4. 'result' → logprob: -5.295004367828369
    5. 'if' → logprob: -6.045004367828369
    6. 'answer' → logprob: -8.670004844665527
    7. '```' → logprob: -8.920004844665527
    8. '
' → logprob: -8.920004844665527
    9. '    
' → logprob: -9.420004844665527
    10. ' for' → logprob: -9.670004844665527

Token 1282: 'ultat' (ID: 133070)
  Prédit: 'ultat'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ultat' → logprob: -0.05697783827781677
    2. 'ult' → logprob: -3.6819777488708496
    3. 'print' → logprob: -3.6819777488708496
    4. '   ' → logprob: -5.30697774887085
    5. '#' → logprob: -10.056978225708008
    6. 'ulat' → logprob: -11.681978225708008
    7. 'utat' → logprob: -11.806978225708008
    8. '       ' → logprob: -12.056978225708008
    9. '#print' → logprob: -12.306978225708008
    10. 'umé' → logprob: -12.806978225708008

Token 1283: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.222700297832489
    2. '   ' → logprob: -2.097700357437134
    3. 'if' → logprob: -2.972700357437134
    4. 'result' → logprob: -3.722700357437134
    5. ' print' → logprob: -7.472700119018555
    6. ' if' → logprob: -7.722700119018555
    7. 'answer' → logprob: -8.472700119018555
    8. 'res' → logprob: -8.722700119018555
    9. '```' → logprob: -9.347700119018555
    10. 'for' → logprob: -9.972700119018555

Token 1284: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.06254678964614868
    2. '   ' → logprob: -3.062546730041504
    3. 'if' → logprob: -4.687546730041504
    4. ' print' → logprob: -5.812546730041504
    5. '```' → logprob: -7.437546730041504
    6. '
' → logprob: -7.687546730041504
    7. ' if' → logprob: -7.812546730041504
    8. 'for' → logprob: -9.437546730041504
    9. '    
' → logprob: -9.687546730041504
    10. 'result' → logprob: -9.937546730041504

Token 1285: ' if' (ID: 538)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.03356800973415375
    2. '```' → logprob: -3.7835679054260254
    3. '   ' → logprob: -4.908567905426025
    4. 'if' (adapté à ' if') → logprob: -6.283567905426025
    5. ' print' → logprob: -7.283567905426025
    6. 'result' → logprob: -8.658568382263184
    7. '``' → logprob: -9.658568382263184
    8. 'for' → logprob: -9.908568382263184
    9. ' if' → logprob: -10.283568382263184
    10. '    
' → logprob: -12.033568382263184

Token 1286: ' dp' (ID: 21546)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dp' → logprob: -4.5491004129871726e-05
    2. ' dp' → logprob: -10.000045776367188
    3. '	dp' → logprob: -17.500045776367188
    4. '(dp' → logprob: -17.750045776367188
    5. '   ' → logprob: -19.750045776367188
    6. ' ' → logprob: -21.250045776367188
    7. '_dp' → logprob: -22.125045776367188
    8. '  ' → logprob: -22.375045776367188
    9. 'd' → logprob: -22.375045776367188
    10. '.dp' → logprob: -23.125045776367188

Token 1287: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.735893965815194e-05
    2. '[n' → logprob: -11.000017166137695
    3. '```' → logprob: -15.000017166137695
    4. '1' → logprob: -16.000017166137695
    5. '==' → logprob: -17.125017166137695
    6. ' [' → logprob: -17.500017166137695
    7. 'n' → logprob: -17.625017166137695
    8. '#' → logprob: -17.625017166137695
    9. '\[' → logprob: -17.875017166137695
    10. '[node' → logprob: -18.375017166137695

Token 1288: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -2.522638169466518e-05
    2. '[' → logprob: -10.625024795532227
    3. ' ' → logprob: -14.375024795532227
    4. '
' → logprob: -15.875024795532227
    5. '```' → logprob: -15.875024795532227
    6. '   ' → logprob: -17.375024795532227
    7. '

' → logprob: -17.750024795532227
    8. '0' → logprob: -18.375024795532227
    9. ']' → logprob: -18.500024795532227
    10. '`' → logprob: -19.625024795532227

Token 1289: ']' (ID: 60)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.531360387802124
    2. ']' → logprob: -1.156360387802124
    3. ']==' → logprob: -2.906360387802124
    4. ' ==' → logprob: -3.156360387802124
    5. '<' → logprob: -8.906360626220703
    6. '[' → logprob: -9.406360626220703
    7. ' ]' → logprob: -10.781360626220703
    8. '```' → logprob: -10.781360626220703
    9. '==
' → logprob: -11.531360626220703
    10. ']<' → logprob: -11.781360626220703

Token 1290: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.04899926111102104
    2. ' ==' → logprob: -3.048999309539795
    3. '!=' → logprob: -8.173998832702637
    4. '<' → logprob: -9.048998832702637
    5. ' !=' → logprob: -11.798998832702637
    6. '<=' → logprob: -13.298998832702637
    7. ' <' → logprob: -14.298998832702637
    8. '>=' → logprob: -14.298998832702637
    9. '==
' → logprob: -14.423998832702637
    10. '```' → logprob: -14.923998832702637

Token 1291: ' INF' (ID: 69196)
  Prédit: 'INF'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'INF' → logprob: -4.842555426876061e-06
    2. '10' → logprob: -12.250004768371582
    3. ' INF' → logprob: -18.1250057220459
    4. 'IN' → logprob: -18.1250057220459
    5. 'inf' → logprob: -19.3750057220459
    6. '_INF' → logprob: -19.3750057220459
    7. 'Inf' → logprob: -20.8750057220459
    8. '100' → logprob: -21.7500057220459
    9. '-INF' → logprob: -21.8750057220459
    10. '   ' → logprob: -21.8750057220459

Token 1292: ':
' (ID: 734)
  Prédit: ':
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':
' → logprob: -0.2562442719936371
    2. ':' → logprob: -1.5062443017959595
    3. '       ' → logprob: -6.38124418258667
    4. 'print' → logprob: -6.75624418258667
    5. '   ' → logprob: -7.13124418258667
    6. '=' → logprob: -7.88124418258667
    7. ' print' → logprob: -9.256244659423828
    8. '==' → logprob: -9.881244659423828
    9. '):
' → logprob: -10.131244659423828
    10. ':return' → logprob: -10.631244659423828

Token 1293: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.008738666772842407
    2. 'print' → logprob: -4.7587385177612305
    3. ' print' → logprob: -9.88373851776123
    4. '       ' → logprob: -9.88373851776123
    5. '```' → logprob: -11.00873851776123
    6. '	print' → logprob: -12.25873851776123
    7. '
' → logprob: -15.38373851776123
    8. '    
' → logprob: -15.50873851776123
    9. '``' → logprob: -15.75873851776123
    10. '`' → logprob: -16.633739471435547

Token 1294: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0005697138840332627
    2. '   ' → logprob: -7.500569820404053
    3. ' print' → logprob: -11.750569343566895
    4. '```' → logprob: -11.875569343566895
    5. 'return' → logprob: -13.875569343566895
    6. '	print' → logprob: -14.375569343566895
    7. '       ' → logprob: -15.250569343566895
    8. '
' → logprob: -16.62557029724121
    9. '    
' → logprob: -17.25057029724121
    10. '``' → logprob: -17.50057029724121

Token 1295: '("' (ID: 568)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '-' → logprob: -0.0004131536406930536
    2. '(-' → logprob: -7.875412940979004
    3. '-im' → logprob: -10.500412940979004
    4. '"-' → logprob: -12.750412940979004
    5. ' -' → logprob: -13.750412940979004
    6. '\-' → logprob: -15.250412940979004
    7. '("-' → logprob: -15.500412940979004
    8. '-Im' → logprob: -15.875412940979004
    9. '()-' → logprob: -16.37541389465332
    10. '-il' → logprob: -16.50041389465332

Token 1296: 'IMP' (ID: 67171)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.004014291800558567
    2. 'IMP' → logprob: -5.879014492034912
    3. 'Impossible' → logprob: -6.879014492034912
    4. 'im' → logprob: -9.129014015197754
    5. '"' → logprob: -10.379014015197754
    6. '-im' → logprob: -10.879014015197754
    7. ' -' → logprob: -12.379014015197754
    8. '\-' → logprob: -12.504014015197754
    9. '-in' → logprob: -12.754014015197754
    10. '\' → logprob: -12.879014015197754

Token 1297: 'OSS' (ID: 26496)
  Prédit: 'OSS'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'OSS' → logprob: -1.0325924449716695e-05
    2. 'OS' → logprob: -11.50001049041748
    3. '
' → logprob: -16.375009536743164
    4. 'P' → logprob: -16.875009536743164
    5. 'oss' → logprob: -18.000009536743164
    6. '"' → logprob: -18.125009536743164
    7. '-' → logprob: -18.500009536743164
    8. '\' → logprob: -19.500009536743164
    9. 'O' → logprob: -19.625009536743164
    10. '`' → logprob: -19.875009536743164

Token 1298: 'IBLE' (ID: 22408)
  Prédit: 'IBLE'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'IBLE' → logprob: -0.00019495772721711546
    2. 'ABLE' → logprob: -9.500194549560547
    3. 'IABLE' → logprob: -10.000194549560547
    4. 'ISS' → logprob: -10.625194549560547
    5. 'ISIBLE' → logprob: -10.750194549560547
    6. 'ible' → logprob: -11.500194549560547
    7. 'sible' → logprob: -11.750194549560547
    8. 'S' → logprob: -12.500194549560547
    9. 'OSS' → logprob: -13.625194549560547
    10. '```' → logprob: -13.875194549560547

Token 1299: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.5760055184364319
    2. '")
' → logprob: -0.8260055184364319
    3. ')")
' → logprob: -10.451005935668945
    4. '")
' → logprob: -10.451005935668945
    5. ')' → logprob: -12.201005935668945
    6. ')")' → logprob: -13.326005935668945
    7. ')
' → logprob: -13.701005935668945
    8. '"' → logprob: -15.576005935668945
    9. 'else' → logprob: -16.201005935668945
    10. '")

' → logprob: -17.201005935668945

Token 1300: '   ' (ID: 271)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.10723035037517548
    2. '   ' → logprob: -2.3572304248809814
    3. ' else' → logprob: -4.982230186462402
    4. '	else' → logprob: -9.482230186462402
    5. '```' → logprob: -10.607230186462402
    6. '<|end|>' → logprob: -10.607230186462402
    7. 'elif' → logprob: -12.357230186462402
    8. '_else' → logprob: -12.732230186462402
    9. '#else' → logprob: -13.482230186462402
    10. '``' → logprob: -13.607230186462402

Token 1301: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.005413403734564781
    2. '   ' → logprob: -5.50541353225708
    3. ' else' → logprob: -6.63041353225708
    4. '	else' → logprob: -11.255413055419922
    5. 'elif' → logprob: -14.130413055419922
    6. '  ' → logprob: -15.505413055419922
    7. '       ' → logprob: -15.755413055419922
    8. '```' → logprob: -15.880413055419922
    9. '<|end|>' → logprob: -16.005413055419922
    10. '_else' → logprob: -16.255413055419922

Token 1302: ':
' (ID: 734)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.005602496210485697
    2. ':
' → logprob: -5.7556023597717285
    3. ':' → logprob: -6.5056023597717285
    4. 'print' → logprob: -7.3806023597717285
    5. ' print' → logprob: -8.630602836608887
    6. '   ' → logprob: -9.505602836608887
    7. '(print' → logprob: -10.880602836608887
    8. '(' → logprob: -11.505602836608887
    9. '():
' → logprob: -12.255602836608887
    10. ' :' → logprob: -12.630602836608887

Token 1303: '       ' (ID: 309)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.024116670712828636
    2. '       ' → logprob: -3.7741167545318604
    3. ' print' → logprob: -7.524116516113281
    4. '   ' → logprob: -8.024116516113281
    5. '```' → logprob: -12.899116516113281
    6. '	print' → logprob: -14.024116516113281
    7. '
' → logprob: -17.02411651611328
    8. '``' → logprob: -17.89911651611328
    9. '(print' → logprob: -18.02411651611328
    10. '           ' → logprob: -18.14911651611328

Token 1304: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -1.9361264946837764e-07
    2. ' print' → logprob: -16.0
    3. '```' → logprob: -17.875
    4. '   ' → logprob: -20.625
    5. '       ' → logprob: -20.75
    6. '	print' → logprob: -21.875
    7. '
' → logprob: -22.25
    8. '``' → logprob: -23.75
    9. 'printf' → logprob: -23.875
    10. '#print' → logprob: -24.875

Token 1305: '(dp' (ID: 68843)
  Prédit: '(dp'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(dp' → logprob: -2.339278580620885e-06
    2. '(' → logprob: -13.125001907348633
    3. 'dp' → logprob: -15.375001907348633
    4. '(int' → logprob: -18.375001907348633
    5. '(df' → logprob: -18.875001907348633
    6. '(f' → logprob: -19.125001907348633
    7. ' (' → logprob: -19.625001907348633
    8. ' dp' → logprob: -20.375001907348633
    9. '	dp' → logprob: -21.250001907348633
    10. '(dc' → logprob: -21.375001907348633

Token 1306: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: 0.0
    2. '1' → logprob: -17.5
    3. ' [' → logprob: -18.75
    4. ')[' → logprob: -19.375
    5. ')' → logprob: -19.5
    6. '   ' → logprob: -19.5
    7. '```' → logprob: -19.625
    8. '[
' → logprob: -21.125
    9. '][' → logprob: -21.5
    10. '(' → logprob: -21.75

Token 1307: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: 0.0
    2. ' ' → logprob: -16.75
    3. '0' → logprob: -17.5
    4. '[' → logprob: -18.0
    5. '   ' → logprob: -18.125
    6. '```' → logprob: -18.625
    7. '
' → logprob: -18.875
    8. ']' → logprob: -20.625
    9. '１' → logprob: -21.0
    10. '(' → logprob: -21.0

Token 1308: '])

' (ID: 21045)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.8624639324116288e-06
    2. ')")' → logprob: -14.500001907348633
    3. '})' → logprob: -14.750001907348633
    4. '))' → logprob: -15.000001907348633
    5. '())' → logprob: -16.125001907348633
    6. '")' → logprob: -16.125001907348633
    7. ' )' → logprob: -16.250001907348633
    8. ')`' → logprob: -16.625001907348633
    9. '`)' → logprob: -16.875001907348633
    10. ')}' → logprob: -17.125001907348633

Token 1309: 'if' (ID: 366)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 1310: ' __' (ID: 2516)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.6332219243049622
    2. ' __' → logprob: -0.7582219243049622
    3. '_' → logprob: -7.8832221031188965
    4. '_name' → logprob: -9.133221626281738
    5. '___' → logprob: -9.508221626281738
    6. '_main' → logprob: -11.133221626281738
    7. '"' → logprob: -11.758221626281738
    8. ' _' → logprob: -11.758221626281738
    9. ''' → logprob: -12.133221626281738
    10. '____' → logprob: -12.383221626281738

Token 1311: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.20003114640712738
    2. '==' → logprob: -2.450031042098999
    3. ' ==' → logprob: -2.450031042098999
    4. 'name' → logprob: -5.200031280517578
    5. '=="' → logprob: -6.075031280517578
    6. '.__' → logprob: -8.075031280517578
    7. ' __' → logprob: -8.700031280517578
    8. '```' → logprob: -8.825031280517578
    9. 'main' → logprob: -9.700031280517578
    10. '=='' → logprob: -9.825031280517578

Token 1312: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -3.173704271830502e-06
    2. '__.__' → logprob: -13.12500286102295
    3. '==' → logprob: -14.62500286102295
    4. '__.' → logprob: -15.25000286102295
    5. ' ==' → logprob: -16.375003814697266
    6. '=="' → logprob: -17.000003814697266
    7. '__('' → logprob: -17.375003814697266
    8. '___' → logprob: -17.500003814697266
    9. '__["' → logprob: -18.000003814697266
    10. '____' → logprob: -18.375003814697266

Token 1313: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.477490097284317
    2. '__' → logprob: -1.8524900674819946
    3. ' ==' → logprob: -1.8524900674819946
    4. '=="' → logprob: -2.727490186691284
    5. '=='' → logprob: -7.852489948272705
    6. '==
' → logprob: -9.977490425109863
    7. '__.__' → logprob: -10.352490425109863
    8. '.__' → logprob: -10.602490425109863
    9. '()==' → logprob: -10.602490425109863
    10. ' =="' → logprob: -11.602490425109863

Token 1314: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.0002627662615850568
    2. ''' → logprob: -8.250263214111328
    3. ' "__' → logprob: -14.125263214111328
    4. '__' → logprob: -14.625263214111328
    5. '"user' → logprob: -16.500263214111328
    6. '"name' → logprob: -16.625263214111328
    7. '   ' → logprob: -18.750263214111328
    8. '"profile' → logprob: -19.125263214111328
    9. '"class' → logprob: -19.250263214111328
    10. '("__' → logprob: -19.625263214111328

Token 1315: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -7.636475493200123e-05
    2. '__' → logprob: -9.500076293945312
    3. 'name' → logprob: -13.625076293945312
    4. '"' → logprob: -15.375076293945312
    5. ' main' → logprob: -17.500076293945312
    6. '_main' → logprob: -19.125076293945312
    7. '	main' → logprob: -19.875076293945312
    8. 'built' → logprob: -20.000076293945312
    9. '(main' → logprob: -20.125076293945312
    10. '__":
' → logprob: -20.125076293945312

Token 1316: '__":
' (ID: 49892)
  Prédit: '__":
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__":
' → logprob: -0.1615736484527588
    2. '__' → logprob: -1.9115736484527588
    3. '__':
' → logprob: -6.66157341003418
    4. '__.' → logprob: -10.66157341003418
    5. '__["' → logprob: -10.78657341003418
    6. '__.__' → logprob: -11.41157341003418
    7. '__
' → logprob: -12.41157341003418
    8. '__
' → logprob: -12.66157341003418
    9. '__",' → logprob: -13.78657341003418
    10. '___' → logprob: -13.91157341003418

Token 1317: '   ' (ID: 271)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -0.0015568782109767199
    2. '	main' → logprob: -7.001556873321533
    3. '   ' → logprob: -7.626556873321533
    4. ' main' → logprob: -8.876557350158691
    5. '_main' → logprob: -11.376557350158691
    6. '(main' → logprob: -13.251557350158691
    7. '```' → logprob: -13.501557350158691
    8. 'emain' → logprob: -14.501557350158691
    9. '    
' → logprob: -14.626557350158691
    10. 'Main' → logprob: -14.751557350158691

Token 1318: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' (adapté à ' main') → logprob: 0.0
    2. ' main' → logprob: -18.0
    3. '	main' → logprob: -21.375
    4. 'import' → logprob: -24.125
    5. '(main' → logprob: -24.25
    6. '_main' → logprob: -24.625
    7. '.main' → logprob: -26.125
    8. '   ' → logprob: -27.125
    9. 'Main' → logprob: -27.25
    10. 'mainwindow' → logprob: -28.625

Token 1319: '()' (ID: 416)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 1317
Tokens correctement prédits (1ère position, stricte): 378
Tokens correctement prédits (1ère position, avec adaptation): 409
Tokens correctement prédits (top 10): 866
Précision stricte (1ère position): 28.70%
Précision adaptée (1ère position): 31.06%
Précision (top 10): 65.76%
================================================================================
