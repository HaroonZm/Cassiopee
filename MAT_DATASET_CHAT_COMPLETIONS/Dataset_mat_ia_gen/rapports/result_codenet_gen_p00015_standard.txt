================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:16:48
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n=int(input())
for _ in range(n):
    a=input().lstrip('0') or '0'
    b=input().lstrip('0') or '0'
    if len(a)>80 or len(b)>80:
        print("overflow")
        continue
    s=str(int(a)+int(b))
    print(s if len(s)<=80 else "overflow")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: '=int' (ID: 37431)
  → Token d'amorce (pas de prédiction)

Token 2: '(input' (ID: 10054)
  → Token d'amorce (pas de prédiction)

Token 3: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.33144018054008484
    2. '(' → logprob: -1.3314402103424072
    3. '()' → logprob: -5.206439971923828
    4. '())' → logprob: -5.206439971923828
    5. '```' → logprob: -5.706439971923828
    6. '")' → logprob: -7.331439971923828
    7. '`)' → logprob: -7.456439971923828
    8. '(
' → logprob: -7.706439971923828
    9. '<|end|>' → logprob: -7.956439971923828
    10. '')' → logprob: -7.956439971923828

Token 4: 'for' (ID: 1938)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.308822751045227
    2. '+' → logprob: -1.683822751045227
    3. '*' → logprob: -2.0588226318359375
    4. 'for' → logprob: -2.3088226318359375
    5. 'i' → logprob: -2.6838226318359375
    6. '#' → logprob: -2.8088226318359375
    7. '\n' → logprob: -3.3088226318359375
    8. 's' → logprob: -3.4338226318359375
    9. '%' → logprob: -3.4338226318359375
    10. ''' → logprob: -4.0588226318359375

Token 5: ' _' (ID: 1175)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.022246109321713448
    2. '  ' → logprob: -3.8972461223602295
    3. ' i' → logprob: -6.39724588394165
    4. 'i' → logprob: -12.022246360778809
    5. ' n' → logprob: -12.022246360778809
    6. ' ‌' → logprob: -12.147246360778809
    7. '_' → logprob: -12.772246360778809
    8. ' )' → logprob: -12.897246360778809
    9. ' ' → logprob: -13.022246360778809
    10. ' ​' → logprob: -13.772246360778809

Token 6: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.010700183920562267
    2. 'in' → logprob: -4.635700225830078
    3. ' ' → logprob: -7.010700225830078
    4. ' i' → logprob: -11.385700225830078
    5. ' n' → logprob: -11.885700225830078
    6. '  ' → logprob: -12.010700225830078
    7. '_' → logprob: -12.385700225830078
    8. ' ,' → logprob: -13.135700225830078
    9. 'n' → logprob: -13.260700225830078
    10. ' range' → logprob: -13.260700225830078

Token 7: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.5759419798851013
    2. ' range' → logprob: -0.8259419798851013
    3. ' ' → logprob: -13.950942039489746
    4. '	range' → logprob: -14.200942039489746
    5. '(range' → logprob: -15.075942039489746
    6. '_range' → logprob: -15.325942039489746
    7. '```' → logprob: -15.700942039489746
    8. 'n' → logprob: -16.57594108581543
    9. ' xrange' → logprob: -17.07594108581543
    10. ' n' → logprob: -17.20094108581543

Token 8: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.006160454358905554
    2. '(n' → logprob: -5.381160259246826
    3. ' (' → logprob: -6.506160259246826
    4. '(range' → logprob: -10.381160736083984
    5. '(len' → logprob: -11.506160736083984
    6. '((' → logprob: -14.506160736083984
    7. '(int' → logprob: -14.506160736083984
    8. '(
' → logprob: -14.631160736083984
    9. '(length' → logprob: -15.006160736083984
    10. '(`' → logprob: -15.131160736083984

Token 9: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.05660921707749367
    2. ')' → logprob: -3.1816091537475586
    3. ':' → logprob: -4.306609153747559
    4. ':)' → logprob: -10.681609153747559
    5. '):
' → logprob: -12.181609153747559
    6. '+' → logprob: -13.056609153747559
    7. ' ):' → logprob: -13.806609153747559
    8. '+:' → logprob: -14.306609153747559
    9. '():' → logprob: -14.431609153747559
    10. '```' → logprob: -14.431609153747559

Token 10: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0021280182991176844
    2. '    
' → logprob: -6.5021281242370605
    3. 'print' → logprob: -8.377127647399902
    4. ' ' → logprob: -9.377127647399902
    5. '```' → logprob: -9.377127647399902
    6. ' print' → logprob: -9.627127647399902
    7. 'input' → logprob: -10.002127647399902
    8. '    ' → logprob: -10.502127647399902
    9. ' input' → logprob: -11.002127647399902
    10. ' 
' → logprob: -11.627127647399902

Token 11: ' a' (ID: 261)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14100293815135956
    2. 'print' → logprob: -2.891002893447876
    3. 'x' → logprob: -3.766002893447876
    4. 'a' (adapté à ' a') → logprob: -3.766002893447876
    5. 'data' → logprob: -4.766003131866455
    6. 'name' → logprob: -5.391003131866455
    7. 'num' → logprob: -5.766003131866455
    8. 'input' → logprob: -5.891003131866455
    9. 's' → logprob: -6.641003131866455
    10. 'text' → logprob: -6.641003131866455

Token 12: '=input' (ID: 87911)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -1.022870421409607
    2. ' =' → logprob: -1.397870421409607
    3. '[' → logprob: -2.2728705406188965
    4. ',' → logprob: -2.8978705406188965
    5. '[i' → logprob: -3.0228705406188965
    6. ' ' → logprob: -3.3978705406188965
    7. 'r' → logprob: -3.8978705406188965
    8. '+=' → logprob: -4.1478705406188965
    9. 'dd' → logprob: -4.2728705406188965
    10. '.' → logprob: -4.2728705406188965

Token 13: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.11332534998655319
    2. '()' → logprob: -2.238325357437134
    3. '(
' → logprob: -8.863325119018555
    4. '('' → logprob: -9.113325119018555
    5. ')' → logprob: -9.363325119018555
    6. '(

' → logprob: -9.863325119018555
    7. ' ' → logprob: -10.863325119018555
    8. '("("' → logprob: -10.988325119018555
    9. '().' → logprob: -11.113325119018555
    10. ' (' → logprob: -11.988325119018555

Token 14: 'l' (ID: 75)
  Prédit: 'split'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.31337133049964905
    2. 'strip' → logprob: -1.3133713006973267
    3. 'rstrip' → logprob: -9.438371658325195
    4. 'lower' → logprob: -11.313371658325195
    5. 'replace' → logprob: -11.438371658325195
    6. 'isdigit' → logprob: -12.563371658325195
    7. 'startswith' → logprob: -12.938371658325195
    8. 's' → logprob: -14.688371658325195
    9. ' split' → logprob: -15.688371658325195
    10. 'spl' → logprob: -16.188371658325195

Token 15: 'strip' (ID: 23905)
  Prédit: 'strip'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.046844031661748886
    2. 'ower' → logprob: -3.171844005584717
    3. 'ist' → logprob: -5.921844005584717
    4. 'o' → logprob: -7.421844005584717
    5. 'i' → logprob: -8.046844482421875
    6. 'owe' → logprob: -9.421844482421875
    7. 'split' → logprob: -10.296844482421875
    8. 'ine' → logprob: -10.296844482421875
    9. 'ow' → logprob: -10.421844482421875
    10. 'e' → logprob: -10.421844482421875

Token 16: '('' (ID: 706)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.662408173084259
    2. '()' → logprob: -0.912408173084259
    3. '().' → logprob: -2.5374081134796143
    4. '('' → logprob: -6.412408351898193
    5. '())' → logprob: -7.537408351898193
    6. '("("' → logprob: -8.162407875061035
    7. '('.')' → logprob: -8.162407875061035
    8. ' ()' → logprob: -8.537407875061035
    9. ')' → logprob: -8.787407875061035
    10. '(`' → logprob: -9.287407875061035

Token 17: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.011202018707990646
    2. ' ' → logprob: -5.261201858520508
    3. '-' → logprob: -6.636201858520508
    4. '[' → logprob: -7.261201858520508
    5. '')' → logprob: -7.511201858520508
    6. ''' → logprob: -8.136201858520508
    7. '['' → logprob: -8.136201858520508
    8. '+' → logprob: -8.261201858520508
    9. '(' → logprob: -8.261201858520508
    10. '('' → logprob: -8.386201858520508

Token 18: '')' (ID: 1542)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.018358884379267693
    2. '')' → logprob: -4.0183587074279785
    3. '()' → logprob: -10.018359184265137
    4. '0' → logprob: -10.018359184265137
    5. ').' → logprob: -10.018359184265137
    6. '))' → logprob: -10.893359184265137
    7. '")' → logprob: -11.018359184265137
    8. '())' → logprob: -11.018359184265137
    9. ' )' → logprob: -12.143359184265137
    10. ')
' → logprob: -12.393359184265137

Token 19: ' or' (ID: 503)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.4654994308948517
    2. 'if' → logprob: -1.5904994010925293
    3. '   ' → logprob: -2.4654994010925293
    4. ' or' → logprob: -3.5904994010925293
    5. '```' → logprob: -3.5904994010925293
    6. 'a' → logprob: -4.215499401092529
    7. 'print' → logprob: -6.090499401092529
    8. '==' → logprob: -6.340499401092529
    9. '	if' → logprob: -6.715499401092529
    10. '``' → logprob: -6.965499401092529

Token 20: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -5.383526149671525e-05
    2. '0' → logprob: -10.625053405761719
    3. '"' → logprob: -11.000053405761719
    4. ' '' → logprob: -12.250053405761719
    5. ''a' → logprob: -12.500053405761719
    6. '1' → logprob: -12.625053405761719
    7. '`' → logprob: -14.375053405761719
    8. '('' → logprob: -15.625053405761719
    9. 'a' → logprob: -16.37505340576172
    10. ' ' → logprob: -17.75005340576172

Token 21: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -2.935296834039036e-06
    2. ''' → logprob: -12.87500286102295
    3. '1' → logprob: -15.00000286102295
    4. ' ' → logprob: -16.875003814697266
    5. '"' → logprob: -18.500003814697266
    6. '۰' → logprob: -20.875003814697266
    7. '012' → logprob: -21.250003814697266
    8. '`' → logprob: -21.375003814697266
    9. '０' → logprob: -21.500003814697266
    10. 'a' → logprob: -21.500003814697266

Token 22: ''
' (ID: 2207)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.04418742284178734
    2. ''' → logprob: -3.169187307357788
    3. ')' → logprob: -7.669187545776367
    4. '')
' → logprob: -7.794187545776367
    5. 'a' → logprob: -9.419187545776367
    6. '0' → logprob: -10.169187545776367
    7. ''
' → logprob: -10.419187545776367
    8. '\n' → logprob: -10.669187545776367
    9. '```' → logprob: -10.794187545776367
    10. '   ' → logprob: -11.169187545776367

Token 23: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7202820777893066
    2. '+' → logprob: -1.2202820777893066
    3. 'if' → logprob: -3.4702820777893066
    4. 'print' → logprob: -3.5952820777893066
    5. ' if' → logprob: -3.7202820777893066
    6. 'b' → logprob: -3.7202820777893066
    7. '```' → logprob: -4.095282077789307
    8. ' ' → logprob: -4.345282077789307
    9. '#' → logprob: -4.345282077789307
    10. ':' → logprob: -4.720282077789307

Token 24: ' b' (ID: 287)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.1662788391113281
    2. 'b' (adapté à ' b') → logprob: -1.4162788391113281
    3. 'print' → logprob: -2.541278839111328
    4. ' if' → logprob: -2.541278839111328
    5. 's' → logprob: -2.541278839111328
    6. 'd' → logprob: -2.791278839111328
    7. '+' → logprob: -2.916278839111328
    8. '   ' → logprob: -3.541278839111328
    9. 'x' → logprob: -4.291278839111328
    10. 'a' → logprob: -4.916278839111328

Token 25: '=input' (ID: 87911)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.03202320262789726
    2. '=input' → logprob: -3.5320231914520264
    3. ' =' → logprob: -6.1570234298706055
    4. '=int' → logprob: -9.032023429870605
    5. '.' → logprob: -11.157023429870605
    6. '=

' → logprob: -12.032023429870605
    7. '.=' → logprob: -13.157023429870605
    8. '=
' → logprob: -13.532023429870605
    9. '+=' → logprob: -13.532023429870605
    10. '=a' → logprob: -13.907023429870605

Token 26: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.07907044142484665
    2. '()' → logprob: -2.5790703296661377
    3. '(' → logprob: -9.329070091247559
    4. '())' → logprob: -10.329070091247559
    5. '.' → logprob: -10.454070091247559
    6. '().'' → logprob: -12.454070091247559
    7. ' ().' → logprob: -12.704070091247559
    8. ')' → logprob: -12.829070091247559
    9. '()[' → logprob: -12.829070091247559
    10. '()).' → logprob: -12.829070091247559

Token 27: 'l' (ID: 75)
  Prédit: 'l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.0007129086880013347
    2. 'rstrip' → logprob: -7.250712871551514
    3. '```' → logprob: -13.625713348388672
    4. ' l' → logprob: -14.000713348388672
    5. 'strip' → logprob: -14.125713348388672
    6. 'input' → logprob: -17.250713348388672
    7. 'split' → logprob: -17.875713348388672
    8. '   ' → logprob: -18.625713348388672
    9. 'ltr' → logprob: -18.625713348388672
    10. 'isdigit' → logprob: -18.625713348388672

Token 28: 'strip' (ID: 23905)
  Prédit: 'strip'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -7.584239938296378e-06
    2. 'rstrip' → logprob: -12.625007629394531
    3. 'str' → logprob: -13.000007629394531
    4. 'split' → logprob: -13.500007629394531
    5. 'stri' → logprob: -14.875007629394531
    6. 'trip' → logprob: -15.875007629394531
    7. 'st' → logprob: -17.12500762939453
    8. 'stripe' → logprob: -17.50000762939453
    9. 'shift' → logprob: -17.62500762939453
    10. 'sti' → logprob: -17.75000762939453

Token 29: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.0001454955490771681
    2. ''' → logprob: -9.12514591217041
    3. '(' → logprob: -10.37514591217041
    4. '('.')' → logprob: -12.37514591217041
    5. '("' → logprob: -15.00014591217041
    6. ''s' → logprob: -15.87514591217041
    7. '('_' → logprob: -16.000144958496094
    8. 'b' → logprob: -16.125144958496094
    9. '('.' → logprob: -16.250144958496094
    10. '('(' → logprob: -17.000144958496094

Token 30: '0' (ID: 15)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.14272993803024292
    2. '0' → logprob: -2.0177299976348877
    3. '"' → logprob: -10.267729759216309
    4. '('' → logprob: -11.142729759216309
    5. '`' → logprob: -12.392729759216309
    6. ' ' → logprob: -15.767729759216309
    7. '[' → logprob: -16.142730712890625
    8. '(' → logprob: -16.267730712890625
    9. 'b' → logprob: -16.267730712890625
    10. '['' → logprob: -16.392730712890625

Token 31: '')' (ID: 1542)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.31720417737960815
    2. '')' → logprob: -1.317204236984253
    3. '('' → logprob: -5.817203998565674
    4. '()' → logprob: -7.317203998565674
    5. ')' → logprob: -8.192204475402832
    6. '(' → logprob: -12.692204475402832
    7. ''or' → logprob: -12.942204475402832
    8. '')
' → logprob: -13.192204475402832
    9. ' or' → logprob: -13.442204475402832
    10. '0' → logprob: -13.442204475402832

Token 32: ' or' (ID: 503)
  Prédit: ' or'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.006075387354940176
    2. 'or' → logprob: -5.256075382232666
    3. ''' → logprob: -8.631075859069824
    4. ''or' → logprob: -8.881075859069824
    5. ')' → logprob: -9.131075859069824
    6. '<|end|>' → logprob: -9.256075859069824
    7. '	or' → logprob: -9.256075859069824
    8. ' ' → logprob: -9.506075859069824
    9. '   ' → logprob: -10.256075859069824
    10. ' if' → logprob: -10.881075859069824

Token 33: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0008097442332655191
    2. ' '' → logprob: -7.125809669494629
    3. ' ' → logprob: -12.875809669494629
    4. '"' → logprob: -13.500809669494629
    5. '`' → logprob: -14.750809669494629
    6. ' ' → logprob: -15.500809669494629
    7. '('' → logprob: -15.500809669494629
    8. 'b' → logprob: -15.625809669494629
    9. '0' → logprob: -16.500810623168945
    10. ''a' → logprob: -16.875810623168945

Token 34: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.02324605919420719
    2. ''' → logprob: -3.7732460498809814
    3. '"' → logprob: -15.273245811462402
    4. '`' → logprob: -15.648245811462402
    5. ' ' → logprob: -15.648245811462402
    6. '<|end|>' → logprob: -17.64824676513672
    7. '')' → logprob: -17.89824676513672
    8. 'b' → logprob: -18.14824676513672
    9. '```' → logprob: -18.14824676513672
    10. '...' → logprob: -18.39824676513672

Token 35: ''
' (ID: 2207)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.07016094774007797
    2. '')' → logprob: -2.6951608657836914
    3. ')' → logprob: -8.945160865783691
    4. '   ' → logprob: -10.070160865783691
    5. ''a' → logprob: -11.320160865783691
    6. ''s' → logprob: -11.945160865783691
    7. ''
' → logprob: -12.070160865783691
    8. '```' → logprob: -12.070160865783691
    9. '']' → logprob: -12.695160865783691
    10. 'a' → logprob: -12.695160865783691

Token 36: '   ' (ID: 271)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.3967248797416687
    2. '   ' → logprob: -2.5217249393463135
    3. ' if' → logprob: -2.6467249393463135
    4. 'i' → logprob: -3.1467249393463135
    5. '+' → logprob: -3.3967249393463135
    6. 'c' → logprob: -3.5217249393463135
    7. '+
' → logprob: -3.7717249393463135
    8. 's' → logprob: -4.396724700927734
    9. '
' → logprob: -5.021724700927734
    10. '```' → logprob: -5.396724700927734

Token 37: ' if' (ID: 538)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.5071892738342285
    2. 'if' (adapté à ' if') → logprob: -1.3821892738342285
    3. 'c' → logprob: -2.8821892738342285
    4. 's' → logprob: -3.6321892738342285
    5. '+' → logprob: -3.8821892738342285
    6. '=' → logprob: -4.3821892738342285
    7. ' if' → logprob: -5.0071892738342285
    8. 'p' → logprob: -5.1321892738342285
    9. '#' → logprob: -5.6321892738342285
    10. 'n' → logprob: -6.0071892738342285

Token 38: ' len' (ID: 4631)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.5784772634506226
    2. ' len' → logprob: -1.4534772634506226
    3. 'len' → logprob: -2.078477382659912
    4. 'a' → logprob: -2.703477382659912
    5. ' int' → logprob: -4.453477382659912
    6. 'int' → logprob: -6.703477382659912
    7. '(len' → logprob: -8.703476905822754
    8. ' (' → logprob: -9.328476905822754
    9. '(a' → logprob: -9.328476905822754
    10. ' '' → logprob: -9.703476905822754

Token 39: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.02977525070309639
    2. '(' → logprob: -3.5297751426696777
    3. '(b' → logprob: -10.904775619506836
    4. 'a' → logprob: -12.779775619506836
    5. '(s' → logprob: -13.279775619506836
    6. ' (' → logprob: -14.029775619506836
    7. '(n' → logprob: -15.154775619506836
    8. '('' → logprob: -15.279775619506836
    9. '(max' → logprob: -15.779775619506836
    10. '(A' → logprob: -16.654775619506836

Token 40: ')>' (ID: 37292)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.9511380791664124
    2. ' >' → logprob: -0.9511380791664124
    3. '>' → logprob: -1.9511380195617676
    4. ' )' → logprob: -3.4511380195617676
    5. ' <' → logprob: -3.7011380195617676
    6. '<' → logprob: -4.576138019561768
    7. ')>' → logprob: -4.701138019561768
    8. ' ' → logprob: -5.951138019561768
    9. '==' → logprob: -6.201138019561768
    10. ' ==' → logprob: -6.326138019561768

Token 41: '80' (ID: 2241)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.0002625278721097857
    2. ' len' → logprob: -8.250262260437012
    3. 'b' → logprob: -14.500262260437012
    4. '(len' → logprob: -15.000262260437012
    5. '=len' → logprob: -15.000262260437012
    6. '[len' → logprob: -16.625263214111328
    7. '	len' → logprob: -17.000263214111328
    8. '   ' → logprob: -17.125263214111328
    9. '<len' → logprob: -17.625263214111328
    10. ' ' → logprob: -18.375263214111328

Token 42: ' or' (ID: 503)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.025408130139112473
    2. ' and' → logprob: -3.9004080295562744
    3. ' or' → logprob: -5.7754082679748535
    4. 'and' → logprob: -7.4004082679748535
    5. '<|end|>' → logprob: -8.025407791137695
    6. '+' → logprob: -8.150407791137695
    7. '>' → logprob: -8.775407791137695
    8. ' :' → logprob: -9.150407791137695
    9. '):' → logprob: -10.275407791137695
    10. ')' → logprob: -10.400407791137695

Token 43: ' len' (ID: 4631)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.4289033114910126
    2. ' len' → logprob: -1.053903341293335
    3. '(len' → logprob: -8.803903579711914
    4. '   ' → logprob: -11.178903579711914
    5. '	len' → logprob: -11.428903579711914
    6. ' ' → logprob: -11.803903579711914
    7. '[len' → logprob: -12.303903579711914
    8. '  ' → logprob: -12.553903579711914
    9. ' a' → logprob: -13.428903579711914
    10. '<len' → logprob: -13.428903579711914

Token 44: '(b' (ID: 3229)
  Prédit: '(b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(b' → logprob: -0.17582784593105316
    2. '(a' → logprob: -2.175827741622925
    3. '(' → logprob: -3.050827741622925
    4. ' (' → logprob: -8.175827980041504
    5. '(s' → logprob: -10.175827980041504
    6. '(len' → logprob: -11.050827980041504
    7. '('' → logprob: -11.175827980041504
    8. 'b' → logprob: -11.175827980041504
    9. ' b' → logprob: -11.550827980041504
    10. '(max' → logprob: -11.675827980041504

Token 45: ')>' (ID: 37292)
  Prédit: ')>'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')>' → logprob: -0.20222419500350952
    2. ')' → logprob: -1.7022242546081543
    3. '>' → logprob: -7.327224254608154
    4. ' )' → logprob: -9.702223777770996
    5. ')>=' → logprob: -11.077223777770996
    6. ')">' → logprob: -11.077223777770996
    7. '">' → logprob: -11.577223777770996
    8. ' >' → logprob: -11.577223777770996
    9. ')!=' → logprob: -12.077223777770996
    10. ' ' → logprob: -12.202223777770996

Token 46: '80' (ID: 2241)
  Prédit: '80'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '80' → logprob: -0.0005218160222284496
    2. ' ' → logprob: -7.625521659851074
    3. '800' → logprob: -11.625521659851074
    4. 'len' → logprob: -11.875521659851074
    5. '8' → logprob: -12.500521659851074
    6. '100' → logprob: -12.625521659851074
    7. '0' → logprob: -13.375521659851074
    8. ' len' → logprob: -13.625521659851074
    9. '90' → logprob: -14.188021659851074
    10. '81' → logprob: -14.188021659851074

Token 47: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00026181264547631145
    2. ':
' → logprob: -9.125262260437012
    3. ' or' → logprob: -10.125262260437012
    4. ' and' → logprob: -10.125262260437012
    5. '   ' → logprob: -10.625262260437012
    6. '):' → logprob: -11.250262260437012
    7. '       ' → logprob: -11.375262260437012
    8. ' :' → logprob: -11.500262260437012
    9. ')' → logprob: -12.875262260437012
    10. ',' → logprob: -13.000262260437012

Token 48: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.03519251570105553
    2. '   ' → logprob: -3.9101924896240234
    3. ':' → logprob: -4.785192489624023
    4. ' continue' → logprob: -6.285192489624023
    5. '\n' → logprob: -7.035192489624023
    6. 'continue' → logprob: -7.160192489624023
    7. ':
' → logprob: -7.535192489624023
    8. '        
' → logprob: -7.660192489624023
    9. '    
' → logprob: -7.910192489624023
    10. '    ' → logprob: -8.410192489624023

Token 49: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0734001398086548
    2. 'print' (adapté à ' print') → logprob: -1.0734001398086548
    3. ' print' → logprob: -1.4484001398086548
    4. ' continue' → logprob: -2.9484000205993652
    5. 'continue' → logprob: -4.698400020599365
    6. 'p' → logprob: -5.323400020599365
    7. '    ' → logprob: -5.573400020599365
    8. ' p' → logprob: -5.823400020599365
    9. 'pr' → logprob: -6.198400020599365
    10. ' if' → logprob: -6.323400020599365

Token 50: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.843869149684906
    2. '("' → logprob: -0.843869149684906
    3. '('' → logprob: -2.218869209289551
    4. '(-' → logprob: -3.843869209289551
    5. '(len' → logprob: -6.093869209289551
    6. '(max' → logprob: -6.343869209289551
    7. '(a' → logprob: -6.468869209289551
    8. '(">' → logprob: -6.968869209289551
    9. '(int' → logprob: -7.343869209289551
    10. '(sum' → logprob: -7.468869209289551

Token 51: 'overflow' (ID: 47116)
  Prédit: 'overflow'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'overflow' → logprob: -0.44684165716171265
    2. 'Big' → logprob: -1.6968417167663574
    3. 'Overflow' → logprob: -3.3218417167663574
    4. 'error' → logprob: -3.9468417167663574
    5. '>' → logprob: -4.446841716766357
    6. '-' → logprob: -4.696841716766357
    7. 'length' → logprob: -4.946841716766357
    8. 'b' → logprob: -5.321841716766357
    9. 'big' → logprob: -5.321841716766357
    10. 'Error' → logprob: -5.446841716766357

Token 52: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.0025555691681802273
    2. ')' → logprob: -7.1275553703308105
    3. ')")' → logprob: -7.1275553703308105
    4. '!")' → logprob: -7.7525553703308105
    5. '")
' → logprob: -8.002555847167969
    6. ' error' → logprob: -9.877555847167969
    7. '")
' → logprob: -10.252555847167969
    8. '')' → logprob: -11.252555847167969
    9. '!' → logprob: -11.377555847167969
    10. ' ")' → logprob: -11.502555847167969

Token 53: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.012807687744498253
    2. '       ' → logprob: -4.512807846069336
    3. 'else' → logprob: -7.137807846069336
    4. 'elif' → logprob: -7.637807846069336
    5. ' else' → logprob: -8.387807846069336
    6. '<|end|>' → logprob: -9.137807846069336
    7. ' elif' → logprob: -10.137807846069336
    8. '```' → logprob: -10.762807846069336
    9. '    
' → logprob: -11.137807846069336
    10. 'continue' → logprob: -11.512807846069336

Token 54: ' continue' (ID: 4901)
  Prédit: 'continue'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'continue' (adapté à ' continue') → logprob: -0.3202230632305145
    2. '       ' → logprob: -1.570223093032837
    3. '   ' → logprob: -2.820223093032837
    4. ' continue' → logprob: -5.445222854614258
    5. '```' → logprob: -6.570222854614258
    6. '	continue' → logprob: -7.320222854614258
    7. 'else' → logprob: -11.320222854614258
    8. '``' → logprob: -12.195222854614258
    9. ' ' → logprob: -12.320222854614258
    10. 'contin' → logprob: -12.570222854614258

Token 55: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0023679202422499657
    2. '    
' → logprob: -6.627367973327637
    3. '```' → logprob: -7.752367973327637
    4. '<|end|>' → logprob: -8.002367973327637
    5. 'elif' → logprob: -10.002367973327637
    6. 'if' → logprob: -10.752367973327637
    7. ' elif' → logprob: -11.002367973327637
    8. '    ' → logprob: -11.127367973327637
    9. '  
' → logprob: -11.252367973327637
    10. ' ' → logprob: -11.252367973327637

Token 56: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08260937035083771
    2. '    
' → logprob: -2.7076094150543213
    3. '
' → logprob: -4.582609176635742
    4. '<|end|>' → logprob: -7.207609176635742
    5. '  
' → logprob: -7.582609176635742
    6. ' 
' → logprob: -8.082609176635742
    7. '   
' → logprob: -8.207609176635742
    8. '```' → logprob: -8.457609176635742
    9. '        
' → logprob: -9.207609176635742
    10. 'a' → logprob: -9.582609176635742

Token 57: ' s' (ID: 265)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0336858034133911
    2. 'c' → logprob: -2.0336856842041016
    3. '+' → logprob: -2.4086856842041016
    4. 'if' → logprob: -2.4086856842041016
    5. 'try' → logprob: -2.6586856842041016
    6. ' if' → logprob: -2.6586856842041016
    7. 'print' → logprob: -3.4086856842041016
    8. ' try' → logprob: -3.7836856842041016
    9. '    
' → logprob: -3.9086856842041016
    10. 's' (adapté à ' s') → logprob: -4.033685684204102

Token 58: '=str' (ID: 36106)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.1249978169798851
    2. ' =' → logprob: -2.624997854232788
    3. '=int' → logprob: -3.374997854232788
    4. 'um' → logprob: -4.624997615814209
    5. '=s' → logprob: -8.249998092651367
    6. '=sum' → logprob: -8.374998092651367
    7. '=a' → logprob: -8.749998092651367
    8. '=i' → logprob: -9.999998092651367
    9. '=(' → logprob: -10.124998092651367
    10. '=input' → logprob: -10.374998092651367

Token 59: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.00028541131177917123
    2. '(' → logprob: -8.250285148620605
    3. '(eval' → logprob: -11.250285148620605
    4. '(in' → logprob: -13.125285148620605
    5. '(max' → logprob: -13.375285148620605
    6. '(a' → logprob: -13.500285148620605
    7. 'int' → logprob: -13.625285148620605
    8. '(
' → logprob: -13.750285148620605
    9. '((' → logprob: -14.500285148620605
    10. '(sum' → logprob: -14.625285148620605

Token 60: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -4.6087021473795176e-05
    2. 'a' → logprob: -10.375045776367188
    3. '(' → logprob: -11.500045776367188
    4. '(s' → logprob: -12.750045776367188
    5. ')' → logprob: -13.875045776367188
    6. '(
' → logprob: -14.750045776367188
    7. 's' → logprob: -16.125045776367188
    8. ')a' → logprob: -16.250045776367188
    9. '   ' → logprob: -17.125045776367188
    10. ')(' → logprob: -17.750045776367188

Token 61: ')+' (ID: 16161)
  Prédit: ')+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')+' → logprob: -0.07633720338344574
    2. '+' → logprob: -3.2013370990753174
    3. ')' → logprob: -3.4513370990753174
    4. '+b' → logprob: -6.9513373374938965
    5. ' +' → logprob: -9.826336860656738
    6. ' )' → logprob: -10.076336860656738
    7. '+)' → logprob: -11.326336860656738
    8. ')-' → logprob: -12.201336860656738
    9. ')+(' → logprob: -12.201336860656738
    10. ')*' → logprob: -13.076336860656738

Token 62: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.002039629500359297
    2. ' int' → logprob: -6.627039432525635
    3. 'b' → logprob: -7.252039432525635
    4. ' b' → logprob: -13.377039909362793
    5. '   ' → logprob: -13.502039909362793
    6. '(int' → logprob: -14.127039909362793
    7. '[int' → logprob: -15.252039909362793
    8. ' ' → logprob: -15.502039909362793
    9. '	int' → logprob: -16.002038955688477
    10. '=int' → logprob: -16.127038955688477

Token 63: '(b' (ID: 3229)
  Prédit: '(b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(b' → logprob: -0.003185436362400651
    2. '(' → logprob: -5.753185272216797
    3. 'b' → logprob: -11.878185272216797
    4. ' (' → logprob: -15.128185272216797
    5. '('' → logprob: -15.878185272216797
    6. '(B' → logprob: -16.628185272216797
    7. '(
' → logprob: -16.753185272216797
    8. ')b' → logprob: -16.753185272216797
    9. ')' → logprob: -17.628185272216797
    10. ' b' → logprob: -17.628185272216797

Token 64: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.3132866322994232
    2. ')' → logprob: -1.3132866621017456
    3. ')))' → logprob: -11.188286781311035
    4. '))
' → logprob: -12.063286781311035
    5. ')
' → logprob: -13.063286781311035
    6. ' ))' → logprob: -13.938286781311035
    7. ')")' → logprob: -15.063286781311035
    8. ' )' → logprob: -15.063286781311035
    9. '),' → logprob: -15.188286781311035
    10. ''))' → logprob: -15.813286781311035

Token 65: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.023512400686740875
    2. 'print' → logprob: -3.898512363433838
    3. '
' → logprob: -6.273512363433838
    4. '<|end|>' → logprob: -7.273512363433838
    5. '    
' → logprob: -8.398512840270996
    6. '```' → logprob: -9.523512840270996
    7. ' print' → logprob: -10.523512840270996
    8. '  
' → logprob: -11.148512840270996
    9. '	print' → logprob: -11.773512840270996
    10. '  ' → logprob: -12.023512840270996

Token 66: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.07136698812246323
    2. 'if' → logprob: -2.821367025375366
    3. '   ' → logprob: -4.696366786956787
    4. ' if' → logprob: -8.946367263793945
    5. '```' → logprob: -10.071367263793945
    6. ' print' → logprob: -10.946367263793945
    7. 'for' → logprob: -11.196367263793945
    8. 'p' → logprob: -11.946367263793945
    9. 's' → logprob: -12.571367263793945
    10. '	print' → logprob: -13.196367263793945

Token 67: '(s' (ID: 1858)
  Prédit: '(s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(s' → logprob: -0.0003364158037584275
    2. '(' → logprob: -8.000336647033691
    3. 's' → logprob: -14.125336647033691
    4. ' (' → logprob: -16.500335693359375
    5. '()' → logprob: -17.250335693359375
    6. '('' → logprob: -17.500335693359375
    7. '(
' → logprob: -19.125335693359375
    8. '((' → logprob: -19.500335693359375
    9. '(`' → logprob: -20.625335693359375
    10. ' ' → logprob: -20.625335693359375

Token 68: ' if' (ID: 538)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.9361264946837764e-07
    2. '))' → logprob: -16.875
    3. ' )' → logprob: -17.375
    4. ')
' → logprob: -17.5
    5. ')`' → logprob: -18.625
    6. '`)' → logprob: -19.125
    7. '')' → logprob: -19.625
    8. '）' → logprob: -20.75
    9. '")' → logprob: -21.0
    10. '   ' → logprob: -21.0

Token 69: ' len' (ID: 4631)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.012923730537295341
    2. ' len' → logprob: -4.387923717498779
    3. 's' → logprob: -9.262924194335938
    4. 'int' → logprob: -9.512924194335938
    5. '(len' → logprob: -9.512924194335938
    6. 'not' → logprob: -10.137924194335938
    7. 'a' → logprob: -10.637924194335938
    8. ' not' → logprob: -10.637924194335938
    9. ' s' → logprob: -10.762924194335938
    10. ' ' → logprob: -11.012924194335938

Token 70: '(s' (ID: 1858)
  Prédit: '(s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(s' → logprob: -4.394135612528771e-05
    2. '(' → logprob: -10.125043869018555
    3. 's' → logprob: -13.375043869018555
    4. '(a' → logprob: -13.875043869018555
    5. ' (' → logprob: -14.625043869018555
    6. '(
' → logprob: -15.000043869018555
    7. '(max' → logprob: -15.625043869018555
    8. ')' → logprob: -15.875043869018555
    9. '()' → logprob: -16.125043869018555
    10. '(n' → logprob: -17.125043869018555

Token 71: ')<=' (ID: 176862)
  Prédit: '<='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<=' → logprob: -0.20827125012874603
    2. ')<=' → logprob: -1.7082712650299072
    3. ')' → logprob: -5.333271026611328
    4. ']<=' → logprob: -6.708271026611328
    5. ' <=' → logprob: -7.333271026611328
    6. ')<' → logprob: -9.958271026611328
    7. '<' → logprob: -10.208271026611328
    8. '```' → logprob: -11.208271026611328
    9. '()' → logprob: -11.333271026611328
    10. ' )' → logprob: -11.583271026611328

Token 72: '80' (ID: 2241)
  Prédit: '80'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '80' → logprob: -0.002152165398001671
    2. '8' → logprob: -6.877151966094971
    3. ' ' → logprob: -7.627151966094971
    4. '81' → logprob: -7.877151966094971
    5. '100' → logprob: -9.127152442932129
    6. '800' → logprob: -10.627152442932129
    7. '85' → logprob: -11.314652442932129
    8. '79' → logprob: -11.502152442932129
    9. '10' → logprob: -11.689652442932129
    10. 'max' → logprob: -11.814652442932129

Token 73: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.3868997097015381
    2. ' else' → logprob: -1.136899709701538
    3. '   ' → logprob: -10.511899948120117
    4. '    ' → logprob: -14.761899948120117
    5. ' ' → logprob: -14.886899948120117
    6. '	else' → logprob: -15.261899948120117
    7. '```' → logprob: -15.636899948120117
    8. 'el' → logprob: -16.136899948120117
    9. 'els' → logprob: -16.886899948120117
    10. 's' → logprob: -17.011899948120117

Token 74: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.09880135953426361
    2. 'overflow' → logprob: -2.723801374435425
    3. ' overflow' → logprob: -4.223801136016846
    4. ' "' → logprob: -4.348801136016846
    5. '   ' → logprob: -8.098801612854004
    6. ''' → logprob: -8.598801612854004
    7. ' ' → logprob: -9.348801612854004
    8. '`' → logprob: -9.598801612854004
    9. 'print' → logprob: -9.848801612854004
    10. '    ' → logprob: -10.723801612854004

Token 75: 'overflow' (ID: 47116)
  Prédit: 'overflow'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'overflow' → logprob: -0.0003017385315615684
    2. '"' → logprob: -8.500301361083984
    3. ' overflow' → logprob: -9.250301361083984
    4. '   ' → logprob: -14.500301361083984
    5. ' ' → logprob: -15.000301361083984
    6. 'Overflow' → logprob: -15.250301361083984
    7. 'over' → logprob: -16.000301361083984
    8. '`' → logprob: -16.125301361083984
    9. '```' → logprob: -16.375301361083984
    10. ''' → logprob: -16.500301361083984

Token 76: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -3.292907877039397e-06
    2. ')' → logprob: -13.50000286102295
    3. '")
' → logprob: -13.62500286102295
    4. ')")' → logprob: -14.50000286102295
    5. '"' → logprob: -15.75000286102295
    6. '")
' → logprob: -17.500003814697266
    7. '")

' → logprob: -18.125003814697266
    8. '')' → logprob: -19.250003814697266
    9. '"))' → logprob: -19.500003814697266
    10. '");' → logprob: -19.500003814697266


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 74
Tokens correctement prédits (1ère position, stricte): 30
Tokens correctement prédits (1ère position, avec adaptation): 32
Tokens correctement prédits (top 10): 66
Précision stricte (1ère position): 40.54%
Précision adaptée (1ère position): 43.24%
Précision (top 10): 89.19%
================================================================================
