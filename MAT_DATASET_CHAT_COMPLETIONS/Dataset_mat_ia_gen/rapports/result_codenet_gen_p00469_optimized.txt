================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:07:57
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import sys
from itertools import permutations

input = sys.stdin.readline

while True:
    n = int(input())
    k = int(input())
    if n == 0 and k == 0:
        break
    cards = [input().strip() for _ in range(n)]
    results = set()
    for seq in permutations(cards, k):
        results.add(''.join(seq))
    print(len(results))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: '
' (ID: 198)
  → Token d'amorce (pas de prédiction)

Token 3: 'from' (ID: 2845)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.5435490608215332
    2. '.' → logprob: -1.0435490608215332
    3. '<|end|>' → logprob: -3.918549060821533
    4. '\' → logprob: -4.043549060821533
    5. 'import' → logprob: -4.418549060821533
    6. 'newline' → logprob: -5.293549060821533
    7. '' → logprob: -6.043549060821533
    8. '\r' → logprob: -6.168549060821533
    9. '
' → logprob: -6.293549060821533
    10. '<|end|>' → logprob: -6.418549060821533

Token 4: ' itertools' (ID: 103178)
  Prédit: ' os'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' os' → logprob: -0.012081976048648357
    2. 'os' → logprob: -4.762082099914551
    3. ' collections' → logprob: -6.887082099914551
    4. ' ' → logprob: -7.512082099914551
    5. ' math' → logprob: -7.887082099914551
    6. ' Py' → logprob: -7.887082099914551
    7. ' pathlib' → logprob: -8.01208209991455
    8. ' typing' → logprob: -8.63708209991455
    9. 'collections' → logprob: -9.38708209991455
    10. ' datetime' → logprob: -9.38708209991455

Token 5: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.08940079808235168
    2. 'import' → logprob: -2.4644007682800293
    3. '.' → logprob: -7.839400768280029
    4. '	import' → logprob: -10.589401245117188
    5. '.import' → logprob: -11.214401245117188
    6. ' ' → logprob: -11.964401245117188
    7. ' itertools' → logprob: -12.464401245117188
    8. '_import' → logprob: -12.589401245117188
    9. '<|end|>' → logprob: -12.589401245117188
    10. ' .' → logprob: -13.214401245117188

Token 6: ' permutations' (ID: 174595)
  Prédit: 'count'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'count' → logprob: -1.0789483785629272
    2. 'chain' → logprob: -2.203948497772217
    3. 'com' → logprob: -2.328948497772217
    4. 'product' → logprob: -2.328948497772217
    5. 'group' → logprob: -2.453948497772217
    6. 'cycle' → logprob: -2.703948497772217
    7. ' group' → logprob: -3.203948497772217
    8. 'per' → logprob: -3.328948497772217
    9. ' chain' → logprob: -3.578948497772217
    10. ' permutations' → logprob: -3.703948497772217

Token 7: '

' (ID: 279)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.8843766450881958
    2. '(' → logprob: -1.0093766450881958
    3. '\' → logprob: -2.0093765258789062
    4. '<|end|>' → logprob: -3.6343765258789062
    5. 'import' → logprob: -3.8843765258789062
    6. '(
' → logprob: -4.759376525878906
    7. '.' → logprob: -5.009376525878906
    8. 'newline' → logprob: -5.509376525878906
    9. '<|end|>' → logprob: -5.634376525878906
    10. ',' → logprob: -5.759376525878906

Token 8: 'input' (ID: 2586)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.01175367459654808
    2. '(
' → logprob: -5.011753559112549
    3. '.' → logprob: -6.511753559112549
    4. '\' → logprob: -6.886753559112549
    5. '\(' → logprob: -7.386753559112549
    6. 'def' → logprob: -7.886753559112549
    7. 'import' → logprob: -8.136754035949707
    8. '(

' → logprob: -8.136754035949707
    9. '```' → logprob: -8.761754035949707
    10. '`' → logprob: -8.761754035949707

Token 9: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.028443343937397003
    2. '()' → logprob: -4.153443336486816
    3. '.' → logprob: -4.528443336486816
    4. '().' → logprob: -7.903443336486816
    5. '=' → logprob: -8.028443336486816
    6. '```' → logprob: -8.153443336486816
    7. ')' → logprob: -8.653443336486816
    8. '(.)' → logprob: -9.528443336486816
    9. ''' → logprob: -10.528443336486816
    10. ' =' → logprob: -10.653443336486816

Token 10: ' sys' (ID: 12228)
  Prédit: ' sys'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sys' → logprob: -0.5418146848678589
    2. 'sys' → logprob: -1.2918146848678589
    3. 'input' → logprob: -2.4168148040771484
    4. ' input' → logprob: -2.9168148040771484
    5. 'lambda' → logprob: -9.416814804077148
    6. ' lambda' → logprob: -9.541814804077148
    7. '=sys' → logprob: -10.416814804077148
    8. '	sys' → logprob: -10.666814804077148
    9. ' ' → logprob: -12.166814804077148
    10. '(sys' → logprob: -12.541814804077148

Token 11: '.stdin' (ID: 93480)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.719227135181427
    2. '.stdin' → logprob: -0.719227135181427
    3. '.readline' → logprob: -4.469227313995361
    4. ' .' → logprob: -5.344227313995361
    5. '.input' → logprob: -5.594227313995361
    6. '.stdout' → logprob: -5.969227313995361
    7. '.argv' → logprob: -6.344227313995361
    8. '.import' → logprob: -7.219227313995361
    9. '```' → logprob: -8.719226837158203
    10. 'import' → logprob: -9.344226837158203

Token 12: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.6945528984069824
    2. '.' → logprob: -0.8195528984069824
    3. '.read' → logprob: -2.8195528984069824
    4. '.readlines' → logprob: -8.44455337524414
    5. 'read' → logprob: -9.31955337524414
    6. '.Read' → logprob: -9.81955337524414
    7. '.write' → logprob: -10.81955337524414
    8. ' .' → logprob: -11.19455337524414
    9. '```' → logprob: -11.69455337524414
    10. ''.' → logprob: -12.31955337524414

Token 13: '

' (ID: 279)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.13422463834285736
    2. '(' → logprob: -2.1342246532440186
    3. '()
' → logprob: -5.7592244148254395
    4. '(
' → logprob: -6.1342244148254395
    5. '()\' → logprob: -6.8842244148254395
    6. '
' → logprob: -8.009224891662598
    7. '()

' → logprob: -8.509224891662598
    8. '\n' → logprob: -9.134224891662598
    9. '(\' → logprob: -10.009224891662598
    10. '```' → logprob: -10.134224891662598

Token 14: 'while' (ID: 7032)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.0015087933279573917
    2. 'N' → logprob: -7.126508712768555
    3. 's' → logprob: -7.876508712768555
    4. 'def' → logprob: -9.501508712768555
    5. 'for' → logprob: -9.626508712768555
    6. '(n' → logprob: -10.251508712768555
    7. 'num' → logprob: -10.251508712768555
    8. 'a' → logprob: -10.751508712768555
    9. 'k' → logprob: -10.876508712768555
    10. 't' → logprob: -10.876508712768555

Token 15: ' True' (ID: 6432)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.29353848099708557
    2. ' True' → logprob: -1.4185384511947632
    3. ' not' → logprob: -4.668538570404053
    4. ' (' → logprob: -6.918538570404053
    5. '  ' → logprob: -7.793538570404053
    6. ' )' → logprob: -8.293538093566895
    7. ' space' → logprob: -8.293538093566895
    8. '(' → logprob: -9.043538093566895
    9. ' input' → logprob: -9.168538093566895
    10. ' a' → logprob: -9.168538093566895

Token 16: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0011420035734772682
    2. ' :' → logprob: -7.2511420249938965
    3. '():' → logprob: -7.8761420249938965
    4. ':**' → logprob: -10.376141548156738
    5. ':
' → logprob: -11.626141548156738
    6. '):' → logprob: -12.626141548156738
    7. ' ():' → logprob: -13.501141548156738
    8. '(:' → logprob: -13.501141548156738
    9. '   ' → logprob: -13.751141548156738
    10. ':return' → logprob: -14.501141548156738

Token 17: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.003352140076458454
    2. ' line' → logprob: -6.378352165222168
    3. '    
' → logprob: -6.753352165222168
    4. ' ' → logprob: -9.378352165222168
    5. 'input' → logprob: -9.503352165222168
    6. ' input' → logprob: -9.753352165222168
    7. 'n' → logprob: -10.003352165222168
    8. 's' → logprob: -11.003352165222168
    9. ' try' → logprob: -11.003352165222168
    10. ' readline' → logprob: -11.003352165222168

Token 18: ' n' (ID: 297)
  Prédit: ' line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' line' → logprob: -0.4576306939125061
    2. 'line' → logprob: -2.5826306343078613
    3. 'data' → logprob: -2.9576306343078613
    4. 'n' (adapté à ' n') → logprob: -2.9576306343078613
    5. 's' → logprob: -3.2076306343078613
    6. ' data' → logprob: -3.3326306343078613
    7. ' n' → logprob: -3.7076306343078613
    8. '   ' → logprob: -3.7076306343078613
    9. ' s' → logprob: -4.207630634307861
    10. 'word' → logprob: -4.457630634307861

Token 19: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.48798054456710815
    2. ' ==' → logprob: -1.112980604171753
    3. '=' → logprob: -3.237980604171753
    4. ' >' → logprob: -4.612980365753174
    5. '==' → logprob: -5.612980365753174
    6. '>' → logprob: -6.362980365753174
    7. ' ' → logprob: -6.487980365753174
    8. ' <=' → logprob: -7.612980365753174
    9. ' <' → logprob: -8.362980842590332
    10. ' !=' → logprob: -8.362980842590332

Token 20: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.6384882926940918
    2. ' input' → logprob: -1.1384882926940918
    3. 'int' → logprob: -2.138488292694092
    4. 'input' → logprob: -3.388488292694092
    5. ' ' → logprob: -11.88848876953125
    6. '=int' → logprob: -12.76348876953125
    7. '=input' → logprob: -14.01348876953125
    8. ' n' → logprob: -14.01348876953125
    9. 'n' → logprob: -14.63848876953125
    10. '<int' → logprob: -14.88848876953125

Token 21: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0008068907191045582
    2. '(' → logprob: -7.25080680847168
    3. 'input' → logprob: -9.25080680847168
    4. ' (' → logprob: -15.25080680847168
    5. '()' → logprob: -15.50080680847168
    6. '(
' → logprob: -16.12580680847168
    7. '(sys' → logprob: -16.25080680847168
    8. ' input' → logprob: -16.37580680847168
    9. '(in' → logprob: -16.75080680847168
    10. '=input' → logprob: -17.62580680847168

Token 22: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.004324483685195446
    2. '()' → logprob: -5.504324436187744
    3. '().' → logprob: -8.754324913024902
    4. ')' → logprob: -10.004324913024902
    5. '())
' → logprob: -10.504324913024902
    6. '(' → logprob: -11.754324913024902
    7. ' ())' → logprob: -12.254324913024902
    8. '()))' → logprob: -13.629324913024902
    9. '()
' → logprob: -14.379324913024902
    10. '())

' → logprob: -15.004324913024902

Token 23: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 24: ' k' (ID: 372)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.11512645334005356
    2. '<|end|>' → logprob: -3.115126371383667
    3. 'if' → logprob: -3.240126371383667
    4. '   ' → logprob: -4.240126609802246
    5. '    ' → logprob: -5.115126609802246
    6. ' ' → logprob: -5.740126609802246
    7. '<|end|>' → logprob: -7.115126609802246
    8. '  ' → logprob: -8.240126609802246
    9. ')' → logprob: -8.240126609802246
    10. '\n' → logprob: -9.490126609802246

Token 25: ' =' (ID: 314)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.14686702191829681
    2. ' =' → logprob: -2.521867036819458
    3. '==' → logprob: -3.146867036819458
    4. '=' → logprob: -4.521866798400879
    5. ' >' → logprob: -6.396866798400879
    6. '>' → logprob: -7.646866798400879
    7. ' ' → logprob: -9.271866798400879
    8. ' <=' → logprob: -9.771866798400879
    9. ',' → logprob: -10.896866798400879
    10. ' if' → logprob: -11.021866798400879

Token 26: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.10217507183551788
    2. 'int' → logprob: -2.352174997329712
    3. ' n' → logprob: -6.352175235748291
    4. 'n' → logprob: -9.102174758911133
    5. ' ' → logprob: -9.977174758911133
    6. ' input' → logprob: -10.477174758911133
    7. '   ' → logprob: -11.852174758911133
    8. '  ' → logprob: -12.102174758911133
    9. '    ' → logprob: -12.102174758911133
    10. '=int' → logprob: -12.102174758911133

Token 27: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.00021760274830739945
    2. '(' → logprob: -8.50021743774414
    3. 'input' → logprob: -11.62521743774414
    4. ' (' → logprob: -12.50021743774414
    5. '()' → logprob: -14.62521743774414
    6. ' input' → logprob: -15.25021743774414
    7. ',input' → logprob: -15.50021743774414
    8. '(in' → logprob: -15.75021743774414
    9. '=input' → logprob: -15.75021743774414
    10. '(inp' → logprob: -16.12521743774414

Token 28: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.050825659185647964
    2. ')' → logprob: -3.300825595855713
    3. '()' → logprob: -4.425825595855713
    4. '())
' → logprob: -7.300825595855713
    5. '()
' → logprob: -11.050826072692871
    6. '(' → logprob: -11.175826072692871
    7. ')
' → logprob: -12.050826072692871
    8. '))' → logprob: -12.300826072692871
    9. '())

' → logprob: -12.300826072692871
    10. ' ())' → logprob: -12.425826072692871

Token 29: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.37229490280151367
    2. '<|end|>' → logprob: -1.7472949028015137
    3. ' if' → logprob: -2.8722949028015137
    4. ' ' → logprob: -2.8722949028015137
    5. '    ' → logprob: -4.747294902801514
    6. '\n' → logprob: -5.622294902801514
    7. '    
' → logprob: -5.997294902801514
    8. '  ' → logprob: -6.247294902801514
    9. '<|end|>' → logprob: -6.497294902801514
    10. ')' → logprob: -6.497294902801514

Token 30: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5398337841033936
    2. ' if' → logprob: -1.4148337841033936
    3. 'if' (adapté à ' if') → logprob: -2.6648337841033936
    4. '<|end|>' → logprob: -3.2898337841033936
    5. ' ' → logprob: -3.4148337841033936
    6. '    ' → logprob: -3.7898337841033936
    7. '  ' → logprob: -5.789834022521973
    8. '\n' → logprob: -5.914834022521973
    9. '    
' → logprob: -6.164834022521973
    10. '
' → logprob: -6.914834022521973

Token 31: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.3876553773880005
    2. ' not' → logprob: -1.1376553773880005
    3. 'not' → logprob: -7.762655258178711
    4. 'n' → logprob: -8.512655258178711
    5. ' ' → logprob: -8.887655258178711
    6. ' ' → logprob: -10.887655258178711
    7. '	n' → logprob: -15.512655258178711
    8. '	not' → logprob: -15.887655258178711
    9. ' (' → logprob: -16.51265525817871
    10. '```' → logprob: -16.63765525817871

Token 32: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.22606638073921204
    2. '==' → logprob: -1.6010663509368896
    3. ' <=' → logprob: -7.851066589355469
    4. ' <' → logprob: -8.851066589355469
    5. '<=' → logprob: -9.351066589355469
    6. '<' → logprob: -11.476066589355469
    7. ' ' → logprob: -11.851066589355469
    8. ')' → logprob: -11.851066589355469
    9. '=' → logprob: -12.726066589355469
    10. ')==' → logprob: -13.476066589355469

Token 33: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.4287028908729553
    2. '0' → logprob: -1.0537028312683105
    3. '   ' → logprob: -14.553703308105469
    4. '  ' → logprob: -14.928703308105469
    5. ' ' → logprob: -15.241203308105469
    6. '_' → logprob: -15.866203308105469
    7. '    ' → logprob: -15.928703308105469
    8. '-' → logprob: -16.30370330810547
    9. 's' → logprob: -16.74120330810547
    10. ' -' → logprob: -16.74120330810547

Token 34: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0028080830816179514
    2. ' ' → logprob: -5.877808094024658
    3. '-' → logprob: -13.1278076171875
    4. '   ' → logprob: -15.6278076171875
    5. '  ' → logprob: -15.6278076171875
    6. ' -' → logprob: -16.0653076171875
    7. ')' → logprob: -16.2528076171875
    8. '    ' → logprob: -16.3153076171875
    9. '```' → logprob: -16.5028076171875
    10. '=' → logprob: -17.0653076171875

Token 35: ' and' (ID: 326)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0014617849374189973
    2. ' and' → logprob: -6.751461982727051
    3. ' :' → logprob: -9.00146198272705
    4. ':
' → logprob: -9.87646198272705
    5. ' or' → logprob: -10.00146198272705
    6. ':return' → logprob: -10.25146198272705
    7. 'and' → logprob: -10.50146198272705
    8. '   ' → logprob: -12.62646198272705
    9. '<|end|>' → logprob: -13.50146198272705
    10. ' break' → logprob: -14.00146198272705

Token 36: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.0021855919621884823
    2. 'k' → logprob: -6.127185821533203
    3. '	k' → logprob: -15.127185821533203
    4. ' ' → logprob: -16.127185821533203
    5. ' ' → logprob: -16.252185821533203
    6. ',k' → logprob: -20.002185821533203
    7. '   ' → logprob: -20.502185821533203
    8. ' к' → logprob: -20.627185821533203
    9. ' ' → logprob: -20.627185821533203
    10. '<|end|>' → logprob: -21.127185821533203

Token 37: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.007686247117817402
    2. '==' → logprob: -4.882686138153076
    3. ' ' → logprob: -9.632686614990234
    4. '<|end|>' → logprob: -12.257686614990234
    5. ' ' → logprob: -12.757686614990234
    6. '  ' → logprob: -13.382686614990234
    7. '<|end|>' → logprob: -13.632686614990234
    8. ' =' → logprob: -13.757686614990234
    9. '=' → logprob: -13.882686614990234
    10. ')' → logprob: -14.632686614990234

Token 38: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.12692831456661224
    2. ' ' → logprob: -2.1269283294677734
    3. ' ' → logprob: -16.376928329467773
    4. '  ' → logprob: -16.501928329467773
    5. '   ' → logprob: -17.876928329467773
    6. '<|end|>' → logprob: -18.126928329467773
    7. '۰' → logprob: -18.251928329467773
    8. '<|end|>' → logprob: -18.689428329467773
    9. '_' → logprob: -18.814428329467773
    10. '	' → logprob: -19.564428329467773

Token 39: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0019286326132714748
    2. ' ' → logprob: -6.251928806304932
    3. '۰' → logprob: -17.626928329467773
    4. '<|end|>' → logprob: -18.251928329467773
    5. ' ' → logprob: -19.251928329467773
    6. '  ' → logprob: -19.564428329467773
    7. '<|end|>' → logprob: -19.564428329467773
    8. '０' → logprob: -19.689428329467773
    9. '০' → logprob: -19.814428329467773
    10. '०' → logprob: -20.314428329467773

Token 40: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00022761584841646254
    2. ':
' → logprob: -8.500227928161621
    3. '   ' → logprob: -11.500227928161621
    4. ':return' → logprob: -11.500227928161621
    5. ' :' → logprob: -13.125227928161621
    6. '):' → logprob: -13.750227928161621
    7. '       ' → logprob: -15.250227928161621
    8. ':**' → logprob: -16.000226974487305
    9. '():' → logprob: -16.625226974487305
    10. '<|end|>' → logprob: -16.750226974487305

Token 41: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0034016903955489397
    2. '   ' → logprob: -5.753401756286621
    3. ':' → logprob: -8.878401756286621
    4. '\n' → logprob: -10.753401756286621
    5. '	break' → logprob: -10.753401756286621
    6. '	' → logprob: -11.378401756286621
    7. '    ' → logprob: -12.003401756286621
    8. ' break' → logprob: -12.378401756286621
    9. '     ' → logprob: -12.503401756286621
    10. ':
' → logprob: -12.878401756286621

Token 42: ' break' (ID: 2338)
  Prédit: ' break'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' break' → logprob: -0.039847906678915024
    2. '       ' → logprob: -4.0398478507995605
    3. 'break' (adapté à ' break') → logprob: -4.2898478507995605
    4. '   ' → logprob: -4.9148478507995605
    5. '	break' → logprob: -7.7898478507995605
    6. '           ' → logprob: -12.914848327636719
    7. '_break' → logprob: -13.414848327636719
    8. '```' → logprob: -14.414848327636719
    9. ' ' → logprob: -14.539848327636719
    10. '    ' → logprob: -15.414848327636719

Token 43: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.27536076307296753
    2. 'per' → logprob: -2.9003608226776123
    3. ' permutations' → logprob: -3.0253608226776123
    4. 'tokens' → logprob: -3.5253608226776123
    5. '<|end|>' → logprob: -3.5253608226776123
    6. '    
' → logprob: -4.025360584259033
    7. 'result' → logprob: -5.025360584259033
    8. 'for' → logprob: -5.025360584259033
    9. 'print' → logprob: -5.025360584259033
    10. ' ' → logprob: -5.775360584259033

Token 44: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06558303534984589
    2. ' permutations' → logprob: -4.065583229064941
    3. 'tokens' → logprob: -4.440583229064941
    4. 'per' → logprob: -4.690583229064941
    5. '<|end|>' → logprob: -5.065583229064941
    6. '    
' → logprob: -5.190583229064941
    7. 'print' → logprob: -6.440583229064941
    8. 'for' → logprob: -6.565583229064941
    9. '	per' → logprob: -6.690583229064941
    10. 'result' → logprob: -6.815583229064941

Token 45: ' cards' (ID: 10541)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9488353133201599
    2. 'nums' → logprob: -1.4488353729248047
    3. 'numbers' → logprob: -2.0738353729248047
    4. 'arr' → logprob: -2.9488353729248047
    5. '    
' → logprob: -3.4488353729248047
    6. 'items' → logprob: -3.4488353729248047
    7. 'for' → logprob: -3.5738353729248047
    8. ' nums' → logprob: -4.573835372924805
    9. 'lst' → logprob: -4.573835372924805
    10. ' numbers' → logprob: -4.573835372924805

Token 46: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.01505892165005207
    2. '=' → logprob: -4.265058994293213
    3. '_' → logprob: -7.765058994293213
    4. ' ' → logprob: -8.015058517456055
    5. '[' → logprob: -10.015058517456055
    6. '.' → logprob: -10.640058517456055
    7. '[:]' → logprob: -11.390058517456055
    8. '_list' → logprob: -11.890058517456055
    9. ',' → logprob: -11.890058517456055
    10. ')' → logprob: -12.015058517456055

Token 47: ' [' (ID: 723)
  Prédit: ' list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.1917756050825119
    2. 'list' → logprob: -1.9417755603790283
    3. ' [' → logprob: -3.9417755603790283
    4. '[' → logprob: -6.066775798797607
    5. '[list' → logprob: -6.066775798797607
    6. ' input' → logprob: -6.191775798797607
    7. '[input' → logprob: -6.441775798797607
    8. ' ['' → logprob: -6.941775798797607
    9. ' []' → logprob: -7.316775798797607
    10. 'input' → logprob: -7.441775798797607

Token 48: 'input' (ID: 2586)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.05434601381421089
    2. 'str' → logprob: -3.0543460845947266
    3. '*' → logprob: -5.804346084594727
    4. '*i' → logprob: -6.804346084594727
    5. 'int' → logprob: -7.054346084594727
    6. 'x' → logprob: -8.179346084594727
    7. 'input' → logprob: -9.304346084594727
    8. 'n' → logprob: -9.429346084594727
    9. '_' → logprob: -9.554346084594727
    10. ' i' → logprob: -9.679346084594727

Token 49: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.00012880703434348106
    2. '()' → logprob: -9.000128746032715
    3. '()]' → logprob: -13.250128746032715
    4. '())' → logprob: -13.625128746032715
    5. '()].' → logprob: -13.750128746032715
    6. ' ().' → logprob: -14.000128746032715
    7. '.strip' → logprob: -15.500128746032715
    8. '()).' → logprob: -16.12512969970703
    9. '(' → logprob: -16.25012969970703
    10. ')' → logprob: -17.12512969970703

Token 50: 'strip' (ID: 23905)
  Prédit: 'strip'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.04858816787600517
    2. 'rstrip' → logprob: -3.048588275909424
    3. 'split' → logprob: -14.423587799072266
    4. ' strip' → logprob: -16.048587799072266
    5. 'str' → logprob: -16.423587799072266
    6. '.strip' → logprob: -18.048587799072266
    7. '.rstrip' → logprob: -18.173587799072266
    8. '_strip' → logprob: -18.423587799072266
    9. 'r' → logprob: -18.548587799072266
    10. 'replace' → logprob: -19.048587799072266

Token 51: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.016310716047883034
    2. '()]' → logprob: -4.141310691833496
    3. '())' → logprob: -8.516310691833496
    4. ' ()' → logprob: -10.766310691833496
    5. ')' → logprob: -11.016310691833496
    6. '(' → logprob: -11.391310691833496
    7. '(),' → logprob: -12.016310691833496
    8. ']' → logprob: -12.141310691833496
    9. '().' → logprob: -12.766310691833496
    10. '()
' → logprob: -13.141310691833496

Token 52: ' for' (ID: 395)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.9885331392288208
    2. ' for' → logprob: -0.9885331392288208
    3. ')' → logprob: -1.6135331392288208
    4. ')]' → logprob: -3.4885330200195312
    5. 'for' → logprob: -3.8635330200195312
    6. ' ]' → logprob: -6.238533020019531
    7. '()]' → logprob: -7.238533020019531
    8. ' )' → logprob: -7.238533020019531
    9. '<|end|>' → logprob: -7.613533020019531
    10. ',' → logprob: -8.363533020019531

Token 53: ' _' (ID: 1175)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.8419448733329773
    2. ' _' → logprob: -1.091944932937622
    3. ' range' → logprob: -1.466944932937622
    4. 'range' → logprob: -5.966944694519043
    5. '_range' → logprob: -8.216944694519043
    6. ' ' → logprob: -9.341944694519043
    7. '	range' → logprob: -12.466944694519043
    8. ' i' → logprob: -12.591944694519043
    9. ' in' → logprob: -13.341944694519043
    10. ' ' → logprob: -13.466944694519043

Token 54: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.3258552551269531
    2. 'range' → logprob: -1.8258552551269531
    3. ' range' → logprob: -2.200855255126953
    4. 'in' → logprob: -5.075855255126953
    5. ' ' → logprob: -10.825855255126953
    6. '	range' → logprob: -11.325855255126953
    7. ' xrange' → logprob: -11.825855255126953
    8. '  ' → logprob: -12.325855255126953
    9. 'n' → logprob: -12.450855255126953
    10. ' ran' → logprob: -12.700855255126953

Token 55: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.0006308287265710533
    2. ' range' → logprob: -7.375630855560303
    3. '(range' → logprob: -14.125630378723145
    4. '   ' → logprob: -14.250630378723145
    5. '	range' → logprob: -14.625630378723145
    6. 'ran' → logprob: -14.625630378723145
    7. 'r' → logprob: -14.750630378723145
    8. ' ' → logprob: -14.750630378723145
    9. 'rang' → logprob: -14.875630378723145
    10. '  ' → logprob: -15.750630378723145

Token 56: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.00021903318702243268
    2. '(' → logprob: -8.500219345092773
    3. 'n' → logprob: -11.500219345092773
    4. ' (' → logprob: -12.750219345092773
    5. '(k' → logprob: -13.375219345092773
    6. ' n' → logprob: -14.250219345092773
    7. '	n' → logprob: -16.375219345092773
    8. '   ' → logprob: -16.875219345092773
    9. '(
' → logprob: -17.250219345092773
    10. ')n' → logprob: -17.500219345092773

Token 57: ')]
' (ID: 11587)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.0001967457792488858
    2. ']' → logprob: -9.25019645690918
    3. ')' → logprob: -9.50019645690918
    4. ' )' → logprob: -11.50019645690918
    5. ')]
' → logprob: -12.12519645690918
    6. '   ' → logprob: -12.12519645690918
    7. '])]' → logprob: -14.00019645690918
    8. ' ]' → logprob: -14.12519645690918
    9. '')]' → logprob: -14.37519645690918
    10. ')])' → logprob: -14.50019645690918

Token 58: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.25211337208747864
    2. '<|end|>' → logprob: -2.8771133422851562
    3. '    
' → logprob: -3.2521133422851562
    4. '
' → logprob: -3.2521133422851562
    5. 'per' → logprob: -3.8771133422851562
    6. 'for' → logprob: -4.377113342285156
    7. ' ' → logprob: -4.502113342285156
    8. '    ' → logprob: -5.002113342285156
    9. '  
' → logprob: -5.252113342285156
    10. ' 
' → logprob: -5.252113342285156

Token 59: ' results' (ID: 4376)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.28278037905693054
    2. 'per' → logprob: -2.657780408859253
    3. 'cards' → logprob: -3.032780408859253
    4. ' for' → logprob: -3.907780408859253
    5. 'result' → logprob: -3.907780408859253
    6. '   ' → logprob: -4.032780170440674
    7. 'answers' → logprob: -4.532780170440674
    8. 'perm' → logprob: -4.532780170440674
    9. 'answer' → logprob: -4.782780170440674
    10. 'indices' → logprob: -5.282780170440674

Token 60: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.011089558713138103
    2. '=' → logprob: -4.511089324951172
    3. ' ' → logprob: -10.886089324951172
    4. '_' → logprob: -11.761089324951172
    5. '=[]' → logprob: -12.761089324951172
    6. '_per' → logprob: -13.011089324951172
    7. ' permutations' → logprob: -13.261089324951172
    8. 's' → logprob: -13.511089324951172
    9. ',' → logprob: -13.761089324951172
    10. ':' → logprob: -14.011089324951172

Token 61: ' set' (ID: 920)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.6859576106071472
    2. ' list' → logprob: -1.435957670211792
    3. ' permutations' → logprob: -2.310957670211792
    4. ' set' → logprob: -2.560957670211792
    5. '[]' → logprob: -2.935957670211792
    6. 'list' → logprob: -4.310957431793213
    7. 'set' → logprob: -4.560957431793213
    8. 'per' → logprob: -6.185957431793213
    9. ' sorted' → logprob: -7.060957431793213
    10. ' [' → logprob: -7.185957431793213

Token 62: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.6212073564529419
    2. '(' → logprob: -0.8712073564529419
    3. '(per' → logprob: -3.1212072372436523
    4. '([]' → logprob: -10.121207237243652
    5. '([' → logprob: -10.371207237243652
    6. '((' → logprob: -10.496207237243652
    7. '(
' → logprob: -10.871207237243652
    8. ' ()' → logprob: -11.621207237243652
    9. '(()' → logprob: -12.371207237243652
    10. '(p' → logprob: -12.871207237243652

Token 63: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.37748226523399353
    2. '<|end|>' → logprob: -1.752482295036316
    3. ' for' → logprob: -3.2524821758270264
    4. 'for' → logprob: -3.3774821758270264
    5. '    
' → logprob: -3.6274821758270264
    6. ' ' → logprob: -4.1274824142456055
    7. ' 
' → logprob: -4.8774824142456055
    8. '
' → logprob: -5.0024824142456055
    9. '    ' → logprob: -5.7524824142456055
    10. '<|end|>' → logprob: -5.8774824142456055

Token 64: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.7352492809295654
    2. ' for' → logprob: -1.1102492809295654
    3. ' ' → logprob: -2.4852492809295654
    4. '   ' → logprob: -2.4852492809295654
    5. ' 
' → logprob: -4.6102495193481445
    6. '    ' → logprob: -5.4852495193481445
    7. '    
' → logprob: -5.8602495193481445
    8. 'per' → logprob: -6.2352495193481445
    9. '  ' → logprob: -6.8602495193481445
    10. ' permutations' → logprob: -6.9852495193481445

Token 65: ' seq' (ID: 26775)
  Prédit: 'perm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'perm' → logprob: -1.0466196537017822
    2. 'p' → logprob: -1.1716196537017822
    3. ' p' → logprob: -1.4216196537017822
    4. ' perm' → logprob: -2.9216196537017822
    5. ' comb' → logprob: -4.421619415283203
    6. 'i' → logprob: -5.546619415283203
    7. 'combo' → logprob: -5.671619415283203
    8. ' combo' → logprob: -5.796619415283203
    9. 'per' → logprob: -5.796619415283203
    10. '_' → logprob: -6.046619415283203

Token 66: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.004408516921103001
    2. 'in' → logprob: -5.504408359527588
    3. 'length' → logprob: -8.754408836364746
    4. '_length' → logprob: -9.254408836364746
    5. 's' → logprob: -10.629408836364746
    6. '_len' → logprob: -10.629408836364746
    7. ' length' → logprob: -12.379408836364746
    8. 'len' → logprob: -12.629408836364746
    9. ' ' → logprob: -13.004408836364746
    10. '1' → logprob: -13.254408836364746

Token 67: ' permutations' (ID: 174595)
  Prédit: ' permutations'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' permutations' → logprob: -0.062123075127601624
    2. 'per' → logprob: -2.8121230602264404
    3. ' ' → logprob: -10.06212329864502
    4. '(per' → logprob: -10.43712329864502
    5. '	per' → logprob: -10.56212329864502
    6. '   ' → logprob: -10.93712329864502
    7. 'perm' → logprob: -11.56212329864502
    8. ' perm' → logprob: -11.81212329864502
    9. '.per' → logprob: -12.56212329864502
    10. '-per' → logprob: -12.93712329864502

Token 68: '(cards' (ID: 161529)
  Prédit: '(cards'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(cards' → logprob: -2.8325677703833207e-05
    2. '(range' → logprob: -10.500028610229492
    3. '(' → logprob: -14.500028610229492
    4. '(card' → logprob: -15.500028610229492
    5. '/cards' → logprob: -17.000028610229492
    6. '(deck' → logprob: -17.375028610229492
    7. ' (' → logprob: -18.250028610229492
    8. '(tokens' → logprob: -18.375028610229492
    9. '(sorted' → logprob: -18.750028610229492
    10. '(results' → logprob: -18.875028610229492

Token 69: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00618402985855937
    2. '(),' → logprob: -6.006184101104736
    3. ',k' → logprob: -6.256184101104736
    4. ' ,' → logprob: -6.631184101104736
    5. ',n' → logprob: -7.881184101104736
    6. '   ' → logprob: -10.881183624267578
    7. '(n' → logprob: -11.006183624267578
    8. '(' → logprob: -11.256183624267578
    9. ')' → logprob: -11.506183624267578
    10. '),' → logprob: -12.381183624267578

Token 70: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.22551441192626953
    2. ' k' → logprob: -1.6005144119262695
    3. ' ' → logprob: -9.72551441192627
    4. 'n' → logprob: -11.60051441192627
    5. '   ' → logprob: -11.85051441192627
    6. ' n' → logprob: -11.85051441192627
    7. '2' → logprob: -12.10051441192627
    8. '    ' → logprob: -12.97551441192627
    9. '	k' → logprob: -13.10051441192627
    10. '  ' → logprob: -13.47551441192627

Token 71: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0006224881508387625
    2. '):
' → logprob: -7.750622272491455
    3. ')' → logprob: -8.750622749328613
    4. ' ):' → logprob: -10.750622749328613
    5. ':' → logprob: -11.750622749328613
    6. '):
' → logprob: -13.000622749328613
    7. ' ' → logprob: -15.000622749328613
    8. ',' → logprob: -15.500622749328613
    9. '   ' → logprob: -15.500622749328613
    10. '):

' → logprob: -15.625622749328613

Token 72: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.19750697910785675
    2. ':' → logprob: -1.9475070238113403
    3. '
' → logprob: -4.072506904602051
    4. '<|end|>' → logprob: -5.197506904602051
    5. '   ' → logprob: -5.697506904602051
    6. ':
' → logprob: -5.947506904602051
    7. '    ' → logprob: -6.822506904602051
    8. '):' → logprob: -6.822506904602051
    9. '        
' → logprob: -6.822506904602051
    10. ' ' → logprob: -7.322506904602051

Token 73: ' results' (ID: 4376)
  Prédit: ' results'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' results' → logprob: -0.3908211886882782
    2. 'results' (adapté à ' results') → logprob: -1.2658212184906006
    3. '    
' → logprob: -4.3908209800720215
    4. '   ' → logprob: -4.3908209800720215
    5. ' 
' → logprob: -5.2658209800720215
    6. 'print' → logprob: -6.3908209800720215
    7. ' if' → logprob: -6.3908209800720215
    8. 'result' → logprob: -6.6408209800720215
    9. '     
' → logprob: -6.6408209800720215
    10. ' print' → logprob: -6.7658209800720215

Token 74: '.add' (ID: 1950)
  Prédit: '.add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.add' → logprob: -0.06201507896184921
    2. '.' → logprob: -2.8120150566101074
    3. ' .' → logprob: -10.437015533447266
    4. '.update' → logprob: -11.812015533447266
    5. 'add' → logprob: -12.062015533447266
    6. '.append' → logprob: -12.812015533447266
    7. '   ' → logprob: -14.062015533447266
    8. ' add' → logprob: -14.562015533447266
    9. '_add' → logprob: -15.812015533447266
    10. '.
' → logprob: -16.062015533447266

Token 75: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.45313799381256104
    2. '(seq' → logprob: -1.703137993812561
    3. '("' → logprob: -2.0781378746032715
    4. '(tuple' → logprob: -2.9531378746032715
    5. '(' → logprob: -5.5781378746032715
    6. '(('' → logprob: -8.45313835144043
    7. '"' → logprob: -8.57813835144043
    8. '(',' → logprob: -8.82813835144043
    9. '('_' → logprob: -9.07813835144043
    10. '("("' → logprob: -9.95313835144043

Token 76: ''.' (ID: 6120)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.6083813905715942
    2. ' ''.' → logprob: -1.4833813905715942
    3. '''.' → logprob: -1.7333813905715942
    4. ' '' → logprob: -3.4833812713623047
    5. '"' → logprob: -4.733381271362305
    6. '','.' → logprob: -4.983381271362305
    7. ''.' → logprob: -6.483381271362305
    8. ' "".' → logprob: -6.858381271362305
    9. ' ' → logprob: -7.233381271362305
    10. '',' → logprob: -7.358381271362305

Token 77: 'join' (ID: 10891)
  Prédit: 'join'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'join' → logprob: -8.77627644513268e-06
    2. '''.' → logprob: -12.375008583068848
    3. ''.' → logprob: -13.500008583068848
    4. '(join' → logprob: -13.625008583068848
    5. 'jo' → logprob: -14.000008583068848
    6. ' join' → logprob: -14.750008583068848
    7. '.join' → logprob: -15.125008583068848
    8. '.' → logprob: -15.750008583068848
    9. '   ' → logprob: -16.750009536743164
    10. '```' → logprob: -17.000009536743164

Token 78: '(seq' (ID: 78669)
  Prédit: '(seq'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(seq' → logprob: -0.00014013137842994183
    2. 'seq' → logprob: -9.000140190124512
    3. '(' → logprob: -11.250140190124512
    4. ')' → logprob: -12.625140190124512
    5. '(sequence' → logprob: -15.500140190124512
    6. '(
' → logprob: -16.000139236450195
    7. '(list' → logprob: -16.875139236450195
    8. ' seq' → logprob: -16.875139236450195
    9. '(tuple' → logprob: -17.750139236450195
    10. '   ' → logprob: -18.750139236450195

Token 79: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.017827145755290985
    2. ')' → logprob: -4.517827033996582
    3. '))
' → logprob: -5.017827033996582
    4. ')
' → logprob: -10.017827033996582
    5. ')))' → logprob: -10.642827033996582
    6. '   ' → logprob: -10.892827033996582
    7. '))

' → logprob: -11.517827033996582
    8. ' ))' → logprob: -11.517827033996582
    9. '))
' → logprob: -11.892827033996582
    10. '       ' → logprob: -12.017827033996582

Token 80: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.6531906723976135
    2. '   ' → logprob: -0.9031906723976135
    3. '    
' → logprob: -3.1531906127929688
    4. 'for' → logprob: -3.6531906127929688
    5. '
' → logprob: -5.778190612792969
    6. ' for' → logprob: -7.153190612792969
    7. '<|end|>' → logprob: -7.278190612792969
    8. '```' → logprob: -7.653190612792969
    9. '  
' → logprob: -8.028190612792969
    10. ' print' → logprob: -9.028190612792969

Token 81: ' print' (ID: 2123)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.509425938129425
    2. 'print' (adapté à ' print') → logprob: -1.1344258785247803
    3. 'results' → logprob: -2.8844258785247803
    4. ' for' → logprob: -4.759426116943359
    5. '   ' → logprob: -5.259426116943359
    6. '    
' → logprob: -5.884426116943359
    7. 'sorted' → logprob: -5.884426116943359
    8. '
' → logprob: -6.759426116943359
    9. '```' → logprob: -7.634426116943359
    10. 'result' → logprob: -8.25942611694336

Token 82: '(len' (ID: 14990)
  Prédit: '(len'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(len' → logprob: -0.03631043806672096
    2. '(' → logprob: -3.5363104343414307
    3. '(max' → logprob: -5.91131067276001
    4. '(sorted' → logprob: -6.16131067276001
    5. '('' → logprob: -6.53631067276001
    6. '(results' → logprob: -9.161310195922852
    7. '(min' → logprob: -9.786310195922852
    8. '()' → logprob: -9.911310195922852
    9. 'len' → logprob: -10.661310195922852
    10. '(sum' → logprob: -11.036310195922852

Token 83: '(results' (ID: 42655)
  Prédit: '(results'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(results' → logprob: -0.0004891689168289304
    2. '(' → logprob: -7.625489234924316
    3. ')' → logprob: -14.875489234924316
    4. 'results' → logprob: -15.500489234924316
    5. ' (' → logprob: -15.875489234924316
    6. '(res' → logprob: -16.12548828125
    7. '(
' → logprob: -16.37548828125
    8. '(result' → logprob: -16.50048828125
    9. '	results' → logprob: -17.25048828125
    10. '(contents' → logprob: -17.50048828125

Token 84: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.25194039940834045
    2. ')' → logprob: -1.501940369606018
    3. ')))' → logprob: -12.501940727233887
    4. ' ))' → logprob: -12.751940727233887
    5. ' )' → logprob: -13.001940727233887
    6. '))
' → logprob: -13.876940727233887
    7. ')
' → logprob: -15.251940727233887
    8. '())' → logprob: -15.251940727233887
    9. '()))' → logprob: -15.376940727233887
    10. '()' → logprob: -15.751940727233887


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 82
Tokens correctement prédits (1ère position, stricte): 42
Tokens correctement prédits (1ère position, avec adaptation): 43
Tokens correctement prédits (top 10): 69
Précision stricte (1ère position): 51.22%
Précision adaptée (1ère position): 52.44%
Précision (top 10): 84.15%
================================================================================
