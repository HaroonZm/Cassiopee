================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:26:08
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def evaluate_expression(expr):
    # Remove the trailing '=' and spaces
    expr = expr.strip().rstrip('=').replace(' ', '')
    
    # Tokenize the expression: numbers, operators, parentheses
    tokens = []
    num = ''
    for ch in expr:
        if ch.isdigit():
            num += ch
        else:
            if num:
                tokens.append(int(num))
                num = ''
            tokens.append(ch)
    if num:
        tokens.append(int(num))

    # Shunting Yard algorithm to convert infix to postfix (RPN)
    precedence = {'+':1, '-':1, '*':2, '/':2}
    output_queue = []
    operator_stack = []

    for token in tokens:
        if isinstance(token, int):
            output_queue.append(token)
        elif token in '+-*/':
            while (operator_stack and operator_stack[-1] in '+-*/' and
                   precedence[operator_stack[-1]] >= precedence[token]):
                output_queue.append(operator_stack.pop())
            operator_stack.append(token)
        elif token == '(':
            operator_stack.append(token)
        elif token == ')':
            while operator_stack and operator_stack[-1] != '(':
                output_queue.append(operator_stack.pop())
            operator_stack.pop()  # pop '('

    while operator_stack:
        output_queue.append(operator_stack.pop())

    # Evaluate the RPN expression
    stack = []
    for token in output_queue:
        if isinstance(token, int):
            stack.append(token)
        else:
            b = stack.pop()
            a = stack.pop()
            if token == '+':
                stack.append(a + b)
            elif token == '-':
                stack.append(a - b)
            elif token == '*':
                stack.append(a * b)
            elif token == '/':
                # Integer division truncating towards zero
                res = int(a / b)
                stack.append(res)
    return stack[0]

n = int(input())
for _ in range(n):
    expression = input()
    print(evaluate_expression(expression))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' evaluate' (ID: 21646)
  → Token d'amorce (pas de prédiction)

Token 2: '_expression' (ID: 69265)
  → Token d'amorce (pas de prédiction)

Token 3: '(expr' (ID: 78746)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.007270221132785082
    2. '_' → logprob: -5.007270336151123
    3. '```' → logprob: -8.507269859313965
    4. ' (' → logprob: -10.007269859313965
    5. '(_:' → logprob: -10.007269859313965
    6. '(_' → logprob: -10.257269859313965
    7. ':' → logprob: -10.507269859313965
    8. '('' → logprob: -10.757269859313965
    9. '("("' → logprob: -10.757269859313965
    10. '(:' → logprob: -11.007269859313965

Token 4: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.4329069256782532
    2. ')' → logprob: -1.0579068660736084
    3. ':' → logprob: -6.4329071044921875
    4. '(' → logprob: -7.1829071044921875
    5. '[' → logprob: -7.1829071044921875
    6. '):
' → logprob: -7.6829071044921875
    7. '```' → logprob: -8.807907104492188
    8. '**' → logprob: -9.432907104492188
    9. ''):' → logprob: -9.557907104492188
    10. '`' → logprob: -9.807907104492188

Token 5: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.12365653365850449
    2. '   ' → logprob: -2.6236565113067627
    3. '():' → logprob: -3.4986565113067627
    4. '(' → logprob: -4.748656749725342
    5. '```' → logprob: -6.248656749725342
    6. '(:' → logprob: -6.623656749725342
    7. ':return' → logprob: -8.748656272888184
    8. ''' → logprob: -8.748656272888184
    9. '':' → logprob: -8.998656272888184
    10. '):' → logprob: -9.123656272888184

Token 6: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.014850820414721966
    2. '```' → logprob: -4.889850616455078
    3. '       ' → logprob: -6.389850616455078
    4. 'return' → logprob: -6.514850616455078
    5. ' return' → logprob: -6.764850616455078
    6. '    ' → logprob: -7.139850616455078
    7. '`' → logprob: -7.764850616455078
    8. '\n' → logprob: -8.014850616455078
    9. ' ' → logprob: -8.139850616455078
    10. '\' → logprob: -8.514850616455078

Token 7: ' Remove' (ID: 18141)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.620993435382843
    2. '   ' → logprob: -1.7459933757781982
    3. 'result' → logprob: -2.7459933757781982
    4. ' return' → logprob: -2.8709933757781982
    5. 'return' → logprob: -3.2459933757781982
    6. ' result' → logprob: -3.4959933757781982
    7. ' #' → logprob: -3.8709933757781982
    8. '#' → logprob: -4.370993614196777
    9. 'e' → logprob: -4.370993614196777
    10. 'r' → logprob: -4.495993614196777

Token 8: ' the' (ID: 290)
  Prédit: ' all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' all' → logprob: -1.1098562479019165
    2. 'all' → logprob: -2.109856128692627
    3. ' spaces' → logprob: -2.234856128692627
    4. 'spaces' → logprob: -2.484856128692627
    5. ' unnecessary' → logprob: -2.609856128692627
    6. ' ' → logprob: -2.984856128692627
    7. ' leading' → logprob: -2.984856128692627
    8. ' the' → logprob: -3.234856128692627
    9. '_spaces' → logprob: -3.734856128692627
    10. 's' → logprob: -3.859856128692627

Token 9: ' trailing' (ID: 57985)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.2176759243011475
    2. ''' → logprob: -1.4676759243011475
    3. ' spaces' → logprob: -2.4676759243011475
    4. ' leading' → logprob: -2.8426759243011475
    5. 's' → logprob: -2.9676759243011475
    6. 'return' → logprob: -3.0926759243011475
    7. '"' → logprob: -3.2176759243011475
    8. 'spaces' → logprob: -3.4676759243011475
    9. 'def' → logprob: -3.5926759243011475
    10. ' whitespace' → logprob: -4.092676162719727

Token 10: ' '='' (ID: 98780)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.723449170589447
    2. 's' → logprob: -1.7234492301940918
    3. ''' → logprob: -2.598449230194092
    4. ' space' → logprob: -2.848449230194092
    5. ' whitespace' → logprob: -3.098449230194092
    6. 'space' → logprob: -3.223449230194092
    7. '_' → logprob: -3.598449230194092
    8. '"' → logprob: -4.473449230194092
    9. ' spaces' → logprob: -4.723449230194092
    10. '#' → logprob: -4.848449230194092

Token 11: ' and' (ID: 326)
  Prédit: 'expr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'expr' → logprob: -1.2466163635253906
    2. '   ' → logprob: -1.6216163635253906
    3. '\n' → logprob: -1.7466163635253906
    4. '    
' → logprob: -1.8716163635253906
    5. '```' → logprob: -3.2466163635253906
    6. '\' → logprob: -3.3716163635253906
    7. '  
' → logprob: -3.6216163635253906
    8. '
' → logprob: -3.8716163635253906
    9. ' expr' → logprob: -4.246616363525391
    10. '   
' → logprob: -4.371616363525391

Token 12: ' spaces' (ID: 18608)
  Prédit: ' strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' strip' → logprob: -0.30594930052757263
    2. 'strip' → logprob: -1.680949330329895
    3. ' evaluate' → logprob: -4.0559492111206055
    4. ' replace' → logprob: -4.3059492111206055
    5. 'replace' → logprob: -4.3059492111206055
    6. ' return' → logprob: -4.5559492111206055
    7. ' split' → logprob: -5.5559492111206055
    8. 'rstrip' → logprob: -5.5559492111206055
    9. 'evaluate' → logprob: -5.6809492111206055
    10. ' tokenize' → logprob: -6.1809492111206055

Token 13: '
' (ID: 198)
  Prédit: 'expr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'expr' → logprob: -0.24491971731185913
    2. '   ' → logprob: -1.869919776916504
    3. ' expr' → logprob: -3.494919776916504
    4. '```' → logprob: -4.244919776916504
    5. '\n' → logprob: -4.744919776916504
    6. '    
' → logprob: -4.994919776916504
    7. '  
' → logprob: -7.994919776916504
    8. '\r' → logprob: -8.119919776916504
    9. 'strip' → logprob: -8.119919776916504
    10. '``' → logprob: -8.369919776916504

Token 14: '   ' (ID: 271)
  Prédit: 'expr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'expr' → logprob: -0.6135479807853699
    2. '   ' → logprob: -0.8635479807853699
    3. ' expr' → logprob: -3.4885480403900146
    4. '```' → logprob: -5.9885478019714355
    5. 'return' → logprob: -6.3635478019714355
    6. '    
' → logprob: -6.8635478019714355
    7. ' return' → logprob: -7.7385478019714355
    8. 'r' → logprob: -8.738548278808594
    9. '(expr' → logprob: -9.238548278808594
    10. '\n' → logprob: -10.113548278808594

Token 15: ' expr' (ID: 30206)
  Prédit: 'expr'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'expr' (adapté à ' expr') → logprob: -0.21038080751895905
    2. ' expr' → logprob: -2.085380792617798
    3. '   ' → logprob: -2.835380792617798
    4. 'return' → logprob: -5.585381031036377
    5. ' return' → logprob: -6.335381031036377
    6. '    
' → logprob: -7.460381031036377
    7. '```' → logprob: -8.210380554199219
    8. ' expression' → logprob: -9.335380554199219
    9. 'expression' → logprob: -9.960380554199219
    10. ' 
' → logprob: -10.210380554199219

Token 16: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.12155388295650482
    2. ' =' → logprob: -2.246553897857666
    3. '.replace' → logprob: -4.996553897857666
    4. '.strip' → logprob: -6.496553897857666
    5. '.rstrip' → logprob: -7.871553897857666
    6. 's' → logprob: -11.121553421020508
    7. '[:-' → logprob: -11.746553421020508
    8. '.' → logprob: -12.496553421020508
    9. 'rstrip' → logprob: -12.621553421020508
    10. '.=' → logprob: -13.121553421020508

Token 17: ' expr' (ID: 30206)
  Prédit: 'expr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'expr' → logprob: -0.25193148851394653
    2. ' expr' → logprob: -1.5019314289093018
    3. '(expr' → logprob: -13.001931190490723
    4. 'express' → logprob: -16.50193214416504
    5. '.expr' → logprob: -16.50193214416504
    6. '_expr' → logprob: -18.37693214416504
    7. '   ' → logprob: -18.50193214416504
    8. 'expression' → logprob: -19.50193214416504
    9. '```' → logprob: -19.50193214416504
    10. ' expression' → logprob: -20.62693214416504

Token 18: '.strip' (ID: 40613)
  Prédit: '.rstrip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.rstrip' → logprob: -0.10944453626871109
    2. '.strip' → logprob: -2.6094446182250977
    3. '.replace' → logprob: -3.6094446182250977
    4. '[:-' → logprob: -5.859444618225098
    5. '.' → logprob: -9.109444618225098
    6. 'rstrip' → logprob: -9.734444618225098
    7. ' .' → logprob: -13.984444618225098
    8. '.trim' → logprob: -14.609444618225098
    9. '.chomp' → logprob: -14.609444618225098
    10. 'replace' → logprob: -14.984444618225098

Token 19: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.14104104042053223
    2. '(' → logprob: -2.1410410404205322
    3. '().' → logprob: -4.391040802001953
    4. '('' → logprob: -6.766040802001953
    5. '(()' → logprob: -9.141040802001953
    6. '()(' → logprob: -9.641040802001953
    7. '("' → logprob: -9.766040802001953
    8. ' ()' → logprob: -10.141040802001953
    9. '("("' → logprob: -10.141040802001953
    10. '(.' → logprob: -10.766040802001953

Token 20: 'rstrip' (ID: 180429)
  Prédit: 'rstrip'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'rstrip' → logprob: -0.04886031523346901
    2. 'replace' → logprob: -3.0488603115081787
    3. 'strip' → logprob: -8.298860549926758
    4. 'remove' → logprob: -11.673860549926758
    5. 'rem' → logprob: -12.173860549926758
    6. '('='' → logprob: -12.798860549926758
    7. 'l' → logprob: -13.423860549926758
    8. 'equals' → logprob: -13.423860549926758
    9. 'equal' → logprob: -13.673860549926758
    10. 'r' → logprob: -13.923860549926758

Token 21: '('='' (ID: 190284)
  Prédit: '(''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.003479977836832404
    2. '('='' → logprob: -5.878479957580566
    3. '(' → logprob: -7.378479957580566
    4. '("="' → logprob: -10.378479957580566
    5. ''' → logprob: -11.378479957580566
    6. '('(' → logprob: -13.253479957580566
    7. '=' → logprob: -13.628479957580566
    8. '=('' → logprob: -13.878479957580566
    9. '('.')' → logprob: -14.128479957580566
    10. '(('' → logprob: -14.753479957580566

Token 22: ').' (ID: 741)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.696889623621246e-06
    2. ' )' → logprob: -13.25000286102295
    3. ')`' → logprob: -15.12500286102295
    4. ')
' → logprob: -15.37500286102295
    5. '')' → logprob: -15.87500286102295
    6. '))' → logprob: -15.87500286102295
    7. '`)' → logprob: -17.250001907348633
    8. ').' → logprob: -18.375001907348633
    9. ')**' → logprob: -18.875001907348633
    10. '")' → logprob: -18.875001907348633

Token 23: 'replace' (ID: 15208)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.008622728288173676
    2. 'replace' → logprob: -4.758622646331787
    3. 'rstrip' → logprob: -12.258623123168945
    4. 'split' → logprob: -13.258623123168945
    5. ' strip' → logprob: -13.383623123168945
    6. '```' → logprob: -16.258623123168945
    7. ' replace' → logprob: -17.633623123168945
    8. '.strip' → logprob: -17.883623123168945
    9. 'remove' → logprob: -18.008623123168945
    10. 'trim' → logprob: -18.883623123168945

Token 24: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.045222148299217224
    2. '(' → logprob: -3.170222043991089
    3. ''' → logprob: -6.545222282409668
    4. '("' → logprob: -7.170222282409668
    5. '"' → logprob: -12.045222282409668
    6. ' ' → logprob: -12.420222282409668
    7. ''s' → logprob: -12.670222282409668
    8. ')' → logprob: -15.420222282409668
    9. '()' → logprob: -15.545222282409668
    10. '("("' → logprob: -15.920222282409668

Token 25: ' ',' (ID: 14089)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.021995535120368004
    2. ' ' → logprob: -3.8969955444335938
    3. ' '' → logprob: -7.021995544433594
    4. ''s' → logprob: -7.771995544433594
    5. ')' → logprob: -9.896995544433594
    6. ' )' → logprob: -10.396995544433594
    7. '"' → logprob: -11.021995544433594
    8. '  ' → logprob: -11.646995544433594
    9. ''t' → logprob: -12.271995544433594
    10. '   ' → logprob: -12.646995544433594

Token 26: ' '')
' (ID: 53215)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.014217570424079895
    2. '''' → logprob: -4.514217376708984
    3. ' '')' → logprob: -5.764217376708984
    4. ')' → logprob: -11.514217376708984
    5. '"' → logprob: -11.764217376708984
    6. ''',' → logprob: -12.264217376708984
    7. '''
' → logprob: -12.764217376708984
    8. ''''' → logprob: -14.514217376708984
    9. '')' → logprob: -14.764217376708984
    10. ' ''' → logprob: -15.014217376708984

Token 27: '    
' (ID: 1944)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3237854540348053
    2. '+' → logprob: -1.948785424232483
    3. '   ' → logprob: -3.0737855434417725
    4. '*' → logprob: -3.1987855434417725
    5. '\n' → logprob: -4.448785305023193
    6. '\' → logprob: -5.073785305023193
    7. 'return' → logprob: -5.573785305023193
    8. '#' → logprob: -5.823785305023193
    9. 'if' → logprob: -5.823785305023193
    10. '(' → logprob: -5.823785305023193

Token 28: '   ' (ID: 271)
  Prédit: 'try'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'try' → logprob: -0.0066080763936042786
    2. 'result' → logprob: -5.506608009338379
    3. '#' → logprob: -6.756608009338379
    4. 'return' → logprob: -7.131608009338379
    5. 'tokens' → logprob: -8.256608009338379
    6. 'if' → logprob: -9.381608009338379
    7. ' try' → logprob: -9.381608009338379
    8. '   ' → logprob: -9.756608009338379
    9. 'for' → logprob: -11.381608009338379
    10. 'def' → logprob: -11.381608009338379

Token 29: ' #' (ID: 1069)
  Prédit: 'try'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'try' → logprob: -0.00575422216206789
    2. 'return' → logprob: -5.380753993988037
    3. 'result' → logprob: -7.005753993988037
    4. '#' (adapté à ' #') → logprob: -9.505754470825195
    5. 'if' → logprob: -9.630754470825195
    6. ' try' → logprob: -10.255754470825195
    7. 'tokens' → logprob: -11.255754470825195
    8. 'for' → logprob: -11.505754470825195
    9. '```' → logprob: -11.755754470825195
    10. 'allowed' → logprob: -12.380754470825195

Token 30: ' Token' (ID: 17951)
  Prédit: 'try'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'try' → logprob: -0.02684277482330799
    2. ' try' → logprob: -3.9018428325653076
    3. 'return' → logprob: -5.7768425941467285
    4. 'Try' → logprob: -6.2768425941467285
    5. 'result' → logprob: -7.6518425941467285
    6. '#' → logprob: -8.026843070983887
    7. 'tokens' → logprob: -8.901843070983887
    8. 'if' → logprob: -9.276843070983887
    9. '   ' → logprob: -10.151843070983887
    10. 'for' → logprob: -10.401843070983887

Token 31: 'ize' (ID: 750)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.0022037860471755266
    2. 'ize' → logprob: -6.127203941345215
    3. 'ized' → logprob: -11.877203941345215
    4. 'izer' → logprob: -12.377203941345215
    5. '=' → logprob: -13.127203941345215
    6. '_list' → logprob: -13.377203941345215
    7. '_' → logprob: -13.877203941345215
    8. 'i' → logprob: -14.502203941345215
    9. 'ization' → logprob: -14.502203941345215
    10. ' =' → logprob: -14.752203941345215

Token 32: ' the' (ID: 290)
  Prédit: 'tokens'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tokens' → logprob: -0.07639529556035995
    2. ' tokens' → logprob: -2.951395273208618
    3. ' =' → logprob: -5.076395511627197
    4. '   ' → logprob: -5.451395511627197
    5. 'def' → logprob: -5.701395511627197
    6. '=' → logprob: -6.701395511627197
    7. '()' → logprob: -6.826395511627197
    8. 'result' → logprob: -6.826395511627197
    9. 'import' → logprob: -7.201395511627197
    10. 'return' → logprob: -7.451395511627197

Token 33: ' expression' (ID: 12973)
  Prédit: 'expr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'expr' → logprob: -0.3392392098903656
    2. 'expression' → logprob: -1.964239239692688
    3. ' expr' → logprob: -2.5892391204833984
    4. ' expression' → logprob: -2.8392391204833984
    5. 'tokens' → logprob: -4.839239120483398
    6. '(expr' → logprob: -6.589239120483398
    7. 'import' → logprob: -6.714239120483398
    8. 'def' → logprob: -7.089239120483398
    9. 'input' → logprob: -7.339239120483398
    10. ' tokens' → logprob: -8.089239120483398

Token 34: ':' (ID: 25)
  Prédit: 'tokens'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tokens' → logprob: -0.06627976894378662
    2. ' tokens' → logprob: -3.191279888153076
    3. 'def' → logprob: -5.316279888153076
    4. '   ' → logprob: -5.441279888153076
    5. '_tokens' → logprob: -5.691279888153076
    6. ' =' → logprob: -5.941279888153076
    7. ',' → logprob: -6.566279888153076
    8. 'import' → logprob: -6.566279888153076
    9. '=' → logprob: -6.816279888153076
    10. '.tokens' → logprob: -6.941279888153076

Token 35: ' numbers' (ID: 8663)
  Prédit: 'tokens'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tokens' → logprob: -0.505068838596344
    2. ' tokens' → logprob: -1.0050687789916992
    3. ' import' → logprob: -3.880068778991699
    4. 'import' → logprob: -4.880068778991699
    5. 'token' → logprob: -7.630068778991699
    6. ' return' → logprob: -8.2550687789917
    7. 'return' → logprob: -8.2550687789917
    8. '   ' → logprob: -8.3800687789917
    9. '```' → logprob: -8.5050687789917
    10. ' ' → logprob: -8.7550687789917

Token 36: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.5299894213676453
    2. ' and' → logprob: -1.65498948097229
    3. ' =' → logprob: -2.40498948097229
    4. ' ' → logprob: -3.27998948097229
    5. 'import' → logprob: -3.40498948097229
    6. ' ,' → logprob: -3.40498948097229
    7. 'and' → logprob: -4.029989242553711
    8. '=' → logprob: -5.904989242553711
    9. '   ' → logprob: -6.279989242553711
    10. ' +' → logprob: -7.279989242553711

Token 37: ' operators' (ID: 29893)
  Prédit: 'operators'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'operators' → logprob: -0.2537230849266052
    2. ' operators' → logprob: -1.87872314453125
    3. '+' → logprob: -2.87872314453125
    4. '+,' → logprob: -4.87872314453125
    5. 'plus' → logprob: -6.37872314453125
    6. ' +' → logprob: -6.50372314453125
    7. '[' → logprob: -7.00372314453125
    8. 'variables' → logprob: -7.50372314453125
    9. 'operator' → logprob: -7.62872314453125
    10. ' plus' → logprob: -7.75372314453125

Token 38: ',' (ID: 11)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'import' → logprob: -0.94169020652771
    2. ',' → logprob: -1.06669020652771
    3. ' =' → logprob: -1.44169020652771
    4. '=' → logprob: -3.94169020652771
    5. 'tokens' → logprob: -5.066690444946289
    6. '   ' → logprob: -6.816690444946289
    7. ' ,' → logprob: -7.441690444946289
    8. ' import' → logprob: -8.316690444946289
    9. ' tokens' → logprob: -8.566690444946289
    10. ' and' → logprob: -8.566690444946289

Token 39: ' parentheses' (ID: 180602)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.17282480001449585
    2. 'and' → logprob: -1.9228248596191406
    3. ',' → logprob: -5.422824859619141
    4. ' parentheses' → logprob: -5.422824859619141
    5. 'parent' → logprob: -6.172824859619141
    6. ' ,' → logprob: -8.67282485961914
    7. '   ' → logprob: -8.92282485961914
    8. '(' → logprob: -9.17282485961914
    9. '^' → logprob: -9.29782485961914
    10. 'variables' → logprob: -9.42282485961914

Token 40: '
' (ID: 198)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'import' → logprob: -0.42983970046043396
    2. '   ' → logprob: -1.9298397302627563
    3. ',' → logprob: -2.554839611053467
    4. 'tokens' → logprob: -2.679839611053467
    5. ' =' → logprob: -3.554839611053467
    6. ' tokens' → logprob: -4.179839611053467
    7. ' import' → logprob: -5.054839611053467
    8. '=' → logprob: -6.054839611053467
    9. '_tokens' → logprob: -6.429839611053467
    10. 'token' → logprob: -7.304839611053467

Token 41: '   ' (ID: 271)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'import' → logprob: -0.648894190788269
    2. 'tokens' → logprob: -1.398894190788269
    3. '   ' → logprob: -1.773894190788269
    4. ' import' → logprob: -3.5238943099975586
    5. ' tokens' → logprob: -3.5238943099975586
    6. 'token' → logprob: -6.898894309997559
    7. '[' → logprob: -8.398894309997559
    8. ' token' → logprob: -9.148894309997559
    9. 'pattern' → logprob: -9.398894309997559
    10. '_tokens' → logprob: -9.523894309997559

Token 42: ' tokens' (ID: 20290)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'import' → logprob: -0.2515828609466553
    2. 'tokens' (adapté à ' tokens') → logprob: -2.1265828609466553
    3. ' import' → logprob: -2.3765828609466553
    4. ' tokens' → logprob: -4.626583099365234
    5. 'token' → logprob: -8.626583099365234
    6. 'pattern' → logprob: -8.751583099365234
    7. '   ' → logprob: -9.376583099365234
    8. 're' → logprob: -10.376583099365234
    9. 'return' → logprob: -10.751583099365234
    10. ' token' → logprob: -11.376583099365234

Token 43: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.018251435831189156
    2. '=' → logprob: -4.018251419067383
    3. '=[]' → logprob: -10.018251419067383
    4. ' =[' → logprob: -10.518251419067383
    5. ' ' → logprob: -11.768251419067383
    6. ' =
' → logprob: -12.143251419067383
    7. ' =)' → logprob: -12.393251419067383
    8. ')' → logprob: -13.143251419067383
    9. '[:]' → logprob: -13.268251419067383
    10. '[' → logprob: -13.768251419067383

Token 44: ' []
' (ID: 8911)
  Prédit: 're'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 're' → logprob: -0.6589924693107605
    2. ' re' → logprob: -0.7839924693107605
    3. '[]' → logprob: -3.9089925289154053
    4. ' []' → logprob: -5.283992290496826
    5. '[' → logprob: -7.908992290496826
    6. ' [' → logprob: -8.658992767333984
    7. ' list' → logprob: -9.033992767333984
    8. 'list' → logprob: -9.408992767333984
    9. ' ' → logprob: -10.033992767333984
    10. 'import' → logprob: -10.408992767333984

Token 45: '   ' (ID: 271)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.8572149276733398
    2. ' i' → logprob: -1.3572149276733398
    3. '=' → logprob: -2.10721492767334
    4. ' =' → logprob: -2.35721492767334
    5. ' ' → logprob: -2.73221492767334
    6. ',' → logprob: -4.85721492767334
    7. 'for' → logprob: -5.35721492767334
    8. 'import' → logprob: -5.48221492767334
    9. '   ' → logprob: -5.60721492767334
    10. 'current' → logprob: -5.98221492767334

Token 46: ' num' (ID: 2269)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.9731015563011169
    2. 'num' (adapté à ' num') → logprob: -1.4731016159057617
    3. ' i' → logprob: -1.9731016159057617
    4. 'pos' → logprob: -2.2231016159057617
    5. 'import' → logprob: -3.0981016159057617
    6. 'current' → logprob: -3.4731016159057617
    7. 'number' → logprob: -3.4731016159057617
    8. 'token' → logprob: -3.8481016159057617
    9. ' import' → logprob: -5.348101615905762
    10. ' pos' → logprob: -6.223101615905762

Token 47: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -1.1404335498809814
    2. '_chars' → logprob: -1.8904335498809814
    3. '_buffer' → logprob: -2.0154335498809814
    4. 'ber' → logprob: -2.0154335498809814
    5. '=' → logprob: -2.1404335498809814
    6. '_' → logprob: -3.3904335498809814
    7. 's' → logprob: -4.015433311462402
    8. '_builder' → logprob: -4.265433311462402
    9. '_char' → logprob: -4.515433311462402
    10. '_token' → logprob: -5.015433311462402

Token 48: ' ''
' (ID: 25366)
  Prédit: ''''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '''' → logprob: -0.003238555509597063
    2. '""' → logprob: -5.753238677978516
    3. ' ''' → logprob: -10.128238677978516
    4. ''' → logprob: -11.003238677978516
    5. '"' → logprob: -12.753238677978516
    6. '''
' → logprob: -14.378238677978516
    7. ''''' → logprob: -14.753238677978516
    8. ' ""' → logprob: -15.628238677978516
    9. '''''' → logprob: -16.378238677978516
    10. '[]' → logprob: -16.878238677978516

Token 49: '   ' (ID: 271)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.12703509628772736
    2. ' for' → logprob: -2.127035140991211
    3. ' ' → logprob: -9.252035140991211
    4. '<|end|>' → logprob: -12.627035140991211
    5. '   ' → logprob: -13.127035140991211
    6. 'i' → logprob: -13.502035140991211
    7. '	for' → logprob: -13.502035140991211
    8. 'For' → logprob: -14.377035140991211
    9. ' 
' → logprob: -14.752035140991211
    10. ' i' → logprob: -14.877035140991211

Token 50: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.000712074339389801
    2. ' for' → logprob: -7.250711917877197
    3. 'i' → logprob: -14.000712394714355
    4. '   ' → logprob: -14.125712394714355
    5. ' ' → logprob: -15.250712394714355
    6. '	for' → logprob: -15.500712394714355
    7. '<|end|>' → logprob: -17.00071144104004
    8. 'f' → logprob: -17.87571144104004
    9. 'For' → logprob: -17.87571144104004
    10. '  ' → logprob: -18.50071144104004

Token 51: ' ch' (ID: 549)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.15021410584449768
    2. 'ch' → logprob: -2.650214195251465
    3. ' c' → logprob: -3.150214195251465
    4. 'char' → logprob: -4.150214195251465
    5. ' char' → logprob: -5.275214195251465
    6. ' ch' → logprob: -5.275214195251465
    7. 'i' → logprob: -13.775214195251465
    8. ' i' → logprob: -15.150214195251465
    9. '	c' → logprob: -15.525214195251465
    10. '	ch' → logprob: -15.525214195251465

Token 52: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0207720585167408
    2. 'in' → logprob: -3.8957719802856445
    3. ' ' → logprob: -8.770771980285645
    4. '	in' → logprob: -10.520771980285645
    5. 'i' → logprob: -11.520771980285645
    6. '<|end|>' → logprob: -11.520771980285645
    7. '  ' → logprob: -12.020771980285645
    8. 's' → logprob: -12.270771980285645
    9. 'n' → logprob: -12.895771980285645
    10. 'ine' → logprob: -12.895771980285645

Token 53: ' expr' (ID: 30206)
  Prédit: 'expr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'expr' → logprob: -0.5760268568992615
    2. ' expr' → logprob: -0.8260268568992615
    3. '(expr' → logprob: -9.576026916503906
    4. ' ' → logprob: -12.201026916503906
    5. 'express' → logprob: -12.701026916503906
    6. '_expr' → logprob: -13.201026916503906
    7. 's' → logprob: -13.326026916503906
    8. '   ' → logprob: -13.701026916503906
    9. ' expression' → logprob: -14.013526916503906
    10. 'expression' → logprob: -14.076026916503906

Token 54: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0002571673830971122
    2. ' :' → logprob: -8.87525749206543
    3. ':
' → logprob: -9.75025749206543
    4. '):' → logprob: -10.37525749206543
    5. ':**' → logprob: -11.62525749206543
    6. '<|end|>' → logprob: -12.00025749206543
    7. ' in' → logprob: -12.25025749206543
    8. '<|end|>' → logprob: -12.75025749206543
    9. '>:' → logprob: -13.00025749206543
    10. '):
' → logprob: -14.75025749206543

Token 55: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.4857623279094696
    2. '    ' → logprob: -1.235762357711792
    3. ' if' → logprob: -2.610762357711792
    4. '   ' → logprob: -4.610762119293213
    5. '<|end|>' → logprob: -5.110762119293213
    6. '        ' → logprob: -6.360762119293213
    7. ' ' → logprob: -6.985762119293213
    8. '<|end|>' → logprob: -7.360762119293213
    9. 'if' → logprob: -7.860762119293213
    10. '  ' → logprob: -8.860762596130371

Token 56: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.06336525827646255
    2. 'if' (adapté à ' if') → logprob: -2.8133652210235596
    3. '<|end|>' → logprob: -6.688365459442139
    4. 'If' → logprob: -9.31336498260498
    5. '       ' → logprob: -11.06336498260498
    6. '<|end|>' → logprob: -11.31336498260498
    7. '    ' → logprob: -11.56336498260498
    8. ' If' → logprob: -11.56336498260498
    9. '        ' → logprob: -12.31336498260498
    10. '   ' → logprob: -13.31336498260498

Token 57: ' ch' (ID: 549)
  Prédit: 'ch'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ch' → logprob: -0.6931518912315369
    2. ' ch' → logprob: -0.6931518912315369
    3. '(ch' → logprob: -12.318151473999023
    4. '	ch' → logprob: -15.818151473999023
    5. ' ' → logprob: -17.568151473999023
    6. '[ch' → logprob: -17.818151473999023
    7. 'isdigit' → logprob: -18.818151473999023
    8. ' (' → logprob: -19.318151473999023
    9. 'c' → logprob: -20.568151473999023
    10. ',ch' → logprob: -20.568151473999023

Token 58: '.is' (ID: 3109)
  Prédit: '.is'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.is' → logprob: -0.000895024451892823
    2. 'isdigit' → logprob: -7.375895023345947
    3. ' in' → logprob: -8.625895500183105
    4. '.' → logprob: -9.500895500183105
    5. 'is' → logprob: -11.500895500183105
    6. 'in' → logprob: -12.500895500183105
    7. '>=' → logprob: -16.12589454650879
    8. '[' → logprob: -16.62589454650879
    9. ' .' → logprob: -16.87589454650879
    10. 'isal' → logprob: -17.25089454650879

Token 59: 'digit' (ID: 78327)
  Prédit: 'digit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'digit' → logprob: -5.512236498361744e-07
    2. 'decimal' → logprob: -14.500000953674316
    3. 'numeric' → logprob: -17.25
    4. 'd' → logprob: -19.125
    5. '_digit' → logprob: -19.75
    6. 'al' → logprob: -20.0
    7. ' digit' → logprob: -20.625
    8. 'dig' → logprob: -20.875
    9. 'digital' → logprob: -21.5
    10. '-digit' → logprob: -21.875

Token 60: '():
' (ID: 8595)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.023353558033704758
    2. '():' → logprob: -3.7733535766601562
    3. '()>' → logprob: -10.023353576660156
    4. '():
' → logprob: -10.523353576660156
    5. 'or' → logprob: -11.398353576660156
    6. '(' → logprob: -11.523353576660156
    7. ' or' → logprob: -12.523353576660156
    8. '()==' → logprob: -13.023353576660156
    9. '()">' → logprob: -13.023353576660156
    10. '<|end|>' → logprob: -13.273353576660156

Token 61: '           ' (ID: 352)
  Prédit: ' or'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.024132251739501953
    2. '       ' → logprob: -3.899132251739502
    3. ':' → logprob: -6.774132251739502
    4. '           ' → logprob: -7.149132251739502
    5. '<|end|>' → logprob: -7.149132251739502
    6. 'or' → logprob: -8.274131774902344
    7. ' num' → logprob: -8.774131774902344
    8. 'num' → logprob: -9.149131774902344
    9. ',' → logprob: -9.649131774902344
    10. '<|end|>' → logprob: -9.774131774902344

Token 62: ' num' (ID: 2269)
  Prédit: 'num'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'num' (adapté à ' num') → logprob: -0.04873542860150337
    2. ' num' → logprob: -3.0487353801727295
    3. '	num' → logprob: -9.548735618591309
    4. '           ' → logprob: -10.048735618591309
    5. '   ' → logprob: -12.048735618591309
    6. '<num' → logprob: -12.173735618591309
    7. '       ' → logprob: -12.548735618591309
    8. '$num' → logprob: -12.548735618591309
    9. ',num' → logprob: -12.673735618591309
    10. '               ' → logprob: -12.923735618591309

Token 63: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.004147491883486509
    2. ' +=' → logprob: -5.504147529602051
    3. ']+=' → logprob: -10.37914752960205
    4. '+' → logprob: -10.50414752960205
    5. '+='' → logprob: -11.75414752960205
    6. '+="' → logprob: -13.50414752960205
    7. '+=(' → logprob: -13.62914752960205
    8. '=' → logprob: -16.504146575927734
    9. '.append' → logprob: -16.879146575927734
    10. ' +' → logprob: -17.754146575927734

Token 64: ' ch' (ID: 549)
  Prédit: 'ch'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ch' → logprob: -0.006715370807796717
    2. ' ch' → logprob: -5.006715297698975
    3. '	ch' → logprob: -19.381715774536133
    4. 'c' → logprob: -19.631715774536133
    5. '(ch' → logprob: -20.756715774536133
    6. ' ' → logprob: -21.006715774536133
    7. '[ch' → logprob: -21.506715774536133
    8. 'token' → logprob: -22.006715774536133
    9. '```' → logprob: -23.256715774536133
    10. '_ch' → logprob: -23.256715774536133

Token 65: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.24571342766284943
    2. '<|end|>' → logprob: -1.995713472366333
    3. 'else' → logprob: -3.245713472366333
    4. ' else' → logprob: -3.745713472366333
    5. 'elif' → logprob: -4.120713233947754
    6. '<|end|>' → logprob: -6.745713233947754
    7. ' elif' → logprob: -6.870713233947754
    8. '
' → logprob: -8.120713233947754
    9. '   ' → logprob: -8.995713233947754
    10. 'continue' → logprob: -8.995713233947754

Token 66: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.010911992751061916
    2. 'elif' → logprob: -5.51091194152832
    3. '<|end|>' → logprob: -5.76091194152832
    4. ' else' → logprob: -6.38591194152832
    5. 'else' → logprob: -6.51091194152832
    6. ' elif' → logprob: -7.88591194152832
    7. '<|end|>' → logprob: -10.01091194152832
    8. '   ' → logprob: -11.26091194152832
    9. '...' → logprob: -11.88591194152832
    10. '```' → logprob: -12.01091194152832

Token 67: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.409929484128952
    2. 'else' (adapté à ' else') → logprob: -2.1599295139312744
    3. '       ' → logprob: -2.2849295139312744
    4. 'elif' → logprob: -2.6599295139312744
    5. ' elif' → logprob: -3.0349295139312744
    6. '<|end|>' → logprob: -7.534929275512695
    7. '	elif' → logprob: -8.034929275512695
    8. '	else' → logprob: -9.159929275512695
    9. '   ' → logprob: -9.534929275512695
    10. '<|end|>' → logprob: -10.909929275512695

Token 68: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.005980585236102343
    2. ':
' → logprob: -5.255980491638184
    3. '<|end|>' → logprob: -7.755980491638184
    4. ' :' → logprob: -8.630980491638184
    5. '):' → logprob: -10.255980491638184
    6. '<|end|>' → logprob: -10.255980491638184
    7. ',' → logprob: -11.380980491638184
    8. '       ' → logprob: -11.505980491638184
    9. '):
' → logprob: -11.630980491638184
    10. ' :
' → logprob: -11.630980491638184

Token 69: '           ' (ID: 352)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.6410400867462158
    2. '       ' → logprob: -1.2660400867462158
    3. '           ' → logprob: -2.141040086746216
    4. '<|end|>' → logprob: -3.516040086746216
    5. ' ' → logprob: -4.016039848327637
    6. '   ' → logprob: -4.641039848327637
    7. ' tokens' → logprob: -5.516039848327637
    8. '<|end|>' → logprob: -6.016039848327637
    9. 'if' → logprob: -6.141039848327637
    10. 'tokens' → logprob: -6.516039848327637

Token 70: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.10508105158805847
    2. 'if' (adapté à ' if') → logprob: -2.855081081390381
    3. 'tokens' → logprob: -3.730081081390381
    4. ' tokens' → logprob: -4.480081081390381
    5. '       ' → logprob: -5.855081081390381
    6. '           ' → logprob: -5.855081081390381
    7. '   ' → logprob: -6.855081081390381
    8. '```' → logprob: -9.855080604553223
    9. ' ' → logprob: -11.730080604553223
    10. '	if' → logprob: -11.855080604553223

Token 71: ' num' (ID: 2269)
  Prédit: ' num'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' num' → logprob: -0.04858759790658951
    2. 'num' → logprob: -3.0485875606536865
    3. '	num' → logprob: -16.423587799072266
    4. ' ' → logprob: -16.673587799072266
    5. ' len' → logprob: -16.673587799072266
    6. '(num' → logprob: -18.298587799072266
    7. 'n' → logprob: -18.548587799072266
    8. 'len' → logprob: -18.548587799072266
    9. '$num' → logprob: -18.548587799072266
    10. ' ' → logprob: -18.673587799072266

Token 72: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.19840045273303986
    2. '!=' → logprob: -2.0734004974365234
    3. ' !=' → logprob: -3.4484004974365234
    4. '>' → logprob: -4.448400497436523
    5. ')' → logprob: -5.948400497436523
    6. '!='' → logprob: -6.198400497436523
    7. '!==' → logprob: -6.323400497436523
    8. '<|end|>' → logprob: -7.198400497436523
    9. '<|end|>' → logprob: -7.448400497436523
    10. ':
' → logprob: -7.448400497436523

Token 73: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.5583888292312622
    2. 'tokens' → logprob: -1.1833888292312622
    3. ' tokens' → logprob: -2.1833887100219727
    4. '(tokens' → logprob: -5.683388710021973
    5. '_tokens' → logprob: -5.808388710021973
    6. '.tokens' → logprob: -6.308388710021973
    7. '           ' → logprob: -8.183388710021973
    8. 'Tokens' → logprob: -8.433388710021973
    9. '<|end|>' → logprob: -8.808388710021973
    10. '<|end|>' → logprob: -10.433388710021973

Token 74: ' tokens' (ID: 20290)
  Prédit: ' tokens'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' tokens' → logprob: -0.3542631268501282
    2. 'tokens' (adapté à ' tokens') → logprob: -1.2292630672454834
    3. '           ' → logprob: -5.3542633056640625
    4. '               ' → logprob: -7.4792633056640625
    5. '.tokens' → logprob: -8.354263305664062
    6. '(tokens' → logprob: -8.729263305664062
    7. '_tokens' → logprob: -9.354263305664062
    8. 'Tokens' → logprob: -11.979263305664062
    9. 'okens' → logprob: -12.354263305664062
    10. '   ' → logprob: -12.479263305664062

Token 75: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.0031871015671640635
    2. '.' → logprob: -5.75318717956543
    3. 'append' → logprob: -11.75318717956543
    4. '.Append' → logprob: -14.87818717956543
    5. '.app' → logprob: -15.00318717956543
    6. 'Append' → logprob: -15.00318717956543
    7. '_append' → logprob: -15.25318717956543
    8. ' .' → logprob: -15.62818717956543
    9. '.extend' → logprob: -16.75318717956543
    10. '.ap' → logprob: -17.00318717956543

Token 76: '(int' (ID: 2742)
  Prédit: '(num'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(num' → logprob: -0.0008253490086644888
    2. 'num' → logprob: -7.50082540512085
    3. '(' → logprob: -8.750824928283691
    4. '(int' → logprob: -9.125824928283691
    5. ' num' → logprob: -12.500824928283691
    6. ' (' → logprob: -14.125824928283691
    7. '('' → logprob: -15.625824928283691
    8. ',num' → logprob: -15.750824928283691
    9. '	num' → logprob: -16.250825881958008
    10. '(
' → logprob: -16.250825881958008

Token 77: '(num' (ID: 15828)
  Prédit: '(num'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(num' → logprob: -0.0040987045504152775
    2. '(' → logprob: -5.504098892211914
    3. ' (' → logprob: -10.879098892211914
    4. 'num' → logprob: -14.879098892211914
    5. ')' → logprob: -15.379098892211914
    6. '(token' → logprob: -15.504098892211914
    7. '(
' → logprob: -15.629098892211914
    8. ' ' → logprob: -15.754098892211914
    9. '(nums' → logprob: -15.879098892211914
    10. '(n' → logprob: -17.129098892211914

Token 78: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.062104370445013046
    2. ')' → logprob: -2.8121044635772705
    3. '))
' → logprob: -9.062104225158691
    4. ')))' → logprob: -11.562104225158691
    5. ' ))' → logprob: -12.812104225158691
    6. '),' → logprob: -12.812104225158691
    7. ')
' → logprob: -13.062104225158691
    8. '))
' → logprob: -13.437104225158691
    9. '));' → logprob: -14.562104225158691
    10. '))

' → logprob: -14.937104225158691

Token 79: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.5048493146896362
    2. '           ' → logprob: -1.0048493146896362
    3. 'num' → logprob: -4.129849433898926
    4. ' num' → logprob: -4.879849433898926
    5. '<|end|>' → logprob: -6.129849433898926
    6. '            ' → logprob: -7.254849433898926
    7. ' ' → logprob: -7.754849433898926
    8. '                   ' → logprob: -7.754849433898926
    9. '       ' → logprob: -7.754849433898926
    10. 'tokens' → logprob: -8.004849433898926

Token 80: ' num' (ID: 2269)
  Prédit: 'num'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'num' (adapté à ' num') → logprob: -0.4741845428943634
    2. ' num' → logprob: -0.974184513092041
    3. '	num' → logprob: -9.4741849899292
    4. '           ' → logprob: -11.5991849899292
    5. ' ' → logprob: -12.2241849899292
    6. '_num' → logprob: -13.0991849899292
    7. '               ' → logprob: -13.2241849899292
    8. ',num' → logprob: -13.2241849899292
    9. '            ' → logprob: -13.4741849899292
    10. '   ' → logprob: -13.8491849899292

Token 81: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.0069181956350803375
    2. ' =' → logprob: -5.006918430328369
    3. '=''' → logprob: -8.506917953491211
    4. '=""' → logprob: -14.131917953491211
    5. '＝' → logprob: -17.38191795349121
    6. '=}' → logprob: -18.38191795349121
    7. '=

' → logprob: -19.25691795349121
    8. '''' → logprob: -19.38191795349121
    9. '='' → logprob: -19.50691795349121
    10. '=[]' → logprob: -19.50691795349121

Token 82: ' ''
' (ID: 25366)
  Prédit: ''''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '''' → logprob: -3.5120287066092715e-05
    2. ' ''' → logprob: -10.750035285949707
    3. '""' → logprob: -11.500035285949707
    4. '''
' → logprob: -12.750035285949707
    5. ''' → logprob: -14.500035285949707
    6. ''',' → logprob: -17.75003433227539
    7. '"' → logprob: -18.87503433227539
    8. '=''' → logprob: -19.12503433227539
    9. '''.' → logprob: -19.25003433227539
    10. ''''' → logprob: -19.62503433227539

Token 83: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.3741380274295807
    2. 'tokens' → logprob: -1.3741379976272583
    3. ' tokens' → logprob: -2.874138116836548
    4. '       ' → logprob: -6.249137878417969
    5. '.tokens' → logprob: -8.499137878417969
    6. '   ' → logprob: -9.124137878417969
    7. '(tokens' → logprob: -9.124137878417969
    8. '```' → logprob: -9.124137878417969
    9. '_tokens' → logprob: -9.374137878417969
    10. '               ' → logprob: -10.874137878417969

Token 84: ' tokens' (ID: 20290)
  Prédit: 'tokens'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tokens' (adapté à ' tokens') → logprob: -0.002275031292811036
    2. ' tokens' → logprob: -6.127274990081787
    3. '           ' → logprob: -9.752275466918945
    4. 'if' → logprob: -11.627275466918945
    5. '   ' → logprob: -12.002275466918945
    6. '.tokens' → logprob: -12.127275466918945
    7. '       ' → logprob: -12.252275466918945
    8. ' if' → logprob: -13.252275466918945
    9. '(tokens' → logprob: -13.252275466918945
    10. '_tokens' → logprob: -14.127275466918945

Token 85: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.01114355307072401
    2. '.' → logprob: -4.511143684387207
    3. 'append' → logprob: -9.386143684387207
    4. '.app' → logprob: -12.011143684387207
    5. ' .' → logprob: -13.511143684387207
    6. '.ap' → logprob: -13.761143684387207
    7. '.Append' → logprob: -13.761143684387207
    8. ').' → logprob: -14.386143684387207
    9. '.extend' → logprob: -14.636143684387207
    10. '.setdefault' → logprob: -15.511143684387207

Token 86: '(ch' (ID: 15574)
  Prédit: '(ch'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ch' → logprob: -0.005234356038272381
    2. 'ch' → logprob: -5.255234241485596
    3. '(' → logprob: -15.005234718322754
    4. ' ch' → logprob: -15.880234718322754
    5. '	ch' → logprob: -17.130233764648438
    6. '[ch' → logprob: -17.630233764648438
    7. ''ch' → logprob: -19.380233764648438
    8. ',ch' → logprob: -19.380233764648438
    9. '(
' → logprob: -20.130233764648438
    10. '/ch' → logprob: -20.505233764648438

Token 87: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.650518920039758e-06
    2. ' )' → logprob: -12.875003814697266
    3. ')
' → logprob: -14.875003814697266
    4. '))' → logprob: -15.375003814697266
    5. ')return' → logprob: -16.625003814697266
    6. '<|end|>' → logprob: -16.750003814697266
    7. ']' → logprob: -16.875003814697266
    8. '`)' → logprob: -17.000003814697266
    9. '')' → logprob: -17.125003814697266
    10. '[' → logprob: -17.625003814697266

Token 88: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.24834167957305908
    2. '    
' → logprob: -2.3733415603637695
    3. '
' → logprob: -3.2483415603637695
    4. ' 
' → logprob: -3.6233415603637695
    5. '  
' → logprob: -3.8733415603637695
    6. ' ' → logprob: -4.3733415603637695
    7. 'if' → logprob: -5.1233415603637695
    8. '<|end|>' → logprob: -5.2483415603637695
    9. '[' → logprob: -5.7483415603637695
    10. '```' → logprob: -5.8733415603637695

Token 89: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.6989299058914185
    2. '```' → logprob: -1.5739299058914185
    3. '   ' → logprob: -2.448929786682129
    4. '
' → logprob: -2.823929786682129
    5. '    
' → logprob: -2.948929786682129
    6. '  
' → logprob: -3.448929786682129
    7. ' ' → logprob: -3.698929786682129
    8. ' if' → logprob: -4.823929786682129
    9. '#' → logprob: -5.073929786682129
    10. '<|end|>' → logprob: -5.573929786682129

Token 90: ' num' (ID: 2269)
  Prédit: ' num'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' num' → logprob: -0.0019286326132714748
    2. 'num' → logprob: -6.251928806304932
    3. '	num' → logprob: -18.126928329467773
    4. ' ' → logprob: -19.001928329467773
    5. '(num' → logprob: -20.376928329467773
    6. ':num' → logprob: -21.501928329467773
    7. 'n' → logprob: -21.626928329467773
    8. ' ' → logprob: -22.001928329467773
    9. '<num' → logprob: -22.001928329467773
    10. '$num' → logprob: -22.126928329467773

Token 91: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0003920655872207135
    2. ':
' → logprob: -7.875391960144043
    3. '.append' → logprob: -12.875391960144043
    4. '   ' → logprob: -13.375391960144043
    5. '=' → logprob: -13.500391960144043
    6. '):' → logprob: -13.875391960144043
    7. '>' → logprob: -14.000391960144043
    8. ')' → logprob: -14.125391960144043
    9. '       ' → logprob: -14.125391960144043
    10. '!=' → logprob: -14.875391960144043

Token 92: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5460629463195801
    2. ' tokens' → logprob: -1.29606294631958
    3. 'tokens' → logprob: -1.92106294631958
    4. '.tokens' → logprob: -8.296062469482422
    5. '_tokens' → logprob: -8.796062469482422
    6. '(tokens' → logprob: -8.921062469482422
    7. '   ' → logprob: -9.296062469482422
    8. '```' → logprob: -10.171062469482422
    9. 'okens' → logprob: -10.671062469482422
    10. 'Tokens' → logprob: -11.296062469482422

Token 93: ' tokens' (ID: 20290)
  Prédit: 'tokens'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tokens' (adapté à ' tokens') → logprob: -0.391541063785553
    2. ' tokens' → logprob: -1.1415410041809082
    3. '       ' → logprob: -5.391541004180908
    4. '   ' → logprob: -9.766541481018066
    5. '.tokens' → logprob: -11.016541481018066
    6. '           ' → logprob: -11.141541481018066
    7. '(tokens' → logprob: -11.891541481018066
    8. 'okens' → logprob: -12.891541481018066
    9. '_tokens' → logprob: -12.891541481018066
    10. 'Tokens' → logprob: -13.391541481018066

Token 94: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.001662324066273868
    2. 'append' → logprob: -6.876662254333496
    3. '.' → logprob: -7.376662254333496
    4. 'Append' → logprob: -14.001662254333496
    5. '_append' → logprob: -14.126662254333496
    6. 'app' → logprob: -14.751662254333496
    7. '=' → logprob: -15.126662254333496
    8. '.app' → logprob: -15.251662254333496
    9. '.Append' → logprob: -15.251662254333496
    10. '+=' → logprob: -15.376662254333496

Token 95: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0003365350130479783
    2. '(' → logprob: -8.000336647033691
    3. 'int' → logprob: -15.000336647033691
    4. ' (' → logprob: -15.125336647033691
    5. '(in' → logprob: -15.125336647033691
    6. '<int' → logprob: -15.750336647033691
    7. '(num' → logprob: -17.000335693359375
    8. '(i' → logprob: -17.500335693359375
    9. '(
' → logprob: -17.500335693359375
    10. ' int' → logprob: -18.375335693359375

Token 96: '(num' (ID: 15828)
  Prédit: '(num'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(num' → logprob: -8.895480277715251e-06
    2. '(' → logprob: -12.125008583068848
    3. ' (' → logprob: -12.625008583068848
    4. 'num' → logprob: -17.000009536743164
    5. '(nums' → logprob: -17.375009536743164
    6. ',num' → logprob: -17.500009536743164
    7. ')' → logprob: -17.750009536743164
    8. '(n' → logprob: -18.125009536743164
    9. '(numero' → logprob: -18.750009536743164
    10. '[num' → logprob: -19.375009536743164

Token 97: '))

' (ID: 9746)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.3856492842023727e-06
    2. ')
' → logprob: -14.000000953674316
    3. '))' → logprob: -15.000000953674316
    4. ' )' → logprob: -16.500001907348633
    5. ')`' → logprob: -17.000001907348633
    6. ')return' → logprob: -17.625001907348633
    7. ')

' → logprob: -18.500001907348633
    8. '   ' → logprob: -19.250001907348633
    9. '`)' → logprob: -19.375001907348633
    10. '')' → logprob: -19.500001907348633

Token 98: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6392560601234436
    2. ' ' → logprob: -1.2642560005187988
    3. '    
' → logprob: -2.264256000518799
    4. '
' → logprob: -3.889256000518799
    5. '#' → logprob: -4.264256000518799
    6. ' 
' → logprob: -4.514256000518799
    7. ')' → logprob: -4.764256000518799
    8. '  
' → logprob: -5.014256000518799
    9. '<|end|>' → logprob: -5.389256000518799
    10. '    ' → logprob: -5.514256000518799

Token 99: ' #' (ID: 1069)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.4185349643230438
    2. '#' (adapté à ' #') → logprob: -1.5435349941253662
    3. 'stack' → logprob: -2.668534994125366
    4. 'preced' → logprob: -3.293534994125366
    5. 'return' → logprob: -4.918534755706787
    6. '   ' → logprob: -4.918534755706787
    7. 'ops' → logprob: -5.543534755706787
    8. 'op' → logprob: -6.918534755706787
    9. 'result' → logprob: -7.168534755706787
    10. 'operators' → logprob: -8.043535232543945

Token 100: ' Sh' (ID: 1955)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.23880313336849213
    2. '#' → logprob: -2.4888031482696533
    3. ' def' → logprob: -2.9888031482696533
    4. 'Define' → logprob: -3.3638031482696533
    5. 'class' → logprob: -4.488802909851074
    6. 'preced' → logprob: -4.613802909851074
    7. 'return' → logprob: -4.988802909851074
    8. ' precedence' → logprob: -5.363802909851074
    9. ' Define' → logprob: -5.738802909851074
    10. 'result' → logprob: -5.863802909851074

Token 101: 'unting' (ID: 28940)
  Prédit: 'unting'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'unting' → logprob: -0.010455786250531673
    2. 'unt' → logprob: -4.63545560836792
    3. 'a' → logprob: -8.385456085205078
    4. 'un' → logprob: -8.510456085205078
    5. '#' → logprob: -9.260456085205078
    6. 'unted' → logprob: -10.885456085205078
    7. '   ' → logprob: -10.885456085205078
    8. '```' → logprob: -11.010456085205078
    9. 'unts' → logprob: -11.010456085205078
    10. 'o' → logprob: -11.135456085205078

Token 102: ' Yard' (ID: 46330)
  Prédit: '-yard'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-yard' → logprob: -0.12008408457040787
    2. ' Yard' → logprob: -2.370084047317505
    3. 'yard' → logprob: -4.495084285736084
    4. 'Y' → logprob: -5.370084285736084
    5. ' yard' → logprob: -6.245084285736084
    6. '<|end|>' → logprob: -6.995084285736084
    7. '_y' → logprob: -7.870084285736084
    8. '```' → logprob: -8.120083808898926
    9. '   ' → logprob: -9.120083808898926
    10. '-' → logprob: -10.120083808898926

Token 103: ' algorithm' (ID: 22184)
  Prédit: ' algorithm'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' algorithm' → logprob: -0.43759283423423767
    2. '_algorithm' → logprob: -1.93759286403656
    3. 'algorithm' → logprob: -2.4375927448272705
    4. '<|end|>' → logprob: -2.8125927448272705
    5. 'Algorithm' → logprob: -4.31259298324585
    6. '   ' → logprob: -4.31259298324585
    7. 'def' → logprob: -4.56259298324585
    8. ' Algorithm' → logprob: -4.68759298324585
    9. ' =' → logprob: -5.06259298324585
    10. ' ' → logprob: -5.68759298324585

Token 104: ' to' (ID: 316)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6478453278541565
    2. '    
' → logprob: -1.5228452682495117
    3. '
' → logprob: -2.1478452682495117
    4. '<|end|>' → logprob: -2.5228452682495117
    5. 'def' → logprob: -3.6478452682495117
    6. '  
' → logprob: -5.147845268249512
    7. ' 
' → logprob: -5.147845268249512
    8. '    ' → logprob: -5.647845268249512
    9. ' ' → logprob: -5.647845268249512
    10. ' operator' → logprob: -6.397845268249512

Token 105: ' convert' (ID: 8452)
  Prédit: ' convert'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' convert' → logprob: -0.47432103753089905
    2. 'convert' → logprob: -0.9743210077285767
    3. 'con' → logprob: -9.724321365356445
    4. 'transform' → logprob: -10.099321365356445
    5. 'implement' → logprob: -10.599321365356445
    6. ' output' → logprob: -10.724321365356445
    7. ' implement' → logprob: -10.849321365356445
    8. '_convert' → logprob: -11.224321365356445
    9. ' handle' → logprob: -11.849321365356445
    10. 'parse' → logprob: -11.849321365356445

Token 106: ' inf' (ID: 5603)
  Prédit: ' to'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' to' → logprob: -0.9220777153968811
    2. ' tokens' → logprob: -1.2970776557922363
    3. 'tokens' → logprob: -2.0470776557922363
    4. ' the' → logprob: -2.5470776557922363
    5. ' inf' → logprob: -2.7970776557922363
    6. 'to' → logprob: -3.2970776557922363
    7. 'in' → logprob: -4.547077655792236
    8. '(tokens' → logprob: -5.422077655792236
    9. '_tokens' → logprob: -5.922077655792236
    10. 'the' → logprob: -6.172077655792236

Token 107: 'ix' (ID: 1128)
  Prédit: 'ix'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ix' → logprob: -0.00017112065688706934
    2. 'ixed' → logprob: -9.500170707702637
    3. '```' → logprob: -10.375170707702637
    4. '   ' → logprob: -10.875170707702637
    5. 'x' → logprob: -11.500170707702637
    6. 'To' → logprob: -12.000170707702637
    7. 'fix' → logprob: -12.125170707702637
    8. 'i' → logprob: -12.625170707702637
    9. '``' → logprob: -12.625170707702637
    10. '_to' → logprob: -12.875170707702637

Token 108: ' to' (ID: 316)
  Prédit: 'to'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'to' → logprob: -0.3871749937534332
    2. ' to' → logprob: -1.1371749639511108
    3. 'expression' → logprob: -9.137174606323242
    4. ' expression' → logprob: -10.137174606323242
    5. 'notation' → logprob: -10.137174606323242
    6. '<|end|>' → logprob: -10.387174606323242
    7. '_to' → logprob: -10.512174606323242
    8. 'tokens' → logprob: -10.762174606323242
    9. ' notation' → logprob: -11.387174606323242
    10. ' ' → logprob: -11.637174606323242

Token 109: ' postfix' (ID: 160557)
  Prédit: ' postfix'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' postfix' → logprob: -0.16045036911964417
    2. 'post' → logprob: -1.9104503393173218
    3. ' post' → logprob: -8.535449981689453
    4. '_post' → logprob: -11.160449981689453
    5. 'r' → logprob: -11.535449981689453
    6. '-post' → logprob: -13.535449981689453
    7. 'R' → logprob: -13.660449981689453
    8. 'Post' → logprob: -14.160449981689453
    9. '```' → logprob: -14.660449981689453
    10. ' ' → logprob: -14.785449981689453

Token 110: ' (' (ID: 350)
  Prédit: '    
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '    
' → logprob: -0.5093135237693787
    2. '
' → logprob: -1.5093135833740234
    3. '   ' → logprob: -2.0093135833740234
    4. 'def' → logprob: -4.009313583374023
    5. '  
' → logprob: -5.259313583374023
    6. ' 
' → logprob: -5.759313583374023
    7. 'stack' → logprob: -5.759313583374023
    8. 'output' → logprob: -6.384313583374023
    9. 'preced' → logprob: -6.384313583374023
    10. '```' → logprob: -6.384313583374023

Token 111: 'R' (ID: 49)
  Prédit: 'tokens'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tokens' → logprob: -0.9268971681594849
    2. ')' → logprob: -1.5518971681594849
    3. '   ' → logprob: -1.9268971681594849
    4. 'output' → logprob: -2.0518970489501953
    5. 'expression' → logprob: -3.0518970489501953
    6. 'notation' → logprob: -3.5518970489501953
    7. ' notation' → logprob: -4.801897048950195
    8. 'expr' → logprob: -4.801897048950195
    9. ' tokens' → logprob: -5.176897048950195
    10. 'def' → logprob: -5.551897048950195

Token 112: 'PN' (ID: 14513)
  Prédit: 'PN'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'PN' → logprob: -4.084206375409849e-05
    2. 'P' → logprob: -10.250041007995605
    3. 'pn' → logprob: -12.750041007995605
    4. 'PE' → logprob: -13.875041007995605
    5. ')' → logprob: -14.250041007995605
    6. 'ever' → logprob: -15.875041007995605
    7. '"' → logprob: -16.62504005432129
    8. '_P' → logprob: -16.62504005432129
    9. '\' → logprob: -17.00004005432129
    10. '**' → logprob: -17.25004005432129

Token 113: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.02400866337120533
    2. '   ' → logprob: -4.149008750915527
    3. '):' → logprob: -5.274008750915527
    4. ')
' → logprob: -6.399008750915527
    5. ':' → logprob: -7.899008750915527
    6. '):
' → logprob: -8.274008750915527
    7. ' ' → logprob: -8.524008750915527
    8. ' )' → logprob: -9.399008750915527
    9. '    
' → logprob: -10.149008750915527
    10. '    ' → logprob: -10.649008750915527

Token 114: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.36146336793899536
    2. '   ' → logprob: -1.8614633083343506
    3. '    
' → logprob: -2.1114633083343506
    4. '  
' → logprob: -4.73646354675293
    5. 'preced' → logprob: -5.23646354675293
    6. ' 
' → logprob: -5.61146354675293
    7. 'def' → logprob: -6.23646354675293
    8. 'operators' → logprob: -6.61146354675293
    9. '<|end|>' → logprob: -6.73646354675293
    10. 'operator' → logprob: -6.73646354675293

Token 115: ' precedence' (ID: 120000)
  Prédit: 'preced'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'preced' → logprob: -0.023066561669111252
    2. ' precedence' → logprob: -3.898066520690918
    3. '   ' → logprob: -7.398066520690918
    4. '
' → logprob: -7.523066520690918
    5. 'def' → logprob: -7.898066520690918
    6. 'operators' → logprob: -8.273066520690918
    7. ' preced' → logprob: -8.398066520690918
    8. 'prec' → logprob: -8.523066520690918
    9. ' operators' → logprob: -9.148066520690918
    10. '    
' → logprob: -9.148066520690918

Token 116: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.00023154958034865558
    2. '=' → logprob: -8.375231742858887
    3. 's' → logprob: -14.500231742858887
    4. ' ' → logprob: -15.500231742858887
    5. ' ={' → logprob: -15.875231742858887
    6. '={'' → logprob: -16.50023078918457
    7. '[' → logprob: -17.87523078918457
    8. '  ' → logprob: -18.50023078918457
    9. ' ' → logprob: -18.87523078918457
    10. '   ' → logprob: -18.87523078918457

Token 117: ' {'' (ID: 11881)
  Prédit: '{''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '{'' → logprob: -0.028288306668400764
    2. ' {'' → logprob: -4.2782883644104
    3. '{' → logprob: -4.5282883644104
    4. '{
' → logprob: -5.9032883644104
    5. '{"' → logprob: -7.6532883644104
    6. ' {' → logprob: -11.528287887573242
    7. ' {
' → logprob: -11.778287887573242
    8. '   ' → logprob: -12.778287887573242
    9. ' ' → logprob: -14.653287887573242
    10. ' {"' → logprob: -15.653287887573242

Token 118: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.0016960110515356064
    2. '+'' → logprob: -6.5016961097717285
    3. '*' → logprob: -8.75169563293457
    4. '+',' → logprob: -11.12669563293457
    5. '+')' → logprob: -11.75169563293457
    6. '-' → logprob: -12.37669563293457
    7. '(':' → logprob: -13.62669563293457
    8. '^' → logprob: -13.62669563293457
    9. '+-' → logprob: -13.75169563293457
    10. '+,' → logprob: -13.87669563293457

Token 119: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.002303816145285964
    2. ''' → logprob: -6.627303600311279
    3. '+' → logprob: -7.127303600311279
    4. ' ':' → logprob: -9.502304077148438
    5. '':'' → logprob: -10.127304077148438
    6. ':' → logprob: -10.627304077148438
    7. '*' → logprob: -11.127304077148438
    8. ''+' → logprob: -11.627304077148438
    9. '-' → logprob: -12.002304077148438
    10. ''*' → logprob: -13.252304077148438

Token 120: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00030805266578681767
    2. ' ' → logprob: -8.1253080368042
    3. '2' → logprob: -11.6253080368042
    4. '   ' → logprob: -13.3753080368042
    5. ''+' → logprob: -14.6253080368042
    6. ''' → logprob: -14.7503080368042
    7. '  ' → logprob: -15.1253080368042
    8. '    ' → logprob: -16.500308990478516
    9. '```' → logprob: -16.500308990478516
    10. '	' → logprob: -17.250308990478516

Token 121: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0016461454797536135
    2. ',
' → logprob: -7.251646041870117
    3. ','' → logprob: -7.376646041870117
    4. ' ,' → logprob: -8.126646041870117
    5. '',' → logprob: -12.001646041870117
    6. '   ' → logprob: -12.251646041870117
    7. '','' → logprob: -14.001646041870117
    8. ',
' → logprob: -14.001646041870117
    9. ',

' → logprob: -14.376646041870117
    10. '}' → logprob: -14.751646041870117

Token 122: ' '-' (ID: 17489)
  Prédit: ''-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''-' → logprob: -0.0006002153968438506
    2. ''*' → logprob: -8.37559986114502
    3. ' '-' → logprob: -8.87559986114502
    4. '-' → logprob: -9.12559986114502
    5. '   ' → logprob: -9.50059986114502
    6. ' ' → logprob: -10.62559986114502
    7. ' '-'' → logprob: -11.87559986114502
    8. '"-' → logprob: -13.00059986114502
    9. '	' → logprob: -13.00059986114502
    10. '    ' → logprob: -13.12559986114502

Token 123: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.449802964925766
    2. '1' → logprob: -1.4498029947280884
    3. ':' → logprob: -2.074802875518799
    4. ',' → logprob: -7.699802875518799
    5. '2' → logprob: -7.949802875518799
    6. '',' → logprob: -8.074803352355957
    7. ' ' → logprob: -8.199803352355957
    8. ' :' → logprob: -8.699803352355957
    9. '   ' → logprob: -9.199803352355957
    10. ''' → logprob: -9.449803352355957

Token 124: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00014287306112237275
    2. ' ' → logprob: -8.875143051147461
    3. '2' → logprob: -13.750143051147461
    4. ''' → logprob: -14.750143051147461
    5. '```' → logprob: -14.750143051147461
    6. '   ' → logprob: -15.312643051147461
    7. '  ' → logprob: -16.06264305114746
    8. ',' → logprob: -17.00014305114746
    9. '<|end|>' → logprob: -17.12514305114746
    10. '
' → logprob: -17.12514305114746

Token 125: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.004544049967080355
    2. ','' → logprob: -6.254544258117676
    3. ',
' → logprob: -6.504544258117676
    4. ' ,' → logprob: -6.879544258117676
    5. '',' → logprob: -10.004544258117676
    6. ''*' → logprob: -11.254544258117676
    7. '   ' → logprob: -11.504544258117676
    8. '}' → logprob: -11.629544258117676
    9. ' ,'' → logprob: -13.254544258117676
    10. ',

' → logprob: -13.254544258117676

Token 126: ' '*' (ID: 34958)
  Prédit: ''*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''*' → logprob: -0.0006461950251832604
    2. ' '*' → logprob: -7.375646114349365
    3. '   ' → logprob: -11.500646591186523
    4. '"*' → logprob: -12.125646591186523
    5. '       ' → logprob: -14.000646591186523
    6. ''' → logprob: -14.000646591186523
    7. ' '*'' → logprob: -14.375646591186523
    8. ' ' → logprob: -14.625646591186523
    9. ''s' → logprob: -15.125646591186523
    10. '  ' → logprob: -15.500646591186523

Token 127: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.04896112158894539
    2. ':' → logprob: -3.0489611625671387
    3. ''*' → logprob: -8.17396068572998
    4. ' :' → logprob: -10.79896068572998
    5. ''' → logprob: -11.04896068572998
    6. ' ':' → logprob: -11.29896068572998
    7. '*' → logprob: -11.42396068572998
    8. '2' → logprob: -12.04896068572998
    9. '```' → logprob: -12.04896068572998
    10. '":' → logprob: -12.67396068572998

Token 128: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -2.463036435074173e-05
    2. ' ' → logprob: -10.625024795532227
    3. '```' → logprob: -16.125024795532227
    4. '   ' → logprob: -16.625024795532227
    5. ''' → logprob: -17.375024795532227
    6. ''*' → logprob: -18.000024795532227
    7. '1' → logprob: -19.000024795532227
    8. '  ' → logprob: -19.125024795532227
    9. '           ' → logprob: -19.750024795532227
    10. '
' → logprob: -19.875024795532227

Token 129: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.002907227724790573
    2. ' ,' → logprob: -6.2529072761535645
    3. ','' → logprob: -7.3779072761535645
    4. ',
' → logprob: -8.127906799316406
    5. '',' → logprob: -10.127906799316406
    6. '}' → logprob: -11.877906799316406
    7. '','' → logprob: -13.002906799316406
    8. '   ' → logprob: -13.002906799316406
    9. ' ' → logprob: -13.127906799316406
    10. ',

' → logprob: -14.002906799316406

Token 130: ' '/' (ID: 7041)
  Prédit: ''/'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''/' → logprob: -0.030189402401447296
    2. ''' → logprob: -3.5301895141601562
    3. ' '/' → logprob: -7.905189514160156
    4. ' '/'' → logprob: -10.530189514160156
    5. '/' → logprob: -10.905189514160156
    6. ''*' → logprob: -11.780189514160156
    7. ''}' → logprob: -12.155189514160156
    8. ' ' → logprob: -12.530189514160156
    9. ''>' → logprob: -13.030189514160156
    10. '   ' → logprob: -13.655189514160156

Token 131: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.004353690892457962
    2. ':' → logprob: -5.5043535232543945
    3. '2' → logprob: -8.629353523254395
    4. ''' → logprob: -10.129353523254395
    5. ''}' → logprob: -10.879353523254395
    6. ' ':' → logprob: -11.004353523254395
    7. '":' → logprob: -12.754353523254395
    8. '   ' → logprob: -13.129353523254395
    9. '}:' → logprob: -13.129353523254395
    10. '```' → logprob: -13.254353523254395

Token 132: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.00023238400171976537
    2. ' ' → logprob: -8.375232696533203
    3. '   ' → logprob: -14.250232696533203
    4. ''' → logprob: -15.000232696533203
    5. '```' → logprob: -15.250232696533203
    6. '}' → logprob: -15.625232696533203
    7. '۲' → logprob: -16.375232696533203
    8. '  ' → logprob: -16.875232696533203
    9. '       ' → logprob: -17.375232696533203
    10. ')' → logprob: -17.375232696533203

Token 133: '}
' (ID: 739)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '}' → logprob: -0.0037909348029643297
    2. ',' → logprob: -5.878790855407715
    3. '}
' → logprob: -7.628790855407715
    4. ' }' → logprob: -7.753790855407715
    5. '}

' → logprob: -10.128790855407715
    6. '   ' → logprob: -11.378790855407715
    7. ''}' → logprob: -12.128790855407715
    8. ' ' → logprob: -12.503790855407715
    9. ','' → logprob: -13.003790855407715
    10. ',
' → logprob: -13.628790855407715

Token 134: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6779180765151978
    2. 'output' → logprob: -1.6779180765151978
    3. 'def' → logprob: -1.8029180765151978
    4. '    
' → logprob: -3.052917957305908
    5. ' output' → logprob: -3.052917957305908
    6. '
' → logprob: -4.177917957305908
    7. 'stack' → logprob: -4.302917957305908
    8. ' operators' → logprob: -5.427917957305908
    9. 'operators' → logprob: -5.552917957305908
    10. 'operator' → logprob: -5.927917957305908

Token 135: ' output' (ID: 4733)
  Prédit: 'output'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'output' (adapté à ' output') → logprob: -0.011000069789588451
    2. 'def' → logprob: -5.386000156402588
    3. ' output' → logprob: -5.386000156402588
    4. '   ' → logprob: -6.761000156402588
    5. '    
' → logprob: -8.38599967956543
    6. 'stack' → logprob: -8.76099967956543
    7. 'op' → logprob: -9.26099967956543
    8. 'operator' → logprob: -9.88599967956543
    9. '
' → logprob: -10.51099967956543
    10. ' def' → logprob: -11.01099967956543

Token 136: '_queue' (ID: 25622)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.3391062319278717
    2. '=' → logprob: -1.4641062021255493
    3. '=[]' → logprob: -3.089106321334839
    4. '_queue' → logprob: -4.58910608291626
    5. '_tokens' → logprob: -8.589106559753418
    6. '_stack' → logprob: -8.839106559753418
    7. '=[]
' → logprob: -9.214106559753418
    8. ',' → logprob: -9.714106559753418
    9. 'queue' → logprob: -11.214106559753418
    10. '_' → logprob: -11.339106559753418

Token 137: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.01108484622091055
    2. '=' → logprob: -4.511085033416748
    3. '=[]' → logprob: -10.88608455657959
    4. ' ' → logprob: -11.38608455657959
    5. ',' → logprob: -12.63608455657959
    6. '<|end|>' → logprob: -13.63608455657959
    7. '[:]' → logprob: -14.51108455657959
    8. '.' → logprob: -15.13608455657959
    9. ')' → logprob: -15.26108455657959
    10. '[]' → logprob: -15.51108455657959

Token 138: ' []
' (ID: 8911)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.0003466673369985074
    2. ' []' → logprob: -8.000347137451172
    3. '[]
' → logprob: -11.750347137451172
    4. '[]}' → logprob: -12.875347137451172
    5. '[]>' → logprob: -14.875347137451172
    6. '[]

' → logprob: -15.875347137451172
    7. 'deque' → logprob: -15.875347137451172
    8. '[' → logprob: -16.250347137451172
    9. '[],' → logprob: -17.000347137451172
    10. '   ' → logprob: -17.375347137451172

Token 139: '   ' (ID: 271)
  Prédit: 'operator'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'operator' → logprob: -0.10129084438085556
    2. ' operator' → logprob: -2.3512909412384033
    3. '   ' → logprob: -7.476290702819824
    4. 'op' → logprob: -8.476290702819824
    5. 'operators' → logprob: -9.226290702819824
    6. ' op' → logprob: -9.476290702819824
    7. '	operator' → logprob: -9.476290702819824
    8. ' operators' → logprob: -10.851290702819824
    9. 'stack' → logprob: -11.226290702819824
    10. 'ops' → logprob: -11.601290702819824

Token 140: ' operator' (ID: 11019)
  Prédit: 'operator'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'operator' (adapté à ' operator') → logprob: -0.023279372602701187
    2. 'op' → logprob: -3.7732794284820557
    3. 'ops' → logprob: -10.773279190063477
    4. ' operator' → logprob: -11.523279190063477
    5. 'operators' → logprob: -13.023279190063477
    6. ' op' → logprob: -14.773279190063477
    7. 'import' → logprob: -15.773279190063477
    8. '	operator' → logprob: -15.898279190063477
    9. '```' → logprob: -16.273279190063477
    10. 'stack' → logprob: -17.023279190063477

Token 141: '_stack' (ID: 35650)
  Prédit: '_stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_stack' → logprob: -1.0445127372804563e-05
    2. 's' → logprob: -12.12501049041748
    3. 'stack' → logprob: -12.62501049041748
    4. '_STACK' → logprob: -14.25001049041748
    5. 'Stack' → logprob: -14.50001049041748
    6. '_' → logprob: -15.37501049041748
    7. '_queue' → logprob: -16.000009536743164
    8. '_s' → logprob: -17.125009536743164
    9. ' stack' → logprob: -17.625009536743164
    10. '	stack' → logprob: -17.750009536743164

Token 142: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.10025368630886078
    2. '=' → logprob: -2.3502535820007324
    3. '=[]' → logprob: -9.97525405883789
    4. ' ' → logprob: -15.47525405883789
    5. '[:]' → logprob: -15.97525405883789
    6. '[]' → logprob: -16.47525405883789
    7. '.append' → logprob: -17.22525405883789
    8. '<|end|>' → logprob: -17.47525405883789
    9. '.' → logprob: -18.35025405883789
    10. '=[]
' → logprob: -18.35025405883789

Token 143: ' []

' (ID: 32833)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[]' → logprob: -8.280175097752362e-05
    2. ' []' → logprob: -9.500082969665527
    3. '[]}' → logprob: -12.125082969665527
    4. '[]
' → logprob: -13.875082969665527
    5. '[]>' → logprob: -14.250082969665527
    6. '=[]' → logprob: -14.750082969665527
    7. '[' → logprob: -15.875082969665527
    8. '[])' → logprob: -16.37508201599121
    9. '[]

' → logprob: -16.50008201599121
    10. '   ' → logprob: -16.87508201599121

Token 144: '   ' (ID: 271)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.03467667102813721
    2. ' for' → logprob: -3.4096765518188477
    3. '   ' → logprob: -6.909676551818848
    4. 'def' → logprob: -11.159676551818848
    5. '    
' → logprob: -12.034676551818848
    6. '	for' → logprob: -12.284676551818848
    7. '
' → logprob: -12.534676551818848
    8. ')' → logprob: -12.784676551818848
    9. '```' → logprob: -15.534676551818848
    10. ' 
' → logprob: -15.909676551818848

Token 145: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.0005816269549541175
    2. ' for' → logprob: -7.500581741333008
    3. '   ' → logprob: -11.000581741333008
    4. 'def' → logprob: -11.375581741333008
    5. '
' → logprob: -15.250581741333008
    6. '    
' → logprob: -15.625581741333008
    7. '	for' → logprob: -16.250581741333008
    8. '```' → logprob: -19.000581741333008
    9. ' 
' → logprob: -19.375581741333008
    10. 'For' → logprob: -19.500581741333008

Token 146: ' token' (ID: 6602)
  Prédit: ' token'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' token' → logprob: -0.3133102357387543
    2. 'token' → logprob: -1.3133102655410767
    3. ' tok' → logprob: -10.813310623168945
    4. 'tok' → logprob: -11.188310623168945
    5. '	token' → logprob: -12.188310623168945
    6. 't' → logprob: -13.063310623168945
    7. ' t' → logprob: -13.188310623168945
    8. 'oken' → logprob: -13.313310623168945
    9. '_token' → logprob: -13.563310623168945
    10. '(token' → logprob: -14.063310623168945

Token 147: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.029753733426332474
    2. 'in' → logprob: -3.5297536849975586
    3. ':' → logprob: -14.029753684997559
    4. ' ' → logprob: -14.154753684997559
    5. '   ' → logprob: -14.279753684997559
    6. '	in' → logprob: -14.279753684997559
    7. ' :' → logprob: -15.654753684997559
    8. '  ' → logprob: -16.779754638671875
    9. ',' → logprob: -17.029754638671875
    10. '.' → logprob: -17.154754638671875

Token 148: ' tokens' (ID: 20290)
  Prédit: 'tokens'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tokens' → logprob: -0.011048170737922192
    2. ' tokens' → logprob: -4.511048316955566
    3. 'okens' → logprob: -15.511048316955566
    4. '(tokens' → logprob: -16.26104736328125
    5. 'token' → logprob: -17.26104736328125
    6. '   ' → logprob: -17.88604736328125
    7. '.tokens' → logprob: -18.13604736328125
    8. '_tokens' → logprob: -18.51104736328125
    9. 'Tokens' → logprob: -18.88604736328125
    10. ' ' → logprob: -19.13604736328125

Token 149: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.000241801084484905
    2. ':
' → logprob: -8.500242233276367
    3. '):' → logprob: -10.500242233276367
    4. ' :' → logprob: -11.750242233276367
    5. ':**' → logprob: -13.750242233276367
    6. '<|end|>' → logprob: -14.625242233276367
    7. '):
' → logprob: -15.125242233276367
    8. ',' → logprob: -15.250242233276367
    9. '   ' → logprob: -15.375242233276367
    10. ':

' → logprob: -15.500242233276367

Token 150: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.888346791267395
    2. ':' → logprob: -1.263346791267395
    3. ' if' → logprob: -2.0133466720581055
    4. '<|end|>' → logprob: -2.5133466720581055
    5. '   ' → logprob: -2.6383466720581055
    6. '    ' → logprob: -5.1383466720581055
    7. ' ' → logprob: -5.6383466720581055
    8. ' 
' → logprob: -6.0133466720581055
    9. '):' → logprob: -6.7633466720581055
    10. ' :' → logprob: -6.7633466720581055

Token 151: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.34982022643089294
    2. ' ' → logprob: -1.4748202562332153
    3. 'if' (adapté à ' if') → logprob: -3.349820137023926
    4. '    ' → logprob: -3.599820137023926
    5. ' 
' → logprob: -6.849820137023926
    6. '        ' → logprob: -7.099820137023926
    7. ' isinstance' → logprob: -7.474820137023926
    8. '   ' → logprob: -7.599820137023926
    9. '       ' → logprob: -7.974820137023926
    10. '<|end|>' → logprob: -8.599820137023926

Token 152: ' isinstance' (ID: 25889)
  Prédit: ' isinstance'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' isinstance' → logprob: -0.004426558967679739
    2. 'is' → logprob: -5.7544264793396
    3. ' type' → logprob: -7.3794264793396
    4. 'type' → logprob: -7.3794264793396
    5. ' ' → logprob: -16.754426956176758
    6. '(is' → logprob: -16.879426956176758
    7. ' ' → logprob: -17.129426956176758
    8. 'typeof' → logprob: -17.129426956176758
    9. '(type' → logprob: -17.254426956176758
    10. '   ' → logprob: -17.504426956176758

Token 153: '(token' (ID: 23460)
  Prédit: '(token'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(token' → logprob: -3.6550729419104755e-05
    2. 'token' → logprob: -10.250036239624023
    3. ' token' → logprob: -13.750036239624023
    4. '(' → logprob: -16.500036239624023
    5. ' (' → logprob: -16.875036239624023
    6. '[token' → logprob: -18.500036239624023
    7. '	token' → logprob: -18.750036239624023
    8. '(tokens' → logprob: -21.875036239624023
    9. '.token' → logprob: -21.875036239624023
    10. '(ticket' → logprob: -22.375036239624023

Token 154: ',' (ID: 11)
  Prédit: '(int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.032489627599716187
    2. ',' → logprob: -3.782489538192749
    3. ',int' → logprob: -5.532489776611328
    4. 'int' → logprob: -5.907489776611328
    5. '(' → logprob: -6.032489776611328
    6. ' (' → logprob: -9.657489776611328
    7. ' ,' → logprob: -10.657489776611328
    8. ' int' → logprob: -11.407489776611328
    9. 's' → logprob: -11.907489776611328
    10. '<int' → logprob: -12.282489776611328

Token 155: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -4.320199877838604e-07
    2. ' int' → logprob: -15.0
    3. '(int' → logprob: -20.25
    4. '```' → logprob: -22.375
    5. '<int' → logprob: -23.125
    6. '	int' → logprob: -23.375
    7. '
' → logprob: -24.5
    8. ':int' → logprob: -24.625
    9. ' ' → logprob: -24.875
    10. '[int' → logprob: -25.125

Token 156: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00586397061124444
    2. '):
' → logprob: -5.630864143371582
    3. ')' → logprob: -6.130864143371582
    4. ' ):' → logprob: -9.505864143371582
    5. ':' → logprob: -11.505864143371582
    6. '):

' → logprob: -14.130864143371582
    7. ' )' → logprob: -14.755864143371582
    8. '):
' → logprob: -15.005864143371582
    9. ' ):
' → logprob: -15.005864143371582
    10. ' or' → logprob: -16.380863189697266

Token 157: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0022028323728591204
    2. 'output' → logprob: -6.877202987670898
    3. '
' → logprob: -8.377202987670898
    4. '<|end|>' → logprob: -8.377202987670898
    5. ' output' → logprob: -9.252202987670898
    6. ':
' → logprob: -9.252202987670898
    7. '```' → logprob: -9.252202987670898
    8. ':' → logprob: -9.627202987670898
    9. '           ' → logprob: -9.877202987670898
    10. ')' → logprob: -10.002202987670898

Token 158: ' output' (ID: 4733)
  Prédit: 'output'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'output' (adapté à ' output') → logprob: -0.5836382508277893
    2. ' output' → logprob: -0.8336382508277893
    3. '       ' → logprob: -4.9586381912231445
    4. '	output' → logprob: -8.208638191223145
    5. '   ' → logprob: -9.208638191223145
    6. '(output' → logprob: -9.333638191223145
    7. '
' → logprob: -9.458638191223145
    8. '           ' → logprob: -10.833638191223145
    9. '$output' → logprob: -10.833638191223145
    10. '```' → logprob: -10.833638191223145

Token 159: '_queue' (ID: 25622)
  Prédit: '_queue'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_queue' → logprob: -1.6240566083070007e-06
    2. '_stack' → logprob: -14.625001907348633
    3. '_' → logprob: -14.875001907348633
    4. '_append' → logprob: -15.000001907348633
    5. '```' → logprob: -16.000001907348633
    6. '_QUEUE' → logprob: -17.250001907348633
    7. '_enqueue' → logprob: -17.500001907348633
    8. '_push' → logprob: -17.625001907348633
    9. '.append' → logprob: -17.750001907348633
    10. 'Queue' → logprob: -18.000001907348633

Token 160: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.006741657853126526
    2. '.' → logprob: -5.006741523742676
    3. 'append' → logprob: -10.631741523742676
    4. '.Append' → logprob: -14.256741523742676
    5. '.app' → logprob: -14.381741523742676
    6. ' append' → logprob: -15.131741523742676
    7. ' .' → logprob: -15.256741523742676
    8. '.extend' → logprob: -15.381741523742676
    9. '_append' → logprob: -15.381741523742676
    10. '.push' → logprob: -17.256742477416992

Token 161: '(token' (ID: 23460)
  Prédit: '(token'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(token' → logprob: -4.572941179503687e-05
    2. 'token' → logprob: -10.250045776367188
    3. '(' → logprob: -11.500045776367188
    4. ' token' → logprob: -15.875045776367188
    5. '[token' → logprob: -19.375045776367188
    6. '	token' → logprob: -19.625045776367188
    7. ' (' → logprob: -20.250045776367188
    8. '(
' → logprob: -20.625045776367188
    9. '(ticket' → logprob: -20.875045776367188
    10. 'Token' → logprob: -22.250045776367188

Token 162: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00010020548506872728
    2. ')
' → logprob: -9.875100135803223
    3. ' )' → logprob: -10.750100135803223
    4. 'elif' → logprob: -10.875100135803223
    5. '<|end|>' → logprob: -12.125100135803223
    6. ' elif' → logprob: -14.250100135803223
    7. '
' → logprob: -15.000100135803223
    8. '),' → logprob: -15.125100135803223
    9. ')return' → logprob: -15.500100135803223
    10. '   ' → logprob: -15.500100135803223

Token 163: '       ' (ID: 309)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'elif' → logprob: -0.3311668038368225
    2. ' elif' → logprob: -1.7061667442321777
    3. '       ' → logprob: -2.4561667442321777
    4. '<|end|>' → logprob: -4.706166744232178
    5. '   ' → logprob: -5.831166744232178
    6. '	elif' → logprob: -6.831166744232178
    7. ')' → logprob: -7.956166744232178
    8. ' else' → logprob: -8.331167221069336
    9. '
' → logprob: -8.456167221069336
    10. 'else' → logprob: -8.706167221069336

Token 164: ' elif' (ID: 9497)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'elif' (adapté à ' elif') → logprob: -0.474174827337265
    2. ' elif' → logprob: -0.9741748571395874
    3. '	elif' → logprob: -9.724174499511719
    4. ' else' → logprob: -10.599174499511719
    5. 'else' → logprob: -11.474174499511719
    6. '   ' → logprob: -14.099174499511719
    7. '       ' → logprob: -14.099174499511719
    8. '<|end|>' → logprob: -14.724174499511719
    9. '    ' → logprob: -15.599174499511719
    10. '    
' → logprob: -16.34917449951172

Token 165: ' token' (ID: 6602)
  Prédit: 'token'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'token' → logprob: -0.004621422383934259
    2. ' token' → logprob: -5.379621505737305
    3. '	token' → logprob: -14.879621505737305
    4. '(token' → logprob: -15.129621505737305
    5. ' ' → logprob: -15.754621505737305
    6. '   ' → logprob: -16.254621505737305
    7. 'is' → logprob: -16.629621505737305
    8. 'to' → logprob: -16.629621505737305
    9. 'tokens' → logprob: -16.629621505737305
    10. 'ch' → logprob: -16.754621505737305

Token 166: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.5176060795783997
    2. ' ==' → logprob: -1.1426060199737549
    3. '==' → logprob: -3.017606019973755
    4. '=='' → logprob: -3.392606019973755
    5. 'in' → logprob: -6.767606258392334
    6. ' =='' → logprob: -6.767606258392334
    7. '=="' → logprob: -10.142605781555176
    8. ' '('' → logprob: -10.267605781555176
    9. ')' → logprob: -10.517605781555176
    10. '(' → logprob: -10.642605781555176

Token 167: ' '+' (ID: 30120)
  Prédit: 'preced'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'preced' → logprob: -0.07384999096393585
    2. ''+' → logprob: -2.94884991645813
    3. ' precedence' → logprob: -4.948850154876709
    4. ''' → logprob: -4.948850154876709
    5. '['' → logprob: -5.823850154876709
    6. '('' → logprob: -7.323850154876709
    7. '"+' → logprob: -8.07384967803955
    8. '{'' → logprob: -8.19884967803955
    9. ' '+' → logprob: -9.32384967803955
    10. '   ' → logprob: -9.32384967803955

Token 168: '-' (ID: 12)
  Prédit: '-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -2.7133641196996905e-05
    2. ' -' → logprob: -11.50002670288086
    3. '-'' → logprob: -11.50002670288086
    4. '-*' → logprob: -12.25002670288086
    5. '-'+' → logprob: -14.25002670288086
    6. '*/' → logprob: -14.62502670288086
    7. ''-' → logprob: -14.62502670288086
    8. '+-' → logprob: -15.37502670288086
    9. ' ' → logprob: -16.62502670288086
    10. '\-' → logprob: -16.75002670288086

Token 169: '*/' (ID: 3680)
  Prédit: '*/'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*/' → logprob: -0.0005026352009736001
    2. '*/)' → logprob: -8.250502586364746
    3. '*' → logprob: -8.500502586364746
    4. '*/),' → logprob: -10.375502586364746
    5. '*/,' → logprob: -12.750502586364746
    6. '=*/' → logprob: -13.750502586364746
    7. ' */' → logprob: -13.750502586364746
    8. '/*' → logprob: -14.125502586364746
    9. ''' → logprob: -14.625502586364746
    10. '+' → logprob: -15.625502586364746

Token 170: '':
' (ID: 7669)
  Prédit: '':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.2299792617559433
    2. '':
' → logprob: -1.6049792766571045
    3. ':' → logprob: -5.604979038238525
    4. '):' → logprob: -7.354979038238525
    5. '(':' → logprob: -9.479979515075684
    6. '):
' → logprob: -9.604979515075684
    7. ' ':' → logprob: -10.979979515075684
    8. ''' → logprob: -10.979979515075684
    9. '':
' → logprob: -11.104979515075684
    10. ')' → logprob: -11.229979515075684

Token 171: '           ' (ID: 352)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.03859344497323036
    2. ':
' → logprob: -3.2885935306549072
    3. '       ' → logprob: -8.038593292236328
    4. '   ' → logprob: -9.413593292236328
    5. ' :' → logprob: -9.663593292236328
    6. '):' → logprob: -11.038593292236328
    7. ' and' → logprob: -11.038593292236328
    8. ' :
' → logprob: -11.163593292236328
    9. '):
' → logprob: -11.663593292236328
    10. '```' → logprob: -12.163593292236328

Token 172: ' while' (ID: 2049)
  Prédit: ' while'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' while' → logprob: -0.07055561244487762
    2. 'while' (adapté à ' while') → logprob: -2.6955556869506836
    3. '       ' → logprob: -7.820555686950684
    4. '	while' → logprob: -8.695555686950684
    5. 'While' → logprob: -10.195555686950684
    6. ' 
' → logprob: -12.320555686950684
    7. '        
' → logprob: -12.945555686950684
    8. '   ' → logprob: -13.570555686950684
    9. '
' → logprob: -13.945555686950684
    10. '```' → logprob: -13.945555686950684

Token 173: ' (' (ID: 350)
  Prédit: 'operator'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'operator' → logprob: -0.030654365196824074
    2. '(operator' → logprob: -3.5306544303894043
    3. ' operator' → logprob: -7.030654430389404
    4. '(' → logprob: -11.280653953552246
    5. ' (' → logprob: -12.405653953552246
    6. '(
' → logprob: -13.780653953552246
    7. '	operator' → logprob: -14.155653953552246
    8. '   ' → logprob: -15.030653953552246
    9. '.operator' → logprob: -16.655654907226562
    10. ' ' → logprob: -16.780654907226562

Token 174: 'operator' (ID: 15184)
  Prédit: 'operator'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'operator' → logprob: -0.0041114045307040215
    2. '(operator' → logprob: -5.504111289978027
    3. ' operator' → logprob: -10.379111289978027
    4. '   ' → logprob: -14.129111289978027
    5. '(' → logprob: -14.629111289978027
    6. '	operator' → logprob: -14.879111289978027
    7. ' (' → logprob: -16.379112243652344
    8. '(
' → logprob: -16.504112243652344
    9. ' ' → logprob: -17.004112243652344
    10. '.operator' → logprob: -17.504112243652344

Token 175: '_stack' (ID: 35650)
  Prédit: '_stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_stack' → logprob: -6.153795766294934e-06
    2. '_' → logprob: -12.875005722045898
    3. '_operator' → logprob: -13.125005722045898
    4. 'stack' → logprob: -13.625005722045898
    5. '_STACK' → logprob: -16.3750057220459
    6. 'Stack' → logprob: -16.6250057220459
    7. ' stack' → logprob: -17.0000057220459
    8. '   ' → logprob: -17.2500057220459
    9. ' _' → logprob: -17.3750057220459
    10. '	stack' → logprob: -17.3750057220459

Token 176: ' and' (ID: 326)
  Prédit: 'and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'and' → logprob: -0.2519327998161316
    2. ' and' → logprob: -1.5019328594207764
    3. '	and' → logprob: -13.376933097839355
    4. ')' → logprob: -13.876933097839355
    5. '           ' → logprob: -14.626933097839355
    6. '   ' → logprob: -14.751933097839355
    7. ' ' → logprob: -15.876933097839355
    8. '          ' → logprob: -16.12693214416504
    9. '       ' → logprob: -16.87693214416504
    10. '         ' → logprob: -17.12693214416504

Token 177: ' operator' (ID: 11019)
  Prédit: 'operator'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'operator' → logprob: -0.3988295793533325
    2. ' operator' → logprob: -1.1488295793533325
    3. 'preced' → logprob: -5.023829460144043
    4. '(operator' → logprob: -5.898829460144043
    5. ' precedence' → logprob: -6.148829460144043
    6. ' ' → logprob: -8.648829460144043
    7. '   ' → logprob: -9.398829460144043
    8. '  ' → logprob: -9.898829460144043
    9. '	operator' → logprob: -10.023829460144043
    10. ' (' → logprob: -10.648829460144043

Token 178: '_stack' (ID: 35650)
  Prédit: '_stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_stack' → logprob: -0.1226310208439827
    2. '[-' → logprob: -2.747631072998047
    3. 'stack' → logprob: -3.747631072998047
    4. 'operator' → logprob: -3.747631072998047
    5. '_operator' → logprob: -6.122631072998047
    6. 'Stack' → logprob: -7.122631072998047
    7. ' ' → logprob: -8.247631072998047
    8. ' operator' → logprob: -8.497631072998047
    9. ' stack' → logprob: -8.997631072998047
    10. ' and' → logprob: -9.497631072998047

Token 179: '[-' (ID: 17503)
  Prédit: '[-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[-' → logprob: -6.802049756515771e-05
    2. ' and' → logprob: -10.125067710876465
    3. 'and' → logprob: -10.500067710876465
    4. '[
' → logprob: -16.00006866455078
    5. '[' → logprob: -16.50006866455078
    6. '```' → logprob: -17.00006866455078
    7. ' [-' → logprob: -17.00006866455078
    8. '
' → logprob: -17.87506866455078
    9. '   ' → logprob: -18.25006866455078
    10. ' ' → logprob: -18.62506866455078

Token 180: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0719841718673706
    2. ' ' → logprob: -3.69698429107666
    3. '()' → logprob: -4.32198429107666
    4. '0' → logprob: -4.57198429107666
    5. 'operator' → logprob: -5.19698429107666
    6. ']' → logprob: -5.94698429107666
    7. '   ' → logprob: -6.07198429107666
    8. '()]' → logprob: -6.19698429107666
    9. '()!=' → logprob: -6.57198429107666
    10. 'stack' → logprob: -6.69698429107666

Token 181: ']' (ID: 60)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.31329602003097534
    2. 'in' → logprob: -1.3132960796356201
    3. ')' → logprob: -11.0632963180542
    4. ''in' → logprob: -11.8132963180542
    5. ' !=' → logprob: -12.6882963180542
    6. '!=' → logprob: -12.9382963180542
    7. '!='' → logprob: -12.9382963180542
    8. ']' → logprob: -13.9382963180542
    9. ''' → logprob: -14.3132963180542
    10. 'not' → logprob: -15.0632963180542

Token 182: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.2520407438278198
    2. 'in' → logprob: -1.5020407438278198
    3. ''in' → logprob: -10.12704086303711
    4. ' not' → logprob: -10.62704086303711
    5. '!='' → logprob: -11.75204086303711
    6. ' !=' → logprob: -12.00204086303711
    7. ''' → logprob: -12.12704086303711
    8. ' '' → logprob: -12.12704086303711
    9. ' ' → logprob: -12.12704086303711
    10. ')' → logprob: -12.25204086303711

Token 183: ' '+' (ID: 30120)
  Prédit: ''+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''+' → logprob: -0.00601316848769784
    2. ' '+' → logprob: -5.1310133934021
    3. 'preced' → logprob: -9.881012916564941
    4. ''' → logprob: -10.756012916564941
    5. '"+' → logprob: -12.006012916564941
    6. '+-' → logprob: -13.256012916564941
    7. '   ' → logprob: -14.256012916564941
    8. ' '' → logprob: -14.381012916564941
    9. ' precedence' → logprob: -14.381012916564941
    10. ''*' → logprob: -14.506012916564941

Token 184: '-' (ID: 12)
  Prédit: '-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -6.432518421206623e-05
    2. ' -' → logprob: -9.7500638961792
    3. '+-' → logprob: -12.2500638961792
    4. '*-' → logprob: -14.7500638961792
    5. ' ' → logprob: -14.8750638961792
    6. '*/' → logprob: -15.1250638961792
    7. '-*' → logprob: -15.3750638961792
    8. '\-' → logprob: -16.750064849853516
    9. '*' → logprob: -17.625064849853516
    10. ' -*-' → logprob: -17.625064849853516

Token 185: '*/' (ID: 3680)
  Prédit: '*/'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*/' → logprob: -0.0003305784775875509
    2. '*/)' → logprob: -8.500330924987793
    3. '*/),' → logprob: -9.500330924987793
    4. '*' → logprob: -10.000330924987793
    5. '*/,' → logprob: -12.875330924987793
    6. '*/)
' → logprob: -13.000330924987793
    7. ' */' → logprob: -14.875330924987793
    8. '**' → logprob: -15.250330924987793
    9. '=*/' → logprob: -15.500330924987793
    10. '*/
' → logprob: -15.500330924987793

Token 186: ''' (ID: 6)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.0024277404882013798
    2. 'and' → logprob: -6.502427577972412
    3. ''' → logprob: -7.002427577972412
    4. '       ' → logprob: -13.00242805480957
    5. '           ' → logprob: -13.00242805480957
    6. '')' → logprob: -13.12742805480957
    7. '        ' → logprob: -13.50242805480957
    8. ' ' → logprob: -13.50242805480957
    9. '    ' → logprob: -13.62742805480957
    10. ''):
' → logprob: -13.75242805480957

Token 187: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.004629838280379772
    2. 'and' → logprob: -5.379629611968994
    3. '    ' → logprob: -12.129630088806152
    4. '        ' → logprob: -14.129630088806152
    5. ' ' → logprob: -14.254630088806152
    6. '   ' → logprob: -14.379630088806152
    7. ')' → logprob: -14.629630088806152
    8. '           ' → logprob: -14.754630088806152
    9. '      ' → logprob: -15.129630088806152
    10. '          ' → logprob: -15.129630088806152

Token 188: '
' (ID: 198)
  Prédit: 'preced'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'preced' → logprob: -0.20155902206897736
    2. ' precedence' → logprob: -1.701559066772461
    3. '   ' → logprob: -8.951559066772461
    4. 'pre' → logprob: -12.326559066772461
    5. 'prec' → logprob: -12.451559066772461
    6. '           ' → logprob: -12.451559066772461
    7. '(pre' → logprob: -13.951559066772461
    8. '    ' → logprob: -14.201559066772461
    9. ' ' → logprob: -14.326559066772461
    10. '
' → logprob: -14.326559066772461

Token 189: '                  ' (ID: 8854)
  Prédit: 'preced'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'preced' → logprob: -0.3906790018081665
    2. ' precedence' → logprob: -1.1406790018081665
    3. '   ' → logprob: -5.640678882598877
    4. '           ' → logprob: -8.390679359436035
    5. '       ' → logprob: -12.015679359436035
    6. ' preced' → logprob: -12.515679359436035
    7. '(pre' → logprob: -12.890679359436035
    8. '               ' → logprob: -13.015679359436035
    9. '    ' → logprob: -13.140679359436035
    10. '  ' → logprob: -13.515679359436035

Token 190: ' precedence' (ID: 120000)
  Prédit: 'preced'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'preced' → logprob: -0.0789865031838417
    2. ' precedence' → logprob: -2.578986406326294
    3. '   ' → logprob: -9.328986167907715
    4. '           ' → logprob: -12.953986167907715
    5. '  ' → logprob: -13.453986167907715
    6. ' ' → logprob: -13.703986167907715
    7. '    ' → logprob: -14.578986167907715
    8. '       ' → logprob: -14.828986167907715
    9. 'prec' → logprob: -14.828986167907715
    10. '(pre' → logprob: -14.953986167907715

Token 191: '[' (ID: 58)
  Prédit: '[token'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[token' → logprob: -0.0004317420825827867
    2. '[' → logprob: -7.750431537628174
    3. 'token' → logprob: -14.750432014465332
    4. ' [' → logprob: -14.875432014465332
    5. '[t' → logprob: -15.250432014465332
    6. '(token' → logprob: -17.750431060791016
    7. '[top' → logprob: -18.125431060791016
    8. '	token' → logprob: -18.500431060791016
    9. ' token' → logprob: -18.750431060791016
    10. '[temp' → logprob: -18.875431060791016

Token 192: 'operator' (ID: 15184)
  Prédit: 'token'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'token' → logprob: -0.021064139902591705
    2. '[token' → logprob: -3.896064043045044
    3. 'operator' → logprob: -7.896064281463623
    4. ' token' → logprob: -8.896063804626465
    5. '[' → logprob: -12.146063804626465
    6. '(token' → logprob: -12.646063804626465
    7. '	token' → logprob: -13.271063804626465
    8. '   ' → logprob: -14.896063804626465
    9. '```' → logprob: -15.021063804626465
    10. 'tokens' → logprob: -15.021063804626465

Token 193: '_stack' (ID: 35650)
  Prédit: '_stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_stack' → logprob: -0.028772810474038124
    2. '[token' → logprob: -3.9037728309631348
    3. 'stack' → logprob: -5.653772830963135
    4. 'token' → logprob: -5.653772830963135
    5. ']' → logprob: -7.903772830963135
    6. '][' → logprob: -8.278772354125977
    7. 'Stack' → logprob: -8.653772354125977
    8. '[' → logprob: -9.528772354125977
    9. '[-' → logprob: -9.653772354125977
    10. '_STACK' → logprob: -10.403772354125977

Token 194: '[-' (ID: 17503)
  Prédit: '[-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[-' → logprob: -5.5577775128767826e-06
    2. '][-' → logprob: -12.250005722045898
    3. '-' → logprob: -14.750005722045898
    4. ' [-' → logprob: -16.1250057220459
    5. '   ' → logprob: -17.2500057220459
    6. ''s' → logprob: -17.2500057220459
    7. ']' → logprob: -17.6250057220459
    8. '[
' → logprob: -17.7500057220459
    9. '[' → logprob: -17.8750057220459
    10. '```' → logprob: -17.8750057220459

Token 195: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00014096579980105162
    2. '-' → logprob: -9.000141143798828
    3. 'stack' → logprob: -11.625141143798828
    4. ']' → logprob: -12.625141143798828
    5. ' -' → logprob: -13.625141143798828
    6. '```' → logprob: -14.000141143798828
    7. '_stack' → logprob: -14.750141143798828
    8. ' ' → logprob: -14.750141143798828
    9. '2' → logprob: -15.687641143798828
    10. 'len' → logprob: -15.687641143798828

Token 196: ']]' (ID: 8928)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.005712627898901701
    2. '']' → logprob: -5.630712509155273
    3. ']>=' → logprob: -6.505712509155273
    4. ']>' → logprob: -7.630712509155273
    5. ' ]' → logprob: -9.005712509155273
    6. '"]' → logprob: -12.505712509155273
    7. '`]' → logprob: -13.005712509155273
    8. ']]' → logprob: -15.005712509155273
    9. ')]' → logprob: -15.130712509155273
    10. ']
' → logprob: -15.255712509155273

Token 197: ' >=' (ID: 5064)
  Prédit: '>='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>=' → logprob: -0.11352948099374771
    2. ' >=' → logprob: -2.2385294437408447
    3. ']>=' → logprob: -7.488529682159424
    4. ')>=' → logprob: -9.613529205322266
    5. '[' → logprob: -9.988529205322266
    6. '>' → logprob: -10.863529205322266
    7. ']' → logprob: -11.863529205322266
    8. '```' → logprob: -12.613529205322266
    9. ')' → logprob: -12.988529205322266
    10. '">' → logprob: -14.238529205322266

Token 198: ' precedence' (ID: 120000)
  Prédit: 'preced'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'preced' → logprob: -0.0004309076175559312
    2. ' precedence' → logprob: -7.750431060791016
    3. 'prec' → logprob: -16.625431060791016
    4. 'pre' → logprob: -17.000431060791016
    5. '   ' → logprob: -17.625431060791016
    6. 'prefix' → logprob: -18.375431060791016
    7. ' preced' → logprob: -19.625431060791016
    8. 'token' → logprob: -20.250431060791016
    9. ' precedent' → logprob: -20.625431060791016
    10. ' ' → logprob: -21.250431060791016

Token 199: '[token' (ID: 138013)
  Prédit: '[token'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[token' → logprob: -0.47485166788101196
    2. 'token' → logprob: -0.974851667881012
    3. ' token' → logprob: -7.224851608276367
    4. '(token' → logprob: -10.099851608276367
    5. '	token' → logprob: -12.724851608276367
    6. '[' → logprob: -13.474851608276367
    7. '   ' → logprob: -15.599851608276367
    8. 'Token' → logprob: -16.099851608276367
    9. '[
' → logprob: -16.474851608276367
    10. '_token' → logprob: -16.599851608276367

Token 200: ']):
' (ID: 51989)
  Prédit: '):
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.11478257924318314
    2. '):' → logprob: -2.2397825717926025
    3. ' ):
' → logprob: -6.489782810211182
    4. ' ):' → logprob: -8.739782333374023
    5. ':' → logprob: -9.364782333374023
    6. ']):
' → logprob: -9.864782333374023
    7. ''):
' → logprob: -9.989782333374023
    8. ')' → logprob: -10.364782333374023
    9. ':
' → logprob: -10.989782333374023
    10. ']):' → logprob: -11.114782333374023

Token 201: '               ' (ID: 506)
  Prédit: ' operator'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' operator' → logprob: -0.3420456051826477
    2. '           ' → logprob: -1.717045545578003
    3. 'operator' → logprob: -2.842045545578003
    4. '               ' → logprob: -3.092045545578003
    5. '```' → logprob: -6.717045783996582
    6. '                   ' → logprob: -6.842045783996582
    7. '       ' → logprob: -7.342045783996582
    8. ')' → logprob: -7.342045783996582
    9. '(operator' → logprob: -7.592045783996582
    10. '):
' → logprob: -7.717045783996582

Token 202: ' output' (ID: 4733)
  Prédit: 'output'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'output' (adapté à ' output') → logprob: -0.4769934117794037
    2. ' output' → logprob: -0.9769934415817261
    3. 'op' → logprob: -6.726993560791016
    4. ' op' → logprob: -7.226993560791016
    5. 'operator' → logprob: -7.476993560791016
    6. ' operator' → logprob: -8.351993560791016
    7. '   ' → logprob: -8.851993560791016
    8. ' popped' → logprob: -11.601993560791016
    9. '	output' → logprob: -11.726993560791016
    10. '```' → logprob: -11.976993560791016

Token 203: '_queue' (ID: 25622)
  Prédit: '_queue'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_queue' → logprob: -0.000282431225059554
    2. '_stack' → logprob: -8.500282287597656
    3. '_operator' → logprob: -10.125282287597656
    4. '.append' → logprob: -11.375282287597656
    5. '_output' → logprob: -11.625282287597656
    6. '_token' → logprob: -12.125282287597656
    7. '=' → logprob: -12.875282287597656
    8. '_append' → logprob: -13.375282287597656
    9. 'append' → logprob: -13.750282287597656
    10. 'Queue' → logprob: -13.750282287597656

Token 204: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.0031900706235319376
    2. '.' → logprob: -5.753190040588379
    3. '.pop' → logprob: -11.378190040588379
    4. ' .' → logprob: -14.503190040588379
    5. 'append' → logprob: -15.128190040588379
    6. '.extend' → logprob: -16.503190994262695
    7. '.app' → logprob: -17.378190994262695
    8. '_append' → logprob: -17.378190994262695
    9. '.push' → logprob: -18.128190994262695
    10. '```' → logprob: -18.253190994262695

Token 205: '(operator' (ID: 145734)
  Prédit: '(operator'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(operator' → logprob: -7.994086627149954e-05
    2. 'operator' → logprob: -9.500080108642578
    3. '(' → logprob: -12.250080108642578
    4. '(
' → logprob: -16.250080108642578
    5. '	operator' → logprob: -16.250080108642578
    6. ' operator' → logprob: -16.875080108642578
    7. '.operator' → logprob: -18.500080108642578
    8. '(operation' → logprob: -18.750080108642578
    9. '(op' → logprob: -19.875080108642578
    10. ' (' → logprob: -21.125080108642578

Token 206: '_stack' (ID: 35650)
  Prédit: '_stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_stack' → logprob: -1.7432603272027336e-06
    2. 'stack' → logprob: -13.500001907348633
    3. 'Stack' → logprob: -16.375001907348633
    4. 'operator' → logprob: -16.500001907348633
    5. '_operator' → logprob: -16.500001907348633
    6. '_STACK' → logprob: -17.125001907348633
    7. '```' → logprob: -17.375001907348633
    8. ')' → logprob: -18.250001907348633
    9. '(stack' → logprob: -18.625001907348633
    10. '[-' → logprob: -18.750001907348633

Token 207: '.pop' (ID: 15746)
  Prédit: '.pop'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.pop' → logprob: -0.00013464801304508
    2. 'pop' → logprob: -9.250134468078613
    3. '[-' → logprob: -10.250134468078613
    4. '.' → logprob: -13.500134468078613
    5. '].' → logprob: -13.750134468078613
    6. ' .' → logprob: -15.500134468078613
    7. ').' → logprob: -15.875134468078613
    8. 'Pop' → logprob: -16.00013542175293
    9. '-pop' → logprob: -16.75013542175293
    10. '```' → logprob: -17.00013542175293

Token 208: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.06317983567714691
    2. '()' → logprob: -2.8131797313690186
    3. ')' → logprob: -6.813179969787598
    4. '())
' → logprob: -10.313179969787598
    5. '()
' → logprob: -10.438179969787598
    6. '(' → logprob: -11.063179969787598
    7. ' ())' → logprob: -11.188179969787598
    8. '()))' → logprob: -12.063179969787598
    9. '()]' → logprob: -12.313179969787598
    10. '())

' → logprob: -12.688179969787598

Token 209: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.00011594036914175376
    2. ' operator' → logprob: -10.125116348266602
    3. '            
' → logprob: -10.500116348266602
    4. '       ' → logprob: -11.375116348266602
    5. 'operator' → logprob: -11.375116348266602
    6. '
' → logprob: -11.625116348266602
    7. '               ' → logprob: -12.125116348266602
    8. '          ' → logprob: -12.875116348266602
    9. '(operator' → logprob: -12.875116348266602
    10. '           
' → logprob: -14.000116348266602

Token 210: ' operator' (ID: 11019)
  Prédit: 'operator'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'operator' (adapté à ' operator') → logprob: -0.023332128301262856
    2. ' operator' → logprob: -3.773332118988037
    3. '           ' → logprob: -9.648332595825195
    4. '(operator' → logprob: -11.273332595825195
    5. '.operator' → logprob: -12.273332595825195
    6. '	operator' → logprob: -12.773332595825195
    7. '_operator' → logprob: -13.898332595825195
    8. '       ' → logprob: -14.898332595825195
    9. '            
' → logprob: -16.148332595825195
    10. '
' → logprob: -16.148332595825195

Token 211: '_stack' (ID: 35650)
  Prédit: '_stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_stack' → logprob: 0.0
    2. 'stack' → logprob: -17.5
    3. '_STACK' → logprob: -17.875
    4. 'Stack' → logprob: -19.125
    5. 's' → logprob: -19.5
    6. '_' → logprob: -19.5
    7. '```' → logprob: -19.75
    8. ')_' → logprob: -20.375
    9. '.stack' → logprob: -20.5
    10. ' stack' → logprob: -20.75

Token 212: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.0024827925954014063
    2. '.' → logprob: -6.002482891082764
    3. ' .' → logprob: -12.877482414245605
    4. '.app' → logprob: -13.127482414245605
    5. '.push' → logprob: -13.377482414245605
    6. 'append' → logprob: -14.877482414245605
    7. '.ap' → logprob: -15.002482414245605
    8. '.pop' → logprob: -15.627482414245605
    9. '.Append' → logprob: -16.377483367919922
    10. ').' → logprob: -17.877483367919922

Token 213: '(token' (ID: 23460)
  Prédit: '(token'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(token' → logprob: -0.0002036595979006961
    2. 'token' → logprob: -8.500204086303711
    3. '(' → logprob: -15.875204086303711
    4. ' token' → logprob: -17.37520408630371
    5. '[token' → logprob: -18.62520408630371
    6. '	token' → logprob: -19.75020408630371
    7. '(
' → logprob: -20.62520408630371
    8. '(ticket' → logprob: -21.75020408630371
    9. 'Token' → logprob: -21.87520408630371
    10. ' (' → logprob: -22.00020408630371

Token 214: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00037347347824834287
    2. ')
' → logprob: -8.375373840332031
    3. '<|end|>' → logprob: -9.375373840332031
    4. '       ' → logprob: -10.125373840332031
    5. '   ' → logprob: -12.250373840332031
    6. '<|end|>' → logprob: -12.500373840332031
    7. ')return' → logprob: -13.125373840332031
    8. ' )' → logprob: -13.375373840332031
    9. '')' → logprob: -13.750373840332031
    10. ')**' → logprob: -14.375373840332031

Token 215: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03811642527580261
    2. 'elif' → logprob: -4.288116455078125
    3. 'while' → logprob: -4.413116455078125
    4. '       ' → logprob: -5.163116455078125
    5. ' while' → logprob: -6.288116455078125
    6. ')' → logprob: -6.413116455078125
    7. 'for' → logprob: -7.038116455078125
    8. ' for' → logprob: -7.288116455078125
    9. ' elif' → logprob: -8.288116455078125
    10. 'else' → logprob: -8.413116455078125

Token 216: ' elif' (ID: 9497)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'elif' (adapté à ' elif') → logprob: -0.20162665843963623
    2. ' elif' → logprob: -1.7016266584396362
    3. '       ' → logprob: -9.326626777648926
    4. '	elif' → logprob: -9.451626777648926
    5. '   ' → logprob: -10.076626777648926
    6. 'else' → logprob: -13.451626777648926
    7. ' else' → logprob: -13.701626777648926
    8. '    ' → logprob: -14.576626777648926
    9. '```' → logprob: -15.951626777648926
    10. 'el' → logprob: -16.07662582397461

Token 217: ' token' (ID: 6602)
  Prédit: ' token'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' token' → logprob: -0.4740790128707886
    2. 'token' → logprob: -0.9740790128707886
    3. '(token' → logprob: -13.474079132080078
    4. '	token' → logprob: -14.599079132080078
    5. ' ' → logprob: -16.349079132080078
    6. '[token' → logprob: -17.474079132080078
    7. 'Token' → logprob: -17.724079132080078
    8. 'tokens' → logprob: -18.224079132080078
    9. '_token' → logprob: -18.349079132080078
    10. '.token' → logprob: -18.724079132080078

Token 218: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.1568446308374405
    2. '=='' → logprob: -2.2818446159362793
    3. '==' → logprob: -3.1568446159362793
    4. ' =='' → logprob: -7.781844615936279
    5. '=="' → logprob: -9.906845092773438
    6. ''' → logprob: -11.656845092773438
    7. '(' → logprob: -11.656845092773438
    8. '==(' → logprob: -12.031845092773438
    9. '[' → logprob: -12.281845092773438
    10. ' '('' → logprob: -13.031845092773438

Token 219: ' '('' (ID: 87284)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.00046606172691099346
    2. '(' → logprob: -8.500466346740723
    3. ''(' → logprob: -8.750466346740723
    4. '('' → logprob: -9.625466346740723
    5. ' '('' → logprob: -10.250466346740723
    6. '"' → logprob: -13.125466346740723
    7. '')' → logprob: -15.000466346740723
    8. ''''' → logprob: -15.375466346740723
    9. '("("' → logprob: -15.875466346740723
    10. ''=>'' → logprob: -18.750465393066406

Token 220: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.008579704910516739
    2. '):' → logprob: -5.133579730987549
    3. ':
' → logprob: -6.508579730987549
    4. ')' → logprob: -7.008579730987549
    5. 'operator' → logprob: -8.63357925415039
    6. '):
' → logprob: -10.63357925415039
    7. '(operator' → logprob: -10.63357925415039
    8. ' operator' → logprob: -11.25857925415039
    9. ' :' → logprob: -12.50857925415039
    10. '():' → logprob: -13.13357925415039

Token 221: '           ' (ID: 352)
  Prédit: 'operator'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'operator' → logprob: -0.6092360019683838
    2. '           ' → logprob: -0.8592360019683838
    3. ' operator' → logprob: -3.484236001968384
    4. '       ' → logprob: -6.734235763549805
    5. '   ' → logprob: -7.234235763549805
    6. '	operator' → logprob: -9.359235763549805
    7. '(operator' → logprob: -10.109235763549805
    8. '.operator' → logprob: -10.859235763549805
    9. '               ' → logprob: -12.484235763549805
    10. '
' → logprob: -12.984235763549805

Token 222: ' operator' (ID: 11019)
  Prédit: 'operator'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'operator' (adapté à ' operator') → logprob: -0.0024870727211236954
    2. ' operator' → logprob: -6.0024871826171875
    3. '           ' → logprob: -11.502487182617188
    4. '   ' → logprob: -14.627487182617188
    5. '	operator' → logprob: -14.752487182617188
    6. '(operator' → logprob: -15.127487182617188
    7. '       ' → logprob: -16.627487182617188
    8. '               ' → logprob: -16.752487182617188
    9. '.operator' → logprob: -17.252487182617188
    10. '_operator' → logprob: -19.377487182617188

Token 223: '_stack' (ID: 35650)
  Prédit: '_stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_stack' → logprob: 0.0
    2. 'stack' → logprob: -17.375
    3. '_STACK' → logprob: -19.0
    4. '_' → logprob: -20.0
    5. '_push' → logprob: -20.0
    6. ' _' → logprob: -20.125
    7. 'Stack' → logprob: -20.125
    8. ')_' → logprob: -20.125
    9. '_append' → logprob: -20.375
    10. ' stack' → logprob: -21.0

Token 224: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.00015860427811276168
    2. '.' → logprob: -8.750158309936523
    3. 'append' → logprob: -16.000158309936523
    4. '.push' → logprob: -16.750158309936523
    5. '.app' → logprob: -16.750158309936523
    6. '.Append' → logprob: -18.125158309936523
    7. ' .' → logprob: -18.875158309936523
    8. '.extend' → logprob: -19.500158309936523
    9. '.ap' → logprob: -20.000158309936523
    10. ' append' → logprob: -20.500158309936523

Token 225: '(token' (ID: 23460)
  Prédit: '(''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.7085916996002197
    2. 'token' → logprob: -1.4585916996002197
    3. '(token' → logprob: -1.4585916996002197
    4. '(' → logprob: -3.4585916996002197
    5. ''' → logprob: -4.583591461181641
    6. ' token' → logprob: -7.833591461181641
    7. '("("' → logprob: -8.08359146118164
    8. ''(' → logprob: -9.83359146118164
    9. ' '('' → logprob: -9.83359146118164
    10. '('(' → logprob: -11.83359146118164

Token 226: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.005345701705664396
    2. ')
' → logprob: -5.505345821380615
    3. '       ' → logprob: -6.755345821380615
    4. 'elif' → logprob: -9.630345344543457
    5. '   ' → logprob: -11.130345344543457
    6. '):
' → logprob: -12.005345344543457
    7. '<|end|>' → logprob: -12.130345344543457
    8. 'else' → logprob: -13.880345344543457
    9. ')}' → logprob: -14.005345344543457
    10. '')' → logprob: -14.130345344543457

Token 227: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.016644548624753952
    2. 'elif' → logprob: -4.391644477844238
    3. ' elif' → logprob: -5.516644477844238
    4. '<|end|>' → logprob: -9.891644477844238
    5. '	elif' → logprob: -10.266644477844238
    6. ')' → logprob: -11.016644477844238
    7. '   ' → logprob: -13.141644477844238
    8. '```' → logprob: -13.516644477844238
    9. '      ' → logprob: -15.266644477844238
    10. ' else' → logprob: -15.391644477844238

Token 228: ' elif' (ID: 9497)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'elif' (adapté à ' elif') → logprob: -0.018267935141921043
    2. ' elif' → logprob: -4.01826810836792
    3. '       ' → logprob: -9.393267631530762
    4. '	elif' → logprob: -10.643267631530762
    5. ')' → logprob: -11.518267631530762
    6. 'else' → logprob: -14.518267631530762
    7. '   ' → logprob: -15.268267631530762
    8. ' else' → logprob: -16.643268585205078
    9. '#elif' → logprob: -16.768268585205078
    10. 'elseif' → logprob: -17.643268585205078

Token 229: ' token' (ID: 6602)
  Prédit: ' token'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' token' → logprob: -0.006715728435665369
    2. 'token' → logprob: -5.006715774536133
    3. '	token' → logprob: -15.631715774536133
    4. '(token' → logprob: -16.256715774536133
    5. ' ' → logprob: -16.506715774536133
    6. ')' → logprob: -17.631715774536133
    7. '[token' → logprob: -17.881715774536133
    8. ' )' → logprob: -18.381715774536133
    9. ' tokens' → logprob: -18.506715774536133
    10. ' ' → logprob: -19.006715774536133

Token 230: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.31336653232574463
    2. '==' → logprob: -1.3133665323257446
    3. '=='' → logprob: -9.313366889953613
    4. ')' → logprob: -12.188366889953613
    5. ')==' → logprob: -12.313366889953613
    6. ']==' → logprob: -13.563366889953613
    7. '=' → logprob: -13.813366889953613
    8. '[' → logprob: -14.063366889953613
    9. ' =='' → logprob: -14.188366889953613
    10. '=="' → logprob: -15.313366889953613

Token 231: ' ')' (ID: 35910)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.000685391016304493
    2. ' ')'' → logprob: -7.500685214996338
    3. ' ')' → logprob: -9.000685691833496
    4. ''' → logprob: -11.750685691833496
    5. ')' → logprob: -13.875685691833496
    6. '")' → logprob: -15.500685691833496
    7. ' '' → logprob: -17.62568473815918
    8. ''){' → logprob: -17.75068473815918
    9. ' ' → logprob: -18.50068473815918
    10. '')"' → logprob: -19.12568473815918

Token 232: '':
' (ID: 7669)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0122354282066226
    2. ':
' → logprob: -5.012235641479492
    3. '):' → logprob: -5.262235641479492
    4. ')' → logprob: -8.887235641479492
    5. ' :' → logprob: -9.637235641479492
    6. '<|end|>' → logprob: -9.887235641479492
    7. '):
' → logprob: -10.137235641479492
    8. '   ' → logprob: -12.137235641479492
    9. '       ' → logprob: -12.387235641479492
    10. ' :
' → logprob: -12.637235641479492

Token 233: '           ' (ID: 352)
  Prédit: ' while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' while' → logprob: -0.18565022945404053
    2. '       ' → logprob: -1.9356502294540405
    3. 'while' → logprob: -3.93565034866333
    4. '   ' → logprob: -5.93565034866333
    5. '	while' → logprob: -6.18565034866333
    6. 'While' → logprob: -7.81065034866333
    7. '           ' → logprob: -7.93565034866333
    8. '    ' → logprob: -9.685649871826172
    9. '	   ' → logprob: -11.310649871826172
    10. '```' → logprob: -11.685649871826172

Token 234: ' while' (ID: 2049)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' (adapté à ' while') → logprob: -0.47414082288742065
    2. ' while' → logprob: -0.9741408228874207
    3. '	while' → logprob: -10.349141120910645
    4. '   ' → logprob: -10.849141120910645
    5. '       ' → logprob: -11.724141120910645
    6. 'While' → logprob: -13.224141120910645
    7. ' top' → logprob: -14.099141120910645
    8. 'top' → logprob: -14.599141120910645
    9. '    
' → logprob: -14.974141120910645
    10. '```' → logprob: -15.224141120910645

Token 235: ' operator' (ID: 11019)
  Prédit: ' operator'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' operator' → logprob: -0.6934269666671753
    2. 'operator' → logprob: -0.6934269666671753
    3. '(operator' → logprob: -8.193427085876465
    4. '	operator' → logprob: -12.818427085876465
    5. '.operator' → logprob: -15.818427085876465
    6. '_operator' → logprob: -16.19342613220215
    7. ' operador' → logprob: -16.19342613220215
    8. ' (' → logprob: -16.44342613220215
    9. '/operator' → logprob: -18.06842613220215
    10. '(' → logprob: -18.19342613220215

Token 236: '_stack' (ID: 35650)
  Prédit: '_stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_stack' → logprob: -3.531315314830863e-06
    2. 'stack' → logprob: -12.750003814697266
    3. 'Stack' → logprob: -15.125003814697266
    4. '_STACK' → logprob: -15.375003814697266
    5. '	stack' → logprob: -16.375003814697266
    6. '_st' → logprob: -17.500003814697266
    7. '   ' → logprob: -18.125003814697266
    8. ' stack' → logprob: -18.750003814697266
    9. '_operator' → logprob: -19.000003814697266
    10. '_' → logprob: -19.000003814697266

Token 237: ' and' (ID: 326)
  Prédit: 'and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'and' → logprob: -0.3870089054107666
    2. ' and' → logprob: -1.1370089054107666
    3. '[-' → logprob: -9.012008666992188
    4. '	and' → logprob: -11.762008666992188
    5. 'pop' → logprob: -12.512008666992188
    6. '.pop' → logprob: -12.887008666992188
    7. 'operator' → logprob: -13.762008666992188
    8. '[]' → logprob: -15.512008666992188
    9. '```' → logprob: -16.012008666992188
    10. '           ' → logprob: -16.637008666992188

Token 238: ' operator' (ID: 11019)
  Prédit: 'operator'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'operator' → logprob: -0.02324967086315155
    2. ' operator' → logprob: -3.773249626159668
    3. '(operator' → logprob: -12.898249626159668
    4. '           ' → logprob: -13.773249626159668
    5. '	operator' → logprob: -14.523249626159668
    6. '   ' → logprob: -16.648250579833984
    7. '.operator' → logprob: -16.898250579833984
    8. '                   ' → logprob: -17.148250579833984
    9. '               ' → logprob: -17.523250579833984
    10. ' operador' → logprob: -18.148250579833984

Token 239: '_stack' (ID: 35650)
  Prédit: '_stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_stack' → logprob: -0.018108151853084564
    2. '[-' → logprob: -4.393108367919922
    3. 'operator' → logprob: -5.893108367919922
    4. 'stack' → logprob: -6.393108367919922
    5. '_operator' → logprob: -7.518108367919922
    6. 'pop' → logprob: -7.768108367919922
    7. 'op' → logprob: -9.393108367919922
    8. '.pop' → logprob: -9.893108367919922
    9. 'Stack' → logprob: -10.518108367919922
    10. '```' → logprob: -11.893108367919922

Token 240: '[-' (ID: 17503)
  Prédit: '[-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[-' → logprob: -4.127333340875339e-06
    2. '.pop' → logprob: -12.625003814697266
    3. 'pop' → logprob: -14.625003814697266
    4. '```' → logprob: -15.375003814697266
    5. ' [-' → logprob: -17.625003814697266
    6. 'and' → logprob: -17.750003814697266
    7. '[
' → logprob: -18.250003814697266
    8. '   ' → logprob: -18.250003814697266
    9. '.peek' → logprob: -18.750003814697266
    10. '1' → logprob: -19.000003814697266

Token 241: '1' (ID: 16)
  Prédit: '_stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_stack' → logprob: -0.03710506111383438
    2. 'stack' → logprob: -3.537105083465576
    3. '[-' → logprob: -5.412105083465576
    4. '-' → logprob: -7.037105083465576
    5. 'operator' → logprob: -7.537105083465576
    6. '1' → logprob: -8.287104606628418
    7. '(-' → logprob: -8.537104606628418
    8. '(' → logprob: -8.662104606628418
    9. '()' → logprob: -8.787104606628418
    10. '_' → logprob: -9.162104606628418

Token 242: ']' (ID: 60)
  Prédit: ' !='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' !=' → logprob: -0.7008759379386902
    2. '!=' → logprob: -0.8258759379386902
    3. ']!=' → logprob: -3.200875997543335
    4. ']' → logprob: -4.575875759124756
    5. ')!=' → logprob: -4.950875759124756
    6. '()!=' → logprob: -5.700875759124756
    7. '!='' → logprob: -5.950875759124756
    8. ')' → logprob: -6.825875759124756
    9. ']!='' → logprob: -7.325875759124756
    10. '```' → logprob: -9.700876235961914

Token 243: ' !=' (ID: 1666)
  Prédit: '!='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '!=' → logprob: -0.1679992973804474
    2. ' !=' → logprob: -1.917999267578125
    3. '!='' → logprob: -5.042999267578125
    4. '()!=' → logprob: -7.042999267578125
    5. ']!=' → logprob: -8.667999267578125
    6. ')!=' → logprob: -9.292999267578125
    7. '!="' → logprob: -10.167999267578125
    8. '```' → logprob: -10.292999267578125
    9. ']!='' → logprob: -10.917999267578125
    10. '!=(' → logprob: -11.042999267578125

Token 244: ' '('' (ID: 87284)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0064420378766953945
    2. ' '('' → logprob: -5.131442070007324
    3. ''(' → logprob: -7.631442070007324
    4. '(' → logprob: -11.131442070007324
    5. '"' → logprob: -12.256442070007324
    6. ' '' → logprob: -12.381442070007324
    7. '('' → logprob: -12.381442070007324
    8. '   ' → logprob: -16.256441116333008
    9. ' ' → logprob: -16.381441116333008
    10. '	' → logprob: -17.256441116333008

Token 245: ':
' (ID: 734)
  Prédit: ':
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':
' → logprob: -0.2582476735115051
    2. ':' → logprob: -1.5082476139068604
    3. '):
' → logprob: -5.8832478523254395
    4. ' operator' → logprob: -6.3832478523254395
    5. 'operator' → logprob: -7.0082478523254395
    6. '               ' → logprob: -8.008247375488281
    7. '):' → logprob: -8.633247375488281
    8. '(operator' → logprob: -9.258247375488281
    9. ')' → logprob: -9.508247375488281
    10. '.operator' → logprob: -10.383247375488281

Token 246: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.10117267072200775
    2. ' operator' → logprob: -2.601172685623169
    3. 'operator' → logprob: -3.851172685623169
    4. '           ' → logprob: -7.85117244720459
    5. '   ' → logprob: -9.10117244720459
    6. '(operator' → logprob: -9.47617244720459
    7. '	operator' → logprob: -9.85117244720459
    8. '       ' → logprob: -10.22617244720459
    9. '```' → logprob: -10.22617244720459
    10. '                   ' → logprob: -10.85117244720459

Token 247: ' output' (ID: 4733)
  Prédit: 'output'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'output' (adapté à ' output') → logprob: -0.47485122084617615
    2. ' output' → logprob: -0.9748512506484985
    3. '               ' → logprob: -7.474851131439209
    4. 'operator' → logprob: -9.349851608276367
    5. ' operator' → logprob: -9.849851608276367
    6. '                   ' → logprob: -10.224851608276367
    7. '   ' → logprob: -11.474851608276367
    8. '           ' → logprob: -11.974851608276367
    9. '	output' → logprob: -12.099851608276367
    10. '$output' → logprob: -12.599851608276367

Token 248: '_queue' (ID: 25622)
  Prédit: '_queue'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_queue' → logprob: -1.4021237802808173e-05
    2. 'queue' → logprob: -11.625014305114746
    3. '.append' → logprob: -13.125014305114746
    4. '_stack' → logprob: -13.750014305114746
    5. 'Queue' → logprob: -13.875014305114746
    6. 'append' → logprob: -14.000014305114746
    7. '_QUEUE' → logprob: -15.625014305114746
    8. '_append' → logprob: -17.37501335144043
    9. '```' → logprob: -17.87501335144043
    10. 'QUEUE' → logprob: -18.37501335144043

Token 249: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.0002100965939462185
    2. '.' → logprob: -8.62520980834961
    3. 'append' → logprob: -11.12520980834961
    4. '.pop' → logprob: -11.62520980834961
    5. ' .' → logprob: -12.62520980834961
    6. 'app' → logprob: -12.87520980834961
    7. '.extend' → logprob: -15.00020980834961
    8. '.app' → logprob: -15.12520980834961
    9. '].' → logprob: -15.87520980834961
    10. ').' → logprob: -16.62520980834961

Token 250: '(operator' (ID: 145734)
  Prédit: '(operator'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(operator' → logprob: -0.00021140782337170094
    2. 'operator' → logprob: -8.500211715698242
    3. '(' → logprob: -11.750211715698242
    4. '	operator' → logprob: -17.250211715698242
    5. ' operator' → logprob: -17.625211715698242
    6. '.operator' → logprob: -17.875211715698242
    7. '(
' → logprob: -18.875211715698242
    8. '(operation' → logprob: -19.625211715698242
    9. ' (' → logprob: -20.250211715698242
    10. '(token' → logprob: -20.875211715698242

Token 251: '_stack' (ID: 35650)
  Prédit: '_stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_stack' → logprob: -0.0004988207365386188
    2. 'stack' → logprob: -7.8754987716674805
    3. 'operator' → logprob: -9.50049877166748
    4. '_operator' → logprob: -10.12549877166748
    5. 'Stack' → logprob: -13.62549877166748
    6. '(operator' → logprob: -14.25049877166748
    7. '_' → logprob: -14.75049877166748
    8. '(stack' → logprob: -15.00049877166748
    9. '_st' → logprob: -15.12549877166748
    10. '(' → logprob: -15.12549877166748

Token 252: '.pop' (ID: 15746)
  Prédit: '.pop'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.pop' → logprob: -5.800739018013701e-05
    2. 'pop' → logprob: -10.0000581741333
    3. '.' → logprob: -11.3750581741333
    4. ' .' → logprob: -14.3750581741333
    5. ').' → logprob: -14.7500581741333
    6. '(pop' → logprob: -17.000057220458984
    7. '().' → logprob: -17.875057220458984
    8. '].' → logprob: -17.875057220458984
    9. 'Pop' → logprob: -18.000057220458984
    10. 'op' → logprob: -18.250057220458984

Token 253: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.006363616790622473
    2. '()' → logprob: -5.256363391876221
    3. '())
' → logprob: -7.381363391876221
    4. ')' → logprob: -7.631363391876221
    5. '())

' → logprob: -11.631363868713379
    6. '()
' → logprob: -11.631363868713379
    7. ' ())' → logprob: -13.256363868713379
    8. '(' → logprob: -14.131363868713379
    9. '();)' → logprob: -15.131363868713379
    10. '()]' → logprob: -15.506363868713379

Token 254: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.005457035731524229
    2. ' operator' → logprob: -5.630456924438477
    3. 'operator' → logprob: -6.755456924438477
    4. '       ' → logprob: -7.880456924438477
    5. '   ' → logprob: -9.505456924438477
    6. ')' → logprob: -9.630456924438477
    7. '            
' → logprob: -9.880456924438477
    8. '               ' → logprob: -10.505456924438477
    9. '    
' → logprob: -11.130456924438477
    10. '```' → logprob: -11.505456924438477

Token 255: ' operator' (ID: 11019)
  Prédit: 'operator'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'operator' (adapté à ' operator') → logprob: -0.0032499623484909534
    2. ' operator' → logprob: -5.7532501220703125
    3. 'if' → logprob: -9.878250122070312
    4. '           ' → logprob: -11.128250122070312
    5. '   ' → logprob: -12.753250122070312
    6. ' if' → logprob: -13.128250122070312
    7. '	operator' → logprob: -14.503250122070312
    8. '(operator' → logprob: -15.003250122070312
    9. '               ' → logprob: -15.253250122070312
    10. '.operator' → logprob: -15.628250122070312

Token 256: '_stack' (ID: 35650)
  Prédit: '_stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_stack' → logprob: -5.438573680294212e-06
    2. 'stack' → logprob: -12.125005722045898
    3. 'Stack' → logprob: -16.8750057220459
    4. '_' → logprob: -17.8750057220459
    5. '_STACK' → logprob: -18.2500057220459
    6. '_operator' → logprob: -18.2500057220459
    7. '"_' → logprob: -19.0000057220459
    8. '_queue' → logprob: -19.6250057220459
    9. '_st' → logprob: -19.8750057220459
    10. 's' → logprob: -20.1250057220459

Token 257: '.pop' (ID: 15746)
  Prédit: '.pop'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.pop' → logprob: -2.236549335066229e-05
    2. 'pop' → logprob: -10.750021934509277
    3. '.' → logprob: -14.875021934509277
    4. '_pop' → logprob: -15.500021934509277
    5. '	pop' → logprob: -16.500022888183594
    6. '.remove' → logprob: -17.000022888183594
    7. ' pop' → logprob: -17.000022888183594
    8. '.Pop' → logprob: -17.125022888183594
    9. '(pop' → logprob: -17.500022888183594
    10. 'Pop' → logprob: -17.750022888183594

Token 258: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0002913678181357682
    2. '(' → logprob: -8.37529182434082
    3. '()
' → logprob: -9.75029182434082
    4. '()

' → logprob: -13.62529182434082
    5. '()`' → logprob: -15.62529182434082
    6. '('' → logprob: -15.62529182434082
    7. '())' → logprob: -15.75029182434082
    8. '()]' → logprob: -16.12529182434082
    9. '()"' → logprob: -16.12529182434082
    10. '()\' → logprob: -16.12529182434082

Token 259: ' ' (ID: 220)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.42039990425109863
    2. '   ' → logprob: -1.4203999042510986
    3. '    
' → logprob: -2.7953999042510986
    4. '<|end|>' → logprob: -3.6703999042510986
    5. '  
' → logprob: -4.6703996658325195
    6. '```' → logprob: -6.5453996658325195
    7. ' 
' → logprob: -6.6703996658325195
    8. '   
' → logprob: -7.6703996658325195
    9. '<|end|>' → logprob: -8.04539966583252
    10. 'return' → logprob: -8.29539966583252

Token 260: ' #' (ID: 1069)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.3904988467693329
    2. '<|end|>' → logprob: -1.3904988765716553
    3. 'return' → logprob: -3.2654988765716553
    4. '\n' → logprob: -5.015498638153076
    5. '   ' → logprob: -5.015498638153076
    6. '    
' → logprob: -5.140498638153076
    7. ')' → logprob: -5.515498638153076
    8. ' return' → logprob: -5.765498638153076
    9. '  
' → logprob: -5.890498638153076
    10. ' 
' → logprob: -6.515498638153076

Token 261: ' pop' (ID: 2735)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.6023732423782349
    2. '<|end|>' → logprob: -0.8523732423782349
    3. ')' → logprob: -4.602373123168945
    4. '```' → logprob: -6.102373123168945
    5. 'Remove' → logprob: -6.227373123168945
    6. ' #' → logprob: -6.227373123168945
    7. 'remove' → logprob: -6.352373123168945
    8. ' remove' → logprob: -6.352373123168945
    9. '<|end|>' → logprob: -6.727373123168945
    10. ' continue' → logprob: -6.852373123168945

Token 262: ' '('' (ID: 87284)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.5147390365600586
    2. '('' → logprob: -1.0147390365600586
    3. '(' → logprob: -3.7647390365600586
    4. ' '('' → logprob: -4.139739036560059
    5. '("("' → logprob: -7.764739036560059
    6. ''(' → logprob: -8.139739036560059
    7. ' (' → logprob: -11.889739036560059
    8. 'the' → logprob: -12.514739036560059
    9. '('(' → logprob: -12.639739036560059
    10. ' the' → logprob: -12.764739036560059

Token 263: '

' (ID: 279)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18362362682819366
    2. '
' → logprob: -1.9336236715316772
    3. '    
' → logprob: -4.183623790740967
    4. ')' → logprob: -6.308623790740967
    5. ' for' → logprob: -6.558623790740967
    6. '  
' → logprob: -6.808623790740967
    7. 'return' → logprob: -7.433623790740967
    8. '```' → logprob: -7.433623790740967
    9. ' return' → logprob: -7.683623790740967
    10. ' 
' → logprob: -7.933623790740967

Token 264: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.12909680604934692
    2. 'while' → logprob: -2.379096746444702
    3. ' while' → logprob: -3.629096746444702
    4. 'for' → logprob: -7.004096984863281
    5. ' for' → logprob: -7.879096984863281
    6. '
' → logprob: -7.879096984863281
    7. '    
' → logprob: -8.629096984863281
    8. '```' → logprob: -10.254096984863281
    9. '	while' → logprob: -11.129096984863281
    10. '#' → logprob: -11.254096984863281

Token 265: ' while' (ID: 2049)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' (adapté à ' while') → logprob: -0.0003013809327967465
    2. ' while' → logprob: -8.250301361083984
    3. '   ' → logprob: -10.250301361083984
    4. '#' → logprob: -12.625301361083984
    5. 'While' → logprob: -14.125301361083984
    6. '```' → logprob: -14.625301361083984
    7. '	while' → logprob: -15.375301361083984
    8. '    
' → logprob: -16.500301361083984
    9. '
' → logprob: -18.000301361083984
    10. '``' → logprob: -19.125301361083984

Token 266: ' operator' (ID: 11019)
  Prédit: ' operator'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' operator' → logprob: -0.062040507793426514
    2. 'operator' → logprob: -2.8120405673980713
    3. '(operator' → logprob: -9.562040328979492
    4. '	operator' → logprob: -12.937040328979492
    5. '.operator' → logprob: -16.187040328979492
    6. '_operator' → logprob: -16.937040328979492
    7. ' operador' → logprob: -18.187040328979492
    8. ' ' → logprob: -19.062040328979492
    9. 'Operator' → logprob: -19.312040328979492
    10. ' оператор' → logprob: -19.562040328979492

Token 267: '_stack' (ID: 35650)
  Prédit: '_stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_stack' → logprob: -5.080963092041202e-06
    2. 'stack' → logprob: -12.250004768371582
    3. 'Stack' → logprob: -16.6250057220459
    4. '_' → logprob: -16.8750057220459
    5. '_STACK' → logprob: -17.3750057220459
    6. '_operator' → logprob: -17.8750057220459
    7. 's' → logprob: -18.8750057220459
    8. '	stack' → logprob: -19.3750057220459
    9. ' stack' → logprob: -19.5000057220459
    10. '_st' → logprob: -19.5000057220459

Token 268: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00038586699520237744
    2. ':
' → logprob: -7.875385761260986
    3. '):' → logprob: -13.375386238098145
    4. '.pop' → logprob: -13.375386238098145
    5. 'and' → logprob: -14.375386238098145
    6. 'pop' → logprob: -14.375386238098145
    7. ':**' → logprob: -15.000386238098145
    8. ' :' → logprob: -15.125386238098145
    9. '.append' → logprob: -15.500386238098145
    10. '>' → logprob: -16.000385284423828

Token 269: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -1.0073387622833252
    2. ' output' → logprob: -1.0073387622833252
    3. 'output' → logprob: -2.007338762283325
    4. '   ' → logprob: -2.007338762283325
    5. '	output' → logprob: -7.132338523864746
    6. '```' → logprob: -10.382338523864746
    7. '
' → logprob: -10.632338523864746
    8. '.output' → logprob: -11.132338523864746
    9. '(output' → logprob: -11.257338523864746
    10. ' ' → logprob: -11.632338523864746

Token 270: ' output' (ID: 4733)
  Prédit: 'output'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'output' (adapté à ' output') → logprob: -0.012461740523576736
    2. ' output' → logprob: -4.7624616622924805
    3. '       ' → logprob: -5.6374616622924805
    4. '   ' → logprob: -8.26246166229248
    5. '	output' → logprob: -11.13746166229248
    6. '           ' → logprob: -12.76246166229248
    7. '$output' → logprob: -14.13746166229248
    8. 'operator' → logprob: -14.51246166229248
    9. '_output' → logprob: -15.38746166229248
    10. '.output' → logprob: -15.38746166229248

Token 271: '_queue' (ID: 25622)
  Prédit: '_queue'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_queue' → logprob: -1.0280383548888494e-06
    2. '.append' → logprob: -14.750000953674316
    3. '_stack' → logprob: -14.875000953674316
    4. 'queue' → logprob: -16.000001907348633
    5. 'Queue' → logprob: -17.500001907348633
    6. '_QUEUE' → logprob: -17.875001907348633
    7. '_' → logprob: -18.250001907348633
    8. 'append' → logprob: -18.625001907348633
    9. '_append' → logprob: -18.750001907348633
    10. '_enqueue' → logprob: -20.250001907348633

Token 272: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.014164448715746403
    2. '.' → logprob: -4.264164447784424
    3. ' .' → logprob: -15.014164924621582
    4. 'append' → logprob: -15.264164924621582
    5. '.Append' → logprob: -15.389164924621582
    6. '.app' → logprob: -15.889164924621582
    7. '.=' → logprob: -16.764163970947266
    8. '.extend' → logprob: -17.389163970947266
    9. '_append' → logprob: -19.014163970947266
    10. '.push' → logprob: -19.389163970947266

Token 273: '(operator' (ID: 145734)
  Prédit: '(operator'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(operator' → logprob: -7.493430894101039e-05
    2. 'operator' → logprob: -9.500075340270996
    3. '	operator' → logprob: -17.12507438659668
    4. '(' → logprob: -17.50007438659668
    5. ' operator' → logprob: -17.75007438659668
    6. '.operator' → logprob: -19.12507438659668
    7. '(operation' → logprob: -20.75007438659668
    8. '/operator' → logprob: -20.87507438659668
    9. '_operator' → logprob: -21.00007438659668
    10. '```' → logprob: -21.50007438659668

Token 274: '_stack' (ID: 35650)
  Prédit: '_stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_stack' → logprob: -0.032516974955797195
    2. 'operator' → logprob: -3.5325169563293457
    3. 'stack' → logprob: -6.282516956329346
    4. 'pop' → logprob: -8.157517433166504
    5. '_operator' → logprob: -8.532517433166504
    6. '.pop' → logprob: -8.782517433166504
    7. '(operator' → logprob: -8.907517433166504
    8. 's' → logprob: -10.532517433166504
    9. '()' → logprob: -10.532517433166504
    10. '(' → logprob: -11.532517433166504

Token 275: '.pop' (ID: 15746)
  Prédit: '.pop'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.pop' → logprob: -4.453737710718997e-05
    2. 'pop' → logprob: -10.750044822692871
    3. '.' → logprob: -11.000044822692871
    4. ' .' → logprob: -12.375044822692871
    5. '().' → logprob: -13.250044822692871
    6. ').' → logprob: -15.500044822692871
    7. '(pop' → logprob: -17.625043869018555
    8. '.Pop' → logprob: -18.000043869018555
    9. ' pop' → logprob: -18.750043869018555
    10. '	pop' → logprob: -18.875043869018555

Token 276: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.2538851201534271
    2. '()' → logprob: -1.5038851499557495
    3. ')' → logprob: -6.253885269165039
    4. '())
' → logprob: -11.003885269165039
    5. '()
' → logprob: -11.628885269165039
    6. '())

' → logprob: -13.128885269165039
    7. ' ())' → logprob: -13.378885269165039
    8. '(' → logprob: -14.378885269165039
    9. '()]' → logprob: -14.628885269165039
    10. '();)' → logprob: -15.253885269165039

Token 277: '   ' (ID: 271)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.4451392889022827
    2. '   ' → logprob: -1.4451392889022827
    3. ' stack' → logprob: -2.5701394081115723
    4. '
' → logprob: -3.9451394081115723
    5. 'def' → logprob: -3.9451394081115723
    6. '    
' → logprob: -5.945139408111572
    7. 'result' → logprob: -6.070139408111572
    8. 'eval' → logprob: -6.195139408111572
    9. 'value' → logprob: -7.570139408111572
    10. '#' → logprob: -7.945139408111572

Token 278: ' #' (ID: 1069)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.06194863095879555
    2. ' stack' → logprob: -3.311948537826538
    3. 'def' → logprob: -3.811948537826538
    4. 'eval' → logprob: -7.186948776245117
    5. '#' (adapté à ' #') → logprob: -8.186948776245117
    6. '   ' → logprob: -8.811948776245117
    7. 'result' → logprob: -9.311948776245117
    8. ' def' → logprob: -9.436948776245117
    9. 'value' → logprob: -9.561948776245117
    10. '
' → logprob: -10.436948776245117

Token 279: ' Evaluate' (ID: 95819)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.6281852722167969
    2. 'def' → logprob: -1.3781852722167969
    3. 'eval' → logprob: -2.003185272216797
    4. ' stack' → logprob: -2.628185272216797
    5. ' eval' → logprob: -6.003185272216797
    6. 'evaluation' → logprob: -6.378185272216797
    7. ' def' → logprob: -6.628185272216797
    8. '#' → logprob: -7.003185272216797
    9. ' evaluation' → logprob: -7.628185272216797
    10. 'value' → logprob: -9.253185272216797

Token 280: ' the' (ID: 290)
  Prédit: ' stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.5814347267150879
    2. 'stack' → logprob: -0.8314347267150879
    3. ' the' → logprob: -5.956434726715088
    4. '_stack' → logprob: -6.706434726715088
    5. '   ' → logprob: -7.581434726715088
    6. ' postfix' → logprob: -7.581434726715088
    7. 'post' → logprob: -8.08143424987793
    8. 'eval' → logprob: -9.08143424987793
    9. 'def' → logprob: -9.70643424987793
    10. 'the' → logprob: -10.33143424987793

Token 281: ' R' (ID: 460)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.029251758009195328
    2. ' stack' → logprob: -3.77925181388855
    3. 'def' → logprob: -5.779251575469971
    4. 'post' → logprob: -6.904251575469971
    5. 'evaluation' → logprob: -7.279251575469971
    6. '_stack' → logprob: -7.904251575469971
    7. 'result' → logprob: -8.404252052307129
    8. 'output' → logprob: -8.529252052307129
    9. 'value' → logprob: -8.904252052307129
    10. 'eval' → logprob: -9.529252052307129

Token 282: 'PN' (ID: 14513)
  Prédit: 'PN'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'PN' → logprob: -0.3461184501647949
    2. 'pn' → logprob: -1.346118450164795
    3. 'output' → logprob: -3.596118450164795
    4. 'post' → logprob: -5.596118450164795
    5. ' output' → logprob: -7.471118450164795
    6. '   ' → logprob: -8.596118927001953
    7. '```' → logprob: -9.221118927001953
    8. '``' → logprob: -9.596118927001953
    9. '  ' → logprob: -10.096118927001953
    10. 'p' → logprob: -10.471118927001953

Token 283: ' expression' (ID: 12973)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.5866655707359314
    2. ' stack' → logprob: -0.8366655707359314
    3. '   ' → logprob: -5.336665630340576
    4. '_stack' → logprob: -5.586665630340576
    5. 'eval' → logprob: -6.586665630340576
    6. ' eval' → logprob: -8.586665153503418
    7. 'evaluation' → logprob: -8.711665153503418
    8. '    
' → logprob: -9.211665153503418
    9. ' evaluation' → logprob: -9.586665153503418
    10. '.stack' → logprob: -10.211665153503418

Token 284: '
' (ID: 198)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.7062329649925232
    2. ' stack' → logprob: -1.206233024597168
    3. '   ' → logprob: -1.581233024597168
    4. 'eval' → logprob: -7.206233024597168
    5. ' eval' → logprob: -8.831233024597168
    6. 'evaluation' → logprob: -8.831233024597168
    7. '    
' → logprob: -8.956233024597168
    8. ' evaluation' → logprob: -9.456233024597168
    9. '	stack' → logprob: -9.581233024597168
    10. '_stack' → logprob: -9.706233024597168

Token 285: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4241759479045868
    2. ' stack' → logprob: -1.1741759777069092
    3. 'stack' → logprob: -3.424175977706909
    4. ' eval' → logprob: -6.29917573928833
    5. 'eval' → logprob: -7.04917573928833
    6. ' evaluation' → logprob: -7.42417573928833
    7. 'evaluation' → logprob: -8.299176216125488
    8. '    
' → logprob: -8.799176216125488
    9. '	stack' → logprob: -9.674176216125488
    10. ' result' → logprob: -9.924176216125488

Token 286: ' stack' (ID: 10825)
  Prédit: ' stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.6966545581817627
    2. 'stack' (adapté à ' stack') → logprob: -0.6966545581817627
    3. 'eval' → logprob: -5.946654319763184
    4. ' eval' → logprob: -7.071654319763184
    5. ' evaluation' → logprob: -11.321654319763184
    6. 'r' → logprob: -11.446654319763184
    7. 'evaluation' → logprob: -12.321654319763184
    8. '   ' → logprob: -12.446654319763184
    9. 'value' → logprob: -12.571654319763184
    10. ' r' → logprob: -13.696654319763184

Token 287: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.10029520094394684
    2. '=' → logprob: -2.350295305252075
    3. '_' → logprob: -9.850295066833496
    4. '=[]' → logprob: -10.350295066833496
    5. '[' → logprob: -13.475295066833496
    6. '[:]' → logprob: -14.350295066833496
    7. '.' → logprob: -14.725295066833496
    8. ' ' → logprob: -14.850295066833496
    9. ':' → logprob: -15.225295066833496
    10. ')' → logprob: -15.600295066833496

Token 288: ' []
' (ID: 8911)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.0002636006975080818
    2. ' []' → logprob: -8.250263214111328
    3. '[]
' → logprob: -13.250263214111328
    4. '[]}' → logprob: -15.000263214111328
    5. '[' → logprob: -16.375263214111328
    6. '=[]' → logprob: -16.875263214111328
    7. '[]>' → logprob: -17.000263214111328
    8. '[]

' → logprob: -17.500263214111328
    9. '([]' → logprob: -17.875263214111328
    10. '```' → logprob: -18.125263214111328

Token 289: '   ' (ID: 271)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.17587701976299286
    2. '   ' → logprob: -2.175877094268799
    3. 'for' → logprob: -3.050877094268799
    4. ' 
' → logprob: -8.80087661743164
    5. '    
' → logprob: -9.05087661743164
    6. '<|end|>' → logprob: -9.92587661743164
    7. ' ' → logprob: -10.05087661743164
    8. '	for' → logprob: -10.30087661743164
    9. ' token' → logprob: -10.92587661743164
    10. '  
' → logprob: -11.80087661743164

Token 290: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.1002107709646225
    2. ' for' → logprob: -2.350210666656494
    3. '   ' → logprob: -12.475211143493652
    4. '	for' → logprob: -15.350211143493652
    5. 'For' → logprob: -16.350210189819336
    6. ' 
' → logprob: -17.600210189819336
    7. '    
' → logprob: -17.850210189819336
    8. '_for' → logprob: -17.850210189819336
    9. '
' → logprob: -18.350210189819336
    10. 'token' → logprob: -18.475210189819336

Token 291: ' token' (ID: 6602)
  Prédit: 'token'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'token' → logprob: -0.0024758970830589533
    2. ' token' → logprob: -6.002475738525391
    3. 'tok' → logprob: -16.62747573852539
    4. '(token' → logprob: -18.00247573852539
    5. 't' → logprob: -18.25247573852539
    6. '	token' → logprob: -18.37747573852539
    7. 'item' → logprob: -18.87747573852539
    8. '_token' → logprob: -19.37747573852539
    9. '.token' → logprob: -20.25247573852539
    10. 'symbol' → logprob: -20.62747573852539

Token 292: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.01105206273496151
    2. 'in' → logprob: -4.511052131652832
    3. ' ' → logprob: -13.511052131652832
    4. '	in' → logprob: -14.386052131652832
    5. '  ' → logprob: -14.511052131652832
    6. 's' → logprob: -14.636052131652832
    7. ':' → logprob: -15.261052131652832
    8. '   ' → logprob: -15.886052131652832
    9. '_in' → logprob: -15.886052131652832
    10. ',' → logprob: -16.136051177978516

Token 293: ' output' (ID: 4733)
  Prédit: 'output'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'output' → logprob: -0.0024756586644798517
    2. ' output' → logprob: -6.002475738525391
    3. '(output' → logprob: -17.62747573852539
    4. ' ' → logprob: -17.75247573852539
    5. '   ' → logprob: -17.87747573852539
    6. '	output' → logprob: -18.50247573852539
    7. '$output' → logprob: -20.50247573852539
    8. '  ' → logprob: -20.87747573852539
    9. 'Output' → logprob: -21.25247573852539
    10. 'out' → logprob: -21.25247573852539

Token 294: '_queue' (ID: 25622)
  Prédit: '_queue'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_queue' → logprob: -0.0002993544621858746
    2. 'queue' → logprob: -8.125299453735352
    3. 'Queue' → logprob: -13.125299453735352
    4. '_QUEUE' → logprob: -14.625299453735352
    5. '_stack' → logprob: -15.500299453735352
    6. '(queue' → logprob: -15.875299453735352
    7. ' queue' → logprob: -15.875299453735352
    8. 'in' → logprob: -16.12529945373535
    9. 'QUEUE' → logprob: -16.50029945373535
    10. '   ' → logprob: -17.00029945373535

Token 295: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.03368581458926201
    2. ':
' → logprob: -3.4086859226226807
    3. '   ' → logprob: -10.533685684204102
    4. '):
' → logprob: -12.658685684204102
    5. '[' → logprob: -13.033685684204102
    6. '):' → logprob: -13.283685684204102
    7. ' :' → logprob: -13.533685684204102
    8. ',' → logprob: -13.533685684204102
    9. ':

' → logprob: -13.783685684204102
    10. ' :
' → logprob: -14.283685684204102

Token 296: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.03165161982178688
    2. ' if' → logprob: -3.531651735305786
    3. '   ' → logprob: -7.281651496887207
    4. '    ' → logprob: -7.656651496887207
    5. 'if' → logprob: -8.406651496887207
    6. '        
' → logprob: -8.656651496887207
    7. '<|end|>' → logprob: -9.531651496887207
    8. ' ' → logprob: -9.656651496887207
    9. ' 
' → logprob: -10.156651496887207
    10. '        ' → logprob: -10.156651496887207

Token 297: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.006572311744093895
    2. '       ' → logprob: -5.131572246551514
    3. 'if' (adapté à ' if') → logprob: -7.381572246551514
    4. '   ' → logprob: -11.131572723388672
    5. '    ' → logprob: -12.381572723388672
    6. '        ' → logprob: -14.131572723388672
    7. ' ' → logprob: -14.631572723388672
    8. '	if' → logprob: -15.006572723388672
    9. '           ' → logprob: -15.381572723388672
    10. ' ' → logprob: -16.006572723388672

Token 298: ' isinstance' (ID: 25889)
  Prédit: ' isinstance'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' isinstance' → logprob: -0.0007105246186256409
    2. 'is' → logprob: -7.250710487365723
    3. 'type' → logprob: -14.625710487365723
    4. ' type' → logprob: -15.750710487365723
    5. ' is' → logprob: -18.62571144104004
    6. 'typeof' → logprob: -19.37571144104004
    7. '(is' → logprob: -20.37571144104004
    8. 'token' → logprob: -20.50071144104004
    9. 'Is' → logprob: -21.00071144104004
    10. ' ' → logprob: -21.12571144104004

Token 299: '(token' (ID: 23460)
  Prédit: '(token'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(token' → logprob: -0.0001290454383706674
    2. 'token' → logprob: -9.000128746032715
    3. '(' → logprob: -12.750128746032715
    4. ' token' → logprob: -13.000128746032715
    5. ' (' → logprob: -14.875128746032715
    6. '(stack' → logprob: -17.25012969970703
    7. '[token' → logprob: -17.25012969970703
    8. '	token' → logprob: -18.12512969970703
    9. '(int' → logprob: -19.25012969970703
    10. 'int' → logprob: -19.75012969970703

Token 300: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00014334988372866064
    2. ',int' → logprob: -9.125143051147461
    3. ' ,' → logprob: -11.125143051147461
    4. 'int' → logprob: -11.125143051147461
    5. '(int' → logprob: -12.250143051147461
    6. '(' → logprob: -16.12514305114746
    7. '   ' → logprob: -17.75014305114746
    8. 'token' → logprob: -18.00014305114746
    9. '[int' → logprob: -18.12514305114746
    10. ',
' → logprob: -18.25014305114746

Token 301: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.001170225441455841
    2. ' int' → logprob: -6.7511701583862305
    3. '(int' → logprob: -18.251171112060547
    4. '<int' → logprob: -19.501171112060547
    5. ' ' → logprob: -19.626171112060547
    6. '   ' → logprob: -20.126171112060547
    7. '	int' → logprob: -20.251171112060547
    8. ':int' → logprob: -21.001171112060547
    9. '```' → logprob: -21.001171112060547
    10. '=int' → logprob: -21.376171112060547

Token 302: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.12694290280342102
    2. '):
' → logprob: -2.1269428730010986
    3. ':' → logprob: -11.37694263458252
    4. '):
' → logprob: -13.50194263458252
    5. ')' → logprob: -14.12694263458252
    6. '):

' → logprob: -14.62694263458252
    7. ' ):' → logprob: -15.00194263458252
    8. '   ' → logprob: -15.25194263458252
    9. ':
' → logprob: -15.75194263458252
    10. '       ' → logprob: -16.251943588256836

Token 303: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.025662852451205254
    2. '       ' → logprob: -4.025662899017334
    3. 'stack' → logprob: -5.275662899017334
    4. ' stack' → logprob: -6.275662899017334
    5. '(stack' → logprob: -8.150662422180176
    6. '_stack' → logprob: -9.775662422180176
    7. '```' → logprob: -10.150662422180176
    8. '.stack' → logprob: -10.775662422180176
    9. '	stack' → logprob: -10.900662422180176
    10. '   ' → logprob: -11.525662422180176

Token 304: ' stack' (ID: 10825)
  Prédit: ' stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.31786012649536133
    2. 'stack' (adapté à ' stack') → logprob: -1.3178601264953613
    3. '       ' → logprob: -5.442860126495361
    4. '           ' → logprob: -9.192859649658203
    5. '	stack' → logprob: -9.442859649658203
    6. '   ' → logprob: -9.567859649658203
    7. '(stack' → logprob: -12.817859649658203
    8. '.stack' → logprob: -13.067859649658203
    9. '```' → logprob: -13.567859649658203
    10. '_stack' → logprob: -13.942859649658203

Token 305: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.011048762127757072
    2. '.' → logprob: -4.511048793792725
    3. '.app' → logprob: -14.386048316955566
    4. ' .' → logprob: -15.511048316955566
    5. 'append' → logprob: -15.636048316955566
    6. '.ap' → logprob: -17.761049270629883
    7. '.push' → logprob: -18.011049270629883
    8. '_append' → logprob: -18.886049270629883
    9. '.extend' → logprob: -19.136049270629883
    10. '.Append' → logprob: -19.511049270629883

Token 306: '(token' (ID: 23460)
  Prédit: 'token'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'token' → logprob: -0.009518304839730263
    2. ' token' → logprob: -4.759518146514893
    3. '(token' → logprob: -7.009518146514893
    4. '	token' → logprob: -16.509517669677734
    5. '[token' → logprob: -19.009517669677734
    6. '_token' → logprob: -20.009517669677734
    7. 'Token' → logprob: -20.009517669677734
    8. '.token' → logprob: -21.259517669677734
    9. 'tok' → logprob: -22.259517669677734
    10. 'tensor' → logprob: -23.384517669677734

Token 307: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00199917727150023
    2. '       ' → logprob: -6.376999378204346
    3. ')
' → logprob: -8.751998901367188
    4. ' )' → logprob: -9.876998901367188
    5. 'elif' → logprob: -10.751998901367188
    6. '           ' → logprob: -11.001998901367188
    7. '```' → logprob: -11.501998901367188
    8. '   ' → logprob: -11.876998901367188
    9. '<|end|>' → logprob: -12.001998901367188
    10. '
' → logprob: -12.376998901367188

Token 308: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0009730404708534479
    2. ' else' → logprob: -7.375973224639893
    3. ' elif' → logprob: -8.750972747802734
    4. 'else' → logprob: -9.250972747802734
    5. 'elif' → logprob: -9.375972747802734
    6. '	' → logprob: -12.250972747802734
    7. '   ' → logprob: -14.000972747802734
    8. '           ' → logprob: -14.625972747802734
    9. ' ' → logprob: -15.000972747802734
    10. '	elif' → logprob: -15.375972747802734

Token 309: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.27552467584609985
    2. 'else' (adapté à ' else') → logprob: -1.525524616241455
    3. ' elif' → logprob: -4.400524616241455
    4. 'elif' → logprob: -4.525524616241455
    5. '       ' → logprob: -8.525525093078613
    6. '   ' → logprob: -11.025525093078613
    7. '	else' → logprob: -13.275525093078613
    8. '	elif' → logprob: -13.775525093078613
    9. '    ' → logprob: -14.025525093078613
    10. '     ' → logprob: -15.775525093078613

Token 310: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0035848680417984724
    2. ':
' → logprob: -6.003584861755371
    3. ' :' → logprob: -7.003584861755371
    4. '           ' → logprob: -9.503584861755371
    5. '):' → logprob: -10.378584861755371
    6. ' :
' → logprob: -10.628584861755371
    7. '       ' → logprob: -11.003584861755371
    8. '[' → logprob: -11.378584861755371
    9. '        ' → logprob: -11.753584861755371
    10. ')' → logprob: -11.753584861755371

Token 311: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.039343059062957764
    2. '       ' → logprob: -3.4143431186676025
    3. ' if' → logprob: -6.039342880249023
    4. '        ' → logprob: -6.789342880249023
    5. '   ' → logprob: -6.914342880249023
    6. '    ' → logprob: -7.664342880249023
    7. '```' → logprob: -8.539342880249023
    8. 'if' → logprob: -9.164342880249023
    9. ' operator' → logprob: -9.539342880249023
    10. '	   ' → logprob: -9.664342880249023

Token 312: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' (adapté à ' b') → logprob: -0.1658317893743515
    2. ' b' → logprob: -1.9158318042755127
    3. ' right' → logprob: -5.415831565856934
    4. 'right' → logprob: -7.165831565856934
    5. '   ' → logprob: -8.290831565856934
    6. 'a' → logprob: -10.165831565856934
    7. ' rhs' → logprob: -10.290831565856934
    8. 'rhs' → logprob: -10.415831565856934
    9. ' a' → logprob: -12.040831565856934
    10. ' op' → logprob: -12.415831565856934

Token 313: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.03804183006286621
    2. '=' → logprob: -3.288041830062866
    3. ' ' → logprob: -16.038042068481445
    4. '  ' → logprob: -16.538042068481445
    5. ')' → logprob: -16.788042068481445
    6. ' =
' → logprob: -17.413042068481445
    7. '    ' → logprob: -18.413042068481445
    8. ',' → logprob: -18.663042068481445
    9. ' =)' → logprob: -18.788042068481445
    10. '.' → logprob: -19.163042068481445

Token 314: ' stack' (ID: 10825)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.0067154900170862675
    2. ' stack' → logprob: -5.006715297698975
    3. '	stack' → logprob: -16.881715774536133
    4. '(stack' → logprob: -18.131715774536133
    5. '.stack' → logprob: -18.756715774536133
    6. 'stackoverflow' → logprob: -20.506715774536133
    7. '_stack' → logprob: -20.881715774536133
    8. '```' → logprob: -21.131715774536133
    9. ' ' → logprob: -21.631715774536133
    10. '   ' → logprob: -21.756715774536133

Token 315: '.pop' (ID: 15746)
  Prédit: '.pop'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.pop' → logprob: -1.688212614681106e-05
    2. '.' → logprob: -11.125017166137695
    3. 'pop' → logprob: -13.125017166137695
    4. ' .' → logprob: -18.000017166137695
    5. '[-' → logprob: -18.000017166137695
    6. '-pop' → logprob: -18.625017166137695
    7. 'Pop' → logprob: -18.875017166137695
    8. '.append' → logprob: -18.875017166137695
    9. '.p' → logprob: -19.125017166137695
    10. '_pop' → logprob: -19.375017166137695

Token 316: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0162078607827425
    2. '()
' → logprob: -4.141207695007324
    3. '()
' → logprob: -10.266207695007324
    4. ' ()' → logprob: -10.641207695007324
    5. '();' → logprob: -10.641207695007324
    6. ')' → logprob: -10.766207695007324
    7. '           ' → logprob: -11.266207695007324
    8. '(' → logprob: -11.391207695007324
    9. '()

' → logprob: -11.391207695007324
    10. '()\' → logprob: -11.766207695007324

Token 317: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.02430144138634205
    2. ' 
' → logprob: -4.274301528930664
    3. '            ' → logprob: -5.399301528930664
    4. '            
' → logprob: -6.649301528930664
    5. '<|end|>' → logprob: -7.024301528930664
    6. '[' → logprob: -7.649301528930664
    7. ' ' → logprob: -7.649301528930664
    8. 'a' → logprob: -7.899301528930664
    9. '```' → logprob: -7.899301528930664
    10. '     
' → logprob: -8.149301528930664

Token 318: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' (adapté à ' a') → logprob: -0.429189532995224
    2. ' a' → logprob: -1.0541895627975464
    3. ' 
' → logprob: -8.429189682006836
    4. ' ' → logprob: -8.804189682006836
    5. ' ' → logprob: -9.554189682006836
    6. ' stack' → logprob: -10.804189682006836
    7. ' `' → logprob: -11.804189682006836
    8. 'stack' → logprob: -12.054189682006836
    9. '            ' → logprob: -12.429189682006836
    10. '```' → logprob: -12.929189682006836

Token 319: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0788901224732399
    2. '=' → logprob: -2.578890085220337
    3. ' ' → logprob: -15.328889846801758
    4. ' ' → logprob: -16.703889846801758
    5. ' =
' → logprob: -17.328889846801758
    6. ')' → logprob: -17.828889846801758
    7. ' stack' → logprob: -18.078889846801758
    8. '<|end|>' → logprob: -19.328889846801758
    9. '(stack' → logprob: -19.328889846801758
    10. '.' → logprob: -19.453889846801758

Token 320: ' stack' (ID: 10825)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.10020710527896881
    2. ' stack' → logprob: -2.3502070903778076
    3. '	stack' → logprob: -15.225207328796387
    4. '(stack' → logprob: -15.725207328796387
    5. '.stack' → logprob: -17.60020637512207
    6. ' ' → logprob: -18.60020637512207
    7. '_stack' → logprob: -18.72520637512207
    8. 'stackoverflow' → logprob: -19.22520637512207
    9. 'Stack' → logprob: -19.60020637512207
    10. 'st' → logprob: -21.22520637512207

Token 321: '.pop' (ID: 15746)
  Prédit: '.pop'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.pop' → logprob: -4.036524842376821e-05
    2. 'pop' → logprob: -10.500040054321289
    3. '.' → logprob: -11.750040054321289
    4. '.append' → logprob: -12.750040054321289
    5. ' .' → logprob: -13.375040054321289
    6. '_pop' → logprob: -16.75004005432129
    7. 'op' → logprob: -16.75004005432129
    8. '	pop' → logprob: -17.00004005432129
    9. 'Pop' → logprob: -17.12504005432129
    10. '.stack' → logprob: -17.25004005432129

Token 322: '()
' (ID: 1234)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.029450982809066772
    2. ')' → logprob: -3.6544508934020996
    3. '<|end|>' → logprob: -6.0294508934021
    4. '            ' → logprob: -8.779451370239258
    5. '               ' → logprob: -9.029451370239258
    6. ')
' → logprob: -9.279451370239258
    7. '       ' → logprob: -9.654451370239258
    8. '          ' → logprob: -9.904451370239258
    9. '<|end|>' → logprob: -10.279451370239258
    10. '            
' → logprob: -10.279451370239258

Token 323: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.001050434890203178
    2. ' if' → logprob: -7.0010504722595215
    3. '            
' → logprob: -9.251049995422363
    4. 'if' → logprob: -10.501049995422363
    5. '		' → logprob: -12.626049995422363
    6. '            ' → logprob: -13.001049995422363
    7. ' 
' → logprob: -13.126049995422363
    8. '          ' → logprob: -13.126049995422363
    9. '           
' → logprob: -13.626049995422363
    10. '	       ' → logprob: -14.126049995422363

Token 324: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.4496474266052246
    2. ' if' → logprob: -1.1996474266052246
    3. '           ' → logprob: -2.8246474266052246
    4. 'stack' → logprob: -7.449647426605225
    5. 'operator' → logprob: -7.824647426605225
    6. ' stack' → logprob: -8.699647903442383
    7. 'result' → logprob: -8.824647903442383
    8. '            ' → logprob: -9.574647903442383
    9. ' operator' → logprob: -10.199647903442383
    10. '            
' → logprob: -10.574647903442383

Token 325: ' token' (ID: 6602)
  Prédit: ' token'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' token' → logprob: -0.20143544673919678
    2. 'token' → logprob: -1.7014354467391968
    3. '	token' → logprob: -11.076435089111328
    4. '(token' → logprob: -12.701435089111328
    5. '[token' → logprob: -13.701435089111328
    6. '_token' → logprob: -14.201435089111328
    7. ' ' → logprob: -14.701435089111328
    8. '   ' → logprob: -15.201435089111328
    9. '  ' → logprob: -15.201435089111328
    10. 'Token' → logprob: -15.576435089111328

Token 326: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.4743463099002838
    2. '==' → logprob: -0.9743462800979614
    3. '=='' → logprob: -8.474346160888672
    4. '=' → logprob: -10.599346160888672
    5. '[' → logprob: -11.724346160888672
    6. ''' → logprob: -11.974346160888672
    7. ')' → logprob: -12.349346160888672
    8. 'space' → logprob: -12.974346160888672
    9. ' =='' → logprob: -12.974346160888672
    10. '===' → logprob: -13.099346160888672

Token 327: ' '+' (ID: 30120)
  Prédit: ''+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''+' → logprob: -0.004186790436506271
    2. ''' → logprob: -5.504186630249023
    3. '+' → logprob: -9.379186630249023
    4. ''*' → logprob: -10.754186630249023
    5. ''>' → logprob: -14.129186630249023
    6. '"+' → logprob: -14.254186630249023
    7. ' '+'' → logprob: -14.379186630249023
    8. ' '+' → logprob: -15.129186630249023
    9. '"+"' → logprob: -15.129186630249023
    10. ''/' → logprob: -16.879186630249023

Token 328: '':
' (ID: 7669)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.04880593717098236
    2. ':
' → logprob: -3.0488059520721436
    3. '':' → logprob: -8.798806190490723
    4. '':
' → logprob: -9.923806190490723
    5. '):
' → logprob: -12.048806190490723
    6. '):' → logprob: -12.673806190490723
    7. '=' → logprob: -13.298806190490723
    8. '           ' → logprob: -13.548806190490723
    9. ':
' → logprob: -13.673806190490723
    10. ' :' → logprob: -14.548806190490723

Token 329: '               ' (ID: 506)
  Prédit: ' stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.7268313765525818
    2. '               ' → logprob: -0.8518313765525818
    3. 'stack' → logprob: -3.4768314361572266
    4. '           ' → logprob: -3.4768314361572266
    5. ':' → logprob: -5.226831436157227
    6. '            ' → logprob: -5.351831436157227
    7. '   ' → logprob: -5.601831436157227
    8. ' a' → logprob: -5.851831436157227
    9. '(stack' → logprob: -6.226831436157227
    10. '<|end|>' → logprob: -6.726831436157227

Token 330: ' stack' (ID: 10825)
  Prédit: ' stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.0789693221449852
    2. 'stack' (adapté à ' stack') → logprob: -2.5789692401885986
    3. '               ' → logprob: -9.82896900177002
    4. '           ' → logprob: -11.70396900177002
    5. '_stack' → logprob: -11.95396900177002
    6. '(stack' → logprob: -12.82896900177002
    7. '                   ' → logprob: -13.07896900177002
    8. '	stack' → logprob: -13.20396900177002
    9. ' a' → logprob: -13.70396900177002
    10. '.stack' → logprob: -13.70396900177002

Token 331: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.038054682314395905
    2. '.' → logprob: -3.2880547046661377
    3. '.app' → logprob: -11.538054466247559
    4. '.pop' → logprob: -13.413054466247559
    5. '.ap' → logprob: -14.163054466247559
    6. ' .' → logprob: -14.288054466247559
    7. 'append' → logprob: -14.538054466247559
    8. '.extend' → logprob: -16.413055419921875
    9. '.push' → logprob: -16.663055419921875
    10. '_append' → logprob: -17.288055419921875

Token 332: '(a' (ID: 6271)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.018150413408875465
    2. ' a' → logprob: -4.018150329589844
    3. '(a' → logprob: -14.643150329589844
    4. '	a' → logprob: -19.018150329589844
    5. '   ' → logprob: -20.143150329589844
    6. '(' → logprob: -21.643150329589844
    7. ' (' → logprob: -23.268150329589844
    8. '_a' → logprob: -23.393150329589844
    9. ' ' → logprob: -23.518150329589844
    10. '```' → logprob: -24.643150329589844

Token 333: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.25194141268730164
    2. '+' → logprob: -1.501941442489624
    3. '+b' → logprob: -11.376941680908203
    4. ' ' → logprob: -14.626941680908203
    5. ')' → logprob: -15.876941680908203
    6. ' ' → logprob: -16.251941680908203
    7. ' plus' → logprob: -16.626941680908203
    8. ' +
' → logprob: -17.001941680908203
    9. '+a' → logprob: -17.001941680908203
    10. '+B' → logprob: -18.251941680908203

Token 334: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.006715370807796717
    2. ' b' → logprob: -5.006715297698975
    3. ' ' → logprob: -23.506715774536133
    4. '	b' → logprob: -24.006715774536133
    5. ')b' → logprob: -25.131715774536133
    6. '_b' → logprob: -27.256715774536133
    7. ' б' → logprob: -27.381715774536133
    8. ' ' → logprob: -27.631715774536133
    9. ')' → logprob: -27.756715774536133
    10. '   ' → logprob: -28.131715774536133

Token 335: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0002969703928101808
    2. ')
' → logprob: -8.125296592712402
    3. '           ' → logprob: -14.625296592712402
    4. '               ' → logprob: -15.500296592712402
    5. ' )' → logprob: -15.500296592712402
    6. '),' → logprob: -17.00029754638672
    7. ')

' → logprob: -17.00029754638672
    8. ')
' → logprob: -17.37529754638672
    9. '*' → logprob: -18.12529754638672
    10. '')' → logprob: -18.12529754638672

Token 336: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.14669841527938843
    2. 'elif' → logprob: -2.021698474884033
    3. ' elif' → logprob: -6.146698474884033
    4. '<|end|>' → logprob: -6.521698474884033
    5. '            
' → logprob: -8.771697998046875
    6. '       ' → logprob: -9.771697998046875
    7. '
' → logprob: -10.521697998046875
    8. '```' → logprob: -10.646697998046875
    9. '               ' → logprob: -10.896697998046875
    10. '          ' → logprob: -11.021697998046875

Token 337: ' elif' (ID: 9497)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.7985002398490906
    2. 'elif' (adapté à ' elif') → logprob: -0.7985002398490906
    3. ' elif' → logprob: -2.5485002994537354
    4. ' 
' → logprob: -5.048500061035156
    5. '            ' → logprob: -5.298500061035156
    6. '            
' → logprob: -6.048500061035156
    7. '```' → logprob: -6.548500061035156
    8. '               ' → logprob: -6.673500061035156
    9. ')' → logprob: -6.798500061035156
    10. '<|end|>' → logprob: -7.298500061035156

Token 338: ' token' (ID: 6602)
  Prédit: 'token'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'token' → logprob: -0.4740826487541199
    2. ' token' → logprob: -0.9740826487541199
    3. '(token' → logprob: -13.224082946777344
    4. '[token' → logprob: -13.224082946777344
    5. '	token' → logprob: -14.349082946777344
    6. ''' → logprob: -14.349082946777344
    7. ' ' → logprob: -15.349082946777344
    8. '.token' → logprob: -15.974082946777344
    9. '               ' → logprob: -16.349082946777344
    10. 'Token' → logprob: -16.724082946777344

Token 339: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.00975809432566166
    2. '==' → logprob: -4.634757995605469
    3. '=' → logprob: -14.509757995605469
    4. '=='' → logprob: -14.634757995605469
    5. '            ' → logprob: -14.884757995605469
    6. '           ' → logprob: -15.509757995605469
    7. ' ' → logprob: -15.634757995605469
    8. '[' → logprob: -16.13475799560547
    9. ' =' → logprob: -16.13475799560547
    10. ' =='' → logprob: -16.50975799560547

Token 340: ' '-' (ID: 17489)
  Prédit: ''-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''-' → logprob: -8.256334695033729e-05
    2. '-' → logprob: -9.625082969665527
    3. ' '-' → logprob: -12.000082969665527
    4. ''*' → logprob: -12.000082969665527
    5. ' '-'' → logprob: -12.750082969665527
    6. '"-' → logprob: -14.500082969665527
    7. ''' → logprob: -15.000082969665527
    8. '('-' → logprob: -15.375082969665527
    9. '’-' → logprob: -16.25008201599121
    10. '   ' → logprob: -17.75008201599121

Token 341: '':
' (ID: 7669)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.7882133722305298
    2. ':
' → logprob: -1.0382133722305298
    3. '               ' → logprob: -1.6632133722305298
    4. '           ' → logprob: -7.78821325302124
    5. ' :
' → logprob: -7.78821325302124
    6. '            ' → logprob: -8.663213729858398
    7. '                ' → logprob: -8.913213729858398
    8. '              ' → logprob: -8.913213729858398
    9. ' :' → logprob: -9.288213729858398
    10. '             ' → logprob: -9.538213729858398

Token 342: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.0054398467764258385
    2. ' stack' → logprob: -5.380439758300781
    3. 'stack' → logprob: -7.630439758300781
    4. '           ' → logprob: -8.880439758300781
    5. '   ' → logprob: -9.505439758300781
    6. '```' → logprob: -10.380439758300781
    7. '(stack' → logprob: -11.130439758300781
    8. '                ' → logprob: -11.255439758300781
    9. ' ' → logprob: -11.505439758300781
    10. '                   ' → logprob: -11.755439758300781

Token 343: ' stack' (ID: 10825)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' (adapté à ' stack') → logprob: -0.20141898095607758
    2. ' stack' → logprob: -1.7014189958572388
    3. '               ' → logprob: -12.57641887664795
    4. '	stack' → logprob: -13.70141887664795
    5. '   ' → logprob: -14.82641887664795
    6. '(stack' → logprob: -14.95141887664795
    7. '           ' → logprob: -16.076419830322266
    8. '.stack' → logprob: -16.201419830322266
    9. 'Stack' → logprob: -16.451419830322266
    10. '_stack' → logprob: -16.701419830322266

Token 344: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.004687868524342775
    2. '.' → logprob: -6.129687786102295
    3. 'append' → logprob: -6.629687786102295
    4. ' .' → logprob: -7.004687786102295
    5. '               ' → logprob: -9.629688262939453
    6. '           ' → logprob: -9.629688262939453
    7. '```' → logprob: -9.754688262939453
    8. ' append' → logprob: -10.379688262939453
    9. '.stack' → logprob: -11.504688262939453
    10. '-' → logprob: -12.004688262939453

Token 345: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.00015955790877342224
    2. 'a' → logprob: -8.75015926361084
    3. '(' → logprob: -13.75015926361084
    4. ' a' → logprob: -17.500160217285156
    5. '(
' → logprob: -19.250160217285156
    6. ' (' → logprob: -19.750160217285156
    7. '   ' → logprob: -21.250160217285156
    8. '```' → logprob: -22.875160217285156
    9. '(A' → logprob: -23.000160217285156
    10. '((' → logprob: -23.000160217285156

Token 346: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.00018280261429026723
    2. '-' → logprob: -8.62518310546875
    3. ' ' → logprob: -12.87518310546875
    4. ' ' → logprob: -14.50018310546875
    5. '-b' → logprob: -16.87518310546875
    6. '[' → logprob: -18.50018310546875
    7. 'a' → logprob: -18.75018310546875
    8. ')' → logprob: -18.87518310546875
    9. ' +' → logprob: -18.87518310546875
    10. ' minus' → logprob: -19.12518310546875

Token 347: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.12692810595035553
    2. ' b' → logprob: -2.1269280910491943
    3. '	b' → logprob: -21.251928329467773
    4. ')b' → logprob: -21.376928329467773
    5. ' ' → logprob: -21.626928329467773
    6. ' б' → logprob: -22.751928329467773
    7. '```' → logprob: -22.751928329467773
    8. '(b' → logprob: -23.251928329467773
    9. 's' → logprob: -23.251928329467773
    10. ' ' → logprob: -23.751928329467773

Token 348: ')
' (ID: 446)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.5303885340690613
    2. ')
' → logprob: -1.030388593673706
    3. ')' → logprob: -2.905388593673706
    4. '')
' → logprob: -11.655388832092285
    5. '               ' → logprob: -12.030388832092285
    6. ')
' → logprob: -12.280388832092285
    7. ' )
' → logprob: -13.530388832092285
    8. '       ' → logprob: -13.780388832092285
    9. 'elif' → logprob: -14.030388832092285
    10. '          ' → logprob: -14.030388832092285

Token 349: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0005607772618532181
    2. 'elif' → logprob: -7.875560760498047
    3. ' elif' → logprob: -8.625560760498047
    4. '       ' → logprob: -14.625560760498047
    5. '          ' → logprob: -15.500560760498047
    6. '		' → logprob: -15.875560760498047
    7. '```' → logprob: -16.000560760498047
    8. '<|end|>' → logprob: -16.625560760498047
    9. '	elif' → logprob: -16.750560760498047
    10. '            
' → logprob: -17.125560760498047

Token 350: ' elif' (ID: 9497)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'elif' (adapté à ' elif') → logprob: -0.048955898731946945
    2. ' elif' → logprob: -3.0489559173583984
    3. '           ' → logprob: -7.923955917358398
    4. ''' → logprob: -13.048955917358398
    5. 'else' → logprob: -14.173955917358398
    6. '```' → logprob: -14.298955917358398
    7. '       ' → logprob: -14.423955917358398
    8. '	elif' → logprob: -14.548955917358398
    9. '            ' → logprob: -14.673955917358398
    10. '            
' → logprob: -14.798955917358398

Token 351: ' token' (ID: 6602)
  Prédit: 'token'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'token' → logprob: -0.03807671740651131
    2. ' token' → logprob: -3.288076639175415
    3. ''*' → logprob: -11.413076400756836
    4. ''' → logprob: -11.538076400756836
    5. '(token' → logprob: -12.663076400756836
    6. ' ' → logprob: -13.038076400756836
    7. '	token' → logprob: -13.038076400756836
    8. '[token' → logprob: -13.038076400756836
    9. ''t' → logprob: -13.663076400756836
    10. 'b' → logprob: -13.788076400756836

Token 352: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.03817609325051308
    2. '==' → logprob: -3.2881760597229004
    3. '=='' → logprob: -9.038176536560059
    4. ' '' → logprob: -12.288176536560059
    5. ''' → logprob: -12.538176536560059
    6. ' =='' → logprob: -13.038176536560059
    7. '=' → logprob: -13.288176536560059
    8. ' ' → logprob: -13.663176536560059
    9. '           ' → logprob: -15.163176536560059
    10. '```' → logprob: -15.413176536560059

Token 353: ' '*' (ID: 34958)
  Prédit: ''*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''*' → logprob: -3.762356209335849e-05
    2. ' '*' → logprob: -10.25003719329834
    3. ' '*'' → logprob: -13.50003719329834
    4. '"*' → logprob: -14.25003719329834
    5. '('*' → logprob: -16.625038146972656
    6. '*' → logprob: -17.000038146972656
    7. ''' → logprob: -17.250038146972656
    8. ''/' → logprob: -18.625038146972656
    9. ' ' → logprob: -19.625038146972656
    10. ''m' → logprob: -20.500038146972656

Token 354: '':
' (ID: 7669)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.14740701019763947
    2. ':
' → logprob: -3.022407054901123
    3. '):
' → logprob: -3.647407054901123
    4. '):' → logprob: -3.772407054901123
    5. ')' → logprob: -4.147407054901123
    6. ''):
' → logprob: -5.147407054901123
    7. '               ' → logprob: -5.147407054901123
    8. '<|end|>' → logprob: -5.772407054901123
    9. '           ' → logprob: -6.397407054901123
    10. '':' → logprob: -6.647407054901123

Token 355: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.9027802348136902
    2. '(stack' → logprob: -1.277780294418335
    3. 'stack' → logprob: -1.527780294418335
    4. '(' → logprob: -3.027780294418335
    5. '(a' → logprob: -3.527780294418335
    6. ' stack' → logprob: -4.902780055999756
    7. '           ' → logprob: -5.277780055999756
    8. '(
' → logprob: -6.027780055999756
    9. ' (' → logprob: -6.402780055999756
    10. '   ' → logprob: -6.777780055999756

Token 356: ' stack' (ID: 10825)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' (adapté à ' stack') → logprob: -0.08009549230337143
    2. ' stack' → logprob: -2.5800955295562744
    3. '               ' → logprob: -6.830095291137695
    4. '           ' → logprob: -9.080095291137695
    5. '(stack' → logprob: -12.705095291137695
    6. '                   ' → logprob: -13.080095291137695
    7. '	stack' → logprob: -13.330095291137695
    8. '   ' → logprob: -13.705095291137695
    9. '.stack' → logprob: -14.330095291137695
    10. '```' → logprob: -14.455095291137695

Token 357: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.0003241414960939437
    2. '.' → logprob: -8.375324249267578
    3. 'append' → logprob: -9.375324249267578
    4. ' .' → logprob: -13.000324249267578
    5. ' append' → logprob: -13.000324249267578
    6. '.Append' → logprob: -13.750324249267578
    7. '_append' → logprob: -14.250324249267578
    8. '           ' → logprob: -14.500324249267578
    9. 'Append' → logprob: -14.625324249267578
    10. '.app' → logprob: -15.000324249267578

Token 358: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.0013735649408772588
    2. 'a' → logprob: -6.751373767852783
    3. '(' → logprob: -8.751373291015625
    4. ' a' → logprob: -10.126373291015625
    5. ' (' → logprob: -12.251373291015625
    6. '(
' → logprob: -15.501373291015625
    7. '   ' → logprob: -17.376373291015625
    8. '(A' → logprob: -18.251373291015625
    9. '((' → logprob: -19.001373291015625
    10. ' ' → logprob: -20.001373291015625

Token 359: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.002815217012539506
    2. '*' → logprob: -5.877815246582031
    3. ' ' → logprob: -11.752815246582031
    4. '*b' → logprob: -13.127815246582031
    5. ' ' → logprob: -14.627815246582031
    6. '  ' → logprob: -18.25281524658203
    7. ' b' → logprob: -18.25281524658203
    8. '```' → logprob: -19.25281524658203
    9. ')' → logprob: -19.62781524658203
    10. '   ' → logprob: -19.75281524658203

Token 360: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.10020667314529419
    2. ' b' → logprob: -2.3502066135406494
    3. ' ' → logprob: -20.97520637512207
    4. ')b' → logprob: -21.60020637512207
    5. '	b' → logprob: -22.10020637512207
    6. '           ' → logprob: -22.35020637512207
    7. '```' → logprob: -22.85020637512207
    8. '               ' → logprob: -23.47520637512207
    9. ' ' → logprob: -23.47520637512207
    10. '   ' → logprob: -23.47520637512207

Token 361: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.4984910488128662
    2. '           ' → logprob: -1.2484910488128662
    3. ')' → logprob: -2.248491048812866
    4. ')
' → logprob: -11.123491287231445
    5. '')
' → logprob: -11.248491287231445
    6. '```' → logprob: -11.373491287231445
    7. '               ' → logprob: -12.498491287231445
    8. '       ' → logprob: -12.623491287231445
    9. 'elif' → logprob: -12.623491287231445
    10. '')' → logprob: -13.248491287231445

Token 362: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0008025993593037128
    2. 'elif' → logprob: -7.250802516937256
    3. ' elif' → logprob: -9.375802993774414
    4. '```' → logprob: -12.250802993774414
    5. '       ' → logprob: -13.625802993774414
    6. '          ' → logprob: -14.500802993774414
    7. '<|end|>' → logprob: -14.500802993774414
    8. '		' → logprob: -14.750802993774414
    9. '            
' → logprob: -15.125802993774414
    10. '               ' → logprob: -16.250802993774414

Token 363: ' elif' (ID: 9497)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'elif' (adapté à ' elif') → logprob: -0.11885584145784378
    2. '           ' → logprob: -2.3688559532165527
    3. ' elif' → logprob: -3.9938559532165527
    4. 'else' → logprob: -11.368855476379395
    5. '       ' → logprob: -11.743855476379395
    6. '```' → logprob: -11.868855476379395
    7. '            
' → logprob: -11.993855476379395
    8. '   ' → logprob: -12.118855476379395
    9. '               ' → logprob: -12.993855476379395
    10. '	elif' → logprob: -13.368855476379395

Token 364: ' token' (ID: 6602)
  Prédit: 'token'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'token' → logprob: -0.25289711356163025
    2. ' token' → logprob: -1.5028971433639526
    3. ' b' → logprob: -7.377897262573242
    4. 'b' → logprob: -8.127897262573242
    5. '(token' → logprob: -11.127897262573242
    6. ''' → logprob: -11.752897262573242
    7. ' ' → logprob: -12.127897262573242
    8. '[token' → logprob: -12.127897262573242
    9. '	token' → logprob: -12.127897262573242
    10. ''/' → logprob: -12.877897262573242

Token 365: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.020576223731040955
    2. '==' → logprob: -3.895576238632202
    3. '=='' → logprob: -10.645576477050781
    4. ' =='' → logprob: -12.895576477050781
    5. '[' → logprob: -13.145576477050781
    6. '/' → logprob: -13.645576477050781
    7. ''' → logprob: -13.770576477050781
    8. ' ' → logprob: -14.020576477050781
    9. ' '/'' → logprob: -14.770576477050781
    10. '=' → logprob: -14.770576477050781

Token 366: ' '/' (ID: 7041)
  Prédit: ''/'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''/' → logprob: -0.02486964501440525
    2. ''' → logprob: -3.774869680404663
    3. ' '/'' → logprob: -6.899869441986084
    4. ' '/' → logprob: -7.399869441986084
    5. ''b' → logprob: -13.649869918823242
    6. '"/' → logprob: -14.524869918823242
    7. '/' → logprob: -14.899869918823242
    8. ''*' → logprob: -14.899869918823242
    9. ' ' → logprob: -15.149869918823242
    10. ''>' → logprob: -15.399869918823242

Token 367: '':
' (ID: 7669)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.10536646842956543
    2. ':
' → logprob: -2.3553664684295654
    3. '):' → logprob: -6.1053667068481445
    4. '):
' → logprob: -6.3553667068481445
    5. 'stack' → logprob: -8.230366706848145
    6. '           ' → logprob: -8.355366706848145
    7. ' stack' → logprob: -8.730366706848145
    8. '_stack' → logprob: -9.480366706848145
    9. '():
' → logprob: -9.855366706848145
    10. '               ' → logprob: -9.855366706848145

Token 368: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.26219889521598816
    2. 'stack' → logprob: -2.2621989250183105
    3. ' stack' → logprob: -2.7621989250183105
    4. '           ' → logprob: -2.7621989250183105
    5. '```' → logprob: -10.012198448181152
    6. ' if' → logprob: -10.387198448181152
    7. '	stack' → logprob: -10.387198448181152
    8. '(stack' → logprob: -10.512198448181152
    9. '   ' → logprob: -10.762198448181152
    10. 'if' → logprob: -11.387198448181152

Token 369: ' #' (ID: 1069)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.0298176072537899
    2. ' stack' → logprob: -3.529817581176758
    3. '           ' → logprob: -10.154817581176758
    4. '               ' → logprob: -11.154817581176758
    5. 'if' → logprob: -11.654817581176758
    6. ' if' → logprob: -13.154817581176758
    7. '#' (adapté à ' #') → logprob: -14.154817581176758
    8. '.stack' → logprob: -14.404817581176758
    9. '```' → logprob: -14.529817581176758
    10. '	stack' → logprob: -14.779817581176758

Token 370: ' Integer' (ID: 6611)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.05100489780306816
    2. ' stack' → logprob: -3.0510048866271973
    3. 'if' → logprob: -6.176004886627197
    4. '#' → logprob: -8.801005363464355
    5. ' if' → logprob: -8.926005363464355
    6. 'import' → logprob: -10.676005363464355
    7. ' #' → logprob: -11.676005363464355
    8. '           ' → logprob: -12.051005363464355
    9. '               ' → logprob: -12.176005363464355
    10. 'from' → logprob: -12.926005363464355

Token 371: ' division' (ID: 21629)
  Prédit: ' division'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' division' → logprob: -0.48042359948158264
    2. 'division' → logprob: -0.9804235696792603
    3. 'div' → logprob: -5.480423450469971
    4. 'stack' → logprob: -6.480423450469971
    5. '(stack' → logprob: -7.980423450469971
    6. ' stack' → logprob: -9.105423927307129
    7. 'divide' → logprob: -9.605423927307129
    8. '_div' → logprob: -10.105423927307129
    9. 'Division' → logprob: -10.980423927307129
    10. ' (' → logprob: -10.980423927307129

Token 372: ' trunc' (ID: 132880)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.5305226445198059
    2. 'stack' → logprob: -1.0305225849151611
    3. '(stack' → logprob: -4.03052282333374
    4. '           ' → logprob: -4.15552282333374
    5. ' stack' → logprob: -4.28052282333374
    6. '```' → logprob: -6.65552282333374
    7. '                
' → logprob: -6.65552282333374
    8. ',' → logprob: -6.65552282333374
    9. '
' → logprob: -7.40552282333374
    10. '                   ' → logprob: -7.40552282333374

Token 373: 'ating' (ID: 1365)
  Prédit: 'ating'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ating' → logprob: -0.06091032549738884
    2. 'tow' → logprob: -3.435910224914551
    3. 'ates' → logprob: -4.810910224914551
    4. ' towards' → logprob: -5.060910224914551
    5. '//' → logprob: -5.185910224914551
    6. ' toward' → logprob: -5.935910224914551
    7. '           ' → logprob: -6.435910224914551
    8. '       ' → logprob: -7.685910224914551
    9. '```' → logprob: -7.935910224914551
    10. 'ation' → logprob: -8.06091022491455

Token 374: ' towards' (ID: 9979)
  Prédit: 'tow'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tow' → logprob: -0.28418225049972534
    2. ' toward' → logprob: -1.7841823101043701
    3. ' towards' → logprob: -2.53418231010437
    4. 'Tow' → logprob: -9.65918254852295
    5. ' ' → logprob: -11.03418254852295
    6. 'Towards' → logprob: -11.53418254852295
    7. '0' → logprob: -11.65918254852295
    8. '_t' → logprob: -11.90918254852295
    9. 't' → logprob: -13.78418254852295
    10. '   ' → logprob: -14.40918254852295

Token 375: ' zero' (ID: 12421)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0800212174654007
    2. 'zero' → logprob: -2.5800211429595947
    3. ' zero' → logprob: -6.830021381378174
    4. '_zero' → logprob: -10.330020904541016
    5. 'Zero' → logprob: -11.080020904541016
    6. 'ZERO' → logprob: -14.080020904541016
    7. '-zero' → logprob: -14.830020904541016
    8. ' ' → logprob: -15.080020904541016
    9. '零' → logprob: -15.705020904541016
    10. '_ZERO' → logprob: -16.580020904541016

Token 376: '
' (ID: 198)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.15782120823860168
    2. ':
' → logprob: -2.9078211784362793
    3. ':' → logprob: -3.7828211784362793
    4. '           ' → logprob: -4.032821178436279
    5. '(stack' → logprob: -4.032821178436279
    6. 'stack' → logprob: -4.532821178436279
    7. '                
' → logprob: -5.407821178436279
    8. '```' → logprob: -5.407821178436279
    9. 'if' → logprob: -5.782821178436279
    10. '                   ' → logprob: -5.907821178436279

Token 377: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.0036416458897292614
    2. '           ' → logprob: -5.878641605377197
    3. '                
' → logprob: -8.503642082214355
    4. '                   ' → logprob: -9.003642082214355
    5. 'stack' → logprob: -9.003642082214355
    6. '
' → logprob: -9.378642082214355
    7. ':
' → logprob: -9.628642082214355
    8. '                ' → logprob: -10.003642082214355
    9. ':' → logprob: -10.128642082214355
    10. 'if' → logprob: -10.503642082214355

Token 378: ' res' (ID: 694)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.04381406307220459
    2. ' stack' → logprob: -3.168814182281494
    3. '               ' → logprob: -7.293814182281494
    4. '           ' → logprob: -9.668813705444336
    5. 'if' → logprob: -10.668813705444336
    6. '```' → logprob: -10.918813705444336
    7. 'result' → logprob: -11.668813705444336
    8. '	stack' → logprob: -12.043813705444336
    9. '                   ' → logprob: -12.418813705444336
    10. ' if' → logprob: -12.668813705444336

Token 379: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.22774434089660645
    2. '=' → logprob: -1.6027443408966064
    3. 'ult' → logprob: -6.102744102478027
    4. '=int' → logprob: -9.852744102478027
    5. 'ults' → logprob: -11.727744102478027
    6. 'ULT' → logprob: -11.977744102478027
    7. ' ' → logprob: -12.227744102478027
    8. '.append' → logprob: -12.352744102478027
    9. '   ' → logprob: -12.852744102478027
    10. '	' → logprob: -13.102744102478027

Token 380: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.00012368128227535635
    2. ' int' → logprob: -9.000123977661133
    3. 'a' → logprob: -15.250123977661133
    4. '0' → logprob: -18.000123977661133
    5. '(int' → logprob: -18.375123977661133
    6. '	int' → logprob: -19.000123977661133
    7. '=int' → logprob: -20.875123977661133
    8. '
' → logprob: -21.000123977661133
    9. 'abs' → logprob: -21.375123977661133
    10. '1' → logprob: -21.375123977661133

Token 381: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -3.070975071750581e-05
    2. 'a' → logprob: -10.500030517578125
    3. '(float' → logprob: -12.750030517578125
    4. '(' → logprob: -15.500030517578125
    5. 'float' → logprob: -18.125030517578125
    6. '((' → logprob: -20.500030517578125
    7. '	a' → logprob: -20.750030517578125
    8. '_a' → logprob: -21.375030517578125
    9. '(b' → logprob: -21.875030517578125
    10. '(abs' → logprob: -21.875030517578125

Token 382: ' /' (ID: 820)
  Prédit: '/'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '/' → logprob: -0.10817807167768478
    2. ' /' → logprob: -2.60817813873291
    3. '/a' → logprob: -3.60817813873291
    4. '/b' → logprob: -6.35817813873291
    5. 'a' → logprob: -10.48317813873291
    6. '/tr' → logprob: -14.48317813873291
    7. '/
' → logprob: -14.98317813873291
    8. '(a' → logprob: -15.73317813873291
    9. '/int' → logprob: -15.73317813873291
    10. '/app' → logprob: -15.85817813873291

Token 383: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -5.836499985889532e-05
    2. ' b' → logprob: -9.7500581741333
    3. '	b' → logprob: -22.625059127807617
    4. ' ' → logprob: -24.375059127807617
    5. ')b' → logprob: -24.500059127807617
    6. '_b' → logprob: -24.875059127807617
    7. '\b' → logprob: -25.000059127807617
    8. '   ' → logprob: -25.000059127807617
    9. '
' → logprob: -25.125059127807617
    10. '```' → logprob: -25.375059127807617

Token 384: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.10021411627531052
    2. ')
' → logprob: -2.3502140045166016
    3. ')
' → logprob: -11.975214004516602
    4. '           ' → logprob: -14.350214004516602
    5. ')

' → logprob: -14.975214004516602
    6. '               ' → logprob: -15.975214004516602
    7. ')`
' → logprob: -15.975214004516602
    8. ')`' → logprob: -16.4752140045166
    9. ' )' → logprob: -17.4752140045166
    10. '))' → logprob: -18.1002140045166

Token 385: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.003314004046842456
    2. '           ' → logprob: -5.878314018249512
    3. 'stack' → logprob: -7.628314018249512
    4. ' stack' → logprob: -10.878314018249512
    5. '              ' → logprob: -13.878314018249512
    6. '   ' → logprob: -14.128314018249512
    7. '       ' → logprob: -14.253314018249512
    8. '
' → logprob: -15.253314018249512
    9. '```' → logprob: -15.753314018249512
    10. 'Stack' → logprob: -15.878314018249512

Token 386: ' stack' (ID: 10825)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' (adapté à ' stack') → logprob: -0.006140545941889286
    2. ' stack' → logprob: -5.50614070892334
    3. '               ' → logprob: -6.25614070892334
    4. '           ' → logprob: -8.88114070892334
    5. '	stack' → logprob: -14.50614070892334
    6. '       ' → logprob: -15.13114070892334
    7. '
' → logprob: -15.13114070892334
    8. '.stack' → logprob: -15.25614070892334
    9. '```' → logprob: -15.50614070892334
    10. '   ' → logprob: -15.50614070892334

Token 387: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.0003380846756044775
    2. '.' → logprob: -8.000338554382324
    3. 'append' → logprob: -13.125338554382324
    4. '.app' → logprob: -14.625338554382324
    5. '.push' → logprob: -16.875337600708008
    6. '.Append' → logprob: -17.125337600708008
    7. 'Append' → logprob: -17.625337600708008
    8. '.pop' → logprob: -18.125337600708008
    9. '_append' → logprob: -18.500337600708008
    10. ' .' → logprob: -19.250337600708008

Token 388: '(res' (ID: 8331)
  Prédit: '(res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(res' → logprob: -0.002475777640938759
    2. 'res' → logprob: -6.002475738525391
    3. ' res' → logprob: -16.00247573852539
    4. '(' → logprob: -17.87747573852539
    5. '	res' → logprob: -19.25247573852539
    6. ',res' → logprob: -20.50247573852539
    7. '$res' → logprob: -20.62747573852539
    8. '_res' → logprob: -21.87747573852539
    9. 'Res' → logprob: -22.12747573852539
    10. '=res' → logprob: -22.25247573852539

Token 389: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -8.180258191714529e-06
    2. ')
' → logprob: -11.750008583068848
    3. ' )' → logprob: -16.62500762939453
    4. '))' → logprob: -17.37500762939453
    5. '           ' → logprob: -18.75000762939453
    6. ')}' → logprob: -19.00000762939453
    7. ')return' → logprob: -19.12500762939453
    8. ')`' → logprob: -19.37500762939453
    9. ')}}' → logprob: -20.50000762939453
    10. '）' → logprob: -20.87500762939453

Token 390: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14742830395698547
    2. ' return' → logprob: -2.772428274154663
    3. '
' → logprob: -3.147428274154663
    4. 'return' → logprob: -3.647428274154663
    5. '    
' → logprob: -5.522428512573242
    6. '	return' → logprob: -7.522428512573242
    7. '           ' → logprob: -8.272428512573242
    8. '       ' → logprob: -8.647428512573242
    9. '  
' → logprob: -8.647428512573242
    10. ' 
' → logprob: -9.397428512573242

Token 391: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.035981468856334686
    2. '   ' → logprob: -4.03598165512085
    3. ' return' → logprob: -4.03598165512085
    4. '
' → logprob: -12.410981178283691
    5. '	return' → logprob: -14.285981178283691
    6. '    
' → logprob: -15.410981178283691
    7. ' ' → logprob: -16.410982131958008
    8. '```' → logprob: -16.785982131958008
    9. '  ' → logprob: -17.285982131958008
    10. ':return' → logprob: -18.410982131958008

Token 392: ' stack' (ID: 10825)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.0015023599844425917
    2. ' stack' → logprob: -6.501502513885498
    3. '	stack' → logprob: -18.251502990722656
    4. '(stack' → logprob: -18.376502990722656
    5. 'Stack' → logprob: -20.376502990722656
    6. '   ' → logprob: -20.751502990722656
    7. 'stk' → logprob: -21.126502990722656
    8. '_stack' → logprob: -21.876502990722656
    9. '.stack' → logprob: -22.251502990722656
    10. 'st' → logprob: -22.376502990722656

Token 393: '[' (ID: 58)
  Prédit: '.pop'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.pop' → logprob: -0.5239694118499756
    2. '[' → logprob: -1.0239694118499756
    3. '[-' → logprob: -3.0239694118499756
    4. 'pop' → logprob: -9.898969650268555
    5. '.' → logprob: -12.148969650268555
    6. '```' → logprob: -12.773969650268555
    7. '0' → logprob: -13.898969650268555
    8. 'Pop' → logprob: -14.898969650268555
    9. '	pop' → logprob: -15.148969650268555
    10. '_pop' → logprob: -16.148969650268555

Token 394: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0002613358374219388
    2. '-' → logprob: -8.250261306762695
    3. '```' → logprob: -18.750261306762695
    4. ' ' → logprob: -19.125261306762695
    5. '
' → logprob: -20.250261306762695
    6. ' -' → logprob: -20.375261306762695
    7. '   ' → logprob: -21.125261306762695
    8. '۰' → logprob: -21.625261306762695
    9. '``' → logprob: -22.250261306762695
    10. '-
' → logprob: -22.250261306762695

Token 395: ']

' (ID: 3144)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -9.088346359931165e-07
    2. '}' → logprob: -14.375000953674316
    3. ']' → logprob: -15.750000953674316
    4. ' )' → logprob: -16.75
    5. ')
' → logprob: -17.0
    6. '<|end|>' → logprob: -18.125
    7. ')}' → logprob: -18.375
    8. '）' → logprob: -19.375
    9. '```' → logprob: -19.75
    10. '),' → logprob: -19.75

Token 396: 'n' (ID: 77)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 397: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.585686206817627
    2. ' =' → logprob: -0.835686206817627
    3. ' ' → logprob: -5.835686206817627
    4. 'u' → logprob: -5.960686206817627
    5. '   ' → logprob: -6.835686206817627
    6. '_' → logprob: -7.085686206817627
    7. '    ' → logprob: -7.210686206817627
    8. 'um' → logprob: -7.710686206817627
    9. '  ' → logprob: -8.085685729980469
    10. ')' → logprob: -8.835685729980469

Token 398: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.03934076800942421
    2. ' int' → logprob: -3.2893407344818115
    3. '5' → logprob: -7.039340972900391
    4. 'input' → logprob: -8.41434097290039
    5. '3' → logprob: -9.16434097290039
    6. '10' → logprob: -9.91434097290039
    7. ' ' → logprob: -10.53934097290039
    8. ' input' → logprob: -11.53934097290039
    9. '1' → logprob: -12.03934097290039
    10. '[int' → logprob: -13.78934097290039

Token 399: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.06202146038413048
    2. '(' → logprob: -2.812021493911743
    3. 'input' → logprob: -10.187021255493164
    4. ' (' → logprob: -11.437021255493164
    5. '('' → logprob: -12.562021255493164
    6. '(
' → logprob: -13.812021255493164
    7. '()' → logprob: -15.187021255493164
    8. ' input' → logprob: -15.312021255493164
    9. '=input' → logprob: -15.812021255493164
    10. '("' → logprob: -16.687021255493164

Token 400: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.1286182999610901
    2. '()' → logprob: -2.1286182403564453
    3. '(' → logprob: -7.003618240356445
    4. '('' → logprob: -7.253618240356445
    5. '().' → logprob: -10.753618240356445
    6. '()
' → logprob: -11.378618240356445
    7. '())
' → logprob: -11.753618240356445
    8. '()>' → logprob: -12.003618240356445
    9. ')' → logprob: -12.628618240356445
    10. '();)' → logprob: -12.753618240356445

Token 401: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.00016301481809932739
    2. 'results' → logprob: -8.750163078308105
    3. 'result' → logprob: -12.500163078308105
    4. ' for' → logprob: -14.250163078308105
    5. 'express' → logprob: -17.37516212463379
    6. '
' → logprob: -18.00016212463379
    7. 'total' → logprob: -18.12516212463379
    8. '```' → logprob: -18.50016212463379
    9. 'answers' → logprob: -18.62516212463379
    10. 'expr' → logprob: -19.37516212463379

Token 402: ' _' (ID: 1175)
  Prédit: ' _'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' _' → logprob: -0.023334456607699394
    2. '_' → logprob: -3.773334503173828
    3. ' i' → logprob: -9.398334503173828
    4. ' ' → logprob: -12.148334503173828
    5. ' ' → logprob: -14.523334503173828
    6. ' ‌' → logprob: -15.523334503173828
    7. 'i' → logprob: -16.898334503173828
    8. '  ' → logprob: -17.148334503173828
    9. '_i' → logprob: -17.648334503173828
    10. ' _
' → logprob: -18.773334503173828

Token 403: ' in' (ID: 306)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.28208214044570923
    2. ' range' → logprob: -1.5320820808410645
    3. ' in' → logprob: -3.5320820808410645
    4. 'in' → logprob: -8.032082557678223
    5. ' ' → logprob: -9.532082557678223
    6. '_' → logprob: -10.032082557678223
    7. ' _' → logprob: -11.282082557678223
    8. '_range' → logprob: -12.907082557678223
    9. '  ' → logprob: -14.282082557678223
    10. 'n' → logprob: -14.282082557678223

Token 404: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -4.842555426876061e-06
    2. ' range' → logprob: -12.250004768371582
    3. 'n' → logprob: -17.1250057220459
    4. '(range' → logprob: -18.0000057220459
    5. '```' → logprob: -18.8750057220459
    6. '	range' → logprob: -19.6250057220459
    7. 'rang' → logprob: -20.1250057220459
    8. 'r' → logprob: -20.2500057220459
    9. '_range' → logprob: -20.6250057220459
    10. 'input' → logprob: -21.0000057220459

Token 405: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.10053929686546326
    2. '(' → logprob: -2.350539207458496
    3. ' (' → logprob: -8.100539207458496
    4. '(range' → logprob: -10.850539207458496
    5. 'n' → logprob: -12.350539207458496
    6. ' n' → logprob: -12.725539207458496
    7. 'range' → logprob: -13.850539207458496
    8. ' range' → logprob: -14.100539207458496
    9. '(
' → logprob: -14.725539207458496
    10. '```' → logprob: -15.100539207458496

Token 406: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.07901228219270706
    2. '):
' → logprob: -2.579012393951416
    3. '):
' → logprob: -9.829011917114258
    4. ' ):' → logprob: -10.579011917114258
    5. ':' → logprob: -10.829011917114258
    6. ')' → logprob: -10.954011917114258
    7. ' ):
' → logprob: -13.579011917114258
    8. '():
' → logprob: -13.704011917114258
    9. '):

' → logprob: -14.329011917114258
    10. '():' → logprob: -14.329011917114258

Token 407: '   ' (ID: 271)
  Prédit: ' expr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' expr' → logprob: -0.5727049112319946
    2. 'expr' → logprob: -1.1977049112319946
    3. '   ' → logprob: -2.572704792022705
    4. ' expression' → logprob: -2.947704792022705
    5. 'expression' → logprob: -5.322704792022705
    6. ' line' → logprob: -8.322705268859863
    7. 'line' → logprob: -10.197705268859863
    8. '_expr' → logprob: -10.197705268859863
    9. 's' → logprob: -11.072705268859863
    10. ' s' → logprob: -11.197705268859863

Token 408: ' expression' (ID: 12973)
  Prédit: 'expr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'expr' → logprob: -0.00015669701679144055
    2. 'expression' (adapté à ' expression') → logprob: -9.00015640258789
    3. ' expr' → logprob: -10.50015640258789
    4. 'line' → logprob: -12.50015640258789
    5. 'print' → logprob: -13.25015640258789
    6. ' expression' → logprob: -16.37515640258789
    7. 'exp' → logprob: -16.62515640258789
    8. 's' → logprob: -17.12515640258789
    9. 'express' → logprob: -18.25015640258789
    10. '_expr' → logprob: -19.25015640258789

Token 409: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.029753616079688072
    2. '=' → logprob: -3.5297536849975586
    3. '=input' → logprob: -13.154753684997559
    4. ' ' → logprob: -14.904753684997559
    5. '_' → logprob: -15.154753684997559
    6. 's' → logprob: -15.529753684997559
    7. 'input' → logprob: -15.529753684997559
    8. ' ' → logprob: -16.404752731323242
    9. '_input' → logprob: -16.904752731323242
    10. ',' → logprob: -17.279752731323242

Token 410: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.0019286326132714748
    2. ' input' → logprob: -6.251928806304932
    3. '(input' → logprob: -19.501928329467773
    4. '=input' → logprob: -20.126928329467773
    5. '	input' → logprob: -20.751928329467773
    6. '.input' → logprob: -22.251928329467773
    7. '   ' → logprob: -22.376928329467773
    8. '<input' → logprob: -22.626928329467773
    9. ',input' → logprob: -23.251928329467773
    10. '_input' → logprob: -23.376928329467773

Token 411: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0003764535649679601
    2. '().' → logprob: -8.12537670135498
    3. '())' → logprob: -9.75037670135498
    4. ')' → logprob: -11.62537670135498
    5. '(' → logprob: -12.87537670135498
    6. '()
' → logprob: -13.00037670135498
    7. '()+' → logprob: -13.75037670135498
    8. '()>' → logprob: -13.75037670135498
    9. ' ()' → logprob: -13.87537670135498
    10. '()?>' → logprob: -14.25037670135498

Token 412: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0005364707321859896
    2. 'result' → logprob: -8.000536918640137
    3. ' print' → logprob: -8.750536918640137
    4. '   ' → logprob: -10.125536918640137
    5. '```' → logprob: -13.625536918640137
    6. ' result' → logprob: -13.875536918640137
    7. 'output' → logprob: -15.625536918640137
    8. 'answer' → logprob: -16.37553596496582
    9. '
' → logprob: -16.87553596496582
    10. '    
' → logprob: -17.00053596496582

Token 413: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.004092174116522074
    2. 'result' → logprob: -5.504092216491699
    3. ' print' → logprob: -11.2540922164917
    4. ' result' → logprob: -14.5040922164917
    5. '   ' → logprob: -16.379091262817383
    6. 'res' → logprob: -16.504091262817383
    7. 'answer' → logprob: -16.504091262817383
    8. '
' → logprob: -18.129091262817383
    9. 'value' → logprob: -18.504091262817383
    10. '    
' → logprob: -19.004091262817383

Token 414: '(e' (ID: 3454)
  Prédit: '(e'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(e' → logprob: -8.41866585687967e-06
    2. '(' → logprob: -11.750008583068848
    3. 'evaluate' → logprob: -15.250008583068848
    4. '(eval' → logprob: -15.375008583068848
    5. '(
' → logprob: -19.62500762939453
    6. 'e' → logprob: -20.12500762939453
    7. ' (' → logprob: -20.50000762939453
    8. '((' → logprob: -20.87500762939453
    9. '(print' → logprob: -21.00000762939453
    10. '(f' → logprob: -21.25000762939453

Token 415: 'valuate' (ID: 28899)
  Prédit: 'valuate'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'valuate' → logprob: -0.001167364651337266
    2. 'val' → logprob: -6.876167297363281
    3. 'vate' → logprob: -9.876167297363281
    4. 'value' → logprob: -10.126167297363281
    5. 'x' → logprob: -10.876167297363281
    6. 'v' → logprob: -11.501167297363281
    7. 'ulate' → logprob: -12.751167297363281
    8. 'uate' → logprob: -13.001167297363281
    9. 'vel' → logprob: -13.501167297363281
    10. 'va' → logprob: -13.626167297363281

Token 416: '_expression' (ID: 69265)
  Prédit: '_expression'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_expression' → logprob: -2.5776860184123507e-06
    2. 'expression' → logprob: -13.00000286102295
    3. '(expression' → logprob: -15.50000286102295
    4. '_' → logprob: -16.250001907348633
    5. '```' → logprob: -17.500001907348633
    6. ' expression' → logprob: -19.000001907348633
    7. '_e' → logprob: -19.375001907348633
    8. '_expr' → logprob: -19.625001907348633
    9. 'Expression' → logprob: -20.125001907348633
    10. ')' → logprob: -20.375001907348633

Token 417: '(expression' (ID: 105635)
  Prédit: '(expression'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(expression' → logprob: -5.438573680294212e-06
    2. 'expression' → logprob: -12.250005722045898
    3. ')' → logprob: -15.125005722045898
    4. '(' → logprob: -15.750005722045898
    5. ' (' → logprob: -16.2500057220459
    6. '(express' → logprob: -16.2500057220459
    7. ' expression' → logprob: -18.1250057220459
    8. '_expression' → logprob: -18.3750057220459
    9. '(
' → logprob: -19.3750057220459
    10. '.expression' → logprob: -19.7500057220459

Token 418: '))' (ID: 915)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.2519535422325134
    2. '))' → logprob: -1.5019536018371582
    3. '())' → logprob: -10.751953125
    4. ')))' → logprob: -13.126953125
    5. '()))' → logprob: -14.876953125
    6. '()' → logprob: -15.126953125
    7. '(' → logprob: -15.876953125
    8. ')`' → logprob: -16.126953125
    9. ' )' → logprob: -16.501953125
    10. '))
' → logprob: -17.126953125


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 416
Tokens correctement prédits (1ère position, stricte): 181
Tokens correctement prédits (1ère position, avec adaptation): 214
Tokens correctement prédits (top 10): 368
Précision stricte (1ère position): 43.51%
Précision adaptée (1ère position): 51.44%
Précision (top 10): 88.46%
================================================================================
