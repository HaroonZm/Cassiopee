================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:12:51
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N = int(input())
a = list(map(int, input().split()))

count = 0
for start in range(N):
    pos = start
    visited = set()
    while True:
        if pos == start and len(visited) > 0:
            count += 1
            break
        if pos in visited:
            break
        visited.add(pos)
        pos = (pos + a[pos]) % N

print(count)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00035786881926469505
    2. '('' → logprob: -8.750357627868652
    3. '(N' → logprob: -9.125357627868652
    4. ''' → logprob: -11.000357627868652
    5. '(input' → logprob: -11.125357627868652
    6. '(
' → logprob: -11.250357627868652
    7. '()' → logprob: -11.375357627868652
    8. '("("' → logprob: -11.375357627868652
    9. '```' → logprob: -12.125357627868652
    10. '(`' → logprob: -12.375357627868652

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2372170090675354
    2. ')' → logprob: -1.7372169494628906
    3. '()' → logprob: -3.4872169494628906
    4. '())' → logprob: -5.737216949462891
    5. '```' → logprob: -7.987216949462891
    6. '(
' → logprob: -8.23721694946289
    7. '`' → logprob: -9.61221694946289
    8. '(()' → logprob: -9.61221694946289
    9. '("("' → logprob: -9.61221694946289
    10. '")' → logprob: -9.73721694946289

Token 5: 'a' (ID: 64)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.5391327142715454
    2. 'if' → logprob: -2.289132595062256
    3. 's' → logprob: -2.664132595062256
    4. 'a' → logprob: -2.664132595062256
    5. 'x' → logprob: -3.539132595062256
    6. 'i' → logprob: -3.539132595062256
    7. ' ' → logprob: -4.039132595062256
    8. 'f' → logprob: -4.164132595062256
    9. '[' → logprob: -4.539132595062256
    10. ' for' → logprob: -4.664132595062256

Token 6: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.009428322315216064
    2. '[i' → logprob: -6.13442850112915
    3. ' =' → logprob: -6.25942850112915
    4. '=' → logprob: -6.38442850112915
    5. '.' → logprob: -6.63442850112915
    6. '[a' → logprob: -7.88442850112915
    7. '[n' → logprob: -8.134428024291992
    8. 'r' → logprob: -8.884428024291992
    9. 'a' → logprob: -8.884428024291992
    10. '[p' → logprob: -8.884428024291992

Token 7: ' list' (ID: 1562)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.5684943199157715
    2. ' []' → logprob: -1.1934943199157715
    3. 'list' → logprob: -2.6934943199157715
    4. '[input' → logprob: -4.1934943199157715
    5. ' list' → logprob: -4.4434943199157715
    6. ' [' → logprob: -4.5684943199157715
    7. '[' → logprob: -4.6934943199157715
    8. 'input' → logprob: -4.6934943199157715
    9. '[int' → logprob: -5.3184943199157715
    10. ' input' → logprob: -7.3184943199157715

Token 8: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0003132976416964084
    2. '(range' → logprob: -8.625313758850098
    3. '(a' → logprob: -9.625313758850098
    4. '[' → logprob: -10.625313758850098
    5. '(input' → logprob: -11.875313758850098
    6. ' (' → logprob: -12.000313758850098
    7. '(
' → logprob: -12.375313758850098
    8. '[(' → logprob: -12.625313758850098
    9. '```' → logprob: -12.875313758850098
    10. '("("' → logprob: -13.125313758850098

Token 9: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.033121462911367416
    2. '(' → logprob: -3.908121347427368
    3. '(str' → logprob: -4.908121585845947
    4. '(lambda' → logprob: -6.283121585845947
    5. '(input' → logprob: -6.908121585845947
    6. 'int' → logprob: -7.408121585845947
    7. ')' → logprob: -7.783121585845947
    8. '```' → logprob: -8.283121109008789
    9. '[int' → logprob: -8.408121109008789
    10. '<int' → logprob: -8.408121109008789

Token 10: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.01841716282069683
    2. '(' → logprob: -4.3934173583984375
    3. ',input' → logprob: -5.3934173583984375
    4. ')' → logprob: -7.8934173583984375
    5. ',' → logprob: -8.268417358398438
    6. '<|end|>' → logprob: -8.768417358398438
    7. '=input' → logprob: -8.893417358398438
    8. '<input' → logprob: -9.643417358398438
    9. 'input' → logprob: -9.768417358398438
    10. '))' → logprob: -9.893417358398438

Token 11: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.313292533159256
    2. ' input' → logprob: -1.3132925033569336
    3. '(input' → logprob: -10.438292503356934
    4. ',input' → logprob: -13.813292503356934
    5. '=input' → logprob: -15.438292503356934
    6. ')' → logprob: -15.688292503356934
    7. '	input' → logprob: -16.06329345703125
    8. '_input' → logprob: -17.18829345703125
    9. ' ' → logprob: -17.56329345703125
    10. '[input' → logprob: -17.81329345703125

Token 12: '().' (ID: 1454)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.5093521475791931
    2. '())' → logprob: -1.384352207183838
    3. '()' → logprob: -2.134352207183838
    4. '(' → logprob: -3.884352207183838
    5. '()));' → logprob: -6.134352207183838
    6. ')' → logprob: -6.259352207183838
    7. '))' → logprob: -6.384352207183838
    8. '(()' → logprob: -7.134352207183838
    9. '().' → logprob: -7.384352207183838
    10. '())))' → logprob: -7.509352207183838

Token 13: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.000600572966504842
    2. 'strip' → logprob: -7.500600337982178
    3. 'rstrip' → logprob: -10.000600814819336
    4. ' split' → logprob: -13.750600814819336
    5. '(split' → logprob: -14.250600814819336
    6. 'spl' → logprob: -15.250600814819336
    7. ')' → logprob: -16.125600814819336
    8. 's' → logprob: -17.125600814819336
    9. 'startswith' → logprob: -17.875600814819336
    10. 'replace' → logprob: -18.375600814819336

Token 14: '()))

' (ID: 125972)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.5749025344848633
    2. '))' → logprob: -1.0749025344848633
    3. ')' → logprob: -2.9499025344848633
    4. '())' → logprob: -3.4499025344848633
    5. '()' → logprob: -5.074902534484863
    6. '(' → logprob: -5.324902534484863
    7. ')))' → logprob: -8.449902534484863
    8. '('' → logprob: -8.824902534484863
    9. '())))' → logprob: -9.074902534484863
    10. ''))' → logprob: -9.324902534484863

Token 15: 'count' (ID: 5420)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.6455947756767273
    2. 's' → logprob: -1.145594835281372
    3. 'for' → logprob: -3.020594835281372
    4. 'c' → logprob: -3.770594835281372
    5. 'b' → logprob: -3.895594835281372
    6. 'max' → logprob: -3.895594835281372
    7. 'sum' → logprob: -4.395594596862793
    8. 'm' → logprob: -4.645594596862793
    9. 'count' → logprob: -5.145594596862793
    10. 'd' → logprob: -5.395594596862793

Token 16: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10546109080314636
    2. '[' → logprob: -2.9804611206054688
    3. 's' → logprob: -3.6054611206054688
    4. '_' → logprob: -3.8554611206054688
    5. '[(' → logprob: -8.605461120605469
    6. 'a' → logprob: -8.730461120605469
    7. '('' → logprob: -8.980461120605469
    8. '[]' → logprob: -9.730461120605469
    9. '_a' → logprob: -10.105461120605469
    10. '(a' → logprob: -10.230461120605469

Token 17: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.02851784974336624
    2. '{}' → logprob: -4.028517723083496
    3. ' ' → logprob: -4.653517723083496
    4. '{' → logprob: -7.653517723083496
    5. ' {}' → logprob: -8.153517723083496
    6. '[' → logprob: -11.028517723083496
    7. ' {' → logprob: -12.653517723083496
    8. '(' → logprob: -14.528517723083496
    9. ' defaultdict' → logprob: -14.528517723083496
    10. ' [' → logprob: -14.653517723083496

Token 18: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.14298507571220398
    2. '{}' → logprob: -2.1429851055145264
    3. '{' → logprob: -4.142984867095947
    4. '({' → logprob: -11.142985343933105
    5. '(' → logprob: -11.142985343933105
    6. '[' → logprob: -12.017985343933105
    7. '{}
' → logprob: -12.392985343933105
    8. ' {}' → logprob: -12.392985343933105
    9. 'default' → logprob: -13.017985343933105
    10. '{})' → logprob: -13.267985343933105

Token 19: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.015246194787323475
    2. ' for' → logprob: -4.390246391296387
    3. '
' → logprob: -6.515246391296387
    4. '\n' → logprob: -6.890246391296387
    5. '```' → logprob: -9.390246391296387
    6. '\' → logprob: -10.140246391296387
    7. '' → logprob: -10.390246391296387
    8. '<|end|>' → logprob: -10.640246391296387
    9. ' ' → logprob: -11.140246391296387
    10. '	for' → logprob: -11.640246391296387

Token 20: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.00011045700375689194
    2. '```' → logprob: -10.125110626220703
    3. ' for' → logprob: -10.375110626220703
    4. '
' → logprob: -11.000110626220703
    5. '\n' → logprob: -11.250110626220703
    6. '\' → logprob: -12.000110626220703
    7. 'i' → logprob: -14.000110626220703
    8. '' → logprob: -14.750110626220703
    9. '	for' → logprob: -14.750110626220703
    10. '`' → logprob: -14.750110626220703

Token 21: ' start' (ID: 1604)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.027788840234279633
    2. ' ' → logprob: -3.6527888774871826
    3. '_' → logprob: -7.2777886390686035
    4. ' _' → logprob: -8.027789115905762
    5. 'i' → logprob: -8.152789115905762
    6. ' x' → logprob: -9.277789115905762
    7. '  ' → logprob: -10.527789115905762
    8. ' a' → logprob: -10.777789115905762
    9. ' num' → logprob: -11.027789115905762
    10. ' in' → logprob: -12.902789115905762

Token 22: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.032558172941207886
    2. 'in' → logprob: -3.7825582027435303
    3. ' ' → logprob: -4.782557964324951
    4. '_' → logprob: -7.657557964324951
    5. '  ' → logprob: -8.53255844116211
    6. ',' → logprob: -9.40755844116211
    7. ' i' → logprob: -10.78255844116211
    8. ' ,' → logprob: -10.78255844116211
    9. 'space' → logprob: -11.28255844116211
    10. '_in' → logprob: -11.40755844116211

Token 23: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.1602369248867035
    2. 'range' → logprob: -1.9102369546890259
    3. ' ' → logprob: -12.535237312316895
    4. ' a' → logprob: -12.660237312316895
    5. 'a' → logprob: -13.035237312316895
    6. ')' → logprob: -13.660237312316895
    7. '	range' → logprob: -13.910237312316895
    8. '0' → logprob: -14.535237312316895
    9. '(range' → logprob: -14.785237312316895
    10. '   ' → logprob: -15.160237312316895

Token 24: '(N' (ID: 10564)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1272200644016266
    2. '(N' → logprob: -2.1272201538085938
    3. '(len' → logprob: -8.377220153808594
    4. '(n' → logprob: -10.127220153808594
    5. '(
' → logprob: -11.627220153808594
    6. ' (' → logprob: -12.752220153808594
    7. '(count' → logprob: -13.127220153808594
    8. '(start' → logprob: -13.377220153808594
    9. '```' → logprob: -13.627220153808594
    10. '(range' → logprob: -13.752220153808594

Token 25: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.004853380378335714
    2. ')' → logprob: -6.254853248596191
    3. ' ):' → logprob: -6.379853248596191
    4. '):
' → logprob: -7.004853248596191
    5. ':' → logprob: -8.254853248596191
    6. ',' → logprob: -10.629853248596191
    7. '+' → logprob: -11.254853248596191
    8. ' ' → logprob: -12.129853248596191
    9. ' )' → logprob: -12.379853248596191
    10. '-' → logprob: -13.254853248596191

Token 26: '   ' (ID: 271)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.2997770607471466
    2. '   ' → logprob: -1.4247770309448242
    3. 'for' → logprob: -4.924777030944824
    4. '    ' → logprob: -5.424777030944824
    5. ' ' → logprob: -6.299777030944824
    6. '    
' → logprob: -6.424777030944824
    7. '```' → logprob: -7.299777030944824
    8. ' ' → logprob: -7.424777030944824
    9. ' ```' → logprob: -7.924777030944824
    10. ' 
' → logprob: -7.924777030944824

Token 27: ' pos' (ID: 1253)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.21989814937114716
    2. 'for' → logprob: -2.469898223876953
    3. '   ' → logprob: -2.969898223876953
    4. ' current' → logprob: -3.844898223876953
    5. ' sum' → logprob: -4.469898223876953
    6. ' count' → logprob: -5.094898223876953
    7. 'count' → logprob: -5.469898223876953
    8. ' if' → logprob: -5.719898223876953
    9. 'sum' → logprob: -5.719898223876953
    10. 'current' → logprob: -5.969898223876953

Token 28: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2825809121131897
    2. '=' → logprob: -1.532580852508545
    3. 's' → logprob: -4.157580852508545
    4. 'sible' → logprob: -4.782580852508545
    5. 'ition' → logprob: -6.157580852508545
    6. 'itional' → logprob: -6.907580852508545
    7. ' ' → logprob: -7.157580852508545
    8. 'itions' → logprob: -7.157580852508545
    9. '   ' → logprob: -8.032581329345703
    10. ' +=' → logprob: -8.282581329345703

Token 29: ' start' (ID: 1604)
  Prédit: 'start'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'start' → logprob: -0.10031363368034363
    2. ' start' → logprob: -2.350313663482666
    3. '0' → logprob: -9.725313186645508
    4. ' ' → logprob: -10.725313186645508
    5. 'a' → logprob: -11.475313186645508
    6. '[start' → logprob: -12.725313186645508
    7. '1' → logprob: -13.225313186645508
    8. ' a' → logprob: -13.475313186645508
    9. '	start' → logprob: -13.600313186645508
    10. '   ' → logprob: -13.725313186645508

Token 30: '
' (ID: 198)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.3561883568763733
    2. '<|end|>' → logprob: -1.7311882972717285
    3. '   ' → logprob: -3.1061882972717285
    4. ' +' → logprob: -3.3561882972717285
    5. ' while' → logprob: -4.8561882972717285
    6. 'while' → logprob: -4.8561882972717285
    7. '<|end|>' → logprob: -5.2311882972717285
    8. '```' → logprob: -5.3561882972717285
    9. ')' → logprob: -5.8561882972717285
    10. '
' → logprob: -6.1061882972717285

Token 31: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 32: ' visited' (ID: 18416)
  Prédit: ' while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' while' → logprob: -0.8200231790542603
    2. 'while' → logprob: -0.8200231790542603
    3. '+' → logprob: -2.1950230598449707
    4. '   ' → logprob: -5.320023059844971
    5. ' +' → logprob: -7.695023059844971
    6. 'for' → logprob: -7.820023059844971
    7. ' ' → logprob: -7.945023059844971
    8. 'count' → logprob: -8.445023536682129
    9. 'if' → logprob: -8.820023536682129
    10. '-' → logprob: -8.820023536682129

Token 33: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.031734760850667953
    2. '=' → logprob: -3.5317347049713135
    3. '[' → logprob: -6.281734943389893
    4. ' ' → logprob: -9.781734466552734
    5. '.add' → logprob: -10.906734466552734
    6. '```' → logprob: -12.031734466552734
    7. '[pos' → logprob: -12.281734466552734
    8. '   ' → logprob: -12.406734466552734
    9. '=set' → logprob: -12.781734466552734
    10. '<|end|>' → logprob: -13.031734466552734

Token 34: ' set' (ID: 920)
  Prédit: 'set'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'set' → logprob: -0.5845076441764832
    2. ' set' → logprob: -0.8345076441764832
    3. '{}' → logprob: -5.709507465362549
    4. '{' → logprob: -5.834507465362549
    5. '[' → logprob: -6.959507465362549
    6. ' {' → logprob: -7.834507465362549
    7. ' [' → logprob: -7.834507465362549
    8. ' []' → logprob: -8.834507942199707
    9. '[]' → logprob: -8.834507942199707
    10. ' {}' → logprob: -8.959507942199707

Token 35: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.011965014971792698
    2. '()
' → logprob: -4.761964797973633
    3. '(' → logprob: -6.136964797973633
    4. '()\' → logprob: -7.011964797973633
    5. '()

' → logprob: -9.386964797973633
    6. '   ' → logprob: -10.011964797973633
    7. '{' → logprob: -10.136964797973633
    8. '();' → logprob: -11.261964797973633
    9. '())' → logprob: -11.261964797973633
    10. '({' → logprob: -11.386964797973633

Token 36: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7887589335441589
    2. '<|end|>' → logprob: -1.0387589931488037
    3. ' 
' → logprob: -2.4137589931488037
    4. ' while' → logprob: -3.5387589931488037
    5. ' ' → logprob: -3.5387589931488037
    6. '    ' → logprob: -4.288758754730225
    7. '    
' → logprob: -5.038758754730225
    8. '\' → logprob: -5.413758754730225
    9. '\n' → logprob: -5.663758754730225
    10. '[' → logprob: -6.288758754730225

Token 37: ' while' (ID: 2049)
  Prédit: ' while'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' while' → logprob: -1.0084679126739502
    2. '   ' → logprob: -1.2584679126739502
    3. '\n' → logprob: -2.00846791267395
    4. '<|end|>' → logprob: -2.38346791267395
    5. ' 
' → logprob: -3.38346791267395
    6. 'while' (adapté à ' while') → logprob: -3.63346791267395
    7. ' ' → logprob: -4.133467674255371
    8. '    ' → logprob: -5.008467674255371
    9. '\' → logprob: -5.133467674255371
    10. '    
' → logprob: -5.383467674255371

Token 38: ' True' (ID: 6432)
  Prédit: 'pos'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pos' → logprob: -0.12107270956039429
    2. ' pos' → logprob: -2.246072769165039
    3. 'True' → logprob: -5.496072769165039
    4. 'a' → logprob: -6.246072769165039
    5. ' True' → logprob: -6.246072769165039
    6. ' a' → logprob: -8.871072769165039
    7. '(pos' → logprob: -9.871072769165039
    8. '	pos' → logprob: -11.371072769165039
    9. ' ' → logprob: -12.121072769165039
    10. '```' → logprob: -12.871072769165039

Token 39: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.1645176112651825
    2. '       ' → logprob: -1.9145176410675049
    3. ':
' → logprob: -6.664517402648926
    4. '<|end|>' → logprob: -7.039517402648926
    5. '   ' → logprob: -7.164517402648926
    6. '):' → logprob: -7.789517402648926
    7. ',' → logprob: -8.539517402648926
    8. ')' → logprob: -8.664517402648926
    9. ' and' → logprob: -9.164517402648926
    10. '    ' → logprob: -9.539517402648926

Token 40: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.047746021300554276
    2. '<|end|>' → logprob: -3.922745943069458
    3. '    ' → logprob: -4.422746181488037
    4. ' ' → logprob: -5.422746181488037
    5. '        
' → logprob: -5.547746181488037
    6. '        ' → logprob: -6.547746181488037
    7. ' if' → logprob: -6.797746181488037
    8. '   ' → logprob: -6.922746181488037
    9. ' 
' → logprob: -7.797746181488037
    10. '```' → logprob: -7.922746181488037

Token 41: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.1270531564950943
    2. 'if' (adapté à ' if') → logprob: -2.3770532608032227
    3. '       ' → logprob: -4.002053260803223
    4. '```' → logprob: -5.127053260803223
    5. 'pos' → logprob: -7.877053260803223
    6. '        
' → logprob: -8.002053260803223
    7. '        ' → logprob: -8.377053260803223
    8. ' visited' → logprob: -8.377053260803223
    9. 'visited' → logprob: -8.377053260803223
    10. ' pos' → logprob: -8.752053260803223

Token 42: ' pos' (ID: 1253)
  Prédit: ' pos'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pos' → logprob: -0.043318185955286026
    2. 'pos' → logprob: -3.168318271636963
    3. 'a' → logprob: -8.793317794799805
    4. ' a' → logprob: -8.793317794799805
    5. '(pos' → logprob: -11.793317794799805
    6. '	pos' → logprob: -12.918317794799805
    7. '[pos' → logprob: -13.043317794799805
    8. ',pos' → logprob: -14.918317794799805
    9. '_pos' → logprob: -15.043317794799805
    10. ' ' → logprob: -15.168317794799805

Token 43: ' ==' (ID: 951)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.03943737968802452
    2. 'in' → logprob: -3.2894372940063477
    3. ' not' → logprob: -6.664437294006348
    4. 'not' → logprob: -9.289437294006348
    5. ' ' → logprob: -11.164437294006348
    6. '+' → logprob: -11.789437294006348
    7. '<|end|>' → logprob: -13.539437294006348
    8. ')' → logprob: -13.914437294006348
    9. '	in' → logprob: -14.914437294006348
    10. ' ' → logprob: -14.914437294006348

Token 44: ' start' (ID: 1604)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.6600925326347351
    2. 'start' → logprob: -0.9100925326347351
    3. 'a' → logprob: -3.78509259223938
    4. ' start' → logprob: -3.91009259223938
    5. ' N' → logprob: -4.285092353820801
    6. '0' → logprob: -4.535092353820801
    7. '-' → logprob: -4.785092353820801
    8. ' ' → logprob: -6.410092353820801
    9. ' a' → logprob: -6.785092353820801
    10. ' -' → logprob: -6.910092353820801

Token 45: ' and' (ID: 326)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.7977214455604553
    2. ' or' → logprob: -0.7977214455604553
    3. ' and' → logprob: -2.4227213859558105
    4. 'and' → logprob: -5.4227213859558105
    5. '           ' → logprob: -5.5477213859558105
    6. ':
' → logprob: -7.0477213859558105
    7. '       ' → logprob: -7.5477213859558105
    8. ' ' → logprob: -8.422721862792969
    9. 'or' → logprob: -8.797721862792969
    10. ' :' → logprob: -8.922721862792969

Token 46: ' len' (ID: 4631)
  Prédit: 'pos'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pos' → logprob: -0.3781624138355255
    2. 'len' → logprob: -1.3781623840332031
    3. 'visited' → logprob: -3.628162384033203
    4. ' pos' → logprob: -4.003162384033203
    5. ' len' → logprob: -4.628162384033203
    6. 'count' → logprob: -5.253162384033203
    7. ' visited' → logprob: -6.253162384033203
    8. 'start' → logprob: -8.253162384033203
    9. 'False' → logprob: -8.878162384033203
    10. '(len' → logprob: -9.128162384033203

Token 47: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -1.664371848164592e-05
    2. 'visited' → logprob: -11.500016212463379
    3. ')' → logprob: -12.875016212463379
    4. '(vis' → logprob: -13.000016212463379
    5. '(
' → logprob: -14.500016212463379
    6. ' (' → logprob: -14.875016212463379
    7. '<|end|>' → logprob: -15.125016212463379
    8. '(visitor' → logprob: -16.125017166137695
    9. ' visited' → logprob: -16.625017166137695
    10. '()' → logprob: -17.500017166137695

Token 48: 'visited' (ID: 52453)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.25276315212249756
    2. 'visited' → logprob: -1.5027631521224976
    3. ')' → logprob: -7.502763271331787
    4. ' visited' → logprob: -8.502762794494629
    5. '(vis' → logprob: -10.877762794494629
    6. '```' → logprob: -11.877762794494629
    7. '(
' → logprob: -12.377762794494629
    8. 'Visited' → logprob: -12.377762794494629
    9. ' (' → logprob: -12.502762794494629
    10. '(visitor' → logprob: -12.815262794494629

Token 49: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.008048638701438904
    2. ')>' → logprob: -5.0080485343933105
    3. ' )' → logprob: -7.3830485343933105
    4. '>' → logprob: -8.133049011230469
    5. ')==' → logprob: -8.258049011230469
    6. ' >' → logprob: -9.258049011230469
    7. ')!=' → logprob: -11.133049011230469
    8. '==' → logprob: -11.633049011230469
    9. '):' → logprob: -12.258049011230469
    10. ')>=' → logprob: -12.383049011230469

Token 50: ' >' (ID: 1424)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>' → logprob: -0.10153374075889587
    2. ' >' → logprob: -2.3515336513519287
    3. ')' → logprob: -7.726533889770508
    4. ')>' → logprob: -8.101533889770508
    5. '==' → logprob: -8.476533889770508
    6. 'and' → logprob: -9.351533889770508
    7. '!=' → logprob: -9.726533889770508
    8. '()>' → logprob: -9.851533889770508
    9. ' !=' → logprob: -10.101533889770508
    10. ' ==' → logprob: -10.351533889770508

Token 51: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.005944444332271814
    2. ' ' → logprob: -5.25594425201416
    3. '1' → logprob: -7.25594425201416
    4. '>' → logprob: -12.88094425201416
    5. '۰' → logprob: -15.13094425201416
    6. '=' → logprob: -15.44344425201416
    7. 'count' → logprob: -15.69344425201416
    8. '2' → logprob: -16.193445205688477
    9. '<|end|>' → logprob: -16.255945205688477
    10. '```' → logprob: -16.318445205688477

Token 52: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0019461298361420631
    2. ' ' → logprob: -6.876945972442627
    3. '1' → logprob: -7.001945972442627
    4. '>' → logprob: -13.814446449279785
    5. '```' → logprob: -14.376946449279785
    6. '2' → logprob: -15.626946449279785
    7. '   ' → logprob: -15.876946449279785
    8. '۰' → logprob: -16.18944549560547
    9. ' ' → logprob: -16.68944549560547
    10. '=' → logprob: -16.68944549560547

Token 53: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0007408959208987653
    2. ' and' → logprob: -7.750741004943848
    3. ':
' → logprob: -8.500741004943848
    4. ' :' → logprob: -10.500741004943848
    5. ' or' → logprob: -10.750741004943848
    6. '):' → logprob: -10.750741004943848
    7. 'and' → logprob: -11.125741004943848
    8. ':return' → logprob: -11.750741004943848
    9. '       ' → logprob: -11.875741004943848
    10. '           ' → logprob: -12.875741004943848

Token 54: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.060726359486579895
    2. ':' → logprob: -2.9357264041900635
    3. ':
' → logprob: -6.185726165771484
    4. '       ' → logprob: -6.560726165771484
    5. ' break' → logprob: -7.060726165771484
    6. ' :' → logprob: -8.185726165771484
    7. '               ' → logprob: -8.185726165771484
    8. '            ' → logprob: -8.310726165771484
    9. '<|end|>' → logprob: -8.810726165771484
    10. '\n' → logprob: -9.435726165771484

Token 55: ' count' (ID: 3605)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.6634023785591125
    2. 'break' → logprob: -1.2884023189544678
    3. ' break' → logprob: -1.9134023189544678
    4. 'count' (adapté à ' count') → logprob: -3.0384023189544678
    5. '               ' → logprob: -4.913402557373047
    6. '       ' → logprob: -5.288402557373047
    7. ' count' → logprob: -6.913402557373047
    8. '```' → logprob: -9.038402557373047
    9. '   ' → logprob: -9.288402557373047
    10. '	break' → logprob: -10.038402557373047

Token 56: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.3869607448577881
    2. '+=' → logprob: -1.136960744857788
    3. '+' → logprob: -10.011960983276367
    4. '=' → logprob: -10.261960983276367
    5. '   ' → logprob: -12.261960983276367
    6. ' =' → logprob: -13.636960983276367
    7. ' ' → logprob: -13.636960983276367
    8. ']+=' → logprob: -13.886960983276367
    9. ' +' → logprob: -14.011960983276367
    10. '    ' → logprob: -14.761960983276367

Token 57: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0012041617883369327
    2. ' ' → logprob: -6.751204013824463
    3. 'len' → logprob: -10.376204490661621
    4. ' len' → logprob: -12.876204490661621
    5. ' ' → logprob: -16.876203536987305
    6. '10' → logprob: -17.376203536987305
    7. '(len' → logprob: -17.376203536987305
    8. '100' → logprob: -17.501203536987305
    9. '１' → logprob: -17.938703536987305
    10. '(' → logprob: -18.001203536987305

Token 58: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0004008793330285698
    2. 'len' → logprob: -7.875401020050049
    3. ' ' → logprob: -10.87540054321289
    4. '(len' → logprob: -14.37540054321289
    5. '(' → logprob: -14.50040054321289
    6. ' len' → logprob: -14.62540054321289
    7. '100' → logprob: -16.93790054321289
    8. '１' → logprob: -17.37540054321289
    9. '```' → logprob: -17.75040054321289
    10. '   ' → logprob: -17.93790054321289

Token 59: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0007028992986306548
    2. '
' → logprob: -8.250702857971191
    3. '               ' → logprob: -8.500702857971191
    4. '\n' → logprob: -9.250702857971191
    5. '            
' → logprob: -10.250702857971191
    6. ' break' → logprob: -10.250702857971191
    7. '       ' → logprob: -10.625702857971191
    8. 'break' → logprob: -11.250702857971191
    9. ' 
' → logprob: -12.125702857971191
    10. '                   ' → logprob: -12.250702857971191

Token 60: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.00046737297088839114
    2. '       ' → logprob: -8.250467300415039
    3. '               ' → logprob: -9.125467300415039
    4. '\n' → logprob: -10.625467300415039
    5. ' break' → logprob: -10.625467300415039
    6. '
' → logprob: -11.000467300415039
    7. '```' → logprob: -11.875467300415039
    8. 'break' → logprob: -12.125467300415039
    9. '   ' → logprob: -12.250467300415039
    10. '            
' → logprob: -12.250467300415039

Token 61: ' break' (ID: 2338)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'break' (adapté à ' break') → logprob: -0.08602238446474075
    2. ' break' → logprob: -2.58602237701416
    3. '           ' → logprob: -4.96102237701416
    4. '       ' → logprob: -9.71102237701416
    5. '	break' → logprob: -11.21102237701416
    6. '   ' → logprob: -11.33602237701416
    7. '```' → logprob: -11.46102237701416
    8. '               ' → logprob: -12.46102237701416
    9. '_break' → logprob: -15.58602237701416
    10. 'BREAK' → logprob: -15.96102237701416

Token 62: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.29879844188690186
    2. '
' → logprob: -1.5487984418869019
    3. '        
' → logprob: -3.4237985610961914
    4. '<|end|>' → logprob: -5.173798561096191
    5. '  
' → logprob: -6.298798561096191
    6. ' 
' → logprob: -6.423798561096191
    7. '\n' → logprob: -6.423798561096191
    8. '            
' → logprob: -7.673798561096191
    9. '    
' → logprob: -8.173798561096191
    10. '```' → logprob: -8.298798561096191

Token 63: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.009826094843447208
    2. '
' → logprob: -5.259826183319092
    3. '        
' → logprob: -6.259826183319092
    4. '<|end|>' → logprob: -6.384826183319092
    5. '```' → logprob: -7.759826183319092
    6. '\n' → logprob: -8.259825706481934
    7. '  
' → logprob: -10.384825706481934
    8. '<|end|>' → logprob: -10.509825706481934
    9. '   ' → logprob: -10.634825706481934
    10. ' if' → logprob: -10.759825706481934

Token 64: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.4594624638557434
    2. '       ' → logprob: -1.0844624042510986
    3. '```' → logprob: -4.334462642669678
    4. 'if' (adapté à ' if') → logprob: -4.459462642669678
    5. '        
' → logprob: -6.084462642669678
    6. '        ' → logprob: -7.084462642669678
    7. '   ' → logprob: -7.334462642669678
    8. '``' → logprob: -7.959462642669678
    9. ' 
' → logprob: -7.959462642669678
    10. ' elif' → logprob: -8.08446216583252

Token 65: ' pos' (ID: 1253)
  Prédit: 'pos'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pos' → logprob: -0.1002274826169014
    2. ' pos' → logprob: -2.3502275943756104
    3. 'a' → logprob: -10.975227355957031
    4. ' a' → logprob: -14.100227355957031
    5. '(pos' → logprob: -14.100227355957031
    6. '	pos' → logprob: -14.225227355957031
    7. '[pos' → logprob: -14.475227355957031
    8. '_pos' → logprob: -15.475227355957031
    9. ' ' → logprob: -16.35022735595703
    10. '           ' → logprob: -16.47522735595703

Token 66: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.05552991107106209
    2. 'in' → logprob: -2.930529832839966
    3. ' ' → logprob: -7.555530071258545
    4. ' not' → logprob: -9.305529594421387
    5. ')' → logprob: -11.305529594421387
    6. 'not' → logprob: -11.680529594421387
    7. '<|end|>' → logprob: -12.055529594421387
    8. '   ' → logprob: -13.680529594421387
    9. 'In' → logprob: -13.805529594421387
    10. '  ' → logprob: -14.055529594421387

Token 67: ' visited' (ID: 18416)
  Prédit: ' visited'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' visited' → logprob: -0.25193724036216736
    2. 'visited' → logprob: -1.5019372701644897
    3. 'Visited' → logprob: -12.501936912536621
    4. ' ' → logprob: -12.751936912536621
    5. '<|end|>' → logprob: -14.001936912536621
    6. 'vis' → logprob: -15.501936912536621
    7. 'vist' → logprob: -16.001937866210938
    8. '```' → logprob: -16.626937866210938
    9. ')' → logprob: -16.876937866210938
    10. ' visite' → logprob: -17.751937866210938

Token 68: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.02835864946246147
    2. ':
' → logprob: -3.6533586978912354
    3. ' or' → logprob: -7.278358459472656
    4. '       ' → logprob: -7.403358459472656
    5. '):' → logprob: -8.403358459472656
    6. '           ' → logprob: -8.528358459472656
    7. '):
' → logprob: -8.903358459472656
    8. '   ' → logprob: -9.403358459472656
    9. ')' → logprob: -9.903358459472656
    10. ' :' → logprob: -11.403358459472656

Token 69: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0004017137107439339
    2. ' break' → logprob: -8.500401496887207
    3. ':' → logprob: -9.875401496887207
    4. '               ' → logprob: -10.125401496887207
    5. '```' → logprob: -10.250401496887207
    6. '       ' → logprob: -10.875401496887207
    7. 'break' → logprob: -11.125401496887207
    8. ':
' → logprob: -11.375401496887207
    9. '   ' → logprob: -12.125401496887207
    10. ' or' → logprob: -12.750401496887207

Token 70: ' break' (ID: 2338)
  Prédit: ' break'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' break' → logprob: -0.9451762437820435
    2. 'break' (adapté à ' break') → logprob: -1.0701762437820435
    3. '           ' → logprob: -1.3201762437820435
    4. '```' → logprob: -7.195176124572754
    5. '               ' → logprob: -7.945176124572754
    6. '       ' → logprob: -8.945176124572754
    7. '   ' → logprob: -9.945176124572754
    8. '	break' → logprob: -10.070176124572754
    9. '``' → logprob: -10.945176124572754
    10. ' ' → logprob: -12.820176124572754

Token 71: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.20571178197860718
    2. '
' → logprob: -1.830711841583252
    3. '        
' → logprob: -4.080711841583252
    4. '```' → logprob: -5.580711841583252
    5. '<|end|>' → logprob: -6.580711841583252
    6. '  
' → logprob: -7.205711841583252
    7. 'visited' → logprob: -7.455711841583252
    8. '    
' → logprob: -7.955711841583252
    9. ' 
' → logprob: -7.955711841583252
    10. '\n' → logprob: -7.955711841583252

Token 72: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.18288464844226837
    2. '
' → logprob: -2.057884693145752
    3. '        
' → logprob: -3.432884693145752
    4. ' visited' → logprob: -6.307884693145752
    5. 'visited' → logprob: -6.307884693145752
    6. '```' → logprob: -6.557884693145752
    7. ' 
' → logprob: -7.307884693145752
    8. '<|end|>' → logprob: -8.057884216308594
    9. '  
' → logprob: -8.307884216308594
    10. '    
' → logprob: -8.432884216308594

Token 73: ' visited' (ID: 18416)
  Prédit: 'visited'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'visited' (adapté à ' visited') → logprob: -0.3538597822189331
    2. '       ' → logprob: -1.603859782218933
    3. ' visited' → logprob: -2.3538599014282227
    4. '   ' → logprob: -6.603859901428223
    5. '```' → logprob: -7.853859901428223
    6. '        
' → logprob: -9.353859901428223
    7. '
' → logprob: -10.853859901428223
    8. ' ' → logprob: -10.853859901428223
    9. '``' → logprob: -11.228859901428223
    10. '           ' → logprob: -11.978859901428223

Token 74: '.add' (ID: 1950)
  Prédit: '.add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.add' → logprob: -0.0015040287980809808
    2. '.' → logprob: -6.501503944396973
    3. '.update' → logprob: -14.501503944396973
    4. 'add' → logprob: -14.876503944396973
    5. '.Add' → logprob: -15.001503944396973
    6. ' .' → logprob: -16.25150489807129
    7. '.setdefault' → logprob: -16.37650489807129
    8. '.insert' → logprob: -16.50150489807129
    9. '<|end|>' → logprob: -16.75150489807129
    10. '.append' → logprob: -16.87650489807129

Token 75: '(pos' (ID: 24566)
  Prédit: '(pos'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(pos' → logprob: -0.00022916549642104656
    2. '(' → logprob: -8.625228881835938
    3. '(a' → logprob: -10.000228881835938
    4. 'pos' → logprob: -12.750228881835938
    5. '((' → logprob: -14.500228881835938
    6. '(p' → logprob: -15.500228881835938
    7. '(po' → logprob: -15.625228881835938
    8. ' (' → logprob: -16.500228881835938
    9. '(Pos' → logprob: -16.500228881835938
    10. ' pos' → logprob: -16.875228881835938

Token 76: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.05396635830402374
    2. ')' → logprob: -3.1789662837982178
    3. ')
' → logprob: -4.928966522216797
    4. '       ' → logprob: -5.678966522216797
    5. '
' → logprob: -9.178966522216797
    6. ' )
' → logprob: -9.178966522216797
    7. '
' → logprob: -10.928966522216797
    8. '   ' → logprob: -11.428966522216797
    9. ')

' → logprob: -11.928966522216797
    10. '' → logprob: -13.178966522216797

Token 77: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.03763434663414955
    2. 'pos' → logprob: -3.4126343727111816
    3. '```' → logprob: -5.912634372711182
    4. '   ' → logprob: -7.412634372711182
    5. ' pos' → logprob: -8.537633895874023
    6. '        
' → logprob: -8.662633895874023
    7. '``' → logprob: -8.912633895874023
    8. '
' → logprob: -9.412633895874023
    9. '	pos' → logprob: -10.287633895874023
    10. '<|end|>' → logprob: -11.537633895874023

Token 78: ' pos' (ID: 1253)
  Prédit: 'pos'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pos' (adapté à ' pos') → logprob: -2.3199920178740285e-05
    2. ' pos' → logprob: -10.750022888183594
    3. '       ' → logprob: -13.500022888183594
    4. '```' → logprob: -16.500022888183594
    5. '	pos' → logprob: -16.500022888183594
    6. '   ' → logprob: -17.250022888183594
    7. 'a' → logprob: -17.875022888183594
    8. '           ' → logprob: -18.000022888183594
    9. 'next' → logprob: -18.500022888183594
    10. '``' → logprob: -19.375022888183594

Token 79: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.4740816056728363
    2. ' =' → logprob: -0.9740816354751587
    3. ' ' → logprob: -12.974081993103027
    4. ' +=' → logprob: -14.349081993103027
    5. '+=' → logprob: -14.599081993103027
    6. 's' → logprob: -14.974081993103027
    7. 'x' → logprob: -15.724081993103027
    8. ')' → logprob: -15.849081993103027
    9. ',' → logprob: -15.974081993103027
    10. '=a' → logprob: -16.72408103942871

Token 80: ' (' (ID: 350)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.011049113236367702
    2. ' a' → logprob: -4.511049270629883
    3. ' ' → logprob: -15.261049270629883
    4. '   ' → logprob: -15.386049270629883
    5. '(a' → logprob: -15.511049270629883
    6. '	a' → logprob: -15.636049270629883
    7. '#a' → logprob: -16.011049270629883
    8. '[a' → logprob: -16.261049270629883
    9. '```' → logprob: -17.073549270629883
    10. 'pos' → logprob: -17.198549270629883

Token 81: 'pos' (ID: 1103)
  Prédit: 'pos'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pos' → logprob: -0.049931757152080536
    2. 'a' → logprob: -3.299931764602661
    3. ' pos' → logprob: -4.549931526184082
    4. '(pos' → logprob: -7.299931526184082
    5. ' a' → logprob: -8.049931526184082
    6. ' (' → logprob: -9.174931526184082
    7. 'start' → logprob: -9.924931526184082
    8. '(a' → logprob: -9.924931526184082
    9. '	pos' → logprob: -11.237431526184082
    10. '   ' → logprob: -11.549931526184082

Token 82: ' +' (ID: 659)
  Prédit: '[pos'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[pos' → logprob: -0.20651119947433472
    2. 'a' → logprob: -2.3315112590789795
    3. 'pos' → logprob: -2.5815112590789795
    4. '-' → logprob: -5.3315110206604
    5. ')' → logprob: -6.2065110206604
    6. ' pos' → logprob: -6.3315110206604
    7. '[a' → logprob: -6.8315110206604
    8. '+' → logprob: -6.9565110206604
    9. ' -' → logprob: -7.0815110206604
    10. '(pos' → logprob: -7.0815110206604

Token 83: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.005239921621978283
    2. ' a' → logprob: -5.255239963531494
    3. '1' → logprob: -12.255239486694336
    4. ' ' → logprob: -14.130239486694336
    5. ')' → logprob: -15.630239486694336
    6. '	a' → logprob: -15.630239486694336
    7. '   ' → logprob: -16.005239486694336
    8. '_a' → logprob: -16.130239486694336
    9. ')a' → logprob: -16.505239486694336
    10. '[a' → logprob: -17.130239486694336

Token 84: '[pos' (ID: 48272)
  Prédit: '[pos'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[pos' → logprob: -3.893480243277736e-05
    2. '[' → logprob: -10.250039100646973
    3. '[a' → logprob: -13.625039100646973
    4. 'pos' → logprob: -14.125039100646973
    5. '[start' → logprob: -14.125039100646973
    6. '[position' → logprob: -15.250039100646973
    7. '[
' → logprob: -15.750039100646973
    8. '[p' → logprob: -16.000038146972656
    9. ')' → logprob: -16.875038146972656
    10. 'a' → logprob: -16.875038146972656

Token 85: '])' (ID: 4636)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0011277174344286323
    2. ')%' → logprob: -7.75112771987915
    3. '[pos' → logprob: -8.251127243041992
    4. ' )' → logprob: -8.376127243041992
    5. '])' → logprob: -9.126127243041992
    6. '[' → logprob: -10.126127243041992
    7. ']' → logprob: -11.376127243041992
    8. '[N' → logprob: -11.626127243041992
    9. '%' → logprob: -12.001127243041992
    10. '）' → logprob: -12.376127243041992

Token 86: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.5380330085754395
    2. '%' → logprob: -0.9130330085754395
    3. ')' → logprob: -4.2880330085754395
    4. '[N' → logprob: -7.4130330085754395
    5. ')%' → logprob: -8.038032531738281
    6. '<|end|>' → logprob: -10.538032531738281
    7. '[' → logprob: -10.913032531738281
    8. '```' → logprob: -11.038032531738281
    9. ' ' → logprob: -11.538032531738281
    10. ' ' → logprob: -11.663032531738281

Token 87: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.0007099286303855479
    2. ' N' → logprob: -7.2507100105285645
    3. 'n' → logprob: -19.875709533691406
    4. ' ' → logprob: -20.125709533691406
    5. '(N' → logprob: -20.625709533691406
    6. '	N' → logprob: -21.000709533691406
    7. '   ' → logprob: -21.250709533691406
    8. '```' → logprob: -22.000709533691406
    9. '>N' → logprob: -22.500709533691406
    10. '`' → logprob: -23.000709533691406

Token 88: '

' (ID: 279)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0020116716623306274
    2. '
' → logprob: -6.252011775970459
    3. ' print' → logprob: -9.5020112991333
    4. ' 
' → logprob: -13.1270112991333
    5. ')
' → logprob: -13.1270112991333
    6. ')' → logprob: -13.3770112991333
    7. '  
' → logprob: -14.0020112991333
    8. '```' → logprob: -14.1270112991333
    9. '
' → logprob: -14.2520112991333
    10. '    
' → logprob: -16.002012252807617

Token 89: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00013595925702247769
    2. ' print' → logprob: -9.500136375427246
    3. '
' → logprob: -10.125136375427246
    4. ')
' → logprob: -11.500136375427246
    5. ')' → logprob: -11.625136375427246
    6. '```' → logprob: -13.500136375427246
    7. ' 
' → logprob: -15.625136375427246
    8. '(print' → logprob: -16.87513542175293
    9. '.print' → logprob: -17.00013542175293
    10. '``' → logprob: -17.50013542175293

Token 90: '(count' (ID: 25892)
  Prédit: '(count'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(count' → logprob: -0.2519364058971405
    2. '(' → logprob: -1.501936435699463
    3. '((' → logprob: -12.751935958862305
    4. '('' → logprob: -14.126935958862305
    5. '(
' → logprob: -14.376935958862305
    6. ' (' → logprob: -14.626935958862305
    7. '(len' → logprob: -14.626935958862305
    8. 'count' → logprob: -14.751935958862305
    9. '()' → logprob: -14.751935958862305
    10. '(sum' → logprob: -14.751935958862305

Token 91: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.650518920039758e-06
    2. ' )' → logprob: -13.500003814697266
    3. '))' → logprob: -13.875003814697266
    4. '`)' → logprob: -14.875003814697266
    5. '+' → logprob: -15.375003814697266
    6. ')`' → logprob: -15.500003814697266
    7. '(' → logprob: -16.000003814697266
    8. '```' → logprob: -16.500003814697266
    9. '()' → logprob: -16.625003814697266
    10. ')
' → logprob: -16.750003814697266


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 89
Tokens correctement prédits (1ère position, stricte): 37
Tokens correctement prédits (1ère position, avec adaptation): 40
Tokens correctement prédits (top 10): 77
Précision stricte (1ère position): 41.57%
Précision adaptée (1ère position): 44.94%
Précision (top 10): 86.52%
================================================================================
