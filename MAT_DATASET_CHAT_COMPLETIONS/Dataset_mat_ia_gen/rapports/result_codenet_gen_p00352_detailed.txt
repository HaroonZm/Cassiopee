================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 16:58:13
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
# Lecture des valeurs d'entrée séparées par un espace
a, b = map(int, input().split())

# Calcul de la somme totale des deux montants
total = a + b

# Partage équitable de la somme totale en deux parts égales
# Chaque part doit être un multiple de 1000, or a et b le sont déjà,
# et la somme aussi, donc la division donne déjà la bonne valeur
share = total // 2

# Affichage du résultat : montant que chacun reçoit
print(share)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: '#' (ID: 2)
  → Token d'amorce (pas de prédiction)

Token 1: ' Lecture' (ID: 106534)
  → Token d'amorce (pas de prédiction)

Token 2: ' des' (ID: 731)
  → Token d'amorce (pas de prédiction)

Token 3: ' valeurs' (ID: 73668)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.003702924121171236
    2. ' d' → logprob: -6.0037031173706055
    3. ' des' → logprob: -7.6287031173706055
    4. ' du' → logprob: -8.253703117370605
    5. ' :' → logprob: -9.003703117370605
    6. '_' → logprob: -9.253703117370605
    7. ' #' → logprob: -9.878703117370605
    8. 'd' → logprob: -10.253703117370605
    9. ''' → logprob: -10.878703117370605
    10. 'f' → logprob: -11.128703117370605

Token 4: ' d' (ID: 272)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.4254624843597412
    2. 's' → logprob: -2.300462484359741
    3. ':' → logprob: -3.175462484359741
    4. ' ' → logprob: -3.175462484359741
    5. 'd' → logprob: -4.17546272277832
    6. '#' → logprob: -4.17546272277832
    7. 'v' → logprob: -4.30046272277832
    8. '\n' → logprob: -4.30046272277832
    9. ' =' → logprob: -4.55046272277832
    10. '\' → logprob: -4.55046272277832

Token 5: ''entrée' (ID: 115820)
  Prédit: ''entrée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''entrée' → logprob: -0.3247240483760834
    2. 'entrée' → logprob: -1.5747240781784058
    3. ''environnement' → logprob: -3.574723958969116
    4. 'une' → logprob: -4.574724197387695
    5. ''une' → logprob: -4.824724197387695
    6. ''un' → logprob: -5.199724197387695
    7. 'entr' → logprob: -5.324724197387695
    8. 'ent' → logprob: -5.574724197387695
    9. ''ent' → logprob: -6.449724197387695
    10. 'es' → logprob: -6.699724197387695

Token 6: ' sépar' (ID: 97160)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.24604278802871704
    2. '```' → logprob: -2.9960427284240723
    3. 's' → logprob: -3.2460427284240723
    4. '_' → logprob: -3.3710427284240723
    5. 'inputs' → logprob: -4.246042728424072
    6. 'x' → logprob: -4.496042728424072
    7. 'entrée' → logprob: -4.621042728424072
    8. 'v' → logprob: -4.871042728424072
    9. '\n' → logprob: -4.996042728424072
    10. 'values' → logprob: -5.246042728424072

Token 7: 'ées' (ID: 5161)
  Prédit: 'ées'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ées' → logprob: -0.029510241001844406
    2. 'par' → logprob: -3.904510259628296
    3. 'és' → logprob: -5.904510021209717
    4. ' par' → logprob: -6.279510021209717
    5. 'es' → logprob: -6.404510021209717
    6. ',' → logprob: -7.154510021209717
    7. 'é' → logprob: -7.654510021209717
    8. ';' → logprob: -7.654510021209717
    9. '```' → logprob: -8.154510498046875
    10. 'ée' → logprob: -8.404510498046875

Token 8: ' par' (ID: 686)
  Prédit: 'es'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'es' → logprob: -0.18857981264591217
    2. ',' → logprob: -2.563579797744751
    3. 'par' → logprob: -3.938579797744751
    4. '_' → logprob: -3.938579797744751
    5. '```' → logprob: -3.938579797744751
    6. 's' → logprob: -4.43858003616333
    7. 'e' → logprob: -5.06358003616333
    8. ':' → logprob: -5.31358003616333
    9. '[' → logprob: -5.81358003616333
    10. '(' → logprob: -6.31358003616333

Token 9: ' un' (ID: 537)
  Prédit: 'des'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'des' → logprob: -0.6513361930847168
    2. 'es' → logprob: -1.7763361930847168
    3. 'un' → logprob: -2.026336193084717
    4. ' des' → logprob: -2.526336193084717
    5. 'une' → logprob: -3.276336193084717
    6. 'esp' → logprob: -3.651336193084717
    7. '```' → logprob: -5.276336193084717
    8. ''' → logprob: -5.401336193084717
    9. ''espace' → logprob: -6.151336193084717
    10. ';' → logprob: -6.276336193084717

Token 10: ' espace' (ID: 66004)
  Prédit: 'es'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'es' → logprob: -0.019278638064861298
    2. 'esp' → logprob: -4.269278526306152
    3. ''espace' → logprob: -6.019278526306152
    4. 's' → logprob: -7.269278526306152
    5. '\n' → logprob: -7.519278526306152
    6. ' espace' → logprob: -7.894278526306152
    7. ';' → logprob: -8.394278526306152
    8. '```' → logprob: -8.519278526306152
    9. 'space' → logprob: -8.644278526306152
    10. 'newline' → logprob: -8.894278526306152

Token 11: '
' (ID: 198)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.5276896357536316
    2. 'values' → logprob: -2.2776896953582764
    3. 'v' → logprob: -2.2776896953582764
    4. 'i' → logprob: -2.9026896953582764
    5. 'val' → logprob: -3.5276896953582764
    6. 's' → logprob: -3.7776896953582764
    7. 'data' → logprob: -4.152689456939697
    8. 'inputs' → logprob: -4.277689456939697
    9. 'e' → logprob: -4.902689456939697
    10. 'value' → logprob: -5.027689456939697

Token 12: 'a' (ID: 64)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -1.348538875579834
    2. 'val' → logprob: -1.848538875579834
    3. 'v' → logprob: -1.973538875579834
    4. 'values' → logprob: -2.223538875579834
    5. 'i' → logprob: -2.348538875579834
    6. 'inputs' → logprob: -3.223538875579834
    7. 'entr' → logprob: -3.348538875579834
    8. 'data' → logprob: -3.348538875579834
    9. 'n' → logprob: -4.098538875579834
    10. 'user' → logprob: -4.223538875579834

Token 13: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.7423133254051208
    2. ' =' → logprob: -0.9923133254051208
    3. '=' → logprob: -1.9923133850097656
    4. 'r' → logprob: -4.992313385009766
    5. '[' → logprob: -5.742313385009766
    6. ' ,' → logprob: -6.367313385009766
    7. '.' → logprob: -6.367313385009766
    8. ' ' → logprob: -7.367313385009766
    9. ',b' → logprob: -7.367313385009766
    10. 'a' → logprob: -7.492313385009766

Token 14: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.22839638590812683
    2. ' b' → logprob: -1.6033964157104492
    3. ' ' → logprob: -6.103396415710449
    4. '=' → logprob: -7.728396415710449
    5. ' =' → logprob: -8.72839641571045
    6. 'space' → logprob: -9.72839641571045
    7. '=b' → logprob: -9.97839641571045
    8. ',' → logprob: -11.22839641571045
    9. '_' → logprob: -12.10339641571045
    10. ',b' → logprob: -12.72839641571045

Token 15: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.3019719123840332
    2. ',' → logprob: -1.9269719123840332
    3. '=' → logprob: -2.176971912384033
    4. ' ,' → logprob: -7.176971912384033
    5. '<|end|>' → logprob: -7.426971912384033
    6. ')' → logprob: -8.801971435546875
    7. ' ' → logprob: -9.676971435546875
    8. '```' → logprob: -10.426971435546875
    9. '  ' → logprob: -12.051971435546875
    10. 'space' → logprob: -12.176971435546875

Token 16: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.22391803562641144
    2. ' input' → logprob: -1.973918080329895
    3. 'map' → logprob: -3.0989179611206055
    4. 'input' → logprob: -4.0989179611206055
    5. ' [' → logprob: -12.098917961120605
    6. ' list' → logprob: -12.473917961120605
    7. ' ' → logprob: -12.598917961120605
    8. ' ' → logprob: -12.973917961120605
    9. '[' → logprob: -14.098917961120605
    10. 'list' → logprob: -14.598917961120605

Token 17: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.004348467569798231
    2. '(' → logprob: -5.879348278045654
    3. '(str' → logprob: -6.629348278045654
    4. '(lambda' → logprob: -9.254348754882812
    5. '(input' → logprob: -9.629348754882812
    6. 'int' → logprob: -10.004348754882812
    7. '<int' → logprob: -12.004348754882812
    8. '[int' → logprob: -12.879348754882812
    9. '(list' → logprob: -13.129348754882812
    10. 'str' → logprob: -13.504348754882812

Token 18: ',' (ID: 11)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.23001989722251892
    2. '(input' → logprob: -1.7300199270248413
    3. ' input' → logprob: -3.9800198078155518
    4. ')' → logprob: -4.980020046234131
    5. ',input' → logprob: -6.230020046234131
    6. ',' → logprob: -7.730020046234131
    7. '(' → logprob: -9.230019569396973
    8. '=input' → logprob: -9.605019569396973
    9. ' )' → logprob: -10.855019569396973
    10. '[input' → logprob: -11.355019569396973

Token 19: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.02325037121772766
    2. ' input' → logprob: -3.7732503414154053
    3. '(input' → logprob: -13.023250579833984
    4. ')' → logprob: -13.523250579833984
    5. '=input' → logprob: -14.773250579833984
    6. ',input' → logprob: -15.148250579833984
    7. '	input' → logprob: -15.273250579833984
    8. '<input' → logprob: -16.148250579833984
    9. '```' → logprob: -16.148250579833984
    10. '[input' → logprob: -16.523250579833984

Token 20: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.11875548213720322
    2. '())' → logprob: -2.618755578994751
    3. '()' → logprob: -3.368755578994751
    4. '('' → logprob: -5.993755340576172
    5. ')' → logprob: -6.743755340576172
    6. '(' → logprob: -7.493755340576172
    7. '());' → logprob: -9.118755340576172
    8. '('').' → logprob: -9.493755340576172
    9. '("' → logprob: -9.993755340576172
    10. ' ())' → logprob: -10.618755340576172

Token 21: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0011839192593470216
    2. 'strip' → logprob: -6.751183986663818
    3. 'rstrip' → logprob: -11.25118350982666
    4. ' split' → logprob: -14.50118350982666
    5. 'spl' → logprob: -16.001184463500977
    6. '(split' → logprob: -16.001184463500977
    7. 'read' → logprob: -18.501184463500977
    8. 's' → logprob: -19.001184463500977
    9. 'plit' → logprob: -19.626184463500977
    10. '```' → logprob: -20.126184463500977

Token 22: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.09348588436841965
    2. ')' → logprob: -2.7184858322143555
    3. '))' → logprob: -4.5934858322143555
    4. '()))' → logprob: -4.5934858322143555
    5. '()' → logprob: -6.2184858322143555
    6. '('' → logprob: -7.2184858322143555
    7. '(' → logprob: -8.593485832214355
    8. ' ())' → logprob: -9.718485832214355
    9. '')' → logprob: -10.968485832214355
    10. '`)' → logprob: -11.843485832214355

Token 23: '#' (ID: 2)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.1938084065914154
    2. '#' → logprob: -2.9438083171844482
    3. ')' → logprob: -3.5688083171844482
    4. '*' → logprob: -3.8188083171844482
    5. 'print' → logprob: -3.8188083171844482
    6. ',' → logprob: -4.193808555603027
    7. 'if' → logprob: -4.443808555603027
    8. 'a' → logprob: -5.318808555603027
    9. '<|end|>' → logprob: -5.318808555603027
    10. ' ' → logprob: -5.693808555603027

Token 24: ' Calcul' (ID: 57243)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.05032247304916382
    2. 'c' → logprob: -4.300322532653809
    3. ' print' → logprob: -4.675322532653809
    4. '#' → logprob: -4.675322532653809
    5. 'result' → logprob: -4.925322532653809
    6. 'if' → logprob: -5.300322532653809
    7. 'sum' → logprob: -6.300322532653809
    8. 's' → logprob: -6.675322532653809
    9. 'a' → logprob: -7.675322532653809
    10. ' if' → logprob: -7.925322532653809

Token 25: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -1.2586002349853516
    2. ')' → logprob: -1.3836002349853516
    3. ' ' → logprob: -2.1336002349853516
    4. '(' → logprob: -2.3836002349853516
    5. 'a' → logprob: -2.8836002349853516
    6. ' a' → logprob: -2.8836002349853516
    7. ' =' → logprob: -3.5086002349853516
    8. 's' → logprob: -3.6336002349853516
    9. '=' → logprob: -4.508600234985352
    10. ',' → logprob: -4.633600234985352

Token 26: ' la' (ID: 557)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.2641514837741852
    2. 'a' → logprob: -1.8891514539718628
    3. ' ' → logprob: -2.8891515731811523
    4. ' la' → logprob: -3.7641515731811523
    5. ' l' → logprob: -7.264151573181152
    6. 'l' → logprob: -8.514151573181152
    7. ' c' → logprob: -8.514151573181152
    8. ' max' → logprob: -8.639151573181152
    9. 's' → logprob: -8.764151573181152
    10. '  ' → logprob: -9.264151573181152

Token 27: ' somme' (ID: 64484)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.6331489682197571
    2. ' somme' → logprob: -0.7581489682197571
    3. 'som' → logprob: -8.758149147033691
    4. ' ' → logprob: -9.383149147033691
    5. ' puissance' → logprob: -10.133149147033691
    6. 'sum' → logprob: -10.508149147033691
    7. ' som' → logprob: -10.633149147033691
    8. ' sommes' → logprob: -10.633149147033691
    9. '_s' → logprob: -11.008149147033691
    10. 'pu' → logprob: -11.008149147033691

Token 28: ' totale' (ID: 52898)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.004158887546509504
    2. 'c' → logprob: -6.254158973693848
    3. 's' → logprob: -6.754158973693848
    4. ' a' → logprob: -7.629158973693848
    5. 'result' → logprob: -8.379158973693848
    6. ')' → logprob: -9.379158973693848
    7. '(a' → logprob: -9.504158973693848
    8. ' =' → logprob: -9.629158973693848
    9. '=' → logprob: -10.129158973693848
    10. 'print' → logprob: -10.254158973693848

Token 29: ' des' (ID: 731)
  Prédit: 'total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'total' → logprob: -0.9890068769454956
    2. 's' → logprob: -1.2390068769454956
    3. 'c' → logprob: -1.7390068769454956
    4. 'result' → logprob: -2.114006996154785
    5. 'sum' → logprob: -3.489006996154785
    6. ' total' → logprob: -5.864006996154785
    7. ' =' → logprob: -5.864006996154785
    8. '=' → logprob: -6.239006996154785
    9. ' c' → logprob: -6.489006996154785
    10. ' s' → logprob: -6.989006996154785

Token 30: ' deux' (ID: 10301)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.6843609809875488
    2. ' deux' → logprob: -1.6843609809875488
    3. ' a' → logprob: -2.434360980987549
    4. ' nombres' → logprob: -2.809360980987549
    5. ' ' → logprob: -2.934360980987549
    6. 'de' → logprob: -3.184360980987549
    7. 'n' → logprob: -4.059360980987549
    8. '2' → logprob: -4.684360980987549
    9. 'élé' → logprob: -5.059360980987549
    10. ' valeurs' → logprob: -5.309360980987549

Token 31: ' mont' (ID: 11554)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.773581326007843
    2. ' nombres' → logprob: -0.898581326007843
    3. ' a' → logprob: -2.8985812664031982
    4. 's' → logprob: -3.7735812664031982
    5. ' valeurs' → logprob: -4.398581504821777
    6. 'numbers' → logprob: -4.648581504821777
    7. ' variables' → logprob: -5.273581504821777
    8. ' numbers' → logprob: -5.273581504821777
    9. 'variables' → logprob: -5.398581504821777
    10. ' ' → logprob: -5.773581504821777

Token 32: 'ants' (ID: 2027)
  Prédit: 'ants'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ants' → logprob: -0.0002867225557565689
    2. 'ant' → logprob: -8.250287055969238
    3. 'a' → logprob: -10.875287055969238
    4. ' ants' → logprob: -12.625287055969238
    5. '```' → logprob: -14.500287055969238
    6. 'ans' → logprob: -14.500287055969238
    7. 'ages' → logprob: -15.125287055969238
    8. 'an' → logprob: -15.125287055969238
    9. 'ats' → logprob: -15.250287055969238
    10. 'antd' → logprob: -15.500287055969238

Token 33: '
' (ID: 198)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.05857982486486435
    2. ' ' → logprob: -4.183579921722412
    3. 'total' → logprob: -4.183579921722412
    4. 'c' → logprob: -4.683579921722412
    5. 'a' → logprob: -5.433579921722412
    6. '_' → logprob: -5.808579921722412
    7. ' =' → logprob: -6.183579921722412
    8. '=' → logprob: -6.433579921722412
    9. ',' → logprob: -6.808579921722412
    10. 'sum' → logprob: -6.933579921722412

Token 34: 'total' (ID: 9577)
  Prédit: 'total'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'total' → logprob: -0.08709888160228729
    2. ' total' → logprob: -3.3370988368988037
    3. 's' → logprob: -3.7120988368988037
    4. 'c' → logprob: -4.462099075317383
    5. 'result' → logprob: -4.962099075317383
    6. 'sum' → logprob: -5.462099075317383
    7. ' somme' → logprob: -8.337099075317383
    8. ' c' → logprob: -9.212099075317383
    9. ' sum' → logprob: -9.337099075317383
    10. ' s' → logprob: -9.337099075317383

Token 35: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.2967684268951416
    2. '_' → logprob: -1.4217684268951416
    3. '_s' → logprob: -4.9217681884765625
    4. '=' → logprob: -5.4217681884765625
    5. '_sum' → logprob: -6.1717681884765625
    6. ' _' → logprob: -6.9217681884765625
    7. 's' → logprob: -7.9217681884765625
    8. '_amount' → logprob: -9.296768188476562
    9. '_total' → logprob: -10.171768188476562
    10. '_=' → logprob: -10.296768188476562

Token 36: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.07889033854007721
    2. ' a' → logprob: -2.578890323638916
    3. ' ' → logprob: -14.953890800476074
    4. '	a' → logprob: -16.078889846801758
    5. '(a' → logprob: -16.203889846801758
    6. '_a' → logprob: -17.578889846801758
    7. ' ' → logprob: -18.203889846801758
    8. '   ' → logprob: -18.828889846801758
    9. 'а' → logprob: -19.391389846801758
    10. '  ' → logprob: -19.453889846801758

Token 37: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.023250484839081764
    2. '+' → logprob: -3.7732505798339844
    3. ' ' → logprob: -12.773250579833984
    4. '+b' → logprob: -13.273250579833984
    5. ' ' → logprob: -15.648250579833984
    6. ' +
' → logprob: -15.648250579833984
    7. ' plus' → logprob: -16.523250579833984
    8. ' +
' → logprob: -18.023250579833984
    9. ')' → logprob: -18.398250579833984
    10. ' ,' → logprob: -18.523250579833984

Token 38: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.5759397745132446
    2. 'b' → logprob: -0.8259397745132446
    3. ' ' → logprob: -15.700940132141113
    4. ' ' → logprob: -15.825940132141113
    5. '	b' → logprob: -16.075939178466797
    6. ' б' → logprob: -17.700939178466797
    7. '_b' → logprob: -18.825939178466797
    8. ')b' → logprob: -19.700939178466797
    9. '```' → logprob: -19.825939178466797
    10. '>b' → logprob: -20.013439178466797

Token 39: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.1107587069272995
    2. '<|end|>' → logprob: -2.8607587814331055
    3. '*' → logprob: -4.2357587814331055
    4. '+' → logprob: -4.6107587814331055
    5. '#' → logprob: -5.3607587814331055
    6. ' 
' → logprob: -5.8607587814331055
    7. '\n' → logprob: -5.9857587814331055
    8. ')' → logprob: -6.3607587814331055
    9. 'print' → logprob: -6.4857587814331055
    10. '

' → logprob: -6.4857587814331055

Token 40: '#' (ID: 2)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.14980697631835938
    2. '
' → logprob: -2.8998069763183594
    3. 'if' → logprob: -3.0248069763183594
    4. '#' → logprob: -4.149806976318359
    5. '\n' → logprob: -5.024806976318359
    6. '\' → logprob: -5.274806976318359
    7. ' 
' → logprob: -6.524806976318359
    8. '<|end|>' → logprob: -6.649806976318359
    9. '```' → logprob: -6.649806976318359
    10. '
' → logprob: -7.399806976318359

Token 41: ' Part' (ID: 4906)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.549570620059967
    2. 'if' → logprob: -0.924570620059967
    3. ' if' → logprob: -3.9245705604553223
    4. ' print' → logprob: -5.799570560455322
    5. '#' → logprob: -6.299570560455322
    6. 'result' → logprob: -7.299570560455322
    7. 'for' → logprob: -8.67457103729248
    8. 'p' → logprob: -9.17457103729248
    9. 's' → logprob: -9.42457103729248
    10. 'prin' → logprob: -9.54957103729248

Token 42: 'age' (ID: 477)
  Prédit: 'age'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'age' → logprob: -0.013825550675392151
    2. 'ition' → logprob: -4.888825416564941
    3. 'ages' → logprob: -6.888825416564941
    4. 'ager' → logprob: -7.138825416564941
    5. 'e' → logprob: -7.388825416564941
    6. '#' → logprob: -7.638825416564941
    7. 'ion' → logprob: -7.888825416564941
    8. 'ie' → logprob: -7.888825416564941
    9. 'i' → logprob: -8.138825416564941
    10. '_' → logprob: -8.138825416564941

Token 43: ' équ' (ID: 18899)
  Prédit: ' équ'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' équ' → logprob: -1.389085054397583
    2. '_' → logprob: -1.639085054397583
    3. ' =' → logprob: -2.389085054397583
    4. ' equal' → logprob: -2.514085054397583
    5. ' de' → logprob: -2.639085054397583
    6. ' total' → logprob: -2.889085054397583
    7. ' égal' → logprob: -3.014085054397583
    8. ' des' → logprob: -3.139085054397583
    9. 'total' → logprob: -3.639085054397583
    10. '=' → logprob: -3.764085054397583

Token 44: 'itable' (ID: 8375)
  Prédit: 'itable'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'itable' → logprob: -0.12188329547643661
    2. 'al' → logprob: -2.2468833923339844
    3. 'a' → logprob: -6.246883392333984
    4. 'i' → logprob: -6.371883392333984
    5. 'it' → logprob: -6.496883392333984
    6. 'ilibre' → logprob: -7.496883392333984
    7. 'itaire' → logprob: -7.621883392333984
    8. 'ale' → logprob: -8.121883392333984
    9. 'ilibr' → logprob: -8.496883392333984
    10. 'ivalent' → logprob: -8.496883392333984

Token 45: ' de' (ID: 334)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -1.3609503507614136
    2. ' amount' → logprob: -2.110950469970703
    3. ' equal' → logprob: -2.235950469970703
    4. ' share' → logprob: -2.485950469970703
    5. ' result' → logprob: -2.860950469970703
    6. 'equal' → logprob: -2.860950469970703
    7. 'share' → logprob: -2.985950469970703
    8. 'amount' → logprob: -3.360950469970703
    9. 'result' → logprob: -3.360950469970703
    10. ' part' → logprob: -3.360950469970703

Token 46: ' la' (ID: 557)
  Prédit: ' la'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.40345636010169983
    2. ' total' → logprob: -1.6534563302993774
    3. 'total' → logprob: -2.278456449508667
    4. 'la' → logprob: -3.403456449508667
    5. 'l' → logprob: -6.278456211090088
    6. ' l' → logprob: -6.778456211090088
    7. ' the' → logprob: -7.653456211090088
    8. ' ' → logprob: -7.653456211090088
    9. 's' → logprob: -8.403456687927246
    10. 'the' → logprob: -8.778456687927246

Token 47: ' somme' (ID: 64484)
  Prédit: ' somme'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' somme' → logprob: -0.3154013752937317
    2. 'total' → logprob: -2.065401315689087
    3. ' total' → logprob: -2.440401315689087
    4. 's' → logprob: -2.940401315689087
    5. 'sum' → logprob: -7.065401554107666
    6. 'val' → logprob: -7.940401554107666
    7. ' ' → logprob: -7.940401554107666
    8. ' totale' → logprob: -7.940401554107666
    9. ' valeur' → logprob: -8.190401077270508
    10. ' s' → logprob: -8.315401077270508

Token 48: ' totale' (ID: 52898)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.6642752885818481
    2. ' equal' → logprob: -2.2892751693725586
    3. ' result' → logprob: -3.0392751693725586
    4. 'equal' → logprob: -3.1642751693725586
    5. 's' → logprob: -3.2892751693725586
    6. ' partage' → logprob: -3.5392751693725586
    7. ' half' → logprob: -3.7892751693725586
    8. 'result' → logprob: -3.7892751693725586
    9. 'total' → logprob: -3.9142751693725586
    10. ' part' → logprob: -4.039275169372559

Token 49: ' en' (ID: 469)
  Prédit: 'part'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'part' → logprob: -0.5786936283111572
    2. 'share' → logprob: -1.4536936283111572
    3. 'half' → logprob: -2.2036936283111572
    4. 'shared' → logprob: -4.078693389892578
    5. ' share' → logprob: -4.203693389892578
    6. 'result' → logprob: -4.453693389892578
    7. ' part' → logprob: -4.578693389892578
    8. ' partage' → logprob: -4.578693389892578
    9. 'equal' → logprob: -4.828693389892578
    10. ' half' → logprob: -5.203693389892578

Token 50: ' deux' (ID: 10301)
  Prédit: 'de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'de' → logprob: -0.6194332242012024
    2. '2' → logprob: -0.9944332242012024
    3. ' deux' → logprob: -3.1194331645965576
    4. ' parts' → logprob: -3.6194331645965576
    5. ' ' → logprob: -4.369433403015137
    6. 'parts' → logprob: -5.244433403015137
    7. 'part' → logprob: -7.369433403015137
    8. '```' → logprob: -7.369433403015137
    9. 'div' → logprob: -8.119433403015137
    10. 'two' → logprob: -8.244433403015137

Token 51: ' parts' (ID: 7881)
  Prédit: ' parts'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' parts' → logprob: -1.0181537866592407
    2. 's' → logprob: -2.393153667449951
    3. '
' → logprob: -2.643153667449951
    4. '\' → logprob: -2.643153667449951
    5. 'parts' → logprob: -2.643153667449951
    6. '\n' → logprob: -2.768153667449951
    7. ' equal' → logprob: -2.893153667449951
    8. 'result' → logprob: -2.893153667449951
    9. 'equal' → logprob: -3.393153667449951
    10. ' 
' → logprob: -4.143153667449951

Token 52: ' ég' (ID: 33150)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -1.6545584201812744
    2. '
' → logprob: -1.7795584201812744
    3. 'part' → logprob: -2.4045584201812744
    4. ' =' → logprob: -2.7795584201812744
    5. 'result' → logprob: -2.9045584201812744
    6. ' 
' → logprob: -2.9045584201812744
    7. 'equal' → logprob: -2.9045584201812744
    8. ',' → logprob: -3.0295584201812744
    9. ':' → logprob: -3.4045584201812744
    10. 'a' → logprob: -3.5295584201812744

Token 53: 'ales' (ID: 3459)
  Prédit: 'ales'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ales' → logprob: -0.0028983091469854116
    2. 'al' → logprob: -5.877898216247559
    3. 'ale' → logprob: -9.877898216247559
    4. 'a' → logprob: -11.127898216247559
    5. 'aux' → logprob: -11.502898216247559
    6. '```' → logprob: -12.127898216247559
    7. '``' → logprob: -13.252898216247559
    8. '

' → logprob: -14.002898216247559
    9. '**' → logprob: -14.377898216247559
    10. '#' → logprob: -14.377898216247559

Token 54: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.3521367013454437
    2. 'part' → logprob: -2.3521366119384766
    3. 'c' → logprob: -2.4771366119384766
    4. 'result' → logprob: -2.9771366119384766
    5. '\' → logprob: -4.727136611938477
    6. '```' → logprob: -4.977136611938477
    7. 'a' → logprob: -5.352136611938477
    8. ',' → logprob: -5.602136611938477
    9. 's' → logprob: -5.602136611938477
    10. '\n' → logprob: -5.602136611938477

Token 55: '#' (ID: 2)
  Prédit: 'part'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'part' → logprob: -0.2548583745956421
    2. ' part' → logprob: -2.5048584938049316
    3. 'share' → logprob: -2.7548584938049316
    4. 'c' → logprob: -4.004858493804932
    5. 'result' → logprob: -4.254858493804932
    6. ' share' → logprob: -4.504858493804932
    7. 'half' → logprob: -4.754858493804932
    8. 'equal' → logprob: -4.754858493804932
    9. 'a' → logprob: -5.629858493804932
    10. ' equal' → logprob: -6.129858493804932

Token 56: ' Chaque' (ID: 94758)
  Prédit: 'part'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'part' → logprob: -0.4589913785457611
    2. 'share' → logprob: -1.8339914083480835
    3. ' part' → logprob: -2.583991289138794
    4. ' share' → logprob: -2.833991289138794
    5. 'c' → logprob: -3.708991289138794
    6. 'half' → logprob: -4.208991527557373
    7. 'equal' → logprob: -4.708991527557373
    8. ' half' → logprob: -5.583991527557373
    9. ' equal' → logprob: -5.708991527557373
    10. 'result' → logprob: -5.833991527557373

Token 57: ' part' (ID: 997)
  Prédit: 'part'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'part' → logprob: -0.06101810559630394
    2. ' part' → logprob: -3.0610179901123047
    3. 'person' → logprob: -5.061017990112305
    4. 'participant' → logprob: -6.311017990112305
    5. 'port' → logprob: -7.998517990112305
    6. 'portion' → logprob: -8.436017990112305
    7. '_part' → logprob: -8.623517990112305
    8. 'share' → logprob: -8.686017990112305
    9. '_' → logprob: -8.686017990112305
    10. ' partie' → logprob: -8.686017990112305

Token 58: ' doit' (ID: 21822)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.1613788902759552
    2. '=' → logprob: -1.9113788604736328
    3. ' vaut' → logprob: -6.911378860473633
    4. 'est' → logprob: -10.161378860473633
    5. 'val' → logprob: -10.786378860473633
    6. ' est' → logprob: -11.286378860473633
    7. ' val' → logprob: -11.661378860473633
    8. 'a' → logprob: -11.786378860473633
    9. ' ' → logprob: -11.911378860473633
    10. ' a' → logprob: -12.036378860473633

Token 59: ' être' (ID: 9104)
  Prédit: 'être'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'être' → logprob: -0.5177648663520813
    2. ' être' → logprob: -1.2677648067474365
    3. ' val' → logprob: -2.5177648067474365
    4. 'val' → logprob: -4.267765045166016
    5. ' =' → logprob: -5.392765045166016
    6. '=' → logprob: -6.017765045166016
    7. 'avoir' → logprob: -6.017765045166016
    8. 'êt' → logprob: -6.017765045166016
    9. 'êtres' → logprob: -6.017765045166016
    10. ' ' → logprob: -6.392765045166016

Token 60: ' un' (ID: 537)
  Prédit: 'total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'total' → logprob: -0.30526256561279297
    2. ' ég' → logprob: -2.805262565612793
    3. ' total' → logprob: -3.055262565612793
    4. 'un' → logprob: -3.555262565612793
    5. ' un' → logprob: -3.930262565612793
    6. ' totale' → logprob: -4.055262565612793
    7. 'au' → logprob: -4.680262565612793
    8. 'une' → logprob: -4.680262565612793
    9. 'inf' → logprob: -4.805262565612793
    10. 'strict' → logprob: -4.930262565612793

Token 61: ' multiple' (ID: 7598)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.028300242498517036
    2. ' entier' → logprob: -4.0283002853393555
    3. 'ent' → logprob: -4.7783002853393555
    4. ' nombre' → logprob: -7.5283002853393555
    5. ' e' → logprob: -8.653300285339355
    6. 'nombre' → logprob: -8.778300285339355
    7. ''ent' → logprob: -8.903300285339355
    8. ' entière' → logprob: -9.278300285339355
    9. 'int' → logprob: -9.278300285339355
    10. ' ent' → logprob: -9.903300285339355

Token 62: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.027645176276564598
    2. 'de' → logprob: -3.7776451110839844
    3. ' ' → logprob: -6.152645111083984
    4. ' of' → logprob: -6.652645111083984
    5. 'd' → logprob: -8.027645111083984
    6. '  ' → logprob: -9.152645111083984
    7. '#' → logprob: -9.277645111083984
    8. ' du' → logprob: -9.902645111083984
    9. ' ' → logprob: -9.902645111083984
    10. ' d' → logprob: -10.027645111083984

Token 63: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.536205530166626
    2. '10' → logprob: -1.286205530166626
    3. '5' → logprob: -2.786205530166626
    4. '2' → logprob: -3.786205530166626
    5. '100' → logprob: -4.411205291748047
    6. '4' → logprob: -4.661205291748047
    7. '3' → logprob: -5.036205291748047
    8. '9' → logprob: -5.286205291748047
    9. '50' → logprob: -5.411205291748047
    10. '25' → logprob: -5.786205291748047

Token 64: '100' (ID: 1353)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.4965170621871948
    2. '5' → logprob: -1.4965170621871948
    3. '2' → logprob: -2.2465171813964844
    4. '100' → logprob: -3.7465171813964844
    5. '4' → logprob: -4.621517181396484
    6. '50' → logprob: -4.746517181396484
    7. '3' → logprob: -4.871517181396484
    8. '1' → logprob: -5.621517181396484
    9. '500' → logprob: -6.246517181396484
    10. ' ' → logprob: -6.871517181396484

Token 65: '0' (ID: 15)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.4003834128379822
    2. ' 
' → logprob: -1.775383472442627
    3. 'if' → logprob: -3.150383472442627
    4. '\' → logprob: -3.650383472442627
    5. ' if' → logprob: -4.525383472442627
    6. '' → logprob: -4.650383472442627
    7. ',' → logprob: -4.900383472442627
    8. '  
' → logprob: -5.150383472442627
    9. ',
' → logprob: -5.275383472442627
    10. 's' → logprob: -5.275383472442627

Token 66: ',' (ID: 11)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.4484536647796631
    2. ' 
' → logprob: -2.073453664779663
    3. ',' → logprob: -3.448453664779663
    4. '\' → logprob: -3.573453664779663
    5. 'if' → logprob: -3.573453664779663
    6. '' → logprob: -3.573453664779663
    7. 'n' → logprob: -4.198453903198242
    8. ',
' → logprob: -4.448453903198242
    9. '\n' → logprob: -4.573453903198242
    10. 's' → logprob: -4.698453903198242

Token 67: ' or' (ID: 503)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.4324935972690582
    2. ' #' → logprob: -2.3074936866760254
    3. ' if' → logprob: -3.1824936866760254
    4. 'if' → logprob: -3.8074936866760254
    5. ' 
' → logprob: -3.9324936866760254
    6. '100' → logprob: -4.182493686676025
    7. ' so' → logprob: -4.307493686676025
    8. 'div' → logprob: -4.307493686676025
    9. ' car' → logprob: -4.557493686676025
    10. ' ' → logprob: -4.557493686676025

Token 68: ' a' (ID: 261)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.3427385091781616
    2. ':' → logprob: -1.8427385091781616
    3. ',' → logprob: -2.092738628387451
    4. ' ' → logprob: -2.592738628387451
    5. ' total' → logprob: -2.842738628387451
    6. ' la' → logprob: -2.842738628387451
    7. ' a' → logprob: -2.967738628387451
    8. ' il' → logprob: -3.217738628387451
    9. ' the' → logprob: -3.842738628387451
    10. ' on' → logprob: -3.967738628387451

Token 69: ' et' (ID: 859)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.38265731930732727
    2. '+' → logprob: -3.257657289505005
    3. ' =' → logprob: -3.257657289505005
    4. '=' → logprob: -3.507657289505005
    5. ' ,' → logprob: -3.632657289505005
    6. '%' → logprob: -3.882657289505005
    7. 'r' → logprob: -4.132657527923584
    8. 's' → logprob: -4.132657527923584
    9. 't' → logprob: -4.382657527923584
    10. 'nd' → logprob: -4.507657527923584

Token 70: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.08909246325492859
    2. 'b' → logprob: -2.464092493057251
    3. ' ' → logprob: -9.089092254638672
    4. ' ' → logprob: -10.964092254638672
    5. '<|end|>' → logprob: -11.464092254638672
    6. '100' → logprob: -12.839092254638672
    7. 'nbsp' → logprob: -13.089092254638672
    8. '	b' → logprob: -13.589092254638672
    9. '```' → logprob: -14.089092254638672
    10. 'u' → logprob: -14.339092254638672

Token 71: ' le' (ID: 505)
  Prédit: ' sont'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' sont' → logprob: -1.4688966274261475
    2. ' ne' → logprob: -1.5938966274261475
    3. ' doivent' → logprob: -1.7188966274261475
    4. '%' → logprob: -1.8438966274261475
    5. ' %' → logprob: -2.7188966274261475
    6. ' =' → logprob: -2.9688966274261475
    7. 's' → logprob: -3.5938966274261475
    8. ',' → logprob: -4.343896865844727
    9. '=' → logprob: -4.718896865844727
    10. ' n' → logprob: -4.718896865844727

Token 72: ' sont' (ID: 5242)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.021909819915890694
    2. ' sont' → logprob: -4.146909713745117
    3. ' ' → logprob: -5.896909713745117
    4. ' ' → logprob: -6.896909713745117
    5. '```' → logprob: -7.646909713745117
    6. 'ont' → logprob: -7.646909713745117
    7. ' font' → logprob: -8.771909713745117
    8. '  ' → logprob: -8.896909713745117
    9. 'u' → logprob: -9.271909713745117
    10. 'font' → logprob: -9.271909713745117

Token 73: ' déjà' (ID: 21229)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.11188697069883347
    2. '\n' → logprob: -3.486886978149414
    3. ',' → logprob: -3.986886978149414
    4. '#' → logprob: -4.236886978149414
    5. ',
' → logprob: -4.236886978149414
    6. '
' → logprob: -5.111886978149414
    7. '' → logprob: -5.111886978149414
    8. '.' → logprob: -5.736886978149414
    9. ' 
' → logprob: -5.736886978149414
    10. '\' → logprob: -6.236886978149414

Token 74: ',
' (ID: 412)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.1713947057724
    2. '
' → logprob: -1.9213947057724
    3. ',
' → logprob: -1.9213947057724
    4. '.' → logprob: -2.0463948249816895
    5. '#' → logprob: -2.2963948249816895
    6. '
' → logprob: -3.0463948249816895
    7. '```' → logprob: -3.6713948249816895
    8. '' → logprob: -3.7963948249816895
    9. '.
' → logprob: -4.6713948249816895
    10. '\n' → logprob: -4.6713948249816895

Token 75: '#' (ID: 2)
  Prédit: ' donc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' donc' → logprob: -0.2676960825920105
    2. 'don' → logprob: -1.8926961421966553
    3. '#' → logprob: -3.6426961421966553
    4. ' car' → logprob: -4.017695903778076
    5. ' so' → logprob: -4.392695903778076
    6. ' alors' → logprob: -4.767695903778076
    7. ',' → logprob: -5.392695903778076
    8. ' il' → logprob: -5.517695903778076
    9. ' mais' → logprob: -6.267695903778076
    10. ' on' → logprob: -6.392695903778076

Token 76: ' et' (ID: 859)
  Prédit: ' donc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' donc' → logprob: -0.4052918553352356
    2. '#' → logprob: -1.7802917957305908
    3. 'don' → logprob: -2.280291795730591
    4. ',' → logprob: -3.780291795730591
    5. ' alors' → logprob: -4.65529203414917
    6. ' il' → logprob: -5.15529203414917
    7. ' #' → logprob: -5.65529203414917
    8. ' et' → logprob: -5.90529203414917
    9. ' on' → logprob: -6.15529203414917
    10. ' mais' → logprob: -6.53029203414917

Token 77: ' la' (ID: 557)
  Prédit: ' total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' total' → logprob: -0.567534327507019
    2. 'total' → logprob: -1.442534327507019
    3. ' la' → logprob: -3.0675344467163086
    4. ' le' → logprob: -3.3175344467163086
    5. 'le' → logprob: -4.067534446716309
    6. ' leur' → logprob: -4.317534446716309
    7. ' on' → logprob: -4.692534446716309
    8. 'la' → logprob: -4.692534446716309
    9. ' il' → logprob: -5.067534446716309
    10. 'a' → logprob: -5.192534446716309

Token 78: ' somme' (ID: 64484)
  Prédit: ' somme'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' somme' → logprob: -0.22931601107120514
    2. 's' → logprob: -1.729315996170044
    3. 'total' → logprob: -4.604316234588623
    4. ' total' → logprob: -4.729316234588623
    5. 'sum' → logprob: -6.604316234588623
    6. 'part' → logprob: -6.979316234588623
    7. ' division' → logprob: -7.666816234588623
    8. 'division' → logprob: -7.666816234588623
    9. '#' → logprob: -7.791816234588623
    10. 'diff' → logprob: -7.916816234588623

Token 79: ' aussi' (ID: 9894)
  Prédit: ' est'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' est' → logprob: -0.8770360946655273
    2. ' total' → logprob: -1.7520360946655273
    3. ' doit' → logprob: -2.0020360946655273
    4. 'total' → logprob: -2.5020360946655273
    5. ' l' → logprob: -3.0020360946655273
    6. ' totale' → logprob: -3.0020360946655273
    7. ' des' → logprob: -4.002036094665527
    8. ' ' → logprob: -4.502036094665527
    9. ' aussi' → logprob: -4.752036094665527
    10. 'est' → logprob: -5.127036094665527

Token 80: ',' (ID: 11)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -1.2090668678283691
    2. '#' → logprob: -1.8340668678283691
    3. 'if' → logprob: -1.9590668678283691
    4. '.' → logprob: -1.9590668678283691
    5. ',' → logprob: -2.709066867828369
    6. ',
' → logprob: -3.334066867828369
    7. ' if' → logprob: -3.834066867828369
    8. '\' → logprob: -3.834066867828369
    9. '
' → logprob: -3.959066867828369
    10. '.
' → logprob: -4.084066867828369

Token 81: ' donc' (ID: 14206)
  Prédit: ' donc'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' donc' → logprob: -0.462250292301178
    2. ' car' → logprob: -1.2122502326965332
    3. ',' → logprob: -4.212250232696533
    4. ' so' → logprob: -4.337250232696533
    5. ' mais' → logprob: -4.337250232696533
    6. ' il' → logprob: -4.712250232696533
    7. '.' → logprob: -5.587250232696533
    8. ' alors' → logprob: -5.712250232696533
    9. '#' → logprob: -5.837250232696533
    10. ' but' → logprob: -5.962250232696533

Token 82: ' la' (ID: 557)
  Prédit: ' total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' total' → logprob: -0.9620437622070312
    2. 'total' → logprob: -1.5870437622070312
    3. ' la' → logprob: -2.2120437622070312
    4. ' print' → logprob: -2.4620437622070312
    5. 'print' → logprob: -2.8370437622070312
    6. 'part' → logprob: -3.3370437622070312
    7. ' part' → logprob: -3.4620437622070312
    8. ' on' → logprob: -3.7120437622070312
    9. ' le' → logprob: -4.462043762207031
    10. ' les' → logprob: -4.712043762207031

Token 83: ' division' (ID: 21629)
  Prédit: ' somme'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' somme' → logprob: -0.8297889232635498
    2. ' total' → logprob: -1.5797889232635498
    3. 's' → logprob: -2.45478892326355
    4. ' ' → logprob: -3.07978892326355
    5. ' division' → logprob: -3.45478892326355
    6. ' part' → logprob: -3.57978892326355
    7. '#' → logprob: -4.579789161682129
    8. 'n' → logprob: -4.704789161682129
    9. ' résultat' → logprob: -4.704789161682129
    10. 'total' → logprob: -4.954789161682129

Token 84: ' donne' (ID: 30004)
  Prédit: ' /'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' /' → logprob: -1.3721321821212769
    2. ' ' → logprob: -1.4971321821212769
    3. ' by' → logprob: -2.2471323013305664
    4. 'e' → logprob: -2.8721323013305664
    5. ' entière' → logprob: -2.9971323013305664
    6. '/' → logprob: -3.1221323013305664
    7. '```' → logprob: -3.2471323013305664
    8. ' //' → logprob: -3.2471323013305664
    9. ' totale' → logprob: -3.3721323013305664
    10. ' par' → logprob: -3.6221323013305664

Token 85: ' déjà' (ID: 21229)
  Prédit: ' un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.7558627128601074
    2. ' deux' → logprob: -1.8808627128601074
    3. ' bien' → logprob: -2.0058627128601074
    4. ' des' → logprob: -2.6308627128601074
    5. ' une' → logprob: -2.8808627128601074
    6. ' ' → logprob: -3.8808627128601074
    7. ' la' → logprob: -4.505862712860107
    8. ' a' → logprob: -4.755862712860107
    9. '100' → logprob: -4.755862712860107
    10. 'un' → logprob: -4.755862712860107

Token 86: ' la' (ID: 557)
  Prédit: ' un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.5582318902015686
    2. ' des' → logprob: -1.6832318305969238
    3. ' une' → logprob: -2.558231830596924
    4. ' ' → logprob: -3.183231830596924
    5. ' deux' → logprob: -3.183231830596924
    6. 'un' → logprob: -3.433231830596924
    7. '100' → logprob: -4.433231830596924
    8. ' la' → logprob: -4.683231830596924
    9. 'une' → logprob: -4.933231830596924
    10. 'des' → logprob: -5.308231830596924

Token 87: ' bonne' (ID: 24450)
  Prédit: ' bonne'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' bonne' → logprob: -0.27160435914993286
    2. ' même' → logprob: -2.646604299545288
    3. ' valeur' → logprob: -2.771604299545288
    4. ' somme' → logprob: -3.021604299545288
    5. ' part' → logprob: -3.771604299545288
    6. 'part' → logprob: -4.271604537963867
    7. 's' → logprob: -5.396604537963867
    8. 'm' → logprob: -5.646604537963867
    9. 'bonne' → logprob: -5.771604537963867
    10. ' moitié' → logprob: -6.771604537963867

Token 88: ' valeur' (ID: 41664)
  Prédit: ' valeur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' valeur' → logprob: -0.1266796588897705
    2. 'val' → logprob: -3.0016796588897705
    3. 'part' → logprob: -3.8766796588897705
    4. ' réponse' → logprob: -4.876679420471191
    5. 'value' → logprob: -5.501679420471191
    6. ' ' → logprob: -5.626679420471191
    7. ' ' → logprob: -5.626679420471191
    8. ' part' → logprob: -5.751679420471191
    9. 'result' → logprob: -5.751679420471191
    10. ' val' → logprob: -6.001679420471191

Token 89: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.9087679982185364
    2. 'print' → logprob: -1.7837679386138916
    3. '#' → logprob: -2.5337679386138916
    4. 'result' → logprob: -2.7837679386138916
    5. ' 
' → logprob: -2.9087679386138916
    6. '' → logprob: -3.2837679386138916
    7. '\n' → logprob: -3.6587679386138916
    8. 't' → logprob: -3.6587679386138916
    9. 's' → logprob: -4.033768177032471
    10. '\' → logprob: -4.408768177032471

Token 90: 'share' (ID: 27906)
  Prédit: 'part'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'part' → logprob: -0.281441330909729
    2. 'share' → logprob: -2.4064412117004395
    3. 'print' → logprob: -3.0314412117004395
    4. 'c' → logprob: -3.4064412117004395
    5. 'result' → logprob: -3.4064412117004395
    6. ' part' → logprob: -4.2814412117004395
    7. 'half' → logprob: -5.1564412117004395
    8. ' share' → logprob: -5.7814412117004395
    9. 'x' → logprob: -5.9064412117004395
    10. 'p' → logprob: -6.0314412117004395

Token 91: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.8082507848739624
    2. 's' → logprob: -1.1832507848739624
    3. ' =' → logprob: -1.8082507848739624
    4. '1' → logprob: -2.683250904083252
    5. '=' → logprob: -4.183250904083252
    6. 'd' → logprob: -8.683250427246094
    7. '_s' → logprob: -8.933250427246094
    8. 'a' → logprob: -10.058250427246094
    9. ' ' → logprob: -10.183250427246094
    10. 'e' → logprob: -10.433250427246094

Token 92: ' total' (ID: 3609)
  Prédit: ' total'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' total' → logprob: -0.5760015845298767
    2. 'total' → logprob: -0.8260015845298767
    3. ' tota' → logprob: -10.701001167297363
    4. 't' → logprob: -11.076001167297363
    5. ' tot' → logprob: -11.201001167297363
    6. 'tot' → logprob: -12.201001167297363
    7. '(total' → logprob: -13.326001167297363
    8. 'to' → logprob: -13.576001167297363
    9. ' ' → logprob: -14.201001167297363
    10. ' to' → logprob: -14.576001167297363

Token 93: ' //' (ID: 602)
  Prédit: ' //'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' //' → logprob: -0.0005969968624413013
    2. '//' → logprob: -7.50059700012207
    3. ' ' → logprob: -10.37559700012207
    4. ' ' → logprob: -12.25059700012207
    5. '```' → logprob: -12.87559700012207
    6. ' //
' → logprob: -13.62559700012207
    7. '`' → logprob: -14.00059700012207
    8. '"' → logprob: -14.00059700012207
    9. ' /' → logprob: -14.37559700012207
    10. ' #' → logprob: -14.87559700012207

Token 94: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -3.583550642360933e-05
    2. ' ' → logprob: -10.250036239624023
    3. '200' → logprob: -16.250036239624023
    4. '```' → logprob: -16.500036239624023
    5. '۲' → logprob: -16.625036239624023
    6. '２' → logprob: -16.875036239624023
    7. '٢' → logprob: -17.812536239624023
    8. ' ' → logprob: -18.437536239624023
    9. '20' → logprob: -18.562536239624023
    10. '   ' → logprob: -18.625036239624023

Token 95: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -4.36574100604048e-06
    2. ' ' → logprob: -12.375004768371582
    3. '```' → logprob: -16.250003814697266
    4. '200' → logprob: -17.375003814697266
    5. '２' → logprob: -17.625003814697266
    6. '۲' → logprob: -17.687503814697266
    7. '   ' → logprob: -17.937503814697266
    8. '٢' → logprob: -19.000003814697266
    9. '₂' → logprob: -19.812503814697266
    10. ' ' → logprob: -19.812503814697266

Token 96: '

' (ID: 279)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.3827504813671112
    2. '
' → logprob: -1.3827505111694336
    3. '<|end|>' → logprob: -2.8827505111694336
    4. '#' → logprob: -5.507750511169434
    5. ' 
' → logprob: -6.257750511169434
    6. '<|end|>' → logprob: -7.257750511169434
    7. 'if' → logprob: -7.382750511169434
    8. '
' → logprob: -7.507750511169434
    9. '```' → logprob: -7.507750511169434
    10. '' → logprob: -7.632750511169434

Token 97: '#' (ID: 2)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0030712373554706573
    2. '#' → logprob: -5.878071308135986
    3. 'if' → logprob: -9.378070831298828
    4. '<|end|>' → logprob: -9.753070831298828
    5. '
' → logprob: -10.503070831298828
    6. '#print' → logprob: -10.628070831298828
    7. ' print' → logprob: -10.878070831298828
    8. '```' → logprob: -11.128070831298828
    9. 'pr' → logprob: -11.878070831298828
    10. '\n' → logprob: -12.253070831298828

Token 98: ' Aff' (ID: 13741)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0005295606097206473
    2. 'if' → logprob: -8.000529289245605
    3. '#' → logprob: -8.625529289245605
    4. 'result' → logprob: -11.875529289245605
    5. '#print' → logprob: -12.875529289245605
    6. '```' → logprob: -13.750529289245605
    7. 'pr' → logprob: -14.000529289245605
    8. 'prin' → logprob: -14.375529289245605
    9. ' print' → logprob: -14.500529289245605
    10. 'output' → logprob: -15.000529289245605

Token 99: 'ichage' (ID: 118475)
  Prédit: 'ichage'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ichage' → logprob: -0.5808320045471191
    2. 'icher' → logprob: -0.8308320045471191
    3. 'iche' → logprob: -5.580832004547119
    4. 'ich' → logprob: -7.330832004547119
    5. '#' → logprob: -8.330831527709961
    6. 'cher' → logprob: -9.955831527709961
    7. 'ichert' → logprob: -10.080831527709961
    8. 'ichier' → logprob: -10.080831527709961
    9. 'ic' → logprob: -10.455831527709961
    10. 'iché' → logprob: -11.080831527709961

Token 100: ' du' (ID: 1462)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.007216607220470905
    2. 'print' → logprob: -5.507216453552246
    3. '(print' → logprob: -6.382216453552246
    4. 'share' → logprob: -7.257216453552246
    5. '(
' → logprob: -7.507216453552246
    6. '()' → logprob: -9.757216453552246
    7. '(f' → logprob: -9.882216453552246
    8. '("' → logprob: -10.382216453552246
    9. '('' → logprob: -11.882216453552246
    10. '(part' → logprob: -12.007216453552246

Token 101: ' résultat' (ID: 62556)
  Prédit: ' résultat'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' résultat' → logprob: -0.3761005401611328
    2. 'rés' → logprob: -1.7511005401611328
    3. ' montant' → logprob: -2.751100540161133
    4. 'result' → logprob: -3.501100540161133
    5. ' partage' → logprob: -4.001100540161133
    6. 'share' → logprob: -5.001100540161133
    7. 'mont' → logprob: -5.251100540161133
    8. 'part' → logprob: -5.251100540161133
    9. ' resultat' → logprob: -5.751100540161133
    10. ' result' → logprob: -6.001100540161133

Token 102: ' :' (ID: 712)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.9981420336989686e-05
    2. ' print' → logprob: -11.250020027160645
    3. '
' → logprob: -12.125020027160645
    4. '```' → logprob: -13.625020027160645
    5. '(print' → logprob: -15.750020027160645
    6. ' 
' → logprob: -17.500019073486328
    7. '``' → logprob: -18.250019073486328
    8. '\' → logprob: -18.625019073486328
    9. '#print' → logprob: -18.750019073486328
    10. '.print' → logprob: -18.750019073486328

Token 103: ' montant' (ID: 72364)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.4617256056226324e-05
    2. 'share' → logprob: -11.750014305114746
    3. ' print' → logprob: -12.000014305114746
    4. 'pr' → logprob: -15.250014305114746
    5. '```' → logprob: -15.500014305114746
    6. 'prin' → logprob: -16.750015258789062
    7. '
' → logprob: -18.000015258789062
    8. 'printf' → logprob: -18.375015258789062
    9. 'p' → logprob: -19.125015258789062
    10. ' share' → logprob: -19.250015258789062

Token 104: ' que' (ID: 661)
  Prédit: ' partagé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' partagé' → logprob: -1.2562719583511353
    2. ' share' → logprob: -1.7562719583511353
    3. 'final' → logprob: -1.8812719583511353
    4. ' final' → logprob: -2.2562718391418457
    5. ' à' → logprob: -2.3812718391418457
    6. 'share' → logprob: -2.5062718391418457
    7. 'à' → logprob: -3.7562718391418457
    8. 'print' → logprob: -4.006271839141846
    9. ',' → logprob: -4.131271839141846
    10. ' de' → logprob: -4.381271839141846

Token 105: ' chacun' (ID: 52136)
  Prédit: ' chaque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaque' → logprob: -0.14778581261634827
    2. ' chacun' → logprob: -2.6477859020233154
    3. ' each' → logprob: -3.7727859020233154
    4. ' l' → logprob: -4.272785663604736
    5. 'each' → logprob: -5.397785663604736
    6. 'a' → logprob: -5.647785663604736
    7. 'l' → logprob: -5.647785663604736
    8. 'cha' → logprob: -5.897785663604736
    9. ' doit' → logprob: -6.147785663604736
    10. ' chacune' → logprob: -6.147785663604736

Token 106: ' reçoit' (ID: 151051)
  Prédit: ' doit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' doit' → logprob: -0.15663498640060425
    2. ' devra' → logprob: -2.281635046005249
    3. ' recev' → logprob: -3.406635046005249
    4. ' reçoit' → logprob: -5.90663480758667
    5. 'do' → logprob: -6.53163480758667
    6. 'rece' → logprob: -6.90663480758667
    7. 'd' → logprob: -7.40663480758667
    8. ' peut' → logprob: -7.53163480758667
    9. ' devrait' → logprob: -7.65663480758667
    10. 'a' → logprob: -7.78163480758667

Token 107: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0006540587637573481
    2. '
' → logprob: -7.750654220581055
    3. ',' → logprob: -9.125654220581055
    4. ' print' → logprob: -9.500654220581055
    5. '(print' → logprob: -11.125654220581055
    6. '(' → logprob: -11.500654220581055
    7. '```' → logprob: -12.500654220581055
    8. ',
' → logprob: -12.625654220581055
    9. ')' → logprob: -13.250654220581055
    10. ')
' → logprob: -13.250654220581055

Token 108: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: 0.0
    2. '```' → logprob: -17.375
    3. ' print' → logprob: -19.75
    4. 'share' → logprob: -20.375
    5. 'pr' → logprob: -21.25
    6. '
' → logprob: -21.25
    7. 'prin' → logprob: -22.75
    8. 'printf' → logprob: -24.125
    9. 'println' → logprob: -24.125
    10. '#print' → logprob: -24.25

Token 109: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -1.3856492842023727e-06
    2. ' (' → logprob: -14.375000953674316
    3. '()' → logprob: -15.750000953674316
    4. '('' → logprob: -15.875000953674316
    5. '((' → logprob: -16.250001907348633
    6. '(sh' → logprob: -16.875001907348633
    7. '(f' → logprob: -17.250001907348633
    8. '("' → logprob: -17.375001907348633
    9. '(
' → logprob: -17.625001907348633
    10. '(s' → logprob: -17.625001907348633

Token 110: 'share' (ID: 27906)
  Prédit: 'share'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'share' → logprob: -1.1472419600977446e-06
    2. ' share' → logprob: -13.750000953674316
    3. 'shares' → logprob: -18.750001907348633
    4. 'sh' → logprob: -20.000001907348633
    5. 'sha' → logprob: -20.875001907348633
    6. 'Share' → logprob: -21.000001907348633
    7. ')' → logprob: -21.375001907348633
    8. 's' → logprob: -22.375001907348633
    9. 'str' → logprob: -22.500001907348633
    10. 'f' → logprob: -22.625001907348633

Token 111: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.8624639324116288e-06
    2. ' )' → logprob: -13.625001907348633
    3. '*' → logprob: -15.125001907348633
    4. '))' → logprob: -15.250001907348633
    5. ')`' → logprob: -16.625001907348633
    6. ')
' → logprob: -17.375001907348633
    7. ',' → logprob: -17.500001907348633
    8. '`)' → logprob: -17.750001907348633
    9. '}' → logprob: -17.875001907348633
    10. '**' → logprob: -18.250001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 109
Tokens correctement prédits (1ère position, stricte): 39
Tokens correctement prédits (1ère position, avec adaptation): 39
Tokens correctement prédits (top 10): 74
Précision stricte (1ère position): 35.78%
Précision adaptée (1ère position): 35.78%
Précision (top 10): 67.89%
================================================================================
