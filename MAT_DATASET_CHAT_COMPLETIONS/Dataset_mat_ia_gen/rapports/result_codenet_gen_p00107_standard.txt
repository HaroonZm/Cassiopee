================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:10:46
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import math
while True:
    A,B,C = map(int,input().split())
    if A==0 and B==0 and C==0:
        break
    n=int(input())
    d = math.sqrt(A*A + B*B + C*C)
    for _ in range(n):
        R = int(input())
        print("OK" if 2*R >= d else "NA")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' math' (ID: 13324)
  → Token d'amorce (pas de prédiction)

Token 2: '
' (ID: 198)
  → Token d'amorce (pas de prédiction)

Token 3: 'while' (ID: 7032)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0034716592635959387
    2. '\n' → logprob: -7.003471851348877
    3. 'import' → logprob: -7.503471851348877
    4. '<|end|>' → logprob: -7.628471851348877
    5. '```' → logprob: -7.753471851348877
    6. '\' → logprob: -7.753471851348877
    7. '.e' → logprob: -9.128471374511719
    8. '.pi' → logprob: -9.628471374511719
    9. 'def' → logprob: -9.878471374511719
    10. 'newline' → logprob: -10.003471374511719

Token 4: ' True' (ID: 6432)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.0044030556455254555
    2. ' (' → logprob: -6.754403114318848
    3. '  ' → logprob: -7.129403114318848
    4. '```' → logprob: -7.129403114318848
    5. ''' → logprob: -7.629403114318848
    6. '(' → logprob: -7.629403114318848
    7. '"' → logprob: -8.504403114318848
    8. '`' → logprob: -9.004403114318848
    9. '_' → logprob: -9.754403114318848
    10. ' ' → logprob: -9.879403114318848

Token 5: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00038539018714800477
    2. '():' → logprob: -8.125385284423828
    3. ' :' → logprob: -10.125385284423828
    4. ':
' → logprob: -11.375385284423828
    5. '(:' → logprob: -11.875385284423828
    6. ':**' → logprob: -12.000385284423828
    7. '):' → logprob: -12.000385284423828
    8. '':'' → logprob: -12.625385284423828
    9. '':' → logprob: -13.000385284423828
    10. '```' → logprob: -13.625385284423828

Token 6: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1303604692220688
    2. ' ' → logprob: -2.7553603649139404
    3. '```' → logprob: -3.7553603649139404
    4. '    
' → logprob: -4.0053606033325195
    5. '    ' → logprob: -5.3803606033325195
    6. '    
    
' → logprob: -6.1303606033325195
    7. '  
' → logprob: -6.1303606033325195
    8. ' 
' → logprob: -6.2553606033325195
    9. '  ' → logprob: -6.5053606033325195
    10. ''' → logprob: -7.3803606033325195

Token 7: ' A' (ID: 355)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05348293110728264
    2. '```' → logprob: -3.678483009338379
    3. ' ' → logprob: -5.428483009338379
    4. '    ' → logprob: -5.553483009338379
    5. 'x' → logprob: -5.678483009338379
    6. '    
' → logprob: -5.678483009338379
    7. 'input' → logprob: -5.678483009338379
    8. 'n' → logprob: -6.803483009338379
    9. 'user' → logprob: -6.803483009338379
    10. ' input' → logprob: -7.053483009338379

Token 8: ',B' (ID: 19853)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.7793475985527039
    2. '=' → logprob: -1.2793476581573486
    3. '[' → logprob: -2.1543476581573486
    4. ' ' → logprob: -3.2793476581573486
    5. ' =' → logprob: -3.5293476581573486
    6. ',' → logprob: -3.9043476581573486
    7. ')' → logprob: -4.1543474197387695
    8. '   ' → logprob: -4.5293474197387695
    9. '  ' → logprob: -5.1543474197387695
    10. '+' → logprob: -5.1543474197387695

Token 9: ',C' (ID: 26924)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.12149359285831451
    2. '=' → logprob: -2.2464935779571533
    3. ',' → logprob: -4.871493816375732
    4. ' ,' → logprob: -7.371493816375732
    5. ')' → logprob: -8.621493339538574
    6. ' ' → logprob: -9.121493339538574
    7. '   ' → logprob: -11.121493339538574
    8. '  ' → logprob: -11.871493339538574
    9. '<|end|>' → logprob: -11.871493339538574
    10. ' )' → logprob: -12.371493339538574

Token 10: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0800732746720314
    2. '=' → logprob: -2.580073356628418
    3. ',' → logprob: -6.830073356628418
    4. ' ,' → logprob: -10.080073356628418
    5. ')' → logprob: -10.455073356628418
    6. ' ' → logprob: -11.580073356628418
    7. '   ' → logprob: -11.705073356628418
    8. '<|end|>' → logprob: -12.955073356628418
    9. '  ' → logprob: -13.080073356628418
    10. '    ' → logprob: -13.205073356628418

Token 11: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.028686286881566048
    2. 'map' → logprob: -3.653686285018921
    3. ' input' → logprob: -6.7786865234375
    4. ' list' → logprob: -7.1536865234375
    5. ' [' → logprob: -8.6536865234375
    6. 'input' → logprob: -8.9036865234375
    7. ' ' → logprob: -9.4036865234375
    8. 'list' → logprob: -10.2786865234375
    9. '[' → logprob: -11.0286865234375
    10. '(map' → logprob: -11.7786865234375

Token 12: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.027887502685189247
    2. '(' → logprob: -3.6528875827789307
    3. '(lambda' → logprob: -7.152887344360352
    4. '(input' → logprob: -7.902887344360352
    5. '(str' → logprob: -8.277887344360352
    6. 'int' → logprob: -9.527887344360352
    7. '(float' → logprob: -9.777887344360352
    8. '(
' → logprob: -11.402887344360352
    9. '(list' → logprob: -11.402887344360352
    10. '<int' → logprob: -12.027887344360352

Token 13: ',input' (ID: 123014)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.1706867516040802
    2. 'input' → logprob: -2.045686721801758
    3. ')' → logprob: -3.795686721801758
    4. ',input' → logprob: -6.170686721801758
    5. '(' → logprob: -6.420686721801758
    6. ' input' → logprob: -6.670686721801758
    7. ',' → logprob: -9.545686721801758
    8. '=input' → logprob: -10.295686721801758
    9. '),' → logprob: -11.295686721801758
    10. ' )' → logprob: -11.670686721801758

Token 14: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0002100965939462185
    2. '()' → logprob: -8.75020980834961
    3. '())' → logprob: -10.12520980834961
    4. '()))' → logprob: -12.12520980834961
    5. ' ().' → logprob: -13.25020980834961
    6. '('').' → logprob: -13.87520980834961
    7. '(' → logprob: -14.12520980834961
    8. ')' → logprob: -14.62520980834961
    9. '());' → logprob: -14.75020980834961
    10. '('' → logprob: -14.87520980834961

Token 15: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00011903966515092179
    2. 'strip' → logprob: -9.37511920928955
    3. 'rstrip' → logprob: -10.37511920928955
    4. '(split' → logprob: -13.25011920928955
    5. ' split' → logprob: -13.75011920928955
    6. 'spl' → logprob: -17.000118255615234
    7. '```' → logprob: -18.375118255615234
    8. ')' → logprob: -18.375118255615234
    9. 'read' → logprob: -19.375118255615234
    10. '_split' → logprob: -19.500118255615234

Token 16: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.33138105273246765
    2. ')' → logprob: -2.08138108253479
    3. '()))' → logprob: -2.33138108253479
    4. '))' → logprob: -2.83138108253479
    5. '()' → logprob: -6.831380844116211
    6. '('' → logprob: -10.206380844116211
    7. '(' → logprob: -11.331380844116211
    8. '()))
' → logprob: -11.581380844116211
    9. ''))' → logprob: -11.706380844116211
    10. ' ())' → logprob: -11.706380844116211

Token 17: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 18: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6029096245765686
    2. ' if' → logprob: -1.3529095649719238
    3. ')' → logprob: -2.727909564971924
    4. '```' → logprob: -3.227909564971924
    5. 'if' (adapté à ' if') → logprob: -3.477909564971924
    6. ':
' → logprob: -4.727909564971924
    7. '``' → logprob: -4.852909564971924
    8. ':' → logprob: -4.977909564971924
    9. '<|end|>' → logprob: -4.977909564971924
    10. '\n' → logprob: -5.227909564971924

Token 19: ' A' (ID: 355)
  Prédit: ' A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' A' → logprob: -0.12698039412498474
    2. 'A' → logprob: -2.1269803047180176
    3. ' not' → logprob: -10.501980781555176
    4. '(A' → logprob: -11.376980781555176
    5. ' ' → logprob: -12.126980781555176
    6. ' (' → logprob: -12.751980781555176
    7. 'not' → logprob: -13.501980781555176
    8. '(' → logprob: -13.626980781555176
    9. '	A' → logprob: -13.626980781555176
    10. '   ' → logprob: -14.626980781555176

Token 20: '==' (ID: 560)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.14182743430137634
    2. '==' → logprob: -2.141827344894409
    3. ' <=' → logprob: -4.891827583312988
    4. '=' → logprob: -6.016827583312988
    5. ' <' → logprob: -6.141827583312988
    6. '<' → logprob: -7.141827583312988
    7. '<=' → logprob: -7.141827583312988
    8. ' =' → logprob: -7.391827583312988
    9. ' ' → logprob: -9.391827583312988
    10. ',' → logprob: -9.641827583312988

Token 21: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0498376302421093
    2. ' ' → logprob: -3.174837589263916
    3. 'B' → logprob: -5.049837589263916
    4. ' B' → logprob: -7.924837589263916
    5. '  ' → logprob: -11.737338066101074
    6. '1' → logprob: -11.924838066101074
    7. '```' → logprob: -12.112338066101074
    8. '   ' → logprob: -12.424838066101074
    9. '-' → logprob: -12.799838066101074
    10. ' ' → logprob: -13.487338066101074

Token 22: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.2519500255584717
    2. 'and' → logprob: -1.5019500255584717
    3. ' ' → logprob: -11.00195026397705
    4. ':' → logprob: -13.12695026397705
    5. '  ' → logprob: -14.50195026397705
    6. '	and' → logprob: -14.50195026397705
    7. '   ' → logprob: -15.00195026397705
    8. ' a' → logprob: -15.50195026397705
    9. 'a' → logprob: -15.62695026397705
    10. '    ' → logprob: -16.501949310302734

Token 23: ' B' (ID: 418)
  Prédit: ' B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.12695950269699097
    2. 'B' → logprob: -2.1269595623016357
    3. ' ' → logprob: -10.376959800720215
    4. '<|end|>' → logprob: -15.376959800720215
    5. '  ' → logprob: -17.5019588470459
    6. ' ' → logprob: -17.6269588470459
    7. '	B' → logprob: -17.8769588470459
    8. '<|end|>' → logprob: -18.7519588470459
    9. '>B' → logprob: -19.3769588470459
    10. '=B' → logprob: -20.0019588470459

Token 24: '==' (ID: 560)
  Prédit: '=='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.2523241937160492
    2. ' ==' → logprob: -1.5023242235183716
    3. '<|end|>' → logprob: -8.002324104309082
    4. ' and' → logprob: -10.877324104309082
    5. ' ' → logprob: -10.877324104309082
    6. '=' → logprob: -11.252324104309082
    7. '<|end|>' → logprob: -12.752324104309082
    8. 'and' → logprob: -13.752324104309082
    9. '()==' → logprob: -14.002324104309082
    10. '```' → logprob: -14.377324104309082

Token 25: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0013260759878903627
    2. ' ' → logprob: -6.626326084136963
    3. '  ' → logprob: -17.126325607299805
    4. ' and' → logprob: -17.251325607299805
    5. 'and' → logprob: -17.438825607299805
    6. '   ' → logprob: -17.626325607299805
    7. '۰' → logprob: -17.751325607299805
    8. '```' → logprob: -17.876325607299805
    9. 'C' → logprob: -17.938825607299805
    10. '<|end|>' → logprob: -18.376325607299805

Token 26: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.03805537521839142
    2. 'and' → logprob: -3.288055419921875
    3. '<|end|>' → logprob: -11.538055419921875
    4. ' ' → logprob: -13.413055419921875
    5. '	and' → logprob: -13.663055419921875
    6. '<|end|>' → logprob: -13.913055419921875
    7. '   ' → logprob: -16.038055419921875
    8. '```' → logprob: -16.163055419921875
    9. ' и' → logprob: -16.788055419921875
    10. '&' → logprob: -16.913055419921875

Token 27: ' C' (ID: 363)
  Prédit: ' C'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' C' → logprob: -0.5231463313102722
    2. 'C' → logprob: -0.8981463313102722
    3. ' ' → logprob: -11.273146629333496
    4. ' and' → logprob: -12.773146629333496
    5. '0' → logprob: -13.148146629333496
    6. ' ' → logprob: -13.898146629333496
    7. '	C' → logprob: -13.898146629333496
    8. '```' → logprob: -14.023146629333496
    9. '  ' → logprob: -14.148146629333496
    10. '   ' → logprob: -14.273146629333496

Token 28: '==' (ID: 560)
  Prédit: '=='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.43329229950904846
    2. ' ==' → logprob: -1.058292269706726
    3. '=' → logprob: -6.183292388916016
    4. '<|end|>' → logprob: -6.433292388916016
    5. '0' → logprob: -8.433292388916016
    6. ' ' → logprob: -9.058292388916016
    7. '<|end|>' → logprob: -9.058292388916016
    8. ':' → logprob: -9.058292388916016
    9. ' =' → logprob: -9.683292388916016
    10. ')==' → logprob: -9.683292388916016

Token 29: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -4.0484450437361374e-05
    2. ' ' → logprob: -10.125040054321289
    3. '```' → logprob: -15.500040054321289
    4. '   ' → logprob: -16.43754005432129
    5. '  ' → logprob: -16.75004005432129
    6. '۰' → logprob: -17.62504005432129
    7. '``' → logprob: -18.43754005432129
    8. ' ' → logprob: -18.87504005432129
    9. '०' → logprob: -19.00004005432129
    10. ')' → logprob: -19.18754005432129

Token 30: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00015741224342491478
    2. ':
' → logprob: -9.375157356262207
    3. '   ' → logprob: -9.750157356262207
    4. ' :' → logprob: -11.375157356262207
    5. ':return' → logprob: -13.625157356262207
    6. '       ' → logprob: -14.000157356262207
    7. '):' → logprob: -15.500157356262207
    8. ' break' → logprob: -15.875157356262207
    9. '	break' → logprob: -16.500158309936523
    10. '    ' → logprob: -16.500158309936523

Token 31: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0017638361314311624
    2. '   ' → logprob: -6.376763820648193
    3. ' break' → logprob: -10.501764297485352
    4. ':' → logprob: -11.126764297485352
    5. '	break' → logprob: -12.001764297485352
    6. '\n' → logprob: -12.251764297485352
    7. '     ' → logprob: -13.001764297485352
    8. '    ' → logprob: -13.751764297485352
    9. '      ' → logprob: -13.876764297485352
    10. ' ' → logprob: -14.251764297485352

Token 32: ' break' (ID: 2338)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.7016339898109436
    2. ' break' → logprob: -0.7016339898109436
    3. 'break' (adapté à ' break') → logprob: -4.826633930206299
    4. '   ' → logprob: -8.201634407043457
    5. '	break' → logprob: -8.826634407043457
    6. '           ' → logprob: -11.701634407043457
    7. '_break' → logprob: -13.451634407043457
    8. ' ' → logprob: -13.701634407043457
    9. '-break' → logprob: -14.076634407043457
    10. '      ' → logprob: -14.076634407043457

Token 33: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0662340372800827
    2. '    
' → logprob: -3.8162341117858887
    3. '\n' → logprob: -4.191234111785889
    4. '
' → logprob: -4.316234111785889
    5. '  
' → logprob: -5.691234111785889
    6. '   
' → logprob: -5.816234111785889
    7. '<|end|>' → logprob: -5.941234111785889
    8. ' 
' → logprob: -6.691234111785889
    9. '\r' → logprob: -7.316234111785889
    10. '  ' → logprob: -7.566234111785889

Token 34: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6791015863418579
    2. '
' → logprob: -1.179101586341858
    3. '    
' → logprob: -2.4291014671325684
    4. '\n' → logprob: -3.4291014671325684
    5. '```' → logprob: -3.4291014671325684
    6. '  
' → logprob: -4.554101467132568
    7. '<|end|>' → logprob: -4.554101467132568
    8. '   
' → logprob: -5.179101467132568
    9. ' 
' → logprob: -7.179101467132568
    10. '\r' → logprob: -7.179101467132568

Token 35: ' n' (ID: 297)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02037288434803486
    2. '     
' → logprob: -5.0203728675842285
    3. '    
' → logprob: -5.5203728675842285
    4. '```' → logprob: -5.6453728675842285
    5. '    ' → logprob: -6.0203728675842285
    6. '   
' → logprob: -7.7703728675842285
    7. '\n' → logprob: -7.7703728675842285
    8. 's' → logprob: -8.020373344421387
    9. '\' → logprob: -8.270373344421387
    10. ':' → logprob: -8.520373344421387

Token 36: '=int' (ID: 37431)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.7407645583152771
    2. '=' → logprob: -1.2407646179199219
    3. 'ums' → logprob: -2.365764617919922
    4. 'um' → logprob: -2.490764617919922
    5. 'o' → logprob: -4.365764617919922
    6. 'e' → logprob: -5.115764617919922
    7. 'ext' → logprob: -5.740764617919922
    8. ',' → logprob: -5.740764617919922
    9. ' ' → logprob: -5.740764617919922
    10. 'umbers' → logprob: -5.990764617919922

Token 37: '(input' (ID: 10054)
  Prédit: '(math'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(math' → logprob: -0.24331381916999817
    2. '(' → logprob: -1.8683137893676758
    3. '((' → logprob: -2.868313789367676
    4. ' (' → logprob: -6.618313789367676
    5. 'math' → logprob: -6.743313789367676
    6. '((-' → logprob: -6.868313789367676
    7. '(s' → logprob: -8.243313789367676
    8. '(round' → logprob: -8.618313789367676
    9. '(A' → logprob: -8.868313789367676
    10. '(-' → logprob: -9.118313789367676

Token 38: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.18255527317523956
    2. '()' → logprob: -1.8075553178787231
    3. '(' → logprob: -6.557555198669434
    4. ')' → logprob: -6.682555198669434
    5. '().' → logprob: -10.307555198669434
    6. ' ())' → logprob: -10.432555198669434
    7. '('' → logprob: -11.557555198669434
    8. '())
' → logprob: -11.682555198669434
    9. '()`' → logprob: -11.682555198669434
    10. '();)' → logprob: -11.807555198669434

Token 39: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7924788594245911
    2. ' ' → logprob: -1.2924787998199463
    3. ' 
' → logprob: -2.5424787998199463
    4. '    ' → logprob: -3.0424787998199463
    5. '    
' → logprob: -3.4174787998199463
    6. '<|end|>' → logprob: -3.5424787998199463
    7. ')' → logprob: -3.7924787998199463
    8. '     
' → logprob: -4.542479038238525
    9. '[' → logprob: -5.167479038238525
    10. '  ' → logprob: -5.417479038238525

Token 40: ' d' (ID: 272)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3479459583759308
    2. 'result' → logprob: -2.5979459285736084
    3. 's' → logprob: -2.7229459285736084
    4. 'x' → logprob: -3.7229459285736084
    5. '    ' → logprob: -4.0979461669921875
    6. 'p' → logprob: -4.2229461669921875
    7. 'd' (adapté à ' d') → logprob: -4.5979461669921875
    8. 't' → logprob: -4.9729461669921875
    9. ' for' → logprob: -5.0979461669921875
    10. ' result' → logprob: -5.0979461669921875

Token 41: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.9928954839706421
    2. ' =' → logprob: -0.9928954839706421
    3. 'ist' → logprob: -2.1178956031799316
    4. 'istance' → logprob: -2.6178956031799316
    5. 'ef' → logprob: -4.117895603179932
    6. 'e' → logprob: -4.367895603179932
    7. 'is' → logprob: -4.617895603179932
    8. 'ists' → logprob: -6.242895603179932
    9. 'iv' → logprob: -6.492895603179932
    10. 's' → logprob: -6.617895603179932

Token 42: ' math' (ID: 13324)
  Prédit: ' math'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' math' → logprob: -1.0054771900177002
    2. 'math' → logprob: -1.1304771900177002
    3. '[' → logprob: -2.7554771900177
    4. ' [' → logprob: -3.3804771900177
    5. '[A' → logprob: -3.5054771900177
    6. ' (' → logprob: -3.7554771900177
    7. '(math' → logprob: -3.8804771900177
    8. '[n' → logprob: -4.255476951599121
    9. '[int' → logprob: -4.380476951599121
    10. 'abs' → logprob: -4.380476951599121

Token 43: '.sqrt' (ID: 38011)
  Prédit: '.sqrt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.sqrt' → logprob: -0.037779223173856735
    2. '.ceil' → logprob: -4.412779331207275
    3. '.pow' → logprob: -4.412779331207275
    4. '.' → logprob: -5.537779331207275
    5. '.floor' → logprob: -5.787779331207275
    6. '.sin' → logprob: -6.662779331207275
    7. '.log' → logprob: -7.037779331207275
    8. '.pi' → logprob: -7.037779331207275
    9. '.cos' → logprob: -7.162779331207275
    10. '.factor' → logprob: -7.537779331207275

Token 44: '(A' (ID: 10706)
  Prédit: '(('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '((' → logprob: -0.009675342589616776
    2. '(A' → logprob: -5.5096755027771
    3. '(' → logprob: -5.8846755027771
    4. '(B' → logprob: -6.0096755027771
    5. '(C' → logprob: -9.384675025939941
    6. '(abs' → logprob: -9.384675025939941
    7. '(pow' → logprob: -9.759675025939941
    8. '(n' → logprob: -10.134675025939941
    9. '(((' → logprob: -10.634675025939941
    10. '(
' → logprob: -11.009675025939941

Token 45: '*A' (ID: 166365)
  Prédit: '**'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '**' → logprob: -0.00869623851031065
    2. '*' → logprob: -4.75869607925415
    3. '*d' → logprob: -10.633696556091309
    4. '*A' → logprob: -10.633696556091309
    5. '*n' → logprob: -11.383696556091309
    6. ' **' → logprob: -11.883696556091309
    7. '*C' → logprob: -12.008696556091309
    8. '2' → logprob: -12.758696556091309
    9. '***' → logprob: -13.258696556091309
    10. '*b' → logprob: -14.133696556091309

Token 46: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.4772403836250305
    2. '+B' → logprob: -1.6022403240203857
    3. ' +' → logprob: -1.7272403240203857
    4. '+b' → logprob: -9.227240562438965
    5. '-' → logprob: -9.352240562438965
    6. '+C' → logprob: -10.727240562438965
    7. ' -' → logprob: -11.102240562438965
    8. '-B' → logprob: -11.352240562438965
    9. '+D' → logprob: -11.352240562438965
    10. '+(' → logprob: -12.102240562438965

Token 47: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.011164898052811623
    2. ' B' → logprob: -4.511164665222168
    3. 'C' → logprob: -9.761164665222168
    4. '   ' → logprob: -10.261164665222168
    5. ' ' → logprob: -11.511164665222168
    6. '	B' → logprob: -12.261164665222168
    7. '  ' → logprob: -12.511164665222168
    8. ' C' → logprob: -13.386164665222168
    9. '+B' → logprob: -14.261164665222168
    10. '(' → logprob: -14.511164665222168

Token 48: '*' (ID: 9)
  Prédit: '*'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.002450088504701853
    2. '*C' → logprob: -6.127449989318848
    3. '**' → logprob: -8.877449989318848
    4. '*A' → logprob: -9.502449989318848
    5. ' *' → logprob: -10.252449989318848
    6. '***' → logprob: -12.377449989318848
    7. '*T' → logprob: -12.502449989318848
    8. '*)' → logprob: -12.877449989318848
    9. '*(' → logprob: -14.127449989318848
    10. '*N' → logprob: -14.252449989318848

Token 49: 'B' (ID: 33)
  Prédit: 'B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.07085361331701279
    2. 'C' → logprob: -2.6958537101745605
    3. '*' → logprob: -7.6958537101745605
    4. '*C' → logprob: -8.445853233337402
    5. 'A' → logprob: -8.945853233337402
    6. ' B' → logprob: -9.445853233337402
    7. ' C' → logprob: -11.820853233337402
    8. '```' → logprob: -12.320853233337402
    9. ')' → logprob: -12.695853233337402
    10. '**' → logprob: -12.695853233337402

Token 50: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.5779894590377808
    2. '+' → logprob: -1.0779894590377808
    3. ')' → logprob: -2.7029895782470703
    4. ' -' → logprob: -3.7029895782470703
    5. '-' → logprob: -5.45298957824707
    6. '+C' → logprob: -6.20298957824707
    7. ' )' → logprob: -8.45298957824707
    8. '   ' → logprob: -9.70298957824707
    9. ')+' → logprob: -9.70298957824707
    10. ')-' → logprob: -10.07798957824707

Token 51: ' C' (ID: 363)
  Prédit: 'C'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'C' → logprob: -0.04310207813978195
    2. ' C' → logprob: -3.1681020259857178
    3. '<|end|>' → logprob: -9.918102264404297
    4. ')' → logprob: -10.793102264404297
    5. ' ' → logprob: -11.668102264404297
    6. '   ' → logprob: -11.668102264404297
    7. '(' → logprob: -13.043102264404297
    8. '...' → logprob: -13.293102264404297
    9. '	C' → logprob: -13.293102264404297
    10. '>C' → logprob: -13.418102264404297

Token 52: '*C' (ID: 194570)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.04358081892132759
    2. '**' → logprob: -3.4185807704925537
    3. '*C' → logprob: -5.543581008911133
    4. ' *' → logprob: -6.168581008911133
    5. '*A' → logprob: -6.293581008911133
    6. ')' → logprob: -6.543581008911133
    7. '*d' → logprob: -9.043581008911133
    8. '2' → logprob: -9.418581008911133
    9. '*T' → logprob: -9.793581008911133
    10. '*(' → logprob: -9.793581008911133

Token 53: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.16469021141529083
    2. ' )' → logprob: -1.9146902561187744
    3. '*' → logprob: -5.914690017700195
    4. '   ' → logprob: -7.414690017700195
    5. ' *' → logprob: -7.789690017700195
    6. ')*' → logprob: -7.914690017700195
    7. ' -' → logprob: -9.664690017700195
    8. ')
' → logprob: -10.039690017700195
    9. ' ' → logprob: -10.164690017700195
    10. ' )
' → logprob: -10.164690017700195

Token 54: '   ' (ID: 271)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -1.303040623664856
    2. '<|end|>' → logprob: -1.303040623664856
    3. '   ' → logprob: -2.1780405044555664
    4. 'n' → logprob: -2.8030405044555664
    5. ' ' → logprob: -2.8030405044555664
    6. ')' → logprob: -3.3030405044555664
    7. '+' → logprob: -3.4280405044555664
    8. ' 
' → logprob: -3.8030405044555664
    9. ',' → logprob: -4.178040504455566
    10. '#' → logprob: -4.428040504455566

Token 55: ' for' (ID: 395)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8045004606246948
    2. 'for' (adapté à ' for') → logprob: -1.5545004606246948
    3. 'result' → logprob: -2.1795005798339844
    4. ' for' → logprob: -3.1795005798339844
    5. 't' → logprob: -3.3045005798339844
    6. 'x' → logprob: -3.4295005798339844
    7. 'n' → logprob: -3.8045005798339844
    8. '    ' → logprob: -4.179500579833984
    9. 'print' → logprob: -4.679500579833984
    10. 's' → logprob: -4.804500579833984

Token 56: ' _' (ID: 1175)
  Prédit: ' _'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' _' → logprob: -0.01761634089052677
    2. '_' → logprob: -4.517616271972656
    3. ' i' → logprob: -5.142616271972656
    4. ' ' → logprob: -7.267616271972656
    5. '_i' → logprob: -13.142616271972656
    6. 'i' → logprob: -13.392616271972656
    7. ' ‌' → logprob: -13.392616271972656
    8. ' ' → logprob: -14.142616271972656
    9. ' ▁' → logprob: -14.892616271972656
    10. ' in' → logprob: -15.267616271972656

Token 57: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.014234961941838264
    2. 'in' → logprob: -4.264235019683838
    3. ' ' → logprob: -9.63923454284668
    4. '	in' → logprob: -13.51423454284668
    5. '<|end|>' → logprob: -13.51423454284668
    6. '  ' → logprob: -14.01423454284668
    7. 'range' → logprob: -14.63923454284668
    8. 'n' → logprob: -15.38923454284668
    9. ' i' → logprob: -15.38923454284668
    10. 's' → logprob: -15.51423454284668

Token 58: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.0788913294672966
    2. ' range' → logprob: -2.5788912773132324
    3. '	range' → logprob: -14.07889175415039
    4. 'rang' → logprob: -14.95389175415039
    5. '(range' → logprob: -15.45389175415039
    6. 'ran' → logprob: -16.57889175415039
    7. ' ' → logprob: -16.95389175415039
    8. 'r' → logprob: -17.20389175415039
    9. '```' → logprob: -17.82889175415039
    10. 'Range' → logprob: -18.32889175415039

Token 59: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0038148066960275173
    2. '(' → logprob: -5.628814697265625
    3. ' n' → logprob: -9.128814697265625
    4. ' (' → logprob: -9.378814697265625
    5. 'n' → logprob: -10.753814697265625
    6. ' ' → logprob: -15.878814697265625
    7. '	n' → logprob: -17.003814697265625
    8. '(int' → logprob: -17.378814697265625
    9. '_n' → logprob: -17.753814697265625
    10. '(range' → logprob: -18.003814697265625

Token 60: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0005486258305609226
    2. ' ):' → logprob: -8.125548362731934
    3. ':' → logprob: -8.875548362731934
    4. '):
' → logprob: -9.875548362731934
    5. ')' → logprob: -9.875548362731934
    6. '   ' → logprob: -12.500548362731934
    7. '+' → logprob: -13.250548362731934
    8. ',' → logprob: -13.750548362731934
    9. '():' → logprob: -14.750548362731934
    10. '}:' → logprob: -15.000548362731934

Token 61: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.2939237058162689
    2. ' ' → logprob: -2.1689236164093018
    3. '<|end|>' → logprob: -2.4189236164093018
    4. '    ' → logprob: -3.7939236164093018
    5. '   ' → logprob: -4.418923854827881
    6. '        ' → logprob: -5.293923854827881
    7. '     ' → logprob: -6.793923854827881
    8. '        
' → logprob: -6.793923854827881
    9. ',' → logprob: -6.793923854827881
    10. '	   ' → logprob: -7.168923854827881

Token 62: ' R' (ID: 460)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.05174604803323746
    2. ' x' → logprob: -3.301746129989624
    3. '       ' → logprob: -4.551745891571045
    4. 'X' → logprob: -6.551745891571045
    5. 'a' → logprob: -7.801745891571045
    6. ' ' → logprob: -8.926746368408203
    7. '   ' → logprob: -9.176746368408203
    8. '        ' → logprob: -9.176746368408203
    9. 'D' → logprob: -9.301746368408203
    10. 'dx' → logprob: -9.426746368408203

Token 63: ' =' (ID: 314)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -1.0272597074508667
    2. ',x' → logprob: -1.0272597074508667
    3. ',X' → logprob: -2.9022598266601562
    4. ',a' → logprob: -3.1522598266601562
    5. ',r' → logprob: -3.5272598266601562
    6. ',V' → logprob: -3.7772598266601562
    7. ',A' → logprob: -3.9022598266601562
    8. ',S' → logprob: -4.152259826660156
    9. ',D' → logprob: -4.652259826660156
    10. ',Q' → logprob: -4.777259826660156

Token 64: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.5106785297393799
    2. ' float' → logprob: -1.8856785297393799
    3. ' int' → logprob: -2.01067852973938
    4. 'float' → logprob: -2.26067852973938
    5. 'list' → logprob: -5.385678291320801
    6. ' list' → logprob: -6.260678291320801
    7. '(int' → logprob: -7.135678291320801
    8. 'math' → logprob: -7.260678291320801
    9. ' math' → logprob: -7.510678291320801
    10. '[int' → logprob: -7.760678291320801

Token 65: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0001519325451226905
    2. '(' → logprob: -8.875151634216309
    3. 'input' → logprob: -11.500151634216309
    4. ' (' → logprob: -14.125151634216309
    5. ',input' → logprob: -14.875151634216309
    6. ' input' → logprob: -15.000151634216309
    7. '()' → logprob: -16.375152587890625
    8. '	input' → logprob: -16.375152587890625
    9. '=input' → logprob: -16.625152587890625
    10. '(math' → logprob: -16.875152587890625

Token 66: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.02349132113158703
    2. '()' → logprob: -4.023491382598877
    3. ')' → logprob: -5.273491382598877
    4. ' ())' → logprob: -9.523490905761719
    5. '(' → logprob: -9.773490905761719
    6. '())
' → logprob: -10.773490905761719
    7. '().' → logprob: -11.398490905761719
    8. '()[' → logprob: -12.023490905761719
    9. '();)' → logprob: -12.023490905761719
    10. ' )' → logprob: -12.398490905761719

Token 67: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.043814294040203094
    2. '   ' → logprob: -4.418814182281494
    3. ' ' → logprob: -5.168814182281494
    4. '        
' → logprob: -5.293814182281494
    5. ')' → logprob: -5.418814182281494
    6. '<|end|>' → logprob: -5.543814182281494
    7. '        ' → logprob: -5.918814182281494
    8. '    ' → logprob: -6.168814182281494
    9. ' if' → logprob: -6.793814182281494
    10. ' 
' → logprob: -7.168814182281494

Token 68: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.09601141512393951
    2. 'if' → logprob: -2.5960114002227783
    3. '       ' → logprob: -5.346011638641357
    4. ' print' → logprob: -5.721011638641357
    5. ' if' → logprob: -5.846011638641357
    6. 'x' → logprob: -5.846011638641357
    7. '   ' → logprob: -6.846011638641357
    8. 'result' → logprob: -7.221011638641357
    9. 'r' → logprob: -7.846011638641357
    10. 'p' → logprob: -8.4710111618042

Token 69: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2934657633304596
    2. '("' → logprob: -1.6684657335281372
    3. '('' → logprob: -3.2934658527374268
    4. '(int' → logprob: -4.918465614318848
    5. '((' → logprob: -5.043465614318848
    6. '(f' → logprob: -5.668465614318848
    7. '(round' → logprob: -5.668465614318848
    8. '(d' → logprob: -6.043465614318848
    9. '"' → logprob: -6.293465614318848
    10. '(math' → logprob: -6.418465614318848

Token 70: 'OK' (ID: 5175)
  Prédit: '{'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '{' → logprob: -1.2103235721588135
    2. '"' → logprob: -1.7103235721588135
    3. 'Yes' → logprob: -1.7103235721588135
    4. 'YES' → logprob: -3.2103235721588135
    5. '"{' → logprob: -3.2103235721588135
    6. 'Y' → logprob: -3.3353235721588135
    7. ' {:.' → logprob: -3.4603235721588135
    8. '%.' → logprob: -3.5853235721588135
    9. 'Inside' → logprob: -4.085323333740234
    10. ' "' → logprob: -4.835323333740234

Token 71: '"' (ID: 1)
  Prédit: '"'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.00841386616230011
    2. '")' → logprob: -5.508413791656494
    3. ' if' → logprob: -6.508413791656494
    4. ')' → logprob: -7.008413791656494
    5. 'if' → logprob: -7.258413791656494
    6. ' "' → logprob: -7.758413791656494
    7. '*' → logprob: -8.883414268493652
    8. ')"' → logprob: -9.383414268493652
    9. ' ' → logprob: -9.633414268493652
    10. 'R' → logprob: -9.945914268493652

Token 72: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.1743585169315338
    2. 'if' → logprob: -1.9243584871292114
    3. ')' → logprob: -4.924358367919922
    4. '"' → logprob: -5.049358367919922
    5. ' ' → logprob: -9.299358367919922
    6. 'd' → logprob: -9.674358367919922
    7. '")' → logprob: -10.049358367919922
    8. '*' → logprob: -10.174358367919922
    9. '   ' → logprob: -10.549358367919922
    10. 'end' → logprob: -11.299358367919922

Token 73: ' ' (ID: 220)
  Prédit: 'R'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'R' → logprob: -0.6038033366203308
    2. ' R' → logprob: -1.2288033962249756
    3. 'd' → logprob: -2.1038033962249756
    4. ' d' → logprob: -3.3538033962249756
    5. ' ' → logprob: -6.3538031578063965
    6. ' math' → logprob: -7.3538031578063965
    7. '   ' → logprob: -7.8538031578063965
    8. ')' → logprob: -8.478803634643555
    9. ' abs' → logprob: -9.103803634643555
    10. 'math' → logprob: -9.228803634643555

Token 74: '2' (ID: 17)
  Prédit: 'R'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'R' → logprob: -0.07970039546489716
    2. 'd' → logprob: -2.704700469970703
    3. ' R' → logprob: -4.829700469970703
    4. ' d' → logprob: -7.329700469970703
    5. '   ' → logprob: -7.954700469970703
    6. ' ' → logprob: -8.329700469970703
    7. '2' → logprob: -8.454700469970703
    8. 'math' → logprob: -9.954700469970703
    9. 'abs' → logprob: -10.204700469970703
    10. 'A' → logprob: -10.329700469970703

Token 75: '*' (ID: 9)
  Prédit: '*'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.007145836483687162
    2. '*d' → logprob: -5.132145881652832
    3. ' *' → logprob: -7.132145881652832
    4. '*(' → logprob: -8.257145881652832
    5. '*r' → logprob: -8.882145881652832
    6. '**' → logprob: -11.882145881652832
    7. 'd' → logprob: -13.257145881652832
    8. '*Math' → logprob: -13.882145881652832
    9. '*((' → logprob: -13.882145881652832
    10. 'R' → logprob: -14.007145881652832

Token 76: 'R' (ID: 49)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.2135240137577057
    2. 'R' → logprob: -2.338524103164673
    3. '*d' → logprob: -2.838524103164673
    4. 'd' → logprob: -3.463524103164673
    5. ' *' → logprob: -5.963523864746094
    6. ' R' → logprob: -6.713523864746094
    7. ' math' → logprob: -6.713523864746094
    8. '*r' → logprob: -7.838523864746094
    9. ' d' → logprob: -8.338523864746094
    10. 'math' → logprob: -8.963523864746094

Token 77: ' >=' (ID: 5064)
  Prédit: '<='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '<=' → logprob: -0.1407676786184311
    2. ' <=' → logprob: -2.1407675743103027
    3. '<' → logprob: -4.765767574310303
    4. '*d' → logprob: -5.515767574310303
    5. ' <' → logprob: -7.765767574310303
    6. '*' → logprob: -7.765767574310303
    7. 'd' → logprob: -8.890768051147461
    8. '>d' → logprob: -10.140768051147461
    9. '+' → logprob: -10.265768051147461
    10. '>=' → logprob: -10.515768051147461

Token 78: ' d' (ID: 272)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.20144832134246826
    2. ' d' → logprob: -1.7014483213424683
    3. ' ' → logprob: -11.076448440551758
    4. '	d' → logprob: -12.076448440551758
    5. '   ' → logprob: -12.201448440551758
    6. '*d' → logprob: -13.326448440551758
    7. ')d' → logprob: -13.576448440551758
    8. '>d' → logprob: -14.076448440551758
    9. ' math' → logprob: -14.201448440551758
    10. '    ' → logprob: -14.201448440551758

Token 79: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.023247340694069862
    2. 'else' → logprob: -3.773247241973877
    3. '	else' → logprob: -14.023247718811035
    4. '   ' → logprob: -14.398247718811035
    5. ' ' → logprob: -15.398247718811035
    6. '    ' → logprob: -15.898247718811035
    7. ' )' → logprob: -17.02324676513672
    8. ')' → logprob: -17.14824676513672
    9. '       ' → logprob: -18.02324676513672
    10. ' es' → logprob: -18.14824676513672

Token 80: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.04096177592873573
    2. '"No' → logprob: -3.540961742401123
    3. '"D' → logprob: -5.415961742401123
    4. 'NG' → logprob: -6.540961742401123
    5. ' "' → logprob: -6.790961742401123
    6. '"H' → logprob: -7.540961742401123
    7. '":' → logprob: -7.540961742401123
    8. '"W' → logprob: -7.665961742401123
    9. ' ' → logprob: -7.915961742401123
    10. '">' → logprob: -8.040962219238281

Token 81: 'NA' (ID: 9555)
  Prédit: 'NA'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'NA' → logprob: -0.5917267203330994
    2. 'NG' → logprob: -0.9667267203330994
    3. '"' → logprob: -3.341726779937744
    4. '"H' → logprob: -5.091726779937744
    5. 'UN' → logprob: -5.591726779937744
    6. '"No' → logprob: -5.591726779937744
    7. 'FAIL' → logprob: -6.216726779937744
    8. '"N' → logprob: -6.216726779937744
    9. 'OK' → logprob: -6.591726779937744
    10. '"D' → logprob: -6.716726779937744

Token 82: '")' (ID: 1405)
  Prédit: 'OK'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'OK' → logprob: -0.8768033981323242
    2. 'M' → logprob: -1.0018033981323242
    3. '")' → logprob: -2.376803398132324
    4. 'K' → logprob: -2.876803398132324
    5. 'C' → logprob: -3.001803398132324
    6. 'N' → logprob: -4.626803398132324
    7. ')' → logprob: -6.751803398132324
    8. '"' → logprob: -6.876803398132324
    9. 'CK' → logprob: -6.876803398132324
    10. 'G' → logprob: -7.001803398132324


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 80
Tokens correctement prédits (1ère position, stricte): 35
Tokens correctement prédits (1ère position, avec adaptation): 36
Tokens correctement prédits (top 10): 66
Précision stricte (1ère position): 43.75%
Précision adaptée (1ère position): 45.00%
Précision (top 10): 82.50%
================================================================================
