================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:10:29
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
while True:
    n = int(input())
    if n == 0:
        break
    incomes = list(map(int, input().split()))
    avg = sum(incomes) / n
    count = sum(1 for income in incomes if income <= avg)
    print(count)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'while' (ID: 7032)
  → Token d'amorce (pas de prédiction)

Token 1: ' True' (ID: 6432)
  → Token d'amorce (pas de prédiction)

Token 2: ':
' (ID: 734)
  → Token d'amorce (pas de prédiction)

Token 3: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.612176239490509
    2. '    ' → logprob: -2.2371761798858643
    3. '    
' → logprob: -2.6121761798858643
    4. '\' → logprob: -2.8621761798858643
    5. '\n' → logprob: -2.8621761798858643
    6. '```' → logprob: -3.2371761798858643
    7. ' ' → logprob: -3.3621761798858643
    8. ' 
' → logprob: -3.6121761798858643
    9. '  
' → logprob: -4.112176418304443
    10. '     
' → logprob: -4.237176418304443

Token 4: ' n' (ID: 297)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.30723127722740173
    2. '    ' → logprob: -1.6822313070297241
    3. '```' → logprob: -3.5572311878204346
    4. ' ' → logprob: -3.8072311878204346
    5. '       ' → logprob: -4.807231426239014
    6. '    
' → logprob: -5.932231426239014
    7. '  ' → logprob: -6.182231426239014
    8. '\' → logprob: -6.182231426239014
    9. '\n' → logprob: -6.682231426239014
    10. '\t' → logprob: -6.807231426239014

Token 5: ' =' (ID: 314)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.9284094572067261
    2. 'u' → logprob: -1.553409457206726
    3. '=' → logprob: -2.1784095764160156
    4. '+' → logprob: -2.3034095764160156
    5. 'o' → logprob: -2.8034095764160156
    6. '   ' → logprob: -3.5534095764160156
    7. '_' → logprob: -4.178409576416016
    8. '.' → logprob: -4.428409576416016
    9. '%' → logprob: -4.553409576416016
    10. ' =' → logprob: -4.928409576416016

Token 6: ' int' (ID: 677)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.5945659875869751
    2. ' int' → logprob: -0.9695659875869751
    3. 'input' → logprob: -2.8445658683776855
    4. 'int' → logprob: -4.5945658683776855
    5. ' ' → logprob: -8.219566345214844
    6. ' n' → logprob: -8.594566345214844
    7. ' s' → logprob: -10.594566345214844
    8. ' eval' → logprob: -10.844566345214844
    9. 'n' → logprob: -11.094566345214844
    10. '1' → logprob: -11.094566345214844

Token 7: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.033670827746391296
    2. '(input' → logprob: -3.4086709022521973
    3. '(n' → logprob: -11.658670425415039
    4. '(
' → logprob: -12.408670425415039
    5. '()' → logprob: -12.658670425415039
    6. 'input' → logprob: -13.033670425415039
    7. ' (' → logprob: -13.908670425415039
    8. '('' → logprob: -14.408670425415039
    9. '(open' → logprob: -14.783670425415039
    10. '(`' → logprob: -15.033670425415039

Token 8: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7426730394363403
    2. ')' → logprob: -0.9926730394363403
    3. '()' → logprob: -2.367672920227051
    4. '())' → logprob: -2.992672920227051
    5. '))' → logprob: -5.492672920227051
    6. '('' → logprob: -6.867672920227051
    7. ' ' → logprob: -6.867672920227051
    8. '()))' → logprob: -6.992672920227051
    9. '```' → logprob: -7.242672920227051
    10. '(""))' → logprob: -8.36767292022705

Token 9: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9599012732505798
    2. ' if' → logprob: -1.7099013328552246
    3. '<|end|>' → logprob: -1.9599013328552246
    4. ' ' → logprob: -2.2099013328552246
    5. ')' → logprob: -2.2099013328552246
    6. '    
' → logprob: -4.209901332855225
    7. '```' → logprob: -4.584901332855225
    8. ':' → logprob: -4.709901332855225
    9. '    ' → logprob: -4.834901332855225
    10. ' 
' → logprob: -4.834901332855225

Token 10: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -1.0052155256271362
    2. '   ' → logprob: -1.1302155256271362
    3. '<|end|>' → logprob: -2.130215644836426
    4. ' ' → logprob: -2.505215644836426
    5. ')' → logprob: -3.130215644836426
    6. 'if' (adapté à ' if') → logprob: -3.755215644836426
    7. '  ' → logprob: -4.255215644836426
    8. '    ' → logprob: -4.380215644836426
    9. ':' → logprob: -5.130215644836426
    10. ',' → logprob: -6.630215644836426

Token 11: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.007633839268237352
    2. ' ' → logprob: -5.007633686065674
    3. ' not' → logprob: -7.632633686065674
    4. 'n' → logprob: -7.757633686065674
    5. ' ' → logprob: -12.632634162902832
    6. 'not' → logprob: -14.132634162902832
    7. '  ' → logprob: -14.257634162902832
    8. ' (' → logprob: -15.132634162902832
    9. '<|end|>' → logprob: -15.257634162902832
    10. '	n' → logprob: -15.507634162902832

Token 12: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.31323790550231934
    2. ' >' → logprob: -1.8132379055023193
    3. ' <=' → logprob: -2.8132379055023193
    4. ' <' → logprob: -4.188238143920898
    5. '==' → logprob: -4.438238143920898
    6. ' ' → logprob: -4.438238143920898
    7. '>' → logprob: -5.688238143920898
    8. ')' → logprob: -7.063238143920898
    9. '<|end|>' → logprob: -7.188238143920898
    10. '  ' → logprob: -7.813238143920898

Token 13: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1797505021095276
    2. '0' → logprob: -1.8047504425048828
    3. '1' → logprob: -13.929750442504883
    4. ' ' → logprob: -13.929750442504883
    5. '  ' → logprob: -14.179750442504883
    6. ')' → logprob: -15.179750442504883
    7. '100' → logprob: -15.242250442504883
    8. ' -' → logprob: -15.304750442504883
    9. '20' → logprob: -15.429750442504883
    10. '<|end|>' → logprob: -15.617250442504883

Token 14: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.002514188876375556
    2. ' ' → logprob: -6.002514362335205
    3. '-' → logprob: -10.377513885498047
    4. ' -' → logprob: -12.877513885498047
    5. '1' → logprob: -13.252513885498047
    6. '   ' → logprob: -14.127513885498047
    7. '42' → logprob: -14.752513885498047
    8. '  ' → logprob: -14.877513885498047
    9. '```' → logprob: -14.877513885498047
    10. '4' → logprob: -15.252513885498047

Token 15: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -7.517272024415433e-05
    2. ':
' → logprob: -10.250075340270996
    3. ' :' → logprob: -10.625075340270996
    4. '   ' → logprob: -12.375075340270996
    5. ':\' → logprob: -12.750075340270996
    6. ':return' → logprob: -12.875075340270996
    7. '):' → logprob: -13.250075340270996
    8. '       ' → logprob: -13.750075340270996
    9. '    ' → logprob: -14.000075340270996
    10. ':**' → logprob: -14.750075340270996

Token 16: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0033624854404479265
    2. '   ' → logprob: -6.128362655639648
    3. ' break' → logprob: -7.128362655639648
    4. '    ' → logprob: -8.878362655639648
    5. '	break' → logprob: -9.628362655639648
    6. '\n' → logprob: -10.503362655639648
    7. '      ' → logprob: -10.628362655639648
    8. '     ' → logprob: -10.753362655639648
    9. '<|end|>' → logprob: -10.878362655639648
    10. '\t' → logprob: -11.253362655639648

Token 17: ' break' (ID: 2338)
  Prédit: ' break'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' break' → logprob: -0.011935565620660782
    2. '       ' → logprob: -4.761935710906982
    3. 'break' (adapté à ' break') → logprob: -5.886935710906982
    4. '	break' → logprob: -8.511935234069824
    5. '   ' → logprob: -8.886935234069824
    6. '\n' → logprob: -9.386935234069824
    7. '_break' → logprob: -10.011935234069824
    8. ' \' → logprob: -11.136935234069824
    9. '    ' → logprob: -11.511935234069824
    10. '```' → logprob: -11.761935234069824

Token 18: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9669543504714966
    2. '\n' → logprob: -1.2169543504714966
    3. '    
' → logprob: -1.7169543504714966
    4. '\' → logprob: -2.841954231262207
    5. '```' → logprob: -3.091954231262207
    6. '
' → logprob: -4.591954231262207
    7. '\r' → logprob: -4.591954231262207
    8. '  
' → logprob: -5.091954231262207
    9. '   
' → logprob: -5.841954231262207
    10. ':' → logprob: -6.716954231262207

Token 19: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.21359342336654663
    2. '<|end|>' → logprob: -2.8385934829711914
    3. '\n' → logprob: -3.0885934829711914
    4. '    
' → logprob: -3.2135934829711914
    5. '
' → logprob: -3.8385934829711914
    6. '```' → logprob: -4.713593482971191
    7. '#' → logprob: -5.338593482971191
    8. '\' → logprob: -5.838593482971191
    9. '\r' → logprob: -6.588593482971191
    10. ')' → logprob: -6.713593482971191

Token 20: ' incomes' (ID: 108061)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3427201509475708
    2. ' ' → logprob: -1.9677201509475708
    3. 'print' → logprob: -3.0927200317382812
    4. '    ' → logprob: -3.3427200317382812
    5. ')' → logprob: -3.9677200317382812
    6. '       ' → logprob: -4.592720031738281
    7. '#' → logprob: -5.592720031738281
    8. '\' → logprob: -5.717720031738281
    9. ',' → logprob: -5.842720031738281
    10. '<|end|>' → logprob: -5.842720031738281

Token 21: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.012453260831534863
    2. ' =' → logprob: -5.637453079223633
    3. '=' → logprob: -5.762453079223633
    4. '.' → logprob: -7.262453079223633
    5. '_' → logprob: -7.387453079223633
    6. ')' → logprob: -7.387453079223633
    7. '   ' → logprob: -7.512453079223633
    8. '[:]' → logprob: -7.637453079223633
    9. '.setdefault' → logprob: -7.637453079223633
    10. '[]' → logprob: -7.762453079223633

Token 22: ' list' (ID: 1562)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.20344309508800507
    2. ' list' → logprob: -2.4534430503845215
    3. '[]' → logprob: -2.9534430503845215
    4. ' [' → logprob: -3.3284430503845215
    5. 'list' → logprob: -4.9534430503845215
    6. '[' → logprob: -5.9534430503845215
    7. ' {}' → logprob: -9.95344352722168
    8. ' input' → logprob: -10.20344352722168
    9. ' []
' → logprob: -10.20344352722168
    10. ' [])' → logprob: -10.20344352722168

Token 23: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0003743078850675374
    2. '(range' → logprob: -8.000373840332031
    3. '(int' → logprob: -12.250373840332031
    4. '(input' → logprob: -12.375373840332031
    5. '()' → logprob: -12.625373840332031
    6. ' (' → logprob: -13.250373840332031
    7. '(eval' → logprob: -13.250373840332031
    8. '(
' → logprob: -13.375373840332031
    9. '(

' → logprob: -13.500373840332031
    10. '(n' → logprob: -13.875373840332031

Token 24: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.09062881022691727
    2. '(' → logprob: -2.4656288623809814
    3. '(lambda' → logprob: -7.215628623962402
    4. '(str' → logprob: -7.590628623962402
    5. '(input' → logprob: -8.340628623962402
    6. ' int' → logprob: -9.840628623962402
    7. ')' → logprob: -9.840628623962402
    8. ' (' → logprob: -10.215628623962402
    9. 'int' → logprob: -10.340628623962402
    10. '<int' → logprob: -11.590628623962402

Token 25: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.024533888325095177
    2. ',input' → logprob: -3.899533987045288
    3. '(' → logprob: -5.899533748626709
    4. ',' → logprob: -6.774533748626709
    5. 'input' → logprob: -10.024534225463867
    6. ' (' → logprob: -10.774534225463867
    7. ' input' → logprob: -11.399534225463867
    8. ' ,' → logprob: -11.524534225463867
    9. ')' → logprob: -12.524534225463867
    10. '   ' → logprob: -12.649534225463867

Token 26: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.5759897828102112
    2. ' input' → logprob: -0.8259897828102112
    3. '(input' → logprob: -10.700989723205566
    4. ')' → logprob: -11.450989723205566
    5. ',input' → logprob: -11.575989723205566
    6. '	input' → logprob: -13.075989723205566
    7. '=input' → logprob: -13.450989723205566
    8. ' )' → logprob: -14.075989723205566
    9. '[input' → logprob: -14.575989723205566
    10. ' ' → logprob: -14.575989723205566

Token 27: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.2449086308479309
    2. '()' → logprob: -1.7449085712432861
    3. '()))' → logprob: -3.744908571243286
    4. '(' → logprob: -4.369908809661865
    5. '())' → logprob: -5.619908809661865
    6. '()));' → logprob: -7.119908809661865
    7. '(()' → logprob: -7.244908809661865
    8. '())))' → logprob: -7.619908809661865
    9. '());' → logprob: -9.494908332824707
    10. '('' → logprob: -9.744908332824707

Token 28: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0005650650127790868
    2. 'strip' → logprob: -7.500565052032471
    3. 'rstrip' → logprob: -11.500565528869629
    4. ' split' → logprob: -13.375565528869629
    5. 'spl' → logprob: -15.625565528869629
    6. '(split' → logprob: -15.875565528869629
    7. ')' → logprob: -17.875564575195312
    8. 's' → logprob: -18.375564575195312
    9. 'sp' → logprob: -18.500564575195312
    10. ' strip' → logprob: -18.750564575195312

Token 29: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.10744942724704742
    2. '))' → logprob: -2.857449531555176
    3. '())' → logprob: -3.357449531555176
    4. '()' → logprob: -5.232449531555176
    5. '(' → logprob: -5.982449531555176
    6. ')' → logprob: -6.607449531555176
    7. '())))' → logprob: -9.357449531555176
    8. '('' → logprob: -9.482449531555176
    9. '()))
' → logprob: -9.482449531555176
    10. ')))' → logprob: -10.107449531555176

Token 30: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3982221484184265
    2. '    
' → logprob: -2.3982222080230713
    3. ' 
' → logprob: -2.6482222080230713
    4. ')' → logprob: -3.7732222080230713
    5. ' total' → logprob: -4.148221969604492
    6. ' ' → logprob: -4.273221969604492
    7. 's' → logprob: -4.273221969604492
    8. ' if' → logprob: -4.648221969604492
    9. '    ' → logprob: -4.773221969604492
    10. 'sum' → logprob: -4.898221969604492

Token 31: ' avg' (ID: 31686)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -1.3161280155181885
    2. 'r' → logprob: -1.5661280155181885
    3. 'total' → logprob: -2.5661280155181885
    4. 'c' → logprob: -3.3161280155181885
    5. ' total' → logprob: -3.4411280155181885
    6. 'sum' → logprob: -3.6911280155181885
    7. 'm' → logprob: -3.6911280155181885
    8. 'count' → logprob: -3.6911280155181885
    9. '   ' → logprob: -3.6911280155181885
    10. 'n' → logprob: -3.8161280155181885

Token 32: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.018289826810359955
    2. ' =' → logprob: -5.018290042877197
    3. '(' → logprob: -5.393290042877197
    4. '_income' → logprob: -5.393290042877197
    5. '=' → logprob: -6.643290042877197
    6. '_in' → logprob: -8.143289566040039
    7. ' _' → logprob: -8.893289566040039
    8. 's' → logprob: -9.268289566040039
    9. '_space' → logprob: -9.518289566040039
    10. ' ' → logprob: -9.518289566040039

Token 33: ' sum' (ID: 4215)
  Prédit: ' sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sum' → logprob: -0.014185839332640171
    2. 'sum' → logprob: -4.264185905456543
    3. '(sum' → logprob: -11.514185905456543
    4. '   ' → logprob: -12.014185905456543
    5. ' ' → logprob: -12.764185905456543
    6. '	sum' → logprob: -13.389185905456543
    7. ' int' → logprob: -15.014185905456543
    8. '    ' → logprob: -15.139185905456543
    9. '=sum' → logprob: -15.264185905456543
    10. '  ' → logprob: -15.389185905456543

Token 34: '(in' (ID: 9573)
  Prédit: '(in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(in' → logprob: -0.07892294228076935
    2. '(' → logprob: -2.578922986984253
    3. '(s' → logprob: -11.578923225402832
    4. 'in' → logprob: -12.078923225402832
    5. '(n' → logprob: -12.203923225402832
    6. '(i' → logprob: -12.203923225402832
    7. ' (' → logprob: -12.328923225402832
    8. '(

' → logprob: -13.828923225402832
    9. ')' → logprob: -14.453923225402832
    10. '((' → logprob: -14.953923225402832

Token 35: 'comes' (ID: 9304)
  Prédit: 'comes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'comes' → logprob: -0.03444647416472435
    2. 'omes' → logprob: -3.4094464778900146
    3. '   ' → logprob: -8.034446716308594
    4. 's' → logprob: -8.784446716308594
    5. 'com' → logprob: -9.909446716308594
    6. ')' → logprob: -9.909446716308594
    7. 'in' → logprob: -10.159446716308594
    8. 'come' → logprob: -10.659446716308594
    9. ' comes' → logprob: -10.909446716308594
    10. '```' → logprob: -11.159446716308594

Token 36: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.14210133254528046
    2. ' )' → logprob: -2.392101287841797
    3. ' /' → logprob: -3.267101287841797
    4. '/' → logprob: -7.017101287841797
    5. '(len' → logprob: -7.392101287841797
    6. '(' → logprob: -7.517101287841797
    7. '(n' → logprob: -8.642101287841797
    8. '()' → logprob: -8.642101287841797
    9. '   ' → logprob: -9.267101287841797
    10. '    ' → logprob: -9.392101287841797

Token 37: ' /' (ID: 820)
  Prédit: ' /'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' /' → logprob: -0.30176272988319397
    2. '/' → logprob: -1.5517627000808716
    3. ' //' → logprob: -3.051762819290161
    4. '//' → logprob: -7.176762580871582
    5. ' ' → logprob: -8.551762580871582
    6. ')' → logprob: -8.926762580871582
    7. '   ' → logprob: -9.051762580871582
    8. ' len' → logprob: -10.676762580871582
    9. 'len' → logprob: -11.176762580871582
    10. '(len' → logprob: -11.176762580871582

Token 38: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.4274353086948395
    2. ' n' → logprob: -1.302435278892517
    3. ' len' → logprob: -3.0524353981018066
    4. 'len' → logprob: -3.5524353981018066
    5. ' ' → logprob: -9.927434921264648
    6. '   ' → logprob: -13.802434921264648
    7. '  ' → logprob: -13.927434921264648
    8. '	n' → logprob: -13.927434921264648
    9. '(len' → logprob: -14.552434921264648
    10. ' ' → logprob: -15.677434921264648

Token 39: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.15286913514137268
    2. '   ' → logprob: -2.27786922454834
    3. '    
' → logprob: -3.90286922454834
    4. '  
' → logprob: -5.15286922454834
    5. '<|end|>' → logprob: -5.77786922454834
    6. ' 
' → logprob: -5.90286922454834
    7. '\n' → logprob: -6.02786922454834
    8. ')' → logprob: -6.40286922454834
    9. '   
' → logprob: -6.65286922454834
    10. 'n' → logprob: -6.77786922454834

Token 40: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9087262749671936
    2. 'diff' → logprob: -1.4087262153625488
    3. 'ex' → logprob: -2.533726215362549
    4. 'count' → logprob: -2.658726215362549
    5. '    
' → logprob: -3.533726215362549
    6. '\n' → logprob: -3.658726215362549
    7. 's' → logprob: -4.158726215362549
    8. 'difference' → logprob: -4.283726215362549
    9. ' count' → logprob: -4.658726215362549
    10. 'd' → logprob: -4.908726215362549

Token 41: ' count' (ID: 3605)
  Prédit: 'count'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'count' (adapté à ' count') → logprob: -0.96024489402771
    2. 'diff' → logprob: -1.08524489402771
    3. 'ex' → logprob: -2.71024489402771
    4. 'difference' → logprob: -3.08524489402771
    5. ' count' → logprob: -3.96024489402771
    6. '   ' → logprob: -4.085245132446289
    7. 'over' → logprob: -4.335245132446289
    8. 'loss' → logprob: -4.335245132446289
    9. 'result' → logprob: -4.960245132446289
    10. 'print' → logprob: -5.085245132446289

Token 42: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.3920706510543823
    2. '_' → logprob: -1.7670706510543823
    3. '=' → logprob: -2.017070770263672
    4. '(' → logprob: -4.142070770263672
    5. ' ' → logprob: -6.642070770263672
    6. ' +=' → logprob: -7.017070770263672
    7. 's' → logprob: -7.392070770263672
    8. '  ' → logprob: -8.142070770263672
    9. ')' → logprob: -8.517070770263672
    10. '   ' → logprob: -8.767070770263672

Token 43: ' sum' (ID: 4215)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.41316109895706177
    2. ' sum' → logprob: -1.788161039352417
    3. ' ' → logprob: -1.913161039352417
    4. 'sum' → logprob: -3.788161039352417
    5. ' len' → logprob: -7.663161277770996
    6. '1' → logprob: -8.038161277770996
    7. 'len' → logprob: -10.163161277770996
    8. ' ' → logprob: -11.100661277770996
    9. '   ' → logprob: -11.163161277770996
    10. ' int' → logprob: -11.538161277770996

Token 44: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0913422554731369
    2. '(i' → logprob: -3.0913422107696533
    3. '(in' → logprob: -3.4663422107696533
    4. '(x' → logprob: -4.841342449188232
    5. '(abs' → logprob: -6.966342449188232
    6. '(int' → logprob: -7.716342449188232
    7. '(lambda' → logprob: -7.966342449188232
    8. '((' → logprob: -8.091341972351074
    9. '(count' → logprob: -8.591341972351074
    10. '(
' → logprob: -9.216341972351074

Token 45: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.1871703565120697
    2. 'income' → logprob: -2.5621702671051025
    3. 'x' → logprob: -3.9371702671051025
    4. '(' → logprob: -3.9371702671051025
    5. ' income' → logprob: -4.312170505523682
    6. '   ' → logprob: -4.562170505523682
    7. '[' → logprob: -5.312170505523682
    8. 'i' → logprob: -5.562170505523682
    9. 'inc' → logprob: -5.687170505523682
    10. '[i' → logprob: -5.812170505523682

Token 46: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.1793828159570694
    2. '(' → logprob: -2.679382801055908
    3. '(i' → logprob: -3.179382801055908
    4. ')' → logprob: -3.929382801055908
    5. 'for' → logprob: -3.929382801055908
    6. ' i' → logprob: -5.804382801055908
    7. ' (' → logprob: -6.304382801055908
    8. '   ' → logprob: -6.554382801055908
    9. ' if' → logprob: -6.679382801055908
    10. '(x' → logprob: -6.804382801055908

Token 47: ' income' (ID: 11583)
  Prédit: ' income'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' income' → logprob: -0.6209962368011475
    2. 'income' → logprob: -1.8709962368011475
    3. ' i' → logprob: -2.1209962368011475
    4. ' x' → logprob: -2.4959962368011475
    5. 'x' → logprob: -2.9959962368011475
    6. 'i' → logprob: -2.9959962368011475
    7. 'inc' → logprob: -5.870996475219727
    8. ' ' → logprob: -6.495996475219727
    9. '   ' → logprob: -7.495996475219727
    10. ' inc' → logprob: -7.745996475219727

Token 48: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.010349014773964882
    2. ' ' → logprob: -4.760348796844482
    3. 'in' → logprob: -6.385348796844482
    4. 's' → logprob: -11.63534927368164
    5. ' >' → logprob: -11.76034927368164
    6. '  ' → logprob: -11.88534927368164
    7. ')' → logprob: -12.01034927368164
    8. '    ' → logprob: -12.63534927368164
    9. '>' → logprob: -13.13534927368164
    10. ' )' → logprob: -13.13534927368164

Token 49: ' incomes' (ID: 108061)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.2519911527633667
    2. ' incomes' → logprob: -1.5019911527633667
    3. 'income' → logprob: -10.501991271972656
    4. ' ' → logprob: -11.501991271972656
    5. ' in' → logprob: -11.876991271972656
    6. ' income' → logprob: -11.876991271972656
    7. '   ' → logprob: -12.251991271972656
    8. ')' → logprob: -13.251991271972656
    9. '    ' → logprob: -13.751991271972656
    10. '  ' → logprob: -14.001991271972656

Token 50: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.00026288547087460756
    2. '    ' → logprob: -9.000263214111328
    3. ' ' → logprob: -9.375263214111328
    4. 'if' → logprob: -10.125263214111328
    5. '   ' → logprob: -12.250263214111328
    6. ' >' → logprob: -12.875263214111328
    7. ')' → logprob: -13.000263214111328
    8. ' )' → logprob: -13.500263214111328
    9. '>' → logprob: -14.125263214111328
    10. '  ' → logprob: -14.500263214111328

Token 51: ' income' (ID: 11583)
  Prédit: ' income'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' income' → logprob: -0.00044425477972254157
    2. 'income' → logprob: -7.750444412231445
    3. ' ' → logprob: -11.500444412231445
    4. ' incomes' → logprob: -13.750444412231445
    5. '    ' → logprob: -14.375444412231445
    6. '   ' → logprob: -14.750444412231445
    7. '  ' → logprob: -15.250444412231445
    8. ' incom' → logprob: -15.500444412231445
    9. 'Income' → logprob: -15.750444412231445
    10. '_income' → logprob: -15.750444412231445

Token 52: ' <=' (ID: 5017)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '>' → logprob: -0.6479698419570923
    2. ' >' → logprob: -0.7729698419570923
    3. ' <' → logprob: -4.897969722747803
    4. '<' → logprob: -5.022969722747803
    5. ' ' → logprob: -6.772969722747803
    6. '    ' → logprob: -11.022970199584961
    7. '   ' → logprob: -11.522970199584961
    8. '>=' → logprob: -12.272970199584961
    9. ' >=' → logprob: -12.272970199584961
    10. '  ' → logprob: -12.585470199584961

Token 53: ' avg' (ID: 31686)
  Prédit: ' avg'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' avg' → logprob: -0.08141031861305237
    2. 'avg' → logprob: -2.9564104080200195
    3. ' ' → logprob: -3.7064104080200195
    4. ' int' → logprob: -6.8314104080200195
    5. '(avg' → logprob: -8.33141040802002
    6. ' average' → logprob: -9.08141040802002
    7. '  ' → logprob: -10.33141040802002
    8. 'int' → logprob: -10.58141040802002
    9. ' av' → logprob: -10.58141040802002
    10. ' (' → logprob: -10.83141040802002

Token 54: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00019769940990954638
    2. ' )' → logprob: -8.875197410583496
    3. ')
' → logprob: -9.875197410583496
    4. ')

' → logprob: -13.000197410583496
    5. '))' → logprob: -13.125197410583496
    6. '   ' → logprob: -14.000197410583496
    7. ')`' → logprob: -15.250197410583496
    8. ' ' → logprob: -15.500197410583496
    9. ')
' → logprob: -16.000198364257812
    10. ' )
' → logprob: -16.500198364257812

Token 55: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5254496335983276
    2. ')' → logprob: -1.0254496335983276
    3. '<|end|>' → logprob: -3.775449752807617
    4. 'print' → logprob: -4.150449752807617
    5. '
' → logprob: -4.900449752807617
    6. '    
' → logprob: -6.775449752807617
    7. ' print' → logprob: -7.275449752807617
    8. '\n' → logprob: -8.025449752807617
    9. '  
' → logprob: -8.150449752807617
    10. '  ' → logprob: -8.525449752807617

Token 56: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2875920832157135
    2. 'print' (adapté à ' print') → logprob: -1.5375920534133911
    3. ' print' → logprob: -3.4125921726226807
    4. ')' → logprob: -6.662591934204102
    5. '%' → logprob: -8.287591934204102
    6. '
' → logprob: -8.537591934204102
    7. '    
' → logprob: -8.912591934204102
    8. ' 
' → logprob: -10.287591934204102
    9. '.' → logprob: -10.662591934204102
    10. ',' → logprob: -10.912591934204102

Token 57: '(count' (ID: 25892)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.26091986894607544
    2. '(count' → logprob: -1.5109198093414307
    3. '(f' → logprob: -5.26092004776001
    4. '('' → logprob: -6.63592004776001
    5. '("' → logprob: -6.88592004776001
    6. '()' → logprob: -7.76092004776001
    7. '((' → logprob: -7.76092004776001
    8. '(len' → logprob: -7.88592004776001
    9. '("("' → logprob: -9.885919570922852
    10. '(sum' → logprob: -10.135919570922852

Token 58: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -8.709308167453855e-05
    2. ' )' → logprob: -9.500086784362793
    3. '+' → logprob: -12.250086784362793
    4. '))' → logprob: -12.625086784362793
    5. ')
' → logprob: -13.875086784362793
    6. ')`' → logprob: -14.000086784362793
    7. '   ' → logprob: -14.750086784362793
    8. '-' → logprob: -15.250086784362793
    9. '*' → logprob: -15.250086784362793
    10. ')}' → logprob: -15.375086784362793


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 56
Tokens correctement prédits (1ère position, stricte): 32
Tokens correctement prédits (1ère position, avec adaptation): 33
Tokens correctement prédits (top 10): 50
Précision stricte (1ère position): 57.14%
Précision adaptée (1ère position): 58.93%
Précision (top 10): 89.29%
================================================================================
