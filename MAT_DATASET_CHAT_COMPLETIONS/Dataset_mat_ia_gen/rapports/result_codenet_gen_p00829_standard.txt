================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:03:40
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def main():
    import sys
    input = sys.stdin.read().strip().split()
    S = int(input[0])
    idx = 1
    MOD = 2**32
    for _ in range(S):
        data = list(map(lambda x: int(x,16), input[idx:idx+9]))
        idx += 9
        N = data[:8]
        chk = data[8]

        # sum of N modulo 2^32
        s = 0
        for v in N:
            s = (s + v) % MOD

        D = s ^ chk  # difference between sum and checksum

        key = 0
        for bit in range(32):
            bit_sum = 0
            for v in N:
                bit_sum ^= (v >> bit) & 1
            bit_chk = (chk >> bit) & 1
            # We want to find k_bit such that:
            # XOR over i=1..8 of (N_i^{bit} xor k_bit) == chk^{bit}
            # XOR over N_i^{bit} = bit_sum
            # So (bit_sum xor (k_bit if 8 is odd else 0)) = bit_chk
            # 8 is even, so effect is k_bit xor k_bit ... 8 times = 0 if even times, k_bit if odd times
            # Each bit of checksum is bit_sum xor (k_bit * (8 mod 2))
            # since 8 is even, this means k_bit * 0 = 0
            # So bit_chk == bit_sum if k_bit=0 => bit_chk == bit_sum if k_bit ==0
            # Or bit_chk == bit_sum xor 1 if k_bit=1 impossible since 8 is even
            # So if bit_sum != bit_chk then k_bit must flip bits in some way.
            # But problem says: the encryption is ni xor k
            # When XOR over N_i's xor with k:
            # XOR over N_i's xor with 8*k = XOR over N_i's xor 0 = XOR over N_i's
            # So sum xor checksum = D = k xor k xor ... 8 times is 0 (even times)
            # So the sum xor checksum = 0 if k=0
            # But we have difference D = sum xor checksum
            # Actually, the key is equal to D because:
            # XOR over all N_i's xor k 8 times: XOR over N xor (k xor k xor ...8 times) = XOR over N xor 0 = XOR N
            # So XOR N xor chk xor k = 0 => k = D
            # So k = D

        key = D
        print(hex(key)[2:] if key != 0 else '0')

if __name__ == "__main__":
    main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' main' (ID: 2758)
  → Token d'amorce (pas de prédiction)

Token 2: '():
' (ID: 8595)
  → Token d'amorce (pas de prédiction)

Token 3: '   ' (ID: 271)
  Prédit: '\'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\' → logprob: -0.237270325422287
    2. '   ' → logprob: -2.6122703552246094
    3. '\n' → logprob: -2.7372703552246094
    4. '(' → logprob: -3.6122703552246094
    5. ''' → logprob: -4.612270355224609
    6. '```' → logprob: -4.862270355224609
    7. '    
' → logprob: -5.112270355224609
    8. ':' → logprob: -5.362270355224609
    9. ' ' → logprob: -5.737270355224609
    10. '    ' → logprob: -5.862270355224609

Token 4: ' import' (ID: 1588)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.5994746685028076
    2. '   ' → logprob: -1.4744746685028076
    3. 'pass' → logprob: -2.0994746685028076
    4. 'return' → logprob: -2.8494746685028076
    5. '#' → logprob: -4.224474906921387
    6. 'p' → logprob: -5.224474906921387
    7. '```' → logprob: -5.724474906921387
    8. 'r' → logprob: -5.724474906921387
    9. '\' → logprob: -5.849474906921387
    10. 'a' → logprob: -6.099474906921387

Token 5: ' sys' (ID: 12228)
  Prédit: ' os'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' os' → logprob: -0.03986027464270592
    2. ' sys' → logprob: -3.414860248565674
    3. ' math' → logprob: -5.664860248565674
    4. ' ' → logprob: -6.414860248565674
    5. ' numpy' → logprob: -7.539860248565674
    6. ' json' → logprob: -8.414860725402832
    7. ' random' → logprob: -9.664860725402832
    8. ' tensorflow' → logprob: -9.664860725402832
    9. 'os' → logprob: -10.414860725402832
    10. ' pandas' → logprob: -10.664860725402832

Token 6: '
' (ID: 198)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.2184634655714035
    2. '\n' → logprob: -3.34346342086792
    3. 'newline' → logprob: -3.46846342086792
    4. '\' → logprob: -3.71846342086792
    5. '<|end|>' → logprob: -3.84346342086792
    6. '.readline' → logprob: -4.21846342086792
    7. 'import' → logprob: -4.34346342086792
    8. '```' → logprob: -4.59346342086792
    9. '   ' → logprob: -4.71846342086792
    10. '[' → logprob: -5.46846342086792

Token 7: '   ' (ID: 271)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.8574399948120117
    2. '<|end|>' → logprob: -1.2324399948120117
    3. 'import' → logprob: -2.8574399948120117
    4. '```' → logprob: -3.2324399948120117
    5. '.readline' → logprob: -3.4824399948120117
    6. '<|end|>' → logprob: -3.8574399948120117
    7. '
' → logprob: -3.9824399948120117
    8. 'newline' → logprob: -4.232439994812012
    9. '\n' → logprob: -4.357439994812012
    10. '   ' → logprob: -4.607439994812012

Token 8: ' input' (ID: 3422)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.34727635979652405
    2. ' ' → logprob: -2.347276449203491
    3. '    ' → logprob: -2.347276449203491
    4. '\n' → logprob: -3.722276449203491
    5. '\' → logprob: -4.222276210784912
    6. '.' → logprob: -4.722276210784912
    7. '[' → logprob: -4.722276210784912
    8. 'import' → logprob: -4.847276210784912
    9. 'newline' → logprob: -5.222276210784912
    10. '  ' → logprob: -5.347276210784912

Token 9: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.01036636158823967
    2. '()' → logprob: -4.760366439819336
    3. '_' → logprob: -7.760366439819336
    4. ')' → logprob: -8.385366439819336
    5. '.' → logprob: -8.510366439819336
    6. '_data' → logprob: -8.760366439819336
    7. '('' → logprob: -8.885366439819336
    8. ' ' → logprob: -9.635366439819336
    9. '=' → logprob: -9.635366439819336
    10. '("")' → logprob: -9.635366439819336

Token 10: ' sys' (ID: 12228)
  Prédit: ' sys'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sys' → logprob: -5.955703818472102e-05
    2. 'sys' → logprob: -9.875059127807617
    3. '=sys' → logprob: -12.875059127807617
    4. '	sys' → logprob: -13.000059127807617
    5. ' ' → logprob: -13.750059127807617
    6. '(sys' → logprob: -13.750059127807617
    7. ' input' → logprob: -14.000059127807617
    8. ' ' → logprob: -16.500059127807617
    9. ' system' → logprob: -16.500059127807617
    10. 'input' → logprob: -18.375059127807617

Token 11: '.stdin' (ID: 93480)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.013788280077278614
    2. '.readline' → logprob: -4.763788223266602
    3. ' .' → logprob: -6.013788223266602
    4. '[' → logprob: -6.763788223266602
    5. '.stdin' → logprob: -7.388788223266602
    6. '.get' → logprob: -8.013788223266602
    7. '.setdefault' → logprob: -9.138788223266602
    8. '.argv' → logprob: -9.763788223266602
    9. '```' → logprob: -9.763788223266602
    10. ' ' → logprob: -9.888788223266602

Token 12: '.read' (ID: 7211)
  Prédit: '.readline'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.5802445411682129
    2. '.' → logprob: -0.8302445411682129
    3. '.read' → logprob: -5.455244541168213
    4. '.readlines' → logprob: -11.455244064331055
    5. '.stdin' → logprob: -13.080244064331055
    6. '.Read' → logprob: -13.205244064331055
    7. '```' → logprob: -13.830244064331055
    8. ' .' → logprob: -14.205244064331055
    9. 'read' → logprob: -14.330244064331055
    10. '.buffer' → logprob: -14.955244064331055

Token 13: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.5769452452659607
    2. '(' → logprob: -0.8269452452659607
    3. '().' → logprob: -8.201945304870605
    4. ')' → logprob: -9.076945304870605
    5. ' ()' → logprob: -9.451945304870605
    6. '```' → logprob: -9.576945304870605
    7. '(
' → logprob: -9.701945304870605
    8. ' ' → logprob: -10.201945304870605
    9. '<|end|>' → logprob: -10.201945304870605
    10. '()\' → logprob: -10.326945304870605

Token 14: 'strip' (ID: 23905)
  Prédit: 'split'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.25236034393310547
    2. 'strip' → logprob: -1.5023603439331055
    3. 'rstrip' → logprob: -7.8773603439331055
    4. 'replace' → logprob: -10.002360343933105
    5. 'decode' → logprob: -12.002360343933105
    6. ' split' → logprob: -15.502360343933105
    7. '()' → logprob: -17.002361297607422
    8. 'plit' → logprob: -17.127361297607422
    9. '```' → logprob: -17.377361297607422
    10. 'r' → logprob: -17.752361297607422

Token 15: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.043102871626615524
    2. '(' → logprob: -3.168102979660034
    3. '()
' → logprob: -11.168103218078613
    4. '()`' → logprob: -11.668103218078613
    5. '()\' → logprob: -11.668103218078613
    6. '(
' → logprob: -11.793103218078613
    7. '`()' → logprob: -11.793103218078613
    8. '().' → logprob: -12.043103218078613
    9. '```' → logprob: -12.043103218078613
    10. '()

' → logprob: -12.293103218078613

Token 16: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -3.0948158382670954e-05
    2. 'replace' → logprob: -10.500030517578125
    3. 's' → logprob: -13.375030517578125
    4. 'spl' → logprob: -14.750030517578125
    5. 'rstrip' → logprob: -14.875030517578125
    6. '(split' → logprob: -15.125030517578125
    7. '()' → logprob: -15.125030517578125
    8. '```' → logprob: -15.750030517578125
    9. ' split' → logprob: -16.125030517578125
    10. 'startswith' → logprob: -16.250030517578125

Token 17: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.31787124276161194
    2. '()' → logprob: -1.3178712129592896
    3. '('' → logprob: -5.44287109375
    4. '("("' → logprob: -9.44287109375
    5. '```' → logprob: -10.44287109375
    6. '(`' → logprob: -10.44287109375
    7. '(\' → logprob: -10.56787109375
    8. '("")' → logprob: -11.31787109375
    9. ')' → logprob: -11.94287109375
    10. '((' → logprob: -12.06787109375

Token 18: '   ' (ID: 271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7088616490364075
    2. '[' → logprob: -1.4588615894317627
    3. '   ' → logprob: -2.5838615894317627
    4. '()' → logprob: -2.7088615894317627
    5. '\' → logprob: -3.5838615894317627
    6. '(
' → logprob: -4.333861827850342
    7. '_' → logprob: -4.333861827850342
    8. '```' → logprob: -4.333861827850342
    9. 'def' → logprob: -4.833861827850342
    10. '.' → logprob: -4.833861827850342

Token 19: ' S' (ID: 336)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.334666132926941
    2. 'n' → logprob: -1.459666132926941
    3. '(' → logprob: -1.709666132926941
    4. 'i' → logprob: -1.709666132926941
    5. 'd' → logprob: -3.7096662521362305
    6. 'a' → logprob: -3.7096662521362305
    7. 'if' → logprob: -3.8346662521362305
    8. 'data' → logprob: -4.3346662521362305
    9. '_' → logprob: -4.4596662521362305
    10. 'x' → logprob: -4.5846662521362305

Token 20: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.8326600193977356
    2. '[' → logprob: -0.8326600193977356
    3. ' =' → logprob: -2.207659959793091
    4. '_' → logprob: -4.83266019821167
    5. '(' → logprob: -5.83266019821167
    6. ')' → logprob: -6.45766019821167
    7. '.' → logprob: -6.70766019821167
    8. ',' → logprob: -6.70766019821167
    9. '[]' → logprob: -7.33266019821167
    10. 's' → logprob: -7.33266019821167

Token 21: ' int' (ID: 677)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.12699393928050995
    2. ' input' → logprob: -2.1269938945770264
    3. 'int' → logprob: -9.876994132995605
    4. ' ' → logprob: -12.001994132995605
    5. '(input' → logprob: -13.251994132995605
    6. ' int' → logprob: -13.501994132995605
    7. '  ' → logprob: -14.251994132995605
    8. 'S' → logprob: -14.251994132995605
    9. '=input' → logprob: -14.376994132995605
    10. '[input' → logprob: -14.501994132995605

Token 22: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.06700067967176437
    2. '(input' → logprob: -2.8170006275177
    3. '(S' → logprob: -5.317000865936279
    4. '('' → logprob: -10.067000389099121
    5. ' (' → logprob: -10.692000389099121
    6. 'input' → logprob: -11.192000389099121
    7. '(
' → logprob: -11.692000389099121
    8. '(`' → logprob: -11.942000389099121
    9. ' ' → logprob: -12.567000389099121
    10. 'S' → logprob: -12.817000389099121

Token 23: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -5.438573680294212e-06
    2. '(' → logprob: -13.250005722045898
    3. ')' → logprob: -14.125005722045898
    4. '[S' → logprob: -14.125005722045898
    5. '[
' → logprob: -14.125005722045898
    6. ' [' → logprob: -14.500005722045898
    7. '\[' → logprob: -15.000005722045898
    8. '[len' → logprob: -15.250005722045898
    9. '['' → logprob: -16.1250057220459
    10. '   ' → logprob: -16.7500057220459

Token 24: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.6405310816480778e-05
    2. ' ' → logprob: -11.375016212463379
    3. '1' → logprob: -12.250016212463379
    4. '2' → logprob: -17.500017166137695
    5. '-' → logprob: -17.750017166137695
    6. ')' → logprob: -17.875017166137695
    7. '   ' → logprob: -18.125017166137695
    8. '[' → logprob: -19.000017166137695
    9. ']' → logprob: -19.375017166137695
    10. '  ' → logprob: -19.625017166137695

Token 25: '])
' (ID: 5169)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '])' → logprob: -0.06865452229976654
    2. ')' → logprob: -3.1936545372009277
    3. ']' → logprob: -3.6936545372009277
    4. '[' → logprob: -8.94365406036377
    5. ')])' → logprob: -9.19365406036377
    6. ' ])' → logprob: -9.19365406036377
    7. ')]' → logprob: -10.31865406036377
    8. '+' → logprob: -10.81865406036377
    9. '],' → logprob: -11.06865406036377
    10. ']))' → logprob: -11.81865406036377

Token 26: '   ' (ID: 271)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3582856357097626
    2. '   ' → logprob: -2.233285665512085
    3. '<|end|>' → logprob: -2.983285665512085
    4. '+' → logprob: -3.358285665512085
    5. ',' → logprob: -3.733285665512085
    6. '\' → logprob: -4.233285427093506
    7. ' ' → logprob: -4.233285427093506
    8. '#' → logprob: -4.608285427093506
    9. '[' → logprob: -4.733285427093506
    10. '.' → logprob: -5.483285427093506

Token 27: ' idx' (ID: 14016)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.5414104461669922
    2. ')' → logprob: -2.291410446166992
    3. 'a' → logprob: -2.416410446166992
    4. 'i' → logprob: -2.541410446166992
    5. '+' → logprob: -2.791410446166992
    6. 'n' → logprob: -3.166410446166992
    7. 'A' → logprob: -3.291410446166992
    8. 'D' → logprob: -3.291410446166992
    9. '[' → logprob: -3.291410446166992
    10. 'if' → logprob: -3.416410446166992

Token 28: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.4893317222595215
    2. '=' → logprob: -1.2393317222595215
    3. '+' → logprob: -2.7393317222595215
    4. ' +=' → logprob: -3.9893317222595215
    5. '_' → logprob: -4.9893317222595215
    6. '+=' → logprob: -5.4893317222595215
    7. ' ' → logprob: -6.4893317222595215
    8. 's' → logprob: -7.4893317222595215
    9. ' +' → logprob: -7.7393317222595215
    10. ')' → logprob: -8.61433219909668

Token 29: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.47408488392829895
    2. '1' → logprob: -0.9740848541259766
    3. '0' → logprob: -12.224084854125977
    4. '2' → logprob: -13.724084854125977
    5. '  ' → logprob: -13.724084854125977
    6. ' S' → logprob: -14.974084854125977
    7. 'S' → logprob: -16.224084854125977
    8. 'int' → logprob: -16.474084854125977
    9. '   ' → logprob: -17.099084854125977
    10. ' =' → logprob: -17.349084854125977

Token 30: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00011319868644932285
    2. ' ' → logprob: -9.125113487243652
    3. '0' → logprob: -13.375113487243652
    4. '2' → logprob: -13.375113487243652
    5. '   ' → logprob: -14.375113487243652
    6. '  ' → logprob: -15.750113487243652
    7. '+' → logprob: -16.500112533569336
    8. 'S' → logprob: -16.812612533569336
    9. '(' → logprob: -16.875112533569336
    10. '    ' → logprob: -16.937612533569336

Token 31: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9962370991706848
    2. ' ' → logprob: -1.49623703956604
    3. '    ' → logprob: -2.62123703956604
    4. '  ' → logprob: -2.87123703956604
    5. ',' → logprob: -3.24623703956604
    6. ' ,' → logprob: -3.74623703956604
    7. '<|end|>' → logprob: -3.74623703956604
    8. '   
' → logprob: -3.87123703956604
    9. ' if' → logprob: -4.371237277984619
    10. ' for' → logprob: -4.371237277984619

Token 32: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.30577072501182556
    2. ')' → logprob: -2.0557706356048584
    3. '<|end|>' → logprob: -3.0557706356048584
    4. ' ' → logprob: -3.3057706356048584
    5. '    ' → logprob: -4.4307708740234375
    6. '  ' → logprob: -4.6807708740234375
    7. '    
' → logprob: -4.9307708740234375
    8. '
' → logprob: -5.9307708740234375
    9. 'def' → logprob: -6.1807708740234375
    10. '#' → logprob: -6.6807708740234375

Token 33: ' MOD' (ID: 32868)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -1.151003360748291
    2. 'D' → logprob: -2.651003360748291
    3. 'T' → logprob: -2.776003360748291
    4. 'N' → logprob: -2.901003360748291
    5. '   ' → logprob: -3.026003360748291
    6. 'for' → logprob: -3.026003360748291
    7. 'd' → logprob: -3.151003360748291
    8. 'result' → logprob: -3.276003360748291
    9. 'A' → logprob: -3.401003360748291
    10. 'def' → logprob: -3.526003360748291

Token 34: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.016044341027736664
    2. '=' → logprob: -4.1410441398620605
    3. ')' → logprob: -12.516044616699219
    4. ' ' → logprob: -13.266044616699219
    5. ' =)' → logprob: -13.266044616699219
    6. ' =
' → logprob: -14.266044616699219
    7. '_' → logprob: -14.266044616699219
    8. ',' → logprob: -14.641044616699219
    9. '<|end|>' → logprob: -15.266044616699219
    10. ' )' → logprob: -15.391044616699219

Token 35: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6962178349494934
    2. '10' → logprob: -0.6962178349494934
    3. '100' → logprob: -5.821218013763428
    4. '1' → logprob: -9.32121753692627
    5. '998' → logprob: -11.69621753692627
    6. '109' → logprob: -13.69621753692627
    7. '2' → logprob: -14.07121753692627
    8. '200' → logprob: -14.94621753692627
    9. '999' → logprob: -15.32121753692627
    10. '9' → logprob: -15.44621753692627

Token 36: '2' (ID: 17)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.6944385766983032
    2. '100' → logprob: -0.6944385766983032
    3. '998' → logprob: -6.944438457489014
    4. ' ' → logprob: -8.694438934326172
    5. '1' → logprob: -8.819438934326172
    6. '2' → logprob: -13.319438934326172
    7. '200' → logprob: -13.444438934326172
    8. '123' → logprob: -13.819438934326172
    9. '109' → logprob: -14.069438934326172
    10. '```' → logprob: -14.194438934326172

Token 37: '**' (ID: 410)
  Prédit: '**'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '**' → logprob: -0.7491663098335266
    2. '61' → logprob: -1.1241662502288818
    3. '0' → logprob: -3.249166250228882
    4. '7' → logprob: -3.499166250228882
    5. '3' → logprob: -4.249166488647461
    6. '60' → logprob: -4.249166488647461
    7. '1' → logprob: -4.249166488647461
    8. '63' → logprob: -4.499166488647461
    9. '59' → logprob: -4.874166488647461
    10. '53' → logprob: -4.999166488647461

Token 38: '32' (ID: 1398)
  Prédit: '60'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '60' → logprob: -0.9739003777503967
    2. '31' → logprob: -1.348900318145752
    3. '61' → logprob: -1.348900318145752
    4. '64' → logprob: -3.473900318145752
    5. '32' → logprob: -3.473900318145752
    6. '63' → logprob: -4.598900318145752
    7. '10' → logprob: -4.848900318145752
    8. '30' → logprob: -4.848900318145752
    9. '59' → logprob: -5.598900318145752
    10. '55' → logprob: -5.848900318145752

Token 39: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.3942146599292755
    2. '<|end|>' → logprob: -2.394214630126953
    3. '\n' → logprob: -3.019214630126953
    4. ')' → logprob: -3.144214630126953
    5. '   ' → logprob: -3.519214630126953
    6. '+' → logprob: -3.519214630126953
    7. '*' → logprob: -4.394214630126953
    8. '    
' → logprob: -4.519214630126953
    9. ' ' → logprob: -4.644214630126953
    10. ' 
' → logprob: -4.894214630126953

Token 40: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.6821544170379639
    2. '   ' → logprob: -1.8071544170379639
    3. '\n' → logprob: -2.682154417037964
    4. '<|end|>' → logprob: -2.807154417037964
    5. ')' → logprob: -3.057154417037964
    6. ' ' → logprob: -3.182154417037964
    7. ' 
' → logprob: -3.307154417037964
    8. '    
' → logprob: -4.057154655456543
    9. 'def' → logprob: -4.682154655456543
    10. 'n' → logprob: -4.932154655456543

Token 41: ' for' (ID: 395)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -1.3929237127304077
    2. ')' → logprob: -1.7679237127304077
    3. '<|end|>' → logprob: -1.7679237127304077
    4. '\n' → logprob: -2.3929238319396973
    5. 'n' → logprob: -3.2679238319396973
    6. '[' → logprob: -3.2679238319396973
    7. '#' → logprob: -3.6429238319396973
    8. '```' → logprob: -3.7679238319396973
    9. '\' → logprob: -3.8929238319396973
    10. '   ' → logprob: -4.017923831939697

Token 42: ' _' (ID: 1175)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.650879442691803
    2. ' _' → logprob: -0.775879442691803
    3. ' i' → logprob: -4.525879383087158
    4. '_' → logprob: -5.025879383087158
    5. '  ' → logprob: -7.650879383087158
    6. ' range' → logprob: -9.400879859924316
    7. ' s' → logprob: -9.525879859924316
    8. ' space' → logprob: -11.150879859924316
    9. 'i' → logprob: -11.525879859924316
    10. 'range' → logprob: -11.650879859924316

Token 43: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.52556973695755
    2. 'in' → logprob: -0.90056973695755
    3. ' ' → logprob: -6.775569915771484
    4. 'i' → logprob: -7.025569915771484
    5. ' i' → logprob: -8.900569915771484
    6. 'n' → logprob: -9.275569915771484
    7. 'range' → logprob: -10.275569915771484
    8. '  ' → logprob: -10.400569915771484
    9. '   ' → logprob: -11.150569915771484
    10. '_' → logprob: -11.150569915771484

Token 44: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.12694647908210754
    2. ' range' → logprob: -2.126946449279785
    3. '(range' → logprob: -12.251946449279785
    4. '	range' → logprob: -12.626946449279785
    5. ' xrange' → logprob: -12.626946449279785
    6. ' ' → logprob: -12.751946449279785
    7. 'rang' → logprob: -13.626946449279785
    8. 'ran' → logprob: -14.376946449279785
    9. '_range' → logprob: -14.876946449279785
    10. 'ange' → logprob: -15.126946449279785

Token 45: '(S' (ID: 6181)
  Prédit: '(S'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(S' → logprob: -0.5783832669258118
    2. '(' → logprob: -0.8283832669258118
    3. '(s' → logprob: -6.453383445739746
    4. ' (' → logprob: -7.328383445739746
    5. '(range' → logprob: -8.578383445739746
    6. '()' → logprob: -12.453383445739746
    7. '(int' → logprob: -12.703383445739746
    8. '(len' → logprob: -12.828383445739746
    9. '(space' → logprob: -13.453383445739746
    10. '(
' → logprob: -13.578383445739746

Token 46: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.008505837060511112
    2. ',' → logprob: -5.383505821228027
    3. ':' → logprob: -6.383505821228027
    4. ')' → logprob: -6.758505821228027
    5. ' ):' → logprob: -7.008505821228027
    6. ' ,' → logprob: -9.508505821228027
    7. '   ' → logprob: -10.758505821228027
    8. ' :' → logprob: -12.258505821228027
    9. ' )' → logprob: -12.508505821228027
    10. '():' → logprob: -12.633505821228027

Token 47: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04106978699564934
    2. '    ' → logprob: -3.916069746017456
    3. ' ' → logprob: -4.041069984436035
    4. '  ' → logprob: -7.041069984436035
    5. '<|end|>' → logprob: -7.291069984436035
    6. '       ' → logprob: -7.916069984436035
    7. ')' → logprob: -8.416069984436035
    8. '    
' → logprob: -8.791069984436035
    9. 'n' → logprob: -9.416069984436035
    10. ',' → logprob: -9.666069984436035

Token 48: ' data' (ID: 1238)
  Prédit: ' N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.9356637597084045
    2. 'N' → logprob: -1.1856637001037598
    3. ' n' → logprob: -2.1856637001037598
    4. 'n' → logprob: -2.6856637001037598
    5. ' Q' → logprob: -4.43566370010376
    6. ' L' → logprob: -4.56066370010376
    7. ' A' → logprob: -4.56066370010376
    8. 'Q' → logprob: -4.93566370010376
    9. ' M' → logprob: -4.93566370010376
    10. 'A' → logprob: -5.18566370010376

Token 49: ' =' (ID: 314)
  Prédit: '_idx'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_idx' → logprob: -1.2838091850280762
    2. '[' → logprob: -1.5338091850280762
    3. '[idx' → logprob: -1.9088091850280762
    4. '=' → logprob: -2.033809185028076
    5. '_' → logprob: -2.033809185028076
    6. ' =' → logprob: -3.408809185028076
    7. '_type' → logprob: -4.033809185028076
    8. '   ' → logprob: -5.033809185028076
    9. 'idx' → logprob: -5.033809185028076
    10. '_len' → logprob: -5.408809185028076

Token 50: ' list' (ID: 1562)
  Prédit: ' list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -1.2955812215805054
    2. ' int' → logprob: -1.6705812215805054
    3. ' input' → logprob: -1.7955812215805054
    4. 'int' → logprob: -1.9205812215805054
    5. 'list' → logprob: -2.795581340789795
    6. '[int' → logprob: -2.795581340789795
    7. 'input' → logprob: -2.920581340789795
    8. ' [' → logprob: -3.170581340789795
    9. '[' → logprob: -5.795581340789795
    10. '[input' → logprob: -6.295581340789795

Token 51: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -1.0069231986999512
    2. '(' → logprob: -1.1319231986999512
    3. '(input' → logprob: -1.2569231986999512
    4. '(int' → logprob: -3.631923198699951
    5. '(data' → logprob: -7.631923198699951
    6. '()' → logprob: -8.13192367553711
    7. '(range' → logprob: -8.75692367553711
    8. '(eval' → logprob: -9.75692367553711
    9. '(
' → logprob: -9.88192367553711
    10. '[int' → logprob: -10.38192367553711

Token 52: '(lambda' (ID: 43341)
  Prédit: '(int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.005268499720841646
    2. '(' → logprob: -5.255268573760986
    3. '(str' → logprob: -10.505268096923828
    4. 'int' → logprob: -12.880268096923828
    5. '<int' → logprob: -13.630268096923828
    6. ',int' → logprob: -14.005268096923828
    7. '(
' → logprob: -14.130268096923828
    8. ' (' → logprob: -14.880268096923828
    9. '(lambda' → logprob: -15.005268096923828
    10. '[int' → logprob: -15.005268096923828

Token 53: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.675481379032135
    2. 'x' → logprob: -1.3004813194274902
    3. 'int' → logprob: -2.0504813194274902
    4. ' int' → logprob: -2.4254813194274902
    5. ':int' → logprob: -7.55048131942749
    6. '(int' → logprob: -7.80048131942749
    7. ',int' → logprob: -8.925481796264648
    8. '<int' → logprob: -9.175481796264648
    9. ' lambda' → logprob: -9.425481796264648
    10. ' ' → logprob: -9.425481796264648

Token 54: ':' (ID: 25)
  Prédit: ':int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':int' → logprob: -0.5579503774642944
    2. ':' → logprob: -0.9329503774642944
    3. ' :' → logprob: -3.557950496673584
    4. ',int' → logprob: -5.807950496673584
    5. 'int' → logprob: -6.807950496673584
    6. ' int' → logprob: -7.057950496673584
    7. ',' → logprob: -7.807950496673584
    8. '(int' → logprob: -9.057950019836426
    9. '=int' → logprob: -10.182950019836426
    10. ' x' → logprob: -10.182950019836426

Token 55: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.5241621136665344
    2. ' int' → logprob: -0.8991621136665344
    3. '(int' → logprob: -7.899162292480469
    4. ' x' → logprob: -8.149162292480469
    5. 'x' → logprob: -9.274162292480469
    6. ' ord' → logprob: -9.774162292480469
    7. ' ' → logprob: -10.024162292480469
    8. ' input' → logprob: -10.399162292480469
    9. ' (' → logprob: -10.774162292480469
    10. 'input' → logprob: -11.024162292480469

Token 56: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.005300519522279501
    2. '(' → logprob: -5.255300521850586
    3. 'x' → logprob: -10.755300521850586
    4. ',' → logprob: -11.130300521850586
    5. '<|end|>' → logprob: -11.130300521850586
    6. ' (' → logprob: -12.005300521850586
    7. ',x' → logprob: -12.880300521850586
    8. ')' → logprob: -13.130300521850586
    9. '(input' → logprob: -13.380300521850586
    10. ' ' → logprob: -13.755300521850586

Token 57: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.5613535642623901
    2. '),' → logprob: -1.5613535642623901
    3. '(x' → logprob: -2.8113536834716797
    4. '(input' → logprob: -2.8113536834716797
    5. ',input' → logprob: -2.8113536834716797
    6. 'input' → logprob: -4.31135368347168
    7. '(data' → logprob: -5.31135368347168
    8. '*' → logprob: -5.43635368347168
    9. '+' → logprob: -5.43635368347168
    10. ')' → logprob: -5.68635368347168

Token 58: '16' (ID: 1125)
  Prédit: '16'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '16' → logprob: -0.10447506606578827
    2. ' ' → logprob: -3.3544750213623047
    3. '2' → logprob: -3.4794750213623047
    4. '0' → logprob: -3.9794750213623047
    5. '10' → logprob: -4.479475021362305
    6. '36' → logprob: -6.479475021362305
    7. '1' → logprob: -7.229475021362305
    8. '8' → logprob: -8.229475021362305
    9. '32' → logprob: -8.479475021362305
    10. '  ' → logprob: -8.979475021362305

Token 59: '),' (ID: 936)
  Prédit: '),'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '),' → logprob: -0.0009404043667018414
    2. ')' → logprob: -7.000940322875977
    3. ')))' → logprob: -12.375940322875977
    4. '),
' → logprob: -12.500940322875977
    5. ' ),' → logprob: -12.500940322875977
    6. '   ' → logprob: -12.625940322875977
    7. ' ' → logprob: -13.125940322875977
    8. ',' → logprob: -13.375940322875977
    9. '),(' → logprob: -13.375940322875977
    10. 'if' → logprob: -13.750940322875977

Token 60: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.061976201832294464
    2. 'input' → logprob: -2.811976194381714
    3. '[input' → logprob: -12.311976432800293
    4. '(input' → logprob: -13.311976432800293
    5. ',input' → logprob: -14.186976432800293
    6. ' [' → logprob: -14.686976432800293
    7. '	input' → logprob: -15.561976432800293
    8. '[' → logprob: -15.686976432800293
    9. '   ' → logprob: -15.936976432800293
    10. ' ' → logprob: -15.936976432800293

Token 61: '[idx' (ID: 25582)
  Prédit: '[idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[idx' → logprob: -0.0006795499939471483
    2. '[' → logprob: -7.3756794929504395
    3. '(idx' → logprob: -10.000679969787598
    4. 'idx' → logprob: -13.250679969787598
    5. '   ' → logprob: -13.250679969787598
    6. ')' → logprob: -14.125679969787598
    7. ' [' → logprob: -14.125679969787598
    8. '))' → logprob: -14.750679969787598
    9. ')[' → logprob: -14.875679969787598
    10. '[
' → logprob: -15.000679969787598

Token 62: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.004603741690516472
    2. ' :' → logprob: -5.629603862762451
    3. ':]' → logprob: -7.379603862762451
    4. '+' → logprob: -9.129603385925293
    5. ']))' → logprob: -9.379603385925293
    6. ']' → logprob: -10.254603385925293
    7. '   ' → logprob: -11.004603385925293
    8. ' ' → logprob: -11.254603385925293
    9. ':index' → logprob: -11.379603385925293
    10. ']:' → logprob: -11.379603385925293

Token 63: 'idx' (ID: 13196)
  Prédit: 'idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'idx' → logprob: -0.0031793788075447083
    2. ' idx' → logprob: -5.878179550170898
    3. '   ' → logprob: -8.878179550170898
    4. '6' → logprob: -10.253179550170898
    5. '16' → logprob: -10.628179550170898
    6. '4' → logprob: -10.878179550170898
    7. '8' → logprob: -10.878179550170898
    8. '       ' → logprob: -11.003179550170898
    9. '7' → logprob: -11.253179550170898
    10. ' ' → logprob: -11.378179550170898

Token 64: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.0019023398635908961
    2. ' +' → logprob: -6.376902103424072
    3. '   ' → logprob: -9.37690258026123
    4. '16' → logprob: -11.50190258026123
    5. ']+' → logprob: -11.50190258026123
    6. ' ' → logprob: -11.75190258026123
    7. '+[' → logprob: -11.87690258026123
    8. '+++' → logprob: -11.87690258026123
    9. '4' → logprob: -12.00190258026123
    10. '8' → logprob: -12.00190258026123

Token 65: '9' (ID: 24)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '2' → logprob: -1.3096319437026978
    2. '4' → logprob: -1.3096319437026978
    3. '8' → logprob: -1.6846319437026978
    4. '3' → logprob: -2.184631824493408
    5. '16' → logprob: -2.809631824493408
    6. '6' → logprob: -3.559631824493408
    7. ' ' → logprob: -4.059631824493408
    8. '5' → logprob: -4.059631824493408
    9. '32' → logprob: -4.559631824493408
    10. '10' → logprob: -4.809631824493408

Token 66: ']))
' (ID: 24801)
  Prédit: ']))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']))' → logprob: -0.003490785136818886
    2. ']' → logprob: -6.378490924835205
    3. ']))
' → logprob: -6.378490924835205
    4. ']))
' → logprob: -10.503490447998047
    5. ']))

' → logprob: -11.003490447998047
    6. ')))' → logprob: -11.753490447998047
    7. '))' → logprob: -11.753490447998047
    8. '   ' → logprob: -11.753490447998047
    9. '])))' → logprob: -12.253490447998047
    10. '']))' → logprob: -12.628490447998047

Token 67: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.7329344749450684
    2. '
' → logprob: -1.3579344749450684
    3. ')' → logprob: -1.4829344749450684
    4. '<|end|>' → logprob: -3.6079344749450684
    5. ')
' → logprob: -5.732934474945068
    6. '\n' → logprob: -6.857934474945068
    7. '<|end|>' → logprob: -7.357934474945068
    8. '
' → logprob: -7.482934474945068
    9. ')\' → logprob: -7.982934474945068
    10. '[idx' → logprob: -8.107934951782227

Token 68: ' idx' (ID: 14016)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.0055344547145068645
    2. 'idx' (adapté à ' idx') → logprob: -5.630534648895264
    3. '       ' → logprob: -7.630534648895264
    4. '
' → logprob: -7.630534648895264
    5. '\n' → logprob: -7.755534648895264
    6. ' idx' → logprob: -8.755534172058105
    7. '[idx' → logprob: -9.130534172058105
    8. '	idx' → logprob: -9.380534172058105
    9. '        
' → logprob: -9.880534172058105
    10. ' 
' → logprob: -10.505534172058105

Token 69: ' +=' (ID: 2757)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.6801380515098572
    2. '+=' → logprob: -1.055138111114502
    3. ' +=' → logprob: -1.930138111114502
    4. ' +' → logprob: -9.305137634277344
    5. '=' → logprob: -10.805137634277344
    6. '<|end|>' → logprob: -11.055137634277344
    7. '+='' → logprob: -11.055137634277344
    8. '+++' → logprob: -11.305137634277344
    9. '++' → logprob: -11.805137634277344
    10. ' =' → logprob: -12.430137634277344

Token 70: ' ' (ID: 220)
  Prédit: '9'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '9' → logprob: -1.9361264946837764e-07
    2. ' ' → logprob: -16.625
    3. '９' → logprob: -20.625
    4. '```' → logprob: -20.625
    5. '10' → logprob: -21.0
    6. '९' → logprob: -21.625
    7. '   ' → logprob: -21.625
    8. '۹' → logprob: -21.625
    9. '09' → logprob: -21.75
    10. '৯' → logprob: -22.75

Token 71: '9' (ID: 24)
  Prédit: '9'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '9' → logprob: 0.0
    2. ' ' → logprob: -18.375
    3. '10' → logprob: -20.375
    4. '```' → logprob: -20.875
    5. '９' → logprob: -21.0
    6. '۹' → logprob: -21.875
    7. '९' → logprob: -22.0
    8. '09' → logprob: -22.25
    9. '   ' → logprob: -22.5
    10. '৯' → logprob: -23.125

Token 72: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5773810148239136
    2. '<|end|>' → logprob: -1.5773810148239136
    3. '
' → logprob: -1.8273810148239136
    4. '   ' → logprob: -2.952381134033203
    5. ' ' → logprob: -5.452381134033203
    6. '        
' → logprob: -5.827381134033203
    7. ')' → logprob: -6.077381134033203
    8. '#' → logprob: -6.452381134033203
    9. '    
' → logprob: -6.827381134033203
    10. '  
' → logprob: -6.952381134033203

Token 73: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6951330900192261
    2. '       ' → logprob: -1.195133090019226
    3. '
' → logprob: -2.3201332092285156
    4. '<|end|>' → logprob: -2.5701332092285156
    5. '    
' → logprob: -4.945133209228516
    6. ' ' → logprob: -5.445133209228516
    7. '        
' → logprob: -5.695133209228516
    8. '    ' → logprob: -6.695133209228516
    9. ')' → logprob: -6.695133209228516
    10. '  ' → logprob: -7.320133209228516

Token 74: ' N' (ID: 478)
  Prédit: ' acc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' acc' → logprob: -1.5094892978668213
    2. 'sum' → logprob: -2.6344892978668213
    3. 'result' → logprob: -2.7594892978668213
    4. 'a' → logprob: -2.7594892978668213
    5. ' result' → logprob: -2.7594892978668213
    6. ' val' → logprob: -3.0094892978668213
    7. '   ' → logprob: -3.1344892978668213
    8. ' sum' → logprob: -3.2594892978668213
    9. 'acc' → logprob: -3.5094892978668213
    10. 'checksum' → logprob: -3.6344892978668213

Token 75: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0473950132727623
    2. '=' → logprob: -3.1723949909210205
    3. ',' → logprob: -5.7973952293396
    4. ' ' → logprob: -7.5473952293396
    5. '_' → logprob: -7.9223952293396
    6. '  ' → logprob: -9.672394752502441
    7. 'o' → logprob: -9.922394752502441
    8. 'um' → logprob: -10.047394752502441
    9. 's' → logprob: -10.297394752502441
    10. ' ,' → logprob: -10.422394752502441

Token 76: ' data' (ID: 1238)
  Prédit: 'data'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'data' → logprob: -0.04389461502432823
    2. ' data' → logprob: -3.2938945293426514
    3. 'int' → logprob: -6.6688947677612305
    4. 'len' → logprob: -6.7938947677612305
    5. '256' → logprob: -7.7938947677612305
    6. '(data' → logprob: -7.7938947677612305
    7. ' ' → logprob: -8.16889476776123
    8. '0' → logprob: -8.29389476776123
    9. ' int' → logprob: -8.41889476776123
    10. '100' → logprob: -8.79389476776123

Token 77: '[:' (ID: 7808)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -8.697387966094539e-05
    2. '[-' → logprob: -9.625086784362793
    3. '0' → logprob: -11.750086784362793
    4. '.pop' → logprob: -12.125086784362793
    5. ' [' → logprob: -12.875086784362793
    6. '   ' → logprob: -13.750086784362793
    7. '```' → logprob: -13.875086784362793
    8. '1' → logprob: -15.000086784362793
    9. '=' → logprob: -15.375086784362793
    10. '[
' → logprob: -15.500086784362793

Token 78: '8' (ID: 23)
  Prédit: '4'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -1.0455272197723389
    2. '8' → logprob: -1.5455272197723389
    3. '3' → logprob: -1.9205272197723389
    4. '5' → logprob: -2.170527219772339
    5. '7' → logprob: -2.670527219772339
    6. '6' → logprob: -2.670527219772339
    7. '2' → logprob: -3.920527219772339
    8. '1' → logprob: -4.295527458190918
    9. ' ' → logprob: -6.170527458190918
    10. '9' → logprob: -8.045527458190918

Token 79: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.004782069008797407
    2. ']
' → logprob: -5.754782199859619
    3. ' ]' → logprob: -6.504782199859619
    4. '])' → logprob: -10.504781723022461
    5. ']
' → logprob: -10.629781723022461
    6. ' ]
' → logprob: -11.629781723022461
    7. ')' → logprob: -11.879781723022461
    8. '       ' → logprob: -12.379781723022461
    9. ']

' → logprob: -12.629781723022461
    10. '][' → logprob: -12.629781723022461

Token 80: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.011977623216807842
    2. '<|end|>' → logprob: -5.136977672576904
    3. '   ' → logprob: -5.386977672576904
    4. 'sum' → logprob: -7.511977672576904
    5. '        
' → logprob: -9.511977195739746
    6. '[' → logprob: -9.511977195739746
    7. '#' → logprob: -9.511977195739746
    8. ' sum' → logprob: -9.636977195739746
    9. 'n' → logprob: -9.761977195739746
    10. 's' → logprob: -9.886977195739746

Token 81: ' chk' (ID: 63648)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.5640230178833008
    2. '       ' → logprob: -2.064023017883301
    3. 'M' → logprob: -2.939023017883301
    4. 'C' → logprob: -3.189023017883301
    5. ' M' → logprob: -3.189023017883301
    6. 'K' → logprob: -3.439023017883301
    7. 'val' → logprob: -3.564023017883301
    8. 'sum' → logprob: -3.564023017883301
    9. 'X' → logprob: -3.689023017883301
    10. 'Q' → logprob: -3.814023017883301

Token 82: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.33970069885253906
    2. '=' → logprob: -1.464700698852539
    3. 'sum' → logprob: -2.964700698852539
    4. 's' → logprob: -5.464700698852539
    5. '=sum' → logprob: -7.714700698852539
    6. 'um' → logprob: -8.714700698852539
    7. ' ' → logprob: -8.964700698852539
    8. '_' → logprob: -9.589700698852539
    9. '=s' → logprob: -10.464700698852539
    10. '   ' → logprob: -10.714700698852539

Token 83: ' data' (ID: 1238)
  Prédit: 'data'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'data' → logprob: -0.4744897782802582
    2. ' data' → logprob: -0.9744898080825806
    3. ' (' → logprob: -9.09949016571045
    4. '(data' → logprob: -9.09949016571045
    5. '0' → logprob: -9.59949016571045
    6. '(' → logprob: -9.84949016571045
    7. 'sum' → logprob: -10.72449016571045
    8. 'int' → logprob: -11.09949016571045
    9. ' ' → logprob: -11.59949016571045
    10. ' int' → logprob: -12.22449016571045

Token 84: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -3.380904672667384e-05
    2. '8' → logprob: -10.875033378601074
    3. '[-' → logprob: -11.500033378601074
    4. '```' → logprob: -13.625033378601074
    5. '\[' → logprob: -13.750033378601074
    6. ' [' → logprob: -13.875033378601074
    7. '[len' → logprob: -15.000033378601074
    8. '9' → logprob: -15.500033378601074
    9. ' ' → logprob: -16.12503433227539
    10. '(' → logprob: -16.25003433227539

Token 85: '8' (ID: 23)
  Prédit: '8'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '8' → logprob: -0.00014025058771949261
    2. '-' → logprob: -9.125140190124512
    3. ' ' → logprob: -10.875140190124512
    4. '[' → logprob: -12.375140190124512
    5. '[-' → logprob: -13.500140190124512
    6. '   ' → logprob: -13.750140190124512
    7. '```' → logprob: -14.125140190124512
    8. '9' → logprob: -14.312640190124512
    9. ':' → logprob: -14.562640190124512
    10. ' -' → logprob: -14.562640190124512

Token 86: ']

' (ID: 3144)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0025937308091670275
    2. ' ]' → logprob: -6.502593517303467
    3. ']
' → logprob: -7.002593517303467
    4. ')]' → logprob: -9.627593994140625
    5. '])' → logprob: -9.877593994140625
    6. ')' → logprob: -10.252593994140625
    7. ']

' → logprob: -11.252593994140625
    8. ']
' → logprob: -12.627593994140625
    9. ' ]
' → logprob: -12.752593994140625
    10. ':]' → logprob: -12.752593994140625

Token 87: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.28039801120758057
    2. '
' → logprob: -1.6553980112075806
    3. '       ' → logprob: -3.530397891998291
    4. ' ' → logprob: -4.655397891998291
    5. ' if' → logprob: -6.030397891998291
    6. '<|end|>' → logprob: -6.280397891998291
    7. ' sum' → logprob: -6.530397891998291
    8. '    
' → logprob: -6.780397891998291
    9. ' 
' → logprob: -6.905397891998291
    10. '    ' → logprob: -6.905397891998291

Token 88: ' #' (ID: 1069)
  Prédit: 'sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'sum' → logprob: -1.6197004318237305
    2. 'checksum' → logprob: -1.7447004318237305
    3. 'c' → logprob: -1.9947004318237305
    4. '   ' → logprob: -2.1197004318237305
    5. 'x' → logprob: -3.2447004318237305
    6. 'val' → logprob: -3.3697004318237305
    7. ' checksum' → logprob: -3.4947004318237305
    8. '       ' → logprob: -3.7447004318237305
    9. 's' → logprob: -3.8697004318237305
    10. 'v' → logprob: -3.9947004318237305

Token 89: ' sum' (ID: 4215)
  Prédit: ' checksum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' checksum' → logprob: -1.4637855291366577
    2. ' c' → logprob: -1.5887855291366577
    3. ' sum' → logprob: -1.5887855291366577
    4. 'sum' → logprob: -2.4637856483459473
    5. 'checksum' → logprob: -2.4637856483459473
    6. 'c' → logprob: -3.7137856483459473
    7. ' ' → logprob: -4.213785648345947
    8. ' acc' → logprob: -4.338785648345947
    9. ' val' → logprob: -4.463785648345947
    10. ' s' → logprob: -4.463785648345947

Token 90: ' of' (ID: 328)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.10972775518894196
    2. '_val' → logprob: -2.6097278594970703
    3. '_N' → logprob: -4.48472785949707
    4. 'N' → logprob: -5.35972785949707
    5. '_n' → logprob: -5.60972785949707
    6. '_value' → logprob: -5.85972785949707
    7. ' =' → logprob: -6.23472785949707
    8. '_=' → logprob: -6.48472785949707
    9. '_sum' → logprob: -6.85972785949707
    10. '_of' → logprob: -7.10972785949707

Token 91: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.11603943258523941
    2. ' N' → logprob: -2.241039514541626
    3. '(N' → logprob: -5.866039276123047
    4. '(' → logprob: -8.616039276123047
    5. '((' → logprob: -9.616039276123047
    6. ' (' → logprob: -9.741039276123047
    7. ' ' → logprob: -11.366039276123047
    8. '   ' → logprob: -11.616039276123047
    9. ')' → logprob: -11.991039276123047
    10. '[N' → logprob: -12.241039276123047

Token 92: ' modulo' (ID: 112372)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.11403960734605789
    2. '=' → logprob: -2.489039659500122
    3. '_' → logprob: -4.489039421081543
    4. 's' → logprob: -5.114039421081543
    5. '_sum' → logprob: -5.989039421081543
    6. 'sum' → logprob: -6.114039421081543
    7. '=sum' → logprob: -7.364039421081543
    8. '_=' → logprob: -7.489039421081543
    9. ' ' → logprob: -7.989039421081543
    10. '_checksum' → logprob: -8.864039421081543

Token 93: ' ' (ID: 220)
  Prédit: ' MOD'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' MOD' → logprob: -0.28392401337623596
    2. 'MOD' → logprob: -1.4089239835739136
    3. ' (' → logprob: -6.658924102783203
    4. '(' → logprob: -7.408924102783203
    5. ' ' → logprob: -7.408924102783203
    6. '32' → logprob: -9.408924102783203
    7. '(M' → logprob: -9.908924102783203
    8. '   ' → logprob: -10.158924102783203
    9. '    ' → logprob: -11.033924102783203
    10. '_MOD' → logprob: -11.158924102783203

Token 94: '2' (ID: 17)
  Prédit: 'MOD'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'MOD' → logprob: -0.005970627069473267
    2. ' MOD' → logprob: -5.130970478057861
    3. ' ' → logprob: -11.63097095489502
    4. '(' → logprob: -11.63097095489502
    5. '2' → logprob: -11.63097095489502
    6. '   ' → logprob: -12.38097095489502
    7. '256' → logprob: -12.63097095489502
    8. '_MOD' → logprob: -13.25597095489502
    9. '(M' → logprob: -14.00597095489502
    10. '655' → logprob: -14.13097095489502

Token 95: '^' (ID: 61)
  Prédit: '**'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '**' → logprob: -0.00263249222189188
    2. '32' → logprob: -6.0026326179504395
    3. '*' → logprob: -9.502632141113281
    4. '^' → logprob: -10.127632141113281
    5. ' **' → logprob: -10.502632141113281
    6. '```' → logprob: -11.877632141113281
    7. ' ' → logprob: -12.252632141113281
    8. '***' → logprob: -14.002632141113281
    9. '33' → logprob: -15.002632141113281
    10. '**
' → logprob: -15.127632141113281

Token 96: '32' (ID: 1398)
  Prédit: '32'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '32' → logprob: -1.6240566083070007e-06
    2. '3' → logprob: -13.750001907348633
    3. ' ' → logprob: -14.875001907348633
    4. '33' → logprob: -17.000001907348633
    5. '  ' → logprob: -18.250001907348633
    6. '```' → logprob: -18.625001907348633
    7. '31' → logprob: -18.750001907348633
    8. '2' → logprob: -19.250001907348633
    9. '4' → logprob: -19.875001907348633
    10. '8' → logprob: -19.875001907348633

Token 97: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.292744517326355
    2. '=' → logprob: -2.2927446365356445
    3. ' =' → logprob: -2.2927446365356445
    4. '   ' → logprob: -3.6677446365356445
    5. ' ' → logprob: -4.4177446365356445
    6. '+' → logprob: -5.7927446365356445
    7. '<|end|>' → logprob: -6.5427446365356445
    8. ')' → logprob: -6.7927446365356445
    9. 'result' → logprob: -6.9177446365356445
    10. ',' → logprob: -7.0427446365356445

Token 98: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.03478283807635307
    2. 'sum' → logprob: -4.159782886505127
    3. 'total' → logprob: -5.034782886505127
    4. '   ' → logprob: -5.534782886505127
    5. '
' → logprob: -5.659782886505127
    6. 's' → logprob: -7.034782886505127
    7. '+' → logprob: -7.659782886505127
    8. ' total' → logprob: -7.784782886505127
    9. ' sum' → logprob: -8.034782409667969
    10. 'result' → logprob: -8.159782409667969

Token 99: ' s' (ID: 265)
  Prédit: 'sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sum' → logprob: -0.9231007695198059
    2. ' sum' → logprob: -1.5481007099151611
    3. ' s' → logprob: -2.423100709915161
    4. ' total' → logprob: -2.673100709915161
    5. 's' (adapté à ' s') → logprob: -2.798100709915161
    6. 'total' → logprob: -2.923100709915161
    7. '       ' → logprob: -3.048100709915161
    8. '   ' → logprob: -4.29810094833374
    9. '
' → logprob: -4.29810094833374
    10. 'checksum' → logprob: -4.54810094833374

Token 100: ' =' (ID: 314)
  Prédit: 'um'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'um' → logprob: -0.36001452803611755
    2. ' =' → logprob: -1.23501455783844
    3. 'u' → logprob: -5.23501443862915
    4. '_' → logprob: -5.48501443862915
    5. '=' → logprob: -6.86001443862915
    6. ' ' → logprob: -7.23501443862915
    7. '_um' → logprob: -9.610014915466309
    8. '_sum' → logprob: -9.735014915466309
    9. 'm' → logprob: -10.110014915466309
    10. '   ' → logprob: -10.985014915466309

Token 101: ' ' (ID: 220)
  Prédit: ' sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sum' → logprob: -0.2552134692668915
    2. 'sum' → logprob: -1.5052134990692139
    3. '(sum' → logprob: -6.630213260650635
    4. ' (' → logprob: -7.005213260650635
    5. '0' → logprob: -7.255213260650635
    6. '(' → logprob: -8.255213737487793
    7. ' ' → logprob: -9.505213737487793
    8. '   ' → logprob: -12.005213737487793
    9. '	sum' → logprob: -13.505213737487793
    10. '((' → logprob: -14.255213737487793

Token 102: '0' (ID: 15)
  Prédit: 'sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sum' → logprob: -0.031192081049084663
    2. '(sum' → logprob: -3.6561920642852783
    3. ' sum' → logprob: -5.531192302703857
    4. '(' → logprob: -7.156192302703857
    5. '0' → logprob: -9.4061918258667
    6. ' (' → logprob: -10.2811918258667
    7. '((' → logprob: -11.9061918258667
    8. '   ' → logprob: -12.5311918258667
    9. 'MOD' → logprob: -12.5311918258667
    10. '(s' → logprob: -13.1561918258667

Token 103: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -1.2967801094055176
    2. '       ' → logprob: -1.4217801094055176
    3. '<|end|>' → logprob: -1.7967801094055176
    4. ' for' → logprob: -1.9217801094055176
    5. 'for' → logprob: -2.1717801094055176
    6. '   ' → logprob: -3.4217801094055176
    7. ' ' → logprob: -4.921780109405518
    8. '	for' → logprob: -5.796780109405518
    9. '<|end|>' → logprob: -5.921780109405518
    10. '  
' → logprob: -6.046780109405518

Token 104: '       ' (ID: 309)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.7732049822807312
    2. 'for' → logprob: -1.523205041885376
    3. '       ' → logprob: -1.898205041885376
    4. '<|end|>' → logprob: -2.648205041885376
    5. '
' → logprob: -2.898205041885376
    6. '   ' → logprob: -3.523205041885376
    7. '+' → logprob: -5.148204803466797
    8. '    ' → logprob: -6.523204803466797
    9. ' ' → logprob: -6.523204803466797
    10. '	for' → logprob: -6.773204803466797

Token 105: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.009344595484435558
    2. ' for' → logprob: -4.759344577789307
    3. '       ' → logprob: -7.509344577789307
    4. '   ' → logprob: -9.134345054626465
    5. '
' → logprob: -9.759345054626465
    6. '	for' → logprob: -11.509345054626465
    7. '+' → logprob: -13.509345054626465
    8. '```' → logprob: -13.884345054626465
    9. '    ' → logprob: -14.009345054626465
    10. ' ' → logprob: -14.384345054626465

Token 106: ' v' (ID: 323)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.5587645173072815
    2. 'n' → logprob: -1.0587644577026367
    3. ' i' → logprob: -3.5587644577026367
    4. ' x' → logprob: -4.058764457702637
    5. 'i' → logprob: -4.308764457702637
    6. 'x' → logprob: -4.683764457702637
    7. ' num' → logprob: -5.308764457702637
    8. ' v' → logprob: -6.058764457702637
    9. 'num' → logprob: -6.058764457702637
    10. 'v' → logprob: -6.183764457702637

Token 107: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.04875984042882919
    2. 'in' → logprob: -3.048759937286377
    3. ' ' → logprob: -9.423759460449219
    4. 's' → logprob: -9.923759460449219
    5. 'n' → logprob: -11.423759460449219
    6. 'v' → logprob: -11.798759460449219
    7. '	in' → logprob: -12.048759460449219
    8. '  ' → logprob: -12.298759460449219
    9. '   ' → logprob: -12.423759460449219
    10. 'i' → logprob: -13.298759460449219

Token 108: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.474077969789505
    2. ' N' → logprob: -0.9740779399871826
    3. ' ' → logprob: -14.474078178405762
    4. '	N' → logprob: -15.724078178405762
    5. '   ' → logprob: -15.849078178405762
    6. '`' → logprob: -17.224077224731445
    7. '    ' → logprob: -17.724077224731445
    8. '
' → logprob: -17.974077224731445
    9. '>N' → logprob: -17.974077224731445
    10. '```' → logprob: -17.974077224731445

Token 109: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.007725514937192202
    2. ':
' → logprob: -4.882725715637207
    3. '+' → logprob: -10.132725715637207
    4. ' +=' → logprob: -10.757725715637207
    5. '+=' → logprob: -11.257725715637207
    6. ' :' → logprob: -11.382725715637207
    7. '   ' → logprob: -11.757725715637207
    8. '       ' → logprob: -12.007725715637207
    9. '           ' → logprob: -12.632725715637207
    10. '=' → logprob: -12.882725715637207

Token 110: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.019968422129750252
    2. ' s' → logprob: -4.144968509674072
    3. 's' → logprob: -6.894968509674072
    4. '+' → logprob: -7.019968509674072
    5. '
' → logprob: -7.394968509674072
    6. ' +' → logprob: -7.769968509674072
    7. '       ' → logprob: -8.019968032836914
    8. '            
' → logprob: -8.769968032836914
    9. ' 
' → logprob: -9.644968032836914
    10. '   ' → logprob: -9.769968032836914

Token 111: ' s' (ID: 265)
  Prédit: ' s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.022008243948221207
    2. 's' (adapté à ' s') → logprob: -4.147008419036865
    3. '           ' → logprob: -5.397008419036865
    4. '               ' → logprob: -6.772008419036865
    5. '       ' → logprob: -8.897007942199707
    6. ' ' → logprob: -10.022007942199707
    7. 'v' → logprob: -10.397007942199707
    8. '   ' → logprob: -10.647007942199707
    9. ' v' → logprob: -11.397007942199707
    10. '
' → logprob: -12.272007942199707

Token 112: ' =' (ID: 314)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.5004896521568298
    2. ' +=' → logprob: -1.0004897117614746
    3. ' =' → logprob: -4.125489711761475
    4. '=' → logprob: -4.625489711761475
    5. '+' → logprob: -9.250489234924316
    6. ' ' → logprob: -11.875489234924316
    7. '   ' → logprob: -12.625489234924316
    8. ' +' → logprob: -13.000489234924316
    9. '+=(' → logprob: -13.500489234924316
    10. ' ^=' → logprob: -14.750489234924316

Token 113: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.38702115416526794
    2. '(s' → logprob: -1.1370211839675903
    3. '(' → logprob: -9.6370210647583
    4. '(v' → logprob: -9.7620210647583
    5. '   ' → logprob: -11.8870210647583
    6. ' ' → logprob: -12.0120210647583
    7. '(S' → logprob: -12.3870210647583
    8. '(x' → logprob: -13.1370210647583
    9. '(ans' → logprob: -13.3870210647583
    10. '  ' → logprob: -14.1370210647583

Token 114: 's' (ID: 82)
  Prédit: 's'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.011109007522463799
    2. ' s' → logprob: -4.511108875274658
    3. '(s' → logprob: -9.761109352111816
    4. ' (' → logprob: -12.761109352111816
    5. 'v' → logprob: -15.511109352111816
    6. '(' → logprob: -16.0111083984375
    7. ')s' → logprob: -16.2611083984375
    8. '   ' → logprob: -16.5111083984375
    9. '{s' → logprob: -16.8861083984375
    10. ')' → logprob: -16.8861083984375

Token 115: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.5773324966430664
    2. ' +' → logprob: -0.8273324966430664
    3. '+s' → logprob: -6.577332496643066
    4. ' ' → logprob: -15.452332496643066
    5. 's' → logprob: -15.827332496643066
    6. '＋' → logprob: -16.32733154296875
    7. ' s' → logprob: -17.07733154296875
    8. ' plus' → logprob: -17.20233154296875
    9. ' ' → logprob: -17.95233154296875
    10. '+n' → logprob: -18.32733154296875

Token 116: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.6931478381156921
    2. ' v' → logprob: -0.6931478381156921
    3. '	v' → logprob: -15.193147659301758
    4. ')v' → logprob: -15.443147659301758
    5. '(v' → logprob: -17.068147659301758
    6. ')' → logprob: -17.068147659301758
    7. ' ' → logprob: -17.443147659301758
    8. 's' → logprob: -17.443147659301758
    9. '_v' → logprob: -17.693147659301758
    10. '   ' → logprob: -17.693147659301758

Token 117: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0002622894535306841
    2. ' )' → logprob: -8.250262260437012
    3. ')%' → logprob: -14.000262260437012
    4. '   ' → logprob: -16.500263214111328
    5. ' ' → logprob: -18.000263214111328
    6. '       ' → logprob: -18.125263214111328
    7. '    ' → logprob: -18.250263214111328
    8. '）' → logprob: -18.500263214111328
    9. ')
' → logprob: -18.750263214111328
    10. ')&' → logprob: -18.875263214111328

Token 118: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.4742075800895691
    2. '%' → logprob: -0.9742075800895691
    3. ' &' → logprob: -9.724207878112793
    4. ')' → logprob: -10.224207878112793
    5. ' ' → logprob: -11.099207878112793
    6. '&' → logprob: -12.599207878112793
    7. ' ' → logprob: -13.224207878112793
    8. ' %#' → logprob: -13.224207878112793
    9. '
' → logprob: -13.349207878112793
    10. '%n' → logprob: -13.349207878112793

Token 119: ' MOD' (ID: 32868)
  Prédit: 'MOD'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'MOD' → logprob: -0.02324605919420719
    2. ' MOD' → logprob: -3.7732460498809814
    3. ' ' → logprob: -14.398245811462402
    4. ' (' → logprob: -17.27324676513672
    5. '_MOD' → logprob: -17.27324676513672
    6. '(' → logprob: -17.64824676513672
    7. '(M' → logprob: -17.89824676513672
    8. '   ' → logprob: -17.89824676513672
    9. '.MOD' → logprob: -19.27324676513672
    10. '```' → logprob: -19.89824676513672

Token 120: '

' (ID: 279)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.1748994141817093
    2. '<|end|>' → logprob: -2.2998993396759033
    3. '
' → logprob: -2.9248993396759033
    4. '        
' → logprob: -5.799899578094482
    5. ',' → logprob: -7.299899578094482
    6. '  
' → logprob: -7.674899578094482
    7. ' if' → logprob: -7.799899578094482
    8. '   ' → logprob: -8.424899101257324
    9. '```' → logprob: -8.424899101257324
    10. '' → logprob: -8.424899101257324

Token 121: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.18189549446105957
    2. '<|end|>' → logprob: -1.9318954944610596
    3. '
' → logprob: -4.0568952560424805
    4. ' if' → logprob: -6.3068952560424805
    5. '        
' → logprob: -7.5568952560424805
    6. '   ' → logprob: -7.9318952560424805
    7. 'if' → logprob: -8.05689525604248
    8. '<|end|>' → logprob: -8.30689525604248
    9. ',' → logprob: -8.55689525604248
    10. '```' → logprob: -8.93189525604248

Token 122: ' D' (ID: 415)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.02837151475250721
    2. '       ' → logprob: -3.653371572494507
    3. ' if' → logprob: -6.278371334075928
    4. '   ' → logprob: -9.403371810913086
    5. 'i' → logprob: -10.028371810913086
    6. 'print' → logprob: -10.528371810913086
    7. '```' → logprob: -10.778371810913086
    8. 'assert' → logprob: -12.403371810913086
    9. ' ' → logprob: -13.028371810913086
    10. '#' → logprob: -13.028371810913086

Token 123: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.18767225742340088
    2. 'if' → logprob: -2.0626721382141113
    3. '=' → logprob: -3.8126721382141113
    4. 'iff' → logprob: -4.812672138214111
    5. ' if' → logprob: -5.562672138214111
    6. '   ' → logprob: -6.187672138214111
    7. 'elta' → logprob: -6.562672138214111
    8. 'IFF' → logprob: -6.562672138214111
    9. 'I' → logprob: -6.687672138214111
    10. 'ifference' → logprob: -6.812672138214111

Token 124: ' s' (ID: 265)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.8900094628334045
    2. '(s' → logprob: -1.5150094032287598
    3. ' s' → logprob: -2.2650094032287598
    4. 'chk' → logprob: -2.2650094032287598
    5. ' chk' → logprob: -2.6400094032287598
    6. 's' → logprob: -2.6400094032287598
    7. '(ch' → logprob: -4.89000940322876
    8. '(' → logprob: -5.51500940322876
    9. 'abs' → logprob: -6.89000940322876
    10. ' ' → logprob: -7.14000940322876

Token 125: ' ^' (ID: 7602)
  Prédit: ' ^'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ^' → logprob: -0.04343153536319733
    2. '<|end|>' → logprob: -4.418431758880615
    3. ' %' → logprob: -5.043431758880615
    4. '^' → logprob: -5.168431758880615
    5. ' ' → logprob: -5.543431758880615
    6. '+' → logprob: -5.668431758880615
    7. ' -' → logprob: -5.668431758880615
    8. '%' → logprob: -5.918431758880615
    9. ' +' → logprob: -6.918431758880615
    10. '-' → logprob: -6.918431758880615

Token 126: ' chk' (ID: 63648)
  Prédit: 'chk'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'chk' → logprob: -0.005237668287009001
    2. ' chk' → logprob: -5.255237579345703
    3. 'ck' → logprob: -12.630237579345703
    4. '   ' → logprob: -15.130237579345703
    5. 'check' → logprob: -15.630237579345703
    6. ' ' → logprob: -16.005237579345703
    7. 'ch' → logprob: -17.255237579345703
    8. '.chk' → logprob: -17.630237579345703
    9. 'CHK' → logprob: -17.880237579345703
    10. '0' → logprob: -18.005237579345703

Token 127: ' ' (ID: 220)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.6771883964538574
    2. '<|end|>' → logprob: -0.8021883964538574
    3. '       ' → logprob: -3.1771883964538574
    4. ')' → logprob: -7.677188396453857
    5. '<|end|>' → logprob: -7.677188396453857
    6. '   ' → logprob: -8.302188873291016
    7. ' if' → logprob: -8.677188873291016
    8. '\n' → logprob: -9.177188873291016
    9. '        
' → logprob: -9.302188873291016
    10. ' 
' → logprob: -10.052188873291016

Token 128: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.187116801738739
    2. '
' → logprob: -2.187116861343384
    3. '<|end|>' → logprob: -3.687116861343384
    4. ' if' → logprob: -4.062116622924805
    5. ')' → logprob: -5.187116622924805
    6. 'if' → logprob: -5.437116622924805
    7. '   ' → logprob: -6.437116622924805
    8. '\n' → logprob: -6.812116622924805
    9. ')
' → logprob: -7.437116622924805
    10. '        
' → logprob: -7.812116622924805

Token 129: ' difference' (ID: 9809)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.9252817034721375
    2. ' ' → logprob: -0.9252817034721375
    3. ' if' → logprob: -2.1752817630767822
    4. ' s' → logprob: -2.9252817630767822
    5. ' True' → logprob: -4.675281524658203
    6. 'if' → logprob: -4.800281524658203
    7. ' continue' → logprob: -4.925281524658203
    8. ' (' → logprob: -5.300281524658203
    9. ' D' → logprob: -6.175281524658203
    10. '1' → logprob: -6.300281524658203

Token 130: ' between' (ID: 2870)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.616012692451477
    2. '<|end|>' → logprob: -1.366012692451477
    3. '       ' → logprob: -1.616012692451477
    4. '        
' → logprob: -6.3660125732421875
    5. '<|end|>' → logprob: -6.9910125732421875
    6. '\n' → logprob: -7.2410125732421875
    7. ' if' → logprob: -7.6160125732421875
    8. '
' → logprob: -7.7410125732421875
    9. ')' → logprob: -7.7410125732421875
    10. '=' → logprob: -8.116012573242188

Token 131: ' sum' (ID: 4215)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.37371841073036194
    2. 's' → logprob: -1.7487183809280396
    3. ' s' → logprob: -3.498718500137329
    4. 'checksum' → logprob: -3.623718500137329
    5. 'computed' → logprob: -3.873718500137329
    6. 'expected' → logprob: -4.37371826171875
    7. 'D' → logprob: -4.49871826171875
    8. ' D' → logprob: -5.12371826171875
    9. ' ' → logprob: -5.24871826171875
    10. ' checksum' → logprob: -5.37371826171875

Token 132: ' and' (ID: 326)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 133: ' checksum' (ID: 83063)
  Prédit: 'chk'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'chk' → logprob: -0.750094473361969
    2. 'checksum' → logprob: -0.875094473361969
    3. 'check' → logprob: -3.375094413757324
    4. '0' → logprob: -3.625094413757324
    5. ' checksum' → logprob: -3.750094413757324
    6. ' chk' → logprob: -4.625094413757324
    7. 'D' → logprob: -4.875094413757324
    8. ' check' → logprob: -6.250094413757324
    9. ' D' → logprob: -6.875094413757324
    10. 'expected' → logprob: -7.250094413757324

Token 134: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.3703627586364746
    2. '       ' → logprob: -1.4953627586364746
    3. '<|end|>' → logprob: -2.4953627586364746
    4. '        
' → logprob: -6.995362758636475
    5. ')' → logprob: -7.495362758636475
    6. ' if' → logprob: -8.120363235473633
    7. '\n' → logprob: -8.245363235473633
    8. '<|end|>' → logprob: -8.995363235473633
    9. '   ' → logprob: -9.120363235473633
    10. ')
' → logprob: -9.370363235473633

Token 135: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.6389466524124146
    2. '<|end|>' → logprob: -1.3889466524124146
    3. '   ' → logprob: -1.8889466524124146
    4. '
' → logprob: -2.888946533203125
    5. ')' → logprob: -5.263946533203125
    6. '\n' → logprob: -5.763946533203125
    7. ' if' → logprob: -6.263946533203125
    8. '        
' → logprob: -7.138946533203125
    9. '    
' → logprob: -7.388946533203125
    10. ':' → logprob: -7.388946533203125

Token 136: ' key' (ID: 2140)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.0059280856512486935
    2. 'print' → logprob: -5.255928039550781
    3. 'for' → logprob: -8.130928039550781
    4. '       ' → logprob: -8.380928039550781
    5. 'return' → logprob: -9.630928039550781
    6. ' if' → logprob: -9.880928039550781
    7. '   ' → logprob: -10.380928039550781
    8. 'i' → logprob: -11.505928039550781
    9. 'result' → logprob: -12.130928039550781
    10. 'correct' → logprob: -13.380928039550781

Token 137: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.20788729190826416
    2. 's' → logprob: -1.9578872919082642
    3. '=' → logprob: -3.3328871726989746
    4. '_' → logprob: -4.582887172698975
    5. '0' → logprob: -9.082887649536133
    6. '1' → logprob: -9.457887649536133
    7. '_len' → logprob: -9.957887649536133
    8. 'len' → logprob: -10.457887649536133
    9. '_=' → logprob: -10.457887649536133
    10. 'size' → logprob: -10.707887649536133

Token 138: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5997300148010254
    2. '0' → logprob: -0.9747300148010254
    3. ' D' → logprob: -3.8497300148010254
    4. 'D' → logprob: -4.599730014801025
    5. ' (' → logprob: -4.849730014801025
    6. ' s' → logprob: -5.099730014801025
    7. ' [' → logprob: -5.224730014801025
    8. '123' → logprob: -5.474730014801025
    9. 's' → logprob: -5.974730014801025
    10. '[' → logprob: -6.474730014801025

Token 139: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.1671188324689865
    2. '[' → logprob: -3.542118787765503
    3. 'D' → logprob: -3.917118787765503
    4. '123' → logprob: -4.042119026184082
    5. 's' → logprob: -4.167119026184082
    6. '[D' → logprob: -4.542119026184082
    7. '[s' → logprob: -4.542119026184082
    8. '(' → logprob: -4.917119026184082
    9. '(D' → logprob: -5.042119026184082
    10. '(s' → logprob: -5.167119026184082

Token 140: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 141: '       ' (ID: 309)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 142: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.2852964699268341
    2. ' for' → logprob: -1.4102964401245117
    3. '       ' → logprob: -5.535296440124512
    4. '   ' → logprob: -9.035296440124512
    5. ' key' → logprob: -10.785296440124512
    6. 'key' → logprob: -11.535296440124512
    7. '```' → logprob: -11.785296440124512
    8. '
' → logprob: -12.160296440124512
    9. 'i' → logprob: -12.410296440124512
    10. '<|end|>' → logprob: -12.660296440124512

Token 143: ' bit' (ID: 3546)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.2524617314338684
    2. ' v' → logprob: -1.6274616718292236
    3. ' i' → logprob: -4.502461910247803
    4. 'i' → logprob: -4.502461910247803
    5. 'x' → logprob: -7.002461910247803
    6. ' val' → logprob: -7.127461910247803
    7. 'val' → logprob: -7.627461910247803
    8. ' x' → logprob: -7.627461910247803
    9. 'k' → logprob: -7.627461910247803
    10. 'n' → logprob: -7.752461910247803

Token 144: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0027173799462616444
    2. 'in' → logprob: -6.2527174949646
    3. 's' → logprob: -7.8777174949646
    4. '_' → logprob: -8.752717018127441
    5. ' ' → logprob: -9.502717018127441
    6. '_idx' → logprob: -10.252717018127441
    7. '_index' → logprob: -10.377717018127441
    8. ' i' → logprob: -10.502717018127441
    9. '_i' → logprob: -10.877717018127441
    10. '_in' → logprob: -11.002717018127441

Token 145: ' range' (ID: 3352)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.7221664190292358
    2. ' range' → logprob: -1.0971664190292358
    3. 'range' → logprob: -2.5971665382385254
    4. ' N' → logprob: -2.9721665382385254
    5. 'bin' → logprob: -3.3471665382385254
    6. ' bin' → logprob: -4.472166538238525
    7. '[' → logprob: -5.472166538238525
    8. ' format' → logprob: -6.597166538238525
    9. 'format' → logprob: -7.347166538238525
    10. '[N' → logprob: -7.972166538238525

Token 146: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.020717879757285118
    2. '32' → logprob: -3.8957178592681885
    3. ' ' → logprob: -9.27071762084961
    4. ' (' → logprob: -9.77071762084961
    5. '31' → logprob: -11.02071762084961
    6. '33' → logprob: -12.52071762084961
    7. '8' → logprob: -13.14571762084961
    8. '64' → logprob: -14.77071762084961
    9. '   ' → logprob: -14.77071762084961
    10. '36' → logprob: -15.14571762084961

Token 147: '32' (ID: 1398)
  Prédit: '32'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '32' → logprob: -0.0026880137156695127
    2. '31' → logprob: -6.877687931060791
    3. '8' → logprob: -7.002687931060791
    4. ' ' → logprob: -7.752687931060791
    5. '33' → logprob: -8.37768840789795
    6. '64' → logprob: -10.25268840789795
    7. '4' → logprob: -12.12768840789795
    8. '29' → logprob: -12.12768840789795
    9. '16' → logprob: -12.12768840789795
    10. '36' → logprob: -12.25268840789795

Token 148: '):
' (ID: 1883)
  Prédit: '):
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.4741610288619995
    2. '):' → logprob: -0.9741610288619995
    3. '):
' → logprob: -10.349161148071289
    4. ' ):' → logprob: -10.724161148071289
    5. '   ' → logprob: -11.349161148071289
    6. ' ):
' → logprob: -11.974161148071289
    7. '       ' → logprob: -12.724161148071289
    8. ',' → logprob: -12.974161148071289
    9. '):

' → logprob: -13.099161148071289
    10. ':' → logprob: -13.849161148071289

Token 149: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.030129028484225273
    2. ' if' → logprob: -3.6551289558410645
    3. ' key' → logprob: -7.1551289558410645
    4. '       ' → logprob: -7.2801289558410645
    5. '   ' → logprob: -7.6551289558410645
    6. '```' → logprob: -7.9051289558410645
    7. 'if' → logprob: -8.280129432678223
    8. ',' → logprob: -8.655129432678223
    9. ' 
' → logprob: -8.780129432678223
    10. '            
' → logprob: -9.155129432678223

Token 150: ' bit' (ID: 3546)
  Prédit: ' key'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' key' → logprob: -0.4565110206604004
    2. ' if' → logprob: -1.2065110206604004
    3. 'if' → logprob: -3.5815110206604004
    4. 'key' → logprob: -3.5815110206604004
    5. ' bit' → logprob: -5.8315110206604
    6. ' for' → logprob: -6.0815110206604
    7. ' pass' → logprob: -6.4565110206604
    8. '   ' → logprob: -6.7065110206604
    9. ' mask' → logprob: -6.9565110206604
    10. '       ' → logprob: -7.0815110206604

Token 151: '_sum' (ID: 29859)
  Prédit: '_val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.3890117406845093
    2. ' =' → logprob: -2.514011859893799
    3. '=' → logprob: -2.764011859893799
    4. '_mask' → logprob: -2.889011859893799
    5. '_value' → logprob: -3.014011859893799
    6. '_' → logprob: -3.139011859893799
    7. 's' → logprob: -4.764011859893799
    8. '_bit' → logprob: -5.389011859893799
    9. ' <<=' → logprob: -5.514011859893799
    10. '_key' → logprob: -5.764011859893799

Token 152: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.04158153384923935
    2. '=' → logprob: -3.916581630706787
    3. ' ^=' → logprob: -4.541581630706787
    4. ' +=' → logprob: -4.791581630706787
    5. ' ' → logprob: -6.541581630706787
    6. '+=' → logprob: -9.041581153869629
    7. ' |=' → logprob: -9.166581153869629
    8. ' <<=' → logprob: -9.291581153869629
    9. ' ^' → logprob: -10.666581153869629
    10. ',' → logprob: -11.291581153869629

Token 153: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.012037218548357487
    2. ' ' → logprob: -4.63703727722168
    3. ' (' → logprob: -6.88703727722168
    4. '((' → logprob: -7.38703727722168
    5. '(' → logprob: -8.01203727722168
    6. ' ((' → logprob: -8.26203727722168
    7. '(((' → logprob: -11.01203727722168
    8. '           ' → logprob: -11.38703727722168
    9. '   ' → logprob: -11.88703727722168
    10. ' (((' → logprob: -12.38703727722168

Token 154: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.004071159288287163
    2. '((' → logprob: -6.004071235656738
    3. '(' → logprob: -6.504071235656738
    4. '(((' → logprob: -10.004071235656738
    5. ' ' → logprob: -11.004071235656738
    6. '(s' → logprob: -11.129071235656738
    7. ' (' → logprob: -12.379071235656738
    8. '(bit' → logprob: -12.629071235656738
    9. ' ((' → logprob: -12.879071235656738
    10. '1' → logprob: -12.879071235656738

Token 155: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.6522363424301147
    2. '<|end|>' → logprob: -0.7772363424301147
    3. ' for' → logprob: -5.527236461639404
    4. '       ' → logprob: -5.652236461639404
    5. '<|end|>' → logprob: -5.652236461639404
    6. ' ' → logprob: -6.027236461639404
    7. '
' → logprob: -6.902236461639404
    8. '               ' → logprob: -7.027236461639404
    9. ',' → logprob: -7.027236461639404
    10. '            ' → logprob: -7.777236461639404

Token 156: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.1059110164642334
    2. '<|end|>' → logprob: -2.7309110164642334
    3. ' for' → logprob: -4.2309112548828125
    4. '
' → logprob: -4.6059112548828125
    5. ' ' → logprob: -5.8559112548828125
    6. '       ' → logprob: -6.2309112548828125
    7. '<|end|>' → logprob: -6.6059112548828125
    8. 'for' → logprob: -6.9809112548828125
    9. ' 
' → logprob: -7.4809112548828125
    10. '            ' → logprob: -7.9809112548828125

Token 157: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.3132798373699188
    2. 'for' (adapté à ' for') → logprob: -1.3132798671722412
    3. '           ' → logprob: -11.93828010559082
    4. ' if' → logprob: -12.06328010559082
    5. 'if' → logprob: -13.31328010559082
    6. ' ' → logprob: -13.68828010559082
    7. '   ' → logprob: -14.43828010559082
    8. ' bit' → logprob: -14.56328010559082
    9. ')' → logprob: -14.93828010559082
    10. '            ' → logprob: -14.93828010559082

Token 158: ' v' (ID: 323)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -1.0875873565673828
    2. ' j' → logprob: -1.9625873565673828
    3. 'i' → logprob: -2.212587356567383
    4. 'v' → logprob: -2.337587356567383
    5. ' v' → logprob: -2.462587356567383
    6. 'j' → logprob: -3.087587356567383
    7. 'N' → logprob: -3.337587356567383
    8. ' n' → logprob: -3.462587356567383
    9. 'n' → logprob: -3.587587356567383
    10. ' N' → logprob: -3.712587356567383

Token 159: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.029934227466583252
    2. 'in' → logprob: -3.5299341678619385
    3. 's' → logprob: -9.02993392944336
    4. '[' → logprob: -11.40493392944336
    5. ' ' → logprob: -11.65493392944336
    6. 'n' → logprob: -11.90493392944336
    7. 'v' → logprob: -12.27993392944336
    8. '<|end|>' → logprob: -12.77993392944336
    9. '```' → logprob: -13.02993392944336
    10. 'd' → logprob: -13.15493392944336

Token 160: ' N' (ID: 478)
  Prédit: ' N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.10171087831258774
    2. 'N' → logprob: -2.351710796356201
    3. ' range' → logprob: -7.101710796356201
    4. '[N' → logprob: -7.976710796356201
    5. '[' → logprob: -9.10171127319336
    6. ' [' → logprob: -9.72671127319336
    7. 'range' → logprob: -9.72671127319336
    8. ' data' → logprob: -10.47671127319336
    9. ' ' → logprob: -10.60171127319336
    10. 'data' → logprob: -10.85171127319336

Token 161: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.03377213701605797
    2. ':
' → logprob: -3.4087722301483154
    3. ':

' → logprob: -9.783772468566895
    4. '[' → logprob: -10.283772468566895
    5. '):
' → logprob: -12.158772468566895
    6. '<|end|>' → logprob: -12.158772468566895
    7. '):' → logprob: -12.283772468566895
    8. '[:' → logprob: -12.408772468566895
    9. '[::-' → logprob: -12.658772468566895
    10. '           ' → logprob: -13.533772468566895

Token 162: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.07256204634904861
    2. ' if' → logprob: -2.6975619792938232
    3. '           ' → logprob: -7.072562217712402
    4. ',' → logprob: -8.072562217712402
    5. '```' → logprob: -8.072562217712402
    6. ' ' → logprob: -8.447562217712402
    7. 'if' → logprob: -9.197562217712402
    8. ' v' → logprob: -9.322562217712402
    9. '                ' → logprob: -9.447562217712402
    10. '            ' → logprob: -9.572562217712402

Token 163: ' bit' (ID: 3546)
  Prédit: ' bit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' bit' → logprob: -0.0651664063334465
    2. 'bit' (adapté à ' bit') → logprob: -3.315166473388672
    3. '               ' → logprob: -3.815166473388672
    4. ' if' → logprob: -5.690166473388672
    5. '           ' → logprob: -7.065166473388672
    6. '   ' → logprob: -8.565166473388672
    7. 'if' → logprob: -8.940166473388672
    8. '                   ' → logprob: -10.315166473388672
    9. '(bit' → logprob: -10.440166473388672
    10. '       ' → logprob: -10.690166473388672

Token 164: '_sum' (ID: 29859)
  Prédit: ' <<='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <<=' → logprob: -1.7345713376998901
    2. '&' → logprob: -1.8595713376998901
    3. ' &' → logprob: -1.8595713376998901
    4. ' =' → logprob: -1.9845713376998901
    5. ' &=' → logprob: -2.4845714569091797
    6. '=' → logprob: -2.6095714569091797
    7. '>>' → logprob: -2.6095714569091797
    8. '_sum' → logprob: -3.2345714569091797
    9. ' >>=' → logprob: -3.2345714569091797
    10. ' ^=' → logprob: -3.8595714569091797

Token 165: ' ^=' (ID: 79665)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.7944992780685425
    2. ' ^=' → logprob: -1.2944992780685425
    3. ' +=' → logprob: -1.5444992780685425
    4. ' |=' → logprob: -3.794499397277832
    5. '=' → logprob: -4.044499397277832
    6. '|' → logprob: -4.544499397277832
    7. ' =' → logprob: -5.544499397277832
    8. '^' → logprob: -5.669499397277832
    9. '>>' → logprob: -6.294499397277832
    10. ' ' → logprob: -7.919499397277832

Token 166: ' (' (ID: 350)
  Prédit: '(('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '((' → logprob: -0.6280248761177063
    2. ' ((' → logprob: -1.0030248165130615
    3. ' (' → logprob: -2.6280248165130615
    4. '(v' → logprob: -3.6280248165130615
    5. '(' → logprob: -7.503025054931641
    6. '(bit' → logprob: -9.12802505493164
    7. '(((' → logprob: -10.37802505493164
    8. ' ' → logprob: -10.62802505493164
    9. '1' → logprob: -11.00302505493164
    10. ' (((' → logprob: -11.62802505493164

Token 167: 'v' (ID: 85)
  Prédit: '(v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(v' → logprob: -0.04493885859847069
    2. ' (' → logprob: -3.294938802719116
    3. '((' → logprob: -5.044939041137695
    4. 'v' → logprob: -8.544939041137695
    5. ' ((' → logprob: -9.044939041137695
    6. '(' → logprob: -10.044939041137695
    7. '(key' → logprob: -10.419939041137695
    8. '(bit' → logprob: -11.294939041137695
    9. '1' → logprob: -11.419939041137695
    10. ' v' → logprob: -12.294939041137695

Token 168: ' >>' (ID: 6832)
  Prédit: '>>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>>' → logprob: -0.22560174763202667
    2. ' >>' → logprob: -1.6006017923355103
    3. ' &' → logprob: -9.225602149963379
    4. '&' → logprob: -10.600602149963379
    5. ' ' → logprob: -10.850602149963379
    6. '>>>' → logprob: -11.225602149963379
    7. '>' → logprob: -11.600602149963379
    8. '>>(' → logprob: -11.600602149963379
    9. ')' → logprob: -12.725602149963379
    10. '&gt' → logprob: -12.975602149963379

Token 169: ' bit' (ID: 3546)
  Prédit: 'bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bit' → logprob: -0.0002615742268972099
    2. ' bit' → logprob: -8.250261306762695
    3. '(bit' → logprob: -15.625261306762695
    4. '   ' → logprob: -17.750261306762695
    5. '```' → logprob: -17.750261306762695
    6. 'bitr' → logprob: -18.000261306762695
    7. ' ' → logprob: -18.500261306762695
    8. 'bits' → logprob: -18.625261306762695
    9. '1' → logprob: -19.750261306762695
    10. '_bit' → logprob: -20.250261306762695

Token 170: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0062414840795099735
    2. ')&' → logprob: -5.631241321563721
    3. '1' → logprob: -6.006241321563721
    4. '&' → logprob: -9.006241798400879
    5. ' )' → logprob: -10.256241798400879
    6. ' &' → logprob: -12.506241798400879
    7. '0' → logprob: -12.631241798400879
    8. '```' → logprob: -13.006241798400879
    9. '           ' → logprob: -13.131241798400879
    10. '")' → logprob: -13.256241798400879

Token 171: ' &' (ID: 827)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.4344930052757263
    2. '&' → logprob: -1.184493064880371
    3. ' ' → logprob: -3.809493064880371
    4. ' &' → logprob: -3.809493064880371
    5. '               ' → logprob: -6.559493064880371
    6. ')&' → logprob: -7.809493064880371
    7. '           ' → logprob: -9.059493064880371
    8. '&amp' → logprob: -9.184493064880371
    9. '0' → logprob: -9.559493064880371
    10. '                   ' → logprob: -10.559493064880371

Token 172: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0028052295092493296
    2. ' ' → logprob: -5.877805233001709
    3. '   ' → logprob: -15.62780475616455
    4. '0' → logprob: -16.377805709838867
    5. '(' → logprob: -17.502805709838867
    6. '
' → logprob: -17.627805709838867
    7. ' ' → logprob: -17.752805709838867
    8. '  ' → logprob: -18.127805709838867
    9. '```' → logprob: -18.252805709838867
    10. '`' → logprob: -18.252805709838867

Token 173: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.9146995327901095e-05
    2. ' ' → logprob: -10.875019073486328
    3. '0' → logprob: -16.250019073486328
    4. '(' → logprob: -18.625019073486328
    5. '   ' → logprob: -18.875019073486328
    6. '
' → logprob: -19.125019073486328
    7. '

' → logprob: -19.250019073486328
    8. '255' → logprob: -19.375019073486328
    9. '01' → logprob: -19.500019073486328
    10. '127' → logprob: -20.000019073486328

Token 174: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.04746822640299797
    2. '
' → logprob: -4.172468185424805
    3. '<|end|>' → logprob: -4.547468185424805
    4. '            
' → logprob: -5.047468185424805
    5. ' 
' → logprob: -5.422468185424805
    6. '       ' → logprob: -6.297468185424805
    7. ' ' → logprob: -6.422468185424805
    8. '0' → logprob: -6.547468185424805
    9. '               ' → logprob: -6.922468185424805
    10. '  
' → logprob: -7.172468185424805

Token 175: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.007106290198862553
    2. '<|end|>' → logprob: -6.507106304168701
    3. ' 
' → logprob: -6.882106304168701
    4. '       ' → logprob: -6.882106304168701
    5. ' ' → logprob: -7.007106304168701
    6. '            
' → logprob: -7.257106304168701
    7. '
' → logprob: -7.507106304168701
    8. '0' → logprob: -8.382105827331543
    9. '               ' → logprob: -8.507105827331543
    10. '  
' → logprob: -8.507105827331543

Token 176: ' bit' (ID: 3546)
  Prédit: ' key'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' key' → logprob: -0.5013403296470642
    2. ' if' → logprob: -1.376340389251709
    3. 'key' → logprob: -2.751340389251709
    4. 'if' → logprob: -3.001340389251709
    5. '       ' → logprob: -4.501340389251709
    6. '           ' → logprob: -5.126340389251709
    7. ' bit' → logprob: -5.126340389251709
    8. ' for' → logprob: -6.626340389251709
    9. ' D' → logprob: -7.126340389251709
    10. 'bit' (adapté à ' bit') → logprob: -7.376340389251709

Token 177: '_chk' (ID: 164238)
  Prédit: '_sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.10693999379873276
    2. '_s' → logprob: -2.4819400310516357
    3. '_' → logprob: -4.481939792633057
    4. ' ^=' → logprob: -6.481939792633057
    5. 's' → logprob: -6.856939792633057
    6. 'sum' → logprob: -6.981939792633057
    7. '_val' → logprob: -7.231939792633057
    8. '_value' → logprob: -7.731939792633057
    9. '=' → logprob: -7.731939792633057
    10. '_diff' → logprob: -8.731940269470215

Token 178: ' =' (ID: 314)
  Prédit: ' ^='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ^=' → logprob: -0.015276479534804821
    2. ' =' → logprob: -4.6402764320373535
    3. '=' → logprob: -5.6402764320373535
    4. ' ^' → logprob: -6.8902764320373535
    5. '^' → logprob: -7.5152764320373535
    6. ' ' → logprob: -8.140276908874512
    7. ' |=' → logprob: -10.890276908874512
    8. '_' → logprob: -11.140276908874512
    9. ' <<=' → logprob: -11.265276908874512
    10. 's' → logprob: -11.265276908874512

Token 179: ' (' (ID: 350)
  Prédit: '(D'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(D' → logprob: -0.13629822432994843
    2. ' (' → logprob: -2.136298179626465
    3. '(ch' → logprob: -4.886298179626465
    4. '(' → logprob: -6.886298179626465
    5. '(d' → logprob: -7.761298179626465
    6. '(bit' → logprob: -8.636298179626465
    7. '(check' → logprob: -10.136298179626465
    8. '(s' → logprob: -10.511298179626465
    9. '(v' → logprob: -11.136298179626465
    10. '((' → logprob: -11.386298179626465

Token 180: 'chk' (ID: 63607)
  Prédit: 'chk'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'chk' → logprob: -0.08089490979909897
    2. 'D' → logprob: -3.205894947052002
    3. ' chk' → logprob: -3.330894947052002
    4. ' D' → logprob: -6.830894947052002
    5. 's' → logprob: -8.455894470214844
    6. ' s' → logprob: -10.705894470214844
    7. 'Chk' → logprob: -10.830894470214844
    8. '_chk' → logprob: -11.080894470214844
    9. 'CHK' → logprob: -11.205894470214844
    10. ' (' → logprob: -11.580894470214844

Token 181: ' >>' (ID: 6832)
  Prédit: '>>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>>' → logprob: -0.01815767213702202
    2. ' >>' → logprob: -4.018157482147217
    3. '>' → logprob: -12.268157958984375
    4. ')' → logprob: -13.893157958984375
    5. '>>>' → logprob: -14.143157958984375
    6. ' ' → logprob: -14.268157958984375
    7. ' ' → logprob: -15.393157958984375
    8. ')>>' → logprob: -15.893157958984375
    9. '>>(' → logprob: -16.268157958984375
    10. '>>)' → logprob: -16.768157958984375

Token 182: ' bit' (ID: 3546)
  Prédit: 'bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bit' → logprob: -0.0015023599844425917
    2. ' bit' → logprob: -6.501502513885498
    3. '(bit' → logprob: -17.376502990722656
    4. 'bitr' → logprob: -18.501502990722656
    5. 'bits' → logprob: -19.126502990722656
    6. ' ' → logprob: -19.626502990722656
    7. '31' → logprob: -20.001502990722656
    8. '32' → logprob: -20.501502990722656
    9. '_bit' → logprob: -20.626502990722656
    10. '.bit' → logprob: -21.251502990722656

Token 183: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00011856284982059151
    2. ' )' → logprob: -9.750118255615234
    3. ')&' → logprob: -9.875118255615234
    4. '       ' → logprob: -12.125118255615234
    5. '1' → logprob: -13.500118255615234
    6. '           ' → logprob: -14.375118255615234
    7. '        ' → logprob: -15.000118255615234
    8. '0' → logprob: -15.375118255615234
    9. '&' → logprob: -15.750118255615234
    10. '```' → logprob: -16.000118255615234

Token 184: ' &' (ID: 827)
  Prédit: '&'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '&' → logprob: -0.25854337215423584
    2. ' &' → logprob: -1.5085433721542358
    3. ')&' → logprob: -5.133543491363525
    4. ')' → logprob: -7.508543491363525
    5. '1' → logprob: -9.258543014526367
    6. '           ' → logprob: -10.633543014526367
    7. '&amp' → logprob: -10.883543014526367
    8. '       ' → logprob: -13.508543014526367
    9. '&)' → logprob: -13.508543014526367
    10. ' ' → logprob: -13.508543014526367

Token 185: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.054882846772670746
    2. ' ' → logprob: -2.929882764816284
    3. '   ' → logprob: -14.929883003234863
    4. '```' → logprob: -16.179882049560547
    5. '
' → logprob: -16.804882049560547
    6. '  ' → logprob: -17.304882049560547
    7. ' ' → logprob: -17.304882049560547
    8. '0' → logprob: -17.992382049560547
    9. '`' → logprob: -18.304882049560547
    10. '' → logprob: -18.679882049560547

Token 186: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.318681188422488e-05
    2. ' ' → logprob: -11.25001335144043
    3. '```' → logprob: -16.37501335144043
    4. '   ' → logprob: -18.50001335144043
    5. '`' → logprob: -18.75001335144043
    6. '' → logprob: -18.75001335144043
    7. '0' → logprob: -18.87501335144043
    8. '01' → logprob: -19.37501335144043
    9. '``' → logprob: -19.87501335144043
    10. '
' → logprob: -19.93751335144043

Token 187: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.5613723993301392
    2. '
' → logprob: -0.9363723993301392
    3. '<|end|>' → logprob: -3.9363722801208496
    4. '       ' → logprob: -5.43637228012085
    5. ' if' → logprob: -5.56137228012085
    6. ' 
' → logprob: -5.56137228012085
    7. ')' → logprob: -6.06137228012085
    8. '            
' → logprob: -6.81137228012085
    9. ' ' → logprob: -7.93637228012085
    10. '
' → logprob: -8.061372756958008

Token 188: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.7070252299308777
    2. '<|end|>' → logprob: -1.4570252895355225
    3. '
' → logprob: -1.9570252895355225
    4. ' 
' → logprob: -2.9570252895355225
    5. '            
' → logprob: -4.207025051116943
    6. '       ' → logprob: -4.207025051116943
    7. ' bit' → logprob: -4.332025051116943
    8. ')' → logprob: -4.832025051116943
    9. ' ' → logprob: -4.957025051116943
    10. ' if' → logprob: -5.332025051116943

Token 189: ' #' (ID: 1069)
  Prédit: ' key'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' key' → logprob: -0.6598599553108215
    2. ' if' → logprob: -1.4098598957061768
    3. 'key' → logprob: -1.7848598957061768
    4. 'if' → logprob: -3.1598598957061768
    5. 'D' → logprob: -4.534860134124756
    6. '           ' → logprob: -5.284860134124756
    7. ' bit' → logprob: -5.784860134124756
    8. 'd' → logprob: -6.034860134124756
    9. ' for' → logprob: -6.159860134124756
    10. ' D' → logprob: -6.784860134124756

Token 190: ' We' (ID: 1416)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.8570339679718018
    2. ' if' → logprob: -1.3570339679718018
    3. ' key' → logprob: -1.9820339679718018
    4. 'key' → logprob: -2.1070339679718018
    5. 'expected' → logprob: -4.982033729553223
    6. ' bit' → logprob: -5.232033729553223
    7. ' expected' → logprob: -5.357033729553223
    8. 'desired' → logprob: -5.482033729553223
    9. 'bit' → logprob: -5.607033729553223
    10. '#' → logprob: -5.732033729553223

Token 191: ' want' (ID: 1682)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -1.5860605239868164
    2. ' =' → logprob: -1.8360605239868164
    3. ' need' → logprob: -1.9610605239868164
    4. 'if' → logprob: -2.0860605239868164
    5. ' continue' → logprob: -2.8360605239868164
    6. 'continue' → logprob: -2.8360605239868164
    7. '       ' → logprob: -3.0860605239868164
    8. '           ' → logprob: -3.3360605239868164
    9. 'need' → logprob: -3.5860605239868164
    10. 're' → logprob: -3.8360605239868164

Token 192: ' to' (ID: 316)
  Prédit: ' bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' bit' → logprob: -0.8826836347579956
    2. ' to' → logprob: -1.2576836347579956
    3. ' key' → logprob: -1.2576836347579956
    4. 'key' → logprob: -5.007683753967285
    5. 'bit' → logprob: -5.257683753967285
    6. 'to' → logprob: -6.007683753967285
    7. ' (' → logprob: -6.132683753967285
    8. '(bit' → logprob: -8.007683753967285
    9. ' ' → logprob: -8.257683753967285
    10. '           ' → logprob: -8.757683753967285

Token 193: ' find' (ID: 1646)
  Prédit: ' find'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' find' → logprob: -0.5736017227172852
    2. 'find' → logprob: -0.9486017227172852
    3. 'solve' → logprob: -4.698601722717285
    4. 'det' → logprob: -4.823601722717285
    5. ' set' → logprob: -4.948601722717285
    6. 'set' → logprob: -5.073601722717285
    7. ' reconstruct' → logprob: -5.698601722717285
    8. ' determine' → logprob: -5.823601722717285
    9. 'recover' → logprob: -6.448601722717285
    10. 'correct' → logprob: -6.573601722717285

Token 194: ' k' (ID: 372)
  Prédit: ' key'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' key' → logprob: -0.21369172632694244
    2. ' the' → logprob: -2.3386917114257812
    3. ' bit' → logprob: -2.9636917114257812
    4. 'key' → logprob: -3.4636917114257812
    5. 'the' → logprob: -5.588691711425781
    6. ' a' → logprob: -5.838691711425781
    7. 'bit' → logprob: -6.463691711425781
    8. ' (' → logprob: -6.588691711425781
    9. '(key' → logprob: -6.963691711425781
    10. ' if' → logprob: -7.088691711425781

Token 195: '_bit' (ID: 39574)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.49304741621017456
    2. ' bit' → logprob: -1.8680474758148193
    3. '=' → logprob: -2.8680474758148193
    4. 'e' → logprob: -3.1180474758148193
    5. 'bit' → logprob: -3.3680474758148193
    6. '_bit' → logprob: -3.3680474758148193
    7. 'ey' → logprob: -3.7430474758148193
    8. ' ' → logprob: -4.99304723739624
    9. ' ^=' → logprob: -5.24304723739624
    10. 's' → logprob: -5.74304723739624

Token 196: ' such' (ID: 2238)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.11634593456983566
    2. ' ' → logprob: -3.2413458824157715
    3. '<|end|>' → logprob: -3.2413458824157715
    4. 's' → logprob: -4.2413458824157715
    5. ' ^=' → logprob: -5.3663458824157715
    6. '=' → logprob: -5.8663458824157715
    7. '           ' → logprob: -6.1163458824157715
    8. ' s' → logprob: -6.9913458824157715
    9. ' bit' → logprob: -7.1163458824157715
    10. ',' → logprob: -7.2413458824157715

Token 197: ' that' (ID: 484)
  Prédit: ' that'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' that' → logprob: -0.649488091468811
    2. 'that' → logprob: -0.774488091468811
    3. '_that' → logprob: -4.1494879722595215
    4. '#' → logprob: -9.02448844909668
    5. 'hat' → logprob: -9.27448844909668
    6. '           ' → logprob: -9.39948844909668
    7. '	that' → logprob: -9.39948844909668
    8. '=' → logprob: -9.77448844909668
    9. 'That' → logprob: -9.77448844909668
    10. '```' → logprob: -10.02448844909668

Token 198: ':
' (ID: 734)
  Prédit: ' bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' bit' → logprob: -0.7495293021202087
    2. ' k' → logprob: -0.8745293021202087
    3. 'k' → logprob: -3.2495293617248535
    4. ' (' → logprob: -3.3745293617248535
    5. 'bit' → logprob: -3.9995293617248535
    6. '(bit' → logprob: -4.4995293617248535
    7. '(k' → logprob: -5.7495293617248535
    8. ' key' → logprob: -5.8745293617248535
    9. '(' → logprob: -6.8745293617248535
    10. 'key' → logprob: -8.124528884887695

Token 199: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.335403710603714
    2. ' k' → logprob: -1.8354036808013916
    3. ' bit' → logprob: -2.4604036808013916
    4. ' (' → logprob: -3.5854036808013916
    5. ' key' → logprob: -6.335403919219971
    6. '```' → logprob: -6.585403919219971
    7. '(bit' → logprob: -6.585403919219971
    8. ' if' → logprob: -6.710403919219971
    9. ' ' → logprob: -6.835403919219971
    10. 'bit' → logprob: -7.210403919219971

Token 200: ' #' (ID: 1069)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.21431875228881836
    2. ' bit' → logprob: -2.2143187522888184
    3. ' (' → logprob: -3.4643187522888184
    4. 'k' → logprob: -4.089318752288818
    5. '           ' → logprob: -4.339318752288818
    6. ' key' → logprob: -4.589318752288818
    7. 'bit' → logprob: -5.089318752288818
    8. '(bit' → logprob: -6.839318752288818
    9. 'key' → logprob: -6.964318752288818
    10. '(' → logprob: -7.214318752288818

Token 201: ' XOR' (ID: 147209)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.3050995171070099
    2. ' k' → logprob: -1.4300994873046875
    3. '(k' → logprob: -4.9300994873046875
    4. ' bit' → logprob: -5.4300994873046875
    5. 'bit' → logprob: -5.5550994873046875
    6. ' (' → logprob: -5.5550994873046875
    7. '(bit' → logprob: -6.5550994873046875
    8. 'key' → logprob: -7.3050994873046875
    9. '```' → logprob: -7.3050994873046875
    10. ' key' → logprob: -7.5550994873046875

Token 202: ' over' (ID: 1072)
  Prédit: ' of'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' of' → logprob: -0.8817254900932312
    2. ' k' → logprob: -1.381725549697876
    3. ' =' → logprob: -1.631725549697876
    4. ' (' → logprob: -3.006725549697876
    5. ' bit' → logprob: -3.631725549697876
    6. ' with' → logprob: -4.256725311279297
    7. '=' → logprob: -4.381725311279297
    8. ' ^=' → logprob: -4.881725311279297
    9. 's' → logprob: -5.506725311279297
    10. ' s' → logprob: -5.756725311279297

Token 203: ' i' (ID: 575)
  Prédit: ' all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' all' → logprob: -0.7318007349967957
    2. 'all' → logprob: -1.8568007946014404
    3. '((' → logprob: -2.8568007946014404
    4. ' (' → logprob: -2.9818007946014404
    5. '(N' → logprob: -3.1068007946014404
    6. '(k' → logprob: -3.1068007946014404
    7. '(v' → logprob: -3.3568007946014404
    8. 'N' → logprob: -3.3568007946014404
    9. ' k' → logprob: -4.106800556182861
    10. ' N' → logprob: -4.106800556182861

Token 204: '=' (ID: 28)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.8175991773605347
    2. 'in' → logprob: -1.4425991773605347
    3. ' of' → logprob: -2.442599296569824
    4. 'of' → logprob: -2.567599296569824
    5. 'for' → logprob: -3.317599296569824
    6. '(N' → logprob: -4.067599296569824
    7. ' (' → logprob: -4.442599296569824
    8. '=' → logprob: -4.817599296569824
    9. '(range' → logprob: -4.817599296569824
    10. '(v' → logprob: -4.817599296569824

Token 205: '1' (ID: 16)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.6696798205375671
    2. ' range' → logprob: -1.044679880142212
    3. '0' → logprob: -2.919679880142212
    4. '8' → logprob: -3.044679880142212
    5. ' ' → logprob: -4.419679641723633
    6. '[' → logprob: -4.669679641723633
    7. 'i' → logprob: -5.669679641723633
    8. 'N' → logprob: -5.794679641723633
    9. 's' → logprob: -6.169679641723633
    10. '(' → logprob: -7.044679641723633

Token 206: '..' (ID: 485)
  Prédit: 'to'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'to' → logprob: -0.16069696843624115
    2. ' to' → logprob: -1.9106969833374023
    3. '8' → logprob: -8.785696983337402
    4. '```' → logprob: -9.910696983337402
    5. '^' → logprob: -10.035696983337402
    6. '0' → logprob: -10.160696983337402
    7. 'for' → logprob: -10.660696983337402
    8. '
' → logprob: -10.660696983337402
    9. '<|end|>' → logprob: -10.660696983337402
    10. ' ' → logprob: -10.910696983337402

Token 207: '8' (ID: 23)
  Prédit: '8'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '8' → logprob: -0.0006629953859373927
    2. ' ' → logprob: -8.375662803649902
    3. '32' → logprob: -8.375662803649902
    4. '9' → logprob: -9.375662803649902
    5. 'n' → logprob: -9.750662803649902
    6. 'i' → logprob: -11.375662803649902
    7. 'N' → logprob: -11.875662803649902
    8. '7' → logprob: -12.313162803649902
    9. 'len' → logprob: -12.563162803649902
    10. '```' → logprob: -12.813162803649902

Token 208: ' of' (ID: 328)
  Prédit: ' of'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' of' → logprob: -0.2988050878047943
    2. ' (' → logprob: -1.9238051176071167
    3. '           ' → logprob: -4.048805236816406
    4. ' k' → logprob: -4.048805236816406
    5. ' for' → logprob: -4.173805236816406
    6. '(bit' → logprob: -4.298805236816406
    7. ' i' → logprob: -4.923805236816406
    8. 'of' → logprob: -5.173805236816406
    9. '(k' → logprob: -5.173805236816406
    10. '(v' → logprob: -5.923805236816406

Token 209: ' (' (ID: 350)
  Prédit: '(('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '((' → logprob: -0.669556200504303
    2. '(((' → logprob: -1.7945561408996582
    3. ' ((' → logprob: -1.9195561408996582
    4. '(k' → logprob: -2.294556140899658
    5. ' (' → logprob: -3.419556140899658
    6. ' (((' → logprob: -4.044556140899658
    7. '(' → logprob: -4.544556140899658
    8. '(v' → logprob: -5.169556140899658
    9. '(N' → logprob: -5.669556140899658
    10. 'k' → logprob: -6.294556140899658

Token 210: 'N' (ID: 45)
  Prédit: '(('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '((' → logprob: -0.3685723543167114
    2. '(N' → logprob: -1.9935723543167114
    3. '(k' → logprob: -2.743572235107422
    4. ' (' → logprob: -3.118572235107422
    5. ' ((' → logprob: -3.493572235107422
    6. '(v' → logprob: -4.118572235107422
    7. '(((' → logprob: -5.118572235107422
    8. 'k' → logprob: -5.618572235107422
    9. '(' → logprob: -5.618572235107422
    10. '(n' → logprob: -6.618572235107422

Token 211: '_i' (ID: 10853)
  Prédit: '[i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.00038145645521581173
    2. 'i' → logprob: -8.125381469726562
    3. '[' → logprob: -9.625381469726562
    4. ')' → logprob: -12.500381469726562
    5. '```' → logprob: -12.875381469726562
    6. ' i' → logprob: -13.000381469726562
    7. ')[' → logprob: -13.125381469726562
    8. 'bit' → logprob: -13.500381469726562
    9. '_i' → logprob: -13.750381469726562
    10. '
' → logprob: -14.375381469726562

Token 212: '^{' (ID: 42923)
  Prédit: ' >>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' >>' → logprob: -0.6973950862884521
    2. '>>' → logprob: -0.8223950862884521
    3. ' ^' → logprob: -3.572395086288452
    4. '[' → logprob: -4.447395324707031
    5. ' &' → logprob: -5.322395324707031
    6. '+' → logprob: -5.822395324707031
    7. '^' → logprob: -5.822395324707031
    8. ' ' → logprob: -6.072395324707031
    9. '>>>' → logprob: -6.322395324707031
    10. '```' → logprob: -6.697395324707031

Token 213: 'bit' (ID: 6516)
  Prédit: 'bit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bit' → logprob: -0.003970828372985125
    2. 'i' → logprob: -6.378970623016357
    3. ' bit' → logprob: -6.753970623016357
    4. '(bit' → logprob: -7.628970623016357
    5. 'b' → logprob: -9.003971099853516
    6. '[' → logprob: -9.003971099853516
    7. 'k' → logprob: -9.253971099853516
    8. ' ' → logprob: -9.878971099853516
    9. '```' → logprob: -9.878971099853516
    10. '   ' → logprob: -10.878971099853516

Token 214: '}' (ID: 92)
  Prédit: '}'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '}' → logprob: -0.6665700674057007
    2. ' ^' → logprob: -0.7915700674057007
    3. '^' → logprob: -5.16657018661499
    4. ' ' → logprob: -5.29157018661499
    5. 'bit' → logprob: -5.41657018661499
    6. ' }' → logprob: -5.41657018661499
    7. ' bit' → logprob: -6.16657018661499
    8. '>>' → logprob: -6.79157018661499
    9. '_bit' → logprob: -6.79157018661499
    10. '```' → logprob: -6.79157018661499

Token 215: ' xor' (ID: 106402)
  Prédit: ' ^'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ^' → logprob: -0.014695657417178154
    2. '^' → logprob: -4.639695644378662
    3. ' ' → logprob: -5.514695644378662
    4. ')' → logprob: -7.889695644378662
    5. ' xor' → logprob: -9.26469612121582
    6. ' +' → logprob: -9.51469612121582
    7. ' ^
' → logprob: -9.76469612121582
    8. '+' → logprob: -10.01469612121582
    9. ' ^=' → logprob: -10.26469612121582
    10. '^(' → logprob: -10.26469612121582

Token 216: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.42899489402770996
    2. ' k' → logprob: -1.05399489402771
    3. '(k' → logprob: -9.678995132446289
    4. ' (' → logprob: -9.803995132446289
    5. ' key' → logprob: -9.928995132446289
    6. 'key' → logprob: -10.303995132446289
    7. ')' → logprob: -10.303995132446289
    8. ' ' → logprob: -10.678995132446289
    9. '```' → logprob: -11.428995132446289
    10. '(' → logprob: -11.428995132446289

Token 217: '_bit' (ID: 39574)
  Prédit: '_bit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_bit' → logprob: -0.00013917774776928127
    2. '_bits' → logprob: -9.250139236450195
    3. 'bit' → logprob: -11.250139236450195
    4. '_i' → logprob: -11.625139236450195
    5. '_' → logprob: -12.000139236450195
    6. ' bit' → logprob: -12.125139236450195
    7. ')_' → logprob: -12.875139236450195
    8. '_BIT' → logprob: -12.875139236450195
    9. '-bit' → logprob: -13.375139236450195
    10. ')' → logprob: -14.125139236450195

Token 218: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.002292875200510025
    2. ' )' → logprob: -6.252293109893799
    3. '))' → logprob: -8.87729263305664
    4. ')==' → logprob: -9.25229263305664
    5. '=' → logprob: -10.50229263305664
    6. ')=' → logprob: -10.75229263305664
    7. ')
' → logprob: -11.25229263305664
    8. '   ' → logprob: -11.25229263305664
    9. ')^' → logprob: -11.62729263305664
    10. '')' → logprob: -12.12729263305664

Token 219: ' ==' (ID: 951)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.25678563117980957
    2. '=' → logprob: -1.6317856311798096
    3. ')' → logprob: -4.3817853927612305
    4. ' ' → logprob: -5.7567853927612305
    5. '
' → logprob: -6.0067853927612305
    6. '           ' → logprob: -6.2567853927612305
    7. ' 
' → logprob: -6.2567853927612305
    8. '<|end|>' → logprob: -6.2567853927612305
    9. ' ^=' → logprob: -6.3817853927612305
    10. ' ==' → logprob: -6.5067853927612305

Token 220: ' chk' (ID: 63648)
  Prédit: ' bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' bit' → logprob: -0.5786714553833008
    2. 'bit' → logprob: -0.8286714553833008
    3. '(bit' → logprob: -6.578671455383301
    4. '0' → logprob: -6.703671455383301
    5. ' (' → logprob: -9.8286714553833
    6. ' ' → logprob: -9.9536714553833
    7. '1' → logprob: -12.5786714553833
    8. '(' → logprob: -13.7036714553833
    9. '   ' → logprob: -14.0786714553833
    10. '```' → logprob: -14.2036714553833

Token 221: '^{' (ID: 42923)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.3452555239200592
    2. '
' → logprob: -1.5952554941177368
    3. ' ^' → logprob: -3.5952556133270264
    4. ' ' → logprob: -4.220255374908447
    5. '       ' → logprob: -4.595255374908447
    6. ' 
' → logprob: -4.845255374908447
    7. '<|end|>' → logprob: -4.845255374908447
    8. ' bit' → logprob: -5.220255374908447
    9. ')' → logprob: -6.095255374908447
    10. ' =' → logprob: -6.470255374908447

Token 222: 'bit' (ID: 6516)
  Prédit: 'bit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bit' → logprob: -0.16079451143741608
    2. ' bit' → logprob: -1.9107944965362549
    3. '_bit' → logprob: -7.660794734954834
    4. '(bit' → logprob: -9.535794258117676
    5. '1' → logprob: -11.535794258117676
    6. ')' → logprob: -12.285794258117676
    7. ' ' → logprob: -12.410794258117676
    8. 'b' → logprob: -13.910794258117676
    9. 'Bit' → logprob: -14.035794258117676
    10. 'bits' → logprob: -14.035794258117676

Token 223: '}
' (ID: 739)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.027463097125291824
    2. ' )' → logprob: -4.402462959289551
    3. ')
' → logprob: -4.777462959289551
    4. '       ' → logprob: -5.902462959289551
    5. '           ' → logprob: -6.152462959289551
    6. ' )
' → logprob: -7.402462959289551
    7. '
' → logprob: -8.02746295928955
    8. '):
' → logprob: -8.40246295928955
    9. '   ' → logprob: -9.27746295928955
    10. '):' → logprob: -9.52746295928955

Token 224: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.08244483172893524
    2. '<|end|>' → logprob: -3.457444906234741
    3. '
' → logprob: -3.707444906234741
    4. ' 
' → logprob: -4.957444667816162
    5. '       ' → logprob: -4.957444667816162
    6. '\n' → logprob: -6.082444667816162
    7. ' ' → logprob: -6.707444667816162
    8. ',' → logprob: -6.707444667816162
    9. '            
' → logprob: -7.082444667816162
    10. '    
' → logprob: -7.332444667816162

Token 225: ' #' (ID: 1069)
  Prédit: ' 
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' 
' → logprob: -0.9740563035011292
    2. '
' → logprob: -1.2240562438964844
    3. '           ' → logprob: -1.4740562438964844
    4. '       ' → logprob: -3.4740562438964844
    5. ' ' → logprob: -3.4740562438964844
    6. ' k' → logprob: -4.599056243896484
    7. '  
' → logprob: -4.849056243896484
    8. '<|end|>' → logprob: -5.349056243896484
    9. '\n' → logprob: -5.724056243896484
    10. '   ' → logprob: -6.599056243896484

Token 226: ' XOR' (ID: 147209)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' k' → logprob: -1.143253207206726
    2. '       ' → logprob: -1.268253207206726
    3. '
' → logprob: -1.768253207206726
    4. '           ' → logprob: -2.1432533264160156
    5. ' 
' → logprob: -3.2682533264160156
    6. ' key' → logprob: -3.3932533264160156
    7. '  
' → logprob: -4.768253326416016
    8. ' if' → logprob: -5.018253326416016
    9. '   ' → logprob: -5.393253326416016
    10. 'k' → logprob: -5.768253326416016

Token 227: ' over' (ID: 1072)
  Prédit: ' over'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' over' → logprob: -0.6675232648849487
    2. ' ^=' → logprob: -1.2925232648849487
    3. ' =' → logprob: -2.4175233840942383
    4. 'over' → logprob: -2.9175233840942383
    5. '=' → logprob: -3.4175233840942383
    6. ' bit' → logprob: -4.417523384094238
    7. '_over' → logprob: -5.417523384094238
    8. ' ' → logprob: -5.542523384094238
    9. 'bit' → logprob: -5.917523384094238
    10. ' (' → logprob: -5.917523384094238

Token 228: ' N' (ID: 478)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -1.4031654596328735
    2. ' i' → logprob: -1.6531654596328735
    3. ' (' → logprob: -2.153165340423584
    4. 'v' → logprob: -2.528165340423584
    5. '(' → logprob: -2.778165340423584
    6. '(N' → logprob: -2.903165340423584
    7. ' v' → logprob: -3.028165340423584
    8. 'N' → logprob: -3.153165340423584
    9. '(i' → logprob: -3.278165340423584
    10. ' bit' → logprob: -3.528165340423584

Token 229: '_i' (ID: 10853)
  Prédit: '_i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_i' → logprob: -0.022020956501364708
    2. 'i' → logprob: -4.1470208168029785
    3. '[i' → logprob: -7.0220208168029785
    4. '_bits' → logprob: -7.0220208168029785
    5. '=' → logprob: -7.5220208168029785
    6. ')' → logprob: -7.5220208168029785
    7. 'sum' → logprob: -7.6470208168029785
    8. '_sum' → logprob: -7.7720208168029785
    9. ' =' → logprob: -7.7720208168029785
    10. ' ^=' → logprob: -8.022021293640137

Token 230: '^{' (ID: 42923)
  Prédit: ' bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' bit' → logprob: -1.7912681102752686
    2. 's' → logprob: -2.2912681102752686
    3. ' =' → logprob: -2.2912681102752686
    4. ' ^=' → logprob: -2.4162681102752686
    5. 'bit' → logprob: -2.5412681102752686
    6. '=' → logprob: -3.0412681102752686
    7. '           ' → logprob: -3.0412681102752686
    8. ')' → logprob: -3.4162681102752686
    9. '_bits' → logprob: -3.4162681102752686
    10. '_bit' → logprob: -3.5412681102752686

Token 231: 'bit' (ID: 6516)
  Prédit: 'bit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bit' → logprob: -0.00046045915223658085
    2. ' bit' → logprob: -7.875460624694824
    3. '(bit' → logprob: -9.750460624694824
    4. '1' → logprob: -12.000460624694824
    5. '[' → logprob: -12.375460624694824
    6. '```' → logprob: -13.250460624694824
    7. '_bit' → logprob: -13.375460624694824
    8. ' ' → logprob: -13.500460624694824
    9. '0' → logprob: -13.625460624694824
    10. '(' → logprob: -14.000460624694824

Token 232: '}' (ID: 92)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.47221219539642334
    2. ' ^' → logprob: -2.097212314605713
    3. ' of' → logprob: -2.847212314605713
    4. ' ==' → logprob: -3.472212314605713
    5. ' xor' → logprob: -3.472212314605713
    6. ' bit' → logprob: -3.597212314605713
    7. ' ' → logprob: -3.972212314605713
    8. ' )' → logprob: -4.222212314605713
    9. ' XOR' → logprob: -4.222212314605713
    10. ' ^=' → logprob: -4.347212314605713

Token 233: ' =' (ID: 314)
  Prédit: ' ^='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ^=' → logprob: -0.4982421398162842
    2. ' ==' → logprob: -1.3732421398162842
    3. ' ^' → logprob: -2.873242139816284
    4. '==' → logprob: -3.248242139816284
    5. ' ' → logprob: -4.623242378234863
    6. ' =' → logprob: -4.998242378234863
    7. '<|end|>' → logprob: -5.123242378234863
    8. 's' → logprob: -5.123242378234863
    9. '=' → logprob: -5.498242378234863
    10. '^' → logprob: -5.748242378234863

Token 234: ' bit' (ID: 3546)
  Prédit: 'bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bit' → logprob: -0.25299060344696045
    2. ' bit' → logprob: -1.5029906034469604
    3. '0' → logprob: -7.00299072265625
    4. '(bit' → logprob: -9.37799072265625
    5. ' ' → logprob: -10.37799072265625
    6. '1' → logprob: -11.00299072265625
    7. 'bitr' → logprob: -12.62799072265625
    8. ' D' → logprob: -12.75299072265625
    9. 'D' → logprob: -13.12799072265625
    10. '   ' → logprob: -13.25299072265625

Token 235: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.014299719594419003
    2. 'sum' → logprob: -4.3892998695373535
    3. 'bit' → logprob: -7.3892998695373535
    4. '_' → logprob: -8.139299392700195
    5. '_bit' → logprob: -8.514299392700195
    6. '_chk' → logprob: -8.889299392700195
    7. 'Sum' → logprob: -9.514299392700195
    8. 's' → logprob: -9.639299392700195
    9. 'D' → logprob: -9.639299392700195
    10. '(bit' → logprob: -10.139299392700195

Token 236: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.31338778138160706
    2. '
' → logprob: -2.313387870788574
    3. '       ' → logprob: -2.438387870788574
    4. ' 
' → logprob: -4.063387870788574
    5. ' if' → logprob: -4.188387870788574
    6. '<|end|>' → logprob: -4.563387870788574
    7. '  
' → logprob: -5.063387870788574
    8. '=' → logprob: -5.063387870788574
    9. ' =' → logprob: -5.313387870788574
    10. '```' → logprob: -5.688387870788574

Token 237: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.032817065715789795
    2. ' if' → logprob: -4.5328168869018555
    3. ' 
' → logprob: -4.9078168869018555
    4. '
' → logprob: -5.4078168869018555
    5. '       ' → logprob: -6.4078168869018555
    6. ',' → logprob: -6.4078168869018555
    7. '<|end|>' → logprob: -7.1578168869018555
    8. '  
' → logprob: -7.2828168869018555
    9. ' k' → logprob: -7.2828168869018555
    10. '[' → logprob: -7.4078168869018555

Token 238: ' #' (ID: 1069)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.3647133409976959
    2. '       ' → logprob: -2.114713430404663
    3. ' if' → logprob: -2.614713430404663
    4. ' k' → logprob: -3.239713430404663
    5. '=' → logprob: -3.739713430404663
    6. '
' → logprob: -4.239713191986084
    7. ',' → logprob: -4.614713191986084
    8. ' 
' → logprob: -5.114713191986084
    9. ' =' → logprob: -5.114713191986084
    10. '```' → logprob: -5.989713191986084

Token 239: ' So' (ID: 2632)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.15500731766223907
    2. ' key' → logprob: -3.0300073623657227
    3. ' k' → logprob: -3.2800073623657227
    4. 'if' → logprob: -3.7800073623657227
    5. '           ' → logprob: -3.9050073623657227
    6. 'k' → logprob: -4.530007362365723
    7. 'key' → logprob: -6.280007362365723
    8. '       ' → logprob: -6.905007362365723
    9. 'If' → logprob: -8.155007362365723
    10. '```' → logprob: -8.280007362365723

Token 240: ' (' (ID: 350)
  Prédit: ' key'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' key' → logprob: -0.5011583566665649
    2. ' k' → logprob: -1.751158356666565
    3. 'k' → logprob: -2.6261582374572754
    4. 'key' → logprob: -2.6261582374572754
    5. ' if' → logprob: -2.7511582374572754
    6. '
' → logprob: -5.376158237457275
    7. '           ' → logprob: -5.626158237457275
    8. 'if' → logprob: -5.876158237457275
    9. ',' → logprob: -8.751158714294434
    10. ' we' → logprob: -8.751158714294434

Token 241: 'bit' (ID: 6516)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.4843423366546631
    2. 'bit' → logprob: -1.109342336654663
    3. ' bit' → logprob: -3.359342336654663
    4. ' k' → logprob: -4.359342575073242
    5. 'key' → logprob: -5.234342575073242
    6. '   ' → logprob: -8.359342575073242
    7. ' key' → logprob: -8.484342575073242
    8. ')' → logprob: -9.046842575073242
    9. ' ' → logprob: -9.109342575073242
    10. '(bit' → logprob: -9.171842575073242

Token 242: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.45388808846473694
    2. '_key' → logprob: -1.2038880586624146
    3. '_k' → logprob: -3.578888177871704
    4. 'key' → logprob: -4.703887939453125
    5. '_chk' → logprob: -5.078887939453125
    6. 'k' → logprob: -5.328887939453125
    7. 'sum' → logprob: -5.578887939453125
    8. ')' → logprob: -5.828887939453125
    9. '_' → logprob: -6.078887939453125
    10. '=' → logprob: -6.953887939453125

Token 243: ' xor' (ID: 106402)
  Prédit: ' ^'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ^' → logprob: -0.09284164011478424
    2. ' xor' → logprob: -3.467841625213623
    3. '^' → logprob: -3.717841625213623
    4. ')' → logprob: -3.717841625213623
    5. ' ' → logprob: -4.967841625213623
    6. ' ^=' → logprob: -7.467841625213623
    7. ' )' → logprob: -7.717841625213623
    8. '==' → logprob: -8.342842102050781
    9. ' ==' → logprob: -8.592842102050781
    10. 'xor' → logprob: -8.717842102050781

Token 244: ' (' (ID: 350)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.3920775055885315
    2. ' k' → logprob: -1.1420774459838867
    3. ' key' → logprob: -5.767077445983887
    4. 'key' → logprob: -6.267077445983887
    5. ' bit' → logprob: -9.392077445983887
    6. 'bit' → logprob: -10.392077445983887
    7. ')' → logprob: -10.642077445983887
    8. ' ' → logprob: -11.517077445983887
    9. '(k' → logprob: -12.517077445983887
    10. '	k' → logprob: -12.642077445983887

Token 245: 'k' (ID: 74)
  Prédit: 'k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.024596937000751495
    2. ' k' → logprob: -3.774596929550171
    3. 'key' → logprob: -7.02459716796875
    4. 'bit' → logprob: -8.27459716796875
    5. ' key' → logprob: -9.14959716796875
    6. ' bit' → logprob: -9.39959716796875
    7. ')' → logprob: -12.39959716796875
    8. ' ' → logprob: -12.77459716796875
    9. '   ' → logprob: -13.02459716796875
    10. '(k' → logprob: -13.52459716796875

Token 246: '_bit' (ID: 39574)
  Prédit: '_bit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_bit' → logprob: -0.00044663884909823537
    2. 'bit' → logprob: -8.000446319580078
    3. ' bit' → logprob: -9.500446319580078
    4. ')' → logprob: -11.000446319580078
    5. '_' → logprob: -11.625446319580078
    6. '_BIT' → logprob: -13.000446319580078
    7. '_bits' → logprob: -13.125446319580078
    8. ')_' → logprob: -13.375446319580078
    9. '(bit' → logprob: -13.500446319580078
    10. '.bit' → logprob: -13.625446319580078

Token 247: ' if' (ID: 538)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.20174045860767365
    2. '))' → logprob: -1.7017405033111572
    3. ' )' → logprob: -8.701740264892578
    4. ' ))' → logprob: -9.201740264892578
    5. ')==' → logprob: -10.326740264892578
    6. '=' → logprob: -11.451740264892578
    7. '==' → logprob: -12.701740264892578
    8. ')=' → logprob: -12.826740264892578
    9. ')))' → logprob: -13.201740264892578
    10. '`)' → logprob: -13.451740264892578

Token 248: ' ' (ID: 220)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -1.0377275943756104
    2. ' (' → logprob: -1.6627275943756104
    3. '(True' → logprob: -1.7877275943756104
    4. ' ' → logprob: -2.6627275943756104
    5. '1' → logprob: -2.9127275943756104
    6. '0' → logprob: -3.0377275943756104
    7. '8' → logprob: -3.2877275943756104
    8. ' True' → logprob: -3.4127275943756104
    9. 'True' → logprob: -4.037727355957031
    10. '(bit' → logprob: -4.912727355957031

Token 249: '8' (ID: 23)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.8050007820129395
    2. '1' → logprob: -1.0550007820129395
    3. 'bit' → logprob: -2.3050007820129395
    4. 'True' → logprob: -3.4300007820129395
    5. ' bit' → logprob: -4.1800007820129395
    6. ' ' → logprob: -4.3050007820129395
    7. ' True' → logprob: -4.4300007820129395
    8. '(bit' → logprob: -4.5550007820129395
    9. '(' → logprob: -4.9300007820129395
    10. 'k' → logprob: -5.9300007820129395

Token 250: ' is' (ID: 382)
  Prédit: ' %'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.1405789852142334
    2. '%' → logprob: -2.6405789852142334
    3. ' ==' → logprob: -3.8905789852142334
    4. '==' → logprob: -4.2655792236328125
    5. ' &' → logprob: -4.5155792236328125
    6. ' else' → logprob: -5.3905792236328125
    7. '0' → logprob: -6.1405792236328125
    8. 'else' → logprob: -6.3905792236328125
    9. ')' → logprob: -6.6405792236328125
    10. 'bit' → logprob: -7.0155792236328125

Token 251: ' odd' (ID: 14210)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.3168829679489136
    2. 'even' → logprob: -1.5668829679489136
    3. 'odd' → logprob: -3.066883087158203
    4. '1' → logprob: -4.316883087158203
    5. ' even' → logprob: -6.191883087158203
    6. '   ' → logprob: -8.066883087158203
    7. ' ' → logprob: -8.816883087158203
    8. ' odd' → logprob: -9.066883087158203
    9. '8' → logprob: -9.566883087158203
    10. 'bit' → logprob: -9.691883087158203

Token 252: ' else' (ID: 1203)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -1.0238518714904785
    2. ')' → logprob: -1.5238518714904785
    3. '==' → logprob: -1.5238518714904785
    4. ' else' → logprob: -1.8988518714904785
    5. ' )' → logprob: -3.8988518714904785
    6. '))' → logprob: -4.3988518714904785
    7. '1' → logprob: -4.7738518714904785
    8. ' ' → logprob: -5.1488518714904785
    9. 'else' → logprob: -6.1488518714904785
    10. ' ))' → logprob: -6.1488518714904785

Token 253: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.018351396545767784
    2. ' ' → logprob: -4.1433515548706055
    3. '1' → logprob: -7.0183515548706055
    4. 'False' → logprob: -7.0183515548706055
    5. ' False' → logprob: -7.7683515548706055
    6. ' bit' → logprob: -10.018351554870605
    7. 'bit' → logprob: -10.643351554870605
    8. '   ' → logprob: -11.643351554870605
    9. 'k' → logprob: -12.455851554870605
    10. ')' → logprob: -12.705851554870605

Token 254: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0014728414826095104
    2. 'False' → logprob: -6.7514729499816895
    3. ' ' → logprob: -8.251472473144531
    4. ' False' → logprob: -10.876472473144531
    5. 'bit' → logprob: -11.626472473144531
    6. '1' → logprob: -12.251472473144531
    7. '   ' → logprob: -12.251472473144531
    8. '
' → logprob: -13.626472473144531
    9. 'false' → logprob: -14.251472473144531
    10. '  ' → logprob: -14.938972473144531

Token 255: '))' (ID: 915)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.21822229027748108
    2. '))' → logprob: -1.7182222604751587
    3. ' )' → logprob: -4.468222141265869
    4. ' ))' → logprob: -6.093222141265869
    5. ')==' → logprob: -6.593222141265869
    6. '1' → logprob: -7.593222141265869
    7. ' ==' → logprob: -7.718222141265869
    8. '==' → logprob: -7.968222141265869
    9. '0' → logprob: -8.843222618103027
    10. ' ' → logprob: -10.843222618103027

Token 256: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0810958668589592
    2. '=' → logprob: -2.7060959339141846
    3. ' if' → logprob: -5.2060956954956055
    4. ' ^=' → logprob: -6.0810956954956055
    5. ' ^' → logprob: -6.7060956954956055
    6. ' ==' → logprob: -7.2060956954956055
    7. ' ' → logprob: -8.081095695495605
    8. '           ' → logprob: -8.456095695495605
    9. ' =
' → logprob: -8.831095695495605
    10. ' bit' → logprob: -9.081095695495605

Token 257: ' bit' (ID: 3546)
  Prédit: ' bit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' bit' → logprob: -0.4740796387195587
    2. 'bit' → logprob: -0.9740796089172363
    3. '(bit' → logprob: -13.099080085754395
    4. ' ' → logprob: -15.099080085754395
    5. '0' → logprob: -16.224079132080078
    6. 'bitr' → logprob: -17.224079132080078
    7. '           ' → logprob: -17.849079132080078
    8. '   ' → logprob: -17.974079132080078
    9. '_bit' → logprob: -17.974079132080078
    10. '```' → logprob: -17.974079132080078

Token 258: '_chk' (ID: 164238)
  Prédit: '_sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.02702575922012329
    2. '_chk' → logprob: -4.0270256996154785
    3. 'sum' → logprob: -5.0270256996154785
    4. '0' → logprob: -7.9020256996154785
    5. '_' → logprob: -8.152026176452637
    6. 's' → logprob: -8.277026176452637
    7. '_s' → logprob: -8.527026176452637
    8. 'chk' → logprob: -8.777026176452637
    9. '_bit' → logprob: -9.027026176452637
    10. 'xor' → logprob: -9.277026176452637

Token 259: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.7814180254936218
    2. ' =' → logprob: -1.4064180850982666
    3. ' 
' → logprob: -1.7814180850982666
    4. '=' → logprob: -3.2814180850982666
    5. ' if' → logprob: -4.0314178466796875
    6. ' ' → logprob: -4.0314178466796875
    7. '
' → logprob: -4.0314178466796875
    8. '0' → logprob: -4.6564178466796875
    9. '1' → logprob: -5.0314178466796875
    10. '       ' → logprob: -5.6564178466796875

Token 260: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.46039721369743347
    2. ' =' → logprob: -1.4603972434997559
    3. ' 
' → logprob: -3.210397243499756
    4. ' if' → logprob: -3.335397243499756
    5. '=' → logprob: -3.710397243499756
    6. ' k' → logprob: -4.835397243499756
    7. '
' → logprob: -4.835397243499756
    8. '            
' → logprob: -5.960397243499756
    9. 'if' → logprob: -6.210397243499756
    10. '       ' → logprob: -6.210397243499756

Token 261: ' #' (ID: 1069)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.29924213886260986
    2. ' if' → logprob: -2.4242420196533203
    3. '       ' → logprob: -3.1742420196533203
    4. ' ' → logprob: -3.4242420196533203
    5. '0' → logprob: -3.6742420196533203
    6. ' 
' → logprob: -3.9242420196533203
    7. ' k' → logprob: -4.04924201965332
    8. '1' → logprob: -5.42424201965332
    9. ' =' → logprob: -5.42424201965332
    10. '\n' → logprob: -5.54924201965332

Token 262: ' ' (ID: 220)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.43645474314689636
    2. ' k' → logprob: -1.4364547729492188
    3. '           ' → logprob: -2.6864547729492188
    4. ' 
' → logprob: -4.186454772949219
    5. ' key' → logprob: -4.436454772949219
    6. '       ' → logprob: -4.811454772949219
    7. 'k' → logprob: -5.561454772949219
    8. ' ' → logprob: -6.061454772949219
    9. 'if' → logprob: -7.061454772949219
    10. '0' → logprob: -7.311454772949219

Token 263: '8' (ID: 23)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.8894129395484924
    2. ' if' → logprob: -1.1394128799438477
    3. 'if' → logprob: -1.7644128799438477
    4. ' key' → logprob: -3.1394128799438477
    5. 'key' → logprob: -3.3894128799438477
    6. ' k' → logprob: -4.014412879943848
    7. '           ' → logprob: -6.139412879943848
    8. '       ' → logprob: -8.764412879943848
    9. '#' → logprob: -9.764412879943848
    10. 'If' → logprob: -9.764412879943848

Token 264: ' is' (ID: 382)
  Prédit: ' %'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.1215996965765953
    2. '%' → logprob: -2.7465996742248535
    3. ' is' → logprob: -3.2465996742248535
    4. ' ^' → logprob: -5.8715996742248535
    5. '<|end|>' → logprob: -6.1215996742248535
    6. ' xor' → logprob: -6.3715996742248535
    7. ' ' → logprob: -6.4965996742248535
    8. 'xor' → logprob: -6.8715996742248535
    9. 'is' → logprob: -7.1215996742248535
    10. ' ^=' → logprob: -8.621600151062012

Token 265: ' even' (ID: 1952)
  Prédit: 'even'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'even' → logprob: -0.010674013756215572
    2. ' even' → logprob: -4.635673999786377
    3. '0' → logprob: -7.010673999786377
    4. '8' → logprob: -12.010674476623535
    5. 'not' → logprob: -12.260674476623535
    6. '_even' → logprob: -13.010674476623535
    7. 'Even' → logprob: -14.010674476623535
    8. ' ' → logprob: -14.635674476623535
    9. '1' → logprob: -15.385674476623535
    10. '2' → logprob: -15.635674476623535

Token 266: ',' (ID: 11)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.212731957435608
    2. ' ' → logprob: -1.212731957435608
    3. ' 
' → logprob: -1.587731957435608
    4. '           ' → logprob: -2.5877318382263184
    5. '1' → logprob: -3.2127318382263184
    6. '
' → logprob: -4.212731838226318
    7. ' =' → logprob: -4.462731838226318
    8. ',' → logprob: -4.712731838226318
    9. '=' → logprob: -4.712731838226318
    10. ' \' → logprob: -5.337731838226318

Token 267: ' so' (ID: 813)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.6252713799476624
    2. 'k' → logprob: -1.6252713203430176
    3. '           ' → logprob: -2.0002713203430176
    4. ' so' → logprob: -2.6252713203430176
    5. ' key' → logprob: -3.8752713203430176
    6. '#' → logprob: -4.125271320343018
    7. '0' → logprob: -5.125271320343018
    8. ' #' → logprob: -5.250271320343018
    9. ' bit' → logprob: -5.375271320343018
    10. 'key' → logprob: -6.125271320343018

Token 268: ' effect' (ID: 3159)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.012518247589468956
    2. '0' → logprob: -5.012518405914307
    3. 'bit' → logprob: -5.387518405914307
    4. ' k' → logprob: -7.262518405914307
    5. ' bit' → logprob: -8.012517929077148
    6. '#' → logprob: -10.012517929077148
    7. 'D' → logprob: -10.637517929077148
    8. ' ' → logprob: -10.887517929077148
    9. 'pass' → logprob: -11.012517929077148
    10. '   ' → logprob: -11.262517929077148

Token 269: ' is' (ID: 382)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.8950346112251282
    2. '=' → logprob: -1.3950345516204834
    3. ' is' → logprob: -2.1450345516204834
    4. '0' → logprob: -2.5200345516204834
    5. ' ' → logprob: -2.5200345516204834
    6. 's' → logprob: -3.0200345516204834
    7. ' of' → logprob: -5.2700347900390625
    8. '   ' → logprob: -5.2700347900390625
    9. '<|end|>' → logprob: -6.5200347900390625
    10. ' s' → logprob: -7.3950347900390625

Token 270: ' k' (ID: 372)
  Prédit: 'bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bit' → logprob: -0.877843976020813
    2. '0' → logprob: -1.002843976020813
    3. ' bit' → logprob: -1.627843976020813
    4. 'k' → logprob: -4.002843856811523
    5. ' ' → logprob: -6.502843856811523
    6. ' k' → logprob: -8.002843856811523
    7. ' that' → logprob: -8.252843856811523
    8. '(bit' → logprob: -8.252843856811523
    9. '(' → logprob: -9.252843856811523
    10. ' no' → logprob: -9.502843856811523

Token 271: '_bit' (ID: 39574)
  Prédit: '_bit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_bit' → logprob: -0.0005744783557020128
    2. 'bit' → logprob: -7.875574588775635
    3. '0' → logprob: -8.750574111938477
    4. ' bit' → logprob: -10.875574111938477
    5. '_bits' → logprob: -11.500574111938477
    6. ' ' → logprob: -12.750574111938477
    7. '_' → logprob: -13.250574111938477
    8. ' _' → logprob: -14.250574111938477
    9. '=' → logprob: -14.625574111938477
    10. '_zero' → logprob: -15.250574111938477

Token 272: ' xor' (ID: 106402)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.03226573020219803
    2. '=' → logprob: -3.6572656631469727
    3. ' ' → logprob: -5.907265663146973
    4. '
' → logprob: -7.282265663146973
    5. ' =
' → logprob: -7.407265663146973
    6. ' bit' → logprob: -7.532265663146973
    7. ' ^=' → logprob: -7.907265663146973
    8. ' if' → logprob: -8.532265663146973
    9. '           ' → logprob: -8.657265663146973
    10. ' ==' → logprob: -9.407265663146973

Token 273: ' k' (ID: 372)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.7147750854492188
    2. 'bit' → logprob: -0.7147750854492188
    3. ' bit' → logprob: -4.089775085449219
    4. '1' → logprob: -5.589775085449219
    5. ' ' → logprob: -7.339775085449219
    6. '(bit' → logprob: -8.714775085449219
    7. 'k' → logprob: -10.214775085449219
    8. '   ' → logprob: -10.964775085449219
    9. '(' → logprob: -11.214775085449219
    10. 'bits' → logprob: -12.277275085449219

Token 274: '_bit' (ID: 39574)
  Prédit: '_bit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_bit' → logprob: -0.25111618638038635
    2. 'bit' → logprob: -1.751116156578064
    3. '0' → logprob: -3.6261162757873535
    4. ' ' → logprob: -4.5011162757873535
    5. '_' → logprob: -5.3761162757873535
    6. ' bit' → logprob: -5.6261162757873535
    7. '1' → logprob: -7.3761162757873535
    8. 'b' → logprob: -7.6261162757873535
    9. '_b' → logprob: -8.501115798950195
    10. '_bits' → logprob: -8.876115798950195

Token 275: ' ...' (ID: 2550)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 276: ' ' (ID: 220)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.22205322980880737
    2. '0' → logprob: -2.347053289413452
    3. ' =' → logprob: -2.597053289413452
    4. ' ' → logprob: -4.222053050994873
    5. '[' → logprob: -6.222053050994873
    6. ')' → logprob: -6.347053050994873
    7. '^' → logprob: -6.472053050994873
    8. ' (' → logprob: -6.597053050994873
    9. ' is' → logprob: -6.722053050994873
    10. '000' → logprob: -6.722053050994873

Token 277: '8' (ID: 23)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.02524028718471527
    2. ' ' → logprob: -4.275240421295166
    3. '=' → logprob: -4.525240421295166
    4. ' =' → logprob: -9.275239944458008
    5. '...' → logprob: -10.775239944458008
    6. '000' → logprob: -10.900239944458008
    7. '1' → logprob: -11.400239944458008
    8. '(' → logprob: -11.525239944458008
    9. ' (' → logprob: -12.150239944458008
    10. 'xor' → logprob: -12.400239944458008

Token 278: ' times' (ID: 4238)
  Prédit: ' times'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' times' → logprob: -0.6992266774177551
    2. 'times' → logprob: -0.8242266774177551
    3. '0' → logprob: -3.0742266178131104
    4. '=' → logprob: -5.4492268562316895
    5. '_times' → logprob: -5.9492268562316895
    6. '<|end|>' → logprob: -5.9492268562316895
    7. '^' → logprob: -6.5742268562316895
    8. ')' → logprob: -6.8242268562316895
    9. 's' → logprob: -6.8242268562316895
    10. ' =' → logprob: -7.0742268562316895

Token 279: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -1.2375876903533936
    2. ' =' → logprob: -1.3625876903533936
    3. '<|end|>' → logprob: -2.1125876903533936
    4. '0' → logprob: -2.3625876903533936
    5. '
' → logprob: -2.4875876903533936
    6. ' ' → logprob: -3.4875876903533936
    7. '           ' → logprob: -3.9875876903533936
    8. ' if' → logprob: -3.9875876903533936
    9. '1' → logprob: -4.112587928771973
    10. ',' → logprob: -4.362587928771973

Token 280: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0002631238894537091
    2. ' ' → logprob: -8.250263214111328
    3. '000' → logprob: -13.250263214111328
    4. '1' → logprob: -16.750263214111328
    5. '   ' → logprob: -17.625263214111328
    6. '00' → logprob: -17.750263214111328
    7. '(' → logprob: -18.500263214111328
    8. 'k' → logprob: -18.562763214111328
    9. '```' → logprob: -18.937763214111328
    10. ' ' → logprob: -19.062763214111328

Token 281: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -2.696889623621246e-06
    2. ' ' → logprob: -13.37500286102295
    3. '000' → logprob: -13.75000286102295
    4. '```' → logprob: -18.875001907348633
    5. '1' → logprob: -19.125001907348633
    6. '   ' → logprob: -19.625001907348633
    7. '00' → logprob: -19.750001907348633
    8. 'False' → logprob: -20.000001907348633
    9. 'false' → logprob: -20.750001907348633
    10. '010' → logprob: -20.875001907348633

Token 282: ' if' (ID: 538)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.8646317720413208
    2. '
' → logprob: -0.9896317720413208
    3. '<|end|>' → logprob: -2.6146316528320312
    4. '       ' → logprob: -3.9896316528320312
    5. '0' → logprob: -3.9896316528320312
    6. ' 
' → logprob: -4.489631652832031
    7. '   ' → logprob: -4.864631652832031
    8. '\n' → logprob: -4.864631652832031
    9. '  
' → logprob: -4.864631652832031
    10. ' ' → logprob: -4.989631652832031

Token 283: ' even' (ID: 1952)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.17044119536876678
    2. '0' → logprob: -3.045441150665283
    3. ' k' → logprob: -3.045441150665283
    4. '8' → logprob: -3.170441150665283
    5. ' ' → logprob: -5.045441150665283
    6. 'even' → logprob: -5.295441150665283
    7. 'bit' → logprob: -5.795441150665283
    8. 'False' → logprob: -6.545441150665283
    9. ' bit' → logprob: -6.920441150665283
    10. ' even' → logprob: -7.170441150665283

Token 284: ' times' (ID: 4238)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.4116036891937256
    2. ' if' → logprob: -2.6616036891937256
    3. ' =' → logprob: -3.1616036891937256
    4. ' bit' → logprob: -3.2866036891937256
    5. '<|end|>' → logprob: -3.4116036891937256
    6. '
' → logprob: -3.7866036891937256
    7. ' ' → logprob: -3.7866036891937256
    8. '=' → logprob: -3.9116036891937256
    9. ' 
' → logprob: -4.411603927612305
    10. '       ' → logprob: -4.411603927612305

Token 285: ',' (ID: 11)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.19393843412399292
    2. '
' → logprob: -3.0689384937286377
    3. '0' → logprob: -3.3189384937286377
    4. '       ' → logprob: -3.9439384937286377
    5. '<|end|>' → logprob: -4.443938255310059
    6. ' =' → logprob: -4.568938255310059
    7. '\n' → logprob: -4.693938255310059
    8. ',' → logprob: -4.943938255310059
    9. '=' → logprob: -5.068938255310059
    10. '   ' → logprob: -5.193938255310059

Token 286: ' k' (ID: 372)
  Prédit: ' so'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' so' → logprob: -0.6655501127243042
    2. '0' → logprob: -1.4155501127243042
    3. ' bit' → logprob: -2.4155502319335938
    4. ' ' → logprob: -2.9155502319335938
    5. ' 
' → logprob: -3.6655502319335938
    6. '\n' → logprob: -4.415550231933594
    7. ' k' → logprob: -4.665550231933594
    8. 'bit' → logprob: -4.665550231933594
    9. '
' → logprob: -4.790550231933594
    10. '  
' → logprob: -5.915550231933594

Token 287: '_bit' (ID: 39574)
  Prédit: '_bit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_bit' → logprob: -0.00011987409379798919
    2. 'bit' → logprob: -9.625120162963867
    3. '_' → logprob: -9.875120162963867
    4. ' bit' → logprob: -13.375120162963867
    5. '_bits' → logprob: -15.000120162963867
    6. 'ey' → logprob: -16.000120162963867
    7. '_BIT' → logprob: -16.375120162963867
    8. ' _' → logprob: -16.750120162963867
    9. '_opt' → logprob: -17.375120162963867
    10. '_key' → logprob: -17.625120162963867

Token 288: ' if' (ID: 538)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.07119737565517426
    2. '=' → logprob: -2.696197271347046
    3. ' =
' → logprob: -8.196197509765625
    4. '
' → logprob: -8.321197509765625
    5. ' ' → logprob: -8.946197509765625
    6. '<|end|>' → logprob: -9.071197509765625
    7. ' bit' → logprob: -9.321197509765625
    8. 's' → logprob: -9.321197509765625
    9. ' if' → logprob: -9.446197509765625
    10. ',' → logprob: -9.946197509765625

Token 289: ' odd' (ID: 14210)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.1422542780637741
    2. 'odd' → logprob: -2.76725435256958
    3. ' ' → logprob: -3.51725435256958
    4. ' odd' → logprob: -3.89225435256958
    5. '0' → logprob: -4.01725435256958
    6. 'True' → logprob: -7.51725435256958
    7. ' True' → logprob: -7.89225435256958
    8. ' bit' → logprob: -8.767253875732422
    9. 'False' → logprob: -8.767253875732422
    10. 'bit' → logprob: -9.017253875732422

Token 290: ' times' (ID: 4238)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.19236460328102112
    2. ' =' → logprob: -2.1923646926879883
    3. '=' → logprob: -3.0673646926879883
    4. ' if' → logprob: -5.192364692687988
    5. '       ' → logprob: -5.692364692687988
    6. '   ' → logprob: -6.692364692687988
    7. ' ' → logprob: -6.942364692687988
    8. ',' → logprob: -6.942364692687988
    9. ' bit' → logprob: -7.192364692687988
    10. '
' → logprob: -7.442364692687988

Token 291: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.20274244248867035
    2. ' =' → logprob: -1.9527424573898315
    3. '=' → logprob: -4.327742576599121
    4. '
' → logprob: -5.077742576599121
    5. '       ' → logprob: -5.327742576599121
    6. ' if' → logprob: -5.702742576599121
    7. ' bit' → logprob: -5.827742576599121
    8. ' k' → logprob: -6.327742576599121
    9. '   ' → logprob: -6.577742576599121
    10. ',' → logprob: -6.827742576599121

Token 292: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.279295951128006
    2. '0' → logprob: -1.9042959213256836
    3. '=' → logprob: -3.6542959213256836
    4. '       ' → logprob: -3.9042959213256836
    5. ' =' → logprob: -4.529295921325684
    6. ' ' → logprob: -4.654295921325684
    7. '   ' → logprob: -5.404295921325684
    8. ' 
' → logprob: -5.529295921325684
    9. '[' → logprob: -6.029295921325684
    10. ',' → logprob: -6.529295921325684

Token 293: ' #' (ID: 1069)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.2570263743400574
    2. '0' → logprob: -2.257026433944702
    3. ' if' → logprob: -3.007026433944702
    4. ' k' → logprob: -3.632026433944702
    5. ' bit' → logprob: -4.132026195526123
    6. 'k' → logprob: -4.882026195526123
    7. ' =' → logprob: -5.007026195526123
    8. '=' → logprob: -5.257026195526123
    9. 'if' → logprob: -6.132026195526123
    10. '       ' → logprob: -6.257026195526123

Token 294: ' Each' (ID: 11555)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.3098086416721344
    2. ' k' → logprob: -2.3098087310791016
    3. '           ' → logprob: -2.6848087310791016
    4. ' if' → logprob: -2.9348087310791016
    5. ' key' → logprob: -3.9348087310791016
    6. '0' → logprob: -4.434808731079102
    7. 'key' → logprob: -5.059808731079102
    8. 'if' → logprob: -5.809808731079102
    9. ' bit' → logprob: -6.059808731079102
    10. ' ' → logprob: -7.434808731079102

Token 295: ' bit' (ID: 3546)
  Prédit: 'bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bit' → logprob: -1.0008326768875122
    2. 'v' → logprob: -1.3758326768875122
    3. 'N' → logprob: -2.2508325576782227
    4. ' bit' → logprob: -2.3758325576782227
    5. 'k' → logprob: -2.5008325576782227
    6. ' N' → logprob: -3.2508325576782227
    7. ' v' → logprob: -3.7508325576782227
    8. '#' → logprob: -5.250832557678223
    9. 'for' → logprob: -5.750832557678223
    10. ' k' → logprob: -5.750832557678223

Token 296: ' of' (ID: 328)
  Prédit: ' can'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' can' → logprob: -1.1435747146606445
    2. ' in' → logprob: -1.7685747146606445
    3. ' is' → logprob: -1.8935747146606445
    4. ' =' → logprob: -2.5185747146606445
    5. ' of' → logprob: -2.7685747146606445
    6. ' must' → logprob: -3.7685747146606445
    7. 'can' → logprob: -4.1435747146606445
    8. ')' → logprob: -4.5185747146606445
    9. '   ' → logprob: -4.6435747146606445
    10. '=' → logprob: -4.6435747146606445

Token 297: ' checksum' (ID: 83063)
  Prédit: 'key'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'key' → logprob: -0.2909013330936432
    2. ' key' → logprob: -1.9159013032913208
    3. 'k' → logprob: -2.2909014225006104
    4. ' k' → logprob: -5.915901184082031
    5. 'the' → logprob: -7.290901184082031
    6. ' the' → logprob: -8.040901184082031
    7. 'N' → logprob: -9.290901184082031
    8. ' ' → logprob: -9.540901184082031
    9. ' N' → logprob: -10.540901184082031
    10. '   ' → logprob: -10.665901184082031

Token 298: ' is' (ID: 382)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -1.1940499544143677
    2. ' ^=' → logprob: -1.5690499544143677
    3. ' is' → logprob: -1.8190499544143677
    4. ' =' → logprob: -1.9440499544143677
    5. ')' → logprob: -3.319049835205078
    6. ' must' → logprob: -3.694049835205078
    7. ' should' → logprob: -3.819049835205078
    8. ' can' → logprob: -4.069049835205078
    9. '<|end|>' → logprob: -4.319049835205078
    10. ' ^' → logprob: -4.569049835205078

Token 299: ' bit' (ID: 3546)
  Prédit: 'bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bit' → logprob: -0.43974292278289795
    2. ' bit' → logprob: -1.814742922782898
    3. '0' → logprob: -2.4397430419921875
    4. 'equal' → logprob: -3.0647430419921875
    5. ' equal' → logprob: -3.1897430419921875
    6. 'k' → logprob: -5.8147430419921875
    7. 'xor' → logprob: -6.0647430419921875
    8. 'unch' → logprob: -6.4397430419921875
    9. '(' → logprob: -6.8147430419921875
    10. ' (' → logprob: -7.0647430419921875

Token 300: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.2337617129087448
    2. 'xor' → logprob: -2.858761787414551
    3. ' ^' → logprob: -3.108761787414551
    4. ' xor' → logprob: -3.483761787414551
    5. '^' → logprob: -3.983761787414551
    6. ' ^=' → logprob: -4.733761787414551
    7. 'sum' → logprob: -4.858761787414551
    8. '   ' → logprob: -4.983761787414551
    9. 'wise' → logprob: -5.233761787414551
    10. 's' → logprob: -5.483761787414551

Token 301: ' xor' (ID: 106402)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.4806152284145355
    2. '<|end|>' → logprob: -1.480615258216858
    3. '\n' → logprob: -2.6056151390075684
    4. '           ' → logprob: -4.105615139007568
    5. '<|end|>' → logprob: -4.980615139007568
    6. '       ' → logprob: -5.105615139007568
    7. '   ' → logprob: -5.230615139007568
    8. ')' → logprob: -5.480615139007568
    9. '0' → logprob: -5.605615139007568
    10. ' ' → logprob: -5.605615139007568

Token 302: ' (' (ID: 350)
  Prédit: 'bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bit' → logprob: -0.16047464311122894
    2. ' bit' → logprob: -1.9104746580123901
    3. '0' → logprob: -9.28547477722168
    4. '(bit' → logprob: -9.28547477722168
    5. 'k' → logprob: -10.16047477722168
    6. '```' → logprob: -12.16047477722168
    7. ' ' → logprob: -12.41047477722168
    8. '   ' → logprob: -12.91047477722168
    9. ' k' → logprob: -13.03547477722168
    10. 'bits' → logprob: -13.41047477722168

Token 303: 'k' (ID: 74)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.5875810384750366
    2. 'k' → logprob: -0.8375810384750366
    3. 'key' → logprob: -4.962581157684326
    4. ' ' → logprob: -6.587581157684326
    5. ' k' → logprob: -6.587581157684326
    6. 'bit' → logprob: -6.712581157684326
    7. ' key' → logprob: -8.212580680847168
    8. ' bit' → logprob: -9.087580680847168
    9. '   ' → logprob: -10.025080680847168
    10. '`' → logprob: -10.587580680847168

Token 304: '_bit' (ID: 39574)
  Prédit: '_bit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_bit' → logprob: -0.00018852073117159307
    2. 'bit' → logprob: -8.625188827514648
    3. ' bit' → logprob: -12.750188827514648
    4. '_' → logprob: -13.000188827514648
    5. '_sum' → logprob: -13.625188827514648
    6. '_bits' → logprob: -14.125188827514648
    7. ')' → logprob: -15.000188827514648
    8. '_BIT' → logprob: -15.000188827514648
    9. '_split' → logprob: -15.750188827514648
    10. '_key' → logprob: -16.00018882751465

Token 305: ' *' (ID: 425)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.002266232157126069
    2. '<|end|>' → logprob: -6.8772664070129395
    3. ' )' → logprob: -7.3772664070129395
    4. ')
' → logprob: -9.127265930175781
    5. '),' → logprob: -9.502265930175781
    6. ' if' → logprob: -9.502265930175781
    7. ')==' → logprob: -9.627265930175781
    8. ' ' → logprob: -10.252265930175781
    9. ')=' → logprob: -10.752265930175781
    10. '0' → logprob: -10.752265930175781

Token 306: ' (' (ID: 350)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.07913322746753693
    2. ' ' → logprob: -2.5791332721710205
    3. ' (' → logprob: -9.454133033752441
    4. '(' → logprob: -9.579133033752441
    5. '1' → logprob: -9.829133033752441
    6. '8' → logprob: -10.891633033752441
    7. '[' → logprob: -13.079133033752441
    8. '   ' → logprob: -13.204133033752441
    9. '<|end|>' → logprob: -13.516633033752441
    10. '```' → logprob: -13.891633033752441

Token 307: '8' (ID: 23)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.10817913711071014
    2. '8' → logprob: -2.4831790924072266
    3. '(' → logprob: -4.108179092407227
    4. '1' → logprob: -6.983179092407227
    5. '(S' → logprob: -7.233179092407227
    6. ' (' → logprob: -7.858179092407227
    7. ' ' → logprob: -8.108179092407227
    8. 'S' → logprob: -9.233179092407227
    9. '4' → logprob: -9.983179092407227
    10. '   ' → logprob: -11.108179092407227

Token 308: ' mod' (ID: 1812)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '%' → logprob: -0.9319524765014648
    2. ' %' → logprob: -0.9319524765014648
    3. '))' → logprob: -2.181952476501465
    4. ')' → logprob: -2.931952476501465
    5. ' &' → logprob: -3.306952476501465
    6. '&' → logprob: -5.431952476501465
    7. ' ' → logprob: -6.056952476501465
    8. ' ))' → logprob: -6.556952476501465
    9. '   ' → logprob: -7.931952476501465
    10. ')%' → logprob: -8.556952476501465

Token 309: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.05602552369236946
    2. ' ' → logprob: -2.931025505065918
    3. '1' → logprob: -6.931025505065918
    4. '8' → logprob: -9.056025505065918
    5. ')' → logprob: -10.931025505065918
    6. '0' → logprob: -11.306025505065918
    7. '32' → logprob: -12.181025505065918
    8. '4' → logprob: -12.556025505065918
    9. ' )' → logprob: -12.806025505065918
    10. '```' → logprob: -13.181025505065918

Token 310: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -9.889424836728722e-05
    2. ' ' → logprob: -9.375099182128906
    3. '1' → logprob: -11.750099182128906
    4. ')' → logprob: -13.125099182128906
    5. '0' → logprob: -13.250099182128906
    6. '8' → logprob: -14.125099182128906
    7. '```' → logprob: -15.000099182128906
    8. '
' → logprob: -15.250099182128906
    9. '   ' → logprob: -15.500099182128906
    10. '4' → logprob: -15.625099182128906

Token 311: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.024279918521642685
    2. ')' → logprob: -4.024280071258545
    3. ' ))' → logprob: -5.274280071258545
    4. ')))' → logprob: -8.274279594421387
    5. '1' → logprob: -8.524279594421387
    6. ' ' → logprob: -8.649279594421387
    7. ' )' → logprob: -8.899279594421387
    8. '8' → logprob: -9.774279594421387
    9. '   ' → logprob: -10.274279594421387
    10. '))
' → logprob: -10.399279594421387

Token 312: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.28114935755729675
    2. ' =' → logprob: -1.6561493873596191
    3. '=' → logprob: -3.406149387359619
    4. '
' → logprob: -5.531149387359619
    5. ' ' → logprob: -5.531149387359619
    6. '<|end|>' → logprob: -6.156149387359619
    7. '       ' → logprob: -6.281149387359619
    8. '0' → logprob: -6.906149387359619
    9. ' if' → logprob: -7.281149387359619
    10. '   ' → logprob: -7.281149387359619

Token 313: ' #' (ID: 1069)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.018696486949920654
    2. '=' → logprob: -5.018696308135986
    3. ' =' → logprob: -5.518696308135986
    4. '0' → logprob: -6.018696308135986
    5. '       ' → logprob: -6.768696308135986
    6. ',' → logprob: -6.893696308135986
    7. ' ' → logprob: -7.518696308135986
    8. '   ' → logprob: -7.893696308135986
    9. ')' → logprob: -8.143696784973145
    10. '1' → logprob: -8.518696784973145

Token 314: ' since' (ID: 3630)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.7106322646141052
    2. '           ' → logprob: -1.21063232421875
    3. ' bit' → logprob: -2.96063232421875
    4. 'k' → logprob: -3.08563232421875
    5. ' key' → logprob: -3.71063232421875
    6. ' =' → logprob: -3.71063232421875
    7. '=' → logprob: -3.83563232421875
    8. ' if' → logprob: -4.21063232421875
    9. '0' → logprob: -4.33563232421875
    10. '       ' → logprob: -5.83563232421875

Token 315: ' ' (ID: 220)
  Prédit: '8'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '8' → logprob: -0.06832000613212585
    2. ' ' → logprob: -2.9433200359344482
    3. '0' → logprob: -4.943319797515869
    4. '(' → logprob: -5.443319797515869
    5. 'k' → logprob: -7.193319797515869
    6. ' (' → logprob: -7.443319797515869
    7. ' k' → logprob: -8.818320274353027
    8. 'S' → logprob: -8.943320274353027
    9. ' S' → logprob: -9.068320274353027
    10. '   ' → logprob: -10.068320274353027

Token 316: '8' (ID: 23)
  Prédit: '8'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '8' → logprob: -0.024902328848838806
    2. '(' → logprob: -4.02490234375
    3. '0' → logprob: -5.14990234375
    4. 'k' → logprob: -7.77490234375
    5. ' ' → logprob: -8.52490234375
    6. 'S' → logprob: -9.14990234375
    7. '(k' → logprob: -9.39990234375
    8. ' (' → logprob: -10.27490234375
    9. 'bit' → logprob: -10.52490234375
    10. '   ' → logprob: -10.89990234375

Token 317: ' is' (ID: 382)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '%' → logprob: -0.4934815466403961
    2. ' %' → logprob: -0.9934815168380737
    3. ' mod' → logprob: -4.743481636047363
    4. 'mod' → logprob: -5.118481636047363
    5. ' is' → logprob: -5.618481636047363
    6. ')' → logprob: -7.868481636047363
    7. 'is' → logprob: -8.368481636047363
    8. '_mod' → logprob: -9.493481636047363
    9. '```' → logprob: -9.993481636047363
    10. ' ' → logprob: -10.368481636047363

Token 318: ' even' (ID: 1952)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.08004818111658096
    2. 'even' → logprob: -2.580048084259033
    3. ' even' → logprob: -7.080048084259033
    4. ' ' → logprob: -8.080048561096191
    5. 'zero' → logprob: -13.205048561096191
    6. '8' → logprob: -13.955048561096191
    7. 'Even' → logprob: -14.205048561096191
    8. '_even' → logprob: -14.705048561096191
    9. '2' → logprob: -14.955048561096191
    10. '```' → logprob: -15.080048561096191

Token 319: ',' (ID: 11)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.6610527634620667
    2. ',' → logprob: -1.1610527038574219
    3. '=' → logprob: -2.786052703857422
    4. ' =' → logprob: -3.786052703857422
    5. ')' → logprob: -3.911052703857422
    6. ' ' → logprob: -4.161052703857422
    7. '       ' → logprob: -4.911052703857422
    8. '0' → logprob: -5.161052703857422
    9. ':' → logprob: -5.286052703857422
    10. '
' → logprob: -5.286052703857422

Token 320: ' this' (ID: 495)
  Prédit: ' bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' bit' → logprob: -0.7361634969711304
    2. 'k' → logprob: -1.4861634969711304
    3. 'bit' → logprob: -1.8611634969711304
    4. ' k' → logprob: -2.61116361618042
    5. '0' → logprob: -2.98616361618042
    6. '#' → logprob: -6.23616361618042
    7. ' #' → logprob: -6.36116361618042
    8. ' ' → logprob: -6.36116361618042
    9. ' the' → logprob: -6.48616361618042
    10. '           ' → logprob: -6.98616361618042

Token 321: ' means' (ID: 4748)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.8221991658210754
    2. ' means' → logprob: -1.6971991062164307
    3. 'means' → logprob: -2.0721991062164307
    4. '==' → logprob: -2.9471991062164307
    5. 'equals' → logprob: -3.6971991062164307
    6. 'is' → logprob: -3.9471991062164307
    7. '^' → logprob: -3.9471991062164307
    8. ' bit' → logprob: -3.9471991062164307
    9. 'xor' → logprob: -3.9471991062164307
    10. ' equals' → logprob: -4.07219934463501

Token 322: ' k' (ID: 372)
  Prédit: 'bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bit' → logprob: -0.4313105642795563
    2. ' bit' → logprob: -1.0563105344772339
    3. '0' → logprob: -6.431310653686523
    4. 'k' → logprob: -7.806310653686523
    5. '   ' → logprob: -9.056310653686523
    6. '           ' → logprob: -9.306310653686523
    7. '(bit' → logprob: -9.306310653686523
    8. 'False' → logprob: -9.431310653686523
    9. ' k' → logprob: -10.056310653686523
    10. ' ' → logprob: -10.181310653686523

Token 323: '_bit' (ID: 39574)
  Prédit: '_bit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_bit' → logprob: -0.0006606113165616989
    2. 'bit' → logprob: -7.500660419464111
    3. '_bits' → logprob: -9.37566089630127
    4. '=' → logprob: -11.50066089630127
    5. '_' → logprob: -12.37566089630127
    6. ' bit' → logprob: -12.75066089630127
    7. '_BIT' → logprob: -13.25066089630127
    8. ' =' → logprob: -13.87566089630127
    9. '-bit' → logprob: -14.37566089630127
    10. '0' → logprob: -14.62566089630127

Token 324: ' *' (ID: 425)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.7826577425003052
    2. ' =' → logprob: -1.0326577425003052
    3. 'must' → logprob: -2.9076576232910156
    4. ' must' → logprob: -3.0326576232910156
    5. 'does' → logprob: -3.7826576232910156
    6. 'cannot' → logprob: -3.9076576232910156
    7. '^' → logprob: -5.282657623291016
    8. 'is' → logprob: -5.407657623291016
    9. ' ^' → logprob: -5.532657623291016
    10. ' does' → logprob: -5.532657623291016

Token 325: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -5.848420551046729e-05
    2. ' ' → logprob: -9.7500581741333
    3. '000' → logprob: -17.250059127807617
    4. '```' → logprob: -17.250059127807617
    5. '   ' → logprob: -17.625059127807617
    6. '[' → logprob: -18.375059127807617
    7. '1' → logprob: -18.375059127807617
    8. ' ' → logprob: -18.625059127807617
    9. '(' → logprob: -18.750059127807617
    10. '`' → logprob: -18.937559127807617

Token 326: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -5.180879816180095e-05
    2. ' ' → logprob: -9.875051498413086
    3. '   ' → logprob: -16.250051498413086
    4. '000' → logprob: -16.375051498413086
    5. '```' → logprob: -16.625051498413086
    6. '[' → logprob: -17.625051498413086
    7. '(' → logprob: -17.937551498413086
    8. ' ' → logprob: -17.937551498413086
    9. 'False' → logprob: -17.937551498413086
    10. '1' → logprob: -18.187551498413086

Token 327: ' =' (ID: 314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 328: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.005234356038272381
    2. ' ' → logprob: -5.255234241485596
    3. '000' → logprob: -15.255234718322754
    4. ' ' → logprob: -15.630234718322754
    5. '   ' → logprob: -17.130233764648438
    6. 'False' → logprob: -17.255233764648438
    7. '1' → logprob: -17.442733764648438
    8. '```' → logprob: -17.567733764648438
    9. ',' → logprob: -17.630233764648438
    10. '  ' → logprob: -18.005233764648438

Token 329: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -2.8087270038668066e-05
    2. ' ' → logprob: -10.500027656555176
    3. 'False' → logprob: -14.875027656555176
    4. '000' → logprob: -16.125028610229492
    5. '```' → logprob: -17.750028610229492
    6. '   ' → logprob: -17.875028610229492
    7. 'false' → logprob: -17.875028610229492
    8. '۰' → logprob: -18.312528610229492
    9. ' ' → logprob: -18.562528610229492
    10. 'bit' → logprob: -18.750028610229492

Token 330: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 331: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.2342904657125473
    2. '<|end|>' → logprob: -1.7342904806137085
    3. '
' → logprob: -3.984290361404419
    4. '       ' → logprob: -5.984290599822998
    5. '<|end|>' → logprob: -5.984290599822998
    6. '\n' → logprob: -5.984290599822998
    7. '            
' → logprob: -6.609290599822998
    8. ',' → logprob: -6.984290599822998
    9. '  
' → logprob: -7.609290599822998
    10. '   ' → logprob: -7.859290599822998

Token 332: ' #' (ID: 1069)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.34412461519241333
    2. '       ' → logprob: -1.9691245555877686
    3. '0' → logprob: -3.5941245555877686
    4. '\n' → logprob: -3.5941245555877686
    5. 'k' → logprob: -4.094124794006348
    6. ' if' → logprob: -4.594124794006348
    7. ' k' → logprob: -4.719124794006348
    8. '
' → logprob: -4.844124794006348
    9. ',' → logprob: -5.094124794006348
    10. '<|end|>' → logprob: -5.094124794006348

Token 333: ' So' (ID: 2632)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.4029771685600281
    2. 'k' → logprob: -1.7779772281646729
    3. ' if' → logprob: -3.152977228164673
    4. ' k' → logprob: -3.152977228164673
    5. '       ' → logprob: -3.402977228164673
    6. ' key' → logprob: -3.777977228164673
    7. 'key' → logprob: -4.652976989746094
    8. 'if' → logprob: -5.527976989746094
    9. '   ' → logprob: -5.652976989746094
    10. 'D' → logprob: -7.277976989746094

Token 334: ' bit' (ID: 3546)
  Prédit: ' bit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' bit' → logprob: -1.1339374780654907
    2. 'bit' → logprob: -1.3839374780654907
    3. 'k' → logprob: -1.7589374780654907
    4. ' if' → logprob: -2.258937358856201
    5. 'if' → logprob: -2.383937358856201
    6. 'D' → logprob: -4.133937358856201
    7. ' k' → logprob: -4.383937358856201
    8. 'key' → logprob: -5.133937358856201
    9. ' key' → logprob: -5.508937358856201
    10. ' D' → logprob: -5.758937358856201

Token 335: '_chk' (ID: 164238)
  Prédit: '_sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.2885805070400238
    2. '_chk' → logprob: -1.4135805368423462
    3. 'sum' → logprob: -5.913580417633057
    4. 'chk' → logprob: -6.663580417633057
    5. '_k' → logprob: -7.163580417633057
    6. '_key' → logprob: -7.788580417633057
    7. 'k' → logprob: -7.913580417633057
    8. '_check' → logprob: -8.413580894470215
    9. '   ' → logprob: -8.538580894470215
    10. '_checksum' → logprob: -9.038580894470215

Token 336: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.8954369425773621
    2. '=' → logprob: -1.2704370021820068
    3. ' ==' → logprob: -1.2704370021820068
    4. ' =' → logprob: -3.895437002182007
    5. ' ^=' → logprob: -5.020436763763428
    6. '^' → logprob: -6.395436763763428
    7. ' ^' → logprob: -7.145436763763428
    8. ' ' → logprob: -8.395437240600586
    9. ' must' → logprob: -9.395437240600586
    10. ' is' → logprob: -9.520437240600586

Token 337: ' bit' (ID: 3546)
  Prédit: 'bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bit' → logprob: -0.10020774602890015
    2. ' bit' → logprob: -2.350207805633545
    3. '(bit' → logprob: -13.975207328796387
    4. '0' → logprob: -16.475208282470703
    5. 'bitr' → logprob: -16.975208282470703
    6. ' ' → logprob: -17.100208282470703
    7. 'bits' → logprob: -17.975208282470703
    8. '.bit' → logprob: -18.100208282470703
    9. '_bit' → logprob: -18.600208282470703
    10. 'Bit' → logprob: -18.725208282470703

Token 338: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.006756697781383991
    2. 'sum' → logprob: -5.131756782531738
    3. '_chk' → logprob: -7.756756782531738
    4. '_s' → logprob: -9.506756782531738
    5. '_' → logprob: -9.881756782531738
    6. ')' → logprob: -10.006756782531738
    7. '_check' → logprob: -10.256756782531738
    8. 'xor' → logprob: -10.506756782531738
    9. '_bit' → logprob: -10.631756782531738
    10. 'bit' → logprob: -10.631756782531738

Token 339: ' if' (ID: 538)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.25127115845680237
    2. '<|end|>' → logprob: -1.87627112865448
    3. '\n' → logprob: -4.0012712478637695
    4. '  
' → logprob: -4.8762712478637695
    5. '<|end|>' → logprob: -4.8762712478637695
    6. ' if' → logprob: -5.1262712478637695
    7. '           ' → logprob: -5.1262712478637695
    8. ' 
' → logprob: -5.5012712478637695
    9. ' ' → logprob: -5.7512712478637695
    10. '   ' → logprob: -6.1262712478637695

Token 340: ' k' (ID: 372)
  Prédit: ' bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' bit' → logprob: -0.796771228313446
    2. ' True' → logprob: -0.921771228313446
    3. 'True' → logprob: -2.671771287918091
    4. ' False' → logprob: -3.796771287918091
    5. 'False' → logprob: -4.046771049499512
    6. 'bit' → logprob: -4.046771049499512
    7. ' not' → logprob: -4.296771049499512
    8. ' (' → logprob: -5.796771049499512
    9. ' ' → logprob: -6.296771049499512
    10. '0' → logprob: -6.296771049499512

Token 341: '_bit' (ID: 39574)
  Prédit: '_chk'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_chk' → logprob: -0.5896814465522766
    2. '_bit' → logprob: -0.8396814465522766
    3. '_sum' → logprob: -4.464681625366211
    4. 'bit' → logprob: -7.839681625366211
    5. 'chk' → logprob: -7.839681625366211
    6. '_ch' → logprob: -8.214681625366211
    7. '_' → logprob: -8.214681625366211
    8. '==' → logprob: -8.464681625366211
    9. '_check' → logprob: -8.589681625366211
    10. ' bit' → logprob: -9.464681625366211

Token 342: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -1.3618085384368896
    2. '<|end|>' → logprob: -1.3618085384368896
    3. '==' → logprob: -1.3618085384368896
    4. ' is' → logprob: -2.4868085384368896
    5. ' ==' → logprob: -2.9868085384368896
    6. ' can' → logprob: -3.7368085384368896
    7. ' ' → logprob: -3.8618085384368896
    8. '0' → logprob: -4.486808776855469
    9. ' =' → logprob: -5.111808776855469
    10. ' ^' → logprob: -5.736808776855469

Token 343: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.002187141450121999
    2. ' ' → logprob: -6.127187252044678
    3. '1' → logprob: -14.00218677520752
    4. '?' → logprob: -14.87718677520752
    5. ' ' → logprob: -15.75218677520752
    6. '   ' → logprob: -16.002187728881836
    7. 'any' → logprob: -16.252187728881836
    8. 'False' → logprob: -16.877187728881836
    9. ' any' → logprob: -16.939687728881836
    10. 'x' → logprob: -17.127187728881836

Token 344: ' =>' (ID: 871)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 345: ' bit' (ID: 3546)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.20401960611343384
    2. 'if' → logprob: -3.079019546508789
    3. ' continue' → logprob: -3.454019546508789
    4. ' pass' → logprob: -3.579019546508789
    5. ' k' → logprob: -3.954019546508789
    6. '           ' → logprob: -4.079019546508789
    7. ' key' → logprob: -4.579019546508789
    8. 'k' → logprob: -5.079019546508789
    9. 'continue' → logprob: -5.204019546508789
    10. ' return' → logprob: -5.454019546508789

Token 346: '_chk' (ID: 164238)
  Prédit: '_chk'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_chk' → logprob: -0.018022926524281502
    2. '_sum' → logprob: -4.7680230140686035
    3. 'chk' → logprob: -5.1430230140686035
    4. 'sum' → logprob: -6.3930230140686035
    5. '_ch' → logprob: -6.7680230140686035
    6. '_check' → logprob: -8.268022537231445
    7. '_' → logprob: -9.768022537231445
    8. 'ch' → logprob: -10.268022537231445
    9. '=' → logprob: -10.518022537231445
    10. '_cnt' → logprob: -11.330522537231445

Token 347: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.03830116242170334
    2. '==' → logprob: -3.2883012294769287
    3. ' !=' → logprob: -8.538301467895508
    4. ' ' → logprob: -10.538301467895508
    5. '<|end|>' → logprob: -11.538301467895508
    6. '=' → logprob: -11.788301467895508
    7. ' =' → logprob: -12.538301467895508
    8. ' must' → logprob: -12.788301467895508
    9. ' ' → logprob: -12.788301467895508
    10. '!=' → logprob: -12.913301467895508

Token 348: ' bit' (ID: 3546)
  Prédit: 'bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bit' → logprob: -0.10020861029624939
    2. ' bit' → logprob: -2.3502085208892822
    3. '(bit' → logprob: -13.350208282470703
    4. 'bitr' → logprob: -16.475208282470703
    5. '           ' → logprob: -16.475208282470703
    6. '   ' → logprob: -16.600208282470703
    7. 'bits' → logprob: -16.850208282470703
    8. ' ' → logprob: -16.975208282470703
    9. '.bit' → logprob: -17.350208282470703
    10. '```' → logprob: -17.975208282470703

Token 349: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.0019998925272375345
    2. 'sum' → logprob: -6.376999855041504
    3. '_chk' → logprob: -8.251999855041504
    4. '_' → logprob: -11.126999855041504
    5. '_s' → logprob: -12.251999855041504
    6. ')' → logprob: -13.001999855041504
    7. 'chk' → logprob: -13.251999855041504
    8. ' sum' → logprob: -13.251999855041504
    9. 's' → logprob: -13.376999855041504
    10. '_check' → logprob: -13.501999855041504

Token 350: ' if' (ID: 538)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.517535388469696
    2. '       ' → logprob: -2.267535448074341
    3. '           ' → logprob: -2.392535448074341
    4. '<|end|>' → logprob: -2.392535448074341
    5. ' if' → logprob: -3.142535448074341
    6. '\n' → logprob: -4.392535209655762
    7. ' ' → logprob: -4.767535209655762
    8. ' 
' → logprob: -4.767535209655762
    9. '  
' → logprob: -4.892535209655762
    10. ',' → logprob: -5.017535209655762

Token 351: ' k' (ID: 372)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.9248379468917847
    2. 'k' → logprob: -1.0498379468917847
    3. 'False' → logprob: -2.299838066101074
    4. ' k' → logprob: -2.674838066101074
    5. 'True' → logprob: -3.799838066101074
    6. ' ' → logprob: -3.924838066101074
    7. ' False' → logprob: -4.299838066101074
    8. ' bit' → logprob: -4.549838066101074
    9. ' True' → logprob: -4.924838066101074
    10. 'bit' → logprob: -5.049838066101074

Token 352: '_bit' (ID: 39574)
  Prédit: '_bit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_bit' → logprob: -0.00016837897419463843
    2. '_sum' → logprob: -9.625168800354004
    3. '0' → logprob: -9.875168800354004
    4. '_' → logprob: -11.375168800354004
    5. 'bit' → logprob: -11.500168800354004
    6. '_chk' → logprob: -12.000168800354004
    7. '_key' → logprob: -12.125168800354004
    8. '_BIT' → logprob: -12.750168800354004
    9. '=' → logprob: -12.750168800354004
    10. '_opt' → logprob: -12.875168800354004

Token 353: ' ==' (ID: 951)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5208712816238403
    2. '==' → logprob: -1.0208712816238403
    3. ' ==' → logprob: -3.145871162414551
    4. ' =' → logprob: -6.145871162414551
    5. '0' → logprob: -7.645871162414551
    6. ' ' → logprob: -10.39587116241455
    7. '=False' → logprob: -11.27087116241455
    8. '==
' → logprob: -11.89587116241455
    9. '<|end|>' → logprob: -13.14587116241455
    10. '[' → logprob: -13.39587116241455

Token 354: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.02124307118356228
    2. ' ' → logprob: -3.896243095397949
    3. '1' → logprob: -7.271243095397949
    4. '   ' → logprob: -13.52124309539795
    5. ' ' → logprob: -13.64624309539795
    6. '<|end|>' → logprob: -14.02124309539795
    7. '```' → logprob: -14.70874309539795
    8. '.' → logprob: -15.33374309539795
    9. '=' → logprob: -15.70874309539795
    10. '  ' → logprob: -15.83374309539795

Token 355: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.7154502272605896
    2. '<|end|>' → logprob: -0.9654502272605896
    3. '
' → logprob: -3.0904502868652344
    4. '       ' → logprob: -3.4654502868652344
    5. ',' → logprob: -3.7154502868652344
    6. ' ' → logprob: -4.965450286865234
    7. '<|end|>' → logprob: -5.340450286865234
    8. '  
' → logprob: -6.090450286865234
    9. '            
' → logprob: -6.215450286865234
    10. ' or' → logprob: -6.840450286865234

Token 356: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.01966852881014347
    2. '<|end|>' → logprob: -4.2696685791015625
    3. '       ' → logprob: -6.2696685791015625
    4. ' ' → logprob: -6.6446685791015625
    5. '            
' → logprob: -7.6446685791015625
    6. ' 
' → logprob: -8.019668579101562
    7. ',' → logprob: -8.269668579101562
    8. '   ' → logprob: -8.394668579101562
    9. '
' → logprob: -8.644668579101562
    10. '<|end|>' → logprob: -9.269668579101562

Token 357: ' #' (ID: 1069)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.2853636145591736
    2. '<|end|>' → logprob: -2.2853636741638184
    3. ' if' → logprob: -2.5353636741638184
    4. '       ' → logprob: -3.6603636741638184
    5. ' ' → logprob: -4.785363674163818
    6. '#' (adapté à ' #') → logprob: -5.035363674163818
    7. '
' → logprob: -5.160363674163818
    8. 'if' → logprob: -5.535363674163818
    9. ',' → logprob: -5.660363674163818
    10. '   ' → logprob: -6.285363674163818

Token 358: ' Or' (ID: 2604)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.19456107914447784
    2. '           ' → logprob: -2.194561004638672
    3. 'if' → logprob: -3.444561004638672
    4. ' k' → logprob: -3.819561004638672
    5. '       ' → logprob: -6.069561004638672
    6. ' key' → logprob: -6.194561004638672
    7. 'k' → logprob: -6.444561004638672
    8. ' for' → logprob: -6.694561004638672
    9. '0' → logprob: -6.819561004638672
    10. ' ' → logprob: -7.194561004638672

Token 359: ' bit' (ID: 3546)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.4513481557369232
    2. ' bit' → logprob: -2.201348066329956
    3. 'k' → logprob: -2.451348066329956
    4. '           ' → logprob: -2.826348066329956
    5. ' if' → logprob: -2.951348066329956
    6. 'bit' → logprob: -3.826348066329956
    7. '#' → logprob: -4.951348304748535
    8. ' we' → logprob: -5.951348304748535
    9. ' (' → logprob: -5.951348304748535
    10. ' #' → logprob: -6.076348304748535

Token 360: '_chk' (ID: 164238)
  Prédit: '_chk'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_chk' → logprob: -0.026530416682362556
    2. '_sum' → logprob: -3.7765305042266846
    3. '_' → logprob: -6.7765302658081055
    4. '=' → logprob: -7.5265302658081055
    5. ' =' → logprob: -7.9015302658081055
    6. '_ch' → logprob: -8.401530265808105
    7. ' _' → logprob: -8.526530265808105
    8. '_check' → logprob: -8.901530265808105
    9. 'chk' → logprob: -9.026530265808105
    10. '_bit' → logprob: -9.776530265808105

Token 361: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.031103339046239853
    2. '==' → logprob: -3.6561033725738525
    3. ' ' → logprob: -6.281103134155273
    4. ' ^' → logprob: -6.531103134155273
    5. ' ^=' → logprob: -7.906103134155273
    6. ' =' → logprob: -8.031103134155273
    7. ' !=' → logprob: -8.031103134155273
    8. '<|end|>' → logprob: -8.531103134155273
    9. '=' → logprob: -9.781103134155273
    10. '^' → logprob: -10.531103134155273

Token 362: ' bit' (ID: 3546)
  Prédit: ' bit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' bit' → logprob: -0.5763735175132751
    2. 'bit' → logprob: -0.8263735175132751
    3. '(bit' → logprob: -8.576373100280762
    4. '1' → logprob: -9.451373100280762
    5. ' (' → logprob: -9.826373100280762
    6. ' ' → logprob: -9.826373100280762
    7. '   ' → logprob: -11.201373100280762
    8. '0' → logprob: -11.201373100280762
    9. '(' → logprob: -11.451373100280762
    10. ' ' → logprob: -12.576373100280762

Token 363: '_sum' (ID: 29859)
  Prédit: '_sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_sum' → logprob: -0.0010355490958318114
    2. 'sum' → logprob: -6.876035690307617
    3. '_' → logprob: -14.751035690307617
    4. 'Sum' → logprob: -14.751035690307617
    5. ' sum' → logprob: -14.751035690307617
    6. 's' → logprob: -14.876035690307617
    7. 'xor' → logprob: -14.876035690307617
    8. '_set' → logprob: -15.376035690307617
    9. '_s' → logprob: -16.001035690307617
    10. ')' → logprob: -16.126035690307617

Token 364: ' xor' (ID: 106402)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 365: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00702580064535141
    2. ' ' → logprob: -5.007025718688965
    3. 'k' → logprob: -8.257025718688965
    4. '0' → logprob: -10.632025718688965
    5. ' k' → logprob: -10.632025718688965
    6. '   ' → logprob: -13.757025718688965
    7. '(' → logprob: -15.007025718688965
    8. '  ' → logprob: -15.007025718688965
    9. 'bit' → logprob: -15.757025718688965
    10. '`' → logprob: -16.19452667236328

Token 366: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.003009792184457183
    2. 'k' → logprob: -6.128009796142578
    3. ' ' → logprob: -7.753009796142578
    4. '0' → logprob: -7.878009796142578
    5. ' k' → logprob: -11.503009796142578
    6. 'key' → logprob: -13.253009796142578
    7. '   ' → logprob: -13.628009796142578
    8. 'bit' → logprob: -13.878009796142578
    9. '`' → logprob: -15.128009796142578
    10. 'True' → logprob: -15.628009796142578

Token 367: ' if' (ID: 538)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 368: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.38923677802085876
    2. 'k' → logprob: -1.1392368078231812
    3. '0' → logprob: -7.389236927032471
    4. ' bit' → logprob: -7.514236927032471
    5. '1' → logprob: -7.764236927032471
    6. ' ' → logprob: -8.639236450195312
    7. 'True' → logprob: -8.889236450195312
    8. ' True' → logprob: -8.889236450195312
    9. 'False' → logprob: -9.014236450195312
    10. 'bit' → logprob: -9.639236450195312

Token 369: '_bit' (ID: 39574)
  Prédit: '_bit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_bit' → logprob: -4.127333340875339e-06
    2. '_' → logprob: -12.875003814697266
    3. '_BIT' → logprob: -14.000003814697266
    4. 'bit' → logprob: -14.500003814697266
    5. '_key' → logprob: -17.000003814697266
    6. 'Bit' → logprob: -17.375003814697266
    7. '_bits' → logprob: -17.500003814697266
    8. '_chk' → logprob: -17.625003814697266
    9. '_b' → logprob: -17.875003814697266
    10. ' bit' → logprob: -17.875003814697266

Token 370: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.8043917417526245
    2. ' =' → logprob: -1.3043917417526245
    3. ' ==' → logprob: -1.6793917417526245
    4. '<|end|>' → logprob: -2.929391860961914
    5. '==' → logprob: -3.679391860961914
    6. ' ' → logprob: -4.429391860961914
    7. '<|end|>' → logprob: -7.804391860961914
    8. ' #' → logprob: -7.804391860961914
    9. ' bit' → logprob: -8.054391860961914
    10. ' ^=' → logprob: -8.054391860961914

Token 371: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00107389607001096
    2. ' ' → logprob: -6.876073837280273
    3. '0' → logprob: -10.126073837280273
    4. '<|end|>' → logprob: -14.876073837280273
    5. '   ' → logprob: -15.501073837280273
    6. '```' → logprob: -15.938573837280273
    7. '  ' → logprob: -16.626073837280273
    8. '۱' → logprob: -17.313573837280273
    9. '１' → logprob: -17.626073837280273
    10. '...' → logprob: -17.626073837280273

Token 372: ' impossible' (ID: 19786)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 373: ' since' (ID: 3630)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 374: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5880192518234253
    2. '8' → logprob: -0.8380192518234253
    3. ' True' → logprob: -5.463019371032715
    4. '0' → logprob: -6.088019371032715
    5. 'False' → logprob: -6.588019371032715
    6. 'True' → logprob: -6.588019371032715
    7. ' False' → logprob: -7.088019371032715
    8. ' bit' → logprob: -7.338019371032715
    9. '(' → logprob: -8.088019371032715
    10. ' (' → logprob: -8.213019371032715

Token 375: '8' (ID: 23)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.4664342403411865
    2. '8' → logprob: -1.0914342403411865
    3. 'k' → logprob: -4.466434478759766
    4. ' ' → logprob: -4.716434478759766
    5. 'xor' → logprob: -5.341434478759766
    6. '(' → logprob: -5.716434478759766
    7. '1' → logprob: -5.841434478759766
    8. ' k' → logprob: -7.091434478759766
    9. 'eight' → logprob: -7.341434478759766
    10. 'bit' → logprob: -7.341434478759766

Token 376: ' is' (ID: 382)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 377: ' even' (ID: 1952)
  Prédit: 'even'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'even' → logprob: -0.03044983372092247
    2. ' even' → logprob: -3.530449867248535
    3. '0' → logprob: -8.030449867248535
    4. '8' → logprob: -8.030449867248535
    5. '1' → logprob: -11.155449867248535
    6. ' ' → logprob: -11.655449867248535
    7. '2' → logprob: -11.905449867248535
    8. '>' → logprob: -13.030449867248535
    9. 'Even' → logprob: -13.030449867248535
    10. '```' → logprob: -13.155449867248535

Token 378: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 379: '           ' (ID: 352)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 380: ' #' (ID: 1069)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.17095626890659332
    2. '<|end|>' → logprob: -2.5459563732147217
    3. '       ' → logprob: -2.9209563732147217
    4. ' ' → logprob: -5.545956134796143
    5. '\n' → logprob: -5.795956134796143
    6. '   ' → logprob: -5.795956134796143
    7. ' 
' → logprob: -6.170956134796143
    8. '            
' → logprob: -6.420956134796143
    9. '  
' → logprob: -6.545956134796143
    10. '<|end|>' → logprob: -6.795956134796143

Token 381: ' So' (ID: 2632)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.8610404133796692
    2. '0' → logprob: -1.3610403537750244
    3. ' ' → logprob: -1.9860403537750244
    4. '       ' → logprob: -2.2360403537750244
    5. ' if' → logprob: -4.2360405921936035
    6. ' k' → logprob: -4.4860405921936035
    7. '1' → logprob: -4.7360405921936035
    8. '   ' → logprob: -5.1110405921936035
    9. ' 
' → logprob: -5.2360405921936035
    10. ' bit' → logprob: -5.3610405921936035

Token 382: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.10075855255126953
    2. 'if' → logprob: -3.1007585525512695
    3. ' pass' → logprob: -4.3507585525512695
    4. ' continue' → logprob: -4.4757585525512695
    5. ' k' → logprob: -4.7257585525512695
    6. ' return' → logprob: -4.8507585525512695
    7. ' assert' → logprob: -6.2257585525512695
    8. 'k' → logprob: -6.7257585525512695
    9. 'continue' → logprob: -6.7257585525512695
    10. ' key' → logprob: -6.7257585525512695

Token 383: ' bit' (ID: 3546)
  Prédit: ' bit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' bit' → logprob: -0.12714774906635284
    2. 'bit' → logprob: -2.127147674560547
    3. '(bit' → logprob: -8.877147674560547
    4. ' D' → logprob: -10.252147674560547
    5. 'D' → logprob: -11.127147674560547
    6. ' ' → logprob: -11.627147674560547
    7. ' (' → logprob: -11.877147674560547
    8. '(' → logprob: -12.377147674560547
    9. '   ' → logprob: -13.002147674560547
    10. ' ' → logprob: -13.127147674560547

Token 384: '_sum' (ID: 29859)
  Prédit: '_chk'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_chk' → logprob: -0.0016720877029001713
    2. '_sum' → logprob: -6.501672267913818
    3. 'chk' → logprob: -9.50167179107666
    4. '_ch' → logprob: -10.50167179107666
    5. '_check' → logprob: -10.50167179107666
    6. '_' → logprob: -12.00167179107666
    7. '_chr' → logprob: -12.25167179107666
    8. '_cnt' → logprob: -12.37667179107666
    9. 'sum' → logprob: -12.50167179107666
    10. '_ck' → logprob: -13.25167179107666

Token 385: ' !=' (ID: 1666)
  Prédit: '!='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '!=' → logprob: -0.21259012818336487
    2. ' !=' → logprob: -2.087590217590332
    3. '==' → logprob: -2.712590217590332
    4. ' ==' → logprob: -6.837590217590332
    5. '^' → logprob: -9.837590217590332
    6. '```' → logprob: -11.962590217590332
    7. '=' → logprob: -12.087590217590332
    8. '()!=' → logprob: -12.462590217590332
    9. ')!=' → logprob: -12.587590217590332
    10. ' ' → logprob: -13.087590217590332

Token 386: ' bit' (ID: 3546)
  Prédit: 'bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bit' → logprob: -0.061968132853507996
    2. ' bit' → logprob: -2.8119680881500244
    3. '(bit' → logprob: -14.686967849731445
    4. '=' → logprob: -17.936967849731445
    5. ' ' → logprob: -18.311967849731445
    6. 'bitr' → logprob: -18.436967849731445
    7. '```' → logprob: -19.061967849731445
    8. '.bit' → logprob: -19.061967849731445
    9. '_bit' → logprob: -19.186967849731445
    10. '0' → logprob: -19.436967849731445

Token 387: '_chk' (ID: 164238)
  Prédit: '_chk'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_chk' → logprob: -0.0017491996986791492
    2. '_sum' → logprob: -6.501749038696289
    3. '_set' → logprob: -8.751749038696289
    4. '_chr' → logprob: -10.626749038696289
    5. '_ch' → logprob: -10.876749038696289
    6. '_check' → logprob: -11.876749038696289
    7. '_bit' → logprob: -12.376749038696289
    8. '_cnt' → logprob: -12.376749038696289
    9. 'chk' → logprob: -12.376749038696289
    10. '_' → logprob: -12.376749038696289

Token 388: ' then' (ID: 1815)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.010986162349581718
    2. ':
' → logprob: -5.385986328125
    3. ',' → logprob: -6.135986328125
    4. ' ==' → logprob: -7.135986328125
    5. '==' → logprob: -7.385986328125
    6. ' :' → logprob: -7.510986328125
    7. '=' → logprob: -7.510986328125
    8. ':return' → logprob: -8.010986328125
    9. '):' → logprob: -8.135986328125
    10. ')' → logprob: -8.510986328125

Token 389: ' k' (ID: 372)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.14178627729415894
    2. 'return' → logprob: -2.1417863368988037
    3. ' raise' → logprob: -5.141786098480225
    4. '               ' → logprob: -5.766786098480225
    5. ' break' → logprob: -5.891786098480225
    6. '           ' → logprob: -6.391786098480225
    7. 'raise' → logprob: -7.766786098480225
    8. 'break' → logprob: -8.141786575317383
    9. 'print' → logprob: -9.141786575317383
    10. ' print' → logprob: -9.141786575317383

Token 390: '_bit' (ID: 39574)
  Prédit: 'ey'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ey' → logprob: -0.31324827671051025
    2. '_bit' → logprob: -1.4382482767105103
    3. '_sum' → logprob: -3.5632481575012207
    4. '=' → logprob: -7.063248157501221
    5. ' =' → logprob: -7.313248157501221
    6. '_key' → logprob: -7.688248157501221
    7. 'bit' → logprob: -7.688248157501221
    8. 'EY' → logprob: -8.938248634338379
    9. 'eep' → logprob: -9.313248634338379
    10. 'et' → logprob: -9.313248634338379

Token 391: ' must' (ID: 2804)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6330785155296326
    2. ' =' → logprob: -0.7580785155296326
    3. ' cannot' → logprob: -8.883078575134277
    4. ' is' → logprob: -9.383078575134277
    5. 'cannot' → logprob: -9.758078575134277
    6. ' ^=' → logprob: -10.133078575134277
    7. '<|end|>' → logprob: -10.758078575134277
    8. '==' → logprob: -11.008078575134277
    9. ' ==' → logprob: -11.133078575134277
    10. ' ' → logprob: -11.258078575134277

Token 392: ' flip' (ID: 29130)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.7358738780021667
    2. ' be' → logprob: -1.2358739376068115
    3. '0' → logprob: -1.6108739376068115
    4. ' ' → logprob: -4.235873699188232
    5. '1' → logprob: -4.985873699188232
    6. ' raise' → logprob: -6.235873699188232
    7. ' not' → logprob: -6.235873699188232
    8. ' =' → logprob: -6.485873699188232
    9. '#' → logprob: -6.985873699188232
    10. 'be' → logprob: -7.110873699188232

Token 393: ' bits' (ID: 18189)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.9906454086303711
    2. ' ' → logprob: -1.240645408630371
    3. '=' → logprob: -1.990645408630371
    4. ' if' → logprob: -2.615645408630371
    5. ':' → logprob: -3.115645408630371
    6. '<|end|>' → logprob: -3.615645408630371
    7. ' :' → logprob: -4.615645408630371
    8. ':
' → logprob: -4.865645408630371
    9. '   ' → logprob: -4.990645408630371
    10. '           ' → logprob: -5.490645408630371

Token 394: ' in' (ID: 306)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7021774649620056
    2. '<|end|>' → logprob: -1.0771775245666504
    3. ':' → logprob: -2.9521775245666504
    4. ' if' → logprob: -3.4521775245666504
    5. '=' → logprob: -3.5771775245666504
    6. '[' → logprob: -5.07717752456665
    7. ' =' → logprob: -5.20217752456665
    8. '0' → logprob: -5.32717752456665
    9. ' :' → logprob: -5.45217752456665
    10. ')' → logprob: -5.57717752456665

Token 395: ' some' (ID: 1236)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.08832363039255142
    2. ' N' → logprob: -3.9633235931396484
    3. 'some' → logprob: -4.088323593139648
    4. 'D' → logprob: -4.213323593139648
    5. ' at' → logprob: -5.338323593139648
    6. 'the' → logprob: -5.463323593139648
    7. 'key' → logprob: -5.963323593139648
    8. 'v' → logprob: -6.588323593139648
    9. 'all' → logprob: -6.713323593139648
    10. 'k' → logprob: -6.713323593139648

Token 396: ' way' (ID: 2006)
  Prédit: 'way'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'way' → logprob: -0.5096257328987122
    2. 'N' → logprob: -2.2596256732940674
    3. 'other' → logprob: -2.5096256732940674
    4. ' way' → logprob: -2.7596256732940674
    5. 'different' → logprob: -3.6346256732940674
    6. 'v' → logprob: -4.0096259117126465
    7. ' N' → logprob: -4.1346259117126465
    8. 'positions' → logprob: -4.5096259117126465
    9. 'bits' → logprob: -4.6346259117126465
    10. ' other' → logprob: -4.8846259117126465

Token 397: '.
' (ID: 558)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 398: '           ' (ID: 352)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.24432750046253204
    2. '<|end|>' → logprob: -2.1193275451660156
    3. '       ' → logprob: -2.8693275451660156
    4. '           ' → logprob: -4.244327545166016
    5. '        ' → logprob: -4.869327545166016
    6. '    ' → logprob: -5.619327545166016
    7. ' 
' → logprob: -5.744327545166016
    8. '   ' → logprob: -5.994327545166016
    9. '  ' → logprob: -6.619327545166016
    10. ')' → logprob: -6.619327545166016

Token 399: ' #' (ID: 1069)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.03145907446742058
    2. '0' → logprob: -4.781458854675293
    3. '<|end|>' → logprob: -5.031458854675293
    4. ' 
' → logprob: -5.531458854675293
    5. '       ' → logprob: -5.656458854675293
    6. '        ' → logprob: -6.156458854675293
    7. '    ' → logprob: -6.406458854675293
    8. '1' → logprob: -6.906458854675293
    9. '=' → logprob: -7.156458854675293
    10. '           ' → logprob: -7.781458854675293

Token 400: ' But' (ID: 3072)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.05960112065076828
    2. '0' → logprob: -3.684601068496704
    3. ' 
' → logprob: -4.934601306915283
    4. '        ' → logprob: -5.184601306915283
    5. '       ' → logprob: -5.184601306915283
    6. '<|end|>' → logprob: -5.684601306915283
    7. '           ' → logprob: -5.809601306915283
    8. ' if' → logprob: -6.309601306915283
    9. '    ' → logprob: -6.934601306915283
    10. '            ' → logprob: -7.309601306915283

Token 401: ' problem' (ID: 4792)
  Prédit: ' True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' True' → logprob: -0.8470292687416077
    2. ' ' → logprob: -1.597029209136963
    3. ' bit' → logprob: -2.097029209136963
    4. '8' → logprob: -2.972029209136963
    5. ' k' → logprob: -3.222029209136963
    6. 'True' → logprob: -3.347029209136963
    7. ' break' → logprob: -3.722029209136963
    8. '0' → logprob: -4.222029209136963
    9. ' key' → logprob: -4.222029209136963
    10. ' False' → logprob: -4.222029209136963

Token 402: ' says' (ID: 5003)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 403: ':' (ID: 25)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1570257991552353
    2. '<|end|>' → logprob: -3.1570258140563965
    3. '        ' → logprob: -3.6570258140563965
    4. '            ' → logprob: -4.2820258140563965
    5. '       ' → logprob: -4.4070258140563965
    6. '           ' → logprob: -4.7820258140563965
    7. ' k' → logprob: -5.0320258140563965
    8. ' 
' → logprob: -5.2820258140563965
    9. '    ' → logprob: -5.4070258140563965
    10. '#' → logprob: -6.0320258140563965

Token 404: ' the' (ID: 290)
  Prédit: ' key'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' key' → logprob: -1.1277817487716675
    2. ' pass' → logprob: -1.3777817487716675
    3. 'pass' → logprob: -2.502781867980957
    4. ' k' → logprob: -3.002781867980957
    5. 'key' → logprob: -3.002781867980957
    6. ' continue' → logprob: -3.127781867980957
    7. '#' → logprob: -3.252781867980957
    8. '           ' → logprob: -3.502781867980957
    9. 'continue' → logprob: -3.752781867980957
    10. ' if' → logprob: -4.002781867980957

Token 405: ' encryption' (ID: 48827)
  Prédit: ' key'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' key' → logprob: -0.16485299170017242
    2. ' code' → logprob: -2.664853096008301
    3. 'key' → logprob: -3.414853096008301
    4. 'k' → logprob: -4.039853096008301
    5. ' k' → logprob: -4.664853096008301
    6. ' next' → logprob: -5.539853096008301
    7. '#' → logprob: -5.789853096008301
    8. ' D' → logprob: -6.164853096008301
    9. ' best' → logprob: -6.664853096008301
    10. ' problem' → logprob: -6.789853096008301

Token 406: ' is' (ID: 382)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 407: ' ni' (ID: 2565)
  Prédit: 'xor'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'xor' → logprob: -1.5136651992797852
    2. ' key' → logprob: -2.013665199279785
    3. ' xor' → logprob: -2.013665199279785
    4. ' a' → logprob: -2.388665199279785
    5. ' XOR' → logprob: -2.638665199279785
    6. ' reversible' → logprob: -3.388665199279785
    7. ' unknown' → logprob: -3.388665199279785
    8. ' bit' → logprob: -3.388665199279785
    9. ' done' → logprob: -3.513665199279785
    10. 'key' → logprob: -3.638665199279785

Token 408: ' xor' (ID: 106402)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.19041024148464203
    2. ' _' → logprob: -2.8154101371765137
    3. ' xor' → logprob: -4.190410137176514
    4. 'xor' → logprob: -4.440410137176514
    5. 's' → logprob: -4.565410137176514
    6. ')' → logprob: -4.690410137176514
    7. ' ' → logprob: -4.940410137176514
    8. '=' → logprob: -4.940410137176514
    9. '[' → logprob: -5.065410137176514
    10. '_key' → logprob: -5.065410137176514

Token 409: ' k' (ID: 372)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6626096963882446
    2. '1' → logprob: -1.7876096963882446
    3. ' k' → logprob: -1.7876096963882446
    4. ' key' → logprob: -2.662609577178955
    5. ' bit' → logprob: -3.412609577178955
    6. '=' → logprob: -3.912609577178955
    7. 'k' → logprob: -4.412609577178955
    8. 'key' → logprob: -5.162609577178955
    9. '_' → logprob: -6.287609577178955
    10. '_key' → logprob: -6.662609577178955

Token 410: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 411: '           ' (ID: 352)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5199074149131775
    2. '<|end|>' → logprob: -1.0199074745178223
    3. '=' → logprob: -4.269907474517822
    4. '[' → logprob: -5.144907474517822
    5. '<|end|>' → logprob: -5.644907474517822
    6. '       ' → logprob: -6.019907474517822
    7. ' 
' → logprob: -6.144907474517822
    8. ' =' → logprob: -6.144907474517822
    9. '           ' → logprob: -6.144907474517822
    10. ':' → logprob: -6.644907474517822

Token 412: ' #' (ID: 1069)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.15039238333702087
    2. '           ' → logprob: -2.7753922939300537
    3. '<|end|>' → logprob: -3.1503922939300537
    4. '=' → logprob: -4.900392532348633
    5. ' =' → logprob: -5.400392532348633
    6. ' 
' → logprob: -5.525392532348633
    7. '       ' → logprob: -5.775392532348633
    8. '            ' → logprob: -5.775392532348633
    9. '1' → logprob: -6.275392532348633
    10. '        ' → logprob: -6.775392532348633

Token 413: ' When' (ID: 4296)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.07617295533418655
    2. '<|end|>' → logprob: -3.5761730670928955
    3. '       ' → logprob: -4.326172828674316
    4. ' 
' → logprob: -4.451172828674316
    5. '           ' → logprob: -5.326172828674316
    6. '=' → logprob: -5.451172828674316
    7. ')' → logprob: -6.326172828674316
    8. '        ' → logprob: -6.576172828674316
    9. '0' → logprob: -7.326172828674316
    10. '  ' → logprob: -7.451172828674316

Token 414: ' XOR' (ID: 147209)
  Prédit: '8'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '8' → logprob: -1.1399208307266235
    2. 'k' → logprob: -1.7649208307266235
    3. ' k' → logprob: -2.014920711517334
    4. ' ' → logprob: -2.514920711517334
    5. 'xor' → logprob: -2.764920711517334
    6. ' we' → logprob: -3.514920711517334
    7. 'n' → logprob: -3.514920711517334
    8. ' you' → logprob: -3.514920711517334
    9. ' the' → logprob: -3.889920711517334
    10. 'N' → logprob: -4.264920711517334

Token 415: ' over' (ID: 1072)
  Prédit: 'ing'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ing' → logprob: -1.2207432985305786
    2. ' ' → logprob: -1.8457432985305786
    3. '=' → logprob: -1.9707432985305786
    4. ' bit' → logprob: -2.470743179321289
    5. ' k' → logprob: -2.595743179321289
    6. ' over' → logprob: -2.720743179321289
    7. ' ing' → logprob: -2.970743179321289
    8. ' _' → logprob: -3.845743179321289
    9. '_' → logprob: -3.845743179321289
    10. ' =' → logprob: -4.470743179321289

Token 416: ' N' (ID: 478)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.8412960767745972
    2. ' i' → logprob: -1.5912960767745972
    3. ' all' → logprob: -2.2162961959838867
    4. 'N' → logprob: -2.4662961959838867
    5. 'all' → logprob: -2.4662961959838867
    6. ' N' → logprob: -3.5912961959838867
    7. 'v' → logprob: -3.5912961959838867
    8. ' v' → logprob: -4.841296195983887
    9. '_i' → logprob: -5.841296195983887
    10. '8' → logprob: -5.966296195983887

Token 417: '_i' (ID: 10853)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.3359806537628174
    2. '_i' → logprob: -1.8359806537628174
    3. ' _' → logprob: -2.9609806537628174
    4. ')' → logprob: -3.5859806537628174
    5. '<|end|>' → logprob: -4.585980415344238
    6. 's' → logprob: -4.710980415344238
    7. '[' → logprob: -5.210980415344238
    8. '_bit' → logprob: -5.710980415344238
    9. '   ' → logprob: -5.835980415344238
    10. ')_' → logprob: -6.210980415344238

Token 418: ''s' (ID: 885)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.5368168354034424
    2. ' ^' → logprob: -1.7868168354034424
    3. '^' → logprob: -2.5368168354034424
    4. '=' → logprob: -2.5368168354034424
    5. '^{' → logprob: -3.1618168354034424
    6. ' bit' → logprob: -3.1618168354034424
    7. '   ' → logprob: -3.6618168354034424
    8. '_i' → logprob: -3.6618168354034424
    9. '           ' → logprob: -3.7868168354034424
    10. 'bit' → logprob: -3.9118168354034424

Token 419: ' xor' (ID: 106402)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 420: ' with' (ID: 483)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.15927277505397797
    2. 'key' → logprob: -2.9092726707458496
    3. '=' → logprob: -3.1592726707458496
    4. ' k' → logprob: -3.2842726707458496
    5. ' key' → logprob: -4.40927267074585
    6. '=k' → logprob: -9.034273147583008
    7. 'bit' → logprob: -9.159273147583008
    8. ' bit' → logprob: -9.284273147583008
    9. '```' → logprob: -10.034273147583008
    10. '   ' → logprob: -10.159273147583008

Token 421: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.24822962284088135
    2. ' k' → logprob: -1.6232296228408813
    3. ' key' → logprob: -4.623229503631592
    4. 'key' → logprob: -4.623229503631592
    5. '(k' → logprob: -6.873229503631592
    6. ' (' → logprob: -7.123229503631592
    7. '0' → logprob: -8.12322998046875
    8. '(' → logprob: -8.87322998046875
    9. '(key' → logprob: -9.24822998046875
    10. '   ' → logprob: -9.37322998046875

Token 422: ':
' (ID: 734)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 423: '           ' (ID: 352)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.05574663355946541
    2. '=' → logprob: -3.680746555328369
    3. '<|end|>' → logprob: -4.805746555328369
    4. ' =' → logprob: -4.930746555328369
    5. ')' → logprob: -5.680746555328369
    6. ' )' → logprob: -6.055746555328369
    7. ',' → logprob: -7.305746555328369
    8. '#' → logprob: -7.305746555328369
    9. ' (' → logprob: -7.555746555328369
    10. '           ' → logprob: -7.680746555328369

Token 424: ' #' (ID: 1069)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.004735803231596947
    2. '<|end|>' → logprob: -7.254735946655273
    3. ' 
' → logprob: -7.879735946655273
    4. '=' → logprob: -7.879735946655273
    5. ' )' → logprob: -8.004735946655273
    6. '        ' → logprob: -8.004735946655273
    7. ')' → logprob: -8.129735946655273
    8. '            ' → logprob: -8.254735946655273
    9. ' (' → logprob: -8.504735946655273
    10. '    ' → logprob: -8.504735946655273

Token 425: ' XOR' (ID: 147209)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.027093635872006416
    2. ' 
' → logprob: -4.777093410491943
    3. '<|end|>' → logprob: -4.902093410491943
    4. ' bit' → logprob: -5.777093410491943
    5. ')' → logprob: -7.027093410491943
    6. '0' → logprob: -7.152093410491943
    7. ' (' → logprob: -7.527093410491943
    8. ' \' → logprob: -7.527093410491943
    9. ' )' → logprob: -7.777093410491943
    10. ' x' → logprob: -7.902093410491943

Token 426: ' over' (ID: 1072)
  Prédit: ' ^='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ^=' → logprob: -1.337956428527832
    2. ' =' → logprob: -1.837956428527832
    3. ' ^' → logprob: -2.087956428527832
    4. ' over' → logprob: -2.337956428527832
    5. '=' → logprob: -2.587956428527832
    6. '<|end|>' → logprob: -2.587956428527832
    7. ')' → logprob: -3.087956428527832
    8. ' bit' → logprob: -3.212956428527832
    9. ' ' → logprob: -3.587956428527832
    10. 'over' → logprob: -3.962956428527832

Token 427: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.734187126159668
    2. ' N' → logprob: -1.734187126159668
    3. 'k' → logprob: -1.984187126159668
    4. 'v' → logprob: -2.484187126159668
    5. ' k' → logprob: -3.109187126159668
    6. ' v' → logprob: -3.234187126159668
    7. '(N' → logprob: -4.484187126159668
    8. ' (' → logprob: -5.484187126159668
    9. 'i' → logprob: -5.734187126159668
    10. '(k' → logprob: -6.109187126159668

Token 428: '_i' (ID: 10853)
  Prédit: '_i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_i' → logprob: -0.05188470706343651
    2. 'i' → logprob: -3.551884651184082
    3. ')' → logprob: -4.551884651184082
    4. '_' → logprob: -5.676884651184082
    5. '[i' → logprob: -6.676884651184082
    6. 'v' → logprob: -6.676884651184082
    7. '^' → logprob: -6.801884651184082
    8. ')^' → logprob: -7.301884651184082
    9. '_bits' → logprob: -7.926884651184082
    10. ' _' → logprob: -8.176884651184082

Token 429: ''s' (ID: 885)
  Prédit: ' ^'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ^' → logprob: -0.6841618418693542
    2. ')' → logprob: -1.434161901473999
    3. '^{' → logprob: -2.559161901473999
    4. '           ' → logprob: -3.559161901473999
    5. '^' → logprob: -3.809161901473999
    6. '[i' → logprob: -4.05916166305542
    7. 's' → logprob: -4.18416166305542
    8. '[' → logprob: -4.43416166305542
    9. '   ' → logprob: -4.80916166305542
    10. '=' → logprob: -4.93416166305542

Token 430: ' xor' (ID: 106402)
  Prédit: ' ^'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ^' → logprob: -0.3149038255214691
    2. ')' → logprob: -2.314903736114502
    3. ' ^=' → logprob: -2.814903736114502
    4. ' xor' → logprob: -3.814903736114502
    5. ' bit' → logprob: -3.939903736114502
    6. ' =' → logprob: -4.689903736114502
    7. '^' → logprob: -4.689903736114502
    8. '<|end|>' → logprob: -5.189903736114502
    9. '=' → logprob: -5.314903736114502
    10. ' XOR' → logprob: -5.564903736114502

Token 431: ' with' (ID: 483)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.38416120409965515
    2. ' k' → logprob: -1.2591612339019775
    3. ' key' → logprob: -4.009160995483398
    4. 'key' → logprob: -4.134160995483398
    5. '=' → logprob: -7.884160995483398
    6. ' bit' → logprob: -8.009160995483398
    7. ' ' → logprob: -9.884160995483398
    8. '   ' → logprob: -10.384160995483398
    9. '```' → logprob: -10.384160995483398
    10. 'bit' → logprob: -10.509160995483398

Token 432: ' ' (ID: 220)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.1689697802066803
    2. ' k' → logprob: -2.0439698696136475
    3. 'key' → logprob: -4.168969631195068
    4. ' key' → logprob: -4.668969631195068
    5. ' (' → logprob: -7.918969631195068
    6. '0' → logprob: -8.043970108032227
    7. '(k' → logprob: -8.793970108032227
    8. '(' → logprob: -9.168970108032227
    9. '```' → logprob: -9.918970108032227
    10. ' ' → logprob: -10.543970108032227

Token 433: '8' (ID: 23)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.028007594868540764
    2. 'key' → logprob: -4.278007507324219
    3. '(k' → logprob: -4.653007507324219
    4. '(' → logprob: -6.403007507324219
    5. '(key' → logprob: -7.153007507324219
    6. ' k' → logprob: -7.403007507324219
    7. '0' → logprob: -7.653007507324219
    8. ' (' → logprob: -7.653007507324219
    9. ' key' → logprob: -8.778007507324219
    10. '```' → logprob: -11.153007507324219

Token 434: '*k' (ID: 81061)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.17826229333877563
    2. '<|end|>' → logprob: -2.053262233734131
    3. ' _' → logprob: -4.553262233734131
    4. ')' → logprob: -5.428262233734131
    5. '_bit' → logprob: -5.553262233734131
    6. ' ' → logprob: -5.678262233734131
    7. '^' → logprob: -5.928262233734131
    8. ' ^' → logprob: -6.428262233734131
    9. '<|end|>' → logprob: -6.428262233734131
    10. ' bit' → logprob: -7.178262233734131

Token 435: ' =' (ID: 314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 436: ' XOR' (ID: 147209)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.5263603925704956
    2. ' ' → logprob: -1.0263603925704956
    3. ' s' → logprob: -3.526360511779785
    4. 's' → logprob: -4.651360511779785
    5. ' bit' → logprob: -4.901360511779785
    6. ' k' → logprob: -6.776360511779785
    7. ' key' → logprob: -6.901360511779785
    8. 'k' → logprob: -7.276360511779785
    9. ' (' → logprob: -7.526360511779785
    10. 'bit' → logprob: -7.526360511779785

Token 437: ' over' (ID: 1072)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 438: ' N' (ID: 478)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.5329102277755737
    2. 'N' → logprob: -1.5329102277755737
    3. ' k' → logprob: -2.5329103469848633
    4. '0' → logprob: -3.4079103469848633
    5. ' N' → logprob: -3.6579103469848633
    6. 's' → logprob: -4.282910346984863
    7. 'key' → logprob: -4.407910346984863
    8. '(' → logprob: -5.157910346984863
    9. '(k' → logprob: -5.282910346984863
    10. ' key' → logprob: -5.407910346984863

Token 439: '_i' (ID: 10853)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.1619889885187149
    2. '_i' → logprob: -2.2869889736175537
    3. ')' → logprob: -3.2869889736175537
    4. ' _' → logprob: -5.536989212036133
    5. ')_' → logprob: -6.161989212036133
    6. '_k' → logprob: -7.036989212036133
    7. '_bit' → logprob: -7.411989212036133
    8. '[' → logprob: -7.911989212036133
    9. '_bits' → logprob: -8.411989212036133
    10. '_)' → logprob: -8.536989212036133

Token 440: ''s' (ID: 885)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 441: ' xor' (ID: 106402)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 442: ' ' (ID: 220)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 443: '0' (ID: 15)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.0657188892364502
    2. ' k' → logprob: -3.19071888923645
    3. '0' → logprob: -4.690718650817871
    4. '(' → logprob: -5.440718650817871
    5. '(k' → logprob: -5.440718650817871
    6. ' (' → logprob: -6.315718650817871
    7. 'key' → logprob: -6.815718650817871
    8. ' ' → logprob: -6.940718650817871
    9. '8' → logprob: -8.565718650817871
    10. ' key' → logprob: -9.065718650817871

Token 444: ' =' (ID: 314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 445: ' XOR' (ID: 147209)
  Prédit: ' bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' bit' → logprob: -0.6933832764625549
    2. 'bit' → logprob: -0.6933832764625549
    3. ' s' → logprob: -9.31838321685791
    4. 's' → logprob: -10.06838321685791
    5. '0' → logprob: -10.19338321685791
    6. '(bit' → logprob: -10.31838321685791
    7. ' ' → logprob: -10.94338321685791
    8. '   ' → logprob: -12.19338321685791
    9. 'bits' → logprob: -13.69338321685791
    10. ' (' → logprob: -14.06838321685791

Token 446: ' over' (ID: 1072)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 447: ' N' (ID: 478)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.9498940706253052
    2. 'bit' → logprob: -1.5748940706253052
    3. ' bit' → logprob: -1.9498940706253052
    4. 'k' → logprob: -2.4498939514160156
    5. ' s' → logprob: -2.5748939514160156
    6. 'N' → logprob: -2.9498939514160156
    7. ' N' → logprob: -4.699893951416016
    8. '0' → logprob: -4.824893951416016
    9. ' (' → logprob: -5.074893951416016
    10. ' k' → logprob: -5.199893951416016

Token 448: '_i' (ID: 10853)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.718883752822876
    2. '_i' → logprob: -1.343883752822876
    3. ')' → logprob: -1.593883752822876
    4. 'i' → logprob: -4.468883514404297
    5. '<|end|>' → logprob: -4.593883514404297
    6. '[' → logprob: -5.843883514404297
    7. 'bit' → logprob: -6.218883514404297
    8. '_bit' → logprob: -6.468883514404297
    9. '#' → logprob: -6.593883514404297
    10. '_
' → logprob: -6.843883514404297

Token 449: ''s' (ID: 885)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.0456488132476807
    2. 's' → logprob: -1.2956488132476807
    3. '_' → logprob: -2.4206488132476807
    4. '_s' → logprob: -3.0456488132476807
    5. '   ' → logprob: -3.4206488132476807
    6. '<|end|>' → logprob: -3.4206488132476807
    7. ''s' → logprob: -3.5456488132476807
    8. '=' → logprob: -4.170648574829102
    9. ' _' → logprob: -4.170648574829102
    10. '^' → logprob: -4.295648574829102

Token 450: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 451: '           ' (ID: 352)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 452: ' #' (ID: 1069)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.08418798446655273
    2. '<|end|>' → logprob: -2.8341879844665527
    3. ')' → logprob: -5.334187984466553
    4. ' 
' → logprob: -5.959187984466553
    5. '       ' → logprob: -6.084187984466553
    6. '           ' → logprob: -6.084187984466553
    7. '  ' → logprob: -6.459187984466553
    8. '    ' → logprob: -6.459187984466553
    9. '        ' → logprob: -6.459187984466553
    10. '0' → logprob: -7.209187984466553

Token 453: ' So' (ID: 2632)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 454: ' sum' (ID: 4215)
  Prédit: ' key'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' key' → logprob: -0.340554803609848
    2. 'key' → logprob: -1.7155548334121704
    3. ' break' → logprob: -3.090554714202881
    4. 'print' → logprob: -4.215554714202881
    5. ' pass' → logprob: -4.465554714202881
    6. ' k' → logprob: -4.715554714202881
    7. 'k' → logprob: -4.840554714202881
    8. ' print' → logprob: -5.090554714202881
    9. 'break' → logprob: -5.090554714202881
    10. 'pass' → logprob: -6.090554714202881

Token 455: ' xor' (ID: 106402)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 456: ' checksum' (ID: 83063)
  Prédit: ' key'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' key' → logprob: -0.8410879373550415
    2. 'key' → logprob: -1.0910879373550415
    3. 'k' → logprob: -1.7160879373550415
    4. ' k' → logprob: -3.341087818145752
    5. 's' → logprob: -5.466087818145752
    6. ' s' → logprob: -5.591087818145752
    7. '=' → logprob: -5.716087818145752
    8. 'D' → logprob: -6.591087818145752
    9. 'chk' → logprob: -6.716087818145752
    10. ' chk' → logprob: -7.216087818145752

Token 457: ' =' (ID: 314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 458: ' D' (ID: 415)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.4442085027694702
    2. 'D' → logprob: -1.3192085027694702
    3. ' D' → logprob: -2.8192086219787598
    4. ' ' → logprob: -3.8192086219787598
    5. 's' → logprob: -5.19420862197876
    6. ' s' → logprob: -5.94420862197876
    7. 'k' → logprob: -7.69420862197876
    8. '1' → logprob: -8.569208145141602
    9. 'd' → logprob: -8.694208145141602
    10. '(' → logprob: -8.819208145141602

Token 459: ' =' (ID: 314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 460: ' k' (ID: 372)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.02148217149078846
    2. 's' → logprob: -4.771481990814209
    3. ' ' → logprob: -5.146481990814209
    4. 'k' → logprob: -5.271481990814209
    5. ' s' → logprob: -7.271481990814209
    6. '(s' → logprob: -8.021482467651367
    7. ' k' → logprob: -8.521482467651367
    8. 'chk' → logprob: -8.646482467651367
    9. ' (' → logprob: -9.396482467651367
    10. '(' → logprob: -9.646482467651367

Token 461: ' xor' (ID: 106402)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 462: ' k' (ID: 372)
  Prédit: 'D'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'D' → logprob: -0.49152305722236633
    2. 'k' → logprob: -1.491523027420044
    3. '0' → logprob: -1.991523027420044
    4. 's' → logprob: -3.866523027420044
    5. ' D' → logprob: -5.991523265838623
    6. ' ' → logprob: -6.991523265838623
    7. ' k' → logprob: -7.616523265838623
    8. '(' → logprob: -7.866523265838623
    9. '(s' → logprob: -7.991523265838623
    10. '(k' → logprob: -8.116522789001465

Token 463: ' xor' (ID: 106402)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 464: ' ...' (ID: 2550)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.4762503504753113
    2. 'k' → logprob: -0.9762503504753113
    3. '...' → logprob: -6.601250171661377
    4. '<|end|>' → logprob: -7.601250171661377
    5. ' ' → logprob: -9.101250648498535
    6. '000' → logprob: -9.351250648498535
    7. ' k' → logprob: -10.351250648498535
    8. '(' → logprob: -11.226250648498535
    9. '8' → logprob: -11.476250648498535
    10. '<|end|>' → logprob: -11.726250648498535

Token 465: ' ' (ID: 220)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 466: '8' (ID: 23)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.547425389289856
    2. '<|end|>' → logprob: -1.422425389289856
    3. ' ' → logprob: -1.922425389289856
    4. '1' → logprob: -5.172425270080566
    5. '^' → logprob: -5.422425270080566
    6. '#' → logprob: -5.422425270080566
    7. ')' → logprob: -5.422425270080566
    8. '...' → logprob: -5.672425270080566
    9. 'x' → logprob: -6.297425270080566
    10. '(' → logprob: -6.922425270080566

Token 467: ' times' (ID: 4238)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -1.0563944578170776
    2. ' =' → logprob: -1.6813944578170776
    3. ')' → logprob: -2.181394577026367
    4. ' ^' → logprob: -2.306394577026367
    5. '_' → logprob: -2.806394577026367
    6. ' _' → logprob: -2.931394577026367
    7. '^' → logprob: -3.306394577026367
    8. ' ' → logprob: -3.806394577026367
    9. '<|end|>' → logprob: -3.806394577026367
    10. 's' → logprob: -4.056394577026367

Token 468: ' is' (ID: 382)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 469: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00017314712749794126
    2. ' ' → logprob: -8.875173568725586
    3. 'k' → logprob: -10.875173568725586
    4. '000' → logprob: -11.250173568725586
    5. ' k' → logprob: -14.375173568725586
    6. '   ' → logprob: -15.000173568725586
    7. 'zero' → logprob: -15.875173568725586
    8. ' ' → logprob: -16.250173568725586
    9. '```' → logprob: -16.500173568725586
    10. 's' → logprob: -17.375173568725586

Token 470: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -6.802049756515771e-05
    2. 'k' → logprob: -10.375067710876465
    3. '000' → logprob: -10.500067710876465
    4. ' ' → logprob: -11.625067710876465
    5. '00' → logprob: -16.37506866455078
    6. 'zero' → logprob: -16.62506866455078
    7. '```' → logprob: -16.75006866455078
    8. '   ' → logprob: -17.75006866455078
    9. '8' → logprob: -17.75006866455078
    10. ' k' → logprob: -17.87506866455078

Token 471: ' (' (ID: 350)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 472: 'even' (ID: 28689)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.04099828004837036
    2. '<|end|>' → logprob: -3.4159982204437256
    3. '
' → logprob: -5.540998458862305
    4. ' )' → logprob: -6.915998458862305
    5. '       ' → logprob: -7.415998458862305
    6. ')
' → logprob: -7.665998458862305
    7. '<|end|>' → logprob: -7.790998458862305
    8. '#' → logprob: -8.165998458862305
    9. ' ' → logprob: -9.165998458862305
    10. '...' → logprob: -9.790998458862305

Token 473: ' times' (ID: 4238)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.027707090601325035
    2. '
' → logprob: -4.402707099914551
    3. ')
' → logprob: -4.777707099914551
    4. '<|end|>' → logprob: -6.777707099914551
    5. ' )' → logprob: -6.902707099914551
    6. '0' → logprob: -7.152707099914551
    7. ')_' → logprob: -7.277707099914551
    8. '\n' → logprob: -7.902707099914551
    9. '_' → logprob: -7.902707099914551
    10. ')\' → logprob: -8.40270709991455

Token 474: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.007835046388208866
    2. '<|end|>' → logprob: -5.1328349113464355
    3. ' )' → logprob: -7.1328349113464355
    4. ')
' → logprob: -7.6328349113464355
    5. '#' → logprob: -8.632835388183594
    6. '
' → logprob: -8.882835388183594
    7. '<|end|>' → logprob: -10.132835388183594
    8. '```' → logprob: -10.257835388183594
    9. '0' → logprob: -10.257835388183594
    10. '       ' → logprob: -10.757835388183594

Token 475: '           ' (ID: 352)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 476: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 477: ' So' (ID: 2632)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5371845364570618
    2. '<|end|>' → logprob: -1.662184476852417
    3. ' 
' → logprob: -2.412184476852417
    4. '\n' → logprob: -3.287184476852417
    5. '       ' → logprob: -3.412184476852417
    6. '0' → logprob: -4.037184715270996
    7. '   ' → logprob: -4.662184715270996
    8. '\' → logprob: -4.787184715270996
    9. ' \' → logprob: -5.162184715270996
    10. '  
' → logprob: -5.912184715270996

Token 478: ' the' (ID: 290)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.5249779224395752
    2. ' pass' → logprob: -1.8999779224395752
    3. 'pass' → logprob: -2.149977922439575
    4. 'k' → logprob: -2.274977922439575
    5. ' key' → logprob: -2.524977922439575
    6. 'key' → logprob: -2.649977922439575
    7. ' continue' → logprob: -3.024977922439575
    8. 'continue' → logprob: -3.149977922439575
    9. ' break' → logprob: -3.274977922439575
    10. 'break' → logprob: -3.399977922439575

Token 479: ' sum' (ID: 4215)
  Prédit: 'key'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'key' → logprob: -0.9682908058166504
    2. 'k' → logprob: -1.3432908058166504
    3. ' key' → logprob: -1.7182908058166504
    4. '#' → logprob: -2.2182908058166504
    5. ' k' → logprob: -4.34329080581665
    6. ' code' → logprob: -4.71829080581665
    7. 'pass' → logprob: -5.09329080581665
    8. 'print' → logprob: -5.34329080581665
    9. 'continue' → logprob: -5.34329080581665
    10. 'return' → logprob: -5.46829080581665

Token 480: ' xor' (ID: 106402)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -1.110541820526123
    2. ' ' → logprob: -1.610541820526123
    3. ' ^=' → logprob: -1.860541820526123
    4. '=' → logprob: -1.985541820526123
    5. '<|end|>' → logprob: -2.360541820526123
    6. '_' → logprob: -3.360541820526123
    7. ' s' → logprob: -4.735541820526123
    8. 's' → logprob: -4.860541820526123
    9. ' ^' → logprob: -5.235541820526123
    10. ' +=' → logprob: -5.235541820526123

Token 481: ' checksum' (ID: 83063)
  Prédit: ' checksum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' checksum' → logprob: -0.9312140941619873
    2. 'checksum' → logprob: -1.0562140941619873
    3. 'chk' → logprob: -2.3062140941619873
    4. '=' → logprob: -2.4312140941619873
    5. ' chk' → logprob: -3.6812140941619873
    6. ' k' → logprob: -3.6812140941619873
    7. ' key' → logprob: -4.931214332580566
    8. 'k' → logprob: -5.681214332580566
    9. 'key' → logprob: -5.931214332580566
    10. ' ' → logprob: -7.056214332580566

Token 482: ' =' (ID: 314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 483: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.5985917448997498
    2. 'D' → logprob: -1.4735918045043945
    3. 'k' → logprob: -1.5985918045043945
    4. 's' → logprob: -4.5985918045043945
    5. ' ' → logprob: -5.3485918045043945
    6. ' D' → logprob: -5.9735918045043945
    7. ' k' → logprob: -7.2235918045043945
    8. ' s' → logprob: -8.098591804504395
    9. '(' → logprob: -9.223591804504395
    10. 'd' → logprob: -9.223591804504395

Token 484: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.27516865730285645
    2. 'D' → logprob: -1.7751686573028564
    3. 'k' → logprob: -3.2751686573028564
    4. 's' → logprob: -3.7751686573028564
    5. ' ' → logprob: -5.400168418884277
    6. ' D' → logprob: -5.900168418884277
    7. 'd' → logprob: -7.400168418884277
    8. ' s' → logprob: -7.525168418884277
    9. '(s' → logprob: -7.650168418884277
    10. '(' → logprob: -7.775168418884277

Token 485: ' if' (ID: 538)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 486: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -1.1753088235855103
    2. '0' → logprob: -1.3003088235855103
    3. ' k' → logprob: -2.6753087043762207
    4. 'True' → logprob: -2.6753087043762207
    5. 'D' → logprob: -2.8003087043762207
    6. ' D' → logprob: -2.9253087043762207
    7. ' True' → logprob: -3.0503087043762207
    8. ' ' → logprob: -3.3003087043762207
    9. ' all' → logprob: -3.8003087043762207
    10. 'False' → logprob: -3.8003087043762207

Token 487: '=' (ID: 28)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.20854370296001434
    2. '=' → logprob: -1.9585436582565308
    3. ' ==' → logprob: -3.2085437774658203
    4. ' is' → logprob: -5.70854377746582
    5. 'is' → logprob: -6.95854377746582
    6. '^' → logprob: -7.20854377746582
    7. ' =' → logprob: -7.83354377746582
    8. 'xor' → logprob: -7.95854377746582
    9. '0' → logprob: -8.08354377746582
    10. '<|end|>' → logprob: -8.45854377746582

Token 488: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -6.909333023941144e-05
    2. ' ' → logprob: -9.875068664550781
    3. 'k' → logprob: -11.000068664550781
    4. '000' → logprob: -15.500068664550781
    5. '<|end|>' → logprob: -15.875068664550781
    6. '   ' → logprob: -16.00006866455078
    7. '<|end|>' → logprob: -16.12506866455078
    8. '...' → logprob: -16.50006866455078
    9. 's' → logprob: -16.62506866455078
    10. '00' → logprob: -17.12506866455078

Token 489: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 490: '           ' (ID: 352)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 491: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 492: ' But' (ID: 3072)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.22506467998027802
    2. '0' → logprob: -2.225064754486084
    3. ' ' → logprob: -3.350064754486084
    4. '   ' → logprob: -3.850064754486084
    5. '           ' → logprob: -5.100064754486084
    6. '\n' → logprob: -5.725064754486084
    7. '        ' → logprob: -5.725064754486084
    8. ' 
' → logprob: -5.725064754486084
    9. 'continue' → logprob: -5.850064754486084
    10. '        
' → logprob: -6.225064754486084

Token 493: ' we' (ID: 581)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.8167908787727356
    2. 'k' → logprob: -1.5667908191680908
    3. ' break' → logprob: -2.191790819168091
    4. '#' → logprob: -2.441790819168091
    5. ' ' → logprob: -3.816790819168091
    6. 'break' → logprob: -3.941790819168091
    7. ' D' → logprob: -4.19179105758667
    8. ' s' → logprob: -4.31679105758667
    9. ' key' → logprob: -4.44179105758667
    10. '0' → logprob: -4.44179105758667

Token 494: ' have' (ID: 679)
  Prédit: ' cannot'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' cannot' → logprob: -1.2560319900512695
    2. '#' → logprob: -1.6310319900512695
    3. ' can' → logprob: -1.6310319900512695
    4. ' continue' → logprob: -2.5060319900512695
    5. 'cannot' → logprob: -2.8810319900512695
    6. ' are' → logprob: -3.6310319900512695
    7. ' ' → logprob: -3.8810319900512695
    8. ' =' → logprob: -4.0060319900512695
    9. ' can't' → logprob: -4.0060319900512695
    10. ' want' → logprob: -4.0060319900512695

Token 495: ' difference' (ID: 9809)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' k' → logprob: -1.2811930179595947
    2. ' D' → logprob: -1.2811930179595947
    3. ' not' → logprob: -2.0311930179595947
    4. ' s' → logprob: -2.1561930179595947
    5. ' ' → logprob: -2.6561930179595947
    6. 'D' → logprob: -3.6561930179595947
    7. 'k' → logprob: -3.7811930179595947
    8. 's' → logprob: -3.9061930179595947
    9. ' (' → logprob: -4.406192779541016
    10. '0' → logprob: -4.531192779541016

Token 496: ' D' (ID: 415)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.06684871017932892
    2. '<|end|>' → logprob: -3.6918487548828125
    3. ' 
' → logprob: -3.8168487548828125
    4. '=' → logprob: -5.8168487548828125
    5. '0' → logprob: -5.9418487548828125
    6. ':' → logprob: -6.6918487548828125
    7. ')' → logprob: -6.6918487548828125
    8. ' =' → logprob: -6.8168487548828125
    9. '#' → logprob: -6.9418487548828125
    10. '  
' → logprob: -7.0668487548828125

Token 497: ' =' (ID: 314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 498: ' sum' (ID: 4215)
  Prédit: ' s'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.21638000011444092
    2. 's' → logprob: -2.0913801193237305
    3. ' ' → logprob: -3.7163801193237305
    4. '0' → logprob: -3.7163801193237305
    5. ' k' → logprob: -4.2163801193237305
    6. 'k' → logprob: -5.5913801193237305
    7. ' (' → logprob: -6.5913801193237305
    8. '(s' → logprob: -6.7163801193237305
    9. ' chk' → logprob: -7.3413801193237305
    10. '1' → logprob: -8.59138011932373

Token 499: ' xor' (ID: 106402)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.0608916282653809
    2. '<|end|>' → logprob: -1.4358916282653809
    3. ' =' → logprob: -2.185891628265381
    4. ')' → logprob: -2.435891628265381
    5. ' ^' → logprob: -2.560891628265381
    6. '=' → logprob: -3.185891628265381
    7. '<|end|>' → logprob: -3.685891628265381
    8. '_' → logprob: -3.685891628265381
    9. ' _' → logprob: -4.810891628265381
    10. '
' → logprob: -5.185891628265381

Token 500: ' checksum' (ID: 83063)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.7506067156791687
    2. ' chk' → logprob: -1.3756067752838135
    3. 'k' → logprob: -1.7506067752838135
    4. 'chk' → logprob: -2.7506067752838135
    5. '0' → logprob: -3.8756067752838135
    6. ' ' → logprob: -4.375606536865234
    7. ' xor' → logprob: -6.250606536865234
    8. '1' → logprob: -8.000606536865234
    9. 'xor' → logprob: -8.125606536865234
    10. ' checksum' → logprob: -8.250606536865234

Token 501: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 502: '           ' (ID: 352)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 503: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.9929116368293762
    2. ' ' → logprob: -1.2429115772247314
    3. '<|end|>' → logprob: -1.7429115772247314
    4. ' 
' → logprob: -2.7429115772247314
    5. '   ' → logprob: -3.2429115772247314
    6. ':' → logprob: -4.7429118156433105
    7. '  
' → logprob: -4.8679118156433105
    8. ':
' → logprob: -5.1179118156433105
    9. '
' → logprob: -5.2429118156433105
    10. '#' (adapté à ' #') → logprob: -5.3679118156433105

Token 504: ' Actually' (ID: 50557)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5176156759262085
    2. ' 
' → logprob: -1.6426156759262085
    3. '<|end|>' → logprob: -2.142615795135498
    4. '       ' → logprob: -2.892615795135498
    5. '0' → logprob: -5.017615795135498
    6. '#' → logprob: -5.017615795135498
    7. '
' → logprob: -5.392615795135498
    8. '\n' → logprob: -5.517615795135498
    9. ' \' → logprob: -6.267615795135498
    10. '  
' → logprob: -6.392615795135498

Token 505: ',' (ID: 11)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.0030557846184819937
    2. ' 
' → logprob: -6.128055572509766
    3. '<|end|>' → logprob: -7.753055572509766
    4. ' ' → logprob: -9.628055572509766
    5. '=' → logprob: -9.753055572509766
    6. '  ' → logprob: -9.878055572509766
    7. ' =' → logprob: -10.503055572509766
    8. '#' → logprob: -10.503055572509766
    9. '  
' → logprob: -10.753055572509766
    10. ',' → logprob: -10.878055572509766

Token 506: ' the' (ID: 290)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.016997728496789932
    2. '<|end|>' → logprob: -4.891997814178467
    3. ' 
' → logprob: -5.016997814178467
    4. ' bit' → logprob: -7.141997814178467
    5. ')' → logprob: -8.391997337341309
    6. '  ' → logprob: -8.516997337341309
    7. '#' → logprob: -8.766997337341309
    8. '0' → logprob: -8.891997337341309
    9. ' s' → logprob: -8.891997337341309
    10. ' break' → logprob: -9.266997337341309

Token 507: ' key' (ID: 2140)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.022798245772719383
    2. '0' → logprob: -5.52279806137085
    3. '#' → logprob: -5.64779806137085
    4. ' 
' → logprob: -5.89779806137085
    5. ' code' → logprob: -6.02279806137085
    6. ' for' → logprob: -7.02279806137085
    7. ' #' → logprob: -7.02279806137085
    8. '=' → logprob: -7.39779806137085
    9. ')' → logprob: -7.64779806137085
    10. 'for' → logprob: -7.64779806137085

Token 508: ' is' (ID: 382)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -1.1256719827651978
    2. '<|end|>' → logprob: -1.6256719827651978
    3. ' ^=' → logprob: -1.7506719827651978
    4. '=' → logprob: -1.7506719827651978
    5. ' ' → logprob: -3.250671863555908
    6. '_' → logprob: -3.875671863555908
    7. ')' → logprob: -3.875671863555908
    8. ' |=' → logprob: -4.750671863555908
    9. ' +=' → logprob: -4.875671863555908
    10. ' <<=' → logprob: -5.000671863555908

Token 509: ' equal' (ID: 12629)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.23010580241680145
    2. ' ' → logprob: -2.1051058769226074
    3. ' s' → logprob: -4.105105876922607
    4. 's' → logprob: -4.355105876922607
    5. ' v' → logprob: -4.605105876922607
    6. 'v' → logprob: -4.730105876922607
    7. ' D' → logprob: -5.105105876922607
    8. 'bit' → logprob: -5.480105876922607
    9. ' (' → logprob: -5.730105876922607
    10. ' None' → logprob: -5.730105876922607

Token 510: ' to' (ID: 316)
  Prédit: ' s'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.9248601794242859
    2. 's' → logprob: -1.9248602390289307
    3. ' ' → logprob: -1.9248602390289307
    4. '=' → logprob: -2.1748602390289307
    5. ' =' → logprob: -2.5498602390289307
    6. ' D' → logprob: -2.7998602390289307
    7. ' bit' → logprob: -4.174860000610352
    8. '32' → logprob: -4.299860000610352
    9. ' to' → logprob: -4.924860000610352
    10. '  ' → logprob: -5.674860000610352

Token 511: ' D' (ID: 415)
  Prédit: 'D'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'D' → logprob: -0.016949433833360672
    2. ' D' → logprob: -4.641949653625488
    3. 's' → logprob: -5.266949653625488
    4. '0' → logprob: -6.391949653625488
    5. ' s' → logprob: -8.766949653625488
    6. ' ' → logprob: -9.016949653625488
    7. 'd' → logprob: -10.266949653625488
    8. '```' → logprob: -11.891949653625488
    9. '(' → logprob: -13.329449653625488
    10. '	D' → logprob: -13.391949653625488

Token 512: ' because' (ID: 2236)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.8795192837715149
    2. ' 
' → logprob: -2.25451922416687
    3. ' =' → logprob: -2.50451922416687
    4. ' ' → logprob: -2.50451922416687
    5. '=' → logprob: -2.62951922416687
    6. '       ' → logprob: -2.87951922416687
    7. ' ^' → logprob: -3.25451922416687
    8. '^' → logprob: -3.75451922416687
    9. '1' → logprob: -3.87951922416687
    10. '<|end|>' → logprob: -4.129519462585449

Token 513: ':
' (ID: 734)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.7602284550666809
    2. ' s' → logprob: -1.2602283954620361
    3. ' key' → logprob: -2.260228395462036
    4. 'k' → logprob: -2.385228395462036
    5. 's' → logprob: -4.135228633880615
    6. 'key' → logprob: -4.135228633880615
    7. ' D' → logprob: -4.885228633880615
    8. '0' → logprob: -5.760228633880615
    9. 'D' → logprob: -5.885228633880615
    10. ' ' → logprob: -5.885228633880615

Token 514: '           ' (ID: 352)
  Prédit: ' key'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' key' → logprob: -0.5976107716560364
    2. '       ' → logprob: -0.8476107716560364
    3. 'key' → logprob: -4.847610950469971
    4. ' k' → logprob: -4.972610950469971
    5. '           ' → logprob: -5.722610950469971
    6. ' return' → logprob: -7.097610950469971
    7. ' for' → logprob: -7.722610950469971
    8. '        ' → logprob: -7.722610950469971
    9. '   ' → logprob: -8.222610473632812
    10. ' ' → logprob: -8.597610473632812

Token 515: ' #' (ID: 1069)
  Prédit: ' key'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' key' → logprob: -0.9526660442352295
    2. 'key' → logprob: -1.8276660442352295
    3. ' k' → logprob: -1.9526660442352295
    4. 'k' → logprob: -2.3276660442352295
    5. ' s' → logprob: -2.4526660442352295
    6. '       ' → logprob: -3.2026660442352295
    7. ' D' → logprob: -3.4526660442352295
    8. 's' → logprob: -4.077666282653809
    9. 'D' → logprob: -4.202666282653809
    10. '           ' → logprob: -4.702666282653809

Token 516: ' XOR' (ID: 147209)
  Prédit: ' key'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' key' → logprob: -0.07143758982419968
    2. 'key' → logprob: -2.6964375972747803
    3. ' k' → logprob: -6.946437358856201
    4. 'k' → logprob: -7.946437358856201
    5. '       ' → logprob: -9.94643783569336
    6. '           ' → logprob: -10.19643783569336
    7. ' D' → logprob: -11.19643783569336
    8. ' return' → logprob: -11.57143783569336
    9. '   ' → logprob: -11.69643783569336
    10. ' for' → logprob: -11.82143783569336

Token 517: ' over' (ID: 1072)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5899524688720703
    2. '=' → logprob: -1.3399524688720703
    3. ' over' → logprob: -2.8399524688720703
    4. ' ^=' → logprob: -3.3399524688720703
    5. ' ' → logprob: -3.9649524688720703
    6. '_' → logprob: -3.9649524688720703
    7. ' _' → logprob: -4.21495246887207
    8. ')' → logprob: -4.58995246887207
    9. 'over' → logprob: -4.58995246887207
    10. '<|end|>' → logprob: -5.33995246887207

Token 518: ' all' (ID: 722)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.8497833609580994
    2. ' N' → logprob: -0.8497833609580994
    3. ' v' → logprob: -2.724783420562744
    4. 'v' → logprob: -2.724783420562744
    5. ' s' → logprob: -5.849783420562744
    6. ' all' → logprob: -5.974783420562744
    7. ' ' → logprob: -6.599783420562744
    8. 's' → logprob: -6.724783420562744
    9. 'all' → logprob: -6.849783420562744
    10. ' i' → logprob: -6.974783420562744

Token 519: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.7383981943130493
    2. ' N' → logprob: -0.8633981943130493
    3. 'v' → logprob: -2.6133980751037598
    4. ' v' → logprob: -3.7383980751037598
    5. '   ' → logprob: -6.86339807510376
    6. 'k' → logprob: -7.48839807510376
    7. ' k' → logprob: -7.86339807510376
    8. ' ' → logprob: -8.613398551940918
    9. '(N' → logprob: -8.988398551940918
    10. 'n' → logprob: -9.238398551940918

Token 520: '_i' (ID: 10853)
  Prédit: '_i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_i' → logprob: -0.04769044369459152
    2. ')' → logprob: -4.047690391540527
    3. '[i' → logprob: -4.547690391540527
    4. '       ' → logprob: -5.422690391540527
    5. ' ^' → logprob: -6.172690391540527
    6. '_' → logprob: -6.297690391540527
    7. 'i' → logprob: -6.672690391540527
    8. '_bit' → logprob: -6.672690391540527
    9. ' _' → logprob: -7.047690391540527
    10. '[' → logprob: -7.297690391540527

Token 521: ''s' (ID: 885)
  Prédit: ' ^'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ^' → logprob: -0.765174150466919
    2. ')' → logprob: -1.015174150466919
    3. '^' → logprob: -3.265174150466919
    4. 's' → logprob: -3.265174150466919
    5. '[' → logprob: -4.14017391204834
    6. '<|end|>' → logprob: -4.26517391204834
    7. '   ' → logprob: -4.39017391204834
    8. '_' → logprob: -5.01517391204834
    9. '=' → logprob: -5.14017391204834
    10. '       ' → logprob: -5.51517391204834

Token 522: ' xor' (ID: 106402)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 523: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.7397542595863342
    2. '=' → logprob: -2.1147541999816895
    3. 'k' → logprob: -2.2397541999816895
    4. 'v' → logprob: -2.6147541999816895
    5. ' bit' → logprob: -2.6147541999816895
    6. ' v' → logprob: -2.6147541999816895
    7. 'bit' → logprob: -4.1147541999816895
    8. 'D' → logprob: -4.6147541999816895
    9. 'key' → logprob: -4.9897541999816895
    10. ' key' → logprob: -4.9897541999816895

Token 524: ' ' (ID: 220)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7363812923431396
    2. '<|end|>' → logprob: -1.3613812923431396
    3. '=' → logprob: -2.8613812923431396
    4. ' ' → logprob: -2.9863812923431396
    5. ' bit' → logprob: -2.9863812923431396
    6. ' =' → logprob: -3.7363812923431396
    7. '[' → logprob: -3.8613812923431396
    8. '<|end|>' → logprob: -4.611381530761719
    9. '_' → logprob: -5.236381530761719
    10. ' ^' → logprob: -5.236381530761719

Token 525: '8' (ID: 23)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7476238012313843
    2. '=' → logprob: -1.7476238012313843
    3. ' ^' → logprob: -2.122623920440674
    4. '^' → logprob: -2.247623920440674
    5. '<|end|>' → logprob: -3.122623920440674
    6. 's' → logprob: -3.997623920440674
    7. ' =' → logprob: -4.372623920440674
    8. '[' → logprob: -5.247623920440674
    9. ' ^=' → logprob: -5.247623920440674
    10. '_' → logprob: -5.497623920440674

Token 526: ' times' (ID: 4238)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.8173470497131348
    2. ')' → logprob: -1.0673470497131348
    3. ' =' → logprob: -1.6923470497131348
    4. '<|end|>' → logprob: -4.942347049713135
    5. '^' → logprob: -5.567347049713135
    6. ')=' → logprob: -5.817347049713135
    7. ' bits' → logprob: -6.442347049713135
    8. ' ' → logprob: -6.817347049713135
    9. '   ' → logprob: -6.817347049713135
    10. ')==' → logprob: -6.942347049713135

Token 527: ':' (ID: 25)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 528: ' XOR' (ID: 147209)
  Prédit: ' s'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' s' → logprob: -1.2906361818313599
    2. ' bit' → logprob: -1.6656361818313599
    3. ' k' → logprob: -2.0406360626220703
    4. ' ' → logprob: -2.1656360626220703
    5. ' v' → logprob: -2.5406360626220703
    6. 'v' → logprob: -3.0406360626220703
    7. ' =' → logprob: -3.1656360626220703
    8. 's' → logprob: -3.9156360626220703
    9. '0' → logprob: -4.04063606262207
    10. '   ' → logprob: -4.16563606262207

Token 529: ' over' (ID: 1072)
  Prédit: ' ^='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ^=' → logprob: -1.1167304515838623
    2. ' ^' → logprob: -1.4917304515838623
    3. ' over' → logprob: -2.1167304515838623
    4. ' =' → logprob: -2.6167304515838623
    5. '=' → logprob: -2.8667304515838623
    6. ')' → logprob: -3.3667304515838623
    7. ' ' → logprob: -3.4917304515838623
    8. 'over' → logprob: -3.8667304515838623
    9. ' _' → logprob: -3.9917304515838623
    10. ' bit' → logprob: -3.9917304515838623

Token 530: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.8146283626556396
    2. 'k' → logprob: -1.0646283626556396
    3. ' N' → logprob: -2.4396283626556396
    4. ' k' → logprob: -2.8146283626556396
    5. 'all' → logprob: -3.4396283626556396
    6. ' all' → logprob: -4.439628601074219
    7. '(N' → logprob: -5.314628601074219
    8. '[N' → logprob: -6.064628601074219
    9. 'v' → logprob: -6.314628601074219
    10. '(k' → logprob: -6.439628601074219

Token 531: ' xor' (ID: 106402)
  Prédit: '_i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_i' → logprob: -0.0016695844242349267
    2. 'v' → logprob: -7.126669406890869
    3. 'i' → logprob: -7.251669406890869
    4. ')' → logprob: -10.251669883728027
    5. '```' → logprob: -10.626669883728027
    6. 's' → logprob: -11.626669883728027
    7. 'key' → logprob: -11.751669883728027
    8. 'N' → logprob: -12.001669883728027
    9. '=' → logprob: -12.251669883728027
    10. 'k' → logprob: -12.251669883728027

Token 532: ' (' (ID: 350)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.0361233726143837
    2. '0' → logprob: -3.786123275756836
    3. '(' → logprob: -5.411123275756836
    4. 'key' → logprob: -6.036123275756836
    5. ' k' → logprob: -6.286123275756836
    6. '(k' → logprob: -6.536123275756836
    7. '8' → logprob: -6.911123275756836
    8. 'D' → logprob: -7.411123275756836
    9. ' (' → logprob: -8.161123275756836
    10. ' ' → logprob: -8.411123275756836

Token 533: 'k' (ID: 74)
  Prédit: 'k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.38908150792121887
    2. '(' → logprob: -2.0140814781188965
    3. '(k' → logprob: -2.0140814781188965
    4. '0' → logprob: -3.0140814781188965
    5. 'key' → logprob: -6.1390814781188965
    6. '8' → logprob: -6.3890814781188965
    7. ' (' → logprob: -6.7640814781188965
    8. ' k' → logprob: -8.014081954956055
    9. '(key' → logprob: -8.014081954956055
    10. '(M' → logprob: -8.514081954956055

Token 534: ' xor' (ID: 106402)
  Prédit: ' ^'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ^' → logprob: -0.10503457486629486
    2. ' <<' → logprob: -3.355034589767456
    3. ' xor' → logprob: -3.355034589767456
    4. ' *' → logprob: -4.355034351348877
    5. ')' → logprob: -5.230034351348877
    6. '<<' → logprob: -5.230034351348877
    7. '^' → logprob: -6.480034351348877
    8. ' x' → logprob: -6.855034351348877
    9. ' ' → logprob: -7.105034351348877
    10. '*' → logprob: -7.480034351348877

Token 535: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.0006739511154592037
    2. ' k' → logprob: -8.0006742477417
    3. '8' → logprob: -8.3756742477417
    4. '0' → logprob: -10.1256742477417
    5. '(k' → logprob: -10.5006742477417
    6. '...' → logprob: -11.2506742477417
    7. '(' → logprob: -11.6256742477417
    8. 'N' → logprob: -12.3756742477417
    9. ')' → logprob: -12.6256742477417
    10. ' (' → logprob: -12.7506742477417

Token 536: ' xor' (ID: 106402)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.04857238382101059
    2. '...' → logprob: -4.048572540283203
    3. 'xor' → logprob: -4.673572540283203
    4. ' xor' → logprob: -4.923572540283203
    5. ')...' → logprob: -5.298572540283203
    6. ' ...' → logprob: -5.298572540283203
    7. ' )' → logprob: -7.173572540283203
    8. '...)' → logprob: -7.423572540283203
    9. ' ' → logprob: -7.923572540283203
    10. ')^' → logprob: -8.048572540283203

Token 537: ' ...' (ID: 2550)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.0538996085524559
    2. '...' → logprob: -3.5538995265960693
    3. ' k' → logprob: -4.178899765014648
    4. '0' → logprob: -4.928899765014648
    5. ' ...' → logprob: -6.928899765014648
    6. ' ' → logprob: -8.428899765014648
    7. '8' → logprob: -9.803899765014648
    8. '```' → logprob: -11.553899765014648
    9. ' ' → logprob: -11.803899765014648
    10. ')' → logprob: -11.803899765014648

Token 538: '8' (ID: 23)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -1.1352263689041138
    2. '8' → logprob: -1.2602263689041138
    3. ' ' → logprob: -1.7602263689041138
    4. ' k' → logprob: -1.8852263689041138
    5. '0' → logprob: -3.010226249694824
    6. '...' → logprob: -4.135226249694824
    7. ')' → logprob: -6.010226249694824
    8. ' ...' → logprob: -6.260226249694824
    9. '1' → logprob: -7.760226249694824
    10. '...)' → logprob: -8.260226249694824

Token 539: ' times' (ID: 4238)
  Prédit: ' times'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' times' → logprob: -0.7630215883255005
    2. 'times' → logprob: -1.2630215883255005
    3. ')' → logprob: -1.5130215883255005
    4. ' ' → logprob: -4.638021469116211
    5. ' )' → logprob: -5.638021469116211
    6. '8' → logprob: -5.763021469116211
    7. '=' → logprob: -5.763021469116211
    8. '0' → logprob: -6.013021469116211
    9. '_times' → logprob: -6.388021469116211
    10. 's' → logprob: -6.513021469116211

Token 540: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.006599913816899061
    2. '=' → logprob: -5.8815999031066895
    3. ')=' → logprob: -6.6315999031066895
    4. ' )' → logprob: -6.7565999031066895
    5. '#' → logprob: -7.3815999031066895
    6. ' =' → logprob: -9.256600379943848
    7. '8' → logprob: -9.256600379943848
    8. '   ' → logprob: -9.506600379943848
    9. ')
' → logprob: -9.631600379943848
    10. ')==' → logprob: -10.006600379943848

Token 541: ' =' (ID: 314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 542: ' XOR' (ID: 147209)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.04420362040400505
    2. 'k' → logprob: -3.794203519821167
    3. 'X' → logprob: -4.794203758239746
    4. ' ' → logprob: -5.044203758239746
    5. 'N' → logprob: -5.419203758239746
    6. ' k' → logprob: -7.169203758239746
    7. ' N' → logprob: -8.294203758239746
    8. ' X' → logprob: -8.544203758239746
    9. 'xor' → logprob: -9.169203758239746
    10. ' XOR' → logprob: -9.419203758239746

Token 543: ' over' (ID: 1072)
  Prédit: ' over'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' over' → logprob: -0.3353933095932007
    2. ' ^' → logprob: -1.7103933095932007
    3. 'over' → logprob: -2.7103934288024902
    4. ' ' → logprob: -4.21039342880249
    5. ' xor' → logprob: -4.71039342880249
    6. ' ^=' → logprob: -6.33539342880249
    7. ')' → logprob: -6.46039342880249
    8. ' k' → logprob: -6.58539342880249
    9. '^' → logprob: -6.58539342880249
    10. 'xor' → logprob: -6.58539342880249

Token 544: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.05384470894932747
    2. ' N' → logprob: -3.053844690322876
    3. 'k' → logprob: -5.553844928741455
    4. '0' → logprob: -7.428844928741455
    5. ' k' → logprob: -7.803844928741455
    6. 'all' → logprob: -9.303844451904297
    7. ' ' → logprob: -9.678844451904297
    8. '8' → logprob: -9.803844451904297
    9. '`' → logprob: -10.428844451904297
    10. 'key' → logprob: -11.053844451904297

Token 545: ' xor' (ID: 106402)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.505521833896637
    2. '<|end|>' → logprob: -1.7555217742919922
    3. ' ' → logprob: -3.130521774291992
    4. ' ^' → logprob: -3.380521774291992
    5. '[' → logprob: -3.630521774291992
    6. '           ' → logprob: -4.005521774291992
    7. '       ' → logprob: -4.005521774291992
    8. '   ' → logprob: -4.255521774291992
    9. 's' → logprob: -4.505521774291992
    10. '^' → logprob: -4.630521774291992

Token 546: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00021915239631198347
    2. ' ' → logprob: -8.500219345092773
    3. '000' → logprob: -11.625219345092773
    4. '(' → logprob: -12.250219345092773
    5. 'k' → logprob: -14.250219345092773
    6. '   ' → logprob: -14.375219345092773
    7. '00' → logprob: -15.250219345092773
    8. '```' → logprob: -15.625219345092773
    9. ' (' → logprob: -15.875219345092773
    10. '`' → logprob: -17.250219345092773

Token 547: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -3.023293538717553e-05
    2. ' ' → logprob: -11.125030517578125
    3. '(' → logprob: -11.500030517578125
    4. '000' → logprob: -12.250030517578125
    5. '00' → logprob: -15.625030517578125
    6. 'k' → logprob: -15.625030517578125
    7. ' (' → logprob: -16.250030517578125
    8. '```' → logprob: -16.875030517578125
    9. '   ' → logprob: -17.125030517578125
    10. '((' → logprob: -17.625030517578125

Token 548: ' =' (ID: 314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 549: ' XOR' (ID: 147209)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.6104365587234497
    2. 'D' → logprob: -1.6104365587234497
    3. '0' → logprob: -2.61043643951416
    4. 'X' → logprob: -2.98543643951416
    5. ' s' → logprob: -3.11043643951416
    6. 'k' → logprob: -3.73543643951416
    7. ' D' → logprob: -4.23543643951416
    8. 'N' → logprob: -4.48543643951416
    9. 'xor' → logprob: -4.98543643951416
    10. ' (' → logprob: -5.23543643951416

Token 550: ' N' (ID: 478)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 551: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 552: '           ' (ID: 352)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6850340962409973
    2. '<|end|>' → logprob: -0.8100340962409973
    3. '           ' → logprob: -3.8100340366363525
    4. '       ' → logprob: -4.685034275054932
    5. '<|end|>' → logprob: -4.935034275054932
    6. ')' → logprob: -6.560034275054932
    7. '  ' → logprob: -6.685034275054932
    8. ' 
' → logprob: -6.685034275054932
    9. '   ' → logprob: -6.810034275054932
    10. '    ' → logprob: -6.935034275054932

Token 553: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 554: ' So' (ID: 2632)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.4970324635505676
    2. '           ' → logprob: -2.122032403945923
    3. ')' → logprob: -2.872032403945923
    4. '0' → logprob: -3.247032403945923
    5. '<|end|>' → logprob: -3.247032403945923
    6. '       ' → logprob: -3.372032403945923
    7. ' 
' → logprob: -4.122032642364502
    8. '1' → logprob: -4.122032642364502
    9. 'x' → logprob: -4.622032642364502
    10. '#' → logprob: -4.622032642364502

Token 555: ' XOR' (ID: 147209)
  Prédit: 'key'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'key' → logprob: -0.6118799448013306
    2. ' key' → logprob: -1.2368799448013306
    3. '       ' → logprob: -2.611879825592041
    4. '           ' → logprob: -3.486879825592041
    5. 'k' → logprob: -3.736879825592041
    6. ' k' → logprob: -4.861879825592041
    7. 'pass' → logprob: -4.861879825592041
    8. 'print' → logprob: -5.361879825592041
    9. ' pass' → logprob: -5.861879825592041
    10. '   ' → logprob: -5.861879825592041

Token 556: ' N' (ID: 478)
  Prédit: ' over'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' over' → logprob: -0.39803096652030945
    2. 'over' → logprob: -2.023030996322632
    3. ' ' → logprob: -2.773030996322632
    4. ' _' → logprob: -2.773030996322632
    5. '_' → logprob: -3.398030996322632
    6. '   ' → logprob: -4.648030757904053
    7. ' bit' → logprob: -5.398030757904053
    8. ' xor' → logprob: -5.398030757904053
    9. '       ' → logprob: -6.273030757904053
    10. '=' → logprob: -6.398030757904053

Token 557: ' xor' (ID: 106402)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.9517781138420105
    2. '=' → logprob: -2.2017781734466553
    3. 's' → logprob: -2.4517781734466553
    4. ' _' → logprob: -2.4517781734466553
    5. ' =' → logprob: -2.4517781734466553
    6. ')' → logprob: -3.2017781734466553
    7. '^' → logprob: -3.3267781734466553
    8. '_i' → logprob: -3.3267781734466553
    9. ' ^' → logprob: -3.7017781734466553
    10. ' ^=' → logprob: -4.076777935028076

Token 558: ' chk' (ID: 63648)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.6211063265800476
    2. 'D' → logprob: -1.2461063861846924
    3. 'chk' → logprob: -1.9961063861846924
    4. 's' → logprob: -4.496106147766113
    5. 'key' → logprob: -4.621106147766113
    6. 'xor' → logprob: -5.871106147766113
    7. 'N' → logprob: -5.996106147766113
    8. '0' → logprob: -5.996106147766113
    9. 'checksum' → logprob: -6.121106147766113
    10. 'X' → logprob: -6.246106147766113

Token 559: ' xor' (ID: 106402)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -1.5968968868255615
    2. ' ^' → logprob: -1.8468968868255615
    3. '=' → logprob: -2.0968968868255615
    4. ':' → logprob: -2.3468968868255615
    5. ' ^=' → logprob: -2.3468968868255615
    6. '<|end|>' → logprob: -2.3468968868255615
    7. ')' → logprob: -2.7218968868255615
    8. ' ' → logprob: -3.0968968868255615
    9. '^' → logprob: -3.5968968868255615
    10. '       ' → logprob: -4.596897125244141

Token 560: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.035001568496227264
    2. ' k' → logprob: -3.910001516342163
    3. 'D' → logprob: -4.660001754760742
    4. '0' → logprob: -6.035001754760742
    5. ' D' → logprob: -6.910001754760742
    6. 'key' → logprob: -7.035001754760742
    7. ' key' → logprob: -8.410001754760742
    8. 's' → logprob: -8.785001754760742
    9. ' ' → logprob: -9.535001754760742
    10. 'N' → logprob: -10.285001754760742

Token 561: ' =' (ID: 314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 562: ' ' (ID: 220)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.919108510017395
    2. ' k' → logprob: -1.794108510017395
    3. 'D' → logprob: -1.919108510017395
    4. '0' → logprob: -2.0441083908081055
    5. ' D' → logprob: -2.1691083908081055
    6. ' ' → logprob: -3.4191083908081055
    7. ' s' → logprob: -5.0441083908081055
    8. 's' → logprob: -5.4191083908081055
    9. '`' → logprob: -8.919108390808105
    10. 'd' → logprob: -9.294108390808105

Token 563: '0' (ID: 15)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.10216432064771652
    2. '0' → logprob: -2.9771642684936523
    3. 'D' → logprob: -3.2271642684936523
    4. ' k' → logprob: -5.977164268493652
    5. 's' → logprob: -6.102164268493652
    6. ' D' → logprob: -7.102164268493652
    7. ' ' → logprob: -7.477164268493652
    8. ' s' → logprob: -9.727164268493652
    9. 'data' → logprob: -9.977164268493652
    10. '(' → logprob: -10.102164268493652

Token 564: ' =>' (ID: 871)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.7698212265968323
    2. '<|end|>' → logprob: -0.8948212265968323
    3. ' ' → logprob: -3.1448211669921875
    4. ')' → logprob: -3.2698211669921875
    5. '<|end|>' → logprob: -4.8948211669921875
    6. ':
' → logprob: -5.0198211669921875
    7. '       ' → logprob: -5.0198211669921875
    8. '):' → logprob: -5.3948211669921875
    9. '
' → logprob: -5.6448211669921875
    10. '   ' → logprob: -5.7698211669921875

Token 565: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.24535110592842102
    2. 'k' → logprob: -1.6203510761260986
    3. ' key' → logprob: -4.245351314544678
    4. 'key' → logprob: -5.245351314544678
    5. 'D' → logprob: -9.49535083770752
    6. ' D' → logprob: -10.74535083770752
    7. 'Key' → logprob: -11.74535083770752
    8. '0' → logprob: -12.12035083770752
    9. 'print' → logprob: -12.24535083770752
    10. '`' → logprob: -12.24535083770752

Token 566: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5773994326591492
    2. ' =' → logprob: -0.8273994326591492
    3. ' ^=' → logprob: -6.577399253845215
    4. ' ' → logprob: -9.952399253845215
    5. '^' → logprob: -12.577399253845215
    6. ')' → logprob: -12.827399253845215
    7. ' ==' → logprob: -13.202399253845215
    8. ' ^' → logprob: -13.202399253845215
    9. ' ' → logprob: -13.702399253845215
    10. ' xor' → logprob: -13.827399253845215

Token 567: ' D' (ID: 415)
  Prédit: 'D'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'D' → logprob: -0.00016945181414484978
    2. ' D' → logprob: -9.12516975402832
    3. 's' → logprob: -9.75016975402832
    4. 'd' → logprob: -13.50016975402832
    5. '0' → logprob: -15.00016975402832
    6. '   ' → logprob: -15.75016975402832
    7. '	D' → logprob: -16.25016975402832
    8. ' ' → logprob: -16.50016975402832
    9. ' s' → logprob: -17.12516975402832
    10. '`' → logprob: -17.25016975402832

Token 568: '
' (ID: 198)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.9174505472183228
    2. '       ' → logprob: -1.0424505472183228
    3. '=' → logprob: -1.9174505472183228
    4. '
' → logprob: -2.917450428009033
    5. ' 
' → logprob: -4.042450428009033
    6. ' ' → logprob: -5.542450428009033
    7. ':' → logprob: -5.542450428009033
    8. '<|end|>' → logprob: -5.917450428009033
    9. ':
' → logprob: -6.167450428009033
    10. '        
' → logprob: -6.167450428009033

Token 569: '           ' (ID: 352)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -1.5043305158615112
    2. ' ' → logprob: -1.7543305158615112
    3. '       ' → logprob: -1.8793305158615112
    4. ' =' → logprob: -2.004330635070801
    5. ' 
' → logprob: -2.129330635070801
    6. '<|end|>' → logprob: -2.754330635070801
    7. ')' → logprob: -3.504330635070801
    8. '
' → logprob: -3.754330635070801
    9. '   ' → logprob: -4.379330635070801
    10. '           ' → logprob: -4.379330635070801

Token 570: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.8917484879493713
    2. '=' → logprob: -1.0167484283447266
    3. ' =' → logprob: -2.2667484283447266
    4. ' key' → logprob: -3.5167484283447266
    5. '           ' → logprob: -4.016748428344727
    6. 'key' → logprob: -4.016748428344727
    7. '   ' → logprob: -4.641748428344727
    8. 'k' → logprob: -4.891748428344727
    9. ' k' → logprob: -4.891748428344727
    10. ')' → logprob: -5.266748428344727

Token 571: ' So' (ID: 2632)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -1.0056884288787842
    2. '=' → logprob: -2.005688428878784
    3. ' =' → logprob: -2.255688428878784
    4. ' key' → logprob: -2.255688428878784
    5. 'key' → logprob: -2.630688428878784
    6. 'k' → logprob: -3.005688428878784
    7. ' k' → logprob: -3.255688428878784
    8. 'return' → logprob: -4.005688667297363
    9. 'D' → logprob: -4.380688667297363
    10. '   ' → logprob: -4.505688667297363

Token 572: ' k' (ID: 372)
  Prédit: 'key'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'key' → logprob: -0.6374015212059021
    2. ' key' → logprob: -0.7624015212059021
    3. '       ' → logprob: -6.137401580810547
    4. 'print' → logprob: -6.262401580810547
    5. ' print' → logprob: -8.262401580810547
    6. '   ' → logprob: -8.512401580810547
    7. 'break' → logprob: -9.637401580810547
    8. '           ' → logprob: -10.012401580810547
    9. ' break' → logprob: -10.137401580810547
    10. ' k' → logprob: -10.262401580810547

Token 573: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.4742083251476288
    2. ' =' → logprob: -0.9742083549499512
    3. ' ^=' → logprob: -9.224207878112793
    4. ' |=' → logprob: -10.599207878112793
    5. ' +=' → logprob: -12.599207878112793
    6. ' ' → logprob: -13.099207878112793
    7. '+=' → logprob: -13.849207878112793
    8. '|' → logprob: -14.724207878112793
    9. ' <<=' → logprob: -15.099207878112793
    10. '   ' → logprob: -15.724207878112793

Token 574: ' D' (ID: 415)
  Prédit: 'D'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'D' → logprob: -0.010175801813602448
    2. ' D' → logprob: -4.760175704956055
    3. 's' → logprob: -6.510175704956055
    4. 'd' → logprob: -10.260175704956055
    5. ' s' → logprob: -10.260175704956055
    6. ' ' → logprob: -13.760175704956055
    7. '   ' → logprob: -15.260175704956055
    8. ' d' → logprob: -16.010175704956055
    9. '  ' → logprob: -16.135175704956055
    10. ' ' → logprob: -16.260175704956055

Token 575: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.542900562286377
    2. '=' → logprob: -2.167900562286377
    3. ' =' → logprob: -2.167900562286377
    4. ' 
' → logprob: -2.792900562286377
    5. '       ' → logprob: -3.667900562286377
    6. ':' → logprob: -3.667900562286377
    7. '   ' → logprob: -4.167900562286377
    8. ' ' → logprob: -4.292900562286377
    9. '<|end|>' → logprob: -5.167900562286377
    10. '  
' → logprob: -5.417900562286377

Token 576: '       ' (ID: 309)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.822770357131958
    2. ' =' → logprob: -1.322770357131958
    3. '
' → logprob: -1.697770357131958
    4. '<|end|>' → logprob: -3.197770357131958
    5. ':' → logprob: -4.197770118713379
    6. '       ' → logprob: -4.322770118713379
    7. ' 
' → logprob: -4.447770118713379
    8. '  
' → logprob: -5.072770118713379
    9. '   ' → logprob: -5.572770118713379
    10. ':
' → logprob: -5.697770118713379

Token 577: ' key' (ID: 2140)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.21935254335403442
    2. 'print' → logprob: -1.8443524837493896
    3. 'return' → logprob: -4.094352722167969
    4. 'key' (adapté à ' key') → logprob: -4.844352722167969
    5. ' key' → logprob: -4.969352722167969
    6. '   ' → logprob: -6.344352722167969
    7. '
' → logprob: -6.344352722167969
    8. ' return' → logprob: -6.844352722167969
    9. ' print' → logprob: -6.969352722167969
    10. ' =' → logprob: -7.094352722167969

Token 578: ' =' (ID: 314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 579: ' D' (ID: 415)
  Prédit: 'D'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'D' → logprob: -0.027228208258748055
    2. ' D' → logprob: -3.7772281169891357
    3. 's' → logprob: -5.652228355407715
    4. 'd' → logprob: -8.152228355407715
    5. ' s' → logprob: -8.777228355407715
    6. '   ' → logprob: -11.277228355407715
    7. ' ' → logprob: -11.902228355407715
    8. ' d' → logprob: -13.527228355407715
    9. '  ' → logprob: -14.152228355407715
    10. '    ' → logprob: -15.027228355407715

Token 580: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 581: '       ' (ID: 309)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 582: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.006806791294366121
    2. '       ' → logprob: -5.13180685043335
    3. ' print' → logprob: -7.13180685043335
    4. '   ' → logprob: -9.881806373596191
    5. '
' → logprob: -11.256806373596191
    6. 'for' → logprob: -12.131806373596191
    7. 'if' → logprob: -12.756806373596191
    8. 'return' → logprob: -13.506806373596191
    9. '        
' → logprob: -13.631806373596191
    10. 'key' → logprob: -13.881806373596191

Token 583: '(hex' (ID: 99522)
  Prédit: '(key'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(key' → logprob: -0.0004329341172706336
    2. '()' → logprob: -8.625432968139648
    3. 'key' → logprob: -8.625432968139648
    4. '(' → logprob: -10.125432968139648
    5. '(chr' → logprob: -10.875432968139648
    6. 'hex' → logprob: -12.375432968139648
    7. '(hex' → logprob: -12.875432968139648
    8. '(f' → logprob: -12.875432968139648
    9. '((' → logprob: -13.500432968139648
    10. '(int' → logprob: -14.125432968139648

Token 584: '(key' (ID: 8932)
  Prédit: '(key'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(key' → logprob: -6.790129555156454e-05
    2. 'key' → logprob: -9.625067710876465
    3. '(' → logprob: -14.875067710876465
    4. ' key' → logprob: -15.000067710876465
    5. ',key' → logprob: -15.250067710876465
    6. ')(' → logprob: -15.375067710876465
    7. ' (' → logprob: -15.625067710876465
    8. '(s' → logprob: -16.00006866455078
    9. '(k' → logprob: -16.12506866455078
    10. '[key' → logprob: -16.37506866455078

Token 585: ')[' (ID: 13637)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.5639208555221558
    2. '))' → logprob: -0.9389208555221558
    3. ')[' → logprob: -3.9389209747314453
    4. '())[' → logprob: -5.188920974731445
    5. ')' → logprob: -5.313920974731445
    6. '())' → logprob: -5.813920974731445
    7. ').' → logprob: -5.813920974731445
    8. '()).' → logprob: -6.188920974731445
    9. '()' → logprob: -6.938920974731445
    10. '()[' → logprob: -7.813920974731445

Token 586: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -5.512236498361744e-07
    2. '```' → logprob: -14.750000953674316
    3. '-' → logprob: -17.25
    4. '1' → logprob: -17.375
    5. ':' → logprob: -17.5
    6. '[' → logprob: -17.625
    7. '3' → logprob: -17.625
    8. '4' → logprob: -17.875
    9. 'len' → logprob: -18.25
    10. ' ' → logprob: -18.375

Token 587: ':]' (ID: 67377)
  Prédit: ':].'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':].' → logprob: -0.2045983523130417
    2. ':' → logprob: -1.704598307609558
    3. ':]' → logprob: -6.454598426818848
    4. '():' → logprob: -6.454598426818848
    5. ':],' → logprob: -11.579598426818848
    6. '()' → logprob: -11.829598426818848
    7. ':])
' → logprob: -11.954598426818848
    8. ':)' → logprob: -12.204598426818848
    9. '()].' → logprob: -12.829598426818848
    10. ':-' → logprob: -13.954598426818848

Token 588: ' if' (ID: 538)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3230228126049042
    2. '()' → logprob: -1.8230228424072266
    3. '())' → logprob: -2.1980228424072266
    4. '```' → logprob: -6.448022842407227
    5. '<|end|>' → logprob: -7.198022842407227
    6. ' ())' → logprob: -8.073022842407227
    7. '       ' → logprob: -8.948022842407227
    8. '   ' → logprob: -9.073022842407227
    9. '#' → logprob: -9.073022842407227
    10. '()
' → logprob: -9.198022842407227

Token 589: ' key' (ID: 2140)
  Prédit: 'key'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'key' → logprob: -5.633853652398102e-05
    2. ' key' → logprob: -9.875056266784668
    3. 'hex' → logprob: -13.375056266784668
    4. 'len' → logprob: -13.500056266784668
    5. 'D' → logprob: -14.000056266784668
    6. '   ' → logprob: -14.625056266784668
    7. 'k' → logprob: -15.500056266784668
    8. '  ' → logprob: -16.000057220458984
    9. '(key' → logprob: -16.250057220458984
    10. ' ' → logprob: -17.000057220458984

Token 590: ' !=' (ID: 1666)
  Prédit: '!='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '!=' → logprob: -0.03286413848400116
    2. 'else' → logprob: -3.9078640937805176
    3. ' !=' → logprob: -4.532864093780518
    4. ' else' → logprob: -6.532864093780518
    5. '>' → logprob: -11.157864570617676
    6. '==' → logprob: -11.532864570617676
    7. '!==' → logprob: -12.282864570617676
    8. '!='' → logprob: -13.032864570617676
    9. ')' → logprob: -13.407864570617676
    10. '!="' → logprob: -13.532864570617676

Token 591: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -4.036524842376821e-05
    2. ' ' → logprob: -10.125040054321289
    3. '   ' → logprob: -15.375040054321289
    4. '```' → logprob: -18.87504005432129
    5. '       ' → logprob: -19.12504005432129
    6. '     ' → logprob: -19.87504005432129
    7. '  ' → logprob: -20.00004005432129
    8. '    ' → logprob: -20.37504005432129
    9. 'else' → logprob: -20.37504005432129
    10. 'None' → logprob: -20.50004005432129

Token 592: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -3.5716304410016164e-05
    2. ' ' → logprob: -10.250035285949707
    3. '   ' → logprob: -15.375035285949707
    4. '       ' → logprob: -18.000036239624023
    5. '```' → logprob: -18.875036239624023
    6. '    ' → logprob: -19.125036239624023
    7. '     ' → logprob: -19.250036239624023
    8. '           ' → logprob: -19.500036239624023
    9. 'zero' → logprob: -19.750036239624023
    10. 'None' → logprob: -19.750036239624023

Token 593: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.5759409666061401
    2. 'else' → logprob: -0.8259409666061401
    3. '```' → logprob: -14.57594108581543
    4. '   ' → logprob: -14.95094108581543
    5. ' ' → logprob: -15.20094108581543
    6. '
' → logprob: -15.82594108581543
    7. '	else' → logprob: -15.95094108581543
    8. ')' → logprob: -16.57594108581543
    9. '!=' → logprob: -16.82594108581543
    10. '    ' → logprob: -17.32594108581543

Token 594: ' '' (ID: 461)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.05016693100333214
    2. ''' → logprob: -3.3001668453216553
    3. '"' → logprob: -4.425167083740234
    4. ' ' → logprob: -9.925167083740234
    5. '`' → logprob: -11.175167083740234
    6. '1' → logprob: -12.675167083740234
    7. ' '' → logprob: -13.050167083740234
    8. '-' → logprob: -13.175167083740234
    9. '   ' → logprob: -13.675167083740234
    10. '00' → logprob: -13.737667083740234

Token 595: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -2.9875325708417222e-05
    2. '00' → logprob: -10.500029563903809
    3. '-' → logprob: -13.750029563903809
    4. ' ' → logprob: -14.750029563903809
    5. '000' → logprob: -15.250029563903809
    6. ''' → logprob: -15.500029563903809
    7. 'None' → logprob: -16.000030517578125
    8. '1' → logprob: -17.125030517578125
    9. '"' → logprob: -17.812530517578125
    10. '')' → logprob: -17.875030517578125

Token 596: '')

' (ID: 9735)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.009927851147949696
    2. '')' → logprob: -4.634927749633789
    3. '<|end|>' → logprob: -9.634927749633789
    4. '")' → logprob: -10.259927749633789
    5. '`)' → logprob: -10.634927749633789
    6. '0' → logprob: -10.884927749633789
    7. '})' → logprob: -12.134927749633789
    8. '])' → logprob: -12.259927749633789
    9. '())' → logprob: -12.384927749633789
    10. ''])' → logprob: -13.134927749633789

Token 597: 'if' (ID: 366)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 598: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.04860122874379158
    2. '__' → logprob: -3.0486011505126953
    3. '_' → logprob: -11.548601150512695
    4. '___' → logprob: -13.423601150512695
    5. '_name' → logprob: -13.673601150512695
    6. ' _' → logprob: -13.923601150512695
    7. 'name' → logprob: -15.298601150512695
    8. ' ' → logprob: -15.923601150512695
    9. ' ___' → logprob: -16.048601150512695
    10. 'if' → logprob: -16.298601150512695

Token 599: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.11945348978042603
    2. ' ==' → logprob: -2.2444534301757812
    3. '==' → logprob: -5.244453430175781
    4. 'name' → logprob: -7.744453430175781
    5. ' __' → logprob: -8.369453430175781
    6. '__.__' → logprob: -8.869453430175781
    7. '.__' → logprob: -9.119453430175781
    8. '__.' → logprob: -9.369453430175781
    9. '.' → logprob: -9.744453430175781
    10. ' .' → logprob: -9.869453430175781

Token 600: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.00013119110371917486
    2. '==' → logprob: -9.000131607055664
    3. '=="' → logprob: -12.625131607055664
    4. ' ==' → logprob: -13.375131607055664
    5. '__.__' → logprob: -13.375131607055664
    6. '=='' → logprob: -15.000131607055664
    7. '___' → logprob: -15.000131607055664
    8. '_' → logprob: -15.375131607055664
    9. '__('' → logprob: -15.625131607055664
    10. '____' → logprob: -16.875131607055664

Token 601: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.3328261077404022
    2. '__' → logprob: -1.5828261375427246
    3. ' ==' → logprob: -2.8328261375427246
    4. '=="' → logprob: -4.332826137542725
    5. '=='' → logprob: -5.207826137542725
    6. '__.__' → logprob: -9.457825660705566
    7. '```' → logprob: -9.957825660705566
    8. '__":
' → logprob: -11.082825660705566
    9. '==='' → logprob: -11.332825660705566
    10. '()==' → logprob: -11.457825660705566

Token 602: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.10021431744098663
    2. ''' → logprob: -2.3502142429351807
    3. '__' → logprob: -12.350214004516602
    4. ' "__' → logprob: -12.850214004516602
    5. ' '__' → logprob: -15.100214004516602
    6. '"user' → logprob: -16.7252140045166
    7. '"name' → logprob: -16.7252140045166
    8. ''"' → logprob: -16.8502140045166
    9. '   ' → logprob: -16.9752140045166
    10. '("__' → logprob: -17.4752140045166

Token 603: 'main' (ID: 7731)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.6979352235794067
    2. 'main' → logprob: -0.6979352235794067
    3. '"' → logprob: -5.822935104370117
    4. 'name' → logprob: -6.822935104370117
    5. ''' → logprob: -7.322935104370117
    6. '___' → logprob: -11.197935104370117
    7. '```' → logprob: -11.447935104370117
    8. '__":
' → logprob: -11.572935104370117
    9. '____' → logprob: -12.322935104370117
    10. '__':
' → logprob: -12.572935104370117

Token 604: '__":
' (ID: 49892)
  Prédit: '__":
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__":
' → logprob: -0.10268554091453552
    2. '__' → logprob: -2.3526854515075684
    3. '__':
' → logprob: -6.102685451507568
    4. '__.' → logprob: -9.102685928344727
    5. '__:' → logprob: -9.602685928344727
    6. '__.__' → logprob: -10.352685928344727
    7. '__["' → logprob: -11.102685928344727
    8. '==' → logprob: -12.727685928344727
    9. '.' → logprob: -12.977685928344727
    10. '__",' → logprob: -13.602685928344727

Token 605: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00042768914136104286
    2. 'main' → logprob: -8.12542724609375
    3. '	main' → logprob: -9.25042724609375
    4. ' main' → logprob: -10.50042724609375
    5. '   ' → logprob: -12.00042724609375
    6. '    
' → logprob: -14.00042724609375
    7. '_main' → logprob: -14.75042724609375
    8. '<|end|>' → logprob: -15.62542724609375
    9. ' ' → logprob: -15.87542724609375
    10. '```' → logprob: -16.12542724609375

Token 606: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' (adapté à ' main') → logprob: -1.9361264946837764e-07
    2. ' main' → logprob: -16.5
    3. '	main' → logprob: -20.125
    4. '   ' → logprob: -24.375
    5. '.main' → logprob: -24.5
    6. 'import' → logprob: -24.75
    7. '(main' → logprob: -25.375
    8. '_main' → logprob: -25.5
    9. 'Main' → logprob: -27.75
    10. '```' → logprob: -28.25

Token 607: '()' (ID: 416)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 605
Tokens correctement prédits (1ère position, stricte): 153
Tokens correctement prédits (1ère position, avec adaptation): 157
Tokens correctement prédits (top 10): 381
Précision stricte (1ère position): 25.29%
Précision adaptée (1ère position): 25.95%
Précision (top 10): 62.98%
================================================================================
