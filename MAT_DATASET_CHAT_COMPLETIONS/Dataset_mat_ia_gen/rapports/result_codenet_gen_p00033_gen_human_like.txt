================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:09:23
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def can_stack_balls(balls):
    stack_b = []
    stack_c = []
    for ball in balls:
        # Try to put the ball in stack B if possible
        if not stack_b or stack_b[-1] < ball:
            stack_b.append(ball)
        # Otherwise, try to put the ball in stack C if possible
        elif not stack_c or stack_c[-1] < ball:
            stack_c.append(ball)
        else:
            # Cannot put ball in either stack maintaining ascending order
            return "NO"
    return "YES"

n = int(input())
for _ in range(n):
    balls = list(map(int, input().split()))
    print(can_stack_balls(balls))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' can' (ID: 665)
  → Token d'amorce (pas de prédiction)

Token 2: '_stack' (ID: 35650)
  → Token d'amorce (pas de prédiction)

Token 3: '_b' (ID: 1535)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.005897983908653259
    2. '_' → logprob: -5.2558979988098145
    3. '```' → logprob: -8.380897521972656
    4. '(
' → logprob: -8.880897521972656
    5. ' (' → logprob: -10.505897521972656
    6. '[' → logprob: -10.630897521972656
    7. '():' → logprob: -10.880897521972656
    8. '(_' → logprob: -10.880897521972656
    9. '(a' → logprob: -10.880897521972656
    10. '("""' → logprob: -11.130897521972656

Token 4: 'alls' (ID: 6539)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.04591915383934975
    2. 'lock' → logprob: -4.420918941497803
    3. 'etween' → logprob: -4.795918941497803
    4. 'y' → logprob: -5.170918941497803
    5. '```' → logprob: -5.420918941497803
    6. '_' → logprob: -5.545918941497803
    7. '(e' → logprob: -5.920918941497803
    8. 'a' → logprob: -6.170918941497803
    9. '(a' → logprob: -6.420918941497803
    10. 'locks' → logprob: -6.545918941497803

Token 5: '(b' (ID: 3229)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.008986682631075382
    2. '(:' → logprob: -5.508986473083496
    3. '():' → logprob: -5.883986473083496
    4. ':' → logprob: -7.133986473083496
    5. '(_:' → logprob: -7.633986473083496
    6. '```' → logprob: -8.133986473083496
    7. '_' → logprob: -8.383986473083496
    8. '_:' → logprob: -9.758986473083496
    9. '(":' → logprob: -9.883986473083496
    10. '(a' → logprob: -10.758986473083496

Token 6: 'alls' (ID: 6539)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.006316597107797861
    2. ')' → logprob: -6.631316661834717
    3. 'e' → logprob: -6.631316661834717
    4. 'all' → logprob: -6.881316661834717
    5. ')a' → logprob: -6.881316661834717
    6. '_a' → logprob: -8.006316184997559
    7. '(a' → logprob: -8.131316184997559
    8. 'alls' → logprob: -8.381316184997559
    9. ''a' → logprob: -8.631316184997559
    10. '```' → logprob: -9.131316184997559

Token 7: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0017465773271396756
    2. ':' → logprob: -7.126746654510498
    3. '[' → logprob: -7.376746654510498
    4. ')' → logprob: -8.25174617767334
    5. ',' → logprob: -10.37674617767334
    6. '):
' → logprob: -11.25174617767334
    7. ' ):' → logprob: -13.00174617767334
    8. '[]):' → logprob: -13.12674617767334
    9. ']:' → logprob: -13.75174617767334
    10. '```' → logprob: -13.87674617767334

Token 8: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.36325448751449585
    2. ':' → logprob: -1.6132545471191406
    3. '```' → logprob: -2.3632545471191406
    4. '    
' → logprob: -5.863254547119141
    5. '(' → logprob: -6.488254547119141
    6. '\' → logprob: -6.738254547119141
    7. '``' → logprob: -7.113254547119141
    8. '"' → logprob: -7.488254547119141
    9. ''' → logprob: -7.613254547119141
    10. '\n' → logprob: -7.738254547119141

Token 9: ' stack' (ID: 10825)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.21966226398944855
    2. '```' → logprob: -2.2196621894836426
    3. ' if' → logprob: -3.5946621894836426
    4. '       ' → logprob: -4.594662189483643
    5. 'if' → logprob: -4.594662189483643
    6. '[' → logprob: -4.969662189483643
    7. '    ' → logprob: -5.094662189483643
    8. ' ' → logprob: -5.469662189483643
    9. ' for' → logprob: -5.719662189483643
    10. 'return' → logprob: -5.969662189483643

Token 10: '_b' (ID: 1535)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.915212869644165
    2. '_' → logprob: -1.165212869644165
    3. 's' → logprob: -1.665212869644165
    4. '=' → logprob: -2.540212869644165
    5. 'ed' → logprob: -4.415212631225586
    6. '=[]' → logprob: -5.415212631225586
    7. '[' → logprob: -7.540212631225586
    8. '.' → logprob: -8.165212631225586
    9. ')' → logprob: -8.165212631225586
    10. '(' → logprob: -8.165212631225586

Token 11: ' =' (ID: 314)
  Prédit: 'alls'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'alls' → logprob: -0.018797336146235466
    2. 'all' → logprob: -4.268797397613525
    3. '_all' → logprob: -6.143797397613525
    4. '_' → logprob: -7.768797397613525
    5. 'ase' → logprob: -7.768797397613525
    6. 'als' → logprob: -7.893797397613525
    7. 'y' → logprob: -9.143796920776367
    8. 'al' → logprob: -9.143796920776367
    9. '```' → logprob: -9.143796920776367
    10. ' =' → logprob: -9.393796920776367

Token 12: ' []
' (ID: 8911)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.4314000904560089
    2. ' []' → logprob: -1.0564000606536865
    3. '[' → logprob: -7.306400299072266
    4. ' [' → logprob: -7.556400299072266
    5. ' balls' → logprob: -7.931400299072266
    6. 'balls' → logprob: -8.056400299072266
    7. '{}' → logprob: -8.181400299072266
    8. ' ' → logprob: -8.806400299072266
    9. '```' → logprob: -9.806400299072266
    10. 'set' → logprob: -10.306400299072266

Token 13: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.31376346945762634
    2. '    
' → logprob: -2.313763380050659
    3. ' for' → logprob: -3.438763380050659
    4. '    ' → logprob: -3.438763380050659
    5. '```' → logprob: -3.563763380050659
    6. 'for' → logprob: -4.063763618469238
    7. '\' → logprob: -4.188763618469238
    8. ' ' → logprob: -4.563763618469238
    9. '     
' → logprob: -4.813763618469238
    10. '   
' → logprob: -5.063763618469238

Token 14: ' stack' (ID: 10825)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.6682413816452026
    2. 'for' → logprob: -0.7932413816452026
    3. '   ' → logprob: -3.418241500854492
    4. '```' → logprob: -6.918241500854492
    5. '    
' → logprob: -7.918241500854492
    6. ' ' → logprob: -8.543241500854492
    7. '    ' → logprob: -8.543241500854492
    8. '\n' → logprob: -8.918241500854492
    9. '\' → logprob: -9.418241500854492
    10. '
' → logprob: -10.293241500854492

Token 15: '_c' (ID: 1303)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.8868278861045837
    2. '_a' → logprob: -0.8868278861045837
    3. '_b' → logprob: -1.7618279457092285
    4. ' =' → logprob: -5.8868279457092285
    5. '=' → logprob: -7.3868279457092285
    6. '_c' → logprob: -8.01182746887207
    7. ')' → logprob: -9.01182746887207
    8. '_)' → logprob: -9.51182746887207
    9. '   ' → logprob: -9.76182746887207
    10. '_=' → logprob: -9.76182746887207

Token 16: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.490617573261261
    2. '=' → logprob: -0.990617573261261
    3. '_' → logprob: -4.990617752075195
    4. '.append' → logprob: -5.740617752075195
    5. '[]' → logprob: -5.865617752075195
    6. '=[]' → logprob: -6.365617752075195
    7. ')' → logprob: -7.740617752075195
    8. '.' → logprob: -8.115617752075195
    9. '[' → logprob: -8.615617752075195
    10. '[:]' → logprob: -8.740617752075195

Token 17: ' []
' (ID: 8911)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.6931562423706055
    2. ' []' → logprob: -0.6931562423706055
    3. ' ' → logprob: -13.068156242370605
    4. '[]
' → logprob: -13.193156242370605
    5. '[]}' → logprob: -13.693156242370605
    6. ' []
' → logprob: -14.068156242370605
    7. '[' → logprob: -14.318156242370605
    8. '  ' → logprob: -14.318156242370605
    9. '0' → logprob: -14.443156242370605
    10. '[:]' → logprob: -15.068156242370605

Token 18: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.218196302652359
    2. '    
' → logprob: -2.468196392059326
    3. '```' → logprob: -2.968196392059326
    4. '
' → logprob: -3.718196392059326
    5. ' for' → logprob: -4.968196392059326
    6. 'for' → logprob: -5.093196392059326
    7. '\n' → logprob: -5.343196392059326
    8. '  
' → logprob: -5.843196392059326
    9. '\' → logprob: -5.843196392059326
    10. '    ' → logprob: -6.593196392059326

Token 19: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.4985954165458679
    2. ' for' → logprob: -1.6235954761505127
    3. '   ' → logprob: -1.9985954761505127
    4. '```' → logprob: -2.8735954761505127
    5. '\n' → logprob: -6.998595237731934
    6. '    
' → logprob: -7.498595237731934
    7. '``' → logprob: -7.748595237731934
    8. '`' → logprob: -8.123595237731934
    9. '
' → logprob: -8.123595237731934
    10. '\' → logprob: -8.998595237731934

Token 20: ' ball' (ID: 7880)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.0031133070588111877
    2. ' b' → logprob: -6.253113269805908
    3. ' balls' → logprob: -7.878113269805908
    4. '  ' → logprob: -8.253113746643066
    5. ' ball' → logprob: -8.503113746643066
    6. ' i' → logprob: -9.378113746643066
    7. ' ' → logprob: -9.628113746643066
    8. 'b' → logprob: -10.128113746643066
    9. '_' → logprob: -10.378113746643066
    10. 'i' → logprob: -11.378113746643066

Token 21: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.031222471967339516
    2. 'in' → logprob: -3.5312225818634033
    3. ' ' → logprob: -6.906222343444824
    4. 's' → logprob: -8.156222343444824
    5. '  ' → logprob: -9.656222343444824
    6. '_in' → logprob: -9.781222343444824
    7. '_' → logprob: -10.656222343444824
    8. '   ' → logprob: -11.531222343444824
    9. ',' → logprob: -12.531222343444824
    10. ' ,' → logprob: -12.531222343444824

Token 22: ' balls' (ID: 32657)
  Prédit: ' balls'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' balls' → logprob: -0.012549798004329205
    2. 'balls' → logprob: -4.387549877166748
    3. ' ' → logprob: -11.13754940032959
    4. ' ' → logprob: -12.01254940032959
    5. 'Balls' → logprob: -12.57504940032959
    6. '   ' → logprob: -12.95004940032959
    7. 'b' → logprob: -13.07504940032959
    8. ')' → logprob: -13.32504940032959
    9. '_b' → logprob: -13.51254940032959
    10. '```' → logprob: -13.76254940032959

Token 23: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0005313486326485872
    2. '   ' → logprob: -8.375531196594238
    3. ':
' → logprob: -9.000531196594238
    4. '       ' → logprob: -9.250531196594238
    5. '):' → logprob: -10.125531196594238
    6. ':\' → logprob: -12.125531196594238
    7. ' :' → logprob: -12.125531196594238
    8. ',' → logprob: -12.125531196594238
    9. '    ' → logprob: -12.250531196594238
    10. ':**' → logprob: -12.500531196594238

Token 24: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.055142685770988464
    2. '    ' → logprob: -3.180142641067505
    3. '   ' → logprob: -4.555142879486084
    4. '```' → logprob: -8.055142402648926
    5. '<|end|>' → logprob: -8.555142402648926
    6. ' ' → logprob: -8.805142402648926
    7. '        
' → logprob: -8.805142402648926
    8. ' if' → logprob: -8.930142402648926
    9. '     ' → logprob: -9.430142402648926
    10. '     
' → logprob: -9.430142402648926

Token 25: ' #' (ID: 1069)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.7081925272941589
    2. '    ' → logprob: -0.8331925272941589
    3. '        ' → logprob: -3.9581925868988037
    4. '       ' → logprob: -3.9581925868988037
    5. 'if' → logprob: -4.208192348480225
    6. ' ' → logprob: -4.333192348480225
    7. '   ' → logprob: -5.958192348480225
    8. '```' → logprob: -6.208192348480225
    9. '<|end|>' → logprob: -7.458192348480225
    10. '     
' → logprob: -8.333192825317383

Token 26: ' Try' (ID: 14720)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.12420880794525146
    2. ' ' → logprob: -2.499208927154541
    3. 'if' → logprob: -3.749208927154541
    4. '    ' → logprob: -5.624208927154541
    5. '<|end|>' → logprob: -5.624208927154541
    6. 'If' → logprob: -6.374208927154541
    7. '        ' → logprob: -7.124208927154541
    8. ' stack' → logprob: -8.124208450317383
    9. ' If' → logprob: -8.124208450317383
    10. '<|end|>' → logprob: -8.999208450317383

Token 27: ' to' (ID: 316)
  Prédit: ' to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' to' → logprob: -0.05062815919518471
    2. ':' → logprob: -3.425628185272217
    3. '    ' → logprob: -4.675628185272217
    4. 'to' → logprob: -5.925628185272217
    5. ' if' → logprob: -6.050628185272217
    6. ' :' → logprob: -7.300628185272217
    7. '        ' → logprob: -7.300628185272217
    8. ' ' → logprob: -7.800628185272217
    9. ' placing' → logprob: -8.675627708435059
    10. '```' → logprob: -9.550627708435059

Token 28: ' put' (ID: 3006)
  Prédit: ' place'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' place' → logprob: -0.012725655920803547
    2. ' put' → logprob: -4.762725830078125
    3. ' stack' → logprob: -6.512725830078125
    4. ' add' → logprob: -6.887725830078125
    5. 'place' → logprob: -6.887725830078125
    6. ' find' → logprob: -8.012725830078125
    7. ' push' → logprob: -9.887725830078125
    8. ' append' → logprob: -10.137725830078125
    9. 'put' → logprob: -10.262725830078125
    10. '_place' → logprob: -10.387725830078125

Token 29: ' the' (ID: 290)
  Prédit: ' ball'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ball' → logprob: -0.13482525944709778
    2. ' the' → logprob: -2.1348252296447754
    3. 'ball' → logprob: -5.009825229644775
    4. '(ball' → logprob: -8.259825706481934
    5. ' in' → logprob: -8.509825706481934
    6. ' it' → logprob: -8.634825706481934
    7. ' on' → logprob: -9.134825706481934
    8. 'the' → logprob: -9.259825706481934
    9. ' ' → logprob: -9.384825706481934
    10. ' into' → logprob: -9.634825706481934

Token 30: ' ball' (ID: 7880)
  Prédit: ' ball'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ball' → logprob: -0.08400595188140869
    2. 'ball' → logprob: -3.084005832672119
    3. ' first' → logprob: -3.834005832672119
    4. ' current' → logprob: -4.709005832672119
    5. ' ' → logprob: -6.459005832672119
    6. ' next' → logprob: -6.584005832672119
    7. ' b' → logprob: -8.209006309509277
    8. 'b' → logprob: -8.334006309509277
    9. '    ' → logprob: -9.084006309509277
    10. ' in' → logprob: -9.334006309509277

Token 31: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.02875763364136219
    2. ' ' → logprob: -4.403757572174072
    3. '    ' → logprob: -5.153757572174072
    4. 'in' → logprob: -5.653757572174072
    5. ' on' → logprob: -5.653757572174072
    6. ' )' → logprob: -7.278757572174072
    7. '```' → logprob: -7.403757572174072
    8. ' into' → logprob: -7.778757572174072
    9. '        ' → logprob: -7.903757572174072
    10. ')' → logprob: -8.15375804901123

Token 32: ' stack' (ID: 10825)
  Prédit: ' stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.0001605115394340828
    2. 'stack' → logprob: -9.125160217285156
    3. ' space' → logprob: -10.500160217285156
    4. ' a' → logprob: -11.375160217285156
    5. ' ' → logprob: -12.500160217285156
    6. ' Stack' → logprob: -13.500160217285156
    7. ' the' → logprob: -13.625160217285156
    8. '	stack' → logprob: -13.750160217285156
    9. '(stack' → logprob: -13.750160217285156
    10. ' stacked' → logprob: -13.875160217285156

Token 33: ' B' (ID: 418)
  Prédit: '_b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_b' → logprob: -0.5660915374755859
    2. '_c' → logprob: -1.066091537475586
    3. '_a' → logprob: -2.441091537475586
    4. '_' → logprob: -7.566091537475586
    5. ' _' → logprob: -9.316091537475586
    6. '   ' → logprob: -10.441091537475586
    7. 's' → logprob: -10.441091537475586
    8. '```' → logprob: -10.566091537475586
    9. '`' → logprob: -10.941091537475586
    10. 'space' → logprob: -11.191091537475586

Token 34: ' if' (ID: 538)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.008705690503120422
    2. '<|end|>' → logprob: -5.8837056159973145
    3. '        ' → logprob: -6.6337056159973145
    4. '        
' → logprob: -6.8837056159973145
    5. '    ' → logprob: -7.1337056159973145
    6. '```' → logprob: -7.3837056159973145
    7. ':' → logprob: -7.5087056159973145
    8. '   ' → logprob: -7.6337056159973145
    9. ' if' → logprob: -7.8837056159973145
    10. '<|end|>' → logprob: -8.883706092834473

Token 35: ' possible' (ID: 4149)
  Prédit: ' not'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.044262468814849854
    2. 'not' → logprob: -3.169262409210205
    3. ' stack' → logprob: -7.169262409210205
    4. ' len' → logprob: -8.044262886047363
    5. 'stack' → logprob: -9.294262886047363
    6. ' (' → logprob: -10.169262886047363
    7. 'len' → logprob: -10.794262886047363
    8. '(not' → logprob: -11.919262886047363
    9. '(stack' → logprob: -12.544262886047363
    10. ' ' → logprob: -13.044262886047363

Token 36: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0046573723666369915
    2. '<|end|>' → logprob: -5.50465726852417
    3. '        ' → logprob: -8.879657745361328
    4. '<|end|>' → logprob: -9.254657745361328
    5. '```' → logprob: -9.379657745361328
    6. '        
' → logprob: -9.629657745361328
    7. '   ' → logprob: -9.754657745361328
    8. '    ' → logprob: -10.004657745361328
    9. '           ' → logprob: -11.004657745361328
    10. ':' → logprob: -11.379657745361328

Token 37: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.002907465910539031
    2. '    ' → logprob: -7.1279072761535645
    3. '        ' → logprob: -7.1279072761535645
    4. '   ' → logprob: -7.7529072761535645
    5. '<|end|>' → logprob: -8.127907752990723
    6. ' if' → logprob: -8.627907752990723
    7. '        
' → logprob: -9.752907752990723
    8. ' ' → logprob: -9.877907752990723
    9. '```' → logprob: -9.877907752990723
    10. 'if' → logprob: -10.252907752990723

Token 38: ' if' (ID: 538)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.33325323462486267
    2. ' if' → logprob: -1.583253264427185
    3. 'if' (adapté à ' if') → logprob: -2.7082531452178955
    4. '    ' → logprob: -5.583253383636475
    5. '        ' → logprob: -5.583253383636475
    6. '   ' → logprob: -5.833253383636475
    7. '<|end|>' → logprob: -7.958253383636475
    8. '```' → logprob: -8.333252906799316
    9. '           ' → logprob: -9.083252906799316
    10. ' ' → logprob: -9.583252906799316

Token 39: ' not' (ID: 625)
  Prédit: ' not'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.00786840170621872
    2. 'not' → logprob: -5.13286828994751
    3. ' len' → logprob: -6.50786828994751
    4. ' stack' → logprob: -7.88286828994751
    5. ' (' → logprob: -9.882868766784668
    6. 'len' → logprob: -12.257868766784668
    7. 'stack' → logprob: -12.382868766784668
    8. '(not' → logprob: -12.632868766784668
    9. ' ' → logprob: -13.132868766784668
    10. '(stack' → logprob: -13.757868766784668

Token 40: ' stack' (ID: 10825)
  Prédit: ' stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.0009171743295155466
    2. 'stack' → logprob: -7.000916957855225
    3. '(stack' → logprob: -13.000917434692383
    4. '	stack' → logprob: -13.375917434692383
    5. ' space' → logprob: -14.125917434692383
    6. ' ' → logprob: -15.375917434692383
    7. ' stacks' → logprob: -15.500917434692383
    8. ' not' → logprob: -15.750917434692383
    9. '_stack' → logprob: -16.125917434692383
    10. '.stack' → logprob: -16.125917434692383

Token 41: '_b' (ID: 1535)
  Prédit: '_b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_b' → logprob: -5.4192871175473556e-05
    2. '_' → logprob: -10.250054359436035
    3. ' _' → logprob: -11.500054359436035
    4. '_a' → logprob: -12.250054359436035
    5. '_c' → logprob: -12.750054359436035
    6. ' ' → logprob: -15.625054359436035
    7. 'b' → logprob: -15.625054359436035
    8. '_stack' → logprob: -16.25005340576172
    9. '_B' → logprob: -16.37505340576172
    10. '_d' → logprob: -16.62505340576172

Token 42: ' or' (ID: 503)
  Prédit: ' or'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.061972279101610184
    2. 'or' → logprob: -2.8119723796844482
    3. '	or' → logprob: -13.061972618103027
    4. '[]' → logprob: -13.936972618103027
    5. '   ' → logprob: -14.436972618103027
    6. ' ' → logprob: -15.311972618103027
    7. ' and' → logprob: -15.686972618103027
    8. '[' → logprob: -16.31197166442871
    9. '```' → logprob: -16.43697166442871
    10. '()' → logprob: -16.56197166442871

Token 43: ' stack' (ID: 10825)
  Prédit: ' ball'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ball' → logprob: -0.3892647922039032
    2. ' stack' → logprob: -1.1392648220062256
    3. 'stack' → logprob: -6.7642645835876465
    4. 'ball' → logprob: -6.8892645835876465
    5. ' balls' → logprob: -9.514265060424805
    6. ' ' → logprob: -10.389265060424805
    7. ' ' → logprob: -10.514265060424805
    8. '```' → logprob: -10.639265060424805
    9. '(ball' → logprob: -10.764265060424805
    10. '	stack' → logprob: -12.076765060424805

Token 44: '_b' (ID: 1535)
  Prédit: '_b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_b' → logprob: -1.0445127372804563e-05
    2. '[-' → logprob: -11.50001049041748
    3. '_' → logprob: -15.12501049041748
    4. '_a' → logprob: -18.125009536743164
    5. '_-' → logprob: -18.250009536743164
    6. '```' → logprob: -19.500009536743164
    7. '   ' → logprob: -19.750009536743164
    8. '[' → logprob: -19.750009536743164
    9. 'b' → logprob: -20.125009536743164
    10. '_stack' → logprob: -20.125009536743164

Token 45: '[-' (ID: 17503)
  Prédit: '[-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[-' → logprob: -1.3856492842023727e-06
    2. ' and' → logprob: -13.750000953674316
    3. '[' → logprob: -15.625000953674316
    4. 'and' → logprob: -16.625001907348633
    5. '```' → logprob: -18.250001907348633
    6. ' [-' → logprob: -18.500001907348633
    7. '.append' → logprob: -19.500001907348633
    8. '][-' → logprob: -19.625001907348633
    9. '-' → logprob: -20.125001907348633
    10. '[
' → logprob: -20.125001907348633

Token 46: '1' (ID: 16)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -1.2072350978851318
    2. ']' → logprob: -1.4572350978851318
    3. '()' → logprob: -1.7072350978851318
    4. '1' → logprob: -1.8322350978851318
    5. ' ' → logprob: -3.207235097885132
    6. '()]' → logprob: -3.457235097885132
    7. '(-' → logprob: -3.707235097885132
    8. '(' → logprob: -4.957235336303711
    9. '```' → logprob: -5.582235336303711
    10. '0' → logprob: -5.707235336303711

Token 47: ']' (ID: 60)
  Prédit: ' <='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.5587999224662781
    2. ' <' → logprob: -0.9337999224662781
    3. '<' → logprob: -3.808799982070923
    4. '<=' → logprob: -4.558799743652344
    5. '[' → logprob: -7.308799743652344
    6. ' ' → logprob: -7.308799743652344
    7. ' >=' → logprob: -7.933799743652344
    8. '>' → logprob: -8.308799743652344
    9. ' >' → logprob: -8.558799743652344
    10. ')' → logprob: -9.058799743652344

Token 48: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.5666895508766174
    2. '<' → logprob: -1.0666894912719727
    3. ' <=' → logprob: -2.8166894912719727
    4. '<=' → logprob: -4.566689491271973
    5. ' >' → logprob: -4.816689491271973
    6. '>' → logprob: -5.066689491271973
    7. ' >=' → logprob: -6.441689491271973
    8. '[' → logprob: -6.566689491271973
    9. '>=' → logprob: -7.691689491271973
    10. ' ' → logprob: -9.191689491271973

Token 49: ' ball' (ID: 7880)
  Prédit: ' ball'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ball' → logprob: -0.3432987630367279
    2. '=' → logprob: -1.9682987928390503
    3. 'ball' → logprob: -2.0932986736297607
    4. ' ' → logprob: -3.7182986736297607
    5. ' ' → logprob: -6.34329891204834
    6. ' =' → logprob: -8.21829891204834
    7. '```' → logprob: -8.46829891204834
    8. ' b' → logprob: -8.59329891204834
    9. '(ball' → logprob: -8.59329891204834
    10. '_ball' → logprob: -9.71829891204834

Token 50: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.013347860425710678
    2. '):' → logprob: -4.388347625732422
    3. ':
' → logprob: -7.513347625732422
    4. ' :' → logprob: -8.888347625732422
    5. '):
' → logprob: -9.888347625732422
    6. ')' → logprob: -10.263347625732422
    7. ' and' → logprob: -10.638347625732422
    8. '       ' → logprob: -10.638347625732422
    9. ' ):' → logprob: -12.263347625732422
    10. ':**' → logprob: -13.138347625732422

Token 51: '           ' (ID: 352)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0916856899857521
    2. '           ' → logprob: -3.0916857719421387
    3. ':
' → logprob: -3.2166857719421387
    4. '       ' → logprob: -6.591685771942139
    5. '):' → logprob: -8.71668529510498
    6. ' :' → logprob: -8.71668529510498
    7. ' and' → logprob: -8.71668529510498
    8. ' :
' → logprob: -10.21668529510498
    9. '):
' → logprob: -10.34168529510498
    10. ' or' → logprob: -10.59168529510498

Token 52: ' stack' (ID: 10825)
  Prédit: ' stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.363584965467453
    2. 'stack' (adapté à ' stack') → logprob: -1.7385849952697754
    3. '           ' → logprob: -2.4885849952697754
    4. '               ' → logprob: -3.7385849952697754
    5. '            ' → logprob: -5.113584995269775
    6. '	stack' → logprob: -5.363584995269775
    7. '_stack' → logprob: -5.488584995269775
    8. '(stack' → logprob: -5.988584995269775
    9. '.stack' → logprob: -6.363584995269775
    10. ' ' → logprob: -6.738584995269775

Token 53: '_b' (ID: 1535)
  Prédit: '_b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_b' → logprob: -3.774276774493046e-05
    2. ' _' → logprob: -10.500038146972656
    3. '_' → logprob: -12.000038146972656
    4. '```' → logprob: -14.000038146972656
    5. '_a' → logprob: -14.375038146972656
    6. ')_' → logprob: -14.500038146972656
    7. ' `_' → logprob: -14.750038146972656
    8. '._' → logprob: -15.000038146972656
    9. ' ' → logprob: -15.625038146972656
    10. ''_' → logprob: -15.625038146972656

Token 54: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.00027682865038514137
    2. '.' → logprob: -8.250276565551758
    3. '.app' → logprob: -11.500276565551758
    4. ' .' → logprob: -13.000276565551758
    5. '.ap' → logprob: -13.000276565551758
    6. '.extend' → logprob: -14.875276565551758
    7. '.push' → logprob: -15.500276565551758
    8. '.Append' → logprob: -16.500276565551758
    9. 'append' → logprob: -16.625276565551758
    10. '.add' → logprob: -16.750276565551758

Token 55: '(ball' (ID: 170062)
  Prédit: '(ball'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ball' → logprob: -0.12698134779930115
    2. '(' → logprob: -2.126981258392334
    3. '(b' → logprob: -9.876981735229492
    4. '(
' → logprob: -13.876981735229492
    5. ' (' → logprob: -14.626981735229492
    6. '(

' → logprob: -15.751981735229492
    7. '(`' → logprob: -16.626981735229492
    8. '(B' → logprob: -16.751981735229492
    9. '(bank' → logprob: -16.751981735229492
    10. '(book' → logprob: -16.876981735229492

Token 56: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.002264805603772402
    2. ')
' → logprob: -6.127264976501465
    3. '       ' → logprob: -9.502264976501465
    4. ')
' → logprob: -12.877264976501465
    5. ')

' → logprob: -14.127264976501465
    6. ')return' → logprob: -14.752264976501465
    7. '   ' → logprob: -15.127264976501465
    8. '           ' → logprob: -15.627264976501465
    9. ' )' → logprob: -16.25226402282715
    10. ')n' → logprob: -16.37726402282715

Token 57: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0019783570896834135
    2. 'elif' → logprob: -6.501978397369385
    3. ' elif' → logprob: -8.001977920532227
    4. 'else' → logprob: -10.001977920532227
    5. ' else' → logprob: -10.126977920532227
    6. '           ' → logprob: -10.876977920532227
    7. '<|end|>' → logprob: -11.501977920532227
    8. '	elif' → logprob: -12.126977920532227
    9. '   ' → logprob: -12.376977920532227
    10. '```' → logprob: -12.876977920532227

Token 58: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.14111703634262085
    2. 'elif' → logprob: -2.6411170959472656
    3. ' elif' → logprob: -3.1411170959472656
    4. ' else' → logprob: -4.391117095947266
    5. 'else' → logprob: -5.391117095947266
    6. '	elif' → logprob: -9.891117095947266
    7. '   ' → logprob: -10.766117095947266
    8. '```' → logprob: -11.016117095947266
    9. '           ' → logprob: -11.266117095947266
    10. ' and' → logprob: -12.016117095947266

Token 59: ' Otherwise' (ID: 33987)
  Prédit: ' elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' elif' → logprob: -0.021098345518112183
    2. 'elif' → logprob: -3.8960983753204346
    3. ' else' → logprob: -7.5210981369018555
    4. 'else' → logprob: -11.771098136901855
    5. 'el' → logprob: -12.646098136901855
    6. ' el' → logprob: -14.146098136901855
    7. '	elif' → logprob: -14.146098136901855
    8. ' eli' → logprob: -14.521098136901855
    9. ' elseif' → logprob: -14.646098136901855
    10. '    ' → logprob: -15.021098136901855

Token 60: ',' (ID: 11)
  Prédit: ' elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' elif' → logprob: -0.16893061995506287
    2. 'elif' → logprob: -1.9189306497573853
    3. ':' → logprob: -4.918930530548096
    4. ' if' → logprob: -7.668930530548096
    5. '       ' → logprob: -7.668930530548096
    6. ',' → logprob: -8.918931007385254
    7. '           ' → logprob: -9.668931007385254
    8. '	elif' → logprob: -10.043931007385254
    9. ' else' → logprob: -10.293931007385254
    10. '    ' → logprob: -10.793931007385254

Token 61: ' try' (ID: 2075)
  Prédit: ' elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' elif' → logprob: -0.00479310704395175
    2. 'elif' → logprob: -5.629793167114258
    3. ' ' → logprob: -7.379793167114258
    4. ' if' → logprob: -7.629793167114258
    5. ' else' → logprob: -10.504793167114258
    6. ' ' → logprob: -10.629793167114258
    7. '    ' → logprob: -11.254793167114258
    8. ' continue' → logprob: -12.254793167114258
    9. ' try' → logprob: -12.754793167114258
    10. 'if' → logprob: -13.754793167114258

Token 62: ' to' (ID: 316)
  Prédit: ' to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' to' → logprob: -0.007495293393731117
    2. ' elif' → logprob: -5.507495403289795
    3. ':' → logprob: -6.257495403289795
    4. 'to' → logprob: -7.507495403289795
    5. 'elif' → logprob: -8.257494926452637
    6. ' if' → logprob: -8.507494926452637
    7. '        ' → logprob: -9.007494926452637
    8. '    ' → logprob: -9.007494926452637
    9. ' ' → logprob: -10.257494926452637
    10. '```' → logprob: -10.257494926452637

Token 63: ' put' (ID: 3006)
  Prédit: ' put'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' put' → logprob: -0.09847235679626465
    2. 'put' → logprob: -2.7234723567962646
    3. ' stack' → logprob: -4.598472595214844
    4. ' not' → logprob: -5.223472595214844
    5. 'elif' → logprob: -5.473472595214844
    6. ' elif' → logprob: -5.848472595214844
    7. ' continue' → logprob: -6.223472595214844
    8. 'stack' → logprob: -6.598472595214844
    9. ' place' → logprob: -7.223472595214844
    10. ' add' → logprob: -7.473472595214844

Token 64: ' the' (ID: 290)
  Prédit: ' stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.3593711853027344
    2. ' elif' → logprob: -1.9843711853027344
    3. ' in' → logprob: -2.6093711853027344
    4. ' the' → logprob: -2.8593711853027344
    5. ' ' → logprob: -4.484371185302734
    6. 'elif' → logprob: -4.734371185302734
    7. 'stack' → logprob: -4.984371185302734
    8. ' else' → logprob: -6.359371185302734
    9. ' to' → logprob: -6.859371185302734
    10. ' ' → logprob: -7.359371185302734

Token 65: ' ball' (ID: 7880)
  Prédit: ' ball'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ball' → logprob: -0.1800888627767563
    2. ' elif' → logprob: -2.680088758468628
    3. 'ball' → logprob: -2.680088758468628
    4. 'elif' → logprob: -4.055088996887207
    5. ' stack' → logprob: -4.930088996887207
    6. 'stack' → logprob: -7.055088996887207
    7. ' else' → logprob: -7.305088996887207
    8. ' if' → logprob: -7.430088996887207
    9. 'else' → logprob: -8.555088996887207
    10. 's' → logprob: -9.055088996887207

Token 66: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.004269765689969063
    2. 'in' → logprob: -6.004269599914551
    3. ' elif' → logprob: -6.629269599914551
    4. 'elif' → logprob: -7.879269599914551
    5. '<|end|>' → logprob: -10.75426959991455
    6. ' ' → logprob: -10.87926959991455
    7. ' into' → logprob: -11.12926959991455
    8. ' else' → logprob: -11.62926959991455
    9. ' to' → logprob: -11.75426959991455
    10. '```' → logprob: -12.25426959991455

Token 67: ' stack' (ID: 10825)
  Prédit: ' stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.018190091475844383
    2. 'stack' → logprob: -4.018189907073975
    3. '	stack' → logprob: -11.268190383911133
    4. '(stack' → logprob: -11.393190383911133
    5. ' ' → logprob: -12.393190383911133
    6. ' space' → logprob: -12.768190383911133
    7. '.stack' → logprob: -13.268190383911133
    8. 'space' → logprob: -13.643190383911133
    9. ' ' → logprob: -13.893190383911133
    10. 'c' → logprob: -13.893190383911133

Token 68: ' C' (ID: 363)
  Prédit: '_c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_c' → logprob: -0.0009320637909695506
    2. ' _' → logprob: -7.250932216644287
    3. '_' → logprob: -8.750931739807129
    4. '_a' → logprob: -10.500931739807129
    5. 'c' → logprob: -11.375931739807129
    6. ' c' → logprob: -11.625931739807129
    7. ' C' → logprob: -12.000931739807129
    8. ' ' → logprob: -12.375931739807129
    9. ')' → logprob: -13.625931739807129
    10. '_b' → logprob: -13.875931739807129

Token 69: ' if' (ID: 538)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.08877585828304291
    2. 'elif' → logprob: -2.588775873184204
    3. ' elif' → logprob: -4.713775634765625
    4. '```' → logprob: -8.338775634765625
    5. ':' → logprob: -8.963775634765625
    6. 'else' → logprob: -9.088775634765625
    7. '<|end|>' → logprob: -9.088775634765625
    8. ' else' → logprob: -9.463775634765625
    9. '	elif' → logprob: -9.588775634765625
    10. '   ' → logprob: -10.213775634765625

Token 70: ' possible' (ID: 4149)
  Prédit: ' not'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.04864152520895004
    2. 'not' → logprob: -3.0486414432525635
    3. '   ' → logprob: -11.548641204833984
    4. '```' → logprob: -11.548641204833984
    5. '(not' → logprob: -11.673641204833984
    6. ' ' → logprob: -12.298641204833984
    7. '    ' → logprob: -12.423641204833984
    8. '	not' → logprob: -12.673641204833984
    9. 'stack' → logprob: -12.798641204833984
    10. 'elif' → logprob: -12.798641204833984

Token 71: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.003153241937980056
    2. 'elif' → logprob: -6.628153324127197
    3. ' elif' → logprob: -6.753153324127197
    4. '<|end|>' → logprob: -7.503153324127197
    5. '```' → logprob: -9.753152847290039
    6. '	elif' → logprob: -11.503152847290039
    7. ' else' → logprob: -11.503152847290039
    8. '           ' → logprob: -11.878152847290039
    9. '<|end|>' → logprob: -11.878152847290039
    10. ',' → logprob: -12.878152847290039

Token 72: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.06102663278579712
    2. 'elif' → logprob: -3.3110265731811523
    3. ' elif' → logprob: -3.8110265731811523
    4. '<|end|>' → logprob: -7.936026573181152
    5. '```' → logprob: -8.936026573181152
    6. '	elif' → logprob: -10.311026573181152
    7. ' else' → logprob: -10.936026573181152
    8. '           ' → logprob: -11.561026573181152
    9. ' or' → logprob: -11.561026573181152
    10. '   ' → logprob: -11.811026573181152

Token 73: ' elif' (ID: 9497)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'elif' (adapté à ' elif') → logprob: -0.31372830271720886
    2. ' elif' → logprob: -1.3137283325195312
    3. '       ' → logprob: -8.063728332519531
    4. ' else' → logprob: -9.438728332519531
    5. 'else' → logprob: -9.938728332519531
    6. '	elif' → logprob: -11.438728332519531
    7. 'el' → logprob: -12.938728332519531
    8. '<|end|>' → logprob: -12.938728332519531
    9. '```' → logprob: -12.938728332519531
    10. '   ' → logprob: -13.563728332519531

Token 74: ' not' (ID: 625)
  Prédit: ' not'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.004081128165125847
    2. 'not' → logprob: -5.5040812492370605
    3. ' ' → logprob: -13.504080772399902
    4. ' ' → logprob: -14.754080772399902
    5. '(not' → logprob: -14.879080772399902
    6. '	not' → logprob: -15.004080772399902
    7. ' stack' → logprob: -16.37908172607422
    8. '   ' → logprob: -17.37908172607422
    9. ' len' → logprob: -17.37908172607422
    10. 'stack' → logprob: -17.37908172607422

Token 75: ' stack' (ID: 10825)
  Prédit: ' stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.04309465363621712
    2. 'stack' → logprob: -3.1680946350097656
    3. '(stack' → logprob: -9.543094635009766
    4. '	stack' → logprob: -11.043094635009766
    5. ' ' → logprob: -12.168094635009766
    6. '.stack' → logprob: -13.918094635009766
    7. ' ' → logprob: -14.918094635009766
    8. '<|end|>' → logprob: -15.168094635009766
    9. '_stack' → logprob: -15.293094635009766
    10. 'space' → logprob: -15.668094635009766

Token 76: '_c' (ID: 1303)
  Prédit: '_c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_c' → logprob: -1.981667537620524e-06
    2. '_b' → logprob: -14.000001907348633
    3. '_a' → logprob: -14.000001907348633
    4. 'c' → logprob: -16.000001907348633
    5. '_' → logprob: -16.250001907348633
    6. 'or' → logprob: -18.750001907348633
    7. '       ' → logprob: -18.750001907348633
    8. 'a' → logprob: -18.812501907348633
    9. '   ' → logprob: -19.125001907348633
    10. '_t' → logprob: -19.312501907348633

Token 77: ' or' (ID: 503)
  Prédit: ' or'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.000505730917211622
    2. 'or' → logprob: -7.6255059242248535
    3. ' ' → logprob: -11.500505447387695
    4. '[]' → logprob: -12.125505447387695
    5. '[' → logprob: -14.500505447387695
    6. '        ' → logprob: -14.625505447387695
    7. '	or' → logprob: -15.000505447387695
    8. '           ' → logprob: -15.875505447387695
    9. '[-' → logprob: -16.125505447387695
    10. '       ' → logprob: -16.250505447387695

Token 78: ' stack' (ID: 10825)
  Prédit: ' stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.0059871007688343525
    2. 'stack' → logprob: -5.130987167358398
    3. '(stack' → logprob: -9.880987167358398
    4. '	stack' → logprob: -12.380987167358398
    5. ' ' → logprob: -13.880987167358398
    6. ' ' → logprob: -14.755987167358398
    7. '.stack' → logprob: -15.005987167358398
    8. '_stack' → logprob: -15.505987167358398
    9. ' stacked' → logprob: -15.630987167358398
    10. ' space' → logprob: -15.630987167358398

Token 79: '_c' (ID: 1303)
  Prédit: '_c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_c' → logprob: -3.8889261304575484e-06
    2. '[-' → logprob: -13.250003814697266
    3. '_b' → logprob: -14.500003814697266
    4. 'c' → logprob: -14.750003814697266
    5. ' _' → logprob: -15.125003814697266
    6. '-_' → logprob: -15.375003814697266
    7. '_-' → logprob: -15.750003814697266
    8. '_a' → logprob: -16.000003814697266
    9. '_' → logprob: -16.500003814697266
    10. '[' → logprob: -16.500003814697266

Token 80: '[-' (ID: 17503)
  Prédit: '[-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[-' → logprob: -5.5577775128767826e-06
    2. ' [-' → logprob: -12.500005722045898
    3. '[' → logprob: -13.500005722045898
    4. ' ' → logprob: -16.1250057220459
    5. '-' → logprob: -16.1250057220459
    6. '][-' → logprob: -16.2500057220459
    7. '`' → logprob: -17.1250057220459
    8. '
' → logprob: -17.7500057220459
    9. '[
' → logprob: -18.1250057220459
    10. '```' → logprob: -18.5000057220459

Token 81: '1' (ID: 16)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.5802754759788513
    2. '1' → logprob: -0.8302754759788513
    3. ' -' → logprob: -6.080275535583496
    4. ' ' → logprob: -6.830275535583496
    5. '[-' → logprob: -7.705275535583496
    6. ']' → logprob: -8.705275535583496
    7. '(-' → logprob: -9.205275535583496
    8. '_' → logprob: -9.330275535583496
    9. '   ' → logprob: -10.330275535583496
    10. '```' → logprob: -11.392775535583496

Token 82: ']' (ID: 60)
  Prédit: ' <'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.10033704340457916
    2. '<' → logprob: -2.350337028503418
    3. ' >' → logprob: -9.850337028503418
    4. '>' → logprob: -9.975337028503418
    5. ')' → logprob: -11.350337028503418
    6. ' ' → logprob: -12.225337028503418
    7. ')<' → logprob: -12.475337028503418
    8. '[' → logprob: -13.100337028503418
    9. '```' → logprob: -13.225337028503418
    10. '<class' → logprob: -13.975337028503418

Token 83: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.5804225206375122
    2. '<' → logprob: -0.8304225206375122
    3. '>' → logprob: -5.955422401428223
    4. ' >' → logprob: -6.330422401428223
    5. '[' → logprob: -10.705422401428223
    6. '<|end|>' → logprob: -11.455422401428223
    7. ' ' → logprob: -11.580422401428223
    8. '<int' → logprob: -11.955422401428223
    9. ')' → logprob: -12.080422401428223
    10. '<class' → logprob: -12.455422401428223

Token 84: ' ball' (ID: 7880)
  Prédit: ' ball'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ball' → logprob: -0.0702073946595192
    2. 'ball' → logprob: -2.695207357406616
    3. ' ' → logprob: -8.820207595825195
    4. '(ball' → logprob: -9.570207595825195
    5. ' ' → logprob: -10.695207595825195
    6. '.ball' → logprob: -11.445207595825195
    7. '```' → logprob: -11.945207595825195
    8. '<|end|>' → logprob: -12.320207595825195
    9. '_ball' → logprob: -12.570207595825195
    10. ' ballon' → logprob: -14.070207595825195

Token 85: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0028953328728675842
    2. ':
' → logprob: -5.877895355224609
    3. '           ' → logprob: -10.12789535522461
    4. '       ' → logprob: -10.50289535522461
    5. '):' → logprob: -10.87789535522461
    6. '):
' → logprob: -13.50289535522461
    7. ' :' → logprob: -14.50289535522461
    8. '   ' → logprob: -14.62789535522461
    9. ')' → logprob: -14.87789535522461
    10. ':

' → logprob: -15.00289535522461

Token 86: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0021615640725940466
    2. 'stack' → logprob: -6.252161502838135
    3. '       ' → logprob: -9.627161979675293
    4. ' stack' → logprob: -9.752161979675293
    5. '               ' → logprob: -9.877161979675293
    6. '(stack' → logprob: -10.752161979675293
    7. '```' → logprob: -11.002161979675293
    8. '	stack' → logprob: -11.627161979675293
    9. '   ' → logprob: -13.252161979675293
    10. '	       ' → logprob: -13.377161979675293

Token 87: ' stack' (ID: 10825)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' (adapté à ' stack') → logprob: -0.002756495028734207
    2. '           ' → logprob: -6.252756595611572
    3. ' stack' → logprob: -7.252756595611572
    4. '       ' → logprob: -9.502756118774414
    5. '   ' → logprob: -10.627756118774414
    6. '               ' → logprob: -11.502756118774414
    7. '	stack' → logprob: -12.002756118774414
    8. '```' → logprob: -13.377756118774414
    9. '(stack' → logprob: -14.002756118774414
    10. ' ' → logprob: -14.502756118774414

Token 88: '_c' (ID: 1303)
  Prédit: '_c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_c' → logprob: -1.5048530030981055e-06
    2. ' _' → logprob: -14.875001907348633
    3. 'c' → logprob: -15.000001907348633
    4. '_' → logprob: -15.625001907348633
    5. ')_' → logprob: -15.750001907348633
    6. ''_' → logprob: -15.750001907348633
    7. '_b' → logprob: -15.875001907348633
    8. '```' → logprob: -16.625001907348633
    9. '}_' → logprob: -17.125001907348633
    10. '_s' → logprob: -17.250001907348633

Token 89: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.00018327576981391758
    2. '.' → logprob: -8.62518310546875
    3. '.app' → logprob: -13.00018310546875
    4. ' .' → logprob: -14.50018310546875
    5. '.setdefault' → logprob: -15.50018310546875
    6. '.ap' → logprob: -15.87518310546875
    7. '.extend' → logprob: -16.12518310546875
    8. 'append' → logprob: -16.37518310546875
    9. '`.' → logprob: -16.75018310546875
    10. '.Append' → logprob: -16.75018310546875

Token 90: '(ball' (ID: 170062)
  Prédit: '(ball'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(ball' → logprob: -0.00043615259346552193
    2. '(' → logprob: -7.750436305999756
    3. '(b' → logprob: -12.125435829162598
    4. '(
' → logprob: -16.375436782836914
    5. '(bank' → logprob: -18.375436782836914
    6. '(book' → logprob: -18.500436782836914
    7. '(

' → logprob: -18.875436782836914
    8. ' (' → logprob: -19.125436782836914
    9. '(B' → logprob: -19.125436782836914
    10. '(bot' → logprob: -19.500436782836914

Token 91: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.16444933414459229
    2. '):' → logprob: -1.9144493341445923
    3. '       ' → logprob: -6.289449214935303
    4. ':' → logprob: -6.414449214935303
    5. '):
' → logprob: -7.414449214935303
    6. ')
' → logprob: -9.664449691772461
    7. 'else' → logprob: -10.789449691772461
    8. ' else' → logprob: -11.789449691772461
    9. '   ' → logprob: -11.914449691772461
    10. ':
' → logprob: -12.664449691772461

Token 92: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.008231687359511852
    2. 'else' → logprob: -5.3832316398620605
    3. ' else' → logprob: -5.6332316398620605
    4. '   ' → logprob: -11.133232116699219
    5. '	else' → logprob: -11.758232116699219
    6. '	' → logprob: -12.758232116699219
    7. '```' → logprob: -13.758232116699219
    8. '<|end|>' → logprob: -14.758232116699219
    9. '_else' → logprob: -15.508232116699219
    10. '           ' → logprob: -15.883232116699219

Token 93: ' else' (ID: 1203)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.20604294538497925
    2. 'else' (adapté à ' else') → logprob: -1.706043004989624
    3. ' else' → logprob: -5.456042766571045
    4. '   ' → logprob: -8.206043243408203
    5. '```' → logprob: -10.206043243408203
    6. '	else' → logprob: -10.331043243408203
    7. 'elif' → logprob: -13.706043243408203
    8. '	' → logprob: -13.831043243408203
    9. '_else' → logprob: -14.331043243408203
    10. '           ' → logprob: -14.581043243408203

Token 94: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.02433064766228199
    2. '           ' → logprob: -4.5243306159973145
    3. ':
' → logprob: -4.5243306159973145
    4. ':return' → logprob: -6.3993306159973145
    5. '       ' → logprob: -7.3993306159973145
    6. '   ' → logprob: -10.274331092834473
    7. ' return' → logprob: -11.399331092834473
    8. '               ' → logprob: -12.274331092834473
    9. '          ' → logprob: -12.274331092834473
    10. 'return' → logprob: -12.524331092834473

Token 95: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.031290169805288315
    2. ' return' → logprob: -4.156290054321289
    3. 'return' → logprob: -4.406290054321289
    4. '       ' → logprob: -5.906290054321289
    5. '   ' → logprob: -9.281290054321289
    6. '               ' → logprob: -9.781290054321289
    7. '```' → logprob: -10.406290054321289
    8. ' 
' → logprob: -11.656290054321289
    9. ' ' → logprob: -12.031290054321289
    10. '            ' → logprob: -12.281290054321289

Token 96: ' #' (ID: 1069)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.7026806473731995
    2. 'return' → logprob: -0.7026806473731995
    3. '       ' → logprob: -5.077680587768555
    4. '           ' → logprob: -5.952680587768555
    5. '   ' → logprob: -7.702680587768555
    6. '	return' → logprob: -9.327680587768555
    7. '
' → logprob: -10.077680587768555
    8. ' 
' → logprob: -10.577680587768555
    9. ':return' → logprob: -11.452680587768555
    10. '```' → logprob: -11.577680587768555

Token 97: ' Cannot' (ID: 68113)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.16042925417423248
    2. 'return' → logprob: -1.9104292392730713
    3. 'Return' → logprob: -9.035429000854492
    4. ' Return' → logprob: -10.160429000854492
    5. '           ' → logprob: -11.285429000854492
    6. '   ' → logprob: -11.660429000854492
    7. ' ' → logprob: -11.785429000854492
    8. '       ' → logprob: -12.035429000854492
    9. '	return' → logprob: -12.660429000854492
    10. ':return' → logprob: -12.910429000854492

Token 98: ' put' (ID: 3006)
  Prédit: ' be'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' be' → logprob: -0.21460801362991333
    2. ' place' → logprob: -1.7146079540252686
    3. 'place' → logprob: -5.089608192443848
    4. ' stack' → logprob: -5.589608192443848
    5. 'stack' → logprob: -6.589608192443848
    6. ' put' → logprob: -7.089608192443848
    7. ' return' → logprob: -8.214608192443848
    8. 'be' → logprob: -8.339608192443848
    9. '_stack' → logprob: -9.464608192443848
    10. 'put' → logprob: -9.589608192443848

Token 99: ' ball' (ID: 7880)
  Prédit: ' the'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' the' → logprob: -0.010171446017920971
    2. 'the' → logprob: -4.635171413421631
    3. 'ball' → logprob: -8.760171890258789
    4. ' any' → logprob: -9.635171890258789
    5. '           ' → logprob: -9.885171890258789
    6. ' ball' → logprob: -9.885171890258789
    7. ' ' → logprob: -10.760171890258789
    8. ' this' → logprob: -10.885171890258789
    9. '   ' → logprob: -11.010171890258789
    10. ' a' → logprob: -11.260171890258789

Token 100: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.024886395782232285
    2. '           ' → logprob: -3.8998863697052
    3. 'in' → logprob: -5.649886608123779
    4. ' anywhere' → logprob: -8.524886131286621
    5. ' into' → logprob: -8.649886131286621
    6. '   ' → logprob: -9.024886131286621
    7. '       ' → logprob: -9.274886131286621
    8. ' ' → logprob: -9.899886131286621
    9. ' return' → logprob: -10.149886131286621
    10. ',' → logprob: -10.649886131286621

Token 101: ' either' (ID: 4784)
  Prédit: ' either'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' either' → logprob: -0.0982428640127182
    2. 'either' → logprob: -2.72324275970459
    3. ' any' → logprob: -3.72324275970459
    4. 'any' → logprob: -6.09824275970459
    5. ' stack' → logprob: -6.84824275970459
    6. 'stack' → logprob: -7.84824275970459
    7. ' neither' → logprob: -10.84824275970459
    8. '   ' → logprob: -11.09824275970459
    9. '```' → logprob: -11.84824275970459
    10. ' ' → logprob: -12.84824275970459

Token 102: ' stack' (ID: 10825)
  Prédit: ' stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.4741256833076477
    2. 'stack' → logprob: -0.9741256833076477
    3. '	stack' → logprob: -10.974125862121582
    4. '   ' → logprob: -11.724125862121582
    5. ' of' → logprob: -12.099125862121582
    6. ' stacks' → logprob: -12.224125862121582
    7. 'return' → logprob: -12.724125862121582
    8. '(stack' → logprob: -13.099125862121582
    9. '_stack' → logprob: -13.224125862121582
    10. '.stack' → logprob: -13.224125862121582

Token 103: ' maintaining' (ID: 26513)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.010915648192167282
    2. '       ' → logprob: -4.635915756225586
    3. ' return' → logprob: -7.135915756225586
    4. '
' → logprob: -8.510915756225586
    5. 'return' → logprob: -9.760915756225586
    6. '   ' → logprob: -10.385915756225586
    7. '               ' → logprob: -10.635915756225586
    8. '            
' → logprob: -11.385915756225586
    9. '        
' → logprob: -11.760915756225586
    10. ',' → logprob: -12.010915756225586

Token 104: ' ascending' (ID: 75564)
  Prédit: ' the'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' the' → logprob: -0.09612642228603363
    2. ' increasing' → logprob: -2.9711263179779053
    3. 'the' → logprob: -4.221126556396484
    4. ' strictly' → logprob: -4.721126556396484
    5. 'strict' → logprob: -5.221126556396484
    6. ' ascending' → logprob: -5.471126556396484
    7. ' order' → logprob: -5.971126556396484
    8. ' strict' → logprob: -6.471126556396484
    9. 'in' → logprob: -6.846126556396484
    10. 'ascending' → logprob: -7.346126556396484

Token 105: ' order' (ID: 2569)
  Prédit: ' order'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' order' → logprob: -0.014169031754136086
    2. 'order' → logprob: -4.264169216156006
    3. '	order' → logprob: -12.764168739318848
    4. '<|end|>' → logprob: -14.639168739318848
    5. ' ' → logprob: -14.764168739318848
    6. '_order' → logprob: -14.889168739318848
    7. '   ' → logprob: -15.264168739318848
    8. ' sequence' → logprob: -15.514168739318848
    9. '(order' → logprob: -15.764168739318848
    10. '
' → logprob: -16.014169692993164

Token 106: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.001873666769824922
    2. '       ' → logprob: -6.37687349319458
    3. ' return' → logprob: -9.376873970031738
    4. 'return' → logprob: -9.501873970031738
    5. '               ' → logprob: -12.001873970031738
    6. '
' → logprob: -13.251873970031738
    7. '          ' → logprob: -13.626873970031738
    8. ',' → logprob: -13.876873970031738
    9. '   ' → logprob: -14.001873970031738
    10. '		' → logprob: -15.376873970031738

Token 107: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0003864630125463009
    2. '       ' → logprob: -8.500386238098145
    3. ' return' → logprob: -9.000386238098145
    4. 'return' → logprob: -10.125386238098145
    5. '               ' → logprob: -11.500386238098145
    6. '            
' → logprob: -12.500386238098145
    7. '```' → logprob: -13.250386238098145
    8. '          ' → logprob: -13.875386238098145
    9. '            ' → logprob: -14.250386238098145
    10. '   ' → logprob: -14.375386238098145

Token 108: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.22782911360263824
    2. 'return' (adapté à ' return') → logprob: -1.727829098701477
    3. '       ' → logprob: -3.7278292179107666
    4. '           ' → logprob: -6.2278289794921875
    5. '   ' → logprob: -9.977828979492188
    6. ' ' → logprob: -13.227828979492188
    7. '	return' → logprob: -13.477828979492188
    8. ' ' → logprob: -14.977828979492188
    9. '               ' → logprob: -14.977828979492188
    10. '{return' → logprob: -15.352828979492188

Token 109: ' "' (ID: 392)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'False' → logprob: -0.10020667314529419
    2. ' False' → logprob: -2.3502066135406494
    3. 'True' → logprob: -19.60020637512207
    4. '(False' → logprob: -19.85020637512207
    5. '_false' → logprob: -21.60020637512207
    6. ' True' → logprob: -21.72520637512207
    7. '=False' → logprob: -22.47520637512207
    8. 'false' → logprob: -22.97520637512207
    9. ' false' → logprob: -23.22520637512207
    10. ' ' → logprob: -23.22520637512207

Token 110: 'NO' (ID: 14695)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'False' → logprob: -0.2675395607948303
    2. 'NO' → logprob: -2.5175395011901855
    3. 'No' → logprob: -2.7675395011901855
    4. '"No' → logprob: -3.0175395011901855
    5. '"' → logprob: -3.2675395011901855
    6. 'Impossible' → logprob: -6.1425395011901855
    7. ' False' → logprob: -6.6425395011901855
    8. 'false' → logprob: -8.642539978027344
    9. '"N' → logprob: -8.892539978027344
    10. 'no' → logprob: -9.517539978027344

Token 111: '"
' (ID: 1092)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.010960446670651436
    2. '"
' → logprob: -4.635960578918457
    3. '   ' → logprob: -6.760960578918457
    4. '\n' → logprob: -10.260960578918457
    5. '"

' → logprob: -13.260960578918457
    6. '       ' → logprob: -13.260960578918457
    7. '"
' → logprob: -13.385960578918457
    8. 'return' → logprob: -13.760960578918457
    9. '"\' → logprob: -13.885960578918457
    10. '
' → logprob: -14.260960578918457

Token 112: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0007501865038648248
    2. ' return' → logprob: -8.375750541687012
    3. '    
' → logprob: -8.375750541687012
    4. 'return' → logprob: -8.625750541687012
    5. '
' → logprob: -9.250750541687012
    6. '  
' → logprob: -12.625750541687012
    7. '```' → logprob: -12.875750541687012
    8. '	return' → logprob: -13.500750541687012
    9. '   
' → logprob: -13.875750541687012
    10. '       ' → logprob: -14.000750541687012

Token 113: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10249403119087219
    2. 'return' (adapté à ' return') → logprob: -2.35249400138855
    3. ' return' → logprob: -6.102494239807129
    4. '    
' → logprob: -10.852494239807129
    5. '
' → logprob: -10.977494239807129
    6. '	return' → logprob: -11.852494239807129
    7. '       ' → logprob: -13.852494239807129
    8. '```' → logprob: -13.852494239807129
    9. '  
' → logprob: -14.602494239807129
    10. ' ' → logprob: -14.727494239807129

Token 114: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.1269514262676239
    2. ' "' → logprob: -2.1269514560699463
    3. ''' → logprob: -10.876951217651367
    4. ' ' → logprob: -12.626951217651367
    5. ' ' → logprob: -14.251951217651367
    6. ' '' → logprob: -15.501951217651367
    7. '[' → logprob: -16.501951217651367
    8. '"I' → logprob: -16.626951217651367
    9. '"No' → logprob: -17.126951217651367
    10. '["' → logprob: -17.376951217651367

Token 115: 'YES' (ID: 31958)
  Prédit: 'YES'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'YES' → logprob: -0.31327757239341736
    2. '"' → logprob: -1.3132776021957397
    3. 'Yes' → logprob: -11.813277244567871
    4. ''' → logprob: -12.688277244567871
    5. ' YES' → logprob: -13.563277244567871
    6. 'NO' → logprob: -13.938277244567871
    7. 'OK' → logprob: -14.313277244567871
    8. '["' → logprob: -14.563277244567871
    9. '""' → logprob: -14.688277244567871
    10. ' "' → logprob: -15.063277244567871

Token 116: '"

' (ID: 2678)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -9.968312951968983e-06
    2. ')"' → logprob: -12.750009536743164
    3. '"
' → logprob: -13.000009536743164
    4. ' "' → logprob: -13.375009536743164
    5. '```' → logprob: -13.500009536743164
    6. '()"' → logprob: -13.750009536743164
    7. '"`' → logprob: -15.250009536743164
    8. '")' → logprob: -16.000009536743164
    9. ''"' → logprob: -16.250009536743164
    10. '"

' → logprob: -16.750009536743164

Token 117: 'n' (ID: 77)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.008367408066987991
    2. '[' → logprob: -5.258367538452148
    3. '
' → logprob: -6.758367538452148
    4. '```' → logprob: -7.008367538452148
    5. 'n' → logprob: -8.133367538452148
    6. '<|end|>' → logprob: -8.508367538452148
    7. 'b' → logprob: -8.883367538452148
    8. '[
' → logprob: -9.383367538452148
    9. '\' → logprob: -9.633367538452148
    10. '\n' → logprob: -9.633367538452148

Token 118: ' =' (ID: 314)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.24060261249542236
    2. ' =' → logprob: -1.6156026124954224
    3. '=' → logprob: -4.615602493286133
    4. '_' → logprob: -5.615602493286133
    5. '  ' → logprob: -7.365602493286133
    6. '<|end|>' → logprob: -8.365602493286133
    7. ')' → logprob: -8.615602493286133
    8. 'u' → logprob: -9.115602493286133
    9. ' )' → logprob: -9.615602493286133
    10. ' _' → logprob: -9.990602493286133

Token 119: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.31327348947525024
    2. 'int' → logprob: -1.3132734298706055
    3. '10' → logprob: -11.813273429870605
    4. '5' → logprob: -13.563273429870605
    5. ' ' → logprob: -13.563273429870605
    6. '[int' → logprob: -13.813273429870605
    7. '=int' → logprob: -15.813273429870605
    8. '(int' → logprob: -15.813273429870605
    9. ' len' → logprob: -16.063274383544922
    10. '20' → logprob: -16.563274383544922

Token 120: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.04863937199115753
    2. '(' → logprob: -3.0486392974853516
    3. 'input' → logprob: -9.923639297485352
    4. '()' → logprob: -13.298639297485352
    5. '(
' → logprob: -14.423639297485352
    6. ' (' → logprob: -15.048639297485352
    7. ' input' → logprob: -15.673639297485352
    8. '=input' → logprob: -15.798639297485352
    9. '('' → logprob: -17.67363929748535
    10. '(int' → logprob: -17.79863929748535

Token 121: '())
' (ID: 4574)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.06237320974469185
    2. '())' → logprob: -2.812373161315918
    3. '(' → logprob: -7.937373161315918
    4. ')' → logprob: -10.687373161315918
    5. '()
' → logprob: -12.187373161315918
    6. '().' → logprob: -12.687373161315918
    7. '()>' → logprob: -12.812373161315918
    8. '();)' → logprob: -13.062373161315918
    9. '()`' → logprob: -13.437373161315918
    10. '("' → logprob: -13.812373161315918

Token 122: 'for' (ID: 1938)
  Prédit: ' balls'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' balls' → logprob: -0.5239121913909912
    2. 'balls' → logprob: -0.8989121913909912
    3. 'b' → logprob: -8.39891242980957
    4. '<|end|>' → logprob: -8.39891242980957
    5. ' 
' → logprob: -9.02391242980957
    6. 'Balls' → logprob: -9.39891242980957
    7. 'ball' → logprob: -9.89891242980957
    8. 'n' → logprob: -11.02391242980957
    9. 's' → logprob: -11.39891242980957
    10. '
' → logprob: -11.89891242980957

Token 123: ' _' (ID: 1175)
  Prédit: ' _'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' _' → logprob: -0.14513854682445526
    2. ' ' → logprob: -2.3951385021209717
    3. ' i' → logprob: -3.2701385021209717
    4. '_' → logprob: -5.145138740539551
    5. ' ‌' → logprob: -9.39513874053955
    6. ' ' → logprob: -11.64513874053955
    7. ' ▁' → logprob: -12.02013874053955
    8. ' n' → logprob: -12.64513874053955
    9. ' ​' → logprob: -13.27013874053955
    10. ' I' → logprob: -13.39513874053955

Token 124: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.12795856595039368
    2. 'in' → logprob: -2.1279585361480713
    3. ' ' → logprob: -7.00295877456665
    4. 'n' → logprob: -9.377958297729492
    5. '<|end|>' → logprob: -10.877958297729492
    6. '  ' → logprob: -12.127958297729492
    7. ' _' → logprob: -13.002958297729492
    8. 'i' → logprob: -13.377958297729492
    9. '_' → logprob: -13.627958297729492
    10. '```' → logprob: -14.127958297729492

Token 125: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.03804975748062134
    2. ' range' → logprob: -3.2880496978759766
    3. 'input' → logprob: -13.163049697875977
    4. 'n' → logprob: -13.288049697875977
    5. '(range' → logprob: -13.663049697875977
    6. ' ' → logprob: -14.038049697875977
    7. '	range' → logprob: -14.038049697875977
    8. 'rang' → logprob: -14.163049697875977
    9. 'ran' → logprob: -14.663049697875977
    10. '_' → logprob: -15.538049697875977

Token 126: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.12103647738695145
    2. '(' → logprob: -2.6210365295410156
    3. ' n' → logprob: -3.8710365295410156
    4. ' (' → logprob: -3.9960365295410156
    5. 'n' → logprob: -6.371036529541016
    6. ' range' → logprob: -9.121036529541016
    7. ' ' → logprob: -9.496036529541016
    8. ' )' → logprob: -9.871036529541016
    9. ')' → logprob: -10.496036529541016
    10. 'range' → logprob: -10.621036529541016

Token 127: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.1630593091249466
    2. '):
' → logprob: -1.9130593538284302
    3. ' ):' → logprob: -6.163059234619141
    4. ' ):
' → logprob: -7.538059234619141
    5. ':' → logprob: -9.53805923461914
    6. '):
' → logprob: -9.91305923461914
    7. ')' → logprob: -10.16305923461914
    8. '):

' → logprob: -11.53805923461914
    9. '():
' → logprob: -12.03805923461914
    10. ':
' → logprob: -12.78805923461914

Token 128: '   ' (ID: 271)
  Prédit: ' balls'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' balls' → logprob: -0.13724447786808014
    2. '   ' → logprob: -2.512244462966919
    3. '    
' → logprob: -4.387244701385498
    4. '    ' → logprob: -4.887244701385498
    5. ' 
' → logprob: -5.137244701385498
    6. '     
' → logprob: -5.137244701385498
    7. ' input' → logprob: -5.512244701385498
    8. 'balls' → logprob: -6.012244701385498
    9. '```' → logprob: -6.512244701385498
    10. ' ,' → logprob: -6.637244701385498

Token 129: ' balls' (ID: 32657)
  Prédit: ' balls'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' balls' → logprob: -0.12798793613910675
    2. ' size' → logprob: -2.877987861633301
    3. ' num' → logprob: -3.502987861633301
    4. ' length' → logprob: -3.752987861633301
    5. ' _' → logprob: -5.127987861633301
    6. 'balls' (adapté à ' balls') → logprob: -7.002987861633301
    7. ' m' → logprob: -7.252987861633301
    8. ' input' → logprob: -7.377987861633301
    9. ' ' → logprob: -7.377987861633301
    10. ' k' → logprob: -8.2529878616333

Token 130: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.016478167846798897
    2. '=' → logprob: -4.141478061676025
    3. '_count' → logprob: -8.141478538513184
    4. ' ' → logprob: -10.266478538513184
    5. '_' → logprob: -10.266478538513184
    6. '_len' → logprob: -10.641478538513184
    7. 's' → logprob: -11.141478538513184
    8. '_list' → logprob: -11.641478538513184
    9. '_size' → logprob: -12.016478538513184
    10. '_length' → logprob: -12.141478538513184

Token 131: ' list' (ID: 1562)
  Prédit: ' list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.1269376575946808
    2. 'list' → logprob: -2.1269376277923584
    3. '	list' → logprob: -12.876937866210938
    4. '[list' → logprob: -12.876937866210938
    5. '[' → logprob: -13.001937866210938
    6. ' [' → logprob: -13.501937866210938
    7. ' ' → logprob: -14.876937866210938
    8. '=list' → logprob: -15.376937866210938
    9. ' ' → logprob: -16.251937866210938
    10. '(list' → logprob: -17.001937866210938

Token 132: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.5214248299598694
    2. '(' → logprob: -1.0214247703552246
    3. '(input' → logprob: -3.1464247703552246
    4. '(int' → logprob: -5.896424770355225
    5. '()' → logprob: -8.146425247192383
    6. '(eval' → logprob: -9.521425247192383
    7. '(range' → logprob: -9.771425247192383
    8. ' (' → logprob: -11.771425247192383
    9. '<|end|>' → logprob: -11.896425247192383
    10. '(split' → logprob: -11.896425247192383

Token 133: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.023908568546175957
    2. '(' → logprob: -3.7739086151123047
    3. '(str' → logprob: -8.273908615112305
    4. '(input' → logprob: -8.398908615112305
    5. '(lambda' → logprob: -9.273908615112305
    6. 'int' → logprob: -10.523908615112305
    7. '<int' → logprob: -10.648908615112305
    8. '[int' → logprob: -11.273908615112305
    9. '<|end|>' → logprob: -11.648908615112305
    10. '(
' → logprob: -11.648908615112305

Token 134: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.08609894663095474
    2. ',input' → logprob: -2.5860989093780518
    3. 'input' → logprob: -5.336099147796631
    4. ',' → logprob: -6.211099147796631
    5. '(' → logprob: -8.211098670959473
    6. ' input' → logprob: -10.211098670959473
    7. '=input' → logprob: -10.336098670959473
    8. '[input' → logprob: -12.086098670959473
    9. ' ,' → logprob: -12.461098670959473
    10. '<input' → logprob: -12.586098670959473

Token 135: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.005235648714005947
    2. ' input' → logprob: -5.25523567199707
    3. ',input' → logprob: -14.13023567199707
    4. '(input' → logprob: -14.25523567199707
    5. '   ' → logprob: -15.75523567199707
    6. '	input' → logprob: -15.88023567199707
    7. '=input' → logprob: -16.75523567199707
    8. '<input' → logprob: -16.88023567199707
    9. ' ' → logprob: -18.13023567199707
    10. '_input' → logprob: -18.25523567199707

Token 136: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -5.9153885558771435e-06
    2. '()' → logprob: -12.125005722045898
    3. ' ().' → logprob: -15.000005722045898
    4. '(' → logprob: -18.0000057220459
    5. '.split' → logprob: -19.1250057220459
    6. '()
' → logprob: -19.2500057220459
    7. 'split' → logprob: -19.7500057220459
    8. '().'' → logprob: -20.7500057220459
    9. '()?.' → logprob: -20.8750057220459
    10. '.' → logprob: -21.2500057220459

Token 137: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.005237429868429899
    2. 'strip' → logprob: -5.255237579345703
    3. 'rstrip' → logprob: -12.755237579345703
    4. ' split' → logprob: -14.130237579345703
    5. '(split' → logprob: -17.005237579345703
    6. 'spl' → logprob: -18.880237579345703
    7. ' strip' → logprob: -18.880237579345703
    8. '.split' → logprob: -20.130237579345703
    9. 'plit' → logprob: -20.755237579345703
    10. 's' → logprob: -20.880237579345703

Token 138: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.010101689025759697
    2. '()' → logprob: -4.760101795196533
    3. '(','' → logprob: -7.635101795196533
    4. '()))
' → logprob: -8.010101318359375
    5. '))' → logprob: -8.635101318359375
    6. '(),' → logprob: -8.885101318359375
    7. '(' → logprob: -9.135101318359375
    8. '())' → logprob: -9.135101318359375
    9. '('' → logprob: -9.385101318359375
    10. '())))' → logprob: -10.760101318359375

Token 139: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00730891153216362
    2. '   ' → logprob: -5.3823089599609375
    3. ' print' → logprob: -6.3823089599609375
    4. '
' → logprob: -7.7573089599609375
    5. 'if' → logprob: -7.8823089599609375
    6. ' ' → logprob: -10.132308959960938
    7. ' if' → logprob: -10.507308959960938
    8. 'result' → logprob: -10.632308959960938
    9. '    
' → logprob: -10.882308959960938
    10. '```' → logprob: -11.382308959960938

Token 140: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0002166491176467389
    2. ' print' → logprob: -8.750216484069824
    3. 'result' → logprob: -10.000216484069824
    4. '   ' → logprob: -11.375216484069824
    5. 'if' → logprob: -13.750216484069824
    6. ' result' → logprob: -16.62521743774414
    7. 'answer' → logprob: -17.37521743774414
    8. 'balls' → logprob: -17.87521743774414
    9. '```' → logprob: -18.37521743774414
    10. 'output' → logprob: -18.50021743774414

Token 141: '(can' (ID: 165148)
  Prédit: '(can'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(can' → logprob: -3.702754474943504e-05
    2. '(' → logprob: -10.25003719329834
    3. 'can' → logprob: -13.50003719329834
    4. '	can' → logprob: -16.500036239624023
    5. '(c' → logprob: -17.375036239624023
    6. ' can' → logprob: -18.000036239624023
    7. '_can' → logprob: -18.500036239624023
    8. '(call' → logprob: -18.500036239624023
    9. '(cap' → logprob: -18.625036239624023
    10. ' (' → logprob: -18.750036239624023

Token 142: '_stack' (ID: 35650)
  Prédit: '_stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_stack' → logprob: -3.128163257315464e-07
    2. '_' → logprob: -15.625
    3. '_st' → logprob: -16.375
    4. 'stack' → logprob: -18.5
    5. '_STACK' → logprob: -19.375
    6. ' _' → logprob: -19.625
    7. '_s' → logprob: -20.375
    8. '_sta' → logprob: -20.375
    9. '_stock' → logprob: -21.0
    10. ')_' → logprob: -21.125

Token 143: '_b' (ID: 1535)
  Prédit: '_b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_b' → logprob: -7.3458322731312364e-06
    2. '_' → logprob: -12.750007629394531
    3. ')_' → logprob: -12.750007629394531
    4. '_ball' → logprob: -14.125007629394531
    5. ' _' → logprob: -15.125007629394531
    6. '```' → logprob: -16.25000762939453
    7. '}_' → logprob: -16.50000762939453
    8. '"_' → logprob: -16.75000762939453
    9. '_a' → logprob: -17.12500762939453
    10. ')' → logprob: -17.12500762939453

Token 144: 'alls' (ID: 6539)
  Prédit: 'alls'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'alls' → logprob: -0.010995353572070599
    2. '_b' → logprob: -5.385995388031006
    3. '_' → logprob: -5.885995388031006
    4. 'all' → logprob: -6.135995388031006
    5. '_all' → logprob: -6.635995388031006
    6. 'a' → logprob: -10.510994911193848
    7. ' alls' → logprob: -11.385994911193848
    8. 'als' → logprob: -11.760994911193848
    9. '_a' → logprob: -11.885994911193848
    10. '```' → logprob: -12.135994911193848

Token 145: '(b' (ID: 3229)
  Prédit: '(b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(b' → logprob: -0.00866869930177927
    2. '(' → logprob: -4.758668899536133
    3. ' (' → logprob: -10.008668899536133
    4. '(ball' → logprob: -12.008668899536133
    5. ')(' → logprob: -13.633668899536133
    6. ')' → logprob: -14.258668899536133
    7. '((' → logprob: -15.133668899536133
    8. '(
' → logprob: -15.258668899536133
    9. '(s' → logprob: -16.383668899536133
    10. '("("' → logprob: -16.508668899536133

Token 146: 'alls' (ID: 6539)
  Prédit: 'alls'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'alls' → logprob: -0.0001549089647596702
    2. ')' → logprob: -9.375154495239258
    3. 'all' → logprob: -10.000154495239258
    4. 'als' → logprob: -11.375154495239258
    5. '[' → logprob: -13.375154495239258
    6. '))' → logprob: -13.500154495239258
    7. ' alls' → logprob: -13.625154495239258
    8. ')
' → logprob: -13.750154495239258
    9. '```' → logprob: -13.750154495239258
    10. 'a' → logprob: -13.875154495239258

Token 147: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.02976333536207676
    2. ')' → logprob: -3.5297632217407227
    3. '))
' → logprob: -11.529763221740723
    4. '())' → logprob: -14.154763221740723
    5. '()))' → logprob: -14.154763221740723
    6. ')))' → logprob: -14.654763221740723
    7. ')
' → logprob: -15.029763221740723
    8. '()' → logprob: -15.029763221740723
    9. ' ))' → logprob: -15.654763221740723
    10. '"))' → logprob: -16.40476417541504


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 145
Tokens correctement prédits (1ère position, stricte): 73
Tokens correctement prédits (1ère position, avec adaptation): 77
Tokens correctement prédits (top 10): 120
Précision stricte (1ère position): 50.34%
Précision adaptée (1ère position): 53.10%
Précision (top 10): 82.76%
================================================================================
