================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:03:54
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
W,H=map(int,input().split())
a=list(map(int,input().split()))
b=list(map(int,input().split()))
print(1 if sum(a)==sum(b) else 0)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'W' (ID: 54)
  → Token d'amorce (pas de prédiction)

Token 1: ',H' (ID: 94400)
  → Token d'amorce (pas de prédiction)

Token 2: '=' (ID: 28)
  → Token d'amorce (pas de prédiction)

Token 3: 'map' (ID: 3726)
  Prédit: '100'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '100' → logprob: -0.5291839838027954
    2. ' ' → logprob: -1.1541839838027954
    3. '192' → logprob: -3.029183864593506
    4. '800' → logprob: -3.904183864593506
    5. '256' → logprob: -5.029183864593506
    6. '0' → logprob: -5.404183864593506
    7. '640' → logprob: -5.404183864593506
    8. '224' → logprob: -6.029183864593506
    9. '240' → logprob: -6.279183864593506
    10. '10' → logprob: -6.654183864593506

Token 4: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0019887094385921955
    2. '(int' → logprob: -7.001988887786865
    3. '(lambda' → logprob: -7.126988887786865
    4. '```' → logprob: -9.501988410949707
    5. '(str' → logprob: -10.376988410949707
    6. '(input' → logprob: -11.001988410949707
    7. '(user' → logprob: -11.251988410949707
    8. '(
' → logprob: -11.626988410949707
    9. '[int' → logprob: -11.626988410949707
    10. '<|end|>' → logprob: -11.626988410949707

Token 5: ',input' (ID: 123014)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.307431697845459
    2. ')' → logprob: -1.807431697845459
    3. '(' → logprob: -2.432431697845459
    4. 'input' → logprob: -5.182431697845459
    5. '`)' → logprob: -6.682431697845459
    6. '```' → logprob: -6.682431697845459
    7. '(int' → logprob: -7.307431697845459
    8. '(raw' → logprob: -7.557431697845459
    9. '<|end|>' → logprob: -7.807431697845459
    10. '())' → logprob: -7.932431697845459

Token 6: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.23125402629375458
    2. '()' → logprob: -1.856253981590271
    3. '(' → logprob: -4.1062541007995605
    4. '().' → logprob: -4.9812541007995605
    5. '('' → logprob: -5.8562541007995605
    6. '()">' → logprob: -5.8562541007995605
    7. '();)' → logprob: -5.9812541007995605
    8. ')' → logprob: -6.1062541007995605
    9. '());' → logprob: -6.2312541007995605
    10. '()))' → logprob: -6.3562541007995605

Token 7: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -1.1994775377388578e-05
    2. ')' → logprob: -12.250012397766113
    3. 'strip' → logprob: -12.625012397766113
    4. ' split' → logprob: -12.625012397766113
    5. '(split' → logprob: -15.500012397766113
    6. 'spl' → logprob: -15.750012397766113
    7. 'rstrip' → logprob: -16.250011444091797
    8. 'read' → logprob: -17.875011444091797
    9. '```' → logprob: -18.125011444091797
    10. 's' → logprob: -18.750011444091797

Token 8: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.05156752094626427
    2. '())' → logprob: -3.176567554473877
    3. '))' → logprob: -4.926567554473877
    4. '()' → logprob: -7.301567554473877
    5. '`)' → logprob: -8.176567077636719
    6. '(' → logprob: -8.801567077636719
    7. '()))' → logprob: -9.176567077636719
    8. ')`' → logprob: -11.551567077636719
    9. ')))' → logprob: -11.676567077636719
    10. '```' → logprob: -12.051567077636719

Token 9: 'a' (ID: 64)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.414974570274353
    2. '#' → logprob: -1.539974570274353
    3. ',' → logprob: -1.789974570274353
    4. 'x' → logprob: -2.0399746894836426
    5. '```' → logprob: -2.7899746894836426
    6. '\n' → logprob: -3.0399746894836426
    7. '`' → logprob: -3.2899746894836426
    8. 'print' → logprob: -4.289974689483643
    9. 'a' → logprob: -4.539974689483643
    10. ';' → logprob: -4.539974689483643

Token 10: '=list' (ID: 93413)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.19954489171504974
    2. 'r' → logprob: -2.449544906616211
    3. '=' → logprob: -4.074544906616211
    4. '[i' → logprob: -4.324544906616211
    5. '[r' → logprob: -4.324544906616211
    6. 'rr' → logprob: -4.449544906616211
    7. ',' → logprob: -4.824544906616211
    8. ' =' → logprob: -4.824544906616211
    9. 'rray' → logprob: -4.949544906616211
    10. ',r' → logprob: -5.949544906616211

Token 11: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.002931583672761917
    2. '(input' → logprob: -6.877931594848633
    3. '(int' → logprob: -7.127931594848633
    4. '(a' → logprob: -7.877931594848633
    5. '(range' → logprob: -8.252931594848633
    6. '((' → logprob: -9.127931594848633
    7. '(
' → logprob: -9.627931594848633
    8. '(map' → logprob: -10.252931594848633
    9. '()' → logprob: -10.377931594848633
    10. '("("' → logprob: -10.627931594848633

Token 12: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.04357751086354256
    2. '(' → logprob: -3.1685774326324463
    3. '<int' → logprob: -8.043577194213867
    4. '[int' → logprob: -9.668577194213867
    5. '(str' → logprob: -10.043577194213867
    6. 'int' → logprob: -10.793577194213867
    7. '(
' → logprob: -11.043577194213867
    8. '=int' → logprob: -11.168577194213867
    9. '(lambda' → logprob: -11.168577194213867
    10. ')(' → logprob: -11.293577194213867

Token 13: ',input' (ID: 123014)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.39731886982917786
    2. ',input' → logprob: -1.1473188400268555
    3. '(' → logprob: -5.1473188400268555
    4. ',' → logprob: -5.5223188400268555
    5. ' (' → logprob: -8.522318840026855
    6. ' ,' → logprob: -8.647318840026855
    7. '=input' → logprob: -9.897318840026855
    8. ',int' → logprob: -10.522318840026855
    9. ')' → logprob: -10.647318840026855
    10. '<input' → logprob: -11.022318840026855

Token 14: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -4.251091377227567e-05
    2. '()' → logprob: -10.625042915344238
    3. '()))' → logprob: -11.625042915344238
    4. '())' → logprob: -12.250042915344238
    5. ' ().' → logprob: -13.125042915344238
    6. '(' → logprob: -14.125042915344238
    7. '(.' → logprob: -14.250042915344238
    8. '()));' → logprob: -15.250042915344238
    9. ')' → logprob: -15.625042915344238
    10. '.' → logprob: -15.875042915344238

Token 15: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -2.1008713702030946e-06
    2. 'strip' → logprob: -13.750001907348633
    3. ' split' → logprob: -14.500001907348633
    4. 'rstrip' → logprob: -15.250001907348633
    5. '(split' → logprob: -15.875001907348633
    6. 'spl' → logprob: -16.750001907348633
    7. 's' → logprob: -18.000001907348633
    8. 'plit' → logprob: -18.875001907348633
    9. 'read' → logprob: -19.625001907348633
    10. ')' → logprob: -20.125001907348633

Token 16: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.07760045677423477
    2. '())' → logprob: -2.9526004791259766
    3. '))' → logprob: -4.327600479125977
    4. '()' → logprob: -5.202600479125977
    5. ')' → logprob: -5.827600479125977
    6. '(' → logprob: -7.327600479125977
    7. '())))' → logprob: -9.702600479125977
    8. '()));' → logprob: -10.452600479125977
    9. '()))
' → logprob: -11.077600479125977
    10. '()),' → logprob: -11.827600479125977

Token 17: 'b' (ID: 65)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.8619468808174133
    2. 's' → logprob: -1.6119468212127686
    3. 'h' → logprob: -2.3619468212127686
    4. 'b' → logprob: -2.3619468212127686
    5. 'dp' → logprob: -3.1119468212127686
    6. 'for' → logprob: -3.3619468212127686
    7. 'd' → logprob: -3.6119468212127686
    8. 'r' → logprob: -4.111947059631348
    9. 'x' → logprob: -4.361947059631348
    10. 'a' → logprob: -4.361947059631348

Token 18: '=list' (ID: 93413)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.005870132707059383
    2. '=list' → logprob: -6.255870342254639
    3. '=[]' → logprob: -6.505870342254639
    4. ' =' → logprob: -6.630870342254639
    5. '.' → logprob: -7.255870342254639
    6. '[' → logprob: -9.25586986541748
    7. '=[' → logprob: -9.25586986541748
    8. '=int' → logprob: -9.88086986541748
    9. '=input' → logprob: -10.25586986541748
    10. '=len' → logprob: -11.38086986541748

Token 19: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.11930082738399506
    2. '(map' → logprob: -2.2443008422851562
    3. '(int' → logprob: -5.869300842285156
    4. '((' → logprob: -6.994300842285156
    5. '<|end|>' → logprob: -7.369300842285156
    6. ' (' → logprob: -7.744300842285156
    7. '(.' → logprob: -8.119300842285156
    8. '(
' → logprob: -8.494300842285156
    9. '(range' → logprob: -8.494300842285156
    10. '(list' → logprob: -8.619300842285156

Token 20: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -4.334533878136426e-05
    2. 'int' → logprob: -10.875042915344238
    3. '(' → logprob: -11.250042915344238
    4. '=int' → logprob: -12.000042915344238
    5. '<int' → logprob: -13.000042915344238
    6. '[int' → logprob: -13.625042915344238
    7. ' (' → logprob: -14.125042915344238
    8. '```' → logprob: -15.375042915344238
    9. '(list' → logprob: -15.875042915344238
    10. ',int' → logprob: -16.000043869018555

Token 21: ',input' (ID: 123014)
  Prédit: '(int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.09369713068008423
    2. ',int' → logprob: -2.5936970710754395
    3. 'int' → logprob: -4.9686970710754395
    4. '=int' → logprob: -5.4686970710754395
    5. '<int' → logprob: -6.3436970710754395
    6. ',' → logprob: -7.3436970710754395
    7. '```' → logprob: -7.7186970710754395
    8. '[int' → logprob: -8.468697547912598
    9. '(input' → logprob: -8.718697547912598
    10. ']int' → logprob: -9.718697547912598

Token 22: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -4.723352049040841e-06
    2. '.' → logprob: -13.125004768371582
    3. ' ().' → logprob: -13.250004768371582
    4. '()' → logprob: -14.375004768371582
    5. '(.' → logprob: -16.125003814697266
    6. '(int' → logprob: -16.500003814697266
    7. '()).' → logprob: -16.875003814697266
    8. '(' → logprob: -17.000003814697266
    9. ').' → logprob: -17.750003814697266
    10. ' .' → logprob: -17.750003814697266

Token 23: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -9.088346359931165e-07
    2. ' split' → logprob: -15.125000953674316
    3. 'spl' → logprob: -15.125000953674316
    4. '(split' → logprob: -16.125
    5. 'int' → logprob: -16.75
    6. 'plit' → logprob: -17.125
    7. ')' → logprob: -17.25
    8. '```' → logprob: -18.0
    9. 's' → logprob: -18.25
    10. 'strip' → logprob: -18.25

Token 24: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.17812514305114746
    2. '())' → logprob: -2.1781251430511475
    3. '))' → logprob: -3.3031251430511475
    4. ')' → logprob: -4.928125381469727
    5. '()' → logprob: -5.178125381469727
    6. '()))
' → logprob: -9.428125381469727
    7. '()));' → logprob: -9.678125381469727
    8. '(' → logprob: -9.803125381469727
    9. '()))

' → logprob: -11.678125381469727
    10. '()),' → logprob: -11.803125381469727

Token 25: 'print' (ID: 1598)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.1596815586090088
    2. 'dp' → logprob: -3.409681558609009
    3. 'x' → logprob: -3.659681558609009
    4. 'd' → logprob: -3.909681558609009
    5. 'a' → logprob: -4.15968132019043
    6. 'h' → logprob: -5.03468132019043
    7. 'r' → logprob: -5.03468132019043
    8. 'i' → logprob: -5.15968132019043
    9. 's' → logprob: -5.15968132019043
    10. 'for' → logprob: -5.28468132019043

Token 26: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0010223285062238574
    2. '(a' → logprob: -7.5010223388671875
    3. '((' → logprob: -8.626022338867188
    4. '(sum' → logprob: -9.251022338867188
    5. '('' → logprob: -9.626022338867188
    6. '()' → logprob: -10.376022338867188
    7. '(len' → logprob: -10.376022338867188
    8. '("("' → logprob: -10.626022338867188
    9. '(max' → logprob: -11.126022338867188
    10. '(*' → logprob: -12.376022338867188

Token 27: '1' (ID: 16)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.3934600055217743
    2. 'max' → logprob: -1.6434600353240967
    3. 'min' → logprob: -2.6434600353240967
    4. 'W' → logprob: -3.8934600353240967
    5. 'sum' → logprob: -4.768459796905518
    6. ''a' → logprob: -4.768459796905518
    7. 'abs' → logprob: -5.018459796905518
    8. ''' → logprob: -5.893459796905518
    9. '"' → logprob: -6.018459796905518
    10. 'len' → logprob: -6.393459796905518

Token 28: ' if' (ID: 538)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.17192047834396362
    2. '+' → logprob: -2.0469205379486084
    3. ' )' → logprob: -4.671920299530029
    4. '*' → logprob: -5.046920299530029
    5. ',' → logprob: -5.296920299530029
    6. ' +' → logprob: -6.421920299530029
    7. '0' → logprob: -6.546920299530029
    8. '+)' → logprob: -6.796920299530029
    9. '-' → logprob: -6.921920299530029
    10. '/' → logprob: -7.546920299530029

Token 29: ' sum' (ID: 4215)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.6003497242927551
    2. ' W' → logprob: -1.6003496646881104
    3. 'a' → logprob: -2.1003496646881104
    4. ' all' → logprob: -3.6003496646881104
    5. ' H' → logprob: -3.8503496646881104
    6. ' sum' → logprob: -3.9753496646881104
    7. 'W' → logprob: -4.2253499031066895
    8. ' b' → logprob: -4.6003499031066895
    9. ' (' → logprob: -4.8503499031066895
    10. ' ' → logprob: -5.3503499031066895

Token 30: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.011599794961512089
    2. '(' → logprob: -4.761600017547607
    3. '(b' → logprob: -5.886600017547607
    4. '((' → logprob: -9.63659954071045
    5. 'a' → logprob: -9.88659954071045
    6. '([' → logprob: -10.63659954071045
    7. '(s' → logprob: -10.88659954071045
    8. '(w' → logprob: -11.51159954071045
    9. '(abs' → logprob: -11.76159954071045
    10. '(x' → logprob: -12.01159954071045

Token 31: ')==' (ID: 35269)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '>' → logprob: -0.8992843627929688
    2. ')' → logprob: -1.1492843627929688
    3. '==' → logprob: -2.5242843627929688
    4. ' >' → logprob: -3.0242843627929688
    5. '+' → logprob: -3.3992843627929688
    6. ')>' → logprob: -3.7742843627929688
    7. '<' → logprob: -4.024284362792969
    8. '>=' → logprob: -4.149284362792969
    9. '*' → logprob: -4.274284362792969
    10. '<=' → logprob: -5.149284362792969

Token 32: 'sum' (ID: 12298)
  Prédit: 'sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sum' → logprob: -0.16438502073287964
    2. ' sum' → logprob: -1.9143850803375244
    3. 'W' → logprob: -5.914384841918945
    4. ' W' → logprob: -7.164384841918945
    5. 'H' → logprob: -8.164384841918945
    6. '0' → logprob: -8.789384841918945
    7. ' ' → logprob: -9.414384841918945
    8. ' H' → logprob: -10.039384841918945
    9. '=sum' → logprob: -10.914384841918945
    10. '(sum' → logprob: -11.164384841918945

Token 33: '(b' (ID: 3229)
  Prédit: '(b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(b' → logprob: -0.22647687792778015
    2. '(' → logprob: -1.6014769077301025
    3. '(a' → logprob: -7.101476669311523
    4. ' (' → logprob: -9.351476669311523
    5. '((' → logprob: -9.851476669311523
    6. '(s' → logprob: -10.351476669311523
    7. '(h' → logprob: -11.351476669311523
    8. '('' → logprob: -12.476476669311523
    9. '(l' → logprob: -12.476476669311523
    10. '(B' → logprob: -12.476476669311523

Token 34: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.873571692267433e-05
    2. ' else' → logprob: -10.375068664550781
    3. 'else' → logprob: -10.625068664550781
    4. ' )' → logprob: -11.625068664550781
    5. '))' → logprob: -13.625068664550781
    6. ' ' → logprob: -14.250068664550781
    7. 'and' → logprob: -14.875068664550781
    8. ' and' → logprob: -14.875068664550781
    9. ')==' → logprob: -15.125068664550781
    10. '```' → logprob: -15.375068664550781

Token 35: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.006802763789892197
    2. 'else' → logprob: -5.006802558898926
    3. ' and' → logprob: -10.131802558898926
    4. ')' → logprob: -10.631802558898926
    5. 'and' → logprob: -10.881802558898926
    6. ' ' → logprob: -12.881802558898926
    7. '```' → logprob: -14.006802558898926
    8. '0' → logprob: -15.256802558898926
    9. '>' → logprob: -15.381802558898926
    10. '==' → logprob: -15.631802558898926

Token 36: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.003046523779630661
    2. ' ' → logprob: -5.87804651260376
    3. '-' → logprob: -8.378046989440918
    4. '1' → logprob: -12.628046989440918
    5. ' -' → logprob: -12.878046989440918
    6. '(' → logprob: -13.503046989440918
    7. ')' → logprob: -13.628046989440918
    8. '2' → logprob: -13.878046989440918
    9. '```' → logprob: -14.253046989440918
    10. 'print' → logprob: -14.503046989440918

Token 37: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00013488641707226634
    2. ' ' → logprob: -9.000134468078613
    3. '-' → logprob: -11.625134468078613
    4. '1' → logprob: -13.750134468078613
    5. ')' → logprob: -14.625134468078613
    6. '2' → logprob: -15.250134468078613
    7. 'print' → logprob: -15.500134468078613
    8. '(' → logprob: -15.625134468078613
    9. '`' → logprob: -16.25013542175293
    10. '```' → logprob: -16.81263542175293

Token 38: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.988221684878226e-06
    2. '`)' → logprob: -12.250006675720215
    3. ')
' → logprob: -14.250006675720215
    4. '))' → logprob: -14.500006675720215
    5. '')' → logprob: -14.875006675720215
    6. ' )' → logprob: -15.250006675720215
    7. ')`' → logprob: -15.625006675720215
    8. '```' → logprob: -16.25000762939453
    9. '")' → logprob: -16.37500762939453
    10. '#' → logprob: -16.75000762939453


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 36
Tokens correctement prédits (1ère position, stricte): 15
Tokens correctement prédits (1ère position, avec adaptation): 15
Tokens correctement prédits (top 10): 27
Précision stricte (1ère position): 41.67%
Précision adaptée (1ère position): 41.67%
Précision (top 10): 75.00%
================================================================================
