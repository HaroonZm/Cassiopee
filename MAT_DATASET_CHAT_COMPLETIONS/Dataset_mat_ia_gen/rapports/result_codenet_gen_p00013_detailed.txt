================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:16:47
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
# Solution pour le problème "Switching Railroad Cars"
# 
# Le problème consiste à simuler l'entrée et la sortie des wagons sur une voie ferroviaire.
# Chaque nombre entier représente l'entrée d'un wagon (son numéro) ou la sortie d'un wagon (0).
# 
# On modélise les wagons sur la voie comme une pile (stack) car l'ordre de sortie suit le principe LIFO :
# le dernier wagon entré est le premier à sortir.
# 
# Approche :
# - On initialise une pile vide.
# - Pour chaque entrée :
#   - Si le nombre est différent de 0, on empile (on ajoute) ce wagon.
#   - Si le nombre est 0, on dépile (on enlève et récupère) un wagon et on l'affiche.
# 
# Cette approche respecte la contrainte donnée : un 0 n'est jamais donné si la voie est vide.
# 
# Le programme s'arrête naturellement à la fin des entrées (moins de 100 lignes).

def main():
    import sys

    stack = []
    # Lire les lignes une par une
    for line in sys.stdin:
        line = line.strip()
        if not line:
            # Ligne vide possible, on ignore
            continue
        num = int(line)
        if num == 0:
            # Sortie : dépile et imprime le wagon sorti
            car = stack.pop()
            print(car)
        else:
            # Entrée : empile le wagon
            stack.append(num)

if __name__ == "__main__":
    main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: '#' (ID: 2)
  → Token d'amorce (pas de prédiction)

Token 1: ' Solution' (ID: 20858)
  → Token d'amorce (pas de prédiction)

Token 2: ' pour' (ID: 1930)
  → Token d'amorce (pas de prédiction)

Token 3: ' le' (ID: 505)
  Prédit: ' résoudre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' résoudre' → logprob: -0.9421066641807556
    2. ' le' → logprob: -1.1921067237854004
    3. 'l' → logprob: -2.5671067237854004
    4. ' ' → logprob: -3.1921067237854004
    5. ' les' → logprob: -3.3171067237854004
    6. ' Python' → logprob: -3.5671067237854004
    7. ' la' → logprob: -3.9421067237854004
    8. '#' → logprob: -4.0671067237854
    9. ' l' → logprob: -4.0671067237854
    10. 'le' → logprob: -4.3171067237854

Token 4: ' problème' (ID: 35630)
  Prédit: 'pro'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pro' → logprob: -0.1330386847257614
    2. ' problème' → logprob: -3.2580387592315674
    3. ' prochain' → logprob: -3.7580387592315674
    4. ' code' → logprob: -4.633038520812988
    5. 'jour' → logprob: -5.008038520812988
    6. ' #' → logprob: -5.008038520812988
    7. 'code' → logprob: -5.133038520812988
    8. '#' → logprob: -5.258038520812988
    9. 'proble' → logprob: -5.258038520812988
    10. ' ' → logprob: -5.633038520812988

Token 5: ' "' (ID: 392)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.12689891457557678
    2. ' :' → logprob: -2.251899003982544
    3. '```' → logprob: -4.626898765563965
    4. 's' → logprob: -7.251898765563965
    5. ' ' → logprob: -7.626898765563965
    6. '#' → logprob: -7.751898765563965
    7. 'def' → logprob: -7.751898765563965
    8. '.' → logprob: -8.251898765563965
    9. '`' → logprob: -8.376898765563965
    10. '_' → logprob: -8.501898765563965

Token 6: 'Switch' (ID: 20078)
  Prédit: 'Two'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Two' → logprob: -1.3708405494689941
    2. ' Two' → logprob: -1.9958405494689941
    3. '2' → logprob: -2.870840549468994
    4. ' "' → logprob: -3.120840549468994
    5. ' de' → logprob: -3.245840549468994
    6. 'max' → logprob: -3.370840549468994
    7. 'de' → logprob: -3.370840549468994
    8. 'def' → logprob: -3.495840549468994
    9. ' du' → logprob: -3.495840549468994
    10. 'two' → logprob: -3.620840549468994

Token 7: 'ing' (ID: 289)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -1.2119131088256836
    2. 'Case' → logprob: -1.5869131088256836
    3. ':' → logprob: -2.0869131088256836
    4. ' :' → logprob: -2.3369131088256836
    5. '":' → logprob: -2.7119131088256836
    6. 'es' → logprob: -2.7119131088256836
    7. '```' → logprob: -3.0869131088256836
    8. 's' → logprob: -3.8369131088256836
    9. 'case' → logprob: -4.086913108825684
    10. ' Case' → logprob: -4.461913108825684

Token 8: ' Railroad' (ID: 118399)
  Prédit: ' case'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' case' → logprob: -1.5879164934158325
    2. ' Case' → logprob: -2.087916374206543
    3. 's' → logprob: -2.212916374206543
    4. 'Case' → logprob: -2.587916374206543
    5. '"' → logprob: -3.087916374206543
    6. ':' → logprob: -3.212916374206543
    7. ' ' → logprob: -3.337916374206543
    8. '_case' → logprob: -3.462916374206543
    9. ' s' → logprob: -3.587916374206543
    10. ' the' → logprob: -3.712916374206543

Token 9: ' Cars' (ID: 41728)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.7443153858184814
    2. 's' → logprob: -0.7443153858184814
    3. ':' → logprob: -3.6193153858184814
    4. '":' → logprob: -4.619315147399902
    5. '```' → logprob: -5.494315147399902
    6. '"""' → logprob: -6.494315147399902
    7. ':"' → logprob: -6.744315147399902
    8. '`' → logprob: -6.994315147399902
    9. '#' → logprob: -7.244315147399902
    10. ' :' → logprob: -7.494315147399902

Token 10: '"
' (ID: 1092)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.9131425619125366
    2. '"' → logprob: -1.0381425619125366
    3. ':' → logprob: -1.6631425619125366
    4. ' :' → logprob: -3.538142681121826
    5. '```' → logprob: -4.663142681121826
    6. '#' → logprob: -5.413142681121826
    7. '"""' → logprob: -6.038142681121826
    8. '\n' → logprob: -6.038142681121826
    9. '":' → logprob: -6.163142681121826
    10. 'def' → logprob: -6.538142681121826

Token 11: '#' (ID: 2)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.5519787669181824
    2. ':' → logprob: -0.9269787669181824
    3. 's' → logprob: -4.676978588104248
    4. ' :' → logprob: -5.301978588104248
    5. '```' → logprob: -5.426978588104248
    6. '#' → logprob: -5.801978588104248
    7. 'n' → logprob: -6.426978588104248
    8. ' def' → logprob: -6.426978588104248
    9. '.' → logprob: -7.176978588104248
    10. '\' → logprob: -7.426978588104248

Token 12: ' 
' (ID: 793)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.025041623041033745
    2. 'def' → logprob: -4.775041580200195
    3. ' #' → logprob: -5.150041580200195
    4. ' def' → logprob: -5.525041580200195
    5. ' ```' → logprob: -6.275041580200195
    6. ' ​' → logprob: -7.150041580200195
    7. ' 

' → logprob: -7.525041580200195
    8. ' 
' → logprob: -7.775041580200195
    9. '#' → logprob: -7.900041580200195
    10. 'import' → logprob: -8.150041580200195

Token 13: '#' (ID: 2)
  Prédit: '#'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.8266036510467529
    2. 'def' → logprob: -1.326603651046753
    3. ' ' → logprob: -2.201603651046753
    4. ' #' → logprob: -2.326603651046753
    5. ' def' → logprob: -3.076603651046753
    6. 'from' → logprob: -4.451603889465332
    7. 'import' → logprob: -4.951603889465332
    8. '\' → logprob: -5.076603889465332
    9. 'class' → logprob: -5.701603889465332
    10. '```' → logprob: -6.201603889465332

Token 14: ' Le' (ID: 2018)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.10692445933818817
    2. ' ' → logprob: -3.231924533843994
    3. ' def' → logprob: -3.231924533843994
    4. '#' → logprob: -4.856924533843994
    5. 'from' → logprob: -5.606924533843994
    6. 'd' → logprob: -5.731924533843994
    7. 'de' → logprob: -6.481924533843994
    8. 'import' → logprob: -6.481924533843994
    9. ' de' → logprob: -6.731924533843994
    10. ' #' → logprob: -7.106924533843994

Token 15: ' problème' (ID: 35630)
  Prédit: ' code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' code' → logprob: -0.5608257055282593
    2. ' problème' → logprob: -1.6858257055282593
    3. 'code' → logprob: -2.935825824737549
    4. '#' → logprob: -3.060825824737549
    5. 'pro' → logprob: -3.060825824737549
    6. 'def' → logprob: -3.435825824737549
    7. 's' → logprob: -3.935825824737549
    8. 'd' → logprob: -5.185825824737549
    9. ' ' → logprob: -5.560825824737549
    10. ' solution' → logprob: -5.810825824737549

Token 16: ' consiste' (ID: 46504)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.11525797843933105
    2. 's' → logprob: -3.490257978439331
    3. ':' → logprob: -3.615257978439331
    4. ' :' → logprob: -3.990257978439331
    5. '#' → logprob: -4.86525821685791
    6. ' ' → logprob: -4.99025821685791
    7. ' de' → logprob: -5.61525821685791
    8. ',' → logprob: -6.11525821685791
    9. ' est' → logprob: -6.11525821685791
    10. ' ,' → logprob: -6.36525821685791

Token 17: ' à' (ID: 1221)
  Prédit: ' à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.08232089132070541
    2. ' ' → logprob: -2.5823209285736084
    3. 'à' → logprob: -6.207320690155029
    4. ' ' → logprob: -7.332320690155029
    5. ' a' → logprob: -7.832320690155029
    6. '  ' → logprob: -8.457321166992188
    7. ' essentiellement' → logprob: -10.332321166992188
    8. '	' → logprob: -11.582321166992188
    9. '_' → logprob: -11.832321166992188
    10. '#' → logprob: -11.832321166992188

Token 18: ' sim' (ID: 1845)
  Prédit: 'ré'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ré' → logprob: -0.3577285408973694
    2. ' ré' → logprob: -2.2327284812927246
    3. 'tr' → logprob: -2.6077284812927246
    4. 're' → logprob: -3.6077284812927246
    5. ' gérer' → logprob: -4.232728481292725
    6. ' rearr' → logprob: -4.482728481292725
    7. ' déterminer' → logprob: -4.857728481292725
    8. ' réaliser' → logprob: -4.982728481292725
    9. ' trouver' → logprob: -5.107728481292725
    10. ' résoudre' → logprob: -5.357728481292725

Token 19: 'uler' (ID: 11802)
  Prédit: 'uler'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'uler' → logprob: -0.19315451383590698
    2. 'pl' → logprob: -2.3181545734405518
    3. 'ple' → logprob: -3.4431545734405518
    4. 'pler' → logprob: -4.193154335021973
    5. 'ul' → logprob: -4.818154335021973
    6. 'plement' → logprob: -5.818154335021973
    7. 'plier' → logprob: -5.818154335021973
    8. '-' → logprob: -5.943154335021973
    9. 'p' → logprob: -6.193154335021973
    10. '#' → logprob: -6.443154335021973

Token 20: ' l' (ID: 305)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1925528347492218
    2. ' l' → logprob: -2.3175528049468994
    3. ' la' → logprob: -3.8175528049468994
    4. ' le' → logprob: -3.9425528049468994
    5. ' ' → logprob: -3.9425528049468994
    6. '  ' → logprob: -4.8175530433654785
    7. ' un' → logprob: -5.6925530433654785
    8. 'l' → logprob: -6.6925530433654785
    9. ' une' → logprob: -7.6925530433654785
    10. ' a' → logprob: -7.9425530433654785

Token 21: ''entrée' (ID: 115820)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.1117282435297966
    2. 'e' → logprob: -2.7367281913757324
    3. ''' → logprob: -3.3617281913757324
    4. ' a' → logprob: -6.236728191375732
    5. ' e' → logprob: -6.486728191375732
    6. ''espace' → logprob: -7.611728191375732
    7. ''a' → logprob: -7.861728191375732
    8. ' ' → logprob: -8.36172866821289
    9. ' '' → logprob: -8.48672866821289
    10. ' ' → logprob: -8.73672866821289

Token 22: ' et' (ID: 859)
  Prédit: ' d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.5624823570251465
    2. ' et' → logprob: -1.5624823570251465
    3. ' des' → logprob: -2.4374823570251465
    4. ' de' → logprob: -2.5624823570251465
    5. ',' → logprob: -3.9374823570251465
    6. 's' → logprob: -4.5624823570251465
    7. ' ' → logprob: -4.6874823570251465
    8. ' du' → logprob: -5.1874823570251465
    9. ' ,' → logprob: -6.3124823570251465
    10. '#' → logprob: -6.4374823570251465

Token 23: ' la' (ID: 557)
  Prédit: ' la'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.09570131450891495
    2. 'la' → logprob: -2.845701217651367
    3. ' sortie' → logprob: -3.720701217651367
    4. 'sort' → logprob: -4.970701217651367
    5. '#' → logprob: -7.470701217651367
    6. '_sort' → logprob: -8.845701217651367
    7. 'l' → logprob: -8.845701217651367
    8. ' ' → logprob: -8.970701217651367
    9. ' sorties' → logprob: -9.158201217651367
    10. '```' → logprob: -9.158201217651367

Token 24: ' sortie' (ID: 52761)
  Prédit: ' sortie'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sortie' → logprob: -0.03455760329961777
    2. 'sort' → logprob: -3.409557580947876
    3. ' sort' → logprob: -8.159557342529297
    4. 's' → logprob: -9.409557342529297
    5. ' ' → logprob: -9.409557342529297
    6. ' sorties' → logprob: -9.659557342529297
    7. ' sorti' → logprob: -9.909557342529297
    8. ' sortir' → logprob: -10.034557342529297
    9. '_sort' → logprob: -10.034557342529297
    10. ' sorting' → logprob: -10.159557342529297

Token 25: ' des' (ID: 731)
  Prédit: ' d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.14244194328784943
    2. ' des' → logprob: -2.392441987991333
    3. ' ' → logprob: -3.517441987991333
    4. ' de' → logprob: -5.017441749572754
    5. 's' → logprob: -5.517441749572754
    6. 'd' → logprob: -8.142441749572754
    7. ' #' → logprob: -8.642441749572754
    8. '#' → logprob: -8.767441749572754
    9. ',' → logprob: -9.767441749572754
    10. ' s' → logprob: -9.767441749572754

Token 26: ' wag' (ID: 48065)
  Prédit: ' wag'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' wag' → logprob: -0.2644653916358948
    2. ' voitures' → logprob: -2.26446533203125
    3. ' ' → logprob: -3.38946533203125
    4. ' w' → logprob: -3.51446533203125
    5. '	' → logprob: -4.38946533203125
    6. ' wagon' → logprob: -4.76446533203125
    7. ' vag' → logprob: -4.88946533203125
    8. ' v' → logprob: -5.26446533203125
    9. ' ' → logprob: -5.38946533203125
    10. ' véhicules' → logprob: -5.51446533203125

Token 27: 'ons' (ID: 1808)
  Prédit: 'ons'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ons' → logprob: -0.014055971056222916
    2. 's' → logprob: -4.639056205749512
    3. '#' → logprob: -6.139056205749512
    4. 'a' → logprob: -6.764056205749512
    5. '```' → logprob: -9.014056205749512
    6. 'on' → logprob: -9.264056205749512
    7. 'i' → logprob: -9.389056205749512
    8. 'o' → logprob: -9.514056205749512
    9. '\' → logprob: -9.639056205749512
    10. 'e' → logprob: -9.639056205749512

Token 28: ' sur' (ID: 1512)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.18583862483501434
    2. 's' → logprob: -2.1858386993408203
    3. '.' → logprob: -4.06083869934082
    4. ',' → logprob: -4.68583869934082
    5. ' :' → logprob: -4.81083869934082
    6. ':' → logprob: -4.93583869934082
    7. '_' → logprob: -5.81083869934082
    8. ' ,' → logprob: -5.93583869934082
    9. '#' → logprob: -6.18583869934082
    10. ' #' → logprob: -6.93583869934082

Token 29: ' une' (ID: 2463)
  Prédit: ' une'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' une' → logprob: -0.5861700773239136
    2. ' ' → logprob: -1.2111700773239136
    3. ' un' → logprob: -2.461170196533203
    4. ' la' → logprob: -3.836170196533203
    5. ' ' → logprob: -4.211170196533203
    6. ' les' → logprob: -4.836170196533203
    7. ' l' → logprob: -5.461170196533203
    8. ' des' → logprob: -6.211170196533203
    9. 'un' → logprob: -6.461170196533203
    10. '  ' → logprob: -6.711170196533203

Token 30: ' voie' (ID: 73615)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7745941877365112
    2. ' voie' → logprob: -0.7745941877365112
    3. ' ' → logprob: -3.149594306945801
    4. 'voie' → logprob: -3.899594306945801
    5. ' voies' → logprob: -5.774594306945801
    6. '  ' → logprob: -6.274594306945801
    7. ' ligne' → logprob: -6.399594306945801
    8. '   ' → logprob: -6.774594306945801
    9. '  ' → logprob: -6.837094306945801
    10. '_' → logprob: -7.212094306945801

Token 31: ' ferro' (ID: 61775)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.7218559384346008
    2. ' ' → logprob: -1.221855878829956
    3. ' ' → logprob: -2.471855878829956
    4. ' d' → logprob: -2.846855878829956
    5. ' secondaire' → logprob: -3.846855878829956
    6. '.' → logprob: -4.846856117248535
    7. 'de' → logprob: -4.971856117248535
    8. '_' → logprob: -5.346856117248535
    9. ',' → logprob: -5.659356117248535
    10. ' interm' → logprob: -5.721856117248535

Token 32: 'via' (ID: 19962)
  Prédit: 'via'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'via' → logprob: -0.764866292476654
    2. 'ra' → logprob: -1.8898663520812988
    3. 'r' → logprob: -2.014866352081299
    4. 'naire' → logprob: -3.264866352081299
    5. 'rail' → logprob: -3.389866352081299
    6. 'taire' → logprob: -3.639866352081299
    7. 'ro' → logprob: -4.014866352081299
    8. 'rie' → logprob: -4.264866352081299
    9. 'iaire' → logprob: -4.639866352081299
    10. '#' → logprob: -4.764866352081299

Token 33: 'ire' (ID: 594)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.39801761507987976
    2. 'ire' → logprob: -1.3980176448822021
    3. ' i' → logprob: -3.898017644882202
    4. '   ' → logprob: -4.023017406463623
    5. 'ia' → logprob: -5.148017406463623
    6. '#' → logprob: -5.398017406463623
    7. 'iare' → logprob: -5.398017406463623
    8. ' ' → logprob: -5.648017406463623
    9. 'iaire' → logprob: -5.648017406463623
    10. ' ire' → logprob: -5.773017406463623

Token 34: '.
' (ID: 558)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.2511284351348877
    2. '.' → logprob: -1.3761284351348877
    3. '#' → logprob: -1.8761284351348877
    4. '_' → logprob: -2.0011284351348877
    5. ',' → logprob: -3.0011284351348877
    6. ':' → logprob: -3.6261284351348877
    7. 's' → logprob: -3.6261284351348877
    8. '\' → logprob: -4.376128196716309
    9. ' :' → logprob: -4.376128196716309
    10. ' #' → logprob: -4.501128196716309

Token 35: '#' (ID: 2)
  Prédit: ' 
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' 
' → logprob: -1.4479976892471313
    2. '
' → logprob: -1.5729976892471313
    3. 'def' → logprob: -1.6979976892471313
    4. ' ' → logprob: -2.322997570037842
    5. 'd' → logprob: -2.447997570037842
    6. '#' → logprob: -2.697997570037842
    7. ' 

' → logprob: -2.822997570037842
    8. '\' → logprob: -4.197997570037842
    9. 'n' → logprob: -4.697997570037842
    10. '```' → logprob: -4.697997570037842

Token 36: ' Chaque' (ID: 94758)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -1.1336840391159058
    2. 'd' → logprob: -1.5086840391159058
    3. ' ' → logprob: -1.8836840391159058
    4. '#' → logprob: -2.3836841583251953
    5. '\' → logprob: -2.7586841583251953
    6. ' 

' → logprob: -3.1336841583251953
    7. ' 
' → logprob: -3.6336841583251953
    8. 'n' → logprob: -3.8836841583251953
    9. 'import' → logprob: -4.258684158325195
    10. ' def' → logprob: -5.008684158325195

Token 37: ' nombre' (ID: 9733)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.52169269323349
    2. ' wagon' → logprob: -1.2716927528381348
    3. 'wagon' → logprob: -2.7716927528381348
    4. '_' → logprob: -3.1466927528381348
    5. '  ' → logprob: -5.396692752838135
    6. ' wag' → logprob: -6.021692752838135
    7. 's' → logprob: -6.396692752838135
    8. ' train' → logprob: -6.521692752838135
    9. 'w' → logprob: -6.646692752838135
    10. ' ' → logprob: -6.896692752838135

Token 38: ' entier' (ID: 80473)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.01579585112631321
    2. ' représente' → logprob: -5.640795707702637
    3. ' de' → logprob: -6.140795707702637
    4. ' des' → logprob: -6.390795707702637
    5. 's' → logprob: -6.640795707702637
    6. ' ' → logprob: -6.890795707702637
    7. ' suivant' → logprob: -7.140795707702637
    8. '  ' → logprob: -7.140795707702637
    9. ' d' → logprob: -7.515795707702637
    10. '<|end|>' → logprob: -8.015795707702637

Token 39: ' représente' (ID: 88912)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.029910504817962646
    2. ' représente' → logprob: -3.7799105644226074
    3. ' correspond' → logprob: -6.154910564422607
    4. 'represent' → logprob: -7.279910564422607
    5. ' représentant' → logprob: -7.529910564422607
    6. ' indique' → logprob: -8.15491008758545
    7. ' represent' → logprob: -8.27991008758545
    8. '  ' → logprob: -8.27991008758545
    9. ' représ' → logprob: -8.52991008758545
    10. ' ,' → logprob: -8.90491008758545

Token 40: ' l' (ID: 305)
  Prédit: ' un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.005737867206335068
    2. 'un' → logprob: -5.880737781524658
    3. ' ' → logprob: -6.255737781524658
    4. ' une' → logprob: -7.755737781524658
    5. ' le' → logprob: -8.380738258361816
    6. ' a' → logprob: -9.380738258361816
    7. ' ' → logprob: -9.505738258361816
    8. ' l' → logprob: -10.130738258361816
    9. ' la' → logprob: -10.255738258361816
    10. 'une' → logprob: -10.880738258361816

Token 41: ''entrée' (ID: 115820)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.2984578013420105
    2. 'a' → logprob: -1.7984578609466553
    3. ''' → logprob: -3.1734578609466553
    4. ' e' → logprob: -3.7984578609466553
    5. ' ' → logprob: -4.173457622528076
    6. ' a' → logprob: -6.298457622528076
    7. 'es' → logprob: -6.548457622528076
    8. ' ' → logprob: -6.548457622528076
    9. '#' → logprob: -6.673457622528076
    10. 'u' → logprob: -7.048457622528076

Token 42: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.007300990633666515
    2. ' des' → logprob: -5.882300853729248
    3. ' ' → logprob: -6.382300853729248
    4. 'd' → logprob: -6.632300853729248
    5. ' du' → logprob: -7.257300853729248
    6. ' suivante' → logprob: -7.757300853729248
    7. ' de' → logprob: -8.507301330566406
    8. 's' → logprob: -10.632301330566406
    9. '<|end|>' → logprob: -10.882301330566406
    10. ',' → logprob: -11.132301330566406

Token 43: ''un' (ID: 9788)
  Prédit: ' un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.11299683153629303
    2. ' d' → logprob: -3.362996816635132
    3. ''un' → logprob: -3.362996816635132
    4. ' ' → logprob: -3.612996816635132
    5. ''' → logprob: -5.237997055053711
    6. 'un' → logprob: -6.487997055053711
    7. ' a' → logprob: -6.862997055053711
    8. ' u' → logprob: -7.237997055053711
    9. ' des' → logprob: -7.737997055053711
    10. 'u' → logprob: -7.987997055053711

Token 44: ' wagon' (ID: 90907)
  Prédit: ' wagon'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' wagon' → logprob: -0.18798930943012238
    2. 'wagon' → logprob: -2.0629892349243164
    3. ' nouveau' → logprob: -3.9379892349243164
    4. ' ' → logprob: -5.062989234924316
    5. ' nouvel' → logprob: -5.187989234924316
    6. ' wag' → logprob: -5.687989234924316
    7. 'wag' → logprob: -6.312989234924316
    8. ' ' → logprob: -6.312989234924316
    9. ' train' → logprob: -7.062989234924316
    10. ' espace' → logprob: -7.312989234924316

Token 45: ' (' (ID: 350)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2462567538022995
    2. ',' → logprob: -2.4962568283081055
    3. ':' → logprob: -2.9962568283081055
    4. '.' → logprob: -3.9962568283081055
    5. 's' → logprob: -3.9962568283081055
    6. '_' → logprob: -4.4962568283081055
    7. ' :' → logprob: -4.9962568283081055
    8. '#' → logprob: -5.2462568283081055
    9. ')' → logprob: -5.6212568283081055
    10. 'def' → logprob: -5.8712568283081055

Token 46: 'son' (ID: 1356)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.21166284382343292
    2. ' )' → logprob: -1.7116628885269165
    3. ' ' → logprob: -5.836662769317627
    4. ',' → logprob: -5.961662769317627
    5. ' ' → logprob: -7.211662769317627
    6. ' un' → logprob: -7.461662769317627
    7. 's' → logprob: -7.461662769317627
    8. ').' → logprob: -7.836662769317627
    9. ' dans' → logprob: -8.211663246154785
    10. ' ),' → logprob: -8.586663246154785

Token 47: ' numéro' (ID: 65036)
  Prédit: ' numéro'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' numéro' → logprob: -1.019547700881958
    2. '_' → logprob: -1.269547700881958
    3. ' )' → logprob: -2.019547700881958
    4. 's' → logprob: -2.644547700881958
    5. ' ident' → logprob: -3.269547700881958
    6. ' _' → logprob: -3.269547700881958
    7. ')' → logprob: -3.644547700881958
    8. '_id' → logprob: -4.644547462463379
    9. ' #' → logprob: -5.019547462463379
    10. ' ' → logprob: -5.144547462463379

Token 48: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.02581864595413208
    2. ' )' → logprob: -4.275818824768066
    3. ' ' → logprob: -5.400818824768066
    4. ',' → logprob: -6.150818824768066
    5. ').' → logprob: -6.150818824768066
    6. ' de' → logprob: -7.650818824768066
    7. ' ' → logprob: -7.775818824768066
    8. '_' → logprob: -7.900818824768066
    9. '),' → logprob: -7.900818824768066
    10. '.' → logprob: -8.775818824768066

Token 49: ' ou' (ID: 2031)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5403986573219299
    2. ':' → logprob: -1.4153985977172852
    3. ',' → logprob: -2.665398597717285
    4. '#' → logprob: -3.415398597717285
    5. '.' → logprob: -3.665398597717285
    6. ' :' → logprob: -4.290398597717285
    7. '_' → logprob: -4.915398597717285
    8. ')' → logprob: -5.165398597717285
    9. '\' → logprob: -5.540398597717285
    10. 's' → logprob: -5.665398597717285

Token 50: ' la' (ID: 557)
  Prédit: ' la'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.7275269627571106
    2. ' sa' → logprob: -1.4775269031524658
    3. ' une' → logprob: -1.9775269031524658
    4. ' un' → logprob: -3.727526903152466
    5. 'une' → logprob: -3.977526903152466
    6. '#' → logprob: -4.102527141571045
    7. ' ' → logprob: -4.477527141571045
    8. ' l' → logprob: -4.602527141571045
    9. 'leur' → logprob: -4.602527141571045
    10. ''' → logprob: -4.977527141571045

Token 51: ' sortie' (ID: 52761)
  Prédit: ' sortie'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sortie' → logprob: -0.9478778839111328
    2. '#' → logprob: -2.072877883911133
    3. 's' → logprob: -2.197877883911133
    4. ' ' → logprob: -2.322877883911133
    5. ' sort' → logprob: -2.822877883911133
    6. 'sort' → logprob: -2.947877883911133
    7. ' #' → logprob: -3.197877883911133
    8. ' espace' → logprob: -4.072877883911133
    9. ' passage' → logprob: -4.322877883911133
    10. ' space' → logprob: -4.322877883911133

Token 52: ' d' (ID: 272)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.45842158794403076
    2. '<|end|>' → logprob: -1.4584215879440308
    3. ' d' → logprob: -3.0834217071533203
    4. 's' → logprob: -3.4584217071533203
    5. ' de' → logprob: -4.58342170715332
    6. '.' → logprob: -4.58342170715332
    7. '_' → logprob: -4.95842170715332
    8. ',' → logprob: -5.33342170715332
    9. '<|end|>' → logprob: -5.45842170715332
    10. ')' → logprob: -5.58342170715332

Token 53: ''un' (ID: 9788)
  Prédit: ''un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''un' → logprob: -0.4233309328556061
    2. ''' → logprob: -1.1733309030532837
    3. 'u' → logprob: -4.173330783843994
    4. ''u' → logprob: -4.423330783843994
    5. 'e' → logprob: -5.423330783843994
    6. '’un' → logprob: -6.798330783843994
    7. ''une' → logprob: -6.923330783843994
    8. 'un' → logprob: -7.548330783843994
    9. '`' → logprob: -8.548331260681152
    10. '```' → logprob: -8.673331260681152

Token 54: ' wagon' (ID: 90907)
  Prédit: 'wagon'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'wagon' → logprob: -0.7886692881584167
    2. ' wagon' → logprob: -0.9136692881584167
    3. ' ' → logprob: -2.2886693477630615
    4. 'w' → logprob: -4.913669109344482
    5. ')' → logprob: -5.038669109344482
    6. '#' → logprob: -5.788669109344482
    7. ' ' → logprob: -5.913669109344482
    8. '```' → logprob: -5.913669109344482
    9. ' wag' → logprob: -6.288669109344482
    10. '_' → logprob: -6.288669109344482

Token 55: ' (' (ID: 350)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.47809281945228577
    2. ' ' → logprob: -1.6030927896499634
    3. ',' → logprob: -2.853092908859253
    4. '#' → logprob: -3.228092908859253
    5. 's' → logprob: -3.728092908859253
    6. ' #' → logprob: -4.478092670440674
    7. ' ,' → logprob: -4.728092670440674
    8. '_' → logprob: -4.978092670440674
    9. ' ' → logprob: -5.353092670440674
    10. ':' → logprob: -5.478092670440674

Token 56: '0' (ID: 15)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7322819828987122
    2. ''' → logprob: -1.3572819232940674
    3. ' ' → logprob: -2.2322819232940674
    4. ' )' → logprob: -2.7322819232940674
    5. '')' → logprob: -3.7322819232940674
    6. 'u' → logprob: -4.3572821617126465
    7. '#' → logprob: -4.7322821617126465
    8. 's' → logprob: -5.6072821617126465
    9. ' un' → logprob: -5.9822821617126465
    10. 'a' → logprob: -6.0447821617126465

Token 57: ').
' (ID: 6294)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.005321631673723459
    2. ' )' → logprob: -5.380321502685547
    3. ').' → logprob: -8.505321502685547
    4. '#' → logprob: -8.630321502685547
    5. ')
' → logprob: -9.130321502685547
    6. '0' → logprob: -9.755321502685547
    7. ' ' → logprob: -10.380321502685547
    8. ':' → logprob: -10.630321502685547
    9. '.' → logprob: -11.630321502685547
    10. ']' → logprob: -11.880321502685547

Token 58: '#' (ID: 2)
  Prédit: '#'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.7920643091201782
    2. ':' → logprob: -1.7920643091201782
    3. 'd' → logprob: -2.0420641899108887
    4. 'def' → logprob: -2.1670641899108887
    5. '\' → logprob: -3.7920641899108887
    6. '```' → logprob: -3.9170641899108887
    7. '
' → logprob: -4.042064189910889
    8. ' ' → logprob: -4.167064189910889
    9. 'n' → logprob: -4.167064189910889
    10. 'w' → logprob: -4.417064189910889

Token 59: ' 
' (ID: 793)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.5700201392173767
    2. 'def' → logprob: -1.3200201988220215
    3. '#' → logprob: -2.1950201988220215
    4. 'n' → logprob: -4.1950201988220215
    5. ':' → logprob: -4.6950201988220215
    6. 'w' → logprob: -5.0700201988220215
    7. 'i' → logprob: -5.1950201988220215
    8. '```' → logprob: -5.4450201988220215
    9. 'import' → logprob: -5.5700201988220215
    10. '\' → logprob: -5.6950201988220215

Token 60: '#' (ID: 2)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.22408364713191986
    2. 'd' → logprob: -1.974083662033081
    3. 'n' → logprob: -3.099083662033081
    4. '#' → logprob: -5.724083423614502
    5. '\' → logprob: -5.849083423614502
    6. 'i' → logprob: -5.974083423614502
    7. '```' → logprob: -6.099083423614502
    8. 'import' → logprob: -6.349083423614502
    9. 'w' → logprob: -6.474083423614502
    10. 'class' → logprob: -7.849083423614502

Token 61: ' On' (ID: 2160)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.7376121282577515
    2. 'def' → logprob: -0.7376121282577515
    3. 'n' → logprob: -4.237612247467041
    4. 'from' → logprob: -4.987612247467041
    5. '#' → logprob: -5.112612247467041
    6. 'class' → logprob: -5.737612247467041
    7. 'import' → logprob: -5.737612247467041
    8. 'w' → logprob: -5.862612247467041
    9. 'i' → logprob: -5.862612247467041
    10. '```' → logprob: -6.487612247467041

Token 62: ' mod' (ID: 1812)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.006398799829185009
    2. 'def' → logprob: -6.131398677825928
    3. ' def' → logprob: -6.256398677825928
    4. ' d' → logprob: -7.631398677825928
    5. ' ' → logprob: -7.881398677825928
    6. '_' → logprob: -8.631399154663086
    7. ' a' → logprob: -8.631399154663086
    8. ' déf' → logprob: -8.631399154663086
    9. ' n' → logprob: -9.131399154663086
    10. '#' → logprob: -9.881399154663086

Token 63: 'él' (ID: 6778)
  Prédit: 'ule'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ule' → logprob: -0.6528207659721375
    2. '#' → logprob: -2.1528208255767822
    3. 'èle' → logprob: -2.5278208255767822
    4. 'é' → logprob: -2.7778208255767822
    5. 'ifie' → logprob: -3.1528208255767822
    6. 'él' → logprob: -3.1528208255767822
    7. 'ifier' → logprob: -3.4028208255767822
    8. '```' → logprob: -3.6528208255767822
    9. 'è' → logprob: -3.9028208255767822
    10. 'if' → logprob: -4.402820587158203

Token 64: 'ise' (ID: 1096)
  Prédit: 'é'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'é' → logprob: -0.5447167754173279
    2. 'él' → logprob: -1.0447168350219727
    3. 'è' → logprob: -3.6697168350219727
    4. 'èle' → logprob: -4.169716835021973
    5. 'ise' → logprob: -4.544716835021973
    6. '#' → logprob: -5.794716835021973
    7. '=' → logprob: -6.044716835021973
    8. 'e' → logprob: -6.169716835021973
    9. 'isé' → logprob: -6.669716835021973
    10. '```' → logprob: -6.669716835021973

Token 65: ' les' (ID: 1341)
  Prédit: ' l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.7480748891830444
    2. ' la' → logprob: -1.2480748891830444
    3. ' une' → logprob: -1.7480748891830444
    4. ' un' → logprob: -3.498075008392334
    5. ' ' → logprob: -3.873075008392334
    6. ' les' → logprob: -5.873075008392334
    7. ' ' → logprob: -5.873075008392334
    8. ' le' → logprob: -5.998075008392334
    9. ' a' → logprob: -6.498075008392334
    10. 'une' → logprob: -7.248075008392334

Token 66: ' wag' (ID: 48065)
  Prédit: ' wag'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' wag' → logprob: -0.1397160291671753
    2. ' voies' → logprob: -2.264716148376465
    3. ' trains' → logprob: -5.264716148376465
    4. ' ' → logprob: -5.389716148376465
    5. ' chemins' → logprob: -5.889716148376465
    6. ' rails' → logprob: -6.264716148376465
    7. ' voitures' → logprob: -6.639716148376465
    8. 'wag' → logprob: -6.639716148376465
    9. ' espaces' → logprob: -6.889716148376465
    10. ' piles' → logprob: -7.264716148376465

Token 67: 'ons' (ID: 1808)
  Prédit: 'ons'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ons' → logprob: -0.0013111939188092947
    2. 'on' → logprob: -7.001311302185059
    3. '```' → logprob: -9.876311302185059
    4. '``' → logprob: -9.876311302185059
    5. 'o' → logprob: -10.126311302185059
    6. ' ons' → logprob: -10.751311302185059
    7. '#' → logprob: -10.751311302185059
    8. '\' → logprob: -10.876311302185059
    9. '`' → logprob: -11.188811302185059
    10. 's' → logprob: -11.438811302185059

Token 68: ' sur' (ID: 1512)
  Prédit: ' comme'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' comme' → logprob: -0.5917219519615173
    2. ' par' → logprob: -1.716722011566162
    3. 's' → logprob: -2.091722011566162
    4. ' en' → logprob: -3.216722011566162
    5. ' ' → logprob: -3.591722011566162
    6. ' as' → logprob: -3.841722011566162
    7. ' sous' → logprob: -4.341722011566162
    8. ' d' → logprob: -4.966722011566162
    9. 'comme' → logprob: -4.966722011566162
    10. ' sur' → logprob: -5.966722011566162

Token 69: ' la' (ID: 557)
  Prédit: ' une'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' une' → logprob: -0.0657961368560791
    2. ' la' → logprob: -3.065796136856079
    3. ' l' → logprob: -5.5657958984375
    4. ' ' → logprob: -5.6907958984375
    5. 'une' → logprob: -5.8157958984375
    6. ' un' → logprob: -5.9407958984375
    7. ' ' → logprob: -6.1907958984375
    8. 'la' → logprob: -7.0657958984375
    9. ' a' → logprob: -8.3157958984375
    10. '```' → logprob: -8.9407958984375

Token 70: ' voie' (ID: 73615)
  Prédit: ' voie'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' voie' → logprob: -0.17668147385120392
    2. 'voie' → logprob: -2.0516815185546875
    3. ' ' → logprob: -5.0516815185546875
    4. ' voies' → logprob: -5.5516815185546875
    5. ' ' → logprob: -5.8641815185546875
    6. ' pile' → logprob: -6.0516815185546875
    7. '_' → logprob: -6.1141815185546875
    8. ' piste' → logprob: -6.7391815185546875
    9. ' file' → logprob: -6.8641815185546875
    10. 'pile' → logprob: -6.9891815185546875

Token 71: ' comme' (ID: 7971)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.028157470747828484
    2. ' _' → logprob: -5.6531572341918945
    3. ' de' → logprob: -5.7781572341918945
    4. ' ' → logprob: -5.7781572341918945
    5. 's' → logprob: -6.2781572341918945
    6. ' ferro' → logprob: -6.2781572341918945
    7. '_stack' → logprob: -6.5281572341918945
    8. ' =' → logprob: -6.5281572341918945
    9. '_f' → logprob: -6.6531572341918945
    10. ' principale' → logprob: -6.9031572341918945

Token 72: ' une' (ID: 2463)
  Prédit: ' une'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' une' → logprob: -0.05696173012256622
    2. 'une' → logprob: -2.93196177482605
    3. ' un' → logprob: -6.931961536407471
    4. ''une' → logprob: -8.181962013244629
    5. 'un' → logprob: -8.306962013244629
    6. 'a' → logprob: -8.306962013244629
    7. ' a' → logprob: -9.431962013244629
    8. ' des' → logprob: -9.556962013244629
    9. 'Une' → logprob: -10.556962013244629
    10. ' ' → logprob: -10.806962013244629

Token 73: ' pile' (ID: 39732)
  Prédit: ' pile'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pile' → logprob: -0.13952235877513885
    2. 'pile' → logprob: -2.2645223140716553
    3. ' liste' → logprob: -3.8895223140716553
    4. ' stack' → logprob: -5.639522552490234
    5. 'liste' → logprob: -7.389522552490234
    6. ' list' → logprob: -8.014522552490234
    7. 'stack' → logprob: -8.014522552490234
    8. 'p' → logprob: -8.139522552490234
    9. ' pil' → logprob: -8.639522552490234
    10. 'list' → logprob: -9.514522552490234

Token 74: ' (' (ID: 350)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.25366368889808655
    2. 's' → logprob: -2.7536637783050537
    3. ',' → logprob: -3.0036637783050537
    4. ':' → logprob: -3.1286637783050537
    5. 'stack' → logprob: -4.253663539886475
    6. '#' → logprob: -4.503663539886475
    7. ' :' → logprob: -4.628663539886475
    8. '```' → logprob: -5.003663539886475
    9. 'w' → logprob: -5.128663539886475
    10. ' (' → logprob: -6.128663539886475

Token 75: 'stack' (ID: 15145)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7497526407241821
    2. ').' → logprob: -1.6247526407241821
    3. ' )' → logprob: -2.1247525215148926
    4. ' de' → logprob: -2.6247525215148926
    5. ' ).' → logprob: -3.4997525215148926
    6. ' stack' → logprob: -3.7497525215148926
    7. ' list' → logprob: -4.499752521514893
    8. ' la' → logprob: -4.624752521514893
    9. 'stack' → logprob: -4.749752521514893
    10. 'list' → logprob: -4.749752521514893

Token 76: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.107062429189682
    2. ').' → logprob: -2.482062339782715
    3. ' )' → logprob: -4.857062339782715
    4. 'e' → logprob: -5.607062339782715
    5. '):' → logprob: -6.232062339782715
    6. '),' → logprob: -6.482062339782715
    7. 's' → logprob: -6.607062339782715
    8. '.' → logprob: -7.732062339782715
    9. ' ).' → logprob: -7.982062339782715
    10. ',' → logprob: -8.232062339782715

Token 77: ' car' (ID: 1669)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.7781173586845398
    2. 'w' → logprob: -1.9031174182891846
    3. '.' → logprob: -2.4031174182891846
    4. '#' → logprob: -2.6531174182891846
    5. 'stack' → logprob: -3.0281174182891846
    6. 'def' → logprob: -3.1531174182891846
    7. 'wagon' → logprob: -3.2781174182891846
    8. '```' → logprob: -3.2781174182891846
    9. 'import' → logprob: -3.6531174182891846
    10. 's' → logprob: -4.7781171798706055

Token 78: ' l' (ID: 305)
  Prédit: ' les'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.5814436674118042
    2. ' l' → logprob: -1.9564436674118042
    3. ' on' → logprob: -1.9564436674118042
    4. ' le' → logprob: -3.7064437866210938
    5. ' la' → logprob: -3.8314437866210938
    6. 'les' → logprob: -3.9564437866210938
    7. ' c' → logprob: -4.081443786621094
    8. 'l' → logprob: -4.581443786621094
    9. ' leur' → logprob: -4.581443786621094
    10. ' seuls' → logprob: -4.831443786621094

Token 79: ''ordre' (ID: 124753)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.09320441633462906
    2. 'e' → logprob: -3.0932044982910156
    3. ''' → logprob: -4.593204498291016
    4. 'es' → logprob: -4.593204498291016
    5. ''a' → logprob: -5.468204498291016
    6. ' a' → logprob: -5.843204498291016
    7. ''on' → logprob: -5.843204498291016
    8. ''entrée' → logprob: -6.093204498291016
    9. ''emp' → logprob: -6.218204498291016
    10. ''ordre' → logprob: -7.093204498291016

Token 80: ' de' (ID: 334)
  Prédit: ' des'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' des' → logprob: -0.15304018557071686
    2. ' est' → logprob: -3.1530401706695557
    3. ' ' → logprob: -3.5280401706695557
    4. ' de' → logprob: -3.5280401706695557
    5. ' d' → logprob: -3.7780401706695557
    6. ' s' → logprob: -5.653040409088135
    7. 's' → logprob: -5.778040409088135
    8. '  ' → logprob: -6.153040409088135
    9. ' of' → logprob: -6.153040409088135
    10. 'des' → logprob: -7.153040409088135

Token 81: ' sortie' (ID: 52761)
  Prédit: ' emp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' emp' → logprob: -0.9004764556884766
    2. ' leur' → logprob: -2.2754764556884766
    3. 'entrée' → logprob: -2.6504764556884766
    4. ' passage' → logprob: -3.0254764556884766
    5. 'der' → logprob: -3.4004764556884766
    6. 'arr' → logprob: -3.5254764556884766
    7. ' l' → logprob: -3.6504764556884766
    8. ' dernier' → logprob: -3.6504764556884766
    9. ' last' → logprob: -3.7754764556884766
    10. ' L' → logprob: -3.9004764556884766

Token 82: ' suit' (ID: 15170)
  Prédit: ' est'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' est' → logprob: -0.6062129139900208
    2. ' des' → logprob: -0.8562129139900208
    3. ' correspond' → logprob: -4.356213092803955
    4. 's' → logprob: -5.606213092803955
    5. ' se' → logprob: -5.731213092803955
    6. ' s' → logprob: -6.231213092803955
    7. ' peut' → logprob: -6.481213092803955
    8. ' respecte' → logprob: -6.731213092803955
    9. 'des' → logprob: -7.231213092803955
    10. '#' → logprob: -7.481213092803955

Token 83: ' le' (ID: 505)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.4380635917186737
    2. ' le' → logprob: -1.563063621520996
    3. ' une' → logprob: -2.938063621520996
    4. ' celui' → logprob: -3.563063621520996
    5. ' l' → logprob: -4.563063621520996
    6. 'le' → logprob: -4.563063621520996
    7. 'la' → logprob: -4.813063621520996
    8. ' L' → logprob: -5.188063621520996
    9. ' un' → logprob: -5.313063621520996
    10. 'L' → logprob: -5.688063621520996

Token 84: ' principe' (ID: 58004)
  Prédit: ' L'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' L' → logprob: -0.9439614415168762
    2. ' dernier' → logprob: -1.4439613819122314
    3. ' principe' → logprob: -1.9439613819122314
    4. 'L' → logprob: -2.3189613819122314
    5. 'dern' → logprob: -3.4439613819122314
    6. ' last' → logprob: -3.8189613819122314
    7. ' Last' → logprob: -3.9439613819122314
    8. 'Last' → logprob: -5.0689616203308105
    9. ' FIL' → logprob: -5.4439616203308105
    10. 'princip' → logprob: -5.4439616203308105

Token 85: ' L' (ID: 451)
  Prédit: ' d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.6705729365348816
    2. ' de' → logprob: -0.7955729365348816
    3. ' du' → logprob: -4.670572757720947
    4. ' L' → logprob: -5.045572757720947
    5. ' des' → logprob: -5.045572757720947
    6. ' last' → logprob: -5.170572757720947
    7. 'd' → logprob: -5.920572757720947
    8. ' Last' → logprob: -6.170572757720947
    9. 'de' → logprob: -6.545572757720947
    10. '#' → logprob: -6.920572757720947

Token 86: 'IFO' (ID: 79012)
  Prédit: 'I'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'I' → logprob: -0.5031320452690125
    2. 'a' → logprob: -1.5031321048736572
    3. 'IFO' → logprob: -2.1281321048736572
    4. 'F' → logprob: -3.6281321048736572
    5. 'A' → logprob: -4.378131866455078
    6. 'i' → logprob: -5.253131866455078
    7. 'ifo' → logprob: -6.003131866455078
    8. '```' → logprob: -7.065631866455078
    9. 'ast' → logprob: -7.628131866455078
    10. 'S' → logprob: -7.753131866455078

Token 87: ' :
' (ID: 10039)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.9707549810409546
    2. ':' → logprob: -1.2207549810409546
    3. '#' → logprob: -2.470755100250244
    4. 'import' → logprob: -2.720755100250244
    5. '.' → logprob: -3.095755100250244
    6. '
' → logprob: -3.345755100250244
    7. '```' → logprob: -3.345755100250244
    8. '

' → logprob: -4.470755100250244
    9. 's' → logprob: -4.720755100250244
    10. ':
' → logprob: -5.095755100250244

Token 88: '#' (ID: 2)
  Prédit: '#'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -1.2425421476364136
    2. '```' → logprob: -1.9925421476364136
    3. 'stack' → logprob: -2.117542266845703
    4. 'def' → logprob: -2.117542266845703
    5. 'w' → logprob: -2.242542266845703
    6. ' ' → logprob: -3.492542266845703
    7. 'import' → logprob: -3.492542266845703
    8. 's' → logprob: -3.867542266845703
    9. '`' → logprob: -4.117542266845703
    10. 'class' → logprob: -4.242542266845703

Token 89: ' le' (ID: 505)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'stack' → logprob: -1.3727381229400635
    2. ' ' → logprob: -1.7477381229400635
    3. ' stack' → logprob: -2.2477381229400635
    4. '#' → logprob: -2.2477381229400635
    5. 'def' → logprob: -2.4977381229400635
    6. 'w' → logprob: -2.6227381229400635
    7. ' #' → logprob: -3.3727381229400635
    8. 's' → logprob: -3.4977381229400635
    9. ' wagon' → logprob: -3.9977381229400635
    10. 'd' → logprob: -4.497737884521484

Token 90: ' dernier' (ID: 27982)
  Prédit: ' dernier'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' dernier' → logprob: -0.726017951965332
    2. ' wagon' → logprob: -1.101017951965332
    3. ' ' → logprob: -3.351017951965332
    4. ' premier' → logprob: -3.476017951965332
    5. 's' → logprob: -3.851017951965332
    6. ' wag' → logprob: -4.226017951965332
    7. ' chemin' → logprob: -4.726017951965332
    8. ' plus' → logprob: -4.851017951965332
    9. ' sommet' → logprob: -4.976017951965332
    10. 'wagon' → logprob: -4.976017951965332

Token 91: ' wagon' (ID: 90907)
  Prédit: ' arrivé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' arrivé' → logprob: -1.0751100778579712
    2. 'arr' → logprob: -1.8251100778579712
    3. ' entr' → logprob: -2.2001099586486816
    4. ' wagon' → logprob: -2.3251099586486816
    5. 'wagon' → logprob: -2.3251099586486816
    6. ' ' → logprob: -2.9501099586486816
    7. 'entrant' → logprob: -3.9501099586486816
    8. 'entrée' → logprob: -3.9501099586486816
    9. ' ajouté' → logprob: -4.075109958648682
    10. ' arriv' → logprob: -4.200109958648682

Token 92: ' entr' (ID: 7072)
  Prédit: ' entr'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' entr' → logprob: -1.0303360223770142
    2. 'entr' → logprob: -1.4053360223770142
    3. ' emp' → logprob: -1.9053360223770142
    4. 'entrant' → logprob: -2.7803359031677246
    5. ' à' → logprob: -3.4053359031677246
    6. ' placé' → logprob: -3.5303359031677246
    7. ' ajouté' → logprob: -3.5303359031677246
    8. 'emp' → logprob: -3.7803359031677246
    9. 'entrée' → logprob: -4.280335903167725
    10. 'aj' → logprob: -4.405335903167725

Token 93: 'é' (ID: 377)
  Prédit: 'é'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'é' → logprob: -0.0006218921043910086
    2. 'ant' → logprob: -8.250621795654297
    3. 'ré' → logprob: -9.000621795654297
    4. 'r' → logprob: -9.750621795654297
    5. 'e' → logprob: -10.250621795654297
    6. ' é' → logprob: -10.750621795654297
    7. 't' → logprob: -10.750621795654297
    8. 'u' → logprob: -11.500621795654297
    9. 'è' → logprob: -11.625621795654297
    10. 'er' → logprob: -11.625621795654297

Token 94: ' est' (ID: 893)
  Prédit: ' est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' est' → logprob: -0.4921424090862274
    2. ' sur' → logprob: -2.61714243888855
    3. 'est' → logprob: -3.11714243888855
    4. ' (' → logprob: -3.36714243888855
    5. ' sera' → logprob: -3.36714243888855
    6. 'sur' → logprob: -3.49214243888855
    7. ' dans' → logprob: -3.49214243888855
    8. ' emp' → logprob: -3.61714243888855
    9. '#' → logprob: -3.74214243888855
    10. ' entr' → logprob: -4.492142200469971

Token 95: ' le' (ID: 505)
  Prédit: ' celui'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' celui' → logprob: -0.33970892429351807
    2. ' emp' → logprob: -2.3397088050842285
    3. ' placé' → logprob: -2.4647088050842285
    4. ' le' → logprob: -2.7147088050842285
    5. ' ajouté' → logprob: -4.4647088050842285
    6. ' sorti' → logprob: -4.4647088050842285
    7. ' ' → logprob: -5.7147088050842285
    8. ' entr' → logprob: -5.8397088050842285
    9. ' toujours' → logprob: -6.4647088050842285
    10. ' aussi' → logprob: -6.9647088050842285

Token 96: ' premier' (ID: 15506)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.032198548316955566
    2. ' premier' → logprob: -3.907198429107666
    3. '  
' → logprob: -5.657198429107666
    4. ' ' → logprob: -5.907198429107666
    5. ' 
' → logprob: -6.657198429107666
    6. 's' → logprob: -7.032198429107666
    7. '  ' → logprob: -7.532198429107666
    8. ' dernier' → logprob: -7.782198429107666
    9. ' space' → logprob: -8.282198905944824
    10. 'prem' → logprob: -8.282198905944824

Token 97: ' à' (ID: 1221)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.09473366290330887
    2. '_' → logprob: -3.469733715057373
    3. ' à' → logprob: -4.469733715057373
    4. ')' → logprob: -4.969733715057373
    5. '#' → logprob: -5.219733715057373
    6. '\' → logprob: -5.344733715057373
    7. ' )' → logprob: -5.469733715057373
    8. ' ' → logprob: -5.719733715057373
    9. ' entr' → logprob: -5.719733715057373
    10. ' (' → logprob: -6.344733715057373

Token 98: ' sortir' (ID: 55515)
  Prédit: ' sortir'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sortir' → logprob: -0.5893188714981079
    2. 'sort' → logprob: -0.8393188714981079
    3. 's' → logprob: -5.464318752288818
    4. ' ' → logprob: -5.714318752288818
    5. ' sort' → logprob: -6.089318752288818
    6. '_sort' → logprob: -7.839318752288818
    7. ' sortie' → logprob: -7.964318752288818
    8. ' ressort' → logprob: -7.964318752288818
    9. ' ' → logprob: -8.089319229125977
    10. '  ' → logprob: -8.214319229125977

Token 99: '.
' (ID: 558)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.6646155118942261
    2. 'def' → logprob: -1.289615511894226
    3. ':' → logprob: -2.5396156311035156
    4. '#' → logprob: -3.5396156311035156
    5. 'import' → logprob: -3.5396156311035156
    6. '```' → logprob: -3.6646156311035156
    7. '\n' → logprob: -4.664615631103516
    8. '

' → logprob: -4.789615631103516
    9. '
' → logprob: -5.164615631103516
    10. '.' → logprob: -5.289615631103516

Token 100: '#' (ID: 2)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -1.2128398418426514
    2. 'd' → logprob: -1.3378398418426514
    3. 'w' → logprob: -1.8378398418426514
    4. '#' → logprob: -2.3378398418426514
    5. '```' → logprob: -3.2128398418426514
    6. '\' → logprob: -3.3378398418426514
    7. 'n' → logprob: -3.4628398418426514
    8. '' → logprob: -3.9628398418426514
    9. '
' → logprob: -4.2128400802612305
    10. '\n' → logprob: -4.5878400802612305

Token 101: ' 
' (ID: 793)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.5890876054763794
    2. 'def' → logprob: -1.0890876054763794
    3. '#' → logprob: -2.96408748626709
    4. 'w' → logprob: -3.71408748626709
    5. '```' → logprob: -4.21408748626709
    6. 'import' → logprob: -5.96408748626709
    7. 'n' → logprob: -5.96408748626709
    8. '\' → logprob: -6.08908748626709
    9. '
' → logprob: -6.08908748626709
    10. 'de' → logprob: -6.08908748626709

Token 102: '#' (ID: 2)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.7286819815635681
    2. 'd' → logprob: -0.9786819815635681
    3. '#' → logprob: -2.728682041168213
    4. 'w' → logprob: -3.478682041168213
    5. 'class' → logprob: -3.978682041168213
    6. 'n' → logprob: -4.228682041168213
    7. '```' → logprob: -5.603682041168213
    8. 'import' → logprob: -6.103682041168213
    9. 'a' → logprob: -6.853682041168213
    10. 'de' → logprob: -6.978682041168213

Token 103: ' Appro' (ID: 24145)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.09865295886993408
    2. 'w' → logprob: -3.5986528396606445
    3. 'stack' → logprob: -3.9736528396606445
    4. 'class' → logprob: -4.2236528396606445
    5. 'wagon' → logprob: -4.2236528396606445
    6. 'd' → logprob: -4.9736528396606445
    7. 'train' → logprob: -5.7236528396606445
    8. '```' → logprob: -6.3486528396606445
    9. '#' → logprob: -6.4736528396606445
    10. 'wag' → logprob: -6.5986528396606445

Token 104: 'che' (ID: 926)
  Prédit: 'fond'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'fond' → logprob: -0.792634129524231
    2. 'che' → logprob: -1.542634129524231
    3. '#' → logprob: -1.917634129524231
    4. 'ch' → logprob: -2.9176340103149414
    5. 'f' → logprob: -3.0426340103149414
    6. 'x' → logprob: -3.2926340103149414
    7. 'xi' → logprob: -3.9176340103149414
    8. 'ches' → logprob: -4.042634010314941
    9. 'xim' → logprob: -5.417634010314941
    10. 'visionnement' → logprob: -6.292634010314941

Token 105: ' :
' (ID: 10039)
  Prédit: ' :'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' :' → logprob: -0.15869379043579102
    2. ' ' → logprob: -2.533693790435791
    3. ':' → logprob: -2.783693790435791
    4. '#' → logprob: -6.408693790435791
    5. ' ' → logprob: -6.533693790435791
    6. ' #' → logprob: -6.783693790435791
    7. ' :
' → logprob: -7.533693790435791
    8. ' =' → logprob: -8.533693313598633
    9. 's' → logprob: -9.533693313598633
    10. ' de' → logprob: -9.658693313598633

Token 106: '#' (ID: 2)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -1.3829238414764404
    2. '#' → logprob: -1.5079238414764404
    3. ' on' → logprob: -2.0079238414764404
    4. 'On' → logprob: -2.2579238414764404
    5. ' Util' → logprob: -2.8829238414764404
    6. ' #' → logprob: -3.0079238414764404
    7. ' On' → logprob: -3.1329238414764404
    8. 'Util' → logprob: -3.3829238414764404
    9. ' def' → logprob: -3.7579238414764404
    10. ' utiliser' → logprob: -4.2579240798950195

Token 107: ' -' (ID: 533)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.3711751699447632
    2. 'def' → logprob: -1.9961751699447632
    3. 'On' → logprob: -2.3711752891540527
    4. ' on' → logprob: -2.3711752891540527
    5. ' On' → logprob: -2.3711752891540527
    6. ' #' → logprob: -2.3711752891540527
    7. ' Util' → logprob: -2.4961752891540527
    8. ' def' → logprob: -2.7461752891540527
    9. 'Util' → logprob: -3.7461752891540527
    10. ' stack' → logprob: -4.621175289154053

Token 108: ' On' (ID: 2160)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -1.07582688331604
    2. 'Util' → logprob: -1.45082688331604
    3. 'On' → logprob: -2.20082688331604
    4. '#' → logprob: -2.32582688331604
    5. 'Lire' → logprob: -2.57582688331604
    6. ' Util' → logprob: -2.82582688331604
    7. 'from' → logprob: -4.200826644897461
    8. ' utiliser' → logprob: -4.575826644897461
    9. 'util' → logprob: -5.075826644897461
    10. ' On' → logprob: -5.075826644897461

Token 109: ' initialise' (ID: 145250)
  Prédit: ' utilise'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' utilise' → logprob: -0.5794338583946228
    2. ' ' → logprob: -2.0794339179992676
    3. ' va' → logprob: -2.7044339179992676
    4. ' a' → logprob: -3.2044339179992676
    5. ' emp' → logprob: -3.3294339179992676
    6. ' utilis' → logprob: -3.5794339179992676
    7. ' initialise' → logprob: -3.5794339179992676
    8. ' ' → logprob: -4.079433917999268
    9. ' lit' → logprob: -4.079433917999268
    10. ' continue' → logprob: -4.329433917999268

Token 110: ' une' (ID: 2463)
  Prédit: ' une'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' une' → logprob: -0.0732029601931572
    2. 'une' → logprob: -3.4482028484344482
    3. ' la' → logprob: -4.198203086853027
    4. ' un' → logprob: -4.448203086853027
    5. ' ' → logprob: -4.948203086853027
    6. ' ' → logprob: -5.698203086853027
    7. 'la' → logprob: -7.573203086853027
    8. 'un' → logprob: -8.073203086853027
    9. ' a' → logprob: -8.073203086853027
    10. ' stack' → logprob: -9.448203086853027

Token 111: ' pile' (ID: 39732)
  Prédit: 'pile'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pile' → logprob: -0.8200669884681702
    2. ' pile' → logprob: -1.4450669288635254
    3. 'liste' → logprob: -1.6950669288635254
    4. ' liste' → logprob: -2.1950669288635254
    5. 'stack' → logprob: -4.320066928863525
    6. ' stack' → logprob: -4.695066928863525
    7. 'list' → logprob: -6.445066928863525
    8. 'p' → logprob: -6.820066928863525
    9. ' []' → logprob: -6.945066928863525
    10. '[]' → logprob: -7.445066928863525

Token 112: ' vide' (ID: 21835)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -1.2222416400909424
    2. ' vide' → logprob: -1.3472416400909424
    3. 'vide' → logprob: -2.0972416400909424
    4. '[]' → logprob: -2.0972416400909424
    5. ' []' → logprob: -2.2222416400909424
    6. ' stack' → logprob: -3.3472416400909424
    7. '=[]' → logprob: -4.472241401672363
    8. ' (' → logprob: -4.722241401672363
    9. 'stack' → logprob: -4.972241401672363
    10. ' ' → logprob: -5.597241401672363

Token 113: '.
' (ID: 558)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.8754196763038635
    2. 'wagon' → logprob: -1.7504196166992188
    3. ' wagon' → logprob: -2.1254196166992188
    4. 'wag' → logprob: -2.6254196166992188
    5. ' wag' → logprob: -2.7504196166992188
    6. '.' → logprob: -3.1254196166992188
    7. 'wagen' → logprob: -3.7504196166992188
    8. 'car' → logprob: -3.8754196166992188
    9. ' stack' → logprob: -3.8754196166992188
    10. 'w' → logprob: -3.8754196166992188

Token 114: '#' (ID: 2)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.3578895330429077
    2. '#' → logprob: -1.4828895330429077
    3. 'def' → logprob: -3.7328896522521973
    4. 'wagon' → logprob: -3.9828896522521973
    5. 'w' → logprob: -4.857889652252197
    6. 'wag' → logprob: -5.107889652252197
    7. 'pile' → logprob: -5.482889652252197
    8. '```' → logprob: -5.982889652252197
    9. '
' → logprob: -6.357889652252197
    10. 's' → logprob: -6.607889652252197

Token 115: ' -' (ID: 533)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.2469446212053299
    2. 'def' → logprob: -2.1219446659088135
    3. '#' → logprob: -3.7469446659088135
    4. ' stack' → logprob: -4.496944427490234
    5. 'for' → logprob: -4.496944427490234
    6. 'w' → logprob: -4.746944427490234
    7. 'pile' → logprob: -4.746944427490234
    8. 'wagon' → logprob: -4.746944427490234
    9. '```' → logprob: -5.246944427490234
    10. 'wag' → logprob: -6.121944427490234

Token 116: ' Pour' (ID: 13931)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.19518502056598663
    2. ' for' → logprob: -2.4451849460601807
    3. 'def' → logprob: -3.6951849460601807
    4. ' On' → logprob: -4.19518518447876
    5. 'Pour' → logprob: -4.57018518447876
    6. 'On' → logprob: -5.07018518447876
    7. ' Lire' → logprob: -5.07018518447876
    8. 'pour' → logprob: -5.44518518447876
    9. ' Pour' → logprob: -5.44518518447876
    10. ' pour' → logprob: -5.44518518447876

Token 117: ' chaque' (ID: 21194)
  Prédit: ' chaque'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaque' → logprob: -0.14515464007854462
    2. ' ' → logprob: -2.0201547145843506
    3. ' each' → logprob: -7.1451544761657715
    4. 'cha' → logprob: -7.2701544761657715
    5. ' ' → logprob: -8.64515495300293
    6. ' i' → logprob: -8.64515495300293
    7. ' cha' → logprob: -8.89515495300293
    8. 'Chaque' → logprob: -9.52015495300293
    9. '  ' → logprob: -9.89515495300293
    10. 'i' → logprob: -10.27015495300293

Token 118: ' entrée' (ID: 95590)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5306878089904785
    2. ' wagon' → logprob: -1.1556878089904785
    3. ' numéro' → logprob: -3.4056878089904785
    4. ' espace' → logprob: -4.6556878089904785
    5. ' ligne' → logprob: -4.6556878089904785
    6. ' entrée' → logprob: -5.0306878089904785
    7. ' élément' → logprob: -5.0306878089904785
    8. ' nombre' → logprob: -5.2806878089904785
    9. 'entrée' → logprob: -5.2806878089904785
    10. 'wagon' → logprob: -5.4056878089904785

Token 119: ' :
' (ID: 10039)
  Prédit: ' ,'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ,' → logprob: -0.9330872297286987
    2. ',' → logprob: -1.8080872297286987
    3. ' ' → logprob: -1.8080872297286987
    4. ' :' → logprob: -1.9330872297286987
    5. ' de' → logprob: -2.1830873489379883
    6. ':' → logprob: -4.933087348937988
    7. ' w' → logprob: -5.933087348937988
    8. ' wagon' → logprob: -6.058087348937988
    9. 'de' → logprob: -6.183087348937988
    10. ' d' → logprob: -6.808087348937988

Token 120: '#' (ID: 2)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.00958324782550335
    2. '    ' → logprob: -5.634583473205566
    3. ' #' → logprob: -6.634583473205566
    4. '#' → logprob: -6.759583473205566
    5. '   ' → logprob: -6.759583473205566
    6. ' if' → logprob: -7.509583473205566
    7. ' ' → logprob: -7.884583473205566
    8. '  ' → logprob: -8.634583473205566
    9. ' ,' → logprob: -8.759583473205566
    10. 'n' → logprob: -8.884583473205566

Token 121: '  ' (ID: 256)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.07648706436157227
    2. ' if' → logprob: -2.9514870643615723
    3. '    ' → logprob: -5.201487064361572
    4. 'if' → logprob: -5.326487064361572
    5. ' ' → logprob: -5.826487064361572
    6. ' #' → logprob: -5.951487064361572
    7. '#' → logprob: -6.201487064361572
    8. '   ' → logprob: -7.576487064361572
    9. ' ```' → logprob: -8.076486587524414
    10. ' i' → logprob: -8.201486587524414

Token 122: ' -' (ID: 533)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.12624706327915192
    2. ' if' → logprob: -2.3762471675872803
    3. ' i' → logprob: -4.126246929168701
    4. ' si' → logprob: -5.751246929168701
    5. 'if' → logprob: -5.876246929168701
    6. 'i' → logprob: -6.876246929168701
    7. '   ' → logprob: -7.376246929168701
    8. ' ' → logprob: -7.876246929168701
    9. ' s' → logprob: -8.37624740600586
    10. '  ' → logprob: -8.50124740600586

Token 123: ' Si' (ID: 7832)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.7792156338691711
    2. ' si' → logprob: -1.0292155742645264
    3. 'if' → logprob: -2.6542155742645264
    4. 'si' → logprob: -3.2792155742645264
    5. ' Si' → logprob: -4.0292158126831055
    6. 'Si' → logprob: -4.1542158126831055
    7. ' ' → logprob: -4.2792158126831055
    8. ' s' → logprob: -4.5292158126831055
    9. 's' → logprob: -4.6542158126831055
    10. ' on' → logprob: -5.9042158126831055

Token 124: ' le' (ID: 505)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8220090270042419
    2. ' l' → logprob: -1.4470090866088867
    3. ' c' → logprob: -2.5720090866088867
    4. ' le' → logprob: -2.9470090866088867
    5. ' entrée' → logprob: -3.1970090866088867
    6. ' n' → logprob: -3.5720090866088867
    7. ' la' → logprob: -3.8220090866088867
    8. ' valeur' → logprob: -4.197009086608887
    9. ' wagon' → logprob: -4.197009086608887
    10. ' input' → logprob: -4.447009086608887

Token 125: ' nombre' (ID: 9733)
  Prédit: ' wagon'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' wagon' → logprob: -1.4786920547485352
    2. ' numéro' → logprob: -1.9786920547485352
    3. ' nombre' → logprob: -1.9786920547485352
    4. 'n' → logprob: -2.978692054748535
    5. 'entrée' → logprob: -2.978692054748535
    6. ' token' → logprob: -2.978692054748535
    7. 'val' → logprob: -3.228692054748535
    8. 'nombre' → logprob: -3.478692054748535
    9. 'élé' → logprob: -3.603692054748535
    10. 'num' → logprob: -3.603692054748535

Token 126: ' est' (ID: 893)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6258453726768494
    2. ' est' → logprob: -1.5008454322814941
    3. ' !=' → logprob: -2.125845432281494
    4. ' n' → logprob: -2.500845432281494
    5. ' >' → logprob: -4.125845432281494
    6. '>' → logprob: -4.625845432281494
    7. '!=' → logprob: -5.375845432281494
    8. 'est' → logprob: -5.875845432281494
    9. ' ==' → logprob: -6.125845432281494
    10. 'n' → logprob: -6.625845432281494

Token 127: ' différent' (ID: 114823)
  Prédit: ' différent'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' différent' → logprob: -0.5887131690979004
    2. ' un' → logprob: -1.9637131690979004
    3. ' supérieur' → logprob: -2.0887131690979004
    4. '0' → logprob: -3.0887131690979004
    5. ' ' → logprob: -3.0887131690979004
    6. '>' → logprob: -3.5887131690979004
    7. ' non' → logprob: -4.0887131690979
    8. ' positif' → logprob: -4.0887131690979
    9. 'diff' → logprob: -4.9637131690979
    10. ' different' → logprob: -5.0887131690979

Token 128: ' de' (ID: 334)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2291460484266281
    2. ' de' → logprob: -1.6041460037231445
    3. 'de' → logprob: -5.9791460037231445
    4. ' d' → logprob: -6.9791460037231445
    5. 'd' → logprob: -8.854146003723145
    6. '  ' → logprob: -9.854146003723145
    7. 'e' → logprob: -11.979146003723145
    8. ' a' → logprob: -12.229146003723145
    9. '   ' → logprob: -12.229146003723145
    10. ' des' → logprob: -12.229146003723145

Token 129: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.28137892484664917
    2. '0' → logprob: -1.406378984451294
    3. ' ' → logprob: -8.906378746032715
    4. ' zéro' → logprob: -9.906378746032715
    5. 'z' → logprob: -10.781378746032715
    6. ' z' → logprob: -10.906378746032715
    7. '```' → logprob: -13.656378746032715
    8. ' zero' → logprob: -14.031378746032715
    9. '  ' → logprob: -14.906378746032715
    10. '  ' → logprob: -15.156378746032715

Token 130: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0006534627173095942
    2. ' ' → logprob: -7.375653266906738
    3. 'z' → logprob: -10.625653266906738
    4. ' zéro' → logprob: -13.625653266906738
    5. '```' → logprob: -14.875653266906738
    6. ' ' → logprob: -14.875653266906738
    7. ' z' → logprob: -15.125653266906738
    8. 'zero' → logprob: -15.375653266906738
    9. ' zero' → logprob: -17.125654220581055
    10. '`' → logprob: -17.500654220581055

Token 131: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.2862953245639801
    2. ':' → logprob: -1.5362952947616577
    3. ' :' → logprob: -3.6612954139709473
    4. ' ,' → logprob: -5.161295413970947
    5. ' ' → logprob: -6.286295413970947
    6. '   ' → logprob: -8.161294937133789
    7. ' ' → logprob: -8.911294937133789
    8. ':
' → logprob: -10.786294937133789
    9. ' :
' → logprob: -11.786294937133789
    10. '.' → logprob: -12.161294937133789

Token 132: ' on' (ID: 402)
  Prédit: ' on'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' on' → logprob: -0.3012200593948364
    2. ' ' → logprob: -2.176219940185547
    3. ' ' → logprob: -2.176219940185547
    4. ' emp' → logprob: -4.176219940185547
    5. '  ' → logprob: -5.426219940185547
    6. ' stack' → logprob: -5.676219940185547
    7. ' pile' → logprob: -6.051219940185547
    8. ' push' → logprob: -6.551219940185547
    9. ' ajouter' → logprob: -6.676219940185547
    10. 'on' → logprob: -6.676219940185547

Token 133: ' emp' (ID: 4927)
  Prédit: ' emp'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' emp' → logprob: -0.3718235492706299
    2. ' push' → logprob: -1.4968235492706299
    3. 'push' → logprob: -3.12182354927063
    4. ' append' → logprob: -3.99682354927063
    5. ' ajoute' → logprob: -4.621823310852051
    6. 'append' → logprob: -5.621823310852051
    7. ' pousse' → logprob: -6.121823310852051
    8. '.push' → logprob: -6.871823310852051
    9. 'emp' → logprob: -6.871823310852051
    10. ' stack' → logprob: -6.871823310852051

Token 134: 'ile' (ID: 554)
  Prédit: 'ile'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ile' → logprob: -0.08493539690971375
    2. 'iler' → logprob: -3.084935426712036
    3. ' ile' → logprob: -4.209935188293457
    4. 'i' → logprob: -4.584935188293457
    5. '\' → logprob: -6.709935188293457
    6. '_' → logprob: -7.397435188293457
    7. '   ' → logprob: -7.459935188293457
    8. 'il' → logprob: -7.522435188293457
    9. 'île' → logprob: -7.834935188293457
    10. ' ' → logprob: -7.897435188293457

Token 135: ' (' (ID: 350)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6842030882835388
    2. ' (' → logprob: -1.1842031478881836
    3. '(' → logprob: -1.8092031478881836
    4. ' le' → logprob: -3.8092031478881836
    5. ',' → logprob: -6.809203147888184
    6. ')' → logprob: -7.809203147888184
    7. ' )' → logprob: -7.934203147888184
    8. ' ,' → logprob: -8.434203147888184
    9. '  ' → logprob: -8.684203147888184
    10. '()' → logprob: -8.809203147888184

Token 136: 'on' (ID: 263)
  Prédit: 'le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'le' → logprob: -1.2247015237808228
    2. ' le' → logprob: -1.5997015237808228
    3. ' )' → logprob: -1.7247015237808228
    4. ')' → logprob: -1.8497015237808228
    5. ' wagon' → logprob: -2.099701404571533
    6. 'wagon' → logprob: -3.974701404571533
    7. 'w' → logprob: -5.224701404571533
    8. 'nombre' → logprob: -6.099701404571533
    9. ' nombre' → logprob: -6.099701404571533
    10. 'l' → logprob: -6.099701404571533

Token 137: ' ajoute' (ID: 91611)
  Prédit: ' ajoute'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ajoute' → logprob: -0.380312979221344
    2. ' pousse' → logprob: -2.505312919616699
    3. ' push' → logprob: -2.630312919616699
    4. '.append' → logprob: -3.380312919616699
    5. '.push' → logprob: -3.630312919616699
    6. ' emp' → logprob: -3.880312919616699
    7. ' )' → logprob: -4.005312919616699
    8. ' append' → logprob: -4.380312919616699
    9. 'push' → logprob: -4.755312919616699
    10. ')' → logprob: -5.255312919616699

Token 138: ')' (ID: 8)
  Prédit: ' )'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' )' → logprob: -0.5334814786911011
    2. ')' → logprob: -1.283481478691101
    3. ' ' → logprob: -2.0334815979003906
    4. ' le' → logprob: -5.533481597900391
    5. ' un' → logprob: -7.158481597900391
    6. ' ' → logprob: -8.40848159790039
    7. 'le' → logprob: -8.65848159790039
    8. ' une' → logprob: -8.90848159790039
    9. ' la' → logprob: -9.90848159790039
    10. '(' → logprob: -10.03348159790039

Token 139: ' ce' (ID: 2357)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.004538704175502062
    2. ' le' → logprob: -5.629538536071777
    3. ' un' → logprob: -7.754538536071777
    4. '  ' → logprob: -9.004538536071777
    5. ' ,' → logprob: -9.129538536071777
    6. ' )' → logprob: -9.754538536071777
    7. ',' → logprob: -9.879538536071777
    8. '_' → logprob: -10.379538536071777
    9. ' l' → logprob: -10.504538536071777
    10. ' (' → logprob: -11.129538536071777

Token 140: ' wagon' (ID: 90907)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.012467035092413425
    2. ' wagon' → logprob: -4.637466907501221
    3. ' espace' → logprob: -7.512466907501221
    4. 'n' → logprob: -8.137467384338379
    5. ' )' → logprob: -8.387467384338379
    6. ' nombre' → logprob: -8.762467384338379
    7. '_' → logprob: -8.887467384338379
    8. 's' → logprob: -9.012467384338379
    9. 'wagon' → logprob: -9.137467384338379
    10. ' ' → logprob: -9.137467384338379

Token 141: '.
' (ID: 558)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2656709551811218
    2. ',' → logprob: -2.1406710147857666
    3. '_' → logprob: -3.1406710147857666
    4. '.' → logprob: -3.7656710147857666
    5. ''' → logprob: -4.2656707763671875
    6. ')' → logprob: -5.0156707763671875
    7. 's' → logprob: -5.1406707763671875
    8. ' ,' → logprob: -5.3906707763671875
    9. ' (' → logprob: -5.3906707763671875
    10. '   ' → logprob: -6.1406707763671875

Token 142: '#' (ID: 2)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.722665548324585
    2. '#' → logprob: -1.222665548324585
    3. '   ' → logprob: -1.597665548324585
    4. '
' → logprob: -5.722665786743164
    5. '  ' → logprob: -5.722665786743164
    6. '  
' → logprob: -5.847665786743164
    7. '-' → logprob: -5.972665786743164
    8. ' #' → logprob: -6.222665786743164
    9. ' ' → logprob: -6.347665786743164
    10. '       ' → logprob: -7.972665786743164

Token 143: '  ' (ID: 256)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5632044076919556
    2. ' ' → logprob: -0.9382044076919556
    3. '#' → logprob: -3.813204288482666
    4. ' ' → logprob: -4.813204288482666
    5. '  ' → logprob: -5.063204288482666
    6. ' #' → logprob: -6.938204288482666
    7. '       ' → logprob: -7.438204288482666
    8. '-' → logprob: -8.813204765319824
    9. '  ' → logprob: -8.813204765319824
    10. '	' → logprob: -8.938204765319824

Token 144: ' -' (ID: 533)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.03525938838720322
    2. '  ' → logprob: -3.910259485244751
    3. '-' (adapté à ' -') → logprob: -4.660259246826172
    4. '#' → logprob: -5.535259246826172
    5. ' ' → logprob: -7.535259246826172
    6. '   ' → logprob: -7.785259246826172
    7. ' #' → logprob: -8.660259246826172
    8. ' -' → logprob: -10.410259246826172
    9. '  ' → logprob: -11.285259246826172
    10. ' else' → logprob: -11.410259246826172

Token 145: ' Si' (ID: 7832)
  Prédit: ' Sinon'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Sinon' → logprob: -0.42228779196739197
    2. 'Sinon' → logprob: -1.9222878217697144
    3. ' Si' → logprob: -2.797287702560425
    4. 'Si' → logprob: -2.922287702560425
    5. ' ' → logprob: -3.672287702560425
    6. ' else' → logprob: -3.797287702560425
    7. ' sinon' → logprob: -3.797287702560425
    8. 'else' → logprob: -5.297287940979004
    9. 'sin' → logprob: -5.797287940979004
    10. ' ' → logprob: -6.547287940979004

Token 146: ' le' (ID: 505)
  Prédit: ' le'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' le' → logprob: -0.35324376821517944
    2. ' ' → logprob: -1.2282438278198242
    3. ' nombre' → logprob: -5.853243827819824
    4. ' ' → logprob: -7.353243827819824
    5. 'le' → logprob: -7.728243827819824
    6. 'nombre' → logprob: -8.353243827819824
    7. ' la' → logprob: -9.353243827819824
    8. ' n' → logprob: -9.353243827819824
    9. '  ' → logprob: -9.353243827819824
    10. ' len' → logprob: -9.853243827819824

Token 147: ' nombre' (ID: 9733)
  Prédit: ' nombre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nombre' → logprob: -0.11387356370687485
    2. 'nombre' → logprob: -2.2388734817504883
    3. ' ' → logprob: -7.738873481750488
    4. ' nombres' → logprob: -7.988873481750488
    5. ' numéro' → logprob: -9.238873481750488
    6. ' code' → logprob: -9.863873481750488
    7. 'n' → logprob: -9.863873481750488
    8. ' ' → logprob: -10.613873481750488
    9. 'num' → logprob: -10.988873481750488
    10. ' n' → logprob: -12.113873481750488

Token 148: ' est' (ID: 893)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3572683036327362
    2. ' ==' → logprob: -1.3572683334350586
    3. ' est' → logprob: -3.2322683334350586
    4. '==' → logprob: -6.107268333435059
    5. ' ' → logprob: -7.482268333435059
    6. ' =' → logprob: -7.857268333435059
    7. '=' → logprob: -8.232268333435059
    8. 'est' → logprob: -9.232268333435059
    9. ' vaut' → logprob: -10.857268333435059
    10. ' ===' → logprob: -12.107268333435059

Token 149: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.2015339881181717
    2. ' ' → logprob: -1.7015340328216553
    3. ' égal' → logprob: -9.201534271240234
    4. 'égal' → logprob: -12.326534271240234
    5. ' zéro' → logprob: -12.326534271240234
    6. '=' → logprob: -12.701534271240234
    7. ' ég' → logprob: -12.951534271240234
    8. ' equal' → logprob: -13.201534271240234
    9. ' zero' → logprob: -14.326534271240234
    10. ' ' → logprob: -14.326534271240234

Token 150: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0699644461274147
    2. ' ' → logprob: -2.6949644088745117
    3. '=' → logprob: -10.694964408874512
    4. '==' → logprob: -12.819964408874512
    5. ' ==' → logprob: -13.444964408874512
    6. ' =' → logprob: -15.194964408874512
    7. ' égal' → logprob: -15.319964408874512
    8. '  ' → logprob: -16.069965362548828
    9. 'égal' → logprob: -16.069965362548828
    10. '_' → logprob: -16.694965362548828

Token 151: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.019159240648150444
    2. ':' → logprob: -4.019159317016602
    3. ' ,' → logprob: -7.269159317016602
    4. ' :' → logprob: -9.019159317016602
    5. ' ' → logprob: -9.519159317016602
    6. ':
' → logprob: -9.894159317016602
    7. ',
' → logprob: -10.394159317016602
    8. '   ' → logprob: -11.519159317016602
    9. ' ' → logprob: -11.519159317016602
    10. ':,' → logprob: -12.394159317016602

Token 152: ' on' (ID: 402)
  Prédit: ' on'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' on' → logprob: -0.03471052646636963
    2. 'on' → logprob: -4.15971040725708
    3. ' if' → logprob: -4.28471040725708
    4. ' ' → logprob: -6.78471040725708
    5. ' ' → logprob: -7.03471040725708
    6. ' stack' → logprob: -7.53471040725708
    7. ' pop' → logprob: -7.65971040725708
    8. 'if' → logprob: -7.90971040725708
    9. 'stack' → logprob: -8.034710884094238
    10. 'pop' → logprob: -8.909710884094238

Token 153: ' dép' (ID: 34015)
  Prédit: ' dép'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' dép' → logprob: -0.0029523817356675863
    2. 'd' → logprob: -6.252952575683594
    3. 'dep' → logprob: -7.752952575683594
    4. ' dep' → logprob: -8.377952575683594
    5. 'pop' → logprob: -9.127952575683594
    6. ' pop' → logprob: -9.752952575683594
    7. 'dé' → logprob: -10.002952575683594
    8. ' desemp' → logprob: -10.002952575683594
    9. ' déf' → logprob: -10.252952575683594
    10. 'def' → logprob: -11.127952575683594

Token 154: 'ile' (ID: 554)
  Prédit: 'ile'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ile' → logprob: -0.00570314284414053
    2. 'île' → logprob: -6.755702972412109
    3. ' ile' → logprob: -7.255702972412109
    4. 'ı' → logprob: -7.255702972412109
    5. 'i' → logprob: -8.13070297241211
    6. 'iler' → logprob: -8.13070297241211
    7. '\' → logprob: -8.25570297241211
    8. '**' → logprob: -8.63070297241211
    9. '_' → logprob: -8.69320297241211
    10. 'il' → logprob: -9.06820297241211

Token 155: ' (' (ID: 350)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.514578640460968
    2. ' (' → logprob: -1.3895785808563232
    3. ' ()' → logprob: -2.5145785808563232
    4. '(' → logprob: -2.8895785808563232
    5. ' ' → logprob: -6.264578819274902
    6. ')' → logprob: -6.389578819274902
    7. ' (
' → logprob: -6.514578819274902
    8. ',' → logprob: -6.639578819274902
    9. '.' → logprob: -6.639578819274902
    10. '(
' → logprob: -6.639578819274902

Token 156: 'on' (ID: 263)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.058378905057907104
    2. ' )' → logprob: -2.9333789348602295
    3. 'le' → logprob: -7.55837869644165
    4. '()' → logprob: -7.55837869644165
    5. ' la' → logprob: -7.93337869644165
    6. ' le' → logprob: -8.058379173278809
    7. ' on' → logprob: -8.183379173278809
    8. ' un' → logprob: -8.433379173278809
    9. ' ' → logprob: -8.683379173278809
    10. ')#' → logprob: -8.683379173278809

Token 157: ' enl' (ID: 116494)
  Prédit: ' retire'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' retire' → logprob: -0.9866268634796143
    2. 'sort' → logprob: -1.4866268634796143
    3. 'sup' → logprob: -2.1116268634796143
    4. ' sort' → logprob: -2.4866268634796143
    5. ')' → logprob: -2.9866268634796143
    6. ' sup' → logprob: -3.2366268634796143
    7. ' enl' → logprob: -3.2366268634796143
    8. 'ret' → logprob: -3.7366268634796143
    9. 'pop' → logprob: -4.486626625061035
    10. 'en' → logprob: -4.861626625061035

Token 158: 'ève' (ID: 41151)
  Prédit: 'ève'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ève' → logprob: -0.021737772971391678
    2. 'e' → logprob: -4.271737575531006
    3. 'eve' → logprob: -5.021737575531006
    4. 'è' → logprob: -7.646737575531006
    5. 'a' → logprob: -8.521738052368164
    6. 'ace' → logprob: -8.646738052368164
    7. 'èv' → logprob: -11.271738052368164
    8. 've' → logprob: -11.521738052368164
    9. '`' → logprob: -11.646738052368164
    10. 'èves' → logprob: -11.896738052368164

Token 159: ' et' (ID: 859)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.022189222276210785
    2. ' )' → logprob: -4.772189140319824
    3. 'le' → logprob: -5.147189140319824
    4. ' un' → logprob: -5.522189140319824
    5. ' le' → logprob: -5.772189140319824
    6. ' ' → logprob: -8.647189140319824
    7. 'un' → logprob: -8.772189140319824
    8. ' ' → logprob: -9.147189140319824
    9. '()' → logprob: -9.522189140319824
    10. 'a' → logprob: -11.272189140319824

Token 160: ' récup' (ID: 62856)
  Prédit: ' affiche'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' affiche' → logprob: -0.22622258961200714
    2. ' retourne' → logprob: -2.226222515106201
    3. ' ren' → logprob: -3.101222515106201
    4. ' récup' → logprob: -3.476222515106201
    5. 'aff' → logprob: -4.476222515106201
    6. ' vér' → logprob: -6.101222515106201
    7. ' return' → logprob: -7.226222515106201
    8. ' imprime' → logprob: -7.476222515106201
    9. 'ren' → logprob: -7.726222515106201
    10. 'return' → logprob: -7.976222515106201

Token 161: 'ère' (ID: 4346)
  Prédit: 'ère'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ère' → logprob: -0.030482104048132896
    2. 'è' → logprob: -3.530482053756714
    3. '`' → logprob: -8.405482292175293
    4. 'e' → logprob: -9.155482292175293
    5. '�' → logprob: -9.780482292175293
    6. 'à' → logprob: -10.030482292175293
    7. 'èr' → logprob: -10.030482292175293
    8. 'ere' → logprob: -10.280482292175293
    9. 'ére' → logprob: -10.280482292175293
    10. '\' → logprob: -10.405482292175293

Token 162: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.042784035205841064
    2. 'le' → logprob: -3.9177839756011963
    3. ' )' → logprob: -4.417784214019775
    4. ' le' → logprob: -4.792784214019775
    5. ' un' → logprob: -6.917784214019775
    6. ' ' → logprob: -8.292783737182617
    7. ' ' → logprob: -8.542783737182617
    8. 'un' → logprob: -8.792783737182617
    9. 'l' → logprob: -10.292783737182617
    10. ' la' → logprob: -12.167783737182617

Token 163: ' un' (ID: 537)
  Prédit: ' un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.3346027433872223
    2. ' le' → logprob: -1.7096027135849
    3. 'le' → logprob: -2.7096028327941895
    4. ' ' → logprob: -3.8346028327941895
    5. 'un' → logprob: -5.2096028327941895
    6. '()' → logprob: -5.5846028327941895
    7. ')' → logprob: -6.5846028327941895
    8. '(' → logprob: -7.0846028327941895
    9. ' ' → logprob: -7.2096028327941895
    10. ' )' → logprob: -7.4596028327941895

Token 164: ' wagon' (ID: 90907)
  Prédit: ' wagon'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' wagon' → logprob: -0.0739481970667839
    2. 'wagon' → logprob: -2.6989481449127197
    3. ' wag' → logprob: -7.198948383331299
    4. 'w' → logprob: -7.323948383331299
    5. ' ' → logprob: -7.823948383331299
    6. ')' → logprob: -7.823948383331299
    7. 'e' → logprob: -7.948948383331299
    8. 'wag' → logprob: -7.948948383331299
    9. ' ' → logprob: -8.19894790649414
    10. ' )' → logprob: -8.44894790649414

Token 165: ' et' (ID: 859)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.11674080789089203
    2. ',' → logprob: -2.6167407035827637
    3. ' ' → logprob: -4.866740703582764
    4. '()' → logprob: -4.991740703582764
    5. ')' → logprob: -5.866740703582764
    6. '<|end|>' → logprob: -5.991740703582764
    7. ' (' → logprob: -6.366740703582764
    8. '#' → logprob: -6.366740703582764
    9. '
' → logprob: -6.366740703582764
    10. ' et' → logprob: -6.616740703582764

Token 166: ' on' (ID: 402)
  Prédit: ' l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.2686181962490082
    2. ' affiche' → logprob: -1.8936182260513306
    3. ' le' → logprob: -3.143618106842041
    4. ' print' → logprob: -3.518618106842041
    5. ' imprime' → logprob: -5.643618106842041
    6. ' ' → logprob: -5.768618106842041
    7. 'print' → logprob: -6.143618106842041
    8. ' retourne' → logprob: -7.143618106842041
    9. ' on' → logprob: -7.393618106842041
    10. ' affich' → logprob: -7.518618106842041

Token 167: ' l' (ID: 305)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.1635633260011673
    2. 'print' → logprob: -2.2885632514953613
    3. ' affiche' → logprob: -3.6635632514953613
    4. ' imprime' → logprob: -4.538563251495361
    5. ' l' → logprob: -4.788563251495361
    6. ' ' → logprob: -6.413563251495361
    7. ' le' → logprob: -6.913563251495361
    8. 'aff' → logprob: -7.288563251495361
    9. ' affich' → logprob: -8.28856372833252
    10. '_print' → logprob: -8.66356372833252

Token 168: ''aff' (ID: 53397)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.1627979278564453
    2. ''aff' → logprob: -1.6627979278564453
    3. 'e' → logprob: -1.7877979278564453
    4. 'a' → logprob: -2.2877979278564453
    5. ''aj' → logprob: -3.2877979278564453
    6. 'aj' → logprob: -3.6627979278564453
    7. 'é' → logprob: -3.9127979278564453
    8. ' print' → logprob: -4.662797927856445
    9. ' affiche' → logprob: -4.662797927856445
    10. ''' → logprob: -4.787797927856445

Token 169: 'iche' (ID: 7509)
  Prédit: 'iche'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iche' → logprob: -0.17257905006408691
    2. 'ic' → logprob: -2.047579050064087
    3. 'i' → logprob: -3.797579050064087
    4. 'ich' → logprob: -5.547578811645508
    5. 'che' → logprob: -7.047578811645508
    6. 'icher' → logprob: -7.422578811645508
    7. 'ichage' → logprob: -7.547578811645508
    8. '#' → logprob: -9.047578811645508
    9. '```' → logprob: -9.047578811645508
    10. 'ichel' → logprob: -9.547578811645508

Token 170: '.
' (ID: 558)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.11928897351026535
    2. 'def' → logprob: -2.494288921356201
    3. '

' → logprob: -3.869288921356201
    4. '```' → logprob: -5.494288921356201
    5. '
' → logprob: -6.119288921356201
    6. '\n' → logprob: -6.994288921356201
    7. 'n' → logprob: -7.494288921356201
    8. 'import' → logprob: -8.61928939819336
    9. '\' → logprob: -8.99428939819336
    10. '' → logprob: -8.99428939819336

Token 171: '#' (ID: 2)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0349075123667717
    2. '
' → logprob: -3.659907579421997
    3. '```' → logprob: -5.034907341003418
    4. 'n' → logprob: -6.909907341003418
    5. 'import' → logprob: -8.159907341003418
    6. '\n' → logprob: -8.659907341003418
    7. '\' → logprob: -9.284907341003418
    8. ' 
' → logprob: -9.409907341003418
    9. '#' → logprob: -9.659907341003418
    10. '  
' → logprob: -9.909907341003418

Token 172: ' 
' (ID: 793)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.5103580951690674
    2. '
' → logprob: -1.0103580951690674
    3. '```' → logprob: -3.3853580951690674
    4. '\n' → logprob: -7.635357856750488
    5. '

' → logprob: -8.260357856750488
    6. '``' → logprob: -8.385357856750488
    7. 'n' → logprob: -8.760357856750488
    8. '\' → logprob: -9.135357856750488
    9. 'import' → logprob: -9.135357856750488
    10. 'stack' → logprob: -9.510357856750488

Token 173: '#' (ID: 2)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.011186701245605946
    2. '```' → logprob: -4.886186599731445
    3. 'w' → logprob: -7.011186599731445
    4. 'n' → logprob: -7.011186599731445
    5. '
' → logprob: -7.261186599731445
    6. 'wagon' → logprob: -7.386186599731445
    7. 'stack' → logprob: -8.636186599731445
    8. '``' → logprob: -9.886186599731445
    9. 'import' → logprob: -10.386186599731445
    10. 'wag' → logprob: -10.511186599731445

Token 174: ' Cette' (ID: 27383)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.002098156837746501
    2. '```' → logprob: -6.377098083496094
    3. 'stack' → logprob: -8.752098083496094
    4. 'd' → logprob: -9.127098083496094
    5. 'n' → logprob: -10.127098083496094
    6. 'class' → logprob: -10.377098083496094
    7. 'dé' → logprob: -11.252098083496094
    8. 'import' → logprob: -11.377098083496094
    9. 'from' → logprob: -11.502098083496094
    10. 'de' → logprob: -11.752098083496094

Token 175: ' approche' (ID: 102373)
  Prédit: ' solution'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' solution' → logprob: -0.6062106490135193
    2. ' code' → logprob: -1.106210708618164
    3. ' implementation' → logprob: -3.481210708618164
    4. ' ' → logprob: -4.231210708618164
    5. ' logique' → logprob: -4.481210708618164
    6. ' approche' → logprob: -4.606210708618164
    7. ' def' → logprob: -5.356210708618164
    8. ' simulation' → logprob: -5.356210708618164
    9. ' 
' → logprob: -5.481210708618164
    10. ' stack' → logprob: -5.606210708618164

Token 176: ' respecte' (ID: 140483)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.253848671913147
    2. ' :' → logprob: -2.7538485527038574
    3. '.' → logprob: -3.6288485527038574
    4. ' est' → logprob: -3.7538485527038574
    5. ' se' → logprob: -3.8788485527038574
    6. ':' → logprob: -4.003848552703857
    7. ',' → logprob: -4.378848552703857
    8. 'def' → logprob: -4.628848552703857
    9. '_' → logprob: -4.878848552703857
    10. ' ,' → logprob: -5.003848552703857

Token 177: ' la' (ID: 557)
  Prédit: ' l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.38207095861434937
    2. ' le' → logprob: -1.6320710182189941
    3. ' la' → logprob: -2.132071018218994
    4. 'le' → logprob: -6.257071018218994
    5. ' les' → logprob: -7.507071018218994
    6. 'l' → logprob: -7.632071018218994
    7. ' ' → logprob: -8.507070541381836
    8. ' ' → logprob: -8.882070541381836
    9. 'la' → logprob: -10.257070541381836
    10. ' strict' → logprob: -10.507070541381836

Token 178: ' contr' (ID: 6030)
  Prédit: ' logique'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' logique' → logprob: -0.5114483833312988
    2. ' L' → logprob: -2.011448383331299
    3. ' nature' → logprob: -2.511448383331299
    4. 'log' → logprob: -3.261448383331299
    5. ' log' → logprob: -3.261448383331299
    6. 'L' → logprob: -3.386448383331299
    7. 'pile' → logprob: -4.011448383331299
    8. ' pile' → logprob: -4.511448383331299
    9. ' structure' → logprob: -5.011448383331299
    10. 'nature' → logprob: -5.136448383331299

Token 179: 'ainte' (ID: 48434)
  Prédit: 'ainte'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ainte' → logprob: -0.0015116469003260136
    2. 'a' → logprob: -7.251511573791504
    3. 'aint' → logprob: -7.251511573791504
    4. 'ain' → logprob: -10.251511573791504
    5. 'ôle' → logprob: -11.501511573791504
    6. 'ait' → logprob: -11.751511573791504
    7. 'aine' → logprob: -11.876511573791504
    8. '#' → logprob: -12.126511573791504
    9. 'aints' → logprob: -12.376511573791504
    10. 'ai' → logprob: -12.501511573791504

Token 180: ' donnée' (ID: 130126)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.3768528401851654
    2. ' d' → logprob: -1.2518528699874878
    3. ' du' → logprob: -4.126852989196777
    4. ' ' → logprob: -5.501852989196777
    5. ' que' → logprob: -5.876852989196777
    6. ' des' → logprob: -6.251852989196777
    7. 's' → logprob: -7.251852989196777
    8. '#' → logprob: -8.251852989196777
    9. 'de' → logprob: -8.251852989196777
    10. 'd' → logprob: -8.251852989196777

Token 181: ' :' (ID: 712)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -1.106581687927246
    2. ' de' → logprob: -1.606581687927246
    3. ',' → logprob: -1.856581687927246
    4. ':' → logprob: -2.231581687927246
    5. ' :' → logprob: -2.356581687927246
    6. ' d' → logprob: -2.981581687927246
    7. 'import' → logprob: -4.481581687927246
    8. 's' → logprob: -4.481581687927246
    9. ' ' → logprob: -4.731581687927246
    10. ' ,' → logprob: -4.981581687927246

Token 182: ' un' (ID: 537)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.10040432214736938
    2. '```' → logprob: -2.6004042625427246
    3. ' la' → logprob: -4.850404262542725
    4. '#' → logprob: -5.600404262542725
    5. 'import' → logprob: -6.100404262542725
    6. ' def' → logprob: -6.225404262542725
    7. 'from' → logprob: -6.850404262542725
    8. 'n' → logprob: -6.975404262542725
    9. 'la' → logprob: -7.600404262542725
    10. ' ' → logprob: -8.100404739379883

Token 183: ' ' (ID: 220)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.08059602975845337
    2. ' wagon' → logprob: -3.5805959701538086
    3. ' e' → logprob: -4.205595970153809
    4. ' espace' → logprob: -4.705595970153809
    5. 'a' → logprob: -4.830595970153809
    6. 'es' → logprob: -5.580595970153809
    7. 's' → logprob: -6.580595970153809
    8. ' stack' → logprob: -7.018095970153809
    9. ' a' → logprob: -7.080595970153809
    10. ' wag' → logprob: -7.205595970153809

Token 184: '0' (ID: 15)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.4624248147010803
    2. ' wagon' → logprob: -2.5874247550964355
    3. 'es' → logprob: -2.7124247550964355
    4. 'wagon' → logprob: -2.9624247550964355
    5. 'stack' → logprob: -3.0874247550964355
    6. 'ent' → logprob: -4.0874247550964355
    7. 's' → logprob: -4.4624247550964355
    8. ' stack' → logprob: -4.8374247550964355
    9. 'pile' → logprob: -4.8374247550964355
    10. 'a' → logprob: -4.8999247550964355

Token 185: ' n' (ID: 297)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.028298966586589813
    2. ' indique' → logprob: -4.903298854827881
    3. ' n' → logprob: -5.278298854827881
    4. ' signifie' → logprob: -5.903298854827881
    5. '  ' → logprob: -6.653298854827881
    6. ' est' → logprob: -6.903298854827881
    7. ' 
' → logprob: -7.028298854827881
    8. ',' → logprob: -7.028298854827881
    9. ' is' → logprob: -7.153298854827881
    10. '  
' → logprob: -7.278298854827881

Token 186: ''est' (ID: 6616)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.5905010104179382
    2. ''' → logprob: -0.9655010104179382
    3. ''ind' → logprob: -3.715501070022583
    4. ''emp' → logprob: -4.465500831604004
    5. ' '' → logprob: -4.965500831604004
    6. ''est' → logprob: -5.590500831604004
    7. ' signifie' → logprob: -5.715500831604004
    8. ''ent' → logprob: -5.715500831604004
    9. ''app' → logprob: -6.215500831604004
    10. ''é' → logprob: -6.965500831604004

Token 187: ' jamais' (ID: 23077)
  Prédit: 'pas'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pas' → logprob: -0.6760770082473755
    2. ' jamais' → logprob: -1.5510770082473755
    3. ' pas' → logprob: -2.176076889038086
    4. 'su' → logprob: -2.176076889038086
    5. 'jam' → logprob: -3.301076889038086
    6. ' suivi' → logprob: -4.926076889038086
    7. 's' → logprob: -6.801076889038086
    8. ' rencontré' → logprob: -6.926076889038086
    9. 'tou' → logprob: -6.926076889038086
    10. ' toujours' → logprob: -7.301076889038086

Token 188: ' donné' (ID: 52079)
  Prédit: 'su'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'su' → logprob: -0.16407345235347748
    2. ' suivi' → logprob: -2.1640734672546387
    3. ' placé' → logprob: -4.414073467254639
    4. ' rencontré' → logprob: -4.914073467254639
    5. 'enc' → logprob: -6.039073467254639
    6. ' suiv' → logprob: -6.414073467254639
    7. 'prés' → logprob: -6.414073467254639
    8. 'en' → logprob: -6.664073467254639
    9. 'introdu' → logprob: -7.289073467254639
    10. 'le' → logprob: -7.414073467254639

Token 189: ' si' (ID: 1784)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -1.5127638578414917
    2. ' sans' → logprob: -1.6377638578414917
    3. '.' → logprob: -1.7627638578414917
    4. 's' → logprob: -2.6377639770507812
    5. ' ' → logprob: -3.2627639770507812
    6. ' n' → logprob: -3.6377639770507812
    7. 'n' → logprob: -3.7627639770507812
    8. ' ,' → logprob: -3.7627639770507812
    9. 'e' → logprob: -4.012763977050781
    10. '```' → logprob: -4.012763977050781

Token 190: ' la' (ID: 557)
  Prédit: 'la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'la' → logprob: -0.2888524830341339
    2. ' la' → logprob: -2.0388524532318115
    3. 'il' → logprob: -2.4138524532318115
    4. 'pile' → logprob: -3.7888524532318115
    5. 'auc' → logprob: -5.413852691650391
    6. ' pile' → logprob: -6.288852691650391
    7. ' il' → logprob: -7.038852691650391
    8. ' aucune' → logprob: -8.16385269165039
    9. '```' → logprob: -8.53885269165039
    10. 'stack' → logprob: -8.78885269165039

Token 191: ' voie' (ID: 73615)
  Prédit: 'pile'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pile' → logprob: -0.6090357899665833
    2. ' pile' → logprob: -0.9840357899665833
    3. ' stack' → logprob: -2.9840357303619385
    4. 'stack' → logprob: -3.8590357303619385
    5. ' wagon' → logprob: -5.609035968780518
    6. 'p' → logprob: -6.484035968780518
    7. '#' → logprob: -6.859035968780518
    8. 'tas' → logprob: -7.109035968780518
    9. 'wagon' → logprob: -7.484035968780518
    10. ' tas' → logprob: -7.984035968780518

Token 192: ' est' (ID: 893)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.13911013305187225
    2. ' est' → logprob: -2.3891100883483887
    3. 'n' → logprob: -3.7641100883483887
    4. ' vide' → logprob: -5.514110088348389
    5. ' ' → logprob: -5.764110088348389
    6. 'est' → logprob: -6.264110088348389
    7. ' de' → logprob: -6.389110088348389
    8. 'vide' → logprob: -6.889110088348389
    9. ' ne' → logprob: -7.514110088348389
    10. ' d' → logprob: -8.139110565185547

Token 193: ' vide' (ID: 21835)
  Prédit: 'vide'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'vide' → logprob: -0.5775170922279358
    2. ' vide' → logprob: -0.8275170922279358
    3. ' empty' → logprob: -7.202517032623291
    4. 'empty' → logprob: -8.07751750946045
    5. 'v' → logprob: -8.70251750946045
    6. 'vid' → logprob: -9.95251750946045
    7. ' v' → logprob: -10.20251750946045
    8. ' jamais' → logprob: -10.57751750946045
    9. ' pas' → logprob: -10.70251750946045
    10. '<|end|>' → logprob: -10.82751750946045

Token 194: '.
' (ID: 558)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.5769026279449463
    2. 'def' → logprob: -0.9519026279449463
    3. '

' → logprob: -3.0769026279449463
    4. '```' → logprob: -5.451902389526367
    5. '
' → logprob: -7.076902389526367
    6. '\n' → logprob: -8.076902389526367
    7. 'n' → logprob: -8.576902389526367
    8. 'class' → logprob: -8.576902389526367
    9. '


' → logprob: -9.576902389526367
    10. '\' → logprob: -9.576902389526367

Token 195: '#' (ID: 2)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.3139636218547821
    2. 'def' → logprob: -1.4389636516571045
    3. '```' → logprob: -3.6889636516571045
    4. '

' → logprob: -5.438963413238525
    5. '
' → logprob: -7.063963413238525
    6. '\n' → logprob: -7.313963413238525
    7. 'w' → logprob: -7.688963413238525
    8. 'stack' → logprob: -7.938963413238525
    9. 'class' → logprob: -8.688963890075684
    10. '``' → logprob: -9.313963890075684

Token 196: ' 
' (ID: 793)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.64361971616745
    2. '
' → logprob: -0.76861971616745
    3. '```' → logprob: -5.018619537353516
    4. '

' → logprob: -6.018619537353516
    5. '\n' → logprob: -7.143619537353516
    6. 'import' → logprob: -7.393619537353516
    7. 'n' → logprob: -9.143619537353516
    8. '
' → logprob: -9.768619537353516
    9. '\' → logprob: -9.768619537353516
    10. ' 
' → logprob: -9.893619537353516

Token 197: '#' (ID: 2)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0010178061202168465
    2. '```' → logprob: -7.5010175704956055
    3. 'stack' → logprob: -8.001017570495605
    4. 'class' → logprob: -9.876017570495605
    5. 'n' → logprob: -10.751017570495605
    6. 'w' → logprob: -10.876017570495605
    7. 'd' → logprob: -11.501017570495605
    8. 'pile' → logprob: -11.876017570495605
    9. 'wagon' → logprob: -12.251017570495605
    10. 'dé' → logprob: -12.376017570495605

Token 198: ' Le' (ID: 2018)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.2687038481235504
    2. 'stack' → logprob: -1.643703818321228
    3. 'wag' → logprob: -4.393703937530518
    4. 'wagon' → logprob: -4.393703937530518
    5. 'w' → logprob: -4.518703937530518
    6. 'pile' → logprob: -5.643703937530518
    7. '```' → logprob: -6.018703937530518
    8. 'class' → logprob: -7.643703937530518
    9. 'n' → logprob: -10.39370346069336
    10. '#' → logprob: -10.39370346069336

Token 199: ' programme' (ID: 18190)
  Prédit: ' code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' code' → logprob: -0.699246883392334
    2. ' d' → logprob: -1.199246883392334
    3. ' def' → logprob: -2.449246883392334
    4. 'def' → logprob: -2.949246883392334
    5. ' stack' → logprob: -3.824246883392334
    6. 'd' → logprob: -4.074246883392334
    7. 's' → logprob: -4.949246883392334
    8. ' ' → logprob: -5.699246883392334
    9. ' 
' → logprob: -6.324246883392334
    10. ' s' → logprob: -6.949246883392334

Token 200: ' s' (ID: 265)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.33577486872673035
    2. ' :' → logprob: -2.0857748985290527
    3. ':' → logprob: -3.0857748985290527
    4. '_' → logprob: -3.7107748985290527
    5. 's' → logprob: -4.335774898529053
    6. ' s' → logprob: -4.335774898529053
    7. ' ' → logprob: -4.335774898529053
    8. ' =' → logprob: -4.460774898529053
    9. ' n' → logprob: -5.335774898529053
    10. ' est' → logprob: -5.335774898529053

Token 201: ''arr' (ID: 49695)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'u' → logprob: -1.4431143999099731
    2. 'uit' → logprob: -1.4431143999099731
    3. 'uite' → logprob: -1.5681143999099731
    4. 'e' → logprob: -2.1931142807006836
    5. 'ui' → logprob: -2.6931142807006836
    6. 't' → logprob: -3.0681142807006836
    7. ' '' → logprob: -4.068114280700684
    8. ''' → logprob: -4.568114280700684
    9. ' =' → logprob: -4.818114280700684
    10. 'uis' → logprob: -4.818114280700684

Token 202: 'ête' (ID: 16808)
  Prédit: 'ête'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ête' → logprob: -0.10533107072114944
    2. 'êt' → logprob: -2.3553311824798584
    3. 'ê' → logprob: -5.355330944061279
    4. 'ète' → logprob: -8.855331420898438
    5. 'êtes' → logprob: -8.980331420898438
    6. 'êter' → logprob: -9.855331420898438
    7. 'êts' → logprob: -9.980331420898438
    8. 'é' → logprob: -11.980331420898438
    9. 'e' → logprob: -12.355331420898438
    10. 'et' → logprob: -12.605331420898438

Token 203: ' naturellement' (ID: 137178)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.22572551667690277
    2. ' dès' → logprob: -2.7257254123687744
    3. ' lorsqu' → logprob: -2.7257254123687744
    4. ' lorsque' → logprob: -3.6007254123687744
    5. '.' → logprob: -4.1007256507873535
    6. ' à' → logprob: -4.4757256507873535
    7. ' when' → logprob: -5.2257256507873535
    8. ' lors' → logprob: -5.8507256507873535
    9. ' upon' → logprob: -7.3507256507873535
    10. ':' → logprob: -7.3507256507873535

Token 204: ' à' (ID: 1221)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.2238735407590866
    2. '

' → logprob: -1.848873496055603
    3. 'stack' → logprob: -4.348873615264893
    4. '```' → logprob: -4.848873615264893
    5. 'def' → logprob: -4.973873615264893
    6. '\n' → logprob: -5.598873615264893
    7. 'n' → logprob: -5.723873615264893
    8. 'import' → logprob: -5.723873615264893
    9. '
' → logprob: -7.473873615264893
    10. ':' → logprob: -7.473873615264893

Token 205: ' la' (ID: 557)
  Prédit: ' EOF'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' EOF' → logprob: -0.49491074681282043
    2. ' la' → logprob: -0.994910717010498
    3. 'EOF' → logprob: -4.494910717010498
    4. 'la' → logprob: -5.369910717010498
    5. ' ' → logprob: -6.494910717010498
    6. ' l' → logprob: -6.619910717010498
    7. ' une' → logprob: -6.619910717010498
    8. 'l' → logprob: -8.119911193847656
    9. ' ' → logprob: -9.244911193847656
    10. ' un' → logprob: -10.369911193847656

Token 206: ' fin' (ID: 2131)
  Prédit: 'fin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'fin' → logprob: -0.2527611255645752
    2. ' fin' → logprob: -1.8777611255645752
    3. ' EOF' → logprob: -3.377761125564575
    4. 'EOF' → logprob: -4.127760887145996
    5. 'n' → logprob: -4.627760887145996
    6. 'f' → logprob: -4.877760887145996
    7. '```' → logprob: -7.752760887145996
    8. '#' → logprob: -8.002760887145996
    9. 'prem' → logprob: -8.502760887145996
    10. ' ' → logprob: -8.502760887145996

Token 207: ' des' (ID: 731)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.032098934054374695
    2. '

' → logprob: -3.5320990085601807
    3. '\n' → logprob: -7.407098770141602
    4. '
' → logprob: -7.907098770141602
    5. 'import' → logprob: -7.907098770141602
    6. 'def' → logprob: -7.907098770141602
    7. '```' → logprob: -8.157098770141602
    8. 'n' → logprob: -9.157098770141602
    9. '
 
' → logprob: -9.657098770141602
    10. 's' → logprob: -10.657098770141602

Token 208: ' entr' (ID: 7072)
  Prédit: 'entrée'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'entrée' → logprob: -0.3895398676395416
    2. 'f' → logprob: -2.264539957046509
    3. ' données' → logprob: -3.514539957046509
    4. 'l' → logprob: -3.514539957046509
    5. 'entr' → logprob: -3.514539957046509
    6. 'input' → logprob: -3.639539957046509
    7. ' entr' → logprob: -3.639539957046509
    8. ' input' → logprob: -3.639539957046509
    9. '_' → logprob: -5.01453971862793
    10. 'inputs' → logprob: -5.01453971862793

Token 209: 'ées' (ID: 5161)
  Prédit: 'ées'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ées' → logprob: -0.5777029395103455
    2. 'ée' → logprob: -0.8277029395103455
    3. 'é' → logprob: -6.45270299911499
    4. 'és' → logprob: -8.827702522277832
    5. '#' → logprob: -11.077702522277832
    6. 'ee' → logprob: -12.327702522277832
    7. '```' → logprob: -12.327702522277832
    8. 'er' → logprob: -12.827702522277832
    9. 'è' → logprob: -13.202702522277832
    10. 'es' → logprob: -13.577702522277832

Token 210: ' (' (ID: 350)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.8711975812911987
    2. 'w' → logprob: -1.1211975812911987
    3. 'stack' → logprob: -2.2461977005004883
    4. 'def' → logprob: -2.8711977005004883
    5. '```' → logprob: -3.2461977005004883
    6. 'n' → logprob: -4.246197700500488
    7. 'wagon' → logprob: -4.371197700500488
    8. 'wag' → logprob: -4.871197700500488
    9. '#' → logprob: -5.621197700500488
    10. '\n' → logprob: -5.871197700500488

Token 211: 'moins' (ID: 85882)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.020840002223849297
    2. ' )' → logprob: -4.145840167999268
    3. ').' → logprob: -5.770840167999268
    4. 'import' → logprob: -7.895840167999268
    5. '")' → logprob: -8.14583969116211
    6. '):' → logprob: -8.39583969116211
    7. '#' → logprob: -8.77083969116211
    8. '```' → logprob: -8.89583969116211
    9. '.' → logprob: -9.77083969116211
    10. 'def' → logprob: -9.89583969116211

Token 212: ' de' (ID: 334)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7179214358329773
    2. '1' → logprob: -1.092921495437622
    3. '=[]' → logprob: -3.092921495437622
    4. '[]' → logprob: -3.342921495437622
    5. ' de' → logprob: -3.717921495437622
    6. ' ' → logprob: -4.217921257019043
    7. ' []' → logprob: -4.717921257019043
    8. '_' → logprob: -4.717921257019043
    9. ' )' → logprob: -4.842921257019043
    10. ' [])' → logprob: -5.217921257019043

Token 213: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.07744568586349487
    2. ' ' → logprob: -3.2024457454681396
    3. '100' → logprob: -4.9524455070495605
    4. 'une' → logprob: -5.2024455070495605
    5. '[]' → logprob: -5.4524455070495605
    6. 'un' → logprob: -6.5774455070495605
    7. ')' → logprob: -6.7024455070495605
    8. ' une' → logprob: -6.7024455070495605
    9. ' EOF' → logprob: -7.0774455070495605
    10. 'import' → logprob: -7.0774455070495605

Token 214: '100' (ID: 1353)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.15430641174316406
    2. '0' → logprob: -3.279306411743164
    3. '100' → logprob: -3.654306411743164
    4. '2' → logprob: -3.779306411743164
    5. ' ' → logprob: -4.154306411743164
    6. '10' → logprob: -4.904306411743164
    7. 'une' → logprob: -5.154306411743164
    8. '5' → logprob: -5.529306411743164
    9. '3' → logprob: -5.654306411743164
    10. 'un' → logprob: -5.904306411743164

Token 215: ' lignes' (ID: 81687)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.2441301792860031
    2. '0' → logprob: -1.9941301345825195
    3. ' )' → logprob: -2.9941301345825195
    4. '%' → logprob: -4.6191301345825195
    5. ' caractères' → logprob: -5.2441301345825195
    6. ' lignes' → logprob: -5.9941301345825195
    7. '%)' → logprob: -6.3691301345825195
    8. 'car' → logprob: -6.4941301345825195
    9. ' entr' → logprob: -6.6191301345825195
    10. '\n' → logprob: -6.6191301345825195

Token 216: ').

' (ID: 3991)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.30717185139656067
    2. '\n' → logprob: -2.5571718215942383
    3. '
' → logprob: -3.3071718215942383
    4. '.' → logprob: -3.4321718215942383
    5. ')
' → logprob: -3.5571718215942383
    6. ').' → logprob: -4.557171821594238
    7. '\' → logprob: -4.682171821594238
    8. '#' → logprob: -4.682171821594238
    9. 'def' → logprob: -5.057171821594238
    10. '")' → logprob: -5.182171821594238

Token 217: 'def' (ID: 1314)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.43406182527542114
    2. 'w' → logprob: -2.0590617656707764
    3. 'wag' → logprob: -2.4340617656707764
    4. 'wagon' → logprob: -2.5590617656707764
    5. 'def' → logprob: -3.5590617656707764
    6. '```' → logprob: -4.0590620040893555
    7. '
' → logprob: -5.3090620040893555
    8. 'n' → logprob: -5.6840620040893555
    9. 'pile' → logprob: -6.5590620040893555
    10. '#' → logprob: -6.9340620040893555

Token 218: ' main' (ID: 2758)
  Prédit: ' simulate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' simulate' → logprob: -0.5244141817092896
    2. ' switching' → logprob: -2.0244140625
    3. ' solution' → logprob: -2.6494140625
    4. ' main' → logprob: -2.8994140625
    5. ' switch' → logprob: -3.0244140625
    6. ' simulation' → logprob: -3.3994140625
    7. ' sim' → logprob: -3.5244140625
    8. 'simulate' → logprob: -4.6494140625
    9. ' stack' → logprob: -5.0244140625
    10. ' process' → logprob: -5.1494140625

Token 219: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -3.1186566047836095e-05
    2. ' ():' → logprob: -10.875031471252441
    3. '()' → logprob: -11.750031471252441
    4. '():
' → logprob: -12.500031471252441
    5. '(' → logprob: -14.875031471252441
    6. ':' → logprob: -15.750031471252441
    7. '():
' → logprob: -16.875030517578125
    8. ' ()' → logprob: -18.375030517578125
    9. '():

' → logprob: -18.375030517578125
    10. '(":' → logprob: -18.750030517578125

Token 220: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04022139310836792
    2. '	stack' → logprob: -3.5402214527130127
    3. ' stack' → logprob: -5.165221214294434
    4. 'stack' → logprob: -5.790221214294434
    5. '   ' → logprob: -7.790221214294434
    6. '_stack' → logprob: -8.165221214294434
    7. '    
' → logprob: -8.915221214294434
    8. '	import' → logprob: -9.040221214294434
    9. ' indentation' → logprob: -9.165221214294434
    10. 'import' → logprob: -9.540221214294434

Token 221: ' import' (ID: 1588)
  Prédit: ' stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.28345829248428345
    2. 'stack' → logprob: -1.4084582328796387
    3. '   ' → logprob: -6.658458232879639
    4. ' wag' → logprob: -8.033458709716797
    5. '	stack' → logprob: -8.533458709716797
    6. ' pile' → logprob: -9.033458709716797
    7. ' wagon' → logprob: -9.033458709716797
    8. 'pile' → logprob: -10.033458709716797
    9. 'import' (adapté à ' import') → logprob: -10.158458709716797
    10. 'wagon' → logprob: -10.283458709716797

Token 222: ' sys' (ID: 12228)
  Prédit: ' sys'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sys' → logprob: -0.16022564470767975
    2. 'sys' → logprob: -1.9102256298065186
    3. '	sys' → logprob: -14.160225868225098
    4. '=sys' → logprob: -14.410225868225098
    5. 'collections' → logprob: -16.66022491455078
    6. '(sys' → logprob: -16.91022491455078
    7. '_sys' → logprob: -17.41022491455078
    8. 's' → logprob: -18.28522491455078
    9. ' collections' → logprob: -19.03522491455078
    10. '_' → logprob: -19.28522491455078

Token 223: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.2970813810825348
    2. '   ' → logprob: -1.4220813512802124
    3. '    
' → logprob: -4.172081470489502
    4. 'stack' → logprob: -8.422080993652344
    5. 'for' → logprob: -9.797080993652344
    6. '
' → logprob: -10.797080993652344
    7. '

' → logprob: -11.172080993652344
    8. 's' → logprob: -11.547080993652344
    9. ' 
' → logprob: -11.922080993652344
    10. ' stack' → logprob: -12.172080993652344

Token 224: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0016228145686909556
    2. 'stack' → logprob: -7.126622676849365
    3. '    
' → logprob: -7.376622676849365
    4. '
' → logprob: -8.876623153686523
    5. ' stack' → logprob: -10.376623153686523
    6. '   ' → logprob: -12.251623153686523
    7. '    ' → logprob: -12.626623153686523
    8. 's' → logprob: -13.126623153686523
    9. '   
' → logprob: -13.376623153686523
    10. '	stack' → logprob: -13.501623153686523

Token 225: ' stack' (ID: 10825)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' (adapté à ' stack') → logprob: -0.0025267915334552526
    2. 'pile' → logprob: -6.377526760101318
    3. '   ' → logprob: -7.627526760101318
    4. ' stack' → logprob: -8.877527236938477
    5. 'rail' → logprob: -9.877527236938477
    6. 'wagon' → logprob: -9.877527236938477
    7. 'car' → logprob: -11.252527236938477
    8. 'train' → logprob: -11.252527236938477
    9. 's' → logprob: -11.252527236938477
    10. 'for' → logprob: -11.502527236938477

Token 226: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.2521173655986786
    2. ' =' → logprob: -1.502117395401001
    3. '=[]' → logprob: -8.627117156982422
    4. '=[]
' → logprob: -12.752117156982422
    5. '   ' → logprob: -13.002117156982422
    6. '[]' → logprob: -14.252117156982422
    7. ' ' → logprob: -14.502117156982422
    8. 'stack' → logprob: -14.752117156982422
    9. '_' → logprob: -14.752117156982422
    10. 's' → logprob: -14.877117156982422

Token 227: ' []
' (ID: 8911)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.3868789076805115
    2. '[]' → logprob: -1.1368789672851562
    3. ' []
' → logprob: -12.636878967285156
    4. ' [' → logprob: -13.261878967285156
    5. '[]
' → logprob: -13.511878967285156
    6. '[' → logprob: -13.886878967285156
    7. '   ' → logprob: -15.261878967285156
    8. ' ' → logprob: -16.011878967285156
    9. '[]}' → logprob: -16.261878967285156
    10. '[]"' → logprob: -17.261878967285156

Token 228: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03764881193637848
    2. '
' → logprob: -3.412648916244507
    3. '    
' → logprob: -5.787648677825928
    4. 'for' → logprob: -7.037648677825928
    5. ' for' → logprob: -10.037649154663086
    6. '	
' → logprob: -13.287649154663086
    7. '        
' → logprob: -13.662649154663086
    8. '   
' → logprob: -13.787649154663086
    9. '  
' → logprob: -14.287649154663086
    10. '	for' → logprob: -14.287649154663086

Token 229: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2606498599052429
    2. 'for' → logprob: -1.5106499195098877
    3. ' for' → logprob: -4.760649681091309
    4. '    
' → logprob: -9.385649681091309
    5. '
' → logprob: -10.260649681091309
    6. ' ' → logprob: -14.010649681091309
    7. '  ' → logprob: -14.385649681091309
    8. '	for' → logprob: -14.385649681091309
    9. '   
' → logprob: -14.385649681091309
    10. '  
' → logprob: -14.760649681091309

Token 230: ' Lire' (ID: 57624)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.03285052254796028
    2. ' for' → logprob: -3.532850503921509
    3. '   ' → logprob: -5.782850742340088
    4. 'lines' → logprob: -11.90785026550293
    5. ' lines' → logprob: -13.03285026550293
    6. ' ' → logprob: -13.65785026550293
    7. '    
' → logprob: -13.90785026550293
    8. 'line' → logprob: -14.03285026550293
    9. '
' → logprob: -14.15785026550293
    10. '	for' → logprob: -14.40785026550293

Token 231: ' les' (ID: 1341)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.7655518651008606
    2. 'for' → logprob: -1.0155518054962158
    3. '   ' → logprob: -2.390551805496216
    4. ' lines' → logprob: -2.765551805496216
    5. ' les' → logprob: -4.890552043914795
    6. 'lines' → logprob: -5.515552043914795
    7. ' lignes' → logprob: -6.640552043914795
    8. ' la' → logprob: -7.015552043914795
    9. ' line' → logprob: -7.265552043914795
    10. 'les' → logprob: -7.515552043914795

Token 232: ' lignes' (ID: 81687)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -1.1919686794281006
    2. ' lines' → logprob: -1.1919686794281006
    3. ' lignes' → logprob: -1.3169686794281006
    4. 'for' → logprob: -3.1919686794281006
    5. 'lines' → logprob: -3.3169686794281006
    6. ' for' → logprob: -3.6919686794281006
    7. '   ' → logprob: -4.69196891784668
    8. 'import' → logprob: -5.56696891784668
    9. 'ligne' → logprob: -6.06696891784668
    10. ' line' → logprob: -6.06696891784668

Token 233: ' une' (ID: 2463)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.008693515323102474
    2. ' for' → logprob: -4.883693695068359
    3. 'for' → logprob: -6.883693695068359
    4. ' pour' → logprob: -10.13369369506836
    5. '    
' → logprob: -11.50869369506836
    6. 'pour' → logprob: -12.63369369506836
    7. '   ' → logprob: -12.88369369506836
    8. ',' → logprob: -13.75869369506836
    9. '	for' → logprob: -13.75869369506836
    10. '    ' → logprob: -14.38369369506836

Token 234: ' par' (ID: 686)
  Prédit: 'par'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'par' → logprob: -0.2745840847492218
    2. ' par' → logprob: -2.1495840549468994
    3. ' à' → logprob: -3.0245840549468994
    4. 'à' → logprob: -3.3995840549468994
    5. 'ligne' → logprob: -4.0245842933654785
    6. ' ligne' → logprob: -4.8995842933654785
    7. '_par' → logprob: -5.7745842933654785
    8. ' ' → logprob: -6.0245842933654785
    9. 't' → logprob: -6.3995842933654785
    10. '   ' → logprob: -6.6495842933654785

Token 235: ' une' (ID: 2463)
  Prédit: 'ligne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ligne' → logprob: -0.027269862592220306
    2. 'line' → logprob: -3.9022698402404785
    3. ' ligne' → logprob: -5.1522698402404785
    4. 'l' → logprob: -7.7772698402404785
    5. 'une' → logprob: -8.277270317077637
    6. 'lin' → logprob: -9.902270317077637
    7. 'linie' → logprob: -9.902270317077637
    8. 'lines' → logprob: -10.402270317077637
    9. 'fois' → logprob: -11.402270317077637
    10. '```' → logprob: -11.527270317077637

Token 236: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00015574338613077998
    2. ' for' → logprob: -9.250155448913574
    3. 'for' → logprob: -9.750155448913574
    4. '    
' → logprob: -14.125155448913574
    5. ',' → logprob: -15.375155448913574
    6. '   ' → logprob: -15.500155448913574
    7. '
' → logprob: -16.12515640258789
    8. '	for' → logprob: -16.25015640258789
    9. '       ' → logprob: -17.62515640258789
    10. '  ' → logprob: -17.75015640258789

Token 237: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -4.6087021473795176e-05
    2. ' for' → logprob: -10.125045776367188
    3. 'for' → logprob: -12.125045776367188
    4. ',' → logprob: -15.125045776367188
    5. '    
' → logprob: -16.500045776367188
    6. '  ' → logprob: -17.000045776367188
    7. '    ' → logprob: -17.375045776367188
    8. ' ' → logprob: -18.000045776367188
    9. '       ' → logprob: -18.375045776367188
    10. '
' → logprob: -18.375045776367188

Token 238: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.6099040508270264
    2. '   ' → logprob: -1.3599040508270264
    3. ' for' → logprob: -1.6099040508270264
    4. '	for' → logprob: -13.234904289245605
    5. '    
' → logprob: -13.734904289245605
    6. ' ' → logprob: -14.234904289245605
    7. '
' → logprob: -14.859904289245605
    8. '  ' → logprob: -15.234904289245605
    9. ' lines' → logprob: -15.234904289245605
    10. '    ' → logprob: -16.48490333557129

Token 239: ' line' (ID: 2543)
  Prédit: ' line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' line' → logprob: -0.0022783654276281595
    2. ' ligne' → logprob: -6.6272783279418945
    3. 'line' → logprob: -7.0022783279418945
    4. '	line' → logprob: -10.752278327941895
    5. 'ligne' → logprob: -11.127278327941895
    6. '```' → logprob: -13.377278327941895
    7. ' ' → logprob: -13.627278327941895
    8. ' linha' → logprob: -14.502278327941895
    9. ' li' → logprob: -14.877278327941895
    10. '   ' → logprob: -14.877278327941895

Token 240: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0015365236904472113
    2. 'in' → logprob: -6.5015363693237305
    3. ' ' → logprob: -10.87653636932373
    4. 's' → logprob: -13.12653636932373
    5. ' i' → logprob: -13.50153636932373
    6. 'de' → logprob: -13.56403636932373
    7. ' ' → logprob: -13.75153636932373
    8. '_' → logprob: -13.81403636932373
    9. '	in' → logprob: -13.87653636932373
    10. 'import' → logprob: -14.18903636932373

Token 241: ' sys' (ID: 12228)
  Prédit: 'sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sys' → logprob: -0.1602308303117752
    2. ' sys' → logprob: -1.9102308750152588
    3. '=sys' → logprob: -12.16023063659668
    4. '	sys' → logprob: -14.03523063659668
    5. '(sys' → logprob: -14.78523063659668
    6. '   ' → logprob: -17.53523063659668
    7. 's' → logprob: -17.78523063659668
    8. 'in' → logprob: -17.91023063659668
    9. 'import' → logprob: -18.03523063659668
    10. 'stdin' → logprob: -18.03523063659668

Token 242: '.stdin' (ID: 93480)
  Prédit: '.stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.stdin' → logprob: -0.0015584280481562018
    2. '.' → logprob: -6.501558303833008
    3. 'stdin' → logprob: -10.751558303833008
    4. '   ' → logprob: -11.251558303833008
    5. '.stdout' → logprob: -11.626558303833008
    6. '.readline' → logprob: -12.001558303833008
    7. '.argv' → logprob: -13.376558303833008
    8. '.std' → logprob: -13.876558303833008
    9. 'in' → logprob: -14.126558303833008
    10. ' stdin' → logprob: -14.251558303833008

Token 243: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.15643243491649628
    2. '.readline' → logprob: -2.4064323902130127
    3. ':
' → logprob: -3.9064323902130127
    4. '.strip' → logprob: -4.031432628631592
    5. '.rstrip' → logprob: -4.656432628631592
    6. '   ' → logprob: -6.156432628631592
    7. ' in' → logprob: -6.156432628631592
    8. '.readlines' → logprob: -6.281432628631592
    9. '.' → logprob: -8.156432151794434
    10. 'rstrip' → logprob: -8.531432151794434

Token 244: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0001684981834841892
    2. '        
' → logprob: -9.125168800354004
    3. ':' → logprob: -10.250168800354004
    4. '    
' → logprob: -12.250168800354004
    5. '   ' → logprob: -12.875168800354004
    6. ':
' → logprob: -12.875168800354004
    7. '
' → logprob: -13.000168800354004
    8. '    ' → logprob: -13.375168800354004
    9. '  
' → logprob: -13.500168800354004
    10. '.strip' → logprob: -13.500168800354004

Token 245: ' line' (ID: 2543)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.025010811164975166
    2. ' line' → logprob: -4.150010585784912
    3. ' value' → logprob: -5.900010585784912
    4. 'line' (adapté à ' line') → logprob: -6.650010585784912
    5. ' number' → logprob: -6.775010585784912
    6. 'value' → logprob: -7.400010585784912
    7. ' n' → logprob: -7.400010585784912
    8. 'n' → logprob: -8.02501106262207
    9. ' input' → logprob: -8.02501106262207
    10. 'num' → logprob: -8.15001106262207

Token 246: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.07928048074245453
    2. ' =' → logprob: -2.579280376434326
    3. '=line' → logprob: -8.079280853271484
    4. 'strip' → logprob: -10.329280853271484
    5. '.strip' → logprob: -10.329280853271484
    6. '_strip' → logprob: -11.954280853271484
    7. 'rstrip' → logprob: -12.579280853271484
    8. '=
' → logprob: -12.954280853271484
    9. '.rstrip' → logprob: -13.704280853271484
    10. 's' → logprob: -14.454280853271484

Token 247: ' line' (ID: 2543)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.0067156096920371056
    2. ' line' → logprob: -5.006715774536133
    3. '	line' → logprob: -16.506715774536133
    4. '=line' → logprob: -16.631715774536133
    5. 'ligne' → logprob: -18.256715774536133
    6. '#line' → logprob: -18.506715774536133
    7. 'int' → logprob: -18.756715774536133
    8. '(line' → logprob: -18.756715774536133
    9. '   ' → logprob: -18.881715774536133
    10. ' ligne' → logprob: -19.881715774536133

Token 248: '.strip' (ID: 40613)
  Prédit: '.strip'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.strip' → logprob: -0.0068527162075042725
    2. '.rstrip' → logprob: -5.006852626800537
    3. 'strip' → logprob: -9.131853103637695
    4. '.' → logprob: -10.506853103637695
    5. 'rstrip' → logprob: -14.256853103637695
    6. '.readline' → logprob: -15.006853103637695
    7. ' strip' → logprob: -15.006853103637695
    8. '.trim' → logprob: -15.506853103637695
    9. '.split' → logprob: -16.131853103637695
    10. ' .' → logprob: -16.506853103637695

Token 249: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -1.0683535037969705e-05
    2. '()
' → logprob: -12.25001049041748
    3. '(' → logprob: -12.50001049041748
    4. '())' → logprob: -14.25001049041748
    5. ')' → logprob: -14.75001049041748
    6. '()`' → logprob: -15.25001049041748
    7. '()"' → logprob: -15.25001049041748
    8. '()

' → logprob: -15.50001049041748
    9. '()]' → logprob: -16.750011444091797
    10. '()\' → logprob: -17.000011444091797

Token 250: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00023071514442563057
    2. 'if' → logprob: -8.75023078918457
    3. ' if' → logprob: -10.50023078918457
    4. '        
' → logprob: -10.75023078918457
    5. '   ' → logprob: -11.25023078918457
    6. '
' → logprob: -11.62523078918457
    7. '           ' → logprob: -14.75023078918457
    8. '<|end|>' → logprob: -15.75023078918457
    9. '	' → logprob: -16.00023078918457
    10. '      ' → logprob: -16.25023078918457

Token 251: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -1.1756367712223437e-05
    2. '       ' → logprob: -11.750011444091797
    3. ' if' → logprob: -12.500011444091797
    4. '   ' → logprob: -16.875011444091797
    5. '        
' → logprob: -17.500011444091797
    6. '
' → logprob: -17.750011444091797
    7. 'If' → logprob: -18.000011444091797
    8. '#' → logprob: -18.125011444091797
    9. 'num' → logprob: -18.500011444091797
    10. '	if' → logprob: -19.250011444091797

Token 252: ' not' (ID: 625)
  Prédit: ' not'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.12351305037736893
    2. ' line' → logprob: -2.8735129833221436
    3. 'not' → logprob: -2.9985129833221436
    4. 'line' → logprob: -4.623513221740723
    5. ' ' → logprob: -12.498513221740723
    6. '	line' → logprob: -13.373513221740723
    7. '	not' → logprob: -13.998513221740723
    8. ' len' → logprob: -14.248513221740723
    9. '(line' → logprob: -14.498513221740723
    10. 'len' → logprob: -14.748513221740723

Token 253: ' line' (ID: 2543)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.5759395956993103
    2. ' line' → logprob: -0.8259395956993103
    3. '	line' → logprob: -16.325939178466797
    4. ' ' → logprob: -18.075939178466797
    5. ' ligne' → logprob: -18.325939178466797
    6. '(line' → logprob: -18.450939178466797
    7. '   ' → logprob: -19.450939178466797
    8. 'len' → logprob: -19.575939178466797
    9. '=line' → logprob: -19.700939178466797
    10. '[line' → logprob: -19.700939178466797

Token 254: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.01820332556962967
    2. ':
' → logprob: -4.018203258514404
    3. ' or' → logprob: -10.893203735351562
    4. ' :' → logprob: -11.518203735351562
    5. ':return' → logprob: -12.393203735351562
    6. '<|end|>' → logprob: -12.518203735351562
    7. '):' → logprob: -12.768203735351562
    8. '=' → logprob: -12.893203735351562
    9. '   ' → logprob: -13.268203735351562
    10. ':

' → logprob: -13.268203735351562

Token 255: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.00012320445966906846
    2. ':' → logprob: -9.125123023986816
    3. '       ' → logprob: -12.500123023986816
    4. '          ' → logprob: -12.875123023986816
    5. ' break' → logprob: -13.375123023986816
    6. ',' → logprob: -13.625123023986816
    7. ':
' → logprob: -13.875123023986816
    8. '               ' → logprob: -14.125123023986816
    9. 'break' → logprob: -14.250123023986816
    10. '.' → logprob: -14.375123023986816

Token 256: ' #' (ID: 1069)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'break' → logprob: -0.15691688656806946
    2. '           ' → logprob: -2.406916856765747
    3. ' break' → logprob: -2.906916856765747
    4. '       ' → logprob: -8.031916618347168
    5. 'continue' → logprob: -9.656916618347168
    6. '               ' → logprob: -10.281916618347168
    7. '	break' → logprob: -10.656916618347168
    8. '
' → logprob: -11.031916618347168
    9. 'return' → logprob: -11.656916618347168
    10. '   ' → logprob: -12.031916618347168

Token 257: ' Ligne' (ID: 127787)
  Prédit: ' break'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' break' → logprob: -0.4513404369354248
    2. 'break' → logprob: -1.0763404369354248
    3. '       ' → logprob: -3.826340436935425
    4. '           ' → logprob: -7.576340675354004
    5. 'continue' → logprob: -10.201340675354004
    6. ' continue' → logprob: -10.951340675354004
    7. '	break' → logprob: -11.201340675354004
    8. '_break' → logprob: -12.326340675354004
    9. 'return' → logprob: -12.951340675354004
    10. '   ' → logprob: -13.201340675354004

Token 258: ' vide' (ID: 21835)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'break' → logprob: -0.448564738035202
    2. 'vide' → logprob: -2.5735647678375244
    3. 'continue' → logprob: -2.8235647678375244
    4. '   ' → logprob: -3.1985647678375244
    5. '       ' → logprob: -3.1985647678375244
    6. '=' → logprob: -3.5735647678375244
    7. '==' → logprob: -3.8235647678375244
    8. ' break' → logprob: -3.8235647678375244
    9. 's' → logprob: -4.073564529418945
    10. '_break' → logprob: -4.073564529418945

Token 259: ' possible' (ID: 4149)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0003491705865599215
    2. '       ' → logprob: -8.500349044799805
    3. 'break' → logprob: -9.250349044799805
    4. ':' → logprob: -11.250349044799805
    5. ' break' → logprob: -11.500349044799805
    6. ',' → logprob: -11.500349044799805
    7. '               ' → logprob: -12.125349044799805
    8. 'continue' → logprob: -12.250349044799805
    9. '		' → logprob: -12.875349044799805
    10. '	       ' → logprob: -13.875349044799805

Token 260: ',' (ID: 11)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0007130279554985464
    2. '       ' → logprob: -7.375712871551514
    3. ',' → logprob: -9.500713348388672
    4. '               ' → logprob: -12.500713348388672
    5. '
' → logprob: -12.750713348388672
    6. '		' → logprob: -13.625713348388672
    7. ':' → logprob: -14.250713348388672
    8. 'continue' → logprob: -14.625713348388672
    9. '	       ' → logprob: -14.625713348388672
    10. ' break' → logprob: -14.750713348388672

Token 261: ' on' (ID: 402)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.11265680193901062
    2. '       ' → logprob: -2.987656831741333
    3. 'continue' → logprob: -3.737656831741333
    4. 'break' → logprob: -3.862656831741333
    5. ' break' → logprob: -4.862656593322754
    6. ' continue' → logprob: -5.737656593322754
    7. 'contin' → logprob: -8.862656593322754
    8. '               ' → logprob: -9.362656593322754
    9. ' continuer' → logprob: -9.737656593322754
    10. '   ' → logprob: -10.862656593322754

Token 262: ' ignore' (ID: 17887)
  Prédit: 'continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'continue' → logprob: -0.47557470202445984
    2. '       ' → logprob: -1.3505747318267822
    3. 'break' → logprob: -2.3505747318267822
    4. ' continue' → logprob: -4.225574493408203
    5. '           ' → logprob: -5.350574493408203
    6. ' break' → logprob: -5.850574493408203
    7. 'contin' → logprob: -6.850574493408203
    8. '   ' → logprob: -7.850574493408203
    9. '_continue' → logprob: -9.725574493408203
    10. 'continu' → logprob: -9.975574493408203

Token 263: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0017455116612836719
    2. 'continue' → logprob: -7.126745700836182
    3. ' continue' → logprob: -7.376745700836182
    4. '       ' → logprob: -8.126745223999023
    5. '               ' → logprob: -11.876745223999023
    6. ',' → logprob: -12.626745223999023
    7. '.' → logprob: -13.001745223999023
    8. '	continue' → logprob: -13.626745223999023
    9. 'contin' → logprob: -13.876745223999023
    10. '   ' → logprob: -13.876745223999023

Token 264: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0014640314038842916
    2. '       ' → logprob: -6.626463890075684
    3. 'continue' → logprob: -9.376463890075684
    4. ' continue' → logprob: -10.001463890075684
    5. '               ' → logprob: -12.501463890075684
    6. '   ' → logprob: -13.376463890075684
    7. '		' → logprob: -13.876463890075684
    8. ',' → logprob: -14.751463890075684
    9. '.' → logprob: -15.251463890075684
    10. '	       ' → logprob: -15.251463890075684

Token 265: ' continue' (ID: 4901)
  Prédit: 'continue'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'continue' (adapté à ' continue') → logprob: -0.03546144440770149
    2. '           ' → logprob: -4.41046142578125
    3. 'break' → logprob: -4.41046142578125
    4. ' continue' → logprob: -4.91046142578125
    5. '       ' → logprob: -5.78546142578125
    6. ' break' → logprob: -9.66046142578125
    7. 'contin' → logprob: -11.28546142578125
    8. '               ' → logprob: -11.78546142578125
    9. 'continu' → logprob: -12.03546142578125
    10. '   ' → logprob: -12.28546142578125

Token 266: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.02349155768752098
    2. '
' → logprob: -4.398491382598877
    3. '        
' → logprob: -4.523491382598877
    4. '    
' → logprob: -11.398491859436035
    5. '  
' → logprob: -11.523491859436035
    6. '       
' → logprob: -11.523491859436035
    7. '            
' → logprob: -11.648491859436035
    8. '<|end|>' → logprob: -11.898491859436035
    9. '        ' → logprob: -12.148491859436035
    10. '      ' → logprob: -12.898491859436035

Token 267: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00181928975507617
    2. '        
' → logprob: -6.501819133758545
    3. '
' → logprob: -8.626819610595703
    4. '   ' → logprob: -9.751819610595703
    5. '    
' → logprob: -10.251819610595703
    6. '       
' → logprob: -12.251819610595703
    7. '  
' → logprob: -12.251819610595703
    8. '      ' → logprob: -12.376819610595703
    9. '           ' → logprob: -12.626819610595703
    10. '            
' → logprob: -12.751819610595703

Token 268: ' num' (ID: 2269)
  Prédit: 'num'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'num' (adapté à ' num') → logprob: -0.034621745347976685
    2. 'value' → logprob: -4.034621715545654
    3. 'number' → logprob: -4.909621715545654
    4. 'n' → logprob: -5.284621715545654
    5. 'val' → logprob: -5.909621715545654
    6. 'x' → logprob: -7.534621715545654
    7. 'nombre' → logprob: -7.784621715545654
    8. '   ' → logprob: -9.534622192382812
    9. 'nbr' → logprob: -10.409622192382812
    10. ' num' → logprob: -10.409622192382812

Token 269: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5759961009025574
    2. '=' → logprob: -0.8259961009025574
    3. '=int' → logprob: -9.825996398925781
    4. ')' → logprob: -14.700996398925781
    5. '   ' → logprob: -14.825996398925781
    6. 's' → logprob: -14.950996398925781
    7. ' ' → logprob: -15.200996398925781
    8. 'int' → logprob: -15.450996398925781
    9. '	' → logprob: -15.575996398925781
    10. ' ' → logprob: -15.700996398925781

Token 270: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.01814994215965271
    2. ' int' → logprob: -4.0181498527526855
    3. '   ' → logprob: -19.268150329589844
    4. '	int' → logprob: -19.768150329589844
    5. '=int' → logprob: -20.518150329589844
    6. '(int' → logprob: -21.018150329589844
    7. ' ' → logprob: -21.393150329589844
    8. '  ' → logprob: -21.643150329589844
    9. '[int' → logprob: -21.893150329589844
    10. 'in' → logprob: -22.893150329589844

Token 271: '(line' (ID: 18178)
  Prédit: '(line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(line' → logprob: -0.0019311357755213976
    2. '(' → logprob: -6.251931190490723
    3. 'line' → logprob: -13.626931190490723
    4. ' line' → logprob: -14.001931190490723
    5. '(
' → logprob: -16.126930236816406
    6. '=line' → logprob: -16.376930236816406
    7. ' (' → logprob: -16.626930236816406
    8. '	line' → logprob: -17.126930236816406
    9. '[line' → logprob: -17.251930236816406
    10. '#line' → logprob: -17.626930236816406

Token 272: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00011200665176147595
    2. ')
' → logprob: -9.25011157989502
    3. '       ' → logprob: -11.50011157989502
    4. ' )' → logprob: -12.37511157989502
    5. '   ' → logprob: -13.75011157989502
    6. '))' → logprob: -15.87511157989502
    7. ')

' → logprob: -16.375112533569336
    8. ')`' → logprob: -16.625112533569336
    9. ')
' → logprob: -17.125112533569336
    10. '	' → logprob: -17.375112533569336

Token 273: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0016191228060051799
    2. '
' → logprob: -7.126619338989258
    3. '        
' → logprob: -7.626619338989258
    4. 'if' → logprob: -9.126619338989258
    5. ' if' → logprob: -9.501619338989258
    6. '<|end|>' → logprob: -9.626619338989258
    7. '   ' → logprob: -10.001619338989258
    8. ' 
' → logprob: -11.376619338989258
    9. '    
' → logprob: -11.626619338989258
    10. '  
' → logprob: -12.751619338989258

Token 274: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.3904816806316376
    2. ' if' → logprob: -1.14048171043396
    3. '       ' → logprob: -5.640481472015381
    4. '
' → logprob: -10.765481948852539
    5. '        
' → logprob: -11.015481948852539
    6. ' 
' → logprob: -11.390481948852539
    7. '   ' → logprob: -13.390481948852539
    8. '	if' → logprob: -14.390481948852539
    9. '        ' → logprob: -14.765481948852539
    10. '    
' → logprob: -14.890481948852539

Token 275: ' num' (ID: 2269)
  Prédit: ' num'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' num' → logprob: -0.10020806640386581
    2. 'num' → logprob: -2.350208044052124
    3. '	num' → logprob: -13.725208282470703
    4. ' ' → logprob: -15.475208282470703
    5. '(num' → logprob: -16.725208282470703
    6. ' ' → logprob: -17.600208282470703
    7. '<num' → logprob: -17.725208282470703
    8. '[num' → logprob: -17.975208282470703
    9. '   ' → logprob: -18.225208282470703
    10. ',num' → logprob: -18.725208282470703

Token 276: ' ==' (ID: 951)
  Prédit: ' !='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' !=' → logprob: -0.03138340637087822
    2. '!=' → logprob: -3.656383514404297
    3. ' >' → logprob: -5.406383514404297
    4. '>' → logprob: -7.531383514404297
    5. ' ' → logprob: -10.906383514404297
    6. ' ' → logprob: -12.031383514404297
    7. ' ==' → logprob: -12.031383514404297
    8. ')' → logprob: -12.406383514404297
    9. ')!=' → logprob: -12.781383514404297
    10. '   ' → logprob: -13.406383514404297

Token 277: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.16022422909736633
    2. ' ' → logprob: -1.910224199295044
    3. '  ' → logprob: -18.16022491455078
    4. '   ' → logprob: -18.28522491455078
    5. ' ' → logprob: -18.53522491455078
    6. '```' → logprob: -19.03522491455078
    7. '1' → logprob: -19.16022491455078
    8. ')' → logprob: -20.22272491455078
    9. '۰' → logprob: -20.41022491455078
    10. '=' → logprob: -20.53522491455078

Token 278: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -2.339278580620885e-06
    2. ' ' → logprob: -13.000001907348633
    3. '   ' → logprob: -22.750001907348633
    4. '۰' → logprob: -22.875001907348633
    5. '```' → logprob: -23.000001907348633
    6. '０' → logprob: -24.250001907348633
    7. ' ' → logprob: -24.375001907348633
    8. '
' → logprob: -24.375001907348633
    9. '=' → logprob: -24.500001907348633
    10. ')' → logprob: -24.750001907348633

Token 279: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.04324215650558472
    2. ':
' → logprob: -3.1682422161102295
    3. ' and' → logprob: -8.543242454528809
    4. '       ' → logprob: -11.293242454528809
    5. '           ' → logprob: -11.418242454528809
    6. '):' → logprob: -11.793242454528809
    7. 'and' → logprob: -12.293242454528809
    8. '   ' → logprob: -12.668242454528809
    9. ':
' → logprob: -12.918242454528809
    10. ' :' → logprob: -13.418242454528809

Token 280: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.047384776175022125
    2. '       ' → logprob: -3.297384738922119
    3. ' if' → logprob: -5.172384738922119
    4. ' print' → logprob: -7.172384738922119
    5. 'print' → logprob: -7.297384738922119
    6. 'if' → logprob: -7.297384738922119
    7. '	       ' → logprob: -8.172385215759277
    8. ',' → logprob: -8.547385215759277
    9. '            
' → logprob: -8.547385215759277
    10. '        
' → logprob: -8.797385215759277

Token 281: ' #' (ID: 1069)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.5001993775367737
    2. '           ' → logprob: -1.375199317932129
    3. 'print' → logprob: -2.375199317932129
    4. ' wagon' → logprob: -3.250199317932129
    5. ' popped' → logprob: -5.750199317932129
    6. 'wagon' → logprob: -6.750199317932129
    7. ' wag' → logprob: -7.125199317932129
    8. ' sortie' → logprob: -7.500199317932129
    9. 'w' → logprob: -7.750199317932129
    10. ' pop' → logprob: -8.000199317932129

Token 282: ' Sort' (ID: 25945)
  Prédit: ' wagon'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' wagon' → logprob: -0.31075116991996765
    2. 'wagon' → logprob: -1.43575119972229
    3. 'print' → logprob: -4.185750961303711
    4. ' print' → logprob: -5.185750961303711
    5. 'w' → logprob: -5.935750961303711
    6. 'val' → logprob: -6.810750961303711
    7. ' popped' → logprob: -6.935750961303711
    8. 'pop' → logprob: -7.310750961303711
    9. 'out' → logprob: -7.560750961303711
    10. ' wag' → logprob: -7.560750961303711

Token 283: 'ie' (ID: 396)
  Prédit: 'ie'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ie' → logprob: -0.1258913278579712
    2. 'i' → logprob: -2.5008912086486816
    3. 'ir' → logprob: -4.250891208648682
    4. 'er' → logprob: -4.875891208648682
    5. '   ' → logprob: -4.875891208648682
    6. '           ' → logprob: -6.125891208648682
    7. 'if' → logprob: -6.500891208648682
    8. '       ' → logprob: -6.750891208648682
    9. '#' → logprob: -8.12589168548584
    10. 'ion' → logprob: -8.87589168548584

Token 284: ' :' (ID: 712)
  Prédit: ' wagon'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' wagon' → logprob: -0.49403008818626404
    2. 'wagon' → logprob: -1.4940301179885864
    3. ' =' → logprob: -2.119029998779297
    4. 'print' → logprob: -4.244029998779297
    5. '           ' → logprob: -4.619029998779297
    6. '=' → logprob: -5.244029998779297
    7. 'w' → logprob: -5.369029998779297
    8. ' print' → logprob: -5.619029998779297
    9. ':' → logprob: -6.744029998779297
    10. 'wagen' → logprob: -7.119029998779297

Token 285: ' dép' (ID: 34015)
  Prédit: ' wagon'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' wagon' → logprob: -0.20594057440757751
    2. 'wagon' → logprob: -2.7059404850006104
    3. ' print' → logprob: -2.8309404850006104
    4. 'print' → logprob: -3.4559404850006104
    5. '           ' → logprob: -3.7059404850006104
    6. 'w' → logprob: -6.5809407234191895
    7. ' wag' → logprob: -7.4559407234191895
    8. ' popped' → logprob: -7.4559407234191895
    9. ' w' → logprob: -8.455940246582031
    10. 'wagen' → logprob: -8.455940246582031

Token 286: 'ile' (ID: 554)
  Prédit: 'ile'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ile' → logprob: -0.7021568417549133
    2. 'iler' → logprob: -0.7021568417549133
    3. 'ilé' → logprob: -4.952157020568848
    4. 'il' → logprob: -7.077157020568848
    5. '       ' → logprob: -7.952157020568848
    6. '   ' → logprob: -8.202157020568848
    7. 'ilage' → logprob: -9.077157020568848
    8. '           ' → logprob: -9.327157020568848
    9. 'op' → logprob: -10.202157020568848
    10. 'pile' → logprob: -10.702157020568848

Token 287: ' et' (ID: 859)
  Prédit: ' wagon'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' wagon' → logprob: -0.1648244857788086
    2. 'wagon' → logprob: -2.0398244857788086
    3. '           ' → logprob: -4.664824485778809
    4. 'print' → logprob: -5.539824485778809
    5. 'w' → logprob: -5.789824485778809
    6. ' print' → logprob: -6.414824485778809
    7. 'wagen' → logprob: -7.164824485778809
    8. '               ' → logprob: -7.789824485778809
    9. ',' → logprob: -7.914824485778809
    10. ')' → logprob: -8.164824485778809

Token 288: ' imprime' (ID: 195564)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.5763174891471863
    2. 'print' → logprob: -0.8263174891471863
    3. ' affiche' → logprob: -8.32631778717041
    4. ' prints' → logprob: -10.32631778717041
    5. ' imprime' → logprob: -10.95131778717041
    6. 'aff' → logprob: -11.07631778717041
    7. ' afficher' → logprob: -11.70131778717041
    8. 'pop' → logprob: -11.82631778717041
    9. '           ' → logprob: -11.82631778717041
    10. ' pop' → logprob: -12.07631778717041

Token 289: ' le' (ID: 505)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.9654199481010437
    2. ' wagon' → logprob: -1.0904200077056885
    3. '           ' → logprob: -1.7154200077056885
    4. 'print' → logprob: -2.5904200077056885
    5. 'wagon' → logprob: -3.9654200077056885
    6. ' wag' → logprob: -5.840419769287109
    7. '               ' → logprob: -6.840419769287109
    8. 'w' → logprob: -7.090419769287109
    9. ' stack' → logprob: -7.340419769287109
    10. '```' → logprob: -7.715419769287109

Token 290: ' wagon' (ID: 90907)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.9284316301345825
    2. 'wagon' → logprob: -1.0534316301345825
    3. ' stack' → logprob: -1.6784316301345825
    4. ' wagon' → logprob: -2.803431510925293
    5. 'w' → logprob: -5.553431510925293
    6. 'wag' → logprob: -6.428431510925293
    7. '(stack' → logprob: -6.803431510925293
    8. 'wagen' → logprob: -7.178431510925293
    9. ' wag' → logprob: -7.928431510925293
    10. 'val' → logprob: -8.678431510925293

Token 291: ' sorti' (ID: 91300)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.01492386870086193
    2. 'print' → logprob: -4.764924049377441
    3. ' print' → logprob: -5.514924049377441
    4. '       ' → logprob: -6.639924049377441
    5. ',' → logprob: -7.264924049377441
    6. '	       ' → logprob: -9.889924049377441
    7. '.' → logprob: -10.264924049377441
    8. '   ' → logprob: -10.514924049377441
    9. 'w' → logprob: -10.889924049377441
    10. '               ' → logprob: -11.264924049377441

Token 292: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.03571891039609909
    2. ' print' → logprob: -4.03571891784668
    3. 'print' → logprob: -4.16071891784668
    4. ',' → logprob: -7.41071891784668
    5. ' wagon' → logprob: -8.03571891784668
    6. '       ' → logprob: -8.28571891784668
    7. 'wagon' → logprob: -9.28571891784668
    8. '
' → logprob: -9.41071891784668
    9. 'w' → logprob: -9.53571891784668
    10. '               ' → logprob: -10.03571891784668

Token 293: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.003266241867095232
    2. ' print' → logprob: -6.003266334533691
    3. 'print' → logprob: -7.253266334533691
    4. ',' → logprob: -11.003266334533691
    5. '       ' → logprob: -11.378266334533691
    6. '            
' → logprob: -11.628266334533691
    7. ' wagon' → logprob: -11.878266334533691
    8. '          ' → logprob: -12.003266334533691
    9. '               ' → logprob: -12.128266334533691
    10. 'w' → logprob: -12.753266334533691

Token 294: ' car' (ID: 1669)
  Prédit: ' wagon'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' wagon' → logprob: -0.8255078196525574
    2. 'print' → logprob: -1.3255078792572021
    3. ' print' → logprob: -1.5755078792572021
    4. 'wagon' → logprob: -2.450507879257202
    5. 'w' → logprob: -6.450507640838623
    6. ' popped' → logprob: -7.700507640838623
    7. ' wag' → logprob: -8.200508117675781
    8. 'out' → logprob: -9.075508117675781
    9. ' w' → logprob: -9.200508117675781
    10. 'car' (adapté à ' car') → logprob: -9.325508117675781

Token 295: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.01604410633444786
    2. '=' → logprob: -4.1410441398620605
    3. '	' → logprob: -12.766043663024902
    4. ' ' → logprob: -13.391043663024902
    5. 's' → logprob: -13.391043663024902
    6. '_num' → logprob: -13.516043663024902
    7. '_number' → logprob: -14.141043663024902
    8. ' ' → logprob: -14.641043663024902
    9. '_' → logprob: -14.766043663024902
    10. '_stack' → logprob: -15.391043663024902

Token 296: ' stack' (ID: 10825)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.10020741820335388
    2. ' stack' → logprob: -2.3502073287963867
    3. '	stack' → logprob: -14.600207328796387
    4. '   ' → logprob: -15.350207328796387
    5. '(stack' → logprob: -17.725208282470703
    6. 'pop' → logprob: -18.225208282470703
    7. '_stack' → logprob: -18.350208282470703
    8. '.stack' → logprob: -19.100208282470703
    9. 'Stack' → logprob: -19.225208282470703
    10. 'st' → logprob: -19.475208282470703

Token 297: '.pop' (ID: 15746)
  Prédit: '.pop'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.pop' → logprob: -3.380904672667384e-05
    2. '.' → logprob: -10.500033378601074
    3. 'pop' → logprob: -12.000033378601074
    4. ' .' → logprob: -19.37503433227539
    5. '.Pop' → logprob: -22.12503433227539
    6. ' pop' → logprob: -22.62503433227539
    7. '_pop' → logprob: -23.12503433227539
    8. 'Pop' → logprob: -23.25003433227539
    9. '	pop' → logprob: -23.25003433227539
    10. '-pop' → logprob: -24.12503433227539

Token 298: '()
' (ID: 1234)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.4770846664905548
    2. '()
' → logprob: -1.1020846366882324
    3. '()' → logprob: -3.2270846366882324
    4. 'print' → logprob: -5.227084636688232
    5. '       ' → logprob: -6.227084636688232
    6. ')' → logprob: -9.85208511352539
    7. ')
' → logprob: -9.85208511352539
    8. '()
' → logprob: -9.97708511352539
    9. ' print' → logprob: -10.35208511352539
    10. '
' → logprob: -11.85208511352539

Token 299: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.010055669583380222
    2. 'print' → logprob: -4.6350555419921875
    3. ' print' → logprob: -8.135055541992188
    4. '
' → logprob: -12.510055541992188
    5. '       ' → logprob: -13.510055541992188
    6. '   ' → logprob: -14.635055541992188
    7. '```' → logprob: -14.635055541992188
    8. '            
' → logprob: -15.260055541992188
    9. '               ' → logprob: -16.135055541992188
    10. '		' → logprob: -16.385055541992188

Token 300: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.023445557802915573
    2. ' print' → logprob: -3.7734456062316895
    3. '           ' → logprob: -8.523445129394531
    4. '```' → logprob: -14.023445129394531
    5. '
' → logprob: -15.023445129394531
    6. '	print' → logprob: -16.77344512939453
    7. '       ' → logprob: -17.39844512939453
    8. '   ' → logprob: -18.02344512939453
    9. '.print' → logprob: -18.39844512939453
    10. '``' → logprob: -18.52344512939453

Token 301: '(car' (ID: 77006)
  Prédit: '(car'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(car' → logprob: -0.0015035520773380995
    2. '(' → logprob: -6.5015034675598145
    3. '(c' → logprob: -14.626503944396973
    4. '(f' → logprob: -14.626503944396973
    5. ' (' → logprob: -16.001502990722656
    6. 'car' → logprob: -16.001502990722656
    7. '(
' → logprob: -17.126502990722656
    8. '(Car' → logprob: -17.251502990722656
    9. '()' → logprob: -17.876502990722656
    10. '	car' → logprob: -18.876502990722656

Token 302: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.1472419600977446e-06
    2. ')
' → logprob: -13.750000953674316
    3. ' )' → logprob: -17.375001907348633
    4. '))' → logprob: -19.375001907348633
    5. '),' → logprob: -19.375001907348633
    6. '())' → logprob: -19.500001907348633
    7. ')`' → logprob: -19.750001907348633
    8. '       ' → logprob: -19.875001907348633
    9. ')}' → logprob: -20.000001907348633
    10. '()' → logprob: -20.125001907348633

Token 303: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.008230980485677719
    2. 'else' → logprob: -4.883231163024902
    3. ' else' → logprob: -7.383231163024902
    4. '   ' → logprob: -13.258231163024902
    5. 'elif' → logprob: -14.883231163024902
    6. '```' → logprob: -15.008231163024902
    7. '<|end|>' → logprob: -15.633231163024902
    8. '	else' → logprob: -15.758231163024902
    9. ')' → logprob: -16.508230209350586
    10. '      ' → logprob: -16.508230209350586

Token 304: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.3181958794593811
    2. '       ' → logprob: -1.3181958198547363
    3. ' else' → logprob: -5.318195819854736
    4. 'elif' → logprob: -10.943196296691895
    5. '   ' → logprob: -13.068196296691895
    6. '	else' → logprob: -15.068196296691895
    7. '```' → logprob: -15.943196296691895
    8. 'els' → logprob: -16.318195343017578
    9. ' elif' → logprob: -17.068195343017578
    10. '      ' → logprob: -17.318195343017578

Token 305: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.11883582919836044
    2. ':
' → logprob: -2.368835926055908
    3. '           ' → logprob: -3.993835926055908
    4. ' :' → logprob: -11.74383544921875
    5. '       ' → logprob: -11.74383544921875
    6. '   ' → logprob: -12.49383544921875
    7. ' :
' → logprob: -12.49383544921875
    8. ':
' → logprob: -13.36883544921875
    9. ':

' → logprob: -14.24383544921875
    10. 'stack' → logprob: -15.11883544921875

Token 306: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.8158143758773804
    2. 'stack' → logprob: -0.8158143758773804
    3. '       ' → logprob: -2.81581449508667
    4. ' stack' → logprob: -2.94081449508667
    5. '   ' → logprob: -5.94081449508667
    6. '	stack' → logprob: -9.315814018249512
    7. '        ' → logprob: -12.065814018249512
    8. ' ' → logprob: -12.315814018249512
    9. '_stack' → logprob: -12.315814018249512
    10. '   ' → logprob: -12.440814018249512

Token 307: ' #' (ID: 1069)
  Prédit: ' stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.128683403134346
    2. 'stack' → logprob: -2.12868332862854
    3. '           ' → logprob: -6.378683567047119
    4. '	stack' → logprob: -10.628683090209961
    5. '   ' → logprob: -11.128683090209961
    6. '       ' → logprob: -12.128683090209961
    7. '_stack' → logprob: -12.753683090209961
    8. ' ' → logprob: -12.878683090209961
    9. '.stack' → logprob: -13.378683090209961
    10. 'Stack' → logprob: -13.753683090209961

Token 308: ' Entr' (ID: 50650)
  Prédit: ' stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.079386405646801
    2. 'stack' → logprob: -2.5793864727020264
    3. '           ' → logprob: -8.079386711120605
    4. '#' → logprob: -9.829386711120605
    5. ' #' → logprob: -9.954386711120605
    6. '   ' → logprob: -10.329386711120605
    7. '	stack' → logprob: -11.329386711120605
    8. ' ' → logprob: -11.579386711120605
    9. ' ' → logprob: -11.954386711120605
    10. '    ' → logprob: -12.204386711120605

Token 309: 'ée' (ID: 2894)
  Prédit: 'er'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.03361354023218155
    2. 'iler' → logprob: -4.158613681793213
    3. 'oyer' → logprob: -5.783613681793213
    4. '           ' → logprob: -6.158613681793213
    5. 'e' → logprob: -6.158613681793213
    6. 'ail' → logprob: -6.408613681793213
    7. '   ' → logprob: -6.408613681793213
    8. 'yer' → logprob: -6.533613681793213
    9. 'ayer' → logprob: -6.908613681793213
    10. 'rer' → logprob: -7.783613681793213

Token 310: ' :' (ID: 712)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.17644016444683075
    2. '           ' → logprob: -2.4264402389526367
    3. ' :' → logprob: -2.6764402389526367
    4. ' stack' → logprob: -6.176440238952637
    5. '   ' → logprob: -6.426440238952637
    6. 'stack' → logprob: -8.051440238952637
    7. ':
' → logprob: -8.676440238952637
    8. ' :
' → logprob: -8.801440238952637
    9. ' ' → logprob: -9.801440238952637
    10. '            ' → logprob: -10.551440238952637

Token 311: ' emp' (ID: 4927)
  Prédit: ' stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.10025466978549957
    2. 'stack' → logprob: -2.350254774093628
    3. '   ' → logprob: -10.600255012512207
    4. '	stack' → logprob: -11.475255012512207
    5. '           ' → logprob: -11.600255012512207
    6. ' ' → logprob: -13.600255012512207
    7. '_stack' → logprob: -14.475255012512207
    8. '    ' → logprob: -14.600255012512207
    9. ' ' → logprob: -14.725255012512207
    10. '.stack' → logprob: -15.225255012512207

Token 312: 'ile' (ID: 554)
  Prédit: 'iler'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'iler' → logprob: -0.31430789828300476
    2. 'ile' → logprob: -1.3143079280853271
    3. '   ' → logprob: -7.689307689666748
    4. 'il' → logprob: -9.064308166503906
    5. ' ile' → logprob: -9.064308166503906
    6. 'i' → logprob: -9.814308166503906
    7. ' ' → logprob: -10.189308166503906
    8. 'ILER' → logprob: -10.689308166503906
    9. 'ilar' → logprob: -10.814308166503906
    10. '       ' → logprob: -10.939308166503906

Token 313: ' le' (ID: 505)
  Prédit: ' stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.20940910279750824
    2. 'stack' → logprob: -2.33440899848938
    3. '(stack' → logprob: -2.45940899848938
    4. ' (' → logprob: -5.584409236907959
    5. '           ' → logprob: -6.709409236907959
    6. 'car' → logprob: -7.584409236907959
    7. 'num' → logprob: -7.834409236907959
    8. ' car' → logprob: -8.2094087600708
    9. ' num' → logprob: -8.7094087600708
    10. '(car' → logprob: -9.3344087600708

Token 314: ' wagon' (ID: 90907)
  Prédit: 'num'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'num' → logprob: -0.04539291188120842
    2. ' num' → logprob: -3.1703929901123047
    3. 'car' → logprob: -6.295392990112305
    4. ' car' → logprob: -8.920392990112305
    5. ' wagon' → logprob: -8.920392990112305
    6. 'stack' → logprob: -9.295392990112305
    7. ' stack' → logprob: -9.420392990112305
    8. 'wagon' → logprob: -9.795392990112305
    9. ' ' → logprob: -11.295392990112305
    10. 'w' → logprob: -11.420392990112305

Token 315: '
' (ID: 198)
  Prédit: ' stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.4795297086238861
    2. '           ' → logprob: -1.6045297384262085
    3. 'stack' → logprob: -1.7295297384262085
    4. '(stack' → logprob: -6.604529857635498
    5. '   ' → logprob: -7.854529857635498
    6. '.stack' → logprob: -8.60452938079834
    7. ',' → logprob: -8.85452938079834
    8. '	stack' → logprob: -9.22952938079834
    9. '       ' → logprob: -9.35452938079834
    10. '               ' → logprob: -9.60452938079834

Token 316: '           ' (ID: 352)
  Prédit: ' stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.3292466104030609
    2. '           ' → logprob: -1.3292466402053833
    3. 'stack' → logprob: -4.204246520996094
    4. '   ' → logprob: -7.454246520996094
    5. '(stack' → logprob: -9.079246520996094
    6. '.stack' → logprob: -9.954246520996094
    7. '	stack' → logprob: -9.954246520996094
    8. ' ' → logprob: -10.329246520996094
    9. '    ' → logprob: -10.454246520996094
    10. '            ' → logprob: -11.204246520996094

Token 317: ' stack' (ID: 10825)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' (adapté à ' stack') → logprob: -0.0380435548722744
    2. ' stack' → logprob: -3.28804349899292
    3. '           ' → logprob: -14.038043975830078
    4. '   ' → logprob: -14.413043975830078
    5. '	stack' → logprob: -14.413043975830078
    6. 'Stack' → logprob: -16.288043975830078
    7. '_stack' → logprob: -16.913043975830078
    8. '.stack' → logprob: -17.538043975830078
    9. '       ' → logprob: -18.038043975830078
    10. '(stack' → logprob: -18.288043975830078

Token 318: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.00026217024424113333
    2. '.' → logprob: -8.250262260437012
    3. ' .' → logprob: -14.250262260437012
    4. '.app' → logprob: -16.125261306762695
    5. '.push' → logprob: -16.250261306762695
    6. '.ap' → logprob: -17.875261306762695
    7. '.extend' → logprob: -18.625261306762695
    8. 'append' → logprob: -18.625261306762695
    9. ').' → logprob: -19.125261306762695
    10. '.add' → logprob: -19.125261306762695

Token 319: '(num' (ID: 15828)
  Prédit: '(num'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(num' → logprob: -0.0015081972815096378
    2. '(' → logprob: -6.5015082359313965
    3. 'num' → logprob: -12.126507759094238
    4. ' (' → logprob: -15.626507759094238
    5. ' num' → logprob: -16.251508712768555
    6. ',num' → logprob: -16.376508712768555
    7. '(car' → logprob: -16.626508712768555
    8. '(n' → logprob: -16.626508712768555
    9. '(
' → logprob: -17.626508712768555
    10. '(nums' → logprob: -17.876508712768555

Token 320: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.5048530030981055e-06
    2. ')
' → logprob: -13.750001907348633
    3. ' )' → logprob: -14.750001907348633
    4. '<|end|>' → logprob: -18.125001907348633
    5. ')return' → logprob: -18.500001907348633
    6. '())' → logprob: -19.250001907348633
    7. '))' → logprob: -19.625001907348633
    8. ')#' → logprob: -19.875001907348633
    9. '   ' → logprob: -19.875001907348633
    10. '       ' → logprob: -20.000001907348633

Token 321: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.7367633581161499
    2. '
' → logprob: -1.23676335811615
    3. '<|end|>' → logprob: -1.48676335811615
    4. 'main' → logprob: -5.9867634773254395
    5. '```' → logprob: -6.9867634773254395
    6. '#' → logprob: -7.3617634773254395
    7. '\n' → logprob: -7.9867634773254395
    8. ' if' → logprob: -8.236763000488281
    9. '<|end|>' → logprob: -9.486763000488281
    10. ')' → logprob: -10.736763000488281

Token 322: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.02657325007021427
    2. '__' → logprob: -3.6515731811523438
    3. '_' → logprob: -8.776573181152344
    4. '_name' → logprob: -10.026573181152344
    5. ' ' → logprob: -10.151573181152344
    6. ' _' → logprob: -12.026573181152344
    7. '___' → logprob: -12.276573181152344
    8. ' ' → logprob: -12.401573181152344
    9. ' main' → logprob: -12.526573181152344
    10. ' ' → logprob: -12.776573181152344

Token 323: 'name' (ID: 897)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '__' → logprob: -0.035303689539432526
    2. ' ==' → logprob: -3.6603035926818848
    3. '==' → logprob: -4.910303592681885
    4. ' __' → logprob: -7.035303592681885
    5. '=="' → logprob: -7.785303592681885
    6. '__.__' → logprob: -8.660304069519043
    7. '.__' → logprob: -10.285304069519043
    8. '=='' → logprob: -10.785304069519043
    9. '_' → logprob: -11.285304069519043
    10. ' =="' → logprob: -11.285304069519043

Token 324: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.0005569627974182367
    2. '==' → logprob: -7.875556945800781
    3. '__.__' → logprob: -8.750556945800781
    4. '=="' → logprob: -11.625556945800781
    5. '__["' → logprob: -12.625556945800781
    6. ' ==' → logprob: -12.875556945800781
    7. '__.' → logprob: -14.125556945800781
    8. '__*/' → logprob: -14.375556945800781
    9. '__[' → logprob: -14.625556945800781
    10. '__('' → logprob: -15.000556945800781

Token 325: ' ==' (ID: 951)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.20914514362812042
    2. ' ==' → logprob: -1.959145188331604
    3. '==' → logprob: -3.0841450691223145
    4. '=="' → logprob: -6.3341450691223145
    5. '=='' → logprob: -8.834145545959473
    6. '__.__' → logprob: -10.459145545959473
    7. '.__' → logprob: -12.459145545959473
    8. ' =="' → logprob: -12.709145545959473
    9. '__["' → logprob: -12.834145545959473
    10. '=' → logprob: -13.084145545959473

Token 326: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.011079533956944942
    2. ''' → logprob: -4.51107931137085
    3. ' "__' → logprob: -10.511079788208008
    4. '__' → logprob: -12.511079788208008
    5. ' '__' → logprob: -15.261079788208008
    6. '"name' → logprob: -15.511079788208008
    7. '"user' → logprob: -16.011079788208008
    8. '"_' → logprob: -17.261079788208008
    9. '("__' → logprob: -17.636079788208008
    10. '"class' → logprob: -18.011079788208008

Token 327: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -7.362307223957032e-05
    2. '__' → logprob: -9.625073432922363
    3. '"' → logprob: -12.000073432922363
    4. ''' → logprob: -14.250073432922363
    5. 'name' → logprob: -14.375073432922363
    6. ' main' → logprob: -16.12507438659668
    7. '_main' → logprob: -17.50007438659668
    8. '(main' → logprob: -19.25007438659668
    9. 'built' → logprob: -19.25007438659668
    10. '__":
' → logprob: -19.50007438659668

Token 328: '__":
' (ID: 49892)
  Prédit: '__":
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__":
' → logprob: -0.023350181058049202
    2. '__' → logprob: -3.773350238800049
    3. '__':
' → logprob: -9.27334976196289
    4. '__.' → logprob: -12.64834976196289
    5. '__["' → logprob: -12.77334976196289
    6. '__:' → logprob: -12.89834976196289
    7. '__.__' → logprob: -14.02334976196289
    8. '__("' → logprob: -14.64834976196289
    9. '__",' → logprob: -15.27334976196289
    10. '.' → logprob: -15.52334976196289

Token 329: '   ' (ID: 271)
  Prédit: ' main'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' main' → logprob: -0.5759970545768738
    2. 'main' → logprob: -0.8259970545768738
    3. '	main' → logprob: -9.825997352600098
    4. '   ' → logprob: -12.700997352600098
    5. '_main' → logprob: -14.950997352600098
    6. '(main' → logprob: -16.70099639892578
    7. ' ' → logprob: -16.82599639892578
    8. '.main' → logprob: -17.20099639892578
    9. 'maine' → logprob: -18.57599639892578
    10. ' ' → logprob: -18.82599639892578

Token 330: ' main' (ID: 2758)
  Prédit: 'main'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' (adapté à ' main') → logprob: -7.493430894101039e-05
    2. ' main' → logprob: -9.500075340270996
    3. '	main' → logprob: -20.87507438659668
    4. 'ma' → logprob: -22.75007438659668
    5. 'mai' → logprob: -22.87507438659668
    6. 'm' → logprob: -23.12507438659668
    7. '_main' → logprob: -23.25007438659668
    8. '.main' → logprob: -24.00007438659668
    9. 'maine' → logprob: -24.12507438659668
    10. '   ' → logprob: -25.00007438659668

Token 331: '()' (ID: 416)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 329
Tokens correctement prédits (1ère position, stricte): 92
Tokens correctement prédits (1ère position, avec adaptation): 102
Tokens correctement prédits (top 10): 231
Précision stricte (1ère position): 27.96%
Précision adaptée (1ère position): 31.00%
Précision (top 10): 70.21%
================================================================================
