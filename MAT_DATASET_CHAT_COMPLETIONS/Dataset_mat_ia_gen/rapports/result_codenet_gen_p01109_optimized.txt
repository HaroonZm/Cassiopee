================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:10:29
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import sys
input = sys.stdin.readline

while True:
    n = int(input())
    if n == 0:
        break
    incomes = list(map(int, input().split()))
    total = sum(incomes)
    count = sum(1 for x in incomes if x * n <= total)
    print(count)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: '
' (ID: 198)
  → Token d'amorce (pas de prédiction)

Token 3: 'input' (ID: 2586)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.2973678708076477
    2. '\n' → logprob: -1.547367811203003
    3. '<|end|>' → logprob: -3.797367811203003
    4. '\' → logprob: -4.922368049621582
    5. 'newline' → logprob: -5.672368049621582
    6. 'import' → logprob: -5.672368049621582
    7. '<|end|>' → logprob: -6.047368049621582
    8. '
' → logprob: -6.922368049621582
    9. '```' → logprob: -6.922368049621582
    10. '' → logprob: -7.547368049621582

Token 4: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0006620417116209865
    2. '.' → logprob: -8.125661849975586
    3. '(
' → logprob: -8.750661849975586
    4. '()' → logprob: -9.500661849975586
    5. ')' → logprob: -10.375661849975586
    6. ' (' → logprob: -10.500661849975586
    7. '('' → logprob: -11.250661849975586
    8. ''' → logprob: -11.250661849975586
    9. '(

' → logprob: -11.500661849975586
    10. '```' → logprob: -12.000661849975586

Token 5: ' sys' (ID: 12228)
  Prédit: ' sys'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sys' → logprob: -0.014413704164326191
    2. 'sys' → logprob: -4.264413833618164
    3. ' input' → logprob: -8.514413833618164
    4. 'input' → logprob: -10.389413833618164
    5. ' ' → logprob: -12.014413833618164
    6. '=sys' → logprob: -12.139413833618164
    7. '	sys' → logprob: -12.389413833618164
    8. '(sys' → logprob: -12.889413833618164
    9. ' system' → logprob: -14.514413833618164
    10. ' lambda' → logprob: -16.514413833618164

Token 6: '.stdin' (ID: 93480)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.00015502817404922098
    2. '.readline' → logprob: -10.250155448913574
    3. '.import' → logprob: -10.750155448913574
    4. '.`' → logprob: -10.750155448913574
    5. '.stdin' → logprob: -11.000155448913574
    6. ' .' → logprob: -11.375155448913574
    7. '.input' → logprob: -12.375155448913574
    8. '[' → logprob: -12.500155448913574
    9. '.)' → logprob: -12.750155448913574
    10. '.
' → logprob: -12.750155448913574

Token 7: '.readline' (ID: 74673)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.49064239859580994
    2. '.readline' → logprob: -0.9906424283981323
    3. '.read' → logprob: -4.115642547607422
    4. '```' → logprob: -10.615642547607422
    5. '.readlines' → logprob: -10.865642547607422
    6. 'read' → logprob: -10.990642547607422
    7. '.Read' → logprob: -11.115642547607422
    8. ' .' → logprob: -12.240642547607422
    9. ')' → logprob: -12.490642547607422
    10. '.write' → logprob: -12.615642547607422

Token 8: '

' (ID: 279)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.1419765055179596
    2. '(' → logprob: -2.2669765949249268
    3. '()
' → logprob: -4.266976356506348
    4. '(
' → logprob: -4.766976356506348
    5. '().' → logprob: -6.516976356506348
    6. '
' → logprob: -6.516976356506348
    7. '()\' → logprob: -7.016976356506348
    8. '()

' → logprob: -7.391976356506348
    9. '\' → logprob: -7.516976356506348
    10. '\n' → logprob: -7.641976356506348

Token 9: 'while' (ID: 7032)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.18130090832710266
    2. '(' → logprob: -1.8063008785247803
    3. '().' → logprob: -6.806301116943359
    4. '()
' → logprob: -8.80630111694336
    5. '(
' → logprob: -10.05630111694336
    6. '()

' → logprob: -10.30630111694336
    7. ')' → logprob: -10.43130111694336
    8. '#' → logprob: -10.43130111694336
    9. 'def' → logprob: -10.68130111694336
    10. 'a' → logprob: -10.68130111694336

Token 10: ' True' (ID: 6432)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.0024431929923594
    2. ' True' → logprob: -6.377443313598633
    3. '  ' → logprob: -7.752443313598633
    4. ' (' → logprob: -9.252443313598633
    5. ' not' → logprob: -9.752443313598633
    6. ' )' → logprob: -10.252443313598633
    7. ''' → logprob: -10.627443313598633
    8. '(' → logprob: -11.127443313598633
    9. '"' → logprob: -11.252443313598633
    10. '    ' → logprob: -11.377443313598633

Token 11: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0015460490249097347
    2. '():' → logprob: -6.6265459060668945
    3. ' :' → logprob: -8.876545906066895
    4. ':**' → logprob: -10.126545906066895
    5. '):' → logprob: -11.376545906066895
    6. '(:' → logprob: -12.501545906066895
    7. '':'' → logprob: -12.626545906066895
    8. '":"' → logprob: -12.626545906066895
    9. ':
' → logprob: -12.751545906066895
    10. ':return' → logprob: -13.001545906066895

Token 12: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16543015837669373
    2. '    
' → logprob: -2.0404300689697266
    3. '    ' → logprob: -4.290430068969727
    4. '  
' → logprob: -5.915430068969727
    5. '     
' → logprob: -6.665430068969727
    6. ' 
' → logprob: -6.790430068969727
    7. '    
    
' → logprob: -7.415430068969727
    8. 'input' → logprob: -7.665430068969727
    9. '(' → logprob: -7.665430068969727
    10. ':' → logprob: -7.790430068969727

Token 13: ' n' (ID: 297)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.5712119936943054
    2. ' line' → logprob: -1.4462120532989502
    3. 'user' → logprob: -2.44621205329895
    4. '   ' → logprob: -2.57121205329895
    5. 'data' → logprob: -4.571211814880371
    6. '    ' → logprob: -4.696211814880371
    7. ' user' → logprob: -4.821211814880371
    8. 'text' → logprob: -5.946211814880371
    9. ' ' → logprob: -6.321211814880371
    10. 'inp' → logprob: -7.196211814880371

Token 14: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.1151089295744896
    2. '=' → logprob: -2.6151089668273926
    3. ' ==' → logprob: -3.6151089668273926
    4. ' ' → logprob: -4.990108966827393
    5. ' :=' → logprob: -7.240108966827393
    6. '==' → logprob: -7.865108966827393
    7. '=int' → logprob: -8.615108489990234
    8. '=input' → logprob: -9.240108489990234
    9. ' >' → logprob: -9.740108489990234
    10. '.' → logprob: -9.740108489990234

Token 15: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -1.144846796989441
    2. ' input' → logprob: -1.144846796989441
    3. 'int' → logprob: -1.644846796989441
    4. 'input' → logprob: -1.769846796989441
    5. ' ' → logprob: -10.39484691619873
    6. '=int' → logprob: -11.64484691619873
    7. '=input' → logprob: -12.64484691619873
    8. '   ' → logprob: -12.76984691619873
    9. 'in' → logprob: -13.76984691619873
    10. '(int' → logprob: -14.39484691619873

Token 16: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0042832959443330765
    2. '(' → logprob: -5.504283428192139
    3. 'input' → logprob: -8.50428295135498
    4. ' (' → logprob: -14.37928295135498
    5. ' input' → logprob: -14.62928295135498
    6. '(in' → logprob: -14.62928295135498
    7. '()' → logprob: -15.12928295135498
    8. '(
' → logprob: -15.87928295135498
    9. '=input' → logprob: -16.379283905029297
    10. '(i' → logprob: -17.129283905029297

Token 17: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.03491085022687912
    2. '()))' → logprob: -3.9099109172821045
    3. ')' → logprob: -4.534910678863525
    4. '()' → logprob: -5.909910678863525
    5. '))' → logprob: -7.159910678863525
    6. '(' → logprob: -11.034911155700684
    7. '().' → logprob: -11.284911155700684
    8. ' ())' → logprob: -11.409911155700684
    9. '())
' → logprob: -12.909911155700684
    10. '()),' → logprob: -14.034911155700684

Token 18: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09506575018167496
    2. '<|end|>' → logprob: -3.3450658321380615
    3. ' ' → logprob: -3.9700658321380615
    4. ' if' → logprob: -4.470065593719482
    5. '    ' → logprob: -4.845065593719482
    6. ')' → logprob: -5.220065593719482
    7. '\n' → logprob: -5.595065593719482
    8. '    
' → logprob: -5.970065593719482
    9. '  ' → logprob: -6.470065593719482
    10. '
' → logprob: -6.845065593719482

Token 19: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5170437693595886
    2. ' ' → logprob: -1.8920438289642334
    3. ' if' → logprob: -2.3920438289642334
    4. '<|end|>' → logprob: -2.8920438289642334
    5. '    ' → logprob: -3.1420438289642334
    6. '\n' → logprob: -3.6420438289642334
    7. '    
' → logprob: -5.017043590545654
    8. ' 
' → logprob: -5.017043590545654
    9. 'if' (adapté à ' if') → logprob: -5.267043590545654
    10. '  ' → logprob: -5.392043590545654

Token 20: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.03832948952913284
    2. ' not' → logprob: -3.288329601287842
    3. ' ' → logprob: -8.538329124450684
    4. 'n' → logprob: -9.413329124450684
    5. 'not' → logprob: -11.663329124450684
    6. ' ' → logprob: -13.413329124450684
    7. '	n' → logprob: -14.913329124450684
    8. ' n't' → logprob: -17.163330078125
    9. '  ' → logprob: -17.413330078125
    10. ' н' → logprob: -17.538330078125

Token 21: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.004293976817280054
    2. '==' → logprob: -5.504293918609619
    3. ' <=' → logprob: -8.754294395446777
    4. ' <' → logprob: -10.379294395446777
    5. ' ' → logprob: -11.379294395446777
    6. ')' → logprob: -12.379294395446777
    7. ' =' → logprob: -13.004294395446777
    8. '=' → logprob: -13.379294395446777
    9. '<=' → logprob: -13.379294395446777
    10. ' ===' → logprob: -13.629294395446777

Token 22: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.023245712742209435
    2. '0' → logprob: -3.7732458114624023
    3. ' ' → logprob: -16.023244857788086
    4. '  ' → logprob: -16.148244857788086
    5. ' EOF' → logprob: -17.835744857788086
    6. '   ' → logprob: -17.898244857788086
    7. '    ' → logprob: -18.273244857788086
    8. ' a' → logprob: -18.523244857788086
    9. '_' → logprob: -18.648244857788086
    10. '=' → logprob: -18.710744857788086

Token 23: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00033581978641450405
    2. ' ' → logprob: -8.000335693359375
    3. '   ' → logprob: -16.250335693359375
    4. '-' → logprob: -16.375335693359375
    5. '```' → logprob: -16.375335693359375
    6. '  ' → logprob: -16.625335693359375
    7. '    ' → logprob: -16.875335693359375
    8. '1' → logprob: -17.250335693359375
    9. ')' → logprob: -17.375335693359375
    10. ''' → logprob: -18.062835693359375

Token 24: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00013250234769657254
    2. ':
' → logprob: -9.00013256072998
    3. '   ' → logprob: -12.12513256072998
    4. ' :' → logprob: -13.25013256072998
    5. ':return' → logprob: -14.37513256072998
    6. ' break' → logprob: -14.87513256072998
    7. '	break' → logprob: -15.12513256072998
    8. '       ' → logprob: -15.25013256072998
    9. '.' → logprob: -16.750131607055664
    10. '):' → logprob: -16.875131607055664

Token 25: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.000985412043519318
    2. '   ' → logprob: -7.125985622406006
    3. ' break' → logprob: -9.125985145568848
    4. '	break' → logprob: -10.000985145568848
    5. 'break' → logprob: -11.375985145568848
    6. '      ' → logprob: -12.875985145568848
    7. '    ' → logprob: -13.250985145568848
    8. '\n' → logprob: -13.375985145568848
    9. '<|end|>' → logprob: -13.375985145568848
    10. ':' → logprob: -13.500985145568848

Token 26: ' break' (ID: 2338)
  Prédit: ' break'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' break' → logprob: -0.2416168749332428
    2. '       ' → logprob: -1.6166168451309204
    3. 'break' (adapté à ' break') → logprob: -4.616616725921631
    4. '   ' → logprob: -5.241616725921631
    5. '	break' → logprob: -7.241616725921631
    6. '    ' → logprob: -9.866617202758789
    7. '\n' → logprob: -10.491617202758789
    8. '_break' → logprob: -10.991617202758789
    9. '```' → logprob: -11.116617202758789
    10. '     ' → logprob: -11.241617202758789

Token 27: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06242808699607849
    2. '\n' → logprob: -3.4374279975891113
    3. '<|end|>' → logprob: -4.437427997589111
    4. '    
' → logprob: -4.562427997589111
    5. '\' → logprob: -6.687427997589111
    6. ')' → logprob: -6.937427997589111
    7. ':' → logprob: -7.062427997589111
    8. '  ' → logprob: -7.562427997589111
    9. '    ' → logprob: -7.812427997589111
    10. '
' → logprob: -7.937427997589111

Token 28: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.012564745731651783
    2. '    
' → logprob: -4.512564659118652
    3. '    ' → logprob: -7.012564659118652
    4. '  ' → logprob: -9.012564659118652
    5. '<|end|>' → logprob: -9.137564659118652
    6. ' ' → logprob: -9.762564659118652
    7. ')' → logprob: -9.762564659118652
    8. 'print' → logprob: -10.012564659118652
    9. '  
' → logprob: -10.262564659118652
    10. '\n' → logprob: -10.262564659118652

Token 29: ' incomes' (ID: 108061)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.27060627937316895
    2. ' ' → logprob: -1.645606279373169
    3. '    ' → logprob: -4.27060604095459
    4. ':' → logprob: -5.27060604095459
    5. '<|end|>' → logprob: -5.27060604095459
    6. ')' → logprob: -5.39560604095459
    7. '    
' → logprob: -5.64560604095459
    8. 'print' → logprob: -5.89560604095459
    9. '  ' → logprob: -6.14560604095459
    10. '#' → logprob: -6.77060604095459

Token 30: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.034920528531074524
    2. '=' → logprob: -3.6599204540252686
    3. '[' → logprob: -5.159920692443848
    4. '_' → logprob: -7.284920692443848
    5. '.' → logprob: -7.284920692443848
    6. '[:]' → logprob: -7.409920692443848
    7. ' ' → logprob: -7.909920692443848
    8. ')' → logprob: -9.159920692443848
    9. '   ' → logprob: -9.534920692443848
    10. 's' → logprob: -9.534920692443848

Token 31: ' list' (ID: 1562)
  Prédit: ' list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.12831301987171173
    2. 'list' → logprob: -2.5033130645751953
    3. ' [' → logprob: -4.128313064575195
    4. '[' → logprob: -4.628313064575195
    5. ' []' → logprob: -4.878313064575195
    6. '[]' → logprob: -5.503313064575195
    7. '[list' → logprob: -7.003313064575195
    8. '[input' → logprob: -10.003313064575195
    9. '[int' → logprob: -11.003313064575195
    10. '=list' → logprob: -11.378313064575195

Token 32: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.2525879740715027
    2. '(' → logprob: -1.5025880336761475
    3. '(input' → logprob: -8.127588272094727
    4. '(int' → logprob: -8.127588272094727
    5. '(range' → logprob: -10.127588272094727
    6. '()' → logprob: -11.127588272094727
    7. '(
' → logprob: -12.752588272094727
    8. '(filter' → logprob: -13.502588272094727
    9. '(

' → logprob: -13.627588272094727
    10. 'map' → logprob: -13.752588272094727

Token 33: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.006531938444823027
    2. '(' → logprob: -5.381531715393066
    3. '(input' → logprob: -6.881531715393066
    4. '(lambda' → logprob: -7.631531715393066
    5. 'int' → logprob: -8.631531715393066
    6. ')' → logprob: -8.756531715393066
    7. '```' → logprob: -11.006531715393066
    8. '(str' → logprob: -11.256531715393066
    9. '<int' → logprob: -11.631531715393066
    10. ',int' → logprob: -12.131531715393066

Token 34: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.022191086784005165
    2. '(' → logprob: -4.147191047668457
    3. ',input' → logprob: -5.147191047668457
    4. ',' → logprob: -8.647191047668457
    5. 'input' → logprob: -9.522191047668457
    6. ')' → logprob: -10.022191047668457
    7. '=input' → logprob: -12.147191047668457
    8. ' input' → logprob: -12.397191047668457
    9. '))' → logprob: -12.522191047668457
    10. '(
' → logprob: -12.647191047668457

Token 35: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.20141616463661194
    2. ' input' → logprob: -1.7014161348342896
    3. ',input' → logprob: -13.701416015625
    4. '(input' → logprob: -13.826416015625
    5. '	input' → logprob: -14.951416015625
    6. '=input' → logprob: -15.701416015625
    7. ' ' → logprob: -16.701416015625
    8. ')' → logprob: -16.701416015625
    9. '[input' → logprob: -16.826416015625
    10. '<input' → logprob: -16.951416015625

Token 36: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -3.531315314830863e-06
    2. '()' → logprob: -12.625003814697266
    3. ' ().' → logprob: -16.750003814697266
    4. '())' → logprob: -17.125003814697266
    5. '()))' → logprob: -17.250003814697266
    6. '(' → logprob: -18.500003814697266
    7. '())))' → logprob: -19.375003814697266
    8. '()
' → logprob: -19.750003814697266
    9. '()));' → logprob: -19.750003814697266
    10. ')' → logprob: -19.875003814697266

Token 37: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.030636459589004517
    2. 'strip' → logprob: -3.5306365489959717
    3. 'rstrip' → logprob: -7.030636310577393
    4. ' split' → logprob: -13.90563678741455
    5. '(split' → logprob: -16.030635833740234
    6. ' strip' → logprob: -16.905635833740234
    7. 'rs' → logprob: -17.030635833740234
    8. 'spl' → logprob: -17.655635833740234
    9. ')' → logprob: -18.405635833740234
    10. 'read' → logprob: -18.655635833740234

Token 38: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.02878510020673275
    2. '))' → logprob: -4.278785228729248
    3. '())' → logprob: -4.528785228729248
    4. '()' → logprob: -5.778785228729248
    5. '(' → logprob: -7.778785228729248
    6. ')' → logprob: -8.77878475189209
    7. '()))
' → logprob: -10.27878475189209
    8. '())))' → logprob: -12.27878475189209
    9. '   ' → logprob: -12.65378475189209
    10. '()));' → logprob: -12.77878475189209

Token 39: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3135545551776886
    2. 'total' → logprob: -2.313554525375366
    3. ' total' → logprob: -2.688554525375366
    4. 'sum' → logprob: -3.313554525375366
    5. '    
' → logprob: -4.188554763793945
    6. 'balance' → logprob: -4.688554763793945
    7. ' sum' → logprob: -4.938554763793945
    8. 's' → logprob: -5.188554763793945
    9. 'diff' → logprob: -5.438554763793945
    10. '
' → logprob: -6.063554763793945

Token 40: ' total' (ID: 3609)
  Prédit: 'total'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'total' (adapté à ' total') → logprob: -1.2266898155212402
    2. 'avg' → logprob: -1.8516898155212402
    3. 'average' → logprob: -1.9766898155212402
    4. 'mean' → logprob: -2.1016898155212402
    5. 'median' → logprob: -2.7266898155212402
    6. ' total' → logprob: -2.8516898155212402
    7. '   ' → logprob: -2.8516898155212402
    8. ' avg' → logprob: -4.10168981552124
    9. ' mean' → logprob: -4.10168981552124
    10. 'sum' → logprob: -4.22668981552124

Token 41: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.04657384008169174
    2. '_income' → logprob: -3.6715738773345947
    3. ' =' → logprob: -4.796573638916016
    4. '_sum' → logprob: -5.171573638916016
    5. '_space' → logprob: -6.421573638916016
    6. '(' → logprob: -6.921573638916016
    7. '=' → logprob: -7.171573638916016
    8. '_in' → logprob: -7.796573638916016
    9. '_amount' → logprob: -7.796573638916016
    10. '_money' → logprob: -8.046573638916016

Token 42: ' sum' (ID: 4215)
  Prédit: ' sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sum' → logprob: -0.2256818562746048
    2. 'sum' → logprob: -1.6006819009780884
    3. '0' → logprob: -8.350682258605957
    4. ' ' → logprob: -11.100682258605957
    5. '   ' → logprob: -11.600682258605957
    6. '(sum' → logprob: -12.475682258605957
    7. '	sum' → logprob: -13.350682258605957
    8. '=sum' → logprob: -13.475682258605957
    9. '  ' → logprob: -14.725682258605957
    10. ' suma' → logprob: -15.725682258605957

Token 43: '(in' (ID: 9573)
  Prédit: '(in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(in' → logprob: -0.018154622986912727
    2. '(' → logprob: -4.018154621124268
    3. '(i' → logprob: -13.393155097961426
    4. ' (' → logprob: -13.643155097961426
    5. '(s' → logprob: -14.143155097961426
    6. '(n' → logprob: -14.393155097961426
    7. '(total' → logprob: -15.143155097961426
    8. '(
' → logprob: -17.01815414428711
    9. '(amount' → logprob: -17.01815414428711
    10. '(In' → logprob: -17.01815414428711

Token 44: 'comes' (ID: 9304)
  Prédit: 'comes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'comes' → logprob: -0.0015514022670686245
    2. 'omes' → logprob: -6.501551628112793
    3. '```' → logprob: -10.501551628112793
    4. '   ' → logprob: -11.876551628112793
    5. 'come' → logprob: -12.001551628112793
    6. 'in' → logprob: -13.501551628112793
    7. 'com' → logprob: -13.626551628112793
    8. '[' → logprob: -14.126551628112793
    9. '``' → logprob: -14.126551628112793
    10. 's' → logprob: -14.251551628112793

Token 45: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00513923866674304
    2. ' )' → logprob: -5.630139350891113
    3. '   ' → logprob: -7.380139350891113
    4. ' -' → logprob: -7.880139350891113
    5. ')
' → logprob: -7.880139350891113
    6. '-' → logprob: -9.255139350891113
    7. ' )
' → logprob: -11.380139350891113
    8. '))' → logprob: -11.380139350891113
    9. '    ' → logprob: -12.505139350891113
    10. '>' → logprob: -12.505139350891113

Token 46: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.074835181236267
    2. ' average' → logprob: -1.699835181236267
    3. ' avg' → logprob: -2.1998353004455566
    4. ' mean' → logprob: -2.5748353004455566
    5. ' median' → logprob: -2.5748353004455566
    6. '    ' → logprob: -3.5748353004455566
    7. '    
' → logprob: -3.6998353004455566
    8. 'avg' → logprob: -3.9498353004455566
    9. 'average' → logprob: -3.9498353004455566
    10. ' equal' → logprob: -4.074835300445557

Token 47: ' count' (ID: 3605)
  Prédit: 'avg'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'avg' → logprob: -1.0450857877731323
    2. 'average' → logprob: -1.0450857877731323
    3. 'mean' → logprob: -1.7950857877731323
    4. '   ' → logprob: -3.170085906982422
    5. ' average' → logprob: -4.045085906982422
    6. ' avg' → logprob: -4.170085906982422
    7. ' mean' → logprob: -4.295085906982422
    8. 'ave' → logprob: -4.420085906982422
    9. 'equal' → logprob: -5.670085906982422
    10. 'median' → logprob: -6.045085906982422

Token 48: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.39129558205604553
    2. '=' → logprob: -1.1412955522537231
    3. '_' → logprob: -5.641295433044434
    4. '_positive' → logprob: -8.516295433044434
    5. ' ' → logprob: -8.766295433044434
    6. ' +=' → logprob: -9.391295433044434
    7. 's' → logprob: -9.516295433044434
    8. '_equal' → logprob: -9.766295433044434
    9. '(' → logprob: -10.016295433044434
    10. '_pos' → logprob: -10.266295433044434

Token 49: ' sum' (ID: 4215)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.09828933328390121
    2. ' ' → logprob: -3.0982892513275146
    3. ' sum' → logprob: -3.8482892513275146
    4. 'sum' → logprob: -4.098289489746094
    5. ' len' → logprob: -5.973289489746094
    6. 'len' → logprob: -6.223289489746094
    7. ' total' → logprob: -6.473289489746094
    8. ' n' → logprob: -6.848289489746094
    9. 'total' → logprob: -6.973289489746094
    10. ' (' → logprob: -7.973289489746094

Token 50: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.09569296985864639
    2. '(i' → logprob: -3.4706928730010986
    3. '(in' → logprob: -3.4706928730010986
    4. '(x' → logprob: -3.8456928730010986
    5. '((' → logprob: -4.970693111419678
    6. '(abs' → logprob: -9.09569263458252
    7. '(lambda' → logprob: -9.22069263458252
    8. '(n' → logprob: -9.22069263458252
    9. '([' → logprob: -9.34569263458252
    10. '(count' → logprob: -9.59569263458252

Token 51: '1' (ID: 16)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6747750639915466
    2. '1' → logprob: -1.0497751235961914
    3. 'x' → logprob: -3.1747751235961914
    4. '(x' → logprob: -3.6747751235961914
    5. '(i' → logprob: -3.6747751235961914
    6. 'income' → logprob: -3.7997751235961914
    7. '(in' → logprob: -5.174775123596191
    8. '[' → logprob: -5.299775123596191
    9. '((' → logprob: -6.174775123596191
    10. 'in' → logprob: -6.174775123596191

Token 52: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.1559629738330841
    2. '(i' → logprob: -3.2809629440307617
    3. ' i' → logprob: -3.2809629440307617
    4. '   ' → logprob: -4.030962944030762
    5. ')' → logprob: -4.155962944030762
    6. ' if' → logprob: -4.405962944030762
    7. 'for' → logprob: -4.655962944030762
    8. ' x' → logprob: -5.905962944030762
    9. '[i' → logprob: -6.155962944030762
    10. ' income' → logprob: -6.155962944030762

Token 53: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -1.6044152975082397
    2. ' income' → logprob: -1.6044152975082397
    3. ' i' → logprob: -1.7294152975082397
    4. ' x' → logprob: -1.7294152975082397
    5. 'income' → logprob: -1.8544152975082397
    6. 'i' → logprob: -2.4794154167175293
    7. 'inc' → logprob: -6.979415416717529
    8. '   ' → logprob: -7.604415416717529
    9. ' ' → logprob: -7.729415416717529
    10. 'in' → logprob: -8.604414939880371

Token 54: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.008633476682007313
    2. 'in' → logprob: -4.758633613586426
    3. ' ' → logprob: -11.008633613586426
    4. '   ' → logprob: -14.258633613586426
    5. '  ' → logprob: -15.258633613586426
    6. '	in' → logprob: -15.258633613586426
    7. '    ' → logprob: -15.383633613586426
    8. ',' → logprob: -15.383633613586426
    9. 'import' → logprob: -16.13363265991211
    10. 'if' → logprob: -16.32113265991211

Token 55: ' incomes' (ID: 108061)
  Prédit: ' incomes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' incomes' → logprob: -0.10032819211483002
    2. 'in' → logprob: -2.350328207015991
    3. 'income' → logprob: -10.10032844543457
    4. ' income' → logprob: -10.47532844543457
    5. ' ' → logprob: -10.85032844543457
    6. ' in' → logprob: -11.72532844543457
    7. '   ' → logprob: -11.97532844543457
    8. ' ingresos' → logprob: -12.22532844543457
    9. ' incom' → logprob: -12.35032844543457
    10. '  ' → logprob: -13.10032844543457

Token 56: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.00596636114642024
    2. 'if' → logprob: -5.1309661865234375
    3. ' ' → logprob: -10.255966186523438
    4. '    ' → logprob: -13.380966186523438
    5. '   ' → logprob: -14.755966186523438
    6. '  ' → logprob: -15.630966186523438
    7. ' in' → logprob: -16.005966186523438
    8. ' x' → logprob: -16.255966186523438
    9. ' for' → logprob: -16.880966186523438
    10. '	if' → logprob: -16.880966186523438

Token 57: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.16024211049079895
    2. 'x' → logprob: -1.9102420806884766
    3. '    ' → logprob: -11.785242080688477
    4. '   ' → logprob: -12.160242080688477
    5. '	x' → logprob: -13.285242080688477
    6. ' ' → logprob: -13.535242080688477
    7. '  ' → logprob: -13.785242080688477
    8. '>x' → logprob: -15.597742080688477
    9. '(x' → logprob: -16.035242080688477
    10. ' ' → logprob: -16.222742080688477

Token 58: ' *' (ID: 425)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>' → logprob: -0.10917564481496811
    2. ' >' → logprob: -2.359175682067871
    3. '<' → logprob: -4.859175682067871
    4. '*' → logprob: -7.484175682067871
    5. ' *' → logprob: -8.359175682067871
    6. ' ' → logprob: -8.484175682067871
    7. ' <' → logprob: -8.859175682067871
    8. '><' → logprob: -11.984175682067871
    9. '>Total' → logprob: -12.609175682067871
    10. '<int' → logprob: -12.984175682067871

Token 59: ' n' (ID: 297)
  Prédit: ' count'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' count' → logprob: -0.877174973487854
    2. ' n' → logprob: -1.502174973487854
    3. 'count' → logprob: -2.0021748542785645
    4. ' total' → logprob: -2.0021748542785645
    5. 'total' → logprob: -3.0021748542785645
    6. 'n' → logprob: -3.3771748542785645
    7. ' ' → logprob: -5.3771748542785645
    8. ' len' → logprob: -6.8771748542785645
    9. '100' → logprob: -7.3771748542785645
    10. 'len' → logprob: -7.8771748542785645

Token 60: ' <=' (ID: 5017)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '>' → logprob: -0.06677522510290146
    2. ' >' → logprob: -2.816775321960449
    3. '<' → logprob: -5.441775321960449
    4. ' ' → logprob: -8.56677532196045
    5. ' <' → logprob: -8.56677532196045
    6. '">' → logprob: -11.06677532196045
    7. '><' → logprob: -11.94177532196045
    8. '  ' → logprob: -11.94177532196045
    9. '<n' → logprob: -11.94177532196045
    10. '2' → logprob: -12.94177532196045

Token 61: ' total' (ID: 3609)
  Prédit: 'total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'total' → logprob: -0.07815250754356384
    2. ' total' → logprob: -2.8281524181365967
    3. '(total' → logprob: -4.203152656555176
    4. '   ' → logprob: -7.453152656555176
    5. ' (' → logprob: -8.578152656555176
    6. '(' → logprob: -8.828152656555176
    7. ' ' → logprob: -9.203152656555176
    8. '  ' → logprob: -10.328152656555176
    9. '	total' → logprob: -11.328152656555176
    10. 'tot' → logprob: -11.703152656555176

Token 62: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.47809818387031555
    2. ' )' → logprob: -0.9780981540679932
    3. '   ' → logprob: -5.853098392486572
    4. ' )
' → logprob: -7.978098392486572
    5. '    ' → logprob: -8.478097915649414
    6. ')
' → logprob: -8.478097915649414
    7. '-' → logprob: -8.728097915649414
    8. ' -' → logprob: -9.103097915649414
    9. ' ' → logprob: -10.728097915649414
    10. '  ' → logprob: -11.103097915649414

Token 63: '   ' (ID: 271)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.5203967094421387
    2. '   ' → logprob: -1.1453967094421387
    3. '    
' → logprob: -3.7703967094421387
    4. '<|end|>' → logprob: -4.020396709442139
    5. '
' → logprob: -4.395396709442139
    6. ')' → logprob: -4.520396709442139
    7. ' 
' → logprob: -4.645396709442139
    8. ' ' → logprob: -5.770396709442139
    9. '  
' → logprob: -5.770396709442139
    10. '    ' → logprob: -6.645396709442139

Token 64: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.20636612176895142
    2. 'print' (adapté à ' print') → logprob: -2.3313660621643066
    3. '\n' → logprob: -3.2063660621643066
    4. '
' → logprob: -3.9563660621643066
    5. ')' → logprob: -4.206366062164307
    6. ' print' → logprob: -4.831366062164307
    7. '    
' → logprob: -5.706366062164307
    8. ' 
' → logprob: -6.706366062164307
    9. ')
' → logprob: -7.706366062164307
    10. '   
' → logprob: -8.206366539001465

Token 65: '(count' (ID: 25892)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.11320176720619202
    2. '(count' → logprob: -2.238201856613159
    3. '('' → logprob: -8.613202095031738
    4. '("' → logprob: -9.363202095031738
    5. '((' → logprob: -9.988202095031738
    6. '(f' → logprob: -10.488202095031738
    7. '(
' → logprob: -11.488202095031738
    8. ' (' → logprob: -11.613202095031738
    9. '()' → logprob: -11.863202095031738
    10. '(`' → logprob: -13.113202095031738

Token 66: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.004284245893359184
    2. ' )' → logprob: -6.004284381866455
    3. '-' → logprob: -6.504284381866455
    4. ' -' → logprob: -8.629283905029297
    5. '`)' → logprob: -10.254283905029297
    6. ')
' → logprob: -10.379283905029297
    7. '-)' → logprob: -10.754283905029297
    8. '   ' → logprob: -11.004283905029297
    9. ')`' → logprob: -12.129283905029297
    10. '')' → logprob: -12.504283905029297


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 64
Tokens correctement prédits (1ère position, stricte): 32
Tokens correctement prédits (1ère position, avec adaptation): 33
Tokens correctement prédits (top 10): 56
Précision stricte (1ère position): 50.00%
Précision adaptée (1ère position): 51.56%
Précision (top 10): 87.50%
================================================================================
