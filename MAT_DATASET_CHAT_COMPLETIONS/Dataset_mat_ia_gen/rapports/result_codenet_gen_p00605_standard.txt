================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:16:16
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
while True:
    N, K = map(int, input().split())
    if N == 0 and K == 0:
        break
    S = list(map(int, input().split()))
    B = [list(map(int, input().split())) for _ in range(N)]
    total_needed = [0]*K
    for i in range(N):
        for j in range(K):
            total_needed[j] += B[i][j]
    print("Yes" if all(total_needed[j] <= S[j] for j in range(K)) else "No")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'while' (ID: 7032)
  → Token d'amorce (pas de prédiction)

Token 1: ' True' (ID: 6432)
  → Token d'amorce (pas de prédiction)

Token 2: ':
' (ID: 734)
  → Token d'amorce (pas de prédiction)

Token 3: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6668558716773987
    2. ' ' → logprob: -2.041855812072754
    3. '\' → logprob: -2.416855812072754
    4. '    ' → logprob: -2.916855812072754
    5. '\n' → logprob: -2.916855812072754
    6. '    
' → logprob: -3.041855812072754
    7. '```' → logprob: -3.541855812072754
    8. ' 
' → logprob: -3.666855812072754
    9. '  
' → logprob: -4.166855812072754
    10. '     
' → logprob: -5.541855812072754

Token 4: ' N' (ID: 478)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.30723127722740173
    2. '    ' → logprob: -1.6822313070297241
    3. '```' → logprob: -3.5572311878204346
    4. ' ' → logprob: -3.8072311878204346
    5. '       ' → logprob: -4.807231426239014
    6. '    
' → logprob: -5.932231426239014
    7. '  ' → logprob: -6.182231426239014
    8. '\' → logprob: -6.182231426239014
    9. '\n' → logprob: -6.682231426239014
    10. '\t' → logprob: -6.807231426239014

Token 5: ',' (ID: 11)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'u' → logprob: -1.2873008251190186
    2. '=' → logprob: -1.5373008251190186
    3. 'o' → logprob: -1.5373008251190186
    4. '+' → logprob: -2.0373008251190186
    5. '>' → logprob: -3.1623008251190186
    6. '   ' → logprob: -3.6623008251190186
    7. '_' → logprob: -3.6623008251190186
    8. '-' → logprob: -4.287301063537598
    9. 'e' → logprob: -4.662301063537598
    10. '.' → logprob: -4.787301063537598

Token 6: ' K' (ID: 658)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.46569499373435974
    2. ' input' → logprob: -1.5906950235366821
    3. '"' → logprob: -3.5906949043273926
    4. ' ' → logprob: -3.9656949043273926
    5. 'space' → logprob: -4.090694904327393
    6. '=input' → logprob: -4.340694904327393
    7. '  ' → logprob: -4.465694904327393
    8. ' =' → logprob: -4.590694904327393
    9. 's' → logprob: -4.715694904327393
    10. ''' → logprob: -4.840694904327393

Token 7: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.4293295443058014
    2. ' =' → logprob: -1.054329514503479
    3. ',' → logprob: -7.4293293952941895
    4. '=input' → logprob: -10.929329872131348
    5. ')' → logprob: -11.804329872131348
    6. ' ,' → logprob: -12.429329872131348
    7. ' ' → logprob: -12.804329872131348
    8. '=int' → logprob: -14.179329872131348
    9. '  ' → logprob: -15.179329872131348
    10. '=

' → logprob: -15.429329872131348

Token 8: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.01756327971816063
    2. ' input' → logprob: -4.642563343048096
    3. 'map' → logprob: -4.892563343048096
    4. 'input' → logprob: -8.892562866210938
    5. ' ' → logprob: -9.892562866210938
    6. ' list' → logprob: -10.142562866210938
    7. ' int' → logprob: -10.267562866210938
    8. '0' → logprob: -11.892562866210938
    9. 'int' → logprob: -13.642562866210938
    10. ' [' → logprob: -13.642562866210938

Token 9: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.5805222988128662
    2. '(' → logprob: -0.8305222988128662
    3. '(str' → logprob: -5.580522537231445
    4. '(lambda' → logprob: -7.455522537231445
    5. '(input' → logprob: -8.830522537231445
    6. '(
' → logprob: -10.455522537231445
    7. '<int' → logprob: -11.455522537231445
    8. '(list' → logprob: -11.705522537231445
    9. '(in' → logprob: -12.205522537231445
    10. '[int' → logprob: -12.455522537231445

Token 10: ',' (ID: 11)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.7992497086524963
    2. '(input' → logprob: -0.9242497086524963
    3. ')' → logprob: -1.9242496490478516
    4. ' input' → logprob: -5.299249649047852
    5. '(' → logprob: -6.549249649047852
    6. ',input' → logprob: -7.174249649047852
    7. '=input' → logprob: -9.299249649047852
    8. '<input' → logprob: -9.674249649047852
    9. ',' → logprob: -9.924249649047852
    10. '[input' → logprob: -10.549249649047852

Token 11: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.31327807903289795
    2. ' input' → logprob: -1.313278079032898
    3. ')' → logprob: -11.313278198242188
    4. '(input' → logprob: -13.438278198242188
    5. '   ' → logprob: -13.813278198242188
    6. '	input' → logprob: -14.688278198242188
    7. '=input' → logprob: -15.188278198242188
    8. ' ' → logprob: -15.313278198242188
    9. ',input' → logprob: -15.313278198242188
    10. ' )' → logprob: -15.438278198242188

Token 12: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.38817572593688965
    2. '()' → logprob: -1.3881757259368896
    3. '().' → logprob: -2.6381757259368896
    4. '()))' → logprob: -8.638175964355469
    5. '());' → logprob: -8.763175964355469
    6. ')' → logprob: -8.763175964355469
    7. '(' → logprob: -10.388175964355469
    8. '();)' → logprob: -10.638175964355469
    9. ' ())' → logprob: -10.763175964355469
    10. '('' → logprob: -11.013175964355469

Token 13: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.000720891694072634
    2. 'strip' → logprob: -7.250720977783203
    3. 'rstrip' → logprob: -11.500720977783203
    4. ' split' → logprob: -14.250720977783203
    5. '(split' → logprob: -16.125720977783203
    6. 'read' → logprob: -16.750720977783203
    7. ')' → logprob: -17.375720977783203
    8. 'spl' → logprob: -18.000720977783203
    9. 'replace' → logprob: -18.375720977783203
    10. 'startswith' → logprob: -19.500720977783203

Token 14: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7574194669723511
    2. '))' → logprob: -1.382419466972351
    3. '())' → logprob: -1.382419466972351
    4. '()))' → logprob: -3.6324195861816406
    5. '()' → logprob: -6.007419586181641
    6. '('' → logprob: -9.63241958618164
    7. '(' → logprob: -9.75741958618164
    8. ''))' → logprob: -10.38241958618164
    9. ')))' → logprob: -10.75741958618164
    10. '')' → logprob: -11.13241958618164

Token 15: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.21849098801612854
    2. ' if' → logprob: -2.5934910774230957
    3. '   ' → logprob: -2.7184910774230957
    4. ')' → logprob: -3.9684910774230957
    5. '<|end|>' → logprob: -4.468491077423096
    6. 'if' → logprob: -5.218491077423096
    7. ' ' → logprob: -5.218491077423096
    8. '):' → logprob: -5.468491077423096
    9. '```' → logprob: -5.843491077423096
    10. '    ' → logprob: -6.093491077423096

Token 16: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.344789057970047
    2. ' if' → logprob: -1.9697890281677246
    3. '       ' → logprob: -2.7197890281677246
    4. 'if' (adapté à ' if') → logprob: -3.4697890281677246
    5. '#' → logprob: -4.469789028167725
    6. ')' → logprob: -4.469789028167725
    7. '    ' → logprob: -4.969789028167725
    8. 'i' → logprob: -5.219789028167725
    9. '<|end|>' → logprob: -5.219789028167725
    10. ' ' → logprob: -5.969789028167725

Token 17: ' N' (ID: 478)
  Prédit: ' N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' N' → logprob: -0.3075578510761261
    2. ' K' → logprob: -1.4325578212738037
    3. 'N' → logprob: -3.9325578212738037
    4. 'K' → logprob: -5.807558059692383
    5. ' ' → logprob: -6.307558059692383
    6. ' not' → logprob: -6.432558059692383
    7. ' ' → logprob: -10.932558059692383
    8. 'not' → logprob: -11.307558059692383
    9. '  ' → logprob: -14.557558059692383
    10. ' (' → logprob: -15.307558059692383

Token 18: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.5360684990882874
    2. ' <=' → logprob: -1.9110684394836426
    3. ' <' → logprob: -1.9110684394836426
    4. '==' → logprob: -2.6610684394836426
    5. '<' → logprob: -4.161068439483643
    6. ' >' → logprob: -4.411068439483643
    7. '>' → logprob: -5.161068439483643
    8. '<=' → logprob: -5.286068439483643
    9. ' ' → logprob: -5.411068439483643
    10. ' >=' → logprob: -5.786068439483643

Token 19: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3485340178012848
    2. '0' → logprob: -1.2235339879989624
    3. ' K' → logprob: -9.973533630371094
    4. 'K' → logprob: -10.973533630371094
    5. '-' → logprob: -11.723533630371094
    6. ' -' → logprob: -11.973533630371094
    7. '  ' → logprob: -12.911033630371094
    8. '1' → logprob: -13.036033630371094
    9. '=' → logprob: -13.848533630371094
    10. '   ' → logprob: -14.036033630371094

Token 20: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0024843348655849695
    2. ' ' → logprob: -6.002484321594238
    3. '-' → logprob: -12.377484321594238
    4. 'K' → logprob: -12.752484321594238
    5. '  ' → logprob: -15.127484321594238
    6. '```' → logprob: -15.127484321594238
    7. '1' → logprob: -15.502484321594238
    8. ' K' → logprob: -15.502484321594238
    9. '   ' → logprob: -15.877484321594238
    10. ' -' → logprob: -16.439985275268555

Token 21: ' and' (ID: 326)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.09155319631099701
    2. ' and' → logprob: -2.466553211212158
    3. ' :' → logprob: -6.716553211212158
    4. 'and' → logprob: -6.716553211212158
    5. '   ' → logprob: -9.091552734375
    6. ' ' → logprob: -10.341552734375
    7. ':
' → logprob: -10.841552734375
    8. ',' → logprob: -12.341552734375
    9. ' or' → logprob: -12.591552734375
    10. ':return' → logprob: -12.591552734375

Token 22: ' K' (ID: 658)
  Prédit: ' K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' K' → logprob: -0.0009496912243776023
    2. 'K' → logprob: -7.000949859619141
    3. ' ' → logprob: -10.25094985961914
    4. '  ' → logprob: -13.37594985961914
    5. '<|end|>' → logprob: -14.00094985961914
    6. ' ' → logprob: -15.75094985961914
    7. '	K' → logprob: -15.87594985961914
    8. '<|end|>' → logprob: -16.50094985961914
    9. ',' → logprob: -17.37594985961914
    10. '>K' → logprob: -17.37594985961914

Token 23: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.1254248470067978
    2. '==' → logprob: -2.375424861907959
    3. '<|end|>' → logprob: -4.375424861907959
    4. ' ' → logprob: -5.125424861907959
    5. '=' → logprob: -5.625424861907959
    6. ' ' → logprob: -6.750424861907959
    7. '<|end|>' → logprob: -7.375424861907959
    8. ')' → logprob: -7.875424861907959
    9. '0' → logprob: -8.5004243850708
    10. ' =' → logprob: -9.1254243850708

Token 24: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.1002068892121315
    2. ' ' → logprob: -2.3502068519592285
    3. ' ' → logprob: -16.72520637512207
    4. '  ' → logprob: -17.10020637512207
    5. '۰' → logprob: -17.35020637512207
    6. '<|end|>' → logprob: -17.85020637512207
    7. '   ' → logprob: -19.10020637512207
    8. '```' → logprob: -19.47520637512207
    9. '<|end|>' → logprob: -20.03770637512207
    10. ')' → logprob: -20.28770637512207

Token 25: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0001398929744027555
    2. ' ' → logprob: -8.875140190124512
    3. '۰' → logprob: -17.562639236450195
    4. '  ' → logprob: -18.687639236450195
    5. '   ' → logprob: -18.875139236450195
    6. '<|end|>' → logprob: -19.062639236450195
    7. '```' → logprob: -19.250139236450195
    8. '০' → logprob: -19.312639236450195
    9. '०' → logprob: -19.500139236450195
    10. ' ' → logprob: -19.875139236450195

Token 26: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00013464801304508
    2. ':
' → logprob: -9.125134468078613
    3. '   ' → logprob: -11.125134468078613
    4. '       ' → logprob: -11.750134468078613
    5. ' :' → logprob: -13.750134468078613
    6. '):' → logprob: -14.000134468078613
    7. ':return' → logprob: -14.250134468078613
    8. ',' → logprob: -16.25013542175293
    9. '():' → logprob: -16.87513542175293
    10. ':**' → logprob: -16.87513542175293

Token 27: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0002286886883666739
    2. '   ' → logprob: -9.125228881835938
    3. ' break' → logprob: -9.375228881835938
    4. ':' → logprob: -11.750228881835938
    5. '	break' → logprob: -11.875228881835938
    6. '\n' → logprob: -12.250228881835938
    7. '<|end|>' → logprob: -12.500228881835938
    8. '```' → logprob: -13.500228881835938
    9. '      ' → logprob: -13.875228881835938
    10. '           ' → logprob: -13.875228881835938

Token 28: ' break' (ID: 2338)
  Prédit: ' break'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' break' → logprob: -0.546305239200592
    2. '       ' → logprob: -1.0463051795959473
    3. 'break' (adapté à ' break') → logprob: -2.6713051795959473
    4. '   ' → logprob: -8.296305656433105
    5. '	break' → logprob: -8.421305656433105
    6. '           ' → logprob: -10.546305656433105
    7. '_break' → logprob: -11.796305656433105
    8. '```' → logprob: -11.921305656433105
    9. '-break' → logprob: -12.921305656433105
    10. '        
' → logprob: -13.296305656433105

Token 29: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07376915961503983
    2. '\n' → logprob: -3.8237690925598145
    3. '    
' → logprob: -4.0737690925598145
    4. ')' → logprob: -4.8237690925598145
    5. '<|end|>' → logprob: -5.1987690925598145
    6. ':' → logprob: -5.3237690925598145
    7. ' ' → logprob: -6.0737690925598145
    8. '\' → logprob: -6.1987690925598145
    9. '  ' → logprob: -6.3237690925598145
    10. '\r' → logprob: -6.5737690925598145

Token 30: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06212889775633812
    2. '    
' → logprob: -2.937128782272339
    3. '```' → logprob: -5.812129020690918
    4. '\n' → logprob: -6.187129020690918
    5. '<|end|>' → logprob: -7.812129020690918
    6. '
' → logprob: -8.062129020690918
    7. '        
' → logprob: -8.687129020690918
    8. '       ' → logprob: -8.937129020690918
    9. 'n' → logprob: -9.062129020690918
    10. '`' → logprob: -9.187129020690918

Token 31: ' S' (ID: 336)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13038066029548645
    2. '    ' → logprob: -3.755380630493164
    3. 'result' → logprob: -3.755380630493164
    4. ' ' → logprob: -4.005380630493164
    5. 'print' → logprob: -5.130380630493164
    6. 'count' → logprob: -5.505380630493164
    7. '    
' → logprob: -5.630380630493164
    8. 'c' → logprob: -5.755380630493164
    9. 'p' → logprob: -5.755380630493164
    10. ' result' → logprob: -5.755380630493164

Token 32: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.09575916826725006
    2. '=' → logprob: -2.470759153366089
    3. 'um' → logprob: -6.345759391784668
    4. '=input' → logprob: -6.970759391784668
    5. 'tring' → logprob: -7.095759391784668
    6. ' ' → logprob: -7.220759391784668
    7. '_' → logprob: -7.970759391784668
    8. ',' → logprob: -7.970759391784668
    9. 'tr' → logprob: -8.595759391784668
    10. '.' → logprob: -8.720759391784668

Token 33: ' list' (ID: 1562)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.205160990357399
    2. 'input' → logprob: -1.9551609754562378
    3. ' list' → logprob: -3.5801610946655273
    4. ' [' → logprob: -5.205161094665527
    5. 'list' → logprob: -5.580161094665527
    6. '[input' → logprob: -6.705161094665527
    7. '"' → logprob: -6.955161094665527
    8. '[' → logprob: -7.330161094665527
    9. ' "' → logprob: -7.580161094665527
    10. ''' → logprob: -7.580161094665527

Token 34: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1424974650144577
    2. '(input' → logprob: -2.5174975395202637
    3. '(map' → logprob: -3.1424975395202637
    4. '(range' → logprob: -5.517497539520264
    5. '(str' → logprob: -5.767497539520264
    6. '(int' → logprob: -6.392497539520264
    7. '()' → logprob: -10.392497062683105
    8. '(
' → logprob: -10.517497062683105
    9. '(eval' → logprob: -10.767497062683105
    10. ' (' → logprob: -11.517497062683105

Token 35: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0005058500682935119
    2. '(' → logprob: -7.6255059242248535
    3. ',int' → logprob: -12.250505447387695
    4. '[int' → logprob: -12.625505447387695
    5. 'int' → logprob: -12.750505447387695
    6. '<int' → logprob: -12.750505447387695
    7. '=int' → logprob: -13.375505447387695
    8. '(str' → logprob: -13.375505447387695
    9. '(input' → logprob: -15.625505447387695
    10. ')' → logprob: -15.750505447387695

Token 36: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.24466831982135773
    2. ',input' → logprob: -1.9946683645248413
    3. ',' → logprob: -2.7446682453155518
    4. '(' → logprob: -4.119668483734131
    5. 'input' → logprob: -8.744668006896973
    6. ')' → logprob: -8.994668006896973
    7. '(),' → logprob: -9.369668006896973
    8. ' ,' → logprob: -10.244668006896973
    9. '=input' → logprob: -10.869668006896973
    10. '),' → logprob: -12.119668006896973

Token 37: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.5759513974189758
    2. 'input' → logprob: -0.8259513974189758
    3. '(input' → logprob: -12.70095157623291
    4. '	input' → logprob: -12.95095157623291
    5. ')' → logprob: -13.20095157623291
    6. '[input' → logprob: -13.57595157623291
    7. ',input' → logprob: -13.57595157623291
    8. '=input' → logprob: -13.95095157623291
    9. '<input' → logprob: -15.20095157623291
    10. 'range' → logprob: -15.45095157623291

Token 38: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.00011069540778407827
    2. '()' → logprob: -9.125110626220703
    3. ' ().' → logprob: -13.875110626220703
    4. '(.' → logprob: -14.625110626220703
    5. '(' → logprob: -15.375110626220703
    6. '()))' → logprob: -17.625110626220703
    7. '.' → logprob: -17.875110626220703
    8. '())' → logprob: -18.125110626220703
    9. '().__' → logprob: -18.500110626220703
    10. '()].' → logprob: -18.500110626220703

Token 39: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -7.822646693966817e-06
    2. 'strip' → logprob: -12.125007629394531
    3. 'rstrip' → logprob: -13.750007629394531
    4. ' split' → logprob: -14.250007629394531
    5. '(split' → logprob: -14.750007629394531
    6. 'spl' → logprob: -15.250007629394531
    7. 's' → logprob: -18.00000762939453
    8. 'read' → logprob: -18.12500762939453
    9. '_split' → logprob: -18.12500762939453
    10. ')' → logprob: -18.25000762939453

Token 40: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.07710395008325577
    2. '))' → logprob: -3.077103853225708
    3. '())' → logprob: -4.202104091644287
    4. '()' → logprob: -4.827104091644287
    5. '(' → logprob: -5.827104091644287
    6. ')' → logprob: -6.202104091644287
    7. '()))
' → logprob: -9.077103614807129
    8. '()));' → logprob: -11.577103614807129
    9. ''))' → logprob: -12.202103614807129
    10. '   ' → logprob: -12.202103614807129

Token 41: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.025615325197577477
    2. '    ' → logprob: -5.150615215301514
    3. '    
' → logprob: -5.150615215301514
    4. '```' → logprob: -5.400615215301514
    5. '[' → logprob: -5.900615215301514
    6. ' ' → logprob: -6.400615215301514
    7. '
' → logprob: -6.900615215301514
    8. '  ' → logprob: -7.400615215301514
    9. '     
' → logprob: -7.650615215301514
    10. '   
' → logprob: -8.275615692138672

Token 42: ' B' (ID: 418)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.079576849937439
    2. 'result' → logprob: -1.704576849937439
    3. 'S' → logprob: -1.954576849937439
    4. 'for' → logprob: -2.0795769691467285
    5. 'from' → logprob: -3.3295769691467285
    6. 'count' → logprob: -3.4545769691467285
    7. 'if' → logprob: -3.5795769691467285
    8. 'indices' → logprob: -4.5795769691467285
    9. 'answer' → logprob: -4.7045769691467285
    10. ' for' → logprob: -4.7045769691467285

Token 43: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.32554659247398376
    2. '=' → logprob: -1.7005466222763062
    3. '=set' → logprob: -3.7005465030670166
    4. '   ' → logprob: -4.200546741485596
    5. '[i' → logprob: -4.450546741485596
    6. 'egin' → logprob: -5.450546741485596
    7. '=sum' → logprob: -5.700546741485596
    8. ' ' → logprob: -5.700546741485596
    9. ')' → logprob: -5.825546741485596
    10. '=[]' → logprob: -5.825546741485596

Token 44: ' [' (ID: 723)
  Prédit: ' ['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' [' → logprob: -0.4485677182674408
    2. '[' → logprob: -1.9485677480697632
    3. ' []' → logprob: -2.0735676288604736
    4. '[]' → logprob: -2.8235676288604736
    5. ' list' → logprob: -4.323567867279053
    6. ' sorted' → logprob: -5.073567867279053
    7. 'list' → logprob: -5.948567867279053
    8. ' ' → logprob: -6.198567867279053
    9. ' set' → logprob: -6.573567867279053
    10. '[S' → logprob: -6.573567867279053

Token 45: 'list' (ID: 2641)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.2637230157852173
    2. 'False' → logprob: -1.5137230157852173
    3. 'i' → logprob: -5.888722896575928
    4. '1' → logprob: -6.263722896575928
    5. 'S' → logprob: -6.263722896575928
    6. 'True' → logprob: -6.263722896575928
    7. ']' → logprob: -6.888722896575928
    8. 'int' → logprob: -7.513722896575928
    9. '[i' → logprob: -8.013723373413086
    10. '[]' → logprob: -8.138723373413086

Token 46: '(map' (ID: 16946)
  Prédit: '(map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(map' → logprob: -0.38845789432525635
    2. '(range' → logprob: -1.2634578943252563
    3. '()' → logprob: -3.513457775115967
    4. '(S' → logprob: -5.638457775115967
    5. '(' → logprob: -5.888457775115967
    6. '()]' → logprob: -6.388457775115967
    7. 'range' → logprob: -8.138458251953125
    8. '(filter' → logprob: -8.388458251953125
    9. ']' → logprob: -8.638458251953125
    10. '(input' → logprob: -8.888458251953125

Token 47: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0007682943833060563
    2. ',int' → logprob: -7.750768184661865
    3. 'int' → logprob: -8.250768661499023
    4. ')' → logprob: -10.750768661499023
    5. '[int' → logprob: -10.875768661499023
    6. ']int' → logprob: -11.000768661499023
    7. '=int' → logprob: -11.625768661499023
    8. '<int' → logprob: -11.875768661499023
    9. ' int' → logprob: -13.875768661499023
    10. '(lambda' → logprob: -14.125768661499023

Token 48: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.26698538661003113
    2. ',input' → logprob: -2.1419854164123535
    3. ',' → logprob: -2.2669854164123535
    4. '(' → logprob: -4.3919854164123535
    5. ' ,' → logprob: -8.016984939575195
    6. '(int' → logprob: -8.641984939575195
    7. ' input' → logprob: -9.641984939575195
    8. '=input' → logprob: -9.641984939575195
    9. '```' → logprob: -9.641984939575195
    10. ')' → logprob: -10.016984939575195

Token 49: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.3132815659046173
    2. ' input' → logprob: -1.313281536102295
    3. '(input' → logprob: -12.313282012939453
    4. ')' → logprob: -12.438282012939453
    5. ',input' → logprob: -12.813282012939453
    6. '<input' → logprob: -13.438282012939453
    7. '[input' → logprob: -13.563282012939453
    8. '	input' → logprob: -13.813282012939453
    9. '=input' → logprob: -14.188282012939453
    10. '_input' → logprob: -14.313282012939453

Token 50: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -4.263011578586884e-05
    2. ' ().' → logprob: -11.000042915344238
    3. '()' → logprob: -11.125042915344238
    4. ' .' → logprob: -12.125042915344238
    5. '.' → logprob: -13.375042915344238
    6. '(int' → logprob: -13.625042915344238
    7. '(' → logprob: -13.625042915344238
    8. '   ' → logprob: -14.875042915344238
    9. '```' → logprob: -14.875042915344238
    10. ')' → logprob: -15.375042915344238

Token 51: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -1.8670179997570813e-05
    2. ' split' → logprob: -11.500019073486328
    3. '(split' → logprob: -12.500019073486328
    4. 'input' → logprob: -12.750019073486328
    5. ')' → logprob: -14.500019073486328
    6. 'spl' → logprob: -14.625019073486328
    7. 'strip' → logprob: -15.000019073486328
    8. 's' → logprob: -15.625019073486328
    9. 'read' → logprob: -15.875019073486328
    10. 'rstrip' → logprob: -17.125019073486328

Token 52: '()))' (ID: 16829)
  Prédit: '()))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.011893978342413902
    2. '))' → logprob: -5.2618937492370605
    3. '())' → logprob: -5.7618937492370605
    4. '()' → logprob: -5.8868937492370605
    5. '().' → logprob: -8.136894226074219
    6. '())).' → logprob: -8.511894226074219
    7. '()))
' → logprob: -8.886894226074219
    8. '(' → logprob: -10.511894226074219
    9. '())))' → logprob: -11.136894226074219
    10. ')' → logprob: -11.886894226074219

Token 53: ' for' (ID: 395)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.06024555861949921
    2. ')' → logprob: -3.6852455139160156
    3. '())' → logprob: -3.9352455139160156
    4. 'for' → logprob: -5.185245513916016
    5. '(' → logprob: -5.560245513916016
    6. '()]' → logprob: -5.935245513916016
    7. ')]' → logprob: -6.935245513916016
    8. '(N' → logprob: -7.935245513916016
    9. ' for' → logprob: -8.810245513916016
    10. ']' → logprob: -9.935245513916016

Token 54: ' _' (ID: 1175)
  Prédit: ' range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.001222966704517603
    2. ' _' → logprob: -7.501223087310791
    3. 'range' → logprob: -7.751223087310791
    4. '_' → logprob: -9.251222610473633
    5. '(range' → logprob: -9.626222610473633
    6. ' in' → logprob: -10.001222610473633
    7. ' i' → logprob: -11.251222610473633
    8. ' ' → logprob: -12.001222610473633
    9. '_range' → logprob: -12.001222610473633
    10. '(' → logprob: -12.501222610473633

Token 55: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0021846420131623745
    2. 'in' → logprob: -6.752184867858887
    3. 'range' → logprob: -7.377184867858887
    4. ' range' → logprob: -7.877184867858887
    5. '(' → logprob: -12.377184867858887
    6. '(range' → logprob: -13.377184867858887
    7. ' ' → logprob: -13.877184867858887
    8. ' _' → logprob: -14.252184867858887
    9. '  ' → logprob: -14.377184867858887
    10. '_' → logprob: -14.877184867858887

Token 56: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.12695078551769257
    2. ' range' → logprob: -2.126950740814209
    3. '(range' → logprob: -12.001951217651367
    4. '   ' → logprob: -12.126951217651367
    5. '	range' → logprob: -12.626951217651367
    6. ' ' → logprob: -12.876951217651367
    7. '  ' → logprob: -13.001951217651367
    8. '[' → logprob: -14.251951217651367
    9. 'rang' → logprob: -14.251951217651367
    10. 'r' → logprob: -14.751951217651367

Token 57: '(N' (ID: 10564)
  Prédit: '(K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(K' → logprob: -0.030190566554665565
    2. '(N' → logprob: -3.9051904678344727
    3. '(' → logprob: -4.655190467834473
    4. '(B' → logprob: -10.780190467834473
    5. ' (' → logprob: -11.030190467834473
    6. '(S' → logprob: -11.405190467834473
    7. '(M' → logprob: -11.780190467834473
    8. '(k' → logprob: -11.780190467834473
    9. 'K' → logprob: -12.905190467834473
    10. '(L' → logprob: -13.030190467834473

Token 58: ')]
' (ID: 11587)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.0016764947213232517
    2. ')' → logprob: -6.626676559448242
    3. ']' → logprob: -8.126676559448242
    4. ' )' → logprob: -11.126676559448242
    5. ')])' → logprob: -11.251676559448242
    6. '))' → logprob: -11.876676559448242
    7. '])]' → logprob: -11.876676559448242
    8. '])' → logprob: -12.001676559448242
    9. ')]
' → logprob: -13.376676559448242
    10. ')],' → logprob: -13.751676559448242

Token 59: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16612422466278076
    2. '
' → logprob: -2.2911243438720703
    3. '<|end|>' → logprob: -3.5411243438720703
    4. '    
' → logprob: -4.54112434387207
    5. ' ' → logprob: -6.04112434387207
    6. 'result' → logprob: -6.16612434387207
    7. '  ' → logprob: -6.79112434387207
    8. '    ' → logprob: -6.91612434387207
    9. ' for' → logprob: -7.29112434387207
    10. '  
' → logprob: -7.41612434387207

Token 60: ' total' (ID: 3609)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dp' → logprob: -0.3928336799144745
    2. '   ' → logprob: -2.517833709716797
    3. 'count' → logprob: -2.767833709716797
    4. ' dp' → logprob: -3.392833709716797
    5. 'result' → logprob: -3.642833709716797
    6. 'DP' → logprob: -4.017833709716797
    7. 'answer' → logprob: -4.142833709716797
    8. 'res' → logprob: -5.267833709716797
    9. 'visited' → logprob: -5.267833709716797
    10. 'for' → logprob: -5.392833709716797

Token 61: '_needed' (ID: 148421)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.16799688339233398
    2. '_' → logprob: -3.292996883392334
    3. '_points' → logprob: -3.542996883392334
    4. '_score' → logprob: -3.667996883392334
    5. '=' → logprob: -3.917996883392334
    6. '_sum' → logprob: -4.542996883392334
    7. '_scores' → logprob: -4.917996883392334
    8. '_cost' → logprob: -5.042996883392334
    9. '_time' → logprob: -5.667996883392334
    10. ' ' → logprob: -5.917996883392334

Token 62: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.10059395432472229
    2. '=' → logprob: -2.3505940437316895
    3. ' ' → logprob: -8.725593566894531
    4. '_' → logprob: -9.350593566894531
    5. '[' → logprob: -10.100593566894531
    6. ',' → logprob: -11.100593566894531
    7. '  ' → logprob: -11.100593566894531
    8. 's' → logprob: -11.350593566894531
    9. '[:]' → logprob: -11.350593566894531
    10. '=[]' → logprob: -11.975593566894531

Token 63: ' [' (ID: 723)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8143975734710693
    2. '0' → logprob: -1.3143975734710693
    3. ' sum' → logprob: -1.4393975734710693
    4. ' K' → logprob: -3.5643975734710693
    5. ' [' → logprob: -4.439397811889648
    6. 'sum' → logprob: -4.689397811889648
    7. '[' → logprob: -6.939397811889648
    8. 'K' → logprob: -7.314397811889648
    9. ' max' → logprob: -9.314397811889648
    10. ' B' → logprob: -9.439397811889648

Token 64: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.11376728862524033
    2. ' K' → logprob: -2.988767385482788
    3. 'K' → logprob: -3.863767385482788
    4. ' ' → logprob: -4.238767147064209
    5. 'sum' → logprob: -4.613767147064209
    6. ' sum' → logprob: -4.738767147064209
    7. ' max' → logprob: -7.363767147064209
    8. ' B' → logprob: -7.488767147064209
    9. 'B' → logprob: -7.613767147064209
    10. 'max' → logprob: -7.738767147064209

Token 65: ']*' (ID: 18579)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.16852349042892456
    2. ' for' → logprob: -2.5435235500335693
    3. 'for' → logprob: -3.1685235500335693
    4. ']*' → logprob: -3.4185235500335693
    5. ')' → logprob: -7.54352331161499
    6. ',' → logprob: -7.91852331161499
    7. '   ' → logprob: -8.418523788452148
    8. ']*(' → logprob: -8.668523788452148
    9. ' ]' → logprob: -9.043523788452148
    10. ')]' → logprob: -9.543523788452148

Token 66: 'K' (ID: 42)
  Prédit: 'K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.007374834734946489
    2. 'N' → logprob: -5.7573747634887695
    3. '(K' → logprob: -5.7573747634887695
    4. ' K' → logprob: -8.88237476348877
    5. '   ' → logprob: -9.25737476348877
    6. '7' → logprob: -9.50737476348877
    7. '10' → logprob: -9.50737476348877
    8. 'len' → logprob: -9.63237476348877
    9. '5' → logprob: -9.63237476348877
    10. '(' → logprob: -9.75737476348877

Token 67: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 68: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1294492930173874
    2. ' for' → logprob: -2.5044493675231934
    3. 'for' → logprob: -3.3794493675231934
    4. '<|end|>' → logprob: -5.754449367523193
    5. '
' → logprob: -6.879449367523193
    6. '	for' → logprob: -7.379449367523193
    7. '    
' → logprob: -7.879449367523193
    8. ' ' → logprob: -8.379448890686035
    9. '  ' → logprob: -9.754448890686035
    10. '    ' → logprob: -10.129448890686035

Token 69: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.6284101009368896
    2. ' for' → logprob: -1.1284101009368896
    3. '   ' → logprob: -2.0034101009368896
    4. ' ' → logprob: -5.878410339355469
    5. '<|end|>' → logprob: -6.503410339355469
    6. ' 
' → logprob: -7.253410339355469
    7. '	for' → logprob: -7.253410339355469
    8. '\n' → logprob: -7.378410339355469
    9. '    
' → logprob: -7.753410339355469
    10. '\t' → logprob: -8.128410339355469

Token 70: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.12973402440547943
    2. ' j' → logprob: -2.2547340393066406
    3. 'i' → logprob: -4.754734039306641
    4. ' k' → logprob: -5.379734039306641
    5. 'j' → logprob: -6.379734039306641
    6. ' r' → logprob: -7.129734039306641
    7. 'k' → logprob: -8.75473403930664
    8. ' s' → logprob: -8.75473403930664
    9. ' ' → logprob: -8.75473403930664
    10. ' b' → logprob: -9.00473403930664

Token 71: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.03824459761381149
    2. 'in' → logprob: -3.2882444858551025
    3. ' ' → logprob: -9.038244247436523
    4. 'n' → logprob: -10.413244247436523
    5. '	in' → logprob: -11.038244247436523
    6. '  ' → logprob: -11.413244247436523
    7. ',' → logprob: -12.163244247436523
    8. '<|end|>' → logprob: -12.538244247436523
    9. 's' → logprob: -12.663244247436523
    10. ' i' → logprob: -12.913244247436523

Token 72: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.04858805239200592
    2. ' range' → logprob: -3.0485880374908447
    3. '	range' → logprob: -14.798587799072266
    4. ' ' → logprob: -15.798587799072266
    5. '(range' → logprob: -16.798587799072266
    6. 'rang' → logprob: -17.048587799072266
    7. ' xrange' → logprob: -17.548587799072266
    8. 'ran' → logprob: -17.798587799072266
    9. 'r' → logprob: -17.923587799072266
    10. '  ' → logprob: -18.173587799072266

Token 73: '(N' (ID: 10564)
  Prédit: '(N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.49233266711235046
    2. '(' → logprob: -1.3673326969146729
    3. ' N' → logprob: -2.117332696914673
    4. ' (' → logprob: -4.742332458496094
    5. ' ' → logprob: -5.742332458496094
    6. ' K' → logprob: -7.242332458496094
    7. ' range' → logprob: -7.867332458496094
    8. '(K' → logprob: -7.992332458496094
    9. 'N' → logprob: -8.742332458496094
    10. '(n' → logprob: -9.367332458496094

Token 74: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00917309895157814
    2. '):
' → logprob: -4.7591729164123535
    3. ')' → logprob: -7.7591729164123535
    4. ':' → logprob: -9.384173393249512
    5. ' ):' → logprob: -10.884173393249512
    6. '   ' → logprob: -11.384173393249512
    7. '):
' → logprob: -11.509173393249512
    8. ' ' → logprob: -12.384173393249512
    9. '+' → logprob: -14.384173393249512
    10. '):

' → logprob: -14.634173393249512

Token 75: '       ' (ID: 309)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.2025027722120285
    2. '   ' → logprob: -1.827502727508545
    3. '<|end|>' → logprob: -4.452502727508545
    4. '       ' → logprob: -5.702502727508545
    5. ' for' → logprob: -5.702502727508545
    6. ' ' → logprob: -6.327502727508545
    7. ':
' → logprob: -6.952502727508545
    8. '    ' → logprob: -7.452502727508545
    9. '<|end|>' → logprob: -8.327503204345703
    10. ' :' → logprob: -8.702503204345703

Token 76: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.24270333349704742
    2. 'for' (adapté à ' for') → logprob: -1.6177033185958862
    3. '   ' → logprob: -4.117703437805176
    4. '	for' → logprob: -7.617703437805176
    5. '    ' → logprob: -8.492703437805176
    6. ' ' → logprob: -9.117703437805176
    7. '       ' → logprob: -10.742703437805176
    8. '<|end|>' → logprob: -11.367703437805176
    9. '  ' → logprob: -11.867703437805176
    10. '```' → logprob: -12.492703437805176

Token 77: ' j' (ID: 441)
  Prédit: 'j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.3990175426006317
    2. ' j' → logprob: -1.149017572402954
    3. ' range' → logprob: -5.149017333984375
    4. 'k' → logprob: -5.774017333984375
    5. 'range' → logprob: -6.399017333984375
    6. ' k' → logprob: -6.524017333984375
    7. ' ' → logprob: -11.774017333984375
    8. '   ' → logprob: -12.024017333984375
    9. 'K' → logprob: -13.024017333984375
    10. '0' → logprob: -13.524017333984375

Token 78: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.024413015693426132
    2. 'in' → logprob: -3.7744131088256836
    3. ' ' → logprob: -6.899413108825684
    4. '<|end|>' → logprob: -9.024413108825684
    5. '   ' → logprob: -11.274413108825684
    6. '  ' → logprob: -12.024413108825684
    7. '    ' → logprob: -12.274413108825684
    8. ' range' → logprob: -12.524413108825684
    9. '	in' → logprob: -12.774413108825684
    10. 'range' → logprob: -13.399413108825684

Token 79: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.07889936864376068
    2. 'range' → logprob: -2.578899383544922
    3. '(range' → logprob: -11.828899383544922
    4. ' xrange' → logprob: -14.328899383544922
    5. '	range' → logprob: -14.453899383544922
    6. 'K' → logprob: -14.578899383544922
    7. ' K' → logprob: -14.828899383544922
    8. 'Range' → logprob: -16.078899383544922
    9. ' ' → logprob: -16.578899383544922
    10. '_range' → logprob: -17.203899383544922

Token 80: '(K' (ID: 28797)
  Prédit: '(K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(K' → logprob: -0.016567518934607506
    2. '(' → logprob: -4.266567707061768
    3. ' (' → logprob: -6.391567707061768
    4. 'K' → logprob: -8.01656723022461
    5. ' K' → logprob: -8.26656723022461
    6. ')' → logprob: -10.14156723022461
    7. '(k' → logprob: -10.89156723022461
    8. ' range' → logprob: -11.14156723022461
    9. '(KERN' → logprob: -11.26656723022461
    10. '<|end|>' → logprob: -11.39156723022461

Token 81: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.002663885010406375
    2. '):
' → logprob: -6.002664089202881
    3. ')' → logprob: -9.377663612365723
    4. ':' → logprob: -10.377663612365723
    5. '   ' → logprob: -10.377663612365723
    6. ' ):' → logprob: -10.627663612365723
    7. '       ' → logprob: -11.502663612365723
    8. ' ' → logprob: -13.377663612365723
    9. ']:' → logprob: -13.752663612365723
    10. '           ' → logprob: -14.377663612365723

Token 82: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.035502396523952484
    2. 'total' → logprob: -4.5355024337768555
    3. ' total' → logprob: -4.6605024337768555
    4. ':' → logprob: -4.9105024337768555
    5. '           ' → logprob: -5.4105024337768555
    6. '	total' → logprob: -6.7855024337768555
    7. '   ' → logprob: -7.9105024337768555
    8. '<|end|>' → logprob: -8.160502433776855
    9. '(total' → logprob: -8.660502433776855
    10. ':
' → logprob: -9.160502433776855

Token 83: ' total' (ID: 3609)
  Prédit: ' total'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' total' → logprob: -0.6473925709724426
    2. 'total' (adapté à ' total') → logprob: -0.8973925709724426
    3. '           ' → logprob: -3.022392511367798
    4. '   ' → logprob: -4.897392749786377
    5. '               ' → logprob: -5.022392749786377
    6. '       ' → logprob: -5.897392749786377
    7. '	total' → logprob: -6.647392749786377
    8. ':' → logprob: -6.772392749786377
    9. ' ' → logprob: -8.522392272949219
    10. '                   ' → logprob: -9.147392272949219

Token 84: '_needed' (ID: 148421)
  Prédit: '_needed'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_needed' → logprob: -0.0004839385801460594
    2. '_' → logprob: -8.000483512878418
    3. '+=' → logprob: -10.250483512878418
    4. 'needed' → logprob: -10.375483512878418
    5. ' +=' → logprob: -10.625483512878418
    6. '_required' → logprob: -11.000483512878418
    7. '```' → logprob: -11.125483512878418
    8. '   ' → logprob: -12.125483512878418
    9. '_need' → logprob: -12.500483512878418
    10. ' ' → logprob: -12.875483512878418

Token 85: '[j' (ID: 7895)
  Prédit: ' +='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.3143259286880493
    2. '+=' → logprob: -1.3143259286880493
    3. '+' → logprob: -7.43932580947876
    4. ']+=' → logprob: -8.189326286315918
    5. '[' → logprob: -9.439326286315918
    6. '=' → logprob: -10.564326286315918
    7. '```' → logprob: -11.314326286315918
    8. '    ' → logprob: -11.439326286315918
    9. '   ' → logprob: -11.439326286315918
    10. ' +' → logprob: -11.564326286315918

Token 86: ']' (ID: 60)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.5584101676940918
    2. ' +=' → logprob: -0.9334101676940918
    3. ']+=' → logprob: -3.433410167694092
    4. ']' → logprob: -6.433410167694092
    5. '+' → logprob: -7.433410167694092
    6. ')' → logprob: -8.93341064453125
    7. ' ]' → logprob: -10.93341064453125
    8. ']+' → logprob: -11.80841064453125
    9. '+=(' → logprob: -11.93341064453125
    10. '    ' → logprob: -11.93341064453125

Token 87: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.001584258396178484
    2. ' +=' → logprob: -6.751584053039551
    3. '+' → logprob: -7.876584053039551
    4. '=' → logprob: -11.12658405303955
    5. ']+=' → logprob: -11.25158405303955
    6. '+=(' → logprob: -12.50158405303955
    7. '+='' → logprob: -13.75158405303955
    8. '-=' → logprob: -14.75158405303955
    9. '>' → logprob: -15.00158405303955
    10. '```' → logprob: -15.12658405303955

Token 88: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.04303823783993721
    2. ' B' → logprob: -3.1680381298065186
    3. 'S' → logprob: -10.793038368225098
    4. '   ' → logprob: -11.668038368225098
    5. ' ' → logprob: -12.418038368225098
    6. 'b' → logprob: -13.418038368225098
    7. ' S' → logprob: -13.793038368225098
    8. '	B' → logprob: -13.918038368225098
    9. 'A' → logprob: -14.168038368225098
    10. '`' → logprob: -15.043038368225098

Token 89: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -2.3915141355246305e-05
    2. '[j' → logprob: -11.37502384185791
    3. '[' → logprob: -11.50002384185791
    4. '[I' → logprob: -14.00002384185791
    5. ' [' → logprob: -14.37502384185791
    6. '[
' → logprob: -14.75002384185791
    7. '```' → logprob: -15.75002384185791
    8. '][' → logprob: -16.750024795532227
    9. '   ' → logprob: -17.125024795532227
    10. 'i' → logprob: -17.500024795532227

Token 90: '][' (ID: 2696)
  Prédit: ']['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '][' → logprob: -0.02317081205546856
    2. '[i' → logprob: -3.8981707096099854
    3. '[j' → logprob: -6.1481709480285645
    4. ']' → logprob: -8.398170471191406
    5. '[' → logprob: -8.648170471191406
    6. ' ][' → logprob: -9.523170471191406
    7. '"][' → logprob: -13.273170471191406
    8. ')[' → logprob: -13.773170471191406
    9. '[I' → logprob: -13.773170471191406
    10. ' [' → logprob: -13.898170471191406

Token 91: 'j' (ID: 73)
  Prédit: 'j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -1.0206720617134124e-05
    2. ' j' → logprob: -11.50001049041748
    3. '	j' → logprob: -17.500009536743164
    4. ' ' → logprob: -17.625009536743164
    5. 'k' → logprob: -19.250009536743164
    6. ']' → logprob: -19.375009536743164
    7. '   ' → logprob: -19.625009536743164
    8. 'i' → logprob: -19.750009536743164
    9. '0' → logprob: -20.625009536743164
    10. '_j' → logprob: -20.750009536743164

Token 92: ']
' (ID: 1592)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4463809132575989
    2. ']' → logprob: -1.071380853652954
    3. ' )' → logprob: -5.321381092071533
    4. ' ]' → logprob: -5.321381092071533
    5. '*' → logprob: -6.071381092071533
    6. ' *' → logprob: -6.571381092071533
    7. '<|end|>' → logprob: -6.571381092071533
    8. ' ' → logprob: -7.196381092071533
    9. '   ' → logprob: -7.446381092071533
    10. ')]' → logprob: -7.571381092071533

Token 93: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02502022497355938
    2. '
' → logprob: -4.900020122528076
    3. ' if' → logprob: -4.900020122528076
    4. '<|end|>' → logprob: -5.650020122528076
    5. '    
' → logprob: -6.150020122528076
    6. ' ' → logprob: -7.025020122528076
    7. 'if' → logprob: -7.525020122528076
    8. ' 
' → logprob: -7.650020122528076
    9. '  
' → logprob: -8.025020599365234
    10. '```' → logprob: -8.150020599365234

Token 94: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.942253053188324
    2. '
' → logprob: -1.0672531127929688
    3. ' if' → logprob: -1.9422531127929688
    4. ' ' → logprob: -3.1922531127929688
    5. ' 
' → logprob: -3.8172531127929688
    6. '<|end|>' → logprob: -4.192253112792969
    7. 'if' → logprob: -4.317253112792969
    8. '    
' → logprob: -4.692253112792969
    9. '  
' → logprob: -4.692253112792969
    10. '   
' → logprob: -6.192253112792969

Token 95: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2607543468475342
    2. '(sum' → logprob: -1.5107543468475342
    3. '(max' → logprob: -5.760754585266113
    4. '(len' → logprob: -6.385754585266113
    5. '(total' → logprob: -6.885754585266113
    6. '('' → logprob: -7.135754585266113
    7. '()' → logprob: -7.260754585266113
    8. '(min' → logprob: -8.135754585266113
    9. '(S' → logprob: -8.135754585266113
    10. '("' → logprob: -8.135754585266113

Token 96: 'Yes' (ID: 13022)
  Prédit: 'Yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Yes' → logprob: -0.36565855145454407
    2. '"' → logprob: -2.3656585216522217
    3. '".' → logprob: -2.8656585216522217
    4. 'Y' → logprob: -3.1156585216522217
    5. 'No' → logprob: -3.7406585216522217
    6. ' ".' → logprob: -3.8656585216522217
    7. ' Yes' → logprob: -4.990658760070801
    8. 'YES' → logprob: -5.115658760070801
    9. 'Sum' → logprob: -5.115658760070801
    10. 'yes' → logprob: -5.240658760070801

Token 97: '"' (ID: 1)
  Prédit: '"'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.02024906314909458
    2. ' if' → logprob: -4.395248889923096
    3. '")' → logprob: -4.895248889923096
    4. 'if' → logprob: -8.645249366760254
    5. ''' → logprob: -10.895249366760254
    6. ' "' → logprob: -11.145249366760254
    7. '\n' → logprob: -12.770249366760254
    8. ' ")' → logprob: -12.895249366760254
    9. ')' → logprob: -13.145249366760254
    10. '"If' → logprob: -13.270249366760254

Token 98: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.048194725066423416
    2. 'if' → logprob: -3.173194646835327
    3. ')' → logprob: -5.298194885253906
    4. ',' → logprob: -9.798194885253906
    5. ' ' → logprob: -9.798194885253906
    6. '   ' → logprob: -10.923194885253906
    7. '"' → logprob: -11.173194885253906
    8. ' )' → logprob: -11.173194885253906
    9. '    ' → logprob: -11.798194885253906
    10. '  ' → logprob: -12.423194885253906

Token 99: ' all' (ID: 722)
  Prédit: ' all'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' all' → logprob: -0.046244047582149506
    2. 'all' → logprob: -3.5462441444396973
    3. ' sum' → logprob: -4.671244144439697
    4. ' total' → logprob: -6.421244144439697
    5. ' any' → logprob: -6.421244144439697
    6. ' ' → logprob: -6.796244144439697
    7. 'sum' → logprob: -6.921244144439697
    8. ' S' → logprob: -7.046244144439697
    9. 'total' → logprob: -8.796243667602539
    10. ' not' → logprob: -9.233743667602539

Token 100: '(total' (ID: 39744)
  Prédit: '(total'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(total' → logprob: -0.030353974550962448
    2. '(S' → logprob: -4.405354022979736
    3. '(' → logprob: -4.905354022979736
    4. '(t' → logprob: -5.655354022979736
    5. '(s' → logprob: -5.905354022979736
    6. '(x' → logprob: -5.905354022979736
    7. '([' → logprob: -7.655354022979736
    8. '((' → logprob: -7.780354022979736
    9. '(a' → logprob: -8.405353546142578
    10. '(T' → logprob: -10.030353546142578

Token 101: '_needed' (ID: 148421)
  Prédit: '_needed'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_needed' → logprob: -4.370294846012257e-05
    2. '_need' → logprob: -11.250043869018555
    3. 'needed' → logprob: -11.375043869018555
    4. '_' → logprob: -11.875043869018555
    5. '_required' → logprob: -13.125043869018555
    6. '_n' → logprob: -13.250043869018555
    7. '[' → logprob: -13.500043869018555
    8. '   ' → logprob: -14.000043869018555
    9. ' _' → logprob: -14.500043869018555
    10. '_ne' → logprob: -14.500043869018555

Token 102: '[j' (ID: 7895)
  Prédit: '[j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[j' → logprob: -0.001139146275818348
    2. '[i' → logprob: -7.126139163970947
    3. '[' → logprob: -9.251138687133789
    4. ')' → logprob: -9.626138687133789
    5. '[k' → logprob: -10.376138687133789
    6. '<=' → logprob: -10.626138687133789
    7. ' <=' → logprob: -10.751138687133789
    8. '[x' → logprob: -11.001138687133789
    9. '>=' → logprob: -11.626138687133789
    10. ' >=' → logprob: -11.626138687133789

Token 103: ']' (ID: 60)
  Prédit: ' <='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.12184783816337585
    2. '<=' → logprob: -2.2468478679656982
    3. ' >=' → logprob: -4.996847629547119
    4. '>=' → logprob: -6.621847629547119
    5. ' ==' → logprob: -7.871847629547119
    6. ' ' → logprob: -8.121848106384277
    7. '==' → logprob: -9.246848106384277
    8. '[' → logprob: -10.371848106384277
    9. ')' → logprob: -10.871848106384277
    10. '=' → logprob: -11.621848106384277

Token 104: ' <=' (ID: 5017)
  Prédit: '<='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<=' → logprob: -0.2849220633506775
    2. ' <=' → logprob: -1.4099221229553223
    3. '>=' → logprob: -5.784922122955322
    4. ' >=' → logprob: -7.534922122955322
    5. '==' → logprob: -9.659921646118164
    6. ' ' → logprob: -10.034921646118164
    7. ' ==' → logprob: -11.409921646118164
    8. '[' → logprob: -11.659921646118164
    9. ')' → logprob: -12.034921646118164
    10. '=' → logprob: -12.409921646118164

Token 105: ' S' (ID: 336)
  Prédit: 'S'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'S' → logprob: -0.2814582586288452
    2. ' S' → logprob: -1.4064582586288452
    3. '   ' → logprob: -8.781457901000977
    4. ' ' → logprob: -9.781457901000977
    5. 's' → logprob: -10.656457901000977
    6. ')' → logprob: -11.281457901000977
    7. '	S' → logprob: -11.406457901000977
    8. '(S' → logprob: -11.968957901000977
    9. '    ' → logprob: -12.031457901000977
    10. '  ' → logprob: -12.343957901000977

Token 106: '[j' (ID: 7895)
  Prédit: '[j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[j' → logprob: -2.1008713702030946e-06
    2. 'j' → logprob: -13.875001907348633
    3. '[' → logprob: -14.500001907348633
    4. ')' → logprob: -15.375001907348633
    5. ' [' → logprob: -15.750001907348633
    6. '[i' → logprob: -16.500001907348633
    7. ' for' → logprob: -17.125001907348633
    8. '```' → logprob: -17.625001907348633
    9. '

' → logprob: -18.250001907348633
    10. '[
' → logprob: -18.375001907348633

Token 107: ']' (ID: 60)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.04394879564642906
    2. ' )' → logprob: -3.1689488887786865
    3. ' else' → logprob: -7.418948650360107
    4. ' for' → logprob: -8.168949127197266
    5. ' ' → logprob: -10.793949127197266
    6. 'else' → logprob: -11.418949127197266
    7. '   ' → logprob: -11.668949127197266
    8. '    ' → logprob: -11.918949127197266
    9. 'for' → logprob: -11.918949127197266
    10. ']' → logprob: -13.168949127197266

Token 108: ' for' (ID: 395)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.2504420578479767
    2. ' else' → logprob: -1.6254420280456543
    3. ' )' → logprob: -3.8754420280456543
    4. ' for' → logprob: -6.125442028045654
    5. 'else' → logprob: -6.625442028045654
    6. ' ' → logprob: -7.875442028045654
    7. 'for' → logprob: -10.750442504882812
    8. '    ' → logprob: -10.750442504882812
    9. '   ' → logprob: -11.375442504882812
    10. '        ' → logprob: -11.625442504882812

Token 109: ' j' (ID: 441)
  Prédit: ' j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' j' → logprob: -0.4740801155567169
    2. 'j' → logprob: -0.9740800857543945
    3. '	j' → logprob: -13.974080085754395
    4. ')' → logprob: -14.099080085754395
    5. ' range' → logprob: -14.849080085754395
    6. ' ' → logprob: -15.349080085754395
    7. '<|end|>' → logprob: -15.349080085754395
    8. 'range' → logprob: -15.474080085754395
    9. ' )' → logprob: -16.09908103942871
    10. ',j' → logprob: -16.34908103942871

Token 110: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.03416287526488304
    2. 'in' → logprob: -3.409162759780884
    3. '<|end|>' → logprob: -7.659162998199463
    4. ')' → logprob: -10.534162521362305
    5. ' ' → logprob: -11.159162521362305
    6. '<|end|>' → logprob: -13.784162521362305
    7. ' range' → logprob: -14.034162521362305
    8. '  ' → logprob: -14.534162521362305
    9. 'range' → logprob: -14.909162521362305
    10. '   ' → logprob: -15.034162521362305

Token 111: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.10020667314529419
    2. ' range' → logprob: -2.3502066135406494
    3. ' ' → logprob: -17.72520637512207
    4. '	range' → logprob: -18.10020637512207
    5. '(range' → logprob: -18.22520637512207
    6. '   ' → logprob: -19.72520637512207
    7. ')' → logprob: -19.97520637512207
    8. 'rang' → logprob: -20.10020637512207
    9. 'ange' → logprob: -20.22520637512207
    10. '  ' → logprob: -20.85020637512207

Token 112: '(K' (ID: 28797)
  Prédit: '(K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(K' → logprob: -2.951771421066951e-05
    2. '(' → logprob: -11.125029563903809
    3. 'K' → logprob: -11.500029563903809
    4. '(k' → logprob: -13.250029563903809
    5. ')' → logprob: -13.625029563903809
    6. ' (' → logprob: -14.125029563903809
    7. '(len' → logprob: -15.250029563903809
    8. '   ' → logprob: -15.375029563903809
    9. '(
' → logprob: -15.875029563903809
    10. ')(' → logprob: -16.625028610229492

Token 113: '))' (ID: 915)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00030436101951636374
    2. '))' → logprob: -8.125304222106934
    3. ' )' → logprob: -11.875304222106934
    4. '   ' → logprob: -14.250304222106934
    5. ')))' → logprob: -15.250304222106934
    6. '")' → logprob: -16.12530517578125
    7. ' else' → logprob: -16.50030517578125
    8. ' ' → logprob: -16.87530517578125
    9. ')`' → logprob: -17.00030517578125
    10. ')")' → logprob: -17.37530517578125

Token 114: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.023284615948796272
    2. 'else' → logprob: -3.773284673690796
    3. ')' → logprob: -10.273284912109375
    4. '   ' → logprob: -12.898284912109375
    5. '	else' → logprob: -14.398284912109375
    6. ' )' → logprob: -14.398284912109375
    7. '    ' → logprob: -14.773284912109375
    8. ' ' → logprob: -15.273284912109375
    9. ' and' → logprob: -15.898284912109375
    10. '        ' → logprob: -17.273284912109375

Token 115: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.03423810377717018
    2. ' "' → logprob: -3.40923810005188
    3. '"No' → logprob: -7.534238338470459
    4. '   ' → logprob: -10.7842378616333
    5. ' ' → logprob: -10.9092378616333
    6. ')' → logprob: -11.2842378616333
    7. ''' → logprob: -13.4092378616333
    8. ' ' → logprob: -13.5342378616333
    9. '  ' → logprob: -14.1592378616333
    10. '    ' → logprob: -14.4092378616333

Token 116: 'No' (ID: 3160)
  Prédit: 'No'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'No' → logprob: -0.016193432733416557
    2. '"No' → logprob: -4.141193389892578
    3. ' No' → logprob: -8.891193389892578
    4. '"' → logprob: -10.891193389892578
    5. ' ' → logprob: -13.516193389892578
    6. '“No' → logprob: -14.891193389892578
    7. 'no' → logprob: -15.266193389892578
    8. 'NO' → logprob: -15.266193389892578
    9. '_No' → logprob: -15.766193389892578
    10. ''' → logprob: -16.016193389892578

Token 117: '")' (ID: 1405)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.023731868714094162
    2. '")' → logprob: -3.7737319469451904
    3. ')")' → logprob: -7.648731708526611
    4. '')' → logprob: -13.27373218536377
    5. '`)' → logprob: -13.39873218536377
    6. ')
' → logprob: -13.39873218536377
    7. ' )' → logprob: -13.52373218536377
    8. '))' → logprob: -13.64873218536377
    9. ')">' → logprob: -14.27373218536377
    10. '())' → logprob: -15.02373218536377


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 115
Tokens correctement prédits (1ère position, stricte): 59
Tokens correctement prédits (1ère position, avec adaptation): 60
Tokens correctement prédits (top 10): 100
Précision stricte (1ère position): 51.30%
Précision adaptée (1ère position): 52.17%
Précision (top 10): 86.96%
================================================================================
