================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:08:45
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n, m = map(int, input().split())
costs = list(map(int, input().split()))

# On essaie toutes les combinaisons de n chiffres (avec répétition)
# n est petit (<=5), donc on peut faire une recherche exhaustive
from itertools import product

# Filtrage rapide : si pas possible d'acheter n éléments avec un seul chiffre minimal, on peut immédiatement retourner NA
min_cost = min(costs)
if min_cost * n > m:
    print("NA")
    exit()

candidates = []
for digits in product(range(10), repeat=n):
    total = sum(costs[d] for d in digits)
    if total <= m:
        number = ''.join(str(d) for d in digits)
        candidates.append(number)

if not candidates:
    print("NA")
else:
    # Trouver le plus petit nombre au sens numérique après conversion en int,
    # mais on doit conserver les zéros en tête dans l'affichage: on compare par int, on affiche la chaîne brute
    candidates.sort(key=lambda x: int(x))
    print(candidates[0])
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' m' (ID: 284)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.14440923929214478
    2. ',' → logprob: -2.2694091796875
    3. ' =' → logprob: -3.5194091796875
    4. ';' → logprob: -8.0194091796875
    5. ')' → logprob: -8.1444091796875
    6. '```' → logprob: -8.2694091796875
    7. '.' → logprob: -9.0194091796875
    8. '#' → logprob: -9.5194091796875
    9. '*' → logprob: -9.7694091796875
    10. ' ' → logprob: -9.8944091796875

Token 4: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.48516136407852173
    2. ' ' → logprob: -1.235161304473877
    3. 'map' → logprob: -2.860161304473877
    4. ' input' → logprob: -3.860161304473877
    5. '0' → logprob: -4.735161304473877
    6. 'input' → logprob: -5.360161304473877
    7. '10' → logprob: -6.985161304473877
    8. ' n' → logprob: -7.985161304473877
    9. '1' → logprob: -8.860161781311035
    10. ' int' → logprob: -8.860161781311035

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.09948127716779709
    2. '<|end|>' → logprob: -2.5994813442230225
    3. '```' → logprob: -4.724481105804443
    4. '(lambda' → logprob: -5.349481105804443
    5. '<|end|>' → logprob: -6.599481105804443
    6. '(user' → logprob: -7.349481105804443
    7. ')' → logprob: -7.349481105804443
    8. '[' → logprob: -7.474481105804443
    9. ' (' → logprob: -7.599481105804443
    10. 'user' → logprob: -7.849481105804443

Token 6: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.2576455771923065
    2. '(' → logprob: -2.007645606994629
    3. ')' → logprob: -2.507645606994629
    4. '(user' → logprob: -6.382645606994629
    5. 'input' → logprob: -6.632645606994629
    6. '(int' → logprob: -6.632645606994629
    7. '```' → logprob: -6.757645606994629
    8. '(str' → logprob: -6.882645606994629
    9. '`)' → logprob: -6.882645606994629
    10. '`' → logprob: -7.757645606994629

Token 7: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.6931565999984741
    2. ' input' → logprob: -0.6931565999984741
    3. '(input' → logprob: -11.693156242370605
    4. ')' → logprob: -14.318156242370605
    5. ',input' → logprob: -14.943156242370605
    6. '=input' → logprob: -16.693157196044922
    7. '	input' → logprob: -17.318157196044922
    8. '<input' → logprob: -17.443157196044922
    9. ' )' → logprob: -17.943157196044922
    10. '```' → logprob: -18.318157196044922

Token 8: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.7557715773582458
    2. '(' → logprob: -1.6307716369628906
    3. '()' → logprob: -1.8807716369628906
    4. ')' → logprob: -2.0057716369628906
    5. '('' → logprob: -4.130771636962891
    6. '```' → logprob: -5.380771636962891
    7. '(""))' → logprob: -5.880771636962891
    8. '().' → logprob: -5.880771636962891
    9. '`()' → logprob: -5.880771636962891
    10. '(()' → logprob: -6.380771636962891

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0015211685094982386
    2. 'strip' → logprob: -6.501521110534668
    3. 'rstrip' → logprob: -11.501521110534668
    4. ' split' → logprob: -12.251521110534668
    5. ')' → logprob: -12.751521110534668
    6. 'read' → logprob: -14.126521110534668
    7. '(split' → logprob: -15.251521110534668
    8. 'spl' → logprob: -17.001522064208984
    9. '_split' → logprob: -17.251522064208984
    10. 'startswith' → logprob: -17.876522064208984

Token 10: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.03185451403260231
    2. '))' → logprob: -3.9068546295166016
    3. '())' → logprob: -4.531854629516602
    4. '()' → logprob: -8.531854629516602
    5. '`)' → logprob: -8.781854629516602
    6. ')`' → logprob: -10.281854629516602
    7. '(' → logprob: -10.281854629516602
    8. '()))' → logprob: -10.531854629516602
    9. ')))' → logprob: -11.906854629516602
    10. ' )' → logprob: -12.156854629516602

Token 11: 'cost' (ID: 33457)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.20283782482147217
    2. 'for' → logprob: -2.8278379440307617
    3. '\' → logprob: -3.5778379440307617
    4. '#' → logprob: -4.077837944030762
    5. '```' → logprob: -4.327837944030762
    6. '
' → logprob: -4.327837944030762
    7. '`' → logprob: -4.577837944030762
    8. 'x' → logprob: -4.952837944030762
    9. 'a' → logprob: -5.327837944030762
    10. ',' → logprob: -5.452837944030762

Token 12: 's' (ID: 82)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.11622155457735062
    2. 's' → logprob: -2.3662216663360596
    3. '_' → logprob: -4.7412214279174805
    4. '[s' → logprob: -5.2412214279174805
    5. '[]' → logprob: -6.9912214279174805
    6. '[:]' → logprob: -8.24122142791748
    7. '_s' → logprob: -8.36622142791748
    8. ' =' → logprob: -9.74122142791748
    9. '\[' → logprob: -9.74122142791748
    10. '=' → logprob: -10.11622142791748

Token 13: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.00025669054593890905
    2. '[n' → logprob: -9.875256538391113
    3. ')' → logprob: -10.125256538391113
    4. '[i' → logprob: -10.750256538391113
    5. '=' → logprob: -10.875256538391113
    6. '[]' → logprob: -10.875256538391113
    7. '.' → logprob: -11.125256538391113
    8. '[:]' → logprob: -11.250256538391113
    9. '[...]' → logprob: -11.750256538391113
    10. '[a' → logprob: -12.000256538391113

Token 14: ' list' (ID: 1562)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.6428159475326538
    2. '[]' → logprob: -1.6428159475326538
    3. '[' → logprob: -1.8928159475326538
    4. ' [' → logprob: -2.3928160667419434
    5. 'list' → logprob: -3.7678160667419434
    6. ' list' → logprob: -4.642816066741943
    7. '[list' → logprob: -5.392816066741943
    8. '[int' → logprob: -7.142816066741943
    9. '[input' → logprob: -8.517815589904785
    10. ' [[]' → logprob: -9.392815589904785

Token 15: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0002671768015716225
    2. '(int' → logprob: -9.375267028808594
    3. '(range' → logprob: -9.750267028808594
    4. '(input' → logprob: -10.375267028808594
    5. '()' → logprob: -10.750267028808594
    6. '(map' → logprob: -11.375267028808594
    7. '(
' → logprob: -11.875267028808594
    8. '(

' → logprob: -12.000267028808594
    9. '(`' → logprob: -12.250267028808594
    10. '("("' → logprob: -12.625267028808594

Token 16: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.03941640630364418
    2. '(' → logprob: -3.2894163131713867
    3. '(input' → logprob: -7.789416313171387
    4. '(str' → logprob: -8.664416313171387
    5. '(lambda' → logprob: -9.039416313171387
    6. 'int' → logprob: -9.039416313171387
    7. '<|end|>' → logprob: -9.039416313171387
    8. '[int' → logprob: -9.289416313171387
    9. '```' → logprob: -9.289416313171387
    10. '<int' → logprob: -9.289416313171387

Token 17: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.1463840752840042
    2. ',input' → logprob: -2.0213840007781982
    3. '(input' → logprob: -5.771384239196777
    4. '(' → logprob: -7.646384239196777
    5. ' ,' → logprob: -9.646384239196777
    6. 'input' → logprob: -10.271384239196777
    7. '```' → logprob: -12.896384239196777
    8. ',int' → logprob: -13.146384239196777
    9. '(),' → logprob: -14.021384239196777
    10. '<input' → logprob: -14.146384239196777

Token 18: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.31326526403427124
    2. ' input' → logprob: -1.313265323638916
    3. '(input' → logprob: -13.313264846801758
    4. ',input' → logprob: -14.313264846801758
    5. ')' → logprob: -15.188264846801758
    6. '<input' → logprob: -15.313264846801758
    7. '=input' → logprob: -15.313264846801758
    8. '	input' → logprob: -15.438264846801758
    9. ' ' → logprob: -15.938264846801758
    10. '[input' → logprob: -16.688264846801758

Token 19: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.02212555520236492
    2. '()' → logprob: -4.147125720977783
    3. '()))' → logprob: -5.772125720977783
    4. '())' → logprob: -6.397125720977783
    5. '(' → logprob: -7.022125720977783
    6. '()));' → logprob: -8.897125244140625
    7. ')' → logprob: -9.647125244140625
    8. '()>' → logprob: -10.522125244140625
    9. '())))' → logprob: -10.522125244140625
    10. '());' → logprob: -10.522125244140625

Token 20: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -6.704273118884885e-07
    2. 'strip' → logprob: -14.875000953674316
    3. ' split' → logprob: -16.25
    4. '(split' → logprob: -16.875
    5. 'spl' → logprob: -17.0
    6. 'rstrip' → logprob: -17.375
    7. 's' → logprob: -20.75
    8. 'sp' → logprob: -21.625
    9. ')' → logprob: -21.75
    10. 'plit' → logprob: -21.875

Token 21: '()))

' (ID: 125972)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.6736236214637756
    2. '))' → logprob: -0.9236236214637756
    3. ')' → logprob: -2.673623561859131
    4. '())' → logprob: -4.048623561859131
    5. '()' → logprob: -5.673623561859131
    6. '(' → logprob: -5.798623561859131
    7. '()))
' → logprob: -10.548624038696289
    8. ')))' → logprob: -11.173624038696289
    9. '()),' → logprob: -11.548624038696289
    10. ''))' → logprob: -11.548624038696289

Token 22: '#' (ID: 2)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.0010696649551392
    2. 'dp' → logprob: -1.0010696649551392
    3. 'result' → logprob: -2.5010695457458496
    4. 'total' → logprob: -2.6260695457458496
    5. 'answer' → logprob: -3.2510695457458496
    6. 'if' → logprob: -3.6260695457458496
    7. 's' → logprob: -5.12606954574585
    8. 'graph' → logprob: -5.37606954574585
    9. 'profit' → logprob: -5.37606954574585
    10. 'res' → logprob: -5.50106954574585

Token 23: ' On' (ID: 2160)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.21567347645759583
    2. 'total' → logprob: -2.4656734466552734
    3. 'dp' → logprob: -3.0906734466552734
    4. ' for' → logprob: -3.5906734466552734
    5. 'max' → logprob: -4.840673446655273
    6. 'result' → logprob: -5.215673446655273
    7. 's' → logprob: -5.340673446655273
    8. 'sum' → logprob: -5.590673446655273
    9. 'answer' → logprob: -5.965673446655273
    10. ' total' → logprob: -6.340673446655273

Token 24: ' essa' (ID: 19417)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.0023254600819200277
    2. '_' → logprob: -6.752325534820557
    3. 'es' → logprob: -7.877325534820557
    4. '=' → logprob: -8.377325057983398
    5. 'for' → logprob: -8.877325057983398
    6. 's' → logprob: -9.252325057983398
    7. ' =' → logprob: -9.502325057983398
    8. ' for' → logprob: -10.252325057983398
    9. ' e' → logprob: -10.502325057983398
    10. 'ly' → logprob: -10.877325057983398

Token 25: 'ie' (ID: 396)
  Prédit: 'ie'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ie' → logprob: -0.7344580888748169
    2. 'ye' → logprob: -1.234458088874817
    3. 'y' → logprob: -1.609458088874817
    4. 'yer' → logprob: -3.8594579696655273
    5. 'lie' → logprob: -6.234457969665527
    6. 'uie' → logprob: -6.734457969665527
    7. 'yez' → logprob: -6.859457969665527
    8. 'lle' → logprob: -7.359457969665527
    9. 'i' → logprob: -7.609457969665527
    10. 'ille' → logprob: -7.859457969665527

Token 26: ' toutes' (ID: 17502)
  Prédit: ' d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' d' → logprob: -1.0533109903335571
    2. ' de' → logprob: -1.1783109903335571
    3. 'd' → logprob: -2.0533108711242676
    4. ' ' → logprob: -2.6783108711242676
    5. '<|end|>' → logprob: -2.9283108711242676
    6. 's' → logprob: -3.5533108711242676
    7. '_' → logprob: -3.6783108711242676
    8. 'de' → logprob: -4.303310871124268
    9. 'for' → logprob: -5.303310871124268
    10. ' ' → logprob: -5.678310871124268

Token 27: ' les' (ID: 1341)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.06056840345263481
    2. '<|end|>' → logprob: -3.310568332672119
    3. '(range' → logprob: -4.935568332672119
    4. 's' → logprob: -5.185568332672119
    5. '()' → logprob: -5.935568332672119
    6. 'possible' → logprob: -6.810568332672119
    7. 'range' → logprob: -7.310568332672119
    8. '_' → logprob: -7.560568332672119
    9. ' (' → logprob: -7.810568332672119
    10. '('' → logprob: -7.935568332672119

Token 28: ' comb' (ID: 4134)
  Prédit: ' comb'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' comb' → logprob: -1.8000621795654297
    2. ' façons' → logprob: -1.8000621795654297
    3. 'p' → logprob: -2.0500621795654297
    4. 'poss' → logprob: -2.1750621795654297
    5. 's' → logprob: -2.4250621795654297
    6. '_' → logprob: -2.9250621795654297
    7. ' p' → logprob: -2.9250621795654297
    8. 'comb' → logprob: -3.5500621795654297
    9. ' ' → logprob: -3.6750621795654297
    10. ' possibilités' → logprob: -3.6750621795654297

Token 29: 'inais' (ID: 42744)
  Prédit: 'inais'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'inais' → logprob: -0.24524925649166107
    2. 'i' → logprob: -2.3702492713928223
    3. 'ina' → logprob: -2.9952492713928223
    4. 'in' → logprob: -3.6202492713928223
    5. '```' → logprob: -3.7452492713928223
    6. '#' → logprob: -4.995249271392822
    7. 'inas' → logprob: -5.370249271392822
    8. '``' → logprob: -5.870249271392822
    9. 'inations' → logprob: -5.870249271392822
    10. '_' → logprob: -7.245249271392822

Token 30: 'ons' (ID: 1808)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.0009240844519808888
    2. 'o' → logprob: -7.375924110412598
    3. '_' → logprob: -8.375924110412598
    4. '#' → logprob: -11.250924110412598
    5. 'n' → logprob: -11.375924110412598
    6. 'sons' → logprob: -11.750924110412598
    7. 'e' → logprob: -12.375924110412598
    8. '```' → logprob: -12.375924110412598
    9. '\s' → logprob: -12.625924110412598
    10. 't' → logprob: -12.625924110412598

Token 31: ' de' (ID: 334)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3075962960720062
    2. '_' → logprob: -1.4325963258743286
    3. '(' → logprob: -4.432596206665039
    4. ',' → logprob: -5.932596206665039
    5. ' (' → logprob: -5.932596206665039
    6. '[' → logprob: -6.932596206665039
    7. '.' → logprob: -7.182596206665039
    8. ':' → logprob: -7.182596206665039
    9. ''' → logprob: -7.307596206665039
    10. ' for' → logprob: -7.307596206665039

Token 32: ' n' (ID: 297)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.22261928021907806
    2. ' i' → logprob: -2.5976192951202393
    3. 'de' → logprob: -3.2226192951202393
    4. ' deux' → logprob: -4.22261905670166
    5. '2' → logprob: -4.34761905670166
    6. 'i' → logprob: -4.59761905670166
    7. 'c' → logprob: -4.72261905670166
    8. 'a' → logprob: -5.22261905670166
    9. ' p' → logprob: -5.34761905670166
    10. '_' → logprob: -5.72261905670166

Token 33: ' chiffres' (ID: 105565)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.010045163333415985
    2. '-' → logprob: -5.760045051574707
    3. '+' → logprob: -6.635045051574707
    4. '_' → logprob: -7.010045051574707
    5. '  ' → logprob: -7.510045051574707
    6. ' ,' → logprob: -8.010045051574707
    7. 'a' → logprob: -8.010045051574707
    8. ' ```' → logprob: -8.385045051574707
    9. ' espaces' → logprob: -8.385045051574707
    10. ',' → logprob: -8.510045051574707

Token 34: ' (' (ID: 350)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.20615682005882263
    2. '_' → logprob: -3.0811567306518555
    3. 'f' → logprob: -3.0811567306518555
    4. ':' → logprob: -3.2061567306518555
    5. ',' → logprob: -3.9561567306518555
    6. 'i' → logprob: -4.9561567306518555
    7. '0' → logprob: -4.9561567306518555
    8. ' f' → logprob: -5.9561567306518555
    9. '.' → logprob: -6.0811567306518555
    10. ' for' → logprob: -6.2061567306518555

Token 35: 'avec' (ID: 64065)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4655095934867859
    2. ',' → logprob: -1.9655096530914307
    3. ' ' → logprob: -2.0905096530914307
    4. ' )' → logprob: -2.4655096530914307
    5. '0' → logprob: -5.340509414672852
    6. ' ,' → logprob: -5.590509414672852
    7. 'p' → logprob: -6.215509414672852
    8. 'd' → logprob: -6.590509414672852
    9. 'f' → logprob: -6.715509414672852
    10. 'a' → logprob: -7.090509414672852

Token 36: ' répét' (ID: 156936)
  Prédit: ' replacement'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' replacement' → logprob: -0.3202582597732544
    2. 'replacement' → logprob: -1.8202582597732544
    3. 'r' → logprob: -2.945258140563965
    4. ' remplacement' → logprob: -3.320258140563965
    5. ' repetition' → logprob: -5.320258140563965
    6. ' répét' → logprob: -5.570258140563965
    7. ' ' → logprob: -5.695258140563965
    8. ' rép' → logprob: -6.320258140563965
    9. ' r' → logprob: -6.445258140563965
    10. ' repetitions' → logprob: -7.320258140563965

Token 37: 'ition' (ID: 868)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.2820287346839905
    2. 'a' → logprob: -1.5320286750793457
    3. 'é' → logprob: -4.032028675079346
    4. 'i' → logprob: -4.782028675079346
    5. 'u' → logprob: -6.532028675079346
    6. 'et' → logprob: -7.782028675079346
    7. 'ition' → logprob: -7.782028675079346
    8. ')' → logprob: -7.782028675079346
    9. 'entation' → logprob: -7.907028675079346
    10. 't' → logprob: -9.407029151916504

Token 38: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.07221409678459167
    2. ' )' → logprob: -2.697214126586914
    3. ',' → logprob: -6.947214126586914
    4. 's' → logprob: -7.947214126586914
    5. ' possible' → logprob: -8.572214126586914
    6. ' ' → logprob: -9.072214126586914
    7. 'possible' → logprob: -9.072214126586914
    8. ' for' → logprob: -9.072214126586914
    9. 'for' → logprob: -9.697214126586914
    10. ' ,' → logprob: -9.697214126586914

Token 39: '#' (ID: 2)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.247618317604065
    2. 'f' → logprob: -1.497618317604065
    3. 'from' → logprob: -1.872618317604065
    4. ':' → logprob: -2.2476181983947754
    5. ' for' → logprob: -2.3726181983947754
    6. 'import' → logprob: -2.8726181983947754
    7. ' ' → logprob: -3.7476181983947754
    8. ' from' → logprob: -3.8726181983947754
    9. '.' → logprob: -4.747618198394775
    10. ',' → logprob: -4.747618198394775

Token 40: ' n' (ID: 297)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.08587154000997543
    2. 'for' → logprob: -3.210871458053589
    3. 'from' → logprob: -3.710871458053589
    4. ' for' → logprob: -5.335871696472168
    5. ' ' → logprob: -5.710871696472168
    6. ' from' → logprob: -6.585871696472168
    7. 'i' → logprob: -6.710871696472168
    8. '.' → logprob: -6.835871696472168
    9. ' f' → logprob: -6.960871696472168
    10. 'import' → logprob: -7.085871696472168

Token 41: ' est' (ID: 893)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -1.3404285907745361
    2. ' ' → logprob: -1.5904285907745361
    3. '=' → logprob: -1.8404285907745361
    4. '_' → logprob: -2.465428590774536
    5. '-' → logprob: -2.465428590774536
    6. '*' → logprob: -3.840428590774536
    7. ' =' → logprob: -3.965428590774536
    8. '.' → logprob: -4.090428352355957
    9. 'e' → logprob: -4.215428352355957
    10. '!' → logprob: -4.340428352355957

Token 42: ' petit' (ID: 20577)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -1.4361928701400757
    2. ' le' → logprob: -1.5611928701400757
    3. ' ' → logprob: -1.9361928701400757
    4. ' <=' → logprob: -2.3111929893493652
    5. ' =' → logprob: -3.1861929893493652
    6. ' la' → logprob: -3.4361929893493652
    7. ' compris' → logprob: -3.5611929893493652
    8. ' inférieur' → logprob: -3.8111929893493652
    9. ' m' → logprob: -4.186192989349365
    10. '<=' → logprob: -4.436192989349365

Token 43: ' (' (ID: 350)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5692352652549744
    2. ' for' → logprob: -2.319235324859619
    3. 'for' → logprob: -2.319235324859619
    4. 'import' → logprob: -2.694235324859619
    5. ',' → logprob: -2.944235324859619
    6. '<|end|>' → logprob: -3.194235324859619
    7. 'from' → logprob: -3.694235324859619
    8. ' from' → logprob: -4.694235324859619
    9. '
' → logprob: -4.694235324859619
    10. ':' → logprob: -4.694235324859619

Token 44: '<=' (ID: 16672)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.05281984433531761
    2. ',' → logprob: -3.6778197288513184
    3. ' )' → logprob: -5.052819728851318
    4. '),' → logprob: -5.552819728851318
    5. 'm' → logprob: -5.802819728851318
    6. 'n' → logprob: -6.177819728851318
    7. ' ' → logprob: -6.177819728851318
    8. '3' → logprob: -6.302819728851318
    9. '4' → logprob: -6.302819728851318
    10. ')n' → logprob: -6.927819728851318

Token 45: '5' (ID: 20)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.3670571446418762
    2. '5' → logprob: -2.3670570850372314
    3. '9' → logprob: -3.2420570850372314
    4. '4' → logprob: -3.3670570850372314
    5. '8' → logprob: -3.3670570850372314
    6. '7' → logprob: -3.7420570850372314
    7. '6' → logprob: -3.8670570850372314
    8. ' ' → logprob: -3.9920570850372314
    9. '20' → logprob: -3.9920570850372314
    10. '3' → logprob: -4.2420573234558105

Token 46: '),' (ID: 936)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0024945642799139023
    2. ' )' → logprob: -6.0024943351745605
    3. '*' → logprob: -12.502494812011719
    4. '**' → logprob: -13.127494812011719
    5. '#' → logprob: -13.252494812011719
    6. ')
' → logprob: -13.377494812011719
    7. ',' → logprob: -13.377494812011719
    8. '),' → logprob: -13.752494812011719
    9. '')' → logprob: -14.002494812011719
    10. ' for' → logprob: -14.377494812011719

Token 47: ' donc' (ID: 14206)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.252642273902893
    2. ' from' → logprob: -1.377642273902893
    3. ' for' → logprob: -1.377642273902893
    4. 'for' → logprob: -2.1276421546936035
    5. 'from' → logprob: -2.5026421546936035
    6. ')' → logprob: -6.6276421546936035
    7. 'import' → logprob: -6.7526421546936035
    8. ',' → logprob: -7.0026421546936035
    9. ' ,' → logprob: -7.5026421546936035
    10. 'f' → logprob: -7.7526421546936035

Token 48: ' on' (ID: 402)
  Prédit: ' from'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' from' → logprob: -0.6655740737915039
    2. ' for' → logprob: -1.165574073791504
    3. 'from' → logprob: -2.290574073791504
    4. 'for' → logprob: -2.790574073791504
    5. 'import' → logprob: -5.165574073791504
    6. ' import' → logprob: -5.540574073791504
    7. ' on' → logprob: -6.915574073791504
    8. ' range' → logprob: -7.915574073791504
    9. '```' → logprob: -8.665574073791504
    10. 'range' → logprob: -8.915574073791504

Token 49: ' peut' (ID: 9216)
  Prédit: 'from'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'from' → logprob: -0.7143096923828125
    2. ' peut' → logprob: -1.7143096923828125
    3. ' from' → logprob: -2.3393096923828125
    4. 'pe' → logprob: -2.7143096923828125
    5. 'import' → logprob: -2.7143096923828125
    6. 'for' → logprob: -3.0893096923828125
    7. ' peux' → logprob: -3.9643096923828125
    8. ' for' → logprob: -4.4643096923828125
    9. ' can' → logprob: -4.4643096923828125
    10. 'can' → logprob: -5.8393096923828125

Token 50: ' faire' (ID: 8119)
  Prédit: ' utiliser'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' utiliser' → logprob: -0.8743877410888672
    2. 'import' → logprob: -1.1243877410888672
    3. 'from' → logprob: -2.624387741088867
    4. ' for' → logprob: -2.874387741088867
    5. ' from' → logprob: -2.999387741088867
    6. 'for' → logprob: -3.874387741088867
    7. ' use' → logprob: -4.249387741088867
    8. 'util' → logprob: -4.624387741088867
    9. ' faire' → logprob: -4.749387741088867
    10. ' import' → logprob: -5.374387741088867

Token 51: ' une' (ID: 2463)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.3139432668685913
    2. 'import' → logprob: -1.5639432668685913
    3. ' une' → logprob: -1.9389432668685913
    4. ' des' → logprob: -2.438943386077881
    5. ' for' → logprob: -2.688943386077881
    6. 'from' → logprob: -2.938943386077881
    7. 'cela' → logprob: -3.563943386077881
    8. ' un' → logprob: -3.813943386077881
    9. '```' → logprob: -3.938943386077881
    10. 'une' → logprob: -3.938943386077881

Token 52: ' recherche' (ID: 24975)
  Prédit: 'from'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'from' → logprob: -0.37529632449150085
    2. ' from' → logprob: -2.1252963542938232
    3. 'import' → logprob: -2.2502963542938232
    4. 'for' → logprob: -2.8752963542938232
    5. ' for' → logprob: -3.7502963542938232
    6. ' import' → logprob: -5.125296115875244
    7. ')' → logprob: -7.625296115875244
    8. 'f' → logprob: -7.625296115875244
    9. ' range' → logprob: -8.625296592712402
    10. 's' → logprob: -8.875296592712402

Token 53: ' exhaustive' (ID: 115863)
  Prédit: ' space'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' space' → logprob: -0.9999009966850281
    2. ' for' → logprob: -1.1249010562896729
    3. 'space' → logprob: -2.249901056289673
    4. ' ' → logprob: -2.374901056289673
    5. 'es' → logprob: -3.499901056289673
    6. 'for' → logprob: -3.999901056289673
    7. 'from' → logprob: -4.124900817871094
    8. ' from' → logprob: -4.624900817871094
    9. 'import' → logprob: -4.749900817871094
    10. ' espace' → logprob: -4.874900817871094

Token 54: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.669627845287323
    2. ' for' → logprob: -1.6696279048919678
    3. '
' → logprob: -2.4196279048919678
    4. 'from' → logprob: -2.4196279048919678
    5. 'import' → logprob: -2.6696279048919678
    6. 'f' → logprob: -4.169627666473389
    7. ' from' → logprob: -4.794627666473389
    8. ',' → logprob: -5.044627666473389
    9. '```' → logprob: -5.544627666473389
    10. ' 
' → logprob: -5.669627666473389

Token 55: 'from' (ID: 2845)
  Prédit: 'from'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'from' → logprob: -0.5537487864494324
    2. 'for' → logprob: -1.1787488460540771
    3. 'import' → logprob: -2.803748846054077
    4. ' for' → logprob: -4.053748607635498
    5. 'f' → logprob: -4.303748607635498
    6. '
' → logprob: -4.428748607635498
    7. ' from' → logprob: -4.553748607635498
    8. ',' → logprob: -7.053748607635498
    9. ':' → logprob: -7.053748607635498
    10. ')' → logprob: -8.428749084472656

Token 56: ' itertools' (ID: 103178)
  Prédit: ' itertools'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' itertools' → logprob: -6.704273118884885e-07
    2. 'it' → logprob: -15.000000953674316
    3. ' math' → logprob: -16.375
    4. ' iter' → logprob: -16.625
    5. ' ' → logprob: -16.875
    6. ' sys' → logprob: -17.125
    7. ' functools' → logprob: -17.5
    8. ' import' → logprob: -17.625
    9. ' it' → logprob: -18.0
    10. ' ' → logprob: -18.25

Token 57: ' import' (ID: 1588)
  Prédit: ' import'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.02925812639296055
    2. 'import' → logprob: -3.9042580127716064
    3. '.' → logprob: -5.4042582511901855
    4. ' .' → logprob: -6.0292582511901855
    5. '.import' → logprob: -7.5292582511901855
    6. ' itertools' → logprob: -7.7792582511901855
    7. '	import' → logprob: -8.029257774353027
    8. '<|end|>' → logprob: -8.779257774353027
    9. '.com' → logprob: -9.154257774353027
    10. '.im' → logprob: -10.029257774353027

Token 58: ' product' (ID: 1888)
  Prédit: 'product'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'product' → logprob: -0.0009144435753114522
    2. ' product' → logprob: -7.000914573669434
    3. '.product' → logprob: -12.875914573669434
    4. '	product' → logprob: -15.125914573669434
    5. 'com' → logprob: -17.000913619995117
    6. '_product' → logprob: -18.250913619995117
    7. '-product' → logprob: -18.500913619995117
    8. '(product' → logprob: -18.750913619995117
    9. 'products' → logprob: -19.750913619995117
    10. '```' → logprob: -19.875913619995117

Token 59: '

' (ID: 279)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.27704745531082153
    2. '(' → logprob: -1.5270473957061768
    3. '(
' → logprob: -4.152047634124756
    4. ' for' → logprob: -4.902047634124756
    5. 'range' → logprob: -7.777047634124756
    6. '(range' → logprob: -7.902047634124756
    7. ',' → logprob: -8.777047157287598
    8. ')' → logprob: -9.402047157287598
    9. '\' → logprob: -9.527047157287598
    10. '
' → logprob: -9.527047157287598

Token 60: '#' (ID: 2)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.2361050248146057
    2. '(' → logprob: -1.861104965209961
    3. 'range' → logprob: -3.736104965209961
    4. '(
' → logprob: -4.361104965209961
    5. 'result' → logprob: -4.986104965209961
    6. '(range' → logprob: -5.361104965209961
    7. 'digits' → logprob: -6.736104965209961
    8. 'best' → logprob: -7.486104965209961
    9. 'possible' → logprob: -7.611104965209961
    10. 'res' → logprob: -7.611104965209961

Token 61: ' Fil' (ID: 9170)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.370359867811203
    2. 'best' → logprob: -1.8703598976135254
    3. 'digits' → logprob: -2.9953598976135254
    4. 'min' → logprob: -4.120359897613525
    5. 'com' → logprob: -4.245359897613525
    6. 'all' → logprob: -4.245359897613525
    7. 'result' → logprob: -4.620359897613525
    8. 'res' → logprob: -4.620359897613525
    9. 'comb' → logprob: -4.745359897613525
    10. 'c' → logprob: -5.620359897613525

Token 62: 'tr' (ID: 371)
  Prédit: 'ter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ter' → logprob: -0.10317808389663696
    2. 'tered' → logprob: -3.478178024291992
    3. 'trer' → logprob: -4.103178024291992
    4. 't' → logprob: -4.228178024291992
    5. 'er' → logprob: -4.228178024291992
    6. 'tr' → logprob: -4.728178024291992
    7. '#' → logprob: -5.728178024291992
    8. 'tering' → logprob: -5.978178024291992
    9. 'tre' → logprob: -6.353178024291992
    10. '```' → logprob: -7.228178024291992

Token 63: 'age' (ID: 477)
  Prédit: 'er'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.17349058389663696
    2. 'rer' → logprob: -2.423490524291992
    3. 'ter' → logprob: -3.548490524291992
    4. 'r' → logprob: -4.298490524291992
    5. 'trer' → logprob: -4.923490524291992
    6. 'tre' → logprob: -5.548490524291992
    7. 're' → logprob: -6.048490524291992
    8. 'red' → logprob: -6.173490524291992
    9. 'ered' → logprob: -6.173490524291992
    10. 'tr' → logprob: -6.173490524291992

Token 64: ' rapide' (ID: 44887)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6161607503890991
    2. '_' → logprob: -0.8661607503890991
    3. 'for' → logprob: -4.616160869598389
    4. ',' → logprob: -4.741160869598389
    5. ' (' → logprob: -5.366160869598389
    6. '=' → logprob: -6.366160869598389
    7. '_cost' → logprob: -6.366160869598389
    8. ' ' → logprob: -6.616160869598389
    9. ' for' → logprob: -6.741160869598389
    10. ')' → logprob: -6.741160869598389

Token 65: ' :' (ID: 712)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5819313526153564
    2. '(' → logprob: -2.2069313526153564
    3. '<|end|>' → logprob: -2.4569313526153564
    4. 'for' → logprob: -2.7069313526153564
    5. ':' → logprob: -2.9569313526153564
    6. ' for' → logprob: -3.7069313526153564
    7. '_' → logprob: -4.081931114196777
    8. '<|end|>' → logprob: -4.331931114196777
    9. 's' → logprob: -4.456931114196777
    10. ',' → logprob: -4.581931114196777

Token 66: ' si' (ID: 1784)
  Prédit: ' valid'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' valid' → logprob: -1.1255899667739868
    2. ' if' → logprob: -1.8755899667739868
    3. 'if' → logprob: -2.2505898475646973
    4. 'possible' → logprob: -2.5005898475646973
    5. 'valid' → logprob: -3.0005898475646973
    6. 'max' → logprob: -3.0005898475646973
    7. ' possible' → logprob: -3.0005898475646973
    8. ' max' → logprob: -3.1255898475646973
    9. 'cost' → logprob: -3.8755898475646973
    10. 'c' → logprob: -4.125589847564697

Token 67: ' pas' (ID: 2173)
  Prédit: ' min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' min' → logprob: -0.1977371722459793
    2. ' max' → logprob: -2.072737216949463
    3. ' sum' → logprob: -3.822737216949463
    4. 'min' → logprob: -3.947737216949463
    5. ' all' → logprob: -5.072737216949463
    6. 'max' → logprob: -6.072737216949463
    7. 'sum' → logprob: -6.822737216949463
    8. ' any' → logprob: -6.947737216949463
    9. ' m' → logprob: -7.197737216949463
    10. ' not' → logprob: -8.322736740112305

Token 68: ' possible' (ID: 4149)
  Prédit: ' any'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' any' → logprob: -0.4047573506832123
    2. ' de' → logprob: -2.029757261276245
    3. 'any' → logprob: -2.779757261276245
    4. 'min' → logprob: -3.779757261276245
    5. ' all' → logprob: -4.029757499694824
    6. 'de' → logprob: -4.279757499694824
    7. ' ' → logprob: -4.529757499694824
    8. 'cost' → logprob: -4.654757499694824
    9. '1' → logprob: -4.779757499694824
    10. ' m' → logprob: -5.279757499694824

Token 69: ' d' (ID: 272)
  Prédit: ' d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -1.2593574523925781
    2. ' de' → logprob: -1.3843574523925781
    3. 'd' → logprob: -1.7593574523925781
    4. ' ' → logprob: -2.384357452392578
    5. ',' → logprob: -2.509357452392578
    6. '_' → logprob: -3.384357452392578
    7. 'de' → logprob: -3.509357452392578
    8. ':' → logprob: -4.009357452392578
    9. '<|end|>' → logprob: -5.134357452392578
    10. ' to' → logprob: -5.509357452392578

Token 70: ''' (ID: 6)
  Prédit: ''avoir'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''avoir' → logprob: -0.6276379823684692
    2. 'e' → logprob: -1.0026379823684692
    3. ''obtenir' → logprob: -2.8776378631591797
    4. ''' → logprob: -4.00263786315918
    5. ''é' → logprob: -5.00263786315918
    6. ''être' → logprob: -5.37763786315918
    7. ''ac' → logprob: -5.50263786315918
    8. 'é' → logprob: -6.37763786315918
    9. ''utiliser' → logprob: -6.62763786315918
    10. ''achat' → logprob: -7.00263786315918

Token 71: 'acheter' (ID: 105787)
  Prédit: 'atte'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'atte' → logprob: -1.051912546157837
    2. 'avoir' → logprob: -1.051912546157837
    3. 'acheter' → logprob: -1.676912546157837
    4. 'ob' → logprob: -2.801912546157837
    5. 'é' → logprob: -4.176912307739258
    6. 'e' → logprob: -4.926912307739258
    7. ''' → logprob: -5.426912307739258
    8. ''avoir' → logprob: -5.801912307739258
    9. ''obtenir' → logprob: -5.926912307739258
    10. 'assembler' → logprob: -6.051912307739258

Token 72: ' n' (ID: 297)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'm' → logprob: -0.747410774230957
    2. ' le' → logprob: -1.622410774230957
    3. ' m' → logprob: -2.497410774230957
    4. ' un' → logprob: -2.747410774230957
    5. 'le' → logprob: -3.122410774230957
    6. ' even' → logprob: -3.622410774230957
    7. ' n' → logprob: -4.247410774230957
    8. ' any' → logprob: -4.497410774230957
    9. ' au' → logprob: -4.747410774230957
    10. ' la' → logprob: -4.747410774230957

Token 73: ' éléments' (ID: 57375)
  Prédit: ' chiffres'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chiffres' → logprob: -0.7312235832214355
    2. ' digits' → logprob: -1.8562235832214355
    3. ' ' → logprob: -1.9812235832214355
    4. ' items' → logprob: -3.2312235832214355
    5. ' fois' → logprob: -3.3562235832214355
    6. 'm' → logprob: -3.8562235832214355
    7. 'digits' → logprob: -4.2312235832214355
    8. ' éléments' → logprob: -4.7937235832214355
    9. 'ch' → logprob: -5.0437235832214355
    10. 'c' → logprob: -5.0437235832214355

Token 74: ' avec' (ID: 3937)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.730013370513916
    2. ' ' → logprob: -0.855013370513916
    3. ':' → logprob: -3.105013370513916
    4. ' ,' → logprob: -3.355013370513916
    5. 's' → logprob: -5.605013370513916
    6. ' with' → logprob: -6.730013370513916
    7. ' :' → logprob: -6.855013370513916
    8. ' avec' → logprob: -6.855013370513916
    9. ' à' → logprob: -7.355013370513916
    10. ')' → logprob: -7.355013370513916

Token 75: ' un' (ID: 537)
  Prédit: ' min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' min' → logprob: -0.5995602011680603
    2. ' m' → logprob: -1.849560260772705
    3. ' un' → logprob: -2.974560260772705
    4. ' minimum' → logprob: -3.099560260772705
    5. 'min' → logprob: -3.099560260772705
    6. 'm' → logprob: -3.724560260772705
    7. ' sum' → logprob: -3.974560260772705
    8. ' max' → logprob: -4.349560260772705
    9. ' coût' → logprob: -4.349560260772705
    10. ' ' → logprob: -4.474560260772705

Token 76: ' seul' (ID: 33041)
  Prédit: ' coût'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' coût' → logprob: -0.4155375361442566
    2. ' budget' → logprob: -2.5405375957489014
    3. ' total' → logprob: -2.9155375957489014
    4. ' seul' → logprob: -3.0405375957489014
    5. ' prix' → logprob: -4.040537357330322
    6. 'co' → logprob: -4.040537357330322
    7. ' ' → logprob: -4.290537357330322
    8. 'élé' → logprob: -4.290537357330322
    9. ' élément' → logprob: -4.415537357330322
    10. ' cout' → logprob: -4.415537357330322

Token 77: ' chiffre' (ID: 107420)
  Prédit: ' coût'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' coût' → logprob: -0.9784873723983765
    2. ' élément' → logprob: -1.8534873723983765
    3. ' type' → logprob: -2.353487491607666
    4. ' chiffre' → logprob: -2.728487491607666
    5. 'élé' → logprob: -2.853487491607666
    6. ' article' → logprob: -2.978487491607666
    7. ' produit' → logprob: -3.228487491607666
    8. ' cost' → logprob: -3.603487491607666
    9. 'article' → logprob: -3.853487491607666
    10. ' achat' → logprob: -4.790987491607666

Token 78: ' minimal' (ID: 19957)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.5626870393753052
    2. ',' → logprob: -1.1876870393753052
    3. ' :' → logprob: -3.1876869201660156
    4. 's' → logprob: -3.3126869201660156
    5. ' ' → logprob: -4.312686920166016
    6. ' for' → logprob: -4.687686920166016
    7. ' ,' → logprob: -5.312686920166016
    8. ')' → logprob: -6.062686920166016
    9. 'e' → logprob: -6.187686920166016
    10. ' or' → logprob: -6.562686920166016

Token 79: ',' (ID: 11)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.045914649963379
    2. ',' → logprob: -1.170914649963379
    3. 's' → logprob: -2.295914649963379
    4. ' :' → logprob: -2.295914649963379
    5. ' ' → logprob: -2.545914649963379
    6. ' ,' → logprob: -4.295914649963379
    7. ' s' → logprob: -5.045914649963379
    8. 'e' → logprob: -5.170914649963379
    9. ')' → logprob: -5.295914649963379
    10. ' for' → logprob: -5.420914649963379

Token 80: ' on' (ID: 402)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' continue' → logprob: -0.6067737936973572
    2. ' print' → logprob: -1.356773853302002
    3. ' if' → logprob: -2.356773853302002
    4. ' ' → logprob: -3.231773853302002
    5. 'print' → logprob: -4.356773853302002
    6. 'continue' → logprob: -4.356773853302002
    7. ' for' → logprob: -4.731773853302002
    8. ' max' → logprob: -5.231773853302002
    9. ' on' → logprob: -5.231773853302002
    10. ' n' → logprob: -5.606773853302002

Token 81: ' peut' (ID: 9216)
  Prédit: 'continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'continue' → logprob: -0.2773514986038208
    2. ' continue' → logprob: -1.7773514986038208
    3. 'contin' → logprob: -3.6523513793945312
    4. 'print' → logprob: -3.9023513793945312
    5. 'n' → logprob: -5.527351379394531
    6. 's' → logprob: -5.652351379394531
    7. ' print' → logprob: -6.152351379394531
    8. 'break' → logprob: -6.277351379394531
    9. '_continue' → logprob: -6.652351379394531
    10. 'inue' → logprob: -7.277351379394531

Token 82: ' immédiatement' (ID: 100743)
  Prédit: 'pass'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pass' → logprob: -0.11166086792945862
    2. 'contin' → logprob: -2.611660957336426
    3. 'skip' → logprob: -5.236660957336426
    4. 'dé' → logprob: -5.236660957336426
    5. 'ign' → logprob: -5.486660957336426
    6. 'aj' → logprob: -5.986660957336426
    7. 'stop' → logprob: -6.111660957336426
    8. 'arr' → logprob: -6.361660957336426
    9. 's' → logprob: -6.736660957336426
    10. ' passer' → logprob: -6.986660957336426

Token 83: ' retourner' (ID: 116656)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.0587565898895264
    2. 'pass' → logprob: -1.0587565898895264
    3. 'continue' → logprob: -1.9337565898895264
    4. 'contin' → logprob: -2.1837565898895264
    5. 'pr' → logprob: -4.4337568283081055
    6. ' print' → logprob: -4.9337568283081055
    7. 'con' → logprob: -5.1837568283081055
    8. ' continue' → logprob: -5.4337568283081055
    9. ' continuer' → logprob: -5.8087568283081055
    10. 'r' → logprob: -6.0587568283081055

Token 84: ' NA' (ID: 24259)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '-' → logprob: -0.030658412724733353
    2. '0' → logprob: -4.15565824508667
    3. ' -' → logprob: -4.53065824508667
    4. ' ' → logprob: -7.15565824508667
    5. 'False' → logprob: -7.15565824508667
    6. '-n' → logprob: -7.78065824508667
    7. '"' → logprob: -7.90565824508667
    8. '-l' → logprob: -8.155658721923828
    9. '-s' → logprob: -8.780658721923828
    10. 'n' → logprob: -8.905658721923828

Token 85: '
' (ID: 198)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.032284777611494064
    2. 'n' → logprob: -5.532284736633301
    3. 's' → logprob: -5.532284736633301
    4. ' ' → logprob: -5.657284736633301
    5. '
' → logprob: -5.657284736633301
    6. ' 
' → logprob: -5.782284736633301
    7. 'if' → logprob: -6.032284736633301
    8. ' :' → logprob: -6.157284736633301
    9. ':
' → logprob: -6.407284736633301
    10. 'i' → logprob: -6.657284736633301

Token 86: 'min' (ID: 1493)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.2905378341674805
    2. 'if' → logprob: -1.4155378341674805
    3. ' if' → logprob: -1.5405378341674805
    4. ':' → logprob: -2.2905378341674805
    5. 'min' → logprob: -3.2905378341674805
    6. ' 
' → logprob: -3.7905378341674805
    7. 'i' → logprob: -4.0405378341674805
    8. 'minimum' → logprob: -4.0405378341674805
    9. ',' → logprob: -4.9155378341674805
    10. 'n' → logprob: -5.1655378341674805

Token 87: '_cost' (ID: 36820)
  Prédit: '_cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_cost' → logprob: -0.08877716958522797
    2. '_' → logprob: -2.7137770652770996
    3. '_c' → logprob: -4.4637770652771
    4. '_co' → logprob: -5.8387770652771
    5. '_price' → logprob: -6.3387770652771
    6. '_val' → logprob: -6.5887770652771
    7. 'cost' → logprob: -7.8387770652771
    8. '_value' → logprob: -8.463777542114258
    9. '=' → logprob: -8.963777542114258
    10. 'c' → logprob: -9.463777542114258

Token 88: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0958758071064949
    2. '=' → logprob: -2.4708757400512695
    3. '[' → logprob: -6.2208757400512695
    4. ' >' → logprob: -6.9708757400512695
    5. 's' → logprob: -7.0958757400512695
    6. ' ' → logprob: -7.3458757400512695
    7. ' >=' → logprob: -7.7208757400512695
    8. ' *' → logprob: -7.8458757400512695
    9. ' ==' → logprob: -7.9708757400512695
    10. '>' → logprob: -7.9708757400512695

Token 89: ' min' (ID: 1349)
  Prédit: ' min'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' min' → logprob: -0.038313332945108414
    2. 'min' → logprob: -3.288313388824463
    3. ' m' → logprob: -9.288312911987305
    4. ' ' → logprob: -10.038312911987305
    5. 'm' → logprob: -10.538312911987305
    6. ' float' → logprob: -10.663312911987305
    7. '	min' → logprob: -10.788312911987305
    8. ' max' → logprob: -11.288312911987305
    9. '[min' → logprob: -11.288312911987305
    10. '  ' → logprob: -12.163312911987305

Token 90: '(cost' (ID: 133554)
  Prédit: '(cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(cost' → logprob: -9.925185440806672e-05
    2. '(' → logprob: -9.500099182128906
    3. 'cost' → logprob: -10.875099182128906
    4. '(co' → logprob: -13.125099182128906
    5. ' (' → logprob: -13.250099182128906
    6. ' costs' → logprob: -14.500099182128906
    7. '(c' → logprob: -14.750099182128906
    8. '_cost' → logprob: -16.000099182128906
    9. '(
' → logprob: -16.125099182128906
    10. '(count' → logprob: -16.250099182128906

Token 91: 's' (ID: 82)
  Prédit: 's'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -5.800739018013701e-05
    2. ')s' → logprob: -10.5000581741333
    3. ')' → logprob: -11.1250581741333
    4. '(s' → logprob: -11.5000581741333
    5. ' s' → logprob: -13.3750581741333
    6. ',' → logprob: -14.0000581741333
    7. '[s' → logprob: -14.6250581741333
    8. ',s' → logprob: -15.2500581741333
    9. '(cost' → logprob: -15.2500581741333
    10. '{s' → logprob: -15.2500581741333

Token 92: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.009456432424485683
    2. ' )' → logprob: -5.259456634521484
    3. '*' → logprob: -6.009456634521484
    4. ')*' → logprob: -7.259456634521484
    5. ' *' → logprob: -7.384456634521484
    6. ')
' → logprob: -8.009456634521484
    7. '*)' → logprob: -10.259456634521484
    8. ' )
' → logprob: -11.259456634521484
    9. '*n' → logprob: -11.259456634521484
    10. '[' → logprob: -12.134456634521484

Token 93: 'if' (ID: 366)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.23369979858398438
    2. 'if' → logprob: -1.7336997985839844
    3. ' 
' → logprob: -4.233699798583984
    4. ' ' → logprob: -4.983699798583984
    5. ' *' → logprob: -5.108699798583984
    6. '*' → logprob: -6.233699798583984
    7. '
' → logprob: -7.608699798583984
    8. '  
' → logprob: -8.358699798583984
    9. ' n' → logprob: -8.608699798583984
    10. ' i' → logprob: -8.608699798583984

Token 94: ' min' (ID: 1349)
  Prédit: ' min'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' min' → logprob: -0.044847454875707626
    2. ' n' → logprob: -3.5448474884033203
    3. 'min' → logprob: -4.29484748840332
    4. ' m' → logprob: -7.41984748840332
    5. 'n' → logprob: -7.54484748840332
    6. ' ' → logprob: -9.29484748840332
    7. 'm' → logprob: -10.04484748840332
    8. '	min' → logprob: -10.91984748840332
    9. ' cost' → logprob: -11.29484748840332
    10. ' ' → logprob: -11.79484748840332

Token 95: '_cost' (ID: 36820)
  Prédit: '_cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_cost' → logprob: -5.8126592193730175e-05
    2. '_' → logprob: -9.8750581741333
    3. 'cost' → logprob: -13.1250581741333
    4. ' _' → logprob: -13.8750581741333
    5. '_cos' → logprob: -14.3750581741333
    6. '_c' → logprob: -14.8750581741333
    7. ')' → logprob: -15.1250581741333
    8. '_COST' → logprob: -15.2500581741333
    9. '>' → logprob: -15.3750581741333
    10. '_min' → logprob: -15.5000581741333

Token 96: ' *' (ID: 425)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.2792988717556
    2. ' *' → logprob: -1.6542989015579224
    3. '*n' → logprob: -3.154298782348633
    4. '>' → logprob: -5.029298782348633
    5. ' >' → logprob: -5.779298782348633
    6. '*>' → logprob: -9.904298782348633
    7. '*m' → logprob: -10.029298782348633
    8. ' ' → logprob: -10.779298782348633
    9. ' n' → logprob: -12.279298782348633
    10. ' ' → logprob: -12.529298782348633

Token 97: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.02975395694375038
    2. 'n' → logprob: -3.5297539234161377
    3. ' ' → logprob: -13.404753684997559
    4. '	n' → logprob: -14.279753684997559
    5. '<|end|>' → logprob: -14.779753684997559
    6. ' m' → logprob: -14.904753684997559
    7. 'm' → logprob: -15.154753684997559
    8. '(n' → logprob: -16.654754638671875
    9. ')n' → logprob: -16.904754638671875
    10. 'n't' → logprob: -17.154754638671875

Token 98: ' >' (ID: 1424)
  Prédit: ' >'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.012521663680672646
    2. '>' → logprob: -4.387521743774414
    3. ' >=' → logprob: -12.012521743774414
    4. ' ' → logprob: -13.137521743774414
    5. ' <=' → logprob: -13.512521743774414
    6. '">' → logprob: -14.512521743774414
    7. '>=' → logprob: -14.762521743774414
    8. ' ' → logprob: -15.637521743774414
    9. ' >
' → logprob: -15.762521743774414
    10. ' >
' → logprob: -15.887521743774414

Token 99: ' m' (ID: 284)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'm' → logprob: -0.0009119403548538685
    2. ' m' → logprob: -7.000911712646484
    3. '	m' → logprob: -15.625911712646484
    4. ' ' → logprob: -16.125911712646484
    5. '   ' → logprob: -17.375911712646484
    6. '100' → logprob: -17.375911712646484
    7. ' ' → logprob: -18.250911712646484
    8. '  ' → logprob: -18.250911712646484
    9. ''m' → logprob: -18.813411712646484
    10. ')m' → logprob: -19.000911712646484

Token 100: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.011572104878723621
    2. ' :' → logprob: -4.636571884155273
    3. ':
' → logprob: -6.386571884155273
    4. ' :
' → logprob: -9.011571884155273
    5. '):' → logprob: -12.136571884155273
    6. ' print' → logprob: -14.136571884155273
    7. ':
' → logprob: -14.386571884155273
    8. ' :
' → logprob: -14.761571884155273
    9. ':return' → logprob: -15.011571884155273
    10. ' ):' → logprob: -15.136571884155273

Token 101: '   ' (ID: 271)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.3138337731361389
    2. 'print' → logprob: -1.4388337135314941
    3. '   ' → logprob: -3.688833713531494
    4. '
' → logprob: -5.688833713531494
    5. ' 
' → logprob: -5.813833713531494
    6. '	print' → logprob: -8.313834190368652
    7. '```' → logprob: -8.563834190368652
    8. '\n' → logprob: -8.938834190368652
    9. '    
' → logprob: -9.813834190368652
    10. '``' → logprob: -10.063834190368652

Token 102: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.14701901376247406
    2. ' print' → logprob: -2.0220189094543457
    3. '   ' → logprob: -5.522018909454346
    4. '
' → logprob: -8.647019386291504
    5. '	print' → logprob: -10.022019386291504
    6. ' 
' → logprob: -10.147019386291504
    7. '```' → logprob: -10.522019386291504
    8. '    
' → logprob: -11.022019386291504
    9. '    ' → logprob: -11.647019386291504
    10. '``' → logprob: -12.272019386291504

Token 103: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.020042503252625465
    2. '('' → logprob: -4.395042419433594
    3. '(' → logprob: -4.895042419433594
    4. '("("' → logprob: -11.895042419433594
    5. '('"' → logprob: -12.520042419433594
    6. '("")' → logprob: -12.645042419433594
    7. '("'' → logprob: -13.145042419433594
    8. ' ("' → logprob: -13.645042419433594
    9. '()' → logprob: -14.270042419433594
    10. '("(' → logprob: -14.270042419433594

Token 104: 'NA' (ID: 9555)
  Prédit: 'NA'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'NA' → logprob: -0.030937502160668373
    2. 'N' → logprob: -3.530937433242798
    3. '-' → logprob: -7.280937671661377
    4. 'NO' → logprob: -8.280937194824219
    5. '"N' → logprob: -9.530937194824219
    6. 'Na' → logprob: -9.655937194824219
    7. '0' → logprob: -9.905937194824219
    8. '"' → logprob: -10.405937194824219
    9. ''N' → logprob: -12.530937194824219
    10. ' NA' → logprob: -12.655937194824219

Token 105: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.006856624037027359
    2. '")
' → logprob: -5.006856441497803
    3. '")
' → logprob: -9.006856918334961
    4. '"' → logprob: -11.381856918334961
    5. ')' → logprob: -12.006856918334961
    6. ')")' → logprob: -14.631856918334961
    7. '")

' → logprob: -15.756856918334961
    8. '"
' → logprob: -16.38185691833496
    9. '");' → logprob: -16.38185691833496
    10. ' ")' → logprob: -16.63185691833496

Token 106: '   ' (ID: 271)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.004560426808893681
    2. '   ' → logprob: -5.879560470581055
    3. '
' → logprob: -6.754560470581055
    4. ' else' → logprob: -8.004560470581055
    5. '    
' → logprob: -9.629560470581055
    6. ')' → logprob: -9.879560470581055
    7. '\n' → logprob: -10.379560470581055
    8. '<|end|>' → logprob: -10.504560470581055
    9. 'elif' → logprob: -10.629560470581055
    10. ' 
' → logprob: -11.379560470581055

Token 107: ' exit' (ID: 10654)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.024288181215524673
    2. 'exit' (adapté à ' exit') → logprob: -4.274288177490234
    3. '
' → logprob: -5.399288177490234
    4. '   ' → logprob: -5.399288177490234
    5. '	exit' → logprob: -8.274288177490234
    6. ' exit' → logprob: -8.399288177490234
    7. ' else' → logprob: -8.524288177490234
    8. '\n' → logprob: -8.774288177490234
    9. '    
' → logprob: -9.399288177490234
    10. 'elif' → logprob: -10.024288177490234

Token 108: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00016098834748845547
    2. '(' → logprob: -8.875161170959473
    3. '()
' → logprob: -10.875161170959473
    4. '0' → logprob: -13.875161170959473
    5. '()\' → logprob: -15.250161170959473
    6. ' ()' → logprob: -15.375161170959473
    7. '()`' → logprob: -15.500161170959473
    8. '()

' → logprob: -15.750161170959473
    9. '())' → logprob: -15.875161170959473
    10. '()]' → logprob: -16.750160217285156

Token 109: 'c' (ID: 66)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0945267453789711
    2. 'best' → logprob: -2.844526767730713
    3. 'digits' → logprob: -4.719526767730713
    4. 'else' → logprob: -4.844526767730713
    5. 'result' → logprob: -5.219526767730713
    6. 'valid' → logprob: -5.844526767730713
    7. ' for' → logprob: -6.594526767730713
    8. 'results' → logprob: -6.719526767730713
    9. 'res' → logprob: -7.094526767730713
    10. 'possible' → logprob: -7.719526767730713

Token 110: 'andidates' (ID: 38168)
  Prédit: 'omb'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'omb' → logprob: -0.4021768569946289
    2. 'ho' → logprob: -1.902176856994629
    3. 'andidates' → logprob: -2.027176856994629
    4. 'ount' → logprob: -3.902176856994629
    5. 'om' → logprob: -4.277176856994629
    6. 'for' → logprob: -5.152176856994629
    7. 'ands' → logprob: -6.402176856994629
    8. 'ombo' → logprob: -6.902176856994629
    9. 'h' → logprob: -7.027176856994629
    10. '#' → logprob: -7.277176856994629

Token 111: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0019498213659971952
    2. '=' → logprob: -6.251949787139893
    3. ' ' → logprob: -11.37695026397705
    4. 's' → logprob: -11.87695026397705
    5. '_' → logprob: -14.50195026397705
    6. ':' → logprob: -14.62695026397705
    7. ' ' → logprob: -14.62695026397705
    8. ' =
' → logprob: -15.50195026397705
    9. '  ' → logprob: -16.001949310302734
    10. '.' → logprob: -16.001949310302734

Token 112: ' []
' (ID: 8911)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.04843291640281677
    2. ' []' → logprob: -3.9234328269958496
    3. '[' → logprob: -4.04843282699585
    4. 'list' → logprob: -5.42343282699585
    5. '[
' → logprob: -6.29843282699585
    6. ' [' → logprob: -6.92343282699585
    7. '[list' → logprob: -7.04843282699585
    8. '[]
' → logprob: -7.67343282699585
    9. 'product' → logprob: -7.92343282699585
    10. '[int' → logprob: -8.673433303833008

Token 113: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.00030721822986379266
    2. ' for' → logprob: -8.125307083129883
    3. 'digits' → logprob: -11.750307083129883
    4. ')' → logprob: -13.250307083129883
    5. '
' → logprob: -14.250307083129883
    6. '0' → logprob: -16.000307083129883
    7. '	for' → logprob: -16.500307083129883
    8. 'digit' → logprob: -16.750307083129883
    9. 'from' → logprob: -17.125307083129883
    10. ' 
' → logprob: -17.125307083129883

Token 114: ' digits' (ID: 37806)
  Prédit: 'digits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'digits' → logprob: -0.3924105763435364
    2. ' digits' → logprob: -1.7674105167388916
    3. 'comb' → logprob: -2.6424105167388916
    4. 'combo' → logprob: -2.8924105167388916
    5. ' comb' → logprob: -4.392410755157471
    6. ' combo' → logprob: -4.767410755157471
    7. 'digit' → logprob: -6.517410755157471
    8. ' combination' → logprob: -6.892410755157471
    9. 'd' → logprob: -7.142410755157471
    10. 'seq' → logprob: -7.392410755157471

Token 115: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.005506475921720266
    2. 'in' → logprob: -5.63050651550293
    3. 's' → logprob: -6.63050651550293
    4. ' ' → logprob: -8.38050651550293
    5. '_in' → logprob: -8.50550651550293
    6. '_' → logprob: -10.63050651550293
    7. ',' → logprob: -10.75550651550293
    8. '  ' → logprob: -11.13050651550293
    9. '   ' → logprob: -11.25550651550293
    10. '_comb' → logprob: -11.63050651550293

Token 116: ' product' (ID: 1888)
  Prédit: 'product'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'product' → logprob: -0.575942873954773
    2. ' product' → logprob: -0.825942873954773
    3. 'range' → logprob: -13.325942993164062
    4. '(product' → logprob: -13.575942993164062
    5. ' range' → logprob: -15.575942993164062
    6. '	product' → logprob: -15.575942993164062
    7. '.product' → logprob: -16.200942993164062
    8. 'Product' → logprob: -17.200942993164062
    9. '_product' → logprob: -17.950942993164062
    10. '$product' → logprob: -18.200942993164062

Token 117: '(range' (ID: 50017)
  Prédit: '(range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(range' → logprob: -1.6240566083070007e-06
    2. '(' → logprob: -13.500001907348633
    3. '(r' → logprob: -16.500001907348633
    4. 'range' → logprob: -16.500001907348633
    5. ' (' → logprob: -16.625001907348633
    6. '([' → logprob: -17.625001907348633
    7. ' range' → logprob: -18.000001907348633
    8. '(list' → logprob: -18.250001907348633
    9. '('' → logprob: -18.375001907348633
    10. '(map' → logprob: -19.125001907348633

Token 118: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -3.650518920039758e-06
    2. ' (' → logprob: -13.500003814697266
    3. '10' → logprob: -14.125003814697266
    4. '9' → logprob: -14.875003814697266
    5. ')' → logprob: -14.875003814697266
    6. '(
' → logprob: -15.250003814697266
    7. '(len' → logprob: -15.250003814697266
    8. '(n' → logprob: -15.625003814697266
    9. '```' → logprob: -17.250003814697266
    10. ')(' → logprob: -17.500003814697266

Token 119: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.017765551805496216
    2. '9' → logprob: -4.267765522003174
    3. '1' → logprob: -5.767765522003174
    4. '(' → logprob: -8.767765998840332
    5. 'len' → logprob: -8.892765998840332
    6. '```' → logprob: -9.517765998840332
    7. ' ' → logprob: -9.892765998840332
    8. '``' → logprob: -11.017765998840332
    9. '   ' → logprob: -11.392765998840332
    10. ')' → logprob: -12.017765998840332

Token 120: '),' (ID: 936)
  Prédit: '),'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '),' → logprob: -0.00018804390856530517
    2. ',' → logprob: -9.000187873840332
    3. ' ),' → logprob: -10.625187873840332
    4. ')' → logprob: -10.750187873840332
    5. ',),' → logprob: -11.000187873840332
    6. ' ,' → logprob: -14.000187873840332
    7. '),(' → logprob: -14.625187873840332
    8. ' ' → logprob: -14.875187873840332
    9. '```' → logprob: -15.750187873840332
    10. '},' → logprob: -15.875187873840332

Token 121: ' repeat' (ID: 22962)
  Prédit: 'repeat'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'repeat' → logprob: -0.011048528365790844
    2. ' repeat' → logprob: -4.511048316955566
    3. 'reverse' → logprob: -14.761048316955566
    4. 'r' → logprob: -16.261049270629883
    5. 're' → logprob: -17.261049270629883
    6. '_repeat' → logprob: -17.261049270629883
    7. '```' → logprob: -17.511049270629883
    8. ')' → logprob: -17.886049270629883
    9. 'rep' → logprob: -18.386049270629883
    10. '   ' → logprob: -18.386049270629883

Token 122: '=n' (ID: 47985)
  Prédit: '=n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=n' → logprob: -0.012295600958168507
    2. '=' → logprob: -4.512295722961426
    3. 'n' → logprob: -6.762295722961426
    4. '(n' → logprob: -9.387295722961426
    5. '(' → logprob: -13.012295722961426
    6. ' =' → logprob: -13.387295722961426
    7. ' n' → logprob: -13.512295722961426
    8. ')n' → logprob: -14.637295722961426
    9. ')' → logprob: -14.762295722961426
    10. 's' → logprob: -15.387295722961426

Token 123: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -3.3213025744771585e-05
    2. ':' → logprob: -10.750033378601074
    3. ')' → logprob: -11.625033378601074
    4. '):
' → logprob: -13.500033378601074
    5. ' ):' → logprob: -13.500033378601074
    6. '}:' → logprob: -17.750032424926758
    7. '):
' → logprob: -18.250032424926758
    8. '():' → logprob: -18.500032424926758
    9. ']:' → logprob: -18.750032424926758
    10. '):

' → logprob: -19.500032424926758

Token 124: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3967898190021515
    2. '   ' → logprob: -1.271789789199829
    3. '<|end|>' → logprob: -4.271790027618408
    4. ':' → logprob: -4.521790027618408
    5. ' 
' → logprob: -4.771790027618408
    6. '    
' → logprob: -5.396790027618408
    7. '  ' → logprob: -6.021790027618408
    8. ')' → logprob: -6.521790027618408
    9. '  
' → logprob: -6.896790027618408
    10. ',' → logprob: -7.021790027618408

Token 125: ' total' (ID: 3609)
  Prédit: ' total'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' total' → logprob: -0.6019768118858337
    2. 'total' (adapté à ' total') → logprob: -1.7269768714904785
    3. '   ' → logprob: -1.8519768714904785
    4. '    ' → logprob: -3.1019768714904785
    5. ' ' → logprob: -3.7269768714904785
    6. 'cost' → logprob: -4.4769768714904785
    7. 'sum' → logprob: -4.8519768714904785
    8. ' cost' → logprob: -4.9769768714904785
    9. '    
' → logprob: -5.2269768714904785
    10. ' sum' → logprob: -5.2269768714904785

Token 126: ' =' (ID: 314)
  Prédit: '_cost'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_cost' → logprob: -0.012849592603743076
    2. '_' → logprob: -4.387849807739258
    3. ' =' → logprob: -8.262849807739258
    4. '=' → logprob: -10.262849807739258
    5. 'cost' → logprob: -11.262849807739258
    6. '_price' → logprob: -11.262849807739258
    7. ' _' → logprob: -12.012849807739258
    8. '_sum' → logprob: -12.387849807739258
    9. '_COST' → logprob: -12.637849807739258
    10. '=_' → logprob: -13.387849807739258

Token 127: ' sum' (ID: 4215)
  Prédit: 'sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sum' → logprob: -0.1754894107580185
    2. '0' → logprob: -2.1754894256591797
    3. ' sum' → logprob: -3.0504894256591797
    4. ' ' → logprob: -9.67548942565918
    5. '	sum' → logprob: -13.80048942565918
    6. '   ' → logprob: -14.67548942565918
    7. '(sum' → logprob: -14.80048942565918
    8. '=sum' → logprob: -14.92548942565918
    9. '  ' → logprob: -15.92548942565918
    10. '
' → logprob: -16.80048942565918

Token 128: '(cost' (ID: 133554)
  Prédit: '(cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(cost' → logprob: -0.0003967071825172752
    2. '(' → logprob: -8.125396728515625
    3. 'cost' → logprob: -9.375396728515625
    4. '([' → logprob: -11.250396728515625
    5. '(c' → logprob: -13.625396728515625
    6. '(
' → logprob: -14.000396728515625
    7. '((' → logprob: -14.500396728515625
    8. '(

' → logprob: -16.250396728515625
    9. ' costs' → logprob: -16.750396728515625
    10. '()' → logprob: -16.750396728515625

Token 129: 's' (ID: 82)
  Prédit: 's'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -1.4021237802808173e-05
    2. '(cost' → logprob: -12.750014305114746
    3. ')' → logprob: -12.875014305114746
    4. '[c' → logprob: -13.125014305114746
    5. '[s' → logprob: -13.125014305114746
    6. 'cost' → logprob: -13.750014305114746
    7. '[' → logprob: -14.000014305114746
    8. 'st' → logprob: -15.250014305114746
    9. '_[' → logprob: -15.750014305114746
    10. 'ss' → logprob: -15.750014305114746

Token 130: '[d' (ID: 48377)
  Prédit: '[c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[c' → logprob: -0.037419166415929794
    2. '[d' → logprob: -3.412419080734253
    3. '[' → logprob: -5.662419319152832
    4. 'cost' → logprob: -9.037419319152832
    5. ')[' → logprob: -9.162419319152832
    6. '(cost' → logprob: -10.662419319152832
    7. ')' → logprob: -12.037419319152832
    8. 'digits' → logprob: -12.287419319152832
    9. '[x' → logprob: -12.412419319152832
    10. '[i' → logprob: -12.412419319152832

Token 131: ']' (ID: 60)
  Prédit: 'igits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'igits' → logprob: -0.6166377067565918
    2. 'igit' → logprob: -0.8666377067565918
    3. '])' → logprob: -3.366637706756592
    4. ']' → logprob: -5.866637706756592
    5. ')' → logprob: -7.491637706756592
    6. ')]' → logprob: -7.991637706756592
    7. '[' → logprob: -8.11663818359375
    8. 'ig' → logprob: -8.49163818359375
    9. 'digits' → logprob: -8.74163818359375
    10. 'd' → logprob: -9.24163818359375

Token 132: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.11374707520008087
    2. 'for' → logprob: -2.2387471199035645
    3. ')' → logprob: -7.1137471199035645
    4. ' ' → logprob: -9.613746643066406
    5. 'd' → logprob: -11.363746643066406
    6. '	for' → logprob: -11.738746643066406
    7. ']' → logprob: -11.738746643066406
    8. ' )' → logprob: -12.363746643066406
    9. '])' → logprob: -12.613746643066406
    10. ' d' → logprob: -12.863746643066406

Token 133: ' d' (ID: 272)
  Prédit: ' digits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' digits' → logprob: -0.3355139195919037
    2. ' d' → logprob: -1.835513949394226
    3. 'digits' → logprob: -2.7105138301849365
    4. 'd' → logprob: -2.8355138301849365
    5. '	d' → logprob: -8.210514068603516
    6. '_digits' → logprob: -10.710514068603516
    7. 'Digits' → logprob: -12.835514068603516
    8. ' dí' → logprob: -13.085514068603516
    9. ')d' → logprob: -13.085514068603516
    10. ' digit' → logprob: -13.835514068603516

Token 134: ' in' (ID: 306)
  Prédit: 'igits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'igits' → logprob: -0.015619011595845222
    2. ' in' → logprob: -4.515618801116943
    3. 'digits' → logprob: -5.765618801116943
    4. ' digits' → logprob: -6.765618801116943
    5. 'in' → logprob: -9.265619277954102
    6. 's' → logprob: -9.640619277954102
    7. ' ' → logprob: -9.890619277954102
    8. 'igit' → logprob: -10.515619277954102
    9. '_digits' → logprob: -11.265619277954102
    10. ')' → logprob: -12.015619277954102

Token 135: ' digits' (ID: 37806)
  Prédit: 'digits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'digits' → logprob: -0.026310166344046593
    2. ' digits' → logprob: -3.6513102054595947
    3. 'igits' → logprob: -12.151309967041016
    4. 'd' → logprob: -13.276309967041016
    5. 'range' → logprob: -13.651309967041016
    6. ')' → logprob: -14.776309967041016
    7. 'digit' → logprob: -14.901309967041016
    8. '   ' → logprob: -15.276309967041016
    9. '_digits' → logprob: -15.276309967041016
    10. ' ' → logprob: -15.401309967041016

Token 136: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.002559495624154806
    2. ')
' → logprob: -6.127559661865234
    3. '   ' → logprob: -8.377559661865234
    4. ' )' → logprob: -9.627559661865234
    5. ' if' → logprob: -10.627559661865234
    6. 'if' → logprob: -10.877559661865234
    7. ')<=' → logprob: -11.502559661865234
    8. ')>' → logprob: -12.002559661865234
    9. '
' → logprob: -12.252559661865234
    10. '<|end|>' → logprob: -13.002559661865234

Token 137: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.013032574206590652
    2. ' if' → logprob: -5.01303243637085
    3. '<|end|>' → logprob: -5.38803243637085
    4. '
' → logprob: -7.88803243637085
    5. ')' → logprob: -8.013032913208008
    6. '    
' → logprob: -8.263032913208008
    7. ' ' → logprob: -8.388032913208008
    8. '  
' → logprob: -8.888032913208008
    9. '  ' → logprob: -8.888032913208008
    10. 'if' → logprob: -9.138032913208008

Token 138: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.04459815472364426
    2. 'if' (adapté à ' if') → logprob: -3.41959810256958
    3. ' ' → logprob: -4.54459810256958
    4. ')' → logprob: -8.794598579406738
    5. '<|end|>' → logprob: -9.919598579406738
    6. '    ' → logprob: -11.294598579406738
    7. '   ' → logprob: -11.794598579406738
    8. ' 
' → logprob: -11.794598579406738
    9. ' )' → logprob: -11.794598579406738
    10. '  ' → logprob: -11.794598579406738

Token 139: ' total' (ID: 3609)
  Prédit: ' total'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' total' → logprob: -0.4740820825099945
    2. 'total' → logprob: -0.9740821123123169
    3. '	total' → logprob: -13.474081993103027
    4. ' ' → logprob: -13.599081993103027
    5. '(total' → logprob: -13.599081993103027
    6. '   ' → logprob: -14.849081993103027
    7. '$total' → logprob: -15.474081993103027
    8. 'Total' → logprob: -16.099082946777344
    9. 't' → logprob: -16.099082946777344
    10. ' ' → logprob: -16.099082946777344

Token 140: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.225433349609375
    2. '<=' → logprob: -1.600433349609375
    3. ')<=' → logprob: -11.725433349609375
    4. '<|end|>' → logprob: -12.100433349609375
    5. ')' → logprob: -13.100433349609375
    6. ']<=' → logprob: -13.850433349609375
    7. ' ' → logprob: -13.850433349609375
    8. ' ' → logprob: -14.100433349609375
    9. '==' → logprob: -14.725433349609375
    10. '=' → logprob: -14.850433349609375

Token 141: ' m' (ID: 284)
  Prédit: ' m'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' m' → logprob: -0.06196802109479904
    2. 'm' → logprob: -2.8119680881500244
    3. ' ' → logprob: -15.561967849731445
    4. '	m' → logprob: -16.061967849731445
    5. ' ' → logprob: -16.561967849731445
    6. '   ' → logprob: -18.436967849731445
    7. ')m' → logprob: -18.936967849731445
    8. ' м' → logprob: -19.061967849731445
    9. '  ' → logprob: -20.561967849731445
    10. '(m' → logprob: -20.936967849731445

Token 142: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0034170090220868587
    2. ' and' → logprob: -5.878417015075684
    3. '):' → logprob: -7.878417015075684
    4. ':
' → logprob: -9.003417015075684
    5. 'and' → logprob: -9.628417015075684
    6. ' :' → logprob: -10.128417015075684
    7. ')' → logprob: -13.003417015075684
    8. '):
' → logprob: -14.003417015075684
    9. ':**' → logprob: -15.503417015075684
    10. ',' → logprob: -15.753417015075684

Token 143: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.45939335227012634
    2. '       ' → logprob: -1.2093933820724487
    3. 'c' → logprob: -2.709393262863159
    4. ' candidates' → logprob: -5.834393501281738
    5. ' c' → logprob: -7.959393501281738
    6. '	c' → logprob: -10.459393501281738
    7. '
' → logprob: -10.959393501281738
    8. ',c' → logprob: -11.334393501281738
    9. '  ' → logprob: -12.084393501281738
    10. '```' → logprob: -12.334393501281738

Token 144: ' number' (ID: 2086)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.09418503940105438
    2. '   ' → logprob: -2.4691851139068604
    3. ' candidates' → logprob: -5.344184875488281
    4. 'digits' → logprob: -8.719184875488281
    5. '       ' → logprob: -8.969184875488281
    6. ' c' → logprob: -9.969184875488281
    7. '
' → logprob: -10.094184875488281
    8. 'candidate' → logprob: -11.094184875488281
    9. ' ' → logprob: -11.469184875488281
    10. 'if' → logprob: -11.719184875488281

Token 145: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.38715195655822754
    2. '=' → logprob: -1.1371519565582275
    3. 's' → logprob: -8.262151718139648
    4. '=int' → logprob: -11.512151718139648
    5. '_str' → logprob: -12.137151718139648
    6. '_digits' → logprob: -13.387151718139648
    7. '.=' → logprob: -14.012151718139648
    8. 'int' → logprob: -14.387151718139648
    9. '_=' → logprob: -14.387151718139648
    10. 'digits' → logprob: -14.512151718139648

Token 146: ' ''.' (ID: 105941)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.0026538937818259
    2. '"' → logprob: -6.502654075622559
    3. '''.' → logprob: -7.502654075622559
    4. ' int' → logprob: -8.127654075622559
    5. '""' → logprob: -8.377654075622559
    6. '[int' → logprob: -9.752654075622559
    7. '''' → logprob: -12.002654075622559
    8. '0' → logprob: -12.627654075622559
    9. '(int' → logprob: -13.252654075622559
    10. 'sum' → logprob: -13.377654075622559

Token 147: 'join' (ID: 10891)
  Prédit: 'join'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'join' → logprob: -3.128163257315464e-07
    2. 'jo' → logprob: -15.875
    3. '''.' → logprob: -16.625
    4. ''.' → logprob: -17.5
    5. ' join' → logprob: -18.0
    6. 'strip' → logprob: -18.25
    7. '.join' → logprob: -18.5
    8. 'j' → logprob: -18.625
    9. '```' → logprob: -19.375
    10. 'z' → logprob: -20.125

Token 148: '(str' (ID: 7946)
  Prédit: '(str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(str' → logprob: -0.00033522743615321815
    2. 'str' → logprob: -8.500335693359375
    3. '(map' → logprob: -9.125335693359375
    4. '[str' → logprob: -11.000335693359375
    5. '(' → logprob: -12.125335693359375
    6. 'map' → logprob: -15.875335693359375
    7. '([' → logprob: -16.000335693359375
    8. '	str' → logprob: -16.125335693359375
    9. '(chr' → logprob: -16.125335693359375
    10. '=str' → logprob: -16.250335693359375

Token 149: '(d' (ID: 2572)
  Prédit: '(d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(d' → logprob: -6.153795766294934e-06
    2. 'd' → logprob: -12.125005722045898
    3. ')d' → logprob: -15.000005722045898
    4. '(' → logprob: -16.0000057220459
    5. '[d' → logprob: -16.0000057220459
    6. '	d' → logprob: -16.6250057220459
    7. 'digit' → logprob: -17.5000057220459
    8. '(x' → logprob: -17.8750057220459
    9. ' d' → logprob: -18.1250057220459
    10. '(i' → logprob: -19.3750057220459

Token 150: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.018292170017957687
    2. 'igit' → logprob: -4.01829195022583
    3. ')d' → logprob: -9.018292427062988
    4. 'it' → logprob: -11.768292427062988
    5. 'igits' → logprob: -12.768292427062988
    6. 'ig' → logprob: -13.143292427062988
    7. 'ight' → logprob: -13.143292427062988
    8. 'd' → logprob: -13.643292427062988
    9. '(d' → logprob: -13.768292427062988
    10. '))' → logprob: -13.768292427062988

Token 151: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.8496847152709961
    2. ')' → logprob: -1.099684715270996
    3. 'for' → logprob: -1.474684715270996
    4. 'd' → logprob: -5.349684715270996
    5. '(d' → logprob: -5.724684715270996
    6. ' d' → logprob: -6.849684715270996
    7. ')d' → logprob: -7.099684715270996
    8. 'or' → logprob: -7.849684715270996
    9. 'digit' → logprob: -8.849684715270996
    10. '[d' → logprob: -9.724684715270996

Token 152: ' d' (ID: 272)
  Prédit: ' digits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' digits' → logprob: -0.08093525469303131
    2. 'digits' → logprob: -2.58093523979187
    3. 'd' → logprob: -6.830935478210449
    4. ' d' → logprob: -6.955935478210449
    5. '_digits' → logprob: -12.33093547821045
    6. '	d' → logprob: -12.45593547821045
    7. ' in' → logprob: -14.70593547821045
    8. ' digit' → logprob: -14.83093547821045
    9. 'Digits' → logprob: -14.95593547821045
    10. 'digit' → logprob: -15.08093547821045

Token 153: ' in' (ID: 306)
  Prédit: 'igits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'igits' → logprob: -0.01969810575246811
    2. 'in' → logprob: -4.519698143005371
    3. ' in' → logprob: -5.519698143005371
    4. 'digits' → logprob: -5.519698143005371
    5. 'igit' → logprob: -8.269698143005371
    6. ' digits' → logprob: -9.144698143005371
    7. 'igts' → logprob: -9.394698143005371
    8. ' ' → logprob: -10.394698143005371
    9. 'i' → logprob: -10.644698143005371
    10. 'igs' → logprob: -10.894698143005371

Token 154: ' digits' (ID: 37806)
  Prédit: 'digits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'digits' → logprob: -0.011055364273488522
    2. ' digits' → logprob: -4.5110554695129395
    3. 'igits' → logprob: -13.011054992675781
    4. 'd' → logprob: -13.011054992675781
    5. ' ' → logprob: -13.636054992675781
    6. '   ' → logprob: -14.261054992675781
    7. 'digit' → logprob: -14.636054992675781
    8. '_digits' → logprob: -15.636054992675781
    9. '  ' → logprob: -15.886054992675781
    10. ')' → logprob: -16.26105499267578

Token 155: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.10025563836097717
    2. ')
' → logprob: -2.3502557277679443
    3. '   ' → logprob: -10.350255966186523
    4. ')
' → logprob: -11.225255966186523
    5. '))' → logprob: -13.850255966186523
    6. ')

' → logprob: -14.225255966186523
    7. ' )' → logprob: -15.225255966186523
    8. ')`
' → logprob: -15.350255966186523
    9. ').' → logprob: -15.475255966186523
    10. ');' → logprob: -15.975255966186523

Token 156: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.02106146141886711
    2. '   ' → logprob: -3.896061420440674
    3. ')' → logprob: -7.896061420440674
    4. ',' → logprob: -9.021061897277832
    5. '        
' → logprob: -11.396061897277832
    6. '<|end|>' → logprob: -12.396061897277832
    7. '           ' → logprob: -13.396061897277832
    8. '    
' → logprob: -13.396061897277832
    9. '),' → logprob: -13.521061897277832
    10. '
' → logprob: -13.771061897277832

Token 157: ' candidates' (ID: 18116)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.0023127419408410788
    2. '   ' → logprob: -6.252312660217285
    3. ' candidates' → logprob: -8.002312660217285
    4. '       ' → logprob: -10.252312660217285
    5. 'if' → logprob: -12.252312660217285
    6. ' c' → logprob: -12.502312660217285
    7. '
' → logprob: -12.752312660217285
    8. '           ' → logprob: -13.877312660217285
    9. '	c' → logprob: -14.627312660217285
    10. '  ' → logprob: -15.127312660217285

Token 158: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.00219735992141068
    2. '.' → logprob: -6.127197265625
    3. '.app' → logprob: -12.752197265625
    4. '.extend' → logprob: -12.877197265625
    5. '.add' → logprob: -13.002197265625
    6. '.ap' → logprob: -13.627197265625
    7. '.Append' → logprob: -13.877197265625
    8. '.setdefault' → logprob: -14.002197265625
    9. '.push' → logprob: -14.877197265625
    10. ').' → logprob: -14.877197265625

Token 159: '(number' (ID: 32955)
  Prédit: '(number'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(number' → logprob: -1.1398757123970427e-05
    2. '(' → logprob: -11.875011444091797
    3. 'number' → logprob: -12.625011444091797
    4. '((' → logprob: -13.875011444091797
    5. '(int' → logprob: -15.625011444091797
    6. '(num' → logprob: -17.375011444091797
    7. '(n' → logprob: -17.500011444091797
    8. '(numero' → logprob: -18.375011444091797
    9. '(numbers' → logprob: -18.500011444091797
    10. ' (' → logprob: -18.875011444091797

Token 160: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.292907877039397e-06
    2. '   ' → logprob: -13.37500286102295
    3. ')
' → logprob: -13.87500286102295
    4. ' )' → logprob: -14.50000286102295
    5. ')return' → logprob: -16.875003814697266
    6. '       ' → logprob: -17.125003814697266
    7. '))' → logprob: -17.250003814697266
    8. ')

' → logprob: -17.625003814697266
    9. '`)' → logprob: -17.875003814697266
    10. ')}}' → logprob: -17.875003814697266

Token 161: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.4877049922943115
    2. 'print' → logprob: -0.9877049922943115
    3. 'c' → logprob: -4.362705230712891
    4. '#' → logprob: -8.23770523071289
    5. ' if' → logprob: -8.48770523071289
    6. 'result' → logprob: -9.11270523071289
    7. 'best' → logprob: -9.36270523071289
    8. 'max' → logprob: -10.48770523071289
    9. ')' → logprob: -10.73770523071289
    10. '```' → logprob: -10.73770523071289

Token 162: ' not' (ID: 625)
  Prédit: ' candidates'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' candidates' → logprob: -0.03818022832274437
    2. 'c' → logprob: -3.288180112838745
    3. 'len' → logprob: -9.663180351257324
    4. ' not' → logprob: -10.163180351257324
    5. ' len' → logprob: -10.788180351257324
    6. ' c' → logprob: -11.788180351257324
    7. 'not' → logprob: -12.163180351257324
    8. ' candidats' → logprob: -13.163180351257324
    9. 'candidate' → logprob: -14.913180351257324
    10. '_candidates' → logprob: -15.163180351257324

Token 163: ' candidates' (ID: 18116)
  Prédit: ' candidates'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' candidates' → logprob: -0.07889121770858765
    2. 'c' → logprob: -2.5788912773132324
    3. ' candidats' → logprob: -14.453890800476074
    4. '_candidates' → logprob: -14.828890800476074
    5. ' c' → logprob: -14.953890800476074
    6. 'andidates' → logprob: -15.453890800476074
    7. ' candidatos' → logprob: -16.82889175415039
    8. ' ' → logprob: -17.45389175415039
    9. ' ' → logprob: -17.70389175415039
    10. 'candidate' → logprob: -18.20389175415039

Token 164: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0017048174049705267
    2. ':
' → logprob: -6.376704692840576
    3. 'print' → logprob: -14.501705169677734
    4. '=' → logprob: -14.876705169677734
    5. ' :' → logprob: -14.876705169677734
    6. ':
' → logprob: -14.876705169677734
    7. ':

' → logprob: -15.251705169677734
    8. '[' → logprob: -15.376705169677734
    9. ')' → logprob: -16.001705169677734
    10. '==' → logprob: -16.126705169677734

Token 165: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.011432097293436527
    2. 'print' → logprob: -4.51143217086792
    3. ' print' → logprob: -8.386431694030762
    4. ':
' → logprob: -9.886431694030762
    5. '    
' → logprob: -9.886431694030762
    6. '	print' → logprob: -10.886431694030762
    7. '
' → logprob: -11.011431694030762
    8. '```' → logprob: -11.511431694030762
    9. ':' → logprob: -12.636431694030762
    10. ')' → logprob: -14.261431694030762

Token 166: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -2.9160102712921798e-05
    2. ' print' → logprob: -10.875029563903809
    3. '   ' → logprob: -11.500029563903809
    4. '```' → logprob: -17.750028610229492
    5. '	print' → logprob: -18.375028610229492
    6. '
' → logprob: -20.250028610229492
    7. ' ' → logprob: -20.375028610229492
    8. '.print' → logprob: -21.875028610229492
    9. 'printf' → logprob: -22.125028610229492
    10. '  ' → logprob: -22.125028610229492

Token 167: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -3.547789674485102e-05
    2. '(' → logprob: -10.250035285949707
    3. '("")' → logprob: -17.000036239624023
    4. '('' → logprob: -17.125036239624023
    5. '("("' → logprob: -17.875036239624023
    6. '("\"' → logprob: -19.000036239624023
    7. '("""' → logprob: -19.375036239624023
    8. '(
' → logprob: -19.625036239624023
    9. '()' → logprob: -19.750036239624023
    10. '("'' → logprob: -20.125036239624023

Token 168: 'NA' (ID: 9555)
  Prédit: 'NA'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'NA' → logprob: -0.4287393391132355
    2. '"' → logprob: -1.053739309310913
    3. ''' → logprob: -10.678739547729492
    4. '```' → logprob: -12.678739547729492
    5. ' NA' → logprob: -12.803739547729492
    6. '")' → logprob: -13.678739547729492
    7. '"N' → logprob: -13.803739547729492
    8. '``' → logprob: -14.178739547729492
    9. '("' → logprob: -14.178739547729492
    10. '"""' → logprob: -14.303739547729492

Token 169: '")
' (ID: 1896)
  Prédit: ')
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.40694987773895264
    2. ')' → logprob: -1.1569498777389526
    3. '")' → logprob: -4.406949996948242
    4. '")
' → logprob: -5.156949996948242
    5. 'else' → logprob: -6.281949996948242
    6. ')")
' → logprob: -10.281949996948242
    7. '   ' → logprob: -12.031949996948242
    8. ')")' → logprob: -12.281949996948242
    9. ')
' → logprob: -12.531949996948242
    10. '')
' → logprob: -13.156949996948242

Token 170: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -4.842555426876061e-06
    2. ' else' → logprob: -12.750004768371582
    3. 'elif' → logprob: -14.000004768371582
    4. 'print' → logprob: -14.875004768371582
    5. '
' → logprob: -15.625004768371582
    6. 'els' → logprob: -15.750004768371582
    7. 'el' → logprob: -16.0000057220459
    8. 'e' → logprob: -16.7500057220459
    9. '_else' → logprob: -17.5000057220459
    10. ')' → logprob: -17.5000057220459

Token 171: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.021439580246806145
    2. ':
' → logprob: -3.896439552307129
    3. '   ' → logprob: -7.021439552307129
    4. 'print' → logprob: -13.021439552307129
    5. ' :' → logprob: -13.771439552307129
    6. ':
' → logprob: -14.646439552307129
    7. '[' → logprob: -15.271439552307129
    8. ':

' → logprob: -15.771439552307129
    9. ' :
' → logprob: -15.771439552307129
    10. ' print' → logprob: -16.021440505981445

Token 172: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2524348795413971
    2. 'print' → logprob: -1.7524348497390747
    3. ' print' → logprob: -3.0024349689483643
    4. ' candidates' → logprob: -9.877434730529785
    5. 'c' → logprob: -12.002434730529785
    6. '	print' → logprob: -12.252434730529785
    7. '    ' → logprob: -13.002434730529785
    8. '       ' → logprob: -13.127434730529785
    9. ' ' → logprob: -13.377434730529785
    10. 'sorted' → logprob: -13.377434730529785

Token 173: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.004168983083218336
    2. '   ' → logprob: -5.75416898727417
    3. ' print' → logprob: -7.50416898727417
    4. 'c' → logprob: -7.75416898727417
    5. '#' (adapté à ' #') → logprob: -12.129168510437012
    6. 'max' → logprob: -13.129168510437012
    7. ' candidates' → logprob: -13.629168510437012
    8. '	print' → logprob: -14.754168510437012
    9. ' ' → logprob: -15.004168510437012
    10. '  ' → logprob: -15.004168510437012

Token 174: ' Trou' (ID: 58947)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.08773711323738098
    2. 'c' → logprob: -2.5877370834350586
    3. '   ' → logprob: -4.962737083435059
    4. ' print' → logprob: -6.587737083435059
    5. 'best' → logprob: -8.462737083435059
    6. ' candidates' → logprob: -9.587737083435059
    7. 'max' → logprob: -10.337737083435059
    8. '#' → logprob: -10.337737083435059
    9. 'result' → logprob: -10.462737083435059
    10. 'candidate' → logprob: -10.712737083435059

Token 175: 'ver' (ID: 445)
  Prédit: 'vez'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'vez' → logprob: -0.7508327960968018
    2. 'ver' → logprob: -0.8758327960968018
    3. 've' → logprob: -3.0008327960968018
    4. 'v' → logprob: -3.1258327960968018
    5. 'vant' → logprob: -5.125832557678223
    6. '#' → logprob: -5.375832557678223
    7. '   ' → logprob: -5.750832557678223
    8. 'ter' → logprob: -6.875832557678223
    9. 'te' → logprob: -7.125832557678223
    10. 'min' → logprob: -8.375832557678223

Token 176: ' le' (ID: 505)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.005887556821107864
    2. ' max' → logprob: -5.255887508392334
    3. '   ' → logprob: -7.380887508392334
    4. 'la' → logprob: -11.755887985229492
    5. 'print' → logprob: -11.880887985229492
    6. '(max' → logprob: -12.005887985229492
    7. 'min' → logprob: -12.880887985229492
    8. 'le' → logprob: -13.005887985229492
    9. ' la' → logprob: -13.255887985229492
    10. 'len' → logprob: -13.755887985229492

Token 177: ' plus' (ID: 2932)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.0006980192265473306
    2. ' max' → logprob: -8.12569808959961
    3. 'plus' → logprob: -8.50069808959961
    4. 'min' → logprob: -9.50069808959961
    5. 'maximum' → logprob: -9.50069808959961
    6. 'largest' → logprob: -10.25069808959961
    7. 'candidate' → logprob: -12.25069808959961
    8. '最大' → logprob: -13.25069808959961
    9. 'len' → logprob: -14.37569808959961
    10. 'c' → logprob: -14.37569808959961

Token 178: ' petit' (ID: 20577)
  Prédit: 'grand'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'grand' → logprob: -0.014305942691862583
    2. 'long' → logprob: -4.26430606842041
    3. ' grand' → logprob: -9.51430606842041
    4. 'gr' → logprob: -9.76430606842041
    5. ' long' → logprob: -12.38930606842041
    6. 'g' → logprob: -13.51430606842041
    7. 'large' → logprob: -13.51430606842041
    8. 'Grand' → logprob: -13.63930606842041
    9. 'gran' → logprob: -14.13930606842041
    10. 'court' → logprob: -14.76430606842041

Token 179: ' nombre' (ID: 9733)
  Prédit: 'number'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'number' → logprob: -0.8603007197380066
    2. 'min' → logprob: -1.3603007793426514
    3. 'candidate' → logprob: -1.4853007793426514
    4. 'c' → logprob: -2.9853007793426514
    5. 'num' → logprob: -3.8603007793426514
    6. 'print' → logprob: -4.860300540924072
    7. 'nombre' → logprob: -4.985300540924072
    8. 'sorted' → logprob: -6.235300540924072
    9. ' number' → logprob: -6.485300540924072
    10. '   ' → logprob: -7.360300540924072

Token 180: ' au' (ID: 2791)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.19918228685855865
    2. '   ' → logprob: -2.1991822719573975
    3. ' =' → logprob: -2.6991822719573975
    4. 'print' → logprob: -6.199182510375977
    5. '=min' → logprob: -8.449182510375977
    6. 'min' → logprob: -9.449182510375977
    7. '=
' → logprob: -9.824182510375977
    8. 'sorted' → logprob: -11.199182510375977
    9. 'c' → logprob: -11.324182510375977
    10. 'ans' → logprob: -12.324182510375977

Token 181: ' sens' (ID: 5050)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.49176454544067383
    2. 'lex' → logprob: -1.6167645454406738
    3. 'num' → logprob: -2.616764545440674
    4. 'format' → logprob: -3.241764545440674
    5. 'print' → logprob: -3.616764545440674
    6. '1' → logprob: -4.866764545440674
    7. 'l' → logprob: -4.991764545440674
    8. 'sort' → logprob: -4.991764545440674
    9. '   ' → logprob: -5.491764545440674
    10. 'numer' → logprob: -5.991764545440674

Token 182: ' numérique' (ID: 73962)
  Prédit: 'lex'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'lex' → logprob: -0.7065408825874329
    2. 'num' → logprob: -1.081540822982788
    3. 'int' → logprob: -1.956540822982788
    4. 'lé' → logprob: -4.706541061401367
    5. 'strict' → logprob: -4.956541061401367
    6. 'math' → logprob: -5.706541061401367
    7. 'mat' → logprob: -6.581541061401367
    8. 'class' → logprob: -6.706541061401367
    9. 'str' → logprob: -6.956541061401367
    10. 'm' → logprob: -7.706541061401367

Token 183: ' après' (ID: 16460)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3490816354751587
    2. 'print' → logprob: -1.2240816354751587
    3. 'c' → logprob: -8.974081993103027
    4. '    
' → logprob: -9.224081993103027
    5. ')' → logprob: -9.599081993103027
    6. '
' → logprob: -9.849081993103027
    7. ',' → logprob: -10.349081993103027
    8. ' print' → logprob: -10.349081993103027
    9. 'number' → logprob: -10.474081993103027
    10. '.' → logprob: -10.724081993103027

Token 184: ' conversion' (ID: 22165)
  Prédit: 'tri'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tri' → logprob: -0.323321133852005
    2. 'c' → logprob: -2.3233211040496826
    3. 'sorted' → logprob: -2.3233211040496826
    4. 'sorting' → logprob: -3.5733211040496826
    5. 'int' → logprob: -3.8233211040496826
    6. 'min' → logprob: -4.448321342468262
    7. 'sort' → logprob: -5.198321342468262
    8. 'tr' → logprob: -5.323321342468262
    9. '   ' → logprob: -5.948321342468262
    10. ' tri' → logprob: -5.948321342468262

Token 185: ' en' (ID: 469)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07174142450094223
    2. 'print' → logprob: -2.9467413425445557
    3. 'number' → logprob: -4.571741580963135
    4. 'digits' → logprob: -6.446741580963135
    5. 'c' → logprob: -7.071741580963135
    6. 'numbers' → logprob: -7.196741580963135
    7. 'sorted' → logprob: -7.571741580963135
    8. 'candidate' → logprob: -7.696741580963135
    9. '
' → logprob: -7.821741580963135
    10. 'result' → logprob: -7.946741580963135

Token 186: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.0001737431448418647
    2. 'ent' → logprob: -8.750173568725586
    3. ' int' → logprob: -11.375173568725586
    4. 'integer' → logprob: -12.875173568725586
    5. '```' → logprob: -14.375173568725586
    6. '=int' → logprob: -15.625173568725586
    7. 'string' → logprob: -16.000173568725586
    8. 'nombre' → logprob: -16.000173568725586
    9. ' entier' → logprob: -16.000173568725586
    10. 'inte' → logprob: -17.375173568725586

Token 187: ',
' (ID: 412)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.3888742923736572
    2. '   ' → logprob: -1.1388742923736572
    3. 'number' → logprob: -7.263874053955078
    4. 'result' → logprob: -8.513874053955078
    5. ' print' → logprob: -8.763874053955078
    6. 'candidate' → logprob: -8.888874053955078
    7. 'min' → logprob: -9.013874053955078
    8. 'c' → logprob: -9.013874053955078
    9. ':' → logprob: -9.138874053955078
    10. '
' → logprob: -9.388874053955078

Token 188: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.020256072282791138
    2. 'key' → logprob: -4.145256042480469
    3. ' key' → logprob: -6.395256042480469
    4. 'sorted' → logprob: -6.895256042480469
    5. 'print' → logprob: -7.895256042480469
    6. '    
' → logprob: -8.145256042480469
    7. '
' → logprob: -8.895256042480469
    8. '  ' → logprob: -9.145256042480469
    9. 'min' → logprob: -9.270256042480469
    10. 'c' → logprob: -9.520256042480469

Token 189: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.17224496603012085
    2. ' key' → logprob: -2.4222450256347656
    3. 'key' → logprob: -2.6722450256347656
    4. 'sorted' → logprob: -9.297245025634766
    5. 'c' → logprob: -9.922245025634766
    6. '  ' → logprob: -10.047245025634766
    7. 'print' → logprob: -10.547245025634766
    8. '    ' → logprob: -10.797245025634766
    9. 'lambda' → logprob: -10.797245025634766
    10. '    
' → logprob: -10.797245025634766

Token 190: ' mais' (ID: 2899)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02828008122742176
    2. 'c' → logprob: -3.653280019760132
    3. 'print' → logprob: -6.778280258178711
    4. ' candidates' → logprob: -8.278280258178711
    5. 'digits' → logprob: -8.778280258178711
    6. 'candidate' → logprob: -9.528280258178711
    7. '  ' → logprob: -9.778280258178711
    8. ' print' → logprob: -10.028280258178711
    9. 'sorted' → logprob: -10.028280258178711
    10. 'numbers' → logprob: -10.153280258178711

Token 191: ' on' (ID: 402)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'c' → logprob: -1.124168038368225
    2. '#' → logprob: -1.749168038368225
    3. '   ' → logprob: -1.999168038368225
    4. 'digits' → logprob: -1.999168038368225
    5. 'len' → logprob: -2.3741679191589355
    6. ' #' → logprob: -3.8741679191589355
    7. ' candidates' → logprob: -3.9991679191589355
    8. 'les' → logprob: -4.8741679191589355
    9. 'en' → logprob: -4.9991679191589355
    10. ' les' → logprob: -5.1241679191589355

Token 192: ' doit' (ID: 21822)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.43458890914917
    2. 'do' → logprob: -1.93458890914917
    3. 'pe' → logprob: -2.30958890914917
    4. 'continue' → logprob: -3.18458890914917
    5. ' veut' → logprob: -3.18458890914917
    6. '#' → logprob: -3.30958890914917
    7. 'voud' → logprob: -3.30958890914917
    8. ' doit' → logprob: -3.30958890914917
    9. 'tr' → logprob: -3.43458890914917
    10. 'n' → logprob: -3.93458890914917

Token 193: ' conserver' (ID: 116877)
  Prédit: 'tr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'tr' → logprob: -0.909047544002533
    2. 'prendre' → logprob: -2.2840476036071777
    3. 'égal' → logprob: -2.4090476036071777
    4. 'tenir' → logprob: -2.6590476036071777
    5. 'contin' → logprob: -2.7840476036071777
    6. 'a' → logprob: -3.6590476036071777
    7. 'faire' → logprob: -3.7840476036071777
    8. 'penser' → logprob: -3.9090476036071777
    9. 'chercher' → logprob: -4.159047603607178
    10. 'tout' → logprob: -4.159047603607178

Token 194: ' les' (ID: 1341)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.7128880620002747
    2. 'les' → logprob: -1.0878880023956299
    3. 'le' → logprob: -2.21288800239563
    4. 'la' → logprob: -3.71288800239563
    5. 'n' → logprob: -4.462888240814209
    6. 'len' → logprob: -4.462888240814209
    7. 'z' → logprob: -5.212888240814209
    8. ' les' → logprob: -5.712888240814209
    9. '0' → logprob: -5.837888240814209
    10. 'leading' → logprob: -6.962888240814209

Token 195: ' z' (ID: 579)
  Prédit: 'z'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'z' → logprob: -0.018093280494213104
    2. '0' → logprob: -4.893093109130859
    3. ' z' → logprob: -5.143093109130859
    4. 'zeros' → logprob: -5.643093109130859
    5. 'n' → logprob: -7.643093109130859
    6. 'leading' → logprob: -8.14309310913086
    7. 'car' → logprob: -9.76809310913086
    8. 'digits' → logprob: -9.89309310913086
    9. '000' → logprob: -10.14309310913086
    10. ' zeros' → logprob: -10.39309310913086

Token 196: 'éros' (ID: 120888)
  Prédit: 'éros'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'éros' → logprob: -0.04072751849889755
    2. 'eros' → logprob: -3.2907276153564453
    3. 'ero' → logprob: -6.540727615356445
    4. 'éro' → logprob: -7.040727615356445
    5. 'é' → logprob: -8.165727615356445
    6. 'e' → logprob: -10.540727615356445
    7. '0' → logprob: -11.165727615356445
    8. 'ê' → logprob: -11.790727615356445
    9. '{' → logprob: -12.290727615356445
    10. '`' → logprob: -12.290727615356445

Token 197: ' en' (ID: 469)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13281764090061188
    2. 'print' → logprob: -2.1328177452087402
    3. 'c' → logprob: -6.38281774520874
    4. 'result' → logprob: -6.88281774520874
    5. '
' → logprob: -7.00781774520874
    6. 'number' → logprob: -7.00781774520874
    7. 'candidate' → logprob: -7.75781774520874
    8. '    
' → logprob: -8.257817268371582
    9. 'sorted' → logprob: -9.007817268371582
    10. 'answer' → logprob: -9.007817268371582

Token 198: ' tête' (ID: 36447)
  Prédit: 'chaine'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'chaine' → logprob: -0.4698466360569
    2. 't' → logprob: -1.4698466062545776
    3. 'string' → logprob: -2.844846725463867
    4. 'cha' → logprob: -3.219846725463867
    5. 'dé' → logprob: -4.469846725463867
    6. 'nombre' → logprob: -5.094846725463867
    7. 'face' → logprob: -5.219846725463867
    8. 'avant' → logprob: -5.344846725463867
    9. 'ch' → logprob: -5.594846725463867
    10. 'la' → logprob: -6.219846725463867

Token 199: ' dans' (ID: 2671)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.011919306591153145
    2. 'print' → logprob: -4.5119194984436035
    3. 'number' → logprob: -8.511919021606445
    4. '    
' → logprob: -8.636919021606445
    5. 'c' → logprob: -8.886919021606445
    6. '
' → logprob: -9.011919021606445
    7. 'result' → logprob: -9.511919021606445
    8. 'sorted' → logprob: -10.636919021606445
    9. '    ' → logprob: -10.886919021606445
    10. ' print' → logprob: -11.011919021606445

Token 200: ' l' (ID: 305)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.5750223994255066
    2. 'les' → logprob: -1.5750224590301514
    3. 'l' → logprob: -1.9500224590301514
    4. 'la' → logprob: -2.5750224590301514
    5. ' candidates' → logprob: -5.700022220611572
    6. ' la' → logprob: -6.200022220611572
    7. ' les' → logprob: -6.325022220611572
    8. 'le' → logprob: -6.325022220611572
    9. 'len' → logprob: -7.325022220611572
    10. 'number' → logprob: -7.950022220611572

Token 201: ''aff' (ID: 53397)
  Prédit: 'aff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'aff' → logprob: -0.4205842614173889
    2. 'print' → logprob: -1.9205842018127441
    3. ''aff' → logprob: -2.295584201812744
    4. 'a' → logprob: -3.795584201812744
    5. 'nombre' → logprob: -3.795584201812744
    6. 'chaine' → logprob: -4.045584201812744
    7. 'string' → logprob: -4.670584201812744
    8. 'output' → logprob: -5.545584201812744
    9. 'c' → logprob: -5.670584201812744
    10. 'code' → logprob: -6.170584201812744

Token 202: 'ichage' (ID: 118475)
  Prédit: 'ichage'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ichage' → logprob: -0.00016194197814911604
    2. 'iche' → logprob: -9.125162124633789
    3. 'ich' → logprob: -10.625162124633789
    4. '#' → logprob: -10.875162124633789
    5. 'ic' → logprob: -11.750162124633789
    6. '```' → logprob: -14.875162124633789
    7. 'print' → logprob: -15.000162124633789
    8. 'f' → logprob: -15.250162124633789
    9. '``' → logprob: -16.25016212463379
    10. 'icher' → logprob: -16.37516212463379

Token 203: ':' (ID: 25)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0058401646092534065
    2. 'print' → logprob: -5.380840301513672
    3. 'number' → logprob: -7.880840301513672
    4. 'c' → logprob: -8.255840301513672
    5. '
' → logprob: -8.505840301513672
    6. '    
' → logprob: -8.755840301513672
    7. 'digits' → logprob: -10.255840301513672
    8. 'result' → logprob: -10.380840301513672
    9. 'numbers' → logprob: -10.630840301513672
    10. 'candidate' → logprob: -10.630840301513672

Token 204: ' on' (ID: 402)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4901788532733917
    2. 'print' → logprob: -1.1151788234710693
    3. 'c' → logprob: -3.4901788234710693
    4. 'result' → logprob: -4.740179061889648
    5. 'best' → logprob: -4.990179061889648
    6. 'number' → logprob: -4.990179061889648
    7. ' print' → logprob: -5.865179061889648
    8. 'answer' → logprob: -6.615179061889648
    9. 'candidate' → logprob: -7.115179061889648
    10. 'max' → logprob: -7.615179061889648

Token 205: ' compare' (ID: 12221)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.599509060382843
    2. '.sort' → logprob: -1.2245090007781982
    3. '.print' → logprob: -2.4745090007781982
    4. 's' → logprob: -3.9745090007781982
    5. 'c' → logprob: -4.349509239196777
    6. '#print' → logprob: -5.099509239196777
    7. '_candidates' → logprob: -5.224509239196777
    8. 'sort' → logprob: -5.849509239196777
    9. '#' → logprob: -5.849509239196777
    10. 'r' → logprob: -6.349509239196777

Token 206: ' par' (ID: 686)
  Prédit: 'lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'lambda' → logprob: -0.7333387732505798
    2. 'key' → logprob: -1.2333388328552246
    3. 'c' → logprob: -1.7333388328552246
    4. 'int' → logprob: -3.6083388328552246
    5. 'len' → logprob: -4.733338832855225
    6. '   ' → logprob: -5.358338832855225
    7. ' key' → logprob: -5.358338832855225
    8. ' lambda' → logprob: -5.983338832855225
    9. '(lambda' → logprob: -6.608338832855225
    10. 'sorted' → logprob: -6.858338832855225

Token 207: ' int' (ID: 677)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.20807310938835144
    2. 'int' → logprob: -2.083073139190674
    3. 'lambda' → logprob: -3.083073139190674
    4. 'length' → logprob: -4.208073139190674
    5. 'long' → logprob: -6.208073139190674
    6. 'la' → logprob: -8.833072662353516
    7. 'number' → logprob: -9.833072662353516
    8. 'nombre' → logprob: -9.833072662353516
    9. 'l' → logprob: -9.833072662353516
    10. 'lam' → logprob: -10.083072662353516

Token 208: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11045964807271957
    2. 'c' → logprob: -3.360459566116333
    3. 'min' → logprob: -3.985459566116333
    4. '=' → logprob: -4.485459804534912
    5. ',' → logprob: -5.110459804534912
    6. 'key' → logprob: -5.235459804534912
    7. ' =' → logprob: -5.610459804534912
    8. '(c' → logprob: -5.860459804534912
    9. 'sorted' → logprob: -5.860459804534912
    10. ')' → logprob: -5.985459804534912

Token 209: ' on' (ID: 402)
  Prédit: ' key'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' key' → logprob: -0.2584286630153656
    2. '   ' → logprob: -2.1334285736083984
    3. 'key' → logprob: -2.6334285736083984
    4. ' min' → logprob: -4.008428573608398
    5. 'min' → logprob: -4.258428573608398
    6. '       ' → logprob: -6.508428573608398
    7. 'sorted' → logprob: -7.258428573608398
    8. ' sorted' → logprob: -7.633428573608398
    9. 'max' → logprob: -8.258428573608398
    10. 'lambda' → logprob: -8.383428573608398

Token 210: ' affiche' (ID: 127479)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.4284312427043915
    2. 'continue' → logprob: -2.053431272506714
    3. 'util' → logprob: -2.928431272506714
    4. 'tr' → logprob: -3.803431272506714
    5. '#' → logprob: -4.053431034088135
    6. 'sort' → logprob: -4.053431034088135
    7. 'aff' → logprob: -4.303431034088135
    8. 'tri' → logprob: -4.428431034088135
    9. 'cho' → logprob: -4.678431034088135
    10. ' print' → logprob: -4.928431034088135

Token 211: ' la' (ID: 557)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.09463552385568619
    2. ' min' → logprob: -3.219635486602783
    3. 'c' → logprob: -3.344635486602783
    4. 'max' → logprob: -4.469635486602783
    5. 'sorted' → logprob: -6.094635486602783
    6. '(min' → logprob: -7.469635486602783
    7. ' max' → logprob: -8.344635963439941
    8. '   ' → logprob: -8.719635963439941
    9. ' c' → logprob: -8.719635963439941
    10. ' candidates' → logprob: -9.469635963439941

Token 212: ' chaîne' (ID: 89288)
  Prédit: 'min'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'min' → logprob: -0.014896746724843979
    2. 'max' → logprob: -4.889896869659424
    3. ' min' → logprob: -5.014896869659424
    4. 'sorted' → logprob: -8.889896392822266
    5. 'minimum' → logprob: -9.139896392822266
    6. 'c' → logprob: -9.139896392822266
    7. '[min' → logprob: -9.889896392822266
    8. ' max' → logprob: -10.139896392822266
    9. '(min' → logprob: -10.264896392822266
    10. '+' → logprob: -10.514896392822266

Token 213: ' brute' (ID: 128602)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04974065348505974
    2. 'print' → logprob: -3.1747405529022217
    3. '
' → logprob: -5.799740791320801
    4. 'c' → logprob: -6.299740791320801
    5. '    
' → logprob: -7.424740791320801
    6. 'number' → logprob: -7.674740791320801
    7. 'candidate' → logprob: -8.1747407913208
    8. 'result' → logprob: -8.7997407913208
    9. '```' → logprob: -9.4247407913208
    10. ',' → logprob: -10.0497407913208

Token 214: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.019621651619672775
    2. 'print' → logprob: -4.394621849060059
    3. 'c' → logprob: -6.269621849060059
    4. 'candidate' → logprob: -6.644621849060059
    5. 'number' → logprob: -6.894621849060059
    6. 'best' → logprob: -6.894621849060059
    7. 'result' → logprob: -7.144621849060059
    8. '
' → logprob: -7.519621849060059
    9. '    
' → logprob: -8.644621849060059
    10. 'answer' → logprob: -9.019621849060059

Token 215: '   ' (ID: 271)
  Prédit: 'best'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'best' → logprob: -0.3130023181438446
    2. '   ' → logprob: -2.188002347946167
    3. 'result' → logprob: -2.688002347946167
    4. 'print' → logprob: -3.313002347946167
    5. 'c' → logprob: -3.938002347946167
    6. 'candidate' → logprob: -3.938002347946167
    7. 'answer' → logprob: -5.063002109527588
    8. 'number' → logprob: -6.688002109527588
    9. ' best' → logprob: -6.938002109527588
    10. 'largest' → logprob: -7.063002109527588

Token 216: ' candidates' (ID: 18116)
  Prédit: 'best'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'best' → logprob: -0.5717082023620605
    2. 'print' → logprob: -1.4467082023620605
    3. 'c' → logprob: -1.9467082023620605
    4. '   ' → logprob: -3.8217082023620605
    5. ' best' → logprob: -4.5717082023620605
    6. 'result' → logprob: -5.0717082023620605
    7. 'answer' → logprob: -5.0717082023620605
    8. ' print' → logprob: -5.1967082023620605
    9. 'candidate' → logprob: -5.3217082023620605
    10. 'ans' → logprob: -7.6967082023620605

Token 217: '.sort' (ID: 19551)
  Prédit: '.sort'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.sort' → logprob: -0.00757385790348053
    2. '=' → logprob: -5.007574081420898
    3. '.' → logprob: -7.132574081420898
    4. 'sort' → logprob: -10.382574081420898
    5. '=min' → logprob: -10.882574081420898
    6. '_sorted' → logprob: -12.882574081420898
    7. ' =' → logprob: -12.882574081420898
    8. '.=' → logprob: -12.882574081420898
    9. '=.' → logprob: -14.257574081420898
    10. 'sorted' → logprob: -14.882574081420898

Token 218: '(key' (ID: 8932)
  Prédit: '(key'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(key' → logprob: -7.32654589228332e-05
    2. 'key' → logprob: -10.125073432922363
    3. '()' → logprob: -10.375073432922363
    4. '(reverse' → logprob: -13.375073432922363
    5. ' key' → logprob: -16.250072479248047
    6. ',key' → logprob: -16.625072479248047
    7. '(' → logprob: -16.875072479248047
    8. '()
' → logprob: -17.125072479248047
    9. '[key' → logprob: -18.500072479248047
    10. '	key' → logprob: -18.750072479248047

Token 219: '=lambda' (ID: 64865)
  Prédit: '=lambda'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=lambda' → logprob: -0.02390274964272976
    2. '=int' → logprob: -3.773902654647827
    3. 'lambda' → logprob: -7.773902893066406
    4. 'int' → logprob: -9.023902893066406
    5. '=' → logprob: -9.398902893066406
    6. ' lambda' → logprob: -10.648902893066406
    7. '(lambda' → logprob: -11.773902893066406
    8. ' =' → logprob: -13.898902893066406
    9. '=len' → logprob: -15.273902893066406
    10. '<int' → logprob: -15.523902893066406

Token 220: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.0008093867218121886
    2. ' x' → logprob: -8.000809669494629
    3. 'lambda' → logprob: -8.375809669494629
    4. 'int' → logprob: -8.500809669494629
    5. 's' → logprob: -10.875809669494629
    6. 'number' → logprob: -11.000809669494629
    7. 'num' → logprob: -13.125809669494629
    8. 'd' → logprob: -13.500809669494629
    9. ' lambda' → logprob: -14.000809669494629
    10. 'c' → logprob: -15.375809669494629

Token 221: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.20545554161071777
    2. ':int' → logprob: -1.7054555416107178
    3. 'int' → logprob: -5.705455780029297
    4. ' :' → logprob: -7.330455780029297
    5. ' int' → logprob: -10.455455780029297
    6. '=int' → logprob: -10.955455780029297
    7. '[int' → logprob: -13.080455780029297
    8. ',int' → logprob: -14.580455780029297
    9. 'x' → logprob: -14.705455780029297
    10. '<int' → logprob: -14.830455780029297

Token 222: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -7.517272024415433e-05
    2. 'lambda' → logprob: -9.875075340270996
    3. ' int' → logprob: -11.000075340270996
    4. '(int' → logprob: -12.000075340270996
    5. '[int' → logprob: -14.125075340270996
    6. '(lambda' → logprob: -16.12507438659668
    7. '<int' → logprob: -17.50007438659668
    8. ' lambda' → logprob: -18.12507438659668
    9. ':int' → logprob: -19.25007438659668
    10. '=int' → logprob: -19.37507438659668

Token 223: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.000916935910936445
    2. 'x' → logprob: -7.000916957855225
    3. '(' → logprob: -12.250916481018066
    4. '(
' → logprob: -15.125916481018066
    5. ' x' → logprob: -15.375916481018066
    6. ')' → logprob: -16.375917434692383
    7. ')x' → logprob: -16.875917434692383
    8. '	x' → logprob: -18.875917434692383
    9. ' (' → logprob: -19.000917434692383
    10. '[x' → logprob: -20.000917434692383

Token 224: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0002146226615877822
    2. ')' → logprob: -8.750214576721191
    3. ')))' → logprob: -10.375214576721191
    4. ' ))' → logprob: -11.125214576721191
    5. '))
' → logprob: -12.125214576721191
    6. 'x' → logprob: -13.500214576721191
    7. ' ' → logprob: -14.500214576721191
    8. '));' → logprob: -14.875214576721191
    9. '),' → logprob: -14.875214576721191
    10. '))-' → logprob: -14.875214576721191

Token 225: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0006647797417826951
    2. '
' → logprob: -7.750664710998535
    3. ' print' → logprob: -9.250664710998535
    4. ')
' → logprob: -9.625664710998535
    5. ')' → logprob: -9.750664710998535
    6. '```' → logprob: -12.250664710998535
    7. '   ' → logprob: -13.125664710998535
    8. '    
' → logprob: -13.250664710998535
    9. ' 
' → logprob: -14.125664710998535
    10. '  
' → logprob: -14.250664710998535

Token 226: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -2.2200749754119897e-06
    2. ' print' → logprob: -13.250001907348633
    3. '   ' → logprob: -15.000001907348633
    4. '
' → logprob: -19.000001907348633
    5. '    
' → logprob: -20.500001907348633
    6. '```' → logprob: -21.125001907348633
    7. '	print' → logprob: -21.375001907348633
    8. '       ' → logprob: -22.375001907348633
    9. '#print' → logprob: -23.125001907348633
    10. '  ' → logprob: -23.625001907348633

Token 227: '(c' (ID: 2410)
  Prédit: '(c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -4.36574100604048e-06
    2. '(' → logprob: -12.375004768371582
    3. 'c' → logprob: -16.000003814697266
    4. '(candidate' → logprob: -17.750003814697266
    5. ' (' → logprob: -19.750003814697266
    6. '(
' → logprob: -20.375003814697266
    7. '()' → logprob: -21.250003814697266
    8. '(C' → logprob: -21.625003814697266
    9. '('' → logprob: -21.625003814697266
    10. ')c' → logprob: -21.875003814697266

Token 228: 'andidates' (ID: 38168)
  Prédit: 'andidates'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'andidates' → logprob: -2.6895233531831764e-05
    2. 'and' → logprob: -10.62502670288086
    3. 'andidate' → logprob: -13.12502670288086
    4. 'andid' → logprob: -16.00002670288086
    5. 'ands' → logprob: -16.25002670288086
    6. 'c' → logprob: -16.37502670288086
    7. 'andidat' → logprob: -16.75002670288086
    8. ')' → logprob: -16.75002670288086
    9. '_candidates' → logprob: -17.00002670288086
    10. 'andi' → logprob: -17.62502670288086

Token 229: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0141762038692832
    2. '[-' → logprob: -4.264176368713379
    3. '-' → logprob: -11.764176368713379
    4. '0' → logprob: -12.264176368713379
    5. ')' → logprob: -17.139175415039062
    6. '```' → logprob: -17.514175415039062
    7. '[len' → logprob: -17.639175415039062
    8. '   ' → logprob: -17.764175415039062
    9. '[
' → logprob: -17.764175415039062
    10. ' [' → logprob: -18.639175415039062

Token 230: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00018387178715784103
    2. '-' → logprob: -8.625184059143066
    3. '[' → logprob: -13.000184059143066
    4. ' ' → logprob: -13.625184059143066
    5. ' -' → logprob: -15.500184059143066
    6. '   ' → logprob: -15.875184059143066
    7. '
' → logprob: -16.18768310546875
    8. ')' → logprob: -16.50018310546875
    9. '```' → logprob: -16.75018310546875
    10. '1' → logprob: -17.25018310546875

Token 231: '])' (ID: 4636)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00017803447553887963
    2. '])' → logprob: -9.000178337097168
    3. '))' → logprob: -9.875178337097168
    4. '})' → logprob: -12.875178337097168
    5. ' )' → logprob: -15.750178337097168
    6. '())' → logprob: -15.875178337097168
    7. '）' → logprob: -16.37517738342285
    8. '`)' → logprob: -16.75017738342285
    9. ')])' → logprob: -16.87517738342285
    10. ')")' → logprob: -17.00017738342285


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 229
Tokens correctement prédits (1ère position, stricte): 69
Tokens correctement prédits (1ère position, avec adaptation): 72
Tokens correctement prédits (top 10): 153
Précision stricte (1ère position): 30.13%
Précision adaptée (1ère position): 31.44%
Précision (top 10): 66.81%
================================================================================
