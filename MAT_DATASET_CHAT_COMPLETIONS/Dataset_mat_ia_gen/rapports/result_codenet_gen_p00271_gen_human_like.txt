================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:03:03
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
for _ in range(7):
    a, b = map(int, input().split())
    print(a - b)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'for' (ID: 1938)
  → Token d'amorce (pas de prédiction)

Token 1: ' _' (ID: 1175)
  → Token d'amorce (pas de prédiction)

Token 2: ' in' (ID: 306)
  → Token d'amorce (pas de prédiction)

Token 3: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.017364848405122757
    2. 'range' → logprob: -4.642364978790283
    3. ' ' → logprob: -4.892364978790283
    4. '```' → logprob: -10.517364501953125
    5. '  ' → logprob: -11.267364501953125
    6. '`' → logprob: -11.392364501953125
    7. ' in' → logprob: -12.017364501953125
    8. ' for' → logprob: -12.142364501953125
    9. ' ```' → logprob: -12.392364501953125
    10. ' _' → logprob: -12.642364501953125

Token 4: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -4.23917081207037e-05
    2. '```' → logprob: -10.500041961669922
    3. '`' → logprob: -11.750041961669922
    4. ' (' → logprob: -12.375041961669922
    5. '(`' → logprob: -14.375041961669922
    6. '1' → logprob: -15.125041961669922
    7. '(
' → logprob: -15.375041961669922
    8. '(n' → logprob: -15.500041961669922
    9. '4' → logprob: -15.875041961669922
    10. '((' → logprob: -16.125041961669922

Token 5: '7' (ID: 22)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '10' → logprob: -0.00040409780922345817
    2. '0' → logprob: -9.000404357910156
    3. '5' → logprob: -9.375404357910156
    4. '1' → logprob: -9.375404357910156
    5. '100' → logprob: -9.625404357910156
    6. ')' → logprob: -10.250404357910156
    7. ' ' → logprob: -12.875404357910156
    8. 'range' → logprob: -13.375404357910156
    9. '```' → logprob: -13.500404357910156
    10. '3' → logprob: -13.500404357910156

Token 6: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.20161320269107819
    2. ')' → logprob: -1.701613187789917
    3. ':' → logprob: -8.576613426208496
    4. '):
' → logprob: -13.076613426208496
    5. ')：' → logprob: -13.076613426208496
    6. ')**' → logprob: -13.576613426208496
    7. '```' → logprob: -13.701613426208496
    8. '**' → logprob: -14.076613426208496
    9. '),' → logprob: -14.951613426208496
    10. ''):' → logprob: -15.076613426208496

Token 7: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3816755414009094
    2. '\n' → logprob: -1.8816754817962646
    3. '    
' → logprob: -2.7566754817962646
    4. '\' → logprob: -3.5066754817962646
    5. '    ' → logprob: -4.131675720214844
    6. ' 
' → logprob: -4.256675720214844
    7. ''' → logprob: -5.006675720214844
    8. ' ' → logprob: -5.256675720214844
    9. ':' → logprob: -5.506675720214844
    10. '```' → logprob: -5.631675720214844

Token 8: ' a' (ID: 261)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.928223729133606
    2. 'print' → logprob: -1.053223729133606
    3. '    ' → logprob: -1.553223729133606
    4. ' ' → logprob: -3.8032236099243164
    5. ' print' → logprob: -5.178223609924316
    6. '```' → logprob: -5.678223609924316
    7. '    
' → logprob: -6.178223609924316
    8. '#' → logprob: -6.178223609924316
    9. '\t' → logprob: -6.178223609924316
    10. 'a' (adapté à ' a') → logprob: -6.928223609924316

Token 9: ',' (ID: 11)
  Prédit: ' +='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' +=' → logprob: -1.1610586643218994
    2. '+=' → logprob: -1.7860586643218994
    3. '+' → logprob: -2.0360586643218994
    4. 'd' → logprob: -2.4110586643218994
    5. 'p' → logprob: -2.6610586643218994
    6. ' ' → logprob: -2.9110586643218994
    7. 'dd' → logprob: -3.1610586643218994
    8. '[' → logprob: -3.4110586643218994
    9. '=' → logprob: -3.9110586643218994
    10. 'r' → logprob: -4.41105842590332

Token 10: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.2790437638759613
    2. ' b' → logprob: -1.5290437936782837
    3. ',' → logprob: -3.779043674468994
    4. ',b' → logprob: -6.404043674468994
    5. ' ' → logprob: -7.279043674468994
    6. ' ,' → logprob: -7.404043674468994
    7. '=' → logprob: -8.029044151306152
    8. ' =' → logprob: -8.404044151306152
    9. '_' → logprob: -8.779044151306152
    10. 'a' → logprob: -8.904044151306152

Token 11: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.04110926017165184
    2. ',' → logprob: -3.666109323501587
    3. '=' → logprob: -4.291109085083008
    4. ' ,' → logprob: -7.416109085083008
    5. '[' → logprob: -9.166109085083008
    6. ' +=' → logprob: -9.541109085083008
    7. ')' → logprob: -9.791109085083008
    8. '<|end|>' → logprob: -9.916109085083008
    9. ' ' → logprob: -10.541109085083008
    10. '    ' → logprob: -11.041109085083008

Token 12: ' map' (ID: 4014)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.39183324575424194
    2. ' ' → logprob: -1.3918333053588867
    3. '1' → logprob: -3.0168333053588867
    4. ' b' → logprob: -4.391833305358887
    5. 'a' → logprob: -5.391833305358887
    6. 'b' → logprob: -5.391833305358887
    7. ' a' → logprob: -5.641833305358887
    8. 'i' → logprob: -8.016833305358887
    9. '7' → logprob: -8.516833305358887
    10. ' i' → logprob: -8.516833305358887

Token 13: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.03810230270028114
    2. '(' → logprob: -3.788102388381958
    3. '(lambda' → logprob: -4.538102149963379
    4. '(str' → logprob: -5.663102149963379
    5. 'int' → logprob: -8.413102149963379
    6. '(range' → logprob: -8.913102149963379
    7. '(input' → logprob: -9.913102149963379
    8. '<int' → logprob: -10.038102149963379
    9. '(list' → logprob: -10.163102149963379
    10. '(eval' → logprob: -10.913102149963379

Token 14: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.09805290400981903
    2. '(' → logprob: -2.973052978515625
    3. ')' → logprob: -3.348052978515625
    4. '(user' → logprob: -6.348052978515625
    5. ',' → logprob: -6.473052978515625
    6. '(range' → logprob: -7.223052978515625
    7. '(line' → logprob: -7.348052978515625
    8. 'input' → logprob: -7.848052978515625
    9. '('' → logprob: -8.723052978515625
    10. '`)' → logprob: -8.973052978515625

Token 15: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.47428223490715027
    2. 'input' → logprob: -0.9742822647094727
    3. '(input' → logprob: -8.974282264709473
    4. ')' → logprob: -9.849282264709473
    5. ',input' → logprob: -11.724282264709473
    6. ' )' → logprob: -12.099282264709473
    7. 'str' → logprob: -13.349282264709473
    8. '=input' → logprob: -13.724282264709473
    9. ' ' → logprob: -13.849282264709473
    10. ' (' → logprob: -14.099282264709473

Token 16: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.4370003938674927
    2. '()' → logprob: -1.0620003938674927
    3. '().' → logprob: -5.437000274658203
    4. '());' → logprob: -6.437000274658203
    5. '()))' → logprob: -7.062000274658203
    6. '('' → logprob: -7.937000274658203
    7. '(' → logprob: -8.312000274658203
    8. ')' → logprob: -8.937000274658203
    9. ' ())' → logprob: -9.062000274658203
    10. '();)' → logprob: -9.312000274658203

Token 17: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0009162207134068012
    2. 'strip' → logprob: -7.000916004180908
    3. 'rstrip' → logprob: -12.375916481018066
    4. ' split' → logprob: -14.750916481018066
    5. '(split' → logprob: -16.12591552734375
    6. ')' → logprob: -16.87591552734375
    7. 'spl' → logprob: -17.62591552734375
    8. 'read' → logprob: -18.75091552734375
    9. 'startswith' → logprob: -19.25091552734375
    10. '_split' → logprob: -19.50091552734375

Token 18: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.6605178117752075
    2. ')' → logprob: -1.6605178117752075
    3. '))' → logprob: -1.6605178117752075
    4. '()))' → logprob: -2.285517692565918
    5. '()' → logprob: -6.785517692565918
    6. '('' → logprob: -8.410517692565918
    7. '(' → logprob: -9.410517692565918
    8. '())
' → logprob: -10.410517692565918
    9. ''))' → logprob: -10.535517692565918
    10. '()))
' → logprob: -10.660517692565918

Token 19: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.27045938372612
    2. '<|end|>' → logprob: -3.0204594135284424
    3. '
' → logprob: -3.1454594135284424
    4. '    
' → logprob: -3.3954594135284424
    5. ',' → logprob: -3.6454594135284424
    6. ' if' → logprob: -4.145459175109863
    7. '\n' → logprob: -4.395459175109863
    8. '```' → logprob: -4.770459175109863
    9. '  
' → logprob: -5.020459175109863
    10. ')' → logprob: -5.145459175109863

Token 20: ' print' (ID: 2123)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.7968307733535767
    2. 'if' → logprob: -1.7968307733535767
    3. '   ' → logprob: -2.046830654144287
    4. ' ' → logprob: -2.171830654144287
    5. '<|end|>' → logprob: -2.796830654144287
    6. '+' → logprob: -3.671830654144287
    7. '\n' → logprob: -4.671830654144287
    8. ',' → logprob: -5.421830654144287
    9. ')' → logprob: -5.546830654144287
    10. '    
' → logprob: -5.546830654144287

Token 21: '(a' (ID: 6271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1466747373342514
    2. '(a' → logprob: -2.021674633026123
    3. '()' → logprob: -6.521674633026123
    4. '('' → logprob: -6.646674633026123
    5. '(f' → logprob: -7.521674633026123
    6. '((' → logprob: -8.021675109863281
    7. '(max' → logprob: -8.771675109863281
    8. '(sum' → logprob: -9.896675109863281
    9. '(abs' → logprob: -10.021675109863281
    10. '("' → logprob: -10.646675109863281

Token 22: ' -' (ID: 533)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.061197757720947266
    2. ' +' → logprob: -3.3111977577209473
    3. ',' → logprob: -4.311197757720947
    4. ')' → logprob: -5.686197757720947
    5. ' ,' → logprob: -5.686197757720947
    6. '+b' → logprob: -6.561197757720947
    7. '*' → logprob: -7.436197757720947
    8. '+,' → logprob: -8.186197280883789
    9. '>' → logprob: -9.186197280883789
    10. '+)' → logprob: -9.561197280883789

Token 23: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.1797652393579483
    2. 'b' → logprob: -1.804765224456787
    3. ' ' → logprob: -11.304765701293945
    4. '1' → logprob: -12.304765701293945
    5. '	b' → logprob: -13.804765701293945
    6. ')b' → logprob: -14.054765701293945
    7. ')' → logprob: -14.929765701293945
    8. ' б' → logprob: -15.054765701293945
    9. '    ' → logprob: -15.554765701293945
    10. '_b' → logprob: -16.179765701293945

Token 24: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.167648876318708e-05
    2. '))' → logprob: -10.125041961669922
    3. '`)' → logprob: -14.375041961669922
    4. ' )' → logprob: -14.750041961669922
    5. ')`' → logprob: -15.375041961669922
    6. '')' → logprob: -15.750041961669922
    7. '+' → logprob: -16.125041961669922
    8. ')))' → logprob: -17.500041961669922
    9. ')
' → logprob: -17.625041961669922
    10. '")' → logprob: -18.000041961669922


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 22
Tokens correctement prédits (1ère position, stricte): 10
Tokens correctement prédits (1ère position, avec adaptation): 10
Tokens correctement prédits (top 10): 17
Précision stricte (1ère position): 45.45%
Précision adaptée (1ère position): 45.45%
Précision (top 10): 77.27%
================================================================================
