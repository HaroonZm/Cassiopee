================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 16:58:57
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
while True:
    n = int(input())
    if n == 0:
        break
    conv = {}
    for _ in range(n):
        a,b = input().split()
        conv[a] = b
    m = int(input())
    res = []
    for _ in range(m):
        c = input()
        res.append(conv.get(c,c))
    print("".join(res))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'while' (ID: 7032)
  → Token d'amorce (pas de prédiction)

Token 1: ' True' (ID: 6432)
  → Token d'amorce (pas de prédiction)

Token 2: ':
' (ID: 734)
  → Token d'amorce (pas de prédiction)

Token 3: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4643413722515106
    2. '    ' → logprob: -2.089341402053833
    3. ' ' → logprob: -2.714341402053833
    4. '    
' → logprob: -3.089341402053833
    5. '\n' → logprob: -3.214341402053833
    6. '\' → logprob: -3.464341402053833
    7. ' 
' → logprob: -4.089341163635254
    8. '```' → logprob: -4.589341163635254
    9. '  
' → logprob: -4.964341163635254
    10. '     
' → logprob: -5.089341163635254

Token 4: ' n' (ID: 297)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1392175853252411
    2. '    ' → logprob: -2.2642176151275635
    3. ' ' → logprob: -4.639217376708984
    4. '```' → logprob: -5.014217376708984
    5. '       ' → logprob: -5.639217376708984
    6. '    
' → logprob: -6.389217376708984
    7. '  ' → logprob: -6.764217376708984
    8. 'pass' → logprob: -7.764217376708984
    9. ' 
' → logprob: -8.139217376708984
    10. 'i' → logprob: -8.389217376708984

Token 5: ' =' (ID: 314)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8446208238601685
    2. 'u' → logprob: -1.4696208238601685
    3. '=' → logprob: -1.9696208238601685
    4. 'o' → logprob: -2.719620704650879
    5. '   ' → logprob: -3.094620704650879
    6. ' =' → logprob: -3.969620704650879
    7. 'e' → logprob: -4.094620704650879
    8. '_' → logprob: -4.719620704650879
    9. '+' → logprob: -5.094620704650879
    10. '  ' → logprob: -5.219620704650879

Token 6: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.19508743286132812
    2. ' input' → logprob: -1.8200874328613281
    3. 'input' → logprob: -4.820087432861328
    4. 'int' → logprob: -5.070087432861328
    5. ' n' → logprob: -7.695087432861328
    6. ' ' → logprob: -8.570087432861328
    7. ' randint' → logprob: -9.695087432861328
    8. ' i' → logprob: -10.445087432861328
    9. ' eval' → logprob: -10.695087432861328
    10. ' s' → logprob: -10.820087432861328

Token 7: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0015164113137871027
    2. '(input' → logprob: -6.501516342163086
    3. '('' → logprob: -12.501516342163086
    4. '()' → logprob: -12.626516342163086
    5. '(
' → logprob: -13.376516342163086
    6. 'input' → logprob: -13.501516342163086
    7. ' (' → logprob: -13.751516342163086
    8. '(n' → logprob: -13.751516342163086
    9. ''' → logprob: -14.376516342163086
    10. '(in' → logprob: -15.751516342163086

Token 8: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.1009586825966835
    2. '()' → logprob: -2.6009585857391357
    3. ')' → logprob: -4.225958824157715
    4. '())' → logprob: -5.475958824157715
    5. '('' → logprob: -6.600958824157715
    6. '(
' → logprob: -7.600958824157715
    7. '))' → logprob: -8.100958824157715
    8. ' ' → logprob: -9.100958824157715
    9. '(""))' → logprob: -9.225958824157715
    10. ''' → logprob: -9.225958824157715

Token 9: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.39164337515830994
    2. ' if' → logprob: -2.0166432857513428
    3. '   ' → logprob: -2.6416432857513428
    4. ')' → logprob: -3.6416432857513428
    5. ':' → logprob: -3.6416432857513428
    6. '  ' → logprob: -3.8916432857513428
    7. '<|end|>' → logprob: -4.266643524169922
    8. 'if' → logprob: -4.641643524169922
    9. '    ' → logprob: -5.391643524169922
    10. ',' → logprob: -5.641643524169922

Token 10: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.7105544805526733
    2. '   ' → logprob: -1.0855544805526733
    3. ' ' → logprob: -2.710554599761963
    4. '    ' → logprob: -3.460554599761963
    5. 'if' (adapté à ' if') → logprob: -3.460554599761963
    6. ')' → logprob: -4.460554599761963
    7. '  ' → logprob: -4.835554599761963
    8. ':' → logprob: -5.835554599761963
    9. '\n' → logprob: -6.210554599761963
    10. ' )' → logprob: -6.335554599761963

Token 11: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.0014416613848879933
    2. 'n' → logprob: -7.001441478729248
    3. ' not' → logprob: -8.126441955566406
    4. ' ' → logprob: -8.376441955566406
    5. 'not' → logprob: -13.251441955566406
    6. ' ' → logprob: -13.751441955566406
    7. '  ' → logprob: -15.126441955566406
    8. '	n' → logprob: -15.876441955566406
    9. '(n' → logprob: -16.126441955566406
    10. '<|end|>' → logprob: -16.251441955566406

Token 12: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.882006824016571
    2. ' >' → logprob: -0.882006824016571
    3. ' <=' → logprob: -2.757006883621216
    4. ' <' → logprob: -3.132006883621216
    5. '>' → logprob: -3.757006883621216
    6. '==' → logprob: -3.757006883621216
    7. ' ' → logprob: -4.632006645202637
    8. '<' → logprob: -6.257006645202637
    9. ' >=' → logprob: -6.257006645202637
    10. ')' → logprob: -6.882006645202637

Token 13: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.018151111900806427
    2. '0' → logprob: -4.01815128326416
    3. '  ' → logprob: -15.39315128326416
    4. '1' → logprob: -15.39315128326416
    5. ')' → logprob: -15.64315128326416
    6. ' ' → logprob: -15.83065128326416
    7. ' )' → logprob: -16.143150329589844
    8. ' -' → logprob: -17.018150329589844
    9. ' EOF' → logprob: -17.018150329589844
    10. '=' → logprob: -17.580650329589844

Token 14: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0028527823742479086
    2. ' ' → logprob: -5.877852916717529
    3. '-' → logprob: -10.127852439880371
    4. ' -' → logprob: -12.627852439880371
    5. '1' → logprob: -13.252852439880371
    6. '42' → logprob: -13.752852439880371
    7. '   ' → logprob: -14.627852439880371
    8. '```' → logprob: -15.002852439880371
    9. '  ' → logprob: -15.377852439880371
    10. '    ' → logprob: -15.752852439880371

Token 15: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -3.047134305234067e-05
    2. ':
' → logprob: -11.250030517578125
    3. '   ' → logprob: -12.125030517578125
    4. ' :' → logprob: -12.250030517578125
    5. '       ' → logprob: -13.250030517578125
    6. ':return' → logprob: -13.250030517578125
    7. '):' → logprob: -13.500030517578125
    8. ':\' → logprob: -14.000030517578125
    9. '    ' → logprob: -15.000030517578125
    10. '():' → logprob: -15.500030517578125

Token 16: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0002523992152418941
    2. '   ' → logprob: -8.875252723693848
    3. ' break' → logprob: -10.250252723693848
    4. '```' → logprob: -10.625252723693848
    5. '    ' → logprob: -11.250252723693848
    6. '      ' → logprob: -11.625252723693848
    7. '    ' → logprob: -12.500252723693848
    8. '\n' → logprob: -12.625252723693848
    9. '     ' → logprob: -12.625252723693848
    10. '           ' → logprob: -13.000252723693848

Token 17: ' break' (ID: 2338)
  Prédit: ' break'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' break' → logprob: -0.02405906282365322
    2. '       ' → logprob: -4.274059295654297
    3. 'break' (adapté à ' break') → logprob: -5.024059295654297
    4. '   ' → logprob: -5.899059295654297
    5. '	break' → logprob: -8.524059295654297
    6. '\n' → logprob: -9.149059295654297
    7. '_break' → logprob: -10.024059295654297
    8. '    ' → logprob: -10.149059295654297
    9. '```' → logprob: -10.274059295654297
    10. '        
' → logprob: -11.149059295654297

Token 18: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.2312391996383667
    2. '\n' → logprob: -1.2312391996383667
    3. '
' → logprob: -2.2312393188476562
    4. '    
' → logprob: -2.4812393188476562
    5. '<|end|>' → logprob: -2.4812393188476562
    6. ':' → logprob: -2.8562393188476562
    7. '```' → logprob: -3.6062393188476562
    8. '\' → logprob: -3.8562393188476562
    9. ')' → logprob: -5.106239318847656
    10. '#' → logprob: -5.356239318847656

Token 19: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.34480130672454834
    2. '<|end|>' → logprob: -1.5948013067245483
    3. '\n' → logprob: -3.469801425933838
    4. ':' → logprob: -4.469801425933838
    5. '```' → logprob: -4.719801425933838
    6. '    
' → logprob: -4.719801425933838
    7. '#' → logprob: -4.969801425933838
    8. '
' → logprob: -5.469801425933838
    9. 'n' → logprob: -5.594801425933838
    10. '<|end|>' → logprob: -5.844801425933838

Token 20: ' conv' (ID: 6535)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09213706851005554
    2. '```' → logprob: -4.092136859893799
    3. ' ' → logprob: -4.217136859893799
    4. '\' → logprob: -4.342136859893799
    5. '    ' → logprob: -4.342136859893799
    6. '\n' → logprob: -4.467136859893799
    7. '       ' → logprob: -5.717136859893799
    8. '    
' → logprob: -5.967136859893799
    9. '[' → logprob: -6.092136859893799
    10. '`' → logprob: -6.217136859893799

Token 21: ' =' (ID: 314)
  Prédit: 'ert'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ert' → logprob: -0.6372132897377014
    2. 'er' → logprob: -1.3872132301330566
    3. 'ersion' → logprob: -2.0122132301330566
    4. '_' → logprob: -2.8872132301330566
    5. ')' → logprob: -4.762213230133057
    6. 'e' → logprob: -4.762213230133057
    7. 'ers' → logprob: -5.387213230133057
    8. '=' → logprob: -6.387213230133057
    9. 'erse' → logprob: -6.762213230133057
    10. '(' → logprob: -6.887213230133057

Token 22: ' {}
' (ID: 11421)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' []' → logprob: -1.0595453977584839
    2. ' {}' → logprob: -1.4345453977584839
    3. ' n' → logprob: -2.3095455169677734
    4. '{}' → logprob: -2.3095455169677734
    5. 'bin' → logprob: -2.9345455169677734
    6. ' bin' → logprob: -3.5595455169677734
    7. 'n' → logprob: -3.8095455169677734
    8. '[]' → logprob: -4.059545516967773
    9. ' list' → logprob: -4.434545516967773
    10. ' hex' → logprob: -4.559545516967773

Token 23: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08918493241071701
    2. ' ' → logprob: -3.2141849994659424
    3. '    ' → logprob: -4.339184761047363
    4. 'for' → logprob: -5.089184761047363
    5. 'n' → logprob: -5.339184761047363
    6. 't' → logprob: -5.589184761047363
    7. ' for' → logprob: -5.839184761047363
    8. '[' → logprob: -6.089184761047363
    9. '    
' → logprob: -6.214184761047363
    10. '  ' → logprob: -6.589184761047363

Token 24: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.4275278151035309
    2. ' for' → logprob: -1.3025277853012085
    3. '   ' → logprob: -3.052527904510498
    4. 'c' → logprob: -5.427527904510498
    5. ' ' → logprob: -5.552527904510498
    6. 'f' → logprob: -5.802527904510498
    7. 's' → logprob: -6.052527904510498
    8. 'n' → logprob: -6.177527904510498
    9. 'a' → logprob: -6.302527904510498
    10. 'i' → logprob: -6.427527904510498

Token 25: ' _' (ID: 1175)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.08078209310770035
    2. ' ' → logprob: -2.705782175064087
    3. ' _' → logprob: -4.705781936645508
    4. 'i' → logprob: -6.455781936645508
    5. '_' → logprob: -9.455781936645508
    6. '  ' → logprob: -10.455781936645508
    7. ' x' → logprob: -11.205781936645508
    8. ' )' → logprob: -11.955781936645508
    9. ' ‌' → logprob: -12.080781936645508
    10. ' range' → logprob: -12.205781936645508

Token 26: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.00694684125483036
    2. 'in' → logprob: -5.006947040557861
    3. ' ' → logprob: -8.631946563720703
    4. ' i' → logprob: -11.006946563720703
    5. '_' → logprob: -11.381946563720703
    6. 'range' → logprob: -12.006946563720703
    7. ' _' → logprob: -12.256946563720703
    8. '  ' → logprob: -13.006946563720703
    9. ' ,' → logprob: -13.381946563720703
    10. 'n' → logprob: -13.381946563720703

Token 27: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.5759481191635132
    2. 'range' → logprob: -0.8259481191635132
    3. ' ' → logprob: -12.575947761535645
    4. '	range' → logprob: -13.450947761535645
    5. 'rang' → logprob: -13.575947761535645
    6. ' ran' → logprob: -14.450947761535645
    7. 'ran' → logprob: -14.950947761535645
    8. 'r' → logprob: -14.950947761535645
    9. '  ' → logprob: -15.075947761535645
    10. '(range' → logprob: -15.325947761535645

Token 28: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0711587443947792
    2. '(' → logprob: -3.0711586475372314
    3. ' (' → logprob: -3.8211586475372314
    4. ' n' → logprob: -7.8211588859558105
    5. 'n' → logprob: -11.946158409118652
    6. '(int' → logprob: -13.196158409118652
    7. ' ' → logprob: -13.321158409118652
    8. '()' → logprob: -13.446158409118652
    9. '	n' → logprob: -14.196158409118652
    10. ' ()' → logprob: -14.946158409118652

Token 29: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0034286505542695522
    2. ')' → logprob: -6.1284284591674805
    3. ':' → logprob: -7.3784284591674805
    4. ' ):' → logprob: -7.8784284591674805
    5. '   ' → logprob: -8.62842845916748
    6. '):
' → logprob: -10.87842845916748
    7. '():' → logprob: -11.25342845916748
    8. ',' → logprob: -12.12842845916748
    9. ' :' → logprob: -12.37842845916748
    10. ' )' → logprob: -12.62842845916748

Token 30: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5084033608436584
    2. '    ' → logprob: -1.6334033012390137
    3. ' ' → logprob: -1.7584033012390137
    4. '   ' → logprob: -4.383403301239014
    5. ' 
' → logprob: -5.133403301239014
    6. '<|end|>' → logprob: -5.258403301239014
    7. '     
' → logprob: -6.508403301239014
    8. '        ' → logprob: -6.758403301239014
    9. '    
' → logprob: -7.383403301239014
    10. '  ' → logprob: -7.508403301239014

Token 31: ' a' (ID: 261)
  Prédit: ' word'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' word' → logprob: -0.6591015458106995
    2. ' key' → logprob: -1.2841014862060547
    3. ' s' → logprob: -2.1591014862060547
    4. ' line' → logprob: -2.7841014862060547
    5. ' k' → logprob: -4.909101486206055
    6. ' w' → logprob: -5.284101486206055
    7. 'word' → logprob: -5.409101486206055
    8. 'key' → logprob: -5.659101486206055
    9. '   ' → logprob: -6.534101486206055
    10. 's' → logprob: -6.784101486206055

Token 32: ',b' (ID: 17568)
  Prédit: ' ,'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ,' → logprob: -0.29015877842903137
    2. ',' → logprob: -1.415158748626709
    3. ',b' → logprob: -5.415158748626709
    4. ' ' → logprob: -5.790158748626709
    5. ' =' → logprob: -7.040158748626709
    6. 'b' → logprob: -8.540159225463867
    7. 'r' → logprob: -9.290159225463867
    8. '=' → logprob: -9.540159225463867
    9. 'input' → logprob: -10.540159225463867
    10. '[' → logprob: -10.790159225463867

Token 33: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.023394789546728134
    2. '=' → logprob: -3.773394823074341
    3. ',' → logprob: -9.023394584655762
    4. '=input' → logprob: -11.273394584655762
    5. ' ' → logprob: -11.773394584655762
    6. ' ,' → logprob: -12.398394584655762
    7. ')' → logprob: -13.648394584655762
    8. 'input' → logprob: -13.898394584655762
    9. '[' → logprob: -14.898394584655762
    10. '    ' → logprob: -15.398394584655762

Token 34: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.02071729116141796
    2. 'input' → logprob: -4.145717144012451
    3. ' map' → logprob: -5.395717144012451
    4. 'map' → logprob: -9.14571762084961
    5. ' ' → logprob: -11.52071762084961
    6. ' list' → logprob: -11.89571762084961
    7. '   ' → logprob: -12.64571762084961
    8. '    ' → logprob: -12.77071762084961
    9. '	input' → logprob: -13.77071762084961
    10. '=input' → logprob: -13.77071762084961

Token 35: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.693276584148407
    2. '().' → logprob: -0.693276584148407
    3. '(' → logprob: -9.443276405334473
    4. '())' → logprob: -10.318276405334473
    5. '()]' → logprob: -12.568276405334473
    6. ' ()' → logprob: -13.568276405334473
    7. ')' → logprob: -13.818276405334473
    8. '();' → logprob: -13.818276405334473
    9. '()>' → logprob: -14.068276405334473
    10. '('' → logprob: -14.068276405334473

Token 36: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00016349162615370005
    2. 'strip' → logprob: -8.875163078308105
    3. 'rstrip' → logprob: -10.875163078308105
    4. 'spl' → logprob: -12.625163078308105
    5. ' split' → logprob: -14.000163078308105
    6. 'rs' → logprob: -15.500163078308105
    7. 'sp' → logprob: -16.750164031982422
    8. '(split' → logprob: -16.875164031982422
    9. 's' → logprob: -16.875164031982422
    10. 'replace' → logprob: -16.875164031982422

Token 37: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.02871270664036274
    2. '('' → logprob: -4.153712749481201
    3. '(' → logprob: -4.403712749481201
    4. '("("' → logprob: -9.278712272644043
    5. '())' → logprob: -9.403712272644043
    6. ')' → logprob: -10.278712272644043
    7. '("' → logprob: -10.528712272644043
    8. '()]' → logprob: -10.778712272644043
    9. '(',' → logprob: -11.278712272644043
    10. '```' → logprob: -11.403712272644043

Token 38: '       ' (ID: 309)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -1.0101336240768433
    2. '<|end|>' → logprob: -1.1351336240768433
    3. '   ' → logprob: -2.260133743286133
    4. '\n' → logprob: -3.010133743286133
    5. ':' → logprob: -3.135133743286133
    6. ' ' → logprob: -3.635133743286133
    7. ' 
' → logprob: -4.260133743286133
    8. '       ' → logprob: -4.260133743286133
    9. '    
' → logprob: -4.260133743286133
    10. '<|end|>' → logprob: -4.510133743286133

Token 39: ' conv' (ID: 6535)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.2217712551355362
    2. ' conv' → logprob: -1.846771240234375
    3. ' ' → logprob: -3.846771240234375
    4. '<|end|>' → logprob: -5.346771240234375
    5. '   ' → logprob: -5.471771240234375
    6. 'conv' (adapté à ' conv') → logprob: -5.846771240234375
    7. ' 
' → logprob: -5.971771240234375
    8. ')' → logprob: -6.221771240234375
    9. '
' → logprob: -6.846771240234375
    10. '	' → logprob: -8.346771240234375

Token 40: '[a' (ID: 32035)
  Prédit: '[a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[a' → logprob: -0.0004366294015198946
    2. '[b' → logprob: -8.375436782836914
    3. '[' → logprob: -8.500436782836914
    4. ' [' → logprob: -14.250436782836914
    5. '[int' → logprob: -14.750436782836914
    6. '[(' → logprob: -14.875436782836914
    7. '[f' → logprob: -15.000436782836914
    8. 'a' → logprob: -15.750436782836914
    9. '[c' → logprob: -16.000436782836914
    10. '[A' → logprob: -16.000436782836914

Token 41: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0019425610080361366
    2. ']=' → logprob: -6.2519426345825195
    3. ' ]' → logprob: -11.25194263458252
    4. '[' → logprob: -15.75194263458252
    5. '=' → logprob: -15.87694263458252
    6. '']' → logprob: -15.87694263458252
    7. ']+=' → logprob: -16.001941680908203
    8. ':]' → logprob: -16.126941680908203
    9. '`]' → logprob: -16.376941680908203
    10. ']==' → logprob: -16.626941680908203

Token 42: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.16041046380996704
    2. ' =' → logprob: -1.9104104042053223
    3. '=b' → logprob: -8.91041088104248
    4. ']' → logprob: -11.16041088104248
    5. '=a' → logprob: -12.28541088104248
    6. ']=' → logprob: -12.28541088104248
    7. ' ' → logprob: -12.41041088104248
    8. ',' → logprob: -12.66041088104248
    9. ')' → logprob: -13.03541088104248
    10. '[' → logprob: -13.41041088104248

Token 43: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.02327517792582512
    2. ' b' → logprob: -3.773275136947632
    3. 'int' → logprob: -10.773275375366211
    4. ' int' → logprob: -12.273275375366211
    5. ' ' → logprob: -12.898275375366211
    6. '>b' → logprob: -15.023275375366211
    7. ')b' → logprob: -15.148275375366211
    8. '    ' → logprob: -16.46077537536621
    9. 'a' → logprob: -16.52327537536621
    10. '	b' → logprob: -16.52327537536621

Token 44: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1262349635362625
    2. '
' → logprob: -2.501235008239746
    3. '<|end|>' → logprob: -3.876235008239746
    4. '    
' → logprob: -4.626235008239746
    5. '\n' → logprob: -5.626235008239746
    6. 'print' → logprob: -7.876235008239746
    7. '#' → logprob: -8.376235008239746
    8. '<|end|>' → logprob: -8.501235008239746
    9. ')' → logprob: -8.626235008239746
    10. '  
' → logprob: -8.876235008239746

Token 45: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01787446066737175
    2. '    
' → logprob: -4.267874240875244
    3. '
' → logprob: -6.892874240875244
    4. '\n' → logprob: -7.017874240875244
    5. '```' → logprob: -8.017874717712402
    6. '       ' → logprob: -8.142874717712402
    7. 'for' → logprob: -8.392874717712402
    8. '  
' → logprob: -8.642874717712402
    9. '<|end|>' → logprob: -8.642874717712402
    10. '        
' → logprob: -9.017874717712402

Token 46: ' m' (ID: 284)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.41278353333473206
    2. ' for' → logprob: -2.412783622741699
    3. '\n' → logprob: -2.537783622741699
    4. 'for' → logprob: -3.287783622741699
    5. 'result' → logprob: -4.037783622741699
    6. 's' → logprob: -4.037783622741699
    7. '    
' → logprob: -4.162783622741699
    8. 'print' → logprob: -4.287783622741699
    9. 'n' → logprob: -4.412783622741699
    10. ' ' → logprob: -4.662783622741699

Token 47: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0013367896899580956
    2. '=' → logprob: -6.626336574554443
    3. ' ' → logprob: -11.876337051391602
    4. '=int' → logprob: -13.251337051391602
    5. '  ' → logprob: -14.251337051391602
    6. '=input' → logprob: -14.626337051391602
    7. ' ' → logprob: -15.001337051391602
    8. '   ' → logprob: -15.751337051391602
    9. ',' → logprob: -15.876337051391602
    10. ' ,' → logprob: -16.1263370513916

Token 48: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.6652737259864807
    2. 'int' → logprob: -0.7902737259864807
    3. ' input' → logprob: -3.915273666381836
    4. 'input' → logprob: -4.415273666381836
    5. '   ' → logprob: -10.040273666381836
    6. '[int' → logprob: -10.165273666381836
    7. ' ' → logprob: -11.540273666381836
    8. '  ' → logprob: -12.040273666381836
    9. '    ' → logprob: -12.602773666381836
    10. '[input' → logprob: -12.852773666381836

Token 49: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0028218738734722137
    2. '(' → logprob: -5.877821922302246
    3. 'input' → logprob: -11.752821922302246
    4. '()' → logprob: -12.502821922302246
    5. ' (' → logprob: -12.627821922302246
    6. '=input' → logprob: -13.877821922302246
    7. '(
' → logprob: -14.752821922302246
    8. ' input' → logprob: -14.752821922302246
    9. '<input' → logprob: -16.12782096862793
    10. ',input' → logprob: -16.12782096862793

Token 50: '())
' (ID: 4574)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.39656350016593933
    2. '())' → logprob: -1.1465635299682617
    3. ')' → logprob: -4.646563529968262
    4. '()
' → logprob: -10.396563529968262
    5. ' ())' → logprob: -11.646563529968262
    6. '();)' → logprob: -12.521563529968262
    7. '())
' → logprob: -12.646563529968262
    8. '(' → logprob: -13.771563529968262
    9. ' )' → logprob: -14.021563529968262
    10. ' ()' → logprob: -14.271563529968262

Token 51: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8430435061454773
    2. 'for' → logprob: -1.218043565750122
    3. 'text' → logprob: -2.343043565750122
    4. 'sentence' → logprob: -2.718043565750122
    5. '<|end|>' → logprob: -3.343043565750122
    6. 's' → logprob: -4.343043327331543
    7. 'message' → logprob: -4.343043327331543
    8. ' for' → logprob: -4.968043327331543
    9. 'phrase' → logprob: -5.218043327331543
    10. 'while' → logprob: -5.593043327331543

Token 52: ' res' (ID: 694)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.05425986647605896
    2. 'sentence' → logprob: -3.679259777069092
    3. 'result' → logprob: -4.929259777069092
    4. 'text' → logprob: -4.929259777069092
    5. 'words' → logprob: -5.554259777069092
    6. ' for' → logprob: -6.054259777069092
    7. 'sent' → logprob: -6.554259777069092
    8. 'phrase' → logprob: -6.679259777069092
    9. 'message' → logprob: -6.929259777069092
    10. 's' → logprob: -7.179259777069092

Token 53: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.05608796328306198
    2. '=' → logprob: -2.9310879707336426
    3. 'ult' → logprob: -7.431087970733643
    4. 'u' → logprob: -8.306087493896484
    5. 'ul' → logprob: -9.181087493896484
    6. ' ' → logprob: -9.681087493896484
    7. '=[]' → logprob: -9.931087493896484
    8. 's' → logprob: -10.306087493896484
    9. 'ults' → logprob: -10.431087493896484
    10. ',' → logprob: -11.181087493896484

Token 54: ' []
' (ID: 8911)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.5252794027328491
    2. '[]' → logprob: -1.1502794027328491
    3. '"' → logprob: -3.2752795219421387
    4. '""' → logprob: -3.4002795219421387
    5. ' ""' → logprob: -4.525279521942139
    6. ' "' → logprob: -5.525279521942139
    7. ' ' → logprob: -5.650279521942139
    8. ''' → logprob: -7.025279521942139
    9. '''' → logprob: -7.650279521942139
    10. '[' → logprob: -7.900279521942139

Token 55: '   ' (ID: 271)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.04562515765428543
    2. ' for' → logprob: -3.4206252098083496
    3. '   ' → logprob: -4.54562520980835
    4. '<|end|>' → logprob: -7.54562520980835
    5. '```' → logprob: -8.295624732971191
    6. '	for' → logprob: -8.420624732971191
    7. '    
' → logprob: -9.545624732971191
    8. ' ' → logprob: -9.795624732971191
    9. '    ' → logprob: -10.170624732971191
    10. ' 
' → logprob: -10.545624732971191

Token 56: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.012793920934200287
    2. ' for' → logprob: -4.387794017791748
    3. '   ' → logprob: -8.63779354095459
    4. '```' → logprob: -10.13779354095459
    5. '\n' → logprob: -11.01279354095459
    6. '	for' → logprob: -11.26279354095459
    7. ' ' → logprob: -11.51279354095459
    8. '\' → logprob: -12.26279354095459
    9. '    ' → logprob: -12.51279354095459
    10. '<|end|>' → logprob: -12.88779354095459

Token 57: ' _' (ID: 1175)
  Prédit: ' _'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' _' → logprob: -0.056167759001255035
    2. '_' → logprob: -2.9311678409576416
    3. ' i' → logprob: -7.3061676025390625
    4. ' ' → logprob: -7.4311676025390625
    5. 'i' → logprob: -11.306167602539062
    6. ' __' → logprob: -12.556167602539062
    7. ' ' → logprob: -13.431167602539062
    8. ' in' → logprob: -13.806167602539062
    9. '_i' → logprob: -13.806167602539062
    10. ' ___' → logprob: -14.806167602539062

Token 58: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.3107917904853821
    2. ' ' → logprob: -2.0607917308807373
    3. ' _' → logprob: -2.4357917308807373
    4. ' range' → logprob: -3.9357917308807373
    5. 'in' → logprob: -4.435791969299316
    6. '_' → logprob: -4.935791969299316
    7. ' m' → logprob: -5.185791969299316
    8. 'range' → logprob: -5.310791969299316
    9. 'm' → logprob: -6.935791969299316
    10. '  ' → logprob: -7.185791969299316

Token 59: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.00975927896797657
    2. ' range' → logprob: -4.634759426116943
    3. '(range' → logprob: -13.134758949279785
    4. 'ange' → logprob: -15.259758949279785
    5. '	range' → logprob: -15.259758949279785
    6. 'input' → logprob: -15.759758949279785
    7. 'm' → logprob: -16.0097599029541
    8. '```' → logprob: -16.3847599029541
    9. ' ' → logprob: -16.7597599029541
    10. ')' → logprob: -16.8847599029541

Token 60: '(m' (ID: 2145)
  Prédit: '(m'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(m' → logprob: -0.012076790444552898
    2. ' (' → logprob: -4.6370768547058105
    3. '(' → logprob: -6.3870768547058105
    4. ' m' → logprob: -7.3870768547058105
    5. 'm' → logprob: -11.137076377868652
    6. ' ' → logprob: -14.137076377868652
    7. '	m' → logprob: -15.137076377868652
    8. '(M' → logprob: -17.26207733154297
    9. '(s' → logprob: -18.01207733154297
    10. ',' → logprob: -18.01207733154297

Token 61: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.04331476241350174
    2. ':' → logprob: -3.2933146953582764
    3. ')' → logprob: -5.2933149337768555
    4. '):
' → logprob: -9.043314933776855
    5. '   ' → logprob: -9.418314933776855
    6. ' ):' → logprob: -11.168314933776855
    7. '():' → logprob: -11.543314933776855
    8. ',' → logprob: -12.793314933776855
    9. ' ' → logprob: -13.668314933776855
    10. '       ' → logprob: -13.918314933776855

Token 62: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.011470282450318336
    2. 'sentence' → logprob: -6.011470317840576
    3. 'text' → logprob: -6.261470317840576
    4. 's' → logprob: -6.511470317840576
    5. '   ' → logprob: -6.511470317840576
    6. 'word' → logprob: -7.136470317840576
    7. ' s' → logprob: -7.636470317840576
    8. ' text' → logprob: -7.761470317840576
    9. '<|end|>' → logprob: -8.136469841003418
    10. ' word' → logprob: -8.261469841003418

Token 63: ' c' (ID: 274)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -1.2642219066619873
    2. ' s' → logprob: -1.2642219066619873
    3. 'w' → logprob: -1.7642219066619873
    4. 'x' → logprob: -2.7642219066619873
    5. ' word' → logprob: -2.7642219066619873
    6. ' w' → logprob: -2.8892219066619873
    7. 'word' → logprob: -3.5142219066619873
    8. ' x' → logprob: -4.514222145080566
    9. ' line' → logprob: -4.514222145080566
    10. 'line' → logprob: -5.264222145080566

Token 64: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.09211750328540802
    2. '=' → logprob: -2.4671175479888916
    3. ',' → logprob: -6.8421173095703125
    4. '=input' → logprob: -7.4671173095703125
    5. 'ode' → logprob: -7.9671173095703125
    6. 'word' → logprob: -8.092117309570312
    7. 's' → logprob: -8.467117309570312
    8. 'a' → logprob: -9.342117309570312
    9. 'w' → logprob: -9.467117309570312
    10. 'on' → logprob: -9.842117309570312

Token 65: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.06197306513786316
    2. 'input' → logprob: -2.8119730949401855
    3. ' ' → logprob: -13.311972618103027
    4. '=input' → logprob: -13.436972618103027
    5. '   ' → logprob: -14.061972618103027
    6. '(input' → logprob: -14.561972618103027
    7. '	input' → logprob: -14.686972618103027
    8. '[input' → logprob: -16.061973571777344
    9. '<input' → logprob: -16.561973571777344
    10. ',input' → logprob: -16.936973571777344

Token 66: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00045367187703959644
    2. '().' → logprob: -7.875453472137451
    3. '())' → logprob: -10.00045394897461
    4. ')' → logprob: -10.87545394897461
    5. '()
' → logprob: -12.75045394897461
    6. ' ()' → logprob: -13.37545394897461
    7. '()>' → logprob: -14.00045394897461
    8. '(' → logprob: -14.12545394897461
    9. '()`' → logprob: -14.12545394897461
    10. '()

' → logprob: -14.37545394897461

Token 67: '       ' (ID: 309)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 68: ' res' (ID: 694)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' (adapté à ' res') → logprob: -0.004064509645104408
    2. 'if' → logprob: -5.879064559936523
    3. ' res' → logprob: -7.129064559936523
    4. '   ' → logprob: -7.754064559936523
    5. ' if' → logprob: -11.379064559936523
    6. 'tokens' → logprob: -12.004064559936523
    7. '	res' → logprob: -12.379064559936523
    8. 'print' → logprob: -13.379064559936523
    9. 'r' → logprob: -14.004064559936523
    10. '```' → logprob: -14.254064559936523

Token 69: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.2014244645833969
    2. '.' → logprob: -1.701424479484558
    3. '.extend' → logprob: -11.826424598693848
    4. ' .' → logprob: -14.076424598693848
    5. '.Append' → logprob: -14.201424598693848
    6. '.app' → logprob: -14.576424598693848
    7. 'append' → logprob: -14.826424598693848
    8. '.setdefault' → logprob: -15.201424598693848
    9. '<|end|>' → logprob: -15.201424598693848
    10. '_append' → logprob: -15.326424598693848

Token 70: '(conv' (ID: 146794)
  Prédit: '(conv'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(conv' → logprob: -0.01454822439700365
    2. '(' → logprob: -4.264548301696777
    3. '(con' → logprob: -8.639548301696777
    4. '(c' → logprob: -9.389548301696777
    5. '('' → logprob: -10.014548301696777
    6. 'conv' → logprob: -11.014548301696777
    7. '("("' → logprob: -11.014548301696777
    8. '(convert' → logprob: -11.264548301696777
    9. '(f' → logprob: -11.264548301696777
    10. '((' → logprob: -11.764548301696777

Token 71: '.get' (ID: 775)
  Prédit: '.get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.get' → logprob: -0.011466396041214466
    2. '[c' → logprob: -4.5114665031433105
    3. '.' → logprob: -7.8864665031433105
    4. '[' → logprob: -10.511466026306152
    5. '[get' → logprob: -11.636466026306152
    6. '.setdefault' → logprob: -12.386466026306152
    7. ' .' → logprob: -13.761466026306152
    8. '[g' → logprob: -14.761466026306152
    9. 'get' → logprob: -14.886466026306152
    10. '].' → logprob: -15.886466026306152

Token 72: '(c' (ID: 2410)
  Prédit: '(c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -0.004081959370523691
    2. '(' → logprob: -5.504081726074219
    3. '('' → logprob: -13.629081726074219
    4. '(
' → logprob: -14.004081726074219
    5. ')' → logprob: -14.379081726074219
    6. ')(' → logprob: -15.129081726074219
    7. ' (' → logprob: -15.254081726074219
    8. '((' → logprob: -15.379081726074219
    9. ')c' → logprob: -16.37908172607422
    10. '("("' → logprob: -16.87908172607422

Token 73: ',c' (ID: 22261)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.4302862882614136
    2. ',c' → logprob: -1.0552862882614136
    3. 'c' → logprob: -6.805286407470703
    4. '(c' → logprob: -9.055286407470703
    5. ',"' → logprob: -9.680286407470703
    6. ')' → logprob: -9.805286407470703
    7. ' ,' → logprob: -9.805286407470703
    8. ')c' → logprob: -9.930286407470703
    9. '[c' → logprob: -10.680286407470703
    10. '))' → logprob: -11.055286407470703

Token 74: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0041457111947238445
    2. ')' → logprob: -5.504145622253418
    3. ')))' → logprob: -10.129145622253418
    4. '))
' → logprob: -10.879145622253418
    5. ' ))' → logprob: -12.379145622253418
    6. ''))' → logprob: -13.129145622253418
    7. '()))' → logprob: -14.379145622253418
    8. '))

' → logprob: -14.629145622253418
    9. '"))' → logprob: -14.879145622253418
    10. ')
' → logprob: -15.129145622253418

Token 75: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.07467428594827652
    2. '
' → logprob: -2.824674367904663
    3. '   ' → logprob: -4.824674129486084
    4. '<|end|>' → logprob: -5.824674129486084
    5. ' print' → logprob: -7.699674129486084
    6. '    
' → logprob: -7.824674129486084
    7. '```' → logprob: -8.199674606323242
    8. 'for' → logprob: -8.449674606323242
    9. '\n' → logprob: -8.949674606323242
    10. '  
' → logprob: -9.949674606323242

Token 76: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.001280714524909854
    2. '
' → logprob: -7.626280784606934
    3. '   ' → logprob: -8.001280784606934
    4. ' print' → logprob: -8.001280784606934
    5. 'for' → logprob: -9.626280784606934
    6. '    
' → logprob: -10.751280784606934
    7. '\n' → logprob: -11.751280784606934
    8. '<|end|>' → logprob: -11.751280784606934
    9. '```' → logprob: -12.251280784606934
    10. ' for' → logprob: -12.376280784606934

Token 77: '("' (ID: 568)
  Prédit: '(''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.11682364344596863
    2. '(' → logprob: -2.366823673248291
    3. '("' → logprob: -4.116823673248291
    4. '(*' → logprob: -8.866823196411133
    5. '("("' → logprob: -10.241823196411133
    6. '()' → logprob: -12.866823196411133
    7. '("")' → logprob: -13.366823196411133
    8. '(len' → logprob: -14.491823196411133
    9. '(('' → logprob: -14.491823196411133
    10. ' ('' → logprob: -15.116823196411133

Token 78: '".' (ID: 4050)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.5717092156410217
    2. ' ".' → logprob: -1.071709156036377
    3. ' "' → logprob: -2.821709156036377
    4. ''' → logprob: -4.196709156036377
    5. '\n' → logprob: -5.321709156036377
    6. '".' → logprob: -5.696709156036377
    7. ' ' → logprob: -5.946709156036377
    8. ' '.' → logprob: -6.696709156036377
    9. '"\' → logprob: -6.946709156036377
    10. ' "\' → logprob: -7.196709156036377

Token 79: 'join' (ID: 10891)
  Prédit: 'join'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'join' → logprob: -3.7385154428193346e-05
    2. ' join' → logprob: -10.25003719329834
    3. 'jo' → logprob: -13.75003719329834
    4. 'j' → logprob: -14.25003719329834
    5. '.join' → logprob: -16.625038146972656
    6. '.' → logprob: -17.125038146972656
    7. '"' → logprob: -17.375038146972656
    8. ' ' → logprob: -17.500038146972656
    9. '(join' → logprob: -17.625038146972656
    10. 'strip' → logprob: -18.250038146972656

Token 80: '(res' (ID: 8331)
  Prédit: '(res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(res' → logprob: -2.9040898880339228e-05
    2. '(' → logprob: -10.875028610229492
    3. 'res' → logprob: -11.875028610229492
    4. ')' → logprob: -12.875028610229492
    5. ' (' → logprob: -15.000028610229492
    6. '(
' → logprob: -17.250028610229492
    7. ',res' → logprob: -17.250028610229492
    8. ')(' → logprob: -17.625028610229492
    9. '	res' → logprob: -17.750028610229492
    10. ' res' → logprob: -17.750028610229492

Token 81: '))' (ID: 915)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.2014184147119522
    2. '))' → logprob: -1.701418399810791
    3. ')))' → logprob: -12.95141887664795
    4. ' )' → logprob: -13.95141887664795
    5. '())' → logprob: -14.32641887664795
    6. ')")' → logprob: -15.32641887664795
    7. ')`' → logprob: -15.45141887664795
    8. '))
' → logprob: -15.57641887664795
    9. ')
' → logprob: -15.57641887664795
    10. ' ))' → logprob: -16.076417922973633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 79
Tokens correctement prédits (1ère position, stricte): 38
Tokens correctement prédits (1ère position, avec adaptation): 42
Tokens correctement prédits (top 10): 67
Précision stricte (1ère position): 48.10%
Précision adaptée (1ère position): 53.16%
Précision (top 10): 84.81%
================================================================================
