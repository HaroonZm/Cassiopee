================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 16:57:39
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
d,c=map(int,input().split())
print(d*c)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'd' (ID: 67)
  → Token d'amorce (pas de prédiction)

Token 1: ',c' (ID: 22261)
  → Token d'amorce (pas de prédiction)

Token 2: '=' (ID: 28)
  → Token d'amorce (pas de prédiction)

Token 3: 'map' (ID: 3726)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.11252152919769287
    2. ' ' → logprob: -2.9875216484069824
    3. '1' → logprob: -3.8625216484069824
    4. '[' → logprob: -4.612521648406982
    5. '[]' → logprob: -4.737521648406982
    6. '(' → logprob: -5.237521648406982
    7. 'd' → logprob: -5.737521648406982
    8. '10' → logprob: -6.487521648406982
    9. 'map' → logprob: -6.737521648406982
    10. '5' → logprob: -7.237521648406982

Token 4: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.01318305917084217
    2. '(lambda' → logprob: -4.388183116912842
    3. '(int' → logprob: -7.888183116912842
    4. '(open' → logprob: -9.638182640075684
    5. '```' → logprob: -10.013182640075684
    6. '(user' → logprob: -10.513182640075684
    7. '(str' → logprob: -10.763182640075684
    8. '(`' → logprob: -10.888182640075684
    9. '("("' → logprob: -11.638182640075684
    10. '(eval' → logprob: -11.888182640075684

Token 5: ',input' (ID: 123014)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.3562183082103729
    2. ')' → logprob: -1.2312183380126953
    3. '(' → logprob: -6.356218338012695
    4. '`)' → logprob: -6.481218338012695
    5. ',input' → logprob: -7.106218338012695
    6. 'input' → logprob: -7.231218338012695
    7. '=input' → logprob: -7.731218338012695
    8. '<|end|>' → logprob: -7.981218338012695
    9. '(data' → logprob: -8.356218338012695
    10. '())' → logprob: -8.606218338012695

Token 6: '().' (ID: 1454)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.8991744518280029
    2. '())' → logprob: -0.8991744518280029
    3. '(' → logprob: -2.649174451828003
    4. '()' → logprob: -3.024174451828003
    5. '<|end|>' → logprob: -3.524174451828003
    6. '(token' → logprob: -5.274174690246582
    7. '();)' → logprob: -5.649174690246582
    8. '(""))' → logprob: -5.649174690246582
    9. '(()' → logprob: -5.899174690246582
    10. '('' → logprob: -5.899174690246582

Token 7: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0004427051462698728
    2. 'strip' → logprob: -7.7504425048828125
    3. 'rstrip' → logprob: -11.625442504882812
    4. ')' → logprob: -13.875442504882812
    5. ' split' → logprob: -13.875442504882812
    6. '(split' → logprob: -14.250442504882812
    7. 'read' → logprob: -15.125442504882812
    8. 'replace' → logprob: -16.250442504882812
    9. 'startswith' → logprob: -16.250442504882812
    10. 'spl' → logprob: -16.875442504882812

Token 8: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.041156500577926636
    2. '())' → logprob: -3.291156530380249
    3. '))' → logprob: -6.29115629196167
    4. '()' → logprob: -7.54115629196167
    5. '`)' → logprob: -7.54115629196167
    6. '(' → logprob: -9.291156768798828
    7. ')`' → logprob: -10.916156768798828
    8. '')' → logprob: -11.041156768798828
    9. '()))' → logprob: -11.541156768798828
    10. ' )' → logprob: -12.041156768798828

Token 9: 'print' (ID: 1598)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.0879559516906738
    2. 'n' → logprob: -1.7129559516906738
    3. 'a' → logprob: -2.087955951690674
    4. 'for' → logprob: -2.087955951690674
    5. 'i' → logprob: -2.712955951690674
    6. 'r' → logprob: -2.837955951690674
    7. 's' → logprob: -3.462955951690674
    8. 'd' → logprob: -4.337955951690674
    9. ',' → logprob: -4.337955951690674
    10. '#' → logprob: -4.712955951690674

Token 10: '(d' (ID: 2572)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0004179217794444412
    2. '(d' → logprob: -8.000417709350586
    3. '('' → logprob: -9.750417709350586
    4. '("("' → logprob: -11.375417709350586
    5. '((' → logprob: -12.000417709350586
    6. '()' → logprob: -13.375417709350586
    7. '(`' → logprob: -13.625417709350586
    8. '(
' → logprob: -14.500417709350586
    9. '(round' → logprob: -15.125417709350586
    10. '(c' → logprob: -15.125417709350586

Token 11: '*c' (ID: 83421)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.03369353339076042
    2. ',' → logprob: -3.533693552017212
    3. '+' → logprob: -6.158693313598633
    4. '*' → logprob: -7.658693313598633
    5. ',d' → logprob: -7.658693313598633
    6. ',)' → logprob: -7.783693313598633
    7. '+d' → logprob: -9.408693313598633
    8. '**' → logprob: -9.533693313598633
    9. ',c' → logprob: -9.658693313598633
    10. ' )' → logprob: -10.283693313598633

Token 12: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.8828707804204896e-05
    2. '))' → logprob: -10.000048637390137
    3. '`)' → logprob: -12.875048637390137
    4. ' )' → logprob: -14.875048637390137
    5. ')))' → logprob: -16.250049591064453
    6. '*' → logprob: -16.250049591064453
    7. ')`' → logprob: -16.250049591064453
    8. '')' → logprob: -16.500049591064453
    9. ')
' → logprob: -16.750049591064453
    10. '*)' → logprob: -17.500049591064453


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 10
Tokens correctement prédits (1ère position, stricte): 2
Tokens correctement prédits (1ère position, avec adaptation): 2
Tokens correctement prédits (top 10): 6
Précision stricte (1ère position): 20.00%
Précision adaptée (1ère position): 20.00%
Précision (top 10): 60.00%
================================================================================
