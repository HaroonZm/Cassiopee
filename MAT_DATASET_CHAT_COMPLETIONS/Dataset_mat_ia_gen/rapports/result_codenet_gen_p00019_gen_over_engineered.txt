================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:16:50
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
class InputParser:
    def __init__(self, source):
        self.source = source

    def get_integer(self):
        line = self.source.readline()
        return int(line.strip())


class FactorialCalculator:
    def __init__(self, max_n=20):
        self.max_n = max_n
        self.memo = {0: 1, 1: 1}

    def factorial(self, n):
        if not (1 <= n <= self.max_n):
            raise ValueError(f"Input {n} out of bounds (1 to {self.max_n})")
        return self._factorial_recursive(n)

    def _factorial_recursive(self, n):
        if n in self.memo:
            return self.memo[n]
        self.memo[n] = n * self._factorial_recursive(n - 1)
        return self.memo[n]


class OutputHandler:
    def __init__(self, destination):
        self.destination = destination

    def print_result(self, result):
        self.destination.write(f"{result}\n")


class FactorialApp:
    def __init__(self, input_source, output_dest):
        self.parser = InputParser(input_source)
        self.calculator = FactorialCalculator()
        self.output = OutputHandler(output_dest)

    def run(self):
        n = self.parser.get_integer()
        fact = self.calculator.factorial(n)
        self.output.print_result(fact)


if __name__ == "__main__":
    import sys
    app = FactorialApp(sys.stdin, sys.stdout)
    app.run()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'class' (ID: 1444)
  → Token d'amorce (pas de prédiction)

Token 1: ' Input' (ID: 10090)
  → Token d'amorce (pas de prédiction)

Token 2: 'Parser' (ID: 9231)
  → Token d'amorce (pas de prédiction)

Token 3: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.15802998840808868
    2. '(' → logprob: -2.2830300331115723
    3. '.' → logprob: -3.5330300331115723
    4. '{' → logprob: -4.283030033111572
    5. '```' → logprob: -7.783030033111572
    6. '[' → logprob: -8.283029556274414
    7. ' :' → logprob: -8.533029556274414
    8. '(:' → logprob: -9.533029556274414
    9. ' {' → logprob: -9.533029556274414
    10. '():' → logprob: -10.408029556274414

Token 4: '   ' (ID: 271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.20925526320934296
    2. ':' → logprob: -2.0842552185058594
    3. '.' → logprob: -3.7092552185058594
    4. '   ' → logprob: -3.9592552185058594
    5. '```' → logprob: -4.584255218505859
    6. ''' → logprob: -5.834255218505859
    7. '(
' → logprob: -6.459255218505859
    8. '\' → logprob: -6.584255218505859
    9. ' (' → logprob: -6.834255218505859
    10. ' ' → logprob: -6.834255218505859

Token 5: ' def' (ID: 1056)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.27204039692878723
    2. '    ' → logprob: -2.272040367126465
    3. '   ' → logprob: -2.772040367126465
    4. '```' → logprob: -3.772040367126465
    5. ' def' → logprob: -4.147040367126465
    6. ' 
' → logprob: -5.522040367126465
    7. ' ```' → logprob: -5.772040367126465
    8. '\' → logprob: -5.772040367126465
    9. '<|end|>' → logprob: -6.022040367126465
    10. '[' → logprob: -6.147040367126465

Token 6: ' __' (ID: 2516)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.054640088230371475
    2. '__' → logprob: -4.054640293121338
    3. ' parse' → logprob: -4.804640293121338
    4. ' process' → logprob: -5.054640293121338
    5. ' __' → logprob: -5.054640293121338
    6. ' ' → logprob: -5.804640293121338
    7. '_' → logprob: -6.179640293121338
    8. '    ' → logprob: -6.554640293121338
    9. ' def' → logprob: -6.804640293121338
    10. '"' → logprob: -7.554640293121338

Token 7: 'init' (ID: 3287)
  Prédit: 'init'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'init' → logprob: -5.796184723294573e-06
    2. ' init' → logprob: -12.250005722045898
    3. 'ini' → logprob: -14.625005722045898
    4. '_init' → logprob: -14.750005722045898
    5. '	init' → logprob: -16.6250057220459
    6. 'in' → logprob: -18.1250057220459
    7. '__' → logprob: -18.1250057220459
    8. 'inite' → logprob: -18.7500057220459
    9. 'nit' → logprob: -19.0000057220459
    10. '   ' → logprob: -19.5000057220459

Token 8: '__(' (ID: 8241)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.38496720790863037
    2. '__(' → logprob: -2.00996732711792
    3. '__' → logprob: -2.25996732711792
    4. '_' → logprob: -2.63496732711792
    5. '(self' → logprob: -6.38496732711792
    6. '__(
' → logprob: -6.50996732711792
    7. ' (' → logprob: -6.75996732711792
    8. '_(' → logprob: -7.00996732711792
    9. '```' → logprob: -7.25996732711792
    10. '<|end|>' → logprob: -7.25996732711792

Token 9: 'self' (ID: 1156)
  Prédit: 'self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'self' → logprob: -0.02336229383945465
    2. ' self' → logprob: -3.773362398147583
    3. ')' → logprob: -9.398362159729004
    4. '(self' → logprob: -10.523362159729004
    5. ' )' → logprob: -13.523362159729004
    6. ' ' → logprob: -13.648362159729004
    7. ',self' → logprob: -13.648362159729004
    8. '	self' → logprob: -14.023362159729004
    9. '   ' → logprob: -15.023362159729004
    10. '       ' → logprob: -15.148362159729004

Token 10: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.09618423134088516
    2. ')' → logprob: -3.096184253692627
    3. '):' → logprob: -3.846184253692627
    4. '_' → logprob: -4.721184253692627
    5. ' ,' → logprob: -5.221184253692627
    6. '<|end|>' → logprob: -5.471184253692627
    7. 'self' → logprob: -5.596184253692627
    8. '.' → logprob: -7.971184253692627
    9. '(' → logprob: -8.221183776855469
    10. ' )' → logprob: -8.471183776855469

Token 11: ' source' (ID: 4256)
  Prédit: 'self'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'self' → logprob: -0.526244044303894
    2. ' self' → logprob: -0.901244044303894
    3. ' input' → logprob: -6.526244163513184
    4. ')' → logprob: -7.151244163513184
    5. 'input' → logprob: -7.276244163513184
    6. ' )' → logprob: -9.401244163513184
    7. ' parser' → logprob: -10.526244163513184
    8. 'data' → logprob: -11.526244163513184
    9. ' data' → logprob: -11.651244163513184
    10. '(self' → logprob: -11.776244163513184

Token 12: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.03687829151749611
    2. ')' → logprob: -3.6618783473968506
    3. '.' → logprob: -5.2868781089782715
    4. ':' → logprob: -5.5368781089782715
    5. '):
' → logprob: -7.6618781089782715
    6. '=' → logprob: -7.7868781089782715
    7. '_' → logprob: -8.16187858581543
    8. ',' → logprob: -8.78687858581543
    9. ' ):' → logprob: -9.91187858581543
    10. 's' → logprob: -10.41187858581543

Token 13: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.021419161930680275
    2. '    ' → logprob: -5.146419048309326
    3. '   ' → logprob: -5.146419048309326
    4. '\' → logprob: -6.146419048309326
    5. '(' → logprob: -6.896419048309326
    6. '<|end|>' → logprob: -6.896419048309326
    7. '        ' → logprob: -7.146419048309326
    8. ' ' → logprob: -7.521419048309326
    9. '        
' → logprob: -7.646419048309326
    10. '_' → logprob: -7.771419048309326

Token 14: ' self' (ID: 1051)
  Prédit: 'self'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'self' (adapté à ' self') → logprob: -0.6134539842605591
    2. ' self' → logprob: -0.8634539842605591
    3. '       ' → logprob: -4.2384538650512695
    4. '        ' → logprob: -4.3634538650512695
    5. ' ' → logprob: -5.2384538650512695
    6. ' ' → logprob: -6.3634538650512695
    7. '_' → logprob: -7.2384538650512695
    8. '         ' → logprob: -7.8634538650512695
    9. '```' → logprob: -8.11345386505127
    10. '           ' → logprob: -8.48845386505127

Token 15: '.source' (ID: 27872)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.0024645982775837183
    2. '.source' → logprob: -6.752464771270752
    3. '.token' → logprob: -7.502464771270752
    4. ' .' → logprob: -8.127464294433594
    5. '.parse' → logprob: -8.377464294433594
    6. '.input' → logprob: -9.377464294433594
    7. '.parser' → logprob: -10.627464294433594
    8. '.user' → logprob: -11.502464294433594
    9. '.process' → logprob: -11.502464294433594
    10. '.data' → logprob: -11.627464294433594

Token 16: ' =' (ID: 314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.6494802236557007
    2. '=' → logprob: -1.2744802236557007
    3. ' =' → logprob: -1.6494802236557007
    4. '<|end|>' → logprob: -6.39948034286499
    5. ' ' → logprob: -7.27448034286499
    6. '_' → logprob: -7.27448034286499
    7. ')' → logprob: -7.89948034286499
    8. '[' → logprob: -8.024479866027832
    9. ' .' → logprob: -8.149479866027832
    10. ',' → logprob: -8.274479866027832

Token 17: ' source' (ID: 4256)
  Prédit: ' source'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' source' → logprob: -0.07892272621393204
    2. 'source' → logprob: -2.578922748565674
    3. ' ' → logprob: -10.703922271728516
    4. '	source' → logprob: -11.703922271728516
    5. '(source' → logprob: -14.078922271728516
    6. '[source' → logprob: -14.953922271728516
    7. '_source' → logprob: -15.078922271728516
    8. '"' → logprob: -15.203922271728516
    9. ''' → logprob: -15.953922271728516
    10. ' ' → logprob: -16.078922271728516

Token 18: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.4201508164405823
    2. '<|end|>' → logprob: -1.9201507568359375
    3. '
' → logprob: -2.9201507568359375
    4. '   ' → logprob: -3.0451507568359375
    5. '\n' → logprob: -3.4201507568359375
    6. '\' → logprob: -3.9201507568359375
    7. '    
' → logprob: -4.2951507568359375
    8. '```' → logprob: -4.9201507568359375
    9. ' ' → logprob: -5.7951507568359375
    10. ',' → logprob: -6.0451507568359375

Token 19: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.12940625846385956
    2. '\n' → logprob: -3.504406213760376
    3. '    
' → logprob: -3.629406213760376
    4. '\' → logprob: -3.879406213760376
    5. '```' → logprob: -4.129406452178955
    6. '
' → logprob: -4.879406452178955
    7. '.' → logprob: -5.254406452178955
    8. '    ' → logprob: -6.129406452178955
    9. '  
' → logprob: -6.254406452178955
    10. ' ' → logprob: -6.254406452178955

Token 20: ' def' (ID: 1056)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' (adapté à ' def') → logprob: -0.41805610060691833
    2. ' def' → logprob: -1.7930561304092407
    3. '   ' → logprob: -1.7930561304092407
    4. ' ' → logprob: -5.293056011199951
    5. 'd' → logprob: -6.418056011199951
    6. '    ' → logprob: -6.668056011199951
    7. '```' → logprob: -8.04305648803711
    8. '    
' → logprob: -9.04305648803711
    9. ' 
' → logprob: -9.29305648803711
    10. '  ' → logprob: -9.54305648803711

Token 21: ' get' (ID: 717)
  Prédit: ' parse'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' parse' → logprob: -0.0033294493332505226
    2. ' tokenize' → logprob: -6.253329277038574
    3. 'parse' → logprob: -7.253329277038574
    4. ' read' → logprob: -8.003329277038574
    5. ' split' → logprob: -9.003329277038574
    6. ' process' → logprob: -9.878329277038574
    7. ' ' → logprob: -10.003329277038574
    8. ' decode' → logprob: -10.628329277038574
    9. ' get' → logprob: -10.878329277038574
    10. ' parser' → logprob: -11.003329277038574

Token 22: '_integer' (ID: 82911)
  Prédit: '_input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_input' → logprob: -0.34180936217308044
    2. '_token' → logprob: -2.3418092727661133
    3. '_line' → logprob: -2.7168092727661133
    4. '_' → logprob: -2.9668092727661133
    5. '_data' → logprob: -2.9668092727661133
    6. '_next' → logprob: -4.591809272766113
    7. '_source' → logprob: -5.341809272766113
    8. '_tokens' → logprob: -5.466809272766113
    9. '_value' → logprob: -6.591809272766113
    10. '_text' → logprob: -7.341809272766113

Token 23: '(self' (ID: 2402)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.014864210970699787
    2. '_' → logprob: -5.389864444732666
    3. '(self' → logprob: -5.389864444732666
    4. 's' → logprob: -5.639864444732666
    5. '_value' → logprob: -7.639864444732666
    6. '_token' → logprob: -8.389863967895508
    7. '(s' → logprob: -8.764863967895508
    8. '()' → logprob: -8.889863967895508
    9. '   ' → logprob: -8.889863967895508
    10. ')' → logprob: -9.139863967895508

Token 24: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.6847593784332275
    2. ')' → logprob: -0.8097593784332275
    3. '(' → logprob: -4.309759140014648
    4. '(self' → logprob: -4.684759140014648
    5. '_' → logprob: -4.809759140014648
    6. 'self' → logprob: -5.059759140014648
    7. ',' → logprob: -5.184759140014648
    8. 's' → logprob: -6.809759140014648
    9. '_value' → logprob: -6.934759140014648
    10. ')_' → logprob: -7.184759140014648

Token 25: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.05115916579961777
    2. '\' → logprob: -3.926159143447876
    3. '\n' → logprob: -4.551159381866455
    4. '(' → logprob: -4.801159381866455
    5. 'return' → logprob: -6.051159381866455
    6. '        
' → logprob: -6.426159381866455
    7. '    ' → logprob: -6.801159381866455
    8. '   ' → logprob: -6.801159381866455
    9. ':' → logprob: -6.926159381866455
    10. ' return' → logprob: -7.426159381866455

Token 26: ' line' (ID: 2543)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.1723442077636719
    2. '       ' → logprob: -1.4223442077636719
    3. 'r' → logprob: -2.047344207763672
    4. 'return' → logprob: -2.172344207763672
    5. ' return' → logprob: -2.672344207763672
    6. '    ' → logprob: -2.797344207763672
    7. '        ' → logprob: -3.547344207763672
    8. ' 
' → logprob: -4.422344207763672
    9. '   ' → logprob: -4.672344207763672
    10. 'n' → logprob: -5.797344207763672

Token 27: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.3610178232192993
    2. '.' → logprob: -1.2360178232192993
    3. '=' → logprob: -4.73601770401001
    4. '.split' → logprob: -6.73601770401001
    5. '.strip' → logprob: -7.36101770401001
    6. ' .' → logprob: -7.61101770401001
    7. '[' → logprob: -7.61101770401001
    8. '   ' → logprob: -8.236018180847168
    9. 's' → logprob: -9.486018180847168
    10. '_' → logprob: -9.611018180847168

Token 28: ' self' (ID: 1051)
  Prédit: ' self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' self' → logprob: -0.02631342224776745
    2. 'self' → logprob: -3.651313304901123
    3. ' ' → logprob: -11.401313781738281
    4. ' input' → logprob: -14.026313781738281
    5. '	self' → logprob: -14.651313781738281
    6. ' next' → logprob: -15.651313781738281
    7. ' int' → logprob: -15.901313781738281
    8. '   ' → logprob: -16.02631378173828
    9. 'input' → logprob: -16.90131378173828
    10. ' ' → logprob: -17.02631378173828

Token 29: '.source' (ID: 27872)
  Prédit: '.source'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.source' → logprob: -0.011124570854008198
    2. '.' → logprob: -4.511124610900879
    3. 'source' → logprob: -10.511124610900879
    4. '.readline' → logprob: -11.011124610900879
    5. ' .' → logprob: -11.261124610900879
    6. '.s' → logprob: -11.761124610900879
    7. '.user' → logprob: -12.136124610900879
    8. '.line' → logprob: -13.511124610900879
    9. '.read' → logprob: -14.011124610900879
    10. '.parse' → logprob: -14.511124610900879

Token 30: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.019670987501740456
    2. '.' → logprob: -4.0196709632873535
    3. '.read' → logprob: -6.7696709632873535
    4. '.strip' → logprob: -8.019671440124512
    5. '.split' → logprob: -10.769671440124512
    6. '.readlines' → logprob: -11.644671440124512
    7. '.pop' → logprob: -12.144671440124512
    8. '.rstrip' → logprob: -12.644671440124512
    9. '.get' → logprob: -13.769671440124512
    10. '.peek' → logprob: -13.894671440124512

Token 31: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.01610182411968708
    2. '(' → logprob: -4.141101837158203
    3. '()`' → logprob: -11.516101837158203
    4. '```' → logprob: -11.516101837158203
    5. '`()' → logprob: -11.641101837158203
    6. ' ()' → logprob: -11.766101837158203
    7. '())' → logprob: -12.016101837158203
    8. '().' → logprob: -12.141101837158203
    9. '()(' → logprob: -12.516101837158203
    10. '(
' → logprob: -13.016101837158203

Token 32: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.014414520002901554
    2. '.strip' → logprob: -5.014414310455322
    3. '()' → logprob: -6.139414310455322
    4. ' if' → logprob: -7.139414310455322
    5. 'return' → logprob: -7.139414310455322
    6. ' ' → logprob: -7.264414310455322
    7. '        ' → logprob: -7.514414310455322
    8. 'if' → logprob: -7.514414310455322
    9. '()
' → logprob: -7.764414310455322
    10. '        
' → logprob: -8.26441478729248

Token 33: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.26384133100509644
    2. 'return' (adapté à ' return') → logprob: -1.8888413906097412
    3. ' if' → logprob: -2.638841390609741
    4. '       ' → logprob: -5.513841152191162
    5. 'if' → logprob: -6.013841152191162
    6. ' try' → logprob: -6.388841152191162
    7. ' ' → logprob: -7.388841152191162
    8. 'try' → logprob: -8.51384162902832
    9. '        ' → logprob: -9.38884162902832
    10. ' while' → logprob: -10.51384162902832

Token 34: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.00028576893964782357
    2. 'int' → logprob: -8.250286102294922
    3. ' ' → logprob: -10.625286102294922
    4. ' ' → logprob: -15.750286102294922
    5. ' i' → logprob: -17.000286102294922
    6. ' in' → logprob: -17.375286102294922
    7. '(int' → logprob: -17.375286102294922
    8. ' None' → logprob: -17.875286102294922
    9. '[int' → logprob: -18.000286102294922
    10. ' line' → logprob: -18.875286102294922

Token 35: '(line' (ID: 18178)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.2519422471523285
    2. '(line' → logprob: -1.5019422769546509
    3. '('' → logprob: -11.50194263458252
    4. '(
' → logprob: -13.87694263458252
    5. '("("' → logprob: -14.37694263458252
    6. '(space' → logprob: -15.25194263458252
    7. '(lines' → logprob: -15.87694263458252
    8. '(l' → logprob: -16.251941680908203
    9. '("' → logprob: -16.376941680908203
    10. ' (' → logprob: -16.501941680908203

Token 36: '.strip' (ID: 40613)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.008044618181884289
    2. '.strip' → logprob: -4.883044719696045
    3. '.rstrip' → logprob: -8.508044242858887
    4. '())' → logprob: -8.633044242858887
    5. '()' → logprob: -10.758044242858887
    6. '().' → logprob: -11.508044242858887
    7. ' )' → logprob: -11.883044242858887
    8. '   ' → logprob: -12.508044242858887
    9. '.readline' → logprob: -12.508044242858887
    10. '.trim' → logprob: -13.383044242858887

Token 37: '())


' (ID: 131583)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.01771167479455471
    2. ')' → logprob: -4.517711639404297
    3. '()' → logprob: -5.017711639404297
    4. ' ())' → logprob: -11.642711639404297
    5. '()))' → logprob: -12.017711639404297
    6. '(' → logprob: -12.392711639404297
    7. '))' → logprob: -13.392711639404297
    8. '())
' → logprob: -14.392711639404297
    9. ' )' → logprob: -14.517711639404297
    10. '();)' → logprob: -15.767711639404297

Token 38: 'class' (ID: 1444)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 39: ' Factor' (ID: 63743)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -1.0444960594177246
    2. ' Output' → logprob: -1.5444960594177246
    3. ' Input' → logprob: -1.9194960594177246
    4. ' Token' → logprob: -2.4194960594177246
    5. ' Data' → logprob: -2.6694960594177246
    6. ' Parser' → logprob: -3.6694960594177246
    7. ' String' → logprob: -3.7944960594177246
    8. ' Solution' → logprob: -3.7944960594177246
    9. ' Space' → logprob: -4.169496059417725
    10. ' Processor' → logprob: -4.419496059417725

Token 40: 'ial' (ID: 563)
  Prédit: 'ial'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ial' → logprob: -0.28034496307373047
    2. 'ization' → logprob: -2.2803449630737305
    3. 'ialize' → logprob: -2.4053449630737305
    4. 'izer' → logprob: -3.6553449630737305
    5. 'ize' → logprob: -4.1553449630737305
    6. ' ' → logprob: -5.5303449630737305
    7. '   ' → logprob: -6.7803449630737305
    8. 'Factor' → logprob: -6.7803449630737305
    9. '```' → logprob: -7.2803449630737305
    10. 'i' → logprob: -7.5303449630737305

Token 41: 'Calculator' (ID: 50159)
  Prédit: 'Calculator'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Calculator' → logprob: -0.11835124343633652
    2. ':' → logprob: -2.2433512210845947
    3. '(' → logprob: -5.868351459503174
    4. 'Calcul' → logprob: -6.368351459503174
    5. 'Processor' → logprob: -8.118350982666016
    6. 'Calculation' → logprob: -8.368350982666016
    7. 'Solver' → logprob: -9.243350982666016
    8. '():' → logprob: -9.493350982666016
    9. 'Computer' → logprob: -9.618350982666016
    10. 'Generator' → logprob: -10.368350982666016

Token 42: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0001720742875477299
    2. ':
' → logprob: -8.750171661376953
    3. ' :' → logprob: -12.125171661376953
    4. '(' → logprob: -12.625171661376953
    5. '   ' → logprob: -13.000171661376953
    6. ':def' → logprob: -14.250171661376953
    7. '):' → logprob: -14.375171661376953
    8. '():' → logprob: -14.500171661376953
    9. ':**' → logprob: -14.875171661376953
    10. '(object' → logprob: -15.500171661376953

Token 43: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0003585840167943388
    2. ' def' → logprob: -8.500358581542969
    3. '    
' → logprob: -9.875358581542969
    4. '(' → logprob: -10.500358581542969
    5. ':' → logprob: -10.500358581542969
    6. 'def' → logprob: -11.250358581542969
    7. '	def' → logprob: -11.625358581542969
    8. '
' → logprob: -12.000358581542969
    9. ':
' → logprob: -12.250358581542969
    10. '    ' → logprob: -12.750358581542969

Token 44: ' def' (ID: 1056)
  Prédit: ' def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' def' → logprob: -0.08383319526910782
    2. '   ' → logprob: -2.8338332176208496
    3. 'def' (adapté à ' def') → logprob: -3.8338332176208496
    4. '	def' → logprob: -13.958832740783691
    5. ' ' → logprob: -14.583832740783691
    6. '```' → logprob: -16.208833694458008
    7. '   ' → logprob: -16.833833694458008
    8. '    ' → logprob: -16.833833694458008
    9. ' de' → logprob: -17.208833694458008
    10. 'de' → logprob: -17.458833694458008

Token 45: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.3548622131347656
    2. ' ' → logprob: -1.6048622131347656
    3. ' calculate' → logprob: -2.4798622131347656
    4. '_' → logprob: -5.229862213134766
    5. ' _' → logprob: -5.479862213134766
    6. ' compute' → logprob: -5.729862213134766
    7. '__' → logprob: -7.729862213134766
    8. ' get' → logprob: -8.479862213134766
    9. ' ' → logprob: -8.479862213134766
    10. ' ```' → logprob: -9.354862213134766

Token 46: 'init' (ID: 3287)
  Prédit: 'init'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'init' → logprob: -8.721228368813172e-05
    2. 'def' → logprob: -10.250086784362793
    3. 'int' → logprob: -10.750086784362793
    4. 'i' → logprob: -11.625086784362793
    5. ' init' → logprob: -12.375086784362793
    6. 'ini' → logprob: -12.500086784362793
    7. 'in' → logprob: -12.875086784362793
    8. '   ' → logprob: -12.875086784362793
    9. 'calc' → logprob: -13.000086784362793
    10. 'factor' → logprob: -13.000086784362793

Token 47: '__(' (ID: 8241)
  Prédit: '__('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__(' → logprob: -0.006119451951235533
    2. '__' → logprob: -5.381119251251221
    3. ' (' → logprob: -6.756119251251221
    4. '(self' → logprob: -8.631119728088379
    5. '(' → logprob: -9.506119728088379
    6. '_(' → logprob: -10.256119728088379
    7. '__(
' → logprob: -10.506119728088379
    8. '__((' → logprob: -11.256119728088379
    9. '_' → logprob: -12.881119728088379
    10. ' ' → logprob: -14.006119728088379

Token 48: 'self' (ID: 1156)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.5969088077545166
    2. 'self' → logprob: -0.8469088077545166
    3. 'number' → logprob: -4.2219085693359375
    4. ')' → logprob: -5.3469085693359375
    5. ' self' → logprob: -8.096908569335938
    6. 'num' → logprob: -8.221908569335938
    7. '   ' → logprob: -8.346908569335938
    8. ' n' → logprob: -8.596908569335938
    9. ' ' → logprob: -9.096908569335938
    10. ')n' → logprob: -9.721908569335938

Token 49: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.5038436055183411
    2. ' ,' → logprob: -1.5038435459136963
    3. 'self' → logprob: -2.3788435459136963
    4. ' n' → logprob: -3.2538435459136963
    5. ' self' → logprob: -3.8788435459136963
    6. 'n' → logprob: -4.128843784332275
    7. ' )' → logprob: -6.128843784332275
    8. 'number' → logprob: -6.753843784332275
    9. ' number' → logprob: -7.378843784332275
    10. ' ' → logprob: -7.753843784332275

Token 50: ' max' (ID: 2999)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.3750481605529785
    2. ' n' → logprob: -1.7500481605529785
    3. 'number' → logprob: -2.5000481605529785
    4. ' number' → logprob: -2.8750481605529785
    5. 'num' → logprob: -8.75004768371582
    6. 'self' → logprob: -9.25004768371582
    7. ' ' → logprob: -9.37504768371582
    8. ')' → logprob: -10.37504768371582
    9. '	n' → logprob: -10.50004768371582
    10. 'value' → logprob: -11.00004768371582

Token 51: '_n' (ID: 2170)
  Prédit: '_value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_value' → logprob: -0.05393067002296448
    2. '_number' → logprob: -3.0539307594299316
    3. '_n' → logprob: -5.678930759429932
    4. '_input' → logprob: -7.178930759429932
    5. '_factor' → logprob: -7.428930759429932
    6. '_' → logprob: -7.803930759429932
    7. '_num' → logprob: -9.178930282592773
    8. '_val' → logprob: -10.928930282592773
    9. '_limit' → logprob: -11.428930282592773
    10. '_count' → logprob: -12.803930282592773

Token 52: '=' (ID: 28)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.09135738760232925
    2. '=' → logprob: -2.466357469558716
    3. '):
' → logprob: -6.841357231140137
    4. ' ):' → logprob: -7.091357231140137
    5. '=None' → logprob: -7.841357231140137
    6. ':' → logprob: -10.216357231140137
    7. ')' → logprob: -10.341357231140137
    8. ' ' → logprob: -11.466357231140137
    9. ' =' → logprob: -11.466357231140137
    10. '   ' → logprob: -12.216357231140137

Token 53: '20' (ID: 455)
  Prédit: '100'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '100' → logprob: -0.1715642660856247
    2. ' ' → logprob: -1.9215642213821411
    3. '10' → logprob: -4.671564102172852
    4. '20' → logprob: -6.546564102172852
    5. '1' → logprob: -8.046564102172852
    6. '50' → logprob: -9.296564102172852
    7. '0' → logprob: -10.171564102172852
    8. '500' → logprob: -11.296564102172852
    9. '  ' → logprob: -12.171564102172852
    10. ')' → logprob: -13.046564102172852

Token 54: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00022237090161070228
    2. ')' → logprob: -8.750222206115723
    3. ' ):' → logprob: -10.250222206115723
    4. '):
' → logprob: -10.875222206115723
    5. '   ' → logprob: -12.125222206115723
    6. ':' → logprob: -13.375222206115723
    7. ',' → logprob: -13.625222206115723
    8. '       ' → logprob: -14.500222206115723
    9. '):
' → logprob: -15.500222206115723
    10. '0' → logprob: -15.875222206115723

Token 55: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00014239625306800008
    2. ':' → logprob: -10.000142097473145
    3. '   ' → logprob: -10.250142097473145
    4. 'self' → logprob: -11.250142097473145
    5. '
' → logprob: -11.500142097473145
    6. '      ' → logprob: -12.125142097473145
    7. '<|end|>' → logprob: -12.125142097473145
    8. '        
' → logprob: -12.250142097473145
    9. ' self' → logprob: -12.500142097473145
    10. '        ' → logprob: -12.625142097473145

Token 56: ' self' (ID: 1051)
  Prédit: 'self'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'self' (adapté à ' self') → logprob: -0.12742367386817932
    2. ' self' → logprob: -2.1274237632751465
    3. '       ' → logprob: -7.6274237632751465
    4. '   ' → logprob: -12.002423286437988
    5. ' ' → logprob: -13.377423286437988
    6. '	self' → logprob: -14.502423286437988
    7. 'super' → logprob: -15.502423286437988
    8. 'def' → logprob: -16.627424240112305
    9. ' super' → logprob: -17.002424240112305
    10. ' ' → logprob: -17.252424240112305

Token 57: '.max' (ID: 11883)
  Prédit: '.max'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.max' → logprob: -0.0328979417681694
    2. '._' → logprob: -3.65789794921875
    3. '.' → logprob: -5.40789794921875
    4. ' .' → logprob: -6.40789794921875
    5. '.maximum' → logprob: -8.15789794921875
    6. 'max' → logprob: -9.15789794921875
    7. '.next' → logprob: -11.65789794921875
    8. '   ' → logprob: -11.78289794921875
    9. '.MAX' → logprob: -12.15789794921875
    10. '.current' → logprob: -12.15789794921875

Token 58: '_n' (ID: 2170)
  Prédit: '_n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_n' → logprob: -4.36574100604048e-06
    2. '_' → logprob: -12.375004768371582
    3. ' _' → logprob: -16.375003814697266
    4. '_a' → logprob: -18.250003814697266
    5. '_i' → logprob: -18.375003814697266
    6. '_N' → logprob: -18.875003814697266
    7. '\' → logprob: -19.125003814697266
    8. '=_' → logprob: -19.250003814697266
    9. '_x' → logprob: -19.375003814697266
    10. '_s' → logprob: -19.500003814697266

Token 59: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.25198227167129517
    2. ' =' → logprob: -1.5019822120666504
    3. ' ' → logprob: -10.501982688903809
    4. '   ' → logprob: -10.751982688903809
    5. '  ' → logprob: -12.876982688903809
    6. '    ' → logprob: -13.626982688903809
    7. '=None' → logprob: -16.626981735229492
    8. ')' → logprob: -16.876981735229492
    9. '=int' → logprob: -17.126981735229492
    10. ',' → logprob: -17.251981735229492

Token 60: ' max' (ID: 2999)
  Prédit: ' max'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' max' → logprob: -0.05543404817581177
    2. 'max' → logprob: -2.930433988571167
    3. '20' → logprob: -7.555434226989746
    4. ' ' → logprob: -10.555434226989746
    5. '	max' → logprob: -13.805434226989746
    6. '   ' → logprob: -15.180434226989746
    7. ' maxlength' → logprob: -15.305434226989746
    8. '    ' → logprob: -15.430434226989746
    9. 'maxlength' → logprob: -16.05543327331543
    10. '=max' → logprob: -16.68043327331543

Token 61: '_n' (ID: 2170)
  Prédit: '_n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_n' → logprob: -0.0015023599844425917
    2. '_' → logprob: -6.501502513885498
    3. ' _' → logprob: -16.876502990722656
    4. '_
' → logprob: -19.001502990722656
    5. '_i' → logprob: -19.126502990722656
    6. '_)' → logprob: -19.626502990722656
    7. '_N' → logprob: -19.876502990722656
    8. '_
' → logprob: -19.876502990722656
    9. '_a' → logprob: -20.376502990722656
    10. '_

' → logprob: -20.626502990722656

Token 62: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.051250915974378586
    2. '<|end|>' → logprob: -3.17625093460083
    3. '   ' → logprob: -5.80125093460083
    4. '<|end|>' → logprob: -6.80125093460083
    5. 'def' → logprob: -7.05125093460083
    6. '

' → logprob: -7.17625093460083
    7. '    
' → logprob: -7.17625093460083
    8. '       ' → logprob: -7.17625093460083
    9. ' def' → logprob: -7.92625093460083
    10. ' 
' → logprob: -8.801250457763672

Token 63: '       ' (ID: 309)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.0033498897682875395
    2. '   ' → logprob: -6.628349781036377
    3. '<|end|>' → logprob: -6.878349781036377
    4. '    
' → logprob: -8.253350257873535
    5. '

' → logprob: -8.378350257873535
    6. '       ' → logprob: -8.378350257873535
    7. 'def' → logprob: -9.378350257873535
    8. ' 
' → logprob: -9.753350257873535
    9. '<|end|>' → logprob: -10.003350257873535
    10. ' def' → logprob: -10.878350257873535

Token 64: ' self' (ID: 1051)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.13084512948989868
    2. '
' → logprob: -2.380845069885254
    3. 'def' → logprob: -4.255845069885254
    4. 'self' (adapté à ' self') → logprob: -5.255845069885254
    5. '   ' → logprob: -5.380845069885254
    6. '    
' → logprob: -6.380845069885254
    7. ' self' → logprob: -6.755845069885254
    8. '        
' → logprob: -7.005845069885254
    9. '<|end|>' → logprob: -7.130845069885254
    10. '    ' → logprob: -8.130845069885254

Token 65: '.memo' (ID: 161018)
  Prédit: '._'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '._' → logprob: -0.7064449191093445
    2. '.' → logprob: -1.3314449787139893
    3. '.factor' → logprob: -1.9564449787139893
    4. '.cache' → logprob: -3.2064449787139893
    5. ' .' → logprob: -3.5814449787139893
    6. '_factor' → logprob: -4.20644474029541
    7. '_cache' → logprob: -4.70644474029541
    8. '.fact' → logprob: -6.20644474029541
    9. 'factor' → logprob: -6.70644474029541
    10. '.f' → logprob: -7.20644474029541

Token 66: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.4745231568813324
    2. ' =' → logprob: -0.9745231866836548
    3. '={}' → logprob: -8.599523544311523
    4. 'ization' → logprob: -8.849523544311523
    5. 'ize' → logprob: -9.474523544311523
    6. ' ' → logprob: -10.849523544311523
    7. 'ized' → logprob: -12.099523544311523
    8. '_' → logprob: -12.349523544311523
    9. '={' → logprob: -12.599523544311523
    10. 'iz' → logprob: -13.099523544311523

Token 67: ' {' (ID: 354)
  Prédit: ' {'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' {' → logprob: -0.12827296555042267
    2. '{' → logprob: -2.1282730102539062
    3. ' {}' → logprob: -7.253273010253906
    4. ' [' → logprob: -7.628273010253906
    5. '{}' → logprob: -9.503273010253906
    6. '[' → logprob: -9.503273010253906
    7. ' ' → logprob: -15.128273010253906
    8. ' defaultdict' → logprob: -17.003273010253906
    9. ' ' → logprob: -17.753273010253906
    10. ' {}

' → logprob: -18.003273010253906

Token 68: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00010998018842656165
    2. ' ' → logprob: -9.125109672546387
    3. '   ' → logprob: -13.875109672546387
    4. '       ' → logprob: -17.750110626220703
    5. '  ' → logprob: -17.875110626220703
    6. '    ' → logprob: -20.250110626220703
    7. '}' → logprob: -20.250110626220703
    8. '           ' → logprob: -20.375110626220703
    9. '     ' → logprob: -20.625110626220703
    10. '	' → logprob: -21.500110626220703

Token 69: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -2.463036435074173e-05
    2. ' :' → logprob: -10.625024795532227
    3. '1' → logprob: -15.750024795532227
    4. '0' → logprob: -16.000024795532227
    5. ':
' → logprob: -18.000024795532227
    6. ':int' → logprob: -19.125024795532227
    7. '   ' → logprob: -19.625024795532227
    8. '2' → logprob: -19.875024795532227
    9. ',' → logprob: -20.000024795532227
    10. ':return' → logprob: -20.375024795532227

Token 70: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.25193020701408386
    2. ' ' → logprob: -1.5019302368164062
    3. '   ' → logprob: -14.376930236816406
    4. '  ' → logprob: -14.751930236816406
    5. '0' → logprob: -15.876930236816406
    6. '<|end|>' → logprob: -17.376930236816406
    7. ' factorial' → logprob: -17.376930236816406
    8. '    ' → logprob: -17.564430236816406
    9. '```' → logprob: -18.376930236816406
    10. '	' → logprob: -18.439430236816406

Token 71: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0004307884373702109
    2. ' ' → logprob: -7.750430583953857
    3. '   ' → logprob: -17.125431060791016
    4. '  ' → logprob: -17.750431060791016
    5. 'factor' → logprob: -17.875431060791016
    6. '0' → logprob: -18.125431060791016
    7. '```' → logprob: -19.937931060791016
    8. 'int' → logprob: -21.000431060791016
    9. '    ' → logprob: -21.062931060791016
    10. '}' → logprob: -21.062931060791016

Token 72: ',' (ID: 11)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '}' → logprob: -0.579596757888794
    2. ',' → logprob: -0.829596757888794
    3. ' }' → logprob: -5.829596519470215
    4. ',
' → logprob: -7.704596519470215
    5. '   ' → logprob: -8.954596519470215
    6. ' ,' → logprob: -9.829596519470215
    7. '       ' → logprob: -10.204596519470215
    8. '}
' → logprob: -10.329596519470215
    9. '}

' → logprob: -12.829596519470215
    10. '    ' → logprob: -13.954596519470215

Token 73: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.3868769407272339
    2. ' ' → logprob: -1.1368769407272339
    3. '    ' → logprob: -12.636877059936523
    4. '   ' → logprob: -13.136877059936523
    5. '  ' → logprob: -14.886877059936523
    6. '     ' → logprob: -16.761877059936523
    7. '       ' → logprob: -16.761877059936523
    8. '        ' → logprob: -16.886877059936523
    9. ' ' → logprob: -16.886877059936523
    10. '	' → logprob: -17.511877059936523

Token 74: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0001398929744027555
    2. ' ' → logprob: -8.875140190124512
    3. '   ' → logprob: -18.750139236450195
    4. '  ' → logprob: -18.875139236450195
    5. '}' → logprob: -20.500139236450195
    6. '```' → logprob: -21.125139236450195
    7. '{' → logprob: -21.875139236450195
    8. '    ' → logprob: -22.000139236450195
    9. '...' → logprob: -22.250139236450195
    10. ' ' → logprob: -22.375139236450195

Token 75: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -7.584239938296378e-06
    2. '}' → logprob: -12.125007629394531
    3. ' :' → logprob: -13.375007629394531
    4. '}:' → logprob: -16.37500762939453
    5. '1' → logprob: -16.50000762939453
    6. ' }' → logprob: -16.50000762939453
    7. ':
' → logprob: -16.75000762939453
    8. '2' → logprob: -16.75000762939453
    9. '0' → logprob: -18.25000762939453
    10. ')' → logprob: -18.50000762939453

Token 76: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.5759428143501282
    2. ' ' → logprob: -0.8259428143501282
    3. '  ' → logprob: -13.950942993164062
    4. '   ' → logprob: -14.075942993164062
    5. ' ' → logprob: -14.638442993164062
    6. '    ' → logprob: -14.825942993164062
    7. '```' → logprob: -15.013442993164062
    8. '}' → logprob: -16.638442993164062
    9. ' factorial' → logprob: -16.638442993164062
    10. '     ' → logprob: -16.950942993164062

Token 77: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00020389800192788243
    2. ' ' → logprob: -8.500204086303711
    3. '   ' → logprob: -16.00020408630371
    4. '```' → logprob: -16.00020408630371
    5. '  ' → logprob: -16.87520408630371
    6. 'factor' → logprob: -17.31270408630371
    7. '    ' → logprob: -18.25020408630371
    8. '}' → logprob: -18.75020408630371
    9. '{' → logprob: -18.87520408630371
    10. '۱' → logprob: -18.87520408630371

Token 78: '}

' (ID: 943)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '}' → logprob: -0.0010979531798511744
    2. ' }' → logprob: -6.876098155975342
    3. ',' → logprob: -9.876097679138184
    4. '}
' → logprob: -11.626097679138184
    5. '   ' → logprob: -13.001097679138184
    6. '}

' → logprob: -13.376097679138184
    7. '       ' → logprob: -14.251097679138184
    8. '	' → logprob: -16.5010986328125
    9. ' }
' → logprob: -16.7510986328125
    10. ',
' → logprob: -16.7510986328125

Token 79: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.008676380850374699
    2. '
' → logprob: -4.883676528930664
    3. '    
' → logprob: -7.133676528930664
    4. 'def' → logprob: -8.633676528930664
    5. ' 
' → logprob: -10.508676528930664
    6. ' def' → logprob: -10.508676528930664
    7. '<|end|>' → logprob: -10.633676528930664
    8. '  
' → logprob: -12.258676528930664
    9. '```' → logprob: -12.258676528930664
    10. '        
' → logprob: -12.883676528930664

Token 80: ' def' (ID: 1056)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' (adapté à ' def') → logprob: -0.06592816859483719
    2. ' def' → logprob: -3.0659282207489014
    3. '   ' → logprob: -4.065927982330322
    4. ' ' → logprob: -10.44092845916748
    5. ' 
' → logprob: -12.31592845916748
    6. '    
' → logprob: -13.06592845916748
    7. '```' → logprob: -13.06592845916748
    8. '  ' → logprob: -13.31592845916748
    9. '	def' → logprob: -13.31592845916748
    10. 'd' → logprob: -13.31592845916748

Token 81: ' factorial' (ID: 111204)
  Prédit: ' factorial'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' factorial' → logprob: -0.015196168795228004
    2. ' calculate' → logprob: -4.640196323394775
    3. 'factor' → logprob: -5.890196323394775
    4. ' compute' → logprob: -6.515196323394775
    5. ' def' → logprob: -7.390196323394775
    6. 'calculate' → logprob: -8.015195846557617
    7. 'def' → logprob: -9.640195846557617
    8. ' factor' → logprob: -10.015195846557617
    9. ' get' → logprob: -10.265195846557617
    10. 'compute' → logprob: -10.390195846557617

Token 82: '(self' (ID: 2402)
  Prédit: '(self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(self' → logprob: -0.03806202858686447
    2. '(' → logprob: -3.28806209564209
    3. ' (' → logprob: -10.91306209564209
    4. '(s' → logprob: -13.66306209564209
    5. '(n' → logprob: -15.03806209564209
    6. '(
' → logprob: -15.03806209564209
    7. '   ' → logprob: -15.28806209564209
    8. 's' → logprob: -16.288061141967773
    9. ' ' → logprob: -16.663061141967773
    10. '(sel' → logprob: -16.663061141967773

Token 83: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.004547608084976673
    2. ',n' → logprob: -5.879547595977783
    3. ' ,' → logprob: -6.504547595977783
    4. ',self' → logprob: -8.629548072814941
    5. 'self' → logprob: -10.504548072814941
    6. '(self' → logprob: -11.629548072814941
    7. ',num' → logprob: -11.754548072814941
    8. ',s' → logprob: -12.504548072814941
    9. '_,' → logprob: -12.879548072814941
    10. ')' → logprob: -13.004548072814941

Token 84: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.3877236247062683
    2. ' n' → logprob: -1.137723684310913
    3. 'self' → logprob: -7.512723445892334
    4. ' self' → logprob: -8.387723922729492
    5. '   ' → logprob: -9.762723922729492
    6. '       ' → logprob: -11.887723922729492
    7. '	n' → logprob: -12.137723922729492
    8. ' ' → logprob: -12.637723922729492
    9. '    ' → logprob: -12.762723922729492
    10. '  ' → logprob: -14.262723922729492

Token 85: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0037194383330643177
    2. ' ):' → logprob: -6.003719329833984
    3. '):
' → logprob: -7.003719329833984
    4. ')' → logprob: -8.128719329833984
    5. '   ' → logprob: -10.878719329833984
    6. ' )' → logprob: -11.878719329833984
    7. ':' → logprob: -12.253719329833984
    8. ' ):
' → logprob: -12.503719329833984
    9. '       ' → logprob: -12.628719329833984
    10. '):
' → logprob: -14.003719329833984

Token 86: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0006980192265473306
    2. ':' → logprob: -7.375698089599609
    3. ' if' → logprob: -10.87569808959961
    4. '        
' → logprob: -11.75069808959961
    5. '   ' → logprob: -11.87569808959961
    6. ' 
' → logprob: -12.00069808959961
    7. '    ' → logprob: -12.37569808959961
    8. '        ' → logprob: -12.37569808959961
    9. '
' → logprob: -12.50069808959961
    10. '      ' → logprob: -12.75069808959961

Token 87: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.10302960127592087
    2. '       ' → logprob: -2.853029489517212
    3. 'if' (adapté à ' if') → logprob: -3.228029489517212
    4. ' 
' → logprob: -8.228029251098633
    5. '        ' → logprob: -8.728029251098633
    6. '   ' → logprob: -9.853029251098633
    7. ' ' → logprob: -10.103029251098633
    8. '    ' → logprob: -10.603029251098633
    9. '        
' → logprob: -10.853029251098633
    10. '
' → logprob: -11.478029251098633

Token 88: ' not' (ID: 625)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.02975812554359436
    2. 'n' → logprob: -3.5297582149505615
    3. ' ' → logprob: -12.27975845336914
    4. '	n' → logprob: -13.15475845336914
    5. ' not' → logprob: -13.90475845336914
    6. '   ' → logprob: -16.77975845336914
    7. ' ' → logprob: -16.77975845336914
    8. '    ' → logprob: -16.77975845336914
    9. ')n' → logprob: -17.84225845336914
    10. ' (' → logprob: -17.84225845336914

Token 89: ' (' (ID: 350)
  Prédit: ' isinstance'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' isinstance' → logprob: -0.28588709235191345
    2. ' (' → logprob: -1.6608871221542358
    3. ' ' → logprob: -2.9108870029449463
    4. '0' → logprob: -5.785887241363525
    5. ' n' → logprob: -7.410887241363525
    6. '(' → logprob: -8.035886764526367
    7. ' hasattr' → logprob: -9.535886764526367
    8. '(n' → logprob: -9.660886764526367
    9. '1' → logprob: -9.785886764526367
    10. ' self' → logprob: -10.660886764526367

Token 90: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0061284638941287994
    2. ' ' → logprob: -5.131128311157227
    3. ' isinstance' → logprob: -9.381128311157227
    4. '1' → logprob: -10.006128311157227
    5. 'is' → logprob: -10.256128311157227
    6. '   ' → logprob: -10.381128311157227
    7. '       ' → logprob: -13.756128311157227
    8. ' (' → logprob: -14.256128311157227
    9. '(' → logprob: -14.381128311157227
    10. '           ' → logprob: -14.881128311157227

Token 91: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.0036216892767697573
    2. '<=' → logprob: -5.628621578216553
    3. '0' → logprob: -10.878622055053711
    4. ' ' → logprob: -13.128622055053711
    5. ' ≤' → logprob: -16.12862205505371
    6. '2' → logprob: -16.25362205505371
    7. '1' → logprob: -16.25362205505371
    8. '
' → logprob: -17.00362205505371
    9. 'le' → logprob: -17.00362205505371
    10. '    ' → logprob: -17.00362205505371

Token 92: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.4740784466266632
    2. 'n' → logprob: -0.9740784168243408
    3. ')n' → logprob: -14.599078178405762
    4. ' ' → logprob: -14.724078178405762
    5. '	n' → logprob: -15.224078178405762
    6. '_n' → logprob: -16.599079132080078
    7. ')' → logprob: -16.849079132080078
    8. ' ' → logprob: -17.099079132080078
    9. '=n' → logprob: -17.349079132080078
    10. '<|end|>' → logprob: -17.349079132080078

Token 93: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.026306219398975372
    2. '<=' → logprob: -3.65130615234375
    3. ' and' → logprob: -13.02630615234375
    4. ' ' → logprob: -14.02630615234375
    5. ' ≤' → logprob: -14.27630615234375
    6. '<|end|>' → logprob: -14.52630615234375
    7. 'and' → logprob: -14.65130615234375
    8. 'le' → logprob: -15.02630615234375
    9. ')<=' → logprob: -16.02630615234375
    10. ']<=' → logprob: -16.40130615234375

Token 94: ' self' (ID: 1051)
  Prédit: ' self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' self' → logprob: -0.4287278950214386
    2. 'self' → logprob: -1.0537278652191162
    3. '20' → logprob: -11.053728103637695
    4. ' ' → logprob: -12.053728103637695
    5. '	self' → logprob: -13.303728103637695
    6. '<|end|>' → logprob: -13.928728103637695
    7. ' ' → logprob: -14.303728103637695
    8. '[self' → logprob: -15.053728103637695
    9. 'n' → logprob: -15.303728103637695
    10. '       ' → logprob: -15.428728103637695

Token 95: '.max' (ID: 11883)
  Prédit: '.max'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.max' → logprob: -4.127333340875339e-06
    2. 'max' → logprob: -12.875003814697266
    3. '.' → logprob: -13.500003814697266
    4. ' .' → logprob: -16.500003814697266
    5. '   ' → logprob: -17.500003814697266
    6. '	max' → logprob: -17.500003814697266
    7. '       ' → logprob: -17.875003814697266
    8. '.min' → logprob: -18.875003814697266
    9. ' max' → logprob: -19.625003814697266
    10. ').' → logprob: -20.000003814697266

Token 96: '_n' (ID: 2170)
  Prédit: '_n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_n' → logprob: 0.0
    2. '_' → logprob: -19.25
    3. 'n' → logprob: -19.25
    4. ' _' → logprob: -20.25
    5. '_k' → logprob: -20.625
    6. '_
' → logprob: -21.375
    7. '```' → logprob: -21.5
    8. '   ' → logprob: -22.125
    9. ')_' → logprob: -22.75
    10. '
' → logprob: -22.75

Token 97: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.030172519385814667
    2. '):
' → logprob: -3.65517258644104
    3. ' ):' → logprob: -5.780172348022461
    4. ')' → logprob: -8.155172348022461
    5. ' and' → logprob: -8.155172348022461
    6. ' ):
' → logprob: -8.780172348022461
    7. ':' → logprob: -10.780172348022461
    8. ' or' → logprob: -11.280172348022461
    9. 'and' → logprob: -11.905172348022461
    10. ' )' → logprob: -12.655172348022461

Token 98: '           ' (ID: 352)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.7222253680229187
    2. ':
' → logprob: -1.2222254276275635
    3. '           ' → logprob: -1.5972254276275635
    4. '       ' → logprob: -4.472225189208984
    5. ':return' → logprob: -5.847225189208984
    6. '
' → logprob: -6.347225189208984
    7. ' return' → logprob: -8.597225189208984
    8. '):
' → logprob: -8.972225189208984
    9. ' :
' → logprob: -8.972225189208984
    10. ' :' → logprob: -9.097225189208984

Token 99: ' raise' (ID: 9338)
  Prédit: ' raise'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' raise' → logprob: -0.2844642698764801
    2. '           ' → logprob: -1.7844642400741577
    3. '
' → logprob: -3.0344643592834473
    4. 'raise' (adapté à ' raise') → logprob: -4.159464359283447
    5. ' return' → logprob: -4.659464359283447
    6. '            ' → logprob: -6.159464359283447
    7. ' 
' → logprob: -6.409464359283447
    8. '               ' → logprob: -7.784464359283447
    9. '            
' → logprob: -8.409463882446289
    10. '        ' → logprob: -8.409463882446289

Token 100: ' Value' (ID: 9963)
  Prédit: ' Value'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Value' → logprob: -0.0788913294672966
    2. 'Value' → logprob: -2.5788912773132324
    3. '	Value' → logprob: -13.95389175415039
    4. ' ' → logprob: -14.82889175415039
    5. '(Value' → logprob: -16.45389175415039
    6. '_value' → logprob: -16.70389175415039
    7. '<Value' → logprob: -17.07889175415039
    8. '_Value' → logprob: -17.07889175415039
    9. '```' → logprob: -17.82889175415039
    10. '.Value' → logprob: -18.82889175415039

Token 101: 'Error' (ID: 2255)
  Prédit: 'Error'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Error' → logprob: -0.0013927347026765347
    2. 'rror' → logprob: -6.626392841339111
    3. 'r' → logprob: -10.126392364501953
    4. 'n' → logprob: -10.626392364501953
    5. 'Value' → logprob: -14.001392364501953
    6. 'ror' → logprob: -14.126392364501953
    7. 'f' → logprob: -15.001392364501953
    8. 'Er' → logprob: -15.751392364501953
    9. 'ption' → logprob: -16.501392364501953
    10. 'nd' → logprob: -17.626392364501953

Token 102: '(f' (ID: 1526)
  Prédit: '("'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.0033307569101452827
    2. '(' → logprob: -5.878330707550049
    3. '(f' → logprob: -7.628330707550049
    4. '('' → logprob: -10.878331184387207
    5. '(
' → logprob: -10.878331184387207
    6. '"' → logprob: -13.753331184387207
    7. '("'' → logprob: -15.253331184387207
    8. 'f' → logprob: -17.00333023071289
    9. '(

' → logprob: -17.25333023071289
    10. '()' → logprob: -17.37833023071289

Token 103: '"' (ID: 1)
  Prédit: '"'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.0023752963170409203
    2. ''' → logprob: -6.62737512588501
    3. '"N' → logprob: -7.75237512588501
    4. '("' → logprob: -8.502375602722168
    5. '"The' → logprob: -8.502375602722168
    6. 'n' → logprob: -9.502375602722168
    7. ''n' → logprob: -10.252375602722168
    8. 'f' → logprob: -10.502375602722168
    9. '(n' → logprob: -11.377375602722168
    10. '(' → logprob: -11.627375602722168

Token 104: 'Input' (ID: 3275)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.36987781524658203
    2. 'Input' → logprob: -1.619877815246582
    3. 'Number' → logprob: -2.994877815246582
    4. 'Value' → logprob: -3.119877815246582
    5. 'Invalid' → logprob: -5.244877815246582
    6. '"' → logprob: -5.369877815246582
    7. ' n' → logprob: -5.619877815246582
    8. 'Factor' → logprob: -6.119877815246582
    9. 'Integer' → logprob: -8.494877815246582
    10. ' Value' → logprob: -8.744877815246582

Token 105: ' {' (ID: 354)
  Prédit: ' must'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' must' → logprob: -0.6116639375686646
    2. ' n' → logprob: -0.8616639375686646
    3. 'n' → logprob: -4.111663818359375
    4. ' out' → logprob: -4.611663818359375
    5. ' should' → logprob: -5.736663818359375
    6. ' number' → logprob: -5.861663818359375
    7. 'must' → logprob: -6.611663818359375
    8. ' value' → logprob: -7.736663818359375
    9. 'out' → logprob: -8.361663818359375
    10. ' ' → logprob: -8.861663818359375

Token 106: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.03854607790708542
    2. ' n' → logprob: -3.288546085357666
    3. '{' → logprob: -8.288545608520508
    4. '}' → logprob: -8.663545608520508
    5. ' must' → logprob: -9.913545608520508
    6. ' {' → logprob: -11.038545608520508
    7. '	n' → logprob: -12.788545608520508
    8. ' }' → logprob: -13.038545608520508
    9. ' is' → logprob: -13.163545608520508
    10. ' ' → logprob: -13.413545608520508

Token 107: '}' (ID: 92)
  Prédit: '}'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '}' → logprob: -2.546478935983032e-05
    2. ' }' → logprob: -11.000025749206543
    3. ' is' → logprob: -13.000025749206543
    4. 'out' → logprob: -13.250025749206543
    5. 'must' → logprob: -13.500025749206543
    6. ')' → logprob: -13.875025749206543
    7. ' must' → logprob: -14.000025749206543
    8. 'is' → logprob: -14.625025749206543
    9. ' out' → logprob: -14.625025749206543
    10. '"' → logprob: -16.125024795532227

Token 108: ' out' (ID: 842)
  Prédit: ' is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' is' → logprob: -0.2361535131931305
    2. ' must' → logprob: -1.736153483390808
    3. ' out' → logprob: -3.7361536026000977
    4. 'is' → logprob: -5.486153602600098
    5. 'must' → logprob: -5.611153602600098
    6. 'out' → logprob: -6.861153602600098
    7. ' should' → logprob: -7.861153602600098
    8. ' exceeds' → logprob: -8.111153602600098
    9. ' not' → logprob: -8.486153602600098
    10. '}' → logprob: -8.486153602600098

Token 109: ' of' (ID: 328)
  Prédit: ' of'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' of' → logprob: -0.0008290443220175803
    2. 'of' → logprob: -7.125829219818115
    3. '_of' → logprob: -11.500828742980957
    4. ' ' → logprob: -12.250828742980957
    5. '    ' → logprob: -12.750828742980957
    6. '   ' → logprob: -13.250828742980957
    7. '  ' → logprob: -13.625828742980957
    8. '-of' → logprob: -14.125828742980957
    9. '	of' → logprob: -14.250828742980957
    10. '<|end|>' → logprob: -14.375828742980957

Token 110: ' bounds' (ID: 30227)
  Prédit: ' range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.45509350299835205
    2. 'range' → logprob: -1.080093502998352
    3. ' allowed' → logprob: -4.0800933837890625
    4. 'allowed' → logprob: -5.5800933837890625
    5. ' bounds' → logprob: -6.0800933837890625
    6. ' valid' → logprob: -6.5800933837890625
    7. 'bounds' → logprob: -7.7050933837890625
    8. ' acceptable' → logprob: -8.705093383789062
    9. ' expected' → logprob: -8.830093383789062
    10. 'expected' → logprob: -8.955093383789062

Token 111: ' (' (ID: 350)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.28191453218460083
    2. ' for' → logprob: -1.656914472579956
    3. ':' → logprob: -3.281914472579956
    4. ' (' → logprob: -4.656914710998535
    5. '(' → logprob: -5.906914710998535
    6. '.")' → logprob: -6.781914710998535
    7. ')' → logprob: -6.906914710998535
    8. 'for' → logprob: -7.406914710998535
    9. '")
' → logprob: -7.531914710998535
    10. '1' → logprob: -7.531914710998535

Token 112: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0007836606819182634
    2. ')' → logprob: -7.750783443450928
    3. ')")' → logprob: -8.500783920288086
    4. '[' → logprob: -10.625783920288086
    5. 'for' → logprob: -10.625783920288086
    6. '{' → logprob: -10.750783920288086
    7. ' ' → logprob: -11.000783920288086
    8. 'from' → logprob: -11.250783920288086
    9. ')")
' → logprob: -11.500783920288086
    10. ':' → logprob: -11.750783920288086

Token 113: ' to' (ID: 316)
  Prédit: ' to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' to' → logprob: -0.5458352565765381
    2. ' <=' → logprob: -1.795835256576538
    3. '<=' → logprob: -2.170835256576538
    4. ',' → logprob: -2.545835256576538
    5. '-' → logprob: -3.670835256576538
    6. '..' → logprob: -3.670835256576538
    7. ' through' → logprob: -6.045835494995117
    8. '{' → logprob: -6.170835494995117
    9. '...' → logprob: -6.545835494995117
    10. 'to' → logprob: -6.670835494995117

Token 114: ' {' (ID: 354)
  Prédit: ' {'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' {' → logprob: -0.015187371522188187
    2. '{' → logprob: -4.2651872634887695
    3. ' self' → logprob: -7.2651872634887695
    4. '20' → logprob: -8.64018726348877
    5. 'self' → logprob: -8.89018726348877
    6. ' ' → logprob: -11.89018726348877
    7. ' ' → logprob: -13.76518726348877
    8. ' max' → logprob: -14.01518726348877
    9. '```' → logprob: -16.140188217163086
    10. ' )' → logprob: -16.390188217163086

Token 115: 'self' (ID: 1156)
  Prédit: 'self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'self' → logprob: -0.02304665558040142
    2. '20' → logprob: -4.273046493530273
    3. '{' → logprob: -4.773046493530273
    4. ' self' → logprob: -8.023046493530273
    5. ')' → logprob: -11.148046493530273
    6. 'max' → logprob: -11.398046493530273
    7. ' ' → logprob: -12.398046493530273
    8. ' {' → logprob: -12.398046493530273
    9. '   ' → logprob: -12.523046493530273
    10. '       ' → logprob: -12.523046493530273

Token 116: '.max' (ID: 11883)
  Prédit: '.max'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.max' → logprob: -8.2994620242971e-06
    2. '.' → logprob: -12.250008583068848
    3. 'max' → logprob: -12.625008583068848
    4. ' .' → logprob: -16.75000762939453
    5. ').' → logprob: -17.37500762939453
    6. '	max' → logprob: -17.62500762939453
    7. '}.' → logprob: -18.12500762939453
    8. ' max' → logprob: -19.00000762939453
    9. '.maximum' → logprob: -19.12500762939453
    10. '   ' → logprob: -19.37500762939453

Token 117: '_n' (ID: 2170)
  Prédit: '_n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_n' → logprob: -4.320199877838604e-07
    2. 'n' → logprob: -14.875
    3. ')' → logprob: -18.75
    4. '_' → logprob: -19.375
    5. '```' → logprob: -19.625
    6. '_k' → logprob: -19.75
    7. 'N' → logprob: -19.875
    8. '}_' → logprob: -20.375
    9. '   ' → logprob: -20.5
    10. 's' → logprob: -20.625

Token 118: '})' (ID: 9263)
  Prédit: ')")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')")' → logprob: -0.01693643443286419
    2. ').' → logprob: -4.266936302185059
    3. ')' → logprob: -6.391936302185059
    4. ')")
' → logprob: -7.766936302185059
    5. '")' → logprob: -8.141936302185059
    6. ' )' → logprob: -8.641936302185059
    7. '}")' → logprob: -8.891936302185059
    8. ')").' → logprob: -10.391936302185059
    9. ')"' → logprob: -10.516936302185059
    10. '").' → logprob: -13.141936302185059

Token 119: '")
' (ID: 1896)
  Prédit: '")
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")
' → logprob: -0.059892747551202774
    2. '")' → logprob: -3.1848926544189453
    3. ')")
' → logprob: -4.309892654418945
    4. '.")
' → logprob: -6.434892654418945
    5. '       ' → logprob: -6.684892654418945
    6. ')")' → logprob: -8.309892654418945
    7. ')' → logprob: -9.434892654418945
    8. ')
' → logprob: -9.559892654418945
    9. '.")' → logprob: -10.684892654418945
    10. '")
' → logprob: -10.934892654418945

Token 120: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0009102715412154794
    2. ' if' → logprob: -7.50091028213501
    3. 'if' → logprob: -8.125909805297852
    4. '
' → logprob: -10.625909805297852
    5. '   ' → logprob: -10.625909805297852
    6. '        
' → logprob: -12.000909805297852
    7. '      ' → logprob: -13.375909805297852
    8. '```' → logprob: -13.375909805297852
    9. '           ' → logprob: -14.250909805297852
    10. '    
' → logprob: -14.500909805297852

Token 121: ' return' (ID: 622)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.19306695461273193
    2. '       ' → logprob: -2.3180670738220215
    3. ' if' → logprob: -2.5680670738220215
    4. '   ' → logprob: -7.8180670738220215
    5. '        
' → logprob: -11.943066596984863
    6. '
' → logprob: -12.318066596984863
    7. '	if' → logprob: -13.068066596984863
    8. '    
' → logprob: -13.193066596984863
    9. '      ' → logprob: -13.193066596984863
    10. '    ' → logprob: -13.443066596984863

Token 122: ' self' (ID: 1051)
  Prédit: 'self'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'self' → logprob: -0.28126609325408936
    2. ' self' → logprob: -1.4062660932540894
    3. '1' → logprob: -9.531266212463379
    4. '   ' → logprob: -10.781266212463379
    5. 'n' → logprob: -11.781266212463379
    6. ' ' → logprob: -12.031266212463379
    7. '(self' → logprob: -12.906266212463379
    8. '	self' → logprob: -13.156266212463379
    9. ' n' → logprob: -13.531266212463379
    10. '       ' → logprob: -14.031266212463379

Token 123: '._' (ID: 2697)
  Prédit: '.memo'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.memo' → logprob: -0.006412186194211245
    2. '.factor' → logprob: -5.256412029266357
    3. '.' → logprob: -7.256412029266357
    4. ' .' → logprob: -8.381412506103516
    5. '.fact' → logprob: -9.131412506103516
    6. '._' → logprob: -10.006412506103516
    7. '.mem' → logprob: -10.006412506103516
    8. '.fac' → logprob: -10.756412506103516
    9. '.calc' → logprob: -12.006412506103516
    10. '.memory' → logprob: -12.631412506103516

Token 124: 'factor' (ID: 73174)
  Prédit: 'factor'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'factor' → logprob: -0.042296793311834335
    2. 'compute' → logprob: -3.792296886444092
    3. '_factor' → logprob: -4.167296886444092
    4. 'fact' → logprob: -6.542296886444092
    5. 'calculate' → logprob: -6.667296886444092
    6. '_compute' → logprob: -7.667296886444092
    7. 'calc' → logprob: -9.667296409606934
    8. '_fact' → logprob: -10.042296409606934
    9. ' factorial' → logprob: -10.542296409606934
    10. 'cached' → logprob: -11.917296409606934

Token 125: 'ial' (ID: 563)
  Prédit: 'ial'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ial' → logprob: -0.00011212585377506912
    2. 'orial' → logprob: -9.875112533569336
    3. 'ialize' → logprob: -10.000112533569336
    4. 'al' → logprob: -12.125112533569336
    5. '       ' → logprob: -12.750112533569336
    6. 'ional' → logprob: -14.000112533569336
    7. '
' → logprob: -14.250112533569336
    8. '(' → logprob: -14.375112533569336
    9. '   ' → logprob: -14.500112533569336
    10. '_' → logprob: -14.625112533569336

Token 126: '_recursive' (ID: 175926)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0004275699320714921
    2. '(' → logprob: -8.00042724609375
    3. ' (' → logprob: -9.62542724609375
    4. '_recursive' → logprob: -10.75042724609375
    5. '_helper' → logprob: -13.75042724609375
    6. '_cache' → logprob: -13.87542724609375
    7. '(
' → logprob: -14.62542724609375
    8. '((' → logprob: -15.12542724609375
    9. '_cached' → logprob: -15.25042724609375
    10. '_(' → logprob: -15.50042724609375

Token 127: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.00023977462842594832
    2. '(' → logprob: -8.500239372253418
    3. ' (' → logprob: -10.250239372253418
    4. '(
' → logprob: -14.125239372253418
    5. ' ' → logprob: -17.500240325927734
    6. '((' → logprob: -17.750240325927734
    7. '   ' → logprob: -18.375240325927734
    8. '  ' → logprob: -19.125240325927734
    9. '(

' → logprob: -19.125240325927734
    10. '	' → logprob: -19.250240325927734

Token 128: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.07916968315839767
    2. ' )' → logprob: -2.579169750213623
    3. ')
' → logprob: -9.329169273376465
    4. ' )
' → logprob: -9.329169273376465
    5. ')n' → logprob: -9.954169273376465
    6. ')

' → logprob: -10.829169273376465
    7. ' )

' → logprob: -11.329169273376465
    8. '       ' → logprob: -11.454169273376465
    9. '   ' → logprob: -12.579169273376465
    10. ')`' → logprob: -12.704169273376465

Token 129: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.32631996273994446
    2. '
' → logprob: -1.326319932937622
    3. 'def' → logprob: -5.701320171356201
    4. '    
' → logprob: -5.701320171356201
    5. '<|end|>' → logprob: -5.951320171356201
    6. '  
' → logprob: -6.951320171356201
    7. ' ' → logprob: -7.201320171356201
    8. '  ' → logprob: -7.826320171356201
    9. '       ' → logprob: -7.951320171356201
    10. ' def' → logprob: -8.076319694519043

Token 130: ' def' (ID: 1056)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.355659157037735
    2. 'def' (adapté à ' def') → logprob: -1.6056591272354126
    3. '   ' → logprob: -2.480659246444702
    4. ' def' → logprob: -4.605659008026123
    5. '    
' → logprob: -6.105659008026123
    6. ' ' → logprob: -6.980659008026123
    7. '

' → logprob: -7.230659008026123
    8. '  
' → logprob: -7.480659008026123
    9. '  ' → logprob: -9.355659484863281
    10. '   
' → logprob: -9.480659484863281

Token 131: ' _' (ID: 1175)
  Prédit: '_factor'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_factor' → logprob: -0.023282868787646294
    2. ' _' → logprob: -3.773282766342163
    3. '_' → logprob: -10.773283004760742
    4. ' ' → logprob: -12.023283004760742
    5. ' factorial' → logprob: -12.148283004760742
    6. '_fact' → logprob: -13.773283004760742
    7. '_f' → logprob: -14.148283004760742
    8. '   ' → logprob: -14.398283004760742
    9. '  ' → logprob: -14.898283004760742
    10. '_FACTOR' → logprob: -14.898283004760742

Token 132: 'factor' (ID: 73174)
  Prédit: 'factor'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'factor' → logprob: -0.0009367127786390483
    2. '_factor' → logprob: -7.000936508178711
    3. ' factorial' → logprob: -10.750936508178711
    4. ' ' → logprob: -14.250936508178711
    5. ' factor' → logprob: -14.250936508178711
    6. '.factor' → logprob: -14.375936508178711
    7. '_' → logprob: -14.750936508178711
    8. 'fact' → logprob: -15.000936508178711
    9. '  ' → logprob: -15.375936508178711
    10. '   ' → logprob: -15.625936508178711

Token 133: 'ial' (ID: 563)
  Prédit: 'ial'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ial' → logprob: -0.08278167247772217
    2. 'al' → logprob: -2.8327817916870117
    3. 'orial' → logprob: -4.707781791687012
    4. '_factor' → logprob: -4.957781791687012
    5. 'atorial' → logprob: -6.457781791687012
    6. 'factor' → logprob: -6.707781791687012
    7. '_' → logprob: -7.957781791687012
    8. '       ' → logprob: -8.207781791687012
    9. 'actor' → logprob: -8.582781791687012
    10. '   ' → logprob: -8.582781791687012

Token 134: '_recursive' (ID: 175926)
  Prédit: '_recursive'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_recursive' → logprob: -1.2664456789934775e-06
    2. '_rec' → logprob: -14.000000953674316
    3. '_' → logprob: -15.750000953674316
    4. 'recursive' → logprob: -16.750001907348633
    5. '_iter' → logprob: -17.125001907348633
    6. ' _' → logprob: -17.250001907348633
    7. '(self' → logprob: -18.000001907348633
    8. '(' → logprob: -18.500001907348633
    9. '\' → logprob: -18.625001907348633
    10. '```' → logprob: -19.375001907348633

Token 135: '(self' (ID: 2402)
  Prédit: '(self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(self' → logprob: -0.00031043673516251147
    2. '(' → logprob: -8.375310897827148
    3. ' (' → logprob: -9.625310897827148
    4. '(n' → logprob: -11.625310897827148
    5. '(s' → logprob: -12.375310897827148
    6. 'self' → logprob: -15.500310897827148
    7. ' ' → logprob: -15.750310897827148
    8. '   ' → logprob: -16.00031089782715
    9. '(
' → logprob: -16.37531089782715
    10. ' self' → logprob: -17.25031089782715

Token 136: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.06436829268932343
    2. ' ,' → logprob: -2.81436824798584
    3. ',n' → logprob: -6.56436824798584
    4. 'self' → logprob: -7.68936824798584
    5. '(self' → logprob: -7.93936824798584
    6. '(n' → logprob: -9.81436824798584
    7. ',self' → logprob: -9.81436824798584
    8. 'n' → logprob: -10.06436824798584
    9. '       ' → logprob: -12.18936824798584
    10. ' self' → logprob: -12.18936824798584

Token 137: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.07895819842815399
    2. ' n' → logprob: -2.57895827293396
    3. 'self' → logprob: -9.828958511352539
    4. '   ' → logprob: -12.453958511352539
    5. ' self' → logprob: -12.703958511352539
    6. ')' → logprob: -13.078958511352539
    7. ' ' → logprob: -13.953958511352539
    8. ')n' → logprob: -14.078958511352539
    9. 'token' → logprob: -14.078958511352539
    10. '	n' → logprob: -14.578958511352539

Token 138: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.25396445393562317
    2. '):
' → logprob: -1.5039644241333008
    3. ' ):' → logprob: -6.503964424133301
    4. ' ):
' → logprob: -7.753964424133301
    5. ')' → logprob: -9.7539644241333
    6. '   ' → logprob: -10.7539644241333
    7. '):
' → logprob: -10.8789644241333
    8. ':' → logprob: -12.8789644241333
    9. ' )' → logprob: -12.8789644241333
    10. '       ' → logprob: -13.5039644241333

Token 139: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00455437321215868
    2. 'if' → logprob: -5.629554271697998
    3. ' if' → logprob: -7.004554271697998
    4. '   ' → logprob: -10.004554748535156
    5. '	if' → logprob: -14.129554748535156
    6. ' ' → logprob: -16.754554748535156
    7. '```' → logprob: -17.004554748535156
    8. '
' → logprob: -17.129554748535156
    9. 'If' → logprob: -17.379554748535156
    10. ',' → logprob: -17.629554748535156

Token 140: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.5788969993591309
    2. ' if' → logprob: -0.8288969993591309
    3. '       ' → logprob: -5.828896999359131
    4. '   ' → logprob: -11.578897476196289
    5. '	if' → logprob: -13.328897476196289
    6. ' ' → logprob: -14.328897476196289
    7. 'If' → logprob: -15.578897476196289
    8. '  ' → logprob: -17.20389747619629
    9. '
' → logprob: -17.45389747619629
    10. '```' → logprob: -17.95389747619629

Token 141: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.014163628220558167
    2. 'n' → logprob: -4.264163494110107
    3. '	n' → logprob: -16.014163970947266
    4. ')n' → logprob: -17.639163970947266
    5. '   ' → logprob: -18.264163970947266
    6. '_n' → logprob: -18.764163970947266
    7. ' н' → logprob: -18.889163970947266
    8. ',n' → logprob: -18.889163970947266
    9. ' ' → logprob: -18.889163970947266
    10. '(n' → logprob: -19.639163970947266

Token 142: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0358680784702301
    2. 'in' → logprob: -3.4108681678771973
    3. ' not' → logprob: -6.285868167877197
    4. ')' → logprob: -8.785867691040039
    5. ' ' → logprob: -9.535867691040039
    6. '==' → logprob: -9.910867691040039
    7. 'not' → logprob: -9.910867691040039
    8. ' ==' → logprob: -10.910867691040039
    9. ' )' → logprob: -12.035867691040039
    10. '   ' → logprob: -13.535867691040039

Token 143: ' self' (ID: 1051)
  Prédit: 'self'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'self' → logprob: -0.10021109133958817
    2. ' self' → logprob: -2.3502111434936523
    3. '       ' → logprob: -12.725211143493652
    4. '(self' → logprob: -14.225211143493652
    5. '	self' → logprob: -14.975211143493652
    6. '[self' → logprob: -15.975211143493652
    7. '           ' → logprob: -16.475210189819336
    8. '=self' → logprob: -16.600210189819336
    9. '   ' → logprob: -16.975210189819336
    10. 'Self' → logprob: -17.100210189819336

Token 144: '.memo' (ID: 161018)
  Prédit: '.memo'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.memo' → logprob: -0.00013250234769657254
    2. '.' → logprob: -9.00013256072998
    3. '.memory' → logprob: -12.75013256072998
    4. '.mem' → logprob: -12.75013256072998
    5. ' .' → logprob: -13.00013256072998
    6. 'memo' → logprob: -14.62513256072998
    7. '.mime' → logprob: -16.250131607055664
    8. '.cache' → logprob: -16.500131607055664
    9. '.mn' → logprob: -16.500131607055664
    10. '.mu' → logprob: -16.750131607055664

Token 145: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.018227552995085716
    2. ':
' → logprob: -4.018227577209473
    3. ':return' → logprob: -9.643227577209473
    4. '       ' → logprob: -11.768227577209473
    5. ' :' → logprob: -13.643227577209473
    6. '):
' → logprob: -13.768227577209473
    7. '):' → logprob: -13.768227577209473
    8. '           ' → logprob: -14.143227577209473
    9. '<|end|>' → logprob: -14.768227577209473
    10. ':

' → logprob: -15.518227577209473

Token 146: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0003436872211750597
    2. ':' → logprob: -8.625343322753906
    3. ':
' → logprob: -9.625343322753906
    4. '       ' → logprob: -10.250343322753906
    5. ' return' → logprob: -10.250343322753906
    6. 'return' → logprob: -10.875343322753906
    7. ':return' → logprob: -12.375343322753906
    8. '	       ' → logprob: -13.625343322753906
    9. '          ' → logprob: -13.875343322753906
    10. '   ' → logprob: -14.375343322753906

Token 147: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.39869633316993713
    2. 'return' (adapté à ' return') → logprob: -1.7736963033676147
    3. '           ' → logprob: -1.8986963033676147
    4. '       ' → logprob: -4.898696422576904
    5. '
' → logprob: -6.398696422576904
    6. '   ' → logprob: -9.148695945739746
    7. ':return' → logprob: -10.023695945739746
    8. '	return' → logprob: -10.773695945739746
    9. '               ' → logprob: -11.148695945739746
    10. ' ' → logprob: -11.773695945739746

Token 148: ' self' (ID: 1051)
  Prédit: 'self'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'self' → logprob: -0.10020678490400314
    2. ' self' → logprob: -2.3502068519592285
    3. '	self' → logprob: -16.47520637512207
    4. '[self' → logprob: -16.97520637512207
    5. '(self' → logprob: -17.22520637512207
    6. 'Self' → logprob: -18.60020637512207
    7. '1' → logprob: -18.97520637512207
    8. '
' → logprob: -19.35020637512207
    9. '=self' → logprob: -19.47520637512207
    10. ' ' → logprob: -19.60020637512207

Token 149: '.memo' (ID: 161018)
  Prédit: '.memo'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.memo' → logprob: -0.0002751598076429218
    2. '.' → logprob: -8.500275611877441
    3. ' .' → logprob: -9.750275611877441
    4. 'memo' → logprob: -12.000275611877441
    5. '.mem' → logprob: -12.500275611877441
    6. '.mn' → logprob: -14.250275611877441
    7. '.mu' → logprob: -14.500275611877441
    8. '.memory' → logprob: -14.500275611877441
    9. '.motor' → logprob: -15.000275611877441
    10. '.mime' → logprob: -15.125275611877441

Token 150: '[n' (ID: 15433)
  Prédit: '[n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[n' → logprob: -2.5776860184123507e-06
    2. 'n' → logprob: -13.00000286102295
    3. '[' → logprob: -15.25000286102295
    4. '
' → logprob: -19.250001907348633
    5. ' [' → logprob: -19.625001907348633
    6. '	n' → logprob: -19.750001907348633
    7. '[
' → logprob: -20.375001907348633
    8. '

' → logprob: -20.500001907348633
    9. ' n' → logprob: -20.625001907348633
    10. '[N' → logprob: -21.000001907348633

Token 151: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.04916270822286606
    2. ']
' → logprob: -3.0491626262664795
    3. '       ' → logprob: -7.549162864685059
    4. ' ]' → logprob: -10.799162864685059
    5. ']

' → logprob: -10.924162864685059
    6. ' ]
' → logprob: -12.424162864685059
    7. ']
' → logprob: -12.799162864685059
    8. '   ' → logprob: -13.549162864685059
    9. '
' → logprob: -14.049162864685059
    10. ')' → logprob: -14.924162864685059

Token 152: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00011987409379798919
    2. '
' → logprob: -9.625120162963867
    3. '        
' → logprob: -10.250120162963867
    4. '   ' → logprob: -11.750120162963867
    5. '    
' → logprob: -12.250120162963867
    6. 'n' → logprob: -12.625120162963867
    7. '  
' → logprob: -14.500120162963867
    8. '           ' → logprob: -14.750120162963867
    9. '	' → logprob: -15.125120162963867
    10. '      ' → logprob: -15.750120162963867

Token 153: ' self' (ID: 1051)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.26201626658439636
    2. '       ' → logprob: -2.0120162963867188
    3. 'self' (adapté à ' self') → logprob: -2.7620162963867188
    4. ' result' → logprob: -4.137016296386719
    5. 'res' → logprob: -4.387016296386719
    6. ' self' → logprob: -5.762016296386719
    7. 'value' → logprob: -6.512016296386719
    8. ' res' → logprob: -8.262016296386719
    9. 'fact' → logprob: -9.137016296386719
    10. 'factor' → logprob: -9.512016296386719

Token 154: '.memo' (ID: 161018)
  Prédit: '.memo'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.memo' → logprob: -0.0008603655151091516
    2. '.' → logprob: -7.125860214233398
    3. '.mem' → logprob: -10.375860214233398
    4. ' .' → logprob: -10.875860214233398
    5. '.memory' → logprob: -13.375860214233398
    6. 'memo' → logprob: -13.625860214233398
    7. '._' → logprob: -14.250860214233398
    8. '.mu' → logprob: -14.500860214233398
    9. '.factor' → logprob: -14.750860214233398
    10. '.mn' → logprob: -14.875860214233398

Token 155: '[n' (ID: 15433)
  Prédit: '[n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[n' → logprob: -2.7014437364414334e-05
    2. '[' → logprob: -10.62502670288086
    3. ' [' → logprob: -13.87502670288086
    4. '
' → logprob: -14.87502670288086
    5. '[
' → logprob: -15.37502670288086
    6. '[self' → logprob: -15.37502670288086
    7. '

' → logprob: -15.50002670288086
    8. '[N' → logprob: -15.75002670288086
    9. '[f' → logprob: -16.50002670288086
    10. 'n' → logprob: -16.75002670288086

Token 156: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0003839597338810563
    2. ' ]' → logprob: -8.000384330749512
    3. ']=' → logprob: -10.125384330749512
    4. '-' → logprob: -12.375384330749512
    5. ' -' → logprob: -12.750384330749512
    6. ' ' → logprob: -14.625384330749512
    7. '=' → logprob: -15.000384330749512
    8. ' =' → logprob: -15.875384330749512
    9. ' *' → logprob: -16.000383377075195
    10. '   ' → logprob: -16.250383377075195

Token 157: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.10020806640386581
    2. ' =' → logprob: -2.350208044052124
    3. ']=' → logprob: -14.850208282470703
    4. '=f' → logprob: -14.975208282470703
    5. '=self' → logprob: -15.600208282470703
    6. ')=' → logprob: -16.100208282470703
    7. '=n' → logprob: -16.225208282470703
    8. ']' → logprob: -16.475208282470703
    9. '=
' → logprob: -16.475208282470703
    10. '=

' → logprob: -17.100208282470703

Token 158: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.38693490624427795
    2. ' n' → logprob: -1.1369348764419556
    3. 'self' → logprob: -10.011935234069824
    4. ' self' → logprob: -11.136935234069824
    5. '	n' → logprob: -12.386935234069824
    6. '   ' → logprob: -15.761935234069824
    7. '_n' → logprob: -16.136934280395508
    8. ' ' → logprob: -17.386934280395508
    9. '(n' → logprob: -17.511934280395508
    10. '
' → logprob: -17.636934280395508

Token 159: ' *' (ID: 425)
  Prédit: ' *'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.07889077812433243
    2. '*' → logprob: -2.578890800476074
    3. '*self' → logprob: -13.953890800476074
    4. ' ' → logprob: -16.078889846801758
    5. ' ' → logprob: -16.453889846801758
    6. '**' → logprob: -18.328889846801758
    7. ' *
' → logprob: -18.828889846801758
    8. '*object' → logprob: -19.203889846801758
    9. 'self' → logprob: -20.578889846801758
    10. '```' → logprob: -20.703889846801758

Token 160: ' self' (ID: 1051)
  Prédit: 'self'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'self' → logprob: -0.014164102263748646
    2. ' self' → logprob: -4.264163970947266
    3. '(self' → logprob: -14.389163970947266
    4. '	self' → logprob: -17.514163970947266
    5. '       ' → logprob: -18.389163970947266
    6. '[self' → logprob: -18.389163970947266
    7. '   ' → logprob: -19.264163970947266
    8. '
' → logprob: -19.514163970947266
    9. '*self' → logprob: -20.264163970947266
    10. '=self' → logprob: -20.639163970947266

Token 161: '._' (ID: 2697)
  Prédit: '._'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '._' → logprob: -0.008730157278478146
    2. '_factor' → logprob: -4.758729934692383
    3. '.factor' → logprob: -9.133729934692383
    4. '.' → logprob: -12.258729934692383
    5. ' .' → logprob: -13.633729934692383
    6. ' _' → logprob: -14.258729934692383
    7. '_.' → logprob: -15.383729934692383
    8. '   ' → logprob: -15.883729934692383
    9. '_FACTOR' → logprob: -16.133729934692383
    10. '..' → logprob: -16.133729934692383

Token 162: 'factor' (ID: 73174)
  Prédit: 'factor'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'factor' → logprob: -0.0011792739387601614
    2. '_factor' → logprob: -6.751179218292236
    3. ' factorial' → logprob: -12.126179695129395
    4. '.factor' → logprob: -13.126179695129395
    5. '-factor' → logprob: -14.126179695129395
    6. 'fact' → logprob: -14.376179695129395
    7. ' factor' → logprob: -15.501179695129395
    8. 'f' → logprob: -17.251178741455078
    9. 'Factor' → logprob: -17.501178741455078
    10. ' фактор' → logprob: -18.126178741455078

Token 163: 'ial' (ID: 563)
  Prédit: 'al'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'al' → logprob: -0.28193873167037964
    2. 'ial' → logprob: -1.4069387912750244
    3. 'orial' → logprob: -8.281938552856445
    4. 'atorial' → logprob: -9.031938552856445
    5. 'tal' → logprob: -9.156938552856445
    6. 'ional' → logprob: -9.281938552856445
    7. 'onal' → logprob: -9.406938552856445
    8. 'cial' → logprob: -10.781938552856445
    9. 't' → logprob: -11.031938552856445
    10. '_to' → logprob: -11.156938552856445

Token 164: '_recursive' (ID: 175926)
  Prédit: '_recursive'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_recursive' → logprob: -1.6240566083070007e-06
    2. 'recursive' → logprob: -13.750001907348633
    3. '(n' → logprob: -15.750001907348633
    4. 'Recursive' → logprob: -16.500001907348633
    5. '_factor' → logprob: -17.125001907348633
    6. 'n' → logprob: -17.375001907348633
    7. 's' → logprob: -17.875001907348633
    8. '```' → logprob: -18.125001907348633
    9. '       ' → logprob: -18.500001907348633
    10. 'e' → logprob: -19.000001907348633

Token 165: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.00026765360962599516
    2. '(' → logprob: -8.25026798248291
    3. ' (' → logprob: -12.12526798248291
    4. '(
' → logprob: -14.12526798248291
    5. '((' → logprob: -16.250267028808594
    6. 'n' → logprob: -17.000267028808594
    7. '(noun' → logprob: -18.500267028808594
    8. '(s' → logprob: -18.750267028808594
    9. '<|end|>' → logprob: -19.125267028808594
    10. '(int' → logprob: -19.250267028808594

Token 166: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.3240180015563965
    2. '(n' → logprob: -1.3240180015563965
    3. ' -' → logprob: -4.5740180015563965
    4. 'n' → logprob: -8.574018478393555
    5. '(' → logprob: -8.824018478393555
    6. ' (' → logprob: -10.199018478393555
    7. ' n' → logprob: -12.449018478393555
    8. '1' → logprob: -13.699018478393555
    9. '(
' → logprob: -13.699018478393555
    10. ',' → logprob: -13.949018478393555

Token 167: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -6.980854959692806e-05
    2. ' ' → logprob: -9.625069618225098
    3. '   ' → logprob: -12.625069618225098
    4. '```' → logprob: -15.500069618225098
    5. '       ' → logprob: -16.500070571899414
    6. ')' → logprob: -16.625070571899414
    7. '    ' → logprob: -17.625070571899414
    8. '  ' → logprob: -18.125070571899414
    9. '<|end|>' → logprob: -18.937570571899414
    10. ',' → logprob: -19.250070571899414

Token 168: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -8.061054359131958e-06
    2. ' ' → logprob: -11.750007629394531
    3. '   ' → logprob: -16.50000762939453
    4. '```' → logprob: -17.87500762939453
    5. ')' → logprob: -18.87500762939453
    6. '  ' → logprob: -19.12500762939453
    7. '
' → logprob: -19.75000762939453
    8. '       ' → logprob: -19.87500762939453
    9. '    ' → logprob: -20.37500762939453
    10. '     ' → logprob: -20.81250762939453

Token 169: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.005273957271128893
    2. ')
' → logprob: -5.255273818969727
    3. '       ' → logprob: -10.505273818969727
    4. ')return' → logprob: -11.755273818969727
    5. ' )' → logprob: -12.630273818969727
    6. ')
' → logprob: -14.130273818969727
    7. '<|end|>' → logprob: -15.380273818969727
    8. ')

' → logprob: -16.005273818969727
    9. ' )
' → logprob: -16.130273818969727
    10. '   ' → logprob: -16.130273818969727

Token 170: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0043012225069105625
    2. 'return' → logprob: -5.504301071166992
    3. ' return' → logprob: -8.504301071166992
    4. '   ' → logprob: -11.254301071166992
    5. '	return' → logprob: -12.504301071166992
    6. '	' → logprob: -13.379301071166992
    7. '
' → logprob: -13.879301071166992
    8. '      ' → logprob: -15.004301071166992
    9. ' ' → logprob: -16.129301071166992
    10. '           ' → logprob: -16.129301071166992

Token 171: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.13469670712947845
    2. '       ' → logprob: -2.3846967220306396
    3. ' return' → logprob: -3.3846967220306396
    4. '   ' → logprob: -11.509696960449219
    5. '	return' → logprob: -12.634696960449219
    6. ' ' → logprob: -14.509696960449219
    7. ':return' → logprob: -15.634696960449219
    8. '
' → logprob: -16.25969696044922
    9. '{return' → logprob: -16.75969696044922
    10. 'eturn' → logprob: -17.38469696044922

Token 172: ' self' (ID: 1051)
  Prédit: 'self'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'self' → logprob: -0.0004306692280806601
    2. ' self' → logprob: -7.750430583953857
    3. '	self' → logprob: -18.500431060791016
    4. '       ' → logprob: -19.000431060791016
    5. '(self' → logprob: -19.000431060791016
    6. '   ' → logprob: -20.750431060791016
    7. '[self' → logprob: -20.875431060791016
    8. 'Self' → logprob: -21.125431060791016
    9. '$self' → logprob: -22.125431060791016
    10. ' ' → logprob: -22.500431060791016

Token 173: '.memo' (ID: 161018)
  Prédit: '.memo'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.memo' → logprob: -1.7835754988482222e-05
    2. '.' → logprob: -11.625018119812012
    3. 'memo' → logprob: -12.000018119812012
    4. '.mem' → logprob: -13.500018119812012
    5. '.memory' → logprob: -14.125018119812012
    6. ' .' → logprob: -14.625018119812012
    7. '.motor' → logprob: -17.125017166137695
    8. '.mime' → logprob: -17.250017166137695
    9. '.mn' → logprob: -17.625017166137695
    10. ' memo' → logprob: -18.500017166137695

Token 174: '[n' (ID: 15433)
  Prédit: '[n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[n' → logprob: -1.0683535037969705e-05
    2. '[' → logprob: -11.62501049041748
    3. 'n' → logprob: -13.37501049041748
    4. '[m' → logprob: -17.375011444091797
    5. '<|end|>' → logprob: -17.500011444091797
    6. '	n' → logprob: -18.125011444091797
    7. ' [' → logprob: -18.125011444091797
    8. '[N' → logprob: -18.375011444091797
    9. '[num' → logprob: -18.750011444091797
    10. '[
' → logprob: -19.500011444091797

Token 175: ']


' (ID: 52447)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 176: 'class' (ID: 1444)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.3783014118671417
    2. 'class' → logprob: -1.8783013820648193
    3. 'def' → logprob: -2.0033013820648193
    4. 'parser' → logprob: -3.8783013820648193
    5. 'input' → logprob: -5.253301620483398
    6. 'import' → logprob: -6.878301620483398
    7. '#' → logprob: -8.753301620483398
    8. 'source' → logprob: -9.128301620483398
    9. 'from' → logprob: -11.753301620483398
    10. ' if' → logprob: -12.878301620483398

Token 177: ' Output' (ID: 18315)
  Prédit: 'Factor'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Factor' → logprob: -1.0093662738800049
    2. ' Factor' → logprob: -1.6343662738800049
    3. 'Output' → logprob: -1.7593662738800049
    4. 'Input' → logprob: -2.759366273880005
    5. 'Main' → logprob: -2.884366273880005
    6. 'Result' → logprob: -3.759366273880005
    7. ' Output' → logprob: -3.884366273880005
    8. 'Prime' → logprob: -4.259366035461426
    9. ' Input' → logprob: -4.259366035461426
    10. 'Program' → logprob: -4.759366035461426

Token 178: 'Handler' (ID: 4139)
  Prédit: 'Writer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Writer' → logprob: -0.1281132698059082
    2. 'Printer' → logprob: -2.253113269805908
    3. 'Handler' → logprob: -4.253113269805908
    4. 'Formatter' → logprob: -7.878113269805908
    5. 'ter' → logprob: -8.50311279296875
    6. 'Renderer' → logprob: -9.25311279296875
    7. 'Manager' → logprob: -9.50311279296875
    8. 'Generator' → logprob: -9.62811279296875
    9. 'Processor' → logprob: -10.62811279296875
    10. ':' → logprob: -10.62811279296875

Token 179: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.062024593353271484
    2. ':
' → logprob: -2.8120245933532715
    3. ' :' → logprob: -10.18702507019043
    4. ' :
' → logprob: -11.18702507019043
    5. ':

' → logprob: -13.43702507019043
    6. ':def' → logprob: -13.43702507019043
    7. ':
' → logprob: -14.06202507019043
    8. '):
' → logprob: -14.56202507019043
    9. '(object' → logprob: -15.56202507019043
    10. '   ' → logprob: -15.56202507019043

Token 180: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00028493450372479856
    2. 'def' → logprob: -8.500285148620605
    3. ' def' → logprob: -9.500285148620605
    4. ':' → logprob: -12.000285148620605
    5. 'class' → logprob: -15.250285148620605
    6. ':
' → logprob: -16.00028419494629
    7. ':def' → logprob: -16.75028419494629
    8. '   ' → logprob: -17.50028419494629
    9. '```' → logprob: -18.00028419494629
    10. '	def' → logprob: -18.37528419494629

Token 181: ' def' (ID: 1056)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' (adapté à ' def') → logprob: -0.08027835935354233
    2. ' def' → logprob: -2.5802783966064453
    3. '   ' → logprob: -6.580278396606445
    4. '	def' → logprob: -16.455278396606445
    5. ' ' → logprob: -16.955278396606445
    6. '  ' → logprob: -18.080278396606445
    7. '@' → logprob: -18.455278396606445
    8. ':def' → logprob: -18.830278396606445
    9. 'class' → logprob: -19.330278396606445
    10. '```' → logprob: -19.455278396606445

Token 182: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.030147653073072433
    2. '__' → logprob: -4.405147552490234
    3. ' def' → logprob: -4.405147552490234
    4. 'init' → logprob: -5.780147552490234
    5. 'def' → logprob: -6.780147552490234
    6. ' init' → logprob: -7.280147552490234
    7. ' print' → logprob: -8.530147552490234
    8. ' write' → logprob: -9.780147552490234
    9. 'print' → logprob: -10.155147552490234
    10. '_init' → logprob: -10.405147552490234

Token 183: 'init' (ID: 3287)
  Prédit: 'init'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'init' → logprob: -2.451116051815916e-05
    2. 'def' → logprob: -11.000024795532227
    3. ' init' → logprob: -12.375024795532227
    4. 'ini' → logprob: -13.125024795532227
    5. ' def' → logprob: -14.500024795532227
    6. 'call' → logprob: -15.375024795532227
    7. '   ' → logprob: -15.500024795532227
    8. '_init' → logprob: -15.500024795532227
    9. 'new' → logprob: -16.125024795532227
    10. '  ' → logprob: -16.250024795532227

Token 184: '__(' (ID: 8241)
  Prédit: '__('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__(' → logprob: -0.02036435529589653
    2. '(self' → logprob: -4.145364284515381
    3. ' (' → logprob: -6.020364284515381
    4. '__' → logprob: -7.395364284515381
    5. '(' → logprob: -7.520364284515381
    6. '_(' → logprob: -7.645364284515381
    7. '__(
' → logprob: -9.020364761352539
    8. 'self' → logprob: -10.395364761352539
    9. ' ' → logprob: -10.395364761352539
    10. '_' → logprob: -10.520364761352539

Token 185: 'self' (ID: 1156)
  Prédit: 'self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'self' → logprob: -0.00019245444855187088
    2. ' self' → logprob: -9.000192642211914
    3. ')' → logprob: -9.750192642211914
    4. '   ' → logprob: -12.000192642211914
    5. '
' → logprob: -13.750192642211914
    6. '):
' → logprob: -13.750192642211914
    7. '  ' → logprob: -14.125192642211914
    8. ',' → logprob: -15.000192642211914
    9. '(self' → logprob: -15.250192642211914
    10. 'output' → logprob: -15.375192642211914

Token 186: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00029470553272403777
    2. 'self' → logprob: -8.37529468536377
    3. ' ,' → logprob: -9.87529468536377
    4. ',self' → logprob: -11.87529468536377
    5. '   ' → logprob: -13.50029468536377
    6. 'source' → logprob: -13.87529468536377
    7. ')' → logprob: -14.00029468536377
    8. ' self' → logprob: -14.50029468536377
    9. '):' → logprob: -14.50029468536377
    10. ' ' → logprob: -14.87529468536377

Token 187: ' destination' (ID: 13330)
  Prédit: 'destination'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'destination' → logprob: -0.3509979546070099
    2. 'output' → logprob: -1.3509979248046875
    3. 'target' → logprob: -4.4759979248046875
    4. ' destination' → logprob: -4.4759979248046875
    5. 'dest' → logprob: -4.9759979248046875
    6. ' output' → logprob: -5.7259979248046875
    7. 'stream' → logprob: -6.4759979248046875
    8. 'source' → logprob: -6.6009979248046875
    9. 'sink' → logprob: -6.9759979248046875
    10. 'writer' → logprob: -9.350997924804688

Token 188: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.1802416890859604
    2. '):
' → logprob: -1.8052417039871216
    3. ',' → logprob: -7.930241584777832
    4. ' ):' → logprob: -9.805241584777832
    5. ')' → logprob: -10.555241584777832
    6. '   ' → logprob: -10.680241584777832
    7. '):
' → logprob: -11.055241584777832
    8. ':' → logprob: -12.180241584777832
    9. ' ):
' → logprob: -12.555241584777832
    10. '=None' → logprob: -12.930241584777832

Token 189: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -3.9888433093437925e-05
    2. 'self' → logprob: -10.250040054321289
    3. ' self' → logprob: -12.625040054321289
    4. '   ' → logprob: -14.000040054321289
    5. '<|end|>' → logprob: -16.12504005432129
    6. '	self' → logprob: -16.87504005432129
    7. 'def' → logprob: -17.12504005432129
    8. '           ' → logprob: -17.37504005432129
    9. ',' → logprob: -17.75004005432129
    10. '(self' → logprob: -17.87504005432129

Token 190: ' self' (ID: 1051)
  Prédit: 'self'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'self' (adapté à ' self') → logprob: -0.0013427316443994641
    2. '       ' → logprob: -7.0013427734375
    3. ' self' → logprob: -7.7513427734375
    4. '   ' → logprob: -13.8763427734375
    5. '	self' → logprob: -16.3763427734375
    6. '           ' → logprob: -18.8763427734375
    7. '(self' → logprob: -19.1263427734375
    8. '      ' → logprob: -19.1263427734375
    9. '        ' → logprob: -19.6263427734375
    10. '     ' → logprob: -19.6263427734375

Token 191: '.destination' (ID: 79702)
  Prédit: '.destination'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.destination' → logprob: -0.0015649731503799558
    2. 'destination' → logprob: -6.501564979553223
    3. '.' → logprob: -10.126564979553223
    4. '.dest' → logprob: -11.501564979553223
    5. ' .' → logprob: -11.501564979553223
    6. ' destination' → logprob: -13.751564979553223
    7. '(destination' → logprob: -14.876564979553223
    8. '.d' → logprob: -15.501564979553223
    9. '=' → logprob: -16.001564025878906
    10. '_destination' → logprob: -16.001564025878906

Token 192: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.11307273805141449
    2. '=' → logprob: -2.238072633743286
    3. '.write' → logprob: -8.363072395324707
    4. '   ' → logprob: -11.613072395324707
    5. ' ' → logprob: -12.238072395324707
    6. '=self' → logprob: -14.113072395324707
    7. '    ' → logprob: -14.363072395324707
    8. '.' → logprob: -15.113072395324707
    9. ' .' → logprob: -15.113072395324707
    10. '.readline' → logprob: -15.238072395324707

Token 193: ' destination' (ID: 13330)
  Prédit: 'destination'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'destination' → logprob: -0.02975129522383213
    2. ' destination' → logprob: -3.5297513008117676
    3. '(destination' → logprob: -14.27975082397461
    4. ' ' → logprob: -16.27975082397461
    5. 'dest' → logprob: -16.90475082397461
    6. '   ' → logprob: -17.02975082397461
    7. '.destination' → logprob: -17.65475082397461
    8. '_destination' → logprob: -17.77975082397461
    9. '  ' → logprob: -18.90475082397461
    10. '    ' → logprob: -19.27975082397461

Token 194: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.09741785377264023
    2. '   ' → logprob: -2.5974178314208984
    3. '    
' → logprob: -4.222417831420898
    4. 'def' → logprob: -6.722417831420898
    5. '<|end|>' → logprob: -6.722417831420898
    6. ' 
' → logprob: -7.222417831420898
    7. '  
' → logprob: -8.347417831420898
    8. '        
' → logprob: -9.347417831420898
    9. ' def' → logprob: -9.347417831420898
    10. '<|end|>' → logprob: -9.972417831420898

Token 195: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.15926383435726166
    2. 'def' → logprob: -2.409263849258423
    3. '
' → logprob: -2.909263849258423
    4. '    
' → logprob: -6.159263610839844
    5. ' def' → logprob: -7.409263610839844
    6. '<|end|>' → logprob: -10.534263610839844
    7. ' 
' → logprob: -10.909263610839844
    8. '  
' → logprob: -10.909263610839844
    9. '        
' → logprob: -11.034263610839844
    10. '	def' → logprob: -11.409263610839844

Token 196: ' def' (ID: 1056)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' (adapté à ' def') → logprob: -1.0206720617134124e-05
    2. ' def' → logprob: -11.50001049041748
    3. '   ' → logprob: -17.625009536743164
    4. '
' → logprob: -19.000009536743164
    5. '	def' → logprob: -20.250009536743164
    6. 'de' → logprob: -21.750009536743164
    7. '```' → logprob: -22.000009536743164
    8. '    
' → logprob: -22.125009536743164
    9. ' ' → logprob: -22.500009536743164
    10. 'Def' → logprob: -22.625009536743164

Token 197: ' print' (ID: 2123)
  Prédit: 'write'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'write' → logprob: -0.0040987045504152775
    2. ' write' → logprob: -5.504098892211914
    3. 'print' → logprob: -11.129098892211914
    4. 'w' → logprob: -12.879098892211914
    5. '.write' → logprob: -13.004098892211914
    6. ' writ' → logprob: -14.379098892211914
    7. '	write' → logprob: -16.504098892211914
    8. 'def' → logprob: -17.254098892211914
    9. '_write' → logprob: -17.379098892211914
    10. ' print' → logprob: -17.379098892211914

Token 198: '_result' (ID: 11623)
  Prédit: '_factor'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_factor' → logprob: -0.19406744837760925
    2. '_line' → logprob: -2.3190674781799316
    3. '(' → logprob: -2.9440674781799316
    4. '_' → logprob: -4.444067478179932
    5. '_result' → logprob: -4.944067478179932
    6. '_fact' → logprob: -6.694067478179932
    7. '_f' → logprob: -7.319067478179932
    8. '_number' → logprob: -7.319067478179932
    9. '(f' → logprob: -7.694067478179932
    10. 'f' → logprob: -7.694067478179932

Token 199: '(self' (ID: 2402)
  Prédit: '(self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(self' → logprob: -0.0002802855451591313
    2. '(' → logprob: -8.250280380249023
    3. ' (' → logprob: -11.000280380249023
    4. '(s' → logprob: -13.125280380249023
    5. '(
' → logprob: -16.750280380249023
    6. '   ' → logprob: -17.000280380249023
    7. 'self' → logprob: -17.250280380249023
    8. '(sel' → logprob: -17.250280380249023
    9. ' ' → logprob: -18.750280380249023
    10. 's' → logprob: -19.000280380249023

Token 200: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.000558512459974736
    2. ' ,' → logprob: -7.500558376312256
    3. ',result' → logprob: -12.125558853149414
    4. ',value' → logprob: -15.625558853149414
    5. ',input' → logprob: -19.125558853149414
    6. ',n' → logprob: -19.250558853149414
    7. ',
' → logprob: -19.625558853149414
    8. ',message' → logprob: -19.625558853149414
    9. ',res' → logprob: -19.875558853149414
    10. ',line' → logprob: -20.000558853149414

Token 201: ' result' (ID: 1534)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.09284380078315735
    2. ' result' → logprob: -2.592843770980835
    3. 'value' → logprob: -4.467844009399414
    4. ' value' → logprob: -6.342844009399414
    5. 'message' → logprob: -7.592844009399414
    6. ' message' → logprob: -9.467844009399414
    7. 'text' → logprob: -10.467844009399414
    8. 'n' → logprob: -11.967844009399414
    9. ' n' → logprob: -13.092844009399414
    10. ' text' → logprob: -13.092844009399414

Token 202: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.1285974532365799
    2. '):
' → logprob: -2.1285974979400635
    3. ',' → logprob: -6.503597259521484
    4. ' ):' → logprob: -9.003597259521484
    5. '   ' → logprob: -11.128597259521484
    6. '):
' → logprob: -11.628597259521484
    7. ' ):
' → logprob: -11.878597259521484
    8. '       ' → logprob: -12.003597259521484
    9. ')' → logprob: -12.003597259521484
    10. ':' → logprob: -13.128597259521484

Token 203: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.003509676083922386
    2. 'self' → logprob: -6.128509521484375
    3. ' self' → logprob: -6.628509521484375
    4. 'print' → logprob: -14.753509521484375
    5. '           ' → logprob: -15.003509521484375
    6. '(self' → logprob: -15.128509521484375
    7. '```' → logprob: -15.753509521484375
    8. '   ' → logprob: -16.128509521484375
    9. ' print' → logprob: -16.628509521484375
    10. '      ' → logprob: -17.128509521484375

Token 204: ' self' (ID: 1051)
  Prédit: 'self'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'self' (adapté à ' self') → logprob: -0.015348320826888084
    2. ' self' → logprob: -4.515348434448242
    3. 'print' → logprob: -5.515348434448242
    4. '       ' → logprob: -8.390348434448242
    5. ' print' → logprob: -10.140348434448242
    6. '           ' → logprob: -15.765348434448242
    7. '   ' → logprob: -16.390348434448242
    8. '(self' → logprob: -17.140348434448242
    9. 'for' → logprob: -18.015348434448242
    10. ' ' → logprob: -18.015348434448242

Token 205: '.destination' (ID: 79702)
  Prédit: '.destination'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.destination' → logprob: -0.0002390594017924741
    2. '.' → logprob: -8.625239372253418
    3. ' .' → logprob: -10.250239372253418
    4. 'destination' → logprob: -10.750239372253418
    5. '.dest' → logprob: -13.500239372253418
    6. '.source' → logprob: -14.625239372253418
    7. '   ' → logprob: -15.375239372253418
    8. '.output' → logprob: -16.1252384185791
    9. '```' → logprob: -16.7502384185791
    10. ' destination' → logprob: -16.8752384185791

Token 206: '.write' (ID: 6765)
  Prédit: '.write'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.write' → logprob: -3.4121114822482923e-06
    2. '.' → logprob: -13.250003814697266
    3. 'write' → logprob: -13.500003814697266
    4. '.w' → logprob: -16.125003814697266
    5. ' .' → logprob: -17.375003814697266
    6. '.append' → logprob: -19.125003814697266
    7. '.Write' → logprob: -19.375003814697266
    8. '.writerow' → logprob: -19.375003814697266
    9. ' write' → logprob: -20.000003814697266
    10. '.println' → logprob: -20.875003814697266

Token 207: '(f' (ID: 1526)
  Prédit: '(f'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(f' → logprob: -0.0789804458618164
    2. '(str' → logprob: -2.5789804458618164
    3. '(' → logprob: -9.328980445861816
    4. 'f' → logprob: -13.328980445861816
    5. '(result' → logprob: -15.203980445861816
    6. ' f' → logprob: -17.5789794921875
    7. '(F' → logprob: -18.4539794921875
    8. '(
' → logprob: -18.5789794921875
    9. '((' → logprob: -18.5789794921875
    10. 'str' → logprob: -18.7039794921875

Token 208: '"{' (ID: 27510)
  Prédit: '"{'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"{' → logprob: -0.00011403311509639025
    2. '"' → logprob: -9.250114440917969
    3. ''{' → logprob: -11.250114440917969
    4. '{' → logprob: -12.500114440917969
    5. '"The' → logprob: -14.750114440917969
    6. 'f' → logprob: -15.125114440917969
    7. 'Result' → logprob: -15.125114440917969
    8. ' "{' → logprob: -16.87511444091797
    9. 'result' → logprob: -17.12511444091797
    10. '("{' → logprob: -17.50011444091797

Token 209: 'result' (ID: 2521)
  Prédit: 'result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -1.306760805164231e-05
    2. ' result' → logprob: -11.25001335144043
    3. ' ' → logprob: -19.62501335144043
    4. '(result' → logprob: -20.00001335144043
    5. 'res' → logprob: -20.12501335144043
    6. '   ' → logprob: -20.12501335144043
    7. 'int' → logprob: -20.37501335144043
    8. '{' → logprob: -20.50001335144043
    9. '  ' → logprob: -21.50001335144043
    10. '}' → logprob: -21.50001335144043

Token 210: '}\' (ID: 21170)
  Prédit: '}\'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '}\' → logprob: -6.146429223008454e-05
    2. '\n' → logprob: -9.75006103515625
    3. '}' → logprob: -13.50006103515625
    4. '}
' → logprob: -13.87506103515625
    5. '}")' → logprob: -14.50006103515625
    6. ' }\' → logprob: -15.62506103515625
    7. ')\' → logprob: -16.62506103515625
    8. '
' → logprob: -17.50006103515625
    9. '}\\' → logprob: -17.87506103515625
    10. '}")
' → logprob: -18.62506103515625

Token 211: 'n' (ID: 77)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.001144026406109333
    2. '}\' → logprob: -7.251143932342529
    3. 'n' → logprob: -7.751143932342529
    4. '"\' → logprob: -13.001144409179688
    5. ' \' → logprob: -14.376144409179688
    6. ')\' → logprob: -15.251144409179688
    7. '
' → logprob: -15.251144409179688
    8. '\' → logprob: -15.626144409179688
    9. '`\' → logprob: -16.376144409179688
    10. '\\' → logprob: -16.626144409179688

Token 212: '")


' (ID: 57903)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '")' → logprob: -0.00011355629976605996
    2. ')' → logprob: -9.500113487243652
    3. ')")' → logprob: -10.375113487243652
    4. '}")' → logprob: -12.500113487243652
    5. '")
' → logprob: -12.625113487243652
    6. '")}' → logprob: -15.000113487243652
    7. '”)' → logprob: -17.62511444091797
    8. '")

' → logprob: -17.75011444091797
    9. '       ' → logprob: -17.87511444091797
    10. ')"' → logprob: -17.87511444091797

Token 213: 'class' (ID: 1444)
  Prédit: 'class'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'class' → logprob: -0.04308517277240753
    2. 'if' → logprob: -3.2930850982666016
    3. 'def' → logprob: -5.293085098266602
    4. '```' → logprob: -13.293085098266602
    5. '
' → logprob: -13.668085098266602
    6. 'import' → logprob: -13.793085098266602
    7. ' class' → logprob: -14.793085098266602
    8. '#' → logprob: -15.293085098266602
    9. 'input' → logprob: -16.1680850982666
    10. 'from' → logprob: -16.9180850982666

Token 214: ' Factor' (ID: 63743)
  Prédit: 'Application'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Application' → logprob: -0.39162930846214294
    2. 'Main' → logprob: -2.266629219055176
    3. 'Factor' → logprob: -2.766629219055176
    4. 'Program' → logprob: -3.141629219055176
    5. ' Application' → logprob: -3.516629219055176
    6. 'Solution' → logprob: -3.516629219055176
    7. 'Runner' → logprob: -3.891629219055176
    8. 'App' → logprob: -4.766629219055176
    9. ' Factor' → logprob: -5.266629219055176
    10. 'Calculator' → logprob: -5.391629219055176

Token 215: 'ial' (ID: 563)
  Prédit: 'ial'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ial' → logprob: -1.8624639324116288e-06
    2. 'ialize' → logprob: -14.375001907348633
    3. 'al' → logprob: -14.750001907348633
    4. 'IAL' → logprob: -15.500001907348633
    5. 'ials' → logprob: -15.750001907348633
    6. 'Factor' → logprob: -16.125001907348633
    7. '```' → logprob: -16.250001907348633
    8. 'ialist' → logprob: -16.500001907348633
    9. 'Calculator' → logprob: -17.250001907348633
    10. 'ical' → logprob: -17.375001907348633

Token 216: 'App' (ID: 2563)
  Prédit: 'Calculator'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Calculator' → logprob: -0.8686248064041138
    2. 'Runner' → logprob: -1.4936248064041138
    3. 'Processor' → logprob: -2.243624687194824
    4. 'Computer' → logprob: -2.368624687194824
    5. 'App' → logprob: -2.993624687194824
    6. 'Program' → logprob: -3.118624687194824
    7. 'Solver' → logprob: -3.868624687194824
    8. 'Service' → logprob: -4.243624687194824
    9. 'Application' → logprob: -4.243624687194824
    10. 'Printer' → logprob: -5.493624687194824

Token 217: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0004390134708955884
    2. ':
' → logprob: -7.750439167022705
    3. ' :' → logprob: -12.125438690185547
    4. '():' → logprob: -13.375438690185547
    5. ':def' → logprob: -14.375438690185547
    6. ':

' → logprob: -15.125438690185547
    7. '(' → logprob: -15.750438690185547
    8. '):' → logprob: -15.875438690185547
    9. ':**' → logprob: -16.375438690185547
    10. '(object' → logprob: -17.000438690185547

Token 218: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00016921341011766344
    2. ' def' → logprob: -9.000168800354004
    3. 'def' → logprob: -10.000168800354004
    4. 'class' → logprob: -15.000168800354004
    5. '	def' → logprob: -16.75016975402832
    6. '```' → logprob: -17.37516975402832
    7. '    ' → logprob: -17.87516975402832
    8. '   ' → logprob: -18.12516975402832
    9. '    
' → logprob: -18.12516975402832
    10. '
' → logprob: -18.37516975402832

Token 219: ' def' (ID: 1056)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' (adapté à ' def') → logprob: -0.31957384943962097
    2. ' def' → logprob: -1.3195738792419434
    3. '   ' → logprob: -5.069573879241943
    4. ' ' → logprob: -12.819573402404785
    5. '    ' → logprob: -12.944573402404785
    6. '  ' → logprob: -13.569573402404785
    7. 'class' → logprob: -15.319573402404785
    8. '	def' → logprob: -15.444573402404785
    9. '
' → logprob: -16.1945743560791
    10. '__' → logprob: -16.4445743560791

Token 220: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.037083469331264496
    2. ' def' → logprob: -3.412083387374878
    3. '__' → logprob: -6.662083625793457
    4. ' init' → logprob: -7.162083625793457
    5. 'init' → logprob: -7.162083625793457
    6. '_init' → logprob: -8.162083625793457
    7. 'def' → logprob: -8.162083625793457
    8. ' ' → logprob: -11.412083625793457
    9. '   ' → logprob: -12.287083625793457
    10. ' _' → logprob: -12.412083625793457

Token 221: 'init' (ID: 3287)
  Prédit: 'init'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'init' → logprob: -3.128163257315464e-07
    2. ' init' → logprob: -16.25
    3. 'def' → logprob: -16.75
    4. '   ' → logprob: -19.0
    5. 'in' → logprob: -19.125
    6. 'new' → logprob: -20.25
    7. 'i' → logprob: -20.25
    8. '```' → logprob: -20.375
    9. '_init' → logprob: -20.625
    10. 'int' → logprob: -20.625

Token 222: '__(' (ID: 8241)
  Prédit: '__('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__(' → logprob: -0.0002719449403230101
    2. '__' → logprob: -8.250271797180176
    3. '(self' → logprob: -11.875271797180176
    4. '__(
' → logprob: -12.625271797180176
    5. '_(' → logprob: -15.125271797180176
    6. ' (' → logprob: -16.375272750854492
    7. 'self' → logprob: -17.250272750854492
    8. '(' → logprob: -17.250272750854492
    9. '__((' → logprob: -17.500272750854492
    10. '__[' → logprob: -17.875272750854492

Token 223: 'self' (ID: 1156)
  Prédit: 'self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'self' → logprob: -2.5941604690160602e-05
    2. '   ' → logprob: -11.875025749206543
    3. ' self' → logprob: -11.875025749206543
    4. '
' → logprob: -12.375025749206543
    5. ',' → logprob: -12.750025749206543
    6. 'source' → logprob: -12.875025749206543
    7. ')' → logprob: -13.625025749206543
    8. '       ' → logprob: -14.500025749206543
    9. '):
' → logprob: -14.875025749206543
    10. '  ' → logprob: -17.00002670288086

Token 224: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.01844923198223114
    2. 'self' → logprob: -4.018449306488037
    3. 'source' → logprob: -8.768448829650879
    4. '   ' → logprob: -9.893448829650879
    5. ' ,' → logprob: -10.018448829650879
    6. ' self' → logprob: -11.143448829650879
    7. ',self' → logprob: -11.268448829650879
    8. ',
' → logprob: -12.143448829650879
    9. '       ' → logprob: -12.393448829650879
    10. '(self' → logprob: -12.893448829650879

Token 225: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.023653745651245117
    2. 'parser' → logprob: -4.023653984069824
    3. ' input' → logprob: -5.273653984069824
    4. ' parser' → logprob: -8.148653984069824
    5. 'source' → logprob: -9.898653984069824
    6. '   ' → logprob: -11.523653984069824
    7. 'reader' → logprob: -12.273653984069824
    8. 'self' → logprob: -12.898653984069824
    9. ' ' → logprob: -13.398653984069824
    10. ')' → logprob: -13.648653984069824

Token 226: '_source' (ID: 23344)
  Prédit: '_parser'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_parser' → logprob: -0.014990459196269512
    2. '_source' → logprob: -4.264990329742432
    3. 'source' → logprob: -8.01499080657959
    4. '_handler' → logprob: -8.51499080657959
    5. ',' → logprob: -8.88999080657959
    6. 'parser' → logprob: -9.26499080657959
    7. '_reader' → logprob: -10.51499080657959
    8. 'Parser' → logprob: -11.38999080657959
    9. '   ' → logprob: -11.38999080657959
    10. '_,' → logprob: -12.13999080657959

Token 227: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -6.790129555156454e-05
    2. ' ,' → logprob: -9.625067710876465
    3. '):' → logprob: -13.375067710876465
    4. ',input' → logprob: -16.25006866455078
    5. '   ' → logprob: -16.87506866455078
    6. '‌,' → logprob: -18.00006866455078
    7. ',
' → logprob: -18.62506866455078
    8. ',self' → logprob: -18.62506866455078
    9. 'source' → logprob: -18.75006866455078
    10. ')' → logprob: -19.00006866455078

Token 228: ' output' (ID: 4733)
  Prédit: 'output'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'output' → logprob: -0.16023874282836914
    2. ' output' → logprob: -1.9102387428283691
    3. '   ' → logprob: -11.910238265991211
    4. ' ' → logprob: -12.410238265991211
    5. '  ' → logprob: -13.035238265991211
    6. '	output' → logprob: -14.035238265991211
    7. '    ' → logprob: -15.035238265991211
    8. 'Output' → logprob: -16.28523826599121
    9. '(output' → logprob: -16.41023826599121
    10. '           ' → logprob: -16.91023826599121

Token 229: '_dest' (ID: 78932)
  Prédit: '_destination'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_destination' → logprob: -0.0008799002389423549
    2. '_dest' → logprob: -7.375879764556885
    3. 'destination' → logprob: -8.500880241394043
    4. '_target' → logprob: -10.875880241394043
    5. '_source' → logprob: -11.000880241394043
    6. '_handler' → logprob: -12.250880241394043
    7. '_sink' → logprob: -12.375880241394043
    8. ' destination' → logprob: -13.750880241394043
    9. '_d' → logprob: -14.250880241394043
    10. '):
' → logprob: -14.375880241394043

Token 230: '):
' (ID: 1883)
  Prédit: 'ination'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ination' → logprob: -6.635164754698053e-05
    2. 'INATION' → logprob: -10.250066757202148
    3. '):
' → logprob: -11.500066757202148
    4. ')' → logprob: -11.750066757202148
    5. '   ' → logprob: -12.250066757202148
    6. 'inition' → logprob: -13.125066757202148
    7. ')
' → logprob: -13.375066757202148
    8. 'inations' → logprob: -13.625066757202148
    9. 'in' → logprob: -14.250066757202148
    10. 'ation' → logprob: -14.500066757202148

Token 231: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00028290803311392665
    2. '):
' → logprob: -9.250283241271973
    3. 'self' → logprob: -9.375283241271973
    4. ',' → logprob: -9.875283241271973
    5. ' self' → logprob: -10.375283241271973
    6. ':' → logprob: -12.000283241271973
    7. '   ' → logprob: -12.625283241271973
    8. ')' → logprob: -12.625283241271973
    9. '
' → logprob: -13.000283241271973
    10. '):' → logprob: -13.750283241271973

Token 232: ' self' (ID: 1051)
  Prédit: 'self'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'self' (adapté à ' self') → logprob: -0.13667649030685425
    2. '       ' → logprob: -2.136676549911499
    3. ' self' → logprob: -4.63667631149292
    4. '   ' → logprob: -11.761676788330078
    5. ' ' → logprob: -13.511676788330078
    6. '	self' → logprob: -13.886676788330078
    7. 'def' → logprob: -14.386676788330078
    8. '(self' → logprob: -15.636676788330078
    9. '
' → logprob: -15.886676788330078
    10. '     ' → logprob: -16.386676788330078

Token 233: '.parser' (ID: 50244)
  Prédit: '.input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.input' → logprob: -0.7913527488708496
    2. '.parser' → logprob: -1.4163527488708496
    3. 'input' → logprob: -2.5413527488708496
    4. ' =' → logprob: -3.1663527488708496
    5. 'parser' → logprob: -3.2913527488708496
    6. '_parser' → logprob: -3.4163527488708496
    7. '_input' → logprob: -3.4163527488708496
    8. ' parser' → logprob: -3.6663527488708496
    9. '       ' → logprob: -3.9163527488708496
    10. ' input' → logprob: -4.29135274887085

Token 234: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.011054662987589836
    2. '=' → logprob: -4.511054515838623
    3. ' ' → logprob: -12.386054992675781
    4. '   ' → logprob: -13.136054992675781
    5. '    ' → logprob: -15.136054992675781
    6. ',' → logprob: -15.886054992675781
    7. '  ' → logprob: -16.13605499267578
    8. ' =
' → logprob: -16.26105499267578
    9. '       ' → logprob: -17.26105499267578
    10. 'Parser' → logprob: -17.38605499267578

Token 235: ' Input' (ID: 10090)
  Prédit: 'Input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Input' → logprob: -0.2519291639328003
    2. ' Input' → logprob: -1.5019291639328003
    3. '	Input' → logprob: -16.501928329467773
    4. ' input' → logprob: -18.876928329467773
    5. '<Input' → logprob: -19.001928329467773
    6. 'input' → logprob: -19.876928329467773
    7. '_input' → logprob: -20.126928329467773
    8. '_Input' → logprob: -20.751928329467773
    9. '\Input' → logprob: -20.751928329467773
    10. '.Input' → logprob: -21.626928329467773

Token 236: 'Parser' (ID: 9231)
  Prédit: 'Parser'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Parser' → logprob: 0.0
    2. '_parser' → logprob: -18.625
    3. 'Parse' → logprob: -19.25
    4. ' Parser' → logprob: -19.375
    5. 'parser' → logprob: -19.625
    6. 'Parsed' → logprob: -21.25
    7. '_' → logprob: -21.25
    8. 'Par' → logprob: -21.375
    9. 'Handler' → logprob: -21.375
    10. 'Parsing' → logprob: -21.75

Token 237: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0032059962395578623
    2. '(' → logprob: -5.7532057762146
    3. '(output' → logprob: -11.128206253051758
    4. '(
' → logprob: -11.503206253051758
    5. 'input' → logprob: -12.753206253051758
    6. ' (' → logprob: -15.253206253051758
    7. '(source' → logprob: -16.003206253051758
    8. '(

' → logprob: -16.628206253051758
    9. '(in' → logprob: -17.003206253051758
    10. ' input' → logprob: -17.253206253051758

Token 238: '_source' (ID: 23344)
  Prédit: '_source'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_source' → logprob: -7.896309739408025e-07
    2. '_s' → logprob: -14.875000953674316
    3. 'source' → logprob: -15.375000953674316
    4. '_' → logprob: -16.25
    5. '_sources' → logprob: -18.25
    6. '_
' → logprob: -18.375
    7. '_src' → logprob: -18.75
    8. '   ' → logprob: -19.625
    9. '=' → logprob: -19.875
    10. '_dest' → logprob: -20.0

Token 239: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.4742591083049774
    2. ')' → logprob: -0.9742591381072998
    3. '       ' → logprob: -8.724259376525879
    4. '   ' → logprob: -11.599259376525879
    5. ' )
' → logprob: -12.099259376525879
    6. ')
' → logprob: -13.099259376525879
    7. ' ' → logprob: -14.224259376525879
    8. ' )' → logprob: -14.224259376525879
    9. ',' → logprob: -14.349259376525879
    10. ')

' → logprob: -14.599259376525879

Token 240: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.030995523557066917
    2. 'self' → logprob: -3.5309956073760986
    3. ' self' → logprob: -6.7809953689575195
    4. '
' → logprob: -9.15599536895752
    5. '   ' → logprob: -12.78099536895752
    6. '	self' → logprob: -15.78099536895752
    7. '        
' → logprob: -15.90599536895752
    8. ' ' → logprob: -16.030996322631836
    9. '      ' → logprob: -16.280996322631836
    10. ',' → logprob: -16.655996322631836

Token 241: ' self' (ID: 1051)
  Prédit: 'self'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'self' (adapté à ' self') → logprob: -0.0005272957496345043
    2. '       ' → logprob: -7.750527381896973
    3. ' self' → logprob: -9.250527381896973
    4. '
' → logprob: -14.875527381896973
    5. '   ' → logprob: -16.250526428222656
    6. '        
' → logprob: -17.875526428222656
    7. '	self' → logprob: -18.000526428222656
    8. '(self' → logprob: -18.750526428222656
    9. '      ' → logprob: -19.000526428222656
    10. '        ' → logprob: -19.250526428222656

Token 242: '.cal' (ID: 40302)
  Prédit: '.cal'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.cal' → logprob: -0.012661268003284931
    2. '.handler' → logprob: -4.637661457061768
    3. '.output' → logprob: -6.012661457061768
    4. '.calc' → logprob: -8.51266098022461
    5. '.writer' → logprob: -9.38766098022461
    6. '.' → logprob: -10.13766098022461
    7. 'calculator' → logprob: -10.63766098022461
    8. '.processor' → logprob: -10.76266098022461
    9. '.factor' → logprob: -11.13766098022461
    10. ' .' → logprob: -11.38766098022461

Token 243: 'culator' (ID: 23033)
  Prédit: 'culator'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'culator' → logprob: -0.0027491229120641947
    2. 'c' → logprob: -6.002748966217041
    3. 'calculator' → logprob: -8.2527494430542
    4. 'cul' → logprob: -11.3777494430542
    5. 'cular' → logprob: -15.0027494430542
    6. 'cl' → logprob: -15.1277494430542
    7. 'cf' → logprob: -15.1277494430542
    8. ' calculator' → logprob: -16.377748489379883
    9. 'factor' → logprob: -17.002748489379883
    10. 'cula' → logprob: -17.002748489379883

Token 244: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.1602243334054947
    2. '=' → logprob: -1.9102243185043335
    3. ' ' → logprob: -15.410223960876465
    4. '   ' → logprob: -17.03522491455078
    5. ' =
' → logprob: -19.41022491455078
    6. '    ' → logprob: -19.53522491455078
    7. '  ' → logprob: -19.66022491455078
    8. 's' → logprob: -20.16022491455078
    9. '＝' → logprob: -20.41022491455078
    10. ',' → logprob: -20.66022491455078

Token 245: ' Factor' (ID: 63743)
  Prédit: 'Factor'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Factor' → logprob: -0.04859702289104462
    2. ' Factor' → logprob: -3.0485970973968506
    3. '   ' → logprob: -12.42359733581543
    4. '    ' → logprob: -13.04859733581543
    5. '       ' → logprob: -13.54859733581543
    6. 'Fact' → logprob: -14.29859733581543
    7. ' ' → logprob: -14.29859733581543
    8. '  ' → logprob: -15.17359733581543
    9. '        ' → logprob: -15.29859733581543
    10. 'Factory' → logprob: -16.29859733581543

Token 246: 'ial' (ID: 563)
  Prédit: 'ial'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ial' → logprob: -0.0789584144949913
    2. 'al' → logprob: -2.578958511352539
    3. 'orial' → logprob: -9.828958511352539
    4. 'ional' → logprob: -11.578958511352539
    5. 'Calculator' → logprob: -12.953958511352539
    6. 'onal' → logprob: -13.328958511352539
    7. ' ial' → logprob: -15.078958511352539
    8. 'ator' → logprob: -15.703958511352539
    9. 'rial' → logprob: -15.703958511352539
    10. '   ' → logprob: -16.20395851135254

Token 247: 'Calculator' (ID: 50159)
  Prédit: 'Calculator'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Calculator' → logprob: -1.1472419600977446e-06
    2. 'calculator' → logprob: -14.375000953674316
    3. ' Calculator' → logprob: -15.000000953674316
    4. 'Cal' → logprob: -16.875001907348633
    5. 'Calcul' → logprob: -17.375001907348633
    6. 'Calc' → logprob: -18.125001907348633
    7. '   ' → logprob: -19.125001907348633
    8. 'C' → logprob: -19.250001907348633
    9. '
' → logprob: -19.375001907348633
    10. 'culator' → logprob: -19.625001907348633

Token 248: '()
' (ID: 1234)
  Prédit: '(output'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(output' → logprob: -0.028952905908226967
    2. '()
' → logprob: -3.9039528369903564
    3. '()' → logprob: -5.2789530754089355
    4. '(' → logprob: -6.2789530754089355
    5. 'output' → logprob: -6.7789530754089355
    6. '(max' → logprob: -8.653952598571777
    7. '(
' → logprob: -10.028952598571777
    8. '       ' → logprob: -11.028952598571777
    9. ' (' → logprob: -11.653952598571777
    10. ' output' → logprob: -12.028952598571777

Token 249: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.01123043056577444
    2. 'self' → logprob: -4.51123046875
    3. ' self' → logprob: -8.63623046875
    4. '   ' → logprob: -12.26123046875
    5. '	self' → logprob: -16.13623046875
    6. '
' → logprob: -16.38623046875
    7. '      ' → logprob: -16.63623046875
    8. '     ' → logprob: -17.38623046875
    9. '           ' → logprob: -17.76123046875
    10. ' ' → logprob: -17.76123046875

Token 250: ' self' (ID: 1051)
  Prédit: 'self'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'self' (adapté à ' self') → logprob: -0.0005990233621560037
    2. '       ' → logprob: -7.500598907470703
    3. ' self' → logprob: -10.000598907470703
    4. '   ' → logprob: -14.375598907470703
    5. '	self' → logprob: -17.000598907470703
    6. '
' → logprob: -17.125598907470703
    7. '(self' → logprob: -18.250598907470703
    8. '      ' → logprob: -18.500598907470703
    9. '  ' → logprob: -18.625598907470703
    10. ' ' → logprob: -19.000598907470703

Token 251: '.output' (ID: 27521)
  Prédit: '.output'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.output' → logprob: -0.5788947343826294
    2. '.handler' → logprob: -0.8288947343826294
    3. '.writer' → logprob: -6.70389461517334
    4. 'output' → logprob: -7.45389461517334
    5. 'handler' → logprob: -8.20389461517334
    6. '.' → logprob: -8.32889461517334
    7. '.out' → logprob: -8.45389461517334
    8. '.outputs' → logprob: -9.07889461517334
    9. ' .' → logprob: -9.32889461517334
    10. '
' → logprob: -9.95389461517334

Token 252: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.5175373554229736
    2. '_handler' → logprob: -1.0175373554229736
    3. '=' → logprob: -3.7675373554229736
    4. '_dest' → logprob: -4.0175371170043945
    5. 'Handler' → logprob: -7.6425371170043945
    6. '   ' → logprob: -8.017537117004395
    7. 'handler' → logprob: -8.142537117004395
    8. 'dest' → logprob: -8.642537117004395
    9. 'ter' → logprob: -10.517537117004395
    10. '_destination' → logprob: -10.642537117004395

Token 253: ' Output' (ID: 18315)
  Prédit: ' Output'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Output' → logprob: -0.25192928314208984
    2. 'Output' → logprob: -1.5019292831420898
    3. '	Output' → logprob: -15.87692928314209
    4. '(Output' → logprob: -16.501930236816406
    5. ' output' → logprob: -17.626930236816406
    6. '_Output' → logprob: -18.626930236816406
    7. '.Output' → logprob: -19.001930236816406
    8. '_output' → logprob: -20.501930236816406
    9. 'output' → logprob: -20.751930236816406
    10. '   ' → logprob: -21.501930236816406

Token 254: 'Handler' (ID: 4139)
  Prédit: 'Handler'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Handler' → logprob: -4.320199877838604e-07
    2. '_handler' → logprob: -15.625
    3. 'handler' → logprob: -16.625
    4. '_Handler' → logprob: -17.0
    5. ' Handler' → logprob: -17.125
    6. '   ' → logprob: -18.0
    7. 'Hand' → logprob: -19.625
    8. 'Handlers' → logprob: -19.75
    9. 'Handle' → logprob: -20.0
    10. '       ' → logprob: -20.25

Token 255: '(output' (ID: 22485)
  Prédit: '(output'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(output' → logprob: -2.939851037808694e-05
    2. 'output' → logprob: -10.500029563903809
    3. ' output' → logprob: -13.875029563903809
    4. ' (' → logprob: -14.375029563903809
    5. '(' → logprob: -15.500029563903809
    6. '(out' → logprob: -19.375028610229492
    7. '	output' → logprob: -19.625028610229492
    8. '$output' → logprob: -19.875028610229492
    9. '(input' → logprob: -19.875028610229492
    10. '       ' → logprob: -20.375028610229492

Token 256: '_dest' (ID: 78932)
  Prédit: '_dest'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_dest' → logprob: -4.096126576769166e-05
    2. 'dest' → logprob: -10.125041007995605
    3. '_dist' → logprob: -15.750041007995605
    4. '_' → logprob: -15.750041007995605
    5. '_destination' → logprob: -15.875041007995605
    6. '_source' → logprob: -16.00004005432129
    7. '	dest' → logprob: -16.25004005432129
    8. '_dst' → logprob: -17.00004005432129
    9. '_des' → logprob: -17.00004005432129
    10. '.dest' → logprob: -17.50004005432129

Token 257: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.127333340875339e-06
    2. ')
' → logprob: -12.625003814697266
    3. '   ' → logprob: -14.500003814697266
    4. '       ' → logprob: -16.125003814697266
    5. ' )' → logprob: -16.250003814697266
    6. '}' → logprob: -19.125003814697266
    7. ')

' → logprob: -19.125003814697266
    8. ' ' → logprob: -19.750003814697266
    9. '))' → logprob: -20.625003814697266
    10. ')`' → logprob: -20.625003814697266

Token 258: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.31713753938674927
    2. '
' → logprob: -1.3171374797821045
    3. '    
' → logprob: -5.817137718200684
    4. 'def' → logprob: -7.317137718200684
    5. '<|end|>' → logprob: -9.942137718200684
    6. '        
' → logprob: -10.067137718200684
    7. ' def' → logprob: -10.192137718200684
    8. '```' → logprob: -10.442137718200684
    9. '  
' → logprob: -10.817137718200684
    10. '

' → logprob: -10.942137718200684

Token 259: ' def' (ID: 1056)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' (adapté à ' def') → logprob: -0.004412671085447073
    2. ' def' → logprob: -5.504412651062012
    3. '   ' → logprob: -8.004412651062012
    4. '	def' → logprob: -16.004413604736328
    5. '
' → logprob: -17.004413604736328
    6. '    
' → logprob: -18.004413604736328
    7. ' ' → logprob: -18.629413604736328
    8. '  ' → logprob: -20.004413604736328
    9. '```' → logprob: -20.004413604736328
    10. 'de' → logprob: -21.629413604736328

Token 260: ' run' (ID: 2461)
  Prédit: 'run'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'run' → logprob: -0.38687628507614136
    2. ' run' → logprob: -1.1368763446807861
    3. '_run' → logprob: -12.386876106262207
    4. ' ' → logprob: -14.886876106262207
    5. '   ' → logprob: -15.136876106262207
    6. '	run' → logprob: -15.761876106262207
    7. '.run' → logprob: -15.886876106262207
    8. 'execute' → logprob: -16.761877059936523
    9. 'process' → logprob: -17.011877059936523
    10. 'compute' → logprob: -17.636877059936523

Token 261: '(self' (ID: 2402)
  Prédit: '(self'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(self' → logprob: -0.01918906345963478
    2. '(' → logprob: -4.01918888092041
    3. '()' → logprob: -6.89418888092041
    4. ' (' → logprob: -11.26918888092041
    5. '   ' → logprob: -12.51918888092041
    6. 'self' → logprob: -12.76918888092041
    7. '(
' → logprob: -13.26918888092041
    8. '(s' → logprob: -13.89418888092041
    9. '(sel' → logprob: -14.01918888092041
    10. '       ' → logprob: -14.26918888092041

Token 262: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.1270064264535904
    2. '):
' → logprob: -2.1270065307617188
    3. ')' → logprob: -10.377006530761719
    4. 'self' → logprob: -10.752006530761719
    5. ' ):' → logprob: -11.252006530761719
    6. '):
' → logprob: -12.377006530761719
    7. '   ' → logprob: -12.627006530761719
    8. '):

' → logprob: -13.502006530761719
    9. ' ' → logprob: -14.127006530761719
    10. ',' → logprob: -14.252006530761719

Token 263: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.07666340470314026
    2. 'n' → logprob: -2.7016634941101074
    3. ' n' → logprob: -5.326663494110107
    4. 'try' → logprob: -6.451663494110107
    5. ' try' → logprob: -9.07666301727295
    6. 'num' → logprob: -9.32666301727295
    7. '```' → logprob: -10.82666301727295
    8. 'number' → logprob: -10.95166301727295
    9. '   ' → logprob: -11.70166301727295
    10. ' number' → logprob: -12.07666301727295

Token 264: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' (adapté à ' n') → logprob: -0.49017781019210815
    2. 'try' → logprob: -0.9901778101921082
    3. '       ' → logprob: -4.240177631378174
    4. ' try' → logprob: -6.990177631378174
    5. ' n' → logprob: -7.490177631378174
    6. 'num' → logprob: -10.365178108215332
    7. '```' → logprob: -10.365178108215332
    8. 'number' → logprob: -11.240178108215332
    9. '   ' → logprob: -11.990178108215332
    10. 'while' → logprob: -12.865178108215332

Token 265: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.01815052703022957
    2. '=' → logprob: -4.018150329589844
    3. '   ' → logprob: -14.643150329589844
    4. ' ' → logprob: -16.268150329589844
    5. '    ' → logprob: -17.643150329589844
    6. '  ' → logprob: -18.643150329589844
    7. ' =
' → logprob: -18.768150329589844
    8. '=int' → logprob: -19.518150329589844
    9. '       ' → logprob: -19.893150329589844
    10. '=
' → logprob: -20.643150329589844

Token 266: ' self' (ID: 1051)
  Prédit: 'self'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'self' → logprob: -0.008616581559181213
    2. ' self' → logprob: -4.7586164474487305
    3. '       ' → logprob: -13.13361644744873
    4. '(self' → logprob: -18.758617401123047
    5. '	self' → logprob: -19.008617401123047
    6. '           ' → logprob: -19.008617401123047
    7. '   ' → logprob: -19.008617401123047
    8. '
' → logprob: -19.633617401123047
    9. '        ' → logprob: -20.883617401123047
    10. '=self' → logprob: -21.383617401123047

Token 267: '.parser' (ID: 50244)
  Prédit: '.parser'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.parser' → logprob: -3.650518920039758e-06
    2. 'parser' → logprob: -12.875003814697266
    3. '.' → logprob: -14.125003814697266
    4. ' .' → logprob: -15.500003814697266
    5. '	parser' → logprob: -15.750003814697266
    6. ' parser' → logprob: -18.250003814697266
    7. '   ' → logprob: -18.625003814697266
    8. '.processor' → logprob: -19.250003814697266
    9. '.parsers' → logprob: -19.500003814697266
    10. '/parser' → logprob: -20.250003814697266

Token 268: '.get' (ID: 775)
  Prédit: '.get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.get' → logprob: -3.452426608419046e-05
    2. '.' → logprob: -10.37503433227539
    3. 'get' → logprob: -13.00003433227539
    4. ' .' → logprob: -14.00003433227539
    5. '_get' → logprob: -17.25003433227539
    6. '   ' → logprob: -17.37503433227539
    7. '
' → logprob: -18.37503433227539
    8. '().' → logprob: -18.62503433227539
    9. '.
' → logprob: -19.12503433227539
    10. '       ' → logprob: -19.25003433227539

Token 269: '_integer' (ID: 82911)
  Prédit: '_integer'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_integer' → logprob: 0.0
    2. '_int' → logprob: -18.25
    3. '_INTEGER' → logprob: -18.875
    4. '_' → logprob: -19.25
    5. 'integer' → logprob: -21.0
    6. '_string' → logprob: -21.125
    7. '_number' → logprob: -21.25
    8. '_in' → logprob: -21.625
    9. '_integr' → logprob: -22.0
    10. '_Integer' → logprob: -22.125

Token 270: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0007102862582542002
    2. '()
' → logprob: -7.250710487365723
    3. '()`' → logprob: -15.625710487365723
    4. '()

' → logprob: -16.250709533691406
    5. '()
' → logprob: -16.250709533691406
    6. ' ()' → logprob: -17.250709533691406
    7. '()"' → logprob: -18.125709533691406
    8. '())' → logprob: -18.500709533691406
    9. '()\' → logprob: -19.500709533691406
    10. '()]' → logprob: -20.625709533691406

Token 271: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.6075367331504822
    2. 'result' → logprob: -0.8575367331504822
    3. 'try' → logprob: -3.732536792755127
    4. ' result' → logprob: -4.982536792755127
    5. ' try' → logprob: -8.607536315917969
    6. '```' → logprob: -9.607536315917969
    7. '
' → logprob: -10.357536315917969
    8. '   ' → logprob: -10.857536315917969
    9. '	result' → logprob: -12.357536315917969
    10. '        
' → logprob: -12.857536315917969

Token 272: ' fact' (ID: 2840)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.0030040887650102377
    2. ' result' → logprob: -6.62800407409668
    3. 'try' → logprob: -7.25300407409668
    4. 'fact' (adapté à ' fact') → logprob: -7.87800407409668
    5. 'factor' → logprob: -8.12800407409668
    6. '       ' → logprob: -8.25300407409668
    7. 'res' → logprob: -10.50300407409668
    8. ' try' → logprob: -12.62800407409668
    9. '```' → logprob: -13.62800407409668
    10. ' factorial' → logprob: -13.87800407409668

Token 273: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.10780803859233856
    2. '=' → logprob: -3.1078081130981445
    3. 'or' → logprob: -3.3578081130981445
    4. 'orial' → logprob: -3.8578081130981445
    5. '_result' → logprob: -8.107808113098145
    6. '_or' → logprob: -8.107808113098145
    7. '   ' → logprob: -8.232808113098145
    8. 'oral' → logprob: -8.607808113098145
    9. 'oriz' → logprob: -9.107808113098145
    10. 'orical' → logprob: -9.357808113098145

Token 274: ' self' (ID: 1051)
  Prédit: 'self'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'self' → logprob: -0.048589304089546204
    2. ' self' → logprob: -3.0485892295837402
    3. '       ' → logprob: -13.173589706420898
    4. '(self' → logprob: -16.9235897064209
    5. '	self' → logprob: -18.5485897064209
    6. '=self' → logprob: -18.9235897064209
    7. '   ' → logprob: -19.1735897064209
    8. '           ' → logprob: -19.5485897064209
    9. ' ' → logprob: -19.7985897064209
    10. '```' → logprob: -20.5485897064209

Token 275: '.cal' (ID: 40302)
  Prédit: '.cal'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.cal' → logprob: -1.6240566083070007e-06
    2. '.calc' → logprob: -14.625001907348633
    3. ' .' → logprob: -14.750001907348633
    4. '.' → logprob: -15.000001907348633
    5. '	cal' → logprob: -15.375001907348633
    6. 'calculator' → logprob: -16.000001907348633
    7. 'cal' → logprob: -17.250001907348633
    8. '.calculate' → logprob: -17.500001907348633
    9. '.factor' → logprob: -17.500001907348633
    10. '.Cal' → logprob: -17.875001907348633

Token 276: 'culator' (ID: 23033)
  Prédit: 'culator'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'culator' → logprob: -0.0003534582501742989
    2. 'ulator' → logprob: -8.000353813171387
    3. 'cul' → logprob: -11.500353813171387
    4. 'calculator' → logprob: -12.125353813171387
    5. 'c' → logprob: -13.000353813171387
    6. 'ator' → logprob: -16.75035285949707
    7. 'factor' → logprob: -17.50035285949707
    8. 'cu' → logprob: -17.62535285949707
    9. 'lator' → logprob: -17.62535285949707
    10. 'cut' → logprob: -17.87535285949707

Token 277: '.factor' (ID: 196244)
  Prédit: '.factor'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.factor' → logprob: -2.4868770196917467e-05
    2. 'factor' → logprob: -11.875024795532227
    3. '.fact' → logprob: -11.875024795532227
    4. ' .' → logprob: -12.125024795532227
    5. '.' → logprob: -12.375024795532227
    6. '.fac' → logprob: -13.750024795532227
    7. '.calculate' → logprob: -16.875024795532227
    8. ' factorial' → logprob: -17.500024795532227
    9. '_factor' → logprob: -18.000024795532227
    10. 'Factor' → logprob: -18.625024795532227

Token 278: 'ial' (ID: 563)
  Prédit: 'ial'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ial' → logprob: -0.5266755223274231
    2. 'orial' → logprob: -0.9016755223274231
    3. '(n' → logprob: -6.276675701141357
    4. 'ional' → logprob: -7.776675701141357
    5. 'rial' → logprob: -7.901675701141357
    6. '(' → logprob: -8.6516752243042
    7. 'ior' → logprob: -8.6516752243042
    8. 'al' → logprob: -9.0266752243042
    9. 'cial' → logprob: -9.5266752243042
    10. 'n' → logprob: -9.6516752243042

Token 279: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -3.4121114822482923e-06
    2. '(' → logprob: -12.625003814697266
    3. '(
' → logprob: -17.125003814697266
    4. ' (' → logprob: -17.625003814697266
    5. '(f' → logprob: -18.500003814697266
    6. 'n' → logprob: -19.625003814697266
    7. '((' → logprob: -21.875003814697266
    8. '```' → logprob: -22.375003814697266
    9. 'f' → logprob: -22.625003814697266
    10. '(noun' → logprob: -22.750003814697266

Token 280: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.004288641735911369
    2. ')' → logprob: -5.504288673400879
    3. '       ' → logprob: -8.504288673400879
    4. ')
' → logprob: -11.879288673400879
    5. ' )
' → logprob: -14.629288673400879
    6. ')

' → logprob: -16.754287719726562
    7. ')`
' → logprob: -17.504287719726562
    8. '()
' → logprob: -17.629287719726562
    9. '   ' → logprob: -17.754287719726562
    10. '())
' → logprob: -18.504287719726562

Token 281: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.006868582684546709
    2. 'self' → logprob: -5.006868362426758
    3. ' self' → logprob: -8.881868362426758
    4. '
' → logprob: -11.381868362426758
    5. '```' → logprob: -13.631868362426758
    6. '   ' → logprob: -14.506868362426758
    7. '	self' → logprob: -14.506868362426758
    8. '        
' → logprob: -15.131868362426758
    9. '(self' → logprob: -16.631868362426758
    10. '``' → logprob: -16.756868362426758

Token 282: ' self' (ID: 1051)
  Prédit: 'self'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'self' (adapté à ' self') → logprob: -0.0025716139934957027
    2. ' self' → logprob: -6.0025715827941895
    3. '       ' → logprob: -9.252572059631348
    4. '
' → logprob: -17.37757110595703
    5. '	self' → logprob: -18.00257110595703
    6. '   ' → logprob: -18.37757110595703
    7. '```' → logprob: -18.87757110595703
    8. '[self' → logprob: -19.37757110595703
    9. ' ' → logprob: -20.37757110595703
    10. '(self' → logprob: -21.37757110595703

Token 283: '.output' (ID: 27521)
  Prédit: '.output'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.output' → logprob: -5.5577775128767826e-06
    2. '.' → logprob: -12.375005722045898
    3. 'output' → logprob: -13.750005722045898
    4. ' .' → logprob: -15.750005722045898
    5. '.out' → logprob: -16.8750057220459
    6. '.print' → logprob: -17.6250057220459
    7. '.outputs' → logprob: -17.8750057220459
    8. '	output' → logprob: -19.8750057220459
    9. '.input' → logprob: -19.8750057220459
    10. '.result' → logprob: -20.0000057220459

Token 284: '.print' (ID: 2853)
  Prédit: '.print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.print' → logprob: -5.438573680294212e-06
    2. '.' → logprob: -12.250005722045898
    3. 'print' → logprob: -14.875005722045898
    4. ' .' → logprob: -16.6250057220459
    5. '.write' → logprob: -16.7500057220459
    6. '.println' → logprob: -19.0000057220459
    7. '.show' → logprob: -20.2500057220459
    8. '.save' → logprob: -20.2500057220459
    9. '.Print' → logprob: -20.8750057220459
    10. '.put' → logprob: -21.2500057220459

Token 285: '_result' (ID: 11623)
  Prédit: '_result'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_result' → logprob: -4.723352049040841e-06
    2. 'result' → logprob: -12.750004768371582
    3. 'f' → logprob: -14.375004768371582
    4. '_' → logprob: -15.250004768371582
    5. '_results' → logprob: -15.375004768371582
    6. 's' → logprob: -15.500004768371582
    7. ' _' → logprob: -16.250003814697266
    8. '_RESULT' → logprob: -16.625003814697266
    9. '"_' → logprob: -16.625003814697266
    10. '__' → logprob: -17.125003814697266

Token 286: '(f' (ID: 1526)
  Prédit: '(f'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(f' → logprob: -7.107425062713446e-06
    2. '(' → logprob: -11.875006675720215
    3. ' (' → logprob: -16.50000762939453
    4. '(F' → logprob: -19.25000762939453
    5. 'f' → logprob: -19.87500762939453
    6. '(
' → logprob: -20.00000762939453
    7. '	f' → logprob: -20.75000762939453
    8. '(face' → logprob: -21.25000762939453
    9. '(fe' → logprob: -21.25000762939453
    10. '```' → logprob: -21.37500762939453

Token 287: 'act' (ID: 588)
  Prédit: 'act'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'act' → logprob: 0.0
    2. '(act' → logprob: -17.75
    3. 'ac' → logprob: -18.0
    4. ' act' → logprob: -18.75
    5. 'a' → logprob: -19.875
    6. 'at' → logprob: -20.0
    7. 'actor' → logprob: -20.625
    8. '.act' → logprob: -20.75
    9. '	act' → logprob: -21.0
    10. 'fact' → logprob: -21.0

Token 288: ')


' (ID: 7861)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -6.694766489090398e-05
    2. ')
' → logprob: -9.625066757202148
    3. ' )' → logprob: -15.000066757202148
    4. '())' → logprob: -15.500066757202148
    5. '()' → logprob: -15.875066757202148
    6. ')

' → logprob: -17.50006675720215
    7. '   ' → logprob: -17.62506675720215
    8. '       ' → logprob: -17.75006675720215
    9. ')return' → logprob: -18.37506675720215
    10. '))' → logprob: -18.37506675720215

Token 289: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.10237912088632584
    2. 'import' → logprob: -2.352379083633423
    3. '#' → logprob: -6.477379322052002
    4. '```' → logprob: -7.477379322052002
    5. 'from' → logprob: -10.477378845214844
    6. ' if' → logprob: -10.977378845214844
    7. 'def' → logprob: -11.852378845214844
    8. 'input' → logprob: -12.477378845214844
    9. 'with' → logprob: -12.602378845214844
    10. 'If' → logprob: -13.352378845214844

Token 290: ' __' (ID: 2516)
  Prédit: ' __'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.0031818747520446777
    2. '__' → logprob: -5.7531819343566895
    3. '_' → logprob: -13.128181457519531
    4. '_name' → logprob: -13.503181457519531
    5. 'name' → logprob: -14.878181457519531
    6. ' ' → logprob: -15.628181457519531
    7. ' ' → logprob: -15.878181457519531
    8. ' _' → logprob: -16.75318145751953
    9. '___' → logprob: -17.00318145751953
    10. ' ___' → logprob: -18.12818145751953

Token 291: 'name' (ID: 897)
  Prédit: ' __'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' __' → logprob: -0.5342229604721069
    2. '__' → logprob: -0.9092229604721069
    3. 'name' → logprob: -5.1592230796813965
    4. ' ==' → logprob: -5.2842230796813965
    5. '==' → logprob: -9.784222602844238
    6. '_name' → logprob: -10.534222602844238
    7. ' ' → logprob: -11.159222602844238
    8. ' name' → logprob: -11.409222602844238
    9. '.__' → logprob: -11.534222602844238
    10. '___' → logprob: -11.534222602844238

Token 292: '__' (ID: 771)
  Prédit: '__'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -1.0280383548888494e-06
    2. '__.__' → logprob: -14.500000953674316
    3. '==' → logprob: -16.250001907348633
    4. ' ==' → logprob: -16.500001907348633
    5. ' __' → logprob: -16.625001907348633
    6. '____' → logprob: -16.750001907348633
    7. '___' → logprob: -17.250001907348633
    8. 'name' → logprob: -17.250001907348633
    9. '__.' → logprob: -17.375001907348633
    10. '__
' → logprob: -17.750001907348633

Token 293: ' ==' (ID: 951)
  Prédit: '__'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__' → logprob: -0.04613329470157623
    2. ' ==' → logprob: -3.171133279800415
    3. '==' → logprob: -5.796133518218994
    4. '=="' → logprob: -9.546133041381836
    5. ' __' → logprob: -12.421133041381836
    6. '__.__' → logprob: -12.421133041381836
    7. '___' → logprob: -12.546133041381836
    8. '_' → logprob: -13.296133041381836
    9. '____' → logprob: -14.171133041381836
    10. '"' → logprob: -14.171133041381836

Token 294: ' "__' (ID: 27367)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.0004722603189293295
    2. ''' → logprob: -7.750472068786621
    3. ' "__' → logprob: -10.125472068786621
    4. '__' → logprob: -13.500472068786621
    5. ' '__' → logprob: -17.000473022460938
    6. ' "' → logprob: -18.000473022460938
    7. '"user' → logprob: -19.125473022460938
    8. '("__' → logprob: -19.125473022460938
    9. '"class' → logprob: -19.250473022460938
    10. '"name' → logprob: -19.625473022460938

Token 295: 'main' (ID: 7731)
  Prédit: 'main'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'main' → logprob: -3.7697225252486533e-06
    2. 'name' → logprob: -13.125003814697266
    3. '__' → logprob: -13.625003814697266
    4. '_main' → logprob: -15.500003814697266
    5. ' main' → logprob: -15.875003814697266
    6. 'built' → logprob: -16.750003814697266
    7. 'm' → logprob: -16.875003814697266
    8. 'ma' → logprob: -17.125003814697266
    9. '-main' → logprob: -18.625003814697266
    10. 'print' → logprob: -19.000003814697266

Token 296: '__":
' (ID: 49892)
  Prédit: '__":
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '__":
' → logprob: -0.011075177229940891
    2. '__' → logprob: -4.511075019836426
    3. '__':
' → logprob: -10.511075019836426
    4. '__:' → logprob: -15.761075019836426
    5. '__
' → logprob: -18.761075973510742
    6. '_' → logprob: -18.761075973510742
    7. '__["' → logprob: -19.261075973510742
    8. '___' → logprob: -19.636075973510742
    9. '__",' → logprob: -19.761075973510742
    10. '__.' → logprob: -20.136075973510742

Token 297: '   ' (ID: 271)
  Prédit: ' import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' import' → logprob: -0.07415398210287094
    2. 'import' → logprob: -3.0741539001464844
    3. '   ' → logprob: -3.6991539001464844
    4. ' from' → logprob: -8.324153900146484
    5. '	import' → logprob: -8.449153900146484
    6. ' with' → logprob: -10.574153900146484
    7. ' input' → logprob: -12.074153900146484
    8. '```' → logprob: -12.574153900146484
    9. 'from' → logprob: -13.199153900146484
    10. '   ' → logprob: -14.074153900146484

Token 298: ' import' (ID: 1588)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'import' (adapté à ' import') → logprob: -0.004094547126442194
    2. ' import' → logprob: -5.50409460067749
    3. 'app' → logprob: -11.254094123840332
    4. 'from' → logprob: -13.504094123840332
    5. ' app' → logprob: -13.629094123840332
    6. '   ' → logprob: -14.629094123840332
    7. '```' → logprob: -16.00409507751465
    8. '	import' → logprob: -16.62909507751465
    9. 'input' → logprob: -18.50409507751465
    10. ' from' → logprob: -19.00409507751465

Token 299: ' sys' (ID: 12228)
  Prédit: ' sys'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sys' → logprob: -0.001171056181192398
    2. 'sys' → logprob: -6.751171112060547
    3. '	sys' → logprob: -14.251171112060547
    4. '=sys' → logprob: -15.251171112060547
    5. '(sys' → logprob: -19.376171112060547
    6. ' io' → logprob: -20.001171112060547
    7. ' ' → logprob: -20.501171112060547
    8. '.sys' → logprob: -20.626171112060547
    9. '_sys' → logprob: -21.251171112060547
    10. 'io' → logprob: -21.251171112060547

Token 300: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.005689630284905434
    2. 'app' → logprob: -5.50568962097168
    3. '    
' → logprob: -7.38068962097168
    4. '
' → logprob: -7.38068962097168
    5. ' app' → logprob: -8.00568962097168
    6. '	app' → logprob: -10.88068962097168
    7. 'factor' → logprob: -13.25568962097168
    8. '        
' → logprob: -13.75568962097168
    9. 'input' → logprob: -13.88068962097168
    10. ' 
' → logprob: -13.88068962097168

Token 301: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11870519071817398
    2. 'app' → logprob: -2.6187052726745605
    3. ' app' → logprob: -3.2437052726745605
    4. '	app' → logprob: -11.743704795837402
    5. 'factor' → logprob: -13.368704795837402
    6. '    
' → logprob: -13.618704795837402
    7. 'App' → logprob: -13.993704795837402
    8. '   ' → logprob: -14.118704795837402
    9. '(app' → logprob: -15.118704795837402
    10. 'fa' → logprob: -15.243704795837402

Token 302: ' app' (ID: 1053)
  Prédit: 'app'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'app' (adapté à ' app') → logprob: -0.3412174880504608
    2. '   ' → logprob: -1.3412175178527832
    3. ' app' → logprob: -3.591217517852783
    4. '	app' → logprob: -13.091217041015625
    5. '    
' → logprob: -14.341217041015625
    6. 'App' → logprob: -14.841217041015625
    7. 'import' → logprob: -15.091217041015625
    8. '_app' → logprob: -15.841217041015625
    9. '   ' → logprob: -16.091217041015625
    10. '.app' → logprob: -16.466217041015625

Token 303: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.006968382745981216
    2. '=' → logprob: -5.2569684982299805
    3. '.run' → logprob: -7.0069684982299805
    4. '.' → logprob: -7.1319684982299805
    5. ' ' → logprob: -11.25696849822998
    6. ' .' → logprob: -11.63196849822998
    7. '.app' → logprob: -12.63196849822998
    8. '.=' → logprob: -13.50696849822998
    9. '.py' → logprob: -14.50696849822998
    10. '   ' → logprob: -14.88196849822998

Token 304: ' Factor' (ID: 63743)
  Prédit: 'Factor'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Factor' → logprob: -0.01815134845674038
    2. ' Factor' → logprob: -4.01815128326416
    3. 'Fact' → logprob: -13.89315128326416
    4. 'Factory' → logprob: -14.89315128326416
    5. '_factor' → logprob: -16.268152236938477
    6. ' Faktor' → logprob: -18.018152236938477
    7. ' Fact' → logprob: -18.393152236938477
    8. ' ' → logprob: -18.393152236938477
    9. ' ' → logprob: -19.143152236938477
    10. ' factorial' → logprob: -19.268152236938477

Token 305: 'ial' (ID: 563)
  Prédit: 'ial'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ial' → logprob: -0.0011968977050855756
    2. 'al' → logprob: -6.75119686126709
    3. 'ional' → logprob: -11.00119686126709
    4. 'orial' → logprob: -12.87619686126709
    5. ' factorial' → logprob: -12.87619686126709
    6. 'onal' → logprob: -13.37619686126709
    7. 'ion' → logprob: -13.87619686126709
    8. 'factor' → logprob: -14.00119686126709
    9. 'rial' → logprob: -15.12619686126709
    10. 'cial' → logprob: -15.12619686126709

Token 306: 'App' (ID: 2563)
  Prédit: 'App'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'App' → logprob: -3.128163257315464e-07
    2. 'app' → logprob: -15.75
    3. 'Calculator' → logprob: -16.875
    4. '<App' → logprob: -17.625
    5. ' App' → logprob: -18.0
    6. '(App' → logprob: -18.125
    7. '_app' → logprob: -18.5
    8. '	App' → logprob: -18.875
    9. '\App' → logprob: -19.0
    10. 'Ap' → logprob: -19.25

Token 307: '(sys' (ID: 41042)
  Prédit: '(sys'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(sys' → logprob: -5.049755782238208e-05
    2. '(' → logprob: -10.00005054473877
    3. 'sys' → logprob: -12.75005054473877
    4. '(
' → logprob: -13.50005054473877
    5. ' sys' → logprob: -14.62505054473877
    6. ' (' → logprob: -16.000049591064453
    7. '=sys' → logprob: -17.000049591064453
    8. '(s' → logprob: -17.125049591064453
    9. '(system' → logprob: -17.375049591064453
    10. '   ' → logprob: -17.500049591064453

Token 308: '.stdin' (ID: 93480)
  Prédit: '.stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.stdin' → logprob: -1.0564331205387134e-05
    2. '.stdout' → logprob: -11.62501049041748
    3. '.argv' → logprob: -14.37501049041748
    4. '.' → logprob: -14.37501049041748
    5. '.std' → logprob: -15.12501049041748
    6. 'stdin' → logprob: -15.62501049041748
    7. '.stderr' → logprob: -17.250011444091797
    8. ' .' → logprob: -18.250011444091797
    9. '.__' → logprob: -18.750011444091797
    10. '.st' → logprob: -19.125011444091797

Token 309: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.6240566083070007e-06
    2. ',
' → logprob: -13.875001907348633
    3. ' ,' → logprob: -14.875001907348633
    4. ')' → logprob: -16.500001907348633
    5. ',

' → logprob: -16.750001907348633
    6. '‌,' → logprob: -17.875001907348633
    7. '   ' → logprob: -18.250001907348633
    8. ',System' → logprob: -18.875001907348633
    9. '=sys' → logprob: -19.125001907348633
    10. ',)' → logprob: -19.500001907348633

Token 310: ' sys' (ID: 12228)
  Prédit: ' sys'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sys' → logprob: -0.3868710398674011
    2. 'sys' → logprob: -1.136871099472046
    3. '	sys' → logprob: -17.136871337890625
    4. '=sys' → logprob: -17.761871337890625
    5. '(sys' → logprob: -17.886871337890625
    6. '   ' → logprob: -19.886871337890625
    7. ' ' → logprob: -21.136871337890625
    8. '    ' → logprob: -22.136871337890625
    9. '.sys' → logprob: -22.386871337890625
    10. '/sys' → logprob: -22.636871337890625

Token 311: '.stdout' (ID: 59462)
  Prédit: '.stdout'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.stdout' → logprob: -2.2961512513575144e-05
    2. 'stdout' → logprob: -11.250022888183594
    3. '.stderr' → logprob: -12.000022888183594
    4. '.out' → logprob: -13.625022888183594
    5. 'out' → logprob: -14.000022888183594
    6. '.' → logprob: -14.000022888183594
    7. '.stdin' → logprob: -14.625022888183594
    8. '.__' → logprob: -15.750022888183594
    9. '   ' → logprob: -16.000022888183594
    10. '.std' → logprob: -16.875022888183594

Token 312: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.04859202727675438
    2. ')
' → logprob: -3.0485920906066895
    3. ')
' → logprob: -12.548591613769531
    4. ' )' → logprob: -14.423591613769531
    5. ' )
' → logprob: -15.423591613769531
    6. ')

' → logprob: -15.673591613769531
    7. '   ' → logprob: -15.923591613769531
    8. '),' → logprob: -16.54859161376953
    9. ').' → logprob: -17.04859161376953
    10. ')\
' → logprob: -18.17359161376953

Token 313: '   ' (ID: 271)
  Prédit: 'app'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'app' → logprob: -0.2520255446434021
    2. '   ' → logprob: -1.5020256042480469
    3. ' app' → logprob: -10.002025604248047
    4. '
' → logprob: -10.502025604248047
    5. '	app' → logprob: -10.752025604248047
    6. '(app' → logprob: -13.752025604248047
    7. '.app' → logprob: -14.377025604248047
    8. '    
' → logprob: -15.377025604248047
    9. '_app' → logprob: -15.502025604248047
    10. '/app' → logprob: -16.877025604248047

Token 314: ' app' (ID: 1053)
  Prédit: 'app'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'app' (adapté à ' app') → logprob: -6.704273118884885e-07
    2. ' app' → logprob: -14.250000953674316
    3. '   ' → logprob: -19.25
    4. '.app' → logprob: -21.0
    5. '	app' → logprob: -22.75
    6. '_app' → logprob: -24.625
    7. '(app' → logprob: -25.125
    8. '$app' → logprob: -25.875
    9. ''app' → logprob: -26.625
    10. 'appt' → logprob: -27.25

Token 315: '.run' (ID: 14795)
  Prédit: '.run'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.run' → logprob: -0.0019306590547785163
    2. '.' → logprob: -6.2519307136535645
    3. ' .' → logprob: -13.126930236816406
    4. '.
' → logprob: -17.126930236816406
    5. '.Run' → logprob: -18.876930236816406
    6. ' run' → logprob: -19.251930236816406
    7. 'run' → logprob: -20.001930236816406
    8. '.running' → logprob: -20.251930236816406
    9. '.start' → logprob: -20.376930236816406
    10. ' ' → logprob: -20.876930236816406

Token 316: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.00016063073417171836
    2. '()
' → logprob: -8.750160217285156
    3. '(' → logprob: -14.375160217285156
    4. ' ()' → logprob: -14.625160217285156
    5. '()

' → logprob: -15.250160217285156
    6. '()`' → logprob: -15.250160217285156
    7. '()<' → logprob: -15.250160217285156
    8. '()\' → logprob: -15.500160217285156
    9. '();' → logprob: -16.875160217285156
    10. '()"' → logprob: -17.250160217285156


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 314
Tokens correctement prédits (1ère position, stricte): 177
Tokens correctement prédits (1ère position, avec adaptation): 197
Tokens correctement prédits (top 10): 295
Précision stricte (1ère position): 56.37%
Précision adaptée (1ère position): 62.74%
Précision (top 10): 93.95%
================================================================================
