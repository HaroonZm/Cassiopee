================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:26:10
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
table = [
    ("E", "00011"),
    ("T", "00111"),
    ("A", "01000"),
    ("O", "01100"),
    ("N", "01110"),
    ("I", "10000"),
    ("S", "10100"),
    ("H", "10110"),
    ("R", "11000"),
    ("D", "11010"),
    ("L", "11100"),
    ("C", "11110"),
    ("U", "00000"),
    ("M", "00100"),
    ("W", "01010"),
    ("F", "01011"),
    ("Y", "01101"),
    ("G", "10010"),
    ("P", "111"),  # shorter code
    ("B", "10011"),
    ("V", "10111"),
    ("K", "11011"),
    ("X", "11101"),
    ("J", "00110"),
    ("Q", "01111"),
    ("Z", "11001"),
    ("-", "10101"),
    ("'", "00101"),
    (" ", "00001"),
    ("?", "11111")
]

# Create dictionary code->char for decoding
code_to_char = {}
for ch, code in table:
    code_to_char[code] = ch

import sys

for line in sys.stdin:
    line=line.strip()
    if not line:
        continue
    # First, convert characters to bitstring
    bits = ""
    for ch in line:
        if ch in code_to_char:
            # skip ?
            continue
        for c, cd in table:
            if c == ch:
                bits += cd
                break
        else:
            # Unknown char, skip
            pass
    # It won't work because input is coded, not normal letters
    # So actually, the input is coded characters that map to letters
    
    # The instruction and sample indicate: given the input line (like ?D-C'KOPUA),
    # decode it using the code_to_char dictionary by matching a prefix from bitstring
    
    # So the problem is to convert input string characters to bits first,
    # but no mapping given for characters like '?' or 'D' etc to bits:
    # Instead the table is from letter to code and code to letter.
    
    # Actually, from the sample:
    # Input: ?D-C'KOPUA
    # Output: PETER POTTER
    # The sample input is a string of mixed characters including letters and punctuation,
    # but letters of the input are from the table characters in the description.
    
    # So the problem is not to convert letters into bits but to convert input characters into
    # bits according to a code table, then split the bits into codes according to the code table,
    # then output the decoded letters.
    
    # Since we have no direct mapping from input characters to bit digits,
    # the problem is to build the code table of "input char" to bits
    
    # Wait, from the problem statement, it appears that the input characters are the code characters:
    # "11111 00011 11101 00010 ..." is a code table
    # The input lines are strings that encode letters to code, but encoded with a code table
    # The main decoding method is matching bits from input string as bits:
    #
    # The hint is to convert each input character into 5bit strings, but in the problem,
    # The input characters are one of: ? D - C ' K O P U A and so on.
    #
    # From the problem statement, looks like each char maps to bits - we can define a character->bits map
    # given by the code table: e.g. E->00011, T->00111 ...
    #
    # But input characters are not bits (0/1), but characters.
    #
    # So the problem statement says:
    # "短くして......あ、 「111」ならあります。じゃあ最初は「P」ですね。そうすると残りは「11」ですが..."
    # and sample input "?D-C'KOPUA" decodes to "PETER POTTER"
    #
    # The approach is possibly:
    # 1) Map each input character to a 5-bit code from table
    # 2) Concatenate the code strings (bitstring)
    # 3) Then decode bitstring into letters by matching code prefixes.
    #
    # But the input is not just letters but also '?', '-' etc.
    # so we should define a dictionary of input characters to their bits value (or string).
    #
    # From the code table and problem, the input characters used in the coded string are same as table characters.
    # Therefore, input characters map to single bits: maybe:

char_to_bits = {
    '?': '1',
    'D': '0',
    '-': '1',
    'C': '0',
    "'": '1',
    'K': '0',
    'O': '1',
    'P': '0',
    'U': '1',
    'A': '0',
    'L': '1',
    'M': '0',
    'G': '1',
    'Z': '0',
    'N': '1',
    'F': '0',
    'J': '1',
    'W': '0',
    'E': '1',
    'Y': '0',
    'R': '1',
    'Q': '0',
    'S': '1',
    'V': '0',
    'B': '1',
    'X': '0',
    '.': '1',
    ',': '0',
    ' ': '0',
}

# The above assignment is just a guess; too complicated.

# Actually we can just use the code table given in problem description:
# Table given as:
# 11111 00011 11101 00010 11110 01010 01110 01111 10100 00000
# So probably actual mapping is that the input characters are the letters with code converted to that sequence.

# Actually the problem is a classical "Morse-like" code:
# The table assigns letters to code strings of 0 and 1 digits.

# But the input is a string of the characters that stand for 0 and 1 bits, so we need to convert input characters to bits:

# The problem does not give this mapping explicitly; but the sample input "?D-C'KOPUA"
# maps to output "PETER POTTER"

# So probably, each input letter corresponds to a 0 or 1:

# Heuristic based on the sample input and output:
# Let's convert each input character to a bit:

# Let's map all letters to '0' and all punctuation to '1' or vice versa

# Input: ? D - C ' K O P U A
# Output: P E T E R   P O T T E R

# Let's map:

# Let's try:

# Mapping input characters to bits, considering only 0 and 1:

# From the problem, easier to hardcode a dictionary mapping input symbol to bit, from the insight that only characters from "0" or "1" correspond to bits.

# So let's just hardcode the conversion:

bit_dict = {
    '?': '1',
    'D': '0',
    '-': '1',
    'C': '0',
    "'": '1',
    'K': '0',
    'O': '1',
    'P': '0',
    'U': '1',
    'A': '0',
    'L': '1',
    'M': '0',
    'G': '1',
    'Z': '0',
    'N': '1',
    'F': '0',
    'J': '1',
    'W': '0',
    'E': '1',
    'Y': '0',
    'R': '1',
    'Q': '0',
    'S': '1',
    'V': '0',
    'B': '1',
    'X': '0',
    '.': '1',
    ',': '0',
    ' ': '0',
}

# Now, process input line:
# 1) Convert input chars to bitstring
# 2) Then decode bitstring to letters using prefix matching of code_to_char dict,
# Code to char mapping from the given table:

table2 = [
    ("E", "00011"),
    ("T", "00111"),
    ("A", "01000"),
    ("O", "01100"),
    ("N", "01110"),
    ("I", "10000"),
    ("S", "10100"),
    ("H", "10110"),
    ("R", "11000"),
    ("D", "11010"),
    ("L", "11100"),
    ("C", "11110"),
    ("U", "00000"),
    ("M", "00100"),
    ("W", "01010"),
    ("F", "01011"),
    ("Y", "01101"),
    ("G", "10010"),
    ("P", "111"),
    ("B", "10011"),
    ("V", "10111"),
    ("K", "11011"),
    ("X", "11101"),
    ("J", "00110"),
    ("Q", "01111"),
    ("Z", "11001"),
    ("-", "10101"),
    ("'", "00101"),
    (" ", "00001"),
]

codes = {}
for ch, c in table2:
    codes[c] = ch

def decode(bitstring):
    res = ""
    while bitstring:
        found = False
        # try to match prefixes from length 3 to 5:
        for l in range(3, 6):
            seg = bitstring[:l]
            if seg in codes:
                res += codes[seg]
                bitstring = bitstring[l:]
                found = True
                break
        if not found:
            # if can't decode, remove first bit and continue
            bitstring = bitstring[1:]
    return res

import sys

for line in sys.stdin:
    line = line.strip()
    if not line:
        continue
    bitstring = ""
    for c in line:
        if c in bit_dict:
            bitstring += bit_dict[c]
    decoded = decode(bitstring)
    # OK, just print decoded string with spaces restored if any
    print(decoded)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'table' (ID: 4202)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' [
' (ID: 4240)
  → Token d'amorce (pas de prédiction)

Token 3: '   ' (ID: 271)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0021349138114601374
    2. '   ' → logprob: -6.502134799957275
    3. '{' → logprob: -7.877134799957275
    4. '[]' → logprob: -9.127135276794434
    5. '[
' → logprob: -10.127135276794434
    6. '(' → logprob: -10.502135276794434
    7. ' [' → logprob: -10.502135276794434
    8. ' ' → logprob: -11.502135276794434
    9. '```' → logprob: -11.502135276794434
    10. ']' → logprob: -11.752135276794434

Token 4: ' ("' (ID: 7109)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.390975683927536
    2. '{' → logprob: -1.1409757137298584
    3. '   ' → logprob: -6.140975475311279
    4. '['' → logprob: -7.015975475311279
    5. '["' → logprob: -8.390975952148438
    6. ''' → logprob: -8.765975952148438
    7. '"' → logprob: -9.015975952148438
    8. '{'' → logprob: -9.140975952148438
    9. '```' → logprob: -9.140975952148438
    10. '(' → logprob: -9.265975952148438

Token 5: 'E' (ID: 36)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.8732936382293701
    2. 'John' → logprob: -2.24829363822937
    3. 'id' → logprob: -2.74829363822937
    4. 'Alice' → logprob: -2.87329363822937
    5. 'apple' → logprob: -2.87329363822937
    6. 'A' → logprob: -3.12329363822937
    7. '1' → logprob: -3.62329363822937
    8. 'u' → logprob: -3.74829363822937
    9. 'h' → logprob: -3.87329363822937
    10. 'H' → logprob: -3.99829363822937

Token 6: '",' (ID: 672)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'x' → logprob: -1.0627607107162476
    2. '"' → logprob: -1.6877607107162476
    3. '")' → logprob: -1.9377607107162476
    4. 'm' → logprob: -2.687760829925537
    5. 'n' → logprob: -2.937760829925537
    6. 'l' → logprob: -3.687760829925537
    7. 'X' → logprob: -3.812760829925537
    8. '=' → logprob: -3.937760829925537
    9. ' ")' → logprob: -4.312760829925537
    10. '"),' → logprob: -4.562760829925537

Token 7: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.2224149852991104
    2. '1' → logprob: -2.222414970397949
    3. '0' → logprob: -3.722414970397949
    4. '4' → logprob: -4.597414970397949
    5. '2' → logprob: -4.722414970397949
    6. ')' → logprob: -4.972414970397949
    7. '3' → logprob: -5.347414970397949
    8. '"C' → logprob: -5.472414970397949
    9. ' "' → logprob: -5.472414970397949
    10. '"D' → logprob: -5.847414970397949

Token 8: '000' (ID: 1302)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -1.4554985761642456
    2. 'mc' → logprob: -1.5804985761642456
    3. '2' → logprob: -2.455498695373535
    4. '4' → logprob: -2.955498695373535
    5. 'C' → logprob: -3.080498695373535
    6. '#' → logprob: -3.330498695373535
    7. 'E' → logprob: -3.455498695373535
    8. '1' → logprob: -3.580498695373535
    9. 'G' → logprob: -3.580498695373535
    10. 'MC' → logprob: -3.580498695373535

Token 9: '11' (ID: 994)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.6025627851486206
    2. '0' → logprob: -0.9775627851486206
    3. '")' → logprob: -4.35256290435791
    4. '"),' → logprob: -4.47756290435791
    5. '"' → logprob: -5.10256290435791
    6. '00' → logprob: -5.22756290435791
    7. '2' → logprob: -5.47756290435791
    8. 'A' → logprob: -5.47756290435791
    9. 'E' → logprob: -5.97756290435791
    10. '01' → logprob: -6.22756290435791

Token 10: '"),
' (ID: 8132)
  Prédit: '"),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"),' → logprob: -0.030753791332244873
    2. '),' → logprob: -4.1557536125183105
    3. '")' → logprob: -5.0307536125183105
    4. '"),
' → logprob: -5.2807536125183105
    5. ')' → logprob: -6.1557536125183105
    6. ' "),' → logprob: -8.030754089355469
    7. '0' → logprob: -8.655754089355469
    8. '",' → logprob: -9.530754089355469
    9. '),
' → logprob: -10.030754089355469
    10. ',' → logprob: -10.030754089355469

Token 11: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0006932547548785806
    2. '(' → logprob: -7.875693321228027
    3. '"' → logprob: -8.500693321228027
    4. '       ' → logprob: -10.125693321228027
    5. ',' → logprob: -11.000693321228027
    6. '   ' → logprob: -11.500693321228027
    7. '[' → logprob: -11.875693321228027
    8. ''' → logprob: -11.875693321228027
    9. ')' → logprob: -12.375693321228027
    10. '    ' → logprob: -12.500693321228027

Token 12: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.019490376114845276
    2. '(' → logprob: -4.0194902420043945
    3. '"' → logprob: -7.8944902420043945
    4. '[' → logprob: -8.269490242004395
    5. ' (' → logprob: -8.894490242004395
    6. ',' → logprob: -8.894490242004395
    7. '("' (adapté à ' ("') → logprob: -9.394490242004395
    8. '(
' → logprob: -9.519490242004395
    9. '       ' → logprob: -9.894490242004395
    10. ')' → logprob: -10.019490242004395

Token 13: 'T' (ID: 51)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.11791981011629105
    2. 'T' → logprob: -2.742919921875
    3. 'I' → logprob: -4.117919921875
    4. '"' → logprob: -4.242919921875
    5. 'N' → logprob: -5.742919921875
    6. 'W' → logprob: -5.867919921875
    7. 'Q' → logprob: -6.367919921875
    8. '"A' → logprob: -6.867919921875
    9. 'B' → logprob: -7.367919921875
    10. 'G' → logprob: -7.367919921875

Token 14: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.44724151492118835
    2. ',' → logprob: -1.0722415447235107
    3. '"' → logprob: -4.197241306304932
    4. ' ,' → logprob: -6.822241306304932
    5. ')' → logprob: -7.572241306304932
    6. '',' → logprob: -7.697241306304932
    7. ' ' → logprob: -7.947241306304932
    8. '","' → logprob: -8.32224178314209
    9. '`,' → logprob: -8.69724178314209
    10. '")' → logprob: -8.94724178314209

Token 15: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.0032285754568874836
    2. ''' → logprob: -6.628228664398193
    3. ')' → logprob: -6.753228664398193
    4. ' "' → logprob: -7.253228664398193
    5. ' ' → logprob: -12.003228187561035
    6. ' ' → logprob: -12.128228187561035
    7. 'space' → logprob: -12.253228187561035
    8. '),' → logprob: -13.003228187561035
    9. ',' → logprob: -13.253228187561035
    10. '[' → logprob: -14.628228187561035

Token 16: '001' (ID: 7659)
  Prédit: '101'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '101' → logprob: -0.27247360348701477
    2. '111' → logprob: -2.0224735736846924
    3. '110' → logprob: -2.2724735736846924
    4. '-' → logprob: -6.7724738121032715
    5. '001' → logprob: -7.8974738121032715
    6. '100' → logprob: -8.147473335266113
    7. '"' → logprob: -8.272473335266113
    8. '1' → logprob: -8.647473335266113
    9. '01' → logprob: -8.772473335266113
    10. '"-' → logprob: -9.147473335266113

Token 17: '11' (ID: 994)
  Prédit: '00'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '00' → logprob: -0.36640796065330505
    2. '1' → logprob: -2.116407871246338
    3. '01' → logprob: -2.366407871246338
    4. '10' → logprob: -2.866407871246338
    5. '0' → logprob: -3.491407871246338
    6. '11' → logprob: -5.491407871246338
    7. '")' → logprob: -7.366407871246338
    8. '"' → logprob: -9.366408348083496
    9. '100' → logprob: -9.491408348083496
    10. '101' → logprob: -9.991408348083496

Token 18: '"),
' (ID: 8132)
  Prédit: '"),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"),' → logprob: -0.493073970079422
    2. '")' → logprob: -0.9930739402770996
    3. ')' → logprob: -4.7430739402771
    4. '),' → logprob: -5.2430739402771
    5. '"),
' → logprob: -5.3680739402771
    6. '```' → logprob: -10.368074417114258
    7. '   ' → logprob: -10.493074417114258
    8. '"),
' → logprob: -10.868074417114258
    9. '"),

' → logprob: -11.368074417114258
    10. '),
' → logprob: -11.493074417114258

Token 19: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0004098195640835911
    2. ')' → logprob: -8.375410079956055
    3. '(' → logprob: -9.125410079956055
    4. ']' → logprob: -9.750410079956055
    5. '   ' → logprob: -12.250410079956055
    6. '("' → logprob: -13.500410079956055
    7. '[' → logprob: -13.750410079956055
    8. '       ' → logprob: -14.000410079956055
    9. '),' → logprob: -14.000410079956055
    10. '  ' → logprob: -14.500410079956055

Token 20: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.011997176334261894
    2. ')' → logprob: -4.636997222900391
    3. ']' → logprob: -6.636997222900391
    4. '(' → logprob: -7.136997222900391
    5. '("' (adapté à ' ("') → logprob: -9.76199722290039
    6. '),' → logprob: -10.01199722290039
    7. '       ' → logprob: -12.01199722290039
    8. '   ' → logprob: -12.51199722290039
    9. ' (' → logprob: -12.88699722290039
    10. '[' → logprob: -13.01199722290039

Token 21: 'A' (ID: 32)
  Prédit: 'A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.6222359538078308
    2. 'N' → logprob: -1.9972360134124756
    3. 'I' → logprob: -2.2472360134124756
    4. 'S' → logprob: -2.6222360134124756
    5. 'E' → logprob: -2.9972360134124756
    6. 'C' → logprob: -3.8722360134124756
    7. 'O' → logprob: -3.9972360134124756
    8. 'R' → logprob: -4.4972357749938965
    9. 'H' → logprob: -4.6222357749938965
    10. 'L' → logprob: -4.8722357749938965

Token 22: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.00392095698043704
    2. ' ",' → logprob: -6.378921031951904
    3. '","' → logprob: -7.003921031951904
    4. ',' → logprob: -7.378921031951904
    5. '"' → logprob: -7.753921031951904
    6. '")' → logprob: -9.378920555114746
    7. ' ' → logprob: -10.378920555114746
    8. '',' → logprob: -10.378920555114746
    9. '   ' → logprob: -10.628920555114746
    10. ',"' → logprob: -10.878920555114746

Token 23: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.06252853572368622
    2. ' "' → logprob: -2.937528610229492
    3. ')' → logprob: -5.062528610229492
    4. ''' → logprob: -7.062528610229492
    5. ' ' → logprob: -8.812528610229492
    6. ' )' → logprob: -9.687528610229492
    7. '<|end|>' → logprob: -9.687528610229492
    8. ' '' → logprob: -10.187528610229492
    9. 'space' → logprob: -10.812528610229492
    10. '[' → logprob: -11.062528610229492

Token 24: '010' (ID: 13522)
  Prédit: '001'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '001' → logprob: -0.4466142952442169
    2. '010' → logprob: -1.6966142654418945
    3. '000' → logprob: -1.8216142654418945
    4. '011' → logprob: -4.9466142654418945
    5. '"' → logprob: -5.3216142654418945
    6. '111' → logprob: -7.0716142654418945
    7. '101' → logprob: -7.5716142654418945
    8. '110' → logprob: -7.5716142654418945
    9. '100' → logprob: -7.5716142654418945
    10. ' ' → logprob: -8.321614265441895

Token 25: '00' (ID: 504)
  Prédit: '00'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '00' → logprob: -0.28423240780830383
    2. '11' → logprob: -2.0342323780059814
    3. '01' → logprob: -2.6592323780059814
    4. '10' → logprob: -3.4092323780059814
    5. '0' → logprob: -4.7842326164245605
    6. '000' → logprob: -5.9092326164245605
    7. '1' → logprob: -6.7842326164245605
    8. '")' → logprob: -7.0342326164245605
    9. '011' → logprob: -8.909232139587402
    10. '"' → logprob: -9.534232139587402

Token 26: '"),
' (ID: 8132)
  Prédit: '"),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"),' → logprob: -0.577904999256134
    2. '")' → logprob: -0.827904999256134
    3. '"),
' → logprob: -6.702905178070068
    4. ')' → logprob: -7.702905178070068
    5. '),' → logprob: -8.32790470123291
    6. '"' → logprob: -11.57790470123291
    7. '0' → logprob: -11.82790470123291
    8. '"),
' → logprob: -11.95290470123291
    9. ' "),' → logprob: -12.82790470123291
    10. '");' → logprob: -12.95290470123291

Token 27: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0020966108422726393
    2. '(' → logprob: -6.252096652984619
    3. '[' → logprob: -9.627096176147461
    4. ')' → logprob: -10.502096176147461
    5. '```' → logprob: -11.127096176147461
    6. '`' → logprob: -11.377096176147461
    7. '    ' → logprob: -11.627096176147461
    8. '  ' → logprob: -11.752096176147461
    9. '       ' → logprob: -11.752096176147461
    10. '"' → logprob: -12.002096176147461

Token 28: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18294969201087952
    2. '(' → logprob: -2.3079497814178467
    3. ')' → logprob: -2.8079497814178467
    4. ']' → logprob: -5.682949542999268
    5. '("' (adapté à ' ("') → logprob: -6.057949542999268
    6. '),' → logprob: -7.182949542999268
    7. '[' → logprob: -8.307950019836426
    8. '       ' → logprob: -9.057950019836426
    9. '(
' → logprob: -9.182950019836426
    10. '"' → logprob: -9.307950019836426

Token 29: 'O' (ID: 46)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.7021465301513672
    2. 'N' → logprob: -1.9521465301513672
    3. 'I' → logprob: -2.702146530151367
    4. 'C' → logprob: -2.702146530151367
    5. 'S' → logprob: -2.827146530151367
    6. 'L' → logprob: -3.202146530151367
    7. 'E' → logprob: -3.452146530151367
    8. 'M' → logprob: -3.452146530151367
    9. 'R' → logprob: -4.202146530151367
    10. 'G' → logprob: -4.577146530151367

Token 30: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.005645998287945986
    2. ',' → logprob: -6.130646228790283
    3. '"' → logprob: -6.255646228790283
    4. ' ",' → logprob: -7.380646228790283
    5. '","' → logprob: -8.255645751953125
    6. '010' → logprob: -8.505645751953125
    7. '")' → logprob: -9.130645751953125
    8. '',' → logprob: -9.505645751953125
    9. '0' → logprob: -9.505645751953125
    10. '000' → logprob: -10.255645751953125

Token 31: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.014585461467504501
    2. ' "' → logprob: -4.264585494995117
    3. ''' → logprob: -8.639585494995117
    4. ')' → logprob: -8.889585494995117
    5. ' ' → logprob: -9.764585494995117
    6. '010' → logprob: -11.139585494995117
    7. ' ' → logprob: -11.389585494995117
    8. '<|end|>' → logprob: -11.889585494995117
    9. 'space' → logprob: -12.764585494995117
    10. ' space' → logprob: -13.389585494995117

Token 32: '011' (ID: 17342)
  Prédit: '010'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '010' → logprob: -0.043917201459407806
    2. '"' → logprob: -3.293917179107666
    3. '001' → logprob: -5.418917179107666
    4. '011' → logprob: -7.418917179107666
    5. '000' → logprob: -7.543917179107666
    6. '0' → logprob: -9.168917655944824
    7. ''' → logprob: -9.418917655944824
    8. '100' → logprob: -10.168917655944824
    9. '")' → logprob: -10.793917655944824
    10. '```' → logprob: -10.918917655944824

Token 33: '00' (ID: 504)
  Prédit: '00'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '00' → logprob: -0.41763177514076233
    2. '0' → logprob: -1.66763174533844
    3. '01' → logprob: -2.5426318645477295
    4. '1' → logprob: -3.4176318645477295
    5. '10' → logprob: -3.7926318645477295
    6. '11' → logprob: -4.04263162612915
    7. '"' → logprob: -7.16763162612915
    8. '")' → logprob: -9.167632102966309
    9. '000' → logprob: -9.167632102966309
    10. ')' → logprob: -10.105132102966309

Token 34: '"),
' (ID: 8132)
  Prédit: '"),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"),' → logprob: -0.08286639302968979
    2. '")' → logprob: -2.5828664302825928
    3. '"),
' → logprob: -5.957866191864014
    4. '),' → logprob: -6.832866191864014
    5. ')' → logprob: -8.207866668701172
    6. '"),
' → logprob: -11.832866668701172
    7. '   ' → logprob: -11.832866668701172
    8. '"' → logprob: -12.582866668701172
    9. '");' → logprob: -12.832866668701172
    10. '```' → logprob: -13.207866668701172

Token 35: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.016983069479465485
    2. ')' → logprob: -4.3919830322265625
    3. ']' → logprob: -5.5169830322265625
    4. '(' → logprob: -7.8919830322265625
    5. '("' → logprob: -11.141983032226562
    6. '[' → logprob: -11.516983032226562
    7. '```' → logprob: -11.641983032226562
    8. '"' → logprob: -11.891983032226562
    9. '   ' → logprob: -12.141983032226562
    10. '),' → logprob: -12.516983032226562

Token 36: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01852143555879593
    2. '(' → logprob: -4.518521308898926
    3. ')' → logprob: -5.518521308898926
    4. '("' (adapté à ' ("') → logprob: -6.268521308898926
    5. ']' → logprob: -6.518521308898926
    6. '  ' → logprob: -11.518521308898926
    7. '(
' → logprob: -11.518521308898926
    8. '       ' → logprob: -11.643521308898926
    9. '[' → logprob: -11.768521308898926
    10. '"' → logprob: -12.393521308898926

Token 37: 'N' (ID: 45)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.10609897971153259
    2. '"N' → logprob: -3.3560988903045654
    3. '"L' → logprob: -3.8560988903045654
    4. '"P' → logprob: -4.4810991287231445
    5. '"I' → logprob: -5.1060991287231445
    6. '"G' → logprob: -5.4810991287231445
    7. '"B' → logprob: -5.7310991287231445
    8. '"D' → logprob: -5.8560991287231445
    9. '"K' → logprob: -6.1060991287231445
    10. '"C' → logprob: -6.2310991287231445

Token 38: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.00016957100888248533
    2. ' ",' → logprob: -9.87516975402832
    3. ',' → logprob: -10.00016975402832
    4. '","' → logprob: -10.37516975402832
    5. '',' → logprob: -11.00016975402832
    6. '")' → logprob: -12.00016975402832
    7. '"' → logprob: -12.25016975402832
    8. '(",' → logprob: -12.37516975402832
    9. '   ' → logprob: -12.87516975402832
    10. '<|end|>' → logprob: -13.25016975402832

Token 39: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.033762916922569275
    2. ' "' → logprob: -3.4087629318237305
    3. ''' → logprob: -9.40876293182373
    4. ')' → logprob: -11.03376293182373
    5. ' ' → logprob: -11.65876293182373
    6. '010' → logprob: -13.03376293182373
    7. '")' → logprob: -13.53376293182373
    8. '`' → logprob: -14.03376293182373
    9. '011' → logprob: -14.15876293182373
    10. ' '' → logprob: -14.53376293182373

Token 40: '011' (ID: 17342)
  Prédit: '011'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '011' → logprob: -0.08159304410219193
    2. '100' → logprob: -3.4565930366516113
    3. '010' → logprob: -3.4565930366516113
    4. '001' → logprob: -4.331593036651611
    5. '000' → logprob: -6.706593036651611
    6. '"' → logprob: -7.706593036651611
    7. '101' → logprob: -8.95659351348877
    8. '```' → logprob: -9.20659351348877
    9. '0' → logprob: -9.83159351348877
    10. ''' → logprob: -10.20659351348877

Token 41: '10' (ID: 702)
  Prédit: '01'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '01' → logprob: -0.7533237338066101
    2. '10' → logprob: -1.5033237934112549
    3. '00' → logprob: -1.8783237934112549
    4. '11' → logprob: -1.8783237934112549
    5. '0' → logprob: -7.253323554992676
    6. '1' → logprob: -8.253323554992676
    7. '```' → logprob: -10.503323554992676
    8. '001' → logprob: -10.565823554992676
    9. '011' → logprob: -10.815823554992676
    10. '``' → logprob: -11.628323554992676

Token 42: '"),
' (ID: 8132)
  Prédit: '"),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"),' → logprob: -0.028599869459867477
    2. '")' → logprob: -3.903599977493286
    3. '),' → logprob: -5.403599739074707
    4. '"),
' → logprob: -5.778599739074707
    5. ')' → logprob: -7.903599739074707
    6. '   ' → logprob: -10.403599739074707
    7. '");' → logprob: -12.278599739074707
    8. '```' → logprob: -12.403599739074707
    9. '",' → logprob: -12.528599739074707
    10. '),
' → logprob: -12.528599739074707

Token 43: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.002969857305288315
    2. '(' → logprob: -6.502969741821289
    3. ']' → logprob: -7.252969741821289
    4. ')' → logprob: -7.252969741821289
    5. '("' → logprob: -10.502969741821289
    6. '[' → logprob: -12.127969741821289
    7. '       ' → logprob: -12.502969741821289
    8. '   ' → logprob: -12.752969741821289
    9. '),' → logprob: -12.877969741821289
    10. '  ' → logprob: -13.127969741821289

Token 44: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.028432566672563553
    2. ']' → logprob: -4.278432369232178
    3. '(' → logprob: -4.653432369232178
    4. '("' (adapté à ' ("') → logprob: -5.778432369232178
    5. ')' → logprob: -6.528432369232178
    6. '       ' → logprob: -11.153432846069336
    7. '[' → logprob: -11.403432846069336
    8. '"' → logprob: -11.653432846069336
    9. '(
' → logprob: -11.778432846069336
    10. '  ' → logprob: -12.278432846069336

Token 45: 'I' (ID: 40)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -1.3186545372009277
    2. 'I' → logprob: -1.6936545372009277
    3. 'S' → logprob: -1.6936545372009277
    4. 'R' → logprob: -2.6936545372009277
    5. '"S' → logprob: -2.6936545372009277
    6. 'L' → logprob: -3.1936545372009277
    7. '"L' → logprob: -3.1936545372009277
    8. 'D' → logprob: -3.5686545372009277
    9. '"D' → logprob: -3.6936545372009277
    10. '"I' → logprob: -4.193654537200928

Token 46: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.013192233629524708
    2. ',' → logprob: -4.388192176818848
    3. '',' → logprob: -8.513192176818848
    4. ' ,' → logprob: -9.263192176818848
    5. '<|end|>' → logprob: -9.513192176818848
    6. '"' → logprob: -9.638192176818848
    7. ' ",' → logprob: -9.763192176818848
    8. ' ' → logprob: -9.888192176818848
    9. '")' → logprob: -9.888192176818848
    10. '`,' → logprob: -10.138192176818848

Token 47: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.01641579158604145
    2. ' "' → logprob: -4.141415596008301
    3. ''' → logprob: -8.0164155960083
    4. ' ' → logprob: -11.0164155960083
    5. '010' → logprob: -11.2664155960083
    6. ')' → logprob: -11.3914155960083
    7. '011' → logprob: -13.1414155960083
    8. '001' → logprob: -13.2664155960083
    9. ' '' → logprob: -13.7664155960083
    10. '012' → logprob: -14.0164155960083

Token 48: '100' (ID: 1353)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.06317301094532013
    2. '100' → logprob: -3.9381730556488037
    3. '011' → logprob: -3.9381730556488037
    4. '010' → logprob: -4.438172817230225
    5. '000' → logprob: -5.313172817230225
    6. '001' → logprob: -5.563172817230225
    7. '0' → logprob: -7.063172817230225
    8. ''' → logprob: -7.938172817230225
    9. ' "' → logprob: -9.063173294067383
    10. ' ' → logprob: -9.313173294067383

Token 49: '00' (ID: 504)
  Prédit: '00'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '00' → logprob: -0.3473096191883087
    2. '01' → logprob: -1.5973095893859863
    3. '10' → logprob: -3.0973095893859863
    4. '11' → logprob: -3.0973095893859863
    5. '0' → logprob: -7.722309589385986
    6. '1' → logprob: -9.347310066223145
    7. '"' → logprob: -10.472310066223145
    8. '000' → logprob: -11.097310066223145
    9. '")' → logprob: -11.097310066223145
    10. ')' → logprob: -11.347310066223145

Token 50: '"),
' (ID: 8132)
  Prédit: '"),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"),' → logprob: -0.06293920427560806
    2. '")' → logprob: -2.812939167022705
    3. '),' → logprob: -7.562939167022705
    4. '"),
' → logprob: -8.187939643859863
    5. ')' → logprob: -8.812939643859863
    6. '"' → logprob: -11.562939643859863
    7. ''),' → logprob: -12.312939643859863
    8. ' "),' → logprob: -12.687939643859863
    9. '",' → logprob: -13.062939643859863
    10. '   ' → logprob: -13.687939643859863

Token 51: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004781119059771299
    2. '(' → logprob: -5.504781246185303
    3. ')' → logprob: -7.754781246185303
    4. '("' → logprob: -8.629780769348145
    5. '       ' → logprob: -10.129780769348145
    6. ']' → logprob: -10.879780769348145
    7. '),' → logprob: -12.004780769348145
    8. '    ' → logprob: -12.379780769348145
    9. '  ' → logprob: -12.379780769348145
    10. '"' → logprob: -12.504780769348145

Token 52: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1814330667257309
    2. '("' (adapté à ' ("') → logprob: -1.931433081626892
    3. '(' → logprob: -4.306433200836182
    4. ')' → logprob: -5.431433200836182
    5. ']' → logprob: -6.931433200836182
    6. '       ' → logprob: -7.306433200836182
    7. '<|end|>' → logprob: -8.306432723999023
    8. '(
' → logprob: -8.431432723999023
    9. ' ("' → logprob: -8.431432723999023
    10. '  ' → logprob: -8.556432723999023

Token 53: 'S' (ID: 50)
  Prédit: 'S'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'S' → logprob: -0.621138870716095
    2. '"S' → logprob: -1.2461388111114502
    3. '"' → logprob: -2.12113881111145
    4. '"H' → logprob: -4.371139049530029
    5. '"L' → logprob: -4.746139049530029
    6. 'H' → logprob: -4.871139049530029
    7. 'L' → logprob: -5.121139049530029
    8. 'R' → logprob: -5.496139049530029
    9. '("' → logprob: -5.621139049530029
    10. '"D' → logprob: -6.371139049530029

Token 54: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.01248717401176691
    2. ',' → logprob: -5.012487411499023
    3. '<|end|>' → logprob: -5.887487411499023
    4. '"' → logprob: -7.012487411499023
    5. '',' → logprob: -7.137487411499023
    6. ' ' → logprob: -8.012487411499023
    7. '")' → logprob: -8.512487411499023
    8. '`,' → logprob: -8.637487411499023
    9. '","' → logprob: -8.762487411499023
    10. ')' → logprob: -9.387487411499023

Token 55: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.0047489795833826065
    2. ' "' → logprob: -5.629748821258545
    3. ''' → logprob: -7.129748821258545
    4. ')' → logprob: -8.754749298095703
    5. '<|end|>' → logprob: -9.254749298095703
    6. ' ' → logprob: -9.879749298095703
    7. '`' → logprob: -10.879749298095703
    8. '100' → logprob: -12.504749298095703
    9. ' '' → logprob: -12.754749298095703
    10. ' ' → logprob: -13.254749298095703

Token 56: '101' (ID: 7959)
  Prédit: '100'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '100' → logprob: -0.008837802335619926
    2. '101' → logprob: -4.758837699890137
    3. '110' → logprob: -9.883837699890137
    4. '010' → logprob: -10.383837699890137
    5. '001' → logprob: -10.383837699890137
    6. '000' → logprob: -10.383837699890137
    7. '111' → logprob: -10.883837699890137
    8. '"' → logprob: -11.133837699890137
    9. '```' → logprob: -11.133837699890137
    10. '011' → logprob: -11.883837699890137

Token 57: '00' (ID: 504)
  Prédit: '00'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '00' → logprob: -0.1713659167289734
    2. '01' → logprob: -2.546365976333618
    3. '10' → logprob: -2.796365976333618
    4. '11' → logprob: -4.046365737915039
    5. '0' → logprob: -7.671365737915039
    6. '1' → logprob: -9.171365737915039
    7. '000' → logprob: -11.358865737915039
    8. '001' → logprob: -12.233865737915039
    9. ')' → logprob: -13.233865737915039
    10. '"' → logprob: -13.233865737915039

Token 58: '"),
' (ID: 8132)
  Prédit: '"),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"),' → logprob: -0.01667374186217785
    2. '")' → logprob: -4.766673564910889
    3. '),' → logprob: -5.016673564910889
    4. ')' → logprob: -6.891673564910889
    5. '"),
' → logprob: -8.516674041748047
    6. '   ' → logprob: -8.891674041748047
    7. ''),' → logprob: -11.391674041748047
    8. '",' → logprob: -11.641674041748047
    9. '"' → logprob: -11.766674041748047
    10. '```' → logprob: -12.266674041748047

Token 59: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004868926480412483
    2. '(' → logprob: -5.504868984222412
    3. ')' → logprob: -7.254868984222412
    4. '       ' → logprob: -10.379868507385254
    5. '    ' → logprob: -11.379868507385254
    6. '),' → logprob: -11.379868507385254
    7. '  ' → logprob: -11.629868507385254
    8. '```' → logprob: -12.504868507385254
    9. '("' → logprob: -12.754868507385254
    10. '[' → logprob: -12.879868507385254

Token 60: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.029093489050865173
    2. ')' → logprob: -3.9040935039520264
    3. ']' → logprob: -5.279093265533447
    4. '(' → logprob: -5.904093265533447
    5. '("' (adapté à ' ("') → logprob: -7.529093265533447
    6. '	' → logprob: -9.779093742370605
    7. '       ' → logprob: -10.529093742370605
    8. '),' → logprob: -11.154093742370605
    9. '("\' → logprob: -11.154093742370605
    10. ' (' → logprob: -11.904093742370605

Token 61: 'H' (ID: 39)
  Prédit: 'H'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.5564648509025574
    2. 'R' → logprob: -1.0564649105072021
    3. '"' → logprob: -3.431464910507202
    4. '"H' → logprob: -3.806464910507202
    5. 'U' → logprob: -5.181464672088623
    6. 'C' → logprob: -5.431464672088623
    7. 'L' → logprob: -5.556464672088623
    8. 'E' → logprob: -5.681464672088623
    9. 'D' → logprob: -6.431464672088623
    10. 'W' → logprob: -7.306464672088623

Token 62: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.0007267289329320192
    2. ',' → logprob: -7.500726699829102
    3. '',' → logprob: -9.125726699829102
    4. '"' → logprob: -11.000726699829102
    5. '`,' → logprob: -11.500726699829102
    6. '")' → logprob: -11.625726699829102
    7. ' ",' → logprob: -11.750726699829102
    8. ')' → logprob: -12.375726699829102
    9. '","' → logprob: -12.375726699829102
    10. '<|end|>' → logprob: -12.375726699829102

Token 63: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.04346064105629921
    2. '101' → logprob: -3.2934606075286865
    3. ' ' → logprob: -5.793460845947266
    4. ''' → logprob: -6.418460845947266
    5. '100' → logprob: -7.793460845947266
    6. ' "' → logprob: -8.543460845947266
    7. '`' → logprob: -9.918460845947266
    8. '105' → logprob: -10.668460845947266
    9. '102' → logprob: -11.543460845947266
    10. '106' → logprob: -11.543460845947266

Token 64: '101' (ID: 7959)
  Prédit: '101'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '101' → logprob: -0.014634108170866966
    2. '100' → logprob: -4.264634132385254
    3. '110' → logprob: -7.889634132385254
    4. '001' → logprob: -10.639634132385254
    5. '000' → logprob: -10.764634132385254
    6. ' ' → logprob: -10.889634132385254
    7. '111' → logprob: -11.264634132385254
    8. '010' → logprob: -12.139634132385254
    9. '```' → logprob: -12.139634132385254
    10. '102' → logprob: -13.639634132385254

Token 65: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.2131599634885788
    2. '01' → logprob: -1.9631599187850952
    3. '11' → logprob: -3.3381600379943848
    4. '00' → logprob: -4.213160037994385
    5. '0' → logprob: -7.088160037994385
    6. '1' → logprob: -8.338159561157227
    7. '010' → logprob: -10.025659561157227
    8. '100' → logprob: -10.525659561157227
    9. ')' → logprob: -10.713159561157227
    10. '000' → logprob: -10.963159561157227

Token 66: '"),
' (ID: 8132)
  Prédit: '"),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"),' → logprob: -0.011392507702112198
    2. '")' → logprob: -4.761392593383789
    3. '),' → logprob: -6.261392593383789
    4. '"),
' → logprob: -7.261392593383789
    5. ')' → logprob: -9.386392593383789
    6. '   ' → logprob: -9.886392593383789
    7. '```' → logprob: -12.011392593383789
    8. '"' → logprob: -12.261392593383789
    9. '",' → logprob: -12.261392593383789
    10. ''),' → logprob: -12.636392593383789

Token 67: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.002725109690800309
    2. ')' → logprob: -6.252725124359131
    3. '(' → logprob: -7.252725124359131
    4. '),' → logprob: -9.877724647521973
    5. '       ' → logprob: -11.377724647521973
    6. ']' → logprob: -12.377724647521973
    7. '```' → logprob: -12.377724647521973
    8. '  ' → logprob: -12.627724647521973
    9. '    ' → logprob: -12.752724647521973
    10. '<|end|>' → logprob: -12.752724647521973

Token 68: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08013401180505753
    2. ']' → logprob: -2.9551339149475098
    3. ')' → logprob: -3.8301339149475098
    4. '(' → logprob: -5.95513391494751
    5. '("' (adapté à ' ("') → logprob: -7.58013391494751
    6. '),' → logprob: -10.330134391784668
    7. '       ' → logprob: -10.830134391784668
    8. '	' → logprob: -11.205134391784668
    9. ' (' → logprob: -11.455134391784668
    10. '  ' → logprob: -11.955134391784668

Token 69: 'R' (ID: 49)
  Prédit: 'R'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'R' → logprob: -0.1552136391401291
    2. 'D' → logprob: -2.7802135944366455
    3. 'E' → logprob: -3.9052135944366455
    4. 'M' → logprob: -4.405213832855225
    5. 'U' → logprob: -4.405213832855225
    6. 'C' → logprob: -4.530213832855225
    7. '"' → logprob: -4.905213832855225
    8. 'L' → logprob: -5.155213832855225
    9. 'F' → logprob: -6.405213832855225
    10. '"D' → logprob: -6.655213832855225

Token 70: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.0010610329918563366
    2. '',' → logprob: -7.751060962677002
    3. '<|end|>' → logprob: -8.75106143951416
    4. ',' → logprob: -8.87606143951416
    5. ' ",' → logprob: -9.12606143951416
    6. '")' → logprob: -9.25106143951416
    7. ')' → logprob: -10.25106143951416
    8. '","' → logprob: -10.50106143951416
    9. '`,' → logprob: -11.00106143951416
    10. '"' → logprob: -11.12606143951416

Token 71: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.014958166517317295
    2. ''' → logprob: -4.764958381652832
    3. ' ' → logprob: -5.639958381652832
    4. ' "' → logprob: -6.139958381652832
    5. '101' → logprob: -8.014958381652832
    6. ')' → logprob: -8.889958381652832
    7. '`' → logprob: -9.514958381652832
    8. '100' → logprob: -11.139958381652832
    9. '102' → logprob: -11.389958381652832
    10. '110' → logprob: -11.514958381652832

Token 72: '110' (ID: 7920)
  Prédit: '110'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '110' → logprob: -0.0016278100665658712
    2. '111' → logprob: -7.0016279220581055
    3. '101' → logprob: -8.501627922058105
    4. ' ' → logprob: -8.876627922058105
    5. '000' → logprob: -9.126627922058105
    6. '010' → logprob: -9.126627922058105
    7. '100' → logprob: -9.376627922058105
    8. '```' → logprob: -10.376627922058105
    9. ')' → logprob: -11.501627922058105
    10. '001' → logprob: -11.751627922058105

Token 73: '00' (ID: 504)
  Prédit: '00'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '00' → logprob: -0.03845522552728653
    2. '10' → logprob: -4.163455009460449
    3. '01' → logprob: -4.163455009460449
    4. '11' → logprob: -5.038455009460449
    5. '0' → logprob: -9.41345500946045
    6. '1' → logprob: -11.10095500946045
    7. '000' → logprob: -11.16345500946045
    8. '```' → logprob: -11.35095500946045
    9. '"' → logprob: -13.72595500946045
    10. ')' → logprob: -13.91345500946045

Token 74: '"),
' (ID: 8132)
  Prédit: '"),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"),' → logprob: -0.045225225389003754
    2. '),' → logprob: -3.170225143432617
    3. '")' → logprob: -6.545225143432617
    4. ')' → logprob: -7.545225143432617
    5. '   ' → logprob: -9.170225143432617
    6. '"),
' → logprob: -9.295225143432617
    7. ''),' → logprob: -10.545225143432617
    8. '```' → logprob: -11.295225143432617
    9. '",' → logprob: -11.420225143432617
    10. ' "),' → logprob: -12.170225143432617

Token 75: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00026455431361682713
    2. '(' → logprob: -8.625264167785645
    3. '```' → logprob: -10.000264167785645
    4. ')' → logprob: -10.750264167785645
    5. '       ' → logprob: -12.375264167785645
    6. '   ' → logprob: -12.500264167785645
    7. '`' → logprob: -13.125264167785645
    8. '  ' → logprob: -13.125264167785645
    9. '("' → logprob: -13.375264167785645
    10. '<|end|>' → logprob: -13.500264167785645

Token 76: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00023810577113181353
    2. '(' → logprob: -8.625238418579102
    3. ')' → logprob: -10.375238418579102
    4. '("' (adapté à ' ("') → logprob: -11.125238418579102
    5. '       ' → logprob: -12.500238418579102
    6. ']' → logprob: -12.750238418579102
    7. '  ' → logprob: -13.500238418579102
    8. '   ' → logprob: -13.500238418579102
    9. '```' → logprob: -13.875238418579102
    10. '[' → logprob: -15.000238418579102

Token 77: 'D' (ID: 35)
  Prédit: '110'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '110' → logprob: -0.49446749687194824
    2. 'C' → logprob: -1.7444674968719482
    3. 'D' → logprob: -2.9944674968719482
    4. '111' → logprob: -3.1194674968719482
    5. 'U' → logprob: -3.2444674968719482
    6. '"' → logprob: -3.7444674968719482
    7. 'L' → logprob: -4.369467735290527
    8. 'W' → logprob: -4.869467735290527
    9. 'P' → logprob: -5.369467735290527
    10. 'G' → logprob: -5.494467735290527

Token 78: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.0019783570896834135
    2. ',' → logprob: -7.001978397369385
    3. '<|end|>' → logprob: -8.001977920532227
    4. '',' → logprob: -8.126977920532227
    5. '")' → logprob: -9.001977920532227
    6. ')' → logprob: -9.126977920532227
    7. ' ",' → logprob: -9.501977920532227
    8. '`,' → logprob: -10.501977920532227
    9. '"' → logprob: -10.501977920532227
    10. '","' → logprob: -10.876977920532227

Token 79: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.05326210334897041
    2. ' "' → logprob: -3.0532619953155518
    3. ')' → logprob: -5.928262233734131
    4. ''' → logprob: -7.178262233734131
    5. ' ' → logprob: -7.428262233734131
    6. '<|end|>' → logprob: -7.803262233734131
    7. '[' → logprob: -10.053261756896973
    8. ' space' → logprob: -10.178261756896973
    9. '```' → logprob: -10.803261756896973
    10. '`' → logprob: -10.803261756896973

Token 80: '110' (ID: 7920)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.35062330961227417
    2. '110' → logprob: -1.225623369216919
    3. ' ' → logprob: -6.97562313079834
    4. ''' → logprob: -7.35062313079834
    5. '111' → logprob: -7.60062313079834
    6. ' "' → logprob: -10.10062313079834
    7. '`' → logprob: -11.22562313079834
    8. '   ' → logprob: -11.72562313079834
    9. ')' → logprob: -12.10062313079834
    10. '  ' → logprob: -12.28812313079834

Token 81: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.12127113342285156
    2. '01' → logprob: -2.3712711334228516
    3. '00' → logprob: -4.371271133422852
    4. '11' → logprob: -4.871271133422852
    5. '100' → logprob: -7.996271133422852
    6. '010' → logprob: -8.871271133422852
    7. '110' → logprob: -11.433771133422852
    8. '0' → logprob: -11.558771133422852
    9. '"' → logprob: -11.808771133422852
    10. '001' → logprob: -11.871271133422852

Token 82: '"),
' (ID: 8132)
  Prédit: '"),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"),' → logprob: -0.012720718048512936
    2. '")' → logprob: -5.137720584869385
    3. '),' → logprob: -5.387720584869385
    4. '"),
' → logprob: -6.262720584869385
    5. ')' → logprob: -8.512721061706543
    6. '   ' → logprob: -9.637721061706543
    7. '"),
' → logprob: -12.512721061706543
    8. '"),

' → logprob: -12.512721061706543
    9. '",' → logprob: -12.637721061706543
    10. ''),' → logprob: -12.887721061706543

Token 83: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0004800048773176968
    2. ')' → logprob: -8.125479698181152
    3. '(' → logprob: -9.250479698181152
    4. '       ' → logprob: -11.000479698181152
    5. '("' → logprob: -11.125479698181152
    6. '   ' → logprob: -11.250479698181152
    7. '```' → logprob: -11.375479698181152
    8. ']' → logprob: -12.000479698181152
    9. '<|end|>' → logprob: -12.000479698181152
    10. '  ' → logprob: -12.000479698181152

Token 84: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10684936493635178
    2. ']' → logprob: -2.356849431991577
    3. '(' → logprob: -5.106849193572998
    4. '("' (adapté à ' ("') → logprob: -7.981849193572998
    5. ')' → logprob: -8.731849670410156
    6. ' (' → logprob: -10.981849670410156
    7. '[' → logprob: -11.356849670410156
    8. '  ' → logprob: -11.981849670410156
    9. '       ' → logprob: -11.981849670410156
    10. '(
' → logprob: -12.606849670410156

Token 85: 'L' (ID: 43)
  Prédit: '("'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.9041290879249573
    2. '"L' → logprob: -1.5291290283203125
    3. '"' → logprob: -2.0291290283203125
    4. '"G' → logprob: -2.1541290283203125
    5. '"C' → logprob: -2.7791290283203125
    6. '"K' → logprob: -3.2791290283203125
    7. '"E' → logprob: -4.7791290283203125
    8. '"W' → logprob: -5.7791290283203125
    9. '(' → logprob: -5.9041290283203125
    10. 'L' → logprob: -6.0291290283203125

Token 86: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.018991397693753242
    2. ',' → logprob: -4.143991470336914
    3. '',' → logprob: -6.518991470336914
    4. '<|end|>' → logprob: -7.393991470336914
    5. ' ,' → logprob: -8.268991470336914
    6. '`,' → logprob: -8.768991470336914
    7. ')' → logprob: -9.143991470336914
    8. '"' → logprob: -9.268991470336914
    9. ' ",' → logprob: -9.393991470336914
    10. '","' → logprob: -9.893991470336914

Token 87: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.010152322240173817
    2. ')' → logprob: -5.635152339935303
    3. ' "' → logprob: -5.760152339935303
    4. ''' → logprob: -6.260152339935303
    5. '<|end|>' → logprob: -7.260152339935303
    6. ' ' → logprob: -7.385152339935303
    7. '`' → logprob: -10.260151863098145
    8. 'space' → logprob: -11.135151863098145
    9. '```' → logprob: -11.135151863098145
    10. '")' → logprob: -11.385151863098145

Token 88: '111' (ID: 8780)
  Prédit: '111'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '111' → logprob: -0.00017123986617662013
    2. ' ' → logprob: -9.625171661376953
    3. '110' → logprob: -10.125171661376953
    4. '"' → logprob: -10.500171661376953
    5. '```' → logprob: -11.500171661376953
    6. '000' → logprob: -11.750171661376953
    7. ''' → logprob: -12.250171661376953
    8. '011' → logprob: -13.187671661376953
    9. '``' → logprob: -13.187671661376953
    10. '1' → logprob: -13.250171661376953

Token 89: '00' (ID: 504)
  Prédit: '00'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '00' → logprob: -0.004608726128935814
    2. '0' → logprob: -6.004608631134033
    3. '01' → logprob: -6.879608631134033
    4. '10' → logprob: -7.004608631134033
    5. '11' → logprob: -9.379609107971191
    6. '000' → logprob: -9.504609107971191
    7. '1' → logprob: -11.067109107971191
    8. '```' → logprob: -11.942109107971191
    9. ' ' → logprob: -13.192109107971191
    10. '001' → logprob: -13.317109107971191

Token 90: '"),
' (ID: 8132)
  Prédit: '"),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"),' → logprob: -0.07908079028129578
    2. '")' → logprob: -2.704080820083618
    3. '),' → logprob: -5.204080581665039
    4. '"),
' → logprob: -6.079080581665039
    5. ')' → logprob: -7.329080581665039
    6. '   ' → logprob: -7.579080581665039
    7. '",' → logprob: -9.579080581665039
    8. '```' → logprob: -10.704080581665039
    9. '"' → logprob: -11.079080581665039
    10. '");' → logprob: -11.704080581665039

Token 91: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.007427014876157045
    2. ')' → logprob: -5.757427215576172
    3. '       ' → logprob: -6.382427215576172
    4. '("' → logprob: -6.757427215576172
    5. '(' → logprob: -7.382427215576172
    6. '```' → logprob: -8.382427215576172
    7. '<|end|>' → logprob: -8.757427215576172
    8. ' ("' → logprob: -8.882427215576172
    9. '  ' → logprob: -9.757427215576172
    10. '),' → logprob: -10.382427215576172

Token 92: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.007771539967507124
    2. ']' → logprob: -5.0077714920043945
    3. '("' (adapté à ' ("') → logprob: -7.6327714920043945
    4. '(' → logprob: -8.132771492004395
    5. ')' → logprob: -8.382771492004395
    6. '       ' → logprob: -11.632771492004395
    7. '  ' → logprob: -11.632771492004395
    8. '<|end|>' → logprob: -11.757771492004395
    9. '(
' → logprob: -12.257771492004395
    10. '```' → logprob: -12.632771492004395

Token 93: 'C' (ID: 34)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.04833444952964783
    2. '"P' → logprob: -4.29833459854126
    3. '"G' → logprob: -4.92333459854126
    4. '"M' → logprob: -5.17333459854126
    5. '"C' → logprob: -5.67333459854126
    6. '"W' → logprob: -5.79833459854126
    7. '")' → logprob: -6.29833459854126
    8. '"K' → logprob: -6.42333459854126
    9. ' "' → logprob: -6.54833459854126
    10. ''' → logprob: -6.67333459854126

Token 94: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.00666528195142746
    2. '',' → logprob: -5.881665229797363
    3. ')' → logprob: -6.756665229797363
    4. ',' → logprob: -6.756665229797363
    5. '<|end|>' → logprob: -7.381665229797363
    6. '")' → logprob: -7.631665229797363
    7. '","' → logprob: -8.881665229797363
    8. '"' → logprob: -9.006665229797363
    9. '   ' → logprob: -10.506665229797363
    10. '<|end|>' → logprob: -10.756665229797363

Token 95: ' "' (ID: 392)
  Prédit: ' "'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' "' → logprob: -0.434823215007782
    2. '"' → logprob: -1.0598232746124268
    3. ')' → logprob: -5.684823036193848
    4. '<|end|>' → logprob: -6.184823036193848
    5. ' '' → logprob: -8.184823036193848
    6. ''' → logprob: -8.684823036193848
    7. ' ' → logprob: -9.559823036193848
    8. ' )' → logprob: -11.059823036193848
    9. 'space' → logprob: -11.184823036193848
    10. ' ' → logprob: -11.309823036193848

Token 96: '111' (ID: 8780)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.08925317972898483
    2. '111' → logprob: -2.4642531871795654
    3. ''' → logprob: -8.839253425598145
    4. '110' → logprob: -8.964253425598145
    5. '"""' → logprob: -11.089253425598145
    6. '```' → logprob: -12.214253425598145
    7. '101' → logprob: -12.339253425598145
    8. '""' → logprob: -12.964253425598145
    9. '011' → logprob: -12.964253425598145
    10. ''''' → logprob: -13.089253425598145

Token 97: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.5330656170845032
    2. '01' → logprob: -1.2830655574798584
    3. '00' → logprob: -2.0330655574798584
    4. '11' → logprob: -5.7830657958984375
    5. '0' → logprob: -7.1580657958984375
    6. '010' → logprob: -7.9080657958984375
    7. '"' → logprob: -8.533065795898438
    8. '000' → logprob: -8.783065795898438
    9. ')' → logprob: -8.783065795898438
    10. '001' → logprob: -9.408065795898438

Token 98: '"),
' (ID: 8132)
  Prédit: '"),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"),' → logprob: -0.10258699208498001
    2. '")' → logprob: -3.1025869846343994
    3. '),' → logprob: -3.4775869846343994
    4. '"),
' → logprob: -4.1025872230529785
    5. ')' → logprob: -5.3525872230529785
    6. '   ' → logprob: -8.47758674621582
    7. '),
' → logprob: -8.85258674621582
    8. '",' → logprob: -11.10258674621582
    9. '"' → logprob: -11.22758674621582
    10. ''),' → logprob: -11.47758674621582

Token 99: '   ' (ID: 271)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4463644325733185
    2. ']' → logprob: -1.321364402770996
    3. '   ' → logprob: -2.571364402770996
    4. '(' → logprob: -4.196364402770996
    5. '),' → logprob: -7.446364402770996
    6. '```' → logprob: -8.571364402770996
    7. ')]' → logprob: -8.571364402770996
    8. '[' → logprob: -8.821364402770996
    9. '("' → logprob: -9.071364402770996
    10. ' (' → logprob: -9.446364402770996

Token 100: ' ("' (ID: 7109)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.110516756772995
    2. ']' → logprob: -2.4855167865753174
    3. '   ' → logprob: -3.9855167865753174
    4. '(' → logprob: -6.735516548156738
    5. '),' → logprob: -7.235516548156738
    6. '")' → logprob: -8.735516548156738
    7. '("' (adapté à ' ("') → logprob: -8.860516548156738
    8. '[' → logprob: -9.360516548156738
    9. ')]' → logprob: -9.360516548156738
    10. '])' → logprob: -9.485516548156738

Token 101: 'U' (ID: 52)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.14133243262767792
    2. '"M' → logprob: -2.6413323879241943
    3. '"P' → logprob: -4.016332626342773
    4. '"B' → logprob: -4.766332626342773
    5. 'M' → logprob: -5.516332626342773
    6. '")' → logprob: -5.516332626342773
    7. '"K' → logprob: -5.516332626342773
    8. '",' → logprob: -5.891332626342773
    9. '"D' → logprob: -5.891332626342773
    10. ')' → logprob: -6.016332626342773

Token 102: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -4.7994282795116305e-05
    2. '',' → logprob: -10.87504768371582
    3. '"' → logprob: -11.62504768371582
    4. ',' → logprob: -11.75004768371582
    5. ')' → logprob: -12.25004768371582
    6. ' ",' → logprob: -13.00004768371582
    7. '","' → logprob: -13.12504768371582
    8. '",
' → logprob: -13.62504768371582
    9. '")' → logprob: -13.75004768371582
    10. ')",' → logprob: -14.62504768371582

Token 103: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.4306368827819824
    2. ' "' → logprob: -1.0556368827819824
    3. ')' → logprob: -7.055636882781982
    4. ''' → logprob: -7.055636882781982
    5. ' ' → logprob: -9.43063735961914
    6. ' '' → logprob: -9.55563735961914
    7. 'space' → logprob: -11.18063735961914
    8. ' space' → logprob: -11.55563735961914
    9. ' ' → logprob: -12.18063735961914
    10. '[' → logprob: -12.55563735961914

Token 104: '000' (ID: 1302)
  Prédit: '000'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '000' → logprob: -0.014284093864262104
    2. '100' → logprob: -4.639284133911133
    3. '001' → logprob: -6.389284133911133
    4. '0' → logprob: -7.139284133911133
    5. '00' → logprob: -7.139284133911133
    6. '010' → logprob: -7.139284133911133
    7. '111' → logprob: -8.764284133911133
    8. '```' → logprob: -9.514284133911133
    9. '``' → logprob: -10.014284133911133
    10. '011' → logprob: -10.014284133911133

Token 105: '00' (ID: 504)
  Prédit: '01'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '01' → logprob: -0.21410049498081207
    2. '11' → logprob: -2.2141005992889404
    3. '00' → logprob: -2.7141005992889404
    4. '10' → logprob: -4.339100360870361
    5. '0' → logprob: -5.839100360870361
    6. '1' → logprob: -6.839100360870361
    7. '"' → logprob: -9.33910083770752
    8. '")' → logprob: -10.65160083770752
    9. '```' → logprob: -11.46410083770752
    10. '110' → logprob: -11.77660083770752

Token 106: '"),
' (ID: 8132)
  Prédit: '"),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"),' → logprob: -0.0502808652818203
    2. '")' → logprob: -3.175280809402466
    3. '"),
' → logprob: -5.175281047821045
    4. '),' → logprob: -6.800281047821045
    5. ')' → logprob: -7.800281047821045
    6. '   ' → logprob: -10.050280570983887
    7. '"),
' → logprob: -11.800280570983887
    8. '"' → logprob: -11.925280570983887
    9. '");' → logprob: -11.925280570983887
    10. '",' → logprob: -12.800280570983887

Token 107: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5990583896636963
    2. ')' → logprob: -0.9740583896636963
    3. ']' → logprob: -2.7240583896636963
    4. '(' → logprob: -5.349058151245117
    5. '("' → logprob: -6.099058151245117
    6. '(
' → logprob: -8.599058151245117
    7. '```' → logprob: -9.349058151245117
    8. '),' → logprob: -10.349058151245117
    9. ' ("' → logprob: -10.724058151245117
    10. '       ' → logprob: -10.974058151245117

Token 108: ' ("' (ID: 7109)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.549026370048523
    2. '   ' → logprob: -1.424026370048523
    3. ')' → logprob: -1.799026370048523
    4. '("' (adapté à ' ("') → logprob: -4.7990264892578125
    5. '(' → logprob: -4.9240264892578125
    6. '(
' → logprob: -8.174026489257812
    7. ' ' → logprob: -9.174026489257812
    8. ' (' → logprob: -9.424026489257812
    9. ' ("' → logprob: -9.924026489257812
    10. '  ' → logprob: -10.049026489257812

Token 109: 'M' (ID: 44)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.08953595161437988
    2. '"G' → logprob: -3.21453595161438
    3. '"P' → logprob: -4.089535713195801
    4. '"B' → logprob: -4.714535713195801
    5. '"M' → logprob: -4.714535713195801
    6. ''' → logprob: -5.214535713195801
    7. '"W' → logprob: -5.589535713195801
    8. '"K' → logprob: -8.0895357131958
    9. 'G' → logprob: -8.2145357131958
    10. 'F' → logprob: -8.5895357131958

Token 110: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.001893533393740654
    2. ' ",' → logprob: -7.501893520355225
    3. '")' → logprob: -7.501893520355225
    4. '","' → logprob: -7.751893520355225
    5. ')' → logprob: -9.126893997192383
    6. ',' → logprob: -9.251893997192383
    7. '"' → logprob: -9.251893997192383
    8. '',' → logprob: -10.751893997192383
    9. '<|end|>' → logprob: -11.376893997192383
    10. ' ,' → logprob: -12.626893997192383

Token 111: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.08241958171129227
    2. ' "' → logprob: -2.5824196338653564
    3. ''' → logprob: -5.957419395446777
    4. ')' → logprob: -7.457419395446777
    5. ' ' → logprob: -9.082419395446777
    6. '<|end|>' → logprob: -9.207419395446777
    7. ' '' → logprob: -9.957419395446777
    8. ' (' → logprob: -11.332419395446777
    9. '[' → logprob: -11.457419395446777
    10. ' ' → logprob: -11.957419395446777

Token 112: '001' (ID: 7659)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.11861659586429596
    2. '000' → logprob: -2.4936165809631348
    3. '001' → logprob: -3.8686165809631348
    4. '010' → logprob: -5.368616580963135
    5. ''' → logprob: -5.868616580963135
    6. ' "' → logprob: -8.243617057800293
    7. '011' → logprob: -8.493617057800293
    8. ' ' → logprob: -9.243617057800293
    9. '100' → logprob: -9.743617057800293
    10. '111' → logprob: -9.868617057800293

Token 113: '00' (ID: 504)
  Prédit: '01'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '01' → logprob: -0.43505603075027466
    2. '00' → logprob: -1.3100559711456299
    3. '10' → logprob: -2.68505597114563
    4. '11' → logprob: -4.310056209564209
    5. '0' → logprob: -7.310056209564209
    6. '1' → logprob: -7.935056209564209
    7. '100' → logprob: -9.74755573272705
    8. '"' → logprob: -9.74755573272705
    9. ')' → logprob: -10.18505573272705
    10. '")' → logprob: -10.56005573272705

Token 114: '"),
' (ID: 8132)
  Prédit: '"),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"),' → logprob: -0.06755003333091736
    2. '")' → logprob: -2.81754994392395
    3. '"),
' → logprob: -5.942550182342529
    4. '),' → logprob: -6.192550182342529
    5. ')' → logprob: -7.317550182342529
    6. '   ' → logprob: -8.692549705505371
    7. '```' → logprob: -11.067549705505371
    8. '",' → logprob: -11.317549705505371
    9. '"' → logprob: -11.567549705505371
    10. ''),' → logprob: -11.817549705505371

Token 115: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0015703336102887988
    2. '(' → logprob: -6.626570224761963
    3. ')' → logprob: -9.626570701599121
    4. '       ' → logprob: -9.626570701599121
    5. '("' → logprob: -9.626570701599121
    6. '  ' → logprob: -11.126570701599121
    7. '```' → logprob: -11.501570701599121
    8. '    ' → logprob: -12.376570701599121
    9. ' ' → logprob: -12.751570701599121
    10. '(
' → logprob: -12.751570701599121

Token 116: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.008195385336875916
    2. '("' (adapté à ' ("') → logprob: -5.383195400238037
    3. '(' → logprob: -5.758195400238037
    4. ')' → logprob: -8.383194923400879
    5. '       ' → logprob: -9.633194923400879
    6. '  ' → logprob: -10.508194923400879
    7. ']' → logprob: -10.758194923400879
    8. '    ' → logprob: -11.258194923400879
    9. '	' → logprob: -11.383194923400879
    10. ' ' → logprob: -12.008194923400879

Token 117: 'W' (ID: 54)
  Prédit: '"P'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"P' → logprob: -1.051270842552185
    2. '"' → logprob: -1.176270842552185
    3. ''' → logprob: -1.426270842552185
    4. '"B' → logprob: -2.9262709617614746
    5. '"W' → logprob: -3.8012709617614746
    6. '"G' → logprob: -4.426270961761475
    7. 'P' → logprob: -5.426270961761475
    8. 'F' → logprob: -5.551270961761475
    9. 'B' → logprob: -6.426270961761475
    10. '"K' → logprob: -7.176270961761475

Token 118: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.0033478669356554747
    2. ',' → logprob: -7.128347873687744
    3. '")' → logprob: -7.128347873687744
    4. ')' → logprob: -7.253347873687744
    5. '"' → logprob: -7.753347873687744
    6. '","' → logprob: -8.628347396850586
    7. ' ",' → logprob: -8.753347396850586
    8. '',' → logprob: -9.253347396850586
    9. '<|end|>' → logprob: -9.503347396850586
    10. ' ' → logprob: -10.378347396850586

Token 119: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.08099561184644699
    2. ' "' → logprob: -2.580995559692383
    3. ''' → logprob: -6.455995559692383
    4. ')' → logprob: -7.830995559692383
    5. ' ' → logprob: -9.705995559692383
    6. ' '' → logprob: -10.330995559692383
    7. ' ' → logprob: -11.580995559692383
    8. '<|end|>' → logprob: -11.705995559692383
    9. '")' → logprob: -12.580995559692383
    10. 'space' → logprob: -12.830995559692383

Token 120: '010' (ID: 13522)
  Prédit: '001'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '001' → logprob: -0.577447235584259
    2. '"' → logprob: -0.952447235584259
    3. '010' → logprob: -3.2024471759796143
    4. ' ' → logprob: -5.327447414398193
    5. ''' → logprob: -5.577447414398193
    6. '011' → logprob: -6.202447414398193
    7. ' "' → logprob: -7.077447414398193
    8. '002' → logprob: -7.702447414398193
    9. '000' → logprob: -9.202446937561035
    10. '100' → logprob: -10.952446937561035

Token 121: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.18289785087108612
    2. '01' → logprob: -2.4328978061676025
    3. '00' → logprob: -2.6828978061676025
    4. '11' → logprob: -5.307898044586182
    5. '010' → logprob: -5.682898044586182
    6. '100' → logprob: -6.182898044586182
    7. '110' → logprob: -7.682898044586182
    8. '101' → logprob: -9.932897567749023
    9. '000' → logprob: -10.682897567749023
    10. '011' → logprob: -11.495397567749023

Token 122: '"),
' (ID: 8132)
  Prédit: '"),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"),' → logprob: -0.14879868924617767
    2. '")' → logprob: -2.148798704147339
    3. '),' → logprob: -4.39879846572876
    4. ')' → logprob: -5.02379846572876
    5. '"),
' → logprob: -6.14879846572876
    6. '   ' → logprob: -8.148798942565918
    7. '",' → logprob: -8.648798942565918
    8. '"' → logprob: -9.523798942565918
    9. ''),' → logprob: -11.023798942565918
    10. '```' → logprob: -11.023798942565918

Token 123: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0014633345417678356
    2. '("' → logprob: -7.751463413238525
    3. '       ' → logprob: -8.001462936401367
    4. '(' → logprob: -8.126462936401367
    5. ')' → logprob: -8.251462936401367
    6. '"' → logprob: -10.376462936401367
    7. '  ' → logprob: -10.501462936401367
    8. ' ("' → logprob: -10.876462936401367
    9. '	' → logprob: -11.126462936401367
    10. ' ' → logprob: -11.376462936401367

Token 124: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.008375802077353
    2. '("' (adapté à ' ("') → logprob: -5.633375644683838
    3. '(' → logprob: -6.383375644683838
    4. ')' → logprob: -6.383375644683838
    5. '       ' → logprob: -6.758375644683838
    6. '"' → logprob: -8.883376121520996
    7. '  ' → logprob: -10.883376121520996
    8. ' ("' → logprob: -11.008376121520996
    9. '(
' → logprob: -11.133376121520996
    10. ' ' → logprob: -11.758376121520996

Token 125: 'F' (ID: 37)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.06263770908117294
    2. '"P' → logprob: -3.5626378059387207
    3. '"B' → logprob: -4.562637805938721
    4. '"G' → logprob: -4.812637805938721
    5. ''' → logprob: -5.562637805938721
    6. '"S' → logprob: -5.562637805938721
    7. ' "' → logprob: -6.562637805938721
    8. '"K' → logprob: -6.562637805938721
    9. '"D' → logprob: -6.812637805938721
    10. '"L' → logprob: -7.687637805938721

Token 126: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.001521526137366891
    2. ',' → logprob: -7.751521587371826
    3. '","' → logprob: -8.126521110534668
    4. '"' → logprob: -8.376521110534668
    5. ' ",' → logprob: -8.501521110534668
    6. '',' → logprob: -9.126521110534668
    7. '")' → logprob: -9.376521110534668
    8. ')' → logprob: -9.876521110534668
    9. '   ' → logprob: -10.501521110534668
    10. '<|end|>' → logprob: -10.876521110534668

Token 127: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.0016081781359389424
    2. ' "' → logprob: -7.126608371734619
    3. ''' → logprob: -7.376608371734619
    4. ')' → logprob: -8.751607894897461
    5. '<|end|>' → logprob: -12.001607894897461
    6. ' ' → logprob: -12.501607894897461
    7. ' ' → logprob: -13.376607894897461
    8. ' ' → logprob: -13.501607894897461
    9. '`' → logprob: -13.751607894897461
    10. '"""' → logprob: -14.439107894897461

Token 128: '010' (ID: 13522)
  Prédit: '011'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '011' → logprob: -0.8320385813713074
    2. '010' → logprob: -0.9570385813713074
    3. '"' → logprob: -1.8320386409759521
    4. ' ' → logprob: -4.082038402557373
    5. ''' → logprob: -6.457038402557373
    6. '100' → logprob: -7.082038402557373
    7. '101' → logprob: -7.707038402557373
    8. '001' → logprob: -7.707038402557373
    9. '000' → logprob: -8.457038879394531
    10. '   ' → logprob: -9.457038879394531

Token 129: '11' (ID: 994)
  Prédit: '11'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '11' → logprob: -0.17018873989582062
    2. '100' → logprob: -2.2951886653900146
    3. '01' → logprob: -3.6701886653900146
    4. '110' → logprob: -3.7951886653900146
    5. '10' → logprob: -5.045188903808594
    6. '00' → logprob: -7.295188903808594
    7. '1' → logprob: -8.795188903808594
    8. ' ' → logprob: -9.295188903808594
    9. '101' → logprob: -9.295188903808594
    10. '011' → logprob: -9.545188903808594

Token 130: '"),
' (ID: 8132)
  Prédit: '"),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"),' → logprob: -0.018032515421509743
    2. '")' → logprob: -4.643032550811768
    3. '"),
' → logprob: -5.143032550811768
    4. '),' → logprob: -6.143032550811768
    5. ')' → logprob: -8.51803207397461
    6. '",' → logprob: -11.64303207397461
    7. '"),
' → logprob: -12.01803207397461
    8. '```' → logprob: -12.01803207397461
    9. ''),' → logprob: -12.14303207397461
    10. '"' → logprob: -12.14303207397461

Token 131: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01641719974577427
    2. ')' → logprob: -4.516417026519775
    3. '(' → logprob: -5.891417026519775
    4. '("' → logprob: -6.141417026519775
    5. '       ' → logprob: -8.641417503356934
    6. '"' → logprob: -9.141417503356934
    7. '  ' → logprob: -10.266417503356934
    8. ' ("' → logprob: -10.766417503356934
    9. ' (' → logprob: -10.891417503356934
    10. '    ' → logprob: -11.016417503356934

Token 132: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.008339626714587212
    2. '(' → logprob: -5.3833394050598145
    3. '("' (adapté à ' ("') → logprob: -6.1333394050598145
    4. ')' → logprob: -6.7583394050598145
    5. '       ' → logprob: -8.758339881896973
    6. '"' → logprob: -8.883339881896973
    7. '(
' → logprob: -10.258339881896973
    8. '  ' → logprob: -11.133339881896973
    9. '    ' → logprob: -11.883339881896973
    10. '[' → logprob: -12.008339881896973

Token 133: 'Y' (ID: 56)
  Prédit: '"G'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"G' → logprob: -0.9456987380981445
    2. '"P' → logprob: -1.3206987380981445
    3. '"' → logprob: -1.5706987380981445
    4. '"B' → logprob: -2.6956987380981445
    5. ''' → logprob: -2.8206987380981445
    6. 'G' → logprob: -5.5706987380981445
    7. '"L' → logprob: -6.5706987380981445
    8. 'Y' → logprob: -6.6956987380981445
    9. '"K' → logprob: -6.8206987380981445
    10. '"D' → logprob: -7.8206987380981445

Token 134: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.014703295193612576
    2. ',' → logprob: -4.264703273773193
    3. '',' → logprob: -7.639703273773193
    4. '"' → logprob: -11.014703750610352
    5. ')' → logprob: -11.139703750610352
    6. '`,' → logprob: -11.514703750610352
    7. '")' → logprob: -12.014703750610352
    8. '","' → logprob: -12.264703750610352
    9. '<|end|>' → logprob: -12.764703750610352
    10. ',"' → logprob: -13.514703750610352

Token 135: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.001950417528860271
    2. ')' → logprob: -6.751950263977051
    3. ''' → logprob: -7.626950263977051
    4. ' "' → logprob: -8.25195026397705
    5. '<|end|>' → logprob: -11.62695026397705
    6. ' ' → logprob: -11.75195026397705
    7. 'space' → logprob: -12.75195026397705
    8. '`' → logprob: -13.00195026397705
    9. ' )' → logprob: -13.12695026397705
    10. ' ' → logprob: -13.62695026397705

Token 136: '011' (ID: 17342)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.1170177236199379
    2. ' ' → logprob: -3.1170177459716797
    3. '011' → logprob: -3.1170177459716797
    4. '010' → logprob: -4.36701774597168
    5. ''' → logprob: -5.24201774597168
    6. ' "' → logprob: -5.61701774597168
    7. '100' → logprob: -9.74201774597168
    8. '001' → logprob: -10.49201774597168
    9. '```' → logprob: -10.49201774597168
    10. '101' → logprob: -10.61701774597168

Token 137: '01' (ID: 2290)
  Prédit: '01'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '01' → logprob: -0.011219589039683342
    2. '11' → logprob: -5.136219501495361
    3. '10' → logprob: -5.886219501495361
    4. '00' → logprob: -6.011219501495361
    5. '0' → logprob: -11.63621997833252
    6. '010' → logprob: -11.69871997833252
    7. '1' → logprob: -11.76121997833252
    8. '011' → logprob: -11.94871997833252
    9. '```' → logprob: -12.38621997833252
    10. '100' → logprob: -12.94871997833252

Token 138: '"),
' (ID: 8132)
  Prédit: '"),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"),' → logprob: -0.006813050713390112
    2. '")' → logprob: -5.506813049316406
    3. '"),
' → logprob: -6.506813049316406
    4. '),' → logprob: -6.756813049316406
    5. ')' → logprob: -9.756813049316406
    6. '");' → logprob: -12.631813049316406
    7. '",' → logprob: -12.756813049316406
    8. '"),

' → logprob: -12.881813049316406
    9. ''),' → logprob: -13.006813049316406
    10. '"' → logprob: -13.631813049316406

Token 139: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0025011058896780014
    2. '(' → logprob: -6.252501010894775
    3. '("' → logprob: -8.002501487731934
    4. ')' → logprob: -9.002501487731934
    5. '       ' → logprob: -9.752501487731934
    6. '  ' → logprob: -10.877501487731934
    7. '(
' → logprob: -12.127501487731934
    8. '    ' → logprob: -12.252501487731934
    9. ' (' → logprob: -12.252501487731934
    10. '"' → logprob: -12.502501487731934

Token 140: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06338035315275192
    2. '("' (adapté à ' ("') → logprob: -3.063380241394043
    3. ')' → logprob: -5.313380241394043
    4. '(' → logprob: -5.438380241394043
    5. '       ' → logprob: -5.438380241394043
    6. '```' → logprob: -7.938380241394043
    7. '"' → logprob: -8.188380241394043
    8. '(
' → logprob: -8.938380241394043
    9. ' ("' → logprob: -9.313380241394043
    10. '  ' → logprob: -10.063380241394043

Token 141: 'G' (ID: 38)
  Prédit: '"G'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"G' → logprob: -0.4614917039871216
    2. '"B' → logprob: -2.086491584777832
    3. '"' → logprob: -2.211491584777832
    4. '"P' → logprob: -2.336491584777832
    5. '"K' → logprob: -3.336491584777832
    6. ' "' → logprob: -6.461491584777832
    7. ''' → logprob: -6.711491584777832
    8. 'G' → logprob: -8.336491584777832
    9. '("' → logprob: -8.586491584777832
    10. '"L' → logprob: -9.211491584777832

Token 142: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.017057383432984352
    2. '<|end|>' → logprob: -5.517057418823242
    3. ',' → logprob: -5.767057418823242
    4. '"' → logprob: -5.892057418823242
    5. '',' → logprob: -6.142057418823242
    6. ' "' → logprob: -6.767057418823242
    7. ' ' → logprob: -7.142057418823242
    8. ')' → logprob: -7.517057418823242
    9. ' ",' → logprob: -7.517057418823242
    10. '")' → logprob: -8.017057418823242

Token 143: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.03447238728404045
    2. ' "' → logprob: -3.4094724655151367
    3. ')' → logprob: -7.534472465515137
    4. ''' → logprob: -8.409472465515137
    5. ' ' → logprob: -10.534472465515137
    6. '<|end|>' → logprob: -11.784472465515137
    7. 'space' → logprob: -12.034472465515137
    8. ' '' → logprob: -12.159472465515137
    9. ' space' → logprob: -12.534472465515137
    10. ' ' → logprob: -12.534472465515137

Token 144: '100' (ID: 1353)
  Prédit: '011'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '011' → logprob: -0.018308203667402267
    2. '100' → logprob: -4.268308162689209
    3. ' ' → logprob: -6.268308162689209
    4. '"' → logprob: -6.268308162689209
    5. '010' → logprob: -8.518308639526367
    6. '001' → logprob: -10.018308639526367
    7. ''' → logprob: -10.143308639526367
    8. '101' → logprob: -10.893308639526367
    9. '000' → logprob: -11.643308639526367
    10. ' "' → logprob: -11.768308639526367

Token 145: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.47565802931785583
    2. '01' → logprob: -0.9756580591201782
    3. '00' → logprob: -6.475657939910889
    4. '11' → logprob: -10.975658416748047
    5. ')' → logprob: -11.725658416748047
    6. '010' → logprob: -11.725658416748047
    7. '1' → logprob: -13.600658416748047
    8. '001' → logprob: -13.600658416748047
    9. '100' → logprob: -13.725658416748047
    10. '000' → logprob: -14.225658416748047

Token 146: '"),
' (ID: 8132)
  Prédit: '"),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"),' → logprob: -0.010828271508216858
    2. '")' → logprob: -4.635828495025635
    3. '"),
' → logprob: -7.385828495025635
    4. '),' → logprob: -7.885828495025635
    5. ')' → logprob: -10.010828018188477
    6. '",' → logprob: -11.385828018188477
    7. ''),' → logprob: -12.385828018188477
    8. '   ' → logprob: -12.510828018188477
    9. '");' → logprob: -12.760828018188477
    10. '"' → logprob: -12.885828018188477

Token 147: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0031178221106529236
    2. '(' → logprob: -6.12811803817749
    3. '("' → logprob: -7.75311803817749
    4. ')' → logprob: -8.503117561340332
    5. '"' → logprob: -9.003117561340332
    6. '       ' → logprob: -10.128117561340332
    7. '  ' → logprob: -10.253117561340332
    8. '```' → logprob: -10.753117561340332
    9. ' (' → logprob: -11.003117561340332
    10. '[' → logprob: -11.253117561340332

Token 148: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.010651604272425175
    2. ')' → logprob: -5.260651588439941
    3. '("' (adapté à ' ("') → logprob: -5.885651588439941
    4. '(' → logprob: -6.135651588439941
    5. '       ' → logprob: -8.760651588439941
    6. '"' → logprob: -9.010651588439941
    7. '  ' → logprob: -9.885651588439941
    8. '(
' → logprob: -10.260651588439941
    9. '    ' → logprob: -10.760651588439941
    10. ' ' → logprob: -10.760651588439941

Token 149: 'P' (ID: 47)
  Prédit: '"K'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"K' → logprob: -0.5100855231285095
    2. '"' → logprob: -1.1350855827331543
    3. '"B' → logprob: -3.5100855827331543
    4. '"P' → logprob: -3.5100855827331543
    5. ' "' → logprob: -4.385085582733154
    6. '"C' → logprob: -6.510085582733154
    7. ''' → logprob: -6.635085582733154
    8. '"L' → logprob: -7.510085582733154
    9. 'K' → logprob: -7.760085582733154
    10. '"D' → logprob: -8.010085105895996

Token 150: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.06146638095378876
    2. '"' → logprob: -3.9364664554595947
    3. '")' → logprob: -4.311466217041016
    4. ')' → logprob: -5.186466217041016
    5. ' "' → logprob: -5.436466217041016
    6. '<|end|>' → logprob: -5.436466217041016
    7. ' ' → logprob: -5.561466217041016
    8. ',' → logprob: -6.061466217041016
    9. '","' → logprob: -6.311466217041016
    10. '',' → logprob: -6.311466217041016

Token 151: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.011100520379841328
    2. ' "' → logprob: -4.5111002922058105
    3. ')' → logprob: -10.386100769042969
    4. ''' → logprob: -11.636100769042969
    5. '"user' → logprob: -12.761100769042969
    6. ' ' → logprob: -12.886100769042969
    7. '")' → logprob: -13.261100769042969
    8. '<|end|>' → logprob: -13.886100769042969
    9. ' ("' → logprob: -14.386100769042969
    10. '("' → logprob: -14.511100769042969

Token 152: '111' (ID: 8780)
  Prédit: '100'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '100' → logprob: -0.040403906255960464
    2. '101' → logprob: -3.2904038429260254
    3. '"' → logprob: -6.290403842926025
    4. '110' → logprob: -8.165404319763184
    5. '")' → logprob: -9.040404319763184
    6. '111' → logprob: -9.665404319763184
    7. ' ' → logprob: -11.665404319763184
    8. '```' → logprob: -12.040404319763184
    9. '">' → logprob: -12.165404319763184
    10. ''' → logprob: -12.665404319763184

Token 153: '"),' (ID: 7645)
  Prédit: '01'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '01' → logprob: -0.5946685671806335
    2. '00' → logprob: -0.9696685671806335
    3. '11' → logprob: -2.8446686267852783
    4. '10' → logprob: -4.594668388366699
    5. '0' → logprob: -7.719668388366699
    6. '1' → logprob: -9.2196683883667
    7. ')' → logprob: -9.5946683883667
    8. '"' → logprob: -10.0321683883667
    9. '```' → logprob: -10.6571683883667
    10. '")' → logprob: -10.7196683883667

Token 154: ' ' (ID: 220)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0028254427015781403
    2. '   ' → logprob: -6.5028252601623535
    3. '")' → logprob: -7.6278252601623535
    4. '),' → logprob: -7.6278252601623535
    5. '<|end|>' → logprob: -8.877825736999512
    6. '(' → logprob: -9.752825736999512
    7. ' ' → logprob: -10.377825736999512
    8. '"' → logprob: -10.627825736999512
    9. ')
' → logprob: -10.752825736999512
    10. '("' → logprob: -11.127825736999512

Token 155: ' #' (ID: 1069)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.007085348479449749
    2. '),' → logprob: -5.13208532333374
    3. '")' → logprob: -7.38208532333374
    4. '   ' → logprob: -8.382085800170898
    5. ')
' → logprob: -9.257085800170898
    6. '"' → logprob: -9.507085800170898
    7. ' ' → logprob: -10.257085800170898
    8. '(' → logprob: -11.507085800170898
    9. '<|end|>' → logprob: -11.507085800170898
    10. ',' → logprob: -11.757085800170898

Token 156: ' shorter' (ID: 37168)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.37263575196266174
    2. ' ' → logprob: -2.122635841369629
    3. '<|end|>' → logprob: -2.122635841369629
    4. '"' → logprob: -3.247635841369629
    5. ' )' → logprob: -4.622635841369629
    6. ' "' → logprob: -5.122635841369629
    7. ''' → logprob: -5.372635841369629
    8. '  ' → logprob: -5.747635841369629
    9. '<|end|>' → logprob: -6.247635841369629
    10. '),' → logprob: -6.747635841369629

Token 157: ' code' (ID: 3490)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0850360319018364
    2. ',' → logprob: -3.335036039352417
    3. ',
' → logprob: -3.460036039352417
    4. ')' → logprob: -4.335035800933838
    5. '   ' → logprob: -8.460036277770996
    6. ' ]' → logprob: -8.710036277770996
    7. '"]' → logprob: -9.085036277770996
    8. '<|end|>' → logprob: -9.085036277770996
    9. ')]' → logprob: -9.210036277770996
    10. '(' → logprob: -9.460036277770996

Token 158: '
' (ID: 198)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.886259138584137
    2. ']' → logprob: -1.0112590789794922
    3. ',' → logprob: -2.011259078979492
    4. ',
' → logprob: -2.886259078979492
    5. '
' → logprob: -4.636259078979492
    6. '[' → logprob: -5.511259078979492
    7. '<|end|>' → logprob: -5.511259078979492
    8. '\n' → logprob: -5.761259078979492
    9. '\' → logprob: -6.011259078979492
    10. '[
' → logprob: -6.136259078979492

Token 159: '   ' (ID: 271)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.02742123417556286
    2. '   ' → logprob: -4.402420997619629
    3. '<|end|>' → logprob: -4.902420997619629
    4. '),' → logprob: -6.027420997619629
    5. '")' → logprob: -6.777420997619629
    6. '"' → logprob: -7.277420997619629
    7. ' ' → logprob: -7.277420997619629
    8. '(' → logprob: -7.652420997619629
    9. ',' → logprob: -8.152420997619629
    10. ',
' → logprob: -8.652420997619629

Token 160: ' ("' (ID: 7109)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.1605125069618225
    2. '<|end|>' → logprob: -2.7855124473571777
    3. '("' (adapté à ' ("') → logprob: -3.5355124473571777
    4. '(' → logprob: -3.7855124473571777
    5. '   ' → logprob: -4.285512447357178
    6. '),' → logprob: -5.285512447357178
    7. '"' → logprob: -5.660512447357178
    8. '(
' → logprob: -5.910512447357178
    9. ' (' → logprob: -6.035512447357178
    10. ' ' → logprob: -6.410512447357178

Token 161: 'B' (ID: 33)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.6628654599189758
    2. '"B' → logprob: -0.9128654599189758
    3. '"K' → logprob: -2.912865400314331
    4. '")' → logprob: -5.41286563873291
    5. '"S' → logprob: -5.53786563873291
    6. 'Q' → logprob: -5.66286563873291
    7. 'B' → logprob: -6.03786563873291
    8. '("' → logprob: -6.16286563873291
    9. '"W' → logprob: -6.16286563873291
    10. '"L' → logprob: -6.28786563873291

Token 162: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.0008207073551602662
    2. ',' → logprob: -8.125821113586426
    3. '',' → logprob: -8.750821113586426
    4. ' ",' → logprob: -8.750821113586426
    5. '"' → logprob: -9.000821113586426
    6. '","' → logprob: -9.875821113586426
    7. ')' → logprob: -12.000821113586426
    8. '")' → logprob: -12.250821113586426
    9. ' ,' → logprob: -12.375821113586426
    10. '<|end|>' → logprob: -12.875821113586426

Token 163: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.03057738021016121
    2. ' "' → logprob: -3.5305774211883545
    3. ''' → logprob: -7.655577182769775
    4. '<|end|>' → logprob: -8.780577659606934
    5. ')' → logprob: -8.905577659606934
    6. ' ' → logprob: -11.155577659606934
    7. ' '' → logprob: -11.405577659606934
    8. 'space' → logprob: -11.905577659606934
    9. ' space' → logprob: -12.155577659606934
    10. '[' → logprob: -12.905577659606934

Token 164: '100' (ID: 1353)
  Prédit: '111'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '111' → logprob: -0.018426524475216866
    2. '110' → logprob: -4.518426418304443
    3. '"' → logprob: -5.518426418304443
    4. '000' → logprob: -6.768426418304443
    5. '100' → logprob: -6.893426418304443
    6. ''' → logprob: -7.393426418304443
    7. '101' → logprob: -8.643426895141602
    8. '001' → logprob: -9.018426895141602
    9. '011' → logprob: -9.018426895141602
    10. '010' → logprob: -9.393426895141602

Token 165: '11' (ID: 994)
  Prédit: '11'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '11' → logprob: -0.22225357592105865
    2. '01' → logprob: -1.7222535610198975
    3. '00' → logprob: -4.722253799438477
    4. '10' → logprob: -5.097253799438477
    5. '1' → logprob: -5.472253799438477
    6. '110' → logprob: -7.847253799438477
    7. '0' → logprob: -8.097253799438477
    8. ')' → logprob: -8.097253799438477
    9. '")' → logprob: -8.597253799438477
    10. '"' → logprob: -9.347253799438477

Token 166: '"),
' (ID: 8132)
  Prédit: '"),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"),' → logprob: -0.01754968799650669
    2. '")' → logprob: -4.142549514770508
    3. '"),
' → logprob: -7.267549514770508
    4. '),' → logprob: -7.517549514770508
    5. ')' → logprob: -8.267549514770508
    6. '"' → logprob: -12.017549514770508
    7. '"),

' → logprob: -13.142549514770508
    8. ' "),' → logprob: -13.142549514770508
    9. '",' → logprob: -13.392549514770508
    10. ''),' → logprob: -13.517549514770508

Token 167: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04769157990813255
    2. ')' → logprob: -3.797691583633423
    3. '(' → logprob: -4.172691345214844
    4. '("' → logprob: -5.047691345214844
    5. ' ("' → logprob: -7.047691345214844
    6. ' (' → logprob: -7.297691345214844
    7. '<|end|>' → logprob: -8.672691345214844
    8. '  ' → logprob: -9.297691345214844
    9. '(
' → logprob: -9.297691345214844
    10. '       ' → logprob: -9.547691345214844

Token 168: ' ("' (ID: 7109)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4773940145969391
    2. '   ' → logprob: -1.1023939847946167
    3. '("' (adapté à ' ("') → logprob: -3.6023941040039062
    4. '(' → logprob: -4.727394104003906
    5. ' ("' → logprob: -4.852394104003906
    6. ' (' → logprob: -6.977394104003906
    7. '(
' → logprob: -6.977394104003906
    8. '"' → logprob: -7.727394104003906
    9. '),' → logprob: -8.102394104003906
    10. ' ' → logprob: -8.102394104003906

Token 169: 'V' (ID: 53)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.09973680227994919
    2. ''' → logprob: -3.4747366905212402
    3. 'Q' → logprob: -3.7247366905212402
    4. '"K' → logprob: -4.34973669052124
    5. '("' → logprob: -4.84973669052124
    6. '(' → logprob: -5.09973669052124
    7. '")' → logprob: -6.09973669052124
    8. ' "' → logprob: -6.22473669052124
    9. '"S' → logprob: -6.47473669052124
    10. '"O' → logprob: -6.72473669052124

Token 170: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.011473237536847591
    2. '")' → logprob: -5.136473178863525
    3. '"' → logprob: -6.011473178863525
    4. ' ",' → logprob: -7.011473178863525
    5. ',' → logprob: -7.511473178863525
    6. ')' → logprob: -7.761473178863525
    7. '',' → logprob: -8.136473655700684
    8. ' ' → logprob: -8.636473655700684
    9. '<|end|>' → logprob: -8.761473655700684
    10. '","' → logprob: -9.011473655700684

Token 171: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.14512236416339874
    2. ' "' → logprob: -2.0201222896575928
    3. ''' → logprob: -6.395122528076172
    4. ' ' → logprob: -7.770122528076172
    5. '<|end|>' → logprob: -8.770122528076172
    6. ')' → logprob: -8.895122528076172
    7. ' '' → logprob: -10.270122528076172
    8. '"user' → logprob: -12.395122528076172
    9. '"value' → logprob: -13.145122528076172
    10. '```' → logprob: -13.270122528076172

Token 172: '101' (ID: 7959)
  Prédit: '101'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '101' → logprob: -0.013710557483136654
    2. '"' → logprob: -5.1387104988098145
    3. '110' → logprob: -5.5137104988098145
    4. '111' → logprob: -5.8887104988098145
    5. '100' → logprob: -7.5137104988098145
    6. '010' → logprob: -8.763710975646973
    7. '011' → logprob: -9.013710975646973
    8. '001' → logprob: -9.763710975646973
    9. ''' → logprob: -10.263710975646973
    10. '000' → logprob: -11.388710975646973

Token 173: '11' (ID: 994)
  Prédit: '00'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '00' → logprob: -0.7918235063552856
    2. '01' → logprob: -0.7918235063552856
    3. '10' → logprob: -2.791823387145996
    4. '11' → logprob: -3.666823387145996
    5. '")' → logprob: -5.916823387145996
    6. '1' → logprob: -6.291823387145996
    7. '0' → logprob: -6.416823387145996
    8. '"' → logprob: -7.541823387145996
    9. ' ")' → logprob: -9.291823387145996
    10. '000' → logprob: -9.416823387145996

Token 174: '"),
' (ID: 8132)
  Prédit: '"),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"),' → logprob: -0.021967902779579163
    2. '")' → logprob: -4.021967887878418
    3. '),' → logprob: -6.271967887878418
    4. '"),
' → logprob: -6.521967887878418
    5. ')' → logprob: -7.771967887878418
    6. ''),' → logprob: -11.896967887878418
    7. '"),

' → logprob: -12.271967887878418
    8. '"' → logprob: -12.396967887878418
    9. ' "),' → logprob: -12.396967887878418
    10. '",' → logprob: -13.146967887878418

Token 175: '   ' (ID: 271)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6358967423439026
    2. '   ' → logprob: -0.7608967423439026
    3. '(' → logprob: -6.635896682739258
    4. ']' → logprob: -7.760896682739258
    5. '("' → logprob: -8.010896682739258
    6. '),' → logprob: -8.385896682739258
    7. '")' → logprob: -8.635896682739258
    8. '"' → logprob: -8.885896682739258
    9. ' ' → logprob: -9.010896682739258
    10. '<|end|>' → logprob: -9.135896682739258

Token 176: ' ("' (ID: 7109)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.24321018159389496
    2. '   ' → logprob: -1.6182101964950562
    3. '("' (adapté à ' ("') → logprob: -4.618210315704346
    4. '(' → logprob: -6.368210315704346
    5. '<|end|>' → logprob: -6.493210315704346
    6. ' ("' → logprob: -6.618210315704346
    7. '"' → logprob: -7.368210315704346
    8. '),' → logprob: -7.368210315704346
    9. '")' → logprob: -7.868210315704346
    10. '...' → logprob: -8.493209838867188

Token 177: 'K' (ID: 42)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.366994708776474
    2. '"K' → logprob: -1.2419947385787964
    3. 'K' → logprob: -5.491994857788086
    4. 'Q' → logprob: -6.116994857788086
    5. 'J' → logprob: -6.366994857788086
    6. '"L' → logprob: -6.491994857788086
    7. '"I' → logprob: -6.616994857788086
    8. 'X' → logprob: -6.866994857788086
    9. '"S' → logprob: -6.866994857788086
    10. 'Z' → logprob: -6.866994857788086

Token 178: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.0037024507764726877
    2. '")' → logprob: -5.753702640533447
    3. ' ",' → logprob: -8.253702163696289
    4. '"' → logprob: -9.253702163696289
    5. '","' → logprob: -9.878702163696289
    6. ')' → logprob: -10.503702163696289
    7. '",
' → logprob: -10.503702163696289
    8. '',' → logprob: -10.753702163696289
    9. ' ")' → logprob: -11.003702163696289
    10. ' ' → logprob: -12.378702163696289

Token 179: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.09183403104543686
    2. ' "' → logprob: -2.46683406829834
    3. ''' → logprob: -5.96683406829834
    4. '<|end|>' → logprob: -8.84183406829834
    5. ' '' → logprob: -9.84183406829834
    6. ')' → logprob: -9.96683406829834
    7. '")' → logprob: -11.46683406829834
    8. '"user' → logprob: -11.59183406829834
    9. '"value' → logprob: -11.71683406829834
    10. ' ' → logprob: -11.71683406829834

Token 180: '110' (ID: 7920)
  Prédit: '110'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '110' → logprob: -0.020991424098610878
    2. '111' → logprob: -3.895991325378418
    3. ' ' → logprob: -9.020991325378418
    4. '101' → logprob: -9.395991325378418
    5. '11' → logprob: -9.520991325378418
    6. '")' → logprob: -9.770991325378418
    7. '"' → logprob: -10.145991325378418
    8. '011' → logprob: -10.270991325378418
    9. '000' → logprob: -11.520991325378418
    10. '100' → logprob: -11.645991325378418

Token 181: '11' (ID: 994)
  Prédit: '01'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '01' → logprob: -0.10515391081571579
    2. '11' → logprob: -2.480153799057007
    3. '10' → logprob: -4.355154037475586
    4. '00' → logprob: -5.980154037475586
    5. '1' → logprob: -7.730154037475586
    6. '110' → logprob: -9.230154037475586
    7. '010' → logprob: -9.605154037475586
    8. '100' → logprob: -9.730154037475586
    9. '011' → logprob: -11.542654037475586
    10. '0' → logprob: -11.667654037475586

Token 182: '"),
' (ID: 8132)
  Prédit: '"),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"),' → logprob: -0.005888503044843674
    2. '")' → logprob: -5.38088846206665
    3. '"),
' → logprob: -6.88088846206665
    4. '),' → logprob: -8.505888938903809
    5. ')' → logprob: -11.005888938903809
    6. ' "),' → logprob: -12.130888938903809
    7. '   ' → logprob: -12.380888938903809
    8. ''),' → logprob: -12.380888938903809
    9. '",' → logprob: -13.005888938903809
    10. '"),

' → logprob: -13.505888938903809

Token 183: '   ' (ID: 271)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7806171774864197
    2. '   ' → logprob: -0.7806171774864197
    3. ']' → logprob: -2.6556172370910645
    4. '("' → logprob: -4.6556172370910645
    5. '<|end|>' → logprob: -6.2806172370910645
    6. '...' → logprob: -7.7806172370910645
    7. ' ("' → logprob: -8.280616760253906
    8. '")' → logprob: -8.280616760253906
    9. '(' → logprob: -8.530616760253906
    10. '```' → logprob: -9.280616760253906

Token 184: ' ("' (ID: 7109)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.32943373918533325
    2. '   ' → logprob: -1.3294336795806885
    3. '("' (adapté à ' ("') → logprob: -5.204433917999268
    4. ']' → logprob: -5.704433917999268
    5. '"' → logprob: -5.954433917999268
    6. '(' → logprob: -6.204433917999268
    7. ' ' → logprob: -7.204433917999268
    8. '")' → logprob: -7.454433917999268
    9. ' ("' → logprob: -8.20443344116211
    10. '),' → logprob: -8.57943344116211

Token 185: 'X' (ID: 55)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.02887878194451332
    2. '"S' → logprob: -4.403878688812256
    3. '"I' → logprob: -5.528878688812256
    4. '"O' → logprob: -5.778878688812256
    5. ' "' → logprob: -6.028878688812256
    6. ''' → logprob: -6.653878688812256
    7. '"L' → logprob: -6.653878688812256
    8. '"B' → logprob: -7.028878688812256
    9. '"G' → logprob: -7.278878688812256
    10. '"P' → logprob: -8.153879165649414

Token 186: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.00020354038861114532
    2. ',' → logprob: -9.750203132629395
    3. ' ",' → logprob: -10.000203132629395
    4. '","' → logprob: -10.375203132629395
    5. '',' → logprob: -10.500203132629395
    6. '"' → logprob: -11.250203132629395
    7. '")' → logprob: -11.625203132629395
    8. '(",' → logprob: -11.875203132629395
    9. '",
' → logprob: -12.625203132629395
    10. '<|end|>' → logprob: -13.250203132629395

Token 187: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.07341698557138443
    2. ' "' → logprob: -2.8234169483184814
    3. ''' → logprob: -4.6984171867370605
    4. '<|end|>' → logprob: -6.3234171867370605
    5. ')' → logprob: -8.698416709899902
    6. ' '' → logprob: -8.823416709899902
    7. ' ' → logprob: -10.573416709899902
    8. '<|end|>' → logprob: -11.198416709899902
    9. 'space' → logprob: -11.323416709899902
    10. '```' → logprob: -11.448416709899902

Token 188: '111' (ID: 8780)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.015143804252147675
    2. ' "' → logprob: -5.140143871307373
    3. ''' → logprob: -5.640143871307373
    4. '111' → logprob: -5.765143871307373
    5. '110' → logprob: -6.265143871307373
    6. ' ' → logprob: -7.640143871307373
    7. '")' → logprob: -11.515143394470215
    8. '```' → logprob: -11.515143394470215
    9. '   ' → logprob: -11.640143394470215
    10. ' '' → logprob: -11.890143394470215

Token 189: '01' (ID: 2290)
  Prédit: '01'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '01' → logprob: -0.025288064032793045
    2. '00' → logprob: -3.7752881050109863
    3. '11' → logprob: -6.775288105010986
    4. '10' → logprob: -7.775288105010986
    5. '1' → logprob: -8.275287628173828
    6. '0' → logprob: -9.025287628173828
    7. '"' → logprob: -11.087787628173828
    8. '010' → logprob: -11.212787628173828
    9. '```' → logprob: -11.400287628173828
    10. ')' → logprob: -11.712787628173828

Token 190: '"),
' (ID: 8132)
  Prédit: '"),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"),' → logprob: -0.06431552767753601
    2. '")' → logprob: -2.8143155574798584
    3. '),' → logprob: -6.564315319061279
    4. '"),
' → logprob: -7.439315319061279
    5. ')' → logprob: -8.064315795898438
    6. '",' → logprob: -11.689315795898438
    7. '   ' → logprob: -12.189315795898438
    8. '"' → logprob: -12.314315795898438
    9. ''),' → logprob: -12.564315795898438
    10. '```' → logprob: -12.689315795898438

Token 191: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6827267408370972
    2. ')' → logprob: -1.4327267408370972
    3. '("' → logprob: -1.6827267408370972
    4. ']' → logprob: -3.0577268600463867
    5. '(' → logprob: -4.182726860046387
    6. ' ("' → logprob: -5.182726860046387
    7. '(
' → logprob: -6.932726860046387
    8. ' (' → logprob: -8.432726860046387
    9. '('' → logprob: -8.932726860046387
    10. '")' → logprob: -8.932726860046387

Token 192: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7010852694511414
    2. ')' → logprob: -1.2010853290557861
    3. '("' (adapté à ' ("') → logprob: -1.7010853290557861
    4. '(' → logprob: -4.576085090637207
    5. ' ("' → logprob: -5.576085090637207
    6. '(
' → logprob: -6.076085090637207
    7. ']' → logprob: -6.451085090637207
    8. ' ' → logprob: -7.451085090637207
    9. '"' → logprob: -7.576085090637207
    10. '")' → logprob: -8.201085090637207

Token 193: 'J' (ID: 41)
  Prédit: 'Z'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Z' → logprob: -0.16924862563610077
    2. '"' → logprob: -1.9192485809326172
    3. 'Q' → logprob: -5.169248580932617
    4. ''' → logprob: -6.169248580932617
    5. 'J' → logprob: -7.794248580932617
    6. '``' → logprob: -9.044248580932617
    7. '")' → logprob: -9.294248580932617
    8. ' "' → logprob: -9.544248580932617
    9. '_Z' → logprob: -9.669248580932617
    10. '"S' → logprob: -10.169248580932617

Token 194: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.00012523093027994037
    2. '"' → logprob: -10.12512493133545
    3. ' ",' → logprob: -10.50012493133545
    4. '',' → logprob: -10.62512493133545
    5. '",
' → logprob: -11.87512493133545
    6. '","' → logprob: -12.00012493133545
    7. '")' → logprob: -12.12512493133545
    8. ',' → logprob: -12.25012493133545
    9. '(",' → logprob: -12.37512493133545
    10. '<|end|>' → logprob: -12.87512493133545

Token 195: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.0027675481978803873
    2. ' "' → logprob: -6.252767562866211
    3. ''' → logprob: -7.627767562866211
    4. ')' → logprob: -8.127767562866211
    5. '<|end|>' → logprob: -10.252767562866211
    6. ' )' → logprob: -12.627767562866211
    7. '")' → logprob: -12.877767562866211
    8. ' ' → logprob: -12.877767562866211
    9. '"""' → logprob: -13.252767562866211
    10. '"user' → logprob: -13.252767562866211

Token 196: '001' (ID: 7659)
  Prédit: '111'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '111' → logprob: -0.003631431143730879
    2. '110' → logprob: -5.878631591796875
    3. '"' → logprob: -7.378631591796875
    4. ' ' → logprob: -9.378631591796875
    5. '000' → logprob: -10.128631591796875
    6. '100' → logprob: -10.378631591796875
    7. '")' → logprob: -11.128631591796875
    8. ''' → logprob: -11.253631591796875
    9. '011' → logprob: -12.128631591796875
    10. '```' → logprob: -12.753631591796875

Token 197: '10' (ID: 702)
  Prédit: '00'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '00' → logprob: -0.41052091121673584
    2. '10' → logprob: -1.1605209112167358
    3. '01' → logprob: -4.410521030426025
    4. '11' → logprob: -4.660521030426025
    5. '0' → logprob: -7.410521030426025
    6. '")' → logprob: -8.160520553588867
    7. '000' → logprob: -8.410520553588867
    8. ')' → logprob: -8.410520553588867
    9. '1' → logprob: -8.785520553588867
    10. '100' → logprob: -9.035520553588867

Token 198: '"),
' (ID: 8132)
  Prédit: '"),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"),' → logprob: -0.044997893273830414
    2. '")' → logprob: -3.1699979305267334
    3. '"),
' → logprob: -6.544997692108154
    4. '),' → logprob: -7.919997692108154
    5. ')' → logprob: -8.669998168945312
    6. '"' → logprob: -12.044998168945312
    7. ' "),' → logprob: -12.169998168945312
    8. '"),
' → logprob: -12.794998168945312
    9. ''),' → logprob: -12.919998168945312
    10. '");' → logprob: -13.169998168945312

Token 199: '   ' (ID: 271)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4603671729564667
    2. '   ' → logprob: -1.085367202758789
    3. ']' → logprob: -3.960367202758789
    4. '("' → logprob: -4.835367202758789
    5. '")' → logprob: -6.585367202758789
    6. ' ("' → logprob: -7.460367202758789
    7. '"' → logprob: -7.710367202758789
    8. ' )' → logprob: -8.460367202758789
    9. '<|end|>' → logprob: -8.460367202758789
    10. ')]' → logprob: -8.585367202758789

Token 200: ' ("' (ID: 7109)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4396601915359497
    2. '   ' → logprob: -1.8146601915359497
    3. ']' → logprob: -2.18966007232666
    4. '("' (adapté à ' ("') → logprob: -2.56466007232666
    5. ' ("' → logprob: -6.81466007232666
    6. '(' → logprob: -7.31466007232666
    7. '")' → logprob: -7.43966007232666
    8. ')]' → logprob: -7.81466007232666
    9. '       ' → logprob: -8.31466007232666
    10. '"' → logprob: -8.31466007232666

Token 201: 'Q' (ID: 48)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.01880740001797676
    2. 'Z' → logprob: -4.018807411193848
    3. 'Q' → logprob: -8.143807411193848
    4. ' "' → logprob: -8.643807411193848
    5. ''' → logprob: -9.768807411193848
    6. '("' → logprob: -10.643807411193848
    7. '"S' → logprob: -10.893807411193848
    8. '   ' → logprob: -11.268807411193848
    9. '"K' → logprob: -11.393807411193848
    10. '``' → logprob: -11.768807411193848

Token 202: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -9.317247167928144e-05
    2. '',' → logprob: -10.500093460083008
    3. ' ",' → logprob: -10.500093460083008
    4. '")' → logprob: -11.000093460083008
    5. '","' → logprob: -11.500093460083008
    6. '"' → logprob: -12.500093460083008
    7. '(",' → logprob: -13.250093460083008
    8. '",
' → logprob: -13.500093460083008
    9. ''",' → logprob: -13.500093460083008
    10. ',' → logprob: -14.625093460083008

Token 203: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.007319927681237459
    2. ' "' → logprob: -5.007319927215576
    3. ''' → logprob: -7.632319927215576
    4. ')' → logprob: -9.757320404052734
    5. '<|end|>' → logprob: -10.132320404052734
    6. '"user' → logprob: -12.132320404052734
    7. '")' → logprob: -13.007320404052734
    8. '"""' → logprob: -13.132320404052734
    9. 'space' → logprob: -13.382320404052734
    10. ' ' → logprob: -13.757320404052734

Token 204: '011' (ID: 17342)
  Prédit: '111'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '111' → logprob: -0.004898092709481716
    2. '"' → logprob: -5.8798980712890625
    3. '100' → logprob: -6.6298980712890625
    4. ' ' → logprob: -8.379898071289062
    5. '101' → logprob: -8.629898071289062
    6. '000' → logprob: -9.004898071289062
    7. '001' → logprob: -9.004898071289062
    8. '")' → logprob: -9.754898071289062
    9. '   ' → logprob: -11.004898071289062
    10. '```' → logprob: -11.504898071289062

Token 205: '11' (ID: 994)
  Prédit: '11'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '11' → logprob: -0.5529114007949829
    2. '00' → logprob: -1.302911400794983
    3. '10' → logprob: -1.927911400794983
    4. '01' → logprob: -5.052911281585693
    5. '")' → logprob: -7.677911281585693
    6. '1' → logprob: -8.302911758422852
    7. '100' → logprob: -8.802911758422852
    8. '0' → logprob: -9.052911758422852
    9. '"' → logprob: -9.927911758422852
    10. '111' → logprob: -10.677911758422852

Token 206: '"),
' (ID: 8132)
  Prédit: '"),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"),' → logprob: -0.02835644781589508
    2. '")' → logprob: -3.6533565521240234
    3. '"),
' → logprob: -6.278356552124023
    4. '),' → logprob: -8.903356552124023
    5. ')' → logprob: -10.528356552124023
    6. '",' → logprob: -12.403356552124023
    7. '");' → logprob: -12.903356552124023
    8. '"),

' → logprob: -13.153356552124023
    9. ''),' → logprob: -13.278356552124023
    10. '"' → logprob: -13.778356552124023

Token 207: '   ' (ID: 271)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.30279675126075745
    2. ']' → logprob: -1.427796721458435
    3. '   ' → logprob: -4.427796840667725
    4. '("' → logprob: -4.927796840667725
    5. ')]' → logprob: -6.802796840667725
    6. '")' → logprob: -7.927796840667725
    7. '(' → logprob: -8.802796363830566
    8. '])' → logprob: -8.927796363830566
    9. ' ("' → logprob: -9.427796363830566
    10. '"]' → logprob: -9.427796363830566

Token 208: ' ("' (ID: 7109)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4802594482898712
    2. ']' → logprob: -1.2302594184875488
    3. '("' (adapté à ' ("') → logprob: -2.980259418487549
    4. '   ' → logprob: -3.480259418487549
    5. ')]' → logprob: -5.105259418487549
    6. '])' → logprob: -7.980259418487549
    7. '")' → logprob: -8.105259895324707
    8. ' ("' → logprob: -8.355259895324707
    9. ' ]' → logprob: -9.355259895324707
    10. '"]' → logprob: -9.355259895324707

Token 209: 'Z' (ID: 57)
  Prédit: 'Z'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Z' → logprob: -0.4748247563838959
    2. '"' → logprob: -0.9748247861862183
    3. '"K' → logprob: -8.224824905395508
    4. ' "' → logprob: -8.599824905395508
    5. ''' → logprob: -8.974824905395508
    6. '   ' → logprob: -10.849824905395508
    7. '"S' → logprob: -10.849824905395508
    8. '")' → logprob: -10.849824905395508
    9. '_Z' → logprob: -10.974824905395508
    10. ' Z' → logprob: -11.349824905395508

Token 210: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -8.292095299111679e-05
    2. '"' → logprob: -10.125082969665527
    3. '',' → logprob: -10.625082969665527
    4. ' ",' → logprob: -11.750082969665527
    5. '","' → logprob: -12.625082969665527
    6. ''",' → logprob: -13.125082969665527
    7. '",
' → logprob: -13.250082969665527
    8. '")' → logprob: -14.000082969665527
    9. ',' → logprob: -14.125082969665527
    10. '"',' → logprob: -14.375082969665527

Token 211: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.25252991914749146
    2. ' "' → logprob: -1.5025298595428467
    3. ''' → logprob: -7.752530097961426
    4. ')' → logprob: -9.877530097961426
    5. ' ' → logprob: -10.002530097961426
    6. ' '' → logprob: -10.252530097961426
    7. '<|end|>' → logprob: -11.252530097961426
    8. '")' → logprob: -12.502530097961426
    9. '"""' → logprob: -12.502530097961426
    10. 'space' → logprob: -13.502530097961426

Token 212: '110' (ID: 7920)
  Prédit: '111'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '111' → logprob: -0.0023956287186592817
    2. '110' → logprob: -6.7523956298828125
    3. '100' → logprob: -7.6273956298828125
    4. '"' → logprob: -8.127395629882812
    5. '000' → logprob: -8.127395629882812
    6. ' ' → logprob: -9.502395629882812
    7. '001' → logprob: -10.377395629882812
    8. '101' → logprob: -11.627395629882812
    9. '010' → logprob: -11.627395629882812
    10. '```' → logprob: -11.627395629882812

Token 213: '01' (ID: 2290)
  Prédit: '11'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '11' → logprob: -0.035964809358119965
    2. '01' → logprob: -3.9109647274017334
    3. '00' → logprob: -4.5359649658203125
    4. '10' → logprob: -5.4109649658203125
    5. '1' → logprob: -9.160964965820312
    6. '0' → logprob: -12.410964965820312
    7. '111' → logprob: -12.910964965820312
    8. '```' → logprob: -13.035964965820312
    9. '"' → logprob: -13.723464965820312
    10. '")' → logprob: -13.785964965820312

Token 214: '"),
' (ID: 8132)
  Prédit: '"),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"),' → logprob: -0.1323174238204956
    2. '")' → logprob: -2.132317543029785
    3. '"),
' → logprob: -5.257317543029785
    4. '),' → logprob: -9.382317543029785
    5. ')' → logprob: -9.757317543029785
    6. '"' → logprob: -12.007317543029785
    7. '");' → logprob: -12.382317543029785
    8. '"),
' → logprob: -12.882317543029785
    9. '",' → logprob: -13.132317543029785
    10. '"),

' → logprob: -13.382317543029785

Token 215: '   ' (ID: 271)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.25358331203460693
    2. ')' → logprob: -1.503583312034607
    3. ')]' → logprob: -6.7535834312438965
    4. '"]' → logprob: -8.753582954406738
    5. '   ' → logprob: -8.878582954406738
    6. '])' → logprob: -9.253582954406738
    7. '")' → logprob: -10.253582954406738
    8. '("' → logprob: -11.628582954406738
    9. ' ]' → logprob: -11.628582954406738
    10. ']
' → logprob: -12.253582954406738

Token 216: ' ("' (ID: 7109)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.11401131749153137
    2. ')' → logprob: -2.239011287689209
    3. '"]' → logprob: -7.614011287689209
    4. '")' → logprob: -8.114011764526367
    5. ')]' → logprob: -8.614011764526367
    6. '])' → logprob: -9.239011764526367
    7. ']
' → logprob: -10.114011764526367
    8. '   ' → logprob: -10.614011764526367
    9. ' ]' → logprob: -10.989011764526367
    10. '("' (adapté à ' ("') → logprob: -12.114011764526367

Token 217: '-",' (ID: 187195)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.5190808773040771
    2. '"' → logprob: -1.2690808773040771
    3. ''"' → logprob: -3.144080877304077
    4. ' "' → logprob: -3.894080877304077
    5. ' ")' → logprob: -4.644081115722656
    6. '",' → logprob: -4.894081115722656
    7. ' ",' → logprob: -5.019081115722656
    8. '")' → logprob: -5.144081115722656
    9. ''",' → logprob: -5.269081115722656
    10. ')' → logprob: -5.394081115722656

Token 218: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.06493507325649261
    2. ' "' → logprob: -2.9399349689483643
    3. ''' → logprob: -4.814935207366943
    4. ')' → logprob: -6.814935207366943
    5. ' '' → logprob: -7.314935207366943
    6. ''"' → logprob: -10.314934730529785
    7. ' '"' → logprob: -10.564934730529785
    8. ' )' → logprob: -11.439934730529785
    9. ' "'' → logprob: -11.689934730529785
    10. '<|end|>' → logprob: -11.689934730529785

Token 219: '101' (ID: 7959)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.6553051471710205
    2. '111' → logprob: -1.4053051471710205
    3. '000' → logprob: -2.1553051471710205
    4. '100' → logprob: -3.1553051471710205
    5. '001' → logprob: -3.4053051471710205
    6. '")' → logprob: -4.155304908752441
    7. '010' → logprob: -4.280304908752441
    8. '101' → logprob: -5.155304908752441
    9. '110' → logprob: -5.280304908752441
    10. '""' → logprob: -7.030304908752441

Token 220: '01' (ID: 2290)
  Prédit: '11'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '11' → logprob: -0.8579908609390259
    2. '01' → logprob: -0.8579908609390259
    3. '00' → logprob: -2.1079907417297363
    4. '10' → logprob: -3.6079907417297363
    5. '1' → logprob: -6.607990741729736
    6. ')' → logprob: -7.232990741729736
    7. '")' → logprob: -7.732990741729736
    8. '0' → logprob: -8.107991218566895
    9. '111' → logprob: -8.857991218566895
    10. '101' → logprob: -9.732991218566895

Token 221: '"),
' (ID: 8132)
  Prédit: '"),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"),' → logprob: -0.16464319825172424
    2. '")' → logprob: -1.9146431684494019
    3. '"),
' → logprob: -5.664643287658691
    4. ')' → logprob: -7.539643287658691
    5. '),' → logprob: -7.914643287658691
    6. '",' → logprob: -11.664643287658691
    7. '");' → logprob: -11.664643287658691
    8. '"' → logprob: -12.039643287658691
    9. '"),

' → logprob: -12.289643287658691
    10. '"),
' → logprob: -12.414643287658691

Token 222: '   ' (ID: 271)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.18714970350265503
    2. ']' → logprob: -1.8121497631072998
    3. '")' → logprob: -6.187149524688721
    4. '   ' → logprob: -6.312149524688721
    5. ')]' → logprob: -6.312149524688721
    6. '("' → logprob: -7.187149524688721
    7. '"]' → logprob: -7.562149524688721
    8. '])' → logprob: -8.812150001525879
    9. '),' → logprob: -10.187150001525879
    10. ')
' → logprob: -10.687150001525879

Token 223: ' ("' (ID: 7109)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3216484487056732
    2. ']' → logprob: -1.4466484785079956
    3. '("' (adapté à ' ("') → logprob: -3.321648359298706
    4. '")' → logprob: -6.821648597717285
    5. ')]' → logprob: -7.321648597717285
    6. '   ' → logprob: -7.696648597717285
    7. '"]' → logprob: -7.946648597717285
    8. '])' → logprob: -8.571648597717285
    9. '(' → logprob: -9.446648597717285
    10. '),' → logprob: -9.696648597717285

Token 224: ''",' (ID: 48303)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.5148078203201294
    2. ''' → logprob: -1.5148078203201294
    3. ' ",' → logprob: -2.51480770111084
    4. ' "' → logprob: -2.88980770111084
    5. '0' → logprob: -4.51480770111084
    6. ' ")' → logprob: -4.76480770111084
    7. '",' → logprob: -4.76480770111084
    8. ' ' → logprob: -5.13980770111084
    9. ' ","' → logprob: -5.38980770111084
    10. ''",' → logprob: -6.63980770111084

Token 225: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.19550928473472595
    2. ' "' → logprob: -1.8205093145370483
    3. ''' → logprob: -4.445509433746338
    4. ')' → logprob: -6.195509433746338
    5. '"user' → logprob: -7.320509433746338
    6. ' '' → logprob: -7.570509433746338
    7. ' "'' → logprob: -8.07050895690918
    8. '<|end|>' → logprob: -9.32050895690918
    9. ' "')' → logprob: -9.82050895690918
    10. '"value' → logprob: -10.19550895690918

Token 226: '001' (ID: 7659)
  Prédit: '000'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '000' → logprob: -0.8726100325584412
    2. '010' → logprob: -1.622610092163086
    3. '001' → logprob: -1.622610092163086
    4. '111' → logprob: -2.622610092163086
    5. '101' → logprob: -3.122610092163086
    6. '100' → logprob: -3.122610092163086
    7. '011' → logprob: -4.247610092163086
    8. ''' → logprob: -5.497610092163086
    9. '110' → logprob: -5.872610092163086
    10. '"' → logprob: -6.122610092163086

Token 227: '01' (ID: 2290)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.6465858221054077
    2. '11' → logprob: -1.2715858221054077
    3. '00' → logprob: -2.2715859413146973
    4. '01' → logprob: -2.5215859413146973
    5. ')' → logprob: -5.021585941314697
    6. ''' → logprob: -5.521585941314697
    7. '')' → logprob: -7.396585941314697
    8. '"' → logprob: -7.646585941314697
    9. '1' → logprob: -8.646585464477539
    10. '")' → logprob: -8.771585464477539

Token 228: '"),
' (ID: 8132)
  Prédit: '"),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"),' → logprob: -0.22977861762046814
    2. '")' → logprob: -1.6047786474227905
    3. '"),
' → logprob: -5.97977876663208
    4. '),' → logprob: -6.85477876663208
    5. ')' → logprob: -7.22977876663208
    6. '"' → logprob: -11.729778289794922
    7. '",' → logprob: -11.854778289794922
    8. ' "),' → logprob: -11.854778289794922
    9. '   ' → logprob: -12.104778289794922
    10. ''),' → logprob: -12.354778289794922

Token 229: '   ' (ID: 271)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.5785168409347534
    2. ')' → logprob: -0.8285168409347534
    3. '   ' → logprob: -7.453516960144043
    4. '("' → logprob: -7.578516960144043
    5. '])' → logprob: -7.703516960144043
    6. ')]' → logprob: -7.703516960144043
    7. '")' → logprob: -8.453516960144043
    8. '"]' → logprob: -9.328516960144043
    9. '],' → logprob: -9.578516960144043
    10. '),' → logprob: -9.578516960144043

Token 230: ' ("' (ID: 7109)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5830107927322388
    2. ']' → logprob: -0.8330107927322388
    3. '("' (adapté à ' ("') → logprob: -5.333010673522949
    4. ')]' → logprob: -6.958010673522949
    5. '")' → logprob: -7.833010673522949
    6. '   ' → logprob: -8.45801067352295
    7. '])' → logprob: -8.45801067352295
    8. '"]' → logprob: -8.70801067352295
    9. ' ]' → logprob: -10.20801067352295
    10. '#' → logprob: -10.70801067352295

Token 231: ' ",' (ID: 6813)
  Prédit: ' ")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ")' → logprob: -0.15529181063175201
    2. ' "' → logprob: -3.030291795730591
    3. ' ",' → logprob: -3.405291795730591
    4. '#' → logprob: -4.40529203414917
    5. ' "),' → logprob: -4.40529203414917
    6. '"' → logprob: -5.15529203414917
    7. ' "]' → logprob: -5.28029203414917
    8. '*' → logprob: -5.40529203414917
    9. '?' → logprob: -5.65529203414917
    10. ' ")
' → logprob: -6.03029203414917

Token 232: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.004777687601745129
    2. ''' → logprob: -5.629777908325195
    3. ')' → logprob: -7.754777908325195
    4. ''"' → logprob: -7.879777908325195
    5. '"'' → logprob: -8.379777908325195
    6. ' "' → logprob: -9.004777908325195
    7. '")' → logprob: -12.254777908325195
    8. ')"' → logprob: -13.004777908325195
    9. ' '' → logprob: -13.379777908325195
    10. ' "'' → logprob: -13.379777908325195

Token 233: '000' (ID: 1302)
  Prédit: '000'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '000' → logprob: -0.3621476888656616
    2. '")' → logprob: -1.3621476888656616
    3. '"' → logprob: -3.737147808074951
    4. '""' → logprob: -4.862147808074951
    5. '111' → logprob: -4.987147808074951
    6. ' ")' → logprob: -6.112147808074951
    7. '100' → logprob: -6.362147808074951
    8. '110' → logprob: -6.612147808074951
    9. '001' → logprob: -6.737147808074951
    10. '010' → logprob: -6.737147808074951

Token 234: '01' (ID: 2290)
  Prédit: '00'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '00' → logprob: -0.029000964015722275
    2. '01' → logprob: -3.779000997543335
    3. '10' → logprob: -6.029000759124756
    4. '11' → logprob: -6.529000759124756
    5. ' ")' → logprob: -6.779000759124756
    6. '")' → logprob: -7.904000759124756
    7. '0' → logprob: -8.529001235961914
    8. '"' → logprob: -9.654001235961914
    9. '1' → logprob: -9.654001235961914
    10. '000' → logprob: -10.779001235961914

Token 235: '"),
' (ID: 8132)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.5814191699028015
    2. '"),' → logprob: -0.8314191699028015
    3. '"),
' → logprob: -5.956418991088867
    4. ')' → logprob: -5.956418991088867
    5. '),' → logprob: -8.331418991088867
    6. ')")' → logprob: -10.456418991088867
    7. '"),
' → logprob: -12.581418991088867
    8. '"' → logprob: -12.956418991088867
    9. '"),

' → logprob: -13.081418991088867
    10. '   ' → logprob: -13.581418991088867

Token 236: '   ' (ID: 271)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.43106845021247864
    2. ')' → logprob: -1.0560684204101562
    3. ')]' → logprob: -6.431068420410156
    4. '   ' → logprob: -8.306068420410156
    5. '])' → logprob: -8.806068420410156
    6. '"]' → logprob: -9.056068420410156
    7. '")' → logprob: -9.931068420410156
    8. '("' → logprob: -9.931068420410156
    9. '),' → logprob: -10.056068420410156
    10. '],' → logprob: -10.556068420410156

Token 237: ' ("' (ID: 7109)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.07985988259315491
    2. ')' → logprob: -2.579859972000122
    3. '("' (adapté à ' ("') → logprob: -7.829859733581543
    4. ')]' → logprob: -7.954859733581543
    5. '])' → logprob: -9.579859733581543
    6. '   ' → logprob: -9.829859733581543
    7. ' ]' → logprob: -10.704859733581543
    8. ']
' → logprob: -10.954859733581543
    9. '"]' → logprob: -11.079859733581543
    10. '(' → logprob: -11.954859733581543

Token 238: '?",' (ID: 58900)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3344798982143402
    2. '")' → logprob: -2.459479808807373
    3. '"' → logprob: -3.209479808807373
    4. '?' → logprob: -3.459479808807373
    5. '"\' → logprob: -3.584479808807373
    6. '#' → logprob: -4.084479808807373
    7. ']' → logprob: -4.334479808807373
    8. '0' → logprob: -4.584479808807373
    9. ')]' → logprob: -5.084479808807373
    10. ''' → logprob: -5.334479808807373

Token 239: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.4392161965370178
    2. ' "' → logprob: -1.064216136932373
    3. ''' → logprob: -5.064216136932373
    4. ')' → logprob: -6.189216136932373
    5. ' '' → logprob: -6.314216136932373
    6. '<|end|>' → logprob: -8.814216613769531
    7. ' ' → logprob: -10.689216613769531
    8. '"user' → logprob: -11.064216613769531
    9. ' ' → logprob: -11.939216613769531
    10. ',' → logprob: -12.064216613769531

Token 240: '111' (ID: 8780)
  Prédit: '111'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '111' → logprob: -0.1069120317697525
    2. '101' → logprob: -2.856912136077881
    3. '001' → logprob: -3.731912136077881
    4. '100' → logprob: -4.731912136077881
    5. '000' → logprob: -5.481912136077881
    6. '110' → logprob: -5.856912136077881
    7. '"' → logprob: -6.606912136077881
    8. '")' → logprob: -6.856912136077881
    9. '010' → logprob: -7.606912136077881
    10. '011' → logprob: -7.606912136077881

Token 241: '11' (ID: 994)
  Prédit: '00'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '00' → logprob: -0.6851629018783569
    2. '01' → logprob: -1.185162901878357
    3. '11' → logprob: -2.3101630210876465
    4. '10' → logprob: -3.0601630210876465
    5. '")' → logprob: -3.4351630210876465
    6. '111' → logprob: -5.3101630210876465
    7. '010' → logprob: -5.5601630210876465
    8. '011' → logprob: -7.0601630210876465
    9. '000' → logprob: -7.3101630210876465
    10. '110' → logprob: -7.5601630210876465

Token 242: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '")' → logprob: -0.4905237853527069
    2. '"),' → logprob: -0.9905238151550293
    3. ')' → logprob: -4.490523815155029
    4. '),' → logprob: -5.615523815155029
    5. '"),
' → logprob: -6.615523815155029
    6. ')")' → logprob: -9.615523338317871
    7. '",' → logprob: -10.990523338317871
    8. '"' → logprob: -11.740523338317871
    9. '");' → logprob: -11.740523338317871
    10. '),
' → logprob: -12.115523338317871

Token 243: ']

' (ID: 3144)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -8.53050296427682e-05
    2. ')' → logprob: -9.75008487701416
    3. ' ]' → logprob: -11.00008487701416
    4. ']
' → logprob: -12.75008487701416
    5. '<|end|>' → logprob: -12.87508487701416
    6. ']

' → logprob: -14.37508487701416
    7. '[' → logprob: -14.50008487701416
    8. '])' → logprob: -14.50008487701416
    9. '[
' → logprob: -14.62508487701416
    10. '}' → logprob: -14.62508487701416

Token 244: '#' (ID: 2)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.08256348967552185
    2. ']' → logprob: -4.082563400268555
    3. '{' → logprob: -4.207563400268555
    4. '(' → logprob: -4.457563400268555
    5. ',' → logprob: -4.457563400268555
    6. ')' → logprob: -4.957563400268555
    7. '.' → logprob: -5.207563400268555
    8. '#' → logprob: -5.832563400268555
    9. ''' → logprob: -5.957563400268555
    10. 'def' → logprob: -6.582563400268555

Token 245: ' Create' (ID: 6585)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.9322738647460938
    2. 'code' → logprob: -1.1822738647460938
    3. 'def' → logprob: -2.5572738647460938
    4. 'codes' → logprob: -2.8072738647460938
    5. 'table' → logprob: -3.4322738647460938
    6. 'lookup' → logprob: -3.8072738647460938
    7. 'decode' → logprob: -3.9322738647460938
    8. 'reverse' → logprob: -4.057273864746094
    9. '#' → logprob: -4.557273864746094
    10. 'decoded' → logprob: -4.557273864746094

Token 246: ' dictionary' (ID: 22131)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.5343019962310791
    2. 'a' → logprob: -1.534301996231079
    3. 'code' → logprob: -2.534301996231079
    4. 'dict' → logprob: -3.284301996231079
    5. 'char' → logprob: -3.534301996231079
    6. ' code' → logprob: -5.0343017578125
    7. 'encoding' → logprob: -5.1593017578125
    8. 'dictionary' → logprob: -5.2843017578125
    9. ' an' → logprob: -5.5343017578125
    10. 'table' → logprob: -5.6593017578125

Token 247: ' code' (ID: 3490)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.2913821041584015
    2. 'dict' → logprob: -2.291382074356079
    3. 'table' → logprob: -2.416382074356079
    4. 'code' → logprob: -3.791382074356079
    5. 'mapping' → logprob: -4.291382312774658
    6. '{' → logprob: -5.041382312774658
    7. 'encoding' → logprob: -5.541382312774658
    8. 'lookup' → logprob: -5.916382312774658
    9. 'codes' → logprob: -6.166382312774658
    10. ' =' → logprob: -6.416382312774658

Token 248: '->' (ID: 609)
  Prédit: '_to'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_to' → logprob: -0.4322834312915802
    2. '_map' → logprob: -2.057283401489258
    3. ' =' → logprob: -2.307283401489258
    4. '_dict' → logprob: -2.557283401489258
    5. 'book' → logprob: -4.057283401489258
    6. 'to' → logprob: -4.682283401489258
    7. 'dict' → logprob: -4.807283401489258
    8. '=' → logprob: -5.432283401489258
    9. 'map' → logprob: -5.932283401489258
    10. '_table' → logprob: -6.932283401489258

Token 249: 'char' (ID: 3257)
  Prédit: 'char'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.010237868875265121
    2. 'letter' → logprob: -4.635237693786621
    3. 'character' → logprob: -8.260237693786621
    4. 'symbol' → logprob: -8.885237693786621
    5. ' char' → logprob: -9.760237693786621
    6. 'dict' → logprob: -11.635237693786621
    7. ' letter' → logprob: -11.760237693786621
    8. 'chr' → logprob: -12.635237693786621
    9. 'ch' → logprob: -13.260237693786621
    10. 'token' → logprob: -13.635237693786621

Token 250: ' for' (ID: 395)
  Prédit: 'code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'code' → logprob: -0.00039170795935206115
    2. 'codes' → logprob: -8.000391960144043
    3. '{' → logprob: -10.750391960144043
    4. 'char' → logprob: -11.250391960144043
    5. '{
' → logprob: -12.250391960144043
    6. ' code' → logprob: -12.375391960144043
    7. 'dict' → logprob: -12.625391960144043
    8. 'table' → logprob: -13.250391960144043
    9. '_code' → logprob: -13.250391960144043
    10. '```' → logprob: -13.250391960144043

Token 251: ' decoding' (ID: 105891)
  Prédit: ' decoding'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' decoding' → logprob: -0.11371153593063354
    2. 'code' → logprob: -2.6137115955352783
    3. 'dec' → logprob: -3.7387115955352783
    4. ' code' → logprob: -4.863711357116699
    5. 'decode' → logprob: -6.863711357116699
    6. 'char' → logprob: -7.113711357116699
    7. ' dec' → logprob: -8.3637113571167
    8. 'reverse' → logprob: -8.7387113571167
    9. ' decode' → logprob: -9.6137113571167
    10. 'lookup' → logprob: -9.9887113571167

Token 252: '
' (ID: 198)
  Prédit: 'code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'code' → logprob: -0.0058011626824736595
    2. 'decode' → logprob: -5.380801200866699
    3. 'codes' → logprob: -7.255801200866699
    4. 'decoder' → logprob: -8.7558012008667
    5. 'dec' → logprob: -9.1308012008667
    6. '{' → logprob: -9.3808012008667
    7. 'decoded' → logprob: -10.1308012008667
    8. '{
' → logprob: -10.6308012008667
    9. 'table' → logprob: -11.0058012008667
    10. '```' → logprob: -11.5058012008667

Token 253: 'code' (ID: 3056)
  Prédit: 'code'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'code' → logprob: -0.006633778568357229
    2. 'codes' → logprob: -5.756633758544922
    3. 'decode' → logprob: -5.756633758544922
    4. 'dec' → logprob: -9.381633758544922
    5. 'decoder' → logprob: -9.381633758544922
    6. ' code' → logprob: -10.006633758544922
    7. 'decoded' → logprob: -10.881633758544922
    8. 'dict' → logprob: -11.256633758544922
    9. '{' → logprob: -11.381633758544922
    10. 'table' → logprob: -11.881633758544922

Token 254: '_to' (ID: 5089)
  Prédit: '_to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_to' → logprob: -0.011591192334890366
    2. '_map' → logprob: -4.886590957641602
    3. '_' → logprob: -5.761590957641602
    4. '_dict' → logprob: -8.261590957641602
    5. '=' → logprob: -8.511590957641602
    6. '_mapping' → logprob: -8.886590957641602
    7. '_table' → logprob: -9.136590957641602
    8. '2' → logprob: -9.636590957641602
    9. 'to' → logprob: -10.136590957641602
    10. ' =' → logprob: -12.011590957641602

Token 255: '_char' (ID: 23398)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'char' → logprob: -3.583550642360933e-05
    2. '_char' → logprob: -10.250036239624023
    3. ' char' → logprob: -14.875036239624023
    4. 'chart' → logprob: -18.625036239624023
    5. 'Char' → logprob: -19.000036239624023
    6. '<char' → logprob: -19.125036239624023
    7. '-char' → logprob: -19.375036239624023
    8. 'chars' → logprob: -19.750036239624023
    9. 'character' → logprob: -19.750036239624023
    10. '.char' → logprob: -20.250036239624023

Token 256: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.4740811586380005
    2. ' =' → logprob: -0.9740811586380005
    3. '={}' → logprob: -14.099081039428711
    4. '_' → logprob: -14.224081039428711
    5. ' ={' → logprob: -14.224081039428711
    6. ' ' → logprob: -14.974081039428711
    7. '={' → logprob: -14.974081039428711
    8. '[' → logprob: -15.099081039428711
    9. '{' → logprob: -15.474081039428711
    10. '={"' → logprob: -15.724081039428711

Token 257: ' {}
' (ID: 11421)
  Prédit: '{'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '{' → logprob: -0.029889097437262535
    2. '{}' → logprob: -3.5298891067504883
    3. ' {' → logprob: -9.279889106750488
    4. 'dict' → logprob: -10.529889106750488
    5. '{i' → logprob: -12.029889106750488
    6. '{x' → logprob: -12.529889106750488
    7. '{k' → logprob: -12.654889106750488
    8. '{text' → logprob: -13.404889106750488
    9. '{name' → logprob: -13.779889106750488
    10. '{id' → logprob: -13.779889106750488

Token 258: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -5.848420551046729e-05
    2. ' for' → logprob: -9.7500581741333
    3. '
' → logprob: -17.250059127807617
    4. ')' → logprob: -17.500059127807617
    5. 'code' → logprob: -18.125059127807617
    6. 'or' → logprob: -18.250059127807617
    7. '	for' → logprob: -18.750059127807617
    8. '```' → logprob: -18.875059127807617
    9. '   ' → logprob: -19.375059127807617
    10. 'For' → logprob: -20.250059127807617

Token 259: ' ch' (ID: 549)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.0016475648153573275
    2. 'ch' → logprob: -6.751647472381592
    3. 'letter' → logprob: -8.25164794921875
    4. ' char' → logprob: -8.62664794921875
    5. '(char' → logprob: -11.25164794921875
    6. 'symbol' → logprob: -12.00164794921875
    7. 'c' → logprob: -12.37664794921875
    8. '_char' → logprob: -12.50164794921875
    9. '_,' → logprob: -12.62664794921875
    10. 'key' → logprob: -13.00164794921875

Token 260: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0008773969602771103
    2. ' ,' → logprob: -7.250877380371094
    3. ' in' → logprob: -9.125877380371094
    4. 'in' → logprob: -10.125877380371094
    5. ' ' → logprob: -12.125877380371094
    6. ',char' → logprob: -12.875877380371094
    7. ',ch' → logprob: -13.250877380371094
    8. 'e' → logprob: -13.375877380371094
    9. '_,' → logprob: -13.750877380371094
    10. 'i' → logprob: -13.875877380371094

Token 261: ' code' (ID: 3490)
  Prédit: 'code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'code' → logprob: -0.16030892729759216
    2. ' code' → logprob: -1.9103089570999146
    3. 'cod' → logprob: -10.285308837890625
    4. 'cd' → logprob: -10.910308837890625
    5. ' cod' → logprob: -11.285308837890625
    6. 'c' → logprob: -12.660308837890625
    7. 'co' → logprob: -12.660308837890625
    8. ' cd' → logprob: -12.910308837890625
    9. ' c' → logprob: -13.035308837890625
    10. ' co' → logprob: -13.035308837890625

Token 262: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.31327563524246216
    2. 'in' → logprob: -1.3132755756378174
    3. ' ' → logprob: -12.313275337219238
    4. '	in' → logprob: -12.813275337219238
    5. 'n' → logprob: -12.938275337219238
    6. ',' → logprob: -13.313275337219238
    7. 's' → logprob: -14.438275337219238
    8. '_in' → logprob: -15.063275337219238
    9. 'i' → logprob: -15.188275337219238
    10. 'import' → logprob: -15.313275337219238

Token 263: ' table' (ID: 3293)
  Prédit: 'table'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'table' → logprob: -0.023246178403496742
    2. ' table' → logprob: -3.7732462882995605
    3. '	table' → logprob: -15.023245811462402
    4. '(table' → logprob: -15.523245811462402
    5. ')table' → logprob: -15.898245811462402
    6. 'code' → logprob: -17.02324676513672
    7. ' ' → logprob: -17.52324676513672
    8. '<table' → logprob: -17.64824676513672
    9. '   ' → logprob: -18.14824676513672
    10. 'Table' → logprob: -18.14824676513672

Token 264: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.3829507827758789
    2. ' in' → logprob: -1.507950782775879
    3. 'in' → logprob: -2.382950782775879
    4. ':
' → logprob: -6.507950782775879
    5. ' :' → logprob: -7.257950782775879
    6. '):' → logprob: -7.257950782775879
    7. '   ' → logprob: -7.632950782775879
    8. '_in' → logprob: -8.757950782775879
    9. ')' → logprob: -8.757950782775879
    10. ',' → logprob: -9.007950782775879

Token 265: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6946767568588257
    2. ' code' → logprob: -0.6946767568588257
    3. '	code' → logprob: -6.944676876068115
    4. 'code' → logprob: -7.569676876068115
    5. '(code' → logprob: -11.069676399230957
    6. '_code' → logprob: -11.319676399230957
    7. ' ' → logprob: -12.194676399230957
    8. '    
' → logprob: -12.569676399230957
    9. ' cod' → logprob: -13.069676399230957
    10. ')' → logprob: -13.819676399230957

Token 266: ' code' (ID: 3490)
  Prédit: 'code'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'code' (adapté à ' code') → logprob: -0.25328269600868225
    2. ' code' → logprob: -1.5032826662063599
    3. '   ' → logprob: -6.62828254699707
    4. '	code' → logprob: -10.62828254699707
    5. '_code' → logprob: -12.37828254699707
    6. '(code' → logprob: -14.12828254699707
    7. '```' → logprob: -15.00328254699707
    8. '.code' → logprob: -15.12828254699707
    9. ' ' → logprob: -16.25328254699707
    10. 'Code' → logprob: -16.25328254699707

Token 267: '_to' (ID: 5089)
  Prédit: '_to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_to' → logprob: -1.2113979209971149e-05
    2. 'to' → logprob: -11.750012397766113
    3. '_code' → logprob: -12.875012397766113
    4. '   ' → logprob: -14.625012397766113
    5. '=' → logprob: -14.750012397766113
    6. ']' → logprob: -15.750012397766113
    7. '_' → logprob: -16.000011444091797
    8. ')' → logprob: -16.250011444091797
    9. 'code' → logprob: -16.500011444091797
    10. ' =' → logprob: -17.375011444091797

Token 268: '_char' (ID: 23398)
  Prédit: '_char'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_char' → logprob: -0.08791441470384598
    2. 'code' → logprob: -2.96291446685791
    3. 'char' → logprob: -3.71291446685791
    4. '_code' → logprob: -5.33791446685791
    5. '[' → logprob: -5.83791446685791
    6. ' code' → logprob: -8.08791446685791
    7. ' char' → logprob: -10.96291446685791
    8. 'ch' → logprob: -11.21291446685791
    9. '_ch' → logprob: -11.46291446685791
    10. '_chars' → logprob: -12.21291446685791

Token 269: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.1875571544806007e-05
    2. ' [' → logprob: -11.875011444091797
    3. '[c' → logprob: -13.125011444091797
    4. 'code' → logprob: -13.250011444091797
    5. '[ch' → logprob: -14.750011444091797
    6. '["' → logprob: -15.375011444091797
    7. '   ' → logprob: -16.000011444091797
    8. '\[' → logprob: -16.250011444091797
    9. '[`' → logprob: -17.125011444091797
    10. '[
' → logprob: -17.125011444091797

Token 270: 'code' (ID: 3056)
  Prédit: 'code'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'code' → logprob: -0.00023286080977413803
    2. ' code' → logprob: -8.375232696533203
    3. ']' → logprob: -13.250232696533203
    4. '[' → logprob: -15.875232696533203
    5. ' ' → logprob: -16.125232696533203
    6. '   ' → logprob: -16.250232696533203
    7. '(code' → logprob: -16.250232696533203
    8. 'codes' → logprob: -17.250232696533203
    9. '_code' → logprob: -17.375232696533203
    10. ')' → logprob: -17.875232696533203

Token 271: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0002491807099431753
    2. ' ]' → logprob: -8.875248908996582
    3. ']=' → logprob: -9.125248908996582
    4. '=' → logprob: -15.250248908996582
    5. ' =' → logprob: -16.3752498626709
    6. '"]' → logprob: -16.7502498626709
    7. ')' → logprob: -17.8752498626709
    8. '']' → logprob: -18.0002498626709
    9. '[' → logprob: -18.1252498626709
    10. ']="' → logprob: -18.6252498626709

Token 272: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.0024855269584804773
    2. ' =' → logprob: -6.002485752105713
    3. ']' → logprob: -11.627485275268555
    4. ']=' → logprob: -14.127485275268555
    5. '[' → logprob: -16.377485275268555
    6. '=
' → logprob: -17.002485275268555
    7. ')' → logprob: -17.377485275268555
    8. '=

' → logprob: -17.752485275268555
    9. '   ' → logprob: -18.252485275268555
    10. '=}' → logprob: -18.377485275268555

Token 273: ' ch' (ID: 549)
  Prédit: 'ch'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ch' → logprob: -0.005233882926404476
    2. ' ch' → logprob: -5.2552337646484375
    3. '	ch' → logprob: -17.130233764648438
    4. '[ch' → logprob: -19.630233764648438
    5. '   ' → logprob: -20.005233764648438
    6. ' ' → logprob: -20.130233764648438
    7. '(ch' → logprob: -20.255233764648438
    8. ' ' → logprob: -21.755233764648438
    9. ',ch' → logprob: -22.005233764648438
    10. 'Ch' → logprob: -22.130233764648438

Token 274: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.16602760553359985
    2. '<|end|>' → logprob: -2.041027545928955
    3. '#' → logprob: -4.916027545928955
    4. '<|end|>' → logprob: -4.916027545928955
    5. '

' → logprob: -6.041027545928955
    6. 'newline' → logprob: -6.166027545928955
    7. 'def' → logprob: -7.041027545928955
    8. '.' → logprob: -7.416027545928955
    9. '\n' → logprob: -7.791027545928955
    10. ' ' → logprob: -8.291028022766113

Token 275: 'import' (ID: 561)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.3937928080558777
    2. '#' → logprob: -1.6437928676605225
    3. 'decoded' → logprob: -3.5187928676605225
    4. '
' → logprob: -3.7687928676605225
    5. '```' → logprob: -4.268792629241943
    6. '<|end|>' → logprob: -4.518792629241943
    7. 'newline' → logprob: -4.893792629241943
    8. 'decode' → logprob: -5.018792629241943
    9. 'n' → logprob: -5.143792629241943
    10. '\n' → logprob: -5.268792629241943

Token 276: ' sys' (ID: 12228)
  Prédit: ' sys'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sys' → logprob: -0.8211361765861511
    2. ' re' → logprob: -1.321136236190796
    3. ' heap' → logprob: -1.696136236190796
    4. ' collections' → logprob: -2.946136236190796
    5. ' math' → logprob: -3.946136236190796
    6. ' itertools' → logprob: -4.696135997772217
    7. ' base' → logprob: -4.821135997772217
    8. ' json' → logprob: -5.071135997772217
    9. ' bit' → logprob: -5.321135997772217
    10. 'collections' → logprob: -5.696135997772217

Token 277: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.21980656683444977
    2. 'for' → logprob: -1.7198065519332886
    3. 'data' → logprob: -4.344806671142578
    4. 'input' → logprob: -5.719806671142578
    5. '
' → logprob: -6.969806671142578
    6. 'line' → logprob: -8.219806671142578
    7. 'buffer' → logprob: -8.844806671142578
    8. 'code' → logprob: -8.844806671142578
    9. 'decoded' → logprob: -9.594806671142578
    10. ' for' → logprob: -9.719806671142578

Token 278: 'for' (ID: 1938)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.07384568452835083
    2. 'buffer' → logprob: -3.073845624923706
    3. 'current' → logprob: -5.073845863342285
    4. 'decoded' → logprob: -5.073845863342285
    5. 'encoded' → logprob: -5.573845863342285
    6. 'for' → logprob: -5.698845863342285
    7. 'input' → logprob: -6.073845863342285
    8. 'code' → logprob: -6.698845863342285
    9. 'data' → logprob: -7.323845863342285
    10. 'line' → logprob: -7.948845863342285

Token 279: ' line' (ID: 2543)
  Prédit: ' line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' line' → logprob: -0.000912774819880724
    2. 'line' → logprob: -7.000912666320801
    3. ' ' → logprob: -14.3759126663208
    4. '	line' → logprob: -15.1259126663208
    5. ' lin' → logprob: -15.7509126663208
    6. ' code' → logprob: -16.000913619995117
    7. ' ' → logprob: -16.375913619995117
    8. ' input' → logprob: -16.875913619995117
    9. '_line' → logprob: -17.000913619995117
    10. ' l' → logprob: -17.000913619995117

Token 280: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.03384186699986458
    2. 'in' → logprob: -3.408841848373413
    3. ' ' → logprob: -8.658842086791992
    4. 'import' → logprob: -12.033842086791992
    5. '	in' → logprob: -12.283842086791992
    6. 'line' → logprob: -12.533842086791992
    7. ' ' → logprob: -13.158842086791992
    8. '_' → logprob: -13.658842086791992
    9. 's' → logprob: -13.908842086791992
    10. ' =' → logprob: -14.033842086791992

Token 281: ' sys' (ID: 12228)
  Prédit: 'sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sys' → logprob: -0.3132675588130951
    2. ' sys' → logprob: -1.3132675886154175
    3. '=sys' → logprob: -12.188267707824707
    4. '	sys' → logprob: -15.063267707824707
    5. '(sys' → logprob: -15.313267707824707
    6. 'in' → logprob: -17.68826675415039
    7. 'iter' → logprob: -17.68826675415039
    8. 'stdin' → logprob: -17.81326675415039
    9. 's' → logprob: -17.93826675415039
    10. 'import' → logprob: -18.43826675415039

Token 282: '.stdin' (ID: 93480)
  Prédit: '.stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.stdin' → logprob: -0.014206876046955585
    2. 'stdin' → logprob: -4.264206886291504
    3. 'in' → logprob: -10.514206886291504
    4. '(stdin' → logprob: -12.139206886291504
    5. '.readline' → logprob: -12.389206886291504
    6. 'import' → logprob: -12.389206886291504
    7. ' stdin' → logprob: -13.764206886291504
    8. '.' → logprob: -14.889206886291504
    9. 'input' → logprob: -15.264206886291504
    10. '```' → logprob: -15.389206886291504

Token 283: ':
' (ID: 734)
  Prédit: '.readline'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.38992729783058167
    2. ':' → logprob: -1.1399272680282593
    3. ' in' → logprob: -6.514927387237549
    4. '.readlines' → logprob: -7.389927387237549
    5. '.rstrip' → logprob: -8.38992691040039
    6. ':
' → logprob: -8.63992691040039
    7. '.' → logprob: -8.76492691040039
    8. 'rstrip' → logprob: -9.38992691040039
    9. ' readline' → logprob: -9.51492691040039
    10. '.strip' → logprob: -9.76492691040039

Token 284: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.003843778744339943
    2. ' line' → logprob: -6.378843784332275
    3. ' decoded' → logprob: -6.378843784332275
    4. '   ' → logprob: -9.253843307495117
    5. ' for' → logprob: -9.378843307495117
    6. ' text' → logprob: -9.503843307495117
    7. ' s' → logprob: -9.628843307495117
    8. ' code' → logprob: -10.128843307495117
    9. ' input' → logprob: -10.878843307495117
    10. 'decoded' → logprob: -11.503843307495117

Token 285: ' line' (ID: 2543)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09439290314912796
    2. ' line' → logprob: -2.969393014907837
    3. 'line' (adapté à ' line') → logprob: -4.219392776489258
    4. ' code' → logprob: -4.844392776489258
    5. ' decoded' → logprob: -4.844392776489258
    6. 'code' → logprob: -5.719392776489258
    7. 'decoded' → logprob: -5.844392776489258
    8. ' text' → logprob: -7.094392776489258
    9. 'encoded' → logprob: -8.219392776489258
    10. ' encoded' → logprob: -8.219392776489258

Token 286: '=line' (ID: 192488)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.19673794507980347
    2. '=line' → logprob: -2.1967380046844482
    3. ' =' → logprob: -2.6967380046844482
    4. 'rstrip' → logprob: -13.321738243103027
    5. '.rstrip' → logprob: -14.196738243103027
    6. '=str' → logprob: -14.696738243103027
    7. '.strip' → logprob: -15.071738243103027
    8. '=
' → logprob: -15.696738243103027
    9. '_strip' → logprob: -15.696738243103027
    10. 'line' → logprob: -15.946738243103027

Token 287: '.strip' (ID: 40613)
  Prédit: '.strip'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.strip' → logprob: -0.10109046846628189
    2. '.rstrip' → logprob: -2.351090431213379
    3. '.' → logprob: -7.101090431213379
    4. '.replace' → logprob: -10.726090431213379
    5. 'strip' → logprob: -11.101090431213379
    6. 'rstrip' → logprob: -11.601090431213379
    7. '.lower' → logprob: -11.976090431213379
    8. ' .' → logprob: -13.101090431213379
    9. '_strip' → logprob: -13.476090431213379
    10. '().' → logprob: -14.226090431213379

Token 288: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.018161294981837273
    2. '()
' → logprob: -4.018161296844482
    3. '()

' → logprob: -12.518160820007324
    4. '()
' → logprob: -12.643160820007324
    5. '()\' → logprob: -12.893160820007324
    6. '()`' → logprob: -14.518160820007324
    7. '())' → logprob: -15.018160820007324
    8. '(' → logprob: -15.643160820007324
    9. '   ' → logprob: -15.643160820007324
    10. '()"' → logprob: -15.893160820007324

Token 289: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02988366037607193
    2. 'decoded' → logprob: -3.904883623123169
    3. 'i' → logprob: -5.154883861541748
    4. ' i' → logprob: -6.904883861541748
    5. ' decoded' → logprob: -7.029883861541748
    6. 'pos' → logprob: -7.529883861541748
    7. 'code' → logprob: -7.529883861541748
    8. 'if' → logprob: -9.27988338470459
    9. 'idx' → logprob: -9.65488338470459
    10. 'output' → logprob: -9.65488338470459

Token 290: ' if' (ID: 538)
  Prédit: 'decoded'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'decoded' → logprob: -0.18526431918144226
    2. 'i' → logprob: -2.5602643489837646
    3. 'result' → logprob: -3.5602643489837646
    4. 'pos' → logprob: -4.1852641105651855
    5. 'res' → logprob: -4.1852641105651855
    6. 'output' → logprob: -4.4352641105651855
    7. 'buffer' → logprob: -5.0602641105651855
    8. 'if' (adapté à ' if') → logprob: -5.3102641105651855
    9. 'idx' → logprob: -5.4352641105651855
    10. 'code' → logprob: -5.6852641105651855

Token 291: ' not' (ID: 625)
  Prédit: ' not'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.10386613756418228
    2. ' line' → logprob: -2.6038661003112793
    3. 'not' → logprob: -4.228866100311279
    4. 'line' → logprob: -4.603866100311279
    5. ' len' → logprob: -9.853866577148438
    6. 'len' → logprob: -10.728866577148438
    7. ' ' → logprob: -11.728866577148438
    8. '(line' → logprob: -14.853866577148438
    9. '   ' → logprob: -15.228866577148438
    10. ' ' → logprob: -15.228866577148438

Token 292: ' line' (ID: 2543)
  Prédit: ' line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' line' → logprob: -0.5759403109550476
    2. 'line' → logprob: -0.8259403109550476
    3. ' ' → logprob: -14.825940132141113
    4. '	line' → logprob: -15.950940132141113
    5. '(line' → logprob: -16.57594108581543
    6. '#line' → logprob: -17.07594108581543
    7. '   ' → logprob: -17.20094108581543
    8. ' ' → logprob: -17.70094108581543
    9. 'len' → logprob: -17.82594108581543
    10. ' code' → logprob: -17.95094108581543

Token 293: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.002404669998213649
    2. ':
' → logprob: -6.127404689788818
    3. ' :' → logprob: -8.62740421295166
    4. ' or' → logprob: -11.25240421295166
    5. ':return' → logprob: -11.50240421295166
    6. '==' → logprob: -12.25240421295166
    7. 'continue' → logprob: -12.62740421295166
    8. '   ' → logprob: -13.25240421295166
    9. ' continue' → logprob: -13.25240421295166
    10. ' ==' → logprob: -13.50240421295166

Token 294: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.15334120392799377
    2. '       ' → logprob: -2.153341293334961
    3. ':' → logprob: -3.653341293334961
    4. ':
' → logprob: -9.653341293334961
    5. '    ' → logprob: -11.028341293334961
    6. '     ' → logprob: -11.403341293334961
    7. '.' → logprob: -11.778341293334961
    8. '   ' → logprob: -11.778341293334961
    9. ' continue' → logprob: -11.903341293334961
    10. '<|end|>' → logprob: -11.903341293334961

Token 295: ' continue' (ID: 4901)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'break' → logprob: -0.21112866699695587
    2. ' break' → logprob: -1.7111287117004395
    3. '   ' → logprob: -4.9611287117004395
    4. 'continue' (adapté à ' continue') → logprob: -6.0861287117004395
    5. ' continue' → logprob: -8.211128234863281
    6. '	break' → logprob: -9.836128234863281
    7. '       ' → logprob: -10.086128234863281
    8. '
' → logprob: -10.961128234863281
    9. '    
' → logprob: -13.336128234863281
    10. '```' → logprob: -13.961128234863281

Token 296: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.007392117287963629
    2. 'decoded' → logprob: -5.132391929626465
    3. ' decoded' → logprob: -8.007391929626465
    4. 'code' → logprob: -8.007391929626465
    5. '    
' → logprob: -8.382391929626465
    6. '
' → logprob: -8.757391929626465
    7. 'i' → logprob: -8.757391929626465
    8. 'pos' → logprob: -9.882391929626465
    9. ' code' → logprob: -10.382391929626465
    10. 'output' → logprob: -10.632391929626465

Token 297: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0044860197231173515
    2. 'decoded' → logprob: -5.629486083984375
    3. 'i' → logprob: -7.879486083984375
    4. ' decoded' → logprob: -8.754486083984375
    5. '    
' → logprob: -9.629486083984375
    6. 'code' → logprob: -9.754486083984375
    7. 'tokens' → logprob: -10.129486083984375
    8. 'pos' → logprob: -10.379486083984375
    9. 'output' → logprob: -10.754486083984375
    10. 'encoded' → logprob: -10.754486083984375

Token 298: ' #' (ID: 1069)
  Prédit: 'decoded'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'decoded' → logprob: -0.018444780260324478
    2. 'result' → logprob: -5.268445014953613
    3. 'output' → logprob: -5.643445014953613
    4. 'pos' → logprob: -5.893445014953613
    5. 'bits' → logprob: -6.018445014953613
    6. 'i' → logprob: -6.893445014953613
    7. 'res' → logprob: -7.018445014953613
    8. 'code' → logprob: -7.143445014953613
    9. 'idx' → logprob: -7.393445014953613
    10. '   ' → logprob: -8.018445014953613

Token 299: ' First' (ID: 8338)
  Prédit: 'decoded'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'decoded' → logprob: -0.24228857457637787
    2. 'result' → logprob: -2.867288589477539
    3. 'pos' → logprob: -2.992288589477539
    4. 'i' → logprob: -3.117288589477539
    5. 'res' → logprob: -3.492288589477539
    6. 'idx' → logprob: -4.367288589477539
    7. 'output' → logprob: -4.617288589477539
    8. 'buffer' → logprob: -5.742288589477539
    9. 'bits' → logprob: -6.492288589477539
    10. 'code' → logprob: -6.742288589477539

Token 300: ',' (ID: 11)
  Prédit: 'token'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'token' → logprob: -1.297751784324646
    2. 'decoded' → logprob: -1.797751784324646
    3. 'tokens' → logprob: -2.6727519035339355
    4. 'code' → logprob: -2.6727519035339355
    5. 'word' → logprob: -2.7977519035339355
    6. 'char' → logprob: -2.9227519035339355
    7. ' code' → logprob: -3.4227519035339355
    8. ' =' → logprob: -3.5477519035339355
    9. 'bits' → logprob: -3.6727519035339355
    10. '=' → logprob: -3.9227519035339355

Token 301: ' convert' (ID: 8452)
  Prédit: 'decoded'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'decoded' → logprob: -0.19194002449512482
    2. 'result' → logprob: -2.5669400691986084
    3. 'pos' → logprob: -3.8169400691986084
    4. 'idx' → logprob: -3.9419400691986084
    5. 'res' → logprob: -4.191939830780029
    6. 'bits' → logprob: -4.441939830780029
    7. 'output' → logprob: -4.566939830780029
    8. 'i' → logprob: -4.691939830780029
    9. 'decode' → logprob: -5.441939830780029
    10. 'index' → logprob: -6.066939830780029

Token 302: ' characters' (ID: 9862)
  Prédit: 'decoded'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'decoded' → logprob: -0.5751463770866394
    2. 'bits' → logprob: -1.2001464366912842
    3. ' bits' → logprob: -3.075146436691284
    4. 'code' → logprob: -4.325146198272705
    5. 'bit' → logprob: -4.450146198272705
    6. ' decoded' → logprob: -4.450146198272705
    7. 'line' → logprob: -4.700146198272705
    8. 'i' → logprob: -4.825146198272705
    9. 'encoded' → logprob: -4.950146198272705
    10. 'binary' → logprob: -5.075146198272705

Token 303: ' to' (ID: 316)
  Prédit: ' to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' to' → logprob: -0.522976279258728
    2. 'to' → logprob: -1.022976279258728
    3. ' =' → logprob: -4.022976398468018
    4. ' into' → logprob: -4.272976398468018
    5. '_to' → logprob: -5.272976398468018
    6. '=' → logprob: -5.522976398468018
    7. 'into' → logprob: -6.397976398468018
    8. ' in' → logprob: -7.022976398468018
    9. 'encoded' → logprob: -7.647976398468018
    10. '   ' → logprob: -7.772976398468018

Token 304: ' bit' (ID: 3546)
  Prédit: ' codes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' codes' → logprob: -0.839147686958313
    2. ' bits' → logprob: -1.089147686958313
    3. ' code' → logprob: -2.2141475677490234
    4. 'bits' → logprob: -3.2141475677490234
    5. 'codes' → logprob: -3.3391475677490234
    6. 'code' → logprob: -3.7141475677490234
    7. ' their' → logprob: -4.589147567749023
    8. ' binary' → logprob: -5.589147567749023
    9. ' bit' → logprob: -6.339147567749023
    10. 'binary' → logprob: -6.839147567749023

Token 305: 'string' (ID: 1655)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.0021961715538054705
    2. 'string' → logprob: -6.252196311950684
    3. '_string' → logprob: -8.752196311950684
    4. ' s' → logprob: -9.502196311950684
    5. ' string' → logprob: -11.627196311950684
    6. 'strings' → logprob: -11.877196311950684
    7. 'str' → logprob: -12.377196311950684
    8. 'stream' → logprob: -12.627196311950684
    9. '   ' → logprob: -13.252196311950684
    10. '_str' → logprob: -13.252196311950684

Token 306: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09289627522230148
    2. 'bit' → logprob: -3.0928962230682373
    3. ' bit' → logprob: -3.7178962230682373
    4. 'bits' → logprob: -4.217896461486816
    5. ' bits' → logprob: -6.592896461486816
    6. '    
' → logprob: -6.717896461486816
    7. 'encoded' → logprob: -7.092896461486816
    8. 'bitr' → logprob: -8.717896461486816
    9. '_bits' → logprob: -8.842896461486816
    10. 'code' → logprob: -9.467896461486816

Token 307: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6912908554077148
    2. ' bit' → logprob: -0.8162908554077148
    3. 'bit' → logprob: -3.441290855407715
    4. ' bits' → logprob: -4.816290855407715
    5. 'bits' → logprob: -4.941290855407715
    6. 'encoded' → logprob: -5.191290855407715
    7. ' encoded' → logprob: -7.191290855407715
    8. 'decoded' → logprob: -7.191290855407715
    9. '    
' → logprob: -7.566290855407715
    10. 'result' → logprob: -8.066290855407715

Token 308: ' bits' (ID: 18189)
  Prédit: 'bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bit' → logprob: -0.7038207650184631
    2. 'bits' (adapté à ' bits') → logprob: -0.7038207650184631
    3. '   ' → logprob: -5.453820705413818
    4. ' bits' → logprob: -5.703820705413818
    5. ' bit' → logprob: -5.828820705413818
    6. 'code' → logprob: -10.578821182250977
    7. 'bs' → logprob: -11.203821182250977
    8. 'b' → logprob: -11.828821182250977
    9. 'encoded' → logprob: -12.328821182250977
    10. '    
' → logprob: -12.953821182250977

Token 309: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.3485817313194275
    2. '=' → logprob: -1.2235817909240723
    3. '_' → logprob: -9.848581314086914
    4. '_bits' → logprob: -10.598581314086914
    5. '=""' → logprob: -11.223581314086914
    6. 's' → logprob: -11.223581314086914
    7. ' ' → logprob: -11.473581314086914
    8. ' ="' → logprob: -12.348581314086914
    9. '=''' → logprob: -12.348581314086914
    10. '_bit' → logprob: -12.598581314086914

Token 310: ' ""
' (ID: 18061)
  Prédit: '""'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '""' → logprob: -0.16514985263347626
    2. '"' → logprob: -2.6651499271392822
    3. '''' → logprob: -2.6651499271392822
    4. '''.' → logprob: -4.665149688720703
    5. ' ""' → logprob: -5.915149688720703
    6. ' "".' → logprob: -7.790149688720703
    7. ' ''.' → logprob: -8.290149688720703
    8. ' ''' → logprob: -8.915149688720703
    9. '''
' → logprob: -9.540149688720703
    10. ''' → logprob: -9.915149688720703

Token 311: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02382604219019413
    2. 'for' → logprob: -4.2738261222839355
    3. ' for' → logprob: -4.6488261222839355
    4. '	for' → logprob: -11.273825645446777
    5. '    
' → logprob: -11.398825645446777
    6. '<|end|>' → logprob: -11.398825645446777
    7. '  ' → logprob: -13.398825645446777
    8. ' ' → logprob: -13.398825645446777
    9. '    ' → logprob: -13.523825645446777
    10. '
' → logprob: -13.648825645446777

Token 312: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.005269214976578951
    2. ' for' → logprob: -5.2552690505981445
    3. '   ' → logprob: -10.255269050598145
    4. '	for' → logprob: -15.380269050598145
    5. '  ' → logprob: -17.63027000427246
    6. ' ' → logprob: -17.75527000427246
    7. '
' → logprob: -18.13027000427246
    8. '    
' → logprob: -20.00527000427246
    9. '    ' → logprob: -20.75527000427246
    10. ' 
' → logprob: -20.75527000427246

Token 313: ' ch' (ID: 549)
  Prédit: 'ch'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ch' → logprob: -0.3729611039161682
    2. 'c' → logprob: -1.3729610443115234
    3. ' ch' → logprob: -3.2479610443115234
    4. 'char' → logprob: -4.122961044311523
    5. ' c' → logprob: -5.872961044311523
    6. ' char' → logprob: -9.372961044311523
    7. '	ch' → logprob: -14.247961044311523
    8. '   ' → logprob: -14.497961044311523
    9. 'character' → logprob: -14.872961044311523
    10. ' ' → logprob: -15.247961044311523

Token 314: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.011056780815124512
    2. 'in' → logprob: -4.511056900024414
    3. '	in' → logprob: -12.636056900024414
    4. ' ' → logprob: -13.261056900024414
    5. '   ' → logprob: -13.636056900024414
    6. ' i' → logprob: -14.011056900024414
    7. 'import' → logprob: -14.636056900024414
    8. '  ' → logprob: -14.761056900024414
    9. '    ' → logprob: -15.886056900024414
    10. 'n' → logprob: -16.011056900024414

Token 315: ' line' (ID: 2543)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.0031786637846380472
    2. ' line' → logprob: -5.753178596496582
    3. '[line' → logprob: -15.253178596496582
    4. '   ' → logprob: -15.503178596496582
    5. '	line' → logprob: -15.753178596496582
    6. ' ' → logprob: -16.1281795501709
    7. '(line' → logprob: -16.1281795501709
    8. '#line' → logprob: -16.3781795501709
    9. '=line' → logprob: -16.3781795501709
    10. 'list' → logprob: -17.6281795501709

Token 316: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.08418919146060944
    2. ':
' → logprob: -2.5841891765594482
    3. '   ' → logprob: -5.709189414978027
    4. '       ' → logprob: -6.334189414978027
    5. ' in' → logprob: -9.834189414978027
    6. '=' → logprob: -10.709189414978027
    7. '    ' → logprob: -10.834189414978027
    8. 'in' → logprob: -11.209189414978027
    9. '):
' → logprob: -11.584189414978027
    10. ':

' → logprob: -11.709189414978027

Token 317: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.05124140530824661
    2. '   ' → logprob: -3.426241397857666
    3. ' bits' → logprob: -5.176241397857666
    4. ':' → logprob: -5.301241397857666
    5. '
' → logprob: -6.301241397857666
    6. '    ' → logprob: -7.426241397857666
    7. '      ' → logprob: -7.551241397857666
    8. ' ' → logprob: -7.676241397857666
    9. ':
' → logprob: -7.676241397857666
    10. '<|end|>' → logprob: -7.676241397857666

Token 318: ' if' (ID: 538)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.49544066190719604
    2. '   ' → logprob: -1.1204407215118408
    3. ' bits' → logprob: -3.745440721511841
    4. 'for' → logprob: -3.995440721511841
    5. '       ' → logprob: -4.620440483093262
    6. 'code' → logprob: -4.995440483093262
    7. ' for' → logprob: -5.995440483093262
    8. 'if' (adapté à ' if') → logprob: -6.995440483093262
    9. '
' → logprob: -7.870440483093262
    10. '  ' → logprob: -7.995440483093262

Token 319: ' ch' (ID: 549)
  Prédit: ' ch'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ch' → logprob: -0.252072811126709
    2. 'ch' → logprob: -1.502072811126709
    3. '(ch' → logprob: -9.002073287963867
    4. ' (' → logprob: -12.252073287963867
    5. ' not' → logprob: -12.502073287963867
    6. ' ' → logprob: -12.627073287963867
    7. '	ch' → logprob: -12.752073287963867
    8. '   ' → logprob: -13.877073287963867
    9. '_ch' → logprob: -14.189573287963867
    10. '(' → logprob: -14.189573287963867

Token 320: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.03036900795996189
    2. ' not' → logprob: -3.5303690433502197
    3. 'in' → logprob: -8.03036880493164
    4. ' ==' → logprob: -8.65536880493164
    5. 'not' → logprob: -9.90536880493164
    6. '==' → logprob: -10.40536880493164
    7. ' ' → logprob: -11.15536880493164
    8. ')' → logprob: -11.15536880493164
    9. ' )' → logprob: -12.40536880493164
    10. '<|end|>' → logprob: -13.03036880493164

Token 321: ' code' (ID: 3490)
  Prédit: 'code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'code' → logprob: -0.0973321944475174
    2. ' code' → logprob: -2.597332239151001
    3. 'dict' → logprob: -4.347332000732422
    4. ' dict' → logprob: -5.722332000732422
    5. '[' → logprob: -7.222332000732422
    6. ' ' → logprob: -7.972332000732422
    7. 'table' → logprob: -7.972332000732422
    8. ' [' → logprob: -8.722332000732422
    9. '   ' → logprob: -8.847332000732422
    10. ' table' → logprob: -9.347332000732422

Token 322: '_to' (ID: 5089)
  Prédit: '_to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_to' → logprob: -4.036524842376821e-05
    2. 'to' → logprob: -10.250040054321289
    3. '_' → logprob: -12.750040054321289
    4. '_table' → logprob: -14.500040054321289
    5. '
' → logprob: -15.000040054321289
    6. '_
' → logprob: -15.250040054321289
    7. '_t' → logprob: -15.625040054321289
    8. 'To' → logprob: -16.00004005432129
    9. '   ' → logprob: -16.25004005432129
    10. ')' → logprob: -16.37504005432129

Token 323: '_char' (ID: 23398)
  Prédit: '_char'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_char' → logprob: -0.029759055003523827
    2. 'char' → logprob: -3.529759168624878
    3. 'ch' → logprob: -12.404759407043457
    4. '_code' → logprob: -13.154759407043457
    5. ' char' → logprob: -13.529759407043457
    6. '
' → logprob: -14.779759407043457
    7. '_ch' → logprob: -15.404759407043457
    8. 'code' → logprob: -16.02975845336914
    9. '	char' → logprob: -16.65475845336914
    10. '_CHAR' → logprob: -16.65475845336914

Token 324: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.012075497768819332
    2. ':
' → logprob: -4.512075424194336
    3. '.keys' → logprob: -7.512075424194336
    4. '.values' → logprob: -7.762075424194336
    5. '==' → logprob: -11.012075424194336
    6. '[' → logprob: -11.762075424194336
    7. ':return' → logprob: -12.262075424194336
    8. '   ' → logprob: -12.762075424194336
    9. '_code' → logprob: -13.012075424194336
    10. ' :' → logprob: -13.387075424194336

Token 325: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.04256528615951538
    2. ' continue' → logprob: -4.04256534576416
    3. '       ' → logprob: -4.66756534576416
    4. ' bits' → logprob: -5.41756534576416
    5. '<|end|>' → logprob: -6.29256534576416
    6. '        ' → logprob: -6.91756534576416
    7. '            ' → logprob: -7.04256534576416
    8. '[' → logprob: -7.16756534576416
    9. ' not' → logprob: -7.16756534576416
    10. '          ' → logprob: -7.41756534576416

Token 326: ' #' (ID: 1069)
  Prédit: ' bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' bits' → logprob: -0.7258872389793396
    2. '       ' → logprob: -1.1008872985839844
    3. 'bits' → logprob: -2.7258872985839844
    4. '           ' → logprob: -2.8508872985839844
    5. ' continue' → logprob: -4.350887298583984
    6. '#' (adapté à ' #') → logprob: -4.600887298583984
    7. ' raise' → logprob: -5.100887298583984
    8. ' #' → logprob: -5.475887298583984
    9. 'continue' → logprob: -5.475887298583984
    10. '   ' → logprob: -5.725887298583984

Token 327: ' skip' (ID: 16677)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.27198028564453125
    2. '#' → logprob: -1.7719802856445312
    3. 'continue' → logprob: -3.7719802856445312
    4. 'pass' → logprob: -3.7719802856445312
    5. ' bits' → logprob: -4.396980285644531
    6. '   ' → logprob: -6.521980285644531
    7. '
' → logprob: -6.771980285644531
    8. 'code' → logprob: -7.021980285644531
    9. ' pass' → logprob: -7.146980285644531
    10. 'break' → logprob: -7.271980285644531

Token 328: ' ?
' (ID: 19740)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.8188414573669434
    2. ' bits' → logprob: -1.0688414573669434
    3. ' continue' → logprob: -2.4438414573669434
    4. 'bits' → logprob: -2.8188414573669434
    5. '           ' → logprob: -3.4438414573669434
    6. 'continue' → logprob: -4.818841457366943
    7. ' code' → logprob: -4.818841457366943
    8. ')' → logprob: -5.693841457366943
    9. ' ' → logprob: -6.193841457366943
    10. '   ' → logprob: -6.193841457366943

Token 329: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.2901807129383087
    2. '       ' → logprob: -1.4151806831359863
    3. ' continue' → logprob: -5.040180683135986
    4. '   ' → logprob: -7.415180683135986
    5. 'continue' → logprob: -7.540180683135986
    6. '<|end|>' → logprob: -7.915180683135986
    7. '               ' → logprob: -8.290181159973145
    8. ',' → logprob: -8.915181159973145
    9. ' ' → logprob: -9.290181159973145
    10. '          ' → logprob: -9.665181159973145

Token 330: ' continue' (ID: 4901)
  Prédit: ' continue'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' continue' → logprob: -0.03467068448662758
    2. 'continue' (adapté à ' continue') → logprob: -3.53467059135437
    3. '           ' → logprob: -5.409670829772949
    4. '       ' → logprob: -8.28467082977295
    5. '   ' → logprob: -9.15967082977295
    6. '	continue' → logprob: -10.28467082977295
    7. '               ' → logprob: -11.03467082977295
    8. ' if' → logprob: -11.65967082977295
    9. ' pass' → logprob: -12.28467082977295
    10. 'if' → logprob: -12.90967082977295

Token 331: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0008042682893574238
    2. 'bits' → logprob: -8.12580394744873
    3. 'ch' → logprob: -9.12580394744873
    4. ')' → logprob: -9.37580394744873
    5. '   ' → logprob: -9.75080394744873
    6. '<|end|>' → logprob: -10.00080394744873
    7. ' bits' → logprob: -10.25080394744873
    8. '           ' → logprob: -10.87580394744873
    9. '      ' → logprob: -10.87580394744873
    10. 'code' → logprob: -11.25080394744873

Token 332: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0008664412307552993
    2. 'bits' → logprob: -8.000866889953613
    3. ' bits' → logprob: -8.500866889953613
    4. '   ' → logprob: -9.125866889953613
    5. '<|end|>' → logprob: -9.500866889953613
    6. ' for' → logprob: -10.500866889953613
    7. '           ' → logprob: -11.000866889953613
    8. ')' → logprob: -11.250866889953613
    9. ' if' → logprob: -11.625866889953613
    10. '      ' → logprob: -11.625866889953613

Token 333: ' for' (ID: 395)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.016411568969488144
    2. ' bits' → logprob: -4.516411781311035
    3. 'bits' → logprob: -5.766411781311035
    4. '   ' → logprob: -6.516411781311035
    5. ' for' → logprob: -8.641411781311035
    6. '
' → logprob: -8.766411781311035
    7. ' code' → logprob: -9.641411781311035
    8. 'for' (adapté à ' for') → logprob: -10.016411781311035
    9. '      ' → logprob: -10.141411781311035
    10. '           ' → logprob: -10.766411781311035

Token 334: ' c' (ID: 274)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'char' → logprob: -1.1622387170791626
    2. 'c' → logprob: -1.7872387170791626
    3. 'ch' → logprob: -1.9122387170791626
    4. ' ch' → logprob: -2.537238597869873
    5. 'code' → logprob: -2.537238597869873
    6. ' c' → logprob: -2.912238597869873
    7. 'key' → logprob: -3.037238597869873
    8. '_,' → logprob: -4.162238597869873
    9. ' code' → logprob: -4.287238597869873
    10. ' key' → logprob: -4.412238597869873

Token 335: ',' (ID: 11)
  Prédit: 'ode'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ode' → logprob: -0.8596681952476501
    2. ' in' → logprob: -1.359668254852295
    3. 'h' → logprob: -1.484668254852295
    4. 'har' → logprob: -2.609668254852295
    5. ',' → logprob: -5.109668254852295
    6. 'o' → logprob: -6.609668254852295
    7. 'de' → logprob: -6.609668254852295
    8. '_code' → logprob: -6.734668254852295
    9. 'ar' → logprob: -6.859668254852295
    10. 'r' → logprob: -6.859668254852295

Token 336: ' cd' (ID: 24852)
  Prédit: 'code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'code' → logprob: -0.07150762528181076
    2. ' code' → logprob: -2.696507692337036
    3. '_code' → logprob: -7.571507453918457
    4. 'cod' → logprob: -8.196507453918457
    5. 'bit' → logprob: -8.696507453918457
    6. 'c' → logprob: -9.446507453918457
    7. 'co' → logprob: -9.571507453918457
    8. ' bit' → logprob: -9.696507453918457
    9. 'bits' → logprob: -9.821507453918457
    10. ' cod' → logprob: -10.071507453918457

Token 337: ' in' (ID: 306)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.149927020072937
    2. ' in' → logprob: -1.149927020072937
    3. 'e' → logprob: -1.649927020072937
    4. 'in' → logprob: -1.774927020072937
    5. 'ode' → logprob: -6.149927139282227
    6. 'code' → logprob: -6.524927139282227
    7. '_code' → logprob: -7.149927139282227
    8. 'o' → logprob: -8.899927139282227
    9. ' ' → logprob: -9.274927139282227
    10. '   ' → logprob: -9.399927139282227

Token 338: ' table' (ID: 3293)
  Prédit: 'table'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'table' → logprob: -0.04859543219208717
    2. ' table' → logprob: -3.048595428466797
    3. '	table' → logprob: -13.548595428466797
    4. ')table' → logprob: -13.673595428466797
    5. '(table' → logprob: -13.798595428466797
    6. 'code' → logprob: -14.173595428466797
    7. '   ' → logprob: -14.423595428466797
    8. ' ' → logprob: -14.548595428466797
    9. 'tab' → logprob: -14.548595428466797
    10. '[' → logprob: -14.798595428466797

Token 339: ':
' (ID: 734)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.48604243993759155
    2. ':
' → logprob: -2.2360424995422363
    3. ' if' → logprob: -2.6110424995422363
    4. '           ' → logprob: -2.7360424995422363
    5. ':' → logprob: -2.9860424995422363
    6. '   ' → logprob: -3.3610424995422363
    7. 'if' → logprob: -4.111042499542236
    8. 'in' → logprob: -4.236042499542236
    9. '       ' → logprob: -4.986042499542236
    10. ',' → logprob: -5.486042499542236

Token 340: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.11717528849840164
    2. ' if' → logprob: -2.242175340652466
    3. ' in' → logprob: -6.992175102233887
    4. ':' → logprob: -7.117175102233887
    5. 'if' → logprob: -7.367175102233887
    6. ' ' → logprob: -7.742175102233887
    7. '       ' → logprob: -7.992175102233887
    8. '          ' → logprob: -8.492175102233887
    9. '<|end|>' → logprob: -8.742175102233887
    10. ':
' → logprob: -9.117175102233887

Token 341: ' if' (ID: 538)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.5546038746833801
    2. ' if' → logprob: -0.9296038746833801
    3. 'if' (adapté à ' if') → logprob: -3.5546038150787354
    4. ' ' → logprob: -6.4296040534973145
    5. '   ' → logprob: -8.429603576660156
    6. '<|end|>' → logprob: -8.804603576660156
    7. '<|end|>' → logprob: -9.304603576660156
    8. '          ' → logprob: -9.429603576660156
    9. '	       ' → logprob: -10.054603576660156
    10. '       ' → logprob: -10.304603576660156

Token 342: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.007645440753549337
    2. ' c' → logprob: -4.882645606994629
    3. 'ch' → logprob: -10.382645606994629
    4. '	c' → logprob: -12.882645606994629
    5. '   ' → logprob: -13.132645606994629
    6. ' ch' → logprob: -13.882645606994629
    7. ' ' → logprob: -14.257645606994629
    8. '  ' → logprob: -14.882645606994629
    9. '           ' → logprob: -15.007645606994629
    10. 'cd' → logprob: -15.257645606994629

Token 343: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.47422733902931213
    2. '==' → logprob: -0.9742273092269897
    3. '=' → logprob: -9.099226951599121
    4. '===' → logprob: -12.224226951599121
    5. ']==' → logprob: -12.224226951599121
    6. ' =' → logprob: -12.349226951599121
    7. ')==' → logprob: -12.349226951599121
    8. '==
' → logprob: -12.474226951599121
    9. 's' → logprob: -12.724226951599121
    10. ' ' → logprob: -12.724226951599121

Token 344: ' ch' (ID: 549)
  Prédit: 'ch'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ch' → logprob: -0.0024781543761491776
    2. ' ch' → logprob: -6.002478122711182
    3. '[ch' → logprob: -14.00247859954834
    4. ''ch' → logprob: -14.12747859954834
    5. '	ch' → logprob: -15.12747859954834
    6. '(ch' → logprob: -15.37747859954834
    7. '   ' → logprob: -15.75247859954834
    8. 'line' → logprob: -16.002477645874023
    9. ' ' → logprob: -16.627477645874023
    10. 'c' → logprob: -16.627477645874023

Token 345: ':
' (ID: 734)
  Prédit: ':
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':
' → logprob: -0.11324306577444077
    2. ':' → logprob: -2.2382431030273438
    3. '):
' → logprob: -9.363243103027344
    4. ' :
' → logprob: -9.363243103027344
    5. '               ' → logprob: -9.488243103027344
    6. '           ' → logprob: -9.738243103027344
    7. ' and' → logprob: -10.113243103027344
    8. ':
' → logprob: -10.988243103027344
    9. ':

' → logprob: -11.113243103027344
    10. ':return' → logprob: -11.488243103027344

Token 346: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.010764699429273605
    2. ' bits' → logprob: -4.8857645988464355
    3. 'bits' → logprob: -5.8857645988464355
    4. '           ' → logprob: -8.885765075683594
    5. ':
' → logprob: -9.385765075683594
    6. ' and' → logprob: -10.135765075683594
    7. ':' → logprob: -10.385765075683594
    8. '(bits' → logprob: -10.385765075683594
    9. '_bits' → logprob: -11.510765075683594
    10. '):
' → logprob: -11.760765075683594

Token 347: ' bits' (ID: 18189)
  Prédit: ' bits'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' bits' → logprob: -0.06046024337410927
    2. 'bits' (adapté à ' bits') → logprob: -3.060460329055786
    3. '               ' → logprob: -4.560460090637207
    4. '           ' → logprob: -6.685460090637207
    5. '_bits' → logprob: -10.935460090637207
    6. '.bits' → logprob: -11.060460090637207
    7. '       ' → logprob: -11.310460090637207
    8. '(bits' → logprob: -11.310460090637207
    9. '                   ' → logprob: -11.560460090637207
    10. '              ' → logprob: -12.060460090637207

Token 348: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.47410714626312256
    2. ' +=' → logprob: -0.9741071462631226
    3. '=' → logprob: -10.849106788635254
    4. '+' → logprob: -12.474106788635254
    5. ' =' → logprob: -13.099106788635254
    6. '+="' → logprob: -13.224106788635254
    7. ' +' → logprob: -13.474106788635254
    8. '+=(' → logprob: -14.474106788635254
    9. ']+=' → logprob: -14.474106788635254
    10. '+='' → logprob: -14.599106788635254

Token 349: ' cd' (ID: 24852)
  Prédit: 'cd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cd' → logprob: -0.029757089912891388
    2. ' cd' → logprob: -3.529757022857666
    3. '"' → logprob: -12.029757499694824
    4. '	cd' → logprob: -15.404757499694824
    5. '(cd' → logprob: -15.404757499694824
    6. ''' → logprob: -16.029756546020508
    7. 'code' → logprob: -17.654756546020508
    8. '_cd' → logprob: -18.404756546020508
    9. ' ' → logprob: -18.529756546020508
    10. '.cd' → logprob: -18.654756546020508

Token 350: '
' (ID: 198)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.0028009600937366486
    2. '
' → logprob: -6.752800941467285
    3. '                
' → logprob: -7.627800941467285
    4. '           ' → logprob: -8.002800941467285
    5. '                   ' → logprob: -8.377800941467285
    6. '                ' → logprob: -8.627800941467285
    7. '       ' → logprob: -9.252800941467285
    8. '              ' → logprob: -9.877800941467285
    9. '                       ' → logprob: -9.877800941467285
    10. '<|end|>' → logprob: -10.502800941467285

Token 351: '               ' (ID: 506)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 352: ' break' (ID: 2338)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.020936083048582077
    2. ' break' → logprob: -4.145936012268066
    3. 'break' (adapté à ' break') → logprob: -5.395936012268066
    4. '	break' → logprob: -9.145936012268066
    5. '           ' → logprob: -9.645936012268066
    6. '
' → logprob: -10.145936012268066
    7. '              ' → logprob: -10.145936012268066
    8. '			' → logprob: -10.520936012268066
    9. '                
' → logprob: -10.895936012268066
    10. '                   ' → logprob: -11.145936012268066

Token 353: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 354: '       ' (ID: 309)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 355: ' else' (ID: 1203)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 356: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.008278146386146545
    2. ':
' → logprob: -5.0082783699035645
    3. ' :' → logprob: -6.5082783699035645
    4. ' :
' → logprob: -9.883277893066406
    5. ':return' → logprob: -12.383277893066406
    6. '       ' → logprob: -12.883277893066406
    7. '   ' → logprob: -13.133277893066406
    8. ' continue' → logprob: -13.258277893066406
    9. '        ' → logprob: -13.383277893066406
    10. '<|end|>' → logprob: -13.508277893066406

Token 357: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.3730495274066925
    2. '       ' → logprob: -1.9980494976043701
    3. ' raise' → logprob: -1.9980494976043701
    4. '   ' → logprob: -3.87304949760437
    5. ' continue' → logprob: -4.248049736022949
    6. 'raise' → logprob: -6.248049736022949
    7. ' pass' → logprob: -6.373049736022949
    8. 'continue' → logprob: -7.498049736022949
    9. ' print' → logprob: -8.12304973602295
    10. ' break' → logprob: -9.12304973602295

Token 358: ' #' (ID: 1069)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' continue' → logprob: -0.42592695355415344
    2. ' raise' → logprob: -1.925926923751831
    3. ' pass' → logprob: -2.425926923751831
    4. ' bits' → logprob: -2.800926923751831
    5. '           ' → logprob: -3.425926923751831
    6. '   ' → logprob: -5.05092716217041
    7. '       ' → logprob: -5.30092716217041
    8. 'continue' → logprob: -5.55092716217041
    9. 'bits' → logprob: -6.42592716217041
    10. ' #' → logprob: -6.67592716217041

Token 359: ' Unknown' (ID: 41855)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' continue' → logprob: -1.4515507221221924
    2. ' raise' → logprob: -1.5765507221221924
    3. ' pass' → logprob: -1.5765507221221924
    4. 'bits' → logprob: -2.7015507221221924
    5. 'continue' → logprob: -2.8265507221221924
    6. '#' → logprob: -3.0765507221221924
    7. 'pass' → logprob: -3.0765507221221924
    8. '   ' → logprob: -3.2015507221221924
    9. ' bits' → logprob: -3.3265507221221924
    10. 'raise' → logprob: -3.4515507221221924

Token 360: ' char' (ID: 1826)
  Prédit: ' character'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' character' → logprob: -0.2936303913593292
    2. ' token' → logprob: -1.9186303615570068
    3. '<|end|>' → logprob: -3.418630361557007
    4. 'character' → logprob: -3.668630361557007
    5. ' char' → logprob: -4.043630599975586
    6. ' ' → logprob: -4.293630599975586
    7. 'char' → logprob: -5.668630599975586
    8. 'token' → logprob: -5.668630599975586
    9. ')' → logprob: -6.043630599975586
    10. '_character' → logprob: -6.168630599975586

Token 361: ',' (ID: 11)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.1293991357088089
    2. ':' → logprob: -2.754399061203003
    3. ' continue' → logprob: -3.004399061203003
    4. '       ' → logprob: -5.754399299621582
    5. 'continue' → logprob: -6.379399299621582
    6. ':
' → logprob: -6.879399299621582
    7. ',' → logprob: -7.129399299621582
    8. '   ' → logprob: -8.129399299621582
    9. ' continues' → logprob: -8.379399299621582
    10. '               ' → logprob: -9.129399299621582

Token 362: ' skip' (ID: 16677)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' continue' → logprob: -0.8322263360023499
    2. ' bits' → logprob: -0.8322263360023499
    3. '           ' → logprob: -2.457226276397705
    4. 'bits' → logprob: -4.082226276397705
    5. ' raise' → logprob: -4.582226276397705
    6. 'continue' → logprob: -4.707226276397705
    7. '       ' → logprob: -5.457226276397705
    8. ' pass' → logprob: -5.832226276397705
    9. '   ' → logprob: -8.082226753234863
    10. ' break' → logprob: -8.707226753234863

Token 363: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.10852357745170593
    2. ' continue' → logprob: -2.7335236072540283
    3. '       ' → logprob: -3.7335236072540283
    4. 'continue' → logprob: -5.108523368835449
    5. '   ' → logprob: -5.233523368835449
    6. '<|end|>' → logprob: -6.608523368835449
    7. '               ' → logprob: -7.358523368835449
    8. ' ' → logprob: -8.60852336883545
    9. '    ' → logprob: -9.35852336883545
    10. '  ' → logprob: -10.35852336883545

Token 364: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.7703397274017334
    2. '           ' → logprob: -0.8953397274017334
    3. ' continue' → logprob: -2.2703397274017334
    4. '   ' → logprob: -4.3953399658203125
    5. 'continue' → logprob: -4.3953399658203125
    6. '	continue' → logprob: -7.5203399658203125
    7. '               ' → logprob: -9.270339965820312
    8. '    ' → logprob: -11.145339965820312
    9. '<|end|>' → logprob: -11.395339965820312
    10. '      ' → logprob: -11.520339965820312

Token 365: ' pass' (ID: 1853)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' continue' → logprob: -0.39102447032928467
    2. 'continue' → logprob: -1.3910244703292847
    3. '           ' → logprob: -2.641024589538574
    4. '   ' → logprob: -6.516024589538574
    5. '       ' → logprob: -6.891024589538574
    6. ' pass' → logprob: -7.516024589538574
    7. 'pass' (adapté à ' pass') → logprob: -7.766024589538574
    8. '               ' → logprob: -10.141024589538574
    9. '	continue' → logprob: -11.891024589538574
    10. '```' → logprob: -12.266024589538574

Token 366: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 367: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.40604254603385925
    2. '<|end|>' → logprob: -1.5310425758361816
    3. ' ' → logprob: -2.4060425758361816
    4. '    
' → logprob: -5.406042575836182
    5. '<|end|>' → logprob: -5.406042575836182
    6. ')' → logprob: -5.531042575836182
    7. '    ' → logprob: -5.656042575836182
    8. '  ' → logprob: -5.781042575836182
    9. '       ' → logprob: -6.156042575836182
    10. '
' → logprob: -6.531042575836182

Token 368: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8096451163291931
    2. '<|end|>' → logprob: -1.059645175933838
    3. '
' → logprob: -2.309645175933838
    4. ')' → logprob: -3.934645175933838
    5. '#' (adapté à ' #') → logprob: -3.934645175933838
    6. '\n' → logprob: -4.309645175933838
    7. ' if' → logprob: -4.684645175933838
    8. '    
' → logprob: -4.809645175933838
    9. ' ' → logprob: -4.934645175933838
    10. '<|end|>' → logprob: -5.184645175933838

Token 369: ' It' (ID: 1225)
  Prédit: 'decoded'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'decoded' → logprob: -0.33906376361846924
    2. '#' → logprob: -1.8390637636184692
    3. 'bits' → logprob: -3.7140636444091797
    4. 'print' → logprob: -4.33906364440918
    5. 'idx' → logprob: -4.33906364440918
    6. 'i' → logprob: -4.33906364440918
    7. ' decoded' → logprob: -4.33906364440918
    8. 'pos' → logprob: -4.46406364440918
    9. 'try' → logprob: -5.08906364440918
    10. 'tokens' → logprob: -5.08906364440918

Token 370: ' won't' (ID: 14219)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.41737839579582214
    2. 's' → logprob: -2.2923784255981445
    3. 'f' → logprob: -2.6673784255981445
    4. '#' → logprob: -2.6673784255981445
    5. ' =' → logprob: -2.7923784255981445
    6. '   ' → logprob: -3.9173784255981445
    7. ' #' → logprob: -5.6673784255981445
    8. 'n' → logprob: -5.9173784255981445
    9. ''s' → logprob: -6.1673784255981445
    10. 'okens' → logprob: -6.2923784255981445

Token 371: ' work' (ID: 1101)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5445820689201355
    2. ' be' → logprob: -1.6695821285247803
    3. ' =' → logprob: -2.2945821285247803
    4. 'continue' → logprob: -2.7945821285247803
    5. 'be' → logprob: -3.5445821285247803
    6. ' continue' → logprob: -4.544581890106201
    7. '#' → logprob: -5.419581890106201
    8. '
' → logprob: -5.544581890106201
    9. '+=' → logprob: -5.669581890106201
    10. 'stop' → logprob: -6.044581890106201

Token 372: ' because' (ID: 2236)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -1.059893012046814
    2. '<|end|>' → logprob: -1.309893012046814
    3. '   ' → logprob: -2.1848931312561035
    4. ' if' → logprob: -2.8098931312561035
    5. ' for' → logprob: -3.3098931312561035
    6. ',' → logprob: -3.3098931312561035
    7. ' because' → logprob: -3.4348931312561035
    8. ' to' → logprob: -3.6848931312561035
    9. '#' → logprob: -4.5598931312561035
    10. '<|end|>' → logprob: -4.6848931312561035

Token 373: ' input' (ID: 3422)
  Prédit: ' the'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' the' → logprob: -1.297624945640564
    2. ' codes' → logprob: -1.922624945640564
    3. 'the' → logprob: -1.922624945640564
    4. ' bits' → logprob: -2.0476250648498535
    5. 'bits' → logprob: -2.1726250648498535
    6. 'codes' → logprob: -2.9226250648498535
    7. 'code' → logprob: -3.1726250648498535
    8. ' code' → logprob: -3.5476250648498535
    9. 'tokens' → logprob: -3.7976250648498535
    10. ' tokens' → logprob: -4.2976250648498535

Token 374: ' is' (ID: 382)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 375: ' coded' (ID: 93104)
  Prédit: 'decoded'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'decoded' → logprob: -1.0381602048873901
    2. 'encoded' → logprob: -1.4131602048873901
    3. 'characters' → logprob: -2.5381603240966797
    4. 'a' → logprob: -2.5381603240966797
    5. ' characters' → logprob: -3.5381603240966797
    6. 'already' → logprob: -3.7881603240966797
    7. ' encoded' → logprob: -3.7881603240966797
    8. 'in' → logprob: -4.16316032409668
    9. 'character' → logprob: -4.28816032409668
    10. 'not' → logprob: -4.53816032409668

Token 376: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07798591256141663
    2. '<|end|>' → logprob: -3.327986001968384
    3. '#' → logprob: -3.452986001968384
    4. ')' → logprob: -6.327985763549805
    5. 'print' → logprob: -6.452985763549805
    6. '
' → logprob: -6.827985763549805
    7. '<|end|>' → logprob: -7.702985763549805
    8. '...' → logprob: -8.077985763549805
    9. '```' → logprob: -8.327985763549805
    10. '#print' → logprob: -8.452985763549805

Token 377: ' not' (ID: 625)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2803804278373718
    2. '#' → logprob: -1.9053804874420166
    3. '<|end|>' → logprob: -3.0303804874420166
    4. '
' → logprob: -4.9053802490234375
    5. ' but' → logprob: -4.9053802490234375
    6. ' continue' → logprob: -5.4053802490234375
    7. ' #' → logprob: -5.5303802490234375
    8. ' so' → logprob: -5.7803802490234375
    9. '    
' → logprob: -6.1553802490234375
    10. ')' → logprob: -6.5303802490234375

Token 378: ' normal' (ID: 6078)
  Prédit: 'decoded'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'decoded' → logprob: -0.09274829924106598
    2. ' decoded' → logprob: -2.9677484035491943
    3. 'text' → logprob: -4.842748165130615
    4. ' characters' → logprob: -5.217748165130615
    5. ' text' → logprob: -5.717748165130615
    6. 'encoded' → logprob: -5.842748165130615
    7. 'characters' → logprob: -5.842748165130615
    8. 'the' → logprob: -6.342748165130615
    9. 'plaintext' → logprob: -6.467748165130615
    10. 'plain' → logprob: -6.592748165130615

Token 379: ' letters' (ID: 18151)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 380: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.19942420721054077
    2. '#' → logprob: -2.0744242668151855
    3. '<|end|>' → logprob: -3.3244242668151855
    4. '
' → logprob: -4.9494242668151855
    5. ')' → logprob: -6.4494242668151855
    6. '.' → logprob: -6.5744242668151855
    7. '<|end|>' → logprob: -7.0744242668151855
    8. 'continue' → logprob: -7.1994242668151855
    9. 'Decode' → logprob: -7.5744242668151855
    10. '[' → logprob: -7.6994242668151855

Token 381: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7653942704200745
    2. '<|end|>' → logprob: -0.8903942704200745
    3. '#' → logprob: -2.5153942108154297
    4. ')' → logprob: -5.14039421081543
    5. '<|end|>' → logprob: -5.39039421081543
    6. 'for' → logprob: -5.64039421081543
    7. '[' → logprob: -5.89039421081543
    8. ' for' → logprob: -6.01539421081543
    9. '
' → logprob: -6.01539421081543
    10. ' ' → logprob: -6.14039421081543

Token 382: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 383: ' So' (ID: 2632)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7616530656814575
    2. '<|end|>' → logprob: -0.8866530656814575
    3. '#' → logprob: -3.386652946472168
    4. ')' → logprob: -3.886652946472168
    5. 'for' → logprob: -4.136652946472168
    6. '
' → logprob: -4.886652946472168
    7. 'print' → logprob: -4.886652946472168
    8. ' ' → logprob: -5.636652946472168
    9. ' for' → logprob: -5.886652946472168
    10. '  ' → logprob: -6.011652946472168

Token 384: ' actually' (ID: 4771)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04167358577251434
    2. '#' → logprob: -4.04167366027832
    3. 'decoded' → logprob: -4.54167366027832
    4. ' decoded' → logprob: -5.16667366027832
    5. ' continue' → logprob: -6.04167366027832
    6. 'continue' → logprob: -7.16667366027832
    7. ' #' → logprob: -7.29167366027832
    8. ' for' → logprob: -8.16667366027832
    9. 'bits' → logprob: -8.29167366027832
    10. 'for' → logprob: -8.29167366027832

Token 385: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1716025173664093
    2. '#' → logprob: -2.171602487564087
    3. 'continue' → logprob: -4.296602725982666
    4. ' continue' → logprob: -4.921602725982666
    5. 'decoded' → logprob: -5.171602725982666
    6. 'for' → logprob: -5.546602725982666
    7. 'bits' → logprob: -5.671602725982666
    8. '
' → logprob: -6.546602725982666
    9. ' for' → logprob: -6.671602725982666
    10. ',' → logprob: -6.671602725982666

Token 386: ' the' (ID: 290)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6070863604545593
    2. '#' → logprob: -1.857086420059204
    3. 'decoded' → logprob: -2.107086420059204
    4. 'break' → logprob: -3.107086420059204
    5. 'bits' → logprob: -3.732086420059204
    6. 'pass' → logprob: -3.982086420059204
    7. ' decoded' → logprob: -3.982086420059204
    8. 'continue' → logprob: -4.482086181640625
    9. ' break' → logprob: -4.482086181640625
    10. ' pass' → logprob: -4.607086181640625

Token 387: ' input' (ID: 3422)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.2801965475082397
    2. 'break' → logprob: -1.5301965475082397
    3. 'for' → logprob: -1.9051965475082397
    4. 'bits' → logprob: -2.0301966667175293
    5. 'pass' → logprob: -2.7801966667175293
    6. 'continue' → logprob: -3.2801966667175293
    7. 'decoded' → logprob: -3.6551966667175293
    8. 'next' → logprob: -3.7801966667175293
    9. '   ' → logprob: -4.155196666717529
    10. 'code' → logprob: -4.280196666717529

Token 388: ' is' (ID: 382)
  Prédit: 'is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'is' → logprob: -0.2526196539402008
    2. ' is' → logprob: -1.7526196241378784
    3. 'should' → logprob: -3.502619743347168
    4. ' should' → logprob: -4.877619743347168
    5. 'bits' → logprob: -5.752619743347168
    6. '=' → logprob: -6.502619743347168
    7. '   ' → logprob: -6.627619743347168
    8. '#' → logprob: -6.627619743347168
    9. '_bits' → logprob: -7.627619743347168
    10. 'line' → logprob: -7.877619743347168

Token 389: ' coded' (ID: 93104)
  Prédit: ' bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' bits' → logprob: -0.5615777373313904
    2. ' a' → logprob: -1.8115777969360352
    3. 'bits' → logprob: -1.8115777969360352
    4. 'a' → logprob: -3.436577796936035
    5. ' the' → logprob: -3.811577796936035
    6. 'the' → logprob: -4.311577796936035
    7. ' encoded' → logprob: -4.686577796936035
    8. 'encoded' → logprob: -4.686577796936035
    9. ' coded' → logprob: -5.561577796936035
    10. 'already' → logprob: -6.061577796936035

Token 390: ' characters' (ID: 9862)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.015287986025214195
    2. '<|end|>' → logprob: -4.89028787612915
    3. 'tokens' → logprob: -6.51528787612915
    4. '#' → logprob: -6.64028787612915
    5. '<|end|>' → logprob: -7.26528787612915
    6. ' for' → logprob: -7.39028787612915
    7. ',' → logprob: -7.64028787612915
    8. ')' → logprob: -7.76528787612915
    9. 'for' → logprob: -7.89028787612915
    10. ' tokens' → logprob: -8.140288352966309

Token 391: ' that' (ID: 484)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 392: ' map' (ID: 4014)
  Prédit: 'need'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'need' → logprob: -1.2417665719985962
    2. 'should' → logprob: -1.3667665719985962
    3. ' need' → logprob: -2.2417664527893066
    4. 'are' → logprob: -2.3667664527893066
    5. ' represent' → logprob: -2.3667664527893066
    6. 'represent' → logprob: -3.1167664527893066
    7. '#' → logprob: -3.2417664527893066
    8. ' should' → logprob: -3.3667664527893066
    9. ' are' → logprob: -3.6167664527893066
    10. 'we' → logprob: -5.366766452789307

Token 393: ' to' (ID: 316)
  Prédit: 'to'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'to' → logprob: -0.14382341504096985
    2. ' to' → logprob: -2.0188233852386475
    3. 'from' → logprob: -7.643823623657227
    4. 'only' → logprob: -9.018823623657227
    5. 'bits' → logprob: -9.268823623657227
    6. '   ' → logprob: -9.393823623657227
    7. ' ' → logprob: -9.893823623657227
    8. ' directly' → logprob: -9.893823623657227
    9. '_to' → logprob: -10.393823623657227
    10. 'direct' → logprob: -10.518823623657227

Token 394: ' letters' (ID: 18151)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.5800898671150208
    2. ' bits' → logprob: -0.9550898671150208
    3. 'bit' → logprob: -3.330089807510376
    4. 'codes' → logprob: -5.455090045928955
    5. ' bit' → logprob: -5.830090045928955
    6. 'the' → logprob: -6.205090045928955
    7. '"' → logprob: -6.330090045928955
    8. '0' → logprob: -6.830090045928955
    9. 'letters' → logprob: -6.955090045928955
    10. ' codes' → logprob: -7.205090045928955

Token 395: '
    
' (ID: 15698)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 396: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 397: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5451281070709229
    2. '#' (adapté à ' #') → logprob: -1.1701281070709229
    3. 'decoded' → logprob: -2.545128107070923
    4. 'tokens' → logprob: -5.170127868652344
    5. 'bits' → logprob: -5.420127868652344
    6. 'if' → logprob: -5.920127868652344
    7. 'code' → logprob: -5.920127868652344
    8. ' decoded' → logprob: -6.045127868652344
    9. ' #' → logprob: -6.295127868652344
    10. 'pass' → logprob: -6.420127868652344

Token 398: ' The' (ID: 623)
  Prédit: 'decoded'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'decoded' → logprob: -0.18001310527324677
    2. 'bits' → logprob: -1.9300130605697632
    3. '#' → logprob: -5.305013179779053
    4. 'bit' → logprob: -5.680013179779053
    5. 'code' → logprob: -5.805013179779053
    6. 'pos' → logprob: -6.055013179779053
    7. ' decoded' → logprob: -6.930013179779053
    8. 'decode' → logprob: -7.555013179779053
    9. 'chars' → logprob: -7.805013179779053
    10. 'idx' → logprob: -7.805013179779053

Token 399: ' instruction' (ID: 21179)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.47415292263031006
    2. '#' → logprob: -1.34915292263031
    3. 'decoded' → logprob: -2.4741530418395996
    4. 'pos' → logprob: -4.7241530418396
    5. 'i' → logprob: -5.0991530418396
    6. 'code' → logprob: -5.2241530418396
    7. ' bits' → logprob: -5.8491530418396
    8. 'bit' → logprob: -5.9741530418396
    9. 'next' → logprob: -6.2241530418396
    10. '
' → logprob: -6.9741530418396

Token 400: ' and' (ID: 326)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.4815636873245239
    2. ' is' → logprob: -1.731563687324524
    3. 'is' → logprob: -2.4815635681152344
    4. ':' → logprob: -3.2315635681152344
    5. 'for' → logprob: -4.481563568115234
    6. ' was' → logprob: -4.731563568115234
    7. 'bits' → logprob: -4.856563568115234
    8. 'should' → logprob: -5.106563568115234
    9. ' seems' → logprob: -5.356563568115234
    10. 'was' → logprob: -5.481563568115234

Token 401: ' sample' (ID: 10176)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.07741214334964752
    2. ' next' → logprob: -4.327412128448486
    3. ' the' → logprob: -4.952412128448486
    4. ' #' → logprob: -5.077412128448486
    5. 'bits' → logprob: -5.077412128448486
    6. 'the' → logprob: -5.202412128448486
    7. 'continue' → logprob: -5.702412128448486
    8. ' code' → logprob: -5.952412128448486
    9. 'next' → logprob: -5.952412128448486
    10. 'comment' → logprob: -6.077412128448486

Token 402: ' indicate' (ID: 21611)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 403: ':' (ID: 25)
  Prédit: 'that'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'that' → logprob: -0.40058112144470215
    2. ' that' → logprob: -1.1505811214447021
    3. 'the' → logprob: -4.650581359863281
    4. '#' → logprob: -6.150581359863281
    5. ' the' → logprob: -7.025581359863281
    6. 'to' → logprob: -7.775581359863281
    7. ' to' → logprob: -8.775581359863281
    8. 'we' → logprob: -9.025581359863281
    9. '   ' → logprob: -9.150581359863281
    10. ' we' → logprob: -9.650581359863281

Token 404: ' given' (ID: 4335)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.7468180060386658
    2. 'decoded' → logprob: -0.7468180060386658
    3. 'bits' → logprob: -3.8718180656433105
    4. 'pass' → logprob: -4.3718180656433105
    5. ' decoded' → logprob: -4.8718180656433105
    6. '   ' → logprob: -5.7468180656433105
    7. 'continue' → logprob: -6.9968180656433105
    8. 'tokens' → logprob: -7.3718180656433105
    9. 'if' → logprob: -7.4968180656433105
    10. 'bit' → logprob: -7.6218180656433105

Token 405: ' the' (ID: 290)
  Prédit: 'the'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'the' → logprob: -0.9554631114006042
    2. 'bits' → logprob: -1.205463171005249
    3. 'encoded' → logprob: -2.455463171005249
    4. ' the' → logprob: -2.580463171005249
    5. 'coded' → logprob: -2.830463171005249
    6. 'a' → logprob: -3.580463171005249
    7. ' a' → logprob: -4.33046293258667
    8. ' bits' → logprob: -4.33046293258667
    9. 'input' → logprob: -4.58046293258667
    10. ' coded' → logprob: -4.83046293258667

Token 406: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -1.2772290706634521
    2. 'coded' → logprob: -1.6522290706634521
    3. 'bits' → logprob: -1.7772290706634521
    4. 'encoded' → logprob: -2.027229070663452
    5. 'bit' → logprob: -2.152229070663452
    6. 'code' → logprob: -2.902229070663452
    7. ' input' → logprob: -4.277229309082031
    8. ' bits' → logprob: -4.527229309082031
    9. ' coded' → logprob: -5.027229309082031
    10. ' bit' → logprob: -5.027229309082031

Token 407: ' line' (ID: 2543)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.8277924060821533
    2. ' line' → logprob: -2.5777924060821533
    3. ' is' → logprob: -2.7027924060821533
    4. '<|end|>' → logprob: -2.9527924060821533
    5. ' bits' → logprob: -3.4527924060821533
    6. 'encoded' → logprob: -3.4527924060821533
    7. '<|end|>' → logprob: -3.7027924060821533
    8. ' =' → logprob: -3.8277924060821533
    9. ' code' → logprob: -4.202792167663574
    10. 'string' → logprob: -4.202792167663574

Token 408: ' (' (ID: 350)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7591940760612488
    2. ',' → logprob: -1.1341941356658936
    3. '<|end|>' → logprob: -2.6341941356658936
    4. '=' → logprob: -3.7591941356658936
    5. 'tokens' → logprob: -3.8841941356658936
    6. '#' → logprob: -3.8841941356658936
    7. ' =' → logprob: -4.5091938972473145
    8. ':' → logprob: -4.6341938972473145
    9. '<|end|>' → logprob: -4.6341938972473145
    10. ''s' → logprob: -5.2591938972473145

Token 409: 'like' (ID: 9995)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' a' → logprob: -1.9970780611038208
    2. 'the' → logprob: -1.9970780611038208
    3. 'bits' → logprob: -2.2470779418945312
    4. 'a' → logprob: -2.3720779418945312
    5. ' bits' → logprob: -2.3720779418945312
    6. ')' → logprob: -2.4970779418945312
    7. 'encoded' → logprob: -2.6220779418945312
    8. ' the' → logprob: -2.7470779418945312
    9. ' coded' → logprob: -2.8720779418945312
    10. ' encoded' → logprob: -3.4970779418945312

Token 410: ' ?' (ID: 1423)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.6786117553710938
    2. ''' → logprob: -1.9286117553710938
    3. ' a' → logprob: -1.9286117553710938
    4. 'a' → logprob: -3.3036117553710938
    5. '"P' → logprob: -3.5536117553710938
    6. 'bits' → logprob: -4.053611755371094
    7. 'encoded' → logprob: -4.053611755371094
    8. '010' → logprob: -4.178611755371094
    9. ' bits' → logprob: -4.428611755371094
    10. ' ' → logprob: -4.803611755371094

Token 411: 'D' (ID: 35)
  Prédit: '),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '),' → logprob: -0.1280745565891266
    2. ')' → logprob: -2.2530746459960938
    3. ' ),' → logprob: -4.503074645996094
    4. ' )' → logprob: -6.503074645996094
    5. '"),' → logprob: -7.253074645996094
    6. ',' → logprob: -7.503074645996094
    7. '=' → logprob: -8.003074645996094
    8. ' =' → logprob: -8.878074645996094
    9. '<|end|>' → logprob: -9.128074645996094
    10. '")' → logprob: -9.628074645996094

Token 412: '-C' (ID: 10050)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.509483814239502
    2. '),' → logprob: -1.509483814239502
    3. ' ),' → logprob: -2.759483814239502
    4. ' )' → logprob: -3.134483814239502
    5. '<|end|>' → logprob: -4.009483814239502
    6. ',' → logprob: -4.384483814239502
    7. '=' → logprob: -4.634483814239502
    8. ' =' → logprob: -5.259483814239502
    9. '"),' → logprob: -5.384483814239502
    10. '")' → logprob: -5.634483814239502

Token 413: ''' (ID: 6)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.49628815054893494
    2. '),' → logprob: -1.9962881803512573
    3. '   ' → logprob: -2.6212880611419678
    4. '):' → logprob: -2.9962880611419678
    5. '")' → logprob: -3.3712880611419678
    6. ',' → logprob: -3.3712880611419678
    7. '"),' → logprob: -4.121288299560547
    8. ' )' → logprob: -4.996288299560547
    9. ' ),' → logprob: -4.996288299560547
    10. '=' → logprob: -5.371288299560547

Token 414: 'K' (ID: 42)
  Prédit: '),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '),' → logprob: -0.8295917510986328
    2. ')' → logprob: -1.8295917510986328
    3. ',' → logprob: -2.329591751098633
    4. '   ' → logprob: -2.454591751098633
    5. '):' → logprob: -2.579591751098633
    6. '=' → logprob: -3.079591751098633
    7. '"),' → logprob: -3.704591751098633
    8. '):
' → logprob: -4.829591751098633
    9. '#' → logprob: -4.954591751098633
    10. '")' → logprob: -4.954591751098633

Token 415: 'OP' (ID: 4164)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.152426838874817
    2. ',' → logprob: -1.277426838874817
    3. '),' → logprob: -1.402426838874817
    4. '   ' → logprob: -3.1524267196655273
    5. ' ,' → logprob: -3.7774267196655273
    6. '<|end|>' → logprob: -3.9024267196655273
    7. '"),' → logprob: -4.527426719665527
    8. ''),' → logprob: -4.652426719665527
    9. '")' → logprob: -4.652426719665527
    10. ' ),' → logprob: -5.027426719665527

Token 416: 'UA' (ID: 26004)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 417: '),
' (ID: 2313)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.0261125564575195
    2. '<|end|>' → logprob: -1.7761125564575195
    3. '):' → logprob: -2.1511125564575195
    4. ':' → logprob: -2.5261125564575195
    5. ',' → logprob: -2.6511125564575195
    6. ' =' → logprob: -3.5261125564575195
    7. '   ' → logprob: -3.5261125564575195
    8. '")' → logprob: -3.7761125564575195
    9. '),' → logprob: -3.7761125564575195
    10. '=' → logprob: -4.0261125564575195

Token 418: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 419: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6376144289970398
    2. 'decoded' → logprob: -1.7626144886016846
    3. ' decoded' → logprob: -2.1376144886016846
    4. ' i' → logprob: -3.5126144886016846
    5. ' bits' → logprob: -3.5126144886016846
    6. ' code' → logprob: -3.6376144886016846
    7. 'bits' → logprob: -3.8876144886016846
    8. '#' (adapté à ' #') → logprob: -4.1376142501831055
    9. ')' → logprob: -4.6376142501831055
    10. '    ' → logprob: -4.7626142501831055

Token 420: ' decode' (ID: 32043)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.8095256686210632
    2. '#' → logprob: -0.9345256686210632
    3. ' bits' → logprob: -3.309525728225708
    4. 'decoded' → logprob: -3.309525728225708
    5. '   ' → logprob: -3.684525728225708
    6. 'code' → logprob: -4.184525489807129
    7. ' decoded' → logprob: -4.809525489807129
    8. ' #' → logprob: -4.934525489807129
    9. 'break' → logprob: -5.184525489807129
    10. ' code' → logprob: -5.559525489807129

Token 421: ' it' (ID: 480)
  Prédit: 'decoded'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'decoded' → logprob: -0.40944382548332214
    2. 'bits' → logprob: -1.7844438552856445
    3. '   ' → logprob: -2.1594438552856445
    4. 'pos' → logprob: -4.4094438552856445
    5. ' decoded' → logprob: -4.6594438552856445
    6. 'bit' → logprob: -4.7844438552856445
    7. 'code' → logprob: -5.0344438552856445
    8. 'idx' → logprob: -5.6594438552856445
    9. ' bits' → logprob: -5.9094438552856445
    10. '#' → logprob: -6.0344438552856445

Token 422: ' using' (ID: 2360)
  Prédit: 'decoded'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'decoded' → logprob: -0.38668692111968994
    2. 'bits' → logprob: -1.63668692111969
    3. '   ' → logprob: -2.1366868019104004
    4. ' decoded' → logprob: -6.7616868019104
    5. 'bit' → logprob: -6.7616868019104
    6. 'code' → logprob: -6.7616868019104
    7. 'chars' → logprob: -7.1366868019104
    8. '#' → logprob: -7.3866868019104
    9. ' bits' → logprob: -7.3866868019104
    10. 'decode' → logprob: -7.6366868019104

Token 423: ' the' (ID: 290)
  Prédit: 'code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'code' → logprob: -0.08418579399585724
    2. 'the' → logprob: -3.084185838699341
    3. ' code' → logprob: -3.709185838699341
    4. ' the' → logprob: -5.584185600280762
    5. 'table' → logprob: -6.209185600280762
    6. 'bits' → logprob: -6.709185600280762
    7. 'bit' → logprob: -6.834185600280762
    8. '#' → logprob: -7.334185600280762
    9. ')' → logprob: -8.209185600280762
    10. ' table' → logprob: -8.709185600280762

Token 424: ' code' (ID: 3490)
  Prédit: 'code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'code' → logprob: -0.013901615515351295
    2. 'table' → logprob: -5.263901710510254
    3. 'codes' → logprob: -5.388901710510254
    4. 'bits' → logprob: -6.513901710510254
    5. 'prefix' → logprob: -7.263901710510254
    6. 'bit' → logprob: -7.388901710510254
    7. '#' → logprob: -8.013901710510254
    8. 'current' → logprob: -8.138901710510254
    9. 'H' → logprob: -8.513901710510254
    10. ' code' → logprob: -9.138901710510254

Token 425: '_to' (ID: 5089)
  Prédit: 'decoded'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'decoded' → logprob: -0.42323923110961914
    2. '   ' → logprob: -1.2982392311096191
    3. 'bits' → logprob: -2.798239231109619
    4. 'code' → logprob: -5.548239231109619
    5. '#' → logprob: -6.173239231109619
    6. 'bit' → logprob: -6.423239231109619
    7. ' decoded' → logprob: -7.548239231109619
    8. 'decode' → logprob: -7.673239231109619
    9. 'chars' → logprob: -7.798239231109619
    10. 'result' → logprob: -7.923239231109619

Token 426: '_char' (ID: 23398)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.4742192029953003
    2. '_char' → logprob: -0.9742192029953003
    3. ' char' → logprob: -9.09921932220459
    4. '_chars' → logprob: -11.84921932220459
    5. 'ch' → logprob: -12.09921932220459
    6. '<char' → logprob: -12.47421932220459
    7. '```' → logprob: -13.22421932220459
    8. 'chars' → logprob: -13.47421932220459
    9. 'bit' → logprob: -13.47421932220459
    10. '_ch' → logprob: -13.47421932220459

Token 427: ' dictionary' (ID: 22131)
  Prédit: 'decoded'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'decoded' → logprob: -0.09680307656526566
    2. 'bits' → logprob: -2.9718031883239746
    3. '   ' → logprob: -3.3468031883239746
    4. 'bit' → logprob: -6.471803188323975
    5. 'result' → logprob: -6.846803188323975
    6. 'code' → logprob: -7.346803188323975
    7. ' decoded' → logprob: -7.721803188323975
    8. '#' → logprob: -8.096802711486816
    9. 'pos' → logprob: -8.346802711486816
    10. 'chars' → logprob: -8.346802711486816

Token 428: ' by' (ID: 656)
  Prédit: 'decoded'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'decoded' → logprob: -0.0031237639486789703
    2. 'bits' → logprob: -6.378123760223389
    3. '   ' → logprob: -7.003123760223389
    4. 'result' → logprob: -8.628124237060547
    5. ' decoded' → logprob: -9.003124237060547
    6. 'bit' → logprob: -9.503124237060547
    7. 'code' → logprob: -10.503124237060547
    8. 'output' → logprob: -10.878124237060547
    9. 'decode' → logprob: -10.878124237060547
    10. 'pos' → logprob: -11.128124237060547

Token 429: ' matching' (ID: 20238)
  Prédit: 'reading'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'reading' → logprob: -1.1705437898635864
    2. 'spl' → logprob: -1.5455437898635864
    3. 'sc' → logprob: -2.170543670654297
    4. 'matching' → logprob: -2.545543670654297
    5. 'iter' → logprob: -2.795543670654297
    6. 'par' → logprob: -2.920543670654297
    7. 'taking' → logprob: -2.920543670654297
    8. 'cons' → logprob: -4.045543670654297
    9. 'acc' → logprob: -4.170543670654297
    10. 'buffer' → logprob: -4.295543670654297

Token 430: ' a' (ID: 261)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.4198024868965149
    2. ' i' → logprob: -1.2948024272918701
    3. '   ' → logprob: -4.669802665710449
    4. ' pos' → logprob: -4.669802665710449
    5. 'pos' → logprob: -4.669802665710449
    6. ' code' → logprob: -5.294802665710449
    7. 'decoded' → logprob: -5.294802665710449
    8. '```' → logprob: -5.419802665710449
    9. 'idx' → logprob: -5.919802665710449
    10. ' bits' → logprob: -6.044802665710449

Token 431: ' prefix' (ID: 18633)
  Prédit: 'buffer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'buffer' → logprob: -1.380944848060608
    2. 'prefix' → logprob: -1.880944848060608
    3. 'bits' → logprob: -1.880944848060608
    4. ' buffer' → logprob: -2.0059447288513184
    5. 'bit' → logprob: -2.3809447288513184
    6. 'current' → logprob: -2.8809447288513184
    7. ' prefix' → logprob: -3.3809447288513184
    8. ' bits' → logprob: -3.5059447288513184
    9. ' bit' → logprob: -3.8809447288513184
    10. ' current' → logprob: -4.255944728851318

Token 432: ' from' (ID: 591)
  Prédit: 'pos'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pos' → logprob: -0.43672481179237366
    2. '   ' → logprob: -1.8117247819900513
    3. 'decoded' → logprob: -1.9367247819900513
    4. 'idx' → logprob: -4.061724662780762
    5. ' pos' → logprob: -4.311724662780762
    6. 'i' → logprob: -5.061724662780762
    7. ' decoded' → logprob: -5.811724662780762
    8. 'index' → logprob: -6.061724662780762
    9. 'rest' → logprob: -7.561724662780762
    10. 'bits' → logprob: -7.561724662780762

Token 433: ' bit' (ID: 3546)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.07351235300302505
    2. ' bits' → logprob: -2.823512315750122
    3. 'the' → logprob: -4.573512554168701
    4. ' the' → logprob: -6.948512554168701
    5. 'line' → logprob: -9.323512077331543
    6. 'bit' → logprob: -10.073512077331543
    7. '```' → logprob: -10.948512077331543
    8. '`' → logprob: -11.073512077331543
    9. ' ' → logprob: -11.698512077331543
    10. ' line' → logprob: -11.948512077331543

Token 434: 'string' (ID: 1655)
  Prédit: 'string'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'string' → logprob: -0.0939537063241005
    2. 's' → logprob: -3.3439536094665527
    3. 'str' → logprob: -3.9689536094665527
    4. 'tring' → logprob: -4.843953609466553
    5. 'i' → logprob: -5.093953609466553
    6. 'ing' → logprob: -5.218953609466553
    7. 'idx' → logprob: -5.593953609466553
    8. 'length' → logprob: -6.218953609466553
    9. '   ' → logprob: -6.468953609466553
    10. 'for' → logprob: -6.468953609466553

Token 435: '
    
' (ID: 15698)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.9938874840736389
    2. 'decoded' → logprob: -1.3688874244689941
    3. '   ' → logprob: -1.7438874244689941
    4. ' bits' → logprob: -2.493887424468994
    5. ' decoded' → logprob: -3.493887424468994
    6. 'bit' → logprob: -3.743887424468994
    7. ' bit' → logprob: -4.743887424468994
    8. 'pos' → logprob: -4.743887424468994
    9. 'code' → logprob: -4.868887424468994
    10. 'idx' → logprob: -4.993887424468994

Token 436: '   ' (ID: 271)
  Prédit: 'decoded'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'decoded' → logprob: -0.6222076416015625
    2. '   ' → logprob: -0.8722076416015625
    3. 'pos' → logprob: -4.2472076416015625
    4. ' decoded' → logprob: -4.4972076416015625
    5. 'bits' → logprob: -4.6222076416015625
    6. 'bit' → logprob: -6.3722076416015625
    7. 'idx' → logprob: -6.6222076416015625
    8. 'result' → logprob: -6.7472076416015625
    9. 'i' → logprob: -6.8722076416015625
    10. ' bits' → logprob: -7.1222076416015625

Token 437: ' #' (ID: 1069)
  Prédit: 'decoded'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'decoded' → logprob: -0.7911655306816101
    2. '   ' → logprob: -1.2911655902862549
    3. 'bits' → logprob: -2.166165590286255
    4. 'pos' → logprob: -2.791165590286255
    5. ' decoded' → logprob: -3.791165590286255
    6. 'bit' → logprob: -4.041165351867676
    7. 'idx' → logprob: -4.166165351867676
    8. ' bits' → logprob: -4.291165351867676
    9. 'i' → logprob: -5.166165351867676
    10. 'code' → logprob: -5.541165351867676

Token 438: ' So' (ID: 2632)
  Prédit: 'decoded'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'decoded' → logprob: -0.08062198758125305
    2. 'pos' → logprob: -2.9556219577789307
    3. 'bits' → logprob: -4.70562219619751
    4. '   ' → logprob: -5.45562219619751
    5. ' decoded' → logprob: -5.70562219619751
    6. 'idx' → logprob: -6.20562219619751
    7. 'i' → logprob: -6.58062219619751
    8. 'code' → logprob: -6.70562219619751
    9. 'bit' → logprob: -6.70562219619751
    10. 'index' → logprob: -6.95562219619751

Token 439: ' the' (ID: 290)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.3080873489379883
    2. 'decoded' → logprob: -1.9330873489379883
    3. 'bit' → logprob: -2.6830873489379883
    4. '   ' → logprob: -4.183087348937988
    5. 'pos' → logprob: -5.058087348937988
    6. 'code' → logprob: -5.183087348937988
    7. ' bits' → logprob: -5.183087348937988
    8. 'idx' → logprob: -5.308087348937988
    9. ' decoded' → logprob: -5.433087348937988
    10. ' bit' → logprob: -5.933087348937988

Token 440: ' problem' (ID: 4792)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.47778406739234924
    2. 'decoded' → logprob: -1.7277840375900269
    3. 'pos' → logprob: -2.2277841567993164
    4. 'bit' → logprob: -2.6027841567993164
    5. 'idx' → logprob: -5.352784156799316
    6. 'code' → logprob: -5.477784156799316
    7. '#' → logprob: -5.852784156799316
    8. 'i' → logprob: -5.852784156799316
    9. '   ' → logprob: -6.227784156799316
    10. 'def' → logprob: -6.977784156799316

Token 441: ' is' (ID: 382)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3593900203704834
    2. ' is' → logprob: -2.1093900203704834
    3. 'bits' → logprob: -2.7343900203704834
    4. ' bits' → logprob: -3.7343900203704834
    5. '#' → logprob: -3.9843900203704834
    6. 'is' → logprob: -4.9843902587890625
    7. ':' → logprob: -4.9843902587890625
    8. '=' → logprob: -5.1093902587890625
    9. 'bit' → logprob: -5.1093902587890625
    10. 'code' → logprob: -5.1093902587890625

Token 442: ' to' (ID: 316)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7641317248344421
    2. ' bits' → logprob: -2.264131784439087
    3. ' decoded' → logprob: -2.514131784439087
    4. ' pass' → logprob: -2.889131784439087
    5. 'bits' → logprob: -2.889131784439087
    6. 'decoded' → logprob: -3.014131784439087
    7. ' bit' → logprob: -3.514131784439087
    8. ' code' → logprob: -3.514131784439087
    9. '    ' → logprob: -4.014131546020508
    10. 'pass' → logprob: -4.764131546020508

Token 443: ' convert' (ID: 8452)
  Prédit: 'decode'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'decode' → logprob: -0.026491297408938408
    2. ' decode' → logprob: -4.526491165161133
    3. 'bits' → logprob: -5.151491165161133
    4. 'read' → logprob: -5.901491165161133
    5. 'bit' → logprob: -6.276491165161133
    6. '#' → logprob: -6.651491165161133
    7. 'decoded' → logprob: -6.776491165161133
    8. 'continue' → logprob: -7.901491165161133
    9. 'import' → logprob: -8.151491165161133
    10. 'def' → logprob: -8.151491165161133

Token 444: ' input' (ID: 3422)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.06687290966510773
    2. ' line' → logprob: -3.3168728351593018
    3. 'the' → logprob: -4.566873073577881
    4. 'bits' → logprob: -4.816873073577881
    5. 'chars' → logprob: -5.941873073577881
    6. 'input' → logprob: -6.691873073577881
    7. ' the' → logprob: -6.941873073577881
    8. 'code' → logprob: -7.316873073577881
    9. '(line' → logprob: -7.816873073577881
    10. 'ch' → logprob: -7.941873073577881

Token 445: ' string' (ID: 1621)
  Prédit: '_chars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_chars' → logprob: -1.8123496770858765
    2. '_bits' → logprob: -2.062349796295166
    3. '=' → logprob: -2.312349796295166
    4. 'token' → logprob: -2.312349796295166
    5. 'chars' → logprob: -2.687349796295166
    6. '<|end|>' → logprob: -2.812349796295166
    7. ' =' → logprob: -3.062349796295166
    8. '_token' → logprob: -3.187349796295166
    9. 'tokens' → logprob: -3.187349796295166
    10. 'line' → logprob: -3.187349796295166

Token 446: ' characters' (ID: 9862)
  Prédit: '_bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_bits' → logprob: -0.3571625351905823
    2. 'bits' → logprob: -2.3571624755859375
    3. 'to' → logprob: -3.1071624755859375
    4. '_chars' → logprob: -3.3571624755859375
    5. ' =' → logprob: -3.7321624755859375
    6. '=' → logprob: -3.8571624755859375
    7. '_to' → logprob: -4.2321624755859375
    8. ' to' → logprob: -4.6071624755859375
    9. 'chars' → logprob: -4.7321624755859375
    10. ')' → logprob: -4.8571624755859375

Token 447: ' to' (ID: 316)
  Prédit: 'to'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'to' → logprob: -0.9263198375701904
    2. ' to' → logprob: -1.5513198375701904
    3. ' into' → logprob: -1.9263198375701904
    4. 'into' → logprob: -2.3013198375701904
    5. 'in' → logprob: -2.8013198375701904
    6. ':' → logprob: -3.6763198375701904
    7. ' in' → logprob: -4.0513200759887695
    8. '=' → logprob: -4.5513200759887695
    9. '   ' → logprob: -5.0513200759887695
    10. ' as' → logprob: -5.3013200759887695

Token 448: ' bits' (ID: 18189)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.04724958911538124
    2. 'bit' → logprob: -3.5472495555877686
    3. 'their' → logprob: -4.672249794006348
    4. 'a' → logprob: -5.047249794006348
    5. ' bits' → logprob: -6.922249794006348
    6. ' their' → logprob: -8.047249794006348
    7. 'the' → logprob: -9.547249794006348
    8. ' a' → logprob: -9.672249794006348
    9. 'codes' → logprob: -10.047249794006348
    10. 'code' → logprob: -10.047249794006348

Token 449: ' first' (ID: 1577)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6981488466262817
    2. ':' → logprob: -1.6981488466262817
    3. '=' → logprob: -2.823148727416992
    4. 'for' → logprob: -3.198148727416992
    5. ' =' → logprob: -3.323148727416992
    6. ' for' → logprob: -3.948148727416992
    7. '.' → logprob: -4.073148727416992
    8. '):' → logprob: -4.198148727416992
    9. '       ' → logprob: -4.448148727416992
    10. ')' → logprob: -4.448148727416992

Token 450: ',
' (ID: 412)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.021580642089247704
    2. '       ' → logprob: -4.646580696105957
    3. ':' → logprob: -5.896580696105957
    4. '):' → logprob: -6.146580696105957
    5. ' for' → logprob: -6.896580696105957
    6. 'for' → logprob: -7.146580696105957
    7. ')' → logprob: -7.396580696105957
    8. '=' → logprob: -7.646580696105957
    9. '#' → logprob: -7.646580696105957
    10. 'chars' → logprob: -7.646580696105957

Token 451: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2893082797527313
    2. ')' → logprob: -2.0393083095550537
    3. '<|end|>' → logprob: -2.7893083095550537
    4. '       ' → logprob: -3.9143083095550537
    5. '"' → logprob: -4.039308071136475
    6. '#' → logprob: -5.164308071136475
    7. '")' → logprob: -5.664308071136475
    8. '    ' → logprob: -6.164308071136475
    9. '  ' → logprob: -6.414308071136475
    10. '<|end|>' → logprob: -6.664308071136475

Token 452: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.015454208478331566
    2. '#' (adapté à ' #') → logprob: -4.515454292297363
    3. 'for' → logprob: -7.265454292297363
    4. '       ' → logprob: -7.640454292297363
    5. ')' → logprob: -7.640454292297363
    6. ' and' → logprob: -7.890454292297363
    7. 'bits' → logprob: -8.265454292297363
    8. ' for' → logprob: -8.390454292297363
    9. '"' → logprob: -8.515454292297363
    10. 'code' → logprob: -8.765454292297363

Token 453: ' but' (ID: 889)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4612775444984436
    2. 'code' → logprob: -2.211277484893799
    3. 'for' → logprob: -2.461277484893799
    4. '#' → logprob: -2.961277484893799
    5. 'char' → logprob: -3.086277484893799
    6. 'bits' → logprob: -3.836277484893799
    7. 'bit' → logprob: -4.586277484893799
    8. ' for' → logprob: -4.961277484893799
    9. 'token' → logprob: -5.086277484893799
    10. 'print' → logprob: -5.211277484893799

Token 454: ' no' (ID: 860)
  Prédit: 'code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'code' → logprob: -1.0689440965652466
    2. 'bits' → logprob: -1.4439440965652466
    3. '#' → logprob: -2.443943977355957
    4. ' code' → logprob: -2.818943977355957
    5. 'ch' → logprob: -2.943943977355957
    6. ' bits' → logprob: -3.568943977355957
    7. 'for' → logprob: -3.693943977355957
    8. ' for' → logprob: -3.818943977355957
    9. ' line' → logprob: -4.068943977355957
    10. '...' → logprob: -4.193943977355957

Token 455: ' mapping' (ID: 22573)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8069374561309814
    2. '<|end|>' → logprob: -1.9319374561309814
    3. ' code' → logprob: -3.3069374561309814
    4. ' else' → logprob: -3.3069374561309814
    5. ' for' → logprob: -3.3069374561309814
    6. ' longer' → logprob: -3.4319374561309814
    7. '...' → logprob: -3.8069374561309814
    8. '#' → logprob: -3.9319374561309814
    9. '.' → logprob: -3.9319374561309814
    10. 'else' → logprob: -4.056937217712402

Token 456: ' given' (ID: 4335)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.750048041343689
    2. '<|end|>' → logprob: -2.2500481605529785
    3. '#' → logprob: -2.5000481605529785
    4. '"' → logprob: -2.7500481605529785
    5. 'for' → logprob: -2.7500481605529785
    6. ' for' → logprob: -3.0000481605529785
    7. ')' → logprob: -3.2500481605529785
    8. '")' → logprob: -3.7500481605529785
    9. ':' → logprob: -4.1250481605529785
    10. '""' → logprob: -4.8750481605529785

Token 457: ' for' (ID: 395)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.584309458732605
    2. '#' → logprob: -2.2093095779418945
    3. 'ch' → logprob: -2.9593095779418945
    4. '[ch' → logprob: -2.9593095779418945
    5. ' for' → logprob: -3.0843095779418945
    6. 'for' → logprob: -3.0843095779418945
    7. '       ' → logprob: -3.5843095779418945
    8. '"' → logprob: -3.7093095779418945
    9. ')' → logprob: -4.7093095779418945
    10. '")' → logprob: -4.9593095779418945

Token 458: ' characters' (ID: 9862)
  Prédit: 'ch'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ch' → logprob: -0.7745934128761292
    2. 'the' → logprob: -1.3995933532714844
    3. ' the' → logprob: -1.8995933532714844
    4. ' them' → logprob: -3.5245933532714844
    5. 'input' → logprob: -3.6495933532714844
    6. ' ch' → logprob: -3.6495933532714844
    7. ' input' → logprob: -4.024593353271484
    8. 'each' → logprob: -4.899593353271484
    9. 'them' → logprob: -5.024593353271484
    10. ' those' → logprob: -5.149593353271484

Token 459: ' like' (ID: 1299)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.12250140309333801
    2. '#' → logprob: -2.9975013732910156
    3. ')' → logprob: -3.9975013732910156
    4. '<|end|>' → logprob: -4.122501373291016
    5. 'for' → logprob: -4.497501373291016
    6. '")' → logprob: -5.497501373291016
    7. '"' → logprob: -5.997501373291016
    8. ' for' → logprob: -6.372501373291016
    9. '.' → logprob: -6.872501373291016
    10. '       ' → logprob: -7.247501373291016

Token 460: ' '?'' (ID: 192100)
  Prédit: ' ch'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ch' → logprob: -0.5100106596946716
    2. 'ch' → logprob: -1.0100107192993164
    3. ')' → logprob: -4.635010719299316
    4. ' line' → logprob: -4.635010719299316
    5. 'line' → logprob: -5.385010719299316
    6. '[ch' → logprob: -6.010010719299316
    7. 'bits' → logprob: -6.760010719299316
    8. 'c' → logprob: -7.135010719299316
    9. ' bits' → logprob: -7.135010719299316
    10. '
' → logprob: -7.510010719299316

Token 461: ' or' (ID: 503)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13975302875041962
    2. '#' → logprob: -3.5147531032562256
    3. 'for' → logprob: -3.7647531032562256
    4. '"' → logprob: -4.2647528648376465
    5. ')' → logprob: -4.6397528648376465
    6. 'ch' → logprob: -4.6397528648376465
    7. '")' → logprob: -4.7647528648376465
    8. ' for' → logprob: -5.3897528648376465
    9. '.' → logprob: -5.5147528648376465
    10. '       ' → logprob: -5.6397528648376465

Token 462: ' '' (ID: 461)
  Prédit: ''-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''-' → logprob: -1.359566330909729
    2. ''' → logprob: -1.734566330909729
    3. '#' → logprob: -2.3595662117004395
    4. ')' → logprob: -2.9845662117004395
    5. '
' → logprob: -2.9845662117004395
    6. 'line' → logprob: -3.1095662117004395
    7. 'the' → logprob: -3.3595662117004395
    8. 'letters' → logprob: -3.3595662117004395
    9. ''D' → logprob: -3.3595662117004395
    10. ''A' → logprob: -3.8595662117004395

Token 463: 'D' (ID: 35)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.23743458092212677
    2. ')' → logprob: -2.6124346256256104
    3. 'ch' → logprob: -2.9874346256256104
    4. '"' → logprob: -4.612434387207031
    5. '?' → logprob: -4.612434387207031
    6. '')' → logprob: -4.737434387207031
    7. ' '' → logprob: -4.862434387207031
    8. ''\' → logprob: -4.987434387207031
    9. '`' → logprob: -5.112434387207031
    10. ' ch' → logprob: -5.362434387207031

Token 464: ''' (ID: 6)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6829374432563782
    2. ')' → logprob: -3.0579373836517334
    3. 'for' → logprob: -3.0579373836517334
    4. '.' → logprob: -3.1829373836517334
    5. ':' → logprob: -3.3079373836517334
    6. ' for' → logprob: -3.4329373836517334
    7. '"' → logprob: -3.5579373836517334
    8. '")' → logprob: -3.5579373836517334
    9. '       ' → logprob: -3.8079373836517334
    10. 'ch' → logprob: -3.8079373836517334

Token 465: ' etc' (ID: 5178)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7453517913818359
    2. '#' → logprob: -1.745351791381836
    3. 'decoded' → logprob: -2.245351791381836
    4. 'char' → logprob: -2.620351791381836
    5. 'if' → logprob: -3.120351791381836
    6. 'code' → logprob: -3.870351791381836
    7. 'continue' → logprob: -4.120351791381836
    8. 'bits' → logprob: -4.120351791381836
    9. 'for' → logprob: -4.370351791381836
    10. 'chars' → logprob: -4.620351791381836

Token 466: ' to' (ID: 316)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10207616537809372
    2. '#' → logprob: -3.3520760536193848
    3. 'decoded' → logprob: -4.352076053619385
    4. ')' → logprob: -4.602076053619385
    5. 'for' → logprob: -4.852076053619385
    6. 'continue' → logprob: -5.477076053619385
    7. 'char' → logprob: -5.727076053619385
    8. ' for' → logprob: -6.227076053619385
    9. 'if' → logprob: -6.352076053619385
    10. 'bits' → logprob: -6.352076053619385

Token 467: ' bits' (ID: 18189)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.2042054682970047
    2. 'the' → logprob: -3.2042055130004883
    3. 'code' → logprob: -3.3292055130004883
    4. ' bits' → logprob: -3.4542055130004883
    5. 'their' → logprob: -3.4542055130004883
    6. 'table' → logprob: -4.454205513000488
    7. 'bit' → logprob: -4.454205513000488
    8. ' their' → logprob: -5.204205513000488
    9. 'None' → logprob: -5.704205513000488
    10. '"' → logprob: -5.954205513000488

Token 468: ':
' (ID: 734)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.30220380425453186
    2. 'for' → logprob: -2.552203893661499
    3. '#' → logprob: -2.927203893661499
    4. ')' → logprob: -3.802203893661499
    5. ' for' → logprob: -3.927203893661499
    6. '"' → logprob: -4.30220365524292
    7. 'if' → logprob: -4.30220365524292
    8. '       ' → logprob: -4.42720365524292
    9. ' if' → logprob: -4.42720365524292
    10. '.' → logprob: -5.30220365524292

Token 469: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5490015149116516
    2. 'for' → logprob: -1.7990014553070068
    3. 'ch' → logprob: -2.549001455307007
    4. '#' → logprob: -3.299001455307007
    5. ')' → logprob: -3.674001455307007
    6. ' for' → logprob: -3.799001455307007
    7. '<|end|>' → logprob: -4.299001693725586
    8. '.' → logprob: -4.549001693725586
    9. '"' → logprob: -4.549001693725586
    10. '")' → logprob: -4.674001693725586

Token 470: ' #' (ID: 1069)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 471: ' Instead' (ID: 21050)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.12029676139354706
    2. '#' → logprob: -3.7452967166900635
    3. 'for' → logprob: -3.9952967166900635
    4. ')' → logprob: -4.245296955108643
    5. ' for' → logprob: -4.370296955108643
    6. '")' → logprob: -4.870296955108643
    7. '       ' → logprob: -4.870296955108643
    8. '"' → logprob: -5.870296955108643
    9. 'ch' → logprob: -5.870296955108643
    10. '.' → logprob: -5.995296955108643

Token 472: ' the' (ID: 290)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.021146314218640327
    2. '#' → logprob: -4.271146297454834
    3. ',' → logprob: -6.521146297454834
    4. '<|end|>' → logprob: -6.771146297454834
    5. '       ' → logprob: -6.896146297454834
    6. ' for' → logprob: -7.646146297454834
    7. ')' → logprob: -7.646146297454834
    8. '    
' → logprob: -7.896146297454834
    9. ':' → logprob: -8.021146774291992
    10. 'for' → logprob: -8.396146774291992

Token 473: ' table' (ID: 3293)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.10084197670221329
    2. 'input' → logprob: -2.975841999053955
    3. 'table' → logprob: -4.475841999053955
    4. 'for' → logprob: -4.600841999053955
    5. 'mapping' → logprob: -5.100841999053955
    6. 'char' → logprob: -5.225841999053955
    7. 'code' → logprob: -5.600841999053955
    8. 'next' → logprob: -6.350841999053955
    9. 'line' → logprob: -6.975841999053955
    10. 'user' → logprob: -7.100841999053955

Token 474: ' is' (ID: 382)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -1.2584654092788696
    2. ' =' → logprob: -1.3834654092788696
    3. '=' → logprob: -2.50846529006958
    4. '.' → logprob: -2.50846529006958
    5. '<|end|>' → logprob: -3.13346529006958
    6. ')' → logprob: -3.25846529006958
    7. '[ch' → logprob: -3.38346529006958
    8. '[' → logprob: -3.75846529006958
    9. '):' → logprob: -3.88346529006958
    10. ' in' → logprob: -3.88346529006958

Token 475: ' from' (ID: 591)
  Prédit: '{'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '{' → logprob: -1.8059334754943848
    2. ')' → logprob: -1.9309334754943848
    3. 'char' → logprob: -1.9309334754943848
    4. '{}' → logprob: -2.4309334754943848
    5. '#' → logprob: -2.8059334754943848
    6. 'code' → logprob: -2.9309334754943848
    7. '   ' → logprob: -3.0559334754943848
    8. '{
' → logprob: -3.3059334754943848
    9. '")' → logprob: -3.5559334754943848
    10. 'ch' → logprob: -3.8059334754943848

Token 476: ' letter' (ID: 10263)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.03210240229964256
    2. 'code' → logprob: -4.782102584838867
    3. 'character' → logprob: -5.532102584838867
    4. 'ch' → logprob: -5.907102584838867
    5. 'letter' → logprob: -5.907102584838867
    6. '(char' → logprob: -6.032102584838867
    7. '<char' → logprob: -6.032102584838867
    8. 'chars' → logprob: -6.282102584838867
    9. 'str' → logprob: -7.157102584838867
    10. '"' → logprob: -7.407102584838867

Token 477: ' to' (ID: 316)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.8509296774864197
    2. ' =' → logprob: -1.8509297370910645
    3. '   ' → logprob: -3.1009297370910645
    4. ' for' → logprob: -3.1009297370910645
    5. '=' → logprob: -3.2259297370910645
    6. ' to' → logprob: -3.6009297370910645
    7. 's' → logprob: -3.7259297370910645
    8. '#' → logprob: -3.9759297370910645
    9. ']' → logprob: -3.9759297370910645
    10. '_to' → logprob: -4.1009297370910645

Token 478: ' code' (ID: 3490)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.26079055666923523
    2. 'bit' → logprob: -1.8857905864715576
    3. 'code' → logprob: -2.7607905864715576
    4. 'char' → logprob: -5.1357903480529785
    5. ' bits' → logprob: -5.6357903480529785
    6. 'string' → logprob: -6.3857903480529785
    7. ' code' → logprob: -7.0107903480529785
    8. 'binary' → logprob: -7.0107903480529785
    9. ' bit' → logprob: -7.7607903480529785
    10. 'letter' → logprob: -7.8857903480529785

Token 479: ' and' (ID: 326)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09572286903858185
    2. '<|end|>' → logprob: -3.0957229137420654
    3. '#' → logprob: -3.7207229137420654
    4. ')' → logprob: -4.720722675323486
    5. '...' → logprob: -6.470722675323486
    6. ' for' → logprob: -6.720722675323486
    7. 'for' → logprob: -6.845722675323486
    8. '.' → logprob: -7.345722675323486
    9. '       ' → logprob: -7.345722675323486
    10. '")' → logprob: -7.470722675323486

Token 480: ' code' (ID: 3490)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.24400494992733002
    2. 'code' → logprob: -2.744004964828491
    3. '   ' → logprob: -3.244004964828491
    4. '#' → logprob: -3.244004964828491
    5. ' bits' → logprob: -4.619004726409912
    6. 'for' → logprob: -4.619004726409912
    7. 'char' → logprob: -4.744004726409912
    8. 'the' → logprob: -4.744004726409912
    9. 'decoded' → logprob: -5.494004726409912
    10. 'bit' → logprob: -5.494004726409912

Token 481: ' to' (ID: 316)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -1.428769826889038
    2. '=' → logprob: -1.803769826889038
    3. '   ' → logprob: -2.428769826889038
    4. ' in' → logprob: -2.678769826889038
    5. ')' → logprob: -2.928769826889038
    6. 'for' → logprob: -3.178769826889038
    7. ' +=' → logprob: -3.428769826889038
    8. 'in' → logprob: -3.428769826889038
    9. '_to' → logprob: -3.428769826889038
    10. '.' → logprob: -3.553769826889038

Token 482: ' letter' (ID: 10263)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.07866425067186356
    2. 'bit' → logprob: -3.2036643028259277
    3. 'bits' → logprob: -3.8286643028259277
    4. 'letter' → logprob: -4.703664302825928
    5. 'code' → logprob: -5.953664302825928
    6. 'character' → logprob: -7.328664302825928
    7. 'ch' → logprob: -7.828664302825928
    8. '#' → logprob: -8.57866382598877
    9. 'chars' → logprob: -9.20366382598877
    10. 'letters' → logprob: -9.95366382598877

Token 483: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.28174158930778503
    2. '#' → logprob: -3.1567416191101074
    3. 'for' → logprob: -3.1567416191101074
    4. 'char' → logprob: -3.9067416191101074
    5. ')' → logprob: -4.031741619110107
    6. ' for' → logprob: -4.156741619110107
    7. 'if' → logprob: -4.156741619110107
    8. 'bits' → logprob: -4.281741619110107
    9. ' if' → logprob: -4.531741619110107
    10. 'ch' → logprob: -4.656741619110107

Token 484: '    
' (ID: 1944)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.096989631652832
    2. 'char' → logprob: -1.471989631652832
    3. 'decoded' → logprob: -1.471989631652832
    4. '   ' → logprob: -2.221989631652832
    5. 'bits' → logprob: -3.846989631652832
    6. 'code' → logprob: -3.971989631652832
    7. 'input' → logprob: -4.471989631652832
    8. 'chars' → logprob: -4.596989631652832
    9. 'bit' → logprob: -4.846989631652832
    10. 'if' → logprob: -5.221989631652832

Token 485: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.3828964233398438
    2. 'char' → logprob: -1.3828964233398438
    3. 'decoded' → logprob: -1.5078964233398438
    4. '#' → logprob: -1.7578964233398438
    5. 'bits' → logprob: -3.2578964233398438
    6. 'input' → logprob: -4.382896423339844
    7. 'chars' → logprob: -4.507896423339844
    8. 'code' → logprob: -4.882896423339844
    9. 'bit' → logprob: -4.882896423339844
    10. 'encoded' → logprob: -5.382896423339844

Token 486: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2285073846578598
    2. 'ch' → logprob: -2.8535072803497314
    3. '<|end|>' → logprob: -3.3535072803497314
    4. '#' (adapté à ' #') → logprob: -3.7285072803497314
    5. 'for' → logprob: -3.9785072803497314
    6. ')' → logprob: -4.6035075187683105
    7. 'char' → logprob: -4.6035075187683105
    8. ' for' → logprob: -4.8535075187683105
    9. 'decoded' → logprob: -5.4785075187683105
    10. '.' → logprob: -5.7285075187683105

Token 487: ' Actually' (ID: 50557)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7088449597358704
    2. 'decoded' → logprob: -1.2088449001312256
    3. 'bits' → logprob: -2.0838449001312256
    4. '#' → logprob: -3.7088449001312256
    5. 'char' → logprob: -4.458845138549805
    6. 'chars' → logprob: -4.958845138549805
    7. 'encoded' → logprob: -4.958845138549805
    8. 'code' → logprob: -5.208845138549805
    9. ' decoded' → logprob: -5.333845138549805
    10. ' bits' → logprob: -5.458845138549805

Token 488: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09196212887763977
    2. ' for' → logprob: -3.3419620990753174
    3. 'for' → logprob: -3.9669620990753174
    4. 'bits' → logprob: -4.8419623374938965
    5. '#' → logprob: -4.9669623374938965
    6. 'chars' → logprob: -6.2169623374938965
    7. '       ' → logprob: -6.3419623374938965
    8. ')' → logprob: -6.3419623374938965
    9. ' bits' → logprob: -6.4669623374938965
    10. '    ' → logprob: -6.8419623374938965

Token 489: ' from' (ID: 591)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.15855230391025543
    2. 'decoded' → logprob: -2.783552408218384
    3. ' bits' → logprob: -3.158552408218384
    4. '#' → logprob: -3.908552408218384
    5. 'bit' → logprob: -4.783552169799805
    6. ' decoded' → logprob: -5.658552169799805
    7. 'chars' → logprob: -6.158552169799805
    8. ' bit' → logprob: -6.283552169799805
    9. 'char' → logprob: -6.408552169799805
    10. '   ' → logprob: -6.408552169799805

Token 490: ' the' (ID: 290)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.1885337233543396
    2. 'the' → logprob: -3.0635337829589844
    3. 'bits' → logprob: -3.4385337829589844
    4. '#' → logprob: -4.063533782958984
    5. 'code' → logprob: -4.438533782958984
    6. 'bit' → logprob: -4.563533782958984
    7. 'input' → logprob: -4.688533782958984
    8. 'char' → logprob: -4.688533782958984
    9. ' line' → logprob: -4.813533782958984
    10. 'table' → logprob: -6.188533782958984

Token 491: ' sample' (ID: 10176)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.5744677782058716
    2. '#' → logprob: -2.324467658996582
    3. 'for' → logprob: -2.324467658996582
    4. 'input' → logprob: -2.574467658996582
    5. 'bits' → logprob: -2.699467658996582
    6. 'char' → logprob: -3.949467658996582
    7. 'code' → logprob: -4.449467658996582
    8. 'table' → logprob: -4.949467658996582
    9. 'import' → logprob: -5.074467658996582
    10. ' line' → logprob: -5.199467658996582

Token 492: ':
' (ID: 734)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.20868061482906342
    2. ')' → logprob: -3.2086806297302246
    3. ' for' → logprob: -3.5836806297302246
    4. '#' → logprob: -3.8336806297302246
    5. 'for' → logprob: -3.8336806297302246
    6. 'ch' → logprob: -4.083680629730225
    7. 'char' → logprob: -4.583680629730225
    8. 'chars' → logprob: -5.083680629730225
    9. 'decoded' → logprob: -5.208680629730225
    10. '<|end|>' → logprob: -5.333680629730225

Token 493: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.322016179561615
    2. '<|end|>' → logprob: -2.0720162391662598
    3. ')' → logprob: -3.5720162391662598
    4. '#' → logprob: -3.5720162391662598
    5. ' for' → logprob: -4.07201623916626
    6. 'for' → logprob: -4.19701623916626
    7. '    ' → logprob: -4.82201623916626
    8. '.' → logprob: -5.32201623916626
    9. ' ' → logprob: -5.69701623916626
    10. 'char' → logprob: -5.82201623916626

Token 494: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5603688359260559
    2. '#' (adapté à ' #') → logprob: -2.185368776321411
    3. '<|end|>' → logprob: -2.810368776321411
    4. 'bits' → logprob: -3.435368776321411
    5. ')' → logprob: -3.560368776321411
    6. 'char' → logprob: -3.935368776321411
    7. 'decoded' → logprob: -4.06036901473999
    8. 'for' → logprob: -4.18536901473999
    9. ' for' → logprob: -4.43536901473999
    10. ' bits' → logprob: -4.43536901473999

Token 495: ' Input' (ID: 10090)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.5250909328460693
    2. '<|end|>' → logprob: -1.5250909328460693
    3. 'bits' → logprob: -1.9000909328460693
    4. 'for' → logprob: -3.0250909328460693
    5. '   ' → logprob: -3.1500909328460693
    6. ')' → logprob: -3.2750909328460693
    7. 'code' → logprob: -3.4000909328460693
    8. 'char' → logprob: -3.4000909328460693
    9. ' for' → logprob: -3.7750909328460693
    10. 'decoded' → logprob: -3.7750909328460693

Token 496: ':' (ID: 25)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 497: ' ?' (ID: 1423)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 498: 'D' (ID: 35)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 499: '-C' (ID: 10050)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 500: ''' (ID: 6)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 501: 'K' (ID: 42)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 502: 'OP' (ID: 4164)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 503: 'UA' (ID: 26004)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0220168828964233
    2. '<|end|>' → logprob: -1.5220168828964233
    3. ':' → logprob: -2.397017002105713
    4. ')' → logprob: -3.522017002105713
    5. '<|end|>' → logprob: -3.522017002105713
    6. ' =' → logprob: -3.772017002105713
    7. '")' → logprob: -3.897017002105713
    8. 'for' → logprob: -3.897017002105713
    9. ' for' → logprob: -4.022017002105713
    10. '=' → logprob: -4.022017002105713

Token 504: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6558159589767456
    2. '<|end|>' → logprob: -1.6558159589767456
    3. ':' → logprob: -2.280816078186035
    4. '#' → logprob: -3.405816078186035
    5. '<|end|>' → logprob: -3.780816078186035
    6. ')' → logprob: -3.905816078186035
    7. '=' → logprob: -4.655816078186035
    8. '[' → logprob: -4.780816078186035
    9. ' =' → logprob: -4.780816078186035
    10. '"' → logprob: -5.030816078186035

Token 505: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.35839399695396423
    2. ')' → logprob: -2.983393907546997
    3. ':' → logprob: -2.983393907546997
    4. '<|end|>' → logprob: -2.983393907546997
    5. '[' → logprob: -3.608393907546997
    6. '.' → logprob: -3.858393907546997
    7. '):' → logprob: -4.608394145965576
    8. '#' → logprob: -4.858394145965576
    9. '[ch' → logprob: -5.108394145965576
    10. ' =' → logprob: -5.233394145965576

Token 506: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04821210354566574
    2. ')' → logprob: -4.048212051391602
    3. '#' (adapté à ' #') → logprob: -5.548212051391602
    4. ':' → logprob: -6.173212051391602
    5. ' for' → logprob: -6.173212051391602
    6. ' =' → logprob: -6.298212051391602
    7. '"' → logprob: -6.298212051391602
    8. '=' → logprob: -6.423212051391602
    9. 'for' → logprob: -6.798212051391602
    10. '.' → logprob: -6.798212051391602

Token 507: ' Output' (ID: 18315)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.46816012263298035
    2. '#' → logprob: -2.4681601524353027
    3. ')' → logprob: -3.0931601524353027
    4. 'bits' → logprob: -3.2181601524353027
    5. 'ch' → logprob: -3.4681601524353027
    6. 'for' → logprob: -3.5931601524353027
    7. 'char' → logprob: -3.7181601524353027
    8. '<|end|>' → logprob: -3.9681601524353027
    9. 'code' → logprob: -4.343160152435303
    10. 'decoded' → logprob: -4.718160152435303

Token 508: ':' (ID: 25)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.663990318775177
    2. ' =' → logprob: -0.788990318775177
    3. '=""' → logprob: -4.913990497589111
    4. '=[]' → logprob: -5.663990497589111
    5. ')' → logprob: -5.788990497589111
    6. ':' → logprob: -6.288990497589111
    7. '=''' → logprob: -6.413990497589111
    8. '#' → logprob: -6.788990497589111
    9. '<|end|>' → logprob: -7.038990497589111
    10. '[' → logprob: -7.288990497589111

Token 509: ' P' (ID: 398)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 510: 'ETER' (ID: 39956)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8562120199203491
    2. '<|end|>' → logprob: -1.9812120199203491
    3. '#' → logprob: -2.1062121391296387
    4. 'for' → logprob: -2.8562121391296387
    5. ')' → logprob: -2.8562121391296387
    6. '=' → logprob: -3.4812121391296387
    7. '[' → logprob: -3.9812121391296387
    8. 'if' → logprob: -3.9812121391296387
    9. 'char' → logprob: -4.481212139129639
    10. '.' → logprob: -4.481212139129639

Token 511: ' POT' (ID: 100071)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.44350573420524597
    2. '   ' → logprob: -1.8185057640075684
    3. 'decoded' → logprob: -2.6935057640075684
    4. 'char' → logprob: -3.4435057640075684
    5. 'chars' → logprob: -4.068505764007568
    6. '#' → logprob: -4.193505764007568
    7. ' bits' → logprob: -4.193505764007568
    8. ')' → logprob: -4.443505764007568
    9. 'bit' → logprob: -4.568505764007568
    10. 'encoded' → logprob: -5.193505764007568

Token 512: 'TER' (ID: 6147)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.4844087362289429
    2. ')' → logprob: -1.6094087362289429
    3. '<|end|>' → logprob: -2.1094088554382324
    4. '#' → logprob: -2.8594088554382324
    5. ' =' → logprob: -2.9844088554382324
    6. '=' → logprob: -3.2344088554382324
    7. 'for' → logprob: -3.2344088554382324
    8. '.' → logprob: -3.4844088554382324
    9. ':' → logprob: -3.7344088554382324
    10. '"' → logprob: -3.8594088554382324

Token 513: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2802044451236725
    2. 'bits' → logprob: -2.6552045345306396
    3. 'decoded' → logprob: -2.6552045345306396
    4. 'char' → logprob: -3.7802045345306396
    5. '#' → logprob: -3.9052045345306396
    6. ')' → logprob: -4.4052042961120605
    7. 'chars' → logprob: -4.5302042961120605
    8. 'code' → logprob: -4.7802042961120605
    9. 'input' → logprob: -5.0302042961120605
    10. 'encoded' → logprob: -5.5302042961120605

Token 514: '   ' (ID: 271)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.6548299789428711
    2. 'char' → logprob: -1.779829978942871
    3. 'decoded' → logprob: -1.779829978942871
    4. '#' → logprob: -3.279829978942871
    5. 'bit' → logprob: -3.529829978942871
    6. 'chars' → logprob: -3.654829978942871
    7. 'encoded' → logprob: -4.654829978942871
    8. '   ' → logprob: -4.904829978942871
    9. ' bits' → logprob: -4.904829978942871
    10. 'input' → logprob: -5.029829978942871

Token 515: ' #' (ID: 1069)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.3875328004360199
    2. 'char' → logprob: -2.0125327110290527
    3. 'bit' → logprob: -3.0125327110290527
    4. 'decoded' → logprob: -3.2625327110290527
    5. '#' (adapté à ' #') → logprob: -3.3875327110290527
    6. 'chars' → logprob: -3.6375327110290527
    7. '   ' → logprob: -4.387532711029053
    8. 'code' → logprob: -5.137532711029053
    9. ' bits' → logprob: -5.262532711029053
    10. 'input' → logprob: -5.637532711029053

Token 516: ' The' (ID: 623)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.9151139855384827
    2. 'decoded' → logprob: -0.9151139855384827
    3. 'char' → logprob: -2.290113925933838
    4. 'bit' → logprob: -3.790113925933838
    5. '#' → logprob: -3.790113925933838
    6. 'chars' → logprob: -3.915113925933838
    7. '   ' → logprob: -4.040113925933838
    8. 'encoded' → logprob: -5.290113925933838
    9. 'code' → logprob: -6.415113925933838
    10. 'input' → logprob: -6.665113925933838

Token 517: ' sample' (ID: 10176)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.4215376675128937
    2. 'input' → logprob: -2.4215376377105713
    3. 'char' → logprob: -2.5465376377105713
    4. 'next' → logprob: -2.9215376377105713
    5. 'chars' → logprob: -3.5465376377105713
    6. 'for' → logprob: -3.7965376377105713
    7. 'code' → logprob: -4.04653787612915
    8. 'bits' → logprob: -4.29653787612915
    9. 'mapping' → logprob: -4.79653787612915
    10. ' next' → logprob: -4.92153787612915

Token 518: ' input' (ID: 3422)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -1.2100528478622437
    2. '=' → logprob: -1.5850528478622437
    3. 'chars' → logprob: -1.8350528478622437
    4. '#' → logprob: -2.835052967071533
    5. '_chars' → logprob: -2.835052967071533
    6. '_char' → logprob: -3.335052967071533
    7. ' =' → logprob: -3.710052967071533
    8. 'bits' → logprob: -3.835052967071533
    9. '=input' → logprob: -3.960052967071533
    10. 'input' → logprob: -4.210052967071533

Token 519: ' is' (ID: 382)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5358005166053772
    2. ' =' → logprob: -2.1608004570007324
    3. 'char' → logprob: -2.6608004570007324
    4. ')' → logprob: -3.1608004570007324
    5. '#' → logprob: -3.6608004570007324
    6. '   ' → logprob: -4.035800457000732
    7. ' is' → logprob: -4.160800457000732
    8. '<|end|>' → logprob: -4.160800457000732
    9. 'for' → logprob: -4.285800457000732
    10. 'ch' → logprob: -4.410800457000732

Token 520: ' a' (ID: 261)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -1.3007980585098267
    2. 'bits' → logprob: -1.5507980585098267
    3. '""' → logprob: -2.050797939300537
    4. '#' → logprob: -2.175797939300537
    5. 'for' → logprob: -3.425797939300537
    6. '"""' → logprob: -4.050797939300537
    7. '   ' → logprob: -4.175797939300537
    8. 'code' → logprob: -4.300797939300537
    9. ' line' → logprob: -4.425797939300537
    10. '")' → logprob: -4.425797939300537

Token 521: ' string' (ID: 1621)
  Prédit: 'string'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'string' → logprob: -0.33927997946739197
    2. 'sequence' → logprob: -2.339279890060425
    3. 'coded' → logprob: -2.589279890060425
    4. 'bit' → logprob: -3.339279890060425
    5. 'encoded' → logprob: -3.714279890060425
    6. ' string' → logprob: -3.714279890060425
    7. 'code' → logprob: -4.589280128479004
    8. 'line' → logprob: -5.464280128479004
    9. ' sequence' → logprob: -5.589280128479004
    10. 'single' → logprob: -6.214280128479004

Token 522: ' of' (ID: 328)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.9185392260551453
    2. '=' → logprob: -1.66853928565979
    3. '   ' → logprob: -2.16853928565979
    4. '<|end|>' → logprob: -3.29353928565979
    5. ')' → logprob: -3.41853928565979
    6. 'for' → logprob: -3.54353928565979
    7. ' for' → logprob: -3.66853928565979
    8. 'char' → logprob: -3.79353928565979
    9. 'def' → logprob: -4.043539047241211
    10. ':' → logprob: -4.043539047241211

Token 523: ' mixed' (ID: 16435)
  Prédit: 'characters'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'characters' → logprob: -0.6911599636077881
    2. 'encoded' → logprob: -1.441159963607788
    3. 'coded' → logprob: -2.066159963607788
    4. 'code' → logprob: -2.816159963607788
    5. 'symbols' → logprob: -3.566159963607788
    6. 'letters' → logprob: -3.566159963607788
    7. 'codes' → logprob: -5.191160202026367
    8. 'chars' → logprob: -6.066160202026367
    9. ' characters' → logprob: -6.441160202026367
    10. 'single' → logprob: -6.691160202026367

Token 524: ' characters' (ID: 9862)
  Prédit: 'characters'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'characters' → logprob: -1.0887023210525513
    2. 'for' → logprob: -2.0887022018432617
    3. 'chars' → logprob: -2.2137022018432617
    4. 'letters' → logprob: -2.3387022018432617
    5. 'tokens' → logprob: -2.8387022018432617
    6. 'encoded' → logprob: -2.8387022018432617
    7. 'codes' → logprob: -2.8387022018432617
    8. '#' → logprob: -3.4637022018432617
    9. 'code' → logprob: -3.5887022018432617
    10. 'bits' → logprob: -3.7137022018432617

Token 525: ' including' (ID: 3463)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2903677225112915
    2. 'char' → logprob: -2.790367603302002
    3. 'bits' → logprob: -2.790367603302002
    4. 'decoded' → logprob: -3.165367603302002
    5. '#' → logprob: -3.915367603302002
    6. ')' → logprob: -4.540367603302002
    7. 'chars' → logprob: -4.915367603302002
    8. 'for' → logprob: -5.165367603302002
    9. ' bits' → logprob: -5.290367603302002
    10. 'code' → logprob: -5.415367603302002

Token 526: ' letters' (ID: 18151)
  Prédit: 'ch'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ch' → logprob: -0.19863875210285187
    2. 'line' → logprob: -2.448638677597046
    3. ')' → logprob: -3.698638677597046
    4. '?' → logprob: -4.573638916015625
    5. ' ch' → logprob: -4.698638916015625
    6. '"' → logprob: -4.948638916015625
    7. 'code' → logprob: -5.073638916015625
    8. ''' → logprob: -5.073638916015625
    9. ' line' → logprob: -5.073638916015625
    10. '   ' → logprob: -5.948638916015625

Token 527: ' and' (ID: 326)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07403720170259476
    2. ')' → logprob: -4.449037075042725
    3. 'char' → logprob: -4.574037075042725
    4. '#' → logprob: -4.949037075042725
    5. 'for' → logprob: -4.949037075042725
    6. ' for' → logprob: -5.074037075042725
    7. '       ' → logprob: -5.574037075042725
    8. '=' → logprob: -5.824037075042725
    9. '<|end|>' → logprob: -5.949037075042725
    10. ' char' → logprob: -6.449037075042725

Token 528: ' punctuation' (ID: 107300)
  Prédit: 'symbols'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'symbols' → logprob: -0.22520840167999268
    2. 'special' → logprob: -2.475208282470703
    3. '"?' → logprob: -3.225208282470703
    4. '"' → logprob: -4.100208282470703
    5. 'pun' → logprob: -4.225208282470703
    6. '?' → logprob: -4.850208282470703
    7. '`' → logprob: -4.975208282470703
    8. 'characters' → logprob: -5.100208282470703
    9. ''?' → logprob: -5.225208282470703
    10. ' symbols' → logprob: -5.725208282470703

Token 529: ',
' (ID: 412)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2334935963153839
    2. 'bits' → logprob: -2.1084935665130615
    3. 'decoded' → logprob: -3.2334935665130615
    4. 'char' → logprob: -3.9834935665130615
    5. 'chars' → logprob: -4.983493804931641
    6. '#' → logprob: -5.358493804931641
    7. 'code' → logprob: -5.858493804931641
    8. ' bits' → logprob: -5.858493804931641
    9. 'input' → logprob: -5.983493804931641
    10. 'bit' → logprob: -6.483493804931641

Token 530: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01142951101064682
    2. '<|end|>' → logprob: -6.136429309844971
    3. ')' → logprob: -6.261429309844971
    4. ' for' → logprob: -6.386429309844971
    5. 'for' → logprob: -6.386429309844971
    6. '")' → logprob: -7.761429309844971
    7. '#' → logprob: -8.011429786682129
    8. '.' → logprob: -8.136429786682129
    9. 'tokens' → logprob: -8.386429786682129
    10. '"' → logprob: -8.386429786682129

Token 531: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.004388578701764345
    2. '<|end|>' → logprob: -6.629388809204102
    3. '#' (adapté à ' #') → logprob: -7.379388809204102
    4. ')' → logprob: -7.754388809204102
    5. 'for' → logprob: -8.004388809204102
    6. 'bits' → logprob: -8.379388809204102
    7. ' for' → logprob: -8.504388809204102
    8. 'tokens' → logprob: -8.754388809204102
    9. 'code' → logprob: -9.379388809204102
    10. 'chars' → logprob: -9.379388809204102

Token 532: ' but' (ID: 889)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.351448655128479
    2. 'bits' → logprob: -1.726448655128479
    3. '#' → logprob: -3.3514485359191895
    4. 'code' → logprob: -3.6014485359191895
    5. 'for' → logprob: -3.7264485359191895
    6. ' for' → logprob: -5.4764485359191895
    7. 'chars' → logprob: -5.4764485359191895
    8. ' bits' → logprob: -5.6014485359191895
    9. 'char' → logprob: -5.6014485359191895
    10. '"' → logprob: -5.8514485359191895

Token 533: ' letters' (ID: 18151)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.2883398532867432
    2. '   ' → logprob: -1.9133398532867432
    3. 'code' → logprob: -2.038339853286743
    4. 'bits' → logprob: -2.288339853286743
    5. 'for' → logprob: -3.038339853286743
    6. 'the' → logprob: -3.288339853286743
    7. 'chars' → logprob: -3.663339853286743
    8. 'line' → logprob: -3.788339853286743
    9. 'char' → logprob: -3.913339853286743
    10. '"' → logprob: -4.288339614868164

Token 534: ' of' (ID: 328)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 535: ' the' (ID: 290)
  Prédit: 'the'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'the' → logprob: -0.25575923919677734
    2. 'line' → logprob: -2.1307592391967773
    3. 'input' → logprob: -2.6307592391967773
    4. 'table' → logprob: -4.755759239196777
    5. 'each' → logprob: -5.005759239196777
    6. 'code' → logprob: -5.255759239196777
    7. ' the' → logprob: -5.255759239196777
    8. 'which' → logprob: -6.005759239196777
    9. ' line' → logprob: -6.630759239196777
    10. ' input' → logprob: -7.130759239196777

Token 536: ' input' (ID: 3422)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.5563883781433105
    2. 'table' → logprob: -2.1813883781433105
    3. 'input' → logprob: -2.3063883781433105
    4. '#' → logprob: -2.5563883781433105
    5. 'for' → logprob: -3.1813883781433105
    6. 'import' → logprob: -3.4313883781433105
    7. 'code' → logprob: -4.0563883781433105
    8. '"' → logprob: -5.0563883781433105
    9. '```' → logprob: -5.1813883781433105
    10. '
' → logprob: -5.5563883781433105

Token 537: ' are' (ID: 553)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5051414370536804
    2. '=' → logprob: -1.5051414966583252
    3. ' =' → logprob: -2.505141496658325
    4. ':' → logprob: -3.255141496658325
    5. '#' → logprob: -4.005141258239746
    6. 'for' → logprob: -5.255141258239746
    7. '[' → logprob: -6.255141258239746
    8. ' for' → logprob: -6.380141258239746
    9. 'char' → logprob: -6.505141258239746
    10. 'chars' → logprob: -6.630141258239746

Token 538: ' from' (ID: 591)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -1.422877311706543
    2. 'code' → logprob: -1.547877311706543
    3. 'for' → logprob: -2.047877311706543
    4. 'bits' → logprob: -2.422877311706543
    5. 'not' → logprob: -2.797877311706543
    6. '   ' → logprob: -3.047877311706543
    7. '""' → logprob: -3.297877311706543
    8. ')' → logprob: -3.547877311706543
    9. 'in' → logprob: -3.672877311706543
    10. ' in' → logprob: -4.172877311706543

Token 539: ' the' (ID: 290)
  Prédit: 'code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'code' → logprob: -0.5713163614273071
    2. 'table' → logprob: -1.4463163614273071
    3. '"' → logprob: -2.1963162422180176
    4. 'line' → logprob: -3.3213162422180176
    5. ''' → logprob: -3.8213162422180176
    6. '"P' → logprob: -4.571316242218018
    7. 'the' → logprob: -5.321316242218018
    8. '"A' → logprob: -6.071316242218018
    9. ''A' → logprob: -6.071316242218018
    10. ' table' → logprob: -6.571316242218018

Token 540: ' table' (ID: 3293)
  Prédit: 'table'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'table' → logprob: -0.8375245332717896
    2. 'for' → logprob: -1.0875245332717896
    3. 'code' → logprob: -2.5875244140625
    4. '"' → logprob: -3.0875244140625
    5. '   ' → logprob: -3.0875244140625
    6. 'import' → logprob: -4.5875244140625
    7. '#' → logprob: -5.0875244140625
    8. 'line' → logprob: -5.2125244140625
    9. 'char' → logprob: -5.3375244140625
    10. '```' → logprob: -5.4625244140625

Token 541: ' characters' (ID: 9862)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.058720462024211884
    2. 'decoded' → logprob: -3.308720350265503
    3. 'bits' → logprob: -4.808720588684082
    4. 'if' → logprob: -5.933720588684082
    5. 'char' → logprob: -6.308720588684082
    6. ')' → logprob: -6.683720588684082
    7. 'for' → logprob: -6.683720588684082
    8. 'chars' → logprob: -6.933720588684082
    9. 'encoded' → logprob: -7.433720588684082
    10. '#' → logprob: -7.433720588684082

Token 542: ' in' (ID: 306)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.18908733129501343
    2. 'char' → logprob: -3.064087390899658
    3. '   ' → logprob: -3.189087390899658
    4. 'decoded' → logprob: -3.314087390899658
    5. 'bit' → logprob: -3.814087390899658
    6. 'chars' → logprob: -4.189087390899658
    7. 'encoded' → logprob: -6.064087390899658
    8. 'code' → logprob: -6.314087390899658
    9. '#' → logprob: -6.439087390899658
    10. 'input' → logprob: -6.439087390899658

Token 543: ' the' (ID: 290)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.03946672007441521
    2. ' line' → logprob: -3.664466619491577
    3. '"' → logprob: -5.789466857910156
    4. '   ' → logprob: -6.164466857910156
    5. 'code' → logprob: -6.164466857910156
    6. 'for' → logprob: -6.164466857910156
    7. ')' → logprob: -7.414466857910156
    8. 'table' → logprob: -7.914466857910156
    9. '```' → logprob: -7.914466857910156
    10. '
' → logprob: -8.039466857910156

Token 544: ' description' (ID: 6496)
  Prédit: 'table'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'table' → logprob: -0.5589499473571777
    2. 'for' → logprob: -1.5589499473571777
    3. 'code' → logprob: -2.6839499473571777
    4. '"' → logprob: -3.0589499473571777
    5. 'line' → logprob: -3.1839499473571777
    6. ' table' → logprob: -3.8089499473571777
    7. '   ' → logprob: -5.058949947357178
    8. ' for' → logprob: -5.058949947357178
    9. ' line' → logprob: -5.058949947357178
    10. ')' → logprob: -6.058949947357178

Token 545: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6866822838783264
    2. 'decoded' → logprob: -1.6866822242736816
    3. 'char' → logprob: -2.0616822242736816
    4. 'bits' → logprob: -2.0616822242736816
    5. 'chars' → logprob: -4.061682224273682
    6. '#' → logprob: -4.686682224273682
    7. 'if' → logprob: -5.311682224273682
    8. 'code' → logprob: -5.436682224273682
    9. 'input' → logprob: -5.561682224273682
    10. 'bit' → logprob: -5.686682224273682

Token 546: '    
' (ID: 1944)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07301659882068634
    2. 'decoded' → logprob: -3.19801664352417
    3. 'char' → logprob: -4.57301664352417
    4. 'bits' → logprob: -5.19801664352417
    5. 'code' → logprob: -5.69801664352417
    6. '#' → logprob: -6.32301664352417
    7. 'for' → logprob: -6.57301664352417
    8. 'chars' → logprob: -7.07301664352417
    9. ')' → logprob: -7.19801664352417
    10. 'if' → logprob: -7.19801664352417

Token 547: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1084534153342247
    2. 'decoded' → logprob: -2.9834535121917725
    3. 'bits' → logprob: -3.2334535121917725
    4. '#' → logprob: -5.858453273773193
    5. 'chars' → logprob: -5.983453273773193
    6. 'char' → logprob: -6.233453273773193
    7. 'input' → logprob: -6.483453273773193
    8. 'code' → logprob: -6.858453273773193
    9. 'bit' → logprob: -7.608453273773193
    10. 'encoded' → logprob: -7.858453273773193

Token 548: ' #' (ID: 1069)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.42434418201446533
    2. '   ' → logprob: -1.5493441820144653
    3. 'char' → logprob: -3.299344062805176
    4. 'decoded' → logprob: -3.299344062805176
    5. 'chars' → logprob: -3.924344062805176
    6. 'bit' → logprob: -4.049344062805176
    7. '#' (adapté à ' #') → logprob: -4.549344062805176
    8. 'input' → logprob: -5.549344062805176
    9. 'code' → logprob: -6.049344062805176
    10. ' bits' → logprob: -6.799344062805176

Token 549: ' So' (ID: 2632)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.4345022439956665
    2. '   ' → logprob: -1.5595022439956665
    3. 'char' → logprob: -2.934502124786377
    4. 'decoded' → logprob: -2.934502124786377
    5. 'bit' → logprob: -4.434502124786377
    6. 'chars' → logprob: -4.684502124786377
    7. 'code' → logprob: -5.309502124786377
    8. 'for' → logprob: -6.184502124786377
    9. '#' → logprob: -6.434502124786377
    10. ' bits' → logprob: -6.684502124786377

Token 550: ' the' (ID: 290)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.1830933392047882
    2. 'bit' → logprob: -3.558093309402466
    3. '#' → logprob: -3.683093309402466
    4. 'decoded' → logprob: -3.683093309402466
    5. 'char' → logprob: -3.808093309402466
    6. '   ' → logprob: -3.933093309402466
    7. ' bits' → logprob: -4.183093547821045
    8. 'chars' → logprob: -4.433093547821045
    9. 'input' → logprob: -5.058093547821045
    10. 'code' → logprob: -5.558093547821045

Token 551: ' problem' (ID: 4792)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.04573596641421318
    2. 'bit' → logprob: -3.795736074447632
    3. '#' → logprob: -4.420735836029053
    4. 'decoded' → logprob: -5.545735836029053
    5. 'char' → logprob: -6.170735836029053
    6. ' bits' → logprob: -6.795735836029053
    7. 'code' → logprob: -7.045735836029053
    8. 'def' → logprob: -7.295735836029053
    9. 'chars' → logprob: -7.795735836029053
    10. 'input' → logprob: -7.920735836029053

Token 552: ' is' (ID: 382)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3055466115474701
    2. '=' → logprob: -2.555546522140503
    3. ' =' → logprob: -3.055546522140503
    4. 'chars' → logprob: -3.305546522140503
    5. ' is' → logprob: -3.680546522140503
    6. '#' → logprob: -4.305546760559082
    7. ':' → logprob: -4.430546760559082
    8. 'bits' → logprob: -4.555546760559082
    9. 'def' → logprob: -5.055546760559082
    10. 'is' → logprob: -5.180546760559082

Token 553: ' not' (ID: 625)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4136950969696045
    2. '#' → logprob: -2.2886950969696045
    3. 'bits' → logprob: -2.9136950969696045
    4. 'decoded' → logprob: -3.0386950969696045
    5. 'char' → logprob: -3.2886950969696045
    6. 'chars' → logprob: -3.5386950969696045
    7. 'input' → logprob: -3.9136950969696045
    8. 'code' → logprob: -4.038695335388184
    9. 'bit' → logprob: -5.788695335388184
    10. 'def' → logprob: -6.163695335388184

Token 554: ' to' (ID: 316)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.29739975929260254
    2. '#' → logprob: -2.2973997592926025
    3. ')' → logprob: -3.7973997592926025
    4. 'char' → logprob: -4.047399520874023
    5. 'not' → logprob: -4.047399520874023
    6. 'to' → logprob: -4.172399520874023
    7. 'for' → logprob: -4.672399520874023
    8. 'code' → logprob: -4.922399520874023
    9. 'chars' → logprob: -5.172399520874023
    10. 'input' → logprob: -5.422399520874023

Token 555: ' convert' (ID: 8452)
  Prédit: 'decode'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'decode' → logprob: -0.8475662469863892
    2. 'bits' → logprob: -1.2225662469863892
    3. '#' → logprob: -1.8475662469863892
    4. 'continue' → logprob: -3.5975661277770996
    5. 'char' → logprob: -4.3475661277771
    6. 'decoded' → logprob: -4.3475661277771
    7. 'for' → logprob: -4.9725661277771
    8. 'code' → logprob: -4.9725661277771
    9. 'chars' → logprob: -4.9725661277771
    10. 'input' → logprob: -5.2225661277771

Token 556: ' letters' (ID: 18151)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -1.178431510925293
    2. 'for' → logprob: -1.303431510925293
    3. 'ch' → logprob: -2.678431510925293
    4. '```' → logprob: -2.803431510925293
    5. 'line' → logprob: -2.928431510925293
    6. '   ' → logprob: -2.928431510925293
    7. '#' → logprob: -3.053431510925293
    8. 'char' → logprob: -3.428431510925293
    9. 'chars' → logprob: -3.678431510925293
    10. 'code' → logprob: -3.678431510925293

Token 557: ' into' (ID: 1511)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.5332536697387695
    2. '#' → logprob: -2.1582536697387695
    3. '   ' → logprob: -2.1582536697387695
    4. 'char' → logprob: -3.1582536697387695
    5. 'code' → logprob: -3.2832536697387695
    6. 'chars' → logprob: -4.0332536697387695
    7. 'decoded' → logprob: -4.1582536697387695
    8. 'bit' → logprob: -4.4082536697387695
    9. ')' → logprob: -4.7832536697387695
    10. 'encoded' → logprob: -5.0332536697387695

Token 558: ' bits' (ID: 18189)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.09190776199102402
    2. 'code' → logprob: -2.8419077396392822
    3. 'bit' → logprob: -4.341907978057861
    4. ' bits' → logprob: -5.341907978057861
    5. 'line' → logprob: -6.091907978057861
    6. '#' → logprob: -6.591907978057861
    7. 'chars' → logprob: -6.716907978057861
    8. '""' → logprob: -6.841907978057861
    9. '"' → logprob: -6.841907978057861
    10. 'char' → logprob: -6.966907978057861

Token 559: ' but' (ID: 889)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.20667284727096558
    2. 'decoded' → logprob: -2.3316729068756104
    3. '   ' → logprob: -2.9566729068756104
    4. 'bit' → logprob: -4.331672668457031
    5. 'char' → logprob: -4.581672668457031
    6. 'chars' → logprob: -5.456672668457031
    7. '#' → logprob: -6.081672668457031
    8. 'input' → logprob: -6.206672668457031
    9. ' bits' → logprob: -6.581672668457031
    10. 'code' → logprob: -6.706672668457031

Token 560: ' to' (ID: 316)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.1629091054201126
    2. 'to' → logprob: -2.5379090309143066
    3. 'bits' → logprob: -3.5379090309143066
    4. ' to' → logprob: -4.162909030914307
    5. '   ' → logprob: -4.287909030914307
    6. 'decoded' → logprob: -5.912909030914307
    7. 'chars' → logprob: -5.912909030914307
    8. 'input' → logprob: -6.037909030914307
    9. 'char' → logprob: -6.537909030914307
    10. 'pass' → logprob: -6.787909030914307

Token 561: ' convert' (ID: 8452)
  Prédit: 'decode'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'decode' → logprob: -0.02267344482243061
    2. ' decode' → logprob: -4.522673606872559
    3. '#' → logprob: -5.022673606872559
    4. 'bits' → logprob: -5.522673606872559
    5. 'convert' → logprob: -7.772673606872559
    6. 'extract' → logprob: -9.397673606872559
    7. 'continue' → logprob: -9.522673606872559
    8. 'read' → logprob: -9.647673606872559
    9. 'decoded' → logprob: -10.022673606872559
    10. 'translate' → logprob: -10.272673606872559

Token 562: ' input' (ID: 3422)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.9762359857559204
    2. 'bits' → logprob: -1.2262359857559204
    3. ' line' → logprob: -2.476235866546631
    4. 'ch' → logprob: -2.976235866546631
    5. 'input' → logprob: -2.976235866546631
    6. ' bits' → logprob: -3.101235866546631
    7. 'decoded' → logprob: -3.226235866546631
    8. '```' → logprob: -4.476235866546631
    9. 'code' → logprob: -4.601235866546631
    10. ' input' → logprob: -4.726235866546631

Token 563: ' characters' (ID: 9862)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.2810615301132202
    2. '_bits' → logprob: -2.4060616493225098
    3. 'char' → logprob: -2.9060616493225098
    4. 'chars' → logprob: -4.03106164932251
    5. '_to' → logprob: -4.28106164932251
    6. 'to' → logprob: -4.40606164932251
    7. 'decoded' → logprob: -4.65606164932251
    8. '   ' → logprob: -4.65606164932251
    9. 'ch' → logprob: -5.15606164932251
    10. ' =' → logprob: -5.40606164932251

Token 564: ' into' (ID: 1511)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.8281182050704956
    2. '   ' → logprob: -1.2031182050704956
    3. 'to' → logprob: -2.578118324279785
    4. '=' → logprob: -2.578118324279785
    5. ' =' → logprob: -3.578118324279785
    6. ':' → logprob: -3.578118324279785
    7. ' to' → logprob: -5.078118324279785
    8. '_to' → logprob: -5.328118324279785
    9. '_bits' → logprob: -5.453118324279785
    10. 'chars' → logprob: -5.578118324279785

Token 565: '
' (ID: 198)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.017643867060542107
    2. 'codes' → logprob: -5.017643928527832
    3. 'code' → logprob: -5.392643928527832
    4. 'bit' → logprob: -5.642643928527832
    5. '"' → logprob: -7.142643928527832
    6. ' bits' → logprob: -7.392643928527832
    7. 'their' → logprob: -8.267643928527832
    8. '#' → logprob: -8.767643928527832
    9. '""' → logprob: -9.017643928527832
    10. 'for' → logprob: -9.267643928527832

Token 566: '   ' (ID: 271)
  Prédit: 'code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'code' → logprob: -0.3200826644897461
    2. 'bits' → logprob: -2.070082664489746
    3. '"' → logprob: -3.195082664489746
    4. 'table' → logprob: -3.195082664489746
    5. ' code' → logprob: -3.570082664489746
    6. '""' → logprob: -4.320082664489746
    7. ' bits' → logprob: -5.570082664489746
    8. ''' → logprob: -5.945082664489746
    9. 'bit' → logprob: -5.945082664489746
    10. ' table' → logprob: -6.445082664489746

Token 567: ' #' (ID: 1069)
  Prédit: 'code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'code' → logprob: -0.40927621722221375
    2. '""' → logprob: -1.9092762470245361
    3. 'bits' → logprob: -2.284276247024536
    4. '"' → logprob: -3.159276247024536
    5. 'table' → logprob: -4.659276008605957
    6. '"""' → logprob: -4.909276008605957
    7. '''' → logprob: -5.159276008605957
    8. ' code' → logprob: -5.784276008605957
    9. '''.' → logprob: -6.159276008605957
    10. '```' → logprob: -6.159276008605957

Token 568: ' bits' (ID: 18189)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.29505279660224915
    2. 'codes' → logprob: -2.1700527667999268
    3. 'code' → logprob: -2.6700527667999268
    4. 'bit' → logprob: -3.5450527667999268
    5. '"' → logprob: -4.420053005218506
    6. '#' → logprob: -5.295053005218506
    7. 'table' → logprob: -5.545053005218506
    8. 'for' → logprob: -5.795053005218506
    9. 'decoded' → logprob: -5.795053005218506
    10. 'chars' → logprob: -5.920053005218506

Token 569: ' according' (ID: 7065)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.6882999539375305
    2. 'char' → logprob: -1.5632998943328857
    3. '   ' → logprob: -1.9382998943328857
    4. 'bit' → logprob: -3.0632998943328857
    5. 'chars' → logprob: -3.1882998943328857
    6. 'decoded' → logprob: -4.313300132751465
    7. 'input' → logprob: -4.438300132751465
    8. 'code' → logprob: -5.063300132751465
    9. 'encoded' → logprob: -5.313300132751465
    10. '#' → logprob: -5.313300132751465

Token 570: ' to' (ID: 316)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.36304035782814026
    2. 'to' → logprob: -2.2380404472351074
    3. 'for' → logprob: -2.7380404472351074
    4. ' to' → logprob: -3.3630404472351074
    5. '=' → logprob: -3.6130404472351074
    6. ' for' → logprob: -4.488040447235107
    7. ' =' → logprob: -4.488040447235107
    8. ':' → logprob: -4.488040447235107
    9. '_to' → logprob: -4.488040447235107
    10. 'bits' → logprob: -5.613040447235107

Token 571: ' a' (ID: 261)
  Prédit: 'table'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'table' → logprob: -0.6917665004730225
    2. 'code' → logprob: -1.5667665004730225
    3. 'char' → logprob: -1.9417665004730225
    4. '   ' → logprob: -3.1917665004730225
    5. 'ch' → logprob: -3.3167665004730225
    6. '"' → logprob: -4.066766738891602
    7. 'for' → logprob: -4.941766738891602
    8. 'bits' → logprob: -4.941766738891602
    9. '{
' → logprob: -5.066766738891602
    10. ' table' → logprob: -5.066766738891602

Token 572: ' code' (ID: 3490)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.48009684681892395
    2. 'code' → logprob: -2.3550968170166016
    3. 'mapping' → logprob: -2.3550968170166016
    4. '#' → logprob: -3.1050968170166016
    5. 'for' → logprob: -3.1050968170166016
    6. 'table' → logprob: -3.2300968170166016
    7. 'reverse' → logprob: -4.105096817016602
    8. '```' → logprob: -5.105096817016602
    9. '
' → logprob: -5.230096817016602
    10. 'lookup' → logprob: -5.230096817016602

Token 573: ' table' (ID: 3293)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.5100203156471252
    2. '   ' → logprob: -1.2600202560424805
    3. 'char' → logprob: -3.1350202560424805
    4. ' bits' → logprob: -4.0100202560424805
    5. 'decoded' → logprob: -4.2600202560424805
    6. 'chars' → logprob: -4.5100202560424805
    7. 'code' → logprob: -4.8850202560424805
    8. 'bit' → logprob: -5.1350202560424805
    9. '#' → logprob: -5.5100202560424805
    10. 'encoded' → logprob: -6.3850202560424805

Token 574: ',' (ID: 11)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.37726688385009766
    2. '   ' → logprob: -1.3772668838500977
    3. 'char' → logprob: -3.5022668838500977
    4. 'chars' → logprob: -4.752266883850098
    5. 'code' → logprob: -5.377266883850098
    6. 'bit' → logprob: -5.627266883850098
    7. 'for' → logprob: -5.627266883850098
    8. 'decoded' → logprob: -5.627266883850098
    9. '```' → logprob: -6.377266883850098
    10. ' bits' → logprob: -6.502266883850098

Token 575: ' then' (ID: 1815)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18965157866477966
    2. 'bits' → logprob: -1.814651608467102
    3. 'char' → logprob: -6.1896514892578125
    4. 'decoded' → logprob: -6.1896514892578125
    5. 'chars' → logprob: -6.4396514892578125
    6. ' bits' → logprob: -6.5646514892578125
    7. 'bit' → logprob: -7.3146514892578125
    8. '#' → logprob: -7.8146514892578125
    9. 'code' → logprob: -7.9396514892578125
    10. 'for' → logprob: -8.189651489257812

Token 576: ' split' (ID: 12648)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.03061448223888874
    2. 'bit' → logprob: -5.030614376068115
    3. '   ' → logprob: -5.155614376068115
    4. ' bits' → logprob: -5.280614376068115
    5. 'chars' → logprob: -5.780614376068115
    6. 'char' → logprob: -5.780614376068115
    7. 'decoded' → logprob: -6.030614376068115
    8. 'for' → logprob: -6.655614376068115
    9. '#' → logprob: -7.030614376068115
    10. 'input' → logprob: -7.155614376068115

Token 577: ' the' (ID: 290)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.7207416892051697
    2. '   ' → logprob: -0.9707416892051697
    3. 'for' → logprob: -3.5957417488098145
    4. 'code' → logprob: -3.8457417488098145
    5. ' bits' → logprob: -4.0957417488098145
    6. 'char' → logprob: -4.0957417488098145
    7. 'chars' → logprob: -4.2207417488098145
    8. 'decoded' → logprob: -5.0957417488098145
    9. ' for' → logprob: -5.2207417488098145
    10. 'bit' → logprob: -5.4707417488098145

Token 578: ' bits' (ID: 18189)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.4503415524959564
    2. 'line' → logprob: -2.2003414630889893
    3. 'code' → logprob: -2.9503414630889893
    4. ' bits' → logprob: -3.0753414630889893
    5. ' line' → logprob: -3.7003414630889893
    6. 'input' → logprob: -3.8253414630889893
    7. 'for' → logprob: -3.8253414630889893
    8. 'char' → logprob: -4.200341701507568
    9. 'ch' → logprob: -4.450341701507568
    10. '```' → logprob: -4.950341701507568

Token 579: ' into' (ID: 1511)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.008250725455582142
    2. 'bits' → logprob: -5.758250713348389
    3. ' bits' → logprob: -7.133250713348389
    4. 'chars' → logprob: -7.133250713348389
    5. 'char' → logprob: -7.258250713348389
    6. '#' → logprob: -7.633250713348389
    7. ')' → logprob: -8.258251190185547
    8. 'for' → logprob: -8.508251190185547
    9. 'input' → logprob: -8.508251190185547
    10. ' =' → logprob: -8.508251190185547

Token 580: ' codes' (ID: 17913)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.4435616433620453
    2. '""' → logprob: -1.5685616731643677
    3. '"' → logprob: -3.193561553955078
    4. 'code' → logprob: -3.943561553955078
    5. 'line' → logprob: -4.068561553955078
    6. 'decoded' → logprob: -4.068561553955078
    7. '```' → logprob: -4.318561553955078
    8. '"""' → logprob: -4.443561553955078
    9. '''' → logprob: -4.568561553955078
    10. 'bit' → logprob: -5.818561553955078

Token 581: ' according' (ID: 7065)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.20021870732307434
    2. '   ' → logprob: -2.075218677520752
    3. 'bit' → logprob: -4.075218677520752
    4. 'char' → logprob: -4.450218677520752
    5. 'chars' → logprob: -4.700218677520752
    6. ' bits' → logprob: -5.200218677520752
    7. 'decoded' → logprob: -5.200218677520752
    8. 'input' → logprob: -6.325218677520752
    9. '#' → logprob: -6.825218677520752
    10. 'code' → logprob: -6.950218677520752

Token 582: ' to' (ID: 316)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -1.0918558835983276
    2. ' =' → logprob: -1.2168558835983276
    3. '   ' → logprob: -1.4668558835983276
    4. ' +=' → logprob: -3.591856002807617
    5. ' to' → logprob: -3.716856002807617
    6. 'to' → logprob: -3.841856002807617
    7. '"' → logprob: -4.091856002807617
    8. ')' → logprob: -4.591856002807617
    9. '       ' → logprob: -5.216856002807617
    10. '_to' → logprob: -5.841856002807617

Token 583: ' the' (ID: 290)
  Prédit: 'ch'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ch' → logprob: -0.4540174901485443
    2. 'line' → logprob: -1.3290175199508667
    3. ' line' → logprob: -3.704017400741577
    4. ' ch' → logprob: -3.704017400741577
    5. '"' → logprob: -3.954017400741577
    6. 'code' → logprob: -4.829017639160156
    7. 'bits' → logprob: -5.454017639160156
    8. '<|end|>' → logprob: -5.954017639160156
    9. '""' → logprob: -6.204017639160156
    10. 'char' → logprob: -6.704017639160156

Token 584: ' code' (ID: 3490)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.4535369873046875
    2. 'code' → logprob: -1.5785369873046875
    3. '   ' → logprob: -2.0785369873046875
    4. 'char' → logprob: -2.4535369873046875
    5. '#' → logprob: -2.7035369873046875
    6. 'bits' → logprob: -3.2035369873046875
    7. 'table' → logprob: -3.2035369873046875
    8. 'input' → logprob: -3.3285369873046875
    9. 'codes' → logprob: -3.3285369873046875
    10. 'mapping' → logprob: -3.8285369873046875

Token 585: ' table' (ID: 3293)
  Prédit: '_to'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_to' → logprob: -1.2985221147537231
    2. '   ' → logprob: -1.4235221147537231
    3. ' =' → logprob: -1.6735221147537231
    4. '=' → logprob: -2.2985219955444336
    5. ' +=' → logprob: -2.5485219955444336
    6. '+=' → logprob: -3.0485219955444336
    7. 'for' → logprob: -4.048521995544434
    8. 'char' → logprob: -4.798521995544434
    9. '_chars' → logprob: -5.048521995544434
    10. '_char' → logprob: -5.423521995544434

Token 586: ',
' (ID: 412)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.21319828927516937
    2. '   ' → logprob: -2.838198184967041
    3. 'decoded' → logprob: -3.088198184967041
    4. 'bit' → logprob: -3.338198184967041
    5. 'char' → logprob: -4.088198184967041
    6. 'chars' → logprob: -4.213198184967041
    7. 'input' → logprob: -4.713198184967041
    8. 'encoded' → logprob: -6.213198184967041
    9. ' bits' → logprob: -6.213198184967041
    10. 'code' → logprob: -6.338198184967041

Token 587: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.338517963886261
    2. 'bits' → logprob: -1.7135179042816162
    3. ' bits' → logprob: -3.213517904281616
    4. 'decoded' → logprob: -3.838517904281616
    5. 'char' → logprob: -4.588518142700195
    6. 'chars' → logprob: -4.588518142700195
    7. '#' → logprob: -5.588518142700195
    8. 'input' → logprob: -5.588518142700195
    9. ')' → logprob: -5.963518142700195
    10. ' decoded' → logprob: -6.088518142700195

Token 588: ' #' (ID: 1069)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.9053155779838562
    2. '   ' → logprob: -1.030315637588501
    3. 'decoded' → logprob: -2.280315637588501
    4. 'code' → logprob: -3.530315637588501
    5. 'chars' → logprob: -3.780315637588501
    6. 'bit' → logprob: -3.905315637588501
    7. '#' (adapté à ' #') → logprob: -4.155315399169922
    8. ' bits' → logprob: -4.405315399169922
    9. 'char' → logprob: -4.655315399169922
    10. 'for' → logprob: -5.655315399169922

Token 589: ' then' (ID: 1815)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.756508469581604
    2. 'bits' → logprob: -1.381508469581604
    3. 'decoded' → logprob: -2.1315083503723145
    4. 'code' → logprob: -3.3815083503723145
    5. '#' → logprob: -3.7565083503723145
    6. 'char' → logprob: -4.1315083503723145
    7. 'chars' → logprob: -4.1315083503723145
    8. 'for' → logprob: -4.2565083503723145
    9. 'token' → logprob: -4.3815083503723145
    10. 'bit' → logprob: -4.7565083503723145

Token 590: ' output' (ID: 4733)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.175697684288025
    2. 'bits' → logprob: -1.175697684288025
    3. 'bit' → logprob: -1.800697684288025
    4. 'char' → logprob: -2.0506978034973145
    5. 'chars' → logprob: -3.3006978034973145
    6. 'decoded' → logprob: -4.3006978034973145
    7. 'code' → logprob: -4.6756978034973145
    8. 'input' → logprob: -4.8006978034973145
    9. 'codes' → logprob: -5.6756978034973145
    10. 'inv' → logprob: -5.9256978034973145

Token 591: ' the' (ID: 290)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.3578779101371765
    2. ' bits' → logprob: -1.7328779697418213
    3. '   ' → logprob: -2.4828779697418213
    4. 'decoded' → logprob: -4.357877731323242
    5. 'bit' → logprob: -4.857877731323242
    6. 'chars' → logprob: -5.732877731323242
    7. '#' → logprob: -5.732877731323242
    8. 'code' → logprob: -6.357877731323242
    9. ' bit' → logprob: -6.357877731323242
    10. 'char' → logprob: -6.482877731323242

Token 592: ' decoded' (ID: 58891)
  Prédit: 'decoded'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'decoded' → logprob: -0.1069120317697525
    2. '"' → logprob: -3.356912136077881
    3. ' decoded' → logprob: -3.856912136077881
    4. 'bits' → logprob: -4.481912136077881
    5. 'tokens' → logprob: -5.356912136077881
    6. 'chars' → logprob: -5.606912136077881
    7. '```' → logprob: -5.856912136077881
    8. 'char' → logprob: -5.981912136077881
    9. ')' → logprob: -6.106912136077881
    10. 'ch' → logprob: -6.106912136077881

Token 593: ' letters' (ID: 18151)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.03080539032816887
    2. '   ' → logprob: -4.655805587768555
    3. 'bit' → logprob: -4.780805587768555
    4. 'chars' → logprob: -5.655805587768555
    5. ' bits' → logprob: -5.780805587768555
    6. 'char' → logprob: -6.280805587768555
    7. 'decoded' → logprob: -6.780805587768555
    8. 'code' → logprob: -6.905805587768555
    9. '#' → logprob: -7.905805587768555
    10. '
' → logprob: -8.030805587768555

Token 594: '.
' (ID: 558)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.30245137214660645
    2. '   ' → logprob: -1.6774513721466064
    3. ' bits' → logprob: -3.6774513721466064
    4. 'bit' → logprob: -3.9274513721466064
    5. 'decoded' → logprob: -4.427451133728027
    6. 'char' → logprob: -5.302451133728027
    7. '#' → logprob: -5.302451133728027
    8. 'chars' → logprob: -5.802451133728027
    9. 'code' → logprob: -6.927451133728027
    10. ' bit' → logprob: -7.177451133728027

Token 595: '    
' (ID: 1944)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.06651515513658524
    2. '   ' → logprob: -3.3165152072906494
    3. 'decoded' → logprob: -4.19151496887207
    4. 'bit' → logprob: -4.56651496887207
    5. 'chars' → logprob: -6.81651496887207
    6. 'char' → logprob: -7.44151496887207
    7. ' bits' → logprob: -8.19151496887207
    8. 'code' → logprob: -8.81651496887207
    9. '#' → logprob: -9.44151496887207
    10. 'codes' → logprob: -9.69151496887207

Token 596: '   ' (ID: 271)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.3424743115901947
    2. '   ' → logprob: -1.717474341392517
    3. 'char' → logprob: -2.7174742221832275
    4. 'bit' → logprob: -4.092474460601807
    5. 'chars' → logprob: -4.092474460601807
    6. 'decoded' → logprob: -5.092474460601807
    7. ' bits' → logprob: -6.967474460601807
    8. 'input' → logprob: -7.092474460601807
    9. 'code' → logprob: -7.342474460601807
    10. 'ch' → logprob: -7.592474460601807

Token 597: ' #' (ID: 1069)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.29021236300468445
    2. '   ' → logprob: -1.4152123928070068
    3. 'bit' → logprob: -5.415212154388428
    4. ' bits' → logprob: -6.290212154388428
    5. 'decoded' → logprob: -6.415212154388428
    6. 'chars' → logprob: -8.290212631225586
    7. '#' (adapté à ' #') → logprob: -8.665212631225586
    8. '```' → logprob: -8.790212631225586
    9. '_bits' → logprob: -9.040212631225586
    10. 'code' → logprob: -9.290212631225586

Token 598: ' Since' (ID: 12265)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3436451256275177
    2. 'bits' → logprob: -1.3436450958251953
    3. ' bits' → logprob: -3.7186450958251953
    4. 'decoded' → logprob: -5.968645095825195
    5. 'bit' → logprob: -7.343645095825195
    6. 'chars' → logprob: -7.593645095825195
    7. '#' → logprob: -7.843645095825195
    8. 'code' → logprob: -8.218645095825195
    9. 'for' → logprob: -8.718645095825195
    10. ' bit' → logprob: -8.968645095825195

Token 599: ' we' (ID: 581)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.32789313793182373
    2. 'char' → logprob: -2.7028932571411133
    3. '#' → logprob: -3.2028932571411133
    4. 'bit' → logprob: -3.2028932571411133
    5. 'chars' → logprob: -3.4528932571411133
    6. 'code' → logprob: -3.8278932571411133
    7. '   ' → logprob: -3.8278932571411133
    8. ' bits' → logprob: -3.9528932571411133
    9. 'decoded' → logprob: -4.827893257141113
    10. 'input' → logprob: -5.327893257141113

Token 600: ' have' (ID: 679)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1678154617547989
    2. 'input' → logprob: -3.0428154468536377
    3. '#' → logprob: -3.1678154468536377
    4. 'char' → logprob: -3.9178154468536377
    5. 'code' → logprob: -4.792815685272217
    6. 'in' → logprob: -5.042815685272217
    7. 'bits' → logprob: -5.292815685272217
    8. 'chars' → logprob: -5.542815685272217
    9. 'for' → logprob: -5.667815685272217
    10. ' input' → logprob: -6.542815685272217

Token 601: ' no' (ID: 860)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.08144427090883255
    2. 'bits' → logprob: -3.581444263458252
    3. 'bit' → logprob: -4.456444263458252
    4. 'code' → logprob: -4.581444263458252
    5. '#' → logprob: -5.081444263458252
    6. 'chars' → logprob: -5.206444263458252
    7. 'ch' → logprob: -5.331444263458252
    8. 'input' → logprob: -5.456444263458252
    9. ' char' → logprob: -6.831444263458252
    10. 'table' → logprob: -6.831444263458252

Token 602: ' direct' (ID: 2823)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.15520884096622467
    2. '#' → logprob: -2.4052088260650635
    3. 'chars' → logprob: -4.155209064483643
    4. ' char' → logprob: -4.655209064483643
    5. 'ch' → logprob: -5.155209064483643
    6. 'code' → logprob: -5.280209064483643
    7. 'mapping' → logprob: -5.530209064483643
    8. 'input' → logprob: -6.030209064483643
    9. 'map' → logprob: -6.405209064483643
    10. 'table' → logprob: -6.530209064483643

Token 603: ' mapping' (ID: 22573)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.17593321204185486
    2. 'code' → logprob: -2.4259331226348877
    3. 'mapping' → logprob: -3.8009331226348877
    4. '#' → logprob: -4.925933361053467
    5. 'chars' → logprob: -5.175933361053467
    6. '   ' → logprob: -5.300933361053467
    7. 'map' → logprob: -5.425933361053467
    8. 'ch' → logprob: -5.675933361053467
    9. ' char' → logprob: -5.675933361053467
    10. 'table' → logprob: -6.050933361053467

Token 604: ' from' (ID: 591)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -1.24821138381958
    2. 'char' → logprob: -1.37321138381958
    3. '   ' → logprob: -1.74821138381958
    4. 'chars' → logprob: -2.87321138381958
    5. 'code' → logprob: -2.99821138381958
    6. 'decoded' → logprob: -3.12321138381958
    7. '#' → logprob: -3.24821138381958
    8. 'bit' → logprob: -4.37321138381958
    9. 'encoded' → logprob: -4.49821138381958
    10. ' bits' → logprob: -4.49821138381958

Token 605: ' input' (ID: 3422)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.7166900634765625
    2. 'ch' → logprob: -0.9666900634765625
    3. 'char' → logprob: -2.3416900634765625
    4. 'c' → logprob: -5.3416900634765625
    5. ' ch' → logprob: -5.4666900634765625
    6. 'bits' → logprob: -5.4666900634765625
    7. 'bit' → logprob: -5.5916900634765625
    8. ' line' → logprob: -5.5916900634765625
    9. 'input' → logprob: -5.5916900634765625
    10. 'code' → logprob: -5.7166900634765625

Token 606: ' characters' (ID: 9862)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9733613729476929
    2. 'char' → logprob: -1.4733613729476929
    3. 'bits' → logprob: -2.4733614921569824
    4. '_to' → logprob: -2.5983614921569824
    5. 'ch' → logprob: -3.2233614921569824
    6. 'chars' → logprob: -3.2233614921569824
    7. 'to' → logprob: -3.4733614921569824
    8. 'for' → logprob: -4.098361492156982
    9. '#' → logprob: -4.473361492156982
    10. ' to' → logprob: -4.723361492156982

Token 607: ' to' (ID: 316)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4715622663497925
    2. ':' → logprob: -2.096562385559082
    3. 'to' → logprob: -2.471562385559082
    4. ' =' → logprob: -3.221562385559082
    5. '=' → logprob: -3.471562385559082
    6. ' to' → logprob: -3.846562385559082
    7. '_to' → logprob: -3.846562385559082
    8. 'bits' → logprob: -3.971562385559082
    9. '#' → logprob: -5.096562385559082
    10. 'chars' → logprob: -5.221562385559082

Token 608: ' bit' (ID: 3546)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.8660068511962891
    2. 'code' → logprob: -1.366006851196289
    3. 'table' → logprob: -1.616006851196289
    4. 'bits' → logprob: -3.116006851196289
    5. 'bit' → logprob: -3.616006851196289
    6. 'ch' → logprob: -4.241006851196289
    7. 'line' → logprob: -4.491006851196289
    8. '#' → logprob: -4.866006851196289
    9. 'letter' → logprob: -5.991006851196289
    10. '"' → logprob: -6.241006851196289

Token 609: ' digits' (ID: 37806)
  Prédit: '_to'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_to' → logprob: -0.4766930341720581
    2. ' =' → logprob: -2.3516931533813477
    3. '=' → logprob: -2.8516931533813477
    4. 'to' → logprob: -2.9766931533813477
    5. ')' → logprob: -3.1016931533813477
    6. 'string' → logprob: -3.3516931533813477
    7. 'bits' → logprob: -3.8516931533813477
    8. 's' → logprob: -4.476693153381348
    9. '_string' → logprob: -4.726693153381348
    10. '_' → logprob: -4.976693153381348

Token 610: ',
' (ID: 412)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.30880382657051086
    2. 'bits' → logprob: -2.6838037967681885
    3. 'decoded' → logprob: -3.0588037967681885
    4. '#' → logprob: -3.3088037967681885
    5. 'code' → logprob: -3.9338037967681885
    6. ')' → logprob: -4.183804035186768
    7. 'char' → logprob: -4.308804035186768
    8. 'if' → logprob: -4.808804035186768
    9. 'for' → logprob: -4.808804035186768
    10. ' bits' → logprob: -4.808804035186768

Token 611: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0034519375767558813
    2. 'bits' → logprob: -7.003451824188232
    3. '#' → logprob: -7.628451824188232
    4. ' bits' → logprob: -7.753451824188232
    5. ')' → logprob: -8.62845230102539
    6. 'for' → logprob: -8.87845230102539
    7. 'decoded' → logprob: -8.87845230102539
    8. 'tokens' → logprob: -9.00345230102539
    9. 'code' → logprob: -9.25345230102539
    10. 'input' → logprob: -9.37845230102539

Token 612: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.27295729517936707
    2. 'bits' → logprob: -1.5229573249816895
    3. ' bits' → logprob: -4.7729573249816895
    4. 'decoded' → logprob: -5.5229573249816895
    5. 'code' → logprob: -6.7729573249816895
    6. '#' (adapté à ' #') → logprob: -6.8979573249816895
    7. 'for' → logprob: -7.0229573249816895
    8. 'char' → logprob: -7.0229573249816895
    9. 'chars' → logprob: -7.0229573249816895
    10. 'bit' → logprob: -7.1479573249816895

Token 613: ' the' (ID: 290)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.060654446482658386
    2. 'char' → logprob: -3.935654401779175
    3. '#' → logprob: -4.060654640197754
    4. 'bits' → logprob: -4.435654640197754
    5. 'chars' → logprob: -5.935654640197754
    6. 'code' → logprob: -6.685654640197754
    7. 'ch' → logprob: -6.810654640197754
    8. 'input' → logprob: -6.935654640197754
    9. 'mapping' → logprob: -6.935654640197754
    10. 'for' → logprob: -7.060654640197754

Token 614: ' problem' (ID: 4792)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.5682499408721924
    2. '#' → logprob: -2.0682499408721924
    3. 'bits' → logprob: -2.4432499408721924
    4. 'input' → logprob: -2.4432499408721924
    5. 'bit' → logprob: -2.8182499408721924
    6. 'inv' → logprob: -3.5682499408721924
    7. 'code' → logprob: -4.818249702453613
    8. 'inp' → logprob: -4.818249702453613
    9. 'mapping' → logprob: -5.068249702453613
    10. 'chars' → logprob: -5.443249702453613

Token 615: ' is' (ID: 382)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.08794935047626495
    2. '   ' → logprob: -3.462949275970459
    3. ' =' → logprob: -3.462949275970459
    4. '#' → logprob: -4.837949275970459
    5. ')' → logprob: -6.212949275970459
    6. ' is' → logprob: -6.462949275970459
    7. '+=' → logprob: -6.587949275970459
    8. '=input' → logprob: -6.962949275970459
    9. '=line' → logprob: -6.962949275970459
    10. '=
' → logprob: -7.462949275970459

Token 616: ' to' (ID: 316)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04945887252688408
    2. ')' → logprob: -4.174458980560303
    3. 'bits' → logprob: -5.549458980560303
    4. '"' → logprob: -5.674458980560303
    5. ' code' → logprob: -5.674458980560303
    6. '#' → logprob: -5.799458980560303
    7. 'code' → logprob: -6.174458980560303
    8. '")' → logprob: -6.424458980560303
    9. '""' → logprob: -6.924458980560303
    10. '    ' → logprob: -7.049458980560303

Token 617: ' build' (ID: 3024)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.6028464436531067
    2. 'bits' → logprob: -1.352846384048462
    3. 'input' → logprob: -2.352846384048462
    4. 'bit' → logprob: -3.352846384048462
    5. '#' → logprob: -3.602846384048462
    6. 'chars' → logprob: -4.602846622467041
    7. 'decoded' → logprob: -4.977846622467041
    8. 'decode' → logprob: -5.977846622467041
    9. '   ' → logprob: -5.977846622467041
    10. ' char' → logprob: -6.227846622467041

Token 618: ' the' (ID: 290)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.01275402121245861
    2. 'ch' → logprob: -4.762753963470459
    3. 'input' → logprob: -6.637753963470459
    4. 'chars' → logprob: -7.137753963470459
    5. 'mapping' → logprob: -7.637753963470459
    6. 'inp' → logprob: -7.762753963470459
    7. 'map' → logprob: -8.637754440307617
    8. '#' → logprob: -8.762754440307617
    9. ' char' → logprob: -8.887754440307617
    10. 'inv' → logprob: -9.137754440307617

Token 619: ' code' (ID: 3490)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.027900252491235733
    2. 'input' → logprob: -4.402900218963623
    3. 'ch' → logprob: -5.027900218963623
    4. '#' → logprob: -5.402900218963623
    5. 'inp' → logprob: -6.277900218963623
    6. 'mapping' → logprob: -7.152900218963623
    7. 'chars' → logprob: -7.402900218963623
    8. 'in' → logprob: -8.902900695800781
    9. 'inv' → logprob: -8.902900695800781
    10. 'code' → logprob: -9.402900695800781

Token 620: ' table' (ID: 3293)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.17548881471157074
    2. '_to' → logprob: -2.3004887104034424
    3. 'input' → logprob: -4.3004889488220215
    4. 'to' → logprob: -4.3004889488220215
    5. 'chars' → logprob: -5.0504889488220215
    6. '   ' → logprob: -5.4254889488220215
    7. 'map' → logprob: -5.8004889488220215
    8. '#' → logprob: -6.0504889488220215
    9. '_char' → logprob: -6.0504889488220215
    10. 'mapping' → logprob: -6.0504889488220215

Token 621: ' of' (ID: 328)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.30778953433036804
    2. 'char' → logprob: -1.9327895641326904
    3. '   ' → logprob: -3.0577895641326904
    4. 'chars' → logprob: -3.8077895641326904
    5. 'bit' → logprob: -4.057789325714111
    6. 'decoded' → logprob: -4.682789325714111
    7. 'input' → logprob: -5.307789325714111
    8. '#' → logprob: -5.432789325714111
    9. 'code' → logprob: -5.807789325714111
    10. 'ch' → logprob: -6.057789325714111

Token 622: ' "' (ID: 392)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.02929598279297352
    2. 'code' → logprob: -4.654295921325684
    3. 'input' → logprob: -5.529295921325684
    4. '{' → logprob: -5.904295921325684
    5. 'ch' → logprob: -6.154295921325684
    6. '{'' → logprob: -6.404295921325684
    7. 'chars' → logprob: -6.529295921325684
    8. 'token' → logprob: -6.529295921325684
    9. '{
' → logprob: -7.404295921325684
    10. '```' → logprob: -7.529295921325684

Token 623: 'input' (ID: 2586)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.08874247968196869
    2. 'code' → logprob: -3.96374249458313
    3. 'ch' → logprob: -4.088742256164551
    4. '{' → logprob: -4.463742256164551
    5. 'chars' → logprob: -4.963742256164551
    6. 'input' → logprob: -5.338742256164551
    7. '{
' → logprob: -5.838742256164551
    8. 'token' → logprob: -5.838742256164551
    9. 'table' → logprob: -5.963742256164551
    10. 'tokens' → logprob: -6.213742256164551

Token 624: ' char' (ID: 1826)
  Prédit: '_to'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_to' → logprob: -0.06386616826057434
    2. 'char' → logprob: -4.188866138458252
    3. '_chars' → logprob: -4.188866138458252
    4. '_char' → logprob: -5.063866138458252
    5. 'to' → logprob: -5.188866138458252
    6. '   ' → logprob: -5.563866138458252
    7. '_bits' → logprob: -5.938866138458252
    8. ')' → logprob: -6.188866138458252
    9. '_map' → logprob: -6.313866138458252
    10. ' =' → logprob: -6.313866138458252

Token 625: '"' (ID: 1)
  Prédit: '_to'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_to' → logprob: -0.4238089919090271
    2. '=' → logprob: -1.7988090515136719
    3. ' =' → logprob: -2.298809051513672
    4. 'to' → logprob: -3.173809051513672
    5. 's' → logprob: -4.798809051513672
    6. '_chars' → logprob: -4.798809051513672
    7. 'char' → logprob: -5.923809051513672
    8. '-to' → logprob: -6.298809051513672
    9. '_char' → logprob: -6.423809051513672
    10. ')' → logprob: -6.548809051513672

Token 626: ' to' (ID: 316)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4480544626712799
    2. 'bits' → logprob: -2.073054552078247
    3. 'input' → logprob: -2.573054552078247
    4. 'char' → logprob: -2.948054552078247
    5. '#' → logprob: -4.073054313659668
    6. 'code' → logprob: -4.073054313659668
    7. 'bit' → logprob: -4.198054313659668
    8. ' bits' → logprob: -4.573054313659668
    9. ')' → logprob: -4.823054313659668
    10. 'chars' → logprob: -4.948054313659668

Token 627: ' bits' (ID: 18189)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.8424667716026306
    2. 'bit' → logprob: -1.3424668312072754
    3. 'code' → logprob: -1.7174668312072754
    4. ' bits' → logprob: -2.9674668312072754
    5. ' code' → logprob: -3.5924668312072754
    6. 'char' → logprob: -3.7174668312072754
    7. 'str' → logprob: -4.967466831207275
    8. ' bit' → logprob: -4.967466831207275
    9. ' char' → logprob: -6.467466831207275
    10. '"' → logprob: -6.467466831207275

Token 628: '
    
' (ID: 15698)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.14915026724338531
    2. '   ' → logprob: -2.5241503715515137
    3. 'char' → logprob: -3.8991503715515137
    4. 'input' → logprob: -4.274150371551514
    5. 'chars' → logprob: -4.899150371551514
    6. 'bit' → logprob: -4.899150371551514
    7. '#' → logprob: -5.899150371551514
    8. ' bits' → logprob: -6.399150371551514
    9. 'decoded' → logprob: -6.649150371551514
    10. 'for' → logprob: -7.399150371551514

Token 629: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03819331154227257
    2. 'input' → logprob: -4.288193225860596
    3. 'char' → logprob: -4.663193225860596
    4. '#' → logprob: -5.538193225860596
    5. 'for' → logprob: -5.788193225860596
    6. '"' → logprob: -6.163193225860596
    7. 'ch' → logprob: -6.663193225860596
    8. 'code' → logprob: -7.038193225860596
    9. 'c' → logprob: -7.788193225860596
    10. ':' → logprob: -8.038193702697754

Token 630: ' #' (ID: 1069)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -1.0746374130249023
    2. '   ' → logprob: -1.1996374130249023
    3. 'char' → logprob: -1.6996374130249023
    4. 'input' → logprob: -2.1996374130249023
    5. '#' (adapté à ' #') → logprob: -3.6996374130249023
    6. 'bit' → logprob: -4.074637413024902
    7. 'code' → logprob: -5.449637413024902
    8. 'ch' → logprob: -5.824637413024902
    9. 'in' → logprob: -6.074637413024902
    10. 'chars' → logprob: -6.074637413024902

Token 631: ' Wait' (ID: 24305)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.47111499309539795
    2. 'char' → logprob: -1.971114993095398
    3. 'bits' → logprob: -2.0961151123046875
    4. 'input' → logprob: -2.8461151123046875
    5. '#' → logprob: -4.2211151123046875
    6. 'bit' → logprob: -4.3461151123046875
    7. 'chars' → logprob: -4.9711151123046875
    8. 'code' → logprob: -5.7211151123046875
    9. 'for' → logprob: -5.9711151123046875
    10. 'decoded' → logprob: -5.9711151123046875

Token 632: ',' (ID: 11)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.8719325661659241
    2. 'bits' → logprob: -1.2469325065612793
    3. '   ' → logprob: -1.9969325065612793
    4. 'input' → logprob: -2.3719325065612793
    5. '#' → logprob: -3.7469325065612793
    6. 'chars' → logprob: -4.121932506561279
    7. 'bit' → logprob: -4.996932506561279
    8. 'mapping' → logprob: -5.871932506561279
    9. 'inp' → logprob: -6.246932506561279
    10. 'ch' → logprob: -6.371932506561279

Token 633: ' from' (ID: 591)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7654571533203125
    2. 'bits' → logprob: -1.0154571533203125
    3. 'for' → logprob: -2.5154571533203125
    4. '#' → logprob: -3.6404571533203125
    5. ' for' → logprob: -4.6404571533203125
    6. 'code' → logprob: -4.6404571533203125
    7. ' bits' → logprob: -4.6404571533203125
    8. ')' → logprob: -5.0154571533203125
    9. 'input' → logprob: -5.7654571533203125
    10. 'char' → logprob: -5.8904571533203125

Token 634: ' the' (ID: 290)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.7477931976318359
    2. 'bits' → logprob: -1.247793197631836
    3. 'for' → logprob: -2.497793197631836
    4. 'code' → logprob: -3.372793197631836
    5. 'table' → logprob: -3.622793197631836
    6. 'bit' → logprob: -3.872793197631836
    7. '#' → logprob: -3.997793197631836
    8. 'input' → logprob: -4.122793197631836
    9. 'char' → logprob: -4.622793197631836
    10. '"' → logprob: -4.872793197631836

Token 635: ' problem' (ID: 4792)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -1.1008780002593994
    2. 'input' → logprob: -1.3508780002593994
    3. '#' → logprob: -2.4758780002593994
    4. 'bits' → logprob: -2.4758780002593994
    5. 'code' → logprob: -2.7258780002593994
    6. 'for' → logprob: -2.8508780002593994
    7. 'table' → logprob: -2.9758780002593994
    8. 'bit' → logprob: -3.8508780002593994
    9. 'line' → logprob: -4.72587776184082
    10. 'mapping' → logprob: -5.47587776184082

Token 636: ' statement' (ID: 9710)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4920056164264679
    2. 'bits' → logprob: -1.3670055866241455
    3. 'for' → logprob: -3.4920055866241455
    4. ' bits' → logprob: -3.7420055866241455
    5. '#' → logprob: -4.367005825042725
    6. ' for' → logprob: -4.742005825042725
    7. ')' → logprob: -4.867005825042725
    8. 'decoded' → logprob: -4.867005825042725
    9. 'code' → logprob: -4.992005825042725
    10. ':' → logprob: -5.117005825042725

Token 637: ',' (ID: 11)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.5261795520782471
    2. '   ' → logprob: -1.526179552078247
    3. 'for' → logprob: -3.026179552078247
    4. '#' → logprob: -3.776179552078247
    5. 'decoded' → logprob: -3.901179552078247
    6. ')' → logprob: -3.901179552078247
    7. 'code' → logprob: -4.401179313659668
    8. 'char' → logprob: -5.026179313659668
    9. ' bits' → logprob: -5.151179313659668
    10. 'bit' → logprob: -5.151179313659668

Token 638: ' it' (ID: 480)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.36106133460998535
    2. 'for' → logprob: -1.8610613346099854
    3. 'char' → logprob: -3.4860613346099854
    4. 'bits' → logprob: -3.4860613346099854
    5. '#' → logprob: -3.8610613346099854
    6. ' for' → logprob: -4.111061096191406
    7. 'input' → logprob: -4.111061096191406
    8. 'code' → logprob: -4.611061096191406
    9. 'chars' → logprob: -5.611061096191406
    10. 'decoded' → logprob: -5.861061096191406

Token 639: ' appears' (ID: 14518)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.06700726598501205
    2. ')' → logprob: -4.192007064819336
    3. 'in' → logprob: -4.692007064819336
    4. '#' → logprob: -4.817007064819336
    5. '+=' → logprob: -5.192007064819336
    6. 'for' → logprob: -5.442007064819336
    7. '.' → logprob: -5.567007064819336
    8. ' =' → logprob: -5.942007064819336
    9. '=line' → logprob: -6.192007064819336
    10. '<|end|>' → logprob: -6.442007064819336

Token 640: ' that' (ID: 484)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10693163424730301
    2. ')' → logprob: -3.606931686401367
    3. 'for' → logprob: -4.231931686401367
    4. ':' → logprob: -4.981931686401367
    5. '       ' → logprob: -5.106931686401367
    6. 'bits' → logprob: -5.106931686401367
    7. '#' → logprob: -5.231931686401367
    8. '    ' → logprob: -5.606931686401367
    9. '"' → logprob: -5.731931686401367
    10. '[line' → logprob: -5.856931686401367

Token 641: ' the' (ID: 290)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.7607129812240601
    2. 'char' → logprob: -2.5107131004333496
    3. 'input' → logprob: -2.6357131004333496
    4. 'for' → logprob: -2.6357131004333496
    5. 'code' → logprob: -2.7607131004333496
    6. '   ' → logprob: -3.0107131004333496
    7. 'bit' → logprob: -3.2607131004333496
    8. 'decoded' → logprob: -3.7607131004333496
    9. '#' → logprob: -4.01071310043335
    10. ' bits' → logprob: -4.26071310043335

Token 642: ' input' (ID: 3422)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.653660774230957
    2. 'for' → logprob: -1.528660774230957
    3. 'code' → logprob: -2.653660774230957
    4. 'input' → logprob: -3.028660774230957
    5. 'char' → logprob: -3.653660774230957
    6. '   ' → logprob: -4.028660774230957
    7. '#' → logprob: -4.278660774230957
    8. ' bits' → logprob: -4.403660774230957
    9. 'line' → logprob: -4.528660774230957
    10. 'if' → logprob: -4.653660774230957

Token 643: ' characters' (ID: 9862)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.023607295006513596
    2. '_bits' → logprob: -4.64860725402832
    3. '   ' → logprob: -5.27360725402832
    4. 'bit' → logprob: -5.89860725402832
    5. 'char' → logprob: -6.39860725402832
    6. 'chars' → logprob: -7.14860725402832
    7. 'input' → logprob: -7.52360725402832
    8. '#' → logprob: -7.52360725402832
    9. ' bits' → logprob: -7.52360725402832
    10. 'code' → logprob: -8.27360725402832

Token 644: ' are' (ID: 553)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.38344234228134155
    2. '+=' → logprob: -2.0084424018859863
    3. ':' → logprob: -2.5084424018859863
    4. ' =' → logprob: -3.8834424018859863
    5. 'for' → logprob: -4.008442401885986
    6. 'in' → logprob: -4.133442401885986
    7. '   ' → logprob: -4.258442401885986
    8. '):' → logprob: -5.383442401885986
    9. 'bits' → logprob: -5.758442401885986
    10. '="' → logprob: -6.133442401885986

Token 645: ' the' (ID: 290)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.49702325463294983
    2. 'bits' → logprob: -1.9970232248306274
    3. '""' → logprob: -2.497023344039917
    4. '   ' → logprob: -3.247023344039917
    5. 'for' → logprob: -3.247023344039917
    6. '{
' → logprob: -4.122023105621338
    7. '#' → logprob: -4.872023105621338
    8. '```' → logprob: -4.872023105621338
    9. '")' → logprob: -4.997023105621338
    10. 'code' → logprob: -4.997023105621338

Token 646: ' code' (ID: 3490)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.9369308352470398
    2. '"' → logprob: -1.5619308948516846
    3. '   ' → logprob: -2.3119308948516846
    4. 'bits' → logprob: -2.4369308948516846
    5. 'code' → logprob: -2.9369308948516846
    6. 'table' → logprob: -3.9369308948516846
    7. '#' → logprob: -4.1869306564331055
    8. '""' → logprob: -4.3119306564331055
    9. '")' → logprob: -4.3119306564331055
    10. ' for' → logprob: -4.6869306564331055

Token 647: ' characters' (ID: 9862)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.24662049114704132
    2. 'for' → logprob: -2.6216204166412354
    3. 'bits' → logprob: -2.8716204166412354
    4. 'char' → logprob: -3.8716204166412354
    5. 'code' → logprob: -4.7466206550598145
    6. 'ch' → logprob: -4.8716206550598145
    7. '#' → logprob: -4.8716206550598145
    8. ' for' → logprob: -5.1216206550598145
    9. '```' → logprob: -5.1216206550598145
    10. 'decoded' → logprob: -5.1216206550598145

Token 648: ':
' (ID: 734)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.49904966354370117
    2. 'bits' → logprob: -0.9990496635437012
    3. ' bits' → logprob: -4.874049663543701
    4. 'chars' → logprob: -5.624049663543701
    5. 'decoded' → logprob: -5.999049663543701
    6. ')' → logprob: -6.124049663543701
    7. 'char' → logprob: -6.624049663543701
    8. 'code' → logprob: -6.624049663543701
    9. '#' → logprob: -6.749049663543701
    10. 'bit' → logprob: -6.874049663543701

Token 649: '   ' (ID: 271)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.3959324061870575
    2. '   ' → logprob: -1.1459324359893799
    3. ' bits' → logprob: -5.895932197570801
    4. '```' → logprob: -6.645932197570801
    5. 'code' → logprob: -7.020932197570801
    6. '#' → logprob: -7.145932197570801
    7. 'chars' → logprob: -7.270932197570801
    8. 'bit' → logprob: -7.395932197570801
    9. 'for' → logprob: -7.645932197570801
    10. ')' → logprob: -8.0209321975708

Token 650: ' #' (ID: 1069)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.6964724659919739
    2. '   ' → logprob: -0.8214724659919739
    3. 'for' → logprob: -3.571472406387329
    4. 'code' → logprob: -4.696472644805908
    5. 'chars' → logprob: -5.571472644805908
    6. '```' → logprob: -5.571472644805908
    7. 'decoded' → logprob: -5.821472644805908
    8. 'char' → logprob: -5.946472644805908
    9. '#' (adapté à ' #') → logprob: -6.071472644805908
    10. ')' → logprob: -6.821472644805908

Token 651: ' "' (ID: 392)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.04028311371803284
    2. 'bit' → logprob: -4.415283203125
    3. '   ' → logprob: -4.540283203125
    4. 'for' → logprob: -4.915283203125
    5. 'code' → logprob: -6.290283203125
    6. 'chars' → logprob: -6.290283203125
    7. 'decoded' → logprob: -6.415283203125
    8. ' bits' → logprob: -6.665283203125
    9. 'char' → logprob: -6.790283203125
    10. '```' → logprob: -7.790283203125

Token 652: '111' (ID: 8780)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.35803624987602234
    2. 'char' → logprob: -1.9830362796783447
    3. 'bit' → logprob: -2.4830362796783447
    4. 'code' → logprob: -3.9830362796783447
    5. 'chars' → logprob: -4.108036041259766
    6. 'for' → logprob: -4.608036041259766
    7. 'input' → logprob: -4.608036041259766
    8. '#' → logprob: -5.108036041259766
    9. '   ' → logprob: -5.483036041259766
    10. 'codes' → logprob: -5.983036041259766

Token 653: '11' (ID: 994)
  Prédit: '01'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '01' → logprob: -0.9095489978790283
    2. '")' → logprob: -1.1595489978790283
    3. '"' → logprob: -2.9095489978790283
    4. ' =' → logprob: -2.9095489978790283
    5. 'for' → logprob: -3.4095489978790283
    6. ')' → logprob: -3.9095489978790283
    7. ' +=' → logprob: -4.159548759460449
    8. '   ' → logprob: -4.159548759460449
    9. '=' → logprob: -4.659548759460449
    10. 'bits' → logprob: -4.909548759460449

Token 654: ' ' (ID: 220)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.10150325298309326
    2. 'code' → logprob: -3.976503372192383
    3. 'bit' → logprob: -4.101503372192383
    4. 'for' → logprob: -4.101503372192383
    5. 'input' → logprob: -4.476503372192383
    6. 'char' → logprob: -5.101503372192383
    7. '   ' → logprob: -5.476503372192383
    8. 'chars' → logprob: -5.601503372192383
    9. ' bits' → logprob: -5.726503372192383
    10. 'line' → logprob: -5.851503372192383

Token 655: '000' (ID: 1302)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.6474734544754028
    2. 'for' → logprob: -1.3974734544754028
    3. 'bits' → logprob: -3.2724733352661133
    4. '   ' → logprob: -3.8974733352661133
    5. '=' → logprob: -4.022473335266113
    6. ')' → logprob: -4.397473335266113
    7. '")' → logprob: -4.397473335266113
    8. '"' → logprob: -4.397473335266113
    9. 'code' → logprob: -4.772473335266113
    10. '#' → logprob: -4.772473335266113

Token 656: '11' (ID: 994)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.7419224977493286
    2. ' =' → logprob: -1.6169224977493286
    3. 'bits' → logprob: -2.491922378540039
    4. '+=' → logprob: -3.491922378540039
    5. 'chars' → logprob: -3.616922378540039
    6. ')' → logprob: -4.241922378540039
    7. '_to' → logprob: -4.241922378540039
    8. '_bits' → logprob: -4.366922378540039
    9. '```' → logprob: -4.491922378540039
    10. 'for' → logprob: -4.491922378540039

Token 657: ' ' (ID: 220)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.2788419723510742
    2. ':' → logprob: -1.9038419723510742
    3. 'bits' → logprob: -2.153841972351074
    4. '"' → logprob: -2.653841972351074
    5. 'for' → logprob: -2.653841972351074
    6. '=' → logprob: -3.528841972351074
    7. '")' → logprob: -3.778841972351074
    8. '#' → logprob: -3.903841972351074
    9. 'decoded' → logprob: -3.903841972351074
    10. ' =' → logprob: -4.028841972351074

Token 658: '111' (ID: 8780)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.7223460674285889
    2. 'bits' → logprob: -1.2223460674285889
    3. '   ' → logprob: -2.347346067428589
    4. 'code' → logprob: -3.972346067428589
    5. 'ch' → logprob: -4.097346305847168
    6. '"' → logprob: -4.222346305847168
    7. '""' → logprob: -4.847346305847168
    8. '''.' → logprob: -4.972346305847168
    9. 'decoded' → logprob: -5.097346305847168
    10. ' for' → logprob: -5.097346305847168

Token 659: '01' (ID: 2290)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.22315408289432526
    2. '=' → logprob: -2.973154067993164
    3. 'bits' → logprob: -3.598154067993164
    4. '   ' → logprob: -4.098154067993164
    5. '+=' → logprob: -4.098154067993164
    6. ' =' → logprob: -4.473154067993164
    7. ' for' → logprob: -4.723154067993164
    8. 'ch' → logprob: -4.848154067993164
    9. ')' → logprob: -4.848154067993164
    10. '#' → logprob: -4.848154067993164

Token 660: ' ' (ID: 220)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.02354290522634983
    2. ' bits' → logprob: -5.148542881011963
    3. 'bit' → logprob: -5.273542881011963
    4. '   ' → logprob: -5.398542881011963
    5. 'chars' → logprob: -5.523542881011963
    6. 'decoded' → logprob: -6.773542881011963
    7. 'char' → logprob: -7.523542881011963
    8. '#' → logprob: -7.523542881011963
    9. 'code' → logprob: -7.648542881011963
    10. 'input' → logprob: -8.273543357849121

Token 661: '000' (ID: 1302)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.026069780811667442
    2. 'bit' → logprob: -5.276069641113281
    3. 'chars' → logprob: -5.401069641113281
    4. 'char' → logprob: -5.776069641113281
    5. 'input' → logprob: -5.901069641113281
    6. 'decoded' → logprob: -5.901069641113281
    7. 'for' → logprob: -6.026069641113281
    8. 'code' → logprob: -6.651069641113281
    9. '#' → logprob: -7.151069641113281
    10. ' bits' → logprob: -7.276069641113281

Token 662: '10' (ID: 702)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.5112600326538086
    2. '01' → logprob: -1.5112600326538086
    3. ')' → logprob: -2.0112600326538086
    4. '"' → logprob: -2.3862600326538086
    5. '11' → logprob: -2.8862600326538086
    6. 'chars' → logprob: -3.2612600326538086
    7. ' =' → logprob: -3.6362600326538086
    8. '
' → logprob: -3.8862600326538086
    9. '111' → logprob: -4.011260032653809
    10. '#' → logprob: -4.011260032653809

Token 663: ' ..."' (ID: 119163)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.217660591006279
    2. 'char' → logprob: -2.467660665512085
    3. 'bit' → logprob: -3.592660665512085
    4. 'input' → logprob: -3.842660665512085
    5. 'chars' → logprob: -4.092660427093506
    6. 'decoded' → logprob: -4.342660427093506
    7. ' bits' → logprob: -4.592660427093506
    8. 'code' → logprob: -4.717660427093506
    9. '#' → logprob: -5.717660427093506
    10. '   ' → logprob: -6.717660427093506

Token 664: ' is' (ID: 382)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.018887996673583984
    2. 'bit' → logprob: -5.018887996673584
    3. 'decoded' → logprob: -5.143887996673584
    4. 'char' → logprob: -6.393887996673584
    5. 'chars' → logprob: -6.643887996673584
    6. 'input' → logprob: -6.768887996673584
    7. '#' → logprob: -7.268887996673584
    8. ' bits' → logprob: -7.393887996673584
    9. '   ' → logprob: -8.393888473510742
    10. 'code' → logprob: -9.268888473510742

Token 665: ' a' (ID: 261)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.5017339587211609
    2. '   ' → logprob: -2.6267340183258057
    3. '"' → logprob: -2.7517340183258057
    4. 'code' → logprob: -3.3767340183258057
    5. ')' → logprob: -3.5017340183258057
    6. '#' → logprob: -3.6267340183258057
    7. ' bits' → logprob: -3.6267340183258057
    8. 'for' → logprob: -3.8767340183258057
    9. '""' → logprob: -4.001733779907227
    10. 'decoded' → logprob: -4.001733779907227

Token 666: ' code' (ID: 3490)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -1.6251723766326904
    2. '"' → logprob: -1.7501723766326904
    3. 'code' → logprob: -2.2501723766326904
    4. '#' → logprob: -2.3751723766326904
    5. '{' → logprob: -2.3751723766326904
    6. '""' → logprob: -2.7501723766326904
    7. '{
' → logprob: -2.7501723766326904
    8. 'char' → logprob: -2.8751723766326904
    9. 'for' → logprob: -3.3751723766326904
    10. 'bit' → logprob: -3.7501723766326904

Token 667: ' table' (ID: 3293)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.01135277934372425
    2. 'bit' → logprob: -4.761353015899658
    3. 'chars' → logprob: -7.136353015899658
    4. 'decoded' → logprob: -7.386353015899658
    5. 'char' → logprob: -7.761353015899658
    6. '#' → logprob: -8.1363525390625
    7. 'input' → logprob: -8.5113525390625
    8. '   ' → logprob: -9.0113525390625
    9. ' bits' → logprob: -9.1363525390625
    10. 'code' → logprob: -10.0113525390625

Token 668: '
' (ID: 198)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.2239915132522583
    2. 'input' → logprob: -2.4739913940429688
    3. 'bits' → logprob: -2.7239913940429688
    4. '   ' → logprob: -4.098991394042969
    5. 'chars' → logprob: -4.598991394042969
    6. 'bit' → logprob: -4.848991394042969
    7. '#' → logprob: -5.973991394042969
    8. 'in' → logprob: -6.223991394042969
    9. 'inp' → logprob: -6.223991394042969
    10. 'decoded' → logprob: -6.223991394042969

Token 669: '   ' (ID: 271)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.41004231572151184
    2. '   ' → logprob: -1.9100422859191895
    3. 'decoded' → logprob: -2.6600422859191895
    4. 'char' → logprob: -2.9100422859191895
    5. 'chars' → logprob: -3.6600422859191895
    6. 'input' → logprob: -4.2850422859191895
    7. ' bits' → logprob: -5.0350422859191895
    8. '#' → logprob: -5.5350422859191895
    9. 'bit' → logprob: -5.7850422859191895
    10. 'code' → logprob: -5.7850422859191895

Token 670: ' #' (ID: 1069)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.06963982433080673
    2. 'input' → logprob: -4.444639682769775
    3. 'chars' → logprob: -4.444639682769775
    4. 'char' → logprob: -4.444639682769775
    5. 'decoded' → logprob: -4.444639682769775
    6. '   ' → logprob: -4.819639682769775
    7. 'bit' → logprob: -4.819639682769775
    8. ' bits' → logprob: -6.444639682769775
    9. 'code' → logprob: -7.694639682769775
    10. 'inp' → logprob: -7.694639682769775

Token 671: ' The' (ID: 623)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.13374993205070496
    2. '   ' → logprob: -2.6337499618530273
    3. 'char' → logprob: -4.133749961853027
    4. 'chars' → logprob: -4.633749961853027
    5. 'decoded' → logprob: -4.633749961853027
    6. 'bit' → logprob: -4.758749961853027
    7. 'input' → logprob: -6.133749961853027
    8. '```' → logprob: -6.133749961853027
    9. ' bits' → logprob: -6.633749961853027
    10. '#' → logprob: -6.883749961853027

Token 672: ' input' (ID: 3422)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.1856774538755417
    2. 'char' → logprob: -2.3106775283813477
    3. 'bit' → logprob: -3.0606775283813477
    4. '#' → logprob: -4.810677528381348
    5. 'input' → logprob: -4.935677528381348
    6. 'code' → logprob: -5.685677528381348
    7. 'inv' → logprob: -6.435677528381348
    8. 'chars' → logprob: -6.935677528381348
    9. 'ch' → logprob: -7.435677528381348
    10. 'mapping' → logprob: -8.185677528381348

Token 673: ' lines' (ID: 8698)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.015385880134999752
    2. 'bit' → logprob: -5.14038610458374
    3. 'char' → logprob: -5.89038610458374
    4. 'chars' → logprob: -6.14038610458374
    5. '#' → logprob: -7.01538610458374
    6. ' bits' → logprob: -7.01538610458374
    7. 'decoded' → logprob: -7.01538610458374
    8. 'input' → logprob: -7.76538610458374
    9. '   ' → logprob: -7.89038610458374
    10. 'code' → logprob: -8.015385627746582

Token 674: ' are' (ID: 553)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.006485623307526112
    2. 'bit' → logprob: -5.756485462188721
    3. 'decoded' → logprob: -7.006485462188721
    4. 'chars' → logprob: -7.381485462188721
    5. 'char' → logprob: -7.506485462188721
    6. ' bits' → logprob: -7.756485462188721
    7. '   ' → logprob: -8.506485939025879
    8. 'input' → logprob: -8.756485939025879
    9. 'for' → logprob: -9.131485939025879
    10. '#' → logprob: -9.506485939025879

Token 675: ' strings' (ID: 18279)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.10680694878101349
    2. 'char' → logprob: -3.481806993484497
    3. 'chars' → logprob: -4.231806755065918
    4. 'input' → logprob: -4.481806755065918
    5. 'bit' → logprob: -4.731806755065918
    6. 'code' → logprob: -4.731806755065918
    7. 'for' → logprob: -4.981806755065918
    8. 'decoded' → logprob: -5.356806755065918
    9. '   ' → logprob: -5.856806755065918
    10. ' bits' → logprob: -5.981806755065918

Token 676: ' that' (ID: 484)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.10038360953330994
    2. '   ' → logprob: -3.3503835201263428
    3. 'char' → logprob: -3.7253835201263428
    4. 'chars' → logprob: -4.600383758544922
    5. 'bit' → logprob: -4.725383758544922
    6. 'input' → logprob: -5.600383758544922
    7. 'for' → logprob: -5.600383758544922
    8. 'decoded' → logprob: -5.725383758544922
    9. ' bits' → logprob: -6.100383758544922
    10. 'code' → logprob: -6.600383758544922

Token 677: ' encode' (ID: 31288)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.6471354961395264
    2. 'for' → logprob: -1.0221354961395264
    3. '=' → logprob: -3.3971354961395264
    4. 'decoded' → logprob: -4.3971357345581055
    5. '#' → logprob: -4.6471357345581055
    6. 'chars' → logprob: -4.7721357345581055
    7. 'input' → logprob: -4.7721357345581055
    8. '_bits' → logprob: -5.0221357345581055
    9. 'bit' → logprob: -5.2721357345581055
    10. ' for' → logprob: -5.3971357345581055

Token 678: ' letters' (ID: 18151)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.03650480508804321
    2. 'bit' → logprob: -3.9115047454833984
    3. 'chars' → logprob: -5.286504745483398
    4. 'decoded' → logprob: -5.536504745483398
    5. 'char' → logprob: -5.786504745483398
    6. '   ' → logprob: -7.161504745483398
    7. ' bits' → logprob: -7.161504745483398
    8. 'input' → logprob: -7.286504745483398
    9. '#' → logprob: -7.536504745483398
    10. 'code' → logprob: -8.286504745483398

Token 679: ' to' (ID: 316)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.5309314727783203
    2. 'decoded' → logprob: -1.0309314727783203
    3. 'bit' → logprob: -3.2809314727783203
    4. '   ' → logprob: -5.28093147277832
    5. '#' → logprob: -5.40593147277832
    6. ' bits' → logprob: -6.53093147277832
    7. 'chars' → logprob: -6.65593147277832
    8. 'code' → logprob: -7.03093147277832
    9. 'char' → logprob: -7.03093147277832
    10. 'input' → logprob: -7.28093147277832

Token 680: ' code' (ID: 3490)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.1834130883216858
    2. 'bit' → logprob: -2.808413028717041
    3. 'input' → logprob: -3.558413028717041
    4. 'for' → logprob: -4.058413028717041
    5. 'char' → logprob: -4.433413028717041
    6. 'chars' → logprob: -4.433413028717041
    7. 'decoded' → logprob: -4.683413028717041
    8. ' bits' → logprob: -4.808413028717041
    9. 'code' → logprob: -4.933413028717041
    10. '""' → logprob: -6.183413028717041

Token 681: ',' (ID: 11)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.05457913875579834
    2. '   ' → logprob: -4.054579257965088
    3. 'bit' → logprob: -4.054579257965088
    4. 'decoded' → logprob: -5.054579257965088
    5. 'char' → logprob: -5.554579257965088
    6. 'chars' → logprob: -6.054579257965088
    7. ' bits' → logprob: -6.179579257965088
    8. '#' → logprob: -6.429579257965088
    9. 'input' → logprob: -7.429579257965088
    10. 'code' → logprob: -7.429579257965088

Token 682: ' but' (ID: 889)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.023305809125304222
    2. 'bit' → logprob: -4.648305892944336
    3. 'decoded' → logprob: -5.398305892944336
    4. 'char' → logprob: -5.648305892944336
    5. 'chars' → logprob: -6.273305892944336
    6. '   ' → logprob: -6.648305892944336
    7. '#' → logprob: -7.023305892944336
    8. 'input' → logprob: -7.148305892944336
    9. ' bits' → logprob: -8.898305892944336
    10. 'inv' → logprob: -9.023305892944336

Token 683: ' encoded' (ID: 41096)
  Prédit: 'decoded'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'decoded' → logprob: -0.351732075214386
    2. 'bits' → logprob: -1.8517320156097412
    3. '   ' → logprob: -3.851732015609741
    4. ' decoded' → logprob: -4.10173225402832
    5. 'bit' → logprob: -4.22673225402832
    6. 'code' → logprob: -4.47673225402832
    7. ' bits' → logprob: -4.60173225402832
    8. '#' → logprob: -4.60173225402832
    9. 'encoded' → logprob: -4.72673225402832
    10. 'chars' → logprob: -5.10173225402832

Token 684: ' with' (ID: 483)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.4257392883300781
    2. 'decoded' → logprob: -1.5507392883300781
    3. 'bit' → logprob: -2.550739288330078
    4. '#' → logprob: -4.050739288330078
    5. '   ' → logprob: -4.425739288330078
    6. 'char' → logprob: -4.800739288330078
    7. 'code' → logprob: -5.550739288330078
    8. 'chars' → logprob: -5.550739288330078
    9. ' bits' → logprob: -5.675739288330078
    10. 'input' → logprob: -6.925739288330078

Token 685: ' a' (ID: 261)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.1202012300491333
    2. 'bits' → logprob: -1.1202012300491333
    3. 'line' → logprob: -2.4952011108398438
    4. 'code' → logprob: -2.7452011108398438
    5. '"' → logprob: -2.9952011108398438
    6. 'char' → logprob: -3.9952011108398438
    7. 'table' → logprob: -3.9952011108398438
    8. 'chars' → logprob: -4.245201110839844
    9. '{
' → logprob: -4.370201110839844
    10. 'input' → logprob: -4.495201110839844

Token 686: ' code' (ID: 3490)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -1.440034031867981
    2. 'for' → logprob: -1.940034031867981
    3. 'bits' → logprob: -1.940034031867981
    4. 'code' → logprob: -2.0650339126586914
    5. '{
' → logprob: -2.4400339126586914
    6. 'bit' → logprob: -2.6900339126586914
    7. 'table' → logprob: -3.4400339126586914
    8. 'input' → logprob: -3.5650339126586914
    9. 'chars' → logprob: -3.5650339126586914
    10. 'mapping' → logprob: -3.5650339126586914

Token 687: ' table' (ID: 3293)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.16955122351646423
    2. 'bit' → logprob: -2.919551134109497
    3. 'char' → logprob: -3.044551134109497
    4. 'decoded' → logprob: -3.544551134109497
    5. '#' → logprob: -4.794551372528076
    6. 'chars' → logprob: -5.294551372528076
    7. 'input' → logprob: -5.794551372528076
    8. ' bits' → logprob: -6.169551372528076
    9. 'code' → logprob: -6.419551372528076
    10. '   ' → logprob: -6.794551372528076

Token 688: '
' (ID: 198)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.27564483880996704
    2. 'char' → logprob: -2.4006447792053223
    3. '   ' → logprob: -2.6506447792053223
    4. 'chars' → logprob: -3.9006447792053223
    5. 'decoded' → logprob: -4.025644779205322
    6. '#' → logprob: -4.275644779205322
    7. 'input' → logprob: -4.400644779205322
    8. 'bit' → logprob: -4.775644779205322
    9. 'inv' → logprob: -6.650644779205322
    10. 'ch' → logprob: -6.900644779205322

Token 689: '   ' (ID: 271)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.1201261654496193
    2. 'char' → logprob: -2.745126247406006
    3. 'decoded' → logprob: -3.995126247406006
    4. 'chars' → logprob: -4.870126247406006
    5. 'bit' → logprob: -4.995126247406006
    6. 'input' → logprob: -5.370126247406006
    7. '   ' → logprob: -5.745126247406006
    8. '#' → logprob: -5.870126247406006
    9. 'code' → logprob: -6.245126247406006
    10. ' bits' → logprob: -7.245126247406006

Token 690: ' #' (ID: 1069)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.015283637680113316
    2. 'bit' → logprob: -5.390283584594727
    3. 'decoded' → logprob: -5.640283584594727
    4. 'chars' → logprob: -6.015283584594727
    5. 'char' → logprob: -6.390283584594727
    6. '   ' → logprob: -6.515283584594727
    7. ' bits' → logprob: -7.515283584594727
    8. 'input' → logprob: -8.390283584594727
    9. 'code' → logprob: -8.515283584594727
    10. '#' (adapté à ' #') → logprob: -9.015283584594727

Token 691: ' The' (ID: 623)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.23332472145557404
    2. 'bits' → logprob: -2.1083247661590576
    3. '   ' → logprob: -4.1083245277404785
    4. 'bit' → logprob: -4.3583245277404785
    5. 'chars' → logprob: -4.3583245277404785
    6. '#' → logprob: -4.4833245277404785
    7. 'input' → logprob: -4.4833245277404785
    8. 'decoded' → logprob: -4.8583245277404785
    9. 'inv' → logprob: -5.2333245277404785
    10. 'ch' → logprob: -5.7333245277404785

Token 692: ' main' (ID: 2758)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.37987020611763
    2. 'input' → logprob: -1.6298701763153076
    3. '#' → logprob: -3.2548701763153076
    4. 'code' → logprob: -3.5048701763153076
    5. 'bit' → logprob: -3.6298701763153076
    6. 'bits' → logprob: -5.004870414733887
    7. 'mapping' → logprob: -5.629870414733887
    8. 'inv' → logprob: -6.004870414733887
    9. 'decoded' → logprob: -6.379870414733887
    10. 'chars' → logprob: -6.379870414733887

Token 693: ' decoding' (ID: 105891)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.23972982168197632
    2. 'bits' → logprob: -1.989729881286621
    3. 'input' → logprob: -3.989729881286621
    4. 'code' → logprob: -4.239729881286621
    5. 'bit' → logprob: -4.239729881286621
    6. 'chars' → logprob: -4.614729881286621
    7. 'mapping' → logprob: -5.489729881286621
    8. '   ' → logprob: -5.739729881286621
    9. 'decoded' → logprob: -5.989729881286621
    10. 'ch' → logprob: -5.989729881286621

Token 694: ' method' (ID: 2595)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.6194800138473511
    2. 'char' → logprob: -1.494480013847351
    3. 'decoded' → logprob: -1.994480013847351
    4. 'input' → logprob: -3.8694801330566406
    5. 'chars' → logprob: -3.9944801330566406
    6. ' bits' → logprob: -4.119480133056641
    7. 'bit' → logprob: -4.619480133056641
    8. '   ' → logprob: -4.744480133056641
    9. 'code' → logprob: -5.244480133056641
    10. '_bits' → logprob: -5.869480133056641

Token 695: ' is' (ID: 382)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.26689445972442627
    2. '   ' → logprob: -2.7668943405151367
    3. 'bits' → logprob: -3.1418943405151367
    4. 'decoded' → logprob: -3.1418943405151367
    5. 'chars' → logprob: -3.3918943405151367
    6. 'input' → logprob: -3.6418943405151367
    7. '#' → logprob: -5.016894340515137
    8. 'bit' → logprob: -5.641894340515137
    9. 'code' → logprob: -5.891894340515137
    10. 'mapping' → logprob: -5.891894340515137

Token 696: ' matching' (ID: 20238)
  Prédit: 'bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bit' → logprob: -1.0249673128128052
    2. 'decoded' → logprob: -1.1499673128128052
    3. 'bits' → logprob: -1.5249673128128052
    4. 'char' → logprob: -3.2749671936035156
    5. 'input' → logprob: -4.149967193603516
    6. '#' → logprob: -4.399967193603516
    7. 'chars' → logprob: -4.524967193603516
    8. 'code' → logprob: -4.649967193603516
    9. '   ' → logprob: -5.399967193603516
    10. 'def' → logprob: -5.524967193603516

Token 697: ' bits' (ID: 18189)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.6254702806472778
    2. 'bits' → logprob: -1.1254702806472778
    3. 'decoded' → logprob: -2.7504701614379883
    4. 'bit' → logprob: -3.6254701614379883
    5. 'chars' → logprob: -3.8754701614379883
    6. '   ' → logprob: -4.875470161437988
    7. 'code' → logprob: -4.875470161437988
    8. 'input' → logprob: -5.875470161437988
    9. 'mapping' → logprob: -6.125470161437988
    10. 'ch' → logprob: -6.250470161437988

Token 698: ' from' (ID: 591)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.30173999071121216
    2. 'decoded' → logprob: -1.4267399311065674
    3. 'bit' → logprob: -4.5517401695251465
    4. '   ' → logprob: -5.0517401695251465
    5. 'chars' → logprob: -6.0517401695251465
    6. 'char' → logprob: -7.9267401695251465
    7. '#' → logprob: -8.676739692687988
    8. 'res' → logprob: -9.176739692687988
    9. 'output' → logprob: -9.551739692687988
    10. 'result' → logprob: -9.801739692687988

Token 699: ' input' (ID: 3422)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.11702949553728104
    2. 'bits' → logprob: -2.2420294284820557
    3. 'the' → logprob: -6.242029666900635
    4. 'input' → logprob: -7.117029666900635
    5. 'code' → logprob: -7.867029666900635
    6. 'bit' → logprob: -7.992029666900635
    7. '```' → logprob: -7.992029666900635
    8. ' line' → logprob: -8.867029190063477
    9. ' bits' → logprob: -9.492029190063477
    10. 'each' → logprob: -10.742029190063477

Token 700: ' string' (ID: 1621)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.026606803759932518
    2. 'decoded' → logprob: -4.276607036590576
    3. 'bit' → logprob: -4.526607036590576
    4. 'chars' → logprob: -7.651607036590576
    5. '   ' → logprob: -7.776607036590576
    6. '#' → logprob: -8.026606559753418
    7. 'char' → logprob: -8.776606559753418
    8. ' bits' → logprob: -10.276606559753418
    9. 'code' → logprob: -10.276606559753418
    10. 'rev' → logprob: -11.276606559753418

Token 701: ' as' (ID: 472)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.6804921627044678
    2. 'bit' → logprob: -1.3054921627044678
    3. 'decoded' → logprob: -2.1804921627044678
    4. 'char' → logprob: -2.4304921627044678
    5. '#' → logprob: -4.680492401123047
    6. 'chars' → logprob: -5.430492401123047
    7. '   ' → logprob: -6.680492401123047
    8. 'inv' → logprob: -6.680492401123047
    9. 'rev' → logprob: -6.680492401123047
    10. 'code' → logprob: -6.805492401123047

Token 702: ' bits' (ID: 18189)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.5404287576675415
    2. 'code' → logprob: -2.415428638458252
    3. '""' → logprob: -2.665428638458252
    4. 'decoded' → logprob: -2.915428638458252
    5. 'input' → logprob: -3.290428638458252
    6. '```' → logprob: -3.540428638458252
    7. '"' → logprob: -3.790428638458252
    8. 'for' → logprob: -3.790428638458252
    9. 'line' → logprob: -3.915428638458252
    10. '   ' → logprob: -4.290428638458252

Token 703: ':
' (ID: 734)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.017767660319805145
    2. 'bit' → logprob: -4.642767429351807
    3. 'decoded' → logprob: -5.142767429351807
    4. 'chars' → logprob: -7.142767429351807
    5. '   ' → logprob: -7.392767429351807
    6. 'char' → logprob: -7.767767429351807
    7. '#' → logprob: -8.892767906188965
    8. 'code' → logprob: -10.267767906188965
    9. ' bits' → logprob: -10.642767906188965
    10. 'input' → logprob: -10.642767906188965

Token 704: '   ' (ID: 271)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0307167936116457
    2. 'decoded' → logprob: -4.280716896057129
    3. 'bit' → logprob: -4.655716896057129
    4. 'char' → logprob: -5.905716896057129
    5. 'chars' → logprob: -5.905716896057129
    6. '   ' → logprob: -7.280716896057129
    7. 'code' → logprob: -8.780716896057129
    8. ' bits' → logprob: -8.780716896057129
    9. '#' → logprob: -9.530716896057129
    10. 'input' → logprob: -9.655716896057129

Token 705: ' #
' (ID: 21888)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.556835949420929
    2. 'decoded' → logprob: -1.4318358898162842
    3. '   ' → logprob: -2.181835889816284
    4. 'bit' → logprob: -3.056835889816284
    5. 'char' → logprob: -4.431836128234863
    6. 'chars' → logprob: -5.431836128234863
    7. 'code' → logprob: -5.806836128234863
    8. '#' → logprob: -5.931836128234863
    9. ' bits' → logprob: -6.556836128234863
    10. '```' → logprob: -7.431836128234863

Token 706: '   ' (ID: 271)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.40422025322914124
    2. 'decoded' → logprob: -1.4042202234268188
    3. '   ' → logprob: -3.5292203426361084
    4. 'bit' → logprob: -3.6542203426361084
    5. 'char' → logprob: -4.779220104217529
    6. 'idx' → logprob: -5.404220104217529
    7. 'b' → logprob: -5.529220104217529
    8. 'pos' → logprob: -6.154220104217529
    9. ' bits' → logprob: -6.279220104217529
    10. 'i' → logprob: -6.279220104217529

Token 707: ' #' (ID: 1069)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.7156067490577698
    2. '   ' → logprob: -1.840606689453125
    3. 'decoded' → logprob: -2.090606689453125
    4. 'bit' → logprob: -2.215606689453125
    5. 'char' → logprob: -2.840606689453125
    6. 'code' → logprob: -4.090606689453125
    7. '#' (adapté à ' #') → logprob: -4.215606689453125
    8. 'for' → logprob: -4.840606689453125
    9. 'chars' → logprob: -4.965606689453125
    10. ' bits' → logprob: -5.965606689453125

Token 708: ' The' (ID: 623)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.4330025613307953
    2. 'bit' → logprob: -1.6830025911331177
    3. 'char' → logprob: -2.433002471923828
    4. 'decoded' → logprob: -3.308002471923828
    5. 'chars' → logprob: -4.183002471923828
    6. '   ' → logprob: -4.558002471923828
    7. 'code' → logprob: -5.558002471923828
    8. '#' → logprob: -5.558002471923828
    9. 'inv' → logprob: -6.183002471923828
    10. 'rev' → logprob: -6.558002471923828

Token 709: ' hint' (ID: 26628)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.23116075992584229
    2. 'bit' → logprob: -2.4811606407165527
    3. 'decoded' → logprob: -2.9811606407165527
    4. 'code' → logprob: -4.231160640716553
    5. 'input' → logprob: -4.231160640716553
    6. 'char' → logprob: -4.481160640716553
    7. '#' → logprob: -4.981160640716553
    8. ' bits' → logprob: -5.231160640716553
    9. 'idx' → logprob: -5.731160640716553
    10. 'for' → logprob: -5.731160640716553

Token 710: ' is' (ID: 382)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.8603100776672363
    2. 'char' → logprob: -1.4853100776672363
    3. 'decoded' → logprob: -2.2353100776672363
    4. '   ' → logprob: -2.8603100776672363
    5. 'bit' → logprob: -3.2353100776672363
    6. 'chars' → logprob: -3.3603100776672363
    7. 'input' → logprob: -3.4853100776672363
    8. ' bits' → logprob: -3.9853100776672363
    9. '#' → logprob: -4.110310077667236
    10. 'code' → logprob: -4.610310077667236

Token 711: ' to' (ID: 316)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.21803690493106842
    2. '   ' → logprob: -2.7180368900299072
    3. 'bits' → logprob: -3.0930368900299072
    4. 'bit' → logprob: -3.4680368900299072
    5. 'input' → logprob: -3.8430368900299072
    6. 'chars' → logprob: -4.343037128448486
    7. 'code' → logprob: -5.343037128448486
    8. '#' → logprob: -5.468037128448486
    9. 'ch' → logprob: -5.968037128448486
    10. 'decoded' → logprob: -6.218037128448486

Token 712: ' convert' (ID: 8452)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.5840685963630676
    2. 'bits' → logprob: -1.3340685367584229
    3. 'bit' → logprob: -1.8340685367584229
    4. 'input' → logprob: -5.334068775177002
    5. '#' → logprob: -5.459068775177002
    6. 'chars' → logprob: -5.959068775177002
    7. 'inv' → logprob: -6.084068775177002
    8. '   ' → logprob: -7.209068775177002
    9. 'rev' → logprob: -7.209068775177002
    10. 'ch' → logprob: -7.459068775177002

Token 713: ' each' (ID: 2454)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.4136897325515747
    2. 'char' → logprob: -1.6636897325515747
    3. 'decoded' → logprob: -2.663689613342285
    4. 'bit' → logprob: -2.788689613342285
    5. 'chars' → logprob: -5.288689613342285
    6. '```' → logprob: -5.913689613342285
    7. 'for' → logprob: -6.163689613342285
    8. 'input' → logprob: -6.163689613342285
    9. 'code' → logprob: -6.288689613342285
    10. 'encoded' → logprob: -7.038689613342285

Token 714: ' input' (ID: 3422)
  Prédit: 'ch'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ch' → logprob: -0.9392397403717041
    2. 'char' → logprob: -1.064239740371704
    3. 'for' → logprob: -2.314239740371704
    4. 'bits' → logprob: -2.439239740371704
    5. 'line' → logprob: -3.564239740371704
    6. 'bit' → logprob: -4.189239501953125
    7. 'c' → logprob: -4.564239501953125
    8. 'code' → logprob: -4.814239501953125
    9. 'input' → logprob: -5.064239501953125
    10. '   ' → logprob: -6.064239501953125

Token 715: ' character' (ID: 5855)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -1.0952141284942627
    2. 'ch' → logprob: -1.5952141284942627
    3. '_char' → logprob: -2.0952141284942627
    4. '_bits' → logprob: -2.5952141284942627
    5. 'bits' → logprob: -2.9702141284942627
    6. 'for' → logprob: -3.0952141284942627
    7. '```' → logprob: -3.3452141284942627
    8. '_chars' → logprob: -3.5952141284942627
    9. 'chars' → logprob: -3.8452141284942627
    10. 'line' → logprob: -4.345213890075684

Token 716: ' into' (ID: 1511)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.5190439820289612
    2. 'char' → logprob: -1.2690439224243164
    3. 'bit' → logprob: -3.2690439224243164
    4. 'ch' → logprob: -3.7690439224243164
    5. '   ' → logprob: -4.144043922424316
    6. 'code' → logprob: -4.519043922424316
    7. 'to' → logprob: -5.144043922424316
    8. 'for' → logprob: -5.144043922424316
    9. 'chars' → logprob: -5.519043922424316
    10. '=' → logprob: -5.894043922424316

Token 717: ' ' (ID: 220)
  Prédit: 'code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'code' → logprob: -0.7107195258140564
    2. 'bits' → logprob: -0.9607195258140564
    3. '"' → logprob: -3.085719585418701
    4. 'bin' → logprob: -3.085719585418701
    5. ''' → logprob: -4.460719585418701
    6. 'bit' → logprob: -5.085719585418701
    7. 'str' → logprob: -5.335719585418701
    8. '{
' → logprob: -5.835719585418701
    9. 'format' → logprob: -6.335719585418701
    10. 'table' → logprob: -6.460719585418701

Token 718: '5' (ID: 20)
  Prédit: 'code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'code' → logprob: -0.46681836247444153
    2. 'bits' → logprob: -1.5918183326721191
    3. 'format' → logprob: -2.466818332672119
    4. 'bin' → logprob: -2.716818332672119
    5. 'table' → logprob: -4.716818332672119
    6. 'bit' → logprob: -5.466818332672119
    7. 'str' → logprob: -5.716818332672119
    8. '"{' → logprob: -7.591818332672119
    9. '"' → logprob: -7.716818332672119
    10. '{
' → logprob: -8.216818809509277

Token 719: 'bit' (ID: 6516)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.31537485122680664
    2. '_bits' → logprob: -1.9403748512268066
    3. ' bits' → logprob: -2.5653748512268066
    4. ' =' → logprob: -4.690374851226807
    5. '   ' → logprob: -4.940374851226807
    6. 'bit' → logprob: -5.190374851226807
    7. '=' → logprob: -5.815374851226807
    8. ')' → logprob: -5.815374851226807
    9. '"' → logprob: -5.940374851226807
    10. 'line' → logprob: -6.190374851226807

Token 720: ' strings' (ID: 18279)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.1615302413702011
    2. 'char' → logprob: -2.4115302562713623
    3. 'bit' → logprob: -3.1615302562713623
    4. '   ' → logprob: -4.786530017852783
    5. 'chars' → logprob: -6.161530017852783
    6. '#' → logprob: -6.411530017852783
    7. 'code' → logprob: -6.536530017852783
    8. 'mapping' → logprob: -7.161530017852783
    9. ' bits' → logprob: -7.661530017852783
    10. 'decoded' → logprob: -7.786530017852783

Token 721: ',' (ID: 11)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.3832702040672302
    2. 'char' → logprob: -1.508270263671875
    3. 'bit' → logprob: -2.508270263671875
    4. '   ' → logprob: -4.883270263671875
    5. '#' → logprob: -6.008270263671875
    6. 'chars' → logprob: -6.258270263671875
    7. 'code' → logprob: -6.883270263671875
    8. 'mapping' → logprob: -7.383270263671875
    9. 'input' → logprob: -7.633270263671875
    10. 'inv' → logprob: -7.758270263671875

Token 722: ' but' (ID: 889)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.5083628296852112
    2. '   ' → logprob: -1.1333627700805664
    3. 'bits' → logprob: -3.7583627700805664
    4. 'for' → logprob: -3.7583627700805664
    5. '#' → logprob: -4.883362770080566
    6. 'bit' → logprob: -5.508362770080566
    7. ' char' → logprob: -5.508362770080566
    8. '```' → logprob: -5.508362770080566
    9. 'code' → logprob: -5.883362770080566
    10. 'input' → logprob: -6.258362770080566

Token 723: ' in' (ID: 306)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -1.1719547510147095
    2. 'for' → logprob: -1.5469547510147095
    3. '#' → logprob: -1.6719547510147095
    4. '   ' → logprob: -1.7969547510147095
    5. 'bits' → logprob: -2.79695463180542
    6. 'continue' → logprob: -3.42195463180542
    7. 'code' → logprob: -4.67195463180542
    8. '```' → logprob: -5.42195463180542
    9. 'input' → logprob: -6.04695463180542
    10. 'bit' → logprob: -6.04695463180542

Token 724: ' the' (ID: 290)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.5817755460739136
    2. 'code' → logprob: -1.9567755460739136
    3. '```' → logprob: -2.456775665283203
    4. '#' → logprob: -2.581775665283203
    5. 'the' → logprob: -3.456775665283203
    6. 'line' → logprob: -4.081775665283203
    7. 'bits' → logprob: -4.206775665283203
    8. ''' → logprob: -4.206775665283203
    9. 'input' → logprob: -4.706775665283203
    10. 'table' → logprob: -4.831775665283203

Token 725: ' problem' (ID: 4792)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.0493640899658203
    2. 'code' → logprob: -1.0493640899658203
    3. '"' → logprob: -2.1743640899658203
    4. 'table' → logprob: -2.9243640899658203
    5. '#' → logprob: -3.1743640899658203
    6. '{
' → logprob: -3.9243640899658203
    7. 'input' → logprob: -4.54936408996582
    8. 'line' → logprob: -4.54936408996582
    9. 'bits' → logprob: -5.04936408996582
    10. 'char' → logprob: -5.17436408996582

Token 726: ',
' (ID: 412)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.31698888540267944
    2. 'for' → logprob: -2.316988945007324
    3. 'bits' → logprob: -2.816988945007324
    4. ' for' → logprob: -3.191988945007324
    5. '#' → logprob: -4.191988945007324
    6. 'char' → logprob: -4.316988945007324
    7. 'decoded' → logprob: -4.941988945007324
    8. 'continue' → logprob: -5.191988945007324
    9. ' bits' → logprob: -5.316988945007324
    10. 'chars' → logprob: -5.691988945007324

Token 727: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11851124465465546
    2. 'char' → logprob: -2.993511199951172
    3. 'for' → logprob: -3.618511199951172
    4. 'bits' → logprob: -4.368511199951172
    5. '#' → logprob: -4.868511199951172
    6. 'ch' → logprob: -5.993511199951172
    7. '       ' → logprob: -6.368511199951172
    8. '```' → logprob: -6.493511199951172
    9. '"' → logprob: -6.868511199951172
    10. 'code' → logprob: -6.868511199951172

Token 728: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3836748003959656
    2. 'for' → logprob: -2.3836748600006104
    3. 'char' → logprob: -2.5086748600006104
    4. 'ch' → logprob: -2.8836748600006104
    5. 'bits' → logprob: -3.5086748600006104
    6. '"' → logprob: -4.133674621582031
    7. 'code' → logprob: -5.133674621582031
    8. 'input' → logprob: -5.133674621582031
    9. '#' (adapté à ' #') → logprob: -5.258674621582031
    10. '       ' → logprob: -5.383674621582031

Token 729: ' The' (ID: 623)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.391766756772995
    2. 'bits' → logprob: -2.0167667865753174
    3. 'for' → logprob: -2.3917667865753174
    4. '   ' → logprob: -3.3917667865753174
    5. 'code' → logprob: -4.016766548156738
    6. '#' → logprob: -4.141766548156738
    7. 'bit' → logprob: -4.391766548156738
    8. 'input' → logprob: -5.641766548156738
    9. '```' → logprob: -5.641766548156738
    10. 'ch' → logprob: -5.766766548156738

Token 730: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.6672954559326172
    2. 'char' → logprob: -1.7922954559326172
    3. 'bits' → logprob: -2.042295455932617
    4. 'for' → logprob: -2.667295455932617
    5. 'code' → logprob: -3.292295455932617
    6. '#' → logprob: -3.417295455932617
    7. 'encoded' → logprob: -4.792295455932617
    8. 'bit' → logprob: -5.167295455932617
    9. 'table' → logprob: -5.292295455932617
    10. 'chars' → logprob: -5.417295455932617

Token 731: ' characters' (ID: 9862)
  Prédit: '_chars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_chars' → logprob: -0.6357500553131104
    2. '_char' → logprob: -1.2607500553131104
    3. '=' → logprob: -2.5107500553131104
    4. '_bits' → logprob: -3.1357500553131104
    5. ' =' → logprob: -3.3857500553131104
    6. 'char' → logprob: -5.135749816894531
    7. '_line' → logprob: -5.260749816894531
    8. '_ch' → logprob: -5.885749816894531
    9. 'chars' → logprob: -6.260749816894531
    10. '_code' → logprob: -6.510749816894531

Token 732: ' are' (ID: 553)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.43282192945480347
    2. 'for' → logprob: -2.1828219890594482
    3. ' =' → logprob: -2.8078219890594482
    4. '+=' → logprob: -3.4328219890594482
    5. 'in' → logprob: -3.8078219890594482
    6. 'bits' → logprob: -3.8078219890594482
    7. ':' → logprob: -3.8078219890594482
    8. '   ' → logprob: -4.057821750640869
    9. '```' → logprob: -4.182821750640869
    10. '_bits' → logprob: -4.807821750640869

Token 733: ' one' (ID: 1001)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.8906687498092651
    2. 'bits' → logprob: -1.2656687498092651
    3. '"' → logprob: -2.1406688690185547
    4. '   ' → logprob: -2.8906688690185547
    5. ' for' → logprob: -3.2656688690185547
    6. '```' → logprob: -4.015668869018555
    7. 'code' → logprob: -4.515668869018555
    8. '#' → logprob: -4.890668869018555
    9. '`' → logprob: -5.140668869018555
    10. '""' → logprob: -5.140668869018555

Token 734: ' of' (ID: 328)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.43850550055503845
    2. 'char' → logprob: -1.6885055303573608
    3. '   ' → logprob: -2.5635054111480713
    4. 'for' → logprob: -3.0635054111480713
    5. 'bit' → logprob: -4.18850564956665
    6. '```' → logprob: -4.43850564956665
    7. ' bits' → logprob: -5.56350564956665
    8. 'code' → logprob: -5.93850564956665
    9. 'chars' → logprob: -6.06350564956665
    10. 'ch' → logprob: -6.43850564956665

Token 735: ':' (ID: 25)
  Prédit: 'code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'code' → logprob: -0.7501097321510315
    2. '"' → logprob: -1.0001096725463867
    3. 'table' → logprob: -3.2501096725463867
    4. '{
' → logprob: -3.2501096725463867
    5. ''' → logprob: -3.5001096725463867
    6. '"P' → logprob: -4.250109672546387
    7. '"?' → logprob: -4.750109672546387
    8. '{' → logprob: -5.125109672546387
    9. '{'' → logprob: -5.500109672546387
    10. '`' → logprob: -5.875109672546387

Token 736: ' ?' (ID: 1423)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.34478577971458435
    2. 'bits' → logprob: -2.719785690307617
    3. '   ' → logprob: -2.844785690307617
    4. '"' → logprob: -3.469785690307617
    5. '```' → logprob: -3.594785690307617
    6. 'code' → logprob: -3.719785690307617
    7. 'char' → logprob: -3.844785690307617
    8. ' for' → logprob: -4.219785690307617
    9. 'bit' → logprob: -4.844785690307617
    10. 'chars' → logprob: -5.094785690307617

Token 737: ' D' (ID: 415)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.4998946785926819
    2. 'char' → logprob: -1.124894618988037
    3. 'bit' → logprob: -3.124894618988037
    4. 'chars' → logprob: -5.124894618988037
    5. 'for' → logprob: -5.249894618988037
    6. '   ' → logprob: -5.874894618988037
    7. '```' → logprob: -5.874894618988037
    8. 'code' → logprob: -6.499894618988037
    9. 'mapping' → logprob: -6.624894618988037
    10. '#' → logprob: -6.874894618988037

Token 738: ' -' (ID: 533)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.5679984092712402
    2. 'char' → logprob: -1.0679984092712402
    3. 'code' → logprob: -3.9429984092712402
    4. 'bit' → logprob: -3.9429984092712402
    5. '   ' → logprob: -4.19299840927124
    6. 'chars' → logprob: -5.06799840927124
    7. ' bits' → logprob: -5.44299840927124
    8. 'mapping' → logprob: -5.56799840927124
    9. 'input' → logprob: -5.69299840927124
    10. '```' → logprob: -5.81799840927124

Token 739: ' C' (ID: 363)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0963027477264404
    2. 'bits' → logprob: -2.0963027477264404
    3. '_bits' → logprob: -2.4713027477264404
    4. '"' → logprob: -2.7213027477264404
    5. 'for' → logprob: -2.7213027477264404
    6. 'char' → logprob: -3.2213027477264404
    7. '=' → logprob: -3.3463027477264404
    8. ' =' → logprob: -3.5963027477264404
    9. '_' → logprob: -3.5963027477264404
    10. '```' → logprob: -3.5963027477264404

Token 740: ' '' (ID: 461)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.038295771926641464
    2. 'mapping' → logprob: -4.788295745849609
    3. 'bits' → logprob: -4.913295745849609
    4. '   ' → logprob: -5.663295745849609
    5. '#' → logprob: -5.788295745849609
    6. 'bit' → logprob: -5.788295745849609
    7. 'chars' → logprob: -5.913295745849609
    8. 'input' → logprob: -6.163295745849609
    9. '```' → logprob: -6.288295745849609
    10. ' char' → logprob: -6.413295745849609

Token 741: ' K' (ID: 658)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.5624111294746399
    2. 'bits' → logprob: -1.6874110698699951
    3. '   ' → logprob: -2.187411069869995
    4. 'for' → logprob: -3.187411069869995
    5. '#' → logprob: -3.937411069869995
    6. 'code' → logprob: -4.187411308288574
    7. 'bit' → logprob: -4.187411308288574
    8. 'continue' → logprob: -4.812411308288574
    9. 'chars' → logprob: -4.937411308288574
    10. 'mapping' → logprob: -4.937411308288574

Token 742: ' O' (ID: 532)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.49352413415908813
    2. 'char' → logprob: -1.3685240745544434
    3. 'bit' → logprob: -2.1185240745544434
    4. 'chars' → logprob: -5.618524074554443
    5. 'decoded' → logprob: -5.868524074554443
    6. '#' → logprob: -6.243524074554443
    7. 'mapping' → logprob: -6.243524074554443
    8. 'code' → logprob: -6.243524074554443
    9. '   ' → logprob: -6.868524074554443
    10. 'codes' → logprob: -7.743524074554443

Token 743: ' P' (ID: 398)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.03201708197593689
    2. 'bit' → logprob: -4.532017230987549
    3. 'bits' → logprob: -5.407017230987549
    4. '#' → logprob: -5.657017230987549
    5. 'mapping' → logprob: -5.657017230987549
    6. 'input' → logprob: -5.907017230987549
    7. '   ' → logprob: -6.032017230987549
    8. 'chars' → logprob: -6.532017230987549
    9. 'ch' → logprob: -7.157017230987549
    10. 'code' → logprob: -7.782017230987549

Token 744: ' U' (ID: 601)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.08287869393825531
    2. '   ' → logprob: -4.082878589630127
    3. 'bit' → logprob: -4.207878589630127
    4. 'bits' → logprob: -4.457878589630127
    5. 'mapping' → logprob: -4.707878589630127
    6. 'input' → logprob: -4.832878589630127
    7. '#' → logprob: -5.582878589630127
    8. 'chars' → logprob: -5.832878589630127
    9. 'code' → logprob: -6.207878589630127
    10. 'ch' → logprob: -6.207878589630127

Token 745: ' A' (ID: 355)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.059018298983573914
    2. 'bits' → logprob: -3.68401837348938
    3. 'bit' → logprob: -4.184018135070801
    4. 'chars' → logprob: -5.434018135070801
    5. '#' → logprob: -5.559018135070801
    6. 'input' → logprob: -6.184018135070801
    7. 'ch' → logprob: -6.309018135070801
    8. '   ' → logprob: -6.809018135070801
    9. 'inv' → logprob: -7.059018135070801
    10. 'mapping' → logprob: -7.059018135070801

Token 746: ' and' (ID: 326)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.39289313554763794
    2. 'bits' → logprob: -1.3928930759429932
    3. 'bit' → logprob: -2.892893075942993
    4. '#' → logprob: -5.392893314361572
    5. 'chars' → logprob: -5.392893314361572
    6. 'inv' → logprob: -5.392893314361572
    7. 'input' → logprob: -6.267893314361572
    8. 'mapping' → logprob: -6.517893314361572
    9. 'code' → logprob: -6.892893314361572
    10. 'ch' → logprob: -7.017893314361572

Token 747: ' so' (ID: 813)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.16320887207984924
    2. 'bit' → logprob: -2.7882089614868164
    3. 'bits' → logprob: -3.7882089614868164
    4. 'code' → logprob: -4.038208961486816
    5. 'input' → logprob: -4.288208961486816
    6. 'mapping' → logprob: -4.538208961486816
    7. '#' → logprob: -4.663208961486816
    8. 'chars' → logprob: -5.163208961486816
    9. 'codes' → logprob: -6.413208961486816
    10. 'ch' → logprob: -6.663208961486816

Token 748: ' on' (ID: 402)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.5035773515701294
    2. 'bits' → logprob: -2.37857723236084
    3. 'code' → logprob: -2.75357723236084
    4. 'input' → logprob: -3.00357723236084
    5. 'chars' → logprob: -3.12857723236084
    6. '#' → logprob: -3.62857723236084
    7. 'mapping' → logprob: -3.62857723236084
    8. 'bit' → logprob: -3.75357723236084
    9. '   ' → logprob: -3.75357723236084
    10. '```' → logprob: -4.62857723236084

Token 749: '.
' (ID: 558)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.11294561624526978
    2. 'bits' → logprob: -2.987945556640625
    3. '#' → logprob: -4.112945556640625
    4. 'bit' → logprob: -4.112945556640625
    5. 'rev' → logprob: -5.237945556640625
    6. 'inv' → logprob: -5.487945556640625
    7. 'chars' → logprob: -5.487945556640625
    8. '   ' → logprob: -6.237945556640625
    9. 'decode' → logprob: -6.237945556640625
    10. 'reverse' → logprob: -6.237945556640625

Token 750: '   ' (ID: 271)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.5125926733016968
    2. 'bits' → logprob: -1.1375926733016968
    3. 'bit' → logprob: -2.8875927925109863
    4. 'decoded' → logprob: -5.012592792510986
    5. 'chars' → logprob: -5.387592792510986
    6. 'code' → logprob: -5.637592792510986
    7. 'input' → logprob: -6.512592792510986
    8. 'decode' → logprob: -6.512592792510986
    9. '```' → logprob: -6.762592792510986
    10. 'mapping' → logprob: -7.137592792510986

Token 751: ' #
' (ID: 21888)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.22282250225543976
    2. 'bits' → logprob: -1.9728225469589233
    3. 'bit' → logprob: -3.347822427749634
    4. 'inv' → logprob: -5.222822666168213
    5. '#' → logprob: -5.472822666168213
    6. 'chars' → logprob: -5.472822666168213
    7. 'input' → logprob: -5.472822666168213
    8. 'mapping' → logprob: -6.097822666168213
    9. 'code' → logprob: -6.347822666168213
    10. 'ch' → logprob: -6.847822666168213

Token 752: '   ' (ID: 271)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.10844924300909042
    2. 'bits' → logprob: -2.8584492206573486
    3. 'bit' → logprob: -3.8584492206573486
    4. '#' → logprob: -5.233449459075928
    5. 'chars' → logprob: -5.358449459075928
    6. 'input' → logprob: -5.608449459075928
    7. 'inv' → logprob: -5.733449459075928
    8. 'code' → logprob: -6.108449459075928
    9. 'ch' → logprob: -6.358449459075928
    10. 'mapping' → logprob: -6.358449459075928

Token 753: ' #' (ID: 1069)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.11641861498355865
    2. 'bit' → logprob: -3.2414186000823975
    3. 'bits' → logprob: -3.7414186000823975
    4. 'input' → logprob: -4.366418838500977
    5. 'inv' → logprob: -4.491418838500977
    6. '#' (adapté à ' #') → logprob: -4.741418838500977
    7. 'mapping' → logprob: -5.116418838500977
    8. 'chars' → logprob: -5.741418838500977
    9. 'rev' → logprob: -6.991418838500977
    10. 'decode' → logprob: -7.116418838500977

Token 754: ' From' (ID: 7217)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.12723538279533386
    2. 'bits' → logprob: -3.0022354125976562
    3. 'bit' → logprob: -3.2522354125976562
    4. '#' → logprob: -4.252235412597656
    5. 'inv' → logprob: -5.127235412597656
    6. 'mapping' → logprob: -6.002235412597656
    7. 'input' → logprob: -6.127235412597656
    8. 'chars' → logprob: -6.377235412597656
    9. 'decode' → logprob: -6.627235412597656
    10. 'ch' → logprob: -7.502235412597656

Token 755: ' the' (ID: 290)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.20127707719802856
    2. 'input' → logprob: -3.451277017593384
    3. '#' → logprob: -3.576277017593384
    4. 'bits' → logprob: -3.826277017593384
    5. 'code' → logprob: -3.826277017593384
    6. 'bit' → logprob: -4.201277256011963
    7. '```' → logprob: -4.201277256011963
    8. 'mapping' → logprob: -4.326277256011963
    9. '   ' → logprob: -4.951277256011963
    10. 'for' → logprob: -5.201277256011963

Token 756: ' problem' (ID: 4792)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.6206231117248535
    2. 'input' → logprob: -2.2456231117248535
    3. '#' → logprob: -2.4956231117248535
    4. '```' → logprob: -3.1206231117248535
    5. 'code' → logprob: -3.2456231117248535
    6. '"' → logprob: -3.4956231117248535
    7. 'bits' → logprob: -3.7456231117248535
    8. '`' → logprob: -3.8706231117248535
    9. 'bit' → logprob: -3.8706231117248535
    10. 'line' → logprob: -3.9956231117248535

Token 757: ' statement' (ID: 9710)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.19145818054676056
    2. '   ' → logprob: -2.191458225250244
    3. ' char' → logprob: -4.316458225250244
    4. 'input' → logprob: -4.566458225250244
    5. '#' → logprob: -5.066458225250244
    6. 'mapping' → logprob: -5.066458225250244
    7. 'chars' → logprob: -5.441458225250244
    8. 'ch' → logprob: -5.441458225250244
    9. 'bits' → logprob: -5.816458225250244
    10. 'bit' → logprob: -6.191458225250244

Token 758: ',' (ID: 11)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.22797632217407227
    2. 'bits' → logprob: -1.9779763221740723
    3. 'bit' → logprob: -3.4779763221740723
    4. '#' → logprob: -4.852976322174072
    5. 'inv' → logprob: -5.102976322174072
    6. 'chars' → logprob: -5.352976322174072
    7. 'ch' → logprob: -5.602976322174072
    8. '   ' → logprob: -5.602976322174072
    9. 'input' → logprob: -5.727976322174072
    10. 'rev' → logprob: -6.977976322174072

Token 759: ' looks' (ID: 8224)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.030535858124494553
    2. 'bits' → logprob: -5.155535697937012
    3. 'inv' → logprob: -5.280535697937012
    4. '#' → logprob: -5.280535697937012
    5. 'bit' → logprob: -5.655535697937012
    6. 'ch' → logprob: -6.030535697937012
    7. '   ' → logprob: -6.030535697937012
    8. 'chars' → logprob: -6.280535697937012
    9. 'input' → logprob: -6.405535697937012
    10. 'rev' → logprob: -6.905535697937012

Token 760: ' like' (ID: 1299)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5873834490776062
    2. '```' → logprob: -1.587383508682251
    3. '"' → logprob: -2.212383508682251
    4. '       ' → logprob: -3.212383508682251
    5. 'ch' → logprob: -4.212383270263672
    6. 'char' → logprob: -4.587383270263672
    7. 'for' → logprob: -4.712383270263672
    8. ')' → logprob: -5.212383270263672
    9. '``' → logprob: -5.337383270263672
    10. '=' → logprob: -5.462383270263672

Token 761: ' each' (ID: 2454)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.2248728722333908
    2. 'bits' → logprob: -2.3498728275299072
    3. 'bit' → logprob: -3.7248728275299072
    4. 'for' → logprob: -3.8498728275299072
    5. 'code' → logprob: -4.474873065948486
    6. 'chars' → logprob: -4.474873065948486
    7. 'input' → logprob: -4.474873065948486
    8. '   ' → logprob: -5.099873065948486
    9. '#' → logprob: -5.724873065948486
    10. '```' → logprob: -5.724873065948486

Token 762: ' char' (ID: 1826)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.3150148391723633
    2. 'bits' → logprob: -1.8150148391723633
    3. 'bit' → logprob: -2.9400148391723633
    4. 'decoded' → logprob: -4.565014839172363
    5. 'input' → logprob: -4.690014839172363
    6. 'code' → logprob: -4.815014839172363
    7. '#' → logprob: -4.940014839172363
    8. '   ' → logprob: -5.940014839172363
    9. 'mapping' → logprob: -5.940014839172363
    10. 'for' → logprob: -6.065014839172363

Token 763: ' maps' (ID: 24267)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -1.329362392425537
    2. '_' → logprob: -1.579362392425537
    3. '_to' → logprob: -1.704362392425537
    4. '=' → logprob: -2.829362392425537
    5. '_char' → logprob: -2.954362392425537
    6. '   ' → logprob: -3.454362392425537
    7. 'char' → logprob: -3.829362392425537
    8. '```' → logprob: -3.954362392425537
    9. '"' → logprob: -4.079362392425537
    10. '_map' → logprob: -4.204362392425537

Token 764: ' to' (ID: 316)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.1798890233039856
    2. ' =' → logprob: -2.054888963699341
    3. 'to' → logprob: -4.05488920211792
    4. '_to' → logprob: -4.67988920211792
    5. '+=' → logprob: -5.92988920211792
    6. 'in' → logprob: -6.80488920211792
    7. ' to' → logprob: -6.92988920211792
    8. ' in' → logprob: -7.30488920211792
    9. ' +=' → logprob: -7.30488920211792
    10. '```' → logprob: -7.30488920211792

Token 765: ' bits' (ID: 18189)
  Prédit: '{
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '{
' → logprob: -0.9327234625816345
    2. 'bits' → logprob: -0.9327234625816345
    3. 'code' → logprob: -2.9327235221862793
    4. '```' → logprob: -3.1827235221862793
    5. 'bit' → logprob: -3.9327235221862793
    6. '{' → logprob: -3.9327235221862793
    7. '"' → logprob: -4.057723522186279
    8. 'line' → logprob: -4.807723522186279
    9. 'table' → logprob: -4.932723522186279
    10. 'char' → logprob: -4.932723522186279

Token 766: ' -' (ID: 533)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.26098671555519104
    2. 'bits' → logprob: -2.010986804962158
    3. 'bit' → logprob: -2.885986804962158
    4. '#' → logprob: -4.510986804962158
    5. 'inv' → logprob: -4.510986804962158
    6. 'chars' → logprob: -5.260986804962158
    7. 'input' → logprob: -5.385986804962158
    8. 'ch' → logprob: -5.885986804962158
    9. 'mapping' → logprob: -6.510986804962158
    10. 'rev' → logprob: -6.635986804962158

Token 767: ' we' (ID: 581)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.13336829841136932
    2. '   ' → logprob: -3.0083682537078857
    3. 'input' → logprob: -3.8833682537078857
    4. 'bits' → logprob: -4.258368492126465
    5. 'bit' → logprob: -4.508368492126465
    6. 'mapping' → logprob: -5.008368492126465
    7. 'ch' → logprob: -5.133368492126465
    8. '#' → logprob: -5.258368492126465
    9. 'chars' → logprob: -5.383368492126465
    10. 'inv' → logprob: -6.133368492126465

Token 768: ' can' (ID: 665)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -1.1857763528823853
    2. '=' → logprob: -1.4357763528823853
    3. 'char' → logprob: -1.6857763528823853
    4. '#' → logprob: -3.1857762336730957
    5. '_char' → logprob: -3.4357762336730957
    6. '_to' → logprob: -3.5607762336730957
    7. '_chars' → logprob: -3.5607762336730957
    8. 'code' → logprob: -3.6857762336730957
    9. '_bits' → logprob: -3.9357762336730957
    10. '_mapping' → logprob: -4.185776233673096

Token 769: ' define' (ID: 13174)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.2494935840368271
    2. 'bits' → logprob: -2.4994935989379883
    3. 'for' → logprob: -3.8744935989379883
    4. '#' → logprob: -3.8744935989379883
    5. 'input' → logprob: -4.124493598937988
    6. '   ' → logprob: -4.374493598937988
    7. 'code' → logprob: -4.874493598937988
    8. ' =' → logprob: -4.999493598937988
    9. 'bit' → logprob: -4.999493598937988
    10. 'continue' → logprob: -4.999493598937988

Token 770: ' a' (ID: 261)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.1644618809223175
    2. 'input' → logprob: -2.164461851119995
    3. '#' → logprob: -4.289462089538574
    4. 'inp' → logprob: -4.664462089538574
    5. 'ch' → logprob: -5.289462089538574
    6. 'chars' → logprob: -5.914462089538574
    7. 'mapping' → logprob: -6.039462089538574
    8. 'in' → logprob: -6.789462089538574
    9. 'bit' → logprob: -7.414462089538574
    10. '   ' → logprob: -7.539462089538574

Token 771: ' character' (ID: 5855)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.02028609625995159
    2. 'input' → logprob: -4.2702860832214355
    3. 'mapping' → logprob: -5.3952860832214355
    4. 'inp' → logprob: -7.1452860832214355
    5. 'ch' → logprob: -8.645286560058594
    6. '```' → logprob: -9.020286560058594
    7. 'chars' → logprob: -9.020286560058594
    8. 'map' → logprob: -9.395286560058594
    9. '#' → logprob: -9.645286560058594
    10. 'in' → logprob: -10.145286560058594

Token 772: '->' (ID: 609)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.1019284799695015
    2. 'bits' → logprob: -3.226928472518921
    3. 'input' → logprob: -4.4769287109375
    4. 'bit' → logprob: -4.6019287109375
    5. 'inv' → logprob: -5.1019287109375
    6. 'mapping' → logprob: -5.4769287109375
    7. 'for' → logprob: -5.6019287109375
    8. ' char' → logprob: -5.6019287109375
    9. 'chars' → logprob: -5.8519287109375
    10. 'map' → logprob: -5.9769287109375

Token 773: 'bits' (ID: 24043)
  Prédit: 'bits'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.5209435224533081
    2. 'char' → logprob: -1.145943522453308
    3. 'bit' → logprob: -3.1459436416625977
    4. '{
' → logprob: -3.5209436416625977
    5. 'code' → logprob: -4.895943641662598
    6. '```' → logprob: -6.395943641662598
    7. '_bits' → logprob: -7.145943641662598
    8. '{' → logprob: -7.270943641662598
    9. 'table' → logprob: -7.395943641662598
    10. 'to' → logprob: -7.520943641662598

Token 774: ' map' (ID: 4014)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.023645829409360886
    2. 'input' → logprob: -4.523645877838135
    3. '#' → logprob: -5.273645877838135
    4. 'chars' → logprob: -5.523645877838135
    5. 'ch' → logprob: -6.773645877838135
    6. 'bits' → logprob: -6.898645877838135
    7. '   ' → logprob: -7.648645877838135
    8. 'inv' → logprob: -8.148645401000977
    9. 'mapping' → logprob: -8.898645401000977
    10. 'inp' → logprob: -9.023645401000977

Token 775: '
' (ID: 198)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.029288925230503082
    2. 'input' → logprob: -3.9042890071868896
    3. 'chars' → logprob: -5.6542887687683105
    4. 'ch' → logprob: -6.4042887687683105
    5. '   ' → logprob: -6.5292887687683105
    6. '#' → logprob: -6.6542887687683105
    7. 'inp' → logprob: -8.279289245605469
    8. 'bits' → logprob: -8.779289245605469
    9. '```' → logprob: -9.404289245605469
    10. 'mapping' → logprob: -9.654289245605469

Token 776: '   ' (ID: 271)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.0667213723063469
    2. '   ' → logprob: -3.1917214393615723
    3. 'input' → logprob: -4.941721439361572
    4. ' char' → logprob: -5.691721439361572
    5. 'bits' → logprob: -6.066721439361572
    6. 'chars' → logprob: -6.191721439361572
    7. 'mapping' → logprob: -6.191721439361572
    8. 'ch' → logprob: -6.316721439361572
    9. 'bit' → logprob: -6.941721439361572
    10. '```' → logprob: -7.066721439361572

Token 777: ' #' (ID: 1069)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.018957480788230896
    2. 'input' → logprob: -4.393957614898682
    3. '#' (adapté à ' #') → logprob: -5.643957614898682
    4. 'chars' → logprob: -6.393957614898682
    5. 'ch' → logprob: -7.143957614898682
    6. '   ' → logprob: -8.643957138061523
    7. 'inp' → logprob: -9.393957138061523
    8. '```' → logprob: -10.268957138061523
    9. 'mapping' → logprob: -10.393957138061523
    10. '
' → logprob: -10.893957138061523

Token 778: ' given' (ID: 4335)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.01478445902466774
    2. 'input' → logprob: -4.764784336090088
    3. 'chars' → logprob: -6.139784336090088
    4. 'ch' → logprob: -6.264784336090088
    5. '#' → logprob: -6.389784336090088
    6. 'inp' → logprob: -8.389784812927246
    7. 'mapping' → logprob: -9.889784812927246
    8. '```' → logprob: -10.514784812927246
    9. 'in' → logprob: -10.889784812927246
    10. 'bits' → logprob: -11.514784812927246

Token 779: ' by' (ID: 656)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.022880038246512413
    2. 'input' → logprob: -4.2728800773620605
    3. '#' → logprob: -5.6478800773620605
    4. 'ch' → logprob: -6.2728800773620605
    5. 'chars' → logprob: -6.2728800773620605
    6. 'inp' → logprob: -7.6478800773620605
    7. '   ' → logprob: -8.272879600524902
    8. 'mapping' → logprob: -8.897879600524902
    9. '```' → logprob: -8.897879600524902
    10. 'bits' → logprob: -9.397879600524902

Token 780: ' the' (ID: 290)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.005083491560071707
    2. 'input' → logprob: -5.7550835609436035
    3. 'chars' → logprob: -6.8800835609436035
    4. 'ch' → logprob: -7.5050835609436035
    5. '```' → logprob: -8.630083084106445
    6. 'inp' → logprob: -9.755083084106445
    7. '#' → logprob: -10.630083084106445
    8. '`' → logprob: -11.380083084106445
    9. ' char' → logprob: -11.505083084106445
    10. 'code' → logprob: -11.755083084106445

Token 781: ' code' (ID: 3490)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.322475403547287
    2. '{
' → logprob: -1.8224754333496094
    3. '{' → logprob: -3.4474754333496094
    4. 'table' → logprob: -3.6974754333496094
    5. 'input' → logprob: -4.447475433349609
    6. 'code' → logprob: -4.572475433349609
    7. 'bits' → logprob: -5.197475433349609
    8. '#' → logprob: -5.322475433349609
    9. 'line' → logprob: -5.572475433349609
    10. '"' → logprob: -5.697475433349609

Token 782: ' table' (ID: 3293)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.019814282655715942
    2. 'bits' → logprob: -4.644814491271973
    3. 'ch' → logprob: -5.769814491271973
    4. 'chars' → logprob: -5.769814491271973
    5. 'input' → logprob: -6.644814491271973
    6. 'inv' → logprob: -7.144814491271973
    7. 'bit' → logprob: -7.269814491271973
    8. '#' → logprob: -8.019814491271973
    9. '   ' → logprob: -8.394814491271973
    10. 'inp' → logprob: -9.269814491271973

Token 783: ':' (ID: 25)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.009406005963683128
    2. 'input' → logprob: -5.509406089782715
    3. '#' → logprob: -6.134406089782715
    4. 'chars' → logprob: -6.509406089782715
    5. 'ch' → logprob: -7.384406089782715
    6. 'bits' → logprob: -7.509406089782715
    7. '```' → logprob: -8.634406089782715
    8. 'bit' → logprob: -9.509406089782715
    9. 'inv' → logprob: -9.884406089782715
    10. 'decode' → logprob: -10.134406089782715

Token 784: ' e' (ID: 319)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.01675497554242611
    2. 'input' → logprob: -4.391755104064941
    3. '#' → logprob: -6.266755104064941
    4. 'chars' → logprob: -6.516755104064941
    5. 'ch' → logprob: -7.391755104064941
    6. '   ' → logprob: -9.891755104064941
    7. 'inp' → logprob: -10.266755104064941
    8. '```' → logprob: -10.266755104064941
    9. 'bits' → logprob: -11.016755104064941
    10. ' char' → logprob: -11.266755104064941

Token 785: '.g' (ID: 1940)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.2626752257347107
    2. '   ' → logprob: -2.8876752853393555
    3. '```' → logprob: -2.8876752853393555
    4. 'code' → logprob: -3.7626752853393555
    5. 'for' → logprob: -4.1376752853393555
    6. 'input' → logprob: -4.6376752853393555
    7. ' char' → logprob: -4.8876752853393555
    8. 'table' → logprob: -5.1376752853393555
    9. 'chars' → logprob: -5.1376752853393555
    10. 'ch' → logprob: -5.2626752853393555

Token 786: '.' (ID: 13)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.11727484315633774
    2. 'bits' → logprob: -2.617274761199951
    3. 'bit' → logprob: -4.117274761199951
    4. 'code' → logprob: -5.242274761199951
    5. 'ch' → logprob: -5.867274761199951
    6. 'chars' → logprob: -5.867274761199951
    7. '   ' → logprob: -6.117274761199951
    8. 'input' → logprob: -6.492274761199951
    9. '```' → logprob: -6.617274761199951
    10. 'if' → logprob: -6.867274761199951

Token 787: ' E' (ID: 457)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.007104871328920126
    2. 'input' → logprob: -5.382104873657227
    3. 'ch' → logprob: -6.757104873657227
    4. 'chars' → logprob: -7.507104873657227
    5. '```' → logprob: -8.132104873657227
    6. '#' → logprob: -8.257104873657227
    7. '   ' → logprob: -9.132104873657227
    8. ' char' → logprob: -10.632104873657227
    9. 'inp' → logprob: -10.757104873657227
    10. 'bits' → logprob: -11.382104873657227

Token 788: '->' (ID: 609)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.25284481048583984
    2. 'bits' → logprob: -2.75284481048584
    3. 'for' → logprob: -3.12784481048584
    4. '   ' → logprob: -3.75284481048584
    5. 'code' → logprob: -3.87784481048584
    6. 'table' → logprob: -4.00284481048584
    7. 'ch' → logprob: -4.37784481048584
    8. 'bit' → logprob: -4.75284481048584
    9. 'chars' → logprob: -5.25284481048584
    10. 'input' → logprob: -5.25284481048584

Token 789: '000' (ID: 1302)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.7234225869178772
    2. 'bits' → logprob: -2.2234225273132324
    3. 'code' → logprob: -2.3484225273132324
    4. 'table' → logprob: -2.5984225273132324
    5. ''' → logprob: -2.7234225273132324
    6. ')' → logprob: -3.5984225273132324
    7. 'ch' → logprob: -3.5984225273132324
    8. '")' → logprob: -3.8484225273132324
    9. 'line' → logprob: -4.598422527313232
    10. '=' → logprob: -4.973422527313232

Token 790: '11' (ID: 994)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.10596548765897751
    2. 'bits' → logprob: -3.2309653759002686
    3. '   ' → logprob: -3.4809653759002686
    4. 'ch' → logprob: -5.230965614318848
    5. 'bit' → logprob: -5.355965614318848
    6. 'code' → logprob: -5.605965614318848
    7. 'chars' → logprob: -5.730965614318848
    8. 'input' → logprob: -5.730965614318848
    9. ' char' → logprob: -5.855965614318848
    10. 'mapping' → logprob: -6.730965614318848

Token 791: ',' (ID: 11)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.4734102487564087
    2. 'char' → logprob: -1.2234102487564087
    3. 'decoded' → logprob: -3.598410129547119
    4. 'bit' → logprob: -3.848410129547119
    5. '   ' → logprob: -3.973410129547119
    6. '```' → logprob: -5.848410129547119
    7. 'chars' → logprob: -6.098410129547119
    8. 'if' → logprob: -6.098410129547119
    9. 'code' → logprob: -6.348410129547119
    10. 'for' → logprob: -6.723410129547119

Token 792: ' T' (ID: 353)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.03379622846841812
    2. 'bits' → logprob: -3.7837963104248047
    3. '   ' → logprob: -6.283796310424805
    4. 'input' → logprob: -6.283796310424805
    5. 'chars' → logprob: -6.283796310424805
    6. 'ch' → logprob: -6.408796310424805
    7. 'bit' → logprob: -6.783796310424805
    8. 'inv' → logprob: -7.158796310424805
    9. '```' → logprob: -8.033796310424805
    10. '#' → logprob: -8.408796310424805

Token 793: '->' (ID: 609)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.15028119087219238
    2. 'bits' → logprob: -2.4002811908721924
    3. 'code' → logprob: -4.650280952453613
    4. 'ch' → logprob: -4.900280952453613
    5. 'input' → logprob: -4.900280952453613
    6. '   ' → logprob: -5.275280952453613
    7. 'if' → logprob: -5.525280952453613
    8. 'bit' → logprob: -5.525280952453613
    9. 'chars' → logprob: -5.650280952453613
    10. 'for' → logprob: -5.775280952453613

Token 794: '001' (ID: 7659)
  Prédit: '001'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '001' → logprob: -0.21772639453411102
    2. '"' → logprob: -1.8427263498306274
    3. '010' → logprob: -4.342726230621338
    4. '011' → logprob: -5.092726230621338
    5. '"P' → logprob: -5.092726230621338
    6. '000' → logprob: -5.592726230621338
    7. ''' → logprob: -5.592726230621338
    8. '111' → logprob: -6.717726230621338
    9. 'P' → logprob: -6.967726230621338
    10. '"E' → logprob: -7.592726230621338

Token 795: '11' (ID: 994)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -1.3119142055511475
    2. 'O' → logprob: -1.3119142055511475
    3. ''' → logprob: -1.5619142055511475
    4. '")' → logprob: -3.0619142055511475
    5. '')' → logprob: -3.0619142055511475
    6. ')' → logprob: -3.8119142055511475
    7. 'for' → logprob: -3.8119142055511475
    8. '#' → logprob: -3.9369142055511475
    9. '```' → logprob: -4.186914443969727
    10. 'E' → logprob: -4.311914443969727

Token 796: ' ...
' (ID: 12646)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.23135241866111755
    2. 'bits' → logprob: -1.73135244846344
    3. 'bit' → logprob: -3.9813523292541504
    4. 'chars' → logprob: -5.73135232925415
    5. '   ' → logprob: -6.48135232925415
    6. 'decoded' → logprob: -6.48135232925415
    7. '```' → logprob: -7.48135232925415
    8. 'code' → logprob: -7.48135232925415
    9. 'ch' → logprob: -7.60635232925415
    10. 'inv' → logprob: -7.73135232925415

Token 797: '   ' (ID: 271)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.04793977737426758
    2. 'bits' → logprob: -3.2979397773742676
    3. 'chars' → logprob: -6.047939777374268
    4. 'input' → logprob: -6.172939777374268
    5. 'ch' → logprob: -6.297939777374268
    6. 'bit' → logprob: -6.422939777374268
    7. '   ' → logprob: -7.297939777374268
    8. '#' → logprob: -8.17293930053711
    9. ' char' → logprob: -8.29793930053711
    10. 'code' → logprob: -8.79793930053711

Token 798: ' #
' (ID: 21888)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.016683822497725487
    2. 'bits' → logprob: -4.641684055328369
    3. 'input' → logprob: -6.141684055328369
    4. 'chars' → logprob: -6.641684055328369
    5. 'bit' → logprob: -6.641684055328369
    6. 'ch' → logprob: -7.641684055328369
    7. '#' → logprob: -7.766684055328369
    8. 'inv' → logprob: -8.391683578491211
    9. '   ' → logprob: -8.516683578491211
    10. 'code' → logprob: -8.641683578491211

Token 799: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.26623106002807617
    2. 'char' → logprob: -2.516231060028076
    3. 'bits' → logprob: -2.516231060028076
    4. 'decoded' → logprob: -3.766231060028076
    5. 'for' → logprob: -4.141231060028076
    6. 'if' → logprob: -4.516231060028076
    7. 'code' → logprob: -5.766231060028076
    8. 'chars' → logprob: -6.016231060028076
    9. 'bit' → logprob: -6.141231060028076
    10. 'continue' → logprob: -6.516231060028076

Token 800: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.818657636642456
    2. 'bits' → logprob: -1.193657636642456
    3. 'char' → logprob: -2.068657636642456
    4. 'decoded' → logprob: -2.568657636642456
    5. 'if' → logprob: -4.693657875061035
    6. 'code' → logprob: -4.943657875061035
    7. ' bits' → logprob: -5.068657875061035
    8. 'chars' → logprob: -5.193657875061035
    9. 'for' → logprob: -5.318657875061035
    10. 'bit' → logprob: -5.318657875061035

Token 801: ' But' (ID: 3072)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.5248498916625977
    2. 'bits' → logprob: -1.1498498916625977
    3. '   ' → logprob: -3.3998498916625977
    4. 'decoded' → logprob: -3.8998498916625977
    5. 'bit' → logprob: -4.274849891662598
    6. 'chars' → logprob: -5.274849891662598
    7. 'if' → logprob: -5.524849891662598
    8. ' char' → logprob: -5.899849891662598
    9. 'ch' → logprob: -6.024849891662598
    10. 'code' → logprob: -6.024849891662598

Token 802: ' input' (ID: 3422)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.07007403671741486
    2. 'bits' → logprob: -3.0700740814208984
    3. 'chars' → logprob: -4.945074081420898
    4. 'input' → logprob: -5.195074081420898
    5. 'bit' → logprob: -5.820074081420898
    6. 'ch' → logprob: -6.320074081420898
    7. '#' → logprob: -6.695074081420898
    8. 'code' → logprob: -7.320074081420898
    9. '   ' → logprob: -7.570074081420898
    10. 'decoded' → logprob: -7.945074081420898

Token 803: ' characters' (ID: 9862)
  Prédit: '_to'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_to' → logprob: -0.9957542419433594
    2. ' =' → logprob: -1.7457542419433594
    3. '_bits' → logprob: -1.8707542419433594
    4. '=' → logprob: -2.3707542419433594
    5. '_char' → logprob: -2.8707542419433594
    6. '_' → logprob: -3.6207542419433594
    7. 'bits' → logprob: -3.6207542419433594
    8. '_code' → logprob: -4.120754241943359
    9. 'char' → logprob: -4.245754241943359
    10. '```' → logprob: -4.995754241943359

Token 804: ' are' (ID: 553)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.2622707784175873
    2. ' =' → logprob: -1.7622708082199097
    3. '   ' → logprob: -3.76227068901062
    4. 'bits' → logprob: -4.262270927429199
    5. '+=' → logprob: -5.387270927429199
    6. '```' → logprob: -6.137270927429199
    7. '#' → logprob: -6.262270927429199
    8. '_bits' → logprob: -6.262270927429199
    9. 'for' → logprob: -6.387270927429199
    10. 'char' → logprob: -6.387270927429199

Token 805: ' not' (ID: 625)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -1.0684890747070312
    2. 'bits' → logprob: -1.3184890747070312
    3. 'code' → logprob: -2.1934890747070312
    4. 'for' → logprob: -2.6934890747070312
    5. '""' → logprob: -3.0684890747070312
    6. 'char' → logprob: -3.3184890747070312
    7. '{
' → logprob: -3.5684890747070312
    8. '{' → logprob: -3.6934890747070312
    9. '   ' → logprob: -4.568489074707031
    10. '```' → logprob: -4.818489074707031

Token 806: ' bits' (ID: 18189)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.8274649381637573
    2. 'code' → logprob: -1.5774649381637573
    3. 'char' → logprob: -1.7024649381637573
    4. '"' → logprob: -2.702465057373047
    5. '```' → logprob: -3.952465057373047
    6. 'table' → logprob: -4.077465057373047
    7. 'chars' → logprob: -4.327465057373047
    8. '""' → logprob: -4.702465057373047
    9. '#' → logprob: -4.952465057373047
    10. 'for' → logprob: -5.077465057373047

Token 807: ' (' (ID: 350)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.1353427618741989
    2. 'bits' → logprob: -2.260342836380005
    3. 'bit' → logprob: -4.510342597961426
    4. 'chars' → logprob: -5.885342597961426
    5. 'inv' → logprob: -6.135342597961426
    6. 'input' → logprob: -6.760342597961426
    7. 'decode' → logprob: -7.010342597961426
    8. '#' → logprob: -7.135342597961426
    9. '```' → logprob: -7.260342597961426
    10. 'rev' → logprob: -7.510342597961426

Token 808: '0' (ID: 15)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.1893919706344604
    2. 'for' → logprob: -1.9393919706344604
    3. 'bits' → logprob: -1.9393919706344604
    4. '"' → logprob: -2.56439208984375
    5. ')' → logprob: -2.93939208984375
    6. 'line' → logprob: -3.31439208984375
    7. 'ch' → logprob: -3.43939208984375
    8. 'code' → logprob: -3.56439208984375
    9. '```' → logprob: -3.56439208984375
    10. '#' → logprob: -3.81439208984375

Token 809: '/' (ID: 14)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.9288021922111511
    2. 'bits' → logprob: -1.053802251815796
    3. '=' → logprob: -2.553802251815796
    4. '```' → logprob: -3.303802251815796
    5. '   ' → logprob: -3.428802251815796
    6. ')' → logprob: -3.678802251815796
    7. ' for' → logprob: -4.553802013397217
    8. ' =' → logprob: -5.053802013397217
    9. ':' → logprob: -5.178802013397217
    10. ' bits' → logprob: -5.303802013397217

Token 810: '1' (ID: 16)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.9946439266204834
    2. 'bits' → logprob: -1.8696439266204834
    3. '=' → logprob: -3.1196439266204834
    4. ')' → logprob: -3.1196439266204834
    5. '0' → logprob: -3.2446439266204834
    6. '`' → logprob: -3.2446439266204834
    7. '```' → logprob: -3.2446439266204834
    8. '   ' → logprob: -3.3696439266204834
    9. '")' → logprob: -3.6196439266204834
    10. 'for' → logprob: -3.7446439266204834

Token 811: '),' (ID: 936)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.09991610795259476
    2. 'for' → logprob: -2.9749162197113037
    3. '   ' → logprob: -3.7249162197113037
    4. 'if' → logprob: -5.599915981292725
    5. '```' → logprob: -5.724915981292725
    6. ' bits' → logprob: -6.224915981292725
    7. 'char' → logprob: -6.349915981292725
    8. '#' → logprob: -6.474915981292725
    9. 'ch' → logprob: -6.599915981292725
    10. ' for' → logprob: -6.974915981292725

Token 812: ' but' (ID: 889)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.019315820187330246
    2. 'bits' → logprob: -4.894315719604492
    3. 'input' → logprob: -5.519315719604492
    4. '#' → logprob: -5.769315719604492
    5. 'chars' → logprob: -6.644315719604492
    6. 'bit' → logprob: -6.769315719604492
    7. 'inv' → logprob: -7.144315719604492
    8. 'ch' → logprob: -7.644315719604492
    9. '```' → logprob: -8.894315719604492
    10. 'decode' → logprob: -9.269315719604492

Token 813: ' characters' (ID: 9862)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.7150856852531433
    2. 'bits' → logprob: -1.090085744857788
    3. 'code' → logprob: -3.215085744857788
    4. 'for' → logprob: -3.465085744857788
    5. 'bit' → logprob: -3.590085744857788
    6. '   ' → logprob: -3.840085744857788
    7. '"' → logprob: -4.340085506439209
    8. 'input' → logprob: -4.465085506439209
    9. 'chars' → logprob: -4.715085506439209
    10. '#' → logprob: -5.215085506439209

Token 814: '.
' (ID: 558)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.01473688893020153
    2. 'bits' → logprob: -5.139736652374268
    3. '#' → logprob: -5.764736652374268
    4. 'input' → logprob: -6.139736652374268
    5. 'chars' → logprob: -6.889736652374268
    6. 'ch' → logprob: -7.264736652374268
    7. 'bit' → logprob: -7.264736652374268
    8. 'inv' → logprob: -7.514736652374268
    9. '   ' → logprob: -9.389737129211426
    10. 'rev' → logprob: -9.639737129211426

Token 815: '   ' (ID: 271)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.014396073296666145
    2. 'input' → logprob: -5.5143961906433105
    3. 'chars' → logprob: -5.8893961906433105
    4. 'bits' → logprob: -6.2643961906433105
    5. '```' → logprob: -6.2643961906433105
    6. '#' → logprob: -6.7643961906433105
    7. 'ch' → logprob: -7.1393961906433105
    8. 'inv' → logprob: -7.1393961906433105
    9. 'rev' → logprob: -8.514395713806152
    10. 'bit' → logprob: -8.514395713806152

Token 816: ' #
' (ID: 21888)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.006709566805511713
    2. 'input' → logprob: -5.506709575653076
    3. '#' → logprob: -6.506709575653076
    4. 'chars' → logprob: -7.881709575653076
    5. 'ch' → logprob: -8.131709098815918
    6. 'inv' → logprob: -8.881709098815918
    7. '```' → logprob: -9.631709098815918
    8. 'bits' → logprob: -9.756709098815918
    9. 'mapping' → logprob: -10.506709098815918
    10. 'code' → logprob: -10.506709098815918

Token 817: '   ' (ID: 271)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.012171478010714054
    2. 'input' → logprob: -5.512171268463135
    3. '#' → logprob: -6.262171268463135
    4. 'chars' → logprob: -6.512171268463135
    5. '   ' → logprob: -6.637171268463135
    6. 'inv' → logprob: -6.887171268463135
    7. 'ch' → logprob: -7.012171268463135
    8. 'mapping' → logprob: -8.012171745300293
    9. 'bits' → logprob: -8.137171745300293
    10. '```' → logprob: -8.637171745300293

Token 818: ' #' (ID: 1069)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.024898020550608635
    2. 'input' → logprob: -4.524898052215576
    3. '#' (adapté à ' #') → logprob: -5.149898052215576
    4. 'inv' → logprob: -5.649898052215576
    5. 'chars' → logprob: -6.649898052215576
    6. 'ch' → logprob: -6.774898052215576
    7. 'bits' → logprob: -7.899898052215576
    8. 'mapping' → logprob: -8.024897575378418
    9. 'rev' → logprob: -8.149897575378418
    10. 'bit' → logprob: -8.649897575378418

Token 819: ' So' (ID: 2632)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.02740638703107834
    2. 'bits' → logprob: -4.527406215667725
    3. 'input' → logprob: -5.152406215667725
    4. 'chars' → logprob: -5.652406215667725
    5. 'inv' → logprob: -6.152406215667725
    6. 'ch' → logprob: -6.652406215667725
    7. '#' → logprob: -6.777406215667725
    8. 'bit' → logprob: -6.902406215667725
    9. 'decode' → logprob: -8.527406692504883
    10. 'inp' → logprob: -8.527406692504883

Token 820: ' the' (ID: 290)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.020203853026032448
    2. 'input' → logprob: -5.020204067230225
    3. '#' → logprob: -5.645204067230225
    4. '   ' → logprob: -6.020204067230225
    5. 'chars' → logprob: -6.270204067230225
    6. 'ch' → logprob: -6.895204067230225
    7. 'inv' → logprob: -6.895204067230225
    8. 'bits' → logprob: -7.145204067230225
    9. 'mapping' → logprob: -7.395204067230225
    10. ' char' → logprob: -7.770204067230225

Token 821: ' problem' (ID: 4792)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.04174813628196716
    2. 'input' → logprob: -3.541748046875
    3. '#' → logprob: -5.791748046875
    4. 'bits' → logprob: -6.041748046875
    5. 'inv' → logprob: -6.791748046875
    6. 'mapping' → logprob: -7.041748046875
    7. 'code' → logprob: -7.166748046875
    8. 'bit' → logprob: -7.166748046875
    9. 'decoded' → logprob: -7.416748046875
    10. 'chars' → logprob: -7.416748046875

Token 822: ' statement' (ID: 9710)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.6557462811470032
    2. '=' → logprob: -1.6557462215423584
    3. 'bits' → logprob: -2.6557462215423584
    4. '   ' → logprob: -2.9057462215423584
    5. ' =' → logprob: -3.4057462215423584
    6. '#' → logprob: -3.6557462215423584
    7. ':' → logprob: -3.7807462215423584
    8. '_char' → logprob: -4.4057464599609375
    9. 'input' → logprob: -4.6557464599609375
    10. 'code' → logprob: -4.6557464599609375

Token 823: ' says' (ID: 5003)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.9473690986633301
    2. '=' → logprob: -1.94736909866333
    3. ' =' → logprob: -2.19736909866333
    4. '   ' → logprob: -2.32236909866333
    5. 'bits' → logprob: -2.82236909866333
    6. ':' → logprob: -2.94736909866333
    7. '_char' → logprob: -3.69736909866333
    8. '#' → logprob: -3.82236909866333
    9. 'code' → logprob: -4.32236909866333
    10. '```' → logprob: -4.44736909866333

Token 824: ':
' (ID: 734)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.015291745774447918
    2. 'input' → logprob: -5.515291690826416
    3. '#' → logprob: -5.765291690826416
    4. 'ch' → logprob: -6.015291690826416
    5. '   ' → logprob: -6.140291690826416
    6. 'chars' → logprob: -6.140291690826416
    7. 'bits' → logprob: -7.890291690826416
    8. 'inv' → logprob: -8.765292167663574
    9. 'inp' → logprob: -8.765292167663574
    10. '```' → logprob: -9.015292167663574

Token 825: '   ' (ID: 271)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.06496109813451767
    2. '   ' → logprob: -3.3149611949920654
    3. 'bits' → logprob: -5.064960956573486
    4. 'input' → logprob: -5.314960956573486
    5. 'bit' → logprob: -5.939960956573486
    6. 'decoded' → logprob: -6.189960956573486
    7. '#' → logprob: -6.314960956573486
    8. 'chars' → logprob: -6.314960956573486
    9. 'ch' → logprob: -6.439960956573486
    10. '```' → logprob: -6.689960956573486

Token 826: ' #' (ID: 1069)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.04676099121570587
    2. '   ' → logprob: -3.6717610359191895
    3. 'input' → logprob: -5.1717610359191895
    4. 'ch' → logprob: -5.4217610359191895
    5. 'bits' → logprob: -5.6717610359191895
    6. 'chars' → logprob: -6.4217610359191895
    7. 'bit' → logprob: -6.9217610359191895
    8. '#' (adapté à ' #') → logprob: -7.2967610359191895
    9. 'mapping' → logprob: -7.2967610359191895
    10. '```' → logprob: -7.2967610359191895

Token 827: ' "' (ID: 392)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.018640320748090744
    2. '   ' → logprob: -4.893640518188477
    3. 'input' → logprob: -5.393640518188477
    4. 'ch' → logprob: -6.018640518188477
    5. '#' → logprob: -6.768640518188477
    6. 'chars' → logprob: -7.143640518188477
    7. 'inv' → logprob: -7.268640518188477
    8. 'mapping' → logprob: -7.893640518188477
    9. '```' → logprob: -8.518640518188477
    10. ' char' → logprob: -9.143640518188477

Token 828: '短' (ID: 40730)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.0499269925057888
    2. '#' → logprob: -3.674926996231079
    3. 'input' → logprob: -4.0499267578125
    4. 'ch' → logprob: -6.1749267578125
    5. 'chars' → logprob: -6.6749267578125
    6. '   ' → logprob: -7.4249267578125
    7. 'mapping' → logprob: -7.5499267578125
    8. 'inp' → logprob: -7.7999267578125
    9. 'inv' → logprob: -8.4249267578125
    10. '```' → logprob: -8.7999267578125

Token 829: 'く' (ID: 10459)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.7937785387039185
    2. '#' → logprob: -2.043778419494629
    3. '```' → logprob: -2.293778419494629
    4. '   ' → logprob: -3.043778419494629
    5. 'table' → logprob: -3.043778419494629
    6. 'chars' → logprob: -3.293778419494629
    7. 'for' → logprob: -3.418778419494629
    8. 'input' → logprob: -3.918778419494629
    9. '"' → logprob: -4.168778419494629
    10. ')' → logprob: -4.293778419494629

Token 830: 'して' (ID: 22440)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.1351896971464157
    2. '   ' → logprob: -2.6351897716522217
    3. 'input' → logprob: -3.8851897716522217
    4. ' char' → logprob: -4.885189533233643
    5. '#' → logprob: -5.010189533233643
    6. 'chars' → logprob: -5.135189533233643
    7. '```' → logprob: -5.510189533233643
    8. 'ch' → logprob: -5.760189533233643
    9. 'mapping' → logprob: -6.760189533233643
    10. 'for' → logprob: -7.010189533233643

Token 831: '......' (ID: 27271)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.16290707886219025
    2. '```' → logprob: -2.537907123565674
    3. 'ch' → logprob: -4.287907123565674
    4. '   ' → logprob: -4.412907123565674
    5. 'input' → logprob: -4.412907123565674
    6. 'chars' → logprob: -4.412907123565674
    7. 'bits' → logprob: -4.537907123565674
    8. '``' → logprob: -5.912907123565674
    9. 'bit' → logprob: -6.537907123565674
    10. 'for' → logprob: -6.662907123565674

Token 832: 'あ' (ID: 10294)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.1505247801542282
    2. '   ' → logprob: -2.900524854660034
    3. 'bits' → logprob: -3.650524854660034
    4. ' char' → logprob: -4.525524616241455
    5. 'input' → logprob: -4.900524616241455
    6. 'ch' → logprob: -5.025524616241455
    7. '```' → logprob: -5.150524616241455
    8. 'for' → logprob: -5.525524616241455
    9. 'chars' → logprob: -5.525524616241455
    10. 'bit' → logprob: -5.650524616241455

Token 833: '、' (ID: 1395)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.24468626081943512
    2. 'bits' → logprob: -2.2446863651275635
    3. 'input' → logprob: -3.6196863651275635
    4. '#' → logprob: -4.119686126708984
    5. 'for' → logprob: -4.369686126708984
    6. 'bit' → logprob: -4.619686126708984
    7. 'chars' → logprob: -4.744686126708984
    8. '   ' → logprob: -4.744686126708984
    9. 'code' → logprob: -4.744686126708984
    10. 'ch' → logprob: -5.869686126708984

Token 834: ' 「' (ID: 36702)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.7766373753547668
    2. 'bits' → logprob: -0.7766373753547668
    3. '   ' → logprob: -3.276637315750122
    4. 'ch' → logprob: -4.776637554168701
    5. 'bit' → logprob: -5.026637554168701
    6. 'chars' → logprob: -5.151637554168701
    7. 'for' → logprob: -5.151637554168701
    8. '```' → logprob: -5.151637554168701
    9. 'input' → logprob: -6.276637554168701
    10. '#' → logprob: -6.276637554168701

Token 835: '111' (ID: 8780)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.8411325812339783
    2. 'char' → logprob: -1.466132640838623
    3. 'for' → logprob: -2.841132640838623
    4. 'input' → logprob: -3.091132640838623
    5. 'code' → logprob: -3.341132640838623
    6. 'table' → logprob: -3.466132640838623
    7. '#' → logprob: -3.716132640838623
    8. 'line' → logprob: -3.841132640838623
    9. 'bit' → logprob: -4.091132640838623
    10. 'decoded' → logprob: -4.091132640838623

Token 836: '」' (ID: 5252)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -1.2379167079925537
    2. '_' → logprob: -1.6129167079925537
    3. '"' → logprob: -1.9879167079925537
    4. '_to' → logprob: -2.8629167079925537
    5. '   ' → logprob: -2.9879167079925537
    6. '```' → logprob: -3.7379167079925537
    7. '_bits' → logprob: -3.7379167079925537
    8. '[' → logprob: -3.8629167079925537
    9. '_chars' → logprob: -3.8629167079925537
    10. '=' → logprob: -3.9879167079925537

Token 837: 'なら' (ID: 100875)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.0317360162734985
    2. '"' → logprob: -1.9067360162734985
    3. '   ' → logprob: -2.156735897064209
    4. 'bits' → logprob: -2.906735897064209
    5. '=' → logprob: -3.531735897064209
    6. '")' → logprob: -3.656735897064209
    7. '#' → logprob: -3.781735897064209
    8. '[' → logprob: -4.031735897064209
    9. ' for' → logprob: -4.031735897064209
    10. ')' → logprob: -4.031735897064209

Token 838: 'あります' (ID: 101560)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.13185103237628937
    2. 'input' → logprob: -3.5068509578704834
    3. 'for' → logprob: -4.0068511962890625
    4. '   ' → logprob: -4.3818511962890625
    5. 'chars' → logprob: -4.3818511962890625
    6. '#' → logprob: -4.5068511962890625
    7. ' char' → logprob: -4.7568511962890625
    8. 'code' → logprob: -5.0068511962890625
    9. 'bits' → logprob: -5.2568511962890625
    10. 'ch' → logprob: -5.7568511962890625

Token 839: '。' (ID: 788)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7679622173309326
    2. 'char' → logprob: -0.8929622173309326
    3. 'for' → logprob: -3.6429622173309326
    4. 'bits' → logprob: -3.7679622173309326
    5. '#' → logprob: -4.267962455749512
    6. 'input' → logprob: -4.517962455749512
    7. ' char' → logprob: -4.892962455749512
    8. '```' → logprob: -4.892962455749512
    9. 'chars' → logprob: -5.267962455749512
    10. 'continue' → logprob: -5.642962455749512

Token 840: 'じゃ' (ID: 156498)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.44543296098709106
    2. 'bits' → logprob: -1.5704329013824463
    3. 'char' → logprob: -2.8204329013824463
    4. 'decoded' → logprob: -3.6954329013824463
    5. 'for' → logprob: -3.9454329013824463
    6. '#' → logprob: -5.320433139801025
    7. 'bit' → logprob: -5.320433139801025
    8. 'code' → logprob: -5.570433139801025
    9. 'if' → logprob: -5.695433139801025
    10. 'input' → logprob: -5.695433139801025

Token 841: 'あ' (ID: 10294)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.8467850089073181
    2. '"' → logprob: -2.596785068511963
    3. '   ' → logprob: -2.721785068511963
    4. 'char' → logprob: -2.721785068511963
    5. '```' → logprob: -3.221785068511963
    6. 'code' → logprob: -3.721785068511963
    7. 'input' → logprob: -3.846785068511963
    8. '")' → logprob: -3.846785068511963
    9. '=' → logprob: -3.846785068511963
    10. ' for' → logprob: -3.846785068511963

Token 842: '最' (ID: 5889)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.19781522452831268
    2. 'input' → logprob: -2.697815179824829
    3. 'bits' → logprob: -2.822815179824829
    4. 'code' → logprob: -4.447815418243408
    5. 'bit' → logprob: -4.697815418243408
    6. 'chars' → logprob: -4.697815418243408
    7. '#' → logprob: -5.572815418243408
    8. 'for' → logprob: -5.572815418243408
    9. '   ' → logprob: -5.947815418243408
    10. ' char' → logprob: -5.947815418243408

Token 843: '初' (ID: 26719)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -1.115807294845581
    2. '```' → logprob: -1.490807294845581
    3. 'bits' → logprob: -1.990807294845581
    4. 'for' → logprob: -3.365807294845581
    5. 'code' → logprob: -3.365807294845581
    6. 'chars' → logprob: -3.365807294845581
    7. '=' → logprob: -3.740807294845581
    8. ' =' → logprob: -3.865807294845581
    9. '`' → logprob: -3.990807294845581
    10. 'bit' → logprob: -3.990807294845581

Token 844: 'は' (ID: 5205)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.7189648747444153
    2. '   ' → logprob: -1.3439648151397705
    3. '```' → logprob: -2.4689648151397705
    4. '=' → logprob: -3.0939648151397705
    5. 'for' → logprob: -3.3439648151397705
    6. 'char' → logprob: -3.7189648151397705
    7. 'if' → logprob: -4.59396505355835
    8. '#' → logprob: -4.96896505355835
    9. ' bits' → logprob: -5.21896505355835
    10. ' =' → logprob: -5.21896505355835

Token 845: '「' (ID: 6055)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.04576249420642853
    2. 'input' → logprob: -3.795762538909912
    3. 'bit' → logprob: -5.295762538909912
    4. 'code' → logprob: -5.670762538909912
    5. '#' → logprob: -5.795762538909912
    6. 'mapping' → logprob: -5.920762538909912
    7. 'bits' → logprob: -6.170762538909912
    8. 'chars' → logprob: -6.670762538909912
    9. 'ch' → logprob: -6.795762538909912
    10. 'for' → logprob: -7.045762538909912

Token 846: 'P' (ID: 47)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.219781756401062
    2. ''' → logprob: -1.594781756401062
    3. 'bits' → logprob: -1.969781756401062
    4. '"' → logprob: -2.5947818756103516
    5. 'line' → logprob: -3.2197818756103516
    6. 'ch' → logprob: -3.2197818756103516
    7. '   ' → logprob: -3.4697818756103516
    8. 'code' → logprob: -3.4697818756103516
    9. '`' → logprob: -3.7197818756103516
    10. '")' → logprob: -4.219781875610352

Token 847: '」' (ID: 5252)
  Prédit: '_to'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_to' → logprob: -1.7262144088745117
    2. ' =' → logprob: -1.8512144088745117
    3. 'char' → logprob: -1.8512144088745117
    4. '=' → logprob: -2.7262144088745117
    5. ':' → logprob: -3.1012144088745117
    6. '"' → logprob: -3.1012144088745117
    7. '   ' → logprob: -3.6012144088745117
    8. 'for' → logprob: -3.6012144088745117
    9. 'input' → logprob: -3.7262144088745117
    10. 'bits' → logprob: -3.8512144088745117

Token 848: 'ですね' (ID: 131656)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.12240279465913773
    2. 'input' → logprob: -2.3724029064178467
    3. '#' → logprob: -5.247402667999268
    4. '   ' → logprob: -5.747402667999268
    5. 'chars' → logprob: -6.122402667999268
    6. ' char' → logprob: -6.247402667999268
    7. 'mapping' → logprob: -6.372402667999268
    8. 'code' → logprob: -6.497402667999268
    9. 'bits' → logprob: -6.622402667999268
    10. 'bit' → logprob: -6.747402667999268

Token 849: '。' (ID: 788)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.39269787073135376
    2. 'char' → logprob: -1.892697811126709
    3. '   ' → logprob: -2.142697811126709
    4. 'decoded' → logprob: -4.267697811126709
    5. 'bit' → logprob: -4.642697811126709
    6. 'chars' → logprob: -5.142697811126709
    7. 'input' → logprob: -5.267697811126709
    8. 'code' → logprob: -5.267697811126709
    9. '#' → logprob: -5.517697811126709
    10. 'if' → logprob: -6.142697811126709

Token 850: 'そう' (ID: 55080)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.21468958258628845
    2. 'char' → logprob: -1.9646896123886108
    3. 'bit' → logprob: -4.0896897315979
    4. 'input' → logprob: -4.4646897315979
    5. 'decoded' → logprob: -4.8396897315979
    6. '   ' → logprob: -5.2146897315979
    7. 'chars' → logprob: -5.5896897315979
    8. 'code' → logprob: -6.0896897315979
    9. 'ch' → logprob: -7.2146897315979
    10. '#' → logprob: -7.2146897315979

Token 851: 'すると' (ID: 164870)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7962725162506104
    2. 'char' → logprob: -1.9212725162506104
    3. 'for' → logprob: -2.1712725162506104
    4. '"' → logprob: -2.7962725162506104
    5. '#' → logprob: -2.9212725162506104
    6. '```' → logprob: -3.4212725162506104
    7. '=' → logprob: -3.7962725162506104
    8. 'bits' → logprob: -3.9212725162506104
    9. 'def' → logprob: -4.546272277832031
    10. 'input' → logprob: -4.921272277832031

Token 852: '残' (ID: 65394)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.033422064036130905
    2. 'input' → logprob: -4.283421993255615
    3. 'mapping' → logprob: -5.533421993255615
    4. 'ch' → logprob: -6.033421993255615
    5. 'bits' → logprob: -6.158421993255615
    6. ' char' → logprob: -6.158421993255615
    7. '   ' → logprob: -6.533421993255615
    8. 'chars' → logprob: -6.533421993255615
    9. '#' → logprob: -6.783421993255615
    10. 'decoded' → logprob: -7.158421993255615

Token 853: 'り' (ID: 7297)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9614259600639343
    2. '=' → logprob: -1.586426019668579
    3. 'for' → logprob: -2.086426019668579
    4. ' =' → logprob: -2.586426019668579
    5. '_code' → logprob: -3.086426019668579
    6. '_chars' → logprob: -3.586426019668579
    7. '_char' → logprob: -4.21142578125
    8. '"' → logprob: -4.46142578125
    9. '```' → logprob: -4.46142578125
    10. '_input' → logprob: -4.71142578125

Token 854: 'は' (ID: 5205)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.04857919365167618
    2. '+=' → logprob: -4.298579216003418
    3. ' =' → logprob: -4.548579216003418
    4. 'bits' → logprob: -5.048579216003418
    5. '_bits' → logprob: -5.298579216003418
    6. ' +=' → logprob: -6.673579216003418
    7. '```' → logprob: -6.673579216003418
    8. '   ' → logprob: -6.798579216003418
    9. '_code' → logprob: -7.048579216003418
    10. 'for' → logprob: -7.048579216003418

Token 855: '「' (ID: 6055)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -1.063706636428833
    2. ''' → logprob: -1.938706636428833
    3. 'line' → logprob: -1.938706636428833
    4. '   ' → logprob: -2.563706636428833
    5. 'bits' → logprob: -3.188706636428833
    6. 'for' → logprob: -3.688706636428833
    7. '`' → logprob: -3.688706636428833
    8. ')' → logprob: -3.813706636428833
    9. 'ch' → logprob: -3.813706636428833
    10. ' line' → logprob: -3.938706636428833

Token 856: '11' (ID: 994)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.9158464670181274
    2. ''' → logprob: -1.0408464670181274
    3. ')' → logprob: -2.790846347808838
    4. ' "' → logprob: -3.040846347808838
    5. 'ch' → logprob: -3.415846347808838
    6. '`' → logprob: -4.290846347808838
    7. ' line' → logprob: -4.415846347808838
    8. 'line' → logprob: -4.540846347808838
    9. '")' → logprob: -4.665846347808838
    10. '```' → logprob: -5.040846347808838

Token 857: '」' (ID: 5252)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.7648181915283203
    2. '=' → logprob: -2.0148181915283203
    3. 'for' → logprob: -2.6398181915283203
    4. '_' → logprob: -2.7648181915283203
    5. ' =' → logprob: -2.7648181915283203
    6. ''' → logprob: -3.1398181915283203
    7. '#' → logprob: -4.01481819152832
    8. '[' → logprob: -4.01481819152832
    9. ')' → logprob: -4.38981819152832
    10. '
' → logprob: -4.63981819152832

Token 858: 'ですが' (ID: 76427)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.07444283366203308
    2. '   ' → logprob: -3.5744428634643555
    3. 'input' → logprob: -3.8244428634643555
    4. 'bits' → logprob: -5.4494428634643555
    5. ' char' → logprob: -5.6994428634643555
    6. 'bit' → logprob: -5.9494428634643555
    7. 'ch' → logprob: -6.3244428634643555
    8. 'decoded' → logprob: -6.5744428634643555
    9. 'code' → logprob: -6.6994428634643555
    10. 'decode' → logprob: -6.6994428634643555

Token 859: '..."
' (ID: 63347)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.8531880974769592
    2. 'decoded' → logprob: -1.1031880378723145
    3. 'char' → logprob: -2.3531880378723145
    4. '   ' → logprob: -3.2281880378723145
    5. 'bit' → logprob: -3.8531880378723145
    6. 'decode' → logprob: -4.2281880378723145
    7. 'for' → logprob: -4.2281880378723145
    8. '#' → logprob: -4.7281880378723145
    9. ' bits' → logprob: -4.7281880378723145
    10. 'b' → logprob: -5.3531880378723145

Token 860: '   ' (ID: 271)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.17677807807922363
    2. '   ' → logprob: -2.4267780780792236
    3. 'input' → logprob: -4.0517778396606445
    4. 'bits' → logprob: -4.0517778396606445
    5. 'decoded' → logprob: -4.6767778396606445
    6. ' char' → logprob: -5.3017778396606445
    7. 'bit' → logprob: -5.6767778396606445
    8. 'chars' → logprob: -5.8017778396606445
    9. '#' → logprob: -5.9267778396606445
    10. 'ch' → logprob: -5.9267778396606445

Token 861: ' #' (ID: 1069)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.2275369018316269
    2. '   ' → logprob: -2.477536916732788
    3. 'input' → logprob: -3.102536916732788
    4. 'bits' → logprob: -3.602536916732788
    5. 'bit' → logprob: -4.602536678314209
    6. '#' (adapté à ' #') → logprob: -4.852536678314209
    7. 'code' → logprob: -5.227536678314209
    8. 'for' → logprob: -5.477536678314209
    9. 'chars' → logprob: -5.727536678314209
    10. 'decoded' → logprob: -5.727536678314209

Token 862: ' and' (ID: 326)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.11904189735651016
    2. '   ' → logprob: -2.744041919708252
    3. 'input' → logprob: -3.619041919708252
    4. 'ch' → logprob: -5.244041919708252
    5. 'bits' → logprob: -5.244041919708252
    6. 'chars' → logprob: -5.869041919708252
    7. ' char' → logprob: -6.494041919708252
    8. 'bit' → logprob: -6.744041919708252
    9. 'mapping' → logprob: -6.869041919708252
    10. '#' → logprob: -7.494041919708252

Token 863: ' sample' (ID: 10176)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.061236437410116196
    2. 'input' → logprob: -4.061236381530762
    3. '   ' → logprob: -4.436236381530762
    4. ' char' → logprob: -4.811236381530762
    5. 'ch' → logprob: -5.186236381530762
    6. 'bits' → logprob: -5.436236381530762
    7. 'bit' → logprob: -6.061236381530762
    8. '#' → logprob: -6.436236381530762
    9. 'chars' → logprob: -6.436236381530762
    10. 'decoded' → logprob: -6.436236381530762

Token 864: ' input' (ID: 3422)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.0679917261004448
    2. 'input' → logprob: -3.8179917335510254
    3. 'bits' → logprob: -3.8179917335510254
    4. '   ' → logprob: -4.942991733551025
    5. 'chars' → logprob: -5.067991733551025
    6. 'ch' → logprob: -5.692991733551025
    7. 'bit' → logprob: -6.442991733551025
    8. ' char' → logprob: -7.192991733551025
    9. 'decoded' → logprob: -7.692991733551025
    10. '```' → logprob: -7.817991733551025

Token 865: ' "?' (ID: 72488)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.04930261895060539
    2. 'bits' → logprob: -3.799302577972412
    3. 'input' → logprob: -4.674302577972412
    4. 'ch' → logprob: -5.424302577972412
    5. '   ' → logprob: -5.674302577972412
    6. 'bit' → logprob: -5.924302577972412
    7. 'chars' → logprob: -6.049302577972412
    8. ' char' → logprob: -7.299302577972412
    9. 'decoded' → logprob: -7.299302577972412
    10. 'inv' → logprob: -7.424302577972412

Token 866: 'D' (ID: 35)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.1731937825679779
    2. '   ' → logprob: -3.0481936931610107
    3. 'for' → logprob: -3.2981936931610107
    4. 'bits' → logprob: -3.9231936931610107
    5. 'input' → logprob: -4.04819393157959
    6. ' char' → logprob: -4.92319393157959
    7. 'chars' → logprob: -5.04819393157959
    8. 'ch' → logprob: -5.42319393157959
    9. '```' → logprob: -5.54819393157959
    10. 'code' → logprob: -5.79819393157959

Token 867: '-C' (ID: 10050)
  Prédit: '_to'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_to' → logprob: -0.7865434885025024
    2. '=' → logprob: -1.5365434885025024
    3. '_bits' → logprob: -2.161543369293213
    4. ' =' → logprob: -3.161543369293213
    5. '_chars' → logprob: -3.161543369293213
    6. 'to' → logprob: -3.161543369293213
    7. '_' → logprob: -3.661543369293213
    8. ')' → logprob: -5.036543369293213
    9. '_code' → logprob: -5.161543369293213
    10. '"' → logprob: -5.286543369293213

Token 868: ''' (ID: 6)
  Prédit: '_to'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_to' → logprob: -0.09136728942394257
    2. '_bits' → logprob: -3.716367244720459
    3. '_char' → logprob: -3.841367244720459
    4. 'char' → logprob: -4.341367244720459
    5. '_' → logprob: -4.841367244720459
    6. '_chars' → logprob: -5.466367244720459
    7. ' =' → logprob: -5.966367244720459
    8. '_map' → logprob: -6.091367244720459
    9. 'to' → logprob: -6.216367244720459
    10. '```' → logprob: -6.466367244720459

Token 869: 'K' (ID: 42)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.9935773611068726
    2. '_to' → logprob: -1.9935773611068726
    3. '_bits' → logprob: -1.9935773611068726
    4. 'to' → logprob: -2.493577480316162
    5. '"' → logprob: -2.743577480316162
    6. 'bits' → logprob: -2.993577480316162
    7. 'char' → logprob: -3.368577480316162
    8. '=' → logprob: -3.618577480316162
    9. 'chars' → logprob: -4.368577480316162
    10. '_chars' → logprob: -4.493577480316162

Token 870: 'OP' (ID: 4164)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -1.3038450479507446
    2. ' =' → logprob: -1.4288450479507446
    3. '=' → logprob: -1.8038450479507446
    4. '_to' → logprob: -2.178844928741455
    5. ''' → logprob: -3.303844928741455
    6. '":' → logprob: -3.803844928741455
    7. '```' → logprob: -4.053844928741455
    8. '"]' → logprob: -4.303844928741455
    9. '_bits' → logprob: -4.303844928741455
    10. 'to' → logprob: -4.553844928741455

Token 871: 'UA' (ID: 26004)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.5931981205940247
    2. ' =' → logprob: -2.09319806098938
    3. ''' → logprob: -2.59319806098938
    4. '")' → logprob: -2.59319806098938
    5. '=' → logprob: -3.21819806098938
    6. 'A' → logprob: -3.71819806098938
    7. 'U' → logprob: -4.468198299407959
    8. 'UA' → logprob: -4.593198299407959
    9. '"]' → logprob: -4.718198299407959
    10. ')' → logprob: -4.968198299407959

Token 872: '"' (ID: 1)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.1664777398109436
    2. 'bits' → logprob: -2.541477680206299
    3. '   ' → logprob: -3.541477680206299
    4. 'bit' → logprob: -4.541477680206299
    5. 'ch' → logprob: -4.666477680206299
    6. 'input' → logprob: -4.916477680206299
    7. 'for' → logprob: -5.666477680206299
    8. 'code' → logprob: -5.791477680206299
    9. 'chars' → logprob: -5.916477680206299
    10. ' char' → logprob: -6.166477680206299

Token 873: ' dec' (ID: 1885)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.020492488518357277
    2. 'input' → logprob: -4.3954925537109375
    3. '#' → logprob: -5.1454925537109375
    4. 'ch' → logprob: -7.0204925537109375
    5. 'chars' → logprob: -8.020492553710938
    6. 'bits' → logprob: -8.145492553710938
    7. 'inv' → logprob: -8.895492553710938
    8. 'bit' → logprob: -9.020492553710938
    9. '   ' → logprob: -9.270492553710938
    10. 'inp' → logprob: -10.020492553710938

Token 874: 'odes' (ID: 3821)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7784136533737183
    2. '=' → logprob: -1.5284136533737183
    3. ' =' → logprob: -2.278413772583008
    4. 'bits' → logprob: -2.403413772583008
    5. 'char' → logprob: -2.903413772583008
    6. '_to' → logprob: -4.778413772583008
    7. '=input' → logprob: -4.778413772583008
    8. '```' → logprob: -4.778413772583008
    9. ' bits' → logprob: -5.278413772583008
    10. 'input' → logprob: -5.278413772583008

Token 875: ' to' (ID: 316)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.027829186990857124
    2. 'input' → logprob: -4.027829170227051
    3. '#' → logprob: -5.527829170227051
    4. 'ch' → logprob: -6.027829170227051
    5. 'chars' → logprob: -7.277829170227051
    6. '   ' → logprob: -7.277829170227051
    7. 'bits' → logprob: -7.527829170227051
    8. 'code' → logprob: -7.902829170227051
    9. 'bit' → logprob: -7.902829170227051
    10. 'inp' → logprob: -8.77782917022705

Token 876: ' "' (ID: 392)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.48481976985931396
    2. 'char' → logprob: -1.984819769859314
    3. '"' → logprob: -2.6098198890686035
    4. 'decoded' → logprob: -2.9848198890686035
    5. '```' → logprob: -3.3598198890686035
    6. 'input' → logprob: -4.1098198890686035
    7. 'bit' → logprob: -4.1098198890686035
    8. 'code' → logprob: -4.2348198890686035
    9. ' bits' → logprob: -4.6098198890686035
    10. 'chars' → logprob: -5.2348198890686035

Token 877: 'P' (ID: 47)
  Prédit: 'P'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'P' → logprob: -0.004604334011673927
    2. '"' → logprob: -6.504604339599609
    3. '"P' → logprob: -6.504604339599609
    4. '```' → logprob: -7.004604339599609
    5. ''' → logprob: -8.00460433959961
    6. '`' → logprob: -8.87960433959961
    7. 'PET' → logprob: -9.12960433959961
    8. 'PE' → logprob: -10.50460433959961
    9. 'Peter' → logprob: -10.50460433959961
    10. '"""' → logprob: -11.00460433959961

Token 878: 'ETER' (ID: 39956)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.2096594125032425
    2. 'char' → logprob: -2.0846593379974365
    3. 'for' → logprob: -3.8346593379974365
    4. ' bits' → logprob: -5.084659576416016
    5. 'bit' → logprob: -5.084659576416016
    6. 'code' → logprob: -5.209659576416016
    7. '```' → logprob: -5.209659576416016
    8. 'chars' → logprob: -5.334659576416016
    9. 'decoded' → logprob: -5.459659576416016
    10. 'input' → logprob: -5.709659576416016

Token 879: ' POT' (ID: 100071)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.2810356020927429
    2. 'bits' → logprob: -1.5310356616973877
    3. 'ch' → logprob: -4.531035423278809
    4. 'chars' → logprob: -4.781035423278809
    5. 'bit' → logprob: -5.156035423278809
    6. 'input' → logprob: -7.406035423278809
    7. '#' → logprob: -7.531035423278809
    8. '   ' → logprob: -7.656035423278809
    9. 'if' → logprob: -7.781035423278809
    10. 'code' → logprob: -7.781035423278809

Token 880: 'TER' (ID: 6147)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.5350135564804077
    2. 'bits' → logprob: -1.6600135564804077
    3. ' char' → logprob: -2.4100136756896973
    4. ' bits' → logprob: -3.2850136756896973
    5. 'chars' → logprob: -4.285013675689697
    6. '_to' → logprob: -4.285013675689697
    7. '```' → logprob: -4.535013675689697
    8. 's' → logprob: -4.910013675689697
    9. '_bits' → logprob: -4.910013675689697
    10. 'bit' → logprob: -5.285013675689697

Token 881: '"
' (ID: 1092)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.02923218533396721
    2. 'input' → logprob: -3.9042322635650635
    3. '#' → logprob: -5.529232025146484
    4. 'ch' → logprob: -6.404232025146484
    5. 'chars' → logprob: -7.154232025146484
    6. '   ' → logprob: -7.279232025146484
    7. 'inp' → logprob: -8.154232025146484
    8. 'inv' → logprob: -8.279232025146484
    9. 'bits' → logprob: -8.404232025146484
    10. 'code' → logprob: -8.529232025146484

Token 882: '   ' (ID: 271)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.2920313775539398
    2. '   ' → logprob: -1.7920314073562622
    3. 'bits' → logprob: -3.0420312881469727
    4. 'bit' → logprob: -4.667031288146973
    5. '```' → logprob: -4.667031288146973
    6. ' char' → logprob: -5.417031288146973
    7. 'chars' → logprob: -5.667031288146973
    8. 'input' → logprob: -5.917031288146973
    9. 'decoded' → logprob: -6.042031288146973
    10. 'ch' → logprob: -6.167031288146973

Token 883: ' #
' (ID: 21888)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.4137080907821655
    2. 'bits' → logprob: -1.5387080907821655
    3. 'decoded' → logprob: -2.538708209991455
    4. 'bit' → logprob: -3.413708209991455
    5. 'decode' → logprob: -5.788708209991455
    6. '   ' → logprob: -5.913708209991455
    7. 'chars' → logprob: -6.038708209991455
    8. 'code' → logprob: -7.038708209991455
    9. 'inv' → logprob: -7.163708209991455
    10. 'input' → logprob: -7.538708209991455

Token 884: '   ' (ID: 271)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.023797286674380302
    2. 'bits' → logprob: -4.523797512054443
    3. 'input' → logprob: -5.023797512054443
    4. 'bit' → logprob: -6.398797512054443
    5. 'chars' → logprob: -6.648797512054443
    6. 'ch' → logprob: -6.898797512054443
    7. 'inv' → logprob: -7.648797512054443
    8. '   ' → logprob: -8.023797035217285
    9. '#' → logprob: -8.273797035217285
    10. 'code' → logprob: -8.273797035217285

Token 885: ' #' (ID: 1069)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.056292612105607986
    2. 'bits' → logprob: -3.5562925338745117
    3. 'bit' → logprob: -4.806292533874512
    4. 'input' → logprob: -5.306292533874512
    5. '#' (adapté à ' #') → logprob: -5.806292533874512
    6. 'code' → logprob: -6.056292533874512
    7. 'chars' → logprob: -6.181292533874512
    8. 'inv' → logprob: -6.431292533874512
    9. 'decoded' → logprob: -6.431292533874512
    10. 'ch' → logprob: -7.181292533874512

Token 886: ' The' (ID: 623)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.033794380724430084
    2. 'input' → logprob: -4.283794403076172
    3. 'bits' → logprob: -4.908794403076172
    4. 'bit' → logprob: -6.033794403076172
    5. 'chars' → logprob: -6.283794403076172
    6. 'inv' → logprob: -6.283794403076172
    7. 'ch' → logprob: -6.783794403076172
    8. '   ' → logprob: -6.783794403076172
    9. 'decode' → logprob: -7.033794403076172
    10. 'decoded' → logprob: -7.283794403076172

Token 887: ' approach' (ID: 7139)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.2833022177219391
    2. 'bits' → logprob: -1.6583021879196167
    3. 'bit' → logprob: -3.6583023071289062
    4. 'input' → logprob: -4.658302307128906
    5. 'decoded' → logprob: -4.658302307128906
    6. 'code' → logprob: -6.033302307128906
    7. 'decode' → logprob: -6.533302307128906
    8. 'chars' → logprob: -6.783302307128906
    9. 'if' → logprob: -7.033302307128906
    10. 'for' → logprob: -7.033302307128906

Token 888: ' is' (ID: 382)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.04910073056817055
    2. 'input' → logprob: -3.924100637435913
    3. '   ' → logprob: -4.049100875854492
    4. 'ch' → logprob: -6.174100875854492
    5. 'mapping' → logprob: -6.299100875854492
    6. 'chars' → logprob: -6.424100875854492
    7. 'code' → logprob: -6.799100875854492
    8. 'bits' → logprob: -7.049100875854492
    9. 'decoded' → logprob: -7.674100875854492
    10. 'decode' → logprob: -7.674100875854492

Token 889: ' possibly' (ID: 14836)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.09010038524866104
    2. 'input' → logprob: -2.7151002883911133
    3. '#' → logprob: -4.590100288391113
    4. '   ' → logprob: -5.840100288391113
    5. 'chars' → logprob: -6.090100288391113
    6. 'ch' → logprob: -6.090100288391113
    7. 'code' → logprob: -7.215100288391113
    8. 'inp' → logprob: -7.715100288391113
    9. 'inv' → logprob: -7.965100288391113
    10. 'mapping' → logprob: -8.465100288391113

Token 890: ':
' (ID: 734)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.029214948415756226
    2. 'input' → logprob: -3.904214859008789
    3. 'ch' → logprob: -5.654214859008789
    4. '   ' → logprob: -6.154214859008789
    5. 'chars' → logprob: -6.654214859008789
    6. '#' → logprob: -7.154214859008789
    7. 'inp' → logprob: -7.904214859008789
    8. 'code' → logprob: -8.654214859008789
    9. '```' → logprob: -9.154214859008789
    10. 'inv' → logprob: -9.404214859008789

Token 891: '   ' (ID: 271)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.3975578248500824
    2. '   ' → logprob: -1.2725578546524048
    3. 'input' → logprob: -3.3975577354431152
    4. 'ch' → logprob: -4.897557735443115
    5. 'mapping' → logprob: -6.022557735443115
    6. 'code' → logprob: -7.022557735443115
    7. ' char' → logprob: -7.147557735443115
    8. '#' → logprob: -7.272557735443115
    9. 'chars' → logprob: -7.397557735443115
    10. '```' → logprob: -7.772557735443115

Token 892: ' #' (ID: 1069)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.06413129717111588
    2. '   ' → logprob: -3.189131259918213
    3. 'ch' → logprob: -4.939131259918213
    4. 'input' → logprob: -5.064131259918213
    5. ' char' → logprob: -6.314131259918213
    6. 'chars' → logprob: -6.314131259918213
    7. '#' (adapté à ' #') → logprob: -7.064131259918213
    8. 'mapping' → logprob: -7.314131259918213
    9. 'code' → logprob: -7.564131259918213
    10. 'bits' → logprob: -8.064131736755371

Token 893: ' ' (ID: 220)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.02741694450378418
    2. 'input' → logprob: -3.777416944503784
    3. 'ch' → logprob: -6.402417182922363
    4. '#' → logprob: -7.152417182922363
    5. '   ' → logprob: -7.277417182922363
    6. 'chars' → logprob: -7.277417182922363
    7. 'inp' → logprob: -9.402417182922363
    8. 'inv' → logprob: -9.652417182922363
    9. 'bits' → logprob: -10.277417182922363
    10. '```' → logprob: -10.277417182922363

Token 894: '1' (ID: 16)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.03113442100584507
    2. 'input' → logprob: -3.7811343669891357
    3. 'ch' → logprob: -6.156134605407715
    4. '#' → logprob: -6.281134605407715
    5. 'chars' → logprob: -6.406134605407715
    6. 'bits' → logprob: -7.656134605407715
    7. 'inv' → logprob: -7.656134605407715
    8. 'inp' → logprob: -8.156134605407715
    9. 'code' → logprob: -8.406134605407715
    10. 'bit' → logprob: -8.781134605407715

Token 895: ')' (ID: 8)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.2184625118970871
    2. 'input' → logprob: -2.0934624671936035
    3. '#' → logprob: -3.4684624671936035
    4. 'code' → logprob: -4.2184624671936035
    5. 'chars' → logprob: -4.9684624671936035
    6. 'table' → logprob: -5.7184624671936035
    7. '   ' → logprob: -5.7184624671936035
    8. 'ch' → logprob: -5.9684624671936035
    9. 'bits' → logprob: -6.0934624671936035
    10. '```' → logprob: -6.5934624671936035

Token 896: ' Map' (ID: 7343)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.047447193413972855
    2. 'input' → logprob: -3.1724472045898438
    3. '#' → logprob: -6.547447204589844
    4. ' char' → logprob: -7.297447204589844
    5. 'chars' → logprob: -7.672447204589844
    6. 'ch' → logprob: -7.672447204589844
    7. '   ' → logprob: -7.797447204589844
    8. 'code' → logprob: -8.172447204589844
    9. 'inp' → logprob: -8.672447204589844
    10. 'mapping' → logprob: -9.172447204589844

Token 897: ' each' (ID: 2454)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.2440263330936432
    2. 'ch' → logprob: -1.7440263032913208
    3. 'input' → logprob: -4.119026184082031
    4. '```' → logprob: -4.869026184082031
    5. 'inp' → logprob: -5.619026184082031
    6. 'bits' → logprob: -5.619026184082031
    7. 'c' → logprob: -6.119026184082031
    8. 'chars' → logprob: -6.244026184082031
    9. 'code' → logprob: -6.744026184082031
    10. 'for' → logprob: -6.869026184082031

Token 898: ' input' (ID: 3422)
  Prédit: 'ch'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ch' → logprob: -0.24685455858707428
    2. 'char' → logprob: -1.621854543685913
    3. 'c' → logprob: -4.746854782104492
    4. 'line' → logprob: -5.496854782104492
    5. 'code' → logprob: -6.121854782104492
    6. 'input' → logprob: -6.371854782104492
    7. 'bits' → logprob: -6.496854782104492
    8. '```' → logprob: -7.121854782104492
    9. 'bit' → logprob: -7.246854782104492
    10. 'table' → logprob: -7.621854782104492

Token 899: ' character' (ID: 5855)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.7066448926925659
    2. '_char' → logprob: -1.331644892692566
    3. 'ch' → logprob: -1.581644892692566
    4. '_bits' → logprob: -4.9566450119018555
    5. 'bits' → logprob: -5.3316450119018555
    6. '_ch' → logprob: -5.4566450119018555
    7. '=' → logprob: -5.4566450119018555
    8. ' =' → logprob: -5.8316450119018555
    9. 'c' → logprob: -5.9566450119018555
    10. '_chars' → logprob: -5.9566450119018555

Token 900: ' to' (ID: 316)
  Prédit: '_to'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_to' → logprob: -0.5417265295982361
    2. '_char' → logprob: -1.2917265892028809
    3. 'char' → logprob: -2.916726589202881
    4. '_chars' → logprob: -2.916726589202881
    5. '_bits' → logprob: -4.541726589202881
    6. 'to' → logprob: -4.916726589202881
    7. '_map' → logprob: -5.166726589202881
    8. ' =' → logprob: -6.041726589202881
    9. '=' → logprob: -6.166726589202881
    10. '_input' → logprob: -6.916726589202881

Token 901: ' a' (ID: 261)
  Prédit: 'code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'code' → logprob: -0.20220714807510376
    2. 'table' → logprob: -2.202207088470459
    3. 'bits' → logprob: -2.827207088470459
    4. '```' → logprob: -5.702207088470459
    5. 'line' → logprob: -6.077207088470459
    6. 'char' → logprob: -6.452207088470459
    7. 'for' → logprob: -6.577207088470459
    8. '`' → logprob: -6.952207088470459
    9. '   ' → logprob: -7.577207088470459
    10. 'bit' → logprob: -7.577207088470459

Token 902: ' ' (ID: 220)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.7846696972846985
    2. 'code' → logprob: -1.0346696376800537
    3. 'bit' → logprob: -1.7846696376800537
    4. '5' → logprob: -4.159669876098633
    5. 'string' → logprob: -5.909669876098633
    6. 'five' → logprob: -7.534669876098633
    7. '"' → logprob: -8.159669876098633
    8. 'for' → logprob: -8.284669876098633
    9. 'char' → logprob: -8.409669876098633
    10. 'binary' → logprob: -9.284669876098633

Token 903: '5' (ID: 20)
  Prédit: 'code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'code' → logprob: -0.6382418274879456
    2. 'bits' → logprob: -1.1382417678833008
    3. 'char' → logprob: -2.763241767883301
    4. 'bit' → logprob: -2.888241767883301
    5. 'ch' → logprob: -4.138241767883301
    6. 'for' → logprob: -5.263241767883301
    7. 'c' → logprob: -6.138241767883301
    8. 'table' → logprob: -6.138241767883301
    9. 'token' → logprob: -6.263241767883301
    10. '```' → logprob: -6.888241767883301

Token 904: '-bit' (ID: 33736)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.6839544177055359
    2. 'bit' → logprob: -1.1839544773101807
    3. '_bits' → logprob: -2.3089544773101807
    4. 'token' → logprob: -3.0589544773101807
    5. 'char' → logprob: -3.9339544773101807
    6. 'code' → logprob: -5.058954238891602
    7. '_token' → logprob: -5.683954238891602
    8. 'b' → logprob: -5.808954238891602
    9. '_code' → logprob: -5.808954238891602
    10. '_bit' → logprob: -6.683954238891602

Token 905: ' code' (ID: 3490)
  Prédit: '_bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_bits' → logprob: -0.9219925403594971
    2. ' =' → logprob: -1.046992540359497
    3. '_to' → logprob: -2.296992540359497
    4. 'bits' → logprob: -3.046992540359497
    5. '_' → logprob: -3.546992540359497
    6. '_map' → logprob: -4.171992301940918
    7. '=' → logprob: -4.296992301940918
    8. '_code' → logprob: -4.421992301940918
    9. 'to' → logprob: -5.296992301940918
    10. '"' → logprob: -5.421992301940918

Token 906: ' from' (ID: 591)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.09564551711082458
    2. 'input' → logprob: -2.4706454277038574
    3. '   ' → logprob: -5.720645427703857
    4. 'ch' → logprob: -6.345645427703857
    5. '#' → logprob: -7.470645427703857
    6. 'chars' → logprob: -7.970645427703857
    7. '```' → logprob: -8.220645904541016
    8. 'inp' → logprob: -8.720645904541016
    9. ' char' → logprob: -9.220645904541016
    10. 'in' → logprob: -9.720645904541016

Token 907: ' table' (ID: 3293)
  Prédit: 'code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'code' → logprob: -0.8568635582923889
    2. 'table' → logprob: -1.1068634986877441
    3. 'char' → logprob: -2.106863498687744
    4. 'the' → logprob: -2.731863498687744
    5. '{' → logprob: -3.731863498687744
    6. 'ch' → logprob: -4.356863498687744
    7. '{
' → logprob: -4.606863498687744
    8. 'dict' → logprob: -6.606863498687744
    9. 'bits' → logprob: -6.731863498687744
    10. '`' → logprob: -6.856863498687744

Token 908: '
' (ID: 198)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.19045774638652802
    2. 'input' → logprob: -1.8154577016830444
    3. 'ch' → logprob: -5.815457820892334
    4. '   ' → logprob: -6.440457820892334
    5. 'inp' → logprob: -6.440457820892334
    6. '#' → logprob: -6.690457820892334
    7. 'chars' → logprob: -6.815457820892334
    8. 'in' → logprob: -7.315457820892334
    9. 'if' → logprob: -7.940457820892334
    10. '```' → logprob: -8.190457344055176

Token 909: '   ' (ID: 271)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.14022883772850037
    2. 'input' → logprob: -2.265228748321533
    3. '   ' → logprob: -4.765228748321533
    4. '#' → logprob: -5.265228748321533
    5. 'ch' → logprob: -5.640228748321533
    6. 'chars' → logprob: -5.765228748321533
    7. '```' → logprob: -6.390228748321533
    8. 'inp' → logprob: -6.640228748321533
    9. 'code' → logprob: -6.765228748321533
    10. 'in' → logprob: -7.140228748321533

Token 910: ' #' (ID: 1069)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.1880292147397995
    2. 'input' → logprob: -2.0630292892456055
    3. '   ' → logprob: -3.6880292892456055
    4. 'ch' → logprob: -4.9380292892456055
    5. 'chars' → logprob: -5.5630292892456055
    6. 'inp' → logprob: -5.9380292892456055
    7. 'in' → logprob: -6.5630292892456055
    8. 'code' → logprob: -7.1880292892456055
    9. 'if' → logprob: -7.1880292892456055
    10. '#' (adapté à ' #') → logprob: -7.4380292892456055

Token 911: ' ' (ID: 220)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.46893754601478577
    2. 'input' → logprob: -1.0939375162124634
    3. '   ' → logprob: -4.468937397003174
    4. 'ch' → logprob: -4.468937397003174
    5. 'inp' → logprob: -4.968937397003174
    6. 'in' → logprob: -5.218937397003174
    7. '#' → logprob: -6.843937397003174
    8. '{
' → logprob: -6.968937397003174
    9. 'chars' → logprob: -7.093937397003174
    10. 'code' → logprob: -8.593937873840332

Token 912: '2' (ID: 17)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.2246599793434143
    2. 'input' → logprob: -1.7246599197387695
    3. 'ch' → logprob: -4.4746599197387695
    4. 'in' → logprob: -5.7246599197387695
    5. '   ' → logprob: -5.7246599197387695
    6. 'inp' → logprob: -5.9746599197387695
    7. '#' → logprob: -6.8496599197387695
    8. 'chars' → logprob: -7.0996599197387695
    9. '```' → logprob: -8.72465991973877
    10. ' char' → logprob: -9.47465991973877

Token 913: ')' (ID: 8)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.296039879322052
    2. '   ' → logprob: -2.0460398197174072
    3. 'input' → logprob: -3.1710398197174072
    4. 'ch' → logprob: -4.046040058135986
    5. ')' → logprob: -4.171040058135986
    6. '#' → logprob: -4.421040058135986
    7. ' =' → logprob: -4.796040058135986
    8. 'for' → logprob: -4.796040058135986
    9. ' char' → logprob: -5.921040058135986
    10. '=' → logprob: -6.046040058135986

Token 914: ' Conc' (ID: 38226)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.07812318205833435
    2. 'input' → logprob: -2.703123092651367
    3. '#' → logprob: -5.828123092651367
    4. ' char' → logprob: -6.578123092651367
    5. 'ch' → logprob: -6.703123092651367
    6. 'code' → logprob: -7.078123092651367
    7. 'chars' → logprob: -7.328123092651367
    8. 'inp' → logprob: -8.328123092651367
    9. 'for' → logprob: -8.578123092651367
    10. 'mapping' → logprob: -8.953123092651367

Token 915: 'atenate' (ID: 63439)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 't' → logprob: -0.8590241074562073
    2. 'for' → logprob: -1.3590240478515625
    3. '   ' → logprob: -1.7340240478515625
    4. '```' → logprob: -3.6090240478515625
    5. 'ode' → logprob: -3.7340240478515625
    6. '       ' → logprob: -4.4840240478515625
    7. 'de' → logprob: -4.6090240478515625
    8. '
' → logprob: -4.7340240478515625
    9. 'e' → logprob: -4.7340240478515625
    10. 'in' → logprob: -5.1090240478515625

Token 916: ' the' (ID: 290)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.09560294449329376
    2. 'input' → logprob: -3.2206029891967773
    3. 'bits' → logprob: -4.095602989196777
    4. 'code' → logprob: -4.470602989196777
    5. 'ch' → logprob: -5.220602989196777
    6. 'chars' → logprob: -5.595602989196777
    7. 'for' → logprob: -5.970602989196777
    8. '   ' → logprob: -6.095602989196777
    9. '#' → logprob: -6.345602989196777
    10. 'if' → logprob: -6.470602989196777

Token 917: ' code' (ID: 3490)
  Prédit: 'code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'code' → logprob: -0.7963925004005432
    2. 'bits' → logprob: -0.9213925004005432
    3. 'char' → logprob: -2.6713924407958984
    4. 'ch' → logprob: -3.5463924407958984
    5. 'for' → logprob: -4.046392440795898
    6. 'c' → logprob: -4.546392440795898
    7. 'table' → logprob: -4.546392440795898
    8. ' bits' → logprob: -5.421392440795898
    9. ' code' → logprob: -5.546392440795898
    10. 'input' → logprob: -6.796392440795898

Token 918: ' strings' (ID: 18279)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.2480902075767517
    2. 'input' → logprob: -2.8730902671813965
    3. '   ' → logprob: -3.3730902671813965
    4. 'code' → logprob: -3.3730902671813965
    5. ' =' → logprob: -3.8730902671813965
    6. 'bits' → logprob: -4.1230902671813965
    7. 'chars' → logprob: -4.2480902671813965
    8. '=' → logprob: -5.3730902671813965
    9. 'if' → logprob: -5.4980902671813965
    10. '```' → logprob: -5.6230902671813965

Token 919: ' (' (ID: 350)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.3322426676750183
    2. '   ' → logprob: -2.082242727279663
    3. 'char' → logprob: -2.082242727279663
    4. 'decoded' → logprob: -4.582242488861084
    5. 'ch' → logprob: -4.832242488861084
    6. 'chars' → logprob: -5.207242488861084
    7. 'bit' → logprob: -5.707242488861084
    8. 'code' → logprob: -6.332242488861084
    9. 'input' → logprob: -6.582242488861084
    10. ' bits' → logprob: -7.207242488861084

Token 920: 'bit' (ID: 6516)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -1.1260194778442383
    2. '   ' → logprob: -1.3760194778442383
    3. 'for' → logprob: -1.3760194778442383
    4. 'code' → logprob: -3.0010194778442383
    5. 'input' → logprob: -3.6260194778442383
    6. 'ch' → logprob: -3.8760194778442383
    7. ' for' → logprob: -4.126019477844238
    8. 'chars' → logprob: -4.126019477844238
    9. 'bits' → logprob: -4.876019477844238
    10. 'if' → logprob: -5.126019477844238

Token 921: 'string' (ID: 1655)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.7656038999557495
    2. '=' → logprob: -1.7656038999557495
    3. '   ' → logprob: -2.390604019165039
    4. 'for' → logprob: -2.640604019165039
    5. '_to' → logprob: -3.140604019165039
    6. ')' → logprob: -3.390604019165039
    7. '_map' → logprob: -3.890604019165039
    8. 's' → logprob: -4.015604019165039
    9. '_chars' → logprob: -4.515604019165039
    10. '#' → logprob: -4.890604019165039

Token 922: ')
' (ID: 446)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.3853817284107208
    2. '+=' → logprob: -1.2603816986083984
    3. ' =' → logprob: -4.385381698608398
    4. ' +=' → logprob: -4.760381698608398
    5. '   ' → logprob: -5.385381698608398
    6. 'for' → logprob: -5.885381698608398
    7. '+' → logprob: -6.385381698608398
    8. '[ch' → logprob: -6.885381698608398
    9. '```' → logprob: -7.135381698608398
    10. '=line' → logprob: -7.260381698608398

Token 923: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.30760955810546875
    2. 'char' → logprob: -2.8076095581054688
    3. 'for' → logprob: -2.9326095581054688
    4. 'bits' → logprob: -3.0576095581054688
    5. 'code' → logprob: -3.5576095581054688
    6. 'input' → logprob: -4.182609558105469
    7. 'ch' → logprob: -4.307609558105469
    8. '#' → logprob: -4.807609558105469
    9. '"' → logprob: -5.307609558105469
    10. '       ' → logprob: -5.307609558105469

Token 924: ' #' (ID: 1069)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.3009262979030609
    2. '   ' → logprob: -1.6759263277053833
    3. 'ch' → logprob: -3.3009262084960938
    4. 'bits' → logprob: -4.300926208496094
    5. 'input' → logprob: -4.800926208496094
    6. 'code' → logprob: -5.175926208496094
    7. 'chars' → logprob: -6.050926208496094
    8. 'bit' → logprob: -6.425926208496094
    9. 'inp' → logprob: -7.175926208496094
    10. 'c' → logprob: -7.300926208496094

Token 925: ' ' (ID: 220)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.6011357307434082
    2. '   ' → logprob: -1.1011357307434082
    3. 'bits' → logprob: -2.601135730743408
    4. 'input' → logprob: -4.226135730743408
    5. 'code' → logprob: -4.726135730743408
    6. 'ch' → logprob: -4.851135730743408
    7. 'chars' → logprob: -5.476135730743408
    8. 'for' → logprob: -6.101135730743408
    9. 'bit' → logprob: -6.351135730743408
    10. '```' → logprob: -6.601135730743408

Token 926: '3' (ID: 18)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.4087546765804291
    2. 'bits' → logprob: -1.7837547063827515
    3. 'code' → logprob: -2.783754587173462
    4. '   ' → logprob: -3.033754587173462
    5. '```' → logprob: -4.158754825592041
    6. 'input' → logprob: -4.283754825592041
    7. '#' → logprob: -4.908754825592041
    8. 'for' → logprob: -4.908754825592041
    9. 'bit' → logprob: -5.408754825592041
    10. 'ch' → logprob: -5.783754825592041

Token 927: ')' (ID: 8)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.6040688753128052
    2. '#' → logprob: -1.7290688753128052
    3. 'for' → logprob: -1.7290688753128052
    4. '   ' → logprob: -3.1040687561035156
    5. 'code' → logprob: -3.2290687561035156
    6. 'chars' → logprob: -5.729068756103516
    7. 'input' → logprob: -5.979068756103516
    8. '
' → logprob: -6.229068756103516
    9. '```' → logprob: -6.604068756103516
    10. 'ch' → logprob: -6.604068756103516

Token 928: ' Then' (ID: 7801)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.8338561654090881
    2. 'decoded' → logprob: -1.3338561058044434
    3. 'code' → logprob: -2.2088561058044434
    4. '#' → logprob: -2.3338561058044434
    5. 'pos' → logprob: -3.7088561058044434
    6. '```' → logprob: -4.458856105804443
    7. '   ' → logprob: -4.708856105804443
    8. 'bits' → logprob: -4.708856105804443
    9. 'bit' → logprob: -4.833856105804443
    10. 'decode' → logprob: -4.958856105804443

Token 929: ' decode' (ID: 32043)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.6297522187232971
    2. 'pos' → logprob: -1.1297521591186523
    3. 'idx' → logprob: -2.1297521591186523
    4. 'decoded' → logprob: -4.504752159118652
    5. 'index' → logprob: -5.004752159118652
    6. 'decode' → logprob: -6.004752159118652
    7. '#' → logprob: -6.379752159118652
    8. '```' → logprob: -6.879752159118652
    9. '   ' → logprob: -7.004752159118652
    10. 'while' → logprob: -7.629752159118652

Token 930: ' bit' (ID: 3546)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.2727467119693756
    2. 'char' → logprob: -2.0227468013763428
    3. '   ' → logprob: -3.1477468013763428
    4. 'decoded' → logprob: -3.1477468013763428
    5. 'chars' → logprob: -5.022746562957764
    6. 'bit' → logprob: -5.022746562957764
    7. 'ch' → logprob: -6.022746562957764
    8. 'input' → logprob: -6.647746562957764
    9. 'code' → logprob: -6.647746562957764
    10. '#' → logprob: -7.522746562957764

Token 931: 'string' (ID: 1655)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.9324108958244324
    2. '_to' → logprob: -1.9324109554290771
    3. 'string' → logprob: -2.182410955429077
    4. '   ' → logprob: -2.432410955429077
    5. ' =' → logprob: -2.682410955429077
    6. '```' → logprob: -2.932410955429077
    7. '=' → logprob: -3.682410955429077
    8. 'for' → logprob: -3.807410955429077
    9. '_string' → logprob: -4.307410717010498
    10. '_' → logprob: -4.432410717010498

Token 932: ' into' (ID: 1511)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.19074109196662903
    2. 'bits' → logprob: -2.0657410621643066
    3. 'ch' → logprob: -4.565741062164307
    4. 'input' → logprob: -4.690741062164307
    5. '   ' → logprob: -4.940741062164307
    6. 'chars' → logprob: -4.940741062164307
    7. 'bit' → logprob: -5.440741062164307
    8. '#' → logprob: -5.690741062164307
    9. 'decoded' → logprob: -6.690741062164307
    10. 'inv' → logprob: -6.815741062164307

Token 933: ' letters' (ID: 18151)
  Prédit: '""'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '""' → logprob: -0.06568038463592529
    2. '"' → logprob: -3.190680503845215
    3. 'bits' → logprob: -4.190680503845215
    4. '"""' → logprob: -6.065680503845215
    5. '```' → logprob: -6.565680503845215
    6. '''' → logprob: -6.815680503845215
    7. 'code' → logprob: -6.940680503845215
    8. 'decoded' → logprob: -7.440680503845215
    9. '")' → logprob: -9.190680503845215
    10. 'characters' → logprob: -9.440680503845215

Token 934: ' by' (ID: 656)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.42431968450546265
    2. 'char' → logprob: -1.7993197441101074
    3. '   ' → logprob: -2.1743197441101074
    4. 'decoded' → logprob: -3.1743197441101074
    5. 'bit' → logprob: -4.799319744110107
    6. 'ch' → logprob: -5.424319744110107
    7. 'chars' → logprob: -5.549319744110107
    8. 'input' → logprob: -5.799319744110107
    9. 'code' → logprob: -6.424319744110107
    10. '#' → logprob: -7.424319744110107

Token 935: ' matching' (ID: 20238)
  Prédit: 'pos'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pos' → logprob: -0.9484536051750183
    2. 'matching' → logprob: -1.823453664779663
    3. 'import' → logprob: -2.073453664779663
    4. '```' → logprob: -2.198453664779663
    5. 'i' → logprob: -3.073453664779663
    6. 'reading' → logprob: -3.448453664779663
    7. 'index' → logprob: -3.698453664779663
    8. 'def' → logprob: -3.823453664779663
    9. '""' → logprob: -4.073453426361084
    10. 'buffer' → logprob: -4.073453426361084

Token 936: ' code' (ID: 3490)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.6654345393180847
    2. 'bits' → logprob: -1.0404345989227295
    3. '   ' → logprob: -2.5404345989227295
    4. 'ch' → logprob: -4.29043436050415
    5. 'input' → logprob: -4.66543436050415
    6. 'chars' → logprob: -4.79043436050415
    7. '#' → logprob: -4.91543436050415
    8. 'code' → logprob: -5.16543436050415
    9. 'bit' → logprob: -5.41543436050415
    10. '```' → logprob: -6.16543436050415

Token 937: ' prefixes' (ID: 151881)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.07078753411769867
    2. 'input' → logprob: -3.0707874298095703
    3. '#' → logprob: -4.82078742980957
    4. 'chars' → logprob: -5.44578742980957
    5. 'bits' → logprob: -5.44578742980957
    6. 'code' → logprob: -6.32078742980957
    7. 'ch' → logprob: -6.44578742980957
    8. '   ' → logprob: -7.32078742980957
    9. 'inp' → logprob: -7.69578742980957
    10. 'bit' → logprob: -8.07078742980957

Token 938: '.
' (ID: 558)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.11198022961616516
    2. 'input' → logprob: -3.1119801998138428
    3. 'bits' → logprob: -3.8619801998138428
    4. '#' → logprob: -4.236980438232422
    5. '   ' → logprob: -4.861980438232422
    6. 'ch' → logprob: -5.236980438232422
    7. 'chars' → logprob: -5.611980438232422
    8. 'bit' → logprob: -5.986980438232422
    9. 'inp' → logprob: -6.111980438232422
    10. 'code' → logprob: -6.361980438232422

Token 939: '   ' (ID: 271)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.03129490837454796
    2. 'input' → logprob: -4.156294822692871
    3. 'bits' → logprob: -4.781294822692871
    4. '#' → logprob: -5.781294822692871
    5. 'chars' → logprob: -6.406294822692871
    6. 'ch' → logprob: -7.031294822692871
    7. '   ' → logprob: -7.781294822692871
    8. 'bit' → logprob: -8.031294822692871
    9. '```' → logprob: -8.906294822692871
    10. 'code' → logprob: -9.156294822692871

Token 940: ' #
' (ID: 21888)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.14246240258216858
    2. 'bits' → logprob: -2.1424624919891357
    3. 'input' → logprob: -5.142462253570557
    4. 'bit' → logprob: -5.892462253570557
    5. 'ch' → logprob: -6.017462253570557
    6. 'chars' → logprob: -6.142462253570557
    7. '#' → logprob: -7.267462253570557
    8. 'code' → logprob: -7.392462253570557
    9. '   ' → logprob: -7.892462253570557
    10. 'inv' → logprob: -8.517462730407715

Token 941: '   ' (ID: 271)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.4284050166606903
    2. 'char' → logprob: -1.8034050464630127
    3. '   ' → logprob: -1.9284050464630127
    4. 'ch' → logprob: -3.9284050464630127
    5. 'input' → logprob: -5.053404808044434
    6. 'bit' → logprob: -5.553404808044434
    7. 'chars' → logprob: -5.803404808044434
    8. 'code' → logprob: -6.553404808044434
    9. 'if' → logprob: -7.053404808044434
    10. 'inp' → logprob: -7.678404808044434

Token 942: ' #' (ID: 1069)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.8537632822990417
    2. '   ' → logprob: -0.9787632822990417
    3. 'bits' → logprob: -2.2287633419036865
    4. 'ch' → logprob: -2.8537633419036865
    5. 'input' → logprob: -4.228763103485107
    6. 'chars' → logprob: -4.728763103485107
    7. 'bit' → logprob: -6.103763103485107
    8. 'if' → logprob: -6.353763103485107
    9. 'code' → logprob: -6.728763103485107
    10. 'inp' → logprob: -6.853763103485107

Token 943: ' But' (ID: 3072)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.09548364579677582
    2. 'input' → logprob: -3.0954835414886475
    3. '#' → logprob: -4.470483779907227
    4. '   ' → logprob: -4.470483779907227
    5. 'bits' → logprob: -4.595483779907227
    6. 'ch' → logprob: -5.220483779907227
    7. 'chars' → logprob: -6.220483779907227
    8. 'bit' → logprob: -6.595483779907227
    9. 'inp' → logprob: -6.595483779907227
    10. 'code' → logprob: -7.095483779907227

Token 944: ' the' (ID: 290)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.11098447442054749
    2. '   ' → logprob: -2.8609845638275146
    3. 'input' → logprob: -3.8609845638275146
    4. 'bits' → logprob: -5.1109843254089355
    5. 'code' → logprob: -5.2359843254089355
    6. 'ch' → logprob: -5.3609843254089355
    7. 'for' → logprob: -5.7359843254089355
    8. '#' → logprob: -5.7359843254089355
    9. 'chars' → logprob: -5.9859843254089355
    10. 'bit' → logprob: -6.9859843254089355

Token 945: ' input' (ID: 3422)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.053377725183963776
    2. 'input' → logprob: -3.678377628326416
    3. '#' → logprob: -4.553377628326416
    4. 'bits' → logprob: -4.928377628326416
    5. 'code' → logprob: -6.178377628326416
    6. 'ch' → logprob: -6.428377628326416
    7. 'chars' → logprob: -6.553377628326416
    8. 'bit' → logprob: -6.928377628326416
    9. 'for' → logprob: -7.428377628326416
    10. '   ' → logprob: -7.428377628326416

Token 946: ' is' (ID: 382)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.4134346544742584
    2. '   ' → logprob: -1.788434624671936
    3. 'char' → logprob: -2.2884347438812256
    4. 'for' → logprob: -3.5384347438812256
    5. 'ch' → logprob: -4.5384345054626465
    6. '#' → logprob: -4.9134345054626465
    7. 'code' → logprob: -5.4134345054626465
    8. 'chars' → logprob: -5.5384345054626465
    9. ' bits' → logprob: -5.6634345054626465
    10. 'if' → logprob: -6.0384345054626465

Token 947: ' not' (ID: 625)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.7714821100234985
    2. 'bits' → logprob: -1.2714821100234985
    3. '   ' → logprob: -2.771481990814209
    4. '```' → logprob: -3.021481990814209
    5. 'for' → logprob: -3.146481990814209
    6. 'code' → logprob: -3.521481990814209
    7. '#' → logprob: -3.896481990814209
    8. 'input' → logprob: -4.146481990814209
    9. '"' → logprob: -4.646481990814209
    10. 'chars' → logprob: -5.271481990814209

Token 948: ' just' (ID: 1327)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -1.205627202987671
    2. '{' → logprob: -1.705627202987671
    3. 'char' → logprob: -1.830627202987671
    4. ''' → logprob: -2.080627202987671
    5. 'code' → logprob: -2.080627202987671
    6. '{
' → logprob: -3.580627202987671
    7. '`' → logprob: -4.70562744140625
    8. '   ' → logprob: -4.83062744140625
    9. 'table' → logprob: -4.95562744140625
    10. 'chars' → logprob: -4.95562744140625

Token 949: ' letters' (ID: 18151)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -1.4340081214904785
    2. 'char' → logprob: -1.8090081214904785
    3. '"' → logprob: -2.0590081214904785
    4. '```' → logprob: -2.1840081214904785
    5. 'for' → logprob: -2.6840081214904785
    6. 'code' → logprob: -2.8090081214904785
    7. '   ' → logprob: -3.3090081214904785
    8. '{
' → logprob: -3.3090081214904785
    9. 'line' → logprob: -3.6840081214904785
    10. '{' → logprob: -3.6840081214904785

Token 950: ' but' (ID: 889)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.3808458745479584
    2. 'bits' → logprob: -1.2558459043502808
    3. 'input' → logprob: -4.75584602355957
    4. 'bit' → logprob: -4.88084602355957
    5. 'chars' → logprob: -5.50584602355957
    6. 'ch' → logprob: -5.50584602355957
    7. '   ' → logprob: -5.63084602355957
    8. 'code' → logprob: -6.38084602355957
    9. 'inv' → logprob: -7.50584602355957
    10. 'mapping' → logprob: -7.75584602355957

Token 951: ' also' (ID: 1217)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.6844124794006348
    2. 'for' → logprob: -1.5594124794006348
    3. '"' → logprob: -2.9344124794006348
    4. '```' → logprob: -3.1844124794006348
    5. 'code' → logprob: -3.5594124794006348
    6. '   ' → logprob: -3.5594124794006348
    7. 'line' → logprob: -3.8094124794006348
    8. 'char' → logprob: -3.8094124794006348
    9. 'input' → logprob: -4.059412479400635
    10. '#' → logprob: -4.434412479400635

Token 952: ' '?' (ID: 73818)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.16862329840660095
    2. 'bits' → logprob: -3.168623208999634
    3. 'input' → logprob: -3.418623208999634
    4. '```' → logprob: -3.418623208999634
    5. 'code' → logprob: -3.918623208999634
    6. 'bit' → logprob: -5.043623447418213
    7. 'ch' → logprob: -5.543623447418213
    8. 'for' → logprob: -5.543623447418213
    9. 'chars' → logprob: -5.918623447418213
    10. '#' → logprob: -6.293623447418213

Token 953: '',' (ID: 787)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.06316204369068146
    2. 'bits' → logprob: -3.563162088394165
    3. 'input' → logprob: -3.813162088394165
    4. 'chars' → logprob: -5.813161849975586
    5. 'ch' → logprob: -6.188161849975586
    6. '#' → logprob: -6.438161849975586
    7. 'bit' → logprob: -6.438161849975586
    8. 'code' → logprob: -6.688161849975586
    9. 'inp' → logprob: -7.938161849975586
    10. 'inv' → logprob: -8.188161849975586

Token 954: ' '-'' (ID: 59558)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.15936030447483063
    2. 'bits' → logprob: -2.659360408782959
    3. 'ch' → logprob: -3.784360408782959
    4. 'input' → logprob: -4.159360408782959
    5. '   ' → logprob: -4.284360408782959
    6. 'chars' → logprob: -4.534360408782959
    7. '```' → logprob: -4.909360408782959
    8. 'bit' → logprob: -5.909360408782959
    9. 'code' → logprob: -6.659360408782959
    10. 'inp' → logprob: -7.159360408782959

Token 955: ' etc' (ID: 5178)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.026905084028840065
    2. 'char' → logprob: -4.026905059814453
    3. 'decoded' → logprob: -5.526905059814453
    4. 'bit' → logprob: -6.151905059814453
    5. '   ' → logprob: -6.526905059814453
    6. 'chars' → logprob: -7.401905059814453
    7. 'code' → logprob: -8.651905059814453
    8. 'ch' → logprob: -9.276905059814453
    9. ' bits' → logprob: -10.026905059814453
    10. '#' → logprob: -10.276905059814453

Token 956: '.
' (ID: 558)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.13794539868831635
    2. 'char' → logprob: -2.1379454135894775
    3. 'bit' → logprob: -5.512945175170898
    4. 'input' → logprob: -5.887945175170898
    5. 'chars' → logprob: -6.512945175170898
    6. '#' → logprob: -6.887945175170898
    7. 'ch' → logprob: -7.512945175170898
    8. '   ' → logprob: -7.637945175170898
    9. 'code' → logprob: -8.012945175170898
    10. 'inv' → logprob: -9.887945175170898

Token 957: '   ' (ID: 271)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.02953130379319191
    2. 'input' → logprob: -4.529531478881836
    3. 'bits' → logprob: -4.779531478881836
    4. 'chars' → logprob: -5.529531478881836
    5. '#' → logprob: -5.654531478881836
    6. 'ch' → logprob: -6.404531478881836
    7. 'bit' → logprob: -8.154531478881836
    8. '```' → logprob: -8.529531478881836
    9. 'inv' → logprob: -9.154531478881836
    10. '   ' → logprob: -10.154531478881836

Token 958: ' #' (ID: 1069)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.15809623897075653
    2. 'bits' → logprob: -2.2830963134765625
    3. '   ' → logprob: -4.0330963134765625
    4. '#' (adapté à ' #') → logprob: -5.0330963134765625
    5. 'input' → logprob: -5.0330963134765625
    6. 'ch' → logprob: -5.1580963134765625
    7. 'chars' → logprob: -5.5330963134765625
    8. 'bit' → logprob: -5.9080963134765625
    9. 'code' → logprob: -8.158096313476562
    10. 'mapping' → logprob: -8.533096313476562

Token 959: ' so' (ID: 813)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.052784454077482224
    2. 'input' → logprob: -3.3027844429016113
    3. '#' → logprob: -4.677784442901611
    4. 'chars' → logprob: -6.302784442901611
    5. 'ch' → logprob: -6.677784442901611
    6. 'bits' → logprob: -6.677784442901611
    7. 'inp' → logprob: -8.05278491973877
    8. '```' → logprob: -8.17778491973877
    9. 'bit' → logprob: -9.30278491973877
    10. '``' → logprob: -9.55278491973877

Token 960: ' we' (ID: 581)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.026131801307201385
    2. 'input' → logprob: -4.026131629943848
    3. '#' → logprob: -5.526131629943848
    4. 'ch' → logprob: -6.276131629943848
    5. 'chars' → logprob: -6.651131629943848
    6. '```' → logprob: -8.026131629943848
    7. 'inp' → logprob: -8.401131629943848
    8. '   ' → logprob: -9.776131629943848
    9. 'bits' → logprob: -10.026131629943848
    10. 'in' → logprob: -10.026131629943848

Token 961: ' should' (ID: 1757)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.1208265945315361
    2. '   ' → logprob: -3.745826482772827
    3. 'input' → logprob: -4.245826721191406
    4. '_char' → logprob: -4.370826721191406
    5. ' =' → logprob: -4.620826721191406
    6. 'ch' → logprob: -4.620826721191406
    7. 'code' → logprob: -4.620826721191406
    8. '#' → logprob: -4.995826721191406
    9. ' char' → logprob: -5.120826721191406
    10. '=' → logprob: -5.495826721191406

Token 962: ' define' (ID: 13174)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.07968543469905853
    2. 'input' → logprob: -3.3296854496002197
    3. 'bits' → logprob: -4.204685211181641
    4. '```' → logprob: -4.829685211181641
    5. 'chars' → logprob: -5.329685211181641
    6. 'code' → logprob: -5.454685211181641
    7. '   ' → logprob: -6.204685211181641
    8. 'ch' → logprob: -6.329685211181641
    9. 'bit' → logprob: -6.454685211181641
    10. 'in' → logprob: -7.454685211181641

Token 963: ' a' (ID: 261)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.08280659466981888
    2. 'input' → logprob: -2.8328065872192383
    3. 'ch' → logprob: -4.582806587219238
    4. '#' → logprob: -5.457806587219238
    5. 'chars' → logprob: -5.832806587219238
    6. 'inp' → logprob: -6.457806587219238
    7. 'bits' → logprob: -7.457806587219238
    8. 'in' → logprob: -8.457806587219238
    9. '```' → logprob: -8.582806587219238
    10. '   ' → logprob: -8.832806587219238

Token 964: ' dictionary' (ID: 22131)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.013299874030053616
    2. 'input' → logprob: -4.513299942016602
    3. 'ch' → logprob: -7.138299942016602
    4. '```' → logprob: -7.513299942016602
    5. 'chars' → logprob: -8.013299942016602
    6. 'inp' → logprob: -8.138299942016602
    7. 'mapping' → logprob: -8.763299942016602
    8. '`' → logprob: -10.638299942016602
    9. 'map' → logprob: -10.638299942016602
    10. '#' → logprob: -11.013299942016602

Token 965: ' of' (ID: 328)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.12723802030086517
    2. 'input' → logprob: -2.3772380352020264
    3. 'ch' → logprob: -4.252237796783447
    4. '#' → logprob: -5.377237796783447
    5. 'inp' → logprob: -5.752237796783447
    6. 'chars' → logprob: -6.002237796783447
    7. 'in' → logprob: -6.877237796783447
    8. 'bits' → logprob: -7.877237796783447
    9. 'code' → logprob: -8.502238273620605
    10. '`' → logprob: -9.002238273620605

Token 966: ' input' (ID: 3422)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.029594499617815018
    2. 'input' → logprob: -4.029594421386719
    3. '{
' → logprob: -5.404594421386719
    4. 'ch' → logprob: -5.654594421386719
    5. 'inp' → logprob: -5.904594421386719
    6. 'chars' → logprob: -8.279594421386719
    7. 'in' → logprob: -8.654594421386719
    8. 'code' → logprob: -9.904594421386719
    9. '{' → logprob: -10.154594421386719
    10. '{'' → logprob: -10.279594421386719

Token 967: ' characters' (ID: 9862)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.0534411258995533
    2. 'input' → logprob: -3.303441047668457
    3. 'ch' → logprob: -4.803441047668457
    4. 'inp' → logprob: -6.303441047668457
    5. 'chars' → logprob: -6.303441047668457
    6. 'in' → logprob: -7.178441047668457
    7. '```' → logprob: -7.303441047668457
    8. '#' → logprob: -7.928441047668457
    9. '
' → logprob: -7.928441047668457
    10. '_char' → logprob: -8.303441047668457

Token 968: ' to' (ID: 316)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.29252398014068604
    2. 'bits' → logprob: -1.917523980140686
    3. 'input' → logprob: -2.5425238609313965
    4. 'chars' → logprob: -4.5425238609313965
    5. 'ch' → logprob: -5.1675238609313965
    6. 'bit' → logprob: -5.6675238609313965
    7. 'inp' → logprob: -5.6675238609313965
    8. '#' → logprob: -6.2925238609313965
    9. '   ' → logprob: -6.7925238609313965
    10. '```' → logprob: -7.5425238609313965

Token 969: ' their' (ID: 1043)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.7558905482292175
    2. 'code' → logprob: -1.3808906078338623
    3. 'bits' → logprob: -1.3808906078338623
    4. 'ch' → logprob: -3.8808906078338623
    5. 'bit' → logprob: -5.505890369415283
    6. 'input' → logprob: -7.005890369415283
    7. 'chars' → logprob: -7.005890369415283
    8. '```' → logprob: -8.380890846252441
    9. '{
' → logprob: -8.880890846252441
    10. 'next' → logprob: -9.005890846252441

Token 970: ' bits' (ID: 18189)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.0430619902908802
    2. 'input' → logprob: -3.9180619716644287
    3. 'ch' → logprob: -4.043062210083008
    4. 'bits' → logprob: -6.168062210083008
    5. '{
' → logprob: -7.293062210083008
    6. 'chars' → logprob: -7.543062210083008
    7. 'inp' → logprob: -7.668062210083008
    8. '```' → logprob: -7.668062210083008
    9. '``' → logprob: -9.418062210083008
    10. 'code' → logprob: -9.543062210083008

Token 971: ' value' (ID: 1432)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.42012399435043335
    2. 'input' → logprob: -1.1701240539550781
    3. '#' → logprob: -3.795124053955078
    4. 'ch' → logprob: -5.295124053955078
    5. 'inp' → logprob: -6.420124053955078
    6. 'chars' → logprob: -6.670124053955078
    7. '```' → logprob: -6.795124053955078
    8. 'in' → logprob: -6.920124053955078
    9. '``' → logprob: -9.670124053955078
    10. '   ' → logprob: -9.920124053955078

Token 972: ' (' (ID: 350)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.3638683259487152
    2. 'input' → logprob: -1.3638683557510376
    3. '#' → logprob: -3.238868236541748
    4. 'ch' → logprob: -5.238868236541748
    5. 'chars' → logprob: -6.613868236541748
    6. 'inp' → logprob: -6.863868236541748
    7. '```' → logprob: -6.863868236541748
    8. 'bits' → logprob: -7.238868236541748
    9. 'in' → logprob: -8.738868713378906
    10. 'bit' → logprob: -9.113868713378906

Token 973: 'or' (ID: 267)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.5983496904373169
    2. 'char' → logprob: -0.8483496904373169
    3. 'ch' → logprob: -4.098349571228027
    4. 'inp' → logprob: -6.223349571228027
    5. '#' → logprob: -6.848349571228027
    6. '```' → logprob: -6.973349571228027
    7. 'chars' → logprob: -7.223349571228027
    8. 'in' → logprob: -8.223349571228027
    9. 'bits' → logprob: -8.473349571228027
    10. 'code' → logprob: -9.598349571228027

Token 974: ' string' (ID: 1621)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.5625094175338745
    2. 'input' → logprob: -0.9375094175338745
    3. 'ch' → logprob: -4.562509536743164
    4. '#' → logprob: -4.812509536743164
    5. 'bits' → logprob: -4.812509536743164
    6. '```' → logprob: -5.437509536743164
    7. 'bit' → logprob: -6.562509536743164
    8. 'chars' → logprob: -6.687509536743164
    9. 'inp' → logprob: -6.687509536743164
    10. '
' → logprob: -7.062509536743164

Token 975: ').
' (ID: 6294)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.24091576039791107
    2. 'input' → logprob: -1.6159157752990723
    3. 'ch' → logprob: -5.115915775299072
    4. 'inp' → logprob: -5.365915775299072
    5. 'chars' → logprob: -6.490915775299072
    6. '#' → logprob: -6.740915775299072
    7. '   ' → logprob: -7.115915775299072
    8. 'in' → logprob: -7.240915775299072
    9. '```' → logprob: -8.615915298461914
    10. 'bits' → logprob: -9.115915298461914

Token 976: '   ' (ID: 271)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.23231241106987
    2. 'input' → logprob: -1.6073124408721924
    3. 'ch' → logprob: -6.232312202453613
    4. 'chars' → logprob: -6.482312202453613
    5. 'bits' → logprob: -6.857312202453613
    6. '#' → logprob: -7.232312202453613
    7. '```' → logprob: -7.357312202453613
    8. 'inp' → logprob: -7.607312202453613
    9. 'bit' → logprob: -9.107312202453613
    10. 'code' → logprob: -9.107312202453613

Token 977: ' #
' (ID: 21888)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.27232813835144043
    2. 'input' → logprob: -1.5223281383514404
    3. 'inp' → logprob: -5.3973283767700195
    4. 'ch' → logprob: -5.5223283767700195
    5. 'bits' → logprob: -5.7723283767700195
    6. '#' → logprob: -5.7723283767700195
    7. 'in' → logprob: -6.1473283767700195
    8. 'chars' → logprob: -6.6473283767700195
    9. 'inv' → logprob: -7.1473283767700195
    10. '   ' → logprob: -7.6473283767700195

Token 978: '   ' (ID: 271)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.4008593261241913
    2. 'input' → logprob: -1.1508593559265137
    3. '#' → logprob: -4.775859355926514
    4. 'chars' → logprob: -6.150859355926514
    5. 'inp' → logprob: -6.650859355926514
    6. 'ch' → logprob: -6.650859355926514
    7. '```' → logprob: -8.025858879089355
    8. 'bits' → logprob: -8.775858879089355
    9. 'in' → logprob: -9.525858879089355
    10. 'mapping' → logprob: -10.400858879089355

Token 979: ' #' (ID: 1069)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.3318313658237457
    2. 'input' → logprob: -1.3318313360214233
    3. '#' (adapté à ' #') → logprob: -4.456831455230713
    4. 'ch' → logprob: -6.206831455230713
    5. 'chars' → logprob: -6.456831455230713
    6. '```' → logprob: -6.831831455230713
    7. 'inp' → logprob: -6.956831455230713
    8. 'bits' → logprob: -7.206831455230713
    9. 'in' → logprob: -9.081830978393555
    10. 'bit' → logprob: -9.331830978393555

Token 980: ' From' (ID: 7217)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.3578720688819885
    2. 'input' → logprob: -1.3578720092773438
    3. 'ch' → logprob: -4.357872009277344
    4. '#' → logprob: -4.607872009277344
    5. 'chars' → logprob: -4.607872009277344
    6. 'inp' → logprob: -4.857872009277344
    7. 'in' → logprob: -6.357872009277344
    8. '```' → logprob: -7.357872009277344
    9. '   ' → logprob: -8.232872009277344
    10. 'bits' → logprob: -8.357872009277344

Token 981: ' the' (ID: 290)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.1497616171836853
    2. 'input' → logprob: -2.14976167678833
    3. 'ch' → logprob: -4.77476167678833
    4. 'inp' → logprob: -4.89976167678833
    5. '#' → logprob: -5.64976167678833
    6. 'chars' → logprob: -7.39976167678833
    7. '   ' → logprob: -7.52476167678833
    8. 'in' → logprob: -7.64976167678833
    9. '```' → logprob: -7.77476167678833
    10. 'code' → logprob: -8.524761199951172

Token 982: ' code' (ID: 3490)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.10145878046751022
    2. 'input' → logprob: -2.851458787918091
    3. 'bits' → logprob: -4.851458549499512
    4. '#' → logprob: -4.976458549499512
    5. 'ch' → logprob: -5.101458549499512
    6. 'inp' → logprob: -5.351458549499512
    7. '```' → logprob: -5.851458549499512
    8. 'inv' → logprob: -5.976458549499512
    9. 'chars' → logprob: -6.476458549499512
    10. 'for' → logprob: -6.726458549499512

Token 983: ' table' (ID: 3293)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.10827306658029556
    2. 'input' → logprob: -2.6082730293273926
    3. 'ch' → logprob: -3.9832730293273926
    4. 'inp' → logprob: -5.608273029327393
    5. '   ' → logprob: -6.233273029327393
    6. 'in' → logprob: -6.233273029327393
    7. '#' → logprob: -6.483273029327393
    8. 'chars' → logprob: -7.108273029327393
    9. '```' → logprob: -8.98327350616455
    10. 'if' → logprob: -9.73327350616455

Token 984: ' and' (ID: 326)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.1791786402463913
    2. 'input' → logprob: -2.3041787147521973
    3. 'ch' → logprob: -4.179178714752197
    4. 'inp' → logprob: -4.429178714752197
    5. '   ' → logprob: -4.554178714752197
    6. 'bits' → logprob: -4.804178714752197
    7. 'in' → logprob: -5.054178714752197
    8. 'chars' → logprob: -5.179178714752197
    9. '```' → logprob: -5.929178714752197
    10. 'code' → logprob: -7.054178714752197

Token 985: ' problem' (ID: 4792)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.1144646555185318
    2. 'input' → logprob: -2.48946475982666
    3. '#' → logprob: -4.23946475982666
    4. 'ch' → logprob: -5.98946475982666
    5. 'inv' → logprob: -6.11446475982666
    6. 'inp' → logprob: -6.36446475982666
    7. 'bits' → logprob: -6.48946475982666
    8. 'chars' → logprob: -6.98946475982666
    9. '```' → logprob: -7.36446475982666
    10. 'in' → logprob: -8.11446475982666

Token 986: ',' (ID: 11)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.1972000002861023
    2. 'input' → logprob: -1.822200059890747
    3. 'ch' → logprob: -5.322199821472168
    4. 'inp' → logprob: -5.572199821472168
    5. 'chars' → logprob: -5.822199821472168
    6. '#' → logprob: -6.072199821472168
    7. 'in' → logprob: -6.697199821472168
    8. 'bits' → logprob: -7.197199821472168
    9. '   ' → logprob: -7.322199821472168
    10. '```' → logprob: -8.697199821472168

Token 987: ' the' (ID: 290)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.2884407937526703
    2. 'input' → logprob: -1.6634408235549927
    3. '#' → logprob: -3.288440704345703
    4. 'ch' → logprob: -4.163440704345703
    5. 'inp' → logprob: -5.413440704345703
    6. 'in' → logprob: -6.288440704345703
    7. 'chars' → logprob: -6.663440704345703
    8. '   ' → logprob: -7.788440704345703
    9. '```' → logprob: -9.788440704345703
    10. 'bits' → logprob: -10.288440704345703

Token 988: ' input' (ID: 3422)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.09417104721069336
    2. 'input' → logprob: -3.0941710472106934
    3. 'ch' → logprob: -3.5941710472106934
    4. 'inp' → logprob: -4.594171047210693
    5. 'in' → logprob: -6.344171047210693
    6. '#' → logprob: -6.719171047210693
    7. 'chars' → logprob: -6.719171047210693
    8. 'if' → logprob: -6.844171047210693
    9. 'bits' → logprob: -7.094171047210693
    10. 'inv' → logprob: -8.344171524047852

Token 989: ' characters' (ID: 9862)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.3851473927497864
    2. '_char' → logprob: -1.7601473331451416
    3. '_to' → logprob: -2.2601473331451416
    4. '_chars' → logprob: -4.135147571563721
    5. 'chars' → logprob: -5.010147571563721
    6. 'to' → logprob: -5.385147571563721
    7. '_map' → logprob: -5.635147571563721
    8. '_bits' → logprob: -5.885147571563721
    9. '_input' → logprob: -6.135147571563721
    10. 'map' → logprob: -6.760147571563721

Token 990: ' used' (ID: 2061)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.34961891174316406
    2. ' =' → logprob: -2.724618911743164
    3. 'char' → logprob: -2.849618911743164
    4. '_char' → logprob: -3.474618911743164
    5. '_to' → logprob: -3.474618911743164
    6. '_bits' → logprob: -3.599618911743164
    7. '_chars' → logprob: -3.974618911743164
    8. '#' → logprob: -4.474618911743164
    9. '=input' → logprob: -4.474618911743164
    10. '_input' → logprob: -4.974618911743164

Token 991: ' in' (ID: 306)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.32360732555389404
    2. 'input' → logprob: -1.448607325553894
    3. 'inp' → logprob: -4.823607444763184
    4. 'ch' → logprob: -5.198607444763184
    5. 'chars' → logprob: -5.198607444763184
    6. 'in' → logprob: -5.448607444763184
    7. ' =' → logprob: -5.448607444763184
    8. '=' → logprob: -5.573607444763184
    9. '=input' → logprob: -5.698607444763184
    10. '#' → logprob: -6.448607444763184

Token 992: ' the' (ID: 290)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.0697256550192833
    2. 'input' → logprob: -2.944725751876831
    3. 'chars' → logprob: -5.944725513458252
    4. 'code' → logprob: -6.069725513458252
    5. 'inp' → logprob: -6.069725513458252
    6. '{
' → logprob: -6.194725513458252
    7. '```' → logprob: -6.319725513458252
    8. 'ch' → logprob: -7.444725513458252
    9. 'table' → logprob: -7.569725513458252
    10. 'bits' → logprob: -7.694725513458252

Token 993: ' coded' (ID: 93104)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.11402641981840134
    2. 'input' → logprob: -2.3640263080596924
    3. 'inp' → logprob: -5.2390265464782715
    4. 'ch' → logprob: -5.8640265464782715
    5. '#' → logprob: -6.3640265464782715
    6. 'mapping' → logprob: -7.2390265464782715
    7. 'inv' → logprob: -7.3640265464782715
    8. 'chars' → logprob: -7.3640265464782715
    9. 'in' → logprob: -7.6140265464782715
    10. 'code' → logprob: -7.8640265464782715

Token 994: ' string' (ID: 1621)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.026433244347572327
    2. 'ch' → logprob: -5.02643346786499
    3. 'chars' → logprob: -5.15143346786499
    4. 'bits' → logprob: -5.90143346786499
    5. '_char' → logprob: -6.02643346786499
    6. '```' → logprob: -6.02643346786499
    7. 'inp' → logprob: -6.65143346786499
    8. 'input' → logprob: -6.77643346786499
    9. '#' → logprob: -7.02643346786499
    10. 'map' → logprob: -8.151432991027832

Token 995: ' are' (ID: 553)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.2165263146162033
    2. 'input' → logprob: -1.7165262699127197
    3. '#' → logprob: -5.216526508331299
    4. 'ch' → logprob: -5.841526508331299
    5. 'chars' → logprob: -5.966526508331299
    6. 'inp' → logprob: -6.091526508331299
    7. 'in' → logprob: -7.091526508331299
    8. '   ' → logprob: -8.09152603149414
    9. '```' → logprob: -8.46652603149414
    10. 'bits' → logprob: -8.71652603149414

Token 996: ' same' (ID: 2684)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.5657395720481873
    2. 'input' → logprob: -0.9407395720481873
    3. 'inp' → logprob: -3.940739631652832
    4. '{
' → logprob: -4.690739631652832
    5. '```' → logprob: -5.815739631652832
    6. 'chars' → logprob: -5.940739631652832
    7. 'in' → logprob: -6.065739631652832
    8. '#' → logprob: -6.065739631652832
    9. 'ch' → logprob: -6.440739631652832
    10. '{' → logprob: -8.565739631652832

Token 997: ' as' (ID: 472)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.11586512625217438
    2. 'bits' → logprob: -3.1158652305603027
    3. 'input' → logprob: -3.3658652305603027
    4. 'chars' → logprob: -4.115865230560303
    5. 'ch' → logprob: -5.240865230560303
    6. '   ' → logprob: -5.740865230560303
    7. 'inp' → logprob: -6.365865230560303
    8. 'bit' → logprob: -6.865865230560303
    9. '#' → logprob: -6.990865230560303
    10. 'if' → logprob: -7.365865230560303

Token 998: ' table' (ID: 3293)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.8868048787117004
    2. '{
' → logprob: -1.6368048191070557
    3. '{' → logprob: -2.0118048191070557
    4. 'code' → logprob: -2.6368048191070557
    5. 'ch' → logprob: -3.0118048191070557
    6. 'table' → logprob: -3.1368048191070557
    7. '```' → logprob: -3.6368048191070557
    8. '{"' → logprob: -4.136805057525635
    9. 'input' → logprob: -4.511805057525635
    10. 'bits' → logprob: -4.886805057525635

Token 999: ' characters' (ID: 9862)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.1619914174079895
    2. '   ' → logprob: -2.0369913578033447
    3. 'char' → logprob: -4.286991596221924
    4. 'ch' → logprob: -6.411991596221924
    5. 'chars' → logprob: -6.536991596221924
    6. 'input' → logprob: -7.161991596221924
    7. 'bit' → logprob: -7.536991596221924
    8. 'if' → logprob: -8.286991119384766
    9. '```' → logprob: -8.661991119384766
    10. 'for' → logprob: -8.786991119384766

Token 1000: '.
' (ID: 558)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.4948200583457947
    2. 'bits' → logprob: -1.1198201179504395
    3. 'input' → logprob: -3.9948201179504395
    4. '   ' → logprob: -4.1198201179504395
    5. 'chars' → logprob: -4.4948201179504395
    6. 'ch' → logprob: -4.7448201179504395
    7. 'bit' → logprob: -5.7448201179504395
    8. '#' → logprob: -6.1198201179504395
    9. 'inp' → logprob: -6.1198201179504395
    10. 'inv' → logprob: -7.1198201179504395

Token 1001: '   ' (ID: 271)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.08834807574748993
    2. 'input' → logprob: -2.838348150253296
    3. '#' → logprob: -4.213347911834717
    4. 'bits' → logprob: -5.463347911834717
    5. 'ch' → logprob: -5.713347911834717
    6. 'chars' → logprob: -5.963347911834717
    7. '```' → logprob: -7.713347911834717
    8. 'inv' → logprob: -8.588348388671875
    9. 'bit' → logprob: -8.963348388671875
    10. 'inp' → logprob: -9.088348388671875

Token 1002: ' #' (ID: 1069)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.21653352677822113
    2. 'char' → logprob: -1.7165335416793823
    3. 'input' → logprob: -5.466533660888672
    4. 'bit' → logprob: -5.841533660888672
    5. 'chars' → logprob: -5.841533660888672
    6. 'ch' → logprob: -6.091533660888672
    7. '   ' → logprob: -6.466533660888672
    8. 'inv' → logprob: -7.841533660888672
    9. 'inp' → logprob: -8.091533660888672
    10. '#' (adapté à ' #') → logprob: -8.716533660888672

Token 1003: ' Therefore' (ID: 19233)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.11044716089963913
    2. 'bits' → logprob: -3.2354471683502197
    3. 'input' → logprob: -3.6104471683502197
    4. 'ch' → logprob: -4.360446929931641
    5. 'inv' → logprob: -4.485446929931641
    6. 'chars' → logprob: -5.610446929931641
    7. '#' → logprob: -5.860446929931641
    8. 'inp' → logprob: -6.110446929931641
    9. '```' → logprob: -6.360446929931641
    10. 'bit' → logprob: -6.610446929931641

Token 1004: ',' (ID: 11)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.13858968019485474
    2. 'input' → logprob: -2.38858962059021
    3. 'ch' → logprob: -4.263589859008789
    4. '#' → logprob: -4.263589859008789
    5. 'chars' → logprob: -5.513589859008789
    6. '   ' → logprob: -5.888589859008789
    7. 'inp' → logprob: -6.513589859008789
    8. 'in' → logprob: -7.138589859008789
    9. 'bits' → logprob: -8.013589859008789
    10. 'code' → logprob: -10.888589859008789

Token 1005: ' input' (ID: 3422)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.28297486901283264
    2. 'bits' → logprob: -1.6579748392105103
    3. 'input' → logprob: -3.4079749584198
    4. '   ' → logprob: -4.532974720001221
    5. 'chars' → logprob: -5.782974720001221
    6. 'ch' → logprob: -6.032974720001221
    7. 'bit' → logprob: -6.157974720001221
    8. 'inv' → logprob: -6.907974720001221
    9. '#' → logprob: -7.032974720001221
    10. '```' → logprob: -7.157974720001221

Token 1006: ' characters' (ID: 9862)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.5311142802238464
    2. 'bits' → logprob: -1.1561143398284912
    3. 'ch' → logprob: -2.781114339828491
    4. 'code' → logprob: -4.781114101409912
    5. 'if' → logprob: -5.156114101409912
    6. '   ' → logprob: -5.281114101409912
    7. 'c' → logprob: -5.781114101409912
    8. '```' → logprob: -6.031114101409912
    9. 'input' → logprob: -6.406114101409912
    10. 'for' → logprob: -6.531114101409912

Token 1007: ' map' (ID: 4014)
  Prédit: '_to'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_to' → logprob: -0.30697572231292725
    2. '_bits' → logprob: -1.5569757223129272
    3. '=' → logprob: -3.931975841522217
    4. ' =' → logprob: -4.431975841522217
    5. '_code' → logprob: -5.556975841522217
    6. '_chars' → logprob: -5.556975841522217
    7. '_bit' → logprob: -5.806975841522217
    8. '```' → logprob: -5.931975841522217
    9. 'bits' → logprob: -6.056975841522217
    10. '_char' → logprob: -6.056975841522217

Token 1008: ' to' (ID: 316)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.3494797945022583
    2. 'to' → logprob: -1.8494797945022583
    3. '[ch' → logprob: -2.5994796752929688
    4. '```' → logprob: -4.099479675292969
    5. '   ' → logprob: -4.349479675292969
    6. 'ch' → logprob: -4.599479675292969
    7. '_to' → logprob: -4.849479675292969
    8. 'char' → logprob: -5.349479675292969
    9. ' =' → logprob: -5.849479675292969
    10. 'code' → logprob: -6.849479675292969

Token 1009: ' single' (ID: 4590)
  Prédit: 'code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'code' → logprob: -0.08916476368904114
    2. 'bits' → logprob: -3.5891647338867188
    3. '```' → logprob: -3.5891647338867188
    4. 'table' → logprob: -4.339164733886719
    5. 'char' → logprob: -4.589164733886719
    6. 'bit' → logprob: -6.464164733886719
    7. '`' → logprob: -6.839164733886719
    8. 'ch' → logprob: -7.214164733886719
    9. '{
' → logprob: -7.589164733886719
    10. ' code' → logprob: -7.839164733886719

Token 1010: ' bits' (ID: 18189)
  Prédit: 'code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'code' → logprob: -0.6089558005332947
    2. 'bits' → logprob: -1.6089558601379395
    3. 'char' → logprob: -1.7339558601379395
    4. '```' → logprob: -3.6089558601379395
    5. 'bit' → logprob: -4.4839558601379395
    6. '`' → logprob: -4.8589558601379395
    7. '_bits' → logprob: -4.8589558601379395
    8. 'table' → logprob: -5.2339558601379395
    9. '_code' → logprob: -5.3589558601379395
    10. '_char' → logprob: -5.6089558601379395

Token 1011: ':' (ID: 25)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.2529207170009613
    2. 'bits' → logprob: -2.127920627593994
    3. 'input' → logprob: -2.627920627593994
    4. '#' → logprob: -4.377920627593994
    5. 'bit' → logprob: -4.877920627593994
    6. 'ch' → logprob: -5.252920627593994
    7. 'inp' → logprob: -6.127920627593994
    8. 'chars' → logprob: -6.252920627593994
    9. 'in' → logprob: -7.252920627593994
    10. 'code' → logprob: -7.377920627593994

Token 1012: ' maybe' (ID: 10112)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.07377149909734726
    2. 'input' → logprob: -3.1987714767456055
    3. 'ch' → logprob: -4.0737714767456055
    4. 'chars' → logprob: -5.5737714767456055
    5. '#' → logprob: -5.6987714767456055
    6. 'bits' → logprob: -6.0737714767456055
    7. 'inp' → logprob: -6.0737714767456055
    8. '```' → logprob: -7.5737714767456055
    9. 'in' → logprob: -8.073771476745605
    10. '   ' → logprob: -8.073771476745605

Token 1013: ':

' (ID: 1402)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.09016640484333038
    2. 'input' → logprob: -3.0901663303375244
    3. 'ch' → logprob: -3.7151663303375244
    4. 'bits' → logprob: -5.0901665687561035
    5. 'inp' → logprob: -5.4651665687561035
    6. 'chars' → logprob: -5.9651665687561035
    7. '#' → logprob: -6.3401665687561035
    8. 'bit' → logprob: -7.9651665687561035
    9. '   ' → logprob: -7.9651665687561035
    10. 'in' → logprob: -8.090166091918945

Token 1014: 'char' (ID: 3257)
  Prédit: 'char'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.07836228609085083
    2. 'input' → logprob: -2.953362226486206
    3. 'ch' → logprob: -4.578362464904785
    4. '```' → logprob: -5.203362464904785
    5. '#' → logprob: -5.703362464904785
    6. 'bits' → logprob: -6.328362464904785
    7. 'chars' → logprob: -6.578362464904785
    8. 'inp' → logprob: -8.078362464904785
    9. 'bit' → logprob: -8.453362464904785
    10. '``' → logprob: -9.078362464904785

Token 1015: '_to' (ID: 5089)
  Prédit: '_to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_to' → logprob: -0.0010029166005551815
    2. '_bits' → logprob: -7.376002788543701
    3. '_map' → logprob: -8.00100326538086
    4. '_bit' → logprob: -10.62600326538086
    5. '_code' → logprob: -12.12600326538086
    6. '_' → logprob: -12.50100326538086
    7. '_mapping' → logprob: -13.12600326538086
    8. 's' → logprob: -13.37600326538086
    9. '2' → logprob: -13.50100326538086
    10. '_codes' → logprob: -14.25100326538086

Token 1016: '_bits' (ID: 48415)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.18554241955280304
    2. 'code' → logprob: -1.9355424642562866
    3. 'bit' → logprob: -4.435542583465576
    4. '_bits' → logprob: -4.435542583465576
    5. '{
' → logprob: -7.310542583465576
    6. '_code' → logprob: -8.060542106628418
    7. '{' → logprob: -8.935542106628418
    8. 'char' → logprob: -10.060542106628418
    9. 'table' → logprob: -10.310542106628418
    10. ' =' → logprob: -10.435542106628418

Token 1017: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.007675010710954666
    2. ' =' → logprob: -4.8826751708984375
    3. '={' → logprob: -10.257675170898438
    4. '={}' → logprob: -11.007675170898438
    5. '={
' → logprob: -11.382675170898438
    6. '={'' → logprob: -13.132675170898438
    7. '={"' → logprob: -13.132675170898438
    8. '={}
' → logprob: -13.507675170898438
    9. '=
' → logprob: -15.757675170898438
    10. 'char' → logprob: -15.757675170898438

Token 1018: ' {
' (ID: 405)
  Prédit: '{
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '{
' → logprob: -0.5484955310821533
    2. '{' → logprob: -1.2984955310821533
    3. '{}' → logprob: -2.5484955310821533
    4. '{}
' → logprob: -2.6734955310821533
    5. '{'' → logprob: -6.798495292663574
    6. '{"' → logprob: -7.798495292663574
    7. 'dict' → logprob: -8.298495292663574
    8. '{}

' → logprob: -8.673495292663574
    9. ' {
' → logprob: -11.048495292663574
    10. ' {' → logprob: -11.298495292663574

Token 1019: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07447811961174011
    2. '{' → logprob: -3.0744781494140625
    3. '{
' → logprob: -3.9494781494140625
    4. ''' → logprob: -5.9494781494140625
    5. '"' → logprob: -6.1994781494140625
    6. '       ' → logprob: -7.5744781494140625
    7. '{'' → logprob: -8.449478149414062
    8. '```' → logprob: -8.449478149414062
    9. '{"' → logprob: -8.699478149414062
    10. ''ch' → logprob: -9.074478149414062

Token 1020: ' '?' (ID: 73818)
  Prédit: '{
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '{
' → logprob: -0.9148721694946289
    2. ''' → logprob: -1.539872169494629
    3. '   ' → logprob: -1.664872169494629
    4. '"' → logprob: -2.539872169494629
    5. '{' → logprob: -3.039872169494629
    6. ''U' → logprob: -3.914872169494629
    7. ''E' → logprob: -4.539872169494629
    8. ''A' → logprob: -4.789872169494629
    9. ''?' (adapté à ' '?') → logprob: -4.914872169494629
    10. '"E' → logprob: -5.164872169494629

Token 1021: '':' (ID: 2337)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.3387880325317383
    2. '':' → logprob: -1.3387880325317383
    3. '":' → logprob: -1.4637880325317383
    4. '=' → logprob: -1.5887880325317383
    5. ' =' → logprob: -3.7137880325317383
    6. ''' → logprob: -5.088788032531738
    7. '='' → logprob: -5.463788032531738
    8. '"' → logprob: -6.588788032531738
    9. '   ' → logprob: -6.963788032531738
    10. '':'' → logprob: -7.213788032531738

Token 1022: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.4740960896015167
    2. '"' → logprob: -0.9740960597991943
    3. '111' → logprob: -11.224096298217773
    4. '   ' → logprob: -12.349096298217773
    5. ' '' → logprob: -14.349096298217773
    6. ' "' → logprob: -15.349096298217773
    7. 'code' → logprob: -16.349096298217773
    8. ''.' → logprob: -16.474096298217773
    9. '`' → logprob: -16.599096298217773
    10. ''b' → logprob: -17.099096298217773

Token 1023: '1' (ID: 16)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.2034148871898651
    2. '111' → logprob: -1.7034149169921875
    3. '"' → logprob: -6.3284149169921875
    4. '''' → logprob: -9.078414916992188
    5. '000' → logprob: -10.703414916992188
    6. '''
' → logprob: -10.828414916992188
    7. 'None' → logprob: -11.203414916992188
    8. ''''' → logprob: -11.828414916992188
    9. '`' → logprob: -12.078414916992188
    10. '""' → logprob: -12.203414916992188

Token 1024: '',
' (ID: 1214)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.6981481909751892
    2. '111' → logprob: -1.448148250579834
    3. '000' → logprob: -1.698148250579834
    4. ''''' → logprob: -3.198148250579834
    5. '')' → logprob: -3.823148250579834
    6. '0' → logprob: -5.073148250579834
    7. '<|end|>' → logprob: -5.323148250579834
    8. '1' → logprob: -5.823148250579834
    9. '''' → logprob: -5.823148250579834
    10. '001' → logprob: -6.823148250579834

Token 1025: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.13339614868164062
    2. ''-' → logprob: -2.1333961486816406
    3. '"'' → logprob: -6.008396148681641
    4. '   ' → logprob: -6.383396148681641
    5. '"' → logprob: -7.383396148681641
    6. ''?' → logprob: -7.508396148681641
    7. ''''' → logprob: -8.00839614868164
    8. ''D' → logprob: -8.13339614868164
    9. '?' → logprob: -9.38339614868164
    10. ' ' → logprob: -9.50839614868164

Token 1026: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' (adapté à ' '') → logprob: -0.19571612775325775
    2. ''-' → logprob: -2.445716142654419
    3. ''D' → logprob: -2.445716142654419
    4. ''U' → logprob: -5.94571590423584
    5. ''A' → logprob: -7.44571590423584
    6. ''E' → logprob: -7.82071590423584
    7. ''''' → logprob: -9.07071590423584
    8. '"' → logprob: -9.19571590423584
    9. ' '' → logprob: -9.19571590423584
    10. ''O' → logprob: -9.32071590423584

Token 1027: 'D' (ID: 35)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.007272114045917988
    2. ''-' → logprob: -5.132272243499756
    3. '0' → logprob: -7.007272243499756
    4. ''D' → logprob: -8.882271766662598
    5. ' '' → logprob: -9.132271766662598
    6. '"' → logprob: -9.757271766662598
    7. ' ' → logprob: -10.757271766662598
    8. ''''' → logprob: -10.757271766662598
    9. ''U' → logprob: -11.132271766662598
    10. '`' → logprob: -11.257271766662598

Token 1028: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.003696993226185441
    2. ''' → logprob: -6.003696918487549
    3. ':' → logprob: -6.753696918487549
    4. '":' → logprob: -10.878697395324707
    5. '':'' → logprob: -11.003697395324707
    6. ' ':' → logprob: -12.378697395324707
    7. '')' → logprob: -13.128697395324707
    8. '<|end|>' → logprob: -13.503697395324707
    9. ''):' → logprob: -13.503697395324707
    10. '):' → logprob: -13.628697395324707

Token 1029: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0013808291405439377
    2. '"' → logprob: -6.876380920410156
    3. '1' → logprob: -8.751380920410156
    4. '110' → logprob: -9.001380920410156
    5. '0' → logprob: -9.751380920410156
    6. ' '' → logprob: -12.126380920410156
    7. ' ' → logprob: -14.501380920410156
    8. '`' → logprob: -14.876380920410156
    9. '11' → logprob: -15.251380920410156
    10. '10' → logprob: -15.501380920410156

Token 1030: '0' (ID: 15)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.2784925699234009
    2. '0' → logprob: -1.5284925699234009
    3. ''' → logprob: -4.028492450714111
    4. '110' → logprob: -5.028492450714111
    5. '11' → logprob: -7.028492450714111
    6. '"' → logprob: -7.403492450714111
    7. '10' → logprob: -9.27849292755127
    8. '011' → logprob: -9.40349292755127
    9. '111' → logprob: -10.27849292755127
    10. '01' → logprob: -10.90349292755127

Token 1031: '',
' (ID: 1214)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.755200207233429
    2. '',' → logprob: -0.880200207233429
    3. ''}' → logprob: -2.380200147628784
    4. '',
' → logprob: -3.880200147628784
    5. '}' → logprob: -6.755200386047363
    6. ''},' → logprob: -7.130200386047363
    7. '<|end|>' → logprob: -9.005200386047363
    8. '')' → logprob: -10.630200386047363
    9. '']' → logprob: -11.505200386047363
    10. ''},
' → logprob: -11.630200386047363

Token 1032: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.06034824252128601
    2. '   ' → logprob: -3.1853482723236084
    3. ')' → logprob: -5.435348033905029
    4. '{' → logprob: -5.810348033905029
    5. ''D' → logprob: -6.435348033905029
    6. '<|end|>' → logprob: -6.685348033905029
    7. '```' → logprob: -6.935348033905029
    8. '"' → logprob: -7.185348033905029
    9. ' ' → logprob: -7.310348033905029
    10. '',' → logprob: -7.435348033905029

Token 1033: ' '-' (ID: 17489)
  Prédit: ''-'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''-' (adapté à ' '-') → logprob: -0.09497641772031784
    2. ''' → logprob: -2.4699764251708984
    3. '   ' → logprob: -6.219976425170898
    4. '"-' → logprob: -6.719976425170898
    5. '"' → logprob: -7.469976425170898
    6. ''D' → logprob: -7.719976425170898
    7. '-' → logprob: -7.969976425170898
    8. ''''' → logprob: -7.969976425170898
    9. '',' → logprob: -8.219976425170898
    10. ')' → logprob: -8.469976425170898

Token 1034: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.014499588869512081
    2. ''' → logprob: -4.264499664306641
    3. '',' → logprob: -8.38949966430664
    4. '':'' → logprob: -10.13949966430664
    5. '":' → logprob: -11.01449966430664
    6. ':' → logprob: -11.38949966430664
    7. '<|end|>' → logprob: -11.38949966430664
    8. ''):' → logprob: -11.51449966430664
    9. '',
' → logprob: -12.63949966430664
    10. ''},' → logprob: -12.88949966430664

Token 1035: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.000995060196146369
    2. '0' → logprob: -7.37599515914917
    3. '1' → logprob: -8.125994682312012
    4. ' '' → logprob: -10.500994682312012
    5. '"' → logprob: -10.750994682312012
    6. ''-' → logprob: -11.000994682312012
    7. '`' → logprob: -13.000994682312012
    8. ')' → logprob: -13.625994682312012
    9. ' ' → logprob: -14.125994682312012
    10. '   ' → logprob: -14.500994682312012

Token 1036: '1' (ID: 16)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.007214006967842579
    2. '1' → logprob: -5.632214069366455
    3. '0' → logprob: -6.257214069366455
    4. '101' → logprob: -7.382214069366455
    5. '')' → logprob: -8.382213592529297
    6. '001' → logprob: -8.632213592529297
    7. '010' → logprob: -8.882213592529297
    8. '100' → logprob: -9.257213592529297
    9. ' '' → logprob: -9.507213592529297
    10. '"' → logprob: -9.507213592529297

Token 1037: '',
' (ID: 1214)
  Prédit: '','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '',' → logprob: -0.6560148596763611
    2. '}' → logprob: -1.2810149192810059
    3. ''}' → logprob: -2.281014919281006
    4. ''' → logprob: -3.531014919281006
    5. '   ' → logprob: -3.781014919281006
    6. ',' → logprob: -4.031014919281006
    7. '<|end|>' → logprob: -4.656014919281006
    8. '',
' → logprob: -5.031014919281006
    9. ''},' → logprob: -5.781014919281006
    10. ',
' → logprob: -6.156014919281006

Token 1038: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.004788476508110762
    2. '"' → logprob: -6.379788398742676
    3. '',' → logprob: -7.629788398742676
    4. '   ' → logprob: -7.754788398742676
    5. '```' → logprob: -7.754788398742676
    6. ' ' → logprob: -7.879788398742676
    7. ' '' → logprob: -8.379788398742676
    8. ''C' → logprob: -8.754788398742676
    9. ''''' → logprob: -9.004788398742676
    10. ''D' → logprob: -9.004788398742676

Token 1039: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' (adapté à ' '') → logprob: -0.023543838411569595
    2. ' '' → logprob: -4.648543834686279
    3. ''C' → logprob: -5.398543834686279
    4. '"' → logprob: -6.023543834686279
    5. '   ' → logprob: -6.398543834686279
    6. ''''' → logprob: -6.648543834686279
    7. ')' → logprob: -7.023543834686279
    8. '"'' → logprob: -7.398543834686279
    9. ' ' → logprob: -7.773543834686279
    10. ''D' → logprob: -8.273544311523438

Token 1040: 'C' (ID: 34)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.018087545409798622
    2. ' '' → logprob: -4.768087387084961
    3. ' ' → logprob: -6.018087387084961
    4. '"' → logprob: -6.643087387084961
    5. ')' → logprob: -6.643087387084961
    6. '0' → logprob: -7.143087387084961
    7. '`' → logprob: -7.518087387084961
    8. 'C' → logprob: -7.768087387084961
    9. ''U' → logprob: -8.143087387084961
    10. '   ' → logprob: -8.268087387084961

Token 1041: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.06589168310165405
    2. ''' → logprob: -3.315891742706299
    3. ':' → logprob: -3.690891742706299
    4. '```' → logprob: -7.190891742706299
    5. '':'' → logprob: -8.19089126586914
    6. '=' → logprob: -8.19089126586914
    7. '**' → logprob: -8.44089126586914
    8. '['' → logprob: -8.94089126586914
    9. '']' → logprob: -9.19089126586914
    10. '":' → logprob: -9.31589126586914

Token 1042: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.00257660960778594
    2. ' '' → logprob: -6.00257682800293
    3. '"' → logprob: -9.25257682800293
    4. '0' → logprob: -12.62757682800293
    5. '   ' → logprob: -14.12757682800293
    6. ' ' → logprob: -14.75257682800293
    7. '['' → logprob: -16.00257682800293
    8. '`' → logprob: -16.12757682800293
    9. '('' → logprob: -16.25257682800293
    10. '='' → logprob: -16.25257682800293

Token 1043: '0' (ID: 15)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.16040253639221191
    2. '0' → logprob: -1.910402536392212
    3. '"' → logprob: -8.910402297973633
    4. ' '' → logprob: -11.160402297973633
    5. '000' → logprob: -11.660402297973633
    6. '`' → logprob: -12.535402297973633
    7. '1' → logprob: -12.535402297973633
    8. '001' → logprob: -12.785402297973633
    9. ' ' → logprob: -13.160402297973633
    10. '010' → logprob: -13.285402297973633

Token 1044: '',
' (ID: 1214)
  Prédit: '','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '',' → logprob: -0.4445635974407196
    2. ''' → logprob: -1.819563627243042
    3. '}' → logprob: -3.069563627243042
    4. '   ' → logprob: -3.194563627243042
    5. '':' → logprob: -3.444563627243042
    6. '<|end|>' → logprob: -3.569563627243042
    7. ''}' → logprob: -3.944563627243042
    8. '',
' → logprob: -4.444563388824463
    9. ':' → logprob: -5.194563388824463
    10. ',' → logprob: -5.819563388824463

Token 1045: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0018747396534308791
    2. ' '' → logprob: -7.876874923706055
    3. '   ' → logprob: -8.126874923706055
    4. ''D' → logprob: -8.251874923706055
    5. '```' → logprob: -8.501874923706055
    6. '"' → logprob: -8.751874923706055
    7. '`' → logprob: -9.001874923706055
    8. '<|end|>' → logprob: -9.251874923706055
    9. ')' → logprob: -9.626874923706055
    10. ' ' → logprob: -9.751874923706055

Token 1046: ' "'' (ID: 12868)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.003981397021561861
    2. '"' → logprob: -6.503981590270996
    3. '   ' → logprob: -7.253981590270996
    4. '`' → logprob: -7.503981590270996
    5. '```' → logprob: -7.878981590270996
    6. '       ' → logprob: -8.128981590270996
    7. ''''' → logprob: -8.503981590270996
    8. '"'' (adapté à ' "'') → logprob: -9.503981590270996
    9. ' ' → logprob: -9.628981590270996
    10. '',' → logprob: -10.503981590270996

Token 1047: '":' (ID: 1243)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.5286714434623718
    2. '':' → logprob: -1.0286715030670166
    3. ''' → logprob: -3.0286715030670166
    4. '"' → logprob: -6.2786712646484375
    5. '":' → logprob: -6.4036712646484375
    6. '<|end|>' → logprob: -7.6536712646484375
    7. '')' → logprob: -9.278671264648438
    8. '<|end|>' → logprob: -9.653671264648438
    9. ''"' → logprob: -9.778671264648438
    10. '```' → logprob: -9.903671264648438

Token 1048: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0004008793330285698
    2. '"' → logprob: -8.00040054321289
    3. ' '' → logprob: -9.87540054321289
    4. '0' → logprob: -11.25040054321289
    5. '"'' → logprob: -15.12540054321289
    6. '`' → logprob: -15.37540054321289
    7. '1' → logprob: -16.12540054321289
    8. '   ' → logprob: -16.12540054321289
    9. ' ' → logprob: -16.25040054321289
    10. ''''' → logprob: -16.75040054321289

Token 1049: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.5417109727859497
    2. ''' → logprob: -0.9167109727859497
    3. '1' → logprob: -4.29171085357666
    4. '"' → logprob: -5.54171085357666
    5. '001' → logprob: -7.66671085357666
    6. ''''' → logprob: -9.66671085357666
    7. '010' → logprob: -9.79171085357666
    8. '000' → logprob: -10.16671085357666
    9. '`' → logprob: -10.54171085357666
    10. '"'' → logprob: -10.54171085357666

Token 1050: '',
' (ID: 1214)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.7331534624099731
    2. '',' → logprob: -0.8581534624099731
    3. '':' → logprob: -3.2331533432006836
    4. '}' → logprob: -3.9831533432006836
    5. ''}' → logprob: -4.358153343200684
    6. '   ' → logprob: -4.733153343200684
    7. ':' → logprob: -5.733153343200684
    8. ',' → logprob: -5.983153343200684
    9. '',
' → logprob: -5.983153343200684
    10. '<|end|>' → logprob: -6.233153343200684

Token 1051: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.4347062110900879
    2. '   ' → logprob: -1.184706211090088
    3. '{' → logprob: -4.059706211090088
    4. '"' → logprob: -4.184706211090088
    5. '```' → logprob: -5.184706211090088
    6. '{
' → logprob: -6.184706211090088
    7. '`' → logprob: -6.559706211090088
    8. ''D' → logprob: -6.684706211090088
    9. '       ' → logprob: -7.184706211090088
    10. ')' → logprob: -7.934706211090088

Token 1052: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' (adapté à ' '') → logprob: -0.023555943742394447
    2. '   ' → logprob: -4.398555755615234
    3. '"' → logprob: -5.273555755615234
    4. ' '' → logprob: -6.148555755615234
    5. ''U' → logprob: -6.773555755615234
    6. '`' → logprob: -7.023555755615234
    7. ' ' → logprob: -7.773555755615234
    8. '    ' → logprob: -8.148555755615234
    9. 'A' → logprob: -8.398555755615234
    10. ''A' → logprob: -8.773555755615234

Token 1053: 'K' (ID: 42)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.001705175032839179
    2. ''A' → logprob: -8.001705169677734
    3. 'K' → logprob: -8.126705169677734
    4. '`' → logprob: -8.126705169677734
    5. ' '' → logprob: -8.376705169677734
    6. 'A' → logprob: -8.751705169677734
    7. ''U' → logprob: -9.376705169677734
    8. ' ' → logprob: -9.626705169677734
    9. '"' → logprob: -9.751705169677734
    10. ''\' → logprob: -10.626705169677734

Token 1054: '':' (ID: 2337)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.43392395973205566
    2. '':' → logprob: -1.3089239597320557
    3. ''' → logprob: -2.8089239597320557
    4. '=' → logprob: -4.058923721313477
    5. ' =' → logprob: -6.808923721313477
    6. '='' → logprob: -7.058923721313477
    7. '":' → logprob: -7.183923721313477
    8. '<|end|>' → logprob: -7.933923721313477
    9. ''=' → logprob: -8.433923721313477
    10. '```' → logprob: -8.683923721313477

Token 1055: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.034590769559144974
    2. ' '' → logprob: -3.409590721130371
    3. '"' → logprob: -7.409590721130371
    4. '0' → logprob: -8.034590721130371
    5. ' ' → logprob: -11.534590721130371
    6. ' "' → logprob: -13.159590721130371
    7. '('' → logprob: -14.159590721130371
    8. '`' → logprob: -14.659590721130371
    9. ' ' → logprob: -14.909590721130371
    10. '='' → logprob: -15.034590721130371

Token 1056: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.08027450740337372
    2. ''' → logprob: -2.5802745819091797
    3. '"' → logprob: -6.70527458190918
    4. '1' → logprob: -9.95527458190918
    5. '010' → logprob: -9.95527458190918
    6. '000' → logprob: -10.45527458190918
    7. '001' → logprob: -11.70527458190918
    8. '`' → logprob: -11.95527458190918
    9. '011' → logprob: -12.20527458190918
    10. '110' → logprob: -12.33027458190918

Token 1057: '',
' (ID: 1214)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '}' → logprob: -0.7647740840911865
    2. '':' → logprob: -2.0147740840911865
    3. '',' → logprob: -2.0147740840911865
    4. ''' → logprob: -2.2647740840911865
    5. ''}' → logprob: -2.3897740840911865
    6. '   ' → logprob: -2.7647740840911865
    7. '',
' → logprob: -5.764774322509766
    8. '}:' → logprob: -6.389774322509766
    9. ':' → logprob: -6.514774322509766
    10. '```' → logprob: -6.764774322509766

Token 1058: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.006786893121898174
    2. ''O' → logprob: -6.256786823272705
    3. ' '' → logprob: -6.381786823272705
    4. '"' → logprob: -6.756786823272705
    5. '   ' → logprob: -7.131786823272705
    6. '`' → logprob: -7.506786823272705
    7. '```' → logprob: -8.256787300109863
    8. ''U' → logprob: -9.131787300109863
    9. ''o' → logprob: -9.756787300109863
    10. ' 
' → logprob: -10.256787300109863

Token 1059: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' (adapté à ' '') → logprob: -0.020923946052789688
    2. '   ' → logprob: -4.395924091339111
    3. ''O' → logprob: -5.645924091339111
    4. '`' → logprob: -6.395924091339111
    5. '```' → logprob: -7.145924091339111
    6. ''U' → logprob: -7.270924091339111
    7. '"' → logprob: -8.020923614501953
    8. ''A' → logprob: -8.395923614501953
    9. ' '' → logprob: -8.395923614501953
    10. '       ' → logprob: -8.520923614501953

Token 1060: 'O' (ID: 46)
  Prédit: 'O'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'O' → logprob: -0.7211330533027649
    2. ''O' → logprob: -0.7211330533027649
    3. ''' → logprob: -4.221133232116699
    4. '"O' → logprob: -4.971133232116699
    5. '`' → logprob: -5.846133232116699
    6. ''A' → logprob: -6.846133232116699
    7. ' '' → logprob: -7.096133232116699
    8. '   ' → logprob: -8.5961332321167
    9. 'P' → logprob: -8.7211332321167
    10. '"' → logprob: -8.8461332321167

Token 1061: '':' (ID: 2337)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.36086657643318176
    2. '=' → logprob: -1.7358665466308594
    3. '':' → logprob: -2.3608665466308594
    4. ' =' → logprob: -4.485866546630859
    5. ''=' → logprob: -5.360866546630859
    6. '   ' → logprob: -5.360866546630859
    7. '```' → logprob: -5.735866546630859
    8. ':' → logprob: -6.235866546630859
    9. '='' → logprob: -6.735866546630859
    10. '']' → logprob: -7.110866546630859

Token 1062: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0036478189285844564
    2. ' '' → logprob: -5.628647804260254
    3. '"' → logprob: -10.003647804260254
    4. '0' → logprob: -13.753647804260254
    5. ' ' → logprob: -15.003647804260254
    6. '`' → logprob: -15.378647804260254
    7. '1' → logprob: -15.378647804260254
    8. ' ' → logprob: -15.503647804260254
    9. '='' → logprob: -15.628647804260254
    10. '('' → logprob: -16.37864875793457

Token 1063: '1' (ID: 16)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.1194339171051979
    2. '1' → logprob: -2.369433879852295
    3. '0' → logprob: -4.369433879852295
    4. '"' → logprob: -5.119433879852295
    5. '`' → logprob: -9.369434356689453
    6. '111' → logprob: -9.494434356689453
    7. '110' → logprob: -9.744434356689453
    8. '010' → logprob: -9.869434356689453
    9. '100' → logprob: -10.744434356689453
    10. ''''' → logprob: -10.744434356689453

Token 1064: '',
' (ID: 1214)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.5221640467643738
    2. '',
' → logprob: -1.1471641063690186
    3. '',' → logprob: -2.6471641063690186
    4. '   ' → logprob: -4.5221638679504395
    5. '```' → logprob: -6.0221638679504395
    6. ''
' → logprob: -6.7721638679504395
    7. ''",
' → logprob: -7.0221638679504395
    8. ''}' → logprob: -7.3971638679504395
    9. '':' → logprob: -7.6471638679504395
    10. '')' → logprob: -8.272164344787598

Token 1065: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.16842781007289886
    2. '   ' → logprob: -1.91842782497406
    3. ''U' → logprob: -4.91842794418335
    4. ''A' → logprob: -8.168427467346191
    5. '       ' → logprob: -8.668427467346191
    6. '```' → logprob: -9.293427467346191
    7. ' '' → logprob: -9.668427467346191
    8. ' ' → logprob: -9.668427467346191
    9. ''u' → logprob: -9.793427467346191
    10. '    ' → logprob: -10.168427467346191

Token 1066: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' (adapté à ' '') → logprob: -0.009770254604518414
    2. ' '' → logprob: -5.259770393371582
    3. ''U' → logprob: -6.134770393371582
    4. '   ' → logprob: -6.259770393371582
    5. '```' → logprob: -8.509770393371582
    6. ' ' → logprob: -9.009770393371582
    7. ''A' → logprob: -10.009770393371582
    8. '`' → logprob: -10.259770393371582
    9. '"' → logprob: -11.634770393371582
    10. ''u' → logprob: -12.384770393371582

Token 1067: 'P' (ID: 47)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.09446427971124649
    2. 'P' → logprob: -2.9694643020629883
    3. ''U' → logprob: -3.3444643020629883
    4. ' '' → logprob: -6.719464302062988
    5. 'U' → logprob: -7.469464302062988
    6. ''A' → logprob: -7.469464302062988
    7. '"P' → logprob: -7.594464302062988
    8. '   ' → logprob: -8.594464302062988
    9. '`' → logprob: -8.719464302062988
    10. ' ' → logprob: -9.094464302062988

Token 1068: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.4010169804096222
    2. ''' → logprob: -1.2760169506072998
    3. '=' → logprob: -3.9010169506073
    4. ':' → logprob: -3.9010169506073
    5. ' =' → logprob: -5.776017189025879
    6. '']' → logprob: -6.276017189025879
    7. ''=' → logprob: -6.276017189025879
    8. '   ' → logprob: -7.026017189025879
    9. '['' → logprob: -7.901017189025879
    10. '':'' → logprob: -8.026017189025879

Token 1069: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.014241776429116726
    2. ' '' → logprob: -4.264241695404053
    3. '"' → logprob: -9.639242172241211
    4. '0' → logprob: -11.764242172241211
    5. '`' → logprob: -13.514242172241211
    6. ' ' → logprob: -14.014242172241211
    7. '='' → logprob: -14.389242172241211
    8. ''''' → logprob: -14.514242172241211
    9. ' ' → logprob: -14.514242172241211
    10. '```' → logprob: -14.889242172241211

Token 1070: '0' (ID: 15)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.011968781240284443
    2. '0' → logprob: -4.511968612670898
    3. '"' → logprob: -7.136968612670898
    4. '1' → logprob: -10.011968612670898
    5. '`' → logprob: -10.761968612670898
    6. '000' → logprob: -11.011968612670898
    7. '111' → logprob: -11.636968612670898
    8. ' '' → logprob: -11.886968612670898
    9. '010' → logprob: -12.261968612670898
    10. '```' → logprob: -12.386968612670898

Token 1071: '',
' (ID: 1214)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.008506902493536472
    2. '':' → logprob: -4.883506774902344
    3. '<|end|>' → logprob: -8.258506774902344
    4. ')' → logprob: -9.133506774902344
    5. '   ' → logprob: -9.258506774902344
    6. '```' → logprob: -9.633506774902344
    7. '',' → logprob: -9.758506774902344
    8. '')' → logprob: -9.883506774902344
    9. ''
' → logprob: -10.133506774902344
    10. '"' → logprob: -10.133506774902344

Token 1072: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.11895712465047836
    2. '   ' → logprob: -2.868957042694092
    3. ''U' → logprob: -3.868957042694092
    4. '```' → logprob: -4.243957042694092
    5. ''A' → logprob: -4.743957042694092
    6. '`' → logprob: -4.993957042694092
    7. 'A' → logprob: -6.368957042694092
    8. ' ' → logprob: -7.118957042694092
    9. ''u' → logprob: -7.243957042694092
    10. '       ' → logprob: -7.993957042694092

Token 1073: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' (adapté à ' '') → logprob: -0.4627514183521271
    2. '   ' → logprob: -1.8377513885498047
    3. ''U' → logprob: -1.9627513885498047
    4. ''A' → logprob: -2.8377513885498047
    5. 'U' → logprob: -5.837751388549805
    6. ''a' → logprob: -6.087751388549805
    7. ''u' → logprob: -6.212751388549805
    8. 'A' → logprob: -6.462751388549805
    9. '"' → logprob: -7.087751388549805
    10. ' ' → logprob: -7.462751388549805

Token 1074: 'U' (ID: 52)
  Prédit: ''U'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''U' → logprob: -0.14638346433639526
    2. 'U' → logprob: -2.14638352394104
    3. ''A' → logprob: -4.271383285522461
    4. ' '' → logprob: -6.396383285522461
    5. ''' → logprob: -6.521383285522461
    6. '`' → logprob: -7.021383285522461
    7. '   ' → logprob: -7.646383285522461
    8. 'A' → logprob: -8.521383285522461
    9. '```' → logprob: -8.521383285522461
    10. ' ' → logprob: -9.396383285522461

Token 1075: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.039674460887908936
    2. ''' → logprob: -3.4146745204925537
    3. '=' → logprob: -5.789674282073975
    4. ':' → logprob: -6.914674282073975
    5. ' =' → logprob: -7.164674282073975
    6. ''=' → logprob: -8.039674758911133
    7. '":' → logprob: -8.414674758911133
    8. '']' → logprob: -8.539674758911133
    9. '='' → logprob: -9.164674758911133
    10. '['' → logprob: -9.664674758911133

Token 1076: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0001681405701674521
    2. ' '' → logprob: -8.875167846679688
    3. '"' → logprob: -10.500167846679688
    4. '0' → logprob: -15.125167846679688
    5. '='' → logprob: -16.125167846679688
    6. '`' → logprob: -16.625167846679688
    7. ' ' → logprob: -16.750167846679688
    8. '('' → logprob: -17.250167846679688
    9. '   ' → logprob: -17.500167846679688
    10. '['' → logprob: -17.750167846679688

Token 1077: '1' (ID: 16)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0005443345289677382
    2. '0' → logprob: -8.250544548034668
    3. '1' → logprob: -8.875544548034668
    4. '"' → logprob: -8.875544548034668
    5. '`' → logprob: -13.500544548034668
    6. '000' → logprob: -14.125544548034668
    7. ' '' → logprob: -14.375544548034668
    8. '100' → logprob: -15.375544548034668
    9. '111' → logprob: -16.12554359436035
    10. ''''' → logprob: -16.50054359436035

Token 1078: '',
' (ID: 1214)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '}' → logprob: -0.1626376211643219
    2. '}'' → logprob: -2.662637710571289
    3. ''}' → logprob: -2.787637710571289
    4. ''' → logprob: -4.412637710571289
    5. '}'
' → logprob: -6.162637710571289
    6. '   ' → logprob: -6.412637710571289
    7. '',' → logprob: -7.037637710571289
    8. '}
' → logprob: -7.537637710571289
    9. '}',' → logprob: -7.537637710571289
    10. ''}
' → logprob: -8.037637710571289

Token 1079: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.10210102796554565
    2. '   ' → logprob: -2.3521010875701904
    3. '"' → logprob: -7.852100849151611
    4. '```' → logprob: -7.977100849151611
    5. '`' → logprob: -8.47710132598877
    6. '       ' → logprob: -8.97710132598877
    7. ')' → logprob: -8.97710132598877
    8. '    ' → logprob: -8.97710132598877
    9. 'A' → logprob: -9.10210132598877
    10. ' '' → logprob: -9.35210132598877

Token 1080: ' '' (ID: 461)
  Prédit: ''A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''A' → logprob: -0.026407120749354362
    2. 'A' → logprob: -4.276407241821289
    3. '   ' → logprob: -5.151407241821289
    4. ''' (adapté à ' '') → logprob: -5.276407241821289
    5. ''a' → logprob: -7.151407241821289
    6. '```' → logprob: -8.651407241821289
    7. '"A' → logprob: -9.026407241821289
    8. '`' → logprob: -9.401407241821289
    9. ' ' → logprob: -10.776407241821289
    10. '       ' → logprob: -10.776407241821289

Token 1081: 'A' (ID: 32)
  Prédit: ''A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''A' → logprob: -0.11818920075893402
    2. 'A' → logprob: -2.2431890964508057
    3. ''' → logprob: -5.368189334869385
    4. '"A' → logprob: -7.993189334869385
    5. ' '' → logprob: -8.618188858032227
    6. '`' → logprob: -10.243188858032227
    7. '   ' → logprob: -10.368188858032227
    8. ' ' → logprob: -10.618188858032227
    9. ' A' → logprob: -11.368188858032227
    10. ''a' → logprob: -11.493188858032227

Token 1082: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.04426509514451027
    2. ''' → logprob: -3.169265031814575
    3. ':' → logprob: -7.669265270233154
    4. '":' → logprob: -8.794264793395996
    5. '=' → logprob: -9.044264793395996
    6. '']' → logprob: -9.044264793395996
    7. ' =' → logprob: -9.294264793395996
    8. '```' → logprob: -9.544264793395996
    9. '']:' → logprob: -9.919264793395996
    10. ''=' → logprob: -10.294264793395996

Token 1083: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.009832000359892845
    2. ' '' → logprob: -4.63483190536499
    3. '"' → logprob: -9.509832382202148
    4. '0' → logprob: -13.759832382202148
    5. '='' → logprob: -15.384832382202148
    6. '('' → logprob: -15.384832382202148
    7. ' ' → logprob: -15.759832382202148
    8. ' ' → logprob: -16.25983238220215
    9. ' "' → logprob: -17.00983238220215
    10. '`' → logprob: -17.00983238220215

Token 1084: '0' (ID: 15)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.023357167840003967
    2. '0' → logprob: -3.7733571529388428
    3. '"' → logprob: -9.273357391357422
    4. ' '' → logprob: -11.148357391357422
    5. ' ' → logprob: -13.773357391357422
    6. '`' → logprob: -13.898357391357422
    7. '000' → logprob: -15.273357391357422
    8. '   ' → logprob: -15.773357391357422
    9. '')' → logprob: -15.898357391357422
    10. '1' → logprob: -16.023357391357422

Token 1085: '',
' (ID: 1214)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '}' → logprob: -0.6715835332870483
    2. ''}' → logprob: -0.7965835332870483
    3. ''' → logprob: -3.796583652496338
    4. '   ' → logprob: -4.796583652496338
    5. '',' → logprob: -5.546583652496338
    6. '}'' → logprob: -7.046583652496338
    7. ''}
' → logprob: -7.296583652496338
    8. '"}' → logprob: -7.671583652496338
    9. '}
' → logprob: -8.04658317565918
    10. '',
' → logprob: -8.17158317565918

Token 1086: '   ' (ID: 271)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '}' → logprob: -0.0028952136635780334
    2. '   ' → logprob: -6.752895355224609
    3. '```' → logprob: -7.252895355224609
    4. ')' → logprob: -7.627895355224609
    5. ''}' → logprob: -8.00289535522461
    6. '}
' → logprob: -10.25289535522461
    7. '"}' → logprob: -10.37789535522461
    8. ''' → logprob: -10.50289535522461
    9. '`' → logprob: -10.62789535522461
    10. ' }' → logprob: -11.00289535522461

Token 1087: ' '' (ID: 461)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '}' → logprob: -0.017729006707668304
    2. ''}' → logprob: -4.892728805541992
    3. '   ' → logprob: -5.392728805541992
    4. ''' (adapté à ' '') → logprob: -5.517728805541992
    5. '```' → logprob: -7.267728805541992
    6. '"}' → logprob: -8.142728805541992
    7. '       ' → logprob: -9.142728805541992
    8. '#' → logprob: -9.392728805541992
    9. '}
' → logprob: -9.517728805541992
    10. '"' → logprob: -10.142728805541992

Token 1088: 'L' (ID: 43)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.1745738685131073
    2. 'bits' → logprob: -3.0495738983154297
    3. '"' → logprob: -3.6745738983154297
    4. ')' → logprob: -4.17457389831543
    5. '':' → logprob: -4.17457389831543
    6. '0' → logprob: -4.79957389831543
    7. '   ' → logprob: -5.17457389831543
    8. '#' → logprob: -5.42457389831543
    9. ''\' → logprob: -5.67457389831543
    10. '`' → logprob: -5.67457389831543

Token 1089: '':' (ID: 2337)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.4909234941005707
    2. '':' → logprob: -1.115923523902893
    3. '=' → logprob: -3.9909234046936035
    4. '']' → logprob: -4.2409234046936035
    5. ':' → logprob: -4.9909234046936035
    6. ' =' → logprob: -5.6159234046936035
    7. '')' → logprob: -5.8659234046936035
    8. ''=' → logprob: -6.1159234046936035
    9. '```' → logprob: -6.3659234046936035
    10. '   ' → logprob: -6.3659234046936035

Token 1090: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0018866342725232244
    2. ' '' → logprob: -6.37688684463501
    3. '"' → logprob: -8.626886367797852
    4. '0' → logprob: -12.876886367797852
    5. ' ' → logprob: -14.251886367797852
    6. '`' → logprob: -15.001886367797852
    7. ''A' → logprob: -15.376886367797852
    8. '['' → logprob: -15.501886367797852
    9. '''' → logprob: -15.876886367797852
    10. '='' → logprob: -16.12688636779785

Token 1091: '1' (ID: 16)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.17164668440818787
    2. '0' → logprob: -2.2966465950012207
    3. '"' → logprob: -3.5466465950012207
    4. '1' → logprob: -3.6716465950012207
    5. '000' → logprob: -7.171646595001221
    6. '001' → logprob: -7.796646595001221
    7. '111' → logprob: -7.921646595001221
    8. ''''' → logprob: -8.296647071838379
    9. '''' → logprob: -8.671647071838379
    10. '"""' → logprob: -8.796647071838379

Token 1092: '',
' (ID: 1214)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '}' → logprob: -0.005316412076354027
    2. ''}' → logprob: -5.505316257476807
    3. ''' → logprob: -7.630316257476807
    4. '}
' → logprob: -8.005316734313965
    5. '}'' → logprob: -8.380316734313965
    6. '   ' → logprob: -10.255316734313965
    7. '```' → logprob: -10.505316734313965
    8. ',
' → logprob: -10.755316734313965
    9. '']' → logprob: -11.255316734313965
    10. ',' → logprob: -11.380316734313965

Token 1093: '   ' (ID: 271)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '}' → logprob: -0.18731895089149475
    2. ''}' → logprob: -3.187319040298462
    3. ')' → logprob: -3.437319040298462
    4. ''' → logprob: -3.437319040298462
    5. '   ' → logprob: -3.812319040298462
    6. '']' → logprob: -3.937319040298462
    7. '```' → logprob: -4.812318801879883
    8. ']' → logprob: -5.312318801879883
    9. '{' → logprob: -6.312318801879883
    10. '#' → logprob: -6.437318801879883

Token 1094: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' (adapté à ' '') → logprob: -0.08884261548519135
    2. '}' → logprob: -3.4638426303863525
    3. '`' → logprob: -4.463842391967773
    4. '   ' → logprob: -4.963842391967773
    5. ')' → logprob: -5.338842391967773
    6. '']' → logprob: -5.338842391967773
    7. '```' → logprob: -5.338842391967773
    8. '#' → logprob: -5.588842391967773
    9. ''A' → logprob: -5.963842391967773
    10. ']' → logprob: -6.338842391967773

Token 1095: 'M' (ID: 44)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.13678252696990967
    2. '`' → logprob: -3.761782646179199
    3. ''-' → logprob: -3.761782646179199
    4. '"' → logprob: -3.886782646179199
    5. ')' → logprob: -4.011782646179199
    6. '   ' → logprob: -5.011782646179199
    7. 'B' → logprob: -5.011782646179199
    8. 'D' → logprob: -5.136782646179199
    9. ' ' → logprob: -5.886782646179199
    10. 'for' → logprob: -6.511782646179199

Token 1096: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.2755509316921234
    2. ''' → logprob: -1.7755509614944458
    3. ':' → logprob: -2.7755508422851562
    4. '=' → logprob: -5.525550842285156
    5. ' =' → logprob: -6.275550842285156
    6. '']' → logprob: -7.150550842285156
    7. '":' → logprob: -7.525550842285156
    8. ''=' → logprob: -7.650550842285156
    9. '='' → logprob: -8.400550842285156
    10. '['' → logprob: -8.650550842285156

Token 1097: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0005152635276317596
    2. ' '' → logprob: -7.875515460968018
    3. '0' → logprob: -9.62551498413086
    4. '"' → logprob: -9.87551498413086
    5. '`' → logprob: -12.12551498413086
    6. ''A' → logprob: -12.37551498413086
    7. ' ' → logprob: -13.62551498413086
    8. '='' → logprob: -13.62551498413086
    9. '=' → logprob: -14.37551498413086
    10. '   ' → logprob: -14.37551498413086

Token 1098: '0' (ID: 15)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.016819220036268234
    2. '0' → logprob: -4.641819000244141
    3. '"' → logprob: -5.641819000244141
    4. '`' → logprob: -7.266819000244141
    5. '{' → logprob: -7.516819000244141
    6. ')' → logprob: -8.01681900024414
    7. ''\' → logprob: -8.01681900024414
    8. '')' → logprob: -8.26681900024414
    9. ''A' → logprob: -9.01681900024414
    10. '```' → logprob: -9.01681900024414

Token 1099: '',
' (ID: 1214)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.41429629921913147
    2. '}' → logprob: -1.289296269416809
    3. ''}' → logprob: -2.9142963886260986
    4. '}'' → logprob: -5.4142961502075195
    5. ''
' → logprob: -6.2892961502075195
    6. '   ' → logprob: -6.4142961502075195
    7. '```' → logprob: -8.16429615020752
    8. '':' → logprob: -8.66429615020752
    9. '',' → logprob: -8.66429615020752
    10. '']' → logprob: -8.78929615020752

Token 1100: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0848979502916336
    2. '   ' → logprob: -2.834897994995117
    3. '}' → logprob: -4.709897994995117
    4. '']' → logprob: -5.209897994995117
    5. ']' → logprob: -6.209897994995117
    6. '```' → logprob: -6.459897994995117
    7. '"' → logprob: -6.959897994995117
    8. '`' → logprob: -7.084897994995117
    9. '       ' → logprob: -7.459897994995117
    10. ''}' → logprob: -8.084897994995117

Token 1101: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' (adapté à ' '') → logprob: -0.7110536098480225
    2. '   ' → logprob: -1.3360536098480225
    3. '`' → logprob: -2.9610536098480225
    4. 'bits' → logprob: -3.0860536098480225
    5. '```' → logprob: -3.5860536098480225
    6. 'for' → logprob: -3.7110536098480225
    7. '       ' → logprob: -3.8360536098480225
    8. ''\' → logprob: -4.711053848266602
    9. '"' → logprob: -4.711053848266602
    10. '
' → logprob: -4.961053848266602

Token 1102: 'G' (ID: 38)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.03124489262700081
    2. '"' → logprob: -4.78124475479126
    3. '`' → logprob: -5.03124475479126
    4. '   ' → logprob: -5.78124475479126
    5. ' ' → logprob: -6.78124475479126
    6. ''\' → logprob: -6.78124475479126
    7. ''A' → logprob: -6.90624475479126
    8. ''-' → logprob: -7.15624475479126
    9. '       ' → logprob: -7.28124475479126
    10. 'D' → logprob: -7.40624475479126

Token 1103: '':' (ID: 2337)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.8419399857521057
    2. ' =' → logprob: -1.341939926147461
    3. ''' → logprob: -1.966939926147461
    4. '':' → logprob: -2.091939926147461
    5. '```' → logprob: -4.216939926147461
    6. ':' → logprob: -4.591939926147461
    7. '='' → logprob: -5.841939926147461
    8. '[' → logprob: -5.966939926147461
    9. '_to' → logprob: -6.091939926147461
    10. '_char' → logprob: -6.216939926147461

Token 1104: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0002658655575942248
    2. ' '' → logprob: -8.625266075134277
    3. '"' → logprob: -9.375266075134277
    4. '0' → logprob: -14.000266075134277
    5. '`' → logprob: -14.750266075134277
    6. '1' → logprob: -16.00026512145996
    7. ' ' → logprob: -16.12526512145996
    8. ' ' → logprob: -17.37526512145996
    9. '```' → logprob: -17.37526512145996
    10. ''''' → logprob: -17.62526512145996

Token 1105: '1' (ID: 16)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.010770481079816818
    2. '0' → logprob: -5.260770320892334
    3. '"' → logprob: -6.385770320892334
    4. '{' → logprob: -6.635770320892334
    5. '1' → logprob: -6.760770320892334
    6. '`' → logprob: -7.010770320892334
    7. '{
' → logprob: -9.635770797729492
    8. ''''' → logprob: -9.885770797729492
    9. ' '' → logprob: -10.260770797729492
    10. '```' → logprob: -10.385770797729492

Token 1106: '',
' (ID: 1214)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '}' → logprob: -0.30807262659072876
    2. ''' → logprob: -1.683072566986084
    3. ''}' → logprob: -2.808072566986084
    4. '}'' → logprob: -4.308072566986084
    5. ''
' → logprob: -6.558072566986084
    6. '}'
' → logprob: -6.683072566986084
    7. '}
' → logprob: -7.308072566986084
    8. '   ' → logprob: -7.683072566986084
    9. ',
' → logprob: -8.183073043823242
    10. '#' → logprob: -8.183073043823242

Token 1107: '   ' (ID: 271)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '}' → logprob: -0.3081592619419098
    2. ''' → logprob: -1.9331592321395874
    3. '   ' → logprob: -2.183159351348877
    4. ''}' → logprob: -5.683159351348877
    5. '       ' → logprob: -6.808159351348877
    6. '']' → logprob: -7.433159351348877
    7. '```' → logprob: -7.433159351348877
    8. 'for' → logprob: -7.808159351348877
    9. '}
' → logprob: -7.933159351348877
    10. ']' → logprob: -8.058158874511719

Token 1108: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' (adapté à ' '') → logprob: -0.22022023797035217
    2. '}' → logprob: -2.0952203273773193
    3. '   ' → logprob: -2.8452203273773193
    4. ''}' → logprob: -4.72022008895874
    5. '```' → logprob: -6.09522008895874
    6. '']' → logprob: -6.97022008895874
    7. '       ' → logprob: -6.97022008895874
    8. '`' → logprob: -7.47022008895874
    9. ')' → logprob: -7.72022008895874
    10. '"' → logprob: -8.095220565795898

Token 1109: 'Z' (ID: 57)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.11981446295976639
    2. '`' → logprob: -2.994814395904541
    3. '   ' → logprob: -4.119814395904541
    4. 'for' → logprob: -4.744814395904541
    5. 'bits' → logprob: -5.119814395904541
    6. '```' → logprob: -5.119814395904541
    7. '"' → logprob: -5.619814395904541
    8. ')' → logprob: -5.744814395904541
    9. '       ' → logprob: -5.744814395904541
    10. ''
' → logprob: -5.994814395904541

Token 1110: '':' (ID: 2337)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.6452170014381409
    2. '':' → logprob: -0.7702170014381409
    3. ':' → logprob: -5.145216941833496
    4. '=' → logprob: -5.395216941833496
    5. ' =' → logprob: -7.895216941833496
    6. '':'' → logprob: -8.145216941833496
    7. '='' → logprob: -8.145216941833496
    8. ''=' → logprob: -8.145216941833496
    9. '"' → logprob: -8.770216941833496
    10. '":' → logprob: -8.895216941833496

Token 1111: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0012295155320316553
    2. ' '' → logprob: -6.751229286193848
    3. '0' → logprob: -10.501229286193848
    4. '"' → logprob: -10.501229286193848
    5. ' ' → logprob: -12.751229286193848
    6. '`' → logprob: -14.251229286193848
    7. ' ' → logprob: -15.501229286193848
    8. '   ' → logprob: -16.126230239868164
    9. ''''' → logprob: -16.376230239868164
    10. '```' → logprob: -16.501230239868164

Token 1112: '0' (ID: 15)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.25965267419815063
    2. '0' → logprob: -1.5096526145935059
    3. '"' → logprob: -5.009652614593506
    4. '1' → logprob: -7.134652614593506
    5. '110' → logprob: -9.509653091430664
    6. '`' → logprob: -9.634653091430664
    7. '```' → logprob: -10.384653091430664
    8. ' '' → logprob: -11.134653091430664
    9. '"""' → logprob: -11.259653091430664
    10. ''''' → logprob: -12.259653091430664

Token 1113: '',
' (ID: 1214)
  Prédit: ''}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''}' → logprob: -0.3951602876186371
    2. '}' → logprob: -1.3951603174209595
    3. ''}
' → logprob: -3.64516019821167
    4. ''' → logprob: -3.77016019821167
    5. '}
' → logprob: -5.02016019821167
    6. '}'' → logprob: -5.27016019821167
    7. '   ' → logprob: -5.27016019821167
    8. '',
' → logprob: -5.52016019821167
    9. '',' → logprob: -5.64516019821167
    10. '}'
' → logprob: -6.14516019821167

Token 1114: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.42042624950408936
    2. '}' → logprob: -1.7954262495040894
    3. '   ' → logprob: -1.9204262495040894
    4. ''}' → logprob: -3.920426368713379
    5. '```' → logprob: -5.420426368713379
    6. '']' → logprob: -6.045426368713379
    7. '"' → logprob: -6.420426368713379
    8. '`' → logprob: -7.295426368713379
    9. ']' → logprob: -8.295426368713379
    10. '       ' → logprob: -8.420426368713379

Token 1115: ' '' (ID: 461)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '}' → logprob: -0.2290157973766327
    2. '   ' → logprob: -2.604015827178955
    3. ''' (adapté à ' '') → logprob: -2.729015827178955
    4. ''}' → logprob: -3.354015827178955
    5. '}
' → logprob: -3.729015827178955
    6. '```' → logprob: -5.729015827178955
    7. '       ' → logprob: -6.604015827178955
    8. '']' → logprob: -7.854015827178955
    9. '#' → logprob: -8.229015350341797
    10. '"}' → logprob: -8.604015350341797

Token 1116: 'N' (ID: 45)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.09026988595724106
    2. ')' → logprob: -3.7152698040008545
    3. '`' → logprob: -4.465270042419434
    4. 'for' → logprob: -4.590270042419434
    5. '   ' → logprob: -4.590270042419434
    6. '"' → logprob: -4.840270042419434
    7. '#' → logprob: -5.965270042419434
    8. '       ' → logprob: -6.215270042419434
    9. ' ' → logprob: -6.465270042419434
    10. '')' → logprob: -6.840270042419434

Token 1117: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.3055649697780609
    2. ''' → logprob: -1.4305649995803833
    3. ':' → logprob: -4.055564880371094
    4. '```' → logprob: -5.930564880371094
    5. '']' → logprob: -7.055564880371094
    6. '':'' → logprob: -7.680564880371094
    7. '":' → logprob: -8.430564880371094
    8. ''_' → logprob: -8.555564880371094
    9. '']:' → logprob: -8.680564880371094
    10. '=' → logprob: -8.805564880371094

Token 1118: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.014383270405232906
    2. ' '' → logprob: -4.264383316040039
    3. '"' → logprob: -8.639383316040039
    4. '0' → logprob: -10.389383316040039
    5. '1' → logprob: -12.264383316040039
    6. ' ' → logprob: -12.764383316040039
    7. '`' → logprob: -13.264383316040039
    8. ' "' → logprob: -14.389383316040039
    9. '''' → logprob: -15.264383316040039
    10. '```' → logprob: -15.389383316040039

Token 1119: '1' (ID: 16)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.12389763444662094
    2. '0' → logprob: -2.3738975524902344
    3. '1' → logprob: -4.248897552490234
    4. '"' → logprob: -4.748897552490234
    5. '`' → logprob: -7.998897552490234
    6. '```' → logprob: -10.248897552490234
    7. ''''' → logprob: -10.623897552490234
    8. '"""' → logprob: -10.748897552490234
    9. ')' → logprob: -11.623897552490234
    10. '')' → logprob: -11.748897552490234

Token 1120: '',
' (ID: 1214)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '}' → logprob: -0.0934050902724266
    2. ''}' → logprob: -2.46840500831604
    3. ''' → logprob: -6.343405246734619
    4. '',' → logprob: -6.718405246734619
    5. '   ' → logprob: -7.468405246734619
    6. '}'' → logprob: -7.718405246734619
    7. '',
' → logprob: -8.968404769897461
    8. ',
' → logprob: -9.218404769897461
    9. '}
' → logprob: -9.718404769897461
    10. ',' → logprob: -9.968404769897461

Token 1121: '   ' (ID: 271)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '}' → logprob: -0.03330918774008751
    2. '   ' → logprob: -3.6583092212677
    3. ''' → logprob: -5.033308982849121
    4. ''}' → logprob: -8.908308982849121
    5. '```' → logprob: -9.158308982849121
    6. '       ' → logprob: -9.658308982849121
    7. ')' → logprob: -10.533308982849121
    8. '',' → logprob: -10.908308982849121
    9. ' }' → logprob: -10.908308982849121
    10. ':' → logprob: -11.533308982849121

Token 1122: ' '' (ID: 461)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '}' → logprob: -0.4261564612388611
    2. ''' (adapté à ' '') → logprob: -1.3011565208435059
    3. '   ' → logprob: -2.801156520843506
    4. ''}' → logprob: -4.426156520843506
    5. '```' → logprob: -7.051156520843506
    6. '}
' → logprob: -7.801156520843506
    7. '       ' → logprob: -8.176156044006348
    8. '':' → logprob: -9.426156044006348
    9. '#' → logprob: -9.801156044006348
    10. '`' → logprob: -10.051156044006348

Token 1123: 'F' (ID: 37)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.058880627155303955
    2. '`' → logprob: -4.183880805969238
    3. ' ' → logprob: -4.808880805969238
    4. ')' → logprob: -5.058880805969238
    5. '   ' → logprob: -5.683880805969238
    6. '_' → logprob: -5.808880805969238
    7. '[' → logprob: -6.183880805969238
    8. 'b' → logprob: -6.433880805969238
    9. 'for' → logprob: -6.433880805969238
    10. '"' → logprob: -6.558880805969238

Token 1124: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.16676917672157288
    2. ''' → logprob: -2.16676926612854
    3. ':' → logprob: -3.91676926612854
    4. '=' → logprob: -4.666769027709961
    5. ' =' → logprob: -6.166769027709961
    6. '   ' → logprob: -6.416769027709961
    7. '```' → logprob: -6.666769027709961
    8. '']' → logprob: -6.916769027709961
    9. ''=' → logprob: -7.041769027709961
    10. '['' → logprob: -7.166769027709961

Token 1125: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0010965227847918868
    2. ' '' → logprob: -6.876096725463867
    3. '"' → logprob: -9.751096725463867
    4. '0' → logprob: -12.751096725463867
    5. '`' → logprob: -14.751096725463867
    6. ' ' → logprob: -14.876096725463867
    7. '='' → logprob: -14.876096725463867
    8. ')' → logprob: -15.501096725463867
    9. ''
' → logprob: -15.501096725463867
    10. ''''' → logprob: -15.626096725463867

Token 1126: '0' (ID: 15)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.08905080705881119
    2. '0' → logprob: -2.464050769805908
    3. '"' → logprob: -9.589051246643066
    4. '1' → logprob: -11.214051246643066
    5. '`' → logprob: -11.589051246643066
    6. '010' → logprob: -12.089051246643066
    7. ' '' → logprob: -12.214051246643066
    8. ''''' → logprob: -12.589051246643066
    9. ' ' → logprob: -13.839051246643066
    10. '```' → logprob: -13.964051246643066

Token 1127: '',
' (ID: 1214)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.06375880539417267
    2. ''}' → logprob: -3.1887588500976562
    3. '}' → logprob: -4.313758850097656
    4. '':' → logprob: -5.313758850097656
    5. '}'' → logprob: -7.063758850097656
    6. '',' → logprob: -7.438758850097656
    7. '   ' → logprob: -8.313758850097656
    8. ''
' → logprob: -8.563758850097656
    9. '"' → logprob: -9.688758850097656
    10. ':' → logprob: -10.188758850097656

Token 1128: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.028386464342474937
    2. '   ' → logprob: -3.903386354446411
    3. '```' → logprob: -5.52838659286499
    4. '`' → logprob: -6.40338659286499
    5. '"' → logprob: -6.90338659286499
    6. '       ' → logprob: -7.77838659286499
    7. ')' → logprob: -8.028386116027832
    8. '',' → logprob: -9.778386116027832
    9. ''''' → logprob: -9.903386116027832
    10. ''s' → logprob: -10.153386116027832

Token 1129: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' (adapté à ' '') → logprob: -0.06811868399381638
    2. '   ' → logprob: -2.9431185722351074
    3. '}' → logprob: -4.818118572235107
    4. '"' → logprob: -6.193118572235107
    5. '```' → logprob: -7.193118572235107
    6. '       ' → logprob: -7.818118572235107
    7. ''}' → logprob: -8.568119049072266
    8. '']' → logprob: -8.693119049072266
    9. ''A' → logprob: -8.943119049072266
    10. '`' → logprob: -8.943119049072266

Token 1130: 'J' (ID: 41)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.2360491007566452
    2. '   ' → logprob: -2.861049175262451
    3. 'for' → logprob: -3.486049175262451
    4. ' ' → logprob: -3.986049175262451
    5. '`' → logprob: -3.986049175262451
    6. ')' → logprob: -4.236049175262451
    7. 'b' → logprob: -4.361049175262451
    8. ' '' → logprob: -5.111049175262451
    9. 'i' → logprob: -5.236049175262451
    10. '       ' → logprob: -5.361049175262451

Token 1131: '':' (ID: 2337)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.39333343505859375
    2. '':' → logprob: -1.2683334350585938
    3. ':' → logprob: -3.2683334350585938
    4. '=' → logprob: -6.268333435058594
    5. '['' → logprob: -7.393333435058594
    6. '']' → logprob: -8.143333435058594
    7. '```' → logprob: -8.143333435058594
    8. '[' → logprob: -8.268333435058594
    9. '<|end|>' → logprob: -8.268333435058594
    10. '"' → logprob: -8.518333435058594

Token 1132: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0005825805710628629
    2. ' '' → logprob: -7.500582695007324
    3. '0' → logprob: -11.000582695007324
    4. '"' → logprob: -11.375582695007324
    5. ' ' → logprob: -15.000582695007324
    6. '`' → logprob: -15.000582695007324
    7. '1' → logprob: -15.375582695007324
    8. ''''' → logprob: -15.375582695007324
    9. '```' → logprob: -16.875581741333008
    10. ' ' → logprob: -17.250581741333008

Token 1133: '1' (ID: 16)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.2374432384967804
    2. ''' → logprob: -1.612443208694458
    3. '1' → logprob: -4.487443447113037
    4. '"' → logprob: -7.737443447113037
    5. '`' → logprob: -9.237442970275879
    6. ''''' → logprob: -10.112442970275879
    7. '"""' → logprob: -10.487442970275879
    8. '')' → logprob: -10.862442970275879
    9. '```' → logprob: -11.112442970275879
    10. '010' → logprob: -11.487442970275879

Token 1134: '',
' (ID: 1214)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.31339338421821594
    2. '}' → logprob: -2.0633933544158936
    3. '':' → logprob: -2.3133933544158936
    4. ''}' → logprob: -4.188393592834473
    5. '   ' → logprob: -4.313393592834473
    6. '':
' → logprob: -5.688393592834473
    7. ')' → logprob: -5.813393592834473
    8. '}'' → logprob: -6.313393592834473
    9. ''
' → logprob: -6.813393592834473
    10. '```' → logprob: -7.063393592834473

Token 1135: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7897205352783203
    2. ''' → logprob: -1.0397205352783203
    3. '```' → logprob: -2.4147205352783203
    4. '       ' → logprob: -2.6647205352783203
    5. '"' → logprob: -4.78972053527832
    6. '`' → logprob: -5.16472053527832
    7. '    ' → logprob: -6.03972053527832
    8. '_' → logprob: -6.28972053527832
    9. 'for' → logprob: -6.41472053527832
    10. ')' → logprob: -6.41472053527832

Token 1136: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' (adapté à ' '') → logprob: -0.018054183572530746
    2. '   ' → logprob: -4.268054008483887
    3. '"' → logprob: -6.393054008483887
    4. ')' → logprob: -7.893054008483887
    5. '       ' → logprob: -8.018054008483887
    6. '```' → logprob: -8.268054008483887
    7. '']' → logprob: -8.393054008483887
    8. ']' → logprob: -8.893054008483887
    9. '`' → logprob: -9.018054008483887
    10. '',' → logprob: -9.143054008483887

Token 1137: 'W' (ID: 54)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.07883648574352264
    2. '`' → logprob: -4.578836441040039
    3. '   ' → logprob: -4.578836441040039
    4. ')' → logprob: -4.828836441040039
    5. '"' → logprob: -4.953836441040039
    6. 'A' → logprob: -5.578836441040039
    7. 'B' → logprob: -5.703836441040039
    8. ']' → logprob: -5.828836441040039
    9. 'F' → logprob: -6.078836441040039
    10. 'C' → logprob: -6.203836441040039

Token 1138: '':' (ID: 2337)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.07885529845952988
    2. '':' → logprob: -3.078855276107788
    3. ':' → logprob: -4.453855514526367
    4. '=' → logprob: -4.703855514526367
    5. '```' → logprob: -6.078855514526367
    6. ' =' → logprob: -6.328855514526367
    7. ''=' → logprob: -6.453855514526367
    8. '_' → logprob: -7.828855514526367
    9. '[' → logprob: -7.828855514526367
    10. '']' → logprob: -8.203855514526367

Token 1139: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.00017874970217235386
    2. ' '' → logprob: -8.750178337097168
    3. '"' → logprob: -11.500178337097168
    4. '0' → logprob: -11.750178337097168
    5. ''A' → logprob: -14.250178337097168
    6. '`' → logprob: -14.375178337097168
    7. '='' → logprob: -15.250178337097168
    8. ' ' → logprob: -15.375178337097168
    9. ''''' → logprob: -16.500179290771484
    10. '('' → logprob: -16.625179290771484

Token 1140: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.11355894804000854
    2. ''' → logprob: -2.2385590076446533
    3. '"' → logprob: -7.613558769226074
    4. '1' → logprob: -8.988558769226074
    5. '`' → logprob: -10.613558769226074
    6. '```' → logprob: -10.738558769226074
    7. '"""' → logprob: -11.113558769226074
    8. ''''' → logprob: -11.238558769226074
    9. ' ' → logprob: -11.613558769226074
    10. '010' → logprob: -12.238558769226074

Token 1141: '',
' (ID: 1214)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '}' → logprob: -0.006609973032027483
    2. ''}' → logprob: -5.506609916687012
    3. '   ' → logprob: -6.381609916687012
    4. ''' → logprob: -7.756609916687012
    5. '}
' → logprob: -8.631609916687012
    6. ',
' → logprob: -10.006609916687012
    7. '}'' → logprob: -10.381609916687012
    8. ',' → logprob: -10.631609916687012
    9. '"}' → logprob: -11.256609916687012
    10. '#' → logprob: -11.381609916687012

Token 1142: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.06927093863487244
    2. '   ' → logprob: -2.8192708492279053
    3. '```' → logprob: -6.319271087646484
    4. '']' → logprob: -6.444271087646484
    5. '"' → logprob: -6.944271087646484
    6. ''}' → logprob: -7.194271087646484
    7. '}' → logprob: -7.819271087646484
    8. '       ' → logprob: -7.944271087646484
    9. '',' → logprob: -8.319271087646484
    10. ']' → logprob: -8.694271087646484

Token 1143: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' (adapté à ' '') → logprob: -0.019276294857263565
    2. '   ' → logprob: -4.269276142120361
    3. ')' → logprob: -6.769276142120361
    4. ''A' → logprob: -7.394276142120361
    5. '```' → logprob: -7.394276142120361
    6. '       ' → logprob: -7.769276142120361
    7. ''T' → logprob: -7.894276142120361
    8. '',' → logprob: -8.26927661895752
    9. '}' → logprob: -8.39427661895752
    10. ''\' → logprob: -8.51927661895752

Token 1144: 'E' (ID: 36)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.5646854639053345
    2. '`' → logprob: -2.814685344696045
    3. 'A' → logprob: -2.939685344696045
    4. 'S' → logprob: -3.189685344696045
    5. 'I' → logprob: -3.314685344696045
    6. 'E' → logprob: -3.439685344696045
    7. 'D' → logprob: -3.689685344696045
    8. 'B' → logprob: -3.814685344696045
    9. 'for' → logprob: -4.189685344696045
    10. 'T' → logprob: -4.314685344696045

Token 1145: '':' (ID: 2337)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.10023502260446548
    2. '_' → logprob: -3.3502349853515625
    3. '```' → logprob: -3.8502349853515625
    4. '[' → logprob: -4.2252349853515625
    5. '']' → logprob: -5.3502349853515625
    6. '['' → logprob: -5.3502349853515625
    7. ''_' → logprob: -5.8502349853515625
    8. '"' → logprob: -6.4752349853515625
    9. ']' → logprob: -6.4752349853515625
    10. '=' → logprob: -6.8502349853515625

Token 1146: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -1.7954958821064793e-05
    2. ' '' → logprob: -11.500018119812012
    3. '0' → logprob: -12.500018119812012
    4. '"' → logprob: -12.500018119812012
    5. '1' → logprob: -16.125017166137695
    6. '`' → logprob: -16.500017166137695
    7. ' ' → logprob: -17.000017166137695
    8. ''''' → logprob: -17.500017166137695
    9. '   ' → logprob: -17.875017166137695
    10. '```' → logprob: -18.375017166137695

Token 1147: '1' (ID: 16)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.016583818942308426
    2. '0' → logprob: -4.1415839195251465
    3. '"' → logprob: -7.6415839195251465
    4. '1' → logprob: -10.016583442687988
    5. '000' → logprob: -11.516583442687988
    6. '`' → logprob: -12.266583442687988
    7. ''''' → logprob: -12.891583442687988
    8. ' '' → logprob: -13.391583442687988
    9. '```' → logprob: -13.516583442687988
    10. '   ' → logprob: -14.266583442687988

Token 1148: '',
' (ID: 1214)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '}' → logprob: -0.6772454977035522
    2. ''' → logprob: -1.4272454977035522
    3. '   ' → logprob: -2.052245616912842
    4. ''}' → logprob: -2.677245616912842
    5. '}'' → logprob: -3.552245616912842
    6. '']' → logprob: -4.927245616912842
    7. ':' → logprob: -5.677245616912842
    8. '```' → logprob: -5.802245616912842
    9. '':' → logprob: -6.052245616912842
    10. '}'
' → logprob: -6.177245616912842

Token 1149: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7624471187591553
    2. ''' → logprob: -1.2624471187591553
    3. '}' → logprob: -1.5124471187591553
    4. ''}' → logprob: -4.387447357177734
    5. '       ' → logprob: -5.637447357177734
    6. '```' → logprob: -5.762447357177734
    7. '']' → logprob: -6.387447357177734
    8. '#' → logprob: -6.637447357177734
    9. '}
' → logprob: -7.012447357177734
    10. '':' → logprob: -7.137447357177734

Token 1150: ' '' (ID: 461)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.183057188987732
    2. ':' → logprob: -1.808057188987732
    3. ''' (adapté à ' '') → logprob: -2.1830573081970215
    4. '[' → logprob: -2.3080573081970215
    5. '```' → logprob: -2.5580573081970215
    6. ']' → logprob: -3.0580573081970215
    7. ')' → logprob: -3.3080573081970215
    8. '       ' → logprob: -3.3080573081970215
    9. '_' → logprob: -3.4330573081970215
    10. '#' → logprob: -3.9330573081970215

Token 1151: 'Y' (ID: 56)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.2989920675754547
    2. 'S' → logprob: -2.423992156982422
    3. 'T' → logprob: -2.923992156982422
    4. 'V' → logprob: -3.923992156982422
    5. 'R' → logprob: -4.173992156982422
    6. 'B' → logprob: -4.423992156982422
    7. 'D' → logprob: -4.423992156982422
    8. '`' → logprob: -4.673992156982422
    9. ' ' → logprob: -5.423992156982422
    10. 'A' → logprob: -5.423992156982422

Token 1152: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.021615751087665558
    2. ':' → logprob: -4.521615982055664
    3. ''' → logprob: -4.646615982055664
    4. '```' → logprob: -7.896615982055664
    5. '":' → logprob: -8.271615982055664
    6. ' ':' → logprob: -9.521615982055664
    7. '']' → logprob: -9.771615982055664
    8. '['' → logprob: -10.396615982055664
    9. '':'' → logprob: -10.896615982055664
    10. '=' → logprob: -10.896615982055664

Token 1153: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.00041696816333569586
    2. ' '' → logprob: -7.8754167556762695
    3. '"' → logprob: -10.37541675567627
    4. '`' → logprob: -13.37541675567627
    5. '0' → logprob: -13.75041675567627
    6. '='' → logprob: -14.25041675567627
    7. '=' → logprob: -14.62541675567627
    8. ' ' → logprob: -14.75041675567627
    9. '```' → logprob: -14.87541675567627
    10. ' =' → logprob: -15.25041675567627

Token 1154: '0' (ID: 15)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.4304380714893341
    2. '0' → logprob: -1.0554380416870117
    3. '"' → logprob: -7.305438041687012
    4. ' '' → logprob: -7.555438041687012
    5. '1' → logprob: -8.555438041687012
    6. ' ' → logprob: -8.680438041687012
    7. '```' → logprob: -10.055438041687012
    8. '`' → logprob: -10.430438041687012
    9. '010' → logprob: -10.430438041687012
    10. ''''' → logprob: -11.055438041687012

Token 1155: '',
' (ID: 1214)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.04996725544333458
    2. ''}' → logprob: -3.1749672889709473
    3. '}' → logprob: -5.674967288970947
    4. '',' → logprob: -6.549967288970947
    5. '"' → logprob: -7.424967288970947
    6. '}'' → logprob: -7.924967288970947
    7. ''
' → logprob: -8.049966812133789
    8. ''''' → logprob: -8.299966812133789
    9. '```' → logprob: -8.674966812133789
    10. '',
' → logprob: -9.174966812133789

Token 1156: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5018488168716431
    2. 'for' → logprob: -1.251848816871643
    3. '```' → logprob: -3.0018486976623535
    4. ')' → logprob: -3.8768486976623535
    5. ']' → logprob: -4.6268486976623535
    6. '#' → logprob: -4.8768486976623535
    7. 'while' → logprob: -5.6268486976623535
    8. '       ' → logprob: -5.7518486976623535
    9. ' for' → logprob: -6.1268486976623535
    10. '``' → logprob: -6.5018486976623535

Token 1157: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' (adapté à ' '') → logprob: -0.6535555720329285
    2. '']' → logprob: -1.5285556316375732
    3. '   ' → logprob: -2.4035556316375732
    4. ']' → logprob: -2.5285556316375732
    5. '```' → logprob: -3.6535556316375732
    6. '}' → logprob: -4.028555393218994
    7. '':' → logprob: -4.903555393218994
    8. ')' → logprob: -5.028555393218994
    9. '       ' → logprob: -5.278555393218994
    10. ':' → logprob: -5.278555393218994

Token 1158: 'R' (ID: 49)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.10187098383903503
    2. 'S' → logprob: -3.8518710136413574
    3. '`' → logprob: -4.476871013641357
    4. '"' → logprob: -4.851871013641357
    5. '```' → logprob: -4.976871013641357
    6. 'A' → logprob: -5.101871013641357
    7. 'T' → logprob: -5.101871013641357
    8. 'F' → logprob: -5.851871013641357
    9. '   ' → logprob: -5.851871013641357
    10. 'B' → logprob: -5.851871013641357

Token 1159: '':' (ID: 2337)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.6377926468849182
    2. '':' → logprob: -0.7627926468849182
    3. '']' → logprob: -6.387792587280273
    4. ':' → logprob: -6.887792587280273
    5. '```' → logprob: -6.887792587280273
    6. '']:' → logprob: -7.762792587280273
    7. '['' → logprob: -8.762792587280273
    8. '_to' → logprob: -9.512792587280273
    9. ']' → logprob: -9.637792587280273
    10. ''s' → logprob: -9.887792587280273

Token 1160: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0004960790392942727
    2. ' '' → logprob: -7.750495910644531
    3. '"' → logprob: -9.750495910644531
    4. '```' → logprob: -12.875495910644531
    5. '`' → logprob: -13.375495910644531
    6. ' ' → logprob: -14.125495910644531
    7. '1' → logprob: -14.375495910644531
    8. '='' → logprob: -14.500495910644531
    9. ''''' → logprob: -15.250495910644531
    10. ' ' → logprob: -15.250495910644531

Token 1161: '1' (ID: 16)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.007782079745084047
    2. ' '' → logprob: -5.882781982421875
    3. '1' → logprob: -6.132781982421875
    4. ' ' → logprob: -6.257781982421875
    5. '0' → logprob: -7.132781982421875
    6. '"' → logprob: -9.882781982421875
    7. '`' → logprob: -11.757781982421875
    8. ''''' → logprob: -12.132781982421875
    9. '111' → logprob: -13.382781982421875
    10. '110' → logprob: -13.382781982421875

Token 1162: '',
' (ID: 1214)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.26034867763519287
    2. '}' → logprob: -1.8853486776351929
    3. ''}' → logprob: -3.2603487968444824
    4. ''
' → logprob: -4.010348796844482
    5. '}'' → logprob: -4.760348796844482
    6. '}'
' → logprob: -5.385348796844482
    7. ''}
' → logprob: -6.135348796844482
    8. '}
' → logprob: -6.385348796844482
    9. '"' → logprob: -6.635348796844482
    10. '   ' → logprob: -7.135348796844482

Token 1163: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.5354937314987183
    2. '```' → logprob: -1.4104937314987183
    3. '   ' → logprob: -2.035493850708008
    4. '       ' → logprob: -4.160493850708008
    5. '_' → logprob: -4.910493850708008
    6. '"' → logprob: -5.035493850708008
    7. '`' → logprob: -5.285493850708008
    8. '``' → logprob: -6.410493850708008
    9. '    ' → logprob: -7.410493850708008
    10. '[' → logprob: -8.285493850708008

Token 1164: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' (adapté à ' '') → logprob: -0.37872838973999023
    2. '']' → logprob: -2.2537283897399902
    3. '   ' → logprob: -2.3787283897399902
    4. ''}' → logprob: -2.6287283897399902
    5. '}' → logprob: -4.50372838973999
    6. '```' → logprob: -5.12872838973999
    7. '       ' → logprob: -5.75372838973999
    8. ')' → logprob: -5.87872838973999
    9. ']' → logprob: -6.00372838973999
    10. '`' → logprob: -6.25372838973999

Token 1165: 'Q' (ID: 48)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.1033502146601677
    2. ')' → logprob: -3.8533501625061035
    3. ' ' → logprob: -4.7283501625061035
    4. '   ' → logprob: -4.8533501625061035
    5. 'B' → logprob: -4.9783501625061035
    6. 'T' → logprob: -4.9783501625061035
    7. '"' → logprob: -5.1033501625061035
    8. 'S' → logprob: -5.2283501625061035
    9. 'D' → logprob: -5.6033501625061035
    10. 'for' → logprob: -5.6033501625061035

Token 1166: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.5831879377365112
    2. ''' → logprob: -0.8331879377365112
    3. ':' → logprob: -5.208188056945801
    4. '['' → logprob: -6.708188056945801
    5. '```' → logprob: -8.9581880569458
    6. '']' → logprob: -9.4581880569458
    7. '']:' → logprob: -10.4581880569458
    8. '':'' → logprob: -10.5831880569458
    9. '''' → logprob: -10.5831880569458
    10. '":' → logprob: -10.8331880569458

Token 1167: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.008656646125018597
    2. ' '' → logprob: -4.7586565017700195
    3. '0' → logprob: -10.50865650177002
    4. '"' → logprob: -12.25865650177002
    5. '='' → logprob: -12.63365650177002
    6. ''''' → logprob: -13.75865650177002
    7. '=' → logprob: -14.00865650177002
    8. ''A' → logprob: -14.13365650177002
    9. ' ' → logprob: -14.38365650177002
    10. ' ' → logprob: -14.38365650177002

Token 1168: '0' (ID: 15)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.021851858124136925
    2. '0' → logprob: -3.8968517780303955
    3. ''''' → logprob: -8.146851539611816
    4. '')' → logprob: -8.271851539611816
    5. '"' → logprob: -8.771851539611816
    6. '1' → logprob: -8.896851539611816
    7. '`' → logprob: -9.021851539611816
    8. ')' → logprob: -9.396851539611816
    9. '''' → logprob: -10.021851539611816
    10. '000' → logprob: -10.521851539611816

Token 1169: '',
' (ID: 1214)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.023798683658242226
    2. ''}' → logprob: -4.27379846572876
    3. '}' → logprob: -5.64879846572876
    4. '"' → logprob: -5.89879846572876
    5. ''
' → logprob: -6.39879846572876
    6. '}'' → logprob: -6.77379846572876
    7. ''}
' → logprob: -9.398798942565918
    8. '',
' → logprob: -9.648798942565918
    9. ',' → logprob: -10.148798942565918
    10. '```' → logprob: -10.148798942565918

Token 1170: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.31383994221687317
    2. '   ' → logprob: -1.5638399124145508
    3. '}' → logprob: -3.313839912414551
    4. ''}' → logprob: -4.438839912414551
    5. '```' → logprob: -4.813839912414551
    6. '`' → logprob: -7.063839912414551
    7. '"' → logprob: -7.563839912414551
    8. '}
' → logprob: -7.563839912414551
    9. ''T' → logprob: -8.18883991241455
    10. ''S' → logprob: -8.81383991241455

Token 1171: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' (adapté à ' '') → logprob: -0.12403307855129242
    2. '   ' → logprob: -2.624032974243164
    3. '']' → logprob: -4.249032974243164
    4. '```' → logprob: -4.874032974243164
    5. ')' → logprob: -5.374032974243164
    6. ']' → logprob: -5.499032974243164
    7. '}' → logprob: -5.999032974243164
    8. ''}' → logprob: -6.624032974243164
    9. '`' → logprob: -7.124032974243164
    10. '"' → logprob: -7.249032974243164

Token 1172: 'S' (ID: 50)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.05447731167078018
    2. '   ' → logprob: -4.804477214813232
    3. '`' → logprob: -4.929477214813232
    4. 'A' → logprob: -4.929477214813232
    5. '"' → logprob: -5.804477214813232
    6. 'ch' → logprob: -5.804477214813232
    7. '```' → logprob: -5.929477214813232
    8. '       ' → logprob: -6.179477214813232
    9. ''A' → logprob: -6.429477214813232
    10. ' '' → logprob: -6.554477214813232

Token 1173: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.7744337916374207
    2. '']' → logprob: -1.1494338512420654
    3. ''' → logprob: -1.8994338512420654
    4. '']:' → logprob: -3.6494338512420654
    5. ']' → logprob: -3.8994338512420654
    6. ':' → logprob: -4.399433612823486
    7. '']:
' → logprob: -6.024433612823486
    8. ']:' → logprob: -6.149433612823486
    9. '```' → logprob: -6.774433612823486
    10. '   ' → logprob: -6.899433612823486

Token 1174: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0012507044011726975
    2. ' '' → logprob: -6.751250743865967
    3. '"' → logprob: -10.001250267028809
    4. '`' → logprob: -11.376250267028809
    5. '1' → logprob: -11.751250267028809
    6. '```' → logprob: -11.876250267028809
    7. '0' → logprob: -12.626250267028809
    8. '='' → logprob: -13.876250267028809
    9. ' ' → logprob: -14.126250267028809
    10. ' =' → logprob: -14.251250267028809

Token 1175: '1' (ID: 16)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.07377104461193085
    2. '1' → logprob: -2.8237709999084473
    3. '0' → logprob: -5.198770999908447
    4. '"' → logprob: -5.198770999908447
    5. '`' → logprob: -7.823770999908447
    6. '"""' → logprob: -9.948771476745605
    7. ''''' → logprob: -10.198771476745605
    8. ' '' → logprob: -10.448771476745605
    9. '```' → logprob: -10.573771476745605
    10. '')' → logprob: -10.948771476745605

Token 1176: '',
' (ID: 1214)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.002858727937564254
    2. ''}' → logprob: -6.877858638763428
    3. ''
' → logprob: -7.627858638763428
    4. '']' → logprob: -8.002859115600586
    5. '':' → logprob: -8.127859115600586
    6. '}'' → logprob: -8.627859115600586
    7. '"' → logprob: -8.627859115600586
    8. '```' → logprob: -9.252859115600586
    9. '}' → logprob: -9.752859115600586
    10. ''}
' → logprob: -10.502859115600586

Token 1177: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05692007392644882
    2. 'for' → logprob: -4.056920051574707
    3. '```' → logprob: -4.306920051574707
    4. '       ' → logprob: -4.681920051574707
    5. 'bits' → logprob: -5.306920051574707
    6. ' for' → logprob: -5.681920051574707
    7. '"' → logprob: -6.931920051574707
    8. '`' → logprob: -7.306920051574707
    9. 'bit' → logprob: -7.681920051574707
    10. ' bits' → logprob: -7.806920051574707

Token 1178: ' '' (ID: 461)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.3565785884857178
    2. '```' → logprob: -1.8565785884857178
    3. 'for' → logprob: -2.3565785884857178
    4. ''' (adapté à ' '') → logprob: -2.4815785884857178
    5. '']' → logprob: -2.8565785884857178
    6. ']' → logprob: -3.1065785884857178
    7. '"' → logprob: -3.1065785884857178
    8. '       ' → logprob: -3.6065785884857178
    9. '"]' → logprob: -3.6065785884857178
    10. '`' → logprob: -3.7315785884857178

Token 1179: 'V' (ID: 53)
  Prédit: '']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '']' → logprob: -0.6347429156303406
    2. ''' → logprob: -1.1347429752349854
    3. ']' → logprob: -3.1347429752349854
    4. '':' → logprob: -3.8847429752349854
    5. 'for' → logprob: -4.134742736816406
    6. ':' → logprob: -4.259742736816406
    7. '"]' → logprob: -5.259742736816406
    8. '   ' → logprob: -5.259742736816406
    9. '']:' → logprob: -5.259742736816406
    10. 'b' → logprob: -5.759742736816406

Token 1180: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.3073946237564087
    2. ''' → logprob: -1.4323946237564087
    3. ':' → logprob: -3.932394504547119
    4. '']' → logprob: -5.682394504547119
    5. '```' → logprob: -7.057394504547119
    6. '']:' → logprob: -7.557394504547119
    7. '['' → logprob: -7.682394504547119
    8. '":' → logprob: -8.307394981384277
    9. '':'' → logprob: -8.807394981384277
    10. ']' → logprob: -9.182394981384277

Token 1181: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0008216609712690115
    2. ' '' → logprob: -7.125821590423584
    3. '"' → logprob: -11.625822067260742
    4. '='' → logprob: -13.000822067260742
    5. '=' → logprob: -13.125822067260742
    6. ' =' → logprob: -13.750822067260742
    7. ' ' → logprob: -14.750822067260742
    8. '[' → logprob: -15.125822067260742
    9. '1' → logprob: -15.250822067260742
    10. '`' → logprob: -15.375822067260742

Token 1182: '0' (ID: 15)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0012733275070786476
    2. '1' → logprob: -7.751273155212402
    3. '0' → logprob: -7.876273155212402
    4. ' '' → logprob: -7.876273155212402
    5. ' ' → logprob: -10.626273155212402
    6. ''''' → logprob: -10.876273155212402
    7. '"' → logprob: -11.126273155212402
    8. '')' → logprob: -12.376273155212402
    9. '```' → logprob: -12.501273155212402
    10. ''''
' → logprob: -12.626273155212402

Token 1183: '',
' (ID: 1214)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.3472191393375397
    2. '}' → logprob: -1.7222191095352173
    3. ''}' → logprob: -2.347219228744507
    4. '']' → logprob: -4.472218990325928
    5. '```' → logprob: -5.847218990325928
    6. '}'' → logprob: -7.097218990325928
    7. ''''' → logprob: -7.097218990325928
    8. '''' → logprob: -7.347218990325928
    9. ']' → logprob: -7.347218990325928
    10. '',' → logprob: -8.222219467163086

Token 1184: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.3037562966346741
    2. '']' → logprob: -1.8037562370300293
    3. '   ' → logprob: -3.3037562370300293
    4. '```' → logprob: -3.5537562370300293
    5. ']' → logprob: -4.178756237030029
    6. '"]' → logprob: -6.553756237030029
    7. '}' → logprob: -6.553756237030029
    8. '       ' → logprob: -6.678756237030029
    9. '`' → logprob: -6.803756237030029
    10. ''}' → logprob: -6.803756237030029

Token 1185: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' (adapté à ' '') → logprob: -0.5162438154220581
    2. '']' → logprob: -1.016243815422058
    3. ']' → logprob: -4.141243934631348
    4. '```' → logprob: -4.766243934631348
    5. ')' → logprob: -5.266243934631348
    6. '   ' → logprob: -5.766243934631348
    7. ''}' → logprob: -6.516243934631348
    8. '}' → logprob: -6.516243934631348
    9. '')' → logprob: -6.766243934631348
    10. '`' → logprob: -7.391243934631348

Token 1186: 'B' (ID: 33)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.400508850812912
    2. 'for' → logprob: -1.9005088806152344
    3. '   ' → logprob: -3.0255088806152344
    4. '```' → logprob: -4.150508880615234
    5. '       ' → logprob: -4.275508880615234
    6. '']' → logprob: -4.525508880615234
    7. '':' → logprob: -4.900508880615234
    8. 'B' → logprob: -5.025508880615234
    9. ':' → logprob: -5.025508880615234
    10. ']' → logprob: -5.150508880615234

Token 1187: '':' (ID: 2337)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.38937440514564514
    2. '':' → logprob: -1.1393743753433228
    3. '']' → logprob: -6.639374256134033
    4. ':' → logprob: -7.764374256134033
    5. '['' → logprob: -8.264374732971191
    6. '```' → logprob: -9.264374732971191
    7. '':'' → logprob: -9.389374732971191
    8. ']' → logprob: -9.389374732971191
    9. '":' → logprob: -10.014374732971191
    10. '   ' → logprob: -10.014374732971191

Token 1188: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.001556163071654737
    2. ' '' → logprob: -6.501556396484375
    3. '"' → logprob: -10.001556396484375
    4. '0' → logprob: -12.376556396484375
    5. ' ' → logprob: -14.126556396484375
    6. '`' → logprob: -14.376556396484375
    7. '100' → logprob: -14.626556396484375
    8. ''''' → logprob: -14.626556396484375
    9. '<|end|>' → logprob: -14.751556396484375
    10. '```' → logprob: -15.376556396484375

Token 1189: '1' (ID: 16)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.02211984619498253
    2. '1' → logprob: -4.272119998931885
    3. '0' → logprob: -4.897119998931885
    4. ' '' → logprob: -8.022119522094727
    5. '"' → logprob: -10.397119522094727
    6. ''''' → logprob: -10.522119522094727
    7. '`' → logprob: -10.647119522094727
    8. ' ' → logprob: -10.772119522094727
    9. '```' → logprob: -11.647119522094727
    10. ''''
' → logprob: -13.022119522094727

Token 1190: '',
' (ID: 1214)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '}' → logprob: -0.2354845553636551
    2. ''}' → logprob: -1.9854846000671387
    3. ''' → logprob: -2.7354846000671387
    4. '}'' → logprob: -6.235484600067139
    5. ''}
' → logprob: -6.360484600067139
    6. '}
' → logprob: -6.735484600067139
    7. '   ' → logprob: -6.860484600067139
    8. '}'
' → logprob: -8.11048412322998
    9. ''
' → logprob: -8.23548412322998
    10. '']' → logprob: -8.36048412322998

Token 1191: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.030902020633220673
    2. '   ' → logprob: -4.030901908874512
    3. '```' → logprob: -4.530901908874512
    4. '`' → logprob: -7.280901908874512
    5. '       ' → logprob: -8.155901908874512
    6. ''N' → logprob: -9.280901908874512
    7. '']' → logprob: -9.405901908874512
    8. '"' → logprob: -9.530901908874512
    9. ''T' → logprob: -9.530901908874512
    10. ''C' → logprob: -9.780901908874512

Token 1192: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' (adapté à ' '') → logprob: -0.1834341436624527
    2. ''T' → logprob: -2.683434247970581
    3. '   ' → logprob: -3.058434247970581
    4. ')' → logprob: -4.308434009552002
    5. '```' → logprob: -4.558434009552002
    6. ''A' → logprob: -5.183434009552002
    7. ''C' → logprob: -5.433434009552002
    8. ''H' → logprob: -5.933434009552002
    9. '')' → logprob: -6.308434009552002
    10. '}' → logprob: -6.308434009552002

Token 1193: 'X' (ID: 55)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.03424858674407005
    2. 'X' → logprob: -4.659248352050781
    3. 'A' → logprob: -5.784248352050781
    4. 'L' → logprob: -6.034248352050781
    5. ')' → logprob: -6.159248352050781
    6. 'W' → logprob: -6.409248352050781
    7. 'C' → logprob: -6.534248352050781
    8. 'K' → logprob: -6.659248352050781
    9. '[' → logprob: -6.659248352050781
    10. ''A' → logprob: -6.659248352050781

Token 1194: '':' (ID: 2337)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.3571215867996216
    2. '':' → logprob: -1.2321215867996216
    3. ':' → logprob: -5.232121467590332
    4. '']' → logprob: -6.482121467590332
    5. '['' → logprob: -7.482121467590332
    6. '=' → logprob: -7.982121467590332
    7. '```' → logprob: -8.232121467590332
    8. ']' → logprob: -8.982121467590332
    9. ''=' → logprob: -9.482121467590332
    10. '='' → logprob: -9.482121467590332

Token 1195: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0008465526043437421
    2. ' '' → logprob: -7.1258463859558105
    3. '"' → logprob: -11.250846862792969
    4. '='' → logprob: -12.125846862792969
    5. '=' → logprob: -12.250846862792969
    6. ' =' → logprob: -12.250846862792969
    7. ''=' → logprob: -12.750846862792969
    8. '`' → logprob: -12.875846862792969
    9. ''''' → logprob: -12.875846862792969
    10. '```' → logprob: -13.250846862792969

Token 1196: '0' (ID: 15)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0002600245934445411
    2. '0' → logprob: -9.125260353088379
    3. ' '' → logprob: -9.125260353088379
    4. ''''' → logprob: -10.500260353088379
    5. '```' → logprob: -12.375260353088379
    6. '`' → logprob: -12.500260353088379
    7. ''''
' → logprob: -13.250260353088379
    8. ' ' → logprob: -13.750260353088379
    9. '"' → logprob: -14.000260353088379
    10. '1' → logprob: -14.375260353088379

Token 1197: '',
' (ID: 1214)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '}' → logprob: -0.31067121028900146
    2. ''}' → logprob: -1.4356712102890015
    3. ''' → logprob: -4.310671329498291
    4. '}'' → logprob: -5.185671329498291
    5. ''}
' → logprob: -5.810671329498291
    6. '}
' → logprob: -5.935671329498291
    7. '}'
' → logprob: -6.810671329498291
    8. '',' → logprob: -7.060671329498291
    9. '   ' → logprob: -7.310671329498291
    10. ''
' → logprob: -7.435671329498291

Token 1198: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.2134789377450943
    2. '   ' → logprob: -2.4634790420532227
    3. '```' → logprob: -2.9634790420532227
    4. ''T' → logprob: -3.2134790420532227
    5. '``' → logprob: -5.838479042053223
    6. '']' → logprob: -6.338479042053223
    7. ''}' → logprob: -6.463479042053223
    8. ''H' → logprob: -6.463479042053223
    9. ''N' → logprob: -6.838479042053223
    10. ''D' → logprob: -6.963479042053223

Token 1199: ' '.' (ID: 12662)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.18750959634780884
    2. '']' → logprob: -2.187509536743164
    3. '```' → logprob: -3.437509536743164
    4. ''}' → logprob: -5.437509536743164
    5. '   ' → logprob: -5.437509536743164
    6. ']' → logprob: -5.437509536743164
    7. '"' → logprob: -5.562509536743164
    8. ')' → logprob: -6.187509536743164
    9. '"]' → logprob: -6.437509536743164
    10. '}' → logprob: -6.812509536743164

Token 1200: '':' (ID: 2337)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.21479161083698273
    2. ''.' → logprob: -2.2147915363311768
    3. '"' → logprob: -3.4647915363311768
    4. '.' → logprob: -4.214791774749756
    5. '```' → logprob: -4.714791774749756
    6. '']' → logprob: -4.964791774749756
    7. '`' → logprob: -5.714791774749756
    8. ')' → logprob: -5.714791774749756
    9. '')' → logprob: -6.089791774749756
    10. '''' → logprob: -6.214791774749756

Token 1201: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0008868030272424221
    2. '''' → logprob: -7.125886917114258
    3. ' '' → logprob: -10.375886917114258
    4. '"' → logprob: -10.875886917114258
    5. ''.' → logprob: -11.000886917114258
    6. ''\' → logprob: -12.375886917114258
    7. ''''' → logprob: -12.500886917114258
    8. '''
' → logprob: -12.750886917114258
    9. ''#' → logprob: -13.500886917114258
    10. ''
' → logprob: -14.125886917114258

Token 1202: '1' (ID: 16)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.022221742197871208
    2. '''' → logprob: -4.022221565246582
    3. '"' → logprob: -6.522221565246582
    4. ''.' → logprob: -7.272221565246582
    5. ''\' → logprob: -7.647221565246582
    6. ''''' → logprob: -7.897221565246582
    7. '0' → logprob: -8.022221565246582
    8. '""' → logprob: -8.272221565246582
    9. '')' → logprob: -8.397221565246582
    10. '.' → logprob: -9.647221565246582

Token 1203: '',
' (ID: 1214)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.018492184579372406
    2. '"' → logprob: -5.018492221832275
    3. ''
' → logprob: -6.018492221832275
    4. '']' → logprob: -6.518492221832275
    5. ')' → logprob: -6.643492221832275
    6. '}' → logprob: -6.768492221832275
    7. '```' → logprob: -6.768492221832275
    8. ']' → logprob: -7.268492221832275
    9. '[' → logprob: -7.518492221832275
    10. '.' → logprob: -7.893492221832275

Token 1204: '   ' (ID: 271)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '}' → logprob: -0.7486864328384399
    2. '   ' → logprob: -1.24868643283844
    3. '']' → logprob: -2.1236863136291504
    4. ''}' → logprob: -3.3736863136291504
    5. '```' → logprob: -3.6236863136291504
    6. ']' → logprob: -3.7486863136291504
    7. ''' → logprob: -3.9986863136291504
    8. '"]' → logprob: -5.24868631362915
    9. '       ' → logprob: -6.12368631362915
    10. '`' → logprob: -6.37368631362915

Token 1205: ' ',' (ID: 14089)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.5010982751846313
    2. '   ' → logprob: -1.5010982751846313
    3. '}' → logprob: -2.376098155975342
    4. ')' → logprob: -3.251098155975342
    5. '"' → logprob: -4.376098155975342
    6. ''}' → logprob: -5.001098155975342
    7. '```' → logprob: -5.126098155975342
    8. '')' → logprob: -5.876098155975342
    9. '']' → logprob: -5.876098155975342
    10. '`' → logprob: -6.501098155975342

Token 1206: '':' (ID: 2337)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0003034074034076184
    2. ' '' → logprob: -9.125303268432617
    3. '',' → logprob: -9.500303268432617
    4. '':' → logprob: -10.750303268432617
    5. '```' → logprob: -10.875303268432617
    6. '''' → logprob: -11.000303268432617
    7. '"' → logprob: -11.000303268432617
    8. ''''' → logprob: -11.625303268432617
    9. '','' → logprob: -11.750303268432617
    10. '':'' → logprob: -12.250303268432617

Token 1207: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -1.7120533811976202e-05
    2. ' '' → logprob: -11.625017166137695
    3. '',' → logprob: -12.500017166137695
    4. '"' → logprob: -12.750017166137695
    5. '','' → logprob: -14.750017166137695
    6. ''''' → logprob: -15.000017166137695
    7. '```' → logprob: -15.625017166137695
    8. ')' → logprob: -16.625017166137695
    9. '`' → logprob: -16.750017166137695
    10. '[' → logprob: -16.875017166137695

Token 1208: '0' (ID: 15)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0007920012576505542
    2. '0' → logprob: -7.250792026519775
    3. ''''' → logprob: -10.500791549682617
    4. '','' → logprob: -10.750791549682617
    5. '',' → logprob: -11.000791549682617
    6. '')' → logprob: -12.375791549682617
    7. ' '' → logprob: -12.875791549682617
    8. '```' → logprob: -13.125791549682617
    9. ')' → logprob: -13.250791549682617
    10. '"' → logprob: -13.625791549682617

Token 1209: '',
' (ID: 1214)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '}' → logprob: -0.0365382581949234
    2. ''}' → logprob: -3.4115383625030518
    3. '}
' → logprob: -6.411538124084473
    4. '}'' → logprob: -8.161538124084473
    5. '   ' → logprob: -8.286538124084473
    6. ''' → logprob: -8.411538124084473
    7. ''}
' → logprob: -8.536538124084473
    8. '',' → logprob: -9.286538124084473
    9. ',
' → logprob: -10.411538124084473
    10. '}'
' → logprob: -10.411538124084473

Token 1210: '   ' (ID: 271)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '}' → logprob: -0.4356423020362854
    2. '   ' → logprob: -1.6856422424316406
    3. ''' → logprob: -2.5606422424316406
    4. '```' → logprob: -3.0606422424316406
    5. ''}' → logprob: -3.6856422424316406
    6. '}
' → logprob: -5.185642242431641
    7. '`' → logprob: -5.685642242431641
    8. '``' → logprob: -5.935642242431641
    9. '       ' → logprob: -6.310642242431641
    10. '"}' → logprob: -6.310642242431641

Token 1211: ' '' (ID: 461)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '}' → logprob: -0.3111308813095093
    2. ''' (adapté à ' '') → logprob: -2.436131000518799
    3. '   ' → logprob: -2.811131000518799
    4. ''}' → logprob: -2.811131000518799
    5. '```' → logprob: -3.186131000518799
    6. '`' → logprob: -4.686131000518799
    7. ')' → logprob: -5.936131000518799
    8. '"}' → logprob: -6.936131000518799
    9. '']' → logprob: -7.061131000518799
    10. ']' → logprob: -7.061131000518799

Token 1212: ' ':' (ID: 30751)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.09311450272798538
    2. '"' → logprob: -3.4681146144866943
    3. '`' → logprob: -3.8431146144866943
    4. '   ' → logprob: -4.468114376068115
    5. '```' → logprob: -4.468114376068115
    6. ')' → logprob: -5.843114376068115
    7. '#' → logprob: -5.843114376068115
    8. ''\' → logprob: -6.218114376068115
    9. ''
' → logprob: -6.968114376068115
    10. '       ' → logprob: -7.343114376068115

Token 1213: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.000205566844670102
    2. ' '' → logprob: -9.125205993652344
    3. '"' → logprob: -9.500205993652344
    4. '''' → logprob: -10.750205993652344
    5. '0' → logprob: -16.125205993652344
    6. '`' → logprob: -16.375205993652344
    7. ''''' → logprob: -16.375205993652344
    8. '000' → logprob: -16.625205993652344
    9. '""' → logprob: -17.000205993652344
    10. ' ' → logprob: -17.500205993652344

Token 1214: '0' (ID: 15)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.05500753968954086
    2. '''' → logprob: -3.4300074577331543
    3. '"' → logprob: -4.680007457733154
    4. '0' → logprob: -5.180007457733154
    5. '000' → logprob: -5.305007457733154
    6. '""' → logprob: -7.430007457733154
    7. ''''' → logprob: -8.555007934570312
    8. '')' → logprob: -8.930007934570312
    9. '001' → logprob: -9.430007934570312
    10. '```' → logprob: -10.180007934570312

Token 1215: '',
' (ID: 1214)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0003794336807914078
    2. ''}' → logprob: -8.37537956237793
    3. ' '' → logprob: -9.87537956237793
    4. '}'' → logprob: -10.37537956237793
    5. ''
' → logprob: -10.87537956237793
    6. ''''' → logprob: -11.00037956237793
    7. '"' → logprob: -11.00037956237793
    8. '''' → logprob: -12.37537956237793
    9. '}' → logprob: -12.87537956237793
    10. '```' → logprob: -13.25037956237793

Token 1216: '}

' (ID: 943)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '}' → logprob: -0.5452315807342529
    2. '']' → logprob: -1.920231580734253
    3. '   ' → logprob: -2.045231580734253
    4. ']' → logprob: -2.670231580734253
    5. ''}' → logprob: -3.795231580734253
    6. '```' → logprob: -4.045231819152832
    7. ''' → logprob: -4.295231819152832
    8. '"]' → logprob: -5.170231819152832
    9. 'for' → logprob: -5.545231819152832
    10. '#' → logprob: -6.045231819152832

Token 1217: '#' (ID: 2)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.16956420242786407
    2. '   ' → logprob: -2.2945642471313477
    3. 'for' → logprob: -3.4195642471313477
    4. '```' → logprob: -4.419564247131348
    5. 'bit' → logprob: -6.044564247131348
    6. 'i' → logprob: -6.044564247131348
    7. '#' → logprob: -6.294564247131348
    8. 'decoded' → logprob: -6.794564247131348
    9. 'idx' → logprob: -7.169564247131348
    10. ' bits' → logprob: -7.544564247131348

Token 1218: ' The' (ID: 623)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.015883497893810272
    2. '   ' → logprob: -5.390883445739746
    3. 'for' → logprob: -5.515883445739746
    4. 'bit' → logprob: -5.640883445739746
    5. 'decoded' → logprob: -6.265883445739746
    6. '#' → logprob: -7.390883445739746
    7. '```' → logprob: -7.515883445739746
    8. 'idx' → logprob: -8.515883445739746
    9. 'i' → logprob: -9.890883445739746
    10. '
' → logprob: -10.015883445739746

Token 1219: ' above' (ID: 5151)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.024512240663170815
    2. 'bit' → logprob: -4.64951229095459
    3. 'for' → logprob: -5.02451229095459
    4. 'b' → logprob: -6.14951229095459
    5. 'i' → logprob: -6.64951229095459
    6. '#' → logprob: -6.64951229095459
    7. ' bits' → logprob: -6.77451229095459
    8. 'decoded' → logprob: -7.77451229095459
    9. 'while' → logprob: -8.27451229095459
    10. '```' → logprob: -8.52451229095459

Token 1220: ' assignment' (ID: 24618)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.1960408091545105
    2. 'for' → logprob: -2.5710408687591553
    3. '#' → logprob: -3.3210408687591553
    4. 'char' → logprob: -4.196040630340576
    5. '```' → logprob: -4.696040630340576
    6. 'bit' → logprob: -5.071040630340576
    7. '`' → logprob: -5.196040630340576
    8. '_bits' → logprob: -5.821040630340576
    9. 'b' → logprob: -5.946040630340576
    10. '[' → logprob: -6.071040630340576

Token 1221: ' is' (ID: 382)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.4125431180000305
    2. '   ' → logprob: -2.0375430583953857
    3. 'bits' → logprob: -2.0375430583953857
    4. ' for' → logprob: -3.6625430583953857
    5. 'char' → logprob: -4.412543296813965
    6. 'i' → logprob: -5.162543296813965
    7. '```' → logprob: -5.287543296813965
    8. '       ' → logprob: -5.287543296813965
    9. '#' → logprob: -5.537543296813965
    10. '`' → logprob: -5.787543296813965

Token 1222: ' just' (ID: 1327)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.26812943816185
    2. '{' → logprob: -1.5181294679641724
    3. '{
' → logprob: -5.143129348754883
    4. 'based' → logprob: -5.893129348754883
    5. 'not' → logprob: -6.143129348754883
    6. '{}' → logprob: -6.893129348754883
    7. 'incorrect' → logprob: -6.893129348754883
    8. 'correct' → logprob: -7.268129348754883
    9. '```' → logprob: -7.268129348754883
    10. '#' → logprob: -7.893129348754883

Token 1223: ' a' (ID: 261)
  Prédit: '{'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '{' → logprob: -0.009182543493807316
    2. ''' → logprob: -5.384182453155518
    3. '```' → logprob: -6.759182453155518
    4. '{}' → logprob: -7.009182453155518
    5. '#' → logprob: -7.259182453155518
    6. '{
' → logprob: -7.759182453155518
    7. ')' → logprob: -8.384182929992676
    8. '[' → logprob: -8.384182929992676
    9. '"' → logprob: -8.759182929992676
    10. 'char' → logprob: -8.759182929992676

Token 1224: ' guess' (ID: 11915)
  Prédit: '{'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '{' → logprob: -0.019785882905125618
    2. '{
' → logprob: -4.5197858810424805
    3. '```' → logprob: -5.8947858810424805
    4. '{}' → logprob: -6.5197858810424805
    5. '#' → logprob: -7.1447858810424805
    6. '`' → logprob: -7.3947858810424805
    7. 'possible' → logprob: -7.5197858810424805
    8. 'guess' → logprob: -7.7697858810424805
    9. 'char' → logprob: -7.8947858810424805
    10. 'default' → logprob: -8.39478588104248

Token 1225: ';' (ID: 26)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.1556813269853592
    2. 'for' → logprob: -2.5306813716888428
    3. '   ' → logprob: -3.0306813716888428
    4. 'b' → logprob: -4.905681133270264
    5. 'i' → logprob: -5.655681133270264
    6. ' for' → logprob: -6.280681133270264
    7. ' bits' → logprob: -6.530681133270264
    8. 'bit' → logprob: -7.155681133270264
    9. '```' → logprob: -7.905681133270264
    10. '       ' → logprob: -8.655681610107422

Token 1226: ' too' (ID: 3101)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.07816915214061737
    2. '   ' → logprob: -3.328169107437134
    3. 'for' → logprob: -3.828169107437134
    4. 'decoded' → logprob: -4.453169345855713
    5. 'bit' → logprob: -6.078169345855713
    6. 'i' → logprob: -7.078169345855713
    7. ' bits' → logprob: -7.703169345855713
    8. '#' → logprob: -7.828169345855713
    9. 'idx' → logprob: -7.953169345855713
    10. '```' → logprob: -8.203168869018555

Token 1227: ' complicated' (ID: 25334)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.5645289421081543
    2. '#' → logprob: -2.1895289421081543
    3. '"' → logprob: -2.6895289421081543
    4. '_' → logprob: -3.1895289421081543
    5. 'char' → logprob: -3.1895289421081543
    6. '```' → logprob: -3.3145289421081543
    7. '`' → logprob: -3.4395289421081543
    8. ')' → logprob: -3.8145289421081543
    9. '[' → logprob: -4.439528942108154
    10. ']' → logprob: -4.814528942108154

Token 1228: '.

' (ID: 364)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.4872284233570099
    2. '   ' → logprob: -1.2372283935546875
    3. 'for' → logprob: -3.1122283935546875
    4. 'b' → logprob: -4.3622283935546875
    5. '       ' → logprob: -4.9872283935546875
    6. '#' → logprob: -5.1122283935546875
    7. 'i' → logprob: -5.1122283935546875
    8. '```' → logprob: -5.3622283935546875
    9. 'bit' → logprob: -5.6122283935546875
    10. ' bits' → logprob: -5.9872283935546875

Token 1229: '#' (ID: 2)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0015506906202062964
    2. 'bit' → logprob: -7.626550674438477
    3. 'decoded' → logprob: -7.751550674438477
    4. 'for' → logprob: -8.501550674438477
    5. '#' → logprob: -8.626550674438477
    6. ' bits' → logprob: -9.501550674438477
    7. 'code' → logprob: -10.376550674438477
    8. '   ' → logprob: -10.501550674438477
    9. 'from' → logprob: -10.751550674438477
    10. 'b' → logprob: -11.126550674438477

Token 1230: ' Actually' (ID: 50557)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0017357517499476671
    2. 'bit' → logprob: -7.376735687255859
    3. 'decoded' → logprob: -7.501735687255859
    4. 'for' → logprob: -8.37673568725586
    5. '#' → logprob: -8.87673568725586
    6. ' bits' → logprob: -10.25173568725586
    7. '   ' → logprob: -10.50173568725586
    8. 'code' → logprob: -10.75173568725586
    9. 'from' → logprob: -10.87673568725586
    10. '```' → logprob: -11.25173568725586

Token 1231: ' we' (ID: 581)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.02331768535077572
    2. 'b' → logprob: -5.023317813873291
    3. 'for' → logprob: -5.398317813873291
    4. '#' → logprob: -6.148317813873291
    5. 'bit' → logprob: -6.148317813873291
    6. 'i' → logprob: -6.398317813873291
    7. '   ' → logprob: -6.398317813873291
    8. 'decoded' → logprob: -6.648317813873291
    9. 'code' → logprob: -7.398317813873291
    10. ' bits' → logprob: -7.773317813873291

Token 1232: ' can' (ID: 665)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -1.2094870805740356
    2. '=' → logprob: -1.3344870805740356
    3. 'for' → logprob: -1.5844870805740356
    4. ' =' → logprob: -2.584486961364746
    5. '#' → logprob: -2.834486961364746
    6. 'char' → logprob: -3.334486961364746
    7. '_bits' → logprob: -3.709486961364746
    8. ':' → logprob: -5.084486961364746
    9. 'def' → logprob: -5.584486961364746
    10. 'continue' → logprob: -5.584486961364746

Token 1233: ' just' (ID: 1327)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.19459101557731628
    2. 'char' → logprob: -2.4445910453796387
    3. '#' → logprob: -3.1945910453796387
    4. 'for' → logprob: -3.8195910453796387
    5. 'input' → logprob: -5.319591045379639
    6. 'code' → logprob: -5.694591045379639
    7. 'continue' → logprob: -5.944591045379639
    8. 'decoded' → logprob: -5.944591045379639
    9. '```' → logprob: -6.194591045379639
    10. '   ' → logprob: -6.194591045379639

Token 1234: ' use' (ID: 1199)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.18718954920768738
    2. 'for' → logprob: -2.1871895790100098
    3. 'char' → logprob: -3.6871895790100098
    4. '#' → logprob: -4.93718957901001
    5. 'code' → logprob: -5.06218957901001
    6. '   ' → logprob: -5.31218957901001
    7. 'decoded' → logprob: -6.06218957901001
    8. 'continue' → logprob: -6.18718957901001
    9. '```' → logprob: -6.31218957901001
    10. 'bit' → logprob: -6.31218957901001

Token 1235: ' the' (ID: 290)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.8187624216079712
    2. 'bits' → logprob: -1.3187624216079712
    3. 'for' → logprob: -1.4437624216079712
    4. 'line' → logprob: -4.318762302398682
    5. 'ch' → logprob: -4.693762302398682
    6. 'code' → logprob: -5.068762302398682
    7. '`' → logprob: -5.318762302398682
    8. '   ' → logprob: -5.443762302398682
    9. '```' → logprob: -5.443762302398682
    10. 'bit' → logprob: -5.818762302398682

Token 1236: ' code' (ID: 3490)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.2330346703529358
    2. 'for' → logprob: -2.358034610748291
    3. 'char' → logprob: -2.358034610748291
    4. 'code' → logprob: -5.608034610748291
    5. 'decoded' → logprob: -5.608034610748291
    6. 'bit' → logprob: -5.983034610748291
    7. '#' → logprob: -6.108034610748291
    8. 'line' → logprob: -6.358034610748291
    9. '```' → logprob: -6.483034610748291
    10. 'input' → logprob: -6.483034610748291

Token 1237: ' table' (ID: 3293)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.11795435100793839
    2. 'for' → logprob: -2.6179542541503906
    3. '   ' → logprob: -3.4929542541503906
    4. 'decoded' → logprob: -5.742954254150391
    5. 'bit' → logprob: -6.742954254150391
    6. 'char' → logprob: -7.367954254150391
    7. ' for' → logprob: -7.617954254150391
    8. 'b' → logprob: -7.742954254150391
    9. ' bits' → logprob: -7.742954254150391
    10. '```' → logprob: -7.867954254150391

Token 1238: ' given' (ID: 4335)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0038632587529718876
    2. '   ' → logprob: -5.878863334655762
    3. 'for' → logprob: -7.753863334655762
    4. 'bit' → logprob: -8.753863334655762
    5. ' bits' → logprob: -8.753863334655762
    6. '```' → logprob: -8.753863334655762
    7. 'decoded' → logprob: -9.628863334655762
    8. 'code' → logprob: -10.628863334655762
    9. 'chars' → logprob: -10.878863334655762
    10. 'char' → logprob: -11.378863334655762

Token 1239: ' in' (ID: 306)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0031856747809797525
    2. '   ' → logprob: -6.128185749053955
    3. 'for' → logprob: -7.253185749053955
    4. 'decoded' → logprob: -9.378185272216797
    5. 'bit' → logprob: -9.378185272216797
    6. ' bits' → logprob: -9.753185272216797
    7. 'i' → logprob: -10.878185272216797
    8. 'b' → logprob: -10.878185272216797
    9. '```' → logprob: -11.378185272216797
    10. 'code' → logprob: -13.003185272216797

Token 1240: ' problem' (ID: 4792)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.9315143823623657
    2. 'char' → logprob: -1.5565143823623657
    3. 'ch' → logprob: -1.9315143823623657
    4. 'for' → logprob: -2.681514263153076
    5. 'bits' → logprob: -2.931514263153076
    6. '```' → logprob: -3.306514263153076
    7. 'code' → logprob: -3.931514263153076
    8. '`' → logprob: -4.181514263153076
    9. 'table' → logprob: -4.431514263153076
    10. '"' → logprob: -4.431514263153076

Token 1241: ' description' (ID: 6496)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0004711874935310334
    2. '   ' → logprob: -8.625471115112305
    3. 'bit' → logprob: -9.250471115112305
    4. 'for' → logprob: -9.500471115112305
    5. 'decoded' → logprob: -9.500471115112305
    6. ' bits' → logprob: -10.625471115112305
    7. 'char' → logprob: -12.250471115112305
    8. 'chars' → logprob: -12.500471115112305
    9. 'code' → logprob: -12.875471115112305
    10. 'b' → logprob: -13.000471115112305

Token 1242: ':
' (ID: 734)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.011020119301974773
    2. '   ' → logprob: -4.886020183563232
    3. 'for' → logprob: -6.261020183563232
    4. 'bit' → logprob: -7.886020183563232
    5. ' bits' → logprob: -8.011019706726074
    6. 'decoded' → logprob: -8.261019706726074
    7. '```' → logprob: -9.011019706726074
    8. '#' → logprob: -9.261019706726074
    9. 'chars' → logprob: -9.386019706726074
    10. 'char' → logprob: -9.636019706726074

Token 1243: '#' (ID: 2)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0014378506457433105
    2. 'bit' → logprob: -7.251437664031982
    3. '   ' → logprob: -8.62643814086914
    4. 'char' → logprob: -9.25143814086914
    5. 'decoded' → logprob: -9.25143814086914
    6. '```' → logprob: -9.50143814086914
    7. 'code' → logprob: -9.62643814086914
    8. ' bits' → logprob: -9.75143814086914
    9. '#' → logprob: -9.75143814086914
    10. 'for' → logprob: -10.50143814086914

Token 1244: ' Table' (ID: 10211)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.01786227524280548
    2. 'for' → logprob: -4.767862319946289
    3. '   ' → logprob: -6.017862319946289
    4. 'bit' → logprob: -6.142862319946289
    5. 'char' → logprob: -6.267862319946289
    6. 'decoded' → logprob: -6.517862319946289
    7. 'code' → logprob: -7.892862319946289
    8. '#' → logprob: -8.017862319946289
    9. 'chars' → logprob: -8.767862319946289
    10. 'input' → logprob: -9.142862319946289

Token 1245: ' given' (ID: 4335)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0258825421333313
    2. '   ' → logprob: -4.275882720947266
    3. 'for' → logprob: -4.650882720947266
    4. 'bit' → logprob: -7.400882720947266
    5. 'i' → logprob: -7.775882720947266
    6. 'b' → logprob: -8.025882720947266
    7. ' bits' → logprob: -8.275882720947266
    8. 'char' → logprob: -8.900882720947266
    9. 'decoded' → logprob: -9.025882720947266
    10. 'code' → logprob: -9.900882720947266

Token 1246: ' as' (ID: 472)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7459319233894348
    2. 'bits' → logprob: -0.8709319233894348
    3. 'for' → logprob: -2.74593186378479
    4. ' bits' → logprob: -4.370932102203369
    5. 'char' → logprob: -4.870932102203369
    6. ' for' → logprob: -4.995932102203369
    7. 'b' → logprob: -5.870932102203369
    8. '```' → logprob: -6.120932102203369
    9. 'decoded' → logprob: -6.245932102203369
    10. 'bit' → logprob: -6.370932102203369

Token 1247: ':
' (ID: 734)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.4966745376586914
    2. 'for' → logprob: -1.8716745376586914
    3. 'bits' → logprob: -2.6216745376586914
    4. '"' → logprob: -3.4966745376586914
    5. 'code' → logprob: -3.9966745376586914
    6. '#' → logprob: -4.121674537658691
    7. '   ' → logprob: -4.496674537658691
    8. '{
' → logprob: -4.621674537658691
    9. 'bit' → logprob: -4.621674537658691
    10. 'table' → logprob: -4.746674537658691

Token 1248: '#' (ID: 2)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.038621433079242706
    2. 'for' → logprob: -3.788621425628662
    3. '   ' → logprob: -4.788621425628662
    4. ' bits' → logprob: -6.538621425628662
    5. 'b' → logprob: -6.663621425628662
    6. 'decoded' → logprob: -6.913621425628662
    7. 'bit' → logprob: -7.288621425628662
    8. 'i' → logprob: -7.413621425628662
    9. 'char' → logprob: -7.788621425628662
    10. '```' → logprob: -7.913621425628662

Token 1249: ' ' (ID: 220)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -1.3655922412872314
    2. 'for' → logprob: -1.4905922412872314
    3. '"' → logprob: -2.2405922412872314
    4. '{' → logprob: -2.8655922412872314
    5. 'bits' → logprob: -2.9905922412872314
    6. '   ' → logprob: -3.1155922412872314
    7. ''' → logprob: -3.2405922412872314
    8. '#' → logprob: -3.2405922412872314
    9. '```' → logprob: -3.2405922412872314
    10. 'code' → logprob: -3.3655922412872314

Token 1250: '111' (ID: 8780)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.00821489654481411
    2. 'char' → logprob: -5.633214950561523
    3. 'bit' → logprob: -6.133214950561523
    4. 'for' → logprob: -7.133214950561523
    5. '   ' → logprob: -7.758214950561523
    6. ' bits' → logprob: -7.883214950561523
    7. 'decoded' → logprob: -8.133214950561523
    8. 'code' → logprob: -8.383214950561523
    9. 'b' → logprob: -9.633214950561523
    10. 'chars' → logprob: -10.008214950561523

Token 1251: '11' (ID: 994)
  Prédit: '111'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '111' → logprob: -0.5866241455078125
    2. '11' → logprob: -1.9616241455078125
    3. '```' → logprob: -2.7116241455078125
    4. '<|end|>' → logprob: -2.9616241455078125
    5. ')' → logprob: -3.2116241455078125
    6. '"' → logprob: -3.8366241455078125
    7. ''''' → logprob: -3.9616241455078125
    8. '"""' → logprob: -3.9616241455078125
    9. '#' → logprob: -4.3366241455078125
    10. '<|end|>' → logprob: -4.5866241455078125

Token 1252: ' ' (ID: 220)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.47290757298469543
    2. ''' → logprob: -1.972907543182373
    3. 'bits' → logprob: -2.972907543182373
    4. ')' → logprob: -3.347907543182373
    5. '?' → logprob: -3.472907543182373
    6. 'for' → logprob: -3.972907543182373
    7. '   ' → logprob: -4.472907543182373
    8. '`' → logprob: -4.972907543182373
    9. 'char' → logprob: -4.972907543182373
    10. '")' → logprob: -4.972907543182373

Token 1253: '000' (ID: 1302)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.9491008520126343
    2. '   ' → logprob: -1.4491008520126343
    3. 'for' → logprob: -1.6991008520126343
    4. '"' → logprob: -2.199100971221924
    5. '```' → logprob: -4.074100971221924
    6. '       ' → logprob: -4.074100971221924
    7. ''' → logprob: -4.699100971221924
    8. ' for' → logprob: -4.824100971221924
    9. ' bits' → logprob: -5.199100971221924
    10. '`' → logprob: -5.449100971221924

Token 1254: '11' (ID: 994)
  Prédit: '11'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '11' → logprob: -0.7391577363014221
    2. ''' → logprob: -1.3641576766967773
    3. '```' → logprob: -2.6141576766967773
    4. '01' → logprob: -2.8641576766967773
    5. '00' → logprob: -2.9891576766967773
    6. '"' → logprob: -3.2391576766967773
    7. '111' → logprob: -4.614157676696777
    8. '"""' → logprob: -5.114157676696777
    9. ''''' → logprob: -5.114157676696777
    10. '#' → logprob: -5.239157676696777

Token 1255: ' ' (ID: 220)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0010660359403118491
    2. 'decoded' → logprob: -7.876066207885742
    3. 'for' → logprob: -8.251066207885742
    4. 'bit' → logprob: -8.501066207885742
    5. ' bits' → logprob: -9.376066207885742
    6. '   ' → logprob: -9.501066207885742
    7. 'char' → logprob: -11.001066207885742
    8. '```' → logprob: -11.876066207885742
    9. 'b' → logprob: -12.001066207885742
    10. 'chars' → logprob: -12.126066207885742

Token 1256: '111' (ID: 8780)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.014228150248527527
    2. 'for' → logprob: -5.514228343963623
    3. 'bit' → logprob: -6.014228343963623
    4. 'decoded' → logprob: -6.014228343963623
    5. ' bits' → logprob: -6.139228343963623
    6. 'char' → logprob: -6.514228343963623
    7. '   ' → logprob: -7.639228343963623
    8. '#' → logprob: -8.389227867126465
    9. 'code' → logprob: -8.514227867126465
    10. '```' → logprob: -8.639227867126465

Token 1257: '01' (ID: 2290)
  Prédit: '11'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '11' → logprob: -0.42741772532463074
    2. '"' → logprob: -2.177417755126953
    3. '111' → logprob: -3.302417755126953
    4. ' ' → logprob: -3.302417755126953
    5. '1' → logprob: -3.427417755126953
    6. '```' → logprob: -3.677417755126953
    7. '<|end|>' → logprob: -3.802417755126953
    8. ''' → logprob: -4.052417755126953
    9. '"""' → logprob: -4.177417755126953
    10. ''''' → logprob: -4.802417755126953

Token 1258: ' ' (ID: 220)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.017429618164896965
    2. 'bit' → logprob: -5.392429828643799
    3. '   ' → logprob: -5.517429828643799
    4. 'for' → logprob: -5.642429828643799
    5. 'char' → logprob: -5.892429828643799
    6. 'decoded' → logprob: -6.642429828643799
    7. '#' → logprob: -8.14242935180664
    8. ' bits' → logprob: -8.51742935180664
    9. 'code' → logprob: -8.89242935180664
    10. '```' → logprob: -9.14242935180664

Token 1259: '000' (ID: 1302)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.012946800328791142
    2. 'for' → logprob: -5.637946605682373
    3. 'decoded' → logprob: -5.762946605682373
    4. 'bit' → logprob: -6.012946605682373
    5. ' bits' → logprob: -6.512946605682373
    6. 'char' → logprob: -7.012946605682373
    7. 'code' → logprob: -8.387947082519531
    8. '   ' → logprob: -8.387947082519531
    9. '```' → logprob: -8.387947082519531
    10. '#' → logprob: -9.012947082519531

Token 1260: '10' (ID: 702)
  Prédit: '11'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '11' → logprob: -0.2239839732646942
    2. '"' → logprob: -2.9739840030670166
    3. '01' → logprob: -2.9739840030670166
    4. '00' → logprob: -3.3489840030670166
    5. ''' → logprob: -3.3489840030670166
    6. '111' → logprob: -4.4739837646484375
    7. '```' → logprob: -5.3489837646484375
    8. '001' → logprob: -6.2239837646484375
    9. '"""' → logprob: -6.3489837646484375
    10. '011' → logprob: -6.3489837646484375

Token 1261: ' ' (ID: 220)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.00320825376547873
    2. '   ' → logprob: -6.503208160400391
    3. 'for' → logprob: -7.253208160400391
    4. 'decoded' → logprob: -7.878208160400391
    5. 'bit' → logprob: -8.00320816040039
    6. ' bits' → logprob: -9.00320816040039
    7. 'b' → logprob: -10.00320816040039
    8. 'i' → logprob: -10.12820816040039
    9. '```' → logprob: -10.37820816040039
    10. 'code' → logprob: -12.00320816040039

Token 1262: '111' (ID: 8780)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0025212035980075598
    2. 'for' → logprob: -7.25252103805542
    3. 'b' → logprob: -7.37752103805542
    4. 'bit' → logprob: -7.75252103805542
    5. 'decoded' → logprob: -8.252521514892578
    6. ' bits' → logprob: -8.627521514892578
    7. '   ' → logprob: -9.002521514892578
    8. 'i' → logprob: -9.002521514892578
    9. 'code' → logprob: -11.127521514892578
    10. 'char' → logprob: -11.752521514892578

Token 1263: '10' (ID: 702)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.1319373846054077
    2. 'bits' → logprob: -1.2569373846054077
    3. '"' → logprob: -2.1319375038146973
    4. 'for' → logprob: -2.2569375038146973
    5. '```' → logprob: -3.3819375038146973
    6. '#' → logprob: -4.131937503814697
    7. ' bits' → logprob: -4.381937503814697
    8. 'char' → logprob: -4.506937503814697
    9. ' for' → logprob: -4.756937503814697
    10. ':' → logprob: -4.756937503814697

Token 1264: ' ' (ID: 220)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.010005037300288677
    2. 'for' → logprob: -5.760004997253418
    3. 'bit' → logprob: -5.885004997253418
    4. 'decoded' → logprob: -6.260004997253418
    5. '   ' → logprob: -7.010004997253418
    6. 'char' → logprob: -7.635004997253418
    7. '#' → logprob: -8.635004997253418
    8. 'code' → logprob: -8.635004997253418
    9. ' bits' → logprob: -9.010004997253418
    10. 'chars' → logprob: -9.760004997253418

Token 1265: '010' (ID: 13522)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.003193993354216218
    2. 'bit' → logprob: -6.8781938552856445
    3. 'decoded' → logprob: -7.2531938552856445
    4. 'for' → logprob: -7.5031938552856445
    5. ' bits' → logprob: -8.003193855285645
    6. 'i' → logprob: -9.003193855285645
    7. 'b' → logprob: -9.003193855285645
    8. '#' → logprob: -9.628193855285645
    9. '   ' → logprob: -9.753193855285645
    10. '```' → logprob: -10.128193855285645

Token 1266: '10' (ID: 702)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.7255297303199768
    2. 'for' → logprob: -2.350529670715332
    3. '   ' → logprob: -2.725529670715332
    4. ' "' → logprob: -3.100529670715332
    5. ''' → logprob: -3.350529670715332
    6. '```' → logprob: -3.475529670715332
    7. ' ' → logprob: -3.725529670715332
    8. '#' → logprob: -3.850529670715332
    9. '0' → logprob: -3.850529670715332
    10. '`' → logprob: -4.225529670715332

Token 1267: ' ' (ID: 220)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.6866989135742188
    2. '   ' → logprob: -0.8116989135742188
    3. 'for' → logprob: -3.3116989135742188
    4. 'char' → logprob: -5.686698913574219
    5. 'bit' → logprob: -6.061698913574219
    6. 'i' → logprob: -6.436698913574219
    7. 'decoded' → logprob: -6.561698913574219
    8. 'b' → logprob: -6.686698913574219
    9. ' bits' → logprob: -6.686698913574219
    10. '       ' → logprob: -6.811698913574219

Token 1268: '011' (ID: 17342)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.02407093159854412
    2. 'for' → logprob: -5.024070739746094
    3. 'decoded' → logprob: -5.274070739746094
    4. 'bit' → logprob: -5.524070739746094
    5. 'char' → logprob: -5.899070739746094
    6. ' bits' → logprob: -6.024070739746094
    7. '   ' → logprob: -6.899070739746094
    8. '#' → logprob: -7.649070739746094
    9. 'code' → logprob: -8.149070739746094
    10. '```' → logprob: -8.274070739746094

Token 1269: '10' (ID: 702)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.10806358605623245
    2. 'for' → logprob: -2.7330636978149414
    3. 'b' → logprob: -3.9830636978149414
    4. ' bits' → logprob: -5.483063697814941
    5. '   ' → logprob: -5.733063697814941
    6. '```' → logprob: -5.858063697814941
    7. 'bit' → logprob: -6.483063697814941
    8. ' for' → logprob: -6.608063697814941
    9. 'i' → logprob: -6.858063697814941
    10. 'char' → logprob: -7.233063697814941

Token 1270: ' ' (ID: 220)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.06153802201151848
    2. 'for' → logprob: -3.811537981033325
    3. '   ' → logprob: -3.936537981033325
    4. 'decoded' → logprob: -5.311538219451904
    5. 'bit' → logprob: -5.686538219451904
    6. ' bits' → logprob: -6.061538219451904
    7. '```' → logprob: -6.186538219451904
    8. 'char' → logprob: -6.561538219451904
    9. 'code' → logprob: -7.061538219451904
    10. '#' → logprob: -7.186538219451904

Token 1271: '011' (ID: 17342)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5372574925422668
    2. 'bits' → logprob: -1.662257432937622
    3. 'for' → logprob: -2.537257432937622
    4. '"' → logprob: -2.912257432937622
    5. 'b' → logprob: -4.287257671356201
    6. ':' → logprob: -4.412257671356201
    7. '       ' → logprob: -4.537257671356201
    8. ' for' → logprob: -5.287257671356201
    9. ' bits' → logprob: -5.287257671356201
    10. 'bit' → logprob: -5.412257671356201

Token 1272: '11' (ID: 994)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -1.3390464782714844
    2. 'for' → logprob: -1.3390464782714844
    3. '   ' → logprob: -2.2140464782714844
    4. ')' → logprob: -3.2140464782714844
    5. '#' → logprob: -3.4640464782714844
    6. 'bits' → logprob: -3.9640464782714844
    7. '"]' → logprob: -4.089046478271484
    8. '[' → logprob: -4.214046478271484
    9. ']' → logprob: -4.214046478271484
    10. '`' → logprob: -4.214046478271484

Token 1273: ' ' (ID: 220)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.13766849040985107
    2. 'for' → logprob: -2.3876686096191406
    3. '   ' → logprob: -3.7626686096191406
    4. 'decoded' → logprob: -5.387668609619141
    5. 'bit' → logprob: -5.887668609619141
    6. 'i' → logprob: -6.012668609619141
    7. 'char' → logprob: -6.887668609619141
    8. '#' → logprob: -7.637668609619141
    9. 'b' → logprob: -7.887668609619141
    10. 'idx' → logprob: -8.13766860961914

Token 1274: '101' (ID: 7959)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.19350294768810272
    2. 'for' → logprob: -2.443502902984619
    3. '   ' → logprob: -2.693502902984619
    4. 'decoded' → logprob: -4.818502902984619
    5. 'bit' → logprob: -5.318502902984619
    6. 'char' → logprob: -6.318502902984619
    7. 'i' → logprob: -6.693502902984619
    8. '```' → logprob: -6.818502902984619
    9. '#' → logprob: -7.068502902984619
    10. ' for' → logprob: -7.443502902984619

Token 1275: '00' (ID: 504)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.11514239013195038
    2. 'for' → logprob: -3.365142345428467
    3. ' bits' → logprob: -3.990142345428467
    4. 'b' → logprob: -4.490142345428467
    5. '   ' → logprob: -4.490142345428467
    6. 'bit' → logprob: -4.740142345428467
    7. 'char' → logprob: -5.615142345428467
    8. 'i' → logprob: -5.615142345428467
    9. '```' → logprob: -5.740142345428467
    10. ' for' → logprob: -6.115142345428467

Token 1276: ' ' (ID: 220)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.07978944480419159
    2. 'for' → logprob: -3.454789400100708
    3. '   ' → logprob: -3.579789400100708
    4. 'decoded' → logprob: -4.579789638519287
    5. 'bit' → logprob: -5.704789638519287
    6. 'char' → logprob: -6.329789638519287
    7. ' bits' → logprob: -7.954789638519287
    8. 'chars' → logprob: -8.204789161682129
    9. '#' → logprob: -8.329789161682129
    10. 'code' → logprob: -8.329789161682129

Token 1277: '000' (ID: 1302)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0017437237547710538
    2. 'decoded' → logprob: -6.876743793487549
    3. 'bit' → logprob: -8.00174331665039
    4. 'i' → logprob: -9.12674331665039
    5. 'for' → logprob: -9.37674331665039
    6. '   ' → logprob: -10.12674331665039
    7. ' bits' → logprob: -10.25174331665039
    8. 'idx' → logprob: -10.87674331665039
    9. 'pos' → logprob: -11.00174331665039
    10. '#' → logprob: -11.00174331665039

Token 1278: '00' (ID: 504)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.3358980715274811
    2. 'for' → logprob: -1.5858980417251587
    3. '   ' → logprob: -3.2108981609344482
    4. 'decoded' → logprob: -5.210897922515869
    5. 'char' → logprob: -5.335897922515869
    6. ' for' → logprob: -5.335897922515869
    7. 'bit' → logprob: -5.460897922515869
    8. '"' → logprob: -5.460897922515869
    9. 'b' → logprob: -5.585897922515869
    10. '```' → logprob: -5.710897922515869

Token 1279: '
' (ID: 198)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.009794337674975395
    2. 'decoded' → logprob: -5.134794235229492
    3. 'for' → logprob: -6.134794235229492
    4. 'bit' → logprob: -7.384794235229492
    5. '   ' → logprob: -7.509794235229492
    6. ' bits' → logprob: -8.509794235229492
    7. '#' → logprob: -9.884794235229492
    8. 'char' → logprob: -9.884794235229492
    9. '```' → logprob: -10.009794235229492
    10. 'code' → logprob: -10.259794235229492

Token 1280: '#' (ID: 2)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.005789186339825392
    2. 'decoded' → logprob: -6.255789279937744
    3. '   ' → logprob: -6.505789279937744
    4. 'bit' → logprob: -6.755789279937744
    5. 'for' → logprob: -7.130789279937744
    6. ' bits' → logprob: -9.630788803100586
    7. 'code' → logprob: -9.630788803100586
    8. 'char' → logprob: -9.880788803100586
    9. 'i' → logprob: -10.255788803100586
    10. '#' → logprob: -10.505788803100586

Token 1281: ' So' (ID: 2632)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.03489290177822113
    2. 'decoded' → logprob: -4.159893035888672
    3. 'for' → logprob: -4.409893035888672
    4. '   ' → logprob: -5.409893035888672
    5. 'bit' → logprob: -6.659893035888672
    6. 'char' → logprob: -8.659893035888672
    7. 'i' → logprob: -9.159893035888672
    8. 'code' → logprob: -9.159893035888672
    9. 'idx' → logprob: -9.659893035888672
    10. 'decode' → logprob: -9.909893035888672

Token 1282: ' probably' (ID: 7038)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.3768955171108246
    2. '"' → logprob: -2.3768954277038574
    3. 'char' → logprob: -3.5018954277038574
    4. 'b' → logprob: -3.5018954277038574
    5. 'for' → logprob: -3.6268954277038574
    6. 'code' → logprob: -3.8768954277038574
    7. '`' → logprob: -4.251895427703857
    8. '```' → logprob: -4.251895427703857
    9. 'bit' → logprob: -4.376895427703857
    10. '   ' → logprob: -4.501895427703857

Token 1283: ' actual' (ID: 6290)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.06830597668886185
    2. 'for' → logprob: -3.1933059692382812
    3. 'decoded' → logprob: -5.068305969238281
    4. '   ' → logprob: -5.318305969238281
    5. 'bit' → logprob: -5.443305969238281
    6. 'b' → logprob: -5.943305969238281
    7. 'char' → logprob: -6.693305969238281
    8. ' bits' → logprob: -7.068305969238281
    9. 'code' → logprob: -7.193305969238281
    10. '```' → logprob: -7.318305969238281

Token 1284: ' mapping' (ID: 22573)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.2272484004497528
    2. 'for' → logprob: -2.477248430252075
    3. 'char' → logprob: -2.852248430252075
    4. '"' → logprob: -3.852248430252075
    5. '```' → logprob: -4.852248191833496
    6. '`' → logprob: -4.977248191833496
    7. '   ' → logprob: -5.727248191833496
    8. 'bit' → logprob: -5.852248191833496
    9. '#' → logprob: -5.852248191833496
    10. ' bits' → logprob: -6.227248191833496

Token 1285: ' is' (ID: 382)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.004437359049916267
    2. 'decoded' → logprob: -5.879437446594238
    3. 'bit' → logprob: -7.379437446594238
    4. '   ' → logprob: -7.754437446594238
    5. 'char' → logprob: -8.129437446594238
    6. 'for' → logprob: -9.129437446594238
    7. 'code' → logprob: -10.004437446594238
    8. ' bits' → logprob: -10.004437446594238
    9. 'chars' → logprob: -10.754437446594238
    10. 'decode' → logprob: -11.254437446594238

Token 1286: ' that' (ID: 484)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.24331998825073242
    2. 'char' → logprob: -2.7433199882507324
    3. 'for' → logprob: -3.1183199882507324
    4. '   ' → logprob: -3.6183199882507324
    5. 'bit' → logprob: -3.9933199882507324
    6. ' bits' → logprob: -4.743319988250732
    7. 'code' → logprob: -5.118319988250732
    8. 'b' → logprob: -5.118319988250732
    9. 'decoded' → logprob: -5.118319988250732
    10. '#' → logprob: -5.243319988250732

Token 1287: ' the' (ID: 290)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0170644149184227
    2. 'for' → logprob: -5.142064571380615
    3. 'decoded' → logprob: -5.392064571380615
    4. 'bit' → logprob: -5.517064571380615
    5. 'char' → logprob: -7.142064571380615
    6. '   ' → logprob: -7.517064571380615
    7. ' bits' → logprob: -8.517064094543457
    8. 'i' → logprob: -8.767064094543457
    9. '#' → logprob: -9.017064094543457
    10. 'code' → logprob: -9.267064094543457

Token 1288: ' input' (ID: 3422)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.12252028286457062
    2. 'for' → logprob: -2.3725202083587646
    3. 'char' → logprob: -4.747520446777344
    4. 'b' → logprob: -5.997520446777344
    5. ' bits' → logprob: -5.997520446777344
    6. '```' → logprob: -6.247520446777344
    7. ' for' → logprob: -6.622520446777344
    8. 'bit' → logprob: -6.997520446777344
    9. '   ' → logprob: -6.997520446777344
    10. 'i' → logprob: -7.122520446777344

Token 1289: ' characters' (ID: 9862)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.589134931564331
    2. 'char' → logprob: -1.964134931564331
    3. 'for' → logprob: -2.214134931564331
    4. '=' → logprob: -3.214134931564331
    5. '_bits' → logprob: -3.714134931564331
    6. '```' → logprob: -3.964134931564331
    7. '`' → logprob: -4.46413516998291
    8. ':' → logprob: -4.46413516998291
    9. 'chars' → logprob: -4.46413516998291
    10. ' =' → logprob: -4.83913516998291

Token 1290: ' are' (ID: 553)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.24612301588058472
    2. ':' → logprob: -3.3711230754852295
    3. 'char' → logprob: -3.6211230754852295
    4. '#' → logprob: -3.7461230754852295
    5. 'for' → logprob: -3.9961230754852295
    6. '[' → logprob: -4.12112283706665
    7. '+=' → logprob: -4.37112283706665
    8. '"' → logprob: -4.49612283706665
    9. '```' → logprob: -4.49612283706665
    10. ')' → logprob: -4.62112283706665

Token 1291: ' the' (ID: 290)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.920807957649231
    2. 'for' → logprob: -1.420807957649231
    3. '"' → logprob: -1.920807957649231
    4. 'bits' → logprob: -2.9208078384399414
    5. ''' → logprob: -3.6708078384399414
    6. '`' → logprob: -4.045807838439941
    7. 'line' → logprob: -4.170807838439941
    8. '#' → logprob: -4.170807838439941
    9. '```' → logprob: -4.545807838439941
    10. 'code' → logprob: -5.170807838439941

Token 1292: ' letters' (ID: 18151)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.3465591371059418
    2. 'for' → logprob: -2.3465590476989746
    3. 'char' → logprob: -2.4715590476989746
    4. '"' → logprob: -4.096559047698975
    5. '```' → logprob: -4.096559047698975
    6. '`' → logprob: -4.221559047698975
    7. 'code' → logprob: -4.596559047698975
    8. 'c' → logprob: -4.721559047698975
    9. 'bit' → logprob: -5.221559047698975
    10. 'b' → logprob: -5.346559047698975

Token 1293: ' with' (ID: 483)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.10361182689666748
    2. 'for' → logprob: -2.978611946105957
    3. '   ' → logprob: -3.228611946105957
    4. 'decoded' → logprob: -5.978611946105957
    5. 'char' → logprob: -6.603611946105957
    6. 'bit' → logprob: -6.603611946105957
    7. '```' → logprob: -7.103611946105957
    8. ' bits' → logprob: -7.728611946105957
    9. 'code' → logprob: -7.978611946105957
    10. '#' → logprob: -8.228611946105957

Token 1294: ' code' (ID: 3490)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.5250527858734131
    2. 'for' → logprob: -1.025052785873413
    3. 'char' → logprob: -4.025053024291992
    4. 'line' → logprob: -4.650053024291992
    5. '   ' → logprob: -5.025053024291992
    6. 'c' → logprob: -6.025053024291992
    7. '```' → logprob: -6.025053024291992
    8. 'ch' → logprob: -6.275053024291992
    9. 'b' → logprob: -6.525053024291992
    10. '`' → logprob: -6.900053024291992

Token 1295: ' converted' (ID: 28358)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0019589634612202644
    2. 'for' → logprob: -7.251958847045898
    3. '   ' → logprob: -7.876958847045898
    4. 'bit' → logprob: -8.126958847045898
    5. 'decoded' → logprob: -8.376958847045898
    6. ' bits' → logprob: -8.751958847045898
    7. '```' → logprob: -10.001958847045898
    8. 'b' → logprob: -10.376958847045898
    9. 'code' → logprob: -10.626958847045898
    10. 'char' → logprob: -10.751958847045898

Token 1296: ' to' (ID: 316)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.012929732911288738
    2. '   ' → logprob: -4.887929916381836
    3. 'for' → logprob: -5.887929916381836
    4. 'bit' → logprob: -6.637929916381836
    5. 'decoded' → logprob: -7.387929916381836
    6. 'char' → logprob: -9.012929916381836
    7. '#' → logprob: -9.262929916381836
    8. ' bits' → logprob: -9.262929916381836
    9. '```' → logprob: -9.262929916381836
    10. 'code' → logprob: -9.762929916381836

Token 1297: ' that' (ID: 484)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.012841358780860901
    2. 'for' → logprob: -5.76284122467041
    3. 'char' → logprob: -5.88784122467041
    4. '```' → logprob: -6.51284122467041
    5. 'code' → logprob: -6.88784122467041
    6. 'bit' → logprob: -7.01284122467041
    7. '"' → logprob: -7.38784122467041
    8. 'line' → logprob: -7.51284122467041
    9. 'decoded' → logprob: -8.01284122467041
    10. '`' → logprob: -8.01284122467041

Token 1298: ' sequence' (ID: 16281)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.037442486733198166
    2. 'for' → logprob: -3.912442445755005
    3. '   ' → logprob: -4.412442684173584
    4. 'char' → logprob: -6.537442684173584
    5. 'bit' → logprob: -7.037442684173584
    6. '#' → logprob: -7.037442684173584
    7. ' bits' → logprob: -7.662442684173584
    8. 'b' → logprob: -8.662442207336426
    9. 'code' → logprob: -8.662442207336426
    10. 'if' → logprob: -9.412442207336426

Token 1299: '.

' (ID: 364)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.03991687297821045
    2. 'for' → logprob: -3.6649169921875
    3. '   ' → logprob: -4.6649169921875
    4. 'decoded' → logprob: -6.5399169921875
    5. 'bit' → logprob: -7.2899169921875
    6. 'i' → logprob: -7.4149169921875
    7. 'b' → logprob: -7.4149169921875
    8. 'char' → logprob: -8.2899169921875
    9. ' bits' → logprob: -9.0399169921875
    10. 'if' → logprob: -9.4149169921875

Token 1300: '#' (ID: 2)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.007582016754895449
    2. 'decoded' → logprob: -6.007582187652588
    3. '   ' → logprob: -6.132582187652588
    4. 'bit' → logprob: -6.257582187652588
    5. 'for' → logprob: -7.632582187652588
    6. 'i' → logprob: -8.63258171081543
    7. 'idx' → logprob: -9.00758171081543
    8. 'decode' → logprob: -10.13258171081543
    9. '```' → logprob: -10.13258171081543
    10. ' bits' → logprob: -10.38258171081543

Token 1301: ' Actually' (ID: 50557)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.017299234867095947
    2. '   ' → logprob: -4.892299175262451
    3. 'decoded' → logprob: -5.642299175262451
    4. 'for' → logprob: -5.767299175262451
    5. 'bit' → logprob: -6.142299175262451
    6. 'i' → logprob: -7.767299175262451
    7. 'idx' → logprob: -9.01729965209961
    8. ' bits' → logprob: -9.76729965209961
    9. 'decode' → logprob: -9.89229965209961
    10. '```' → logprob: -10.01729965209961

Token 1302: ' the' (ID: 290)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.20861007273197174
    2. 'for' → logprob: -1.9586100578308105
    3. '   ' → logprob: -3.4586100578308105
    4. 'i' → logprob: -5.3336100578308105
    5. 'char' → logprob: -5.8336100578308105
    6. 'b' → logprob: -5.8336100578308105
    7. 'bit' → logprob: -6.5836100578308105
    8. '       ' → logprob: -7.2086100578308105
    9. ' bits' → logprob: -7.4586100578308105
    10. 'c' → logprob: -7.5836100578308105

Token 1303: ' problem' (ID: 4792)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.09113474935293198
    2. 'for' → logprob: -2.591134786605835
    3. 'decoded' → logprob: -5.841134548187256
    4. 'i' → logprob: -5.966134548187256
    5. 'bit' → logprob: -6.591134548187256
    6. '#' → logprob: -6.966134548187256
    7. 'char' → logprob: -7.091134548187256
    8. '```' → logprob: -7.341134548187256
    9. 'b' → logprob: -7.591134548187256
    10. ' bits' → logprob: -7.716134548187256

Token 1304: ' is' (ID: 382)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.3545067608356476
    2. 'for' → logprob: -1.8545067310333252
    3. '   ' → logprob: -2.104506731033325
    4. 'i' → logprob: -4.604506969451904
    5. 'char' → logprob: -5.479506969451904
    6. 'bit' → logprob: -7.104506969451904
    7. 'b' → logprob: -7.229506969451904
    8. 'ch' → logprob: -7.479506969451904
    9. 'decoded' → logprob: -7.604506969451904
    10. 'if' → logprob: -7.604506969451904

Token 1305: ' a' (ID: 261)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.1186867952346802
    2. 'bits' → logprob: -1.2436867952346802
    3. 'for' → logprob: -1.2436867952346802
    4. 'i' → logprob: -3.1186866760253906
    5. '```' → logprob: -3.6186866760253906
    6. 'char' → logprob: -5.118686676025391
    7. 'bit' → logprob: -5.368686676025391
    8. 'ch' → logprob: -6.118686676025391
    9. ' for' → logprob: -6.368686676025391
    10. '       ' → logprob: -6.618686676025391

Token 1306: ' classical' (ID: 40663)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.10141699016094208
    2. 'for' → logprob: -3.101417064666748
    3. 'i' → logprob: -3.976417064666748
    4. '```' → logprob: -4.851417064666748
    5. 'decoded' → logprob: -4.851417064666748
    6. 'bit' → logprob: -5.601417064666748
    7. 'char' → logprob: -6.101417064666748
    8. 'code' → logprob: -6.851417064666748
    9. '   ' → logprob: -7.226417064666748
    10. 'b' → logprob: -7.226417064666748

Token 1307: ' "' (ID: 392)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.22406715154647827
    2. 'for' → logprob: -1.849067211151123
    3. 'b' → logprob: -4.599067211151123
    4. 'i' → logprob: -5.224067211151123
    5. '   ' → logprob: -5.349067211151123
    6. ' for' → logprob: -5.599067211151123
    7. '```' → logprob: -5.599067211151123
    8. ' bits' → logprob: -5.724067211151123
    9. '#' → logprob: -6.099067211151123
    10. 'char' → logprob: -6.099067211151123

Token 1308: 'M' (ID: 44)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.38594120740890503
    2. 'for' → logprob: -1.3859412670135498
    3. 'i' → logprob: -4.010941028594971
    4. '```' → logprob: -4.135941028594971
    5. 'b' → logprob: -4.385941028594971
    6. ' bits' → logprob: -5.385941028594971
    7. 'while' → logprob: -5.385941028594971
    8. '   ' → logprob: -5.510941028594971
    9. ' for' → logprob: -6.010941028594971
    10. 'bit' → logprob: -6.135941028594971

Token 1309: 'orse' (ID: 17120)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.6433300375938416
    2. ')' → logprob: -2.8933300971984863
    3. 'n' → logprob: -3.1433300971984863
    4. 'i' → logprob: -3.2683300971984863
    5. 'bits' → logprob: -3.3933300971984863
    6. 'r' → logprob: -3.5183300971984863
    7. '_' → logprob: -3.6433300971984863
    8. '`' → logprob: -3.7683300971984863
    9. ' for' → logprob: -3.8933300971984863
    10. 'e' → logprob: -4.018330097198486

Token 1310: '-like' (ID: 22085)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -1.1202776432037354
    2. 'bits' → logprob: -1.4952776432037354
    3. 'for' → logprob: -2.2452776432037354
    4. '_' → logprob: -2.2452776432037354
    5. 'char' → logprob: -3.4952776432037354
    6. '_bits' → logprob: -3.7452776432037354
    7. '=' → logprob: -3.9952776432037354
    8. ''' → logprob: -4.245277404785156
    9. ')' → logprob: -4.370277404785156
    10. 'bit' → logprob: -4.495277404785156

Token 1311: '"' (ID: 1)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.8189947605133057
    2. 'for' → logprob: -1.4439947605133057
    3. 'char' → logprob: -2.3189947605133057
    4. 'b' → logprob: -2.6939947605133057
    5. '"' → logprob: -3.1939947605133057
    6. '```' → logprob: -4.193994522094727
    7. '`' → logprob: -4.443994522094727
    8. '   ' → logprob: -4.693994522094727
    9. ':' → logprob: -4.693994522094727
    10. 'c' → logprob: -4.818994522094727

Token 1312: ' code' (ID: 3490)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.78766268491745
    2. 'bits' → logprob: -1.0376627445220947
    3. '   ' → logprob: -1.7876627445220947
    4. ' for' → logprob: -5.412662506103516
    5. '```' → logprob: -5.412662506103516
    6. 'bit' → logprob: -5.912662506103516
    7. 'char' → logprob: -6.037662506103516
    8. 'decoded' → logprob: -6.287662506103516
    9. 'i' → logprob: -6.412662506103516
    10. '#' → logprob: -6.912662506103516

Token 1313: ':
' (ID: 734)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.018434131518006325
    2. '   ' → logprob: -5.268434047698975
    3. 'for' → logprob: -5.393434047698975
    4. 'decoded' → logprob: -5.393434047698975
    5. 'bit' → logprob: -5.893434047698975
    6. 'char' → logprob: -7.643434047698975
    7. 'chars' → logprob: -9.018434524536133
    8. ' bits' → logprob: -9.143434524536133
    9. 'b' → logprob: -9.143434524536133
    10. 'code' → logprob: -9.143434524536133

Token 1314: '#' (ID: 2)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.21485354006290436
    2. 'for' → logprob: -2.214853525161743
    3. '   ' → logprob: -2.714853525161743
    4. 'i' → logprob: -5.339853763580322
    5. 'bit' → logprob: -5.464853763580322
    6. 'char' → logprob: -5.964853763580322
    7. 'decoded' → logprob: -6.589853763580322
    8. '```' → logprob: -6.839853763580322
    9. 'code' → logprob: -7.464853763580322
    10. 'idx' → logprob: -7.589853763580322

Token 1315: ' The' (ID: 623)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.010418979451060295
    2. 'decoded' → logprob: -5.635418891906738
    3. 'i' → logprob: -5.885418891906738
    4. 'bit' → logprob: -6.385418891906738
    5. 'for' → logprob: -6.510418891906738
    6. '   ' → logprob: -8.260418891906738
    7. 'idx' → logprob: -8.510418891906738
    8. 'pos' → logprob: -9.260418891906738
    9. 'decode' → logprob: -9.635418891906738
    10. 'b' → logprob: -9.760418891906738

Token 1316: ' table' (ID: 3293)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.44283074140548706
    2. 'for' → logprob: -1.1928308010101318
    3. 'b' → logprob: -4.567830562591553
    4. '   ' → logprob: -4.692830562591553
    5. 'i' → logprob: -4.817830562591553
    6. ' for' → logprob: -4.817830562591553
    7. ' bits' → logprob: -5.692830562591553
    8. '```' → logprob: -5.692830562591553
    9. 'char' → logprob: -6.067830562591553
    10. 'bit' → logprob: -6.567830562591553

Token 1317: ' assigns' (ID: 113134)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.525970995426178
    2. 'for' → logprob: -2.025970935821533
    3. 'b' → logprob: -3.150970935821533
    4. '   ' → logprob: -3.275970935821533
    5. '=' → logprob: -3.400970935821533
    6. 'i' → logprob: -3.525970935821533
    7. '#' → logprob: -3.900970935821533
    8. ':' → logprob: -3.900970935821533
    9. '_' → logprob: -4.400970935821533
    10. '```' → logprob: -4.525970935821533

Token 1318: ' letters' (ID: 18151)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.502144455909729
    2. 'for' → logprob: -1.752144455909729
    3. '   ' → logprob: -2.1271443367004395
    4. '```' → logprob: -2.7521443367004395
    5. '       ' → logprob: -5.0021443367004395
    6. 'char' → logprob: -5.1271443367004395
    7. 'i' → logprob: -5.5021443367004395
    8. ' for' → logprob: -5.7521443367004395
    9. 'b' → logprob: -5.7521443367004395
    10. 'bit' → logprob: -5.8771443367004395

Token 1319: ' to' (ID: 316)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6204842329025269
    2. 'for' → logprob: -1.2454842329025269
    3. 'bits' → logprob: -2.4954843521118164
    4. ' for' → logprob: -3.8704843521118164
    5. ':' → logprob: -3.9954843521118164
    6. '       ' → logprob: -4.245484352111816
    7. '"' → logprob: -4.745484352111816
    8. '#' → logprob: -5.370484352111816
    9. '```' → logprob: -5.495484352111816
    10. ' bits' → logprob: -5.870484352111816

Token 1320: ' code' (ID: 3490)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.6853869557380676
    2. 'bits' → logprob: -1.6853868961334229
    3. ''' → logprob: -2.810386896133423
    4. 'for' → logprob: -3.060386896133423
    5. '```' → logprob: -3.310386896133423
    6. '`' → logprob: -3.560386896133423
    7. 'line' → logprob: -3.685386896133423
    8. 'char' → logprob: -3.810386896133423
    9. '   ' → logprob: -3.935386896133423
    10. ')' → logprob: -3.935386896133423

Token 1321: ' strings' (ID: 18279)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9111084938049316
    2. 'for' → logprob: -1.0361084938049316
    3. 'bits' → logprob: -1.5361084938049316
    4. ' for' → logprob: -4.786108493804932
    5. '```' → logprob: -5.036108493804932
    6. 'decoded' → logprob: -6.036108493804932
    7. 'i' → logprob: -6.286108493804932
    8. 'char' → logprob: -6.536108493804932
    9. 'bit' → logprob: -6.536108493804932
    10. '#' → logprob: -7.036108493804932

Token 1322: ' of' (ID: 328)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.5198813080787659
    2. 'for' → logprob: -1.519881248474121
    3. '   ' → logprob: -1.894881248474121
    4. 'decoded' → logprob: -4.019881248474121
    5. 'i' → logprob: -5.269881248474121
    6. 'bit' → logprob: -5.644881248474121
    7. ' for' → logprob: -6.144881248474121
    8. 'char' → logprob: -6.394881248474121
    9. ' bits' → logprob: -6.894881248474121
    10. 'b' → logprob: -7.019881248474121

Token 1323: ' ' (ID: 220)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.36979514360427856
    2. '"' → logprob: -2.619795083999634
    3. 'for' → logprob: -2.619795083999634
    4. '   ' → logprob: -3.119795083999634
    5. '```' → logprob: -3.994795083999634
    6. 'c' → logprob: -4.119795322418213
    7. 'char' → logprob: -4.369795322418213
    8. 'b' → logprob: -4.369795322418213
    9. '`' → logprob: -4.744795322418213
    10. ' bits' → logprob: -4.869795322418213

Token 1324: '0' (ID: 15)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.10790842026472092
    2. 'for' → logprob: -2.4829084873199463
    3. 'b' → logprob: -5.607908248901367
    4. '   ' → logprob: -6.107908248901367
    5. '```' → logprob: -6.107908248901367
    6. '"' → logprob: -6.232908248901367
    7. 'char' → logprob: -6.232908248901367
    8. '`' → logprob: -6.857908248901367
    9. 'i' → logprob: -6.857908248901367
    10. 'bit' → logprob: -7.107908248901367

Token 1325: ' and' (ID: 326)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.7489433884620667
    2. '_' → logprob: -2.123943328857422
    3. 'for' → logprob: -2.373943328857422
    4. '=' → logprob: -2.998943328857422
    5. '""' → logprob: -3.248943328857422
    6. ''' → logprob: -3.373943328857422
    7. '#' → logprob: -3.873943328857422
    8. '```' → logprob: -3.998943328857422
    9. '   ' → logprob: -4.123943328857422
    10. ')' → logprob: -4.373943328857422

Token 1326: ' ' (ID: 220)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.16983754932880402
    2. '```' → logprob: -3.419837474822998
    3. 'bits' → logprob: -3.794837474822998
    4. ''' → logprob: -3.794837474822998
    5. '""' → logprob: -3.919837474822998
    6. '`' → logprob: -4.294837474822998
    7. 'for' → logprob: -4.419837474822998
    8. '"""' → logprob: -5.044837474822998
    9. '#' → logprob: -5.794837474822998
    10. '"\' → logprob: -6.044837474822998

Token 1327: '1' (ID: 16)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.24051687121391296
    2. 'bits' → logprob: -2.8655169010162354
    3. '""' → logprob: -2.9905169010162354
    4. ''' → logprob: -4.115516662597656
    5. 'for' → logprob: -4.240516662597656
    6. '"\' → logprob: -4.365516662597656
    7. '"
' → logprob: -4.365516662597656
    8. '```' → logprob: -4.990516662597656
    9. '")' → logprob: -5.115516662597656
    10. '":' → logprob: -5.490516662597656

Token 1328: ' digits' (ID: 37806)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.11999146640300751
    2. '   ' → logprob: -2.7449915409088135
    3. 'for' → logprob: -3.7449915409088135
    4. 'i' → logprob: -4.619991302490234
    5. 'decoded' → logprob: -4.619991302490234
    6. 'idx' → logprob: -6.369991302490234
    7. 'bit' → logprob: -6.494991302490234
    8. 'pos' → logprob: -7.744991302490234
    9. 'code' → logprob: -7.994991302490234
    10. 'while' → logprob: -7.994991302490234

Token 1329: '.

' (ID: 364)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.039462823420763016
    2. '   ' → logprob: -3.6644628047943115
    3. 'for' → logprob: -4.914463043212891
    4. 'decoded' → logprob: -5.789463043212891
    5. 'i' → logprob: -6.914463043212891
    6. 'bit' → logprob: -7.039463043212891
    7. 'code' → logprob: -8.53946304321289
    8. 'idx' → logprob: -8.91446304321289
    9. 'char' → logprob: -9.16446304321289
    10. '```' → logprob: -9.41446304321289

Token 1330: '#' (ID: 2)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.14750462770462036
    2. '   ' → logprob: -2.1475045680999756
    3. 'for' → logprob: -4.897504806518555
    4. 'i' → logprob: -5.022504806518555
    5. 'bit' → logprob: -5.897504806518555
    6. 'decoded' → logprob: -6.522504806518555
    7. 'idx' → logprob: -7.147504806518555
    8. 'pos' → logprob: -8.022504806518555
    9. 'code' → logprob: -8.772504806518555
    10. 'b' → logprob: -9.022504806518555

Token 1331: ' But' (ID: 3072)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.02756701596081257
    2. '   ' → logprob: -4.027566909790039
    3. 'decoded' → logprob: -5.527566909790039
    4. 'bit' → logprob: -5.652566909790039
    5. 'for' → logprob: -6.902566909790039
    6. '#' → logprob: -8.027566909790039
    7. 'char' → logprob: -8.902566909790039
    8. 'i' → logprob: -8.902566909790039
    9. 'idx' → logprob: -9.402566909790039
    10. 'code' → logprob: -9.652566909790039

Token 1332: ' the' (ID: 290)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3402576744556427
    2. 'for' → logprob: -1.4652576446533203
    3. 'bits' → logprob: -3.0902576446533203
    4. '       ' → logprob: -5.46525764465332
    5. ' for' → logprob: -5.84025764465332
    6. 'i' → logprob: -6.34025764465332
    7. 'ch' → logprob: -7.59025764465332
    8. '```' → logprob: -7.84025764465332
    9. 'char' → logprob: -8.09025764465332
    10. 'bit' → logprob: -8.09025764465332

Token 1333: ' input' (ID: 3422)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.1314527839422226
    2. 'for' → logprob: -2.381452798843384
    3. '   ' → logprob: -4.881452560424805
    4. 'b' → logprob: -4.881452560424805
    5. 'i' → logprob: -5.256452560424805
    6. '```' → logprob: -6.256452560424805
    7. 'char' → logprob: -6.756452560424805
    8. 'c' → logprob: -6.756452560424805
    9. 'bit' → logprob: -7.006452560424805
    10. ' bits' → logprob: -7.131452560424805

Token 1334: ' is' (ID: 382)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.771431028842926
    2. 'bits' → logprob: -1.5214309692382812
    3. 'for' → logprob: -2.8964309692382812
    4. '_bits' → logprob: -2.8964309692382812
    5. '+=' → logprob: -3.1464309692382812
    6. 'char' → logprob: -3.2714309692382812
    7. '"' → logprob: -3.6464309692382812
    8. '_chars' → logprob: -4.021430969238281
    9. '_' → logprob: -4.771430969238281
    10. '```' → logprob: -4.896430969238281

Token 1335: ' a' (ID: 261)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.019647253677248955
    2. '```' → logprob: -4.894647121429443
    3. 'for' → logprob: -5.519647121429443
    4. '"' → logprob: -6.144647121429443
    5. 'b' → logprob: -6.519647121429443
    6. '   ' → logprob: -6.644647121429443
    7. ' bits' → logprob: -6.769647121429443
    8. 'bit' → logprob: -7.894647121429443
    9. 'i' → logprob: -8.394647598266602
    10. '``' → logprob: -8.394647598266602

Token 1336: ' string' (ID: 1621)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.007011482957750559
    2. 'for' → logprob: -5.257011413574219
    3. '```' → logprob: -7.257011413574219
    4. 'b' → logprob: -7.882011413574219
    5. 'bit' → logprob: -8.632011413574219
    6. 'i' → logprob: -9.257011413574219
    7. ' bits' → logprob: -9.382011413574219
    8. 'decoded' → logprob: -9.632011413574219
    9. 'char' → logprob: -10.132011413574219
    10. '   ' → logprob: -10.507011413574219

Token 1337: ' of' (ID: 328)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.38642075657844543
    2. 'for' → logprob: -1.636420726776123
    3. '   ' → logprob: -2.136420726776123
    4. 'i' → logprob: -6.511420726776123
    5. 'char' → logprob: -6.636420726776123
    6. 'c' → logprob: -6.761420726776123
    7. 'ch' → logprob: -7.261420726776123
    8. 'b' → logprob: -7.386420726776123
    9. 'bit' → logprob: -7.511420726776123
    10. ' for' → logprob: -7.511420726776123

Token 1338: ' the' (ID: 290)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.8494110703468323
    2. '"' → logprob: -1.5994110107421875
    3. 'char' → logprob: -1.7244110107421875
    4. 'for' → logprob: -2.8494110107421875
    5. 'code' → logprob: -3.9744110107421875
    6. 'line' → logprob: -4.2244110107421875
    7. '```' → logprob: -4.3494110107421875
    8. ')' → logprob: -4.4744110107421875
    9. '""' → logprob: -4.7244110107421875
    10. '`' → logprob: -4.7244110107421875

Token 1339: ' characters' (ID: 9862)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.45908984541893005
    2. 'for' → logprob: -1.5840898752212524
    3. 'char' → logprob: -2.959089756011963
    4. '"' → logprob: -3.834089756011963
    5. '`' → logprob: -3.959089756011963
    6. 'b' → logprob: -4.084089756011963
    7. '```' → logprob: -4.709089756011963
    8. 'line' → logprob: -4.709089756011963
    9. 'c' → logprob: -5.084089756011963
    10. 'i' → logprob: -5.709089756011963

Token 1340: ' that' (ID: 484)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7357285022735596
    2. 'bits' → logprob: -1.3607285022735596
    3. 'for' → logprob: -1.4857285022735596
    4. ' for' → logprob: -4.1107282638549805
    5. '```' → logprob: -5.2357282638549805
    6. '       ' → logprob: -5.3607282638549805
    7. ' bits' → logprob: -6.1107282638549805
    8. 'i' → logprob: -6.2357282638549805
    9. 'char' → logprob: -6.3607282638549805
    10. 'decoded' → logprob: -6.7357282638549805

Token 1341: ' stand' (ID: 3182)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.16572947800159454
    2. 'for' → logprob: -2.540729522705078
    3. '=' → logprob: -4.165729522705078
    4. 'char' → logprob: -5.040729522705078
    5. '+=' → logprob: -5.040729522705078
    6. 'i' → logprob: -5.040729522705078
    7. 'ch' → logprob: -5.290729522705078
    8. ':' → logprob: -5.790729522705078
    9. '+' → logprob: -5.915729522705078
    10. '```' → logprob: -5.915729522705078

Token 1342: ' for' (ID: 395)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -1.0935307741165161
    2. '=' → logprob: -1.0935307741165161
    3. ''' → logprob: -1.2185307741165161
    4. '`' → logprob: -5.093530654907227
    5. '#' → logprob: -5.218530654907227
    6. ')' → logprob: -5.218530654907227
    7. '```' → logprob: -5.593530654907227
    8. 'for' → logprob: -5.718530654907227
    9. '"""' → logprob: -6.093530654907227
    10. '[' → logprob: -6.343530654907227

Token 1343: ' ' (ID: 220)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.30958691239356995
    2. '"' → logprob: -2.434587001800537
    3. 'char' → logprob: -2.559587001800537
    4. 'line' → logprob: -3.934587001800537
    5. '```' → logprob: -4.184587001800537
    6. '`' → logprob: -4.434587001800537
    7. 'for' → logprob: -4.559587001800537
    8. 'bit' → logprob: -4.684587001800537
    9. ''' → logprob: -4.684587001800537
    10. ')' → logprob: -4.934587001800537

Token 1344: '0' (ID: 15)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.6353389024734497
    2. '"' → logprob: -1.8853389024734497
    3. 'char' → logprob: -2.26033878326416
    4. 'for' → logprob: -2.88533878326416
    5. 'code' → logprob: -3.38533878326416
    6. 'ch' → logprob: -3.63533878326416
    7. '`' → logprob: -4.13533878326416
    8. 'bit' → logprob: -4.38533878326416
    9. '```' → logprob: -4.51033878326416
    10. 'line' → logprob: -4.51033878326416

Token 1345: ' and' (ID: 326)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.05708874762058258
    2. 'for' → logprob: -4.307088851928711
    3. 'char' → logprob: -4.432088851928711
    4. 'bit' → logprob: -4.932088851928711
    5. '```' → logprob: -5.932088851928711
    6. '"' → logprob: -6.057088851928711
    7. ' bits' → logprob: -6.057088851928711
    8. ':' → logprob: -6.307088851928711
    9. '_bits' → logprob: -6.557088851928711
    10. '=' → logprob: -6.557088851928711

Token 1346: ' ' (ID: 220)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.07025362551212311
    2. '"' → logprob: -2.945253610610962
    3. '#' → logprob: -5.695253849029541
    4. '```' → logprob: -5.945253849029541
    5. ''''' → logprob: -6.320253849029541
    6. '`' → logprob: -6.320253849029541
    7. '"""' → logprob: -6.945253849029541
    8. '0' → logprob: -7.070253849029541
    9. ''s' → logprob: -7.945253849029541
    10. '''' → logprob: -8.070253372192383

Token 1347: '1' (ID: 16)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.7090170383453369
    2. ''' → logprob: -2.209017038345337
    3. '"' → logprob: -2.334017038345337
    4. 'char' → logprob: -2.709017038345337
    5. 'ch' → logprob: -3.209017038345337
    6. 'for' → logprob: -3.459017038345337
    7. '`' → logprob: -3.834017038345337
    8. 'bit' → logprob: -3.959017038345337
    9. 'line' → logprob: -4.209016799926758
    10. '```' → logprob: -4.459016799926758

Token 1348: ' bits' (ID: 18189)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0032509120646864176
    2. 'bit' → logprob: -6.003251075744629
    3. 'for' → logprob: -8.003251075744629
    4. 'char' → logprob: -8.503251075744629
    5. '#' → logprob: -9.003251075744629
    6. '   ' → logprob: -10.253251075744629
    7. 'code' → logprob: -10.878251075744629
    8. 'decoded' → logprob: -11.628251075744629
    9. 'chars' → logprob: -11.628251075744629
    10. ' bits' → logprob: -12.128251075744629

Token 1349: ',' (ID: 11)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.00756071787327528
    2. 'for' → logprob: -5.007560729980469
    3. '   ' → logprob: -7.507560729980469
    4. 'bit' → logprob: -8.382560729980469
    5. '```' → logprob: -11.132560729980469
    6. 'b' → logprob: -11.257560729980469
    7. ' bits' → logprob: -11.507560729980469
    8. 'if' → logprob: -12.132560729980469
    9. 'i' → logprob: -12.257560729980469
    10. '#' → logprob: -12.507560729980469

Token 1350: ' so' (ID: 813)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.007056815084069967
    2. 'bit' → logprob: -5.507056713104248
    3. '   ' → logprob: -6.507056713104248
    4. 'char' → logprob: -7.507056713104248
    5. '#' → logprob: -7.757056713104248
    6. 'for' → logprob: -8.507057189941406
    7. 'code' → logprob: -9.632057189941406
    8. 'chars' → logprob: -9.757057189941406
    9. ' bits' → logprob: -9.757057189941406
    10. 'input' → logprob: -10.257057189941406

Token 1351: ' we' (ID: 581)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.003292021108791232
    2. 'for' → logprob: -6.378292083740234
    3. '   ' → logprob: -7.253292083740234
    4. 'bit' → logprob: -7.378292083740234
    5. '```' → logprob: -9.253292083740234
    6. 'char' → logprob: -10.378292083740234
    7. 'code' → logprob: -10.503292083740234
    8. ' bits' → logprob: -10.628292083740234
    9. 'b' → logprob: -11.003292083740234
    10. 'i' → logprob: -11.503292083740234

Token 1352: ' need' (ID: 1309)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.24051180481910706
    2. '=' → logprob: -2.115511894226074
    3. '_bits' → logprob: -3.615511894226074
    4. 'for' → logprob: -3.865511894226074
    5. '+=' → logprob: -4.365511894226074
    6. 'bit' → logprob: -5.490511894226074
    7. ' =' → logprob: -5.865511894226074
    8. '#' → logprob: -5.990511894226074
    9. ':' → logprob: -6.115511894226074
    10. '=""' → logprob: -6.240511894226074

Token 1353: ' to' (ID: 316)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.1869623363018036
    2. 'char' → logprob: -2.061962366104126
    3. 'for' → logprob: -4.436962127685547
    4. '"' → logprob: -4.811962127685547
    5. 'bit' → logprob: -5.436962127685547
    6. '`' → logprob: -5.561962127685547
    7. '   ' → logprob: -5.811962127685547
    8. 'code' → logprob: -6.061962127685547
    9. '#' → logprob: -6.311962127685547
    10. '```' → logprob: -6.561962127685547

Token 1354: ' convert' (ID: 8452)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.10231994092464447
    2. 'for' → logprob: -2.9773199558258057
    3. 'char' → logprob: -3.2273199558258057
    4. 'line' → logprob: -6.352319717407227
    5. 'bit' → logprob: -7.102319717407227
    6. 'code' → logprob: -7.227319717407227
    7. 'decode' → logprob: -7.852319717407227
    8. '#' → logprob: -7.977319717407227
    9. 'ch' → logprob: -8.227319717407227
    10. '"' → logprob: -8.227319717407227

Token 1355: ' input' (ID: 3422)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0013435659930109978
    2. 'bit' → logprob: -7.251343727111816
    3. 'for' → logprob: -7.876343727111816
    4. 'char' → logprob: -9.001343727111816
    5. '```' → logprob: -10.626343727111816
    6. '   ' → logprob: -10.876343727111816
    7. 'code' → logprob: -11.001343727111816
    8. '#' → logprob: -11.001343727111816
    9. 'chars' → logprob: -11.126343727111816
    10. ' bits' → logprob: -11.501343727111816

Token 1356: ' characters' (ID: 9862)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.17376203835010529
    2. 'char' → logprob: -2.923762083053589
    3. 'for' → logprob: -3.298762083053589
    4. '=' → logprob: -3.548762083053589
    5. '_bits' → logprob: -4.04876184463501
    6. ' =' → logprob: -4.92376184463501
    7. '+=' → logprob: -5.67376184463501
    8. 'line' → logprob: -5.92376184463501
    9. 'ch' → logprob: -6.04876184463501
    10. 'bit' → logprob: -6.67376184463501

Token 1357: ' to' (ID: 316)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.3122865557670593
    2. 'char' → logprob: -2.062286615371704
    3. 'for' → logprob: -2.187286615371704
    4. '=' → logprob: -4.812286376953125
    5. 'ch' → logprob: -4.937286376953125
    6. '```' → logprob: -5.687286376953125
    7. '`' → logprob: -6.562286376953125
    8. 'bit' → logprob: -6.812286376953125
    9. ' =' → logprob: -6.812286376953125
    10. 'c' → logprob: -6.937286376953125

Token 1358: ' bits' (ID: 18189)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.1602294147014618
    2. '"' → logprob: -2.785229444503784
    3. ''' → logprob: -3.285229444503784
    4. 'bit' → logprob: -4.160229206085205
    5. 'code' → logprob: -4.285229206085205
    6. '0' → logprob: -4.660229206085205
    7. 'char' → logprob: -5.785229206085205
    8. '{
' → logprob: -6.285229206085205
    9. '{' → logprob: -6.910229206085205
    10. '`' → logprob: -7.160229206085205

Token 1359: ':

' (ID: 1402)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.008125623688101768
    2. 'bit' → logprob: -5.6331257820129395
    3. 'char' → logprob: -5.7581257820129395
    4. 'for' → logprob: -7.1331257820129395
    5. '   ' → logprob: -7.7581257820129395
    6. ' bits' → logprob: -10.508125305175781
    7. '#' → logprob: -11.008125305175781
    8. 'chars' → logprob: -11.008125305175781
    9. '```' → logprob: -11.008125305175781
    10. 'code' → logprob: -11.258125305175781

Token 1360: '#' (ID: 2)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.001780852908268571
    2. 'bit' → logprob: -6.626780986785889
    3. 'char' → logprob: -8.37678050994873
    4. 'for' → logprob: -9.50178050994873
    5. '```' → logprob: -9.62678050994873
    6. '#' → logprob: -10.00178050994873
    7. '   ' → logprob: -11.50178050994873
    8. 'code' → logprob: -11.62678050994873
    9. 'chars' → logprob: -12.50178050994873
    10. '``' → logprob: -12.75178050994873

Token 1361: ' The' (ID: 623)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0011174732353538275
    2. 'bit' → logprob: -7.001117706298828
    3. 'char' → logprob: -9.251117706298828
    4. '#' → logprob: -9.876117706298828
    5. '```' → logprob: -10.751117706298828
    6. '   ' → logprob: -11.751117706298828
    7. 'for' → logprob: -12.001117706298828
    8. 'code' → logprob: -12.126117706298828
    9. 'chars' → logprob: -12.501117706298828
    10. ' bits' → logprob: -12.751117706298828

Token 1362: ' problem' (ID: 4792)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.07483313232660294
    2. 'for' → logprob: -2.9498331546783447
    3. 'char' → logprob: -4.324832916259766
    4. 'bit' → logprob: -6.699832916259766
    5. 'i' → logprob: -6.949832916259766
    6. 'b' → logprob: -7.074832916259766
    7. '```' → logprob: -7.449832916259766
    8. ' bits' → logprob: -7.574832916259766
    9. 'if' → logprob: -7.824832916259766
    10. '   ' → logprob: -7.949832916259766

Token 1363: ' does' (ID: 2226)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.00641929404810071
    2. 'for' → logprob: -5.2564191818237305
    3. 'char' → logprob: -7.5064191818237305
    4. '```' → logprob: -8.50641918182373
    5. '   ' → logprob: -8.63141918182373
    6. 'bit' → logprob: -8.75641918182373
    7. ' bits' → logprob: -10.38141918182373
    8. 'chars' → logprob: -11.25641918182373
    9. 'while' → logprob: -11.63141918182373
    10. 'i' → logprob: -11.88141918182373

Token 1364: ' not' (ID: 625)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.5720537304878235
    2. 'for' → logprob: -1.1970536708831787
    3. 'char' → logprob: -2.9470536708831787
    4. 'ch' → logprob: -3.8220536708831787
    5. '   ' → logprob: -3.9470536708831787
    6. '```' → logprob: -4.322053909301758
    7. '"' → logprob: -4.697053909301758
    8. '"#' → logprob: -6.447053909301758
    9. 'bit' → logprob: -6.572053909301758
    10. '`' → logprob: -6.572053909301758

Token 1365: ' give' (ID: 3644)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.2135828286409378
    2. 'for' → logprob: -1.8385828733444214
    3. 'char' → logprob: -4.463582992553711
    4. '```' → logprob: -5.088582992553711
    5. 'bit' → logprob: -6.213582992553711
    6. '   ' → logprob: -6.213582992553711
    7. 'code' → logprob: -6.713582992553711
    8. '#' → logprob: -6.838582992553711
    9. '"' → logprob: -6.838582992553711
    10. 'ch' → logprob: -6.963582992553711

Token 1366: ' this' (ID: 495)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.24084961414337158
    2. 'for' → logprob: -1.8658496141433716
    3. 'char' → logprob: -4.240849494934082
    4. '```' → logprob: -4.240849494934082
    5. 'bit' → logprob: -4.990849494934082
    6. '   ' → logprob: -5.240849494934082
    7. '"' → logprob: -5.990849494934082
    8. ' for' → logprob: -6.490849494934082
    9. ' bits' → logprob: -6.490849494934082
    10. '`' → logprob: -6.490849494934082

Token 1367: ' mapping' (ID: 22573)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.02868223935365677
    2. 'for' → logprob: -3.653682231903076
    3. 'char' → logprob: -7.028682231903076
    4. 'bit' → logprob: -7.403682231903076
    5. '   ' → logprob: -7.778682231903076
    6. 'code' → logprob: -8.903682708740234
    7. '#' → logprob: -8.903682708740234
    8. ' bits' → logprob: -9.778682708740234
    9. 'chars' → logprob: -10.778682708740234
    10. 'i' → logprob: -10.903682708740234

Token 1368: ' explicitly' (ID: 45615)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0015515214763581753
    2. 'for' → logprob: -7.376551628112793
    3. 'bit' → logprob: -7.626551628112793
    4. '#' → logprob: -8.876551628112793
    5. 'char' → logprob: -9.001551628112793
    6. '   ' → logprob: -9.376551628112793
    7. ' bits' → logprob: -10.751551628112793
    8. 'code' → logprob: -11.001551628112793
    9. '```' → logprob: -11.251551628112793
    10. 'decoded' → logprob: -11.376551628112793

Token 1369: ';' (ID: 26)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.19826847314834595
    2. '   ' → logprob: -2.323268413543701
    3. 'for' → logprob: -2.698268413543701
    4. 'char' → logprob: -4.698268413543701
    5. 'bit' → logprob: -6.198268413543701
    6. '       ' → logprob: -7.073268413543701
    7. 'i' → logprob: -7.323268413543701
    8. 'ch' → logprob: -7.698268413543701
    9. '#' → logprob: -7.698268413543701
    10. ' for' → logprob: -8.82326889038086

Token 1370: ' but' (ID: 889)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.013110584579408169
    2. 'bit' → logprob: -4.638110637664795
    3. 'char' → logprob: -6.263110637664795
    4. 'for' → logprob: -7.388110637664795
    5. '#' → logprob: -7.888110637664795
    6. '   ' → logprob: -9.013110160827637
    7. 'code' → logprob: -9.013110160827637
    8. 'input' → logprob: -9.638110160827637
    9. 'decode' → logprob: -10.638110160827637
    10. 'chars' → logprob: -10.763110160827637

Token 1371: ' the' (ID: 290)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0010910429991781712
    2. 'for' → logprob: -7.501091003417969
    3. 'bit' → logprob: -7.751091003417969
    4. 'char' → logprob: -10.001091003417969
    5. '```' → logprob: -11.126091003417969
    6. 'code' → logprob: -11.751091003417969
    7. '#' → logprob: -11.751091003417969
    8. '   ' → logprob: -12.001091003417969
    9. ' bits' → logprob: -12.251091003417969
    10. 'i' → logprob: -12.251091003417969

Token 1372: ' sample' (ID: 10176)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.025671212002635002
    2. 'for' → logprob: -4.525671005249023
    3. 'char' → logprob: -5.150671005249023
    4. 'bit' → logprob: -5.400671005249023
    5. '#' → logprob: -7.275671005249023
    6. ' bits' → logprob: -7.525671005249023
    7. 'i' → logprob: -7.650671005249023
    8. 'code' → logprob: -8.025671005249023
    9. 'input' → logprob: -8.150671005249023
    10. 'decoded' → logprob: -8.400671005249023

Token 1373: ' input' (ID: 3422)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.01526334136724472
    2. 'for' → logprob: -4.890263557434082
    3. 'bit' → logprob: -5.265263557434082
    4. 'char' → logprob: -6.515263557434082
    5. '   ' → logprob: -8.640263557434082
    6. '#' → logprob: -8.890263557434082
    7. 'decoded' → logprob: -8.890263557434082
    8. ' bits' → logprob: -9.265263557434082
    9. 'code' → logprob: -9.390263557434082
    10. 'b' → logprob: -9.890263557434082

Token 1374: ' "?' (ID: 72488)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.012577111832797527
    2. 'for' → logprob: -5.637577056884766
    3. '   ' → logprob: -6.012577056884766
    4. 'bit' → logprob: -6.137577056884766
    5. 'char' → logprob: -6.137577056884766
    6. ' bits' → logprob: -7.262577056884766
    7. 'code' → logprob: -8.387577056884766
    8. 'b' → logprob: -8.387577056884766
    9. '#' → logprob: -8.887577056884766
    10. 'i' → logprob: -8.887577056884766

Token 1375: 'D' (ID: 35)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -1.0934898853302002
    2. '=' → logprob: -1.8434898853302002
    3. 'for' → logprob: -2.2184898853302
    4. '"' → logprob: -2.2184898853302
    5. ''' → logprob: -2.3434898853302
    6. 'bits' → logprob: -2.7184898853302
    7. '`' → logprob: -4.593489646911621
    8. '```' → logprob: -4.718489646911621
    9. '_' → logprob: -4.968489646911621
    10. ':' → logprob: -5.093489646911621

Token 1376: '-C' (ID: 10050)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.11284806579351425
    2. '_bits' → logprob: -2.3628480434417725
    3. 'bit' → logprob: -5.362848281860352
    4. 'char' → logprob: -5.487848281860352
    5. 'for' → logprob: -7.237848281860352
    6. '```' → logprob: -7.737848281860352
    7. '=' → logprob: -7.862848281860352
    8. ' bits' → logprob: -8.112848281860352
    9. 'code' → logprob: -8.487848281860352
    10. 'chars' → logprob: -8.612848281860352

Token 1377: ''' (ID: 6)
  Prédit: '''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.22666515409946442
    2. '"' → logprob: -1.9766651391983032
    3. ''"' → logprob: -3.7266652584075928
    4. '':' → logprob: -4.226665019989014
    5. '":' → logprob: -5.101665019989014
    6. ''A' → logprob: -6.101665019989014
    7. '=' → logprob: -6.101665019989014
    8. ''=' → logprob: -6.476665019989014
    9. ''"
' → logprob: -6.601665019989014
    10. '```' → logprob: -6.726665019989014

Token 1378: 'K' (ID: 42)
  Prédit: '_bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_bits' → logprob: -1.246019959449768
    2. 'bits' → logprob: -1.371019959449768
    3. '"' → logprob: -2.3710198402404785
    4. 'char' → logprob: -2.4960198402404785
    5. '`' → logprob: -2.7460198402404785
    6. '```' → logprob: -2.8710198402404785
    7. '")' → logprob: -3.4960198402404785
    8. ')' → logprob: -3.4960198402404785
    9. 'for' → logprob: -3.9960198402404785
    10. '=' → logprob: -4.3710198402404785

Token 1379: 'OP' (ID: 4164)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.7663137912750244
    2. '"' → logprob: -1.8913137912750244
    3. ')' → logprob: -2.1413137912750244
    4. '")' → logprob: -2.6413137912750244
    5. 'K' → logprob: -3.2663137912750244
    6. '')' → logprob: -3.3913137912750244
    7. '=' → logprob: -3.5163137912750244
    8. ':' → logprob: -4.141313552856445
    9. 'A' → logprob: -4.516313552856445
    10. ''A' → logprob: -4.516313552856445

Token 1380: 'UA' (ID: 26004)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -1.2133429050445557
    2. 'U' → logprob: -1.7133429050445557
    3. 'A' → logprob: -1.7133429050445557
    4. ''' → logprob: -1.9633429050445557
    5. '")' → logprob: -3.4633429050445557
    6. ')' → logprob: -3.7133429050445557
    7. 'UA' → logprob: -3.7133429050445557
    8. '=' → logprob: -3.9633429050445557
    9. ''A' → logprob: -4.463342666625977
    10. '">' → logprob: -4.588342666625977

Token 1381: '"
' (ID: 1092)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0038449708372354507
    2. 'bit' → logprob: -6.003844738006592
    3. 'for' → logprob: -7.878844738006592
    4. 'char' → logprob: -8.00384521484375
    5. '   ' → logprob: -8.12884521484375
    6. ' bits' → logprob: -9.50384521484375
    7. 'code' → logprob: -9.50384521484375
    8. 'decoded' → logprob: -9.62884521484375
    9. '#' → logprob: -10.00384521484375
    10. 'chars' → logprob: -11.00384521484375

Token 1382: '#' (ID: 2)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0004223323194310069
    2. 'bit' → logprob: -8.125422477722168
    3. 'for' → logprob: -9.875422477722168
    4. '```' → logprob: -10.500422477722168
    5. '   ' → logprob: -10.875422477722168
    6. 'char' → logprob: -11.875422477722168
    7. ' bits' → logprob: -11.875422477722168
    8. 'decoded' → logprob: -12.000422477722168
    9. '#' → logprob: -13.250422477722168
    10. 'code' → logprob: -13.500422477722168

Token 1383: ' maps' (ID: 24267)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.00333087588660419
    2. 'bit' → logprob: -5.753330707550049
    3. 'char' → logprob: -9.628331184387207
    4. 'for' → logprob: -10.753331184387207
    5. '#' → logprob: -11.128331184387207
    6. 'decoded' → logprob: -11.128331184387207
    7. 'code' → logprob: -11.503331184387207
    8. '   ' → logprob: -12.003331184387207
    9. 'chars' → logprob: -12.128331184387207
    10. ' bits' → logprob: -12.628331184387207

Token 1384: ' to' (ID: 316)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.07621050626039505
    2. 'for' → logprob: -3.4512104988098145
    3. 'char' → logprob: -4.5762104988098145
    4. '":' → logprob: -5.0762104988098145
    5. '"' → logprob: -5.2012104988098145
    6. ':' → logprob: -5.8262104988098145
    7. 'bit' → logprob: -6.2012104988098145
    8. '   ' → logprob: -6.4512104988098145
    9. '```' → logprob: -6.4512104988098145
    10. '`' → logprob: -6.7012104988098145

Token 1385: ' output' (ID: 4733)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.002522745868191123
    2. 'bit' → logprob: -6.127522945404053
    3. 'decoded' → logprob: -9.002522468566895
    4. '```' → logprob: -9.002522468566895
    5. 'char' → logprob: -11.002522468566895
    6. '#' → logprob: -11.127522468566895
    7. ' bits' → logprob: -11.377522468566895
    8. '``' → logprob: -11.752522468566895
    9. 'code' → logprob: -11.877522468566895
    10. '
' → logprob: -12.252522468566895

Token 1386: ' "' (ID: 392)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0002907718007918447
    2. 'bit' → logprob: -8.500290870666504
    3. 'for' → logprob: -9.750290870666504
    4. '```' → logprob: -11.500290870666504
    5. ' bits' → logprob: -12.125290870666504
    6. '   ' → logprob: -12.125290870666504
    7. 'decoded' → logprob: -12.875290870666504
    8. 'code' → logprob: -13.875290870666504
    9. 'char' → logprob: -14.000290870666504
    10. '#' → logprob: -14.125290870666504

Token 1387: 'P' (ID: 47)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.00975774321705103
    2. '"' → logprob: -6.2597575187683105
    3. '""' → logprob: -6.3847575187683105
    4. 'P' → logprob: -6.3847575187683105
    5. 'bit' → logprob: -6.6347575187683105
    6. '"P' → logprob: -6.6347575187683105
    7. 'decoded' → logprob: -7.0097575187683105
    8. '```' → logprob: -8.384757995605469
    9. '"
' → logprob: -8.634757995605469
    10. '"""
' → logprob: -9.384757995605469

Token 1388: 'ETER' (ID: 39956)
  Prédit: '_bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_bits' → logprob: -1.2736501693725586
    2. '=' → logprob: -1.6486501693725586
    3. 'bits' → logprob: -2.1486501693725586
    4. ' =' → logprob: -2.6486501693725586
    5. 'for' → logprob: -2.8986501693725586
    6. '"' → logprob: -3.1486501693725586
    7. '_to' → logprob: -3.1486501693725586
    8. ')' → logprob: -3.3986501693725586
    9. '```' → logprob: -3.3986501693725586
    10. '"]' → logprob: -4.648650169372559

Token 1389: ' POT' (ID: 100071)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.01979464292526245
    2. ' bits' → logprob: -5.394794464111328
    3. '_bits' → logprob: -5.519794464111328
    4. ':
' → logprob: -5.894794464111328
    5. 'bit' → logprob: -6.019794464111328
    6. 'for' → logprob: -6.269794464111328
    7. 'char' → logprob: -6.394794464111328
    8. ':' → logprob: -7.769794464111328
    9. '```' → logprob: -8.269794464111328
    10. '   ' → logprob: -8.269794464111328

Token 1390: 'TER' (ID: 6147)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.8839661478996277
    2. 's' → logprob: -1.8839662075042725
    3. ':
' → logprob: -2.8839662075042725
    4. '=' → logprob: -2.8839662075042725
    5. '_bits' → logprob: -3.2589662075042725
    6. 'r' → logprob: -3.2589662075042725
    7. '"' → logprob: -3.3839662075042725
    8. ' =' → logprob: -4.008965969085693
    9. ' bits' → logprob: -4.133965969085693
    10. 'i' → logprob: -4.133965969085693

Token 1391: '"

' (ID: 2678)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.00844318326562643
    2. 'bit' → logprob: -4.883443355560303
    3. 'char' → logprob: -8.008442878723145
    4. '#' → logprob: -8.383442878723145
    5. '   ' → logprob: -9.008442878723145
    6. 'decoded' → logprob: -9.633442878723145
    7. 'code' → logprob: -10.883442878723145
    8. 'input' → logprob: -11.008442878723145
    9. 'chars' → logprob: -11.008442878723145
    10. ' bits' → logprob: -11.758442878723145

Token 1392: '#' (ID: 2)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0004207826859783381
    2. '```' → logprob: -8.375420570373535
    3. 'bit' → logprob: -9.625420570373535
    4. 'for' → logprob: -9.625420570373535
    5. '   ' → logprob: -10.500420570373535
    6. 'decoded' → logprob: -11.250420570373535
    7. ' bits' → logprob: -12.125420570373535
    8. 'char' → logprob: -12.750420570373535
    9. 'code' → logprob: -13.250420570373535
    10. '``' → logprob: -13.375420570373535

Token 1393: ' So' (ID: 2632)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.004777449648827314
    2. 'bit' → logprob: -5.504777431488037
    3. '   ' → logprob: -8.129777908325195
    4. 'decoded' → logprob: -8.754777908325195
    5. '#' → logprob: -8.879777908325195
    6. 'char' → logprob: -9.754777908325195
    7. 'for' → logprob: -11.504777908325195
    8. 'code' → logprob: -11.879777908325195
    9. 'decode' → logprob: -12.004777908325195
    10. '```' → logprob: -12.379777908325195

Token 1394: ' probably' (ID: 7038)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.001188445370644331
    2. 'bit' → logprob: -7.001188278198242
    3. 'char' → logprob: -9.126188278198242
    4. 'for' → logprob: -10.001188278198242
    5. 'decoded' → logprob: -10.001188278198242
    6. '```' → logprob: -10.626188278198242
    7. 'code' → logprob: -11.251188278198242
    8. '#' → logprob: -11.251188278198242
    9. 'input' → logprob: -11.876188278198242
    10. 'chars' → logprob: -12.001188278198242

Token 1395: ',' (ID: 11)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0185717586427927
    2. 'bit' → logprob: -4.143571853637695
    3. 'char' → logprob: -6.143571853637695
    4. '#' → logprob: -9.143571853637695
    5. 'input' → logprob: -9.143571853637695
    6. 'code' → logprob: -9.393571853637695
    7. 'chars' → logprob: -10.518571853637695
    8. 'decoded' → logprob: -11.143571853637695
    9. 'mapping' → logprob: -11.768571853637695
    10. '_bits' → logprob: -12.018571853637695

Token 1396: ' each' (ID: 2454)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0029599887784570456
    2. 'for' → logprob: -6.502960205078125
    3. 'bit' → logprob: -6.877960205078125
    4. 'char' → logprob: -8.502960205078125
    5. '   ' → logprob: -10.002960205078125
    6. 'decoded' → logprob: -10.127960205078125
    7. '#' → logprob: -10.252960205078125
    8. 'code' → logprob: -10.502960205078125
    9. 'chars' → logprob: -11.127960205078125
    10. ' bits' → logprob: -11.627960205078125

Token 1397: ' input' (ID: 3422)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.43922948837280273
    2. 'char' → logprob: -1.6892294883728027
    3. 'for' → logprob: -2.8142294883728027
    4. 'c' → logprob: -2.8142294883728027
    5. 'ch' → logprob: -3.6892294883728027
    6. '"' → logprob: -5.564229488372803
    7. 'i' → logprob: -5.689229488372803
    8. 'line' → logprob: -6.189229488372803
    9. '   ' → logprob: -6.314229488372803
    10. 'b' → logprob: -6.314229488372803

Token 1398: ' letter' (ID: 10263)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.7500334978103638
    2. 'char' → logprob: -1.8750334978103638
    3. 'bits' → logprob: -2.500033378601074
    4. '"' → logprob: -2.875033378601074
    5. '+=' → logprob: -3.250033378601074
    6. '_' → logprob: -3.375033378601074
    7. '[' → logprob: -3.625033378601074
    8. 'for' → logprob: -3.750033378601074
    9. '_bits' → logprob: -3.750033378601074
    10. '_char' → logprob: -3.875033378601074

Token 1399: ' corresponds' (ID: 66938)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.8490691781044006
    2. 'bits' → logprob: -2.099069118499756
    3. '_bits' → logprob: -2.099069118499756
    4. 'char' → logprob: -2.474069118499756
    5. 'for' → logprob: -2.974069118499756
    6. '```' → logprob: -3.349069118499756
    7. '_char' → logprob: -3.724069118499756
    8. ' =' → logprob: -3.724069118499756
    9. ':' → logprob: -4.349069118499756
    10. '"' → logprob: -4.349069118499756

Token 1400: ' to' (ID: 316)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -1.1297297477722168
    2. 'to' → logprob: -1.1297297477722168
    3. '"' → logprob: -1.8797297477722168
    4. '```' → logprob: -2.504729747772217
    5. ''' → logprob: -3.004729747772217
    6. ' to' → logprob: -4.129729747772217
    7. ':' → logprob: -4.129729747772217
    8. '`' → logprob: -4.504729747772217
    9. 'char' → logprob: -5.379729747772217
    10. ')' → logprob: -5.504729747772217

Token 1401: ' a' (ID: 261)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.3596411347389221
    2. ''' → logprob: -2.2346410751342773
    3. 'char' → logprob: -2.4846410751342773
    4. 'bit' → logprob: -3.4846410751342773
    5. '"' → logprob: -3.8596410751342773
    6. 'code' → logprob: -3.9846410751342773
    7. '`' → logprob: -5.359641075134277
    8. 'ch' → logprob: -5.359641075134277
    9. ''b' → logprob: -5.859641075134277
    10. '{
' → logprob: -6.109641075134277

Token 1402: ' ' (ID: 220)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.28902769088745117
    2. 'char' → logprob: -2.539027690887451
    3. '`' → logprob: -3.414027690887451
    4. 'bit' → logprob: -3.539027690887451
    5. 'code' → logprob: -3.539027690887451
    6. '"' → logprob: -3.914027690887451
    7. 'for' → logprob: -4.039027690887451
    8. '```' → logprob: -4.289027690887451
    9. ''' → logprob: -5.164027690887451
    10. '{
' → logprob: -5.539027690887451

Token 1403: '0' (ID: 15)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -1.0590543746948242
    2. 'char' → logprob: -1.4340543746948242
    3. '`' → logprob: -1.8090543746948242
    4. 'bit' → logprob: -2.934054374694824
    5. 'code' → logprob: -3.059054374694824
    6. ''' → logprob: -3.184054374694824
    7. '```' → logprob: -3.434054374694824
    8. '"' → logprob: -4.184054374694824
    9. '#' → logprob: -4.434054374694824
    10. '{
' → logprob: -4.684054374694824

Token 1404: ' or' (ID: 503)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.8479210138320923
    2. ''' → logprob: -1.2229210138320923
    3. '```' → logprob: -3.3479208946228027
    4. '<|end|>' → logprob: -3.3479208946228027
    5. '`' → logprob: -3.5979208946228027
    6. '#' → logprob: -3.7229208946228027
    7. '"' → logprob: -3.9729208946228027
    8. ' or' → logprob: -3.9729208946228027
    9. 'or' → logprob: -3.9729208946228027
    10. '''' → logprob: -4.222920894622803

Token 1405: ' ' (ID: 220)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0202171690762043
    2. '`' → logprob: -4.770216941833496
    3. '"' → logprob: -5.395216941833496
    4. '```' → logprob: -5.645216941833496
    5. 'char' → logprob: -7.145216941833496
    6. 'space' → logprob: -7.895216941833496
    7. ''''' → logprob: -8.020216941833496
    8. 'bit' → logprob: -8.395216941833496
    9. ''s' → logprob: -8.770216941833496
    10. ''-' → logprob: -8.770216941833496

Token 1406: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.1980157196521759
    2. ''' → logprob: -1.8230156898498535
    3. '`' → logprob: -4.4480156898498535
    4. '"' → logprob: -6.3230156898498535
    5. '```' → logprob: -6.3230156898498535
    6. 'char' → logprob: -7.0730156898498535
    7. ''''' → logprob: -7.5730156898498535
    8. '0' → logprob: -7.8230156898498535
    9. 'bits' → logprob: -8.073016166687012
    10. 'b' → logprob: -8.823016166687012

Token 1407: ':

' (ID: 1402)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.013668815605342388
    2. 'bit' → logprob: -5.138669013977051
    3. 'for' → logprob: -5.638669013977051
    4. 'char' → logprob: -6.513669013977051
    5. '   ' → logprob: -7.013669013977051
    6. 'b' → logprob: -7.013669013977051
    7. ' bits' → logprob: -8.63866901397705
    8. '#' → logprob: -9.26366901397705
    9. 'i' → logprob: -9.38866901397705
    10. 'c' → logprob: -9.51366901397705

Token 1408: '#' (ID: 2)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.026184407994151115
    2. 'bit' → logprob: -4.151184558868408
    3. 'for' → logprob: -5.026184558868408
    4. 'char' → logprob: -6.526184558868408
    5. '```' → logprob: -6.651184558868408
    6. 'decoded' → logprob: -9.02618408203125
    7. '#' → logprob: -9.15118408203125
    8. 'b' → logprob: -9.27618408203125
    9. '``' → logprob: -9.52618408203125
    10. '   ' → logprob: -9.65118408203125

Token 1409: ' He' (ID: 1679)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.006936421152204275
    2. 'bit' → logprob: -5.506936550140381
    3. 'for' → logprob: -7.006936550140381
    4. 'char' → logprob: -7.006936550140381
    5. 'b' → logprob: -7.256936550140381
    6. '   ' → logprob: -9.756936073303223
    7. '```' → logprob: -9.756936073303223
    8. 'i' → logprob: -10.256936073303223
    9. 'code' → logprob: -10.381936073303223
    10. '#' → logprob: -10.506936073303223

Token 1410: 'uristic' (ID: 92961)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -1.1540852785110474
    2. 'for' → logprob: -1.2790852785110474
    3. 'char' → logprob: -2.654085159301758
    4. ':' → logprob: -3.029085159301758
    5. '       ' → logprob: -3.404085159301758
    6. '`' → logprob: -3.529085159301758
    7. 'c' → logprob: -3.529085159301758
    8. '```' → logprob: -3.654085159301758
    9. '   ' → logprob: -3.779085159301758
    10. 'i' → logprob: -3.779085159301758

Token 1411: ' based' (ID: 4122)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.02890808694064617
    2. 'for' → logprob: -3.6539080142974854
    3. 'b' → logprob: -6.4039082527160645
    4. 'bit' → logprob: -7.6539082527160645
    5. '```' → logprob: -8.778907775878906
    6. 'char' → logprob: -9.028907775878906
    7. '   ' → logprob: -9.403907775878906
    8. ' bits' → logprob: -10.528907775878906
    9. 'c' → logprob: -10.778907775878906
    10. 'i' → logprob: -11.403907775878906

Token 1412: ' on' (ID: 402)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.021370623260736465
    2. 'for' → logprob: -4.5213704109191895
    3. 'bit' → logprob: -5.2713704109191895
    4. 'b' → logprob: -6.6463704109191895
    5. 'char' → logprob: -7.0213704109191895
    6. '   ' → logprob: -7.2713704109191895
    7. '```' → logprob: -7.3963704109191895
    8. ' bits' → logprob: -8.396370887756348
    9. 'i' → logprob: -8.521370887756348
    10. 'code' → logprob: -8.771370887756348

Token 1413: ' the' (ID: 290)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.037504374980926514
    2. 'bit' → logprob: -4.412504196166992
    3. 'for' → logprob: -4.537504196166992
    4. '```' → logprob: -5.287504196166992
    5. 'char' → logprob: -5.662504196166992
    6. 'decoded' → logprob: -6.537504196166992
    7. '"' → logprob: -7.287504196166992
    8. '`' → logprob: -7.662504196166992
    9. 'b' → logprob: -7.662504196166992
    10. 'code' → logprob: -8.162504196166992

Token 1414: ' sample' (ID: 10176)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.08242441713809967
    2. 'for' → logprob: -2.7074244022369385
    3. 'bit' → logprob: -5.707424640655518
    4. 'b' → logprob: -5.832424640655518
    5. 'char' → logprob: -6.082424640655518
    6. 'i' → logprob: -6.957424640655518
    7. '```' → logprob: -7.957424640655518
    8. ' bits' → logprob: -7.957424640655518
    9. 'decoded' → logprob: -8.08242416381836
    10. '   ' → logprob: -8.20742416381836

Token 1415: ' input' (ID: 3422)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0337141677737236
    2. 'bit' → logprob: -4.158714294433594
    3. 'char' → logprob: -4.533714294433594
    4. 'for' → logprob: -5.283714294433594
    5. '   ' → logprob: -7.533714294433594
    6. 'decoded' → logprob: -8.408714294433594
    7. 'input' → logprob: -8.658714294433594
    8. 'ch' → logprob: -8.908714294433594
    9. 'decode' → logprob: -9.283714294433594
    10. 'next' → logprob: -9.408714294433594

Token 1416: ' and' (ID: 326)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0033383599948138
    2. 'for' → logprob: -6.62833833694458
    3. 'bit' → logprob: -7.00333833694458
    4. 'b' → logprob: -7.75333833694458
    5. 'char' → logprob: -8.253338813781738
    6. '```' → logprob: -8.628338813781738
    7. '   ' → logprob: -9.628338813781738
    8. ' bits' → logprob: -9.753338813781738
    9. 'i' → logprob: -10.628338813781738
    10. 'c' → logprob: -10.878338813781738

Token 1417: ' output' (ID: 4733)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.028674358502030373
    2. 'for' → logprob: -4.403674125671387
    3. 'bit' → logprob: -4.403674125671387
    4. 'i' → logprob: -6.778674125671387
    5. 'char' → logprob: -7.528674125671387
    6. 'b' → logprob: -7.653674125671387
    7. 'next' → logprob: -8.278674125671387
    8. 'decoded' → logprob: -8.278674125671387
    9. '```' → logprob: -8.403674125671387
    10. 'c' → logprob: -8.903674125671387

Token 1418: ':
' (ID: 734)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.032285355031490326
    2. 'bit' → logprob: -3.532285451889038
    3. 'char' → logprob: -6.532285213470459
    4. 'for' → logprob: -7.907285213470459
    5. '#' → logprob: -8.157285690307617
    6. '   ' → logprob: -9.407285690307617
    7. 'decoded' → logprob: -9.532285690307617
    8. 'input' → logprob: -9.907285690307617
    9. 'code' → logprob: -10.157285690307617
    10. 'b' → logprob: -10.282285690307617

Token 1419: '#' (ID: 2)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.022780297324061394
    2. 'for' → logprob: -3.897780179977417
    3. 'bit' → logprob: -6.647780418395996
    4. 'char' → logprob: -8.147780418395996
    5. 'decoded' → logprob: -8.772780418395996
    6. '```' → logprob: -9.147780418395996
    7. '   ' → logprob: -9.272780418395996
    8. 'b' → logprob: -9.522780418395996
    9. 'i' → logprob: -9.647780418395996
    10. 'code' → logprob: -10.772780418395996

Token 1420: ' Let's' (ID: 41021)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.008454885333776474
    2. 'bit' → logprob: -5.3834547996521
    3. 'for' → logprob: -5.7584547996521
    4. 'char' → logprob: -8.383455276489258
    5. '   ' → logprob: -9.258455276489258
    6. '```' → logprob: -9.383455276489258
    7. '#' → logprob: -9.883455276489258
    8. 'b' → logprob: -10.133455276489258
    9. 'i' → logprob: -10.133455276489258
    10. 'decoded' → logprob: -10.883455276489258

Token 1421: ' convert' (ID: 8452)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.01931312307715416
    2. 'char' → logprob: -5.144313335418701
    3. 'for' → logprob: -5.269313335418701
    4. 'b' → logprob: -5.894313335418701
    5. 'bit' → logprob: -6.519313335418701
    6. '`' → logprob: -7.519313335418701
    7. '```' → logprob: -7.644313335418701
    8. 'i' → logprob: -7.769313335418701
    9. 'c' → logprob: -7.769313335418701
    10. ' bits' → logprob: -8.019312858581543

Token 1422: ' each' (ID: 2454)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.07065236568450928
    2. 'for' → logprob: -3.320652484893799
    3. 'bit' → logprob: -4.195652484893799
    4. 'char' → logprob: -4.695652484893799
    5. '   ' → logprob: -6.320652484893799
    6. 'decoded' → logprob: -6.945652484893799
    7. 'b' → logprob: -7.070652484893799
    8. '#' → logprob: -7.320652484893799
    9. '"' → logprob: -7.695652484893799
    10. '```' → logprob: -7.695652484893799

Token 1423: ' input' (ID: 3422)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -1.0986961126327515
    2. 'bits' → logprob: -1.0986961126327515
    3. '"' → logprob: -2.473696231842041
    4. '`' → logprob: -2.848696231842041
    5. 'c' → logprob: -3.223696231842041
    6. 'b' → logprob: -3.848696231842041
    7. ''' → logprob: -3.848696231842041
    8. 'ch' → logprob: -3.848696231842041
    9. '```' → logprob: -4.348696231842041
    10. 'line' → logprob: -4.598696231842041

Token 1424: ' character' (ID: 5855)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.1618860810995102
    2. 'for' → logprob: -2.536885976791382
    3. 'char' → logprob: -3.536885976791382
    4. 'b' → logprob: -4.911886215209961
    5. ':' → logprob: -5.161886215209961
    6. '"' → logprob: -5.536886215209961
    7. 'c' → logprob: -5.786886215209961
    8. '   ' → logprob: -5.911886215209961
    9. 'bit' → logprob: -6.036886215209961
    10. '`' → logprob: -6.161886215209961

Token 1425: ' to' (ID: 316)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.04718933254480362
    2. 'for' → logprob: -3.297189235687256
    3. 'char' → logprob: -5.922189235687256
    4. 'bit' → logprob: -6.172189235687256
    5. '   ' → logprob: -6.422189235687256
    6. '```' → logprob: -7.547189235687256
    7. 'decoded' → logprob: -7.922189235687256
    8. 'b' → logprob: -8.172189712524414
    9. ' bits' → logprob: -8.172189712524414
    10. ' for' → logprob: -8.672189712524414

Token 1426: ' a' (ID: 261)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.7309325337409973
    2. ''' → logprob: -1.4809324741363525
    3. 'bits' → logprob: -2.2309324741363525
    4. '{' → logprob: -2.7309324741363525
    5. '{
' → logprob: -3.3559324741363525
    6. '```' → logprob: -4.105932712554932
    7. '`' → logprob: -4.230932712554932
    8. '"' → logprob: -4.230932712554932
    9. 'code' → logprob: -4.355932712554932
    10. '{'' → logprob: -5.105932712554932

Token 1427: ' bit' (ID: 3546)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.25516679883003235
    2. '"' → logprob: -2.50516676902771
    3. '{' → logprob: -2.63016676902771
    4. '`' → logprob: -3.63016676902771
    5. '0' → logprob: -4.005167007446289
    6. '{
' → logprob: -4.880167007446289
    7. '1' → logprob: -5.130167007446289
    8. 'bits' → logprob: -5.255167007446289
    9. 'bit' → logprob: -6.005167007446289
    10. '```' → logprob: -6.380167007446289

Token 1428: ':

' (ID: 1402)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.02304537035524845
    2. 'bit' → logprob: -4.148045539855957
    3. 'for' → logprob: -5.273045539855957
    4. 'b' → logprob: -7.148045539855957
    5. 'char' → logprob: -7.898045539855957
    6. '   ' → logprob: -8.273045539855957
    7. '```' → logprob: -9.273045539855957
    8. 'decoded' → logprob: -9.898045539855957
    9. ' bits' → logprob: -10.148045539855957
    10. 'code' → logprob: -10.273045539855957

Token 1429: '#' (ID: 2)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.1222919300198555
    2. 'for' → logprob: -2.4972920417785645
    3. 'bit' → logprob: -3.6222920417785645
    4. 'char' → logprob: -5.4972920417785645
    5. 'b' → logprob: -6.7472920417785645
    6. 'ch' → logprob: -8.997291564941406
    7. '```' → logprob: -8.997291564941406
    8. '   ' → logprob: -9.497291564941406
    9. 'next' → logprob: -9.497291564941406
    10. 'c' → logprob: -9.497291564941406

Token 1430: ' Let's' (ID: 41021)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.3538322150707245
    2. 'bit' → logprob: -1.4788322448730469
    3. 'char' → logprob: -2.728832244873047
    4. 'for' → logprob: -6.353832244873047
    5. 'b' → logprob: -6.978832244873047
    6. 'mapping' → logprob: -7.228832244873047
    7. '```' → logprob: -8.228832244873047
    8. 'chars' → logprob: -8.478832244873047
    9. 'input' → logprob: -9.103832244873047
    10. '_bits' → logprob: -9.103832244873047

Token 1431: ' map' (ID: 4014)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.056091345846652985
    2. 'for' → logprob: -3.80609130859375
    3. 'char' → logprob: -4.30609130859375
    4. 'bit' → logprob: -4.43109130859375
    5. 'b' → logprob: -6.55609130859375
    6. '```' → logprob: -6.80609130859375
    7. '#' → logprob: -7.43109130859375
    8. '`' → logprob: -7.68109130859375
    9. ' bits' → logprob: -7.80609130859375
    10. '   ' → logprob: -8.05609130859375

Token 1432: ' all' (ID: 722)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.6341893076896667
    2. 'bits' → logprob: -1.2591893672943115
    3. 'bit' → logprob: -2.5091893672943115
    4. '{
' → logprob: -3.2591893672943115
    5. '{' → logprob: -3.5091893672943115
    6. '{'' → logprob: -4.509189128875732
    7. 'input' → logprob: -5.134189128875732
    8. ''' → logprob: -5.634189128875732
    9. 'chars' → logprob: -6.009189128875732
    10. '#' → logprob: -6.384189128875732

Token 1433: ' letters' (ID: 18151)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.34284090995788574
    2. 'char' → logprob: -1.9678409099578857
    3. 'for' → logprob: -2.7178409099578857
    4. '"' → logprob: -3.9678409099578857
    5. ''' → logprob: -3.9678409099578857
    6. 'bit' → logprob: -4.217841148376465
    7. '`' → logprob: -5.092841148376465
    8. 'line' → logprob: -5.467841148376465
    9. '```' → logprob: -5.967841148376465
    10. 'ch' → logprob: -6.217841148376465

Token 1434: ' to' (ID: 316)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.16917453706264496
    2. 'for' → logprob: -2.7941744327545166
    3. 'char' → logprob: -3.2941744327545166
    4. 'bit' → logprob: -3.9191744327545166
    5. '   ' → logprob: -4.044174671173096
    6. '```' → logprob: -5.294174671173096
    7. '`' → logprob: -5.669174671173096
    8. '"' → logprob: -6.544174671173096
    9. 'ch' → logprob: -6.544174671173096
    10. '       ' → logprob: -6.794174671173096

Token 1435: ' '' (ID: 461)
  Prédit: '{'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '{' → logprob: -0.7137366533279419
    2. ''' → logprob: -1.088736653327942
    3. '{
' → logprob: -2.3387365341186523
    4. 'char' → logprob: -3.8387365341186523
    5. '`' → logprob: -4.213736534118652
    6. '{'' → logprob: -5.088736534118652
    7. '?' → logprob: -5.213736534118652
    8. ''?' → logprob: -5.463736534118652
    9. '"' → logprob: -5.713736534118652
    10. '```' → logprob: -5.713736534118652

Token 1436: '0' (ID: 15)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.2951188385486603
    2. '0' → logprob: -1.670118808746338
    3. '"' → logprob: -3.170118808746338
    4. '{' → logprob: -4.170118808746338
    5. '1' → logprob: -5.420118808746338
    6. '`' → logprob: -6.670118808746338
    7. '{
' → logprob: -6.670118808746338
    8. '{'' → logprob: -6.795118808746338
    9. '{"' → logprob: -7.420118808746338
    10. '```' → logprob: -8.170119285583496

Token 1437: ''' (ID: 6)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.09758459776639938
    2. 'for' → logprob: -2.9725844860076904
    3. '   ' → logprob: -3.8475844860076904
    4. 'char' → logprob: -5.0975847244262695
    5. '```' → logprob: -5.7225847244262695
    6. '"' → logprob: -5.8475847244262695
    7. 'bit' → logprob: -6.0975847244262695
    8. 'b' → logprob: -7.3475847244262695
    9. '       ' → logprob: -7.4725847244262695
    10. 'ch' → logprob: -7.4725847244262695

Token 1438: ' and' (ID: 326)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.2403745800256729
    2. 'for' → logprob: -2.3653745651245117
    3. '   ' → logprob: -2.9903745651245117
    4. '"' → logprob: -3.8653745651245117
    5. 'bit' → logprob: -4.365374565124512
    6. 'char' → logprob: -4.865374565124512
    7. ''' → logprob: -5.240374565124512
    8. '```' → logprob: -5.365374565124512
    9. '`' → logprob: -5.615374565124512
    10. '       ' → logprob: -5.990374565124512

Token 1439: ' all' (ID: 722)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.04417009651660919
    2. '?' → logprob: -3.5441701412200928
    3. '0' → logprob: -5.794169902801514
    4. ''?' → logprob: -5.919169902801514
    5. '{' → logprob: -6.169169902801514
    6. '`' → logprob: -6.669169902801514
    7. '=' → logprob: -6.794169902801514
    8. '"' → logprob: -6.919169902801514
    9. '```' → logprob: -7.794169902801514
    10. '#' → logprob: -8.294170379638672

Token 1440: ' punctuation' (ID: 107300)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.01069275476038456
    2. '"' → logprob: -5.635692596435547
    3. '0' → logprob: -6.760692596435547
    4. '```' → logprob: -6.885692596435547
    5. '=' → logprob: -7.135692596435547
    6. '#' → logprob: -7.385692596435547
    7. '{' → logprob: -7.510692596435547
    8. '`' → logprob: -7.760692596435547
    9. '?' → logprob: -7.885692596435547
    10. 'A' → logprob: -8.135692596435547

Token 1441: ' to' (ID: 316)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.047934211790561676
    2. 'for' → logprob: -3.1729342937469482
    3. 'bit' → logprob: -6.172934055328369
    4. 'b' → logprob: -6.922934055328369
    5. '   ' → logprob: -6.922934055328369
    6. '```' → logprob: -8.047934532165527
    7. ' bits' → logprob: -8.922934532165527
    8. ' for' → logprob: -9.297934532165527
    9. 'char' → logprob: -9.422934532165527
    10. '`' → logprob: -9.797934532165527

Token 1442: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.05424653738737106
    2. '0' → logprob: -3.304246425628662
    3. '"' → logprob: -5.304246425628662
    4. '```' → logprob: -5.804246425628662
    5. '{' → logprob: -6.429246425628662
    6. 'bits' → logprob: -6.929246425628662
    7. 'ch' → logprob: -7.554246425628662
    8. '`' → logprob: -7.554246425628662
    9. '''' → logprob: -7.679246425628662
    10. 'char' → logprob: -7.804246425628662

Token 1443: '1' (ID: 16)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.08262518048286438
    2. '"' → logprob: -3.082625150680542
    3. '0' → logprob: -3.832625150680542
    4. '`' → logprob: -5.582625389099121
    5. '{' → logprob: -6.582625389099121
    6. '```' → logprob: -6.707625389099121
    7. '1' → logprob: -6.832625389099121
    8. '{
' → logprob: -7.707625389099121
    9. 'bits' → logprob: -8.082625389099121
    10. ''
' → logprob: -8.207625389099121

Token 1444: ''' (ID: 6)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.06282053887844086
    2. 'for' → logprob: -2.9378204345703125
    3. '   ' → logprob: -6.1878204345703125
    4. '```' → logprob: -6.5628204345703125
    5. ' bits' → logprob: -6.6878204345703125
    6. 'bit' → logprob: -6.8128204345703125
    7. ' for' → logprob: -7.3128204345703125
    8. 'b' → logprob: -7.3128204345703125
    9. 'char' → logprob: -7.6878204345703125
    10. '`' → logprob: -9.812820434570312

Token 1445: ' or' (ID: 503)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.049206964671611786
    2. '   ' → logprob: -3.7992069721221924
    3. 'for' → logprob: -3.7992069721221924
    4. 'bit' → logprob: -6.299206733703613
    5. ' bits' → logprob: -7.549206733703613
    6. 'decoded' → logprob: -8.674206733703613
    7. '```' → logprob: -8.799206733703613
    8. 'b' → logprob: -9.174206733703613
    9. 'next' → logprob: -9.299206733703613
    10. 'char' → logprob: -9.549206733703613

Token 1446: ' vice' (ID: 22625)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.058683257550001144
    2. 'for' → logprob: -3.808683156967163
    3. '"' → logprob: -4.058683395385742
    4. 'bit' → logprob: -5.808683395385742
    5. '```' → logprob: -5.808683395385742
    6. 'b' → logprob: -6.058683395385742
    7. '   ' → logprob: -6.183683395385742
    8. ' bits' → logprob: -6.683683395385742
    9. 'char' → logprob: -7.308683395385742
    10. '`' → logprob: -7.308683395385742

Token 1447: ' versa' (ID: 74153)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.006539981812238693
    2. 'for' → logprob: -5.631539821624756
    3. '   ' → logprob: -6.756539821624756
    4. 'bit' → logprob: -6.756539821624756
    5. 'b' → logprob: -8.006540298461914
    6. 'char' → logprob: -9.006540298461914
    7. ' bits' → logprob: -9.881540298461914
    8. '```' → logprob: -10.131540298461914
    9. '#' → logprob: -11.131540298461914
    10. 'code' → logprob: -11.756540298461914

Token 1448: '

' (ID: 279)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.03191802278161049
    2. 'for' → logprob: -3.5319180488586426
    3. 'bit' → logprob: -6.656918048858643
    4. '   ' → logprob: -8.156917572021484
    5. '```' → logprob: -8.531917572021484
    6. 'char' → logprob: -8.906917572021484
    7. ' bits' → logprob: -9.031917572021484
    8. 'decoded' → logprob: -9.906917572021484
    9. ' for' → logprob: -10.156917572021484
    10. 'b' → logprob: -11.281917572021484

Token 1449: '#' (ID: 2)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.11683531105518341
    2. 'for' → logprob: -2.241835355758667
    3. 'bit' → logprob: -6.491835117340088
    4. 'b' → logprob: -7.366835117340088
    5. 'char' → logprob: -7.616835117340088
    6. ' bits' → logprob: -7.866835117340088
    7. '   ' → logprob: -7.991835117340088
    8. ' for' → logprob: -8.241835594177246
    9. '```' → logprob: -8.991835594177246
    10. '#' → logprob: -9.991835594177246

Token 1450: ' Input' (ID: 10090)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.006558817345649004
    2. 'bit' → logprob: -5.131558895111084
    3. 'for' → logprob: -8.506558418273926
    4. 'char' → logprob: -8.756558418273926
    5. 'decoded' → logprob: -8.881558418273926
    6. ' bits' → logprob: -10.006558418273926
    7. '```' → logprob: -10.381558418273926
    8. 'b' → logprob: -11.506558418273926
    9. '   ' → logprob: -11.756558418273926
    10. '#' → logprob: -12.006558418273926

Token 1451: ':' (ID: 25)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.005862547550350428
    2. 'for' → logprob: -6.255862712860107
    3. 'b' → logprob: -6.505862712860107
    4. 'bit' → logprob: -6.755862712860107
    5. ' bits' → logprob: -7.505862712860107
    6. 'char' → logprob: -7.880862712860107
    7. 'c' → logprob: -9.13086223602295
    8. '   ' → logprob: -9.38086223602295
    9. '```' → logprob: -10.25586223602295
    10. ' for' → logprob: -10.63086223602295

Token 1452: ' ?' (ID: 1423)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.005200197454541922
    2. 'bit' → logprob: -5.380200386047363
    3. 'b' → logprob: -8.130200386047363
    4. 'for' → logprob: -9.005200386047363
    5. ' bits' → logprob: -10.255200386047363
    6. 'char' → logprob: -10.380200386047363
    7. '```' → logprob: -10.630200386047363
    8. '"' → logprob: -11.005200386047363
    9. 'decoded' → logprob: -11.130200386047363
    10. '   ' → logprob: -12.130200386047363

Token 1453: ' D' (ID: 415)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.5290985703468323
    2. 'bits' → logprob: -1.5290985107421875
    3. 'char' → logprob: -2.9040985107421875
    4. '"' → logprob: -3.1540985107421875
    5. '':' → logprob: -3.2790985107421875
    6. '`' → logprob: -4.4040985107421875
    7. '":' → logprob: -4.6540985107421875
    8. 'for' → logprob: -4.9040985107421875
    9. 'bit' → logprob: -5.0290985107421875
    10. ':' → logprob: -5.6540985107421875

Token 1454: ' -' (ID: 533)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.9224117994308472
    2. 'char' → logprob: -1.5474117994308472
    3. ''' → logprob: -2.1724119186401367
    4. 'bit' → logprob: -2.9224119186401367
    5. '=' → logprob: -3.4224119186401367
    6. 'for' → logprob: -3.4224119186401367
    7. '`' → logprob: -3.4224119186401367
    8. '"' → logprob: -3.6724119186401367
    9. ' =' → logprob: -4.047411918640137
    10. '```' → logprob: -4.172411918640137

Token 1455: ' C' (ID: 363)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.00555342435836792
    2. 'for' → logprob: -5.505553245544434
    3. 'bit' → logprob: -6.880553245544434
    4. 'char' → logprob: -8.880553245544434
    5. ' bits' → logprob: -9.380553245544434
    6. '   ' → logprob: -9.755553245544434
    7. '```' → logprob: -10.005553245544434
    8. 'b' → logprob: -10.630553245544434
    9. 'decoded' → logprob: -10.755553245544434
    10. 'i' → logprob: -10.755553245544434

Token 1456: ' '' (ID: 461)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.006380564067512751
    2. 'for' → logprob: -5.631380558013916
    3. 'bit' → logprob: -6.256380558013916
    4. 'b' → logprob: -7.381380558013916
    5. '```' → logprob: -9.381381034851074
    6. ' bits' → logprob: -10.006381034851074
    7. 'char' → logprob: -10.381381034851074
    8. '   ' → logprob: -10.881381034851074
    9. '`' → logprob: -11.756381034851074
    10. 'decoded' → logprob: -12.006381034851074

Token 1457: ' K' (ID: 658)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.00402912637218833
    2. 'for' → logprob: -6.004029273986816
    3. '   ' → logprob: -7.004029273986816
    4. 'bit' → logprob: -7.879029273986816
    5. 'char' → logprob: -9.254029273986816
    6. '```' → logprob: -9.629029273986816
    7. 'b' → logprob: -10.754029273986816
    8. ' bits' → logprob: -10.879029273986816
    9. 'code' → logprob: -11.254029273986816
    10. '#' → logprob: -11.254029273986816

Token 1458: ' O' (ID: 532)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0026333266869187355
    2. 'for' → logprob: -6.252633094787598
    3. 'bit' → logprob: -8.252633094787598
    4. '```' → logprob: -8.627633094787598
    5. '   ' → logprob: -8.752633094787598
    6. ' bits' → logprob: -10.127633094787598
    7. 'char' → logprob: -10.877633094787598
    8. 'b' → logprob: -11.127633094787598
    9. '#' → logprob: -12.252633094787598
    10. '
' → logprob: -12.252633094787598

Token 1459: ' P' (ID: 398)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.018284091725945473
    2. 'for' → logprob: -4.393284320831299
    3. 'bit' → logprob: -6.143284320831299
    4. 'char' → logprob: -7.143284320831299
    5. ' bits' → logprob: -7.268284320831299
    6. 'b' → logprob: -7.393284320831299
    7. '```' → logprob: -7.643284320831299
    8. '   ' → logprob: -7.643284320831299
    9. '`' → logprob: -8.76828384399414
    10. ' for' → logprob: -9.26828384399414

Token 1460: ' U' (ID: 601)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.013237874954938889
    2. 'for' → logprob: -5.513237953186035
    3. 'bit' → logprob: -5.763237953186035
    4. '"' → logprob: -6.138237953186035
    5. 'b' → logprob: -6.638237953186035
    6. ' bits' → logprob: -7.263237953186035
    7. '```' → logprob: -7.888237953186035
    8. '   ' → logprob: -8.263237953186035
    9. '`' → logprob: -8.513237953186035
    10. 'char' → logprob: -8.638237953186035

Token 1461: ' A' (ID: 355)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.007672518491744995
    2. 'for' → logprob: -5.632672309875488
    3. 'bit' → logprob: -6.132672309875488
    4. '```' → logprob: -7.257672309875488
    5. 'b' → logprob: -7.882672309875488
    6. '   ' → logprob: -8.382672309875488
    7. 'char' → logprob: -8.757672309875488
    8. ' bits' → logprob: -8.757672309875488
    9. 'decoded' → logprob: -9.632672309875488
    10. '``' → logprob: -9.882672309875488

Token 1462: '
' (ID: 198)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0026862293016165495
    2. 'bit' → logprob: -6.127686023712158
    3. 'decoded' → logprob: -7.877686023712158
    4. 'for' → logprob: -10.127686500549316
    5. '```' → logprob: -10.377686500549316
    6. ' bits' → logprob: -11.252686500549316
    7. 'char' → logprob: -11.377686500549316
    8. '   ' → logprob: -11.502686500549316
    9. 'decode' → logprob: -12.502686500549316
    10. '#' → logprob: -13.377686500549316

Token 1463: '#' (ID: 2)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0017778765177354217
    2. 'bit' → logprob: -6.751777648925781
    3. '```' → logprob: -8.126777648925781
    4. 'for' → logprob: -8.626777648925781
    5. 'decoded' → logprob: -9.876777648925781
    6. 'char' → logprob: -10.626777648925781
    7. ' bits' → logprob: -10.751777648925781
    8. '``' → logprob: -11.376777648925781
    9. 'b' → logprob: -11.876777648925781
    10. '`' → logprob: -12.751777648925781

Token 1464: ' Output' (ID: 18315)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0035432863514870405
    2. 'bit' → logprob: -5.878543376922607
    3. '```' → logprob: -7.628543376922607
    4. 'for' → logprob: -9.25354290008545
    5. 'char' → logprob: -9.87854290008545
    6. '``' → logprob: -10.50354290008545
    7. 'decoded' → logprob: -10.50354290008545
    8. ' bits' → logprob: -11.12854290008545
    9. '`' → logprob: -12.00354290008545
    10. '`
' → logprob: -12.12854290008545

Token 1465: ':' (ID: 25)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0005221736500971019
    2. 'bit' → logprob: -7.875522136688232
    3. 'b' → logprob: -9.75052261352539
    4. ' bits' → logprob: -10.37552261352539
    5. '```' → logprob: -10.75052261352539
    6. 'for' → logprob: -11.25052261352539
    7. 'decoded' → logprob: -12.00052261352539
    8. '`' → logprob: -12.75052261352539
    9. '_bits' → logprob: -13.37552261352539
    10. '"' → logprob: -13.50052261352539

Token 1466: ' P' (ID: 398)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.002244462026283145
    2. 'bit' → logprob: -6.627244472503662
    3. '"' → logprob: -8.377243995666504
    4. '```' → logprob: -8.502243995666504
    5. 'for' → logprob: -8.877243995666504
    6. 'b' → logprob: -9.252243995666504
    7. ' bits' → logprob: -9.502243995666504
    8. 'decoded' → logprob: -9.627243995666504
    9. '   ' → logprob: -11.002243995666504
    10. '`' → logprob: -11.127243995666504

Token 1467: ' E' (ID: 457)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.05923145264387131
    2. 'for' → logprob: -2.9342315196990967
    3. 'b' → logprob: -6.434231281280518
    4. 'bit' → logprob: -6.684231281280518
    5. 'char' → logprob: -7.934231281280518
    6. '   ' → logprob: -8.059231758117676
    7. ' bits' → logprob: -8.184231758117676
    8. ' for' → logprob: -9.184231758117676
    9. '```' → logprob: -9.934231758117676
    10. '"' → logprob: -10.059231758117676

Token 1468: ' T' (ID: 353)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.003097977489233017
    2. 'for' → logprob: -6.003098011016846
    3. '   ' → logprob: -8.503097534179688
    4. 'bit' → logprob: -8.628097534179688
    5. '```' → logprob: -8.628097534179688
    6. 'char' → logprob: -11.003097534179688
    7. ' bits' → logprob: -11.128097534179688
    8. 'b' → logprob: -11.378097534179688
    9. '``' → logprob: -12.503097534179688
    10. '
' → logprob: -13.003097534179688

Token 1469: ' E' (ID: 457)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.022676590830087662
    2. 'for' → logprob: -4.147676467895508
    3. '   ' → logprob: -5.647676467895508
    4. 'bit' → logprob: -6.147676467895508
    5. '```' → logprob: -8.147676467895508
    6. ' bits' → logprob: -8.522676467895508
    7. 'char' → logprob: -8.897676467895508
    8. 'b' → logprob: -9.272676467895508
    9. 'decoded' → logprob: -10.147676467895508
    10. '"' → logprob: -10.397676467895508

Token 1470: ' R' (ID: 460)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.00380387669429183
    2. 'for' → logprob: -6.003803730010986
    3. '   ' → logprob: -6.753803730010986
    4. '```' → logprob: -9.628804206848145
    5. 'bit' → logprob: -9.878804206848145
    6. 'char' → logprob: -11.128804206848145
    7. ' bits' → logprob: -11.878804206848145
    8. '
' → logprob: -12.503804206848145
    9. 'chars' → logprob: -12.753804206848145
    10. '#' → logprob: -12.878804206848145

Token 1471: '  ' (ID: 256)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.022277478128671646
    2. 'for' → logprob: -4.397277355194092
    3. '   ' → logprob: -4.772277355194092
    4. 'bit' → logprob: -7.522277355194092
    5. '```' → logprob: -8.02227783203125
    6. 'i' → logprob: -8.52227783203125
    7. 'idx' → logprob: -10.02227783203125
    8. 'decoded' → logprob: -10.14727783203125
    9. 'char' → logprob: -10.77227783203125
    10. ' bits' → logprob: -11.14727783203125

Token 1472: ' P' (ID: 398)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.00744488975033164
    2. 'for' → logprob: -5.132444858551025
    3. '   ' → logprob: -6.632444858551025
    4. '```' → logprob: -9.257445335388184
    5. 'bit' → logprob: -9.757445335388184
    6. 'char' → logprob: -11.132445335388184
    7. ' bits' → logprob: -12.007445335388184
    8. 'while' → logprob: -12.507445335388184
    9. '
' → logprob: -12.757445335388184
    10. 'chars' → logprob: -13.007445335388184

Token 1473: ' O' (ID: 532)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0008891870966181159
    2. 'bit' → logprob: -7.375889301300049
    3. 'for' → logprob: -8.75088882446289
    4. 'decoded' → logprob: -10.50088882446289
    5. '```' → logprob: -10.62588882446289
    6. '   ' → logprob: -10.87588882446289
    7. ' bits' → logprob: -11.37588882446289
    8. 'b' → logprob: -12.37588882446289
    9. 'i' → logprob: -12.87588882446289
    10. 'char' → logprob: -12.87588882446289

Token 1474: ' T' (ID: 353)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.00564197450876236
    2. 'for' → logprob: -5.505641937255859
    3. '   ' → logprob: -7.255641937255859
    4. 'bit' → logprob: -8.00564193725586
    5. '```' → logprob: -8.25564193725586
    6. 'b' → logprob: -9.00564193725586
    7. 'char' → logprob: -9.50564193725586
    8. ' bits' → logprob: -10.25564193725586
    9. 'while' → logprob: -12.38064193725586
    10. '``' → logprob: -12.63064193725586

Token 1475: ' T' (ID: 353)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.009631655178964138
    2. 'for' → logprob: -4.884631633758545
    3. '```' → logprob: -6.509631633758545
    4. 'bit' → logprob: -8.634632110595703
    5. '   ' → logprob: -8.634632110595703
    6. 'i' → logprob: -10.009632110595703
    7. '``' → logprob: -10.634632110595703
    8. 'while' → logprob: -10.634632110595703
    9. '       ' → logprob: -11.259632110595703
    10. ' bits' → logprob: -11.509632110595703

Token 1476: ' E' (ID: 457)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.002731763292104006
    2. 'for' → logprob: -6.252731800079346
    3. 'bit' → logprob: -7.752731800079346
    4. '```' → logprob: -8.877731323242188
    5. 'decoded' → logprob: -8.877731323242188
    6. ' bits' → logprob: -10.377731323242188
    7. '   ' → logprob: -10.627731323242188
    8. 'char' → logprob: -11.252731323242188
    9. 'b' → logprob: -11.877731323242188
    10. 'code' → logprob: -12.627731323242188

Token 1477: ' R' (ID: 460)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.04906146973371506
    2. 'for' → logprob: -3.1740615367889404
    3. '   ' → logprob: -5.549061298370361
    4. 'char' → logprob: -7.174061298370361
    5. '```' → logprob: -7.799061298370361
    6. 'b' → logprob: -8.17406177520752
    7. 'bit' → logprob: -8.29906177520752
    8. ' bits' → logprob: -8.54906177520752
    9. ' for' → logprob: -9.54906177520752
    10. 'if' → logprob: -10.42406177520752

Token 1478: '

' (ID: 279)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.02485918253660202
    2. 'for' → logprob: -4.1498589515686035
    3. '   ' → logprob: -5.2748589515686035
    4. 'bit' → logprob: -5.8998589515686035
    5. '```' → logprob: -8.024859428405762
    6. 'char' → logprob: -8.649859428405762
    7. 'b' → logprob: -8.774859428405762
    8. ' bits' → logprob: -9.024859428405762
    9. ' for' → logprob: -10.274859428405762
    10. 'decoded' → logprob: -10.649859428405762

Token 1479: '#' (ID: 2)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.007553862873464823
    2. 'for' → logprob: -5.382554054260254
    3. 'bit' → logprob: -6.507554054260254
    4. '```' → logprob: -7.882554054260254
    5. ' bits' → logprob: -8.007554054260254
    6. 'char' → logprob: -8.132554054260254
    7. 'b' → logprob: -8.882554054260254
    8. 'decoded' → logprob: -9.382554054260254
    9. '   ' → logprob: -9.507554054260254
    10. ' for' → logprob: -10.132554054260254

Token 1480: ' Let's' (ID: 41021)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.08995004743337631
    2. 'for' → logprob: -2.5899500846862793
    3. '   ' → logprob: -4.964950084686279
    4. '```' → logprob: -6.339950084686279
    5. 'bit' → logprob: -7.214950084686279
    6. 'char' → logprob: -7.464950084686279
    7. 'b' → logprob: -8.464949607849121
    8. ' for' → logprob: -8.839949607849121
    9. ' bits' → logprob: -8.964949607849121
    10. 'decoded' → logprob: -9.339949607849121

Token 1481: ' map' (ID: 4014)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.42666471004486084
    2. 'for' → logprob: -2.1766648292541504
    3. '"' → logprob: -2.6766648292541504
    4. 'char' → logprob: -3.3016648292541504
    5. ''' → logprob: -3.9266648292541504
    6. '`' → logprob: -4.42666482925415
    7. '```' → logprob: -4.42666482925415
    8. ':' → logprob: -4.80166482925415
    9. '#' → logprob: -4.80166482925415
    10. '=' → logprob: -4.92666482925415

Token 1482: ':

' (ID: 1402)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.07866921275854111
    2. 'char' → logprob: -3.578669309616089
    3. 'bit' → logprob: -3.828669309616089
    4. 'b' → logprob: -4.95366907119751
    5. '"' → logprob: -5.20366907119751
    6. ''' → logprob: -5.32866907119751
    7. 'for' → logprob: -6.20366907119751
    8. '`' → logprob: -6.20366907119751
    9. '```' → logprob: -7.45366907119751
    10. '   ' → logprob: -7.70366907119751

Token 1483: '#' (ID: 2)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.04587315022945404
    2. 'for' → logprob: -4.045873165130615
    3. 'bit' → logprob: -4.670873165130615
    4. 'b' → logprob: -4.670873165130615
    5. 'char' → logprob: -5.920873165130615
    6. '   ' → logprob: -6.795873165130615
    7. ' bits' → logprob: -6.920873165130615
    8. 'ch' → logprob: -7.045873165130615
    9. '"' → logprob: -7.295873165130615
    10. '`' → logprob: -7.420873165130615

Token 1484: ' Let's' (ID: 41021)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.018452154472470284
    2. 'for' → logprob: -4.643452167510986
    3. 'bit' → logprob: -4.893452167510986
    4. 'b' → logprob: -8.018451690673828
    5. '```' → logprob: -8.018451690673828
    6. 'char' → logprob: -9.143451690673828
    7. '   ' → logprob: -9.143451690673828
    8. 'decoded' → logprob: -9.518451690673828
    9. ' bits' → logprob: -9.643451690673828
    10. '       ' → logprob: -10.018451690673828

Token 1485: ' try' (ID: 2075)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.5797981023788452
    2. 'bits' → logprob: -1.3297981023788452
    3. 'char' → logprob: -2.8297982215881348
    4. '"' → logprob: -4.204798221588135
    5. '```' → logprob: -4.454798221588135
    6. '   ' → logprob: -4.579798221588135
    7. '       ' → logprob: -4.704798221588135
    8. 'b' → logprob: -4.704798221588135
    9. '`' → logprob: -4.829798221588135
    10. ':' → logprob: -4.829798221588135

Token 1486: ':

' (ID: 1402)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.1132330596446991
    2. 'for' → logprob: -3.1132330894470215
    3. 'b' → logprob: -3.6132330894470215
    4. 'char' → logprob: -4.7382330894470215
    5. '   ' → logprob: -5.1132330894470215
    6. '`' → logprob: -5.3632330894470215
    7. '```' → logprob: -5.4882330894470215
    8. 'bit' → logprob: -5.4882330894470215
    9. '"' → logprob: -6.2382330894470215
    10. 'c' → logprob: -6.6132330894470215

Token 1487: '#' (ID: 2)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.6619784235954285
    2. 'for' → logprob: -1.7869784832000732
    3. ''' → logprob: -2.0369784832000732
    4. 'char' → logprob: -2.2869784832000732
    5. '`' → logprob: -3.6619784832000732
    6. 'b' → logprob: -4.536978244781494
    7. 'c' → logprob: -4.536978244781494
    8. 'bit' → logprob: -4.536978244781494
    9. '```' → logprob: -4.786978244781494
    10. '"' → logprob: -5.411978244781494

Token 1488: ' Mapping' (ID: 69243)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.14166615903377533
    2. 'for' → logprob: -2.1416661739349365
    3. '   ' → logprob: -4.766665935516357
    4. 'char' → logprob: -6.016665935516357
    5. 'bit' → logprob: -6.391665935516357
    6. '```' → logprob: -7.141665935516357
    7. ' for' → logprob: -8.266666412353516
    8. ' bits' → logprob: -8.516666412353516
    9. 'b' → logprob: -9.016666412353516
    10. 'ch' → logprob: -9.141666412353516

Token 1489: ' input' (ID: 3422)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -1.1208547353744507
    2. 'for' → logprob: -1.2458547353744507
    3. 'bits' → logprob: -1.6208547353744507
    4. ''' → logprob: -2.6208548545837402
    5. '`' → logprob: -2.9958548545837402
    6. 'bit' → logprob: -4.37085485458374
    7. '```' → logprob: -4.37085485458374
    8. 'c' → logprob: -4.87085485458374
    9. '   ' → logprob: -5.24585485458374
    10. '"' → logprob: -5.37085485458374

Token 1490: ' characters' (ID: 9862)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.4585261046886444
    2. 'char' → logprob: -1.7085261344909668
    3. 'bits' → logprob: -2.458526134490967
    4. '"' → logprob: -3.583526134490967
    5. ''' → logprob: -3.833526134490967
    6. '   ' → logprob: -4.333526134490967
    7. ' for' → logprob: -4.833526134490967
    8. '```' → logprob: -5.208526134490967
    9. '       ' → logprob: -5.333526134490967
    10. '`' → logprob: -5.583526134490967

Token 1491: ' to' (ID: 316)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.9549000263214111
    2. 'bits' → logprob: -1.2049000263214111
    3. 'char' → logprob: -1.5799000263214111
    4. '   ' → logprob: -3.829900026321411
    5. '"' → logprob: -4.079899787902832
    6. ''' → logprob: -4.454899787902832
    7. '```' → logprob: -4.579899787902832
    8. '       ' → logprob: -4.704899787902832
    9. '`' → logprob: -4.829899787902832
    10. ' for' → logprob: -5.079899787902832

Token 1492: ' bits' (ID: 18189)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.5327600836753845
    2. '{' → logprob: -0.9077600836753845
    3. '{
' → logprob: -5.782760143280029
    4. 'char' → logprob: -6.532760143280029
    5. '```' → logprob: -6.532760143280029
    6. '`' → logprob: -6.907760143280029
    7. '{'' → logprob: -7.407760143280029
    8. 'bits' → logprob: -7.532760143280029
    9. '"' → logprob: -7.782760143280029
    10. ''b' → logprob: -8.657759666442871

Token 1493: ',' (ID: 11)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.4306768774986267
    2. ''' → logprob: -1.3056769371032715
    3. 'bits' → logprob: -3.4306769371032715
    4. '`' → logprob: -4.4306769371032715
    5. '{' → logprob: -4.8056769371032715
    6. 'bit' → logprob: -4.9306769371032715
    7. '"' → logprob: -6.0556769371032715
    8. '{
' → logprob: -6.1806769371032715
    9. 'for' → logprob: -6.3056769371032715
    10. '#' → logprob: -6.6806769371032715

Token 1494: ' considering' (ID: 17227)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.35960426926612854
    2. 'char' → logprob: -1.8596042394638062
    3. ''' → logprob: -2.9846043586730957
    4. 'bit' → logprob: -3.2346043586730957
    5. '`' → logprob: -4.234604358673096
    6. 'b' → logprob: -4.484604358673096
    7. '"' → logprob: -4.859604358673096
    8. 'for' → logprob: -5.234604358673096
    9. 'c' → logprob: -5.984604358673096
    10. '   ' → logprob: -6.109604358673096

Token 1495: ' only' (ID: 1606)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.6670399308204651
    2. 'for' → logprob: -1.4170398712158203
    3. '`' → logprob: -3.0420398712158203
    4. ''' → logprob: -3.0420398712158203
    5. '```' → logprob: -3.1670398712158203
    6. '"' → logprob: -3.5420398712158203
    7. 'char' → logprob: -3.7920398712158203
    8. '       ' → logprob: -4.29203987121582
    9. '   ' → logprob: -4.66703987121582
    10. 'bit' → logprob: -5.04203987121582

Token 1496: ' ' (ID: 220)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.1422533541917801
    2. 'for' → logprob: -3.2672533988952637
    3. 'char' → logprob: -3.5172533988952637
    4. '"' → logprob: -4.267253398895264
    5. '`' → logprob: -4.267253398895264
    6. 'bit' → logprob: -4.767253398895264
    7. ''' → logprob: -4.892253398895264
    8. '```' → logprob: -5.392253398895264
    9. 'b' → logprob: -5.892253398895264
    10. '   ' → logprob: -5.892253398895264

Token 1497: '0' (ID: 15)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.3289153277873993
    2. 'for' → logprob: -1.9539153575897217
    3. ''' → logprob: -3.0789153575897217
    4. 'char' → logprob: -3.9539153575897217
    5. '"' → logprob: -4.078915119171143
    6. 'bit' → logprob: -4.203915119171143
    7. '`' → logprob: -4.703915119171143
    8. '```' → logprob: -4.828915119171143
    9. 'ch' → logprob: -5.703915119171143
    10. ''\' → logprob: -5.953915119171143

Token 1498: ' and' (ID: 326)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.10371038317680359
    2. '"' → logprob: -3.228710412979126
    3. 'char' → logprob: -3.728710412979126
    4. '`' → logprob: -4.853710174560547
    5. 'for' → logprob: -4.978710174560547
    6. ''' → logprob: -5.853710174560547
    7. 'b' → logprob: -5.853710174560547
    8. '   ' → logprob: -5.978710174560547
    9. ' bits' → logprob: -5.978710174560547
    10. 'bit' → logprob: -6.103710174560547

Token 1499: ' ' (ID: 220)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.049564141780138016
    2. '"' → logprob: -3.5495641231536865
    3. '`' → logprob: -5.174564361572266
    4. '```' → logprob: -5.424564361572266
    5. 'char' → logprob: -6.174564361572266
    6. '=' → logprob: -6.299564361572266
    7. 'bits' → logprob: -7.174564361572266
    8. '#' → logprob: -7.674564361572266
    9. '':' → logprob: -8.049564361572266
    10. '[' → logprob: -8.174564361572266

Token 1500: '1' (ID: 16)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0174537505954504
    2. '"' → logprob: -4.392453670501709
    3. '`' → logprob: -6.017453670501709
    4. '```' → logprob: -7.142453670501709
    5. 'char' → logprob: -7.767453670501709
    6. '=' → logprob: -7.892453670501709
    7. '#' → logprob: -8.392454147338867
    8. ')' → logprob: -9.392454147338867
    9. '{' → logprob: -9.517454147338867
    10. ''''' → logprob: -9.642454147338867

Token 1501: ':

' (ID: 1402)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.9361182451248169
    2. 'for' → logprob: -1.561118245124817
    3. 'char' → logprob: -1.686118245124817
    4. '   ' → logprob: -2.6861181259155273
    5. '```' → logprob: -3.5611181259155273
    6. ''' → logprob: -3.5611181259155273
    7. '`' → logprob: -4.061118125915527
    8. '"' → logprob: -4.061118125915527
    9. '       ' → logprob: -4.061118125915527
    10. '#' → logprob: -4.561118125915527

Token 1502: '#' (ID: 2)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.20543846487998962
    2. 'bit' → logprob: -1.955438494682312
    3. 'char' → logprob: -3.7054383754730225
    4. 'for' → logprob: -4.205438613891602
    5. '```' → logprob: -6.080438613891602
    6. 'b' → logprob: -7.330438613891602
    7. 'ch' → logprob: -7.955438613891602
    8. '`' → logprob: -8.205438613891602
    9. 'c' → logprob: -8.580438613891602
    10. ' bits' → logprob: -8.955438613891602

Token 1503: ' From' (ID: 7217)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.03019275702536106
    2. 'for' → logprob: -3.6551928520202637
    3. 'bit' → logprob: -6.530192852020264
    4. 'b' → logprob: -6.530192852020264
    5. '```' → logprob: -8.030192375183105
    6. '   ' → logprob: -8.530192375183105
    7. 'char' → logprob: -8.655192375183105
    8. ' bits' → logprob: -9.405192375183105
    9. '       ' → logprob: -10.155192375183105
    10. ' for' → logprob: -10.655192375183105

Token 1504: ' the' (ID: 290)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.3287856876850128
    2. '"' → logprob: -2.3287856578826904
    3. 'char' → logprob: -2.3287856578826904
    4. 'bits' → logprob: -3.5787856578826904
    5. '`' → logprob: -3.8287856578826904
    6. '```' → logprob: -4.7037858963012695
    7. '#' → logprob: -5.5787858963012695
    8. 'for' → logprob: -6.0787858963012695
    9. 'b' → logprob: -6.2037858963012695
    10. '{' → logprob: -6.3287858963012695

Token 1505: ' problem' (ID: 4792)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.07860244065523148
    2. 'for' → logprob: -2.8286025524139404
    3. 'b' → logprob: -5.453602313995361
    4. '```' → logprob: -5.578602313995361
    5. 'char' → logprob: -5.703602313995361
    6. 'bit' → logprob: -6.578602313995361
    7. '`' → logprob: -7.453602313995361
    8. '"' → logprob: -7.703602313995361
    9. ' bits' → logprob: -7.703602313995361
    10. 'i' → logprob: -7.953602313995361

Token 1506: ',' (ID: 11)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.9573116302490234
    2. ''' → logprob: -1.7073116302490234
    3. '"' → logprob: -1.8323116302490234
    4. 'for' → logprob: -2.9573116302490234
    5. '```' → logprob: -2.9573116302490234
    6. '   ' → logprob: -3.5823116302490234
    7. '[' → logprob: -3.8323116302490234
    8. '`' → logprob: -3.8323116302490234
    9. ')' → logprob: -3.8323116302490234
    10. '#' → logprob: -3.9573116302490234

Token 1507: ' easier' (ID: 11087)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.7455679774284363
    2. '   ' → logprob: -1.495568037033081
    3. 'bits' → logprob: -1.745568037033081
    4. '```' → logprob: -3.245568037033081
    5. 'char' → logprob: -3.620568037033081
    6. '       ' → logprob: -3.870568037033081
    7. ' for' → logprob: -4.495567798614502
    8. 'bit' → logprob: -4.995567798614502
    9. 'b' → logprob: -5.495567798614502
    10. 'c' → logprob: -5.620567798614502

Token 1508: ' to' (ID: 316)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.3830922842025757
    2. '   ' → logprob: -1.8830922842025757
    3. 'for' → logprob: -2.0080924034118652
    4. 'b' → logprob: -5.133092403411865
    5. 'char' → logprob: -5.383092403411865
    6. 'bit' → logprob: -5.383092403411865
    7. '```' → logprob: -5.633092403411865
    8. '       ' → logprob: -5.633092403411865
    9. ':' → logprob: -6.383092403411865
    10. ' for' → logprob: -6.383092403411865

Token 1509: ' hard' (ID: 3479)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.3938314616680145
    2. 'for' → logprob: -1.518831491470337
    3. 'char' → logprob: -3.143831491470337
    4. '```' → logprob: -4.143831253051758
    5. '   ' → logprob: -4.643831253051758
    6. '"' → logprob: -5.268831253051758
    7. 'b' → logprob: -5.518831253051758
    8. ' bits' → logprob: -5.643831253051758
    9. 'bit' → logprob: -5.768831253051758
    10. ' for' → logprob: -5.768831253051758

Token 1510: 'code' (ID: 3056)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.2515190541744232
    2. 'for' → logprob: -1.7515190839767456
    3. '   ' → logprob: -3.376518964767456
    4. 'bit' → logprob: -5.126519203186035
    5. 'char' → logprob: -5.501519203186035
    6. '```' → logprob: -6.251519203186035
    7. ' for' → logprob: -7.251519203186035
    8. 'b' → logprob: -7.876519203186035
    9. '       ' → logprob: -8.001519203186035
    10. 'decoded' → logprob: -8.251519203186035

Token 1511: ' a' (ID: 261)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.22864994406700134
    2. 'for' → logprob: -1.7286499738693237
    3. '   ' → logprob: -4.103650093078613
    4. 'char' → logprob: -5.228650093078613
    5. 'bit' → logprob: -5.728650093078613
    6. '```' → logprob: -7.603650093078613
    7. 'while' → logprob: -8.478650093078613
    8. 'decoded' → logprob: -8.603650093078613
    9. 'code' → logprob: -8.853650093078613
    10. ' for' → logprob: -9.103650093078613

Token 1512: ' dictionary' (ID: 22131)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.43662652373313904
    2. 'char' → logprob: -1.1866265535354614
    3. 'for' → logprob: -3.311626434326172
    4. 'bit' → logprob: -5.311626434326172
    5. '`' → logprob: -6.311626434326172
    6. '"' → logprob: -6.311626434326172
    7. 'b' → logprob: -7.561626434326172
    8. '   ' → logprob: -7.936626434326172
    9. '```' → logprob: -7.936626434326172
    10. ' bits' → logprob: -8.061626434326172

Token 1513: ' mapping' (ID: 22573)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.22067491710186005
    2. 'for' → logprob: -2.095674991607666
    3. 'bit' → logprob: -3.345674991607666
    4. 'char' → logprob: -3.970674991607666
    5. '   ' → logprob: -4.220674991607666
    6. 'decoded' → logprob: -6.095674991607666
    7. 'ch' → logprob: -6.845674991607666
    8. '```' → logprob: -7.345674991607666
    9. 'b' → logprob: -8.095674514770508
    10. 'decode' → logprob: -8.220674514770508

Token 1514: ' input' (ID: 3422)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.5238792300224304
    2. 'for' → logprob: -1.1488792896270752
    3. 'char' → logprob: -3.148879289627075
    4. 'bit' → logprob: -3.523879289627075
    5. '   ' → logprob: -5.273879051208496
    6. ' for' → logprob: -5.773879051208496
    7. '```' → logprob: -5.898879051208496
    8. 'decoded' → logprob: -6.023879051208496
    9. ' bits' → logprob: -7.023879051208496
    10. 'ch' → logprob: -7.273879051208496

Token 1515: ' symbol' (ID: 10038)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.43941009044647217
    2. 'char' → logprob: -1.4394100904464722
    3. 'for' → logprob: -2.9394102096557617
    4. 'bit' → logprob: -3.0644102096557617
    5. '```' → logprob: -4.814410209655762
    6. '`' → logprob: -6.064410209655762
    7. '   ' → logprob: -6.314410209655762
    8. 'ch' → logprob: -6.439410209655762
    9. 'decoded' → logprob: -7.314410209655762
    10. '``' → logprob: -7.564410209655762

Token 1516: ' to' (ID: 316)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.458404541015625
    2. 'for' → logprob: -1.333404541015625
    3. 'char' → logprob: -3.083404541015625
    4. 'bit' → logprob: -4.208404541015625
    5. '   ' → logprob: -4.458404541015625
    6. '```' → logprob: -4.583404541015625
    7. 'b' → logprob: -4.833404541015625
    8. '`' → logprob: -5.458404541015625
    9. '       ' → logprob: -6.333404541015625
    10. '"' → logprob: -6.458404541015625

Token 1517: ' bit' (ID: 3546)
  Prédit: '{'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '{' → logprob: -0.8974824547767639
    2. ''' → logprob: -1.1474823951721191
    3. '{
' → logprob: -1.7724823951721191
    4. 'char' → logprob: -2.897482395172119
    5. '{'' → logprob: -3.772482395172119
    6. '`' → logprob: -5.147482395172119
    7. '"' → logprob: -5.647482395172119
    8. 'bit' → logprob: -5.647482395172119
    9. 'bits' → logprob: -5.647482395172119
    10. '```' → logprob: -6.522482395172119

Token 1518: ',' (ID: 11)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.30063650012016296
    2. 'bit' → logprob: -1.9256365299224854
    3. 'char' → logprob: -3.0506365299224854
    4. 'for' → logprob: -3.6756365299224854
    5. '   ' → logprob: -4.175636291503906
    6. '"' → logprob: -5.175636291503906
    7. 'b' → logprob: -5.425636291503906
    8. '`' → logprob: -5.425636291503906
    9. '```' → logprob: -6.050636291503906
    10. '       ' → logprob: -6.050636291503906

Token 1519: ' from' (ID: 591)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.5445613861083984
    2. 'bit' → logprob: -1.4195613861083984
    3. 'char' → logprob: -2.5445613861083984
    4. 'for' → logprob: -3.4195613861083984
    5. ''' → logprob: -4.044561386108398
    6. '```' → logprob: -4.294561386108398
    7. '`' → logprob: -4.544561386108398
    8. '"' → logprob: -4.794561386108398
    9. '{
' → logprob: -5.169561386108398
    10. '   ' → logprob: -6.169561386108398

Token 1520: ' the' (ID: 290)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.9144704341888428
    2. ''' → logprob: -1.5394704341888428
    3. '{
' → logprob: -1.5394704341888428
    4. '{' → logprob: -2.4144704341888428
    5. '`' → logprob: -3.9144704341888428
    6. '{'' → logprob: -4.039470672607422
    7. '"' → logprob: -4.414470672607422
    8. '```' → logprob: -4.789470672607422
    9. 'for' → logprob: -5.414470672607422
    10. 'line' → logprob: -6.039470672607422

Token 1521: ' insight' (ID: 24058)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -1.130772590637207
    2. 'char' → logprob: -1.130772590637207
    3. '{
' → logprob: -1.755772590637207
    4. '{' → logprob: -2.380772590637207
    5. '`' → logprob: -3.755772590637207
    6. '"' → logprob: -4.130772590637207
    7. '{'' → logprob: -4.505772590637207
    8. 'line' → logprob: -4.755772590637207
    9. 'for' → logprob: -5.505772590637207
    10. '```' → logprob: -5.755772590637207

Token 1522: ' that' (ID: 484)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.6821669340133667
    2. 'for' → logprob: -0.9321669340133667
    3. 'char' → logprob: -3.1821670532226562
    4. 'bit' → logprob: -3.5571670532226562
    5. '```' → logprob: -4.432167053222656
    6. '   ' → logprob: -5.182167053222656
    7. '`' → logprob: -5.432167053222656
    8. 'b' → logprob: -5.682167053222656
    9. ' for' → logprob: -6.432167053222656
    10. ' bits' → logprob: -7.432167053222656

Token 1523: ' only' (ID: 1606)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.9808617234230042
    2. ''' → logprob: -1.3558616638183594
    3. 'for' → logprob: -2.2308616638183594
    4. 'char' → logprob: -2.3558616638183594
    5. 'bit' → logprob: -3.2308616638183594
    6. '"' → logprob: -3.2308616638183594
    7. '`' → logprob: -3.2308616638183594
    8. 'b' → logprob: -4.105861663818359
    9. 'c' → logprob: -5.605861663818359
    10. ''b' → logprob: -5.605861663818359

Token 1524: ' characters' (ID: 9862)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.06258094310760498
    2. 'char' → logprob: -4.3125810623168945
    3. ''?' → logprob: -4.5625810623168945
    4. '?' → logprob: -4.8125810623168945
    5. '`' → logprob: -4.9375810623168945
    6. '{' → logprob: -4.9375810623168945
    7. '"' → logprob: -5.3125810623168945
    8. '{
' → logprob: -6.5625810623168945
    9. '```' → logprob: -6.9375810623168945
    10. '{'' → logprob: -7.1875810623168945

Token 1525: ' from' (ID: 591)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.5022723078727722
    2. 'char' → logprob: -1.502272367477417
    3. 'for' → logprob: -3.127272367477417
    4. '`' → logprob: -3.377272367477417
    5. '"' → logprob: -4.002272129058838
    6. '=' → logprob: -4.127272129058838
    7. 'ch' → logprob: -4.252272129058838
    8. '```' → logprob: -5.002272129058838
    9. 'bits' → logprob: -5.502272129058838
    10. '[' → logprob: -5.627272129058838

Token 1526: ' "' (ID: 392)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.18970216810703278
    2. '"' → logprob: -2.564702272415161
    3. 'char' → logprob: -3.314702272415161
    4. '`' → logprob: -3.689702272415161
    5. '```' → logprob: -5.189702033996582
    6. ''"' → logprob: -5.314702033996582
    7. 'ch' → logprob: -5.814702033996582
    8. 'line' → logprob: -5.939702033996582
    9. 'bits' → logprob: -6.064702033996582
    10. ''A' → logprob: -6.064702033996582

Token 1527: '0' (ID: 15)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.736569344997406
    2. ''' → logprob: -1.8615694046020508
    3. '{
' → logprob: -1.9865694046020508
    4. '{' → logprob: -2.986569404602051
    5. '{'' → logprob: -2.986569404602051
    6. '"' → logprob: -3.111569404602051
    7. '`' → logprob: -3.861569404602051
    8. '```' → logprob: -3.861569404602051
    9. '{"' → logprob: -5.486569404602051
    10. 'bit' → logprob: -5.611569404602051

Token 1528: '"' (ID: 1)
  Prédit: '"'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.8763290643692017
    2. ''' → logprob: -0.8763290643692017
    3. 'char' → logprob: -2.376328945159912
    4. 'bits' → logprob: -4.251328945159912
    5. '`' → logprob: -4.376328945159912
    6. '```' → logprob: -4.626328945159912
    7. 'bit' → logprob: -5.501328945159912
    8. '=' → logprob: -5.751328945159912
    9. ''"' → logprob: -5.751328945159912
    10. '{
' → logprob: -6.001328945159912

Token 1529: ' or' (ID: 503)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.3743225038051605
    2. '"' → logprob: -1.749322533607483
    3. 'char' → logprob: -2.9993224143981934
    4. '`' → logprob: -3.7493224143981934
    5. 'for' → logprob: -4.249322414398193
    6. 'bits' → logprob: -4.499322414398193
    7. '```' → logprob: -4.499322414398193
    8. 'bit' → logprob: -6.499322414398193
    9. ''\' → logprob: -6.499322414398193
    10. '":' → logprob: -6.624322414398193

Token 1530: ' "' (ID: 392)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.1306174248456955
    2. '"' → logprob: -2.630617380142212
    3. 'char' → logprob: -4.255617618560791
    4. '`' → logprob: -4.505617618560791
    5. 'ch' → logprob: -6.005617618560791
    6. '```' → logprob: -6.005617618560791
    7. 'bits' → logprob: -6.255617618560791
    8. ''"' → logprob: -6.380617618560791
    9. '':' → logprob: -6.380617618560791
    10. 'line' → logprob: -6.630617618560791

Token 1531: '1' (ID: 16)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.15479923784732819
    2. '"' → logprob: -2.029799222946167
    3. '`' → logprob: -5.654799461364746
    4. 'char' → logprob: -5.904799461364746
    5. '```' → logprob: -6.779799461364746
    6. ''"' → logprob: -7.029799461364746
    7. ''''' → logprob: -7.904799461364746
    8. '"""' → logprob: -7.904799461364746
    9. '=' → logprob: -8.154799461364746
    10. 'b' → logprob: -8.529799461364746

Token 1532: '"' (ID: 1)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.6731076240539551
    2. 'for' → logprob: -1.048107624053955
    3. '   ' → logprob: -3.298107624053955
    4. '"' → logprob: -3.673107624053955
    5. ' for' → logprob: -4.298107624053955
    6. 'bit' → logprob: -4.548107624053955
    7. 'char' → logprob: -4.548107624053955
    8. 'b' → logprob: -4.673107624053955
    9. '```' → logprob: -4.923107624053955
    10. '":' → logprob: -5.298107624053955

Token 1533: ' correspond' (ID: 11095)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.8524935245513916
    2. 'for' → logprob: -1.1024935245513916
    3. '   ' → logprob: -2.4774935245513916
    4. '`' → logprob: -3.6024935245513916
    5. '```' → logprob: -3.6024935245513916
    6. '"' → logprob: -3.8524935245513916
    7. 'bit' → logprob: -3.8524935245513916
    8. 'char' → logprob: -3.9774935245513916
    9. 'b' → logprob: -4.3524932861328125
    10. ''' → logprob: -5.1024932861328125

Token 1534: ' to' (ID: 316)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.176435187458992
    2. 'for' → logprob: -2.3014352321624756
    3. 'bit' → logprob: -3.8014352321624756
    4. '   ' → logprob: -3.8014352321624756
    5. 'char' → logprob: -4.6764349937438965
    6. 'b' → logprob: -5.4264349937438965
    7. '```' → logprob: -7.1764349937438965
    8. 'c' → logprob: -7.3014349937438965
    9. 'ch' → logprob: -8.051435470581055
    10. ' for' → logprob: -8.176435470581055

Token 1535: ' bits' (ID: 18189)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.2166675329208374
    2. 'for' → logprob: -2.216667652130127
    3. 'bit' → logprob: -2.841667652130127
    4. 'char' → logprob: -4.466667652130127
    5. '"' → logprob: -5.341667652130127
    6. '`' → logprob: -6.091667652130127
    7. '```' → logprob: -6.216667652130127
    8. 'b' → logprob: -6.716667652130127
    9. '   ' → logprob: -6.966667652130127
    10. ' for' → logprob: -7.341667652130127

Token 1536: '.

' (ID: 364)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.046987008303403854
    2. 'for' → logprob: -3.6719870567321777
    3. 'bit' → logprob: -4.046987056732178
    4. '```' → logprob: -6.796987056732178
    5. 'b' → logprob: -7.546987056732178
    6. '   ' → logprob: -7.671987056732178
    7. 'char' → logprob: -8.17198657989502
    8. ' bits' → logprob: -8.54698657989502
    9. 'decoded' → logprob: -9.54698657989502
    10. '       ' → logprob: -9.79698657989502

Token 1537: '#' (ID: 2)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.11940333992242813
    2. 'for' → logprob: -2.61940336227417
    3. 'char' → logprob: -3.99440336227417
    4. 'bit' → logprob: -4.11940336227417
    5. '```' → logprob: -5.99440336227417
    6. '   ' → logprob: -6.49440336227417
    7. '`' → logprob: -8.619402885437012
    8. 'b' → logprob: -8.869402885437012
    9. ' bits' → logprob: -9.119402885437012
    10. 'code' → logprob: -9.244402885437012

Token 1538: ' So' (ID: 2632)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.3461773097515106
    2. 'for' → logprob: -1.471177339553833
    3. 'bit' → logprob: -2.971177339553833
    4. 'char' → logprob: -5.346177101135254
    5. '```' → logprob: -5.846177101135254
    6. '   ' → logprob: -5.971177101135254
    7. 'b' → logprob: -8.221177101135254
    8. ' for' → logprob: -8.721177101135254
    9. '``' → logprob: -8.846177101135254
    10. 'decoded' → logprob: -8.971177101135254

Token 1539: ' let's' (ID: 35717)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.09269746392965317
    2. 'bit' → logprob: -2.7176973819732666
    3. 'char' → logprob: -3.8426973819732666
    4. 'for' → logprob: -7.967697620391846
    5. '```' → logprob: -8.342697143554688
    6. '   ' → logprob: -8.717697143554688
    7. 'decoded' → logprob: -8.842697143554688
    8. 'chars' → logprob: -9.967697143554688
    9. ' bits' → logprob: -10.342697143554688
    10. 'ch' → logprob: -10.842697143554688

Token 1540: ' just' (ID: 1327)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.7798221707344055
    2. 'char' → logprob: -1.0298221111297607
    3. 'for' → logprob: -2.0298221111297607
    4. 'bit' → logprob: -3.7798221111297607
    5. '```' → logprob: -4.90482234954834
    6. '`' → logprob: -5.65482234954834
    7. '"' → logprob: -6.15482234954834
    8. 'input' → logprob: -6.27982234954834
    9. '#' → logprob: -6.40482234954834
    10. '   ' → logprob: -6.40482234954834

Token 1541: ' hard' (ID: 3479)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.6458275318145752
    2. 'char' → logprob: -1.5208275318145752
    3. 'for' → logprob: -1.6458275318145752
    4. 'bit' → logprob: -3.520827531814575
    5. '```' → logprob: -4.770827293395996
    6. '`' → logprob: -5.145827293395996
    7. '   ' → logprob: -5.145827293395996
    8. '"' → logprob: -6.020827293395996
    9. '#' → logprob: -6.270827293395996
    10. '       ' → logprob: -6.395827293395996

Token 1542: 'code' (ID: 3056)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.7277400493621826
    2. 'char' → logprob: -1.7277400493621826
    3. '```' → logprob: -1.9777400493621826
    4. '`' → logprob: -2.2277400493621826
    5. '"' → logprob: -4.227740287780762
    6. ''
' → logprob: -4.477740287780762
    7. '``' → logprob: -4.477740287780762
    8. '_char' → logprob: -5.352740287780762
    9. ''''
' → logprob: -5.477740287780762
    10. '_bits' → logprob: -5.602740287780762

Token 1543: ' the' (ID: 290)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.643049418926239
    2. 'bits' → logprob: -1.3930494785308838
    3. 'bit' → logprob: -1.7680494785308838
    4. 'for' → logprob: -3.643049478530884
    5. '```' → logprob: -4.643049240112305
    6. '{
' → logprob: -5.143049240112305
    7. '{'' → logprob: -5.518049240112305
    8. '   ' → logprob: -6.643049240112305
    9. '`' → logprob: -6.768049240112305
    10. 'input' → logprob: -7.143049240112305

Token 1544: ' conversion' (ID: 22165)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.2812115550041199
    2. 'bits' → logprob: -2.4062116146087646
    3. ''' → logprob: -3.1562116146087646
    4. 'for' → logprob: -3.6562116146087646
    5. '`' → logprob: -3.9062116146087646
    6. 'bit' → logprob: -4.0312113761901855
    7. '"' → logprob: -4.1562113761901855
    8. '{
' → logprob: -4.2812113761901855
    9. '```' → logprob: -5.4062113761901855
    10. '{' → logprob: -6.4062113761901855

Token 1545: ':

' (ID: 1402)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.17469212412834167
    2. 'for' → logprob: -2.549692153930664
    3. 'bit' → logprob: -2.799692153930664
    4. 'char' → logprob: -4.549692153930664
    5. '   ' → logprob: -5.049692153930664
    6. 'b' → logprob: -6.424692153930664
    7. '```' → logprob: -6.674692153930664
    8. '`' → logprob: -7.799692153930664
    9. 'c' → logprob: -8.549692153930664
    10. ' bits' → logprob: -9.049692153930664

Token 1546: 'bit' (ID: 6516)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.3701951503753662
    2. 'for' → logprob: -1.3701951503753662
    3. 'bit' → logprob: -3.370195150375366
    4. 'char' → logprob: -4.120195388793945
    5. '   ' → logprob: -5.745195388793945
    6. '```' → logprob: -7.620195388793945
    7. ' for' → logprob: -8.370195388793945
    8. 'ch' → logprob: -8.620195388793945
    9. 'b' → logprob: -8.745195388793945
    10. ' bits' → logprob: -9.495195388793945

Token 1547: '_dict' (ID: 11295)
  Prédit: '_map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_map' → logprob: -0.6714960932731628
    2. '=' → logprob: -1.4214961528778076
    3. 's' → logprob: -2.0464961528778076
    4. ' =' → logprob: -2.7964961528778076
    5. '_mapping' → logprob: -3.1714961528778076
    6. '_' → logprob: -5.0464959144592285
    7. 'map' → logprob: -6.0464959144592285
    8. '_bit' → logprob: -6.7964959144592285
    9. 'mapping' → logprob: -7.0464959144592285
    10. '_char' → logprob: -7.0464959144592285

Token 1548: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.0747491717338562
    2. '{' → logprob: -2.949749231338501
    3. ' =' → logprob: -5.074748992919922
    4. 'char' → logprob: -5.199748992919922
    5. '={'' → logprob: -5.449748992919922
    6. '{'' → logprob: -6.449748992919922
    7. '={' → logprob: -6.699748992919922
    8. '={
' → logprob: -8.074748992919922
    9. 'bit' → logprob: -8.199748992919922
    10. '_char' → logprob: -9.449748992919922

Token 1549: ' {
' (ID: 405)
  Prédit: '{
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '{
' → logprob: -0.25243210792541504
    2. '{' → logprob: -1.752432107925415
    3. '{'' → logprob: -3.002432107925415
    4. '{"' → logprob: -9.627431869506836
    5. '   ' → logprob: -13.252431869506836
    6. '```' → logprob: -13.502431869506836
    7. '{
' → logprob: -13.627431869506836
    8. ' {
' → logprob: -14.002431869506836
    9. '{\' → logprob: -15.002431869506836
    10. '{}' → logprob: -15.377431869506836

Token 1550: '   ' (ID: 271)
  Prédit: '{'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '{' → logprob: -0.4540601670742035
    2. '{
' → logprob: -1.8290601968765259
    3. ''?' → logprob: -2.2040600776672363
    4. '{'' → logprob: -2.7040600776672363
    5. ''' → logprob: -4.204060077667236
    6. '   ' → logprob: -4.954060077667236
    7. '?' → logprob: -5.454060077667236
    8. '"?' → logprob: -8.454060554504395
    9. '{"' → logprob: -8.954060554504395
    10. '('?' → logprob: -9.204060554504395

Token 1551: ' '?' (ID: 73818)
  Prédit: ''?'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''?' (adapté à ' '?') → logprob: -0.8152977228164673
    2. '{'' → logprob: -0.9402977228164673
    3. '{
' → logprob: -2.3152976036071777
    4. ''' → logprob: -2.9402976036071777
    5. '{' → logprob: -4.315297603607178
    6. '"?' → logprob: -6.690297603607178
    7. '?' → logprob: -8.315298080444336
    8. '{"' → logprob: -8.315298080444336
    9. '?'' → logprob: -9.315298080444336
    10. '"' → logprob: -9.690298080444336

Token 1552: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.47889289259910583
    2. ''' → logprob: -1.3538929224014282
    3. ''=' → logprob: -2.7288928031921387
    4. '=' → logprob: -3.4788928031921387
    5. ''?' → logprob: -3.9788928031921387
    6. '":' → logprob: -5.978892803192139
    7. '':'' → logprob: -6.228892803192139
    8. ':' → logprob: -7.478892803192139
    9. '"' → logprob: -8.103893280029297
    10. '```' → logprob: -8.353893280029297

Token 1553: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.00033665422233752906
    2. '"' → logprob: -8.000336647033691
    3. '1' → logprob: -14.625336647033691
    4. '`' → logprob: -14.875336647033691
    5. ' '' → logprob: -15.125336647033691
    6. '   ' → logprob: -17.625337600708008
    7. '‘' → logprob: -19.500337600708008
    8. ''''' → logprob: -19.875337600708008
    9. ''b' → logprob: -20.250337600708008
    10. '('' → logprob: -20.500337600708008

Token 1554: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.2530536651611328
    2. ''' → logprob: -1.5030536651611328
    3. '"' → logprob: -6.878053665161133
    4. '0' → logprob: -9.378053665161133
    5. '`' → logprob: -12.378053665161133
    6. '111' → logprob: -13.003053665161133
    7. '"""' → logprob: -13.878053665161133
    8. ''''' → logprob: -14.003053665161133
    9. '```' → logprob: -15.753053665161133
    10. '''' → logprob: -15.878053665161133

Token 1555: '',
' (ID: 1214)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.028202777728438377
    2. '',' → logprob: -4.028203010559082
    3. '',
' → logprob: -5.278203010559082
    4. ''}' → logprob: -5.403203010559082
    5. '}' → logprob: -9.403203010559082
    6. ''
' → logprob: -9.528203010559082
    7. ':' → logprob: -9.778203010559082
    8. '':' → logprob: -10.028203010559082
    9. ':'' → logprob: -10.153203010559082
    10. '}'' → logprob: -10.278203010559082

Token 1556: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.2356431931257248
    2. ''D' → logprob: -1.7356431484222412
    3. ''?' → logprob: -3.860643148422241
    4. '':' → logprob: -4.86064338684082
    5. ''-' → logprob: -5.73564338684082
    6. '"'' → logprob: -7.48564338684082
    7. ''''' → logprob: -7.98564338684082
    8. '':'' → logprob: -9.11064338684082
    9. '?' → logprob: -9.11064338684082
    10. '"' → logprob: -9.48564338684082

Token 1557: ' '' (ID: 461)
  Prédit: ''D'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''D' → logprob: -0.00020067949662916362
    2. ''' (adapté à ' '') → logprob: -9.375200271606445
    3. '"D' → logprob: -10.000200271606445
    4. ''?' → logprob: -10.250200271606445
    5. ''-' → logprob: -11.125200271606445
    6. 'D' → logprob: -12.375200271606445
    7. '':' → logprob: -12.375200271606445
    8. '   ' → logprob: -12.625200271606445
    9. '"'' → logprob: -13.625200271606445
    10. ''C' → logprob: -13.750200271606445

Token 1558: 'D' (ID: 35)
  Prédit: ''D'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''D' → logprob: -0.17697004973888397
    2. ''' → logprob: -2.5519700050354004
    3. 'D' → logprob: -3.1769700050354004
    4. ''-' → logprob: -3.3019700050354004
    5. '"D' → logprob: -7.0519700050354
    6. '':' → logprob: -7.3019700050354
    7. '`' → logprob: -7.4269700050354
    8. ''''' → logprob: -7.4269700050354
    9. ''"' → logprob: -7.5519700050354
    10. '0' → logprob: -8.301970481872559

Token 1559: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.008795500732958317
    2. ':' → logprob: -5.258795738220215
    3. ''' → logprob: -5.883795738220215
    4. '=' → logprob: -8.133795738220215
    5. '':'' → logprob: -8.258795738220215
    6. '='' → logprob: -9.883795738220215
    7. '":' → logprob: -9.883795738220215
    8. ' =' → logprob: -10.133795738220215
    9. '```' → logprob: -10.508795738220215
    10. ''D' → logprob: -11.383795738220215

Token 1560: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -3.881560041918419e-05
    2. '0' → logprob: -10.875039100646973
    3. ' '' → logprob: -10.875039100646973
    4. '"' → logprob: -14.125039100646973
    5. '`' → logprob: -16.000038146972656
    6. ' ' → logprob: -17.250038146972656
    7. '('' → logprob: -18.500038146972656
    8. '‘' → logprob: -18.875038146972656
    9. '   ' → logprob: -19.000038146972656
    10. '='' → logprob: -19.250038146972656

Token 1561: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.048595547676086426
    2. ''' → logprob: -3.048595428466797
    3. '1' → logprob: -12.673595428466797
    4. '"' → logprob: -12.798595428466797
    5. '`' → logprob: -14.048595428466797
    6. ' ' → logprob: -14.423595428466797
    7. ' '' → logprob: -14.798595428466797
    8. '')' → logprob: -15.923595428466797
    9. ')' → logprob: -16.798595428466797
    10. '```' → logprob: -17.048595428466797

Token 1562: '',
' (ID: 1214)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.4339037239551544
    2. '',' → logprob: -1.433903694152832
    3. '',
' → logprob: -2.683903694152832
    4. ''}' → logprob: -3.683903694152832
    5. '}' → logprob: -3.933903694152832
    6. ''
' → logprob: -8.308903694152832
    7. '   ' → logprob: -8.808903694152832
    8. '}'' → logprob: -9.683903694152832
    9. '')' → logprob: -10.183903694152832
    10. ',
' → logprob: -10.308903694152832

Token 1563: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.16339720785617828
    2. '   ' → logprob: -2.0383973121643066
    3. '':' → logprob: -4.538397312164307
    4. '',' → logprob: -6.038397312164307
    5. ''D' → logprob: -6.288397312164307
    6. '       ' → logprob: -6.663397312164307
    7. '```' → logprob: -7.163397312164307
    8. '"' → logprob: -7.288397312164307
    9. '`' → logprob: -7.288397312164307
    10. ''-' → logprob: -7.788397312164307

Token 1564: ' '-' (ID: 17489)
  Prédit: ''-'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''-' (adapté à ' '-') → logprob: -0.05132950842380524
    2. ''' → logprob: -3.0513296127319336
    3. '   ' → logprob: -6.051329612731934
    4. '`' → logprob: -9.051329612731934
    5. ''\' → logprob: -9.676329612731934
    6. '-' → logprob: -9.801329612731934
    7. '       ' → logprob: -9.926329612731934
    8. ''D' → logprob: -10.551329612731934
    9. '',' → logprob: -11.301329612731934
    10. '':' → logprob: -11.301329612731934

Token 1565: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.47590208053588867
    2. ''' → logprob: -0.9759020805358887
    3. ':' → logprob: -6.975902080535889
    4. ''-' → logprob: -7.350902080535889
    5. ''D' → logprob: -10.100902557373047
    6. '```' → logprob: -10.100902557373047
    7. '':'' → logprob: -10.100902557373047
    8. '":' → logprob: -10.225902557373047
    9. ' '' → logprob: -10.975902557373047
    10. ''''' → logprob: -11.225902557373047

Token 1566: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -5.180879816180095e-05
    2. ' '' → logprob: -10.000051498413086
    3. '"' → logprob: -13.000051498413086
    4. '`' → logprob: -13.375051498413086
    5. '1' → logprob: -13.625051498413086
    6. ''-' → logprob: -14.000051498413086
    7. ''''' → logprob: -15.000051498413086
    8. '```' → logprob: -15.875051498413086
    9. '0' → logprob: -18.250051498413086
    10. ''s' → logprob: -18.875051498413086

Token 1567: '1' (ID: 16)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.20273377001285553
    2. '1' → logprob: -1.7027337551116943
    3. '0' → logprob: -6.702733993530273
    4. '"' → logprob: -9.702733993530273
    5. ''''' → logprob: -11.077733993530273
    6. '`' → logprob: -11.952733993530273
    7. ' '' → logprob: -12.452733993530273
    8. ' ' → logprob: -13.452733993530273
    9. '')' → logprob: -13.702733993530273
    10. ''-' → logprob: -14.452733993530273

Token 1568: '',
' (ID: 1214)
  Prédit: ''}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''}' → logprob: -0.6665223836898804
    2. '',' → logprob: -1.5415223836898804
    3. ''' → logprob: -1.7915223836898804
    4. '}' → logprob: -2.41652250289917
    5. '',
' → logprob: -4.79152250289917
    6. '}'' → logprob: -5.91652250289917
    7. ':' → logprob: -6.79152250289917
    8. '':' → logprob: -7.16652250289917
    9. ''}
' → logprob: -7.29152250289917
    10. '   ' → logprob: -7.54152250289917

Token 1569: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.539208710193634
    2. '   ' → logprob: -0.914208710193634
    3. ''C' → logprob: -4.664208889007568
    4. '':' → logprob: -7.289208889007568
    5. ''D' → logprob: -7.289208889007568
    6. '`' → logprob: -7.539208889007568
    7. '}' → logprob: -7.539208889007568
    8. ' '' → logprob: -7.539208889007568
    9. '       ' → logprob: -7.664208889007568
    10. 'C' → logprob: -8.16420841217041

Token 1570: ' '' (ID: 461)
  Prédit: ''C'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''C' → logprob: -0.05089488998055458
    2. ''' (adapté à ' '') → logprob: -3.1758949756622314
    3. 'C' → logprob: -4.925894737243652
    4. '   ' → logprob: -8.175894737243652
    5. '"C' → logprob: -8.800894737243652
    6. '`' → logprob: -9.800894737243652
    7. '```' → logprob: -10.550894737243652
    8. ' '' → logprob: -10.675894737243652
    9. '':' → logprob: -11.050894737243652
    10. ''A' → logprob: -12.050894737243652

Token 1571: 'C' (ID: 34)
  Prédit: 'C'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'C' → logprob: -0.26226508617401123
    2. ''C' → logprob: -1.5122650861740112
    3. ''' → logprob: -5.262265205383301
    4. '"C' → logprob: -5.512265205383301
    5. ''''' → logprob: -7.387265205383301
    6. '"' → logprob: -8.8872652053833
    7. '`' → logprob: -9.0122652053833
    8. '"""' → logprob: -10.1372652053833
    9. '"'' → logprob: -10.1372652053833
    10. '```' → logprob: -10.8872652053833

Token 1572: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.05168933793902397
    2. ':' → logprob: -3.676689386367798
    3. ''' → logprob: -4.176689147949219
    4. '['' → logprob: -5.801689147949219
    5. '=' → logprob: -6.051689147949219
    6. '```' → logprob: -6.051689147949219
    7. ' =' → logprob: -7.426689147949219
    8. '':'' → logprob: -8.051689147949219
    9. '[' → logprob: -8.676689147949219
    10. ''s' → logprob: -9.176689147949219

Token 1573: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -7.076218025758862e-05
    2. ' '' → logprob: -9.750070571899414
    3. '"' → logprob: -11.625070571899414
    4. '0' → logprob: -13.000070571899414
    5. '`' → logprob: -14.500070571899414
    6. '```' → logprob: -15.250070571899414
    7. ''D' → logprob: -16.125070571899414
    8. '='' → logprob: -16.125070571899414
    9. ''''' → logprob: -16.625070571899414
    10. '('' → logprob: -16.625070571899414

Token 1574: '0' (ID: 15)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.3868849575519562
    2. '0' → logprob: -1.1368849277496338
    3. '"' → logprob: -12.136884689331055
    4. '`' → logprob: -12.511884689331055
    5. '```' → logprob: -13.386884689331055
    6. '1' → logprob: -13.886884689331055
    7. ' '' → logprob: -14.136884689331055
    8. ''''' → logprob: -14.386884689331055
    9. ' ' → logprob: -15.386884689331055
    10. '')' → logprob: -15.636884689331055

Token 1575: '',
' (ID: 1214)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.573883593082428
    2. '':' → logprob: -1.0738835334777832
    3. '',' → logprob: -3.448883533477783
    4. '   ' → logprob: -3.573883533477783
    5. ''}' → logprob: -3.823883533477783
    6. '}' → logprob: -5.323883533477783
    7. '':
' → logprob: -6.448883533477783
    8. '',
' → logprob: -6.448883533477783
    9. '']' → logprob: -6.573883533477783
    10. ''
' → logprob: -6.948883533477783

Token 1576: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.37170979380607605
    2. '   ' → logprob: -1.2467098236083984
    3. '"' → logprob: -4.621709823608398
    4. '```' → logprob: -5.246709823608398
    5. '`' → logprob: -5.871709823608398
    6. '"'' → logprob: -5.996709823608398
    7. '       ' → logprob: -6.496709823608398
    8. '',' → logprob: -8.746709823608398
    9. ''''' → logprob: -8.746709823608398
    10. '           ' → logprob: -9.496709823608398

Token 1577: ' "'' (ID: 12868)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.3046443462371826
    2. '"'' (adapté à ' "'') → logprob: -1.5546443462371826
    3. '"' → logprob: -3.1796443462371826
    4. '   ' → logprob: -5.304644584655762
    5. '```' → logprob: -6.304644584655762
    6. ''''' → logprob: -6.554644584655762
    7. '''' → logprob: -7.804644584655762
    8. '`' → logprob: -8.054644584655762
    9. ''"' → logprob: -9.054644584655762
    10. ''\' → logprob: -9.054644584655762

Token 1578: '":' (ID: 1243)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.5672314763069153
    2. '':' → logprob: -1.1922314167022705
    3. ':' → logprob: -2.0672314167022705
    4. '":' → logprob: -6.81723165512085
    5. '```' → logprob: -7.31723165512085
    6. '"' → logprob: -7.81723165512085
    7. '']' → logprob: -8.567231178283691
    8. ''''' → logprob: -9.192231178283691
    9. ''s' → logprob: -9.817231178283691
    10. '"'' → logprob: -10.442231178283691

Token 1579: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -7.755678961984813e-05
    2. ' '' → logprob: -10.125077247619629
    3. '"' → logprob: -10.500077247619629
    4. ''''' → logprob: -12.000077247619629
    5. '1' → logprob: -12.875077247619629
    6. '`' → logprob: -15.000077247619629
    7. '"'' → logprob: -15.625077247619629
    8. '```' → logprob: -15.625077247619629
    9. ')' → logprob: -15.875077247619629
    10. '"""' → logprob: -16.375078201293945

Token 1580: '1' (ID: 16)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0031941127963364124
    2. '1' → logprob: -5.753194332122803
    3. ''''' → logprob: -11.753193855285645
    4. '"' → logprob: -11.878193855285645
    5. '`' → logprob: -14.128193855285645
    6. '0' → logprob: -15.503193855285645
    7. '')' → logprob: -15.503193855285645
    8. ' '' → logprob: -15.878193855285645
    9. '```' → logprob: -15.878193855285645
    10. ')' → logprob: -16.50319480895996

Token 1581: '',
' (ID: 1214)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '}' → logprob: -0.13252365589141846
    2. '   ' → logprob: -3.007523536682129
    3. ':' → logprob: -3.257523536682129
    4. ''}' → logprob: -4.757523536682129
    5. ''' → logprob: -5.507523536682129
    6. ']' → logprob: -5.632523536682129
    7. '}
' → logprob: -5.632523536682129
    8. ',' → logprob: -5.757523536682129
    9. '':' → logprob: -5.757523536682129
    10. '```' → logprob: -6.007523536682129

Token 1582: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.3461203873157501
    2. '   ' → logprob: -1.9711203575134277
    3. '       ' → logprob: -2.7211203575134277
    4. '"' → logprob: -3.2211203575134277
    5. '```' → logprob: -4.096120357513428
    6. '`' → logprob: -4.346120357513428
    7. '"'' → logprob: -4.721120357513428
    8. '           ' → logprob: -6.221120357513428
    9. ')' → logprob: -6.596120357513428
    10. '               ' → logprob: -6.721120357513428

Token 1583: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' (adapté à ' '') → logprob: -0.7995263934135437
    2. '   ' → logprob: -0.7995263934135437
    3. '`' → logprob: -3.1745264530181885
    4. 'K' → logprob: -3.5495264530181885
    5. '```' → logprob: -3.9245264530181885
    6. '       ' → logprob: -5.424526214599609
    7. ''A' → logprob: -6.174526214599609
    8. '``' → logprob: -6.799526214599609
    9. '           ' → logprob: -6.924526214599609
    10. 'bit' → logprob: -8.29952621459961

Token 1584: 'K' (ID: 42)
  Prédit: 'K'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'K' → logprob: -0.0001955537445610389
    2. '`' → logprob: -9.375195503234863
    3. ''' → logprob: -9.625195503234863
    4. 'A' → logprob: -10.625195503234863
    5. '"K' → logprob: -12.125195503234863
    6. '```' → logprob: -12.250195503234863
    7. '   ' → logprob: -12.500195503234863
    8. ' K' → logprob: -12.750195503234863
    9. ''A' → logprob: -13.875195503234863
    10. ')' → logprob: -14.125195503234863

Token 1585: '':' (ID: 2337)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.16324926912784576
    2. '':' → logprob: -2.0382492542266846
    3. '=' → logprob: -4.538249492645264
    4. ''' → logprob: -5.913249492645264
    5. '```' → logprob: -6.038249492645264
    6. '['' → logprob: -6.288249492645264
    7. '[' → logprob: -7.663249492645264
    8. '':'' → logprob: -8.163249015808105
    9. '):' → logprob: -8.288249015808105
    10. ''s' → logprob: -8.413249015808105

Token 1586: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.00020866614067927003
    2. ' '' → logprob: -8.500208854675293
    3. '0' → logprob: -13.000208854675293
    4. '"' → logprob: -13.625208854675293
    5. '`' → logprob: -14.125208854675293
    6. '='' → logprob: -15.000208854675293
    7. '```' → logprob: -15.500208854675293
    8. ''''' → logprob: -16.500207901000977
    9. ' ' → logprob: -17.000207901000977
    10. '('' → logprob: -17.125207901000977

Token 1587: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.07889904081821442
    2. ''' → logprob: -2.5788991451263428
    3. '"' → logprob: -12.203899383544922
    4. '`' → logprob: -13.078899383544922
    5. ' ' → logprob: -14.453899383544922
    6. ' '' → logprob: -14.453899383544922
    7. '1' → logprob: -14.828899383544922
    8. '```' → logprob: -15.328899383544922
    9. ''s' → logprob: -15.453899383544922
    10. ''''' → logprob: -16.828899383544922

Token 1588: '',
' (ID: 1214)
  Prédit: '':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '':' → logprob: -0.7185367941856384
    2. ''' → logprob: -1.0935368537902832
    3. ':' → logprob: -3.093536853790283
    4. '']' → logprob: -3.218536853790283
    5. '   ' → logprob: -3.343536853790283
    6. '',' → logprob: -3.593536853790283
    7. '}' → logprob: -4.843536853790283
    8. '```' → logprob: -5.343536853790283
    9. ''}' → logprob: -5.343536853790283
    10. ']' → logprob: -5.468536853790283

Token 1589: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.2227805107831955
    2. '   ' → logprob: -2.222780466079712
    3. '`' → logprob: -3.097780466079712
    4. '```' → logprob: -3.847780466079712
    5. '       ' → logprob: -4.347780704498291
    6. ''O' → logprob: -5.722780704498291
    7. ''U' → logprob: -6.097780704498291
    8. '"' → logprob: -6.597780704498291
    9. '           ' → logprob: -6.597780704498291
    10. '               ' → logprob: -7.222780704498291

Token 1590: ' '' (ID: 461)
  Prédit: ''O'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''O' → logprob: -0.7358075976371765
    2. ''' (adapté à ' '') → logprob: -0.8608075976371765
    3. 'O' → logprob: -3.3608076572418213
    4. '   ' → logprob: -3.4858076572418213
    5. '`' → logprob: -3.8608076572418213
    6. ''o' → logprob: -5.735807418823242
    7. ''A' → logprob: -5.985807418823242
    8. '       ' → logprob: -5.985807418823242
    9. '```' → logprob: -6.360807418823242
    10. ''U' → logprob: -8.110807418823242

Token 1591: 'O' (ID: 46)
  Prédit: 'O'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'O' → logprob: -0.010159993544220924
    2. ''O' → logprob: -4.635159969329834
    3. '`' → logprob: -8.635160446166992
    4. ''' → logprob: -9.260160446166992
    5. '   ' → logprob: -10.260160446166992
    6. '"O' → logprob: -10.885160446166992
    7. 'P' → logprob: -11.135160446166992
    8. '```' → logprob: -11.260160446166992
    9. ''A' → logprob: -11.385160446166992
    10. 'A' → logprob: -11.635160446166992

Token 1592: '':' (ID: 2337)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.7402278780937195
    2. '':' → logprob: -1.1152279376983643
    3. '=' → logprob: -1.9902279376983643
    4. ':' → logprob: -2.9902279376983643
    5. ''=' → logprob: -5.615227699279785
    6. '='' → logprob: -6.115227699279785
    7. ' =' → logprob: -7.615227699279785
    8. '```' → logprob: -7.990227699279785
    9. '':'' → logprob: -8.115227699279785
    10. ')' → logprob: -8.365227699279785

Token 1593: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -6.718606891809031e-05
    2. ' '' → logprob: -9.625066757202148
    3. '1' → logprob: -14.125066757202148
    4. '"' → logprob: -15.250066757202148
    5. '`' → logprob: -16.12506675720215
    6. '('' → logprob: -17.87506675720215
    7. '```' → logprob: -18.25006675720215
    8. ' ' → logprob: -18.50006675720215
    9. '='' → logprob: -18.75006675720215
    10. ''''' → logprob: -18.75006675720215

Token 1594: '1' (ID: 16)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.014168800786137581
    2. '1' → logprob: -4.264168739318848
    3. '0' → logprob: -12.639168739318848
    4. '"' → logprob: -13.889168739318848
    5. ' '' → logprob: -14.639168739318848
    6. '`' → logprob: -15.264168739318848
    7. ''''' → logprob: -16.139169692993164
    8. '```' → logprob: -16.764169692993164
    9. ' ' → logprob: -17.264169692993164
    10. '
' → logprob: -17.514169692993164

Token 1595: '',
' (ID: 1214)
  Prédit: '']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '']' → logprob: -1.1114716529846191
    2. ''' → logprob: -1.2364716529846191
    3. '   ' → logprob: -1.8614716529846191
    4. '':' → logprob: -2.236471652984619
    5. ']' → logprob: -3.361471652984619
    6. '}' → logprob: -3.611471652984619
    7. ':' → logprob: -3.861471652984619
    8. '',' → logprob: -4.111471652984619
    9. '```' → logprob: -5.486471652984619
    10. '       ' → logprob: -5.611471652984619

Token 1596: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.00465606851503253
    2. '```' → logprob: -6.129655838012695
    3. '   ' → logprob: -6.254655838012695
    4. '`' → logprob: -7.879655838012695
    5. '       ' → logprob: -9.254655838012695
    6. ''U' → logprob: -10.004655838012695
    7. '``' → logprob: -11.879655838012695
    8. '"' → logprob: -12.004655838012695
    9. ' '' → logprob: -12.254655838012695
    10. '    ' → logprob: -13.129655838012695

Token 1597: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' (adapté à ' '') → logprob: -0.09253337234258652
    2. '```' → logprob: -3.5925333499908447
    3. '   ' → logprob: -3.7175333499908447
    4. '`' → logprob: -4.217533588409424
    5. ''U' → logprob: -4.717533588409424
    6. '       ' → logprob: -5.092533588409424
    7. ''A' → logprob: -5.592533588409424
    8. 'P' → logprob: -7.467533588409424
    9. '``' → logprob: -7.592533588409424
    10. ''u' → logprob: -7.967533588409424

Token 1598: 'P' (ID: 47)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.23181164264678955
    2. 'A' → logprob: -2.4818115234375
    3. 'P' → logprob: -2.9818115234375
    4. 'U' → logprob: -3.4818115234375
    5. ''A' → logprob: -3.9818115234375
    6. ''U' → logprob: -3.9818115234375
    7. '```' → logprob: -6.6068115234375
    8. '`' → logprob: -6.7318115234375
    9. '   ' → logprob: -7.4818115234375
    10. ''u' → logprob: -7.9818115234375

Token 1599: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.06962381303310394
    2. ''' → logprob: -3.3196237087249756
    3. '=' → logprob: -4.194623947143555
    4. ':' → logprob: -4.694623947143555
    5. '```' → logprob: -5.444623947143555
    6. ''=' → logprob: -7.319623947143555
    7. '='' → logprob: -7.444623947143555
    8. ' =' → logprob: -7.819623947143555
    9. '":' → logprob: -8.069623947143555
    10. '':'' → logprob: -8.569623947143555

Token 1600: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -1.318681188422488e-05
    2. ' '' → logprob: -11.37501335144043
    3. '0' → logprob: -14.00001335144043
    4. '`' → logprob: -14.62501335144043
    5. '"' → logprob: -14.87501335144043
    6. '('' → logprob: -18.50001335144043
    7. '```' → logprob: -18.62501335144043
    8. ' ' → logprob: -19.00001335144043
    9. ''O' → logprob: -19.00001335144043
    10. ''''' → logprob: -19.75001335144043

Token 1601: '0' (ID: 15)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.20142552256584167
    2. '0' → logprob: -1.701425552368164
    3. '"' → logprob: -11.576425552368164
    4. '`' → logprob: -13.451425552368164
    5. ' '' → logprob: -14.326425552368164
    6. ''''' → logprob: -15.451425552368164
    7. ' ' → logprob: -15.576425552368164
    8. '')' → logprob: -15.576425552368164
    9. '```' → logprob: -16.076425552368164
    10. ')' → logprob: -16.451425552368164

Token 1602: '',
' (ID: 1214)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.2832224667072296
    2. '']' → logprob: -1.7832224369049072
    3. ']' → logprob: -3.6582224369049072
    4. '   ' → logprob: -4.158222675323486
    5. '':' → logprob: -4.533222675323486
    6. '['' → logprob: -4.908222675323486
    7. '[' → logprob: -5.658222675323486
    8. '```' → logprob: -5.908222675323486
    9. ')' → logprob: -6.158222675323486
    10. '}' → logprob: -6.408222675323486

Token 1603: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.2253953069448471
    2. '   ' → logprob: -2.1003952026367188
    3. '`' → logprob: -3.6003952026367188
    4. '```' → logprob: -3.6003952026367188
    5. '       ' → logprob: -4.225395202636719
    6. ''U' → logprob: -6.850395202636719
    7. '``' → logprob: -6.975395202636719
    8. ''u' → logprob: -6.975395202636719
    9. '           ' → logprob: -7.225395202636719
    10. '"' → logprob: -7.475395202636719

Token 1604: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' (adapté à ' '') → logprob: -0.21585813164710999
    2. ''U' → logprob: -1.9658581018447876
    3. '   ' → logprob: -3.340858221054077
    4. ''A' → logprob: -4.840857982635498
    5. 'U' → logprob: -5.590857982635498
    6. '```' → logprob: -5.715857982635498
    7. '`' → logprob: -6.590857982635498
    8. '       ' → logprob: -6.965857982635498
    9. 'A' → logprob: -7.215857982635498
    10. ''u' → logprob: -8.090858459472656

Token 1605: 'U' (ID: 52)
  Prédit: ''U'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''U' → logprob: -0.0817984789609909
    2. 'U' → logprob: -2.581798553466797
    3. ''A' → logprob: -5.956798553466797
    4. 'A' → logprob: -8.956798553466797
    5. '`' → logprob: -9.581798553466797
    6. '   ' → logprob: -9.956798553466797
    7. '```' → logprob: -10.581798553466797
    8. ''' → logprob: -10.831798553466797
    9. '``' → logprob: -11.706798553466797
    10. ' ' → logprob: -12.831798553466797

Token 1606: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.4572421908378601
    2. '=' → logprob: -1.4572422504425049
    3. ''' → logprob: -2.207242250442505
    4. ''=' → logprob: -4.582242012023926
    5. ':' → logprob: -5.082242012023926
    6. '```' → logprob: -5.457242012023926
    7. '='' → logprob: -6.457242012023926
    8. ''s' → logprob: -8.082242012023926
    9. '':'' → logprob: -8.332242012023926
    10. ' =' → logprob: -8.457242012023926

Token 1607: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -3.4121114822482923e-06
    2. ' '' → logprob: -13.125003814697266
    3. '"' → logprob: -14.000003814697266
    4. '`' → logprob: -15.000003814697266
    5. '1' → logprob: -16.125003814697266
    6. '0' → logprob: -17.125003814697266
    7. '='' → logprob: -18.125003814697266
    8. '('' → logprob: -18.125003814697266
    9. '```' → logprob: -18.875003814697266
    10. ''''' → logprob: -19.375003814697266

Token 1608: '1' (ID: 16)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0028279386460781097
    2. '1' → logprob: -5.877828121185303
    3. '"' → logprob: -10.877827644348145
    4. '`' → logprob: -13.002827644348145
    5. '0' → logprob: -14.127827644348145
    6. ' '' → logprob: -14.502827644348145
    7. ''''' → logprob: -15.252827644348145
    8. '```' → logprob: -15.877827644348145
    9. '')' → logprob: -16.75282859802246
    10. ''''
' → logprob: -17.00282859802246

Token 1609: '',
' (ID: 1214)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.182481586933136
    2. ''}' → logprob: -2.432481527328491
    3. '}' → logprob: -3.557481527328491
    4. '   ' → logprob: -3.807481527328491
    5. '}'' → logprob: -4.55748176574707
    6. ''
' → logprob: -5.05748176574707
    7. ''}
' → logprob: -5.18248176574707
    8. '}'
' → logprob: -5.80748176574707
    9. '```' → logprob: -7.18248176574707
    10. '',' → logprob: -7.93248176574707

Token 1610: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2714200019836426
    2. ''' → logprob: -1.8964200019836426
    3. '```' → logprob: -2.8964200019836426
    4. '       ' → logprob: -5.146420001983643
    5. '']' → logprob: -5.271420001983643
    6. '`' → logprob: -5.646420001983643
    7. '}' → logprob: -5.771420001983643
    8. ']' → logprob: -5.896420001983643
    9. '}
' → logprob: -6.021420001983643
    10. '':' → logprob: -6.146420001983643

Token 1611: ' '' (ID: 461)
  Prédit: ''A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''A' → logprob: -0.2316451221704483
    2. ''' (adapté à ' '') → logprob: -1.731645107269287
    3. '   ' → logprob: -4.231645107269287
    4. 'A' → logprob: -4.356645107269287
    5. '```' → logprob: -6.481645107269287
    6. ''a' → logprob: -8.231645584106445
    7. '`' → logprob: -8.356645584106445
    8. '       ' → logprob: -8.981645584106445
    9. '"A' → logprob: -10.106645584106445
    10. '']' → logprob: -10.231645584106445

Token 1612: 'A' (ID: 32)
  Prédit: 'A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.20168259739875793
    2. ''A' → logprob: -1.7016825675964355
    3. ''' → logprob: -8.701683044433594
    4. '"A' → logprob: -9.951683044433594
    5. '   ' → logprob: -10.951683044433594
    6. ''a' → logprob: -11.326683044433594
    7. '```' → logprob: -11.451683044433594
    8. '`' → logprob: -12.576683044433594
    9. '')' → logprob: -12.826683044433594
    10. ' A' → logprob: -13.201683044433594

Token 1613: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.041318025439977646
    2. ''' → logprob: -3.541317939758301
    3. '```' → logprob: -5.166317939758301
    4. '=' → logprob: -6.541317939758301
    5. '['' → logprob: -6.666317939758301
    6. ':' → logprob: -6.666317939758301
    7. '":' → logprob: -7.541317939758301
    8. ' =' → logprob: -8.0413179397583
    9. '='' → logprob: -8.6663179397583
    10. '']' → logprob: -8.9163179397583

Token 1614: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -1.5213274309644476e-05
    2. ' '' → logprob: -11.375015258789062
    3. '"' → logprob: -13.000015258789062
    4. '`' → logprob: -14.375015258789062
    5. '0' → logprob: -14.625015258789062
    6. ''A' → logprob: -15.500015258789062
    7. '```' → logprob: -16.375015258789062
    8. '='' → logprob: -17.500015258789062
    9. '('' → logprob: -17.625015258789062
    10. '’' → logprob: -18.375015258789062

Token 1615: '0' (ID: 15)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0002084277366520837
    2. '0' → logprob: -8.500208854675293
    3. '`' → logprob: -13.500208854675293
    4. '"' → logprob: -13.625208854675293
    5. ' '' → logprob: -13.750208854675293
    6. ''''' → logprob: -14.125208854675293
    7. '```' → logprob: -15.125208854675293
    8. '='' → logprob: -15.875208854675293
    9. '')' → logprob: -16.875207901000977
    10. '’' → logprob: -17.000207901000977

Token 1616: '',
' (ID: 1214)
  Prédit: ''}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''}' → logprob: -0.9173016548156738
    2. '}' → logprob: -1.1673016548156738
    3. ''' → logprob: -1.9173016548156738
    4. '   ' → logprob: -2.917301654815674
    5. ''}
' → logprob: -2.917301654815674
    6. '}
' → logprob: -4.167301654815674
    7. '}'' → logprob: -4.792301654815674
    8. ''
' → logprob: -5.417301654815674
    9. '}'
' → logprob: -5.917301654815674
    10. '```' → logprob: -7.042301654815674

Token 1617: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.22649037837982178
    2. 'bits' → logprob: -1.9764903783798218
    3. '```' → logprob: -3.3514904975891113
    4. 'for' → logprob: -3.6014904975891113
    5. 'bit' → logprob: -6.976490497589111
    6. '       ' → logprob: -8.101490020751953
    7. 'decoded' → logprob: -8.726490020751953
    8. '``' → logprob: -9.476490020751953
    9. '
' → logprob: -9.851490020751953
    10. 'tokens' → logprob: -9.976490020751953

Token 1618: ' '' (ID: 461)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.2005189657211304
    2. 'bits' → logprob: -1.2005189657211304
    3. '```' → logprob: -1.2005189657211304
    4. 'for' → logprob: -2.82551908493042
    5. '       ' → logprob: -3.95051908493042
    6. 'bit' → logprob: -4.95051908493042
    7. '`' → logprob: -5.57551908493042
    8. '``' → logprob: -5.95051908493042
    9. ' for' → logprob: -6.57551908493042
    10. '"' → logprob: -7.32551908493042

Token 1619: 'L' (ID: 43)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.2863568365573883
    2. 'bit' → logprob: -2.5363569259643555
    3. 'bits' → logprob: -2.7863569259643555
    4. 'for' → logprob: -4.0363569259643555
    5. ''\' → logprob: -4.0363569259643555
    6. '':' → logprob: -4.6613569259643555
    7. '`' → logprob: -4.9113569259643555
    8. '```' → logprob: -4.9113569259643555
    9. '   ' → logprob: -5.1613569259643555
    10. '']' → logprob: -5.1613569259643555

Token 1620: '':' (ID: 2337)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.7123627662658691
    2. '=' → logprob: -1.3373627662658691
    3. '':' → logprob: -1.9623627662658691
    4. '']' → logprob: -2.837362766265869
    5. ':' → logprob: -4.087362766265869
    6. ' =' → logprob: -4.712362766265869
    7. '```' → logprob: -4.837362766265869
    8. ']' → logprob: -5.587362766265869
    9. ''=' → logprob: -5.962362766265869
    10. '='' → logprob: -6.462362766265869

Token 1621: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.00014525714504998177
    2. ' '' → logprob: -9.000144958496094
    3. '1' → logprob: -11.875144958496094
    4. '"' → logprob: -12.250144958496094
    5. '`' → logprob: -12.500144958496094
    6. '```' → logprob: -12.750144958496094
    7. ''''' → logprob: -14.000144958496094
    8. '   ' → logprob: -14.625144958496094
    9. ''A' → logprob: -15.250144958496094
    10. '0' → logprob: -15.625144958496094

Token 1622: '1' (ID: 16)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.002385280095040798
    2. '1' → logprob: -6.252385139465332
    3. '0' → logprob: -8.127385139465332
    4. '"' → logprob: -9.502385139465332
    5. ' '' → logprob: -10.502385139465332
    6. '```' → logprob: -10.877385139465332
    7. '`' → logprob: -11.252385139465332
    8. ''''' → logprob: -12.377385139465332
    9. '')' → logprob: -12.502385139465332
    10. ''M' → logprob: -13.002385139465332

Token 1623: '',
' (ID: 1214)
  Prédit: '']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '']' → logprob: -0.4402744174003601
    2. ''' → logprob: -1.3152744770050049
    3. '']
' → logprob: -3.440274477005005
    4. ']' → logprob: -3.565274477005005
    5. '```' → logprob: -4.065274238586426
    6. ''
' → logprob: -6.440274238586426
    7. ':' → logprob: -6.565274238586426
    8. '"]' → logprob: -6.565274238586426
    9. '   ' → logprob: -7.190274238586426
    10. '}' → logprob: -7.565274238586426

Token 1624: '   ' (ID: 271)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.9393178820610046
    2. '   ' → logprob: -1.1893179416656494
    3. 'bits' → logprob: -1.4393179416656494
    4. '```' → logprob: -3.0643179416656494
    5. 'bit' → logprob: -5.06431770324707
    6. 'char' → logprob: -5.06431770324707
    7. '       ' → logprob: -5.56431770324707
    8. 'i' → logprob: -6.68931770324707
    9. ' for' → logprob: -6.81431770324707
    10. '`' → logprob: -6.93931770324707

Token 1625: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' (adapté à ' '') → logprob: -1.331870675086975
    2. 'for' → logprob: -1.456870675086975
    3. '   ' → logprob: -1.831870675086975
    4. 'bits' → logprob: -2.7068705558776855
    5. '```' → logprob: -2.7068705558776855
    6. '']' → logprob: -2.8318705558776855
    7. '`' → logprob: -2.9568705558776855
    8. 'bit' → logprob: -3.7068705558776855
    9. '       ' → logprob: -4.0818705558776855
    10. ']' → logprob: -4.9568705558776855

Token 1626: 'M' (ID: 44)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.7416952252388
    2. 'bits' → logprob: -1.7416951656341553
    3. 'bit' → logprob: -2.2416951656341553
    4. '   ' → logprob: -2.9916951656341553
    5. '```' → logprob: -3.3666951656341553
    6. '`' → logprob: -3.6166951656341553
    7. 'char' → logprob: -3.7416951656341553
    8. 'L' → logprob: -3.8666951656341553
    9. ''A' → logprob: -4.241695404052734
    10. 'for' → logprob: -4.366695404052734

Token 1627: '':' (ID: 2337)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.003862543497234583
    2. ' =' → logprob: -6.378862380981445
    3. '```' → logprob: -7.253862380981445
    4. ''' → logprob: -7.378862380981445
    5. ':' → logprob: -7.878862380981445
    6. ''=' → logprob: -8.503862380981445
    7. '':' → logprob: -9.878862380981445
    8. '='' → logprob: -10.378862380981445
    9. ''s' → logprob: -10.628862380981445
    10. '`' → logprob: -10.878862380981445

Token 1628: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -3.0948158382670954e-05
    2. ''M' → logprob: -11.375030517578125
    3. '`' → logprob: -12.000030517578125
    4. ' '' → logprob: -12.125030517578125
    5. '0' → logprob: -12.625030517578125
    6. '```' → logprob: -13.125030517578125
    7. ''m' → logprob: -14.250030517578125
    8. ''L' → logprob: -14.750030517578125
    9. ''A' → logprob: -15.000030517578125
    10. ''O' → logprob: -15.125030517578125

Token 1629: '0' (ID: 15)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.06298643350601196
    2. '0' → logprob: -2.812986373901367
    3. '```' → logprob: -7.812986373901367
    4. '"' → logprob: -8.062986373901367
    5. '`' → logprob: -8.562986373901367
    6. ''M' → logprob: -10.562986373901367
    7. ''''' → logprob: -11.312986373901367
    8. '``' → logprob: -11.562986373901367
    9. ''O' → logprob: -11.562986373901367
    10. '{
' → logprob: -12.062986373901367

Token 1630: '',
' (ID: 1214)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.621583104133606
    2. '']' → logprob: -0.871583104133606
    3. '   ' → logprob: -4.246582984924316
    4. '```' → logprob: -4.871582984924316
    5. '}' → logprob: -5.121582984924316
    6. ']' → logprob: -5.371582984924316
    7. '',' → logprob: -5.871582984924316
    8. ''}' → logprob: -6.621582984924316
    9. '"]' → logprob: -7.246582984924316
    10. '':' → logprob: -7.246582984924316

Token 1631: '   ' (ID: 271)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.2519974708557129
    2. '   ' → logprob: -2.126997470855713
    3. '```' → logprob: -2.626997470855713
    4. 'for' → logprob: -4.251997470855713
    5. 'bit' → logprob: -4.251997470855713
    6. '``' → logprob: -7.001997470855713
    7. 'char' → logprob: -7.876997470855713
    8. 'decoded' → logprob: -7.876997470855713
    9. '`' → logprob: -8.001996994018555
    10. ' bits' → logprob: -8.626996994018555

Token 1632: ' '' (ID: 461)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.2048838138580322
    2. 'for' → logprob: -1.2048838138580322
    3. '       ' → logprob: -2.2048838138580322
    4. '```' → logprob: -2.2048838138580322
    5. 'bits' → logprob: -2.4548838138580322
    6. ''' (adapté à ' '') → logprob: -3.2048838138580322
    7. '`' → logprob: -3.9548838138580322
    8. 'bit' → logprob: -4.079883575439453
    9. ''\' → logprob: -5.079883575439453
    10. 'char' → logprob: -5.954883575439453

Token 1633: 'G' (ID: 38)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.1350282430648804
    2. 'bits' → logprob: -1.1350282430648804
    3. ''' → logprob: -2.01002836227417
    4. '   ' → logprob: -2.51002836227417
    5. '```' → logprob: -2.88502836227417
    6. 'bit' → logprob: -3.63502836227417
    7. '`' → logprob: -4.13502836227417
    8. 'char' → logprob: -5.38502836227417
    9. ''\' → logprob: -5.51002836227417
    10. ''b' → logprob: -5.63502836227417

Token 1634: '':' (ID: 2337)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.022460494190454483
    2. ''' → logprob: -4.147460460662842
    3. ''=' → logprob: -6.147460460662842
    4. '```' → logprob: -6.772460460662842
    5. ' =' → logprob: -7.022460460662842
    6. ':' → logprob: -7.397460460662842
    7. '':' → logprob: -7.397460460662842
    8. ''s' → logprob: -8.2724609375
    9. '['' → logprob: -9.0224609375
    10. '='' → logprob: -9.0224609375

Token 1635: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.00046272401232272387
    2. ' '' → logprob: -7.750462532043457
    3. '`' → logprob: -11.375462532043457
    4. '"' → logprob: -11.375462532043457
    5. '```' → logprob: -11.875462532043457
    6. ''s' → logprob: -14.750462532043457
    7. '='' → logprob: -15.375462532043457
    8. ' =' → logprob: -15.500462532043457
    9. '1' → logprob: -15.500462532043457
    10. ''''' → logprob: -15.625462532043457

Token 1636: '1' (ID: 16)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.00038682064041495323
    2. '1' → logprob: -8.000387191772461
    3. ' '' → logprob: -11.125387191772461
    4. '```' → logprob: -11.375387191772461
    5. '`' → logprob: -12.000387191772461
    6. '"' → logprob: -12.000387191772461
    7. ''''' → logprob: -12.625387191772461
    8. '0' → logprob: -13.000387191772461
    9. ''A' → logprob: -14.125387191772461
    10. ''L' → logprob: -14.500387191772461

Token 1637: '',
' (ID: 1214)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '```' → logprob: -0.8986321687698364
    2. ''' → logprob: -1.2736321687698364
    3. '']' → logprob: -1.6486321687698364
    4. ']' → logprob: -3.273632049560547
    5. '   ' → logprob: -3.273632049560547
    6. '}' → logprob: -4.773632049560547
    7. ''}' → logprob: -5.023632049560547
    8. '``' → logprob: -5.398632049560547
    9. '`' → logprob: -5.523632049560547
    10. '       ' → logprob: -5.648632049560547

Token 1638: '   ' (ID: 271)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.7216560244560242
    2. '   ' → logprob: -0.9716560244560242
    3. '```' → logprob: -2.596656084060669
    4. 'for' → logprob: -2.971656084060669
    5. 'bit' → logprob: -5.09665584564209
    6. '``' → logprob: -7.22165584564209
    7. '       ' → logprob: -7.34665584564209
    8. '`' → logprob: -7.47165584564209
    9. ' for' → logprob: -7.84665584564209
    10. 'char' → logprob: -8.09665584564209

Token 1639: ' '' (ID: 461)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7264795303344727
    2. '```' → logprob: -1.3514795303344727
    3. '       ' → logprob: -2.2264795303344727
    4. 'bits' → logprob: -3.1014795303344727
    5. 'for' → logprob: -3.3514795303344727
    6. ''' (adapté à ' '') → logprob: -3.8514795303344727
    7. '`' → logprob: -4.101479530334473
    8. '"' → logprob: -4.476479530334473
    9. '``' → logprob: -5.351479530334473
    10. ''\' → logprob: -5.726479530334473

Token 1640: 'Z' (ID: 57)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.055848658084869385
    2. 'Z' → logprob: -3.8058485984802246
    3. '']' → logprob: -5.055848598480225
    4. '`' → logprob: -5.430848598480225
    5. '   ' → logprob: -5.680848598480225
    6. '```' → logprob: -5.805848598480225
    7. ''N' → logprob: -6.055848598480225
    8. '"' → logprob: -7.055848598480225
    9. '':' → logprob: -7.305848598480225
    10. ''A' → logprob: -7.305848598480225

Token 1641: '':' (ID: 2337)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.15914011001586914
    2. '':' → logprob: -3.034140110015869
    3. ':' → logprob: -3.159140110015869
    4. '```' → logprob: -3.909140110015869
    5. ''' → logprob: -4.034140110015869
    6. ' =' → logprob: -4.534140110015869
    7. '='' → logprob: -5.534140110015869
    8. ''=' → logprob: -5.909140110015869
    9. '`' → logprob: -8.409139633178711
    10. '":' → logprob: -8.534139633178711

Token 1642: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.000158842682139948
    2. ' '' → logprob: -9.50015926361084
    3. '0' → logprob: -10.37515926361084
    4. '`' → logprob: -10.75015926361084
    5. '```' → logprob: -11.00015926361084
    6. '"' → logprob: -11.37515926361084
    7. ''A' → logprob: -14.12515926361084
    8. ''''' → logprob: -15.12515926361084
    9. '['' → logprob: -15.50015926361084
    10. '``' → logprob: -15.62515926361084

Token 1643: '0' (ID: 15)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0006342819542624056
    2. '0' → logprob: -7.37563419342041
    3. '```' → logprob: -13.00063419342041
    4. '`' → logprob: -13.37563419342041
    5. ' '' → logprob: -13.37563419342041
    6. '"' → logprob: -13.62563419342041
    7. ''''' → logprob: -15.00063419342041
    8. '='' → logprob: -15.37563419342041
    9. '’' → logprob: -16.625635147094727
    10. '110' → logprob: -16.750635147094727

Token 1644: '',
' (ID: 1214)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.053765736520290375
    2. '':' → logprob: -3.3037657737731934
    3. ''}' → logprob: -5.053765773773193
    4. '}' → logprob: -5.428765773773193
    5. ''
' → logprob: -6.428765773773193
    6. '']' → logprob: -7.428765773773193
    7. '':
' → logprob: -7.553765773773193
    8. ''}
' → logprob: -7.553765773773193
    9. '```' → logprob: -7.678765773773193
    10. '}'' → logprob: -8.303765296936035

Token 1645: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.847011148929596
    2. 'bits' → logprob: -0.847011148929596
    3. '```' → logprob: -2.472011089324951
    4. 'for' → logprob: -3.222011089324951
    5. 'bit' → logprob: -4.472011089324951
    6. '       ' → logprob: -6.472011089324951
    7. '`' → logprob: -6.597011089324951
    8. '``' → logprob: -6.972011089324951
    9. ' bits' → logprob: -7.597011089324951
    10. 'b' → logprob: -7.722011089324951

Token 1646: ' '' (ID: 461)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.39521390199661255
    2. '       ' → logprob: -1.8952138423919678
    3. '```' → logprob: -2.2702138423919678
    4. 'for' → logprob: -3.0202138423919678
    5. 'bits' → logprob: -4.645214080810547
    6. '`' → logprob: -5.020214080810547
    7. ' for' → logprob: -6.145214080810547
    8. '``' → logprob: -6.395214080810547
    9. ''' (adapté à ' '') → logprob: -6.770214080810547
    10. 'bit' → logprob: -7.395214080810547

Token 1647: 'N' (ID: 45)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.06254364550113678
    2. ''N' → logprob: -3.6875436305999756
    3. 'N' → logprob: -4.062543869018555
    4. '```' → logprob: -5.687543869018555
    5. '`' → logprob: -6.187543869018555
    6. '   ' → logprob: -6.437543869018555
    7. ' '' → logprob: -6.687543869018555
    8. ''\' → logprob: -6.812543869018555
    9. '"' → logprob: -6.812543869018555
    10. ''
' → logprob: -7.187543869018555

Token 1648: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.2984773516654968
    2. ''' → logprob: -2.0484774112701416
    3. '=' → logprob: -3.1734774112701416
    4. ':' → logprob: -3.1734774112701416
    5. '```' → logprob: -3.4234774112701416
    6. ''=' → logprob: -5.0484771728515625
    7. '='' → logprob: -6.4234771728515625
    8. '":' → logprob: -6.6734771728515625
    9. '':'' → logprob: -7.2984771728515625
    10. ' =' → logprob: -7.2984771728515625

Token 1649: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.00026979928952641785
    2. ' '' → logprob: -9.250269889831543
    3. '```' → logprob: -9.500269889831543
    4. '`' → logprob: -9.625269889831543
    5. '"' → logprob: -11.125269889831543
    6. '0' → logprob: -11.500269889831543
    7. '1' → logprob: -12.250269889831543
    8. '``' → logprob: -14.000269889831543
    9. ''A' → logprob: -15.125269889831543
    10. ' ' → logprob: -15.625269889831543

Token 1650: '1' (ID: 16)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.002225310541689396
    2. '1' → logprob: -6.127225399017334
    3. '`' → logprob: -11.002224922180176
    4. '```' → logprob: -11.877224922180176
    5. '0' → logprob: -12.002224922180176
    6. ' '' → logprob: -12.252224922180176
    7. '"' → logprob: -12.877224922180176
    8. ''A' → logprob: -14.752224922180176
    9. ''N' → logprob: -14.877224922180176
    10. ''''' → logprob: -15.377224922180176

Token 1651: '',
' (ID: 1214)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.15471795201301575
    2. '':' → logprob: -2.1547179222106934
    3. ''}' → logprob: -4.404717922210693
    4. '}' → logprob: -4.904717922210693
    5. '```' → logprob: -5.654717922210693
    6. '']' → logprob: -6.904717922210693
    7. '}'' → logprob: -7.404717922210693
    8. ''
' → logprob: -7.654717922210693
    9. '':
' → logprob: -7.904717922210693
    10. ''}
' → logprob: -8.154718399047852

Token 1652: '   ' (ID: 271)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.46290576457977295
    2. '   ' → logprob: -1.087905764579773
    3. '       ' → logprob: -4.0879058837890625
    4. '``' → logprob: -5.2129058837890625
    5. '`' → logprob: -5.4629058837890625
    6. 'bits' → logprob: -5.8379058837890625
    7. 'for' → logprob: -5.8379058837890625
    8. ' for' → logprob: -8.087905883789062
    9. 'bit' → logprob: -8.462905883789062
    10. '           ' → logprob: -8.962905883789062

Token 1653: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' (adapté à ' '') → logprob: -0.20896852016448975
    2. '   ' → logprob: -2.0839686393737793
    3. '```' → logprob: -3.4589686393737793
    4. '}
' → logprob: -5.083968639373779
    5. '}' → logprob: -5.333968639373779
    6. '']' → logprob: -5.458968639373779
    7. '       ' → logprob: -5.708968639373779
    8. '`' → logprob: -6.208968639373779
    9. '``' → logprob: -6.708968639373779
    10. ''b' → logprob: -6.833968639373779

Token 1654: 'F' (ID: 37)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.08878796547651291
    2. 'bit' → logprob: -3.7137880325317383
    3. 'for' → logprob: -4.713788032531738
    4. '   ' → logprob: -4.963788032531738
    5. '```' → logprob: -4.963788032531738
    6. '`' → logprob: -5.088788032531738
    7. 'b' → logprob: -5.463788032531738
    8. 'F' → logprob: -5.588788032531738
    9. ''b' → logprob: -5.713788032531738
    10. '']' → logprob: -5.838788032531738

Token 1655: '':' (ID: 2337)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -1.0786619186401367
    2. '':' → logprob: -1.0786619186401367
    3. ''' → logprob: -1.9536619186401367
    4. ':' → logprob: -2.4536619186401367
    5. '```' → logprob: -2.8286619186401367
    6. ' =' → logprob: -4.328661918640137
    7. ''=' → logprob: -4.578661918640137
    8. '='' → logprob: -5.578661918640137
    9. ''s' → logprob: -6.328661918640137
    10. '`' → logprob: -7.203661918640137

Token 1656: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.00019269285257905722
    2. ' '' → logprob: -8.875192642211914
    3. '```' → logprob: -10.500192642211914
    4. '`' → logprob: -11.375192642211914
    5. '"' → logprob: -11.375192642211914
    6. '0' → logprob: -14.625192642211914
    7. '='' → logprob: -15.125192642211914
    8. ')' → logprob: -15.250192642211914
    9. '=' → logprob: -15.750192642211914
    10. '``' → logprob: -15.875192642211914

Token 1657: '0' (ID: 15)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0005006087594665587
    2. '0' → logprob: -7.625500679016113
    3. '`' → logprob: -11.875500679016113
    4. '"' → logprob: -13.125500679016113
    5. '```' → logprob: -13.375500679016113
    6. ' '' → logprob: -13.625500679016113
    7. ''''' → logprob: -15.125500679016113
    8. '['' → logprob: -16.000499725341797
    9. '='' → logprob: -16.625499725341797
    10. '’' → logprob: -16.750499725341797

Token 1658: '',
' (ID: 1214)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.5364655256271362
    2. '':' → logprob: -1.5364655256271362
    3. '']' → logprob: -2.411465644836426
    4. '}' → logprob: -3.661465644836426
    5. '   ' → logprob: -3.911465644836426
    6. ''}' → logprob: -4.036465644836426
    7. '```' → logprob: -4.536465644836426
    8. '':
' → logprob: -4.786465644836426
    9. ''
' → logprob: -5.036465644836426
    10. ':' → logprob: -5.786465644836426

Token 1659: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5987246632575989
    2. '```' → logprob: -0.9737246632575989
    3. '       ' → logprob: -3.473724603652954
    4. 'for' → logprob: -3.723724603652954
    5. '`' → logprob: -4.723724842071533
    6. 'bits' → logprob: -5.723724842071533
    7. '``' → logprob: -6.098724842071533
    8. 'i' → logprob: -7.348724842071533
    9. ' for' → logprob: -7.473724842071533
    10. 'bit' → logprob: -7.973724842071533

Token 1660: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' (adapté à ' '') → logprob: -0.23755398392677307
    2. '   ' → logprob: -2.1125540733337402
    3. '```' → logprob: -2.9875540733337402
    4. '       ' → logprob: -4.61255407333374
    5. '']' → logprob: -4.86255407333374
    6. '`' → logprob: -5.48755407333374
    7. ''b' → logprob: -6.11255407333374
    8. ')' → logprob: -6.61255407333374
    9. 'bit' → logprob: -6.61255407333374
    10. '':' → logprob: -6.61255407333374

Token 1661: 'J' (ID: 41)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.11755543202161789
    2. 'J' → logprob: -2.2425553798675537
    3. ''S' → logprob: -5.742555618286133
    4. '   ' → logprob: -7.492555618286133
    5. '```' → logprob: -8.492555618286133
    6. '`' → logprob: -8.867555618286133
    7. ''D' → logprob: -8.867555618286133
    8. '#' → logprob: -9.742555618286133
    9. '       ' → logprob: -9.992555618286133
    10. '']' → logprob: -10.367555618286133

Token 1662: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.9017999172210693
    2. ':' → logprob: -1.0267999172210693
    3. ''' → logprob: -1.6517999172210693
    4. '```' → logprob: -3.5267999172210693
    5. '=' → logprob: -5.026800155639648
    6. '']' → logprob: -6.401800155639648
    7. ''=' → logprob: -6.651800155639648
    8. '='' → logprob: -7.026800155639648
    9. ''s' → logprob: -7.151800155639648
    10. '['' → logprob: -7.401800155639648

Token 1663: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -3.881560041918419e-05
    2. ' '' → logprob: -10.375039100646973
    3. '```' → logprob: -12.750039100646973
    4. '`' → logprob: -13.625039100646973
    5. ''A' → logprob: -13.875039100646973
    6. '   ' → logprob: -14.625039100646973
    7. '0' → logprob: -15.125039100646973
    8. ''S' → logprob: -15.125039100646973
    9. ''O' → logprob: -15.250039100646973
    10. ''''' → logprob: -15.375039100646973

Token 1664: '1' (ID: 16)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.003546497318893671
    2. '1' → logprob: -5.753546714782715
    3. '0' → logprob: -8.128546714782715
    4. '`' → logprob: -10.753546714782715
    5. ''A' → logprob: -11.503546714782715
    6. '```' → logprob: -11.753546714782715
    7. '"' → logprob: -12.128546714782715
    8. ' '' → logprob: -12.378546714782715
    9. ''''' → logprob: -12.753546714782715
    10. '']' → logprob: -13.003546714782715

Token 1665: '',
' (ID: 1214)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.4922194182872772
    2. '':' → logprob: -1.8672194480895996
    3. '']' → logprob: -2.7422194480895996
    4. ':' → logprob: -2.7422194480895996
    5. '}' → logprob: -3.1172194480895996
    6. '```' → logprob: -3.6172194480895996
    7. ''}' → logprob: -4.4922194480896
    8. '   ' → logprob: -5.3672194480896
    9. ']' → logprob: -5.6172194480896
    10. '':
' → logprob: -5.9922194480896

Token 1666: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7061088681221008
    2. '```' → logprob: -1.206108808517456
    3. 'bits' → logprob: -1.956108808517456
    4. 'for' → logprob: -3.456108808517456
    5. 'bit' → logprob: -4.581109046936035
    6. '``' → logprob: -4.831109046936035
    7. '`' → logprob: -5.081109046936035
    8. '       ' → logprob: -5.456109046936035
    9. 'b' → logprob: -5.956109046936035
    10. ''' → logprob: -7.081109046936035

Token 1667: ' '' (ID: 461)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.3532198667526245
    2. 'for' → logprob: -1.3532198667526245
    3. ''' (adapté à ' '') → logprob: -1.9782198667526245
    4. '```' → logprob: -1.9782198667526245
    5. 'bit' → logprob: -2.603219985961914
    6. 'bits' → logprob: -2.728219985961914
    7. 'b' → logprob: -4.728219985961914
    8. '`' → logprob: -4.728219985961914
    9. ''b' → logprob: -4.853219985961914
    10. '       ' → logprob: -4.853219985961914

Token 1668: 'W' (ID: 54)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.32827043533325195
    2. 'W' → logprob: -1.828270435333252
    3. 'bit' → logprob: -2.578270435333252
    4. '`' → logprob: -4.828270435333252
    5. '```' → logprob: -4.828270435333252
    6. 'line' → logprob: -5.703270435333252
    7. '   ' → logprob: -5.828270435333252
    8. 'for' → logprob: -6.328270435333252
    9. ')' → logprob: -6.453270435333252
    10. '']' → logprob: -6.703270435333252

Token 1669: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.11417851597070694
    2. ''' → logprob: -2.864178419113159
    3. ':' → logprob: -3.239178419113159
    4. '```' → logprob: -5.114178657531738
    5. '=' → logprob: -5.739178657531738
    6. ''=' → logprob: -7.114178657531738
    7. ''s' → logprob: -7.989178657531738
    8. ' =' → logprob: -8.239178657531738
    9. '='' → logprob: -8.239178657531738
    10. '']' → logprob: -8.489178657531738

Token 1670: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0019458913011476398
    2. ' '' → logprob: -6.251945972442627
    3. '0' → logprob: -12.126945495605469
    4. '"' → logprob: -12.626945495605469
    5. '`' → logprob: -13.001945495605469
    6. '```' → logprob: -13.001945495605469
    7. '='' → logprob: -14.626945495605469
    8. ' ' → logprob: -14.751945495605469
    9. '('' → logprob: -14.751945495605469
    10. ' ' → logprob: -15.126945495605469

Token 1671: '0' (ID: 15)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.002578632440418005
    2. '0' → logprob: -6.1275787353515625
    3. '```' → logprob: -9.252578735351562
    4. ' '' → logprob: -9.377578735351562
    5. '`' → logprob: -9.877578735351562
    6. '"' → logprob: -10.502578735351562
    7. ''O' → logprob: -11.002578735351562
    8. '']' → logprob: -11.127578735351562
    9. ''o' → logprob: -11.752578735351562
    10. ''b' → logprob: -11.877578735351562

Token 1672: '',
' (ID: 1214)
  Prédit: '']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '']' → logprob: -0.24459001421928406
    2. ''' → logprob: -2.2445900440216064
    3. '']
' → logprob: -3.2445900440216064
    4. ']' → logprob: -3.9945900440216064
    5. '']:
' → logprob: -3.9945900440216064
    6. '}' → logprob: -4.619589805603027
    7. '   ' → logprob: -4.994589805603027
    8. '```' → logprob: -5.494589805603027
    9. ''}' → logprob: -6.494589805603027
    10. '}
' → logprob: -6.494589805603027

Token 1673: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5013788938522339
    2. '```' → logprob: -1.1263788938522339
    3. 'bits' → logprob: -3.6263790130615234
    4. 'for' → logprob: -4.126379013061523
    5. '       ' → logprob: -4.501379013061523
    6. 'bit' → logprob: -5.376379013061523
    7. '``' → logprob: -5.751379013061523
    8. '`' → logprob: -6.001379013061523
    9. ''' → logprob: -6.126379013061523
    10. 'b' → logprob: -6.876379013061523

Token 1674: ' '' (ID: 461)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8728129267692566
    2. ''' (adapté à ' '') → logprob: -1.4978129863739014
    3. '```' → logprob: -1.7478129863739014
    4. 'for' → logprob: -2.2478129863739014
    5. '']' → logprob: -3.7478129863739014
    6. '       ' → logprob: -4.997812747955322
    7. 'bit' → logprob: -4.997812747955322
    8. '':' → logprob: -5.247812747955322
    9. '``' → logprob: -5.372812747955322
    10. '
' → logprob: -5.622812747955322

Token 1675: 'E' (ID: 36)
  Prédit: 'E'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'E' → logprob: -0.7324649095535278
    2. 'for' → logprob: -1.1074649095535278
    3. ''' → logprob: -2.8574647903442383
    4. 'bit' → logprob: -3.7324647903442383
    5. 'ch' → logprob: -3.9824647903442383
    6. '```' → logprob: -4.107464790344238
    7. 'line' → logprob: -4.232464790344238
    8. '#' → logprob: -4.857464790344238
    9. ''E' → logprob: -4.857464790344238
    10. '']' → logprob: -4.857464790344238

Token 1676: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.011971610598266125
    2. ''' → logprob: -4.511971473693848
    3. ':' → logprob: -8.136971473693848
    4. '']' → logprob: -8.761971473693848
    5. '']:' → logprob: -8.761971473693848
    6. '['' → logprob: -9.511971473693848
    7. '":' → logprob: -9.636971473693848
    8. '```' → logprob: -9.886971473693848
    9. '=' → logprob: -10.386971473693848
    10. ' =' → logprob: -10.511971473693848

Token 1677: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.00013095269969198853
    2. ' '' → logprob: -9.000130653381348
    3. '```' → logprob: -13.125130653381348
    4. '`' → logprob: -13.250130653381348
    5. '"' → logprob: -13.250130653381348
    6. '1' → logprob: -14.375130653381348
    7. ')' → logprob: -14.875130653381348
    8. ''''' → logprob: -15.375130653381348
    9. ' ' → logprob: -15.750130653381348
    10. '=' → logprob: -16.000131607055664

Token 1678: '1' (ID: 16)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0012907128548249602
    2. '1' → logprob: -6.876290798187256
    3. '0' → logprob: -8.751290321350098
    4. '"' → logprob: -10.626290321350098
    5. ''''' → logprob: -11.251290321350098
    6. ''A' → logprob: -11.501290321350098
    7. '```' → logprob: -11.626290321350098
    8. '')' → logprob: -11.626290321350098
    9. ' '' → logprob: -11.876290321350098
    10. ')' → logprob: -12.376290321350098

Token 1679: '',
' (ID: 1214)
  Prédit: '']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '']' → logprob: -0.33007359504699707
    2. ''' → logprob: -2.830073595046997
    3. '']:
' → logprob: -2.830073595046997
    4. '   ' → logprob: -3.205073595046997
    5. '```' → logprob: -3.205073595046997
    6. '']
' → logprob: -3.455073595046997
    7. ']' → logprob: -3.705073595046997
    8. '"]' → logprob: -5.330073356628418
    9. ']:
' → logprob: -5.830073356628418
    10. ':' → logprob: -5.830073356628418

Token 1680: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5038228034973145
    2. '```' → logprob: -1.0038228034973145
    3. '       ' → logprob: -4.5038228034973145
    4. 'for' → logprob: -5.0038228034973145
    5. 'bits' → logprob: -5.5038228034973145
    6. 'bit' → logprob: -6.0038228034973145
    7. '``' → logprob: -6.1288228034973145
    8. '`' → logprob: -7.1288228034973145
    9. ''' → logprob: -7.8788228034973145
    10. ' for' → logprob: -8.003822326660156

Token 1681: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' (adapté à ' '') → logprob: -0.6087101101875305
    2. '']' → logprob: -1.6087100505828857
    3. ']' → logprob: -3.2337100505828857
    4. '':' → logprob: -3.3587100505828857
    5. 'for' → logprob: -3.3587100505828857
    6. ':' → logprob: -3.7337100505828857
    7. '```' → logprob: -3.7337100505828857
    8. '   ' → logprob: -3.8587100505828857
    9. '`' → logprob: -4.108710289001465
    10. 'bit' → logprob: -4.608710289001465

Token 1682: 'Y' (ID: 56)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.12327849119901657
    2. '']' → logprob: -2.8732783794403076
    3. 'S' → logprob: -4.123278617858887
    4. ']' → logprob: -5.373278617858887
    5. '   ' → logprob: -5.373278617858887
    6. '```' → logprob: -5.498278617858887
    7. '`' → logprob: -5.623278617858887
    8. 'V' → logprob: -5.998278617858887
    9. ''S' → logprob: -6.123278617858887
    10. '#' → logprob: -6.123278617858887

Token 1683: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.13116991519927979
    2. ''' → logprob: -2.5061697959899902
    3. ':' → logprob: -3.5061697959899902
    4. '=' → logprob: -4.88116979598999
    5. '```' → logprob: -6.63116979598999
    6. '']' → logprob: -7.63116979598999
    7. '":' → logprob: -7.88116979598999
    8. '='' → logprob: -8.506170272827148
    9. '']:' → logprob: -8.756170272827148
    10. ' =' → logprob: -8.756170272827148

Token 1684: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.00017267030489165336
    2. '```' → logprob: -9.50017261505127
    3. ' '' → logprob: -9.75017261505127
    4. '`' → logprob: -11.25017261505127
    5. '=' → logprob: -11.50017261505127
    6. '"' → logprob: -12.00017261505127
    7. ' =' → logprob: -12.62517261505127
    8. '0' → logprob: -12.87517261505127
    9. '='' → logprob: -13.25017261505127
    10. '``' → logprob: -14.75017261505127

Token 1685: '0' (ID: 15)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.04870818182826042
    2. '0' → logprob: -3.048708200454712
    3. '```' → logprob: -10.048707962036133
    4. ' '' → logprob: -10.423707962036133
    5. '"' → logprob: -10.923707962036133
    6. '`' → logprob: -11.798707962036133
    7. ' ' → logprob: -12.548707962036133
    8. ')' → logprob: -13.048707962036133
    9. ''O' → logprob: -13.048707962036133
    10. ''''' → logprob: -13.298707962036133

Token 1686: '',
' (ID: 1214)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '```' → logprob: -1.3365885019302368
    2. '   ' → logprob: -1.4615885019302368
    3. ''' → logprob: -2.2115883827209473
    4. ':' → logprob: -2.8365883827209473
    5. '}
' → logprob: -2.9615883827209473
    6. '']
' → logprob: -3.0865883827209473
    7. ':
' → logprob: -3.2115883827209473
    8. 'for' → logprob: -3.3365883827209473
    9. '':
' → logprob: -3.4615883827209473
    10. '']:
' → logprob: -3.7115883827209473

Token 1687: '   ' (ID: 271)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.04898371174931526
    2. '   ' → logprob: -3.1739838123321533
    3. '```' → logprob: -5.673983573913574
    4. 'bit' → logprob: -6.423983573913574
    5. 'for' → logprob: -7.923983573913574
    6. 'decoded' → logprob: -8.048983573913574
    7. ' bits' → logprob: -9.048983573913574
    8. '``' → logprob: -10.298983573913574
    9. '(bits' → logprob: -11.423983573913574
    10. 'while' → logprob: -11.673983573913574

Token 1688: ' '' (ID: 461)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.08825215697288513
    2. '   ' → logprob: -2.838252067565918
    3. '```' → logprob: -4.338252067565918
    4. 'bit' → logprob: -4.838252067565918
    5. 'for' → logprob: -5.963252067565918
    6. ' bits' → logprob: -6.713252067565918
    7. '``' → logprob: -8.588252067565918
    8. 'decoded' → logprob: -8.713252067565918
    9. ')' → logprob: -9.213252067565918
    10. 'b' → logprob: -9.338252067565918

Token 1689: 'R' (ID: 49)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.12541475892066956
    2. '']' → logprob: -2.8754148483276367
    3. 'for' → logprob: -4.125414848327637
    4. ']' → logprob: -4.875414848327637
    5. 'bit' → logprob: -5.250414848327637
    6. 'ch' → logprob: -5.250414848327637
    7. ')' → logprob: -5.375414848327637
    8. '```' → logprob: -5.750414848327637
    9. '`' → logprob: -6.375414848327637
    10. '"' → logprob: -6.375414848327637

Token 1690: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.46054762601852417
    2. ':' → logprob: -1.335547685623169
    3. ''' → logprob: -3.210547685623169
    4. '']' → logprob: -3.710547685623169
    5. '=' → logprob: -4.46054744720459
    6. '```' → logprob: -4.71054744720459
    7. ']' → logprob: -5.21054744720459
    8. ']:' → logprob: -5.58554744720459
    9. ' =' → logprob: -5.83554744720459
    10. '   ' → logprob: -5.96054744720459

Token 1691: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.00026419671485200524
    2. ' '' → logprob: -8.375264167785645
    3. '"' → logprob: -11.000264167785645
    4. '```' → logprob: -11.375264167785645
    5. '`' → logprob: -13.000264167785645
    6. '='' → logprob: -13.875264167785645
    7. '1' → logprob: -14.625264167785645
    8. ''''' → logprob: -14.875264167785645
    9. ''s' → logprob: -15.125264167785645
    10. ')' → logprob: -15.250264167785645

Token 1692: '1' (ID: 16)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0067448546178638935
    2. '1' → logprob: -5.006744861602783
    3. ' ' → logprob: -11.881744384765625
    4. '0' → logprob: -12.006744384765625
    5. ' '' → logprob: -12.006744384765625
    6. '"' → logprob: -12.631744384765625
    7. '```' → logprob: -13.381744384765625
    8. '')' → logprob: -13.631744384765625
    9. ''''' → logprob: -13.756744384765625
    10. ')' → logprob: -13.881744384765625

Token 1693: '',
' (ID: 1214)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.4802478551864624
    2. '']
' → logprob: -1.6052478551864624
    3. '']' → logprob: -1.7302478551864624
    4. '```' → logprob: -1.8552478551864624
    5. '']:
' → logprob: -3.230247974395752
    6. ''' → logprob: -3.355247974395752
    7. ':' → logprob: -3.730247974395752
    8. ']' → logprob: -3.855247974395752
    9. 'for' → logprob: -3.855247974395752
    10. ':
' → logprob: -3.980247974395752

Token 1694: '   ' (ID: 271)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.04896032065153122
    2. '   ' → logprob: -3.4239602088928223
    3. '```' → logprob: -4.923960208892822
    4. 'bit' → logprob: -5.798960208892822
    5. 'decoded' → logprob: -5.798960208892822
    6. ' bits' → logprob: -6.548960208892822
    7. 'for' → logprob: -9.42396068572998
    8. 'b' → logprob: -9.54896068572998
    9. '``' → logprob: -9.67396068572998
    10. 'code' → logprob: -10.29896068572998

Token 1695: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' (adapté à ' '') → logprob: -1.277835488319397
    2. '```' → logprob: -1.277835488319397
    3. '   ' → logprob: -1.402835488319397
    4. '']' → logprob: -3.0278353691101074
    5. '):
' → logprob: -3.7778353691101074
    6. '       ' → logprob: -4.027835369110107
    7. ']:
' → logprob: -4.152835369110107
    8. 'for' → logprob: -4.277835369110107
    9. ']' → logprob: -4.402835369110107
    10. '':' → logprob: -4.652835369110107

Token 1696: 'Q' (ID: 48)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.30647748708724976
    2. '`' → logprob: -3.0564775466918945
    3. '']' → logprob: -3.0564775466918945
    4. '```' → logprob: -3.3064775466918945
    5. 'ch' → logprob: -3.8064775466918945
    6. 'bit' → logprob: -3.9314775466918945
    7. ']' → logprob: -4.3064775466918945
    8. 'for' → logprob: -4.4314775466918945
    9. ''\' → logprob: -4.9314775466918945
    10. '[' → logprob: -5.0564775466918945

Token 1697: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.06114179641008377
    2. ':' → logprob: -3.1861417293548584
    3. ''' → logprob: -4.0611419677734375
    4. '```' → logprob: -8.686141967773438
    5. '":' → logprob: -8.936141967773438
    6. '']' → logprob: -9.186141967773438
    7. '['' → logprob: -10.186141967773438
    8. ']:' → logprob: -10.186141967773438
    9. '':'' → logprob: -10.311141967773438
    10. '']:' → logprob: -10.436141967773438

Token 1698: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.000491076149046421
    2. ' '' → logprob: -7.625491142272949
    3. '0' → logprob: -14.12549114227295
    4. '`' → logprob: -14.87549114227295
    5. ''q' → logprob: -15.12549114227295
    6. '"' → logprob: -15.37549114227295
    7. ''''' → logprob: -15.37549114227295
    8. '':' → logprob: -15.50049114227295
    9. '```' → logprob: -15.50049114227295
    10. ''A' → logprob: -16.375490188598633

Token 1699: '0' (ID: 15)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0005018008523620665
    2. '0' → logprob: -7.62550163269043
    3. ' '' → logprob: -12.00050163269043
    4. '='' → logprob: -13.12550163269043
    5. '`' → logprob: -14.00050163269043
    6. '"' → logprob: -14.12550163269043
    7. ')' → logprob: -14.37550163269043
    8. '=' → logprob: -14.50050163269043
    9. '')' → logprob: -14.75050163269043
    10. ''''' → logprob: -14.75050163269043

Token 1700: '',
' (ID: 1214)
  Prédit: '']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '']' → logprob: -0.19886067509651184
    2. ']' → logprob: -2.3238606452941895
    3. '}' → logprob: -3.4488606452941895
    4. ''' → logprob: -3.6988606452941895
    5. '']
' → logprob: -4.1988606452941895
    6. '```' → logprob: -6.0738606452941895
    7. ''}' → logprob: -6.3238606452941895
    8. '"]' → logprob: -6.6988606452941895
    9. '']:
' → logprob: -7.0738606452941895
    10. '}
' → logprob: -7.3238606452941895

Token 1701: '   ' (ID: 271)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.3200533986091614
    2. '   ' → logprob: -1.3200533390045166
    3. '```' → logprob: -5.445053577423096
    4. 'bit' → logprob: -6.820053577423096
    5. ' bits' → logprob: -7.445053577423096
    6. 'for' → logprob: -7.695053577423096
    7. 'decoded' → logprob: -9.320053100585938
    8. '       ' → logprob: -10.070053100585938
    9. '``' → logprob: -10.195053100585938
    10. 'b' → logprob: -10.695053100585938

Token 1702: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' (adapté à ' '') → logprob: -0.24458841979503632
    2. '   ' → logprob: -2.2445883750915527
    3. '```' → logprob: -2.6195883750915527
    4. '']' → logprob: -4.994588375091553
    5. '}' → logprob: -5.369588375091553
    6. '`' → logprob: -5.619588375091553
    7. '}
' → logprob: -5.744588375091553
    8. ']' → logprob: -5.869588375091553
    9. '':' → logprob: -5.994588375091553
    10. 'for' → logprob: -6.119588375091553

Token 1703: 'S' (ID: 50)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -1.1528232097625732
    2. 'for' → logprob: -1.2778232097625732
    3. 'S' → logprob: -1.5278232097625732
    4. 'ch' → logprob: -2.7778232097625732
    5. 'bit' → logprob: -4.402823448181152
    6. '']' → logprob: -4.652823448181152
    7. 'V' → logprob: -4.652823448181152
    8. '   ' → logprob: -4.777823448181152
    9. '```' → logprob: -4.777823448181152
    10. 'bits' → logprob: -4.777823448181152

Token 1704: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.16246333718299866
    2. ''' → logprob: -2.287463426589966
    3. ':' → logprob: -3.162463426589966
    4. '```' → logprob: -6.037463188171387
    5. ''s' → logprob: -7.037463188171387
    6. '':
' → logprob: -7.537463188171387
    7. '']' → logprob: -7.787463188171387
    8. '']:' → logprob: -7.912463188171387
    9. '":' → logprob: -8.162463188171387
    10. ']:' → logprob: -9.037463188171387

Token 1705: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -2.6060808522743173e-05
    2. ' '' → logprob: -11.375025749206543
    3. '```' → logprob: -12.000025749206543
    4. '"' → logprob: -12.625025749206543
    5. '`' → logprob: -13.250025749206543
    6. '1' → logprob: -13.625025749206543
    7. ''s' → logprob: -14.375025749206543
    8. ''S' → logprob: -14.625025749206543
    9. ''''' → logprob: -15.000025749206543
    10. ')' → logprob: -16.00002670288086

Token 1706: '1' (ID: 16)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.002197717549279332
    2. '1' → logprob: -6.127197742462158
    3. ''S' → logprob: -12.002197265625
    4. '"' → logprob: -12.877197265625
    5. '`' → logprob: -13.627197265625
    6. ' '' → logprob: -14.127197265625
    7. '['' → logprob: -14.627197265625
    8. '```' → logprob: -14.627197265625
    9. ''''' → logprob: -15.377197265625
    10. ''s' → logprob: -15.377197265625

Token 1707: '',
' (ID: 1214)
  Prédit: '']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '']' → logprob: -0.871296226978302
    2. '}' → logprob: -1.6212961673736572
    3. ''' → logprob: -2.7462961673736572
    4. '']:
' → logprob: -2.9962961673736572
    5. '':' → logprob: -3.2462961673736572
    6. '':
' → logprob: -3.3712961673736572
    7. '   ' → logprob: -3.3712961673736572
    8. '}
' → logprob: -3.3712961673736572
    9. ':' → logprob: -3.6212961673736572
    10. ':
' → logprob: -4.121296405792236

Token 1708: '   ' (ID: 271)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.014426618814468384
    2. '   ' → logprob: -4.6394267082214355
    3. 'bit' → logprob: -5.8894267082214355
    4. '```' → logprob: -7.1394267082214355
    5. 'decoded' → logprob: -7.1394267082214355
    6. ' bits' → logprob: -8.514426231384277
    7. 'for' → logprob: -10.764426231384277
    8. '#' → logprob: -11.014426231384277
    9. '_bits' → logprob: -12.014426231384277
    10. 'code' → logprob: -12.014426231384277

Token 1709: ' '' (ID: 461)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.8283656239509583
    2. '   ' → logprob: -1.0783655643463135
    3. ''' (adapté à ' '') → logprob: -3.3283655643463135
    4. 'bits' → logprob: -3.5783655643463135
    5. '``' → logprob: -3.5783655643463135
    6. ']:
' → logprob: -3.7033655643463135
    7. ']
' → logprob: -4.078365802764893
    8. '']' → logprob: -4.578365802764893
    9. 'bit' → logprob: -4.828365802764893
    10. '']
' → logprob: -5.078365802764893

Token 1710: 'V' (ID: 53)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.1295950710773468
    2. 'V' → logprob: -3.2545950412750244
    3. 'bit' → logprob: -3.6295950412750244
    4. '']' → logprob: -3.8795950412750244
    5. ']' → logprob: -5.5045952796936035
    6. '```' → logprob: -5.8795952796936035
    7. 'bits' → logprob: -6.0045952796936035
    8. ':' → logprob: -6.1295952796936035
    9. '0' → logprob: -6.1295952796936035
    10. ')' → logprob: -6.2545952796936035

Token 1711: '':' (ID: 2337)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.8913271427154541
    2. '':' → logprob: -1.266327142715454
    3. ':' → logprob: -1.391327142715454
    4. '']' → logprob: -3.516327142715454
    5. ']' → logprob: -4.641326904296875
    6. '```' → logprob: -5.141326904296875
    7. ''s' → logprob: -6.391326904296875
    8. '[' → logprob: -6.516326904296875
    9. '['' → logprob: -6.641326904296875
    10. '=' → logprob: -6.641326904296875

Token 1712: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.00019269285257905722
    2. ' '' → logprob: -8.625192642211914
    3. '"' → logprob: -11.750192642211914
    4. '='' → logprob: -13.625192642211914
    5. '`' → logprob: -13.875192642211914
    6. '0' → logprob: -14.250192642211914
    7. '```' → logprob: -14.500192642211914
    8. '=' → logprob: -15.375192642211914
    9. ')' → logprob: -15.500192642211914
    10. '('' → logprob: -15.750192642211914

Token 1713: '0' (ID: 15)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.00014609156642109156
    2. '0' → logprob: -9.12514591217041
    3. ' '' → logprob: -10.25014591217041
    4. '`' → logprob: -14.12514591217041
    5. '```' → logprob: -15.25014591217041
    6. '='' → logprob: -15.50014591217041
    7. '"' → logprob: -15.62514591217041
    8. ''''' → logprob: -16.500146865844727
    9. ' ' → logprob: -17.500146865844727
    10. '')' → logprob: -17.500146865844727

Token 1714: '',
' (ID: 1214)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.7788923978805542
    2. '}' → logprob: -1.0288923978805542
    3. ''}' → logprob: -2.0288925170898438
    4. '']' → logprob: -4.278892517089844
    5. ':' → logprob: -4.778892517089844
    6. '```' → logprob: -5.028892517089844
    7. ''
' → logprob: -5.153892517089844
    8. '':' → logprob: -5.153892517089844
    9. ''}
' → logprob: -6.278892517089844
    10. '[' → logprob: -6.403892517089844

Token 1715: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7891950607299805
    2. '```' → logprob: -0.7891950607299805
    3. ''' → logprob: -3.5391950607299805
    4. '``' → logprob: -3.7891950607299805
    5. 'bits' → logprob: -4.1641950607299805
    6. '`' → logprob: -5.0391950607299805
    7. 'for' → logprob: -5.1641950607299805
    8. 'bit' → logprob: -5.2891950607299805
    9. '       ' → logprob: -6.6641950607299805
    10. 'b' → logprob: -6.9141950607299805

Token 1716: ' '' (ID: 461)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7515977025032043
    2. '```' → logprob: -1.2515976428985596
    3. ''' (adapté à ' '') → logprob: -2.5015976428985596
    4. 'for' → logprob: -3.1265976428985596
    5. 'bits' → logprob: -3.2515976428985596
    6. '       ' → logprob: -3.3765976428985596
    7. '``' → logprob: -5.126597881317139
    8. 'bit' → logprob: -5.376597881317139
    9. '):
' → logprob: -5.501597881317139
    10. 'b' → logprob: -5.626597881317139

Token 1717: 'B' (ID: 33)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.1566280573606491
    2. '']' → logprob: -2.281628131866455
    3. ']' → logprob: -4.156628131866455
    4. 'B' → logprob: -4.531628131866455
    5. '',' → logprob: -6.656628131866455
    6. '```' → logprob: -6.656628131866455
    7. 'X' → logprob: -6.906628131866455
    8. '   ' → logprob: -6.906628131866455
    9. ''A' → logprob: -7.031628131866455
    10. '#' → logprob: -7.031628131866455

Token 1718: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.04438232257962227
    2. ':' → logprob: -3.169382333755493
    3. ''' → logprob: -6.919382095336914
    4. '":' → logprob: -8.419382095336914
    5. '```' → logprob: -9.169382095336914
    6. '['' → logprob: -11.169382095336914
    7. '':'' → logprob: -11.669382095336914
    8. ']:' → logprob: -12.044382095336914
    9. '`:' → logprob: -12.294382095336914
    10. '(':' → logprob: -12.544382095336914

Token 1719: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.00010306637705070898
    2. ' '' → logprob: -9.250102996826172
    3. '1' → logprob: -12.375102996826172
    4. ''b' → logprob: -14.250102996826172
    5. '`' → logprob: -14.500102996826172
    6. ''A' → logprob: -14.750102996826172
    7. '"' → logprob: -15.250102996826172
    8. '```' → logprob: -15.500102996826172
    9. ' ' → logprob: -16.000102996826172
    10. '   ' → logprob: -16.125102996826172

Token 1720: '1' (ID: 16)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.00038169484469108284
    2. '1' → logprob: -7.8753814697265625
    3. ' '' → logprob: -13.750381469726562
    4. '"' → logprob: -15.125381469726562
    5. '`' → logprob: -16.000381469726562
    6. '0' → logprob: -16.625381469726562
    7. ''''' → logprob: -17.000381469726562
    8. '='' → logprob: -17.375381469726562
    9. '['' → logprob: -17.500381469726562
    10. '```' → logprob: -17.625381469726562

Token 1721: '',
' (ID: 1214)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '}' → logprob: -0.041097477078437805
    2. ''}' → logprob: -3.791097402572632
    3. '}
' → logprob: -4.916097640991211
    4. ''' → logprob: -4.916097640991211
    5. '```' → logprob: -7.166097640991211
    6. ''}
' → logprob: -7.666097640991211
    7. '}'' → logprob: -7.791097640991211
    8. '']' → logprob: -7.916097640991211
    9. '   ' → logprob: -8.666097640991211
    10. '}'
' → logprob: -8.791097640991211

Token 1722: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.47892042994499207
    2. '```' → logprob: -1.3539204597473145
    3. 'bits' → logprob: -2.7289204597473145
    4. '``' → logprob: -4.1039204597473145
    5. ''' → logprob: -4.4789204597473145
    6. 'bit' → logprob: -4.7289204597473145
    7. 'for' → logprob: -4.9789204597473145
    8. '`' → logprob: -5.2289204597473145
    9. '"' → logprob: -6.1039204597473145
    10. '       ' → logprob: -6.6039204597473145

Token 1723: ' '' (ID: 461)
  Prédit: '']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '']' → logprob: -0.4256299138069153
    2. ']' → logprob: -1.8006298542022705
    3. ''' (adapté à ' '') → logprob: -2.0506298542022705
    4. '```' → logprob: -4.17563009262085
    5. '']
' → logprob: -4.67563009262085
    6. ']
' → logprob: -4.67563009262085
    7. '   ' → logprob: -4.92563009262085
    8. ')' → logprob: -6.17563009262085
    9. '}' → logprob: -6.30063009262085
    10. '"]' → logprob: -6.92563009262085

Token 1724: 'X' (ID: 55)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.21998587250709534
    2. '']' → logprob: -1.969985842704773
    3. 'X' → logprob: -3.8449859619140625
    4. ']' → logprob: -3.9699859619140625
    5. '',' → logprob: -5.7199859619140625
    6. ')' → logprob: -6.4699859619140625
    7. 'x' → logprob: -6.7199859619140625
    8. ''s' → logprob: -7.2199859619140625
    9. '`' → logprob: -7.3449859619140625
    10. ''A' → logprob: -7.3449859619140625

Token 1725: '':' (ID: 2337)
  Prédit: '':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.22816289961338043
    2. ''' → logprob: -1.7281628847122192
    3. ':' → logprob: -4.10316276550293
    4. '']' → logprob: -5.35316276550293
    5. '```' → logprob: -6.22816276550293
    6. '['' → logprob: -7.35316276550293
    7. '":' → logprob: -7.85316276550293
    8. '']:' → logprob: -7.97816276550293
    9. ']' → logprob: -8.10316276550293
    10. ''s' → logprob: -8.60316276550293

Token 1726: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.00027325618430040777
    2. ' '' → logprob: -8.250273704528809
    3. '`' → logprob: -12.500273704528809
    4. '"' → logprob: -12.750273704528809
    5. '0' → logprob: -13.625273704528809
    6. '```' → logprob: -13.625273704528809
    7. ''''' → logprob: -14.625273704528809
    8. '')' → logprob: -14.875273704528809
    9. '',' → logprob: -15.000273704528809
    10. '':' → logprob: -15.375273704528809

Token 1727: '0' (ID: 15)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.00011880126112373546
    2. '0' → logprob: -9.12511920928955
    3. ' '' → logprob: -12.00011920928955
    4. '`' → logprob: -13.75011920928955
    5. '"' → logprob: -14.00011920928955
    6. ''''' → logprob: -14.87511920928955
    7. '='' → logprob: -15.25011920928955
    8. '['' → logprob: -15.50011920928955
    9. '```' → logprob: -15.75011920928955
    10. '',' → logprob: -16.250118255615234

Token 1728: '',
' (ID: 1214)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '}' → logprob: -0.00931919738650322
    2. '}
' → logprob: -4.884319305419922
    3. ''}' → logprob: -6.509319305419922
    4. '```' → logprob: -10.384319305419922
    5. '}'' → logprob: -10.634319305419922
    6. ''}
' → logprob: -10.634319305419922
    7. ',' → logprob: -11.009319305419922
    8. ''' → logprob: -11.009319305419922
    9. '   ' → logprob: -11.134319305419922
    10. '['' → logprob: -11.134319305419922

Token 1729: '   ' (ID: 271)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.19672304391860962
    2. '   ' → logprob: -1.8217229843139648
    3. ' bits' → logprob: -5.321722984313965
    4. '```' → logprob: -5.321722984313965
    5. 'bit' → logprob: -5.446722984313965
    6. 'for' → logprob: -6.571722984313965
    7. 'decoded' → logprob: -7.821722984313965
    8. 'b' → logprob: -8.446722984313965
    9. '_bits' → logprob: -9.321722984313965
    10. '#' → logprob: -9.446722984313965

Token 1730: ' '.' (ID: 12662)
  Prédit: '']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '']' → logprob: -1.2028515338897705
    2. '```' → logprob: -1.4528515338897705
    3. '   ' → logprob: -2.0778515338897705
    4. ''' → logprob: -2.5778515338897705
    5. ']' → logprob: -2.8278515338897705
    6. '"]' → logprob: -3.3278515338897705
    7. ''
' → logprob: -3.9528515338897705
    8. ']
' → logprob: -4.077851295471191
    9. '']
' → logprob: -4.077851295471191
    10. '}
' → logprob: -4.202851295471191

Token 1731: '':' (ID: 2337)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.05591551214456558
    2. '```' → logprob: -4.430915355682373
    3. '"' → logprob: -4.930915355682373
    4. '''' → logprob: -5.055915355682373
    5. ''.' → logprob: -5.055915355682373
    6. '')' → logprob: -5.430915355682373
    7. ')' → logprob: -5.680915355682373
    8. '']' → logprob: -5.680915355682373
    9. '.' → logprob: -5.805915355682373
    10. ''''' → logprob: -6.680915355682373

Token 1732: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -3.810037742368877e-05
    2. ' '' → logprob: -10.250038146972656
    3. '"' → logprob: -13.500038146972656
    4. '1' → logprob: -14.250038146972656
    5. ''''' → logprob: -14.875038146972656
    6. '`' → logprob: -15.375038146972656
    7. '```' → logprob: -17.750038146972656
    8. '''' → logprob: -18.500038146972656
    9. '('' → logprob: -18.625038146972656
    10. ' ' → logprob: -18.875038146972656

Token 1733: '1' (ID: 16)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -7.52919222577475e-05
    2. '1' → logprob: -9.625075340270996
    3. ''''' → logprob: -12.000075340270996
    4. ' '' → logprob: -14.000075340270996
    5. '')' → logprob: -14.250075340270996
    6. '"' → logprob: -14.375075340270996
    7. ')' → logprob: -15.500075340270996
    8. '','' → logprob: -15.500075340270996
    9. '`' → logprob: -16.12507438659668
    10. '''' → logprob: -16.25007438659668

Token 1734: '',
' (ID: 1214)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.09284327179193497
    2. '```' → logprob: -3.4678432941436768
    3. ')' → logprob: -4.092843055725098
    4. ''''
' → logprob: -4.592843055725098
    5. ''''' → logprob: -4.717843055725098
    6. '')' → logprob: -5.592843055725098
    7. '''' → logprob: -5.842843055725098
    8. '"' → logprob: -5.967843055725098
    9. ''
' → logprob: -5.967843055725098
    10. '']' → logprob: -6.092843055725098

Token 1735: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.418586790561676
    2. '   ' → logprob: -1.9185867309570312
    3. '```' → logprob: -2.2935867309570312
    4. '`' → logprob: -3.5435867309570312
    5. 'for' → logprob: -4.168586730957031
    6. '']' → logprob: -4.418586730957031
    7. '``' → logprob: -4.793586730957031
    8. 'bit' → logprob: -4.918586730957031
    9. '       ' → logprob: -5.293586730957031
    10. ''\' → logprob: -6.168586730957031

Token 1736: ' ',' (ID: 14089)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.2353345900774002
    2. ')' → logprob: -2.860334634780884
    3. '',' (adapté à ' ',') → logprob: -2.860334634780884
    4. '   ' → logprob: -3.610334634780884
    5. '```' → logprob: -3.610334634780884
    6. '']' → logprob: -4.610334396362305
    7. '#' → logprob: -5.110334396362305
    8. '','' → logprob: -5.235334396362305
    9. '')' → logprob: -5.985334396362305
    10. '`' → logprob: -6.110334396362305

Token 1737: '':' (ID: 2337)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.00029613598599098623
    2. ' '' → logprob: -9.250296592712402
    3. '```' → logprob: -9.500296592712402
    4. '',' → logprob: -9.750296592712402
    5. '':' → logprob: -10.500296592712402
    6. ''''' → logprob: -11.625296592712402
    7. '','' → logprob: -12.125296592712402
    8. '':'' → logprob: -12.250296592712402
    9. ')' → logprob: -12.375296592712402
    10. '')' → logprob: -12.500296592712402

Token 1738: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -4.842555426876061e-06
    2. ' '' → logprob: -13.000004768371582
    3. '"' → logprob: -14.125004768371582
    4. '',' → logprob: -14.500004768371582
    5. ''''' → logprob: -14.875004768371582
    6. '```' → logprob: -14.875004768371582
    7. '''' → logprob: -15.625004768371582
    8. ')' → logprob: -15.750004768371582
    9. '')' → logprob: -16.5000057220459
    10. '','' → logprob: -17.2500057220459

Token 1739: '0' (ID: 15)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0005771008436568081
    2. '0' → logprob: -7.500576972961426
    3. ' '' → logprob: -10.750576972961426
    4. '```' → logprob: -14.250576972961426
    5. ' ' → logprob: -14.750576972961426
    6. '"' → logprob: -15.000576972961426
    7. ''''' → logprob: -15.000576972961426
    8. '',' → logprob: -15.000576972961426
    9. '`' → logprob: -15.625576972961426
    10. '','' → logprob: -15.875576972961426

Token 1740: '',
' (ID: 1214)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.23896019160747528
    2. '}' → logprob: -2.7389602661132812
    3. '```' → logprob: -3.8639602661132812
    4. '"' → logprob: -3.9889602661132812
    5. ''}' → logprob: -3.9889602661132812
    6. ''}
' → logprob: -4.113960266113281
    7. '']' → logprob: -4.113960266113281
    8. '}'
' → logprob: -4.363960266113281
    9. ''''
' → logprob: -4.488960266113281
    10. ''
' → logprob: -4.488960266113281

Token 1741: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8476693034172058
    2. '```' → logprob: -1.0976693630218506
    3. ']' → logprob: -2.9726693630218506
    4. '}' → logprob: -3.4726693630218506
    5. ''' → logprob: -3.5976693630218506
    6. '}
' → logprob: -3.7226693630218506
    7. '']' → logprob: -3.7226693630218506
    8. '``' → logprob: -3.9726693630218506
    9. ']
' → logprob: -4.7226691246032715
    10. 'for' → logprob: -4.7226691246032715

Token 1742: ' '' (ID: 461)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.9039356708526611
    2. '   ' → logprob: -1.5289356708526611
    3. '"]' → logprob: -2.778935670852661
    4. '"' → logprob: -3.028935670852661
    5. 'bits' → logprob: -3.403935670852661
    6. ']' → logprob: -3.528935670852661
    7. '']' → logprob: -3.653935670852661
    8. ''' (adapté à ' '') → logprob: -3.778935670852661
    9. '):
' → logprob: -3.778935670852661
    10. '``' → logprob: -4.028935432434082

Token 1743: ' ':' (ID: 30751)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.03939509019255638
    2. ''
' → logprob: -4.539394855499268
    3. ''\' → logprob: -4.914394855499268
    4. '```' → logprob: -5.039394855499268
    5. '"' → logprob: -5.289394855499268
    6. '`' → logprob: -6.414394855499268
    7. ')' → logprob: -6.539394855499268
    8. '\n' → logprob: -6.914394855499268
    9. ' '' → logprob: -7.289394855499268
    10. '')' → logprob: -7.289394855499268

Token 1744: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -1.676292231422849e-05
    2. ' '' → logprob: -11.750017166137695
    3. '"' → logprob: -12.250017166137695
    4. '''' → logprob: -12.750017166137695
    5. '0' → logprob: -14.250017166137695
    6. '`' → logprob: -16.375017166137695
    7. ''''' → logprob: -16.500017166137695
    8. '```' → logprob: -16.625017166137695
    9. ')' → logprob: -17.625017166137695
    10. ''\' → logprob: -17.750017166137695

Token 1745: '0' (ID: 15)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.08918111771345139
    2. '0' → logprob: -2.4641811847686768
    3. '''' → logprob: -9.214180946350098
    4. '"' → logprob: -9.714180946350098
    5. '')' → logprob: -10.714180946350098
    6. ''''' → logprob: -10.714180946350098
    7. '```' → logprob: -11.339180946350098
    8. ')' → logprob: -11.964180946350098
    9. ' '' → logprob: -12.214180946350098
    10. ' ' → logprob: -12.464180946350098

Token 1746: '',
' (ID: 1214)
  Prédit: ''
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''
' → logprob: -0.39987829327583313
    2. ''' → logprob: -1.1498782634735107
    3. '':
' → logprob: -5.77487850189209
    4. '}'
' → logprob: -6.27487850189209
    5. '"' → logprob: -6.39987850189209
    6. '"
' → logprob: -6.77487850189209
    7. '```' → logprob: -6.89987850189209
    8. '}
' → logprob: -7.02487850189209
    9. ':
' → logprob: -7.39987850189209
    10. '   ' → logprob: -7.52487850189209

Token 1747: '}

' (ID: 943)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.29603084921836853
    2. 'bits' → logprob: -1.546030879020691
    3. '```' → logprob: -3.4210307598114014
    4. ' bits' → logprob: -5.9210309982299805
    5. '):
' → logprob: -6.4210309982299805
    6. 'bit' → logprob: -6.4210309982299805
    7. ':' → logprob: -6.9210309982299805
    8. '):' → logprob: -7.2960309982299805
    9. ')' → logprob: -7.9210309982299805
    10. 'decoded' → logprob: -8.17103099822998

Token 1748: '#' (ID: 2)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.09930071234703064
    2. '   ' → logprob: -2.4743006229400635
    3. 'decoded' → logprob: -4.849300861358643
    4. 'bit' → logprob: -6.599300861358643
    5. '```' → logprob: -7.099300861358643
    6. 'for' → logprob: -8.849300384521484
    7. ' bits' → logprob: -9.849300384521484
    8. 'res' → logprob: -11.099300384521484
    9. 'result' → logprob: -11.599300384521484
    10. 'decode' → logprob: -11.599300384521484

Token 1749: ' Now' (ID: 6549)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.017764145508408546
    2. 'bit' → logprob: -4.142764091491699
    3. '   ' → logprob: -7.267764091491699
    4. '#' → logprob: -7.642764091491699
    5. 'for' → logprob: -8.3927640914917
    6. 'decoded' → logprob: -8.8927640914917
    7. '```' → logprob: -10.0177640914917
    8. 'char' → logprob: -10.2677640914917
    9. 'code' → logprob: -10.5177640914917
    10. 'def' → logprob: -11.1427640914917

Token 1750: ',' (ID: 11)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.0186510868370533
    2. '   ' → logprob: -4.143651008605957
    3. 'bit' → logprob: -6.143651008605957
    4. 'for' → logprob: -8.643651008605957
    5. '```' → logprob: -8.768651008605957
    6. ' bits' → logprob: -10.018651008605957
    7. '#' → logprob: -10.268651008605957
    8. 'decoded' → logprob: -10.518651008605957
    9. 'code' → logprob: -12.018651008605957
    10. '(bits' → logprob: -12.018651008605957

Token 1751: ' process' (ID: 2273)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.004367578774690628
    2. '   ' → logprob: -6.254367351531982
    3. 'decoded' → logprob: -6.254367351531982
    4. 'bit' → logprob: -8.50436782836914
    5. 'for' → logprob: -8.75436782836914
    6. '```' → logprob: -9.00436782836914
    7. ' bits' → logprob: -11.12936782836914
    8. 'res' → logprob: -12.37936782836914
    9. '(bits' → logprob: -12.62936782836914
    10. '_bits' → logprob: -13.75436782836914

Token 1752: ' input' (ID: 3422)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.47598007321357727
    2. '   ' → logprob: -0.9759800434112549
    3. '```' → logprob: -7.100980281829834
    4. 'bit' → logprob: -7.725980281829834
    5. 'for' → logprob: -7.975980281829834
    6. 'decoded' → logprob: -8.725979804992676
    7. ' bits' → logprob: -9.600979804992676
    8. '(bits' → logprob: -10.725979804992676
    9. '_bits' → logprob: -11.725979804992676
    10. '``' → logprob: -11.975979804992676

Token 1753: ' line' (ID: 2543)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.04758303984999657
    2. '   ' → logprob: -3.1725831031799316
    3. 'bit' → logprob: -5.422583103179932
    4. '```' → logprob: -9.422582626342773
    5. ' bits' → logprob: -10.297582626342773
    6. 'code' → logprob: -11.547582626342773
    7. '#' → logprob: -11.797582626342773
    8. 'for' → logprob: -11.922582626342773
    9. '(bits' → logprob: -12.797582626342773
    10. '
' → logprob: -12.797582626342773

Token 1754: ':
' (ID: 734)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.027127159759402275
    2. '   ' → logprob: -3.652127265930176
    3. 'bit' → logprob: -7.277127265930176
    4. ' bits' → logprob: -9.527127265930176
    5. 'for' → logprob: -10.902127265930176
    6. '```' → logprob: -11.277127265930176
    7. '_bits' → logprob: -11.527127265930176
    8. '(bits' → logprob: -12.027127265930176
    9. 'decoded' → logprob: -12.402127265930176
    10. 'code' → logprob: -12.902127265930176

Token 1755: '#' (ID: 2)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.12809155881404877
    2. '   ' → logprob: -2.12809157371521
    3. 'bit' → logprob: -7.128091335296631
    4. 'for' → logprob: -8.753091812133789
    5. ' bits' → logprob: -9.253091812133789
    6. '```' → logprob: -10.003091812133789
    7. '_bits' → logprob: -11.003091812133789
    8. '#' → logprob: -11.128091812133789
    9. '(bits' → logprob: -11.503091812133789
    10. 'decoded' → logprob: -12.503091812133789

Token 1756: ' ' (ID: 220)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.03931692615151405
    2. '   ' → logprob: -3.5393168926239014
    3. 'bit' → logprob: -4.6643171310424805
    4. ' bits' → logprob: -10.28931713104248
    5. 'for' → logprob: -10.78931713104248
    6. '```' → logprob: -11.03931713104248
    7. '#' → logprob: -12.16431713104248
    8. 'code' → logprob: -12.28931713104248
    9. '_bits' → logprob: -12.91431713104248
    10. 'binary' → logprob: -13.28931713104248

Token 1757: '1' (ID: 16)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.3501625657081604
    2. '   ' → logprob: -1.2251625061035156
    3. 'for' → logprob: -6.975162506103516
    4. 'bit' → logprob: -7.725162506103516
    5. '```' → logprob: -9.100162506103516
    6. ' bits' → logprob: -9.600162506103516
    7. 'decoded' → logprob: -9.850162506103516
    8. 'b' → logprob: -10.600162506103516
    9. 'code' → logprob: -11.350162506103516
    10. '(bits' → logprob: -11.350162506103516

Token 1758: ')' (ID: 8)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.04285221919417381
    2. 'bits' → logprob: -3.6678521633148193
    3. '_bits' → logprob: -5.542852401733398
    4. '+=' → logprob: -5.542852401733398
    5. ' =' → logprob: -5.792852401733398
    6. 'for' → logprob: -6.417852401733398
    7. 'bit' → logprob: -6.792852401733398
    8. ':' → logprob: -8.042852401733398
    9. '#' → logprob: -8.167852401733398
    10. '=""' → logprob: -8.167852401733398

Token 1759: ' Convert' (ID: 15629)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.00535305542871356
    2. 'for' → logprob: -6.005352973937988
    3. 'bit' → logprob: -6.005352973937988
    4. '   ' → logprob: -7.880352973937988
    5. ' bits' → logprob: -10.880352973937988
    6. '#' → logprob: -12.505352973937988
    7. '_bits' → logprob: -13.005352973937988
    8. '(bits' → logprob: -13.880352973937988
    9. '```' → logprob: -14.005352973937988
    10. ' for' → logprob: -14.505352973937988

Token 1760: ' input' (ID: 3422)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.20930081605911255
    2. 'for' → logprob: -2.8343007564544678
    3. 'ch' → logprob: -2.9593007564544678
    4. 'bit' → logprob: -3.3343007564544678
    5. 'char' → logprob: -4.084300994873047
    6. '```' → logprob: -4.834300994873047
    7. 'line' → logprob: -5.334300994873047
    8. '   ' → logprob: -5.834300994873047
    9. ' for' → logprob: -5.959300994873047
    10. 'c' → logprob: -6.084300994873047

Token 1761: ' chars' (ID: 47991)
  Prédit: '_bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_bits' → logprob: -0.7080720663070679
    2. '_char' → logprob: -1.7080720663070679
    3. 'char' → logprob: -2.2080721855163574
    4. '_chars' → logprob: -2.7080721855163574
    5. 'bits' → logprob: -3.0830721855163574
    6. 'ch' → logprob: -3.7080721855163574
    7. '=' → logprob: -4.458072185516357
    8. '_bit' → logprob: -4.708072185516357
    9. 'bit' → logprob: -4.958072185516357
    10. '_ch' → logprob: -4.958072185516357

Token 1762: ' to' (ID: 316)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -1.2582273483276367
    2. '_bits' → logprob: -1.2582273483276367
    3. 'to' → logprob: -2.0082273483276367
    4. '=' → logprob: -2.0082273483276367
    5. '_to' → logprob: -2.3832273483276367
    6. 'bit' → logprob: -4.133227348327637
    7. 'char' → logprob: -4.508227348327637
    8. '_bit' → logprob: -4.883227348327637
    9. '```' → logprob: -5.008227348327637
    10. '+=' → logprob: -5.133227348327637

Token 1763: ' bit' (ID: 3546)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.11385538429021835
    2. 'bit' → logprob: -2.2388553619384766
    3. '"' → logprob: -8.113855361938477
    4. ' bits' → logprob: -8.363855361938477
    5. '```' → logprob: -8.738855361938477
    6. '''.' → logprob: -9.113855361938477
    7. '`' → logprob: -9.488855361938477
    8. '""' → logprob: -9.988855361938477
    9. ' bit' → logprob: -10.363855361938477
    10. ''' → logprob: -10.988855361938477

Token 1764: 'string' (ID: 1655)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.7090650200843811
    2. 'bits' → logprob: -1.8340649604797363
    3. ' =' → logprob: -1.9590649604797363
    4. '_bits' → logprob: -2.4590649604797363
    5. 'for' → logprob: -3.4590649604797363
    6. '   ' → logprob: -3.5840649604797363
    7. '_' → logprob: -4.584064960479736
    8. ':' → logprob: -5.084064960479736
    9. 'string' → logprob: -5.084064960479736
    10. 'bit' → logprob: -5.209064960479736

Token 1765: '
' (ID: 198)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.6360908150672913
    2. '   ' → logprob: -0.7610908150672913
    3. 'for' → logprob: -6.1360907554626465
    4. 'bit' → logprob: -7.7610907554626465
    5. '```' → logprob: -8.136091232299805
    6. '       ' → logprob: -8.386091232299805
    7. ' bits' → logprob: -8.761091232299805
    8. '(bits' → logprob: -9.386091232299805
    9. 'b' → logprob: -10.386091232299805
    10. '_bits' → logprob: -11.136091232299805

Token 1766: '#' (ID: 2)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.18274237215518951
    2. '   ' → logprob: -1.8077423572540283
    3. 'bit' → logprob: -6.682742595672607
    4. 'for' → logprob: -6.932742595672607
    5. '```' → logprob: -7.557742595672607
    6. ' bits' → logprob: -9.68274211883545
    7. '(bits' → logprob: -10.18274211883545
    8. 'b' → logprob: -10.18274211883545
    9. '`' → logprob: -11.05774211883545
    10. '_bits' → logprob: -11.18274211883545

Token 1767: ' ' (ID: 220)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.057954102754592896
    2. '   ' → logprob: -2.9329540729522705
    3. 'bit' → logprob: -5.93295431137085
    4. 'for' → logprob: -8.557953834533691
    5. '```' → logprob: -9.057953834533691
    6. ' bits' → logprob: -9.432953834533691
    7. '(bits' → logprob: -11.807953834533691
    8. '``' → logprob: -12.682953834533691
    9. '
' → logprob: -12.932953834533691
    10. 'code' → logprob: -13.057953834533691

Token 1768: '2' (ID: 17)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.1106221005320549
    2. '   ' → logprob: -2.4856221675872803
    3. 'for' → logprob: -3.9856221675872803
    4. '```' → logprob: -6.485621929168701
    5. 'bit' → logprob: -6.985621929168701
    6. ' bits' → logprob: -9.48562240600586
    7. '``' → logprob: -9.73562240600586
    8. 'b' → logprob: -9.73562240600586
    9. '`' → logprob: -10.23562240600586
    10. ' for' → logprob: -10.36062240600586

Token 1769: ')' (ID: 8)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.0009751861798577011
    2. ' =' → logprob: -7.250975131988525
    3. '+=' → logprob: -9.125975608825684
    4. ')' → logprob: -9.750975608825684
    5. '   ' → logprob: -9.875975608825684
    6. '=
' → logprob: -11.000975608825684
    7. '=""' → logprob: -11.875975608825684
    8. '#' → logprob: -12.750975608825684
    9. ':' → logprob: -12.875975608825684
    10. '```' → logprob: -13.125975608825684

Token 1770: ' Then' (ID: 7801)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.012156168930232525
    2. 'for' → logprob: -5.137156009674072
    3. 'bit' → logprob: -5.137156009674072
    4. 'while' → logprob: -9.51215648651123
    5. '#' → logprob: -9.63715648651123
    6. '```' → logprob: -10.01215648651123
    7. '
' → logprob: -10.13715648651123
    8. ' bits' → logprob: -10.63715648651123
    9. 'code' → logprob: -10.76215648651123
    10. '   ' → logprob: -10.76215648651123

Token 1771: ' decode' (ID: 32043)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.06655396521091461
    2. 'i' → logprob: -3.441554069519043
    3. 'pos' → logprob: -4.816554069519043
    4. '
' → logprob: -5.191554069519043
    5. 'idx' → logprob: -5.566554069519043
    6. '   ' → logprob: -5.566554069519043
    7. 'bit' → logprob: -5.691554069519043
    8. 'for' → logprob: -5.816554069519043
    9. '```' → logprob: -6.691554069519043
    10. 'while' → logprob: -6.816554069519043

Token 1772: ' bit' (ID: 3546)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.3509271740913391
    2. '   ' → logprob: -1.2259271144866943
    3. 'bit' → logprob: -6.225927352905273
    4. '```' → logprob: -8.225927352905273
    5. ' bits' → logprob: -9.600927352905273
    6. 'decoded' → logprob: -9.725927352905273
    7. 'for' → logprob: -10.475927352905273
    8. 'code' → logprob: -11.350927352905273
    9. 'b' → logprob: -11.350927352905273
    10. '
' → logprob: -11.475927352905273

Token 1773: 'string' (ID: 1655)
  Prédit: 'string'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'string' → logprob: -0.005780308041721582
    2. 's' → logprob: -5.630780220031738
    3. 'tring' → logprob: -7.380780220031738
    4. '_string' → logprob: -7.755780220031738
    5. '   ' → logprob: -7.880780220031738
    6. 'bits' → logprob: -8.505780220031738
    7. '```' → logprob: -8.630780220031738
    8. 'str' → logprob: -9.130780220031738
    9. '
' → logprob: -9.130780220031738
    10. '       ' → logprob: -10.630780220031738

Token 1774: ' to' (ID: 316)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.07281644642353058
    2. '   ' → logprob: -2.8228163719177246
    3. 'bit' → logprob: -4.572816371917725
    4. ' bits' → logprob: -8.572816848754883
    5. '```' → logprob: -8.697816848754883
    6. '#' → logprob: -10.447816848754883
    7. '
' → logprob: -10.947816848754883
    8. 'code' → logprob: -11.447816848754883
    9. 'decoded' → logprob: -12.072816848754883
    10. '(bits' → logprob: -12.197816848754883

Token 1775: ' letters' (ID: 18151)
  Prédit: '""'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '""' → logprob: -0.5372973084449768
    2. 'bits' → logprob: -1.037297248840332
    3. '"' → logprob: -3.412297248840332
    4. 'code' → logprob: -5.037297248840332
    5. '```' → logprob: -5.162297248840332
    6. 'letters' → logprob: -5.787297248840332
    7. '"""' → logprob: -6.162297248840332
    8. '"""
' → logprob: -6.162297248840332
    9. 'char' → logprob: -6.412297248840332
    10. 'chars' → logprob: -6.537297248840332

Token 1776: ' using' (ID: 2360)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.576854407787323
    2. '   ' → logprob: -0.826854407787323
    3. 'decoded' → logprob: -7.826854228973389
    4. 'bit' → logprob: -8.076854705810547
    5. '```' → logprob: -9.076854705810547
    6. ' bits' → logprob: -10.576854705810547
    7. 'for' → logprob: -10.701854705810547
    8. '       ' → logprob: -11.576854705810547
    9. 'b' → logprob: -11.576854705810547
    10. '(bits' → logprob: -12.451854705810547

Token 1777: ' prefix' (ID: 18633)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.07206226140260696
    2. 'code' → logprob: -2.8220622539520264
    3. 'bit' → logprob: -5.8220624923706055
    4. '""' → logprob: -6.1970624923706055
    5. '```' → logprob: -6.1970624923706055
    6. '   ' → logprob: -7.0720624923706055
    7. '`' → logprob: -7.5720624923706055
    8. '``' → logprob: -7.9470624923706055
    9. 'table' → logprob: -8.072062492370605
    10. ' bits' → logprob: -8.197062492370605

Token 1778: ' matching' (ID: 20238)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.34969452023506165
    2. '   ' → logprob: -1.2246944904327393
    3. 'bit' → logprob: -7.724694728851318
    4. '```' → logprob: -7.849694728851318
    5. 'for' → logprob: -8.59969425201416
    6. ' bits' → logprob: -9.47469425201416
    7. 'decoded' → logprob: -10.09969425201416
    8. 'code' → logprob: -10.59969425201416
    9. '``' → logprob: -10.97469425201416
    10. '(bits' → logprob: -11.09969425201416

Token 1779: ' of' (ID: 328)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.22930927574634552
    2. '   ' → logprob: -1.729309320449829
    3. 'bit' → logprob: -3.604309320449829
    4. ' bits' → logprob: -9.60430908203125
    5. 'decoded' → logprob: -9.85430908203125
    6. '#' → logprob: -9.97930908203125
    7. '```' → logprob: -9.97930908203125
    8. 'code' → logprob: -10.10430908203125
    9. 'binary' → logprob: -12.35430908203125
    10. 'for' → logprob: -12.47930908203125

Token 1780: ' code' (ID: 3490)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.02318374440073967
    2. 'code' → logprob: -3.898183822631836
    3. 'bit' → logprob: -6.148183822631836
    4. ' bits' → logprob: -8.773183822631836
    5. '   ' → logprob: -9.398183822631836
    6. '```' → logprob: -9.773183822631836
    7. 'codes' → logprob: -9.898183822631836
    8. '`' → logprob: -10.148183822631836
    9. 'char' → logprob: -10.523183822631836
    10. 'the' → logprob: -11.273183822631836

Token 1781: '_to' (ID: 5089)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.18115472793579102
    2. '   ' → logprob: -2.056154727935791
    3. 'bit' → logprob: -3.306154727935791
    4. 'code' → logprob: -7.806154727935791
    5. 'decoded' → logprob: -8.181154251098633
    6. '#' → logprob: -9.181154251098633
    7. ' bits' → logprob: -9.431154251098633
    8. '```' → logprob: -9.556154251098633
    9. '
' → logprob: -10.556154251098633
    10. 'b' → logprob: -11.181154251098633

Token 1782: '_char' (ID: 23398)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.31177225708961487
    2. 'ch' → logprob: -2.186772346496582
    3. 'to' → logprob: -3.436772346496582
    4. 'bits' → logprob: -3.436772346496582
    5. '_char' → logprob: -3.561772346496582
    6. '```' → logprob: -3.811772346496582
    7. '_bits' → logprob: -3.936772346496582
    8. '_to' → logprob: -5.186772346496582
    9. 'bit' → logprob: -5.311772346496582
    10. 'code' → logprob: -5.811772346496582

Token 1783: ' dict' (ID: 11878)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5243595242500305
    2. 'bits' → logprob: -0.8993595242500305
    3. 'bit' → logprob: -7.149359703063965
    4. '```' → logprob: -8.774359703063965
    5. 'for' → logprob: -9.149359703063965
    6. 'b' → logprob: -10.149359703063965
    7. 'decoded' → logprob: -10.149359703063965
    8. ' bits' → logprob: -10.399359703063965
    9. '       ' → logprob: -10.899359703063965
    10. '`' → logprob: -11.524359703063965

Token 1784: ',
' (ID: 412)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.053772516548633575
    2. '   ' → logprob: -3.428772449493408
    3. 'bit' → logprob: -3.928772449493408
    4. '#' → logprob: -9.428772926330566
    5. ' bits' → logprob: -9.678772926330566
    6. 'decoded' → logprob: -10.303772926330566
    7. '```' → logprob: -10.553772926330566
    8. 'code' → logprob: -11.303772926330566
    9. '
' → logprob: -12.053772926330566
    10. 'b' → logprob: -12.178772926330566

Token 1785: '#' (ID: 2)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.39078012108802795
    2. '   ' → logprob: -1.1407800912857056
    3. 'bit' → logprob: -5.640779972076416
    4. '```' → logprob: -9.265780448913574
    5. ' bits' → logprob: -9.515780448913574
    6. 'decoded' → logprob: -9.765780448913574
    7. 'b' → logprob: -10.140780448913574
    8. '#' → logprob: -11.140780448913574
    9. '(bits' → logprob: -11.140780448913574
    10. 'for' → logprob: -11.515780448913574

Token 1786: ' Code' (ID: 9441)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.22905391454696655
    2. '   ' → logprob: -1.6040539741516113
    3. 'bit' → logprob: -5.854053974151611
    4. '```' → logprob: -7.729053974151611
    5. 'decoded' → logprob: -9.104053497314453
    6. ' bits' → logprob: -9.854053497314453
    7. 'for' → logprob: -10.104053497314453
    8. '#' → logprob: -10.479053497314453
    9. 'code' → logprob: -11.104053497314453
    10. '(bits' → logprob: -11.104053497314453

Token 1787: ' to' (ID: 316)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.28829747438430786
    2. 'bits' → logprob: -1.413297414779663
    3. 'decoded' → logprob: -5.413297653198242
    4. 'bit' → logprob: -6.663297653198242
    5. '```' → logprob: -7.413297653198242
    6. 'code' → logprob: -8.663297653198242
    7. 'for' → logprob: -9.413297653198242
    8. 'b' → logprob: -9.413297653198242
    9. '
' → logprob: -9.538297653198242
    10. 'i' → logprob: -9.788297653198242

Token 1788: ' char' (ID: 1826)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.1178317591547966
    2. '_char' → logprob: -3.1178317070007324
    3. 'bits' → logprob: -3.3678317070007324
    4. 'decode' → logprob: -3.9928317070007324
    5. '""' → logprob: -5.867831707000732
    6. 'string' → logprob: -6.492831707000732
    7. 'decoded' → logprob: -6.492831707000732
    8. '_decode' → logprob: -6.742831707000732
    9. '_bits' → logprob: -6.742831707000732
    10. 'chars' → logprob: -6.867831707000732

Token 1789: ' mapping' (ID: 22573)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.05447167158126831
    2. 'bit' → logprob: -3.679471731185913
    3. 'decoded' → logprob: -4.554471492767334
    4. '   ' → logprob: -5.304471492767334
    5. '```' → logprob: -6.179471492767334
    6. 'code' → logprob: -6.179471492767334
    7. ' =' → logprob: -6.679471492767334
    8. '
' → logprob: -6.679471492767334
    9. ' bits' → logprob: -6.929471492767334
    10. '=' → logprob: -6.929471492767334

Token 1790: ' from' (ID: 591)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.03064407967031002
    2. 'bit' → logprob: -4.030643939971924
    3. '   ' → logprob: -4.530643939971924
    4. 'decoded' → logprob: -6.655643939971924
    5. ' bits' → logprob: -9.280644416809082
    6. 'code' → logprob: -9.905644416809082
    7. '```' → logprob: -9.905644416809082
    8. '#' → logprob: -10.280644416809082
    9. 'b' → logprob: -10.780644416809082
    10. 'for' → logprob: -11.280644416809082

Token 1791: ' the' (ID: 290)
  Prédit: 'bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bit' → logprob: -0.783714771270752
    2. 'char' → logprob: -1.408714771270752
    3. 'bits' → logprob: -1.908714771270752
    4. 'line' → logprob: -3.158714771270752
    5. 'ch' → logprob: -3.283714771270752
    6. '```' → logprob: -3.658714771270752
    7. 'code' → logprob: -4.283714771270752
    8. '`' → logprob: -4.658714771270752
    9. '"' → logprob: -5.783714771270752
    10. '   ' → logprob: -5.908714771270752

Token 1792: ' given' (ID: 4335)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.03240203857421875
    2. 'bit' → logprob: -4.407402038574219
    3. '```' → logprob: -4.532402038574219
    4. 'line' → logprob: -5.782402038574219
    5. 'char' → logprob: -6.282402038574219
    6. 'for' → logprob: -7.157402038574219
    7. 'input' → logprob: -7.657402038574219
    8. ' bits' → logprob: -8.032402038574219
    9. 'code' → logprob: -8.032402038574219
    10. '``' → logprob: -8.157402038574219

Token 1793: ' table' (ID: 3293)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.019158653914928436
    2. 'bit' → logprob: -4.644158840179443
    3. '   ' → logprob: -5.394158840179443
    4. 'decoded' → logprob: -6.019158840179443
    5. 'code' → logprob: -7.269158840179443
    6. ' bits' → logprob: -7.269158840179443
    7. '```' → logprob: -8.394158363342285
    8. 'b' → logprob: -8.519158363342285
    9. 'for' → logprob: -9.019158363342285
    10. 's' → logprob: -9.894158363342285

Token 1794: ':

' (ID: 1402)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.6373239755630493
    2. '   ' → logprob: -0.7623239755630493
    3. 'decoded' → logprob: -6.01232385635376
    4. 'bit' → logprob: -6.26232385635376
    5. '```' → logprob: -9.137324333190918
    6. 'for' → logprob: -9.262324333190918
    7. ' bits' → logprob: -10.137324333190918
    8. 'code' → logprob: -10.637324333190918
    9. 'b' → logprob: -10.762324333190918
    10. '(bits' → logprob: -11.512324333190918

Token 1795: 'table' (ID: 4202)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.3785380721092224
    2. '   ' → logprob: -1.8785381317138672
    3. 'decoded' → logprob: -1.8785381317138672
    4. 'bit' → logprob: -4.878538131713867
    5. 'res' → logprob: -6.628538131713867
    6. 'code' → logprob: -8.878538131713867
    7. 'result' → logprob: -9.253538131713867
    8. 'decode' → logprob: -9.878538131713867
    9. 'dec' → logprob: -10.128538131713867
    10. 'chars' → logprob: -10.128538131713867

Token 1796: '2' (ID: 17)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18151120841503143
    2. 'bits' → logprob: -1.9315111637115479
    3. '```' → logprob: -4.931511402130127
    4. 'bit' → logprob: -5.056511402130127
    5. 'code' → logprob: -6.181511402130127
    6. 'decoded' → logprob: -6.431511402130127
    7. ':' → logprob: -6.681511402130127
    8. '_bits' → logprob: -8.181510925292969
    9. '
' → logprob: -8.306510925292969
    10. ' bits' → logprob: -8.306510925292969

Token 1797: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.3938834071159363
    2. ' =' → logprob: -1.268883466720581
    3. 'char' → logprob: -3.768883466720581
    4. '_char' → logprob: -5.268883228302002
    5. '={
' → logprob: -6.268883228302002
    6. '=
' → logprob: -6.268883228302002
    7. '{
' → logprob: -6.393883228302002
    8. '{' → logprob: -6.643883228302002
    9. '
' → logprob: -6.768883228302002
    10. '_' → logprob: -7.018883228302002

Token 1798: ' [
' (ID: 4240)
  Prédit: '{'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '{' → logprob: -0.06280072778463364
    2. '{
' → logprob: -3.062800645828247
    3. '[' → logprob: -5.062800884246826
    4. '[
' → logprob: -5.687800884246826
    5. '{}' → logprob: -5.812800884246826
    6. 'code' → logprob: -7.562800884246826
    7. '```' → logprob: -7.812800884246826
    8. '{"' → logprob: -8.562800407409668
    9. 'dict' → logprob: -9.437800407409668
    10. ' {' → logprob: -10.312800407409668

Token 1799: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2984055280685425
    2. '[' → logprob: -2.423405647277832
    3. '       ' → logprob: -2.673405647277832
    4. '[
' → logprob: -2.798405647277832
    5. '("' → logprob: -4.173405647277832
    6. '('' → logprob: -4.798405647277832
    7. '{
' → logprob: -5.673405647277832
    8. '"' → logprob: -5.798405647277832
    9. '{' → logprob: -5.923405647277832
    10. '(' → logprob: -6.298405647277832

Token 1800: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.32361656427383423
    2. '("' (adapté à ' ("') → logprob: -2.1986165046691895
    3. '('' → logprob: -2.5736165046691895
    4. '[
' → logprob: -3.0736165046691895
    5. '[' → logprob: -3.6986165046691895
    6. '"' → logprob: -5.9486165046691895
    7. '(' → logprob: -6.0736165046691895
    8. '{
' → logprob: -6.5736165046691895
    9. '       ' → logprob: -6.5736165046691895
    10. ' ("' → logprob: -6.6986165046691895

Token 1801: 'E' (ID: 36)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -1.0232142210006714
    2. ''' → logprob: -1.7732142210006714
    3. 'char' → logprob: -2.398214340209961
    4. ')' → logprob: -2.523214340209961
    5. 'bit' → logprob: -2.898214340209961
    6. '"?' → logprob: -3.273214340209961
    7. 'c' → logprob: -3.398214340209961
    8. '?' → logprob: -4.023214340209961
    9. ''"' → logprob: -4.023214340209961
    10. '")' → logprob: -4.023214340209961

Token 1802: '",' (ID: 672)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.857991635799408
    2. '"' → logprob: -1.8579916954040527
    3. ')' → logprob: -1.8579916954040527
    4. '[' → logprob: -2.4829916954040527
    5. '")' → logprob: -2.7329916954040527
    6. '_' → logprob: -4.107991695404053
    7. '[
' → logprob: -4.357991695404053
    8. ''' → logprob: -4.607991695404053
    9. ' =' → logprob: -4.607991695404053
    10. 'for' → logprob: -4.732991695404053

Token 1803: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.1887756735086441
    2. ''' → logprob: -2.4387757778167725
    3. ' "' → logprob: -3.3137757778167725
    4. ')' → logprob: -3.6887757778167725
    5. '   ' → logprob: -4.563775539398193
    6. ' '' → logprob: -4.938775539398193
    7. '```' → logprob: -6.813775539398193
    8. '`' → logprob: -7.688775539398193
    9. ''"' → logprob: -8.063776016235352
    10. '[' → logprob: -8.063776016235352

Token 1804: '000' (ID: 1302)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.08802631497383118
    2. ''' → logprob: -3.588026285171509
    3. '000' → logprob: -3.588026285171509
    4. '")' → logprob: -4.463026523590088
    5. '001' → logprob: -5.838026523590088
    6. '""' → logprob: -6.213026523590088
    7. '0' → logprob: -6.213026523590088
    8. '   ' → logprob: -6.838026523590088
    9. '"""' → logprob: -6.963026523590088
    10. '```' → logprob: -6.963026523590088

Token 1805: '11' (ID: 994)
  Prédit: '11'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '11' → logprob: -0.0042824652045965195
    2. '00' → logprob: -6.379282474517822
    3. '01' → logprob: -6.879282474517822
    4. '1' → logprob: -7.629282474517822
    5. '"' → logprob: -7.879282474517822
    6. '")' → logprob: -8.004281997680664
    7. '0' → logprob: -9.129281997680664
    8. ')' → logprob: -9.254281997680664
    9. '111' → logprob: -10.504281997680664
    10. '10' → logprob: -10.629281997680664

Token 1806: '"),
' (ID: 8132)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.9914013743400574
    2. '")' → logprob: -0.9914013743400574
    3. '   ' → logprob: -2.491401433944702
    4. ')
' → logprob: -2.866401433944702
    5. '):
' → logprob: -3.616401433944702
    6. '```' → logprob: -4.366401195526123
    7. '"' → logprob: -4.491401195526123
    8. '):' → logprob: -4.616401195526123
    9. '"):
' → logprob: -4.741401195526123
    10. '"):' → logprob: -4.866401195526123

Token 1807: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.26776859164237976
    2. '       ' → logprob: -1.8927686214447021
    3. '"' → logprob: -3.142768621444702
    4. '[' → logprob: -4.517768383026123
    5. ')' → logprob: -4.767768383026123
    6. '[
' → logprob: -4.767768383026123
    7. 'for' → logprob: -5.017768383026123
    8. '")' → logprob: -6.392768383026123
    9. ''' → logprob: -7.517768383026123
    10. '{
' → logprob: -7.892768383026123

Token 1808: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4376818835735321
    2. '"' → logprob: -2.5626819133758545
    3. ')' → logprob: -2.5626819133758545
    4. 'for' → logprob: -2.6876819133758545
    5. '       ' → logprob: -3.4376819133758545
    6. '[' → logprob: -3.6876819133758545
    7. '")' → logprob: -3.8126819133758545
    8. '[
' → logprob: -3.9376819133758545
    9. ''' → logprob: -5.062681674957275
    10. '"\' → logprob: -5.687681674957275

Token 1809: 'T' (ID: 51)
  Prédit: '"T'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"T' → logprob: -0.09338794648647308
    2. '"' → logprob: -3.4683878421783447
    3. '"P' → logprob: -3.9683878421783447
    4. 'T' → logprob: -4.343388080596924
    5. ''T' → logprob: -4.968388080596924
    6. '   ' → logprob: -5.218388080596924
    7. ''' → logprob: -5.718388080596924
    8. '"D' → logprob: -5.968388080596924
    9. '"A' → logprob: -6.468388080596924
    10. '"?' → logprob: -6.968388080596924

Token 1810: '",' (ID: 672)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5850241184234619
    2. '[' → logprob: -2.335024118423462
    3. '")' → logprob: -2.335024118423462
    4. '[
' → logprob: -2.460024118423462
    5. '   ' → logprob: -3.210024118423462
    6. '=' → logprob: -3.460024118423462
    7. '"' → logprob: -3.460024118423462
    8. '```' → logprob: -4.460023880004883
    9. 'for' → logprob: -4.585023880004883
    10. '#' → logprob: -4.835023880004883

Token 1811: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.13186921179294586
    2. '   ' → logprob: -3.381869316101074
    3. ''' → logprob: -3.631869316101074
    4. '[
' → logprob: -3.756869316101074
    5. ' "' → logprob: -4.381869316101074
    6. ')' → logprob: -4.631869316101074
    7. '[' → logprob: -4.631869316101074
    8. '```' → logprob: -6.256869316101074
    9. '"
' → logprob: -7.506869316101074
    10. '    ' → logprob: -7.506869316101074

Token 1812: '001' (ID: 7659)
  Prédit: '001'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '001' → logprob: -0.015930194407701492
    2. '111' → logprob: -4.51593017578125
    3. '"' → logprob: -6.01593017578125
    4. ''' → logprob: -6.39093017578125
    5. '011' → logprob: -8.39093017578125
    6. '```' → logprob: -8.51593017578125
    7. '000' → logprob: -9.51593017578125
    8. '010' → logprob: -9.89093017578125
    9. '101' → logprob: -10.14093017578125
    10. '110' → logprob: -10.14093017578125

Token 1813: '11' (ID: 994)
  Prédit: '11'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '11' → logprob: -0.24017967283725739
    2. '1' → logprob: -2.1151797771453857
    3. '00' → logprob: -3.1151797771453857
    4. ')' → logprob: -3.9901797771453857
    5. '0' → logprob: -4.365179538726807
    6. '"' → logprob: -5.365179538726807
    7. '")' → logprob: -5.740179538726807
    8. ''' → logprob: -5.865179538726807
    9. '```' → logprob: -5.865179538726807
    10. '""' → logprob: -6.990179538726807

Token 1814: '"),
' (ID: 8132)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.3994030952453613
    2. '):
' → logprob: -1.3994030952453613
    3. '"):
' → logprob: -2.0244030952453613
    4. '")' → logprob: -2.3994030952453613
    5. '"):' → logprob: -2.6494030952453613
    6. '):' → logprob: -3.0244030952453613
    7. '```' → logprob: -3.3994030952453613
    8. ')
' → logprob: -3.6494030952453613
    9. ')' → logprob: -3.6494030952453613
    10. '":' → logprob: -4.024403095245361

Token 1815: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.23080326616764069
    2. ')' → logprob: -2.8558032512664795
    3. '"' → logprob: -3.2308032512664795
    4. '")' → logprob: -3.3558032512664795
    5. '       ' → logprob: -3.4808032512664795
    6. 'for' → logprob: -4.105803489685059
    7. '):
' → logprob: -5.105803489685059
    8. ')
' → logprob: -5.105803489685059
    9. ' for' → logprob: -5.855803489685059
    10. '```' → logprob: -6.230803489685059

Token 1816: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3402349352836609
    2. '"' → logprob: -1.8402349948883057
    3. 'for' → logprob: -3.5902349948883057
    4. '```' → logprob: -3.8402349948883057
    5. ')' → logprob: -4.215234756469727
    6. 'bits' → logprob: -4.465234756469727
    7. '")' → logprob: -4.715234756469727
    8. '("' (adapté à ' ("') → logprob: -4.840234756469727
    9. ')
' → logprob: -4.965234756469727
    10. '       ' → logprob: -5.715234756469727

Token 1817: 'A' (ID: 32)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -1.2622402906417847
    2. 'bits' → logprob: -1.2622402906417847
    3. 'for' → logprob: -2.137240409851074
    4. '")' → logprob: -2.887240409851074
    5. '"
' → logprob: -3.387240409851074
    6. ''' → logprob: -4.012240409851074
    7. ')' → logprob: -4.012240409851074
    8. 'char' → logprob: -4.387240409851074
    9. 'c' → logprob: -4.387240409851074
    10. '   ' → logprob: -4.512240409851074

Token 1818: '",' (ID: 672)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6361627578735352
    2. '[' → logprob: -2.261162757873535
    3. '"' → logprob: -2.511162757873535
    4. '_' → logprob: -3.011162757873535
    5. '[
' → logprob: -3.136162757873535
    6. ')' → logprob: -3.386162757873535
    7. '```' → logprob: -3.386162757873535
    8. '#' → logprob: -3.761162757873535
    9. ''' → logprob: -4.011162757873535
    10. 'for' → logprob: -4.636162757873535

Token 1819: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.4469424784183502
    2. ''' → logprob: -1.8219424486160278
    3. ')' → logprob: -2.3219425678253174
    4. '")' → logprob: -3.5719425678253174
    5. '[' → logprob: -3.9469425678253174
    6. '   ' → logprob: -4.571942329406738
    7. '[
' → logprob: -4.571942329406738
    8. ' "' → logprob: -5.196942329406738
    9. '",' → logprob: -5.821942329406738
    10. '0' → logprob: -6.071942329406738

Token 1820: '010' (ID: 13522)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.036444228142499924
    2. ''' → logprob: -4.536444187164307
    3. '010' → logprob: -4.536444187164307
    4. '")' → logprob: -5.036444187164307
    5. '0' → logprob: -5.786444187164307
    6. '000' → logprob: -7.036444187164307
    7. ''"' → logprob: -7.536444187164307
    8. ')' → logprob: -7.661444187164307
    9. '"""' → logprob: -8.036444664001465
    10. '[' → logprob: -8.036444664001465

Token 1821: '00' (ID: 504)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.6642591953277588
    2. '00' → logprob: -1.7892591953277588
    3. ')' → logprob: -2.539259195327759
    4. '"' → logprob: -2.539259195327759
    5. '")' → logprob: -2.539259195327759
    6. ']' → logprob: -3.539259195327759
    7. '#' → logprob: -4.53925895690918
    8. '"]' → logprob: -4.53925895690918
    9. '=' → logprob: -5.03925895690918
    10. '">' → logprob: -5.41425895690918

Token 1822: '"),
' (ID: 8132)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -1.7272679805755615
    2. ':' → logprob: -2.2272679805755615
    3. 'for' → logprob: -2.4772679805755615
    4. '_bits' → logprob: -2.8522679805755615
    5. '   ' → logprob: -2.9772679805755615
    6. ' =' → logprob: -3.1022679805755615
    7. 'bit' → logprob: -3.1022679805755615
    8. '"' → logprob: -3.1022679805755615
    9. 'bits' → logprob: -3.1022679805755615
    10. '_' → logprob: -3.3522679805755615

Token 1823: '   ' (ID: 271)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.6760041117668152
    2. '   ' → logprob: -1.67600417137146
    3. 'bits' → logprob: -1.92600417137146
    4. ':' → logprob: -3.05100417137146
    5. '=' → logprob: -4.051003932952881
    6. 'b' → logprob: -4.176003932952881
    7. 'bit' → logprob: -4.176003932952881
    8. ' for' → logprob: -4.676003932952881
    9. '"' → logprob: -4.801003932952881
    10. '       ' → logprob: -5.051003932952881

Token 1824: ' ("' (ID: 7109)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.7153196930885315
    2. 'for' → logprob: -1.9653196334838867
    3. 'bit' → logprob: -2.2153196334838867
    4. '   ' → logprob: -2.2153196334838867
    5. '"' → logprob: -3.7153196334838867
    6. 'char' → logprob: -3.8403196334838867
    7. '```' → logprob: -3.9653196334838867
    8. '):
' → logprob: -4.965319633483887
    9. ':' → logprob: -5.090319633483887
    10. ')
' → logprob: -5.215319633483887

Token 1825: 'O' (ID: 46)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.7034786939620972
    2. '"' → logprob: -1.7034786939620972
    3. 'bits' → logprob: -2.2034788131713867
    4. '   ' → logprob: -3.2034788131713867
    5. '"
' → logprob: -3.5784788131713867
    6. '")' → logprob: -3.8284788131713867
    7. ''' → logprob: -3.9534788131713867
    8. '":' → logprob: -4.578478813171387
    9. ')' → logprob: -4.578478813171387
    10. '"]' → logprob: -4.953478813171387

Token 1826: '",' (ID: 672)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -1.156285285949707
    2. '")' → logprob: -2.156285285949707
    3. '[' → logprob: -2.281285285949707
    4. ''' → logprob: -2.656285285949707
    5. '_' → logprob: -2.781285285949707
    6. ')' → logprob: -2.906285285949707
    7. '"""
' → logprob: -3.531285285949707
    8. '":' → logprob: -3.531285285949707
    9. '"]' → logprob: -3.906285285949707
    10. ':' → logprob: -3.906285285949707

Token 1827: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.19202236831188202
    2. ''' → logprob: -2.3170223236083984
    3. '```' → logprob: -3.5670223236083984
    4. '")' → logprob: -3.6920223236083984
    5. '011' → logprob: -5.817022323608398
    6. '`' → logprob: -5.942022323608398
    7. ''"' → logprob: -5.942022323608398
    8. '[' → logprob: -6.067022323608398
    9. ')' → logprob: -6.567022323608398
    10. '010' → logprob: -6.567022323608398

Token 1828: '011' (ID: 17342)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.5686156153678894
    2. ''' → logprob: -1.1936156749725342
    3. ''"' → logprob: -3.443615674972534
    4. '")' → logprob: -3.693615674972534
    5. '1' → logprob: -3.943615674972534
    6. '"""' → logprob: -4.068615436553955
    7. '0' → logprob: -4.193615436553955
    8. '011' → logprob: -5.193615436553955
    9. '"'' → logprob: -5.568615436553955
    10. '010' → logprob: -5.943615436553955

Token 1829: '00' (ID: 504)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.4326109290122986
    2. '00' → logprob: -1.1826109886169434
    3. '")' → logprob: -3.4326109886169434
    4. '"' → logprob: -5.557610988616943
    5. '01' → logprob: -6.057610988616943
    6. ')' → logprob: -6.682610988616943
    7. '1' → logprob: -6.932610988616943
    8. '"""
' → logprob: -7.182610988616943
    9. '11' → logprob: -7.432610988616943
    10. '```' → logprob: -7.557610988616943

Token 1830: '"),
' (ID: 8132)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.7413302659988403
    2. ':' → logprob: -2.366330146789551
    3. '```' → logprob: -2.366330146789551
    4. 'for' → logprob: -2.491330146789551
    5. '":' → logprob: -2.616330146789551
    6. '"' → logprob: -2.616330146789551
    7. '_bits' → logprob: -3.116330146789551
    8. '"
' → logprob: -3.241330146789551
    9. ':
' → logprob: -3.241330146789551
    10. 'bits' → logprob: -3.241330146789551

Token 1831: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5013819932937622
    2. 'for' → logprob: -1.5013819932937622
    3. 'bits' → logprob: -2.5013818740844727
    4. ':' → logprob: -4.001381874084473
    5. '       ' → logprob: -4.251381874084473
    6. '```' → logprob: -4.501381874084473
    7. ' for' → logprob: -5.126381874084473
    8. ')' → logprob: -5.251381874084473
    9. '):' → logprob: -5.501381874084473
    10. '):
' → logprob: -5.501381874084473

Token 1832: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.3448805809020996
    2. 'for' → logprob: -1.8448805809020996
    3. ':' → logprob: -1.9698805809020996
    4. '":' → logprob: -2.2198805809020996
    5. 'bits' → logprob: -2.5948805809020996
    6. ':
' → logprob: -2.8448805809020996
    7. '"' → logprob: -2.8448805809020996
    8. '```' → logprob: -3.7198805809020996
    9. '"
' → logprob: -4.3448805809021
    10. '):
' → logprob: -4.7198805809021

Token 1833: 'N' (ID: 45)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.11822552233934402
    2. '"' → logprob: -3.243225574493408
    3. 'bit' → logprob: -4.243225574493408
    4. 'for' → logprob: -4.868225574493408
    5. '"
' → logprob: -4.993225574493408
    6. 'code' → logprob: -5.243225574493408
    7. '")' → logprob: -5.493225574493408
    8. '```' → logprob: -5.618225574493408
    9. 'b' → logprob: -5.743225574493408
    10. 'i' → logprob: -5.868225574493408

Token 1834: '",' (ID: 672)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.99410080909729
    2. '_bits' → logprob: -1.24410080909729
    3. '_' → logprob: -2.24410080909729
    4. '```' → logprob: -2.86910080909729
    5. 'for' → logprob: -3.86910080909729
    6. ')' → logprob: -3.99410080909729
    7. ' =' → logprob: -3.99410080909729
    8. '"' → logprob: -4.119100570678711
    9. 'bits' → logprob: -4.119100570678711
    10. '_to' → logprob: -4.369100570678711

Token 1835: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.18607093393802643
    2. ''' → logprob: -2.1860709190368652
    3. '```' → logprob: -4.436070919036865
    4. ')' → logprob: -4.561070919036865
    5. '")' → logprob: -4.686070919036865
    6. '011' → logprob: -5.686070919036865
    7. '":' → logprob: -5.686070919036865
    8. ''"' → logprob: -6.186070919036865
    9. '"""' → logprob: -6.186070919036865
    10. ' "' → logprob: -6.686070919036865

Token 1836: '011' (ID: 17342)
  Prédit: '011'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '011' → logprob: -0.2306220978498459
    2. '001' → logprob: -1.9806220531463623
    3. '111' → logprob: -3.7306220531463623
    4. '100' → logprob: -3.9806220531463623
    5. '1' → logprob: -4.855622291564941
    6. ''' → logprob: -5.230622291564941
    7. '"' → logprob: -5.480622291564941
    8. '000' → logprob: -5.855622291564941
    9. '010' → logprob: -5.980622291564941
    10. '101' → logprob: -6.980622291564941

Token 1837: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.6800901293754578
    2. '00' → logprob: -1.5550901889801025
    3. '")' → logprob: -2.6800901889801025
    4. 'for' → logprob: -3.0550901889801025
    5. '"""
' → logprob: -3.3050901889801025
    6. 'def' → logprob: -3.5550901889801025
    7. '```' → logprob: -3.9300901889801025
    8. '11' → logprob: -4.305089950561523
    9. ')' → logprob: -4.805089950561523
    10. '0' → logprob: -4.805089950561523

Token 1838: '"),
' (ID: 8132)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.2695949077606201
    2. '```' → logprob: -1.5195949077606201
    3. ':' → logprob: -1.8945949077606201
    4. ':
' → logprob: -2.26959490776062
    5. '":' → logprob: -2.89459490776062
    6. '):
' → logprob: -3.26959490776062
    7. '_bits' → logprob: -3.51959490776062
    8. '       ' → logprob: -3.76959490776062
    9. '``' → logprob: -4.519595146179199
    10. 'for' → logprob: -4.644595146179199

Token 1839: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18411757051944733
    2. '```' → logprob: -2.934117555618286
    3. '       ' → logprob: -3.559117555618286
    4. 'for' → logprob: -3.809117555618286
    5. '"' → logprob: -4.309117794036865
    6. '):
' → logprob: -4.434117794036865
    7. ':' → logprob: -4.809117794036865
    8. ':
' → logprob: -5.559117794036865
    9. 'bits' → logprob: -5.684117794036865
    10. '``' → logprob: -5.809117794036865

Token 1840: ' ("' (ID: 7109)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.41230902075767517
    2. '   ' → logprob: -1.4123090505599976
    3. '```' → logprob: -2.912308931350708
    4. 'i' → logprob: -4.162309169769287
    5. 'for' → logprob: -4.662309169769287
    6. 'bit' → logprob: -4.912309169769287
    7. '       ' → logprob: -6.537309169769287
    8. '``' → logprob: -6.912309169769287
    9. 'decoded' → logprob: -7.287309169769287
    10. 'code' → logprob: -7.412309169769287

Token 1841: 'I' (ID: 40)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.08807248622179031
    2. 'b' → logprob: -3.0880725383758545
    3. 'for' → logprob: -4.463072299957275
    4. 'i' → logprob: -4.838072299957275
    5. 'bit' → logprob: -5.213072299957275
    6. '```' → logprob: -5.338072299957275
    7. '   ' → logprob: -6.463072299957275
    8. '"' → logprob: -6.838072299957275
    9. '
' → logprob: -6.963072299957275
    10. '`' → logprob: -7.338072299957275

Token 1842: '",' (ID: 672)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.8098861575126648
    2. '```' → logprob: -2.4348862171173096
    3. '"' → logprob: -2.5598862171173096
    4. '_bits' → logprob: -2.8098862171173096
    5. ' =' → logprob: -3.0598862171173096
    6. 'bits' → logprob: -3.1848862171173096
    7. '""' → logprob: -3.4348862171173096
    8. ')' → logprob: -3.5598862171173096
    9. '")' → logprob: -3.6848862171173096
    10. 'for' → logprob: -3.8098862171173096

Token 1843: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.5552830100059509
    2. ''' → logprob: -1.8052830696105957
    3. '```' → logprob: -2.1802830696105957
    4. ')' → logprob: -3.0552830696105957
    5. '"""' → logprob: -4.180283069610596
    6. '""' → logprob: -4.180283069610596
    7. '")' → logprob: -4.930283069610596
    8. ' "' → logprob: -5.055283069610596
    9. '":' → logprob: -5.305283069610596
    10. '0' → logprob: -5.305283069610596

Token 1844: '100' (ID: 1353)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.0255123376846313
    2. '0' → logprob: -1.2755123376846313
    3. '"' → logprob: -1.6505123376846313
    4. '100' → logprob: -2.400512218475342
    5. ''' → logprob: -3.025512218475342
    6. '```' → logprob: -4.400512218475342
    7. '``' → logprob: -5.650512218475342
    8. '`' → logprob: -5.650512218475342
    9. 'bit' → logprob: -6.025512218475342
    10. '"""' → logprob: -6.275512218475342

Token 1845: '00' (ID: 504)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.9498051404953003
    2. '""' → logprob: -1.6998051404953003
    3. '"' → logprob: -1.8248051404953003
    4. '"""' → logprob: -2.57480525970459
    5. '0' → logprob: -2.94980525970459
    6. '00' → logprob: -3.44980525970459
    7. '")' → logprob: -3.94980525970459
    8. '=' → logprob: -4.32480525970459
    9. '```' → logprob: -4.57480525970459
    10. ']' → logprob: -4.69980525970459

Token 1846: '"),
' (ID: 8132)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -1.139927625656128
    2. ':' → logprob: -1.389927625656128
    3. 'bits' → logprob: -2.264927625656128
    4. '   ' → logprob: -2.639927625656128
    5. ')' → logprob: -3.014927625656128
    6. '):' → logprob: -3.139927625656128
    7. '":' → logprob: -3.639927625656128
    8. ']' → logprob: -3.764927625656128
    9. 'for' → logprob: -3.889927625656128
    10. '```' → logprob: -4.014927864074707

Token 1847: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4039002060890198
    2. '"' → logprob: -2.278900146484375
    3. 'for' → logprob: -3.028900146484375
    4. '       ' → logprob: -3.153900146484375
    5. ':' → logprob: -4.153900146484375
    6. '")' → logprob: -4.403900146484375
    7. ')' → logprob: -4.528900146484375
    8. '```' → logprob: -4.653900146484375
    9. ''' → logprob: -4.778900146484375
    10. '):
' → logprob: -4.903900146484375

Token 1848: ' ("' (ID: 7109)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.7288023233413696
    2. '   ' → logprob: -1.3538023233413696
    3. 'for' → logprob: -2.10380220413208
    4. '       ' → logprob: -2.97880220413208
    5. '```' → logprob: -3.22880220413208
    6. 'bit' → logprob: -4.97880220413208
    7. '``' → logprob: -5.10380220413208
    8. 'b' → logprob: -5.10380220413208
    9. 'i' → logprob: -5.72880220413208
    10. '`' → logprob: -5.85380220413208

Token 1849: 'S' (ID: 50)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.20617642998695374
    2. 'b' → logprob: -2.081176519393921
    3. '```' → logprob: -3.706176519393921
    4. 'bit' → logprob: -3.956176519393921
    5. '   ' → logprob: -5.706176280975342
    6. 'c' → logprob: -6.331176280975342
    7. 'for' → logprob: -6.331176280975342
    8. '``' → logprob: -6.456176280975342
    9. '
' → logprob: -6.706176280975342
    10. '"' → logprob: -7.081176280975342

Token 1850: '",' (ID: 672)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.35294729471206665
    2. '"' → logprob: -2.477947235107422
    3. '+=' → logprob: -2.727947235107422
    4. ''' → logprob: -3.477947235107422
    5. '```' → logprob: -3.727947235107422
    6. ')' → logprob: -3.977947235107422
    7. '"""' → logprob: -4.352947235107422
    8. 'for' → logprob: -4.477947235107422
    9. '[' → logprob: -5.102947235107422
    10. '""' → logprob: -5.352947235107422

Token 1851: ' "' (ID: 392)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.15699604153633118
    2. '"' → logprob: -2.281996011734009
    3. '101' → logprob: -3.781996011734009
    4. '100' → logprob: -5.281996250152588
    5. '```' → logprob: -5.781996250152588
    6. '1' → logprob: -6.156996250152588
    7. '`' → logprob: -6.781996250152588
    8. 'bit' → logprob: -7.156996250152588
    9. '"'' → logprob: -7.281996250152588
    10. ''"' → logprob: -7.406996250152588

Token 1852: '101' (ID: 7959)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.865471363067627
    2. '101' → logprob: -0.865471363067627
    3. ''' → logprob: -2.615471363067627
    4. '"' → logprob: -2.615471363067627
    5. '100' → logprob: -5.240471363067627
    6. '```' → logprob: -6.740471363067627
    7. '001' → logprob: -6.865471363067627
    8. '`' → logprob: -7.365471363067627
    9. '"""' → logprob: -7.615471363067627
    10. '")' → logprob: -8.115470886230469

Token 1853: '00' (ID: 504)
  Prédit: '00'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '00' → logprob: -0.49053263664245605
    2. '0' → logprob: -0.990532636642456
    3. ')' → logprob: -5.115532875061035
    4. '```' → logprob: -6.240532875061035
    5. 'for' → logprob: -6.865532875061035
    6. 'def' → logprob: -7.115532875061035
    7. '"""' → logprob: -7.240532875061035
    8. ' ' → logprob: -7.365532875061035
    9. '")' → logprob: -7.615532875061035
    10. ':' → logprob: -7.740532875061035

Token 1854: '"),
' (ID: 8132)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0532294511795044
    2. ':' → logprob: -2.303229331970215
    3. ':
' → logprob: -2.428229331970215
    4. '":' → logprob: -2.678229331970215
    5. '```' → logprob: -2.928229331970215
    6. 'for' → logprob: -3.053229331970215
    7. '"' → logprob: -3.428229331970215
    8. '"
' → logprob: -3.553229331970215
    9. '_bits' → logprob: -3.678229331970215
    10. '=' → logprob: -3.803229331970215

Token 1855: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11995837837457657
    2. 'for' → logprob: -3.2449584007263184
    3. 'bits' → logprob: -3.4949584007263184
    4. '       ' → logprob: -3.7449584007263184
    5. '```' → logprob: -4.994958400726318
    6. 'bit' → logprob: -5.619958400726318
    7. '"' → logprob: -6.119958400726318
    8. ' for' → logprob: -6.744958400726318
    9. 'b' → logprob: -6.869958400726318
    10. '`' → logprob: -6.994958400726318

Token 1856: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8178665637969971
    2. 'bits' → logprob: -0.9428665637969971
    3. 'for' → logprob: -2.067866563796997
    4. '```' → logprob: -3.442866563796997
    5. '       ' → logprob: -5.192866325378418
    6. 'bit' → logprob: -6.317866325378418
    7. '``' → logprob: -7.192866325378418
    8. ' for' → logprob: -7.317866325378418
    9. 'decoded' → logprob: -7.817866325378418
    10. 'ch' → logprob: -8.442866325378418

Token 1857: 'H' (ID: 39)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.6676526665687561
    2. 'for' → logprob: -1.7926526069641113
    3. '   ' → logprob: -2.2926526069641113
    4. 'b' → logprob: -2.6676526069641113
    5. '"' → logprob: -3.2926526069641113
    6. 'bit' → logprob: -3.4176526069641113
    7. ''' → logprob: -4.042652606964111
    8. 'c' → logprob: -4.792652606964111
    9. '```' → logprob: -4.792652606964111
    10. '       ' → logprob: -4.917652606964111

Token 1858: '",' (ID: 672)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -1.6347136497497559
    2. '   ' → logprob: -2.009713649749756
    3. '"' → logprob: -2.134713649749756
    4. '```' → logprob: -2.259713649749756
    5. ')' → logprob: -2.384713649749756
    6. 'for' → logprob: -2.634713649749756
    7. '[' → logprob: -2.884713649749756
    8. '=' → logprob: -3.009713649749756
    9. ' =' → logprob: -3.509713649749756
    10. '       ' → logprob: -3.759713649749756

Token 1859: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.40310007333755493
    2. ''' → logprob: -1.5281000137329102
    3. '101' → logprob: -3.52810001373291
    4. '[' → logprob: -4.15310001373291
    5. '```' → logprob: -4.15310001373291
    6. '   ' → logprob: -4.27810001373291
    7. '`' → logprob: -4.77810001373291
    8. '[
' → logprob: -5.65310001373291
    9. '"
' → logprob: -5.90310001373291
    10. ')' → logprob: -6.15310001373291

Token 1860: '101' (ID: 7959)
  Prédit: '101'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '101' → logprob: -0.08223645389080048
    2. '1' → logprob: -3.0822365283966064
    3. ''' → logprob: -3.8322365283966064
    4. '"' → logprob: -4.832236289978027
    5. '```' → logprob: -7.082236289978027
    6. '`' → logprob: -7.457236289978027
    7. ')' → logprob: -7.832236289978027
    8. '")' → logprob: -8.707236289978027
    9. '[' → logprob: -8.832236289978027
    10. 'code' → logprob: -9.082236289978027

Token 1861: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.5229170918464661
    2. '1' → logprob: -1.0229170322418213
    3. '```' → logprob: -3.3979170322418213
    4. '`' → logprob: -5.5229172706604
    5. '``' → logprob: -5.7729172706604
    6. '110' → logprob: -6.7729172706604
    7. '"' → logprob: -7.0229172706604
    8. ''' → logprob: -7.0229172706604
    9. ')' → logprob: -7.8979172706604
    10. ':' → logprob: -8.022916793823242

Token 1862: '"),
' (ID: 8132)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7966771721839905
    2. ':' → logprob: -1.7966771125793457
    3. 'for' → logprob: -2.4216771125793457
    4. ':
' → logprob: -2.6716771125793457
    5. '"' → logprob: -3.2966771125793457
    6. '       ' → logprob: -3.5466771125793457
    7. '":' → logprob: -3.7966771125793457
    8. '```' → logprob: -3.7966771125793457
    9. '[' → logprob: -4.046677112579346
    10. ')' → logprob: -4.546677112579346

Token 1863: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11519508808851242
    2. '       ' → logprob: -2.7401950359344482
    3. 'for' → logprob: -3.4901950359344482
    4. '```' → logprob: -5.365195274353027
    5. 'bits' → logprob: -6.115195274353027
    6. ' for' → logprob: -6.115195274353027
    7. '"' → logprob: -6.865195274353027
    8. 'bit' → logprob: -6.990195274353027
    9. '`' → logprob: -7.240195274353027
    10. '           ' → logprob: -7.740195274353027

Token 1864: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.12913724780082703
    2. 'for' → logprob: -3.5041372776031494
    3. 'bits' → logprob: -3.6291372776031494
    4. '       ' → logprob: -3.7541372776031494
    5. '```' → logprob: -4.75413703918457
    6. '"' → logprob: -4.87913703918457
    7. 'b' → logprob: -5.12913703918457
    8. 'bit' → logprob: -5.75413703918457
    9. 'i' → logprob: -6.00413703918457
    10. '`' → logprob: -6.12913703918457

Token 1865: 'R' (ID: 49)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.8721569180488586
    2. 'bits' → logprob: -1.2471568584442139
    3. '"' → logprob: -2.372156858444214
    4. '`' → logprob: -2.997156858444214
    5. '```' → logprob: -2.997156858444214
    6. 'c' → logprob: -4.247157096862793
    7. '`
' → logprob: -4.247157096862793
    8. '   ' → logprob: -4.872157096862793
    9. 'bit' → logprob: -4.997157096862793
    10. '"
' → logprob: -4.997157096862793

Token 1866: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.6552351713180542
    2. '"' → logprob: -1.0302351713180542
    3. '```' → logprob: -3.5302352905273438
    4. '")' → logprob: -4.030235290527344
    5. '":' → logprob: -4.530235290527344
    6. ',' → logprob: -4.530235290527344
    7. '=' → logprob: -4.655235290527344
    8. '"
' → logprob: -4.780235290527344
    9. '"]' → logprob: -4.780235290527344
    10. '[' → logprob: -5.405235290527344

Token 1867: ' "' (ID: 392)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.4343034327030182
    2. '"' → logprob: -1.0593034029006958
    3. ' '' → logprob: -6.309303283691406
    4. ' "' → logprob: -6.559303283691406
    5. '```' → logprob: -7.184303283691406
    6. ')' → logprob: -7.934303283691406
    7. '=' → logprob: -8.434303283691406
    8. '`' → logprob: -8.434303283691406
    9. '"""' → logprob: -9.184303283691406
    10. ''"' → logprob: -9.309303283691406

Token 1868: '110' (ID: 7920)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.4557085931301117
    2. '1' → logprob: -1.580708622932434
    3. ''' → logprob: -2.8307085037231445
    4. '110' → logprob: -2.9557085037231445
    5. '```' → logprob: -3.4557085037231445
    6. '`' → logprob: -5.5807085037231445
    7. '")' → logprob: -5.9557085037231445
    8. '111' → logprob: -6.0807085037231445
    9. '"""' → logprob: -6.5807085037231445
    10. '101' → logprob: -6.5807085037231445

Token 1869: '00' (ID: 504)
  Prédit: '00'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '00' → logprob: -0.05134978145360947
    2. '0' → logprob: -3.0513498783111572
    3. '01' → logprob: -6.301349639892578
    4. ')' → logprob: -8.801349639892578
    5. '10' → logprob: -8.926349639892578
    6. '"' → logprob: -9.301349639892578
    7. '"]' → logprob: -9.551349639892578
    8. '])' → logprob: -9.551349639892578
    9. ']' → logprob: -9.801349639892578
    10. '")' → logprob: -9.801349639892578

Token 1870: '"),
' (ID: 8132)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.2038047313690186
    2. ':
' → logprob: -1.5788047313690186
    3. ':' → logprob: -2.2038047313690186
    4. '```' → logprob: -2.9538047313690186
    5. '       ' → logprob: -3.0788047313690186
    6. '"
' → logprob: -3.4538047313690186
    7. 'for' → logprob: -3.4538047313690186
    8. '"]' → logprob: -3.4538047313690186
    9. '"' → logprob: -3.5788047313690186
    10. ')
' → logprob: -3.8288047313690186

Token 1871: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.12343434244394302
    2. '       ' → logprob: -2.99843430519104
    3. '```' → logprob: -3.37343430519104
    4. 'for' → logprob: -4.623434543609619
    5. '"' → logprob: -4.873434543609619
    6. '`' → logprob: -5.873434543609619
    7. '``' → logprob: -6.248434543609619
    8. ' for' → logprob: -6.623434543609619
    9. ')' → logprob: -6.748434543609619
    10. ')
' → logprob: -6.873434543609619

Token 1872: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.34138068556785583
    2. '```' → logprob: -2.4663805961608887
    3. 'for' → logprob: -2.8413805961608887
    4. '       ' → logprob: -2.9663805961608887
    5. '"' → logprob: -3.5913805961608887
    6. 'bits' → logprob: -3.8413805961608887
    7. '``' → logprob: -5.091380596160889
    8. '`' → logprob: -5.216380596160889
    9. 'i' → logprob: -5.466380596160889
    10. 'bit' → logprob: -5.466380596160889

Token 1873: 'D' (ID: 35)
  Prédit: 'code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'code' → logprob: -1.2827800512313843
    2. 'D' → logprob: -2.032780170440674
    3. 'd' → logprob: -2.032780170440674
    4. 'i' → logprob: -2.157780170440674
    5. ''' → logprob: -2.157780170440674
    6. 'for' → logprob: -2.907780170440674
    7. '`' → logprob: -3.532780170440674
    8. '```' → logprob: -3.782780170440674
    9. '"' → logprob: -3.907780170440674
    10. 'c' → logprob: -4.157780170440674

Token 1874: '",' (ID: 672)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '```' → logprob: -1.3067734241485596
    2. '"' → logprob: -1.9317734241485596
    3. '[' → logprob: -2.1817734241485596
    4. 'for' → logprob: -2.5567734241485596
    5. '=' → logprob: -2.6817734241485596
    6. ')' → logprob: -2.9317734241485596
    7. '   ' → logprob: -3.0567734241485596
    8. ']' → logprob: -3.4317734241485596
    9. ':' → logprob: -3.4317734241485596
    10. ''' → logprob: -3.5567734241485596

Token 1875: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.7743927240371704
    2. ''' → logprob: -1.3993927240371704
    3. '```' → logprob: -1.8993927240371704
    4. '`' → logprob: -4.149392604827881
    5. '   ' → logprob: -4.149392604827881
    6. '``' → logprob: -4.399392604827881
    7. '101' → logprob: -4.649392604827881
    8. '[' → logprob: -4.899392604827881
    9. ' "' → logprob: -4.899392604827881
    10. '"
' → logprob: -4.899392604827881

Token 1876: '110' (ID: 7920)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.7165392637252808
    2. '110' → logprob: -1.0915392637252808
    3. ''' → logprob: -2.4665393829345703
    4. '"' → logprob: -3.3415393829345703
    5. '0' → logprob: -4.21653938293457
    6. '101' → logprob: -4.34153938293457
    7. '10' → logprob: -4.71653938293457
    8. '11' → logprob: -4.96653938293457
    9. '010' → logprob: -5.96653938293457
    10. '001' → logprob: -6.71653938293457

Token 1877: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.0002957783581223339
    2. '1' → logprob: -9.625295639038086
    3. '```' → logprob: -9.750295639038086
    4. '01' → logprob: -10.625295639038086
    5. ':' → logprob: -11.000295639038086
    6. '101' → logprob: -11.250295639038086
    7. '"""
' → logprob: -11.250295639038086
    8. '11' → logprob: -11.250295639038086
    9. ':
' → logprob: -11.500295639038086
    10. '):
' → logprob: -11.500295639038086

Token 1878: '"),
' (ID: 8132)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0747944116592407
    2. ':
' → logprob: -1.4497944116592407
    3. '[' → logprob: -2.324794292449951
    4. '       ' → logprob: -2.574794292449951
    5. ':' → logprob: -3.074794292449951
    6. 'for' → logprob: -3.199794292449951
    7. '[
' → logprob: -3.699794292449951
    8. '```' → logprob: -3.699794292449951
    9. '":' → logprob: -4.074794292449951
    10. '"' → logprob: -4.199794292449951

Token 1879: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11189262568950653
    2. '       ' → logprob: -2.6118927001953125
    3. 'bits' → logprob: -4.4868927001953125
    4. '```' → logprob: -4.4868927001953125
    5. 'for' → logprob: -5.3618927001953125
    6. '`' → logprob: -6.1118927001953125
    7. 'bit' → logprob: -6.8618927001953125
    8. ' for' → logprob: -7.7368927001953125
    9. 'b' → logprob: -7.8618927001953125
    10. '``' → logprob: -8.486892700195312

Token 1880: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09207738935947418
    2. '```' → logprob: -3.2170774936676025
    3. 'for' → logprob: -4.092077255249023
    4. '       ' → logprob: -4.217077255249023
    5. 'bits' → logprob: -4.342077255249023
    6. '``' → logprob: -6.592077255249023
    7. 'bit' → logprob: -7.467077255249023
    8. '`' → logprob: -7.592077255249023
    9. ' for' → logprob: -8.092077255249023
    10. '"' → logprob: -8.717077255249023

Token 1881: 'L' (ID: 43)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.2327593564987183
    2. '"' → logprob: -1.3577593564987183
    3. '"
' → logprob: -2.357759475708008
    4. '   ' → logprob: -2.357759475708008
    5. '       ' → logprob: -3.607759475708008
    6. '```' → logprob: -3.732759475708008
    7. ''' → logprob: -3.982759475708008
    8. '`
' → logprob: -3.982759475708008
    9. 'bits' → logprob: -4.107759475708008
    10. ' for' → logprob: -4.232759475708008

Token 1882: '",' (ID: 672)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '```' → logprob: -0.2655019164085388
    2. '"' → logprob: -2.5155019760131836
    3. '[' → logprob: -3.2655019760131836
    4. '[
' → logprob: -3.7655019760131836
    5. '``' → logprob: -4.265501976013184
    6. '")' → logprob: -4.640501976013184
    7. ')' → logprob: -4.765501976013184
    8. '=' → logprob: -5.015501976013184
    9. '   ' → logprob: -5.265501976013184
    10. ''' → logprob: -5.265501976013184

Token 1883: ' "' (ID: 392)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.013602840714156628
    2. '"' → logprob: -4.6386027336120605
    3. '```' → logprob: -6.0136027336120605
    4. '`' → logprob: -7.3886027336120605
    5. ' '' → logprob: -8.513603210449219
    6. '111' → logprob: -9.138603210449219
    7. ')' → logprob: -9.263603210449219
    8. ''''' → logprob: -9.888603210449219
    9. '"'' → logprob: -10.138603210449219
    10. '[' → logprob: -10.263603210449219

Token 1884: '111' (ID: 8780)
  Prédit: '111'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '111' → logprob: -0.1161758080124855
    2. ''' → logprob: -2.866175889968872
    3. '"' → logprob: -3.491175889968872
    4. '1' → logprob: -4.616175651550293
    5. '```' → logprob: -5.116175651550293
    6. ''''' → logprob: -5.491175651550293
    7. '"""' → logprob: -7.491175651550293
    8. '0' → logprob: -7.491175651550293
    9. '`' → logprob: -8.616175651550293
    10. '110' → logprob: -8.616175651550293

Token 1885: '00' (ID: 504)
  Prédit: '00'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '00' → logprob: -0.0014805786777287722
    2. '0' → logprob: -7.126480579376221
    3. '```' → logprob: -7.751480579376221
    4. '"' → logprob: -9.501480102539062
    5. '000' → logprob: -10.001480102539062
    6. '001' → logprob: -10.001480102539062
    7. '``' → logprob: -11.126480102539062
    8. '")' → logprob: -11.376480102539062
    9. ')' → logprob: -11.626480102539062
    10. '"""
' → logprob: -11.876480102539062

Token 1886: '"),
' (ID: 8132)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '```' → logprob: -0.8267280459403992
    2. '   ' → logprob: -1.326728105545044
    3. '       ' → logprob: -3.326728105545044
    4. '"
' → logprob: -3.451728105545044
    5. '):
' → logprob: -3.576728105545044
    6. '"]' → logprob: -3.576728105545044
    7. '"):
' → logprob: -3.576728105545044
    8. '")' → logprob: -3.826728105545044
    9. '``' → logprob: -3.826728105545044
    10. '"' → logprob: -4.201727867126465

Token 1887: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1790783852338791
    2. 'for' → logprob: -2.9290783405303955
    3. '       ' → logprob: -2.9290783405303955
    4. '```' → logprob: -3.5540783405303955
    5. 'bits' → logprob: -4.054078578948975
    6. '"' → logprob: -5.429078578948975
    7. '`' → logprob: -6.429078578948975
    8. ' for' → logprob: -7.054078578948975
    9. 'bit' → logprob: -7.304078578948975
    10. '``' → logprob: -7.304078578948975

Token 1888: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.318424254655838
    2. '       ' → logprob: -2.3184242248535156
    3. 'for' → logprob: -2.4434242248535156
    4. '```' → logprob: -2.6934242248535156
    5. '``' → logprob: -5.318424224853516
    6. 'i' → logprob: -5.443424224853516
    7. '`' → logprob: -5.818424224853516
    8. '"' → logprob: -6.693424224853516
    9. 'while' → logprob: -7.318424224853516
    10. 'code' → logprob: -7.318424224853516

Token 1889: 'C' (ID: 34)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.7220010161399841
    2. 'C' → logprob: -1.347001075744629
    3. ''C' → logprob: -2.597001075744629
    4. '"'' → logprob: -2.972001075744629
    5. '```' → logprob: -3.472001075744629
    6. '"' → logprob: -3.472001075744629
    7. '111' → logprob: -3.972001075744629
    8. '"C' → logprob: -4.472001075744629
    9. ''"' → logprob: -4.847001075744629
    10. 'c' → logprob: -5.347001075744629

Token 1890: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.25890231132507324
    2. '```' → logprob: -2.3839023113250732
    3. ',' → logprob: -2.8839023113250732
    4. '"' → logprob: -3.1339023113250732
    5. ')' → logprob: -4.383902549743652
    6. '[' → logprob: -5.133902549743652
    7. '',' → logprob: -5.258902549743652
    8. '")' → logprob: -5.508902549743652
    9. '   ' → logprob: -6.258902549743652
    10. ''' → logprob: -6.758902549743652

Token 1891: ' "' (ID: 392)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.10382390767335892
    2. '"' → logprob: -2.3538239002227783
    3. ''"' → logprob: -6.478824138641357
    4. ' '' → logprob: -7.353824138641357
    5. '```' → logprob: -7.603824138641357
    6. '111' → logprob: -7.728824138641357
    7. '"'' → logprob: -8.4788236618042
    8. '[' → logprob: -10.3538236618042
    9. '`' → logprob: -10.3538236618042
    10. ''''' → logprob: -10.4788236618042

Token 1892: '111' (ID: 8780)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.3479533791542053
    2. '111' → logprob: -1.3479533195495605
    3. ''''' → logprob: -4.2229533195495605
    4. '"' → logprob: -4.4729533195495605
    5. ''"' → logprob: -5.5979533195495605
    6. '"'' → logprob: -5.8479533195495605
    7. '```' → logprob: -6.8479533195495605
    8. '''' → logprob: -9.097953796386719
    9. ''''
' → logprob: -9.847953796386719
    10. '`' → logprob: -9.972953796386719

Token 1893: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.0012120219180360436
    2. '```' → logprob: -7.251212120056152
    3. '00' → logprob: -7.751212120056152
    4. '``' → logprob: -10.376212120056152
    5. '110' → logprob: -10.876212120056152
    6. '01' → logprob: -12.001212120056152
    7. ')' → logprob: -12.626212120056152
    8. '101' → logprob: -13.001212120056152
    9. '"' → logprob: -13.001212120056152
    10. '010' → logprob: -13.626212120056152

Token 1894: '"),
' (ID: 8132)
  Prédit: '"]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"]' → logprob: -1.2448290586471558
    2. '   ' → logprob: -1.8698290586471558
    3. '```' → logprob: -2.1198291778564453
    4. '")' → logprob: -2.6198291778564453
    5. ')' → logprob: -2.9948291778564453
    6. ']' → logprob: -3.3698291778564453
    7. ')
' → logprob: -3.4948291778564453
    8. '"' → logprob: -3.6198291778564453
    9. ':' → logprob: -3.7448291778564453
    10. '"):
' → logprob: -3.8698291778564453

Token 1895: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08362280577421188
    2. '       ' → logprob: -3.458622694015503
    3. '```' → logprob: -3.833622694015503
    4. 'for' → logprob: -3.958622694015503
    5. ' for' → logprob: -6.333622932434082
    6. '"' → logprob: -6.583622932434082
    7. 'bits' → logprob: -6.958622932434082
    8. 'i' → logprob: -6.958622932434082
    9. '`' → logprob: -7.208622932434082
    10. '``' → logprob: -7.583622932434082

Token 1896: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10336633771657944
    2. '       ' → logprob: -2.7283663749694824
    3. '```' → logprob: -3.8533663749694824
    4. 'for' → logprob: -4.728366374969482
    5. '           ' → logprob: -7.228366374969482
    6. '"' → logprob: -7.478366374969482
    7. '`' → logprob: -7.603366374969482
    8. '``' → logprob: -8.478365898132324
    9. '               ' → logprob: -8.853365898132324
    10. ' for' → logprob: -8.853365898132324

Token 1897: 'U' (ID: 52)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.8542470932006836
    2. '"' → logprob: -1.1042470932006836
    3. 'code' → logprob: -2.3542470932006836
    4. '   ' → logprob: -3.2292470932006836
    5. 'for' → logprob: -3.6042470932006836
    6. '`' → logprob: -4.729247093200684
    7. '")' → logprob: -4.979247093200684
    8. ''"' → logprob: -5.104247093200684
    9. '       ' → logprob: -5.229247093200684
    10. ')' → logprob: -5.479247093200684

Token 1898: '",' (ID: 672)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.24234357476234436
    2. '```' → logprob: -3.1173436641693115
    3. ')' → logprob: -3.2423436641693115
    4. ''' → logprob: -3.4923436641693115
    5. '"' → logprob: -4.242343425750732
    6. ']' → logprob: -4.367343425750732
    7. ' =' → logprob: -4.367343425750732
    8. '[' → logprob: -4.617343425750732
    9. '")' → logprob: -4.742343425750732
    10. '[
' → logprob: -4.867343425750732

Token 1899: ' "' (ID: 392)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0022971592843532562
    2. ' '' → logprob: -6.8772969245910645
    3. '"' → logprob: -7.1272969245910645
    4. ''U' → logprob: -9.377297401428223
    5. '```' → logprob: -9.627297401428223
    6. ')' → logprob: -9.752297401428223
    7. '`' → logprob: -9.877297401428223
    8. '[' → logprob: -10.502297401428223
    9. ''A' → logprob: -10.502297401428223
    10. '0' → logprob: -10.752297401428223

Token 1900: '000' (ID: 1302)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.08213752508163452
    2. '000' → logprob: -2.8321375846862793
    3. '"' → logprob: -3.9571375846862793
    4. '111' → logprob: -7.957137584686279
    5. '```' → logprob: -8.707137107849121
    6. '`' → logprob: -9.082137107849121
    7. ''''' → logprob: -9.707137107849121
    8. '"""' → logprob: -9.957137107849121
    9. '0' → logprob: -10.457137107849121
    10. ''"' → logprob: -11.332137107849121

Token 1901: '00' (ID: 504)
  Prédit: '01'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '01' → logprob: -0.39183399081230164
    2. '00' → logprob: -1.141834020614624
    3. '0' → logprob: -6.016833782196045
    4. '```' → logprob: -6.641833782196045
    5. ')' → logprob: -8.266834259033203
    6. '"' → logprob: -9.141834259033203
    7. '[
' → logprob: -9.516834259033203
    8. '11' → logprob: -9.516834259033203
    9. '"""
' → logprob: -9.641834259033203
    10. '``' → logprob: -9.766834259033203

Token 1902: '"),
' (ID: 8132)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '")' → logprob: -0.908011257648468
    2. ')' → logprob: -1.6580111980438232
    3. '")
' → logprob: -2.6580111980438232
    4. ')
' → logprob: -2.9080111980438232
    5. '"):
' → logprob: -2.9080111980438232
    6. '"]' → logprob: -3.1580111980438232
    7. '```' → logprob: -3.4080111980438232
    8. '):
' → logprob: -3.6580111980438232
    9. '   ' → logprob: -3.6580111980438232
    10. '"):' → logprob: -3.7830111980438232

Token 1903: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16694825887680054
    2. '"' → logprob: -3.5419483184814453
    3. '       ' → logprob: -3.5419483184814453
    4. ':' → logprob: -3.9169483184814453
    5. ')' → logprob: -4.291948318481445
    6. '```' → logprob: -4.541948318481445
    7. ''' → logprob: -4.666948318481445
    8. '[' → logprob: -5.041948318481445
    9. 'for' → logprob: -5.166948318481445
    10. ':
' → logprob: -5.666948318481445

Token 1904: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18270006775856018
    2. 'for' → logprob: -2.8077001571655273
    3. 'bits' → logprob: -3.5577001571655273
    4. '```' → logprob: -3.5577001571655273
    5. '       ' → logprob: -3.9327001571655273
    6. '"' → logprob: -4.557700157165527
    7. '``' → logprob: -5.557700157165527
    8. 'bit' → logprob: -5.807700157165527
    9. '`' → logprob: -5.932700157165527
    10. ' for' → logprob: -5.932700157165527

Token 1905: 'M' (ID: 44)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.18850883841514587
    2. 'bits' → logprob: -2.6885087490081787
    3. 'M' → logprob: -3.3135087490081787
    4. '   ' → logprob: -3.8135087490081787
    5. 'code' → logprob: -4.813508987426758
    6. '"' → logprob: -4.938508987426758
    7. 'P' → logprob: -5.063508987426758
    8. ''' → logprob: -5.813508987426758
    9. '```' → logprob: -6.063508987426758
    10. '       ' → logprob: -6.063508987426758

Token 1906: '",' (ID: 672)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '```' → logprob: -1.3238143920898438
    2. '=' → logprob: -1.6988143920898438
    3. '[
' → logprob: -1.6988143920898438
    4. '[' → logprob: -2.1988143920898438
    5. ')' → logprob: -3.0738143920898438
    6. ']' → logprob: -3.3238143920898438
    7. '   ' → logprob: -3.5738143920898438
    8. 'for' → logprob: -3.8238143920898438
    9. '#' → logprob: -3.9488143920898438
    10. '"]' → logprob: -4.323814392089844

Token 1907: ' "' (ID: 392)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.07049062103033066
    2. '"' → logprob: -2.945490598678589
    3. '   ' → logprob: -5.320490837097168
    4. ' '' → logprob: -5.695490837097168
    5. '```' → logprob: -6.320490837097168
    6. '[' → logprob: -6.570490837097168
    7. '0' → logprob: -6.820490837097168
    8. '`' → logprob: -7.320490837097168
    9. ' ' → logprob: -8.070490837097168
    10. '[
' → logprob: -8.195490837097168

Token 1908: '001' (ID: 7659)
  Prédit: '001'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '001' → logprob: -0.47480157017707825
    2. '"' → logprob: -1.7248015403747559
    3. ''' → logprob: -2.474801540374756
    4. '0' → logprob: -3.224801540374756
    5. '111' → logprob: -3.599801540374756
    6. '[
' → logprob: -3.974801540374756
    7. '```' → logprob: -4.349801540374756
    8. '1' → logprob: -5.724801540374756
    9. '010' → logprob: -6.349801540374756
    10. '["' → logprob: -6.349801540374756

Token 1909: '00' (ID: 504)
  Prédit: '00'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '00' → logprob: -0.5083867907524109
    2. '0' → logprob: -1.1333868503570557
    3. '```' → logprob: -3.5083868503570557
    4. 'for' → logprob: -3.8833868503570557
    5. ')' → logprob: -4.633386611938477
    6. '11' → logprob: -5.383386611938477
    7. '1' → logprob: -5.758386611938477
    8. '``' → logprob: -6.383386611938477
    9. ']' → logprob: -7.133386611938477
    10. '"' → logprob: -7.758386611938477

Token 1910: '"),
' (ID: 8132)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.2543344497680664
    2. ')' → logprob: -1.7543344497680664
    3. '):' → logprob: -2.1293344497680664
    4. '")' → logprob: -2.2543344497680664
    5. '"):' → logprob: -2.3793344497680664
    6. '):
' → logprob: -2.7543344497680664
    7. '"):
' → logprob: -3.6293344497680664
    8. '"]' → logprob: -3.8793344497680664
    9. '```' → logprob: -4.129334449768066
    10. 'for' → logprob: -4.129334449768066

Token 1911: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2556909918785095
    2. 'for' → logprob: -2.3806910514831543
    3. '       ' → logprob: -2.6306910514831543
    4. 'bits' → logprob: -3.1306910514831543
    5. '```' → logprob: -4.880691051483154
    6. ' for' → logprob: -5.880691051483154
    7. '           ' → logprob: -6.755691051483154
    8. 'i' → logprob: -6.755691051483154
    9. 'bit' → logprob: -7.255691051483154
    10. ' bits' → logprob: -7.630691051483154

Token 1912: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9890796542167664
    2. 'for' → logprob: -1.2390797138214111
    3. 'bits' → logprob: -1.4890797138214111
    4. '```' → logprob: -2.989079713821411
    5. '"' → logprob: -4.489079475402832
    6. 'code' → logprob: -4.489079475402832
    7. 'i' → logprob: -5.114079475402832
    8. '       ' → logprob: -5.239079475402832
    9. '`' → logprob: -5.364079475402832
    10. 'bit' → logprob: -5.364079475402832

Token 1913: 'W' (ID: 54)
  Prédit: 'W'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'W' → logprob: -0.7396447658538818
    2. 'for' → logprob: -1.2396447658538818
    3. ''' → logprob: -1.7396447658538818
    4. '"' → logprob: -3.239644765853882
    5. '   ' → logprob: -5.739645004272461
    6. '"W' → logprob: -5.864645004272461
    7. '       ' → logprob: -6.239645004272461
    8. '```' → logprob: -6.614645004272461
    9. '`' → logprob: -7.239645004272461
    10. '"'' → logprob: -7.364645004272461

Token 1914: '",' (ID: 672)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.448229193687439
    2. '```' → logprob: -1.823229193687439
    3. '")' → logprob: -2.3232293128967285
    4. '=' → logprob: -2.3232293128967285
    5. ']' → logprob: -2.6982293128967285
    6. '[' → logprob: -2.8232293128967285
    7. '[
' → logprob: -2.9482293128967285
    8. ':' → logprob: -3.0732293128967285
    9. '"]' → logprob: -3.6982293128967285
    10. '   ' → logprob: -3.8232293128967285

Token 1915: ' "' (ID: 392)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.14134186506271362
    2. '"' → logprob: -2.2663419246673584
    3. '[' → logprob: -4.391341686248779
    4. '[
' → logprob: -4.766341686248779
    5. '```' → logprob: -5.516341686248779
    6. '`' → logprob: -7.141341686248779
    7. '   ' → logprob: -7.391341686248779
    8. ''\' → logprob: -7.766341686248779
    9. '0' → logprob: -8.266342163085938
    10. ''"' → logprob: -8.391342163085938

Token 1916: '010' (ID: 13522)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.8611019849777222
    2. '[
' → logprob: -1.8611019849777222
    3. '010' → logprob: -1.9861019849777222
    4. ''' → logprob: -2.7361021041870117
    5. '"\' → logprob: -3.1111021041870117
    6. '```' → logprob: -3.1111021041870117
    7. '001' → logprob: -3.7361021041870117
    8. '011' → logprob: -3.7361021041870117
    9. '111' → logprob: -3.7361021041870117
    10. '[' → logprob: -4.236102104187012

Token 1917: '10' (ID: 702)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.9292623996734619
    2. '10' → logprob: -1.304262399673462
    3. ')' → logprob: -2.179262399673462
    4. '```' → logprob: -2.679262399673462
    5. '00' → logprob: -3.054262399673462
    6. 'def' → logprob: -3.429262399673462
    7. '])' → logprob: -4.179262161254883
    8. '[
' → logprob: -5.054262161254883
    9. '``' → logprob: -5.054262161254883
    10. '"]' → logprob: -5.304262161254883

Token 1918: '"),
' (ID: 8132)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '")' → logprob: -1.0436959266662598
    2. '"]' → logprob: -1.4186959266662598
    3. ')' → logprob: -1.9186959266662598
    4. ']' → logprob: -2.1686959266662598
    5. '   ' → logprob: -3.1686959266662598
    6. '```' → logprob: -3.4186959266662598
    7. '):
' → logprob: -4.16869592666626
    8. '"):
' → logprob: -4.41869592666626
    9. '"):' → logprob: -4.54369592666626
    10. '):' → logprob: -5.54369592666626

Token 1919: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2706083655357361
    2. 'for' → logprob: -2.520608425140381
    3. '       ' → logprob: -2.520608425140381
    4. 'bits' → logprob: -3.145608425140381
    5. '```' → logprob: -4.020608425140381
    6. ' for' → logprob: -5.520608425140381
    7. '"' → logprob: -6.145608425140381
    8. 'bit' → logprob: -6.395608425140381
    9. '`' → logprob: -6.520608425140381
    10. '           ' → logprob: -6.895608425140381

Token 1920: ' ("' (ID: 7109)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.921425461769104
    2. '       ' → logprob: -1.171425461769104
    3. '   ' → logprob: -1.671425461769104
    4. '```' → logprob: -2.7964253425598145
    5. '"' → logprob: -4.5464253425598145
    6. ' for' → logprob: -5.2964253425598145
    7. ''' → logprob: -5.2964253425598145
    8. '``' → logprob: -5.4214253425598145
    9. '           ' → logprob: -5.5464253425598145
    10. '"\' → logprob: -6.1714253425598145

Token 1921: 'F' (ID: 37)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.15583792328834534
    2. 'F' → logprob: -3.5308380126953125
    3. 'for' → logprob: -3.6558380126953125
    4. '"' → logprob: -3.7808380126953125
    5. '"'' → logprob: -4.2808380126953125
    6. '```' → logprob: -4.5308380126953125
    7. '   ' → logprob: -4.9058380126953125
    8. ''"' → logprob: -5.0308380126953125
    9. '       ' → logprob: -5.6558380126953125
    10. '           ' → logprob: -5.9058380126953125

Token 1922: '",' (ID: 672)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.7058963775634766
    2. ')' → logprob: -1.8308963775634766
    3. '"' → logprob: -2.7058963775634766
    4. '```' → logprob: -2.7058963775634766
    5. '[
' → logprob: -3.3308963775634766
    6. '#' → logprob: -3.5808963775634766
    7. ''' → logprob: -3.8308963775634766
    8. '")' → logprob: -3.8308963775634766
    9. '   ' → logprob: -3.8308963775634766
    10. '",' → logprob: -4.080896377563477

Token 1923: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.7280537486076355
    2. ''' → logprob: -0.7280537486076355
    3. '010' → logprob: -3.8530538082122803
    4. '```' → logprob: -5.478053569793701
    5. ' "' → logprob: -5.853053569793701
    6. ' '' → logprob: -6.728053569793701
    7. '   ' → logprob: -6.978053569793701
    8. ')' → logprob: -6.978053569793701
    9. '0' → logprob: -7.103053569793701
    10. '[' → logprob: -7.853053569793701

Token 1924: '010' (ID: 13522)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.9370425939559937
    2. '010' → logprob: -0.9370425939559937
    3. ''' → logprob: -1.5620425939559937
    4. '```' → logprob: -5.562042713165283
    5. '0' → logprob: -6.312042713165283
    6. ')' → logprob: -8.312042236328125
    7. ''"' → logprob: -8.937042236328125
    8. '011' → logprob: -9.312042236328125
    9. '"""' → logprob: -9.437042236328125
    10. '`' → logprob: -9.562042236328125

Token 1925: '11' (ID: 994)
  Prédit: '11'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '11' → logprob: -0.0028912981506437063
    2. ')' → logprob: -6.3778910636901855
    3. '00' → logprob: -7.8778910636901855
    4. '])' → logprob: -8.377891540527344
    5. '")' → logprob: -8.877891540527344
    6. '0' → logprob: -10.002891540527344
    7. ']' → logprob: -10.127891540527344
    8. '```' → logprob: -10.252891540527344
    9. '10' → logprob: -10.627891540527344
    10. '):
' → logprob: -10.752891540527344

Token 1926: '"),
' (ID: 8132)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.051898855715990067
    2. '")
' → logprob: -4.051898956298828
    3. '"):
' → logprob: -4.051898956298828
    4. '"):' → logprob: -4.926898956298828
    5. '```' → logprob: -5.801898956298828
    6. '   ' → logprob: -6.676898956298828
    7. ')' → logprob: -7.051898956298828
    8. '0' → logprob: -7.176898956298828
    9. '"),
' → logprob: -7.551898956298828
    10. '"' → logprob: -7.926898956298828

Token 1927: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5686405301094055
    2. '       ' → logprob: -1.0686404705047607
    3. '"' → logprob: -3.3186404705047607
    4. ''' → logprob: -3.8186404705047607
    5. 'for' → logprob: -5.19364070892334
    6. ')' → logprob: -5.31864070892334
    7. '`' → logprob: -5.44364070892334
    8. ' for' → logprob: -5.56864070892334
    9. '```' → logprob: -6.31864070892334
    10. '           ' → logprob: -6.44364070892334

Token 1928: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9093207716941833
    2. 'for' → logprob: -0.9093207716941833
    3. '       ' → logprob: -2.159320831298828
    4. 'bits' → logprob: -3.159320831298828
    5. '```' → logprob: -4.284320831298828
    6. '"' → logprob: -5.159320831298828
    7. 'i' → logprob: -5.659320831298828
    8. 'code' → logprob: -6.534320831298828
    9. 'bit' → logprob: -6.659320831298828
    10. ''' → logprob: -6.659320831298828

Token 1929: 'Y' (ID: 56)
  Prédit: 'Y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Y' → logprob: -0.3481132984161377
    2. ''' → logprob: -1.4731132984161377
    3. '"' → logprob: -3.2231132984161377
    4. '   ' → logprob: -4.098113059997559
    5. ''y' → logprob: -5.723113059997559
    6. '       ' → logprob: -6.598113059997559
    7. '```' → logprob: -6.723113059997559
    8. '`' → logprob: -8.348113059997559
    9. ')' → logprob: -8.598113059997559
    10. '           ' → logprob: -8.848113059997559

Token 1930: '",' (ID: 672)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.09616898000240326
    2. '':' → logprob: -3.2211689949035645
    3. ':' → logprob: -3.8461689949035645
    4. '```' → logprob: -4.5961689949035645
    5. '"' → logprob: -5.4711689949035645
    6. '',' → logprob: -5.8461689949035645
    7. '[' → logprob: -5.9711689949035645
    8. '":' → logprob: -6.2211689949035645
    9. ')' → logprob: -6.9711689949035645
    10. '   ' → logprob: -7.0961689949035645

Token 1931: ' "' (ID: 392)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0065459092147648335
    2. ' '' → logprob: -5.6315460205078125
    3. '"' → logprob: -5.8815460205078125
    4. '```' → logprob: -9.506546020507812
    5. '0' → logprob: -10.881546020507812
    6. '`' → logprob: -11.006546020507812
    7. ')' → logprob: -12.006546020507812
    8. ''"' → logprob: -12.131546020507812
    9. ' ' → logprob: -12.131546020507812
    10. ''''' → logprob: -12.631546020507812

Token 1932: '011' (ID: 17342)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.13346394896507263
    2. '"' → logprob: -2.1334638595581055
    3. '011' → logprob: -5.3834638595581055
    4. '0' → logprob: -7.2584638595581055
    5. '010' → logprob: -7.6334638595581055
    6. '```' → logprob: -7.7584638595581055
    7. '001' → logprob: -9.383463859558105
    8. '`' → logprob: -9.883463859558105
    9. ''"' → logprob: -9.883463859558105
    10. '000' → logprob: -11.008463859558105

Token 1933: '01' (ID: 2290)
  Prédit: '01'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '01' → logprob: -0.05516400933265686
    2. '00' → logprob: -2.930164098739624
    3. '10' → logprob: -9.180164337158203
    4. '```' → logprob: -9.305164337158203
    5. '0' → logprob: -10.555164337158203
    6. '001' → logprob: -11.055164337158203
    7. '``' → logprob: -11.180164337158203
    8. '11' → logprob: -11.555164337158203
    9. ')' → logprob: -11.930164337158203
    10. '010' → logprob: -12.305164337158203

Token 1934: '"),
' (ID: 8132)
  Prédit: '"),
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"),
' → logprob: -0.7851462364196777
    2. '")' → logprob: -1.5351462364196777
    3. '"):
' → logprob: -2.0351462364196777
    4. '",' → logprob: -2.2851462364196777
    5. '"),' → logprob: -3.1601462364196777
    6. '"):' → logprob: -3.7851462364196777
    7. '"' → logprob: -5.035146236419678
    8. '")
' → logprob: -5.160146236419678
    9. '",
' → logprob: -5.160146236419678
    10. '```' → logprob: -5.410146236419678

Token 1935: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4220317006111145
    2. '       ' → logprob: -1.7970316410064697
    3. 'for' → logprob: -2.0470316410064697
    4. '"' → logprob: -3.7970316410064697
    5. ''' → logprob: -4.922031879425049
    6. '```' → logprob: -5.297031879425049
    7. ' for' → logprob: -5.672031879425049
    8. '           ' → logprob: -5.672031879425049
    9. '`' → logprob: -6.297031879425049
    10. 'bits' → logprob: -6.922031879425049

Token 1936: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9099132418632507
    2. '       ' → logprob: -0.9099132418632507
    3. '"' → logprob: -2.6599133014678955
    4. ''' → logprob: -2.7849133014678955
    5. 'for' → logprob: -3.5349133014678955
    6. '```' → logprob: -4.284913063049316
    7. '           ' → logprob: -5.159913063049316
    8. ' for' → logprob: -6.409913063049316
    9. 'bits' → logprob: -6.409913063049316
    10. '               ' → logprob: -6.534913063049316

Token 1937: 'G' (ID: 38)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.5618979930877686
    2. '"' → logprob: -1.6868979930877686
    3. '"P' → logprob: -1.9368979930877686
    4. '"G' → logprob: -2.8118979930877686
    5. '"B' → logprob: -3.5618979930877686
    6. '```' → logprob: -6.311898231506348
    7. '100' → logprob: -6.561898231506348
    8. '   ' → logprob: -6.936898231506348
    9. '"K' → logprob: -7.061898231506348
    10. '``' → logprob: -7.186898231506348

Token 1938: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.472688764333725
    2. '',' → logprob: -1.4726887941360474
    3. ',' → logprob: -2.847688674926758
    4. ''' → logprob: -3.722688674926758
    5. ':' → logprob: -4.472688674926758
    6. '[' → logprob: -4.472688674926758
    7. '```' → logprob: -4.472688674926758
    8. '"' → logprob: -4.847688674926758
    9. '   ' → logprob: -5.222688674926758
    10. ')' → logprob: -5.847688674926758

Token 1939: ' "' (ID: 392)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.11807087808847427
    2. '"' → logprob: -2.2430708408355713
    3. ' '' → logprob: -5.49307107925415
    4. ' "' → logprob: -8.243070602416992
    5. '   ' → logprob: -8.368070602416992
    6. ')' → logprob: -8.493070602416992
    7. '```' → logprob: -8.868070602416992
    8. ''"' → logprob: -9.743070602416992
    9. '[' → logprob: -10.493070602416992
    10. '`' → logprob: -10.493070602416992

Token 1940: '100' (ID: 1353)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.379559189081192
    2. ''' → logprob: -1.3795591592788696
    3. '100' → logprob: -2.754559278488159
    4. '```' → logprob: -8.504559516906738
    5. '`' → logprob: -9.254559516906738
    6. '101' → logprob: -9.754559516906738
    7. '010' → logprob: -10.254559516906738
    8. '110' → logprob: -10.879559516906738
    9. '"""' → logprob: -11.254559516906738
    10. '``' → logprob: -11.379559516906738

Token 1941: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.12472572922706604
    2. '11' → logprob: -2.499725818634033
    3. '"' → logprob: -4.249725818634033
    4. ')' → logprob: -4.999725818634033
    5. ''' → logprob: -5.374725818634033
    6. '00' → logprob: -5.874725818634033
    7. '```' → logprob: -5.874725818634033
    8. '")' → logprob: -7.124725818634033
    9. '1' → logprob: -7.999725818634033
    10. '">' → logprob: -7.999725818634033

Token 1942: '"),
' (ID: 8132)
  Prédit: '"):
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"):
' → logprob: -0.6936876773834229
    2. '")' → logprob: -1.1936876773834229
    3. '")
' → logprob: -2.068687677383423
    4. '"):' → logprob: -3.193687677383423
    5. '"),
' → logprob: -4.568687438964844
    6. '   ' → logprob: -5.068687438964844
    7. '"),' → logprob: -6.193687438964844
    8. ')' → logprob: -6.193687438964844
    9. '):
' → logprob: -6.193687438964844
    10. '"' → logprob: -6.568687438964844

Token 1943: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3077819049358368
    2. '       ' → logprob: -1.8077819347381592
    3. '"' → logprob: -2.682781934738159
    4. ''' → logprob: -4.55778169631958
    5. '```' → logprob: -5.43278169631958
    6. ' for' → logprob: -5.55778169631958
    7. 'for' → logprob: -5.80778169631958
    8. '`' → logprob: -6.18278169631958
    9. ')' → logprob: -6.55778169631958
    10. '    ' → logprob: -6.68278169631958

Token 1944: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.2097043991088867
    2. '       ' → logprob: -1.3347043991088867
    3. '"' → logprob: -1.4597043991088867
    4. ''' → logprob: -1.8347043991088867
    5. '"P' → logprob: -4.584704399108887
    6. '("' (adapté à ' ("') → logprob: -4.834704399108887
    7. '('' → logprob: -4.959704399108887
    8. '(' → logprob: -5.334704399108887
    9. '```' → logprob: -5.459704399108887
    10. '           ' → logprob: -6.334704399108887

Token 1945: 'P' (ID: 47)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.07603928446769714
    2. '"' → logprob: -3.8260393142700195
    3. 'P' → logprob: -4.4510393142700195
    4. '   ' → logprob: -4.9510393142700195
    5. ''"' → logprob: -5.4510393142700195
    6. '"'' → logprob: -5.5760393142700195
    7. 'B' → logprob: -5.8260393142700195
    8. 'bit' → logprob: -6.2010393142700195
    9. '       ' → logprob: -6.3260393142700195
    10. '')' → logprob: -6.3260393142700195

Token 1946: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.09758232533931732
    2. '',' → logprob: -2.8475823402404785
    3. ',' → logprob: -4.2225823402404785
    4. '   ' → logprob: -5.3475823402404785
    5. '"' → logprob: -5.5975823402404785
    6. ''' → logprob: -5.8475823402404785
    7. ')' → logprob: -5.9725823402404785
    8. ''",' → logprob: -6.9725823402404785
    9. '":' → logprob: -7.2225823402404785
    10. '):' → logprob: -7.3475823402404785

Token 1947: ' "' (ID: 392)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.08777739852666855
    2. '"' → logprob: -2.9627773761749268
    3. ' '' → logprob: -3.4627773761749268
    4. ' "' → logprob: -8.212777137756348
    5. ''"' → logprob: -8.462777137756348
    6. '(' → logprob: -8.712777137756348
    7. '('' → logprob: -9.212777137756348
    8. ' (' → logprob: -9.462777137756348
    9. '```' → logprob: -10.212777137756348
    10. ' ' → logprob: -10.212777137756348

Token 1948: '111' (ID: 8780)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0812375545501709
    2. '"' → logprob: -2.581237554550171
    3. '111' → logprob: -6.33123779296875
    4. ''"' → logprob: -8.08123779296875
    5. ''''' → logprob: -8.83123779296875
    6. '"'' → logprob: -9.83123779296875
    7. '```' → logprob: -10.45623779296875
    8. '"""' → logprob: -11.08123779296875
    9. '`' → logprob: -12.58123779296875
    10. ''''
' → logprob: -12.70623779296875

Token 1949: '"),
' (ID: 8132)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '")' → logprob: -0.4559008479118347
    2. '00' → logprob: -1.4559009075164795
    3. ')' → logprob: -3.0809009075164795
    4. '"' → logprob: -3.2059009075164795
    5. '11' → logprob: -3.4559009075164795
    6. '""' → logprob: -5.4559006690979
    7. '')' → logprob: -6.2059006690979
    8. ''' → logprob: -6.4559006690979
    9. '```' → logprob: -6.8309006690979
    10. '"""' → logprob: -7.0809006690979

Token 1950: '   ' (ID: 271)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.5554482340812683
    2. ''' → logprob: -1.805448293685913
    3. ')' → logprob: -2.805448293685913
    4. ':' → logprob: -2.930448293685913
    5. ']' → logprob: -3.055448293685913
    6. '[
' → logprob: -3.680448293685913
    7. '"' → logprob: -3.805448293685913
    8. '#' → logprob: -4.180448055267334
    9. '   ' → logprob: -4.555448055267334
    10. '```' → logprob: -5.055448055267334

Token 1951: ' ("' (ID: 7109)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -1.0884227752685547
    2. '   ' → logprob: -1.2134227752685547
    3. ':' → logprob: -2.3384227752685547
    4. ''' → logprob: -2.4634227752685547
    5. '":' → logprob: -2.9634227752685547
    6. '[' → logprob: -3.7134227752685547
    7. ':
' → logprob: -4.088422775268555
    8. ')' → logprob: -4.213422775268555
    9. '```' → logprob: -4.338422775268555
    10. '`' → logprob: -4.838422775268555

Token 1952: 'B' (ID: 33)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.2296246588230133
    2. '"' → logprob: -2.1046247482299805
    3. 'B' → logprob: -2.8546247482299805
    4. 'A' → logprob: -5.3546247482299805
    5. ')' → logprob: -5.7296247482299805
    6. '0' → logprob: -5.9796247482299805
    7. ''"' → logprob: -6.1046247482299805
    8. '"'' → logprob: -6.4796247482299805
    9. '"B' → logprob: -6.6046247482299805
    10. '")' → logprob: -6.9796247482299805

Token 1953: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.21257086098194122
    2. '")' → logprob: -2.712570905685425
    3. '"' → logprob: -3.462570905685425
    4. ')' → logprob: -3.712570905685425
    5. '":' → logprob: -4.212570667266846
    6. '"):' → logprob: -4.212570667266846
    7. ',' → logprob: -5.087570667266846
    8. '):' → logprob: -5.337570667266846
    9. '',' → logprob: -5.337570667266846
    10. ':' → logprob: -5.337570667266846

Token 1954: ' "' (ID: 392)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0016744681634008884
    2. ' '' → logprob: -6.876674652099609
    3. '"' → logprob: -7.376674652099609
    4. '1' → logprob: -12.25167465209961
    5. '```' → logprob: -13.25167465209961
    6. '[' → logprob: -13.62667465209961
    7. '100' → logprob: -13.75167465209961
    8. ' ' → logprob: -14.12667465209961
    9. ''"' → logprob: -14.12667465209961
    10. '0' → logprob: -14.25167465209961

Token 1955: '100' (ID: 1353)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.49059349298477173
    2. '100' → logprob: -1.490593433380127
    3. '"' → logprob: -1.865593433380127
    4. '1' → logprob: -5.115593433380127
    5. '110' → logprob: -7.115593433380127
    6. '101' → logprob: -8.240593910217285
    7. '`' → logprob: -8.240593910217285
    8. '001' → logprob: -9.615593910217285
    9. '0' → logprob: -9.865593910217285
    10. '010' → logprob: -10.115593910217285

Token 1956: '11' (ID: 994)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -1.1158814430236816
    2. ')' → logprob: -1.4908814430236816
    3. '11' → logprob: -1.8658814430236816
    4. '"' → logprob: -2.2408814430236816
    5. '")' → logprob: -2.9908814430236816
    6. '')' → logprob: -3.1158814430236816
    7. ']' → logprob: -4.365881443023682
    8. '']' → logprob: -4.365881443023682
    9. '">' → logprob: -4.615881443023682
    10. '#' → logprob: -4.740881443023682

Token 1957: '"),
' (ID: 8132)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '")' → logprob: -1.3280792236328125
    2. ')' → logprob: -1.4530792236328125
    3. ']' → logprob: -1.8280792236328125
    4. '"]' → logprob: -2.3280792236328125
    5. '']' → logprob: -2.8280792236328125
    6. '')' → logprob: -2.9530792236328125
    7. '[' → logprob: -3.5780792236328125
    8. ''' → logprob: -3.8280792236328125
    9. '"' → logprob: -4.0780792236328125
    10. ':' → logprob: -4.0780792236328125

Token 1958: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -1.4249309301376343
    2. ']' → logprob: -1.5499309301376343
    3. ')' → logprob: -1.9249309301376343
    4. '']' → logprob: -2.049931049346924
    5. '"]' → logprob: -2.674931049346924
    6. '   ' → logprob: -2.799931049346924
    7. '[' → logprob: -2.924931049346924
    8. '"' → logprob: -3.299931049346924
    9. ':' → logprob: -4.424931049346924
    10. '")' → logprob: -5.299931049346924

Token 1959: ' ("' (ID: 7109)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.5307992696762085
    2. ')' → logprob: -1.6557992696762085
    3. '   ' → logprob: -2.405799388885498
    4. '"' → logprob: -2.780799388885498
    5. '")' → logprob: -3.530799388885498
    6. '')' → logprob: -4.155799388885498
    7. '       ' → logprob: -5.155799388885498
    8. 'V' → logprob: -5.905799388885498
    9. ':' → logprob: -6.155799388885498
    10. '']' → logprob: -7.030799388885498

Token 1960: 'V' (ID: 53)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.09595487266778946
    2. '"' → logprob: -3.2209548950195312
    3. 'V' → logprob: -3.3459548950195312
    4. '101' → logprob: -4.220954895019531
    5. '   ' → logprob: -7.845954895019531
    6. ')' → logprob: -8.220954895019531
    7. ''A' → logprob: -9.345954895019531
    8. '```' → logprob: -9.720954895019531
    9. '       ' → logprob: -9.845954895019531
    10. '']' → logprob: -9.970954895019531

Token 1961: '",' (ID: 672)
  Prédit: '','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '',' → logprob: -0.6081787943840027
    2. '",' → logprob: -0.9831787943840027
    3. ''' → logprob: -3.3581788539886475
    4. ',' → logprob: -4.233178615570068
    5. ')' → logprob: -4.733178615570068
    6. '"' → logprob: -5.233178615570068
    7. '':' → logprob: -5.608178615570068
    8. ':' → logprob: -5.983178615570068
    9. '":' → logprob: -5.983178615570068
    10. '[' → logprob: -6.483178615570068

Token 1962: ' "' (ID: 392)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0014232104877009988
    2. '"' → logprob: -7.376423358917236
    3. '0' → logprob: -7.376423358917236
    4. ' '' → logprob: -9.001422882080078
    5. '```' → logprob: -11.376422882080078
    6. '   ' → logprob: -12.251422882080078
    7. ')' → logprob: -12.251422882080078
    8. '`' → logprob: -12.501422882080078
    9. '       ' → logprob: -12.876422882080078
    10. ' ' → logprob: -13.001422882080078

Token 1963: '101' (ID: 7959)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0051170578226447105
    2. '0' → logprob: -5.380116939544678
    3. '"' → logprob: -8.005117416381836
    4. ' '' → logprob: -9.755117416381836
    5. '101' → logprob: -10.755117416381836
    6. '010' → logprob: -10.755117416381836
    7. ')' → logprob: -11.505117416381836
    8. '```' → logprob: -11.505117416381836
    9. '')' → logprob: -12.130117416381836
    10. ' ' → logprob: -12.505117416381836

Token 1964: '11' (ID: 994)
  Prédit: '11'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '11' → logprob: -0.32798314094543457
    2. ''' → logprob: -2.0779831409454346
    3. '```' → logprob: -3.0779831409454346
    4. ')' → logprob: -3.3279831409454346
    5. '')' → logprob: -4.0779829025268555
    6. '''' → logprob: -4.2029829025268555
    7. '")' → logprob: -4.8279829025268555
    8. '``' → logprob: -4.9529829025268555
    9. '"' → logprob: -5.0779829025268555
    10. '])' → logprob: -5.9529829025268555

Token 1965: '"),
' (ID: 8132)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '")' → logprob: -0.906792163848877
    2. ')' → logprob: -1.906792163848877
    3. '):
' → logprob: -2.031792163848877
    4. ')
' → logprob: -2.406792163848877
    5. '")
' → logprob: -2.406792163848877
    6. '}
' → logprob: -3.406792163848877
    7. '"):
' → logprob: -3.531792163848877
    8. '}' → logprob: -4.031792163848877
    9. '')' → logprob: -4.156792163848877
    10. '```' → logprob: -4.781792163848877

Token 1966: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.34204867482185364
    2. ''' → logprob: -1.8420486450195312
    3. '       ' → logprob: -2.8420486450195312
    4. '"' → logprob: -3.3420486450195312
    5. '"]' → logprob: -4.967048645019531
    6. ')' → logprob: -5.092048645019531
    7. '']' → logprob: -5.342048645019531
    8. '")' → logprob: -5.342048645019531
    9. ']' → logprob: -6.217048645019531
    10. '           ' → logprob: -7.092048645019531

Token 1967: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8010050654411316
    2. ''' → logprob: -1.4260051250457764
    3. 'for' → logprob: -2.4260051250457764
    4. '       ' → logprob: -2.9260051250457764
    5. '"' → logprob: -3.1760051250457764
    6. 'bit' → logprob: -3.4260051250457764
    7. 'c' → logprob: -3.9260051250457764
    8. 'char' → logprob: -4.551004886627197
    9. '```' → logprob: -4.676004886627197
    10. ''\' → logprob: -4.926004886627197

Token 1968: 'K' (ID: 42)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.2783602774143219
    2. 'K' → logprob: -1.7783602476119995
    3. 'X' → logprob: -3.528360366821289
    4. '"' → logprob: -4.528360366821289
    5. ')' → logprob: -5.028360366821289
    6. 'Z' → logprob: -5.528360366821289
    7. '[' → logprob: -5.903360366821289
    8. 'code' → logprob: -5.903360366821289
    9. '']' → logprob: -6.278360366821289
    10. '')' → logprob: -6.278360366821289

Token 1969: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.18966449797153473
    2. '',' → logprob: -2.814664602279663
    3. ':' → logprob: -3.314664602279663
    4. '":' → logprob: -4.064664363861084
    5. ')' → logprob: -4.689664363861084
    6. '"):' → logprob: -4.689664363861084
    7. ',' → logprob: -4.814664363861084
    8. '):' → logprob: -4.939664363861084
    9. '")' → logprob: -5.564664363861084
    10. '"' → logprob: -5.689664363861084

Token 1970: ' "' (ID: 392)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.007718544453382492
    2. '"' → logprob: -5.132718563079834
    3. ' '' → logprob: -6.382718563079834
    4. '110' → logprob: -10.632718086242676
    5. '0' → logprob: -11.507718086242676
    6. ')' → logprob: -11.757718086242676
    7. '   ' → logprob: -12.007718086242676
    8. ' ' → logprob: -12.257718086242676
    9. '```' → logprob: -12.382718086242676
    10. ''"' → logprob: -12.507718086242676

Token 1971: '110' (ID: 7920)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.021175023168325424
    2. '"' → logprob: -4.146174907684326
    3. '0' → logprob: -5.646174907684326
    4. '110' → logprob: -6.646174907684326
    5. ''"' → logprob: -9.021175384521484
    6. '"'' → logprob: -10.521175384521484
    7. '`' → logprob: -11.146175384521484
    8. ')' → logprob: -11.271175384521484
    9. ''A' → logprob: -11.521175384521484
    10. '010' → logprob: -11.771175384521484

Token 1972: '11' (ID: 994)
  Prédit: '11'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '11' → logprob: -0.0898866280913353
    2. '10' → logprob: -2.7148866653442383
    3. '00' → logprob: -4.339886665344238
    4. '"' → logprob: -6.339886665344238
    5. '")' → logprob: -6.464886665344238
    6. ')' → logprob: -6.839886665344238
    7. '01' → logprob: -7.339886665344238
    8. '])' → logprob: -7.464886665344238
    9. '1' → logprob: -8.339886665344238
    10. ''' → logprob: -8.964886665344238

Token 1973: '"),
' (ID: 8132)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '")' → logprob: -0.09648619592189789
    2. ')' → logprob: -2.8464860916137695
    3. '")
' → logprob: -3.7214860916137695
    4. ')
' → logprob: -5.8464860916137695
    5. '')' → logprob: -6.2214860916137695
    6. '"]' → logprob: -7.3464860916137695
    7. ':' → logprob: -7.4714860916137695
    8. '```' → logprob: -7.4714860916137695
    9. '"):' → logprob: -7.4714860916137695
    10. ']' → logprob: -7.5964860916137695

Token 1974: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.33188295364379883
    2. ''' → logprob: -1.9568829536437988
    3. '       ' → logprob: -2.456882953643799
    4. '"' → logprob: -4.206882953643799
    5. 'for' → logprob: -4.956882953643799
    6. ':' → logprob: -5.206882953643799
    7. ')' → logprob: -5.456882953643799
    8. '```' → logprob: -5.706882953643799
    9. '[' → logprob: -5.956882953643799
    10. '):
' → logprob: -6.081882953643799

Token 1975: ' ("' (ID: 7109)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.9269086718559265
    2. '   ' → logprob: -1.0519087314605713
    3. '"' → logprob: -2.0519087314605713
    4. '       ' → logprob: -3.5519087314605713
    5. 'for' → logprob: -3.9269087314605713
    6. '```' → logprob: -4.176908493041992
    7. ''\' → logprob: -5.051908493041992
    8. '":' → logprob: -5.301908493041992
    9. '`' → logprob: -5.551908493041992
    10. '")' → logprob: -5.551908493041992

Token 1976: 'X' (ID: 55)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.3604699373245239
    2. '"' → logprob: -1.485469937324524
    3. 'J' → logprob: -4.610469818115234
    4. ''A' → logprob: -4.610469818115234
    5. '110' → logprob: -4.860469818115234
    6. '111' → logprob: -4.985469818115234
    7. 'X' → logprob: -5.110469818115234
    8. '"'' → logprob: -5.360469818115234
    9. '```' → logprob: -5.610469818115234
    10. ''"' → logprob: -6.360469818115234

Token 1977: '",' (ID: 672)
  Prédit: '":'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '":' → logprob: -0.5578383207321167
    2. '",' → logprob: -1.1828383207321167
    3. ':' → logprob: -2.9328384399414062
    4. '```' → logprob: -3.8078384399414062
    5. '"' → logprob: -4.057838439941406
    6. '':' → logprob: -5.182838439941406
    7. ''' → logprob: -5.432838439941406
    8. '',' → logprob: -5.932838439941406
    9. ' =' → logprob: -6.182838439941406
    10. '[' → logprob: -6.307838439941406

Token 1978: ' "' (ID: 392)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.004944000858813524
    2. ' '' → logprob: -5.62994384765625
    3. '"' → logprob: -7.12994384765625
    4. ''"' → logprob: -8.37994384765625
    5. '0' → logprob: -8.87994384765625
    6. ''''' → logprob: -10.25494384765625
    7. '```' → logprob: -10.25494384765625
    8. ')' → logprob: -10.87994384765625
    9. '')' → logprob: -11.12994384765625
    10. '111' → logprob: -11.50494384765625

Token 1979: '111' (ID: 8780)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.2450198531150818
    2. '0' → logprob: -1.7450199127197266
    3. '"' → logprob: -3.2450199127197266
    4. ''''' → logprob: -7.495019912719727
    5. ')' → logprob: -8.120019912719727
    6. '`' → logprob: -8.370019912719727
    7. '```' → logprob: -8.370019912719727
    8. ''"' → logprob: -8.495019912719727
    9. '"""' → logprob: -8.495019912719727
    10. '111' → logprob: -8.745019912719727

Token 1980: '01' (ID: 2290)
  Prédit: '01'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '01' → logprob: -0.010204116813838482
    2. '"' → logprob: -5.760204315185547
    3. '10' → logprob: -6.135204315185547
    4. ''' → logprob: -6.135204315185547
    5. '0' → logprob: -6.885204315185547
    6. ')' → logprob: -7.760204315185547
    7. '00' → logprob: -7.885204315185547
    8. '```' → logprob: -8.260204315185547
    9. '11' → logprob: -8.760204315185547
    10. '1' → logprob: -9.385204315185547

Token 1981: '"),
' (ID: 8132)
  Prédit: '"]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"]' → logprob: -1.0443522930145264
    2. '']' → logprob: -1.2943522930145264
    3. ']' → logprob: -2.6693522930145264
    4. ')' → logprob: -2.7943522930145264
    5. '']
' → logprob: -3.1693522930145264
    6. '"]
' → logprob: -3.4193522930145264
    7. '")' → logprob: -3.9193522930145264
    8. ')
' → logprob: -3.9193522930145264
    9. '):
' → logprob: -4.0443525314331055
    10. '```' → logprob: -4.1693525314331055

Token 1982: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.7214034199714661
    2. '   ' → logprob: -1.0964033603668213
    3. '       ' → logprob: -2.9714033603668213
    4. '"' → logprob: -3.0964033603668213
    5. ']' → logprob: -4.2214035987854
    6. '```' → logprob: -4.3464035987854
    7. 'for' → logprob: -4.4714035987854
    8. '']' → logprob: -4.7214035987854
    9. ')' → logprob: -5.2214035987854
    10. ' for' → logprob: -5.5964035987854

Token 1983: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.21748319268226624
    2. 'for' → logprob: -2.5924832820892334
    3. 'bits' → logprob: -3.2174832820892334
    4. '```' → logprob: -3.8424832820892334
    5. '       ' → logprob: -3.9674832820892334
    6. 'bit' → logprob: -4.467483043670654
    7. 'char' → logprob: -4.967483043670654
    8. '"' → logprob: -5.967483043670654
    9. 'code' → logprob: -5.967483043670654
    10. 'c' → logprob: -5.967483043670654

Token 1984: 'J' (ID: 41)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.2901252210140228
    2. '"' → logprob: -1.9151252508163452
    3. 'J' → logprob: -2.6651251316070557
    4. ')' → logprob: -5.165125370025635
    5. '"'' → logprob: -5.415125370025635
    6. 'Q' → logprob: -5.915125370025635
    7. ''A' → logprob: -5.915125370025635
    8. ''"' → logprob: -6.290125370025635
    9. '")' → logprob: -6.540125370025635
    10. '')' → logprob: -6.540125370025635

Token 1985: '",' (ID: 672)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.5389684438705444
    2. '":' → logprob: -1.7889684438705444
    3. '[' → logprob: -3.538968563079834
    4. '",' → logprob: -3.538968563079834
    5. ')' → logprob: -3.663968563079834
    6. '':' → logprob: -3.788968563079834
    7. '")' → logprob: -3.913968563079834
    8. ''' → logprob: -4.038968563079834
    9. '"' → logprob: -4.038968563079834
    10. '"):' → logprob: -4.163968563079834

Token 1986: ' "' (ID: 392)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0017881096573546529
    2. '"' → logprob: -6.751788139343262
    3. ' '' → logprob: -7.751788139343262
    4. ''"' → logprob: -8.751788139343262
    5. '"'' → logprob: -11.501788139343262
    6. ''S' → logprob: -12.626788139343262
    7. '```' → logprob: -12.626788139343262
    8. ''''' → logprob: -13.001788139343262
    9. ''A' → logprob: -13.001788139343262
    10. '('' → logprob: -13.751788139343262

Token 1987: '001' (ID: 7659)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.582824170589447
    2. '001' → logprob: -0.832824170589447
    3. '0' → logprob: -5.207824230194092
    4. '"' → logprob: -7.207824230194092
    5. ''"' → logprob: -8.332823753356934
    6. '000' → logprob: -10.332823753356934
    7. '`' → logprob: -10.332823753356934
    8. '[' → logprob: -10.457823753356934
    9. '```' → logprob: -10.707823753356934
    10. ' '' → logprob: -10.957823753356934

Token 1988: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.03226423263549805
    2. '1' → logprob: -3.907264232635498
    3. ')' → logprob: -5.532264232635498
    4. '0' → logprob: -5.782264232635498
    5. '"' → logprob: -5.907264232635498
    6. ''' → logprob: -7.282264232635498
    7. '11' → logprob: -8.032264709472656
    8. '")' → logprob: -8.282264709472656
    9. '```' → logprob: -8.407264709472656
    10. '00' → logprob: -9.782264709472656

Token 1989: '"),
' (ID: 8132)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '")' → logprob: -0.04661059379577637
    2. ')' → logprob: -3.7966105937957764
    3. '"):' → logprob: -4.0466108322143555
    4. '):' → logprob: -6.9216108322143555
    5. '":' → logprob: -7.0466108322143555
    6. '```' → logprob: -7.2966108322143555
    7. ':' → logprob: -7.4216108322143555
    8. '"' → logprob: -7.7966108322143555
    9. '"):
' → logprob: -7.7966108322143555
    10. '")
' → logprob: -7.9216108322143555

Token 1990: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0668339729309082
    2. ')' → logprob: -1.6918339729309082
    3. ''' → logprob: -2.316833972930908
    4. '"' → logprob: -2.316833972930908
    5. '"]' → logprob: -2.816833972930908
    6. '")' → logprob: -2.941833972930908
    7. ']' → logprob: -3.191833972930908
    8. '       ' → logprob: -3.441833972930908
    9. '']' → logprob: -4.191833972930908
    10. '```' → logprob: -4.316833972930908

Token 1991: ' ("' (ID: 7109)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.6687743067741394
    2. '"' → logprob: -1.7937743663787842
    3. 'code' → logprob: -2.168774366378784
    4. '']' → logprob: -2.543774366378784
    5. '   ' → logprob: -3.168774366378784
    6. '"]' → logprob: -3.793774366378784
    7. '```' → logprob: -4.793774127960205
    8. ']' → logprob: -5.168774127960205
    9. ')' → logprob: -5.293774127960205
    10. '':' → logprob: -5.668774127960205

Token 1992: 'Q' (ID: 48)
  Prédit: 'Q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Q' → logprob: -0.9532065987586975
    2. 'code' → logprob: -0.9532065987586975
    3. 'for' → logprob: -2.3282065391540527
    4. ''' → logprob: -3.3282065391540527
    5. 'ch' → logprob: -4.203206539154053
    6. 'bit' → logprob: -4.453206539154053
    7. 'cd' → logprob: -4.828206539154053
    8. 'line' → logprob: -4.953206539154053
    9. 'char' → logprob: -5.578206539154053
    10. 'def' → logprob: -5.578206539154053

Token 1993: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.10069959610700607
    2. '',' → logprob: -2.7256996631622314
    3. ''",' → logprob: -4.475699424743652
    4. '":' → logprob: -4.725699424743652
    5. ':' → logprob: -6.475699424743652
    6. '):' → logprob: -6.600699424743652
    7. ',' → logprob: -6.850699424743652
    8. '':' → logprob: -6.975699424743652
    9. '```' → logprob: -6.975699424743652
    10. '"):' → logprob: -7.350699424743652

Token 1994: ' "' (ID: 392)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.003855297574773431
    2. '"' → logprob: -6.003855228424072
    3. ' '' → logprob: -6.753855228424072
    4. ''"' → logprob: -8.75385570526123
    5. '"'' → logprob: -10.62885570526123
    6. '0' → logprob: -11.00385570526123
    7. ''''' → logprob: -12.75385570526123
    8. '```' → logprob: -12.87885570526123
    9. ' ' → logprob: -14.25385570526123
    10. ''ok' → logprob: -14.37885570526123

Token 1995: '011' (ID: 17342)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.09503214061260223
    2. '"' → logprob: -2.470032215118408
    3. '0' → logprob: -5.345032215118408
    4. '011' → logprob: -7.470032215118408
    5. '001' → logprob: -8.09503173828125
    6. ''"' → logprob: -8.59503173828125
    7. '010' → logprob: -9.72003173828125
    8. '000' → logprob: -9.84503173828125
    9. '```' → logprob: -10.47003173828125
    10. '`' → logprob: -11.09503173828125

Token 1996: '11' (ID: 994)
  Prédit: '11'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '11' → logprob: -0.026324912905693054
    2. '1' → logprob: -3.776324987411499
    3. '"' → logprob: -6.15132474899292
    4. ''' → logprob: -7.15132474899292
    5. '``' → logprob: -10.151325225830078
    6. '")' → logprob: -10.401325225830078
    7. '```' → logprob: -10.776325225830078
    8. ')' → logprob: -11.151325225830078
    9. '01' → logprob: -11.651325225830078
    10. '"""
' → logprob: -12.026325225830078

Token 1997: '"),
' (ID: 8132)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.3619372844696045
    2. '")
' → logprob: -1.7369372844696045
    3. '"):
' → logprob: -2.6119372844696045
    4. '"):' → logprob: -2.9869372844696045
    5. ')' → logprob: -6.486937522888184
    6. '):
' → logprob: -7.986937522888184
    7. '"),
' → logprob: -8.111937522888184
    8. '')' → logprob: -8.611937522888184
    9. '");' → logprob: -8.736937522888184
    10. '")
' → logprob: -8.736937522888184

Token 1998: '   ' (ID: 271)
  Prédit: '']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '']' → logprob: -1.0837688446044922
    2. '"]' → logprob: -1.0837688446044922
    3. ''' → logprob: -2.333768844604492
    4. ']' → logprob: -2.583768844604492
    5. '"' → logprob: -2.833768844604492
    6. '   ' → logprob: -2.958768844604492
    7. ')' → logprob: -3.958768844604492
    8. '])' → logprob: -5.833768844604492
    9. '```' → logprob: -5.833768844604492
    10. ']
' → logprob: -6.583768844604492

Token 1999: ' ("' (ID: 7109)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -1.200459361076355
    2. '"' → logprob: -1.575459361076355
    3. '   ' → logprob: -1.950459361076355
    4. '"]' → logprob: -2.4504594802856445
    5. ')' → logprob: -2.5754594802856445
    6. '']' → logprob: -2.9504594802856445
    7. '")' → logprob: -3.2004594802856445
    8. ''"' → logprob: -3.4504594802856445
    9. '":' → logprob: -4.5754594802856445
    10. ']' → logprob: -5.0754594802856445

Token 2000: 'Z' (ID: 57)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.3723871409893036
    2. 'code' → logprob: -1.622387170791626
    3. '"' → logprob: -3.122387170791626
    4. ''A' → logprob: -3.497387170791626
    5. '"'' → logprob: -5.247386932373047
    6. ')' → logprob: -5.747386932373047
    7. ''"' → logprob: -5.872386932373047
    8. '100' → logprob: -5.872386932373047
    9. '']' → logprob: -6.122386932373047
    10. '```' → logprob: -6.622386932373047

Token 2001: '",' (ID: 672)
  Prédit: '",'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '",' → logprob: -0.5495357513427734
    2. '":' → logprob: -0.9245357513427734
    3. '"):' → logprob: -4.674535751342773
    4. '```' → logprob: -4.924535751342773
    5. ':' → logprob: -5.799535751342773
    6. '',' → logprob: -6.799535751342773
    7. '):' → logprob: -6.799535751342773
    8. '"' → logprob: -7.174535751342773
    9. '"]:' → logprob: -7.424535751342773
    10. '"):
' → logprob: -7.674535751342773

Token 2002: ' "' (ID: 392)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.08404452353715897
    2. '"' → logprob: -2.5840444564819336
    3. ' '' → logprob: -5.584044456481934
    4. ''"' → logprob: -6.834044456481934
    5. ' "' → logprob: -8.959044456481934
    6. '```' → logprob: -9.209044456481934
    7. '`' → logprob: -10.584044456481934
    8. ' ' → logprob: -11.209044456481934
    9. '110' → logprob: -12.084044456481934
    10. '='' → logprob: -12.084044456481934

Token 2003: '110' (ID: 7920)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.827107310295105
    2. ''' → logprob: -0.827107310295105
    3. '110' → logprob: -2.0771074295043945
    4. '```' → logprob: -11.077107429504395
    5. '0' → logprob: -11.327107429504395
    6. '`' → logprob: -11.702107429504395
    7. '111' → logprob: -11.827107429504395
    8. '100' → logprob: -12.077107429504395
    9. ''"' → logprob: -12.327107429504395
    10. '11' → logprob: -12.452107429504395

Token 2004: '01' (ID: 2290)
  Prédit: '01'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '01' → logprob: -0.004255646374076605
    2. ''' → logprob: -6.129255771636963
    3. '00' → logprob: -6.379255771636963
    4. '"' → logprob: -8.254255294799805
    5. '10' → logprob: -10.129255294799805
    6. '010' → logprob: -11.254255294799805
    7. '001' → logprob: -11.629255294799805
    8. '"""
' → logprob: -12.004255294799805
    9. '11' → logprob: -12.004255294799805
    10. '0' → logprob: -12.129255294799805

Token 2005: '"),
' (ID: 8132)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '")' → logprob: -0.08790764957666397
    2. '")
' → logprob: -2.712907552719116
    3. '"):
' → logprob: -4.712907791137695
    4. '"):' → logprob: -4.962907791137695
    5. ')' → logprob: -7.337907791137695
    6. '')' → logprob: -7.587907791137695
    7. '```' → logprob: -9.212907791137695
    8. '"]' → logprob: -9.337907791137695
    9. '')
' → logprob: -9.462907791137695
    10. '"' → logprob: -9.587907791137695

Token 2006: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.22000202536582947
    2. '```' → logprob: -3.0950019359588623
    3. ''' → logprob: -3.2200019359588623
    4. '       ' → logprob: -4.095002174377441
    5. ']' → logprob: -4.220002174377441
    6. '[' → logprob: -4.345002174377441
    7. ':' → logprob: -4.470002174377441
    8. ')' → logprob: -4.595002174377441
    9. '):
' → logprob: -4.845002174377441
    10. '"' → logprob: -4.970002174377441

Token 2007: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13316379487514496
    2. '```' → logprob: -3.2581636905670166
    3. 'bits' → logprob: -3.5081636905670166
    4. 'for' → logprob: -4.008163928985596
    5. '       ' → logprob: -4.383163928985596
    6. 'i' → logprob: -4.633163928985596
    7. 'bit' → logprob: -5.883163928985596
    8. 'code' → logprob: -6.008163928985596
    9. '"' → logprob: -6.508163928985596
    10. '`' → logprob: -6.758163928985596

Token 2008: '-",' (ID: 187195)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.07178103923797607
    2. '"' → logprob: -4.196781158447266
    3. '"'' → logprob: -4.571781158447266
    4. '']' → logprob: -5.196781158447266
    5. '101' → logprob: -5.196781158447266
    6. '':' → logprob: -5.446781158447266
    7. ' "'",' → logprob: -5.571781158447266
    8. '   ' → logprob: -5.571781158447266
    9. ')' → logprob: -5.946781158447266
    10. ''"' → logprob: -6.321781158447266

Token 2009: ' "' (ID: 392)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.0908762663602829
    2. '"' → logprob: -3.090876340866089
    3. ' '' → logprob: -3.215876340866089
    4. ')' → logprob: -7.59087610244751
    5. '```' → logprob: -8.340876579284668
    6. '   ' → logprob: -9.090876579284668
    7. ' "' → logprob: -9.090876579284668
    8. '`' → logprob: -9.840876579284668
    9. ''s' → logprob: -10.590876579284668
    10. '32' → logprob: -10.840876579284668

Token 2010: '101' (ID: 7959)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.016426932066679
    2. '"' → logprob: -4.891427040100098
    3. '101' → logprob: -5.266427040100098
    4. ' '' → logprob: -6.266427040100098
    5. ''"' → logprob: -7.141427040100098
    6. '```' → logprob: -7.891427040100098
    7. ''''' → logprob: -9.016427040100098
    8. '"""' → logprob: -9.516427040100098
    9. ' ' → logprob: -9.766427040100098
    10. '"'' → logprob: -10.266427040100098

Token 2011: '01' (ID: 2290)
  Prédit: '01'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '01' → logprob: -0.0005942588322795928
    2. ')' → logprob: -8.375594139099121
    3. '0' → logprob: -8.875594139099121
    4. '```' → logprob: -9.250594139099121
    5. '00' → logprob: -10.000594139099121
    6. '010' → logprob: -10.375594139099121
    7. '10' → logprob: -11.500594139099121
    8. '``' → logprob: -11.875594139099121
    9. '])' → logprob: -12.125594139099121
    10. '"' → logprob: -12.250594139099121

Token 2012: '"),
' (ID: 8132)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '")' → logprob: -0.8003220558166504
    2. '")
' → logprob: -1.3003220558166504
    3. '}
' → logprob: -2.5503220558166504
    4. '}' → logprob: -2.5503220558166504
    5. '"):
' → logprob: -3.5503220558166504
    6. ')
' → logprob: -3.6753220558166504
    7. ')' → logprob: -3.8003220558166504
    8. '   ' → logprob: -5.17532205581665
    9. '"}
' → logprob: -5.17532205581665
    10. '):
' → logprob: -5.30032205581665

Token 2013: '   ' (ID: 271)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.8914555311203003
    2. '   ' → logprob: -1.0164555311203003
    3. '"' → logprob: -2.14145565032959
    4. '```' → logprob: -3.39145565032959
    5. '       ' → logprob: -4.39145565032959
    6. ')' → logprob: -5.01645565032959
    7. '):
' → logprob: -5.26645565032959
    8. ']' → logprob: -5.26645565032959
    9. ' '' → logprob: -5.39145565032959
    10. '']' → logprob: -5.39145565032959

Token 2014: ' ("' (ID: 7109)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.8022016286849976
    2. '   ' → logprob: -1.3022016286849976
    3. '"' → logprob: -2.052201747894287
    4. '"'' → logprob: -2.677201747894287
    5. ''"' → logprob: -4.177201747894287
    6. ' '' → logprob: -4.427201747894287
    7. '```' → logprob: -4.802201747894287
    8. '       ' → logprob: -4.927201747894287
    9. ')' → logprob: -5.427201747894287
    10. ' "'' → logprob: -5.677201747894287

Token 2015: ''",' (ID: 48303)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.015538262203335762
    2. '"' → logprob: -4.765538215637207
    3. '"'' → logprob: -6.515538215637207
    4. ' '' → logprob: -6.765538215637207
    5. ''"' → logprob: -6.765538215637207
    6. ')' → logprob: -7.265538215637207
    7. 'code' → logprob: -7.515538215637207
    8. '   ' → logprob: -7.640538215637207
    9. ' ' → logprob: -8.765538215637207
    10. '')' → logprob: -8.890538215637207

Token 2016: ' "' (ID: 392)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.2177315503358841
    2. '"' → logprob: -1.7177315950393677
    3. ' '' → logprob: -4.842731475830078
    4. '"'' → logprob: -5.092731475830078
    5. '```' → logprob: -7.467731475830078
    6. ''''' → logprob: -8.342731475830078
    7. ''"' → logprob: -8.342731475830078
    8. ' "' → logprob: -8.467731475830078
    9. ' "'' → logprob: -8.592731475830078
    10. ')' → logprob: -8.717731475830078

Token 2017: '001' (ID: 7659)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.015656443312764168
    2. '"' → logprob: -4.890656471252441
    3. ''"' → logprob: -5.265656471252441
    4. '001' → logprob: -7.015656471252441
    5. ''''' → logprob: -7.140656471252441
    6. '"'' → logprob: -7.390656471252441
    7. ' '' → logprob: -8.890656471252441
    8. '```' → logprob: -9.015656471252441
    9. '"""' → logprob: -9.140656471252441
    10. '111' → logprob: -10.765656471252441

Token 2018: '01' (ID: 2290)
  Prédit: '01'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '01' → logprob: -0.0004475924652069807
    2. '0' → logprob: -8.625447273254395
    3. ')' → logprob: -9.125447273254395
    4. '00' → logprob: -9.375447273254395
    5. '```' → logprob: -10.000447273254395
    6. '05' → logprob: -11.125447273254395
    7. '10' → logprob: -11.500447273254395
    8. '010' → logprob: -14.125447273254395
    9. 'token' → logprob: -14.875447273254395
    10. '011' → logprob: -15.000447273254395

Token 2019: '"),
' (ID: 8132)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7340502142906189
    2. '):
' → logprob: -1.2340502738952637
    3. '}
' → logprob: -2.6090502738952637
    4. ':
' → logprob: -3.2340502738952637
    5. '}' → logprob: -3.6090502738952637
    6. '```' → logprob: -4.109050273895264
    7. '"]:
' → logprob: -4.109050273895264
    8. ']:
' → logprob: -4.234050273895264
    9. '"):
' → logprob: -4.859050273895264
    10. '']:
' → logprob: -4.859050273895264

Token 2020: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.40617403388023376
    2. ']
' → logprob: -2.2811739444732666
    3. '"' → logprob: -3.0311739444732666
    4. '```' → logprob: -3.6561739444732666
    5. ']' → logprob: -3.7811739444732666
    6. '):
' → logprob: -3.9061739444732666
    7. ''' → logprob: -4.281174182891846
    8. '"]' → logprob: -4.281174182891846
    9. ']:
' → logprob: -4.406174182891846
    10. 'for' → logprob: -4.531174182891846

Token 2021: ' ("' (ID: 7109)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11205685883760452
    2. '"' → logprob: -3.4870569705963135
    3. '```' → logprob: -3.8620569705963135
    4. '       ' → logprob: -3.9870569705963135
    5. '):
' → logprob: -5.612056732177734
    6. 'code' → logprob: -5.737056732177734
    7. 'for' → logprob: -5.987056732177734
    8. ''' → logprob: -6.112056732177734
    9. '``' → logprob: -6.112056732177734
    10. '`' → logprob: -6.237056732177734

Token 2022: ' ",' (ID: 6813)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.41777148842811584
    2. '"' → logprob: -2.417771577835083
    3. 'code' → logprob: -3.042771577835083
    4. '")' → logprob: -3.542771577835083
    5. 'for' → logprob: -3.542771577835083
    6. '"]' → logprob: -3.792771577835083
    7. ')]' → logprob: -3.792771577835083
    8. ''' → logprob: -4.167771339416504
    9. '   ' → logprob: -4.292771339416504
    10. '):' → logprob: -4.417771339416504

Token 2023: ' "' (ID: 392)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.11542388796806335
    2. '"' → logprob: -2.2404239177703857
    3. ' '' → logprob: -6.365423679351807
    4. ')' → logprob: -7.990423679351807
    5. '```' → logprob: -9.115424156188965
    6. ''"' → logprob: -9.240424156188965
    7. '   ' → logprob: -10.115424156188965
    8. ' "' → logprob: -10.240424156188965
    9. '):
' → logprob: -10.490424156188965
    10. '`' → logprob: -10.740424156188965

Token 2024: '000' (ID: 1302)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.03885882347822189
    2. '"' → logprob: -3.5388588905334473
    3. '000' → logprob: -5.288858890533447
    4. ''"' → logprob: -6.913858890533447
    5. '```' → logprob: -7.413858890533447
    6. ' '' → logprob: -7.538858890533447
    7. '0' → logprob: -8.038858413696289
    8. ' ' → logprob: -8.163858413696289
    9. '101' → logprob: -8.288858413696289
    10. '001' → logprob: -8.538858413696289

Token 2025: '01' (ID: 2290)
  Prédit: '01'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '01' → logprob: -0.0007303050952032208
    2. '00' → logprob: -7.625730514526367
    3. '1' → logprob: -8.625730514526367
    4. '001' → logprob: -11.125730514526367
    5. '0' → logprob: -11.250730514526367
    6. '```' → logprob: -11.375730514526367
    7. '10' → logprob: -11.750730514526367
    8. '11' → logprob: -11.750730514526367
    9. ')' → logprob: -13.250730514526367
    10. ''' → logprob: -14.188230514526367

Token 2026: '"),
' (ID: 8132)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '")' → logprob: -0.9956300258636475
    2. '")
' → logprob: -1.1206300258636475
    3. ')
' → logprob: -2.4956300258636475
    4. ')' → logprob: -2.9956300258636475
    5. '"):
' → logprob: -2.9956300258636475
    6. '}
' → logprob: -3.1206300258636475
    7. '   ' → logprob: -3.6206300258636475
    8. '):
' → logprob: -4.120630264282227
    9. '}' → logprob: -4.495630264282227
    10. '"}
' → logprob: -5.495630264282227

Token 2027: ']

' (ID: 3144)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5297989845275879
    2. '   ' → logprob: -1.529798984527588
    3. '"' → logprob: -2.404798984527588
    4. ')
' → logprob: -3.279798984527588
    5. '")' → logprob: -3.529798984527588
    6. '):
' → logprob: -4.404798984527588
    7. '"]' → logprob: -5.029798984527588
    8. '```' → logprob: -5.029798984527588
    9. '}' → logprob: -6.154798984527588
    10. '):' → logprob: -6.404798984527588

Token 2028: 'codes' (ID: 44177)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.02879180572926998
    2. '   ' → logprob: -4.153791904449463
    3. 'decoded' → logprob: -5.153791904449463
    4. 'bit' → logprob: -5.403791904449463
    5. 'for' → logprob: -6.278791904449463
    6. '```' → logprob: -8.278791427612305
    7. 'code' → logprob: -9.528791427612305
    8. ' bits' → logprob: -10.153791427612305
    9. 'while' → logprob: -10.528791427612305
    10. '#' → logprob: -10.653791427612305

Token 2029: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.15993331372737885
    2. '_to' → logprob: -2.03493332862854
    3. ' =' → logprob: -4.159933090209961
    4. '={}' → logprob: -7.784933090209961
    5. '_' → logprob: -7.909933090209961
    6. '```' → logprob: -8.659933090209961
    7. '   ' → logprob: -9.534933090209961
    8. '={}
' → logprob: -9.534933090209961
    9. '={' → logprob: -9.784933090209961
    10. '[' → logprob: -9.784933090209961

Token 2030: ' {}
' (ID: 11421)
  Prédit: '{'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '{' → logprob: -0.219227597117424
    2. '{}' → logprob: -2.0942275524139404
    3. '{
' → logprob: -2.7192275524139404
    4. '{}
' → logprob: -5.7192277908325195
    5. '{"' → logprob: -6.5942277908325195
    6. '[' → logprob: -6.9692277908325195
    7. '["' → logprob: -6.9692277908325195
    8. 'set' → logprob: -8.34422779083252
    9. '{k' → logprob: -8.46922779083252
    10. '[
' → logprob: -8.59422779083252

Token 2031: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.043534595519304276
    2. 'codes' → logprob: -4.168534755706787
    3. 'ch' → logprob: -4.543534755706787
    4. 'char' → logprob: -5.293534755706787
    5. 'c' → logprob: -5.543534755706787
    6. 'code' → logprob: -5.668534755706787
    7. 'def' → logprob: -6.543534755706787
    8. '   ' → logprob: -7.668534755706787
    9. '{' → logprob: -8.043534278869629
    10. ' for' → logprob: -8.168534278869629

Token 2032: ' ch' (ID: 549)
  Prédit: 'code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'code' → logprob: -0.32652992010116577
    2. 'ch' → logprob: -1.3265299797058105
    3. 'c' → logprob: -4.5765299797058105
    4. 'char' → logprob: -6.3265299797058105
    5. 'cd' → logprob: -7.7015299797058105
    6. '```' → logprob: -8.701529502868652
    7. '_,' → logprob: -9.076529502868652
    8. '   ' → logprob: -9.326529502868652
    9. '_code' → logprob: -10.451529502868652
    10. 'k' → logprob: -10.701529502868652

Token 2033: ',' (ID: 11)
  Prédit: '[ch'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[ch' → logprob: -1.0459972620010376
    2. ',' → logprob: -1.2959972620010376
    3. ',ch' → logprob: -1.9209972620010376
    4. 'in' → logprob: -2.170997142791748
    5. 'ch' → logprob: -2.295997142791748
    6. 'code' → logprob: -4.545997142791748
    7. ' in' → logprob: -7.420997142791748
    8. '```' → logprob: -7.545997142791748
    9. '_,' → logprob: -7.670997142791748
    10. '(ch' → logprob: -7.795997142791748

Token 2034: ' c' (ID: 274)
  Prédit: 'code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'code' → logprob: -0.00016229959146585315
    2. 'cd' → logprob: -8.750162124633789
    3. 'bits' → logprob: -12.875162124633789
    4. ' code' → logprob: -14.250162124633789
    5. 'bit' → logprob: -15.625162124633789
    6. 'ch' → logprob: -16.00016212463379
    7. 'codes' → logprob: -16.12516212463379
    8. 'cod' → logprob: -17.37516212463379
    9. 'c' → logprob: -17.37516212463379
    10. 'scode' → logprob: -17.75016212463379

Token 2035: ' in' (ID: 306)
  Prédit: 'ode'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ode' → logprob: -0.004973897244781256
    2. 'odes' → logprob: -5.379973888397217
    3. 'code' → logprob: -8.379974365234375
    4. 'o' → logprob: -9.504974365234375
    5. 'od' → logprob: -10.254974365234375
    6. '=' → logprob: -12.504974365234375
    7. '```' → logprob: -13.004974365234375
    8. 'de' → logprob: -13.254974365234375
    9. 'd' → logprob: -13.754974365234375
    10. 'odel' → logprob: -13.879974365234375

Token 2036: ' table' (ID: 3293)
  Prédit: 'table'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'table' → logprob: -0.0016093627782538533
    2. 'code' → logprob: -6.5016093254089355
    3. 'codes' → logprob: -9.251609802246094
    4. '(table' → logprob: -12.376609802246094
    5. 'ch' → logprob: -13.001609802246094
    6. ' table' → logprob: -13.001609802246094
    7. '<table' → logprob: -14.126609802246094
    8. '```' → logprob: -15.001609802246094
    9. 'char' → logprob: -15.126609802246094
    10. 'c' → logprob: -15.251609802246094

Token 2037: '2' (ID: 17)
  Prédit: '_to'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_to' → logprob: -0.5386849641799927
    2. '[ch' → logprob: -1.2886849641799927
    3. 'to' → logprob: -3.538684844970703
    4. 'code' → logprob: -3.913684844970703
    5. 'ch' → logprob: -4.163684844970703
    6. 'in' → logprob: -4.163684844970703
    7. '```' → logprob: -4.413684844970703
    8. 'codes' → logprob: -4.913684844970703
    9. '=' → logprob: -5.038684844970703
    10. ':' → logprob: -5.163684844970703

Token 2038: ':
' (ID: 734)
  Prédit: '[ch'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[ch' → logprob: -0.0053534130565822124
    2. '```' → logprob: -6.3803534507751465
    3. ':' → logprob: -6.6303534507751465
    4. '[c' → logprob: -7.1303534507751465
    5. '   ' → logprob: -7.5053534507751465
    6. '[' → logprob: -8.255352973937988
    7. 'ch' → logprob: -8.630352973937988
    8. ':
' → logprob: -8.755352973937988
    9. 'in' → logprob: -9.130352973937988
    10. 'code' → logprob: -10.005352973937988

Token 2039: '   ' (ID: 271)
  Prédit: 'codes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'codes' → logprob: -0.03904445096850395
    2. '   ' → logprob: -3.2890443801879883
    3. ' codes' → logprob: -7.039044380187988
    4. 'code' → logprob: -9.789044380187988
    5. '```' → logprob: -10.164044380187988
    6. '.codes' → logprob: -11.164044380187988
    7. 'ch' → logprob: -11.414044380187988
    8. '_codes' → logprob: -13.289044380187988
    9. '[ch' → logprob: -13.914044380187988
    10. '[c' → logprob: -13.914044380187988

Token 2040: ' codes' (ID: 17913)
  Prédit: 'codes'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'codes' (adapté à ' codes') → logprob: -4.596781946020201e-05
    2. 'code' → logprob: -10.000045776367188
    3. ' codes' → logprob: -15.000045776367188
    4. '   ' → logprob: -15.375045776367188
    5. '.codes' → logprob: -18.375045776367188
    6. '```' → logprob: -18.750045776367188
    7. 'bits' → logprob: -19.750045776367188
    8. '_codes' → logprob: -20.000045776367188
    9. 'for' → logprob: -20.500045776367188
    10. 'ch' → logprob: -20.875045776367188

Token 2041: '[c' (ID: 22840)
  Prédit: '[ch'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[ch' → logprob: -0.015290683135390282
    2. '[c' → logprob: -4.2652907371521
    3. '[' → logprob: -7.6402907371521
    4. '```' → logprob: -7.7652907371521
    5. 'codes' → logprob: -8.640290260314941
    6. '=' → logprob: -11.140290260314941
    7. '[
' → logprob: -11.140290260314941
    8. '\[' → logprob: -12.015290260314941
    9. 'c' → logprob: -13.265290260314941
    10. 'code' → logprob: -13.765290260314941

Token 2042: ']' (ID: 60)
  Prédit: '[ch'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[ch' → logprob: -0.4904155433177948
    2. ']=' → logprob: -1.4904155731201172
    3. ']' → logprob: -2.240415573120117
    4. '=' → logprob: -2.990415573120117
    5. '[c' → logprob: -5.990415573120117
    6. ']+=' → logprob: -6.740415573120117
    7. '```' → logprob: -7.240415573120117
    8. '[' → logprob: -7.365415573120117
    9. '+=' → logprob: -7.740415573120117
    10. 'ch' → logprob: -10.365415573120117

Token 2043: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.0016814864939078689
    2. '[ch' → logprob: -6.876681327819824
    3. ' =' → logprob: -8.376681327819824
    4. ']' → logprob: -8.626681327819824
    5. ']=' → logprob: -8.876681327819824
    6. '[' → logprob: -10.126681327819824
    7. '=
' → logprob: -11.251681327819824
    8. '=c' → logprob: -11.376681327819824
    9. '[c' → logprob: -11.626681327819824
    10. ')' → logprob: -12.126681327819824

Token 2044: ' ch' (ID: 549)
  Prédit: 'ch'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ch' → logprob: -1.306760805164231e-05
    2. ' ch' → logprob: -11.25001335144043
    3. '	ch' → logprob: -18.25001335144043
    4. '   ' → logprob: -18.50001335144043
    5. '[ch' → logprob: -18.75001335144043
    6. ''ch' → logprob: -19.62501335144043
    7. '(ch' → logprob: -19.75001335144043
    8. 'c' → logprob: -20.37501335144043
    9. 'Ch' → logprob: -21.00001335144043
    10. '_ch' → logprob: -21.50001335144043

Token 2045: '

' (ID: 279)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.18671561777591705
    2. 'i' → logprob: -2.811715602874756
    3. 'idx' → logprob: -3.436715602874756
    4. '   ' → logprob: -3.561715602874756
    5. 'pos' → logprob: -3.811715602874756
    6. 'decoded' → logprob: -4.436715602874756
    7. 'bit' → logprob: -4.686715602874756
    8. 'for' → logprob: -5.311715602874756
    9. '```' → logprob: -7.436715602874756
    10. 'index' → logprob: -8.186716079711914

Token 2046: 'def' (ID: 1314)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -1.2395577430725098
    2. 'pos' → logprob: -1.2395577430725098
    3. '   ' → logprob: -1.8645577430725098
    4. 'idx' → logprob: -2.2395577430725098
    5. 'decoded' → logprob: -2.4895577430725098
    6. 'bits' → logprob: -2.9895577430725098
    7. 'bit' → logprob: -3.8645577430725098
    8. 'ptr' → logprob: -5.86455774307251
    9. 'index' → logprob: -6.61455774307251
    10. 'decode' → logprob: -8.489557266235352

Token 2047: ' decode' (ID: 32043)
  Prédit: 'decode'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'decode' → logprob: -0.001950417528860271
    2. ' decode' → logprob: -6.376950263977051
    3. 'def' → logprob: -9.12695026397705
    4. 'bit' → logprob: -10.12695026397705
    5. 'read' → logprob: -10.25195026397705
    6. 'bits' → logprob: -10.62695026397705
    7. 'parse' → logprob: -11.75195026397705
    8. 'process' → logprob: -12.00195026397705
    9. 'solve' → logprob: -12.00195026397705
    10. 'input' → logprob: -12.37695026397705

Token 2048: '(bit' (ID: 123258)
  Prédit: '(line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(line' → logprob: -0.11260588467121124
    2. '(bits' → logprob: -2.3626058101654053
    3. '(bit' → logprob: -4.737606048583984
    4. 'bits' → logprob: -6.487606048583984
    5. 'bit' → logprob: -7.362606048583984
    6. 'line' → logprob: -7.612606048583984
    7. '_bits' → logprob: -8.487606048583984
    8. 'def' → logprob: -8.612606048583984
    9. '_line' → logprob: -8.737606048583984
    10. '(input' → logprob: -8.862606048583984

Token 2049: 'string' (ID: 1655)
  Prédit: '_string'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_string' → logprob: -0.5705450177192688
    2. 'string' → logprob: -1.695544958114624
    3. '):' → logprob: -3.070544958114624
    4. 'def' → logprob: -3.195544958114624
    5. '```' → logprob: -3.195544958114624
    6. '_to' → logprob: -3.445544958114624
    7. ':' → logprob: -3.820544958114624
    8. '[' → logprob: -4.070545196533203
    9. '):
' → logprob: -4.445545196533203
    10. ')' → logprob: -4.695545196533203

Token 2050: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.029870478436350822
    2. '(bit' → logprob: -4.654870510101318
    3. ':' → logprob: -4.904870510101318
    4. '[' → logprob: -5.029870510101318
    5. ')' → logprob: -5.904870510101318
    6. '):
' → logprob: -6.529870510101318
    7. '(' → logprob: -7.154870510101318
    8. ',' → logprob: -8.65487003326416
    9. '(bits' → logprob: -8.90487003326416
    10. '[:' → logprob: -9.40487003326416

Token 2051: '   ' (ID: 271)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.5234415531158447
    2. '   ' → logprob: -1.0234415531158447
    3. 'pos' → logprob: -3.2734415531158447
    4. ' i' → logprob: -4.898441314697266
    5. 'idx' → logprob: -6.648441314697266
    6. ' pos' → logprob: -6.773441314697266
    7. 'def' → logprob: -9.273441314697266
    8. '```' → logprob: -9.773441314697266
    9. 'index' → logprob: -10.023441314697266
    10. 'res' → logprob: -10.023441314697266

Token 2052: ' res' (ID: 694)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.21279385685920715
    2. 'pos' → logprob: -1.7127938270568848
    3. '   ' → logprob: -5.212793827056885
    4. ' i' → logprob: -6.212793827056885
    5. ' pos' → logprob: -6.712793827056885
    6. 'idx' → logprob: -6.962793827056885
    7. '```' → logprob: -6.962793827056885
    8. 'token' → logprob: -8.212794303894043
    9. 'index' → logprob: -8.837794303894043
    10. 'tokens' → logprob: -9.212794303894043

Token 2053: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.03335854038596153
    2. ' =' → logprob: -4.158358573913574
    3. '+=' → logprob: -4.658358573913574
    4. '[' → logprob: -6.783358573913574
    5. '=""' → logprob: -6.783358573913574
    6. '   ' → logprob: -6.908358573913574
    7. '=[]' → logprob: -7.158358573913574
    8. ' +=' → logprob: -7.283358573913574
    9. 'def' → logprob: -7.408358573913574
    10. '```' → logprob: -7.533358573913574

Token 2054: ' ""
' (ID: 18061)
  Prédit: '""'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '""' → logprob: -0.0031375549733638763
    2. '[]' → logprob: -6.003137588500977
    3. '"' → logprob: -7.753137588500977
    4. '''' → logprob: -8.878137588500977
    5. '[]
' → logprob: -9.378137588500977
    6. '"""' → logprob: -12.003137588500977
    7. '''
' → logprob: -13.878137588500977
    8. '"",' → logprob: -15.378137588500977
    9. ' ""' → logprob: -15.503137588500977
    10. '"""
' → logprob: -15.503137588500977

Token 2055: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5250361561775208
    2. 'i' → logprob: -1.025036096572876
    3. '```' → logprob: -3.525036096572876
    4. ' i' → logprob: -4.150036334991455
    5. 'pos' → logprob: -6.275036334991455
    6. ' pos' → logprob: -6.525036334991455
    7. 'while' → logprob: -8.400035858154297
    8. '       ' → logprob: -8.650035858154297
    9. ' while' → logprob: -8.775035858154297
    10. '`' → logprob: -9.150035858154297

Token 2056: ' while' (ID: 2049)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.07949651032686234
    2. 'pos' → logprob: -3.0794966220855713
    3. '   ' → logprob: -3.5794966220855713
    4. 'idx' → logprob: -6.204496383666992
    5. 'while' (adapté à ' while') → logprob: -7.829496383666992
    6. 'index' → logprob: -9.954496383666992
    7. 'start' → logprob: -10.454496383666992
    8. ' i' → logprob: -11.079496383666992
    9. '```' → logprob: -11.329496383666992
    10. 'p' → logprob: -12.204496383666992

Token 2057: ' bit' (ID: 3546)
  Prédit: 'bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bit' → logprob: -0.049861449748277664
    2. 'len' → logprob: -3.299861431121826
    3. 'bits' → logprob: -4.549861431121826
    4. 'True' → logprob: -6.799861431121826
    5. ' bit' → logprob: -10.549861907958984
    6. '   ' → logprob: -10.674861907958984
    7. ' True' → logprob: -11.924861907958984
    8. '1' → logprob: -12.549861907958984
    9. '```' → logprob: -13.049861907958984
    10. '(bit' → logprob: -13.424861907958984

Token 2058: 'string' (ID: 1655)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.4461839199066162
    2. '```' → logprob: -2.071183919906616
    3. '+' → logprob: -2.196183919906616
    4. '==' → logprob: -3.196183919906616
    5. '=' → logprob: -3.446183919906616
    6. '[' → logprob: -3.446183919906616
    7. '[
' → logprob: -5.821184158325195
    8. 'string' → logprob: -5.821184158325195
    9. ':' → logprob: -6.071184158325195
    10. ' +=' → logprob: -6.696184158325195

Token 2059: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.21487632393836975
    2. ':
' → logprob: -2.089876413345337
    3. '.startswith' → logprob: -3.589876413345337
    4. '[:' → logprob: -3.714876413345337
    5. '!=' → logprob: -4.589876174926758
    6. '=' → logprob: -5.589876174926758
    7. '[' → logprob: -7.214876174926758
    8. ':=' → logprob: -7.339876174926758
    9. 'and' → logprob: -7.714876174926758
    10. '==' → logprob: -8.089876174926758

Token 2060: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.18403051793575287
    2. '       ' → logprob: -1.809030532836914
    3. 'i' → logprob: -5.934030532836914
    4. '```' → logprob: -6.684030532836914
    5. 'for' → logprob: -8.809030532836914
    6. 'token' → logprob: -9.434030532836914
    7. 't' → logprob: -10.809030532836914
    8. 'pos' → logprob: -11.059030532836914
    9. 'if' → logprob: -11.434030532836914
    10. ' for' → logprob: -11.434030532836914

Token 2061: ' found' (ID: 2491)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.03017067164182663
    2. 'i' → logprob: -3.9051706790924072
    3. '   ' → logprob: -5.405170440673828
    4. '       ' → logprob: -6.655170440673828
    5. '```' → logprob: -6.905170440673828
    6. ' for' → logprob: -7.155170440673828
    7. 'prefix' → logprob: -7.280170440673828
    8. 'token' → logprob: -7.905170440673828
    9. '           ' → logprob: -8.530170440673828
    10. 'pos' → logprob: -8.905170440673828

Token 2062: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.010948662646114826
    2. ' =' → logprob: -4.760948657989502
    3. '+=' → logprob: -6.760948657989502
    4. '==' → logprob: -7.510948657989502
    5. 'in' → logprob: -8.88594913482666
    6. '_' → logprob: -9.01094913482666
    7. '"' → logprob: -9.26094913482666
    8. ' +=' → logprob: -10.38594913482666
    9. '```' → logprob: -10.51094913482666
    10. '_=' → logprob: -10.88594913482666

Token 2063: ' False' (ID: 7983)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'False' → logprob: -6.392202976712724e-06
    2. ' False' → logprob: -12.000006675720215
    3. 'None' → logprob: -16.2500057220459
    4. '0' → logprob: -17.8750057220459
    5. 'false' → logprob: -18.3750057220459
    6. '   ' → logprob: -18.5000057220459
    7. '(False' → logprob: -19.6250057220459
    8. '""' → logprob: -19.8750057220459
    9. 'True' → logprob: -20.7500057220459
    10. '=False' → logprob: -21.1250057220459

Token 2064: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.054548658430576324
    2. '```' → logprob: -4.179548740386963
    3. 'token' → logprob: -4.304548740386963
    4. 'for' → logprob: -4.429548740386963
    5. '   ' → logprob: -5.054548740386963
    6. ' for' → logprob: -5.804548740386963
    7. 'tokens' → logprob: -7.554548740386963
    8. '`' → logprob: -8.054548263549805
    9. '           ' → logprob: -8.179548263549805
    10. 'next' → logprob: -8.304548263549805

Token 2065: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.17474576830863953
    2. '```' → logprob: -2.549745798110962
    3. '   ' → logprob: -2.924745798110962
    4. 'for' → logprob: -4.299745559692383
    5. 'token' → logprob: -4.924745559692383
    6. ' for' → logprob: -5.299745559692383
    7. '`' → logprob: -6.924745559692383
    8. 'tokens' → logprob: -7.674745559692383
    9. '``' → logprob: -8.674745559692383
    10. ' token' → logprob: -8.799745559692383

Token 2066: ' #' (ID: 1069)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.013057404197752476
    2. '       ' → logprob: -4.888057231903076
    3. ' for' → logprob: -5.263057231903076
    4. 'i' → logprob: -9.138057708740234
    5. '           ' → logprob: -9.513057708740234
    6. '   ' → logprob: -9.888057708740234
    7. '```' → logprob: -11.513057708740234
    8. 'length' → logprob: -12.513057708740234
    9. 'token' → logprob: -13.013057708740234
    10. 'code' → logprob: -13.013057708740234

Token 2067: ' try' (ID: 2075)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.05431993305683136
    2. '       ' → logprob: -3.0543198585510254
    3. ' for' → logprob: -5.304319858551025
    4. '   ' → logprob: -7.429319858551025
    5. '```' → logprob: -8.929320335388184
    6. 'i' → logprob: -12.179320335388184
    7. '           ' → logprob: -12.304320335388184
    8. 'length' → logprob: -12.554320335388184
    9. '``' → logprob: -13.179320335388184
    10. '	for' → logprob: -13.179320335388184

Token 2068: ' to' (ID: 316)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.13134074211120605
    2. '   ' → logprob: -3.381340742111206
    3. '       ' → logprob: -3.631340742111206
    4. 'bit' → logprob: -4.006340980529785
    5. 'i' → logprob: -4.381340980529785
    6. 'code' → logprob: -4.631340980529785
    7. 'length' → logprob: -4.631340980529785
    8. '```' → logprob: -5.631340980529785
    9. 'len' → logprob: -6.006340980529785
    10. 'k' → logprob: -6.506340980529785

Token 2069: ' match' (ID: 3981)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.10380660742521286
    2. 'i' → logprob: -2.603806495666504
    3. 'match' → logprob: -4.228806495666504
    4. 'len' → logprob: -5.478806495666504
    5. 'max' → logprob: -7.103806495666504
    6. ' for' → logprob: -7.228806495666504
    7. 'find' → logprob: -7.478806495666504
    8. 'min' → logprob: -7.478806495666504
    9. 'range' → logprob: -7.603806495666504
    10. '
' → logprob: -7.728806495666504

Token 2070: ' prefixes' (ID: 151881)
  Prédit: 'bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bit' → logprob: -0.028577281162142754
    2. 'code' → logprob: -4.2785773277282715
    3. 'next' → logprob: -5.0285773277282715
    4. 'bits' → logprob: -6.4035773277282715
    5. '   ' → logprob: -6.5285773277282715
    6. ' bit' → logprob: -6.7785773277282715
    7. '```' → logprob: -7.2785773277282715
    8. '       ' → logprob: -7.5285773277282715
    9. 'for' → logprob: -7.6535773277282715
    10. 'c' → logprob: -8.403576850891113

Token 2071: ' from' (ID: 591)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.153481125831604
    2. '```' → logprob: -1.778481125831604
    3. ' for' → logprob: -2.0284810066223145
    4. '       ' → logprob: -2.2784810066223145
    5. '`' → logprob: -2.9034810066223145
    6. ' =' → logprob: -3.0284810066223145
    7. 'bit' → logprob: -3.4034810066223145
    8. 'token' → logprob: -3.5284810066223145
    9. ':' → logprob: -3.6534810066223145
    10. '=' → logprob: -4.1534810066223145

Token 2072: ' length' (ID: 5517)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.41372546553611755
    2. '3' → logprob: -1.91372549533844
    3. 'bit' → logprob: -2.0387253761291504
    4. 'codes' → logprob: -3.2887253761291504
    5. 'code' → logprob: -4.66372537612915
    6. '5' → logprob: -6.41372537612915
    7. 'bits' → logprob: -6.66372537612915
    8. 'short' → logprob: -6.66372537612915
    9. 'table' → logprob: -6.78872537612915
    10. 'i' → logprob: -6.78872537612915

Token 2073: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00042864278657361865
    2. '(' → logprob: -8.875428199768066
    3. '```' → logprob: -8.875428199768066
    4. '3' → logprob: -10.375428199768066
    5. '[' → logprob: -10.875428199768066
    6. 'for' → logprob: -11.125428199768066
    7. '   ' → logprob: -11.250428199768066
    8. '`' → logprob: -11.250428199768066
    9. '5' → logprob: -11.375428199768066
    10. 'i' → logprob: -11.625428199768066

Token 2074: '3' (ID: 18)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0010619866661727428
    2. '3' → logprob: -7.001061916351318
    3. '```' → logprob: -9.501062393188477
    4. '   ' → logprob: -10.001062393188477
    5. '`' → logprob: -11.376062393188477
    6. '``' → logprob: -12.876062393188477
    7. '
' → logprob: -13.126062393188477
    8. '(' → logprob: -13.376062393188477
    9. '2' → logprob: -13.376062393188477
    10. '       ' → logprob: -13.501062393188477

Token 2075: ' to' (ID: 316)
  Prédit: 'to'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'to' → logprob: -0.26925113797187805
    2. ' to' → logprob: -2.3942511081695557
    3. 'for' → logprob: -3.2692511081695557
    4. ',' → logprob: -3.6442511081695557
    5. '3' → logprob: -3.6442511081695557
    6. '       ' → logprob: -4.144251346588135
    7. '```' → logprob: -4.269251346588135
    8. ':' → logprob: -4.769251346588135
    9. '=' → logprob: -5.769251346588135
    10. '   ' → logprob: -6.019251346588135

Token 2076: ' ' (ID: 220)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '3' → logprob: -0.29627668857574463
    2. '4' → logprob: -2.421276569366455
    3. 'len' → logprob: -2.671276569366455
    4. '5' → logprob: -2.921276569366455
    5. '1' → logprob: -3.421276569366455
    6. '6' → logprob: -5.671276569366455
    7. '   ' → logprob: -6.046276569366455
    8. '15' → logprob: -6.921276569366455
    9. '12' → logprob: -7.171276569366455
    10. '16' → logprob: -7.296276569366455

Token 2077: '5' (ID: 20)
  Prédit: '5'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.04935732111334801
    2. '6' → logprob: -3.6743574142456055
    3. '15' → logprob: -4.5493574142456055
    4. '16' → logprob: -5.2993574142456055
    5. '1' → logprob: -6.4243574142456055
    6. '11' → logprob: -6.4243574142456055
    7. '7' → logprob: -6.6743574142456055
    8. '12' → logprob: -7.2993574142456055
    9. 'len' → logprob: -7.7993574142456055
    10. '8' → logprob: -8.299357414245605

Token 2078: ':
' (ID: 734)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.4207898676395416
    2. '       ' → logprob: -1.1707898378372192
    3. ' for' → logprob: -4.04578971862793
    4. '```' → logprob: -4.29578971862793
    5. '   ' → logprob: -6.54578971862793
    6. ':' → logprob: -8.42078971862793
    7. ',' → logprob: -9.17078971862793
    8. '           ' → logprob: -9.17078971862793
    9. '``' → logprob: -9.67078971862793
    10. '3' → logprob: -9.92078971862793

Token 2079: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.6319234371185303
    2. 'for' → logprob: -1.7569234371185303
    3. '```' → logprob: -1.7569234371185303
    4. ' for' → logprob: -2.2569234371185303
    5. '           ' → logprob: -5.256923675537109
    6. '   ' → logprob: -5.381923675537109
    7. '`' → logprob: -5.506923675537109
    8. '``' → logprob: -6.631923675537109
    9. 'tokens' → logprob: -8.00692367553711
    10. 'token' → logprob: -8.00692367553711

Token 2080: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.23322570323944092
    2. '       ' → logprob: -2.1082258224487305
    3. ' for' → logprob: -2.6082258224487305
    4. '```' → logprob: -4.4832258224487305
    5. '   ' → logprob: -7.6082258224487305
    6. '           ' → logprob: -7.7332258224487305
    7. '`' → logprob: -8.48322582244873
    8. '``' → logprob: -9.35822582244873
    9. 'token' → logprob: -9.73322582244873
    10. 'i' → logprob: -9.98322582244873

Token 2081: ' l' (ID: 305)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '3' → logprob: -0.03216981515288353
    2. 'i' → logprob: -3.907169818878174
    3. 'length' → logprob: -4.782169818878174
    4. 'l' → logprob: -6.782169818878174
    5. 'len' → logprob: -6.907169818878174
    6. '   ' → logprob: -7.282169818878174
    7. 'k' → logprob: -9.032169342041016
    8. ' ' → logprob: -9.907169342041016
    9. '```' → logprob: -9.907169342041016
    10. 'code' → logprob: -10.532169342041016

Token 2082: ' in' (ID: 306)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.6023846864700317
    2. '3' → logprob: -1.4773846864700317
    3. ' in' → logprob: -1.6023846864700317
    4. '=' → logprob: -4.852384567260742
    5. '```' → logprob: -5.602384567260742
    6. '[' → logprob: -5.977384567260742
    7. '   ' → logprob: -6.352384567260742
    8. '(' → logprob: -6.352384567260742
    9. '1' → logprob: -6.727384567260742
    10. 'for' → logprob: -6.977384567260742

Token 2083: ' range' (ID: 3352)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '3' → logprob: -0.0020134560763835907
    2. '[' → logprob: -6.877013683319092
    3. 'range' → logprob: -7.127013683319092
    4. '(' → logprob: -9.002013206481934
    5. '   ' → logprob: -10.752013206481934
    6. '1' → logprob: -11.752013206481934
    7. '```' → logprob: -11.877013206481934
    8. ' ' → logprob: -12.627013206481934
    9. 'len' → logprob: -12.877013206481934
    10. '       ' → logprob: -13.252013206481934

Token 2084: '(' (ID: 7)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -1.771655115589965e-05
    2. '1' → logprob: -11.375018119812012
    3. '   ' → logprob: -12.750018119812012
    4. '2' → logprob: -13.500018119812012
    5. '```' → logprob: -13.500018119812012
    6. '(' → logprob: -15.625018119812012
    7. ' ' → logprob: -15.875018119812012
    8. '       ' → logprob: -16.250017166137695
    9. '0' → logprob: -16.875017166137695
    10. '           ' → logprob: -17.187517166137695

Token 2085: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -9.13388703338569e-06
    2. '1' → logprob: -12.875009536743164
    3. '```' → logprob: -12.875009536743164
    4. '2' → logprob: -13.125009536743164
    5. ' ' → logprob: -14.375009536743164
    6. '   ' → logprob: -14.500009536743164
    7. '0' → logprob: -16.000009536743164
    8. 'len' → logprob: -16.500009536743164
    9. 'def' → logprob: -16.750009536743164
    10. '``' → logprob: -16.812509536743164

Token 2086: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00030114251421764493
    2. ',l' → logprob: -9.250301361083984
    3. '3' → logprob: -9.375301361083984
    4. ' ,' → logprob: -10.125301361083984
    5. ',len' → logprob: -10.375301361083984
    6. '```' → logprob: -10.875301361083984
    7. '   ' → logprob: -11.125301361083984
    8. '       ' → logprob: -12.375301361083984
    9. ',length' → logprob: -13.375301361083984
    10. ',int' → logprob: -13.750301361083984

Token 2087: ' ' (ID: 220)
  Prédit: '6'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -2.2723104848410003e-05
    2. 'len' → logprob: -11.250022888183594
    3. '```' → logprob: -12.375022888183594
    4. '   ' → logprob: -13.250022888183594
    5. ' ' → logprob: -13.250022888183594
    6. 'l' → logprob: -14.250022888183594
    7. 'length' → logprob: -15.375022888183594
    8. '5' → logprob: -15.750022888183594
    9. '       ' → logprob: -16.000022888183594
    10. '``' → logprob: -16.125022888183594

Token 2088: '6' (ID: 21)
  Prédit: '6'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -3.1424973713001236e-05
    2. '7' → logprob: -11.375031471252441
    3. '=' → logprob: -11.750031471252441
    4. 'len' → logprob: -12.500031471252441
    5. '```' → logprob: -12.625031471252441
    6. '``' → logprob: -14.250031471252441
    7. '16' → logprob: -14.812531471252441
    8. 'max' → logprob: -15.125031471252441
    9. '   ' → logprob: -15.125031471252441
    10. '5' → logprob: -15.125031471252441

Token 2089: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.23766310513019562
    2. '):
' → logprob: -1.6126631498336792
    3. '+' → logprob: -4.487663269042969
    4. '```' → logprob: -8.237663269042969
    5. ',' → logprob: -8.362663269042969
    6. ' +' → logprob: -9.112663269042969
    7. ')' → logprob: -9.612663269042969
    8. ':' → logprob: -9.737663269042969
    9. '   ' → logprob: -10.487663269042969
    10. '[' → logprob: -10.612663269042969

Token 2090: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.35641348361968994
    2. ':' → logprob: -2.1064133644104004
    3. 'if' → logprob: -2.9814133644104004
    4. 'for' → logprob: -3.3564133644104004
    5. '           ' → logprob: -3.9814133644104004
    6. '=' → logprob: -4.1064133644104
    7. ' in' → logprob: -4.3564133644104
    8. ' if' → logprob: -4.6064133644104
    9. ' =' → logprob: -4.7314133644104
    10. 'in' → logprob: -4.8564133644104

Token 2091: ' seg' (ID: 3055)
  Prédit: 'prefix'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'prefix' → logprob: -0.5668895244598389
    2. 'if' → logprob: -0.9418895244598389
    3. 'code' → logprob: -4.066889762878418
    4. 'token' → logprob: -4.191889762878418
    5. '           ' → logprob: -4.941889762878418
    6. 'segment' → logprob: -7.191889762878418
    7. '       ' → logprob: -7.316889762878418
    8. ' if' → logprob: -7.566889762878418
    9. 'substr' → logprob: -8.316889762878418
    10. 's' → logprob: -8.566889762878418

Token 2092: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.00318294414319098
    2. ' =' → logprob: -5.753182888031006
    3. '=
' → logprob: -13.628183364868164
    4. '   ' → logprob: -14.128183364868164
    5. 's' → logprob: -14.253183364868164
    6. '           ' → logprob: -14.503183364868164
    7. 'bit' → logprob: -14.628183364868164
    8. '       ' → logprob: -14.753183364868164
    9. '=line' → logprob: -15.503183364868164
    10. '```' → logprob: -15.753183364868164

Token 2093: ' bit' (ID: 3546)
  Prédit: 'bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bit' → logprob: -0.0002096197713399306
    2. ' bit' → logprob: -8.62520980834961
    3. 'code' → logprob: -11.37520980834961
    4. '(bit' → logprob: -12.00020980834961
    5. 'bits' → logprob: -12.25020980834961
    6. '```' → logprob: -12.62520980834961
    7. '   ' → logprob: -12.87520980834961
    8. '{' → logprob: -14.75020980834961
    9. 'bitr' → logprob: -14.75020980834961
    10. '[' → logprob: -15.25020980834961

Token 2094: 'string' (ID: 1655)
  Prédit: 'string'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'string' → logprob: -0.03480793163180351
    2. 'bit' → logprob: -3.4098079204559326
    3. 'tring' → logprob: -7.784808158874512
    4. '[' → logprob: -7.909808158874512
    5. '```' → logprob: -9.159808158874512
    6. '(bit' → logprob: -9.409808158874512
    7. '[string' → logprob: -10.284808158874512
    8. 'segment' → logprob: -10.784808158874512
    9. '[l' → logprob: -10.909808158874512
    10. '   ' → logprob: -11.034808158874512

Token 2095: '[:' (ID: 7808)
  Prédit: '[:'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[:' → logprob: -0.3504813611507416
    2. '[' → logprob: -1.225481390953064
    3. '=' → logprob: -7.1004815101623535
    4. '[l' → logprob: -7.6004815101623535
    5. '```' → logprob: -8.725481033325195
    6. '           ' → logprob: -8.850481033325195
    7. '[len' → logprob: -9.100481033325195
    8. '[
' → logprob: -9.475481033325195
    9. ' =' → logprob: -10.100481033325195
    10. '       ' → logprob: -10.225481033325195

Token 2096: 'l' (ID: 75)
  Prédit: 'l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -6.153795766294934e-06
    2. '3' → logprob: -12.125005722045898
    3. '{' → logprob: -15.125005722045898
    4. '```' → logprob: -15.625005722045898
    5. '[l' → logprob: -15.750005722045898
    6. ' l' → logprob: -16.7500057220459
    7. '1' → logprob: -16.8750057220459
    8. '	l' → logprob: -18.2500057220459
    9. '*l' → logprob: -18.3750057220459
    10. '(l' → logprob: -18.6250057220459

Token 2097: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.5772213339805603
    2. ']
' → logprob: -0.8272213339805603
    3. '           ' → logprob: -7.702221393585205
    4. ']:
' → logprob: -7.827221393585205
    5. ']==' → logprob: -9.452220916748047
    6. '```' → logprob: -9.452220916748047
    7. '       ' → logprob: -10.077220916748047
    8. '])
' → logprob: -10.202220916748047
    9. ']
' → logprob: -10.452220916748047
    10. '])' → logprob: -10.952220916748047

Token 2098: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -6.313314952421933e-05
    2. '       ' → logprob: -10.375062942504883
    3. '               ' → logprob: -11.375062942504883
    4. 'if' → logprob: -11.875062942504883
    5. '```' → logprob: -12.500062942504883
    6. '<|end|>' → logprob: -12.500062942504883
    7. '	       ' → logprob: -13.375062942504883
    8. '<|end|>' → logprob: -13.375062942504883
    9. ' if' → logprob: -14.500062942504883
    10. 'for' → logprob: -14.750062942504883

Token 2099: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.04959500581026077
    2. '           ' → logprob: -3.0495951175689697
    3. ' if' → logprob: -6.924594879150391
    4. '       ' → logprob: -11.17459487915039
    5. 'token' → logprob: -12.92459487915039
    6. '```' → logprob: -12.92459487915039
    7. '               ' → logprob: -13.42459487915039
    8. 'If' → logprob: -13.67459487915039
    9. '   ' → logprob: -14.42459487915039
    10. 'tokens' → logprob: -15.04959487915039

Token 2100: ' seg' (ID: 3055)
  Prédit: 'seg'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'seg' → logprob: -4.36574100604048e-06
    2. '(seg' → logprob: -12.875004768371582
    3. ' seg' → logprob: -13.750004768371582
    4. 'segment' → logprob: -15.125004768371582
    5. 'codes' → logprob: -15.125004768371582
    6. 'segments' → logprob: -15.875004768371582
    7. '_seg' → logprob: -19.125003814697266
    8. '           ' → logprob: -19.750003814697266
    9. '   ' → logprob: -20.500003814697266
    10. 'code' → logprob: -20.750003814697266

Token 2101: ' in' (ID: 306)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.3135288655757904
    2. ' in' → logprob: -1.3135288953781128
    3. ']' → logprob: -8.313529014587402
    4. '```' → logprob: -11.938529014587402
    5. ')' → logprob: -12.688529014587402
    6. '[' → logprob: -13.438529014587402
    7. '<|end|>' → logprob: -13.563529014587402
    8. 'n' → logprob: -13.563529014587402
    9. 'In' → logprob: -14.063529014587402
    10. '<|end|>' → logprob: -14.188529014587402

Token 2102: ' codes' (ID: 17913)
  Prédit: 'codes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'codes' → logprob: -6.704273118884885e-07
    2. 'code' → logprob: -14.500000953674316
    3. ' codes' → logprob: -16.625
    4. '.codes' → logprob: -18.625
    5. '`' → logprob: -22.625
    6. '
' → logprob: -23.125
    7. '```' → logprob: -23.375
    8. 'coded' → logprob: -23.75
    9. '{' → logprob: -23.875
    10. '   ' → logprob: -24.125

Token 2103: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.07758612185716629
    2. ':
' → logprob: -2.8275861740112305
    3. '):' → logprob: -4.3275861740112305
    4. '):
' → logprob: -6.4525861740112305
    5. ':return' → logprob: -8.07758617401123
    6. ']:' → logprob: -9.82758617401123
    7. '<|end|>' → logprob: -9.82758617401123
    8. '**' → logprob: -9.82758617401123
    9. '           ' → logprob: -9.95258617401123
    10. '       ' → logprob: -10.45258617401123

Token 2104: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.0001698094274615869
    2. '```' → logprob: -8.87516975402832
    3. 'res' → logprob: -11.25016975402832
    4. '           ' → logprob: -12.25016975402832
    5. '                   ' → logprob: -12.87516975402832
    6. '       ' → logprob: -13.25016975402832
    7. '                       ' → logprob: -13.50016975402832
    8. 'continue' → logprob: -13.50016975402832
    9. '   ' → logprob: -13.75016975402832
    10. '              ' → logprob: -13.87516975402832

Token 2105: ' res' (ID: 694)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' (adapté à ' res') → logprob: -0.08272801339626312
    2. '               ' → logprob: -2.5827279090881348
    3. 'return' → logprob: -5.832727909088135
    4. '                   ' → logprob: -7.957727909088135
    5. '           ' → logprob: -8.332728385925293
    6. 'print' → logprob: -9.207728385925293
    7. '   ' → logprob: -9.582728385925293
    8. '```' → logprob: -10.082728385925293
    9. ' res' → logprob: -10.457728385925293
    10. 'decoded' → logprob: -10.832728385925293

Token 2106: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.07896436005830765
    2. ' +=' → logprob: -2.5789644718170166
    3. '+="' → logprob: -10.328964233398438
    4. '+='' → logprob: -10.578964233398438
    5. '+' → logprob: -11.328964233398438
    6. '```' → logprob: -13.203964233398438
    7. ' +' → logprob: -13.578964233398438
    8. ']+=' → logprob: -13.953964233398438
    9. '=' → logprob: -15.203964233398438
    10. '+=(' → logprob: -16.578964233398438

Token 2107: ' codes' (ID: 17913)
  Prédit: 'codes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'codes' → logprob: -6.704273118884885e-07
    2. ' codes' → logprob: -14.250000953674316
    3. '.codes' → logprob: -22.5
    4. 'code' → logprob: -22.875
    5. '_codes' → logprob: -26.5
    6. 'scores' → logprob: -27.0
    7. '`' → logprob: -28.5
    8. 'chars' → logprob: -28.75
    9. '```' → logprob: -28.75
    10. '   ' → logprob: -29.0

Token 2108: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -6.749814019713085e-06
    2. 'seg' → logprob: -12.125006675720215
    3. '(seg' → logprob: -13.875006675720215
    4. '[
' → logprob: -16.12500762939453
    5. '```' → logprob: -16.12500762939453
    6. ' [' → logprob: -17.50000762939453
    7. '           ' → logprob: -18.25000762939453
    8. '   ' → logprob: -18.25000762939453
    9. '[c' → logprob: -18.50000762939453
    10. '\[' → logprob: -18.87500762939453

Token 2109: 'seg' (ID: 10717)
  Prédit: 'seg'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'seg' → logprob: -9.078839502763003e-05
    2. '[' → logprob: -9.375090599060059
    3. '(seg' → logprob: -12.500090599060059
    4. 'bit' → logprob: -13.500090599060059
    5. '```' → logprob: -15.250090599060059
    6. ' seg' → logprob: -15.750090599060059
    7. 'c' → logprob: -16.375091552734375
    8. 'segment' → logprob: -16.375091552734375
    9. ']' → logprob: -16.625091552734375
    10. '[c' → logprob: -17.125091552734375

Token 2110: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.15891122817993164
    2. '               ' → logprob: -2.7839112281799316
    3. ']
' → logprob: -3.0339112281799316
    4. '           ' → logprob: -3.5339112281799316
    5. '                   ' → logprob: -5.033911228179932
    6. '[' → logprob: -7.658911228179932
    7. '```' → logprob: -8.158910751342773
    8. '       ' → logprob: -8.658910751342773
    9. ')' → logprob: -9.408910751342773
    10. '                           ' → logprob: -10.408910751342773

Token 2111: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.9902094006538391
    2. '                   ' → logprob: -1.2402093410491943
    3. '```' → logprob: -2.1152093410491943
    4. '                       ' → logprob: -2.6152093410491943
    5. '                               ' → logprob: -2.9902093410491943
    6. '           ' → logprob: -3.6152093410491943
    7. '<|end|>' → logprob: -3.7402093410491943
    8. '                           ' → logprob: -3.8652093410491943
    9. ')' → logprob: -4.740209579467773
    10. '       ' → logprob: -6.240209579467773

Token 2112: ' bit' (ID: 3546)
  Prédit: 'bit'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bit' (adapté à ' bit') → logprob: -0.6093298196792603
    2. '               ' → logprob: -0.8593298196792603
    3. 'break' → logprob: -4.234329700469971
    4. '                   ' → logprob: -4.234329700469971
    5. '```' → logprob: -6.359329700469971
    6. ' bit' → logprob: -6.984329700469971
    7. 'bits' → logprob: -7.734329700469971
    8. '           ' → logprob: -7.984329700469971
    9. 'return' → logprob: -9.234330177307129
    10. '       ' → logprob: -9.359330177307129

Token 2113: 'string' (ID: 1655)
  Prédit: 'string'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'string' → logprob: -6.73052782076411e-05
    2. '_string' → logprob: -10.125067710876465
    3. '_to' → logprob: -10.625067710876465
    4. 'tring' → logprob: -13.250067710876465
    5. 'bit' → logprob: -14.875067710876465
    6. '```' → logprob: -15.125067710876465
    7. 'to' → logprob: -15.250067710876465
    8. '   ' → logprob: -16.62506675720215
    9. ' string' → logprob: -17.00006675720215
    10. ' +=' → logprob: -17.50006675720215

Token 2114: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -1.664371848164592e-05
    2. '=
' → logprob: -11.750016212463379
    3. '=cut' → logprob: -12.750016212463379
    4. ' =' → logprob: -13.125016212463379
    5. '=len' → logprob: -13.125016212463379
    6. '```' → logprob: -14.000016212463379
    7. '=l' → logprob: -14.750016212463379
    8. '=head' → logprob: -16.375017166137695
    9. '=b' → logprob: -16.625017166137695
    10. '[len' → logprob: -16.750017166137695

Token 2115: ' bit' (ID: 3546)
  Prédit: 'bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bit' → logprob: -0.00023417205375153571
    2. ' bit' → logprob: -8.375234603881836
    3. 'bitr' → logprob: -13.375234603881836
    4. 'bits' → logprob: -13.750234603881836
    5. 'b' → logprob: -14.875234603881836
    6. '```' → logprob: -15.000234603881836
    7. '(bit' → logprob: -16.875234603881836
    8. 'bite' → logprob: -17.375234603881836
    9. '   ' → logprob: -17.500234603881836
    10. '_bit' → logprob: -18.000234603881836

Token 2116: 'string' (ID: 1655)
  Prédit: 'bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bit' → logprob: -0.35380953550338745
    2. 'string' → logprob: -1.3538095951080322
    3. '[:' → logprob: -3.7288095951080322
    4. '[' → logprob: -5.228809356689453
    5. '[l' → logprob: -5.353809356689453
    6. 'tring' → logprob: -5.728809356689453
    7. '[string' → logprob: -6.728809356689453
    8. '[len' → logprob: -7.853809356689453
    9. '```' → logprob: -8.603809356689453
    10. '[length' → logprob: -9.103809356689453

Token 2117: '[l' (ID: 38286)
  Prédit: '[:'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[:' → logprob: -0.0054871453903615475
    2. '[l' → logprob: -5.505486965179443
    3. '[len' → logprob: -6.630486965179443
    4. '[' → logprob: -9.755487442016602
    5. ':l' → logprob: -11.380487442016602
    6. '```' → logprob: -11.505487442016602
    7. '[:]' → logprob: -12.505487442016602
    8. ':' → logprob: -13.630487442016602
    9. 'l' → logprob: -13.880487442016602
    10. '[:-' → logprob: -14.130487442016602

Token 2118: ':]
' (ID: 61598)
  Prédit: ':]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':]' → logprob: -0.01177982334047556
    2. ':' → logprob: -4.51177978515625
    3. ']' → logprob: -7.76177978515625
    4. ':]
' → logprob: -8.13677978515625
    5. ':].' → logprob: -12.76177978515625
    6. ' :]' → logprob: -13.01177978515625
    7. ':],' → logprob: -13.38677978515625
    8. '```' → logprob: -13.76177978515625
    9. ':l' → logprob: -14.01177978515625
    10. '**' → logprob: -14.01177978515625

Token 2119: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.013504765927791595
    2. '```' → logprob: -4.513504981994629
    3. '                   ' → logprob: -6.263504981994629
    4. '                       ' → logprob: -8.138504981994629
    5. '           ' → logprob: -9.138504981994629
    6. '<|end|>' → logprob: -10.888504981994629
    7. '                               ' → logprob: -11.138504981994629
    8. '                           ' → logprob: -11.263504981994629
    9. '       ' → logprob: -11.263504981994629
    10. ')' → logprob: -11.263504981994629

Token 2120: ' found' (ID: 2491)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.695227324962616
    2. 'found' (adapté à ' found') → logprob: -0.945227324962616
    3. 'break' → logprob: -2.1952273845672607
    4. '```' → logprob: -7.445227146148682
    5. 'continue' → logprob: -8.44522762298584
    6. 'Found' → logprob: -8.69522762298584
    7. ' found' → logprob: -9.94522762298584
    8. '(found' → logprob: -10.07022762298584
    9. '                   ' → logprob: -10.69522762298584
    10. 'Break' → logprob: -11.82022762298584

Token 2121: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.001967650605365634
    2. '=True' → logprob: -6.251967430114746
    3. '=False' → logprob: -11.001967430114746
    4. ' =' → logprob: -11.001967430114746
    5. '=
' → logprob: -13.251967430114746
    6. '+=' → logprob: -14.126967430114746
    7. '```' → logprob: -14.501967430114746
    8. '<|end|>' → logprob: -14.501967430114746
    9. '==' → logprob: -14.751967430114746
    10. ')' → logprob: -15.001967430114746

Token 2122: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -7.941850526549388e-06
    2. ' True' → logprob: -11.750007629394531
    3. '=True' → logprob: -17.50000762939453
    4. '(True' → logprob: -19.37500762939453
    5. 'true' → logprob: -20.12500762939453
    6. '   ' → logprob: -20.12500762939453
    7. '1' → logprob: -20.37500762939453
    8. '               ' → logprob: -21.50000762939453
    9. '           ' → logprob: -21.50000762939453
    10. '                   ' → logprob: -21.50000762939453

Token 2123: '
' (ID: 198)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.7807807326316833
    2. '                   ' → logprob: -0.7807807326316833
    3. '```' → logprob: -2.905780792236328
    4. '           ' → logprob: -4.405780792236328
    5. '                       ' → logprob: -4.655780792236328
    6. '<|end|>' → logprob: -5.530780792236328
    7. '                               ' → logprob: -7.030780792236328
    8. '                           ' → logprob: -7.405780792236328
    9. '       ' → logprob: -7.530780792236328
    10. ')' → logprob: -8.530780792236328

Token 2124: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.07316895574331284
    2. '                   ' → logprob: -2.823168992996216
    3. '                       ' → logprob: -5.073168754577637
    4. '```' → logprob: -5.448168754577637
    5. '           ' → logprob: -8.323168754577637
    6. '                               ' → logprob: -9.073168754577637
    7. '                           ' → logprob: -9.323168754577637
    8. '       ' → logprob: -10.823168754577637
    9. '			' → logprob: -11.573168754577637
    10. '                ' → logprob: -11.698168754577637

Token 2125: ' break' (ID: 2338)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.0010153028415516019
    2. 'break' (adapté à ' break') → logprob: -7.1260151863098145
    3. '                   ' → logprob: -8.626015663146973
    4. '			' → logprob: -11.251015663146973
    5. '                       ' → logprob: -11.626015663146973
    6. '```' → logprob: -12.751015663146973
    7. '           ' → logprob: -13.376015663146973
    8. 'continue' → logprob: -13.626015663146973
    9. ' break' → logprob: -13.876015663146973
    10. '       ' → logprob: -14.251015663146973

Token 2126: '
' (ID: 198)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '```' → logprob: -0.8751165866851807
    2. '               ' → logprob: -1.5001165866851807
    3. '       ' → logprob: -1.7501165866851807
    4. '           ' → logprob: -2.0001165866851807
    5. '                   ' → logprob: -4.000116348266602
    6. ')' → logprob: -4.250116348266602
    7. '<|end|>' → logprob: -4.750116348266602
    8. '                       ' → logprob: -6.750116348266602
    9. '                               ' → logprob: -7.000116348266602
    10. '                ' → logprob: -7.000116348266602

Token 2127: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.3051890432834625
    2. '```' → logprob: -1.8051890134811401
    3. '           ' → logprob: -3.3051891326904297
    4. '               ' → logprob: -3.5551891326904297
    5. ')' → logprob: -3.9301891326904297
    6. '​' → logprob: -5.55518913269043
    7. '<|end|>' → logprob: -5.80518913269043
    8. '                   ' → logprob: -5.93018913269043
    9. '   ' → logprob: -7.68018913269043
    10. '`' → logprob: -7.80518913269043

Token 2128: ' if' (ID: 538)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.010682986117899418
    2. 'if' (adapté à ' if') → logprob: -4.635683059692383
    3. '           ' → logprob: -7.760683059692383
    4. ' if' → logprob: -8.135683059692383
    5. '   ' → logprob: -9.635683059692383
    6. '               ' → logprob: -9.885683059692383
    7. '```' → logprob: -10.135683059692383
    8. 'continue' → logprob: -10.260683059692383
    9. '	' → logprob: -12.385683059692383
    10. 'else' → logprob: -12.635683059692383

Token 2129: ' not' (ID: 625)
  Prédit: 'not'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'not' → logprob: -0.003325645811855793
    2. ' not' → logprob: -5.753325462341309
    3. 'False' → logprob: -9.003325462341309
    4. '       ' → logprob: -11.003325462341309
    5. '   ' → logprob: -12.503325462341309
    6. '           ' → logprob: -12.753325462341309
    7. '	not' → logprob: -14.753325462341309
    8. '
' → logprob: -14.878325462341309
    9. '(not' → logprob: -14.878325462341309
    10. 'True' → logprob: -15.503325462341309

Token 2130: ' found' (ID: 2491)
  Prédit: 'found'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'found' → logprob: -0.008808261714875698
    2. ' found' → logprob: -4.758808135986328
    3. 'bit' → logprob: -8.883808135986328
    4. '(found' → logprob: -11.008808135986328
    5. '_found' → logprob: -11.258808135986328
    6. ' bit' → logprob: -11.633808135986328
    7. ':' → logprob: -12.633808135986328
    8. 'not' → logprob: -13.008808135986328
    9. '       ' → logprob: -13.008808135986328
    10. ')' → logprob: -13.008808135986328

Token 2131: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.5924078226089478
    2. '=' → logprob: -1.3424078226089478
    3. ':
' → logprob: -2.342407703399658
    4. '           ' → logprob: -3.467407703399658
    5. '+=' → logprob: -3.467407703399658
    6. '==' → logprob: -3.717407703399658
    7. '=True' → logprob: -7.967407703399658
    8. '       ' → logprob: -7.967407703399658
    9. '```' → logprob: -7.967407703399658
    10. ' =' → logprob: -8.467408180236816

Token 2132: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0055083767510950565
    2. '       ' → logprob: -5.2555084228515625
    3. '               ' → logprob: -9.255508422851562
    4. '   ' → logprob: -9.755508422851562
    5. '```' → logprob: -10.005508422851562
    6. 'return' → logprob: -11.130508422851562
    7. '	       ' → logprob: -11.255508422851562
    8. 'break' → logprob: -11.505508422851562
    9. '		' → logprob: -11.630508422851562
    10. 'continue' → logprob: -12.255508422851562

Token 2133: ' #' (ID: 1069)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'break' → logprob: -0.16436165571212769
    2. 'bit' → logprob: -1.9143617153167725
    3. '           ' → logprob: -5.539361476898193
    4. ' break' → logprob: -9.164361953735352
    5. '       ' → logprob: -10.539361953735352
    6. ' bit' → logprob: -10.789361953735352
    7. '#' (adapté à ' #') → logprob: -10.914361953735352
    8. '```' → logprob: -11.164361953735352
    9. 'raise' → logprob: -12.289361953735352
    10. 'bits' → logprob: -12.539361953735352

Token 2134: ' if' (ID: 538)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'break' → logprob: -0.008984439074993134
    2. 'bit' → logprob: -4.758984565734863
    3. '           ' → logprob: -8.258984565734863
    4. '#' → logprob: -10.258984565734863
    5. 'raise' → logprob: -10.258984565734863
    6. ' break' → logprob: -10.633984565734863
    7. '       ' → logprob: -11.508984565734863
    8. '   ' → logprob: -13.508984565734863
    9. '```' → logprob: -13.508984565734863
    10. 'continue' → logprob: -14.008984565734863

Token 2135: ' can't' (ID: 8535)
  Prédit: 'bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bit' → logprob: -0.5289167761802673
    2. 'not' → logprob: -1.028916835784912
    3. '#' → logprob: -4.153916835784912
    4. ' not' → logprob: -4.403916835784912
    5. 'len' → logprob: -4.653916835784912
    6. '           ' → logprob: -5.778916835784912
    7. ' bit' → logprob: -6.278916835784912
    8. ')' → logprob: -6.403916835784912
    9. '       ' → logprob: -6.403916835784912
    10. 'True' → logprob: -6.653916835784912

Token 2136: ' decode' (ID: 32043)
  Prédit: 'decode'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'decode' → logprob: -0.39922085404396057
    2. 'bit' → logprob: -2.5242209434509277
    3. 'find' → logprob: -2.5242209434509277
    4. 'found' → logprob: -3.1492209434509277
    5. 'continue' → logprob: -3.5242209434509277
    6. '           ' → logprob: -3.5242209434509277
    7. '```' → logprob: -4.524220943450928
    8. '=' → logprob: -4.524220943450928
    9. 'break' → logprob: -4.774220943450928
    10. ')' → logprob: -4.774220943450928

Token 2137: ',' (ID: 11)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -1.1725126504898071
    2. 'continue' → logprob: -1.4225126504898071
    3. ':
' → logprob: -1.5475126504898071
    4. 'bit' → logprob: -2.0475125312805176
    5. ' continue' → logprob: -3.2975125312805176
    6. ':' → logprob: -4.172512531280518
    7. '               ' → logprob: -4.297512531280518
    8. '       ' → logprob: -4.672512531280518
    9. ' bit' → logprob: -4.797512531280518
    10. 'break' → logprob: -4.922512531280518

Token 2138: ' remove' (ID: 6234)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'break' → logprob: -1.0239369869232178
    2. '           ' → logprob: -1.1489369869232178
    3. ' break' → logprob: -1.3989369869232178
    4. 'bit' → logprob: -2.6489369869232178
    5. ' bit' → logprob: -5.273937225341797
    6. 'bits' → logprob: -8.273937225341797
    7. '```' → logprob: -8.273937225341797
    8. '#' → logprob: -8.773937225341797
    9. '               ' → logprob: -8.898937225341797
    10. '       ' → logprob: -8.898937225341797

Token 2139: ' first' (ID: 1577)
  Prédit: 'bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bit' → logprob: -0.19305074214935303
    2. ' bit' → logprob: -1.943050742149353
    3. '1' → logprob: -4.068050861358643
    4. 'bits' → logprob: -4.318050861358643
    5. '   ' → logprob: -7.193050861358643
    6. ' bits' → logprob: -7.318050861358643
    7. '```' → logprob: -8.943050384521484
    8. '`' → logprob: -9.443050384521484
    9. ' ' → logprob: -9.818050384521484
    10. '       ' → logprob: -10.193050384521484

Token 2140: ' bit' (ID: 3546)
  Prédit: 'bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bit' → logprob: -0.23434016108512878
    2. ' bit' → logprob: -1.8593401908874512
    3. '[' → logprob: -3.734340190887451
    4. '```' → logprob: -4.359340190887451
    5. '`' → logprob: -5.234340190887451
    6. '1' → logprob: -5.984340190887451
    7. '0' → logprob: -6.484340190887451
    8. ')' → logprob: -6.859340190887451
    9. '``' → logprob: -6.859340190887451
    10. 'bits' → logprob: -6.984340190887451

Token 2141: ' and' (ID: 326)
  Prédit: 'bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bit' → logprob: -0.7849788665771484
    2. ' bit' → logprob: -1.7849788665771484
    3. '=' → logprob: -2.1599788665771484
    4. '           ' → logprob: -2.1599788665771484
    5. ' =' → logprob: -2.1599788665771484
    6. 'bits' → logprob: -4.659978866577148
    7. '   ' → logprob: -5.409978866577148
    8. '       ' → logprob: -5.409978866577148
    9. ':' → logprob: -5.909978866577148
    10. '(bit' → logprob: -6.284978866577148

Token 2142: ' continue' (ID: 4901)
  Prédit: 'continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'continue' → logprob: -0.004872231278568506
    2. ' continue' → logprob: -6.2548723220825195
    3. 'bit' → logprob: -6.3798723220825195
    4. 'bits' → logprob: -7.7548723220825195
    5. '```' → logprob: -7.8798723220825195
    6. '           ' → logprob: -8.25487232208252
    7. 'pass' → logprob: -9.87987232208252
    8. '       ' → logprob: -10.00487232208252
    9. 'break' → logprob: -10.87987232208252
    10. 'try' → logprob: -11.12987232208252

Token 2143: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.10848122090101242
    2. 'bit' → logprob: -2.3584811687469482
    3. ' bit' → logprob: -5.108481407165527
    4. '```' → logprob: -7.108481407165527
    5. '   ' → logprob: -7.233481407165527
    6. '       ' → logprob: -7.733481407165527
    7. 'bits' → logprob: -8.733481407165527
    8. '               ' → logprob: -10.483481407165527
    9. '``' → logprob: -11.608481407165527
    10. ' bits' → logprob: -12.608481407165527

Token 2144: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.00206092675216496
    2. 'bit' → logprob: -6.752060890197754
    3. '```' → logprob: -7.627060890197754
    4. ' bit' → logprob: -8.752060890197754
    5. '       ' → logprob: -9.002060890197754
    6. '   ' → logprob: -10.127060890197754
    7. '               ' → logprob: -10.502060890197754
    8. 'continue' → logprob: -10.752060890197754
    9. ' continue' → logprob: -11.502060890197754
    10. '`' → logprob: -11.752060890197754

Token 2145: ' bit' (ID: 3546)
  Prédit: 'bit'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bit' (adapté à ' bit') → logprob: -0.04344215244054794
    2. ' bit' → logprob: -3.2934422492980957
    3. '           ' → logprob: -5.293442249298096
    4. 'bits' → logprob: -8.168441772460938
    5. '```' → logprob: -10.168441772460938
    6. '       ' → logprob: -11.168441772460938
    7. '   ' → logprob: -11.293441772460938
    8. '               ' → logprob: -12.668441772460938
    9. ' bits' → logprob: -12.793441772460938
    10. '``' → logprob: -13.043441772460938

Token 2146: 'string' (ID: 1655)
  Prédit: 'string'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'string' → logprob: -7.088138227118179e-05
    2. '_string' → logprob: -9.750070571899414
    3. 'bit' → logprob: -11.375070571899414
    4. 'tring' → logprob: -14.625070571899414
    5. '=' → logprob: -15.375070571899414
    6. '_bit' → logprob: -16.500070571899414
    7. ' =' → logprob: -16.625070571899414
    8. 's' → logprob: -17.000070571899414
    9. '```' → logprob: -17.000070571899414
    10. ' string' → logprob: -17.125070571899414

Token 2147: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -2.339278580620885e-06
    2. ' =' → logprob: -13.000001907348633
    3. '=
' → logprob: -16.875001907348633
    4. '=cut' → logprob: -18.750001907348633
    5. '+=' → logprob: -19.375001907348633
    6. '=}' → logprob: -19.375001907348633
    7. '＝' → logprob: -20.625001907348633
    8. '=

' → logprob: -21.125001907348633
    9. '```' → logprob: -21.125001907348633
    10. 'bit' → logprob: -21.250001907348633

Token 2148: ' bit' (ID: 3546)
  Prédit: 'bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bit' → logprob: -1.306760805164231e-05
    2. ' bit' → logprob: -11.25001335144043
    3. 'b' → logprob: -19.12501335144043
    4. 'bitr' → logprob: -19.25001335144043
    5. 'bits' → logprob: -20.87501335144043
    6. 'bite' → logprob: -21.00001335144043
    7. '_bit' → logprob: -21.37501335144043
    8. '(bit' → logprob: -21.50001335144043
    9. ' бит' → logprob: -21.87501335144043
    10. '.bit' → logprob: -21.87501335144043

Token 2149: 'string' (ID: 1655)
  Prédit: 'string'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'string' → logprob: -0.013204706832766533
    2. 'ring' → logprob: -5.013204574584961
    3. 'tring' → logprob: -6.013204574584961
    4. '1' → logprob: -6.138204574584961
    5. 'bit' → logprob: -7.013204574584961
    6. '[' → logprob: -7.388204574584961
    7. 'ing' → logprob: -8.388204574584961
    8. '```' → logprob: -10.638204574584961
    9. '[string' → logprob: -11.013204574584961
    10. 's' → logprob: -11.138204574584961

Token 2150: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.021948890760540962
    2. '+' → logprob: -4.02194881439209
    3. '[:-' → logprob: -6.52194881439209
    4. '[:' → logprob: -7.02194881439209
    5. '```' → logprob: -7.77194881439209
    6. '1' → logprob: -7.77194881439209
    7. '=' → logprob: -8.02194881439209
    8. ')' → logprob: -10.02194881439209
    9. '0' → logprob: -10.02194881439209
    10. '[:]' → logprob: -10.27194881439209

Token 2151: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: 0.0
    2. '[' → logprob: -17.25
    3. '```' → logprob: -17.5
    4. '+' → logprob: -18.25
    5. ' ' → logprob: -18.875
    6. 'from' → logprob: -19.375
    7. '   ' → logprob: -19.625
    8. ':' → logprob: -20.0
    9. '１' → logprob: -20.0
    10. '﻿' → logprob: -20.0

Token 2152: ':]
' (ID: 61598)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']' → logprob: -0.28428512811660767
    2. ':]' → logprob: -1.784285068511963
    3. '<|end|>' → logprob: -3.659285068511963
    4. ':' → logprob: -4.034285068511963
    5. ')' → logprob: -4.284285068511963
    6. '<|end|>' → logprob: -4.409285068511963
    7. '#' → logprob: -6.409285068511963
    8. '+' → logprob: -6.534285068511963
    9. 'continue' → logprob: -6.659285068511963
    10. '```' → logprob: -7.409285068511963

Token 2153: '   ' (ID: 271)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.19415031373500824
    2. '   ' → logprob: -2.44415020942688
    3. '           ' → logprob: -3.06915020942688
    4. 'continue' → logprob: -3.31915020942688
    5. '```' → logprob: -5.694150447845459
    6. ' continue' → logprob: -6.944150447845459
    7. '               ' → logprob: -7.444150447845459
    8. ')' → logprob: -7.694150447845459
    9. '{' → logprob: -8.4441499710083
    10. '                   ' → logprob: -8.5691499710083

Token 2154: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0071429903618991375
    2. '       ' → logprob: -5.507143020629883
    3. 'continue' → logprob: -6.757143020629883
    4. ')' → logprob: -7.007143020629883
    5. '```' → logprob: -7.257143020629883
    6. 'decode' → logprob: -9.632143020629883
    7. 'print' → logprob: -10.132143020629883
    8. '<|end|>' → logprob: -10.632143020629883
    9. 'decoded' → logprob: -10.757143020629883
    10. 'for' → logprob: -11.007143020629883

Token 2155: ' res' (ID: 694)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' → logprob: -3.128163257315464e-07
    2. ' res' → logprob: -15.25
    3. '```' → logprob: -17.5
    4. '""' → logprob: -18.75
    5. '(res' → logprob: -19.75
    6. '	res' → logprob: -20.5
    7. '$res' → logprob: -21.0
    8. 'result' → logprob: -21.25
    9. '"' → logprob: -21.75
    10. '_res' → logprob: -21.875

Token 2156: '

' (ID: 279)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.3112183213233948
    2. 'for' → logprob: -1.81121826171875
    3. '   ' → logprob: -2.68621826171875
    4. 'bit' → logprob: -3.93621826171875
    5. '```' → logprob: -4.56121826171875
    6. 'b' → logprob: -6.43621826171875
    7. ' for' → logprob: -6.56121826171875
    8. '
' → logprob: -7.31121826171875
    9. 'char' → logprob: -7.43621826171875
    10. '#' → logprob: -8.06121826171875

Token 2157: 'import' (ID: 561)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.1855984628200531
    2. 'for' → logprob: -2.310598373413086
    3. '   ' → logprob: -2.935598373413086
    4. 'bit' → logprob: -4.185598373413086
    5. 'char' → logprob: -7.435598373413086
    6. '```' → logprob: -7.810598373413086
    7. 'line' → logprob: -8.810598373413086
    8. ' for' → logprob: -8.935598373413086
    9. ' bits' → logprob: -9.060598373413086
    10. 'while' → logprob: -9.185598373413086

Token 2158: ' sys' (ID: 12228)
  Prédit: 'sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sys' → logprob: -1.1472419600977446e-06
    2. ' sys' → logprob: -14.875000953674316
    3. 'stdin' → logprob: -15.375000953674316
    4. 'read' → logprob: -15.875000953674316
    5. 'io' → logprob: -16.250001907348633
    6. 'built' → logprob: -16.375001907348633
    7. '=sys' → logprob: -16.875001907348633
    8. 'code' → logprob: -17.000001907348633
    9. '```' → logprob: -17.000001907348633
    10. 'bit' → logprob: -17.250001907348633

Token 2159: '

' (ID: 279)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.32450416684150696
    2. 'for' → logprob: -1.3245041370391846
    3. '   ' → logprob: -4.949504375457764
    4. 'bit' → logprob: -5.949504375457764
    5. 'line' → logprob: -6.824504375457764
    6. 'while' → logprob: -8.699503898620605
    7. '```' → logprob: -9.074503898620605
    8. ' for' → logprob: -10.324503898620605
    9. ' bits' → logprob: -10.574503898620605
    10. 'lines' → logprob: -11.074503898620605

Token 2160: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.007250337861478329
    2. 'line' → logprob: -5.3822503089904785
    3. '   ' → logprob: -6.2572503089904785
    4. 'bits' → logprob: -7.5072503089904785
    5. 'bit' → logprob: -10.132250785827637
    6. 'while' → logprob: -10.132250785827637
    7. '```' → logprob: -10.132250785827637
    8. ' for' → logprob: -10.257250785827637
    9. 'lines' → logprob: -13.757250785827637
    10. 'input' → logprob: -13.882250785827637

Token 2161: ' line' (ID: 2543)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.0002613358374219388
    2. ' line' → logprob: -8.250261306762695
    3. '	line' → logprob: -18.125261306762695
    4. '#line' → logprob: -18.500261306762695
    5. '(line' → logprob: -18.500261306762695
    6. '```' → logprob: -18.625261306762695
    7. '=line' → logprob: -19.500261306762695
    8. '_line' → logprob: -20.125261306762695
    9. '[line' → logprob: -21.375261306762695
    10. '`' → logprob: -22.250261306762695

Token 2162: ' in' (ID: 306)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.07644178718328476
    2. ' in' → logprob: -2.951441764831543
    3. '=line' → logprob: -3.951441764831543
    4. '(line' → logprob: -7.826441764831543
    5. '[line' → logprob: -7.951441764831543
    6. '_line' → logprob: -8.076441764831543
    7. 'line' → logprob: -8.326441764831543
    8. '   ' → logprob: -8.576441764831543
    9. '_in' → logprob: -9.076441764831543
    10. '#line' → logprob: -9.451441764831543

Token 2163: ' sys' (ID: 12228)
  Prédit: 'sys'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sys' → logprob: -0.014439309015870094
    2. 'line' → logprob: -4.264439105987549
    3. ' sys' → logprob: -8.389439582824707
    4. '```' → logprob: -10.389439582824707
    5. ' line' → logprob: -11.639439582824707
    6. 'in' → logprob: -12.514439582824707
    7. '=sys' → logprob: -13.389439582824707
    8. 'stdin' → logprob: -13.514439582824707
    9. 'import' → logprob: -14.264439582824707
    10. '	sys' → logprob: -14.764439582824707

Token 2164: '.stdin' (ID: 93480)
  Prédit: '.readline'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.17217792570590973
    2. '.' → logprob: -2.172178030014038
    3. '.stdin' → logprob: -4.172177791595459
    4. '   ' → logprob: -4.797177791595459
    5. '.stdout' → logprob: -5.047177791595459
    6. 'for' → logprob: -5.797177791595459
    7. '```' → logprob: -5.797177791595459
    8. '.readlines' → logprob: -6.047177791595459
    9. ':' → logprob: -6.922177791595459
    10. 'import' → logprob: -7.422177791595459

Token 2165: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.2733272612094879
    2. ':
' → logprob: -1.7733272314071655
    3. '   ' → logprob: -2.898327350616455
    4. '```' → logprob: -4.398327350616455
    5. '.readline' → logprob: -7.898327350616455
    6. '[line' → logprob: -8.523326873779297
    7. '):
' → logprob: -8.773326873779297
    8. '=' → logprob: -8.773326873779297
    9. 'for' → logprob: -9.148326873779297
    10. '(line' → logprob: -9.273326873779297

Token 2166: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01458264421671629
    2. '```' → logprob: -4.264582633972168
    3. ' line' → logprob: -8.264582633972168
    4. '   ' → logprob: -9.514582633972168
    5. '	line' → logprob: -9.764582633972168
    6. '(line' → logprob: -11.889582633972168
    7. '#line' → logprob: -12.014582633972168
    8. '``' → logprob: -12.264582633972168
    9. ' ' → logprob: -13.014582633972168
    10. '`' → logprob: -13.014582633972168

Token 2167: ' line' (ID: 2543)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3962409496307373
    2. 'line' (adapté à ' line') → logprob: -1.8962409496307373
    3. 'bits' → logprob: -2.2712409496307373
    4. ' line' → logprob: -2.7712409496307373
    5. '```' → logprob: -5.146241188049316
    6. ' bits' → logprob: -5.771241188049316
    7. 'bit' → logprob: -6.396241188049316
    8. '	line' → logprob: -8.771241188049316
    9. 'for' → logprob: -9.021241188049316
    10. 's' → logprob: -9.146241188049316

Token 2168: ' =' (ID: 314)
  Prédit: '=line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=line' → logprob: -0.00026574634830467403
    2. '=' → logprob: -8.750266075134277
    3. ' =' → logprob: -9.500266075134277
    4. '=
' → logprob: -10.875266075134277
    5. '   ' → logprob: -12.750266075134277
    6. '=str' → logprob: -12.875266075134277
    7. '.strip' → logprob: -13.250266075134277
    8. '.rstrip' → logprob: -13.250266075134277
    9. '#line' → logprob: -13.375266075134277
    10. '_line' → logprob: -14.125266075134277

Token 2169: ' line' (ID: 2543)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'line' → logprob: -2.4868770196917467e-05
    2. ' line' → logprob: -11.125024795532227
    3. '   ' → logprob: -12.750024795532227
    4. '#line' → logprob: -13.000024795532227
    5. '=line' → logprob: -13.125024795532227
    6. '	line' → logprob: -13.500024795532227
    7. '(line' → logprob: -14.000024795532227
    8. '[line' → logprob: -15.125024795532227
    9. 'input' → logprob: -15.375024795532227
    10. '```' → logprob: -15.875024795532227

Token 2170: '.strip' (ID: 40613)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.656059741973877
    2. '.strip' → logprob: -1.281059741973877
    3. '=line' → logprob: -1.906059741973877
    4. '.rstrip' → logprob: -4.031059741973877
    5. '=
' → logprob: -4.156059741973877
    6. '+=' → logprob: -5.156059741973877
    7. '=str' → logprob: -5.531059741973877
    8. 'rstrip' → logprob: -5.656059741973877
    9. '```' → logprob: -6.281059741973877
    10. 'strip' → logprob: -6.906059741973877

Token 2171: '()
' (ID: 1234)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.017830420285463333
    2. 'bits' → logprob: -4.7678303718566895
    3. 'if' → logprob: -5.6428303718566895
    4. 'bit' → logprob: -6.0178303718566895
    5. ':' → logprob: -6.7678303718566895
    6. ':
' → logprob: -7.1428303718566895
    7. ' if' → logprob: -7.2678303718566895
    8. '```' → logprob: -8.892830848693848
    9. '
' → logprob: -9.392830848693848
    10. 'for' → logprob: -9.517830848693848

Token 2172: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04487322270870209
    2. 'bits' → logprob: -3.1698732376098633
    3. '```' → logprob: -6.794873237609863
    4. 'bit' → logprob: -7.419873237609863
    5. ' bits' → logprob: -9.044873237609863
    6. '`' → logprob: -11.669873237609863
    7. '   ' → logprob: -11.669873237609863
    8. ' bit' → logprob: -12.544873237609863
    9. '_bits' → logprob: -12.669873237609863
    10. '``' → logprob: -13.294873237609863

Token 2173: ' if' (ID: 538)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.03452467545866966
    2. 'bit' → logprob: -4.159524440765381
    3. 'if' (adapté à ' if') → logprob: -4.284524440765381
    4. '   ' → logprob: -5.409524440765381
    5. ' bits' → logprob: -10.159524917602539
    6. ' if' → logprob: -10.784524917602539
    7. '```' → logprob: -12.659524917602539
    8. ' bit' → logprob: -14.034524917602539
    9. '_bits' → logprob: -14.159524917602539
    10. 'b' → logprob: -14.659524917602539

Token 2174: ' not' (ID: 625)
  Prédit: 'not'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'not' → logprob: -0.00022153646568767726
    2. ' not' → logprob: -9.000221252441406
    3. 'line' → logprob: -9.250221252441406
    4. '   ' → logprob: -13.875221252441406
    5. 'len' → logprob: -14.375221252441406
    6. '```' → logprob: -15.000221252441406
    7. '
' → logprob: -18.125221252441406
    8. '(not' → logprob: -18.125221252441406
    9. '!' → logprob: -18.500221252441406
    10. '       ' → logprob: -19.125221252441406

Token 2175: ' line' (ID: 2543)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'line' → logprob: -1.8624639324116288e-06
    2. ' line' → logprob: -13.625001907348633
    3. 'not' → logprob: -15.250001907348633
    4. '```' → logprob: -15.625001907348633
    5. 'len' → logprob: -16.500001907348633
    6. '(line' → logprob: -16.875001907348633
    7. '   ' → logprob: -18.750001907348633
    8. '#line' → logprob: -18.750001907348633
    9. '[line' → logprob: -19.125001907348633
    10. '
' → logprob: -19.500001907348633

Token 2176: ':
' (ID: 734)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.008270933292806149
    2. '```' → logprob: -5.508270740509033
    3. '+=' → logprob: -6.633270740509033
    4. '!=' → logprob: -7.508270740509033
    5. ':
' → logprob: -7.758270740509033
    6. '==
' → logprob: -7.758270740509033
    7. ':' → logprob: -7.758270740509033
    8. '.startswith' → logprob: -8.383271217346191
    9. ' ==' → logprob: -8.633271217346191
    10. '=' → logprob: -9.258271217346191

Token 2177: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.673742949962616
    2. '   ' → logprob: -0.923742949962616
    3. '```' → logprob: -2.4237430095672607
    4. 'continue' → logprob: -5.673742771148682
    5. 'bits' → logprob: -7.673742771148682
    6. ' continue' → logprob: -8.04874324798584
    7. '``' → logprob: -9.67374324798584
    8. '	continue' → logprob: -9.79874324798584
    9. '`' → logprob: -10.29874324798584
    10. '続きを' → logprob: -10.54874324798584

Token 2178: ' continue' (ID: 4901)
  Prédit: 'continue'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'continue' (adapté à ' continue') → logprob: -0.010107829235494137
    2. '   ' → logprob: -4.76010799407959
    3. 'break' → logprob: -7.13510799407959
    4. 'bits' → logprob: -8.38510799407959
    5. '       ' → logprob: -8.63510799407959
    6. '```' → logprob: -8.63510799407959
    7. ' continue' → logprob: -9.88510799407959
    8. 'bit' → logprob: -10.01010799407959
    9. '	continue' → logprob: -11.63510799407959
    10. 'b' → logprob: -13.26010799407959

Token 2179: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05762714520096779
    2. 'bits' → logprob: -2.9326272010803223
    3. 'bit' → logprob: -6.057627201080322
    4. ' bits' → logprob: -8.557626724243164
    5. '```' → logprob: -8.932626724243164
    6. '   ' → logprob: -9.807626724243164
    7. ' bit' → logprob: -11.432626724243164
    8. ' ' → logprob: -12.682626724243164
    9. '_bits' → logprob: -12.807626724243164
    10. '``' → logprob: -13.682626724243164

Token 2180: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.20797473192214966
    2. 'bits' → logprob: -1.7079746723175049
    3. 'bit' → logprob: -5.332974910736084
    4. ' bits' → logprob: -6.957974910736084
    5. '```' → logprob: -7.332974910736084
    6. '   ' → logprob: -9.957974433898926
    7. ' bit' → logprob: -10.207974433898926
    8. '_bits' → logprob: -11.832974433898926
    9. '``' → logprob: -12.082974433898926
    10. ' ' → logprob: -13.082974433898926

Token 2181: ' bit' (ID: 3546)
  Prédit: 'bits'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bits' → logprob: -0.009949211031198502
    2. '   ' → logprob: -5.009949207305908
    3. 'bit' (adapté à ' bit') → logprob: -5.759949207305908
    4. ' bits' → logprob: -9.509949684143066
    5. '```' → logprob: -13.509949684143066
    6. '_bits' → logprob: -13.759949684143066
    7. ' bit' → logprob: -15.259949684143066
    8. '(bits' → logprob: -16.00994873046875
    9. '   ' → logprob: -16.38494873046875
    10. '``' → logprob: -16.63494873046875

Token 2182: 'string' (ID: 1655)
  Prédit: 'string'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'string' → logprob: -0.6913211345672607
    2. '=' → logprob: -0.9413211345672607
    3. '_bits' → logprob: -3.3163211345672607
    4. 'bits' → logprob: -3.5663211345672607
    5. ' =' → logprob: -3.6913211345672607
    6. 's' → logprob: -4.44132137298584
    7. '_string' → logprob: -5.44132137298584
    8. 'bit' → logprob: -7.19132137298584
    9. 'str' → logprob: -7.44132137298584
    10. '=""' → logprob: -7.69132137298584

Token 2183: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.000597116129938513
    2. '+=' → logprob: -7.50059700012207
    3. ' =' → logprob: -10.12559700012207
    4. '=""' → logprob: -12.62559700012207
    5. ' +=' → logprob: -14.50059700012207
    6. '+="' → logprob: -16.12559700012207
    7. '+' → logprob: -16.62559700012207
    8. '=''' → logprob: -16.87559700012207
    9. '   ' → logprob: -17.37559700012207
    10. '=""
' → logprob: -18.87559700012207

Token 2184: ' ""
' (ID: 18061)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.006163174286484718
    2. '""' → logprob: -5.256163120269775
    3. '''.' → logprob: -7.006163120269775
    4. '''' → logprob: -10.756163597106934
    5. '''
' → logprob: -14.131163597106934
    6. ''' → logprob: -14.756163597106934
    7. '"",' → logprob: -15.381163597106934
    8. ' "".' → logprob: -16.131162643432617
    9. '   ' → logprob: -18.256162643432617
    10. '"""' → logprob: -18.506162643432617

Token 2185: '   ' (ID: 271)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.2520587146282196
    2. '   ' → logprob: -1.502058744430542
    3. '```' → logprob: -9.502058982849121
    4. ' for' → logprob: -9.877058982849121
    5. '	for' → logprob: -12.627058982849121
    6. '``' → logprob: -16.502058029174805
    7. '`' → logprob: -16.627058029174805
    8. '   ' → logprob: -16.752058029174805
    9. '[' → logprob: -17.377058029174805
    10. 'For' → logprob: -18.127058029174805

Token 2186: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.00672448705881834
    2. '   ' → logprob: -5.0067243576049805
    3. '```' → logprob: -11.75672435760498
    4. ' for' → logprob: -13.75672435760498
    5. '	for' → logprob: -15.25672435760498
    6. '``' → logprob: -17.381725311279297
    7. '
' → logprob: -18.006725311279297
    8. '`' → logprob: -19.506725311279297
    9. 'For' → logprob: -20.131725311279297
    10. '   ' → logprob: -20.756725311279297

Token 2187: ' c' (ID: 274)
  Prédit: 'ch'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ch' → logprob: -5.848420551046729e-05
    2. 'c' → logprob: -9.7500581741333
    3. ' ch' → logprob: -16.750059127807617
    4. 'char' → logprob: -18.750059127807617
    5. '[ch' → logprob: -19.375059127807617
    6. '(ch' → logprob: -20.000059127807617
    7. '_ch' → logprob: -21.625059127807617
    8. '	ch' → logprob: -22.000059127807617
    9. 'x' → logprob: -22.000059127807617
    10. '```' → logprob: -22.875059127807617

Token 2188: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.4740925133228302
    2. 'in' → logprob: -0.9740924835205078
    3. 'import' → logprob: -12.349092483520508
    4. '	in' → logprob: -12.349092483520508
    5. '_in' → logprob: -12.849092483520508
    6. '   ' → logprob: -13.349092483520508
    7. 'In' → logprob: -13.974092483520508
    8. ' ' → logprob: -15.474092483520508
    9. '"in' → logprob: -15.599092483520508
    10. 'i' → logprob: -15.724092483520508

Token 2189: ' line' (ID: 2543)
  Prédit: 'char'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'char' → logprob: -0.63853919506073
    2. 'line' → logprob: -1.13853919506073
    3. 'bit' → logprob: -2.1385393142700195
    4. 'c' → logprob: -3.3885393142700195
    5. ' line' → logprob: -10.76353931427002
    6. 'ch' → logprob: -11.38853931427002
    7. ' char' → logprob: -11.63853931427002
    8. ' bit' → logprob: -12.13853931427002
    9. ' c' → logprob: -12.26353931427002
    10. '[line' → logprob: -12.88853931427002

Token 2190: ':
' (ID: 734)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.11772764474153519
    2. ' +=' → logprob: -2.242727756500244
    3. '   ' → logprob: -5.492727756500244
    4. '+='' → logprob: -7.992727756500244
    5. '+="' → logprob: -8.867727279663086
    6. ']+=' → logprob: -8.992727279663086
    7. '+=(' → logprob: -10.117727279663086
    8. 'bit' → logprob: -10.117727279663086
    9. '+' → logprob: -10.242727279663086
    10. '       ' → logprob: -10.742727279663086

Token 2191: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0795634463429451
    2. 'bit' → logprob: -2.7045633792877197
    3. ' bit' → logprob: -4.954563617706299
    4. '   ' → logprob: -6.079563617706299
    5. '```' → logprob: -8.57956314086914
    6. 'bits' → logprob: -10.57956314086914
    7. '           ' → logprob: -12.32956314086914
    8. 'bitr' → logprob: -12.45456314086914
    9. 'if' → logprob: -12.82956314086914
    10. ' if' → logprob: -12.95456314086914

Token 2192: ' if' (ID: 538)
  Prédit: 'bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bit' → logprob: -3.547789674485102e-05
    2. ' bit' → logprob: -11.000035285949707
    3. '       ' → logprob: -11.625035285949707
    4. '   ' → logprob: -11.875035285949707
    5. 'bitr' → logprob: -13.250035285949707
    6. 'bits' → logprob: -14.125035285949707
    7. 'if' (adapté à ' if') → logprob: -16.125036239624023
    8. '           ' → logprob: -16.250036239624023
    9. '_bit' → logprob: -16.375036239624023
    10. 'b' → logprob: -17.500036239624023

Token 2193: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.008399798534810543
    2. 'char' → logprob: -5.008399963378906
    3. 'bit' → logprob: -6.758399963378906
    4. ' c' → logprob: -7.633399963378906
    5. '   ' → logprob: -10.758399963378906
    6. 'not' → logprob: -12.758399963378906
    7. ' bit' → logprob: -12.883399963378906
    8. 'ch' → logprob: -13.008399963378906
    9. ' char' → logprob: -13.008399963378906
    10. ' ' → logprob: -14.008399963378906

Token 2194: ' in' (ID: 306)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.04596651345491409
    2. ' in' → logprob: -3.420966625213623
    3. '==' → logprob: -4.795966625213623
    4. 'not' → logprob: -6.420966625213623
    5. '```' → logprob: -6.420966625213623
    6. ' not' → logprob: -8.795966148376465
    7. ' ==' → logprob: -9.045966148376465
    8. 'bit' → logprob: -9.170966148376465
    9. 'char' → logprob: -9.545966148376465
    10. '!=' → logprob: -9.670966148376465

Token 2195: ' bit' (ID: 3546)
  Prédit: 'bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bit' → logprob: -2.15310683415737e-05
    2. 'char' → logprob: -10.750021934509277
    3. ' bit' → logprob: -20.12502098083496
    4. 'byte' → logprob: -23.87502098083496
    5. '```' → logprob: -24.37502098083496
    6. 'b' → logprob: -25.00002098083496
    7. '{
' → logprob: -25.00002098083496
    8. '(bit' → logprob: -25.12502098083496
    9. 'bitr' → logprob: -25.25002098083496
    10. '
' → logprob: -25.37502098083496

Token 2196: '_dict' (ID: 11295)
  Prédit: 'string'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'string' → logprob: -0.16920796036720276
    2. '_dict' → logprob: -2.04420804977417
    3. '_to' → logprob: -3.79420804977417
    4. 'to' → logprob: -6.04420804977417
    5. 'dict' → logprob: -6.91920804977417
    6. 'bit' → logprob: -9.294207572937012
    7. '_string' → logprob: -9.669207572937012
    8. 'dictionary' → logprob: -10.544207572937012
    9. 'strings' → logprob: -10.544207572937012
    10. 'char' → logprob: -10.669207572937012

Token 2197: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.5953748226165771
    2. ':
' → logprob: -1.2203748226165771
    3. ']' → logprob: -3.595374822616577
    4. '[' → logprob: -3.595374822616577
    5. ']+=' → logprob: -3.845374822616577
    6. '==' → logprob: -4.220375061035156
    7. ']==' → logprob: -4.220375061035156
    8. ']:
' → logprob: -4.470375061035156
    9. '+=' → logprob: -4.470375061035156
    10. ']:' → logprob: -5.095375061035156

Token 2198: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.009572271257638931
    2. 'bit' → logprob: -4.884572505950928
    3. '       ' → logprob: -7.009572505950928
    4. ' bit' → logprob: -7.384572505950928
    5. '```' → logprob: -8.50957202911377
    6. '               ' → logprob: -8.88457202911377
    7. '	       ' → logprob: -10.38457202911377
    8. '   ' → logprob: -10.63457202911377
    9. 'bits' → logprob: -11.38457202911377
    10. '          ' → logprob: -12.50957202911377

Token 2199: ' bit' (ID: 3546)
  Prédit: 'bit'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bit' (adapté à ' bit') → logprob: -0.0003103175258729607
    2. '           ' → logprob: -9.000309944152832
    3. ' bit' → logprob: -9.250309944152832
    4. 'bitr' → logprob: -9.625309944152832
    5. 'bits' → logprob: -10.750309944152832
    6. '_bit' → logprob: -13.500309944152832
    7. '```' → logprob: -14.250309944152832
    8. '-bit' → logprob: -15.000309944152832
    9. '(bit' → logprob: -15.250309944152832
    10. '               ' → logprob: -16.12531089782715

Token 2200: 'string' (ID: 1655)
  Prédit: 'string'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'string' → logprob: -4.127333340875339e-06
    2. '_string' → logprob: -12.625003814697266
    3. 'tring' → logprob: -14.625003814697266
    4. '_dict' → logprob: -15.375003814697266
    5. 'dict' → logprob: -16.875003814697266
    6. 'bit' → logprob: -18.000003814697266
    7. ' string' → logprob: -18.375003814697266
    8. '=' → logprob: -18.875003814697266
    9. 's' → logprob: -19.250003814697266
    10. '```' → logprob: -19.375003814697266

Token 2201: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.00027468299958854914
    2. ' +=' → logprob: -8.375274658203125
    3. '+="' → logprob: -10.625274658203125
    4. '+='' → logprob: -11.125274658203125
    5. '+' → logprob: -12.750274658203125
    6. '```' → logprob: -13.625274658203125
    7. ']+=' → logprob: -14.125274658203125
    8. '+=(' → logprob: -15.875274658203125
    9. '=' → logprob: -17.250274658203125
    10. '[' → logprob: -18.000274658203125

Token 2202: ' bit' (ID: 3546)
  Prédit: 'bit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bit' → logprob: -1.981667537620524e-06
    2. 'char' → logprob: -13.250001907348633
    3. ' bit' → logprob: -15.750001907348633
    4. '(bit' → logprob: -22.000001907348633
    5. 'byte' → logprob: -25.375001907348633
    6. '`' → logprob: -25.375001907348633
    7. 'b' → logprob: -25.500001907348633
    8. 'bitr' → logprob: -25.500001907348633
    9. 'c' → logprob: -25.500001907348633
    10. '```' → logprob: -25.875001907348633

Token 2203: '_dict' (ID: 11295)
  Prédit: '_dict'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_dict' → logprob: -0.00074959039920941
    2. 'dict' → logprob: -7.250749588012695
    3. 'string' → logprob: -10.375749588012695
    4. '_DICT' → logprob: -12.500749588012695
    5. 'Dict' → logprob: -13.125749588012695
    6. '```' → logprob: -14.000749588012695
    7. '[' → logprob: -14.250749588012695
    8. '[c' → logprob: -14.875749588012695
    9. 'dictionary' → logprob: -15.125749588012695
    10. 's' → logprob: -16.125749588012695

Token 2204: '[c' (ID: 22840)
  Prédit: '[c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[c' → logprob: -1.9361264946837764e-07
    2. 'c' → logprob: -15.875
    3. '[' → logprob: -17.125
    4. '[
' → logprob: -19.125
    5. '(c' → logprob: -20.25
    6. '```' → logprob: -20.5
    7. ' [' → logprob: -21.5
    8. '\[' → logprob: -21.625
    9. '[C' → logprob: -21.75
    10. '[ch' → logprob: -21.875

Token 2205: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0009796975646167994
    2. '[c' → logprob: -7.000979900360107
    3. ']
' → logprob: -11.12597942352295
    4. 'c' → logprob: -11.62597942352295
    5. ']+' → logprob: -11.75097942352295
    6. '<|end|>' → logprob: -12.12597942352295
    7. '```' → logprob: -12.25097942352295
    8. '']' → logprob: -12.25097942352295
    9. '       ' → logprob: -12.62597942352295
    10. '   ' → logprob: -12.75097942352295

Token 2206: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.23543831706047058
    2. '       ' → logprob: -1.860438346862793
    3. '```' → logprob: -2.985438346862793
    4. '#' → logprob: -6.985438346862793
    5. '[' → logprob: -7.360438346862793
    6. '<|end|>' → logprob: -7.485438346862793
    7. '
' → logprob: -7.985438346862793
    8. '           ' → logprob: -8.360438346862793
    9. '`' → logprob: -8.485438346862793
    10. ')' → logprob: -9.235438346862793

Token 2207: ' decoded' (ID: 58891)
  Prédit: 'decoded'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'decoded' (adapté à ' decoded') → logprob: -0.015468643046915531
    2. '   ' → logprob: -4.765468597412109
    3. 'res' → logprob: -5.640468597412109
    4. 'for' → logprob: -6.765468597412109
    5. 'result' → logprob: -7.265468597412109
    6. 'print' → logprob: -7.640468597412109
    7. 'bits' → logprob: -8.39046859741211
    8. '```' → logprob: -8.64046859741211
    9. ' decoded' → logprob: -8.89046859741211
    10. 'letters' → logprob: -9.14046859741211

Token 2208: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.004986235871911049
    2. '+=' → logprob: -5.62998628616333
    3. ' =' → logprob: -6.87998628616333
    4. ' +=' → logprob: -8.879985809326172
    5. '+' → logprob: -10.004985809326172
    6. '(decoded' → logprob: -10.379985809326172
    7. '+="' → logprob: -10.629985809326172
    8. 'decoded' → logprob: -10.879985809326172
    9. '=""' → logprob: -11.254985809326172
    10. '```' → logprob: -11.379985809326172

Token 2209: ' decode' (ID: 32043)
  Prédit: 'decode'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'decode' → logprob: -0.0015023599844425917
    2. ' decode' → logprob: -6.501502513885498
    3. '.decode' → logprob: -16.876502990722656
    4. 'decoded' → logprob: -18.251502990722656
    5. '```' → logprob: -18.501502990722656
    6. '_decode' → logprob: -18.876502990722656
    7. '   ' → logprob: -20.751502990722656
    8. 'dec' → logprob: -22.126502990722656
    9. '`' → logprob: -22.376502990722656
    10. 'decoder' → logprob: -22.501502990722656

Token 2210: '(bit' (ID: 123258)
  Prédit: '(bit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(bit' → logprob: -4.870950215263292e-05
    2. 'bit' → logprob: -10.375048637390137
    3. '(' → logprob: -11.875048637390137
    4. '(bits' → logprob: -12.000048637390137
    5. '(Bit' → logprob: -13.750048637390137
    6. '(b' → logprob: -13.875048637390137
    7. '(
' → logprob: -14.000048637390137
    8. '(decoded' → logprob: -14.500048637390137
    9. '```' → logprob: -15.250048637390137
    10. ' bit' → logprob: -15.750048637390137

Token 2211: 'string' (ID: 1655)
  Prédit: 'string'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'string' → logprob: -1.5048530030981055e-06
    2. '_string' → logprob: -13.875001907348633
    3. 'decoded' → logprob: -15.000001907348633
    4. ')' → logprob: -16.375001907348633
    5. 'tring' → logprob: -16.375001907348633
    6. '[string' → logprob: -18.125001907348633
    7. '(decoded' → logprob: -18.250001907348633
    8. '```' → logprob: -18.375001907348633
    9. '   ' → logprob: -18.750001907348633
    10. 'String' → logprob: -18.750001907348633

Token 2212: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0008645339403301477
    2. '   ' → logprob: -7.375864505767822
    3. ')
' → logprob: -8.37586498260498
    4. '")' → logprob: -13.00086498260498
    5. '+' → logprob: -13.75086498260498
    6. '[' → logprob: -14.37586498260498
    7. ')+' → logprob: -14.62586498260498
    8. '       ' → logprob: -14.75086498260498
    9. '```' → logprob: -15.12586498260498
    10. '  ' → logprob: -15.37586498260498

Token 2213: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6965452432632446
    2. 'print' → logprob: -0.6965452432632446
    3. '```' → logprob: -5.696545124053955
    4. ' print' → logprob: -10.571545600891113
    5. '``' → logprob: -12.321545600891113
    6. '	print' → logprob: -13.321545600891113
    7. '`' → logprob: -13.571545600891113
    8. '
' → logprob: -13.571545600891113
    9. '#print' → logprob: -15.321545600891113
    10. '(print' → logprob: -16.196544647216797

Token 2214: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.007053387816995382
    2. '   ' → logprob: -5.007053375244141
    3. '```' → logprob: -8.00705337524414
    4. ' print' → logprob: -12.50705337524414
    5. '``' → logprob: -14.38205337524414
    6. '`' → logprob: -15.00705337524414
    7. '	print' → logprob: -15.38205337524414
    8. '
' → logprob: -16.63205337524414
    9. '#print' → logprob: -17.63205337524414
    10. 'for' → logprob: -18.00705337524414

Token 2215: ' OK' (ID: 11339)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -5.836499985889532e-05
    2. '   ' → logprob: -9.7500581741333
    3. ' print' → logprob: -16.750059127807617
    4. '```' → logprob: -17.000059127807617
    5. '	print' → logprob: -21.875059127807617
    6. '``' → logprob: -23.000059127807617
    7. 'for' → logprob: -23.125059127807617
    8. '`' → logprob: -23.875059127807617
    9. '
' → logprob: -23.875059127807617
    10. '#print' → logprob: -24.500059127807617

Token 2216: ',' (ID: 11)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00253618648275733
    2. '   ' → logprob: -6.002536296844482
    3. '```' → logprob: -9.752535820007324
    4. 'for' → logprob: -13.252535820007324
    5. ' print' → logprob: -14.877535820007324
    6. '``' → logprob: -16.00253677368164
    7. '	print' → logprob: -17.12753677368164
    8. '
' → logprob: -17.25253677368164
    9. '`' → logprob: -17.50253677368164
    10. '#print' → logprob: -18.37753677368164

Token 2217: ' just' (ID: 1327)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -5.200166469876422e-06
    2. '   ' → logprob: -12.250004768371582
    3. '```' → logprob: -15.000004768371582
    4. ' print' → logprob: -17.0000057220459
    5. 'for' → logprob: -19.0000057220459
    6. '``' → logprob: -20.3750057220459
    7. '`' → logprob: -21.6250057220459
    8. '	print' → logprob: -21.7500057220459
    9. '
' → logprob: -22.2500057220459
    10. '#print' → logprob: -23.1250057220459

Token 2218: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00022237090161070228
    2. '   ' → logprob: -8.750222206115723
    3. '```' → logprob: -9.750222206115723
    4. ' print' → logprob: -12.250222206115723
    5. '``' → logprob: -14.625222206115723
    6. '
' → logprob: -15.500222206115723
    7. '	print' → logprob: -16.87522315979004
    8. '#print' → logprob: -18.00022315979004
    9. '       ' → logprob: -18.12522315979004
    10. '_print' → logprob: -18.37522315979004

Token 2219: ' decoded' (ID: 58891)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.004238666035234928
    2. '   ' → logprob: -5.504238605499268
    3. '```' → logprob: -8.754239082336426
    4. ' print' → logprob: -13.754239082336426
    5. 'for' → logprob: -14.629239082336426
    6. '``' → logprob: -14.629239082336426
    7. '`' → logprob: -15.254239082336426
    8. 'decoded' → logprob: -16.25423812866211
    9. '(print' → logprob: -16.62923812866211
    10. '	print' → logprob: -17.12923812866211

Token 2220: ' string' (ID: 1621)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.006960808299481869
    2. '   ' → logprob: -5.006960868835449
    3. 'for' → logprob: -9.00696086883545
    4. '```' → logprob: -9.13196086883545
    5. 'decoded' → logprob: -11.50696086883545
    6. ' print' → logprob: -12.63196086883545
    7. '``' → logprob: -14.13196086883545
    8. '`' → logprob: -15.00696086883545
    9. '	print' → logprob: -16.131959915161133
    10. 'decode' → logprob: -16.381959915161133

Token 2221: ' with' (ID: 483)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.02472485974431038
    2. '   ' → logprob: -3.7747249603271484
    3. '```' → logprob: -6.524724960327148
    4. ' print' → logprob: -12.399724960327148
    5. 'for' → logprob: -12.649724960327148
    6. '``' → logprob: -12.899724960327148
    7. '(print' → logprob: -14.649724960327148
    8. '`' → logprob: -14.649724960327148
    9. ':' → logprob: -15.149724960327148
    10. '	print' → logprob: -15.524724960327148

Token 2222: ' spaces' (ID: 18608)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00017123986617662013
    2. '```' → logprob: -8.875171661376953
    3. ' print' → logprob: -10.625171661376953
    4. '   ' → logprob: -12.750171661376953
    5. '``' → logprob: -13.125171661376953
    6. '
' → logprob: -13.625171661376953
    7. '`' → logprob: -14.750171661376953
    8. 'decoded' → logprob: -15.625171661376953
    9. 'decode' → logprob: -16.000171661376953
    10. ')' → logprob: -16.625171661376953

Token 2223: ' restored' (ID: 45413)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.004202932585030794
    2. '   ' → logprob: -5.504202842712402
    3. '```' → logprob: -9.004202842712402
    4. ' print' → logprob: -14.254202842712402
    5. 'for' → logprob: -14.629202842712402
    6. '``' → logprob: -15.379202842712402
    7. '`' → logprob: -16.00420379638672
    8. '	print' → logprob: -16.37920379638672
    9. '
' → logprob: -17.25420379638672
    10. 'import' → logprob: -19.00420379638672

Token 2224: ' if' (ID: 538)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.02571071870625019
    2. '   ' → logprob: -3.7757108211517334
    3. '```' → logprob: -6.025710582733154
    4. ' print' → logprob: -10.775711059570312
    5. 'for' → logprob: -11.275711059570312
    6. '``' → logprob: -11.775711059570312
    7. '`' → logprob: -12.650711059570312
    8. '	print' → logprob: -13.900711059570312
    9. '       ' → logprob: -15.275711059570312
    10. 'decoded' → logprob: -15.775711059570312

Token 2225: ' any' (ID: 1062)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.25515618920326233
    2. '"' → logprob: -2.5051562786102295
    3. 'True' → logprob: -2.8801562786102295
    4. 'decoded' → logprob: -3.1301562786102295
    5. 'len' → logprob: -3.8801562786102295
    6. 'any' → logprob: -5.25515604019165
    7. '```' → logprob: -5.50515604019165
    8. 'c' → logprob: -5.88015604019165
    9. 'line' → logprob: -5.88015604019165
    10. ''s' → logprob: -6.00515604019165

Token 2226: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.16428539156913757
    2. '   ' → logprob: -1.91428542137146
    3. '```' → logprob: -5.539285182952881
    4. 'for' → logprob: -9.289285659790039
    5. ' print' → logprob: -11.164285659790039
    6. '``' → logprob: -11.539285659790039
    7. '`' → logprob: -12.539285659790039
    8. '	print' → logprob: -13.539285659790039
    9. 'decoded' → logprob: -14.039285659790039
    10. '       ' → logprob: -14.664285659790039

Token 2227: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.031213808804750443
    2. '   ' → logprob: -3.5312137603759766
    3. '```' → logprob: -6.531213760375977
    4. ' print' → logprob: -12.656213760375977
    5. '``' → logprob: -13.906213760375977
    6. '`' → logprob: -14.906213760375977
    7. 'for' → logprob: -15.156213760375977
    8. '	print' → logprob: -15.531213760375977
    9. '
' → logprob: -16.281213760375977
    10. '#print' → logprob: -17.531213760375977

Token 2228: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.008642582222819328
    2. '   ' → logprob: -4.758642673492432
    3. '```' → logprob: -10.508642196655273
    4. ' print' → logprob: -14.258642196655273
    5. '	print' → logprob: -17.133642196655273
    6. '``' → logprob: -17.258642196655273
    7. '`' → logprob: -18.008642196655273
    8. '
' → logprob: -19.133642196655273
    9. 'for' → logprob: -19.633642196655273
    10. '#print' → logprob: -20.258642196655273

Token 2229: '(decoded' (ID: 189285)
  Prédit: 'decoded'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'decoded' → logprob: -0.02324850670993328
    2. '(decoded' → logprob: -3.7732484340667725
    3. ' decoded' → logprob: -12.773248672485352
    4. 'decode' → logprob: -16.27324867248535
    5. 'dec' → logprob: -17.14824867248535
    6. 'Decoded' → logprob: -19.27324867248535
    7. '   ' → logprob: -20.02324867248535
    8. '```' → logprob: -20.14824867248535
    9. '(dec' → logprob: -20.89824867248535
    10. '`' → logprob: -21.27324867248535

Token 2230: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.167648876318708e-05
    2. '")' → logprob: -10.250041961669922
    3. '`)' → logprob: -12.750041961669922
    4. '')' → logprob: -13.625041961669922
    5. ')
' → logprob: -14.250041961669922
    6. '   ' → logprob: -15.000041961669922
    7. ')`' → logprob: -15.000041961669922
    8. ')")' → logprob: -15.125041961669922
    9. ' )' → logprob: -15.625041961669922
    10. '())' → logprob: -15.625041961669922


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 2228
Tokens correctement prédits (1ère position, stricte): 305
Tokens correctement prédits (1ère position, avec adaptation): 347
Tokens correctement prédits (top 10): 1056
Précision stricte (1ère position): 13.69%
Précision adaptée (1ère position): 15.57%
Précision (top 10): 47.40%
================================================================================
