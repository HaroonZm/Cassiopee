================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:03:12
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
for _ in range(n):
    k, p = map(int, input().split())
    winner = k % p
    if winner == 0:
        winner = p
    print(winner)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00038134094211272895
    2. '(n' → logprob: -9.000381469726562
    3. ''' → logprob: -9.500381469726562
    4. '('' → logprob: -10.125381469726562
    5. '```' → logprob: -10.125381469726562
    6. '`' → logprob: -10.750381469726562
    7. '("("' → logprob: -10.750381469726562
    8. '()' → logprob: -11.250381469726562
    9. 'n' → logprob: -11.625381469726562
    10. ')' → logprob: -12.000381469726562

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.08201935887336731
    2. ')' → logprob: -2.582019329071045
    3. '()' → logprob: -6.332019329071045
    4. '(
' → logprob: -7.707019329071045
    5. '())' → logprob: -8.457019805908203
    6. '('' → logprob: -9.332019805908203
    7. ''' → logprob: -9.457019805908203
    8. '`' → logprob: -9.707019805908203
    9. '')' → logprob: -9.707019805908203
    10. '```' → logprob: -10.082019805908203

Token 5: 'for' (ID: 1938)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -1.0521364212036133
    2. 'for' → logprob: -1.3021364212036133
    3. 'if' → logprob: -1.4271364212036133
    4. 's' → logprob: -3.1771364212036133
    5. 'f' → logprob: -4.177136421203613
    6. 'x' → logprob: -4.177136421203613
    7. 'a' → logprob: -4.552136421203613
    8. ')' → logprob: -4.677136421203613
    9. ' ' → logprob: -4.677136421203613
    10. '*' → logprob: -4.927136421203613

Token 6: ' _' (ID: 1175)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.00975313875824213
    2. ' i' → logprob: -5.259753227233887
    3. '  ' → logprob: -6.009753227233887
    4. ' n' → logprob: -6.259753227233887
    5. ' ' → logprob: -9.759753227233887
    6. 'i' → logprob: -10.759753227233887
    7. ''' → logprob: -11.634753227233887
    8. ' ' → logprob: -11.884753227233887
    9. ' ‌' → logprob: -12.009753227233887
    10. '_' → logprob: -12.134753227233887

Token 7: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.006319800857454538
    2. 'in' → logprob: -5.131319999694824
    3. ' ' → logprob: -7.881319999694824
    4. ' i' → logprob: -12.381319999694824
    5. ' n' → logprob: -12.756319999694824
    6. 'n' → logprob: -13.131319999694824
    7. '_' → logprob: -13.756319999694824
    8. '  ' → logprob: -14.381319999694824
    9. ',' → logprob: -15.006319999694824
    10. 'range' → logprob: -15.256319999694824

Token 8: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.3868841528892517
    2. ' range' → logprob: -1.1368842124938965
    3. '	range' → logprob: -12.636883735656738
    4. '_range' → logprob: -13.136883735656738
    5. ' ' → logprob: -13.136883735656738
    6. 'n' → logprob: -13.261883735656738
    7. 'in' → logprob: -13.886883735656738
    8. '(range' → logprob: -14.011883735656738
    9. '_' → logprob: -14.511883735656738
    10. ' n' → logprob: -14.761883735656738

Token 9: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0420190766453743
    2. ' (' → logprob: -3.2920191287994385
    3. '(n' → logprob: -5.542018890380859
    4. '(range' → logprob: -10.79201889038086
    5. ' ' → logprob: -11.16701889038086
    6. '(len' → logprob: -12.04201889038086
    7. '`' → logprob: -13.04201889038086
    8. ' n' → logprob: -13.54201889038086
    9. '(
' → logprob: -13.79201889038086
    10. '  ' → logprob: -13.91701889038086

Token 10: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.029829632490873337
    2. ')' → logprob: -3.654829740524292
    3. ':' → logprob: -5.654829502105713
    4. '):
' → logprob: -11.904829978942871
    5. ' ):' → logprob: -12.529829978942871
    6. ':)' → logprob: -12.779829978942871
    7. '```' → logprob: -13.154829978942871
    8. ''):' → logprob: -13.779829978942871
    9. ' :' → logprob: -13.904829978942871
    10. '():' → logprob: -14.154829978942871

Token 11: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.006165308877825737
    2. '    
' → logprob: -5.381165504455566
    3. ' print' → logprob: -7.256165504455566
    4. ' input' → logprob: -8.131165504455566
    5. '    ' → logprob: -8.756165504455566
    6. 'print' → logprob: -9.256165504455566
    7. '```' → logprob: -9.256165504455566
    8. ' 
' → logprob: -10.006165504455566
    9. ' ' → logprob: -10.381165504455566
    10. 'input' → logprob: -10.631165504455566

Token 12: ' k' (ID: 372)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1483161747455597
    2. 'print' → logprob: -2.6483161449432373
    3. 'data' → logprob: -4.523316383361816
    4. 'text' → logprob: -4.898316383361816
    5. 'x' → logprob: -5.023316383361816
    6. 'line' → logprob: -5.148316383361816
    7. 'input' → logprob: -5.148316383361816
    8. 'name' → logprob: -5.273316383361816
    9. 'a' → logprob: -5.273316383361816
    10. 'word' → logprob: -5.398316383361816

Token 13: ',' (ID: 11)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.19110365211963654
    2. '=' → logprob: -2.81610369682312
    3. ')' → logprob: -3.69110369682312
    4. 'ey' → logprob: -3.81610369682312
    5. ' ' → logprob: -3.81610369682312
    6. 'e' → logprob: -4.941103458404541
    7. '    ' → logprob: -5.191103458404541
    8. ' +=' → logprob: -5.316103458404541
    9. '  ' → logprob: -5.441103458404541
    10. '_' → logprob: -5.566103458404541

Token 14: ' p' (ID: 275)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.784125566482544
    2. 'm' → logprob: -1.284125566482544
    3. ' m' → logprob: -2.409125566482544
    4. 'input' → logprob: -2.659125566482544
    5. ' input' → logprob: -3.909125566482544
    6. 'x' → logprob: -4.159125328063965
    7. 'a' → logprob: -4.284125328063965
    8. ' x' → logprob: -4.909125328063965
    9. ' b' → logprob: -5.159125328063965
    10. 'b' → logprob: -5.409125328063965

Token 15: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.42945805191993713
    2. ' =' → logprob: -1.0544580221176147
    3. ',' → logprob: -7.554458141326904
    4. ')' → logprob: -9.429457664489746
    5. ' ' → logprob: -9.429457664489746
    6. '```' → logprob: -11.804457664489746
    7. '[' → logprob: -11.929457664489746
    8. 'iece' → logprob: -12.054457664489746
    9. '=input' → logprob: -12.179457664489746
    10. 'p' → logprob: -12.429457664489746

Token 16: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.038269154727458954
    2. 'map' → logprob: -3.28826904296875
    3. ' input' → logprob: -9.03826904296875
    4. ' list' → logprob: -10.28826904296875
    5. 'input' → logprob: -10.28826904296875
    6. ' [' → logprob: -11.03826904296875
    7. '[' → logprob: -11.66326904296875
    8. ' ' → logprob: -12.03826904296875
    9. 'list' → logprob: -12.66326904296875
    10. '   ' → logprob: -13.16326904296875

Token 17: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.3573995530605316
    2. '(' → logprob: -1.357399582862854
    3. '(str' → logprob: -3.2323994636535645
    4. '(input' → logprob: -6.6073994636535645
    5. '(lambda' → logprob: -7.3573994636535645
    6. 'int' → logprob: -7.6073994636535645
    7. '[int' → logprob: -7.6073994636535645
    8. '<int' → logprob: -8.732399940490723
    9. 'str' → logprob: -9.107399940490723
    10. '(list' → logprob: -9.357399940490723

Token 18: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.03857463598251343
    2. ',input' → logprob: -3.663574695587158
    3. ',' → logprob: -5.038574695587158
    4. 'input' → logprob: -5.788574695587158
    5. ')' → logprob: -6.163574695587158
    6. '(' → logprob: -7.788574695587158
    7. ' input' → logprob: -9.53857421875
    8. '=input' → logprob: -10.53857421875
    9. '),' → logprob: -11.91357421875
    10. '<input' → logprob: -11.91357421875

Token 19: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.04858953505754471
    2. ' input' → logprob: -3.0485894680023193
    3. ')' → logprob: -13.298589706420898
    4. '(input' → logprob: -15.423589706420898
    5. '=input' → logprob: -16.2985897064209
    6. ',input' → logprob: -16.2985897064209
    7. '	input' → logprob: -17.6735897064209
    8. '<input' → logprob: -18.1735897064209
    9. '[input' → logprob: -18.2985897064209
    10. ' )' → logprob: -18.9235897064209

Token 20: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.00012201975914649665
    2. '()' → logprob: -9.5001220703125
    3. '())' → logprob: -10.0001220703125
    4. ')' → logprob: -13.5001220703125
    5. '()))' → logprob: -16.0001220703125
    6. '()
' → logprob: -16.2501220703125
    7. '()[' → logprob: -16.6251220703125
    8. ' ().' → logprob: -17.2501220703125
    9. '(' → logprob: -17.5001220703125
    10. '());' → logprob: -17.6251220703125

Token 21: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.000264315924141556
    2. 'strip' → logprob: -8.250264167785645
    3. 'rstrip' → logprob: -12.875264167785645
    4. ' split' → logprob: -14.875264167785645
    5. '(split' → logprob: -17.12526512145996
    6. 's' → logprob: -18.62526512145996
    7. ')' → logprob: -18.75026512145996
    8. 'spl' → logprob: -18.87526512145996
    9. 'startswith' → logprob: -19.75026512145996
    10. '```' → logprob: -19.75026512145996

Token 22: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.17237520217895508
    2. '())' → logprob: -2.047375202178955
    3. '))' → logprob: -4.172375202178955
    4. '()' → logprob: -4.297375202178955
    5. '()))' → logprob: -8.547374725341797
    6. '(' → logprob: -11.672374725341797
    7. '())
' → logprob: -11.797374725341797
    8. '`)' → logprob: -11.922374725341797
    9. '')' → logprob: -12.422374725341797
    10. ')")' → logprob: -12.422374725341797

Token 23: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0334506556391716
    2. ')' → logprob: -3.9084506034851074
    3. ':' → logprob: -5.908450603485107
    4. '    
' → logprob: -6.283450603485107
    5. '       ' → logprob: -6.533450603485107
    6. 'print' → logprob: -6.908450603485107
    7. '[' → logprob: -7.033450603485107
    8. '    ' → logprob: -7.283450603485107
    9. '```' → logprob: -7.533450603485107
    10. '\' → logprob: -7.783450603485107

Token 24: ' winner' (ID: 19499)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'result' → logprob: -1.4808764457702637
    2. 's' → logprob: -1.9808764457702637
    3. 'if' → logprob: -2.3558764457702637
    4. ' if' → logprob: -2.3558764457702637
    5. '   ' → logprob: -2.4808764457702637
    6. 'sum' → logprob: -3.1058764457702637
    7. 'a' → logprob: -3.3558764457702637
    8. 'res' → logprob: -3.4808764457702637
    9. ' result' → logprob: -3.4808764457702637
    10. 'print' → logprob: -3.7308764457702637

Token 25: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0557381734251976
    2. '=' → logprob: -3.1807382106781006
    3. 's' → logprob: -4.8057379722595215
    4. '_' → logprob: -5.8057379722595215
    5. ' ' → logprob: -6.9307379722595215
    6. ')' → logprob: -8.68073844909668
    7. '(' → logprob: -9.43073844909668
    8. '_id' → logprob: -10.30573844909668
    9. '_name' → logprob: -10.68073844909668
    10. '(s' → logprob: -10.80573844909668

Token 26: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -1.1963987350463867
    2. ' p' → logprob: -1.3213987350463867
    3. 'k' → logprob: -2.1963987350463867
    4. 'p' → logprob: -2.5713987350463867
    5. '"' → logprob: -2.5713987350463867
    6. ' "' → logprob: -3.3213987350463867
    7. ' max' → logprob: -3.5713987350463867
    8. ''' → logprob: -3.6963987350463867
    9. '"k' → logprob: -3.6963987350463867
    10. ' '' → logprob: -4.196398735046387

Token 27: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.7415705323219299
    2. '%' → logprob: -0.9915705323219299
    3. '+' → logprob: -2.616570472717285
    4. ' if' → logprob: -3.991570472717285
    5. ' ' → logprob: -4.241570472717285
    6. ' +' → logprob: -4.491570472717285
    7. '<|end|>' → logprob: -4.741570472717285
    8. 'if' → logprob: -4.991570472717285
    9. '-' → logprob: -4.991570472717285
    10. '   ' → logprob: -6.116570472717285

Token 28: ' p' (ID: 275)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'p' → logprob: -0.007140382658690214
    2. '2' → logprob: -5.257140159606934
    3. '3' → logprob: -6.632140159606934
    4. '5' → logprob: -8.757140159606934
    5. ' p' → logprob: -8.882140159606934
    6. '4' → logprob: -9.132140159606934
    7. '7' → logprob: -9.507140159606934
    8. '10' → logprob: -9.757140159606934
    9. '9' → logprob: -11.382140159606934
    10. ' ' → logprob: -11.507140159606934

Token 29: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.0556440353393555
    2. '<|end|>' → logprob: -1.9306440353393555
    3. '
' → logprob: -2.4306440353393555
    4. ' if' → logprob: -2.5556440353393555
    5. 'print' → logprob: -2.6806440353393555
    6. '\n' → logprob: -2.6806440353393555
    7. '```' → logprob: -3.3056440353393555
    8. '==' → logprob: -3.3056440353393555
    9. ' ' → logprob: -3.4306440353393555
    10. 'if' → logprob: -3.6806440353393555

Token 30: '   ' (ID: 271)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.540949821472168
    2. '   ' → logprob: -1.790949821472168
    3. '<|end|>' → logprob: -2.165949821472168
    4. '
' → logprob: -2.915949821472168
    5. '\' → logprob: -4.165949821472168
    6. '```' → logprob: -4.290949821472168
    7. ' ' → logprob: -4.540949821472168
    8. '    
' → logprob: -5.165949821472168
    9. '  
' → logprob: -5.290949821472168
    10. ' if' → logprob: -5.415949821472168

Token 31: ' if' (ID: 538)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.2814885675907135
    2. '   ' → logprob: -1.9064885377883911
    3. '<|end|>' → logprob: -3.7814886569976807
    4. ' ' → logprob: -4.156488418579102
    5. 'if' (adapté à ' if') → logprob: -4.156488418579102
    6. ' if' → logprob: -4.281488418579102
    7. '\n' → logprob: -4.906488418579102
    8. '
' → logprob: -5.031488418579102
    9. ' print' → logprob: -5.406488418579102
    10. '```' → logprob: -5.906488418579102

Token 32: ' winner' (ID: 19499)
  Prédit: ' winner'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' winner' → logprob: -0.0008968125330284238
    2. 'winner' → logprob: -7.12589693069458
    3. ' ' → logprob: -9.875896453857422
    4. ' not' → logprob: -10.500896453857422
    5. ' ' → logprob: -12.125896453857422
    6. ' k' → logprob: -12.250896453857422
    7. ' p' → logprob: -13.875896453857422
    8. ' w' → logprob: -14.125896453857422
    9. 'Winner' → logprob: -15.000896453857422
    10. '   ' → logprob: -15.125896453857422

Token 33: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.05915021151304245
    2. '==' → logprob: -3.184150218963623
    3. ':' → logprob: -4.684150218963623
    4. ' !=' → logprob: -5.059150218963623
    5. '!=' → logprob: -8.434149742126465
    6. '>' → logprob: -9.434149742126465
    7. ' :' → logprob: -9.934149742126465
    8. ' ' → logprob: -10.434149742126465
    9. ' >' → logprob: -10.434149742126465
    10. '=' → logprob: -11.559149742126465

Token 34: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3485165536403656
    2. '0' → logprob: -1.223516583442688
    3. ' k' → logprob: -10.723516464233398
    4. '1' → logprob: -10.723516464233398
    5. 'k' → logprob: -11.223516464233398
    6. ' p' → logprob: -11.848516464233398
    7. 'p' → logprob: -12.661016464233398
    8. ' ' → logprob: -14.036016464233398
    9. '=' → logprob: -14.161016464233398
    10. '  ' → logprob: -15.098516464233398

Token 35: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.001555567141622305
    2. ' ' → logprob: -6.501555442810059
    3. '1' → logprob: -10.626555442810059
    4. 'k' → logprob: -11.001555442810059
    5. 'p' → logprob: -11.626555442810059
    6. ' k' → logprob: -14.376555442810059
    7. ' p' → logprob: -14.751555442810059
    8. '2' → logprob: -14.876555442810059
    9. '  ' → logprob: -15.689055442810059
    10. '   ' → logprob: -15.939055442810059

Token 36: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00011486753646750003
    2. ':
' → logprob: -9.125114440917969
    3. ' :' → logprob: -13.125114440917969
    4. '   ' → logprob: -13.375114440917969
    5. '):' → logprob: -13.875114440917969
    6. ':return' → logprob: -14.125114440917969
    7. ':**' → logprob: -15.750114440917969
    8. ':

' → logprob: -16.62511444091797
    9. ':`' → logprob: -16.75011444091797
    10. '       ' → logprob: -17.00011444091797

Token 37: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.47541722655296326
    2. '       ' → logprob: -1.6004172563552856
    3. ' print' → logprob: -1.9754172563552856
    4. 'print' → logprob: -3.600417137145996
    5. '    ' → logprob: -5.100417137145996
    6. ' winner' → logprob: -6.350417137145996
    7. '```' → logprob: -8.225417137145996
    8. '    
' → logprob: -8.225417137145996
    9. '        
' → logprob: -8.350417137145996
    10. '\n' → logprob: -8.350417137145996

Token 38: ' winner' (ID: 19499)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.3419073224067688
    2. ' winner' → logprob: -1.966907262802124
    3. 'print' → logprob: -1.966907262802124
    4. '   ' → logprob: -4.841907501220703
    5. 'winner' (adapté à ' winner') → logprob: -7.091907501220703
    6. '       ' → logprob: -7.591907501220703
    7. '    ' → logprob: -8.591907501220703
    8. ' Winner' → logprob: -9.841907501220703
    9. '```' → logprob: -9.841907501220703
    10. ' continue' → logprob: -10.216907501220703

Token 39: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0047658151015639305
    2. '=' → logprob: -5.37976598739624
    3. ' +=' → logprob: -9.004765510559082
    4. 'print' → logprob: -12.004765510559082
    5. 'p' → logprob: -12.879765510559082
    6. ' ==' → logprob: -13.254765510559082
    7. ' ' → logprob: -13.254765510559082
    8. '=k' → logprob: -13.254765510559082
    9. '=p' → logprob: -13.629765510559082
    10. ' -=' → logprob: -13.629765510559082

Token 40: ' p' (ID: 275)
  Prédit: 'p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'p' → logprob: -3.2378600735682994e-05
    2. ' p' → logprob: -10.375032424926758
    3. '1' → logprob: -15.375032424926758
    4. '0' → logprob: -15.500032424926758
    5. 'k' → logprob: -15.500032424926758
    6. '   ' → logprob: -16.250032424926758
    7. ' ' → logprob: -16.750032424926758
    8. '<p' → logprob: -16.750032424926758
    9. '	p' → logprob: -17.125032424926758
    10. 'winner' → logprob: -17.375032424926758

Token 41: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06859564036130905
    2. 'print' → logprob: -2.8185956478118896
    3. '
' → logprob: -5.4435954093933105
    4. ' print' → logprob: -6.1935954093933105
    5. '    
' → logprob: -9.443595886230469
    6. '	print' → logprob: -9.693595886230469
    7. '```' → logprob: -10.318595886230469
    8. '<|end|>' → logprob: -10.818595886230469
    9. '
' → logprob: -11.318595886230469
    10. ')' → logprob: -12.193595886230469

Token 42: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.3137717545032501
    2. '   ' → logprob: -1.3137717247009277
    3. ' print' → logprob: -7.938771724700928
    4. '    
' → logprob: -9.688772201538086
    5. '<|end|>' → logprob: -10.313772201538086
    6. '
' → logprob: -10.563772201538086
    7. '```' → logprob: -11.438772201538086
    8. ')' → logprob: -11.938772201538086
    9. '	print' → logprob: -12.688772201538086
    10. '(print' → logprob: -12.938772201538086

Token 43: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.31374290585517883
    2. '   ' → logprob: -1.3137428760528564
    3. ' print' → logprob: -7.9387431144714355
    4. '
' → logprob: -9.438742637634277
    5. '    
' → logprob: -11.188742637634277
    6. '<|end|>' → logprob: -11.313742637634277
    7. '	print' → logprob: -12.188742637634277
    8. '```' → logprob: -12.688742637634277
    9. '\n' → logprob: -13.063742637634277
    10. '.print' → logprob: -13.313742637634277

Token 44: '(w' (ID: 7420)
  Prédit: '(w'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(w' → logprob: -3.79811754100956e-05
    2. '(' → logprob: -10.250038146972656
    3. 'w' → logprob: -13.250038146972656
    4. 'winner' → logprob: -14.750038146972656
    5. '()' → logprob: -16.250038146972656
    6. '(win' → logprob: -16.500038146972656
    7. '(f' → logprob: -17.250038146972656
    8. '((' → logprob: -17.500038146972656
    9. '(k' → logprob: -18.000038146972656
    10. ' (' → logprob: -18.125038146972656

Token 45: 'inner' (ID: 6484)
  Prédit: 'inner'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'inner' → logprob: -1.9361264946837764e-07
    2. 'winner' → logprob: -16.5
    3. 'inn' → logprob: -17.25
    4. ' inner' → logprob: -18.5
    5. 'iner' → logprob: -18.75
    6. 'inne' → logprob: -19.125
    7. 'i' → logprob: -19.25
    8. 'inning' → logprob: -20.375
    9. '_inner' → logprob: -20.75
    10. 'inners' → logprob: -20.875

Token 46: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.128163257315464e-07
    2. ')
' → logprob: -15.375
    3. ' )' → logprob: -17.375
    4. '))' → logprob: -17.5
    5. ')`' → logprob: -18.0
    6. '')' → logprob: -19.5
    7. '`)' → logprob: -19.75
    8. '）' → logprob: -20.25
    9. '")' → logprob: -20.625
    10. ')#' → logprob: -21.125


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 44
Tokens correctement prédits (1ère position, stricte): 18
Tokens correctement prédits (1ère position, avec adaptation): 19
Tokens correctement prédits (top 10): 37
Précision stricte (1ère position): 40.91%
Précision adaptée (1ère position): 43.18%
Précision (top 10): 84.09%
================================================================================
