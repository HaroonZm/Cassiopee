================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 16:58:00
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
W, H, C = map(int, input().split())
def gcd(a,b):
    while b:
        a,b = b, a % b
    return a
g = gcd(W, H)
n = (W//g) * (H//g)
print(n * C)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'W' (ID: 54)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' H' (ID: 487)
  → Token d'amorce (pas de prédiction)

Token 3: ',' (ID: 11)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.3279529809951782
    2. ',' → logprob: -1.3279529809951782
    3. ' =' → logprob: -4.827952861785889
    4. ')' → logprob: -6.577952861785889
    5. '*' → logprob: -6.577952861785889
    6. ';' → logprob: -6.952952861785889
    7. '```' → logprob: -6.952952861785889
    8. '.' → logprob: -7.202952861785889
    9. ':' → logprob: -7.577952861785889
    10. '#' → logprob: -9.077953338623047

Token 4: ' C' (ID: 363)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.04735010117292404
    2. ' =' → logprob: -3.1723501682281494
    3. ',' → logprob: -5.54734992980957
    4. ')' → logprob: -8.17234992980957
    5. ';' → logprob: -10.04734992980957
    6. '.' → logprob: -11.04734992980957
    7. ' ' → logprob: -11.04734992980957
    8. ' ,' → logprob: -11.79734992980957
    9. '```' → logprob: -11.79734992980957
    10. 'for' → logprob: -11.92234992980957

Token 5: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.0293425265699625
    2. ',' → logprob: -3.7793424129486084
    3. ' =' → logprob: -5.9043426513671875
    4. '```' → logprob: -6.0293426513671875
    5. ':' → logprob: -7.7793426513671875
    6. '.' → logprob: -9.279342651367188
    7. ')' → logprob: -9.404342651367188
    8. '*' → logprob: -9.529342651367188
    9. '#' → logprob: -9.904342651367188
    10. '`' → logprob: -10.029342651367188

Token 6: ' map' (ID: 4014)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.033446166664361954
    2. '0' → logprob: -4.908446311950684
    3. ' map' → logprob: -5.533446311950684
    4. '224' → logprob: -5.658446311950684
    5. '10' → logprob: -5.783446311950684
    6. 'map' → logprob: -5.908446311950684
    7. '32' → logprob: -6.033446311950684
    8. ' image' → logprob: -6.158446311950684
    9. 'image' → logprob: -7.408446311950684
    10. '256' → logprob: -7.408446311950684

Token 7: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.07875075191259384
    2. '<|end|>' → logprob: -2.8287508487701416
    3. '(lambda' → logprob: -4.5787506103515625
    4. '```' → logprob: -6.3287506103515625
    5. '(int' → logprob: -6.9537506103515625
    6. ' (' → logprob: -7.2037506103515625
    7. '(range' → logprob: -7.7037506103515625
    8. ')' → logprob: -7.9537506103515625
    9. '<|end|>' → logprob: -7.9537506103515625
    10. '(user' → logprob: -8.453750610351562

Token 8: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.00421492476016283
    2. '(' → logprob: -5.754214763641357
    3. 'input' → logprob: -7.379214763641357
    4. ')' → logprob: -8.004215240478516
    5. ' input' → logprob: -10.629215240478516
    6. '<input' → logprob: -11.379215240478516
    7. ',input' → logprob: -11.379215240478516
    8. '('' → logprob: -12.004215240478516
    9. '=input' → logprob: -12.379215240478516
    10. '[input' → logprob: -12.879215240478516

Token 9: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.3869052231311798
    2. ' input' → logprob: -1.1369051933288574
    3. '(input' → logprob: -11.011905670166016
    4. ')' → logprob: -11.011905670166016
    5. ' ' → logprob: -15.011905670166016
    6. ',input' → logprob: -15.386905670166016
    7. '	input' → logprob: -15.511905670166016
    8. '```' → logprob: -15.886905670166016
    9. '<input' → logprob: -16.261905670166016
    10. ' )' → logprob: -16.511905670166016

Token 10: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.44577205181121826
    2. '())' → logprob: -1.1957720518112183
    3. '().' → logprob: -2.945772171020508
    4. '()>' → logprob: -6.445772171020508
    5. '());' → logprob: -7.070772171020508
    6. '();)' → logprob: -8.320772171020508
    7. '()</' → logprob: -8.820772171020508
    8. '()">' → logprob: -8.820772171020508
    9. '(()' → logprob: -8.945772171020508
    10. '()<' → logprob: -8.945772171020508

Token 11: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.005251187365502119
    2. 'strip' → logprob: -5.255251407623291
    3. ' split' → logprob: -11.880250930786133
    4. 'rstrip' → logprob: -12.005250930786133
    5. 'read' → logprob: -12.755250930786133
    6. ')' → logprob: -14.130250930786133
    7. '(split' → logprob: -14.755250930786133
    8. 'startswith' → logprob: -16.380250930786133
    9. 'replace' → logprob: -16.630250930786133
    10. ' strip' → logprob: -16.755250930786133

Token 12: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5955114364624023
    2. '())' → logprob: -0.8455114364624023
    3. '))' → logprob: -4.595511436462402
    4. '()' → logprob: -5.345511436462402
    5. '()))' → logprob: -6.345511436462402
    6. '(' → logprob: -6.845511436462402
    7. '('' → logprob: -7.095511436462402
    8. '`)' → logprob: -7.470511436462402
    9. '')' → logprob: -10.220511436462402
    10. '(()' → logprob: -10.345511436462402

Token 13: 'def' (ID: 1314)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.9942207336425781
    2. ',' → logprob: -1.7442207336425781
    3. '\n' → logprob: -1.9942207336425781
    4. ':' → logprob: -2.994220733642578
    5. '\' → logprob: -2.994220733642578
    6. '*' → logprob: -3.244220733642578
    7. '```' → logprob: -3.869220733642578
    8. '.' → logprob: -3.869220733642578
    9. ')' → logprob: -4.119220733642578
    10. 'x' → logprob: -4.244220733642578

Token 14: ' gcd' (ID: 106918)
  Prédit: ' process'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' process' → logprob: -1.1263347864151
    2. ' ' → logprob: -1.8763347864151
    3. ' dfs' → logprob: -1.8763347864151
    4. ' space' → logprob: -2.5013346672058105
    5. ' main' → logprob: -3.1263346672058105
    6. ' solve' → logprob: -3.5013346672058105
    7. ' my' → logprob: -3.6263346672058105
    8. ' input' → logprob: -4.0013346672058105
    9. '_' → logprob: -4.0013346672058105
    10. ' calculate' → logprob: -4.0013346672058105

Token 15: '(a' (ID: 6271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.19322429597377777
    2. '(a' → logprob: -2.0682241916656494
    3. '_' → logprob: -3.1932241916656494
    4. '(x' → logprob: -5.1932244300842285
    5. '(n' → logprob: -7.9432244300842285
    6. 'a' → logprob: -8.19322395324707
    7. '(A' → logprob: -8.56822395324707
    8. '_(' → logprob: -8.56822395324707
    9. 'def' → logprob: -8.69322395324707
    10. '(_' → logprob: -8.81822395324707

Token 16: ',b' (ID: 17568)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0016466111410409212
    2. ',a' → logprob: -7.126646518707275
    3. ' ,' → logprob: -7.251646518707275
    4. ',b' → logprob: -9.501646995544434
    5. ')' → logprob: -11.251646995544434
    6. ',n' → logprob: -11.376646995544434
    7. 'a' → logprob: -11.501646995544434
    8. '(a' → logprob: -11.876646995544434
    9. ',)' → logprob: -13.001646995544434
    10. '_,' → logprob: -13.251646995544434

Token 17: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.2597120702266693
    2. ')' → logprob: -1.5097121000289917
    3. ',' → logprob: -5.009712219238281
    4. '(a' → logprob: -7.759712219238281
    5. '):
' → logprob: -8.634712219238281
    6. ' ):' → logprob: -8.884712219238281
    7. 'a' → logprob: -9.634712219238281
    8. ',a' → logprob: -9.884712219238281
    9. '),' → logprob: -10.134712219238281
    10. ')>' → logprob: -10.134712219238281

Token 18: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.28607821464538574
    2. ':' → logprob: -1.5360782146453857
    3. ' ' → logprob: -4.661078453063965
    4. ' :' → logprob: -5.036078453063965
    5. ' return' → logprob: -5.411078453063965
    6. '```' → logprob: -5.536078453063965
    7. ' if' → logprob: -5.911078453063965
    8. ':return' → logprob: -6.411078453063965
    9. ' 
' → logprob: -7.036078453063965
    10. '    ' → logprob: -7.536078453063965

Token 19: ' while' (ID: 2049)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.25863441824913025
    2. ' if' → logprob: -1.6336344480514526
    3. ' return' → logprob: -4.133634567260742
    4. ' while' → logprob: -4.633634567260742
    5. ' 
' → logprob: -6.133634567260742
    6. ' \' → logprob: -6.383634567260742
    7. '```' → logprob: -6.883634567260742
    8. '    ' → logprob: -8.133634567260742
    9. '    
' → logprob: -8.383634567260742
    10. 'if' → logprob: -8.383634567260742

Token 20: ' b' (ID: 287)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.4302559494972229
    2. ' b' → logprob: -1.3052558898925781
    3. 'a' → logprob: -2.805255889892578
    4. 'b' → logprob: -4.055255889892578
    5. ' ' → logprob: -7.305255889892578
    6. '(a' → logprob: -10.430255889892578
    7. ' (' → logprob: -11.930255889892578
    8. ' not' → logprob: -12.055255889892578
    9. '_a' → logprob: -12.305255889892578
    10. ' gcd' → logprob: -12.430255889892578

Token 21: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.2757151424884796
    2. ' !=' → logprob: -1.5257151126861572
    3. '!=' → logprob: -4.400715351104736
    4. '>' → logprob: -5.400715351104736
    5. ' >' → logprob: -6.025715351104736
    6. ' and' → logprob: -6.150715351104736
    7. ':
' → logprob: -6.650715351104736
    8. 'and' → logprob: -8.150714874267578
    9. '<|end|>' → logprob: -8.775714874267578
    10. ' :' → logprob: -8.900714874267578

Token 22: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.08041509985923767
    2. 'a' → logprob: -2.8304150104522705
    3. ' a' → logprob: -4.95541524887085
    4. '   ' → logprob: -5.08041524887085
    5. '    ' → logprob: -6.58041524887085
    6. ' return' → logprob: -7.58041524887085
    7. '```' → logprob: -7.83041524887085
    8. '<|end|>' → logprob: -7.83041524887085
    9. 'n' → logprob: -7.95541524887085
    10. ' 
' → logprob: -8.455414772033691

Token 23: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' (adapté à ' a') → logprob: -0.2520906627178192
    2. ' a' → logprob: -1.5020906925201416
    3. '   ' → logprob: -9.127090454101562
    4. '       ' → logprob: -10.877090454101562
    5. '	a' → logprob: -11.252090454101562
    6. '```' → logprob: -11.252090454101562
    7. '>a' → logprob: -13.002090454101562
    8. '    ' → logprob: -13.127090454101562
    9. 't' → logprob: -13.752090454101562
    10. ' ' → logprob: -14.752090454101562

Token 24: ',b' (ID: 17568)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.010349960997700691
    2. '%' → logprob: -5.510349750518799
    3. '%=' → logprob: -5.510349750518799
    4. ' %=' → logprob: -7.135349750518799
    5. '%b' → logprob: -7.760349750518799
    6. '%,' → logprob: -8.010350227355957
    7. ',b' → logprob: -8.135350227355957
    8. ' ,' → logprob: -8.385350227355957
    9. '=' → logprob: -9.385350227355957
    10. ' %' → logprob: -10.885350227355957

Token 25: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.02976311184465885
    2. ' =' → logprob: -3.5297632217407227
    3. '=a' → logprob: -11.654763221740723
    4. '=b' → logprob: -13.029763221740723
    5. ',' → logprob: -14.779763221740723
    6. '=
' → logprob: -15.029763221740723
    7. '   ' → logprob: -15.029763221740723
    8. ' ' → logprob: -16.029762268066406
    9. '=

' → logprob: -16.404762268066406
    10. '=s' → logprob: -16.654762268066406

Token 26: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.2014141082763672
    2. 'b' → logprob: -1.7014141082763672
    3. ' ' → logprob: -14.451414108276367
    4. '   ' → logprob: -15.576414108276367
    5. ' ' → logprob: -16.701414108276367
    6. '	b' → logprob: -17.201414108276367
    7. '    ' → logprob: -17.326414108276367
    8. '>b' → logprob: -17.826414108276367
    9. '```' → logprob: -17.951414108276367
    10. '(b' → logprob: -18.201414108276367

Token 27: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.017619384452700615
    2. ',a' → logprob: -4.642619609832764
    3. ' ,' → logprob: -5.517619609832764
    4. 'a' → logprob: -6.267619609832764
    5. ' a' → logprob: -6.267619609832764
    6. ',b' → logprob: -11.517619132995605
    7. ' ' → logprob: -11.642619132995605
    8. '```' → logprob: -13.517619132995605
    9. ' b' → logprob: -14.392619132995605
    10. 'b' → logprob: -15.267619132995605

Token 28: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.001170225441455841
    2. ' a' → logprob: -6.7511701583862305
    3. '	a' → logprob: -19.501171112060547
    4. '<|end|>' → logprob: -19.626171112060547
    5. '>a' → logprob: -20.501171112060547
    6. ' ' → logprob: -21.001171112060547
    7. '   ' → logprob: -21.501171112060547
    8. '\a' → logprob: -22.001171112060547
    9. ')a' → logprob: -22.126171112060547
    10. '_a' → logprob: -22.501171112060547

Token 29: ' %' (ID: 1851)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '%' → logprob: -0.496066689491272
    2. 'a' → logprob: -0.996066689491272
    3. ' %' → logprob: -3.9960665702819824
    4. ' a' → logprob: -6.371066570281982
    5. '<|end|>' → logprob: -6.496066570281982
    6. '%b' → logprob: -10.37106704711914
    7. ' ' → logprob: -10.62106704711914
    8. '%c' → logprob: -11.12106704711914
    9. '%=' → logprob: -11.12106704711914
    10. 'mod' → logprob: -11.49606704711914

Token 30: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -1.306760805164231e-05
    2. ' b' → logprob: -11.25001335144043
    3. '%b' → logprob: -22.25001335144043
    4. '	b' → logprob: -22.37501335144043
    5. ' ' → logprob: -22.50001335144043
    6. '<|end|>' → logprob: -22.87501335144043
    7. ')b' → logprob: -23.75001335144043
    8. '>b' → logprob: -23.75001335144043
    9. '   ' → logprob: -24.00001335144043
    10. '```' → logprob: -24.50001335144043

Token 31: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 32: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.1641098260879517
    2. 'return' → logprob: -1.2891098260879517
    3. '<|end|>' → logprob: -1.9141098260879517
    4. 'a' → logprob: -2.164109706878662
    5. ' return' → logprob: -3.414109706878662
    6. ' ' → logprob: -3.539109706878662
    7. '```' → logprob: -3.664109706878662
    8. '\n' → logprob: -4.539109706878662
    9. ' 
' → logprob: -4.664109706878662
    10. ')' → logprob: -4.914109706878662

Token 33: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.582278311252594
    2. 'a' → logprob: -0.832278311252594
    3. '   ' → logprob: -5.707278251647949
    4. ' return' → logprob: -5.832278251647949
    5. ' a' → logprob: -10.08227825164795
    6. ':return' → logprob: -12.08227825164795
    7. '```' → logprob: -12.08227825164795
    8. '	return' → logprob: -12.58227825164795
    9. ' ' → logprob: -12.70727825164795
    10. 'Return' → logprob: -12.95727825164795

Token 34: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.01814994215965271
    2. ' a' → logprob: -4.0181498527526855
    3. '	a' → logprob: -18.893150329589844
    4. '   ' → logprob: -19.143150329589844
    5. ' ' → logprob: -19.393150329589844
    6. '```' → logprob: -21.143150329589844
    7. '>a' → logprob: -21.518150329589844
    8. ''a' → logprob: -21.768150329589844
    9. '    ' → logprob: -22.018150329589844
    10. ')a' → logprob: -22.018150329589844

Token 35: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -1.0944236516952515
    2. 'g' → logprob: -1.4694236516952515
    3. 'n' → logprob: -2.094423770904541
    4. '\n' → logprob: -2.344423770904541
    5. 'W' → logprob: -2.969423770904541
    6. 'def' → logprob: -3.469423770904541
    7. '```' → logprob: -3.844423770904541
    8. 'newline' → logprob: -3.969423770904541
    9. 'w' → logprob: -4.219423770904541
    10. '' → logprob: -4.344423770904541

Token 36: 'g' (ID: 70)
  Prédit: 'g'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'g' → logprob: -1.5309386253356934
    2. 'w' → logprob: -1.7809386253356934
    3. 'n' → logprob: -1.9059386253356934
    4. 'h' → logprob: -2.2809386253356934
    5. 'x' → logprob: -2.9059386253356934
    6. 'def' → logprob: -3.1559386253356934
    7. 'r' → logprob: -3.1559386253356934
    8. 'l' → logprob: -3.5309386253356934
    9. 'print' → logprob: -3.6559386253356934
    10. 'k' → logprob: -3.9059386253356934

Token 37: ' =' (ID: 314)
  Prédit: 'cd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cd' → logprob: -0.013639183714985847
    2. 'c' → logprob: -5.513638973236084
    3. '=g' → logprob: -5.513638973236084
    4. '=' → logprob: -5.763638973236084
    5. ' =' → logprob: -7.513638973236084
    6. 'cdf' → logprob: -7.888638973236084
    7. '=c' → logprob: -8.263639450073242
    8. 'g' → logprob: -8.763639450073242
    9. '=C' → logprob: -8.763639450073242
    10. '_c' → logprob: -8.888639450073242

Token 38: ' gcd' (ID: 106918)
  Prédit: 'g'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'g' → logprob: -0.007742085959762335
    2. 'W' → logprob: -5.132741928100586
    3. ' gcd' → logprob: -6.382741928100586
    4. ' W' → logprob: -9.757741928100586
    5. ' g' → logprob: -10.007741928100586
    6. 'G' → logprob: -12.007741928100586
    7. 'C' → logprob: -12.507741928100586
    8. 'w' → logprob: -12.507741928100586
    9. 'c' → logprob: -13.507741928100586
    10. '(g' → logprob: -14.507741928100586

Token 39: '(W' (ID: 26031)
  Prédit: '(W'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(W' → logprob: -0.000318065780447796
    2. '(' → logprob: -8.12531852722168
    3. '(C' → logprob: -11.75031852722168
    4. 'W' → logprob: -12.12531852722168
    5. '(w' → logprob: -12.25031852722168
    6. '(g' → logprob: -13.50031852722168
    7. '(H' → logprob: -13.87531852722168
    8. '(`' → logprob: -14.87531852722168
    9. ')' → logprob: -15.12531852722168
    10. '(G' → logprob: -15.50031852722168

Token 40: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00163662014529109
    2. ',H' → logprob: -6.876636505126953
    3. ' ,' → logprob: -7.626636505126953
    4. ',W' → logprob: -9.376636505126953
    5. ',g' → logprob: -10.876636505126953
    6. ',C' → logprob: -11.501636505126953
    7. ',G' → logprob: -14.251636505126953
    8. ',
' → logprob: -15.001636505126953
    9. '`,' → logprob: -15.501636505126953
    10. '，' → logprob: -15.876636505126953

Token 41: ' H' (ID: 487)
  Prédit: 'H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.0010407903464511037
    2. ' H' → logprob: -6.876040935516357
    3. 'C' → logprob: -11.7510404586792
    4. ')' → logprob: -16.626041412353516
    5. ' ' → logprob: -16.876041412353516
    6. '   ' → logprob: -17.626041412353516
    7. '  ' → logprob: -18.751041412353516
    8. 'g' → logprob: -19.376041412353516
    9. ' C' → logprob: -19.376041412353516
    10. '`' → logprob: -19.626041412353516

Token 42: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.511406809295295e-06
    2. ')
' → logprob: -12.125006675720215
    3. '))' → logprob: -14.875006675720215
    4. ' )' → logprob: -15.125006675720215
    5. '),' → logprob: -17.0000057220459
    6. ')

' → logprob: -17.0000057220459
    7. '`)' → logprob: -17.3750057220459
    8. '```' → logprob: -17.3750057220459
    9. ')#' → logprob: -17.5000057220459
    10. ')`' → logprob: -17.5000057220459

Token 43: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -1.2268201112747192
    2. '/' → logprob: -1.4768201112747192
    3. 'print' → logprob: -2.3518199920654297
    4. '\n' → logprob: -2.3518199920654297
    5. '*' → logprob: -2.4768199920654297
    6. ')' → logprob: -3.6018199920654297
    7. ',
' → logprob: -3.8518199920654297
    8. '\' → logprob: -4.22681999206543
    9. ',' → logprob: -4.22681999206543
    10. '+' → logprob: -4.47681999206543

Token 44: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.6246520280838013
    2. '=' → logprob: -0.8746520280838013
    3. '/' → logprob: -4.374651908874512
    4. 'o' → logprob: -4.749651908874512
    5. '//' → logprob: -5.249651908874512
    6. '*' → logprob: -5.249651908874512
    7. 'um' → logprob: -5.624651908874512
    8. ' /' → logprob: -5.749651908874512
    9. ' ' → logprob: -6.249651908874512
    10. 'ext' → logprob: -6.749651908874512

Token 45: ' (' (ID: 350)
  Prédit: 'W'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'W' → logprob: -1.1765844821929932
    2. 'C' → logprob: -1.3015844821929932
    3. ' W' → logprob: -1.5515844821929932
    4. ' C' → logprob: -2.176584482192993
    5. '(W' → logprob: -2.926584482192993
    6. ' (' → logprob: -3.801584482192993
    7. 'g' → logprob: -4.551584243774414
    8. '(C' → logprob: -5.676584243774414
    9. ' g' → logprob: -6.801584243774414
    10. '(' → logprob: -7.301584243774414

Token 46: 'W' (ID: 54)
  Prédit: 'W'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'W' → logprob: -0.0024594836868345737
    2. '(W' → logprob: -6.627459526062012
    3. ' W' → logprob: -7.502459526062012
    4. ' (' → logprob: -8.877459526062012
    5. 'C' → logprob: -9.002459526062012
    6. '(' → logprob: -9.002459526062012
    7. ')' → logprob: -9.377459526062012
    8. ' ' → logprob: -10.377459526062012
    9. '   ' → logprob: -11.127459526062012
    10. 'g' → logprob: -11.252459526062012

Token 47: '//' (ID: 393)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.23420321941375732
    2. ' *' → logprob: -2.234203338623047
    3. '+' → logprob: -3.484203338623047
    4. ' +' → logprob: -3.734203338623047
    5. '-' → logprob: -3.859203338623047
    6. '//' → logprob: -4.109203338623047
    7. ' //' → logprob: -5.234203338623047
    8. ' -' → logprob: -5.734203338623047
    9. ' ' → logprob: -7.484203338623047
    10. ')' → logprob: -8.859203338623047

Token 48: 'g' (ID: 70)
  Prédit: 'g'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'g' → logprob: -3.3213025744771585e-05
    2. ' g' → logprob: -10.375033378601074
    3. 'H' → logprob: -13.875033378601074
    4. ')' → logprob: -14.625033378601074
    5. 'C' → logprob: -15.250033378601074
    6. ' ' → logprob: -15.625033378601074
    7. '   ' → logprob: -16.000032424926758
    8. '	g' → logprob: -16.875032424926758
    9. '  ' → logprob: -17.875032424926758
    10. 'w' → logprob: -18.375032424926758

Token 49: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.09858188778162003
    2. '*' → logprob: -3.2235817909240723
    3. ' *' → logprob: -3.4735817909240723
    4. ')*' → logprob: -4.223581790924072
    5. ' +' → logprob: -5.973581790924072
    6. ')*(' → logprob: -6.348581790924072
    7. ' )' → logprob: -6.598581790924072
    8. '+' → logprob: -6.598581790924072
    9. '*)' → logprob: -7.598581790924072
    10. ' -' → logprob: -7.723581790924072

Token 50: ' *' (ID: 425)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.08310777693986893
    2. '+' → logprob: -3.0831077098846436
    3. ' *' → logprob: -4.083107948303223
    4. ' +' → logprob: -4.083107948303223
    5. '*C' → logprob: -10.083107948303223
    6. ')' → logprob: -10.208107948303223
    7. ',' → logprob: -10.833107948303223
    8. '*)' → logprob: -10.958107948303223
    9. '*g' → logprob: -10.958107948303223
    10. '+C' → logprob: -11.333107948303223

Token 51: ' (' (ID: 350)
  Prédit: '(H'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(H' → logprob: -0.010077386163175106
    2. 'H' → logprob: -4.885077476501465
    3. '(C' → logprob: -6.635077476501465
    4. ' (' → logprob: -7.260077476501465
    5. 'C' → logprob: -8.385077476501465
    6. '(' → logprob: -8.760077476501465
    7. ' H' → logprob: -10.135077476501465
    8. '((' → logprob: -11.260077476501465
    9. 'g' → logprob: -11.760077476501465
    10. ' ' → logprob: -14.135077476501465

Token 52: 'H' (ID: 39)
  Prédit: 'H'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'H' → logprob: -0.006429840810596943
    2. '(H' → logprob: -5.256429672241211
    3. 'C' → logprob: -7.006429672241211
    4. ' H' → logprob: -8.631429672241211
    5. '(C' → logprob: -10.256429672241211
    6. ' (' → logprob: -10.506429672241211
    7. '(' → logprob: -10.756429672241211
    8. 'g' → logprob: -10.881429672241211
    9. '   ' → logprob: -13.381429672241211
    10. ' ' → logprob: -13.631429672241211

Token 53: '//' (ID: 393)
  Prédit: '//'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '//' → logprob: -0.0005317062605172396
    2. ' //' → logprob: -7.6255316734313965
    3. ')//' → logprob: -10.750532150268555
    4. ')' → logprob: -11.375532150268555
    5. '-' → logprob: -11.625532150268555
    6. '```' → logprob: -15.000532150268555
    7. '//=' → logprob: -15.500532150268555
    8. ' -' → logprob: -15.625532150268555
    9. '`' → logprob: -15.875532150268555
    10. '#' → logprob: -16.000532150268555

Token 54: 'g' (ID: 70)
  Prédit: 'g'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'g' → logprob: -3.7697225252486533e-06
    2. ' g' → logprob: -13.000003814697266
    3. ')' → logprob: -13.875003814697266
    4. '<|end|>' → logprob: -14.875003814697266
    5. ' ' → logprob: -15.875003814697266
    6. '>' → logprob: -17.375003814697266
    7. '   ' → logprob: -17.875003814697266
    8. '...' → logprob: -18.250003814697266
    9. '  ' → logprob: -19.000003814697266
    10. 'b' → logprob: -19.000003814697266

Token 55: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.015762288123369217
    2. '*' → logprob: -4.5157623291015625
    3. ' -' → logprob: -6.5157623291015625
    4. ')*' → logprob: -6.8907623291015625
    5. '-' → logprob: -7.2657623291015625
    6. ' )' → logprob: -7.2657623291015625
    7. ' *' → logprob: -7.3907623291015625
    8. '*)' → logprob: -9.640762329101562
    9. ')-' → logprob: -9.765762329101562
    10. '#' → logprob: -11.640762329101562

Token 56: 'print' (ID: 1598)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.7268189787864685
    2. '-' → logprob: -0.7268189787864685
    3. 'print' → logprob: -4.351819038391113
    4. ' -' → logprob: -4.726819038391113
    5. ' *' → logprob: -5.101819038391113
    6. ')' → logprob: -6.351819038391113
    7. '+' → logprob: -6.476819038391113
    8. '#' → logprob: -8.226819038391113
    9. ' ' → logprob: -8.351819038391113
    10. 'n' → logprob: -8.476819038391113

Token 57: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.14329726994037628
    2. '(n' → logprob: -2.0182971954345703
    3. '((' → logprob: -7.76829719543457
    4. '('' → logprob: -9.39329719543457
    5. '("("' → logprob: -10.14329719543457
    6. '()' → logprob: -10.64329719543457
    7. '(s' → logprob: -11.89329719543457
    8. 'n' → logprob: -12.14329719543457
    9. '(max' → logprob: -12.39329719543457
    10. '("' → logprob: -12.39329719543457

Token 58: ' *' (ID: 425)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -5.836499985889532e-05
    2. ' )' → logprob: -10.5000581741333
    3. '))' → logprob: -11.5000581741333
    4. '-' → logprob: -11.6250581741333
    5. '*' → logprob: -12.0000581741333
    6. '**' → logprob: -13.8750581741333
    7. '//' → logprob: -13.8750581741333
    8. ')`' → logprob: -14.2500581741333
    9. '+' → logprob: -14.6250581741333
    10. ')**' → logprob: -15.0000581741333

Token 59: ' C' (ID: 363)
  Prédit: '(C'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(C' → logprob: -0.5015235543251038
    2. 'C' → logprob: -1.376523494720459
    3. ' (' → logprob: -3.126523494720459
    4. '2' → logprob: -3.251523494720459
    5. 'g' → logprob: -3.626523494720459
    6. ' C' → logprob: -3.876523494720459
    7. '(' → logprob: -5.126523494720459
    8. ' ' → logprob: -6.001523494720459
    9. '(g' → logprob: -7.001523494720459
    10. '(W' → logprob: -7.251523494720459

Token 60: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.621933451038785e-05
    2. ' )' → logprob: -10.125056266784668
    3. '))' → logprob: -11.500056266784668
    4. '*' → logprob: -12.375056266784668
    5. ')`' → logprob: -14.750056266784668
    6. '*)' → logprob: -15.000056266784668
    7. ')
' → logprob: -15.250056266784668
    8. '`)' → logprob: -15.375056266784668
    9. ')))' → logprob: -16.37505531311035
    10. '**' → logprob: -16.37505531311035


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 58
Tokens correctement prédits (1ère position, stricte): 19
Tokens correctement prédits (1ère position, avec adaptation): 21
Tokens correctement prédits (top 10): 50
Précision stricte (1ère position): 32.76%
Précision adaptée (1ère position): 36.21%
Précision (top 10): 86.21%
================================================================================
