================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:17:08
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def trailing_zeros_factorial(n):
    count = 0
    i = 5
    while i <= n:
        count += n // i
        i *= 5
    return count

while True:
    n = int(input())
    if n == 0:
        break
    print(trailing_zeros_factorial(n))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' trailing' (ID: 57985)
  → Token d'amorce (pas de prédiction)

Token 2: '_' (ID: 62)
  → Token d'amorce (pas de prédiction)

Token 3: 'zeros' (ID: 24095)
  Prédit: 'spaces'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'spaces' → logprob: -1.0173784494400024
    2. 'wh' → logprob: -1.3923784494400024
    3. 'zeros' → logprob: -1.8923784494400024
    4. 'space' → logprob: -1.8923784494400024
    5. 'underscore' → logprob: -3.142378330230713
    6. 'zero' → logprob: -3.267378330230713
    7. 'sp' → logprob: -6.642378330230713
    8. 'stop' → logprob: -6.642378330230713
    9. 'newline' → logprob: -6.892378330230713
    10. 'slash' → logprob: -7.142378330230713

Token 4: '_factor' (ID: 43757)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.007212818134576082
    2. '_' → logprob: -5.2572126388549805
    3. '(:' → logprob: -7.2572126388549805
    4. '(_:' → logprob: -7.5072126388549805
    5. '():' → logprob: -8.38221263885498
    6. '```' → logprob: -8.38221263885498
    7. '_:' → logprob: -9.38221263885498
    8. '(n' → logprob: -10.38221263885498
    9. '(_' → logprob: -10.50721263885498
    10. ':' → logprob: -10.50721263885498

Token 5: 'ial' (ID: 563)
  Prédit: 'ial'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ial' → logprob: -0.002915788209065795
    2. '_' → logprob: -6.752915859222412
    3. '```' → logprob: -6.752915859222412
    4. 'ialize' → logprob: -8.127915382385254
    5. 'i' → logprob: -9.502915382385254
    6. '__' → logprob: -9.752915382385254
    7. 'ion' → logprob: -10.252915382385254
    8. 's' → logprob: -11.002915382385254
    9. 'ials' → logprob: -11.127915382385254
    10. 'def' → logprob: -11.252915382385254

Token 6: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0005819845828227699
    2. '(:' → logprob: -7.625582218170166
    3. '(n' → logprob: -10.000581741333008
    4. '_' → logprob: -11.125581741333008
    5. '(_:' → logprob: -11.625581741333008
    6. '```' → logprob: -12.125581741333008
    7. '():' → logprob: -12.250581741333008
    8. ' (' → logprob: -12.375581741333008
    9. '(
' → logprob: -13.250581741333008
    10. '(x' → logprob: -13.500581741333008

Token 7: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.018300358206033707
    2. ')' → logprob: -4.018300533294678
    3. ':' → logprob: -8.89330005645752
    4. ''):' → logprob: -12.14330005645752
    5. '):
' → logprob: -13.14330005645752
    6. ':)' → logprob: -13.39330005645752
    7. '```' → logprob: -14.26830005645752
    8. '**' → logprob: -14.64330005645752
    9. ')：' → logprob: -14.76830005645752
    10. '）：' → logprob: -14.89330005645752

Token 8: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0015744947595521808
    2. '   ' → logprob: -7.001574516296387
    3. '():' → logprob: -7.751574516296387
    4. '```' → logprob: -9.501574516296387
    5. ':
' → logprob: -10.126574516296387
    6. '':' → logprob: -10.626574516296387
    7. '(' → logprob: -10.751574516296387
    8. '":' → logprob: -10.876574516296387
    9. ':**' → logprob: -11.251574516296387
    10. '):' → logprob: -11.751574516296387

Token 9: ' count' (ID: 3605)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.15246492624282837
    2. '```' → logprob: -2.0274648666381836
    3. ':' → logprob: -6.027464866638184
    4. '``' → logprob: -6.652464866638184
    5. ' ' → logprob: -7.277464866638184
    6. '    ' → logprob: -7.277464866638184
    7. '_' → logprob: -7.277464866638184
    8. '`' → logprob: -7.652464866638184
    9. '       ' → logprob: -7.652464866638184
    10. '"""' → logprob: -7.777464866638184

Token 10: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.20620979368686676
    2. ' =' → logprob: -1.8312097787857056
    3. '=' → logprob: -3.831209897994995
    4. '  ' → logprob: -6.706209659576416
    5. ' ' → logprob: -6.956209659576416
    6. '_space' → logprob: -7.206209659576416
    7. '_=' → logprob: -7.706209659576416
    8. ' +=' → logprob: -8.081210136413574
    9. '(' → logprob: -8.331210136413574
    10. ')' → logprob: -9.081210136413574

Token 11: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5759819746017456
    2. '0' → logprob: -0.8259819746017456
    3. ' n' → logprob: -10.450982093811035
    4. 'n' → logprob: -11.325982093811035
    5. '  ' → logprob: -14.200982093811035
    6. '   ' → logprob: -14.450982093811035
    7. '1' → logprob: -16.32598114013672
    8. ' ' → logprob: -16.57598114013672
    9. '```' → logprob: -17.07598114013672
    10. '    ' → logprob: -17.32598114013672

Token 12: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00645375857129693
    2. 'n' → logprob: -5.381453990936279
    3. ' ' → logprob: -6.881453990936279
    4. ' n' → logprob: -7.131453990936279
    5. 'int' → logprob: -12.631453514099121
    6. '   ' → logprob: -14.256453514099121
    7. '```' → logprob: -14.631453514099121
    8. '1' → logprob: -14.756453514099121
    9. '(n' → logprob: -15.131453514099121
    10. '  ' → logprob: -15.631453514099121

Token 13: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5865960121154785
    2. ' while' → logprob: -1.8365960121154785
    3. '```' → logprob: -2.2115960121154785
    4. '
' → logprob: -3.4615960121154785
    5. ' ' → logprob: -3.7115960121154785
    6. '     
' → logprob: -4.2115960121154785
    7. '    ' → logprob: -4.3365960121154785
    8. '`' → logprob: -4.3365960121154785
    9. ' 
' → logprob: -4.3365960121154785
    10. '   
' → logprob: -4.4615960121154785

Token 14: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08068345487117767
    2. ' while' → logprob: -3.330683469772339
    3. 'while' → logprob: -4.33068323135376
    4. '    
' → logprob: -4.83068323135376
    5. '```' → logprob: -5.58068323135376
    6. ' for' → logprob: -5.58068323135376
    7. ' ' → logprob: -6.20568323135376
    8. 'for' → logprob: -6.33068323135376
    9. ' 
' → logprob: -6.45568323135376
    10. 'i' → logprob: -6.70568323135376

Token 15: ' i' (ID: 575)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.1482679843902588
    2. 'while' → logprob: -1.2732679843902588
    3. 'for' → logprob: -1.2732679843902588
    4. ' for' → logprob: -3.023267984390259
    5. ' while' → logprob: -3.273267984390259
    6. '```' → logprob: -3.648267984390259
    7. 'i' (adapté à ' i') → logprob: -5.27326774597168
    8. '`' → logprob: -6.02326774597168
    9. '    ' → logprob: -7.02326774597168
    10. ' i' → logprob: -7.39826774597168

Token 16: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.18091580271720886
    2. '=' → logprob: -1.8059158325195312
    3. ' ' → logprob: -7.430915832519531
    4. ' +=' → logprob: -7.680915832519531
    5. '  ' → logprob: -10.180915832519531
    6. ' *=' → logprob: -10.180915832519531
    7. '   ' → logprob: -11.305915832519531
    8. '<|end|>' → logprob: -12.055915832519531
    9. ' <<=' → logprob: -12.680915832519531
    10. '    ' → logprob: -13.055915832519531

Token 17: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2811839282512665
    2. '5' → logprob: -1.4061839580535889
    3. ' n' → logprob: -11.281184196472168
    4. 'n' → logprob: -11.281184196472168
    5. '```' → logprob: -12.781184196472168
    6. '  ' → logprob: -13.156184196472168
    7. '   ' → logprob: -13.531184196472168
    8. '1' → logprob: -14.656184196472168
    9. '    ' → logprob: -14.906184196472168
    10. ' ' → logprob: -15.031184196472168

Token 18: '5' (ID: 20)
  Prédit: '5'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -3.2020991056924686e-05
    2. ' ' → logprob: -10.375032424926758
    3. '```' → logprob: -14.375032424926758
    4. '   ' → logprob: -16.375032424926758
    5. 'n' → logprob: -16.500032424926758
    6. '  ' → logprob: -17.875032424926758
    7. '>' → logprob: -18.500032424926758
    8. '`' → logprob: -18.625032424926758
    9. '1' → logprob: -18.625032424926758
    10. '۵' → logprob: -18.750032424926758

Token 19: '
' (ID: 198)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.9546632766723633
    2. ' while' → logprob: -1.0796632766723633
    3. '<|end|>' → logprob: -2.2046632766723633
    4. '   ' → logprob: -2.3296632766723633
    5. '```' → logprob: -3.9546632766723633
    6. ' ' → logprob: -4.704663276672363
    7. ')' → logprob: -5.079663276672363
    8. '<|end|>' → logprob: -5.079663276672363
    9. ':' → logprob: -5.204663276672363
    10. '  ' → logprob: -5.204663276672363

Token 20: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.47386202216148376
    2. 'while' → logprob: -2.4738619327545166
    3. '<|end|>' → logprob: -2.5988619327545166
    4. '   ' → logprob: -2.8488619327545166
    5. '```' → logprob: -3.2238619327545166
    6. ')' → logprob: -3.2238619327545166
    7. ' while' → logprob: -3.7238619327545166
    8. '**' → logprob: -4.223862171173096
    9. ' ' → logprob: -4.348862171173096
    10. '*' → logprob: -5.098862171173096

Token 21: ' while' (ID: 2049)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' (adapté à ' while') → logprob: -0.06024634465575218
    2. ' while' → logprob: -3.185246229171753
    3. '   ' → logprob: -5.185246467590332
    4. '<|end|>' → logprob: -5.560246467590332
    5. ':' → logprob: -6.185246467590332
    6. '```' → logprob: -6.310246467590332
    7. ')' → logprob: -6.560246467590332
    8. '	while' → logprob: -6.935246467590332
    9. 'While' → logprob: -8.435246467590332
    10. ' ' → logprob: -8.435246467590332

Token 22: ' i' (ID: 575)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.0024854077491909266
    2. 'n' → logprob: -6.002485275268555
    3. ' ' → logprob: -11.877485275268555
    4. ' ' → logprob: -13.252485275268555
    5. '	n' → logprob: -14.502485275268555
    6. ' i' → logprob: -15.502485275268555
    7. '<|end|>' → logprob: -16.502485275268555
    8. '(n' → logprob: -16.752485275268555
    9. ' \(' → logprob: -17.002485275268555
    10. ' (' → logprob: -17.127485275268555

Token 23: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.03364904224872589
    2. '<=' → logprob: -3.40864896774292
    3. ']<=' → logprob: -14.033649444580078
    4. ' ' → logprob: -14.783649444580078
    5. ')<=' → logprob: -14.908649444580078
    6. '```' → logprob: -15.033649444580078
    7. ''' → logprob: -15.408649444580078
    8. '<' → logprob: -15.658649444580078
    9. ' <=",' → logprob: -15.783649444580078
    10. ' <<=' → logprob: -16.158649444580078

Token 24: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.31326204538345337
    2. ' n' → logprob: -1.3132619857788086
    3. '	n' → logprob: -15.563261985778809
    4. ' ' → logprob: -16.938262939453125
    5. ' ' → logprob: -17.438262939453125
    6. '_n' → logprob: -19.188262939453125
    7. '   ' → logprob: -19.438262939453125
    8. ')n' → logprob: -19.688262939453125
    9. '```' → logprob: -20.438262939453125
    10. '(n' → logprob: -21.063262939453125

Token 25: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0032713564578443766
    2. ':
' → logprob: -5.753271579742432
    3. ' :' → logprob: -9.753271102905273
    4. '):' → logprob: -11.253271102905273
    5. ':**' → logprob: -11.628271102905273
    6. '   ' → logprob: -12.503271102905273
    7. ' :
' → logprob: -13.128271102905273
    8. ':i' → logprob: -13.253271102905273
    9. ':
' → logprob: -13.628271102905273
    10. '):
' → logprob: -13.878271102905273

Token 26: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.31689172983169556
    2. ':' → logprob: -2.191891670227051
    3. '   ' → logprob: -2.441891670227051
    4. ':
' → logprob: -2.941891670227051
    5. '    ' → logprob: -5.816891670227051
    6. ' :
' → logprob: -6.066891670227051
    7. '):
' → logprob: -6.066891670227051
    8. '<|end|>' → logprob: -6.066891670227051
    9. '```' → logprob: -6.191891670227051
    10. ' :' → logprob: -6.566891670227051

Token 27: ' count' (ID: 3605)
  Prédit: 'count'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'count' (adapté à ' count') → logprob: -0.030902713537216187
    2. ' count' → logprob: -3.530902624130249
    3. '       ' → logprob: -7.030902862548828
    4. '   ' → logprob: -8.905902862548828
    5. '	count' → logprob: -10.155902862548828
    6. '```' → logprob: -10.655902862548828
    7. '<|end|>' → logprob: -10.905902862548828
    8. '
' → logprob: -11.030902862548828
    9. 'Count' → logprob: -11.530902862548828
    10. '_count' → logprob: -12.030902862548828

Token 28: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.0002694416616577655
    2. '+=' → logprob: -8.250269889831543
    3. ' =' → logprob: -12.625269889831543
    4. ' +' → logprob: -13.750269889831543
    5. '    ' → logprob: -13.875269889831543
    6. ' ' → logprob: -14.125269889831543
    7. '<|end|>' → logprob: -15.000269889831543
    8. '+' → logprob: -15.125269889831543
    9. '=' → logprob: -15.125269889831543
    10. ')' → logprob: -15.500269889831543

Token 29: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.06196914613246918
    2. 'n' → logprob: -2.811969041824341
    3. ' ' → logprob: -14.061968803405762
    4. '	n' → logprob: -14.561968803405762
    5. ' ' → logprob: -15.811968803405762
    6. '   ' → logprob: -16.436969757080078
    7. ' (' → logprob: -18.061969757080078
    8. '(n' → logprob: -18.561969757080078
    9. '    ' → logprob: -18.561969757080078
    10. 'int' → logprob: -19.311969757080078

Token 30: ' //' (ID: 602)
  Prédit: '//'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '//' → logprob: -0.633191704750061
    2. ' //' → logprob: -0.758191704750061
    3. '/i' → logprob: -8.88319206237793
    4. '`' → logprob: -9.13319206237793
    5. '```' → logprob: -9.13319206237793
    6. '   ' → logprob: -9.13319206237793
    7. 'i' → logprob: -10.75819206237793
    8. '/' → logprob: -11.00819206237793
    9. '    ' → logprob: -11.38319206237793
    10. ' ' → logprob: -11.63319206237793

Token 31: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -9.615255839889869e-05
    2. ' i' → logprob: -9.250096321105957
    3. '	i' → logprob: -18.00009536743164
    4. '   ' → logprob: -18.62509536743164
    5. ' ' → logprob: -19.75009536743164
    6. '5' → logprob: -19.87509536743164
    7. '  ' → logprob: -21.37509536743164
    8. '*i' → logprob: -21.75009536743164
    9. '<|end|>' → logprob: -21.75009536743164
    10. '```' → logprob: -21.87509536743164

Token 32: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.27896907925605774
    2. '       ' → logprob: -1.9039690494537354
    3. '\n' → logprob: -3.0289690494537354
    4. '
' → logprob: -4.1539692878723145
    5. '<|end|>' → logprob: -5.2789692878723145
    6. '```' → logprob: -5.4039692878723145
    7. '  
' → logprob: -5.6539692878723145
    8. '\' → logprob: -5.6539692878723145
    9. '    
' → logprob: -6.2789692878723145
    10. '   ' → logprob: -6.4039692878723145

Token 33: '       ' (ID: 309)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -1.2197797298431396
    2. '\n' → logprob: -1.3447797298431396
    3. '       ' → logprob: -1.8447797298431396
    4. '    
' → logprob: -2.3447797298431396
    5. '        
' → logprob: -3.2197797298431396
    6. '  
' → logprob: -3.8447797298431396
    7. '     
' → logprob: -3.8447797298431396
    8. '\' → logprob: -3.9697797298431396
    9. '```' → logprob: -3.9697797298431396
    10. ' 
' → logprob: -4.094779968261719

Token 34: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' (adapté à ' i') → logprob: -0.49763351678848267
    2. ' i' → logprob: -1.122633457183838
    3. '       ' → logprob: -3.372633457183838
    4. '
' → logprob: -4.122633457183838
    5. '\n' → logprob: -5.372633457183838
    6. ' 
' → logprob: -5.622633457183838
    7. '```' → logprob: -6.122633457183838
    8. '`
' → logprob: -6.497633457183838
    9. '``' → logprob: -6.622633457183838
    10. '\' → logprob: -6.872633457183838

Token 35: ' *=' (ID: 25253)
  Prédit: ' *='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *=' → logprob: -0.036685697734355927
    2. '*=' → logprob: -3.6616857051849365
    3. '*' → logprob: -5.786685466766357
    4. '   ' → logprob: -6.036685466766357
    5. ' *' → logprob: -6.661685466766357
    6. '    ' → logprob: -6.661685466766357
    7. ' ' → logprob: -6.661685466766357
    8. '  ' → logprob: -7.161685466766357
    9. ' ' → logprob: -9.536685943603516
    10. '```' → logprob: -9.661685943603516

Token 36: ' ' (ID: 220)
  Prédit: '5'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -2.7729658540920354e-05
    2. ' ' → logprob: -10.500027656555176
    3. '```' → logprob: -16.625028610229492
    4. '   ' → logprob: -18.125028610229492
    5. '  ' → logprob: -19.875028610229492
    6. '`' → logprob: -20.250028610229492
    7. '۵' → logprob: -20.750028610229492
    8. '``' → logprob: -21.000028610229492
    9. '٥' → logprob: -21.000028610229492
    10. '    ' → logprob: -21.437528610229492

Token 37: '5' (ID: 20)
  Prédit: '5'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -1.9361264946837764e-07
    2. ' ' → logprob: -15.625
    3. '```' → logprob: -17.75
    4. '۵' → logprob: -20.875
    5. '`' → logprob: -21.25
    6. '٥' → logprob: -21.25
    7. '   ' → logprob: -21.375
    8. '৫' → logprob: -21.875
    9. '५' → logprob: -21.875
    10. '５' → logprob: -21.875

Token 38: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.006871779449284077
    2. '
' → logprob: -5.506871700286865
    3. 'return' → logprob: -7.006871700286865
    4. '    
' → logprob: -7.256871700286865
    5. ' return' → logprob: -7.506871700286865
    6. '\n' → logprob: -7.756871700286865
    7. '```' → logprob: -9.256872177124023
    8. '  
' → logprob: -10.131872177124023
    9. '       ' → logprob: -11.256872177124023
    10. '	return' → logprob: -11.506872177124023

Token 39: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.015595068223774433
    2. '
' → logprob: -4.765594959259033
    3. '    
' → logprob: -5.890594959259033
    4. '\n' → logprob: -6.140594959259033
    5. 'return' → logprob: -7.140594959259033
    6. ' return' → logprob: -7.765594959259033
    7. '```' → logprob: -7.890594959259033
    8. ' 
' → logprob: -8.765595436096191
    9. '  
' → logprob: -9.265595436096191
    10. '\' → logprob: -9.390595436096191

Token 40: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5271042585372925
    2. 'return' (adapté à ' return') → logprob: -1.0271042585372925
    3. ' return' → logprob: -3.027104377746582
    4. '```' → logprob: -6.902104377746582
    5. '
' → logprob: -7.027104377746582
    6. ' ' → logprob: -7.902104377746582
    7. '	return' → logprob: -8.277104377746582
    8. '    
' → logprob: -8.277104377746582
    9. ':return' → logprob: -8.652104377746582
    10. '\' → logprob: -9.652104377746582

Token 41: ' count' (ID: 3605)
  Prédit: 'count'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'count' → logprob: -0.25192928314208984
    2. ' count' → logprob: -1.5019292831420898
    3. '[count' → logprob: -16.126930236816406
    4. '	count' → logprob: -16.876930236816406
    5. '(count' → logprob: -17.126930236816406
    6. '<count' → logprob: -17.376930236816406
    7. '$count' → logprob: -18.501930236816406
    8. ' ' → logprob: -19.376930236816406
    9. '_count' → logprob: -19.626930236816406
    10. ' ' → logprob: -19.626930236816406

Token 42: '

' (ID: 279)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -1.1432020664215088
    2. '\n' → logprob: -1.3932020664215088
    3. '<|end|>' → logprob: -1.3932020664215088
    4. '```' → logprob: -2.018202066421509
    5. '#' → logprob: -4.51820182800293
    6. '(' → logprob: -4.51820182800293
    7. ')' → logprob: -4.64320182800293
    8. 'newline' → logprob: -4.76820182800293
    9. '\' → logprob: -5.64320182800293
    10. ' ' → logprob: -6.39320182800293

Token 43: 'while' (ID: 7032)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 44: ' True' (ID: 6432)
  Prédit: ' True'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' True' → logprob: -0.004898211918771267
    2. ' n' → logprob: -5.7548980712890625
    3. ' ' → logprob: -7.1298980712890625
    4. 'True' → logprob: -7.2548980712890625
    5. ' not' → logprob: -9.379898071289062
    6. '(True' → logprob: -9.879898071289062
    7. ' (' → logprob: -11.004898071289062
    8. ' i' → logprob: -11.129898071289062
    9. '_' → logprob: -11.379898071289062
    10. ' input' → logprob: -11.879898071289062

Token 45: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0011198573047295213
    2. '():' → logprob: -7.376120090484619
    3. ' :' → logprob: -7.876120090484619
    4. '(' → logprob: -9.501119613647461
    5. ':**' → logprob: -11.501119613647461
    6. ':
' → logprob: -12.126119613647461
    7. '):' → logprob: -12.376119613647461
    8. '   ' → logprob: -12.751119613647461
    9. '(:' → logprob: -12.876119613647461
    10. '(":' → logprob: -13.126119613647461

Token 46: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.47878775000572205
    2. ' input' → logprob: -1.1037877798080444
    3. 'input' → logprob: -4.353787899017334
    4. ' (' → logprob: -4.603787899017334
    5. ' n' → logprob: -4.853787899017334
    6. '    ' → logprob: -5.103787899017334
    7. '(' → logprob: -6.103787899017334
    8. '   ' → logprob: -6.353787899017334
    9. ' )' → logprob: -6.478787899017334
    10. '(input' → logprob: -6.728787899017334

Token 47: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.2925727069377899
    2. 'n' (adapté à ' n') → logprob: -1.9175727367401123
    3. ' try' → logprob: -2.6675727367401123
    4. '   ' → logprob: -4.417572498321533
    5. 'try' → logprob: -4.542572498321533
    6. ' user' → logprob: -4.542572498321533
    7. 'user' → logprob: -6.292572498321533
    8. ' number' → logprob: -6.917572498321533
    9. ' num' → logprob: -7.792572498321533
    10. 'num' → logprob: -8.167572975158691

Token 48: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0019306590547785163
    2. '=' → logprob: -6.2519307136535645
    3. ' ' → logprob: -14.251930236816406
    4. '=input' → logprob: -14.626930236816406
    5. '=int' → logprob: -15.126930236816406
    6. 's' → logprob: -15.876930236816406
    7. 'space' → logprob: -16.001930236816406
    8. ',' → logprob: -16.001930236816406
    9. ' =
' → logprob: -16.376930236816406
    10. '_' → logprob: -16.626930236816406

Token 49: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.08687246590852737
    2. ' int' → logprob: -2.5868725776672363
    3. 'input' → logprob: -5.086872577667236
    4. ' input' → logprob: -6.336872577667236
    5. '=int' → logprob: -13.336872100830078
    6. ' ' → logprob: -14.086872100830078
    7. '<int' → logprob: -14.961872100830078
    8. '(int' → logprob: -14.961872100830078
    9. '[int' → logprob: -15.211872100830078
    10. '   ' → logprob: -16.211872100830078

Token 50: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.3868849575519562
    2. '(' → logprob: -1.1368849277496338
    3. 'input' → logprob: -11.386884689331055
    4. '(
' → logprob: -13.636884689331055
    5. ' (' → logprob: -14.261884689331055
    6. '()' → logprob: -15.636884689331055
    7. '(

' → logprob: -15.761884689331055
    8. ' input' → logprob: -16.261884689331055
    9. '(in' → logprob: -16.636884689331055
    10. '=input' → logprob: -16.636884689331055

Token 51: '())
' (ID: 4574)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.426201730966568
    2. '())' → logprob: -1.3012017011642456
    3. '(' → logprob: -3.301201820373535
    4. '('' → logprob: -3.676201820373535
    5. '("("' → logprob: -4.926201820373535
    6. '("' → logprob: -5.676201820373535
    7. '(">' → logprob: -7.551201820373535
    8. '(""))' → logprob: -7.926201820373535
    9. '("")' → logprob: -8.551201820373535
    10. '()))' → logprob: -8.551201820373535

Token 52: '   ' (ID: 271)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.26489752531051636
    2. '<|end|>' → logprob: -2.264897584915161
    3. '   ' → logprob: -2.514897584915161
    4. 'if' → logprob: -3.514897584915161
    5. ' ' → logprob: -5.139897346496582
    6. '<|end|>' → logprob: -5.514897346496582
    7. '    ' → logprob: -5.889897346496582
    8. ')' → logprob: -6.014897346496582
    9. 'print' → logprob: -6.764897346496582
    10. '#' → logprob: -8.139897346496582

Token 53: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.10111869871616364
    2. 'if' (adapté à ' if') → logprob: -2.351118803024292
    3. '<|end|>' → logprob: -7.601118564605713
    4. ' ' → logprob: -8.851119041442871
    5. '   ' → logprob: -8.976119041442871
    6. '    ' → logprob: -9.476119041442871
    7. 'print' → logprob: -11.226119041442871
    8. '<|end|>' → logprob: -11.351119041442871
    9. '	if' → logprob: -11.851119041442871
    10. ')' → logprob: -12.101119041442871

Token 54: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.006056066602468491
    2. ' not' → logprob: -5.13105583190918
    3. 'n' → logprob: -9.13105583190918
    4. ' ' → logprob: -11.00605583190918
    5. 'not' → logprob: -13.63105583190918
    6. ' ' → logprob: -13.88105583190918
    7. '	n' → logprob: -15.13105583190918
    8. '  ' → logprob: -16.63105583190918
    9. '0' → logprob: -18.56855583190918
    10. ' n't' → logprob: -18.69355583190918

Token 55: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.26912373304367065
    2. ' <' → logprob: -1.8941237926483154
    3. '==' → logprob: -2.8941237926483154
    4. '<' → logprob: -3.5191237926483154
    5. ' <=' → logprob: -8.269124031066895
    6. ' ' → logprob: -9.269124031066895
    7. '<=' → logprob: -9.519124031066895
    8. '==-' → logprob: -10.519124031066895
    9. '<|end|>' → logprob: -10.894124031066895
    10. '=' → logprob: -11.144124031066895

Token 56: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.575946569442749
    2. ' ' → logprob: -0.825946569442749
    3. '-' → logprob: -12.450946807861328
    4. ' -' → logprob: -12.825946807861328
    5. 's' → logprob: -16.075946807861328
    6. '  ' → logprob: -16.075946807861328
    7. ' ' → logprob: -17.075946807861328
    8. '   ' → logprob: -17.075946807861328
    9. '    ' → logprob: -17.075946807861328
    10. '_' → logprob: -17.950946807861328

Token 57: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0012096378486603498
    2. '-' → logprob: -7.001209735870361
    3. ' ' → logprob: -8.126209259033203
    4. ' -' → logprob: -13.001209259033203
    5. '```' → logprob: -16.626209259033203
    6. '  ' → logprob: -16.876209259033203
    7. '   ' → logprob: -17.376209259033203
    8. '"' → logprob: -17.501209259033203
    9. '42' → logprob: -18.501209259033203
    10. '=' → logprob: -18.751209259033203

Token 58: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.001541046192869544
    2. ':
' → logprob: -6.6265411376953125
    3. '   ' → logprob: -8.501541137695312
    4. '       ' → logprob: -12.126541137695312
    5. ' :' → logprob: -12.126541137695312
    6. '    ' → logprob: -15.251541137695312
    7. '.' → logprob: -15.501541137695312
    8. ':
' → logprob: -15.876541137695312
    9. '  ' → logprob: -16.376541137695312
    10. ':return' → logprob: -16.501541137695312

Token 59: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.02987382747232914
    2. '   ' → logprob: -3.529873847961426
    3. ':' → logprob: -10.654873847961426
    4. ' break' → logprob: -10.779873847961426
    5. '     ' → logprob: -10.779873847961426
    6. '      ' → logprob: -11.404873847961426
    7. '    ' → logprob: -11.529873847961426
    8. '	break' → logprob: -11.654873847961426
    9. 'break' → logprob: -12.279873847961426
    10. '           ' → logprob: -12.654873847961426

Token 60: ' break' (ID: 2338)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.7243785858154297
    2. ' break' → logprob: -0.7243785858154297
    3. '   ' → logprob: -4.09937858581543
    4. 'break' (adapté à ' break') → logprob: -4.34937858581543
    5. '	break' → logprob: -6.72437858581543
    6. ' ' → logprob: -10.72437858581543
    7. '           ' → logprob: -11.72437858581543
    8. '_break' → logprob: -12.34937858581543
    9. '    ' → logprob: -12.47437858581543
    10. '  ' → logprob: -12.59937858581543

Token 61: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.030032552778720856
    2. 'print' → logprob: -3.5300326347351074
    3. ' print' → logprob: -8.90503215789795
    4. '    
' → logprob: -9.53003215789795
    5. '```' → logprob: -9.65503215789795
    6. '
' → logprob: -11.90503215789795
    7. '``' → logprob: -14.03003215789795
    8. '	print' → logprob: -14.28003215789795
    9. '  
' → logprob: -14.53003215789795
    10. '   ' → logprob: -15.40503215789795

Token 62: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05279824882745743
    2. 'print' → logprob: -3.177798271179199
    3. '
' → logprob: -5.427798271179199
    4. ' print' → logprob: -5.677798271179199
    5. '    
' → logprob: -6.427798271179199
    6. '<|end|>' → logprob: -8.5527982711792
    7. '  
' → logprob: -10.1777982711792
    8. '```' → logprob: -10.4277982711792
    9. '	print' → logprob: -10.6777982711792
    10. '   
' → logprob: -11.9277982711792

Token 63: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.6494959592819214
    2. ' print' → logprob: -0.8994959592819214
    3. '   ' → logprob: -2.649496078491211
    4. '
' → logprob: -9.524496078491211
    5. '```' → logprob: -9.524496078491211
    6. '	print' → logprob: -10.274496078491211
    7. '    
' → logprob: -10.399496078491211
    8. ' 
' → logprob: -11.774496078491211
    9. '<|end|>' → logprob: -12.524496078491211
    10. '.print' → logprob: -13.399496078491211

Token 64: '(tr' (ID: 14363)
  Prédit: '(tr'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(tr' → logprob: -0.008617527782917023
    2. '(' → logprob: -4.758617401123047
    3. '(f' → logprob: -13.008617401123047
    4. '(th' → logprob: -15.633617401123047
    5. 'tr' → logprob: -15.883617401123047
    6. '()' → logprob: -16.008617401123047
    7. '(t' → logprob: -16.008617401123047
    8. '(

' → logprob: -17.008617401123047
    9. ' trailing' → logprob: -17.133617401123047
    10. '('' → logprob: -17.133617401123047

Token 65: 'ailing' (ID: 24408)
  Prédit: 'ailing'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ailing' → logprob: -0.00028040475444868207
    2. 'a' → logprob: -8.750280380249023
    3. 'ail' → logprob: -9.375280380249023
    4. 'aling' → logprob: -10.625280380249023
    5. 'iling' → logprob: -11.500280380249023
    6. '-' → logprob: -14.750280380249023
    7. 'ing' → logprob: -15.000280380249023
    8. ' a' → logprob: -15.500280380249023
    9. '_' → logprob: -15.500280380249023
    10. 'ailed' → logprob: -15.500280380249023

Token 66: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -4.320199877838604e-07
    2. ')_' → logprob: -15.125
    3. '_)' → logprob: -17.0
    4. '_zero' → logprob: -17.5
    5. ' _' → logprob: -18.0
    6. '_suffix' → logprob: -18.25
    7. '__' → logprob: -18.5
    8. '_factor' → logprob: -18.625
    9. '_s' → logprob: -18.625
    10. ')' → logprob: -18.875

Token 67: 'zeros' (ID: 24095)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.31326720118522644
    2. 'zeros' → logprob: -1.3132672309875488
    3. '0' → logprob: -13.18826675415039
    4. 'zer' → logprob: -13.43826675415039
    5. '_zero' → logprob: -13.43826675415039
    6. ' zeros' → logprob: -15.31326675415039
    7. 'zero' → logprob: -15.68826675415039
    8. 'Zeros' → logprob: -15.81326675415039
    9. '```' → logprob: -16.18826675415039
    10. 'unders' → logprob: -16.93826675415039

Token 68: '_factor' (ID: 43757)
  Prédit: '_factor'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_factor' → logprob: -4.727905979962088e-05
    2. '_' → logprob: -10.00004768371582
    3. '_fact' → logprob: -14.50004768371582
    4. '_f' → logprob: -14.87504768371582
    5. 'factor' → logprob: -15.00004768371582
    6. ')' → logprob: -15.62504768371582
    7. ')_' → logprob: -15.75004768371582
    8. ' factorial' → logprob: -16.12504768371582
    9. '```' → logprob: -16.50004768371582
    10. 'Factor' → logprob: -17.25004768371582

Token 69: 'ial' (ID: 563)
  Prédit: 'al'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'al' → logprob: -0.03807959705591202
    2. 'ial' → logprob: -3.2880795001983643
    3. 'orial' → logprob: -10.413079261779785
    4. 'ional' → logprob: -12.538079261779785
    5. 'als' → logprob: -13.663079261779785
    6. 'a' → logprob: -14.538079261779785
    7. 'or' → logprob: -14.788079261779785
    8. ')' → logprob: -14.913079261779785
    9. 's' → logprob: -15.288079261779785
    10. '```' → logprob: -15.663079261779785

Token 70: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.03806409612298012
    2. '(' → logprob: -3.2880640029907227
    3. ')' → logprob: -10.913064002990723
    4. ' (' → logprob: -12.663064002990723
    5. '(
' → logprob: -14.038064002990723
    6. ')(' → logprob: -15.538064002990723
    7. '(

' → logprob: -17.16306495666504
    8. ')n' → logprob: -17.41306495666504
    9. '\(' → logprob: -18.03806495666504
    10. ' )' → logprob: -18.16306495666504

Token 71: '))' (ID: 915)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.018153570592403412
    2. '))' → logprob: -4.018153667449951
    3. ')))' → logprob: -13.268153190612793
    4. ' )' → logprob: -14.143153190612793
    5. '`)' → logprob: -14.268153190612793
    6. ')`' → logprob: -15.268153190612793
    7. ')")' → logprob: -16.01815414428711
    8. ')}' → logprob: -16.26815414428711
    9. '})' → logprob: -17.01815414428711
    10. '())' → logprob: -17.26815414428711


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 69
Tokens correctement prédits (1ère position, stricte): 30
Tokens correctement prédits (1ère position, avec adaptation): 34
Tokens correctement prédits (top 10): 63
Précision stricte (1ère position): 43.48%
Précision adaptée (1ère position): 49.28%
Précision (top 10): 91.30%
================================================================================
