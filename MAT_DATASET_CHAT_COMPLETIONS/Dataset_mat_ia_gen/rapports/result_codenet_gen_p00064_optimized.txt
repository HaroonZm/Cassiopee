================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:09:54
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import sys
import re

total = 0
for line in sys.stdin:
    total += sum(map(int, re.findall(r'\d+', line)))
print(total)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: '
' (ID: 198)
  → Token d'amorce (pas de prédiction)

Token 3: 'import' (ID: 561)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.29731935262680054
    2. '\n' → logprob: -1.5473194122314453
    3. '<|end|>' → logprob: -3.7973194122314453
    4. '\' → logprob: -4.922319412231445
    5. 'newline' → logprob: -5.672319412231445
    6. 'import' → logprob: -5.672319412231445
    7. '<|end|>' → logprob: -6.047319412231445
    8. '
' → logprob: -6.922319412231445
    9. '```' → logprob: -6.922319412231445
    10. '' → logprob: -7.672319412231445

Token 4: ' re' (ID: 322)
  Prédit: ' os'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' os' → logprob: -0.00023321842309087515
    2. 'os' → logprob: -8.37523365020752
    3. ' math' → logprob: -13.87523365020752
    4. ' re' → logprob: -14.37523365020752
    5. '"os' → logprob: -14.87523365020752
    6. ' json' → logprob: -15.12523365020752
    7. '_os' → logprob: -15.87523365020752
    8. '	os' → logprob: -16.375232696533203
    9. ' ' → logprob: -16.750232696533203
    10. ' ' → logprob: -17.000232696533203

Token 5: '

' (ID: 279)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.02367085963487625
    2. '
' → logprob: -4.898670673370361
    3. 'import' → logprob: -5.648670673370361
    4. '

' → logprob: -5.898670673370361
    5. '\' → logprob: -6.023670673370361
    6. '.' → logprob: -6.148670673370361
    7. '<|end|>' → logprob: -6.523670673370361
    8. '' → logprob: -7.148670673370361
    9. '```' → logprob: -7.523670673370361
    10. '[' → logprob: -7.523670673370361

Token 6: 'total' (ID: 9577)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -1.186323642730713
    2. '#' → logprob: -1.936323642730713
    3. 'import' → logprob: -2.061323642730713
    4. '.' → logprob: -2.311323642730713
    5. '```' → logprob: -2.561323642730713
    6. 'def' → logprob: -2.686323642730713
    7. '\' → logprob: -3.061323642730713
    8. '^' → logprob: -3.186323642730713
    9. '[' → logprob: -3.436323642730713
    10. ',' → logprob: -5.061323642730713

Token 7: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.09221556782722473
    2. '_count' → logprob: -3.2172155380249023
    3. ' =' → logprob: -4.342215538024902
    4. '.' → logprob: -4.342215538024902
    5. '_size' → logprob: -5.592215538024902
    6. '=' → logprob: -5.717215538024902
    7. '_counts' → logprob: -6.217215538024902
    8. '_sum' → logprob: -6.342215538024902
    9. '_lines' → logprob: -6.467215538024902
    10. '_amount' → logprob: -6.467215538024902

Token 8: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.16022878885269165
    2. '0' → logprob: -1.9102287292480469
    3. 'int' → logprob: -13.160228729248047
    4. ' ' → logprob: -14.035228729248047
    5. ' int' → logprob: -14.535228729248047
    6. '  ' → logprob: -14.535228729248047
    7. '1' → logprob: -14.910228729248047
    8. '100' → logprob: -15.785228729248047
    9. 'sum' → logprob: -16.660228729248047
    10. ' []' → logprob: -17.035228729248047

Token 9: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -3.702754474943504e-05
    2. ' ' → logprob: -10.25003719329834
    3. 'int' → logprob: -13.50003719329834
    4. '{}' → logprob: -16.375036239624023
    5. '100' → logprob: -16.625036239624023
    6. '1' → logprob: -17.125036239624023
    7. 'sum' → logprob: -17.125036239624023
    8. 're' → logprob: -17.125036239624023
    9. '[]' → logprob: -17.750036239624023
    10. '"' → logprob: -18.000036239624023

Token 10: '
' (ID: 198)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.24797505140304565
    2. '
' → logprob: -2.2479751110076904
    3. '\' → logprob: -2.4979751110076904
    4. 'newline' → logprob: -4.122974872589111
    5. 'for' → logprob: -5.622974872589111
    6. '<|end|>' → logprob: -6.247974872589111
    7. '+' → logprob: -6.372974872589111
    8. '' → logprob: -6.497974872589111
    9. ' 
' → logprob: -6.997974872589111
    10. '.' → logprob: -6.997974872589111

Token 11: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.18839548528194427
    2. '\n' → logprob: -2.5633955001831055
    3. '.' → logprob: -2.8133955001831055
    4. '\' → logprob: -4.5633955001831055
    5. ' for' → logprob: -4.6883955001831055
    6. '_' → logprob: -5.6883955001831055
    7. '```' → logprob: -5.6883955001831055
    8. '
' → logprob: -6.3133955001831055
    9. ' ' → logprob: -7.0633955001831055
    10. '+' → logprob: -7.4383955001831055

Token 12: ' line' (ID: 2543)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.01744871400296688
    2. '  ' → logprob: -4.267448902130127
    3. ' i' → logprob: -5.767448902130127
    4. ' item' → logprob: -9.892448425292969
    5. ' line' → logprob: -10.267448425292969
    6. ' ' → logprob: -11.892448425292969
    7. '_' → logprob: -12.142448425292969
    8. '```' → logprob: -12.142448425292969
    9. ' row' → logprob: -12.517448425292969
    10. 'i' → logprob: -12.517448425292969

Token 13: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.016469959169626236
    2. 'in' → logprob: -4.141469955444336
    3. ' ' → logprob: -7.891469955444336
    4. '  ' → logprob: -11.266469955444336
    5. 'import' → logprob: -11.516469955444336
    6. '[' → logprob: -11.641469955444336
    7. '```' → logprob: -12.266469955444336
    8. ' :' → logprob: -12.516469955444336
    9. 's' → logprob: -12.516469955444336
    10. ':' → logprob: -12.641469955444336

Token 14: ' sys' (ID: 12228)
  Prédit: ' sys'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sys' → logprob: -0.11292091012001038
    2. 'sys' → logprob: -2.2379209995269775
    3. '	sys' → logprob: -10.487920761108398
    4. '=sys' → logprob: -10.612920761108398
    5. '(sys' → logprob: -11.487920761108398
    6. '```' → logprob: -11.487920761108398
    7. ' ' → logprob: -11.737920761108398
    8. ' iter' → logprob: -12.362920761108398
    9. ' ' → logprob: -12.987920761108398
    10. ' file' → logprob: -13.487920761108398

Token 15: '.stdin' (ID: 93480)
  Prédit: '.stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.stdin' → logprob: -0.07108037173748016
    2. '.' → logprob: -2.821080446243286
    3. '.argv' → logprob: -5.071080207824707
    4. '.stdout' → logprob: -6.196080207824707
    5. '.readline' → logprob: -7.821080207824707
    6. ' .' → logprob: -8.196080207824707
    7. '.std' → logprob: -10.321080207824707
    8. '.input' → logprob: -10.696080207824707
    9. '.stderr' → logprob: -11.821080207824707
    10. '.readlines' → logprob: -12.696080207824707

Token 16: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.000522650487255305
    2. '.' → logprob: -8.00052261352539
    3. ' :' → logprob: -10.25052261352539
    4. '.:' → logprob: -10.25052261352539
    5. ':**' → logprob: -10.50052261352539
    6. '[:]' → logprob: -10.50052261352539
    7. ':
' → logprob: -10.87552261352539
    8. '.readline' → logprob: -11.00052261352539
    9. '':' → logprob: -12.50052261352539
    10. '   ' → logprob: -13.00052261352539

Token 17: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03290565684437752
    2. ' total' → logprob: -4.032905578613281
    3. ' ' → logprob: -4.532905578613281
    4. 'total' → logprob: -6.907905578613281
    5. '    
' → logprob: -7.407905578613281
    6. '    ' → logprob: -7.407905578613281
    7. '<|end|>' → logprob: -7.657905578613281
    8. ' if' → logprob: -7.782905578613281
    9. '  ' → logprob: -8.157905578613281
    10. ' 
' → logprob: -9.282905578613281

Token 18: ' total' (ID: 3609)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.006602510344237089
    2. ' line' → logprob: -5.6316022872924805
    3. ' total' → logprob: -6.6316022872924805
    4. ' if' → logprob: -7.0066022872924805
    5. ' stripped' → logprob: -8.38160228729248
    6. 'total' (adapté à ' total') → logprob: -8.63160228729248
    7. '    ' → logprob: -9.25660228729248
    8. ' match' → logprob: -9.75660228729248
    9. 'line' → logprob: -9.75660228729248
    10. 'if' → logprob: -9.88160228729248

Token 19: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.003285136539489031
    2. '+=' → logprob: -5.753284931182861
    3. '+' → logprob: -9.25328540802002
    4. ' ' → logprob: -12.50328540802002
    5. ' +' → logprob: -12.50328540802002
    6. '    ' → logprob: -13.37828540802002
    7. '+='' → logprob: -14.62828540802002
    8. ' .=' → logprob: -15.25328540802002
    9. ' -=' → logprob: -15.37828540802002
    10. ' =' → logprob: -15.37828540802002

Token 20: ' sum' (ID: 4215)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.38284769654273987
    2. ' int' → logprob: -1.8828476667404175
    3. '1' → logprob: -2.507847785949707
    4. 'len' → logprob: -2.882847785949707
    5. ' len' → logprob: -3.757847785949707
    6. ' ' → logprob: -5.757847785949707
    7. 'float' → logprob: -7.007847785949707
    8. ' float' → logprob: -7.632847785949707
    9. 'line' → logprob: -8.507847785949707
    10. 'sum' → logprob: -8.882847785949707

Token 21: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3099472224712372
    2. '(int' → logprob: -1.8099472522735596
    3. '(re' → logprob: -2.9349472522735596
    4. '(map' → logprob: -3.5599472522735596
    5. '(ord' → logprob: -4.1849470138549805
    6. '(list' → logprob: -5.9349470138549805
    7. '(line' → logprob: -6.0599470138549805
    8. '((' → logprob: -8.80994701385498
    9. '(len' → logprob: -8.80994701385498
    10. '(word' → logprob: -8.93494701385498

Token 22: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.010320470668375492
    2. '(' → logprob: -4.635320663452148
    3. 'int' → logprob: -8.135320663452148
    4. '(lambda' → logprob: -8.885320663452148
    5. '(ord' → logprob: -9.885320663452148
    6. '(float' → logprob: -10.010320663452148
    7. ' int' → logprob: -11.385320663452148
    8. ',int' → logprob: -11.635320663452148
    9. '(len' → logprob: -12.760320663452148
    10. '(abs' → logprob: -13.135320663452148

Token 23: ',' (ID: 11)
  Prédit: '(re'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(re' → logprob: -0.0359707809984684
    2. '(' → logprob: -3.660970687866211
    3. ',' → logprob: -5.035970687866211
    4. '(line' → logprob: -6.535970687866211
    5. ',re' → logprob: -6.910970687866211
    6. 're' → logprob: -7.910970687866211
    7. ' (' → logprob: -9.285970687866211
    8. ')' → logprob: -9.660970687866211
    9. '(filter' → logprob: -10.660970687866211
    10. '   ' → logprob: -11.160970687866211

Token 24: ' re' (ID: 322)
  Prédit: ' re'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' re' → logprob: -0.2818150818347931
    2. 're' → logprob: -1.4068150520324707
    3. '   ' → logprob: -8.781815528869629
    4. ' line' → logprob: -9.031815528869629
    5. 'line' → logprob: -9.031815528869629
    6. '  ' → logprob: -9.156815528869629
    7. ' ' → logprob: -10.031815528869629
    8. '(re' → logprob: -10.156815528869629
    9. '	re' → logprob: -10.281815528869629
    10. ' filter' → logprob: -10.906815528869629

Token 25: '.findall' (ID: 95997)
  Prédit: '.findall'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.findall' → logprob: -0.0001214237418025732
    2. '\.' → logprob: -9.125121116638184
    3. '.find' → logprob: -12.000121116638184
    4. '.' → logprob: -13.500121116638184
    5. 'r' → logprob: -13.625121116638184
    6. '.split' → logprob: -13.750121116638184
    7. 'find' → logprob: -14.125121116638184
    8. '```' → logprob: -14.375121116638184
    9. '   ' → logprob: -15.125121116638184
    10. '.compile' → logprob: -15.375121116638184

Token 26: '(r' (ID: 4729)
  Prédit: '(r'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(r' → logprob: -0.009236755780875683
    2. '('\' → logprob: -4.759236812591553
    3. 'r' → logprob: -7.884236812591553
    4. '   ' → logprob: -9.009236335754395
    5. '(' → logprob: -10.634236335754395
    6. '('\\' → logprob: -10.634236335754395
    7. ''\' → logprob: -10.884236335754395
    8. '('' → logprob: -11.134236335754395
    9. '```' → logprob: -11.384236335754395
    10. '\' → logprob: -11.759236335754395

Token 27: ''\' (ID: 36853)
  Prédit: ''\'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''\' → logprob: -0.18886499106884003
    2. '('\' → logprob: -2.4388649463653564
    3. '(r' → logprob: -2.8138649463653564
    4. 'r' → logprob: -4.1888651847839355
    5. '"\' → logprob: -5.3138651847839355
    6. ''' → logprob: -6.0638651847839355
    7. '('\\' → logprob: -6.6888651847839355
    8. '("\' → logprob: -8.063864707946777
    9. '('' → logprob: -8.563864707946777
    10. '"' → logprob: -8.688864707946777

Token 28: 'd' (ID: 67)
  Prédit: '\d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\d' → logprob: -0.15713277459144592
    2. ''\' → logprob: -2.032132863998413
    3. '\b' → logprob: -5.157132625579834
    4. ''-' → logprob: -5.407132625579834
    5. '-' → logprob: -5.782132625579834
    6. '"\' → logprob: -8.407133102416992
    7. 'd' → logprob: -8.532133102416992
    8. '\' → logprob: -8.907133102416992
    9. '\-' → logprob: -8.907133102416992
    10. '-\' → logprob: -9.282133102416992

Token 29: '+',' (ID: 141314)
  Prédit: '+','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+',' → logprob: -0.10114951431751251
    2. '+' → logprob: -2.351149559020996
    3. '+'' → logprob: -7.101149559020996
    4. '+\' → logprob: -9.351149559020996
    5. '+')' → logprob: -10.601149559020996
    6. '+'\' → logprob: -12.976149559020996
    7. '+'.' → logprob: -13.226149559020996
    8. '+
' → logprob: -14.601149559020996
    9. '+",' → logprob: -14.851149559020996
    10. '+,' → logprob: -14.976149559020996

Token 30: ' line' (ID: 2543)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.026357775554060936
    2. ' line' → logprob: -3.651357889175415
    3. '   ' → logprob: -10.026357650756836
    4. '(line' → logprob: -11.901357650756836
    5. '	line' → logprob: -13.151357650756836
    6. '#line' → logprob: -13.776357650756836
    7. '[line' → logprob: -13.776357650756836
    8. ' ' → logprob: -14.401357650756836
    9. '```' → logprob: -14.776357650756836
    10. '=line' → logprob: -14.901357650756836

Token 31: ')))
' (ID: 12562)
  Prédit: ')))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')))' → logprob: -0.0007329129730351269
    2. ')' → logprob: -8.125733375549316
    3. '))' → logprob: -8.875733375549316
    4. ')))
' → logprob: -8.875733375549316
    5. '))))' → logprob: -8.875733375549316
    6. ' ' → logprob: -12.250733375549316
    7. '')))' → logprob: -12.250733375549316
    8. '   ' → logprob: -12.500733375549316
    9. ')))

' → logprob: -13.250733375549316
    10. ')));' → logprob: -13.750733375549316

Token 32: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00041816019802354276
    2. '
' → logprob: -8.250417709350586
    3. '<|end|>' → logprob: -9.875417709350586
    4. ' print' → logprob: -10.375417709350586
    5. '\n' → logprob: -10.500417709350586
    6. '```' → logprob: -10.625417709350586
    7. '  
' → logprob: -11.500417709350586
    8. '#' → logprob: -12.375417709350586
    9. ')' → logprob: -13.250417709350586
    10. '    
' → logprob: -13.375417709350586

Token 33: '(total' (ID: 39744)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.313845694065094
    2. '(total' → logprob: -1.3138456344604492
    3. '('' → logprob: -7.813845634460449
    4. '(f' → logprob: -9.31384563446045
    5. '("("' → logprob: -9.93884563446045
    6. '()' → logprob: -11.06384563446045
    7. 'total' → logprob: -11.43884563446045
    8. '(`' → logprob: -12.93884563446045
    9. '((' → logprob: -12.93884563446045
    10. ' (' → logprob: -13.06384563446045

Token 34: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.76628842484206e-05
    2. '))' → logprob: -9.625067710876465
    3. ' )' → logprob: -13.625067710876465
    4. '`)' → logprob: -16.12506675720215
    5. ')))' → logprob: -16.37506675720215
    6. ')
' → logprob: -16.75006675720215
    7. '')' → logprob: -17.00006675720215
    8. ')`' → logprob: -17.37506675720215
    9. '())' → logprob: -18.37506675720215
    10. '()' → logprob: -19.00006675720215


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 32
Tokens correctement prédits (1ère position, stricte): 16
Tokens correctement prédits (1ère position, avec adaptation): 16
Tokens correctement prédits (top 10): 30
Précision stricte (1ère position): 50.00%
Précision adaptée (1ère position): 50.00%
Précision (top 10): 93.75%
================================================================================
