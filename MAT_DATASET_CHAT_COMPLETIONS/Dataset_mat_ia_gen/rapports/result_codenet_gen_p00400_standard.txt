================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:29:41
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
N = int(input())
if 65 <= N <= 90:
    print(1)
elif 97 <= N <= 122:
    print(2)
else:
    print(0)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'N' (ID: 45)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00029494395130313933
    2. ''' → logprob: -8.75029468536377
    3. '`' → logprob: -10.00029468536377
    4. '```' → logprob: -10.62529468536377
    5. '(
' → logprob: -10.75029468536377
    6. '(N' → logprob: -11.00029468536377
    7. ')' → logprob: -12.12529468536377
    8. '\(' → logprob: -12.25029468536377
    9. '"' → logprob: -12.62529468536377
    10. '("("' → logprob: -12.87529468536377

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4827296733856201
    2. ')' → logprob: -0.9827296733856201
    3. '()' → logprob: -5.107729911804199
    4. '())' → logprob: -6.732729911804199
    5. '(
' → logprob: -7.732729911804199
    6. '```' → logprob: -8.7327299118042
    7. '))' → logprob: -9.1077299118042
    8. '")' → logprob: -9.3577299118042
    9. '')' → logprob: -9.4827299118042
    10. '(

' → logprob: -9.9827299118042

Token 5: 'if' (ID: 366)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.2431284785270691
    2. 'if' → logprob: -2.493128538131714
    3. 'i' → logprob: -3.743128538131714
    4. 'a' → logprob: -4.118128299713135
    5. 's' → logprob: -4.118128299713135
    6. 'x' → logprob: -4.493128299713135
    7. ')' → logprob: -4.493128299713135
    8. '`' → logprob: -4.993128299713135
    9. '*' → logprob: -4.993128299713135
    10. ' for' → logprob: -5.243128299713135

Token 6: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.055672772228717804
    2. ' N' → logprob: -2.9306728839874268
    3. ''' → logprob: -8.180672645568848
    4. '  ' → logprob: -8.430672645568848
    5. 'N' → logprob: -8.930672645568848
    6. ' ' → logprob: -9.555672645568848
    7. '"' → logprob: -9.930672645568848
    8. ' not' → logprob: -11.680672645568848
    9. ' a' → logprob: -12.430672645568848
    10. ')' → logprob: -12.555672645568848

Token 7: '65' (ID: 3898)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.008628644980490208
    2. ' N' → logprob: -4.758628845214844
    3. ' ' → logprob: -12.258628845214844
    4. 'n' → logprob: -12.508628845214844
    5. 'x' → logprob: -13.008628845214844
    6. 'a' → logprob: -13.883628845214844
    7. ')' → logprob: -14.758628845214844
    8. 'True' → logprob: -14.883628845214844
    9. 'num' → logprob: -15.383628845214844
    10. ' not' → logprob: -15.633628845214844

Token 8: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.20866213738918304
    2. '<=' → logprob: -2.3336620330810547
    3. ' >=' → logprob: -3.2086620330810547
    4. ' <' → logprob: -4.083662033081055
    5. '>=' → logprob: -4.833662033081055
    6. '<' → logprob: -5.083662033081055
    7. ' ' → logprob: -5.208662033081055
    8. ':' → logprob: -5.708662033081055
    9. ')' → logprob: -6.083662033081055
    10. '>' → logprob: -6.333662033081055

Token 9: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.08896095305681229
    2. ' N' → logprob: -2.463960886001587
    3. ' ' → logprob: -10.838960647583008
    4. '  ' → logprob: -14.213960647583008
    5. ' ' → logprob: -14.713960647583008
    6. '   ' → logprob: -15.088960647583008
    7. '	N' → logprob: -15.338960647583008
    8. 'n' → logprob: -16.338960647583008
    9. '65' → logprob: -17.338960647583008
    10. ')' → logprob: -17.463960647583008

Token 10: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.08016602694988251
    2. ' and' → logprob: -3.2051661014556885
    3. ' <' → logprob: -3.9551661014556885
    4. '<=' → logprob: -4.580165863037109
    5. 'and' → logprob: -5.580165863037109
    6. ' ' → logprob: -6.205165863037109
    7. '<' → logprob: -6.830165863037109
    8. '<|end|>' → logprob: -10.20516586303711
    9. '[' → logprob: -10.83016586303711
    10. '<N' → logprob: -10.95516586303711

Token 11: ' ' (ID: 220)
  Prédit: '90'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '90' → logprob: -0.43142879009246826
    2. ' ' → logprob: -1.0564287900924683
    3. '122' → logprob: -6.181428909301758
    4. '91' → logprob: -7.556428909301758
    5. '66' → logprob: -10.681428909301758
    6. '70' → logprob: -11.056428909301758
    7. '67' → logprob: -11.306428909301758
    8. '126' → logprob: -11.306428909301758
    9. '65' → logprob: -11.431428909301758
    10. '9' → logprob: -12.056428909301758

Token 12: '90' (ID: 2744)
  Prédit: '90'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '90' → logprob: -0.0013010689290240407
    2. '122' → logprob: -7.126301288604736
    3. ' ' → logprob: -7.876301288604736
    4. '91' → logprob: -10.501300811767578
    5. '67' → logprob: -10.751300811767578
    6. '70' → logprob: -11.001300811767578
    7. '69' → logprob: -11.751300811767578
    8. '65' → logprob: -11.876300811767578
    9. '89' → logprob: -12.001300811767578
    10. '66' → logprob: -12.126300811767578

Token 13: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0005138330743648112
    2. ' :' → logprob: -7.625514030456543
    3. ':
' → logprob: -11.250514030456543
    4. ' and' → logprob: -12.375514030456543
    5. ':**' → logprob: -12.375514030456543
    6. '):' → logprob: -13.625514030456543
    7. '':' → logprob: -14.750514030456543
    8. '   ' → logprob: -14.875514030456543
    9. '>:' → logprob: -15.125514030456543
    10. ':return' → logprob: -15.375514030456543

Token 14: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5089566111564636
    2. ' print' → logprob: -1.6339566707611084
    3. 'print' → logprob: -1.7589566707611084
    4. '\n' → logprob: -5.008956432342529
    5. '    ' → logprob: -5.383956432342529
    6. '    
' → logprob: -5.383956432342529
    7. ' ' → logprob: -5.508956432342529
    8. ':' → logprob: -6.008956432342529
    9. '```' → logprob: -6.133956432342529
    10. ':
' → logprob: -6.383956432342529

Token 15: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.030871855095028877
    2. ' print' → logprob: -3.530871868133545
    3. '   ' → logprob: -6.905871868133545
    4. 'chr' → logprob: -9.905871391296387
    5. '```' → logprob: -10.780871391296387
    6. ' ' → logprob: -11.155871391296387
    7. 'pr' → logprob: -12.530871391296387
    8. 'ch' → logprob: -12.905871391296387
    9. 'c' → logprob: -12.905871391296387
    10. ' chr' → logprob: -12.905871391296387

Token 16: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7765145897865295
    2. '(chr' → logprob: -0.7765145897865295
    3. '("' → logprob: -2.7765145301818848
    4. '('' → logprob: -4.276514530181885
    5. '("("' → logprob: -5.651514530181885
    6. 'chr' → logprob: -8.776515007019043
    7. '()' → logprob: -10.526515007019043
    8. '("(' → logprob: -10.776515007019043
    9. '("""' → logprob: -10.776515007019043
    10. '((' → logprob: -11.151515007019043

Token 17: '1' (ID: 16)
  Prédit: 'chr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'chr' → logprob: -0.004926208406686783
    2. ' chr' → logprob: -6.1299262046813965
    3. '"' → logprob: -6.5049262046813965
    4. ''' → logprob: -7.1299262046813965
    5. '(chr' → logprob: -9.004926681518555
    6. '   ' → logprob: -9.254926681518555
    7. '"'' → logprob: -9.629926681518555
    8. ''"' → logprob: -10.004926681518555
    9. ' ' → logprob: -10.504926681518555
    10. ''A' → logprob: -10.754926681518555

Token 18: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.1875571544806007e-05
    2. ')
' → logprob: -12.125011444091797
    3. ' )' → logprob: -12.750011444091797
    4. '0' → logprob: -13.375011444091797
    5. '))' → logprob: -15.375011444091797
    6. '6' → logprob: -15.625011444091797
    7. '*' → logprob: -15.750011444091797
    8. ')
' → logprob: -15.875011444091797
    9. ' ' → logprob: -15.875011444091797
    10. '   ' → logprob: -16.250011444091797

Token 19: 'elif' (ID: 29767)
  Prédit: 'elif'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'elif' → logprob: -0.26065123081207275
    2. 'else' → logprob: -1.5106512308120728
    3. ' elif' → logprob: -5.260651111602783
    4. ' else' → logprob: -5.760651111602783
    5. '<|end|>' → logprob: -9.010651588439941
    6. '```' → logprob: -9.260651588439941
    7. ')' → logprob: -10.135651588439941
    8. '	elif' → logprob: -11.010651588439941
    9. 'el' → logprob: -11.885651588439941
    10. '[' → logprob: -12.135651588439941

Token 20: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.017524976283311844
    2. '32' → logprob: -4.1425251960754395
    3. '97' → logprob: -7.6425251960754395
    4. '65' → logprob: -7.8925251960754395
    5. '33' → logprob: -8.392524719238281
    6. ' N' → logprob: -8.892524719238281
    7. '  ' → logprob: -10.017524719238281
    8. '   ' → logprob: -10.017524719238281
    9. '48' → logprob: -10.267524719238281
    10. '96' → logprob: -10.642524719238281

Token 21: '97' (ID: 5170)
  Prédit: '97'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '97' → logprob: -0.18665239214897156
    2. ' ' → logprob: -1.811652421951294
    3. '65' → logprob: -5.311652183532715
    4. '48' → logprob: -7.061652183532715
    5. '32' → logprob: -7.186652183532715
    6. '96' → logprob: -9.561652183532715
    7. '95' → logprob: -10.311652183532715
    8. ' N' → logprob: -10.311652183532715
    9. '  ' → logprob: -10.561652183532715
    10. '   ' → logprob: -10.811652183532715

Token 22: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.0022014055866748095
    2. '<=' → logprob: -6.127201557159424
    3. ' ' → logprob: -11.377201080322266
    4. ' ' → logprob: -13.627201080322266
    5. ' <' → logprob: -13.877201080322266
    6. ' ≤' → logprob: -14.502201080322266
    7. '  ' → logprob: -15.002201080322266
    8. ' <=",' → logprob: -15.002201080322266
    9. '   ' → logprob: -15.252201080322266
    10. '<|end|>' → logprob: -15.502201080322266

Token 23: ' N' (ID: 478)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.28115350008010864
    2. ' N' → logprob: -1.4061534404754639
    3. ' ' → logprob: -13.406153678894043
    4. '	N' → logprob: -14.156153678894043
    5. ' ' → logprob: -15.156153678894043
    6. '   ' → logprob: -15.281153678894043
    7. '<|end|>' → logprob: -15.656153678894043
    8. '>N' → logprob: -16.531152725219727
    9. 'n' → logprob: -16.781152725219727
    10. '  ' → logprob: -17.156152725219727

Token 24: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.01825178600847721
    2. '<=' → logprob: -4.018251895904541
    3. ' and' → logprob: -9.643251419067383
    4. ' ' → logprob: -10.768251419067383
    5. 'and' → logprob: -11.768251419067383
    6. ' <' → logprob: -12.518251419067383
    7. ' ' → logprob: -13.518251419067383
    8. '<' → logprob: -13.893251419067383
    9. '   ' → logprob: -14.268251419067383
    10. '```' → logprob: -14.768251419067383

Token 25: ' ' (ID: 220)
  Prédit: '122'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '122' → logprob: -0.034462254494428635
    2. ' ' → logprob: -3.4094622135162354
    3. '1' → logprob: -7.7844624519348145
    4. '12' → logprob: -8.034461975097656
    5. '112' → logprob: -10.284461975097656
    6. '121' → logprob: -11.284461975097656
    7. '11' → logprob: -12.034461975097656
    8. '   ' → logprob: -12.409461975097656
    9. '123' → logprob: -12.409461975097656
    10. '127' → logprob: -12.534461975097656

Token 26: '122' (ID: 14785)
  Prédit: '122'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '122' → logprob: -0.002341396640986204
    2. '1' → logprob: -7.127341270446777
    3. '12' → logprob: -7.127341270446777
    4. ' ' → logprob: -7.252341270446777
    5. '121' → logprob: -11.752341270446777
    6. '112' → logprob: -12.252341270446777
    7. '11' → logprob: -12.627341270446777
    8. '```' → logprob: -13.627341270446777
    9. '127' → logprob: -13.752341270446777
    10. '123' → logprob: -13.752341270446777

Token 27: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -2.057743949990254e-05
    2. ':
' → logprob: -11.000020980834961
    3. '   ' → logprob: -13.375020980834961
    4. '):' → logprob: -13.500020980834961
    5. ' :' → logprob: -14.250020980834961
    6. ':**' → logprob: -16.12502098083496
    7. '>:' → logprob: -17.37502098083496
    8. '+:' → logprob: -18.00002098083496
    9. ':

' → logprob: -18.50002098083496
    10. '：' → logprob: -18.62502098083496

Token 28: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03680601343512535
    2. '       ' → logprob: -3.536806106567383
    3. '    ' → logprob: -5.286806106567383
    4. 'print' → logprob: -7.036806106567383
    5. ' ' → logprob: -7.161806106567383
    6. ' print' → logprob: -9.161806106567383
    7. '     ' → logprob: -9.411806106567383
    8. '  ' → logprob: -10.536806106567383
    9. '      ' → logprob: -11.411806106567383
    10. ' ' → logprob: -11.536806106567383

Token 29: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7752221822738647
    2. 'print' (adapté à ' print') → logprob: -0.7752221822738647
    3. ' print' → logprob: -2.9002223014831543
    4. '       ' → logprob: -3.7752223014831543
    5. '    ' → logprob: -7.525222301483154
    6. '```' → logprob: -9.400221824645996
    7. ' ' → logprob: -9.525221824645996
    8. '     ' → logprob: -10.025221824645996
    9. ' ' → logprob: -10.650221824645996
    10. '	print' → logprob: -10.650221824645996

Token 30: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -7.896309739408025e-07
    2. '()' → logprob: -15.000000953674316
    3. '1' → logprob: -16.125
    4. '((' → logprob: -16.375
    5. ' (' → logprob: -16.75
    6. '2' → logprob: -17.125
    7. '('' → logprob: -17.25
    8. '(
' → logprob: -18.125
    9. '(-' → logprob: -18.125
    10. '   ' → logprob: -18.5

Token 31: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.014218631200492382
    2. '1' → logprob: -4.389218807220459
    3. '0' → logprob: -6.389218807220459
    4. ' ' → logprob: -10.6392183303833
    5. ')' → logprob: -13.3892183303833
    6. '3' → logprob: -13.7642183303833
    7. '   ' → logprob: -14.3892183303833
    8. '-' → logprob: -15.1392183303833
    9. '(' → logprob: -15.2642183303833
    10. '```' → logprob: -15.5142183303833

Token 32: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0001266613689949736
    2. ':' → logprob: -9.625126838684082
    3. ')
' → logprob: -9.875126838684082
    4. 'else' → logprob: -12.750126838684082
    5. ' )' → logprob: -13.000126838684082
    6. '   ' → logprob: -13.125126838684082
    7. ':)' → logprob: -14.250126838684082
    8. ' else' → logprob: -14.750126838684082
    9. '):' → logprob: -15.375126838684082
    10. '```' → logprob: -15.750126838684082

Token 33: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.0010338802821934223
    2. 'elif' → logprob: -7.001033782958984
    3. ' else' → logprob: -9.126033782958984
    4. '```' → logprob: -11.876033782958984
    5. '<|end|>' → logprob: -12.626033782958984
    6. '_else' → logprob: -13.626033782958984
    7. ')' → logprob: -14.251033782958984
    8. '...' → logprob: -14.876033782958984
    9. 'elser' → logprob: -15.251033782958984
    10. 'e' → logprob: -15.876033782958984

Token 34: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -7.226628895296017e-06
    2. ':
' → logprob: -12.375007629394531
    3. '   ' → logprob: -13.375007629394531
    4. ' :' → logprob: -14.250007629394531
    5. '():' → logprob: -15.125007629394531
    6. ':return' → logprob: -15.750007629394531
    7. ':def' → logprob: -16.50000762939453
    8. '):' → logprob: -16.75000762939453
    9. ':**' → logprob: -16.87500762939453
    10. '(' → logprob: -17.50000762939453

Token 35: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03936392068862915
    2. ' print' → logprob: -3.7893638610839844
    3. 'print' → logprob: -4.164363861083984
    4. '    ' → logprob: -8.039363861083984
    5. '```' → logprob: -9.664363861083984
    6. ' ' → logprob: -11.164363861083984
    7. ' ' → logprob: -11.664363861083984
    8. '`' → logprob: -12.164363861083984
    9. '(print' → logprob: -12.164363861083984
    10. '	print' → logprob: -12.164363861083984

Token 36: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.07039785385131836
    2. ' print' → logprob: -2.6953978538513184
    3. '   ' → logprob: -7.945397853851318
    4. '```' → logprob: -9.320398330688477
    5. ' ' → logprob: -12.195398330688477
    6. '    ' → logprob: -12.695398330688477
    7. '(print' → logprob: -12.945398330688477
    8. '	print' → logprob: -13.070398330688477
    9. '0' → logprob: -14.070398330688477
    10. '`' → logprob: -14.195398330688477

Token 37: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004809245932847261
    2. '()' → logprob: -5.379809379577637
    3. '('' → logprob: -8.754809379577637
    4. '("("' → logprob: -11.629809379577637
    5. '(False' → logprob: -12.379809379577637
    6. '(N' → logprob: -12.629809379577637
    7. '(True' → logprob: -12.754809379577637
    8. '(`' → logprob: -13.129809379577637
    9. '(None' → logprob: -13.129809379577637
    10. '("' → logprob: -13.254809379577637

Token 38: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.20176638662815094
    2. '3' → logprob: -1.7017663717269897
    3. ')' → logprob: -8.451766014099121
    4. '-' → logprob: -9.576766014099121
    5. '(' → logprob: -10.076766014099121
    6. ' ' → logprob: -10.951766014099121
    7. '   ' → logprob: -13.076766014099121
    8. '```' → logprob: -14.076766014099121
    9. '"' → logprob: -14.139266014099121
    10. '(-' → logprob: -14.201766014099121

Token 39: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.128163257315464e-07
    2. ')
' → logprob: -16.0
    3. ' )' → logprob: -16.625
    4. '))' → logprob: -17.25
    5. ')`' → logprob: -18.125
    6. '')' → logprob: -18.5
    7. '`)' → logprob: -18.75
    8. '()' → logprob: -19.0
    9. '）' → logprob: -20.125
    10. '())' → logprob: -20.25


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 37
Tokens correctement prédits (1ère position, stricte): 20
Tokens correctement prédits (1ère position, avec adaptation): 22
Tokens correctement prédits (top 10): 33
Précision stricte (1ère position): 54.05%
Précision adaptée (1ère position): 59.46%
Précision (top 10): 89.19%
================================================================================
