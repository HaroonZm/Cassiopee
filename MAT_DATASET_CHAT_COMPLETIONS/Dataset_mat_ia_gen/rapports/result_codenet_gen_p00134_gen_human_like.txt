================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 16:56:36
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
total = 0
for _ in range(n):
    total += int(input())
print(total // n)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00038134094211272895
    2. '(n' → logprob: -9.000381469726562
    3. ''' → logprob: -9.500381469726562
    4. '('' → logprob: -10.125381469726562
    5. '```' → logprob: -10.125381469726562
    6. '`' → logprob: -10.750381469726562
    7. '("("' → logprob: -10.750381469726562
    8. '()' → logprob: -11.250381469726562
    9. 'n' → logprob: -11.625381469726562
    10. ')' → logprob: -12.000381469726562

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0733630508184433
    2. ')' → logprob: -2.8233630657196045
    3. '()' → logprob: -4.698362827301025
    4. '())' → logprob: -6.948362827301025
    5. '```' → logprob: -8.198363304138184
    6. '(
' → logprob: -8.448363304138184
    7. '('' → logprob: -8.948363304138184
    8. '(()' → logprob: -9.073363304138184
    9. '`' → logprob: -9.198363304138184
    10. '("("' → logprob: -9.698363304138184

Token 5: 'total' (ID: 9577)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.6515942215919495
    2. 'for' → logprob: -1.4015941619873047
    3. 'i' → logprob: -2.1515941619873047
    4. 's' → logprob: -2.7765941619873047
    5. 'x' → logprob: -4.651594161987305
    6. ')' → logprob: -5.151594161987305
    7. 'a' → logprob: -5.401594161987305
    8. '*' → logprob: -5.401594161987305
    9. ' ' → logprob: -5.651594161987305
    10. 'f' → logprob: -5.901594161987305

Token 6: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.7527324557304382
    2. ' +=' → logprob: -0.8777324557304382
    3. '+' → logprob: -2.752732515335083
    4. '_space' → logprob: -3.877732515335083
    5. ' ' → logprob: -4.502732276916504
    6. ')' → logprob: -5.627732276916504
    7. ' +' → logprob: -5.752732276916504
    8. '+=' → logprob: -5.877732276916504
    9. ' =' → logprob: -6.252732276916504
    10. '=' → logprob: -6.377732276916504

Token 7: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3135209381580353
    2. '0' → logprob: -1.313520908355713
    3. ' n' → logprob: -8.313521385192871
    4. 'n' → logprob: -11.313521385192871
    5. ' ' → logprob: -14.313521385192871
    6. ' int' → logprob: -15.563521385192871
    7. 'int' → logprob: -15.813521385192871
    8. ' sum' → logprob: -16.063520431518555
    9. 'sum' → logprob: -16.188520431518555
    10. ' total' → logprob: -16.438520431518555

Token 8: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0002764710516203195
    2. 'n' → logprob: -8.500276565551758
    3. ' ' → logprob: -9.625276565551758
    4. 'sum' → logprob: -12.625276565551758
    5. ' n' → logprob: -13.250276565551758
    6. 'total' → logprob: -14.500276565551758
    7. 'int' → logprob: -14.625276565551758
    8. 'input' → logprob: -15.375276565551758
    9. '"' → logprob: -16.125276565551758
    10. '+' → logprob: -16.375276565551758

Token 9: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.16924671828746796
    2. '
' → logprob: -2.0442466735839844
    3. ' for' → logprob: -4.169246673583984
    4. '\n' → logprob: -4.794246673583984
    5. '```' → logprob: -6.544246673583984
    6. ' 
' → logprob: -8.044246673583984
    7. '<|end|>' → logprob: -8.919246673583984
    8. '\' → logprob: -9.169246673583984
    9. '' → logprob: -9.419246673583984
    10. 'n' → logprob: -9.544246673583984

Token 10: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0014972452772781253
    2. '
' → logprob: -7.251497268676758
    3. ' for' → logprob: -8.001497268676758
    4. '\n' → logprob: -8.126497268676758
    5. '```' → logprob: -9.251497268676758
    6. '\' → logprob: -10.001497268676758
    7. '`' → logprob: -12.501497268676758
    8. '' → logprob: -12.626497268676758
    9. '``' → logprob: -13.251497268676758
    10. ' 
' → logprob: -13.876497268676758

Token 11: ' _' (ID: 1175)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.17790444195270538
    2. ' i' → logprob: -1.927904486656189
    3. ' n' → logprob: -4.1779046058654785
    4. '  ' → logprob: -6.1779046058654785
    5. 'i' → logprob: -10.05290412902832
    6. ' ‌' → logprob: -10.92790412902832
    7. '_' → logprob: -12.05290412902832
    8. ' )' → logprob: -12.05290412902832
    9. 'n' → logprob: -12.42790412902832
    10. ' ' → logprob: -12.42790412902832

Token 12: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.014458579942584038
    2. 'in' → logprob: -4.389458656311035
    3. ' ' → logprob: -6.264458656311035
    4. 'n' → logprob: -11.389458656311035
    5. ' n' → logprob: -11.389458656311035
    6. ' i' → logprob: -12.014458656311035
    7. 'range' → logprob: -12.639458656311035
    8. '  ' → logprob: -13.264458656311035
    9. '<|end|>' → logprob: -13.389458656311035
    10. 'space' → logprob: -13.764458656311035

Token 13: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.6931506395339966
    2. 'range' → logprob: -0.6931506395339966
    3. '(range' → logprob: -13.318150520324707
    4. '	range' → logprob: -14.318150520324707
    5. 'n' → logprob: -15.068150520324707
    6. 'in' → logprob: -15.193150520324707
    7. ' ' → logprob: -15.443150520324707
    8. ' xrange' → logprob: -16.068151473999023
    9. ' in' → logprob: -16.568151473999023
    10. '_range' → logprob: -16.693151473999023

Token 14: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.5759807229042053
    2. '(' → logprob: -0.8259807229042053
    3. ' (' → logprob: -10.575981140136719
    4. '(range' → logprob: -11.950981140136719
    5. ' n' → logprob: -12.700981140136719
    6. '(
' → logprob: -13.075981140136719
    7. '(int' → logprob: -13.825981140136719
    8. 'n' → logprob: -13.950981140136719
    9. '(i' → logprob: -14.700981140136719
    10. '(len' → logprob: -14.825981140136719

Token 15: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.014238606207072735
    2. ')' → logprob: -4.2642388343811035
    3. ':' → logprob: -10.139238357543945
    4. '):
' → logprob: -10.639238357543945
    5. '+' → logprob: -12.514238357543945
    6. ' ):' → logprob: -12.514238357543945
    7. '```' → logprob: -14.014238357543945
    8. ',' → logprob: -14.389238357543945
    9. ')**' → logprob: -14.764238357543945
    10. ' )' → logprob: -15.014238357543945

Token 16: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2750822901725769
    2. '    ' → logprob: -1.9000823497772217
    3. ' input' → logprob: -3.1500823497772217
    4. '    
' → logprob: -4.025082111358643
    5. ' total' → logprob: -4.900082111358643
    6. '     
' → logprob: -5.150082111358643
    7. '```' → logprob: -5.275082111358643
    8. ' 
' → logprob: -5.650082111358643
    9. 'input' → logprob: -5.650082111358643
    10. ' ' → logprob: -6.275082111358643

Token 17: ' total' (ID: 3609)
  Prédit: ' line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' line' → logprob: -1.1159261465072632
    2. ' number' → logprob: -1.6159261465072632
    3. ' num' → logprob: -1.8659261465072632
    4. ' value' → logprob: -2.4909262657165527
    5. 'num' → logprob: -2.6159262657165527
    6. '   ' → logprob: -3.1159262657165527
    7. ' total' → logprob: -3.2409262657165527
    8. 'value' → logprob: -3.7409262657165527
    9. 'number' → logprob: -4.490926265716553
    10. 'total' (adapté à ' total') → logprob: -4.615926265716553

Token 18: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.0064564780332148075
    2. '+=' → logprob: -5.63145637512207
    3. '+' → logprob: -5.88145637512207
    4. ' +' → logprob: -10.38145637512207
    5. '    ' → logprob: -12.00645637512207
    6. ' ' → logprob: -12.13145637512207
    7. '<|end|>' → logprob: -12.50645637512207
    8. '   ' → logprob: -12.75645637512207
    9. '+='' → logprob: -13.00645637512207
    10. 'space' → logprob: -13.25645637512207

Token 19: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.4741433262825012
    2. ' int' → logprob: -0.9741433262825012
    3. '1' → logprob: -10.099143028259277
    4. ' ' → logprob: -11.849143028259277
    5. 'input' → logprob: -11.974143028259277
    6. ' input' → logprob: -12.224143028259277
    7. '(int' → logprob: -13.474143028259277
    8. '<int' → logprob: -13.599143028259277
    9. 'float' → logprob: -13.849143028259277
    10. ' float' → logprob: -14.224143028259277

Token 20: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.2519502341747284
    2. '(' → logprob: -1.5019502639770508
    3. '(
' → logprob: -12.25195026397705
    4. ' (' → logprob: -12.25195026397705
    5. '('' → logprob: -12.75195026397705
    6. '(

' → logprob: -13.37695026397705
    7. '(in' → logprob: -13.50195026397705
    8. 'input' → logprob: -14.00195026397705
    9. '("("' → logprob: -14.00195026397705
    10. '(user' → logprob: -14.12695026397705

Token 21: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.01870034635066986
    2. '()' → logprob: -4.018700122833252
    3. ')' → logprob: -7.768700122833252
    4. '()))' → logprob: -9.39370059967041
    5. '(' → logprob: -10.76870059967041
    6. ' ())' → logprob: -11.14370059967041
    7. '())
' → logprob: -12.51870059967041
    8. '();)' → logprob: -14.01870059967041
    9. '))' → logprob: -14.26870059967041
    10. '()`' → logprob: -14.64370059967041

Token 22: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0026460483204573393
    2. '\n' → logprob: -7.377645969390869
    3. ')' → logprob: -7.502645969390869
    4. '
' → logprob: -7.627645969390869
    5. '\' → logprob: -8.252646446228027
    6. ' print' → logprob: -8.377646446228027
    7. '#' → logprob: -8.752646446228027
    8. '```' → logprob: -8.752646446228027
    9. 'if' → logprob: -10.252646446228027
    10. '*' → logprob: -11.002646446228027

Token 23: '(total' (ID: 39744)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0018035804387181997
    2. '('' → logprob: -7.001803398132324
    3. '(total' → logprob: -7.376803398132324
    4. '("("' → logprob: -8.251803398132324
    5. '()' → logprob: -13.251803398132324
    6. '(`' → logprob: -14.126803398132324
    7. ' (' → logprob: -14.626803398132324
    8. '(
' → logprob: -14.876803398132324
    9. '((' → logprob: -15.251803398132324
    10. '(sum' → logprob: -15.376803398132324

Token 24: ' //' (ID: 602)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -3.054500666621607e-06
    2. '))' → logprob: -13.00000286102295
    3. ' )' → logprob: -15.00000286102295
    4. '`)' → logprob: -15.62500286102295
    5. ')`' → logprob: -16.125003814697266
    6. '')' → logprob: -16.625003814697266
    7. '```' → logprob: -17.375003814697266
    8. ')
' → logprob: -18.125003814697266
    9. '#' → logprob: -18.375003814697266
    10. ')}' → logprob: -18.375003814697266

Token 25: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.04858759790658951
    2. ' n' → logprob: -3.0485875606536865
    3. '(n' → logprob: -15.798587799072266
    4. ')n' → logprob: -17.673587799072266
    5. ' ' → logprob: -17.798587799072266
    6. '_n' → logprob: -18.048587799072266
    7. '	n' → logprob: -18.173587799072266
    8. 'max' → logprob: -19.423587799072266
    9. ')' → logprob: -19.423587799072266
    10. '(' → logprob: -19.798587799072266

Token 26: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.980854959692806e-05
    2. '`)' → logprob: -9.875069618225098
    3. ')
' → logprob: -12.250069618225098
    4. ' )' → logprob: -12.375069618225098
    5. '```' → logprob: -12.750069618225098
    6. '')' → logprob: -13.000069618225098
    7. '#' → logprob: -13.500069618225098
    8. '))' → logprob: -14.375069618225098
    9. '*' → logprob: -14.500069618225098
    10. ')`' → logprob: -14.500069618225098


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 24
Tokens correctement prédits (1ère position, stricte): 11
Tokens correctement prédits (1ère position, avec adaptation): 11
Tokens correctement prédits (top 10): 19
Précision stricte (1ère position): 45.83%
Précision adaptée (1ère position): 45.83%
Précision (top 10): 79.17%
================================================================================
