================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:12:45
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import sys
sys.setrecursionlimit(10**7)

N=int(sys.stdin.readline())
prog=[]
lines=[]
vars_set=set()
for _ in range(N):
    parts=sys.stdin.readline().rstrip().split()
    line_no=int(parts[0])
    cmd=parts[1]
    args=parts[2:]
    prog.append((line_no,cmd,args))
    lines.append(line_no)
    for a in args:
        if len(a)==1 and a.isalpha():
            vars_set.add(a)

line_to_idx={line:i for i,line in enumerate(lines)}
variables=sorted(vars_set)

# Initialize variables to zero
init_vars={v:0 for v in variables}

# Each instruction type and args:
# ADD var1 var2 var3 or ADD var1 var2 con
# SUB var1 var2 var3 or SUB var1 var2 con
# SET var1 var2 or SET var1 con
# IF var1 dest
# HALT

# We'll simulate the execution with cycle detection.

# state: (pc, tuple(var_values)) to detect loops
# But var values max 0..15 or else stops early
# Actually variable values limited to 0..15 inclusive, but can become <0 or >=16 during operation (then stops)
# via assignment check: if assigned value <0 or >=16 then stops (does not update)
# So value possible in 0..15 inclusive.

# But variables can be max 5 distinct, each in 0..15 => 16^5=1_048_576 max states -> feasible to memoize for loop detection

def encode_vars(vars_dict):
    # pack vars in dict to tuple of values in order of variables
    return tuple(vars_dict[v] for v in variables)

visited=set()

def run():
    vars_val=init_vars.copy()
    pc=0
    stack=set()
    # We'll do iterative DFS with memo and stack to detect infinite loop

    # But since program runs single path, we can simulate step by step keeping set of visited states (pc + vars)
    # If we visit same pc+vars again => inf

    while True:
        state=(pc,encode_vars(vars_val))
        if state in visited:
            return None # inf loop
        visited.add(state)

        if pc<0 or pc>=N:
            # Jumped to non-existent line number? Actually handled below jump
            # but if pc out of range, means out of program, stop
            # According to problem: jumping to line number not in program stops program.
            # pc is index in prog list
            return vars_val

        line_no,cmd,args=prog[pc]
        if cmd=='HALT':
            return vars_val

        jump_to_next=True

        def get_val(x):
            if x.isalpha():
                return vars_val[x]
            else:
                return int(x)

        if cmd=='ADD':
            var1=args[0]
            var2=args[1]
            op3=args[2]
            v2=vars_val[var2]
            v3=get_val(op3)
            val=v2+v3
            if val<0 or val>=16:
                # stop immediately, do not update
                return vars_val
            vars_val[var1]=val
        elif cmd=='SUB':
            var1=args[0]
            var2=args[1]
            op3=args[2]
            v2=vars_val[var2]
            v3=get_val(op3)
            val=v2 - v3
            if val<0 or val>=16:
                return vars_val
            vars_val[var1]=val
        elif cmd=='SET':
            var1=args[0]
            op2=args[1]
            if op2.isalpha():
                val=vars_val[op2]
            else:
                val=int(op2)
            if val<0 or val>=16:
                return vars_val
            vars_val[var1]=val
        elif cmd=='IF':
            var1=args[0]
            dest=int(args[1])
            if vars_val[var1]!=0:
                if dest not in line_to_idx:
                    # Jump to non-existent line no, stop immediately
                    return vars_val
                pc=line_to_idx[dest]
                jump_to_next=False
        if jump_to_next:
            pc+=1
            if pc==N:
                # end of program after executing
                return vars_val

def main():
    res=run()
    if res is None:
        print('inf')
    else:
        for v in variables:
            print(f'{v}={res[v]}')

main()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: '
' (ID: 198)
  → Token d'amorce (pas de prédiction)

Token 3: 'sys' (ID: 17324)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.6975938677787781
    2. '\n' → logprob: -0.8225938677787781
    3. '<|end|>' → logprob: -3.572593927383423
    4. '\' → logprob: -4.322593688964844
    5. 'newline' → logprob: -5.072593688964844
    6. 'import' → logprob: -5.322593688964844
    7. '<|end|>' → logprob: -5.947593688964844
    8. '```' → logprob: -6.572593688964844
    9. '' → logprob: -6.697593688964844
    10. '
' → logprob: -6.947593688964844

Token 4: '.set' (ID: 1230)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -2.2246291337069124e-05
    2. '[' → logprob: -12.250021934509277
    3. ' .' → logprob: -12.500021934509277
    4. '.import' → logprob: -13.250021934509277
    5. '.`' → logprob: -13.625021934509277
    6. '.user' → logprob: -14.125021934509277
    7. '.readline' → logprob: -14.250021934509277
    8. '.next' → logprob: -14.375021934509277
    9. '```' → logprob: -14.375021934509277
    10. '."""' → logprob: -14.375021934509277

Token 5: 'rec' (ID: 9285)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -0.29594722390174866
    2. '_trace' → logprob: -2.170947313308716
    3. 'trace' → logprob: -3.795947313308716
    4. 't' → logprob: -4.420947074890137
    5. '_exc' → logprob: -4.420947074890137
    6. '_soft' → logprob: -4.795947074890137
    7. '_sys' → logprob: -4.795947074890137
    8. 'x' → logprob: -5.045947074890137
    9. 's' → logprob: -5.045947074890137
    10. '_encoding' → logprob: -5.170947074890137

Token 6: 'ursion' (ID: 41658)
  Prédit: 'ursion'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ursion' → logprob: -0.00019209683523513377
    2. 'ursive' → logprob: -8.875191688537598
    3. 'urs' → logprob: -11.000191688537598
    4. 'ur' → logprob: -11.750191688537598
    5. 'limit' → logprob: -12.000191688537598
    6. 'urf' → logprob: -12.125191688537598
    7. '_limit' → logprob: -12.625191688537598
    8. 'urse' → logprob: -13.000191688537598
    9. 'ursor' → logprob: -13.000191688537598
    10. 'ursively' → logprob: -13.250191688537598

Token 7: 'limit' (ID: 19698)
  Prédit: '_limit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_limit' → logprob: -0.15307803452014923
    2. 'limit' → logprob: -2.028078079223633
    3. '_depth' → logprob: -4.653078079223633
    4. '_' → logprob: -7.903078079223633
    5. 'depth' → logprob: -9.653078079223633
    6. ' limit' → logprob: -10.028078079223633
    7. '_rate' → logprob: -10.153078079223633
    8. '_error' → logprob: -10.403078079223633
    9. '_lim' → logprob: -10.653078079223633
    10. '_max' → logprob: -10.778078079223633

Token 8: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -1.0325924449716695e-05
    2. '(
' → logprob: -12.37501049041748
    3. ' (' → logprob: -12.50001049041748
    4. '(

' → logprob: -13.25001049041748
    5. '((' → logprob: -15.75001049041748
    6. '("("' → logprob: -15.87501049041748
    7. '('' → logprob: -16.875009536743164
    8. '(
' → logprob: -17.000009536743164
    9. '()' → logprob: -17.500009536743164
    10. '(None' → logprob: -17.500009536743164

Token 9: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.16023612022399902
    2. '100' → logprob: -1.910236120223999
    3. ' ' → logprob: -12.660236358642578
    4. '500' → logprob: -12.785236358642578
    5. '300' → logprob: -13.285236358642578
    6. '999' → logprob: -13.660236358642578
    7. '1' → logprob: -13.910236358642578
    8. '150' → logprob: -14.285236358642578
    9. '200' → logprob: -14.785236358642578
    10. '(' → logprob: -15.160236358642578

Token 10: '**' (ID: 410)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.09284054487943649
    2. '000' → logprob: -2.7178404331207275
    3. '00' → logprob: -3.8428404331207275
    4. '4' → logprob: -7.092840671539307
    5. '6' → logprob: -8.217840194702148
    6. '**' → logprob: -9.967840194702148
    7. '```' → logprob: -10.842840194702148
    8. '5' → logprob: -11.092840194702148
    9. '3' → logprob: -11.592840194702148
    10. '2' → logprob: -12.092840194702148

Token 11: '7' (ID: 22)
  Prédit: '7'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: -0.0031121151987463236
    2. '9' → logprob: -6.003112316131592
    3. '8' → logprob: -7.503112316131592
    4. '6' → logprob: -9.378111839294434
    5. ' ' → logprob: -16.25311279296875
    6. '```' → logprob: -16.37811279296875
    7. ')' → logprob: -18.50311279296875
    8. '(' → logprob: -19.62811279296875
    9. '``' → logprob: -20.00311279296875
    10. '}' → logprob: -20.75311279296875

Token 12: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -5.796184723294573e-06
    2. '))' → logprob: -12.500005722045898
    3. ' )' → logprob: -13.250005722045898
    4. ')
' → logprob: -15.375005722045898
    5. ')))' → logprob: -17.7500057220459
    6. ')`' → logprob: -18.2500057220459
    7. '),' → logprob: -18.3750057220459
    8. ')

' → logprob: -18.3750057220459
    9. '```' → logprob: -18.5000057220459
    10. ' ' → logprob: -18.7500057220459

Token 13: 'N' (ID: 45)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0005326599348336458
    2. '```' → logprob: -8.750533103942871
    3. '
' → logprob: -8.875533103942871
    4. '\' → logprob: -9.125533103942871
    5. 'n' → logprob: -9.875533103942871
    6. '

' → logprob: -11.500533103942871
    7. '
' → logprob: -11.500533103942871
    8. ' def' → logprob: -11.625533103942871
    9. ')' → logprob: -11.750533103942871
    10. '#' → logprob: -11.875533103942871

Token 14: '=int' (ID: 37431)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.7271348834037781
    2. ' ' → logprob: -1.3521349430084229
    3. ',' → logprob: -1.7271349430084229
    4. '=' → logprob: -2.852134943008423
    5. '.' → logprob: -4.727134704589844
    6. ' ,' → logprob: -4.852134704589844
    7. ')' → logprob: -6.852134704589844
    8. '[' → logprob: -6.977134704589844
    9. '  ' → logprob: -7.102134704589844
    10. '_' → logprob: -7.477134704589844

Token 15: '(sys' (ID: 41042)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0015894850948825479
    2. '(N' → logprob: -6.501589298248291
    3. ' (' → logprob: -10.37658977508545
    4. '(sys' → logprob: -10.50158977508545
    5. '('' → logprob: -12.00158977508545
    6. '(`' → logprob: -12.12658977508545
    7. '("("' → logprob: -12.37658977508545
    8. '```' → logprob: -13.12658977508545
    9. '(
' → logprob: -13.25158977508545
    10. '()' → logprob: -14.00158977508545

Token 16: '.stdin' (ID: 93480)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.7671427130699158
    2. '.stdin' → logprob: -1.3921427726745605
    3. '.readline' → logprob: -1.3921427726745605
    4. '.argv' → logprob: -3.3921427726745605
    5. '.read' → logprob: -5.7671427726745605
    6. '.input' → logprob: -7.0171427726745605
    7. ' .' → logprob: -8.017142295837402
    8. '.import' → logprob: -8.767142295837402
    9. '.)' → logprob: -9.392142295837402
    10. '.stdout' → logprob: -9.642142295837402

Token 17: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.0014870046870782971
    2. '.read' → logprob: -6.626486778259277
    3. '.' → logprob: -8.751486778259277
    4. '.readlines' → logprob: -13.626486778259277
    5. '.stdin' → logprob: -15.001486778259277
    6. ').' → logprob: -15.501486778259277
    7. '.READ' → logprob: -15.751486778259277
    8. '.Read' → logprob: -15.751486778259277
    9. ' .' → logprob: -15.876486778259277
    10. '.buffer' → logprob: -16.126487731933594

Token 18: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.07042495906352997
    2. '()' → logprob: -2.695425033569336
    3. '().' → logprob: -8.445425033569336
    4. ')' → logprob: -8.820425033569336
    5. '()[' → logprob: -10.070425033569336
    6. '())
' → logprob: -10.570425033569336
    7. ' ())' → logprob: -10.945425033569336
    8. '(' → logprob: -11.195425033569336
    9. '()))' → logprob: -11.820425033569336
    10. '()]' → logprob: -12.695425033569336

Token 19: 'prog' (ID: 73910)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.172531008720398
    2. 'a' → logprob: -1.547531008720398
    3. 'A' → logprob: -1.672531008720398
    4. ')' → logprob: -2.0475311279296875
    5. 'data' → logprob: -3.1725311279296875
    6. 'dp' → logprob: -3.2975311279296875
    7. 'tree' → logprob: -4.2975311279296875
    8. 'S' → logprob: -4.2975311279296875
    9. 'arr' → logprob: -4.6725311279296875
    10. 's' → logprob: -5.2975311279296875

Token 20: '=[]
' (ID: 63466)
  Prédit: 'ram'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ram' → logprob: -0.02344101294875145
    2. 'r' → logprob: -3.8984410762786865
    3. '[' → logprob: -7.398440837860107
    4. '_ram' → logprob: -7.773440837860107
    5. '_r' → logprob: -7.898440837860107
    6. '.r' → logprob: -7.898440837860107
    7. 'raph' → logprob: -8.023441314697266
    8. ' ram' → logprob: -8.523441314697266
    9. 'a' → logprob: -9.398441314697266
    10. 'rame' → logprob: -9.648441314697266

Token 21: 'lines' (ID: 10105)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.001172129064798355
    2. ' for' → logprob: -7.001172065734863
    3. '[' → logprob: -8.376172065734863
    4. '```' → logprob: -12.251172065734863
    5. '.for' → logprob: -12.376172065734863
    6. '\' → logprob: -12.376172065734863
    7. '(' → logprob: -12.626172065734863
    8. '\n' → logprob: -13.001172065734863
    9. '.' → logprob: -13.126172065734863
    10. '(for' → logprob: -13.251172065734863

Token 22: '=[]
' (ID: 63466)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.4554485082626343
    2. '=' → logprob: -1.2054485082626343
    3. '.append' → logprob: -2.830448627471924
    4. ' =' → logprob: -5.455448627471924
    5. '.=' → logprob: -6.830448627471924
    6. '=[]' → logprob: -7.330448627471924
    7. '[' → logprob: -7.830448627471924
    8. '_' → logprob: -8.580448150634766
    9. '[:]' → logprob: -8.955448150634766
    10. '.extend' → logprob: -8.955448150634766

Token 23: 'vars' (ID: 32791)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0005541055579669774
    2. ' for' → logprob: -7.500554084777832
    3. '```' → logprob: -15.000554084777832
    4. '<|end|>' → logprob: -15.125554084777832
    5. '	for' → logprob: -15.750554084777832
    6. '
' → logprob: -16.37555503845215
    7. '\' → logprob: -17.00055503845215
    8. '[' → logprob: -17.12555503845215
    9. ')' → logprob: -17.50055503845215
    10. 'For' → logprob: -17.62555503845215

Token 24: '_set' (ID: 5451)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.08014677464962006
    2. ' =' → logprob: -2.7051467895507812
    3. '_' → logprob: -5.455146789550781
    4. '=[]' → logprob: -5.955146789550781
    5. '[' → logprob: -6.205146789550781
    6. '.' → logprob: -7.455146789550781
    7. '[:]' → logprob: -8.705146789550781
    8. '=[' → logprob: -9.205146789550781
    9. '_=' → logprob: -9.205146789550781
    10. ',' → logprob: -9.830146789550781

Token 25: '=set' (ID: 166509)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.14281786978244781
    2. '=' → logprob: -2.017817974090576
    3. '.' → logprob: -10.017817497253418
    4. '.add' → logprob: -10.642817497253418
    5. ' ' → logprob: -10.642817497253418
    6. '=set' → logprob: -10.767817497253418
    7. '={}' → logprob: -11.892817497253418
    8. ' ={' → logprob: -12.642817497253418
    9. ' =
' → logprob: -12.767817497253418
    10. ' |=' → logprob: -12.767817497253418

Token 26: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.06234307959675789
    2. '()' → logprob: -2.812343120574951
    3. '([' → logprob: -9.437342643737793
    4. '((' → logprob: -9.812342643737793
    5. '(
' → logprob: -9.937342643737793
    6. '([(' → logprob: -10.437342643737793
    7. ')' → logprob: -10.812342643737793
    8. '([]' → logprob: -10.812342643737793
    9. '(()' → logprob: -11.187342643737793
    10. '(

' → logprob: -11.312342643737793

Token 27: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.006138530559837818
    2. ' for' → logprob: -5.131138324737549
    3. '<|end|>' → logprob: -8.631138801574707
    4. '
' → logprob: -11.131138801574707
    5. '<|end|>' → logprob: -12.506138801574707
    6. '```' → logprob: -12.756138801574707
    7. '[' → logprob: -12.881138801574707
    8. '\' → logprob: -13.631138801574707
    9. '\n' → logprob: -13.881138801574707
    10. ':' → logprob: -14.131138801574707

Token 28: ' _' (ID: 1175)
  Prédit: ' _'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' _' → logprob: -0.12565891444683075
    2. ' i' → logprob: -2.5006589889526367
    3. ' ' → logprob: -3.3756589889526367
    4. '_' → logprob: -6.375658988952637
    5. ' line' → logprob: -9.500658988952637
    6. 'i' → logprob: -9.750658988952637
    7. '  ' → logprob: -11.750658988952637
    8. ' range' → logprob: -12.625658988952637
    9. ' x' → logprob: -13.750658988952637
    10. ' ' → logprob: -13.875658988952637

Token 29: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.1274375319480896
    2. 'in' → logprob: -2.1274375915527344
    3. ' ' → logprob: -7.752437591552734
    4. 'i' → logprob: -10.502437591552734
    5. 'n' → logprob: -11.252437591552734
    6. 'import' → logprob: -11.877437591552734
    7. '```' → logprob: -11.877437591552734
    8. '	in' → logprob: -12.252437591552734
    9. '  ' → logprob: -12.752437591552734
    10. 'range' → logprob: -13.002437591552734

Token 30: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.029833335429430008
    2. ' range' → logprob: -3.5298333168029785
    3. 'prog' → logprob: -10.029833793640137
    4. 'sys' → logprob: -10.404833793640137
    5. ' sys' → logprob: -13.904833793640137
    6. 'lines' → logprob: -13.904833793640137
    7. 'input' → logprob: -14.029833793640137
    8. 'ran' → logprob: -14.404833793640137
    9. 'program' → logprob: -14.779833793640137
    10. ' ' → logprob: -14.779833793640137

Token 31: '(N' (ID: 10564)
  Prédit: '(N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(N' → logprob: -0.07891666889190674
    2. '(' → logprob: -2.578916549682617
    3. ' (' → logprob: -11.078916549682617
    4. '(n' → logprob: -12.578916549682617
    5. '(int' → logprob: -12.703916549682617
    6. '(
' → logprob: -13.203916549682617
    7. 'N' → logprob: -13.828916549682617
    8. '()' → logprob: -14.453916549682617
    9. '(range' → logprob: -14.578916549682617
    10. '(len' → logprob: -15.078916549682617

Token 32: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.02185278758406639
    2. ')' → logprob: -3.896852731704712
    3. ' ):' → logprob: -7.146852970123291
    4. '):
' → logprob: -8.146852493286133
    5. ':' → logprob: -8.521852493286133
    6. ' )' → logprob: -11.021852493286133
    7. ',' → logprob: -11.896852493286133
    8. '+' → logprob: -13.396852493286133
    9. ')：' → logprob: -13.396852493286133
    10. '):
' → logprob: -13.646852493286133

Token 33: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5048379898071289
    2. ' lines' → logprob: -1.629837989807129
    3. ' line' → logprob: -1.629837989807129
    4. ' code' → logprob: -6.254837989807129
    5. ' s' → logprob: -6.629837989807129
    6. '	lines' → logprob: -8.129837989807129
    7. '	line' → logprob: -8.504837989807129
    8. ' prog' → logprob: -8.754837989807129
    9. ' readline' → logprob: -8.879837989807129
    10. '   ' → logprob: -8.879837989807129

Token 34: ' parts' (ID: 7881)
  Prédit: ' line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' line' → logprob: -0.11484412103891373
    2. 'line' → logprob: -2.3648440837860107
    3. ' lines' → logprob: -5.36484432220459
    4. ' l' → logprob: -6.36484432220459
    5. 'l' → logprob: -6.48984432220459
    6. ' code' → logprob: -6.48984432220459
    7. 'code' → logprob: -6.61484432220459
    8. 'lines' → logprob: -7.11484432220459
    9. ' parts' → logprob: -7.36484432220459
    10. '   ' → logprob: -7.48984432220459

Token 35: '=sys' (ID: 149200)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.08971937000751495
    2. ' =' → logprob: -2.464719295501709
    3. '=sys' → logprob: -7.339719295501709
    4. '=line' → logprob: -9.589719772338867
    5. '=input' → logprob: -10.339719772338867
    6. '.append' → logprob: -10.714719772338867
    7. '＝' → logprob: -13.464719772338867
    8. '.=' → logprob: -13.964719772338867
    9. '=list' → logprob: -14.089719772338867
    10. '.' → logprob: -14.214719772338867

Token 36: '.stdin' (ID: 93480)
  Prédit: '.stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.stdin' → logprob: -0.011254712007939816
    2. '.readline' → logprob: -5.136254787445068
    3. '.' → logprob: -5.511254787445068
    4. '.stdout' → logprob: -6.761254787445068
    5. '.argv' → logprob: -10.26125431060791
    6. '<|end|>' → logprob: -11.13625431060791
    7. '.read' → logprob: -11.38625431060791
    8. '.setdefault' → logprob: -11.51125431060791
    9. '.std' → logprob: -11.76125431060791
    10. '.stderr' → logprob: -12.13625431060791

Token 37: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.00022213248303160071
    2. '.' → logprob: -8.625222206115723
    3. '.read' → logprob: -10.250222206115723
    4. '.readlines' → logprob: -12.000222206115723
    5. '.stdin' → logprob: -14.500222206115723
    6. '.setdefault' → logprob: -16.000221252441406
    7. '.Read' → logprob: -16.250221252441406
    8. '<|end|>' → logprob: -16.625221252441406
    9. '.write' → logprob: -16.750221252441406
    10. ' .' → logprob: -17.125221252441406

Token 38: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0010417404118925333
    2. '()' → logprob: -6.876041889190674
    3. '(' → logprob: -11.876041412353516
    4. '()).' → logprob: -14.001041412353516
    5. ' ().' → logprob: -15.626041412353516
    6. '```' → logprob: -15.751041412353516
    7. '()

' → logprob: -16.126041412353516
    8. '.rstrip' → logprob: -16.126041412353516
    9. '.strip' → logprob: -16.376041412353516
    10. '().'' → logprob: -16.501041412353516

Token 39: 'rstrip' (ID: 180429)
  Prédit: 'strip'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.5046135187149048
    2. 'split' → logprob: -1.0046135187149048
    3. 'rstrip' → logprob: -3.5046133995056152
    4. 'rs' → logprob: -11.754613876342773
    5. ' split' → logprob: -11.879613876342773
    6. ' strip' → logprob: -13.879613876342773
    7. '```' → logprob: -15.129613876342773
    8. 'decode' → logprob: -15.504613876342773
    9. 'str' → logprob: -16.129613876342773
    10. '(split' → logprob: -16.629613876342773

Token 40: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.003186863148584962
    2. '('\' → logprob: -6.0031867027282715
    3. '()' → logprob: -7.3781867027282715
    4. '()\' → logprob: -10.00318717956543
    5. '('' → logprob: -11.00318717956543
    6. '(' → logprob: -11.37818717956543
    7. ' ().' → logprob: -12.37818717956543
    8. '("\' → logprob: -12.75318717956543
    9. 'split' → logprob: -13.25318717956543
    10. '()
' → logprob: -14.12818717956543

Token 41: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -1.1472419600977446e-06
    2. ' split' → logprob: -14.375000953674316
    3. 'spl' → logprob: -15.375000953674316
    4. 'rstrip' → logprob: -15.625000953674316
    5. 'sp' → logprob: -16.500001907348633
    6. 'strip' → logprob: -16.750001907348633
    7. '(split' → logprob: -17.000001907348633
    8. ' ' → logprob: -18.750001907348633
    9. '```' → logprob: -19.000001907348633
    10. 'plit' → logprob: -19.125001907348633

Token 42: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.2525703012943268
    2. '(' → logprob: -1.7525702714920044
    3. '('' → logprob: -3.002570390701294
    4. '("("' → logprob: -9.127570152282715
    5. '("' → logprob: -10.252570152282715
    6. '())' → logprob: -11.752570152282715
    7. '()]' → logprob: -11.877570152282715
    8. '(['' → logprob: -12.002570152282715
    9. '(',' → logprob: -12.127570152282715
    10. '(None' → logprob: -12.252570152282715

Token 43: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.23401004076004028
    2. 'lines' → logprob: -2.3590099811553955
    3. 'prog' → logprob: -2.6090099811553955
    4. 'parts' → logprob: -4.234010219573975
    5. 'if' → logprob: -4.859010219573975
    6. ' lines' → logprob: -4.859010219573975
    7. 'tokens' → logprob: -6.484010219573975
    8. ' if' → logprob: -6.609010219573975
    9. '	lines' → logprob: -6.609010219573975
    10. '```' → logprob: -6.734010219573975

Token 44: ' line' (ID: 2543)
  Prédit: 'prog'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'prog' → logprob: -1.038183331489563
    2. '   ' → logprob: -1.788183331489563
    3. ' if' → logprob: -1.788183331489563
    4. 'if' → logprob: -1.788183331489563
    5. ' lines' → logprob: -2.9131832122802734
    6. 'lines' → logprob: -3.1631832122802734
    7. ' prog' → logprob: -3.6631832122802734
    8. 'parts' → logprob: -4.788183212280273
    9. ' parts' → logprob: -5.163183212280273
    10. 'vars' → logprob: -6.413183212280273

Token 45: '_no' (ID: 13575)
  Prédit: '.append'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.24220211803913116
    2. 's' → logprob: -1.9922021627426147
    3. ' =' → logprob: -3.867202043533325
    4. '_parts' → logprob: -4.242202281951904
    5. '=' → logprob: -4.492202281951904
    6. '_' → logprob: -4.742202281951904
    7. '_tokens' → logprob: -4.742202281951904
    8. '.' → logprob: -5.742202281951904
    9. '.extend' → logprob: -5.867202281951904
    10. ' ' → logprob: -6.492202281951904

Token 46: '=int' (ID: 37431)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.05890456587076187
    2. ',' → logprob: -3.8089046478271484
    3. 's' → logprob: -4.058904647827148
    4. ' =' → logprob: -4.308904647827148
    5. '=int' → logprob: -5.683904647827148
    6. '=line' → logprob: -7.558904647827148
    7. '=len' → logprob: -8.808904647827148
    8. ')' → logprob: -10.433904647827148
    9. ' ,' → logprob: -10.558904647827148
    10. '_tokens' → logprob: -11.183904647827148

Token 47: '(parts' (ID: 102573)
  Prédit: '(parts'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(parts' → logprob: -0.012762026861310005
    2. '(' → logprob: -4.387762069702148
    3. 'parts' → logprob: -8.387762069702148
    4. ' parts' → logprob: -11.012762069702148
    5. ' (' → logprob: -12.387762069702148
    6. '(
' → logprob: -13.387762069702148
    7. '(part' → logprob: -14.262762069702148
    8. ')' → logprob: -14.387762069702148
    9. '_parts' → logprob: -14.887762069702148
    10. '(

' → logprob: -15.512762069702148

Token 48: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.735893965815194e-05
    2. '(' → logprob: -11.500017166137695
    3. '[-' → logprob: -12.875017166137695
    4. ')' → logprob: -13.000017166137695
    5. '[
' → logprob: -14.125017166137695
    6. '0' → logprob: -14.500017166137695
    7. '   ' → logprob: -14.750017166137695
    8. '1' → logprob: -15.250017166137695
    9. ' [' → logprob: -15.500017166137695
    10. ' ' → logprob: -16.250017166137695

Token 49: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0004480692732613534
    2. '1' → logprob: -7.750448226928711
    3. ' ' → logprob: -11.875448226928711
    4. '[' → logprob: -12.125448226928711
    5. '-' → logprob: -12.500448226928711
    6. '   ' → logprob: -14.875448226928711
    7. ')' → logprob: -15.250448226928711
    8. '2' → logprob: -15.250448226928711
    9. '```' → logprob: -15.750448226928711
    10. '  ' → logprob: -16.62544822692871

Token 50: '])
' (ID: 5169)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '])' → logprob: -0.008273298852145672
    2. ')' → logprob: -4.883273124694824
    3. ']' → logprob: -7.633273124694824
    4. '])
' → logprob: -9.633273124694824
    5. '],' → logprob: -9.883273124694824
    6. ''])' → logprob: -10.883273124694824
    7. '[' → logprob: -11.758273124694824
    8. ')])' → logprob: -11.883273124694824
    9. ')]' → logprob: -12.258273124694824
    10. ' ])' → logprob: -12.508273124694824

Token 51: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9929969906806946
    2. 'prog' → logprob: -1.1179969310760498
    3. 'cmd' → logprob: -2.24299693107605
    4. 'if' → logprob: -3.11799693107605
    5. 'op' → logprob: -3.11799693107605
    6. 'command' → logprob: -4.117997169494629
    7. 'opcode' → logprob: -4.117997169494629
    8. 'rest' → logprob: -4.492997169494629
    9. ' if' → logprob: -4.742997169494629
    10. 'lines' → logprob: -4.867997169494629

Token 52: ' cmd' (ID: 11704)
  Prédit: ' prog'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' prog' → logprob: -0.46062910556793213
    2. 'prog' → logprob: -2.5856289863586426
    3. ' code' → logprob: -2.7106289863586426
    4. ' command' → logprob: -2.9606289863586426
    5. ' if' → logprob: -3.0856289863586426
    6. ' lines' → logprob: -3.4606289863586426
    7. ' op' → logprob: -4.210628986358643
    8. ' line' → logprob: -4.210628986358643
    9. '   ' → logprob: -4.585628986358643
    10. ' variable' → logprob: -4.835628986358643

Token 53: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.00012737659562844783
    2. ' =' → logprob: -9.250127792358398
    3. '_=' → logprob: -11.625127792358398
    4. '=int' → logprob: -11.750127792358398
    5. '=params' → logprob: -12.750127792358398
    6. 's' → logprob: -13.000127792358398
    7. '=line' → logprob: -13.000127792358398
    8. '=args' → logprob: -14.125127792358398
    9. '=sys' → logprob: -14.250127792358398
    10. '=}' → logprob: -14.500127792358398

Token 54: 'parts' (ID: 34761)
  Prédit: 'parts'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'parts' → logprob: -0.0004896456957794726
    2. ' parts' → logprob: -7.625489711761475
    3. '(parts' → logprob: -13.625489234924316
    4. 'str' → logprob: -15.875489234924316
    5. '[' → logprob: -16.125490188598633
    6. ''' → logprob: -16.375490188598633
    7. '`' → logprob: -17.000490188598633
    8. '.parts' → logprob: -17.375490188598633
    9. ' ' → logprob: -17.500490188598633
    10. 'pieces' → logprob: -17.625490188598633

Token 55: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -9.372294698550832e-06
    2. '[-' → logprob: -12.875009536743164
    3. '```' → logprob: -13.125009536743164
    4. '[:]' → logprob: -13.375009536743164
    5. '[len' → logprob: -14.000009536743164
    6. '1' → logprob: -14.500009536743164
    7. ' [' → logprob: -14.875009536743164
    8. '[:' → logprob: -14.875009536743164
    9. '<|end|>' → logprob: -15.125009536743164
    10. '[
' → logprob: -15.750009536743164

Token 56: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.4855663721391466e-05
    2. ' ' → logprob: -12.375015258789062
    3. '0' → logprob: -12.500015258789062
    4. ']' → logprob: -12.875015258789062
    5. '2' → logprob: -13.250015258789062
    6. '   ' → logprob: -14.250015258789062
    7. '-' → logprob: -14.750015258789062
    8. '])' → logprob: -15.000015258789062
    9. '```' → logprob: -15.125015258789062
    10. ')' → logprob: -15.812515258789062

Token 57: ']
' (ID: 1592)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.044234748929739
    2. ']' → logprob: -3.4192347526550293
    3. '<|end|>' → logprob: -5.169234752655029
    4. '])' → logprob: -5.919234752655029
    5. '<|end|>' → logprob: -7.419234752655029
    6. '')' → logprob: -7.919234752655029
    7. '']' → logprob: -8.169234275817871
    8. ')]' → logprob: -8.544234275817871
    9. ' )' → logprob: -8.794234275817871
    10. ''])' → logprob: -9.044234275817871

Token 58: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16854585707187653
    2. '<|end|>' → logprob: -1.9185458421707153
    3. '    ' → logprob: -6.043545722961426
    4. ' if' → logprob: -6.418545722961426
    5. '<|end|>' → logprob: -6.668545722961426
    6. ' lines' → logprob: -6.668545722961426
    7. 'if' → logprob: -7.668545722961426
    8. ' ' → logprob: -8.168545722961426
    9. 'tokens' → logprob: -8.168545722961426
    10. '  ' → logprob: -8.418545722961426

Token 59: ' args' (ID: 4966)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.40412989258766174
    2. ' if' → logprob: -1.4041298627853394
    3. 'args' (adapté à ' args') → logprob: -2.529129981994629
    4. ' args' → logprob: -6.029129981994629
    5. 'params' → logprob: -6.279129981994629
    6. ' lines' → logprob: -6.654129981994629
    7. 'lines' → logprob: -7.904129981994629
    8. 'rest' → logprob: -8.029129981994629
    9. 'tokens' → logprob: -8.029129981994629
    10. '   ' → logprob: -9.529129981994629

Token 60: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.0002444125711917877
    2. ' =' → logprob: -8.500244140625
    3. '=args' → logprob: -10.875244140625
    4. '=[]' → logprob: -11.000244140625
    5. '=params' → logprob: -12.875244140625
    6. '=line' → logprob: -14.500244140625
    7. '=list' → logprob: -14.875244140625
    8. '=int' → logprob: -15.000244140625
    9. '=

' → logprob: -15.625244140625
    10. '＝' → logprob: -15.625244140625

Token 61: 'parts' (ID: 34761)
  Prédit: 'parts'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'parts' → logprob: -0.20264801383018494
    2. ' parts' → logprob: -1.7026480436325073
    3. '(parts' → logprob: -6.952648162841797
    4. '[' → logprob: -8.577648162841797
    5. ' [' → logprob: -10.577648162841797
    6. '[]' → logprob: -10.702648162841797
    7. '   ' → logprob: -11.452648162841797
    8. 'list' → logprob: -11.577648162841797
    9. ' ' → logprob: -11.827648162841797
    10. '.parts' → logprob: -13.202648162841797

Token 62: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.00014048899174667895
    2. '2' → logprob: -8.875140190124512
    3. '```' → logprob: -15.000140190124512
    4. 'from' → logprob: -15.375140190124512
    5. '3' → logprob: -15.750140190124512
    6. '1' → logprob: -17.500141143798828
    7. '(' → logprob: -17.875141143798828
    8. ':' → logprob: -18.875141143798828
    9. '[
' → logprob: -18.875141143798828
    10. 's' → logprob: -19.125141143798828

Token 63: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -8.061054359131958e-06
    2. ']' → logprob: -13.250007629394531
    3. '1' → logprob: -13.500007629394531
    4. '])' → logprob: -13.750007629394531
    5. ':' → logprob: -14.250007629394531
    6. ':]' → logprob: -14.250007629394531
    7. ')' → logprob: -14.625007629394531
    8. '[' → logprob: -14.750007629394531
    9. '   ' → logprob: -14.750007629394531
    10. ' ' → logprob: -15.125007629394531

Token 64: ':]
' (ID: 61598)
  Prédit: ':]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':]' → logprob: -7.350386295001954e-05
    2. ':' → logprob: -9.750073432922363
    3. ']' → logprob: -11.750073432922363
    4. ' :]' → logprob: -12.000073432922363
    5. ':],' → logprob: -14.250073432922363
    6. ':]

' → logprob: -15.375073432922363
    7. ':]
' → logprob: -16.25007438659668
    8. ':].' → logprob: -17.25007438659668
    9. 'if' → logprob: -18.25007438659668
    10. ' ]' → logprob: -18.37507438659668

Token 65: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.009102925658226013
    2. '    
' → logprob: -6.009102821350098
    3. '
' → logprob: -6.259102821350098
    4. '<|end|>' → logprob: -6.509102821350098
    5. ')' → logprob: -7.134102821350098
    6. 'prog' → logprob: -7.384102821350098
    7. '```' → logprob: -7.884102821350098
    8. 'lines' → logprob: -8.009102821350098
    9. ' lines' → logprob: -8.384102821350098
    10. 'if' → logprob: -9.259102821350098

Token 66: ' prog' (ID: 46603)
  Prédit: 'prog'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prog' (adapté à ' prog') → logprob: -0.32649892568588257
    2. '   ' → logprob: -1.8264989852905273
    3. 'lines' → logprob: -2.3264989852905273
    4. ' lines' → logprob: -4.576498985290527
    5. 'if' → logprob: -5.451498985290527
    6. ' prog' → logprob: -5.826498985290527
    7. '
' → logprob: -7.576498985290527
    8. ' if' → logprob: -7.576498985290527
    9. 'program' → logprob: -7.951498985290527
    10. '```' → logprob: -8.201498985290527

Token 67: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.01817382499575615
    2. '.' → logprob: -4.018173694610596
    3. '.app' → logprob: -11.018174171447754
    4. '.setdefault' → logprob: -13.518174171447754
    5. '.Append' → logprob: -13.768174171447754
    6. '.ap' → logprob: -13.893174171447754
    7. ' .' → logprob: -13.893174171447754
    8. '​.' → logprob: -14.018174171447754
    9. '.extend' → logprob: -14.268174171447754
    10. 'append' → logprob: -14.768174171447754

Token 68: '((' (ID: 2054)
  Prédit: '(('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '((' → logprob: -0.0010041086934506893
    2. '(' → logprob: -7.001004219055176
    3. '([' → logprob: -9.501004219055176
    4. '(line' → logprob: -11.001004219055176
    5. '({'' → logprob: -15.126004219055176
    6. '(((' → logprob: -15.251004219055176
    7. '(([' → logprob: -15.251004219055176
    8. '(('' → logprob: -16.62600326538086
    9. '(lines' → logprob: -16.87600326538086
    10. ' ((' → logprob: -17.12600326538086

Token 69: 'line' (ID: 1137)
  Prédit: 'line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.00022952310973778367
    2. ' line' → logprob: -8.500229835510254
    3. 'cmd' → logprob: -10.875229835510254
    4. '(line' → logprob: -12.000229835510254
    5. '   ' → logprob: -14.500229835510254
    6. 'command' → logprob: -16.000228881835938
    7. ')' → logprob: -16.125228881835938
    8. ' ' → logprob: -16.500228881835938
    9. '	line' → logprob: -16.625228881835938
    10. '  ' → logprob: -16.750228881835938

Token 70: '_no' (ID: 13575)
  Prédit: '_no'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_no' → logprob: 0.0
    2. 'no' → logprob: -17.5
    3. 'No' → logprob: -18.125
    4. '_' → logprob: -19.125
    5. '_No' → logprob: -19.125
    6. '_NO' → logprob: -19.375
    7. ',no' → logprob: -20.0
    8. ',' → logprob: -20.5
    9. '_,' → logprob: -21.5
    10. '_number' → logprob: -21.5

Token 71: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -7.517272024415433e-05
    2. ' ,' → logprob: -9.500075340270996
    3. ',
' → logprob: -15.750075340270996
    4. '‌,' → logprob: -17.37507438659668
    5. ',c' → logprob: -18.00007438659668
    6. ',module' → logprob: -18.37507438659668
    7. ' ' → logprob: -18.50007438659668
    8. ',args' → logprob: -18.62507438659668
    9. ',msg' → logprob: -18.87507438659668
    10. '   ' → logprob: -19.00007438659668

Token 72: 'cmd' (ID: 18804)
  Prédit: 'cmd'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cmd' → logprob: -0.31326842308044434
    2. ' cmd' → logprob: -1.3132684230804443
    3. '(cmd' → logprob: -12.563268661499023
    4. '	cmd' → logprob: -13.063268661499023
    5. 'command' → logprob: -15.188268661499023
    6. '.cmd' → logprob: -15.438268661499023
    7. '_cmd' → logprob: -15.938268661499023
    8. ' command' → logprob: -16.063268661499023
    9. ')' → logprob: -16.688268661499023
    10. ' ' → logprob: -16.813268661499023

Token 73: ',args' (ID: 157312)
  Prédit: ',args'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',args' → logprob: -0.01417984813451767
    2. ',' → logprob: -4.264179706573486
    3. ',arg' → logprob: -11.389180183410645
    4. ' ,' → logprob: -12.389180183410645
    5. ',exports' → logprob: -15.389180183410645
    6. ')' → logprob: -16.264179229736328
    7. '=args' → logprob: -16.264179229736328
    8. ',user' → logprob: -16.639179229736328
    9. '   ' → logprob: -16.639179229736328
    10. ',)' → logprob: -16.889179229736328

Token 74: '))
' (ID: 2210)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.008619658648967743
    2. '))' → logprob: -4.758619785308838
    3. ')
' → logprob: -12.38361930847168
    4. ')))' → logprob: -14.50861930847168
    5. ' )' → logprob: -15.25861930847168
    6. '))
' → logprob: -15.75861930847168
    7. '),' → logprob: -16.50861930847168
    8. ')}' → logprob: -17.63361930847168
    9. ')`' → logprob: -17.75861930847168
    10. ',)' → logprob: -18.00861930847168

Token 75: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.3894718885421753
    2. '   ' → logprob: -2.639472007751465
    3. '    
' → logprob: -2.764472007751465
    4. ' 
' → logprob: -2.889472007751465
    5. '<|end|>' → logprob: -3.264472007751465
    6. '\n' → logprob: -4.139472007751465
    7. 'for' → logprob: -4.389472007751465
    8. '  
' → logprob: -4.389472007751465
    9. '```' → logprob: -4.639472007751465
    10. ')' → logprob: -4.764472007751465

Token 76: ' lines' (ID: 8698)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.22399340569972992
    2. '   ' → logprob: -2.5989933013916016
    3. 'if' → logprob: -2.9739933013916016
    4. 'vars' → logprob: -2.9739933013916016
    5. ' for' → logprob: -3.9739933013916016
    6. '```' → logprob: -5.723993301391602
    7. ' if' → logprob: -6.848993301391602
    8. '
' → logprob: -8.973993301391602
    9. '    
' → logprob: -8.973993301391602
    10. 'variables' → logprob: -8.973993301391602

Token 77: '.append' (ID: 3709)
  Prédit: '.add'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.add' → logprob: -0.04134651646018028
    2. '.' → logprob: -3.291346549987793
    3. '.append' → logprob: -6.166346549987793
    4. '.setdefault' → logprob: -6.791346549987793
    5. '<|end|>' → logprob: -10.666346549987793
    6. '.update' → logprob: -10.916346549987793
    7. ' .' → logprob: -12.416346549987793
    8. '.union' → logprob: -12.416346549987793
    9. ').' → logprob: -12.666346549987793
    10. '.insert' → logprob: -13.166346549987793

Token 78: '(line' (ID: 18178)
  Prédit: '(line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(line' → logprob: -1.771655115589965e-05
    2. 'line' → logprob: -11.375018119812012
    3. '(' → logprob: -12.000018119812012
    4. ' line' → logprob: -17.125017166137695
    5. '((' → logprob: -17.750017166137695
    6. '(lines' → logprob: -18.250017166137695
    7. ' (' → logprob: -18.625017166137695
    8. '(
' → logprob: -18.750017166137695
    9. '[line' → logprob: -19.000017166137695
    10. '=line' → logprob: -19.000017166137695

Token 79: '_no' (ID: 13575)
  Prédit: '_no'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_no' → logprob: -6.704273118884885e-07
    2. 'no' → logprob: -14.625000953674316
    3. 'No' → logprob: -16.125
    4. '_NO' → logprob: -17.0
    5. '_No' → logprob: -17.5
    6. '_' → logprob: -18.625
    7. '._' → logprob: -18.875
    8. '_number' → logprob: -18.875
    9. 's' → logprob: -19.0
    10. '_n' → logprob: -19.0

Token 80: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.173704271830502e-06
    2. ' )' → logprob: -13.37500286102295
    3. ')
' → logprob: -14.00000286102295
    4. '))' → logprob: -14.75000286102295
    5. '   ' → logprob: -15.87500286102295
    6. '),' → logprob: -16.875003814697266
    7. '`)' → logprob: -17.125003814697266
    8. ')`' → logprob: -17.250003814697266
    9. ')

' → logprob: -17.750003814697266
    10. ')))' → logprob: -17.875003814697266

Token 81: '   ' (ID: 271)
  Prédit: 'lines'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'lines' → logprob: -0.49000731110572815
    2. 'vars' → logprob: -2.7400074005126953
    3. 'for' → logprob: -2.7400074005126953
    4. 'line' → logprob: -2.9900074005126953
    5. 'variables' → logprob: -2.9900074005126953
    6. 'def' → logprob: -3.2400074005126953
    7. '#' → logprob: -3.9900074005126953
    8. ')' → logprob: -4.240007400512695
    9. '```' → logprob: -4.615007400512695
    10. 'i' → logprob: -4.740007400512695

Token 82: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.367992639541626
    2. 'if' → logprob: -1.242992639541626
    3. '   ' → logprob: -4.992992401123047
    4. ' for' → logprob: -5.367992401123047
    5. 'vars' → logprob: -5.492992401123047
    6. ' if' → logprob: -6.242992401123047
    7. '```' → logprob: -6.617992401123047
    8. ' ' → logprob: -8.117992401123047
    9. '    
' → logprob: -9.492992401123047
    10. 'variables' → logprob: -10.617992401123047

Token 83: ' a' (ID: 261)
  Prédit: ' arg'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' arg' → logprob: -0.2722402513027191
    2. 'arg' → logprob: -1.5222402811050415
    3. ' a' → logprob: -4.647240161895752
    4. 'a' → logprob: -4.772240161895752
    5. 'v' → logprob: -7.022240161895752
    6. ' v' → logprob: -7.897240161895752
    7. ' var' → logprob: -8.14724063873291
    8. 'var' → logprob: -8.64724063873291
    9. '	arg' → logprob: -8.64724063873291
    10. '[arg' → logprob: -9.77224063873291

Token 84: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.01327352225780487
    2. 'in' → logprob: -4.6382737159729
    3. 's' → logprob: -5.8882737159729
    4. '_' → logprob: -7.7632737159729
    5. 'r' → logprob: -8.513273239135742
    6. ' ' → logprob: -10.513273239135742
    7. '_in' → logprob: -10.638273239135742
    8. 'n' → logprob: -10.763273239135742
    9. 'g' → logprob: -11.638273239135742
    10. ' i' → logprob: -11.763273239135742

Token 85: ' args' (ID: 4966)
  Prédit: 'args'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'args' → logprob: -0.31327852606773376
    2. ' args' → logprob: -1.3132785558700562
    3. '(args' → logprob: -11.563278198242188
    4. 'a' → logprob: -12.438278198242188
    5. '	args' → logprob: -13.688278198242188
    6. ' a' → logprob: -14.813278198242188
    7. '$args' → logprob: -14.813278198242188
    8. ' parts' → logprob: -14.938278198242188
    9. ' ' → logprob: -15.063278198242188
    10. 'parts' → logprob: -15.813278198242188

Token 86: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.07457758486270905
    2. 'vars' → logprob: -2.699577569961548
    3. '_vars' → logprob: -6.199577808380127
    4. 'if' → logprob: -6.949577808380127
    5. '(vars' → logprob: -7.199577808380127
    6. ' vars' → logprob: -8.574577331542969
    7. '.vars' → logprob: -8.574577331542969
    8. '.' → logprob: -9.074577331542969
    9. ':variables' → logprob: -9.074577331542969
    10. ':
' → logprob: -9.199577331542969

Token 87: '       ' (ID: 309)
  Prédit: 'vars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'vars' → logprob: -0.22479653358459473
    2. 'if' → logprob: -2.2247965335845947
    3. '   ' → logprob: -3.0997965335845947
    4. ' if' → logprob: -3.5997965335845947
    5. ' vars' → logprob: -4.099796295166016
    6. '```' → logprob: -5.599796295166016
    7. '_vars' → logprob: -8.599796295166016
    8. '       ' → logprob: -8.849796295166016
    9. '(vars' → logprob: -9.349796295166016
    10. '``' → logprob: -9.974796295166016

Token 88: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.14396360516548157
    2. 'vars' → logprob: -2.018963575363159
    3. ' if' → logprob: -7.143963813781738
    4. '   ' → logprob: -8.143963813781738
    5. ' vars' → logprob: -9.643963813781738
    6. 'ifs' → logprob: -10.143963813781738
    7. '```' → logprob: -10.268963813781738
    8. 'try' → logprob: -11.143963813781738
    9. '       ' → logprob: -11.268963813781738
    10. 'variables' → logprob: -11.518963813781738

Token 89: ' len' (ID: 4631)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.4771690368652344
    2. 'a' → logprob: -0.9771690368652344
    3. ' not' → logprob: -6.352169036865234
    4. ''' → logprob: -7.102169036865234
    5. ' '' → logprob: -8.727169036865234
    6. ''a' → logprob: -8.852169036865234
    7. 'not' → logprob: -9.727169036865234
    8. ' ' → logprob: -9.977169036865234
    9. ' len' → logprob: -10.352169036865234
    10. 'len' → logprob: -10.852169036865234

Token 90: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.0015589047688990831
    2. '(' → logprob: -6.501558780670166
    3. 'a' → logprob: -9.876559257507324
    4. '(`' → logprob: -13.876559257507324
    5. '("("' → logprob: -14.126559257507324
    6. ' (' → logprob: -14.626559257507324
    7. '```' → logprob: -14.876559257507324
    8. '>' → logprob: -14.876559257507324
    9. '((' → logprob: -15.126559257507324
    10. '(A' → logprob: -15.251559257507324

Token 91: ')==' (ID: 35269)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.2690236270427704
    2. '>' → logprob: -1.7690236568450928
    3. ')>' → logprob: -3.5190236568450928
    4. '==' → logprob: -3.7690236568450928
    5. ' >' → logprob: -5.394023418426514
    6. ' )' → logprob: -5.894023418426514
    7. ' ==' → logprob: -6.894023418426514
    8. ')==' → logprob: -6.894023418426514
    9. '>=' → logprob: -7.019023418426514
    10. '()>' → logprob: -7.769023418426514

Token 92: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.059944044798612595
    2. ' ' → logprob: -3.3099441528320312
    3. '0' → logprob: -4.809944152832031
    4. '2' → logprob: -4.809944152832031
    5. '4' → logprob: -5.934944152832031
    6. '3' → logprob: -6.559944152832031
    7. '6' → logprob: -7.684944152832031
    8. '5' → logprob: -8.059944152832031
    9. '8' → logprob: -8.434944152832031
    10. '7' → logprob: -9.184944152832031

Token 93: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.5231438279151917
    2. 'and' → logprob: -0.8981438279151917
    3. ' ' → logprob: -12.148143768310547
    4. ':' → logprob: -12.898143768310547
    5. '   ' → logprob: -13.023143768310547
    6. '<|end|>' → logprob: -13.023143768310547
    7. '	and' → logprob: -13.148143768310547
    8. ' an' → logprob: -13.398143768310547
    9. '==' → logprob: -13.398143768310547
    10. ':
' → logprob: -14.398143768310547

Token 94: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.13505180180072784
    2. ''a' → logprob: -2.260051727294922
    3. ' a' → logprob: -3.885051727294922
    4. ' '' → logprob: -7.885051727294922
    5. '97' → logprob: -8.010051727294922
    6. '65' → logprob: -8.135051727294922
    7. ' ' → logprob: -8.760051727294922
    8. 'ord' → logprob: -9.510051727294922
    9. ''' → logprob: -9.635051727294922
    10. ' ord' → logprob: -10.885051727294922

Token 95: '.is' (ID: 3109)
  Prédit: '.is'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.is' → logprob: -0.03148262947797775
    2. 'is' → logprob: -4.156482696533203
    3. '>=' → logprob: -4.406482696533203
    4. ' >=' → logprob: -6.406482696533203
    5. '.' → logprob: -7.781482696533203
    6. '>' → logprob: -7.906482696533203
    7. ' in' → logprob: -8.531482696533203
    8. ' .' → logprob: -8.781482696533203
    9. 'a' → logprob: -9.281482696533203
    10. 'in' → logprob: -9.531482696533203

Token 96: 'alpha' (ID: 15453)
  Prédit: 'alpha'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'alpha' → logprob: -0.0019382734317332506
    2. 'upper' → logprob: -6.251938343048096
    3. 'lower' → logprob: -11.876937866210938
    4. 'identifier' → logprob: -13.126937866210938
    5. 'al' → logprob: -14.751937866210938
    6. ' alpha' → logprob: -16.376937866210938
    7. 'alphabet' → logprob: -16.751937866210938
    8. 'ascii' → logprob: -17.251937866210938
    9. 'uppercase' → logprob: -17.626937866210938
    10. 'digit' → logprob: -17.876937866210938

Token 97: '():
' (ID: 8595)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0789913535118103
    2. '():' → logprob: -2.578991413116455
    3. '():
' → logprob: -9.703990936279297
    4. '(' → logprob: -11.703990936279297
    5. '()==' → logprob: -11.953990936279297
    6. '()>' → logprob: -11.953990936279297
    7. '())' → logprob: -12.078990936279297
    8. '():

' → logprob: -12.828990936279297
    9. ')' → logprob: -13.578990936279297
    10. '()">' → logprob: -13.578990936279297

Token 98: '           ' (ID: 352)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.4405307471752167
    2. '           ' → logprob: -1.190530776977539
    3. ':
' → logprob: -3.815530776977539
    4. 'vars' → logprob: -4.190530776977539
    5. ' vars' → logprob: -4.815530776977539
    6. ' and' → logprob: -5.815530776977539
    7. '       ' → logprob: -6.065530776977539
    8. '   ' → logprob: -7.315530776977539
    9. '(vars' → logprob: -7.815530776977539
    10. ':variables' → logprob: -8.690530776977539

Token 99: ' vars' (ID: 36194)
  Prédit: 'vars'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'vars' (adapté à ' vars') → logprob: -0.000556843588128686
    2. ' vars' → logprob: -7.500556945800781
    3. '           ' → logprob: -13.625556945800781
    4. '(vars' → logprob: -14.000556945800781
    5. '.vars' → logprob: -14.625556945800781
    6. '_vars' → logprob: -14.750556945800781
    7. '
' → logprob: -15.000556945800781
    8. '-vars' → logprob: -15.375556945800781
    9. '               ' → logprob: -15.500556945800781
    10. 'Vars' → logprob: -16.75055694580078

Token 100: '_set' (ID: 5451)
  Prédit: '_set'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_set' → logprob: -1.7432603272027336e-06
    2. '._' → logprob: -14.875001907348633
    3. '_s' → logprob: -15.125001907348633
    4. '_sets' → logprob: -15.375001907348633
    5. ' _' → logprob: -15.625001907348633
    6. '_' → logprob: -16.000001907348633
    7. '```' → logprob: -16.000001907348633
    8. '_SET' → logprob: -16.250001907348633
    9. '_vars' → logprob: -16.500001907348633
    10. 's' → logprob: -16.625001907348633

Token 101: '.add' (ID: 1950)
  Prédit: '.add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.add' → logprob: -0.0003364158037584275
    2. '.' → logprob: -8.000336647033691
    3. ' .' → logprob: -14.125336647033691
    4. '.update' → logprob: -15.500336647033691
    5. '.setdefault' → logprob: -16.500335693359375
    6. '.Add' → logprob: -17.250335693359375
    7. '.append' → logprob: -17.750335693359375
    8. 'add' → logprob: -18.750335693359375
    9. '.ADD' → logprob: -19.125335693359375
    10. '.insert' → logprob: -19.500335693359375

Token 102: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -1.676292231422849e-05
    2. '(' → logprob: -11.000017166137695
    3. '((' → logprob: -16.750017166137695
    4. 'a' → logprob: -18.250017166137695
    5. '(
' → logprob: -18.375017166137695
    6. ' (' → logprob: -19.375017166137695
    7. '('' → logprob: -19.875017166137695
    8. '(A' → logprob: -20.375017166137695
    9. '(

' → logprob: -20.875017166137695
    10. '(ai' → logprob: -22.000017166137695

Token 103: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.8624639324116288e-06
    2. ')
' → logprob: -13.625001907348633
    3. ' )' → logprob: -14.625001907348633
    4. '))' → logprob: -17.375001907348633
    5. ')

' → logprob: -18.125001907348633
    6. '}' → logprob: -18.250001907348633
    7. '),' → logprob: -18.750001907348633
    8. '<|end|>' → logprob: -18.875001907348633
    9. ')}}' → logprob: -19.000001907348633
    10. ')return' → logprob: -19.375001907348633

Token 104: 'line' (ID: 1137)
  Prédit: 'var'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'var' → logprob: -1.7531237602233887
    2. 'vars' → logprob: -1.8781237602233887
    3. 'variables' → logprob: -2.1281237602233887
    4. 'dp' → logprob: -2.5031237602233887
    5. 'def' → logprob: -2.6281237602233887
    6. 'memo' → logprob: -2.6281237602233887
    7. 'line' → logprob: -2.8781237602233887
    8. 'visited' → logprob: -3.0031237602233887
    9. 'labels' → logprob: -3.5031237602233887
    10. 'mem' → logprob: -3.6281237602233887

Token 105: '_to' (ID: 5089)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.010487168096005917
    2. '_s' → logprob: -4.635487079620361
    3. '_no' → logprob: -7.885487079620361
    4. '_' → logprob: -8.63548755645752
    5. 'no' → logprob: -9.76048755645752
    6. ' s' → logprob: -10.76048755645752
    7. 'index' → logprob: -11.13548755645752
    8. '_to' → logprob: -11.51048755645752
    9. '_index' → logprob: -11.51048755645752
    10. 'No' → logprob: -12.13548755645752

Token 106: '_idx' (ID: 15257)
  Prédit: '_index'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_index' → logprob: -0.518306314945221
    2. 'index' → logprob: -1.1433062553405762
    3. '_idx' → logprob: -2.893306255340576
    4. 'idx' → logprob: -3.518306255340576
    5. 'prog' → logprob: -8.018306732177734
    6. '_prog' → logprob: -8.768306732177734
    7. 'indx' → logprob: -10.143306732177734
    8. 'line' → logprob: -10.393306732177734
    9. '_line' → logprob: -10.643306732177734
    10. '_ix' → logprob: -10.893306732177734

Token 107: '={' (ID: 1693)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.055478937923908234
    2. ' =' → logprob: -2.930479049682617
    3. '={}' → logprob: -7.555479049682617
    4. '={' → logprob: -10.805479049682617
    5. '={"' → logprob: -11.555479049682617
    6. '={'' → logprob: -11.930479049682617
    7. ' ={' → logprob: -11.930479049682617
    8. '=[]' → logprob: -12.430479049682617
    9. '=[' → logprob: -12.680479049682617
    10. '=dict' → logprob: -12.680479049682617

Token 108: 'line' (ID: 1137)
  Prédit: 'line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.47710877656936646
    2. 'lines' → logprob: -0.9771087765693665
    3. ' lines' → logprob: -6.852108955383301
    4. 'ln' → logprob: -7.102108955383301
    5. 'k' → logprob: -7.852108955383301
    6. 'l' → logprob: -7.852108955383301
    7. ' line' → logprob: -8.1021089553833
    8. '}' → logprob: -10.6021089553833
    9. 'lin' → logprob: -11.1021089553833
    10. 'x' → logprob: -11.7271089553833

Token 109: ':i' (ID: 34041)
  Prédit: '_no'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_no' → logprob: -0.0002031827752944082
    2. 'no' → logprob: -8.875203132629395
    3. '_to' → logprob: -9.750203132629395
    4. ':' → logprob: -12.625203132629395
    5. ':no' → logprob: -14.500203132629395
    6. 'No' → logprob: -14.750203132629395
    7. 'to' → logprob: -15.375203132629395
    8. '_NO' → logprob: -15.500203132629395
    9. '_:' → logprob: -15.750203132629395
    10. 's' → logprob: -16.25020408630371

Token 110: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.6931527256965637
    2. 'for' → logprob: -0.6931527256965637
    3. '
' → logprob: -13.19315242767334
    4. ' ' → logprob: -13.56815242767334
    5. 'line' → logprob: -14.19315242767334
    6. 'lines' → logprob: -14.44315242767334
    7. ' in' → logprob: -14.56815242767334
    8. ' lines' → logprob: -15.19315242767334
    9. ' line' → logprob: -16.818153381347656
    10. '	for' → logprob: -16.818153381347656

Token 111: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.5562400221824646
    2. ' i' → logprob: -1.0562400817871094
    3. ' line' → logprob: -2.9312400817871094
    4. 'line' → logprob: -3.6812400817871094
    5. ' lines' → logprob: -9.55624008178711
    6. 'lines' → logprob: -9.55624008178711
    7. ' in' → logprob: -10.18124008178711
    8. ',' → logprob: -10.55624008178711
    9. 'e' → logprob: -10.93124008178711
    10. ' (' → logprob: -10.93124008178711

Token 112: ',line' (ID: 171132)
  Prédit: ',line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',line' → logprob: -0.6465360522270203
    2. ',' → logprob: -1.271536111831665
    3. 'line' → logprob: -2.021536111831665
    4. 'in' → logprob: -3.146536111831665
    5. 'i' → logprob: -4.646535873413086
    6. ',i' → logprob: -4.771535873413086
    7. ' in' → logprob: -7.021535873413086
    8. '(line' → logprob: -7.646535873413086
    9. 'lines' → logprob: -7.771535873413086
    10. ' line' → logprob: -9.646535873413086

Token 113: ' in' (ID: 306)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.029753848910331726
    2. ' in' → logprob: -3.5297539234161377
    3. ' ' → logprob: -13.654753684997559
    4. 'line' → logprob: -14.654753684997559
    5. '_in' → logprob: -15.529753684997559
    6. 'to' → logprob: -15.529753684997559
    7. 'enumer' → logprob: -15.654753684997559
    8. 'ine' → logprob: -15.904753684997559
    9. ')' → logprob: -15.904753684997559
    10. 'on' → logprob: -16.154754638671875

Token 114: ' enumerate' (ID: 29671)
  Prédit: 'enumer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'enumer' → logprob: -0.018156850710511208
    2. ' enumerate' → logprob: -4.018157005310059
    3. 'zip' → logprob: -13.143157005310059
    4. '```' → logprob: -13.518157005310059
    5. 'lines' → logprob: -13.643157005310059
    6. 'en' → logprob: -13.768157005310059
    7. 'enum' → logprob: -13.768157005310059
    8. '
' → logprob: -16.143156051635742
    9. ' ' → logprob: -16.643156051635742
    10. 'Enumer' → logprob: -17.893156051635742

Token 115: '(lines' (ID: 73839)
  Prédit: '(lines'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lines' → logprob: -0.0015552095137536526
    2. 'lines' → logprob: -6.501555442810059
    3. ' lines' → logprob: -9.876555442810059
    4. '	lines' → logprob: -14.251555442810059
    5. '(' → logprob: -15.376555442810059
    6. ')' → logprob: -15.376555442810059
    7. ' (' → logprob: -15.751555442810059
    8. '(line' → logprob: -16.251554489135742
    9. '_lines' → logprob: -16.626554489135742
    10. '.lines' → logprob: -17.501554489135742

Token 116: ')}
' (ID: 19324)
  Prédit: ')}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')}' → logprob: -0.0008271370315924287
    2. ')' → logprob: -7.125827312469482
    3. '}' → logprob: -11.125826835632324
    4. '})' → logprob: -12.500826835632324
    5. ' )' → logprob: -12.625826835632324
    6. ')}
' → logprob: -15.250826835632324
    7. ')}

' → logprob: -15.625826835632324
    8. ');}' → logprob: -15.875826835632324
    9. '))' → logprob: -16.25082778930664
    10. '")}' → logprob: -16.50082778930664

Token 117: 'variables' (ID: 28125)
  Prédit: 'visited'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'visited' → logprob: -0.6785341501235962
    2. 'dp' → logprob: -1.5535341501235962
    3. 'def' → logprob: -2.1785340309143066
    4. 'acc' → logprob: -3.3035340309143066
    5. 'memo' → logprob: -3.5535340309143066
    6. 'idx' → logprob: -4.303534030914307
    7. 'memory' → logprob: -4.303534030914307
    8. 'values' → logprob: -4.303534030914307
    9. 'ans' → logprob: -5.053534030914307
    10. 'res' → logprob: -5.178534030914307

Token 118: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.012713411822915077
    2. '={}' → logprob: -4.512713432312012
    3. ' =' → logprob: -7.012713432312012
    4. '={' → logprob: -7.887713432312012
    5. '_' → logprob: -8.887713432312012
    6. '_values' → logprob: -9.637713432312012
    7. '_=' → logprob: -9.637713432312012
    8. '=_' → logprob: -10.137713432312012
    9. '={'' → logprob: -10.887713432312012
    10. '=dict' → logprob: -11.387713432312012

Token 119: 'sorted' (ID: 64288)
  Prédit: '{'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '{' → logprob: -0.0027920419815927744
    2. '{}' → logprob: -6.002791881561279
    3. 'default' → logprob: -8.752792358398438
    4. 'dict' → logprob: -8.877792358398438
    5. ' {' → logprob: -11.502792358398438
    6. '{x' → logprob: -13.377792358398438
    7. '{name' → logprob: -13.502792358398438
    8. '{}
' → logprob: -13.627792358398438
    9. '{i' → logprob: -13.627792358398438
    10. '{k' → logprob: -14.252792358398438

Token 120: '(vars' (ID: 174980)
  Prédit: '(vars'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(vars' → logprob: -0.030087966471910477
    2. '(list' → logprob: -3.530087947845459
    3. '(' → logprob: -8.030088424682617
    4. 'vars' → logprob: -11.780088424682617
    5. '(var' → logprob: -13.030088424682617
    6. 'list' → logprob: -13.905088424682617
    7. ' (' → logprob: -15.155088424682617
    8. '((' → logprob: -15.530088424682617
    9. '```' → logprob: -15.530088424682617
    10. '(vals' → logprob: -15.905088424682617

Token 121: '_set' (ID: 5451)
  Prédit: '_set'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_set' → logprob: -7.107425062713446e-06
    2. '_vars' → logprob: -12.000006675720215
    3. '_sets' → logprob: -15.250006675720215
    4. 'set' → logprob: -15.750006675720215
    5. '_SET' → logprob: -16.00000762939453
    6. 's' → logprob: -16.37500762939453
    7. '_list' → logprob: -17.00000762939453
    8. 'Set' → logprob: -17.12500762939453
    9. 'et' → logprob: -17.12500762939453
    10. 'vars' → logprob: -17.25000762939453

Token 122: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.02039285935461521
    2. '())' → logprob: -4.020392894744873
    3. '()' → logprob: -6.145392894744873
    4. ' )' → logprob: -9.520392417907715
    5. '))' → logprob: -11.395392417907715
    6. ')
' → logprob: -12.395392417907715
    7. ' ())' → logprob: -12.395392417907715
    8. '(' → logprob: -14.395392417907715
    9. '())
' → logprob: -14.520392417907715
    10. '(),' → logprob: -14.645392417907715

Token 123: '#' (ID: 2)
  Prédit: 'values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'values' → logprob: -1.2376788854599
    2. 'memory' → logprob: -1.2376788854599
    3. 'mem' → logprob: -2.3626790046691895
    4. 'dp' → logprob: -2.3626790046691895
    5. 'variables' → logprob: -2.6126790046691895
    6. 'vals' → logprob: -2.6126790046691895
    7. 'var' → logprob: -3.7376790046691895
    8. 'vars' → logprob: -4.1126790046691895
    9. 'env' → logprob: -4.6126790046691895
    10. 'value' → logprob: -4.8626790046691895

Token 124: ' Initialize' (ID: 19496)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.26016169786453247
    2. 'dp' → logprob: -2.2601616382598877
    3. 'from' → logprob: -3.0101616382598877
    4. 'variables' → logprob: -4.260161876678467
    5. ' def' → logprob: -4.885161876678467
    6. 'memory' → logprob: -5.010161876678467
    7. 'depth' → logprob: -5.510161876678467
    8. '#' → logprob: -5.510161876678467
    9. ' dp' → logprob: -5.760161876678467
    10. 'visited' → logprob: -5.885161876678467

Token 125: ' variables' (ID: 13955)
  Prédit: 'variables'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'variables' → logprob: -0.4231616258621216
    2. 'memory' → logprob: -1.7981616258621216
    3. ' variables' → logprob: -2.548161506652832
    4. ' memory' → logprob: -2.548161506652832
    5. 'dp' → logprob: -5.548161506652832
    6. 'vars' → logprob: -5.673161506652832
    7. 'variable' → logprob: -5.923161506652832
    8. 'mem' → logprob: -6.048161506652832
    9. 'values' → logprob: -6.173161506652832
    10. 'var' → logprob: -6.673161506652832

Token 126: ' to' (ID: 316)
  Prédit: 'values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'values' → logprob: -0.9985412359237671
    2. 'variables' → logprob: -0.9985412359237671
    3. '=' → logprob: -2.8735413551330566
    4. 'vars' → logprob: -2.9985413551330566
    5. 'vals' → logprob: -2.9985413551330566
    6. ' =' → logprob: -3.2485413551330566
    7. 'var' → logprob: -3.4985413551330566
    8. '={}' → logprob: -4.123541355133057
    9. '{' → logprob: -5.498541355133057
    10. 'dict' → logprob: -6.123541355133057

Token 127: ' zero' (ID: 12421)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.03924494981765747
    2. ' ' → logprob: -4.039245128631592
    3. ' zero' → logprob: -5.039245128631592
    4. '{}' → logprob: -5.164245128631592
    5. 'zero' → logprob: -5.289245128631592
    6. '{' → logprob: -6.414245128631592
    7. ' defaultdict' → logprob: -7.164245128631592
    8. 'default' → logprob: -7.539245128631592
    9. ' their' → logprob: -8.164244651794434
    10. 'their' → logprob: -8.914244651794434

Token 128: '
' (ID: 198)
  Prédit: 'variables'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'variables' → logprob: -0.1766822785139084
    2. 'vars' → logprob: -2.676682233810425
    3. '
' → logprob: -2.926682233810425
    4. ' variables' → logprob: -3.676682233810425
    5. 'var' → logprob: -4.676682472229004
    6. 'variable' → logprob: -6.301682472229004
    7. 'values' → logprob: -6.926682472229004
    8. ' vars' → logprob: -7.926682472229004
    9. '```' → logprob: -8.176682472229004
    10. ',' → logprob: -8.551682472229004

Token 129: 'init' (ID: 3287)
  Prédit: 'variables'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'variables' → logprob: -0.4261040687561035
    2. 'vars' → logprob: -1.6761040687561035
    3. 'var' → logprob: -1.9261040687561035
    4. 'variable' → logprob: -5.0511040687561035
    5. 'values' → logprob: -5.1761040687561035
    6. 'vals' → logprob: -6.8011040687561035
    7. 'state' → logprob: -8.176103591918945
    8. 'memory' → logprob: -8.176103591918945
    9. 'env' → logprob: -9.301103591918945
    10. 'mem' → logprob: -9.426103591918945

Token 130: '_vars' (ID: 25901)
  Prédit: '_vars'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_vars' → logprob: -0.7620112299919128
    2. '_vals' → logprob: -1.1370112895965576
    3. '_values' → logprob: -1.6370112895965576
    4. 'ial' → logprob: -5.2620110511779785
    5. '_' → logprob: -5.3870110511779785
    6. '_variables' → logprob: -5.7620110511779785
    7. '_val' → logprob: -5.8870110511779785
    8. 'al' → logprob: -7.3870110511779785
    9. '_var' → logprob: -7.3870110511779785
    10. 'vals' → logprob: -7.8870110511779785

Token 131: '={' (ID: 1693)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.26091131567955017
    2. '={}' → logprob: -2.135911226272583
    3. ' =' → logprob: -2.260911226272583
    4. '={' → logprob: -5.760911464691162
    5. 'al' → logprob: -7.010911464691162
    6. '_vals' → logprob: -7.385911464691162
    7. '_values' → logprob: -7.510911464691162
    8. '={}
' → logprob: -7.635911464691162
    9. ' ={' → logprob: -8.385910987854004
    10. '=dict' → logprob: -8.385910987854004

Token 132: 'v' (ID: 85)
  Prédit: 'v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.008654754608869553
    2. 'var' → logprob: -4.758654594421387
    3. 'k' → logprob: -11.008654594421387
    4. ' v' → logprob: -11.258654594421387
    5. 'a' → logprob: -11.633654594421387
    6. ' var' → logprob: -14.133654594421387
    7. '}' → logprob: -14.508654594421387
    8. 'c' → logprob: -14.758654594421387
    9. 'x' → logprob: -15.758654594421387
    10. '}}' → logprob: -16.508655548095703

Token 133: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -4.274932143744081e-05
    2. '0' → logprob: -10.750042915344238
    3. ' :' → logprob: -11.000042915344238
    4. ':v' → logprob: -12.500042915344238
    5. '=' → logprob: -15.750042915344238
    6. ':i' → logprob: -16.000041961669922
    7. 'v' → logprob: -16.500041961669922
    8. '1' → logprob: -16.625041961669922
    9. ':variables' → logprob: -17.125041961669922
    10. ')' → logprob: -17.250041961669922

Token 134: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0010329303331673145
    2. ' ' → logprob: -6.876032829284668
    3. '
' → logprob: -17.251033782958984
    4. ' ' → logprob: -17.376033782958984
    5. '   ' → logprob: -18.001033782958984
    6. '  ' → logprob: -18.126033782958984
    7. '00' → logprob: -18.501033782958984
    8. '

' → logprob: -18.626033782958984
    9. ')' → logprob: -18.751033782958984
    10. '}' → logprob: -19.251033782958984

Token 135: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.01917385868728161
    2. 'for' → logprob: -4.644173622131348
    3. '}' → logprob: -4.894173622131348
    4. ',' → logprob: -6.644173622131348
    5. ' ' → logprob: -8.144173622131348
    6. ' }' → logprob: -8.519173622131348
    7. ')' → logprob: -9.644173622131348
    8. '   ' → logprob: -11.519173622131348
    9. '	for' → logprob: -11.894173622131348
    10. ' ,' → logprob: -12.769173622131348

Token 136: ' v' (ID: 323)
  Prédit: 'variables'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'variables' → logprob: -0.07896238565444946
    2. ' variables' → logprob: -2.5789623260498047
    3. 'v' → logprob: -9.703962326049805
    4. ' v' → logprob: -11.828962326049805
    5. 'var' → logprob: -13.203962326049805
    6. 'variable' → logprob: -13.203962326049805
    7. 'vars' → logprob: -15.328962326049805
    8. '.variables' → logprob: -16.203962326049805
    9. ' variable' → logprob: -16.828962326049805
    10. ':variables' → logprob: -16.828962326049805

Token 137: ' in' (ID: 306)
  Prédit: 'variables'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'variables' → logprob: -0.1286749243736267
    2. ' variables' → logprob: -2.1286749839782715
    3. ' in' → logprob: -6.5036749839782715
    4. 'in' → logprob: -9.003674507141113
    5. 'v' → logprob: -9.753674507141113
    6. ':variables' → logprob: -10.253674507141113
    7. 'var' → logprob: -11.253674507141113
    8. 'vars' → logprob: -11.878674507141113
    9. ' v' → logprob: -12.253674507141113
    10. 'variable' → logprob: -13.003674507141113

Token 138: ' variables' (ID: 13955)
  Prédit: 'variables'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'variables' → logprob: -0.0019294669618830085
    2. ' variables' → logprob: -6.25192928314209
    3. 'variable' → logprob: -14.75192928314209
    4. 'vars' → logprob: -15.12692928314209
    5. 'var' → logprob: -16.626930236816406
    6. '.variables' → logprob: -16.876930236816406
    7. ':variables' → logprob: -17.251930236816406
    8. 'Variables' → logprob: -19.001930236816406
    9. '```' → logprob: -19.001930236816406
    10. 'vari' → logprob: -19.126930236816406

Token 139: '}

' (ID: 943)
  Prédit: '}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '}' → logprob: -1.1279553291387856e-05
    2. '}
' → logprob: -11.875011444091797
    3. '})' → logprob: -12.875011444091797
    4. ' }' → logprob: -13.875011444091797
    5. ')' → logprob: -14.375011444091797
    6. '}

' → logprob: -16.875011444091797
    7. ')}' → logprob: -17.375011444091797
    8. '}")' → logprob: -18.625011444091797
    9. '}}' → logprob: -18.750011444091797
    10. '}\' → logprob: -18.750011444091797

Token 140: '#' (ID: 2)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dp' → logprob: -0.755646288394928
    2. 'visited' → logprob: -2.130646228790283
    3. 'memory' → logprob: -2.380646228790283
    4. 'current' → logprob: -2.880646228790283
    5. 'def' → logprob: -3.005646228790283
    6. 'pc' → logprob: -3.130646228790283
    7. 'state' → logprob: -3.255646228790283
    8. 'stack' → logprob: -3.755646228790283
    9. 'memo' → logprob: -4.505646228790283
    10. 'acc' → logprob: -4.630646228790283

Token 141: ' Each' (ID: 11555)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.00947533268481493
    2. 'from' → logprob: -5.009475231170654
    3. 'visited' → logprob: -6.634475231170654
    4. 'dp' → logprob: -7.259475231170654
    5. '#' → logprob: -8.259475708007812
    6. ' def' → logprob: -8.759475708007812
    7. 'stack' → logprob: -10.009475708007812
    8. 'current' → logprob: -10.009475708007812
    9. 'memo' → logprob: -10.134475708007812
    10. ' from' → logprob: -10.509475708007812

Token 142: ' instruction' (ID: 21179)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'line' → logprob: -1.0077930688858032
    2. 'def' → logprob: -2.0077929496765137
    3. ' line' → logprob: -2.2577929496765137
    4. 'block' → logprob: -2.6327929496765137
    5. 'state' → logprob: -2.6327929496765137
    6. '(' → logprob: -2.7577929496765137
    7. 'instruction' → logprob: -3.3827929496765137
    8. 'variable' → logprob: -3.6327929496765137
    9. ' (' → logprob: -4.382792949676514
    10. ' block' → logprob: -4.382792949676514

Token 143: ' type' (ID: 1490)
  Prédit: 'will'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'will' → logprob: -0.5728059411048889
    2. ' will' → logprob: -1.6978058815002441
    3. 'is' → logprob: -2.572805881500244
    4. ' is' → logprob: -3.822805881500244
    5. 'def' → logprob: -4.197805881500244
    6. 'processed' → logprob: -4.322805881500244
    7. '=' → logprob: -4.447805881500244
    8. '_idx' → logprob: -4.572805881500244
    9. 'has' → logprob: -4.572805881500244
    10. 'should' → logprob: -4.822805881500244

Token 144: ' and' (ID: 326)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.3036983907222748
    2. ':' → logprob: -1.9286984205245972
    3. ' is' → logprob: -3.6786983013153076
    4. '=' → logprob: -3.6786983013153076
    5. '_' → logprob: -3.8036983013153076
    6. 'elif' → logprob: -4.928698539733887
    7. ' =' → logprob: -5.053698539733887
    8. ' has' → logprob: -5.303698539733887
    9. ' def' → logprob: -5.803698539733887
    10. ' ' → logprob: -5.803698539733887

Token 145: ' args' (ID: 4966)
  Prédit: ' its'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' its' → logprob: -0.3127753734588623
    2. ' their' → logprob: -1.9377753734588623
    3. 'its' → logprob: -2.8127753734588623
    4. 'their' → logprob: -2.8127753734588623
    5. 'the' → logprob: -6.187775611877441
    6. ' the' → logprob: -6.937775611877441
    7. ' how' → logprob: -7.312775611877441
    8. 'def' → logprob: -8.437775611877441
    9. 'how' → logprob: -8.562775611877441
    10. '#' → logprob: -9.562775611877441

Token 146: ':
' (ID: 734)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.8932265639305115
    2. ':' → logprob: -1.5182266235351562
    3. ' =' → logprob: -1.8932266235351562
    4. '_type' → logprob: -3.0182266235351562
    5. '_cmd' → logprob: -3.7682266235351562
    6. 'type' → logprob: -3.8932266235351562
    7. 'def' → logprob: -4.268226623535156
    8. ' are' → logprob: -4.268226623535156
    9. '=[]' → logprob: -4.393226623535156
    10. 'cmd' → logprob: -4.768226623535156

Token 147: '#' (ID: 2)
  Prédit: '#'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.6018211245536804
    2. 'def' → logprob: -1.4768211841583252
    3. 'for' → logprob: -2.101821184158325
    4. ' for' → logprob: -3.851821184158325
    5. '{
' → logprob: -4.226820945739746
    6. '
' → logprob: -4.351820945739746
    7. '{' → logprob: -4.601820945739746
    8. '```' → logprob: -5.101820945739746
    9. 'instruction' → logprob: -5.726820945739746
    10. 'if' → logprob: -5.726820945739746

Token 148: ' ADD' (ID: 30791)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.7218729257583618
    2. 'def' → logprob: -1.2218729257583618
    3. 'for' → logprob: -2.0968728065490723
    4. ' for' → logprob: -3.7218728065490723
    5. ' def' → logprob: -4.346872806549072
    6. ' #' → logprob: -4.846872806549072
    7. 'jmp' → logprob: -5.096872806549072
    8. 'if' → logprob: -5.221872806549072
    9. '{' → logprob: -5.971872806549072
    10. '{'' → logprob: -6.221872806549072

Token 149: ' var' (ID: 972)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 150: '1' (ID: 16)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.703495442867279
    2. ' ' → logprob: -1.7034955024719238
    3. '<|end|>' → logprob: -1.8284955024719238
    4. ' ,' → logprob: -2.453495502471924
    5. ' =' → logprob: -3.828495502471924
    6. '<|end|>' → logprob: -4.703495502471924
    7. ' def' → logprob: -4.828495502471924
    8. 'def' → logprob: -5.078495502471924
    9. '  ' → logprob: -5.203495502471924
    10. ')' → logprob: -5.328495502471924

Token 151: ' var' (ID: 972)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.7777304649353027
    2. ' var' → logprob: -0.9027304649353027
    3. ' ' → logprob: -3.0277304649353027
    4. 'var' → logprob: -3.1527304649353027
    5. '<|end|>' → logprob: -4.402730464935303
    6. ' ,' → logprob: -4.652730464935303
    7. ' =' → logprob: -4.777730464935303
    8. ',var' → logprob: -5.027730464935303
    9. '<|end|>' → logprob: -6.402730464935303
    10. '  ' → logprob: -6.777730464935303

Token 152: '2' (ID: 17)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.263154536485672
    2. 'var' → logprob: -1.6381545066833496
    3. ' var' → logprob: -4.13815450668335
    4. '2' → logprob: -4.51315450668335
    5. '<|end|>' → logprob: -4.88815450668335
    6. ' ' → logprob: -6.51315450668335
    7. '<|end|>' → logprob: -7.13815450668335
    8. 'name' → logprob: -10.013154983520508
    9. 'token' → logprob: -10.513154983520508
    10. 'variable' → logprob: -10.638154983520508

Token 153: ' var' (ID: 972)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 154: '3' (ID: 18)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.3478158116340637
    2. '<|end|>' → logprob: -1.472815752029419
    3. '
' → logprob: -3.597815752029419
    4. ' ' → logprob: -4.847815990447998
    5. '<|end|>' → logprob: -4.972815990447998
    6. '\n' → logprob: -5.597815990447998
    7. 'var' → logprob: -5.847815990447998
    8. '  
' → logprob: -5.847815990447998
    9. '[' → logprob: -6.222815990447998
    10. ')' → logprob: -6.222815990447998

Token 155: ' or' (ID: 503)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.4731408655643463
    2. '<|end|>' → logprob: -1.348140835762024
    3. 'def' → logprob: -2.8481409549713135
    4. '<|end|>' → logprob: -4.098140716552734
    5. '#' → logprob: -4.348140716552734
    6. ',' → logprob: -5.223140716552734
    7. '  
' → logprob: -5.473140716552734
    8. ':' → logprob: -6.223140716552734
    9. ' ' → logprob: -6.223140716552734
    10. ' 
' → logprob: -6.473140716552734

Token 156: ' ADD' (ID: 30791)
  Prédit: 'SUB'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'SUB' → logprob: -0.06266940385103226
    2. 'MOV' → logprob: -2.937669515609741
    3. 'sub' → logprob: -6.437669277191162
    4. ' SUB' → logprob: -6.812669277191162
    5. 'MOVE' → logprob: -6.812669277191162
    6. 'SET' → logprob: -6.937669277191162
    7. 'M' → logprob: -7.312669277191162
    8. '#' → logprob: -7.687669277191162
    9. 'MULT' → logprob: -8.18766975402832
    10. 'var' → logprob: -8.31266975402832

Token 157: ' var' (ID: 972)
  Prédit: ' var'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' var' → logprob: -0.2682371139526367
    2. 'var' → logprob: -1.7682371139526367
    3. '<|end|>' → logprob: -2.8932371139526367
    4. ' ' → logprob: -4.893237113952637
    5. '<|end|>' → logprob: -6.893237113952637
    6. ' ' → logprob: -9.143237113952637
    7. '  ' → logprob: -9.518237113952637
    8. ' or' → logprob: -9.643237113952637
    9. '[var' → logprob: -9.893237113952637
    10. '
' → logprob: -10.018237113952637

Token 158: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.029387541115283966
    2. '<|end|>' → logprob: -4.154387474060059
    3. ' ' → logprob: -4.779387474060059
    4. 'space' → logprob: -6.654387474060059
    5. '3' → logprob: -7.279387474060059
    6. 'var' → logprob: -7.404387474060059
    7. '2' → logprob: -8.029387474060059
    8. '<|end|>' → logprob: -8.029387474060059
    9. '[' → logprob: -8.154387474060059
    10. ' var' → logprob: -8.154387474060059

Token 159: ' var' (ID: 972)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 160: '2' (ID: 17)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.005089426413178444
    2. '2' → logprob: -5.755089282989502
    3. ' ' → logprob: -6.755089282989502
    4. '3' → logprob: -8.00508975982666
    5. '<|end|>' → logprob: -8.25508975982666
    6. 'var' → logprob: -9.88008975982666
    7. ' var' → logprob: -10.13008975982666
    8. '4' → logprob: -10.75508975982666
    9. 'space' → logprob: -11.25508975982666
    10. '<|end|>' → logprob: -11.38008975982666

Token 161: ' con' (ID: 406)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -1.3963751792907715
    2. '
' → logprob: -1.6463751792907715
    3. ':' → logprob: -2.2713751792907715
    4. '_' → logprob: -2.2713751792907715
    5. 'def' → logprob: -2.5213751792907715
    6. ' =' → logprob: -2.7713751792907715
    7. '#' → logprob: -2.8963751792907715
    8. ' ' → logprob: -3.1463751792907715
    9. ',' → logprob: -3.8963751792907715
    10. '<|end|>' → logprob: -4.0213751792907715

Token 162: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 163: '#' (ID: 2)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7290277481079102
    2. '<|end|>' → logprob: -1.1040277481079102
    3. '#' → logprob: -2.97902774810791
    4. '\n' → logprob: -3.47902774810791
    5. ' ' → logprob: -3.72902774810791
    6. ':' → logprob: -4.47902774810791
    7. '  
' → logprob: -4.60402774810791
    8. 'def' → logprob: -4.60402774810791
    9. '=' → logprob: -5.10402774810791
    10. ',' → logprob: -5.10402774810791

Token 164: ' SUB' (ID: 31189)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.7890386581420898
    2. 'for' → logprob: -1.5390386581420898
    3. '#' → logprob: -1.6640386581420898
    4. 'next' → logprob: -3.66403865814209
    5. '   ' → logprob: -3.91403865814209
    6. '
' → logprob: -4.41403865814209
    7. 'mul' → logprob: -5.16403865814209
    8. 'rest' → logprob: -5.28903865814209
    9. 'ADD' → logprob: -5.41403865814209
    10. 'result' → logprob: -5.53903865814209

Token 165: ' var' (ID: 972)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.0294682327657938
    2. ' var' → logprob: -4.279468059539795
    3. '<|end|>' → logprob: -4.529468059539795
    4. 'var' → logprob: -6.029468059539795
    5. '  ' → logprob: -6.654468059539795
    6. '<|end|>' → logprob: -8.904468536376953
    7. ' ' → logprob: -9.279468536376953
    8. ' ,' → logprob: -9.529468536376953
    9. ' line' → logprob: -9.529468536376953
    10. ' )' → logprob: -9.779468536376953

Token 166: '1' (ID: 16)
  Prédit: ' var'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' var' → logprob: -0.06732604652643204
    2. '1' → logprob: -3.317326068878174
    3. 'var' → logprob: -3.692326068878174
    4. ' ' → logprob: -6.067326068878174
    5. '3' → logprob: -7.317326068878174
    6. '<|end|>' → logprob: -7.942326068878174
    7. ' variable' → logprob: -9.317325592041016
    8. '[var' → logprob: -9.567325592041016
    9. '_var' → logprob: -9.942325592041016
    10. ' )' → logprob: -9.942325592041016

Token 167: ' var' (ID: 972)
  Prédit: ' var'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' var' → logprob: -0.034294430166482925
    2. 'var' → logprob: -3.534294366836548
    3. '<|end|>' → logprob: -5.909294605255127
    4. ' ' → logprob: -6.784294605255127
    5. ' ' → logprob: -8.034294128417969
    6. '[var' → logprob: -9.034294128417969
    7. '_var' → logprob: -9.909294128417969
    8. '(var' → logprob: -9.909294128417969
    9. ',' → logprob: -11.034294128417969
    10. '_' → logprob: -11.409294128417969

Token 168: '2' (ID: 17)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.18934552371501923
    2. '1' → logprob: -1.9393454790115356
    3. ' var' → logprob: -3.939345598220825
    4. 'var' → logprob: -4.939345359802246
    5. '2' → logprob: -7.064345359802246
    6. ' arg' → logprob: -7.689345359802246
    7. ' ' → logprob: -8.189345359802246
    8. ' con' → logprob: -8.189345359802246
    9. 'con' → logprob: -9.314345359802246
    10. 'arg' → logprob: -9.814345359802246

Token 169: ' var' (ID: 972)
  Prédit: ' var'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' var' → logprob: -0.07343626022338867
    2. 'var' → logprob: -2.6984362602233887
    3. ' ' → logprob: -5.948436260223389
    4. ' ' → logprob: -7.698436260223389
    5. '<|end|>' → logprob: -7.948436260223389
    6. '_var' → logprob: -10.323436737060547
    7. ' _' → logprob: -11.448436737060547
    8. '[var' → logprob: -11.573436737060547
    9. ',var' → logprob: -12.323436737060547
    10. '  ' → logprob: -12.698436737060547

Token 170: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.0002226093056378886
    2. '1' → logprob: -9.000222206115723
    3. 'con' → logprob: -9.750222206115723
    4. ' con' → logprob: -10.625222206115723
    5. ' ' → logprob: -11.625222206115723
    6. 'var' → logprob: -12.625222206115723
    7. '[' → logprob: -14.125222206115723
    8. '<|end|>' → logprob: -14.500222206115723
    9. ' var' → logprob: -14.750222206115723
    10. '```' → logprob: -15.125222206115723

Token 171: ' or' (ID: 503)
  Prédit: ' or'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.08922789990901947
    2. '<|end|>' → logprob: -2.8392279148101807
    3. ' var' → logprob: -4.964227676391602
    4. 'var' → logprob: -4.964227676391602
    5. 'or' → logprob: -5.339227676391602
    6. ' ' → logprob: -5.464227676391602
    7. '#' → logprob: -6.339227676391602
    8. '<|end|>' → logprob: -7.839227676391602
    9. ')' → logprob: -8.589227676391602
    10. ' #' → logprob: -8.714227676391602

Token 172: ' SUB' (ID: 31189)
  Prédit: ' SUB'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' SUB' → logprob: -0.5237993001937866
    2. 'SUB' → logprob: -1.2737993001937866
    3. ' con' → logprob: -2.148799419403076
    4. ' var' → logprob: -5.523799419403076
    5. 'con' → logprob: -5.648799419403076
    6. ' ' → logprob: -7.023799419403076
    7. 'var' → logprob: -7.773799419403076
    8. ' sub' → logprob: -7.898799419403076
    9. 'sub' → logprob: -7.898799419403076
    10. ' ' → logprob: -7.898799419403076

Token 173: ' var' (ID: 972)
  Prédit: ' var'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' var' → logprob: -0.008725663647055626
    2. 'var' → logprob: -4.758725643157959
    3. ' ' → logprob: -9.758726119995117
    4. ' ' → logprob: -10.508726119995117
    5. '<|end|>' → logprob: -11.883726119995117
    6. '[var' → logprob: -12.008726119995117
    7. '_var' → logprob: -12.508726119995117
    8. '```' → logprob: -12.633726119995117
    9. '(var' → logprob: -13.008726119995117
    10. ')var' → logprob: -14.508726119995117

Token 174: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0002422779070911929
    2. ' ' → logprob: -9.000242233276367
    3. ' var' → logprob: -10.000242233276367
    4. 'var' → logprob: -10.500242233276367
    5. ' _' → logprob: -11.250242233276367
    6. '<|end|>' → logprob: -11.750242233276367
    7. '[' → logprob: -12.000242233276367
    8. '_' → logprob: -12.125242233276367
    9. '```' → logprob: -12.500242233276367
    10. ' ' → logprob: -12.750242233276367

Token 175: ' var' (ID: 972)
  Prédit: ' var'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' var' → logprob: -0.0344301238656044
    2. 'var' → logprob: -3.4094300270080566
    3. ' ' → logprob: -8.159430503845215
    4. ' ' → logprob: -8.284430503845215
    5. '_var' → logprob: -8.909430503845215
    6. '[var' → logprob: -9.784430503845215
    7. '<|end|>' → logprob: -11.534430503845215
    8. ',var' → logprob: -11.909430503845215
    9. '_vars' → logprob: -12.034430503845215
    10. ' _' → logprob: -12.284430503845215

Token 176: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0017461004899814725
    2. ' ' → logprob: -6.62674617767334
    3. '3' → logprob: -8.37674617767334
    4. 'con' → logprob: -9.37674617767334
    5. ' con' → logprob: -10.37674617767334
    6. '[' → logprob: -11.12674617767334
    7. '1' → logprob: -11.50174617767334
    8. '```' → logprob: -11.50174617767334
    9. '   ' → logprob: -11.75174617767334
    10. ' or' → logprob: -12.37674617767334

Token 177: ' con' (ID: 406)
  Prédit: ' con'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' con' → logprob: -0.6934577822685242
    2. 'con' → logprob: -0.6934577822685242
    3. 'var' → logprob: -8.69345760345459
    4. ' var' → logprob: -9.94345760345459
    5. ' ' → logprob: -10.44345760345459
    6. '	con' → logprob: -10.69345760345459
    7. '_con' → logprob: -11.06845760345459
    8. ' ' → logprob: -11.56845760345459
    9. ' cons' → logprob: -12.31845760345459
    10. '```' → logprob: -12.94345760345459

Token 178: '
' (ID: 198)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.09510607272386551
    2. 'M' → logprob: -3.8451061248779297
    3. '
' → logprob: -4.47010612487793
    4. 'MOV' → logprob: -4.47010612487793
    5. 'def' → logprob: -4.72010612487793
    6. 'NEXT' → logprob: -5.22010612487793
    7. 'current' → logprob: -5.34510612487793
    8. 'next' → logprob: -5.72010612487793
    9. '<|end|>' → logprob: -5.72010612487793
    10. 'DIV' → logprob: -5.97010612487793

Token 179: '#' (ID: 2)
  Prédit: '#'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.2985093593597412
    2. 'M' → logprob: -1.5485093593597412
    3. 'MOV' → logprob: -4.04850959777832
    4. 'DIV' → logprob: -4.29850959777832
    5. 'MULT' → logprob: -5.17350959777832
    6. 'J' → logprob: -6.29850959777832
    7. 'LOAD' → logprob: -6.67350959777832
    8. 'CMP' → logprob: -7.29850959777832
    9. 'STORE' → logprob: -7.54850959777832
    10. '```' → logprob: -7.67350959777832

Token 180: ' SET' (ID: 17905)
  Prédit: 'M'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'M' → logprob: -0.33807307481765747
    2. 'MOV' → logprob: -1.3380730152130127
    3. '#' → logprob: -4.713073253631592
    4. 'MULT' → logprob: -4.963073253631592
    5. 'LOAD' → logprob: -5.713073253631592
    6. 'J' → logprob: -6.338073253631592
    7. 'MOVE' → logprob: -6.963073253631592
    8. 'SET' → logprob: -7.838073253631592
    9. 'CMP' → logprob: -7.838073253631592
    10. 'def' → logprob: -7.963073253631592

Token 181: ' var' (ID: 972)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.182598277926445
    2. '<|end|>' → logprob: -2.432598352432251
    3. ' var' → logprob: -2.682598352432251
    4. 'var' → logprob: -4.682598114013672
    5. '<|end|>' → logprob: -7.557598114013672
    6. '  ' → logprob: -8.557598114013672
    7. ' ' → logprob: -9.307598114013672
    8. ')' → logprob: -9.432598114013672
    9. '_' → logprob: -9.432598114013672
    10. '(var' → logprob: -9.557598114013672

Token 182: '1' (ID: 16)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.12080028653144836
    2. '<|end|>' → logprob: -2.995800256729126
    3. '1' → logprob: -3.620800256729126
    4. ' var' → logprob: -3.995800256729126
    5. 'var' → logprob: -4.120800495147705
    6. ' variable' → logprob: -7.495800495147705
    7. '<|end|>' → logprob: -8.120800018310547
    8. '  ' → logprob: -8.120800018310547
    9. 's' → logprob: -8.495800018310547
    10. ' ' → logprob: -8.745800018310547

Token 183: ' var' (ID: 972)
  Prédit: ' var'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' var' → logprob: -0.09447728842496872
    2. 'var' → logprob: -2.4694771766662598
    3. ' ' → logprob: -5.59447717666626
    4. '<|end|>' → logprob: -6.59447717666626
    5. ' ' → logprob: -8.469477653503418
    6. '<|end|>' → logprob: -10.344477653503418
    7. ' v' → logprob: -10.469477653503418
    8. '[var' → logprob: -10.469477653503418
    9. '  ' → logprob: -10.594477653503418
    10. '_var' → logprob: -10.969477653503418

Token 184: '2' (ID: 17)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.03839614614844322
    2. ' ' → logprob: -4.03839635848999
    3. '<|end|>' → logprob: -4.66339635848999
    4. '3' → logprob: -6.16339635848999
    5. 'name' → logprob: -6.53839635848999
    6. ' arg' → logprob: -6.78839635848999
    7. '0' → logprob: -7.16339635848999
    8. '<|end|>' → logprob: -7.28839635848999
    9. ' args' → logprob: -7.53839635848999
    10. 'args' → logprob: -7.53839635848999

Token 185: ' or' (ID: 503)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.9017478823661804
    2. 'def' → logprob: -0.9017478823661804
    3. '
' → logprob: -2.401747941970825
    4. 'for' → logprob: -2.901747941970825
    5. '<|end|>' → logprob: -4.526747703552246
    6. ')' → logprob: -5.026747703552246
    7. '<|end|>' → logprob: -5.776747703552246
    8. '```' → logprob: -6.276747703552246
    9. 'current' → logprob: -6.651747703552246
    10. 'import' → logprob: -6.651747703552246

Token 186: ' SET' (ID: 17905)
  Prédit: ' SET'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' SET' → logprob: -0.322785884141922
    2. ' var' → logprob: -1.8227858543395996
    3. 'SET' → logprob: -2.5727858543395996
    4. 'var' → logprob: -3.5727858543395996
    5. ' set' → logprob: -4.9477858543396
    6. ' ' → logprob: -7.3227858543396
    7. ' con' → logprob: -7.5727858543396
    8. 'set' → logprob: -7.8227858543396
    9. ' ' → logprob: -8.072786331176758
    10. '```' → logprob: -9.197786331176758

Token 187: ' var' (ID: 972)
  Prédit: ' var'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' var' → logprob: -0.1126025840640068
    2. 'var' → logprob: -2.362602472305298
    3. '<|end|>' → logprob: -4.487602710723877
    4. ' ' → logprob: -7.112602710723877
    5. '[var' → logprob: -8.737602233886719
    6. '(var' → logprob: -10.612602233886719
    7. ' ' → logprob: -10.862602233886719
    8. '_var' → logprob: -11.362602233886719
    9. ')var' → logprob: -11.737602233886719
    10. '```' → logprob: -12.237602233886719

Token 188: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0014927227748557925
    2. ' ' → logprob: -7.501492500305176
    3. '_' → logprob: -8.126492500305176
    4. 'var' → logprob: -8.376492500305176
    5. '[' → logprob: -8.876492500305176
    6. ' var' → logprob: -9.126492500305176
    7. '_parts' → logprob: -10.376492500305176
    8. '```' → logprob: -10.626492500305176
    9. ' _' → logprob: -11.251492500305176
    10. '_vars' → logprob: -11.626492500305176

Token 189: ' con' (ID: 406)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.9633946418762207
    2. '<|end|>' → logprob: -1.2133946418762207
    3. 'def' → logprob: -1.7133946418762207
    4. '#' → logprob: -3.3383946418762207
    5. ')' → logprob: -4.088394641876221
    6. ' =' → logprob: -4.338394641876221
    7. '<|end|>' → logprob: -4.338394641876221
    8. '```' → logprob: -4.838394641876221
    9. ' ' → logprob: -4.963394641876221
    10. '=' → logprob: -5.088394641876221

Token 190: '
' (ID: 198)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.16720901429653168
    2. '#' → logprob: -2.0422089099884033
    3. ')' → logprob: -4.667209148406982
    4. 'for' → logprob: -6.667209148406982
    5. 'value' → logprob: -6.792209148406982
    6. 'class' → logprob: -6.917209148406982
    7. 'import' → logprob: -6.917209148406982
    8. 'current' → logprob: -7.042209148406982
    9. ']' → logprob: -7.167209148406982
    10. 'idx' → logprob: -7.292209148406982

Token 191: '#' (ID: 2)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.038262609392404556
    2. '#' → logprob: -4.413262844085693
    3. 'dp' → logprob: -4.538262844085693
    4. 'visited' → logprob: -6.288262844085693
    5. ')' → logprob: -6.663262844085693
    6. 'idx' → logprob: -6.788262844085693
    7. 'value' → logprob: -6.788262844085693
    8. 'prog' → logprob: -6.913262844085693
    9. 'next' → logprob: -6.913262844085693
    10. 'current' → logprob: -7.413262844085693

Token 192: ' IF' (ID: 20505)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.16278937458992004
    2. '#' → logprob: -2.7877893447875977
    3. 'J' → logprob: -3.1627893447875977
    4. 'CMP' → logprob: -4.412789344787598
    5. 'M' → logprob: -4.662789344787598
    6. 'jmp' → logprob: -4.787789344787598
    7. 'DEF' → logprob: -5.537789344787598
    8. 'DIV' → logprob: -5.537789344787598
    9. 'MOV' → logprob: -6.537789344787598
    10. 'G' → logprob: -6.662789344787598

Token 193: ' var' (ID: 972)
  Prédit: ' var'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' var' → logprob: -0.31091663241386414
    2. ' line' → logprob: -1.9359166622161865
    3. ' condition' → logprob: -2.9359166622161865
    4. 'var' → logprob: -3.6859166622161865
    5. ' cond' → logprob: -3.6859166622161865
    6. ' parts' → logprob: -5.060916423797607
    7. ' cmd' → logprob: -6.310916423797607
    8. ' len' → logprob: -6.560916423797607
    9. ' (' → logprob: -7.060916423797607
    10. 'def' → logprob: -7.435916423797607

Token 194: '1' (ID: 16)
  Prédit: ' var'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' var' → logprob: -0.7317090034484863
    2. '<|end|>' → logprob: -1.1067090034484863
    3. ' ' → logprob: -2.3567090034484863
    4. ' condition' → logprob: -3.2317090034484863
    5. 'var' → logprob: -3.8567090034484863
    6. '1' → logprob: -4.731709003448486
    7. ' cond' → logprob: -5.231709003448486
    8. '_' → logprob: -5.481709003448486
    9. '<|end|>' → logprob: -6.356709003448486
    10. ' line' → logprob: -6.481709003448486

Token 195: ' dest' (ID: 3755)
  Prédit: ' var'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' var' → logprob: -0.3084092140197754
    2. 'var' → logprob: -1.5584092140197754
    3. ' ' → logprob: -3.6834092140197754
    4. ' line' → logprob: -4.808409214019775
    5. ' condition' → logprob: -5.683409214019775
    6. '1' → logprob: -5.933409214019775
    7. '<|end|>' → logprob: -6.308409214019775
    8. '  ' → logprob: -6.433409214019775
    9. ' cond' → logprob: -6.683409214019775
    10. '_' → logprob: -7.433409214019775

Token 196: '
' (ID: 198)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -1.1293001174926758
    2. '_idx' → logprob: -1.2543001174926758
    3. 'idx' → logprob: -2.504300117492676
    4. 'def' → logprob: -2.504300117492676
    5. ' idx' → logprob: -3.129300117492676
    6. '_index' → logprob: -3.379300117492676
    7. '_IDX' → logprob: -4.254300117492676
    8. '_line' → logprob: -4.504300117492676
    9. '   ' → logprob: -4.629300117492676
    10. '=' → logprob: -4.754300117492676

Token 197: '#' (ID: 2)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0961073562502861
    2. '
' → logprob: -2.846107244491577
    3. '#' → logprob: -3.971107244491577
    4. ')' → logprob: -5.346107482910156
    5. ':' → logprob: -5.721107482910156
    6. 'import' → logprob: -7.346107482910156
    7. 'visited' → logprob: -7.471107482910156
    8. ',' → logprob: -7.596107482910156
    9. 'class' → logprob: -7.721107482910156
    10. 'current' → logprob: -7.846107482910156

Token 198: ' HAL' (ID: 41753)
  Prédit: 'pc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pc' → logprob: -1.4639934301376343
    2. '#' → logprob: -2.088993549346924
    3. 'def' → logprob: -2.088993549346924
    4. 'ip' → logprob: -2.338993549346924
    5. 'cur' → logprob: -2.838993549346924
    6. 'idx' → logprob: -3.088993549346924
    7. 'dp' → logprob: -3.213993549346924
    8. 'next' → logprob: -3.213993549346924
    9. 'pos' → logprob: -3.338993549346924
    10. 'visited' → logprob: -3.463993549346924

Token 199: 'T' (ID: 51)
  Prédit: 'T'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'T' → logprob: -2.0339031834737398e-05
    2. 'Т' → logprob: -12.500020027160645
    3. '```' → logprob: -12.750020027160645
    4. ' T' → logprob: -13.375020027160645
    5. 'TED' → logprob: -13.625020027160645
    6. '[T' → logprob: -13.875020027160645
    7. 'TS' → logprob: -14.125020027160645
    8. '``' → logprob: -14.250020027160645
    9. 'Ｔ' → logprob: -14.312520027160645
    10. '
' → logprob: -14.375020027160645

Token 200: '

' (ID: 279)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dp' → logprob: -1.1823166608810425
    2. 'pc' → logprob: -1.6823166608810425
    3. 'def' → logprob: -2.182316780090332
    4. 'ip' → logprob: -2.182316780090332
    5. 'memory' → logprob: -3.182316780090332
    6. 'idx' → logprob: -3.307316780090332
    7. 'variables' → logprob: -3.557316780090332
    8. 'visited' → logprob: -3.682316780090332
    9. 'current' → logprob: -3.932316780090332
    10. 'program' → logprob: -4.057316780090332

Token 201: '#' (ID: 2)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.1374984234571457
    2. 'dp' → logprob: -2.512498378753662
    3. 'memory' → logprob: -4.512498378753662
    4. 'memo' → logprob: -4.512498378753662
    5. 'visited' → logprob: -5.137498378753662
    6. 'variables' → logprob: -5.387498378753662
    7. 'values' → logprob: -5.887498378753662
    8. 'state' → logprob: -6.012498378753662
    9. 'mem' → logprob: -6.262498378753662
    10. 'idx' → logprob: -6.262498378753662

Token 202: ' We'll' (ID: 46830)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0035560044925659895
    2. 'idx' → logprob: -6.628555774688721
    3. 'dp' → logprob: -7.628555774688721
    4. 'pos' → logprob: -7.628555774688721
    5. '#' → logprob: -8.628556251525879
    6. 'variables' → logprob: -8.628556251525879
    7. 'pc' → logprob: -8.878556251525879
    8. 'visited' → logprob: -8.878556251525879
    9. 'memory' → logprob: -8.878556251525879
    10. 'ip' → logprob: -9.003556251525879

Token 203: ' simulate' (ID: 66687)
  Prédit: 'simulate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'simulate' → logprob: -0.300989031791687
    2. 'execute' → logprob: -2.3009891510009766
    3. 'define' → logprob: -2.6759891510009766
    4. 'implement' → logprob: -4.175989151000977
    5. 'process' → logprob: -4.300989151000977
    6. ' implement' → logprob: -4.425989151000977
    7. ' simulate' → logprob: -4.675989151000977
    8. 'interpret' → logprob: -5.050989151000977
    9. 'use' → logprob: -5.050989151000977
    10. 'def' → logprob: -5.300989151000977

Token 204: ' the' (ID: 290)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.5553606152534485
    2. 'pc' → logprob: -1.5553605556488037
    3. 'ip' → logprob: -2.1803605556488037
    4. '
' → logprob: -3.9303605556488037
    5. ' pc' → logprob: -4.180360794067383
    6. 'pos' → logprob: -4.180360794067383
    7. 'idx' → logprob: -4.305360794067383
    8. ' def' → logprob: -4.805360794067383
    9. ' ip' → logprob: -5.430360794067383
    10. 'code' → logprob: -5.555360794067383

Token 205: ' execution' (ID: 20860)
  Prédit: 'program'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'program' → logprob: -0.08671922981739044
    2. ' program' → logprob: -2.836719274520874
    3. 'execution' → logprob: -4.211719036102295
    4. 'prog' → logprob: -4.961719036102295
    5. ' execution' → logprob: -6.336719036102295
    6. 'code' → logprob: -7.961719036102295
    7. 'exec' → logprob: -8.086719512939453
    8. ' code' → logprob: -9.836719512939453
    9. 'rest' → logprob: -10.211719512939453
    10. ' prog' → logprob: -10.586719512939453

Token 206: ' with' (ID: 483)
  Prédit: 'pc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pc' → logprob: -0.30126479268074036
    2. 'ip' → logprob: -2.176264762878418
    3. 'pos' → logprob: -2.551264762878418
    4. '
' → logprob: -3.426264762878418
    5. 'def' → logprob: -5.426264762878418
    6. 'idx' → logprob: -5.551264762878418
    7. 'current' → logprob: -5.676264762878418
    8. 'variables' → logprob: -5.801264762878418
    9. 'acc' → logprob: -5.926264762878418
    10. 'ptr' → logprob: -5.926264762878418

Token 207: ' cycle' (ID: 15839)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.5075408220291138
    2. ' recursion' → logprob: -2.132540702819824
    3. 'def' → logprob: -2.257540702819824
    4. ' a' → logprob: -2.507540702819824
    5. 'sys' → logprob: -3.007540702819824
    6. 'memo' → logprob: -3.507540702819824
    7. ' memo' → logprob: -5.632540702819824
    8. 'rec' → logprob: -5.757540702819824
    9. ' sys' → logprob: -6.132540702819824
    10. 'dfs' → logprob: -6.257540702819824

Token 208: ' detection' (ID: 28385)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.6676692366600037
    2. '_limit' → logprob: -1.0426692962646484
    3. 'limit' → logprob: -3.2926692962646484
    4. '_detection' → logprob: -3.2926692962646484
    5. '_count' → logprob: -3.6676692962646484
    6. '_counter' → logprob: -4.167669296264648
    7. 's' → logprob: -5.167669296264648
    8. ' detection' → logprob: -5.917669296264648
    9. '_detect' → logprob: -6.167669296264648
    10. 'count' → logprob: -6.167669296264648

Token 209: '.

' (ID: 364)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.5095061659812927
    2. 'visited' → logprob: -1.6345062255859375
    3. '
' → logprob: -2.8845062255859375
    4. 'pc' → logprob: -3.2595062255859375
    5. 'idx' → logprob: -3.7595062255859375
    6. 'pos' → logprob: -4.2595062255859375
    7. 'state' → logprob: -4.3845062255859375
    8. 'ip' → logprob: -4.3845062255859375
    9. 'exec' → logprob: -4.7595062255859375
    10. 'dp' → logprob: -4.7595062255859375

Token 210: '#' (ID: 2)
  Prédit: 'visited'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'visited' → logprob: -0.18524856865406036
    2. 'pc' → logprob: -2.060248613357544
    3. 'def' → logprob: -4.685248374938965
    4. 'ip' → logprob: -4.810248374938965
    5. '
' → logprob: -4.935248374938965
    6. 'exec' → logprob: -5.435248374938965
    7. 'pos' → logprob: -5.560248374938965
    8. ' visited' → logprob: -6.435248374938965
    9. 'state' → logprob: -6.435248374938965
    10. 'current' → logprob: -6.560248374938965

Token 211: ' state' (ID: 2608)
  Prédit: 'visited'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'visited' → logprob: -0.1418410986661911
    2. 'def' → logprob: -2.141841173171997
    3. 'pc' → logprob: -4.516840934753418
    4. 'exec' → logprob: -7.141840934753418
    5. 'from' → logprob: -7.141840934753418
    6. 'pos' → logprob: -7.266840934753418
    7. 'ip' → logprob: -7.516840934753418
    8. 'execut' → logprob: -8.391840934753418
    9. 'idx' → logprob: -8.641840934753418
    10. 'state' → logprob: -9.141840934753418

Token 212: ':' (ID: 25)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.14570237696170807
    2. 's' → logprob: -3.020702362060547
    3. '=' → logprob: -3.270702362060547
    4. '_' → logprob: -3.520702362060547
    5. ')' → logprob: -4.520702362060547
    6. ' _' → logprob: -5.895702362060547
    7. '_stack' → logprob: -6.395702362060547
    8. ',' → logprob: -7.270702362060547
    9. '_space' → logprob: -7.395702362060547
    10. ' )' → logprob: -7.395702362060547

Token 213: ' (' (ID: 350)
  Prédit: '(line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(line' → logprob: -0.2123311311006546
    2. '(' → logprob: -2.7123310565948486
    3. '(current' → logprob: -3.5873310565948486
    4. '(cur' → logprob: -4.337331295013428
    5. ' (' → logprob: -4.462331295013428
    6. '(state' → logprob: -4.462331295013428
    7. '(program' → logprob: -4.462331295013428
    8. '(curr' → logprob: -4.712331295013428
    9. '(idx' → logprob: -4.712331295013428
    10. '(None' → logprob: -4.962331295013428

Token 214: 'pc' (ID: 6344)
  Prédit: 'pc'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pc' → logprob: -0.5699625015258789
    2. 'idx' → logprob: -2.194962501525879
    3. 'current' → logprob: -2.194962501525879
    4. 'ip' → logprob: -2.694962501525879
    5. 'index' → logprob: -2.944962501525879
    6. 'line' → logprob: -3.444962501525879
    7. 'i' → logprob: -3.694962501525879
    8. 'prog' → logprob: -4.194962501525879
    9. 'curr' → logprob: -4.819962501525879
    10. 'program' → logprob: -5.194962501525879

Token 215: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00042888117604888976
    2. ' ,' → logprob: -8.250429153442383
    3. ',var' → logprob: -10.125429153442383
    4. ',index' → logprob: -10.500429153442383
    5. ',state' → logprob: -10.625429153442383
    6. ')' → logprob: -10.750429153442383
    7. '_idx' → logprob: -11.250429153442383
    8. ',
' → logprob: -11.750429153442383
    9. ',)' → logprob: -12.375429153442383
    10. ',v' → logprob: -12.500429153442383

Token 216: ' tuple' (ID: 31311)
  Prédit: 'tuple'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tuple' → logprob: -0.5098570585250854
    2. 'fro' → logprob: -1.8848570585250854
    3. ' fro' → logprob: -2.134857177734375
    4. ' tuple' → logprob: -2.509857177734375
    5. ')' → logprob: -3.759857177734375
    6. 'vars' → logprob: -4.384857177734375
    7. 'variables' → logprob: -5.384857177734375
    8. '(tuple' → logprob: -6.134857177734375
    9. 'init' → logprob: -6.509857177734375
    10. ' variables' → logprob: -7.009857177734375

Token 217: '(var' (ID: 15816)
  Prédit: '(sorted'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(sorted' → logprob: -0.10228894650936127
    2. '(init' → logprob: -3.1022889614105225
    3. '(' → logprob: -3.2272889614105225
    4. '(vars' → logprob: -5.602288722991943
    5. '([' → logprob: -5.977288722991943
    6. ')' → logprob: -6.102288722991943
    7. '((' → logprob: -6.727288722991943
    8. '(values' → logprob: -7.352288722991943
    9. '(variable' → logprob: -7.602288722991943
    10. '(items' → logprob: -7.977288722991943

Token 218: '_values' (ID: 20393)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.04720582067966461
    2. '_values' → logprob: -4.422205924987793
    3. 'values' → logprob: -4.547205924987793
    4. 'ues' → logprob: -4.547205924987793
    5. '_init' → logprob: -5.047205924987793
    6. 'init' → logprob: -6.297205924987793
    7. '(init' → logprob: -6.797205924987793
    8. 'i' → logprob: -6.922205924987793
    9. '(values' → logprob: -7.922205924987793
    10. '_vals' → logprob: -8.047205924987793

Token 219: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.004023426678031683
    2. ')' → logprob: -6.254023551940918
    3. '()))' → logprob: -7.129023551940918
    4. '.values' → logprob: -7.504023551940918
    5. 's' → logprob: -8.379023551940918
    6. '_values' → logprob: -8.504023551940918
    7. 'values' → logprob: -9.379023551940918
    8. ' ))' → logprob: -9.754023551940918
    9. '),' → logprob: -10.004023551940918
    10. 'items' → logprob: -10.879023551940918

Token 220: ' to' (ID: 316)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.48199009895324707
    2. ' =' → logprob: -1.981990098953247
    3. ':' → logprob: -2.231990098953247
    4. '=' → logprob: -2.856990098953247
    5. 'def' → logprob: -4.231989860534668
    6. 'state' → logprob: -4.356989860534668
    7. ',' → logprob: -4.481989860534668
    8. '
' → logprob: -4.731989860534668
    9. ' )' → logprob: -4.856989860534668
    10. '#' → logprob: -5.106989860534668

Token 221: ' detect' (ID: 11839)
  Prédit: 'detect'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'detect' → logprob: -0.19553662836551666
    2. 'visited' → logprob: -2.5705366134643555
    3. ' detect' → logprob: -2.8205366134643555
    4. ')' → logprob: -4.5705366134643555
    5. 'set' → logprob: -4.9455366134643555
    6. 'state' → logprob: -5.1955366134643555
    7. 'seen' → logprob: -5.9455366134643555
    8. ' visited' → logprob: -6.1955366134643555
    9. 'check' → logprob: -6.3205366134643555
    10. '_detect' → logprob: -6.4455366134643555

Token 222: ' loops' (ID: 57130)
  Prédit: 'cycles'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cycles' → logprob: -0.1926613599061966
    2. 'loops' → logprob: -2.5676612854003906
    3. 'visited' → logprob: -3.0676612854003906
    4. ' cycles' → logprob: -3.9426612854003906
    5. 'in' → logprob: -4.817661285400391
    6. '#' → logprob: -4.942661285400391
    7. 're' → logprob: -5.192661285400391
    8. ' loops' → logprob: -5.317661285400391
    9. '_cycles' → logprob: -5.817661285400391
    10. ' visited' → logprob: -7.192661285400391

Token 223: '
' (ID: 198)
  Prédit: 'state'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'state' → logprob: -0.6681357622146606
    2. 'visited' → logprob: -2.043135643005371
    3. 'pc' → logprob: -2.168135643005371
    4. 'def' → logprob: -2.543135643005371
    5. ')' → logprob: -3.293135643005371
    6. 'dp' → logprob: -3.543135643005371
    7. '
' → logprob: -3.918135643005371
    8. 'states' → logprob: -4.418135643005371
    9. ',' → logprob: -5.168135643005371
    10. 'variables' → logprob: -5.293135643005371

Token 224: '#' (ID: 2)
  Prédit: 'state'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'state' → logprob: -0.9357557892799377
    2. 'pc' → logprob: -1.560755729675293
    3. 'def' → logprob: -2.310755729675293
    4. 'prog' → logprob: -2.310755729675293
    5. ')' → logprob: -3.310755729675293
    6. '_' → logprob: -3.560755729675293
    7. '(' → logprob: -4.060755729675293
    8. ' =' → logprob: -4.435755729675293
    9. ' ' → logprob: -4.685755729675293
    10. ',' → logprob: -4.685755729675293

Token 225: ' But' (ID: 3072)
  Prédit: 'pc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pc' → logprob: -0.4690247178077698
    2. 'def' → logprob: -1.844024658203125
    3. 'var' → logprob: -2.219024658203125
    4. 'vars' → logprob: -3.469024658203125
    5. 'prog' → logprob: -3.719024658203125
    6. 'from' → logprob: -4.219024658203125
    7. 'variables' → logprob: -4.344024658203125
    8. 'state' → logprob: -4.969024658203125
    9. 'visited' → logprob: -5.844024658203125
    10. 'exec' → logprob: -5.969024658203125

Token 226: ' var' (ID: 972)
  Prédit: 'the'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'the' → logprob: -1.8753231763839722
    2. 'since' → logprob: -1.8753231763839722
    3. ' the' → logprob: -2.6253232955932617
    4. 'we' → logprob: -2.6253232955932617
    5. 'pc' → logprob: -2.6253232955932617
    6. 'variables' → logprob: -2.8753232955932617
    7. ' since' → logprob: -3.0003232955932617
    8. ' we' → logprob: -3.3753232955932617
    9. '#' → logprob: -3.5003232955932617
    10. 'to' → logprob: -3.6253232955932617

Token 227: ' values' (ID: 4824)
  Prédit: '_values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_values' → logprob: -0.06730888783931732
    2. 's' → logprob: -3.1923089027404785
    3. '_' → logprob: -4.1923089027404785
    4. 'values' → logprob: -5.3173089027404785
    5. '_vals' → logprob: -6.4423089027404785
    6. '_states' → logprob: -7.1923089027404785
    7. ' _' → logprob: -8.06730842590332
    8. 'iable' → logprob: -8.19230842590332
    9. '_s' → logprob: -8.44230842590332
    10. '```' → logprob: -9.06730842590332

Token 228: ' max' (ID: 2999)
  Prédit: ' can'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' can' → logprob: -0.2647749185562134
    2. ' are' → logprob: -2.139774799346924
    3. 'can' → logprob: -3.389774799346924
    4. ' may' → logprob: -3.639774799346924
    5. ' could' → logprob: -4.014774799346924
    6. ' might' → logprob: -4.639774799346924
    7. 'may' → logprob: -5.264774799346924
    8. ' only' → logprob: -5.389774799346924
    9. 'are' → logprob: -5.514774799346924
    10. ')' → logprob: -5.889774799346924

Token 229: ' ' (ID: 220)
  Prédit: '_values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_values' → logprob: -0.4359872341156006
    2. ' _' → logprob: -1.4359872341156006
    3. '_value' → logprob: -3.8109872341156006
    4. '_' → logprob: -4.06098747253418
    5. 'int' → logprob: -4.43598747253418
    6. ' =' → logprob: -4.81098747253418
    7. '_val' → logprob: -5.18598747253418
    8. 'size' → logprob: -5.18598747253418
    9. '_VALUES' → logprob: -5.31098747253418
    10. ' ' → logprob: -5.43598747253418

Token 230: '0' (ID: 15)
  Prédit: '_values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_values' → logprob: -0.36617976427078247
    2. '_val' → logprob: -2.2411797046661377
    3. '_value' → logprob: -2.7411797046661377
    4. '=' → logprob: -3.2411797046661377
    5. '_' → logprob: -4.241179943084717
    6. '_len' → logprob: -4.491179943084717
    7. '_depth' → logprob: -4.491179943084717
    8. '_vals' → logprob: -4.491179943084717
    9. 'len' → logprob: -4.741179943084717
    10. ' =' → logprob: -5.491179943084717

Token 231: '..' (ID: 485)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0630570650100708
    2. '<|end|>' → logprob: -3.3130569458007812
    3. ',' → logprob: -4.313056945800781
    4. ' )' → logprob: -5.688056945800781
    5. '),' → logprob: -7.063056945800781
    6. '...' → logprob: -7.063056945800781
    7. ' ,' → logprob: -7.063056945800781
    8. 'x' → logprob: -7.438056945800781
    9. ' ' → logprob: -7.438056945800781
    10. ' or' → logprob: -7.688056945800781

Token 232: '15' (ID: 1055)
  Prédit: '100'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '100' → logprob: -0.7102243304252625
    2. ' ' → logprob: -1.0852243900299072
    3. '10' → logprob: -2.9602243900299072
    4. '0' → logprob: -3.4602243900299072
    5. '1' → logprob: -3.7102243900299072
    6. '255' → logprob: -4.585224151611328
    7. '(' → logprob: -4.710224151611328
    8. '9' → logprob: -4.835224151611328
    9. ' (' → logprob: -4.835224151611328
    10. '999' → logprob: -5.210224151611328

Token 233: ' or' (ID: 503)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.4826667010784149
    2. 'MAX' → logprob: -1.2326667308807373
    3. 'var' → logprob: -3.2326667308807373
    4. 'def' → logprob: -3.6076667308807373
    5. '
' → logprob: -5.107666492462158
    6. 'dp' → logprob: -6.107666492462158
    7. '#' → logprob: -6.357666492462158
    8. 'vars' → logprob: -6.357666492462158
    9. 'VAR' → logprob: -6.607666492462158
    10. 'from' → logprob: -6.857666492462158

Token 234: ' else' (ID: 1203)
  Prédit: '15'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '15' → logprob: -1.1869478225708008
    2. 'None' → logprob: -1.6869478225708008
    3. 'more' → logprob: -1.8119478225708008
    4. 'higher' → logprob: -2.561947822570801
    5. '1' → logprob: -2.936947822570801
    6. '16' → logprob: -3.436947822570801
    7. 'some' → logprob: -3.936947822570801
    8. 'max' → logprob: -4.061947822570801
    9. 'sys' → logprob: -4.311947822570801
    10. 'maybe' → logprob: -4.436947822570801

Token 235: ' stops' (ID: 29924)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.61087965965271
    2. '
' → logprob: -1.86087965965271
    3. 'max' → logprob: -2.36087965965271
    4. '#' → logprob: -2.86087965965271
    5. ' def' → logprob: -3.86087965965271
    6. ' max' → logprob: -4.235879898071289
    7. 'import' → logprob: -4.360879898071289
    8. 'MAX' → logprob: -4.360879898071289
    9. '```' → logprob: -4.485879898071289
    10. ',' → logprob: -4.610879898071289

Token 236: ' early' (ID: 6047)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.4939338266849518
    2. 'max' → logprob: -1.2439337968826294
    3. 'MAX' → logprob: -2.493933916091919
    4. 'pc' → logprob: -5.24393367767334
    5. 'mask' → logprob: -5.86893367767334
    6. '
' → logprob: -6.24393367767334
    7. '#' → logprob: -6.49393367767334
    8. 'state' → logprob: -6.74393367767334
    9. 'MASK' → logprob: -7.11893367767334
    10. ')' → logprob: -7.36893367767334

Token 237: '
' (ID: 198)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.3706526458263397
    2. 'max' → logprob: -1.620652675628662
    3. '
' → logprob: -3.495652675628662
    4. 'pc' → logprob: -3.870652675628662
    5. 'state' → logprob: -4.245652675628662
    6. 'mask' → logprob: -4.995652675628662
    7. '#' → logprob: -5.245652675628662
    8. 'MAX' → logprob: -5.370652675628662
    9. ')' → logprob: -5.745652675628662
    10. ')
' → logprob: -5.745652675628662

Token 238: '#' (ID: 2)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.3249562978744507
    2. 'pc' → logprob: -2.3249564170837402
    3. ')' → logprob: -2.8249564170837402
    4. 'state' → logprob: -3.1999564170837402
    5. 'max' → logprob: -3.4499564170837402
    6. 'prog' → logprob: -4.32495641708374
    7. 'visited' → logprob: -4.94995641708374
    8. 'dp' → logprob: -5.19995641708374
    9. 'import' → logprob: -6.19995641708374
    10. 'memory' → logprob: -6.19995641708374

Token 239: ' Actually' (ID: 50557)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.16576099395751953
    2. 'pc' → logprob: -2.5407609939575195
    3. 'prog' → logprob: -3.2907609939575195
    4. 'state' → logprob: -5.0407609939575195
    5. ')' → logprob: -5.1657609939575195
    6. 'idx' → logprob: -5.2907609939575195
    7. 'visited' → logprob: -5.2907609939575195
    8. 'max' → logprob: -5.5407609939575195
    9. 'dp' → logprob: -5.7907609939575195
    10. 'exec' → logprob: -6.7907609939575195

Token 240: ' variable' (ID: 11076)
  Prédit: ' we'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' we' → logprob: -1.8298169374465942
    2. ' the' → logprob: -2.0798168182373047
    3. 'we' → logprob: -2.3298168182373047
    4. '#' → logprob: -2.3298168182373047
    5. ',' → logprob: -2.4548168182373047
    6. 'the' → logprob: -2.4548168182373047
    7. 'max' → logprob: -2.5798168182373047
    8. 'values' → logprob: -3.0798168182373047
    9. 'variables' → logprob: -3.0798168182373047
    10. 'sys' → logprob: -4.079816818237305

Token 241: ' values' (ID: 4824)
  Prédit: 'values'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'values' → logprob: -0.08551733940839767
    2. ' values' → logprob: -3.085517406463623
    3. '_values' → logprob: -3.960517406463623
    4. 's' → logprob: -4.085517406463623
    5. 'max' → logprob: -9.335516929626465
    6. 'value' → logprob: -9.835516929626465
    7. 'states' → logprob: -10.085516929626465
    8. '	values' → logprob: -10.460516929626465
    9. '<|end|>' → logprob: -10.710516929626465
    10. 'ranges' → logprob: -11.085516929626465

Token 242: ' limited' (ID: 9913)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -1.0338910818099976
    2. ' are' → logprob: -1.6588910818099976
    3. 'max' → logprob: -1.6588910818099976
    4. ' can' → logprob: -2.158891201019287
    5. ' =' → logprob: -3.158891201019287
    6. 's' → logprob: -3.408891201019287
    7. 'can' → logprob: -4.033891201019287
    8. 'are' → logprob: -4.783891201019287
    9. '=[]' → logprob: -5.033891201019287
    10. '<|end|>' → logprob: -5.033891201019287

Token 243: ' to' (ID: 316)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5615032315254211
    2. 'to' → logprob: -1.3115031719207764
    3. ' to' → logprob: -2.6865031719207764
    4. ' =' → logprob: -3.3115031719207764
    5. 'def' → logprob: -3.5615031719207764
    6. 'max' → logprob: -4.4365034103393555
    7. ')' → logprob: -5.3115034103393555
    8. 'import' → logprob: -6.0615034103393555
    9. '_max' → logprob: -6.8115034103393555
    10. ',' → logprob: -6.9365034103393555

Token 244: ' ' (ID: 220)
  Prédit: '15'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '15' → logprob: -0.3889048993587494
    2. '16' → logprob: -1.1389049291610718
    3. '20' → logprob: -7.513905048370361
    4. '100' → logprob: -8.013904571533203
    5. '4' → logprob: -8.513904571533203
    6. '31' → logprob: -8.763904571533203
    7. '32' → logprob: -8.763904571533203
    8. '655' → logprob: -8.763904571533203
    9. '30' → logprob: -9.013904571533203
    10. '10' → logprob: -9.388904571533203

Token 245: '0' (ID: 15)
  Prédit: '15'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '15' → logprob: -0.6954889297485352
    2. '16' → logprob: -0.6954889297485352
    3. '4' → logprob: -6.695488929748535
    4. '20' → logprob: -8.070488929748535
    5. '100' → logprob: -9.070488929748535
    6. '32' → logprob: -9.195488929748535
    7. '31' → logprob: -9.320488929748535
    8. '655' → logprob: -9.320488929748535
    9. '30' → logprob: -9.570488929748535
    10. '0' → logprob: -9.695488929748535

Token 246: '..' (ID: 485)
  Prédit: '..'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '..' → logprob: -0.15100257098674774
    2. '...' → logprob: -2.1510026454925537
    3. '<|end|>' → logprob: -4.151002407073975
    4. '.' → logprob: -6.276002407073975
    5. ' or' → logprob: -6.651002407073975
    6. ')' → logprob: -7.026002407073975
    7. '#' → logprob: -7.401002407073975
    8. ' until' → logprob: -8.026002883911133
    9. ',' → logprob: -8.026002883911133
    10. '-' → logprob: -8.276002883911133

Token 247: '15' (ID: 1055)
  Prédit: '15'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '15' → logprob: -0.0005309910629875958
    2. '655' → logprob: -8.250531196594238
    3. '255' → logprob: -9.125531196594238
    4. '100' → logprob: -9.250531196594238
    5. '16' → logprob: -11.750531196594238
    6. '
' → logprob: -12.000531196594238
    7. ' ' → logprob: -12.000531196594238
    8. '31' → logprob: -12.125531196594238
    9. '10' → logprob: -12.375531196594238
    10. '327' → logprob: -12.500531196594238

Token 248: ' inclusive' (ID: 29482)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5098250508308411
    2. 'max' → logprob: -2.2598249912261963
    3. 'def' → logprob: -2.2598249912261963
    4. '#' → logprob: -2.7598249912261963
    5. '
' → logprob: -3.6348249912261963
    6. 'import' → logprob: -4.009825229644775
    7. '<|end|>' → logprob: -4.384825229644775
    8. ',' → logprob: -4.759825229644775
    9. '<|end|>' → logprob: -4.884825229644775
    10. 'for' → logprob: -4.884825229644775

Token 249: ',' (ID: 11)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.21550646424293518
    2. '
' → logprob: -2.3405065536499023
    3. ')' → logprob: -3.0905065536499023
    4. '#' → logprob: -4.090506553649902
    5. 'max' → logprob: -4.590506553649902
    6. 'state' → logprob: -4.715506553649902
    7. 'import' → logprob: -5.965506553649902
    8. ',' → logprob: -6.215506553649902
    9. '```' → logprob: -6.340506553649902
    10. 'current' → logprob: -6.590506553649902

Token 250: ' but' (ID: 889)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.2175194025039673
    2. ' so' → logprob: -1.5925194025039673
    3. 'def' → logprob: -2.5925192832946777
    4. 'and' → logprob: -2.9675192832946777
    5. ' and' → logprob: -2.9675192832946777
    6. 'max' → logprob: -3.3425192832946777
    7. 'so' → logprob: -3.3425192832946777
    8. 'since' → logprob: -3.8425192832946777
    9. ' #' → logprob: -3.9675192832946777
    10. ' as' → logprob: -3.9675192832946777

Token 251: ' can' (ID: 665)
  Prédit: 'we'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'we' → logprob: -1.6852298974990845
    2. 'if' → logprob: -1.9352298974990845
    3. 'can' → logprob: -2.060229778289795
    4. 'values' → logprob: -2.685229778289795
    5. 'not' → logprob: -2.810229778289795
    6. ' can' → logprob: -3.185229778289795
    7. 'variables' → logprob: -3.435229778289795
    8. 'the' → logprob: -3.435229778289795
    9. 'only' → logprob: -3.810229778289795
    10. ' we' → logprob: -3.810229778289795

Token 252: ' become' (ID: 5025)
  Prédit: 'go'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'go' → logprob: -0.8105915784835815
    2. 'increase' → logprob: -1.9355915784835815
    3. 'ex' → logprob: -2.185591697692871
    4. 'be' → logprob: -2.685591697692871
    5. 'overflow' → logprob: -2.810591697692871
    6. 'only' → logprob: -3.685591697692871
    7. 'grow' → logprob: -3.935591697692871
    8. 'tempor' → logprob: -3.935591697692871
    9. 'never' → logprob: -4.060591697692871
    10. 'not' → logprob: -4.060591697692871

Token 253: ' <' (ID: 464)
  Prédit: 'negative'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'negative' → logprob: -0.8114637136459351
    2. '>' → logprob: -1.561463713645935
    3. 'larg' → logprob: -1.561463713645935
    4. '16' → logprob: -2.9364638328552246
    5. 'greater' → logprob: -2.9364638328552246
    6. 'more' → logprob: -4.561463832855225
    7. 'higher' → logprob: -5.061463832855225
    8. '-' → logprob: -5.311463832855225
    9. 'any' → logprob: -6.186463832855225
    10. 'invalid' → logprob: -6.936463832855225

Token 254: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0005722135538235307
    2. ' ' → logprob: -7.500572204589844
    3. '```' → logprob: -11.750572204589844
    4. '-' → logprob: -12.250572204589844
    5. '=' → logprob: -12.625572204589844
    6. ' -' → logprob: -14.250572204589844
    7. '
' → logprob: -14.750572204589844
    8. '1' → logprob: -15.563072204589844
    9. 'zero' → logprob: -15.625572204589844
    10. '`' → logprob: -15.625572204589844

Token 255: ' or' (ID: 503)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.6066796779632568
    2. '#' → logprob: -1.4816796779632568
    3. '
' → logprob: -2.106679677963257
    4. 'max' → logprob: -3.731679677963257
    5. '```' → logprob: -4.106679916381836
    6. 'while' → logprob: -4.731679916381836
    7. ')' → logprob: -4.981679916381836
    8. ',' → logprob: -4.981679916381836
    9. 'for' → logprob: -5.106679916381836
    10. ' for' → logprob: -5.356679916381836

Token 256: ' >=' (ID: 5064)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '>' → logprob: -0.007826530374586582
    2. 'greater' → logprob: -5.257826328277588
    3. '16' → logprob: -6.757826328277588
    4. '0' → logprob: -7.257826328277588
    5. ' >' → logprob: -8.382826805114746
    6. '>=' → logprob: -9.257826805114746
    7. 'over' → logprob: -9.382826805114746
    8. 'or' → logprob: -9.757826805114746
    9. 'more' → logprob: -10.007826805114746
    10. ' ' → logprob: -10.507826805114746

Token 257: '16' (ID: 1125)
  Prédit: '16'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '16' → logprob: -0.07894322276115417
    2. '0' → logprob: -2.5789432525634766
    3. '15' → logprob: -10.953943252563477
    4. ' ' → logprob: -11.203943252563477
    5. '```' → logprob: -11.453943252563477
    6. '1' → logprob: -12.703943252563477
    7. '   ' → logprob: -13.203943252563477
    8. '=' → logprob: -13.453943252563477
    9. '32' → logprob: -13.953943252563477
    10. '
' → logprob: -13.953943252563477

Token 258: ' during' (ID: 3354)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.3169727325439453
    2. '
' → logprob: -1.3169727325439453
    3. 'state' → logprob: -1.9419727325439453
    4. 'def' → logprob: -2.4419727325439453
    5. ')' → logprob: -3.0669727325439453
    6. 'pc' → logprob: -3.3169727325439453
    7. 'current' → logprob: -3.5669727325439453
    8. '.' → logprob: -4.566972732543945
    9. ':' → logprob: -4.816972732543945
    10. ',' → logprob: -4.816972732543945

Token 259: ' operation' (ID: 9506)
  Prédit: 'execution'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'execution' → logprob: -0.1691250205039978
    2. 'com' → logprob: -2.9191250801086426
    3. 'operations' → logprob: -3.2941250801086426
    4. 'operation' → logprob: -3.7941250801086426
    5. 'simulation' → logprob: -4.044125080108643
    6. 'exec' → logprob: -5.419125080108643
    7. 'updates' → logprob: -5.669125080108643
    8. ' execution' → logprob: -5.919125080108643
    9. 'instructions' → logprob: -6.419125080108643
    10. 'cal' → logprob: -6.419125080108643

Token 260: ' (' (ID: 350)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.19410867989063263
    2. '
' → logprob: -2.569108724594116
    3. '#' → logprob: -2.819108724594116
    4. 'state' → logprob: -5.069108486175537
    5. ')' → logprob: -5.444108486175537
    6. 'pc' → logprob: -5.444108486175537
    7. 'while' → logprob: -5.694108486175537
    8. 'idx' → logprob: -5.944108486175537
    9. '```' → logprob: -6.319108486175537
    10. ' def' → logprob: -6.444108486175537

Token 261: 'then' (ID: 6273)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.23156605660915375
    2. ',' → logprob: -1.981566071510315
    3. '),' → logprob: -3.7315659523010254
    4. ' but' → logprob: -4.606565952301025
    5. '#' → logprob: -4.731565952301025
    6. ')
' → logprob: -4.856565952301025
    7. 'but' → logprob: -5.356565952301025
    8. ' so' → logprob: -5.856565952301025
    9. '.' → logprob: -6.106565952301025
    10. 'so' → logprob: -6.481565952301025

Token 262: ' stops' (ID: 29924)
  Prédit: 'we'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'we' → logprob: -1.4043492078781128
    2. 'halt' → logprob: -1.9043492078781128
    3. 'stop' → logprob: -2.1543493270874023
    4. ' we' → logprob: -2.2793493270874023
    5. 'terminate' → logprob: -2.6543493270874023
    6. 'execution' → logprob: -2.6543493270874023
    7. 'return' → logprob: -2.7793493270874023
    8. 'program' → logprob: -3.5293493270874023
    9. 'the' → logprob: -3.6543493270874023
    10. '#' → logprob: -3.7793493270874023

Token 263: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0017318216850981116
    2. ' )' → logprob: -7.626731872558594
    3. '_' → logprob: -7.876731872558594
    4. ')
' → logprob: -8.626731872558594
    5. ' here' → logprob: -8.876731872558594
    6. '_)' → logprob: -9.126731872558594
    7. '),' → logprob: -9.376731872558594
    8. ' execution' → logprob: -9.876731872558594
    9. ' early' → logprob: -10.251731872558594
    10. 'execution' → logprob: -10.501731872558594

Token 264: '#' (ID: 2)
  Prédit: 'pc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pc' → logprob: -0.29584020376205444
    2. 'def' → logprob: -2.795840263366699
    3. 'visited' → logprob: -3.045840263366699
    4. 'state' → logprob: -3.295840263366699
    5. '#' → logprob: -3.545840263366699
    6. 'idx' → logprob: -4.295840263366699
    7. 'exec' → logprob: -4.795840263366699
    8. 'variables' → logprob: -4.920840263366699
    9. 'max' → logprob: -4.920840263366699
    10. ')' → logprob: -5.295840263366699

Token 265: ' via' (ID: 4493)
  Prédit: 'pc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pc' → logprob: -0.18783755600452423
    2. 'def' → logprob: -2.062837600708008
    3. 'state' → logprob: -4.812837600708008
    4. 'prog' → logprob: -4.937837600708008
    5. 'pos' → logprob: -5.062837600708008
    6. 'visited' → logprob: -5.187837600708008
    7. 'idx' → logprob: -5.562837600708008
    8. 'dp' → logprob: -5.812837600708008
    9. 'variables' → logprob: -6.062837600708008
    10. '#' → logprob: -6.437837600708008

Token 266: ' assignment' (ID: 24618)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.02710198238492012
    2. 'dfs' → logprob: -5.027101993560791
    3. 'import' → logprob: -5.277101993560791
    4. 'sys' → logprob: -5.527101993560791
    5. '#' → logprob: -5.902101993560791
    6. 'from' → logprob: -6.527101993560791
    7. ' def' → logprob: -7.277101993560791
    8. 'while' → logprob: -7.527101993560791
    9. 'exec' → logprob: -7.777101993560791
    10. 'the' → logprob: -7.777101993560791

Token 267: ' check' (ID: 2371)
  Prédit: 'pc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pc' → logprob: -0.14784102141857147
    2. 'def' → logprob: -3.647840976715088
    3. 'dp' → logprob: -4.272840976715088
    4. 'variables' → logprob: -4.272840976715088
    5. 'state' → logprob: -4.397840976715088
    6. 'max' → logprob: -4.397840976715088
    7. 'visited' → logprob: -4.772840976715088
    8. '#' → logprob: -5.022840976715088
    9. 'idx' → logprob: -5.022840976715088
    10. 'pos' → logprob: -5.147840976715088

Token 268: ':' (ID: 25)
  Prédit: 'pc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pc' → logprob: -0.4545838534832001
    2. 'def' → logprob: -1.3295838832855225
    3. 'max' → logprob: -2.9545838832855225
    4. 'variables' → logprob: -4.454583644866943
    5. 'visited' → logprob: -4.579583644866943
    6. 'vars' → logprob: -5.579583644866943
    7. 'from' → logprob: -5.704583644866943
    8. 'pos' → logprob: -5.829583644866943
    9. '#' → logprob: -5.954583644866943
    10. 'idx' → logprob: -6.079583644866943

Token 269: ' if' (ID: 538)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.006771022453904152
    2. '
' → logprob: -6.381771087646484
    3. 'for' → logprob: -6.631771087646484
    4. 'pc' → logprob: -7.006771087646484
    5. 'idx' → logprob: -7.131771087646484
    6. 'max' → logprob: -8.006771087646484
    7. ' def' → logprob: -8.381771087646484
    8. '```' → logprob: -8.381771087646484
    9. 'visited' → logprob: -8.881771087646484
    10. 'exec' → logprob: -9.006771087646484

Token 270: ' assigned' (ID: 21482)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'v' → logprob: -1.0030529499053955
    2. 'var' → logprob: -1.7530529499053955
    3. 'val' → logprob: -1.7530529499053955
    4. ' not' → logprob: -2.3780529499053955
    5. 'not' → logprob: -2.6280529499053955
    6. ' val' → logprob: -3.6280529499053955
    7. 'value' → logprob: -3.6280529499053955
    8. 'any' → logprob: -3.7530529499053955
    9. '0' → logprob: -4.253052711486816
    10. ' v' → logprob: -4.628052711486816

Token 271: ' value' (ID: 1432)
  Prédit: 'value'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'value' → logprob: -0.028689652681350708
    2. 'var' → logprob: -4.653689861297607
    3. 'val' → logprob: -4.903689861297607
    4. 'values' → logprob: -5.653689861297607
    5. '<' → logprob: -5.903689861297607
    6. ' value' → logprob: -6.028689861297607
    7. '_value' → logprob: -7.403689861297607
    8. 'a' → logprob: -7.778689861297607
    9. 'to' → logprob: -7.778689861297607
    10. 'variable' → logprob: -7.778689861297607

Token 272: ' <' (ID: 464)
  Prédit: '<'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<' → logprob: -0.029712190851569176
    2. ' <' → logprob: -4.279712200164795
    3. ' not' → logprob: -4.779712200164795
    4. 'not' → logprob: -5.529712200164795
    5. '>=' → logprob: -6.404712200164795
    6. '>' → logprob: -6.779712200164795
    7. ' >=' → logprob: -9.029711723327637
    8. ' >' → logprob: -9.779711723327637
    9. ' is' → logprob: -10.154711723327637
    10. 'is' → logprob: -10.904711723327637

Token 273: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0004901225329376757
    2. ' ' → logprob: -7.625490188598633
    3. '```' → logprob: -14.000490188598633
    4. '   ' → logprob: -14.500490188598633
    5. ' ' → logprob: -15.625490188598633
    6. 'or' → logprob: -15.875490188598633
    7. '16' → logprob: -16.125490188598633
    8. '=' → logprob: -16.125490188598633
    9. ' or' → logprob: -16.875490188598633
    10. '  ' → logprob: -17.062990188598633

Token 274: ' or' (ID: 503)
  Prédit: ' or'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.003831429174169898
    2. 'or' → logprob: -5.628831386566162
    3. ':' → logprob: -8.62883186340332
    4. '0' → logprob: -11.00383186340332
    5. ',' → logprob: -11.25383186340332
    6. ' ' → logprob: -11.87883186340332
    7. ')' → logprob: -12.62883186340332
    8. ' and' → logprob: -12.87883186340332
    9. '	or' → logprob: -12.87883186340332
    10. '<|end|>' → logprob: -13.75383186340332

Token 275: ' >=' (ID: 5064)
  Prédit: '16'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '16' → logprob: -0.27520930767059326
    2. '>' → logprob: -1.7752093076705933
    3. '>=' → logprob: -2.650209426879883
    4. ' ' → logprob: -8.650209426879883
    5. 'or' → logprob: -8.900209426879883
    6. ' >' → logprob: -9.275209426879883
    7. '≥' → logprob: -10.150209426879883
    8. ' >=' → logprob: -10.525209426879883
    9. '```' → logprob: -11.275209426879883
    10. ' or' → logprob: -12.025209426879883

Token 276: '16' (ID: 1125)
  Prédit: '16'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '16' → logprob: -3.054500666621607e-06
    2. ' ' → logprob: -13.25000286102295
    3. '0' → logprob: -13.75000286102295
    4. '   ' → logprob: -17.000003814697266
    5. '```' → logprob: -17.625003814697266
    6. '=' → logprob: -17.750003814697266
    7. '1' → logprob: -18.125003814697266
    8. '`' → logprob: -19.250003814697266
    9. '
' → logprob: -19.625003814697266
    10. '``' → logprob: -19.875003814697266

Token 277: ' then' (ID: 1815)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.17235654592514038
    2. 'pc' → logprob: -2.922356605529785
    3. 'dp' → logprob: -4.172356605529785
    4. 'prog' → logprob: -4.297356605529785
    5. 'idx' → logprob: -4.422356605529785
    6. '#' → logprob: -4.422356605529785
    7. 'visited' → logprob: -4.547356605529785
    8. ')' → logprob: -5.172356605529785
    9. 'max' → logprob: -5.547356605529785
    10. 'variables' → logprob: -5.547356605529785

Token 278: ' stops' (ID: 29924)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'break' → logprob: -0.047079816460609436
    2. 'print' → logprob: -3.5470798015594482
    3. 'return' → logprob: -4.297080039978027
    4. 'halt' → logprob: -6.547080039978027
    5. 'stop' → logprob: -7.422080039978027
    6. ' break' → logprob: -7.422080039978027
    7. 'exit' → logprob: -7.922080039978027
    8. '   ' → logprob: -8.422080039978027
    9. 'terminate' → logprob: -8.797080039978027
    10. 'sys' → logprob: -9.797080039978027

Token 279: ' (' (ID: 350)
  Prédit: 'pc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pc' → logprob: -0.26323920488357544
    2. 'visited' → logprob: -2.5132391452789307
    3. 'def' → logprob: -3.0132391452789307
    4. 'state' → logprob: -3.5132391452789307
    5. 'dp' → logprob: -4.01323938369751
    6. 'exec' → logprob: -4.76323938369751
    7. '#' → logprob: -5.01323938369751
    8. 'memory' → logprob: -5.26323938369751
    9. 'idx' → logprob: -5.26323938369751
    10. 'variables' → logprob: -5.51323938369751

Token 280: 'does' (ID: 52256)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.027027498930692673
    2. 'def' → logprob: -4.902027606964111
    3. ')
' → logprob: -5.277027606964111
    4. ' )' → logprob: -5.402027606964111
    5. ')

' → logprob: -5.652027606964111
    6. 'while' → logprob: -6.777027606964111
    7. '#' → logprob: -6.902027606964111
    8. '):' → logprob: -7.277027606964111
    9. ':' → logprob: -7.652027606964111
    10. '
' → logprob: -7.652027606964111

Token 281: ' not' (ID: 625)
  Prédit: 'not'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'not' → logprob: -0.16034719347953796
    2. ' not' → logprob: -1.9103472232818604
    3. 'n't' → logprob: -10.160346984863281
    4. ')' → logprob: -10.535346984863281
    5. 'continue' → logprob: -10.785346984863281
    6. 'break' → logprob: -11.035346984863281
    7. ' break' → logprob: -11.785346984863281
    8. 'return' → logprob: -12.660346984863281
    9. '
' → logprob: -12.910346984863281
    10. ' continue' → logprob: -13.285346984863281

Token 282: ' update' (ID: 4027)
  Prédit: 'continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'continue' → logprob: -0.32818785309791565
    2. 'execute' → logprob: -1.3281878232955933
    3. 'pro' → logprob: -4.703187942504883
    4. 'break' → logprob: -6.578187942504883
    5. 'append' → logprob: -7.453187942504883
    6. 'run' → logprob: -7.578187942504883
    7. 'return' → logprob: -7.703187942504883
    8. 'allow' → logprob: -7.953187942504883
    9. 'increment' → logprob: -7.953187942504883
    10. ' continue' → logprob: -8.078187942504883

Token 283: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.030102884396910667
    2. ' )' → logprob: -4.030102729797363
    3. '_)' → logprob: -5.655102729797363
    4. ')
' → logprob: -5.780102729797363
    5. '_' → logprob: -6.655102729797363
    6. ',' → logprob: -7.405102729797363
    7. 'pc' → logprob: -7.905102729797363
    8. ' the' → logprob: -8.155102729797363
    9. 'state' → logprob: -8.280102729797363
    10. 'value' → logprob: -8.280102729797363

Token 284: '#' (ID: 2)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.6088336706161499
    2. 'pc' → logprob: -1.23383367061615
    3. 'prog' → logprob: -2.9838337898254395
    4. 'visited' → logprob: -3.2338337898254395
    5. 'idx' → logprob: -4.2338337898254395
    6. ')' → logprob: -4.4838337898254395
    7. 'state' → logprob: -4.4838337898254395
    8. 'variables' → logprob: -4.7338337898254395
    9. 'dp' → logprob: -5.3588337898254395
    10. '#' → logprob: -5.3588337898254395

Token 285: ' So' (ID: 2632)
  Prédit: 'pc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pc' → logprob: -0.5371521711349487
    2. 'def' → logprob: -1.2871521711349487
    3. 'variables' → logprob: -3.1621522903442383
    4. 'dp' → logprob: -3.4121522903442383
    5. 'prog' → logprob: -4.537152290344238
    6. 'state' → logprob: -4.662152290344238
    7. 'vars' → logprob: -4.662152290344238
    8. 'visited' → logprob: -4.912152290344238
    9. 'pos' → logprob: -5.537152290344238
    10. 'program' → logprob: -5.787152290344238

Token 286: ' value' (ID: 1432)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.13956311345100403
    2. 'pc' → logprob: -2.7645630836486816
    3. 'max' → logprob: -4.139563083648682
    4. '#' → logprob: -4.264563083648682
    5. 'variables' → logprob: -4.764563083648682
    6. 'visited' → logprob: -4.889563083648682
    7. 'prog' → logprob: -5.639563083648682
    8. 'state' → logprob: -6.139563083648682
    9. 'from' → logprob: -6.264563083648682
    10. ' def' → logprob: -6.389563083648682

Token 287: ' possible' (ID: 4149)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.02724352292716503
    2. ' =' → logprob: -4.777243614196777
    3. ' s' → logprob: -5.402243614196777
    4. '=' → logprob: -6.152243614196777
    5. ' can' → logprob: -6.652243614196777
    6. ' ranges' → logprob: -6.652243614196777
    7. ' range' → logprob: -6.777243614196777
    8. '<|end|>' → logprob: -7.152243614196777
    9. ' is' → logprob: -7.277243614196777
    10. 'values' → logprob: -7.402243614196777

Token 288: ' in' (ID: 306)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.8425188064575195
    2. ' range' → logprob: -1.3425188064575195
    3. ' ranges' → logprob: -1.9675188064575195
    4. 'range' → logprob: -2.3425188064575195
    5. 'ranges' → logprob: -3.5925188064575195
    6. 'values' → logprob: -4.2175188064575195
    7. '_range' → logprob: -5.3425188064575195
    8. ' values' → logprob: -5.4675188064575195
    9. '_ranges' → logprob: -5.9675188064575195
    10. ' s' → logprob: -5.9675188064575195

Token 289: ' ' (ID: 220)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '-' → logprob: -1.039120078086853
    2. '0' → logprob: -1.289120078086853
    3. 'range' → logprob: -1.539120078086853
    4. '[-' → logprob: -2.9141201972961426
    5. '[' → logprob: -3.0391201972961426
    6. 'variables' → logprob: -4.664120197296143
    7. '16' → logprob: -4.664120197296143
    8. ' range' → logprob: -4.914120197296143
    9. 'the' → logprob: -5.039120197296143
    10. ' -' → logprob: -5.789120197296143

Token 290: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.29244717955589294
    2. 'range' → logprob: -2.167447090148926
    3. '-' → logprob: -2.792447090148926
    4. '[' → logprob: -3.292447090148926
    5. 'variables' → logprob: -4.292447090148926
    6. '[-' → logprob: -4.417447090148926
    7. 'state' → logprob: -5.542447090148926
    8. '16' → logprob: -6.042447090148926
    9. '{' → logprob: -6.917447090148926
    10. 'vars' → logprob: -7.042447090148926

Token 291: '..' (ID: 485)
  Prédit: '..'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '..' → logprob: -0.00011248346709180623
    2. ' ..' → logprob: -9.625112533569336
    3. '...' → logprob: -10.500112533569336
    4. '.' → logprob: -11.750112533569336
    5. '..<' → logprob: -12.375112533569336
    6. '..
' → logprob: -13.250112533569336
    7. '16' → logprob: -13.250112533569336
    8. '..)' → logprob: -14.625112533569336
    9. ' to' → logprob: -14.750112533569336
    10. '15' → logprob: -14.750112533569336

Token 292: '15' (ID: 1055)
  Prédit: '15'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '15' → logprob: -0.00761620607227087
    2. '16' → logprob: -4.88261604309082
    3. ' ' → logprob: -12.25761604309082
    4. '=' → logprob: -14.07011604309082
    5. '1' → logprob: -14.32011604309082
    6. '14' → logprob: -14.63261604309082
    7. '17' → logprob: -14.69511604309082
    8. '```' → logprob: -14.88261604309082
    9. '
' → logprob: -15.07011604309082
    10. '5' → logprob: -15.38261604309082

Token 293: ' inclusive' (ID: 29482)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.848816990852356
    2. '<|end|>' → logprob: -1.848816990852356
    3. '
' → logprob: -1.973816990852356
    4. 'def' → logprob: -2.2238168716430664
    5. '#' → logprob: -3.2238168716430664
    6. ',' → logprob: -3.4738168716430664
    7. '.' → logprob: -4.223816871643066
    8. '<|end|>' → logprob: -4.473816871643066
    9. 'max' → logprob: -4.598816871643066
    10. 'state' → logprob: -4.723816871643066

Token 294: '.

' (ID: 364)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.980857789516449
    2. 'def' → logprob: -1.2308578491210938
    3. 'pc' → logprob: -1.9808578491210938
    4. '
' → logprob: -2.7308578491210938
    5. '#' → logprob: -3.4808578491210938
    6. ',' → logprob: -3.7308578491210938
    7. 'state' → logprob: -4.230857849121094
    8. 'current' → logprob: -4.480857849121094
    9. '```' → logprob: -4.855857849121094
    10. 'max' → logprob: -5.355857849121094

Token 295: '#' (ID: 2)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.30432388186454773
    2. 'pc' → logprob: -1.4293239116668701
    3. 'variables' → logprob: -4.429323673248291
    4. 'visited' → logprob: -5.429323673248291
    5. 'vars' → logprob: -6.304323673248291
    6. '
' → logprob: -6.929323673248291
    7. 'idx' → logprob: -7.304323673248291
    8. 'prog' → logprob: -7.429323673248291
    9. 'state' → logprob: -7.804323673248291
    10. 'dp' → logprob: -8.05432415008545

Token 296: ' But' (ID: 3072)
  Prédit: 'pc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pc' → logprob: -0.3233727812767029
    2. 'def' → logprob: -1.4483728408813477
    3. 'visited' → logprob: -3.8233728408813477
    4. 'from' → logprob: -4.948372840881348
    5. 'variables' → logprob: -5.948372840881348
    6. 'max' → logprob: -5.948372840881348
    7. 'memo' → logprob: -5.948372840881348
    8. '#' → logprob: -7.198372840881348
    9. 'vars' → logprob: -7.323372840881348
    10. 'memory' → logprob: -7.698372840881348

Token 297: ' variables' (ID: 13955)
  Prédit: 'pc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pc' → logprob: -1.7018146514892578
    2. ' pc' → logprob: -1.8268146514892578
    3. 'len' → logprob: -1.9518146514892578
    4. '#' → logprob: -2.076814651489258
    5. 'prog' → logprob: -3.076814651489258
    6. ' len' → logprob: -3.326814651489258
    7. 'def' → logprob: -3.326814651489258
    8. 'for' → logprob: -3.701814651489258
    9. 'max' → logprob: -3.701814651489258
    10. ' for' → logprob: -3.951814651489258

Token 298: ' can' (ID: 665)
  Prédit: ' can'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' can' → logprob: -0.322272390127182
    2. ' values' → logprob: -2.322272300720215
    3. ' are' → logprob: -2.947272300720215
    4. ' =' → logprob: -3.447272300720215
    5. '_values' → logprob: -3.572272300720215
    6. 'values' → logprob: -3.947272300720215
    7. ' may' → logprob: -4.197272300720215
    8. '=' → logprob: -4.947272300720215
    9. 'can' → logprob: -5.197272300720215
    10. ' have' → logprob: -6.322272300720215

Token 299: ' be' (ID: 413)
  Prédit: ' only'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' only' → logprob: -0.839128315448761
    2. ' be' → logprob: -1.8391282558441162
    3. 'only' → logprob: -2.464128255844116
    4. ' become' → logprob: -2.589128255844116
    5. 'be' → logprob: -2.839128255844116
    6. ' change' → logprob: -3.589128255844116
    7. 'increase' → logprob: -4.089128494262695
    8. 'change' → logprob: -4.214128494262695
    9. ' go' → logprob: -4.214128494262695
    10. ' have' → logprob: -4.339128494262695

Token 300: ' max' (ID: 2999)
  Prédit: 'used'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'used' → logprob: -1.3810604810714722
    2. 'negative' → logprob: -1.6310604810714722
    3. 'assigned' → logprob: -2.1310606002807617
    4. 'up' → logprob: -2.8810606002807617
    5. 'None' → logprob: -3.1310606002807617
    6. 'modified' → logprob: -3.1310606002807617
    7. 'increment' → logprob: -3.1310606002807617
    8. 'updated' → logprob: -3.6310606002807617
    9. 'only' → logprob: -3.7560606002807617
    10. 'in' → logprob: -4.006060600280762

Token 301: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6329633593559265
    2. '16' → logprob: -1.2579634189605713
    3. '15' → logprob: -2.7579634189605713
    4. 'values' → logprob: -3.7579634189605713
    5. 'value' → logprob: -4.007963180541992
    6. '=' → logprob: -4.257963180541992
    7. ' values' → logprob: -4.757963180541992
    8. ' value' → logprob: -5.507963180541992
    9. '14' → logprob: -5.757963180541992
    10. '4' → logprob: -5.882963180541992

Token 302: '5' (ID: 20)
  Prédit: '16'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '16' → logprob: -0.31115081906318665
    2. '15' → logprob: -2.3111507892608643
    3. ' ' → logprob: -3.4361507892608643
    4. 'values' → logprob: -3.4361507892608643
    5. 'value' → logprob: -3.9361507892608643
    6. '0' → logprob: -3.9361507892608643
    7. '4' → logprob: -4.311151027679443
    8. '=' → logprob: -5.186151027679443
    9. 'len' → logprob: -5.311151027679443
    10. '5' → logprob: -5.436151027679443

Token 303: ' distinct' (ID: 16913)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.7509585022926331
    2. 'MAX' → logprob: -1.7509584426879883
    3. 'def' → logprob: -2.3759584426879883
    4. '#' → logprob: -2.5009584426879883
    5. ' =' → logprob: -3.1259584426879883
    6. '_MAX' → logprob: -3.6259584426879883
    7. 'if' → logprob: -3.8759584426879883
    8. 'import' → logprob: -4.250958442687988
    9. '=' → logprob: -4.375958442687988
    10. '
' → logprob: -5.000958442687988

Token 304: ',' (ID: 11)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.3598615825176239
    2. 'max' → logprob: -2.4848616123199463
    3. '#' → logprob: -3.1098616123199463
    4. 'MAX' → logprob: -3.1098616123199463
    5. '
' → logprob: -3.4848616123199463
    6. 'sys' → logprob: -3.7348616123199463
    7. 'var' → logprob: -4.609861373901367
    8. 'if' → logprob: -4.734861373901367
    9. 's' → logprob: -4.859861373901367
    10. 'assert' → logprob: -5.234861373901367

Token 305: ' each' (ID: 2454)
  Prédit: ' so'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' so' → logprob: -0.9176958799362183
    2. '#' → logprob: -1.0426958799362183
    3. 'so' → logprob: -2.042695999145508
    4. 'and' → logprob: -2.667695999145508
    5. ' and' → logprob: -3.667695999145508
    6. 'max' → logprob: -4.792695999145508
    7. ' #' → logprob: -6.042695999145508
    8. 'each' → logprob: -6.042695999145508
    9. 'values' → logprob: -6.792695999145508
    10. ' each' → logprob: -6.917695999145508

Token 306: ' in' (ID: 306)
  Prédit: ' can'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' can' → logprob: -1.4603575468063354
    2. ' with' → logprob: -2.460357666015625
    3. 'variable' → logprob: -2.460357666015625
    4. ' represented' → logprob: -2.585357666015625
    5. ' stored' → logprob: -2.585357666015625
    6. 'var' → logprob: -2.835357666015625
    7. ' variable' → logprob: -2.960357666015625
    8. ' taking' → logprob: -2.960357666015625
    9. 'value' → logprob: -3.085357666015625
    10. 'stored' → logprob: -3.085357666015625

Token 307: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.2836199402809143
    2. '[' → logprob: -2.0336198806762695
    3. 'range' → logprob: -2.6586198806762695
    4. '16' → logprob: -4.2836198806762695
    5. ' range' → logprob: -4.5336198806762695
    6. '4' → logprob: -5.2836198806762695
    7. '{' → logprob: -5.5336198806762695
    8. ' ' → logprob: -5.5336198806762695
    9. 'values' → logprob: -5.5336198806762695
    10. ' [' → logprob: -5.7836198806762695

Token 308: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.43723902106285095
    2. '[' → logprob: -1.6872390508651733
    3. '4' → logprob: -2.062238931655884
    4. 'range' → logprob: -3.562238931655884
    5. '16' → logprob: -4.562239170074463
    6. 'values' → logprob: -6.562239170074463
    7. '{' → logprob: -7.062239170074463
    8. 'value' → logprob: -8.437238693237305
    9. ' [' → logprob: -8.562238693237305
    10. '(' → logprob: -8.687238693237305

Token 309: '..' (ID: 485)
  Prédit: '..'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '..' → logprob: -3.082895273109898e-05
    2. '16' → logprob: -11.000030517578125
    3. '...' → logprob: -11.625030517578125
    4. ' ..' → logprob: -13.125030517578125
    5. 'x' → logprob: -13.875030517578125
    6. ',' → logprob: -14.000030517578125
    7. '.' → logprob: -14.375030517578125
    8. '..
' → logprob: -15.875030517578125
    9. ',..' → logprob: -16.125030517578125
    10. ' to' → logprob: -16.625030517578125

Token 310: '15' (ID: 1055)
  Prédit: '16'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '16' → logprob: -0.20143049955368042
    2. '15' → logprob: -1.7014305591583252
    3. ' ' → logprob: -11.076430320739746
    4. '1' → logprob: -14.451430320739746
    5. '
' → logprob: -15.576430320739746
    6. '```' → logprob: -15.701430320739746
    7. '``' → logprob: -15.826430320739746
    8. '{' → logprob: -15.951430320739746
    9. '`' → logprob: -15.951430320739746
    10. '=' → logprob: -16.763931274414062

Token 311: ' =>' (ID: 871)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'max' → logprob: -1.0096737146377563
    2. 'def' → logprob: -1.2596737146377563
    3. 'from' → logprob: -2.509673595428467
    4. 'var' → logprob: -2.759673595428467
    5. 'MAX' → logprob: -2.884673595428467
    6. 'pc' → logprob: -3.384673595428467
    7. 'dp' → logprob: -3.759673595428467
    8. '#' → logprob: -4.009673595428467
    9. 'visited' → logprob: -4.009673595428467
    10. 'vars' → logprob: -4.509673595428467

Token 312: ' ' (ID: 220)
  Prédit: '16'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '16' → logprob: -1.2676880359649658
    2. ' max' → logprob: -1.6426880359649658
    3. 'max' → logprob: -1.7676880359649658
    4. ' ' → logprob: -1.8926880359649658
    5. ' total' → logprob: -3.392688035964966
    6. 'total' → logprob: -3.517688035964966
    7. ' state' → logprob: -3.892688035964966
    8. 'state' → logprob: -3.892688035964966
    9. 'possible' → logprob: -4.017687797546387
    10. ' states' → logprob: -4.642687797546387

Token 313: '16' (ID: 1125)
  Prédit: '16'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '16' → logprob: -0.6983430981636047
    2. 'max' → logprob: -0.9483430981636047
    3. 'state' → logprob: -3.19834303855896
    4. 'total' → logprob: -4.198343276977539
    5. 'possible' → logprob: -4.198343276977539
    6. 'up' → logprob: -4.448343276977539
    7. '(' → logprob: -5.198343276977539
    8. 'at' → logprob: -5.448343276977539
    9. 'states' → logprob: -5.448343276977539
    10. '6' → logprob: -5.698343276977539

Token 314: '^' (ID: 61)
  Prédit: '**'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '**' → logprob: -0.008922168985009193
    2. ' **' → logprob: -5.133922100067139
    3. '^' → logprob: -6.758922100067139
    4. '```' → logprob: -7.383922100067139
    5. 'prog' → logprob: -8.508922576904297
    6. '*' → logprob: -8.508922576904297
    7. '***' → logprob: -8.758922576904297
    8. '5' → logprob: -9.508922576904297
    9. '000' → logprob: -9.633922576904297
    10. '###' → logprob: -10.258922576904297

Token 315: '5' (ID: 20)
  Prédit: '5'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.00044056313345208764
    2. 'len' → logprob: -8.62544059753418
    3. 'variables' → logprob: -8.75044059753418
    4. ' ' → logprob: -9.75044059753418
    5. '6' → logprob: -11.62544059753418
    6. 'vars' → logprob: -11.87544059753418
    7. '
' → logprob: -12.00044059753418
    8. '```' → logprob: -12.37544059753418
    9. '   ' → logprob: -13.12544059753418
    10. 'var' → logprob: -13.25044059753418

Token 316: '=' (ID: 28)
  Prédit: 'max'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'max' → logprob: -0.7922070622444153
    2. 'def' → logprob: -1.7922070026397705
    3. '
' → logprob: -2.0422070026397705
    4. 'dp' → logprob: -3.1672070026397705
    5. 'MAX' → logprob: -3.5422070026397705
    6. 'from' → logprob: -3.5422070026397705
    7. '#' → logprob: -3.6672070026397705
    8. 'import' → logprob: -4.16720724105835
    9. 'state' → logprob: -4.16720724105835
    10. 'memo' → logprob: -4.16720724105835

Token 317: '1' (ID: 16)
  Prédit: '104'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '104' → logprob: -5.080963092041202e-06
    2. ' ' → logprob: -13.500004768371582
    3. '   ' → logprob: -13.500004768371582
    4. '(' → logprob: -14.000004768371582
    5. '100' → logprob: -14.500004768371582
    6. '1' → logprob: -15.375004768371582
    7. '=' → logprob: -15.750004768371582
    8. '  ' → logprob: -15.750004768371582
    9. '105' → logprob: -16.1250057220459
    10. '~' → logprob: -16.6250057220459

Token 318: '_' (ID: 62)
  Prédit: '048'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '048' → logprob: -0.00023011912708170712
    2. '000' → logprob: -8.750229835510254
    3. '050' → logprob: -9.875229835510254
    4. '049' → logprob: -11.375229835510254
    5. '046' → logprob: -12.625229835510254
    6. '040' → logprob: -13.500229835510254
    7. '05' → logprob: -13.875229835510254
    8. '044' → logprob: -14.500229835510254
    9. '045' → logprob: -14.500229835510254
    10. '024' → logprob: -14.625229835510254

Token 319: '048' (ID: 45404)
  Prédit: '6'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -0.6692475080490112
    2. '000' → logprob: -1.0442475080490112
    3. '20' → logprob: -3.044247627258301
    4. '048' → logprob: -3.856747627258301
    5. '5' → logprob: -4.981747627258301
    6. '3' → logprob: -5.106747627258301
    7. 'current' → logprob: -5.669247627258301
    8. '2' → logprob: -5.731747627258301
    9. '```' → logprob: -5.856747627258301
    10. '0' → logprob: -5.981747627258301

Token 320: '_' (ID: 62)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5790961980819702
    2. '**' → logprob: -2.9540963172912598
    3. '_' → logprob: -3.0790963172912598
    4. ',' → logprob: -3.0790963172912598
    5. '```' → logprob: -3.2040963172912598
    6. '<|end|>' → logprob: -3.4540963172912598
    7. '#' → logprob: -3.7040963172912598
    8. 'states' → logprob: -3.9540963172912598
    9. ':' → logprob: -4.32909631729126
    10. '   ' → logprob: -4.45409631729126

Token 321: '576' (ID: 39642)
  Prédit: '576'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '576' → logprob: -0.0004581942630466074
    2. '{' → logprob: -8.500457763671875
    3. '   ' → logprob: -10.500457763671875
    4. '`' → logprob: -10.500457763671875
    5. '000' → logprob: -10.875457763671875
    6. ' ' → logprob: -11.437957763671875
    7. 'None' → logprob: -11.437957763671875
    8. '```' → logprob: -12.062957763671875
    9. '(' → logprob: -12.125457763671875
    10. '_' → logprob: -12.187957763671875

Token 322: ' max' (ID: 2999)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.6074373126029968
    2. 'prog' → logprob: -1.4824373722076416
    3. 'from' → logprob: -2.9824373722076416
    4. 'pc' → logprob: -3.1074373722076416
    5. 'max' → logprob: -3.4824373722076416
    6. 'visited' → logprob: -4.2324371337890625
    7. 'dp' → logprob: -4.2324371337890625
    8. 'variables' → logprob: -4.3574371337890625
    9. '#' → logprob: -4.6074371337890625
    10. 'memo' → logprob: -4.9824371337890625

Token 323: ' states' (ID: 9407)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.40925055742263794
    2. 'state' → logprob: -1.6592504978179932
    3. 'def' → logprob: -2.534250497817993
    4. 'pc' → logprob: -3.784250497817993
    5. '#' → logprob: -4.659250736236572
    6. '
' → logprob: -5.159250736236572
    7. '_state' → logprob: -5.909250736236572
    8. '<|end|>' → logprob: -5.909250736236572
    9. ' )' → logprob: -6.159250736236572
    10. 'states' → logprob: -6.284250736236572

Token 324: ' ->' (ID: 2747)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -1.1721688508987427
    2. 'pc' → logprob: -1.2971688508987427
    3. 'prog' → logprob: -1.2971688508987427
    4. 'from' → logprob: -3.172168731689453
    5. 'visited' → logprob: -3.547168731689453
    6. 'variables' → logprob: -4.172168731689453
    7. 'idx' → logprob: -4.922168731689453
    8. 'dp' → logprob: -5.047168731689453
    9. 'memo' → logprob: -5.047168731689453
    10. '#' → logprob: -5.172168731689453

Token 325: ' feasible' (ID: 58866)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.8953559994697571
    2. 'from' → logprob: -1.2703559398651123
    3. 'visited' → logprob: -1.5203559398651123
    4. 'import' → logprob: -3.0203559398651123
    5. '#' → logprob: -4.020356178283691
    6. 'sys' → logprob: -4.395356178283691
    7. 'max' → logprob: -5.770356178283691
    8. 'dp' → logprob: -5.895356178283691
    9. 'memo' → logprob: -6.145356178283691
    10. '
' → logprob: -7.270356178283691

Token 326: ' to' (ID: 316)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.58157879114151
    2. 'pc' → logprob: -1.5815787315368652
    3. 'visited' → logprob: -2.0815787315368652
    4. 'from' → logprob: -3.2065787315368652
    5. 'prog' → logprob: -3.2065787315368652
    6. 'variables' → logprob: -4.706578731536865
    7. 'dp' → logprob: -5.206578731536865
    8. 'state' → logprob: -6.081578731536865
    9. 'max' → logprob: -6.081578731536865
    10. '
' → logprob: -6.331578731536865

Token 327: ' memo' (ID: 46393)
  Prédit: 'simulate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'simulate' → logprob: -0.03476763889193535
    2. 'dfs' → logprob: -4.1597676277160645
    3. 'enumer' → logprob: -4.7847676277160645
    4. 'expl' → logprob: -5.2847676277160645
    5. 'search' → logprob: -6.2847676277160645
    6. 'br' → logprob: -6.9097676277160645
    7. 'store' → logprob: -7.1597676277160645
    8. 'cache' → logprob: -7.9097676277160645
    9. 'implement' → logprob: -8.909768104553223
    10. 'b' → logprob: -9.159768104553223

Token 328: 'ize' (ID: 750)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.5935862064361572
    2. 'prog' → logprob: -1.9685862064361572
    3. 'memo' → logprob: -2.5935862064361572
    4. 'pc' → logprob: -2.5935862064361572
    5. 'visited' → logprob: -2.8435862064361572
    6. 'dp' → logprob: -3.4685862064361572
    7. 'from' → logprob: -3.9685862064361572
    8. 'idx' → logprob: -4.218585968017578
    9. 'state' → logprob: -5.218585968017578
    10. 'mem' → logprob: -5.218585968017578

Token 329: ' for' (ID: 395)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -1.1815478801727295
    2. 'from' → logprob: -1.6815478801727295
    3. 'visited' → logprob: -2.0565478801727295
    4. 'memo' → logprob: -2.0565478801727295
    5. 'pc' → logprob: -2.5565478801727295
    6. 'dp' → logprob: -2.5565478801727295
    7. 'prog' → logprob: -2.9315478801727295
    8. 'mem' → logprob: -4.806548118591309
    9. 'variables' → logprob: -5.181548118591309
    10. 'max' → logprob: -5.306548118591309

Token 330: ' loop' (ID: 11453)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.19896893203258514
    2. 'visited' → logprob: -2.4489688873291016
    3. 'memo' → logprob: -3.9489688873291016
    4. 'dp' → logprob: -4.323968887329102
    5. '
' → logprob: -4.323968887329102
    6. 'pc' → logprob: -4.573968887329102
    7. 'dfs' → logprob: -5.198968887329102
    8. 'idx' → logprob: -5.698968887329102
    9. '#' → logprob: -5.698968887329102
    10. ' def' → logprob: -6.073968887329102

Token 331: ' detection' (ID: 28385)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.46853336691856384
    2. 'visited' → logprob: -1.9685333967208862
    3. 'prog' → logprob: -2.2185332775115967
    4. 'pc' → logprob: -2.8435332775115967
    5. 'memo' → logprob: -3.8435332775115967
    6. 'from' → logprob: -4.218533515930176
    7. 'idx' → logprob: -5.343533515930176
    8. 'dp' → logprob: -5.468533515930176
    9. 'state' → logprob: -5.593533515930176
    10. '#' → logprob: -5.843533515930176

Token 332: '

' (ID: 279)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.5738336443901062
    2. 'visited' → logprob: -1.573833703994751
    3. 'memo' → logprob: -2.198833703994751
    4. 'from' → logprob: -2.573833703994751
    5. 'dp' → logprob: -3.948833703994751
    6. 'pc' → logprob: -5.323833465576172
    7. 'sys' → logprob: -5.448833465576172
    8. 'mem' → logprob: -5.573833465576172
    9. 'import' → logprob: -5.698833465576172
    10. 'max' → logprob: -6.323833465576172

Token 333: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.4452205002307892
    2. 'visited' → logprob: -1.5702204704284668
    3. 'from' → logprob: -2.945220470428467
    4. 'memo' → logprob: -3.195220470428467
    5. 'pc' → logprob: -3.445220470428467
    6. 'dp' → logprob: -4.195220470428467
    7. 'variables' → logprob: -6.195220470428467
    8. 'idx' → logprob: -6.570220470428467
    9. 'mem' → logprob: -6.695220470428467
    10. 'prog' → logprob: -6.945220470428467

Token 334: ' encode' (ID: 31288)
  Prédit: ' run'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' run' → logprob: -1.0301073789596558
    2. ' simulate' → logprob: -1.2801073789596558
    3. 'simulate' → logprob: -1.9051073789596558
    4. ' execute' → logprob: -1.9051073789596558
    5. 'execute' → logprob: -3.4051074981689453
    6. 'run' → logprob: -3.9051074981689453
    7. ' dfs' → logprob: -4.905107498168945
    8. 'dfs' → logprob: -5.780107498168945
    9. ' exec' → logprob: -6.280107498168945
    10. 'exec' → logprob: -7.155107498168945

Token 335: '_vars' (ID: 25901)
  Prédit: '(state'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(state' → logprob: -0.08552577346563339
    2. '_state' → logprob: -2.9605257511138916
    3. '(vars' → logprob: -4.335525989532471
    4. 'state' → logprob: -4.835525989532471
    5. '(' → logprob: -4.960525989532471
    6. '(pc' → logprob: -6.460525989532471
    7. '(states' → logprob: -8.210525512695312
    8. '_vars' → logprob: -9.585525512695312
    9. '(program' → logprob: -10.085525512695312
    10. 'State' → logprob: -10.710525512695312

Token 336: '(vars' (ID: 174980)
  Prédit: '(vars'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(vars' → logprob: -0.0016816058196127415
    2. '(' → logprob: -7.001681804656982
    3. '(vals' → logprob: -8.251681327819824
    4. '(var' → logprob: -8.251681327819824
    5. '(values' → logprob: -8.376681327819824
    6. '(v' → logprob: -11.876681327819824
    7. '(state' → logprob: -12.001681327819824
    8. 'vars' → logprob: -13.001681327819824
    9. '(states' → logprob: -13.876681327819824
    10. '(variable' → logprob: -14.751681327819824

Token 337: '_dict' (ID: 11295)
  Prédit: '):
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.2210465520620346
    2. '_values' → logprob: -2.0960464477539062
    3. '):' → logprob: -2.8460464477539062
    4. 'values' → logprob: -5.471046447753906
    5. '_vals' → logprob: -5.471046447753906
    6. '_' → logprob: -6.346046447753906
    7. '_tuple' → logprob: -6.471046447753906
    8. '_vars' → logprob: -6.721046447753906
    9. '   ' → logprob: -6.846046447753906
    10. 'def' → logprob: -7.096046447753906

Token 338: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.02182735875248909
    2. '):
' → logprob: -3.896827459335327
    3. ')' → logprob: -6.771827220916748
    4. ' ):' → logprob: -9.396827697753906
    5. '):
' → logprob: -10.271827697753906
    6. ',' → logprob: -11.771827697753906
    7. '):

' → logprob: -12.271827697753906
    8. '(vars' → logprob: -12.896827697753906
    9. '   ' → logprob: -13.521827697753906
    10. ':' → logprob: -13.771827697753906

Token 339: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0001446611131541431
    2. ' return' → logprob: -9.875144958496094
    3. 'return' → logprob: -10.000144958496094
    4. '(' → logprob: -11.250144958496094
    5. 'v' → logprob: -12.750144958496094
    6. 'result' → logprob: -13.000144958496094
    7. 'values' → logprob: -13.000144958496094
    8. 'val' → logprob: -13.125144958496094
    9. '[' → logprob: -13.250144958496094
    10. 'value' → logprob: -13.500144958496094

Token 340: ' #' (ID: 1069)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.5308493971824646
    2. 'val' → logprob: -1.9058494567871094
    3. '   ' → logprob: -2.1558494567871094
    4. 'code' → logprob: -2.5308494567871094
    5. 'value' → logprob: -3.2808494567871094
    6. 'v' → logprob: -4.530849456787109
    7. ' res' → logprob: -4.655849456787109
    8. 'ans' → logprob: -5.405849456787109
    9. 'result' → logprob: -6.280849456787109
    10. ' val' → logprob: -6.530849456787109

Token 341: ' pack' (ID: 5356)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.1743965744972229
    2. '   ' → logprob: -2.299396514892578
    3. 'result' → logprob: -3.924396514892578
    4. 'val' → logprob: -4.049396514892578
    5. ' res' → logprob: -5.174396514892578
    6. 'value' → logprob: -5.424396514892578
    7. 'ans' → logprob: -5.424396514892578
    8. 'base' → logprob: -5.674396514892578
    9. 'code' → logprob: -6.924396514892578
    10. 'state' → logprob: -7.174396514892578

Token 342: ' vars' (ID: 36194)
  Prédit: 'vars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'vars' → logprob: -0.4641155004501343
    2. 'v' → logprob: -2.214115619659424
    3. 'value' → logprob: -2.464115619659424
    4. 'vals' → logprob: -2.839115619659424
    5. '_vars' → logprob: -3.714115619659424
    6. 'val' → logprob: -4.089115619659424
    7. ' vars' → logprob: -4.089115619659424
    8. 'values' → logprob: -4.339115619659424
    9. 'state' → logprob: -4.589115619659424
    10. '(vars' → logprob: -5.339115619659424

Token 343: ' in' (ID: 306)
  Prédit: '_vars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_vars' → logprob: -1.025901198387146
    2. ' =' → logprob: -1.400901198387146
    3. '   ' → logprob: -2.4009013175964355
    4. 'def' → logprob: -2.5259013175964355
    5. '=' → logprob: -3.1509013175964355
    6. ' into' → logprob: -3.2759013175964355
    7. '_vals' → logprob: -3.4009013175964355
    8. '_values' → logprob: -3.7759013175964355
    9. ')' → logprob: -4.4009013175964355
    10. '(' → logprob: -4.5259013175964355

Token 344: ' dict' (ID: 11878)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.14735464751720428
    2. 'one' → logprob: -3.1473546028137207
    3. '16' → logprob: -3.3973546028137207
    4. 'vars' → logprob: -4.147354602813721
    5. '5' → logprob: -4.522354602813721
    6. '1' → logprob: -4.647354602813721
    7. 'len' → logprob: -4.772354602813721
    8. 'an' → logprob: -5.397354602813721
    9. ' a' → logprob: -6.147354602813721
    10. '15' → logprob: -6.272354602813721

Token 345: ' to' (ID: 316)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.8827407360076904
    2. '   ' → logprob: -1.6327407360076904
    3. 'v' → logprob: -2.3827407360076904
    4. 'values' → logprob: -3.1327407360076904
    5. 'vars' → logprob: -3.2577407360076904
    6. '_vars' → logprob: -3.5077407360076904
    7. 'vals' → logprob: -3.5077407360076904
    8. ':' → logprob: -3.8827407360076904
    9. '):' → logprob: -3.8827407360076904
    10. ')' → logprob: -4.1327409744262695

Token 346: ' tuple' (ID: 31311)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.10272867232561111
    2. 'an' → logprob: -2.7277286052703857
    3. ' an' → logprob: -5.102728843688965
    4. 'sum' → logprob: -5.227728843688965
    5. 'ans' → logprob: -5.352728843688965
    6. ' a' → logprob: -5.352728843688965
    7. '0' → logprob: -6.102728843688965
    8. 'tuple' → logprob: -6.102728843688965
    9. 'val' → logprob: -6.352728843688965
    10. '16' → logprob: -7.102728843688965

Token 347: ' of' (ID: 328)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3859891891479492
    2. '(
' → logprob: -1.3859891891479492
    3. 'return' → logprob: -3.885989189147949
    4. '(vars' → logprob: -4.260989189147949
    5. '(sorted' → logprob: -4.760989189147949
    6. '(tuple' → logprob: -4.760989189147949
    7. '(v' → logprob: -5.385989189147949
    8. '([' → logprob: -6.010989189147949
    9. '=' → logprob: -6.135989189147949
    10. '()' → logprob: -6.135989189147949

Token 348: ' values' (ID: 4824)
  Prédit: 'variables'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'variables' → logprob: -0.7323986887931824
    2. 'vars' → logprob: -2.107398748397827
    3. '[' → logprob: -2.357398748397827
    4. 'int' → logprob: -2.357398748397827
    5. 'ints' → logprob: -2.982398748397827
    6. '[int' → logprob: -2.982398748397827
    7. 'values' → logprob: -3.107398748397827
    8. '[v' → logprob: -4.232398509979248
    9. ' variables' → logprob: -4.732398509979248
    10. 'vals' → logprob: -4.982398509979248

Token 349: ' in' (ID: 306)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.20296072959899902
    2. '(
' → logprob: -2.077960729598999
    3. '   ' → logprob: -3.577960729598999
    4. 'return' → logprob: -4.452960968017578
    5. '(v' → logprob: -5.327960968017578
    6. ':' → logprob: -5.702960968017578
    7. '(vars' → logprob: -5.952960968017578
    8. '(values' → logprob: -6.577960968017578
    9. '(tuple' → logprob: -7.202960968017578
    10. ',' → logprob: -7.327960968017578

Token 350: ' order' (ID: 2569)
  Prédit: 'variables'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'variables' → logprob: -0.6861513257026672
    2. '[' → logprob: -1.0611512660980225
    3. 'order' → logprob: -2.1861512660980225
    4. 'the' → logprob: -3.6861512660980225
    5. ' order' → logprob: -5.186151504516602
    6. ' [' → logprob: -5.936151504516602
    7. 'alphabet' → logprob: -6.936151504516602
    8. ' variables' → logprob: -7.061151504516602
    9. 'sorted' → logprob: -7.061151504516602
    10. ' the' → logprob: -7.436151504516602

Token 351: ' of' (ID: 328)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03390340507030487
    2. '(
' → logprob: -3.6589033603668213
    3. 'variables' → logprob: -5.0339035987854
    4. '[' → logprob: -8.158903121948242
    5. '   ' → logprob: -8.783903121948242
    6. '([' → logprob: -8.783903121948242
    7. '('' → logprob: -9.033903121948242
    8. ' (' → logprob: -9.533903121948242
    9. '_variables' → logprob: -10.408903121948242
    10. '(vars' → logprob: -10.658903121948242

Token 352: ' variables' (ID: 13955)
  Prédit: 'variables'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'variables' → logprob: -0.00043221889063715935
    2. ' variables' → logprob: -7.750432014465332
    3. 'sorted' → logprob: -14.125432014465332
    4. '   ' → logprob: -14.875432014465332
    5. 'variable' → logprob: -15.000432014465332
    6. '[' → logprob: -18.12543296813965
    7. ' ' → logprob: -18.62543296813965
    8. '```' → logprob: -18.62543296813965
    9. '.variables' → logprob: -18.87543296813965
    10. 'vars' → logprob: -19.75043296813965

Token 353: '
' (ID: 198)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.04214467853307724
    2. '(
' → logprob: -3.542144775390625
    3. '(vars' → logprob: -5.417144775390625
    4. '   ' → logprob: -5.792144775390625
    5. 'variables' → logprob: -6.042144775390625
    6. '(v' → logprob: -7.667144775390625
    7. '('' → logprob: -7.792144775390625
    8. '("("' → logprob: -8.042144775390625
    9. ':' → logprob: -8.667144775390625
    10. '([' → logprob: -9.167144775390625

Token 354: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.22134801745414734
    2. '(' → logprob: -1.7213480472564697
    3. 'def' → logprob: -5.471347808837891
    4. '(
' → logprob: -5.471347808837891
    5. ':' → logprob: -5.596347808837891
    6. ')' → logprob: -6.096347808837891
    7. '):' → logprob: -6.846347808837891
    8. 'return' → logprob: -7.471347808837891
    9. ' (' → logprob: -7.596347808837891
    10. 'variables' → logprob: -7.721347808837891

Token 355: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.213327556848526
    2. ' return' → logprob: -1.9633275270462036
    3. '   ' → logprob: -2.963327646255493
    4. 'values' → logprob: -10.463327407836914
    5. 'result' → logprob: -10.838327407836914
    6. 'vals' → logprob: -11.838327407836914
    7. 'tuple' → logprob: -12.213327407836914
    8. 'def' → logprob: -12.588327407836914
    9. ' values' → logprob: -13.463327407836914
    10. ' tuple' → logprob: -13.838327407836914

Token 356: ' tuple' (ID: 31311)
  Prédit: 'tuple'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'tuple' → logprob: -0.008771981112658978
    2. ' tuple' → logprob: -4.758771896362305
    3. '(tuple' → logprob: -8.758771896362305
    4. '   ' → logprob: -15.008771896362305
    5. ' ' → logprob: -17.383771896362305
    6. '_tuple' → logprob: -17.758771896362305
    7. '(' → logprob: -18.633771896362305
    8. '  ' → logprob: -18.883771896362305
    9. 'Tuple' → logprob: -20.008771896362305
    10. ' ' → logprob: -21.508771896362305

Token 357: '(vars' (ID: 174980)
  Prédit: '(vars'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(vars' → logprob: -0.0015249757561832666
    2. 'vars' → logprob: -6.501524925231934
    3. '([' → logprob: -11.501524925231934
    4. '(' → logprob: -11.751524925231934
    5. '(init' → logprob: -12.501524925231934
    6. '(v' → logprob: -14.876524925231934
    7. ' vars' → logprob: -15.251524925231934
    8. '[' → logprob: -15.751524925231934
    9. 'init' → logprob: -16.50152587890625
    10. '(var' → logprob: -16.87652587890625

Token 358: '_dict' (ID: 11295)
  Prédit: '_dict'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_dict' → logprob: -0.00019495772721711546
    2. 'dict' → logprob: -8.625194549560547
    3. '[' → logprob: -11.750194549560547
    4. '_vars' → logprob: -12.625194549560547
    5. 'Dict' → logprob: -13.250194549560547
    6. '[v' → logprob: -14.375194549560547
    7. 'v' → logprob: -14.875194549560547
    8. '_DICT' → logprob: -15.000194549560547
    9. 'vars' → logprob: -15.625194549560547
    10. 'd' → logprob: -15.625194549560547

Token 359: '[v' (ID: 36561)
  Prédit: '[v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[v' → logprob: -2.2723104848410003e-05
    2. '[var' → logprob: -11.125022888183594
    3. 'v' → logprob: -11.750022888183594
    4. '(v' → logprob: -17.125022888183594
    5. 'var' → logprob: -17.375022888183594
    6. ')' → logprob: -17.500022888183594
    7. ')v' → logprob: -18.500022888183594
    8. '[' → logprob: -18.750022888183594
    9. '[[' → logprob: -18.875022888183594
    10. ')[' → logprob: -19.000022888183594

Token 360: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.004742687568068504
    2. '])' → logprob: -5.379742622375488
    3. ')' → logprob: -9.379742622375488
    4. 'for' → logprob: -11.129742622375488
    5. ' ]' → logprob: -11.754742622375488
    6. ']))' → logprob: -12.129742622375488
    7. ')]' → logprob: -12.129742622375488
    8. ')])' → logprob: -13.379742622375488
    9. ' for' → logprob: -13.879742622375488
    10. ']])' → logprob: -14.379742622375488

Token 361: ' for' (ID: 395)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.10895140469074249
    2. '])' → logprob: -2.9839513301849365
    3. 'for' → logprob: -3.7339513301849365
    4. ']' → logprob: -3.9839513301849365
    5. ' for' → logprob: -4.608951568603516
    6. '))' → logprob: -9.483951568603516
    7. ')]' → logprob: -10.108951568603516
    8. ' )' → logprob: -10.858951568603516
    9. ')])' → logprob: -11.983951568603516
    10. ' ])' → logprob: -12.233951568603516

Token 362: ' v' (ID: 323)
  Prédit: 'variables'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'variables' → logprob: -0.0009118211455643177
    2. ' variables' → logprob: -7.000911712646484
    3. 'variable' → logprob: -16.000911712646484
    4. '   ' → logprob: -16.250911712646484
    5. 'var' → logprob: -16.875911712646484
    6. '.variables' → logprob: -16.875911712646484
    7. ':variables' → logprob: -17.875911712646484
    8. ' ' → logprob: -18.750911712646484
    9. 'v' → logprob: -18.750911712646484
    10. 'vari' → logprob: -20.250911712646484

Token 363: ' in' (ID: 306)
  Prédit: 'variables'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'variables' → logprob: -0.0013269031187519431
    2. ' variables' → logprob: -6.626327037811279
    3. 'variable' → logprob: -15.126326560974121
    4. '   ' → logprob: -15.126326560974121
    5. '.variables' → logprob: -16.251327514648438
    6. 'var' → logprob: -16.626327514648438
    7. 'sorted' → logprob: -16.876327514648438
    8. 'vari' → logprob: -17.751327514648438
    9. ':variables' → logprob: -18.001327514648438
    10. ' ' → logprob: -18.001327514648438

Token 364: ' variables' (ID: 13955)
  Prédit: 'variables'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'variables' → logprob: -9.014684110297821e-06
    2. ' variables' → logprob: -11.625008583068848
    3. 'variable' → logprob: -17.625009536743164
    4. 'sorted' → logprob: -17.875009536743164
    5. '   ' → logprob: -19.000009536743164
    6. '.variables' → logprob: -19.875009536743164
    7. 'var' → logprob: -20.875009536743164
    8. 'Variables' → logprob: -21.375009536743164
    9. 'parameters' → logprob: -21.625009536743164
    10. ' ' → logprob: -21.750009536743164

Token 365: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.1472419600977446e-06
    2. ' )' → logprob: -14.250000953674316
    3. ')
' → logprob: -15.250000953674316
    4. '   ' → logprob: -17.000001907348633
    5. ')return' → logprob: -17.500001907348633
    6. '),' → logprob: -17.625001907348633
    7. '())' → logprob: -17.875001907348633
    8. ')}' → logprob: -18.375001907348633
    9. 'def' → logprob: -18.500001907348633
    10. '<|end|>' → logprob: -18.500001907348633

Token 366: 'visited' (ID: 52453)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.0013907118700444698
    2. ')' → logprob: -6.7513909339904785
    3. '```' → logprob: -10.12639045715332
    4. '<|end|>' → logprob: -10.12639045715332
    5. '
' → logprob: -10.25139045715332
    6. '#' → logprob: -10.37639045715332
    7. ':' → logprob: -11.50139045715332
    8. 'next' → logprob: -12.25139045715332
    9. 'prev' → logprob: -12.25139045715332
    10. ' def' → logprob: -12.25139045715332

Token 367: '=set' (ID: 166509)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.2355138510465622
    2. ' =' → logprob: -1.7355138063430786
    3. '[' → logprob: -4.235513687133789
    4. '.setdefault' → logprob: -4.860513687133789
    5. '_' → logprob: -5.985513687133789
    6. '.add' → logprob: -6.110513687133789
    7. '=set' → logprob: -6.485513687133789
    8. '_states' → logprob: -6.610513687133789
    9. '.' → logprob: -7.485513687133789
    10. '[(' → logprob: -7.735513687133789

Token 368: '()

' (ID: 5874)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.07698122411966324
    2. ')' → logprob: -3.07698130607605
    3. 'state' → logprob: -4.826981067657471
    4. 'pc' → logprob: -4.826981067657471
    5. 'stack' → logprob: -5.201981067657471
    6. 'current' → logprob: -6.576981067657471
    7. '
' → logprob: -6.701981067657471
    8. 'next' → logprob: -7.576981067657471
    9. 'dp' → logprob: -7.576981067657471
    10. 'visited' → logprob: -8.076981544494629

Token 369: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -9.198043699143454e-05
    2. 'pc' → logprob: -10.375091552734375
    3. '
' → logprob: -10.625091552734375
    4. 'from' → logprob: -10.750091552734375
    5. 'stack' → logprob: -12.250091552734375
    6. 'import' → logprob: -12.500091552734375
    7. ' def' → logprob: -13.375091552734375
    8. 'current' → logprob: -14.250091552734375
    9. 'visited' → logprob: -14.375091552734375
    10. '```' → logprob: -14.375091552734375

Token 370: ' run' (ID: 2461)
  Prédit: 'dfs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dfs' → logprob: -1.2597029209136963
    2. ' dfs' → logprob: -1.5097029209136963
    3. 'run' → logprob: -1.7597029209136963
    4. ' run' → logprob: -1.8847029209136963
    5. 'execute' → logprob: -2.7597029209136963
    6. ' execute' → logprob: -3.1347029209136963
    7. 'simulate' → logprob: -3.1347029209136963
    8. 'exec' → logprob: -4.759702682495117
    9. ' simulate' → logprob: -4.759702682495117
    10. ' exec' → logprob: -5.634702682495117

Token 371: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.07772697508335114
    2. '(pc' → logprob: -3.2027270793914795
    3. '(_' → logprob: -4.4527268409729
    4. '(pro' → logprob: -5.2027268409729
    5. '(program' → logprob: -5.3277268409729
    6. '(state' → logprob: -5.9527268409729
    7. '():' → logprob: -6.0777268409729
    8. '_' → logprob: -6.7027268409729
    9. '_(' → logprob: -6.8277268409729
    10. '_state' → logprob: -7.0777268409729

Token 372: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -7.3458322731312364e-06
    2. '	pc' → logprob: -13.250007629394531
    3. ' pc' → logprob: -13.750007629394531
    4. '    ' → logprob: -13.875007629394531
    5. 'def' → logprob: -14.125007629394531
    6. '   ' → logprob: -14.250007629394531
    7. '```' → logprob: -14.250007629394531
    8. 'pc' → logprob: -14.250007629394531
    9. ' vars' → logprob: -15.875007629394531
    10. '   ' → logprob: -16.50000762939453

Token 373: ' vars' (ID: 36194)
  Prédit: 'pc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pc' → logprob: -0.049707308411598206
    2. '   ' → logprob: -3.0497074127197266
    3. ' pc' → logprob: -6.924707412719727
    4. 'def' → logprob: -9.799707412719727
    5. 'vars' (adapté à ' vars') → logprob: -10.674707412719727
    6. 'stack' → logprob: -11.424707412719727
    7. '	pc' → logprob: -11.424707412719727
    8. 'import' → logprob: -11.674707412719727
    9. 'state' → logprob: -11.799707412719727
    10. 'from' → logprob: -12.174707412719727

Token 374: '_val' (ID: 13694)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.8823671936988831
    2. '=' → logprob: -1.3823671340942383
    3. '_dict' → logprob: -2.5073671340942383
    4. '_current' → logprob: -2.7573671340942383
    5. '_state' → logprob: -3.1323671340942383
    6. '_vals' → logprob: -3.2573671340942383
    7. '_values' → logprob: -3.2573671340942383
    8. '_' → logprob: -3.6323671340942383
    9. '   ' → logprob: -4.382367134094238
    10. '_vars' → logprob: -4.882367134094238

Token 375: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.004012984223663807
    2. ' =' → logprob: -5.6290130615234375
    3. '={}' → logprob: -8.379013061523438
    4. 'al' → logprob: -10.254013061523438
    5. 's' → logprob: -10.629013061523438
    6. ')' → logprob: -11.004013061523438
    7. '={}
' → logprob: -11.129013061523438
    8. 'als' → logprob: -11.129013061523438
    9. '={' → logprob: -11.379013061523438
    10. '=[]' → logprob: -11.379013061523438

Token 376: 'init' (ID: 3287)
  Prédit: 'init'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'init' → logprob: -0.3586689531803131
    2. '{' → logprob: -1.2336689233779907
    3. 'dict' → logprob: -4.608668804168701
    4. 'tuple' → logprob: -9.23366928100586
    5. '[' → logprob: -9.48366928100586
    6. ' {' → logprob: -11.60866928100586
    7. '(init' → logprob: -11.73366928100586
    8. ' init' → logprob: -12.35866928100586
    9. 'list' → logprob: -12.73366928100586
    10. '{name' → logprob: -13.60866928100586

Token 377: '_vars' (ID: 25901)
  Prédit: '_vars'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_vars' → logprob: -7.3458322731312364e-06
    2. '_vals' → logprob: -11.875007629394531
    3. '_val' → logprob: -15.125007629394531
    4. '_var' → logprob: -17.50000762939453
    5. 'vars' → logprob: -18.25000762939453
    6. '```' → logprob: -18.25000762939453
    7. '_' → logprob: -18.62500762939453
    8. ' _' → logprob: -19.00000762939453
    9. '_variables' → logprob: -19.75000762939453
    10. '__' → logprob: -20.25000762939453

Token 378: '.copy' (ID: 22925)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.001015183632262051
    2. '
' → logprob: -7.0010151863098145
    3. ',' → logprob: -9.876014709472656
    4. '    
' → logprob: -10.626014709472656
    5. ')' → logprob: -11.876014709472656
    6. '	pc' → logprob: -12.501014709472656
    7. '
' → logprob: -12.751014709472656
    8. '```' → logprob: -13.376014709472656
    9. '[' → logprob: -13.751014709472656
    10. ' while' → logprob: -13.876014709472656

Token 379: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -1.7954958821064793e-05
    2. '()
' → logprob: -11.125018119812012
    3. ')' → logprob: -13.750018119812012
    4. '())' → logprob: -13.750018119812012
    5. '   ' → logprob: -14.500018119812012
    6. '(' → logprob: -15.500018119812012
    7. '()
' → logprob: -16.375017166137695
    8. '()]' → logprob: -16.500017166137695
    9. '()

' → logprob: -16.500017166137695
    10. '()`' → logprob: -17.000017166137695

Token 380: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03528492525219917
    2. 'pc' → logprob: -3.410284996032715
    3. ' pc' → logprob: -6.535284996032715
    4. '	pc' → logprob: -10.285284996032715
    5. '```' → logprob: -10.285284996032715
    6. '
' → logprob: -10.535284996032715
    7. '_pc' → logprob: -10.910284996032715
    8. ',' → logprob: -11.035284996032715
    9. 'while' → logprob: -11.660284996032715
    10. '    
' → logprob: -11.660284996032715

Token 381: ' pc' (ID: 18736)
  Prédit: 'pc'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pc' (adapté à ' pc') → logprob: -0.00010092071170220152
    2. 'def' → logprob: -10.250101089477539
    3. '   ' → logprob: -10.375101089477539
    4. 'visited' → logprob: -11.000101089477539
    5. 'stack' → logprob: -11.125101089477539
    6. ' pc' → logprob: -14.375101089477539
    7. 'idx' → logprob: -14.375101089477539
    8. 'state' → logprob: -14.500101089477539
    9. '    
' → logprob: -15.375101089477539
    10. '	pc' → logprob: -16.00010108947754

Token 382: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.00026503115077503026
    2. ' =' → logprob: -8.250265121459961
    3. '=line' → logprob: -12.750265121459961
    4. '=len' → logprob: -15.500265121459961
    5. '=int' → logprob: -15.625265121459961
    6. '=sys' → logprob: -15.750265121459961
    7. '0' → logprob: -16.75026512145996
    8. '=index' → logprob: -16.87526512145996
    9. '=-' → logprob: -18.37526512145996
    10. '=
' → logprob: -18.50026512145996

Token 383: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -5.200166469876422e-06
    2. 'line' → logprob: -12.625004768371582
    3. ' ' → logprob: -13.500004768371582
    4. 'lines' → logprob: -14.875004768371582
    5. 'prog' → logprob: -17.5000057220459
    6. '1' → logprob: -18.6250057220459
    7. 'idx' → logprob: -18.8750057220459
    8. ' line' → logprob: -18.8750057220459
    9. 'index' → logprob: -19.0625057220459
    10. '[line' → logprob: -19.0625057220459

Token 384: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.3334312438964844
    2. '   ' → logprob: -1.3334312438964844
    3. '    
' → logprob: -5.208431243896484
    4. ' while' → logprob: -5.458431243896484
    5. '<|end|>' → logprob: -5.708431243896484
    6. 'while' → logprob: -5.833431243896484
    7. ')' → logprob: -6.583431243896484
    8. '  
' → logprob: -7.583431243896484
    9. ':' → logprob: -8.208431243896484
    10. ')
' → logprob: -8.333431243896484

Token 385: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6097310185432434
    2. '
' → logprob: -1.2347309589385986
    3. 'while' → logprob: -2.6097309589385986
    4. ' while' → logprob: -2.9847309589385986
    5. ')' → logprob: -4.484731197357178
    6. ':' → logprob: -4.609731197357178
    7. '    
' → logprob: -4.984731197357178
    8. '	while' → logprob: -5.484731197357178
    9. '<|end|>' → logprob: -5.609731197357178
    10. '```' → logprob: -7.109731197357178

Token 386: ' stack' (ID: 10825)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.0030809827148914337
    2. ' while' → logprob: -6.00308084487915
    3. 'state' → logprob: -8.128081321716309
    4. 'stack' (adapté à ' stack') → logprob: -8.378081321716309
    5. '   ' → logprob: -10.128081321716309
    6. 'visited' → logprob: -11.003081321716309
    7. 'states' → logprob: -12.003081321716309
    8. 'if' → logprob: -12.753081321716309
    9. 'steps' → logprob: -12.878081321716309
    10. 'n' → logprob: -12.878081321716309

Token 387: '=set' (ID: 166509)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.28342676162719727
    2. '=[]' → logprob: -1.4084267616271973
    3. ' =' → logprob: -6.283426761627197
    4. '=[' → logprob: -8.158426284790039
    5. '=[]
' → logprob: -9.783426284790039
    6. '={}' → logprob: -11.033426284790039
    7. '=[],' → logprob: -11.533426284790039
    8. '=[]
' → logprob: -11.658426284790039
    9. '.append' → logprob: -11.783426284790039
    10. '[]' → logprob: -12.658426284790039

Token 388: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.010169669054448605
    2. '()
' → logprob: -4.635169506072998
    3. '(' → logprob: -8.635169982910156
    4. '()

' → logprob: -9.135169982910156
    5. '((' → logprob: -10.135169982910156
    6. '()\' → logprob: -10.260169982910156
    7. '([(' → logprob: -10.635169982910156
    8. '()
' → logprob: -11.635169982910156
    9. '())' → logprob: -12.385169982910156
    10. '([' → logprob: -12.510169982910156

Token 389: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02197512425482273
    2. ' while' → logprob: -4.771975040435791
    3. ')' → logprob: -6.021975040435791
    4. ':' → logprob: -6.021975040435791
    5. 'while' → logprob: -6.021975040435791
    6. '    
' → logprob: -6.271975040435791
    7. '<|end|>' → logprob: -6.521975040435791
    8. '
' → logprob: -7.146975040435791
    9. '    ' → logprob: -8.02197551727295
    10. '	while' → logprob: -8.27197551727295

Token 390: ' #' (ID: 1069)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.1275855004787445
    2. ' while' → logprob: -2.1275854110717773
    3. '   ' → logprob: -7.502585411071777
    4. '
' → logprob: -10.252585411071777
    5. '	while' → logprob: -10.502585411071777
    6. ')' → logprob: -10.877585411071777
    7. 'state' → logprob: -11.377585411071777
    8. '    
' → logprob: -12.752585411071777
    9. 'token' → logprob: -13.252585411071777
    10. 'While' → logprob: -14.127585411071777

Token 391: ' We'll' (ID: 46830)
  Prédit: ' while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' while' → logprob: -0.7101869583129883
    2. 'while' → logprob: -0.7101869583129883
    3. '   ' → logprob: -4.085186958312988
    4. 'While' → logprob: -9.960186958312988
    5. 'def' → logprob: -11.835186958312988
    6. 'import' → logprob: -12.460186958312988
    7. '	while' → logprob: -12.710186958312988
    8. '```' → logprob: -13.085186958312988
    9. '<|end|>' → logprob: -13.460186958312988
    10. ')' → logprob: -13.460186958312988

Token 392: ' do' (ID: 621)
  Prédit: 'simulate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'simulate' → logprob: -0.36747056245803833
    2. 'while' → logprob: -1.7424705028533936
    3. 'def' → logprob: -2.8674705028533936
    4. '   ' → logprob: -3.4924705028533936
    5. 'use' → logprob: -4.242470741271973
    6. 'continue' → logprob: -4.992470741271973
    7. 'define' → logprob: -5.117470741271973
    8. 'encode' → logprob: -5.242470741271973
    9. ' use' → logprob: -6.617470741271973
    10. ' simulate' → logprob: -6.867470741271973

Token 393: ' iterative' (ID: 167755)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.6919103860855103
    2. ' while' → logprob: -0.8169103860855103
    3. '   ' → logprob: -2.9419102668762207
    4. 'def' → logprob: -5.441910266876221
    5. '
' → logprob: -8.816910743713379
    6. ' def' → logprob: -9.316910743713379
    7. ' a' → logprob: -9.691910743713379
    8. '```' → logprob: -9.941910743713379
    9. '       ' → logprob: -10.316910743713379
    10. '    ' → logprob: -10.691910743713379

Token 394: ' DFS' (ID: 115767)
  Prédit: ' approach'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' approach' → logprob: -1.2788710594177246
    2. ' execution' → logprob: -1.6538710594177246
    3. ' steps' → logprob: -2.5288710594177246
    4. 'while' → logprob: -2.5288710594177246
    5. ' deep' → logprob: -2.9038710594177246
    6. ' while' → logprob: -3.0288710594177246
    7. 'steps' → logprob: -3.1538710594177246
    8. 'execution' → logprob: -3.2788710594177246
    9. ' simulation' → logprob: -3.6538710594177246
    10. 'deep' → logprob: -3.6538710594177246

Token 395: ' with' (ID: 483)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.15257678925991058
    2. '
' → logprob: -2.2775766849517822
    3. ' while' → logprob: -4.652576923370361
    4. ':' → logprob: -4.777576923370361
    5. '    
' → logprob: -5.152576923370361
    6. 'while' → logprob: -6.027576923370361
    7. 'def' → logprob: -6.152576923370361
    8. ',' → logprob: -6.402576923370361
    9. '<|end|>' → logprob: -6.402576923370361
    10. '  
' → logprob: -6.902576923370361

Token 396: ' memo' (ID: 46393)
  Prédit: '[('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[(' → logprob: -0.06887809187173843
    2. '[]' → logprob: -3.193878173828125
    3. 'stack' → logprob: -4.193878173828125
    4. '[' → logprob: -5.318878173828125
    5. ' [(' → logprob: -6.193878173828125
    6. 'pc' → logprob: -6.443878173828125
    7. '   ' → logprob: -7.818878173828125
    8. '[]
' → logprob: -7.943878173828125
    9. '(pc' → logprob: -8.068878173828125
    10. ' stack' → logprob: -8.318878173828125

Token 397: ' and' (ID: 326)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.16385571658611298
    2. '_stack' → logprob: -2.413855791091919
    3. '   ' → logprob: -3.413855791091919
    4. ' stack' → logprob: -3.788855791091919
    5. '
' → logprob: -6.41385555267334
    6. 'ization' → logprob: -7.16385555267334
    7. '    
' → logprob: -7.53885555267334
    8. '       ' → logprob: -7.78885555267334
    9. '(stack' → logprob: -7.78885555267334
    10. ' ' → logprob: -7.91385555267334

Token 398: ' stack' (ID: 10825)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.19371117651462555
    2. ' stack' → logprob: -1.8187111616134644
    3. ' recursion' → logprob: -5.443711280822754
    4. 'rec' → logprob: -6.068711280822754
    5. 'sys' → logprob: -6.818711280822754
    6. 'state' → logprob: -6.818711280822754
    7. 'cycle' → logprob: -7.318711280822754
    8. 'back' → logprob: -7.568711280822754
    9. 'return' → logprob: -7.818711280822754
    10. 'pc' → logprob: -7.818711280822754

Token 399: ' to' (ID: 316)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.43066802620887756
    2. ':' → logprob: -1.3056679964065552
    3. '
' → logprob: -2.9306681156158447
    4. ':
' → logprob: -4.555667877197266
    5. '    
' → logprob: -5.430667877197266
    6. ' while' → logprob: -6.180667877197266
    7. '  
' → logprob: -6.305667877197266
    8. ',' → logprob: -6.805667877197266
    9. '<|end|>' → logprob: -7.055667877197266
    10. '<|end|>' → logprob: -7.680667877197266

Token 400: ' detect' (ID: 11839)
  Prédit: 'expl'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'expl' → logprob: -0.941559374332428
    2. 'simulate' → logprob: -1.3165593147277832
    3. 'detect' → logprob: -1.5665593147277832
    4. 'process' → logprob: -3.191559314727783
    5. 'visit' → logprob: -3.316559314727783
    6. 'avoid' → logprob: -3.816559314727783
    7. ' process' → logprob: -5.441559314727783
    8. '   ' → logprob: -5.441559314727783
    9. '_visit' → logprob: -5.441559314727783
    10. 'find' → logprob: -5.566559314727783

Token 401: ' infinite' (ID: 48413)
  Prédit: 'loops'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'loops' → logprob: -0.7320968508720398
    2. 'cycles' → logprob: -0.8570968508720398
    3. ' loops' → logprob: -3.1070969104766846
    4. 'loop' → logprob: -3.9820969104766846
    5. ' cycles' → logprob: -4.3570966720581055
    6. 'pc' → logprob: -4.8570966720581055
    7. 'in' → logprob: -6.1070966720581055
    8. 'cycle' → logprob: -6.6070966720581055
    9. '
' → logprob: -6.8570966720581055
    10. ' True' → logprob: -7.1070966720581055

Token 402: ' loop' (ID: 11453)
  Prédit: 'loops'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'loops' → logprob: -0.5185260772705078
    2. ' loops' → logprob: -1.2685260772705078
    3. 'loop' → logprob: -2.268526077270508
    4. ' loop' → logprob: -4.018526077270508
    5. '_loop' → logprob: -7.018526077270508
    6. ' recursion' → logprob: -7.018526077270508
    7. 'cycles' → logprob: -10.143526077270508
    8. 'rec' → logprob: -10.143526077270508
    9. 'depth' → logprob: -11.018526077270508
    10. '-loop' → logprob: -11.893526077270508

Token 403: '

' (ID: 279)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.14149843156337738
    2. '
' → logprob: -2.266498327255249
    3. '<|end|>' → logprob: -5.016498565673828
    4. '    
' → logprob: -5.141498565673828
    5. ' while' → logprob: -5.516498565673828
    6. ':' → logprob: -5.516498565673828
    7. '<|end|>' → logprob: -5.891498565673828
    8. ')' → logprob: -6.766498565673828
    9. ',' → logprob: -7.141498565673828
    10. 'while' → logprob: -7.141498565673828

Token 404: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13716663420200348
    2. 'while' → logprob: -2.262166738510132
    3. 'stack' → logprob: -4.262166500091553
    4. ' while' → logprob: -4.762166500091553
    5. ' stack' → logprob: -7.637166500091553
    6. 'dfs' → logprob: -8.387166976928711
    7. 'state' → logprob: -8.387166976928711
    8. 'from' → logprob: -8.762166976928711
    9. '```' → logprob: -9.512166976928711
    10. 'to' → logprob: -10.512166976928711

Token 405: ' #' (ID: 1069)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.1720874011516571
    2. 'stack' → logprob: -1.9220874309539795
    3. 'from' → logprob: -4.9220871925354
    4. '   ' → logprob: -5.6720871925354
    5. 'state' → logprob: -7.2970871925354
    6. ' while' → logprob: -8.297087669372559
    7. ' stack' → logprob: -10.172087669372559
    8. 'import' → logprob: -10.172087669372559
    9. 'dfs' → logprob: -11.172087669372559
    10. 'to' → logprob: -11.422087669372559

Token 406: ' But' (ID: 3072)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.059228308498859406
    2. 'while' → logprob: -3.5592284202575684
    3. '   ' → logprob: -4.434228420257568
    4. ' stack' → logprob: -4.559228420257568
    5. 'from' → logprob: -5.184228420257568
    6. ' while' → logprob: -7.184228420257568
    7. ' from' → logprob: -9.05922794342041
    8. 'to' → logprob: -9.68422794342041
    9. 'import' → logprob: -10.05922794342041
    10. 'dfs' → logprob: -10.43422794342041

Token 407: ' since' (ID: 3630)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.3933754861354828
    2. ' while' → logprob: -1.6433755159378052
    3. 'from' → logprob: -2.7683753967285156
    4. 'stack' → logprob: -4.393375396728516
    5. '   ' → logprob: -4.518375396728516
    6. '#' → logprob: -4.768375396728516
    7. ' from' → logprob: -5.018375396728516
    8. 'len' → logprob: -5.268375396728516
    9. 'pc' → logprob: -5.393375396728516
    10. 'def' → logprob: -5.393375396728516

Token 408: ' program' (ID: 2193)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'N' → logprob: -1.1344096660614014
    2. 'len' → logprob: -1.2594096660614014
    3. 'pc' → logprob: -1.3844096660614014
    4. 'prog' → logprob: -2.8844096660614014
    5. 'sys' → logprob: -4.2594099044799805
    6. ' pc' → logprob: -4.3844099044799805
    7. 'stack' → logprob: -4.3844099044799805
    8. 'vars' → logprob: -4.6344099044799805
    9. ' N' → logprob: -5.0094099044799805
    10. 'variables' → logprob: -5.0094099044799805

Token 409: ' runs' (ID: 13719)
  Prédit: ' can'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' can' → logprob: -0.7070505023002625
    2. 'can' → logprob: -1.8320505619049072
    3. ' may' → logprob: -2.5820505619049072
    4. 'may' → logprob: -2.7070505619049072
    5. 'lines' → logprob: -2.8320505619049072
    6. ' lines' → logprob: -3.2070505619049072
    7. 'length' → logprob: -3.4570505619049072
    8. ' length' → logprob: -3.8320505619049072
    9. 's' → logprob: -4.582050323486328
    10. ' might' → logprob: -4.832050323486328

Token 410: ' single' (ID: 4590)
  Prédit: 'only'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'only' → logprob: -0.8120508790016174
    2. 'until' → logprob: -2.5620508193969727
    3. 'in' → logprob: -2.6870508193969727
    4. 'up' → logprob: -2.8120508193969727
    5. ' only' → logprob: -3.0620508193969727
    6. 'for' → logprob: -3.4370508193969727
    7. '<=' → logprob: -3.5620508193969727
    8. 'at' → logprob: -3.5620508193969727
    9. 'line' → logprob: -3.6870508193969727
    10. 'max' → logprob: -3.9370508193969727

Token 411: ' path' (ID: 3104)
  Prédit: 'thread'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'thread' → logprob: -0.10255289822816849
    2. 'pass' → logprob: -3.602552890777588
    3. ' threaded' → logprob: -4.727552890777588
    4. 'path' → logprob: -4.977552890777588
    5. '-thread' → logprob: -5.227552890777588
    6. ' pass' → logprob: -5.227552890777588
    7. 'run' → logprob: -5.352552890777588
    8. 'stack' → logprob: -5.352552890777588
    9. 'function' → logprob: -5.352552890777588
    10. ' thread' → logprob: -5.602552890777588

Token 412: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5209710597991943
    2. ',' → logprob: -1.0209710597991943
    3. ' while' → logprob: -4.145971298217773
    4. ':' → logprob: -4.270971298217773
    5. 'while' → logprob: -5.145971298217773
    6. ' and' → logprob: -5.645971298217773
    7. ' until' → logprob: -6.145971298217773
    8. 'and' → logprob: -7.145971298217773
    9. ',
' → logprob: -7.770971298217773
    10. '
' → logprob: -7.770971298217773

Token 413: ' we' (ID: 581)
  Prédit: ' while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' while' → logprob: -0.5025599002838135
    2. 'while' → logprob: -1.0025599002838135
    3. '   ' → logprob: -4.252559661865234
    4. 'visited' → logprob: -4.877559661865234
    5. ' visited' → logprob: -5.502559661865234
    6. '#' → logprob: -7.502559661865234
    7. ' #' → logprob: -7.752559661865234
    8. 'state' → logprob: -7.877559661865234
    9. ' state' → logprob: -9.002559661865234
    10. ' stack' → logprob: -9.377559661865234

Token 414: ' can' (ID: 665)
  Prédit: ' can'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' can' → logprob: -0.011702184565365314
    2. 'can' → logprob: -5.011702060699463
    3. ' need' → logprob: -6.511702060699463
    4. '   ' → logprob: -7.386702060699463
    5. ' have' → logprob: -8.011702537536621
    6. ' will' → logprob: -8.261702537536621
    7. ' cannot' → logprob: -8.261702537536621
    8. ' do' → logprob: -8.261702537536621
    9. ' should' → logprob: -8.261702537536621
    10. ''ll' → logprob: -8.261702537536621

Token 415: ' simulate' (ID: 66687)
  Prédit: 'simulate'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'simulate' → logprob: -0.4404180645942688
    2. 'while' → logprob: -1.315418004989624
    3. '   ' → logprob: -3.690418004989624
    4. 'def' → logprob: -3.815418004989624
    5. 'use' → logprob: -4.690418243408203
    6. 'try' → logprob: -4.940418243408203
    7. ' simulate' → logprob: -5.190418243408203
    8. 'from' → logprob: -5.315418243408203
    9. 'do' → logprob: -5.690418243408203
    10. 'sim' → logprob: -6.440418243408203

Token 416: ' step' (ID: 5983)
  Prédit: ' step'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' step' → logprob: -0.78131502866745
    2. 'while' → logprob: -1.1563150882720947
    3. ' while' → logprob: -2.4063150882720947
    4. '   ' → logprob: -2.5313150882720947
    5. 'step' → logprob: -3.6563150882720947
    6. ' line' → logprob: -3.7813150882720947
    7. 'line' → logprob: -6.031314849853516
    8. '    ' → logprob: -7.406314849853516
    9. 'pc' → logprob: -7.531314849853516
    10. '```' → logprob: -7.781314849853516

Token 417: ' by' (ID: 656)
  Prédit: 'by'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'by' → logprob: -0.007988331839442253
    2. ' by' → logprob: -5.132988452911377
    3. '   ' → logprob: -6.757988452911377
    4. '-by' → logprob: -7.882988452911377
    5. 'b' → logprob: -8.507987976074219
    6. '()' → logprob: -8.632987976074219
    7. 'while' → logprob: -10.257987976074219
    8. 'wise' → logprob: -10.757987976074219
    9. '()
' → logprob: -11.007987976074219
    10. '       ' → logprob: -11.382987976074219

Token 418: ' step' (ID: 5983)
  Prédit: 'step'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'step' → logprob: -0.00013238313840702176
    2. '1' → logprob: -9.12513256072998
    3. ' step' → logprob: -11.50013256072998
    4. 'one' → logprob: -12.50013256072998
    5. 'iteration' → logprob: -13.00013256072998
    6. '0' → logprob: -13.25013256072998
    7. 'line' → logprob: -13.25013256072998
    8. '```' → logprob: -13.75013256072998
    9. '-step' → logprob: -14.00013256072998
    10. '	step' → logprob: -14.50013256072998

Token 419: ' keeping' (ID: 13958)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.018631666898727417
    2. ' while' → logprob: -4.768631458282471
    3. 'while' → logprob: -5.268631458282471
    4. '
' → logprob: -6.143631458282471
    5. ':' → logprob: -6.518631458282471
    6. '    
' → logprob: -7.268631458282471
    7. ',' → logprob: -8.643631935119629
    8. '.' → logprob: -8.768631935119629
    9. '<|end|>' → logprob: -10.268631935119629
    10. '```' → logprob: -11.018631935119629

Token 420: ' set' (ID: 920)
  Prédit: 'track'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'track' → logprob: -0.16023294627666473
    2. 'visited' → logprob: -2.4102330207824707
    3. 'state' → logprob: -3.4102330207824707
    4. 'a' → logprob: -4.535233020782471
    5. 'history' → logprob: -4.535233020782471
    6. ' track' → logprob: -7.410233020782471
    7. 'states' → logprob: -7.410233020782471
    8. 'seen' → logprob: -7.535233020782471
    9. 'execut' → logprob: -7.535233020782471
    10. 'trace' → logprob: -7.785233020782471

Token 421: ' of' (ID: 328)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.36822348833084106
    2. ' of' → logprob: -2.4932234287261963
    3. '   ' → logprob: -2.6182234287261963
    4. 'visited' → logprob: -3.3682234287261963
    5. '(' → logprob: -3.4932234287261963
    6. 'of' → logprob: -3.6182234287261963
    7. '=set' → logprob: -4.118223667144775
    8. '()
' → logprob: -4.368223667144775
    9. '(stack' → logprob: -5.118223667144775
    10. ' visited' → logprob: -5.368223667144775

Token 422: ' visited' (ID: 18416)
  Prédit: 'visited'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'visited' → logprob: -0.29739248752593994
    2. 'states' → logprob: -2.0473923683166504
    3. '(states' → logprob: -3.1723923683166504
    4. 'seen' → logprob: -3.4223923683166504
    5. '(' → logprob: -3.6723923683166504
    6. '(state' → logprob: -4.79739236831665
    7. ' visited' → logprob: -4.92239236831665
    8. 'state' → logprob: -5.29739236831665
    9. ' states' → logprob: -5.67239236831665
    10. ' (' → logprob: -5.92239236831665

Token 423: ' states' (ID: 9407)
  Prédit: '_states'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_states' → logprob: -0.7580907940864563
    2. 'states' → logprob: -0.7580907940864563
    3. ' states' → logprob: -3.2580907344818115
    4. '(states' → logprob: -4.758090972900391
    5. '(' → logprob: -5.133090972900391
    6. 'state' → logprob: -6.258090972900391
    7. ' (' → logprob: -6.633090972900391
    8. '_tokens' → logprob: -6.633090972900391
    9. 'tokens' → logprob: -6.883090972900391
    10. '_state' → logprob: -7.383090972900391

Token 424: ' (' (ID: 350)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.024446289986371994
    2. ' while' → logprob: -4.524446487426758
    3. '
' → logprob: -4.774446487426758
    4. '    
' → logprob: -6.024446487426758
    5. 'while' → logprob: -6.899446487426758
    6. '<|end|>' → logprob: -8.274446487426758
    7. '<|end|>' → logprob: -8.399446487426758
    8. ',' → logprob: -8.649446487426758
    9. ')' → logprob: -9.274446487426758
    10. 'tokens' → logprob: -9.774446487426758

Token 425: 'pc' (ID: 6344)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.772017776966095
    2. '   ' → logprob: -1.7720177173614502
    3. ')
' → logprob: -2.39701771736145
    4. 'visited' → logprob: -2.89701771736145
    5. 'while' → logprob: -3.14701771736145
    6. 'state' → logprob: -3.27201771736145
    7. '(' → logprob: -3.39701771736145
    8. ' )' → logprob: -3.89701771736145
    9. '()' → logprob: -4.272017955780029
    10. '
' → logprob: -4.522017955780029

Token 426: ' +' (ID: 659)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.002538920845836401
    2. ' ,' → logprob: -6.252539157867432
    3. ',var' → logprob: -8.627538681030273
    4. ',state' → logprob: -8.752538681030273
    5. ',val' → logprob: -9.377538681030273
    6. ',
' → logprob: -10.002538681030273
    7. ',value' → logprob: -10.377538681030273
    8. ')' → logprob: -10.502538681030273
    9. ',args' → logprob: -11.627538681030273
    10. ',)' → logprob: -11.752538681030273

Token 427: ' vars' (ID: 36194)
  Prédit: 'encode'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'encode' → logprob: -0.4772782623767853
    2. 'vars' → logprob: -0.9772782325744629
    3. ' encode' → logprob: -5.977278232574463
    4. ' vars' → logprob: -7.852278232574463
    5. 'encoded' → logprob: -9.227278709411621
    6. '(' → logprob: -9.727278709411621
    7. '(vars' → logprob: -10.102278709411621
    8. 'tuple' → logprob: -10.477278709411621
    9. '   ' → logprob: -11.227278709411621
    10. 'variables' → logprob: -12.352278709411621

Token 428: ')
' (ID: 446)
  Prédit: '_val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.0006886058254167438
    2. ')' → logprob: -8.375688552856445
    3. '   ' → logprob: -9.125688552856445
    4. '_encoded' → logprob: -9.500688552856445
    5. ')_' → logprob: -9.625688552856445
    6. 'val' → logprob: -9.625688552856445
    7. '_vals' → logprob: -10.375688552856445
    8. '_' → logprob: -10.750688552856445
    9. '_value' → logprob: -11.000688552856445
    10. '_encode' → logprob: -11.125688552856445

Token 429: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09134508669376373
    2. ' while' → logprob: -2.8413450717926025
    3. 'while' → logprob: -4.216345310211182
    4. '
' → logprob: -5.091345310211182
    5. '    
' → logprob: -5.841345310211182
    6. ')' → logprob: -6.466345310211182
    7. ':' → logprob: -6.966345310211182
    8. '```' → logprob: -7.466345310211182
    9. '  
' → logprob: -8.216344833374023
    10. ',' → logprob: -8.216344833374023

Token 430: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6436253190040588
    2. ' while' → logprob: -1.393625259399414
    3. 'while' → logprob: -1.518625259399414
    4. '
' → logprob: -5.018625259399414
    5. '    
' → logprob: -7.518625259399414
    6. '	while' → logprob: -9.268625259399414
    7. '```' → logprob: -9.893625259399414
    8. '    ' → logprob: -10.518625259399414
    9. ' 
' → logprob: -10.893625259399414
    10. '  
' → logprob: -11.768625259399414

Token 431: ' If' (ID: 1843)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.14526702463626862
    2. ' while' → logprob: -2.6452670097351074
    3. '   ' → logprob: -2.7702670097351074
    4. 'state' → logprob: -6.895267009735107
    5. '
' → logprob: -8.270267486572266
    6. 'visited' → logprob: -8.895267486572266
    7. '    
' → logprob: -10.270267486572266
    8. '```' → logprob: -10.645267486572266
    9. ' state' → logprob: -10.770267486572266
    10. 'for' → logprob: -10.895267486572266

Token 432: ' we' (ID: 581)
  Prédit: '(pc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(pc' → logprob: -0.08361633121967316
    2. '(' → logprob: -2.958616256713867
    3. ' (' → logprob: -3.833616256713867
    4. '(vars' → logprob: -5.708616256713867
    5. '(state' → logprob: -6.708616256713867
    6. '(len' → logprob: -7.083616256713867
    7. '(encoded' → logprob: -7.833616256713867
    8. 'encode' → logprob: -8.458616256713867
    9. 'state' → logprob: -9.333616256713867
    10. 'vars' → logprob: -9.333616256713867

Token 433: ' visit' (ID: 4030)
  Prédit: 'enc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'enc' → logprob: -0.05056526139378548
    2. ' in' → logprob: -4.175565242767334
    3. 'in' → logprob: -4.675565242767334
    4. 'detect' → logprob: -5.550565242767334
    5. 'encode' → logprob: -5.800565242767334
    6. '   ' → logprob: -5.800565242767334
    7. '_enc' → logprob: -5.925565242767334
    8. ' encounter' → logprob: -6.175565242767334
    9. ' enc' → logprob: -6.300565242767334
    10. 'see' → logprob: -6.800565242767334

Token 434: ' same' (ID: 2684)
  Prédit: 'state'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'state' → logprob: -0.5757136940956116
    2. 'a' → logprob: -1.9507136344909668
    3. 'the' → logprob: -2.700713634490967
    4. '(pc' → logprob: -2.825713634490967
    5. ' a' → logprob: -3.325713634490967
    6. '(' → logprob: -3.825713634490967
    7. '   ' → logprob: -3.825713634490967
    8. '(state' → logprob: -3.950713634490967
    9. ' (' → logprob: -4.200713634490967
    10. ' state' → logprob: -4.325713634490967

Token 435: ' pc' (ID: 18736)
  Prédit: 'state'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'state' → logprob: -0.4238050580024719
    2. '(pc' → logprob: -2.423804998397827
    3. ' (' → logprob: -2.548804998397827
    4. '_state' → logprob: -2.923804998397827
    5. ' state' → logprob: -2.923804998397827
    6. '(' → logprob: -3.298804998397827
    7. '   ' → logprob: -3.798804998397827
    8. '(state' → logprob: -5.173805236816406
    9. '(_' → logprob: -6.173805236816406
    10. 'pc' → logprob: -7.798805236816406

Token 436: '+' (ID: 10)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0022379241418093443
    2. ' ,' → logprob: -6.502237796783447
    3. 'and' → logprob: -9.252238273620605
    4. ' with' → logprob: -9.252238273620605
    5. ' and' → logprob: -9.502238273620605
    6. 'with' → logprob: -9.627238273620605
    7. ',var' → logprob: -9.627238273620605
    8. ',
' → logprob: -9.877238273620605
    9. '   ' → logprob: -10.377238273620605
    10. ',state' → logprob: -10.502238273620605

Token 437: 'vars' (ID: 32791)
  Prédit: 'vars'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'vars' → logprob: -0.1458449810743332
    2. 'encode' → logprob: -2.2708449363708496
    3. ' encode' → logprob: -4.14584493637085
    4. ' vars' → logprob: -5.02084493637085
    5. '"' → logprob: -5.39584493637085
    6. ''' → logprob: -6.02084493637085
    7. 'encoded' → logprob: -7.14584493637085
    8. '   ' → logprob: -7.89584493637085
    9. ' '' → logprob: -8.020845413208008
    10. '(' → logprob: -8.145845413208008

Token 438: ' again' (ID: 2418)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -1.2915544509887695
    2. ' in' → logprob: -1.2915544509887695
    3. ' again' → logprob: -1.5415544509887695
    4. '   ' → logprob: -2.4165544509887695
    5. 'again' → logprob: -2.7915544509887695
    6. ',' → logprob: -3.1665544509887695
    7. '_' → logprob: -4.6665544509887695
    8. ' ' → logprob: -5.2915544509887695
    9. '_state' → logprob: -5.4165544509887695
    10. 'state' → logprob: -5.4165544509887695

Token 439: ' =>' (ID: 871)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.19576679170131683
    2. ',' → logprob: -1.945766806602478
    3. '   ' → logprob: -3.6957666873931885
    4. '       ' → logprob: -4.945766925811768
    5. ':
' → logprob: -6.570766925811768
    6. ' in' → logprob: -8.57076644897461
    7. '    ' → logprob: -8.69576644897461
    8. ' with' → logprob: -8.82076644897461
    9. '==' → logprob: -8.82076644897461
    10. '  ' → logprob: -9.32076644897461

Token 440: ' inf' (ID: 5603)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -1.0406484603881836
    2. 'print' → logprob: -1.4156484603881836
    3. 'return' → logprob: -1.5406484603881836
    4. ' print' → logprob: -1.9156484603881836
    5. ' loop' → logprob: -4.915648460388184
    6. ' break' → logprob: -5.540648460388184
    7. '#' → logprob: -5.540648460388184
    8. '           ' → logprob: -5.540648460388184
    9. ' True' → logprob: -5.665648460388184
    10. 'break' → logprob: -5.665648460388184

Token 441: '

' (ID: 279)
  Prédit: '_loop'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_loop' → logprob: -0.7660821676254272
    2. 'loop' → logprob: -1.0160821676254272
    3. 'inite' → logprob: -2.266082286834717
    4. ' loop' → logprob: -3.016082286834717
    5. '   ' → logprob: -5.141082286834717
    6. 'inity' → logprob: -5.766082286834717
    7. 'visited' → logprob: -6.391082286834717
    8. '```' → logprob: -6.641082286834717
    9. 'if' → logprob: -6.891082286834717
    10. '_cycle' → logprob: -7.266082286834717

Token 442: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05462406948208809
    2. '
' → logprob: -3.304624080657959
    3. ' while' → logprob: -4.554624080657959
    4. '```' → logprob: -6.179624080657959
    5. '    
' → logprob: -6.304624080657959
    6. 'while' → logprob: -6.804624080657959
    7. '  
' → logprob: -8.4296236038208
    8. ' ' → logprob: -9.3046236038208
    9. ' tokens' → logprob: -9.4296236038208
    10. 'tokens' → logprob: -9.5546236038208

Token 443: ' while' (ID: 2049)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' (adapté à ' while') → logprob: -0.07007959485054016
    2. '   ' → logprob: -2.8200795650482178
    3. ' while' → logprob: -4.820079803466797
    4. 'state' → logprob: -12.195079803466797
    5. '
' → logprob: -12.445079803466797
    6. '```' → logprob: -13.445079803466797
    7. 'n' → logprob: -14.320079803466797
    8. '	while' → logprob: -14.695079803466797
    9. '    
' → logprob: -14.820079803466797
    10. 'for' → logprob: -14.945079803466797

Token 444: ' True' (ID: 6432)
  Prédit: 'pc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pc' → logprob: -0.24777697026729584
    2. ' pc' → logprob: -1.622776985168457
    3. 'True' → logprob: -4.497776985168457
    4. ' True' → logprob: -4.622776985168457
    5. '   ' → logprob: -6.872776985168457
    6. '(pc' → logprob: -9.622776985168457
    7. ' ' → logprob: -10.747776985168457
    8. '    ' → logprob: -12.122776985168457
    9. '	pc' → logprob: -12.122776985168457
    10. '  ' → logprob: -12.247776985168457

Token 445: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.020366927608847618
    2. '       ' → logprob: -4.14536714553833
    3. ':
' → logprob: -5.64536714553833
    4. ',' → logprob: -7.77036714553833
    5. '   ' → logprob: -8.645366668701172
    6. ' :' → logprob: -9.645366668701172
    7. '):' → logprob: -10.270366668701172
    8. '.' → logprob: -11.145366668701172
    9. '):
' → logprob: -11.270366668701172
    10. '    ' → logprob: -11.520366668701172

Token 446: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00041243841405957937
    2. ' if' → logprob: -8.375411987304688
    3. '   ' → logprob: -10.250411987304688
    4. '    ' → logprob: -10.250411987304688
    5. '        
' → logprob: -10.500411987304688
    6. ' token' → logprob: -11.250411987304688
    7. ',' → logprob: -11.375411987304688
    8. 'if' → logprob: -12.125411987304688
    9. '    ' → logprob: -12.125411987304688
    10. '           ' → logprob: -12.250411987304688

Token 447: ' state' (ID: 2608)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.030823538079857826
    2. '       ' → logprob: -3.6558234691619873
    3. ' if' → logprob: -5.655823707580566
    4. 'state' (adapté à ' state') → logprob: -6.905823707580566
    5. 'key' → logprob: -12.155823707580566
    6. '	if' → logprob: -12.780823707580566
    7. '   ' → logprob: -12.780823707580566
    8. 'pc' → logprob: -14.655823707580566
    9. ' ' → logprob: -14.780823707580566
    10. ' state' → logprob: -14.905823707580566

Token 448: '=(' (ID: 9893)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.3199005424976349
    2. ' =' → logprob: -1.3199005126953125
    3. '=(' → logprob: -5.1949005126953125
    4. ' =(' → logprob: -6.9449005126953125
    5. '=
' → logprob: -9.444900512695312
    6. ' =
' → logprob: -11.319900512695312
    7. ',' → logprob: -12.319900512695312
    8. ' (' → logprob: -12.944900512695312
    9. '=('' → logprob: -13.319900512695312
    10. '=("' → logprob: -13.444900512695312

Token 449: 'pc' (ID: 6344)
  Prédit: 'pc'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pc' → logprob: -2.339278580620885e-06
    2. ' pc' → logprob: -13.125001907348633
    3. '(pc' → logprob: -15.375001907348633
    4. '   ' → logprob: -17.250001907348633
    5. '	pc' → logprob: -18.500001907348633
    6. '       ' → logprob: -19.375001907348633
    7. '_pc' → logprob: -19.500001907348633
    8. ')' → logprob: -20.000001907348633
    9. '.pc' → logprob: -20.250001907348633
    10. '           ' → logprob: -20.500001907348633

Token 450: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -4.656383680412546e-05
    2. ' ,' → logprob: -10.250046730041504
    3. ',
' → logprob: -11.750046730041504
    4. ',)' → logprob: -14.125046730041504
    5. ',(' → logprob: -14.250046730041504
    6. 'encode' → logprob: -15.125046730041504
    7. ',len' → logprob: -15.125046730041504
    8. ',state' → logprob: -15.500046730041504
    9. ',{
' → logprob: -16.000045776367188
    10. ',exports' → logprob: -16.250045776367188

Token 451: 'encode' (ID: 12949)
  Prédit: 'encode'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'encode' → logprob: -0.00018041854491457343
    2. ' encode' → logprob: -8.6251802444458
    3. 'vars' → logprob: -15.1251802444458
    4. 'encoded' → logprob: -15.7501802444458
    5. 'tuple' → logprob: -15.8751802444458
    6. '.encode' → logprob: -16.500181198120117
    7. '   ' → logprob: -16.500181198120117
    8. ')' → logprob: -16.750181198120117
    9. 'encoding' → logprob: -17.500181198120117
    10. '_encode' → logprob: -17.875181198120117

Token 452: '_vars' (ID: 25901)
  Prédit: '_vars'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_vars' → logprob: -1.7835754988482222e-05
    2. '_vals' → logprob: -11.250018119812012
    3. 'vars' → logprob: -12.625018119812012
    4. '```' → logprob: -13.875018119812012
    5. ')_' → logprob: -16.000017166137695
    6. ')' → logprob: -16.500017166137695
    7. '_' → logprob: -17.250017166137695
    8. 'Vars' → logprob: -17.375017166137695
    9. '`' → logprob: -17.500017166137695
    10. '_var' → logprob: -17.625017166137695

Token 453: '(vars' (ID: 174980)
  Prédit: '(vars'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(vars' → logprob: -0.003191970521584153
    2. 'vars' → logprob: -5.753191947937012
    3. '(' → logprob: -11.878191947937012
    4. ')' → logprob: -12.253191947937012
    5. '(vals' → logprob: -14.253191947937012
    6. ' vars' → logprob: -14.253191947937012
    7. ' (' → logprob: -14.628191947937012
    8. ')(' → logprob: -15.378191947937012
    9. 'Vars' → logprob: -15.878191947937012
    10. '```' → logprob: -16.128192901611328

Token 454: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.00026407750556245446
    2. 'val' → logprob: -8.250264167785645
    3. ')' → logprob: -13.875264167785645
    4. 'Val' → logprob: -14.875264167785645
    5. '_var' → logprob: -15.000264167785645
    6. 'al' → logprob: -15.000264167785645
    7. ' val' → logprob: -16.125263214111328
    8. '))' → logprob: -16.250263214111328
    9. '(val' → logprob: -16.250263214111328
    10. '
' → logprob: -16.500263214111328

Token 455: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.07901117950677872
    2. '))
' → logprob: -2.5790112018585205
    3. ')' → logprob: -9.329010963439941
    4. '))

' → logprob: -10.704010963439941
    5. '))
' → logprob: -12.579010963439941
    6. ')
' → logprob: -12.954010963439941
    7. ' ))' → logprob: -13.579010963439941
    8. '   ' → logprob: -14.079010963439941
    9. ' ))
' → logprob: -14.204010963439941
    10. '       ' → logprob: -14.704010963439941

Token 456: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.04040059074759483
    2. '
' → logprob: -4.290400505065918
    3. '<|end|>' → logprob: -4.290400505065918
    4. ' if' → logprob: -5.165400505065918
    5. ')' → logprob: -5.415400505065918
    6. '        
' → logprob: -7.290400505065918
    7. 'if' → logprob: -7.415400505065918
    8. '<|end|>' → logprob: -8.165400505065918
    9. ' 
' → logprob: -9.165400505065918
    10. ')
' → logprob: -9.540400505065918

Token 457: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.6035807132720947
    2. '       ' → logprob: -0.8535807132720947
    3. ' if' → logprob: -3.6035807132720947
    4. '   ' → logprob: -11.353580474853516
    5. '        
' → logprob: -11.603580474853516
    6. '
' → logprob: -12.228580474853516
    7. ' ' → logprob: -13.103580474853516
    8. '<|end|>' → logprob: -13.103580474853516
    9. '	if' → logprob: -13.228580474853516
    10. 'If' → logprob: -13.853580474853516

Token 458: ' state' (ID: 2608)
  Prédit: 'state'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'state' → logprob: -0.04858759790658951
    2. ' state' → logprob: -3.0485875606536865
    3. '   ' → logprob: -16.173587799072266
    4. '       ' → logprob: -16.673587799072266
    5. '           ' → logprob: -18.048587799072266
    6. '	state' → logprob: -18.923587799072266
    7. ' ' → logprob: -19.548587799072266
    8. '(state' → logprob: -19.673587799072266
    9. '    ' → logprob: -20.048587799072266
    10. '        ' → logprob: -20.548587799072266

Token 459: ' in' (ID: 306)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.31326499581336975
    2. ' in' → logprob: -1.3132649660110474
    3. ')' → logprob: -13.063264846801758
    4. ' ' → logprob: -14.938264846801758
    5. 'import' → logprob: -14.938264846801758
    6. '	in' → logprob: -15.688264846801758
    7. '   ' → logprob: -16.813264846801758
    8. 'In' → logprob: -16.938264846801758
    9. '[in' → logprob: -16.938264846801758
    10. ' )' → logprob: -17.313264846801758

Token 460: ' visited' (ID: 18416)
  Prédit: 'visited'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'visited' → logprob: -1.8624639324116288e-06
    2. ' visited' → logprob: -13.250001907348633
    3. 'stack' → logprob: -18.375001907348633
    4. '
' → logprob: -20.875001907348633
    5. 'visit' → logprob: -23.375001907348633
    6. 'seen' → logprob: -23.500001907348633
    7. 'Visited' → logprob: -23.625001907348633
    8. '   ' → logprob: -23.625001907348633
    9. '
' → logprob: -24.250001907348633
    10. '```' → logprob: -24.750001907348633

Token 461: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.2560281753540039
    2. ':
' → logprob: -1.506028175354004
    3. '           ' → logprob: -6.131028175354004
    4. ':return' → logprob: -6.631028175354004
    5. ' or' → logprob: -7.756028175354004
    6. '       ' → logprob: -9.631028175354004
    7. '):
' → logprob: -10.631028175354004
    8. ',' → logprob: -11.256028175354004
    9. ':
' → logprob: -11.506028175354004
    10. ':

' → logprob: -11.631028175354004

Token 462: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0014323819195851684
    2. ' visited' → logprob: -7.626432418823242
    3. 'visited' → logprob: -7.751432418823242
    4. ' return' → logprob: -8.126432418823242
    5. 'return' → logprob: -9.126432418823242
    6. ' break' → logprob: -10.376432418823242
    7. '
' → logprob: -10.501432418823242
    8. '            
' → logprob: -11.376432418823242
    9. 'break' → logprob: -11.501432418823242
    10. '       ' → logprob: -11.626432418823242

Token 463: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.682555615901947
    2. '           ' → logprob: -0.807555615901947
    3. 'print' → logprob: -3.557555675506592
    4. ' return' → logprob: -3.932555675506592
    5. ' print' → logprob: -8.932555198669434
    6. 'break' → logprob: -8.932555198669434
    7. '#' → logprob: -8.932555198669434
    8. '               ' → logprob: -9.057555198669434
    9. '       ' → logprob: -9.932555198669434
    10. 'raise' → logprob: -10.557555198669434

Token 464: ' None' (ID: 4662)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.10516195744276047
    2. ''' → logprob: -3.1051619052886963
    3. 'True' → logprob: -3.2301619052886963
    4. '-' → logprob: -4.980162143707275
    5. ''in' → logprob: -5.480162143707275
    6. '"in' → logprob: -6.855162143707275
    7. '"In' → logprob: -6.980162143707275
    8. 'False' → logprob: -7.105162143707275
    9. ' True' → logprob: -8.230161666870117
    10. '   ' → logprob: -8.230161666870117

Token 465: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0902242437005043
    2. '
' → logprob: -3.090224266052246
    3. '        
' → logprob: -3.215224266052246
    4. '  
' → logprob: -8.590224266052246
    5. '<|end|>' → logprob: -9.090224266052246
    6. '\n' → logprob: -9.840224266052246
    7. '    
' → logprob: -9.965224266052246
    8. '       
' → logprob: -10.090224266052246
    9. ' 
' → logprob: -10.340224266052246
    10. '            
' → logprob: -10.465224266052246

Token 466: ' inf' (ID: 5603)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.47073620557785034
    2. 'None' → logprob: -2.595736265182495
    3. ''' → logprob: -2.845736265182495
    4. '"in' → logprob: -3.220736265182495
    5. 'inf' → logprob: -3.345736265182495
    6. ''in' → logprob: -3.470736265182495
    7. ' "' → logprob: -3.470736265182495
    8. ' None' → logprob: -3.470736265182495
    9. ' '' → logprob: -3.595736265182495
    10. '           ' → logprob: -4.095736026763916

Token 467: ' loop' (ID: 11453)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0081862797960639
    2. '        
' → logprob: -5.008186340332031
    3. '
' → logprob: -7.008186340332031
    4. '_' → logprob: -9.008186340332031
    5. ')' → logprob: -9.633186340332031
    6. '        ' → logprob: -9.883186340332031
    7. '<|end|>' → logprob: -10.008186340332031
    8. '      ' → logprob: -10.633186340332031
    9. '        
' → logprob: -10.633186340332031
    10. '_state' → logprob: -10.758186340332031

Token 468: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.017039798200130463
    2. '        
' → logprob: -4.392039775848389
    3. '
' → logprob: -6.017039775848389
    4. '<|end|>' → logprob: -6.392039775848389
    5. '  
' → logprob: -9.517040252685547
    6. '' → logprob: -10.517040252685547
    7. '        ' → logprob: -10.517040252685547
    8. '\n' → logprob: -10.517040252685547
    9. ')' → logprob: -10.642040252685547
    10. ',' → logprob: -10.642040252685547

Token 469: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0018441593274474144
    2. '        
' → logprob: -6.3768439292907715
    3. '
' → logprob: -9.87684440612793
    4. '```' → logprob: -11.00184440612793
    5. ' 
' → logprob: -11.12684440612793
    6. 'visited' → logprob: -11.25184440612793
    7. ' visited' → logprob: -11.62684440612793
    8. '  
' → logprob: -12.00184440612793
    9. '            
' → logprob: -12.12684440612793
    10. '    
' → logprob: -12.25184440612793

Token 470: ' visited' (ID: 18416)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.47429826855659485
    2. 'visited' (adapté à ' visited') → logprob: -0.9742982387542725
    3. ' visited' → logprob: -8.724298477172852
    4. '   ' → logprob: -9.849298477172852
    5. '           ' → logprob: -13.099298477172852
    6. '        
' → logprob: -13.724298477172852
    7. 'Visited' → logprob: -14.474298477172852
    8. '	' → logprob: -14.599298477172852
    9. '
' → logprob: -14.724298477172852
    10. 'visit' → logprob: -15.099298477172852

Token 471: '.add' (ID: 1950)
  Prédit: '.add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.add' → logprob: -0.0067167943343520164
    2. '.' → logprob: -5.006716728210449
    3. ' .' → logprob: -14.88171672821045
    4. '.Add' → logprob: -15.00671672821045
    5. 'add' → logprob: -15.25671672821045
    6. ' add' → logprob: -15.50671672821045
    7. '_add' → logprob: -16.131717681884766
    8. '.append' → logprob: -16.506717681884766
    9. '.insert' → logprob: -17.006717681884766
    10. '.update' → logprob: -17.131717681884766

Token 472: '(state' (ID: 16114)
  Prédit: '(state'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(state' → logprob: -0.04860111325979233
    2. '(' → logprob: -3.0486011505126953
    3. '(
' → logprob: -12.423601150512695
    4. '(token' → logprob: -12.673601150512695
    5. '(space' → logprob: -12.673601150512695
    6. ' (' → logprob: -13.673601150512695
    7. '(states' → logprob: -13.923601150512695
    8. 'state' → logprob: -14.798601150512695
    9. '(State' → logprob: -15.048601150512695
    10. ',state' → logprob: -15.298601150512695

Token 473: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0006448837229982018
    2. '       ' → logprob: -7.875644683837891
    3. ')
' → logprob: -8.25064468383789
    4. ' )' → logprob: -14.37564468383789
    5. ')return' → logprob: -14.62564468383789
    6. '   ' → logprob: -14.62564468383789
    7. '),' → logprob: -15.00064468383789
    8. '[' → logprob: -15.37564468383789
    9. '<|end|>' → logprob: -15.50064468383789
    10. '))' → logprob: -15.75064468383789

Token 474: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0014022637624293566
    2. 'if' → logprob: -6.876402378082275
    3. ' if' → logprob: -8.126401901245117
    4. '        
' → logprob: -10.001401901245117
    5. '   ' → logprob: -11.126401901245117
    6. 'token' → logprob: -12.626401901245117
    7. '```' → logprob: -12.876401901245117
    8. ',' → logprob: -13.001401901245117
    9. '<|end|>' → logprob: -13.876401901245117
    10. '	if' → logprob: -14.126401901245117

Token 475: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.1819744110107422
    2. 'line' → logprob: -1.8069744110107422
    3. 'ln' → logprob: -6.431974411010742
    4. '       ' → logprob: -8.181974411010742
    5. ' if' → logprob: -9.306974411010742
    6. '   ' → logprob: -9.431974411010742
    7. 'lin' → logprob: -9.681974411010742
    8. '_,' → logprob: -11.056974411010742
    9. 'no' → logprob: -11.181974411010742
    10. '(line' → logprob: -11.306974411010742

Token 476: ' pc' (ID: 18736)
  Prédit: 'pc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pc' → logprob: -0.00012630375567823648
    2. ' pc' → logprob: -9.625125885009766
    3. 'prog' → logprob: -10.125125885009766
    4. '   ' → logprob: -11.000125885009766
    5. '       ' → logprob: -12.875125885009766
    6. '           ' → logprob: -14.500125885009766
    7. '	pc' → logprob: -16.125125885009766
    8. '    ' → logprob: -16.500125885009766
    9. '  ' → logprob: -16.750125885009766
    10. '(pc' → logprob: -17.250125885009766

Token 477: '<' (ID: 27)
  Prédit: '>='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>=' → logprob: -0.024212783202528954
    2. ' >=' → logprob: -3.8992128372192383
    3. '==' → logprob: -5.649212837219238
    4. ' ==' → logprob: -9.399212837219238
    5. ']>=' → logprob: -10.274212837219238
    6. ')>=' → logprob: -11.649212837219238
    7. '>' → logprob: -11.774212837219238
    8. '<' → logprob: -12.274212837219238
    9. '   ' → logprob: -13.774212837219238
    10. ')' → logprob: -13.899212837219238

Token 478: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0004004024958703667
    2. ' ' → logprob: -8.00040054321289
    3. 'len' → logprob: -9.75040054321289
    4. '   ' → logprob: -13.00040054321289
    5. 'N' → logprob: -13.75040054321289
    6. '```' → logprob: -14.12540054321289
    7. '>' → logprob: -14.50040054321289
    8. ' len' → logprob: -15.00040054321289
    9. '<len' → logprob: -15.56290054321289
    10. '=' → logprob: -15.75040054321289

Token 479: ' or' (ID: 503)
  Prédit: ' or'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.25193601846694946
    2. 'or' → logprob: -1.5019359588623047
    3. '	or' → logprob: -12.126935958862305
    4. '       ' → logprob: -14.626935958862305
    5. ' ' → logprob: -15.001935958862305
    6. '0' → logprob: -15.626935958862305
    7. '<|end|>' → logprob: -16.251935958862305
    8. '   ' → logprob: -16.376935958862305
    9. ' orun' → logprob: -16.501935958862305
    10. '        ' → logprob: -17.126935958862305

Token 480: ' pc' (ID: 18736)
  Prédit: 'pc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pc' → logprob: -3.547789674485102e-05
    2. ' pc' → logprob: -10.250035285949707
    3. '(pc' → logprob: -16.875036239624023
    4. '	pc' → logprob: -16.875036239624023
    5. '   ' → logprob: -19.000036239624023
    6. '.pc' → logprob: -20.500036239624023
    7. 'pp' → logprob: -20.625036239624023
    8. 'pcm' → logprob: -20.875036239624023
    9. 'pci' → logprob: -21.125036239624023
    10. ' ' → logprob: -21.125036239624023

Token 481: '>=' (ID: 20974)
  Prédit: '>='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>=' → logprob: -0.0009120595059357584
    2. ' >=' → logprob: -7.125912189483643
    3. ']>=' → logprob: -9.875911712646484
    4. '==' → logprob: -10.750911712646484
    5. ')>=' → logprob: -11.000911712646484
    6. '>' → logprob: -11.250911712646484
    7. '   ' → logprob: -14.000911712646484
    8. '```' → logprob: -14.250911712646484
    9. '≥' → logprob: -14.375911712646484
    10. '=' → logprob: -15.000911712646484

Token 482: 'N' (ID: 45)
  Prédit: 'N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.011049704626202583
    2. 'len' → logprob: -4.511049747467041
    3. ' N' → logprob: -13.386049270629883
    4. ' len' → logprob: -14.886049270629883
    5. '   ' → logprob: -17.761049270629883
    6. '(len' → logprob: -18.636049270629883
    7. '```' → logprob: -19.386049270629883
    8. 'n' → logprob: -19.511049270629883
    9. 'Len' → logprob: -19.761049270629883
    10. '
' → logprob: -20.136049270629883

Token 483: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.04650386795401573
    2. ':
' → logprob: -3.171503782272339
    3. ' or' → logprob: -6.546504020690918
    4. '           ' → logprob: -6.921504020690918
    5. '       ' → logprob: -7.546504020690918
    6. ':return' → logprob: -7.546504020690918
    7. '   ' → logprob: -12.421504020690918
    8. '):' → logprob: -12.671504020690918
    9. '):
' → logprob: -13.296504020690918
    10. ',' → logprob: -13.296504020690918

Token 484: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.00739471847191453
    2. '       ' → logprob: -5.382394790649414
    3. ' return' → logprob: -6.507394790649414
    4. 'return' → logprob: -6.882394790649414
    5. '   ' → logprob: -9.257394790649414
    6. 'print' → logprob: -10.007394790649414
    7. '
' → logprob: -10.257394790649414
    8. ',' → logprob: -11.632394790649414
    9. '               ' → logprob: -11.757394790649414
    10. 'break' → logprob: -11.757394790649414

Token 485: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.00045545989996753633
    2. '       ' → logprob: -8.250455856323242
    3. 'break' → logprob: -9.375455856323242
    4. ' return' → logprob: -9.500455856323242
    5. '           ' → logprob: -10.500455856323242
    6. '#' (adapté à ' #') → logprob: -12.750455856323242
    7. '   ' → logprob: -13.125455856323242
    8. 'print' → logprob: -13.250455856323242
    9. '	return' → logprob: -15.625455856323242
    10. '
' → logprob: -16.375455856323242

Token 486: ' Jump' (ID: 51108)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.0011712945997714996
    2. 'break' → logprob: -7.126171112060547
    3. '       ' → logprob: -8.501171112060547
    4. '#' → logprob: -9.251171112060547
    5. ' return' → logprob: -10.001171112060547
    6. '           ' → logprob: -10.751171112060547
    7. '   ' → logprob: -14.501171112060547
    8. 'print' → logprob: -16.251171112060547
    9. ' break' → logprob: -16.501171112060547
    10. '#print' → logprob: -16.626171112060547

Token 487: 'ed' (ID: 295)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.42943525314331055
    2. ' out' → logprob: -1.6794352531433105
    3. '       ' → logprob: -2.4294352531433105
    4. 'out' → logprob: -2.8044352531433105
    5. 'break' → logprob: -4.8044352531433105
    6. '_out' → logprob: -6.3044352531433105
    7. 'if' → logprob: -6.9294352531433105
    8. '=' → logprob: -7.4294352531433105
    9. '               ' → logprob: -8.054435729980469
    10. ' =' → logprob: -8.054435729980469

Token 488: ' to' (ID: 316)
  Prédit: 'out'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'out' → logprob: -0.09477768838405609
    2. ' out' → logprob: -2.7197775840759277
    3. 'outside' → logprob: -3.8447775840759277
    4. ' outside' → logprob: -6.219777584075928
    5. 'b' → logprob: -7.469777584075928
    6. ' beyond' → logprob: -8.219778060913086
    7. 'over' → logprob: -9.719778060913086
    8. '   ' → logprob: -9.969778060913086
    9. 'off' → logprob: -10.344778060913086
    10. '       ' → logprob: -10.594778060913086

Token 489: ' non' (ID: 2893)
  Prédit: 'invalid'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'invalid' → logprob: -0.878344714641571
    2. 'out' → logprob: -1.3783447742462158
    3. 'outside' → logprob: -2.003344774246216
    4. 'a' → logprob: -2.503344774246216
    5. 'end' → logprob: -3.503344774246216
    6. 'exit' → logprob: -4.128344535827637
    7. 'an' → logprob: -4.253344535827637
    8. 'line' → logprob: -4.503344535827637
    9. 'terminate' → logprob: -5.003344535827637
    10. 'pc' → logprob: -5.003344535827637

Token 490: '-existent' (ID: 130142)
  Prédit: 'existent'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'existent' → logprob: -0.0894731730222702
    2. 'existing' → logprob: -2.589473247528076
    3. '-existent' → logprob: -5.464473247528076
    4. 'ex' → logprob: -5.714473247528076
    5. 'exist' → logprob: -6.339473247528076
    6. '-existing' → logprob: -6.964473247528076
    7. ' existing' → logprob: -8.714472770690918
    8. 'valid' → logprob: -10.339472770690918
    9. 'exists' → logprob: -10.464472770690918
    10. '-ex' → logprob: -10.589472770690918

Token 491: ' line' (ID: 2543)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.012415111996233463
    2. ' line' → logprob: -4.762414932250977
    3. 'instruction' → logprob: -6.012414932250977
    4. 'index' → logprob: -8.012414932250977
    5. 'location' → logprob: -8.137414932250977
    6. 'pc' → logprob: -8.137414932250977
    7. 'program' → logprob: -8.137414932250977
    8. 'code' → logprob: -10.512414932250977
    9. ' instruction' → logprob: -10.887414932250977
    10. 'lines' → logprob: -11.012414932250977

Token 492: ' number' (ID: 2086)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.3192959129810333
    2. '       ' → logprob: -1.319295883178711
    3. 'return' → logprob: -5.444295883178711
    4. 'break' → logprob: -7.194295883178711
    5. ',' → logprob: -8.194295883178711
    6. ' return' → logprob: -8.569295883178711
    7. '
' → logprob: -8.819295883178711
    8. '   ' → logprob: -9.444295883178711
    9. '        
' → logprob: -10.069295883178711
    10. '               ' → logprob: -10.194295883178711

Token 493: '?' (ID: 30)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.05697839707136154
    2. ':
' → logprob: -3.306978464126587
    3. ':' → logprob: -4.681978225708008
    4. '       ' → logprob: -4.931978225708008
    5. ',' → logprob: -6.806978225708008
    6. '\n' → logprob: -7.806978225708008
    7. ' or' → logprob: -8.681978225708008
    8. '               ' → logprob: -9.181978225708008
    9. ':return' → logprob: -9.306978225708008
    10. 'return' → logprob: -9.431978225708008

Token 494: ' Actually' (ID: 50557)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.40529322624206543
    2. 'return' → logprob: -1.2802932262420654
    3. ' return' → logprob: -2.9052932262420654
    4. '       ' → logprob: -8.030293464660645
    5. '
' → logprob: -9.905293464660645
    6. 'break' → logprob: -10.155293464660645
    7. '               ' → logprob: -10.405293464660645
    8. '   ' → logprob: -10.405293464660645
    9. '	return' → logprob: -11.655293464660645
    10. ' ' → logprob: -11.780293464660645

Token 495: ' handled' (ID: 29594)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.8342834711074829
    2. 'break' → logprob: -0.8342834711074829
    3. ' break' → logprob: -3.3342833518981934
    4. ' return' → logprob: -3.3342833518981934
    5. '           ' → logprob: -3.9592833518981934
    6. 'terminate' → logprob: -3.9592833518981934
    7. 'stop' → logprob: -4.584283351898193
    8. '       ' → logprob: -5.709283351898193
    9. ' stop' → logprob: -6.084283351898193
    10. '#' → logprob: -6.209283351898193

Token 496: ' below' (ID: 4895)
  Prédit: 'by'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'by' → logprob: -1.3218767642974854
    2. 'else' → logprob: -1.4468767642974854
    3. 'before' → logprob: -1.8218767642974854
    4. 'below' → logprob: -2.3218767642974854
    5. 'in' → logprob: -2.8218767642974854
    6. '```' → logprob: -2.9468767642974854
    7. 'here' → logprob: -3.4468767642974854
    8. ' by' → logprob: -4.071876525878906
    9. ' earlier' → logprob: -4.446876525878906
    10. 'already' → logprob: -4.446876525878906

Token 497: ' jump' (ID: 13843)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.022181063890457153
    2. '           ' → logprob: -4.397181034088135
    3. '
' → logprob: -5.897181034088135
    4. '        
' → logprob: -6.397181034088135
    5. 'if' → logprob: -6.522181034088135
    6. ' if' → logprob: -6.522181034088135
    7. ',' → logprob: -6.897181034088135
    8. 'return' → logprob: -7.647181034088135
    9. '```' → logprob: -8.272181510925293
    10. '   ' → logprob: -9.022181510925293

Token 498: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00883673969656229
    2. '        
' → logprob: -5.63383674621582
    3. '
' → logprob: -6.00883674621582
    4. '<|end|>' → logprob: -7.00883674621582
    5. ',' → logprob: -7.38383674621582
    6. '           ' → logprob: -8.50883674621582
    7. '```' → logprob: -8.63383674621582
    8. '.' → logprob: -8.88383674621582
    9. '   ' → logprob: -9.38383674621582
    10. '  
' → logprob: -9.88383674621582

Token 499: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.11321592330932617
    2. '           ' → logprob: -2.238215923309326
    3. ',' → logprob: -8.488216400146484
    4. '   ' → logprob: -9.363216400146484
    5. '        
' → logprob: -11.113216400146484
    6. '```' → logprob: -11.488216400146484
    7. '#' → logprob: -11.738216400146484
    8. '<|end|>' → logprob: -11.863216400146484
    9. '               ' → logprob: -12.113216400146484
    10. ' if' → logprob: -12.238216400146484

Token 500: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.0360301174223423
    2. '       ' → logprob: -3.9110300540924072
    3. ' return' → logprob: -4.911030292510986
    4. '           ' → logprob: -5.411030292510986
    5. 'break' → logprob: -5.661030292510986
    6. ' break' → logprob: -10.786029815673828
    7. '   ' → logprob: -11.286029815673828
    8. '```' → logprob: -11.911029815673828
    9. '
' → logprob: -12.161029815673828
    10. '	return' → logprob: -12.911029815673828

Token 501: ' but' (ID: 889)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.3191930055618286
    2. 'break' → logprob: -1.3191930055618286
    3. '       ' → logprob: -5.319192886352539
    4. '#' → logprob: -7.694192886352539
    5. '           ' → logprob: -7.819192886352539
    6. 'print' → logprob: -9.319192886352539
    7. ' return' → logprob: -10.194192886352539
    8. ' break' → logprob: -11.069192886352539
    9. 'raise' → logprob: -12.694192886352539
    10. '```' → logprob: -12.694192886352539

Token 502: ' if' (ID: 538)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'break' → logprob: -0.5625526309013367
    2. 'return' → logprob: -1.5625526905059814
    3. '           ' → logprob: -2.1875526905059814
    4. '       ' → logprob: -2.4375526905059814
    5. '#' → logprob: -4.687552452087402
    6. ' break' → logprob: -5.562552452087402
    7. ' return' → logprob: -5.687552452087402
    8. '
' → logprob: -5.812552452087402
    9. '   ' → logprob: -7.062552452087402
    10. '               ' → logprob: -8.812552452087402

Token 503: ' pc' (ID: 18736)
  Prédit: 'pc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pc' → logprob: -0.131790429353714
    2. ' pc' → logprob: -2.6317903995513916
    3. 'False' → logprob: -3.2567903995513916
    4. 'not' → logprob: -4.881790637969971
    5. ' not' → logprob: -6.131790637969971
    6. 'state' → logprob: -6.881790637969971
    7. ' False' → logprob: -7.006790637969971
    8. 'True' → logprob: -7.381790637969971
    9. '(pc' → logprob: -8.506790161132812
    10. 'program' → logprob: -9.381790161132812

Token 504: ' out' (ID: 842)
  Prédit: '<'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<' → logprob: -0.05909381061792374
    2. '>=' → logprob: -3.434093713760376
    3. 'not' → logprob: -4.309093952178955
    4. ' not' → logprob: -4.684093952178955
    5. ' <' → logprob: -6.809093952178955
    6. '==' → logprob: -7.309093952178955
    7. ' >=' → logprob: -7.934093952178955
    8. '>' → logprob: -9.309093475341797
    9. ' out' → logprob: -9.934093475341797
    10. ')' → logprob: -9.934093475341797

Token 505: ' of' (ID: 328)
  Prédit: 'of'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'of' → logprob: -0.033752087503671646
    2. ' of' → logprob: -4.283751964569092
    3. '<' → logprob: -4.783751964569092
    4. '>=' → logprob: -4.908751964569092
    5. '_of' → logprob: -6.033751964569092
    6. '   ' → logprob: -7.158751964569092
    7. '       ' → logprob: -9.15875244140625
    8. '```' → logprob: -10.03375244140625
    9. '    ' → logprob: -10.28375244140625
    10. '>' → logprob: -10.28375244140625

Token 506: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.009097140282392502
    2. 'bounds' → logprob: -4.759097099304199
    3. 'prog' → logprob: -8.1340970993042
    4. 'bound' → logprob: -9.2590970993042
    5. 'program' → logprob: -10.3840970993042
    6. ' range' → logprob: -10.5090970993042
    7. 'index' → logprob: -11.0090970993042
    8. '[' → logprob: -11.6340970993042
    9. 'lines' → logprob: -12.5090970993042
    10. 'N' → logprob: -13.2590970993042

Token 507: ',' (ID: 11)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.7715708613395691
    2. ':
' → logprob: -1.0215709209442139
    3. ':' → logprob: -1.8965709209442139
    4. '       ' → logprob: -4.146570682525635
    5. ',' → logprob: -5.146570682525635
    6. ':return' → logprob: -6.396570682525635
    7. ' or' → logprob: -6.646570682525635
    8. '               ' → logprob: -6.896570682525635
    9. '):
' → logprob: -7.896570682525635
    10. '{
' → logprob: -8.396571159362793

Token 508: ' means' (ID: 4748)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.05392412096261978
    2. ' return' → logprob: -3.928924083709717
    3. 'break' → logprob: -3.928924083709717
    4. '           ' → logprob: -4.678924083709717
    5. '       ' → logprob: -5.678924083709717
    6. ' break' → logprob: -7.928924083709717
    7. '#' → logprob: -9.553924560546875
    8. '   ' → logprob: -11.678924560546875
    9. '               ' → logprob: -11.928924560546875
    10. ' ' → logprob: -12.553924560546875

Token 509: ' out' (ID: 842)
  Prédit: 'program'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'program' → logprob: -0.7770682573318481
    2. 'HAL' → logprob: -2.0270681381225586
    3. 'halt' → logprob: -2.0270681381225586
    4. 'return' → logprob: -2.5270681381225586
    5. ' program' → logprob: -2.6520681381225586
    6. 'break' → logprob: -3.2770681381225586
    7. ' HAL' → logprob: -3.9020681381225586
    8. '#' → logprob: -4.277068138122559
    9. 'termination' → logprob: -4.777068138122559
    10. '"H' → logprob: -4.902068138122559

Token 510: ' of' (ID: 328)
  Prédit: 'of'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'of' → logprob: -0.015753842890262604
    2. ' of' → logprob: -4.265753746032715
    3. '_of' → logprob: -7.265753746032715
    4. '       ' → logprob: -8.515753746032715
    5. '=' → logprob: -9.140753746032715
    6. 'return' → logprob: -9.140753746032715
    7. '   ' → logprob: -9.265753746032715
    8. '#' → logprob: -9.640753746032715
    9. 'Of' → logprob: -9.765753746032715
    10. ')' → logprob: -10.015753746032715

Token 511: ' program' (ID: 2193)
  Prédit: 'program'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'program' → logprob: -0.20522554218769073
    2. 'bounds' → logprob: -1.9552255868911743
    3. 'range' → logprob: -3.2052254676818848
    4. 'prog' → logprob: -6.330225467681885
    5. 'bound' → logprob: -7.080225467681885
    6. 'index' → logprob: -7.830225467681885
    7. 'execution' → logprob: -8.955225944519043
    8. 'exec' → logprob: -9.455225944519043
    9. 'instructions' → logprob: -9.955225944519043
    10. 'lines' → logprob: -10.455225944519043

Token 512: ',' (ID: 11)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5563666224479675
    2. '           ' → logprob: -2.0563666820526123
    3. 'break' → logprob: -2.1813666820526123
    4. 'return' → logprob: -2.4313666820526123
    5. ')' → logprob: -3.6813666820526123
    6. ',' → logprob: -3.8063666820526123
    7. '   ' → logprob: -4.806366443634033
    8. '
' → logprob: -4.806366443634033
    9. ')
' → logprob: -4.931366443634033
    10. '```' → logprob: -5.056366443634033

Token 513: ' stop' (ID: 5666)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.03966059908270836
    2. '           ' → logprob: -3.664660692214966
    3. '       ' → logprob: -4.914660453796387
    4. 'break' → logprob: -5.539660453796387
    5. ' return' → logprob: -6.289660453796387
    6. '#' → logprob: -9.164660453796387
    7. '   ' → logprob: -10.914660453796387
    8. '               ' → logprob: -11.414660453796387
    9. ' break' → logprob: -11.789660453796387
    10. '	return' → logprob: -13.039660453796387

Token 514: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.3926158547401428
    2. '       ' → logprob: -1.142615795135498
    3. '        
' → logprob: -6.517615795135498
    4. ',' → logprob: -6.767615795135498
    5. '.' → logprob: -7.142615795135498
    6. '
' → logprob: -7.392615795135498
    7. ' and' → logprob: -8.267616271972656
    8. ')' → logprob: -8.642616271972656
    9. '   ' → logprob: -8.767616271972656
    10. '<|end|>' → logprob: -8.767616271972656

Token 515: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.1003081426024437
    2. '       ' → logprob: -2.3503081798553467
    3. 'return' → logprob: -10.600308418273926
    4. '   ' → logprob: -10.850308418273926
    5. '        
' → logprob: -11.350308418273926
    6. '               ' → logprob: -11.475308418273926
    7. 'break' → logprob: -12.100308418273926
    8. '```' → logprob: -12.225308418273926
    9. '
' → logprob: -12.475308418273926
    10. '		' → logprob: -12.725308418273926

Token 516: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.05948375165462494
    2. '           ' → logprob: -3.059483766555786
    3. 'break' → logprob: -4.559483528137207
    4. ' return' → logprob: -8.559483528137207
    5. '       ' → logprob: -8.684483528137207
    6. ' break' → logprob: -12.559483528137207
    7. '               ' → logprob: -12.809483528137207
    8. '   ' → logprob: -13.934483528137207
    9. '{return' → logprob: -14.809483528137207
    10. '```' → logprob: -15.059483528137207

Token 517: ' According' (ID: 16344)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.25394299626350403
    2. 'break' → logprob: -1.5039429664611816
    3. '       ' → logprob: -6.503942966461182
    4. '           ' → logprob: -7.628942966461182
    5. ' return' → logprob: -11.00394344329834
    6. ' break' → logprob: -12.25394344329834
    7. 'print' → logprob: -12.50394344329834
    8. '#' → logprob: -13.50394344329834
    9. '   ' → logprob: -14.37894344329834
    10. '```' → logprob: -15.12894344329834

Token 518: ' to' (ID: 316)
  Prédit: 'to'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'to' → logprob: -0.31794270873069763
    2. ' to' → logprob: -1.31794273853302
    3. '
' → logprob: -6.5679426193237305
    4. '#' → logprob: -6.6929426193237305
    5. 'return' → logprob: -7.4429426193237305
    6. '_to' → logprob: -7.9429426193237305
    7. ')' → logprob: -8.44294261932373
    8. ' return' → logprob: -8.56794261932373
    9. '       ' → logprob: -8.94294261932373
    10. '```' → logprob: -9.56794261932373

Token 519: ' problem' (ID: 4792)
  Prédit: 'problem'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'problem' → logprob: -0.1563597470521927
    2. 'the' → logprob: -2.6563596725463867
    3. 'code' → logprob: -3.9063596725463867
    4. 'spec' → logprob: -4.156359672546387
    5. 'comment' → logprob: -4.406359672546387
    6. 'comments' → logprob: -4.781359672546387
    7. '#' → logprob: -4.906359672546387
    8. ' problem' → logprob: -5.906359672546387
    9. 'previous' → logprob: -6.531359672546387
    10. 'description' → logprob: -6.531359672546387

Token 520: ':' (ID: 25)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.7398388385772705
    2. ':' → logprob: -1.1148388385772705
    3. '       ' → logprob: -2.9898388385772705
    4. '           ' → logprob: -3.2398388385772705
    5. ':
' → logprob: -3.6148388385772705
    6. ':return' → logprob: -3.6148388385772705
    7. 'return' → logprob: -3.9898388385772705
    8. ' return' → logprob: -5.239838600158691
    9. 'def' → logprob: -5.239838600158691
    10. '#' → logprob: -5.989838600158691

Token 521: ' jumping' (ID: 50586)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.0205531008541584
    2. ' return' → logprob: -4.520553112030029
    3. 'print' → logprob: -5.270553112030029
    4. 'break' → logprob: -5.770553112030029
    5. '#' → logprob: -7.770553112030029
    6. '       ' → logprob: -7.770553112030029
    7. '           ' → logprob: -8.270552635192871
    8. ' break' → logprob: -10.020552635192871
    9. '   ' → logprob: -10.520552635192871
    10. ' print' → logprob: -12.020552635192871

Token 522: ' to' (ID: 316)
  Prédit: 'out'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'out' → logprob: -0.06404274702072144
    2. 'outside' → logprob: -3.189042806625366
    3. ' out' → logprob: -4.814042568206787
    4. 'to' → logprob: -4.814042568206787
    5. 'off' → logprob: -6.689042568206787
    6. ' outside' → logprob: -6.814042568206787
    7. ' to' → logprob: -7.939042568206787
    8. 'from' → logprob: -8.189043045043945
    9. 'b' → logprob: -8.439043045043945
    10. 'break' → logprob: -8.814043045043945

Token 523: ' line' (ID: 2543)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.711869478225708
    2. 'non' → logprob: -1.336869478225708
    3. 'line' → logprob: -2.211869478225708
    4. 'pc' → logprob: -2.961869478225708
    5. 'invalid' → logprob: -3.086869478225708
    6. 'an' → logprob: -4.211869239807129
    7. 'out' → logprob: -5.211869239807129
    8. ' a' → logprob: -5.461869239807129
    9. 'undefined' → logprob: -5.711869239807129
    10. ' pc' → logprob: -6.211869239807129

Token 524: ' number' (ID: 2086)
  Prédit: 'out'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'out' → logprob: -1.6565983295440674
    2. 'number' → logprob: -1.9065983295440674
    3. 's' → logprob: -2.0315983295440674
    4. ' out' → logprob: -2.1565983295440674
    5. 'not' → logprob: -2.4065983295440674
    6. ' outside' → logprob: -3.1565983295440674
    7. '   ' → logprob: -3.1565983295440674
    8. ' not' → logprob: -3.6565983295440674
    9. 'outside' → logprob: -3.9065983295440674
    10. '-' → logprob: -4.031598091125488

Token 525: ' not' (ID: 625)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.8851925730705261
    2. 'out' → logprob: -1.885192632675171
    3. 'not' → logprob: -2.260192632675171
    4. 'outside' → logprob: -2.635192632675171
    5. '=' → logprob: -2.760192632675171
    6. ' not' → logprob: -3.635192632675171
    7. 'b' → logprob: -3.635192632675171
    8. ' outside' → logprob: -4.010192394256592
    9. ' beyond' → logprob: -4.260192394256592
    10. '#' → logprob: -4.385192394256592

Token 526: ' in' (ID: 306)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.01786660961806774
    2. 'existing' → logprob: -5.267866611480713
    3. 'present' → logprob: -5.392866611480713
    4. 'defined' → logprob: -5.892866611480713
    5. 'found' → logprob: -5.892866611480713
    6. ' in' → logprob: -6.767866611480713
    7. 'exist' → logprob: -8.017866134643555
    8. 'existent' → logprob: -8.267866134643555
    9. 'exists' → logprob: -9.267866134643555
    10. 'listed' → logprob: -9.392866134643555

Token 527: ' program' (ID: 2193)
  Prédit: 'lines'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'lines' → logprob: -0.5761972069740295
    2. 'line' → logprob: -0.8261972069740295
    3. 'prog' → logprob: -9.201197624206543
    4. ' lines' → logprob: -9.451197624206543
    5. 'program' → logprob: -9.826197624206543
    6. ' line' → logprob: -11.451197624206543
    7. 'code' → logprob: -12.951197624206543
    8. 'the' → logprob: -12.951197624206543
    9. 'list' → logprob: -13.451197624206543
    10. '```' → logprob: -13.576197624206543

Token 528: ' stops' (ID: 29924)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.4504992961883545
    2. '           ' → logprob: -1.3254992961883545
    3. ' is' → logprob: -3.9504992961883545
    4. 'return' → logprob: -4.325499534606934
    5. ' will' → logprob: -4.325499534606934
    6. ' or' → logprob: -4.575499534606934
    7. ':
' → logprob: -5.200499534606934
    8. ',' → logprob: -5.450499534606934
    9. 'is' → logprob: -6.075499534606934
    10. ')' → logprob: -6.075499534606934

Token 529: ' program' (ID: 2193)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.10781113803386688
    2. '           ' → logprob: -2.357811212539673
    3. '        
' → logprob: -5.732810974121094
    4. '.' → logprob: -5.982810974121094
    5. ',' → logprob: -7.857810974121094
    6. '               ' → logprob: -7.982810974121094
    7. '            
' → logprob: -8.857810974121094
    8. 'return' → logprob: -8.982810974121094
    9. '\n' → logprob: -9.232810974121094
    10. '    
' → logprob: -9.357810974121094

Token 530: '.
' (ID: 558)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.1143714040517807
    2. '           ' → logprob: -2.2393712997436523
    3. '        
' → logprob: -6.864371299743652
    4. ',' → logprob: -8.739371299743652
    5. '
' → logprob: -9.364371299743652
    6. '   ' → logprob: -9.489371299743652
    7. '<|end|>' → logprob: -10.614371299743652
    8. '            
' → logprob: -10.614371299743652
    9. '    
' → logprob: -11.239371299743652
    10. '               ' → logprob: -11.739371299743652

Token 531: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.07238643616437912
    2. '           ' → logprob: -2.8223865032196045
    3. 'return' → logprob: -4.822386264801025
    4. ' return' → logprob: -6.947386264801025
    5. 'break' → logprob: -7.322386264801025
    6. '   ' → logprob: -8.197386741638184
    7. '        
' → logprob: -8.822386741638184
    8. ' break' → logprob: -9.197386741638184
    9. '```' → logprob: -9.822386741638184
    10. '               ' → logprob: -11.322386741638184

Token 532: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.024216623976826668
    2. '       ' → logprob: -4.399216651916504
    3. 'break' → logprob: -5.149216651916504
    4. '           ' → logprob: -5.399216651916504
    5. ' return' → logprob: -6.649216651916504
    6. '   ' → logprob: -11.774216651916504
    7. ' break' → logprob: -12.274216651916504
    8. '	return' → logprob: -13.274216651916504
    9. '```' → logprob: -13.524216651916504
    10. '               ' → logprob: -13.774216651916504

Token 533: ' pc' (ID: 18736)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.22066201269626617
    2. 'break' → logprob: -1.720661997795105
    3. '       ' → logprob: -4.2206621170043945
    4. '           ' → logprob: -5.5956621170043945
    5. 'if' → logprob: -7.9706621170043945
    6. ' return' → logprob: -8.720662117004395
    7. '#' → logprob: -9.220662117004395
    8. ' break' → logprob: -10.595662117004395
    9. '   ' → logprob: -11.595662117004395
    10. '               ' → logprob: -12.845662117004395

Token 534: ' is' (ID: 382)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.35213154554367065
    2. '+=' → logprob: -1.2271316051483154
    3. ' =' → logprob: -6.477131366729736
    4. ' +=' → logprob: -6.852131366729736
    5. '=None' → logprob: -7.852131366729736
    6. '=-' → logprob: -8.102131843566895
    7. 'return' → logprob: -8.602131843566895
    8. 'break' → logprob: -10.102131843566895
    9. '
' → logprob: -10.602131843566895
    10. '=len' → logprob: -10.852131843566895

Token 535: ' index' (ID: 3472)
  Prédit: 'N'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.9686290621757507
    2. 'out' → logprob: -1.7186291217803955
    3. 'not' → logprob: -2.0936291217803955
    4. 'invalid' → logprob: -2.5936291217803955
    5. 'None' → logprob: -2.7186291217803955
    6. 'len' → logprob: -2.8436291217803955
    7. '-' → logprob: -3.0936291217803955
    8. 'pc' → logprob: -3.0936291217803955
    9. 'set' → logprob: -5.593628883361816
    10. 'b' → logprob: -5.843628883361816

Token 536: ' in' (ID: 306)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.02017827332019806
    2. '=' → logprob: -5.020178318023682
    3. ' if' → logprob: -5.520178318023682
    4. ' =' → logprob: -5.770178318023682
    5. ',' → logprob: -6.895178318023682
    6. 'if' → logprob: -7.020178318023682
    7. ')' → logprob: -7.395178318023682
    8. '.' → logprob: -7.645178318023682
    9. ':' → logprob: -7.895178318023682
    10. '        
' → logprob: -7.895178318023682

Token 537: ' prog' (ID: 46603)
  Prédit: 'prog'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prog' → logprob: -0.02663814276456833
    2. 'lines' → logprob: -3.6516380310058594
    3. 'program' → logprob: -8.65163803100586
    4. 'range' → logprob: -9.52663803100586
    5. ' prog' → logprob: -10.27663803100586
    6. '```' → logprob: -11.65163803100586
    7. ' lines' → logprob: -11.77663803100586
    8. '0' → logprob: -11.90163803100586
    9. '`' → logprob: -12.27663803100586
    10. 'line' → logprob: -12.52663803100586

Token 538: ' list' (ID: 1562)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.036532506346702576
    2. '           ' → logprob: -3.911532402038574
    3. '<|end|>' → logprob: -5.411532402038574
    4. ',' → logprob: -5.661532402038574
    5. '=' → logprob: -6.411532402038574
    6. ' =' → logprob: -6.536532402038574
    7. ')' → logprob: -6.911532402038574
    8. ' if' → logprob: -7.161532402038574
    9. '<|end|>' → logprob: -7.161532402038574
    10. '
' → logprob: -7.661532402038574

Token 539: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.030342984944581985
    2. '<|end|>' → logprob: -4.030343055725098
    3. ')' → logprob: -5.405343055725098
    4. '        
' → logprob: -6.280343055725098
    5. '<|end|>' → logprob: -6.280343055725098
    6. ',' → logprob: -7.030343055725098
    7. '           ' → logprob: -7.030343055725098
    8. '
' → logprob: -7.280343055725098
    9. '   ' → logprob: -8.405343055725098
    10. '.' → logprob: -8.655343055725098

Token 540: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0504281222820282
    2. '           ' → logprob: -3.0504281520843506
    3. '   ' → logprob: -7.1754279136657715
    4. '        
' → logprob: -8.42542839050293
    5. '\n' → logprob: -8.92542839050293
    6. 'return' → logprob: -8.92542839050293
    7. ',' → logprob: -9.55042839050293
    8. '	' → logprob: -9.67542839050293
    9. '<|end|>' → logprob: -9.80042839050293
    10. '```' → logprob: -10.17542839050293

Token 541: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.0399465411901474
    2. 'break' → logprob: -3.2899465560913086
    3. '       ' → logprob: -6.289946556091309
    4. ' return' → logprob: -10.414946556091309
    5. '           ' → logprob: -11.039946556091309
    6. ' break' → logprob: -13.914946556091309
    7. '   ' → logprob: -15.289946556091309
    8. '
' → logprob: -15.289946556091309
    9. '	return' → logprob: -15.414946556091309
    10. '{return' → logprob: -15.664946556091309

Token 542: ' vars' (ID: 36194)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.10497254878282547
    2. 'False' → logprob: -2.9799726009368896
    3. 'None' → logprob: -4.2299723625183105
    4. 'vars' → logprob: -4.3549723625183105
    5. '"' → logprob: -5.1049723625183105
    6. ' ' → logprob: -5.3549723625183105
    7. 'True' → logprob: -5.4799723625183105
    8. ''' → logprob: -6.2299723625183105
    9. '1' → logprob: -7.3549723625183105
    10. '(' → logprob: -7.3549723625183105

Token 543: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.00016885579680092633
    2. '_' → logprob: -10.000168800354004
    3. '_vals' → logprob: -10.125168800354004
    4. 'val' → logprob: -10.625168800354004
    5. '\' → logprob: -11.125168800354004
    6. '_var' → logprob: -11.875168800354004
    7. ')' → logprob: -12.000168800354004
    8. '```' → logprob: -12.375168800354004
    9. '}_' → logprob: -12.625168800354004
    10. '_vars' → logprob: -12.750168800354004

Token 544: '

' (ID: 279)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.16347496211528778
    2. 'line' → logprob: -1.9134749174118042
    3. '(line' → logprob: -6.663475036621094
    4. ' line' → logprob: -7.663475036621094
    5. '```' → logprob: -8.038475036621094
    6. '        
' → logprob: -8.413475036621094
    7. ',line' → logprob: -8.413475036621094
    8. '	line' → logprob: -8.913475036621094
    9. '   ' → logprob: -9.038475036621094
    10. ',' → logprob: -9.163475036621094

Token 545: '       ' (ID: 309)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.09442717581987381
    2. '       ' → logprob: -2.4694271087646484
    3. '```' → logprob: -5.719427108764648
    4. '(line' → logprob: -7.344427108764648
    5. '	line' → logprob: -8.094427108764648
    6. ' line' → logprob: -8.094427108764648
    7. '   ' → logprob: -8.469427108764648
    8. 'curr' → logprob: -8.719427108764648
    9. 'current' → logprob: -8.844427108764648
    10. '_line' → logprob: -9.094427108764648

Token 546: ' line' (ID: 2543)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'line' (adapté à ' line') → logprob: -0.00045962471631355584
    2. 'ln' → logprob: -7.875459671020508
    3. '(line' → logprob: -10.000459671020508
    4. '   ' → logprob: -11.500459671020508
    5. ' line' → logprob: -11.750459671020508
    6. 'lin' → logprob: -12.000459671020508
    7. '_,' → logprob: -12.250459671020508
    8. '_line' → logprob: -13.875459671020508
    9. '#line' → logprob: -14.375459671020508
    10. '	line' → logprob: -14.375459671020508

Token 547: '_no' (ID: 13575)
  Prédit: '_no'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_no' → logprob: -0.0008997925906442106
    2. ',_' → logprob: -7.375899791717529
    3. '=_' → logprob: -9.750900268554688
    4. '=' → logprob: -10.125900268554688
    5. 'no' → logprob: -10.125900268554688
    6. '_to' → logprob: -10.625900268554688
    7. ',' → logprob: -10.750900268554688
    8. 'No' → logprob: -11.250900268554688
    9. '_pc' → logprob: -11.250900268554688
    10. ',no' → logprob: -11.500900268554688

Token 548: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0005255113355815411
    2. ',args' → logprob: -8.12552547454834
    3. '=' → logprob: -9.25052547454834
    4. ',line' → logprob: -9.37552547454834
    5. ',c' → logprob: -11.00052547454834
    6. ',p' → logprob: -11.87552547454834
    7. ',index' → logprob: -12.25052547454834
    8. ',var' → logprob: -12.75052547454834
    9. ' ,' → logprob: -13.00052547454834
    10. ',int' → logprob: -13.37552547454834

Token 549: 'cmd' (ID: 18804)
  Prédit: 'cmd'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cmd' → logprob: -6.515961285913363e-05
    2. ' cmd' → logprob: -9.750064849853516
    3. 'prog' → logprob: -12.125064849853516
    4. 'command' → logprob: -13.750064849853516
    5. '(cmd' → logprob: -15.625064849853516
    6. '_cmd' → logprob: -16.000064849853516
    7. '	cmd' → logprob: -17.125064849853516
    8. 'opcode' → logprob: -17.875064849853516
    9. 'code' → logprob: -18.375064849853516
    10. '```' → logprob: -19.250064849853516

Token 550: ',args' (ID: 157312)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.14683294296264648
    2. ',' → logprob: -2.0218329429626465
    3. ',args' → logprob: -6.1468329429626465
    4. ',p' → logprob: -7.5218329429626465
    5. ',c' → logprob: -8.146833419799805
    6. ' =' → logprob: -8.396833419799805
    7. '=line' → logprob: -8.521833419799805
    8. ',e' → logprob: -9.271833419799805
    9. ',line' → logprob: -9.396833419799805
    10. ',var' → logprob: -9.646833419799805

Token 551: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.05220485478639603
    2. ' =' → logprob: -3.0522048473358154
    3. '=sys' → logprob: -6.3022050857543945
    4. '       ' → logprob: -7.4272050857543945
    5. '=line' → logprob: -7.8022050857543945
    6. '=
' → logprob: -8.302205085754395
    7. '=[' → logprob: -9.177205085754395
    8. '   ' → logprob: -9.427205085754395
    9. ')' → logprob: -9.552205085754395
    10. '=[]' → logprob: -9.927205085754395

Token 552: 'prog' (ID: 73910)
  Prédit: 'prog'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prog' → logprob: -9.491498531133402e-06
    2. ' prog' → logprob: -11.625009536743164
    3. 'pro' → logprob: -15.500009536743164
    4. '   ' → logprob: -15.875009536743164
    5. 'proj' → logprob: -16.625009536743164
    6. 'program' → logprob: -16.750009536743164
    7. 'proc' → logprob: -17.125009536743164
    8. 'prod' → logprob: -17.375009536743164
    9. 'prot' → logprob: -18.750009536743164
    10. '	pro' → logprob: -19.125009536743164

Token 553: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.00013405199570115656
    2. '=' → logprob: -9.250134468078613
    3. '   ' → logprob: -11.625134468078613
    4. ' =' → logprob: -11.875134468078613
    5. '       ' → logprob: -12.000134468078613
    6. '```' → logprob: -12.500134468078613
    7. '(pc' → logprob: -13.000134468078613
    8. ',' → logprob: -13.375134468078613
    9. '=[' → logprob: -13.375134468078613
    10. 'pc' → logprob: -13.750134468078613

Token 554: 'pc' (ID: 6344)
  Prédit: 'pc'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pc' → logprob: -0.0047271414659917355
    2. '[' → logprob: -5.379727363586426
    3. ' pc' → logprob: -9.754727363586426
    4. '(pc' → logprob: -10.254727363586426
    5. '   ' → logprob: -12.504727363586426
    6. '```' → logprob: -13.129727363586426
    7. '][' → logprob: -13.254727363586426
    8. '0' → logprob: -13.754727363586426
    9. '_pc' → logprob: -14.129727363586426
    10. '       ' → logprob: -14.379727363586426

Token 555: ']
' (ID: 1592)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0074335308745503426
    2. ']' → logprob: -5.3824334144592285
    3. '])' → logprob: -6.1324334144592285
    4. ')
' → logprob: -8.132433891296387
    5. '[' → logprob: -8.632433891296387
    6. ')[' → logprob: -10.132433891296387
    7. ' )' → logprob: -10.257433891296387
    8. ')]' → logprob: -10.632433891296387
    9. '   ' → logprob: -11.132433891296387
    10. '       ' → logprob: -11.382433891296387

Token 556: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0017173044616356492
    2. '<|end|>' → logprob: -7.1267170906066895
    3. '```' → logprob: -7.8767170906066895
    4. '   ' → logprob: -8.251717567443848
    5. 'if' → logprob: -8.876717567443848
    6. '        
' → logprob: -9.501717567443848
    7. ' if' → logprob: -10.751717567443848
    8. '<|end|>' → logprob: -11.751717567443848
    9. '    ' → logprob: -12.126717567443848
    10. 'pc' → logprob: -12.751717567443848

Token 557: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.03170428052544594
    2. '       ' → logprob: -3.5317041873931885
    3. 'pc' → logprob: -6.906704425811768
    4. ' if' → logprob: -7.281704425811768
    5. '   ' → logprob: -8.78170394897461
    6. '```' → logprob: -9.53170394897461
    7. 'next' → logprob: -11.40670394897461
    8. '        
' → logprob: -12.28170394897461
    9. 'def' → logprob: -12.78170394897461
    10. '	if' → logprob: -12.90670394897461

Token 558: ' cmd' (ID: 11704)
  Prédit: 'cmd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cmd' → logprob: -6.2729995988775045e-06
    2. ' cmd' → logprob: -12.000006675720215
    3. '	cmd' → logprob: -17.6250057220459
    4. '    ' → logprob: -19.1250057220459
    5. '(cmd' → logprob: -19.6250057220459
    6. '   ' → logprob: -19.6250057220459
    7. '  ' → logprob: -20.6250057220459
    8. 'command' → logprob: -21.2500057220459
    9. '       ' → logprob: -21.7500057220459
    10. '     ' → logprob: -21.7500057220459

Token 559: '=='' (ID: 20651)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.04662776365876198
    2. ' ==' → logprob: -3.1716277599334717
    3. '=='' → logprob: -6.171627998352051
    4. '=="' → logprob: -6.671627998352051
    5. ''' → logprob: -9.29662799835205
    6. '[' → logprob: -9.54662799835205
    7. '=' → logprob: -10.04662799835205
    8. '"' → logprob: -11.29662799835205
    9. '===' → logprob: -11.54662799835205
    10. '==
' → logprob: -11.54662799835205

Token 560: 'HAL' (ID: 61281)
  Prédit: 'SET'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'SET' → logprob: -0.637402355670929
    2. 'HAL' → logprob: -0.762402355670929
    3. 'ADD' → logprob: -5.512402534484863
    4. 'IF' → logprob: -7.387402534484863
    5. ''' → logprob: -9.887402534484863
    6. 'H' → logprob: -10.762402534484863
    7. 'SUB' → logprob: -11.637402534484863
    8. 'HL' → logprob: -11.637402534484863
    9. '"' → logprob: -11.637402534484863
    10. ''H' → logprob: -12.637402534484863

Token 561: 'T' (ID: 51)
  Prédit: 'T'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'T' → logprob: 0.0
    2. '_T' → logprob: -16.875
    3. ' T' → logprob: -17.75
    4. 'Т' → logprob: -17.875
    5. '(T' → logprob: -19.125
    6. ''T' → logprob: -19.375
    7. '   ' → logprob: -19.375
    8. '	T' → logprob: -19.5
    9. '[T' → logprob: -19.75
    10. 'Ｔ' → logprob: -20.125

Token 562: '':
' (ID: 7669)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.08417319506406784
    2. ':
' → logprob: -2.5841732025146484
    3. '):' → logprob: -5.834173202514648
    4. '):
' → logprob: -7.084173202514648
    5. ':return' → logprob: -7.084173202514648
    6. ')' → logprob: -7.834173202514648
    7. '       ' → logprob: -8.709173202514648
    8. '           ' → logprob: -9.709173202514648
    9. '   ' → logprob: -11.584173202514648
    10. ':
' → logprob: -12.334173202514648

Token 563: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.008095115423202515
    2. 'return' → logprob: -4.8830952644348145
    3. ' return' → logprob: -8.008094787597656
    4. '```' → logprob: -9.383094787597656
    5. '       ' → logprob: -10.883094787597656
    6. 'break' → logprob: -11.633094787597656
    7. '		' → logprob: -12.133094787597656
    8. '               ' → logprob: -12.133094787597656
    9. 'pc' → logprob: -12.258094787597656
    10. '   ' → logprob: -12.383094787597656

Token 564: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.31445032358169556
    2. '           ' → logprob: -1.3144502639770508
    3. '       ' → logprob: -7.064450263977051
    4. ' return' → logprob: -8.06445026397705
    5. 'break' → logprob: -11.56445026397705
    6. '   ' → logprob: -12.56445026397705
    7. '               ' → logprob: -12.68945026397705
    8. '		' → logprob: -14.43945026397705
    9. '{return' → logprob: -14.56445026397705
    10. '          ' → logprob: -14.81445026397705

Token 565: ' vars' (ID: 36194)
  Prédit: 'vars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'vars' → logprob: -9.9728669738397e-05
    2. 'variables' → logprob: -9.625100135803223
    3. ' vars' → logprob: -10.375100135803223
    4. 'vals' → logprob: -13.750100135803223
    5. '(vars' → logprob: -14.125100135803223
    6. 'var' → logprob: -14.875100135803223
    7. ' variables' → logprob: -16.500099182128906
    8. '{' → logprob: -17.125099182128906
    9. '_vars' → logprob: -17.375099182128906
    10. 'values' → logprob: -17.750099182128906

Token 566: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.0001805377542041242
    2. 'val' → logprob: -8.6251802444458
    3. '_var' → logprob: -14.7501802444458
    4. '_vars' → logprob: -15.5001802444458
    5. 'Val' → logprob: -15.6251802444458
    6. '_vals' → logprob: -16.125181198120117
    7. '_' → logprob: -16.750181198120117
    8. '	val' → logprob: -16.875181198120117
    9. ' val' → logprob: -17.250181198120117
    10. '[val' → logprob: -17.750181198120117

Token 567: '

' (ID: 279)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0015569974202662706
    2. '        
' → logprob: -7.126556873321533
    3. '
' → logprob: -8.126557350158691
    4. 'elif' → logprob: -8.626557350158691
    5. '<|end|>' → logprob: -8.626557350158691
    6. '    
' → logprob: -11.001557350158691
    7. '```' → logprob: -11.251557350158691
    8. '   ' → logprob: -11.501557350158691
    9. 'pc' → logprob: -11.626557350158691
    10. '<|end|>' → logprob: -12.126557350158691

Token 568: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.16333554685115814
    2. 'elif' → logprob: -2.0383355617523193
    3. 'if' → logprob: -3.9133355617523193
    4. '```' → logprob: -8.538335800170898
    5. 'pc' → logprob: -9.663335800170898
    6. ' if' → logprob: -9.788335800170898
    7. '        
' → logprob: -9.913335800170898
    8. ' elif' → logprob: -10.163335800170898
    9. '   ' → logprob: -10.163335800170898
    10. '\t' → logprob: -12.038335800170898

Token 569: ' jump' (ID: 13843)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.08032379299402237
    2. '       ' → logprob: -2.5803236961364746
    3. 'def' → logprob: -7.080323696136475
    4. ' if' → logprob: -7.955323696136475
    5. '   ' → logprob: -9.205324172973633
    6. 'elif' → logprob: -9.205324172973633
    7. '```' → logprob: -10.830324172973633
    8. '        
' → logprob: -11.830324172973633
    9. 'next' → logprob: -12.455324172973633
    10. '
' → logprob: -13.455324172973633

Token 570: '_to' (ID: 5089)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.10605372488498688
    2. '_line' → logprob: -2.8560538291931152
    3. '_target' → logprob: -3.9810538291931152
    4. '=line' → logprob: -4.731053829193115
    5. ' =' → logprob: -5.481053829193115
    6. '_idx' → logprob: -5.731053829193115
    7. '_dest' → logprob: -6.231053829193115
    8. '_to' → logprob: -6.481053829193115
    9. 'if' → logprob: -7.231053829193115
    10. '=int' → logprob: -7.606053829193115

Token 571: '_next' (ID: 25436)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.7303361892700195
    2. '=line' → logprob: -0.9803361892700195
    3. '_line' → logprob: -2.1053361892700195
    4. ' =' → logprob: -3.9803361892700195
    5. '=None' → logprob: -7.1053361892700195
    6. 'line' → logprob: -7.2303361892700195
    7. '=args' → logprob: -7.6053361892700195
    8. '_idx' → logprob: -9.10533618927002
    9. '=_' → logprob: -9.23033618927002
    10. '=int' → logprob: -9.35533618927002

Token 572: '=True' (ID: 7827)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.0050443559885025024
    2. ' =' → logprob: -5.380044460296631
    3. '_pc' → logprob: -8.005043983459473
    4. 'pc' → logprob: -10.630043983459473
    5. '=True' → logprob: -10.755043983459473
    6. '=line' → logprob: -11.005043983459473
    7. '=False' → logprob: -11.880043983459473
    8. '=_' → logprob: -12.130043983459473
    9. '_' → logprob: -12.380043983459473
    10. '_=' → logprob: -12.880043983459473

Token 573: '

' (ID: 279)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.044699620455503464
    2. 'if' → logprob: -3.2946996688842773
    3. ' if' → logprob: -5.419699668884277
    4. '   ' → logprob: -6.669699668884277
    5. '        
' → logprob: -8.294699668884277
    6. '```' → logprob: -8.294699668884277
    7. '<|end|>' → logprob: -8.794699668884277
    8. 'token' → logprob: -9.294699668884277
    9. '	if' → logprob: -10.669699668884277
    10. ',' → logprob: -10.919699668884277

Token 574: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.650340735912323
    2. 'if' → logprob: -0.775340735912323
    3. ' if' → logprob: -4.525340557098389
    4. '   ' → logprob: -5.525340557098389
    5. '```' → logprob: -6.025340557098389
    6. '        
' → logprob: -9.025341033935547
    7. 'token' → logprob: -10.650341033935547
    8. 'elif' → logprob: -10.775341033935547
    9. 'value' → logprob: -10.900341033935547
    10. 'var' → logprob: -11.025341033935547

Token 575: ' def' (ID: 1056)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.002243154216557741
    2. '       ' → logprob: -6.2522430419921875
    3. 'def' (adapté à ' def') → logprob: -8.127243041992188
    4. ' if' → logprob: -11.502243041992188
    5. '   ' → logprob: -12.252243041992188
    6. '```' → logprob: -12.877243041992188
    7. 'for' → logprob: -13.627243041992188
    8. '        
' → logprob: -16.127243041992188
    9. '           ' → logprob: -16.252243041992188
    10. '	if' → logprob: -16.377243041992188

Token 576: ' get' (ID: 717)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.116114042699337
    2. ' get' → logprob: -2.3661141395568848
    3. 'val' → logprob: -5.116114139556885
    4. 'value' → logprob: -5.116114139556885
    5. 'eval' → logprob: -6.366114139556885
    6. ' val' → logprob: -7.616114139556885
    7. 'resolve' → logprob: -8.116113662719727
    8. ' value' → logprob: -8.491113662719727
    9. ' eval' → logprob: -8.616113662719727
    10. 'safe' → logprob: -9.116113662719727

Token 577: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.33173152804374695
    2. '_value' → logprob: -1.3317315578460693
    3. 'val' → logprob: -4.33173131942749
    4. '_arg' → logprob: -5.83173131942749
    5. 'value' → logprob: -6.20673131942749
    6. 'arg' → logprob: -9.456731796264648
    7. '_var' → logprob: -9.456731796264648
    8. 'Val' → logprob: -10.706731796264648
    9. 'Value' → logprob: -11.456731796264648
    10. '_operand' → logprob: -11.706731796264648

Token 578: '(x' (ID: 4061)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0906239002943039
    2. '(arg' → logprob: -3.2156238555908203
    3. '(args' → logprob: -3.8406238555908203
    4. '(a' → logprob: -4.59062385559082
    5. '(token' → logprob: -4.96562385559082
    6. ' (' → logprob: -6.34062385559082
    7. '(s' → logprob: -6.46562385559082
    8. '(var' → logprob: -6.46562385559082
    9. '(name' → logprob: -6.84062385559082
    10. '(x' → logprob: -7.96562385559082

Token 579: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.023387916386127472
    2. '):
' → logprob: -3.898387908935547
    3. '(x' → logprob: -6.148387908935547
    4. ')' → logprob: -7.773387908935547
    5. '(' → logprob: -9.023387908935547
    6. ' ):' → logprob: -9.523387908935547
    7. '(v' → logprob: -10.523387908935547
    8. '   ' → logprob: -11.023387908935547
    9. '(var' → logprob: -11.148387908935547
    10. ':' → logprob: -12.273387908935547

Token 580: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.9151630401611328
    2. ' if' → logprob: -1.7901630401611328
    3. 'if' → logprob: -1.7901630401611328
    4. '       ' → logprob: -2.540163040161133
    5. ' 
' → logprob: -2.915163040161133
    6. 'return' → logprob: -3.915163040161133
    7. 'x' → logprob: -4.165163040161133
    8. '   ' → logprob: -4.165163040161133
    9. ' return' → logprob: -4.165163040161133
    10. '
' → logprob: -4.415163040161133

Token 581: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.01985926739871502
    2. ' if' → logprob: -4.019859313964844
    3. '           ' → logprob: -6.519859313964844
    4. '       ' → logprob: -8.769859313964844
    5. '               ' → logprob: -9.894859313964844
    6. '   ' → logprob: -11.269859313964844
    7. 'return' → logprob: -11.519859313964844
    8. '```' → logprob: -12.644859313964844
    9. 'try' → logprob: -13.894859313964844
    10. '
' → logprob: -14.644859313964844

Token 582: ' x' (ID: 1215)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -0.029966386035084724
    2. 'len' → logprob: -3.654966354370117
    3. ' x' → logprob: -5.654966354370117
    4. ' len' → logprob: -8.779966354370117
    5. '(len' → logprob: -12.904966354370117
    6. '   ' → logprob: -13.654966354370117
    7. ' ' → logprob: -14.154966354370117
    8. '(x' → logprob: -14.654966354370117
    9. '  ' → logprob: -15.154966354370117
    10. '	x' → logprob: -15.779966354370117

Token 583: '.is' (ID: 3109)
  Prédit: '.is'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.is' → logprob: -0.03093842603266239
    2. ' in' → logprob: -4.030938625335693
    3. '.' → logprob: -4.780938625335693
    4. '[' → logprob: -5.780938625335693
    5. 'isdigit' → logprob: -7.655938625335693
    6. '==' → logprob: -7.905938625335693
    7. 'is' → logprob: -8.780938148498535
    8. ' ==' → logprob: -9.905938148498535
    9. '.startswith' → logprob: -9.905938148498535
    10. ' .' → logprob: -10.280938148498535

Token 584: 'alpha' (ID: 15453)
  Prédit: 'alpha'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'alpha' → logprob: -4.127333340875339e-06
    2. '(alpha' → logprob: -13.625003814697266
    3. ' alpha' → logprob: -13.875003814697266
    4. 'a' → logprob: -14.125003814697266
    5. 'digit' → logprob: -14.750003814697266
    6. '_alpha' → logprob: -15.000003814697266
    7. 'lower' → logprob: -15.375003814697266
    8. 'al' → logprob: -15.750003814697266
    9. '	alpha' → logprob: -16.250003814697266
    10. 'alphabet' → logprob: -17.375003814697266

Token 585: '():
' (ID: 8595)
  Prédit: '():
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():
' → logprob: -0.0603969469666481
    2. '():' → logprob: -3.435396909713745
    3. '()' → logprob: -4.435397148132324
    4. '):
' → logprob: -4.560397148132324
    5. '()):
' → logprob: -5.810397148132324
    6. '):' → logprob: -7.060397148132324
    7. ':
' → logprob: -9.310397148132324
    8. 'return' → logprob: -10.310397148132324
    9. '():
' → logprob: -10.560397148132324
    10. '():

' → logprob: -10.685397148132324

Token 586: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.09093929082155228
    2. 'return' → logprob: -2.5909392833709717
    3. ' return' → logprob: -4.715939521789551
    4. '           ' → logprob: -6.090939521789551
    5. '   ' → logprob: -8.09093952178955
    6. '       ' → logprob: -8.21593952178955
    7. '	return' → logprob: -10.34093952178955
    8. '                   ' → logprob: -10.84093952178955
    9. '```' → logprob: -10.96593952178955
    10. '                
' → logprob: -11.21593952178955

Token 587: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.01215923111885786
    2. ' return' → logprob: -4.51215934753418
    3. '               ' → logprob: -7.01215934753418
    4. '           ' → logprob: -8.51215934753418
    5. '   ' → logprob: -12.38715934753418
    6. '	return' → logprob: -12.76215934753418
    7. '       ' → logprob: -14.38715934753418
    8. ' ' → logprob: -14.63715934753418
    9. ' ' → logprob: -15.51215934753418
    10. '                   ' → logprob: -15.63715934753418

Token 588: ' vars' (ID: 36194)
  Prédit: 'vars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'vars' → logprob: -2.999452772201039e-05
    2. ' vars' → logprob: -10.625029563903809
    3. 'variables' → logprob: -12.250029563903809
    4. 'var' → logprob: -14.375029563903809
    5. 'vals' → logprob: -15.750029563903809
    6. '(vars' → logprob: -16.500030517578125
    7. '           ' → logprob: -18.250030517578125
    8. '0' → logprob: -19.125030517578125
    9. '```' → logprob: -20.125030517578125
    10. 'val' → logprob: -20.125030517578125

Token 589: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -6.301394023466855e-05
    2. '[val' → logprob: -10.000062942504883
    3. 'val' → logprob: -11.625062942504883
    4. '[' → logprob: -12.750062942504883
    5. '_var' → logprob: -12.875062942504883
    6. '_vars' → logprob: -13.625062942504883
    7. '[_' → logprob: -14.750062942504883
    8. '_vals' → logprob: -14.875062942504883
    9. 'Val' → logprob: -15.250062942504883
    10. '```' → logprob: -15.500062942504883

Token 590: '[x' (ID: 17295)
  Prédit: '[x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[x' → logprob: -0.0011578429257497191
    2. '[' → logprob: -6.876157760620117
    3. 'x' → logprob: -9.126157760620117
    4. '(x' → logprob: -11.501157760620117
    5. ' [' → logprob: -12.751157760620117
    6. '[
' → logprob: -13.251157760620117
    7. '```' → logprob: -14.626157760620117
    8. '{x' → logprob: -15.376157760620117
    9. '   ' → logprob: -15.501157760620117
    10. ' x' → logprob: -15.876157760620117

Token 591: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.10061443597078323
    2. ']
' → logprob: -2.350614547729492
    3. ')' → logprob: -8.225614547729492
    4. '])' → logprob: -9.975614547729492
    5. ' ]' → logprob: -10.475614547729492
    6. ')
' → logprob: -10.725614547729492
    7. ']

' → logprob: -11.725614547729492
    8. ' ]
' → logprob: -11.850614547729492
    9. '])
' → logprob: -11.975614547729492
    10. ')]' → logprob: -12.350614547729492

Token 592: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.035069938749074936
    2. '       ' → logprob: -3.5350699424743652
    3. 'else' → logprob: -6.535069942474365
    4. '<|end|>' → logprob: -6.785069942474365
    5. ' else' → logprob: -6.910069942474365
    6. '               ' → logprob: -7.285069942474365
    7. 'return' → logprob: -8.660069465637207
    8. '            
' → logprob: -8.785069465637207
    9. '```' → logprob: -8.785069465637207
    10. '   ' → logprob: -9.410069465637207

Token 593: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.002617870457470417
    2. ' else' → logprob: -6.877617835998535
    3. '       ' → logprob: -7.127617835998535
    4. 'return' → logprob: -8.002617835998535
    5. '           ' → logprob: -8.127617835998535
    6. '
' → logprob: -9.377617835998535
    7. 'elif' → logprob: -9.752617835998535
    8. '               ' → logprob: -13.127617835998535
    9. '   ' → logprob: -13.252617835998535
    10. 'if' → logprob: -14.002617835998535

Token 594: ':
' (ID: 734)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.3348444700241089
    2. '               ' → logprob: -1.4598444700241089
    3. 'int' → logprob: -3.2098445892333984
    4. ' return' → logprob: -4.709844589233398
    5. '           ' → logprob: -7.084844589233398
    6. ':return' → logprob: -7.334844589233398
    7. ':
' → logprob: -7.709844589233398
    8. '   ' → logprob: -8.709844589233398
    9. ':int' → logprob: -8.709844589233398
    10. ':' → logprob: -8.709844589233398

Token 595: '               ' (ID: 506)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.11089272052049637
    2. 'int' → logprob: -2.3608927726745605
    3. '               ' → logprob: -4.6108927726745605
    4. ' return' → logprob: -7.3608927726745605
    5. '           ' → logprob: -10.735892295837402
    6. ' int' → logprob: -12.235892295837402
    7. '	return' → logprob: -12.235892295837402
    8. '   ' → logprob: -12.485892295837402
    9. '=int' → logprob: -12.860892295837402
    10. '```' → logprob: -12.985892295837402

Token 596: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.0032534082420170307
    2. 'int' → logprob: -5.75325345993042
    3. ' return' → logprob: -9.503252983093262
    4. '
' → logprob: -14.128252983093262
    5. '               ' → logprob: -15.128252983093262
    6. '           ' → logprob: -17.628253936767578
    7. '{return' → logprob: -18.128253936767578
    8. '                   ' → logprob: -18.253253936767578
    9. '```' → logprob: -18.878253936767578
    10. '   ' → logprob: -19.253253936767578

Token 597: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -4.320199877838604e-07
    2. ' int' → logprob: -15.0
    3. '(int' → logprob: -22.0
    4. '<int' → logprob: -22.375
    5. '[int' → logprob: -22.75
    6. '=int' → logprob: -24.875
    7. '	int' → logprob: -24.875
    8. ':int' → logprob: -25.125
    9. 'ints' → logprob: -25.75
    10. '   ' → logprob: -26.25

Token 598: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.002818789565935731
    2. '(' → logprob: -5.877818584442139
    3. 'x' → logprob: -11.502819061279297
    4. ' (' → logprob: -13.252819061279297
    5. '(
' → logprob: -13.877819061279297
    6. ')' → logprob: -13.877819061279297
    7. ')x' → logprob: -16.502819061279297
    8. ')(' → logprob: -17.127819061279297
    9. '()' → logprob: -17.377819061279297
    10. ' ' → logprob: -18.502819061279297

Token 599: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.14361701905727386
    2. '(x' → logprob: -2.0186169147491455
    3. '(' → logprob: -7.893617153167725
    4. ')x' → logprob: -8.268616676330566
    5. 'x' → logprob: -9.268616676330566
    6. '())' → logprob: -9.393616676330566
    7. '[x' → logprob: -9.643616676330566
    8. '))' → logprob: -11.143616676330566
    9. ')return' → logprob: -11.268616676330566
    10. '[' → logprob: -11.393616676330566

Token 600: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.10405898839235306
    2. '<|end|>' → logprob: -3.2290589809417725
    3. '        
' → logprob: -4.229059219360352
    4. ' 
' → logprob: -5.104059219360352
    5. ' ' → logprob: -5.229059219360352
    6. '  
' → logprob: -5.354059219360352
    7. ')' → logprob: -5.354059219360352
    8. ' if' → logprob: -5.854059219360352
    9. '   ' → logprob: -5.854059219360352
    10. '
' → logprob: -5.979059219360352

Token 601: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.6485586762428284
    2. '       ' → logprob: -0.7735586762428284
    3. ' if' → logprob: -4.523558616638184
    4. 'next' → logprob: -6.648558616638184
    5. '```' → logprob: -6.898558616638184
    6. 'value' → logprob: -7.648558616638184
    7. 'var' → logprob: -8.023558616638184
    8. 'prev' → logprob: -8.273558616638184
    9. '<|end|>' → logprob: -8.523558616638184
    10. 'If' → logprob: -9.023558616638184

Token 602: ' cmd' (ID: 11704)
  Prédit: 'cmd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cmd' → logprob: -0.004078758880496025
    2. ' cmd' → logprob: -5.5040788650512695
    3. '	cmd' → logprob: -15.87907886505127
    4. '  ' → logprob: -16.629077911376953
    5. '   ' → logprob: -17.129077911376953
    6. '(cmd' → logprob: -17.254077911376953
    7. ' ' → logprob: -18.254077911376953
    8. '    ' → logprob: -18.629077911376953
    9. 'False' → logprob: -19.754077911376953
    10. 'command' → logprob: -20.004077911376953

Token 603: '=='' (ID: 20651)
  Prédit: '==''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=='' → logprob: -0.5572969317436218
    2. '==' → logprob: -0.9322969317436218
    3. ' ==' → logprob: -3.4322969913482666
    4. '=="' → logprob: -7.1822967529296875
    5. '[' → logprob: -8.432296752929688
    6. ' =='' → logprob: -9.182296752929688
    7. '==='' → logprob: -9.307296752929688
    8. '==
' → logprob: -10.057296752929688
    9. ''' → logprob: -10.307296752929688
    10. ' in' → logprob: -12.057296752929688

Token 604: 'ADD' (ID: 29357)
  Prédit: 'SET'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'SET' → logprob: -0.25687867403030396
    2. 'ADD' → logprob: -1.5068786144256592
    3. ''' → logprob: -5.381878852844238
    4. '"' → logprob: -8.131878852844238
    5. ''S' → logprob: -10.381878852844238
    6. 'SUB' → logprob: -12.631878852844238
    7. '`' → logprob: -13.131878852844238
    8. ' SET' → logprob: -13.256878852844238
    9. 'GET' → logprob: -14.006878852844238
    10. 'IF' → logprob: -14.381878852844238

Token 605: '':
' (ID: 7669)
  Prédit: '':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':' → logprob: -0.6105111837387085
    2. ' '' → logprob: -1.6105111837387085
    3. '':
' → logprob: -1.6105111837387085
    4. ' ':' → logprob: -3.235511302947998
    5. ''' → logprob: -4.110511302947998
    6. ' var' → logprob: -8.23551082611084
    7. '':
' → logprob: -8.48551082611084
    8. 'var' → logprob: -8.61051082611084
    9. '('' → logprob: -8.61051082611084
    10. '(':' → logprob: -8.98551082611084

Token 606: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.12745621800422668
    2. ' var' → logprob: -2.8774561882019043
    3. 'var' → logprob: -3.7524561882019043
    4. 'v' → logprob: -4.127456188201904
    5. ' v' → logprob: -4.252456188201904
    6. ' vars' → logprob: -5.627456188201904
    7. 'vars' → logprob: -6.627456188201904
    8. '```' → logprob: -7.002456188201904
    9. '       ' → logprob: -7.127456188201904
    10. '   ' → logprob: -8.002456665039062

Token 607: ' var' (ID: 972)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' → logprob: -1.027930736541748
    2. 'v' → logprob: -1.402930736541748
    3. 'dest' → logprob: -1.652930736541748
    4. 'vars' → logprob: -2.527930736541748
    5. 'a' → logprob: -2.902930736541748
    6. 'dst' → logprob: -3.027930736541748
    7. 'target' → logprob: -4.402930736541748
    8. 'r' → logprob: -6.402930736541748
    9. 'var' (adapté à ' var') → logprob: -6.652930736541748
    10. 'result' → logprob: -6.777930736541748

Token 608: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.03180186077952385
    2. 'args' → logprob: -4.656801700592041
    3. '[' → logprob: -4.781801700592041
    4. '_args' → logprob: -4.781801700592041
    5. '_val' → logprob: -6.406801700592041
    6. '_' → logprob: -7.156801700592041
    7. ' =' → logprob: -7.406801700592041
    8. 'val' → logprob: -7.781801700592041
    9. '=' → logprob: -8.4068021774292
    10. '_vals' → logprob: -8.9068021774292

Token 609: '=args' (ID: 70251)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.24684002995491028
    2. '=' → logprob: -2.621840000152588
    3. ',val' → logprob: -3.371840000152588
    4. ' =' → logprob: -3.621840000152588
    5. ',var' → logprob: -3.621840000152588
    6. ']' → logprob: -4.371840000152588
    7. 'var' → logprob: -4.871840000152588
    8. ']=' → logprob: -4.996840000152588
    9. '_val' → logprob: -5.121840000152588
    10. ',args' → logprob: -5.496840000152588

Token 610: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0009370702900923789
    2. '0' → logprob: -7.250936985015869
    3. '1' → logprob: -8.500937461853027
    4. ' [' → logprob: -12.625937461853027
    5. ' ' → logprob: -12.625937461853027
    6. '```' → logprob: -12.625937461853027
    7. ',' → logprob: -13.250937461853027
    8. '<|end|>' → logprob: -13.625937461853027
    9. 'def' → logprob: -13.875937461853027
    10. '(' → logprob: -13.875937461853027

Token 611: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -4.453737710718997e-05
    2. '1' → logprob: -10.125044822692871
    3. ' ' → logprob: -12.750044822692871
    4. '[' → logprob: -13.625044822692871
    5. '   ' → logprob: -16.250043869018555
    6. '۰' → logprob: -17.187543869018555
    7. '
' → logprob: -17.500043869018555
    8. '```' → logprob: -17.687543869018555
    9. ')' → logprob: -18.437543869018555
    10. '2' → logprob: -18.500043869018555

Token 612: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.047274377197027206
    2. ']
' → logprob: -3.172274351119995
    3. ' ]' → logprob: -6.297274589538574
    4. ',' → logprob: -6.547274589538574
    5. '],' → logprob: -7.797274589538574
    6. ' ]
' → logprob: -8.422274589538574
    7. ']
' → logprob: -9.922274589538574
    8. 'var' → logprob: -10.172274589538574
    9. ']

' → logprob: -10.172274589538574
    10. '
' → logprob: -10.297274589538574

Token 613: '           ' (ID: 352)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 614: ' var' (ID: 972)
  Prédit: 'var'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'var' (adapté à ' var') → logprob: -0.017727017402648926
    2. 'val' → logprob: -4.142726898193359
    3. 'v' → logprob: -6.517726898193359
    4. 'a' → logprob: -9.51772689819336
    5. 'op' → logprob: -10.01772689819336
    6. 'x' → logprob: -10.39272689819336
    7. ' var' → logprob: -11.26772689819336
    8. 'arg' → logprob: -11.51772689819336
    9. 'try' → logprob: -11.64272689819336
    10. 'if' → logprob: -11.89272689819336

Token 615: '2' (ID: 17)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.021346576511859894
    2. '[' → logprob: -4.021346569061279
    3. '2' → logprob: -5.771346569061279
    4. 's' → logprob: -10.021347045898438
    5. '
' → logprob: -12.021347045898438
    6. '```' → logprob: -12.271347045898438
    7. 'args' → logprob: -12.396347045898438
    8. '``' → logprob: -12.646347045898438
    9. '[
' → logprob: -12.896347045898438
    10. 'vals' → logprob: -13.271347045898438

Token 616: '=args' (ID: 70251)
  Prédit: '=args'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=args' → logprob: -0.0382317416369915
    2. '=' → logprob: -3.28823184967041
    3. ' =' → logprob: -9.41323184967041
    4. ',args' → logprob: -10.28823184967041
    5. 'args' → logprob: -10.91323184967041
    6. '=int' → logprob: -11.03823184967041
    7. ',' → logprob: -11.03823184967041
    8. '=
' → logprob: -11.41323184967041
    9. '=params' → logprob: -11.78823184967041
    10. '=sys' → logprob: -13.78823184967041

Token 617: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.00761869503185153
    2. '1' → logprob: -4.8826189041137695
    3. '```' → logprob: -12.13261890411377
    4. ' [' → logprob: -13.50761890411377
    5. '[
' → logprob: -13.50761890411377
    6. '0' → logprob: -14.50761890411377
    7. ' ' → logprob: -14.63261890411377
    8. '][' → logprob: -14.63261890411377
    9. '   ' → logprob: -14.63261890411377
    10. '`' → logprob: -14.88261890411377

Token 618: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.5048530030981055e-06
    2. '0' → logprob: -14.375001907348633
    3. ' ' → logprob: -14.625001907348633
    4. '[' → logprob: -15.750001907348633
    5. '   ' → logprob: -15.750001907348633
    6. '```' → logprob: -17.062501907348633
    7. '-' → logprob: -17.500001907348633
    8. '...' → logprob: -18.500001907348633
    9. '
' → logprob: -18.750001907348633
    10. '       ' → logprob: -18.812501907348633

Token 619: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.07118427753448486
    2. ']
' → logprob: -2.9461841583251953
    3. '<|end|>' → logprob: -4.446184158325195
    4. '<|end|>' → logprob: -6.446184158325195
    5. '           ' → logprob: -6.696184158325195
    6. ' ]' → logprob: -7.821184158325195
    7. 'var' → logprob: -8.321184158325195
    8. ')' → logprob: -8.696184158325195
    9. '
' → logprob: -8.946184158325195
    10. '],' → logprob: -9.071184158325195

Token 620: '           ' (ID: 352)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 621: ' op' (ID: 991)
  Prédit: 'var'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'var' → logprob: -0.004890023730695248
    2. 'val' → logprob: -5.629889965057373
    3. 'if' → logprob: -6.879889965057373
    4. 'res' → logprob: -9.004890441894531
    5. 'try' → logprob: -9.754890441894531
    6. 'v' → logprob: -10.129890441894531
    7. 'arg' → logprob: -11.004890441894531
    8. ' var' → logprob: -12.129890441894531
    9. 'x' → logprob: -12.379890441894531
    10. 'tmp' → logprob: -12.504890441894531

Token 622: '3' (ID: 18)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '2' → logprob: -0.052761953324079514
    2. 'er' → logprob: -4.052762031555176
    3. '=' → logprob: -4.552762031555176
    4. '_val' → logprob: -4.677762031555176
    5. 'val' → logprob: -5.427762031555176
    6. 't' → logprob: -6.302762031555176
    7. '1' → logprob: -6.427762031555176
    8. 'd' → logprob: -6.677762031555176
    9. 'nd' → logprob: -6.927762031555176
    10. 'r' → logprob: -7.052762031555176

Token 623: '=args' (ID: 70251)
  Prédit: '=args'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=args' → logprob: -0.0008111746865324676
    2. 's' → logprob: -8.000811576843262
    3. '=' → logprob: -8.125811576843262
    4. 'args' → logprob: -9.125811576843262
    5. ' =' → logprob: -10.750811576843262
    6. 't' → logprob: -11.250811576843262
    7. 'nds' → logprob: -12.000811576843262
    8. '=t' → logprob: -12.750811576843262
    9. ',args' → logprob: -12.750811576843262
    10. 'ts' → logprob: -13.000811576843262

Token 624: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.009760101325809956
    2. '2' → logprob: -4.634759902954102
    3. '(' → logprob: -13.509759902954102
    4. '```' → logprob: -13.509759902954102
    5. 'import' → logprob: -15.259759902954102
    6. '[
' → logprob: -15.384759902954102
    7. '{' → logprob: -16.0097599029541
    8. '][' → logprob: -16.1347599029541
    9. '...' → logprob: -16.5097599029541
    10. ' [' → logprob: -16.5097599029541

Token 625: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -1.2664456789934775e-06
    2. ' ' → logprob: -14.000000953674316
    3. '[' → logprob: -16.375001907348633
    4. '۲' → logprob: -16.375001907348633
    5. '   ' → logprob: -16.625001907348633
    6. '```' → logprob: -16.875001907348633
    7. '２' → logprob: -17.625001907348633
    8. '२' → logprob: -18.500001907348633
    9. '২' → logprob: -18.750001907348633
    10. '``' → logprob: -19.062501907348633

Token 626: ']
' (ID: 1592)
  Prédit: ']
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']
' → logprob: -0.03330204263329506
    2. ']' → logprob: -3.533302068710327
    3. '           ' → logprob: -5.783301830291748
    4. ']

' → logprob: -9.158302307128906
    5. '       ' → logprob: -9.408302307128906
    6. ')
' → logprob: -9.658302307128906
    7. ']
' → logprob: -9.658302307128906
    8. ' ]
' → logprob: -9.908302307128906
    9. 'if' → logprob: -10.658302307128906
    10. '
' → logprob: -10.783302307128906

Token 627: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.048551708459854126
    2. 'val' → logprob: -4.298551559448242
    3. '            
' → logprob: -4.923551559448242
    4. '       ' → logprob: -5.173551559448242
    5. ' if' → logprob: -5.423551559448242
    6. 'if' → logprob: -5.423551559448242
    7. '
' → logprob: -5.673551559448242
    8. ' val' → logprob: -5.923551559448242
    9. ' 
' → logprob: -7.048551559448242
    10. '        
' → logprob: -7.423551559448242

Token 628: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' (adapté à ' v') → logprob: -0.1620175838470459
    2. 'val' → logprob: -2.162017583847046
    3. 'if' → logprob: -3.912017583847046
    4. 'res' → logprob: -4.412017822265625
    5. 'tmp' → logprob: -7.287017822265625
    6. 'a' → logprob: -7.912017822265625
    7. 'r' → logprob: -8.162017822265625
    8. 'b' → logprob: -8.287017822265625
    9. 'rhs' → logprob: -9.287017822265625
    10. 'new' → logprob: -9.287017822265625

Token 629: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.45138078927993774
    2. 'ar' → logprob: -1.076380729675293
    3. 'al' → logprob: -3.826380729675293
    4. '=' → logprob: -8.451380729675293
    5. 'ars' → logprob: -8.701380729675293
    6. '1' → logprob: -9.076380729675293
    7. 'v' → logprob: -9.826380729675293
    8. 'alue' → logprob: -10.326380729675293
    9. 'a' → logprob: -10.451380729675293
    10. ' =' → logprob: -11.451380729675293

Token 630: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.001078302855603397
    2. '=get' → logprob: -7.376078128814697
    3. '=sys' → logprob: -8.251078605651855
    4. ' =' → logprob: -8.876078605651855
    5. '=v' → logprob: -10.251078605651855
    6. '=int' → logprob: -11.376078605651855
    7. '=_' → logprob: -14.126078605651855
    8. '=value' → logprob: -14.251078605651855
    9. '=

' → logprob: -14.501078605651855
    10. '=
' → logprob: -14.751078605651855

Token 631: 'vars' (ID: 32791)
  Prédit: 'get'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'get' → logprob: -0.08908581733703613
    2. 'vars' → logprob: -2.464085817337036
    3. ' get' → logprob: -10.089085578918457
    4. '(get' → logprob: -10.214085578918457
    5. 'variables' → logprob: -10.464085578918457
    6. 'var' → logprob: -11.464085578918457
    7. ' vars' → logprob: -11.714085578918457
    8. '(vars' → logprob: -11.964085578918457
    9. 'vals' → logprob: -12.839085578918457
    10. 'gets' → logprob: -13.589085578918457

Token 632: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.00037728800089098513
    2. '_vars' → logprob: -9.125377655029297
    3. '_var' → logprob: -9.250377655029297
    4. 'val' → logprob: -9.500377655029297
    5. '[val' → logprob: -10.000377655029297
    6. '_vals' → logprob: -10.125377655029297
    7. 'vars' → logprob: -12.375377655029297
    8. '[' → logprob: -13.125377655029297
    9. 'Val' → logprob: -13.625377655029297
    10. 'vals' → logprob: -13.875377655029297

Token 633: '[var' (ID: 109537)
  Prédit: '[var'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[var' → logprob: -0.0045150890946388245
    2. 'var' → logprob: -5.504515171051025
    3. '[' → logprob: -7.754515171051025
    4. '[arg' → logprob: -12.504514694213867
    5. 'vars' → logprob: -13.004514694213867
    6. '[get' → logprob: -14.504514694213867
    7. '(var' → logprob: -15.004514694213867
    8. '[v' → logprob: -15.254514694213867
    9. ' var' → logprob: -16.379514694213867
    10. '_var' → logprob: -16.504514694213867

Token 634: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.010092249140143394
    2. 'var' → logprob: -4.635092258453369
    3. '[var' → logprob: -8.135091781616211
    4. ' var' → logprob: -11.010091781616211
    5. 'vars' → logprob: -11.885091781616211
    6. '[' → logprob: -12.010091781616211
    7. '(var' → logprob: -13.135091781616211
    8. '```' → logprob: -13.260091781616211
    9. ')var' → logprob: -13.385091781616211
    10. 'ar' → logprob: -13.760091781616211

Token 635: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.6468601822853088
    2. ')' → logprob: -0.7718601822853088
    3. '<|end|>' → logprob: -5.146860122680664
    4. ')
' → logprob: -6.021860122680664
    5. ']
' → logprob: -6.146860122680664
    6. '+' → logprob: -6.646860122680664
    7. '<|end|>' → logprob: -7.521860122680664
    8. ' if' → logprob: -7.521860122680664
    9. '
' → logprob: -8.271860122680664
    10. '[' → logprob: -8.396860122680664

Token 636: '           ' (ID: 352)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.5450342297554016
    2. '<|end|>' → logprob: -1.1700341701507568
    3. '           ' → logprob: -2.420034170150757
    4. '<|end|>' → logprob: -4.920034408569336
    5. '+' → logprob: -5.545034408569336
    6. ' v' → logprob: -5.670034408569336
    7. ',v' → logprob: -6.295034408569336
    8. 'tokens' → logprob: -7.295034408569336
    9. 'var' → logprob: -7.420034408569336
    10. ')v' → logprob: -8.170034408569336

Token 637: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' (adapté à ' v') → logprob: -0.08133811503648758
    2. 'if' → logprob: -2.5813381671905518
    3. 'op' → logprob: -6.706337928771973
    4. ' if' → logprob: -7.581337928771973
    5. 'val' → logprob: -8.081337928771973
    6. '           ' → logprob: -8.956337928771973
    7. 'try' → logprob: -9.456337928771973
    8. ' v' → logprob: -9.956337928771973
    9. '+' → logprob: -9.956337928771973
    10. 'If' → logprob: -10.581337928771973

Token 638: '3' (ID: 18)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.17638501524925232
    2. ' =' → logprob: -2.551384925842285
    3. '+' → logprob: -2.801384925842285
    4. '=get' → logprob: -4.051384925842285
    5. '=v' → logprob: -6.426384925842285
    6. 'v' → logprob: -6.801384925842285
    7. ' +' → logprob: -7.051384925842285
    8. '+=' → logprob: -7.676384925842285
    9. '+
' → logprob: -8.051384925842285
    10. '=int' → logprob: -8.176384925842285

Token 639: '=get' (ID: 49687)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.010224303230643272
    2. '=int' → logprob: -5.260224342346191
    3. '=get' → logprob: -5.385224342346191
    4. ' =' → logprob: -7.885224342346191
    5. '=v' → logprob: -12.135224342346191
    6. '=value' → logprob: -12.760224342346191
    7. '=
' → logprob: -12.760224342346191
    8. '=

' → logprob: -13.260224342346191
    9. '<|end|>' → logprob: -13.885224342346191
    10. ')' → logprob: -14.885224342346191

Token 640: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -9.088346359931165e-07
    2. 'val' → logprob: -14.125000953674316
    3. ' _' → logprob: -17.25
    4. '_' → logprob: -17.75
    5. '_v' → logprob: -18.375
    6. 'Val' → logprob: -18.875
    7. '_VAL' → logprob: -19.125
    8. ' val' → logprob: -19.25
    9. '_var' → logprob: -19.75
    10. '_token' → logprob: -19.75

Token 641: '(op' (ID: 34275)
  Prédit: '(op'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(op' → logprob: -9.088346359931165e-07
    2. 'op' → logprob: -14.250000953674316
    3. '(' → logprob: -16.125
    4. ' op' → logprob: -17.75
    5. ' (' → logprob: -18.25
    6. '(operator' → logprob: -18.625
    7. '	op' → logprob: -19.375
    8. '(opt' → logprob: -19.5
    9. '('' → logprob: -19.75
    10. '(Op' → logprob: -20.125

Token 642: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -5.512236498361744e-07
    2. '(' → logprob: -15.875000953674316
    3. '[' → logprob: -16.0
    4. '۳' → logprob: -16.0
    5. '_' → logprob: -17.25
    6. 'r' → logprob: -17.3125
    7. '(op' → logprob: -17.5
    8. '৩' → logprob: -17.9375
    9. '３' → logprob: -17.9375
    10. '٣' → logprob: -18.0

Token 643: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.22568365931510925
    2. ')
' → logprob: -1.6006836891174316
    3. '           ' → logprob: -9.100683212280273
    4. ')
' → logprob: -9.475683212280273
    5. ')

' → logprob: -10.975683212280273
    6. ' )' → logprob: -10.975683212280273
    7. ' )
' → logprob: -11.100683212280273
    8. '       ' → logprob: -11.975683212280273
    9. ')v' → logprob: -12.225683212280273
    10. '   ' → logprob: -12.350683212280273

Token 644: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.009800003841519356
    2. 'v' → logprob: -6.134799957275391
    3. '            
' → logprob: -6.259799957275391
    4. 'new' → logprob: -6.759799957275391
    5. '```' → logprob: -7.009799957275391
    6. ' new' → logprob: -7.259799957275391
    7. 'result' → logprob: -7.759799957275391
    8. 'val' → logprob: -7.884799957275391
    9. '
' → logprob: -8.00979995727539
    10. '<|end|>' → logprob: -8.00979995727539

Token 645: ' val' (ID: 1459)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.15641123056411743
    2. 'new' → logprob: -3.2814111709594727
    3. 'r' → logprob: -3.5314111709594727
    4. '           ' → logprob: -3.6564111709594727
    5. 'val' (adapté à ' val') → logprob: -4.406411170959473
    6. 'ans' → logprob: -4.656411170959473
    7. 'v' → logprob: -4.656411170959473
    8. 'result' → logprob: -5.156411170959473
    9. 'nv' → logprob: -5.156411170959473
    10. 'nr' → logprob: -5.656411170959473

Token 646: '=v' (ID: 89140)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.02528783120214939
    2. ' =' → logprob: -4.025287628173828
    3. 'ue' → logprob: -5.025287628173828
    4. '=v' → logprob: -7.900287628173828
    5. '=u' → logprob: -9.775287628173828
    6. '=value' → logprob: -10.275287628173828
    7. '=(' → logprob: -11.025287628173828
    8. '=int' → logprob: -11.400287628173828
    9. '=e' → logprob: -11.650287628173828
    10. '=id' → logprob: -11.775287628173828

Token 647: '2' (ID: 17)
  Prédit: 'ars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ars' → logprob: -0.63111811876297
    2. 'al' → logprob: -1.1311180591583252
    3. 'ar' → logprob: -2.881118059158325
    4. '2' → logprob: -2.881118059158325
    5. 'als' → logprob: -4.756118297576904
    6. 'v' → logprob: -4.756118297576904
    7. 'val' → logprob: -4.881118297576904
    8. 'vars' → logprob: -5.756118297576904
    9. '[v' → logprob: -7.381118297576904
    10. '[val' → logprob: -7.381118297576904

Token 648: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.20142357051372528
    2. ' +' → logprob: -1.7014235258102417
    3. '+
' → logprob: -11.701423645019531
    4. ' +
' → logprob: -13.826423645019531
    5. '＋' → logprob: -15.826423645019531
    6. '+w' → logprob: -16.20142364501953
    7. '
' → logprob: -16.45142364501953
    8. ' ' → logprob: -16.57642364501953
    9. '+[' → logprob: -16.82642364501953
    10. '+x' → logprob: -16.82642364501953

Token 649: 'v' (ID: 85)
  Prédit: 'v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -1.1472419600977446e-06
    2. ' v' → logprob: -13.750000953674316
    3. 'val' → logprob: -20.625001907348633
    4. '_v' → logprob: -22.250001907348633
    5. '	v' → logprob: -22.375001907348633
    6. '   ' → logprob: -24.375001907348633
    7. '$v' → logprob: -25.500001907348633
    8. ')v' → logprob: -25.625001907348633
    9. ' ' → logprob: -25.750001907348633
    10. '```' → logprob: -25.875001907348633

Token 650: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -7.100059156073257e-05
    2. 'al' → logprob: -9.625070571899414
    3. ' ' → logprob: -13.000070571899414
    4. 'alue' → logprob: -14.500070571899414
    5. 'ariable' → logprob: -14.750070571899414
    6. 'ar' → logprob: -15.125070571899414
    7. 'alu' → logprob: -15.375070571899414
    8. 'v' → logprob: -15.500070571899414
    9. 'als' → logprob: -15.500070571899414
    10. 'l' → logprob: -15.625070571899414

Token 651: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.007004374638199806
    2. 'if' → logprob: -5.507004261016846
    3. ' if' → logprob: -5.882004261016846
    4. '
' → logprob: -9.507004737854004
    5. '       ' → logprob: -10.257004737854004
    6. '   ' → logprob: -12.382004737854004
    7. ',' → logprob: -12.507004737854004
    8. '            
' → logprob: -12.507004737854004
    9. '	       ' → logprob: -13.007004737854004
    10. '<|end|>' → logprob: -13.382004737854004

Token 652: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.015145566314458847
    2. ' if' → logprob: -4.640145778656006
    3. 'if' → logprob: -5.265145778656006
    4. '
' → logprob: -9.140145301818848
    5. '            
' → logprob: -10.640145301818848
    6. '       ' → logprob: -10.765145301818848
    7. '		' → logprob: -11.390145301818848
    8. '<|end|>' → logprob: -11.390145301818848
    9. '	       ' → logprob: -12.140145301818848
    10. '   ' → logprob: -12.390145301818848

Token 653: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.03617764636874199
    2. '           ' → logprob: -4.036177635192871
    3. ' if' → logprob: -4.036177635192871
    4. '       ' → logprob: -8.786177635192871
    5. '```' → logprob: -10.036177635192871
    6. '	if' → logprob: -13.161177635192871
    7. '   ' → logprob: -14.411177635192871
    8. '               ' → logprob: -14.536177635192871
    9. 'If' → logprob: -14.661177635192871
    10. '<|end|>' → logprob: -15.411177635192871

Token 654: ' val' (ID: 1459)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.017396118491888046
    2. '0' → logprob: -4.392395973205566
    3. ' val' → logprob: -5.392395973205566
    4. 'not' → logprob: -8.392395973205566
    5. ' ' → logprob: -10.017395973205566
    6. ' not' → logprob: -10.517395973205566
    7. '(val' → logprob: -11.142395973205566
    8. '   ' → logprob: -12.392395973205566
    9. '	val' → logprob: -13.642395973205566
    10. 'v' → logprob: -14.142395973205566

Token 655: '<' (ID: 27)
  Prédit: '<'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<' → logprob: -0.20382274687290192
    2. ' <' → logprob: -1.7038227319717407
    3. ' >=' → logprob: -6.453822612762451
    4. '>=' → logprob: -7.203822612762451
    5. '>' → logprob: -10.70382308959961
    6. ' not' → logprob: -11.07882308959961
    7. '<|end|>' → logprob: -11.20382308959961
    8. ' >' → logprob: -11.57882308959961
    9. '[' → logprob: -11.70382308959961
    10. '<int' → logprob: -12.82882308959961

Token 656: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -4.656383680412546e-05
    2. '16' → logprob: -10.000046730041504
    3. ' ' → logprob: -14.375046730041504
    4. '=' → logprob: -15.125046730041504
    5. '```' → logprob: -15.250046730041504
    6. '   ' → logprob: -18.750045776367188
    7. '1' → logprob: -19.250045776367188
    8. '``' → logprob: -19.375045776367188
    9. '۰' → logprob: -19.812545776367188
    10. '>' → logprob: -19.812545776367188

Token 657: ' or' (ID: 503)
  Prédit: ' or'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.04863210767507553
    2. 'or' → logprob: -3.0486321449279785
    3. '           ' → logprob: -10.42363166809082
    4. '	or' → logprob: -11.92363166809082
    5. '0' → logprob: -12.67363166809082
    6. '```' → logprob: -13.42363166809082
    7. '<|end|>' → logprob: -14.42363166809082
    8. ':' → logprob: -14.54863166809082
    9. ' ' → logprob: -14.54863166809082
    10. '               ' → logprob: -14.67363166809082

Token 658: ' val' (ID: 1459)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.0030342787504196167
    2. ' val' → logprob: -6.3780341148376465
    3. '16' → logprob: -6.6280341148376465
    4. '   ' → logprob: -12.878034591674805
    5. '>' → logprob: -13.378034591674805
    6. '```' → logprob: -13.753034591674805
    7. '>=' → logprob: -13.878034591674805
    8. ' ' → logprob: -14.253034591674805
    9. '(val' → logprob: -15.003034591674805
    10. '	val' → logprob: -15.128034591674805

Token 659: '>=' (ID: 20974)
  Prédit: '>='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>=' → logprob: -0.020319147035479546
    2. '>' → logprob: -4.020318984985352
    3. ' >=' → logprob: -6.145318984985352
    4. ']>=' → logprob: -11.895318984985352
    5. ' >' → logprob: -12.145318984985352
    6. '```' → logprob: -12.520318984985352
    7. ')>=' → logprob: -12.520318984985352
    8. '≥' → logprob: -12.770318984985352
    9. '16' → logprob: -15.145318984985352
    10. '[' → logprob: -15.770318984985352

Token 660: '16' (ID: 1125)
  Prédit: '16'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '16' → logprob: 0.0
    2. ' ' → logprob: -18.5
    3. '```' → logprob: -20.5
    4. '   ' → logprob: -21.125
    5. '
' → logprob: -21.875
    6. '=' → logprob: -22.125
    7. '１６' → logprob: -23.125
    8. '' → logprob: -23.125
    9. '``' → logprob: -23.5
    10. '0' → logprob: -23.625

Token 661: ':
' (ID: 734)
  Prédit: ':
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':
' → logprob: -0.19237461686134338
    2. ':' → logprob: -1.817374587059021
    3. ':return' → logprob: -5.0673747062683105
    4. '               ' → logprob: -5.4423747062683105
    5. '           ' → logprob: -6.3173747062683105
    6. ':
' → logprob: -10.192374229431152
    7. '):
' → logprob: -10.817374229431152
    8. ' or' → logprob: -11.067374229431152
    9. '       ' → logprob: -11.692374229431152
    10. ':

' → logprob: -11.692374229431152

Token 662: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.003845555940642953
    2. 'return' → logprob: -5.628845691680908
    3. ' return' → logprob: -8.75384521484375
    4. '           ' → logprob: -9.37884521484375
    5. 'break' → logprob: -13.62884521484375
    6. '                   ' → logprob: -14.87884521484375
    7. ':return' → logprob: -14.87884521484375
    8. '```' → logprob: -15.00384521484375
    9. '   ' → logprob: -15.12884521484375
    10. '{return' → logprob: -15.25384521484375

Token 663: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.00858714897185564
    2. '               ' → logprob: -5.63358736038208
    3. 'break' → logprob: -5.88358736038208
    4. '           ' → logprob: -6.25858736038208
    5. ' return' → logprob: -8.258586883544922
    6. '   ' → logprob: -11.633586883544922
    7. '                   ' → logprob: -12.383586883544922
    8. ' break' → logprob: -14.258586883544922
    9. '```' → logprob: -14.508586883544922
    10. '       ' → logprob: -14.633586883544922

Token 664: ' stop' (ID: 5666)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.004253861960023642
    2. 'break' → logprob: -5.62925386428833
    3. '           ' → logprob: -7.62925386428833
    4. ' return' → logprob: -9.004253387451172
    5. '               ' → logprob: -11.004253387451172
    6. '   ' → logprob: -11.129253387451172
    7. '       ' → logprob: -12.254253387451172
    8. '                   ' → logprob: -12.754253387451172
    9. '#' → logprob: -13.129253387451172
    10. 'jump' → logprob: -13.379253387451172

Token 665: ' immediately' (ID: 10731)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.3317558467388153
    2. 'return' → logprob: -1.3317558765411377
    3. '           ' → logprob: -4.206755638122559
    4. 'break' → logprob: -6.081755638122559
    5. '                   ' → logprob: -7.456755638122559
    6. ' return' → logprob: -7.706755638122559
    7. '   ' → logprob: -10.456755638122559
    8. ' ' → logprob: -11.331755638122559
    9. '              ' → logprob: -11.456755638122559
    10. ',' → logprob: -11.706755638122559

Token 666: ',' (ID: 11)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.05895614996552467
    2. '               ' → logprob: -3.0589561462402344
    3. '           ' → logprob: -5.183956146240234
    4. ' return' → logprob: -5.433956146240234
    5. 'break' → logprob: -8.558956146240234
    6. '                   ' → logprob: -8.933956146240234
    7. '```' → logprob: -12.183956146240234
    8. '   ' → logprob: -12.433956146240234
    9. ' ' → logprob: -12.558956146240234
    10. ':return' → logprob: -13.058956146240234

Token 667: ' do' (ID: 621)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.011487611569464207
    2. '           ' → logprob: -4.8864874839782715
    3. ' return' → logprob: -6.1364874839782715
    4. 'break' → logprob: -6.6364874839782715
    5. '               ' → logprob: -8.26148796081543
    6. '   ' → logprob: -9.38648796081543
    7. '       ' → logprob: -10.51148796081543
    8. '                   ' → logprob: -11.38648796081543
    9. ' ' → logprob: -11.76148796081543
    10. ' break' → logprob: -12.76148796081543

Token 668: ' not' (ID: 625)
  Prédit: 'not'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'not' → logprob: -0.47727397084236145
    2. 'return' → logprob: -0.9772739410400391
    3. ' not' → logprob: -6.227273941040039
    4. '           ' → logprob: -7.852273941040039
    5. ' return' → logprob: -7.977273941040039
    6. 'break' → logprob: -8.727273941040039
    7. '   ' → logprob: -9.477273941040039
    8. '```' → logprob: -9.602273941040039
    9. '_not' → logprob: -10.477273941040039
    10. '               ' → logprob: -10.477273941040039

Token 669: ' update' (ID: 4027)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.2753871977329254
    2. 'update' → logprob: -1.525387167930603
    3. 'break' → logprob: -4.025387287139893
    4. 'continue' → logprob: -5.400387287139893
    5. ' return' → logprob: -8.150386810302734
    6. '```' → logprob: -8.525386810302734
    7. ' update' → logprob: -9.150386810302734
    8. 'print' → logprob: -10.025386810302734
    9. 'change' → logprob: -10.150386810302734
    10. 'assign' → logprob: -10.650386810302734

Token 670: '
' (ID: 198)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.008923115208745003
    2. '               ' → logprob: -5.758923053741455
    3. '           ' → logprob: -6.633923053741455
    4. 'vars' → logprob: -6.633923053741455
    5. 'pc' → logprob: -7.133923053741455
    6. ' return' → logprob: -7.258923053741455
    7. 'variables' → logprob: -7.508923053741455
    8. '
' → logprob: -7.883923053741455
    9. 'break' → logprob: -8.008923530578613
    10. 'var' → logprob: -9.008923530578613

Token 671: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.0018333226907998323
    2. 'return' → logprob: -6.501833438873291
    3. ' return' → logprob: -8.751832962036133
    4. '           ' → logprob: -9.501832962036133
    5. '                   ' → logprob: -10.251832962036133
    6. 'break' → logprob: -10.501832962036133
    7. '```' → logprob: -10.501832962036133
    8. '   ' → logprob: -13.501832962036133
    9. '                
' → logprob: -13.751832962036133
    10. '<|end|>' → logprob: -14.001832962036133

Token 672: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.0005160979344509542
    2. 'break' → logprob: -8.375515937805176
    3. '               ' → logprob: -9.000515937805176
    4. '           ' → logprob: -9.500515937805176
    5. ' return' → logprob: -9.500515937805176
    6. '                   ' → logprob: -11.500515937805176
    7. '   ' → logprob: -13.250515937805176
    8. '                       ' → logprob: -15.750515937805176
    9. '{return' → logprob: -16.250516891479492
    10. '       ' → logprob: -16.750516891479492

Token 673: ' vars' (ID: 36194)
  Prédit: 'vars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'vars' → logprob: -0.22870059311389923
    2. 'None' → logprob: -1.6037006378173828
    3. 'vals' → logprob: -6.228700637817383
    4. 'val' → logprob: -7.603700637817383
    5. 'variables' → logprob: -8.103700637817383
    6. ' None' → logprob: -8.353700637817383
    7. 'var' → logprob: -8.853700637817383
    8. '```' → logprob: -9.978700637817383
    9. ' vars' → logprob: -10.478700637817383
    10. 'values' → logprob: -11.103700637817383

Token 674: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -6.384836888173595e-05
    2. 'val' → logprob: -10.1250638961792
    3. 'al' → logprob: -10.8750638961792
    4. '[val' → logprob: -13.5000638961792
    5. 'Val' → logprob: -14.0000638961792
    6. '_vals' → logprob: -14.5000638961792
    7. '_var' → logprob: -14.6250638961792
    8. '_VAL' → logprob: -15.3750638961792
    9. '	val' → logprob: -15.5000638961792
    10. 'als' → logprob: -15.7500638961792

Token 675: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.019905898720026016
    2. '
' → logprob: -4.644906044006348
    3. '            
' → logprob: -5.394906044006348
    4. '        
' → logprob: -6.394906044006348
    5. '       ' → logprob: -6.769906044006348
    6. '		' → logprob: -6.894906044006348
    7. '		
' → logprob: -8.019906044006348
    8. '    
' → logprob: -8.019906044006348
    9. ' 
' → logprob: -8.394906044006348
    10. '
' → logprob: -8.644906044006348

Token 676: '           ' (ID: 352)
  Prédit: 'vars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'vars' → logprob: -0.8848296403884888
    2. '           ' → logprob: -1.7598296403884888
    3. '       ' → logprob: -2.509829521179199
    4. 'var' → logprob: -2.634829521179199
    5. '        
' → logprob: -3.009829521179199
    6. 'tokens' → logprob: -3.509829521179199
    7. '            
' → logprob: -3.634829521179199
    8. '  
' → logprob: -4.009829521179199
    9. '[' → logprob: -4.009829521179199
    10. '		
' → logprob: -4.134829521179199

Token 677: ' vars' (ID: 36194)
  Prédit: 'vars'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'vars' (adapté à ' vars') → logprob: -0.02389437146484852
    2. '           ' → logprob: -3.7738943099975586
    3. 'variables' → logprob: -7.648894309997559
    4. '       ' → logprob: -9.398894309997559
    5. ' vars' → logprob: -10.148894309997559
    6. 'var' → logprob: -10.273894309997559
    7. 'vals' → logprob: -12.148894309997559
    8. '   ' → logprob: -12.523894309997559
    9. '```' → logprob: -13.148894309997559
    10. '               ' → logprob: -13.898894309997559

Token 678: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -6.539801688631997e-05
    2. '_var' → logprob: -10.125065803527832
    3. '[val' → logprob: -10.750065803527832
    4. '_vars' → logprob: -13.250065803527832
    5. '_vals' → logprob: -14.250065803527832
    6. 'val' → logprob: -14.625065803527832
    7. '[_' → logprob: -14.875065803527832
    8. '_VAL' → logprob: -15.500065803527832
    9. '[var' → logprob: -15.625065803527832
    10. 'Val' → logprob: -15.750065803527832

Token 679: '[var' (ID: 109537)
  Prédit: '[var'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[var' → logprob: -7.896309739408025e-07
    2. '[' → logprob: -15.125000953674316
    3. '[val' → logprob: -15.500000953674316
    4. 'var' → logprob: -15.750000953674316
    5. '```' → logprob: -16.375
    6. '[param' → logprob: -18.5
    7. '[v' → logprob: -18.625
    8. '[...]' → logprob: -19.5
    9. ' [' → logprob: -20.125
    10. ')var' → logprob: -20.125

Token 680: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -9.221884101862088e-05
    2. '[var' → logprob: -9.375092506408691
    3. '[' → logprob: -12.375092506408691
    4. 'var' → logprob: -13.375092506408691
    5. '[val' → logprob: -15.125092506408691
    6. 's' → logprob: -15.375092506408691
    7. '```' → logprob: -15.625092506408691
    8. '[arg' → logprob: -16.625091552734375
    9. 'ar' → logprob: -16.625091552734375
    10. '['' → logprob: -16.875091552734375

Token 681: ']=' (ID: 9539)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.03512875735759735
    2. ']=' → logprob: -3.5351288318634033
    3. ']' → logprob: -5.660128593444824
    4. ' =' → logprob: -6.785128593444824
    5. '[' → logprob: -7.285128593444824
    6. '[val' → logprob: -10.160128593444824
    7. '[var' → logprob: -11.160128593444824
    8. ')=' → logprob: -12.785128593444824
    9. ' ]' → logprob: -12.910128593444824
    10. ']+=' → logprob: -13.660128593444824

Token 682: 'val' (ID: 1105)
  Prédit: 'val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: 0.0
    2. ' val' → logprob: -17.5
    3. '	val' → logprob: -22.25
    4. '(val' → logprob: -23.75
    5. 'v' → logprob: -24.0
    6. '_val' → logprob: -24.875
    7. 'var' → logprob: -25.125
    8. '[val' → logprob: -25.125
    9. '```' → logprob: -25.375
    10. '   ' → logprob: -25.625

Token 683: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.0041642338037490845
    2. '
' → logprob: -6.129164218902588
    3. '\n' → logprob: -7.129164218902588
    4. '       ' → logprob: -7.629164218902588
    5. '           ' → logprob: -8.004164695739746
    6. '        
' → logprob: -9.129164695739746
    7. '  
' → logprob: -9.254164695739746
    8. '    
' → logprob: -9.754164695739746
    9. '<|end|>' → logprob: -10.754164695739746
    10. ',' → logprob: -11.129164695739746

Token 684: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.6065661907196045
    2. '
' → logprob: -1.2315661907196045
    3. '           ' → logprob: -2.2315661907196045
    4. '\n' → logprob: -3.8565661907196045
    5. '        
' → logprob: -4.856566429138184
    6. '
' → logprob: -4.981566429138184
    7. '\t' → logprob: -5.356566429138184
    8. '    
' → logprob: -5.981566429138184
    9. '  
' → logprob: -6.356566429138184
    10. '            
' → logprob: -6.606566429138184

Token 685: ' elif' (ID: 9497)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'elif' (adapté à ' elif') → logprob: -0.2260531634092331
    2. '       ' → logprob: -1.6010531187057495
    3. ' elif' → logprob: -7.601053237915039
    4. '```' → logprob: -10.351053237915039
    5. 'pc' → logprob: -10.476053237915039
    6. '   ' → logprob: -10.851053237915039
    7. '	elif' → logprob: -10.851053237915039
    8. '<|end|>' → logprob: -11.726053237915039
    9. 'if' → logprob: -11.851053237915039
    10. '.' → logprob: -11.976053237915039

Token 686: ' cmd' (ID: 11704)
  Prédit: 'cmd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cmd' → logprob: -0.01816176250576973
    2. ' cmd' → logprob: -4.018161773681641
    3. '(cmd' → logprob: -12.01816177368164
    4. ''' → logprob: -13.01816177368164
    5. '	cmd' → logprob: -13.14316177368164
    6. '.cmd' → logprob: -14.64316177368164
    7. '   ' → logprob: -14.76816177368164
    8. ' ' → logprob: -15.26816177368164
    9. 'code' → logprob: -15.89316177368164
    10. '           ' → logprob: -16.64316177368164

Token 687: '=='' (ID: 20651)
  Prédit: '==''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=='' → logprob: -7.743758760625497e-05
    2. '==' → logprob: -9.625077247619629
    3. ' =='' → logprob: -12.750077247619629
    4. ' ==' → logprob: -12.875077247619629
    5. '=="' → logprob: -13.125077247619629
    6. '==='' → logprob: -13.250077247619629
    7. ''' → logprob: -14.125077247619629
    8. ']=='' → logprob: -14.500077247619629
    9. '='' → logprob: -14.625077247619629
    10. '']=='' → logprob: -15.875077247619629

Token 688: 'SUB' (ID: 58665)
  Prédit: 'SUB'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'SUB' → logprob: -0.0003103175258729607
    2. 'SET' → logprob: -8.500309944152832
    3. ''S' → logprob: -9.250309944152832
    4. ''' → logprob: -11.500309944152832
    5. ''s' → logprob: -14.875309944152832
    6. 'sub' → logprob: -16.25031089782715
    7. ' SUB' → logprob: -16.50031089782715
    8. '"' → logprob: -19.12531089782715
    9. 'ADD' → logprob: -19.12531089782715
    10. '.SUB' → logprob: -19.25031089782715

Token 689: '':
' (ID: 7669)
  Prédit: '':
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':
' → logprob: -0.08588816225528717
    2. 'var' → logprob: -3.710888147354126
    3. ':
' → logprob: -3.835888147354126
    4. '(args' → logprob: -4.460888385772705
    5. ' var' → logprob: -4.585888385772705
    6. '           ' → logprob: -5.335888385772705
    7. '(var' → logprob: -6.210888385772705
    8. '':' → logprob: -6.335888385772705
    9. 'args' → logprob: -6.335888385772705
    10. '```' → logprob: -7.085888385772705

Token 690: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.12992173433303833
    2. 'var' → logprob: -2.2549216747283936
    3. ' var' → logprob: -4.129921913146973
    4. '       ' → logprob: -7.754921913146973
    5. '   ' → logprob: -8.254921913146973
    6. '```' → logprob: -9.879921913146973
    7. ' ' → logprob: -10.504921913146973
    8. '		' → logprob: -10.754921913146973
    9. '               ' → logprob: -10.879921913146973
    10. '	   ' → logprob: -11.129921913146973

Token 691: ' var' (ID: 972)
  Prédit: 'var'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'var' (adapté à ' var') → logprob: -0.005328385625034571
    2. ' var' → logprob: -5.380328178405762
    3. '           ' → logprob: -7.255328178405762
    4. '       ' → logprob: -14.755328178405762
    5. '   ' → logprob: -14.880328178405762
    6. '               ' → logprob: -15.380328178405762
    7. '_var' → logprob: -15.755328178405762
    8. '	var' → logprob: -16.380329132080078
    9. '```' → logprob: -16.755329132080078
    10. '            ' → logprob: -16.880329132080078

Token 692: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00022713904036208987
    2. '[var' → logprob: -9.250226974487305
    3. '[' → logprob: -9.625226974487305
    4. 'val' → logprob: -11.000226974487305
    5. '[val' → logprob: -11.500226974487305
    6. '```' → logprob: -11.500226974487305
    7. '_' → logprob: -11.750226974487305
    8. '_val' → logprob: -12.000226974487305
    9. '   ' → logprob: -12.250226974487305
    10. 'var' → logprob: -12.375226974487305

Token 693: '=args' (ID: 70251)
  Prédit: '=args'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=args' → logprob: -0.014231441542506218
    2. '=' → logprob: -4.264231204986572
    3. 'args' → logprob: -10.01423168182373
    4. ',args' → logprob: -11.38923168182373
    5. '=params' → logprob: -12.51423168182373
    6. ' =' → logprob: -13.13923168182373
    7. '$args' → logprob: -13.26423168182373
    8. '(args' → logprob: -13.26423168182373
    9. '=[' → logprob: -13.88923168182373
    10. '[' → logprob: -14.76423168182373

Token 694: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -2.45848218582978e-06
    2. '           ' → logprob: -14.25000286102295
    3. '0' → logprob: -14.37500286102295
    4. '   ' → logprob: -15.12500286102295
    5. '       ' → logprob: -15.25000286102295
    6. '```' → logprob: -15.37500286102295
    7. '=' → logprob: -15.62500286102295
    8. ' [' → logprob: -15.87500286102295
    9. '1' → logprob: -16.250001907348633
    10. '
' → logprob: -16.750001907348633

Token 695: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -3.8889261304575484e-06
    2. '[' → logprob: -13.125003814697266
    3. '1' → logprob: -13.375003814697266
    4. ' ' → logprob: -15.500003814697266
    5. '   ' → logprob: -17.812503814697266
    6. '```' → logprob: -18.062503814697266
    7. '۰' → logprob: -18.562503814697266
    8. '
' → logprob: -19.187503814697266
    9. '(' → logprob: -19.687503814697266
    10. '00' → logprob: -19.750003814697266

Token 696: ']
' (ID: 1592)
  Prédit: 'var'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'var' → logprob: -0.5509616136550903
    2. ']
' → logprob: -1.3009616136550903
    3. '           ' → logprob: -2.675961494445801
    4. ']' → logprob: -3.175961494445801
    5. '
' → logprob: -3.300961494445801
    6. '[var' → logprob: -7.175961494445801
    7. 'args' → logprob: -7.925961494445801
    8. ' var' → logprob: -8.1759614944458
    9. '       ' → logprob: -8.3009614944458
    10. '            
' → logprob: -8.4259614944458

Token 697: '           ' (ID: 352)
  Prédit: 'var'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'var' → logprob: -0.026942571625113487
    2. '           ' → logprob: -3.651942491531372
    3. 'vars' → logprob: -8.651942253112793
    4. '
' → logprob: -8.776942253112793
    5. ' var' → logprob: -9.401942253112793
    6. '=' → logprob: -9.526942253112793
    7. '            
' → logprob: -9.901942253112793
    8. '```' → logprob: -10.401942253112793
    9. '_var' → logprob: -10.901942253112793
    10. 'args' → logprob: -11.401942253112793

Token 698: ' var' (ID: 972)
  Prédit: 'var'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'var' (adapté à ' var') → logprob: -5.037835580878891e-05
    2. '           ' → logprob: -10.00005054473877
    3. 'vars' → logprob: -12.75005054473877
    4. 'v' → logprob: -13.62505054473877
    5. 'op' → logprob: -14.25005054473877
    6. ' var' → logprob: -17.250049591064453
    7. '       ' → logprob: -17.625049591064453
    8. 'val' → logprob: -17.875049591064453
    9. '               ' → logprob: -18.375049591064453
    10. 'args' → logprob: -18.875049591064453

Token 699: '2' (ID: 17)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.7135475277900696
    2. '2' → logprob: -1.2135474681854248
    3. '1' → logprob: -2.088547468185425
    4. '_val' → logprob: -2.463547468185425
    5. '[' → logprob: -5.963547706604004
    6. 'vals' → logprob: -6.838547706604004
    7. 'Val' → logprob: -8.463547706604004
    8. '_vals' → logprob: -10.463547706604004
    9. 'VAL' → logprob: -11.088547706604004
    10. '[val' → logprob: -11.713547706604004

Token 700: '=args' (ID: 70251)
  Prédit: '=args'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=args' → logprob: -0.010230669751763344
    2. '=' → logprob: -4.635230541229248
    3. 'args' → logprob: -8.260231018066406
    4. '=_' → logprob: -10.260231018066406
    5. ',args' → logprob: -10.260231018066406
    6. ' =' → logprob: -10.635231018066406
    7. '(args' → logprob: -10.885231018066406
    8. '[' → logprob: -10.885231018066406
    9. '_=' → logprob: -11.010231018066406
    10. '=params' → logprob: -11.135231018066406

Token 701: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.007609228603541851
    2. '1' → logprob: -4.8826093673706055
    3. '```' → logprob: -13.757609367370605
    4. ' [' → logprob: -14.632609367370605
    5. '(' → logprob: -15.257609367370605
    6. '   ' → logprob: -15.382609367370605
    7. 'def' → logprob: -16.00760841369629
    8. '[
' → logprob: -16.13260841369629
    9. ' ' → logprob: -16.25760841369629
    10. '{' → logprob: -16.38260841369629

Token 702: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.0921942703134846e-05
    2. '[' → logprob: -11.50001049041748
    3. ' ' → logprob: -15.31251049041748
    4. '0' → logprob: -16.562511444091797
    5. '```' → logprob: -16.562511444091797
    6. '   ' → logprob: -16.625011444091797
    7. '(' → logprob: -16.875011444091797
    8. ']' → logprob: -17.437511444091797
    9. '...' → logprob: -17.812511444091797
    10. '2' → logprob: -18.000011444091797

Token 703: ']
' (ID: 1592)
  Prédit: ']
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']
' → logprob: -0.08407139033079147
    2. ']' → logprob: -2.834071397781372
    3. '           ' → logprob: -3.834071397781372
    4. 'var' → logprob: -9.959071159362793
    5. ']
' → logprob: -10.334071159362793
    6. '
' → logprob: -10.334071159362793
    7. '']
' → logprob: -10.459071159362793
    8. '       ' → logprob: -10.959071159362793
    9. '               ' → logprob: -11.709071159362793
    10. '](' → logprob: -11.959071159362793

Token 704: '           ' (ID: 352)
  Prédit: 'op'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'op' → logprob: -0.06240870803594589
    2. '           ' → logprob: -2.812408685684204
    3. 'var' → logprob: -8.062408447265625
    4. ' op' → logprob: -9.687408447265625
    5. 'v' → logprob: -10.562408447265625
    6. '
' → logprob: -10.562408447265625
    7. '	op' → logprob: -12.437408447265625
    8. 'val' → logprob: -12.812408447265625
    9. '_op' → logprob: -13.187408447265625
    10. '```' → logprob: -13.562408447265625

Token 705: ' op' (ID: 991)
  Prédit: 'op'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'op' (adapté à ' op') → logprob: -0.005346059333533049
    2. 'var' → logprob: -5.505345821380615
    3. '           ' → logprob: -6.755345821380615
    4. 'val' → logprob: -9.380346298217773
    5. 'v' → logprob: -11.380346298217773
    6. ' op' → logprob: -12.255346298217773
    7. '```' → logprob: -13.880346298217773
    8. '_op' → logprob: -15.630346298217773
    9. '       ' → logprob: -15.755346298217773
    10. '``' → logprob: -15.880346298217773

Token 706: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.010125061497092247
    2. '[' → logprob: -4.635125160217285
    3. 'args' → logprob: -8.635125160217285
    4. '_' → logprob: -8.885125160217285
    5. '_args' → logprob: -11.385125160217285
    6. ''' → logprob: -12.260125160217285
    7. '```' → logprob: -12.260125160217285
    8. '   ' → logprob: -12.635125160217285
    9. '$args' → logprob: -13.135125160217285
    10. '_[' → logprob: -13.260125160217285

Token 707: '=args' (ID: 70251)
  Prédit: '=args'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=args' → logprob: -0.19133977591991425
    2. '=' → logprob: -2.4413397312164307
    3. '=get' → logprob: -2.4413397312164307
    4. '=_' → logprob: -10.816339492797852
    5. '=params' → logprob: -11.191339492797852
    6. 'args' → logprob: -11.816339492797852
    7. '=
' → logprob: -12.191339492797852
    8. '_=' → logprob: -12.441339492797852
    9. ' =' → logprob: -12.941339492797852
    10. '=int' → logprob: -13.941339492797852

Token 708: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0004923873930238187
    2. '2' → logprob: -7.625492572784424
    3. '```' → logprob: -12.750492095947266
    4. '   ' → logprob: -14.750492095947266
    5. '[
' → logprob: -15.250492095947266
    6. '(' → logprob: -15.500492095947266
    7. '0' → logprob: -16.000492095947266
    8. '           ' → logprob: -16.375492095947266
    9. ' [' → logprob: -16.500492095947266
    10. '       ' → logprob: -16.500492095947266

Token 709: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -2.339278580620885e-06
    2. ' ' → logprob: -14.250001907348633
    3. '[' → logprob: -14.375001907348633
    4. '```' → logprob: -14.875001907348633
    5. '   ' → logprob: -15.000001907348633
    6. '0' → logprob: -16.125001907348633
    7. '۲' → logprob: -17.312501907348633
    8. '
' → logprob: -17.312501907348633
    9. '``' → logprob: -17.375001907348633
    10. '1' → logprob: -17.875001907348633

Token 710: ']
' (ID: 1592)
  Prédit: ']
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']
' → logprob: -0.7219914197921753
    2. ']' → logprob: -1.4719914197921753
    3. '           ' → logprob: -1.9719914197921753
    4. '=get' → logprob: -2.846991539001465
    5. ')
' → logprob: -2.971991539001465
    6. ')' → logprob: -4.721991539001465
    7. '
' → logprob: -4.846991539001465
    8. 'get' → logprob: -5.096991539001465
    9. ')get' → logprob: -5.846991539001465
    10. ']=' → logprob: -5.971991539001465

Token 711: '           ' (ID: 352)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.05023733526468277
    2. '           ' → logprob: -3.0502374172210693
    3. 'var' → logprob: -6.67523717880249
    4. 'val' → logprob: -8.300237655639648
    5. '
' → logprob: -9.425237655639648
    6. ' v' → logprob: -10.175237655639648
    7. '	v' → logprob: -12.425237655639648
    8. '       ' → logprob: -12.550237655639648
    9. '```' → logprob: -12.550237655639648
    10. '_v' → logprob: -13.925237655639648

Token 712: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' (adapté à ' v') → logprob: -0.0008647724171169102
    2. '           ' → logprob: -7.7508649826049805
    3. 'var' → logprob: -8.00086498260498
    4. 'val' → logprob: -9.25086498260498
    5. ' v' → logprob: -13.50086498260498
    6. '
' → logprob: -13.75086498260498
    7. 'vars' → logprob: -16.125864028930664
    8. '       ' → logprob: -17.000864028930664
    9. '```' → logprob: -17.000864028930664
    10. '               ' → logprob: -17.375864028930664

Token 713: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.11755775660276413
    2. '_val' → logprob: -2.2425577640533447
    3. 'val' → logprob: -6.117557525634766
    4. '=' → logprob: -6.617557525634766
    5. '_' → logprob: -7.492557525634766
    6. ' =' → logprob: -7.867557525634766
    7. '3' → logprob: -9.492557525634766
    8. '_vals' → logprob: -10.617557525634766
    9. '_vars' → logprob: -10.617557525634766
    10. '_=' → logprob: -10.617557525634766

Token 714: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -1.9361264946837764e-07
    2. 'vars' → logprob: -16.25
    3. '=
' → logprob: -17.25
    4. ' =' → logprob: -17.75
    5. '=v' → logprob: -18.625
    6. '=int' → logprob: -19.625
    7. '=args' → logprob: -19.75
    8. '=params' → logprob: -19.875
    9. '=sys' → logprob: -19.875
    10. '=

' → logprob: -20.125

Token 715: 'vars' (ID: 32791)
  Prédit: 'vars'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'vars' → logprob: -3.5954712075181305e-05
    2. 'variables' → logprob: -10.250036239624023
    3. ' vars' → logprob: -14.750036239624023
    4. 'var' → logprob: -16.125036239624023
    5. 'vals' → logprob: -18.250036239624023
    6. '(vars' → logprob: -18.250036239624023
    7. '_vars' → logprob: -19.875036239624023
    8. ' variables' → logprob: -20.625036239624023
    9. '.vars' → logprob: -21.000036239624023
    10. 'Vars' → logprob: -21.500036239624023

Token 716: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.010958211496472359
    2. 'val' → logprob: -4.760958194732666
    3. '[val' → logprob: -6.635958194732666
    4. '[var' → logprob: -7.635958194732666
    5. '_var' → logprob: -7.760958194732666
    6. 'var' → logprob: -10.135958671569824
    7. '_vars' → logprob: -10.135958671569824
    8. '_vals' → logprob: -10.885958671569824
    9. 'vals' → logprob: -12.135958671569824
    10. 'Val' → logprob: -12.260958671569824

Token 717: '[var' (ID: 109537)
  Prédit: '[var'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[var' → logprob: -0.0003809833142440766
    2. 'var' → logprob: -7.875380992889404
    3. '[' → logprob: -14.375380516052246
    4. ')var' → logprob: -16.625381469726562
    5. ' var' → logprob: -17.125381469726562
    6. '[arg' → logprob: -17.375381469726562
    7. '(var' → logprob: -17.625381469726562
    8. '[val' → logprob: -17.750381469726562
    9. '[
' → logprob: -17.875381469726562
    10. '```' → logprob: -17.875381469726562

Token 718: '2' (ID: 17)
  Prédit: 'var'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'var' → logprob: -0.5594043731689453
    2. '2' → logprob: -0.9344043731689453
    3. '[var' → logprob: -3.4344043731689453
    4. '[' → logprob: -6.934404373168945
    5. 'ar' → logprob: -7.059404373168945
    6. 'op' → logprob: -7.434404373168945
    7. 'args' → logprob: -7.559404373168945
    8. 'vars' → logprob: -9.184404373168945
    9. 'ars' → logprob: -9.559404373168945
    10. '[arg' → logprob: -9.684404373168945

Token 719: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.07020984590053558
    2. ']
' → logprob: -2.6952097415924072
    3. ']+' → logprob: -9.695209503173828
    4. '           ' → logprob: -9.695209503173828
    5. '<|end|>' → logprob: -10.320209503173828
    6. '[var' → logprob: -10.570209503173828
    7. ')' → logprob: -10.695209503173828
    8. '[' → logprob: -10.945209503173828
    9. ')
' → logprob: -12.070209503173828
    10. ' ]' → logprob: -12.320209503173828

Token 720: '           ' (ID: 352)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.41893649101257324
    2. '           ' → logprob: -1.2939364910125732
    3. ' val' → logprob: -3.5439364910125732
    4. 'v' → logprob: -3.6689364910125732
    5. '```' → logprob: -5.043936729431152
    6. '_val' → logprob: -5.543936729431152
    7. 'var' → logprob: -6.793936729431152
    8. '	val' → logprob: -7.543936729431152
    9. '``' → logprob: -8.543936729431152
    10. ',val' → logprob: -8.668936729431152

Token 721: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' (adapté à ' v') → logprob: -0.00875378493219614
    2. 'val' → logprob: -4.758753776550293
    3. '           ' → logprob: -9.133753776550293
    4. '_val' → logprob: -11.508753776550293
    5. 'var' → logprob: -11.883753776550293
    6. ' v' → logprob: -12.258753776550293
    7. '_v' → logprob: -12.633753776550293
    8. '```' → logprob: -12.633753776550293
    9. ' val' → logprob: -14.008753776550293
    10. '
' → logprob: -14.008753776550293

Token 722: '3' (ID: 18)
  Prédit: '_val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.04479844495654106
    2. 'val' → logprob: -3.1697983741760254
    3. '[val' → logprob: -6.794798374176025
    4. '[' → logprob: -8.544798851013184
    5. '_var' → logprob: -9.294798851013184
    6. 'al' → logprob: -9.294798851013184
    7. 'var' → logprob: -9.419798851013184
    8. '[var' → logprob: -9.794798851013184
    9. 'vars' → logprob: -10.294798851013184
    10. 'ar' → logprob: -10.794798851013184

Token 723: '=get' (ID: 49687)
  Prédit: '=get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=get' → logprob: -0.16895821690559387
    2. '=' → logprob: -2.4189581871032715
    3. '[get' → logprob: -2.9189581871032715
    4. 'get' → logprob: -4.6689581871032715
    5. '[' → logprob: -7.0439581871032715
    6. '=int' → logprob: -7.4189581871032715
    7. '[int' → logprob: -7.5439581871032715
    8. '(get' → logprob: -7.6689581871032715
    9. '.get' → logprob: -8.16895866394043
    10. ')' → logprob: -9.91895866394043

Token 724: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.00012439649435691535
    2. 'val' → logprob: -9.000123977661133
    3. 'Val' → logprob: -14.375123977661133
    4. '_vals' → logprob: -16.375123977661133
    5. '_VAL' → logprob: -16.625123977661133
    6. '_var' → logprob: -16.625123977661133
    7. '```' → logprob: -16.875123977661133
    8. '_' → logprob: -17.250123977661133
    9. '_v' → logprob: -17.500123977661133
    10. ''_' → logprob: -17.625123977661133

Token 725: '(op' (ID: 34275)
  Prédit: '(op'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(op' → logprob: -3.128163257315464e-07
    2. '(' → logprob: -16.125
    3. 'op' → logprob: -16.875
    4. '(args' → logprob: -17.125
    5. '(cmd' → logprob: -17.75
    6. '(
' → logprob: -17.75
    7. ' (' → logprob: -18.75
    8. ' op' → logprob: -19.25
    9. '(opt' → logprob: -19.625
    10. '	op' → logprob: -20.5

Token 726: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.0003384422743692994
    2. '[' → logprob: -8.000338554382324
    3. '```' → logprob: -14.000338554382324
    4. '(' → logprob: -15.125338554382324
    5. '   ' → logprob: -15.250338554382324
    6. ')' → logprob: -15.250338554382324
    7. '{' → logprob: -15.625338554382324
    8. '       ' → logprob: -15.750338554382324
    9. ' ' → logprob: -16.000337600708008
    10. '
' → logprob: -16.250337600708008

Token 727: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.3870997130870819
    2. ')' → logprob: -1.1370997428894043
    3. '           ' → logprob: -8.512099266052246
    4. ')
' → logprob: -10.887099266052246
    5. '       ' → logprob: -13.137099266052246
    6. '               ' → logprob: -13.637099266052246
    7. ')var' → logprob: -13.762099266052246
    8. '```' → logprob: -13.887099266052246
    9. ')

' → logprob: -14.262099266052246
    10. '   ' → logprob: -14.512099266052246

Token 728: '           ' (ID: 352)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.06719096004962921
    2. '           ' → logprob: -2.8171908855438232
    3. ' val' → logprob: -5.317191123962402
    4. '```' → logprob: -8.442191123962402
    5. '	val' → logprob: -9.942191123962402
    6. ',val' → logprob: -11.817191123962402
    7. '_val' → logprob: -12.067191123962402
    8. '       ' → logprob: -12.192191123962402
    9. '[val' → logprob: -12.192191123962402
    10. '
' → logprob: -12.442191123962402

Token 729: ' val' (ID: 1459)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' (adapté à ' val') → logprob: -8.029847231227905e-05
    2. '           ' → logprob: -9.750080108642578
    3. ' val' → logprob: -10.875080108642578
    4. '```' → logprob: -12.875080108642578
    5. '_val' → logprob: -15.625080108642578
    6. '``' → logprob: -16.375080108642578
    7. '	val' → logprob: -16.625080108642578
    8. '-val' → logprob: -17.125080108642578
    9. 'var' → logprob: -17.250080108642578
    10. '       ' → logprob: -17.500080108642578

Token 730: '=v' (ID: 89140)
  Prédit: '=v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=v' → logprob: -0.023262597620487213
    2. '=' → logprob: -3.7732625007629395
    3. '=
' → logprob: -11.648262977600098
    4. 'v' → logprob: -11.773262977600098
    5. ' =' → logprob: -14.773262977600098
    6. ' v' → logprob: -17.27326202392578
    7. '=

' → logprob: -17.27326202392578
    8. '=_' → logprob: -17.39826202392578
    9. '<v' → logprob: -17.89826202392578
    10. '=`' → logprob: -17.89826202392578

Token 731: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.08421079069375992
    2. 'ars' → logprob: -2.9592108726501465
    3. 'al' → logprob: -3.7092108726501465
    4. 'ar' → logprob: -6.2092108726501465
    5. 'als' → logprob: -6.5842108726501465
    6. 'vars' → logprob: -7.4592108726501465
    7. '_' → logprob: -8.959210395812988
    8. 'v' → logprob: -9.334210395812988
    9. 'val' → logprob: -10.459210395812988
    10. 'vals' → logprob: -10.584210395812988

Token 732: ' -' (ID: 533)
  Prédit: '-v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-v' → logprob: -0.21898111701011658
    2. '-' → logprob: -2.2189810276031494
    3. ' -' → logprob: -2.4689810276031494
    4. '-val' → logprob: -5.9689812660217285
    5. '-var' → logprob: -8.09398078918457
    6. '-vars' → logprob: -8.09398078918457
    7. '-sub' → logprob: -9.71898078918457
    8. '-op' → logprob: -10.34398078918457
    9. '-
' → logprob: -11.84398078918457
    10. '−' → logprob: -13.21898078918457

Token 733: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -1.306760805164231e-05
    2. ' v' → logprob: -11.25001335144043
    3. 'get' → logprob: -18.75001335144043
    4. 'val' → logprob: -20.62501335144043
    5. '	v' → logprob: -20.87501335144043
    6. '   ' → logprob: -21.62501335144043
    7. ' ' → logprob: -22.12501335144043
    8. '(v' → logprob: -22.50001335144043
    9. 'int' → logprob: -22.75001335144043
    10. '_v' → logprob: -23.00001335144043

Token 734: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -1.0564331205387134e-05
    2. 'v' → logprob: -11.87501049041748
    3. ' ' → logprob: -12.87501049041748
    4. '```' → logprob: -15.25001049041748
    5. 'o' → logprob: -16.000011444091797
    6. '   ' → logprob: -16.125011444091797
    7. 'val' → logprob: -16.375011444091797
    8. '[' → logprob: -16.375011444091797
    9. 'op' → logprob: -16.625011444091797
    10. '``' → logprob: -17.500011444091797

Token 735: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0025078821927309036
    2. 'if' → logprob: -6.62750768661499
    3. ' if' → logprob: -7.12750768661499
    4. '<|end|>' → logprob: -8.877508163452148
    5. '       ' → logprob: -9.127508163452148
    6. '
' → logprob: -9.877508163452148
    7. '               ' → logprob: -10.877508163452148
    8. '            
' → logprob: -10.877508163452148
    9. '          ' → logprob: -11.252508163452148
    10. '            ' → logprob: -12.002508163452148

Token 736: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.001567353610880673
    2. 'if' → logprob: -7.126567363739014
    3. '<|end|>' → logprob: -8.001566886901855
    4. ' if' → logprob: -8.251566886901855
    5. '       ' → logprob: -9.126566886901855
    6. '               ' → logprob: -10.876566886901855
    7. '          ' → logprob: -11.376566886901855
    8. '            
' → logprob: -11.751566886901855
    9. '```' → logprob: -12.126566886901855
    10. '   ' → logprob: -12.626566886901855

Token 737: ' if' (ID: 538)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.38824203610420227
    2. 'if' (adapté à ' if') → logprob: -1.1382420063018799
    3. ' if' → logprob: -6.638242244720459
    4. '       ' → logprob: -9.8882417678833
    5. '          ' → logprob: -12.7632417678833
    6. '               ' → logprob: -12.8882417678833
    7. '   ' → logprob: -13.5132417678833
    8. '```' → logprob: -13.7632417678833
    9. '         ' → logprob: -14.2632417678833
    10. '	if' → logprob: -14.7632417678833

Token 738: ' val' (ID: 1459)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.029750604182481766
    2. ' val' → logprob: -3.5297505855560303
    3. '(val' → logprob: -16.27975082397461
    4. '[val' → logprob: -18.15475082397461
    5. '0' → logprob: -18.77975082397461
    6. '	val' → logprob: -19.40475082397461
    7. '   ' → logprob: -19.65475082397461
    8. '.val' → logprob: -20.02975082397461
    9. '_val' → logprob: -20.65475082397461
    10. '           ' → logprob: -20.65475082397461

Token 739: '<' (ID: 27)
  Prédit: '<'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<' → logprob: -3.130576806142926e-05
    2. ' <' → logprob: -10.375031471252441
    3. '   ' → logprob: -18.750030517578125
    4. ')<' → logprob: -19.000030517578125
    5. '           ' → logprob: -19.625030517578125
    6. '       ' → logprob: -19.875030517578125
    7. '[' → logprob: -20.125030517578125
    8. ' ' → logprob: -20.500030517578125
    9. 'val' → logprob: -20.500030517578125
    10. '```' → logprob: -21.000030517578125

Token 740: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.688212614681106e-05
    2. ' ' → logprob: -11.000017166137695
    3. '```' → logprob: -16.625017166137695
    4. '[' → logprob: -16.750017166137695
    5. '   ' → logprob: -17.625017166137695
    6. '<|end|>' → logprob: -18.375017166137695
    7. '
' → logprob: -18.500017166137695
    8. '16' → logprob: -19.125017166137695
    9. '=' → logprob: -19.875017166137695
    10. '(' → logprob: -20.625017166137695

Token 741: ' or' (ID: 503)
  Prédit: ' or'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.10022392123937607
    2. 'or' → logprob: -2.350224018096924
    3. '<|end|>' → logprob: -11.600223541259766
    4. '           ' → logprob: -12.475223541259766
    5. '<' → logprob: -13.475223541259766
    6. '	or' → logprob: -13.600223541259766
    7. '```' → logprob: -14.850223541259766
    8. '[' → logprob: -15.350223541259766
    9. ')' → logprob: -15.475223541259766
    10. ' ' → logprob: -15.725223541259766

Token 742: ' val' (ID: 1459)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.0046487110666930676
    2. ' val' → logprob: -5.379648685455322
    3. '           ' → logprob: -10.75464916229248
    4. '(val' → logprob: -12.37964916229248
    5. 'or' → logprob: -14.12964916229248
    6. '[val' → logprob: -14.12964916229248
    7. '```' → logprob: -15.00464916229248
    8. '               ' → logprob: -15.50464916229248
    9. '   ' → logprob: -15.75464916229248
    10. 'var' → logprob: -15.87964916229248

Token 743: '>=' (ID: 20974)
  Prédit: '>='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>=' → logprob: -0.08556988090276718
    2. 'or' → logprob: -2.5855698585510254
    3. '0' → logprob: -5.835569858551025
    4. ' >=' → logprob: -6.335569858551025
    5. ' or' → logprob: -7.210569858551025
    6. '<' → logprob: -8.085570335388184
    7. 'val' → logprob: -8.335570335388184
    8. '[' → logprob: -8.585570335388184
    9. '   ' → logprob: -8.585570335388184
    10. '```' → logprob: -9.085570335388184

Token 744: '16' (ID: 1125)
  Prédit: '16'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '16' → logprob: -9.088346359931165e-07
    2. ' ' → logprob: -14.000000953674316
    3. '   ' → logprob: -18.0
    4. '
' → logprob: -18.0
    5. '```' → logprob: -19.0
    6. '1' → logprob: -19.5
    7. 'int' → logprob: -20.875
    8. '' → logprob: -21.25
    9. '``' → logprob: -21.5
    10. '016' → logprob: -21.625

Token 745: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.6417421102523804
    2. ':
' → logprob: -1.1417421102523804
    3. '               ' → logprob: -1.8917421102523804
    4. '           ' → logprob: -6.39174222946167
    5. ':return' → logprob: -6.51674222946167
    6. '):
' → logprob: -8.516741752624512
    7. '):' → logprob: -9.641741752624512
    8. '              ' → logprob: -10.391741752624512
    9. ')' → logprob: -10.516741752624512
    10. '{
' → logprob: -11.266741752624512

Token 746: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.00043233807082287967
    2. 'return' → logprob: -8.125432014465332
    3. '           ' → logprob: -9.500432014465332
    4. ' return' → logprob: -10.000432014465332
    5. '```' → logprob: -12.250432014465332
    6. ':return' → logprob: -12.500432014465332
    7. '              ' → logprob: -12.875432014465332
    8. '<|end|>' → logprob: -14.000432014465332
    9. '   ' → logprob: -14.250432014465332
    10. '                   ' → logprob: -14.375432014465332

Token 747: ' return' (ID: 622)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.03986693173646927
    2. 'return' (adapté à ' return') → logprob: -3.9148669242858887
    3. ' return' → logprob: -4.164866924285889
    4. '           ' → logprob: -5.664866924285889
    5. '```' → logprob: -9.414867401123047
    6. '                   ' → logprob: -10.789867401123047
    7. ' ' → logprob: -11.164867401123047
    8. '   ' → logprob: -12.289867401123047
    9. ' ' → logprob: -12.414867401123047
    10. '              ' → logprob: -13.039867401123047

Token 748: ' vars' (ID: 36194)
  Prédit: 'vars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'vars' → logprob: -0.00026526954025030136
    2. ' vars' → logprob: -8.250265121459961
    3. 'val' → logprob: -13.375265121459961
    4. 'var' → logprob: -13.750265121459961
    5. 'variables' → logprob: -14.500265121459961
    6. '(vars' → logprob: -14.625265121459961
    7. 'vals' → logprob: -14.750265121459961
    8. 'None' → logprob: -17.25026512145996
    9. '```' → logprob: -17.37526512145996
    10. '_vars' → logprob: -19.12526512145996

Token 749: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.00015955790877342224
    2. 'val' → logprob: -9.00015926361084
    3. '_var' → logprob: -10.62515926361084
    4. '_vars' → logprob: -11.75015926361084
    5. 'vars' → logprob: -13.37515926361084
    6. 'Val' → logprob: -14.00015926361084
    7. '_vals' → logprob: -14.12515926361084
    8. '           ' → logprob: -15.37515926361084
    9. 'vals' → logprob: -15.62515926361084
    10. '_VAL' → logprob: -16.000160217285156

Token 750: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.052143532782793045
    2. 'vars' → logprob: -3.4271435737609863
    3. '       ' → logprob: -4.052143573760986
    4. 'variables' → logprob: -8.302143096923828
    5. ' vars' → logprob: -8.927143096923828
    6. '```' → logprob: -9.052143096923828
    7. '               ' → logprob: -9.177143096923828
    8. '<|end|>' → logprob: -9.552143096923828
    9. '
' → logprob: -10.052143096923828
    10. '_vars' → logprob: -10.177143096923828

Token 751: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.2709832489490509
    2. '       ' → logprob: -1.6459832191467285
    3. 'vars' → logprob: -3.1459832191467285
    4. '```' → logprob: -7.3959832191467285
    5. '   ' → logprob: -8.020983695983887
    6. 'variables' → logprob: -8.145983695983887
    7. ' vars' → logprob: -8.770983695983887
    8. '               ' → logprob: -10.020983695983887
    9. '_vars' → logprob: -10.770983695983887
    10. '(vars' → logprob: -10.895983695983887

Token 752: ' vars' (ID: 36194)
  Prédit: 'vars'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'vars' (adapté à ' vars') → logprob: -0.10204624384641647
    2. '           ' → logprob: -2.352046251296997
    3. 'variables' → logprob: -7.102046012878418
    4. '       ' → logprob: -7.727046012878418
    5. ' vars' → logprob: -8.352046012878418
    6. '               ' → logprob: -8.602046012878418
    7. '```' → logprob: -9.227046012878418
    8. '   ' → logprob: -10.727046012878418
    9. 'var' → logprob: -11.352046012878418
    10. ' variables' → logprob: -12.227046012878418

Token 753: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.0003939728485420346
    2. '_var' → logprob: -8.875393867492676
    3. '[val' → logprob: -9.125393867492676
    4. 'val' → logprob: -9.375393867492676
    5. '[var' → logprob: -9.750393867492676
    6. 'Val' → logprob: -13.875393867492676
    7. '_VAL' → logprob: -14.125393867492676
    8. 'var' → logprob: -15.875393867492676
    9. '_set' → logprob: -16.375394821166992
    10. '_vals' → logprob: -17.000394821166992

Token 754: '[var' (ID: 109537)
  Prédit: '[var'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[var' → logprob: -9.014684110297821e-06
    2. 'var' → logprob: -12.125008583068848
    3. '[' → logprob: -12.625008583068848
    4. '[val' → logprob: -16.625009536743164
    5. '```' → logprob: -16.750009536743164
    6. '[arg' → logprob: -17.875009536743164
    7. ')var' → logprob: -18.250009536743164
    8. '[...]' → logprob: -18.375009536743164
    9. '[v' → logprob: -18.500009536743164
    10. '           ' → logprob: -18.750009536743164

Token 755: '1' (ID: 16)
  Prédit: '[var'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[var' → logprob: -0.09767542034387589
    2. '1' → logprob: -2.597675323486328
    3. 'var' → logprob: -4.097675323486328
    4. '[arg' → logprob: -7.097675323486328
    5. '[' → logprob: -7.222675323486328
    6. '[sub' → logprob: -8.597675323486328
    7. 'args' → logprob: -9.222675323486328
    8. '[user' → logprob: -9.597675323486328
    9. '{' → logprob: -10.597675323486328
    10. '```' → logprob: -10.972675323486328

Token 756: ']=' (ID: 9539)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -8.65707261255011e-06
    2. ']=' → logprob: -12.750008583068848
    3. '=
' → logprob: -12.750008583068848
    4. ')=' → logprob: -13.125008583068848
    5. '=

' → logprob: -14.875008583068848
    6. ' =' → logprob: -16.500009536743164
    7. '[val' → logprob: -16.500009536743164
    8. '=v' → logprob: -16.875009536743164
    9. '=value' → logprob: -16.875009536743164
    10. '=}' → logprob: -17.625009536743164

Token 757: 'val' (ID: 1105)
  Prédit: 'val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: 0.0
    2. ' val' → logprob: -17.0
    3. 'var' → logprob: -19.125
    4. '(val' → logprob: -22.5
    5. '	val' → logprob: -23.75
    6. '```' → logprob: -24.25
    7. '[val' → logprob: -24.375
    8. '_val' → logprob: -24.875
    9. 'Val' → logprob: -25.875
    10. '.val' → logprob: -26.0

Token 758: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.038647815585136414
    2. 'elif' → logprob: -3.2886478900909424
    3. 'pc' → logprob: -8.538647651672363
    4. '```' → logprob: -8.788647651672363
    5. '   ' → logprob: -9.788647651672363
    6. '	' → logprob: -9.788647651672363
    7. ' elif' → logprob: -10.038647651672363
    8. 'else' → logprob: -11.163647651672363
    9. '<|end|>' → logprob: -11.288647651672363
    10. '​' → logprob: -11.663647651672363

Token 759: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.012745782732963562
    2. 'elif' → logprob: -4.3877458572387695
    3. '```' → logprob: -8.63774585723877
    4. ' elif' → logprob: -10.01274585723877
    5. '   ' → logprob: -11.88774585723877
    6. '	elif' → logprob: -13.13774585723877
    7. '           ' → logprob: -13.38774585723877
    8. '	' → logprob: -13.63774585723877
    9. 'else' → logprob: -14.38774585723877
    10. ' ' → logprob: -14.88774585723877

Token 760: ' elif' (ID: 9497)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.25625672936439514
    2. 'elif' (adapté à ' elif') → logprob: -1.5062566995620728
    3. '```' → logprob: -5.631256580352783
    4. ' elif' → logprob: -7.256256580352783
    5. '   ' → logprob: -11.006257057189941
    6. '	elif' → logprob: -12.631257057189941
    7. ' ' → logprob: -12.756257057189941
    8. 'el' → logprob: -13.631257057189941
    9. '``' → logprob: -14.006257057189941
    10. '           ' → logprob: -14.131257057189941

Token 761: ' cmd' (ID: 11704)
  Prédit: 'cmd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cmd' → logprob: -0.16023224592208862
    2. ' cmd' → logprob: -1.9102323055267334
    3. '(cmd' → logprob: -12.160232543945312
    4. '	cmd' → logprob: -13.910232543945312
    5. 'code' → logprob: -14.285232543945312
    6. '.cmd' → logprob: -14.535232543945312
    7. ' code' → logprob: -14.910232543945312
    8. 'command' → logprob: -15.910232543945312
    9. '```' → logprob: -16.410232543945312
    10. ''' → logprob: -16.535232543945312

Token 762: '=='' (ID: 20651)
  Prédit: '==''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=='' → logprob: -0.00010318557906430215
    2. '==' → logprob: -9.250102996826172
    3. '=="' → logprob: -12.750102996826172
    4. '==
' → logprob: -13.375102996826172
    5. '==='' → logprob: -13.625102996826172
    6. ' =='' → logprob: -14.375102996826172
    7. ']=='' → logprob: -14.750102996826172
    8. '']=='' → logprob: -16.000102996826172
    9. ' ==' → logprob: -16.125102996826172
    10. '='' → logprob: -16.250102996826172

Token 763: 'SET' (ID: 11481)
  Prédit: 'SET'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'SET' → logprob: -3.531315314830863e-06
    2. ''' → logprob: -12.750003814697266
    3. ''S' → logprob: -15.375003814697266
    4. 'set' → logprob: -15.625003814697266
    5. ' SET' → logprob: -16.000003814697266
    6. '	SET' → logprob: -17.625003814697266
    7. '_SET' → logprob: -18.750003814697266
    8. 'SETS' → logprob: -18.875003814697266
    9. ''s' → logprob: -19.625003814697266
    10. '.SET' → logprob: -19.750003814697266

Token 764: '':
' (ID: 7669)
  Prédit: ' var'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' var' → logprob: -0.17949898540973663
    2. 'var' → logprob: -2.1794989109039307
    3. '':
' → logprob: -3.1794989109039307
    4. ''' → logprob: -5.67949914932251
    5. '':' → logprob: -6.05449914932251
    6. '(var' → logprob: -6.80449914932251
    7. ''):
' → logprob: -7.05449914932251
    8. '```' → logprob: -7.80449914932251
    9. '[var' → logprob: -8.054498672485352
    10. '']:
' → logprob: -8.429498672485352

Token 765: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.2820250391960144
    2. 'var' → logprob: -1.6570250988006592
    3. ' var' → logprob: -2.907025098800659
    4. '       ' → logprob: -7.90702486038208
    5. '   ' → logprob: -10.782025337219238
    6. '```' → logprob: -12.032025337219238
    7. '          ' → logprob: -13.782025337219238
    8. '               ' → logprob: -13.782025337219238
    9. '(var' → logprob: -14.157025337219238
    10. '_var' → logprob: -14.407025337219238

Token 766: ' var' (ID: 972)
  Prédit: 'var'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'var' (adapté à ' var') → logprob: -0.005568009335547686
    2. ' var' → logprob: -5.255568027496338
    3. '           ' → logprob: -8.00556755065918
    4. '       ' → logprob: -14.50556755065918
    5. '   ' → logprob: -16.75556755065918
    6. '```' → logprob: -18.50556755065918
    7. '	var' → logprob: -18.75556755065918
    8. '_var' → logprob: -19.00556755065918
    9. '(var' → logprob: -19.38056755065918
    10. 'def' → logprob: -19.38056755065918

Token 767: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.5954712075181305e-05
    2. 'var' → logprob: -10.375036239624023
    3. '[var' → logprob: -13.500036239624023
    4. ' var' → logprob: -13.750036239624023
    5. '<|end|>' → logprob: -14.125036239624023
    6. 'a' → logprob: -15.500036239624023
    7. 'args' → logprob: -15.625036239624023
    8. '=' → logprob: -15.750036239624023
    9. '```' → logprob: -15.750036239624023
    10. '_args' → logprob: -16.125036239624023

Token 768: '=args' (ID: 70251)
  Prédit: '=args'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=args' → logprob: -0.006721178535372019
    2. '=' → logprob: -5.006721019744873
    3. ' =' → logprob: -13.381721496582031
    4. '=params' → logprob: -13.631721496582031
    5. 'args' → logprob: -14.256721496582031
    6. '=
' → logprob: -14.256721496582031
    7. '=a' → logprob: -14.381721496582031
    8. ',args' → logprob: -14.506721496582031
    9. '_=' → logprob: -16.00672149658203
    10. '=user' → logprob: -16.00672149658203

Token 769: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.5094070477061905e-05
    2. '0' → logprob: -11.500015258789062
    3. '1' → logprob: -12.500015258789062
    4. 'def' → logprob: -14.375015258789062
    5. '=' → logprob: -15.875015258789062
    6. '```' → logprob: -16.125015258789062
    7. '[
' → logprob: -16.375015258789062
    8. ' [' → logprob: -16.375015258789062
    9. 's' → logprob: -16.625015258789062
    10. '
' → logprob: -17.750015258789062

Token 770: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.001504982472397387
    2. '[' → logprob: -6.501504898071289
    3. ' ' → logprob: -13.251504898071289
    4. '1' → logprob: -14.876504898071289
    5. '   ' → logprob: -15.501504898071289
    6. '```' → logprob: -16.00150489807129
    7. '۰' → logprob: -17.37650489807129
    8. 'a' → logprob: -17.87650489807129
    9. ' [' → logprob: -18.12650489807129
    10. '...' → logprob: -18.12650489807129

Token 771: ']
' (ID: 1592)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.762053370475769
    2. '           ' → logprob: -1.387053370475769
    3. ',' → logprob: -2.1370534896850586
    4. 'if' → logprob: -2.8870534896850586
    5. ']' → logprob: -3.5120534896850586
    6. 'var' → logprob: -3.5120534896850586
    7. ',val' → logprob: -4.137053489685059
    8. 'val' → logprob: -4.887053489685059
    9. '            
' → logprob: -5.137053489685059
    10. ']
' → logprob: -5.262053489685059

Token 772: '           ' (ID: 352)
  Prédit: 'var'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'var' → logprob: -0.5437036752700806
    2. '           ' → logprob: -1.0437036752700806
    3. '            
' → logprob: -3.668703556060791
    4. '=' → logprob: -4.543703556060791
    5. ' var' → logprob: -5.168703556060791
    6. 'val' → logprob: -5.293703556060791
    7. '
' → logprob: -5.293703556060791
    8. 'op' → logprob: -5.543703556060791
    9. ' 
' → logprob: -5.918703556060791
    10. 'args' → logprob: -6.418703556060791

Token 773: ' op' (ID: 991)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.6752452850341797
    2. 'var' → logprob: -1.5502452850341797
    3. 'val' → logprob: -1.5502452850341797
    4. 'op' (adapté à ' op') → logprob: -2.8002452850341797
    5. 'x' → logprob: -6.17524528503418
    6. '           ' → logprob: -6.17524528503418
    7. 'arg' → logprob: -6.80024528503418
    8. 'value' → logprob: -8.55024528503418
    9. 'v' → logprob: -8.67524528503418
    10. 'try' → logprob: -10.17524528503418

Token 774: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.04181959480047226
    2. '3' → logprob: -3.7918195724487305
    3. '1' → logprob: -4.1668195724487305
    4. '=' → logprob: -6.1668195724487305
    5. '
' → logprob: -8.54181957244873
    6. '       ' → logprob: -8.54181957244873
    7. ' =' → logprob: -9.29181957244873
    8. '   ' → logprob: -9.66681957244873
    9. '           ' → logprob: -10.41681957244873
    10. '```' → logprob: -10.54181957244873

Token 775: '=args' (ID: 70251)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.26994022727012634
    2. '=args' → logprob: -2.019940137863159
    3. '=get' → logprob: -2.269940137863159
    4. '=_' → logprob: -8.394940376281738
    5. '=int' → logprob: -9.519940376281738
    6. '=a' → logprob: -9.644940376281738
    7. '=
' → logprob: -9.644940376281738
    8. '=params' → logprob: -10.144940376281738
    9. '=sys' → logprob: -10.144940376281738
    10. ' =' → logprob: -10.894940376281738

Token 776: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -7.703443770878948e-06
    2. 'args' → logprob: -12.375007629394531
    3. 's' → logprob: -13.750007629394531
    4. 'def' → logprob: -14.875007629394531
    5. '```' → logprob: -15.000007629394531
    6. '1' → logprob: -15.125007629394531
    7. '=' → logprob: -15.250007629394531
    8. '0' → logprob: -15.250007629394531
    9. '_[' → logprob: -15.750007629394531
    10. '
' → logprob: -15.750007629394531

Token 777: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0007287554908543825
    2. '2' → logprob: -7.625728607177734
    3. '0' → logprob: -8.375728607177734
    4. '[' → logprob: -12.000728607177734
    5. ' ' → logprob: -13.125728607177734
    6. '   ' → logprob: -14.500728607177734
    7. '3' → logprob: -14.625728607177734
    8. '(' → logprob: -15.000728607177734
    9. '```' → logprob: -15.250728607177734
    10. ']' → logprob: -15.875728607177734

Token 778: ']
' (ID: 1592)
  Prédit: ')
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.25729358196258545
    2. '           ' → logprob: -1.6322935819625854
    3. ']
' → logprob: -4.632293701171875
    4. ')' → logprob: -4.632293701171875
    5. 'if' → logprob: -5.132293701171875
    6. '       ' → logprob: -5.507293701171875
    7. 'def' → logprob: -7.632293701171875
    8. ']' → logprob: -8.007293701171875
    9. ' if' → logprob: -8.132293701171875
    10. '```' → logprob: -8.882293701171875

Token 779: '           ' (ID: 352)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.5440015196800232
    2. '           ' → logprob: -1.294001579284668
    3. 'if' → logprob: -2.419001579284668
    4. 'v' → logprob: -2.919001579284668
    5. '```' → logprob: -7.169001579284668
    6. ' if' → logprob: -7.669001579284668
    7. '       ' → logprob: -8.169001579284668
    8. ' val' → logprob: -8.544001579284668
    9. 'try' → logprob: -8.544001579284668
    10. '
' → logprob: -8.669001579284668

Token 780: ' if' (ID: 538)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.15375865995883942
    2. 'if' (adapté à ' if') → logprob: -2.0287587642669678
    3. '           ' → logprob: -5.153758525848389
    4. 'v' → logprob: -5.278758525848389
    5. 'try' → logprob: -9.903759002685547
    6. ' val' → logprob: -10.653759002685547
    7. '               ' → logprob: -11.403759002685547
    8. ' if' → logprob: -11.528759002685547
    9. '```' → logprob: -11.528759002685547
    10. 'value' → logprob: -11.653759002685547

Token 781: ' op' (ID: 991)
  Prédit: 'op'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'op' → logprob: -0.008615515194833279
    2. ' op' → logprob: -4.758615493774414
    3. '(op' → logprob: -14.383615493774414
    4. 'opf' → logprob: -15.508615493774414
    5. '	op' → logprob: -15.758615493774414
    6. 'not' → logprob: -17.133615493774414
    7. 'len' → logprob: -18.133615493774414
    8. 'opcode' → logprob: -18.258615493774414
    9. '_op' → logprob: -18.383615493774414
    10. '.op' → logprob: -18.508615493774414

Token 782: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -3.810037742368877e-05
    2. 'op' → logprob: -11.125038146972656
    3. '(op' → logprob: -11.500038146972656
    4. '_' → logprob: -12.250038146972656
    5. 'len' → logprob: -13.250038146972656
    6. '```' → logprob: -13.500038146972656
    7. '[' → logprob: -14.000038146972656
    8. '(' → logprob: -14.375038146972656
    9. 'elif' → logprob: -14.375038146972656
    10. '₂' → logprob: -14.500038146972656

Token 783: '.is' (ID: 3109)
  Prédit: '.is'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.is' → logprob: -7.684157026233152e-05
    2. 'is' → logprob: -10.375077247619629
    3. '.' → logprob: -10.500077247619629
    4. '[' → logprob: -11.875077247619629
    5. '=is' → logprob: -12.000077247619629
    6. 'isdigit' → logprob: -13.375077247619629
    7. ' .' → logprob: -14.000077247619629
    8. '.startswith' → logprob: -14.500077247619629
    9. '=' → logprob: -15.125077247619629
    10. '_is' → logprob: -15.250077247619629

Token 784: 'alpha' (ID: 15453)
  Prédit: 'alpha'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'alpha' → logprob: -3.8889261304575484e-06
    2. '_alpha' → logprob: -12.875003814697266
    3. '(alpha' → logprob: -15.125003814697266
    4. ' alpha' → logprob: -15.125003814697266
    5. '.alpha' → logprob: -15.875003814697266
    6. 'al' → logprob: -16.000003814697266
    7. 'a' → logprob: -16.250003814697266
    8. 'digit' → logprob: -16.250003814697266
    9. 'alphabet' → logprob: -16.250003814697266
    10. 'apha' → logprob: -16.625003814697266

Token 785: '():
' (ID: 8595)
  Prédit: '():
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():
' → logprob: -0.06227295845746994
    2. '():' → logprob: -2.8122730255126953
    3. '()' → logprob: -8.187273025512695
    4. '():
' → logprob: -10.687273025512695
    5. '():

' → logprob: -12.937273025512695
    6. '()):
' → logprob: -14.187273025512695
    7. '()==' → logprob: -15.062273025512695
    8. '()>' → logprob: -15.187273025512695
    9. ':' → logprob: -15.312273025512695
    10. ':
' → logprob: -15.687273025512695

Token 786: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.008104454725980759
    2. '           ' → logprob: -5.88310432434082
    3. '<|end|>' → logprob: -6.63310432434082
    4. '```' → logprob: -6.88310432434082
    5. ':
' → logprob: -7.38310432434082
    6. ':' → logprob: -7.38310432434082
    7. '[' → logprob: -8.50810432434082
    8. 'var' → logprob: -8.75810432434082
    9. '       ' → logprob: -8.75810432434082
    10. '                   ' → logprob: -9.25810432434082

Token 787: ' val' (ID: 1459)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' (adapté à ' val') → logprob: -0.07883834838867188
    2. 'vars' → logprob: -2.703838348388672
    3. 'v' → logprob: -5.078838348388672
    4. '               ' → logprob: -6.953838348388672
    5. '           ' → logprob: -7.203838348388672
    6. 'vals' → logprob: -7.453838348388672
    7. 'var' → logprob: -9.078838348388672
    8. 'variables' → logprob: -9.578838348388672
    9. ' val' → logprob: -9.703838348388672
    10. 'if' → logprob: -9.703838348388672

Token 788: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -8.895480277715251e-06
    2. ' =' → logprob: -11.875008583068848
    3. '=get' → logprob: -14.375008583068848
    4. '=params' → logprob: -15.000008583068848
    5. '=args' → logprob: -15.000008583068848
    6. '=v' → logprob: -15.500008583068848
    7. '=int' → logprob: -15.625008583068848
    8. '=sys' → logprob: -16.000009536743164
    9. '=
' → logprob: -16.250009536743164
    10. '=

' → logprob: -17.125009536743164

Token 789: 'vars' (ID: 32791)
  Prédit: 'vars'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'vars' → logprob: -4.4849443838757e-06
    2. 'variables' → logprob: -12.500004768371582
    3. ' vars' → logprob: -14.375004768371582
    4. 'vals' → logprob: -16.500003814697266
    5. 'var' → logprob: -17.875003814697266
    6. '   ' → logprob: -18.875003814697266
    7. '(vars' → logprob: -19.750003814697266
    8. '```' → logprob: -20.625003814697266
    9. '0' → logprob: -21.000003814697266
    10. 'val' → logprob: -21.375003814697266

Token 790: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -2.129266067640856e-05
    2. 'val' → logprob: -11.125020980834961
    3. '_var' → logprob: -12.875020980834961
    4. '_set' → logprob: -13.500020980834961
    5. '[val' → logprob: -13.500020980834961
    6. 'Val' → logprob: -14.375020980834961
    7. '_VAL' → logprob: -15.750020980834961
    8. '_vars' → logprob: -16.00002098083496
    9. '_vals' → logprob: -16.00002098083496
    10. '_dict' → logprob: -17.87502098083496

Token 791: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -1.6240566083070007e-06
    2. 'op' → logprob: -13.500001907348633
    3. '(op' → logprob: -15.375001907348633
    4. ' [' → logprob: -18.500001907348633
    5. '_op' → logprob: -19.500001907348633
    6. '[var' → logprob: -19.875001907348633
    7. '	op' → logprob: -19.875001907348633
    8. '[o' → logprob: -20.375001907348633
    9. '   ' → logprob: -20.500001907348633
    10. '.op' → logprob: -20.500001907348633

Token 792: 'op' (ID: 467)
  Prédit: 'op'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'op' → logprob: -9.088346359931165e-07
    2. ' op' → logprob: -14.375000953674316
    3. '[' → logprob: -15.250000953674316
    4. '(op' → logprob: -18.375
    5. 'opt' → logprob: -20.5
    6. '
' → logprob: -20.625
    7. '`' → logprob: -20.625
    8. '	op' → logprob: -20.625
    9. 'opf' → logprob: -20.875
    10. '```' → logprob: -20.875

Token 793: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -5.512236498361744e-07
    2. '```' → logprob: -16.1875
    3. '[' → logprob: -17.0
    4. '۲' → logprob: -17.1875
    5. 'op' → logprob: -17.4375
    6. '
' → logprob: -17.5
    7. '২' → logprob: -17.75
    8. '２' → logprob: -18.3125
    9. '₂' → logprob: -18.375
    10. '``' → logprob: -18.4375

Token 794: ']
' (ID: 1592)
  Prédit: ']
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']
' → logprob: -0.466202974319458
    2. ']' → logprob: -1.966202974319458
    3. ')
' → logprob: -2.341202974319458
    4. '           ' → logprob: -2.716202974319458
    5. ')' → logprob: -3.091202974319458
    6. '               ' → logprob: -3.841202974319458
    7. '<|end|>' → logprob: -6.966202735900879
    8. '       ' → logprob: -7.341202735900879
    9. '                   ' → logprob: -7.841202735900879
    10. 'else' → logprob: -8.466202735900879

Token 795: '           ' (ID: 352)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 796: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.019073404371738434
    2. '           ' → logprob: -4.019073486328125
    3. ' else' → logprob: -7.019073486328125
    4. '       ' → logprob: -11.144073486328125
    5. 'elif' → logprob: -12.019073486328125
    6. '	else' → logprob: -12.144073486328125
    7. '	       ' → logprob: -13.894073486328125
    8. '               ' → logprob: -14.269073486328125
    9. '		' → logprob: -15.144073486328125
    10. '_else' → logprob: -15.644073486328125

Token 797: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.4440782070159912
    2. '=' → logprob: -1.9440782070159912
    3. ':
' → logprob: -2.069078207015991
    4. '{' → logprob: -3.819078207015991
    5. ' =' → logprob: -3.944078207015991
    6. '           ' → logprob: -3.944078207015991
    7. '               ' → logprob: -4.94407844543457
    8. '<|end|>' → logprob: -5.06907844543457
    9. 'val' → logprob: -5.31907844543457
    10. '=True' → logprob: -6.06907844543457

Token 798: '               ' (ID: 506)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.039125390350818634
    2. '           ' → logprob: -3.539125442504883
    3. ' val' → logprob: -4.789125442504883
    4. '               ' → logprob: -7.164125442504883
    5. '	val' → logprob: -9.664125442504883
    6. 'int' → logprob: -9.789125442504883
    7. 'var' → logprob: -10.539125442504883
    8. ',val' → logprob: -10.789125442504883
    9. '[val' → logprob: -11.039125442504883
    10. '   ' → logprob: -11.289125442504883

Token 799: ' val' (ID: 1459)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' (adapté à ' val') → logprob: -0.0002614550176076591
    2. ' val' → logprob: -8.250261306762695
    3. '           ' → logprob: -15.750261306762695
    4. '	val' → logprob: -16.875261306762695
    5. ',val' → logprob: -18.375261306762695
    6. '               ' → logprob: -18.625261306762695
    7. '
' → logprob: -19.375261306762695
    8. 'try' → logprob: -19.500261306762695
    9. '_val' → logprob: -19.625261306762695
    10. '[val' → logprob: -19.750261306762695

Token 800: '=int' (ID: 37431)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.474078506231308
    2. '=int' → logprob: -0.9740785360336304
    3. ' =' → logprob: -14.224078178405762
    4. '=
' → logprob: -14.849078178405762
    5. '=get' → logprob: -15.474078178405762
    6. '=len' → logprob: -16.974079132080078
    7. '=value' → logprob: -17.099079132080078
    8. 'int' → logprob: -17.099079132080078
    9. '=float' → logprob: -17.224079132080078
    10. '=sys' → logprob: -17.224079132080078

Token 801: '(op' (ID: 34275)
  Prédit: '(op'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(op' → logprob: -1.9361264946837764e-07
    2. 'op' → logprob: -16.125
    3. '(' → logprob: -17.625
    4. ' (' → logprob: -18.5
    5. '	op' → logprob: -19.5
    6. ' op' → logprob: -19.625
    7. '(opt' → logprob: -21.25
    8. '_op' → logprob: -21.75
    9. '(OP' → logprob: -21.875
    10. '(operator' → logprob: -22.0

Token 802: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.00026574634830467403
    2. '(op' → logprob: -8.250266075134277
    3. '[' → logprob: -13.250266075134277
    4. '(' → logprob: -13.375266075134277
    5. ')' → logprob: -15.125266075134277
    6. 'o' → logprob: -15.500266075134277
    7. 'op' → logprob: -15.625266075134277
    8. '```' → logprob: -15.875266075134277
    9. '₂' → logprob: -17.12526512145996
    10. '.op' → logprob: -17.25026512145996

Token 803: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0037401027511805296
    2. ')
' → logprob: -5.753740310668945
    3. '           ' → logprob: -7.503740310668945
    4. ')return' → logprob: -12.753740310668945
    5. '<|end|>' → logprob: -13.003740310668945
    6. '       ' → logprob: -13.753740310668945
    7. '               ' → logprob: -13.753740310668945
    8. ' )' → logprob: -14.378740310668945
    9. ')
' → logprob: -14.503740310668945
    10. ');' → logprob: -15.003740310668945

Token 804: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0017270608805119991
    2. '```' → logprob: -7.001727104187012
    3. ' if' → logprob: -7.501727104187012
    4. 'if' → logprob: -9.001727104187012
    5. '<|end|>' → logprob: -9.751727104187012
    6. '       ' → logprob: -9.751727104187012
    7. '            
' → logprob: -12.126727104187012
    8. '          ' → logprob: -12.126727104187012
    9. '   ' → logprob: -12.876727104187012
    10. '               ' → logprob: -13.001727104187012

Token 805: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.16035644710063934
    2. '           ' → logprob: -1.9103564023971558
    3. ' if' → logprob: -9.035356521606445
    4. '       ' → logprob: -11.785356521606445
    5. 'val' → logprob: -12.785356521606445
    6. '```' → logprob: -13.535356521606445
    7. '   ' → logprob: -13.910356521606445
    8. '	if' → logprob: -16.285356521606445
    9. 'If' → logprob: -16.410356521606445
    10. '               ' → logprob: -16.410356521606445

Token 806: ' val' (ID: 1459)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.0001600347168277949
    2. ' val' → logprob: -8.750160217285156
    3. '0' → logprob: -13.500160217285156
    4. '(val' → logprob: -16.500160217285156
    5. '	val' → logprob: -18.125160217285156
    6. ' ' → logprob: -18.250160217285156
    7. '   ' → logprob: -18.375160217285156
    8. 'not' → logprob: -19.375160217285156
    9. '  ' → logprob: -20.250160217285156
    10. '[val' → logprob: -20.750160217285156

Token 807: '<' (ID: 27)
  Prédit: '<'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<' → logprob: -0.00014036978245712817
    2. ' <' → logprob: -8.875140190124512
    3. '>=' → logprob: -15.125140190124512
    4. ')<' → logprob: -16.500141143798828
    5. '[' → logprob: -17.000141143798828
    6. '   ' → logprob: -17.375141143798828
    7. '<int' → logprob: -17.750141143798828
    8. '```' → logprob: -17.750141143798828
    9. '<|end|>' → logprob: -17.875141143798828
    10. '<len' → logprob: -18.000141143798828

Token 808: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.9361264946837764e-07
    2. ' ' → logprob: -15.75
    3. '```' → logprob: -17.875
    4. '=' → logprob: -19.0
    5. '<|end|>' → logprob: -20.5
    6. '
' → logprob: -20.875
    7. '   ' → logprob: -21.0
    8. '۰' → logprob: -21.125
    9. '[' → logprob: -22.25
    10. '`' → logprob: -22.375

Token 809: ' or' (ID: 503)
  Prédit: ' or'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.001705771079286933
    2. 'or' → logprob: -6.376705646514893
    3. '           ' → logprob: -12.87670612335205
    4. '	or' → logprob: -14.37670612335205
    5. ' ' → logprob: -16.251705169677734
    6. ' ' → logprob: -16.876705169677734
    7. ' orun' → logprob: -17.376705169677734
    8. '            ' → logprob: -17.626705169677734
    9. '   ' → logprob: -17.626705169677734
    10. '```' → logprob: -17.751705169677734

Token 810: ' val' (ID: 1459)
  Prédit: 'val'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: -0.004101077560335398
    2. ' val' → logprob: -5.504101276397705
    3. '16' → logprob: -10.754100799560547
    4. '```' → logprob: -14.879100799560547
    5. '(val' → logprob: -15.379100799560547
    6. '           ' → logprob: -15.379100799560547
    7. '	val' → logprob: -15.629100799560547
    8. '   ' → logprob: -16.504100799560547
    9. ' ' → logprob: -17.004100799560547
    10. '>=' → logprob: -17.254100799560547

Token 811: '>=' (ID: 20974)
  Prédit: '>='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>=' → logprob: -0.0011243832996115088
    2. ' >=' → logprob: -6.876124382019043
    3. '16' → logprob: -9.626124382019043
    4. ')>=' → logprob: -12.001124382019043
    5. '>' → logprob: -12.251124382019043
    6. '≥' → logprob: -12.751124382019043
    7. '=' → logprob: -12.876124382019043
    8. 'val' → logprob: -13.376124382019043
    9. '==' → logprob: -13.626124382019043
    10. ']>=' → logprob: -13.626124382019043

Token 812: '16' (ID: 1125)
  Prédit: '16'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '16' → logprob: -3.054500666621607e-06
    2. ' ' → logprob: -12.75000286102295
    3. '   ' → logprob: -17.750003814697266
    4. '1' → logprob: -18.125003814697266
    5. '```' → logprob: -18.500003814697266
    6. '15' → logprob: -19.125003814697266
    7. '016' → logprob: -20.125003814697266
    8. '' → logprob: -20.250003814697266
    9. '  ' → logprob: -20.750003814697266
    10. '`' → logprob: -20.750003814697266

Token 813: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.7887081503868103
    2. ':
' → logprob: -1.163708209991455
    3. '               ' → logprob: -2.038708209991455
    4. ':return' → logprob: -2.913708209991455
    5. '           ' → logprob: -3.038708209991455
    6. 'return' → logprob: -8.538707733154297
    7. ' or' → logprob: -8.663707733154297
    8. '       ' → logprob: -8.663707733154297
    9. '):
' → logprob: -9.038707733154297
    10. ' return' → logprob: -10.413707733154297

Token 814: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.0011997550027444959
    2. '           ' → logprob: -7.001199722290039
    3. ' return' → logprob: -8.876199722290039
    4. 'return' → logprob: -9.126199722290039
    5. '```' → logprob: -10.501199722290039
    6. ':return' → logprob: -12.626199722290039
    7. '                   ' → logprob: -13.501199722290039
    8. '   ' → logprob: -13.751199722290039
    9. '              ' → logprob: -13.876199722290039
    10. '       ' → logprob: -14.001199722290039

Token 815: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.0026802949141710997
    2. ' return' → logprob: -6.25268030166626
    3. '           ' → logprob: -7.25268030166626
    4. '               ' → logprob: -10.127679824829102
    5. '
' → logprob: -13.627679824829102
    6. '   ' → logprob: -14.002679824829102
    7. '       ' → logprob: -15.002679824829102
    8. '	return' → logprob: -15.252679824829102
    9. '```' → logprob: -15.627679824829102
    10. '                   ' → logprob: -15.877679824829102

Token 816: ' vars' (ID: 36194)
  Prédit: 'vars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'vars' → logprob: -6.027225754223764e-05
    2. ' vars' → logprob: -10.000060081481934
    3. 'vals' → logprob: -12.125060081481934
    4. 'None' → logprob: -12.250060081481934
    5. 'variables' → logprob: -13.000060081481934
    6. 'val' → logprob: -13.500060081481934
    7. '(vars' → logprob: -14.875060081481934
    8. 'var' → logprob: -14.875060081481934
    9. '```' → logprob: -16.75006103515625
    10. '_vars' → logprob: -17.25006103515625

Token 817: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.042854271829128265
    2. 'val' → logprob: -3.2928543090820312
    3. '_vars' → logprob: -5.417854309082031
    4. 'vars' → logprob: -8.167854309082031
    5. '_var' → logprob: -9.917854309082031
    6. '_vals' → logprob: -11.167854309082031
    7. 'var' → logprob: -11.417854309082031
    8. 'vals' → logprob: -12.667854309082031
    9. 'Val' → logprob: -13.042854309082031
    10. '```' → logprob: -15.292854309082031

Token 818: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0004237627435941249
    2. 'vars' → logprob: -8.125423431396484
    3. '       ' → logprob: -9.250423431396484
    4. '               ' → logprob: -11.625423431396484
    5. '
' → logprob: -12.125423431396484
    6. 'variables' → logprob: -12.375423431396484
    7. '   ' → logprob: -12.625423431396484
    8. '          ' → logprob: -13.000423431396484
    9. ' vars' → logprob: -13.000423431396484
    10. '```' → logprob: -13.000423431396484

Token 819: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.007958408445119858
    2. 'vars' → logprob: -4.88295841217041
    3. '```' → logprob: -9.00795841217041
    4. 'variables' → logprob: -9.13295841217041
    5. '       ' → logprob: -9.25795841217041
    6. '   ' → logprob: -11.50795841217041
    7. ' vars' → logprob: -11.88295841217041
    8. '               ' → logprob: -12.50795841217041
    9. '          ' → logprob: -13.25795841217041
    10. 'var' → logprob: -13.50795841217041

Token 820: ' vars' (ID: 36194)
  Prédit: 'vars'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'vars' (adapté à ' vars') → logprob: -0.011273929849267006
    2. '           ' → logprob: -4.8862738609313965
    3. 'variables' → logprob: -5.8862738609313965
    4. '       ' → logprob: -7.5112738609313965
    5. ' vars' → logprob: -8.511274337768555
    6. '   ' → logprob: -9.511274337768555
    7. '```' → logprob: -10.011274337768555
    8. ' variables' → logprob: -11.511274337768555
    9. 'var' → logprob: -13.011274337768555
    10. '(vars' → logprob: -13.511274337768555

Token 821: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -4.537180211627856e-05
    2. 'val' → logprob: -10.125045776367188
    3. '[val' → logprob: -12.750045776367188
    4. '_var' → logprob: -13.625045776367188
    5. 'Val' → logprob: -14.000045776367188
    6. '_VAL' → logprob: -15.750045776367188
    7. '_vals' → logprob: -16.000045776367188
    8. '_vars' → logprob: -17.250045776367188
    9. '	val' → logprob: -17.500045776367188
    10. '```' → logprob: -18.250045776367188

Token 822: '[var' (ID: 109537)
  Prédit: '[var'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[var' → logprob: -0.00016086915275081992
    2. '[' → logprob: -8.750161170959473
    3. '[val' → logprob: -13.875161170959473
    4. 'var' → logprob: -14.125161170959473
    5. '[v' → logprob: -15.750161170959473
    6. '[arg' → logprob: -16.250160217285156
    7. '```' → logprob: -16.250160217285156
    8. '[param' → logprob: -16.500160217285156
    9. ' [' → logprob: -17.375160217285156
    10. 'vars' → logprob: -17.500160217285156

Token 823: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.004439493641257286
    2. '[var' → logprob: -6.254439353942871
    3. 'var' → logprob: -6.754439353942871
    4. 'val' → logprob: -6.879439353942871
    5. '[val' → logprob: -8.629439353942871
    6. '[' → logprob: -10.504439353942871
    7. 'al' → logprob: -10.754439353942871
    8. '```' → logprob: -10.879439353942871
    9. 'ar' → logprob: -11.254439353942871
    10. 'vars' → logprob: -12.129439353942871

Token 824: ']=' (ID: 9539)
  Prédit: ']='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']=' → logprob: -0.05018257722258568
    2. '=' → logprob: -3.050182580947876
    3. ']' → logprob: -6.675182342529297
    4. ')=' → logprob: -8.050182342529297
    5. '']=' → logprob: -12.800182342529297
    6. ']+=' → logprob: -13.300182342529297
    7. '[val' → logprob: -13.300182342529297
    8. '[' → logprob: -13.425182342529297
    9. '[var' → logprob: -13.550182342529297
    10. '}=' → logprob: -14.050182342529297

Token 825: 'val' (ID: 1105)
  Prédit: 'val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'val' → logprob: 0.0
    2. ' val' → logprob: -18.5
    3. 'var' → logprob: -24.25
    4. '	val' → logprob: -24.375
    5. '(val' → logprob: -24.75
    6. '```' → logprob: -24.75
    7. '
' → logprob: -25.625
    8. 'v' → logprob: -25.625
    9. '[val' → logprob: -25.875
    10. '   ' → logprob: -26.25

Token 826: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0871972143650055
    2. 'elif' → logprob: -2.5871973037719727
    3. '```' → logprob: -5.462197303771973
    4. 'else' → logprob: -5.837197303771973
    5. '   ' → logprob: -7.462197303771973
    6. '           ' → logprob: -8.337197303771973
    7. 'if' → logprob: -8.712197303771973
    8. '
' → logprob: -10.087197303771973
    9. ' elif' → logprob: -10.462197303771973
    10. 'pc' → logprob: -11.337197303771973

Token 827: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0704541876912117
    2. 'elif' → logprob: -3.6954541206359863
    3. '```' → logprob: -3.6954541206359863
    4. 'else' → logprob: -4.195454120635986
    5. 'if' → logprob: -6.320454120635986
    6. '           ' → logprob: -6.945454120635986
    7. '   ' → logprob: -7.820454120635986
    8. '``' → logprob: -10.445454597473145
    9. ' if' → logprob: -10.820454597473145
    10. ' elif' → logprob: -11.070454597473145

Token 828: ' elif' (ID: 9497)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'elif' (adapté à ' elif') → logprob: -0.20153944194316864
    2. '       ' → logprob: -1.701539397239685
    3. ' elif' → logprob: -9.701539039611816
    4. '   ' → logprob: -9.826539039611816
    5. '```' → logprob: -11.701539039611816
    6. ' ' → logprob: -13.951539039611816
    7. '	elif' → logprob: -14.326539039611816
    8. 'if' → logprob: -14.451539039611816
    9. '
' → logprob: -15.701539039611816
    10. '#elif' → logprob: -15.701539039611816

Token 829: ' cmd' (ID: 11704)
  Prédit: 'cmd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cmd' → logprob: -0.008627813309431076
    2. ' cmd' → logprob: -4.758627891540527
    3. ''' → logprob: -11.383627891540527
    4. '(cmd' → logprob: -13.758627891540527
    5. '	cmd' → logprob: -14.383627891540527
    6. 'command' → logprob: -16.25862693786621
    7. 'if' → logprob: -16.63362693786621
    8. '   ' → logprob: -16.63362693786621
    9. '.cmd' → logprob: -16.75862693786621
    10. '_cmd' → logprob: -17.63362693786621

Token 830: '=='' (ID: 20651)
  Prédit: '==''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=='' → logprob: -0.0001375089050270617
    2. '==' → logprob: -9.000137329101562
    3. '=="' → logprob: -11.375137329101562
    4. ' ==' → logprob: -13.625137329101562
    5. ' =='' → logprob: -14.500137329101562
    6. '==='' → logprob: -15.000137329101562
    7. ']=='' → logprob: -15.500137329101562
    8. '==
' → logprob: -16.250137329101562
    9. '='' → logprob: -16.625137329101562
    10. ')=='' → logprob: -16.750137329101562

Token 831: 'IF' (ID: 4648)
  Prédit: 'IF'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'IF' → logprob: -0.0040793512016534805
    2. ''' → logprob: -5.504079341888428
    3. 'if' → logprob: -14.129079818725586
    4. 'If' → logprob: -16.379079818725586
    5. '`' → logprob: -18.129079818725586
    6. '"' → logprob: -18.629079818725586
    7. '_IF' → logprob: -19.254079818725586
    8. 'IFI' → logprob: -19.879079818725586
    9. 'IFF' → logprob: -19.879079818725586
    10. ' IF' → logprob: -20.254079818725586

Token 832: '':
' (ID: 7669)
  Prédit: '':
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '':
' → logprob: -0.04025975242257118
    2. '':' → logprob: -3.665259838104248
    3. 'var' → logprob: -5.040259838104248
    4. 'args' → logprob: -6.290259838104248
    5. ''' → logprob: -6.540259838104248
    6. ' var' → logprob: -6.790259838104248
    7. ' args' → logprob: -7.040259838104248
    8. ''):
' → logprob: -7.540259838104248
    9. '(args' → logprob: -7.790259838104248
    10. '':
' → logprob: -8.54025936126709

Token 833: '           ' (ID: 352)
  Prédit: 'var'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'var' → logprob: -0.09329987317323685
    2. '           ' → logprob: -2.8432998657226562
    3. ' var' → logprob: -3.7182998657226562
    4. 'cond' → logprob: -6.468299865722656
    5. 'x' → logprob: -6.593299865722656
    6. '       ' → logprob: -6.718299865722656
    7. 'v' → logprob: -7.593299865722656
    8. 'arg' → logprob: -7.718299865722656
    9. 'if' → logprob: -7.843299865722656
    10. 'val' → logprob: -7.968299865722656

Token 834: ' var' (ID: 972)
  Prédit: 'var'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'var' (adapté à ' var') → logprob: -0.009239236824214458
    2. 'cond' → logprob: -4.884239196777344
    3. 'x' → logprob: -6.759239196777344
    4. '           ' → logprob: -7.884239196777344
    5. 'if' → logprob: -10.259239196777344
    6. 'op' → logprob: -10.759239196777344
    7. 'v' → logprob: -11.634239196777344
    8. 'val' → logprob: -11.634239196777344
    9. 'arg' → logprob: -11.884239196777344
    10. ' var' → logprob: -12.259239196777344

Token 835: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.03572707995772362
    2. 'var' → logprob: -3.785727024078369
    3. 'val' → logprob: -5.285727024078369
    4. 'args' → logprob: -5.410727024078369
    5. '[' → logprob: -7.035727024078369
    6. '=' → logprob: -7.410727024078369
    7. ' =' → logprob: -8.535727500915527
    8. '=args' → logprob: -8.660727500915527
    9. '_val' → logprob: -8.910727500915527
    10. '_' → logprob: -8.910727500915527

Token 836: '=args' (ID: 70251)
  Prédit: '=args'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=args' → logprob: -0.4329478144645691
    2. '=' → logprob: -1.1829478740692139
    3. '_val' → logprob: -4.057947635650635
    4. 'val' → logprob: -4.432947635650635
    5. ' =' → logprob: -4.932947635650635
    6. 'var' → logprob: -6.057947635650635
    7. '==' → logprob: -6.182947635650635
    8. 'args' → logprob: -6.432947635650635
    9. '_=' → logprob: -7.182947635650635
    10. 'value' → logprob: -8.432948112487793

Token 837: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.00026085900026373565
    2. '0' → logprob: -8.500261306762695
    3. '1' → logprob: -9.875261306762695
    4. '=' → logprob: -12.875261306762695
    5. 'def' → logprob: -14.625261306762695
    6. '][' → logprob: -14.750261306762695
    7. ' [' → logprob: -15.000261306762695
    8. '(' → logprob: -15.125261306762695
    9. '[
' → logprob: -15.125261306762695
    10. '   ' → logprob: -15.750261306762695

Token 838: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -4.9186317482963204e-05
    2. '[' → logprob: -10.000049591064453
    3. ' ' → logprob: -13.000049591064453
    4. '1' → logprob: -14.125049591064453
    5. '   ' → logprob: -15.750049591064453
    6. '
' → logprob: -16.187549591064453
    7. '۰' → logprob: -16.812549591064453
    8. '```' → logprob: -17.062549591064453
    9. '#' → logprob: -17.187549591064453
    10. '(' → logprob: -17.687549591064453

Token 839: ']
' (ID: 1592)
  Prédit: ')
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.7377569079399109
    2. ')' → logprob: -1.2377569675445557
    3. '           ' → logprob: -1.8627569675445557
    4. ']' → logprob: -3.9877569675445557
    5. 'if' → logprob: -3.9877569675445557
    6. ',' → logprob: -4.237756729125977
    7. ']
' → logprob: -4.362756729125977
    8. '):
' → logprob: -5.862756729125977
    9. 'var' → logprob: -6.237756729125977
    10. '
' → logprob: -6.362756729125977

Token 840: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.15707866847515106
    2. 'dest' → logprob: -2.282078742980957
    3. 'if' → logprob: -3.532078742980957
    4. 'var' → logprob: -5.407078742980957
    5. ' if' → logprob: -5.532078742980957
    6. 'val' → logprob: -7.407078742980957
    7. 'jump' → logprob: -7.657078742980957
    8. 'dst' → logprob: -7.907078742980957
    9. '```' → logprob: -7.907078742980957
    10. 'line' → logprob: -7.907078742980957

Token 841: ' dest' (ID: 3755)
  Prédit: 'dest'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dest' (adapté à ' dest') → logprob: -0.024121196940541267
    2. 'if' → logprob: -3.7741212844848633
    3. 'jump' → logprob: -8.399121284484863
    4. 'line' → logprob: -8.649121284484863
    5. 'cond' → logprob: -8.774121284484863
    6. 'val' → logprob: -9.024121284484863
    7. 'target' → logprob: -9.649121284484863
    8. 'dst' → logprob: -10.524121284484863
    9. 'var' → logprob: -11.024121284484863
    10. 'jmp' → logprob: -11.274121284484863

Token 842: '=int' (ID: 37431)
  Prédit: '=args'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=args' → logprob: -0.016670694574713707
    2. '=int' → logprob: -4.2666707038879395
    3. '=' → logprob: -6.0166707038879395
    4. '=line' → logprob: -10.141670227050781
    5. '=sys' → logprob: -11.516670227050781
    6. ' =' → logprob: -11.641670227050781
    7. 'args' → logprob: -12.891670227050781
    8. '_=' → logprob: -13.891670227050781
    9. 'int' → logprob: -14.141670227050781
    10. '=str' → logprob: -14.266670227050781

Token 843: '(args' (ID: 14885)
  Prédit: '(args'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(args' → logprob: -8.327856630785391e-05
    2. 'args' → logprob: -9.875082969665527
    3. '(parts' → logprob: -10.375082969665527
    4. '(vars' → logprob: -16.125083923339844
    5. '(' → logprob: -16.500083923339844
    6. '(cmd' → logprob: -16.500083923339844
    7. '=args' → logprob: -16.750083923339844
    8. '(lines' → logprob: -17.125083923339844
    9. '(argv' → logprob: -17.375083923339844
    10. '(arg' → logprob: -17.375083923339844

Token 844: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0006290406454354525
    2. '1' → logprob: -7.37562894821167
    3. '[-' → logprob: -13.750629425048828
    4. '0' → logprob: -14.250629425048828
    5. '   ' → logprob: -15.500629425048828
    6. ' [' → logprob: -15.875629425048828
    7. '```' → logprob: -16.125629425048828
    8. '(' → logprob: -16.375629425048828
    9. '[
' → logprob: -16.500629425048828
    10. '2' → logprob: -16.750629425048828

Token 845: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -9.610702363715973e-06
    2. '[' → logprob: -12.250009536743164
    3. ' ' → logprob: -12.875009536743164
    4. '   ' → logprob: -13.875009536743164
    5. '0' → logprob: -14.875009536743164
    6. '2' → logprob: -14.875009536743164
    7. '```' → logprob: -15.875009536743164
    8. '
' → logprob: -16.437509536743164
    9. ']' → logprob: -16.750009536743164
    10. '  ' → logprob: -16.875009536743164

Token 846: '])
' (ID: 5169)
  Prédit: ')
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.10066381096839905
    2. ')' → logprob: -2.350663900375366
    3. '])
' → logprob: -8.725664138793945
    4. ')
' → logprob: -8.975664138793945
    5. '])' → logprob: -9.350664138793945
    6. ')`
' → logprob: -10.600664138793945
    7. '           ' → logprob: -11.350664138793945
    8. ']
' → logprob: -11.350664138793945
    9. ']' → logprob: -12.225664138793945
    10. ' )
' → logprob: -12.600664138793945

Token 847: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.2836804687976837
    2. 'if' → logprob: -1.4086804389953613
    3. '       ' → logprob: -6.158680438995361
    4. ' if' → logprob: -7.908680438995361
    5. '   ' → logprob: -10.90868091583252
    6. 'next' → logprob: -12.65868091583252
    7. 'val' → logprob: -12.78368091583252
    8. '```' → logprob: -12.78368091583252
    9. 'value' → logprob: -12.90868091583252
    10. ' ' → logprob: -13.40868091583252

Token 848: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.001481174840591848
    2. '           ' → logprob: -6.751481056213379
    3. 'val' → logprob: -9.001481056213379
    4. ' if' → logprob: -9.126481056213379
    5. 'v' → logprob: -10.126481056213379
    6. '       ' → logprob: -10.376481056213379
    7. '```' → logprob: -12.126481056213379
    8. 'vals' → logprob: -13.751481056213379
    9. '``' → logprob: -14.751481056213379
    10. 'value' → logprob: -15.126481056213379

Token 849: ' vars' (ID: 36194)
  Prédit: 'vars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'vars' → logprob: -1.3856492842023727e-06
    2. 'variables' → logprob: -14.250000953674316
    3. ' vars' → logprob: -14.500000953674316
    4. 'vals' → logprob: -15.875000953674316
    5. 'var' → logprob: -16.875001907348633
    6. '   ' → logprob: -17.250001907348633
    7. '(vars' → logprob: -18.375001907348633
    8. 'get' → logprob: -19.000001907348633
    9. 'val' → logprob: -19.250001907348633
    10. '
' → logprob: -20.750001907348633

Token 850: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.01087401993572712
    2. 'val' → logprob: -5.010873794555664
    3. '[val' → logprob: -5.635873794555664
    4. '_var' → logprob: -8.510873794555664
    5. '[var' → logprob: -8.635873794555664
    6. '_vars' → logprob: -8.760873794555664
    7. '_vals' → logprob: -11.010873794555664
    8. 'var' → logprob: -11.510873794555664
    9. 'vars' → logprob: -12.135873794555664
    10. 'Val' → logprob: -12.385873794555664

Token 851: '[var' (ID: 109537)
  Prédit: '[var'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[var' → logprob: -4.084206375409849e-05
    2. 'var' → logprob: -10.125041007995605
    3. '[' → logprob: -15.500041007995605
    4. '(var' → logprob: -16.00004005432129
    5. ')var' → logprob: -16.12504005432129
    6. '```' → logprob: -16.25004005432129
    7. '
' → logprob: -16.87504005432129
    8. '[val' → logprob: -17.37504005432129
    9. '[
' → logprob: -17.75004005432129
    10. '[v' → logprob: -17.87504005432129

Token 852: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.003557781223207712
    2. 'var' → logprob: -5.7535576820373535
    3. '[var' → logprob: -8.128558158874512
    4. 'ar' → logprob: -10.003558158874512
    5. '(var' → logprob: -11.378558158874512
    6. ' var' → logprob: -11.503558158874512
    7. 'a' → logprob: -12.378558158874512
    8. 'val' → logprob: -12.628558158874512
    9. 'al' → logprob: -13.628558158874512
    10. '
' → logprob: -13.753558158874512

Token 853: ']!=' (ID: 85780)
  Prédit: ']!='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']!=' → logprob: -0.5466683506965637
    2. ']==' → logprob: -1.171668291091919
    3. ']' → logprob: -2.796668291091919
    4. '!=' → logprob: -3.546668291091919
    5. ')!=' → logprob: -4.921668529510498
    6. '[' → logprob: -5.421668529510498
    7. '==' → logprob: -5.421668529510498
    8. ']>' → logprob: -5.671668529510498
    9. ')==' → logprob: -7.296668529510498
    10. '>' → logprob: -8.04666805267334

Token 854: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.9027791495318525e-05
    2. ' ' → logprob: -10.875019073486328
    3. 'var' → logprob: -19.000019073486328
    4. '```' → logprob: -19.625019073486328
    5. '   ' → logprob: -19.750019073486328
    6. '۰' → logprob: -20.625019073486328
    7. '=' → logprob: -20.750019073486328
    8. '
' → logprob: -20.750019073486328
    9. '00' → logprob: -21.750019073486328
    10. '1' → logprob: -21.750019073486328

Token 855: ':
' (ID: 734)
  Prédit: ':
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':
' → logprob: -0.03821820020675659
    2. ':' → logprob: -3.2882182598114014
    3. '           ' → logprob: -9.53821849822998
    4. '               ' → logprob: -10.03821849822998
    5. ' and' → logprob: -10.66321849822998
    6. '):
' → logprob: -10.78821849822998
    7. ':
' → logprob: -12.03821849822998
    8. 'and' → logprob: -13.03821849822998
    9. ':return' → logprob: -13.03821849822998
    10. ':

' → logprob: -13.28821849822998

Token 856: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.18172244727611542
    2. 'pc' → logprob: -1.9317224025726318
    3. ' pc' → logprob: -4.181722640991211
    4. '           ' → logprob: -5.181722640991211
    5. '	pc' → logprob: -8.931722640991211
    6. '```' → logprob: -9.556722640991211
    7. '                   ' → logprob: -10.056722640991211
    8. '              ' → logprob: -10.806722640991211
    9. '   ' → logprob: -10.806722640991211
    10. '(pc' → logprob: -11.306722640991211

Token 857: ' if' (ID: 538)
  Prédit: 'pc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pc' → logprob: -0.012770142406225204
    2. 'if' (adapté à ' if') → logprob: -4.387770175933838
    3. '           ' → logprob: -8.88776969909668
    4. '               ' → logprob: -9.13776969909668
    5. ' pc' → logprob: -11.76276969909668
    6. '	pc' → logprob: -13.63776969909668
    7. '       ' → logprob: -13.88776969909668
    8. '                   ' → logprob: -13.88776969909668
    9. ' if' → logprob: -14.13776969909668
    10. '   ' → logprob: -14.38776969909668

Token 858: ' dest' (ID: 3755)
  Prédit: 'dest'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dest' → logprob: -0.00038693982060067356
    2. ' dest' → logprob: -7.875386714935303
    3. 'line' → logprob: -13.000387191772461
    4. '(dest' → logprob: -13.125387191772461
    5. '	dest' → logprob: -13.875387191772461
    6. '   ' → logprob: -14.000387191772461
    7. 'not' → logprob: -15.625387191772461
    8. 'var' → logprob: -15.875387191772461
    9. ' ' → logprob: -16.00038719177246
    10. '  ' → logprob: -16.50038719177246

Token 859: ' not' (ID: 625)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.39429882168769836
    2. 'in' → logprob: -1.394298791885376
    3. ' not' → logprob: -2.644298791885376
    4. 'not' → logprob: -5.019299030303955
    5. 'line' → logprob: -9.894298553466797
    6. ')' → logprob: -11.019298553466797
    7. '>' → logprob: -11.144298553466797
    8. '[line' → logprob: -11.269298553466797
    9. '_in' → logprob: -11.394298553466797
    10. '<|end|>' → logprob: -11.644298553466797

Token 860: ' in' (ID: 306)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.5934115052223206
    2. 'line' → logprob: -0.8434115052223206
    3. ' in' → logprob: -4.093411445617676
    4. ' line' → logprob: -7.718411445617676
    5. '=line' → logprob: -9.343411445617676
    6. 'lines' → logprob: -9.718411445617676
    7. '[line' → logprob: -11.593411445617676
    8. 'to' → logprob: -11.593411445617676
    9. '(line' → logprob: -11.843411445617676
    10. ',line' → logprob: -11.843411445617676

Token 861: ' line' (ID: 2543)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'line' → logprob: -6.2729995988775045e-06
    2. ' line' → logprob: -12.000006675720215
    3. '#line' → logprob: -18.1250057220459
    4. '   ' → logprob: -18.2500057220459
    5. '```' → logprob: -18.7500057220459
    6. '	line' → logprob: -18.8750057220459
    7. 'lines' → logprob: -19.3750057220459
    8. '[line' → logprob: -19.5000057220459
    9. ' ' → logprob: -19.7500057220459
    10. '
' → logprob: -20.1250057220459

Token 862: '_to' (ID: 5089)
  Prédit: '_to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_to' → logprob: -0.0025418936274945736
    2. 'to' → logprob: -6.002542018890381
    3. 'line' → logprob: -9.752541542053223
    4. '_line' → logprob: -11.877541542053223
    5. 'To' → logprob: -14.502541542053223
    6. '=line' → logprob: -15.377541542053223
    7. '[line' → logprob: -16.37754249572754
    8. ' line' → logprob: -16.37754249572754
    9. '-to' → logprob: -16.75254249572754
    10. ' to' → logprob: -16.75254249572754

Token 863: '_idx' (ID: 15257)
  Prédit: '_idx'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_idx' → logprob: -0.01823703572154045
    2. 'idx' → logprob: -4.018237113952637
    3. 'line' → logprob: -9.768237113952637
    4. '_idxs' → logprob: -11.393237113952637
    5. '```' → logprob: -12.018237113952637
    6. 'Idx' → logprob: -12.768237113952637
    7. 'set' → logprob: -12.893237113952637
    8. '{' → logprob: -13.018237113952637
    9. 'no' → logprob: -14.018237113952637
    10. '_IDX' → logprob: -14.143237113952637

Token 864: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.20301853120326996
    2. ':
' → logprob: -1.7030185461044312
    3. '):' → logprob: -7.578018665313721
    4. '):
' → logprob: -7.578018665313721
    5. '           ' → logprob: -8.828018188476562
    6. '                   ' → logprob: -9.453018188476562
    7. ':return' → logprob: -9.578018188476562
    8. '   ' → logprob: -9.828018188476562
    9. '               ' → logprob: -9.828018188476562
    10. '       ' → logprob: -9.828018188476562

Token 865: '                   ' (ID: 699)
  Prédit: '                   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.0020090530160814524
    2. '               ' → logprob: -7.37700891494751
    3. '                       ' → logprob: -7.62700891494751
    4. 'pc' → logprob: -7.87700891494751
    5. '```' → logprob: -8.377009391784668
    6. '           ' → logprob: -9.377009391784668
    7. ' pc' → logprob: -10.502009391784668
    8. '   ' → logprob: -10.502009391784668
    9. '
' → logprob: -10.877009391784668
    10. '                  ' → logprob: -10.877009391784668

Token 866: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -7.624555291840807e-05
    2. '                   ' → logprob: -10.250076293945312
    3. ' return' → logprob: -10.625076293945312
    4. '               ' → logprob: -11.625076293945312
    5. '           ' → logprob: -12.125076293945312
    6. '   ' → logprob: -13.375076293945312
    7. '                       ' → logprob: -14.875076293945312
    8. '       ' → logprob: -16.875076293945312
    9. ' ' → logprob: -17.375076293945312
    10. '
' → logprob: -17.625076293945312

Token 867: ' Jump' (ID: 51108)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -1.6240566083070007e-06
    2. ' return' → logprob: -13.750001907348633
    3. '           ' → logprob: -15.875001907348633
    4. '                   ' → logprob: -16.125001907348633
    5. '#' → logprob: -16.500001907348633
    6. '               ' → logprob: -16.625001907348633
    7. '   ' → logprob: -17.750001907348633
    8. 'break' → logprob: -19.125001907348633
    9. '                       ' → logprob: -20.125001907348633
    10. '
' → logprob: -20.125001907348633

Token 868: ' to' (ID: 316)
  Prédit: '                   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.25019779801368713
    2. '               ' → logprob: -2.3751978874206543
    3. 'return' → logprob: -2.3751978874206543
    4. ' return' → logprob: -3.8751978874206543
    5. '                       ' → logprob: -4.750197887420654
    6. '                  ' → logprob: -6.500197887420654
    7. '                    ' → logprob: -6.750197887420654
    8. '           ' → logprob: -7.000197887420654
    9. 'to' → logprob: -8.375197410583496
    10. ' ' → logprob: -8.375197410583496

Token 869: ' non' (ID: 2893)
  Prédit: 'None'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'None' → logprob: -0.6994385123252869
    2. 'return' → logprob: -0.9494385123252869
    3. 'stop' → logprob: -3.8244385719299316
    4. 'vars' → logprob: -4.199438571929932
    5. 'out' → logprob: -4.699438571929932
    6. 'dest' → logprob: -4.824438571929932
    7. 'line' → logprob: -4.949438571929932
    8. 'non' → logprob: -5.074438571929932
    9. 'program' → logprob: -5.199438571929932
    10. 'outside' → logprob: -5.449438571929932

Token 870: '-existent' (ID: 130142)
  Prédit: 'existent'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'existent' → logprob: -0.007413651328533888
    2. 'existing' → logprob: -5.882413864135742
    3. '-existent' → logprob: -5.882413864135742
    4. 'line' → logprob: -6.632413864135742
    5. 'exist' → logprob: -8.757413864135742
    6. '-existing' → logprob: -9.257413864135742
    7. '-ex' → logprob: -9.757413864135742
    8. 'ex' → logprob: -10.257413864135742
    9. '_existing' → logprob: -10.257413864135742
    10. ' existent' → logprob: -10.632413864135742

Token 871: ' line' (ID: 2543)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.10159707069396973
    2. 'dest' → logprob: -3.1015970706939697
    3. ' line' → logprob: -3.9765970706939697
    4. 'pc' → logprob: -4.226596832275391
    5. 'lines' → logprob: -5.101596832275391
    6. 'destination' → logprob: -5.726596832275391
    7. 'index' → logprob: -6.101596832275391
    8. 'idx' → logprob: -6.851596832275391
    9. '#' → logprob: -6.976596832275391
    10. '
' → logprob: -7.101596832275391

Token 872: ' no' (ID: 860)
  Prédit: 'idx'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'idx' → logprob: -1.1029984951019287
    2. 'dest' → logprob: -1.6029984951019287
    3. '                   ' → logprob: -1.8529984951019287
    4. '               ' → logprob: -1.8529984951019287
    5. '           ' → logprob: -2.7279984951019287
    6. 'number' → logprob: -3.2279984951019287
    7. '_no' → logprob: -4.727998733520508
    8. 'no' → logprob: -5.102998733520508
    9. '_dest' → logprob: -5.352998733520508
    10. 'return' → logprob: -5.352998733520508

Token 873: ',' (ID: 11)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.7115468978881836
    2. '                   ' → logprob: -1.2115468978881836
    3. '                       ' → logprob: -2.8365468978881836
    4. '               ' → logprob: -2.9615468978881836
    5. ' return' → logprob: -3.4615468978881836
    6. ':return' → logprob: -4.336546897888184
    7. ':' → logprob: -4.461546897888184
    8. '=' → logprob: -4.586546897888184
    9. ':
' → logprob: -4.711546897888184
    10. '           ' → logprob: -5.086546897888184

Token 874: ' stop' (ID: 5666)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.002055927412584424
    2. ' return' → logprob: -6.752056121826172
    3. '                   ' → logprob: -7.127056121826172
    4. '               ' → logprob: -9.877056121826172
    5. '                       ' → logprob: -10.877056121826172
    6. '           ' → logprob: -12.127056121826172
    7. '   ' → logprob: -12.252056121826172
    8. '	return' → logprob: -14.502056121826172
    9. '       ' → logprob: -14.877056121826172
    10. '#' → logprob: -14.877056121826172

Token 875: ' immediately' (ID: 10731)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.4065909683704376
    2. '                   ' → logprob: -1.2815909385681152
    3. ' return' → logprob: -3.7815909385681152
    4. '
' → logprob: -3.9065909385681152
    5. '               ' → logprob: -4.781590938568115
    6. '           ' → logprob: -5.656590938568115
    7. '                       ' → logprob: -7.281590938568115
    8. 'vars' → logprob: -8.156591415405273
    9. '   ' → logprob: -8.906591415405273
    10. ' ' → logprob: -9.031591415405273

Token 876: '
' (ID: 198)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.4196215569972992
    2. '                   ' → logprob: -1.1696215867996216
    3. ' return' → logprob: -4.044621467590332
    4. '               ' → logprob: -4.294621467590332
    5. '                       ' → logprob: -7.419621467590332
    6. '           ' → logprob: -7.794621467590332
    7. '   ' → logprob: -11.044621467590332
    8. '
' → logprob: -11.544621467590332
    9. ':return' → logprob: -11.919621467590332
    10. '       ' → logprob: -12.419621467590332

Token 877: '                   ' (ID: 699)
  Prédit: '                   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.06094655394554138
    2. '               ' → logprob: -3.310946464538574
    3. 'return' → logprob: -4.185946464538574
    4. '                       ' → logprob: -5.560946464538574
    5. ' return' → logprob: -5.810946464538574
    6. '           ' → logprob: -7.935946464538574
    7. '       ' → logprob: -9.685946464538574
    8. '
' → logprob: -9.685946464538574
    9. '```' → logprob: -10.310946464538574
    10. '   ' → logprob: -10.435946464538574

Token 878: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -6.813969957875088e-05
    2. ' return' → logprob: -9.750067710876465
    3. '                   ' → logprob: -11.625067710876465
    4. '               ' → logprob: -15.000067710876465
    5. '{return' → logprob: -15.875067710876465
    6. '                       ' → logprob: -16.37506866455078
    7. '   ' → logprob: -16.37506866455078
    8. '
' → logprob: -16.62506866455078
    9. '	return' → logprob: -16.75006866455078
    10. '           ' → logprob: -16.75006866455078

Token 879: ' vars' (ID: 36194)
  Prédit: 'vars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'vars' → logprob: -7.941850526549388e-06
    2. 'variables' → logprob: -12.125007629394531
    3. ' vars' → logprob: -13.500007629394531
    4. 'vals' → logprob: -14.750007629394531
    5. 'None' → logprob: -15.375007629394531
    6. 'var' → logprob: -15.750007629394531
    7. '{' → logprob: -16.12500762939453
    8. '
' → logprob: -16.25000762939453
    9. '(vars' → logprob: -16.87500762939453
    10. '```' → logprob: -17.62500762939453

Token 880: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -0.000563042180147022
    2. 'val' → logprob: -7.500563144683838
    3. 'Val' → logprob: -12.25056266784668
    4. '_vars' → logprob: -13.25056266784668
    5. '_vals' → logprob: -13.25056266784668
    6. '_var' → logprob: -14.00056266784668
    7. '[val' → logprob: -15.37556266784668
    8. '_VAL' → logprob: -15.62556266784668
    9. 'variables' → logprob: -16.12556266784668
    10. 'vals' → logprob: -16.37556266784668

Token 881: '
' (ID: 198)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.0047138528898358345
    2. '
' → logprob: -5.504714012145996
    3. '                
' → logprob: -7.504714012145996
    4. '           ' → logprob: -11.379714012145996
    5. '                   ' → logprob: -11.504714012145996
    6. ',' → logprob: -11.754714012145996
    7. '```' → logprob: -11.754714012145996
    8. '                    
' → logprob: -12.004714012145996
    9. '\n' → logprob: -12.254714012145996
    10. '              ' → logprob: -12.504714012145996

Token 882: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.0014334438601508737
    2. 'pc' → logprob: -6.751433372497559
    3. '           ' → logprob: -9.501433372497559
    4. '
' → logprob: -9.501433372497559
    5. '```' → logprob: -10.376433372497559
    6. 'else' → logprob: -10.626433372497559
    7. '                   ' → logprob: -10.876433372497559
    8. '       ' → logprob: -11.126433372497559
    9. '                
' → logprob: -11.376433372497559
    10. ' pc' → logprob: -12.001433372497559

Token 883: ' pc' (ID: 18736)
  Prédit: 'pc'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pc' (adapté à ' pc') → logprob: -0.00018458699923940003
    2. '           ' → logprob: -9.000185012817383
    3. '               ' → logprob: -10.125185012817383
    4. ' pc' → logprob: -10.875185012817383
    5. '	pc' → logprob: -13.875185012817383
    6. '       ' → logprob: -14.625185012817383
    7. '                   ' → logprob: -14.750185012817383
    8. '```' → logprob: -16.375185012817383
    9. '   ' → logprob: -16.625185012817383
    10. '(pc' → logprob: -17.000185012817383

Token 884: '=line' (ID: 192488)
  Prédit: '=line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=line' → logprob: -0.5759654641151428
    2. '=' → logprob: -0.8259654641151428
    3. '=j' → logprob: -11.575965881347656
    4. ' =' → logprob: -11.700965881347656
    5. '=index' → logprob: -13.075965881347656
    6. '=sys' → logprob: -13.575965881347656
    7. '=
' → logprob: -14.075965881347656
    8. '=len' → logprob: -14.325965881347656
    9. '+=' → logprob: -14.450965881347656
    10. '=int' → logprob: -14.950965881347656

Token 885: '_to' (ID: 5089)
  Prédit: '_to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_to' → logprob: -0.0018840155098587275
    2. 'to' → logprob: -6.8768839836120605
    3. '[line' → logprob: -9.001884460449219
    4. '_no' → logprob: -9.126884460449219
    5. 'line' → logprob: -9.126884460449219
    6. 'To' → logprob: -9.501884460449219
    7. 'idx' → logprob: -9.876884460449219
    8. '_line' → logprob: -9.876884460449219
    9. 'dest' → logprob: -10.126884460449219
    10. 'o' → logprob: -10.126884460449219

Token 886: '_idx' (ID: 15257)
  Prédit: 'line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'line' → logprob: -0.4334214925765991
    2. '_idx' → logprob: -1.0584214925765991
    3. 'idx' → logprob: -5.558421611785889
    4. 'Idx' → logprob: -7.433421611785889
    5. 'int' → logprob: -8.68342113494873
    6. ' line' → logprob: -10.80842113494873
    7. '_IDX' → logprob: -11.18342113494873
    8. 'IDX' → logprob: -11.55842113494873
    9. 'x' → logprob: -11.80842113494873
    10. '[line' → logprob: -11.80842113494873

Token 887: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0003273600013926625
    2. '(dest' → logprob: -8.375327110290527
    3. 'dest' → logprob: -9.250327110290527
    4. '```' → logprob: -15.250327110290527
    5. '[j' → logprob: -16.250328063964844
    6. '[
' → logprob: -16.375328063964844
    7. '(' → logprob: -16.625328063964844
    8. '[(' → logprob: -16.750328063964844
    9. 'Dest' → logprob: -17.000328063964844
    10. '   ' → logprob: -17.000328063964844

Token 888: 'dest' (ID: 28338)
  Prédit: 'dest'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dest' → logprob: -7.600714161526412e-05
    2. '(dest' → logprob: -9.500076293945312
    3. ' dest' → logprob: -13.750076293945312
    4. '[' → logprob: -16.625076293945312
    5. '	dest' → logprob: -18.500076293945312
    6. ']' → logprob: -20.000076293945312
    7. 'dst' → logprob: -20.125076293945312
    8. '```' → logprob: -20.375076293945312
    9. '
' → logprob: -20.625076293945312
    10. '(' → logprob: -21.250076293945312

Token 889: ']
' (ID: 1592)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.006465844344347715
    2. '
' → logprob: -5.631465911865234
    3. '           ' → logprob: -6.131465911865234
    4. 'else' → logprob: -8.756465911865234
    5. 'continue' → logprob: -9.006465911865234
    6. ')' → logprob: -9.256465911865234
    7. '              ' → logprob: -9.756465911865234
    8. '                   ' → logprob: -10.006465911865234
    9. '       ' → logprob: -10.256465911865234
    10. '                
' → logprob: -10.506465911865234

Token 890: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.006629520561546087
    2. 'continue' → logprob: -5.256629467010498
    3. 'else' → logprob: -7.381629467010498
    4. '           ' → logprob: -7.881629467010498
    5. ' continue' → logprob: -8.381629943847656
    6. '                   ' → logprob: -10.256629943847656
    7. '```' → logprob: -10.381629943847656
    8. '              ' → logprob: -10.631629943847656
    9. '<|end|>' → logprob: -11.256629943847656
    10. '       ' → logprob: -11.381629943847656

Token 891: ' jump' (ID: 13843)
  Prédit: 'jump'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'jump' (adapté à ' jump') → logprob: -0.25873905420303345
    2. 'continue' → logprob: -1.5087389945983887
    3. '               ' → logprob: -5.008738994598389
    4. '           ' → logprob: -9.508739471435547
    5. ' jump' → logprob: -11.133739471435547
    6. '```' → logprob: -11.758739471435547
    7. 'continu' → logprob: -12.383739471435547
    8. ' continue' → logprob: -12.633739471435547
    9. '                   ' → logprob: -13.758739471435547
    10. '   ' → logprob: -14.508739471435547

Token 892: '_to' (ID: 5089)
  Prédit: '_to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_to' → logprob: -0.07241946458816528
    2. '=' → logprob: -2.6974194049835205
    3. '=False' → logprob: -6.1974196434021
    4. '_continue' → logprob: -9.072419166564941
    5. '_=' → logprob: -9.322419166564941
    6. ' =' → logprob: -9.322419166564941
    7. '=True' → logprob: -9.697419166564941
    8. '   ' → logprob: -10.697419166564941
    9. 'To' → logprob: -11.572419166564941
    10. 'to' → logprob: -11.822419166564941

Token 893: '_next' (ID: 25436)
  Prédit: '_next'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_next' → logprob: -0.020891491323709488
    2. 'next' → logprob: -4.0208916664123535
    3. 'True' → logprob: -6.1458916664123535
    4. 'False' → logprob: -8.770891189575195
    5. '=True' → logprob: -8.895891189575195
    6. ' next' → logprob: -9.020891189575195
    7. '=' → logprob: -9.770891189575195
    8. '_=' → logprob: -10.145891189575195
    9. '_' → logprob: -10.895891189575195
    10. '_true' → logprob: -11.145891189575195

Token 894: '=False' (ID: 12148)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.13012605905532837
    2. '=False' → logprob: -2.1301259994506836
    3. 'continue' → logprob: -6.505125999450684
    4. '=True' → logprob: -6.630125999450684
    5. '           ' → logprob: -8.505125999450684
    6. ' =' → logprob: -9.630125999450684
    7. '=
' → logprob: -10.130125999450684
    8. '=false' → logprob: -10.755125999450684
    9. '       ' → logprob: -10.755125999450684
    10. '==' → logprob: -12.005125999450684

Token 895: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0031775946263223886
    2. '<|end|>' → logprob: -6.253177642822266
    3. 'else' → logprob: -7.128177642822266
    4. '
' → logprob: -9.128177642822266
    5. '```' → logprob: -9.128177642822266
    6. ' else' → logprob: -9.878177642822266
    7. '        
' → logprob: -10.003177642822266
    8. 'elif' → logprob: -10.128177642822266
    9. '\n' → logprob: -11.003177642822266
    10. '<|end|>' → logprob: -11.253177642822266

Token 896: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.009264981374144554
    2. 'else' → logprob: -5.384264945983887
    3. '```' → logprob: -5.759264945983887
    4. '\n' → logprob: -7.384264945983887
    5. '<|end|>' → logprob: -8.509264945983887
    6. ' else' → logprob: -8.509264945983887
    7. '
' → logprob: -9.259264945983887
    8. '        
' → logprob: -9.509264945983887
    9. '[' → logprob: -10.384264945983887
    10. '\' → logprob: -10.384264945983887

Token 897: ' if' (ID: 538)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.044760026037693024
    2. 'if' (adapté à ' if') → logprob: -3.16975998878479
    3. 'else' → logprob: -6.919760227203369
    4. '
' → logprob: -8.419759750366211
    5. ' if' → logprob: -8.544759750366211
    6. 'elif' → logprob: -8.669759750366211
    7. '        
' → logprob: -8.919759750366211
    8. '```' → logprob: -11.044759750366211
    9. '   ' → logprob: -11.169759750366211
    10. '<|end|>' → logprob: -11.919759750366211

Token 898: ' jump' (ID: 13843)
  Prédit: 'jump'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'jump' → logprob: -0.251937597990036
    2. ' jump' → logprob: -1.5019376277923584
    3. ' not' → logprob: -11.876937866210938
    4. 'not' → logprob: -14.001937866210938
    5. ' ' → logprob: -14.626937866210938
    6. '   ' → logprob: -16.001937866210938
    7. '  ' → logprob: -16.626937866210938
    8. 'j' → logprob: -16.876937866210938
    9. '.jump' → logprob: -17.126937866210938
    10. '
' → logprob: -18.126937866210938

Token 899: '_to' (ID: 5089)
  Prédit: '_to'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_to' → logprob: -3.2617008400848135e-05
    2. 'to' → logprob: -10.750032424926758
    3. '       ' → logprob: -11.875032424926758
    4. 'To' → logprob: -12.500032424926758
    5. '   ' → logprob: -15.500032424926758
    6. '           ' → logprob: -16.500032424926758
    7. '_TO' → logprob: -17.250032424926758
    8. '=' → logprob: -17.625032424926758
    9. '```' → logprob: -17.875032424926758
    10. ' to' → logprob: -17.875032424926758

Token 900: '_next' (ID: 25436)
  Prédit: 'next'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'next' → logprob: -0.011075177229940891
    2. '_next' → logprob: -4.511075019836426
    3. ' next' → logprob: -10.511075019836426
    4. 'Next' → logprob: -16.386075973510742
    5. '	next' → logprob: -17.011075973510742
    6. '(next' → logprob: -18.386075973510742
    7. '_NEXT' → logprob: -18.386075973510742
    8. '
' → logprob: -18.511075973510742
    9. '[next' → logprob: -18.511075973510742
    10. '下一' → logprob: -19.386075973510742

Token 901: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.6356392502784729
    2. '+=' → logprob: -1.0106391906738281
    3. ':
' → logprob: -2.635639190673828
    4. '           ' → logprob: -4.385639190673828
    5. '       ' → logprob: -4.885639190673828
    6. '=' → logprob: -5.010639190673828
    7. ' +=' → logprob: -5.135639190673828
    8. '   ' → logprob: -6.760639190673828
    9. '==' → logprob: -7.135639190673828
    10. '+' → logprob: -10.260639190673828

Token 902: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.16565534472465515
    2. 'pc' → logprob: -1.9156553745269775
    3. '           ' → logprob: -5.665655136108398
    4. '   ' → logprob: -6.915655136108398
    5. '	pc' → logprob: -7.790655136108398
    6. '```' → logprob: -8.540655136108398
    7. ' pc' → logprob: -9.415655136108398
    8. '++' → logprob: -9.540655136108398
    9. '	' → logprob: -9.540655136108398
    10. '(pc' → logprob: -10.040655136108398

Token 903: ' pc' (ID: 18736)
  Prédit: 'pc'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pc' (adapté à ' pc') → logprob: -0.002024400979280472
    2. '       ' → logprob: -6.252024173736572
    3. '           ' → logprob: -10.00202465057373
    4. ' pc' → logprob: -10.37702465057373
    5. '   ' → logprob: -11.62702465057373
    6. '	pc' → logprob: -11.62702465057373
    7. '(pc' → logprob: -14.25202465057373
    8. '_pc' → logprob: -14.62702465057373
    9. 'pm' → logprob: -15.62702465057373
    10. '.pc' → logprob: -16.377023696899414

Token 904: '+=' (ID: 18287)
  Prédit: '+='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -5.9153885558771435e-06
    2. ' +=' → logprob: -12.500005722045898
    3. '=' → logprob: -13.250005722045898
    4. ']+=' → logprob: -15.625005722045898
    5. '```' → logprob: -17.0000057220459
    6. '+' → logprob: -17.6250057220459
    7. '+="' → logprob: -18.1250057220459
    8. '+=(' → logprob: -18.5000057220459
    9. '+='' → logprob: -18.5000057220459
    10. 'pc' → logprob: -20.0000057220459

Token 905: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: 0.0
    2. '```' → logprob: -18.125
    3. ' ' → logprob: -18.25
    4. '１' → logprob: -20.375
    5. '<|end|>' → logprob: -20.75
    6. '+' → logprob: -21.375
    7. '۱' → logprob: -21.375
    8. '   ' → logprob: -21.625
    9. '
' → logprob: -21.875
    10. '[' → logprob: -22.375

Token 906: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 907: '           ' (ID: 352)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 908: ' if' (ID: 538)
  Prédit: 'continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'continue' → logprob: -0.07846125960350037
    2. 'if' (adapté à ' if') → logprob: -2.953461170196533
    3. '<|end|>' → logprob: -4.203461170196533
    4. ' continue' → logprob: -5.828461170196533
    5. '```' → logprob: -5.953461170196533
    6. ' if' → logprob: -7.703461170196533
    7. '       ' → logprob: -7.703461170196533
    8. 'continu' → logprob: -7.953461170196533
    9. 'contin' → logprob: -8.078461647033691
    10. 'Continue' → logprob: -8.203461647033691

Token 909: ' pc' (ID: 18736)
  Prédit: 'pc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pc' → logprob: -7.636475493200123e-05
    2. ' pc' → logprob: -9.625076293945312
    3. '(pc' → logprob: -11.875076293945312
    4. 'jump' → logprob: -13.375076293945312
    5. 'not' → logprob: -14.125076293945312
    6. 'cmd' → logprob: -15.125076293945312
    7. 'prog' → logprob: -15.250076293945312
    8. 'False' → logprob: -16.250076293945312
    9. 'vars' → logprob: -16.375076293945312
    10. '	pc' → logprob: -16.750076293945312

Token 910: '==' (ID: 560)
  Prédit: '>='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>=' → logprob: -0.0029182806611061096
    2. '==' → logprob: -5.877918243408203
    3. ' >=' → logprob: -9.252918243408203
    4. '>' → logprob: -11.127918243408203
    5. ' ==' → logprob: -13.502918243408203
    6. '<' → logprob: -14.252918243408203
    7. ')>=' → logprob: -14.752918243408203
    8. '```' → logprob: -15.627918243408203
    9. ' not' → logprob: -15.877918243408203
    10. ']>=' → logprob: -16.002918243408203

Token 911: 'N' (ID: 45)
  Prédit: 'N'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'N' → logprob: -0.00043138445471413434
    2. 'len' → logprob: -7.750431537628174
    3. ' N' → logprob: -14.500431060791016
    4. '   ' → logprob: -16.250431060791016
    5. '0' → logprob: -16.625431060791016
    6. '```' → logprob: -17.375431060791016
    7. '	N' → logprob: -18.125431060791016
    8. '10' → logprob: -18.250431060791016
    9. '#' → logprob: -18.250431060791016
    10. '
' → logprob: -18.375431060791016

Token 912: ':
' (ID: 734)
  Prédit: ':
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':
' → logprob: -0.08171356469392776
    2. ':' → logprob: -2.9567136764526367
    3. ':return' → logprob: -3.9567136764526367
    4. '           ' → logprob: -6.081713676452637
    5. 'or' → logprob: -6.331713676452637
    6. ' or' → logprob: -6.581713676452637
    7. 'and' → logprob: -6.706713676452637
    8. '       ' → logprob: -8.206713676452637
    9. ' and' → logprob: -8.956713676452637
    10. '   ' → logprob: -9.206713676452637

Token 913: '               ' (ID: 506)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.6998273730278015
    2. '               ' → logprob: -0.9498273730278015
    3. 'return' → logprob: -2.1998274326324463
    4. '       ' → logprob: -5.324827194213867
    5. ' return' → logprob: -7.449827194213867
    6. '   ' → logprob: -8.824827194213867
    7. '```' → logprob: -10.324827194213867
    8. '{return' → logprob: -10.824827194213867
    9. ':return' → logprob: -10.949827194213867
    10. '
' → logprob: -11.324827194213867

Token 914: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -4.0126840758603066e-05
    2. '           ' → logprob: -10.750040054321289
    3. ' return' → logprob: -11.250040054321289
    4. 'break' → logprob: -12.750040054321289
    5. '       ' → logprob: -13.000040054321289
    6. '   ' → logprob: -14.625040054321289
    7. '#' (adapté à ' #') → logprob: -17.12504005432129
    8. '	return' → logprob: -17.62504005432129
    9. '               ' → logprob: -17.75004005432129
    10. '
' → logprob: -18.12504005432129

Token 915: ' end' (ID: 1268)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.03945388272404671
    2. '#' → logprob: -3.2894539833068848
    3. 'break' → logprob: -6.664453983306885
    4. '           ' → logprob: -9.164453506469727
    5. ' return' → logprob: -11.664453506469727
    6. '       ' → logprob: -11.789453506469727
    7. '   ' → logprob: -11.789453506469727
    8. '               ' → logprob: -12.039453506469727
    9. ' #' → logprob: -13.789453506469727
    10. '                   ' → logprob: -15.664453506469727

Token 916: ' of' (ID: 328)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.7035701870918274
    2. '           ' → logprob: -0.9535701870918274
    3. '               ' → logprob: -2.4535701274871826
    4. '
' → logprob: -4.328570365905762
    5. '       ' → logprob: -4.578570365905762
    6. 'program' → logprob: -6.078570365905762
    7. 'break' → logprob: -6.578570365905762
    8. 'of' → logprob: -6.578570365905762
    9. '   ' → logprob: -6.703570365905762
    10. '#' → logprob: -6.703570365905762

Token 917: ' program' (ID: 2193)
  Prédit: 'program'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'program' → logprob: -0.16029876470565796
    2. 'prog' → logprob: -1.9102988243103027
    3. ' program' → logprob: -9.660298347473145
    4. 'the' → logprob: -13.160298347473145
    5. 'programme' → logprob: -13.160298347473145
    6. '#' → logprob: -13.535298347473145
    7. 'code' → logprob: -13.660298347473145
    8. 'programm' → logprob: -13.910298347473145
    9. '```' → logprob: -14.285298347473145
    10. 'execution' → logprob: -14.285298347473145

Token 918: ' after' (ID: 1934)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.6045234203338623
    2. '           ' → logprob: -0.8545234203338623
    3. '               ' → logprob: -3.6045234203338623
    4. ' return' → logprob: -7.479523658752441
    5. '       ' → logprob: -8.104523658752441
    6. '
' → logprob: -10.354523658752441
    7. 'break' → logprob: -10.729523658752441
    8. '   ' → logprob: -11.104523658752441
    9. '                   ' → logprob: -11.104523658752441
    10. '#' → logprob: -11.354523658752441

Token 919: ' executing' (ID: 58913)
  Prédit: 'last'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'last' → logprob: -0.110273577272892
    2. 'HAL' → logprob: -3.110273599624634
    3. 'increment' → logprob: -3.860273599624634
    4. 'program' → logprob: -4.735273361206055
    5. 'execution' → logprob: -4.860273361206055
    6. 'running' → logprob: -5.610273361206055
    7. 'pc' → logprob: -5.985273361206055
    8. ' last' → logprob: -6.110273361206055
    9. 'prog' → logprob: -6.110273361206055
    10. 'execut' → logprob: -6.110273361206055

Token 920: '
' (ID: 198)
  Prédit: 'prog'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'prog' → logprob: -0.3724360167980194
    2. 'last' → logprob: -1.2474360466003418
    3. 'HAL' → logprob: -4.497436046600342
    4. 'the' → logprob: -5.622436046600342
    5. 'pc' → logprob: -5.997436046600342
    6. ' last' → logprob: -6.497436046600342
    7. 'program' → logprob: -6.872436046600342
    8. 'line' → logprob: -6.997436046600342
    9. 'pro' → logprob: -7.872436046600342
    10. 'return' → logprob: -7.872436046600342

Token 921: '               ' (ID: 506)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.6016545295715332
    2. 'return' → logprob: -1.1016545295715332
    3. '               ' → logprob: -2.351654529571533
    4. ' return' → logprob: -3.851654529571533
    5. '   ' → logprob: -6.601654529571533
    6. '       ' → logprob: -6.851654529571533
    7. '                   ' → logprob: -7.351654529571533
    8. ':return' → logprob: -9.601654052734375
    9. '
' → logprob: -9.851654052734375
    10. '```' → logprob: -10.226654052734375

Token 922: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.001248804503120482
    2. '           ' → logprob: -7.001248836517334
    3. ' return' → logprob: -8.126248359680176
    4. '       ' → logprob: -11.001248359680176
    5. 'break' → logprob: -11.126248359680176
    6. '   ' → logprob: -11.751248359680176
    7. '               ' → logprob: -13.376248359680176
    8. ' ' → logprob: -15.251248359680176
    9. '#' → logprob: -15.376248359680176
    10. '	return' → logprob: -16.501249313354492

Token 923: ' vars' (ID: 36194)
  Prédit: 'vars'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'vars' → logprob: -1.2471589798224159e-05
    2. 'variables' → logprob: -12.000012397766113
    3. ' vars' → logprob: -12.000012397766113
    4. 'vals' → logprob: -16.00001335144043
    5. '(vars' → logprob: -17.75001335144043
    6. 'var' → logprob: -18.75001335144043
    7. '_vars' → logprob: -20.25001335144043
    8. ' variables' → logprob: -20.37501335144043
    9. '
' → logprob: -20.50001335144043
    10. '.vars' → logprob: -20.75001335144043

Token 924: '_val' (ID: 13694)
  Prédit: '_val'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_val' → logprob: -4.23917081207037e-05
    2. 'val' → logprob: -11.000041961669922
    3. 'al' → logprob: -11.375041961669922
    4. '_var' → logprob: -11.500041961669922
    5. '_vars' → logprob: -12.875041961669922
    6. '_vals' → logprob: -14.375041961669922
    7. '_' → logprob: -15.500041961669922
    8. 'Val' → logprob: -15.625041961669922
    9. '[val' → logprob: -15.625041961669922
    10. '_VAL' → logprob: -16.500041961669922

Token 925: '

' (ID: 279)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 926: 'def' (ID: 1314)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 927: ' main' (ID: 2758)
  Prédit: 'run'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'run' → logprob: -0.2938394844532013
    2. ' run' → logprob: -2.043839454650879
    3. 'main' → logprob: -2.543839454650879
    4. ' main' → logprob: -3.668839454650879
    5. '__' → logprob: -4.418839454650879
    6. 'print' → logprob: -5.043839454650879
    7. 'int' → logprob: -7.918839454650879
    8. 'def' → logprob: -8.543839454650879
    9. ' __' → logprob: -8.543839454650879
    10. 'if' → logprob: -8.668839454650879

Token 928: '():
' (ID: 8595)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '():' → logprob: -2.3438327843905427e-05
    2. '():
' → logprob: -11.25002384185791
    3. '()' → logprob: -11.75002384185791
    4. ' ():' → logprob: -13.00002384185791
    5. ':' → logprob: -16.125022888183594
    6. '():
' → logprob: -16.625022888183594
    7. '(' → logprob: -17.250022888183594
    8. '();' → logprob: -18.250022888183594
    9. '().' → logprob: -18.875022888183594
    10. '():

' → logprob: -19.000022888183594

Token 929: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0484466589987278
    2. 'import' → logprob: -3.4234466552734375
    3. '```' → logprob: -4.7984466552734375
    4. 'vars' → logprob: -5.9234466552734375
    5. 'result' → logprob: -6.4234466552734375
    6. 'variables' → logprob: -7.6734466552734375
    7. '
' → logprob: -8.048446655273438
    8. 'for' → logprob: -8.048446655273438
    9. 'input' → logprob: -8.048446655273438
    10. 'var' → logprob: -9.173446655273438

Token 930: ' res' (ID: 694)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' (adapté à ' res') → logprob: -1.053520917892456
    2. 'result' → logprob: -1.053520917892456
    3. '   ' → logprob: -1.928520917892456
    4. 'vars' → logprob: -1.928520917892456
    5. ' res' → logprob: -5.803521156311035
    6. 'import' → logprob: -6.428521156311035
    7. 'results' → logprob: -6.803521156311035
    8. 'variables' → logprob: -7.053521156311035
    9. 'vals' → logprob: -7.053521156311035
    10. 'ret' → logprob: -7.678521156311035

Token 931: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.0566813126206398
    2. ' =' → logprob: -3.0566813945770264
    3. '=res' → logprob: -5.056681156158447
    4. 's' → logprob: -7.806681156158447
    5. '=sys' → logprob: -8.181681632995605
    6. '=_' → logprob: -8.431681632995605
    7. '_=' → logprob: -8.556681632995605
    8. 'ult' → logprob: -8.931681632995605
    9. '=s' → logprob: -9.056681632995605
    10. '=result' → logprob: -9.306681632995605

Token 932: 'run' (ID: 12935)
  Prédit: 'run'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'run' → logprob: -3.128163257315464e-07
    2. ' run' → logprob: -15.5
    3. '(run' → logprob: -18.375
    4. '
' → logprob: -22.375
    5. '   ' → logprob: -22.375
    6. '	run' → logprob: -22.75
    7. '.run' → logprob: -24.375
    8. 'print' → logprob: -24.75
    9. 'None' → logprob: -25.375
    10. '```' → logprob: -26.25

Token 933: '()
' (ID: 1234)
  Prédit: '()
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()
' → logprob: -0.3869442939758301
    2. '()' → logprob: -1.13694429397583
    3. '()
' → logprob: -9.886943817138672
    4. '()

' → logprob: -11.511943817138672
    5. '()\' → logprob: -12.636943817138672
    6. '()`' → logprob: -13.011943817138672
    7. '   ' → logprob: -13.261943817138672
    8. 'res' → logprob: -13.511943817138672
    9. 'def' → logprob: -14.136943817138672
    10. '()<' → logprob: -14.761943817138672

Token 934: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.009215030819177628
    2. 'if' → logprob: -4.759214878082275
    3. '```' → logprob: -7.884214878082275
    4. ' if' → logprob: -8.509215354919434
    5. 'print' → logprob: -11.634215354919434
    6. '<|end|>' → logprob: -12.259215354919434
    7. 'import' → logprob: -12.759215354919434
    8. '``' → logprob: -13.384215354919434
    9. '    
' → logprob: -14.009215354919434
    10. '
' → logprob: -14.384215354919434

Token 935: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.00031973462319001555
    2. '   ' → logprob: -8.875319480895996
    3. '```' → logprob: -8.875319480895996
    4. ' if' → logprob: -10.875319480895996
    5. 'for' → logprob: -11.000319480895996
    6. 'import' → logprob: -12.750319480895996
    7. 'print' → logprob: -13.750319480895996
    8. '``' → logprob: -15.000319480895996
    9. '
' → logprob: -16.625320434570312
    10. '	if' → logprob: -17.000320434570312

Token 936: ' res' (ID: 694)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.10020678490400314
    2. ' res' → logprob: -2.3502068519592285
    3. '(res' → logprob: -16.47520637512207
    4. ' ' → logprob: -17.97520637512207
    5. '   ' → logprob: -17.97520637512207
    6. '	res' → logprob: -18.47520637512207
    7. 'not' → logprob: -19.60020637512207
    8. '
' → logprob: -19.85020637512207
    9. '  ' → logprob: -19.97520637512207
    10. ' ' → logprob: -20.85020637512207

Token 937: ' is' (ID: 382)
  Prédit: ' is'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' is' → logprob: -0.07036596536636353
    2. 'is' → logprob: -2.6953659057617188
    3. '==' → logprob: -8.070365905761719
    4. ')' → logprob: -10.820365905761719
    5. '```' → logprob: -10.820365905761719
    6. ' ==' → logprob: -11.445365905761719
    7. ')is' → logprob: -11.570365905761719
    8. '
' → logprob: -11.570365905761719
    9. '===' → logprob: -11.820365905761719
    10. '	is' → logprob: -12.195365905761719

Token 938: ' None' (ID: 4662)
  Prédit: 'None'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'None' → logprob: -0.004351790528744459
    2. 'not' → logprob: -5.504351615905762
    3. ' None' → logprob: -8.254351615905762
    4. ' not' → logprob: -11.504351615905762
    5. '   ' → logprob: -12.754351615905762
    6. 'Not' → logprob: -16.004352569580078
    7. 'none' → logprob: -16.629352569580078
    8. '_None' → logprob: -17.754352569580078
    9. '(None' → logprob: -18.504352569580078
    10. ' ' → logprob: -19.004352569580078

Token 939: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.4435412287712097
    2. ':
' → logprob: -1.3185412883758545
    3. '       ' → logprob: -2.5685412883758545
    4. '   ' → logprob: -4.818541049957275
    5. 'print' → logprob: -5.568541049957275
    6. '():
' → logprob: -6.693541049957275
    7. ' or' → logprob: -8.443541526794434
    8. '```' → logprob: -9.068541526794434
    9. '):
' → logprob: -9.818541526794434
    10. '==' → logprob: -9.818541526794434

Token 940: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5892263650894165
    2. '       ' → logprob: -0.8392263650894165
    3. 'print' → logprob: -4.339226245880127
    4. '```' → logprob: -8.839226722717285
    5. ' print' → logprob: -11.964226722717285
    6. '	print' → logprob: -14.964226722717285
    7. '           ' → logprob: -15.589226722717285
    8. 'for' → logprob: -15.714226722717285
    9. '``' → logprob: -15.839226722717285
    10. '`' → logprob: -16.46422576904297

Token 941: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -2.7848862373502925e-05
    2. '   ' → logprob: -10.500027656555176
    3. '```' → logprob: -15.250027656555176
    4. ' print' → logprob: -16.875028610229492
    5. '	print' → logprob: -18.125028610229492
    6. '       ' → logprob: -19.125028610229492
    7. '``' → logprob: -20.375028610229492
    8. '#print' → logprob: -20.625028610229492
    9. '    
' → logprob: -21.375028610229492
    10. 'import' → logprob: -21.875028610229492

Token 942: '('' (ID: 706)
  Prédit: 'IN'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'IN' → logprob: -0.013500652275979519
    2. 'INF' → logprob: -4.638500690460205
    3. '-' → logprob: -5.763500690460205
    4. 'Infinite' → logprob: -8.263500213623047
    5. '"' → logprob: -9.263500213623047
    6. 'LO' → logprob: -9.888500213623047
    7. '   ' → logprob: -10.388500213623047
    8. 'Infinity' → logprob: -10.638500213623047
    9. 'in' → logprob: -10.638500213623047
    10. 'UN' → logprob: -10.888500213623047

Token 943: 'inf' (ID: 22226)
  Prédit: 'IN'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'IN' → logprob: -0.29608574509620667
    2. 'INF' → logprob: -1.9210857152938843
    3. 'in' → logprob: -3.171085834503174
    4. 'Infinity' → logprob: -4.171085834503174
    5. 'Infinite' → logprob: -4.296085834503174
    6. 'LO' → logprob: -4.421085834503174
    7. 'inf' → logprob: -4.421085834503174
    8. '-' → logprob: -4.671085834503174
    9. 'Loops' → logprob: -6.671085834503174
    10. 'Loop' → logprob: -7.296085834503174

Token 944: '')
' (ID: 2515)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.0002993544621858746
    2. 'inite' → logprob: -8.750299453735352
    3. '')
' → logprob: -9.750299453735352
    4. 'loop' → logprob: -9.875299453735352
    5. '")' → logprob: -12.000299453735352
    6. '\n' → logprob: -12.125299453735352
    7. 'i' → logprob: -12.750299453735352
    8. ')' → logprob: -12.750299453735352
    9. '')
' → logprob: -13.500299453735352
    10. 'f' → logprob: -13.500299453735352

Token 945: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0395602248609066
    2. 'else' → logprob: -3.289560317993164
    3. '       ' → logprob: -6.789560317993164
    4. '```' → logprob: -8.039560317993164
    5. 'return' → logprob: -9.789560317993164
    6. ' else' → logprob: -11.414560317993164
    7. 'elif' → logprob: -13.414560317993164
    8. '``' → logprob: -14.414560317993164
    9. '
' → logprob: -15.539560317993164
    10. '           ' → logprob: -16.039560317993164

Token 946: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.010471598245203495
    2. '   ' → logprob: -5.260471820831299
    3. ' else' → logprob: -5.260471820831299
    4. 'elif' → logprob: -11.01047134399414
    5. '```' → logprob: -11.26047134399414
    6. 'return' → logprob: -14.51047134399414
    7. 'print' → logprob: -14.63547134399414
    8. '
' → logprob: -15.13547134399414
    9. ' ' → logprob: -15.76047134399414
    10. '	else' → logprob: -15.76047134399414

Token 947: ':
' (ID: 734)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.024000409990549088
    2. '   ' → logprob: -3.899000406265259
    3. 'print' → logprob: -6.399000644683838
    4. '```' → logprob: -7.274000644683838
    5. ':' → logprob: -8.02400016784668
    6. ':
' → logprob: -8.52400016784668
    7. '
' → logprob: -8.64900016784668
    8. '        
' → logprob: -9.02400016784668
    9. 'for' → logprob: -9.64900016784668
    10. '    
' → logprob: -9.77400016784668

Token 948: '       ' (ID: 309)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.13258327543735504
    2. 'for' → logprob: -2.1325833797454834
    3. '   ' → logprob: -5.632583141326904
    4. ' for' → logprob: -6.757583141326904
    5. ' print' → logprob: -7.257583141326904
    6. '       ' → logprob: -8.882583618164062
    7. '```' → logprob: -9.882583618164062
    8. '	print' → logprob: -14.132583618164062
    9. '``' → logprob: -14.382583618164062
    10. '    
' → logprob: -15.007583618164062

Token 949: ' for' (ID: 395)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.005256764590740204
    2. 'for' (adapté à ' for') → logprob: -5.255256652832031
    3. '       ' → logprob: -11.380256652832031
    4. ' print' → logprob: -12.005256652832031
    5. '   ' → logprob: -12.630256652832031
    6. 'vals' → logprob: -13.630256652832031
    7. ' for' → logprob: -14.630256652832031
    8. 'values' → logprob: -15.380256652832031
    9. 'vars' → logprob: -16.75525665283203
    10. 'if' → logprob: -16.75525665283203

Token 950: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -5.3954463510308415e-05
    2. 'var' → logprob: -9.875054359436035
    3. 'k' → logprob: -13.375054359436035
    4. ' v' → logprob: -14.500054359436035
    5. 'c' → logprob: -15.500054359436035
    6. 'i' → logprob: -16.50005340576172
    7. 'val' → logprob: -16.87505340576172
    8. 'x' → logprob: -17.62505340576172
    9. '   ' → logprob: -17.75005340576172
    10. 'key' → logprob: -19.00005340576172

Token 951: ' in' (ID: 306)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.04859157279133797
    2. ' in' → logprob: -3.0485916137695312
    3. ' ' → logprob: -13.923591613769531
    4. 'ariable' → logprob: -13.923591613769531
    5. 'v' → logprob: -14.298591613769531
    6. '_in' → logprob: -14.673591613769531
    7. '_' → logprob: -14.923591613769531
    8. 'i' → logprob: -15.298591613769531
    9. '```' → logprob: -15.923591613769531
    10. 'var' → logprob: -16.29859161376953

Token 952: ' variables' (ID: 13955)
  Prédit: 'variables'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'variables' → logprob: -3.4121114822482923e-06
    2. ' variables' → logprob: -12.625003814697266
    3. 'variable' → logprob: -18.750003814697266
    4. '   ' → logprob: -19.250003814697266
    5. '.variables' → logprob: -20.125003814697266
    6. 'sorted' → logprob: -20.375003814697266
    7. 'values' → logprob: -20.625003814697266
    8. 'vars' → logprob: -21.250003814697266
    9. ' ' → logprob: -21.375003814697266
    10. 'parameters' → logprob: -21.500003814697266

Token 953: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.501625657081604
    2. ':
' → logprob: -1.626625657081604
    3. '       ' → logprob: -2.1266255378723145
    4. 'print' → logprob: -2.8766255378723145
    5. '   ' → logprob: -4.6266255378723145
    6. ',' → logprob: -4.8766255378723145
    7. '           ' → logprob: -6.2516255378723145
    8. ')' → logprob: -7.1266255378723145
    9. '):' → logprob: -7.3766255378723145
    10. '):
' → logprob: -7.6266255378723145

Token 954: '           ' (ID: 352)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.30600497126579285
    2. '       ' → logprob: -1.5560050010681152
    3. ' print' → logprob: -3.4310050010681152
    4. '           ' → logprob: -3.9310050010681152
    5. '   ' → logprob: -7.556005001068115
    6. '```' → logprob: -9.181004524230957
    7. '	print' → logprob: -11.181004524230957
    8. '.print' → logprob: -12.556004524230957
    9. '#print' → logprob: -12.556004524230957
    10. '	       ' → logprob: -13.181004524230957

Token 955: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -4.961759259458631e-06
    2. ' print' → logprob: -12.250004768371582
    3. '   ' → logprob: -16.3750057220459
    4. '           ' → logprob: -17.2500057220459
    5. '       ' → logprob: -17.7500057220459
    6. 'printf' → logprob: -19.0000057220459
    7. '	print' → logprob: -19.3750057220459
    8. '#print' → logprob: -20.7500057220459
    9. '.print' → logprob: -21.3750057220459
    10. '```' → logprob: -22.2500057220459

Token 956: '(f' (ID: 1526)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.07719587534666061
    2. '(res' → logprob: -3.202195882797241
    3. '(f' → logprob: -4.452195644378662
    4. 'f' → logprob: -4.577195644378662
    5. 'v' → logprob: -4.577195644378662
    6. '(v' → logprob: -6.702195644378662
    7. 'vars' → logprob: -10.07719612121582
    8. '0' → logprob: -10.20219612121582
    9. '(' → logprob: -10.82719612121582
    10. 'variables' → logprob: -10.95219612121582

Token 957: ''{' (ID: 47735)
  Prédit: '{'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '{' → logprob: -0.031176483258605003
    2. 'v' → logprob: -4.281176567077637
    3. '(v' → logprob: -4.406176567077637
    4. '"{' → logprob: -5.781176567077637
    5. '{}' → logprob: -7.406176567077637
    6. ''{' → logprob: -7.406176567077637
    7. '(f' → logprob: -8.156176567077637
    8. 'f' → logprob: -10.406176567077637
    9. '{}{' → logprob: -11.031176567077637
    10. '   ' → logprob: -11.531176567077637

Token 958: 'v' (ID: 85)
  Prédit: 'v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -1.9361264946837764e-07
    2. '{' → logprob: -16.25
    3. ' v' → logprob: -17.375
    4. ')v' → logprob: -20.625
    5. '   ' → logprob: -21.25
    6. '(v' → logprob: -21.375
    7. 'var' → logprob: -21.625
    8. 'f' → logprob: -22.25
    9. '{}' → logprob: -22.625
    10. '	v' → logprob: -22.75

Token 959: '}' (ID: 92)
  Prédit: '}'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '}' → logprob: -0.0006583464564755559
    2. '{' → logprob: -8.12565803527832
    3. '}{' → logprob: -8.75065803527832
    4. '}=' → logprob: -9.00065803527832
    5. '=' → logprob: -10.25065803527832
    6. '}:' → logprob: -11.00065803527832
    7. ' {' → logprob: -11.50065803527832
    8. '=}' → logprob: -12.62565803527832
    9. ' v' → logprob: -12.87565803527832
    10. ' =' → logprob: -12.87565803527832

Token 960: '={' (ID: 1693)
  Prédit: ' {'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' {' → logprob: -0.17641808092594147
    2. '{' → logprob: -2.5514180660247803
    3. ' =' → logprob: -3.0514180660247803
    4. '=' → logprob: -3.5514180660247803
    5. ' res' → logprob: -5.551418304443359
    6. '=res' → logprob: -6.426418304443359
    7. '={' → logprob: -7.051418304443359
    8. ' ={' → logprob: -7.426418304443359
    9. ' ' → logprob: -8.30141830444336
    10. '}' → logprob: -8.92641830444336

Token 961: 'res' (ID: 430)
  Prédit: 'res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.0019430378451943398
    2. 'vars' → logprob: -6.501943111419678
    3. '{' → logprob: -7.751943111419678
    4. 'variables' → logprob: -11.87694263458252
    5. '}' → logprob: -13.50194263458252
    6. '}{' → logprob: -13.75194263458252
    7. ' res' → logprob: -14.12694263458252
    8. '```' → logprob: -15.87694263458252
    9. '{}' → logprob: -16.751943588256836
    10. 'var' → logprob: -17.001943588256836

Token 962: '[v' (ID: 36561)
  Prédit: '[v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[v' → logprob: -0.02087724767625332
    2. 'v' → logprob: -3.8958773612976074
    3. '{' → logprob: -9.02087688446045
    4. '[' → logprob: -9.14587688446045
    5. '}' → logprob: -10.02087688446045
    6. 'vars' → logprob: -10.52087688446045
    7. '}[' → logprob: -11.14587688446045
    8. '}{' → logprob: -11.89587688446045
    9. 'variables' → logprob: -12.02087688446045
    10. '[{' → logprob: -12.64587688446045

Token 963: ']}' (ID: 28000)
  Prédit: ']}'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']}' → logprob: -0.00023631771910004318
    2. ']' → logprob: -8.500236511230469
    3. '}')' → logprob: -11.500236511230469
    4. '}' → logprob: -11.875236511230469
    5. '']}' → logprob: -12.250236511230469
    6. '}]' → logprob: -12.500236511230469
    7. '')}' → logprob: -13.250236511230469
    8. ']}"' → logprob: -13.375236511230469
    9. ']},' → logprob: -13.750236511230469
    10. '])' → logprob: -14.000236511230469

Token 964: '')

' (ID: 9735)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '')' → logprob: -0.00667286291718483
    2. '}')' → logprob: -5.6316728591918945
    3. ')' → logprob: -5.8816728591918945
    4. '}' → logprob: -8.881672859191895
    5. '')
' → logprob: -9.381672859191895
    6. '()' → logprob: -11.006672859191895
    7. '')}' → logprob: -11.506672859191895
    8. '")' → logprob: -12.006672859191895
    9. '{}' → logprob: -13.006672859191895
    10. '');' → logprob: -13.006672859191895

Token 965: 'main' (ID: 7731)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.0047098184004426
    2. '```' → logprob: -6.129709720611572
    3. '<|end|>' → logprob: -6.254709720611572
    4. ' if' → logprob: -7.629709720611572
    5. '#' → logprob: -10.12971019744873
    6. 'main' → logprob: -10.62971019744873
    7. ')' → logprob: -11.75471019744873
    8. '\' → logprob: -12.12971019744873
    9. '()' → logprob: -12.25471019744873
    10. 'import' → logprob: -12.25471019744873

Token 966: '()' (ID: 416)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 964
Tokens correctement prédits (1ère position, stricte): 343
Tokens correctement prédits (1ère position, avec adaptation): 397
Tokens correctement prédits (top 10): 692
Précision stricte (1ère position): 35.58%
Précision adaptée (1ère position): 41.18%
Précision (top 10): 71.78%
================================================================================
