================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:24:18
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
while True:
    total = int(input())
    if total == 0:
        break
    prices = [int(input()) for _ in range(9)]
    print(total - sum(prices))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'while' (ID: 7032)
  → Token d'amorce (pas de prédiction)

Token 1: ' True' (ID: 6432)
  → Token d'amorce (pas de prédiction)

Token 2: ':
' (ID: 734)
  → Token d'amorce (pas de prédiction)

Token 3: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6244295239448547
    2. '    ' → logprob: -2.12442946434021
    3. '    
' → logprob: -2.62442946434021
    4. '\' → logprob: -2.87442946434021
    5. '\n' → logprob: -2.87442946434021
    6. '```' → logprob: -3.24942946434021
    7. ' ' → logprob: -3.37442946434021
    8. ' 
' → logprob: -3.62442946434021
    9. '  
' → logprob: -4.249429702758789
    10. '     
' → logprob: -4.249429702758789

Token 4: ' total' (ID: 3609)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9490061402320862
    2. '    ' → logprob: -1.4490060806274414
    3. ' ' → logprob: -1.6990060806274414
    4. '```' → logprob: -1.8240060806274414
    5. ' ```' → logprob: -5.074006080627441
    6. '  ' → logprob: -5.574006080627441
    7. '\' → logprob: -5.949006080627441
    8. '    
' → logprob: -5.949006080627441
    9. '[' → logprob: -6.324006080627441
    10. '(space' → logprob: -6.324006080627441

Token 5: ' =' (ID: 314)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8016482591629028
    2. ' +=' → logprob: -1.3016482591629028
    3. '_' → logprob: -2.4266481399536133
    4. '+' → logprob: -2.4266481399536133
    5. '=' → logprob: -3.0516481399536133
    6. ' =' → logprob: -3.8016481399536133
    7. '.' → logprob: -5.051648139953613
    8. '  ' → logprob: -5.301648139953613
    9. '_space' → logprob: -5.301648139953613
    10. '    ' → logprob: -5.676648139953613

Token 6: ' int' (ID: 677)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.8678181767463684
    2. ' ' → logprob: -0.8678181767463684
    3. ' total' → logprob: -2.1178181171417236
    4. ' input' → logprob: -3.8678181171417236
    5. 'total' → logprob: -5.117818355560303
    6. 'input' → logprob: -5.742818355560303
    7. ' sum' → logprob: -5.867818355560303
    8. ' int' → logprob: -6.242818355560303
    9. '1' → logprob: -6.742818355560303
    10. ' i' → logprob: -7.367818355560303

Token 7: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.026965893805027008
    2. '(input' → logprob: -3.651965856552124
    3. '(total' → logprob: -7.651966094970703
    4. '('' → logprob: -9.651966094970703
    5. ' (' → logprob: -10.401966094970703
    6. '(
' → logprob: -10.526966094970703
    7. 'input' → logprob: -11.151966094970703
    8. '()' → logprob: -11.276966094970703
    9. 'total' → logprob: -12.151966094970703
    10. ' ' → logprob: -12.276966094970703

Token 8: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.015437652356922626
    2. '()' → logprob: -4.890437602996826
    3. '('' → logprob: -5.640437602996826
    4. ')' → logprob: -6.265437602996826
    5. '("("' → logprob: -7.140437602996826
    6. '())' → logprob: -7.890437602996826
    7. '(
' → logprob: -8.140438079833984
    8. '```' → logprob: -8.265438079833984
    9. ''' → logprob: -8.890438079833984
    10. '(""))' → logprob: -9.515438079833984

Token 9: '   ' (ID: 271)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.21746639907360077
    2. ' +' → logprob: -2.592466354370117
    3. '<|end|>' → logprob: -3.467466354370117
    4. ' ' → logprob: -3.717466354370117
    5. ')' → logprob: -3.967466354370117
    6. '   ' → logprob: -4.092466354370117
    7. ' if' → logprob: -4.967466354370117
    8. '    ' → logprob: -4.967466354370117
    9. '+
' → logprob: -5.967466354370117
    10. ' ==' → logprob: -6.342466354370117

Token 10: ' if' (ID: 538)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.933917224407196
    2. ' ' → logprob: -1.9339172840118408
    3. ' if' → logprob: -2.058917284011841
    4. '==' → logprob: -2.308917284011841
    5. ')' → logprob: -2.683917284011841
    6. '   ' → logprob: -3.308917284011841
    7. '+' → logprob: -3.558917284011841
    8. '<|end|>' → logprob: -3.933917284011841
    9. 'if' (adapté à ' if') → logprob: -4.433917045593262
    10. '    ' → logprob: -4.558917045593262

Token 11: ' total' (ID: 3609)
  Prédit: ' total'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' total' → logprob: -0.1338672637939453
    2. ' ' → logprob: -2.1338672637939453
    3. 'total' → logprob: -5.008867263793945
    4. ' not' → logprob: -8.508867263793945
    5. '  ' → logprob: -10.758867263793945
    6. '(total' → logprob: -11.883867263793945
    7. '_total' → logprob: -12.883867263793945
    8. '	total' → logprob: -14.133867263793945
    9. '<|end|>' → logprob: -14.508867263793945
    10. ' totals' → logprob: -14.633867263793945

Token 12: ' ==' (ID: 951)
  Prédit: ' >'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.55118328332901
    2. ' ==' → logprob: -1.5511832237243652
    3. '>' → logprob: -2.8011832237243652
    4. ' <=' → logprob: -3.1761832237243652
    5. ' <' → logprob: -3.1761832237243652
    6. ' >=' → logprob: -3.4261832237243652
    7. ' ' → logprob: -4.051183223724365
    8. '==' → logprob: -4.551183223724365
    9. '<' → logprob: -6.551183223724365
    10. ' !=' → logprob: -6.926183223724365

Token 13: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.20149023830890656
    2. '0' → logprob: -1.7014902830123901
    3. '32' → logprob: -9.95149040222168
    4. '100' → logprob: -12.07649040222168
    5. '  ' → logprob: -12.95149040222168
    6. '1' → logprob: -12.95149040222168
    7. ' EOF' → logprob: -13.01399040222168
    8. ' ' → logprob: -13.26399040222168
    9. '10' → logprob: -13.38899040222168
    10. '"' → logprob: -13.63899040222168

Token 14: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.004647995810955763
    2. ' ' → logprob: -5.379648208618164
    3. '-' → logprob: -10.879648208618164
    4. '1' → logprob: -12.879648208618164
    5. '42' → logprob: -13.129648208618164
    6. ' -' → logprob: -13.879648208618164
    7. '100' → logprob: -14.504648208618164
    8. '7' → logprob: -14.629648208618164
    9. '999' → logprob: -14.629648208618164
    10. '4' → logprob: -15.254648208618164

Token 15: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -2.9040898880339228e-05
    2. ':
' → logprob: -10.625028610229492
    3. ':return' → logprob: -13.500028610229492
    4. '   ' → logprob: -13.750028610229492
    5. '):' → logprob: -14.000028610229492
    6. ' :' → logprob: -14.000028610229492
    7. '       ' → logprob: -15.375028610229492
    8. ':**' → logprob: -15.750028610229492
    9. '():' → logprob: -17.000028610229492
    10. '.' → logprob: -17.250028610229492

Token 16: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.014917295426130295
    2. '   ' → logprob: -4.389917373657227
    3. ' break' → logprob: -6.264917373657227
    4. '	break' → logprob: -8.389917373657227
    5. '\t' → logprob: -9.264917373657227
    6. '\n' → logprob: -9.889917373657227
    7. 'break' → logprob: -10.264917373657227
    8. '    ' → logprob: -11.264917373657227
    9. '     ' → logprob: -11.264917373657227
    10. ' ' → logprob: -11.389917373657227

Token 17: ' break' (ID: 2338)
  Prédit: ' break'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' break' → logprob: -0.0867777019739151
    2. '       ' → logprob: -2.586777687072754
    3. 'break' (adapté à ' break') → logprob: -4.961777687072754
    4. '   ' → logprob: -7.836777687072754
    5. '	break' → logprob: -7.836777687072754
    6. '\n' → logprob: -10.961777687072754
    7. '_break' → logprob: -11.086777687072754
    8. '```' → logprob: -11.836777687072754
    9. '           ' → logprob: -11.961777687072754
    10. '        
' → logprob: -12.836777687072754

Token 18: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8027018904685974
    2. ':' → logprob: -1.3027019500732422
    3. '\n' → logprob: -1.8027019500732422
    4. '\' → logprob: -3.052701950073242
    5. '<|end|>' → logprob: -3.677701950073242
    6. '    
' → logprob: -4.427701950073242
    7. ')' → logprob: -5.052701950073242
    8. '```' → logprob: -5.552701950073242
    9. '
' → logprob: -5.927701950073242
    10. ' ' → logprob: -6.177701950073242

Token 19: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.32062652707099915
    2. '<|end|>' → logprob: -1.6956264972686768
    3. '    
' → logprob: -3.0706264972686768
    4. '```' → logprob: -4.695626735687256
    5. ')' → logprob: -5.070626735687256
    6. '
' → logprob: -5.195626735687256
    7. '\n' → logprob: -5.320626735687256
    8. '#' → logprob: -5.445626735687256
    9. '  
' → logprob: -5.820626735687256
    10. '<|end|>' → logprob: -5.820626735687256

Token 20: ' prices' (ID: 8451)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08324412256479263
    2. 'n' → logprob: -3.5832440853118896
    3. '    ' → logprob: -4.833244323730469
    4. '```' → logprob: -4.833244323730469
    5. ' ' → logprob: -4.958244323730469
    6. 'print' → logprob: -5.208244323730469
    7. ')' → logprob: -5.458244323730469
    8. '    
' → logprob: -5.708244323730469
    9. '\' → logprob: -6.333244323730469
    10. '\n' → logprob: -6.583244323730469

Token 21: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.17400087416172028
    2. '[' → logprob: -2.1740009784698486
    3. '=' → logprob: -3.1740009784698486
    4. '.' → logprob: -6.7990007400512695
    5. ' +=' → logprob: -7.2990007400512695
    6. '   ' → logprob: -7.5490007400512695
    7. '.append' → logprob: -7.5490007400512695
    8. '[]' → logprob: -8.04900074005127
    9. '[:]' → logprob: -8.17400074005127
    10. ' ' → logprob: -8.67400074005127

Token 22: ' [' (ID: 723)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.9001639485359192
    2. '[]' → logprob: -1.0251638889312744
    3. ' list' → logprob: -2.1501638889312744
    4. 'list' → logprob: -2.6501638889312744
    5. '[' → logprob: -3.5251638889312744
    6. ' [' → logprob: -4.1501641273498535
    7. '[list' → logprob: -6.9001641273498535
    8. ' ' → logprob: -7.6501641273498535
    9. '{}' → logprob: -7.9001641273498535
    10. '[input' → logprob: -9.150163650512695

Token 23: 'int' (ID: 491)
  Prédit: 'int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.0025615072809159756
    2. ' int' → logprob: -6.002561569213867
    3. ']int' → logprob: -10.252561569213867
    4. 'float' → logprob: -11.002561569213867
    5. '0' → logprob: -11.377561569213867
    6. ']' → logprob: -12.002561569213867
    7. '   ' → logprob: -12.377561569213867
    8. '(int' → logprob: -12.627561569213867
    9. ')' → logprob: -13.002561569213867
    10. '[int' → logprob: -13.377561569213867

Token 24: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.1473693698644638
    2. '(' → logprob: -2.022369384765625
    3. '(x' → logprob: -5.522369384765625
    4. '(i' → logprob: -7.897369384765625
    5. '()' → logprob: -9.272369384765625
    6. '(price' → logprob: -9.272369384765625
    7. ')' → logprob: -10.272369384765625
    8. '()]' → logprob: -10.772369384765625
    9. '(item' → logprob: -11.272369384765625
    10. '(user' → logprob: -11.397369384765625

Token 25: '())' (ID: 3516)
  Prédit: '())'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0005903251585550606
    2. '()' → logprob: -7.5005903244018555
    3. '()),' → logprob: -10.875590324401855
    4. '()]' → logprob: -11.250590324401855
    5. ' ())' → logprob: -13.000590324401855
    6. '()))' → logprob: -13.875590324401855
    7. '())
' → logprob: -14.000590324401855
    8. '().' → logprob: -15.000590324401855
    9. '());' → logprob: -15.250590324401855
    10. '();)' → logprob: -15.500590324401855

Token 26: ' for' (ID: 395)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.9454537034034729
    2. '()' → logprob: -1.1954536437988281
    3. ' for' → logprob: -1.4454536437988281
    4. 'for' → logprob: -3.070453643798828
    5. '   ' → logprob: -3.695453643798828
    6. ')]' → logprob: -7.195453643798828
    7. ' )' → logprob: -8.070453643798828
    8. '())' → logprob: -8.570453643798828
    9. ']' → logprob: -8.820453643798828
    10. '),' → logprob: -9.195453643798828

Token 27: ' _' (ID: 1175)
  Prédit: ' range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.011026838794350624
    2. ' _' → logprob: -4.761026859283447
    3. ' ' → logprob: -6.511026859283447
    4. '_' → logprob: -7.386026859283447
    5. ' i' → logprob: -8.886026382446289
    6. 'range' → logprob: -9.386026382446289
    7. '_range' → logprob: -9.886026382446289
    8. ' in' → logprob: -11.636026382446289
    9. ' xrange' → logprob: -11.636026382446289
    10. '	range' → logprob: -12.011026382446289

Token 28: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0037437870632857084
    2. 'range' → logprob: -5.878743648529053
    3. 'in' → logprob: -7.753743648529053
    4. ' range' → logprob: -7.753743648529053
    5. ' ' → logprob: -9.503744125366211
    6. '  ' → logprob: -13.003744125366211
    7. '(' → logprob: -14.628744125366211
    8. 's' → logprob: -14.878744125366211
    9. '(range' → logprob: -15.003744125366211
    10. '	range' → logprob: -15.003744125366211

Token 29: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.11302897334098816
    2. ' range' → logprob: -2.2380290031433105
    3. ' ' → logprob: -8.988028526306152
    4. '  ' → logprob: -11.113028526306152
    5. '	range' → logprob: -11.363028526306152
    6. '   ' → logprob: -11.738028526306152
    7. '[' → logprob: -11.863028526306152
    8. 'rang' → logprob: -11.988028526306152
    9. ']' → logprob: -12.238028526306152
    10. ')' → logprob: -12.613028526306152

Token 30: '(' (ID: 7)
  Prédit: '(total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(total' → logprob: -0.03717707842588425
    2. '(' → logprob: -3.412177085876465
    3. ' total' → logprob: -6.162177085876465
    4. 'total' → logprob: -7.037177085876465
    5. ' (' → logprob: -7.787177085876465
    6. '(n' → logprob: -10.037177085876465
    7. '(len' → logprob: -10.162177085876465
    8. ' ' → logprob: -11.662177085876465
    9. '10' → logprob: -12.912177085876465
    10. '(num' → logprob: -13.037177085876465

Token 31: '9' (ID: 24)
  Prédit: 'total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'total' → logprob: -0.07953955978155136
    2. ' total' → logprob: -2.7045395374298096
    3. '3' → logprob: -5.329539775848389
    4. '5' → logprob: -5.829539775848389
    5. '10' → logprob: -7.329539775848389
    6. ' ' → logprob: -7.954539775848389
    7. '6' → logprob: -8.70453929901123
    8. '4' → logprob: -8.82953929901123
    9. '7' → logprob: -9.32953929901123
    10. ')' → logprob: -9.70453929901123

Token 32: ')]
' (ID: 11587)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.0009412388317286968
    2. ')' → logprob: -7.625941276550293
    3. ' )' → logprob: -8.125941276550293
    4. ']' → logprob: -8.875941276550293
    5. '   ' → logprob: -12.375941276550293
    6. ' ]' → logprob: -12.375941276550293
    7. ')])' → logprob: -12.750941276550293
    8. ')]
' → logprob: -13.750941276550293
    9. '')]' → logprob: -13.875941276550293
    10. '))' → logprob: -14.000941276550293

Token 33: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.7546348571777344
    2. '   ' → logprob: -1.1296348571777344
    3. '<|end|>' → logprob: -2.0046348571777344
    4. '    
' → logprob: -4.129634857177734
    5. '```' → logprob: -4.504634857177734
    6. 'prices' → logprob: -5.504634857177734
    7. '\n' → logprob: -5.504634857177734
    8. ' 
' → logprob: -5.629634857177734
    9. ' ' → logprob: -5.754634857177734
    10. ' prices' → logprob: -5.754634857177734

Token 34: ' print' (ID: 2123)
  Prédit: 'prices'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'prices' → logprob: -0.9319860935211182
    2. ' prices' → logprob: -1.6819860935211182
    3. 'change' → logprob: -2.806986093521118
    4. 'sum' → logprob: -2.931986093521118
    5. 'discount' → logprob: -2.931986093521118
    6. ' change' → logprob: -3.306986093521118
    7. ' sum' → logprob: -3.556986093521118
    8. 'total' → logprob: -3.681986093521118
    9. ' total' → logprob: -3.806986093521118
    10. ' if' → logprob: -4.306985855102539

Token 35: '(total' (ID: 39744)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.4416543245315552
    2. '(sum' → logprob: -1.0666543245315552
    3. '(max' → logprob: -5.066654205322266
    4. '(total' → logprob: -5.691654205322266
    5. '('' → logprob: -7.066654205322266
    6. '("' → logprob: -7.441654205322266
    7. '(round' → logprob: -7.691654205322266
    8. '(f' → logprob: -7.816654205322266
    9. '((' → logprob: -8.066654205322266
    10. '()' → logprob: -8.066654205322266

Token 36: ' -' (ID: 533)
  Prédit: ' -'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.08959197998046875
    2. '-' → logprob: -2.5895919799804688
    3. ')' → logprob: -4.589591979980469
    4. ' )' → logprob: -7.964591979980469
    5. ',' → logprob: -9.589591979980469
    6. '   ' → logprob: -10.964591979980469
    7. '-s' → logprob: -11.714591979980469
    8. ' ' → logprob: -12.089591979980469
    9. ' ,' → logprob: -12.214591979980469
    10. '-)' → logprob: -12.214591979980469

Token 37: ' sum' (ID: 4215)
  Prédit: ' sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sum' → logprob: -0.46217861771583557
    2. 'sum' → logprob: -1.0871785879135132
    3. ' max' → logprob: -3.9621787071228027
    4. ' min' → logprob: -4.587178707122803
    5. 'max' → logprob: -5.837178707122803
    6. 'min' → logprob: -7.337178707122803
    7. ' ' → logprob: -9.712178230285645
    8. '   ' → logprob: -9.837178230285645
    9. '	sum' → logprob: -11.337178230285645
    10. '(sum' → logprob: -11.462178230285645

Token 38: '(pr' (ID: 38401)
  Prédit: '(pr'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(pr' → logprob: -0.0019308974733576179
    2. '(' → logprob: -6.2519307136535645
    3. ' (' → logprob: -13.876931190490723
    4. ')' → logprob: -15.251931190490723
    5. '(price' → logprob: -15.251931190490723
    6. 'prices' → logprob: -16.001930236816406
    7. '(pl' → logprob: -16.251930236816406
    8. '(p' → logprob: -16.376930236816406
    9. '(scores' → logprob: -16.501930236816406
    10. '(s' → logprob: -16.876930236816406

Token 39: 'ices' (ID: 1386)
  Prédit: 'ices'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ices' → logprob: -0.02056735008955002
    2. 'ces' → logprob: -3.8955674171447754
    3. '[' → logprob: -12.020566940307617
    4. ')' → logprob: -12.520566940307617
    5. '```' → logprob: -12.520566940307617
    6. 'cies' → logprob: -13.770566940307617
    7. 'oces' → logprob: -14.020566940307617
    8. 'prices' → logprob: -14.020566940307617
    9. 'rices' → logprob: -14.145566940307617
    10. '   ' → logprob: -14.145566940307617

Token 40: '))' (ID: 915)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0141900684684515
    2. '))' → logprob: -4.264190196990967
    3. ' )' → logprob: -11.014189720153809
    4. ')))' → logprob: -11.639189720153809
    5. ' ))' → logprob: -15.264189720153809
    6. ')}' → logprob: -15.514189720153809
    7. ')`' → logprob: -15.639189720153809
    8. '())' → logprob: -15.764189720153809
    9. ')
' → logprob: -15.889189720153809
    10. ')")' → logprob: -16.264190673828125


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 38
Tokens correctement prédits (1ère position, stricte): 16
Tokens correctement prédits (1ère position, avec adaptation): 16
Tokens correctement prédits (top 10): 33
Précision stricte (1ère position): 42.11%
Précision adaptée (1ère position): 42.11%
Précision (top 10): 86.84%
================================================================================
