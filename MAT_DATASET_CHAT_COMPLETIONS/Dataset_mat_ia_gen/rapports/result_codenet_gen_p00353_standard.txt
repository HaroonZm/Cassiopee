================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 16:58:14
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
m,f,b=map(int,input().split())
need=b-m
print(need if 0<need<=f else 0 if need<=0 else "NA")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'm' (ID: 76)
  → Token d'amorce (pas de prédiction)

Token 1: ',f' (ID: 38733)
  → Token d'amorce (pas de prédiction)

Token 2: ',b' (ID: 17568)
  → Token d'amorce (pas de prédiction)

Token 3: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.3438127636909485
    2. ',' → logprob: -1.3438127040863037
    3. ' =' → logprob: -3.8438127040863037
    4. '.' → logprob: -5.843812942504883
    5. '[' → logprob: -6.343812942504883
    6. ';' → logprob: -6.968812942504883
    7. '_' → logprob: -7.093812942504883
    8. '(' → logprob: -7.343812942504883
    9. ')' → logprob: -7.718812942504883
    10. ':' → logprob: -8.218812942504883

Token 4: 'map' (ID: 3726)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.20377199351787567
    2. '1' → logprob: -2.7037720680236816
    3. 'map' → logprob: -3.0787720680236816
    4. '[],' → logprob: -4.078772068023682
    5. '[]' → logprob: -4.328772068023682
    6. ' ' → logprob: -4.578772068023682
    7. 'range' → logprob: -4.703772068023682
    8. 'input' → logprob: -5.078772068023682
    9. '[' → logprob: -5.578772068023682
    10. ' [],' → logprob: -6.203772068023682

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0037606554105877876
    2. '<|end|>' → logprob: -6.253760814666748
    3. '(lambda' → logprob: -6.628760814666748
    4. '```' → logprob: -8.75376033782959
    5. ' (' → logprob: -9.62876033782959
    6. ')' → logprob: -10.00376033782959
    7. '(user' → logprob: -10.25376033782959
    8. '(
' → logprob: -11.00376033782959
    9. '<|end|>' → logprob: -11.00376033782959
    10. '(int' → logprob: -11.12876033782959

Token 6: ',input' (ID: 123014)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.1800829917192459
    2. ')' → logprob: -1.9300830364227295
    3. '(' → logprob: -4.55508279800415
    4. 'input' → logprob: -5.30508279800415
    5. ',input' → logprob: -6.43008279800415
    6. '<|end|>' → logprob: -7.18008279800415
    7. '(raw' → logprob: -7.80508279800415
    8. ',' → logprob: -8.430083274841309
    9. ')(' → logprob: -8.805083274841309
    10. '=input' → logprob: -8.805083274841309

Token 7: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.31574124097824097
    2. ')' → logprob: -1.9407413005828857
    3. '())' → logprob: -2.5657413005828857
    4. '()' → logprob: -4.315741062164307
    5. '(()' → logprob: -5.065741062164307
    6. '('' → logprob: -5.315741062164307
    7. '<|end|>' → logprob: -5.315741062164307
    8. '(""))' → logprob: -5.940741062164307
    9. '(token' → logprob: -6.315741062164307
    10. '()">' → logprob: -6.690741062164307

Token 8: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00012868782505393028
    2. 'strip' → logprob: -9.000128746032715
    3. ' split' → logprob: -12.750128746032715
    4. 'rstrip' → logprob: -13.750128746032715
    5. '(split' → logprob: -14.125128746032715
    6. ')' → logprob: -15.500128746032715
    7. 'spl' → logprob: -16.1251277923584
    8. 'read' → logprob: -16.6251277923584
    9. 'startswith' → logprob: -17.7501277923584
    10. '```' → logprob: -18.6251277923584

Token 9: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.041685592383146286
    2. '())' → logprob: -3.2916855812072754
    3. '))' → logprob: -6.541685581207275
    4. '`)' → logprob: -7.041685581207275
    5. '()' → logprob: -7.291685581207275
    6. '(' → logprob: -7.666685581207275
    7. ')`' → logprob: -10.041686058044434
    8. '()))' → logprob: -10.916686058044434
    9. '```' → logprob: -10.916686058044434
    10. '`' → logprob: -11.416686058044434

Token 10: 'need' (ID: 24630)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.16338525712490082
    2. 'if' → logprob: -3.2883851528167725
    3. 'a' → logprob: -3.5383851528167725
    4. 'for' → logprob: -3.5383851528167725
    5. 'c' → logprob: -4.413385391235352
    6. 'x' → logprob: -4.538385391235352
    7. 'r' → logprob: -4.788385391235352
    8. 'd' → logprob: -5.038385391235352
    9. 's' → logprob: -5.788385391235352
    10. '#' → logprob: -6.038385391235352

Token 11: '=b' (ID: 49769)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.3215257227420807
    2. '_' → logprob: -1.3215256929397583
    3. '+' → logprob: -5.821525573730469
    4. ' =' → logprob: -7.071525573730469
    5. 'for' → logprob: -7.571525573730469
    6. 'if' → logprob: -7.696525573730469
    7. '*' → logprob: -7.696525573730469
    8. ')' → logprob: -7.696525573730469
    9. 's' → logprob: -7.696525573730469
    10. '#' → logprob: -8.196525573730469

Token 12: '-m' (ID: 2126)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '-' → logprob: -0.18086087703704834
    2. '+' → logprob: -2.930860996246338
    3. ' -' → logprob: -3.430860996246338
    4. '>' → logprob: -3.680860996246338
    5. '*' → logprob: -3.930860996246338
    6. '_' → logprob: -4.930860996246338
    7. ' ' → logprob: -5.180860996246338
    8. ')' → logprob: -6.055860996246338
    9. '//' → logprob: -6.305860996246338
    10. ''' → logprob: -6.430860996246338

Token 13: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 14: 'print' (ID: 1598)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.20887914299964905
    2. '+' → logprob: -2.333879232406616
    3. 'if' → logprob: -2.958879232406616
    4. ' ' → logprob: -4.333878993988037
    5. '<|end|>' → logprob: -4.833878993988037
    6. '>' → logprob: -5.208878993988037
    7. '-' → logprob: -5.333878993988037
    8. '//' → logprob: -6.833878993988037
    9. ')' → logprob: -6.958878993988037
    10. ' //' → logprob: -7.333878993988037

Token 15: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0003502434410620481
    2. '('' → logprob: -8.875349998474121
    3. '("("' → logprob: -9.125349998474121
    4. '(f' → logprob: -10.375349998474121
    5. '("' → logprob: -11.375349998474121
    6. '((' → logprob: -11.875349998474121
    7. '(

' → logprob: -12.000349998474121
    8. '()' → logprob: -12.125349998474121
    9. '(end' → logprob: -12.125349998474121
    10. '(ne' → logprob: -12.125349998474121

Token 16: 'need' (ID: 24630)
  Prédit: 'need'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'need' → logprob: -0.0011083055287599564
    2. ' need' → logprob: -7.376108169555664
    3. '"' → logprob: -8.626108169555664
    4. ''' → logprob: -9.251108169555664
    5. 'f' → logprob: -9.501108169555664
    6. 'max' → logprob: -9.626108169555664
    7. 'abs' → logprob: -10.751108169555664
    8. ')' → logprob: -11.251108169555664
    9. 'b' → logprob: -12.251108169555664
    10. '(' → logprob: -12.501108169555664

Token 17: ' if' (ID: 538)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -8.995397365652025e-05
    2. '))' → logprob: -10.875089645385742
    3. '*' → logprob: -11.000089645385742
    4. '+' → logprob: -11.375089645385742
    5. '`)' → logprob: -11.500089645385742
    6. ' )' → logprob: -11.750089645385742
    7. '-' → logprob: -11.875089645385742
    8. '//' → logprob: -12.125089645385742
    9. '-)' → logprob: -13.000089645385742
    10. '**' → logprob: -13.500089645385742

Token 18: ' ' (ID: 220)
  Prédit: 'need'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'need' → logprob: -0.227620929479599
    2. ' need' → logprob: -1.6026209592819214
    3. 'f' → logprob: -6.852621078491211
    4. ' f' → logprob: -6.977621078491211
    5. 'b' → logprob: -8.977621078491211
    6. ' b' → logprob: -9.477621078491211
    7. ' m' → logprob: -12.727621078491211
    8. ')' → logprob: -13.227621078491211
    9. 'm' → logprob: -13.352621078491211
    10. '>' → logprob: -13.352621078491211

Token 19: '0' (ID: 15)
  Prédit: 'need'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'need' → logprob: -0.1799534559249878
    2. ' need' → logprob: -1.8049534559249878
    3. 'b' → logprob: -9.054953575134277
    4. ' b' → logprob: -9.554953575134277
    5. ' f' → logprob: -11.679953575134277
    6. 'f' → logprob: -12.304953575134277
    7. '0' → logprob: -12.804953575134277
    8. ' ' → logprob: -12.929953575134277
    9. '>' → logprob: -14.429953575134277
    10. 'not' → logprob: -14.679953575134277

Token 20: '<' (ID: 27)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>' → logprob: -0.3519498407840729
    2. '<=' → logprob: -1.8519498109817505
    3. '<' → logprob: -2.47694993019104
    4. '>=' → logprob: -3.35194993019104
    5. ' >' → logprob: -4.476949691772461
    6. ' <=' → logprob: -5.851949691772461
    7. ' else' → logprob: -5.976949691772461
    8. 'else' → logprob: -6.351949691772461
    9. ' <' → logprob: -6.976949691772461
    10. '==' → logprob: -7.601949691772461

Token 21: 'need' (ID: 24630)
  Prédit: 'need'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'need' → logprob: -0.008845718577504158
    2. ' need' → logprob: -4.758845806121826
    3. '=' → logprob: -8.383845329284668
    4. '```' → logprob: -14.633845329284668
    5. '=b' → logprob: -15.008845329284668
    6. '_need' → logprob: -15.133845329284668
    7. '=f' → logprob: -15.258845329284668
    8. '=m' → logprob: -15.758845329284668
    9. 'nee' → logprob: -16.383846282958984
    10. 'b' → logprob: -16.383846282958984

Token 22: '<=' (ID: 16672)
  Prédit: ' else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.7780926823616028
    2. '<' → logprob: -1.403092622756958
    3. 'else' → logprob: -1.528092622756958
    4. ' and' → logprob: -3.278092622756958
    5. 'and' → logprob: -3.403092622756958
    6. '<=' → logprob: -5.778092861175537
    7. ' <' → logprob: -5.903092861175537
    8. ' ' → logprob: -8.153092384338379
    9. '<|end|>' → logprob: -8.778092384338379
    10. '<len' → logprob: -9.028092384338379

Token 23: 'f' (ID: 69)
  Prédit: 'f'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.0015788980526849627
    2. 'm' → logprob: -7.6265788078308105
    3. '10' → logprob: -8.001579284667969
    4. '100' → logprob: -8.376579284667969
    5. ' f' → logprob: -8.501579284667969
    6. '6' → logprob: -9.501579284667969
    7. '20' → logprob: -10.751579284667969
    8. '5' → logprob: -10.751579284667969
    9. '12' → logprob: -10.876579284667969
    10. '9' → logprob: -11.001579284667969

Token 24: ' else' (ID: 1203)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.32320672273635864
    2. ' else' → logprob: -1.4482066631317139
    3. 'else' → logprob: -3.198206663131714
    4. ' )' → logprob: -8.073206901550293
    5. '))' → logprob: -11.323206901550293
    6. '),' → logprob: -12.073206901550293
    7. ' ' → logprob: -12.698206901550293
    8. 'and' → logprob: -12.823206901550293
    9. '	else' → logprob: -12.823206901550293
    10. ');' → logprob: -13.323206901550293

Token 25: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.08744420111179352
    2. ' ' → logprob: -2.712444305419922
    3. '-' → logprob: -4.962444305419922
    4. ' -' → logprob: -5.587444305419922
    5. ' f' → logprob: -5.962444305419922
    6. 'f' → logprob: -6.962444305419922
    7. '"' → logprob: -7.337444305419922
    8. 'm' → logprob: -7.962444305419922
    9. ' need' → logprob: -8.087444305419922
    10. ' m' → logprob: -8.212444305419922

Token 26: '0' (ID: 15)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.3756150007247925
    2. '0' → logprob: -1.2506150007247925
    3. '-f' → logprob: -4.000615119934082
    4. '"' → logprob: -5.500615119934082
    5. ' -' → logprob: -6.875615119934082
    6. ' ' → logprob: -7.125615119934082
    7. '"-' → logprob: -8.000615119934082
    8. '-m' → logprob: -8.250615119934082
    9. ''' → logprob: -8.250615119934082
    10. 'f' → logprob: -8.500615119934082

Token 27: ' if' (ID: 538)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -6.704273118884885e-07
    2. '))' → logprob: -15.375000953674316
    3. '`)' → logprob: -15.500000953674316
    4. ' )' → logprob: -15.875000953674316
    5. ')
' → logprob: -16.625
    6. '')' → logprob: -18.125
    7. ')`' → logprob: -18.125
    8. '),' → logprob: -19.125
    9. '）' → logprob: -19.25
    10. '")' → logprob: -19.5

Token 28: ' need' (ID: 1309)
  Prédit: ' need'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' need' → logprob: -0.6869376301765442
    2. 'need' → logprob: -0.8119376301765442
    3. ' f' → logprob: -3.9369375705718994
    4. 'f' → logprob: -4.1869378089904785
    5. 'b' → logprob: -5.0619378089904785
    6. ' b' → logprob: -5.1869378089904785
    7. ' not' → logprob: -6.1869378089904785
    8. ' ' → logprob: -7.0619378089904785
    9. 'not' → logprob: -7.0619378089904785
    10. ' m' → logprob: -7.1869378089904785

Token 29: '<=' (ID: 16672)
  Prédit: '<'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<' → logprob: -0.41400718688964844
    2. '<=' → logprob: -1.7890071868896484
    3. '>' → logprob: -2.1640071868896484
    4. ' <=' → logprob: -3.6640071868896484
    5. ' <' → logprob: -4.039007186889648
    6. ' >' → logprob: -4.414007186889648
    7. '==' → logprob: -6.914007186889648
    8. '>=' → logprob: -8.539007186889648
    9. ' ==' → logprob: -9.289007186889648
    10. ' ' → logprob: -9.289007186889648

Token 30: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0004903609515167773
    2. ' ' → logprob: -7.625490188598633
    3. 'f' → logprob: -13.125490188598633
    4. 'b' → logprob: -16.375490188598633
    5. ' f' → logprob: -16.500490188598633
    6. '<|end|>' → logprob: -16.500490188598633
    7. '1' → logprob: -17.500490188598633
    8. '  ' → logprob: -17.875490188598633
    9. '۰' → logprob: -18.000490188598633
    10. '-' → logprob: -18.250490188598633

Token 31: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.014175502583384514
    2. 'else' → logprob: -4.2641754150390625
    3. ')' → logprob: -11.889175415039062
    4. ' or' → logprob: -12.514175415039062
    5. '	else' → logprob: -14.139175415039062
    6. ' )' → logprob: -15.139175415039062
    7. ' ' → logprob: -15.139175415039062
    8. '```' → logprob: -16.514175415039062
    9. ' ' → logprob: -16.764175415039062
    10. '-' → logprob: -17.139175415039062

Token 32: ' "' (ID: 392)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.005244072061032057
    2. ' f' → logprob: -5.255244255065918
    3. '-f' → logprob: -12.755244255065918
    4. ' ' → logprob: -13.380244255065918
    5. '2' → logprob: -14.130244255065918
    6. 'b' → logprob: -14.255244255065918
    7. ' -' → logprob: -14.505244255065918
    8. '100' → logprob: -14.505244255065918
    9. '0' → logprob: -14.755244255065918
    10. '(f' → logprob: -14.880244255065918

Token 33: 'NA' (ID: 9555)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.020820504054427147
    2. ' f' → logprob: -4.145820617675781
    3. '"' → logprob: -6.020820617675781
    4. '-' → logprob: -7.020820617675781
    5. '?' → logprob: -7.520820617675781
    6. 'F' → logprob: -8.645820617675781
    7. ''f' → logprob: -9.270820617675781
    8. '-f' → logprob: -9.770820617675781
    9. '(f' → logprob: -9.770820617675781
    10. ''' → logprob: -9.770820617675781

Token 34: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -6.694766489090398e-05
    2. ')' → logprob: -9.750066757202148
    3. '"' → logprob: -11.875066757202148
    4. ')")' → logprob: -13.875066757202148
    5. '")
' → logprob: -15.125066757202148
    6. ' ")' → logprob: -15.500066757202148
    7. '”)' → logprob: -17.50006675720215
    8. '')' → logprob: -17.62506675720215
    9. '!")' → logprob: -17.75006675720215
    10. '"})' → logprob: -17.87506675720215


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 32
Tokens correctement prédits (1ère position, stricte): 10
Tokens correctement prédits (1ère position, avec adaptation): 10
Tokens correctement prédits (top 10): 20
Précision stricte (1ère position): 31.25%
Précision adaptée (1ère position): 31.25%
Précision (top 10): 62.50%
================================================================================
