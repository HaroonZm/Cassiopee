================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:57:37
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
while True:
    s = input()
    if s == "END OF INPUT":
        break
    parts = s.split(' ')
    res = [str(len(x)) for x in parts]
    print(''.join(res))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'while' (ID: 7032)
  → Token d'amorce (pas de prédiction)

Token 1: ' True' (ID: 6432)
  → Token d'amorce (pas de prédiction)

Token 2: ':
' (ID: 734)
  → Token d'amorce (pas de prédiction)

Token 3: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2777022123336792
    2. ' ' → logprob: -1.9027022123336792
    3. '\' → logprob: -3.9027023315429688
    4. '    ' → logprob: -4.152702331542969
    5. '    
' → logprob: -4.527702331542969
    6. ' 
' → logprob: -4.777702331542969
    7. '```' → logprob: -4.777702331542969
    8. '\n' → logprob: -5.277702331542969
    9. '<|end|>' → logprob: -5.277702331542969
    10. '(space' → logprob: -5.902702331542969

Token 4: ' s' (ID: 265)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4148074984550476
    2. '    ' → logprob: -1.9148075580596924
    3. ' ' → logprob: -2.0398075580596924
    4. '```' → logprob: -3.5398075580596924
    5. '       ' → logprob: -4.914807319641113
    6. '  ' → logprob: -5.289807319641113
    7. '    
' → logprob: -5.789807319641113
    8. 'i' → logprob: -6.414807319641113
    9. '`' → logprob: -6.414807319641113
    10. '        
' → logprob: -6.789807319641113

Token 5: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.17110887169837952
    2. '.' → logprob: -3.1711089611053467
    3. 'u' → logprob: -3.2961089611053467
    4. 't' → logprob: -4.046108722686768
    5. '   ' → logprob: -4.546108722686768
    6. ':' → logprob: -4.921108722686768
    7. ' ' → logprob: -5.046108722686768
    8. ' =' → logprob: -5.171108722686768
    9. ')' → logprob: -5.421108722686768
    10. ',' → logprob: -5.921108722686768

Token 6: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.4741007089614868
    2. 'input' → logprob: -0.9741007089614868
    3. ' ' → logprob: -11.974101066589355
    4. '=input' → logprob: -12.224101066589355
    5. '(input' → logprob: -12.849101066589355
    6. 's' → logprob: -13.099101066589355
    7. '   ' → logprob: -13.474101066589355
    8. ' s' → logprob: -13.974101066589355
    9. '<input' → logprob: -14.349101066589355
    10. 'int' → logprob: -14.724101066589355

Token 7: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.01737222447991371
    2. '('' → logprob: -4.767372131347656
    3. '("("' → logprob: -5.142372131347656
    4. ''' → logprob: -6.267372131347656
    5. '()' → logprob: -8.267372131347656
    6. '```' → logprob: -8.392372131347656
    7. '"' → logprob: -8.642372131347656
    8. ''s' → logprob: -10.392372131347656
    9. '`' → logprob: -10.392372131347656
    10. ' ' → logprob: -10.517372131347656

Token 8: '   ' (ID: 271)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8033039569854736
    2. ' if' → logprob: -1.5533039569854736
    3. '   ' → logprob: -2.1783039569854736
    4. '.' → logprob: -2.3033039569854736
    5. ':' → logprob: -2.9283039569854736
    6. '<|end|>' → logprob: -3.8033039569854736
    7. '    ' → logprob: -4.1783037185668945
    8. '  ' → logprob: -4.9283037185668945
    9. ')' → logprob: -5.3033037185668945
    10. 'if' → logprob: -5.5533037185668945

Token 9: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.19542762637138367
    2. 'if' (adapté à ' if') → logprob: -2.695427656173706
    3. '.' → logprob: -2.820427656173706
    4. ' ' → logprob: -3.820427656173706
    5. '   ' → logprob: -4.195427417755127
    6. '    ' → logprob: -5.570427417755127
    7. ':' → logprob: -6.320427417755127
    8. '=' → logprob: -6.570427417755127
    9. '.strip' → logprob: -6.695427417755127
    10. 'i' → logprob: -7.070427417755127

Token 10: ' s' (ID: 265)
  Prédit: ' not'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.525254487991333
    2. ' s' → logprob: -0.900254487991333
    3. ' ' → logprob: -6.400254249572754
    4. 's' → logprob: -7.900254249572754
    5. 'not' → logprob: -9.400254249572754
    6. '<|end|>' → logprob: -12.275254249572754
    7. '  ' → logprob: -12.775254249572754
    8. ' len' → logprob: -12.775254249572754
    9. ' ' → logprob: -14.525254249572754
    10. ' ‌' → logprob: -14.650254249572754

Token 11: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.027078673243522644
    2. '==' → logprob: -4.402078628540039
    3. '.' → logprob: -4.527078628540039
    4. ' .' → logprob: -6.527078628540039
    5. '.startswith' → logprob: -6.777078628540039
    6. ' ' → logprob: -8.027078628540039
    7. '.strip' → logprob: -8.277078628540039
    8. ' !=' → logprob: -8.777078628540039
    9. ':' → logprob: -10.027078628540039
    10. ')' → logprob: -10.152078628540039

Token 12: ' "' (ID: 392)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.06419512629508972
    2. ''' → logprob: -2.814195156097412
    3. ' "' → logprob: -6.314195156097412
    4. ' '' → logprob: -8.064194679260254
    5. ' ' → logprob: -10.064194679260254
    6. '""' → logprob: -10.314194679260254
    7. '''' → logprob: -11.314194679260254
    8. '"\' → logprob: -13.564194679260254
    9. '"I' → logprob: -13.939194679260254
    10. '"user' → logprob: -13.939194679260254

Token 13: 'END' (ID: 7671)
  Prédit: 'exit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'exit' → logprob: -0.67836993932724
    2. 'quit' → logprob: -1.1783699989318848
    3. '"' → logprob: -2.1783699989318848
    4. '":' → logprob: -3.1783699989318848
    5. 'stop' → logprob: -4.178369998931885
    6. 'q' → logprob: -5.803369998931885
    7. 'hello' → logprob: -5.928369998931885
    8. '0' → logprob: -5.928369998931885
    9. 'break' → logprob: -6.303369998931885
    10. 'end' → logprob: -6.428369998931885

Token 14: ' OF' (ID: 5307)
  Prédit: '":'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '":' → logprob: -0.00970191415399313
    2. '"' → logprob: -4.759701728820801
    3. ':' → logprob: -7.634701728820801
    4. '":
' → logprob: -7.634701728820801
    5. '"):' → logprob: -10.2597017288208
    6. ' ":' → logprob: -10.6347017288208
    7. '":
' → logprob: -10.8847017288208
    8. ' "' → logprob: -11.8847017288208
    9. '   ' → logprob: -12.1347017288208
    10. '\":' → logprob: -12.3847017288208

Token 15: ' INPUT' (ID: 57481)
  Prédit: ' INPUT'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' INPUT' → logprob: -0.4376576542854309
    2. ' TRAN' → logprob: -1.9376575946807861
    3. ' FILE' → logprob: -2.437657594680786
    4. 'INPUT' → logprob: -3.312657594680786
    5. ' TRANS' → logprob: -3.937657594680786
    6. '   ' → logprob: -4.187657833099365
    7. ' ' → logprob: -4.437657833099365
    8. '_INPUT' → logprob: -4.562657833099365
    9. ' input' → logprob: -5.562657833099365
    10. '  ' → logprob: -5.562657833099365

Token 16: '":
' (ID: 9213)
  Prédit: '":'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '":' → logprob: -0.02553073689341545
    2. '"' → logprob: -3.7755308151245117
    3. '":
' → logprob: -6.275530815124512
    4. ':' → logprob: -8.150530815124512
    5. '":
' → logprob: -9.900530815124512
    6. '"):' → logprob: -10.775530815124512
    7. ' ":' → logprob: -12.025530815124512
    8. ' "' → logprob: -12.150530815124512
    9. '```' → logprob: -12.525530815124512
    10. '":

' → logprob: -12.650530815124512

Token 17: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0004080315411556512
    2. ' break' → logprob: -8.375408172607422
    3. '   ' → logprob: -9.875408172607422
    4. '\n' → logprob: -10.250408172607422
    5. ':' → logprob: -10.500408172607422
    6. '	break' → logprob: -10.875408172607422
    7. '<|end|>' → logprob: -11.500408172607422
    8. '           ' → logprob: -12.250408172607422
    9. '    ' → logprob: -12.375408172607422
    10. '      ' → logprob: -12.750408172607422

Token 18: ' break' (ID: 2338)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.47639861702919006
    2. ' break' → logprob: -0.9763985872268677
    3. '           ' → logprob: -6.976398468017578
    4. 'break' (adapté à ' break') → logprob: -7.226398468017578
    5. '   ' → logprob: -8.226398468017578
    6. '	break' → logprob: -8.476398468017578
    7. '\n' → logprob: -9.351398468017578
    8. '```' → logprob: -10.226398468017578
    9. '_break' → logprob: -11.101398468017578
    10. ' ' → logprob: -11.726398468017578

Token 19: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02666669338941574
    2. '
' → logprob: -4.651666641235352
    3. '    
' → logprob: -4.776666641235352
    4. '<|end|>' → logprob: -5.526666641235352
    5. '\n' → logprob: -7.151666641235352
    6. ' ' → logprob: -7.276666641235352
    7. '  
' → logprob: -7.401666641235352
    8. '  ' → logprob: -7.776666641235352
    9. ')' → logprob: -7.901666641235352
    10. '    ' → logprob: -8.276666641235352

Token 20: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04779341071844101
    2. '    
' → logprob: -3.672793388366699
    3. '
' → logprob: -4.672793388366699
    4. '<|end|>' → logprob: -4.797793388366699
    5. '\n' → logprob: -7.047793388366699
    6. 'print' → logprob: -7.672793388366699
    7. ')' → logprob: -7.922793388366699
    8. '    ' → logprob: -8.0477933883667
    9. '```' → logprob: -8.2977933883667
    10. '<|end|>' → logprob: -8.2977933883667

Token 21: ' parts' (ID: 7881)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7083571553230286
    2. '    
' → logprob: -1.7083570957183838
    3. '\n' → logprob: -2.583357095718384
    4. '
' → logprob: -2.583357095718384
    5. 'print' → logprob: -3.208357095718384
    6. '  
' → logprob: -3.458357095718384
    7. '<|end|>' → logprob: -3.458357095718384
    8. ' ' → logprob: -3.583357095718384
    9. '    ' → logprob: -4.458357334136963
    10. ' 
' → logprob: -4.833357334136963

Token 22: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.6833047866821289
    2. '[' → logprob: -1.058304786682129
    3. '=' → logprob: -2.183304786682129
    4. '.' → logprob: -3.433304786682129
    5. '[:]' → logprob: -7.058304786682129
    6. '   ' → logprob: -7.558304786682129
    7. ')' → logprob: -7.808304786682129
    8. '[]' → logprob: -8.433304786682129
    9. ' ' → logprob: -8.683304786682129
    10. '['' → logprob: -8.808304786682129

Token 23: ' s' (ID: 265)
  Prédit: ' s'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' s' → logprob: -0.04301471635699272
    2. 's' → logprob: -3.1680147647857666
    3. ' parts' → logprob: -12.293014526367188
    4. ' list' → logprob: -12.918014526367188
    5. ' ' → logprob: -13.418014526367188
    6. 'list' → logprob: -13.793014526367188
    7. '[]' → logprob: -14.043014526367188
    8. '<|end|>' → logprob: -14.168014526367188
    9. ' input' → logprob: -14.293014526367188
    10. 'input' → logprob: -14.293014526367188

Token 24: '.split' (ID: 10347)
  Prédit: '.split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.split' → logprob: -0.48044800758361816
    2. '.' → logprob: -0.9804480075836182
    3. '.strip' → logprob: -5.230447769165039
    4. ' .' → logprob: -6.980447769165039
    5. '.rstrip' → logprob: -10.355447769165039
    6. '.lower' → logprob: -11.480447769165039
    7. '.replace' → logprob: -11.605447769165039
    8. '.s' → logprob: -12.355447769165039
    9. 'split' → logprob: -12.605447769165039
    10. '.Split' → logprob: -12.980447769165039

Token 25: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.3092899024486542
    2. '(' → logprob: -1.8092899322509766
    3. '("("' → logprob: -2.3092899322509766
    4. '()' → logprob: -6.309289932250977
    5. ''' → logprob: -7.184289932250977
    6. '("' → logprob: -8.684289932250977
    7. '"' → logprob: -9.809289932250977
    8. '('.')' → logprob: -10.309289932250977
    9. '   ' → logprob: -11.684289932250977
    10. '('(' → logprob: -11.684289932250977

Token 26: ' ')
' (ID: 49195)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.023738155141472816
    2. ')' → logprob: -4.148738384246826
    3. '('' → logprob: -5.898738384246826
    4. '(' → logprob: -6.148738384246826
    5. ' )' → logprob: -7.648738384246826
    6. '())' → logprob: -7.648738384246826
    7. '')' → logprob: -7.898738384246826
    8. '()
' → logprob: -7.898738384246826
    9. ',' → logprob: -8.023737907409668
    10. '(',' → logprob: -8.273737907409668

Token 27: '   ' (ID: 271)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.41525086760520935
    2. 'print' → logprob: -1.9152508974075317
    3. 'i' → logprob: -2.790250778198242
    4. 'n' → logprob: -3.165250778198242
    5. '[' → logprob: -3.665250778198242
    6. '```' → logprob: -4.540250778198242
    7. 'for' → logprob: -4.915250778198242
    8. '   ' → logprob: -5.165250778198242
    9. '#' → logprob: -5.165250778198242
    10. '=' → logprob: -5.290250778198242

Token 28: ' res' (ID: 694)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.25059980154037476
    2. 'if' → logprob: -2.1255998611450195
    3. 'n' → logprob: -3.1255998611450195
    4. 'c' → logprob: -3.7505998611450195
    5. 'p' → logprob: -4.7505998611450195
    6. 'a' → logprob: -5.0005998611450195
    7. '[' → logprob: -6.1255998611450195
    8. '#' → logprob: -6.1255998611450195
    9. 'v' → logprob: -6.1255998611450195
    10. 't' → logprob: -6.5005998611450195

Token 29: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.7262097001075745
    2. ' =' → logprob: -1.4762096405029297
    3. 'ult' → logprob: -1.7262096405029297
    4. '=' → logprob: -2.9762096405029297
    5. '.append' → logprob: -3.9762096405029297
    6. '[]' → logprob: -4.22620964050293
    7. 'ults' → logprob: -4.22620964050293
    8. 'ULT' → logprob: -6.47620964050293
    9. ' +=' → logprob: -6.47620964050293
    10. 's' → logprob: -6.72620964050293

Token 30: ' [' (ID: 723)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.9503130912780762
    2. ' int' → logprob: -0.9503130912780762
    3. ' []' → logprob: -2.450313091278076
    4. '[]' → logprob: -2.950313091278076
    5. '[int' → logprob: -3.075313091278076
    6. ' parts' → logprob: -4.325313091278076
    7. ' [' → logprob: -5.075313091278076
    8. ' list' → logprob: -5.700313091278076
    9. '0' → logprob: -5.700313091278076
    10. 'parts' → logprob: -5.825313091278076

Token 31: 'str' (ID: 689)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.010014478117227554
    2. 'parts' → logprob: -5.760014533996582
    3. 'len' → logprob: -6.385014533996582
    4. 'float' → logprob: -6.510014533996582
    5. 'part' → logprob: -6.635014533996582
    6. 'p' → logprob: -7.135014533996582
    7. '(int' → logprob: -7.885014533996582
    8. 'x' → logprob: -8.135014533996582
    9. 'str' → logprob: -9.010014533996582
    10. 'i' → logprob: -9.010014533996582

Token 32: '(len' (ID: 14990)
  Prédit: '(int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.5549723505973816
    2. '(len' → logprob: -0.9299723505973816
    3. '(' → logprob: -4.679972171783447
    4. '(sum' → logprob: -4.804972171783447
    5. '(ord' → logprob: -4.804972171783447
    6. '(eval' → logprob: -6.054972171783447
    7. '(max' → logprob: -6.429972171783447
    8. '(i' → logprob: -6.929972171783447
    9. '(abs' → logprob: -8.679972648620605
    10. '((' → logprob: -8.804972648620605

Token 33: '(x' (ID: 4061)
  Prédit: '(part'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(part' → logprob: -0.9366515874862671
    2. '(p' → logprob: -1.061651587486267
    3. '(parts' → logprob: -1.436651587486267
    4. '(word' → logprob: -3.9366517066955566
    5. '(w' → logprob: -6.311651706695557
    6. '(x' → logprob: -6.561651706695557
    7. '(i' → logprob: -7.061651706695557
    8. '(token' → logprob: -8.061651229858398
    9. '(' → logprob: -8.061651229858398
    10. '(piece' → logprob: -9.436651229858398

Token 34: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.001680059707723558
    2. ')' → logprob: -6.62667989730835
    3. '()))' → logprob: -9.126680374145508
    4. ' ))' → logprob: -9.126680374145508
    5. ')))' → logprob: -10.251680374145508
    6. ')]' → logprob: -11.001680374145508
    7. ')+' → logprob: -11.626680374145508
    8. '))
' → logprob: -11.626680374145508
    9. ' ' → logprob: -11.751680374145508
    10. '(' → logprob: -11.876680374145508

Token 35: ' for' (ID: 395)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.022164151072502136
    2. '(' → logprob: -4.897164344787598
    3. 'for' → logprob: -5.022164344787598
    4. ' for' → logprob: -5.147164344787598
    5. '(x' → logprob: -7.397164344787598
    6. '()' → logprob: -7.647164344787598
    7. ')]' → logprob: -7.647164344787598
    8. ']' → logprob: -8.522164344787598
    9. '+' → logprob: -9.147164344787598
    10. ' ' → logprob: -10.272164344787598

Token 36: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.0718083381652832
    2. 'x' → logprob: -2.696808338165283
    3. '(x' → logprob: -6.696808338165283
    4. '<|end|>' → logprob: -7.821808338165283
    5. '<|end|>' → logprob: -9.071807861328125
    6. ' parts' → logprob: -9.571807861328125
    7. ' ' → logprob: -10.946807861328125
    8. '	x' → logprob: -11.446807861328125
    9. 'parts' → logprob: -11.571807861328125
    10. '(parts' → logprob: -12.196807861328125

Token 37: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.03396954387426376
    2. 'in' → logprob: -3.4089696407318115
    3. ' ' → logprob: -8.78396987915039
    4. '<|end|>' → logprob: -9.28396987915039
    5. ')' → logprob: -10.28396987915039
    6. '<|end|>' → logprob: -10.78396987915039
    7. 's' → logprob: -11.90896987915039
    8. '	in' → logprob: -12.78396987915039
    9. 'x' → logprob: -13.03396987915039
    10. '.' → logprob: -13.53396987915039

Token 38: ' parts' (ID: 7881)
  Prédit: 'parts'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'parts' → logprob: -0.12808725237846375
    2. ' parts' → logprob: -2.128087282180786
    3. '(parts' → logprob: -7.628087043762207
    4. '   ' → logprob: -8.128087043762207
    5. ' ' → logprob: -9.003087043762207
    6. '  ' → logprob: -10.003087043762207
    7. 'x' → logprob: -10.190587043762207
    8. 's' → logprob: -10.565587043762207
    9. 'part' → logprob: -10.753087043762207
    10. 'range' → logprob: -10.878087043762207

Token 39: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0017469348385930061
    2. ' ]' → logprob: -6.876747131347656
    3. ')]' → logprob: -7.376747131347656
    4. ')' → logprob: -9.751747131347656
    5. ']
' → logprob: -11.876747131347656
    6. '()]' → logprob: -12.251747131347656
    7. ' if' → logprob: -12.376747131347656
    8. '   ' → logprob: -12.501747131347656
    9. '])' → logprob: -12.626747131347656
    10. '])]' → logprob: -14.126747131347656

Token 40: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6466785073280334
    2. 'print' → logprob: -1.1466784477233887
    3. '<|end|>' → logprob: -2.2716784477233887
    4. ' print' → logprob: -3.1466784477233887
    5. ' ' → logprob: -5.646678447723389
    6. '
' → logprob: -5.646678447723389
    7. ')' → logprob: -6.771678447723389
    8. '    
' → logprob: -7.396678447723389
    9. '  ' → logprob: -7.396678447723389
    10. '[' → logprob: -7.646678447723389

Token 41: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.06605919450521469
    2. ' print' → logprob: -2.816059112548828
    3. '   ' → logprob: -5.566059112548828
    4. ' for' → logprob: -9.316059112548828
    5. 'for' → logprob: -10.191059112548828
    6. '<|end|>' → logprob: -10.441059112548828
    7. '```' → logprob: -10.691059112548828
    8. ' ' → logprob: -10.691059112548828
    9. ' if' → logprob: -11.316059112548828
    10. 'if' → logprob: -11.691059112548828

Token 42: '('' (ID: 706)
  Prédit: '(''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '('' → logprob: -0.17464807629585266
    2. '(' → logprob: -2.1746480464935303
    3. '(len' → logprob: -3.6746480464935303
    4. '("' → logprob: -4.674648284912109
    5. '(res' → logprob: -4.924648284912109
    6. '(*' → logprob: -5.424648284912109
    7. '("("' → logprob: -9.17464828491211
    8. '(sum' → logprob: -9.92464828491211
    9. '(tuple' → logprob: -10.17464828491211
    10. '()' → logprob: -11.04964828491211

Token 43: ''.' (ID: 6120)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.005217159632593393
    2. ' '' → logprob: -6.1302170753479
    3. '"' → logprob: -6.7552170753479
    4. ''.' → logprob: -7.7552170753479
    5. '','.' → logprob: -7.7552170753479
    6. ' '.' → logprob: -8.380217552185059
    7. '('' → logprob: -8.630217552185059
    8. ''-' → logprob: -9.130217552185059
    9. '''.' → logprob: -9.255217552185059
    10. ' ''.' → logprob: -9.630217552185059

Token 44: 'join' (ID: 10891)
  Prédit: 'join'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'join' → logprob: -0.00016194197814911604
    2. ' join' → logprob: -9.125162124633789
    3. '''.' → logprob: -10.750162124633789
    4. ''.' → logprob: -11.000162124633789
    5. ''' → logprob: -12.875162124633789
    6. 'j' → logprob: -13.125162124633789
    7. 'jo' → logprob: -13.250162124633789
    8. 'print' → logprob: -13.250162124633789
    9. ' ' → logprob: -13.500162124633789
    10. 'strip' → logprob: -13.875162124633789

Token 45: '(res' (ID: 8331)
  Prédit: '(res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(res' → logprob: -7.822646693966817e-06
    2. 'res' → logprob: -12.250007629394531
    3. '(' → logprob: -12.750007629394531
    4. ')' → logprob: -16.75000762939453
    5. '(str' → logprob: -18.00000762939453
    6. '=res' → logprob: -18.12500762939453
    7. ',res' → logprob: -18.25000762939453
    8. ' res' → logprob: -18.62500762939453
    9. ' (' → logprob: -19.12500762939453
    10. '$res' → logprob: -19.25000762939453

Token 46: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.5759468078613281
    2. ')' → logprob: -0.8259468078613281
    3. ')))' → logprob: -12.075946807861328
    4. '))
' → logprob: -14.575946807861328
    5. ''))' → logprob: -15.200946807861328
    6. ')
' → logprob: -15.325946807861328
    7. '])' → logprob: -15.700946807861328
    8. ' )' → logprob: -15.950946807861328
    9. ' ))' → logprob: -16.450946807861328
    10. '')' → logprob: -16.575946807861328


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 44
Tokens correctement prédits (1ère position, stricte): 19
Tokens correctement prédits (1ère position, avec adaptation): 20
Tokens correctement prédits (top 10): 37
Précision stricte (1ère position): 43.18%
Précision adaptée (1ère position): 45.45%
Précision (top 10): 84.09%
================================================================================
