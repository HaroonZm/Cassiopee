================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:04:00
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
L=int(input())
cats=list(map(int,input().split()))
stack=set()
inside=[]
for i,c in enumerate(cats,1):
    if c>0:
        if c in stack:
            print(i)
            break
        stack.add(c)
        inside.append(c)
    else:
        if -c not in stack:
            print(i)
            break
        if inside[-1]!=-c:
            print(i)
            break
        inside.pop()
        stack.remove(-c)
else:
    print("OK")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'L' (ID: 43)
  → Token d'amorce (pas de prédiction)

Token 1: '=int' (ID: 37431)
  → Token d'amorce (pas de prédiction)

Token 2: '(input' (ID: 10054)
  → Token d'amorce (pas de prédiction)

Token 3: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.024926161393523216
    2. '()' → logprob: -4.39992618560791
    3. ')' → logprob: -4.52492618560791
    4. '(
' → logprob: -7.64992618560791
    5. '())' → logprob: -8.02492618560791
    6. '```' → logprob: -9.02492618560791
    7. '`' → logprob: -9.14992618560791
    8. '(()' → logprob: -9.52492618560791
    9. '("("' → logprob: -9.77492618560791
    10. '(

' → logprob: -10.02492618560791

Token 4: 'cats' (ID: 70782)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.9211626648902893
    2. '*' → logprob: -1.4211626052856445
    3. '#' → logprob: -1.7961626052856445
    4. '%' → logprob: -2.7961626052856445
    5. ''' → logprob: -3.9211626052856445
    6. '\n' → logprob: -3.9211626052856445
    7. ')' → logprob: -4.2961626052856445
    8. ' ' → logprob: -4.4211626052856445
    9. '**' → logprob: -4.6711626052856445
    10. 'for' → logprob: -4.9211626052856445

Token 5: '=list' (ID: 93413)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.16618762910366058
    2. '_' → logprob: -2.2911875247955322
    3. '=' → logprob: -3.5411875247955322
    4. ')' → logprob: -4.791187763214111
    5. ' =' → logprob: -5.041187763214111
    6. '.' → logprob: -6.291187763214111
    7. ']' → logprob: -7.166187763214111
    8. '[:]' → logprob: -7.166187763214111
    9. ''' → logprob: -7.291187763214111
    10. '[]' → logprob: -7.666187763214111

Token 6: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00011105302110081539
    2. '(range' → logprob: -9.375110626220703
    3. '((' → logprob: -12.625110626220703
    4. '(
' → logprob: -12.750110626220703
    5. '(

' → logprob: -13.000110626220703
    6. '(input' → logprob: -13.000110626220703
    7. '("("' → logprob: -13.250110626220703
    8. '(c' → logprob: -13.750110626220703
    9. '()' → logprob: -14.000110626220703
    10. '(int' → logprob: -14.000110626220703

Token 7: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.525723397731781
    2. '(' → logprob: -0.900723397731781
    3. '(str' → logprob: -6.650723457336426
    4. '(input' → logprob: -7.275723457336426
    5. '(lambda' → logprob: -8.025723457336426
    6. '(
' → logprob: -9.650723457336426
    7. '(eval' → logprob: -9.900723457336426
    8. '<int' → logprob: -10.025723457336426
    9. 'int' → logprob: -10.775723457336426
    10. '(list' → logprob: -11.150723457336426

Token 8: ',input' (ID: 123014)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.00687000248581171
    2. '(' → logprob: -5.131869792938232
    3. ',input' → logprob: -7.506869792938232
    4. ')' → logprob: -8.25687026977539
    5. '))' → logprob: -9.88187026977539
    6. '=input' → logprob: -10.25687026977539
    7. 'input' → logprob: -11.13187026977539
    8. '(
' → logprob: -12.13187026977539
    9. ' (' → logprob: -12.50687026977539
    10. '(INPUT' → logprob: -13.13187026977539

Token 9: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.004975797142833471
    2. '())' → logprob: -6.25497579574585
    3. '()' → logprob: -6.50497579574585
    4. '()))' → logprob: -6.62997579574585
    5. '(' → logprob: -9.004976272583008
    6. '()));' → logprob: -9.879976272583008
    7. ')' → logprob: -11.129976272583008
    8. '());' → logprob: -12.254976272583008
    9. ' ().' → logprob: -12.254976272583008
    10. '())))' → logprob: -12.254976272583008

Token 10: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00020890454470645636
    2. 'strip' → logprob: -8.500208854675293
    3. 'rstrip' → logprob: -12.625208854675293
    4. ' split' → logprob: -13.500208854675293
    5. '(split' → logprob: -14.500208854675293
    6. 'spl' → logprob: -16.12520980834961
    7. 's' → logprob: -18.00020980834961
    8. 'replace' → logprob: -18.50020980834961
    9. 'sp' → logprob: -18.87520980834961
    10. ')' → logprob: -19.25020980834961

Token 11: '()))
' (ID: 24521)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -1.2403756380081177
    2. ')' → logprob: -1.2403756380081177
    3. '))' → logprob: -1.6153756380081177
    4. '()))' → logprob: -2.115375518798828
    5. '())' → logprob: -2.365375518798828
    6. ')))' → logprob: -5.615375518798828
    7. '()' → logprob: -6.115375518798828
    8. '('' → logprob: -7.115375518798828
    9. '())))' → logprob: -7.240375518798828
    10. '(""))' → logprob: -8.740375518798828

Token 12: 'stack' (ID: 15145)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.7162054777145386
    2. 's' → logprob: -1.8412054777145386
    3. 'for' → logprob: -2.091205596923828
    4. 'd' → logprob: -3.216205596923828
    5. 'count' → logprob: -3.466205596923828
    6. 'm' → logprob: -3.841205596923828
    7. 'max' → logprob: -4.091205596923828
    8. 'cats' → logprob: -4.091205596923828
    9. 'sum' → logprob: -4.466205596923828
    10. 'a' → logprob: -4.466205596923828

Token 13: '=set' (ID: 166509)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.34327036142349243
    2. '(' → logprob: -2.0932703018188477
    3. '[' → logprob: -2.0932703018188477
    4. '=' → logprob: -3.7182703018188477
    5. '_' → logprob: -4.968270301818848
    6. '[:]' → logprob: -5.843270301818848
    7. ' =' → logprob: -6.093270301818848
    8. '.append' → logprob: -6.218270301818848
    9. '=[]' → logprob: -6.468270301818848
    10. '```' → logprob: -7.093270301818848

Token 14: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.3886299729347229
    2. '(' → logprob: -1.1386299133300781
    3. '(()' → logprob: -7.888629913330078
    4. '`()' → logprob: -8.013629913330078
    5. '()(' → logprob: -8.763629913330078
    6. '```' → logprob: -8.888629913330078
    7. '()`' → logprob: -9.263629913330078
    8. '((' → logprob: -9.263629913330078
    9. '([' → logprob: -9.388629913330078
    10. '())' → logprob: -9.513629913330078

Token 15: 'inside' (ID: 79475)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.24704229831695557
    2. 'for' → logprob: -2.372042179107666
    3. 's' → logprob: -3.497042179107666
    4. '(' → logprob: -3.997042179107666
    5. 'count' → logprob: -4.122042179107666
    6. 'stack' → logprob: -4.247042179107666
    7. 'result' → logprob: -4.497042179107666
    8. 'answer' → logprob: -5.372042179107666
    9. 'ans' → logprob: -5.497042179107666
    10. 'max' → logprob: -5.872042179107666

Token 16: '=[]
' (ID: 63466)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.05118000879883766
    2. '()' → logprob: -3.176180124282837
    3. '_' → logprob: -5.801179885864258
    4. '(stack' → logprob: -6.426179885864258
    5. '```' → logprob: -7.051179885864258
    6. '=' → logprob: -7.551179885864258
    7. 's' → logprob: -7.676179885864258
    8. '_stack' → logprob: -8.926179885864258
    9. '('' → logprob: -8.926179885864258
    10. ' (' → logprob: -9.176179885864258

Token 17: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.4796261489391327
    2. ' for' → logprob: -1.229626178741455
    3. '(' → logprob: -3.479626178741455
    4. '<|end|>' → logprob: -3.979626178741455
    5. ' ' → logprob: -4.229626178741455
    6. '[' → logprob: -4.479626178741455
    7. '[]' → logprob: -5.979626178741455
    8. ' (' → logprob: -6.229626178741455
    9. '```' → logprob: -6.354626178741455
    10. ' 
' → logprob: -6.979626178741455

Token 18: ' i' (ID: 575)
  Prédit: ' c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.8880841732025146
    2. ' i' → logprob: -1.5130841732025146
    3. ' cat' → logprob: -1.5130841732025146
    4. 'i' → logprob: -2.8880841732025146
    5. ' x' → logprob: -3.3880841732025146
    6. 'c' → logprob: -3.5130841732025146
    7. 'x' → logprob: -4.388084411621094
    8. 'cat' → logprob: -4.388084411621094
    9. ' ' → logprob: -7.888084411621094
    10. ' cats' → logprob: -8.013084411621094

Token 19: ',c' (ID: 22261)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.12750449776649475
    2. 'in' → logprob: -2.127504587173462
    3. ' ' → logprob: -7.627504348754883
    4. 'n' → logprob: -9.752504348754883
    5. ' n' → logprob: -11.752504348754883
    6. '	in' → logprob: -11.752504348754883
    7. '  ' → logprob: -12.002504348754883
    8. '_' → logprob: -13.127504348754883
    9. '```' → logprob: -13.752504348754883
    10. ' i' → logprob: -14.127504348754883

Token 20: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.07179124653339386
    2. 'at' → logprob: -2.696791172027588
    3. 'in' → logprob: -6.571791172027588
    4. 'ats' → logprob: -8.571791648864746
    5. ',' → logprob: -9.071791648864746
    6. ',in' → logprob: -10.446791648864746
    7. ' at' → logprob: -10.946791648864746
    8. '_in' → logprob: -11.071791648864746
    9. 'h' → logprob: -11.571791648864746
    10. ' ' → logprob: -11.696791648864746

Token 21: ' enumerate' (ID: 29671)
  Prédit: ' enumerate'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' enumerate' → logprob: -0.07889793813228607
    2. 'enumer' → logprob: -2.5788979530334473
    3. '(en' → logprob: -11.953897476196289
    4. '```' → logprob: -13.953897476196289
    5. ' enumer' → logprob: -15.078897476196289
    6. 'en' → logprob: -15.578897476196289
    7. 'Enumer' → logprob: -15.703897476196289
    8. 's' → logprob: -16.20389747619629
    9. '`' → logprob: -17.20389747619629
    10. '.enumer' → logprob: -17.95389747619629

Token 22: '(c' (ID: 2410)
  Prédit: '(c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -0.0003062646137550473
    2. 'cats' → logprob: -8.375306129455566
    3. '(' → logprob: -10.625306129455566
    4. ' cats' → logprob: -11.000306129455566
    5. '(cat' → logprob: -11.500306129455566
    6. 'c' → logprob: -11.625306129455566
    7. '(range' → logprob: -12.125306129455566
    8. ' (' → logprob: -12.500306129455566
    9. '(cards' → logprob: -13.375306129455566
    10. '(categories' → logprob: -13.750306129455566

Token 23: 'ats' (ID: 1838)
  Prédit: 'ats'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ats' → logprob: -0.0004386558721307665
    2. 's' → logprob: -8.375438690185547
    3. ')' → logprob: -9.375438690185547
    4. 'cats' → logprob: -9.500438690185547
    5. '```' → logprob: -11.875438690185547
    6. ' ats' → logprob: -11.875438690185547
    7. '   ' → logprob: -12.125438690185547
    8. ' cats' → logprob: -12.500438690185547
    9. '):

' → logprob: -12.625438690185547
    10. '),' → logprob: -13.375438690185547

Token 24: ',' (ID: 11)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '):' → logprob: -0.000706236984115094
    2. ')' → logprob: -7.625706195831299
    3. ':' → logprob: -8.750706672668457
    4. '):
' → logprob: -10.000706672668457
    5. ' ):' → logprob: -11.500706672668457
    6. '():' → logprob: -13.250706672668457
    7. ':)' → logprob: -14.125706672668457
    8. '):
' → logprob: -15.000706672668457
    9. '>:' → logprob: -15.875706672668457
    10. ']:' → logprob: -16.12570571899414

Token 25: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.004203051794320345
    2. ' ' → logprob: -5.504202842712402
    3. 'start' → logprob: -9.129202842712402
    4. '0' → logprob: -11.879202842712402
    5. ' start' → logprob: -11.879202842712402
    6. ')' → logprob: -13.754202842712402
    7. '2' → logprob: -13.879202842712402
    8. '):' → logprob: -16.62920379638672
    9. ' )' → logprob: -17.37920379638672
    10. '  ' → logprob: -17.75420379638672

Token 26: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.004966543521732092
    2. ')' → logprob: -6.129966735839844
    3. ':' → logprob: -6.129966735839844
    4. '):
' → logprob: -7.629966735839844
    5. ' ):' → logprob: -9.129966735839844
    6. ',' → logprob: -13.254966735839844
    7. ' )' → logprob: -13.629966735839844
    8. '):
' → logprob: -13.879966735839844
    9. '():' → logprob: -14.754966735839844
    10. 'if' → logprob: -15.004966735839844

Token 27: '   ' (ID: 271)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.5906413197517395
    2. ' ' → logprob: -1.4656412601470947
    3. '<|end|>' → logprob: -1.8406412601470947
    4. '   ' → logprob: -3.4656412601470947
    5. 'if' → logprob: -5.090641498565674
    6. ' 
' → logprob: -5.215641498565674
    7. '    ' → logprob: -5.465641498565674
    8. ':' → logprob: -5.715641498565674
    9. ')' → logprob: -6.715641498565674
    10. '<|end|>' → logprob: -7.090641498565674

Token 28: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.10052604228258133
    2. 'if' (adapté à ' if') → logprob: -2.3505260944366455
    3. '   ' → logprob: -9.100525856018066
    4. ' stack' → logprob: -9.850525856018066
    5. '```' → logprob: -10.100525856018066
    6. ' while' → logprob: -10.600525856018066
    7. ' ' → logprob: -10.725525856018066
    8. 'stack' → logprob: -10.975525856018066
    9. '<|end|>' → logprob: -10.975525856018066
    10. '    ' → logprob: -11.975525856018066

Token 29: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.00976553000509739
    2. 'c' → logprob: -4.634765625
    3. ' not' → logprob: -11.884765625
    4. ' ' → logprob: -13.759765625
    5. '(c' → logprob: -14.759765625
    6. 'not' → logprob: -15.009765625
    7. '	c' → logprob: -15.509765625
    8. ' i' → logprob: -15.759765625
    9. ' ' → logprob: -15.759765625
    10. 'i' → logprob: -16.009765625

Token 30: '>' (ID: 29)
  Prédit: ' not'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.38597527146339417
    2. ' in' → logprob: -1.2609752416610718
    3. 'in' → logprob: -3.7609753608703613
    4. 'not' → logprob: -4.385975360870361
    5. '==' → logprob: -7.510975360870361
    6. '>' → logprob: -8.135974884033203
    7. ' ==' → logprob: -9.260974884033203
    8. ' ' → logprob: -9.510974884033203
    9. '!=' → logprob: -9.885974884033203
    10. ' !=' → logprob: -11.385974884033203

Token 31: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.027592645958065987
    2. ' ' → logprob: -3.652592658996582
    3. 'i' → logprob: -7.652592658996582
    4. 'L' → logprob: -7.652592658996582
    5. '1' → logprob: -9.277592658996582
    6. ' L' → logprob: -9.402592658996582
    7. 'len' → logprob: -9.527592658996582
    8. ' len' → logprob: -10.527592658996582
    9. ' i' → logprob: -10.902592658996582
    10. '2' → logprob: -11.277592658996582

Token 32: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.005171139258891344
    2. ' and' → logprob: -5.505171298980713
    3. ' :' → logprob: -7.380171298980713
    4. ':
' → logprob: -8.380170822143555
    5. '):' → logprob: -9.005170822143555
    6. 'and' → logprob: -9.630170822143555
    7. '   ' → logprob: -10.880170822143555
    8. ')' → logprob: -11.255170822143555
    9. ' ' → logprob: -12.630170822143555
    10. ',' → logprob: -12.630170822143555

Token 33: '       ' (ID: 309)
  Prédit: ' stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.09341215342283249
    2. 'stack' → logprob: -2.718412160873413
    3. '	stack' → logprob: -3.968412160873413
    4. '   ' → logprob: -6.468411922454834
    5. '(stack' → logprob: -6.843411922454834
    6. '<|end|>' → logprob: -7.843411922454834
    7. '    ' → logprob: -8.718412399291992
    8. ' ' → logprob: -8.718412399291992
    9. ' `' → logprob: -8.843412399291992
    10. '```' → logprob: -9.093412399291992

Token 34: ' if' (ID: 538)
  Prédit: ' stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.252102255821228
    2. 'stack' → logprob: -1.502102255821228
    3. '	stack' → logprob: -9.12710189819336
    4. '```' → logprob: -11.37710189819336
    5. '   ' → logprob: -11.75210189819336
    6. ' if' → logprob: -11.75210189819336
    7. '_stack' → logprob: -11.87710189819336
    8. '(stack' → logprob: -12.00210189819336
    9. ' inside' → logprob: -12.00210189819336
    10. '``' → logprob: -12.50210189819336

Token 35: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.12733164429664612
    2. 'c' → logprob: -2.1273317337036133
    3. ' not' → logprob: -8.752331733703613
    4. ' ' → logprob: -9.752331733703613
    5. 'not' → logprob: -10.002331733703613
    6. ' len' → logprob: -10.627331733703613
    7. '(c' → logprob: -10.752331733703613
    8. ' stack' → logprob: -10.877331733703613
    9. 'i' → logprob: -11.002331733703613
    10. 'len' → logprob: -11.252331733703613

Token 36: ' in' (ID: 306)
  Prédit: ' not'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.08906956762075424
    2. ' in' → logprob: -2.9640696048736572
    3. 'not' → logprob: -3.4640696048736572
    4. 'in' → logprob: -6.089069366455078
    5. ' ' → logprob: -11.339069366455078
    6. ')' → logprob: -11.964069366455078
    7. 'stack' → logprob: -12.214069366455078
    8. 'n't' → logprob: -12.589069366455078
    9. ' stack' → logprob: -12.901569366455078
    10. '>' → logprob: -13.526569366455078

Token 37: ' stack' (ID: 10825)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.07890278846025467
    2. ' stack' → logprob: -2.5789027214050293
    3. 'inside' → logprob: -11.703903198242188
    4. '	stack' → logprob: -12.703903198242188
    5. '(stack' → logprob: -14.453903198242188
    6. ' inside' → logprob: -14.828903198242188
    7. 'stackoverflow' → logprob: -15.453903198242188
    8. ' ' → logprob: -15.578903198242188
    9. ')' → logprob: -16.203903198242188
    10. '.stack' → logprob: -16.453903198242188

Token 38: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.004498485010117292
    2. ':return' → logprob: -6.754498481750488
    3. '):' → logprob: -6.879498481750488
    4. ' continue' → logprob: -7.629498481750488
    5. ' :' → logprob: -7.629498481750488
    6. ')' → logprob: -7.879498481750488
    7. '<|end|>' → logprob: -8.504498481750488
    8. ' or' → logprob: -8.629498481750488
    9. 'continue' → logprob: -9.129498481750488
    10. '.' → logprob: -9.629498481750488

Token 39: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.2428348958492279
    2. ' continue' → logprob: -2.2428348064422607
    3. ')' → logprob: -3.7428348064422607
    4. ' stack' → logprob: -4.24283504486084
    5. '        ' → logprob: -4.49283504486084
    6. ':' → logprob: -4.49283504486084
    7. 'continue' → logprob: -4.74283504486084
    8. '):' → logprob: -5.11783504486084
    9. ' ' → logprob: -5.24283504486084
    10. '            ' → logprob: -5.36783504486084

Token 40: ' print' (ID: 2123)
  Prédit: ' break'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' break' → logprob: -1.1270532608032227
    2. ' continue' → logprob: -1.6270532608032227
    3. ' pass' → logprob: -1.8770532608032227
    4. ' print' → logprob: -2.0020532608032227
    5. '           ' → logprob: -3.0020532608032227
    6. 'print' (adapté à ' print') → logprob: -3.5020532608032227
    7. 'break' → logprob: -4.127053260803223
    8. '   ' → logprob: -4.377053260803223
    9. 'continue' → logprob: -4.377053260803223
    10. ' stack' → logprob: -4.502053260803223

Token 41: '(i' (ID: 3649)
  Prédit: '("'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -1.081345796585083
    2. '(-' → logprob: -1.081345796585083
    3. '(' → logprob: -1.206345796585083
    4. '('' → logprob: -3.831345796585083
    5. '(i' → logprob: -8.331345558166504
    6. '(False' → logprob: -8.706345558166504
    7. '(c' → logprob: -8.956345558166504
    8. '("-' → logprob: -8.956345558166504
    9. '-' → logprob: -10.706345558166504
    10. '(f' → logprob: -11.206345558166504

Token 42: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.05452822893857956
    2. ')
' → logprob: -3.30452823638916
    3. ' )' → logprob: -4.55452823638916
    4. ',' → logprob: -5.80452823638916
    5. '")' → logprob: -6.92952823638916
    6. ' )
' → logprob: -7.17952823638916
    7. '0' → logprob: -8.92952823638916
    8. ' ' → logprob: -9.30452823638916
    9. '"' → logprob: -9.42952823638916
    10. '-' → logprob: -9.80452823638916

Token 43: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.3632464110851288
    2. ')' → logprob: -1.7382464408874512
    3. '       ' → logprob: -2.613246440887451
    4. ')
' → logprob: -3.863246440887451
    5. '```' → logprob: -4.238246440887451
    6. '               ' → logprob: -5.363246440887451
    7. '   ' → logprob: -6.113246440887451
    8. '            
' → logprob: -6.363246440887451
    9. '[' → logprob: -6.488246440887451
    10. '``' → logprob: -6.863246440887451

Token 44: ' break' (ID: 2338)
  Prédit: ' break'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' break' → logprob: -0.29224303364753723
    2. 'break' (adapté à ' break') → logprob: -2.167243003845215
    3. ' exit' → logprob: -2.417243003845215
    4. 'exit' → logprob: -3.292243003845215
    5. ' ' → logprob: -5.417243003845215
    6. ' 
' → logprob: -6.042243003845215
    7. '\n' → logprob: -6.917243003845215
    8. '```' → logprob: -7.167243003845215
    9. '	break' → logprob: -7.292243003845215
    10. '       ' → logprob: -7.417243003845215

Token 45: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.11432068049907684
    2. 'else' → logprob: -3.239320755004883
    3. ')' → logprob: -3.489320755004883
    4. '   ' → logprob: -3.989320755004883
    5. ' else' → logprob: -4.989320755004883
    6. ')
' → logprob: -5.114320755004883
    7. '```' → logprob: -5.739320755004883
    8. ' ' → logprob: -6.489320755004883
    9. '``' → logprob: -7.489320755004883
    10. 'stack' → logprob: -7.489320755004883

Token 46: '       ' (ID: 309)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.462131530046463
    2. '   ' → logprob: -1.8371315002441406
    3. '       ' → logprob: -2.4621315002441406
    4. ' ' → logprob: -3.2121315002441406
    5. ' else' → logprob: -3.2121315002441406
    6. 'else' → logprob: -3.7121315002441406
    7. ')
' → logprob: -5.212131500244141
    8. ' )' → logprob: -5.337131500244141
    9. '    ' → logprob: -5.837131500244141
    10. '```' → logprob: -6.212131500244141

Token 47: ' stack' (ID: 10825)
  Prédit: ' stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.5876019597053528
    2. 'stack' (adapté à ' stack') → logprob: -1.087601900100708
    3. '   ' → logprob: -3.712601900100708
    4. '	stack' → logprob: -3.712601900100708
    5. ')' → logprob: -3.837601900100708
    6. ' ' → logprob: -4.337602138519287
    7. '(stack' → logprob: -4.462602138519287
    8. '       ' → logprob: -5.587602138519287
    9. '.stack' → logprob: -6.712602138519287
    10. ')
' → logprob: -6.712602138519287

Token 48: '.add' (ID: 1950)
  Prédit: '.add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.add' → logprob: -8.554343366995454e-05
    2. '.' → logprob: -9.375085830688477
    3. '.remove' → logprob: -15.125085830688477
    4. ').' → logprob: -15.875085830688477
    5. '.update' → logprob: -16.125085830688477
    6. ')add' → logprob: -16.750085830688477
    7. '.setdefault' → logprob: -16.875085830688477
    8. '.ad' → logprob: -17.250085830688477
    9. '.append' → logprob: -17.625085830688477
    10. ' .' → logprob: -17.625085830688477

Token 49: '(c' (ID: 2410)
  Prédit: '(c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -0.029752805829048157
    2. '(' → logprob: -3.529752731323242
    3. ' (' → logprob: -14.029752731323242
    4. '(
' → logprob: -15.029752731323242
    5. '(i' → logprob: -15.029752731323242
    6. '(C' → logprob: -15.529752731323242
    7. '(s' → logprob: -15.529752731323242
    8. '(

' → logprob: -15.779752731323242
    9. '((' → logprob: -15.904752731323242
    10. '(cat' → logprob: -16.529752731323242

Token 50: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.020615343004465103
    2. ')
' → logprob: -3.895615339279175
    3. ')
' → logprob: -9.895615577697754
    4. ')

' → logprob: -11.145615577697754
    5. '       ' → logprob: -12.895615577697754
    6. ' )' → logprob: -13.145615577697754
    7. '   ' → logprob: -13.270615577697754
    8. ')`' → logprob: -15.145615577697754
    9. ' )
' → logprob: -15.270615577697754
    10. ')#' → logprob: -15.395615577697754

Token 51: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11855507642030716
    2. 'else' → logprob: -3.1185550689697266
    3. ')' → logprob: -3.3685550689697266
    4. ' else' → logprob: -4.243555068969727
    5. '       ' → logprob: -4.868555068969727
    6. '<|end|>' → logprob: -5.368555068969727
    7. '```' → logprob: -5.743555068969727
    8. '	else' → logprob: -6.743555068969727
    9. ' ' → logprob: -7.118555068969727
    10. 'elif' → logprob: -8.243555068969727

Token 52: ' inside' (ID: 6772)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.439113974571228
    2. 'else' → logprob: -1.689113974571228
    3. '       ' → logprob: -1.939113974571228
    4. 'inside' (adapté à ' inside') → logprob: -4.314114093780518
    5. 'elif' → logprob: -5.314114093780518
    6. ' else' → logprob: -6.314114093780518
    7. '```' → logprob: -6.564114093780518
    8. ' ' → logprob: -6.814114093780518
    9. ')' → logprob: -6.939114093780518
    10. ' inside' → logprob: -7.064114093780518

Token 53: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.0017330136615782976
    2. '.' → logprob: -6.75173282623291
    3. '.add' → logprob: -7.50173282623291
    4. '.remove' → logprob: -12.00173282623291
    5. ').' → logprob: -13.87673282623291
    6. '.app' → logprob: -14.25173282623291
    7. '.insert' → logprob: -14.37673282623291
    8. '.setdefault' → logprob: -14.75173282623291
    9. '<|end|>' → logprob: -14.87673282623291
    10. '.push' → logprob: -14.87673282623291

Token 54: '(c' (ID: 2410)
  Prédit: '(c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -0.13963724672794342
    2. '(' → logprob: -2.7646372318267822
    3. '(i' → logprob: -3.2646372318267822
    4. '(True' → logprob: -3.6396372318267822
    5. '(False' → logprob: -6.389637470245361
    6. '((' → logprob: -7.139637470245361
    7. '('' → logprob: -8.389636993408203
    8. '(len' → logprob: -9.639636993408203
    9. '("("' → logprob: -10.139636993408203
    10. '(-' → logprob: -11.639636993408203

Token 55: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.018450869247317314
    2. ')
' → logprob: -4.018450736999512
    3. '   ' → logprob: -8.393450736999512
    4. ' )' → logprob: -10.018450736999512
    5. 'else' → logprob: -11.643450736999512
    6. 'elif' → logprob: -12.393450736999512
    7. '       ' → logprob: -12.518450736999512
    8. ' )
' → logprob: -12.768450736999512
    9. ')
' → logprob: -13.018450736999512
    10. ' else' → logprob: -13.268450736999512

Token 56: '   ' (ID: 271)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3625037372112274
    2. '   ' → logprob: -1.4875037670135498
    3. 'else' → logprob: -3.48750376701355
    4. ' else' → logprob: -4.237503528594971
    5. '<|end|>' → logprob: -4.487503528594971
    6. 'elif' → logprob: -4.737503528594971
    7. ' elif' → logprob: -5.737503528594971
    8. ' )' → logprob: -5.862503528594971
    9. ' ' → logprob: -5.862503528594971
    10. '```' → logprob: -7.237503528594971

Token 57: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.03971628472208977
    2. ' else' → logprob: -3.2897162437438965
    3. 'elif' → logprob: -6.5397162437438965
    4. '	else' → logprob: -9.539716720581055
    5. '   ' → logprob: -9.664716720581055
    6. ' elif' → logprob: -9.914716720581055
    7. '```' → logprob: -11.039716720581055
    8. ')' → logprob: -11.289716720581055
    9. '	elif' → logprob: -12.289716720581055
    10. ' ' → logprob: -12.539716720581055

Token 58: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.009183605201542377
    2. ':
' → logprob: -5.134183406829834
    3. '{' → logprob: -6.884183406829834
    4. ' if' → logprob: -7.009183406829834
    5. '   ' → logprob: -7.134183406829834
    6. ' :' → logprob: -8.884183883666992
    7. '       ' → logprob: -9.259183883666992
    8. '    ' → logprob: -9.634183883666992
    9. 'if' → logprob: -9.634183883666992
    10. '<|end|>' → logprob: -10.009183883666992

Token 59: '       ' (ID: 309)
  Prédit: ' c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -1.270906925201416
    2. ' abs' → logprob: -1.520906925201416
    3. '       ' → logprob: -2.145906925201416
    4. 'abs' → logprob: -2.270906925201416
    5. '    ' → logprob: -2.645906925201416
    6. ' if' → logprob: -2.770906925201416
    7. ' stack' → logprob: -3.395906925201416
    8. '        ' → logprob: -3.770906925201416
    9. ' -' → logprob: -3.895906925201416
    10. 'c' → logprob: -4.395906925201416

Token 60: ' if' (ID: 538)
  Prédit: ' c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.3623283803462982
    2. ' if' → logprob: -1.3623284101486206
    3. 'c' → logprob: -3.487328290939331
    4. 'if' (adapté à ' if') → logprob: -4.48732852935791
    5. ' stack' → logprob: -5.61232852935791
    6. ' abs' → logprob: -6.86232852935791
    7. 'stack' → logprob: -7.61232852935791
    8. 'abs' → logprob: -7.86232852935791
    9. '       ' → logprob: -8.48732852935791
    10. '        ' → logprob: -9.73732852935791

Token 61: ' -' (ID: 533)
  Prédit: '-c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-c' → logprob: -0.026064438745379448
    2. ' -' → logprob: -4.026064395904541
    3. '-' → logprob: -4.901064395904541
    4. ' c' → logprob: -8.9010648727417
    5. '(-' → logprob: -9.5260648727417
    6. '-stack' → logprob: -9.9010648727417
    7. 'c' → logprob: -10.0260648727417
    8. '-not' → logprob: -10.5260648727417
    9. '-C' → logprob: -10.7760648727417
    10. '   ' → logprob: -11.4010648727417

Token 62: 'c' (ID: 66)
  Prédit: 'c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -2.339278580620885e-06
    2. ' c' → logprob: -13.250001907348633
    3. '   ' → logprob: -16.000001907348633
    4. '	c' → logprob: -16.125001907348633
    5. ' ' → logprob: -16.250001907348633
    6. ')c' → logprob: -16.500001907348633
    7. '1' → logprob: -17.625001907348633
    8. 'с' → logprob: -17.750001907348633
    9. '  ' → logprob: -18.250001907348633
    10. '-c' → logprob: -18.500001907348633

Token 63: ' not' (ID: 625)
  Prédit: 'not'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'not' → logprob: -0.5760250091552734
    2. ' not' → logprob: -0.8260250091552734
    3. 'in' → logprob: -9.701025009155273
    4. ' in' → logprob: -10.951025009155273
    5. 'no' → logprob: -12.826025009155273
    6. '	not' → logprob: -13.826025009155273
    7. ' no' → logprob: -14.076025009155273
    8. ' ' → logprob: -14.326025009155273
    9. ')' → logprob: -14.451025009155273
    10. 'n' → logprob: -14.701025009155273

Token 64: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.18012839555740356
    2. 'in' → logprob: -1.8051283359527588
    3. ' stack' → logprob: -8.30512809753418
    4. 'stack' → logprob: -9.05512809753418
    5. '(stack' → logprob: -12.18012809753418
    6. ' ' → logprob: -12.43012809753418
    7. '<|end|>' → logprob: -12.55512809753418
    8. 'inside' → logprob: -12.68012809753418
    9. ' inside' → logprob: -13.05512809753418
    10. ')' → logprob: -14.55512809753418

Token 65: ' stack' (ID: 10825)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.0017353941220790148
    2. ' stack' → logprob: -6.501735210418701
    3. 'inside' → logprob: -8.37673568725586
    4. '	stack' → logprob: -13.50173568725586
    5. ' inside' → logprob: -14.12673568725586
    6. 'stackoverflow' → logprob: -15.12673568725586
    7. '(stack' → logprob: -16.00173568725586
    8. 'stk' → logprob: -16.12673568725586
    9. 'st' → logprob: -16.62673568725586
    10. '   ' → logprob: -17.12673568725586

Token 66: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.012225182726979256
    2. ':
' → logprob: -4.637225151062012
    3. '):' → logprob: -6.387225151062012
    4. ')' → logprob: -8.137225151062012
    5. '           ' → logprob: -8.137225151062012
    6. '):
' → logprob: -9.887225151062012
    7. '       ' → logprob: -10.012225151062012
    8. ':return' → logprob: -10.512225151062012
    9. '<|end|>' → logprob: -10.762225151062012
    10. ':

' → logprob: -11.512225151062012

Token 67: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0032699264120310545
    2. '```' → logprob: -6.253270149230957
    3. '       ' → logprob: -6.878270149230957
    4. '               ' → logprob: -9.753270149230957
    5. '<|end|>' → logprob: -9.878270149230957
    6. 'print' → logprob: -9.878270149230957
    7. ' print' → logprob: -10.628270149230957
    8. ':
' → logprob: -10.753270149230957
    9. '   ' → logprob: -10.753270149230957
    10. ':' → logprob: -10.753270149230957

Token 68: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.33691051602363586
    2. ' print' → logprob: -1.8369104862213135
    3. '           ' → logprob: -2.0869104862213135
    4. '```' → logprob: -6.711910724639893
    5. ' break' → logprob: -7.836910724639893
    6. '       ' → logprob: -7.961910724639893
    7. 'break' → logprob: -8.461910247802734
    8. '   ' → logprob: -8.461910247802734
    9. '               ' → logprob: -8.836910247802734
    10. '``' → logprob: -9.586910247802734

Token 69: '(i' (ID: 3649)
  Prédit: '(i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(i' → logprob: -0.08072766661643982
    2. '(-' → logprob: -2.5807275772094727
    3. '(' → logprob: -6.455727577209473
    4. 'i' → logprob: -8.705727577209473
    5. '-' → logprob: -9.455727577209473
    6. '("' → logprob: -11.955727577209473
    7. '('' → logprob: -12.705727577209473
    8. '("-' → logprob: -12.705727577209473
    9. '("("' → logprob: -13.705727577209473
    10. '(n' → logprob: -13.705727577209473

Token 70: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.018159886822104454
    2. ')
' → logprob: -4.018159866333008
    3. ')
' → logprob: -12.518159866333008
    4. ' )' → logprob: -13.268159866333008
    5. '           ' → logprob: -14.018159866333008
    6. '       ' → logprob: -14.143159866333008
    7. ')

' → logprob: -14.268159866333008
    8. ')return' → logprob: -14.643159866333008
    9. '   ' → logprob: -14.893159866333008
    10. ')`
' → logprob: -15.018159866333008

Token 71: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.01780056022107601
    2. '       ' → logprob: -4.892800331115723
    3. '               ' → logprob: -4.892800331115723
    4. '```' → logprob: -6.392800331115723
    5. ')' → logprob: -8.017800331115723
    6. ')
' → logprob: -8.517800331115723
    7. '   ' → logprob: -8.517800331115723
    8. '<|end|>' → logprob: -9.892800331115723
    9. '``' → logprob: -10.392800331115723
    10. '                   ' → logprob: -11.017800331115723

Token 72: ' break' (ID: 2338)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'break' (adapté à ' break') → logprob: -0.023815102875232697
    2. ' break' → logprob: -3.773815155029297
    3. '```' → logprob: -8.148815155029297
    4. '``' → logprob: -9.648815155029297
    5. '	break' → logprob: -9.773815155029297
    6. '   ' → logprob: -10.398815155029297
    7. '
' → logprob: -10.523815155029297
    8. ')
' → logprob: -10.648815155029297
    9. '       ' → logprob: -10.898815155029297
    10. '           ' → logprob: -11.148815155029297

Token 73: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.002905920147895813
    2. 'else' → logprob: -6.87790584564209
    3. ' else' → logprob: -7.37790584564209
    4. '   ' → logprob: -7.50290584564209
    5. '<|end|>' → logprob: -7.62790584564209
    6. ')' → logprob: -9.37790584564209
    7. '```' → logprob: -10.00290584564209
    8. '        
' → logprob: -11.25290584564209
    9. '    ' → logprob: -11.25290584564209
    10. '           ' → logprob: -11.62790584564209

Token 74: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.02572779916226864
    2. 'else' → logprob: -4.15072774887085
    3. ' else' → logprob: -4.90072774887085
    4. '   ' → logprob: -6.65072774887085
    5. ')' → logprob: -7.65072774887085
    6. '```' → logprob: -8.900728225708008
    7. '<|end|>' → logprob: -9.025728225708008
    8. '-' → logprob: -10.650728225708008
    9. '           ' → logprob: -10.900728225708008
    10. ' ' → logprob: -10.900728225708008

Token 75: ' if' (ID: 538)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.00020652047533076257
    2. ' stack' → logprob: -8.75020694732666
    3. '       ' → logprob: -10.62520694732666
    4. '   ' → logprob: -11.00020694732666
    5. '	stack' → logprob: -12.37520694732666
    6. '```' → logprob: -14.12520694732666
    7. 'else' → logprob: -14.50020694732666
    8. '           ' → logprob: -15.25020694732666
    9. '.stack' → logprob: -15.37520694732666
    10. '(stack' → logprob: -15.50020694732666

Token 76: ' inside' (ID: 6772)
  Prédit: '-c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-c' → logprob: -0.8585030436515808
    2. ' -' → logprob: -0.9835030436515808
    3. '-' → logprob: -1.7335031032562256
    4. ' c' → logprob: -5.3585028648376465
    5. ' inside' → logprob: -5.3585028648376465
    6. 'inside' → logprob: -5.3585028648376465
    7. '-ins' → logprob: -5.4835028648376465
    8. '-stack' → logprob: -5.7335028648376465
    9. 'c' → logprob: -6.9835028648376465
    10. '-list' → logprob: -7.8585028648376465

Token 77: '[-' (ID: 17503)
  Prédit: '[-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[-' → logprob: -0.11339187622070312
    2. ' and' → logprob: -2.238391876220703
    3. 'and' → logprob: -8.238391876220703
    4. '[' → logprob: -8.613391876220703
    5. '[]' → logprob: -9.863391876220703
    6. '.pop' → logprob: -9.988391876220703
    7. '```' → logprob: -11.363391876220703
    8. '==' → logprob: -12.238391876220703
    9. '][-' → logprob: -13.613391876220703
    10. ' [-' → logprob: -13.613391876220703

Token 78: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00026383911608718336
    2. ' ' → logprob: -8.375264167785645
    3. ')' → logprob: -11.500264167785645
    4. '-' → logprob: -12.125264167785645
    5. ' -' → logprob: -12.750264167785645
    6. ']' → logprob: -13.437764167785645
    7. '```' → logprob: -13.500264167785645
    8. ']==' → logprob: -13.687764167785645
    9. '()' → logprob: -14.062764167785645
    10. '(' → logprob: -14.187764167785645

Token 79: ']!=' (ID: 85780)
  Prédit: ' !='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' !=' → logprob: -0.512416422367096
    2. '!=' → logprob: -1.3874163627624512
    3. ']!=' → logprob: -3.137416362762451
    4. '!=-' → logprob: -3.137416362762451
    5. ')' → logprob: -3.762416362762451
    6. ')!=' → logprob: -3.887416362762451
    7. '==-' → logprob: -5.387416362762451
    8. '()!=' → logprob: -5.637416362762451
    9. ']==' → logprob: -5.762416362762451
    10. ' ==' → logprob: -5.762416362762451

Token 80: '-' (ID: 12)
  Prédit: '-c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-c' → logprob: -0.01508416049182415
    2. ' -' → logprob: -4.265084266662598
    3. '-' → logprob: -7.015084266662598
    4. '(-' → logprob: -11.765084266662598
    5. '-C' → logprob: -13.140084266662598
    6. '-(' → logprob: -13.390084266662598
    7. '-k' → logprob: -13.515084266662598
    8. '-n' → logprob: -13.640084266662598
    9. '   ' → logprob: -14.015084266662598
    10. '-cn' → logprob: -14.015084266662598

Token 81: 'c' (ID: 66)
  Prédit: 'c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -2.3438327843905427e-05
    2. ' c' → logprob: -10.75002384185791
    3. '	c' → logprob: -14.25002384185791
    4. ')c' → logprob: -14.75002384185791
    5. '(c' → logprob: -14.87502384185791
    6. '   ' → logprob: -15.25002384185791
    7. '_c' → logprob: -16.625022888183594
    8. '<|end|>' → logprob: -16.875022888183594
    9. '       ' → logprob: -17.125022888183594
    10. '`' → logprob: -17.250022888183594

Token 82: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.16193130612373352
    2. ':
' → logprob: -2.036931276321411
    3. '           ' → logprob: -4.78693151473999
    4. ')' → logprob: -5.41193151473999
    5. '       ' → logprob: -5.91193151473999
    6. '):' → logprob: -6.03693151473999
    7. '):
' → logprob: -8.036931037902832
    8. '<|end|>' → logprob: -8.161931037902832
    9. '   ' → logprob: -8.411931037902832
    10. ':return' → logprob: -10.161931037902832

Token 83: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.025586159899830818
    2. ' inside' → logprob: -4.525586128234863
    3. 'inside' → logprob: -4.775586128234863
    4. '```' → logprob: -5.525586128234863
    5. 'Inside' → logprob: -7.650586128234863
    6. '	       ' → logprob: -8.150586128234863
    7. '<|end|>' → logprob: -8.275586128234863
    8. '``' → logprob: -8.775586128234863
    9. '               ' → logprob: -8.900586128234863
    10. '       ' → logprob: -8.900586128234863

Token 84: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.17342883348464966
    2. '           ' → logprob: -1.9234287738800049
    3. '```' → logprob: -4.673429012298584
    4. '               ' → logprob: -6.298429012298584
    5. ' print' → logprob: -6.548429012298584
    6. '``' → logprob: -7.923429012298584
    7. '       ' → logprob: -9.423428535461426
    8. '   ' → logprob: -10.673428535461426
    9. '          ' → logprob: -11.298428535461426
    10. ' ' → logprob: -11.923428535461426

Token 85: '(i' (ID: 3649)
  Prédit: '(i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(i' → logprob: -4.5491004129871726e-05
    2. '(' → logprob: -10.000045776367188
    3. 'i' → logprob: -17.875045776367188
    4. '(ii' → logprob: -19.000045776367188
    5. '(I' → logprob: -19.125045776367188
    6. '(-' → logprob: -19.250045776367188
    7. '(
' → logprob: -19.375045776367188
    8. '('' → logprob: -19.750045776367188
    9. ' (' → logprob: -19.750045776367188
    10. '```' → logprob: -19.750045776367188

Token 86: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.08153371512889862
    2. ')
' → logprob: -2.581533670425415
    3. '           ' → logprob: -6.206533908843994
    4. '       ' → logprob: -7.456533908843994
    5. '   ' → logprob: -11.081533432006836
    6. ')
' → logprob: -11.456533432006836
    7. '               ' → logprob: -11.581533432006836
    8. '```' → logprob: -12.331533432006836
    9. ')return' → logprob: -14.206533432006836
    10. ' ' → logprob: -14.331533432006836

Token 87: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0012508237268775702
    2. '               ' → logprob: -6.876250743865967
    3. '```' → logprob: -9.376251220703125
    4. '            
' → logprob: -10.126251220703125
    5. '       ' → logprob: -10.876251220703125
    6. '		' → logprob: -11.126251220703125
    7. '	       ' → logprob: -11.626251220703125
    8. '          ' → logprob: -11.876251220703125
    9. '<|end|>' → logprob: -12.126251220703125
    10. '   ' → logprob: -12.251251220703125

Token 88: ' break' (ID: 2338)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'break' (adapté à ' break') → logprob: -0.002394913462921977
    2. '           ' → logprob: -6.752394676208496
    3. ' break' → logprob: -6.752394676208496
    4. '```' → logprob: -10.127394676208496
    5. '       ' → logprob: -11.877394676208496
    6. '``' → logprob: -12.752394676208496
    7. '	break' → logprob: -12.877394676208496
    8. '   ' → logprob: -13.127394676208496
    9. '               ' → logprob: -14.127394676208496
    10. '            
' → logprob: -14.752394676208496

Token 89: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.002227691002190113
    2. '   ' → logprob: -6.877227783203125
    3. 'else' → logprob: -7.377227783203125
    4. 'stack' → logprob: -7.877227783203125
    5. '```' → logprob: -8.877227783203125
    6. '<|end|>' → logprob: -11.377227783203125
    7. ' else' → logprob: -11.877227783203125
    8. 'inside' → logprob: -12.127227783203125
    9. '    ' → logprob: -12.502227783203125
    10. '           ' → logprob: -12.752227783203125

Token 90: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.033592917025089264
    2. 'else' → logprob: -4.033592700958252
    3. '   ' → logprob: -4.408592700958252
    4. '```' → logprob: -6.283592700958252
    5. 'stack' → logprob: -6.908592700958252
    6. ' else' → logprob: -8.78359317779541
    7. 'inside' → logprob: -10.65859317779541
    8. '<|end|>' → logprob: -10.90859317779541
    9. '``' → logprob: -11.15859317779541
    10. '    ' → logprob: -11.40859317779541

Token 91: ' inside' (ID: 6772)
  Prédit: 'inside'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'inside' (adapté à ' inside') → logprob: -0.11923258006572723
    2. 'stack' → logprob: -2.244232654571533
    3. '       ' → logprob: -5.494232654571533
    4. '   ' → logprob: -6.494232654571533
    5. ' inside' → logprob: -7.619232654571533
    6. '           ' → logprob: -8.994232177734375
    7. '```' → logprob: -9.369232177734375
    8. ' stack' → logprob: -10.744232177734375
    9. 'else' → logprob: -11.744232177734375
    10. '	stack' → logprob: -12.244232177734375

Token 92: '.pop' (ID: 15746)
  Prédit: '.pop'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.pop' → logprob: -8.625866030342877e-05
    2. 'pop' → logprob: -9.375085830688477
    3. '.' → logprob: -14.125085830688477
    4. 'Pop' → logprob: -15.375085830688477
    5. '	pop' → logprob: -15.625085830688477
    6. '_pop' → logprob: -16.125085830688477
    7. ' pop' → logprob: -17.125085830688477
    8. '.Pop' → logprob: -17.375085830688477
    9. ' .' → logprob: -18.375085830688477
    10. '```' → logprob: -18.375085830688477

Token 93: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -1.9027791495318525e-05
    2. '()
' → logprob: -11.375019073486328
    3. '()`' → logprob: -12.875019073486328
    4. '()

' → logprob: -13.000019073486328
    5. '(' → logprob: -13.750019073486328
    6. '().' → logprob: -14.625019073486328
    7. '()\' → logprob: -14.750019073486328
    8. '()]' → logprob: -15.875019073486328
    9. ' ()' → logprob: -15.875019073486328
    10. '();' → logprob: -16.625019073486328

Token 94: '       ' (ID: 309)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.021987373009324074
    2. '       ' → logprob: -4.021987438201904
    3. '```' → logprob: -6.396987438201904
    4. '   ' → logprob: -7.146987438201904
    5. ' stack' → logprob: -7.521987438201904
    6. '	stack' → logprob: -7.646987438201904
    7. '(stack' → logprob: -8.896986961364746
    8. '<|end|>' → logprob: -9.771986961364746
    9. '``' → logprob: -10.271986961364746
    10. '.stack' → logprob: -10.271986961364746

Token 95: ' stack' (ID: 10825)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' (adapté à ' stack') → logprob: -1.0564331205387134e-05
    2. '       ' → logprob: -12.25001049041748
    3. ' stack' → logprob: -12.25001049041748
    4. '   ' → logprob: -14.37501049041748
    5. '	stack' → logprob: -15.12501049041748
    6. '           ' → logprob: -17.875011444091797
    7. '(stack' → logprob: -18.000011444091797
    8. '.stack' → logprob: -18.250011444091797
    9. 'stackoverflow' → logprob: -18.750011444091797
    10. '    ' → logprob: -18.875011444091797

Token 96: '.remove' (ID: 7986)
  Prédit: '.remove'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.remove' → logprob: -5.931863051955588e-05
    2. '.dis' → logprob: -10.000059127807617
    3. '.' → logprob: -11.250059127807617
    4. 'remove' → logprob: -14.000059127807617
    5. ' .' → logprob: -18.375059127807617
    6. '	remove' → logprob: -18.625059127807617
    7. ' remove' → logprob: -18.875059127807617
    8. '.Remove' → logprob: -19.125059127807617
    9. '.add' → logprob: -19.625059127807617
    10. '.delete' → logprob: -20.000059127807617

Token 97: '(-' (ID: 8087)
  Prédit: '(-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(-' → logprob: -2.696889623621246e-06
    2. '(' → logprob: -13.62500286102295
    3. '((-' → logprob: -14.25000286102295
    4. '(abs' → logprob: -14.87500286102295
    5. '(c' → logprob: -14.87500286102295
    6. '-c' → logprob: -16.625001907348633
    7. '(
' → logprob: -17.000001907348633
    8. ' (-' → logprob: -17.250001907348633
    9. '{-' → logprob: -18.625001907348633
    10. '([-' → logprob: -19.375001907348633

Token 98: 'c' (ID: 66)
  Prédit: 'c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -1.5048530030981055e-06
    2. ' c' → logprob: -13.750001907348633
    3. ')c' → logprob: -14.875001907348633
    4. '_c' → logprob: -17.750001907348633
    5. '-c' → logprob: -18.000001907348633
    6. '	c' → logprob: -18.250001907348633
    7. '   ' → logprob: -18.750001907348633
    8. '*c' → logprob: -19.750001907348633
    9. '$c' → logprob: -20.000001907348633
    10. '<c' → logprob: -20.250001907348633

Token 99: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.018162231892347336
    2. ')
' → logprob: -4.018162250518799
    3. ')

' → logprob: -12.51816177368164
    4. ')
' → logprob: -13.26816177368164
    5. '```' → logprob: -13.26816177368164
    6. ' )' → logprob: -13.76816177368164
    7. '()' → logprob: -14.14316177368164
    8. ')return' → logprob: -14.39316177368164
    9. ')`' → logprob: -14.39316177368164
    10. '<|end|>' → logprob: -14.51816177368164

Token 100: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.00015014449309092015
    2. ' else' → logprob: -9.000149726867676
    3. '   ' → logprob: -11.250149726867676
    4. '```' → logprob: -11.625149726867676
    5. 'if' → logprob: -12.625149726867676
    6. 'elif' → logprob: -14.250149726867676
    7. '<|end|>' → logprob: -15.125149726867676
    8. '    
' → logprob: -15.500149726867676
    9. '	else' → logprob: -15.875149726867676
    10. 'continue' → logprob: -16.750150680541992

Token 101: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0021960523445159197
    2. ':
' → logprob: -6.127195835113525
    3. ' :' → logprob: -11.627196311950684
    4. ':
' → logprob: -13.752196311950684
    5. ':

' → logprob: -14.877196311950684
    6. ' :
' → logprob: -15.877196311950684
    7. ':return' → logprob: -16.377195358276367
    8. '<|end|>' → logprob: -16.377195358276367
    9. '：' → logprob: -17.252195358276367
    10. ':block' → logprob: -17.314695358276367

Token 102: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.43653857707977295
    2. '   ' → logprob: -1.061538577079773
    3. ' print' → logprob: -4.9365386962890625
    4. '```' → logprob: -7.6865386962890625
    5. 'if' → logprob: -10.061538696289062
    6. ' if' → logprob: -10.436538696289062
    7. '	print' → logprob: -10.436538696289062
    8. '    
' → logprob: -11.061538696289062
    9. '``' → logprob: -11.436538696289062
    10. '    ' → logprob: -11.436538696289062

Token 103: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.24736562371253967
    2. ' if' → logprob: -2.497365713119507
    3. ' print' → logprob: -2.747365713119507
    4. 'if' → logprob: -2.872365713119507
    5. '   ' → logprob: -4.372365474700928
    6. '       ' → logprob: -6.122365474700928
    7. '    ' → logprob: -7.247365474700928
    8. '           ' → logprob: -10.247365951538086
    9. 'pos' → logprob: -10.247365951538086
    10. ' ans' → logprob: -10.372365951538086

Token 104: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10636374354362488
    2. '(len' → logprob: -2.9813637733459473
    3. '("' → logprob: -3.2313637733459473
    4. '()' → logprob: -5.106363773345947
    5. '('' → logprob: -5.856363773345947
    6. '((' → logprob: -7.731363773345947
    7. '(sum' → logprob: -7.981363773345947
    8. '("(' → logprob: -8.731363296508789
    9. '(True' → logprob: -8.981363296508789
    10. '("("' → logprob: -8.981363296508789

Token 105: 'OK' (ID: 5175)
  Prédit: '".'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '".' → logprob: -0.7596563696861267
    2. '"' → logprob: -1.5096564292907715
    3. '0' → logprob: -1.8846564292907715
    4. 'YES' → logprob: -3.5096564292907715
    5. '1' → logprob: -3.8846564292907715
    6. 'stack' → logprob: -4.1346564292907715
    7. '")' → logprob: -4.3846564292907715
    8. 'all' → logprob: -5.1346564292907715
    9. '{' → logprob: -5.1346564292907715
    10. ')' → logprob: -5.1346564292907715

Token 106: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.0013329789508134127
    2. ')' → logprob: -6.626332759857178
    3. ')")' → logprob: -12.126333236694336
    4. '"' → logprob: -14.751333236694336
    5. '')' → logprob: -14.876333236694336
    6. '")
' → logprob: -15.001333236694336
    7. '!")' → logprob: -15.126333236694336
    8. ' ")' → logprob: -16.376333236694336
    9. '`)' → logprob: -16.626333236694336
    10. ' )' → logprob: -16.626333236694336


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 104
Tokens correctement prédits (1ère position, stricte): 40
Tokens correctement prédits (1ère position, avec adaptation): 48
Tokens correctement prédits (top 10): 85
Précision stricte (1ère position): 38.46%
Précision adaptée (1ère position): 46.15%
Précision (top 10): 81.73%
================================================================================
