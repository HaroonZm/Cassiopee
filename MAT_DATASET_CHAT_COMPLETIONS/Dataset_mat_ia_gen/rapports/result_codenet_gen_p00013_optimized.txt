================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 16:55:25
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
stack = []
try:
    while True:
        x = input()
        if x == '':
            break
        n = int(x)
        if n != 0:
            stack.append(n)
        else:
            print(stack.pop())
except EOFError:
    pass
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'stack' (ID: 15145)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' []
' (ID: 8911)
  → Token d'amorce (pas de prédiction)

Token 3: 'try' (ID: 1806)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.016275176778435707
    2. '.append' → logprob: -4.266275405883789
    3. '.stack' → logprob: -6.266275405883789
    4. 'stack' → logprob: -9.266275405883789
    5. 'append' → logprob: -10.016275405883789
    6. '.push' → logprob: -10.266275405883789
    7. '```' → logprob: -11.266275405883789
    8. '.pop' → logprob: -11.766275405883789
    9. '\.' → logprob: -13.016275405883789
    10. '.Stack' → logprob: -13.141275405883789

Token 4: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -7.100059156073257e-05
    2. ':
' → logprob: -10.750070571899414
    3. '[' → logprob: -11.250070571899414
    4. ' :' → logprob: -11.500070571899414
    5. '{' → logprob: -12.250070571899414
    6. '`:' → logprob: -12.625070571899414
    7. '```' → logprob: -12.875070571899414
    8. '[:]' → logprob: -13.000070571899414
    9. ':**' → logprob: -13.125070571899414
    10. '{:' → logprob: -13.250070571899414

Token 5: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.4567810595035553
    2. '   ' → logprob: -1.081781029701233
    3. ' :' → logprob: -4.831780910491943
    4. '    ' → logprob: -5.331780910491943
    5. ' ' → logprob: -5.706780910491943
    6. '```' → logprob: -5.956780910491943
    7. '[' → logprob: -6.081780910491943
    8. '(stack' → logprob: -6.206780910491943
    9. ' (' → logprob: -6.331780910491943
    10. ' stack' → logprob: -7.456780910491943

Token 6: ' while' (ID: 2049)
  Prédit: ' stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.4005163311958313
    2. 'stack' → logprob: -1.4005162715911865
    3. '   ' → logprob: -2.6505162715911865
    4. '    ' → logprob: -5.150516510009766
    5. '(stack' → logprob: -5.900516510009766
    6. '       ' → logprob: -6.400516510009766
    7. '	stack' → logprob: -7.650516510009766
    8. '[' → logprob: -7.650516510009766
    9. '(' → logprob: -8.650516510009766
    10. 'x' → logprob: -8.775516510009766

Token 7: ' True' (ID: 6432)
  Prédit: ' True'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' True' → logprob: -0.09212576597929001
    2. ' ' → logprob: -2.967125654220581
    3. ' not' → logprob: -3.717125654220581
    4. ' stack' → logprob: -4.46712589263916
    5. 'True' → logprob: -7.96712589263916
    6. ' len' → logprob: -8.21712589263916
    7. ' (' → logprob: -10.21712589263916
    8. 'stack' → logprob: -10.46712589263916
    9. ' ' → logprob: -10.59212589263916
    10. 'not' → logprob: -11.46712589263916

Token 8: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0006473870598711073
    2. '       ' → logprob: -8.50064754486084
    3. '):' → logprob: -8.50064754486084
    4. '():' → logprob: -8.75064754486084
    5. '   ' → logprob: -10.50064754486084
    6. ':
' → logprob: -10.87564754486084
    7. ' :' → logprob: -11.00064754486084
    8. '```' → logprob: -12.25064754486084
    9. ':**' → logprob: -12.75064754486084
    10. '`:' → logprob: -13.37564754486084

Token 9: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.07204318791627884
    2. '   ' → logprob: -3.0720431804656982
    3. 'stack' → logprob: -4.447043418884277
    4. '(stack' → logprob: -5.197043418884277
    5. ' stack' → logprob: -6.072043418884277
    6. '```' → logprob: -6.947043418884277
    7. '    ' → logprob: -7.822043418884277
    8. ' ' → logprob: -8.197043418884277
    9. '        
' → logprob: -8.697043418884277
    10. ')' → logprob: -8.697043418884277

Token 10: ' x' (ID: 1215)
  Prédit: ' data'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' data' → logprob: -0.4378061592578888
    2. '   ' → logprob: -1.8128061294555664
    3. 'data' → logprob: -2.5628061294555664
    4. ' item' → logprob: -3.4378061294555664
    5. ' stack' → logprob: -3.9378061294555664
    6. ' line' → logprob: -4.187806129455566
    7. ' token' → logprob: -4.437806129455566
    8. 'stack' → logprob: -4.937806129455566
    9. 'item' → logprob: -5.187806129455566
    10. ' command' → logprob: -5.562806129455566

Token 11: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.04300251230597496
    2. '=' → logprob: -3.1680026054382324
    3. ' ' → logprob: -12.918002128601074
    4. '=input' → logprob: -14.918002128601074
    5. 'space' → logprob: -16.29300308227539
    6. ',' → logprob: -16.79300308227539
    7. ' =
' → logprob: -16.79300308227539
    8. ' =
' → logprob: -16.91800308227539
    9. '=int' → logprob: -16.91800308227539
    10. '.' → logprob: -17.16800308227539

Token 12: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.47596052289009094
    2. ' input' → logprob: -0.9759604930877686
    3. 'int' → logprob: -6.600960731506348
    4. ' int' → logprob: -8.225960731506348
    5. 'stack' → logprob: -8.975960731506348
    6. ' ' → logprob: -9.350960731506348
    7. ' stack' → logprob: -10.475960731506348
    8. 'yield' → logprob: -13.100960731506348
    9. 'iter' → logprob: -13.225960731506348
    10. 'next' → logprob: -13.600960731506348

Token 13: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.06611599028110504
    2. '('' → logprob: -2.9411160945892334
    3. '()' → logprob: -5.191115856170654
    4. '("("' → logprob: -5.316115856170654
    5. ')' → logprob: -9.066116333007812
    6. ''' → logprob: -9.316116333007812
    7. '```' → logprob: -9.441116333007812
    8. '("' → logprob: -9.441116333007812
    9. '("")' → logprob: -9.566116333007812
    10. '(
' → logprob: -10.066116333007812

Token 14: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.003470709314569831
    2. ')' → logprob: -7.5034708976745605
    3. ' if' → logprob: -7.7534708976745605
    4. '   ' → logprob: -8.003470420837402
    5. '           ' → logprob: -8.003470420837402
    6. 'except' → logprob: -8.128470420837402
    7. '.strip' → logprob: -8.253470420837402
    8. ' except' → logprob: -8.628470420837402
    9. '.' → logprob: -8.753470420837402
    10. '        ' → logprob: -9.003470420837402

Token 15: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.22114259004592896
    2. '       ' → logprob: -2.596142530441284
    3. 'if' (adapté à ' if') → logprob: -2.596142530441284
    4. ' ' → logprob: -3.971142530441284
    5. '   ' → logprob: -4.596142768859863
    6. '<|end|>' → logprob: -4.846142768859863
    7. ')' → logprob: -5.596142768859863
    8. '\n' → logprob: -6.596142768859863
    9. '        ' → logprob: -6.846142768859863
    10. 'stack' → logprob: -7.221142768859863

Token 16: ' x' (ID: 1215)
  Prédit: ' x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' x' → logprob: -0.6215459108352661
    2. ' not' → logprob: -0.9965459108352661
    3. ' ' → logprob: -2.4965457916259766
    4. 'x' → logprob: -4.871545791625977
    5. ' stack' → logprob: -6.121545791625977
    6. 'not' → logprob: -6.746545791625977
    7. ' len' → logprob: -9.246545791625977
    8. ''' → logprob: -9.746545791625977
    9. '  ' → logprob: -9.996545791625977
    10. '"' → logprob: -10.371545791625977

Token 17: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.01853547804057598
    2. '==' → logprob: -4.143535614013672
    3. '.' → logprob: -6.643535614013672
    4. ' ' → logprob: -7.893535614013672
    5. ' .' → logprob: -8.643535614013672
    6. '.startswith' → logprob: -8.643535614013672
    7. ' !=' → logprob: -8.768535614013672
    8. '.strip' → logprob: -9.143535614013672
    9. ' in' → logprob: -9.893535614013672
    10. ')' → logprob: -10.143535614013672

Token 18: ' '':
' (ID: 125614)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '"' → logprob: -0.32957136631011963
    2. ''' → logprob: -1.5795713663101196
    3. '""' → logprob: -2.70457124710083
    4. '''' → logprob: -5.20457124710083
    5. ' "' → logprob: -7.57957124710083
    6. ' ""' → logprob: -7.57957124710083
    7. ' '' → logprob: -7.70457124710083
    8. ' ' → logprob: -8.829571723937988
    9. ' ''' → logprob: -9.329571723937988
    10. ''ex' → logprob: -9.579571723937988

Token 19: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.008331112563610077
    2. ' break' → logprob: -5.008331298828125
    3. ':' → logprob: -6.633331298828125
    4. 'break' → logprob: -9.383331298828125
    5. '       ' → logprob: -10.008331298828125
    6. ' :' → logprob: -10.633331298828125
    7. '               ' → logprob: -10.758331298828125
    8. '            ' → logprob: -11.008331298828125
    9. '   ' → logprob: -11.008331298828125
    10. '	break' → logprob: -11.133331298828125

Token 20: ' break' (ID: 2338)
  Prédit: ' break'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' break' → logprob: -0.17417384684085846
    2. '           ' → logprob: -1.9241738319396973
    3. 'break' (adapté à ' break') → logprob: -4.299173831939697
    4. '	break' → logprob: -9.424174308776855
    5. ' ' → logprob: -9.799174308776855
    6. '   ' → logprob: -9.799174308776855
    7. '       ' → logprob: -10.674174308776855
    8. '_break' → logprob: -10.924174308776855
    9. '               ' → logprob: -11.799174308776855
    10. '\n' → logprob: -11.924174308776855

Token 21: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.013246587477624416
    2. ')' → logprob: -5.513246536254883
    3. '
' → logprob: -5.513246536254883
    4. '\' → logprob: -6.263246536254883
    5. '\n' → logprob: -6.638246536254883
    6. '           ' → logprob: -7.763246536254883
    7. '   ' → logprob: -8.138246536254883
    8. '        
' → logprob: -8.763246536254883
    9. '' → logprob: -9.013246536254883
    10. '
' → logprob: -9.013246536254883

Token 22: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0007743701571598649
    2. ')' → logprob: -8.250774383544922
    3. '   ' → logprob: -8.375774383544922
    4. 'except' → logprob: -10.000774383544922
    5. '           ' → logprob: -10.250774383544922
    6. 'stack' → logprob: -10.375774383544922
    7. ' except' → logprob: -10.375774383544922
    8. ',' → logprob: -10.625774383544922
    9. '	' → logprob: -11.250774383544922
    10. '<|end|>' → logprob: -11.250774383544922

Token 23: ' n' (ID: 297)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.9543025493621826
    2. '       ' → logprob: -0.9543025493621826
    3. 'stack' → logprob: -1.7043025493621826
    4. ' stack' → logprob: -3.8293025493621826
    5. '	stack' → logprob: -5.079302787780762
    6. '.stack' → logprob: -5.204302787780762
    7. ' if' → logprob: -5.454302787780762
    8. '(stack' → logprob: -5.579302787780762
    9. '_stack' → logprob: -7.079302787780762
    10. '[' → logprob: -7.079302787780762

Token 24: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.22828520834445953
    2. '=' → logprob: -1.9782851934432983
    3. 'um' → logprob: -2.853285312652588
    4. 'umber' → logprob: -5.728285312652588
    5. '=int' → logprob: -5.728285312652588
    6. '.append' → logprob: -7.228285312652588
    7. ' ' → logprob: -8.10328483581543
    8. '.' → logprob: -8.60328483581543
    9. 'o' → logprob: -9.47828483581543
    10. '   ' → logprob: -9.72828483581543

Token 25: ' int' (ID: 677)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.5759466886520386
    2. ' int' → logprob: -0.8259466886520386
    3. 'float' → logprob: -13.200946807861328
    4. ' float' → logprob: -13.325946807861328
    5. '   ' → logprob: -14.200946807861328
    6. 'len' → logprob: -14.575946807861328
    7. '=int' → logprob: -14.700946807861328
    8. '[int' → logprob: -14.825946807861328
    9. ' ' → logprob: -15.075946807861328
    10. '(int' → logprob: -15.200946807861328

Token 26: '(x' (ID: 4061)
  Prédit: '(x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(x' → logprob: -0.06200813129544258
    2. '(' → logprob: -2.8120081424713135
    3. 'x' → logprob: -10.937007904052734
    4. ' (' → logprob: -11.187007904052734
    5. '(n' → logprob: -11.937007904052734
    6. '(
' → logprob: -13.687007904052734
    7. ' ' → logprob: -14.937007904052734
    8. '`' → logprob: -15.187007904052734
    9. ')' → logprob: -15.812007904052734
    10. '   ' → logprob: -16.687007904052734

Token 27: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -8.482821431243792e-05
    2. ')
' → logprob: -9.50008487701416
    3. ' )' → logprob: -12.25008487701416
    4. '))' → logprob: -13.12508487701416
    5. '`)' → logprob: -14.50008487701416
    6. ')n' → logprob: -14.75008487701416
    7. ')
' → logprob: -14.87508487701416
    8. '       ' → logprob: -15.25008487701416
    9. '')' → logprob: -15.37508487701416
    10. '   ' → logprob: -15.37508487701416

Token 28: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0005863950937055051
    2. '           ' → logprob: -9.12558650970459
    3. '<|end|>' → logprob: -9.25058650970459
    4. '	' → logprob: -9.75058650970459
    5. '[' → logprob: -9.87558650970459
    6. ')' → logprob: -9.87558650970459
    7. '   ' → logprob: -10.25058650970459
    8. '(stack' → logprob: -10.62558650970459
    9. ' ' → logprob: -10.87558650970459
    10. 'stack' → logprob: -11.00058650970459

Token 29: ' if' (ID: 538)
  Prédit: ' stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.46321597695350647
    2. 'stack' → logprob: -1.338215947151184
    3. '       ' → logprob: -2.4632160663604736
    4. ' if' → logprob: -3.9632160663604736
    5. '   ' → logprob: -6.7132158279418945
    6. '	stack' → logprob: -6.7132158279418945
    7. 'if' (adapté à ' if') → logprob: -7.3382158279418945
    8. '```' → logprob: -8.213215827941895
    9. '(stack' → logprob: -8.588215827941895
    10. '.stack' → logprob: -8.838215827941895

Token 30: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.06383240967988968
    2. ' stack' → logprob: -3.5638325214385986
    3. ' not' → logprob: -3.6888325214385986
    4. 'n' → logprob: -5.6888322830200195
    5. ' len' → logprob: -5.6888322830200195
    6. ' ' → logprob: -6.6888322830200195
    7. 'stack' → logprob: -8.06383228302002
    8. 'not' → logprob: -9.68883228302002
    9. 'len' → logprob: -9.81383228302002
    10. ' isinstance' → logprob: -10.81383228302002

Token 31: ' !=' (ID: 1666)
  Prédit: ' <'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.30167853832244873
    2. ' <=' → logprob: -1.9266785383224487
    3. '<' → logprob: -2.6766786575317383
    4. ' >' → logprob: -3.4266786575317383
    5. '>' → logprob: -5.426678657531738
    6. '<=' → logprob: -5.551678657531738
    7. '%' → logprob: -6.676678657531738
    8. ' ==' → logprob: -6.801678657531738
    9. ' >=' → logprob: -6.801678657531738
    10. ' ' → logprob: -7.051678657531738

Token 32: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3721632659435272
    2. '0' → logprob: -1.7471632957458496
    3. ' stack' → logprob: -2.3721632957458496
    4. 'stack' → logprob: -3.2471632957458496
    5. ' n' → logprob: -6.62216329574585
    6. ' -' → logprob: -7.12216329574585
    7. '1' → logprob: -7.49716329574585
    8. '-' → logprob: -8.247162818908691
    9. ' len' → logprob: -8.372162818908691
    10. 'n' → logprob: -8.872162818908691

Token 33: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.31809431314468384
    2. ' ' → logprob: -1.443094253540039
    3. 'stack' → logprob: -3.693094253540039
    4. ' stack' → logprob: -4.943094253540039
    5. '-' → logprob: -6.818094253540039
    6. 'len' → logprob: -7.318094253540039
    7. ' -' → logprob: -7.443094253540039
    8. ' len' → logprob: -7.818094253540039
    9. '1' → logprob: -7.943094253540039
    10. ' n' → logprob: -8.318094253540039

Token 34: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00022368213103618473
    2. ':
' → logprob: -8.750224113464355
    3. ' and' → logprob: -10.250224113464355
    4. ' :' → logprob: -11.250224113464355
    5. '):' → logprob: -11.625224113464355
    6. ',' → logprob: -12.625224113464355
    7. ':**' → logprob: -13.875224113464355
    8. ':

' → logprob: -14.125224113464355
    9. 'and' → logprob: -14.500224113464355
    10. '<|end|>' → logprob: -14.750224113464355

Token 35: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.044221751391887665
    2. ' stack' → logprob: -4.044221878051758
    3. '<|end|>' → logprob: -4.544221878051758
    4. '(stack' → logprob: -5.794221878051758
    5. 'stack' → logprob: -5.794221878051758
    6. '            
' → logprob: -6.169221878051758
    7. ' ' → logprob: -6.294221878051758
    8. ' 
' → logprob: -6.669221878051758
    9. '	stack' → logprob: -6.794221878051758
    10. '```' → logprob: -7.669221878051758

Token 36: ' stack' (ID: 10825)
  Prédit: ' stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' stack' → logprob: -0.016506310552358627
    2. 'stack' (adapté à ' stack') → logprob: -4.141506195068359
    3. '               ' → logprob: -8.14150619506836
    4. '	stack' → logprob: -9.89150619506836
    5. '(stack' → logprob: -10.14150619506836
    6. '_stack' → logprob: -10.39150619506836
    7. ' 
' → logprob: -11.14150619506836
    8. '           ' → logprob: -11.51650619506836
    9. '.stack' → logprob: -11.76650619506836
    10. ' ' → logprob: -12.01650619506836

Token 37: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.00219273311085999
    2. '.' → logprob: -6.127192497253418
    3. '.extend' → logprob: -12.752192497253418
    4. '.push' → logprob: -13.002192497253418
    5. 'append' → logprob: -14.252192497253418
    6. '.app' → logprob: -14.752192497253418
    7. '.add' → logprob: -15.127192497253418
    8. '.insert' → logprob: -15.127192497253418
    9. ' .' → logprob: -15.252192497253418
    10. '.setdefault' → logprob: -15.377192497253418

Token 38: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.048604074865579605
    2. '(' → logprob: -3.0486040115356445
    3. ' (' → logprob: -11.423604011535645
    4. '(x' → logprob: -13.048604011535645
    5. '((' → logprob: -13.048604011535645
    6. '(int' → logprob: -14.048604011535645
    7. '(
' → logprob: -15.298604011535645
    8. '()' → logprob: -16.04860496520996
    9. '('' → logprob: -16.29860496520996
    10. '(abs' → logprob: -16.79860496520996

Token 39: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0028775110840797424
    2. ')
' → logprob: -5.877877712249756
    3. '       ' → logprob: -9.877877235412598
    4. ')
' → logprob: -11.752877235412598
    5. ' )' → logprob: -12.002877235412598
    6. '))' → logprob: -13.252877235412598
    7. '   ' → logprob: -13.502877235412598
    8. ')

' → logprob: -14.002877235412598
    9. '`)' → logprob: -14.002877235412598
    10. ')`' → logprob: -14.127877235412598

Token 40: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0014208302600309253
    2. ' else' → logprob: -6.876420974731445
    3. '   ' → logprob: -9.001420974731445
    4. '<|end|>' → logprob: -9.001420974731445
    5. 'else' → logprob: -9.501420974731445
    6. '```' → logprob: -11.376420974731445
    7. '<|end|>' → logprob: -11.376420974731445
    8. ' elif' → logprob: -11.501420974731445
    9. '	' → logprob: -12.501420974731445
    10. '	else' → logprob: -12.626420974731445

Token 41: ' else' (ID: 1203)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.028272662311792374
    2. ' else' → logprob: -4.02827262878418
    3. 'else' (adapté à ' else') → logprob: -4.90327262878418
    4. ' elif' → logprob: -6.90327262878418
    5. '   ' → logprob: -7.02827262878418
    6. 'elif' → logprob: -7.40327262878418
    7. '```' → logprob: -9.90327262878418
    8. '    ' → logprob: -10.52827262878418
    9. ' ' → logprob: -11.15327262878418
    10. '	else' → logprob: -11.40327262878418

Token 42: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.02633548341691494
    2. ':
' → logprob: -3.6513354778289795
    3. ':

' → logprob: -11.401335716247559
    4. ':
' → logprob: -11.651335716247559
    5. '<|end|>' → logprob: -11.901335716247559
    6. '```' → logprob: -13.651335716247559
    7. ',' → logprob: -13.776335716247559
    8. '           ' → logprob: -14.026335716247559
    9. 's' → logprob: -14.026335716247559
    10. '<|end|>' → logprob: -14.401335716247559

Token 43: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.017680173739790916
    2. '```' → logprob: -5.0176801681518555
    3. ' stack' → logprob: -6.0176801681518555
    4. ' if' → logprob: -6.5176801681518555
    5. '   ' → logprob: -6.6426801681518555
    6. '<|end|>' → logprob: -6.7676801681518555
    7. ' ' → logprob: -6.8926801681518555
    8. 'stack' → logprob: -7.2676801681518555
    9. '``' → logprob: -7.8926801681518555
    10. '       ' → logprob: -7.8926801681518555

Token 44: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.4941228926181793
    2. ' print' → logprob: -1.494122862815857
    3. ' stack' → logprob: -2.1191229820251465
    4. 'stack' → logprob: -3.2441229820251465
    5. ' if' → logprob: -5.3691229820251465
    6. 'if' → logprob: -7.3691229820251465
    7. '           ' → logprob: -7.7441229820251465
    8. '   ' → logprob: -8.369122505187988
    9. '	stack' → logprob: -9.744122505187988
    10. '```' → logprob: -9.869122505187988

Token 45: '(stack' (ID: 52691)
  Prédit: '(stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(stack' → logprob: -0.02650487795472145
    2. '(' → logprob: -3.6515049934387207
    3. 'stack' → logprob: -8.901504516601562
    4. '(len' → logprob: -10.026504516601562
    5. '(sum' → logprob: -11.901504516601562
    6. '('' → logprob: -12.526504516601562
    7. '(Stack' → logprob: -12.776504516601562
    8. '()' → logprob: -12.901504516601562
    9. '(
' → logprob: -13.401504516601562
    10. '("("' → logprob: -13.651504516601562

Token 46: '.pop' (ID: 15746)
  Prédit: '.pop'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.pop' → logprob: -6.134509021649137e-05
    2. '[-' → logprob: -9.75006103515625
    3. 'pop' → logprob: -13.37506103515625
    4. '.' → logprob: -13.50006103515625
    5. ')' → logprob: -17.25006103515625
    6. '.Pop' → logprob: -18.62506103515625
    7. 'Pop' → logprob: -19.25006103515625
    8. '.p' → logprob: -19.50006103515625
    9. '[' → logprob: -19.87506103515625
    10. '	pop' → logprob: -20.00006103515625

Token 47: '())
' (ID: 4574)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.693950891494751
    2. '())' → logprob: -0.693950891494751
    3. ')' → logprob: -7.193950653076172
    4. '(' → logprob: -10.818950653076172
    5. '())
' → logprob: -11.193950653076172
    6. '()
' → logprob: -11.693950653076172
    7. '()))' → logprob: -12.693950653076172
    8. ' ())' → logprob: -12.943950653076172
    9. '();)' → logprob: -13.443950653076172
    10. '(),' → logprob: -14.443950653076172

Token 48: 'except' (ID: 25035)
  Prédit: 'except'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'except' → logprob: -0.3203963041305542
    2. ' except' → logprob: -1.4453963041305542
    3. '```' → logprob: -3.6953964233398438
    4. '<|end|>' → logprob: -4.945396423339844
    5. '	except' → logprob: -5.945396423339844
    6. '#' → logprob: -7.195396423339844
    7. ')' → logprob: -7.695396423339844
    8. '-ex' → logprob: -7.945396423339844
    9. '+' → logprob: -8.070396423339844
    10. '<|end|>' → logprob: -8.445396423339844

Token 49: ' EOF' (ID: 72412)
  Prédit: ' EOF'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' EOF' → logprob: -0.04205793887376785
    2. ' ' → logprob: -4.042057991027832
    3. ' Index' → logprob: -4.292057991027832
    4. 'EOF' → logprob: -5.292057991027832
    5. ' Exception' → logprob: -5.417057991027832
    6. 'Index' → logprob: -8.792057991027832
    7. ' ' → logprob: -9.042057991027832
    8. '  ' → logprob: -10.042057991027832
    9. ' (' → logprob: -10.167057991027832
    10. 'Exception' → logprob: -10.792057991027832

Token 50: 'Error' (ID: 2255)
  Prédit: 'Error'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Error' → logprob: 0.0
    2. 'error' → logprob: -19.75
    3. 'Erro' → logprob: -19.875
    4. ' Error' → logprob: -20.125
    5. 'rror' → logprob: -20.125
    6. 'Exception' → logprob: -20.625
    7. 'Er' → logprob: -21.125
    8. 'EOF' → logprob: -21.375
    9. 'End' → logprob: -22.375
    10. '	Error' → logprob: -22.375

Token 51: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00011784763046307489
    2. ':
' → logprob: -9.125118255615234
    3. ' as' → logprob: -12.625118255615234
    4. '   ' → logprob: -13.375118255615234
    5. '):' → logprob: -13.500118255615234
    6. ' :' → logprob: -14.000118255615234
    7. ':**' → logprob: -14.125118255615234
    8. '():' → logprob: -14.375118255615234
    9. '<|end|>' → logprob: -15.250118255615234
    10. ':return' → logprob: -16.125118255615234

Token 52: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.000309840717818588
    2. ' pass' → logprob: -8.750309944152832
    3. ' break' → logprob: -8.875309944152832
    4. '       ' → logprob: -12.500309944152832
    5. '    ' → logprob: -13.125309944152832
    6. ' ' → logprob: -13.250309944152832
    7. '   ' → logprob: -13.875309944152832
    8. '  ' → logprob: -14.000309944152832
    9. 'pass' → logprob: -14.250309944152832
    10. '	break' → logprob: -15.000309944152832

Token 53: ' pass' (ID: 1853)
  Prédit: ' pass'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' pass' → logprob: -0.06252282112836838
    2. 'pass' (adapté à ' pass') → logprob: -2.8125228881835938
    3. '   ' → logprob: -7.562522888183594
    4. '	pass' → logprob: -11.312522888183594
    5. ' break' → logprob: -11.562522888183594
    6. ' None' → logprob: -12.312522888183594
    7. '    ' → logprob: -12.437522888183594
    8. 'break' → logprob: -13.062522888183594
    9. ' ' → logprob: -13.437522888183594
    10. 'print' → logprob: -14.687522888183594


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 51
Tokens correctement prédits (1ère position, stricte): 29
Tokens correctement prédits (1ère position, avec adaptation): 30
Tokens correctement prédits (top 10): 44
Précision stricte (1ère position): 56.86%
Précision adaptée (1ère position): 58.82%
Précision (top 10): 86.27%
================================================================================
