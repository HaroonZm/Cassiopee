================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:21:06
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import sys
import heapq

def solve():
    # Lecture multiple datasets jusqu'à ce que (0,0) soit rencontré
    input = sys.stdin.readline
    while True:
        n, m = map(int, input().split())
        if n == 0 and m == 0:
            break

        # Construction du graphe : liste d'adjacence où chaque noeud a une liste de (voisin, coût)
        graph = [[] for _ in range(n+1)]
        for _ in range(m):
            a, b, c = map(int, input().split())
            graph[a].append((b,c))
            graph[b].append((a,c))

        # On va utiliser un Dijkstra modifié avec un état supplémentaire indiquant si la réduction
        # a été utilisée ou pas.
        # dist[node][used] = coût minimum pour atteindre node
        # used = 0 si la réduction non utilisée,
        #        1 si la réduction utilisée
        INF = 10**9
        dist = [[INF]*2 for _ in range(n+1)]
        dist[1][0] = 0

        # File de priorité contenant (coût_courant, noeud_courant, used)
        pq = []
        heapq.heappush(pq, (0, 1, 0))

        while pq:
            cost, u, used = heapq.heappop(pq)
            if dist[u][used] < cost:
                continue
            if u == n:
                # On a atteint la destination, affichage immédiat possible mais on continue pour s'assurer du minimum
                # On peut sortir dès qu'on pop car la file est triée et ce sera le min
                print(cost)
                break

            # Exploration des voisins sans utiliser la réduction (normal)
            for v, c in graph[u]:
                ncost = cost + c
                if dist[v][used] > ncost:
                    dist[v][used] = ncost
                    heapq.heappush(pq, (ncost, v, used))

            # Si la réduction n'a pas encore été utilisée, essayer de l'appliquer à deux segments consécutifs
            if used == 0:
                # On parcourt les voisins de u
                for v1, c1 in graph[u]:
                    # De v1, on parcourt à nouveau ses voisins (segment consécutif)
                    for v2, c2 in graph[v1]:
                        # Conditions: 
                        # - On est sûr que u->v1->v2 forme deux segments consécutifs
                        # - Le passage est gratuit donc coût 0 pour ces deux segments
                        # - Même si v1 ou v2 = n (destination), ce n'est pas défini qu'on s'arrête là, on met à jour dist
                        #   mais le problème dit qu'atteindre n en milieu de ces 2 segments ne suffit pas..
                        #   Or ici on considère qu'on peut "passer" par n hors de l'arrivée finale, 
                        #   c'est cohérent avec le fait que le parcours dans dijkstra continue après n.
                        #   On ne s'arrête qu'au moment ou on pop n depuis la file.
                        ncost = cost + 0
                        if dist[v2][1] > ncost:
                            dist[v2][1] = ncost
                            heapq.heappush(pq, (ncost, v2, 1))

solve()
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: '
' (ID: 198)
  → Token d'amorce (pas de prédiction)

Token 3: 'import' (ID: 561)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.5940936803817749
    2. '.' → logprob: -0.9690936803817749
    3. 'import' → logprob: -3.8440937995910645
    4. 'newline' → logprob: -4.2190937995910645
    5. '\' → logprob: -4.7190937995910645
    6. '<|end|>' → logprob: -4.9690937995910645
    7. '```' → logprob: -5.3440937995910645
    8. '
' → logprob: -5.5940937995910645
    9. '<|end|>' → logprob: -6.4690937995910645
    10. '' → logprob: -6.4690937995910645

Token 4: ' heap' (ID: 37237)
  Prédit: ' os'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' os' → logprob: -1.259079363080673e-05
    2. 'os' → logprob: -11.375012397766113
    3. ' math' → logprob: -14.875012397766113
    4. '"os' → logprob: -15.250012397766113
    5. ' re' → logprob: -15.875012397766113
    6. ' json' → logprob: -16.00001335144043
    7. '	os' → logprob: -17.00001335144043
    8. '_os' → logprob: -17.00001335144043
    9. ' argparse' → logprob: -17.25001335144043
    10. ' ' → logprob: -17.25001335144043

Token 5: 'q' (ID: 80)
  Prédit: 'q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -1.0087516784551553e-05
    2. '.' → logprob: -12.37501049041748
    3. '=' → logprob: -13.75001049041748
    4. '_' → logprob: -13.87501049041748
    5. 'ify' → logprob: -14.00001049041748
    6. '#' → logprob: -14.25001049041748
    7. '[' → logprob: -15.12501049041748
    8. 'u' → logprob: -15.25001049041748
    9. 'p' → logprob: -15.25001049041748
    10. 'space' → logprob: -15.50001049041748

Token 6: '

' (ID: 279)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.8491789102554321
    2. '
' → logprob: -1.7241789102554321
    3. '\n' → logprob: -1.7241789102554321
    4. '

' → logprob: -2.7241787910461426
    5. '\' → logprob: -2.9741787910461426
    6. '<|end|>' → logprob: -3.5991787910461426
    7. 'import' → logprob: -3.7241787910461426
    8. '' → logprob: -4.224178791046143
    9. '```' → logprob: -4.224178791046143
    10. '<|end|>' → logprob: -5.224178791046143

Token 7: 'def' (ID: 1314)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.7021507620811462
    2. 'def' → logprob: -1.702150821685791
    3. '
' → logprob: -2.327150821685791
    4. '\' → logprob: -3.202150821685791
    5. '```' → logprob: -3.327150821685791
    6. 'class' → logprob: -3.452150821685791
    7. '\n' → logprob: -3.827150821685791
    8. 'import' → logprob: -4.077150821685791
    9. 'from' → logprob: -4.077150821685791
    10. '' → logprob: -4.327150821685791

Token 8: ' solve' (ID: 17722)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.0016182884573936462
    2. ' a' → logprob: -7.126618385314941
    3. ' find' → logprob: -8.501618385314941
    4. ' space' → logprob: -9.126618385314941
    5. '_' → logprob: -9.501618385314941
    6. ' ' → logprob: -10.001618385314941
    7. ' process' → logprob: -10.126618385314941
    8. ' heap' → logprob: -10.126618385314941
    9. ' A' → logprob: -10.376618385314941
    10. ' merge' → logprob: -10.501618385314941

Token 9: '():
' (ID: 8595)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0025785129982978106
    2. '_' → logprob: -7.0025787353515625
    3. '():' → logprob: -7.2525787353515625
    4. '```' → logprob: -8.377578735351562
    5. ':' → logprob: -8.877578735351562
    6. '(:' → logprob: -9.502578735351562
    7. '(
' → logprob: -9.502578735351562
    8. '):' → logprob: -9.752578735351562
    9. '<|end|>' → logprob: -9.752578735351562
    10. ' (' → logprob: -10.502578735351562

Token 10: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5510635375976562
    2. ' n' → logprob: -1.0510635375976562
    3. ' input' → logprob: -3.5510635375976562
    4. 'n' → logprob: -3.6760635375976562
    5. ' data' → logprob: -5.051063537597656
    6. ' pass' → logprob: -5.676063537597656
    7. ' readline' → logprob: -5.676063537597656
    8. ' import' → logprob: -6.301063537597656
    9. ' ' → logprob: -7.176063537597656
    10. '    ' → logprob: -7.176063537597656

Token 11: ' #' (ID: 1069)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.5784065127372742
    2. '   ' → logprob: -0.9534065127372742
    3. ' input' → logprob: -3.578406572341919
    4. 'n' → logprob: -4.20340633392334
    5. ' sys' → logprob: -5.82840633392334
    6. 'input' → logprob: -6.07840633392334
    7. '    ' → logprob: -6.70340633392334
    8. ' data' → logprob: -6.82840633392334
    9. ' line' → logprob: -7.45340633392334
    10. ' heap' → logprob: -7.45340633392334

Token 12: ' Lecture' (ID: 106534)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.2034994214773178
    2. ' n' → logprob: -2.0784993171691895
    3. ' data' → logprob: -3.3284993171691895
    4. ' import' → logprob: -4.7034993171691895
    5. '   ' → logprob: -4.8284993171691895
    6. 'input' → logprob: -5.5784993171691895
    7. 'data' → logprob: -7.4534993171691895
    8. '    ' → logprob: -8.078499794006348
    9. 'n' → logprob: -8.078499794006348
    10. ' read' → logprob: -8.203499794006348

Token 13: ' multiple' (ID: 7598)
  Prédit: ' notes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' notes' → logprob: -1.0955199003219604
    2. '_notes' → logprob: -1.0955199003219604
    3. ' ' → logprob: -1.7205199003219604
    4. ' =' → logprob: -2.72052001953125
    5. '_' → logprob: -2.97052001953125
    6. '   ' → logprob: -4.47052001953125
    7. ' Notes' → logprob: -4.84552001953125
    8. 's' → logprob: -5.34552001953125
    9. ':' → logprob: -5.47052001953125
    10. ' hall' → logprob: -6.97052001953125

Token 14: ' datasets' (ID: 57711)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.6876396536827087
    2. ' test' → logprob: -1.5626397132873535
    3. ' lines' → logprob: -2.1876397132873535
    4. ' data' → logprob: -3.3126397132873535
    5. ' s' → logprob: -3.4376397132873535
    6. ' input' → logprob: -3.6876397132873535
    7. ' spaces' → logprob: -4.6876397132873535
    8. ' inputs' → logprob: -4.6876397132873535
    9. ' line' → logprob: -4.9376397132873535
    10. ' space' → logprob: -5.3126397132873535

Token 15: ' jusqu' (ID: 21961)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.22220109403133392
    2. ':' → logprob: -2.472201108932495
    3. '
' → logprob: -3.847201108932495
    4. ' while' → logprob: -4.097200870513916
    5. '    
' → logprob: -4.222200870513916
    6. '```' → logprob: -4.472200870513916
    7. '(n' → logprob: -4.847200870513916
    8. '(' → logprob: -4.972200870513916
    9. ' for' → logprob: -4.972200870513916
    10. '  
' → logprob: -5.722200870513916

Token 16: ''à' (ID: 33688)
  Prédit: ''à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''à' → logprob: -0.031434930860996246
    2. 'e' → logprob: -4.156435012817383
    3. ''' → logprob: -5.031435012817383
    4. ''en' → logprob: -5.406435012817383
    5. '’à' → logprob: -6.656435012817383
    6. ''a' → logprob: -7.156435012817383
    7. ''e' → logprob: -7.281435012817383
    8. ''au' → logprob: -7.656435012817383
    9. 'a' → logprob: -8.531435012817383
    10. 'u' → logprob: -9.031435012817383

Token 17: ' ce' (ID: 2357)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' la' → logprob: -1.019852876663208
    2. ' input' → logprob: -2.019852876663208
    3. 'la' → logprob: -2.144852876663208
    4. 'l' → logprob: -2.769852876663208
    5. ' stdin' → logprob: -2.769852876663208
    6. ' sys' → logprob: -3.144852876663208
    7. 'stdin' → logprob: -3.269852876663208
    8. ' ' → logprob: -3.644852876663208
    9. '```' → logprob: -3.644852876663208
    10. 'input' → logprob: -3.769852876663208

Token 18: ' que' (ID: 661)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.09456166625022888
    2. '_' → logprob: -3.2195615768432617
    3. ' ' → logprob: -3.7195615768432617
    4. 's' → logprob: -4.594561576843262
    5. 'u' → logprob: -5.719561576843262
    6. 'space' → logprob: -5.719561576843262
    7. 'n' → logprob: -6.219561576843262
    8. 'a' → logprob: -6.969561576843262
    9. ' space' → logprob: -7.094561576843262
    10. ' \' → logprob: -7.219561576843262

Token 19: ' (' (ID: 350)
  Prédit: ' True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' True' → logprob: -0.22273528575897217
    2. ' not' → logprob: -1.8477352857589722
    3. ' False' → logprob: -3.5977354049682617
    4. 'True' → logprob: -5.347735404968262
    5. 'not' → logprob: -5.597735404968262
    6. ' ce' → logprob: -6.222735404968262
    7. 'False' → logprob: -6.347735404968262
    8. ' la' → logprob: -7.097735404968262
    9. ' EOF' → logprob: -7.472735404968262
    10. 'EOF' → logprob: -7.847735404968262

Token 20: '0' (ID: 15)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'False' → logprob: -0.30818596482276917
    2. ' False' → logprob: -2.1831860542297363
    3. 'True' → logprob: -3.3081860542297363
    4. ' not' → logprob: -3.4331860542297363
    5. ' True' → logprob: -3.4331860542297363
    6. 'not' → logprob: -3.6831860542297363
    7. 'EOF' → logprob: -4.183186054229736
    8. 'sys' → logprob: -6.183186054229736
    9. 'len' → logprob: -6.308186054229736
    10. ' sys' → logprob: -6.933186054229736

Token 21: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.35627803206443787
    2. ' )' → logprob: -1.9812780618667603
    3. ',' → logprob: -2.7312779426574707
    4. ',)' → logprob: -2.8562779426574707
    5. ' ==' → logprob: -3.7312779426574707
    6. ' ' → logprob: -4.731277942657471
    7. ' ,' → logprob: -6.231277942657471
    8. ')==' → logprob: -6.606277942657471
    9. '==' → logprob: -7.231277942657471
    10. ' input' → logprob: -7.731277942657471

Token 22: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.31346938014030457
    2. ' ' → logprob: -1.313469409942627
    3. ')' → logprob: -8.563468933105469
    4. ' )' → logprob: -11.313468933105469
    5. '  ' → logprob: -12.813468933105469
    6. '   ' → logprob: -14.188468933105469
    7. ' ' → logprob: -15.563468933105469
    8. '    ' → logprob: -15.813468933105469
    9. ' 

' → logprob: -15.813468933105469
    10. ',' → logprob: -16.50096893310547

Token 23: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -9.2576454335358e-05
    2. ' )' → logprob: -9.875092506408691
    3. '):' → logprob: -11.125092506408691
    4. '')' → logprob: -11.250092506408691
    5. ')`' → logprob: -12.375092506408691
    6. '`)' → logprob: -13.500092506408691
    7. '),' → logprob: -13.625092506408691
    8. ',' → logprob: -13.625092506408691
    9. '))' → logprob: -13.875092506408691
    10. ')
' → logprob: -14.125092506408691

Token 24: ' soit' (ID: 17293)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.908493161201477
    2. '
' → logprob: -1.033493161201477
    3. ':' → logprob: -2.5334930419921875
    4. ' ' → logprob: -3.0334930419921875
    5. '    
' → logprob: -3.6584930419921875
    6. '  
' → logprob: -3.7834930419921875
    7. '```' → logprob: -3.9084930419921875
    8. '  ' → logprob: -4.6584930419921875
    9. '    ' → logprob: -5.2834930419921875
    10. '(' → logprob: -5.5334930419921875

Token 25: ' rencontré' (ID: 141085)
  Prédit: ' rencontré'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' rencontré' → logprob: -0.22776997089385986
    2. ' encountered' → logprob: -2.3527698516845703
    3. ' rencontr' → logprob: -2.8527698516845703
    4. 'enc' → logprob: -4.22776985168457
    5. ' reçu' → logprob: -4.60276985168457
    6. '(' → logprob: -5.22776985168457
    7. ' ' → logprob: -5.47776985168457
    8. ' atteint' → logprob: -5.47776985168457
    9. '   ' → logprob: -6.22776985168457
    10. ' détect' → logprob: -6.35276985168457

Token 26: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.019414380192756653
    2. '
' → logprob: -5.14441442489624
    3. '```' → logprob: -5.26941442489624
    4. ' while' → logprob: -5.51941442489624
    5. '    
' → logprob: -6.39441442489624
    6. '	while' → logprob: -7.26941442489624
    7. 'while' → logprob: -7.39441442489624
    8. '  
' → logprob: -8.769413948059082
    9. '  ' → logprob: -8.894413948059082
    10. ' ' → logprob: -9.019413948059082

Token 27: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.18975010514259338
    2. '   ' → logprob: -1.939750075340271
    3. ':' → logprob: -4.1897501945495605
    4. '    
' → logprob: -4.9397501945495605
    5. '  
' → logprob: -6.5647501945495605
    6. '```' → logprob: -6.6897501945495605
    7. ' while' → logprob: -7.1897501945495605
    8. ':
' → logprob: -7.3147501945495605
    9. 'while' → logprob: -7.4397501945495605
    10. '\n' → logprob: -7.9397501945495605

Token 28: ' input' (ID: 3422)
  Prédit: ' while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' while' → logprob: -0.6124610304832458
    2. '   ' → logprob: -0.9874610304832458
    3. 'while' → logprob: -2.6124610900878906
    4. '
' → logprob: -4.612461090087891
    5. '```' → logprob: -6.612461090087891
    6. '    
' → logprob: -7.612461090087891
    7. '	while' → logprob: -8.73746109008789
    8. ' 
' → logprob: -10.11246109008789
    9. ' ' → logprob: -10.48746109008789
    10. '\n' → logprob: -10.61246109008789

Token 29: ' =' (ID: 314)
  Prédit: '_line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_line' → logprob: -0.17663341760635376
    2. '()' → logprob: -2.301633358001709
    3. '_data' → logprob: -3.176633358001709
    4. '_' → logprob: -4.301633358001709
    5. '_lines' → logprob: -5.551633358001709
    6. '(' → logprob: -7.551633358001709
    7. '_l' → logprob: -8.051633834838867
    8. 'line' → logprob: -8.301633834838867
    9. ' =' → logprob: -8.301633834838867
    10. '_text' → logprob: -8.426633834838867

Token 30: ' sys' (ID: 12228)
  Prédit: ' sys'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sys' → logprob: -0.023379994556307793
    2. 'sys' → logprob: -3.7733800411224365
    3. ' input' → logprob: -9.148380279541016
    4. 'input' → logprob: -10.898380279541016
    5. '=sys' → logprob: -12.148380279541016
    6. '	sys' → logprob: -12.523380279541016
    7. '(sys' → logprob: -14.648380279541016
    8. ' lambda' → logprob: -16.148380279541016
    9. '```' → logprob: -16.398380279541016
    10. 'lambda' → logprob: -17.023380279541016

Token 31: '.stdin' (ID: 93480)
  Prédit: '.stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.stdin' → logprob: -0.007151984144002199
    2. '.' → logprob: -5.507152080535889
    3. '.readline' → logprob: -5.882152080535889
    4. '().' → logprob: -8.88215160369873
    5. '.stdout' → logprob: -9.13215160369873
    6. '.input' → logprob: -11.50715160369873
    7. '.std' → logprob: -12.00715160369873
    8. '.read' → logprob: -12.75715160369873
    9. ' .' → logprob: -12.88215160369873
    10. '(stdin' → logprob: -13.00715160369873

Token 32: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.0005611348897218704
    2. '.' → logprob: -7.625561237335205
    3. '.read' → logprob: -9.625560760498047
    4. '.readlines' → logprob: -12.250560760498047
    5. ' readline' → logprob: -13.250560760498047
    6. 'read' → logprob: -15.250560760498047
    7. ' .' → logprob: -15.875560760498047
    8. '.Read' → logprob: -16.375560760498047
    9. '```' → logprob: -17.625560760498047
    10. '_read' → logprob: -17.750560760498047

Token 33: '
' (ID: 198)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.006194456946104765
    2. '()
' → logprob: -5.131194591522217
    3. '().' → logprob: -8.756194114685059
    4. '()

' → logprob: -9.756194114685059
    5. '(' → logprob: -10.881194114685059
    6. '()\' → logprob: -11.006194114685059
    7. '
' → logprob: -12.631194114685059
    8. '(
' → logprob: -13.131194114685059
    9. ' ()' → logprob: -13.381194114685059
    10. '())' → logprob: -13.381194114685059

Token 34: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02721591480076313
    2. '()' → logprob: -3.7772159576416016
    3. ' while' → logprob: -6.777215957641602
    4. '()
' → logprob: -7.277215957641602
    5. '(' → logprob: -7.402215957641602
    6. 'while' → logprob: -7.402215957641602
    7. '    
' → logprob: -7.527215957641602
    8. '
' → logprob: -8.277215957641602
    9. ' ()' → logprob: -10.777215957641602
    10. '	while' → logprob: -10.902215957641602

Token 35: ' while' (ID: 2049)
  Prédit: ' while'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' while' → logprob: -0.4773962199687958
    2. 'while' (adapté à ' while') → logprob: -0.9773962497711182
    3. '   ' → logprob: -5.727396011352539
    4. '	while' → logprob: -10.227396011352539
    5. '```' → logprob: -12.227396011352539
    6. '
' → logprob: -12.352396011352539
    7. ' 
' → logprob: -12.477396011352539
    8. ' ' → logprob: -12.977396011352539
    9. '    
' → logprob: -13.352396011352539
    10. 'While' → logprob: -13.727396011352539

Token 36: ' True' (ID: 6432)
  Prédit: ' True'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' True' → logprob: -0.01916496828198433
    2. 'True' → logprob: -4.0191650390625
    3. '(True' → logprob: -6.8941650390625
    4. ' ' → logprob: -14.6441650390625
    5. '=True' → logprob: -15.0191650390625
    6. ' ' → logprob: -15.8941650390625
    7. '   ' → logprob: -17.1441650390625
    8. '1' → logprob: -17.2691650390625
    9. '  ' → logprob: -19.0191650390625
    10. '
' → logprob: -19.1441650390625

Token 37: ':
' (ID: 734)
  Prédit: '():'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '():' → logprob: -0.6394429802894592
    2. ':' → logprob: -0.7644429802894592
    3. '):' → logprob: -5.3894429206848145
    4. '   ' → logprob: -7.5144429206848145
    5. ' :' → logprob: -7.5144429206848145
    6. ' ():' → logprob: -8.014443397521973
    7. ',' → logprob: -8.389443397521973
    8. '(' → logprob: -8.639443397521973
    9. '():
' → logprob: -8.764443397521973
    10. '       ' → logprob: -9.014443397521973

Token 38: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.032807495445013046
    2. '    ' → logprob: -4.282807350158691
    3. '   ' → logprob: -4.407807350158691
    4. ' ' → logprob: -5.907807350158691
    5. '(' → logprob: -7.657807350158691
    6. '     ' → logprob: -7.657807350158691
    7. '      ' → logprob: -7.782807350158691
    8. '  ' → logprob: -7.782807350158691
    9. '        
' → logprob: -7.907807350158691
    10. ',' → logprob: -8.157807350158691

Token 39: ' n' (ID: 297)
  Prédit: ' line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' line' → logprob: -0.0471830740571022
    2. 'line' → logprob: -3.547183036804199
    3. ' l' → logprob: -5.422183036804199
    4. ' ligne' → logprob: -6.172183036804199
    5. ' n' → logprob: -6.297183036804199
    6. ' data' → logprob: -6.422183036804199
    7. 'l' → logprob: -6.672183036804199
    8. 'x' → logprob: -6.797183036804199
    9. 'n' (adapté à ' n') → logprob: -6.922183036804199
    10. 'data' → logprob: -7.172183036804199

Token 40: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00040362097206525505
    2. ' ,' → logprob: -7.87540340423584
    3. ',s' → logprob: -11.87540340423584
    4. ',m' → logprob: -12.50040340423584
    5. ',n' → logprob: -13.00040340423584
    6. ',v' → logprob: -13.50040340423584
    7. ',k' → logprob: -13.62540340423584
    8. ',c' → logprob: -13.87540340423584
    9. ',d' → logprob: -14.00040340423584
    10. ',int' → logprob: -14.25040340423584

Token 41: ' m' (ID: 284)
  Prédit: ' m'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' m' → logprob: -0.5319194197654724
    2. 'm' → logprob: -0.9069194197654724
    3. 'k' → logprob: -5.406919479370117
    4. ' k' → logprob: -5.656919479370117
    5. ' w' → logprob: -8.781919479370117
    6. ' d' → logprob: -9.031919479370117
    7. ' p' → logprob: -9.531919479370117
    8. 'w' → logprob: -9.656919479370117
    9. 'd' → logprob: -9.656919479370117
    10. ' t' → logprob: -9.781919479370117

Token 42: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0336470827460289
    2. '=' → logprob: -3.408647060394287
    3. ')' → logprob: -14.033647537231445
    4. ' ' → logprob: -15.408647537231445
    5. '=input' → logprob: -15.533647537231445
    6. '=line' → logprob: -16.908647537231445
    7. '    ' → logprob: -17.158647537231445
    8. ',' → logprob: -18.158647537231445
    9. '        ' → logprob: -18.158647537231445
    10. '<|end|>' → logprob: -18.408647537231445

Token 43: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.029769234359264374
    2. 'map' → logprob: -3.5297691822052
    3. ' input' → logprob: -11.654768943786621
    4. ' tuple' → logprob: -12.279768943786621
    5. 'input' → logprob: -13.279768943786621
    6. ' list' → logprob: -13.404768943786621
    7. '	map' → logprob: -14.529768943786621
    8. 'tuple' → logprob: -14.529768943786621
    9. '(map' → logprob: -14.904768943786621
    10. '[' → logprob: -15.029768943786621

Token 44: '(int' (ID: 2742)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.31785404682159424
    2. '(' → logprob: -1.3178540468215942
    3. '(int' → logprob: -5.442853927612305
    4. '(str' → logprob: -8.442853927612305
    5. '(lambda' → logprob: -10.942853927612305
    6. '(in' → logprob: -12.317853927612305
    7. '(
' → logprob: -12.817853927612305
    8. '(eval' → logprob: -13.067853927612305
    9. '(INPUT' → logprob: -13.567853927612305
    10. '(

' → logprob: -13.692853927612305

Token 45: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.23952025175094604
    2. ',input' → logprob: -2.364520311355591
    3. '(' → logprob: -2.739520311355591
    4. ',' → logprob: -2.989520311355591
    5. ')' → logprob: -6.364520072937012
    6. 'input' → logprob: -6.614520072937012
    7. '(sys' → logprob: -7.614520072937012
    8. '=input' → logprob: -8.614520072937012
    9. ' (' → logprob: -9.239520072937012
    10. ' ,' → logprob: -9.739520072937012

Token 46: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.5759403705596924
    2. 'input' → logprob: -0.8259403705596924
    3. '=input' → logprob: -15.075940132141113
    4. '(input' → logprob: -15.325940132141113
    5. ',input' → logprob: -16.07594108581543
    6. ')' → logprob: -16.07594108581543
    7. '[input' → logprob: -16.70094108581543
    8. '	input' → logprob: -16.70094108581543
    9. '<input' → logprob: -17.82594108581543
    10. '_input' → logprob: -18.32594108581543

Token 47: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.00014096579980105162
    2. '()' → logprob: -8.875141143798828
    3. ' ().' → logprob: -14.375141143798828
    4. '()
' → logprob: -15.750141143798828
    5. ')' → logprob: -16.000141143798828
    6. '(' → logprob: -16.125141143798828
    7. '())' → logprob: -17.500141143798828
    8. '   ' → logprob: -17.875141143798828
    9. '().'' → logprob: -18.000141143798828
    10. '().
' → logprob: -18.750141143798828

Token 48: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.38818836212158203
    2. 'strip' → logprob: -1.138188362121582
    3. 'rstrip' → logprob: -6.638188362121582
    4. 'read' → logprob: -12.138188362121582
    5. ' strip' → logprob: -14.638188362121582
    6. ' split' → logprob: -14.888188362121582
    7. '().' → logprob: -14.888188362121582
    8. '(split' → logprob: -15.263188362121582
    9. '```' → logprob: -16.388187408447266
    10. ')' → logprob: -16.513187408447266

Token 49: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.48178014159202576
    2. ')' → logprob: -0.9817801713943481
    3. '))' → logprob: -5.856780052185059
    4. '()' → logprob: -5.981780052185059
    5. '())
' → logprob: -6.606780052185059
    6. '()))' → logprob: -7.106780052185059
    7. ')
' → logprob: -9.731780052185059
    8. '(' → logprob: -11.106780052185059
    9. '()))
' → logprob: -11.856780052185059
    10. '()
' → logprob: -11.981780052185059

Token 50: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.14809034764766693
    2. '<|end|>' → logprob: -2.023090362548828
    3. '
' → logprob: -5.898090362548828
    4. '        
' → logprob: -7.648090362548828
    5. ' ' → logprob: -7.648090362548828
    6. ')' → logprob: -8.023090362548828
    7. '<|end|>' → logprob: -8.148090362548828
    8. '  
' → logprob: -8.523090362548828
    9. '        ' → logprob: -8.773090362548828
    10. ' 
' → logprob: -8.898090362548828

Token 51: ' if' (ID: 538)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.7936981320381165
    2. '<|end|>' → logprob: -1.0436980724334717
    3. ' ' → logprob: -1.9186980724334717
    4. ' if' → logprob: -3.6686980724334717
    5. '        ' → logprob: -4.168698310852051
    6. ' 
' → logprob: -6.168698310852051
    7. 'if' (adapté à ' if') → logprob: -6.293698310852051
    8. '  ' → logprob: -6.918698310852051
    9. '<|end|>' → logprob: -7.168698310852051
    10. ')' → logprob: -7.793698310852051

Token 52: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.0028872599359601736
    2. 'n' → logprob: -5.87788724899292
    3. ' (' → logprob: -9.627887725830078
    4. '(n' → logprob: -11.377887725830078
    5. ' ' → logprob: -12.877887725830078
    6. ' not' → logprob: -13.377887725830078
    7. '	n' → logprob: -14.502887725830078
    8. '(' → logprob: -14.627887725830078
    9. ' ' → logprob: -16.752887725830078
    10. '0' → logprob: -16.752887725830078

Token 53: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.22550557553768158
    2. '==' → logprob: -1.6005055904388428
    3. ' ' → logprob: -9.600505828857422
    4. '=' → logprob: -11.850505828857422
    5. ' =' → logprob: -12.475505828857422
    6. ',' → logprob: -12.600505828857422
    7. ')==' → logprob: -12.975505828857422
    8. '```' → logprob: -12.975505828857422
    9. '<|end|>' → logprob: -13.600505828857422
    10. ' ' → logprob: -13.850505828857422

Token 54: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.005233763717114925
    2. ' ' → logprob: -5.2552337646484375
    3. ' ' → logprob: -16.880233764648438
    4. '  ' → logprob: -18.005233764648438
    5. '۰' → logprob: -18.130233764648438
    6. '<|end|>' → logprob: -18.630233764648438
    7. '   ' → logprob: -19.067733764648438
    8. 'm' → logprob: -19.067733764648438
    9. '```' → logprob: -19.130233764648438
    10. ' and' → logprob: -19.380233764648438

Token 55: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0001584850688232109
    2. ' ' → logprob: -8.750158309936523
    3. '  ' → logprob: -19.125158309936523
    4. '۰' → logprob: -19.250158309936523
    5. '```' → logprob: -20.250158309936523
    6. ' ' → logprob: -20.562658309936523
    7. '   ' → logprob: -20.687658309936523
    8. ' and' → logprob: -20.812658309936523
    9. '    ' → logprob: -20.875158309936523
    10. 'm' → logprob: -20.937658309936523

Token 56: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.009798945859074593
    2. 'and' → logprob: -4.634799003601074
    3. ' ' → logprob: -10.259799003601074
    4. ',' → logprob: -13.384799003601074
    5. '	and' → logprob: -13.384799003601074
    6. '   ' → logprob: -13.509799003601074
    7. '    ' → logprob: -14.009799003601074
    8. ' or' → logprob: -14.384799003601074
    9. ' и' → logprob: -14.759799003601074
    10. '       ' → logprob: -14.884799003601074

Token 57: ' m' (ID: 284)
  Prédit: ' m'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' m' → logprob: -0.023246178403496742
    2. 'm' → logprob: -3.7732462882995605
    3. '	m' → logprob: -14.648245811462402
    4. ' ' → logprob: -15.773245811462402
    5. ' ' → logprob: -18.14824676513672
    6. '    ' → logprob: -18.27324676513672
    7. '   ' → logprob: -18.39824676513672
    8. '0' → logprob: -19.52324676513672
    9. ' м' → logprob: -19.52324676513672
    10. '&m' → logprob: -19.52324676513672

Token 58: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.02333049848675728
    2. '==' → logprob: -4.1483306884765625
    3. ' ' → logprob: -5.1483306884765625
    4. '<|end|>' → logprob: -7.0233306884765625
    5. '0' → logprob: -8.648330688476562
    6. ' =' → logprob: -8.898330688476562
    7. '<|end|>' → logprob: -9.398330688476562
    8. ')' → logprob: -10.398330688476562
    9. '=' → logprob: -10.398330688476562
    10. ' ' → logprob: -10.773330688476562

Token 59: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.1797461211681366
    2. ' ' → logprob: -1.804746150970459
    3. ' ' → logprob: -14.4297456741333
    4. '  ' → logprob: -14.9297456741333
    5. '   ' → logprob: -15.0547456741333
    6. '<|end|>' → logprob: -16.617246627807617
    7. '```' → logprob: -17.117246627807617
    8. '۰' → logprob: -17.554746627807617
    9. '_' → logprob: -18.242246627807617
    10. '<|end|>' → logprob: -18.304746627807617

Token 60: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00023059594968799502
    2. ' ' → logprob: -8.37523078918457
    3. '  ' → logprob: -18.12523078918457
    4. '   ' → logprob: -18.12523078918457
    5. '۰' → logprob: -18.87523078918457
    6. '```' → logprob: -20.37523078918457
    7. ' ' → logprob: -20.56273078918457
    8. '    ' → logprob: -20.68773078918457
    9. '<|end|>' → logprob: -20.75023078918457
    10. '     ' → logprob: -21.06273078918457

Token 61: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00025204161647707224
    2. ':
' → logprob: -8.375251770019531
    3. ':return' → logprob: -11.750251770019531
    4. '       ' → logprob: -12.125251770019531
    5. '           ' → logprob: -12.250251770019531
    6. ' :' → logprob: -13.250251770019531
    7. '):' → logprob: -14.125251770019531
    8. '   ' → logprob: -16.00025177001953
    9. ',' → logprob: -16.12525177001953
    10. '.' → logprob: -16.25025177001953

Token 62: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0019307781476527452
    2. '       ' → logprob: -6.5019307136535645
    3. ':' → logprob: -8.001931190490723
    4. ' break' → logprob: -10.876931190490723
    5. '
' → logprob: -11.001931190490723
    6. '   ' → logprob: -11.251931190490723
    7. '          ' → logprob: -11.626931190490723
    8. ':
' → logprob: -11.876931190490723
    9. '		' → logprob: -12.001931190490723
    10. '               ' → logprob: -12.626931190490723

Token 63: ' break' (ID: 2338)
  Prédit: ' break'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' break' → logprob: -0.4655190110206604
    2. '           ' → logprob: -1.7155189514160156
    3. 'break' (adapté à ' break') → logprob: -1.7155189514160156
    4. 'return' → logprob: -5.090518951416016
    5. ' return' → logprob: -5.215518951416016
    6. '       ' → logprob: -7.340518951416016
    7. '               ' → logprob: -9.090518951416016
    8. '	break' → logprob: -9.590518951416016
    9. '   ' → logprob: -11.340518951416016
    10. '_break' → logprob: -11.715518951416016

Token 64: '

' (ID: 279)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.47223666310310364
    2. '
' → logprob: -1.2222366333007812
    3. '<|end|>' → logprob: -3.2222366333007812
    4. '        
' → logprob: -3.4722366333007812
    5. '\n' → logprob: -6.222236633300781
    6. 'n' → logprob: -6.472236633300781
    7. '<|end|>' → logprob: -6.597236633300781
    8. ')' → logprob: -6.722236633300781
    9. '#' → logprob: -7.097236633300781
    10. '        ' → logprob: -7.222236633300781

Token 65: '       ' (ID: 309)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.02456599473953247
    2. '       ' → logprob: -3.7745659351348877
    3. '        
' → logprob: -7.274566173553467
    4. '<|end|>' → logprob: -7.774566173553467
    5. '```' → logprob: -10.024565696716309
    6. '
' → logprob: -10.274565696716309
    7. 'n' → logprob: -10.524565696716309
    8. '    
' → logprob: -11.024565696716309
    9. '

' → logprob: -11.274565696716309
    10. '' → logprob: -11.524565696716309

Token 66: ' #' (ID: 1069)
  Prédit: 'graph'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'graph' → logprob: -0.6135123372077942
    2. '       ' → logprob: -1.3635122776031494
    3. ' graph' → logprob: -1.7385122776031494
    4. 'dist' → logprob: -4.7385125160217285
    5. '        
' → logprob: -5.4885125160217285
    6. 'g' → logprob: -6.1135125160217285
    7. ' distances' → logprob: -6.3635125160217285
    8. ' edges' → logprob: -6.6135125160217285
    9. 'edges' → logprob: -6.7385125160217285
    10. 'adj' → logprob: -6.9885125160217285

Token 67: ' Construction' (ID: 31452)
  Prédit: ' graph'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' graph' → logprob: -0.6034148335456848
    2. 'graph' → logprob: -0.8534148335456848
    3. '#' → logprob: -5.353415012359619
    4. ' adj' → logprob: -5.353415012359619
    5. '       ' → logprob: -5.478415012359619
    6. ' edges' → logprob: -5.728415012359619
    7. 'g' → logprob: -6.353415012359619
    8. 'edges' → logprob: -6.353415012359619
    9. 'adj' → logprob: -6.353415012359619
    10. ' distances' → logprob: -7.103415012359619

Token 68: ' du' (ID: 1462)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.21429669857025146
    2. ' d' → logprob: -2.964296817779541
    3. '<|end|>' → logprob: -3.089296817779541
    4. 'd' → logprob: -3.714296817779541
    5. ' de' → logprob: -3.839296817779541
    6. ' du' → logprob: -4.089296817779541
    7. ' des' → logprob: -4.089296817779541
    8. ' of' → logprob: -4.714296817779541
    9. 'de' → logprob: -6.214296817779541
    10. '        
' → logprob: -7.214296817779541

Token 69: ' grap' (ID: 60955)
  Prédit: ' grap'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' grap' → logprob: -0.33807724714279175
    2. ' graph' → logprob: -1.4630773067474365
    3. 'gr' → logprob: -3.2130773067474365
    4. 'graph' → logprob: -4.213077068328857
    5. ' graphique' → logprob: -9.338077545166016
    6. '	graph' → logprob: -9.463077545166016
    7. '```' → logprob: -10.338077545166016
    8. ' gr' → logprob: -10.463077545166016
    9. ' grapple' → logprob: -11.088077545166016
    10. '   ' → logprob: -11.713077545166016

Token 70: 'he' (ID: 273)
  Prédit: 'he'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'he' → logprob: -0.20347227156162262
    2. 'h' → logprob: -1.8284722566604614
    3. 'aphe' → logprob: -3.828472375869751
    4. 'phe' → logprob: -7.078472137451172
    5. 'ph' → logprob: -7.578472137451172
    6. 'ah' → logprob: -9.703472137451172
    7. 'hé' → logprob: -9.953472137451172
    8. '   ' → logprob: -10.203472137451172
    9. 'heme' → logprob: -10.578472137451172
    10. 'hep' → logprob: -10.703472137451172

Token 71: ' :' (ID: 712)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.3683975040912628
    2. 'graph' → logprob: -1.6183974742889404
    3. ' graph' → logprob: -2.3683974742889404
    4. '        
' → logprob: -5.6183977127075195
    5. '	graph' → logprob: -5.6183977127075195
    6. '        ' → logprob: -5.9933977127075195
    7. '<|end|>' → logprob: -6.9933977127075195
    8. ' adjacency' → logprob: -7.1183977127075195
    9. '(graph' → logprob: -7.3683977127075195
    10. '{' → logprob: -8.11839771270752

Token 72: ' liste' (ID: 31719)
  Prédit: ' graph'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' graph' → logprob: -0.06002487614750862
    2. 'graph' → logprob: -3.5600249767303467
    3. ' defaultdict' → logprob: -4.060024738311768
    4. ' adjacency' → logprob: -5.310024738311768
    5. ' {}' → logprob: -6.060024738311768
    6. ' {' → logprob: -6.685024738311768
    7. ' adj' → logprob: -6.935024738311768
    8. ' graphs' → logprob: -6.935024738311768
    9. '       ' → logprob: -7.810024738311768
    10. '	graph' → logprob: -7.935024738311768

Token 73: ' d' (ID: 272)
  Prédit: ' des'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' des' → logprob: -1.262892246246338
    2. '<|end|>' → logprob: -2.012892246246338
    3. ' =' → logprob: -2.137892246246338
    4. 'des' → logprob: -2.262892246246338
    5. '[]' → logprob: -2.387892246246338
    6. 'd' → logprob: -2.887892246246338
    7. '_des' → logprob: -3.262892246246338
    8. ' de' → logprob: -3.387892246246338
    9. '=' → logprob: -3.512892246246338
    10. 'adj' → logprob: -3.762892246246338

Token 74: ''ad' (ID: 36162)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 75: 'jac' (ID: 77250)
  Prédit: 'jac'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'jac' → logprob: -0.100294329226017
    2. 'j' → logprob: -2.350294351577759
    3. 'ja' → logprob: -10.60029411315918
    4. '[j' → logprob: -11.10029411315918
    5. 'jec' → logprob: -11.72529411315918
    6. '```' → logprob: -11.72529411315918
    7. '	j' → logprob: -11.85029411315918
    8. '_j' → logprob: -12.85029411315918
    9. ' jac' → logprob: -12.85029411315918
    10. 'jc' → logprob: -12.85029411315918

Token 76: 'ence' (ID: 1082)
  Prédit: 'acency'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'acency' → logprob: -0.7453804612159729
    2. 'ac' → logprob: -0.9953804612159729
    3. 'ence' → logprob: -2.745380401611328
    4. 'ences' → logprob: -2.870380401611328
    5. '```' → logprob: -4.620380401611328
    6. 'escence' → logprob: -4.870380401611328
    7. 'es' → logprob: -5.495380401611328
    8. 'cence' → logprob: -6.120380401611328
    9. 's' → logprob: -6.370380401611328
    10. 'acité' → logprob: -7.120380401611328

Token 77: ' où' (ID: 15113)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.7800776958465576
    2. ' =' → logprob: -0.7800776958465576
    3. '        ' → logprob: -3.7800776958465576
    4. '[' → logprob: -4.655077934265137
    5. 'graph' → logprob: -4.905077934265137
    6. ' defaultdict' → logprob: -5.030077934265137
    7. '=' → logprob: -5.530077934265137
    8. '[]' → logprob: -5.530077934265137
    9. ',' → logprob: -5.530077934265137
    10. ' graph' → logprob: -5.655077934265137

Token 78: ' chaque' (ID: 21194)
  Prédit: ' chaque'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' chaque' → logprob: -0.00853845477104187
    2. ' each' → logprob: -5.008538246154785
    3. ' les' → logprob: -7.133538246154785
    4. 'each' → logprob: -8.008538246154785
    5. ' graph' → logprob: -9.008538246154785
    6. ' edges' → logprob: -9.008538246154785
    7. 'graph' → logprob: -9.383538246154785
    8. 'Chaque' → logprob: -10.008538246154785
    9. ' chacune' → logprob: -10.258538246154785
    10. ' le' → logprob: -10.633538246154785

Token 79: ' noe' (ID: 49921)
  Prédit: ' node'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' node' → logprob: -0.22121110558509827
    2. ' noe' → logprob: -2.9712111949920654
    3. 'élé' → logprob: -3.4712111949920654
    4. ' ' → logprob: -3.4712111949920654
    5. 'node' → logprob: -4.221210956573486
    6. ' élément' → logprob: -4.471210956573486
    7. '[' → logprob: -5.096210956573486
    8. ' n' → logprob: -5.346210956573486
    9. ' sommet' → logprob: -5.471210956573486
    10. '[node' → logprob: -5.471210956573486

Token 80: 'ud' (ID: 527)
  Prédit: 'ud'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ud' → logprob: -5.097437315271236e-05
    2. 'u' → logprob: -10.62505054473877
    3. ' ud' → logprob: -11.37505054473877
    4. 'e' → logprob: -12.25005054473877
    5. 'd' → logprob: -12.37505054473877
    6. '```' → logprob: -14.12505054473877
    7. 'уд' → logprob: -14.37505054473877
    8. '#' → logprob: -14.50005054473877
    9. '       ' → logprob: -14.75005054473877
    10. 'uds' → logprob: -14.75005054473877

Token 81: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.13828909397125244
    2. ' has' → logprob: -2.888288974761963
    3. ' est' → logprob: -3.513288974761963
    4. ' is' → logprob: -4.513288974761963
    5. 'a' → logprob: -4.888288974761963
    6. ' possède' → logprob: -4.888288974761963
    7. ' contient' → logprob: -5.263288974761963
    8. ':' → logprob: -6.138288974761963
    9. ' représente' → logprob: -6.513288974761963
    10. 'has' → logprob: -6.763288974761963

Token 82: ' une' (ID: 2463)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.3235842287540436
    2. ' []' → logprob: -1.3235841989517212
    3. ' une' → logprob: -5.698584079742432
    4. ' un' → logprob: -6.448584079742432
    5. ' des' → logprob: -6.448584079742432
    6. '=[]' → logprob: -6.948584079742432
    7. ' ' → logprob: -7.198584079742432
    8. '    ' → logprob: -7.573584079742432
    9. '[' → logprob: -8.19858455657959
    10. '   ' → logprob: -8.44858455657959

Token 83: ' liste' (ID: 31719)
  Prédit: ' liste'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' liste' → logprob: -0.3227272629737854
    2. 'liste' → logprob: -1.3227272033691406
    3. 'list' → logprob: -5.197727203369141
    4. ' list' → logprob: -5.947727203369141
    5. '[]' → logprob: -6.947727203369141
    6. ' []' → logprob: -9.69772720336914
    7. ' dict' → logprob: -9.69772720336914
    8. ' ' → logprob: -10.44772720336914
    9. ' listes' → logprob: -10.69772720336914
    10. '=[]' → logprob: -10.82272720336914

Token 84: ' de' (ID: 334)
  Prédit: ' d'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' d' → logprob: -0.7332702875137329
    2. ' des' → logprob: -1.358270287513733
    3. '[' → logprob: -2.2332701683044434
    4. '[]' → logprob: -3.1082701683044434
    5. ' de' → logprob: -3.1082701683044434
    6. 'd' → logprob: -3.6082701683044434
    7. '<|end|>' → logprob: -3.9832701683044434
    8. ' of' → logprob: -4.858270168304443
    9. 'des' → logprob: -6.108270168304443
    10. '[(' → logprob: -6.358270168304443

Token 85: ' (' (ID: 350)
  Prédit: ' tuples'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' tuples' → logprob: -0.4918566346168518
    2. ' (' → logprob: -0.9918566346168518
    3. '(t' → logprob: -4.991856575012207
    4. ' voisins' → logprob: -5.116856575012207
    5. 'tu' → logprob: -6.491856575012207
    6. '(p' → logprob: -6.491856575012207
    7. '(vo' → logprob: -7.866856575012207
    8. '(' → logprob: -7.991856575012207
    9. '(adj' → logprob: -8.116856575012207
    10. '(s' → logprob: -8.366856575012207

Token 86: 'vo' (ID: 1190)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.04848403483629227
    2. '<|end|>' → logprob: -4.423483848571777
    3. ')' → logprob: -4.673483848571777
    4. '(' → logprob: -5.173483848571777
    5. ' voisin' → logprob: -5.798483848571777
    6. '(s' → logprob: -5.923483848571777
    7. 'neighbor' → logprob: -6.048483848571777
    8. ' ' → logprob: -6.298483848571777
    9. ' )' → logprob: -6.548483848571777
    10. ' voisins' → logprob: -6.798483848571777

Token 87: 'isin' (ID: 23933)
  Prédit: 'isin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'isin' → logprob: -0.003092631697654724
    2. 'isins' → logprob: -6.1280927658081055
    3. 'is' → logprob: -7.8780927658081055
    4. 'isine' → logprob: -8.378092765808105
    5. 'sin' → logprob: -9.003092765808105
    6. 'izin' → logprob: -10.503092765808105
    7. 'rin' → logprob: -10.628092765808105
    8. 'in' → logprob: -10.628092765808105
    9. 'ix' → logprob: -11.378092765808105
    10. '```' → logprob: -11.503092765808105

Token 88: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -8.113290095934644e-05
    2. ' ,' → logprob: -10.250081062316895
    3. 's' → logprob: -11.375081062316895
    4. '_,' → logprob: -11.625081062316895
    5. '_id' → logprob: -11.750081062316895
    6. '_index' → logprob: -12.625081062316895
    7. ',
' → logprob: -12.875081062316895
    8. ',index' → logprob: -13.250081062316895
    9. ',d' → logprob: -13.625081062316895
    10. ',node' → logprob: -13.875081062316895

Token 89: ' coût' (ID: 73109)
  Prédit: ' poids'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' poids' → logprob: -0.37390410900115967
    2. 'po' → logprob: -1.4989041090011597
    3. ' coût' → logprob: -3.248904228210449
    4. ' cout' → logprob: -4.498904228210449
    5. 'distance' → logprob: -4.623904228210449
    6. 'co' → logprob: -4.873904228210449
    7. ' distance' → logprob: -4.998904228210449
    8. 'cout' → logprob: -5.248904228210449
    9. ' ' → logprob: -6.123904228210449
    10. 'weight' → logprob: -6.373904228210449

Token 90: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00017863049288280308
    2. ',' → logprob: -9.000178337097168
    3. ' )' → logprob: -10.250178337097168
    4. '),' → logprob: -12.250178337097168
    5. 's' → logprob: -12.750178337097168
    6. '_' → logprob: -13.250178337097168
    7. ')...' → logprob: -13.750178337097168
    8. ')d' → logprob: -14.125178337097168
    9. ' ' → logprob: -14.250178337097168
    10. ',)' → logprob: -14.250178337097168

Token 91: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.019988398998975754
    2. '        
' → logprob: -4.894988536834717
    3. '        ' → logprob: -5.769988536834717
    4. ',' → logprob: -6.144988536834717
    5. '<|end|>' → logprob: -6.644988536834717
    6. ' ' → logprob: -7.019988536834717
    7. ')' → logprob: -7.019988536834717
    8. '[]' → logprob: -7.644988536834717
    9. '  
' → logprob: -7.769988536834717
    10. '    ' → logprob: -8.144988059997559

Token 92: ' graph' (ID: 7465)
  Prédit: ' graph'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' graph' → logprob: -0.7664720416069031
    2. '       ' → logprob: -0.8914720416069031
    3. 'graph' (adapté à ' graph') → logprob: -2.141472101211548
    4. '        
' → logprob: -6.266471862792969
    5. '        ' → logprob: -6.391471862792969
    6. '   ' → logprob: -7.266471862792969
    7. '	graph' → logprob: -7.266471862792969
    8. ' 
' → logprob: -8.266471862792969
    9. '    ' → logprob: -8.516471862792969
    10. '```' → logprob: -8.516471862792969

Token 93: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.006720705423504114
    2. '=' → logprob: -5.006720542907715
    3. ' ' → logprob: -12.881720542907715
    4. '[' → logprob: -13.381720542907715
    5. ' =[' → logprob: -15.131720542907715
    6. ']' → logprob: -15.506720542907715
    7. '[]' → logprob: -15.631720542907715
    8. '=[]' → logprob: -15.631720542907715
    9. 's' → logprob: -15.756720542907715
    10. ')' → logprob: -16.38172149658203

Token 94: ' [[]' (ID: 182908)
  Prédit: ' [[]'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' [[]' → logprob: -0.16165193915367126
    2. '[' → logprob: -1.9116519689559937
    3. ' [' → logprob: -6.661652088165283
    4. ' {' → logprob: -9.536651611328125
    5. '{' → logprob: -10.036651611328125
    6. ' defaultdict' → logprob: -11.161651611328125
    7. ' [{}' → logprob: -12.161651611328125
    8. '[]' → logprob: -12.286651611328125
    9. '[n' → logprob: -12.536651611328125
    10. 'default' → logprob: -13.536651611328125

Token 95: ' for' (ID: 395)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.9281521439552307
    2. ' for' → logprob: -1.303152084350586
    3. ',' → logprob: -1.803152084350586
    4. 'for' → logprob: -2.053152084350586
    5. '(n' → logprob: -3.803152084350586
    6. ',n' → logprob: -5.303152084350586
    7. ']' → logprob: -5.803152084350586
    8. ')n' → logprob: -6.053152084350586
    9. '       ' → logprob: -6.178152084350586
    10. ' (' → logprob: -6.678152084350586

Token 96: ' _' (ID: 1175)
  Prédit: ' range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.4859234690666199
    2. '_' → logprob: -1.4859235286712646
    3. 'range' → logprob: -2.2359235286712646
    4. ' _' → logprob: -3.2359235286712646
    5. '(range' → logprob: -4.4859232902526855
    6. '_range' → logprob: -7.1109232902526855
    7. '(' → logprob: -8.985923767089844
    8. ' in' → logprob: -9.485923767089844
    9. '(_' → logprob: -10.735923767089844
    10. ' ' → logprob: -10.860923767089844

Token 97: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0413944311439991
    2. 'range' → logprob: -3.6663944721221924
    3. ' range' → logprob: -4.916394233703613
    4. 'in' → logprob: -5.041394233703613
    5. 'n' → logprob: -7.791394233703613
    6. 'ange' → logprob: -8.041394233703613
    7. '(n' → logprob: -8.541394233703613
    8. '(range' → logprob: -8.666394233703613
    9. ' ' → logprob: -11.041394233703613
    10. 's' → logprob: -11.416394233703613

Token 98: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.048589304089546204
    2. ' range' → logprob: -3.0485892295837402
    3. '(range' → logprob: -13.423589706420898
    4. ')' → logprob: -15.798589706420898
    5. 'rang' → logprob: -16.1735897064209
    6. '	range' → logprob: -16.2985897064209
    7. '```' → logprob: -17.6735897064209
    8. ' ' → logprob: -17.7985897064209
    9. ']' → logprob: -17.7985897064209
    10. 'ran' → logprob: -17.9235897064209

Token 99: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.000158842682139948
    2. '(' → logprob: -8.75015926361084
    3. ' (' → logprob: -15.62515926361084
    4. 'n' → logprob: -16.000158309936523
    5. ')n' → logprob: -16.000158309936523
    6. ')' → logprob: -18.125158309936523
    7. ')(' → logprob: -18.625158309936523
    8. '(
' → logprob: -18.875158309936523
    9. '](' → logprob: -18.875158309936523
    10. '(nn' → logprob: -19.625158309936523

Token 100: '+' (ID: 10)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')]' → logprob: -1.9146995327901095e-05
    2. ' )' → logprob: -11.625019073486328
    3. ')' → logprob: -12.125019073486328
    4. ')]
' → logprob: -13.250019073486328
    5. '       ' → logprob: -14.250019073486328
    6. ']' → logprob: -15.000019073486328
    7. '+' → logprob: -15.000019073486328
    8. '   ' → logprob: -15.250019073486328
    9. ')]
' → logprob: -15.250019073486328
    10. ')])' → logprob: -15.250019073486328

Token 101: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0011729635298252106
    2. ' ' → logprob: -6.75117301940918
    3. '2' → logprob: -13.62617301940918
    4. ')' → logprob: -14.62617301940918
    5. 'm' → logprob: -15.00117301940918
    6. '0' → logprob: -15.75117301940918
    7. ' )' → logprob: -15.75117301940918
    8. '   ' → logprob: -16.12617301940918
    9. ' m' → logprob: -16.62617301940918
    10. '  ' → logprob: -16.75117301940918

Token 102: ')]
' (ID: 11587)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.06210000067949295
    2. ')' → logprob: -2.8120999336242676
    3. ']' → logprob: -9.062100410461426
    4. ' )' → logprob: -11.437100410461426
    5. ')])' → logprob: -13.312100410461426
    6. ')
' → logprob: -13.937100410461426
    7. '       ' → logprob: -14.312100410461426
    8. '   ' → logprob: -14.812100410461426
    9. ')],' → logprob: -14.937100410461426
    10. ' ' → logprob: -15.312100410461426

Token 103: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.33030641078948975
    2. '
' → logprob: -1.9553064107894897
    3. '        
' → logprob: -3.4553065299987793
    4. ' ' → logprob: -3.5803065299987793
    5. '<|end|>' → logprob: -3.5803065299987793
    6. '   ' → logprob: -4.205306529998779
    7. ' 
' → logprob: -4.580306529998779
    8. '    
' → logprob: -5.205306529998779
    9. '' → logprob: -5.330306529998779
    10. '	' → logprob: -5.955306529998779

Token 104: ' for' (ID: 395)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.4879414141178131
    2. '
' → logprob: -1.3629413843154907
    3. '        
' → logprob: -3.6129415035247803
    4. '   ' → logprob: -3.8629415035247803
    5. ' 
' → logprob: -3.9879415035247803
    6. 'for' (adapté à ' for') → logprob: -3.9879415035247803
    7. ' ' → logprob: -4.612941265106201
    8. ' for' → logprob: -4.612941265106201
    9. '    
' → logprob: -4.612941265106201
    10. '' → logprob: -5.487941265106201

Token 105: ' _' (ID: 1175)
  Prédit: ' _'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' _' → logprob: -0.0008065330912359059
    2. '_' → logprob: -7.1258063316345215
    3. ' ' → logprob: -14.12580680847168
    4. ' range' → logprob: -14.25080680847168
    5. ' ' → logprob: -14.62580680847168
    6. ' ‌' → logprob: -16.37580680847168
    7. ' i' → logprob: -16.50080680847168
    8. ' _
' → logprob: -18.37580680847168
    9. 'range' → logprob: -19.37580680847168
    10. '_range' → logprob: -19.75080680847168

Token 106: ' in' (ID: 306)
  Prédit: 'in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'in' → logprob: -0.04446224495768547
    2. ' in' → logprob: -3.169462203979492
    3. 'range' → logprob: -6.794462203979492
    4. '_' → logprob: -8.294462203979492
    5. ' ' → logprob: -10.169462203979492
    6. 'import' → logprob: -11.669462203979492
    7. 'm' → logprob: -11.794462203979492
    8. 'n' → logprob: -12.169462203979492
    9. ' range' → logprob: -12.169462203979492
    10. '1' → logprob: -12.919462203979492

Token 107: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.061973731964826584
    2. ' range' → logprob: -2.811973810195923
    3. '(range' → logprob: -13.686973571777344
    4. '	range' → logprob: -13.811973571777344
    5. 'ange' → logprob: -14.186973571777344
    6. ' ' → logprob: -14.186973571777344
    7. 'rang' → logprob: -14.186973571777344
    8. '```' → logprob: -14.811973571777344
    9. 'r' → logprob: -14.936973571777344
    10. 'ran' → logprob: -15.936973571777344

Token 108: '(m' (ID: 2145)
  Prédit: '(m'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(m' → logprob: -0.015422745607793331
    2. 'm' → logprob: -4.265422821044922
    3. ' m' → logprob: -6.890422821044922
    4. '(' → logprob: -8.765422821044922
    5. ' (' → logprob: -9.390422821044922
    6. '	m' → logprob: -13.640422821044922
    7. ')m' → logprob: -16.515422821044922
    8. '   ' → logprob: -16.765422821044922
    9. ',m' → logprob: -17.515422821044922
    10. '(M' → logprob: -17.890422821044922

Token 109: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0561324879527092
    2. ' ):' → logprob: -2.9311325550079346
    3. ')' → logprob: -7.0561323165893555
    4. '):
' → logprob: -8.681132316589355
    5. ' )' → logprob: -9.056132316589355
    6. ',' → logprob: -9.681132316589355
    7. ' ):
' → logprob: -11.306132316589355
    8. ':' → logprob: -11.806132316589355
    9. ' ,' → logprob: -12.181132316589355
    10. ' ' → logprob: -13.056132316589355

Token 110: '           ' (ID: 352)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5848983526229858
    2. '       ' → logprob: -1.3348983526229858
    3. '    ' → logprob: -3.2098984718322754
    4. '           ' → logprob: -3.2098984718322754
    5. '   ' → logprob: -3.4598984718322754
    6. '        ' → logprob: -4.334898471832275
    7. '  ' → logprob: -4.334898471832275
    8. '<|end|>' → logprob: -4.834898471832275
    9. ' ' → logprob: -5.334898471832275
    10. ' 
' → logprob: -5.459898471832275

Token 111: ' a' (ID: 261)
  Prédit: ' u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' u' → logprob: -0.4746834933757782
    2. 'u' → logprob: -0.9746835231781006
    3. 'a' (adapté à ' a') → logprob: -8.34968376159668
    4. '   ' → logprob: -8.84968376159668
    5. ' line' → logprob: -9.47468376159668
    6. ' a' → logprob: -9.97468376159668
    7. '    ' → logprob: -11.34968376159668
    8. 'line' → logprob: -11.59968376159668
    9. ' ' → logprob: -11.72468376159668
    10. ' 
' → logprob: -11.72468376159668

Token 112: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.008971909992396832
    2. ' ,' → logprob: -4.758971691131592
    3. ' ' → logprob: -8.75897216796875
    4. ',b' → logprob: -9.50897216796875
    5. '<|end|>' → logprob: -9.63397216796875
    6. ',a' → logprob: -10.13397216796875
    7. 'a' → logprob: -11.63397216796875
    8. '  ' → logprob: -13.00897216796875
    9. ' a' → logprob: -13.38397216796875
    10. ' b' → logprob: -13.50897216796875

Token 113: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.3868723213672638
    2. ' b' → logprob: -1.1368722915649414
    3. ' ' → logprob: -14.136872291564941
    4. '<|end|>' → logprob: -14.886872291564941
    5. ',' → logprob: -16.886873245239258
    6. 's' → logprob: -17.636873245239258
    7. 'c' → logprob: -17.636873245239258
    8. 't' → logprob: -17.636873245239258
    9. 'v' → logprob: -17.761873245239258
    10. '	b' → logprob: -17.886873245239258

Token 114: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0182020366191864
    2. ' ,' → logprob: -4.01820182800293
    3. '=' → logprob: -10.76820182800293
    4. '<|end|>' → logprob: -11.26820182800293
    5. ' =' → logprob: -11.76820182800293
    6. ' ' → logprob: -12.26820182800293
    7. ',b' → logprob: -14.01820182800293
    8. ',c' → logprob: -14.26820182800293
    9. '‌,' → logprob: -14.39320182800293
    10. ',a' → logprob: -14.51820182800293

Token 115: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.43171226978302
    2. ' c' → logprob: -1.05671226978302
    3. 'cost' → logprob: -6.8067121505737305
    4. 'w' → logprob: -7.1817121505737305
    5. ' w' → logprob: -7.4317121505737305
    6. ' cost' → logprob: -9.05671215057373
    7. 'p' → logprob: -9.18171215057373
    8. ' p' → logprob: -9.43171215057373
    9. ' ' → logprob: -9.68171215057373
    10. ' t' → logprob: -9.80671215057373

Token 116: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.20141655206680298
    2. '=' → logprob: -1.7014164924621582
    3. ',' → logprob: -13.451416969299316
    4. ')' → logprob: -14.076416969299316
    5. ' =
' → logprob: -14.576416969299316
    6. ' ' → logprob: -14.576416969299316
    7. '＝' → logprob: -16.951416015625
    8. '=int' → logprob: -17.201416015625
    9. '    ' → logprob: -17.451416015625
    10. '=
' → logprob: -17.451416015625

Token 117: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.0002614550176076591
    2. 'map' → logprob: -8.250261306762695
    3. '	map' → logprob: -15.625261306762695
    4. ' ' → logprob: -17.250261306762695
    5. '    ' → logprob: -18.375261306762695
    6. ' ' → logprob: -19.250261306762695
    7. ' mapa' → logprob: -19.500261306762695
    8. '(map' → logprob: -20.500261306762695
    9. '.map' → logprob: -20.500261306762695
    10. ' list' → logprob: -21.125261306762695

Token 118: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.00016706773021724075
    2. '(' → logprob: -8.750166893005371
    3. '<int' → logprob: -12.750166893005371
    4. '(in' → logprob: -12.875166893005371
    5. '[int' → logprob: -14.125166893005371
    6. 'int' → logprob: -14.250166893005371
    7. '=int' → logprob: -14.500166893005371
    8. ']int' → logprob: -15.125166893005371
    9. ',int' → logprob: -15.500166893005371
    10. ' (' → logprob: -15.625166893005371

Token 119: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.05122440680861473
    2. ',input' → logprob: -3.55122447013855
    3. '(input' → logprob: -4.051224231719971
    4. '(' → logprob: -5.801224231719971
    5. ')' → logprob: -8.051224708557129
    6. ' ,' → logprob: -8.926224708557129
    7. '(sys' → logprob: -8.926224708557129
    8. ')(' → logprob: -9.676224708557129
    9. ' (' → logprob: -9.801224708557129
    10. 'input' → logprob: -10.676224708557129

Token 120: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.07888989895582199
    2. ' input' → logprob: -2.578889846801758
    3. '(input' → logprob: -16.328889846801758
    4. 'sys' → logprob: -17.703889846801758
    5. '=input' → logprob: -18.328889846801758
    6. '	input' → logprob: -18.578889846801758
    7. ',input' → logprob: -18.828889846801758
    8. ')' → logprob: -19.078889846801758
    9. '_input' → logprob: -19.828889846801758
    10. ' sys' → logprob: -20.453889846801758

Token 121: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.00011152983643114567
    2. '()' → logprob: -9.12511157989502
    3. ')' → logprob: -13.50011157989502
    4. ' ().' → logprob: -14.37511157989502
    5. '(' → logprob: -14.87511157989502
    6. '.' → logprob: -15.75011157989502
    7. '()
' → logprob: -17.250110626220703
    8. '   ' → logprob: -17.375110626220703
    9. '.readline' → logprob: -17.500110626220703
    10. '().__' → logprob: -17.625110626220703

Token 122: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -1.3856492842023727e-06
    2. 'strip' → logprob: -14.000000953674316
    3. ' split' → logprob: -14.875000953674316
    4. '(split' → logprob: -16.125001907348633
    5. 'rstrip' → logprob: -17.750001907348633
    6. ')' → logprob: -17.875001907348633
    7. '.split' → logprob: -19.625001907348633
    8. 'spl' → logprob: -19.750001907348633
    9. 'plit' → logprob: -20.000001907348633
    10. ' ' → logprob: -20.625001907348633

Token 123: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.005010074470192194
    2. '()' → logprob: -5.75501012802124
    3. '())' → logprob: -6.38001012802124
    4. ')
' → logprob: -9.005009651184082
    5. '())
' → logprob: -12.630009651184082
    6. ' )' → logprob: -12.630009651184082
    7. '(' → logprob: -13.005009651184082
    8. '))' → logprob: -14.005009651184082
    9. '()
' → logprob: -14.005009651184082
    10. ')`' → logprob: -14.005009651184082

Token 124: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.03221459314227104
    2. '<|end|>' → logprob: -4.532214641571045
    3. '            
' → logprob: -4.782214641571045
    4. '
' → logprob: -5.282214641571045
    5. ' 
' → logprob: -5.532214641571045
    6. ')' → logprob: -6.657214641571045
    7. '       ' → logprob: -7.532214641571045
    8. '  
' → logprob: -8.032214164733887
    9. '<|end|>' → logprob: -8.157214164733887
    10. '               ' → logprob: -8.907214164733887

Token 125: ' graph' (ID: 7465)
  Prédit: ' graph'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' graph' → logprob: -0.38712167739868164
    2. 'graph' (adapté à ' graph') → logprob: -1.2621216773986816
    3. '           ' → logprob: -4.637121677398682
    4. ' 
' → logprob: -4.637121677398682
    5. '	graph' → logprob: -5.262121677398682
    6. ' ' → logprob: -5.637121677398682
    7. '       ' → logprob: -6.012121677398682
    8. '<|end|>' → logprob: -6.637121677398682
    9. '(graph' → logprob: -6.762121677398682
    10. '            
' → logprob: -7.012121677398682

Token 126: '[a' (ID: 32035)
  Prédit: '[a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[a' → logprob: -3.7697225252486533e-06
    2. '[' → logprob: -12.750003814697266
    3. 'a' → logprob: -15.125003814697266
    4. ' [' → logprob: -15.250003814697266
    5. '[b' → logprob: -15.500003814697266
    6. ')[' → logprob: -19.250003814697266
    7. '```' → logprob: -19.375003814697266
    8. '[
' → logprob: -19.500003814697266
    9. '[A' → logprob: -19.500003814697266
    10. '[i' → logprob: -20.125003814697266

Token 127: '].' (ID: 1651)
  Prédit: '].'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '].' → logprob: -0.029156818985939026
    2. '.append' → logprob: -4.279156684875488
    3. ').' → logprob: -4.404156684875488
    4. '.' → logprob: -6.279156684875488
    5. ',' → logprob: -8.529156684875488
    6. '[' → logprob: -8.779156684875488
    7. '[a' → logprob: -9.029156684875488
    8. ']' → logprob: -9.654156684875488
    9. ' ].' → logprob: -9.654156684875488
    10. '.app' → logprob: -10.404156684875488

Token 128: 'append' (ID: 9132)
  Prédit: 'append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'append' → logprob: -5.512236498361744e-07
    2. ' append' → logprob: -15.000000953674316
    3. 'push' → logprob: -16.375
    4. '.append' → logprob: -17.875
    5. 'app' → logprob: -18.125
    6. 'appen' → logprob: -18.75
    7. '	append' → logprob: -19.875
    8. 'add' → logprob: -20.375
    9. 'Append' → logprob: -21.0
    10. '```' → logprob: -21.5

Token 129: '((' (ID: 2054)
  Prédit: '(('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '((' → logprob: -0.03170289844274521
    2. '(' → logprob: -3.781702995300293
    3. '(b' → logprob: -4.781702995300293
    4. ' (' → logprob: -10.281702995300293
    5. '(
' → logprob: -12.531702995300293
    6. ' ((' → logprob: -14.156702995300293
    7. '(a' → logprob: -14.531702995300293
    8. '(B' → logprob: -14.781702995300293
    9. ')' → logprob: -16.281702041625977
    10. '(c' → logprob: -16.531702041625977

Token 130: 'b' (ID: 65)
  Prédit: 'b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.00020354038861114532
    2. ' b' → logprob: -8.500203132629395
    3. ')b' → logprob: -19.12520408630371
    4. '	b' → logprob: -20.50020408630371
    5. ' ' → logprob: -21.62520408630371
    6. ',' → logprob: -21.87520408630371
    7. ',b' → logprob: -22.25020408630371
    8. ')' → logprob: -22.87520408630371
    9. '   ' → logprob: -23.12520408630371
    10. '_b' → logprob: -23.25020408630371

Token 131: ',c' (ID: 22261)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -8.542423165636137e-05
    2. ' ,' → logprob: -9.875085830688477
    3. ',c' → logprob: -11.000085830688477
    4. '<|end|>' → logprob: -11.250085830688477
    5. ',
' → logprob: -13.000085830688477
    6. '‌,' → logprob: -14.250085830688477
    7. ',

' → logprob: -15.125085830688477
    8. '```' → logprob: -15.625085830688477
    9. 'c' → logprob: -16.000085830688477
    10. ')' → logprob: -16.375085830688477

Token 132: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0018311807652935386
    2. ')' → logprob: -6.8768310546875
    3. ',' → logprob: -7.2518310546875
    4. ' ))' → logprob: -9.7518310546875
    5. '))
' → logprob: -10.7518310546875
    6. '),' → logprob: -12.1268310546875
    7. ')))' → logprob: -13.6268310546875
    8. '));' → logprob: -13.7518310546875
    9. ')),' → logprob: -14.3768310546875
    10. ' )' → logprob: -15.2518310546875

Token 133: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.049673616886138916
    2. ')' → logprob: -3.299673557281494
    3. '<|end|>' → logprob: -4.549673557281494
    4. '       ' → logprob: -8.174674034118652
    5. ' )' → logprob: -9.049674034118652
    6. ' ' → logprob: -9.299674034118652
    7. '          ' → logprob: -9.299674034118652
    8. '   ' → logprob: -9.674674034118652
    9. ',' → logprob: -9.674674034118652
    10. '
' → logprob: -10.174674034118652

Token 134: ' graph' (ID: 7465)
  Prédit: 'graph'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'graph' (adapté à ' graph') → logprob: -0.31423407793045044
    2. ' graph' → logprob: -1.3142340183258057
    3. '	graph' → logprob: -7.439234256744385
    4. '           ' → logprob: -8.689233779907227
    5. '(graph' → logprob: -9.689233779907227
    6. '<|end|>' → logprob: -10.064233779907227
    7. ')' → logprob: -10.064233779907227
    8. ' ' → logprob: -10.939233779907227
    9. '       ' → logprob: -11.439233779907227
    10. '   ' → logprob: -11.564233779907227

Token 135: '[b' (ID: 40800)
  Prédit: '[b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[b' → logprob: -0.0001305950863752514
    2. '[a' → logprob: -9.000130653381348
    3. '[' → logprob: -12.375130653381348
    4. 'b' → logprob: -13.000130653381348
    5. '[B' → logprob: -15.125130653381348
    6. ')[' → logprob: -16.50012969970703
    7. '[c' → logprob: -16.62512969970703
    8. ' [' → logprob: -17.00012969970703
    9. '[s' → logprob: -17.62512969970703
    10. '][' → logprob: -17.75012969970703

Token 136: '].' (ID: 1651)
  Prédit: ').'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ').' → logprob: -0.04904069006443024
    2. ',' → logprob: -3.1740407943725586
    3. '.append' → logprob: -5.799040794372559
    4. '].' → logprob: -6.674040794372559
    5. ')' → logprob: -7.174040794372559
    6. ',c' → logprob: -7.299040794372559
    7. '.' → logprob: -9.174040794372559
    8. '           ' → logprob: -9.799040794372559
    9. ',
' → logprob: -10.924040794372559
    10. ' ).' → logprob: -11.174040794372559

Token 137: 'append' (ID: 9132)
  Prédit: 'append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'append' → logprob: -3.128163257315464e-07
    2. 'appen' → logprob: -16.125
    3. '.append' → logprob: -16.25
    4. ' append' → logprob: -16.375
    5. 'app' → logprob: -18.125
    6. '	append' → logprob: -18.375
    7. 'prepend' → logprob: -21.125
    8. 'Append' → logprob: -21.5
    9. 'add' → logprob: -21.625
    10. '_append' → logprob: -21.75

Token 138: '((' (ID: 2054)
  Prédit: '(('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '((' → logprob: -2.45848218582978e-06
    2. '(a' → logprob: -14.25000286102295
    3. ' ((' → logprob: -14.25000286102295
    4. '(' → logprob: -14.50000286102295
    5. '(b' → logprob: -14.62500286102295
    6. ' (' → logprob: -16.125001907348633
    7. '(
' → logprob: -16.375001907348633
    8. ')((' → logprob: -19.250001907348633
    9. ' ' → logprob: -19.500001907348633
    10. ',' → logprob: -20.000001907348633

Token 139: 'a' (ID: 64)
  Prédit: 'a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.0034861546009778976
    2. '(a' → logprob: -5.878486156463623
    3. ' a' → logprob: -8.378485679626465
    4. ',a' → logprob: -8.878485679626465
    5. ' (' → logprob: -9.003485679626465
    6. 'b' → logprob: -9.503485679626465
    7. 'c' → logprob: -9.503485679626465
    8. ',' → logprob: -11.253485679626465
    9. '(' → logprob: -12.253485679626465
    10. '(
' → logprob: -12.503485679626465

Token 140: ',c' (ID: 22261)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.69352787733078
    2. ',c' → logprob: -0.69352787733078
    3. ' ,' → logprob: -7.943527698516846
    4. ',
' → logprob: -10.943528175354004
    5. ',

' → logprob: -12.818528175354004
    6. ')' → logprob: -14.068528175354004
    7. ',)' → logprob: -14.068528175354004
    8. ',b' → logprob: -14.818528175354004
    9. '),' → logprob: -15.193528175354004
    10. ',int' → logprob: -15.318528175354004

Token 141: '))

' (ID: 9746)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.026395857334136963
    2. ')' → logprob: -3.651395797729492
    3. '))
' → logprob: -9.401395797729492
    4. ')))' → logprob: -12.276395797729492
    5. ' ))' → logprob: -12.526395797729492
    6. ')
' → logprob: -13.026395797729492
    7. ' )' → logprob: -14.276395797729492
    8. '),' → logprob: -15.026395797729492
    9. '));' → logprob: -15.276395797729492
    10. ')}' → logprob: -15.401395797729492

Token 142: '       ' (ID: 309)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.0024447389878332615
    2. '       ' → logprob: -6.252444744110107
    3. '        
' → logprob: -8.25244426727295
    4. '

' → logprob: -9.12744426727295
    5. '
' → logprob: -9.50244426727295
    6. '   ' → logprob: -10.75244426727295
    7. '    
' → logprob: -11.00244426727295
    8. '```' → logprob: -11.75244426727295
    9. '<|end|>' → logprob: -11.87744426727295
    10. ' 
' → logprob: -12.50244426727295

Token 143: ' #' (ID: 1069)
  Prédit: 'dist'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dist' → logprob: -0.015773439779877663
    2. 'distance' → logprob: -4.890773296356201
    3. '       ' → logprob: -5.515773296356201
    4. 'start' → logprob: -6.640773296356201
    5. '#' (adapté à ' #') → logprob: -6.890773296356201
    6. ' dist' → logprob: -7.140773296356201
    7. '        
' → logprob: -8.39077377319336
    8. 'd' → logprob: -8.64077377319336
    9. 'import' → logprob: -9.14077377319336
    10. 'q' → logprob: -9.76577377319336

Token 144: ' On' (ID: 2160)
  Prédit: 'dist'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dist' → logprob: -0.11102011799812317
    2. '#' → logprob: -3.236020088195801
    3. ' dist' → logprob: -3.236020088195801
    4. 'distance' → logprob: -3.986020088195801
    5. ' distances' → logprob: -6.361020088195801
    6. 'def' → logprob: -6.486020088195801
    7. 'start' → logprob: -6.861020088195801
    8. 'd' → logprob: -6.986020088195801
    9. ' #' → logprob: -7.111020088195801
    10. ' distance' → logprob: -8.1110200881958

Token 145: ' va' (ID: 3423)
  Prédit: ' souhaite'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' souhaite' → logprob: -0.8507632613182068
    2. ' continue' → logprob: -1.8507633209228516
    3. '       ' → logprob: -2.6007633209228516
    4. ' veut' → logprob: -2.7257633209228516
    5. 'distance' → logprob: -3.1007633209228516
    6. 'continue' → logprob: -3.3507633209228516
    7. 'def' → logprob: -3.3507633209228516
    8. '#' → logprob: -4.100763320922852
    9. 'dist' → logprob: -4.475763320922852
    10. ' distance' → logprob: -4.725763320922852

Token 146: ' utiliser' (ID: 43227)
  Prédit: ' utiliser'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' utiliser' → logprob: -0.14547184109687805
    2. ' continuer' → logprob: -3.0204718112945557
    3. ' calcul' → logprob: -3.3954718112945557
    4. ' trouver' → logprob: -4.520472049713135
    5. ' chercher' → logprob: -4.770472049713135
    6. 'contin' → logprob: -5.020472049713135
    7. 'util' → logprob: -5.520472049713135
    8. ' implement' → logprob: -5.770472049713135
    9. 'calcul' → logprob: -5.770472049713135
    10. ' impl' → logprob: -6.020472049713135

Token 147: ' un' (ID: 537)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.23319227993488312
    2. 'heap' → logprob: -2.358192205429077
    3. 'D' → logprob: -2.733192205429077
    4. 'une' → logprob: -4.233192443847656
    5. ' D' → logprob: -4.733192443847656
    6. 'la' → logprob: -5.108192443847656
    7. ' une' → logprob: -5.358192443847656
    8. 'a' → logprob: -5.733192443847656
    9. '```' → logprob: -5.858192443847656
    10. 'le' → logprob: -6.108192443847656

Token 148: ' D' (ID: 415)
  Prédit: ' heap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' heap' → logprob: -0.4349827766418457
    2. 'heap' → logprob: -1.3099827766418457
    3. ' d' → logprob: -3.3099827766418457
    4. 'd' → logprob: -3.9349827766418457
    5. '   ' → logprob: -5.309982776641846
    6. ' D' → logprob: -5.434982776641846
    7. 'import' → logprob: -5.934982776641846
    8. ' ' → logprob: -6.684982776641846
    9. 'distance' → logprob: -6.684982776641846
    10. 'priority' → logprob: -6.684982776641846

Token 149: 'ijkstra' (ID: 124290)
  Prédit: 'ijkstra'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ijkstra' → logprob: -0.008035985752940178
    2. 'ijk' → logprob: -5.258036136627197
    3. 'ij' → logprob: -6.758036136627197
    4. '   ' → logprob: -6.758036136627197
    5. 'jik' → logprob: -8.008035659790039
    6. '```' → logprob: -9.508035659790039
    7. '       ' → logprob: -11.133035659790039
    8. 'ijks' → logprob: -11.633035659790039
    9. 'i' → logprob: -12.008035659790039
    10. '  ' → logprob: -12.508035659790039

Token 150: ' mod' (ID: 1812)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.02448142133653164
    2. '(n' → logprob: -3.7744815349578857
    3. ':' → logprob: -8.399481773376465
    4. ',' → logprob: -8.899481773376465
    5. '   ' → logprob: -9.149481773376465
    6. ' for' → logprob: -9.399481773376465
    7. '(
' → logprob: -9.399481773376465
    8. 'def' → logprob: -9.399481773376465
    9. 'for' → logprob: -9.649481773376465
    10. ' (' → logprob: -9.899481773376465

Token 151: 'ifié' (ID: 49927)
  Prédit: 'ifié'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ifié' → logprob: -0.004685614723712206
    2. 'ifi' → logprob: -6.754685401916504
    3. 'if' → logprob: -6.879685401916504
    4. 'ified' → logprob: -7.004685401916504
    5. 'ifiée' → logprob: -7.129685401916504
    6. 'ifie' → logprob: -8.629685401916504
    7. 'ifiés' → logprob: -8.629685401916504
    8. 'él' → logprob: -9.004685401916504
    9. 'ify' → logprob: -9.504685401916504
    10. '(' → logprob: -10.004685401916504

Token 152: ' avec' (ID: 3937)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.7437092065811157
    2. '   ' → logprob: -1.8687092065811157
    3. '       ' → logprob: -1.9937092065811157
    4. ',' → logprob: -2.243709087371826
    5. '(
' → logprob: -3.743709087371826
    6. ':' → logprob: -3.743709087371826
    7. '()' → logprob: -4.243709087371826
    8. ' ' → logprob: -4.868709087371826
    9. 'def' → logprob: -5.118709087371826
    10. '    ' → logprob: -5.243709087371826

Token 153: ' un' (ID: 537)
  Prédit: ' un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -1.3692774772644043
    2. ' une' → logprob: -1.4942774772644043
    3. 'heap' → logprob: -1.4942774772644043
    4. ' heap' → logprob: -1.7442774772644043
    5. 'un' → logprob: -2.8692774772644043
    6. 'une' → logprob: -4.619277477264404
    7. 'prior' → logprob: -4.619277477264404
    8. 'a' → logprob: -5.119277477264404
    9. ' a' → logprob: -5.244277477264404
    10. 'le' → logprob: -5.994277477264404

Token 154: ' état' (ID: 59181)
  Prédit: ' heap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' heap' → logprob: -1.1973392963409424
    2. 'heap' → logprob: -1.1973392963409424
    3. ' état' → logprob: -1.4473392963409424
    4. 'ét' → logprob: -3.3223392963409424
    5. 'etat' → logprob: -3.5723392963409424
    6. 'import' → logprob: -4.447339057922363
    7. 'tas' → logprob: -4.697339057922363
    8. ''état' → logprob: -4.697339057922363
    9. ' tas' → logprob: -4.947339057922363
    10. 'ensemble' → logprob: -4.947339057922363

Token 155: ' supplémentaire' (ID: 111252)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6317948698997498
    2. ' (' → logprob: -1.7567949295043945
    3. '(' → logprob: -2.5067949295043945
    4. '    ' → logprob: -2.7567949295043945
    5. '[' → logprob: -3.1317949295043945
    6. ',' → logprob: -3.7567949295043945
    7. '<|end|>' → logprob: -4.1317949295043945
    8. '  ' → logprob: -4.6317949295043945
    9. '_' → logprob: -4.7567949295043945
    10. ' ,' → logprob: -4.8817949295043945

Token 156: ' indiqu' (ID: 100773)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.4393252432346344
    2. ' 
' → logprob: -2.3143253326416016
    3. '    ' → logprob: -2.8143253326416016
    4. '       ' → logprob: -3.3143253326416016
    5. '        
' → logprob: -3.4393253326416016
    6. ',' → logprob: -3.8143253326416016
    7. '   ' → logprob: -4.439325332641602
    8. '<|end|>' → logprob: -4.564325332641602
    9. '  
' → logprob: -4.689325332641602
    10. '        ' → logprob: -4.689325332641602

Token 157: 'ant' (ID: 493)
  Prédit: 'ant'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ant' → logprob: -0.04944876581430435
    2. 'e' → logprob: -3.1744487285614014
    3. 'er' → logprob: -5.6744489669799805
    4. 'ent' → logprob: -6.1744489669799805
    5. '   ' → logprob: -8.29944896697998
    6. 'eur' → logprob: -9.17444896697998
    7. '#' → logprob: -9.54944896697998
    8. 'u' → logprob: -9.92444896697998
    9. 'a' → logprob: -9.92444896697998
    10. ' ' → logprob: -10.29944896697998

Token 158: ' si' (ID: 1784)
  Prédit: 'le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'le' → logprob: -0.7706935405731201
    2. ' le' → logprob: -0.8956935405731201
    3. ' si' → logprob: -3.27069354057312
    4. ' if' → logprob: -3.39569354057312
    5. 'si' → logprob: -4.395693778991699
    6. ' la' → logprob: -4.520693778991699
    7. 'la' → logprob: -4.645693778991699
    8. ' whether' → logprob: -4.770693778991699
    9. 'l' → logprob: -5.020693778991699
    10. ' combien' → logprob: -5.895693778991699

Token 159: ' la' (ID: 557)
  Prédit: 'le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'le' → logprob: -1.0700546503067017
    2. ' on' → logprob: -1.3200546503067017
    3. ' le' → logprob: -1.5700546503067017
    4. 'on' → logprob: -2.445054531097412
    5. ' la' → logprob: -3.695054531097412
    6. 'l' → logprob: -3.945054531097412
    7. ' l' → logprob: -4.195054531097412
    8. 'la' → logprob: -4.445054531097412
    9. ' we' → logprob: -5.195054531097412
    10. 'un' → logprob: -5.695054531097412

Token 160: ' réduction' (ID: 89072)
  Prédit: 'distance'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'distance' → logprob: -2.404902458190918
    2. 'route' → logprob: -2.529902458190918
    3. 'clé' → logprob: -2.779902458190918
    4. ' clé' → logprob: -2.904902458190918
    5. 'vo' → logprob: -3.154902458190918
    6. 'pile' → logprob: -3.529902458190918
    7. 're' → logprob: -3.529902458190918
    8. 'k' → logprob: -3.529902458190918
    9. 'True' → logprob: -3.654902458190918
    10. ' True' → logprob: -3.654902458190918

Token 161: '
' (ID: 198)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.07261825352907181
    2. ' est' → logprob: -3.822618246078491
    3. 'a' → logprob: -4.07261848449707
    4. ' ' → logprob: -4.44761848449707
    5. ' has' → logprob: -5.32261848449707
    6. '_' → logprob: -5.69761848449707
    7. ' de' → logprob: -5.94761848449707
    8. ' d' → logprob: -6.44761848449707
    9. 'est' → logprob: -7.07261848449707
    10. '_a' → logprob: -7.57261848449707

Token 162: '       ' (ID: 309)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.1332520842552185
    2. ' has' → logprob: -2.7582521438598633
    3. 'a' → logprob: -2.8832521438598633
    4. ' est' → logprob: -6.383252143859863
    5. ' was' → logprob: -6.758252143859863
    6. 'has' → logprob: -7.508252143859863
    7. 'est' → logprob: -7.633252143859863
    8. ' utilisée' → logprob: -8.258252143859863
    9. ' is' → logprob: -8.508252143859863
    10. ' ' → logprob: -8.508252143859863

Token 163: ' #' (ID: 1069)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.5088017582893372
    2. 'a' → logprob: -1.0088016986846924
    3. 'de' → logprob: -4.5088019371032715
    4. ' de' → logprob: -4.7588019371032715
    5. ' has' → logprob: -5.2588019371032715
    6. 'has' → logprob: -6.0088019371032715
    7. 'est' → logprob: -6.2588019371032715
    8. 'max' → logprob: -6.7588019371032715
    9. 'd' → logprob: -7.3838019371032715
    10. ' est' → logprob: -7.5088019371032715

Token 164: ' a' (ID: 261)
  Prédit: ' a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.1266748160123825
    2. 'a' → logprob: -2.5016748905181885
    3. ' has' → logprob: -3.8766748905181885
    4. ' utilisée' → logprob: -4.751674652099609
    5. 'util' → logprob: -6.126674652099609
    6. 'used' → logprob: -7.001674652099609
    7. 'has' → logprob: -7.126674652099609
    8. 'dé' → logprob: -7.501674652099609
    9. ' est' → logprob: -8.00167465209961
    10. 'd' → logprob: -8.12667465209961

Token 165: ' été' (ID: 9799)
  Prédit: 'dé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dé' → logprob: -0.2749374210834503
    2. ' été' → logprob: -2.024937391281128
    3. 'été' → logprob: -2.774937391281128
    4. ' déjà' → logprob: -3.149937391281128
    5. ' dé' → logprob: -6.399937629699707
    6. 't' → logprob: -7.399937629699707
    7. 'b' → logprob: -8.774937629699707
    8. 'ét' → logprob: -9.024937629699707
    9. 'd' → logprob: -9.274937629699707
    10. 's' → logprob: -9.649937629699707

Token 166: ' utilisée' (ID: 106548)
  Prédit: 'util'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'util' → logprob: -0.6398283243179321
    2. ' utilisée' → logprob: -0.8898283243179321
    3. 'used' → logprob: -3.6398282051086426
    4. ' used' → logprob: -3.8898282051086426
    5. 'ap' → logprob: -4.389828205108643
    6. ' utilisé' → logprob: -6.639828205108643
    7. 'dé' → logprob: -7.764828205108643
    8. ' appli' → logprob: -7.889828205108643
    9. 'use' → logprob: -8.5148286819458
    10. ' utilis' → logprob: -9.2648286819458

Token 167: ' ou' (ID: 2031)
  Prédit: ' or'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.42707356810569763
    2. '.' → logprob: -2.1770734786987305
    3. ' ' → logprob: -2.1770734786987305
    4. ' ,' → logprob: -3.5520734786987305
    5. ',' → logprob: -3.8020734786987305
    6. '<|end|>' → logprob: -4.0520734786987305
    7. ' ' → logprob: -4.0520734786987305
    8. ' ou' → logprob: -4.5520734786987305
    9. '    ' → logprob: -5.3020734786987305
    10. '   ' → logprob: -5.8020734786987305

Token 168: ' pas' (ID: 2173)
  Prédit: ' not'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.6591052412986755
    2. ' pas' → logprob: -1.7841053009033203
    3. ' non' → logprob: -2.1591053009033203
    4. 'non' → logprob: -2.1591053009033203
    5. 'not' → logprob: -2.9091053009033203
    6. 'pas' → logprob: -3.5341053009033203
    7. ' ' → logprob: -9.90910530090332
    8. ' ' → logprob: -10.90910530090332
    9. '_non' → logprob: -11.15910530090332
    10. 'n' → logprob: -11.28410530090332

Token 169: '.
' (ID: 558)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.13552485406398773
    2. '       ' → logprob: -2.1355247497558594
    3. '' → logprob: -6.135524749755859
    4. '
' → logprob: -6.510524749755859
    5. '        
' → logprob: -6.635524749755859
    6. 'distance' → logprob: -7.010524749755859
    7. 'dist' → logprob: -7.135524749755859
    8. ',' → logprob: -8.26052474975586
    9. ')' → logprob: -8.63552474975586
    10. '   ' → logprob: -8.88552474975586

Token 170: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.04067578166723251
    2. '
' → logprob: -4.165675640106201
    3. '        
' → logprob: -4.290675640106201
    4. 'dist' → logprob: -5.665675640106201
    5. 'distance' → logprob: -5.915675640106201
    6. ' distances' → logprob: -7.040675640106201
    7. ' 
' → logprob: -7.290675640106201
    8. ' dist' → logprob: -7.790675640106201
    9. '   ' → logprob: -8.04067611694336
    10. 'dp' → logprob: -8.04067611694336

Token 171: ' #' (ID: 1069)
  Prédit: 'dist'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dist' → logprob: -0.1011902317404747
    2. '       ' → logprob: -3.4761903285980225
    3. ' dist' → logprob: -3.4761903285980225
    4. 'distance' → logprob: -4.351190090179443
    5. '
' → logprob: -4.726190090179443
    6. ' distances' → logprob: -4.976190090179443
    7. '   ' → logprob: -6.351190090179443
    8. ' distance' → logprob: -6.851190090179443
    9. 'dp' → logprob: -6.976190090179443
    10. '        
' → logprob: -7.101190090179443

Token 172: ' dist' (ID: 3601)
  Prédit: 'dist'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dist' → logprob: -0.1659327894449234
    2. ' dist' → logprob: -1.9159327745437622
    3. '       ' → logprob: -6.665932655334473
    4. 'import' → logprob: -6.915932655334473
    5. ' distances' → logprob: -7.040932655334473
    6. 'distance' → logprob: -7.040932655334473
    7. 'INF' → logprob: -7.665932655334473
    8. '   ' → logprob: -7.915932655334473
    9. 'dp' → logprob: -8.665932655334473
    10. ' import' → logprob: -8.790932655334473

Token 173: '[node' (ID: 67268)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.008888374082744122
    2. '=' → logprob: -4.758888244628906
    3. '=[' → logprob: -8.758888244628906
    4. '[' → logprob: -9.383888244628906
    5. ' =[' → logprob: -11.008888244628906
    6. '=[[' → logprob: -11.883888244628906
    7. 's' → logprob: -12.383888244628906
    8. '0' → logprob: -13.883888244628906
    9. ')' → logprob: -14.508888244628906
    10. '```' → logprob: -14.508888244628906

Token 174: '][' (ID: 2696)
  Prédit: ']['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '][' → logprob: -0.35677751898765564
    2. ']' → logprob: -1.231777548789978
    3. ',' → logprob: -5.106777667999268
    4. ' ][' → logprob: -6.356777667999268
    5. ' ]' → logprob: -8.35677719116211
    6. ' ' → logprob: -9.35677719116211
    7. ']=' → logprob: -9.73177719116211
    8. '][]' → logprob: -10.48177719116211
    9. '   ' → logprob: -10.98177719116211
    10. ')][' → logprob: -11.35677719116211

Token 175: 'used' (ID: 4943)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.7118492126464844
    2. 'used' → logprob: -0.8368492126464844
    3. '0' → logprob: -2.5868492126464844
    4. 're' → logprob: -7.711849212646484
    5. 'state' → logprob: -8.836849212646484
    6. 'use' → logprob: -8.961849212646484
    7. 'usage' → logprob: -10.086849212646484
    8. '1' → logprob: -10.211849212646484
    9. '_used' → logprob: -10.836849212646484
    10. 'redu' → logprob: -11.086849212646484

Token 176: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.23464339971542358
    2. '_re' → logprob: -1.8596434593200684
    3. '_]' → logprob: -3.7346434593200684
    4. '_' → logprob: -4.109643459320068
    5. '_discount' → logprob: -5.484643459320068
    6. '_r' → logprob: -5.609643459320068
    7. '_red' → logprob: -5.859643459320068
    8. ' ]' → logprob: -7.609643459320068
    9. ']_' → logprob: -7.734643459320068
    10. '_reduce' → logprob: -7.984643459320068

Token 177: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.003287632716819644
    2. '=' → logprob: -5.7532877922058105
    3. ']' → logprob: -9.753287315368652
    4. ' ' → logprob: -11.253287315368652
    5. ' =
' → logprob: -11.378287315368652
    6. '[' → logprob: -12.128287315368652
    7. ' =[' → logprob: -12.378287315368652
    8. '<|end|>' → logprob: -12.378287315368652
    9. ',' → logprob: -13.003287315368652
    10. ' ]' → logprob: -13.128287315368652

Token 178: ' coût' (ID: 73109)
  Prédit: 'float'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'float' → logprob: -0.2781064212322235
    2. ' float' → logprob: -1.778106451034546
    3. 'inf' → logprob: -2.653106451034546
    4. ' inf' → logprob: -7.153106212615967
    5. '[' → logprob: -7.278106212615967
    6. 'distance' → logprob: -8.278106689453125
    7. ' [' → logprob: -8.403106689453125
    8. 'min' → logprob: -8.528106689453125
    9. 'sys' → logprob: -8.653106689453125
    10. '(float' → logprob: -9.153106689453125

Token 179: ' minimum' (ID: 11085)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.9174079895019531
    2. '[' → logprob: -1.0424079895019531
    3. ']' → logprob: -2.917407989501953
    4. '=' → logprob: -3.167407989501953
    5. '<|end|>' → logprob: -3.292407989501953
    6. 's' → logprob: -3.792407989501953
    7. '_' → logprob: -4.042407989501953
    8. ',' → logprob: -4.792407989501953
    9. '   ' → logprob: -5.292407989501953
    10. '_inf' → logprob: -5.417407989501953

Token 180: ' pour' (ID: 1930)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -1.115142822265625
    2. '<|end|>' → logprob: -1.365142822265625
    3. ' =' → logprob: -1.865142822265625
    4. '[' → logprob: -2.240142822265625
    5. '       ' → logprob: -3.115142822265625
    6. '   ' → logprob: -3.240142822265625
    7. ']' → logprob: -4.240142822265625
    8. ',' → logprob: -4.740142822265625
    9. ' ' → logprob: -4.865142822265625
    10. '[
' → logprob: -4.990142822265625

Token 181: ' atteindre' (ID: 95734)
  Prédit: ' atteindre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' atteindre' → logprob: -1.5638259649276733
    2. 'aller' → logprob: -1.6888259649276733
    3. ' arriver' → logprob: -1.8138259649276733
    4. 'arr' → logprob: -1.8138259649276733
    5. 'atte' → logprob: -2.063826084136963
    6. 're' → logprob: -2.188826084136963
    7. ' aller' → logprob: -3.938826084136963
    8. 'node' → logprob: -5.313826084136963
    9. ' node' → logprob: -5.938826084136963
    10. 'reach' → logprob: -6.063826084136963

Token 182: ' node' (ID: 4596)
  Prédit: ' node'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' node' → logprob: -0.01631786860525608
    2. 'node' → logprob: -4.141317844390869
    3. ' ce' → logprob: -9.016318321228027
    4. ' le' → logprob: -9.516318321228027
    5. '[node' → logprob: -10.266318321228027
    6. '```' → logprob: -10.891318321228027
    7. '(node' → logprob: -12.016318321228027
    8. 'le' → logprob: -12.141318321228027
    9. '=node' → logprob: -12.391318321228027
    10. '	node' → logprob: -12.516318321228027

Token 183: '
' (ID: 198)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.5978368520736694
    2. ',' → logprob: -1.5978368520736694
    3. ']' → logprob: -2.472836971282959
    4. '       ' → logprob: -3.347836971282959
    5. ' with' → logprob: -3.847836971282959
    6. '][' → logprob: -4.097836971282959
    7. '   ' → logprob: -4.222836971282959
    8. '<|end|>' → logprob: -4.347836971282959
    9. ' =' → logprob: -4.722836971282959
    10. ' ]' → logprob: -4.847836971282959

Token 184: '       ' (ID: 309)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.041553523391485214
    2. '=' → logprob: -4.041553497314453
    3. '[' → logprob: -4.541553497314453
    4. '2' → logprob: -5.541553497314453
    5. ']' → logprob: -5.791553497314453
    6. '=[' → logprob: -6.791553497314453
    7. '   ' → logprob: -7.041553497314453
    8. '][' → logprob: -7.041553497314453
    9. '       ' → logprob: -7.291553497314453
    10. ' ' → logprob: -7.541553497314453

Token 185: ' #' (ID: 1069)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.6471902132034302
    2. 'dist' → logprob: -0.8971902132034302
    3. ' dist' → logprob: -3.8971900939941406
    4. ' ' → logprob: -4.522190093994141
    5. '       ' → logprob: -4.897190093994141
    6. '   ' → logprob: -5.022190093994141
    7. ' [' → logprob: -5.147190093994141
    8. '[
' → logprob: -5.647190093994141
    9. '
' → logprob: -5.647190093994141
    10. ' =' → logprob: -5.772190093994141

Token 186: ' used' (ID: 2061)
  Prédit: 'dist'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dist' → logprob: -0.5810421109199524
    2. ' dist' → logprob: -0.8310421109199524
    3. '       ' → logprob: -5.581042289733887
    4. '   ' → logprob: -6.706042289733887
    5. ' ' → logprob: -10.706042289733887
    6. 'import' → logprob: -10.706042289733887
    7. '	dist' → logprob: -11.206042289733887
    8. '2' → logprob: -11.706042289733887
    9. 'distance' → logprob: -11.956042289733887
    10. '    ' → logprob: -12.706042289733887

Token 187: ' =' (ID: 314)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.01620480790734291
    2. ' =' → logprob: -5.516204833984375
    3. ' ]' → logprob: -5.766204833984375
    4. ']=' → logprob: -6.016204833984375
    5. '][' → logprob: -6.391204833984375
    6. '[' → logprob: -6.641204833984375
    7. '<|end|>' → logprob: -6.766204833984375
    8. '=' → logprob: -7.141204833984375
    9. ',' → logprob: -8.641204833984375
    10. ' in' → logprob: -8.641204833984375

Token 188: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.002375415526330471
    2. ' ' → logprob: -6.127375602722168
    3. '2' → logprob: -8.627375602722168
    4. 'False' → logprob: -11.752375602722168
    5. ' False' → logprob: -12.752375602722168
    6. '1' → logprob: -15.252375602722168
    7. 'int' → logprob: -16.25237464904785
    8. '[' → logprob: -17.12737464904785
    9. ' two' → logprob: -17.50237464904785
    10. ' int' → logprob: -18.25237464904785

Token 189: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0019118614727631211
    2. ' ' → logprob: -6.376911640167236
    3. 'False' → logprob: -8.876912117004395
    4. '2' → logprob: -10.251912117004395
    5. ' False' → logprob: -10.376912117004395
    6. '1' → logprob: -13.126912117004395
    7. 'True' → logprob: -13.751912117004395
    8. ' True' → logprob: -14.626912117004395
    9. 'int' → logprob: -15.626912117004395
    10. ' ' → logprob: -17.751911163330078

Token 190: ' si' (ID: 1784)
  Prédit: ' or'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.29739877581596375
    2. ' ou' → logprob: -1.4223988056182861
    3. ' (' → logprob: -4.547398567199707
    4. '<|end|>' → logprob: -5.422398567199707
    5. 'or' → logprob: -7.797398567199707
    6. ',' → logprob: -8.297398567199707
    7. 'ou' → logprob: -8.297398567199707
    8. ')' → logprob: -10.172398567199707
    9. ' ' → logprob: -10.422398567199707
    10. ' ' → logprob: -10.422398567199707

Token 191: ' la' (ID: 557)
  Prédit: ' la'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.39228424429893494
    2. 'la' → logprob: -1.7672842741012573
    3. ' réduction' → logprob: -2.3922841548919678
    4. ' on' → logprob: -3.5172841548919678
    5. ' reduction' → logprob: -4.517284393310547
    6. 'non' → logprob: -5.642284393310547
    7. 'on' → logprob: -5.642284393310547
    8. 're' → logprob: -6.017284393310547
    9. 'ré' → logprob: -6.142284393310547
    10. ' non' → logprob: -6.142284393310547

Token 192: ' réduction' (ID: 89072)
  Prédit: 'ré'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ré' → logprob: -1.0684272050857544
    2. 're' → logprob: -1.3184272050857544
    3. 'discount' → logprob: -1.4434272050857544
    4. ' réduction' → logprob: -2.318427085876465
    5. 'r' → logprob: -4.193427085876465
    6. 'a' → logprob: -5.318427085876465
    7. 'rem' → logprob: -5.568427085876465
    8. 'n' → logprob: -5.568427085876465
    9. ' discount' → logprob: -5.818427085876465
    10. 'code' → logprob: -5.943427085876465

Token 193: ' non' (ID: 2893)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.14557655155658722
    2. 'n' → logprob: -2.0205764770507812
    3. ' has' → logprob: -6.395576477050781
    4. ' a' → logprob: -7.520576477050781
    5. 'a' → logprob: -8.395576477050781
    6. ' is' → logprob: -9.395576477050781
    7. ' hasn't' → logprob: -9.520576477050781
    8. ' not' → logprob: -9.770576477050781
    9. ' was' → logprob: -10.520576477050781
    10. 'has' → logprob: -10.895576477050781

Token 194: ' utilisée' (ID: 106548)
  Prédit: ' utilisée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' utilisée' → logprob: -0.25976309180259705
    2. 'util' → logprob: -1.5097631216049194
    3. ' used' → logprob: -5.759763240814209
    4. ' utilis' → logprob: -6.259763240814209
    5. '-util' → logprob: -6.759763240814209
    6. ' utilisé' → logprob: -7.634763240814209
    7. 'used' → logprob: -8.13476276397705
    8. ' utilisées' → logprob: -9.00976276397705
    9. 'ap' → logprob: -9.25976276397705
    10. ' use' → logprob: -9.50976276397705

Token 195: ',
' (ID: 412)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.044123437255620956
    2. '       ' → logprob: -3.794123411178589
    3. ',
' → logprob: -4.294123649597168
    4. '
' → logprob: -5.169123649597168
    5. ' ,' → logprob: -7.169123649597168
    6. '```' → logprob: -8.544123649597168
    7. '   ' → logprob: -9.919123649597168
    8. '        
' → logprob: -9.919123649597168
    9. 'dist' → logprob: -10.294123649597168
    10. 'import' → logprob: -10.419123649597168

Token 196: '       ' (ID: 309)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.5271849036216736
    2. ' ' → logprob: -0.9021849036216736
    3. '#' → logprob: -5.902184963226318
    4. ' #' → logprob: -7.527184963226318
    5. '       ' → logprob: -7.902184963226318
    6. ',' → logprob: -9.27718448638916
    7. '<|end|>' → logprob: -9.40218448638916
    8. '0' → logprob: -9.65218448638916
    9. ' =' → logprob: -10.65218448638916
    10. '        ' → logprob: -10.77718448638916

Token 197: ' #' (ID: 1069)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.005841588135808706
    2. ' ' → logprob: -5.5058417320251465
    3. '#' (adapté à ' #') → logprob: -6.3808417320251465
    4. ' #' → logprob: -10.255841255187988
    5. '       ' → logprob: -10.505841255187988
    6. '   ' → logprob: -13.630841255187988
    7. '=' → logprob: -14.255841255187988
    8. '        ' → logprob: -14.255841255187988
    9. ' =' → logprob: -14.755841255187988
    10. '  ' → logprob: -14.880841255187988

Token 198: '       ' (ID: 309)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0789012461900711
    2. ' ' → logprob: -2.5789012908935547
    3. '       ' → logprob: -12.328901290893555
    4. ' ' → logprob: -12.953901290893555
    5. ' =' → logprob: -13.703901290893555
    6. '        ' → logprob: -13.953901290893555
    7. '   ' → logprob: -14.578901290893555
    8. '    ' → logprob: -14.828901290893555
    9. ',' → logprob: -15.328901290893555
    10. '  ' → logprob: -15.328901290893555

Token 199: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.026301460340619087
    2. ' ' → logprob: -3.651301383972168
    3. '0' → logprob: -14.776301383972168
    4. '       ' → logprob: -15.276301383972168
    5. ' ' → logprob: -15.276301383972168
    6. '   ' → logprob: -15.901301383972168
    7. '#' → logprob: -16.526302337646484
    8. '=' → logprob: -16.901302337646484
    9. ' =' → logprob: -17.338802337646484
    10. '  ' → logprob: -17.463802337646484

Token 200: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0011726059019565582
    2. ' ' → logprob: -6.7511725425720215
    3. '0' → logprob: -13.87617301940918
    4. '        ' → logprob: -14.87617301940918
    5. '   ' → logprob: -15.12617301940918
    6. '       ' → logprob: -15.25117301940918
    7. '         ' → logprob: -15.75117301940918
    8. '    ' → logprob: -16.56367301940918
    9. '  ' → logprob: -16.62617301940918
    10. '     ' → logprob: -16.68867301940918

Token 201: ' si' (ID: 1784)
  Prédit: ' si'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' si' → logprob: -0.036932509392499924
    2. 'si' → logprob: -4.036932468414307
    3. ' if' → logprob: -4.036932468414307
    4. 'if' → logprob: -7.286932468414307
    5. ' ' → logprob: -9.286932945251465
    6. ' sinon' → logprob: -9.286932945251465
    7. ' ' → logprob: -10.411932945251465
    8. '=' → logprob: -11.661932945251465
    9. 'Si' → logprob: -11.786932945251465
    10. '```' → logprob: -12.161932945251465

Token 202: ' la' (ID: 557)
  Prédit: ' la'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.4349484443664551
    2. ' elle' → logprob: -2.184948444366455
    3. ' utilisée' → logprob: -2.184948444366455
    4. 'la' → logprob: -2.309948444366455
    5. 'util' → logprob: -4.184948444366455
    6. ' used' → logprob: -5.309948444366455
    7. ' ' → logprob: -6.059948444366455
    8. ' ' → logprob: -6.934948444366455
    9. ' utilisé' → logprob: -6.934948444366455
    10. ' rédu' → logprob: -7.309948444366455

Token 203: ' réduction' (ID: 89072)
  Prédit: 'ré'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ré' → logprob: -0.7721185684204102
    2. 'util' → logprob: -1.7721185684204102
    3. ' used' → logprob: -2.14711856842041
    4. 'used' → logprob: -2.39711856842041
    5. 're' → logprob: -2.89711856842041
    6. ' réduction' → logprob: -3.02211856842041
    7. '1' → logprob: -3.27211856842041
    8. ' utilisé' → logprob: -5.14711856842041
    9. ' ' → logprob: -5.27211856842041
    10. ' rédu' → logprob: -6.27211856842041

Token 204: ' utilisée' (ID: 106548)
  Prédit: 'util'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'util' → logprob: -0.5311033129692078
    2. ' utilisée' → logprob: -0.9061033129692078
    3. ' utilis' → logprob: -5.156103134155273
    4. ' used' → logprob: -7.656103134155273
    5. ' a' → logprob: -7.656103134155273
    6. ' utilisé' → logprob: -7.906103134155273
    7. 'used' → logprob: -8.531103134155273
    8. ' util' → logprob: -9.156103134155273
    9. 'a' → logprob: -9.531103134155273
    10. ' ' → logprob: -9.656103134155273

Token 205: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.14702314138412476
    2. '
' → logprob: -2.0220232009887695
    3. ')' → logprob: -6.3970232009887695
    4. ']' → logprob: -6.5220232009887695
    5. 'dist' → logprob: -8.27202320098877
    6. '```' → logprob: -8.27202320098877
    7. '        
' → logprob: -8.64702320098877
    8. '   ' → logprob: -9.39702320098877
    9. '
' → logprob: -9.52202320098877
    10. '

' → logprob: -10.02202320098877

Token 206: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.18590880930423737
    2. '
' → logprob: -1.8109087944030762
    3. '   ' → logprob: -6.435908794403076
    4. ' dist' → logprob: -7.060908794403076
    5. 'dist' → logprob: -7.060908794403076
    6. '        
' → logprob: -7.310908794403076
    7. 'import' → logprob: -8.060909271240234
    8. ' 
' → logprob: -8.435909271240234
    9. '```' → logprob: -8.435909271240234
    10. ')' → logprob: -8.685909271240234

Token 207: ' INF' (ID: 69196)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.78017258644104
    2. 'dist' → logprob: -1.15517258644104
    3. ' dist' → logprob: -1.65517258644104
    4. '
' → logprob: -3.40517258644104
    5. '   ' → logprob: -6.655172348022461
    6. '	dist' → logprob: -7.280172348022461
    7. '        
' → logprob: -8.155172348022461
    8. '_dist' → logprob: -11.030172348022461
    9. ' ' → logprob: -11.155172348022461
    10. ' ' → logprob: -11.155172348022461

Token 208: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.01416398212313652
    2. '=' → logprob: -4.264163970947266
    3. '=int' → logprob: -15.264163970947266
    4. ')' → logprob: -16.264163970947266
    5. '=float' → logprob: -16.764163970947266
    6. ' ' → logprob: -17.014163970947266
    7. ',' → logprob: -17.764163970947266
    8. '＝' → logprob: -18.139163970947266
    9. ' ' → logprob: -18.389163970947266
    10. ' =
' → logprob: -18.514163970947266

Token 209: ' ' (ID: 220)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.5070173740386963
    2. ' ' → logprob: -1.2570173740386963
    3. ' float' → logprob: -2.7570173740386963
    4. 'float' → logprob: -3.0070173740386963
    5. 'int' → logprob: -8.632017135620117
    6. ' int' → logprob: -9.132017135620117
    7. '1' → logprob: -13.507017135620117
    8. '100' → logprob: -14.007017135620117
    9. ' ' → logprob: -14.882017135620117
    10. '	float' → logprob: -15.007017135620117

Token 210: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.07928917557001114
    2. 'float' → logprob: -2.579289197921753
    3. 'int' → logprob: -7.829288959503174
    4. ' float' → logprob: -13.954289436340332
    5. '1' → logprob: -14.579289436340332
    6. '100' → logprob: -16.829288482666016
    7. ' ' → logprob: -18.079288482666016
    8. 'sys' → logprob: -18.204288482666016
    9. '(float' → logprob: -18.829288482666016
    10. '2' → logprob: -19.079288482666016

Token 211: '**' (ID: 410)
  Prédit: '9'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '9' → logprob: -0.0007676983950659633
    2. '10' → logprob: -7.750767707824707
    3. '15' → logprob: -8.500767707824707
    4. '12' → logprob: -9.750767707824707
    5. '**' → logprob: -10.250767707824707
    6. '18' → logprob: -10.250767707824707
    7. '09' → logprob: -12.500767707824707
    8. '8' → logprob: -15.000767707824707
    9. '7' → logprob: -15.000767707824707
    10. '14' → logprob: -15.250767707824707

Token 212: '9' (ID: 24)
  Prédit: '9'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '9' → logprob: -0.10185397416353226
    2. '15' → logprob: -2.351854085922241
    3. '18' → logprob: -6.601853847503662
    4. '12' → logprob: -8.72685432434082
    5. '10' → logprob: -9.10185432434082
    6. '14' → logprob: -11.85185432434082
    7. '16' → logprob: -12.22685432434082
    8. '13' → logprob: -13.22685432434082
    9. '11' → logprob: -15.35185432434082
    10. '7' → logprob: -15.47685432434082

Token 213: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.0013332172529771924
    2. '
' → logprob: -6.751333236694336
    3. '' → logprob: -9.626333236694336
    4. ' 
' → logprob: -10.626333236694336
    5. '       ' → logprob: -10.751333236694336
    6. '        
' → logprob: -10.876333236694336
    7. 'dist' → logprob: -11.126333236694336
    8. '    
' → logprob: -11.751333236694336
    9. '  
' → logprob: -12.626333236694336
    10. ',
' → logprob: -13.126333236694336

Token 214: '       ' (ID: 309)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.3719015419483185
    2. '       ' → logprob: -1.371901512145996
    3. 'dist' → logprob: -3.621901512145996
    4. '        
' → logprob: -4.246901512145996
    5. ' 
' → logprob: -5.246901512145996
    6. ' dist' → logprob: -5.371901512145996
    7. '	dist' → logprob: -5.996901512145996
    8. '  
' → logprob: -7.746901512145996
    9. '    
' → logprob: -7.746901512145996
    10. ' ' → logprob: -7.871901512145996

Token 215: ' dist' (ID: 3601)
  Prédit: 'dist'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dist' (adapté à ' dist') → logprob: -0.0015611659036949277
    2. ' dist' → logprob: -6.501561164855957
    3. '       ' → logprob: -10.126561164855957
    4. 'distance' → logprob: -11.876561164855957
    5. '	dist' → logprob: -12.001561164855957
    6. '   ' → logprob: -12.251561164855957
    7. '_dist' → logprob: -15.376561164855957
    8. 'd' → logprob: -15.751561164855957
    9. '.dist' → logprob: -15.876561164855957
    10. 'Dist' → logprob: -16.251562118530273

Token 216: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.16032302379608154
    2. '=' → logprob: -1.9103230237960815
    3. '=[[' → logprob: -9.910323143005371
    4. '=[' → logprob: -10.160323143005371
    5. '[' → logprob: -12.035323143005371
    6. ' =[' → logprob: -12.910323143005371
    7. ']' → logprob: -15.035323143005371
    8. '0' → logprob: -15.035323143005371
    9. '```' → logprob: -15.160323143005371
    10. ' ' → logprob: -15.410323143005371

Token 217: ' [[' (ID: 9237)
  Prédit: '[['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[[' → logprob: -0.005234121344983578
    2. ' [[' → logprob: -5.255234241485596
    3. '[' → logprob: -15.005233764648438
    4. ' [' → logprob: -17.630233764648438
    5. '([[' → logprob: -19.130233764648438
    6. '[['' → logprob: -20.255233764648438
    7. '=[[' → logprob: -22.630233764648438
    8. '[(' → logprob: -22.880233764648438
    9. ':[[' → logprob: -23.755233764648438
    10. ' ' → logprob: -23.755233764648438

Token 218: 'INF' (ID: 64358)
  Prédit: 'INF'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'INF' → logprob: -6.704273118884885e-07
    2. ' INF' → logprob: -14.500000953674316
    3. '_INF' → logprob: -17.5
    4. 'inf' → logprob: -17.625
    5. 'IN' → logprob: -19.125
    6. '   ' → logprob: -19.5
    7. '-INF' → logprob: -19.875
    8. 'Inf' → logprob: -20.625
    9. '0' → logprob: -21.0
    10. 'I' → logprob: -21.5

Token 219: ']*' (ID: 18579)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0003003081073984504
    2. ' for' → logprob: -8.625300407409668
    3. ']' → logprob: -9.500300407409668
    4. ' ,' → logprob: -10.875300407409668
    5. ']*' → logprob: -11.000300407409668
    6. ',
' → logprob: -12.250300407409668
    7. 'for' → logprob: -13.750300407409668
    8. ',I' → logprob: -14.000300407409668
    9. '   ' → logprob: -14.750300407409668
    10. ',N' → logprob: -14.875300407409668

Token 220: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -5.800739018013701e-05
    2. ' ' → logprob: -9.8750581741333
    3. '(' → logprob: -12.2500581741333
    4. '   ' → logprob: -13.7500581741333
    5. '    ' → logprob: -15.8750581741333
    6. '
' → logprob: -15.8750581741333
    7. ' (' → logprob: -16.625057220458984
    8. '       ' → logprob: -16.750057220458984
    9. '=' → logprob: -17.000057220458984
    10. '     ' → logprob: -17.187557220458984

Token 221: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.006184149067848921
    2. 'for' → logprob: -5.631184101104736
    3. ']' → logprob: -6.131184101104736
    4. ',' → logprob: -8.381184577941895
    5. ' ]' → logprob: -8.756184577941895
    6. '       ' → logprob: -12.131184577941895
    7. '	for' → logprob: -12.256184577941895
    8. '   ' → logprob: -13.006184577941895
    9. ' ' → logprob: -13.006184577941895
    10. ')' → logprob: -13.756184577941895

Token 222: ' _' (ID: 1175)
  Prédit: ' range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.02624676749110222
    2. '(range' → logprob: -4.776246547698975
    3. 'range' → logprob: -4.901246547698975
    4. '_' → logprob: -5.526246547698975
    5. ' _' → logprob: -5.526246547698975
    6. ' (' → logprob: -6.401246547698975
    7. '_range' → logprob: -8.651247024536133
    8. ' ' → logprob: -9.276247024536133
    9. '<|end|>' → logprob: -10.276247024536133
    10. ' in' → logprob: -10.526247024536133

Token 223: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.5089070200920105
    2. 'in' → logprob: -1.0089070796966553
    3. 'range' → logprob: -3.3839070796966553
    4. ' range' → logprob: -8.383907318115234
    5. '(range' → logprob: -9.758907318115234
    6. ' ' → logprob: -11.258907318115234
    7. '(n' → logprob: -11.883907318115234
    8. '(' → logprob: -12.258907318115234
    9. 'n' → logprob: -12.508907318115234
    10. 'import' → logprob: -15.633907318115234

Token 224: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.048592254519462585
    2. ' range' → logprob: -3.0485923290252686
    3. '(range' → logprob: -12.298592567443848
    4. '   ' → logprob: -16.29859161376953
    5. '	range' → logprob: -16.29859161376953
    6. 'n' → logprob: -16.54859161376953
    7. ' ' → logprob: -17.54859161376953
    8. 'rang' → logprob: -17.92359161376953
    9. ' xrange' → logprob: -18.17359161376953
    10. '(n' → logprob: -18.29859161376953

Token 225: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.00021676832693628967
    2. ' (' → logprob: -8.750216484069824
    3. 'n' → logprob: -9.875216484069824
    4. ' n' → logprob: -12.500216484069824
    5. '(' → logprob: -13.250216484069824
    6. 'range' → logprob: -14.375216484069824
    7. '(range' → logprob: -15.250216484069824
    8. '
' → logprob: -15.750216484069824
    9. '   ' → logprob: -16.00021743774414
    10. ' range' → logprob: -16.62521743774414

Token 226: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -6.253713218029588e-05
    2. ' +' → logprob: -10.125062942504883
    3. '+
' → logprob: -10.750062942504883
    4. '+

' → logprob: -15.625062942504883
    5. '+)' → logprob: -15.750062942504883
    6. '1' → logprob: -16.000062942504883
    7. '
' → logprob: -16.375062942504883
    8. ')' → logprob: -16.625062942504883
    9. '()+' → logprob: -16.625062942504883
    10. ')+' → logprob: -16.750062942504883

Token 227: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -9.281485836254433e-05
    2. '2' → logprob: -9.750092506408691
    3. ' ' → logprob: -10.375092506408691
    4. '   ' → logprob: -13.625092506408691
    5. '0' → logprob: -15.000092506408691
    6. '```' → logprob: -15.187592506408691
    7. ')' → logprob: -15.312592506408691
    8. '(' → logprob: -15.437592506408691
    9. '       ' → logprob: -15.562592506408691
    10. '+' → logprob: -15.812592506408691

Token 228: ')]
' (ID: 11587)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.00020902375399600714
    2. ']' → logprob: -8.500208854675293
    3. ')' → logprob: -12.750208854675293
    4. '       ' → logprob: -13.750208854675293
    5. ' ]' → logprob: -14.375208854675293
    6. ')]
' → logprob: -15.000208854675293
    7. '])' → logprob: -15.875208854675293
    8. ')],' → logprob: -16.25020980834961
    9. ']]' → logprob: -16.37520980834961
    10. '])]' → logprob: -16.37520980834961

Token 229: '       ' (ID: 309)
  Prédit: 'dist'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dist' → logprob: -0.36616167426109314
    2. '       ' → logprob: -1.8661617040634155
    3. '
' → logprob: -1.9911617040634155
    4. ' dist' → logprob: -5.116161823272705
    5. '        
' → logprob: -5.866161823272705
    6. '	dist' → logprob: -5.866161823272705
    7. '(dist' → logprob: -6.866161823272705
    8. '<|end|>' → logprob: -7.491161823272705
    9. '[' → logprob: -8.116161346435547
    10. ' 
' → logprob: -8.116161346435547

Token 230: ' dist' (ID: 3601)
  Prédit: 'dist'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dist' (adapté à ' dist') → logprob: -0.05510929599404335
    2. ' dist' → logprob: -3.1801092624664307
    3. '       ' → logprob: -4.43010950088501
    4. '	dist' → logprob: -9.180109024047852
    5. '        
' → logprob: -11.680109024047852
    6. '   ' → logprob: -12.055109024047852
    7. '_dist' → logprob: -13.555109024047852
    8. 'Dist' → logprob: -13.680109024047852
    9. '
' → logprob: -14.180109024047852
    10. ' ' → logprob: -14.555109024047852

Token 231: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -5.512236498361744e-07
    2. '][' → logprob: -16.125
    3. ' [' → logprob: -16.375
    4. '1' → logprob: -16.375
    5. '```' → logprob: -16.375
    6. '}[' → logprob: -17.5
    7. ')[' → logprob: -17.75
    8. '=' → logprob: -18.0
    9. '\[' → logprob: -18.25
    10. '0' → logprob: -18.375

Token 232: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.2471589798224159e-05
    2. ' ' → logprob: -12.250012397766113
    3. '0' → logprob: -12.375012397766113
    4. '   ' → logprob: -13.250012397766113
    5. '[' → logprob: -14.250012397766113
    6. '(' → logprob: -15.750012397766113
    7. 'start' → logprob: -15.750012397766113
    8. ']' → logprob: -16.00001335144043
    9. '       ' → logprob: -16.00001335144043
    10. '    ' → logprob: -16.12501335144043

Token 233: '][' (ID: 2696)
  Prédit: ']['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '][' → logprob: -3.130576806142926e-05
    2. ' ][' → logprob: -11.125031471252441
    3. '[' → logprob: -11.250031471252441
    4. ']' → logprob: -12.750031471252441
    5. ')][' → logprob: -14.750031471252441
    6. '   ' → logprob: -16.875030517578125
    7. '()][' → logprob: -17.000030517578125
    8. ']][' → logprob: -17.000030517578125
    9. '"][' → logprob: -17.250030517578125
    10. ',' → logprob: -17.875030517578125

Token 234: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -3.128163257315464e-07
    2. ' ' → logprob: -16.25
    3. 'False' → logprob: -16.75
    4. '1' → logprob: -17.625
    5. '   ' → logprob: -19.0
    6. '۰' → logprob: -19.5
    7. '
' → logprob: -20.0625
    8. 'false' → logprob: -20.3125
    9. 'def' → logprob: -20.5625
    10. '```' → logprob: -20.875

Token 235: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0003672748862300068
    2. ' ]' → logprob: -8.000367164611816
    3. ']=' → logprob: -10.375367164611816
    4. '=' → logprob: -14.750367164611816
    5. ' =' → logprob: -15.375367164611816
    6. ')' → logprob: -18.125368118286133
    7. '`]' → logprob: -18.125368118286133
    8. ']+=' → logprob: -18.875368118286133
    9. ',' → logprob: -19.000368118286133
    10. '()]' → logprob: -19.625368118286133

Token 236: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.1269284337759018
    2. ' =' → logprob: -2.1269283294677734
    3. '0' → logprob: -15.626928329467773
    4. ',' → logprob: -17.001928329467773
    5. ']=' → logprob: -17.001928329467773
    6. '=
' → logprob: -17.126928329467773
    7. '＝' → logprob: -17.376928329467773
    8. ')=' → logprob: -17.751928329467773
    9. '=

' → logprob: -17.751928329467773
    10. ' =
' → logprob: -18.001928329467773

Token 237: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -4.246537173457909e-06
    2. ' ' → logprob: -12.375003814697266
    3. '   ' → logprob: -18.375003814697266
    4. '۰' → logprob: -19.875003814697266
    5. '00' → logprob: -20.375003814697266
    6. '  ' → logprob: -20.750003814697266
    7. '000' → logprob: -20.875003814697266
    8. '```' → logprob: -21.375003814697266
    9. ' ' → logprob: -21.500003814697266
    10. '    ' → logprob: -22.062503814697266

Token 238: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -3.128163257315464e-07
    2. ' ' → logprob: -15.5
    3. '۰' → logprob: -21.0
    4. '   ' → logprob: -21.375
    5. '00' → logprob: -21.6875
    6. '000' → logprob: -21.75
    7. '০' → logprob: -22.5
    8. '(' → logprob: -22.9375
    9. '```' → logprob: -23.25
    10. '  ' → logprob: -23.5625

Token 239: '

' (ID: 279)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.002980790799483657
    2. 'pq' → logprob: -6.627980709075928
    3. '
' → logprob: -7.502980709075928
    4. '   ' → logprob: -8.252981185913086
    5. 'heap' → logprob: -8.377981185913086
    6. '	queue' → logprob: -8.502981185913086
    7. 'queue' → logprob: -8.877981185913086
    8. '        
' → logprob: -8.877981185913086
    9. '	' → logprob: -10.502981185913086
    10. 'priority' → logprob: -11.127981185913086

Token 240: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.002957258140668273
    2. '   ' → logprob: -6.002957344055176
    3. '
' → logprob: -8.127957344055176
    4. '        
' → logprob: -9.377957344055176
    5. 'pq' → logprob: -10.127957344055176
    6. '    
' → logprob: -11.252957344055176
    7. '	queue' → logprob: -11.377957344055176
    8. 'heap' → logprob: -11.752957344055176
    9. 'queue' → logprob: -12.127957344055176
    10. ' heap' → logprob: -12.502957344055176

Token 241: ' #' (ID: 1069)
  Prédit: 'heap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'heap' → logprob: -0.1559278815984726
    2. 'pq' → logprob: -2.405927896499634
    3. 'queue' → logprob: -3.155927896499634
    4. '       ' → logprob: -4.655927658081055
    5. 'hq' → logprob: -6.530927658081055
    6. ' heap' → logprob: -7.530927658081055
    7. 'q' → logprob: -10.530927658081055
    8. '        
' → logprob: -10.905927658081055
    9. 'import' → logprob: -11.280927658081055
    10. 'priority' → logprob: -11.280927658081055

Token 242: ' File' (ID: 5262)
  Prédit: 'heap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'heap' → logprob: -0.2356710582971573
    2. 'pq' → logprob: -1.735671043395996
    3. 'queue' → logprob: -3.735671043395996
    4. 'hq' → logprob: -5.235671043395996
    5. ' heap' → logprob: -5.485671043395996
    6. ' pq' → logprob: -9.235671043395996
    7. '   ' → logprob: -9.735671043395996
    8. 'q' → logprob: -9.735671043395996
    9. '       ' → logprob: -9.735671043395996
    10. ' queue' → logprob: -10.360671043395996

Token 243: ' de' (ID: 334)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.028692077845335007
    2. '=' → logprob: -3.7786920070648193
    3. '=[]' → logprob: -5.778692245483398
    4. 'q' → logprob: -7.153692245483398
    5. 'import' → logprob: -7.278692245483398
    6. '=[]
' → logprob: -8.778692245483398
    7. ')' → logprob: -8.903692245483398
    8. 'heap' → logprob: -9.028692245483398
    9. '   ' → logprob: -9.778692245483398
    10. 'priority' → logprob: -9.778692245483398

Token 244: ' priorité' (ID: 150252)
  Prédit: 'prior'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prior' → logprob: -0.2640976905822754
    2. 'priority' → logprob: -1.5140976905822754
    3. 'prio' → logprob: -5.139097690582275
    4. ' priorité' → logprob: -5.264097690582275
    5. 'pri' → logprob: -7.764097690582275
    6. ' priority' → logprob: -8.264097213745117
    7. 'import' → logprob: -9.014097213745117
    8. ' prior' → logprob: -9.514097213745117
    9. 'pq' → logprob: -9.514097213745117
    10. 'pr' → logprob: -10.889097213745117

Token 245: ' contenant' (ID: 131049)
  Prédit: 'q'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'q' → logprob: -0.5834272503852844
    2. ' =' → logprob: -1.4584271907806396
    3. 'queue' → logprob: -2.8334271907806396
    4. ' queue' → logprob: -3.2084271907806396
    5. '       ' → logprob: -3.3334271907806396
    6. 'pq' → logprob: -3.5834271907806396
    7. 'heap' → logprob: -3.8334271907806396
    8. ' heap' → logprob: -5.458427429199219
    9. ' pq' → logprob: -5.583427429199219
    10. ',' → logprob: -5.708427429199219

Token 246: ' (' (ID: 350)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3973056375980377
    2. ' (' → logprob: -1.8973056077957153
    3. '[(' → logprob: -2.272305727005005
    4. '[]' → logprob: -3.397305727005005
    5. '(heap' → logprob: -3.647305727005005
    6. 'heap' → logprob: -4.522305488586426
    7. ' [(' → logprob: -6.772305488586426
    8. '(queue' → logprob: -7.272305488586426
    9. '   ' → logprob: -7.647305488586426
    10. 'import' → logprob: -7.772305488586426

Token 247: 'co' (ID: 1191)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.3433980643749237
    2. 'dist' → logprob: -1.343398094177246
    3. '(' → logprob: -3.718398094177246
    4. '(dist' → logprob: -5.843398094177246
    5. 'cost' → logprob: -6.718398094177246
    6. ' (' → logprob: -7.218398094177246
    7. ' dist' → logprob: -8.468398094177246
    8. ')' → logprob: -9.093398094177246
    9. ' ' → logprob: -9.218398094177246
    10. 'distance' → logprob: -9.843398094177246

Token 248: 'ût' (ID: 24581)
  Prédit: 'st'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'st' → logprob: -0.7283186316490173
    2. 'ût' → logprob: -0.8533186316490173
    3. 'ut' → logprob: -2.478318691253662
    4. 't' → logprob: -5.228318691253662
    5. 'û' → logprob: -6.603318691253662
    6. '(' → logprob: -8.603318214416504
    7. 's' → logprob: -9.603318214416504
    8. '(st' → logprob: -9.853318214416504
    9. ' (' → logprob: -9.853318214416504
    10. 'u' → logprob: -9.978318214416504

Token 249: '_c' (ID: 1303)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00027087211492471397
    2. ' ,' → logprob: -8.25027084350586
    3. ',current' → logprob: -12.25027084350586
    4. ',
' → logprob: -13.12527084350586
    5. ')' → logprob: -14.50027084350586
    6. ',)' → logprob: -14.87527084350586
    7. ',node' → logprob: -15.12527084350586
    8. 'current' → logprob: -15.62527084350586
    9. ',t' → logprob: -15.87527084350586
    10. '   ' → logprob: -16.12527084350586

Token 250: 'our' (ID: 401)
  Prédit: 'ut'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ut' → logprob: -0.8300922513008118
    2. 'ût' → logprob: -1.205092191696167
    3. 'st' → logprob: -1.455092191696167
    4. 'ur' → logprob: -4.830092430114746
    5. 'û' → logprob: -4.955092430114746
    6. 't' → logprob: -5.080092430114746
    7. ',' → logprob: -5.580092430114746
    8. 'uts' → logprob: -5.580092430114746
    9. 'út' → logprob: -7.955092430114746
    10. 'u' → logprob: -8.205092430114746

Token 251: 'ant' (ID: 493)
  Prédit: 'ant'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ant' → logprob: -0.7316844463348389
    2. 'rent' → logprob: -0.8566844463348389
    3. 'r' → logprob: -2.981684446334839
    4. 'ent' → logprob: -3.856684446334839
    5. ',' → logprob: -4.981684684753418
    6. 'ante' → logprob: -5.231684684753418
    7. 'ance' → logprob: -5.981684684753418
    8. 'int' → logprob: -6.481684684753418
    9. 'cost' → logprob: -7.231684684753418
    10. 'd' → logprob: -7.231684684753418

Token 252: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00016873658751137555
    2. ' ,' → logprob: -8.750168800354004
    3. ',node' → logprob: -11.750168800354004
    4. ',current' → logprob: -14.750168800354004
    5. ',
' → logprob: -14.875168800354004
    6. ')' → logprob: -14.875168800354004
    7. ',user' → logprob: -15.375168800354004
    8. ',n' → logprob: -15.750168800354004
    9. 'cost' → logprob: -16.375167846679688
    10. '   ' → logprob: -16.750167846679688

Token 253: ' noe' (ID: 49921)
  Prédit: 'node'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'node' → logprob: -0.1604427546262741
    2. ' node' → logprob: -1.9104427099227905
    3. 'current' → logprob: -9.785442352294922
    4. 'u' → logprob: -10.285442352294922
    5. ' noe' → logprob: -10.410442352294922
    6. ' current' → logprob: -11.035442352294922
    7. 'no' → logprob: -11.160442352294922
    8. ' u' → logprob: -11.535442352294922
    9. '1' → logprob: -11.535442352294922
    10. ',node' → logprob: -11.785442352294922

Token 254: 'ud' (ID: 527)
  Prédit: 'ud'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ud' → logprob: -0.00012451570364646614
    2. 'd' → logprob: -9.00012493133545
    3. 'u' → logprob: -14.37512493133545
    4. '#' → logprob: -16.000123977661133
    5. '_ud' → logprob: -16.250123977661133
    6. ' ud' → logprob: -16.375123977661133
    7. 'уд' → logprob: -16.625123977661133
    8. '```' → logprob: -17.750123977661133
    9. ',' → logprob: -18.000123977661133
    10. ')' → logprob: -18.125123977661133

Token 255: '_c' (ID: 1303)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -3.440506407059729e-05
    2. ' ,' → logprob: -10.87503433227539
    3. ')' → logprob: -11.12503433227539
    4. ',state' → logprob: -16.25003433227539
    5. ',)' → logprob: -16.50003433227539
    6. '_,' → logprob: -16.87503433227539
    7. ',
' → logprob: -16.87503433227539
    8. '),' → logprob: -17.37503433227539
    9. '‌,' → logprob: -17.37503433227539
    10. 's' → logprob: -17.50003433227539

Token 256: 'our' (ID: 401)
  Prédit: 'urrent'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'urrent' → logprob: -0.1776777058839798
    2. 'ur' → logprob: -2.552677631378174
    3. ')' → logprob: -3.427677631378174
    4. 'u' → logprob: -4.177677631378174
    5. 'ont' → logprob: -4.302677631378174
    6. ',' → logprob: -4.677677631378174
    7. 'ount' → logprob: -5.927677631378174
    8. 'our' → logprob: -5.927677631378174
    9. 'r' → logprob: -6.552677631378174
    10. 't' → logprob: -6.677677631378174

Token 257: 'ant' (ID: 493)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.0017508649034425616
    2. 't' → logprob: -7.001750946044922
    3. ')' → logprob: -7.751750946044922
    4. 'ant' → logprob: -8.626750946044922
    5. ' r' → logprob: -9.626750946044922
    6. 'ur' → logprob: -10.001750946044922
    7. 'rt' → logprob: -10.001750946044922
    8. 'nt' → logprob: -11.126750946044922
    9. 'rent' → logprob: -11.251750946044922
    10. 'р' → logprob: -11.501750946044922

Token 258: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.20147542655467987
    2. ')' → logprob: -1.7014753818511963
    3. ' ,' → logprob: -10.451475143432617
    4. '),' → logprob: -11.076475143432617
    5. ' )' → logprob: -11.576475143432617
    6. '   ' → logprob: -13.076475143432617
    7. '       ' → logprob: -14.326475143432617
    8. '))' → logprob: -14.451475143432617
    9. ')
' → logprob: -14.576475143432617
    10. ',state' → logprob: -14.888975143432617

Token 259: ' used' (ID: 2061)
  Prédit: 'used'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'used' → logprob: -0.11983784288167953
    2. ' used' → logprob: -2.619837760925293
    3. '0' → logprob: -3.369837760925293
    4. 'util' → logprob: -6.494837760925293
    5. ' utilisé' → logprob: -6.494837760925293
    6. ' ' → logprob: -6.869837760925293
    7. ' False' → logprob: -8.244837760925293
    8. 'int' → logprob: -8.244837760925293
    9. 're' → logprob: -8.369837760925293
    10. 'False' → logprob: -8.494837760925293

Token 260: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.023293538717553e-05
    2. ' )' → logprob: -11.500030517578125
    3. '_state' → logprob: -12.250030517578125
    4. '_' → logprob: -12.375030517578125
    5. ')
' → logprob: -13.000030517578125
    6. ')_' → logprob: -13.250030517578125
    7. 'state' → logprob: -13.500030517578125
    8. '))' → logprob: -13.875030517578125
    9. ',' → logprob: -14.125030517578125
    10. '_)' → logprob: -14.375030517578125

Token 261: '       ' (ID: 309)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.569463312625885
    2. 'heap' → logprob: -1.5694632530212402
    3. ',' → logprob: -2.5694632530212402
    4. '       ' → logprob: -2.6944632530212402
    5. '(heap' → logprob: -3.4444632530212402
    6. ' (' → logprob: -4.31946325302124
    7. '(' → logprob: -4.69446325302124
    8. 'pq' → logprob: -5.06946325302124
    9. ' heap' → logprob: -5.19446325302124
    10. '(priority' → logprob: -6.19446325302124

Token 262: ' pq' (ID: 65424)
  Prédit: 'heap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'heap' → logprob: -0.7471157908439636
    2. '       ' → logprob: -1.2471158504486084
    3. 'pq' (adapté à ' pq') → logprob: -1.8721158504486084
    4. ' heap' → logprob: -2.7471158504486084
    5. 'queue' → logprob: -4.372115612030029
    6. 'import' → logprob: -5.372115612030029
    7. ' pq' → logprob: -6.747115612030029
    8. 'hq' → logprob: -6.747115612030029
    9. ' queue' → logprob: -7.247115612030029
    10. '   ' → logprob: -8.497116088867188

Token 263: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.01253272220492363
    2. '=' → logprob: -4.387532711029053
    3. '=[]' → logprob: -10.762533187866211
    4. ',' → logprob: -14.137533187866211
    5. ' ' → logprob: -15.387533187866211
    6. ')' → logprob: -15.762533187866211
    7. ' =[' → logprob: -15.762533187866211
    8. ' =
' → logprob: -16.01253318786621
    9. '   ' → logprob: -16.01253318786621
    10. ' =
' → logprob: -16.26253318786621

Token 264: ' []
' (ID: 8911)
  Prédit: '[('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[(' → logprob: -0.04861677438020706
    2. ' [(' → logprob: -3.048616886138916
    3. '[]' → logprob: -10.548616409301758
    4. ' []' → logprob: -12.798616409301758
    5. '[]
' → logprob: -14.673616409301758
    6. ' []
' → logprob: -17.798616409301758
    7. '[' → logprob: -19.173616409301758
    8. '[]

' → logprob: -19.173616409301758
    9. '([(' → logprob: -19.298616409301758
    10. '[((' → logprob: -19.423616409301758

Token 265: '       ' (ID: 309)
  Prédit: 'heap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'heap' → logprob: -0.6565110683441162
    2. '       ' → logprob: -0.7815110683441162
    3. ' heap' → logprob: -3.906511068344116
    4. '(heap' → logprob: -5.906511306762695
    5. 'import' → logprob: -8.031511306762695
    6. 'he' → logprob: -8.156511306762695
    7. '.heap' → logprob: -9.656511306762695
    8. ',' → logprob: -10.031511306762695
    9. '_heap' → logprob: -10.906511306762695
    10. '   ' → logprob: -11.156511306762695

Token 266: ' heap' (ID: 37237)
  Prédit: 'heap'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'heap' (adapté à ' heap') → logprob: -0.014031514525413513
    2. ' heap' → logprob: -4.639031410217285
    3. '       ' → logprob: -6.139031410217285
    4. 'import' → logprob: -6.389031410217285
    5. '(heap' → logprob: -7.889031410217285
    6. 'he' → logprob: -10.014031410217285
    7. ' (' → logprob: -12.889031410217285
    8. '   ' → logprob: -12.889031410217285
    9. '```' → logprob: -13.764031410217285
    10. ' import' → logprob: -13.889031410217285

Token 267: 'q' (ID: 80)
  Prédit: 'q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -3.4121114822482923e-06
    2. '.he' → logprob: -13.375003814697266
    3. 'push' → logprob: -14.250003814697266
    4. '```' → logprob: -14.875003814697266
    5. '.push' → logprob: -15.000003814697266
    6. 'p' → logprob: -15.750003814697266
    7. '[' → logprob: -16.625003814697266
    8. '.append' → logprob: -16.750003814697266
    9. '.' → logprob: -16.875003814697266
    10. 'he' → logprob: -16.875003814697266

Token 268: '.he' (ID: 67786)
  Prédit: '.he'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.he' → logprob: -0.00020497082732617855
    2. '.heap' → logprob: -8.625205039978027
    3. '.' → logprob: -10.625205039978027
    4. 'he' → logprob: -14.500205039978027
    5. ' .' → logprob: -14.875205039978027
    6. '.push' → logprob: -15.750205039978027
    7. '.He' → logprob: -17.25020408630371
    8. ' he' → logprob: -17.62520408630371
    9. '```' → logprob: -18.00020408630371
    10. ').' → logprob: -18.37520408630371

Token 269: 'app' (ID: 903)
  Prédit: 'app'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'app' → logprob: -5.9153885558771435e-06
    2. 'pp' → logprob: -12.125005722045898
    3. 'ap' → logprob: -15.125005722045898
    4. 'push' → logprob: -16.7500057220459
    5. 'q' → logprob: -18.3750057220459
    6. ' app' → logprob: -19.3750057220459
    7. 'a' → logprob: -19.3750057220459
    8. 'appen' → logprob: -19.7500057220459
    9. '```' → logprob: -20.2500057220459
    10. 'p' → logprob: -21.0000057220459

Token 270: 'ush' (ID: 1776)
  Prédit: 'ush'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ush' → logprob: -0.14377747476100922
    2. 'pp' → logprob: -3.018777370452881
    3. 'p' → logprob: -3.143777370452881
    4. 'q' → logprob: -4.018777370452881
    5. 'push' → logprob: -4.143777370452881
    6. 'op' → logprob: -6.018777370452881
    7. 'app' → logprob: -6.393777370452881
    8. 'le' → logprob: -6.893777370452881
    9. 'al' → logprob: -7.768777370452881
    10. 'nl' → logprob: -8.143777847290039

Token 271: '(p' (ID: 2407)
  Prédit: '(p'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(p' → logprob: -6.704273118884885e-07
    2. '(' → logprob: -14.875000953674316
    3. ' (' → logprob: -15.250000953674316
    4. 'pq' → logprob: -17.75
    5. '(q' → logprob: -18.25
    6. '((' → logprob: -20.875
    7. '```' → logprob: -20.875
    8. '(
' → logprob: -21.125
    9. '   ' → logprob: -21.25
    10. ' pq' → logprob: -21.875

Token 272: 'q' (ID: 80)
  Prédit: 'q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -1.282920129597187e-05
    2. '(q' → logprob: -12.375012397766113
    3. '(p' → logprob: -12.375012397766113
    4. 'Q' → logprob: -13.875012397766113
    5. ' q' → logprob: -13.875012397766113
    6. '	q' → logprob: -14.875012397766113
    7. 'pq' → logprob: -15.000012397766113
    8. '(' → logprob: -15.500012397766113
    9. '   ' → logprob: -15.625012397766113
    10. 'p' → logprob: -16.18751335144043

Token 273: ',' (ID: 11)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.04291274771094322
    2. ' (' → logprob: -3.417912721633911
    3. '((' → logprob: -4.79291296005249
    4. ',' → logprob: -7.79291296005249
    5. ')' → logprob: -7.79291296005249
    6. ' ' → logprob: -10.542912483215332
    7. ')(' → logprob: -10.667912483215332
    8. ' )' → logprob: -10.792912483215332
    9. ',(' → logprob: -11.167912483215332
    10. '   ' → logprob: -11.917912483215332

Token 274: ' (' (ID: 350)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -4.246537173457909e-06
    2. ' (' → logprob: -12.375003814697266
    3. ')' → logprob: -19.875003814697266
    4. '   ' → logprob: -20.000003814697266
    5. '0' → logprob: -21.875003814697266
    6. '```' → logprob: -23.000003814697266
    7. ')(' → logprob: -23.625003814697266
    8. ' ' → logprob: -23.625003814697266
    9. '(
' → logprob: -23.750003814697266
    10. '  ' → logprob: -23.875003814697266

Token 275: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.9361264946837764e-07
    2. '(' → logprob: -15.75
    3. ' ' → logprob: -17.25
    4. ')' → logprob: -22.5
    5. '   ' → logprob: -22.5
    6. '```' → logprob: -22.5
    7. '۰' → logprob: -24.0
    8. '00' → logprob: -24.125
    9. '000' → logprob: -24.5
    10. '[' → logprob: -25.125

Token 276: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -9.662937372922897e-05
    2. ' ,' → logprob: -9.250096321105957
    3. ',
' → logprob: -15.125096321105957
    4. '1' → logprob: -17.125097274780273
    5. '<|end|>' → logprob: -17.750097274780273
    6. ')' → logprob: -18.000097274780273
    7. ' ' → logprob: -18.500097274780273
    8. '   ' → logprob: -18.500097274780273
    9. '```' → logprob: -19.000097274780273
    10. '‌,' → logprob: -19.125097274780273

Token 277: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.0206720617134124e-05
    2. ' ' → logprob: -11.50001049041748
    3. '   ' → logprob: -16.750009536743164
    4. '```' → logprob: -19.875009536743164
    5. '  ' → logprob: -20.875009536743164
    6. ')' → logprob: -21.125009536743164
    7. '    ' → logprob: -21.937509536743164
    8. '0' → logprob: -22.375009536743164
    9. ',' → logprob: -22.437509536743164
    10. '[' → logprob: -22.437509536743164

Token 278: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.0280383548888494e-06
    2. ' ' → logprob: -13.875000953674316
    3. '   ' → logprob: -19.250001907348633
    4. '  ' → logprob: -21.750001907348633
    5. ')' → logprob: -21.875001907348633
    6. '```' → logprob: -22.125001907348633
    7. '
' → logprob: -23.125001907348633
    8. ',' → logprob: -23.125001907348633
    9. '    ' → logprob: -23.250001907348633
    10. '۱' → logprob: -23.250001907348633

Token 279: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -5.037835580878891e-05
    2. ' ,' → logprob: -10.12505054473877
    3. '0' → logprob: -11.50005054473877
    4. '   ' → logprob: -17.125049591064453
    5. ',
' → logprob: -17.625049591064453
    6. '```' → logprob: -18.375049591064453
    7. ' ' → logprob: -18.500049591064453
    8. ')' → logprob: -20.500049591064453
    9. '<|end|>' → logprob: -20.750049591064453
    10. '‌,' → logprob: -20.750049591064453

Token 280: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -3.4121114822482923e-06
    2. ' ' → logprob: -12.625003814697266
    3. 'False' → logprob: -17.375003814697266
    4. '   ' → logprob: -19.125003814697266
    5. '۰' → logprob: -21.750003814697266
    6. ' False' → logprob: -22.375003814697266
    7. ')' → logprob: -22.375003814697266
    8. 'false' → logprob: -23.000003814697266
    9. '  ' → logprob: -23.250003814697266
    10. '```' → logprob: -23.375003814697266

Token 281: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: 0.0
    2. ' ' → logprob: -17.375
    3. 'False' → logprob: -17.625
    4. '۰' → logprob: -22.25
    5. '   ' → logprob: -22.75
    6. ')' → logprob: -23.5
    7. 'false' → logprob: -23.875
    8. '```' → logprob: -24.75
    9. '০' → logprob: -25.125
    10. '[' → logprob: -25.125

Token 282: '))

' (ID: 9746)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.00022094044834375381
    2. ')' → logprob: -8.500221252441406
    3. '))
' → logprob: -11.000221252441406
    4. ')))' → logprob: -15.250221252441406
    5. ' ))' → logprob: -15.500221252441406
    6. ')
' → logprob: -16.875221252441406
    7. '))

' → logprob: -17.000221252441406
    8. '));' → logprob: -17.250221252441406
    9. '   ' → logprob: -18.250221252441406
    10. '))
' → logprob: -18.875221252441406

Token 283: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.016991158947348595
    2. ')' → logprob: -4.766991138458252
    3. 'while' → logprob: -5.391991138458252
    4. ' while' → logprob: -6.266991138458252
    5. '   ' → logprob: -6.516991138458252
    6. '	while' → logprob: -9.26699161529541
    7. '
' → logprob: -9.26699161529541
    8. '<|end|>' → logprob: -9.26699161529541
    9. '```' → logprob: -10.26699161529541
    10. '        
' → logprob: -10.26699161529541

Token 284: ' while' (ID: 2049)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' (adapté à ' while') → logprob: -0.02902805618941784
    2. '       ' → logprob: -4.029027938842773
    3. ' while' → logprob: -4.529027938842773
    4. '	while' → logprob: -11.279027938842773
    5. '   ' → logprob: -11.404027938842773
    6. '```' → logprob: -12.904027938842773
    7. ')' → logprob: -14.154027938842773
    8. '        
' → logprob: -14.779027938842773
    9. 'While' → logprob: -14.779027938842773
    10. '      ' → logprob: -17.154027938842773

Token 285: ' pq' (ID: 65424)
  Prédit: 'pq'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pq' → logprob: -0.386899471282959
    2. ' pq' → logprob: -1.136899471282959
    3. 'len' → logprob: -11.386899948120117
    4. ' len' → logprob: -11.886899948120117
    5. 'p' → logprob: -12.386899948120117
    6. ' ' → logprob: -12.761899948120117
    7. '	p' → logprob: -13.761899948120117
    8. '(p' → logprob: -14.136899948120117
    9. '   ' → logprob: -14.136899948120117
    10. '    ' → logprob: -15.636899948120117

Token 286: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.008494842797517776
    2. ':
' → logprob: -5.008494853973389
    3. '[' → logprob: -6.508494853973389
    4. ' and' → logprob: -9.13349437713623
    5. '):' → logprob: -9.63349437713623
    6. 'and' → logprob: -9.88349437713623
    7. ',' → logprob: -10.75849437713623
    8. '!=' → logprob: -11.13349437713623
    9. '):
' → logprob: -11.75849437713623
    10. '.' → logprob: -12.50849437713623

Token 287: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.01691475324332714
    2. ',' → logprob: -4.6419148445129395
    3. '       ' → logprob: -5.7669148445129395
    4. ' ,' → logprob: -6.6419148445129395
    5. 'cost' → logprob: -6.6419148445129395
    6. '(cost' → logprob: -7.7669148445129395
    7. '```' → logprob: -9.016914367675781
    8. ',c' → logprob: -9.141914367675781
    9. '   ' → logprob: -9.516914367675781
    10. 'd' → logprob: -9.641914367675781

Token 288: ' cost' (ID: 3097)
  Prédit: 'cost'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cost' (adapté à ' cost') → logprob: -0.01427692361176014
    2. 'curr' → logprob: -5.51427698135376
    3. 'current' → logprob: -5.76427698135376
    4. 'co' → logprob: -5.88927698135376
    5. 'cur' → logprob: -6.26427698135376
    6. ' cost' → logprob: -6.26427698135376
    7. 'c' → logprob: -9.139276504516602
    8. '(cost' → logprob: -9.389276504516602
    9. '       ' → logprob: -9.764276504516602
    10. 'd' → logprob: -9.764276504516602

Token 289: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0003074566484428942
    2. ' ,' → logprob: -8.125307083129883
    3. '_,' → logprob: -11.625307083129883
    4. ',current' → logprob: -14.125307083129883
    5. ',c' → logprob: -14.250307083129883
    6. ',
' → logprob: -14.500307083129883
    7. ',_' → logprob: -15.500307083129883
    8. '‌,' → logprob: -15.750307083129883
    9. '_' → logprob: -16.750307083129883
    10. '_c' → logprob: -17.125307083129883

Token 290: ' u' (ID: 337)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'u' → logprob: -1.0695863962173462
    2. 'node' → logprob: -1.0695863962173462
    3. ' node' → logprob: -1.3195863962173462
    4. ' u' → logprob: -3.0695862770080566
    5. '   ' → logprob: -12.194586753845215
    6. ' current' → logprob: -12.694586753845215
    7. 'current' → logprob: -13.069586753845215
    8. 'cur' → logprob: -14.444586753845215
    9. 'pos' → logprob: -14.569586753845215
    10. ' ' → logprob: -14.819586753845215

Token 291: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00016325322212651372
    2. ' ,' → logprob: -8.750163078308105
    3. '=' → logprob: -12.750163078308105
    4. '_,' → logprob: -14.375163078308105
    5. ' =' → logprob: -14.500163078308105
    6. ')' → logprob: -15.250163078308105
    7. '<|end|>' → logprob: -15.750163078308105
    8. ',
' → logprob: -16.375164031982422
    9. 's' → logprob: -17.000164031982422
    10. '‌,' → logprob: -17.250164031982422

Token 292: ' used' (ID: 2061)
  Prédit: 'used'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'used' → logprob: -0.00023131117632146925
    2. ' used' → logprob: -8.375231742858887
    3. '_used' → logprob: -15.125231742858887
    4. 'u' → logprob: -15.375231742858887
    5. '0' → logprob: -16.50023078918457
    6. 'use' → logprob: -17.00023078918457
    7. '.used' → logprob: -17.25023078918457
    8. 'us' → logprob: -17.87523078918457
    9. 'USED' → logprob: -18.25023078918457
    10. 'Used' → logprob: -18.37523078918457

Token 293: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6036885380744934
    2. ' =' → logprob: -0.8536885380744934
    3. ')' → logprob: -3.6036884784698486
    4. ')=' → logprob: -8.85368824005127
    5. ' )' → logprob: -13.97868824005127
    6. ' ' → logprob: -15.72868824005127
    7. '_' → logprob: -16.103689193725586
    8. ',' → logprob: -16.603689193725586
    9. ' ' → logprob: -16.603689193725586
    10. ']' → logprob: -16.728689193725586

Token 294: ' heap' (ID: 37237)
  Prédit: 'heap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'heap' → logprob: -0.01815052703022957
    2. ' heap' → logprob: -4.018150329589844
    3. 'he' → logprob: -14.393150329589844
    4. '(heap' → logprob: -17.393150329589844
    5. '.heap' → logprob: -18.268150329589844
    6. '   ' → logprob: -18.518150329589844
    7. ' he' → logprob: -18.768150329589844
    8. '_heap' → logprob: -19.268150329589844
    9. 'Heap' → logprob: -20.893150329589844
    10. '
' → logprob: -21.518150329589844

Token 295: 'q' (ID: 80)
  Prédit: 'q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -7.004696090007201e-05
    2. 'p' → logprob: -10.750069618225098
    3. 'app' → logprob: -11.125069618225098
    4. 'ap' → logprob: -12.250069618225098
    5. 'u' → logprob: -12.375069618225098
    6. 'op' → logprob: -12.500069618225098
    7. '.he' → logprob: -12.625069618225098
    8. '       ' → logprob: -13.000069618225098
    9. '   ' → logprob: -13.125069618225098
    10. '.pop' → logprob: -13.125069618225098

Token 296: '.he' (ID: 67786)
  Prédit: 'q'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -0.14503544569015503
    2. '.he' → logprob: -2.1450355052948
    3. '.pop' → logprob: -5.395035266876221
    4. 'he' → logprob: -5.645035266876221
    5. '.get' → logprob: -6.395035266876221
    6. 'op' → logprob: -6.520035266876221
    7. 'pop' → logprob: -6.645035266876221
    8. '```' → logprob: -6.645035266876221
    9. 'get' → logprob: -6.770035266876221
    10. 's' → logprob: -7.395035266876221

Token 297: 'app' (ID: 903)
  Prédit: 'app'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'app' → logprob: -1.8624639324116288e-06
    2. 'ap' → logprob: -13.750001907348633
    3. 'q' → logprob: -15.375001907348633
    4. 'a' → logprob: -16.000001907348633
    5. 'pp' → logprob: -16.000001907348633
    6. '_app' → logprob: -17.000001907348633
    7. 'appe' → logprob: -17.125001907348633
    8. '[' → logprob: -17.500001907348633
    9. ' app' → logprob: -17.625001907348633
    10. '```' → logprob: -17.750001907348633

Token 298: 'op' (ID: 467)
  Prédit: 'ush'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ush' → logprob: -0.01892835460603237
    2. 'op' → logprob: -4.268928527832031
    3. 'app' → logprob: -5.393928527832031
    4. 'push' → logprob: -9.643928527832031
    5. 'he' → logprob: -10.393928527832031
    6. 'q' → logprob: -10.393928527832031
    7. 'ap' → logprob: -11.143928527832031
    8. 'p' → logprob: -11.268928527832031
    9. 'e' → logprob: -11.518928527832031
    10. 'u' → logprob: -11.643928527832031

Token 299: '(p' (ID: 2407)
  Prédit: '(p'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(p' → logprob: -8.065608562901616e-05
    2. '(' → logprob: -9.750081062316895
    3. 'pq' → logprob: -11.000081062316895
    4. ' (' → logprob: -12.875081062316895
    5. ' pq' → logprob: -13.500081062316895
    6. ')' → logprob: -15.250081062316895
    7. '(
' → logprob: -15.250081062316895
    8. ',p' → logprob: -15.500081062316895
    9. '   ' → logprob: -15.500081062316895
    10. 'p' → logprob: -15.750081062316895

Token 300: 'q' (ID: 80)
  Prédit: 'q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -1.1472419600977446e-06
    2. ')' → logprob: -15.250000953674316
    3. ' q' → logprob: -15.500000953674316
    4. '
' → logprob: -15.625000953674316
    5. '	q' → logprob: -15.625000953674316
    6. ')
' → logprob: -16.250001907348633
    7. 'Q' → logprob: -17.500001907348633
    8. 'pq' → logprob: -17.500001907348633
    9. ',' → logprob: -17.625001907348633
    10. '```' → logprob: -18.125001907348633

Token 301: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.20145338773727417
    2. ')
' → logprob: -1.701453447341919
    3. '           ' → logprob: -10.70145320892334
    4. ')
' → logprob: -11.07645320892334
    5. ')

' → logprob: -13.57645320892334
    6. '       ' → logprob: -15.32645320892334
    7. '   ' → logprob: -16.201454162597656
    8. ' )' → logprob: -16.326454162597656
    9. '),' → logprob: -16.451454162597656
    10. ')`
' → logprob: -16.576454162597656

Token 302: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.028937267139554024
    2. '<|end|>' → logprob: -4.653937339782715
    3. '
' → logprob: -4.778937339782715
    4. '            
' → logprob: -5.153937339782715
    5. ' 
' → logprob: -6.528937339782715
    6. '       ' → logprob: -6.903937339782715
    7. ' if' → logprob: -7.528937339782715
    8. '  
' → logprob: -7.653937339782715
    9. '    
' → logprob: -8.153937339782715
    10. 'if' → logprob: -8.528937339782715

Token 303: ' if' (ID: 538)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.010550039820373058
    2. '
' → logprob: -5.135550022125244
    3. '            
' → logprob: -6.010550022125244
    4. ' if' → logprob: -6.510550022125244
    5. 'if' (adapté à ' if') → logprob: -7.885550022125244
    6. '       ' → logprob: -9.385550498962402
    7. ' 
' → logprob: -9.510550498962402
    8. '  
' → logprob: -10.385550498962402
    9. '    
' → logprob: -10.385550498962402
    10. '   ' → logprob: -10.510550498962402

Token 304: ' dist' (ID: 3601)
  Prédit: 'dist'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dist' → logprob: -0.3853479325771332
    2. ' dist' → logprob: -1.6353479623794556
    3. 'cost' → logprob: -2.260347843170166
    4. ' cost' → logprob: -3.885347843170166
    5. '	dist' → logprob: -10.385348320007324
    6. '   ' → logprob: -11.510348320007324
    7. ' ' → logprob: -13.385348320007324
    8. '(dist' → logprob: -13.635348320007324
    9. '(cost' → logprob: -14.260348320007324
    10. '_dist' → logprob: -15.135348320007324

Token 305: '[u' (ID: 48750)
  Prédit: '[u'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[u' → logprob: -1.9361264946837764e-07
    2. '[' → logprob: -16.25
    3. ' [' → logprob: -17.375
    4. 'u' → logprob: -18.25
    5. 'cost' → logprob: -18.5
    6. '<u' → logprob: -19.625
    7. '```' → logprob: -20.0
    8. '[user' → logprob: -20.125
    9. ')[' → logprob: -20.25
    10. '][' → logprob: -20.5

Token 306: '][' (ID: 2696)
  Prédit: ']['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '][' → logprob: -0.2526739239692688
    2. '[' → logprob: -1.502673864364624
    3. '[u' → logprob: -7.252674102783203
    4. ']' → logprob: -11.877674102783203
    5. ' ][' → logprob: -12.002674102783203
    6. '[user' → logprob: -12.127674102783203
    7. ' [' → logprob: -12.877674102783203
    8. ')[' → logprob: -13.127674102783203
    9. '[cur' → logprob: -13.502674102783203
    10. '[c' → logprob: -13.627674102783203

Token 307: 'used' (ID: 4943)
  Prédit: 'used'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'used' → logprob: -1.9361264946837764e-07
    2. ' used' → logprob: -15.75
    3. '-used' → logprob: -21.625
    4. '.used' → logprob: -22.125
    5. '_used' → logprob: -22.5
    6. 'using' → logprob: -23.25
    7. 'use' → logprob: -23.875
    8. 'user' → logprob: -23.875
    9. 'us' → logprob: -24.25
    10. 'Used' → logprob: -24.5

Token 308: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.03244980797171593
    2. ' <' → logprob: -4.157449722290039
    3. '<' → logprob: -4.532449722290039
    4. ']<' → logprob: -5.282449722290039
    5. ' ]' → logprob: -8.282449722290039
    6. ']!=' → logprob: -8.782449722290039
    7. '!=' → logprob: -11.782449722290039
    8. '>' → logprob: -12.157449722290039
    9. ']>' → logprob: -12.657449722290039
    10. ' !=' → logprob: -12.782449722290039

Token 309: ' <' (ID: 464)
  Prédit: '<'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<' → logprob: -0.023321760818362236
    2. ' <' → logprob: -3.7733218669891357
    3. '<u' → logprob: -10.898322105407715
    4. '<int' → logprob: -11.523322105407715
    5. '<c' → logprob: -11.523322105407715
    6. '<v' → logprob: -12.023322105407715
    7. '<m' → logprob: -12.398322105407715
    8. '<n' → logprob: -12.523322105407715
    9. '!=' → logprob: -12.523322105407715
    10. '<p' → logprob: -12.773322105407715

Token 310: ' cost' (ID: 3097)
  Prédit: 'cost'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cost' → logprob: -0.3132617771625519
    2. ' cost' → logprob: -1.3132617473602295
    3. '(cost' → logprob: -16.938261032104492
    4. '_cost' → logprob: -17.938261032104492
    5. 'co' → logprob: -18.688261032104492
    6. 'Cost' → logprob: -19.688261032104492
    7. ' ' → logprob: -19.813261032104492
    8. ' kost' → logprob: -20.063261032104492
    9. '.cost' → logprob: -20.563261032104492
    10. '-cost' → logprob: -20.688261032104492

Token 311: ':
' (ID: 734)
  Prédit: ':
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':
' → logprob: -0.46440279483795166
    2. ':' → logprob: -1.7144027948379517
    3. '           ' → logprob: -1.7144027948379517
    4. '               ' → logprob: -4.714402675628662
    5. ' continue' → logprob: -6.589402675628662
    6. 'continue' → logprob: -7.214402675628662
    7. '       ' → logprob: -9.46440315246582
    8. '	continue' → logprob: -9.71440315246582
    9. '   ' → logprob: -9.96440315246582
    10. '):
' → logprob: -10.46440315246582

Token 312: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.023372195661067963
    2. '           ' → logprob: -3.898372173309326
    3. ' continue' → logprob: -6.523372173309326
    4. 'continue' → logprob: -6.648372173309326
    5. ':' → logprob: -11.148372650146484
    6. ':
' → logprob: -11.398372650146484
    7. '	continue' → logprob: -11.648372650146484
    8. '_continue' → logprob: -12.023372650146484
    9. '
' → logprob: -12.148372650146484
    10. '                   ' → logprob: -12.898372650146484

Token 313: ' continue' (ID: 4901)
  Prédit: 'continue'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'continue' (adapté à ' continue') → logprob: -0.11342178285121918
    2. ' continue' → logprob: -2.613421678543091
    3. '               ' → logprob: -3.863421678543091
    4. '           ' → logprob: -4.36342191696167
    5. '	continue' → logprob: -8.988421440124512
    6. '_continue' → logprob: -9.738421440124512
    7. 'contin' → logprob: -11.488421440124512
    8. '                   ' → logprob: -12.113421440124512
    9. '
' → logprob: -12.613421440124512
    10. '		' → logprob: -13.113421440124512

Token 314: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.01072189025580883
    2. '<|end|>' → logprob: -5.135721683502197
    3. '            
' → logprob: -5.885721683502197
    4. ' 
' → logprob: -6.885721683502197
    5. '  
' → logprob: -8.635722160339355
    6. '       ' → logprob: -8.885722160339355
    7. ')' → logprob: -9.010722160339355
    8. '          ' → logprob: -9.135722160339355
    9. '
' → logprob: -9.135722160339355
    10. '    
' → logprob: -10.010722160339355

Token 315: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.013317282311618328
    2. '<|end|>' → logprob: -5.138317108154297
    3. '            
' → logprob: -5.263317108154297
    4. '          ' → logprob: -7.763317108154297
    5. ' 
' → logprob: -7.763317108154297
    6. '            ' → logprob: -8.263317108154297
    7. '  
' → logprob: -8.388317108154297
    8. '       ' → logprob: -8.388317108154297
    9. ')' → logprob: -8.888317108154297
    10. '           
' → logprob: -9.263317108154297

Token 316: ' if' (ID: 538)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.01925957389175892
    2. ' for' → logprob: -4.394259452819824
    3. '            
' → logprob: -5.894259452819824
    4. 'for' → logprob: -6.519259452819824
    5. ' if' → logprob: -6.894259452819824
    6. '       ' → logprob: -7.644259452819824
    7. 'if' (adapté à ' if') → logprob: -7.769259452819824
    8. '
' → logprob: -8.519259452819824
    9. '   ' → logprob: -9.019259452819824
    10. '        
' → logprob: -9.519259452819824

Token 317: ' u' (ID: 337)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'u' → logprob: -0.0040785204619169235
    2. ' u' → logprob: -5.504078388214111
    3. '	u' → logprob: -16.379077911376953
    4. ' ' → logprob: -18.879077911376953
    5. '   ' → logprob: -19.129077911376953
    6. ' ' → logprob: -19.254077911376953
    7. '[u' → logprob: -19.504077911376953
    8. '(u' → logprob: -20.129077911376953
    9. '```' → logprob: -21.004077911376953
    10. '<u' → logprob: -21.504077911376953

Token 318: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.007608755491673946
    2. '==' → logprob: -4.882608890533447
    3. ')==' → logprob: -13.632608413696289
    4. ']==' → logprob: -14.382608413696289
    5. ' ' → logprob: -15.132608413696289
    6. ' =' → logprob: -15.757608413696289
    7. '=' → logprob: -15.882608413696289
    8. ')' → logprob: -16.25760841369629
    9. '==
' → logprob: -16.75760841369629
    10. ' ==
' → logprob: -16.75760841369629

Token 319: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.10020667314529419
    2. ' n' → logprob: -2.3502066135406494
    3. '	n' → logprob: -17.72520637512207
    4. ' ' → logprob: -17.97520637512207
    5. '   ' → logprob: -17.97520637512207
    6. ' ' → logprob: -19.35020637512207
    7. '_n' → logprob: -20.35020637512207
    8. '    ' → logprob: -20.72520637512207
    9. '2' → logprob: -21.22520637512207
    10. '<|end|>' → logprob: -21.22520637512207

Token 320: ':
' (ID: 734)
  Prédit: ':
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':
' → logprob: -0.38834941387176514
    2. ':' → logprob: -1.1383494138717651
    3. ' and' → logprob: -7.013349533081055
    4. '           ' → logprob: -7.638349533081055
    5. '               ' → logprob: -9.763349533081055
    6. '):
' → logprob: -11.638349533081055
    7. 'and' → logprob: -11.763349533081055
    8. ':
' → logprob: -12.388349533081055
    9. ' :
' → logprob: -12.513349533081055
    10. ':return' → logprob: -12.513349533081055

Token 321: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.1803537756204605
    2. '           ' → logprob: -1.8053537607192993
    3. '
' → logprob: -7.68035364151001
    4. ':
' → logprob: -10.055354118347168
    5. ' return' → logprob: -11.055354118347168
    6. '       ' → logprob: -11.430354118347168
    7. '              ' → logprob: -11.805354118347168
    8. '	       ' → logprob: -11.805354118347168
    9. '            
' → logprob: -11.930354118347168
    10. '	           ' → logprob: -11.930354118347168

Token 322: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0010627019219100475
    2. ' print' → logprob: -7.001062870025635
    3. '           ' → logprob: -9.501062393188477
    4. '               ' → logprob: -9.751062393188477
    5. 'break' → logprob: -11.126062393188477
    6. 'return' → logprob: -12.626062393188477
    7. ' break' → logprob: -16.376062393188477
    8. '   ' → logprob: -17.626062393188477
    9. '	print' → logprob: -18.001062393188477
    10. ' return' → logprob: -18.001062393188477

Token 323: ' On' (ID: 2160)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -2.975612187583465e-05
    2. '           ' → logprob: -11.250029563903809
    3. ' print' → logprob: -11.500029563903809
    4. 'return' → logprob: -12.000029563903809
    5. 'break' → logprob: -15.250029563903809
    6. '               ' → logprob: -16.625030517578125
    7. '       ' → logprob: -17.500030517578125
    8. '   ' → logprob: -19.625030517578125
    9. ' return' → logprob: -20.250030517578125
    10. '```' → logprob: -20.375030517578125

Token 324: ' a' (ID: 261)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.6395601034164429
    2. '           ' → logprob: -0.8895601034164429
    3. '               ' → logprob: -3.0145602226257324
    4. ' print' → logprob: -4.514560222625732
    5. '#print' → logprob: -7.639560222625732
    6. '#' → logprob: -8.264559745788574
    7. '                   ' → logprob: -8.764559745788574
    8. '
' → logprob: -8.889559745788574
    9. '       ' → logprob: -9.014559745788574
    10. '   ' → logprob: -9.764559745788574

Token 325: ' atteint' (ID: 104876)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.2882298529148102
    2. ' print' → logprob: -1.4132298231124878
    3. '           ' → logprob: -5.038229942321777
    4. '       ' → logprob: -8.788229942321777
    5. '               ' → logprob: -9.288229942321777
    6. 'break' → logprob: -9.413229942321777
    7. '   ' → logprob: -10.163229942321777
    8. '#print' → logprob: -10.538229942321777
    9. 'return' → logprob: -10.663229942321777
    10. '_print' → logprob: -10.913229942321777

Token 326: ' la' (ID: 557)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.33685755729675293
    2. ' n' → logprob: -1.336857557296753
    3. 'le' → logprob: -4.336857795715332
    4. ' le' → logprob: -4.961857795715332
    5. ' the' → logprob: -6.586857795715332
    6. ' la' → logprob: -7.211857795715332
    7. 'the' → logprob: -7.711857795715332
    8. 'l' → logprob: -8.336857795715332
    9. '           ' → logprob: -8.961857795715332
    10. 'la' → logprob: -9.211857795715332

Token 327: ' destination' (ID: 13330)
  Prédit: 'destination'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'destination' → logprob: -0.0018800891702994704
    2. ' destination' → logprob: -7.376880168914795
    3. 'dest' → logprob: -7.751880168914795
    4. 'print' → logprob: -8.376879692077637
    5. 'fin' → logprob: -8.376879692077637
    6. 'node' → logprob: -8.876879692077637
    7. 'plus' → logprob: -9.126879692077637
    8. 'target' → logprob: -11.126879692077637
    9. 'final' → logprob: -11.251879692077637
    10. 'n' → logprob: -11.251879692077637

Token 328: ',' (ID: 11)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.158868208527565
    2. '               ' → logprob: -2.0338683128356934
    3. '
' → logprob: -4.158868312835693
    4. '            
' → logprob: -8.783867835998535
    5. 'print' → logprob: -9.033867835998535
    6. ',' → logprob: -9.533867835998535
    7. ' print' → logprob: -10.783867835998535
    8. '                
' → logprob: -11.283867835998535
    9. '                   ' → logprob: -12.158867835998535
    10. ':
' → logprob: -12.158867835998535

Token 329: ' affich' (ID: 90179)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.1354019045829773
    2. ' print' → logprob: -2.385401964187622
    3. '           ' → logprob: -3.385401964187622
    4. '               ' → logprob: -7.260401725769043
    5. 'break' → logprob: -11.510401725769043
    6. '       ' → logprob: -12.635401725769043
    7. ' break' → logprob: -13.260401725769043
    8. '	print' → logprob: -14.635401725769043
    9. '#print' → logprob: -15.760401725769043
    10. '   ' → logprob: -15.760401725769043

Token 330: 'age' (ID: 477)
  Prédit: 'er'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.0005078765680082142
    2. 'é' → logprob: -8.125508308410645
    3. 'e' → logprob: -8.750508308410645
    4. '               ' → logprob: -10.375508308410645
    5. '           ' → logprob: -11.000508308410645
    6. 'print' → logprob: -13.250508308410645
    7. 'her' → logprob: -13.750508308410645
    8. '       ' → logprob: -14.125508308410645
    9. '   ' → logprob: -14.500508308410645
    10. 'ier' → logprob: -15.125508308410645

Token 331: ' immédi' (ID: 69896)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.0897422581911087
    2. '           ' → logprob: -2.7147421836853027
    3. ',' → logprob: -4.839742183685303
    4. '
' → logprob: -4.964742183685303
    5. '(' → logprob: -6.464742183685303
    6. '(cost' → logprob: -6.464742183685303
    7. 'print' → logprob: -7.589742183685303
    8. '                   ' → logprob: -8.089742660522461
    9. '                
' → logprob: -9.339742660522461
    10. ',
' → logprob: -9.339742660522461

Token 332: 'at' (ID: 266)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.07304440438747406
    2. '           ' → logprob: -3.3230443000793457
    3. 'er' → logprob: -4.323044300079346
    4. '(' → logprob: -4.573044300079346
    5. 'ation' → logprob: -5.573044300079346
    6. 'ent' → logprob: -6.573044300079346
    7. 'ement' → logprob: -6.573044300079346
    8. '       ' → logprob: -6.948044300079346
    9. '   ' → logprob: -7.698044300079346
    10. 'print' → logprob: -8.198044776916504

Token 333: ' possible' (ID: 4149)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.26516959071159363
    2. '               ' → logprob: -1.640169620513916
    3. '
' → logprob: -3.265169620513916
    4. 'print' → logprob: -8.140169143676758
    5. '            
' → logprob: -8.640169143676758
    6. ',' → logprob: -8.890169143676758
    7. ' print' → logprob: -9.765169143676758
    8. ',
' → logprob: -10.515169143676758
    9. '                
' → logprob: -10.640169143676758
    10. ')
' → logprob: -11.640169143676758

Token 334: ' mais' (ID: 2899)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.05314579978585243
    2. '
' → logprob: -3.3031458854675293
    3. '               ' → logprob: -4.303145885467529
    4. '            
' → logprob: -6.678145885467529
    5. 'print' → logprob: -9.303145408630371
    6. '  
' → logprob: -10.303145408630371
    7. '    
' → logprob: -10.678145408630371
    8. '                
' → logprob: -11.303145408630371
    9. ',' → logprob: -11.678145408630371
    10. ' print' → logprob: -12.053145408630371

Token 335: ' on' (ID: 402)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.08355603367090225
    2. '#' → logprob: -3.2085559368133545
    3. 'continue' → logprob: -4.458556175231934
    4. '               ' → logprob: -4.833556175231934
    5. 'break' → logprob: -5.083556175231934
    6. '       ' → logprob: -5.208556175231934
    7. 'pas' → logprob: -5.958556175231934
    8. ' pas' → logprob: -6.708556175231934
    9. 'il' → logprob: -6.833556175231934
    10. ' #' → logprob: -6.958556175231934

Token 336: ' continue' (ID: 4901)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.5307689905166626
    2. '           ' → logprob: -1.5307689905166626
    3. 'continue' → logprob: -2.030768871307373
    4. ' continue' → logprob: -3.030768871307373
    5. ' should' → logprob: -5.655768871307373
    6. 'should' → logprob: -6.155768871307373
    7. '```' → logprob: -6.155768871307373
    8. 'break' → logprob: -6.530768871307373
    9. '
' → logprob: -6.780768871307373
    10. ' can' → logprob: -7.155768871307373

Token 337: ' pour' (ID: 1930)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.016585921868681908
    2. '            
' → logprob: -4.516585826873779
    3. '<|end|>' → logprob: -6.266585826873779
    4. '               ' → logprob: -6.641585826873779
    5. '
' → logprob: -7.016585826873779
    6. '            ' → logprob: -8.266586303710938
    7. '  
' → logprob: -8.516586303710938
    8. ' to' → logprob: -8.766586303710938
    9. '    
' → logprob: -9.141586303710938
    10. ' for' → logprob: -9.141586303710938

Token 338: ' s' (ID: 265)
  Prédit: 'optim'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'optim' → logprob: -0.7261462211608887
    2. '#' → logprob: -1.4761462211608887
    3. 'ass' → logprob: -2.1011462211608887
    4. 'expl' → logprob: -3.6011462211608887
    5. ' garantir' → logprob: -3.9761462211608887
    6. 'tr' → logprob: -4.101146221160889
    7. ' trouver' → logprob: -4.351146221160889
    8. '   ' → logprob: -4.351146221160889
    9. 'find' → logprob: -4.726146221160889
    10. 'voir' → logprob: -4.726146221160889

Token 339: ''assurer' (ID: 193756)
  Prédit: ''assurer'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''assurer' → logprob: -0.006265062838792801
    2. ''ass' → logprob: -5.881265163421631
    3. '’assurer' → logprob: -6.506265163421631
    4. 'ass' → logprob: -6.756265163421631
    5. 'urer' → logprob: -8.506264686584473
    6. '''' → logprob: -8.756264686584473
    7. 'avoir' → logprob: -8.881264686584473
    8. 'u' → logprob: -9.756264686584473
    9. ' assurer' → logprob: -10.006264686584473
    10. 'urtout' → logprob: -10.381264686584473

Token 340: ' du' (ID: 1462)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 341: ' minimum' (ID: 11085)
  Prédit: 'me'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'me' → logprob: -0.22507916390895844
    2. 'minimum' → logprob: -2.22507905960083
    3. ' meilleur' → logprob: -2.85007905960083
    4. 'plus' → logprob: -4.60007905960083
    5. 'moins' → logprob: -4.97507905960083
    6. 'possible' → logprob: -5.60007905960083
    7. '```' → logprob: -5.97507905960083
    8. 'minimal' → logprob: -5.97507905960083
    9. 'optimal' → logprob: -6.22507905960083
    10. 'min' → logprob: -6.72507905960083

Token 342: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.03480862081050873
    2. '
' → logprob: -4.40980863571167
    3. '               ' → logprob: -4.65980863571167
    4. '            
' → logprob: -4.65980863571167
    5. '<|end|>' → logprob: -6.90980863571167
    6. '.' → logprob: -7.53480863571167
    7. ',
' → logprob: -8.034808158874512
    8. '            ' → logprob: -8.409808158874512
    9. '\n' → logprob: -8.659808158874512
    10. ',' → logprob: -8.784808158874512

Token 343: '               ' (ID: 506)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0848703533411026
    2. '
' → logprob: -2.5848703384399414
    3. '            
' → logprob: -5.334870338439941
    4. '<|end|>' → logprob: -7.709870338439941
    5. '               ' → logprob: -8.209870338439941
    6. '\n' → logprob: -9.209870338439941
    7. '  
' → logprob: -9.584870338439941
    8. '    
' → logprob: -9.709870338439941
    9. ' continue' → logprob: -10.709870338439941
    10. ',' → logprob: -10.834870338439941

Token 344: ' #' (ID: 1069)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.7562292218208313
    2. ' continue' → logprob: -1.2562291622161865
    3. 'continue' → logprob: -1.5062291622161865
    4. '       ' → logprob: -4.881229400634766
    5. 'pass' → logprob: -5.131229400634766
    6. ' pass' → logprob: -5.381229400634766
    7. '               ' → logprob: -6.006229400634766
    8. '#' (adapté à ' #') → logprob: -7.506229400634766
    9. 'if' → logprob: -7.631229400634766
    10. 'for' → logprob: -7.756229400634766

Token 345: ' On' (ID: 2160)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' continue' → logprob: -0.3574395477771759
    2. 'continue' → logprob: -1.8574395179748535
    3. '           ' → logprob: -2.1074395179748535
    4. '       ' → logprob: -4.6074395179748535
    5. '#' → logprob: -4.7324395179748535
    6. '
' → logprob: -6.1074395179748535
    7. ' #' → logprob: -7.4824395179748535
    8. 'pass' → logprob: -8.232439994812012
    9. ' pass' → logprob: -8.357439994812012
    10. '               ' → logprob: -8.482439994812012

Token 346: ' peut' (ID: 9216)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' continue' → logprob: -0.6039081811904907
    2. 'continue' → logprob: -0.8539081811904907
    3. '           ' → logprob: -3.853908061981201
    4. '       ' → logprob: -5.603908061981201
    5. 'pass' → logprob: -7.728908061981201
    6. 'contin' → logprob: -7.853908061981201
    7. ' continuer' → logprob: -8.35390853881836
    8. '_continue' → logprob: -8.60390853881836
    9. ' pass' → logprob: -8.72890853881836
    10. 'n' → logprob: -8.85390853881836

Token 347: ' sortir' (ID: 55515)
  Prédit: 'contin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'contin' → logprob: -0.28316429257392883
    2. 'continue' → logprob: -1.6581642627716064
    3. 'pass' → logprob: -3.9081642627716064
    4. ' continuer' → logprob: -4.1581645011901855
    5. 'pas' → logprob: -6.2831645011901855
    6. 'ret' → logprob: -6.5331645011901855
    7. 'just' → logprob: -6.6581645011901855
    8. 'mettre' → logprob: -6.7831645011901855
    9. 'aff' → logprob: -6.9081645011901855
    10. 'aj' → logprob: -6.9081645011901855

Token 348: ' dès' (ID: 37926)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.6749969124794006
    2. '               ' → logprob: -1.2999968528747559
    3. '
' → logprob: -1.7999968528747559
    4. '            
' → logprob: -3.549996852874756
    5. '       ' → logprob: -4.924996852874756
    6. '            ' → logprob: -6.049996852874756
    7. '                ' → logprob: -6.299996852874756
    8. '  
' → logprob: -6.674996852874756
    9. '<|end|>' → logprob: -6.799996852874756
    10. '                
' → logprob: -6.799996852874756

Token 349: ' qu' (ID: 474)
  Prédit: ' que'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.16668987274169922
    2. 'que' → logprob: -2.291689872741699
    3. ' ici' → logprob: -3.541689872741699
    4. 'u' → logprob: -5.291689872741699
    5. '   ' → logprob: -5.791689872741699
    6. 'l' → logprob: -5.791689872741699
    7. 'cost' → logprob: -6.166689872741699
    8. ' qu' → logprob: -6.416689872741699
    9. ' here' → logprob: -6.541689872741699
    10. 'le' → logprob: -6.666689872741699

Token 350: ''on' (ID: 25812)
  Prédit: ' dist'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' dist' → logprob: -0.21868585050106049
    2. ' cost' → logprob: -2.2186858654022217
    3. ' u' → logprob: -2.9686858654022217
    4. 'dist' → logprob: -4.093685626983643
    5. 'u' → logprob: -4.468685626983643
    6. 'cost' → logprob: -4.968685626983643
    7. ' que' → logprob: -8.0936861038208
    8. ' coût' → logprob: -8.5936861038208
    9. '           ' → logprob: -9.0936861038208
    10. ' isinstance' → logprob: -9.2186861038208

Token 351: ' pop' (ID: 2735)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -1.4580397605895996
    2. 'pop' → logprob: -2.3330397605895996
    3. ' find' → logprob: -2.4580397605895996
    4. ' have' → logprob: -2.4580397605895996
    5. 'find' → logprob: -2.8330397605895996
    6. 'have' → logprob: -2.9580397605895996
    7. 'u' → logprob: -3.0830397605895996
    8. 'dist' → logprob: -3.2080397605895996
    9. 'continue' → logprob: -3.2080397605895996
    10. ' continue' → logprob: -3.4580397605895996

Token 352: ' car' (ID: 1669)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '               ' → logprob: -1.169197916984558
    2. ' (' → logprob: -1.419197916984558
    3. '           ' → logprob: -2.2941980361938477
    4. ')' → logprob: -2.5441980361938477
    5. '(u' → logprob: -3.0441980361938477
    6. 'cost' → logprob: -3.2941980361938477
    7. '(' → logprob: -3.5441980361938477
    8. '(cost' → logprob: -3.6691980361938477
    9. ' cost' → logprob: -3.7941980361938477
    10. 'u' → logprob: -3.7941980361938477

Token 353: ' la' (ID: 557)
  Prédit: ' dist'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' dist' → logprob: -0.9044420123100281
    2. ' u' → logprob: -1.2794420719146729
    3. 'u' → logprob: -1.6544420719146729
    4. ' cost' → logprob: -3.029442071914673
    5. 'dist' → logprob: -3.154442071914673
    6. 'cost' → logprob: -3.529442071914673
    7. ' the' → logprob: -6.279441833496094
    8. '(u' → logprob: -8.154441833496094
    9. ' True' → logprob: -8.154441833496094
    10. 'True' → logprob: -8.154441833496094

Token 354: ' file' (ID: 1974)
  Prédit: 'dist'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dist' → logprob: -0.47339537739753723
    2. ' dist' → logprob: -1.3483953475952148
    3. 'cost' → logprob: -2.723395347595215
    4. ' cost' → logprob: -4.223395347595215
    5. ' pq' → logprob: -4.348395347595215
    6. 'pq' → logprob: -4.848395347595215
    7. 'heap' → logprob: -5.098395347595215
    8. ' heap' → logprob: -5.723395347595215
    9. 'u' → logprob: -6.598395347595215
    10. 'co' → logprob: -7.223395347595215

Token 355: ' est' (ID: 893)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.6037948727607727
    2. 'q' → logprob: -1.603794813156128
    3. '               ' → logprob: -2.103794813156128
    4. '       ' → logprob: -2.978794813156128
    5. 'is' → logprob: -4.353795051574707
    6. 'heap' → logprob: -4.478795051574707
    7. 'est' → logprob: -4.603795051574707
    8. 'n' → logprob: -4.853795051574707
    9. ' est' → logprob: -5.103795051574707
    10. ' n' → logprob: -5.103795051574707

Token 356: ' tri' (ID: 12665)
  Prédit: ' vide'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' vide' → logprob: -0.8665680885314941
    2. 'vide' → logprob: -0.9915680885314941
    3. 'empty' → logprob: -2.241568088531494
    4. 'tri' → logprob: -3.616568088531494
    5. 'min' → logprob: -4.366568088531494
    6. 'not' → logprob: -4.616568088531494
    7. 'priority' → logprob: -4.741568088531494
    8. 'vid' → logprob: -5.241568088531494
    9. 'ordered' → logprob: -5.241568088531494
    10. 'ord' → logprob: -5.366568088531494

Token 357: 'ée' (ID: 2894)
  Prédit: 'ée'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ée' → logprob: -0.05637656897306442
    2. 'ang' → logprob: -3.6813764572143555
    3. 'min' → logprob: -4.3063764572143555
    4. 'é' → logprob: -5.3063764572143555
    5. 'quée' → logprob: -6.0563764572143555
    6. 'angle' → logprob: -6.3063764572143555
    7. 'ee' → logprob: -6.5563764572143555
    8. 'rée' → logprob: -7.0563764572143555
    9. 'ante' → logprob: -7.6813764572143555
    10. 'e' → logprob: -7.6813764572143555

Token 358: ' et' (ID: 859)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.10223610699176788
    2. '               ' → logprob: -2.477236032485962
    3. '            
' → logprob: -5.477236270904541
    4. '
' → logprob: -5.727236270904541
    5. '.' → logprob: -6.227236270904541
    6. ',' → logprob: -6.477236270904541
    7. ')' → logprob: -7.352236270904541
    8. '                   ' → logprob: -7.852236270904541
    9. '                
' → logprob: -8.477235794067383
    10. ':' → logprob: -9.102235794067383

Token 359: ' ce' (ID: 2357)
  Prédit: ' dist'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' dist' → logprob: -0.2506427764892578
    2. 'dist' → logprob: -2.375642776489258
    3. ' cost' → logprob: -2.750642776489258
    4. 'cost' → logprob: -2.750642776489258
    5. 'co' → logprob: -7.875642776489258
    6. ' le' → logprob: -9.000642776489258
    7. ' coût' → logprob: -9.500642776489258
    8. 'le' → logprob: -10.000642776489258
    9. ' que' → logprob: -10.000642776489258
    10. '           ' → logprob: -10.125642776489258

Token 360: ' sera' (ID: 15511)
  Prédit: ' coût'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' coût' → logprob: -1.0095294713974
    2. 'cost' → logprob: -1.2595294713974
    3. ' cost' → logprob: -2.0095295906066895
    4. ' code' → logprob: -2.5095295906066895
    5. ' n' → logprob: -3.2595295906066895
    6. 'co' → logprob: -3.6345295906066895
    7. 'u' → logprob: -4.8845295906066895
    8. 'n' → logprob: -4.8845295906066895
    9. ' cout' → logprob: -5.0095295906066895
    10. ' if' → logprob: -5.2595295906066895

Token 361: ' le' (ID: 505)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.5518953800201416
    2. ' le' → logprob: -1.4268953800201416
    3. 'le' → logprob: -2.3018953800201416
    4. ' the' → logprob: -3.3018953800201416
    5. ' minimal' → logprob: -4.4268951416015625
    6. 'the' → logprob: -4.5518951416015625
    7. ' cost' → logprob: -5.0518951416015625
    8. ' minimum' → logprob: -5.4268951416015625
    9. 'cost' → logprob: -5.5518951416015625
    10. 'la' → logprob: -6.1768951416015625

Token 362: ' min' (ID: 1349)
  Prédit: 'minimum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'minimum' → logprob: -0.14581499993801117
    2. ' minimum' → logprob: -2.770814895629883
    3. ' minimal' → logprob: -4.020814895629883
    4. 'prem' → logprob: -4.270814895629883
    5. 'min' → logprob: -4.770814895629883
    6. ' meilleur' → logprob: -4.895814895629883
    7. ' premier' → logprob: -5.020814895629883
    8. 'minimal' → logprob: -5.020814895629883
    9. 'me' → logprob: -6.395814895629883
    10. 'plus' → logprob: -6.520814895629883

Token 363: '
' (ID: 198)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.19938211143016815
    2. '           ' → logprob: -2.0743820667266846
    3. '                   ' → logprob: -4.324382305145264
    4. '            ' → logprob: -4.324382305145264
    5. '                ' → logprob: -4.449382305145264
    6. '            
' → logprob: -5.449382305145264
    7. '                
' → logprob: -5.449382305145264
    8. '
' → logprob: -6.199382305145264
    9. '              ' → logprob: -6.574382305145264
    10. ')' → logprob: -6.949382305145264

Token 364: '               ' (ID: 506)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.2559862732887268
    2. '
' → logprob: -1.505986213684082
    3. '            
' → logprob: -5.880986213684082
    4. '               ' → logprob: -7.255986213684082
    5. '  
' → logprob: -9.005986213684082
    6. 'return' → logprob: -9.130986213684082
    7. '
' → logprob: -9.505986213684082
    8. '    
' → logprob: -9.755986213684082
    9. ' return' → logprob: -9.880986213684082
    10. '\n' → logprob: -10.255986213684082

Token 365: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.011009272187948227
    2. 'return' → logprob: -5.261009216308594
    3. 'break' → logprob: -5.761009216308594
    4. '           ' → logprob: -6.011009216308594
    5. '               ' → logprob: -9.011009216308594
    6. ' print' → logprob: -10.261009216308594
    7. ' return' → logprob: -14.011009216308594
    8. ' break' → logprob: -14.511009216308594
    9. '       ' → logprob: -14.886009216308594
    10. '```' → logprob: -15.261009216308594

Token 366: '(cost' (ID: 133554)
  Prédit: '(cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(cost' → logprob: -8.149051427608356e-05
    2. 'cost' → logprob: -9.500081062316895
    3. ' cost' → logprob: -12.000081062316895
    4. '(' → logprob: -14.750081062316895
    5. ' (' → logprob: -18.00008201599121
    6. '(dist' → logprob: -18.75008201599121
    7. '(co' → logprob: -19.62508201599121
    8. '(c' → logprob: -19.75008201599121
    9. 'Cost' → logprob: -20.50008201599121
    10. '_cost' → logprob: -20.87508201599121

Token 367: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.25194019079208374
    2. ')
' → logprob: -1.5019402503967285
    3. ')
' → logprob: -11.50193977355957
    4. ')return' → logprob: -15.00193977355957
    5. ' )' → logprob: -15.12693977355957
    6. ')

' → logprob: -16.25193977355957
    7. '))' → logprob: -16.25193977355957
    8. ' )
' → logprob: -16.62693977355957
    9. ')`
' → logprob: -16.62693977355957
    10. '),' → logprob: -17.12693977355957

Token 368: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.0013315484393388033
    2. '           ' → logprob: -6.626331329345703
    3. '       ' → logprob: -13.126331329345703
    4. 'return' → logprob: -13.876331329345703
    5. '              ' → logprob: -14.001331329345703
    6. '                   ' → logprob: -14.876331329345703
    7. '<|end|>' → logprob: -15.001331329345703
    8. '			' → logprob: -16.001331329345703
    9. '                
' → logprob: -16.126331329345703
    10. '             ' → logprob: -16.126331329345703

Token 369: ' break' (ID: 2338)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.018864715471863747
    2. 'break' (adapté à ' break') → logprob: -4.018864631652832
    3. '               ' → logprob: -8.018864631652832
    4. '           ' → logprob: -8.268864631652832
    5. ' return' → logprob: -9.018864631652832
    6. ' break' → logprob: -11.768864631652832
    7. '       ' → logprob: -16.64386558532715
    8. '	return' → logprob: -17.39386558532715
    9. '
' → logprob: -18.01886558532715
    10. '	break' → logprob: -18.01886558532715

Token 370: '

' (ID: 279)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.1444668024778366
    2. '       ' → logprob: -2.5194668769836426
    3. '        
' → logprob: -4.144466876983643
    4. '            
' → logprob: -4.269466876983643
    5. '<|end|>' → logprob: -5.769466876983643
    6. '   ' → logprob: -5.894466876983643
    7. ' ' → logprob: -5.894466876983643
    8. ' 
' → logprob: -6.019466876983643
    9. '  
' → logprob: -6.019466876983643
    10. '    
' → logprob: -6.394466876983643

Token 371: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.6361753940582275
    2. '           ' → logprob: -0.7611753940582275
    3. '        
' → logprob: -6.386175155639648
    4. '   ' → logprob: -7.011175155639648
    5. '            
' → logprob: -7.636175155639648
    6. 'for' → logprob: -8.511175155639648
    7. ' for' → logprob: -10.261175155639648
    8. '     ' → logprob: -10.386175155639648
    9. '    
' → logprob: -10.511175155639648
    10. '        ' → logprob: -10.761175155639648

Token 372: ' #' (ID: 1069)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.09060332924127579
    2. '       ' → logprob: -2.8406033515930176
    3. ' for' → logprob: -3.5906033515930176
    4. '	for' → logprob: -7.840603351593018
    5. '   ' → logprob: -8.96560287475586
    6. '           ' → logprob: -9.09060287475586
    7. '        
' → logprob: -12.09060287475586
    8. '```' → logprob: -13.09060287475586
    9. '            
' → logprob: -13.09060287475586
    10. '	   ' → logprob: -13.96560287475586

Token 373: ' Exploration' (ID: 139443)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0002036595979006961
    2. ' for' → logprob: -8.500204086303711
    3. '           ' → logprob: -15.750204086303711
    4. '       ' → logprob: -18.87520408630371
    5. '            
' → logprob: -19.62520408630371
    6. '   ' → logprob: -20.25020408630371
    7. '	for' → logprob: -20.50020408630371
    8. 'For' → logprob: -22.37520408630371
    9. ' ' → logprob: -22.62520408630371
    10. '```' → logprob: -22.75020408630371

Token 374: ' des' (ID: 731)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.15555214881896973
    2. '           ' → logprob: -2.1555521488189697
    3. 'for' → logprob: -3.7805521488189697
    4. ',' → logprob: -6.155551910400391
    5. ' of' → logprob: -6.780551910400391
    6. '   ' → logprob: -7.155551910400391
    7. '               ' → logprob: -7.280551910400391
    8. '(u' → logprob: -8.53055191040039
    9. '       ' → logprob: -8.65555191040039
    10. ' ,' → logprob: -9.65555191040039

Token 375: ' voisins' (ID: 166720)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.2876680791378021
    2. 'neighbors' → logprob: -2.162667989730835
    3. ' voisins' → logprob: -2.162667989730835
    4. ' v' → logprob: -4.662668228149414
    5. '(v' → logprob: -5.412668228149414
    6. ' neighbors' → logprob: -5.412668228149414
    7. 'vo' → logprob: -7.287668228149414
    8. 'edges' → logprob: -8.162668228149414
    9. 'for' → logprob: -8.287668228149414
    10. 'neighbor' → logprob: -9.162668228149414

Token 376: ' sans' (ID: 9828)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.14867058396339417
    2. '
' → logprob: -2.1486706733703613
    3. ' for' → logprob: -4.273670673370361
    4. '       ' → logprob: -5.648670673370361
    5. '            
' → logprob: -6.648670673370361
    6. ' 
' → logprob: -7.023670673370361
    7. '   ' → logprob: -8.023670196533203
    8. '    
' → logprob: -8.023670196533203
    9. '<|end|>' → logprob: -8.023670196533203
    10. 'for' → logprob: -8.523670196533203

Token 377: ' utiliser' (ID: 43227)
  Prédit: 're'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 're' → logprob: -0.8450149893760681
    2. ' réduction' → logprob: -1.720015048980713
    3. ' utiliser' → logprob: -1.845015048980713
    4. 'util' → logprob: -2.220015048980713
    5. 'used' → logprob: -3.595015048980713
    6. 'ré' → logprob: -3.720015048980713
    7. ' la' → logprob: -4.470015048980713
    8. ' reduction' → logprob: -4.845015048980713
    9. 'for' → logprob: -5.095015048980713
    10. ' used' → logprob: -5.470015048980713

Token 378: ' la' (ID: 557)
  Prédit: ' la'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.09962274879217148
    2. ' the' → logprob: -3.8496227264404297
    3. ' le' → logprob: -4.09962272644043
    4. ' l' → logprob: -4.47462272644043
    5. ' une' → logprob: -4.84962272644043
    6. 'le' → logprob: -5.34962272644043
    7. ' de' → logprob: -5.34962272644043
    8. 'the' → logprob: -5.47462272644043
    9. 'la' → logprob: -5.59962272644043
    10. ' for' → logprob: -5.84962272644043

Token 379: ' réduction' (ID: 89072)
  Prédit: ' réduction'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' réduction' → logprob: -0.5938485860824585
    2. 're' → logprob: -1.4688485860824585
    3. 'ré' → logprob: -1.7188485860824585
    4. ' reduction' → logprob: -3.468848705291748
    5. 'r' → logprob: -6.468848705291748
    6. 'discount' → logprob: -6.968848705291748
    7. 'rem' → logprob: -7.343848705291748
    8. ' rédu' → logprob: -7.343848705291748
    9. 'redu' → logprob: -7.343848705291748
    10. 'for' → logprob: -7.468848705291748

Token 380: ' (' (ID: 350)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0033294493332505226
    2. '
' → logprob: -5.753329277038574
    3. '       ' → logprob: -9.753329277038574
    4. '   ' → logprob: -10.628329277038574
    5. '            
' → logprob: -10.878329277038574
    6. ' for' → logprob: -11.253329277038574
    7. 'for' → logprob: -12.003329277038574
    8. '               ' → logprob: -12.128329277038574
    9. ':' → logprob: -12.503329277038574
    10. ',' → logprob: -12.503329277038574

Token 381: 'normal' (ID: 14559)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.7077218294143677
    2. ' for' → logprob: -0.8327218294143677
    3. ')' → logprob: -2.832721710205078
    4. '           ' → logprob: -4.707721710205078
    5. ' )' → logprob: -6.457721710205078
    6. '               ' → logprob: -7.082721710205078
    7. ' pour' → logprob: -7.207721710205078
    8. ' or' → logprob: -8.207721710205078
    9. '):
' → logprob: -8.582721710205078
    10. 'pour' → logprob: -8.707721710205078

Token 382: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.060255881398916245
    2. '):
' → logprob: -4.310256004333496
    3. ' )' → logprob: -4.310256004333496
    4. '           ' → logprob: -4.435256004333496
    5. '):' → logprob: -4.935256004333496
    6. ')
' → logprob: -5.060256004333496
    7. 'ement' → logprob: -6.685256004333496
    8. '               ' → logprob: -6.935256004333496
    9. ' )
' → logprob: -7.060256004333496
    10. 'e' → logprob: -7.185256004333496

Token 383: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.02779567986726761
    2. '       ' → logprob: -3.7777957916259766
    3. '
' → logprob: -6.527795791625977
    4. '   ' → logprob: -6.777795791625977
    5. '            
' → logprob: -7.277795791625977
    6. '    
' → logprob: -8.027795791625977
    7. '        
' → logprob: -8.402795791625977
    8. ' for' → logprob: -8.527795791625977
    9. ' 
' → logprob: -8.652795791625977
    10. '  
' → logprob: -9.777795791625977

Token 384: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.6465660333633423
    2. '           ' → logprob: -1.2715660333633423
    3. 'for' (adapté à ' for') → logprob: -1.6465660333633423
    4. '       ' → logprob: -6.646565914154053
    5. '
' → logprob: -7.271565914154053
    6. ' ' → logprob: -7.396565914154053
    7. '   ' → logprob: -8.646566390991211
    8. ' 
' → logprob: -9.271566390991211
    9. '            
' → logprob: -9.396566390991211
    10. '	for' → logprob: -10.146566390991211

Token 385: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.5242674350738525
    2. ' v' → logprob: -0.8992674350738525
    3. '(v' → logprob: -6.899267196655273
    4. ' (' → logprob: -9.274267196655273
    5. ' ' → logprob: -12.024267196655273
    6. '(u' → logprob: -12.149267196655273
    7. ',' → logprob: -12.274267196655273
    8. '	v' → logprob: -12.274267196655273
    9. '   ' → logprob: -12.524267196655273
    10. '  ' → logprob: -12.649267196655273

Token 386: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -8.911954500945285e-05
    2. ',c' → logprob: -9.625088691711426
    3. ' ,' → logprob: -10.750088691711426
    4. ',v' → logprob: -13.875088691711426
    5. ',w' → logprob: -15.000088691711426
    6. ',d' → logprob: -16.375089645385742
    7. ',(' → logprob: -16.875089645385742
    8. '_,' → logprob: -17.000089645385742
    9. ',u' → logprob: -17.000089645385742
    10. '‌,' → logprob: -17.250089645385742

Token 387: ' c' (ID: 274)
  Prédit: 'w'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'w' → logprob: -0.09493262320756912
    2. ' w' → logprob: -2.5949325561523438
    3. 'c' → logprob: -4.219932556152344
    4. ' c' → logprob: -6.844932556152344
    5. 'weight' → logprob: -9.219932556152344
    6. 'wt' → logprob: -10.594932556152344
    7. 'cost' → logprob: -10.844932556152344
    8. ' weight' → logprob: -13.094932556152344
    9. 'cc' → logprob: -13.719932556152344
    10. ' wt' → logprob: -14.469932556152344

Token 388: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.04302693530917168
    2. 'in' → logprob: -3.168026924133301
    3. ' ' → logprob: -11.9180269241333
    4. 'c' → logprob: -13.0430269241333
    5. 'v' → logprob: -13.0430269241333
    6. 's' → logprob: -13.0430269241333
    7. '	in' → logprob: -13.1680269241333
    8. ',' → logprob: -13.2930269241333
    9. '   ' → logprob: -13.5430269241333
    10. 't' → logprob: -13.6680269241333

Token 389: ' graph' (ID: 7465)
  Prédit: 'graph'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'graph' → logprob: -0.061969365924596786
    2. ' graph' → logprob: -2.81196928024292
    3. '	graph' → logprob: -13.686969757080078
    4. '(graph' → logprob: -14.561969757080078
    5. ' ' → logprob: -16.311969757080078
    6. '_graph' → logprob: -17.811969757080078
    7. 'Graph' → logprob: -18.811969757080078
    8. '```' → logprob: -19.061969757080078
    9. '   ' → logprob: -19.186969757080078
    10. '    ' → logprob: -19.561969757080078

Token 390: '[u' (ID: 48750)
  Prédit: '[u'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[u' → logprob: -0.0008090290939435363
    2. ' in' → logprob: -7.250809192657471
    3. 'u' → logprob: -9.875808715820312
    4. 'in' → logprob: -11.000808715820312
    5. '[' → logprob: -11.125808715820312
    6. '[v' → logprob: -12.625808715820312
    7. ',u' → logprob: -12.750808715820312
    8. '   ' → logprob: -12.750808715820312
    9. ',' → logprob: -12.875808715820312
    10. '(u' → logprob: -13.375808715820312

Token 391: ']:
' (ID: 22152)
  Prédit: ']:'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']:' → logprob: -0.28692489862442017
    2. ']:
' → logprob: -1.4119248390197754
    3. '):' → logprob: -6.036924839019775
    4. '):
' → logprob: -6.286924839019775
    5. ']' → logprob: -6.911924839019775
    6. ':' → logprob: -8.786925315856934
    7. ']):' → logprob: -9.286925315856934
    8. ']:
' → logprob: -9.286925315856934
    9. '       ' → logprob: -9.911925315856934
    10. ']:

' → logprob: -10.036925315856934

Token 392: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.0007283978629857302
    2. '           ' → logprob: -7.625728607177734
    3. '                
' → logprob: -10.125728607177734
    4. ' if' → logprob: -10.375728607177734
    5. ':
' → logprob: -10.500728607177734
    6. '	           ' → logprob: -10.500728607177734
    7. '   ' → logprob: -10.625728607177734
    8. ',' → logprob: -10.750728607177734
    9. '<|end|>' → logprob: -11.375728607177734
    10. '):
' → logprob: -11.875728607177734

Token 393: ' n' (ID: 297)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.2339487224817276
    2. ' new' → logprob: -1.7339487075805664
    3. ' if' → logprob: -4.358948707580566
    4. '           ' → logprob: -4.983948707580566
    5. 'new' → logprob: -5.108948707580566
    6. ' next' → logprob: -5.983948707580566
    7. ' nd' → logprob: -6.233948707580566
    8. '                   ' → logprob: -7.233948707580566
    9. 'if' → logprob: -8.608948707580566
    10. 'next' → logprob: -8.608948707580566

Token 394: 'cost' (ID: 33457)
  Prédit: 'ew'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ew' → logprob: -0.6382363438606262
    2. 'cost' → logprob: -0.8882363438606262
    3. '_cost' → logprob: -3.1382362842559814
    4. 'ext' → logprob: -4.1382365226745605
    5. 'e' → logprob: -7.1382365226745605
    6. 'c' → logprob: -8.763236045837402
    7. 'ec' → logprob: -10.263236045837402
    8. 'Cost' → logprob: -10.263236045837402
    9. 'w' → logprob: -11.513236045837402
    10. '_c' → logprob: -11.763236045837402

Token 395: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.12692894041538239
    2. '=' → logprob: -2.1269290447235107
    3. ',' → logprob: -15.37692928314209
    4. '   ' → logprob: -16.001928329467773
    5. ')' → logprob: -16.126928329467773
    6. ' =
' → logprob: -16.126928329467773
    7. '           ' → logprob: -16.626928329467773
    8. ' ' → logprob: -17.001928329467773
    9. '=
' → logprob: -17.126928329467773
    10. '=c' → logprob: -17.376928329467773

Token 396: ' cost' (ID: 3097)
  Prédit: 'cost'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cost' → logprob: -0.38687169551849365
    2. ' cost' → logprob: -1.1368716955184937
    3. '(cost' → logprob: -15.636871337890625
    4. '   ' → logprob: -15.761871337890625
    5. 'c' → logprob: -16.386871337890625
    6. '_cost' → logprob: -16.761871337890625
    7. ' ' → logprob: -17.261871337890625
    8. 'Cost' → logprob: -17.511871337890625
    9. '    ' → logprob: -17.886871337890625
    10. ' kost' → logprob: -18.011871337890625

Token 397: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.08130338788032532
    2. '+' → logprob: -2.831303358078003
    3. '+c' → logprob: -3.956303358078003
    4. '+n' → logprob: -11.331303596496582
    5. '+C' → logprob: -13.706303596496582
    6. ' ' → logprob: -14.456303596496582
    7. '+
' → logprob: -14.581303596496582
    8. ' +
' → logprob: -15.081303596496582
    9. '+w' → logprob: -15.331303596496582
    10. '＋' → logprob: -15.456303596496582

Token 398: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.0015023599844425917
    2. ' c' → logprob: -6.501502513885498
    3. '   ' → logprob: -17.376502990722656
    4. '	c' → logprob: -18.251502990722656
    5. ' ' → logprob: -19.001502990722656
    6. '               ' → logprob: -19.626502990722656
    7. '           ' → logprob: -19.876502990722656
    8. '  ' → logprob: -20.376502990722656
    9. '    ' → logprob: -20.501502990722656
    10. ')c' → logprob: -20.501502990722656

Token 399: '
' (ID: 198)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.0018930566729977727
    2. '<|end|>' → logprob: -7.126893043518066
    3. '                
' → logprob: -7.251893043518066
    4. '
' → logprob: -9.001893043518066
    5. ')' → logprob: -9.251893043518066
    6. '           ' → logprob: -10.251893043518066
    7. '<|end|>' → logprob: -10.501893043518066
    8. '                ' → logprob: -10.876893043518066
    9. '              ' → logprob: -11.001893043518066
    10. '			' → logprob: -11.376893043518066

Token 400: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.0015988911036401987
    2. '                
' → logprob: -6.876598834991455
    3. '<|end|>' → logprob: -7.876598834991455
    4. '                ' → logprob: -9.751599311828613
    5. '
' → logprob: -10.376599311828613
    6. ')' → logprob: -11.001599311828613
    7. '           ' → logprob: -11.251599311828613
    8. '            
' → logprob: -11.626599311828613
    9. '              ' → logprob: -11.751599311828613
    10. '<|end|>' → logprob: -11.876599311828613

Token 401: ' if' (ID: 538)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.10694824159145355
    2. 'if' (adapté à ' if') → logprob: -2.981948137283325
    3. ' if' → logprob: -2.981948137283325
    4. '           ' → logprob: -10.981947898864746
    5. '                
' → logprob: -11.981947898864746
    6. '```' → logprob: -12.356947898864746
    7. '	if' → logprob: -12.856947898864746
    8. '	           ' → logprob: -13.231947898864746
    9. '		       ' → logprob: -13.856947898864746
    10. ')' → logprob: -13.981947898864746

Token 402: ' dist' (ID: 3601)
  Prédit: ' dist'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' dist' → logprob: -0.1749226301908493
    2. 'dist' → logprob: -1.9249225854873657
    3. ' n' → logprob: -4.674922466278076
    4. 'n' → logprob: -5.299922466278076
    5. 'nc' → logprob: -9.299922943115234
    6. '	dist' → logprob: -9.799922943115234
    7. ' not' → logprob: -9.924922943115234
    8. 'not' → logprob: -10.924922943115234
    9. ' nc' → logprob: -11.174922943115234
    10. '(dist' → logprob: -11.924922943115234

Token 403: '[v' (ID: 36561)
  Prédit: '[v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[v' → logprob: -7.3458322731312364e-06
    2. '[u' → logprob: -11.875007629394531
    3. 'v' → logprob: -14.875007629394531
    4. '[' → logprob: -16.87500762939453
    5. ' [' → logprob: -17.62500762939453
    6. '[n' → logprob: -17.87500762939453
    7. '][' → logprob: -18.25000762939453
    8. '<v' → logprob: -19.00000762939453
    9. '	v' → logprob: -19.50000762939453
    10. ' v' → logprob: -19.75000762939453

Token 404: '][' (ID: 2696)
  Prédit: '[v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[v' → logprob: -0.255403608083725
    2. '][' → logprob: -1.5054036378860474
    3. '[' → logprob: -5.755403518676758
    4. '[n' → logprob: -8.380403518676758
    5. ']' → logprob: -10.255403518676758
    6. '[u' → logprob: -11.380403518676758
    7. ' ][' → logprob: -12.130403518676758
    8. 'v' → logprob: -12.380403518676758
    9. '[now' → logprob: -13.255403518676758
    10. '[val' → logprob: -13.380403518676758

Token 405: 'used' (ID: 4943)
  Prédit: 'used'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'used' → logprob: -4.842555426876061e-06
    2. ' used' → logprob: -12.250004768371582
    3. '.used' → logprob: -18.0000057220459
    4. '_used' → logprob: -19.2500057220459
    5. '0' → logprob: -21.1250057220459
    6. '-used' → logprob: -21.1250057220459
    7. '   ' → logprob: -21.8750057220459
    8. 'Used' → logprob: -22.5000057220459
    9. ' ' → logprob: -22.7500057220459
    10. 'unused' → logprob: -22.8750057220459

Token 406: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.03819525986909866
    2. '>' → logprob: -3.5381953716278076
    3. ']>' → logprob: -4.7881951332092285
    4. ' >' → logprob: -10.038195610046387
    5. ' ]' → logprob: -10.413195610046387
    6. '>]' → logprob: -12.413195610046387
    7. '[' → logprob: -13.163195610046387
    8. '']' → logprob: -14.538195610046387
    9. '   ' → logprob: -15.038195610046387
    10. '">' → logprob: -15.288195610046387

Token 407: ' >' (ID: 1424)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>' → logprob: -0.31326621770858765
    2. ' >' → logprob: -1.3132662773132324
    3. '">' → logprob: -13.188265800476074
    4. '[' → logprob: -14.688265800476074
    5. ' ' → logprob: -15.188265800476074
    6. '＞' → logprob: -15.688265800476074
    7. '>b' → logprob: -15.688265800476074
    8. ']>' → logprob: -15.813265800476074
    9. '>`' → logprob: -15.938265800476074
    10. ')>' → logprob: -16.06326675415039

Token 408: ' n' (ID: 297)
  Prédit: 'nc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'nc' → logprob: -0.38690608739852905
    2. ' n' → logprob: -1.1369061470031738
    3. 'n' → logprob: -11.011905670166016
    4. ' nc' → logprob: -12.136905670166016
    5. 'nb' → logprob: -12.761905670166016
    6. '	n' → logprob: -13.011905670166016
    7. 'ng' → logprob: -13.761905670166016
    8. 'NC' → logprob: -13.761905670166016
    9. '   ' → logprob: -14.136905670166016
    10. 'nd' → logprob: -14.261905670166016

Token 409: 'cost' (ID: 33457)
  Prédit: 'cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cost' → logprob: -1.2664456789934775e-06
    2. ' cost' → logprob: -13.875000953674316
    3. '_cost' → logprob: -15.500000953674316
    4. 'cout' → logprob: -17.250001907348633
    5. 'Cost' → logprob: -17.750001907348633
    6. 'oc' → logprob: -18.375001907348633
    7. 'cot' → logprob: -18.500001907348633
    8. '```' → logprob: -18.625001907348633
    9. '(cost' → logprob: -19.500001907348633
    10. '-cost' → logprob: -19.750001907348633

Token 410: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.28277796506881714
    2. ':
' → logprob: -1.407778024673462
    3. '               ' → logprob: -7.157777786254883
    4. '):
' → logprob: -8.032777786254883
    5. '                   ' → logprob: -8.282777786254883
    6. ' :
' → logprob: -9.657777786254883
    7. '):' → logprob: -9.657777786254883
    8. '           ' → logprob: -10.782777786254883
    9. '<|end|>' → logprob: -10.907777786254883
    10. ')' → logprob: -11.032777786254883

Token 411: '                   ' (ID: 699)
  Prédit: '                   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.378158837556839
    2. '               ' → logprob: -1.5031588077545166
    3. '                           ' → logprob: -4.128159046173096
    4. '                               ' → logprob: -4.378159046173096
    5. '                       ' → logprob: -4.503159046173096
    6. '[' → logprob: -4.753159046173096
    7. '                    
' → logprob: -4.878159046173096
    8. '                ' → logprob: -5.003159046173096
    9. '<|end|>' → logprob: -5.003159046173096
    10. ' 
' → logprob: -5.378159046173096

Token 412: ' dist' (ID: 3601)
  Prédit: ' dist'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' dist' → logprob: -0.1631132811307907
    2. 'dist' (adapté à ' dist') → logprob: -2.2881133556365967
    3. '                   ' → logprob: -3.4131133556365967
    4. '                       ' → logprob: -4.163113117218018
    5. '                    ' → logprob: -8.288113594055176
    6. '               ' → logprob: -9.163113594055176
    7. '```' → logprob: -10.288113594055176
    8. '_dist' → logprob: -10.663113594055176
    9. '	dist' → logprob: -10.663113594055176
    10. '                           ' → logprob: -10.788113594055176

Token 413: '[v' (ID: 36561)
  Prédit: '[v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[v' → logprob: 0.0
    2. 'v' → logprob: -18.125
    3. '[u' → logprob: -18.25
    4. '                   ' → logprob: -18.625
    5. '<v' → logprob: -19.75
    6. '[' → logprob: -20.25
    7. '[val' → logprob: -21.0
    8. '][' → logprob: -21.0
    9. '```' → logprob: -21.0
    10. '=v' → logprob: -21.25

Token 414: '][' (ID: 2696)
  Prédit: '[v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[v' → logprob: -0.0788973867893219
    2. '][' → logprob: -2.578897476196289
    3. 'v' → logprob: -12.953897476196289
    4. '[' → logprob: -13.203897476196289
    5. '[u' → logprob: -14.203897476196289
    6. '                   ' → logprob: -15.078897476196289
    7. '	v' → logprob: -15.203897476196289
    8. ']' → logprob: -15.328897476196289
    9. ',v' → logprob: -15.328897476196289
    10. ']][' → logprob: -15.453897476196289

Token 415: 'used' (ID: 4943)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'v' → logprob: -7.584239938296378e-06
    2. ' v' → logprob: -12.125007629394531
    3. '[v' → logprob: -13.125007629394531
    4. '	v' → logprob: -16.87500762939453
    5. '
' → logprob: -17.12500762939453
    6. '(v' → logprob: -17.75000762939453
    7. 'u' → logprob: -17.75000762939453
    8. '```' → logprob: -17.87500762939453
    9. '   ' → logprob: -18.62500762939453
    10. 'n' → logprob: -18.75000762939453

Token 416: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.004376955330371857
    2. ']=' → logprob: -6.0043768882751465
    3. ' =' → logprob: -6.7543768882751465
    4. '=' → logprob: -7.2543768882751465
    5. ' ]' → logprob: -10.879377365112305
    6. '[' → logprob: -12.504377365112305
    7. '[v' → logprob: -12.879377365112305
    8. '=v' → logprob: -14.129377365112305
    9. 'v' → logprob: -15.254377365112305
    10. ')' → logprob: -15.379377365112305

Token 417: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.4740770161151886
    2. '=' → logprob: -0.9740769863128662
    3. '＝' → logprob: -17.849077224731445
    4. '[' → logprob: -17.974077224731445
    5. '=v' → logprob: -17.974077224731445
    6. '=n' → logprob: -18.224077224731445
    7. '.=' → logprob: -18.849077224731445
    8. ',' → logprob: -18.849077224731445
    9. ']=' → logprob: -18.849077224731445
    10. '=
' → logprob: -18.849077224731445

Token 418: ' n' (ID: 297)
  Prédit: 'nc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'nc' → logprob: -0.2520136833190918
    2. ' n' → logprob: -1.5020136833190918
    3. ' nc' → logprob: -9.75201416015625
    4. 'n' → logprob: -10.87701416015625
    5. 'nb' → logprob: -12.75201416015625
    6. '	n' → logprob: -13.75201416015625
    7. 'NC' → logprob: -14.00201416015625
    8. 'nt' → logprob: -14.87701416015625
    9. '[n' → logprob: -15.12701416015625
    10. 'ng' → logprob: -15.25201416015625

Token 419: 'cost' (ID: 33457)
  Prédit: 'cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cost' → logprob: 0.0
    2. ' cost' → logprob: -17.125
    3. 'Cost' → logprob: -17.625
    4. '_cost' → logprob: -17.75
    5. 'cout' → logprob: -18.125
    6. 'ost' → logprob: -18.375
    7. 'oc' → logprob: -20.0
    8. '-cost' → logprob: -21.375
    9. 'cot' → logprob: -21.75
    10. '(cost' → logprob: -22.125

Token 420: '
' (ID: 198)
  Prédit: '                   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.0007867562817409635
    2. '               ' → logprob: -7.875786781311035
    3. ',' → logprob: -9.125786781311035
    4. '           ' → logprob: -9.625786781311035
    5. '                    
' → logprob: -9.625786781311035
    6. '<|end|>' → logprob: -10.250786781311035
    7. 'heap' → logprob: -10.375786781311035
    8. '				' → logprob: -10.625786781311035
    9. '                       ' → logprob: -10.875786781311035
    10. '```' → logprob: -11.875786781311035

Token 421: '                   ' (ID: 699)
  Prédit: '                   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.00017517358355689794
    2. '                    
' → logprob: -9.250175476074219
    3. '				' → logprob: -10.000175476074219
    4. '               ' → logprob: -11.375175476074219
    5. '                       ' → logprob: -12.625175476074219
    6. '                    ' → logprob: -12.875175476074219
    7. 'heap' → logprob: -13.000175476074219
    8. ',' → logprob: -13.250175476074219
    9. '```' → logprob: -13.250175476074219
    10. '[' → logprob: -13.625175476074219

Token 422: ' heap' (ID: 37237)
  Prédit: 'heap'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'heap' (adapté à ' heap') → logprob: -0.05351921170949936
    2. '                   ' → logprob: -3.3035192489624023
    3. ' heap' → logprob: -4.178519248962402
    4. '               ' → logprob: -11.053519248962402
    5. '           ' → logprob: -12.053519248962402
    6. '                       ' → logprob: -12.178519248962402
    7. '   ' → logprob: -12.428519248962402
    8. '```' → logprob: -13.553519248962402
    9. '                    ' → logprob: -13.678519248962402
    10. 'he' → logprob: -13.678519248962402

Token 423: 'q' (ID: 80)
  Prédit: 'q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: 0.0
    2. 'p' → logprob: -18.0
    3. '[' → logprob: -19.375
    4. 'app' → logprob: -20.25
    5. 'qe' → logprob: -20.375
    6. 'h' → logprob: -20.625
    7. 'push' → logprob: -20.625
    8. '```' → logprob: -20.625
    9. 'queue' → logprob: -21.0
    10. 'ql' → logprob: -21.25

Token 424: '.he' (ID: 67786)
  Prédit: '.he'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.he' → logprob: -9.372294698550832e-06
    2. 'he' → logprob: -11.625009536743164
    3. '.heap' → logprob: -15.625009536743164
    4. '.' → logprob: -16.500009536743164
    5. ' he' → logprob: -17.250009536743164
    6. '.push' → logprob: -17.875009536743164
    7. '.h' → logprob: -19.125009536743164
    8. 'heap' → logprob: -19.500009536743164
    9. '_he' → logprob: -19.500009536743164
    10. 'push' → logprob: -19.500009536743164

Token 425: 'app' (ID: 903)
  Prédit: 'app'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'app' → logprob: -9.198043699143454e-05
    2. 'pp' → logprob: -9.750091552734375
    3. 'ap' → logprob: -11.000091552734375
    4. 'push' → logprob: -11.375091552734375
    5. 'he' → logprob: -14.000091552734375
    6. '```' → logprob: -14.000091552734375
    7. 'p' → logprob: -14.750091552734375
    8. '_app' → logprob: -15.125091552734375
    9. '...' → logprob: -15.125091552734375
    10. 'ush' → logprob: -15.125091552734375

Token 426: 'ush' (ID: 1776)
  Prédit: 'ush'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ush' → logprob: -0.003163103014230728
    2. 'app' → logprob: -6.2531633377075195
    3. 'push' → logprob: -6.7531633377075195
    4. 'pp' → logprob: -9.75316333770752
    5. 'sh' → logprob: -12.50316333770752
    6. 'p' → logprob: -12.62816333770752
    7. 's' → logprob: -15.12816333770752
    8. '```' → logprob: -15.37816333770752
    9. 'op' → logprob: -15.62816333770752
    10. '.push' → logprob: -15.75316333770752

Token 427: '(p' (ID: 2407)
  Prédit: '(p'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(p' → logprob: -2.248469718324486e-05
    2. '(' → logprob: -10.750022888183594
    3. '(q' → logprob: -14.250022888183594
    4. '(
' → logprob: -15.750022888183594
    5. ' (' → logprob: -16.625022888183594
    6. 'pq' → logprob: -17.125022888183594
    7. '(pr' → logprob: -18.000022888183594
    8. '(n' → logprob: -19.000022888183594
    9. '(py' → logprob: -19.000022888183594
    10. 'p' → logprob: -19.625022888183594

Token 428: 'q' (ID: 80)
  Prédit: 'q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -0.0013421354815363884
    2. '(p' → logprob: -6.626342296600342
    3. '(q' → logprob: -11.751341819763184
    4. 'pq' → logprob: -11.751341819763184
    5. ' pq' → logprob: -16.1263427734375
    6. 'p' → logprob: -16.7513427734375
    7. '[p' → logprob: -16.7513427734375
    8. 'Q' → logprob: -16.8763427734375
    9. 'vq' → logprob: -16.8763427734375
    10. '	q' → logprob: -17.2513427734375

Token 429: ',' (ID: 11)
  Prédit: '(p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(p' → logprob: -0.0008265409851446748
    2. ',' → logprob: -7.625826358795166
    3. '(' → logprob: -8.250826835632324
    4. ',(' → logprob: -10.125826835632324
    5. ',p' → logprob: -10.750826835632324
    6. ' (' → logprob: -11.750826835632324
    7. '((' → logprob: -12.875826835632324
    8. '(q' → logprob: -13.000826835632324
    9. ')' → logprob: -13.375826835632324
    10. ')(' → logprob: -14.625826835632324

Token 430: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.03036114200949669
    2. '(n' → logprob: -3.5303611755371094
    3. '(' → logprob: -7.530361175537109
    4. '(cost' → logprob: -9.53036117553711
    5. '(c' → logprob: -14.03036117553711
    6. '(nt' → logprob: -15.78036117553711
    7. '(cnt' → logprob: -16.40536117553711
    8. ' ' → logprob: -16.65536117553711
    9. '(nd' → logprob: -16.78036117553711
    10. '(cc' → logprob: -16.78036117553711

Token 431: 'nc' (ID: 24825)
  Prédit: 'nc'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'nc' → logprob: -0.0002007987059187144
    2. ' n' → logprob: -8.750201225280762
    3. '(n' → logprob: -10.500201225280762
    4. 'n' → logprob: -11.250201225280762
    5. ' nc' → logprob: -13.250201225280762
    6. '[n' → logprob: -17.750200271606445
    7. 'nb' → logprob: -17.750200271606445
    8. '   ' → logprob: -18.375200271606445
    9. '	n' → logprob: -18.375200271606445
    10. 'nv' → logprob: -18.625200271606445

Token 432: 'ost' (ID: 564)
  Prédit: 'ost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ost' → logprob: -1.318681188422488e-05
    2. 'cost' → logprob: -11.25001335144043
    3. 'st' → logprob: -16.75001335144043
    4. 'o' → logprob: -17.37501335144043
    5. 'os' → logprob: -17.75001335144043
    6. 'ост' → logprob: -17.87501335144043
    7. ' ost' → logprob: -18.50001335144043
    8. 'ont' → logprob: -19.75001335144043
    9. '_cost' → logprob: -20.00001335144043
    10. 'kost' → logprob: -20.25001335144043

Token 433: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -3.650518920039758e-06
    2. ',v' → logprob: -12.750003814697266
    3. ' ,' → logprob: -14.250003814697266
    4. ',
' → logprob: -18.125003814697266
    5. 'v' → logprob: -19.250003814697266
    6. ',u' → logprob: -20.375003814697266
    7. '‌,' → logprob: -20.750003814697266
    8. ',n' → logprob: -20.875003814697266
    9. ')' → logprob: -21.625003814697266
    10. ' v' → logprob: -22.000003814697266

Token 434: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.005233882926404476
    2. ' v' → logprob: -5.2552337646484375
    3. '	v' → logprob: -17.755233764648438
    4. ')v' → logprob: -19.505233764648438
    5. 'vq' → logprob: -21.630233764648438
    6. '```' → logprob: -21.755233764648438
    7. '   ' → logprob: -21.880233764648438
    8. '[v' → logprob: -22.005233764648438
    9. 've' → logprob: -22.505233764648438
    10. '$v' → logprob: -22.505233764648438

Token 435: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -4.246537173457909e-06
    2. ' ,' → logprob: -12.375003814697266
    3. ',
' → logprob: -19.625003814697266
    4. 'used' → logprob: -20.000003814697266
    5. '‌,' → logprob: -21.000003814697266
    6. '```' → logprob: -21.750003814697266
    7. '`,' → logprob: -22.750003814697266
    8. '،' → logprob: -22.875003814697266
    9. '   ' → logprob: -23.000003814697266
    10. ' used' → logprob: -23.250003814697266

Token 436: ' used' (ID: 2061)
  Prédit: 'used'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'used' → logprob: -7.493430894101039e-05
    2. ' used' → logprob: -9.500075340270996
    3. '   ' → logprob: -20.87507438659668
    4. '.used' → logprob: -22.00007438659668
    5. 'us' → logprob: -22.25007438659668
    6. '-used' → logprob: -22.37507438659668
    7. 'Used' → logprob: -22.87507438659668
    8. 'use' → logprob: -23.37507438659668
    9. '_used' → logprob: -23.37507438659668
    10. ' ' → logprob: -23.87507438659668

Token 437: '))

' (ID: 9746)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -3.643152740551159e-05
    2. '))
' → logprob: -10.250036239624023
    3. ')' → logprob: -14.625036239624023
    4. ' ))' → logprob: -14.625036239624023
    5. '))

' → logprob: -16.875036239624023
    6. ')))' → logprob: -16.875036239624023
    7. '));' → logprob: -18.375036239624023
    8. '))
' → logprob: -18.875036239624023
    9. '           ' → logprob: -19.625036239624023
    10. '   ' → logprob: -19.625036239624023

Token 438: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.2082023322582245
    2. '               ' → logprob: -1.7082023620605469
    3. '       ' → logprob: -5.708202362060547
    4. '```' → logprob: -5.833202362060547
    5. '            
' → logprob: -8.958202362060547
    6. 'for' → logprob: -9.083202362060547
    7. '​' → logprob: -9.333202362060547
    8. ' for' → logprob: -9.708202362060547
    9. '                
' → logprob: -10.208202362060547
    10. '        
' → logprob: -10.333202362060547

Token 439: ' #' (ID: 1069)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.16884887218475342
    2. '       ' → logprob: -1.9188488721847534
    3. '#' (adapté à ' #') → logprob: -4.918848991394043
    4. 'for' → logprob: -7.418848991394043
    5. '   ' → logprob: -8.168848991394043
    6. ' #' → logprob: -8.793848991394043
    7. 'if' → logprob: -8.918848991394043
    8. '```' → logprob: -10.418848991394043
    9. '               ' → logprob: -10.543848991394043
    10. ' for' → logprob: -11.043848991394043

Token 440: ' Si' (ID: 7832)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.48191162943840027
    2. 'for' → logprob: -0.9819116592407227
    3. 'if' → logprob: -5.106911659240723
    4. '           ' → logprob: -6.606911659240723
    5. '       ' → logprob: -8.356911659240723
    6. 'Expl' → logprob: -9.106911659240723
    7. '   ' → logprob: -10.356911659240723
    8. ' for' → logprob: -11.856911659240723
    9. ' #' → logprob: -12.106911659240723
    10. 'For' → logprob: -12.981911659240723

Token 441: ' la' (ID: 557)
  Prédit: ' not'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.07110057026147842
    2. 'not' → logprob: -3.4461004734039307
    3. ' used' → logprob: -3.4461004734039307
    4. 'used' → logprob: -5.32110071182251
    5. '(not' → logprob: -13.446100234985352
    6. '!' → logprob: -13.821100234985352
    7. ' ' → logprob: -13.946100234985352
    8. '	not' → logprob: -14.696100234985352
    9. ' ' → logprob: -14.946100234985352
    10. ' utilisé' → logprob: -15.883600234985352

Token 442: ' réduction' (ID: 89072)
  Prédit: 'used'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'used' → logprob: -0.2578434646129608
    2. 'not' → logprob: -2.007843494415283
    3. ' used' → logprob: -3.007843494415283
    4. ' not' → logprob: -3.132843494415283
    5. '!' → logprob: -11.507843017578125
    6. '_used' → logprob: -13.882843017578125
    7. '.used' → logprob: -14.632843017578125
    8. '
' → logprob: -14.632843017578125
    9. 'Used' → logprob: -15.007843017578125
    10. '   ' → logprob: -15.132843017578125

Token 443: ' n' (ID: 297)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.5258660912513733
    2. '==' → logprob: -0.9008660912513733
    3. 'n' → logprob: -6.6508660316467285
    4. 'not' → logprob: -7.6508660316467285
    5. ' not' → logprob: -8.150866508483887
    6. '=' → logprob: -8.650866508483887
    7. '0' → logprob: -9.400866508483887
    8. '   ' → logprob: -9.400866508483887
    9. ':' → logprob: -9.525866508483887
    10. ' ' → logprob: -9.775866508483887

Token 444: ''a' (ID: 10443)
  Prédit: 'ot'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ot' → logprob: -0.08003365248441696
    2. '==' → logprob: -3.080033540725708
    3. '=' → logprob: -4.955033779144287
    4. 'o' → logprob: -5.205033779144287
    5. 'u' → logprob: -5.455033779144287
    6. ''est' → logprob: -5.455033779144287
    7. ' ==' → logprob: -5.705033779144287
    8. 'on' → logprob: -6.330033779144287
    9. 'pas' → logprob: -7.080033779144287
    10. 'used' → logprob: -7.080033779144287

Token 445: ' pas' (ID: 2173)
  Prédit: 'pas'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pas' → logprob: -0.0010747304186224937
    2. ' pas' → logprob: -7.62607479095459
    3. 'not' → logprob: -8.25107479095459
    4. '0' → logprob: -8.87607479095459
    5. 'ot' → logprob: -9.62607479095459
    6. '_pas' → logprob: -9.62607479095459
    7. 'Pas' → logprob: -11.62607479095459
    8. '```' → logprob: -12.12607479095459
    9. 'été' → logprob: -12.50107479095459
    10. ' not' → logprob: -12.62607479095459

Token 446: ' encore' (ID: 14043)
  Prédit: 'used'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'used' → logprob: -0.6325428485870361
    2. ' été' → logprob: -1.2575428485870361
    3. 'been' → logprob: -2.382542848587036
    4. ' been' → logprob: -2.757542848587036
    5. 'été' → logprob: -4.507542610168457
    6. ' utilisé' → logprob: -5.507542610168457
    7. ' used' → logprob: -5.507542610168457
    8. '=' → logprob: -5.507542610168457
    9. ' encore' → logprob: -5.632542610168457
    10. '_used' → logprob: -8.007542610168457

Token 447: ' été' (ID: 9799)
  Prédit: 'used'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'used' → logprob: -0.10541153699159622
    2. ' été' → logprob: -2.9804115295410156
    3. ' utilisé' → logprob: -4.355411529541016
    4. ' used' → logprob: -4.605411529541016
    5. 'util' → logprob: -4.730411529541016
    6. 'été' → logprob: -4.980411529541016
    7. 'been' → logprob: -5.230411529541016
    8. ' been' → logprob: -5.605411529541016
    9. ' utilisée' → logprob: -6.980411529541016
    10. 'use' → logprob: -7.855411529541016

Token 448: ' utilisée' (ID: 106548)
  Prédit: 'used'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'used' → logprob: -0.5144580006599426
    2. 'util' → logprob: -1.0144579410552979
    3. ' used' → logprob: -3.264457941055298
    4. ' utilisée' → logprob: -6.764458179473877
    5. ' utilisé' → logprob: -9.139457702636719
    6. 'use' → logprob: -9.639457702636719
    7. '1' → logprob: -11.014457702636719
    8. '_used' → logprob: -12.514457702636719
    9. '0' → logprob: -12.764457702636719
    10. ' ' → logprob: -13.139457702636719

Token 449: ',' (ID: 11)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.024393117055296898
    2. '           ' → logprob: -4.399393081665039
    3. ',' → logprob: -5.149393081665039
    4. ':' → logprob: -5.774393081665039
    5. 'and' → logprob: -6.524393081665039
    6. ':
' → logprob: -7.274393081665039
    7. '       ' → logprob: -8.024393081665039
    8. '   ' → logprob: -8.774393081665039
    9. '               ' → logprob: -9.274393081665039
    10. ' ,' → logprob: -10.024393081665039

Token 450: ' essayer' (ID: 92713)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.22864946722984314
    2. ' for' → logprob: -1.9786494970321655
    3. 'for' → logprob: -2.853649377822876
    4. '       ' → logprob: -5.228649616241455
    5. '               ' → logprob: -6.478649616241455
    6. ' pour' → logprob: -7.478649616241455
    7. '   ' → logprob: -8.478649139404297
    8. '#' → logprob: -8.853649139404297
    9. 'pour' → logprob: -8.853649139404297
    10. ' ' → logprob: -9.228649139404297

Token 451: ' de' (ID: 334)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -1.1607023477554321
    2. ' d' → logprob: -1.1607023477554321
    3. '   ' → logprob: -2.5357022285461426
    4. '               ' → logprob: -2.5357022285461426
    5. '           ' → logprob: -2.9107022285461426
    6. ':
' → logprob: -3.4107022285461426
    7. ' for' → logprob: -3.5357022285461426
    8. ' de' → logprob: -3.6607022285461426
    9. ' utiliser' → logprob: -3.9107022285461426
    10. 'd' → logprob: -4.035702228546143

Token 452: ' l' (ID: 305)
  Prédit: 'util'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'util' → logprob: -0.2535419464111328
    2. 'for' → logprob: -1.6285419464111328
    3. ' utiliser' → logprob: -4.128541946411133
    4. ' for' → logprob: -4.878541946411133
    5. 'apply' → logprob: -6.128541946411133
    6. 'pass' → logprob: -7.128541946411133
    7. ' appliquer' → logprob: -8.253541946411133
    8. 'use' → logprob: -8.753541946411133
    9. 'pour' → logprob: -9.128541946411133
    10. 'expl' → logprob: -9.378541946411133

Token 453: ''ap' (ID: 31362)
  Prédit: 'util'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'util' → logprob: -0.09770709276199341
    2. ''utiliser' → logprob: -2.8477070331573486
    3. 'ap' → logprob: -4.097707271575928
    4. 'apply' → logprob: -4.597707271575928
    5. 'imiter' → logprob: -5.472707271575928
    6. ' utiliser' → logprob: -6.597707271575928
    7. '’utiliser' → logprob: -6.597707271575928
    8. 'pass' → logprob: -7.597707271575928
    9. 'penser' → logprob: -8.47270679473877
    10. 'user' → logprob: -9.09770679473877

Token 454: 'pliquer' (ID: 101028)
  Prédit: 'pliquer'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pliquer' → logprob: -0.09447978436946869
    2. 'ply' → logprob: -2.59447979927063
    3. 'plier' → logprob: -4.344479560852051
    4. 'li' → logprob: -7.094479560852051
    5. 'pli' → logprob: -8.09447956085205
    6. 'ly' → logprob: -8.09447956085205
    7. 'lier' → logprob: -8.34447956085205
    8. 'pl' → logprob: -8.96947956085205
    9. 'plic' → logprob: -8.96947956085205
    10. 'pler' → logprob: -9.34447956085205

Token 455: ' à' (ID: 1221)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.28526249527931213
    2. ' for' → logprob: -1.4102624654769897
    3. 'for' → logprob: -6.660262584686279
    4. ',' → logprob: -7.410262584686279
    5. ' and' → logprob: -7.410262584686279
    6. '       ' → logprob: -7.535262584686279
    7. '   ' → logprob: -8.285262107849121
    8. ' (' → logprob: -8.660262107849121
    9. '               ' → logprob: -8.660262107849121
    10. ':' → logprob: -9.160262107849121

Token 456: ' deux' (ID: 10301)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.878718376159668
    2. 'v' → logprob: -1.878718376159668
    3. ' v' → logprob: -2.503718376159668
    4. 'cost' → logprob: -3.003718376159668
    5. 'un' → logprob: -3.128718376159668
    6. '1' → logprob: -3.378718376159668
    7. ' un' → logprob: -3.378718376159668
    8. ' chaque' → logprob: -3.503718376159668
    9. 'for' → logprob: -3.878718376159668
    10. ' c' → logprob: -4.003718376159668

Token 457: ' segments' (ID: 33749)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.3949570655822754
    2. ':' → logprob: -1.5199570655822754
    3. ' for' → logprob: -1.5199570655822754
    4. ' v' → logprob: -2.6449570655822754
    5. ' :' → logprob: -3.0199570655822754
    6. ')' → logprob: -3.7699570655822754
    7. ',' → logprob: -3.7699570655822754
    8. ' espaces' → logprob: -4.269957065582275
    9. 'spaces' → logprob: -4.269957065582275
    10. ' spaces' → logprob: -4.519957065582275

Token 458: ' cons' (ID: 1473)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.6670274138450623
    2. '               ' → logprob: -1.042027473449707
    3. '       ' → logprob: -3.417027473449707
    4. ',' → logprob: -4.042027473449707
    5. ' ' → logprob: -5.042027473449707
    6. '   ' → logprob: -5.042027473449707
    7. '<|end|>' → logprob: -5.042027473449707
    8. ':' → logprob: -5.167027473449707
    9. ' (' → logprob: -5.167027473449707
    10. '            ' → logprob: -5.292027473449707

Token 459: 'écut' (ID: 96392)
  Prédit: 'écut'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'écut' → logprob: -0.040891293436288834
    2. 'ecut' → logprob: -3.415891408920288
    3. 'éc' → logprob: -5.165891170501709
    4. 'é' → logprob: -7.290891170501709
    5. 'ec' → logprob: -8.040891647338867
    6. 'ect' → logprob: -8.540891647338867
    7. 'équ' → logprob: -9.540891647338867
    8. '```' → logprob: -9.915891647338867
    9. 'secut' → logprob: -10.040891647338867
    10. 't' → logprob: -10.540891647338867

Token 460: 'ifs' (ID: 14119)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.5007419586181641
    2. '           ' → logprob: -1.125741958618164
    3. 'u' → logprob: -4.750741958618164
    4. 'if' → logprob: -4.875741958618164
    5. '       ' → logprob: -5.000741958618164
    6. 'es' → logprob: -5.000741958618164
    7. 'e' → logprob: -5.125741958618164
    8. ',' → logprob: -5.875741958618164
    9. 'for' → logprob: -6.375741958618164
    10. '                   ' → logprob: -6.500741958618164

Token 461: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0074162557721138
    2. ',' → logprob: -6.132416248321533
    3. '               ' → logprob: -6.382416248321533
    4. ' if' → logprob: -6.507416248321533
    5. '       ' → logprob: -7.007416248321533
    6. ':' → logprob: -8.132416725158691
    7. ' (' → logprob: -8.882416725158691
    8. ' for' → logprob: -8.882416725158691
    9. ' and' → logprob: -9.382416725158691
    10. '		' → logprob: -9.632416725158691

Token 462: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.00405987910926342
    2. '       ' → logprob: -5.879059791564941
    3. '               ' → logprob: -7.629059791564941
    4. '		' → logprob: -8.254059791564941
    5. ',' → logprob: -9.004059791564941
    6. ' if' → logprob: -9.129059791564941
    7. '	       ' → logprob: -9.629059791564941
    8. '<|end|>' → logprob: -10.254059791564941
    9. ' for' → logprob: -10.504059791564941
    10. ':' → logprob: -10.504059791564941

Token 463: ' if' (ID: 538)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.08416924625635147
    2. ' if' → logprob: -3.2091691493988037
    3. '       ' → logprob: -3.9591691493988037
    4. ' for' → logprob: -4.334169387817383
    5. 'if' (adapté à ' if') → logprob: -5.334169387817383
    6. 'for' → logprob: -5.834169387817383
    7. '               ' → logprob: -8.709169387817383
    8. ' ' → logprob: -10.334169387817383
    9. '            
' → logprob: -10.334169387817383
    10. '   ' → logprob: -10.709169387817383

Token 464: ' used' (ID: 2061)
  Prédit: ' used'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' used' → logprob: -0.900908887386322
    2. ' not' → logprob: -1.0259089469909668
    3. 'used' → logprob: -1.5259089469909668
    4. 'not' → logprob: -4.025908946990967
    5. ' n' → logprob: -11.150908470153809
    6. ' u' → logprob: -11.900908470153809
    7. ' ' → logprob: -12.088408470153809
    8. 'n' → logprob: -12.525908470153809
    9. ' cost' → logprob: -13.025908470153809
    10. '(not' → logprob: -13.088408470153809

Token 465: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.2254207879304886
    2. '==' → logprob: -1.6004208326339722
    3. ' ' → logprob: -12.975420951843262
    4. '0' → logprob: -13.475420951843262
    5. '=' → logprob: -13.725420951843262
    6. '[' → logprob: -13.975420951843262
    7. '   ' → logprob: -14.475420951843262
    8. ']==' → logprob: -14.475420951843262
    9. '==
' → logprob: -15.100420951843262
    10. '```' → logprob: -15.100420951843262

Token 466: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0019286326132714748
    2. ' ' → logprob: -6.251928806304932
    3. '   ' → logprob: -19.001928329467773
    4. '=' → logprob: -21.126928329467773
    5. '  ' → logprob: -21.501928329467773
    6. ' ' → logprob: -21.751928329467773
    7. '۰' → logprob: -21.751928329467773
    8. '```' → logprob: -21.751928329467773
    9. 'False' → logprob: -21.751928329467773
    10. '	' → logprob: -22.001928329467773

Token 467: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.0206720617134124e-05
    2. ' ' → logprob: -11.50001049041748
    3. '1' → logprob: -17.812509536743164
    4. '   ' → logprob: -18.625009536743164
    5. 'False' → logprob: -19.125009536743164
    6. '۰' → logprob: -19.250009536743164
    7. '=' → logprob: -20.000009536743164
    8. '```' → logprob: -20.125009536743164
    9. '０' → logprob: -20.187509536743164
    10. '	' → logprob: -20.812509536743164

Token 468: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.39632508158683777
    2. ':
' → logprob: -1.6463251113891602
    3. ' and' → logprob: -2.02132511138916
    4. 'and' → logprob: -6.77132511138916
    5. '           ' → logprob: -7.89632511138916
    6. '               ' → logprob: -8.39632511138916
    7. '       ' → logprob: -9.02132511138916
    8. '   ' → logprob: -9.52132511138916
    9. '	and' → logprob: -11.52132511138916
    10. ' :
' → logprob: -12.14632511138916

Token 469: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.027494879439473152
    2. '           ' → logprob: -3.9024949073791504
    3. '       ' → logprob: -5.27749490737915
    4. ' for' → logprob: -6.65249490737915
    5. ',' → logprob: -9.027494430541992
    6. ' ' → logprob: -9.902494430541992
    7. '	       ' → logprob: -9.902494430541992
    8. '                
' → logprob: -10.277494430541992
    9. 'for' → logprob: -10.402494430541992
    10. ' and' → logprob: -10.402494430541992

Token 470: ' #' (ID: 1069)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.9093912839889526
    2. ' for' → logprob: -1.2843912839889526
    3. '           ' → logprob: -1.7843912839889526
    4. '               ' → logprob: -1.9093912839889526
    5. ' if' → logprob: -6.284391403198242
    6. 'if' → logprob: -6.284391403198242
    7. ' ' → logprob: -8.159391403198242
    8. '   ' → logprob: -8.909391403198242
    9. '                   ' → logprob: -9.909391403198242
    10. '	for' → logprob: -10.284391403198242

Token 471: ' On' (ID: 2160)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.013632241636514664
    2. ' for' → logprob: -4.513632297515869
    3. 'if' → logprob: -6.513632297515869
    4. '           ' → logprob: -7.638632297515869
    5. '               ' → logprob: -8.638631820678711
    6. 'i' → logprob: -9.013631820678711
    7. 'edges' → logprob: -9.263631820678711
    8. '   ' → logprob: -10.263631820678711
    9. 'neighbors' → logprob: -10.388631820678711
    10. ' if' → logprob: -10.388631820678711

Token 472: ' parc' (ID: 22138)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.13237810134887695
    2. ' for' → logprob: -2.257378101348877
    3. '           ' → logprob: -4.132378101348877
    4. '               ' → logprob: -6.382378101348877
    5. '       ' → logprob: -7.882378101348877
    6. '=' → logprob: -8.882377624511719
    7. '                   ' → logprob: -8.882377624511719
    8. '   ' → logprob: -9.007377624511719
    9. '            
' → logprob: -9.382377624511719
    10. ' can' → logprob: -9.507377624511719

Token 473: 'ourt' (ID: 38600)
  Prédit: 'ours'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ours' → logprob: -0.02087141014635563
    2. 'our' → logprob: -4.270871639251709
    3. 'ourt' → logprob: -5.020871639251709
    4. 'oure' → logprob: -9.64587116241455
    5. '_' → logprob: -11.89587116241455
    6. 'ourse' → logprob: -13.27087116241455
    7. 'or' → logprob: -13.39587116241455
    8. 'ou' → logprob: -13.52087116241455
    9. 'urs' → logprob: -13.89587116241455
    10. '```' → logprob: -13.89587116241455

Token 474: ' les' (ID: 1341)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.502551257610321
    2. ' for' → logprob: -1.1275513172149658
    3. 'v' → logprob: -4.252551078796387
    4. 'range' → logprob: -4.377551078796387
    5. 'len' → logprob: -4.627551078796387
    6. ' u' → logprob: -4.627551078796387
    7. 'u' → logprob: -4.752551078796387
    8. 'graph' → logprob: -5.377551078796387
    9. ' range' → logprob: -5.627551078796387
    10. ' len' → logprob: -5.877551078796387

Token 475: ' voisins' (ID: 166720)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.9578465819358826
    2. 'for' → logprob: -1.4578466415405273
    3. 'v' → logprob: -2.0828466415405273
    4. 'neighbors' → logprob: -2.5828466415405273
    5. 'graph' → logprob: -2.8328466415405273
    6. ' range' → logprob: -2.9578466415405273
    7. ' for' → logprob: -3.0828466415405273
    8. 'enumer' → logprob: -4.207846641540527
    9. ' graph' → logprob: -5.207846641540527
    10. ' neighbors' → logprob: -5.582846641540527

Token 476: ' de' (ID: 334)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.09595801681280136
    2. 'for' → logprob: -3.3459579944610596
    3. '               ' → logprob: -3.9709579944610596
    4. '[u' → logprob: -4.095958232879639
    5. ',' → logprob: -5.095958232879639
    6. '           ' → logprob: -5.220958232879639
    7. '[v' → logprob: -6.345958232879639
    8. ' of' → logprob: -6.470958232879639
    9. 'v' → logprob: -6.595958232879639
    10. ' u' → logprob: -6.845958232879639

Token 477: ' u' (ID: 337)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'u' → logprob: -0.18311068415641785
    2. 'graph' → logprob: -1.8081107139587402
    3. ' graph' → logprob: -6.18311071395874
    4. ' u' → logprob: -6.80811071395874
    5. '[u' → logprob: -9.183110237121582
    6. 'v' → logprob: -9.558110237121582
    7. 'range' → logprob: -11.933110237121582
    8. '(graph' → logprob: -12.558110237121582
    9. '	graph' → logprob: -13.183110237121582
    10. '(u' → logprob: -13.808110237121582

Token 478: '
' (ID: 198)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.6061272621154785
    2. ':' → logprob: -0.9811272621154785
    3. ' for' → logprob: -3.7311272621154785
    4. '                   ' → logprob: -3.9811272621154785
    5. ':
' → logprob: -4.1061272621154785
    6. ',' → logprob: -4.4811272621154785
    7. '           ' → logprob: -5.8561272621154785
    8. ' :' → logprob: -6.3561272621154785
    9. '   ' → logprob: -6.7311272621154785
    10. 'for' → logprob: -6.9811272621154785

Token 479: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.007770239841192961
    2. ' for' → logprob: -6.13277006149292
    3. '       ' → logprob: -6.50777006149292
    4. ',' → logprob: -6.75777006149292
    5. '           ' → logprob: -6.88277006149292
    6. '                   ' → logprob: -8.007770538330078
    7. '			' → logprob: -8.132770538330078
    8. ':' → logprob: -8.632770538330078
    9. '	           ' → logprob: -8.632770538330078
    10. '	' → logprob: -8.882770538330078

Token 480: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.17832185328006744
    2. 'for' (adapté à ' for') → logprob: -1.9283218383789062
    3. '               ' → logprob: -4.053321838378906
    4. '           ' → logprob: -7.928321838378906
    5. '                   ' → logprob: -8.803321838378906
    6. '	for' → logprob: -11.053321838378906
    7. ' ' → logprob: -11.303321838378906
    8. '       ' → logprob: -11.928321838378906
    9. '   ' → logprob: -12.178321838378906
    10. '                ' → logprob: -12.178321838378906

Token 481: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.03066408447921276
    2. ' v' → logprob: -3.9056639671325684
    3. 'i' → logprob: -5.030663967132568
    4. 'idx' → logprob: -6.405663967132568
    5. 'w' → logprob: -7.905663967132568
    6. 'u' → logprob: -8.155664443969727
    7. '(v' → logprob: -8.155664443969727
    8. ' i' → logprob: -8.280664443969727
    9. 'x' → logprob: -8.905664443969727
    10. 'vv' → logprob: -9.280664443969727

Token 482: '1' (ID: 16)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.003953728824853897
    2. ' in' → logprob: -6.00395393371582
    3. ' ,' → logprob: -6.87895393371582
    4. ',v' → logprob: -8.50395393371582
    5. 'in' → logprob: -8.75395393371582
    6. '[' → logprob: -10.75395393371582
    7. '2' → logprob: -11.12895393371582
    8. '1' → logprob: -11.50395393371582
    9. ' ' → logprob: -11.75395393371582
    10. 'v' → logprob: -12.00395393371582

Token 483: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00044056313345208764
    2. ' ,' → logprob: -8.37544059753418
    3. ',v' → logprob: -8.50044059753418
    4. ' in' → logprob: -12.62544059753418
    5. 'in' → logprob: -13.25044059753418
    6. ' ' → logprob: -15.25044059753418
    7. ',(' → logprob: -15.62544059753418
    8. '```' → logprob: -16.00044059753418
    9. '，' → logprob: -16.25044059753418
    10. ',_' → logprob: -16.37544059753418

Token 484: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.4741186201572418
    2. 'c' → logprob: -0.9741185903549194
    3. ' ' → logprob: -11.47411823272705
    4. 'v' → logprob: -11.59911823272705
    5. ')c' → logprob: -12.09911823272705
    6. '_c' → logprob: -12.47411823272705
    7. '<|end|>' → logprob: -12.59911823272705
    8. ' v' → logprob: -13.22411823272705
    9. '_' → logprob: -14.47411823272705
    10. ')' → logprob: -14.47411823272705

Token 485: '1' (ID: 16)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.022732172161340714
    2. 'in' → logprob: -4.147732257843018
    3. ',' → logprob: -5.147732257843018
    4. 'v' → logprob: -7.897732257843018
    5. ' ,' → logprob: -8.64773178100586
    6. '1' → logprob: -8.89773178100586
    7. '2' → logprob: -10.14773178100586
    8. ' ' → logprob: -10.14773178100586
    9. ')' → logprob: -10.64773178100586
    10. ',v' → logprob: -10.77273178100586

Token 486: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.06200846657156944
    2. 'in' → logprob: -2.8120083808898926
    3. ',' → logprob: -10.43700885772705
    4. ' ' → logprob: -12.43700885772705
    5. 's' → logprob: -13.56200885772705
    6. 'v' → logprob: -13.93700885772705
    7. '	in' → logprob: -14.43700885772705
    8. '  ' → logprob: -14.56200885772705
    9. '```' → logprob: -14.68700885772705
    10. '   ' → logprob: -14.93700885772705

Token 487: ' graph' (ID: 7465)
  Prédit: 'graph'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'graph' → logprob: -0.005234952084720135
    2. ' graph' → logprob: -5.255234718322754
    3. '(graph' → logprob: -14.255234718322754
    4. '	graph' → logprob: -14.505234718322754
    5. '_graph' → logprob: -17.13023567199707
    6. 'Graph' → logprob: -17.88023567199707
    7. 'graphql' → logprob: -18.25523567199707
    8. 'c' → logprob: -18.75523567199707
    9. '.graph' → logprob: -19.00523567199707
    10. '   ' → logprob: -19.38023567199707

Token 488: '[u' (ID: 48750)
  Prédit: '[u'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[u' → logprob: -1.2664456789934775e-06
    2. 'u' → logprob: -13.875000953674316
    3. '[v' → logprob: -15.250000953674316
    4. '[' → logprob: -16.625001907348633
    5. '[
' → logprob: -17.250001907348633
    6. ' [' → logprob: -17.875001907348633
    7. '
' → logprob: -19.500001907348633
    8. '```' → logprob: -19.750001907348633
    9. '(u' → logprob: -20.000001907348633
    10. '	u' → logprob: -20.125001907348633

Token 489: ']:
' (ID: 22152)
  Prédit: ']:'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']:' → logprob: -0.3494090139865875
    2. ']:
' → logprob: -1.2244089841842651
    3. ']:
' → logprob: -7.599409103393555
    4. ']' → logprob: -8.474409103393555
    5. ':' → logprob: -8.974409103393555
    6. ']:

' → logprob: -9.349409103393555
    7. '           ' → logprob: -10.849409103393555
    8. ']:


' → logprob: -12.099409103393555
    9. ' ]' → logprob: -12.974409103393555
    10. '               ' → logprob: -12.974409103393555

Token 490: '                   ' (ID: 699)
  Prédit: '                   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.006692276336252689
    2. '               ' → logprob: -6.256692409515381
    3. ':' → logprob: -7.131692409515381
    4. ':
' → logprob: -7.381692409515381
    5. '				' → logprob: -7.506692409515381
    6. '		           ' → logprob: -7.506692409515381
    7. '                       ' → logprob: -7.881692409515381
    8. '           ' → logprob: -8.006691932678223
    9. '			       ' → logprob: -8.631691932678223
    10. ',' → logprob: -8.631691932678223

Token 491: ' #' (ID: 1069)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.34134137630462646
    2. ' for' → logprob: -1.8413413763046265
    3. '#' (adapté à ' #') → logprob: -2.966341495513916
    4. '                   ' → logprob: -3.216341495513916
    5. '               ' → logprob: -4.091341495513916
    6. ' #' → logprob: -4.591341495513916
    7. 'if' → logprob: -5.216341495513916
    8. '                       ' → logprob: -5.716341495513916
    9. '   ' → logprob: -6.591341495513916
    10. ' if' → logprob: -6.966341495513916

Token 492: ' De' (ID: 1516)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.025607772171497345
    2. ' for' → logprob: -4.275607585906982
    3. 'if' → logprob: -4.525607585906982
    4. ' if' → logprob: -8.65060806274414
    5. 'v' → logprob: -9.02560806274414
    6. '   ' → logprob: -9.52560806274414
    7. '#' → logprob: -9.65060806274414
    8. '           ' → logprob: -10.15060806274414
    9. '       ' → logprob: -10.77560806274414
    10. '               ' → logprob: -11.40060806274414

Token 493: ' v' (ID: 323)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.07949486374855042
    2. 'v' → logprob: -3.3294949531555176
    3. ' for' → logprob: -3.4544949531555176
    4. '#' → logprob: -5.579494953155518
    5. 'f' → logprob: -6.329494953155518
    6. 'graph' → logprob: -7.079494953155518
    7. 'l' → logprob: -7.704494953155518
    8. ' v' → logprob: -8.32949447631836
    9. 'p' → logprob: -8.45449447631836
    10. '   ' → logprob: -8.57949447631836

Token 494: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0017483653500676155
    2. ',' → logprob: -6.626748561859131
    3. 'v' → logprob: -8.251748085021973
    4. 'for' → logprob: -9.126748085021973
    5. ' for' → logprob: -10.751748085021973
    6. '```' → logprob: -12.001748085021973
    7. ',v' → logprob: -12.251748085021973
    8. 'a' → logprob: -12.251748085021973
    9. '[' → logprob: -13.126748085021973
    10. ' v' → logprob: -13.126748085021973

Token 495: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.039896707981824875
    2. 'for' → logprob: -4.039896488189697
    3. ' for' → logprob: -4.414896488189697
    4. ' ,' → logprob: -5.164896488189697
    5. ':' → logprob: -5.914896488189697
    6. '                   ' → logprob: -7.664896488189697
    7. '   ' → logprob: -9.039896965026855
    8. '       ' → logprob: -9.914896965026855
    9. ',
' → logprob: -9.914896965026855
    10. ' in' → logprob: -10.039896965026855

Token 496: ' on' (ID: 402)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.07909060269594193
    2. ' for' → logprob: -2.5790905952453613
    3. '                   ' → logprob: -8.95409107208252
    4. '   ' → logprob: -10.95409107208252
    5. '                       ' → logprob: -10.95409107208252
    6. 'if' → logprob: -11.32909107208252
    7. '               ' → logprob: -11.57909107208252
    8. '       ' → logprob: -12.45409107208252
    9. '           ' → logprob: -12.57909107208252
    10. '	for' → logprob: -12.70409107208252

Token 497: ' parc' (ID: 22138)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0019618207588791847
    2. ' for' → logprob: -6.251961708068848
    3. '                   ' → logprob: -10.876961708068848
    4. '               ' → logprob: -12.626961708068848
    5. '                       ' → logprob: -12.876961708068848
    6. '           ' → logprob: -13.001961708068848
    7. '       ' → logprob: -13.501961708068848
    8. 'if' → logprob: -14.126961708068848
    9. 'or' → logprob: -14.251961708068848
    10. '                           ' → logprob: -14.501961708068848

Token 498: 'ourt' (ID: 38600)
  Prédit: 'ours'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ours' → logprob: -0.5719013214111328
    2. 'ourt' → logprob: -0.9469013214111328
    3. 'our' → logprob: -3.071901321411133
    4. 'oure' → logprob: -7.446901321411133
    5. 'ourse' → logprob: -8.071901321411133
    6. '```' → logprob: -9.571901321411133
    7. '[' → logprob: -10.196901321411133
    8. '#' → logprob: -10.321901321411133
    9. '**' → logprob: -10.446901321411133
    10. '
' → logprob: -10.571901321411133

Token 499: ' à' (ID: 1221)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0883430540561676
    2. ' for' → logprob: -2.8383431434631348
    3. 'les' → logprob: -3.8383431434631348
    4. ' les' → logprob: -6.213343143463135
    5. 'the' → logprob: -6.713343143463135
    6. 'v' → logprob: -7.963343143463135
    7. ' the' → logprob: -8.713342666625977
    8. 's' → logprob: -8.838342666625977
    9. '   ' → logprob: -8.963342666625977
    10. 'all' → logprob: -9.213342666625977

Token 500: ' nouveau' (ID: 23184)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.40047675371170044
    2. ' for' → logprob: -1.1504766941070557
    3. 'v' → logprob: -4.525476932525635
    4. ' v' → logprob: -7.150476932525635
    5. ' graph' → logprob: -7.900476932525635
    6. 'graph' → logprob: -8.400476455688477
    7. '[v' → logprob: -8.400476455688477
    8. 'l' → logprob: -8.650476455688477
    9. ' la' → logprob: -8.900476455688477
    10. 'c' → logprob: -9.025476455688477

Token 501: ' ses' (ID: 6707)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.2794888913631439
    2. ' for' → logprob: -1.5294889211654663
    3. ' les' → logprob: -4.279489040374756
    4. 'les' → logprob: -4.404489040374756
    5. ' the' → logprob: -8.404488563537598
    6. 'the' → logprob: -8.529488563537598
    7. 'v' → logprob: -8.904488563537598
    8. '[v' → logprob: -9.154488563537598
    9. ' la' → logprob: -9.279488563537598
    10. ' ' → logprob: -9.904488563537598

Token 502: ' voisins' (ID: 166720)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.3843982219696045
    2. 'vo' → logprob: -1.6343982219696045
    3. 'neighbors' → logprob: -2.1343982219696045
    4. ' voisins' → logprob: -5.634398460388184
    5. ' for' → logprob: -6.759398460388184
    6. 'v' → logprob: -7.384398460388184
    7. ' neighbors' → logprob: -9.009398460388184
    8. '```' → logprob: -9.259398460388184
    9. 'graph' → logprob: -9.759398460388184
    10. 'neighbor' → logprob: -10.259398460388184

Token 503: ' (' (ID: 350)
  Prédit: '                   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.005353770684450865
    2. ':' → logprob: -6.130353927612305
    3. '                       ' → logprob: -6.255353927612305
    4. '               ' → logprob: -7.755353927612305
    5. ' for' → logprob: -8.505353927612305
    6. ',' → logprob: -8.630353927612305
    7. '       ' → logprob: -9.005353927612305
    8. '           ' → logprob: -9.505353927612305
    9. ' :' → logprob: -10.005353927612305
    10. '```' → logprob: -10.505353927612305

Token 504: 'segment' (ID: 45362)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.11533117294311523
    2. ' for' → logprob: -2.2403311729431152
    3. 'v' → logprob: -6.365331172943115
    4. ' v' → logprob: -7.490331172943115
    5. '                   ' → logprob: -9.365331649780273
    6. '```' → logprob: -9.865331649780273
    7. '(v' → logprob: -10.865331649780273
    8. '               ' → logprob: -11.490331649780273
    9. ')' → logprob: -11.615331649780273
    10. '       ' → logprob: -11.740331649780273

Token 505: ' cons' (ID: 1473)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.7228401303291321
    2. 'for' → logprob: -0.7228401303291321
    3. 'v' → logprob: -4.472840309143066
    4. '                   ' → logprob: -4.972840309143066
    5. ' v' → logprob: -5.722840309143066
    6. ',' → logprob: -6.097840309143066
    7. 's' → logprob: -6.722840309143066
    8. '```' → logprob: -7.097840309143066
    9. ',v' → logprob: -7.347840309143066
    10. '[v' → logprob: -7.597840309143066

Token 506: 'écut' (ID: 96392)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.009197547100484371
    2. 'u' → logprob: -5.00919771194458
    3. '       ' → logprob: -7.88419771194458
    4. '```' → logprob: -8.134197235107422
    5. '           ' → logprob: -8.259197235107422
    6. ' for' → logprob: -8.384197235107422
    7. '               ' → logprob: -8.884197235107422
    8. 'ut' → logprob: -9.134197235107422
    9. 'ub' → logprob: -9.134197235107422
    10. 'iques' → logprob: -9.384197235107422

Token 507: 'if' (ID: 366)
  Prédit: 'aires'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'aires' → logprob: -0.09677492827177048
    2. 'ents' → logprob: -2.9717748165130615
    3. 'es' → logprob: -4.471775054931641
    4. 'if' → logprob: -4.846775054931641
    5. 'for' → logprob: -5.346775054931641
    6. 'ves' → logprob: -5.471775054931641
    7. 'ifs' → logprob: -5.721775054931641
    8. 'v' → logprob: -6.471775054931641
    9. 'ent' → logprob: -6.846775054931641
    10. 'u' → logprob: -7.221775054931641

Token 508: ')
' (ID: 446)
  Prédit: '                   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                   ' → logprob: -0.790339469909668
    2. 'for' → logprob: -1.540339469909668
    3. ' for' → logprob: -2.290339469909668
    4. ')' → logprob: -2.290339469909668
    5. ',' → logprob: -2.790339469909668
    6. '),' → logprob: -3.665339469909668
    7. '[v' → logprob: -4.665339469909668
    8. '):
' → logprob: -5.040339469909668
    9. '):' → logprob: -5.165339469909668
    10. 'v' → logprob: -5.290339469909668

Token 509: '                   ' (ID: 699)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.3913687765598297
    2. '                   ' → logprob: -1.1413687467575073
    3. '               ' → logprob: -6.016368865966797
    4. '       ' → logprob: -7.016368865966797
    5. '                        
' → logprob: -8.141368865966797
    6. ':' → logprob: -9.016368865966797
    7. '                    
' → logprob: -9.016368865966797
    8. '```' → logprob: -9.016368865966797
    9. '           ' → logprob: -9.266368865966797
    10. '                           ' → logprob: -9.641368865966797

Token 510: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.7730672359466553
    2. '                   ' → logprob: -1.1480672359466553
    3. 'for' (adapté à ' for') → logprob: -1.5230672359466553
    4. '                       ' → logprob: -6.023067474365234
    5. '               ' → logprob: -7.773067474365234
    6. '           ' → logprob: -9.273067474365234
    7. '       ' → logprob: -9.523067474365234
    8. '				' → logprob: -10.523067474365234
    9. '                    ' → logprob: -10.773067474365234
    10. '	for' → logprob: -10.898067474365234

Token 511: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.00012415809032972902
    2. ' v' → logprob: -9.000123977661133
    3. '	v' → logprob: -14.500123977661133
    4. 'w' → logprob: -16.375123977661133
    5. '(v' → logprob: -18.125123977661133
    6. ',v' → logprob: -18.750123977661133
    7. ')v' → logprob: -19.375123977661133
    8. '[v' → logprob: -19.875123977661133
    9. '```' → logprob: -19.875123977661133
    10. '`' → logprob: -20.250123977661133

Token 512: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -6.420598219847307e-05
    2. ',' → logprob: -9.8750638961792
    3. 'v' → logprob: -11.8750638961792
    4. ',v' → logprob: -12.2500638961792
    5. 'w' → logprob: -16.562564849853516
    6. '_' → logprob: -16.750064849853516
    7. 's' → logprob: -16.937564849853516
    8. '
' → logprob: -16.937564849853516
    9. 'a' → logprob: -17.125064849853516
    10. 'for' → logprob: -17.187564849853516

Token 513: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.4974866644479334e-05
    2. ' ,' → logprob: -11.500015258789062
    3. ',c' → logprob: -13.000015258789062
    4. ',v' → logprob: -13.000015258789062
    5. ',s' → logprob: -16.750015258789062
    6. '‌,' → logprob: -16.875015258789062
    7. ',d' → logprob: -17.500015258789062
    8. '<|end|>' → logprob: -17.625015258789062
    9. 's' → logprob: -18.250015258789062
    10. ',w' → logprob: -18.375015258789062

Token 514: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.02324605919420719
    2. ' c' → logprob: -3.7732460498809814
    3. '	c' → logprob: -15.523245811462402
    4. ' ' → logprob: -16.64824676513672
    5. ')c' → logprob: -16.77324676513672
    6. '_c' → logprob: -16.89824676513672
    7. '$c' → logprob: -17.39824676513672
    8. '   ' → logprob: -17.89824676513672
    9. '    ' → logprob: -18.02324676513672
    10. ',c' → logprob: -18.14824676513672

Token 515: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -3.292907877039397e-06
    2. ',' → logprob: -13.62500286102295
    3. ' ' → logprob: -14.50000286102295
    4. ' in' → logprob: -14.50000286102295
    5. '₂' → logprob: -15.25000286102295
    6. '```' → logprob: -15.50000286102295
    7. '(graph' → logprob: -15.62500286102295
    8. '1' → logprob: -15.62500286102295
    9. 'v' → logprob: -16.375003814697266
    10. '_' → logprob: -16.750003814697266

Token 516: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.004078639671206474
    2. 'in' → logprob: -5.5040788650512695
    3. ' ' → logprob: -16.004077911376953
    4. '	in' → logprob: -16.879077911376953
    5. 'import' → logprob: -17.129077911376953
    6. ' ' → logprob: -17.379077911376953
    7. ',' → logprob: -17.754077911376953
    8. ')' → logprob: -18.129077911376953
    9. '```' → logprob: -18.316577911376953
    10. 'ins' → logprob: -18.441577911376953

Token 517: ' graph' (ID: 7465)
  Prédit: 'graph'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'graph' → logprob: -0.3133293390274048
    2. ' graph' → logprob: -1.3133293390274048
    3. '(graph' → logprob: -9.813329696655273
    4. '	graph' → logprob: -11.438329696655273
    5. 'Graph' → logprob: -14.063329696655273
    6. '_graph' → logprob: -14.938329696655273
    7. 'graphql' → logprob: -15.063329696655273
    8. 'raph' → logprob: -15.313329696655273
    9. '.graph' → logprob: -15.563329696655273
    10. ' ' → logprob: -16.188329696655273

Token 518: '[v' (ID: 36561)
  Prédit: '[v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[v' → logprob: -0.018226152285933495
    2. '[u' → logprob: -4.018226146697998
    3. 'v' → logprob: -9.893226623535156
    4. '[' → logprob: -11.018226623535156
    5. 'graph' → logprob: -12.268226623535156
    6. '1' → logprob: -14.518226623535156
    7. 'import' → logprob: -14.643226623535156
    8. '```' → logprob: -14.643226623535156
    9. '[user' → logprob: -14.893226623535156
    10. '[node' → logprob: -15.143226623535156

Token 519: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0011851112358272076
    2. '[u' → logprob: -6.751184940338135
    3. 'u' → logprob: -12.126185417175293
    4. '[v' → logprob: -12.751185417175293
    5. 'v' → logprob: -12.751185417175293
    6. '[' → logprob: -13.251185417175293
    7. ']' → logprob: -14.126185417175293
    8. ']:' → logprob: -15.376185417175293
    9. '```' → logprob: -15.376185417175293
    10. 's' → logprob: -16.001184463500977

Token 520: ']:
' (ID: 22152)
  Prédit: ']:'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']:' → logprob: -0.020695455372333527
    2. ']:
' → logprob: -3.895695447921753
    3. ']' → logprob: -9.770695686340332
    4. ':' → logprob: -10.395695686340332
    5. ']:
' → logprob: -10.395695686340332
    6. ']:

' → logprob: -11.395695686340332
    7. ' ]' → logprob: -11.895695686340332
    8. '],' → logprob: -12.270695686340332
    9. '):' → logprob: -12.770695686340332
    10. '"]:' → logprob: -13.145695686340332

Token 521: '                       ' (ID: 968)
  Prédit: '                       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.015189365483820438
    2. ':' → logprob: -5.765189170837402
    3. '                               ' → logprob: -6.015189170837402
    4. '<|end|>' → logprob: -6.015189170837402
    5. '                           ' → logprob: -6.140189170837402
    6. '                   ' → logprob: -6.515189170837402
    7. '                        
' → logprob: -7.015189170837402
    8. '                        ' → logprob: -7.140189170837402
    9. '               ' → logprob: -7.640189170837402
    10. '       ' → logprob: -9.015189170837402

Token 522: ' #' (ID: 1069)
  Prédit: '                           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                           ' → logprob: -0.028854934498667717
    2. '                               ' → logprob: -4.903854846954346
    3. ' if' → logprob: -5.153854846954346
    4. '                            ' → logprob: -5.153854846954346
    5. '                       ' → logprob: -5.278854846954346
    6. ' ' → logprob: -7.028854846954346
    7. '<|end|>' → logprob: -7.403854846954346
    8. '                        ' → logprob: -7.528854846954346
    9. '                   ' → logprob: -8.028855323791504
    10. '                            
' → logprob: -8.153855323791504

Token 523: ' Conditions' (ID: 39333)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.31543058156967163
    2. 'nc' → logprob: -1.5654306411743164
    3. 'n' → logprob: -4.315430641174316
    4. '#' → logprob: -4.440430641174316
    5. 'new' → logprob: -4.440430641174316
    6. ' if' → logprob: -4.940430641174316
    7. 'half' → logprob: -5.315430641174316
    8. 'total' → logprob: -5.565430641174316
    9. 'discount' → logprob: -5.940430641174316
    10. 're' → logprob: -5.940430641174316

Token 524: ':' (ID: 25)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.20056699216365814
    2. 'if' → logprob: -1.8255670070648193
    3. '                           ' → logprob: -4.45056676864624
    4. ':' → logprob: -5.95056676864624
    5. '                       ' → logprob: -5.95056676864624
    6. ' =' → logprob: -6.45056676864624
    7. '                               ' → logprob: -7.07556676864624
    8. '                        ' → logprob: -8.200567245483398
    9. '						' → logprob: -8.700567245483398
    10. '                            ' → logprob: -8.825567245483398

Token 525: ' 
' (ID: 793)
  Prédit: ' v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' v' → logprob: -0.9204784631729126
    2. 'v' → logprob: -1.1704784631729126
    3. ' u' → logprob: -1.9204784631729126
    4. 'u' → logprob: -2.295478343963623
    5. ' if' → logprob: -3.420478343963623
    6. 'if' → logprob: -4.795478343963623
    7. '                           ' → logprob: -7.295478343963623
    8. ' (' → logprob: -7.670478343963623
    9. ' not' → logprob: -8.045478820800781
    10. 'True' → logprob: -8.545478820800781

Token 526: '                       ' (ID: 968)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.7727764248847961
    2. '                       ' → logprob: -1.3977763652801514
    3. '                           ' → logprob: -1.7727763652801514
    4. 'if' → logprob: -3.1477763652801514
    5. '                        ' → logprob: -3.1477763652801514
    6. '                               ' → logprob: -4.2727766036987305
    7. '                            ' → logprob: -4.8977766036987305
    8. ' ' → logprob: -5.8977766036987305
    9. '                        
' → logprob: -6.2727766036987305
    10. '               ' → logprob: -6.6477766036987305

Token 527: ' #' (ID: 1069)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'u' → logprob: -0.7623215913772583
    2. 'v' → logprob: -0.7623215913772583
    3. ' u' → logprob: -3.3873214721679688
    4. ' v' → logprob: -3.6373214721679688
    5. 'if' → logprob: -6.262321472167969
    6. ' (' → logprob: -6.762321472167969
    7. ' if' → logprob: -6.887321472167969
    8. '#' (adapté à ' #') → logprob: -7.637321472167969
    9. 'cost' → logprob: -7.637321472167969
    10. '(u' → logprob: -7.762321472167969

Token 528: ' -' (ID: 533)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.3067183196544647
    2. 'u' → logprob: -1.681718349456787
    3. ' v' → logprob: -2.931718349456787
    4. ' u' → logprob: -4.431718349456787
    5. 'used' → logprob: -5.181718349456787
    6. ' used' → logprob: -5.556718349456787
    7. 'not' → logprob: -7.681718349456787
    8. 'cost' → logprob: -7.806718349456787
    9. 'c' → logprob: -8.056717872619629
    10. ' (' → logprob: -8.244217872619629

Token 529: ' On' (ID: 2160)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.10190220922231674
    2. 'u' → logprob: -2.7269022464752197
    3. ' v' → logprob: -3.8519022464752197
    4. 'used' → logprob: -5.101902008056641
    5. ' u' → logprob: -6.226902008056641
    6. ' used' → logprob: -6.976902008056641
    7. 'not' → logprob: -7.851902008056641
    8. 'dist' → logprob: -8.35190200805664
    9. ' dist' → logprob: -9.41440200805664
    10. '(v' → logprob: -9.91440200805664

Token 530: ' est' (ID: 893)
  Prédit: '!='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '!=' → logprob: -0.9598432779312134
    2. ' !=' → logprob: -1.0848432779312134
    3. 'n' → logprob: -2.584843158721924
    4. 'v' → logprob: -3.084843158721924
    5. 'if' → logprob: -3.334843158721924
    6. ' v' → logprob: -3.459843158721924
    7. 'ne' → logprob: -3.709843158721924
    8. 'continue' → logprob: -4.209843158721924
    9. ' n' → logprob: -4.834843158721924
    10. 'u' → logprob: -5.084843158721924

Token 531: ' sûr' (ID: 46415)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'u' → logprob: -0.5344570875167847
    2. 'not' → logprob: -1.1594570875167847
    3. ' not' → logprob: -3.284457206726074
    4. ' u' → logprob: -3.409457206726074
    5. 'different' → logprob: -4.409457206726074
    6. 'v' → logprob: -5.409457206726074
    7. 'distinct' → logprob: -5.534457206726074
    8. '[u' → logprob: -5.659457206726074
    9. ' différent' → logprob: -7.284457206726074
    10. '<u' → logprob: -7.784457206726074

Token 532: ' que' (ID: 661)
  Prédit: ' que'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.04000895842909813
    2. '                       ' → logprob: -4.415009021759033
    3. '                           ' → logprob: -4.790009021759033
    4. ' that' → logprob: -4.915009021759033
    5. 'que' → logprob: -6.165009021759033
    6. ' de' → logprob: -6.165009021759033
    7. 'that' → logprob: -6.915009021759033
    8. ' ' → logprob: -7.040009021759033
    9. '                         ' → logprob: -7.165009021759033
    10. ' not' → logprob: -7.540009021759033

Token 533: ' u' (ID: 337)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.11059445887804031
    2. 'u' → logprob: -2.4855945110321045
    3. ' v' → logprob: -3.9855945110321045
    4. ' u' → logprob: -5.985594272613525
    5. '(v' → logprob: -9.985594749450684
    6. '   ' → logprob: -10.235594749450684
    7. 'used' → logprob: -10.360594749450684
    8. 'not' → logprob: -10.360594749450684
    9. '(u' → logprob: -10.610594749450684
    10. 'True' → logprob: -10.735594749450684

Token 534: '->' (ID: 609)
  Prédit: ' !='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' !=' → logprob: -0.5242120027542114
    2. '!=' → logprob: -0.8992120027542114
    3. ',' → logprob: -7.024211883544922
    4. ' not' → logprob: -10.149211883544922
    5. ')' → logprob: -10.399211883544922
    6. '[' → logprob: -10.899211883544922
    7. '!=-' → logprob: -11.274211883544922
    8. '==' → logprob: -11.524211883544922
    9. 'not' → logprob: -11.524211883544922
    10. '```' → logprob: -12.086711883544922

Token 535: 'v' (ID: 85)
  Prédit: 'v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.07889121770858765
    2. ' v' → logprob: -2.5788912773132324
    3. ' ' → logprob: -14.828890800476074
    4. 'u' → logprob: -14.953890800476074
    5. '	v' → logprob: -15.703890800476074
    6. '_v' → logprob: -16.45389175415039
    7. ' ' → logprob: -16.45389175415039
    8. '```' → logprob: -16.70389175415039
    9. ' u' → logprob: -16.95389175415039
    10. ',v' → logprob: -17.07889175415039

Token 536: '1' (ID: 16)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.7397142648696899
    2. '1' → logprob: -1.36471426486969
    3. '2' → logprob: -1.61471426486969
    4. ' ,' → logprob: -2.8647141456604004
    5. ',v' → logprob: -6.2397141456604
    6. ' and' → logprob: -6.4897141456604
    7. ' !=' → logprob: -6.4897141456604
    8. ' ' → logprob: -7.1147141456604
    9. '```' → logprob: -7.1147141456604
    10. ')' → logprob: -7.3647141456604

Token 537: '->' (ID: 609)
  Prédit: ' !='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' !=' → logprob: -0.098549485206604
    2. ' and' → logprob: -2.7235493659973145
    3. '!=' → logprob: -3.8485493659973145
    4. 'and' → logprob: -6.3485493659973145
    5. ',' → logprob: -6.3485493659973145
    6. ')' → logprob: -6.5985493659973145
    7. '                       ' → logprob: -7.9735493659973145
    8. ' is' → logprob: -8.223549842834473
    9. ' ==' → logprob: -8.473549842834473
    10. '),' → logprob: -8.598549842834473

Token 538: 'v' (ID: 85)
  Prédit: 'v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.005929274018853903
    2. ' v' → logprob: -5.130929470062256
    3. ' ' → logprob: -15.005928993225098
    4. '	v' → logprob: -16.005929946899414
    5. '
' → logprob: -16.380929946899414
    6. '`' → logprob: -16.505929946899414
    7. ' ' → logprob: -17.380929946899414
    8. ',v' → logprob: -17.630929946899414
    9. 'u' → logprob: -17.755929946899414
    10. '```' → logprob: -17.755929946899414

Token 539: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -3.4121114822482923e-06
    2. ' ' → logprob: -13.750003814697266
    3. 'v' → logprob: -14.750003814697266
    4. 'u' → logprob: -14.937503814697266
    5. '```' → logprob: -15.187503814697266
    6. ',' → logprob: -15.500003814697266
    7. ' v' → logprob: -15.750003814697266
    8. '۲' → logprob: -16.000003814697266
    9. '₂' → logprob: -16.000003814697266
    10. '1' → logprob: -16.250003814697266

Token 540: ' forme' (ID: 27450)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -1.212491750717163
    2. '                           ' → logprob: -1.462491750717163
    3. ' and' → logprob: -1.837491750717163
    4. ',' → logprob: -2.587491750717163
    5. ' !=' → logprob: -2.837491750717163
    6. ' ,' → logprob: -3.462491750717163
    7. ':' → logprob: -3.962491750717163
    8. ')' → logprob: -4.462491989135742
    9. ' is' → logprob: -4.587491989135742
    10. ' ' → logprob: -4.587491989135742

Token 541: ' deux' (ID: 10301)
  Prédit: ' un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.07594768702983856
    2. 'un' → logprob: -3.4509477615356445
    3. ' une' → logprob: -3.7009477615356445
    4. 'une' → logprob: -4.2009477615356445
    5. ' a' → logprob: -6.9509477615356445
    6. 'a' → logprob: -7.8259477615356445
    7. ' deux' → logprob: -8.700947761535645
    8. ''un' → logprob: -9.825947761535645
    9. '_un' → logprob: -10.825947761535645
    10. ' ' → logprob: -10.825947761535645

Token 542: ' segments' (ID: 33749)
  Prédit: ' ar'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ar' → logprob: -0.672302782535553
    2. ' segments' → logprob: -1.4223027229309082
    3. ' edges' → logprob: -2.297302722930908
    4. 'ar' → logprob: -2.797302722930908
    5. ' arcs' → logprob: -3.422302722930908
    6. 'segments' → logprob: -3.672302722930908
    7. ' étapes' → logprob: -4.297302722930908
    8. 'edges' → logprob: -4.547302722930908
    9. ' steps' → logprob: -7.297302722930908
    10. 's' → logprob: -8.047303199768066

Token 543: ' cons' (ID: 1473)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.11428570747375488
    2. ',' → logprob: -3.364285707473755
    3. '                           ' → logprob: -3.489285707473755
    4. '                        
' → logprob: -4.364285469055176
    5. '                        ' → logprob: -4.364285469055176
    6. ' (' → logprob: -5.989285469055176
    7. '                            
' → logprob: -5.989285469055176
    8. '<|end|>' → logprob: -6.239285469055176
    9. '                            ' → logprob: -6.364285469055176
    10. ':' → logprob: -6.489285469055176

Token 544: 'écut' (ID: 96392)
  Prédit: 'écut'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'écut' → logprob: -0.12710921466350555
    2. 'ecut' → logprob: -2.2521092891693115
    3. 'ec' → logprob: -5.127109050750732
    4. 'éc' → logprob: -5.502109050750732
    5. 'é' → logprob: -6.252109050750732
    6. 'ect' → logprob: -7.627109050750732
    7. '```' → logprob: -8.00210952758789
    8. 'ecu' → logprob: -8.25210952758789
    9. '{' → logprob: -8.50210952758789
    10. 'e' → logprob: -9.00210952758789

Token 545: 'ifs' (ID: 14119)
  Prédit: 'ifs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ifs' → logprob: -0.13608694076538086
    2. 'if' → logprob: -2.136086940765381
    3. 's' → logprob: -6.261086940765381
    4. ',' → logprob: -6.886086940765381
    5. '
' → logprob: -7.011086940765381
    6. '                       ' → logprob: -7.136086940765381
    7. '                   ' → logprob: -7.261086940765381
    8. '                           ' → logprob: -7.761086940765381
    9. '               ' → logprob: -7.886086940765381
    10. 'ents' → logprob: -7.886086940765381

Token 546: '
' (ID: 198)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.08100781589746475
    2. ',' → logprob: -3.456007719039917
    3. '                        
' → logprob: -3.956007719039917
    4. '                           ' → logprob: -4.581007957458496
    5. '
' → logprob: -5.581007957458496
    6. '                        ' → logprob: -5.706007957458496
    7. '<|end|>' → logprob: -5.956007957458496
    8. ' if' → logprob: -6.831007957458496
    9. '                            
' → logprob: -6.956007957458496
    10. ':' → logprob: -6.956007957458496

Token 547: '                       ' (ID: 968)
  Prédit: '                       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.05321916937828064
    2. '                           ' → logprob: -3.6782190799713135
    3. ',' → logprob: -4.928219318389893
    4. '                        
' → logprob: -4.928219318389893
    5. '                        ' → logprob: -5.053219318389893
    6. '<|end|>' → logprob: -6.178219318389893
    7. ')' → logprob: -6.928219318389893
    8. ':' → logprob: -7.553219318389893
    9. '                            ' → logprob: -7.928219318389893
    10. '                               ' → logprob: -8.053218841552734

Token 548: ' #' (ID: 1069)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.01713389903306961
    2. ' if' → logprob: -5.642133712768555
    3. '                        
' → logprob: -5.642133712768555
    4. '                        ' → logprob: -5.767133712768555
    5. '                           ' → logprob: -6.142133712768555
    6. 'if' → logprob: -6.767133712768555
    7. ',' → logprob: -6.892133712768555
    8. '
' → logprob: -7.767133712768555
    9. ')' → logprob: -7.892133712768555
    10. ' ' → logprob: -8.267133712768555

Token 549: ' -' (ID: 533)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.4648875594139099
    2. ' if' → logprob: -1.2148876190185547
    3. 'if' → logprob: -2.9648876190185547
    4. '                        
' → logprob: -4.839887619018555
    5. '                           ' → logprob: -5.464887619018555
    6. 'n' → logprob: -5.839887619018555
    7. '                        ' → logprob: -6.214887619018555
    8. '
' → logprob: -6.589887619018555
    9. ' n' → logprob: -6.839887619018555
    10. ' #' → logprob: -7.339887619018555

Token 550: ' Le' (ID: 2018)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.192740559577942
    2. 'v' → logprob: -1.442740559577942
    3. ' dist' → logprob: -1.942740559577942
    4. ' if' → logprob: -2.3177404403686523
    5. ' v' → logprob: -2.5677404403686523
    6. 'u' → logprob: -3.5677404403686523
    7. '#' → logprob: -3.6927404403686523
    8. 'dist' → logprob: -3.9427404403686523
    9. ' u' → logprob: -4.567740440368652
    10. 'n' → logprob: -5.067740440368652

Token 551: ' passage' (ID: 26368)
  Prédit: 'nc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'nc' → logprob: -0.4429861307144165
    2. 'new' → logprob: -2.067986011505127
    3. 'cost' → logprob: -2.442986011505127
    4. 're' → logprob: -3.317986011505127
    5. 'if' → logprob: -3.817986011505127
    6. 'n' → logprob: -3.942986011505127
    7. 'co' → logprob: -4.567986011505127
    8. 'next' → logprob: -4.692986011505127
    9. ' new' → logprob: -4.817986011505127
    10. 'discount' → logprob: -4.942986011505127

Token 552: ' est' (ID: 893)
  Prédit: ' par'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' par' → logprob: -1.174700140953064
    2. '#' → logprob: -2.7997002601623535
    3. ' avec' → logprob: -2.9247002601623535
    4. 'through' → logprob: -2.9247002601623535
    5. 'n' → logprob: -3.2997002601623535
    6. '                   ' → logprob: -3.4247002601623535
    7. ' en' → logprob: -3.4247002601623535
    8. 'par' → logprob: -3.5497002601623535
    9. ' through' → logprob: -3.6747002601623535
    10. '               ' → logprob: -3.6747002601623535

Token 553: ' gratuit' (ID: 16738)
  Prédit: ' possible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' possible' → logprob: -0.9476145505905151
    2. 'possible' → logprob: -1.0726145505905151
    3. 'u' → logprob: -3.0726146697998047
    4. 'v' → logprob: -3.0726146697998047
    5. ' u' → logprob: -3.0726146697998047
    6. 'cost' → logprob: -3.9476146697998047
    7. ' v' → logprob: -3.9476146697998047
    8. ' not' → logprob: -4.697614669799805
    9. 'not' → logprob: -4.822614669799805
    10. ' autor' → logprob: -4.822614669799805

Token 554: ' donc' (ID: 14206)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.052207235246896744
    2. '                           ' → logprob: -3.6772072315216064
    3. ' if' → logprob: -4.4272074699401855
    4. ',' → logprob: -4.9272074699401855
    5. 'if' → logprob: -6.1772074699401855
    6. '                        ' → logprob: -7.1772074699401855
    7. '                        
' → logprob: -7.3022074699401855
    8. '<|end|>' → logprob: -7.3022074699401855
    9. ' (' → logprob: -7.4272074699401855
    10. '                               ' → logprob: -8.302206993103027

Token 555: ' coût' (ID: 73109)
  Prédit: 'nc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'nc' → logprob: -0.29868215322494507
    2. ' n' → logprob: -2.04868221282959
    3. 'n' → logprob: -2.54868221282959
    4. 'new' → logprob: -3.67368221282959
    5. 'cost' → logprob: -4.92368221282959
    6. 'heap' → logprob: -5.42368221282959
    7. ' new' → logprob: -5.54868221282959
    8. ' nc' → logprob: -6.04868221282959
    9. 'dist' → logprob: -6.17368221282959
    10. 'if' → logprob: -6.79868221282959

Token 556: ' ' (ID: 220)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.17478512227535248
    2. '=' → logprob: -2.0497851371765137
    3. 'total' → logprob: -5.049785137176514
    4. ',' → logprob: -5.299785137176514
    5. 'new' → logprob: -5.674785137176514
    6. ' réduit' → logprob: -5.799785137176514
    7. '+' → logprob: -5.924785137176514
    8. ' +=' → logprob: -6.299785137176514
    9. '           ' → logprob: -7.049785137176514
    10. ' actuel' → logprob: -7.424785137176514

Token 557: '0' (ID: 15)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.3643468916416168
    2. ' =' → logprob: -1.7393468618392944
    3. 'nc' → logprob: -3.364346981048584
    4. '0' → logprob: -3.739346981048584
    5. 'new' → logprob: -3.989346981048584
    6. 'redu' → logprob: -4.614346981048584
    7. 're' → logprob: -4.864346981048584
    8. 'n' → logprob: -5.364346981048584
    9. 'total' → logprob: -5.489346981048584
    10. 'aj' → logprob: -5.614346981048584

Token 558: ' pour' (ID: 1930)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.7813969254493713
    2. ')' → logprob: -1.6563968658447266
    3. ',' → logprob: -2.1563968658447266
    4. '                           ' → logprob: -2.7813968658447266
    5. '
' → logprob: -2.9063968658447266
    6. ',
' → logprob: -3.0313968658447266
    7. '                        
' → logprob: -4.281396865844727
    8. '),' → logprob: -4.406396865844727
    9. ')
' → logprob: -4.656396865844727
    10. '                               ' → logprob: -5.156396865844727

Token 559: ' ces' (ID: 10532)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.9221334457397461
    2. 'v' → logprob: -1.922133445739746
    3. 'ces' → logprob: -2.172133445739746
    4. ' ces' → logprob: -2.422133445739746
    5. 'les' → logprob: -2.547133445739746
    6. ' cette' → logprob: -3.547133445739746
    7. 'le' → logprob: -3.672133445739746
    8. 'u' → logprob: -4.047133445739746
    9. 'cost' → logprob: -4.047133445739746
    10. 'ce' → logprob: -4.172133445739746

Token 560: ' deux' (ID: 10301)
  Prédit: 'de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'de' → logprob: -0.04234455153346062
    2. ' deux' → logprob: -3.292344570159912
    3. 'tro' → logprob: -6.917344570159912
    4. ' ' → logprob: -6.917344570159912
    5. '2' → logprob: -7.042344570159912
    6. 'two' → logprob: -7.667344570159912
    7. ' two' → logprob: -7.792344570159912
    8. 'segments' → logprob: -8.167344093322754
    9. ' trois' → logprob: -9.917344093322754
    10. ' segments' → logprob: -10.667344093322754

Token 561: ' segments' (ID: 33749)
  Prédit: 'segments'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'segments' → logprob: -0.2892594635486603
    2. ' segments' → logprob: -1.789259433746338
    3. 'ar' → logprob: -2.664259433746338
    4. ' ar' → logprob: -5.164259433746338
    5. 'seg' → logprob: -6.289259433746338
    6. 'edges' → logprob: -6.414259433746338
    7. '
' → logprob: -6.539259433746338
    8. ' étapes' → logprob: -7.289259433746338
    9. 'segment' → logprob: -7.664259433746338
    10. ' arcs' → logprob: -7.664259433746338

Token 562: '
' (ID: 198)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.07584194839000702
    2. '
' → logprob: -3.3258419036865234
    3. '                           ' → logprob: -4.450841903686523
    4. ',' → logprob: -4.950841903686523
    5. '                        
' → logprob: -5.075841903686523
    6. ')' → logprob: -5.700841903686523
    7. '<|end|>' → logprob: -6.575841903686523
    8. ',
' → logprob: -6.575841903686523
    9. '\n' → logprob: -6.700841903686523
    10. '                            
' → logprob: -7.325841903686523

Token 563: '                       ' (ID: 968)
  Prédit: '                       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.00945607852190733
    2. '                           ' → logprob: -5.259456157684326
    3. '                        
' → logprob: -6.259456157684326
    4. ',' → logprob: -7.134456157684326
    5. '<|end|>' → logprob: -8.259455680847168
    6. ')' → logprob: -8.384455680847168
    7. '
' → logprob: -8.384455680847168
    8. '                        ' → logprob: -8.884455680847168
    9. '                   ' → logprob: -9.134455680847168
    10. '					' → logprob: -9.759455680847168

Token 564: ' #' (ID: 1069)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.05669381096959114
    2. '                           ' → logprob: -3.1816937923431396
    3. 'if' → logprob: -5.056694030761719
    4. ' if' → logprob: -5.431694030761719
    5. '                               ' → logprob: -7.431694030761719
    6. '                        
' → logprob: -7.556694030761719
    7. '                   ' → logprob: -7.806694030761719
    8. '                        ' → logprob: -8.181694030761719
    9. ',' → logprob: -8.556694030761719
    10. ')' → logprob: -8.931694030761719

Token 565: ' -' (ID: 533)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.16480769217014313
    2. ' if' → logprob: -2.2898077964782715
    3. '                       ' → logprob: -4.1648077964782715
    4. '                           ' → logprob: -4.4148077964782715
    5. 'new' → logprob: -4.5398077964782715
    6. 'next' → logprob: -5.9148077964782715
    7. 'nc' → logprob: -6.1648077964782715
    8. 'n' → logprob: -6.4148077964782715
    9. '#' → logprob: -6.5398077964782715
    10. ' new' → logprob: -6.9148077964782715

Token 566: ' Même' (ID: 89628)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.027616064995527267
    2. ' if' → logprob: -4.027616024017334
    3. '#' → logprob: -5.902616024017334
    4. 'n' → logprob: -6.277616024017334
    5. 'new' → logprob: -6.402616024017334
    6. 'nc' → logprob: -6.652616024017334
    7. 'next' → logprob: -7.027616024017334
    8. 'nd' → logprob: -8.902616500854492
    9. '                       ' → logprob: -9.152616500854492
    10. '                   ' → logprob: -9.527616500854492

Token 567: ' si' (ID: 1784)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.2564511299133301
    2. ' if' → logprob: -1.50645112991333
    3. 'u' → logprob: -5.63145112991333
    4. 'v' → logprob: -7.25645112991333
    5. 'node' → logprob: -9.756450653076172
    6. ' u' → logprob: -10.131450653076172
    7. '
' → logprob: -10.506450653076172
    8. 'cost' → logprob: -10.631450653076172
    9. ' si' → logprob: -10.881450653076172
    10. '[u' → logprob: -12.256450653076172

Token 568: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.5184828042984009
    2. 'u' → logprob: -1.8934828042984009
    3. ' v' → logprob: -2.3934826850891113
    4. 'used' → logprob: -2.8934826850891113
    5. ' used' → logprob: -3.5184826850891113
    6. ' u' → logprob: -3.5184826850891113
    7. ' dist' → logprob: -3.8934826850891113
    8. 'dist' → logprob: -4.268482685089111
    9. ' (' → logprob: -5.768482685089111
    10. '(u' → logprob: -6.643482685089111

Token 569: '1' (ID: 16)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.047367386519908905
    2. 'u' → logprob: -3.1723673343658447
    3. '1' → logprob: -6.297367572784424
    4. ' u' → logprob: -7.297367572784424
    5. 'v' → logprob: -7.422367572784424
    6. '[u' → logprob: -7.672367572784424
    7. '```' → logprob: -8.672367095947266
    8. ' !=' → logprob: -8.672367095947266
    9. ',' → logprob: -9.672367095947266
    10. ' ==' → logprob: -9.797367095947266

Token 570: ' ou' (ID: 2031)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '==' → logprob: -0.4119863212108612
    2. '!=' → logprob: -1.7869863510131836
    3. ' ==' → logprob: -2.4119863510131836
    4. ' !=' → logprob: -2.5369863510131836
    5. ')' → logprob: -7.911986351013184
    6. ']==' → logprob: -8.286986351013184
    7. ',' → logprob: -8.411986351013184
    8. ']' → logprob: -9.661986351013184
    9. ')==' → logprob: -9.661986351013184
    10. '[' → logprob: -9.786986351013184

Token 571: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.12565501034259796
    2. ' v' → logprob: -2.250654935836792
    3. 'u' → logprob: -4.750655174255371
    4. ' u' → logprob: -5.500655174255371
    5. '	v' → logprob: -12.250655174255371
    6. ' ' → logprob: -12.500655174255371
    7. ' ' → logprob: -12.625655174255371
    8. '```' → logprob: -13.250655174255371
    9. 'n' → logprob: -13.500655174255371
    10. ' n' → logprob: -14.188155174255371

Token 572: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0030257217586040497
    2. 'v' → logprob: -6.003025531768799
    3. 'u' → logprob: -7.878025531768799
    4. ' v' → logprob: -9.378026008605957
    5. '1' → logprob: -10.253026008605957
    6. '```' → logprob: -11.503026008605957
    7. 'c' → logprob: -11.628026008605957
    8. ' ' → logprob: -11.878026008605957
    9. ' u' → logprob: -12.378026008605957
    10. '==' → logprob: -12.503026008605957

Token 573: ' =' (ID: 314)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.5239050984382629
    2. '==' → logprob: -0.8989050984382629
    3. ' !=' → logprob: -7.648905277252197
    4. '!=' → logprob: -9.148904800415039
    5. ')' → logprob: -10.273904800415039
    6. ']==' → logprob: -10.523904800415039
    7. ')==' → logprob: -10.523904800415039
    8. 'u' → logprob: -10.648904800415039
    9. 's' → logprob: -11.273904800415039
    10. '[u' → logprob: -11.523904800415039

Token 574: ' n' (ID: 297)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'u' → logprob: -0.03402530774474144
    2. ' u' → logprob: -3.409025192260742
    3. '0' → logprob: -8.409025192260742
    4. '1' → logprob: -9.284025192260742
    5. 'n' → logprob: -10.409025192260742
    6. ' ' → logprob: -10.909025192260742
    7. 'v' → logprob: -12.159025192260742
    8. ' n' → logprob: -12.784025192260742
    9. '	u' → logprob: -12.909025192260742
    10. ' ' → logprob: -13.659025192260742

Token 575: ' (' (ID: 350)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.5272605419158936
    2. '                           ' → logprob: -1.9022605419158936
    3. '                       ' → logprob: -1.9022605419158936
    4. ':
' → logprob: -3.4022605419158936
    5. ' ,' → logprob: -3.7772605419158936
    6. ',
' → logprob: -4.027260780334473
    7. ':' → logprob: -4.652260780334473
    8. '):
' → logprob: -5.027260780334473
    9. ')' → logprob: -5.527260780334473
    10. '
' → logprob: -5.652260780334473

Token 576: 'destination' (ID: 51810)
  Prédit: '),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '),' → logprob: -0.17356084287166595
    2. ')' → logprob: -2.673560857772827
    3. ' u' → logprob: -3.548560857772827
    4. ' ),' → logprob: -3.548560857772827
    5. '):
' → logprob: -4.548560619354248
    6. '):' → logprob: -5.548560619354248
    7. 'u' → logprob: -5.798560619354248
    8. ' )' → logprob: -6.048560619354248
    9. '                           ' → logprob: -6.298560619354248
    10. ' continue' → logprob: -6.673560619354248

Token 577: '),' (ID: 936)
  Prédit: '),'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '),' → logprob: -0.005237075500190258
    2. ')' → logprob: -5.755237102508545
    3. ',' → logprob: -6.255237102508545
    4. ' ),' → logprob: -9.380236625671387
    5. '                       ' → logprob: -11.130236625671387
    6. '                           ' → logprob: -11.380236625671387
    7. '):' → logprob: -12.005236625671387
    8. '                   ' → logprob: -12.505236625671387
    9. '                               ' → logprob: -12.880236625671387
    10. '):
' → logprob: -13.255236625671387

Token 578: ' ce' (ID: 2357)
  Prédit: '                           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                           ' → logprob: -1.1860225200653076
    2. ' continue' → logprob: -1.3110225200653076
    3. 'continue' → logprob: -2.0610225200653076
    4. ' if' → logprob: -2.3110225200653076
    5. '#' → logprob: -2.9360225200653076
    6. 'if' → logprob: -3.0610225200653076
    7. '                               ' → logprob: -3.0610225200653076
    8. '                       ' → logprob: -4.186022758483887
    9. ' pass' → logprob: -4.686022758483887
    10. ' #' → logprob: -5.186022758483887

Token 579: ' n' (ID: 297)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' continue' → logprob: -0.6913579702377319
    2. 'continue' → logprob: -1.816357970237732
    3. ' n' → logprob: -2.1913580894470215
    4. ' code' → logprob: -2.5663580894470215
    5. 'n' → logprob: -2.6913580894470215
    6. 'if' → logprob: -4.1913580894470215
    7. '```' → logprob: -4.4413580894470215
    8. ' cost' → logprob: -4.6913580894470215
    9. 'cost' → logprob: -4.9413580894470215
    10. ' if' → logprob: -5.5663580894470215

Token 580: ''est' (ID: 6616)
  Prédit: ''est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''est' → logprob: -0.19206251204013824
    2. 'cost' → logprob: -3.1920626163482666
    3. ')' → logprob: -3.5670626163482666
    4. 'n' → logprob: -3.9420626163482666
    5. 'continue' → logprob: -4.3170623779296875
    6. '=' → logprob: -4.8170623779296875
    7. 'u' → logprob: -4.8170623779296875
    8. 'est' → logprob: -4.8170623779296875
    9. 'ont' → logprob: -5.1920623779296875
    10. '==' → logprob: -5.5670623779296875

Token 581: ' pas' (ID: 2173)
  Prédit: 'possible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'possible' → logprob: -1.0375916957855225
    2. 'ok' → logprob: -1.2875916957855225
    3. ' permis' → logprob: -2.4125916957855225
    4. ' possible' → logprob: -3.0375916957855225
    5. ' ok' → logprob: -3.1625916957855225
    6. 'pas' → logprob: -3.5375916957855225
    7. 'bon' → logprob: -3.7875916957855225
    8. 'valid' → logprob: -4.037591934204102
    9. 'correct' → logprob: -4.162591934204102
    10. ' okay' → logprob: -4.662591934204102

Token 582: ' déf' (ID: 23956)
  Prédit: 'le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'le' → logprob: -1.5124027729034424
    2. 'v' → logprob: -2.2624027729034424
    3. ' u' → logprob: -2.2624027729034424
    4. 'continue' → logprob: -2.2624027729034424
    5. 'u' → logprob: -2.5124027729034424
    6. 'un' → logprob: -3.3874027729034424
    7. 'problem' → logprob: -3.5124027729034424
    8. ' le' → logprob: -3.7624027729034424
    9. 'une' → logprob: -3.7624027729034424
    10. 'pro' → logprob: -3.7624027729034424

Token 583: 'ini' (ID: 2363)
  Prédit: 'ini'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ini' → logprob: -0.09571550786495209
    2. 'init' → logprob: -2.4707155227661133
    3. 'inie' → logprob: -5.595715522766113
    4. 'initely' → logprob: -6.720715522766113
    5. 'aut' → logprob: -7.720715522766113
    6. 'in' → logprob: -8.595715522766113
    7. '```' → logprob: -8.720715522766113
    8. 'ault' → logprob: -8.845715522766113
    9. 'inite' → logprob: -9.095715522766113
    10. 'inition' → logprob: -9.220715522766113

Token 584: ' qu' (ID: 474)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.8455770611763
    2. '                           ' → logprob: -0.9705770611763
    3. '                       ' → logprob: -2.0955770015716553
    4. '                               ' → logprob: -4.595577239990234
    5. ',
' → logprob: -4.845577239990234
    6. '                            ' → logprob: -5.470577239990234
    7. ')' → logprob: -5.595577239990234
    8. ' ,' → logprob: -5.595577239990234
    9. '                        ' → logprob: -5.595577239990234
    10. '                            
' → logprob: -5.720577239990234

Token 585: ''on' (ID: 25812)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' a' → logprob: -1.6221672296524048
    2. 'u' → logprob: -1.7471672296524048
    3. ' ' → logprob: -1.8721672296524048
    4. ' u' → logprob: -2.3721671104431152
    5. ' ' → logprob: -2.8721671104431152
    6. ' the' → logprob: -2.8721671104431152
    7. ' v' → logprob: -3.2471671104431152
    8. 'v' → logprob: -3.3721671104431152
    9. ')' → logprob: -3.7471671104431152
    10. ' on' → logprob: -4.247167110443115

Token 586: ' s' (ID: 265)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' continue' → logprob: -0.34778887033462524
    2. 'continue' → logprob: -1.9727888107299805
    3. ' puisse' → logprob: -2.3477888107299805
    4. ' can' → logprob: -4.8477888107299805
    5. ' peut' → logprob: -4.8477888107299805
    6. ' do' → logprob: -4.9727888107299805
    7. 'contin' → logprob: -5.0977888107299805
    8. 'can' → logprob: -5.4727888107299805
    9. 'do' → logprob: -5.7227888107299805
    10. ' quitte' → logprob: -5.7227888107299805

Token 587: ''arr' (ID: 49695)
  Prédit: 'arr'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'arr' → logprob: -0.8778491020202637
    2. ''arr' → logprob: -1.8778491020202637
    3. 'continue' → logprob: -2.1278491020202637
    4. 'ait' → logprob: -2.6278491020202637
    5. 'u' → logprob: -2.8778491020202637
    6. 'print' → logprob: -3.1278491020202637
    7. 'uit' → logprob: -3.6278491020202637
    8. 'ont' → logprob: -4.377849102020264
    9. 'ort' → logprob: -4.627849102020264
    10. 'ors' → logprob: -4.752849102020264

Token 588: 'ête' (ID: 16808)
  Prédit: 'ête'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ête' → logprob: -0.4123810827732086
    2. 'êt' → logprob: -1.6623810529708862
    3. 'ive' → logprob: -2.037381172180176
    4. 'ê' → logprob: -5.162381172180176
    5. 'et' → logprob: -5.662381172180176
    6. 'ete' → logprob: -5.912381172180176
    7. 'ète' → logprob: -6.287381172180176
    8. 'êter' → logprob: -6.537381172180176
    9. 'êtes' → logprob: -7.537381172180176
    10. 'iv' → logprob: -8.037381172180176

Token 589: ' là' (ID: 8052)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.05426449328660965
    2. '                           ' → logprob: -3.304264545440674
    3. ',' → logprob: -4.679264545440674
    4. ')' → logprob: -5.804264545440674
    5. '                        
' → logprob: -6.804264545440674
    6. '),' → logprob: -7.304264545440674
    7. '
' → logprob: -7.429264545440674
    8. '                               ' → logprob: -7.679264545440674
    9. '                        ' → logprob: -8.179264068603516
    10. '                   ' → logprob: -8.929264068603516

Token 590: ',' (ID: 11)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.01175591442734003
    2. '                           ' → logprob: -5.13675594329834
    3. '                        
' → logprob: -5.63675594329834
    4. ')' → logprob: -7.13675594329834
    5. '
' → logprob: -7.63675594329834
    6. ',' → logprob: -8.13675594329834
    7. '                        ' → logprob: -8.38675594329834
    8. '                            
' → logprob: -9.01175594329834
    9. '                               ' → logprob: -9.76175594329834
    10. '                   ' → logprob: -9.76175594329834

Token 591: ' on' (ID: 402)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.12030987441539764
    2. '                           ' → logprob: -2.620309829711914
    3. '                               ' → logprob: -3.495309829711914
    4. '#' → logprob: -5.870309829711914
    5. '                        ' → logprob: -6.120309829711914
    6. ' continue' → logprob: -6.745309829711914
    7. ' on' → logprob: -7.620309829711914
    8. ',' → logprob: -7.995309829711914
    9. ' mais' → logprob: -7.995309829711914
    10. '                        
' → logprob: -7.995309829711914

Token 592: ' met' (ID: 1421)
  Prédit: 'continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'continue' → logprob: -0.4535267949104309
    2. ' continue' → logprob: -1.0785267353057861
    3. '                               ' → logprob: -4.453526973724365
    4. '                           ' → logprob: -4.703526973724365
    5. ' doit' → logprob: -6.828526973724365
    6. '                       ' → logprob: -7.078526973724365
    7. 'contin' → logprob: -7.453526973724365
    8. '	continue' → logprob: -9.203526496887207
    9. ' peut' → logprob: -9.203526496887207
    10. ' continues' → logprob: -9.328526496887207

Token 593: ' à' (ID: 1221)
  Prédit: 'à'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'à' → logprob: -0.4703116714954376
    2. ' à' → logprob: -1.0953116416931152
    3. 'aj' → logprob: -4.845311641693115
    4. 'a' → logprob: -5.345311641693115
    5. '-à' → logprob: -5.345311641693115
    6. '```' → logprob: -5.595311641693115
    7. 'dist' → logprob: -5.845311641693115
    8. 'tout' → logprob: -6.095311641693115
    9. 'la' → logprob: -6.220311641693115
    10. 'v' → logprob: -6.220311641693115

Token 594: ' jour' (ID: 8379)
  Prédit: 'jour'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'jour' → logprob: -0.005118480883538723
    2. ' jour' → logprob: -5.880118370056152
    3. 'dis' → logprob: -7.130118370056152
    4. 'dist' → logprob: -7.630118370056152
    5. 'jou' → logprob: -8.255118370056152
    6. 'distance' → logprob: -8.880118370056152
    7. 'jours' → logprob: -8.880118370056152
    8. 'pq' → logprob: -9.130118370056152
    9. 'queue' → logprob: -9.380118370056152
    10. '```' → logprob: -9.755118370056152

Token 595: ' dist' (ID: 3601)
  Prédit: 'dist'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dist' → logprob: -0.6736299395561218
    2. ' dist' → logprob: -1.5486299991607666
    3. '                       ' → logprob: -1.7986299991607666
    4. '                           ' → logprob: -2.4236299991607666
    5. ' if' → logprob: -5.0486297607421875
    6. '                               ' → logprob: -5.6736297607421875
    7. 'if' → logprob: -5.6736297607421875
    8. '(dist' → logprob: -6.1736297607421875
    9. ')' → logprob: -7.2986297607421875
    10. '                   ' → logprob: -7.2986297607421875

Token 596: '
' (ID: 198)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.012201155535876751
    2. '                           ' → logprob: -4.887201309204102
    3. '                   ' → logprob: -6.637201309204102
    4. '                        ' → logprob: -7.387201309204102
    5. '                        
' → logprob: -7.387201309204102
    6. '                               ' → logprob: -7.512201309204102
    7. ',' → logprob: -7.637201309204102
    8. '               ' → logprob: -7.887201309204102
    9. ')' → logprob: -9.137201309204102
    10. '           ' → logprob: -9.387201309204102

Token 597: '                       ' (ID: 968)
  Prédit: '                       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.006398919504135847
    2. '                           ' → logprob: -5.631399154663086
    3. '                        
' → logprob: -6.631399154663086
    4. ')' → logprob: -7.881399154663086
    5. '                        ' → logprob: -8.256399154663086
    6. ',' → logprob: -8.506399154663086
    7. '                   ' → logprob: -8.631399154663086
    8. '
' → logprob: -9.256399154663086
    9. '                               ' → logprob: -9.506399154663086
    10. '               ' → logprob: -9.756399154663086

Token 598: ' #' (ID: 1069)
  Prédit: '                           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                           ' → logprob: -0.6485911011695862
    2. '                       ' → logprob: -0.7735911011695862
    3. '                               ' → logprob: -4.773591041564941
    4. 'if' → logprob: -5.648591041564941
    5. ' if' → logprob: -7.273591041564941
    6. '                        
' → logprob: -7.398591041564941
    7. '                            ' → logprob: -7.523591041564941
    8. '                   ' → logprob: -7.648591041564941
    9. 'new' → logprob: -8.148591041564941
    10. '                        ' → logprob: -8.148591041564941

Token 599: '  ' (ID: 256)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.4093911349773407
    2. 'if' → logprob: -1.784391164779663
    3. '                           ' → logprob: -2.659391164779663
    4. ' if' → logprob: -2.784391164779663
    5. 'new' → logprob: -4.034390926361084
    6. 'n' → logprob: -5.284390926361084
    7. ' new' → logprob: -5.909390926361084
    8. '                   ' → logprob: -6.034390926361084
    9. 'next' → logprob: -6.409390926361084
    10. '                               ' → logprob: -6.534390926361084

Token 600: ' mais' (ID: 2899)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.2157019078731537
    2. ' if' → logprob: -2.4657018184661865
    3. '                       ' → logprob: -2.5907018184661865
    4. '                           ' → logprob: -4.215702056884766
    5. 'nc' → logprob: -4.965702056884766
    6. 'n' → logprob: -5.965702056884766
    7. 'new' → logprob: -6.090702056884766
    8. 'nd' → logprob: -6.465702056884766
    9. '                               ' → logprob: -6.840702056884766
    10. '                   ' → logprob: -6.965702056884766

Token 601: ' le' (ID: 505)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.9664787650108337
    2. ' if' → logprob: -1.4664788246154785
    3. 'continue' → logprob: -1.4664788246154785
    4. '                           ' → logprob: -2.7164788246154785
    5. ' continue' → logprob: -3.2164788246154785
    6. '                       ' → logprob: -3.2164788246154785
    7. 'v' → logprob: -6.0914788246154785
    8. '                   ' → logprob: -6.5914788246154785
    9. '                               ' → logprob: -6.8414788246154785
    10. ' v' → logprob: -6.9664788246154785

Token 602: ' problème' (ID: 35630)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.24034233391284943
    2. 'continue' → logprob: -2.740342378616333
    3. 'nc' → logprob: -3.740342378616333
    4. '#' → logprob: -3.740342378616333
    5. 'dist' → logprob: -3.740342378616333
    6. 'heap' → logprob: -4.490342140197754
    7. ' if' → logprob: -4.490342140197754
    8. 'new' → logprob: -4.615342140197754
    9. 'next' → logprob: -4.865342140197754
    10. 'v' → logprob: -4.990342140197754

Token 603: ' dit' (ID: 4758)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -1.1541122198104858
    2. '                           ' → logprob: -1.2791122198104858
    3. ' n' → logprob: -2.4041123390197754
    4. 'continue' → logprob: -2.7791123390197754
    5. ')' → logprob: -2.9041123390197754
    6. 'n' → logprob: -3.0291123390197754
    7. '                               ' → logprob: -3.4041123390197754
    8. '                   ' → logprob: -3.9041123390197754
    9. ' continue' → logprob: -4.029112339019775
    10. '<|end|>' → logprob: -5.029112339019775

Token 604: ' qu' (ID: 474)
  Prédit: 'qu'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'qu' → logprob: -0.895960807800293
    2. ' qu' → logprob: -1.520960807800293
    3. ' que' → logprob: -1.895960807800293
    4. 'continue' → logprob: -3.270960807800293
    5. 'pas' → logprob: -3.645960807800293
    6. ' pas' → logprob: -3.645960807800293
    7. ' that' → logprob: -4.270960807800293
    8. 's' → logprob: -4.395960807800293
    9. '                           ' → logprob: -4.520960807800293
    10. 'that' → logprob: -5.145960807800293

Token 605: ''' (ID: 6)
  Prédit: ' on'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' on' → logprob: -0.2468418926000595
    2. ' we' → logprob: -2.6218419075012207
    3. ''on' → logprob: -3.3718419075012207
    4. 'on' → logprob: -3.6218419075012207
    5. 'u' → logprob: -3.7468419075012207
    6. ' the' → logprob: -4.621841907501221
    7. 'le' → logprob: -4.746841907501221
    8. ' le' → logprob: -4.746841907501221
    9. ' la' → logprob: -5.496841907501221
    10. 'we' → logprob: -5.621841907501221

Token 606: 'atte' (ID: 23975)
  Prédit: ' on'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' on' → logprob: -0.8695394396781921
    2. 'u' → logprob: -1.494539499282837
    3. 'v' → logprob: -2.869539499282837
    4. 'on' → logprob: -2.994539499282837
    5. 'le' → logprob: -3.119539499282837
    6. ' we' → logprob: -3.494539499282837
    7. ' u' → logprob: -3.869539499282837
    8. ' ce' → logprob: -4.244539260864258
    9. ' la' → logprob: -4.369539260864258
    10. ' le' → logprob: -4.494539260864258

Token 607: 'indre' (ID: 28945)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.12599307298660278
    2. 'ints' → logprob: -3.000993013381958
    3. 'ind' → logprob: -3.500993013381958
    4. 'indre' → logprob: -3.500993013381958
    5. 'inte' → logprob: -5.750993251800537
    6. 'ign' → logprob: -7.125993251800537
    7. 'nd' → logprob: -7.500993251800537
    8. 'ins' → logprob: -8.000992774963379
    9. '#' → logprob: -8.000992774963379
    10. 'nt' → logprob: -8.250992774963379

Token 608: ' n' (ID: 297)
  Prédit: ' v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' v' → logprob: -0.6417108774185181
    2. 'v' → logprob: -0.8917108774185181
    3. ' n' → logprob: -3.6417107582092285
    4. 'n' → logprob: -3.8917107582092285
    5. ' la' → logprob: -4.8917107582092285
    6. 'le' → logprob: -6.2667107582092285
    7. ' the' → logprob: -6.3917107582092285
    8. ' le' → logprob: -6.5167107582092285
    9. 'la' → logprob: -6.6417107582092285
    10. 'the' → logprob: -7.3917107582092285

Token 609: ' en' (ID: 469)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '==' → logprob: -1.1440391540527344
    2. '                       ' → logprob: -2.1440391540527344
    3. ' ==' → logprob: -2.1440391540527344
    4. '                           ' → logprob: -2.3940391540527344
    5. ' n' → logprob: -3.0190391540527344
    6. ')' → logprob: -3.5190391540527344
    7. '[' → logprob: -3.6440391540527344
    8. '<=' → logprob: -3.6440391540527344
    9. 'est' → logprob: -3.8940391540527344
    10. ' est' → logprob: -4.019039154052734

Token 610: ' milieu' (ID: 43149)
  Prédit: 'de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'de' → logprob: -0.5989717245101929
    2. ' deux' → logprob: -2.0989718437194824
    3. '0' → logprob: -3.2239718437194824
    4. 'print' → logprob: -3.3489718437194824
    5. 'util' → logprob: -3.3489718437194824
    6. 'pass' → logprob: -3.9739718437194824
    7. 'u' → logprob: -4.098971843719482
    8. 'co' → logprob: -4.223971843719482
    9. ' passant' → logprob: -4.223971843719482
    10. 'two' → logprob: -4.348971843719482

Token 611: ' de' (ID: 334)
  Prédit: 'de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'de' → logprob: -0.03380648419260979
    2. 'd' → logprob: -4.158806324005127
    3. ' de' → logprob: -4.658806324005127
    4. 'du' → logprob: -4.908806324005127
    5. 'def' → logprob: -7.783806324005127
    6. ' du' → logprob: -9.033806800842285
    7. '#' → logprob: -10.033806800842285
    8. '```' → logprob: -10.783806800842285
    9. 'par' → logprob: -10.908806800842285
    10. ')' → logprob: -11.158806800842285

Token 612: ' ces' (ID: 10532)
  Prédit: 'par'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'par' → logprob: -1.683780550956726
    2. 'la' → logprob: -1.683780550956726
    3. 'path' → logprob: -1.933780550956726
    4. 'while' → logprob: -1.933780550956726
    5. 'che' → logprob: -2.4337806701660156
    6. ' boucle' → logprob: -3.4337806701660156
    7. 'l' → logprob: -3.5587806701660156
    8. 'for' → logprob: -3.6837806701660156
    9. 'bou' → logprob: -3.8087806701660156
    10. 'route' → logprob: -3.9337806701660156

Token 613: ' ' (ID: 220)
  Prédit: 'segments'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'segments' → logprob: -0.7038996815681458
    2. 'de' → logprob: -0.8288996815681458
    3. ' deux' → logprob: -3.328899621963501
    4. ' segments' → logprob: -5.45389986038208
    5. 'two' → logprob: -5.57889986038208
    6. 'che' → logprob: -5.57889986038208
    7. 'tokens' → logprob: -5.70389986038208
    8. 'par' → logprob: -6.20389986038208
    9. '```' → logprob: -6.20389986038208
    10. 'for' → logprob: -6.32889986038208

Token 614: '2' (ID: 17)
  Prédit: 'segments'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'segments' → logprob: -0.3285924196243286
    2. 'de' → logprob: -1.9535924196243286
    3. 'che' → logprob: -3.203592300415039
    4. 'code' → logprob: -3.328592300415039
    5. 'traj' → logprob: -4.828592300415039
    6. '```' → logprob: -5.078592300415039
    7. ' segments' → logprob: -5.453592300415039
    8. 'ligne' → logprob: -5.578592300415039
    9. 'par' → logprob: -5.703592300415039
    10. 'l' → logprob: -6.078592300415039

Token 615: ' segments' (ID: 33749)
  Prédit: 'segments'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'segments' → logprob: -0.12283778935670853
    2. 'de' → logprob: -3.122837781906128
    3. '                           ' → logprob: -4.622838020324707
    4. ' segments' → logprob: -4.622838020324707
    5. '```' → logprob: -5.497838020324707
    6. '                       ' → logprob: -5.497838020324707
    7. '           ' → logprob: -5.747838020324707
    8. 'che' → logprob: -5.747838020324707
    9. 's' → logprob: -5.872838020324707
    10. 'traj' → logprob: -5.872838020324707

Token 616: ' ne' (ID: 453)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.014380916021764278
    2. '                        
' → logprob: -5.389380931854248
    3. '                           ' → logprob: -5.514380931854248
    4. ')' → logprob: -5.764380931854248
    5. ',' → logprob: -7.264380931854248
    6. '                        ' → logprob: -7.264380931854248
    7. '                               ' → logprob: -8.51438045501709
    8. '<|end|>' → logprob: -9.13938045501709
    9. '                            
' → logprob: -9.13938045501709
    10. '                   ' → logprob: -9.38938045501709

Token 617: ' suffit' (ID: 67383)
  Prédit: 'pas'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pas' → logprob: -0.4189833104610443
    2. 'n' → logprob: -1.4189833402633667
    3. ' pas' → logprob: -2.918983221054077
    4. 'n't' → logprob: -4.793983459472656
    5. '```' → logprob: -5.043983459472656
    6. 'continue' → logprob: -5.168983459472656
    7. ' n' → logprob: -5.418983459472656
    8. '           ' → logprob: -5.668983459472656
    9. 'not' → logprob: -5.668983459472656
    10. 's' → logprob: -6.168983459472656

Token 618: ' pas' (ID: 2173)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.027858057990670204
    2. '                           ' → logprob: -4.152858257293701
    3. '                        
' → logprob: -5.027858257293701
    4. ')' → logprob: -6.777858257293701
    5. '                        ' → logprob: -6.902858257293701
    6. '                               ' → logprob: -7.277858257293701
    7. '					' → logprob: -7.777858257293701
    8. '                   ' → logprob: -7.902858257293701
    9. '           ' → logprob: -8.402857780456543
    10. '                            
' → logprob: -8.652857780456543

Token 619: '..
' (ID: 16547)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.002566502895206213
    2. '                        
' → logprob: -6.877566337585449
    3. '                           ' → logprob: -7.127566337585449
    4. '                        ' → logprob: -8.75256633758545
    5. '					' → logprob: -9.12756633758545
    6. '       ' → logprob: -9.62756633758545
    7. '           ' → logprob: -9.62756633758545
    8. '<|end|>' → logprob: -9.75256633758545
    9. '                   ' → logprob: -9.87756633758545
    10. ',' → logprob: -10.25256633758545

Token 620: '                       ' (ID: 968)
  Prédit: '                       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.02744664065539837
    2. '                           ' → logprob: -4.152446746826172
    3. '                        
' → logprob: -4.902446746826172
    4. '                        ' → logprob: -6.902446746826172
    5. '<|end|>' → logprob: -7.527446746826172
    6. '           ' → logprob: -7.777446746826172
    7. '                               ' → logprob: -7.902446746826172
    8. '                   ' → logprob: -8.277446746826172
    9. '                            ' → logprob: -8.777446746826172
    10. '               ' → logprob: -8.777446746826172

Token 621: ' #' (ID: 1069)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.06611063331365585
    2. ' if' → logprob: -3.316110610961914
    3. 'if' → logprob: -3.941110610961914
    4. '                           ' → logprob: -4.941110610961914
    5. '                   ' → logprob: -7.691110610961914
    6. '                               ' → logprob: -8.941110610961914
    7. '           ' → logprob: -9.066110610961914
    8. '                        ' → logprob: -9.191110610961914
    9. '               ' → logprob: -9.441110610961914
    10. '                        
' → logprob: -9.941110610961914

Token 622: '  ' (ID: 256)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.10593396425247192
    2. 'if' → logprob: -2.355933904647827
    3. ' if' → logprob: -5.855934143066406
    4. '                           ' → logprob: -6.855934143066406
    5. '                   ' → logprob: -7.980934143066406
    6. '                        
' → logprob: -7.980934143066406
    7. '#' → logprob: -8.355934143066406
    8. '					' → logprob: -8.730934143066406
    9. '                        ' → logprob: -8.980934143066406
    10. '
' → logprob: -9.105934143066406

Token 623: ' Or' (ID: 2604)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.11655537784099579
    2. 'continue' → logprob: -3.2415554523468018
    3. '#' → logprob: -3.6165554523468018
    4. ' if' → logprob: -3.9915554523468018
    5. '                       ' → logprob: -4.241555213928223
    6. '                           ' → logprob: -4.866555213928223
    7. ' continue' → logprob: -6.241555213928223
    8. 'pass' → logprob: -8.741555213928223
    9. '                               ' → logprob: -8.741555213928223
    10. 'for' → logprob: -8.866555213928223

Token 624: ' ici' (ID: 27994)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.6189077496528625
    2. ' continue' → logprob: -2.4939076900482178
    3. '                           ' → logprob: -2.6189076900482178
    4. ' v' → logprob: -2.9939076900482178
    5. ' on' → logprob: -2.9939076900482178
    6. ' u' → logprob: -3.2439076900482178
    7. 'if' → logprob: -3.2439076900482178
    8. 'v' → logprob: -3.3689076900482178
    9. '                       ' → logprob: -4.118907928466797
    10. 'continue' → logprob: -4.118907928466797

Token 625: ' on' (ID: 402)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.9705578088760376
    2. '                           ' → logprob: -1.7205578088760376
    3. '                       ' → logprob: -1.7205578088760376
    4. ' if' → logprob: -1.9705578088760376
    5. 'if' → logprob: -2.595557689666748
    6. '                               ' → logprob: -4.470557689666748
    7. ' on' → logprob: -4.970557689666748
    8. ':' → logprob: -4.970557689666748
    9. ' ,' → logprob: -5.220557689666748
    10. ' continue' → logprob: -6.095557689666748

Token 626: ' considère' (ID: 176437)
  Prédit: 'continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'continue' → logprob: -0.40929746627807617
    2. ' continue' → logprob: -1.1592974662780762
    3. 'n' → logprob: -5.159297466278076
    4. 'contin' → logprob: -5.909297466278076
    5. '                               ' → logprob: -6.409297466278076
    6. ' n' → logprob: -6.409297466278076
    7. 'est' → logprob: -6.784297466278076
    8. ' doit' → logprob: -6.909297466278076
    9. '                           ' → logprob: -7.034297466278076
    10. 'ne' → logprob: -7.034297466278076

Token 627: ' qu' (ID: 474)
  Prédit: '                           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                           ' → logprob: -1.2988231182098389
    2. '                       ' → logprob: -1.5488231182098389
    3. ' que' → logprob: -2.173823118209839
    4. 'le' → logprob: -2.298823118209839
    5. 'v' → logprob: -2.673823118209839
    6. 'la' → logprob: -2.923823118209839
    7. 'que' → logprob: -3.548823118209839
    8. '           ' → logprob: -4.173823356628418
    9. ' la' → logprob: -4.173823356628418
    10. 'that' → logprob: -4.548823356628418

Token 628: ''on' (ID: 25812)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.4498630464076996
    2. 'u' → logprob: -2.1998629570007324
    3. ' v' → logprob: -2.6998629570007324
    4. ' u' → logprob: -3.0748629570007324
    5. ' on' → logprob: -3.9498629570007324
    6. ' True' → logprob: -4.199862957000732
    7. 'True' → logprob: -4.199862957000732
    8. 'le' → logprob: -4.449862957000732
    9. 'on' → logprob: -4.699862957000732
    10. ' le' → logprob: -5.074862957000732

Token 629: ' peut' (ID: 9216)
  Prédit: 'pe'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pe' → logprob: -0.6141148805618286
    2. 'continue' → logprob: -1.8641148805618286
    3. 'can' → logprob: -2.114114761352539
    4. 'ne' → logprob: -3.114114761352539
    5. ' peux' → logprob: -3.614114761352539
    6. 'do' → logprob: -3.989114761352539
    7. 'n' → logprob: -4.114114761352539
    8. 'contin' → logprob: -4.239114761352539
    9. ' continue' → logprob: -4.614114761352539
    10. 'pour' → logprob: -4.739114761352539

Token 630: ' "' (ID: 392)
  Prédit: 'contin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'contin' → logprob: -0.5067418217658997
    2. ' continuer' → logprob: -1.8817417621612549
    3. '                           ' → logprob: -2.381741762161255
    4. '                       ' → logprob: -3.506741762161255
    5. 'continue' → logprob: -3.506741762161255
    6. 'pass' → logprob: -4.256742000579834
    7. 'atte' → logprob: -4.631742000579834
    8. ' continue' → logprob: -5.131742000579834
    9. '                               ' → logprob: -5.131742000579834
    10. 'continu' → logprob: -5.381742000579834

Token 631: 'pass' (ID: 9948)
  Prédit: 'contin'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'contin' → logprob: -1.0608844757080078
    2. 'pass' → logprob: -1.5608844757080078
    3. 'atte' → logprob: -2.435884475708008
    4. 'faire' → logprob: -2.435884475708008
    5. 'apply' → logprob: -3.060884475708008
    6. 'arr' → logprob: -3.310884475708008
    7. 'continue' → logprob: -3.435884475708008
    8. 'aller' → logprob: -3.810884475708008
    9. 'skip' → logprob: -3.935884475708008
    10. 'only' → logprob: -4.435884475708008

Token 632: 'er' (ID: 259)
  Prédit: 'er'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -7.219262624857947e-05
    2. '               ' → logprob: -10.125072479248047
    3. '                   ' → logprob: -11.125072479248047
    4. '           ' → logprob: -12.625072479248047
    5. 'ser' → logprob: -12.875072479248047
    6. '#' → logprob: -13.125072479248047
    7. '                 ' → logprob: -13.500072479248047
    8. '                       ' → logprob: -13.875072479248047
    9. '
' → logprob: -14.000072479248047
    10. '                ' → logprob: -14.250072479248047

Token 633: '"' (ID: 1)
  Prédit: 'par'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'par' → logprob: -0.5881383419036865
    2. '"' → logprob: -2.0881383419036865
    3. ' par' → logprob: -2.7131383419036865
    4. 'through' → logprob: -2.9631383419036865
    5. ')' → logprob: -3.2131383419036865
    6. 'à' → logprob: -3.4631383419036865
    7. 'le' → logprob: -3.9631383419036865
    8. 'direct' → logprob: -3.9631383419036865
    9. 'au' → logprob: -4.463138580322266
    10. '")' → logprob: -4.713138580322266

Token 634: ' par' (ID: 686)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.9429962635040283
    2. ')' → logprob: -1.0679962635040283
    3. '                   ' → logprob: -3.4429962635040283
    4. 'le' → logprob: -3.5679962635040283
    5. 'through' → logprob: -3.5679962635040283
    6. '               ' → logprob: -4.067996025085449
    7. 'v' → logprob: -4.067996025085449
    8. '")' → logprob: -4.317996025085449
    9. ' gratuitement' → logprob: -4.567996025085449
    10. '                           ' → logprob: -4.817996025085449

Token 635: ' n' (ID: 297)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.0677265152335167
    2. 'u' → logprob: -3.4427266120910645
    3. ' v' → logprob: -3.8177266120910645
    4. 'n' → logprob: -5.5677266120910645
    5. 'le' → logprob: -5.9427266120910645
    6. ' u' → logprob: -7.0677266120910645
    7. ' ces' → logprob: -7.4427266120910645
    8. 'l' → logprob: -7.9427266120910645
    9. 'ces' → logprob: -7.9427266120910645
    10. ' ' → logprob: -8.317726135253906

Token 636: ' hors' (ID: 26087)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.129827618598938
    2. ')' → logprob: -2.8798274993896484
    3. '                           ' → logprob: -3.3798274993896484
    4. '                   ' → logprob: -4.629827499389648
    5. '                        
' → logprob: -5.129827499389648
    6. '):' → logprob: -5.504827499389648
    7. '                        ' → logprob: -6.004827499389648
    8. ',' → logprob: -6.504827499389648
    9. '               ' → logprob: -6.754827499389648
    10. '           ' → logprob: -6.879827499389648

Token 637: ' de' (ID: 334)
  Prédit: 'file'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'file' → logprob: -1.2689481973648071
    2. 'de' → logprob: -1.3939481973648071
    3. 'la' → logprob: -2.2689480781555176
    4. 'p' → logprob: -2.2689480781555176
    5. 'du' → logprob: -3.0189480781555176
    6. 'code' → logprob: -3.1439480781555176
    7. 'queue' → logprob: -3.3939480781555176
    8. 'pile' → logprob: -4.393948078155518
    9. '#' → logprob: -4.518948078155518
    10. 'bou' → logprob: -4.643948078155518

Token 638: ' l' (ID: 305)
  Prédit: 'la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'la' → logprob: -0.12311870604753494
    2. 'l' → logprob: -2.9981186389923096
    3. 'destination' → logprob: -4.123118877410889
    4. 'u' → logprob: -4.373118877410889
    5. ' la' → logprob: -4.748118877410889
    6. 'the' → logprob: -5.748118877410889
    7. 'le' → logprob: -5.748118877410889
    8. '[u' → logprob: -6.248118877410889
    9. 'while' → logprob: -6.498118877410889
    10. 'dest' → logprob: -6.623118877410889

Token 639: ''arrivée' (ID: 156076)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'while' → logprob: -1.429412841796875
    2. 'if' → logprob: -1.679412841796875
    3. ' boucle' → logprob: -1.804412841796875
    4. 'bou' → logprob: -2.179412841796875
    5. 'loop' → logprob: -2.554412841796875
    6. 'for' → logprob: -2.554412841796875
    7. 'de' → logprob: -3.554412841796875
    8. ' loop' → logprob: -4.304412841796875
    9. 'segments' → logprob: -4.429412841796875
    10. ' while' → logprob: -4.929412841796875

Token 640: ' finale' (ID: 37759)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.15622954070568085
    2. ')' → logprob: -3.0312294960021973
    3. '                           ' → logprob: -3.0312294960021973
    4. '                        
' → logprob: -4.781229496002197
    5. '                   ' → logprob: -5.031229496002197
    6. ':' → logprob: -5.156229496002197
    7. '                               ' → logprob: -5.531229496002197
    8. '                        ' → logprob: -5.531229496002197
    9. '<|end|>' → logprob: -5.531229496002197
    10. ',' → logprob: -5.656229496002197

Token 641: ',' (ID: 11)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.05309775844216347
    2. '                        
' → logprob: -3.678097724914551
    3. ')' → logprob: -4.553097724914551
    4. '                           ' → logprob: -5.053097724914551
    5. '                   ' → logprob: -5.553097724914551
    6. '                        ' → logprob: -6.428097724914551
    7. '<|end|>' → logprob: -7.178097724914551
    8. ',' → logprob: -7.303097724914551
    9. '                            
' → logprob: -7.803097724914551
    10. '               ' → logprob: -8.05309772491455

Token 642: ' 
' (ID: 793)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.16009929776191711
    2. '                           ' → logprob: -2.0350992679595947
    3. '                        ' → logprob: -5.035099506378174
    4. '                               ' → logprob: -5.410099506378174
    5. '                        
' → logprob: -6.035099506378174
    6. '                   ' → logprob: -7.410099506378174
    7. '                            ' → logprob: -7.660099506378174
    8. '           ' → logprob: -7.910099506378174
    9. ')' → logprob: -8.285099029541016
    10. ' ' → logprob: -8.410099029541016

Token 643: '                       ' (ID: 968)
  Prédit: '                       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.0041435761377215385
    2. '                           ' → logprob: -6.004143714904785
    3. '                        
' → logprob: -7.504143714904785
    4. '                   ' → logprob: -8.379143714904785
    5. '                               ' → logprob: -8.379143714904785
    6. '                        ' → logprob: -8.379143714904785
    7. ')' → logprob: -9.504143714904785
    8. '           ' → logprob: -9.754143714904785
    9. '               ' → logprob: -9.879143714904785
    10. '                      ' → logprob: -10.129143714904785

Token 644: ' #' (ID: 1069)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.038323063403367996
    2. '                           ' → logprob: -4.538322925567627
    3. '#' (adapté à ' #') → logprob: -5.163322925567627
    4. '                   ' → logprob: -5.163322925567627
    5. '                               ' → logprob: -5.913322925567627
    6. ')' → logprob: -6.288322925567627
    7. '               ' → logprob: -6.538322925567627
    8. '           ' → logprob: -6.663322925567627
    9. '       ' → logprob: -6.913322925567627
    10. ' et' → logprob: -7.038322925567627

Token 645: '  ' (ID: 256)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.005255456548184156
    2. '#' → logprob: -6.130255222320557
    3. '                           ' → logprob: -6.880255222320557
    4. '                   ' → logprob: -7.630255222320557
    5. '                               ' → logprob: -8.130255699157715
    6. ')' → logprob: -8.505255699157715
    7. 'n' → logprob: -9.005255699157715
    8. '                        
' → logprob: -9.130255699157715
    9. '                        ' → logprob: -9.130255699157715
    10. '           ' → logprob: -9.255255699157715

Token 646: ' c' (ID: 274)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.5770490765571594
    2. '#' → logprob: -1.0770490169525146
    3. 'continue' → logprob: -3.3270490169525146
    4. '                           ' → logprob: -3.8270490169525146
    5. ' #' → logprob: -5.452049255371094
    6. ' continue' → logprob: -5.827049255371094
    7. '                               ' → logprob: -5.952049255371094
    8. 'v' → logprob: -5.952049255371094
    9. 'on' → logprob: -6.077049255371094
    10. '                   ' → logprob: -6.202049255371094

Token 647: ''est' (ID: 6616)
  Prédit: 'ont'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ont' → logprob: -0.60349041223526
    2. 'ar' → logprob: -1.2284903526306152
    3. '                       ' → logprob: -3.2284903526306152
    4. ''est' → logprob: -3.6034903526306152
    5. '                   ' → logprob: -4.103490352630615
    6. '               ' → logprob: -4.353490352630615
    7. 'e' → logprob: -4.478490352630615
    8. '           ' → logprob: -4.853490352630615
    9. 'ode' → logprob: -4.978490352630615
    10. 'est' → logprob: -5.103490352630615

Token 648: ' coh' (ID: 85287)
  Prédit: 'possible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'possible' → logprob: -0.9640078544616699
    2. 'correct' → logprob: -1.58900785446167
    3. 'ok' → logprob: -2.96400785446167
    4. 'tout' → logprob: -3.08900785446167
    5. 'exact' → logprob: -3.21400785446167
    6. 'à' → logprob: -3.21400785446167
    7. '           ' → logprob: -3.58900785446167
    8. 'bien' → logprob: -3.58900785446167
    9. ' possible' → logprob: -3.83900785446167
    10. ' correct' → logprob: -4.08900785446167

Token 649: 'érent' (ID: 193873)
  Prédit: 'érent'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'érent' → logprob: -0.6135185360908508
    2. 'ent' → logprob: -1.613518476486206
    3. 'rent' → logprob: -2.238518476486206
    4. 'er' → logprob: -2.238518476486206
    5. 'ert' → logprob: -4.613518714904785
    6. 'err' → logprob: -4.863518714904785
    7. '#' → logprob: -5.488518714904785
    8. 'èrent' → logprob: -5.988518714904785
    9. '```' → logprob: -6.113518714904785
    10. '=' → logprob: -6.113518714904785

Token 650: ' avec' (ID: 3937)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.06875869631767273
    2. '                        
' → logprob: -3.443758726119995
    3. '                           ' → logprob: -3.943758726119995
    4. '                        ' → logprob: -5.068758487701416
    5. '<|end|>' → logprob: -6.318758487701416
    6. '                   ' → logprob: -6.943758487701416
    7. ')' → logprob: -6.943758487701416
    8. '                               ' → logprob: -7.193758487701416
    9. '                            
' → logprob: -7.318758487701416
    10. '           ' → logprob: -7.818758487701416

Token 651: ' le' (ID: 505)
  Prédit: 'la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'la' → logprob: -0.6981990933418274
    2. 'le' → logprob: -1.0731990337371826
    3. 'l' → logprob: -2.1981990337371826
    4. ' la' → logprob: -3.1981990337371826
    5. ' le' → logprob: -5.573199272155762
    6. 'the' → logprob: -6.198199272155762
    7. ' l' → logprob: -6.948199272155762
    8. 'leur' → logprob: -7.323199272155762
    9. '#' → logprob: -8.073199272155762
    10. 'continue' → logprob: -8.948199272155762

Token 652: ' fait' (ID: 7473)
  Prédit: 'pro'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pro' → logprob: -0.5084416270256042
    2. 'problem' → logprob: -1.633441686630249
    3. 'code' → logprob: -2.633441686630249
    4. 'proble' → logprob: -2.633441686630249
    5. 'continue' → logprob: -3.383441686630249
    6. ' problème' → logprob: -5.00844144821167
    7. 'en' → logprob: -5.63344144821167
    8. 'fait' → logprob: -6.25844144821167
    9. '```' → logprob: -6.50844144821167
    10. '#' → logprob: -6.50844144821167

Token 653: ' que' (ID: 661)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.2423011064529419
    2. '                           ' → logprob: -2.8673009872436523
    3. 'qu' → logprob: -3.1173009872436523
    4. ' que' → logprob: -3.2423009872436523
    5. 'd' → logprob: -3.7423009872436523
    6. 'que' → logprob: -4.242300987243652
    7. '                        ' → logprob: -4.617300987243652
    8. 'de' → logprob: -4.742300987243652
    9. ' de' → logprob: -5.617300987243652
    10. ' qu' → logprob: -5.742300987243652

Token 654: ' le' (ID: 505)
  Prédit: 'le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'le' → logprob: -0.3174203038215637
    2. 'l' → logprob: -2.817420244216919
    3. 'la' → logprob: -2.817420244216919
    4. 'on' → logprob: -3.067420244216919
    5. 'n' → logprob: -3.442420244216919
    6. 'the' → logprob: -4.067420482635498
    7. 'we' → logprob: -4.692420482635498
    8. ' le' → logprob: -4.817420482635498
    9. ' la' → logprob: -4.942420482635498
    10. 'c' → logprob: -5.067420482635498

Token 655: ' parcours' (ID: 62625)
  Prédit: 'pass'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pass' → logprob: -1.0716711282730103
    2. 'pro' → logprob: -1.4466711282730103
    3. 'graph' → logprob: -2.8216710090637207
    4. 'code' → logprob: -3.1966710090637207
    5. ' problème' → logprob: -3.1966710090637207
    6. 'gr' → logprob: -3.5716710090637207
    7. ' passage' → logprob: -3.6966710090637207
    8. 'print' → logprob: -3.9466710090637207
    9. 'proble' → logprob: -3.9466710090637207
    10. 'problem' → logprob: -4.071671009063721

Token 656: ' dans' (ID: 2671)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -1.3855371475219727
    2. ' se' → logprob: -1.5105371475219727
    3. ' est' → logprob: -1.7605371475219727
    4. 'se' → logprob: -2.8855371475219727
    5. 'continue' → logprob: -2.8855371475219727
    6. 'pe' → logprob: -3.1355371475219727
    7. 'n' → logprob: -3.5105371475219727
    8. ' s' → logprob: -3.7605371475219727
    9. 'est' → logprob: -3.7605371475219727
    10. ' peut' → logprob: -3.8855371475219727

Token 657: ' d' (ID: 272)
  Prédit: 'la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'la' → logprob: -0.8780874013900757
    2. 'le' → logprob: -1.1280874013900757
    3. ' la' → logprob: -2.3780875205993652
    4. 'l' → logprob: -2.5030875205993652
    5. 'pq' → logprob: -4.128087520599365
    6. 'les' → logprob: -4.378087520599365
    7. ' le' → logprob: -4.753087520599365
    8. '#' → logprob: -5.378087520599365
    9. ' ce' → logprob: -5.378087520599365
    10. 'code' → logprob: -5.628087520599365

Token 658: 'ijkstra' (ID: 124290)
  Prédit: 'ist'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ist' → logprob: -0.12294057756662369
    2. 'e' → logprob: -2.8729405403137207
    3. 'u' → logprob: -3.3729405403137207
    4. 'eux' → logprob: -4.372940540313721
    5. 'dist' → logprob: -5.122940540313721
    6. 'ists' → logprob: -6.247940540313721
    7. 'ef' → logprob: -7.497940540313721
    8. 'istance' → logprob: -7.622940540313721
    9. 'is' → logprob: -7.622940540313721
    10. 'it' → logprob: -7.872940540313721

Token 659: ' continue' (ID: 4901)
  Prédit: ' se'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' se' → logprob: -1.2404859066009521
    2. ' continue' → logprob: -1.9904859066009521
    3. ' est' → logprob: -2.115485906600952
    4. 'se' → logprob: -2.365485906600952
    5. 'continue' → logprob: -2.740485906600952
    6. 'est' → logprob: -2.990485906600952
    7. ')' → logprob: -3.115485906600952
    8. '                           ' → logprob: -3.615485906600952
    9. '           ' → logprob: -3.740485906600952
    10. 's' → logprob: -3.740485906600952

Token 660: ' après' (ID: 16460)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.05323374271392822
    2. '                           ' → logprob: -3.9282336235046387
    3. ')' → logprob: -4.178233623504639
    4. '                        
' → logprob: -5.428233623504639
    5. '                   ' → logprob: -5.678233623504639
    6. '                        ' → logprob: -5.928233623504639
    7. ',' → logprob: -6.428233623504639
    8. '):' → logprob: -7.178233623504639
    9. '                               ' → logprob: -7.303233623504639
    10. '           ' → logprob: -7.303233623504639

Token 661: ' n' (ID: 297)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.6848403811454773
    2. ')' → logprob: -0.8098403811454773
    3. ',' → logprob: -4.684840202331543
    4. '                           ' → logprob: -4.809840202331543
    5. ' )' → logprob: -5.059840202331543
    6. ' (' → logprob: -5.684840202331543
    7. '<|end|>' → logprob: -6.059840202331543
    8. '                   ' → logprob: -6.184840202331543
    9. '                        ' → logprob: -6.184840202331543
    10. ' ' → logprob: -6.309840202331543

Token 662: '.
' (ID: 558)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.05770714953541756
    2. '                   ' → logprob: -4.1827073097229
    3. '                           ' → logprob: -4.1827073097229
    4. '                        
' → logprob: -4.5577073097229
    5. '                        ' → logprob: -5.4327073097229
    6. ')' → logprob: -5.4327073097229
    7. '               ' → logprob: -6.4327073097229
    8. '           ' → logprob: -7.1827073097229
    9. '<|end|>' → logprob: -7.4327073097229
    10. '                               ' → logprob: -7.4327073097229

Token 663: '                       ' (ID: 968)
  Prédit: '                       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.04950583726167679
    2. '                   ' → logprob: -3.5495059490203857
    3. '                           ' → logprob: -5.174505710601807
    4. ')' → logprob: -5.299505710601807
    5. '                        
' → logprob: -5.424505710601807
    6. '           ' → logprob: -6.549505710601807
    7. '               ' → logprob: -6.924505710601807
    8. '                        ' → logprob: -7.424505710601807
    9. '                    
' → logprob: -8.549506187438965
    10. '       ' → logprob: -8.799506187438965

Token 664: ' #' (ID: 1069)
  Prédit: '                           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                           ' → logprob: -0.6170939803123474
    2. '                       ' → logprob: -0.8670939803123474
    3. '                               ' → logprob: -3.742094039916992
    4. ' if' → logprob: -4.992094039916992
    5. 'if' → logprob: -5.867094039916992
    6. ' for' → logprob: -6.617094039916992
    7. 'for' → logprob: -7.242094039916992
    8. '                            ' → logprob: -7.242094039916992
    9. '                        ' → logprob: -7.242094039916992
    10. '                   ' → logprob: -7.367094039916992

Token 665: '  ' (ID: 256)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.1076473742723465
    2. ' if' → logprob: -3.10764741897583
    3. '                           ' → logprob: -3.35764741897583
    4. 'if' → logprob: -4.48264741897583
    5. '                   ' → logprob: -5.10764741897583
    6. '           ' → logprob: -6.85764741897583
    7. '                               ' → logprob: -6.98264741897583
    8. '               ' → logprob: -7.23264741897583
    9. '                        
' → logprob: -7.23264741897583
    10. '                        ' → logprob: -8.482646942138672

Token 666: ' On' (ID: 2160)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.41465529799461365
    2. 'nc' → logprob: -1.789655327796936
    3. '                       ' → logprob: -3.1646552085876465
    4. 'new' → logprob: -3.4146552085876465
    5. 'for' → logprob: -4.0396552085876465
    6. '#' → logprob: -4.0396552085876465
    7. '                           ' → logprob: -4.1646552085876465
    8. 'n' → logprob: -4.2896552085876465
    9. ' if' → logprob: -4.7896552085876465
    10. 'cost' → logprob: -5.6646552085876465

Token 667: ' ne' (ID: 453)
  Prédit: 'continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'continue' → logprob: -0.2031872570514679
    2. ' continue' → logprob: -2.3281872272491455
    3. '                       ' → logprob: -3.7031872272491455
    4. '                           ' → logprob: -3.8281872272491455
    5. '                   ' → logprob: -4.828187465667725
    6. '                               ' → logprob: -5.078187465667725
    7. 'n' → logprob: -5.453187465667725
    8. 'contin' → logprob: -5.453187465667725
    9. '           ' → logprob: -5.578187465667725
    10. '               ' → logprob: -6.078187465667725

Token 668: ' s' (ID: 265)
  Prédit: 'continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'continue' → logprob: -0.44492197036743164
    2. ' continue' → logprob: -2.4449219703674316
    3. 'p' → logprob: -2.5699219703674316
    4. 'do' → logprob: -3.3199219703674316
    5. '           ' → logprob: -3.4449219703674316
    6. 'pas' → logprob: -4.319921970367432
    7. 'pe' → logprob: -4.319921970367432
    8. 's' → logprob: -4.444921970367432
    9. '               ' → logprob: -4.694921970367432
    10. '                       ' → logprob: -4.694921970367432

Token 669: ''arr' (ID: 49695)
  Prédit: 'pas'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pas' → logprob: -0.908862292766571
    2. 'continue' → logprob: -1.1588623523712158
    3. '           ' → logprob: -2.408862352371216
    4. '                       ' → logprob: -2.783862352371216
    5. '               ' → logprob: -3.158862352371216
    6. '                   ' → logprob: -4.158862113952637
    7. '       ' → logprob: -4.283862113952637
    8. 'contin' → logprob: -4.658862113952637
    9. 'continu' → logprob: -4.783862113952637
    10. 'arr' → logprob: -5.533862113952637

Token 670: 'ête' (ID: 16808)
  Prédit: 'ête'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ête' → logprob: -0.34496909379959106
    2. 'êtes' → logprob: -2.5949690341949463
    3. 'êt' → logprob: -2.7199690341949463
    4. 'et' → logprob: -3.0949690341949463
    5. 'ê' → logprob: -3.3449690341949463
    6. 'êts' → logprob: -3.8449690341949463
    7. 'êter' → logprob: -3.9699690341949463
    8. 'ète' → logprob: -5.219969272613525
    9. 'é' → logprob: -5.594969272613525
    10. 'être' → logprob: -6.094969272613525

Token 671: ' qu' (ID: 474)
  Prédit: 'pas'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pas' → logprob: -0.005031421314924955
    2. '                   ' → logprob: -6.130031585693359
    3. '           ' → logprob: -6.880031585693359
    4. '                       ' → logprob: -7.255031585693359
    5. '               ' → logprob: -7.630031585693359
    6. ' pas' → logprob: -8.50503158569336
    7. '                           ' → logprob: -10.00503158569336
    8. '                        ' → logprob: -10.38003158569336
    9. '                    ' → logprob: -10.63003158569336
    10. '_pas' → logprob: -10.63003158569336

Token 672: ''au' (ID: 63689)
  Prédit: 'pas'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pas' → logprob: -0.016861530020833015
    2. ' pas' → logprob: -4.891861438751221
    3. '                       ' → logprob: -5.766861438751221
    4. '                   ' → logprob: -5.891861438751221
    5. '               ' → logprob: -6.641861438751221
    6. '           ' → logprob: -6.641861438751221
    7. 'que' → logprob: -8.641861915588379
    8. '_pas' → logprob: -9.141861915588379
    9. '                           ' → logprob: -9.266861915588379
    10. 'à' → logprob: -9.641861915588379

Token 673: ' moment' (ID: 4205)
  Prédit: 'pop'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pop' → logprob: -1.2206944227218628
    2. ' moment' → logprob: -1.5956944227218628
    3. 'print' → logprob: -1.7206944227218628
    4. 'moment' → logprob: -2.5956945419311523
    5. 'n' → logprob: -2.7206945419311523
    6. 'u' → logprob: -3.5956945419311523
    7. 'v' → logprob: -3.9706945419311523
    8. 'if' → logprob: -4.220694541931152
    9. 'final' → logprob: -4.220694541931152
    10. 'point' → logprob: -4.345694541931152

Token 674: ' ou' (ID: 2031)
  Prédit: 'où'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'où' → logprob: -0.22860868275165558
    2. '                           ' → logprob: -2.2286086082458496
    3. '                       ' → logprob: -3.4786086082458496
    4. ' où' → logprob: -3.8536086082458496
    5. 'd' → logprob: -4.47860860824585
    6. 'du' → logprob: -4.97860860824585
    7. 'de' → logprob: -4.97860860824585
    8. 'where' → logprob: -5.22860860824585
    9. 'qu' → logprob: -5.97860860824585
    10. '                               ' → logprob: -6.10360860824585

Token 675: ' on' (ID: 402)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'u' → logprob: -0.8892940282821655
    2. 'on' → logprob: -1.0142940282821655
    3. 'v' → logprob: -1.7642940282821655
    4. ' on' → logprob: -4.014294147491455
    5. ' u' → logprob: -4.639294147491455
    6. 'le' → logprob: -5.764294147491455
    7. 'we' → logprob: -5.889294147491455
    8. 'cost' → logprob: -6.014294147491455
    9. '                   ' → logprob: -6.014294147491455
    10. ' v' → logprob: -6.139294147491455

Token 676: ' pop' (ID: 2735)
  Prédit: 'pop'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pop' → logprob: -0.007809731177985668
    2. ' pop' → logprob: -5.257809638977051
    3. 'p' → logprob: -6.382809638977051
    4. 'print' → logprob: -8.00780963897705
    5. 'arr' → logprob: -8.88280963897705
    6. ' pops' → logprob: -9.25780963897705
    7. '```' → logprob: -9.63280963897705
    8. 'u' → logprob: -9.75780963897705
    9. 'le' → logprob: -10.13280963897705
    10. 'extract' → logprob: -10.50780963897705

Token 677: ' n' (ID: 297)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.04549075663089752
    2. '                           ' → logprob: -3.4204907417297363
    3. '                        
' → logprob: -5.795490741729736
    4. ')' → logprob: -5.920490741729736
    5. '                               ' → logprob: -6.295490741729736
    6. '                        ' → logprob: -6.670490741729736
    7. '                   ' → logprob: -7.295490741729736
    8. ',' → logprob: -7.920490741729736
    9. '               ' → logprob: -8.045491218566895
    10. '           ' → logprob: -8.045491218566895

Token 678: ' depuis' (ID: 16277)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.04928401857614517
    2. '                           ' → logprob: -3.299283981323242
    3. '                        
' → logprob: -5.799283981323242
    4. '                   ' → logprob: -6.299283981323242
    5. '           ' → logprob: -6.799283981323242
    6. '                               ' → logprob: -7.049283981323242
    7. ')' → logprob: -7.049283981323242
    8. '                        ' → logprob: -7.174283981323242
    9. '       ' → logprob: -7.424283981323242
    10. '               ' → logprob: -7.799283981323242

Token 679: ' la' (ID: 557)
  Prédit: 'pq'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pq' → logprob: -0.42643359303474426
    2. 'la' → logprob: -1.6764335632324219
    3. ' la' → logprob: -2.176433563232422
    4. 'le' → logprob: -3.926433563232422
    5. ' pq' → logprob: -3.926433563232422
    6. 'the' → logprob: -6.051433563232422
    7. 'l' → logprob: -6.551433563232422
    8. 'p' → logprob: -6.801433563232422
    9. ' le' → logprob: -7.301433563232422
    10. ' the' → logprob: -8.301433563232422

Token 680: ' file' (ID: 1974)
  Prédit: 'pq'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pq' → logprob: -0.24880114197731018
    2. 'priority' → logprob: -1.7488011121749878
    3. 'file' → logprob: -3.2488012313842773
    4. 'queue' → logprob: -5.123801231384277
    5. 'prior' → logprob: -8.248801231384277
    6. ' pq' → logprob: -8.498801231384277
    7. 'heap' → logprob: -8.498801231384277
    8. ' priority' → logprob: -8.498801231384277
    9. 'prio' → logprob: -8.498801231384277
    10. 'pile' → logprob: -8.998801231384277

Token 681: '.
' (ID: 558)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.040894266217947006
    2. '                           ' → logprob: -3.9158942699432373
    3. '                   ' → logprob: -4.915894031524658
    4. '                        
' → logprob: -5.540894031524658
    5. '                        ' → logprob: -6.165894031524658
    6. '               ' → logprob: -6.290894031524658
    7. ')' → logprob: -6.415894031524658
    8. '           ' → logprob: -6.540894031524658
    9. '                               ' → logprob: -7.790894031524658
    10. '                            ' → logprob: -8.290894508361816

Token 682: '                       ' (ID: 968)
  Prédit: '                       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.00697370944544673
    2. '                           ' → logprob: -5.256973743438721
    3. '                        
' → logprob: -7.131973743438721
    4. '                   ' → logprob: -7.756973743438721
    5. '           ' → logprob: -9.006973266601562
    6. '                        ' → logprob: -9.381973266601562
    7. '               ' → logprob: -9.631973266601562
    8. '                               ' → logprob: -9.756973266601562
    9. '
' → logprob: -10.131973266601562
    10. '       ' → logprob: -10.381973266601562

Token 683: ' n' (ID: 297)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.11529601365327835
    2. '                           ' → logprob: -2.4902961254119873
    3. 'if' → logprob: -4.490295886993408
    4. ' if' → logprob: -4.865295886993408
    5. '                   ' → logprob: -6.490295886993408
    6. '           ' → logprob: -6.865295886993408
    7. '                               ' → logprob: -7.115295886993408
    8. '                        ' → logprob: -7.240295886993408
    9. 'for' → logprob: -7.365295886993408
    10. '                        
' → logprob: -7.490295886993408

Token 684: 'cost' (ID: 33457)
  Prédit: 'cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cost' → logprob: -0.000825229799374938
    2. '_cost' → logprob: -8.375824928283691
    3. 'ext' → logprob: -8.625824928283691
    4. 'v' → logprob: -9.000824928283691
    5. 'c' → logprob: -9.125824928283691
    6. 'dist' → logprob: -9.250824928283691
    7. 'cos' → logprob: -11.125824928283691
    8. 'nc' → logprob: -11.750824928283691
    9. 'Cost' → logprob: -12.000824928283691
    10. 'ew' → logprob: -12.125824928283691

Token 685: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.3870018422603607
    2. '=' → logprob: -1.137001872062683
    3. ',' → logprob: -9.012001991271973
    4. ' =
' → logprob: -12.762001991271973
    5. ' ,' → logprob: -13.012001991271973
    6. '=
' → logprob: -13.637001991271973
    7. ')' → logprob: -14.262001991271973
    8. '           ' → logprob: -15.012001991271973
    9. '    ' → logprob: -15.012001991271973
    10. '   ' → logprob: -15.512001991271973

Token 686: ' cost' (ID: 3097)
  Prédit: 'cost'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cost' → logprob: -0.0006266565760597587
    2. ' cost' → logprob: -7.375626564025879
    3. '   ' → logprob: -17.750627517700195
    4. '0' → logprob: -17.875627517700195
    5. '(cost' → logprob: -18.375627517700195
    6. 'dist' → logprob: -18.625627517700195
    7. ' ' → logprob: -18.750627517700195
    8. 'Cost' → logprob: -20.000627517700195
    9. 'cos' → logprob: -20.375627517700195
    10. 'c' → logprob: -20.500627517700195

Token 687: ' +' (ID: 659)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.2635638415813446
    2. '<|end|>' → logprob: -1.638563871383667
    3. '                       ' → logprob: -5.138563632965088
    4. ',n' → logprob: -5.513563632965088
    5. '+' → logprob: -5.763563632965088
    6. '                   ' → logprob: -5.888563632965088
    7. ' ,' → logprob: -5.888563632965088
    8. '               ' → logprob: -5.888563632965088
    9. '=' → logprob: -6.388563632965088
    10. '       ' → logprob: -6.513563632965088

Token 688: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00030304977553896606
    2. ' ' → logprob: -8.125303268432617
    3. 'c' → logprob: -12.250303268432617
    4. '(' → logprob: -14.750303268432617
    5. '   ' → logprob: -14.937803268432617
    6. '1' → logprob: -14.937803268432617
    7. ' c' → logprob: -16.062803268432617
    8. '2' → logprob: -16.312803268432617
    9. '00' → logprob: -16.312803268432617
    10. '  ' → logprob: -16.500303268432617

Token 689: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0001342903997283429
    2. ' ' → logprob: -9.000134468078613
    3. 'c' → logprob: -11.750134468078613
    4. '(' → logprob: -13.125134468078613
    5. '1' → logprob: -15.500134468078613
    6. '   ' → logprob: -15.625134468078613
    7. '  ' → logprob: -16.000133514404297
    8. ' c' → logprob: -16.187633514404297
    9. '-' → logprob: -17.250133514404297
    10. '00' → logprob: -17.562633514404297

Token 690: '
' (ID: 198)
  Prédit: '                       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.32127833366394043
    2. '                   ' → logprob: -1.5712783336639404
    3. '
' → logprob: -2.8212783336639404
    4. '                           ' → logprob: -6.3212785720825195
    5. '               ' → logprob: -6.4462785720825195
    6. 'if' → logprob: -6.8212785720825195
    7. '                        
' → logprob: -7.0712785720825195
    8. ',' → logprob: -7.5712785720825195
    9. '           ' → logprob: -7.8212785720825195
    10. ' if' → logprob: -8.07127857208252

Token 691: '                       ' (ID: 968)
  Prédit: '                       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                       ' → logprob: -0.08733192086219788
    2. '                   ' → logprob: -2.712332010269165
    3. '                           ' → logprob: -4.462331771850586
    4. '
' → logprob: -6.212331771850586
    5. '                        
' → logprob: -6.462331771850586
    6. '               ' → logprob: -7.837331771850586
    7. ' if' → logprob: -7.962331771850586
    8. 'if' → logprob: -8.212331771850586
    9. ',' → logprob: -8.337331771850586
    10. '           ' → logprob: -8.337331771850586

Token 692: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.03863278776407242
    2. '                       ' → logprob: -3.663632869720459
    3. ' if' → logprob: -4.413632869720459
    4. 'next' → logprob: -9.7886323928833
    5. '                   ' → logprob: -9.7886323928833
    6. 'new' → logprob: -11.1636323928833
    7. 'v' → logprob: -12.4136323928833
    8. '                           ' → logprob: -12.6636323928833
    9. 'nd' → logprob: -13.0386323928833
    10. '               ' → logprob: -13.1636323928833

Token 693: ' dist' (ID: 3601)
  Prédit: 'dist'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dist' → logprob: -0.0018565307836979628
    2. ' dist' → logprob: -6.376856327056885
    3. 'not' → logprob: -10.001856803894043
    4. '           ' → logprob: -10.126856803894043
    5. 'v' → logprob: -10.376856803894043
    6. '               ' → logprob: -11.751856803894043
    7. '                           ' → logprob: -11.751856803894043
    8. '   ' → logprob: -12.251856803894043
    9. '                   ' → logprob: -12.751856803894043
    10. '                       ' → logprob: -13.001856803894043

Token 694: '[v' (ID: 36561)
  Prédit: '[v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[v' → logprob: -0.0008947860915213823
    2. '[u' → logprob: -7.625895023345947
    3. 'v' → logprob: -7.875895023345947
    4. '=v' → logprob: -11.375894546508789
    5. '[' → logprob: -12.500894546508789
    6. '=' → logprob: -13.125894546508789
    7. '   ' → logprob: -13.250894546508789
    8. ' =' → logprob: -13.625894546508789
    9. ' [' → logprob: -14.000894546508789
    10. '```' → logprob: -14.250894546508789

Token 695: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.03578216955065727
    2. '1' → logprob: -3.7857820987701416
    3. 'v' → logprob: -4.535782337188721
    4. '[v' → logprob: -6.410782337188721
    5. '```' → logprob: -10.910781860351562
    6. '][' → logprob: -11.285781860351562
    7. ' v' → logprob: -11.723281860351562
    8. '   ' → logprob: -11.973281860351562
    9. '[u' → logprob: -12.098281860351562
    10. '(v' → logprob: -12.223281860351562

Token 696: '][' (ID: 2696)
  Prédit: ']['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '][' → logprob: -0.18018494546413422
    2. '[' → logprob: -1.8051849603652954
    3. '[v' → logprob: -8.180185317993164
    4. '0' → logprob: -9.555185317993164
    5. '1' → logprob: -10.555185317993164
    6. ' ][' → logprob: -11.430185317993164
    7. ']' → logprob: -11.680185317993164
    8. 'v' → logprob: -11.680185317993164
    9. '}[' → logprob: -11.805185317993164
    10. '```' → logprob: -12.430185317993164

Token 697: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.128163257315464e-07
    2. '   ' → logprob: -16.5
    3. ' ' → logprob: -16.625
    4. '           ' → logprob: -18.5
    5. '                   ' → logprob: -18.625
    6. '                       ' → logprob: -18.875
    7. '               ' → logprob: -18.875
    8. '```' → logprob: -19.25
    9. '                           ' → logprob: -19.5
    10. '       ' → logprob: -20.125

Token 698: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0010960459476336837
    2. '>' → logprob: -7.501096248626709
    3. ']>' → logprob: -7.751096248626709
    4. ' >' → logprob: -9.50109577178955
    5. ' ]' → logprob: -10.25109577178955
    6. '']' → logprob: -14.50109577178955
    7. '   ' → logprob: -14.62609577178955
    8. '[' → logprob: -14.75109577178955
    9. '"]' → logprob: -14.87609577178955
    10. '>]' → logprob: -15.75109577178955

Token 699: ' >' (ID: 1424)
  Prédit: ' >'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >' → logprob: -0.16022644937038422
    2. '>' → logprob: -1.9102264642715454
    3. '[' → logprob: -14.785226821899414
    4. ']' → logprob: -15.410226821899414
    5. ']>' → logprob: -15.410226821899414
    6. '                           ' → logprob: -15.410226821899414
    7. '   ' → logprob: -15.535226821899414
    8. ' ' → logprob: -15.660226821899414
    9. ':' → logprob: -15.910226821899414
    10. ' >
' → logprob: -16.160226821899414

Token 700: ' n' (ID: 297)
  Prédit: 'nc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'nc' → logprob: -0.011098635382950306
    2. 'cost' → logprob: -4.511098861694336
    3. 'n' → logprob: -10.886098861694336
    4. ' nc' → logprob: -11.386098861694336
    5. ' cost' → logprob: -11.761098861694336
    6. ' n' → logprob: -12.011098861694336
    7. '0' → logprob: -12.886098861694336
    8. 'nb' → logprob: -14.136098861694336
    9. 'nst' → logprob: -14.386098861694336
    10. '   ' → logprob: -14.636098861694336

Token 701: 'cost' (ID: 33457)
  Prédit: 'nc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'nc' → logprob: -0.3169880211353302
    2. 'cost' → logprob: -1.3169879913330078
    3. ' n' → logprob: -6.441987991333008
    4. ' cost' → logprob: -6.441987991333008
    5. ' nc' → logprob: -8.566987991333008
    6. 'n' → logprob: -8.941987991333008
    7. 'nb' → logprob: -10.066987991333008
    8. '0' → logprob: -10.191987991333008
    9. 'dist' → logprob: -10.441987991333008
    10. 'nst' → logprob: -10.691987991333008

Token 702: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.003913356922566891
    2. ':
' → logprob: -5.753913402557373
    3. '                           ' → logprob: -7.878913402557373
    4. ' :' → logprob: -8.503912925720215
    5. '                       ' → logprob: -9.753912925720215
    6. '):' → logprob: -10.128912925720215
    7. '[' → logprob: -10.878912925720215
    8. '                               ' → logprob: -12.253912925720215
    9. '<|end|>' → logprob: -12.378912925720215
    10. '):
' → logprob: -12.503912925720215

Token 703: '                           ' (ID: 1686)
  Prédit: '                           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                           ' → logprob: -0.004943885374814272
    2. '                       ' → logprob: -5.75494384765625
    3. '                               ' → logprob: -6.50494384765625
    4. '                   ' → logprob: -9.00494384765625
    5. '               ' → logprob: -9.75494384765625
    6. '```' → logprob: -10.12994384765625
    7. '           ' → logprob: -11.25494384765625
    8. '                                   ' → logprob: -11.50494384765625
    9. '                            ' → logprob: -11.87994384765625
    10. '                        
' → logprob: -12.75494384765625

Token 704: ' dist' (ID: 3601)
  Prédit: 'dist'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dist' (adapté à ' dist') → logprob: -0.0005121642025187612
    2. ' dist' → logprob: -8.00051212310791
    3. '                               ' → logprob: -8.87551212310791
    4. '                           ' → logprob: -10.25051212310791
    5. '                                   ' → logprob: -14.25051212310791
    6. '               ' → logprob: -15.62551212310791
    7. '                       ' → logprob: -15.62551212310791
    8. '```' → logprob: -15.62551212310791
    9. '                                       ' → logprob: -16.250513076782227
    10. '   ' → logprob: -16.375513076782227

Token 705: '[v' (ID: 36561)
  Prédit: '[v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[v' → logprob: -3.128163257315464e-07
    2. 'v' → logprob: -15.75
    3. '                           ' → logprob: -16.5
    4. '```' → logprob: -18.625
    5. '                               ' → logprob: -18.875
    6. '                            ' → logprob: -19.375
    7. '=v' → logprob: -19.5
    8. '<v' → logprob: -19.625
    9. '[u' → logprob: -19.875
    10. '[' → logprob: -20.25

Token 706: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -1.2352385965641588e-05
    2. 'v' → logprob: -11.750012397766113
    3. '[v' → logprob: -12.500012397766113
    4. '```' → logprob: -14.625012397766113
    5. '   ' → logprob: -17.125011444091797
    6. '                   ' → logprob: -17.125011444091797
    7. '[' → logprob: -17.375011444091797
    8. '           ' → logprob: -17.750011444091797
    9. '                       ' → logprob: -18.000011444091797
    10. '                           ' → logprob: -18.000011444091797

Token 707: '][' (ID: 2696)
  Prédit: ']['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '][' → logprob: -0.10030242055654526
    2. '[' → logprob: -2.3503024578094482
    3. '                           ' → logprob: -10.225302696228027
    4. ')[' → logprob: -10.975302696228027
    5. '"][' → logprob: -11.850302696228027
    6. ' ][' → logprob: -12.350302696228027
    7. '                               ' → logprob: -12.475302696228027
    8. ']' → logprob: -12.600302696228027
    9. '>[' → logprob: -12.600302696228027
    10. '```' → logprob: -12.600302696228027

Token 708: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.009204166941344738
    2. 'cost' → logprob: -4.759204387664795
    3. 'nc' → logprob: -7.509204387664795
    4. ' cost' → logprob: -11.384203910827637
    5. ' ' → logprob: -11.884203910827637
    6. '(cost' → logprob: -12.384203910827637
    7. 'n' → logprob: -12.509203910827637
    8. 'used' → logprob: -12.634203910827637
    9. '   ' → logprob: -12.759203910827637
    10. '```' → logprob: -13.134203910827637

Token 709: ']' (ID: 60)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.3911515772342682
    2. ' =' → logprob: -1.1411515474319458
    3. ']' → logprob: -5.641151428222656
    4. ']=' → logprob: -7.266151428222656
    5. '                           ' → logprob: -11.266151428222656
    6. ')' → logprob: -11.891151428222656
    7. ' ]' → logprob: -14.016151428222656
    8. '                               ' → logprob: -14.141151428222656
    9. ',' → logprob: -14.516151428222656
    10. '[' → logprob: -14.641151428222656

Token 710: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.10020678490400314
    2. ' =' → logprob: -2.3502068519592285
    3. '=n' → logprob: -16.97520637512207
    4. '=
' → logprob: -17.60020637512207
    5. ']=' → logprob: -17.72520637512207
    6. '[' → logprob: -17.85020637512207
    7. ')' → logprob: -18.22520637512207
    8. ',' → logprob: -18.35020637512207
    9. '＝' → logprob: -18.35020637512207
    10. ']' → logprob: -18.60020637512207

Token 711: ' n' (ID: 297)
  Prédit: 'nc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'nc' → logprob: -6.265633419388905e-05
    2. 'cost' → logprob: -9.750062942504883
    3. ' nc' → logprob: -12.750062942504883
    4. '0' → logprob: -13.625062942504883
    5. 'n' → logprob: -15.750062942504883
    6. ' n' → logprob: -17.000062942504883
    7. 'NC' → logprob: -17.500062942504883
    8. 'nb' → logprob: -17.875062942504883
    9. ' cost' → logprob: -18.625062942504883
    10. '```' → logprob: -19.250062942504883

Token 712: 'cost' (ID: 33457)
  Prédit: 'cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cost' → logprob: -5.512236498361744e-07
    2. ' cost' → logprob: -14.500000953674316
    3. '_cost' → logprob: -17.5
    4. 'Cost' → logprob: -18.25
    5. '(cost' → logprob: -18.375
    6. 'nc' → logprob: -18.625
    7. 'cnt' → logprob: -20.125
    8. 'kost' → logprob: -20.5
    9. '-cost' → logprob: -21.0
    10. '```' → logprob: -21.0

Token 713: '
' (ID: 198)
  Prédit: '                           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '                           ' → logprob: -0.00023405285901390016
    2. 'heap' → logprob: -9.75023365020752
    3. '           ' → logprob: -10.00023365020752
    4. '                   ' → logprob: -10.12523365020752
    5. '                       ' → logprob: -10.25023365020752
    6. '                               ' → logprob: -11.25023365020752
    7. '						' → logprob: -11.37523365020752
    8. '               ' → logprob: -11.50023365020752
    9. '                            ' → logprob: -12.00023365020752
    10. '                            
' → logprob: -12.25023365020752

Token 714: '                           ' (ID: 1686)
  Prédit: '                           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '                           ' → logprob: -0.00012987985974177718
    2. 'heap' → logprob: -9.500129699707031
    3. '           ' → logprob: -10.625129699707031
    4. '                       ' → logprob: -11.750129699707031
    5. '```' → logprob: -11.875129699707031
    6. '                   ' → logprob: -12.000129699707031
    7. '                               ' → logprob: -12.500129699707031
    8. '               ' → logprob: -13.000129699707031
    9. '                            ' → logprob: -13.250129699707031
    10. '						' → logprob: -14.125129699707031

Token 715: ' heap' (ID: 37237)
  Prédit: 'heap'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'heap' (adapté à ' heap') → logprob: -8.006006828509271e-05
    2. '                           ' → logprob: -9.750080108642578
    3. ' heap' → logprob: -10.750080108642578
    4. 'he' → logprob: -16.500080108642578
    5. '           ' → logprob: -17.125080108642578
    6. '                               ' → logprob: -17.375080108642578
    7. '                       ' → logprob: -17.375080108642578
    8. '(heap' → logprob: -17.375080108642578
    9. '```' → logprob: -17.375080108642578
    10. '.heap' → logprob: -18.625080108642578

Token 716: 'q' (ID: 80)
  Prédit: 'q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -9.088346359931165e-07
    2. 'p' → logprob: -14.250000953674316
    3. 'app' → logprob: -16.375
    4. '.he' → logprob: -17.25
    5. 'he' → logprob: -17.625
    6. '[' → logprob: -18.25
    7. '```' → logprob: -18.625
    8. 'push' → logprob: -18.875
    9. 'f' → logprob: -19.0
    10. 'qq' → logprob: -19.125

Token 717: '.he' (ID: 67786)
  Prédit: '.he'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.he' → logprob: -0.0003146088565699756
    2. 'he' → logprob: -8.125314712524414
    3. 'q' → logprob: -11.250314712524414
    4. 'ush' → logprob: -13.000314712524414
    5. '.heap' → logprob: -13.000314712524414
    6. 'app' → logprob: -14.875314712524414
    7. 'heap' → logprob: -14.875314712524414
    8. 'push' → logprob: -15.625314712524414
    9. ' he' → logprob: -16.625314712524414
    10. '.push' → logprob: -17.000314712524414

Token 718: 'app' (ID: 903)
  Prédit: 'app'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'app' → logprob: -0.0011801084037870169
    2. 'pp' → logprob: -6.751180171966553
    3. 'push' → logprob: -12.501179695129395
    4. 'ap' → logprob: -12.501179695129395
    5. 'ush' → logprob: -14.251179695129395
    6. '[' → logprob: -15.376179695129395
    7. 'q' → logprob: -15.501179695129395
    8. 'he' → logprob: -15.501179695129395
    9. 'p' → logprob: -15.751179695129395
    10. '```' → logprob: -16.00118064880371

Token 719: 'ush' (ID: 1776)
  Prédit: 'ush'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ush' → logprob: -0.028243808075785637
    2. 'app' → logprob: -3.6532437801361084
    3. 'push' → logprob: -6.5282440185546875
    4. 'pp' → logprob: -7.7782440185546875
    5. 'he' → logprob: -10.903244018554688
    6. '.he' → logprob: -11.278244018554688
    7. 'q' → logprob: -11.778244018554688
    8. 'p' → logprob: -12.278244018554688
    9. 'e' → logprob: -12.278244018554688
    10. '```' → logprob: -12.528244018554688

Token 720: '(p' (ID: 2407)
  Prédit: '(p'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(p' → logprob: -4.320199877838604e-07
    2. '(' → logprob: -15.125
    3. '(q' → logprob: -16.375
    4. 'pq' → logprob: -18.25
    5. 'p' → logprob: -18.875
    6. '(
' → logprob: -19.875
    7. ' (' → logprob: -20.25
    8. '(py' → logprob: -20.75
    9. '```' → logprob: -20.875
    10. '(pr' → logprob: -21.75

Token 721: 'q' (ID: 80)
  Prédit: 'q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -0.02396560274064541
    2. '(p' → logprob: -3.77396559715271
    3. 'pq' → logprob: -7.398965835571289
    4. '(q' → logprob: -9.273965835571289
    5. 'p' → logprob: -12.023965835571289
    6. ' pq' → logprob: -12.523965835571289
    7. '[p' → logprob: -13.648965835571289
    8. 'dq' → logprob: -14.023965835571289
    9. 'sq' → logprob: -14.398965835571289
    10. 'vq' → logprob: -14.523965835571289

Token 722: ',' (ID: 11)
  Prédit: '(p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(p' → logprob: -0.00017123986617662013
    2. ',' → logprob: -9.125171661376953
    3. '(' → logprob: -10.000171661376953
    4. ',p' → logprob: -11.375171661376953
    5. ' (' → logprob: -12.500171661376953
    6. '(q' → logprob: -14.750171661376953
    7. '```' → logprob: -15.125171661376953
    8. ')' → logprob: -15.250171661376953
    9. '(
' → logprob: -15.500171661376953
    10. ',(' → logprob: -15.500171661376953

Token 723: ' (' (ID: 350)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.032054606825113297
    2. ' (' → logprob: -3.5320546627044678
    3. '(cost' → logprob: -6.657054424285889
    4. '(' → logprob: -7.032054424285889
    5. '(p' → logprob: -9.032054901123047
    6. '(dist' → logprob: -12.532054901123047
    7. '(c' → logprob: -12.782054901123047
    8. ' ' → logprob: -12.782054901123047
    9. '   ' → logprob: -14.282054901123047
    10. '((' → logprob: -14.282054901123047

Token 724: 'nc' (ID: 24825)
  Prédit: 'nc'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'nc' → logprob: -0.0010045854141935706
    2. '0' → logprob: -7.001004695892334
    3. '(n' → logprob: -9.376004219055176
    4. 'n' → logprob: -12.626004219055176
    5. 'cost' → logprob: -13.001004219055176
    6. ' nc' → logprob: -13.001004219055176
    7. '(' → logprob: -15.251004219055176
    8. ' n' → logprob: -16.001005172729492
    9. '(cost' → logprob: -16.376005172729492
    10. ' ' → logprob: -16.376005172729492

Token 725: 'ost' (ID: 564)
  Prédit: 'ost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ost' → logprob: -0.08921458572149277
    2. 'cost' → logprob: -2.464214563369751
    3. 'st' → logprob: -8.464214324951172
    4. '_cost' → logprob: -10.589214324951172
    5. '```' → logprob: -11.339214324951172
    6. 'ост' → logprob: -12.464214324951172
    7. 'os' → logprob: -13.089214324951172
    8. ' cost' → logprob: -13.214214324951172
    9. '(cost' → logprob: -13.214214324951172
    10. 'Cost' → logprob: -13.214214324951172

Token 726: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -2.9040898880339228e-05
    2. ',v' → logprob: -10.500028610229492
    3. ' ,' → logprob: -14.375028610229492
    4. ',
' → logprob: -15.125028610229492
    5. '                           ' → logprob: -15.125028610229492
    6. '`,' → logprob: -16.375028610229492
    7. '                               ' → logprob: -17.250028610229492
    8. '           ' → logprob: -17.625028610229492
    9. 'v' → logprob: -17.750028610229492
    10. '(v' → logprob: -17.750028610229492

Token 727: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.002475777640938759
    2. ' v' → logprob: -6.002475738525391
    3. '	v' → logprob: -18.25247573852539
    4. '(v' → logprob: -18.37747573852539
    5. '   ' → logprob: -19.62747573852539
    6. ')v' → logprob: -20.00247573852539
    7. '[v' → logprob: -20.75247573852539
    8. ',v' → logprob: -21.12747573852539
    9. ' ' → logprob: -21.37747573852539
    10. '    ' → logprob: -21.50247573852539

Token 728: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -1.688212614681106e-05
    2. 'v' → logprob: -11.250017166137695
    3. ',' → logprob: -13.375017166137695
    4. ',v' → logprob: -14.500017166137695
    5. '[v' → logprob: -14.875017166137695
    6. '```' → logprob: -14.875017166137695
    7. '[' → logprob: -15.000017166137695
    8. 'u' → logprob: -15.375017166137695
    9. ' ' → logprob: -15.750017166137695
    10. '[u' → logprob: -16.000017166137695

Token 729: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -1.735893965815194e-05
    2. ' ,' → logprob: -11.000017166137695
    3. '0' → logprob: -16.000017166137695
    4. ',
' → logprob: -16.250017166137695
    5. '                           ' → logprob: -16.375017166137695
    6. '1' → logprob: -16.750017166137695
    7. '`,' → logprob: -17.125017166137695
    8. '```' → logprob: -17.125017166137695
    9. '                               ' → logprob: -17.875017166137695
    10. '‌,' → logprob: -18.875017166137695

Token 730: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -9.088346359931165e-07
    2. ' ' → logprob: -14.000000953674316
    3. '   ' → logprob: -17.25
    4. '```' → logprob: -19.625
    5. '                   ' → logprob: -20.25
    6. '                           ' → logprob: -20.5
    7. '  ' → logprob: -20.5
    8. '                       ' → logprob: -20.875
    9. '           ' → logprob: -21.0
    10. '       ' → logprob: -21.75

Token 731: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: 0.0
    2. ' ' → logprob: -16.875
    3. '   ' → logprob: -19.375
    4. '```' → logprob: -20.25
    5. '
' → logprob: -22.3125
    6. '۱' → logprob: -22.4375
    7. '                   ' → logprob: -22.6875
    8. '                           ' → logprob: -22.75
    9. '           ' → logprob: -22.9375
    10. '  ' → logprob: -23.0

Token 732: '))

' (ID: 9746)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0002980432182084769
    2. '))
' → logprob: -8.125298500061035
    3. '                       ' → logprob: -14.375298500061035
    4. '                           ' → logprob: -14.625298500061035
    5. '           ' → logprob: -15.250298500061035
    6. ' ))' → logprob: -15.500298500061035
    7. '                   ' → logprob: -16.12529754638672
    8. '               ' → logprob: -16.37529754638672
    9. ')))' → logprob: -16.37529754638672
    10. '))
' → logprob: -16.50029754638672

Token 733: 'solve' (ID: 117273)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 734: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0021236150059849024
    2. '(' → logprob: -6.252123832702637
    3. '()
' → logprob: -9.377123832702637
    4. '```' → logprob: -10.502123832702637
    5. '<|end|>' → logprob: -11.127123832702637
    6. '()\' → logprob: -11.252123832702637
    7. '();' → logprob: -11.502123832702637
    8. '()`' → logprob: -11.627123832702637
    9. '#' → logprob: -11.877123832702637
    10. '()<' → logprob: -12.377123832702637


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 732
Tokens correctement prédits (1ère position, stricte): 256
Tokens correctement prédits (1ère position, avec adaptation): 268
Tokens correctement prédits (top 10): 501
Précision stricte (1ère position): 34.97%
Précision adaptée (1ère position): 36.61%
Précision (top 10): 68.44%
================================================================================
