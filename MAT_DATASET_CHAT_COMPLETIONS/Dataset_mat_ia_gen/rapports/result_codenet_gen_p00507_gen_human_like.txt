================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:24:38
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
a = [input().strip() for _ in range(n)]

perms = []
for i in range(n):
    for j in range(n):
        if i != j:
            perms.append(a[i] + a[j])

perms.sort()
print(perms[2])
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00042768914136104286
    2. ''' → logprob: -8.62542724609375
    3. '('' → logprob: -9.37542724609375
    4. '(n' → logprob: -9.87542724609375
    5. '```' → logprob: -10.37542724609375
    6. '`' → logprob: -10.75042724609375
    7. '("("' → logprob: -11.12542724609375
    8. '(
' → logprob: -11.12542724609375
    9. ')' → logprob: -11.75042724609375
    10. '()' → logprob: -12.25042724609375

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.72179114818573
    2. ')' → logprob: -0.72179114818573
    3. '()' → logprob: -3.8467912673950195
    4. '())' → logprob: -5.2217912673950195
    5. '(
' → logprob: -8.09679126739502
    6. '```' → logprob: -8.59679126739502
    7. '(()' → logprob: -9.34679126739502
    8. '[' → logprob: -9.34679126739502
    9. '))' → logprob: -9.34679126739502
    10. '")' → logprob: -9.47179126739502

Token 5: 'a' (ID: 64)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.22954261302947998
    2. 'if' → logprob: -1.85454261302948
    3. 'i' → logprob: -3.9795427322387695
    4. 's' → logprob: -4.1045427322387695
    5. 'f' → logprob: -5.7295427322387695
    6. ' for' → logprob: -6.4795427322387695
    7. 'x' → logprob: -6.4795427322387695
    8. 'sum' → logprob: -6.4795427322387695
    9. 'a' → logprob: -6.7295427322387695
    10. 'result' → logprob: -7.4795427322387695

Token 6: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.01236683875322342
    2. '[i' → logprob: -6.012366771697998
    3. ' =' → logprob: -6.262366771697998
    4. '[a' → logprob: -6.637366771697998
    5. '.' → logprob: -6.887366771697998
    6. '=' → logprob: -7.137366771697998
    7. 'a' → logprob: -7.387366771697998
    8. 'r' → logprob: -7.387366771697998
    9. '[:]' → logprob: -7.387366771697998
    10. 'pp' → logprob: -7.637366771697998

Token 7: ' [' (ID: 723)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.7055346965789795
    2. '[]' → logprob: -1.2055346965789795
    3. 'list' → logprob: -2.4555346965789795
    4. ' list' → logprob: -2.5805346965789795
    5. ' [' → logprob: -3.7055346965789795
    6. 'input' → logprob: -5.205534934997559
    7. '[' → logprob: -5.455534934997559
    8. '[input' → logprob: -5.830534934997559
    9. ' input' → logprob: -6.205534934997559
    10. '0' → logprob: -6.205534934997559

Token 8: 'input' (ID: 2586)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.31700462102890015
    2. '0' → logprob: -1.317004680633545
    3. 'i' → logprob: -6.692004680633545
    4. ']' → logprob: -6.692004680633545
    5. ']int' → logprob: -7.317004680633545
    6. '(int' → logprob: -8.317004203796387
    7. ')' → logprob: -8.567004203796387
    8. ' int' → logprob: -9.442004203796387
    9. 'input' → logprob: -10.192004203796387
    10. '[int' → logprob: -11.567004203796387

Token 9: '().' (ID: 1454)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.010337218642234802
    2. '()' → logprob: -4.7603373527526855
    3. '())' → logprob: -6.3853373527526855
    4. '(' → logprob: -10.760336875915527
    5. ']()' → logprob: -12.510336875915527
    6. '().' → logprob: -12.635336875915527
    7. '(),' → logprob: -13.885336875915527
    8. '()}' → logprob: -13.885336875915527
    9. '()],' → logprob: -14.385336875915527
    10. '()].' → logprob: -14.510336875915527

Token 10: 'strip' (ID: 23905)
  Prédit: 'strip'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.48099613189697266
    2. 'split' → logprob: -0.9809961318969727
    3. 'rstrip' → logprob: -4.980996131896973
    4. 'append' → logprob: -10.855996131896973
    5. 'read' → logprob: -12.480996131896973
    6. ' split' → logprob: -13.855996131896973
    7. 'r' → logprob: -14.230996131896973
    8. ' strip' → logprob: -14.230996131896973
    9. 'isdigit' → logprob: -14.355996131896973
    10. 'lower' → logprob: -14.855996131896973

Token 11: '()' (ID: 416)
  Prédit: '()]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()]' → logprob: -0.40315505862236023
    2. '()' → logprob: -1.4031550884246826
    3. '())' → logprob: -2.6531550884246826
    4. '(' → logprob: -4.7781548500061035
    5. '('' → logprob: -5.0281548500061035
    6. ')]' → logprob: -8.903155326843262
    7. ')' → logprob: -9.403155326843262
    8. '`()' → logprob: -10.153155326843262
    9. ']()' → logprob: -10.403155326843262
    10. '()]
' → logprob: -10.653155326843262

Token 12: ' for' (ID: 395)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.9451336860656738
    2. ')' → logprob: -1.1951336860656738
    3. ']' → logprob: -1.3201336860656738
    4. '()]' → logprob: -3.445133686065674
    5. '']' → logprob: -5.570133686065674
    6. '())' → logprob: -6.445133686065674
    7. '`]' → logprob: -6.820133686065674
    8. '()' → logprob: -7.195133686065674
    9. '])' → logprob: -7.695133686065674
    10. '')]' → logprob: -7.695133686065674

Token 13: ' _' (ID: 1175)
  Prédit: ' range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.01991770789027214
    2. '_' → logprob: -4.7699174880981445
    3. ' ' → logprob: -4.8949174880981445
    4. ' _' → logprob: -6.2699174880981445
    5. 'range' → logprob: -6.6449174880981445
    6. ' i' → logprob: -8.144917488098145
    7. '_range' → logprob: -8.894917488098145
    8. '(range' → logprob: -9.894917488098145
    9. '	range' → logprob: -10.019917488098145
    10. ' xrange' → logprob: -11.144917488098145

Token 14: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0029975546058267355
    2. 'in' → logprob: -6.002997398376465
    3. 'range' → logprob: -8.127997398376465
    4. ' range' → logprob: -8.752997398376465
    5. ' ' → logprob: -10.252997398376465
    6. ' i' → logprob: -11.002997398376465
    7. 'i' → logprob: -12.877997398376465
    8. '```' → logprob: -13.377997398376465
    9. '<|end|>' → logprob: -13.502997398376465
    10. 's' → logprob: -13.627997398376465

Token 15: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.4740781784057617
    2. ' range' → logprob: -0.9740781784057617
    3. '(range' → logprob: -14.599078178405762
    4. '	range' → logprob: -14.974078178405762
    5. '_range' → logprob: -15.849078178405762
    6. ' ' → logprob: -16.974079132080078
    7. ' ran' → logprob: -17.099079132080078
    8. ' xrange' → logprob: -17.349079132080078
    9. '```' → logprob: -17.474079132080078
    10. '[' → logprob: -17.724079132080078

Token 16: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.12745852768421173
    2. '(' → logprob: -2.1274585723876953
    3. '(len' → logprob: -7.627458572387695
    4. ' (' → logprob: -10.502458572387695
    5. '(range' → logprob: -12.252458572387695
    6. '(N' → logprob: -13.127458572387695
    7. '(num' → logprob: -13.377458572387695
    8. '(a' → logprob: -13.627458572387695
    9. '(
' → logprob: -13.627458572387695
    10. 'n' → logprob: -13.877458572387695

Token 17: ')]

' (ID: 56882)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.001178916310891509
    2. ')' → logprob: -6.876178741455078
    3. ']' → logprob: -9.126178741455078
    4. ')])' → logprob: -10.626178741455078
    5. '])]' → logprob: -11.876178741455078
    6. '')]' → logprob: -13.126178741455078
    7. '])' → logprob: -13.501178741455078
    8. ' )' → logprob: -14.126178741455078
    9. '）' → logprob: -14.626178741455078
    10. ')]
' → logprob: -14.626178741455078

Token 18: 'per' (ID: 543)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']' → logprob: -1.4632337093353271
    2. 'a' → logprob: -1.7132337093353271
    3. '.' → logprob: -2.088233709335327
    4. '[' → logprob: -2.213233709335327
    5. ')' → logprob: -2.338233709335327
    6. 's' → logprob: -2.713233709335327
    7. 'd' → logprob: -3.213233709335327
    8. 'b' → logprob: -3.588233709335327
    9. 'm' → logprob: -4.088233947753906
    10. 'c' → logprob: -4.088233947753906

Token 19: 'ms' (ID: 1782)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'm' → logprob: -0.17834678292274475
    2. 's' → logprob: -2.053346872329712
    3. 't' → logprob: -4.803346633911133
    4. 'mut' → logprob: -4.803346633911133
    5. 'f' → logprob: -5.053346633911133
    6. 'mutation' → logprob: -6.303346633911133
    7. '_' → logprob: -6.428346633911133
    8. 'mu' → logprob: -6.553346633911133
    9. 'u' → logprob: -6.678346633911133
    10. '.' → logprob: -6.678346633911133

Token 20: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -1.0862610340118408
    2. 'utations' → logprob: -1.2112610340118408
    3. '(' → logprob: -1.7112610340118408
    4. '.' → logprob: -2.836261034011841
    5. 's' → logprob: -3.336261034011841
    6. 'utation' → logprob: -3.586261034011841
    7. '_' → logprob: -4.086260795593262
    8. 'u' → logprob: -4.586260795593262
    9. '=' → logprob: -4.836260795593262
    10. ')' → logprob: -4.961260795593262

Token 21: ' []
' (ID: 8911)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.01612551510334015
    2. '[' → logprob: -5.391125679016113
    3. '[a' → logprob: -6.141125679016113
    4. 'list' → logprob: -6.391125679016113
    5. 'set' → logprob: -6.391125679016113
    6. '[list' → logprob: -6.391125679016113
    7. ' []' → logprob: -6.641125679016113
    8. 'it' → logprob: -7.516125679016113
    9. ' permutations' → logprob: -7.516125679016113
    10. 'sorted' → logprob: -7.641125679016113

Token 22: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.022628454491496086
    2. '(' → logprob: -4.647628307342529
    3. '[' → logprob: -6.022628307342529
    4. 'f' → logprob: -6.272628307342529
    5. ' for' → logprob: -6.397628307342529
    6. 'import' → logprob: -6.397628307342529
    7. '.' → logprob: -6.397628307342529
    8. 'from' → logprob: -6.772628307342529
    9. '_' → logprob: -6.897628307342529
    10. 'def' → logprob: -7.647628307342529

Token 23: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.30303001403808594
    2. ' ' → logprob: -1.803030014038086
    3. ' _' → logprob: -2.553030014038086
    4. '_' → logprob: -4.053030014038086
    5. 'i' → logprob: -7.053030014038086
    6. '  ' → logprob: -8.678030014038086
    7. ' ' → logprob: -8.928030014038086
    8. ' item' → logprob: -9.553030014038086
    9. ' x' → logprob: -9.928030014038086
    10. ' ‌' → logprob: -10.553030014038086

Token 24: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.40345245599746704
    2. 'n' → logprob: -1.4034523963928223
    3. 'in' → logprob: -2.5284523963928223
    4. ' ' → logprob: -5.403452396392822
    5. ' n' → logprob: -6.403452396392822
    6. '  ' → logprob: -9.77845287322998
    7. 's' → logprob: -9.90345287322998
    8. '	in' → logprob: -10.15345287322998
    9. '_' → logprob: -10.27845287322998
    10. ' i' → logprob: -10.65345287322998

Token 25: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.06223006546497345
    2. 'range' → logprob: -2.812230110168457
    3. 'a' → logprob: -8.687230110168457
    4. ' a' → logprob: -9.312230110168457
    5. '	range' → logprob: -13.437230110168457
    6. '(range' → logprob: -14.687230110168457
    7. ' xrange' → logprob: -15.312230110168457
    8. ' ra' → logprob: -15.562230110168457
    9. 'r' → logprob: -15.562230110168457
    10. '_range' → logprob: -15.687230110168457

Token 26: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5760799646377563
    2. '(n' → logprob: -0.8260799646377563
    3. ' (' → logprob: -9.076080322265625
    4. '(len' → logprob: -11.451080322265625
    5. ' n' → logprob: -12.451080322265625
    6. '(range' → logprob: -12.701080322265625
    7. ' ' → logprob: -12.826080322265625
    8. '()' → logprob: -13.201080322265625
    9. '(
' → logprob: -13.576080322265625
    10. '(space' → logprob: -14.201080322265625

Token 27: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.03145110607147217
    2. ')' → logprob: -3.6564512252807617
    3. '+' → logprob: -5.656451225280762
    4. ' ):' → logprob: -7.281451225280762
    5. '):
' → logprob: -7.656451225280762
    6. '-' → logprob: -7.906451225280762
    7. ' )' → logprob: -10.031451225280762
    8. ' +' → logprob: -11.031451225280762
    9. ':' → logprob: -11.031451225280762
    10. ' -' → logprob: -11.156451225280762

Token 28: '   ' (ID: 271)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.41335704922676086
    2. '   ' → logprob: -1.2883570194244385
    3. 'for' → logprob: -3.2883570194244385
    4. ' ' → logprob: -3.9133570194244385
    5. '	for' → logprob: -6.288357257843018
    6. '    ' → logprob: -6.413357257843018
    7. '<|end|>' → logprob: -6.538357257843018
    8. '   ' → logprob: -9.66335678100586
    9. ' ' → logprob: -9.78835678100586
    10. '  ' → logprob: -9.85085678100586

Token 29: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.049857478588819504
    2. 'for' (adapté à ' for') → logprob: -3.1748573780059814
    3. '   ' → logprob: -5.0498576164245605
    4. ' ' → logprob: -8.799857139587402
    5. '	for' → logprob: -9.549857139587402
    6. '    ' → logprob: -9.799857139587402
    7. ' a' → logprob: -10.049857139587402
    8. ' perm' → logprob: -10.174857139587402
    9. ' if' → logprob: -11.299857139587402
    10. ' range' → logprob: -11.549857139587402

Token 30: ' j' (ID: 441)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.21758292615413666
    2. ' j' → logprob: -2.467582941055298
    3. 'n' → logprob: -2.717582941055298
    4. ' range' → logprob: -3.467582941055298
    5. 'j' → logprob: -4.592582702636719
    6. 'range' → logprob: -5.842582702636719
    7. ' ' → logprob: -8.717582702636719
    8. ' i' → logprob: -9.467582702636719
    9. '(n' → logprob: -9.592582702636719
    10. '   ' → logprob: -10.342582702636719

Token 31: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.038413241505622864
    2. 'in' → logprob: -3.2884132862091064
    3. ' ' → logprob: -8.038413047790527
    4. ' range' → logprob: -11.538413047790527
    5. '	in' → logprob: -11.663413047790527
    6. 'range' → logprob: -12.038413047790527
    7. '   ' → logprob: -12.538413047790527
    8. '(' → logprob: -12.538413047790527
    9. ' i' → logprob: -12.538413047790527
    10. '    ' → logprob: -12.663413047790527

Token 32: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.3514212965965271
    2. ' range' → logprob: -1.2264213562011719
    3. '(range' → logprob: -5.851421356201172
    4. '(i' → logprob: -10.476421356201172
    5. '(n' → logprob: -10.601421356201172
    6. 'i' → logprob: -11.601421356201172
    7. '   ' → logprob: -11.726421356201172
    8. 'n' → logprob: -11.726421356201172
    9. ' i' → logprob: -12.351421356201172
    10. '	range' → logprob: -12.726421356201172

Token 33: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.003502669045701623
    2. '(i' → logprob: -6.25350284576416
    3. '(' → logprob: -6.50350284576416
    4. '(range' → logprob: -9.62850284576416
    5. '(j' → logprob: -12.87850284576416
    6. ' (' → logprob: -13.25350284576416
    7. '(s' → logprob: -13.37850284576416
    8. ' range' → logprob: -14.12850284576416
    9. 'range' → logprob: -14.37850284576416
    10. ')' → logprob: -14.62850284576416

Token 34: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0015304554253816605
    2. '):
' → logprob: -7.001530647277832
    3. ')' → logprob: -7.626530647277832
    4. ':' → logprob: -10.001530647277832
    5. ' ):' → logprob: -10.126530647277832
    6. '+' → logprob: -10.626530647277832
    7. 'if' → logprob: -12.001530647277832
    8. '   ' → logprob: -13.001530647277832
    9. ',' → logprob: -13.251530647277832
    10. '-' → logprob: -13.751530647277832

Token 35: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.15573160350322723
    2. '    ' → logprob: -2.405731678009033
    3. '   ' → logprob: -3.530731678009033
    4. ' if' → logprob: -4.530731678009033
    5. ' ' → logprob: -4.905731678009033
    6. 'if' → logprob: -6.405731678009033
    7. '[' → logprob: -6.405731678009033
    8. '        ' → logprob: -6.780731678009033
    9. '<|end|>' → logprob: -7.655731678009033
    10. ',' → logprob: -8.405731201171875

Token 36: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.48709651827812195
    2. 'if' (adapté à ' if') → logprob: -1.3620965480804443
    3. '       ' → logprob: -3.2370965480804443
    4. 'per' → logprob: -3.4870965480804443
    5. '   ' → logprob: -3.8620965480804443
    6. '    ' → logprob: -4.237096309661865
    7. '[' → logprob: -5.362096309661865
    8. '           ' → logprob: -5.362096309661865
    9. ' for' → logprob: -5.612096309661865
    10. ' perms' → logprob: -5.987096309661865

Token 37: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.17133298516273499
    2. 'i' → logprob: -2.046333074569702
    3. ' a' → logprob: -4.046332836151123
    4. 'a' → logprob: -4.546332836151123
    5. ' j' → logprob: -10.296333312988281
    6. '(i' → logprob: -10.671333312988281
    7. ' abs' → logprob: -10.671333312988281
    8. ' ' → logprob: -10.796333312988281
    9. 'abs' → logprob: -11.046333312988281
    10. 'j' → logprob: -11.171333312988281

Token 38: ' !=' (ID: 1666)
  Prédit: ' !='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' !=' → logprob: -0.05821730196475983
    2. '!=' → logprob: -2.9332172870635986
    3. ' ==' → logprob: -6.308217525482178
    4. ' <' → logprob: -7.433217525482178
    5. '==' → logprob: -7.933217525482178
    6. ' >' → logprob: -8.43321704864502
    7. '<' → logprob: -9.55821704864502
    8. '=' → logprob: -9.68321704864502
    9. '>' → logprob: -9.68321704864502
    10. ')' → logprob: -10.30821704864502

Token 39: ' j' (ID: 441)
  Prédit: 'j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.03804229199886322
    2. ' j' → logprob: -3.2880423069000244
    3. ' ' → logprob: -14.413042068481445
    4. '	j' → logprob: -15.413042068481445
    5. '<|end|>' → logprob: -17.788042068481445
    6. '$j' → logprob: -18.788042068481445
    7. '_j' → logprob: -18.913042068481445
    8. '=j' → logprob: -19.288042068481445
    9. ':j' → logprob: -19.413042068481445
    10. ' ' → logprob: -19.413042068481445

Token 40: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.13087524473667145
    2. ' and' → logprob: -2.1308753490448
    3. '           ' → logprob: -5.880875110626221
    4. 'and' → logprob: -8.005875587463379
    5. ' :' → logprob: -8.130875587463379
    6. ':
' → logprob: -8.255875587463379
    7. '):' → logprob: -8.880875587463379
    8. ')' → logprob: -9.880875587463379
    9. '       ' → logprob: -11.005875587463379
    10. '   ' → logprob: -11.255875587463379

Token 41: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.03204156085848808
    2. ':' → logprob: -3.532041549682617
    3. ' and' → logprob: -7.032041549682617
    4. ':
' → logprob: -7.907041549682617
    5. 'per' → logprob: -8.532041549682617
    6. '            
' → logprob: -8.657041549682617
    7. '               ' → logprob: -8.657041549682617
    8. ' :' → logprob: -9.032041549682617
    9. ',' → logprob: -9.907041549682617
    10. '          ' → logprob: -10.282041549682617

Token 42: ' perms' (ID: 189933)
  Prédit: ' perms'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' perms' → logprob: -0.4658234119415283
    2. 'per' → logprob: -1.3408234119415283
    3. '           ' → logprob: -2.4658234119415283
    4. '               ' → logprob: -3.8408234119415283
    5. ' per' → logprob: -6.465823173522949
    6. ' perm' → logprob: -6.965823173522949
    7. '	per' → logprob: -7.840823173522949
    8. 'perm' → logprob: -7.840823173522949
    9. '_per' → logprob: -8.59082317352295
    10. '            
' → logprob: -9.21582317352295

Token 43: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.012858296744525433
    2. '.' → logprob: -4.3878583908081055
    3. '.extend' → logprob: -8.512858390808105
    4. ' .' → logprob: -9.137858390808105
    5. 'append' → logprob: -11.012858390808105
    6. '_append' → logprob: -12.137858390808105
    7. '.app' → logprob: -12.262858390808105
    8. ').' → logprob: -12.387858390808105
    9. '.push' → logprob: -13.387858390808105
    10. '.p' → logprob: -13.762858390808105

Token 44: '(a' (ID: 6271)
  Prédit: '(('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '((' → logprob: -0.5567134618759155
    2. '(a' → logprob: -0.9317134618759155
    3. '(' → logprob: -3.431713581085205
    4. '(f' → logprob: -7.431713581085205
    5. '([' → logprob: -10.181713104248047
    6. '(tuple' → logprob: -11.056713104248047
    7. '(sorted' → logprob: -11.056713104248047
    8. ' (' → logprob: -11.806713104248047
    9. '(A' → logprob: -12.431713104248047
    10. '("("' → logprob: -12.431713104248047

Token 45: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.00011677479778882116
    2. '[j' → logprob: -9.375116348266602
    3. '[' → logprob: -10.500116348266602
    4. 'i' → logprob: -14.000116348266602
    5. '[a' → logprob: -14.250116348266602
    6. '[I' → logprob: -14.625116348266602
    7. '```' → logprob: -14.875116348266602
    8. ')' → logprob: -15.500116348266602
    9. '[f' → logprob: -15.500116348266602
    10. ' [' → logprob: -15.500116348266602

Token 46: ']' (ID: 60)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.05092921480536461
    2. ']' → logprob: -3.675929307937622
    3. ' +' → logprob: -3.925929307937622
    4. ']+' → logprob: -5.800929069519043
    5. ')' → logprob: -7.425929069519043
    6. '+j' → logprob: -7.425929069519043
    7. '+]' → logprob: -9.550929069519043
    8. ')+' → logprob: -10.175929069519043
    9. ' ]' → logprob: -10.425929069519043
    10. ',' → logprob: -10.550929069519043

Token 47: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.1431056410074234
    2. ' +' → logprob: -2.0181057453155518
    3. '+j' → logprob: -8.018105506896973
    4. ')' → logprob: -10.643105506896973
    5. '[' → logprob: -11.268105506896973
    6. '+a' → logprob: -11.268105506896973
    7. '+i' → logprob: -11.518105506896973
    8. '+
' → logprob: -12.143105506896973
    9. '+)' → logprob: -12.393105506896973
    10. '+'' → logprob: -12.768105506896973

Token 48: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.04733224958181381
    2. ' a' → logprob: -3.297332286834717
    3. '"' → logprob: -4.922332286834717
    4. ''' → logprob: -6.797332286834717
    5. '"a' → logprob: -8.297331809997559
    6. ' ' → logprob: -8.547331809997559
    7. ''a' → logprob: -8.547331809997559
    8. ' "' → logprob: -9.047331809997559
    9. ' '' → logprob: -10.047331809997559
    10. '   ' → logprob: -12.172331809997559

Token 49: '[j' (ID: 7895)
  Prédit: '[j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[j' → logprob: -7.941850526549388e-06
    2. '[' → logprob: -12.500007629394531
    3. '][' → logprob: -13.750007629394531
    4. '[a' → logprob: -14.000007629394531
    5. '[i' → logprob: -14.375007629394531
    6. ''[' → logprob: -14.750007629394531
    7. '```' → logprob: -14.750007629394531
    8. ' [' → logprob: -15.250007629394531
    9. '[js' → logprob: -15.750007629394531
    10. '[J' → logprob: -16.37500762939453

Token 50: '])

' (ID: 21045)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.39074134826660156
    2. '])' → logprob: -1.1407413482666016
    3. ''])' → logprob: -6.265741348266602
    4. '))' → logprob: -7.140741348266602
    5. ']' → logprob: -7.390741348266602
    6. ')])' → logprob: -7.890741348266602
    7. '"])' → logprob: -9.890741348266602
    8. '')' → logprob: -10.015741348266602
    9. '`)' → logprob: -10.890741348266602
    10. ')
' → logprob: -11.140741348266602

Token 51: 'per' (ID: 543)
  Prédit: 'per'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'per' → logprob: -1.1668156385421753
    2. 'print' → logprob: -1.1668156385421753
    3. 'for' → logprob: -1.5418156385421753
    4. 'max' → logprob: -2.166815757751465
    5. '.' → logprob: -4.666815757751465
    6. 'p' → logprob: -4.791815757751465
    7. '\n' → logprob: -5.541815757751465
    8. 'ans' → logprob: -5.916815757751465
    9. 'result' → logprob: -6.041815757751465
    10. 'answer' → logprob: -6.291815757751465

Token 52: 'ms' (ID: 1782)
  Prédit: 'ms'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ms' → logprob: -0.0006721630343236029
    2. 's' → logprob: -7.500672340393066
    3. 'm' → logprob: -9.500672340393066
    4. 'ps' → logprob: -11.250672340393066
    5. '```' → logprob: -11.375672340393066
    6. 'fs' → logprob: -12.500672340393066
    7. 'ts' → logprob: -12.750672340393066
    8. '[' → logprob: -13.250672340393066
    9. 'ns' → logprob: -13.625672340393066
    10. 'mut' → logprob: -14.000672340393066

Token 53: '.sort' (ID: 19551)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 54: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.1004507914185524
    2. '(' → logprob: -2.3504507541656494
    3. '(()' → logprob: -9.22545051574707
    4. '('' → logprob: -9.97545051574707
    5. '("("' → logprob: -10.97545051574707
    6. '((' → logprob: -11.10045051574707
    7. '(`' → logprob: -11.85045051574707
    8. '(reverse' → logprob: -11.97545051574707
    9. '()`' → logprob: -11.97545051574707
    10. '().' → logprob: -12.22545051574707

Token 55: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0020285656210035086
    2. 'if' → logprob: -6.252028465270996
    3. 'for' → logprob: -9.377028465270996
    4. '```' → logprob: -11.877028465270996
    5. '
' → logprob: -13.502028465270996
    6. '#print' → logprob: -13.627028465270996
    7. 'prin' → logprob: -13.752028465270996
    8. '[' → logprob: -14.002028465270996
    9. 'pr' → logprob: -14.377028465270996
    10. '[
' → logprob: -14.377028465270996

Token 56: '(per' (ID: 96497)
  Prédit: '(per'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(per' → logprob: -0.20328541100025177
    2. '(' → logprob: -1.7032854557037354
    3. '('' → logprob: -6.828285217285156
    4. '("("' → logprob: -7.203285217285156
    5. '()' → logprob: -10.828285217285156
    6. '(paren' → logprob: -11.953285217285156
    7. 'per' → logprob: -12.078285217285156
    8. '(len' → logprob: -12.828285217285156
    9. '("' → logprob: -13.078285217285156
    10. '((' → logprob: -13.953285217285156

Token 57: 'ms' (ID: 1782)
  Prédit: 'ms'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ms' → logprob: -3.650518920039758e-06
    2. 'm' → logprob: -12.750003814697266
    3. 's' → logprob: -15.125003814697266
    4. '(ms' → logprob: -15.750003814697266
    5. 'ps' → logprob: -16.875003814697266
    6. ' ms' → logprob: -17.625003814697266
    7. '(' → logprob: -17.750003814697266
    8. ')' → logprob: -17.875003814697266
    9. '	ms' → logprob: -18.000003814697266
    10. 'MS' → logprob: -18.375003814697266

Token 58: '[' (ID: 58)
  Prédit: '['
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.012579113245010376
    2. ')' → logprob: -4.387578964233398
    3. '[-' → logprob: -9.637578964233398
    4. '0' → logprob: -13.512578964233398
    5. ']' → logprob: -13.637578964233398
    6. '])' → logprob: -14.137578964233398
    7. '))' → logprob: -15.762578964233398
    8. '[])' → logprob: -15.762578964233398
    9. '   ' → logprob: -16.2625789642334
    10. '[]' → logprob: -16.6375789642334

Token 59: '2' (ID: 17)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -1.8908587662735954e-05
    2. ' ' → logprob: -11.750019073486328
    3. '1' → logprob: -12.312519073486328
    4. '[' → logprob: -12.750019073486328
    5. '-' → logprob: -14.937519073486328
    6. '۰' → logprob: -15.125019073486328
    7. '00' → logprob: -15.187519073486328
    8. '2' → logprob: -15.437519073486328
    9. '(' → logprob: -15.750019073486328
    10. '```' → logprob: -16.000019073486328

Token 60: '])' (ID: 4636)
  Prédit: '])'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '])' → logprob: -0.00020747410599142313
    2. ']' → logprob: -9.125207901000977
    3. ')' → logprob: -9.250207901000977
    4. ' ])' → logprob: -14.125207901000977
    5. '])
' → logprob: -14.625207901000977
    6. '))' → logprob: -15.125207901000977
    7. ')])' → logprob: -15.375207901000977
    8. ']))' → logprob: -15.750207901000977
    9. ''])' → logprob: -16.000207901000977
    10. ']])' → logprob: -16.000207901000977


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 58
Tokens correctement prédits (1ère position, stricte): 26
Tokens correctement prédits (1ère position, avec adaptation): 26
Tokens correctement prédits (top 10): 47
Précision stricte (1ère position): 44.83%
Précision adaptée (1ère position): 44.83%
Précision (top 10): 81.03%
================================================================================
