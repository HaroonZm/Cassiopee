================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 19:58:01
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
def solve():
    import sys
    for line in sys.stdin:
        n = int(line)
        if n == 0:
            break
        expected = 0.0
        p = 1.0
        for _ in range(n):
            expected += p
            p /= 2
        print(expected)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'def' (ID: 1314)
  → Token d'amorce (pas de prédiction)

Token 1: ' solve' (ID: 17722)
  → Token d'amorce (pas de prédiction)

Token 2: '():
' (ID: 8595)
  → Token d'amorce (pas de prédiction)

Token 3: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8985703587532043
    2. '\' → logprob: -1.2735702991485596
    3. '\n' → logprob: -1.6485702991485596
    4. '```' → logprob: -2.6485702991485596
    5. '    
' → logprob: -3.7735702991485596
    6. ' 
' → logprob: -5.148570537567139
    7. '
' → logprob: -5.148570537567139
    8. ':' → logprob: -6.023570537567139
    9. '    ' → logprob: -6.523570537567139
    10. ' ' → logprob: -6.898570537567139

Token 4: ' import' (ID: 1588)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -1.470988392829895
    2. '\n' → logprob: -1.595988392829895
    3. 'x' → logprob: -2.0959882736206055
    4. '   ' → logprob: -2.0959882736206055
    5. '\' → logprob: -2.4709882736206055
    6. 'a' → logprob: -2.5959882736206055
    7. 'i' → logprob: -3.3459882736206055
    8. '```' → logprob: -3.5959882736206055
    9. ' ' → logprob: -4.2209882736206055
    10. '#' → logprob: -4.3459882736206055

Token 5: ' sys' (ID: 12228)
  Prédit: ' sys'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sys' → logprob: -0.049185849726200104
    2. ' math' → logprob: -3.0491857528686523
    3. ' os' → logprob: -8.424185752868652
    4. ' ' → logprob: -9.424185752868652
    5. 'sys' → logprob: -9.424185752868652
    6. ' numpy' → logprob: -9.424185752868652
    7. ' itertools' → logprob: -9.424185752868652
    8. '=sys' → logprob: -11.424185752868652
    9. ' sym' → logprob: -11.549185752868652
    10. ' collections' → logprob: -11.549185752868652

Token 6: '
' (ID: 198)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.8662297129631042
    2. '\' → logprob: -1.366229772567749
    3. '.readline' → logprob: -1.741229772567749
    4. '```' → logprob: -3.241229772567749
    5. '   ' → logprob: -3.491229772567749
    6. '.' → logprob: -3.866229772567749
    7. 'newline' → logprob: -4.11622953414917
    8. '.stdin' → logprob: -4.36622953414917
    9. '.stdout' → logprob: -4.49122953414917
    10. '
' → logprob: -6.11622953414917

Token 7: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7748956084251404
    2. '\n' → logprob: -1.5248956680297852
    3. '.readline' → logprob: -2.649895668029785
    4. 'newline' → logprob: -2.649895668029785
    5. '\' → logprob: -3.399895668029785
    6. '
' → logprob: -3.524895668029785
    7. '.' → logprob: -3.774895668029785
    8. 'input' → logprob: -4.024895668029785
    9. '```' → logprob: -4.274895668029785
    10. '    
' → logprob: -4.399895668029785

Token 8: ' for' (ID: 395)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8660857677459717
    2. '\n' → logprob: -1.7410857677459717
    3. 'newline' → logprob: -1.9910857677459717
    4. '.readline' → logprob: -2.7410857677459717
    5. 'input' → logprob: -3.3660857677459717
    6. '.' → logprob: -3.6160857677459717
    7. '```' → logprob: -3.8660857677459717
    8. '\' → logprob: -4.116086006164551
    9. '    ' → logprob: -4.241086006164551
    10. '       ' → logprob: -4.366086006164551

Token 9: ' line' (ID: 2543)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.0012324919225648046
    2. ' line' → logprob: -7.376232624053955
    3. '  ' → logprob: -8.001232147216797
    4. ' i' → logprob: -8.626232147216797
    5. ' ' → logprob: -10.251232147216797
    6. '_' → logprob: -11.126232147216797
    7. ' t' → logprob: -12.001232147216797
    8. ' ▁' → logprob: -12.626232147216797
    9. ' item' → logprob: -12.751232147216797
    10. ' token' → logprob: -12.876232147216797

Token 10: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.010457201860845089
    2. 'in' → logprob: -4.6354570388793945
    3. '<|end|>' → logprob: -8.385457038879395
    4. '(' → logprob: -9.635457038879395
    5. '```' → logprob: -10.135457038879395
    6. '<|end|>' → logprob: -10.260457038879395
    7. ' =' → logprob: -10.260457038879395
    8. ',' → logprob: -10.260457038879395
    9. '    ' → logprob: -10.510457038879395
    10. '   ' → logprob: -10.510457038879395

Token 11: ' sys' (ID: 12228)
  Prédit: ' sys'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sys' → logprob: -0.22547456622123718
    2. 'sys' → logprob: -1.6004745960235596
    3. '(sys' → logprob: -10.47547435760498
    4. '=sys' → logprob: -10.60047435760498
    5. '	sys' → logprob: -12.72547435760498
    6. 'stdin' → logprob: -12.97547435760498
    7. 's' → logprob: -13.47547435760498
    8. '_sys' → logprob: -14.97547435760498
    9. ' system' → logprob: -14.97547435760498
    10. ' iter' → logprob: -15.10047435760498

Token 12: '.stdin' (ID: 93480)
  Prédit: '.stdin'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.stdin' → logprob: -0.009635667316615582
    2. '.' → logprob: -4.8846354484558105
    3. '.stdout' → logprob: -6.6346354484558105
    4. '.argv' → logprob: -8.009635925292969
    5. '.readline' → logprob: -8.509635925292969
    6. '.std' → logprob: -9.259635925292969
    7. ' .' → logprob: -10.009635925292969
    8. '.stderr' → logprob: -10.759635925292969
    9. '.input' → logprob: -12.134635925292969
    10. '.st' → logprob: -12.884635925292969

Token 13: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0017418164061382413
    2. '.readline' → logprob: -7.251741886138916
    3. ':
' → logprob: -7.876741886138916
    4. '   ' → logprob: -8.376741409301758
    5. ' :' → logprob: -9.251741409301758
    6. '       ' → logprob: -10.001741409301758
    7. '[:]' → logprob: -10.001741409301758
    8. '.' → logprob: -10.126741409301758
    9. '():' → logprob: -10.251741409301758
    10. '):' → logprob: -10.626741409301758

Token 14: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.007612898014485836
    2. '    ' → logprob: -5.007612705230713
    3. '        
' → logprob: -7.632612705230713
    4. '   ' → logprob: -8.507613182067871
    5. '        ' → logprob: -10.132613182067871
    6. ' ' → logprob: -10.632613182067871
    7. '    
' → logprob: -10.882613182067871
    8. '     ' → logprob: -11.007613182067871
    9. '     
' → logprob: -11.132613182067871
    10. '      ' → logprob: -11.132613182067871

Token 15: ' n' (ID: 297)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0655907392501831
    2. '    ' → logprob: -4.190590858459473
    3. '   ' → logprob: -4.315590858459473
    4. ' if' → logprob: -4.440590858459473
    5. '        ' → logprob: -4.565590858459473
    6. '           ' → logprob: -5.315590858459473
    7. ' line' → logprob: -6.315590858459473
    8. ' ' → logprob: -6.565590858459473
    9. ' readline' → logprob: -7.440590858459473
    10. ' print' → logprob: -7.565590858459473

Token 16: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.023374058306217194
    2. '=' → logprob: -4.148374080657959
    3. ' ' → logprob: -5.148374080657959
    4. ',' → logprob: -7.773374080657959
    5. ' ==' → logprob: -8.5233736038208
    6. '  ' → logprob: -8.8983736038208
    7. ')' → logprob: -9.0233736038208
    8. ' ,' → logprob: -9.1483736038208
    9. '.' → logprob: -9.2733736038208
    10. ' +=' → logprob: -9.3983736038208

Token 17: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.012802749872207642
    2. 'int' → logprob: -4.387802600860596
    3. ' line' → logprob: -8.762803077697754
    4. ' len' → logprob: -9.262803077697754
    5. ' ' → logprob: -10.262803077697754
    6. 'line' → logprob: -12.262803077697754
    7. '=int' → logprob: -14.137803077697754
    8. 'len' → logprob: -14.262803077697754
    9. '   ' → logprob: -15.512803077697754
    10. '  ' → logprob: -16.012802124023438

Token 18: '(line' (ID: 18178)
  Prédit: '(line'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(line' → logprob: -0.038047224283218384
    2. '(' → logprob: -3.2880473136901855
    3. '(n' → logprob: -12.288046836853027
    4. '()' → logprob: -15.038046836853027
    5. '=line' → logprob: -15.913046836853027
    6. '[line' → logprob: -16.163047790527344
    7. 'line' → logprob: -16.538047790527344
    8. '('' → logprob: -16.663047790527344
    9. '(len' → logprob: -16.788047790527344
    10. '#line' → logprob: -17.038047790527344

Token 19: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00017946491425391287
    2. '.strip' → logprob: -10.125179290771484
    3. '.readline' → logprob: -10.250179290771484
    4. '   ' → logprob: -10.375179290771484
    5. '[' → logprob: -10.750179290771484
    6. '.rstrip' → logprob: -11.375179290771484
    7. ')`' → logprob: -12.250179290771484
    8. '`)' → logprob: -12.250179290771484
    9. '")' → logprob: -12.625179290771484
    10. '))' → logprob: -12.625179290771484

Token 20: '       ' (ID: 309)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 21: ' if' (ID: 538)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0019584903493523598
    2. '        
' → logprob: -7.62695837020874
    3. '   ' → logprob: -8.376958847045898
    4. '<|end|>' → logprob: -8.501958847045898
    5. '\n' → logprob: -8.626958847045898
    6. ' if' → logprob: -8.626958847045898
    7. '        ' → logprob: -8.876958847045898
    8. '```' → logprob: -9.126958847045898
    9. '    ' → logprob: -9.626958847045898
    10. ' ' → logprob: -9.626958847045898

Token 22: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.0008263026247732341
    2. ' not' → logprob: -7.500826358795166
    3. ' ' → logprob: -8.500825881958008
    4. 'n' → logprob: -9.625825881958008
    5. ' ' → logprob: -12.625825881958008
    6. 'not' → logprob: -15.125825881958008
    7. '<|end|>' → logprob: -16.000825881958008
    8. '(n' → logprob: -16.125825881958008
    9. ' (' → logprob: -16.375825881958008
    10. '	n' → logprob: -16.750825881958008

Token 23: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.3109675645828247
    2. ' >' → logprob: -1.6859675645828247
    3. '>' → logprob: -3.435967445373535
    4. ' <' → logprob: -4.185967445373535
    5. '==' → logprob: -4.310967445373535
    6. ' <=' → logprob: -4.435967445373535
    7. ' %' → logprob: -5.935967445373535
    8. '%' → logprob: -6.060967445373535
    9. ' ' → logprob: -6.810967445373535
    10. '<' → logprob: -7.060967445373535

Token 24: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.0067154900170862675
    2. '0' → logprob: -5.006715297698975
    3. ' ' → logprob: -15.631715774536133
    4. '  ' → logprob: -17.381715774536133
    5. '=' → logprob: -19.069215774536133
    6. '   ' → logprob: -19.194215774536133
    7. '    ' → logprob: -19.756715774536133
    8. '_' → logprob: -19.944215774536133
    9. ' -' → logprob: -20.069215774536133
    10. '1' → logprob: -20.256715774536133

Token 25: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0013260759878903627
    2. ' ' → logprob: -6.626326084136963
    3. '-' → logprob: -15.876325607299805
    4. '1' → logprob: -17.751325607299805
    5. ' -' → logprob: -18.251325607299805
    6. '=' → logprob: -18.376325607299805
    7. '  ' → logprob: -18.501325607299805
    8. '   ' → logprob: -19.251325607299805
    9. '```' → logprob: -19.251325607299805
    10. '42' → logprob: -19.563825607299805

Token 26: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.000786398712079972
    2. '       ' → logprob: -7.500786304473877
    3. ':
' → logprob: -8.750786781311035
    4. '           ' → logprob: -10.375786781311035
    5. ' :' → logprob: -10.500786781311035
    6. '   ' → logprob: -12.375786781311035
    7. ':return' → logprob: -12.375786781311035
    8. '        ' → logprob: -13.000786781311035
    9. '    ' → logprob: -13.125786781311035
    10. ':\' → logprob: -13.625786781311035

Token 27: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.5244967341423035
    2. '       ' → logprob: -0.8994967341423035
    3. ':' → logprob: -7.274496555328369
    4. '        ' → logprob: -8.524497032165527
    5. '   ' → logprob: -8.899497032165527
    6. '          ' → logprob: -9.774497032165527
    7. ' break' → logprob: -9.774497032165527
    8. '<|end|>' → logprob: -10.149497032165527
    9. '	       ' → logprob: -10.524497032165527
    10. '         ' → logprob: -10.524497032165527

Token 28: ' break' (ID: 2338)
  Prédit: ' break'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' break' → logprob: -0.8688686490058899
    2. '           ' → logprob: -0.9938686490058899
    3. '       ' → logprob: -1.7438685894012451
    4. 'break' (adapté à ' break') → logprob: -3.368868589401245
    5. ' return' → logprob: -7.868868827819824
    6. 'return' → logprob: -8.243868827819824
    7. '   ' → logprob: -8.743868827819824
    8. '               ' → logprob: -9.243868827819824
    9. '	break' → logprob: -9.243868827819824
    10. '```' → logprob: -9.743868827819824

Token 29: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.08979858458042145
    2. '<|end|>' → logprob: -2.58979868888855
    3. '        
' → logprob: -5.714798450469971
    4. '\n' → logprob: -6.339798450469971
    5. '
' → logprob: -6.464798450469971
    6. '<|end|>' → logprob: -7.214798450469971
    7. '   ' → logprob: -7.464798450469971
    8. '\' → logprob: -7.464798450469971
    9. '```' → logprob: -7.589798450469971
    10. '        ' → logprob: -7.714798450469971

Token 30: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.09395360946655273
    2. '<|end|>' → logprob: -3.0939536094665527
    3. '        
' → logprob: -3.4689536094665527
    4. '
' → logprob: -5.843953609466553
    5. '\' → logprob: -5.968953609466553
    6. '\n' → logprob: -6.093953609466553
    7. '```' → logprob: -6.843953609466553
    8. '        ' → logprob: -7.218953609466553
    9. '   ' → logprob: -7.218953609466553
    10. '<|end|>' → logprob: -7.468953609466553

Token 31: ' expected' (ID: 5930)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.017522867769002914
    2. '<|end|>' → logprob: -4.642522811889648
    3. '        ' → logprob: -5.767522811889648
    4. '        
' → logprob: -6.642522811889648
    5. ' ' → logprob: -7.017522811889648
    6. '<|end|>' → logprob: -7.517522811889648
    7. '   ' → logprob: -7.642522811889648
    8. '    ' → logprob: -7.892522811889648
    9. '
' → logprob: -8.392522811889648
    10. '      ' → logprob: -8.642522811889648

Token 32: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.7635205388069153
    2. '_sum' → logprob: -1.0135204792022705
    3. ' =' → logprob: -2.3885204792022705
    4. '=' → logprob: -3.5135204792022705
    5. '_value' → logprob: -3.7635204792022705
    6. '_output' → logprob: -5.13852071762085
    7. '_count' → logprob: -5.63852071762085
    8. '_space' → logprob: -6.26352071762085
    9. '_score' → logprob: -6.63852071762085
    10. '_length' → logprob: -6.63852071762085

Token 33: ' ' (ID: 220)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.2549085319042206
    2. ' ' → logprob: -1.629908561706543
    3. 'n' → logprob: -4.379908561706543
    4. '(n' → logprob: -5.379908561706543
    5. ' (' → logprob: -5.629908561706543
    6. '"' → logprob: -5.754908561706543
    7. ' "' → logprob: -6.254908561706543
    8. '1' → logprob: -6.879908561706543
    9. ' '' → logprob: -7.754908561706543
    10. '(' → logprob: -8.254908561706543

Token 34: '0' (ID: 15)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.7752158045768738
    2. '1' → logprob: -1.1502158641815186
    3. ' n' → logprob: -2.5252158641815186
    4. '(n' → logprob: -3.4002158641815186
    5. ' (' → logprob: -3.6502158641815186
    6. '(' → logprob: -3.9002158641815186
    7. '0' → logprob: -4.2752156257629395
    8. ' ' → logprob: -4.4002156257629395
    9. '[' → logprob: -4.6502156257629395
    10. '[]' → logprob: -5.1502156257629395

Token 35: '.' (ID: 13)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 36: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.6636183261871338
    2. '6' → logprob: -1.4136183261871338
    3. '5' → logprob: -1.9136183261871338
    4. '9' → logprob: -3.413618326187134
    5. '3' → logprob: -4.163618087768555
    6. '1' → logprob: -4.288618087768555
    7. '333' → logprob: -4.288618087768555
    8. '666' → logprob: -5.038618087768555
    9. '25' → logprob: -6.038618087768555
    10. '2' → logprob: -6.288618087768555

Token 37: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 38: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.28916260600090027
    2. '<|end|>' → logprob: -1.4141626358032227
    3. '        
' → logprob: -6.664162635803223
    4. '
' → logprob: -6.664162635803223
    5. '<|end|>' → logprob: -6.664162635803223
    6. ' ' → logprob: -6.789162635803223
    7. '   ' → logprob: -7.289162635803223
    8. '\n' → logprob: -7.664162635803223
    9. '\' → logprob: -8.039162635803223
    10. ')' → logprob: -8.164162635803223

Token 39: ' p' (ID: 275)
  Prédit: ' for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.24236959218978882
    2. 'for' → logprob: -1.9923696517944336
    3. ' ' → logprob: -3.2423696517944336
    4. '<|end|>' → logprob: -4.117369651794434
    5. '       ' → logprob: -4.242369651794434
    6. '   ' → logprob: -5.742369651794434
    7. '    ' → logprob: -6.617369651794434
    8. ' 
' → logprob: -6.867369651794434
    9. '
' → logprob: -6.992369651794434
    10. '        ' → logprob: -7.492369651794434

Token 40: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.15041504800319672
    2. '=' → logprob: -2.1504149436950684
    3. 'r' → logprob: -4.775414943695068
    4. ' +=' → logprob: -5.025414943695068
    5. 'rob' → logprob: -5.775414943695068
    6. 'er' → logprob: -7.275414943695068
    7. '_' → logprob: -7.400414943695068
    8. 'i' → logprob: -7.900414943695068
    9. '_sum' → logprob: -8.150415420532227
    10. '+=' → logprob: -8.275415420532227

Token 41: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.7399868369102478
    2. '1' → logprob: -0.8649868369102478
    3. '0' → logprob: -2.7399868965148926
    4. ' [' → logprob: -4.489986896514893
    5. ' n' → logprob: -4.489986896514893
    6. 'n' → logprob: -5.489986896514893
    7. '[' → logprob: -5.489986896514893
    8. '2' → logprob: -5.864986896514893
    9. '[n' → logprob: -6.614986896514893
    10. ' (' → logprob: -7.989986896514893

Token 42: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.2338569015264511
    2. '0' → logprob: -1.8588569164276123
    3. '2' → logprob: -3.6088569164276123
    4. 'n' → logprob: -4.358856678009033
    5. ' ' → logprob: -5.858856678009033
    6. '[n' → logprob: -5.983856678009033
    7. '[' → logprob: -6.233856678009033
    8. '(n' → logprob: -6.608856678009033
    9. 'float' → logprob: -6.733856678009033
    10. 'i' → logprob: -7.233856678009033

Token 43: '.' (ID: 13)
  Prédit: '/'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '/' → logprob: -0.4900243878364563
    2. ' /' → logprob: -0.9900243878364563
    3. '0' → logprob: -5.365024566650391
    4. '.' → logprob: -5.740024566650391
    5. '/n' → logprob: -5.865024566650391
    6. '<|end|>' → logprob: -6.615024566650391
    7. '/(' → logprob: -7.115024566650391
    8. '+' → logprob: -7.365024566650391
    9. ' /
' → logprob: -7.615024566650391
    10. '/
' → logprob: -7.990024566650391

Token 44: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.001453567179851234
    2. '-' → logprob: -6.626453399658203
    3. '5' → logprob: -10.501453399658203
    4. '8' → logprob: -10.876453399658203
    5. '9' → logprob: -11.126453399658203
    6. '000' → logprob: -11.376453399658203
    7. '1' → logprob: -11.626453399658203
    8. '2' → logprob: -11.751453399658203
    9. '/' → logprob: -11.876453399658203
    10. '6' → logprob: -12.001453399658203

Token 45: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 46: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.3083355724811554
    2. ' ' → logprob: -1.933335542678833
    3. '<|end|>' → logprob: -2.933335542678833
    4. '        ' → logprob: -4.058335781097412
    5. '   ' → logprob: -4.183335781097412
    6. '    ' → logprob: -4.683335781097412
    7. ' for' → logprob: -4.933335781097412
    8. '\t' → logprob: -5.308335781097412
    9. ' 
' → logprob: -5.933335781097412
    10. '<|end|>' → logprob: -5.933335781097412

Token 47: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.7573745846748352
    2. 'for' (adapté à ' for') → logprob: -1.1323745250701904
    3. '   ' → logprob: -2.0073745250701904
    4. '       ' → logprob: -2.8823745250701904
    5. ' ' → logprob: -4.6323747634887695
    6. '	for' → logprob: -5.5073747634887695
    7. '\t' → logprob: -6.3823747634887695
    8. '    ' → logprob: -7.0073747634887695
    9. '	' → logprob: -7.2573747634887695
    10. '  ' → logprob: -7.8823747634887695

Token 48: ' _' (ID: 1175)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.02160327322781086
    2. ' _' → logprob: -4.521603107452393
    3. ' ' → logprob: -5.146603107452393
    4. 'i' → logprob: -6.021603107452393
    5. '_' → logprob: -6.521603107452393
    6. ' range' → logprob: -7.271603107452393
    7. ' k' → logprob: -10.39660358428955
    8. 'range' → logprob: -11.02160358428955
    9. ' in' → logprob: -11.39660358428955
    10. '_i' → logprob: -12.02160358428955

Token 49: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.020642325282096863
    2. 'in' → logprob: -3.8956422805786133
    3. ' ' → logprob: -9.395642280578613
    4. 'range' → logprob: -12.645642280578613
    5. ',' → logprob: -12.770642280578613
    6. '_' → logprob: -13.520642280578613
    7. ' ,' → logprob: -13.645642280578613
    8. ' i' → logprob: -13.645642280578613
    9. ' _' → logprob: -14.145642280578613
    10. 'i' → logprob: -14.145642280578613

Token 50: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.34846311807632446
    2. 'range' → logprob: -1.2234630584716797
    3. ' ' → logprob: -12.09846305847168
    4. '	range' → logprob: -12.84846305847168
    5. ' xrange' → logprob: -12.97346305847168
    6. '(range' → logprob: -13.34846305847168
    7. '  ' → logprob: -13.72346305847168
    8. '_' → logprob: -14.09846305847168
    9. '_range' → logprob: -14.59846305847168
    10. ' in' → logprob: -14.66096305847168

Token 51: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.014215926639735699
    2. '(' → logprob: -4.26421594619751
    3. ' (' → logprob: -9.889215469360352
    4. 'n' → logprob: -14.389215469360352
    5. ' n' → logprob: -14.764215469360352
    6. '(p' → logprob: -15.389215469360352
    7. '(s' → logprob: -15.514215469360352
    8. '((' → logprob: -16.76421546936035
    9. '(int' → logprob: -16.88921546936035
    10. '(
' → logprob: -17.01421546936035

Token 52: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.012217291630804539
    2. ' ):' → logprob: -4.7622175216674805
    3. ')' → logprob: -6.3872175216674805
    4. '+' → logprob: -7.0122175216674805
    5. '):
' → logprob: -7.6372175216674805
    6. ':' → logprob: -8.63721752166748
    7. '-' → logprob: -9.26221752166748
    8. ' )' → logprob: -9.38721752166748
    9. '   ' → logprob: -10.38721752166748
    10. ' +' → logprob: -10.63721752166748

Token 53: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.07893197983503342
    2. '<|end|>' → logprob: -3.453932046890259
    3. '       ' → logprob: -3.828932046890259
    4. '   ' → logprob: -4.95393180847168
    5. ' p' → logprob: -5.07893180847168
    6. '<|end|>' → logprob: -6.07893180847168
    7. ',' → logprob: -6.57893180847168
    8. ' ' → logprob: -7.45393180847168
    9. ':' → logprob: -7.57893180847168
    10. '    	   ' → logprob: -7.57893180847168

Token 54: ' expected' (ID: 5930)
  Prédit: ' p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' p' → logprob: -0.05622219666838646
    2. '           ' → logprob: -3.6812222003936768
    3. 'p' → logprob: -4.181221961975098
    4. '   ' → logprob: -5.431221961975098
    5. '       ' → logprob: -5.681221961975098
    6. ' ' → logprob: -6.431221961975098
    7. ' n' → logprob: -7.056221961975098
    8. '```' → logprob: -8.181221961975098
    9. '2' → logprob: -8.368721961975098
    10. '+' → logprob: -8.618721961975098

Token 55: ' +=' (ID: 2757)
  Prédit: ' +='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.0005601812736131251
    2. '+=' → logprob: -7.875560283660889
    3. ' ' → logprob: -9.25055980682373
    4. ' +' → logprob: -9.87555980682373
    5. '+' → logprob: -10.87555980682373
    6. ' =' → logprob: -12.25055980682373
    7. '<|end|>' → logprob: -13.00055980682373
    8. ' -=' → logprob: -13.37555980682373
    9. '  ' → logprob: -14.75055980682373
    10. '+=(' → logprob: -14.93805980682373

Token 56: ' p' (ID: 275)
  Prédit: ' p'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' p' → logprob: -0.08687683939933777
    2. ' ' → logprob: -2.96187686920166
    3. 'p' → logprob: -4.21187686920166
    4. '1' → logprob: -4.33687686920166
    5. ' (' → logprob: -6.33687686920166
    6. '2' → logprob: -7.71187686920166
    7. '4' → logprob: -7.96187686920166
    8. '0' → logprob: -8.21187686920166
    9. '6' → logprob: -8.96187686920166
    10. '(p' → logprob: -8.96187686920166

Token 57: '
' (ID: 198)
  Prédit: ' *'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.32430800795555115
    2. '*' → logprob: -1.4493080377578735
    3. '/' → logprob: -3.824307918548584
    4. ' /' → logprob: -3.949307918548584
    5. '0' → logprob: -7.449307918548584
    6. ' ' → logprob: -8.949308395385742
    7. '`' → logprob: -9.824308395385742
    8. '```' → logprob: -10.324308395385742
    9. '1' → logprob: -10.449308395385742
    10. '       ' → logprob: -10.699308395385742

Token 58: '           ' (ID: 352)
  Prédit: ' *'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.23335124552249908
    2. '*' → logprob: -1.608351230621338
    3. ' /' → logprob: -5.358351230621338
    4. '/' → logprob: -6.983351230621338
    5. '0' → logprob: -6.983351230621338
    6. ' *=' → logprob: -7.608351230621338
    7. ' ' → logprob: -8.108351707458496
    8. ' ' → logprob: -8.733351707458496
    9. '   ' → logprob: -9.733351707458496
    10. '`' → logprob: -9.983351707458496

Token 59: ' p' (ID: 275)
  Prédit: ' *='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *=' → logprob: -1.2272112369537354
    2. '*=' → logprob: -1.4772112369537354
    3. 'p' (adapté à ' p') → logprob: -1.7272112369537354
    4. ' p' → logprob: -2.3522112369537354
    5. '*' → logprob: -2.6022112369537354
    6. '/' → logprob: -3.4772112369537354
    7. ' /=' → logprob: -3.4772112369537354
    8. ' ' → logprob: -3.9772112369537354
    9. '0' → logprob: -4.102210998535156
    10. '*p' → logprob: -4.852210998535156

Token 60: ' /=' (ID: 37808)
  Prédit: '*='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*=' → logprob: -0.26708632707595825
    2. '*' → logprob: -1.5170862674713135
    3. '/=' → logprob: -5.017086505889893
    4. '/' → logprob: -5.392086505889893
    5. ' *=' → logprob: -5.767086505889893
    6. ' /=' → logprob: -7.767086505889893
    7. '=' → logprob: -9.642086029052734
    8. '```' → logprob: -9.892086029052734
    9. '   ' → logprob: -10.267086029052734
    10. '*/' → logprob: -10.517086029052734

Token 61: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.0028353037778288126
    2. '6' → logprob: -6.752835273742676
    3. '36' → logprob: -7.127835273742676
    4. '10' → logprob: -8.127835273742676
    5. '3' → logprob: -8.752835273742676
    6. '4' → logprob: -9.127835273742676
    7. ' ' → logprob: -9.877835273742676
    8. 'n' → logprob: -10.252835273742676
    9. '360' → logprob: -10.502835273742676
    10. '5' → logprob: -10.752835273742676

Token 62: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.007552201393991709
    2. '6' → logprob: -5.757552146911621
    3. '10' → logprob: -6.757552146911621
    4. '36' → logprob: -7.132552146911621
    5. 'n' → logprob: -7.507552146911621
    6. '4' → logprob: -7.882552146911621
    7. '3' → logprob: -8.007552146911621
    8. '(' → logprob: -8.257552146911621
    9. '360' → logprob: -8.882552146911621
    10. '365' → logprob: -8.882552146911621

Token 63: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.022374356165528297
    2. '<|end|>' → logprob: -4.022374153137207
    3. '
' → logprob: -6.147374153137207
    4. '\n' → logprob: -6.897374153137207
    5. '       ' → logprob: -7.397374153137207
    6. '<|end|>' → logprob: -8.647374153137207
    7. '   ' → logprob: -9.647374153137207
    8. 'print' → logprob: -9.897374153137207
    9. '

' → logprob: -10.397374153137207
    10. '        
' → logprob: -10.897374153137207

Token 64: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.16191944479942322
    2. '<|end|>' → logprob: -2.286919355392456
    3. '   ' → logprob: -3.286919355392456
    4. '
' → logprob: -4.911919593811035
    5. 'print' → logprob: -6.786919593811035
    6. '<|end|>' → logprob: -7.161919593811035
    7. ' print' → logprob: -7.911919593811035
    8. '\n' → logprob: -8.161919593811035
    9. ')' → logprob: -9.536919593811035
    10. ' ' → logprob: -9.786919593811035

Token 65: ' print' (ID: 2123)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.40808358788490295
    2. '   ' → logprob: -1.6580835580825806
    3. ' print' → logprob: -2.28308367729187
    4. 'print' (adapté à ' print') → logprob: -3.15808367729187
    5. '	print' → logprob: -10.40808391571045
    6. '<|end|>' → logprob: -10.65808391571045
    7. '
' → logprob: -11.28308391571045
    8. '```' → logprob: -11.78308391571045
    9. '	   ' → logprob: -12.28308391571045
    10. ' ' → logprob: -13.15808391571045

Token 66: '(expected' (ID: 26332)
  Prédit: '(expected'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(expected' → logprob: -0.08700457960367203
    2. '(int' → logprob: -2.8370046615600586
    3. '(round' → logprob: -3.8370046615600586
    4. '(f' → logprob: -5.962004661560059
    5. '(' → logprob: -8.337004661560059
    6. '("{' → logprob: -8.712004661560059
    7. '("%.' → logprob: -9.837004661560059
    8. '(format' → logprob: -10.212004661560059
    9. ' (' → logprob: -10.462004661560059
    10. '()' → logprob: -10.587004661560059

Token 67: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -4.723352049040841e-06
    2. ' )' → logprob: -13.000004768371582
    3. ')
' → logprob: -14.125004768371582
    4. '`)' → logprob: -14.250004768371582
    5. '))' → logprob: -15.250004768371582
    6. ')`' → logprob: -15.250004768371582
    7. '()' → logprob: -15.500004768371582
    8. '())' → logprob: -15.625004768371582
    9. '   ' → logprob: -17.250003814697266
    10. '')' → logprob: -17.500003814697266


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 65
Tokens correctement prédits (1ère position, stricte): 36
Tokens correctement prédits (1ère position, avec adaptation): 36
Tokens correctement prédits (top 10): 52
Précision stricte (1ère position): 55.38%
Précision adaptée (1ère position): 55.38%
Précision (top 10): 80.00%
================================================================================
