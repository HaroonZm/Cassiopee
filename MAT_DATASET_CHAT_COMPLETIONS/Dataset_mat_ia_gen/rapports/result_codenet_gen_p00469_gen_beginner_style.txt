================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:07:56
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
from itertools import permutations

while True:
    n = int(input())
    k = int(input())
    if n == 0 and k == 0:
        break
    cards = [input().strip() for _ in range(n)]
    results = set()
    for comb in permutations(cards, k):
        num_str = ''.join(comb)
        results.add(num_str)
    print(len(results))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'from' (ID: 2845)
  → Token d'amorce (pas de prédiction)

Token 1: ' itertools' (ID: 103178)
  → Token d'amorce (pas de prédiction)

Token 2: ' import' (ID: 1588)
  → Token d'amorce (pas de prédiction)

Token 3: ' permutations' (ID: 174595)
  Prédit: 'product'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'product' → logprob: -0.858132541179657
    2. 'per' → logprob: -1.6081326007843018
    3. 'com' → logprob: -1.8581326007843018
    4. 'count' → logprob: -2.2331326007843018
    5. 'cycle' → logprob: -3.1081326007843018
    6. 'group' → logprob: -3.2331326007843018
    7. 'chain' → logprob: -4.233132362365723
    8. ' permutations' → logprob: -5.358132362365723
    9. ' product' → logprob: -5.483132362365723
    10. ' cycle' → logprob: -6.608132362365723

Token 4: '

' (ID: 279)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -3.523948907968588e-05
    2. '\(' → logprob: -11.000035285949707
    3. '(
' → logprob: -12.000035285949707
    4. '.' → logprob: -12.500035285949707
    5. '```' → logprob: -13.500035285949707
    6. '`' → logprob: -13.875035285949707
    7. ''' → logprob: -14.000035285949707
    8. ' (' → logprob: -14.375035285949707
    9. '()' → logprob: -14.625035285949707
    10. 'a' → logprob: -14.875035285949707

Token 5: 'while' (ID: 7032)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00018089536752086133
    2. '\(' → logprob: -8.875181198120117
    3. '.' → logprob: -11.000181198120117
    4. '(
' → logprob: -11.250181198120117
    5. ''' → logprob: -13.250181198120117
    6. '```' → logprob: -13.500181198120117
    7. '\' → logprob: -14.000181198120117
    8. 'a' → logprob: -14.000181198120117
    9. '`' → logprob: -14.000181198120117
    10. ',' → logprob: -14.000181198120117

Token 6: ' True' (ID: 6432)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.28323280811309814
    2. ' True' → logprob: -1.4082328081130981
    3. '  ' → logprob: -7.158232688903809
    4. 'True' → logprob: -7.658232688903809
    5. ' not' → logprob: -7.908232688903809
    6. '(' → logprob: -9.283232688903809
    7. ' (' → logprob: -9.283232688903809
    8. '"' → logprob: -9.783232688903809
    9. ''' → logprob: -9.908232688903809
    10. '_' → logprob: -10.533232688903809

Token 7: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00019376569252926856
    2. '():' → logprob: -9.00019359588623
    3. '   ' → logprob: -11.12519359588623
    4. '```' → logprob: -11.37519359588623
    5. ':
' → logprob: -11.50019359588623
    6. ':**' → logprob: -12.00019359588623
    7. ' :' → logprob: -12.00019359588623
    8. '):' → logprob: -12.12519359588623
    9. '`:' → logprob: -12.12519359588623
    10. '(:' → logprob: -12.75019359588623

Token 8: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01823691837489605
    2. '    
' → logprob: -4.893237113952637
    3. ' input' → logprob: -5.268237113952637
    4. '    ' → logprob: -6.393237113952637
    5. 'input' → logprob: -6.643237113952637
    6. ' 
' → logprob: -7.643237113952637
    7. '    
    
' → logprob: -7.768237113952637
    8. '(' → logprob: -8.143237113952637
    9. ' ' → logprob: -8.893237113952637
    10. ' )' → logprob: -9.143237113952637

Token 9: ' n' (ID: 297)
  Prédit: 'user'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'user' → logprob: -0.9183281064033508
    2. '   ' → logprob: -1.918328046798706
    3. '```' → logprob: -2.668328046798706
    4. 'input' → logprob: -2.918328046798706
    5. 'query' → logprob: -2.918328046798706
    6. ' user' → logprob: -3.043328046798706
    7. 'text' → logprob: -3.043328046798706
    8. 'choice' → logprob: -3.793328046798706
    9. 'n' (adapté à ' n') → logprob: -3.918328046798706
    10. 'try' → logprob: -4.043328285217285

Token 10: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.04798727482557297
    2. '=' → logprob: -3.172987222671509
    3. ' ' → logprob: -5.547987461090088
    4. '=input' → logprob: -8.29798698425293
    5. 'u' → logprob: -9.04798698425293
    6. ' >' → logprob: -9.17298698425293
    7. 'o' → logprob: -9.42298698425293
    8. '>' → logprob: -9.42298698425293
    9. ' ==' → logprob: -9.54798698425293
    10. '  ' → logprob: -9.54798698425293

Token 11: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.25565454363822937
    2. ' input' → logprob: -1.5056545734405518
    3. 'int' → logprob: -5.880654335021973
    4. 'input' → logprob: -7.005654335021973
    5. ' ' → logprob: -11.130654335021973
    6. '=int' → logprob: -13.630654335021973
    7. '   ' → logprob: -13.755654335021973
    8. '=input' → logprob: -15.255654335021973
    9. ' 
' → logprob: -15.505654335021973
    10. '```' → logprob: -15.755654335021973

Token 12: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.2519400119781494
    2. '(' → logprob: -1.5019400119781494
    3. '(
' → logprob: -12.25193977355957
    4. 'input' → logprob: -12.62693977355957
    5. '(in' → logprob: -13.75193977355957
    6. ' (' → logprob: -14.25193977355957
    7. '('' → logprob: -15.50193977355957
    8. '()' → logprob: -15.75193977355957
    9. '(

' → logprob: -15.75193977355957
    10. '(inp' → logprob: -16.00193977355957

Token 13: '())
' (ID: 4574)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.24127565324306488
    2. '())' → logprob: -1.741275668144226
    3. '(' → logprob: -3.4912755489349365
    4. ')' → logprob: -4.866275787353516
    5. '('' → logprob: -7.866275787353516
    6. '()))' → logprob: -8.616275787353516
    7. '(""))' → logprob: -9.241275787353516
    8. '(
' → logprob: -10.116275787353516
    9. '().' → logprob: -10.241275787353516
    10. '))' → logprob: -10.616275787353516

Token 14: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3836182653903961
    2. '<|end|>' → logprob: -1.7586182355880737
    3. ' if' → logprob: -2.3836183547973633
    4. '```' → logprob: -3.1336183547973633
    5. ')' → logprob: -5.383618354797363
    6. '    ' → logprob: -7.008618354797363
    7. '    
' → logprob: -7.133618354797363
    8. ' ' → logprob: -7.133618354797363
    9. '<|end|>' → logprob: -7.133618354797363
    10. 'if' → logprob: -7.258618354797363

Token 15: ' k' (ID: 372)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4002893567085266
    2. ' if' → logprob: -1.4002892971038818
    3. '```' → logprob: -3.775289297103882
    4. '    ' → logprob: -4.025289535522461
    5. ')' → logprob: -4.275289535522461
    6. ' ' → logprob: -5.400289535522461
    7. '<|end|>' → logprob: -5.400289535522461
    8. '\n' → logprob: -6.275289535522461
    9. ' 
' → logprob: -6.275289535522461
    10. 'if' → logprob: -6.275289535522461

Token 16: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.1366390436887741
    2. '=' → logprob: -2.63663911819458
    3. ' ==' → logprob: -3.51163911819458
    4. ' >' → logprob: -4.01163911819458
    5. ' ' → logprob: -6.13663911819458
    6. ' <=' → logprob: -6.26163911819458
    7. '>' → logprob: -6.76163911819458
    8. '  ' → logprob: -7.38663911819458
    9. ',' → logprob: -7.63663911819458
    10. '==' → logprob: -7.63663911819458

Token 17: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.02551109716296196
    2. 'int' → logprob: -3.7755110263824463
    3. ' n' → logprob: -6.275511264801025
    4. ' input' → logprob: -8.775510787963867
    5. 'n' → logprob: -9.275510787963867
    6. ' ' → logprob: -9.775510787963867
    7. '0' → logprob: -10.275510787963867
    8. '1' → logprob: -11.650510787963867
    9. 'input' → logprob: -12.025510787963867
    10. '=int' → logprob: -12.150510787963867

Token 18: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.025176359340548515
    2. '()' → logprob: -4.150176525115967
    3. '(' → logprob: -4.900176525115967
    4. ' (' → logprob: -7.775176525115967
    5. '())' → logprob: -7.775176525115967
    6. ')' → logprob: -8.025176048278809
    7. 'input' → logprob: -8.775176048278809
    8. '('' → logprob: -9.025176048278809
    9. '=input' → logprob: -10.025176048278809
    10. ' ()' → logprob: -10.150176048278809

Token 19: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.1907007098197937
    2. '())' → logprob: -2.0657007694244385
    3. '()' → logprob: -3.0657007694244385
    4. '))' → logprob: -9.19070053100586
    5. '`)' → logprob: -10.31570053100586
    6. '(' → logprob: -10.69070053100586
    7. '   ' → logprob: -10.81570053100586
    8. '')' → logprob: -11.19070053100586
    9. ' )' → logprob: -11.44070053100586
    10. '())
' → logprob: -11.69070053100586

Token 20: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03648078069090843
    2. ' if' → logprob: -4.411480903625488
    3. '<|end|>' → logprob: -4.786480903625488
    4. ' ' → logprob: -5.661480903625488
    5. '    
' → logprob: -5.786480903625488
    6. '```' → logprob: -6.036480903625488
    7. '    ' → logprob: -6.161480903625488
    8. 'if' → logprob: -6.786480903625488
    9. '  ' → logprob: -7.161480903625488
    10. ')' → logprob: -7.286480903625488

Token 21: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -1.0345816612243652
    2. '   ' → logprob: -1.2845816612243652
    3. 'if' (adapté à ' if') → logprob: -1.2845816612243652
    4. 'p' → logprob: -3.2845816612243652
    5. 'for' → logprob: -4.409581661224365
    6. ' for' → logprob: -4.784581661224365
    7. 'per' → logprob: -5.159581661224365
    8. ' ' → logprob: -5.409581661224365
    9. ' p' → logprob: -5.534581661224365
    10. '    
' → logprob: -5.534581661224365

Token 22: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.030027925968170166
    2. ' not' → logprob: -3.5300278663635254
    3. 'n' → logprob: -8.530028343200684
    4. 'not' → logprob: -10.155028343200684
    5. ' ' → logprob: -10.655028343200684
    6. ' ' → logprob: -11.030028343200684
    7. ' k' → logprob: -14.655028343200684
    8. ' (' → logprob: -15.655028343200684
    9. '(n' → logprob: -16.155027389526367
    10. '```' → logprob: -16.405027389526367

Token 23: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.4416605234146118
    2. '==' → logprob: -1.0666605234146118
    3. ' <=' → logprob: -5.566660404205322
    4. '<=' → logprob: -5.691660404205322
    5. '<' → logprob: -5.816660404205322
    6. ' <' → logprob: -6.191660404205322
    7. '>' → logprob: -8.06666088104248
    8. '=' → logprob: -8.81666088104248
    9. ' >' → logprob: -9.56666088104248
    10. ')' → logprob: -10.06666088104248

Token 24: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.14267772436141968
    2. '0' → logprob: -2.0176777839660645
    3. ' ' → logprob: -13.392677307128906
    4. '  ' → logprob: -15.455177307128906
    5. '=' → logprob: -15.580177307128906
    6. '<|end|>' → logprob: -16.392677307128906
    7. 's' → logprob: -16.517677307128906
    8. '   ' → logprob: -16.517677307128906
    9. '۰' → logprob: -17.205177307128906
    10. '_' → logprob: -17.205177307128906

Token 25: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0011874916963279247
    2. ' ' → logprob: -6.751187324523926
    3. '-' → logprob: -11.501187324523926
    4. 'k' → logprob: -12.751187324523926
    5. '   ' → logprob: -13.751187324523926
    6. '  ' → logprob: -14.251187324523926
    7. 'n' → logprob: -14.376187324523926
    8. '    ' → logprob: -15.126187324523926
    9. 's' → logprob: -15.501187324523926
    10. ' -' → logprob: -15.626187324523926

Token 26: ' and' (ID: 326)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0018023921875283122
    2. ' :' → logprob: -6.501802444458008
    3. ' and' → logprob: -8.626802444458008
    4. ':
' → logprob: -9.501802444458008
    5. '   ' → logprob: -10.751802444458008
    6. ':return' → logprob: -11.376802444458008
    7. ' :
' → logprob: -12.751802444458008
    8. '  ' → logprob: -13.126802444458008
    9. ' ' → logprob: -13.251802444458008
    10. ' or' → logprob: -13.251802444458008

Token 27: ' k' (ID: 372)
  Prédit: ' k'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.0003815756645053625
    2. 'k' → logprob: -7.8753814697265625
    3. ' ' → logprob: -13.625381469726562
    4. '	k' → logprob: -15.625381469726562
    5. ' ' → logprob: -16.125381469726562
    6. '  ' → logprob: -17.750381469726562
    7. ' n' → logprob: -18.875381469726562
    8. '_k' → logprob: -19.250381469726562
    9. ' ' → logprob: -19.250381469726562
    10. ' ‌' → logprob: -19.375381469726562

Token 28: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.07956884056329727
    2. '==' → logprob: -2.579568862915039
    3. ' ' → logprob: -8.079568862915039
    4. '<|end|>' → logprob: -8.579568862915039
    5. '=' → logprob: -9.829568862915039
    6. ' ' → logprob: -10.204568862915039
    7. '<|end|>' → logprob: -10.329568862915039
    8. ')' → logprob: -11.329568862915039
    9. ')==' → logprob: -11.579568862915039
    10. '0' → logprob: -11.579568862915039

Token 29: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.1002068892121315
    2. ' ' → logprob: -2.3502068519592285
    3. ' ' → logprob: -16.35020637512207
    4. '  ' → logprob: -16.85020637512207
    5. '   ' → logprob: -17.10020637512207
    6. '۰' → logprob: -18.85020637512207
    7. '<|end|>' → logprob: -18.97520637512207
    8. '<|end|>' → logprob: -19.41270637512207
    9. '	' → logprob: -20.35020637512207
    10. '```' → logprob: -20.85020637512207

Token 30: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0004882152716163546
    2. ' ' → logprob: -7.62548828125
    3. '۰' → logprob: -16.00048828125
    4. '<|end|>' → logprob: -17.81298828125
    5. '  ' → logprob: -18.25048828125
    6. '০' → logprob: -18.31298828125
    7. '０' → logprob: -18.56298828125
    8. '०' → logprob: -18.68798828125
    9. '<|end|>' → logprob: -19.00048828125
    10. ' ' → logprob: -19.06298828125

Token 31: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0007455448503606021
    2. ':
' → logprob: -7.62574577331543
    3. '   ' → logprob: -8.87574577331543
    4. '       ' → logprob: -9.12574577331543
    5. ' :' → logprob: -12.37574577331543
    6. '):' → logprob: -13.25074577331543
    7. ':return' → logprob: -13.50074577331543
    8. '    ' → logprob: -14.87574577331543
    9. ':\' → logprob: -15.50074577331543
    10. '():' → logprob: -15.87574577331543

Token 32: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0010883049108088017
    2. '   ' → logprob: -7.1260881423950195
    3. ':' → logprob: -8.37608814239502
    4. '	break' → logprob: -11.87608814239502
    5. ' break' → logprob: -11.87608814239502
    6. '\n' → logprob: -12.00108814239502
    7. ':
' → logprob: -12.12608814239502
    8. '	' → logprob: -12.25108814239502
    9. '    ' → logprob: -12.25108814239502
    10. '     ' → logprob: -12.62608814239502

Token 33: ' break' (ID: 2338)
  Prédit: ' break'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' break' → logprob: -0.01109557319432497
    2. '   ' → logprob: -5.2610955238342285
    3. '       ' → logprob: -5.6360955238342285
    4. 'break' (adapté à ' break') → logprob: -6.1360955238342285
    5. '	break' → logprob: -9.136096000671387
    6. '_break' → logprob: -13.136096000671387
    7. '           ' → logprob: -13.761096000671387
    8. '```' → logprob: -13.761096000671387
    9. '    ' → logprob: -14.011096000671387
    10. ' ' → logprob: -15.261096000671387

Token 34: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.028174735605716705
    2. '    
' → logprob: -4.153174877166748
    3. '
' → logprob: -6.028174877166748
    4. '<|end|>' → logprob: -6.028174877166748
    5. '\n' → logprob: -6.153174877166748
    6. '  
' → logprob: -7.028174877166748
    7. '```' → logprob: -7.278174877166748
    8. '    ' → logprob: -7.278174877166748
    9. 'n' → logprob: -8.02817440032959
    10. '[' → logprob: -8.15317440032959

Token 35: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03193788230419159
    2. '    
' → logprob: -4.156938076019287
    3. '```' → logprob: -5.031938076019287
    4. '
' → logprob: -5.656938076019287
    5. '<|end|>' → logprob: -7.031938076019287
    6. '[' → logprob: -7.156938076019287
    7. '\n' → logprob: -7.281938076019287
    8. 'n' → logprob: -7.406938076019287
    9. '    ' → logprob: -7.656938076019287
    10. '  
' → logprob: -7.906938076019287

Token 36: ' cards' (ID: 10541)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16606204211711884
    2. 'per' → logprob: -2.166062116622925
    3. '    
' → logprob: -4.291061878204346
    4. 'for' → logprob: -5.166061878204346
    5. ' perms' → logprob: -5.291061878204346
    6. 'p' → logprob: -5.666061878204346
    7. 'perm' → logprob: -6.166061878204346
    8. 'print' → logprob: -6.541061878204346
    9. ' permutations' → logprob: -6.791061878204346
    10. ' for' → logprob: -7.291061878204346

Token 37: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.01010818686336279
    2. '=' → logprob: -4.63510799407959
    3. ' ' → logprob: -8.51010799407959
    4. '.' → logprob: -9.76010799407959
    5. '_' → logprob: -10.01010799407959
    6. '[' → logprob: -11.26010799407959
    7. '[:]' → logprob: -11.76010799407959
    8. '_per' → logprob: -12.01010799407959
    9. ' permutations' → logprob: -12.76010799407959
    10. '_space' → logprob: -12.76010799407959

Token 38: ' [' (ID: 723)
  Prédit: ' list'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.130280002951622
    2. ' [' → logprob: -2.755280017852783
    3. 'list' → logprob: -3.630280017852783
    4. ' ['' → logprob: -4.130280017852783
    5. '[' → logprob: -5.130280017852783
    6. '['' → logprob: -5.630280017852783
    7. ' permutations' → logprob: -5.755280017852783
    8. '[list' → logprob: -7.005280017852783
    9. ' []' → logprob: -7.505280017852783
    10. ' input' → logprob: -7.880280017852783

Token 39: 'input' (ID: 2586)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.48476356267929077
    2. 'str' → logprob: -0.9847635626792908
    3. '*' → logprob: -5.2347636222839355
    4. '*i' → logprob: -6.1097636222839355
    5. 'int' → logprob: -6.7347636222839355
    6. ' i' → logprob: -7.7347636222839355
    7. ' str' → logprob: -8.109763145446777
    8. 'input' → logprob: -8.109763145446777
    9. 'x' → logprob: -8.609763145446777
    10. '1' → logprob: -8.984763145446777

Token 40: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.1048637181520462
    2. '()]' → logprob: -2.3548636436462402
    3. '())' → logprob: -5.72986364364624
    4. '().' → logprob: -6.60486364364624
    5. '()
' → logprob: -11.604864120483398
    6. ']()' → logprob: -11.854864120483398
    7. ' ()' → logprob: -12.229864120483398
    8. '()]
' → logprob: -12.854864120483398
    9. '()].' → logprob: -12.979864120483398
    10. ')' → logprob: -13.104864120483398

Token 41: 'strip' (ID: 23905)
  Prédit: 'strip'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'strip' → logprob: -0.00654413178563118
    2. 'split' → logprob: -5.50654411315918
    3. 'rstrip' → logprob: -6.00654411315918
    4. 'str' → logprob: -16.38154411315918
    5. ' strip' → logprob: -16.88154411315918
    6. 'replace' → logprob: -18.38154411315918
    7. '_strip' → logprob: -18.75654411315918
    8. '```' → logprob: -19.88154411315918
    9. '.strip' → logprob: -20.38154411315918
    10. 'r' → logprob: -20.50654411315918

Token 42: '()' (ID: 416)
  Prédit: '()'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.011739536188542843
    2. '()]' → logprob: -4.636739730834961
    3. '())' → logprob: -6.261739730834961
    4. ')' → logprob: -9.886739730834961
    5. '()
' → logprob: -12.011739730834961
    6. '()]
' → logprob: -12.886739730834961
    7. ']' → logprob: -13.011739730834961
    8. '()`' → logprob: -13.136739730834961
    9. '(),' → logprob: -13.261739730834961
    10. '(' → logprob: -13.261739730834961

Token 43: ' for' (ID: 395)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.17342282831668854
    2. ' for' → logprob: -2.0484228134155273
    3. ']' → logprob: -3.9234228134155273
    4. ')]' → logprob: -5.548422813415527
    5. 'for' → logprob: -6.173422813415527
    6. ' )' → logprob: -6.298422813415527
    7. '()' → logprob: -6.298422813415527
    8. '   ' → logprob: -8.298422813415527
    9. ' ]' → logprob: -8.298422813415527
    10. ' ' → logprob: -8.548422813415527

Token 44: ' _' (ID: 1175)
  Prédit: ' range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.007404299918562174
    2. ' _' → logprob: -5.382404327392578
    3. '_' → logprob: -6.257404327392578
    4. ' ' → logprob: -7.757404327392578
    5. 'range' → logprob: -7.882404327392578
    6. '_range' → logprob: -9.882404327392578
    7. '	range' → logprob: -12.507404327392578
    8. ' i' → logprob: -12.882404327392578
    9. ' xrange' → logprob: -14.007404327392578
    10. '(range' → logprob: -15.507404327392578

Token 45: ' in' (ID: 306)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.0036332078743726015
    2. ' range' → logprob: -5.62863302230835
    3. '(range' → logprob: -11.378633499145508
    4. 'in' → logprob: -11.878633499145508
    5. ' in' → logprob: -12.378633499145508
    6. 'ran' → logprob: -13.128633499145508
    7. 'n' → logprob: -13.378633499145508
    8. '	range' → logprob: -13.503633499145508
    9. ' ' → logprob: -13.628633499145508
    10. 'ange' → logprob: -13.753633499145508

Token 46: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.2519300878047943
    2. ' range' → logprob: -1.5019301176071167
    3. '	range' → logprob: -15.126930236816406
    4. '(range' → logprob: -15.251930236816406
    5. ' ' → logprob: -15.626930236816406
    6. 'ran' → logprob: -16.001930236816406
    7. 'rang' → logprob: -16.126930236816406
    8. ' ran' → logprob: -17.626930236816406
    9. '   ' → logprob: -18.251930236816406
    10. 'ra' → logprob: -18.376930236816406

Token 47: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.0015081972815096378
    2. '(' → logprob: -6.5015082359313965
    3. ' (' → logprob: -12.251507759094238
    4. '(k' → logprob: -14.126507759094238
    5. 'n' → logprob: -15.751507759094238
    6. ' n' → logprob: -16.751508712768555
    7. ')n' → logprob: -18.001508712768555
    8. '(
' → logprob: -18.126508712768555
    9. '((' → logprob: -18.376508712768555
    10. '(len' → logprob: -18.876508712768555

Token 48: ')]
' (ID: 11587)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.0013017841847613454
    2. ']' → logprob: -6.7513017654418945
    3. ')' → logprob: -9.001301765441895
    4. '])]' → logprob: -13.126301765441895
    5. ' )' → logprob: -13.376301765441895
    6. ')]
' → logprob: -14.001301765441895
    7. ' ]' → logprob: -14.126301765441895
    8. '   ' → logprob: -14.251301765441895
    9. '')]' → logprob: -14.626301765441895
    10. '])' → logprob: -14.751301765441895

Token 49: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10702569037675858
    2. 'per' → logprob: -2.607025623321533
    3. 'for' → logprob: -4.107025623321533
    4. '    
' → logprob: -5.732025623321533
    5. ' for' → logprob: -6.357025623321533
    6. 'p' → logprob: -6.357025623321533
    7. '```' → logprob: -6.607025623321533
    8. 'result' → logprob: -7.232025623321533
    9. 'perm' → logprob: -7.732025623321533
    10. '
' → logprob: -7.982025623321533

Token 50: ' results' (ID: 4376)
  Prédit: 'per'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'per' → logprob: -1.29258131980896
    2. 'for' → logprob: -1.41758131980896
    3. ' for' → logprob: -1.54258131980896
    4. '   ' → logprob: -1.91758131980896
    5. ' perms' → logprob: -2.54258131980896
    6. 'result' → logprob: -4.292581558227539
    7. 'cards' → logprob: -5.542581558227539
    8. 'perm' → logprob: -5.667581558227539
    9. '```' → logprob: -5.917581558227539
    10. ' result' → logprob: -6.042581558227539

Token 51: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.004098823759704828
    2. '=' → logprob: -5.504098892211914
    3. ' ' → logprob: -12.379098892211914
    4. '_' → logprob: -12.504098892211914
    5. '=[]' → logprob: -12.629098892211914
    6. '[:]' → logprob: -13.129098892211914
    7. '.' → logprob: -13.379098892211914
    8. '.append' → logprob: -13.879098892211914
    9. '.extend' → logprob: -14.004098892211914
    10. '   ' → logprob: -14.379098892211914

Token 52: ' set' (ID: 920)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.8621311187744141
    2. '[]' → logprob: -1.487131118774414
    3. ' list' → logprob: -1.612131118774414
    4. ' permutations' → logprob: -2.987131118774414
    5. ' set' → logprob: -3.237131118774414
    6. 'list' → logprob: -3.487131118774414
    7. 'set' → logprob: -3.862131118774414
    8. 'per' → logprob: -4.987131118774414
    9. ' sorted' → logprob: -7.362131118774414
    10. '[' → logprob: -7.362131118774414

Token 53: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.005845242645591497
    2. '(per' → logprob: -5.255845069885254
    3. '()' → logprob: -7.880845069885254
    4. '((' → logprob: -8.755845069885254
    5. '([' → logprob: -10.255845069885254
    6. '([(' → logprob: -12.255845069885254
    7. '(
' → logprob: -12.380845069885254
    8. '([...' → logprob: -12.380845069885254
    9. '(paren' → logprob: -12.380845069885254
    10. '(p' → logprob: -12.380845069885254

Token 54: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.51565021276474
    2. 'for' → logprob: -1.6406502723693848
    3. ' for' → logprob: -2.1406502723693848
    4. '    
' → logprob: -3.5156502723693848
    5. ' ' → logprob: -3.8906502723693848
    6. ' 
' → logprob: -4.515650272369385
    7. '    ' → logprob: -4.890650272369385
    8. '<|end|>' → logprob: -4.890650272369385
    9. '\' → logprob: -5.890650272369385
    10. '
' → logprob: -6.015650272369385

Token 55: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.6188540458679199
    2. 'for' (adapté à ' for') → logprob: -0.9938540458679199
    3. ' 
' → logprob: -3.11885404586792
    4. '   ' → logprob: -3.36885404586792
    5. ' ' → logprob: -4.99385404586792
    6. '    
' → logprob: -5.74385404586792
    7. '
' → logprob: -7.36885404586792
    8. '   
' → logprob: -7.99385404586792
    9. '    ' → logprob: -8.243854522705078
    10. '     
' → logprob: -8.368854522705078

Token 56: ' comb' (ID: 4134)
  Prédit: ' p'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' p' → logprob: -0.2582376301288605
    2. 'p' → logprob: -2.133237600326538
    3. 'perm' → logprob: -2.508237600326538
    4. ' perm' → logprob: -4.133237838745117
    5. ' comb' → logprob: -6.258237838745117
    6. ' i' → logprob: -6.508237838745117
    7. 'i' → logprob: -6.883237838745117
    8. ' card' → logprob: -7.008237838745117
    9. ' ' → logprob: -7.008237838745117
    10. ' combo' → logprob: -7.133237838745117

Token 57: ' in' (ID: 306)
  Prédit: 'ination'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ination' → logprob: -0.1695871502161026
    2. ' in' → logprob: -1.9195871353149414
    3. 'in' → logprob: -4.919587135314941
    4. 'inations' → logprob: -6.419587135314941
    5. 'inition' → logprob: -8.919587135314941
    6. 'ation' → logprob: -9.544587135314941
    7. '_' → logprob: -10.669587135314941
    8. 'i' → logprob: -11.169587135314941
    9. 'utations' → logprob: -11.169587135314941
    10. 'utation' → logprob: -11.419587135314941

Token 58: ' permutations' (ID: 174595)
  Prédit: ' permutations'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' permutations' → logprob: -0.05535205453634262
    2. 'per' → logprob: -2.930351972579956
    3. '(per' → logprob: -8.180352210998535
    4. '	per' → logprob: -9.305352210998535
    5. ' per' → logprob: -10.305352210998535
    6. ' perm' → logprob: -10.930352210998535
    7. '.per' → logprob: -11.555352210998535
    8. '-per' → logprob: -11.805352210998535
    9. '_per' → logprob: -11.930352210998535
    10. ' itertools' → logprob: -12.180352210998535

Token 59: '(cards' (ID: 161529)
  Prédit: '(cards'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(cards' → logprob: -9.088346359931165e-07
    2. '(' → logprob: -14.375000953674316
    3. '(range' → logprob: -15.875000953674316
    4. '(card' → logprob: -16.5
    5. ' (' → logprob: -17.375
    6. '/cards' → logprob: -17.375
    7. 'cards' → logprob: -17.875
    8. '(items' → logprob: -18.375
    9. '(deck' → logprob: -18.375
    10. ' cards' → logprob: -18.5

Token 60: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0030040887650102377
    2. ',k' → logprob: -6.37800407409668
    3. ' ,' → logprob: -7.12800407409668
    4. '(),' → logprob: -7.87800407409668
    5. ',n' → logprob: -9.75300407409668
    6. '(' → logprob: -10.62800407409668
    7. ')' → logprob: -11.37800407409668
    8. ' ' → logprob: -11.87800407409668
    9. '   ' → logprob: -12.50300407409668
    10. '(k' → logprob: -12.50300407409668

Token 61: ' k' (ID: 372)
  Prédit: 'k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'k' → logprob: -0.06994654983282089
    2. ' k' → logprob: -2.694946527481079
    3. ' ' → logprob: -11.8199462890625
    4. '2' → logprob: -13.9449462890625
    5. '	k' → logprob: -13.9449462890625
    6. '   ' → logprob: -15.4449462890625
    7. '4' → logprob: -15.8199462890625
    8. '3' → logprob: -16.0699462890625
    9. '    ' → logprob: -16.1949462890625
    10. ')' → logprob: -16.3199462890625

Token 62: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00016897499153856188
    2. ')' → logprob: -8.875168800354004
    3. '):
' → logprob: -10.875168800354004
    4. ' ):' → logprob: -11.875168800354004
    5. ':' → logprob: -12.750168800354004
    6. '):
' → logprob: -16.37516975402832
    7. '   ' → logprob: -17.00016975402832
    8. ' ' → logprob: -17.12516975402832
    9. '():' → logprob: -17.37516975402832
    10. ',' → logprob: -17.62516975402832

Token 63: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5520021319389343
    2. ':' → logprob: -1.302002191543579
    3. '   ' → logprob: -3.302002191543579
    4. '):' → logprob: -3.552002191543579
    5. ')' → logprob: -4.177001953125
    6. '    
' → logprob: -4.552001953125
    7. '\n' → logprob: -4.552001953125
    8. '(' → logprob: -4.802001953125
    9. '    ' → logprob: -4.802001953125
    10. ' ' → logprob: -5.552001953125

Token 64: ' num' (ID: 2269)
  Prédit: 'results'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'results' → logprob: -0.7819212675094604
    2. ' results' → logprob: -1.1569212675094604
    3. '   ' → logprob: -2.40692138671875
    4. '
' → logprob: -2.90692138671875
    5. 'print' → logprob: -3.03192138671875
    6. '       ' → logprob: -4.40692138671875
    7. ' print' → logprob: -5.03192138671875
    8. '    
' → logprob: -5.15692138671875
    9. ' if' → logprob: -5.65692138671875
    10. 'result' → logprob: -6.53192138671875

Token 65: '_str' (ID: 6182)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.1524367779493332
    2. '_str' → logprob: -3.0274367332458496
    3. 's' → logprob: -3.4024367332458496
    4. '=' → logprob: -3.7774367332458496
    5. 'ber' → logprob: -3.7774367332458496
    6. 'str' → logprob: -4.77743673324585
    7. 'r' → logprob: -6.40243673324585
    8. '_tokens' → logprob: -7.02743673324585
    9. 'er' → logprob: -7.40243673324585
    10. '   ' → logprob: -8.152437210083008

Token 66: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.03806639462709427
    2. '=' → logprob: -3.2880663871765137
    3. '=''' → logprob: -11.538066864013672
    4. '=""' → logprob: -12.288066864013672
    5. 's' → logprob: -12.913066864013672
    6. ' ' → logprob: -13.163066864013672
    7. ' +=' → logprob: -13.413066864013672
    8. '.' → logprob: -14.288066864013672
    9. ',' → logprob: -14.288066864013672
    10. ' =
' → logprob: -14.788066864013672

Token 67: ' ''.' (ID: 105941)
  Prédit: ''''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '''' → logprob: -0.9401407837867737
    2. '""' → logprob: -1.065140724182129
    3. '''.' → logprob: -1.690140724182129
    4. '"' → logprob: -2.565140724182129
    5. ''' → logprob: -6.065140724182129
    6. ' ''.' → logprob: -7.940140724182129
    7. ''',' → logprob: -8.565140724182129
    8. ' ''' → logprob: -9.190140724182129
    9. ''-' → logprob: -9.815140724182129
    10. ' ""' → logprob: -9.940140724182129

Token 68: 'join' (ID: 10891)
  Prédit: 'join'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'join' → logprob: -5.676981345459353e-06
    2. '.' → logprob: -13.375005722045898
    3. 'jo' → logprob: -13.750005722045898
    4. '```' → logprob: -13.875005722045898
    5. '``' → logprob: -14.625005722045898
    6. ''.' → logprob: -15.125005722045898
    7. 'oin' → logprob: -15.250005722045898
    8. '''.' → logprob: -15.500005722045898
    9. 'j' → logprob: -15.875005722045898
    10. '.join' → logprob: -16.2500057220459

Token 69: '(com' (ID: 27868)
  Prédit: '(com'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(com' → logprob: -0.0001426346570951864
    2. 'comb' → logprob: -9.000143051147461
    3. '(list' → logprob: -11.000143051147461
    4. '(' → logprob: -13.125143051147461
    5. 'com' → logprob: -15.000143051147461
    6. '(combo' → logprob: -16.75014305114746
    7. '(str' → logprob: -17.37514305114746
    8. '([' → logprob: -17.75014305114746
    9. 'list' → logprob: -17.87514305114746
    10. ' comb' → logprob: -18.00014305114746

Token 70: 'b' (ID: 65)
  Prédit: 'b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: 0.0
    2. 'б' → logprob: -18.75
    3. '[b' → logprob: -19.875
    4. '(b' → logprob: -20.125
    5. '	b' → logprob: -21.0
    6. ' b' → logprob: -21.875
    7. 'B' → logprob: -21.875
    8. 'p' → logprob: -22.0
    9. '*b' → logprob: -22.125
    10. '[' → logprob: -22.375

Token 71: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.38713574409484863
    2. ')
' → logprob: -1.1371357440948486
    3. ')
' → logprob: -8.88713550567627
    4. '       ' → logprob: -9.26213550567627
    5. '   ' → logprob: -11.76213550567627
    6. ').' → logprob: -12.01213550567627
    7. ')

' → logprob: -12.01213550567627
    8. ')`
' → logprob: -13.01213550567627
    9. '[' → logprob: -13.38713550567627
    10. ' )
' → logprob: -13.38713550567627

Token 72: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0004025481757707894
    2. '        
' → logprob: -8.875402450561523
    3. '
' → logprob: -9.125402450561523
    4. ')' → logprob: -9.500402450561523
    5. '   ' → logprob: -11.125402450561523
    6. '      ' → logprob: -11.500402450561523
    7. '
' → logprob: -11.750402450561523
    8. '<|end|>' → logprob: -12.250402450561523
    9. '' → logprob: -12.375402450561523
    10. '.' → logprob: -12.375402450561523

Token 73: ' results' (ID: 4376)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.13834193348884583
    2. '   ' → logprob: -2.6383419036865234
    3. 'results' (adapté à ' results') → logprob: -3.6383419036865234
    4. ' results' → logprob: -4.013341903686523
    5. '
' → logprob: -5.013341903686523
    6. '        
' → logprob: -6.263341903686523
    7. ' if' → logprob: -6.388341903686523
    8. 'if' → logprob: -7.013341903686523
    9. '    
' → logprob: -7.138341903686523
    10. ' 
' → logprob: -8.263341903686523

Token 74: '.add' (ID: 1950)
  Prédit: '.add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.add' → logprob: -0.12694616615772247
    2. '.' → logprob: -2.126946210861206
    3. '.append' → logprob: -12.126946449279785
    4. '.update' → logprob: -12.126946449279785
    5. '.setdefault' → logprob: -12.501946449279785
    6. ' .' → logprob: -13.001946449279785
    7. '   ' → logprob: -15.001946449279785
    8. 'add' → logprob: -15.501946449279785
    9. '.Add' → logprob: -15.751946449279785
    10. '.insert' → logprob: -16.12694549560547

Token 75: '(num' (ID: 15828)
  Prédit: '(num'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(num' → logprob: -0.0003645442193374038
    2. '(int' → logprob: -8.250364303588867
    3. '(' → logprob: -9.250364303588867
    4. 'num' → logprob: -12.625364303588867
    5. '(len' → logprob: -12.875364303588867
    6. '(str' → logprob: -14.875364303588867
    7. ' (' → logprob: -15.375364303588867
    8. '(number' → logprob: -15.625364303588867
    9. '((' → logprob: -15.875364303588867
    10. '(n' → logprob: -16.125364303588867

Token 76: '_str' (ID: 6182)
  Prédit: '_str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_str' → logprob: -0.0008296403102576733
    2. 'str' → logprob: -7.125829696655273
    3. 'ber' → logprob: -12.000829696655273
    4. 'Str' → logprob: -12.625829696655273
    5. ')' → logprob: -12.875829696655273
    6. '_' → logprob: -13.625829696655273
    7. '-str' → logprob: -13.625829696655273
    8. 'r' → logprob: -13.750829696655273
    9. '_)' → logprob: -13.750829696655273
    10. '_STR' → logprob: -14.125829696655273

Token 77: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.007251168601214886
    2. ')
' → logprob: -5.007251262664795
    3. '   ' → logprob: -7.632251262664795
    4. '
' → logprob: -11.007250785827637
    5. ')
' → logprob: -11.382250785827637
    6. ')

' → logprob: -11.632250785827637
    7. ' )' → logprob: -12.632250785827637
    8. 'print' → logprob: -12.632250785827637
    9. ' ' → logprob: -13.882250785827637
    10. '       ' → logprob: -14.132250785827637

Token 78: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03580217808485031
    2. 'print' → logprob: -3.535802125930786
    3. '    
' → logprob: -5.535802364349365
    4. '
' → logprob: -6.285802364349365
    5. '```' → logprob: -9.910801887512207
    6. ' print' → logprob: -10.285801887512207
    7. '  
' → logprob: -10.285801887512207
    8. 'for' → logprob: -11.035801887512207
    9. '<|end|>' → logprob: -11.035801887512207
    10. 'sorted' → logprob: -11.535801887512207

Token 79: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.13152500987052917
    2. '   ' → logprob: -2.1315250396728516
    3. 'for' → logprob: -6.256525039672852
    4. '    
' → logprob: -6.631525039672852
    5. ' print' → logprob: -7.006525039672852
    6. '```' → logprob: -8.256525039672852
    7. ' for' → logprob: -9.756525039672852
    8. 'sorted' → logprob: -10.131525039672852
    9. 'results' → logprob: -10.381525039672852
    10. '  
' → logprob: -11.631525039672852

Token 80: '(len' (ID: 14990)
  Prédit: '(len'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(len' → logprob: -0.004651672672480345
    2. '(' → logprob: -6.2546515464782715
    3. '(sorted' → logprob: -6.3796515464782715
    4. '(max' → logprob: -7.2546515464782715
    5. '(min' → logprob: -8.25465202331543
    6. 'len' → logprob: -10.37965202331543
    7. '(f' → logprob: -11.50465202331543
    8. '()' → logprob: -11.87965202331543
    9. '(sum' → logprob: -12.12965202331543
    10. '('' → logprob: -13.50465202331543

Token 81: '(results' (ID: 42655)
  Prédit: '(results'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(results' → logprob: -0.0004324573092162609
    2. '(' → logprob: -7.75043249130249
    3. ')' → logprob: -13.500432014465332
    4. ' (' → logprob: -15.875432014465332
    5. '(result' → logprob: -16.00043296813965
    6. '(res' → logprob: -17.25043296813965
    7. '(resources' → logprob: -17.50043296813965
    8. ')(' → logprob: -17.50043296813965
    9. '(s' → logprob: -17.62543296813965
    10. 'results' → logprob: -17.75043296813965

Token 82: '))' (ID: 915)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.011052182875573635
    2. '))' → logprob: -4.511052131652832
    3. ')))' → logprob: -13.261052131652832
    4. '())' → logprob: -13.511052131652832
    5. ' )' → logprob: -14.386052131652832
    6. ')}' → logprob: -15.261052131652832
    7. '()' → logprob: -15.636052131652832
    8. '})' → logprob: -15.886052131652832
    9. ')`' → logprob: -16.01105308532715
    10. '])' → logprob: -17.13605308532715


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 80
Tokens correctement prédits (1ère position, stricte): 43
Tokens correctement prédits (1ère position, avec adaptation): 44
Tokens correctement prédits (top 10): 72
Précision stricte (1ère position): 53.75%
Précision adaptée (1ère position): 55.00%
Précision (top 10): 90.00%
================================================================================
