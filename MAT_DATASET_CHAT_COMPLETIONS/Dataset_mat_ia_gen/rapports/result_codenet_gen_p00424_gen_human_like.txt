================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:04:04
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
while True:
    n = int(input())
    if n == 0:
        break
    trans = {}
    for _ in range(n):
        a, b = input().split()
        trans[a] = b
    m = int(input())
    res = []
    for _ in range(m):
        c = input()
        res.append(trans[c] if c in trans else c)
    print(''.join(res))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'while' (ID: 7032)
  → Token d'amorce (pas de prédiction)

Token 1: ' True' (ID: 6432)
  → Token d'amorce (pas de prédiction)

Token 2: ':
' (ID: 734)
  → Token d'amorce (pas de prédiction)

Token 3: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.1197752952575684
    2. '\' → logprob: -1.7447752952575684
    3. ' ' → logprob: -1.9947752952575684
    4. '    ' → logprob: -2.1197752952575684
    5. '\n' → logprob: -2.9947752952575684
    6. '    
' → logprob: -3.1197752952575684
    7. '```' → logprob: -3.1197752952575684
    8. ' 
' → logprob: -3.8697752952575684
    9. '<|end|>' → logprob: -3.9947752952575684
    10. '     
' → logprob: -4.869775295257568

Token 4: ' n' (ID: 297)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.20415055751800537
    2. '    ' → logprob: -2.579150676727295
    3. ' ' → logprob: -3.079150676727295
    4. '```' → logprob: -3.204150676727295
    5. '       ' → logprob: -5.204150676727295
    6. '    
' → logprob: -5.704150676727295
    7. ' pass' → logprob: -5.954150676727295
    8. '  ' → logprob: -6.454150676727295
    9. 'pass' → logprob: -6.454150676727295
    10. ' ```' → logprob: -6.954150676727295

Token 5: ' =' (ID: 314)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8705378770828247
    2. '=' → logprob: -1.4955378770828247
    3. 'u' → logprob: -1.9955378770828247
    4. '   ' → logprob: -2.745537757873535
    5. 'o' → logprob: -3.245537757873535
    6. '+' → logprob: -3.745537757873535
    7. '_' → logprob: -4.245537757873535
    8. '>' → logprob: -4.245537757873535
    9. ' =' → logprob: -4.370537757873535
    10. '  ' → logprob: -4.620537757873535

Token 6: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.3801138997077942
    2. ' input' → logprob: -1.2551138401031494
    3. 'input' → logprob: -3.8801138401031494
    4. 'int' → logprob: -4.6301140785217285
    5. ' n' → logprob: -7.6301140785217285
    6. ' ' → logprob: -9.38011360168457
    7. 'n' → logprob: -10.25511360168457
    8. '```' → logprob: -11.00511360168457
    9. ' randint' → logprob: -11.00511360168457
    10. ' eval' → logprob: -11.25511360168457

Token 7: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.006758829578757286
    2. '(input' → logprob: -5.006758689880371
    3. '()' → logprob: -11.131758689880371
    4. 'input' → logprob: -11.756758689880371
    5. '(n' → logprob: -12.256758689880371
    6. '(
' → logprob: -12.381758689880371
    7. ' (' → logprob: -12.506758689880371
    8. '('' → logprob: -12.631758689880371
    9. '(int' → logprob: -14.756758689880371
    10. ''' → logprob: -14.756758689880371

Token 8: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.38052013516426086
    2. ')' → logprob: -1.8805201053619385
    3. '()' → logprob: -2.0055201053619385
    4. '())' → logprob: -3.7555201053619385
    5. '))' → logprob: -5.755520343780518
    6. '()))' → logprob: -7.005520343780518
    7. '('' → logprob: -7.880520343780518
    8. '(
' → logprob: -7.880520343780518
    9. ' ' → logprob: -8.63051986694336
    10. '(""))' → logprob: -8.75551986694336

Token 9: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 10: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5625182390213013
    2. ' if' → logprob: -1.1875182390213013
    3. '<|end|>' → logprob: -3.4375181198120117
    4. ')' → logprob: -3.8125181198120117
    5. ' ' → logprob: -3.9375181198120117
    6. '```' → logprob: -4.187518119812012
    7. '    ' → logprob: -4.437518119812012
    8. 'if' (adapté à ' if') → logprob: -5.437518119812012
    9. '\n' → logprob: -5.937518119812012
    10. '  ' → logprob: -6.062518119812012

Token 11: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.004031026270240545
    2. ' ' → logprob: -5.754031181335449
    3. ' not' → logprob: -7.504031181335449
    4. 'n' → logprob: -8.12903118133545
    5. '  ' → logprob: -13.00403118133545
    6. ' ' → logprob: -13.37903118133545
    7. ' (' → logprob: -14.12903118133545
    8. 'not' → logprob: -14.12903118133545
    9. '(n' → logprob: -14.62903118133545
    10. '	n' → logprob: -15.75403118133545

Token 12: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.3223670423030853
    2. ' >' → logprob: -2.072366952896118
    3. ' <=' → logprob: -2.447366952896118
    4. ' <' → logprob: -3.572366952896118
    5. '==' → logprob: -3.822366952896118
    6. '>' → logprob: -5.197367191314697
    7. ' ' → logprob: -5.447367191314697
    8. ' >=' → logprob: -7.197367191314697
    9. '<=' → logprob: -7.197367191314697
    10. '<' → logprob: -7.447367191314697

Token 13: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.2014302909374237
    2. '0' → logprob: -1.701430320739746
    3. '1' → logprob: -12.826430320739746
    4. ' ' → logprob: -13.076430320739746
    5. '10' → logprob: -13.451430320739746
    6. '32' → logprob: -13.451430320739746
    7. '100' → logprob: -13.951430320739746
    8. ' -' → logprob: -13.951430320739746
    9. '  ' → logprob: -14.138930320739746
    10. '20' → logprob: -14.451430320739746

Token 14: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.006742842961102724
    2. ' ' → logprob: -5.00674295425415
    3. '-' → logprob: -11.131742477416992
    4. '1' → logprob: -12.631742477416992
    5. ' -' → logprob: -12.631742477416992
    6. '42' → logprob: -13.006742477416992
    7. '4' → logprob: -14.631742477416992
    8. '   ' → logprob: -14.631742477416992
    9. '    ' → logprob: -14.756742477416992
    10. 's' → logprob: -15.256742477416992

Token 15: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00010902655776590109
    2. ':
' → logprob: -9.87510871887207
    3. ' :' → logprob: -10.50010871887207
    4. '   ' → logprob: -11.25010871887207
    5. '):' → logprob: -12.12510871887207
    6. '       ' → logprob: -12.62510871887207
    7. ':\' → logprob: -13.25010871887207
    8. ':return' → logprob: -13.25010871887207
    9. '    ' → logprob: -13.62510871887207
    10. '():' → logprob: -14.00010871887207

Token 16: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0003570343542378396
    2. '   ' → logprob: -8.750356674194336
    3. ' break' → logprob: -9.500356674194336
    4. '    ' → logprob: -10.000356674194336
    5. '\n' → logprob: -10.625356674194336
    6. '      ' → logprob: -11.500356674194336
    7. '        ' → logprob: -11.750356674194336
    8. '	break' → logprob: -12.250356674194336
    9. '<|end|>' → logprob: -12.375356674194336
    10. '     ' → logprob: -12.500356674194336

Token 17: ' break' (ID: 2338)
  Prédit: ' break'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' break' → logprob: -0.02372686006128788
    2. '       ' → logprob: -4.273726940155029
    3. 'break' (adapté à ' break') → logprob: -5.023726940155029
    4. '   ' → logprob: -6.023726940155029
    5. '	break' → logprob: -8.523726463317871
    6. '\n' → logprob: -9.148726463317871
    7. '_break' → logprob: -10.148726463317871
    8. '    ' → logprob: -10.273726463317871
    9. '```' → logprob: -10.273726463317871
    10. '        
' → logprob: -11.148726463317871

Token 18: '
' (ID: 198)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.25623488426208496
    2. '   ' → logprob: -2.381234884262085
    3. '\' → logprob: -2.631234884262085
    4. ':' → logprob: -3.506234884262085
    5. '    
' → logprob: -4.881235122680664
    6. '\r' → logprob: -4.881235122680664
    7. '```' → logprob: -5.131235122680664
    8. ' ' → logprob: -6.381235122680664
    9. '
' → logprob: -6.506235122680664
    10. '  
' → logprob: -6.631235122680664

Token 19: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00905201118439436
    2. '```' → logprob: -5.25905179977417
    3. '    
' → logprob: -5.75905179977417
    4. 'print' → logprob: -8.509052276611328
    5. '\n' → logprob: -9.259052276611328
    6. '[' → logprob: -9.759052276611328
    7. '<|end|>' → logprob: -9.759052276611328
    8. '#' → logprob: -10.134052276611328
    9. '\' → logprob: -10.134052276611328
    10. 'n' → logprob: -10.259052276611328

Token 20: ' trans' (ID: 1643)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.3419245183467865
    2. ' ' → logprob: -2.5919244289398193
    3. '<|end|>' → logprob: -2.5919244289398193
    4. '\n' → logprob: -3.5919244289398193
    5. ')' → logprob: -3.8419244289398193
    6. 'n' → logprob: -4.216924667358398
    7. '    ' → logprob: -4.341924667358398
    8. '\' → logprob: -4.466924667358398
    9. 'print' → logprob: -4.716924667358398
    10. ':' → logprob: -5.091924667358398

Token 21: ' =' (ID: 314)
  Prédit: 'form'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'form' → logprob: -1.0154093503952026
    2. 'a' → logprob: -2.015409469604492
    3. 'l' → logprob: -2.015409469604492
    4. 'late' → logprob: -2.140409469604492
    5. 'lation' → logprob: -2.265409469604492
    6. 'port' → logprob: -2.390409469604492
    7. 'pose' → logprob: -4.390409469604492
    8. 'lated' → logprob: -4.765409469604492
    9. 'formed' → logprob: -5.390409469604492
    10. 'lator' → logprob: -5.640409469604492

Token 22: ' {}
' (ID: 11421)
  Prédit: '{}'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '{}' → logprob: -0.818105161190033
    2. ' {}' → logprob: -0.943105161190033
    3. ' []' → logprob: -2.0681052207946777
    4. '[]' → logprob: -3.8181052207946777
    5. ' [' → logprob: -5.443105220794678
    6. ' n' → logprob: -5.818105220794678
    7. ' ' → logprob: -6.318105220794678
    8. '"' → logprob: -6.443105220794678
    9. 'dict' → logprob: -6.443105220794678
    10. '[' → logprob: -6.693105220794678

Token 23: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.028716985136270523
    2. ' ' → logprob: -5.028717041015625
    3. '    ' → logprob: -5.278717041015625
    4. 'n' → logprob: -5.278717041015625
    5. 't' → logprob: -5.653717041015625
    6. 'for' → logprob: -6.278717041015625
    7. '    
' → logprob: -7.028717041015625
    8. ' for' → logprob: -7.403717041015625
    9. '  ' → logprob: -7.403717041015625
    10. '\' → logprob: -7.528717041015625

Token 24: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.3600247800350189
    2. ' for' → logprob: -1.7350248098373413
    3. '   ' → logprob: -2.3600246906280518
    4. ' ' → logprob: -4.360024929046631
    5. 't' → logprob: -4.735024929046631
    6. 'c' → logprob: -5.735024929046631
    7. 'n' → logprob: -6.235024929046631
    8. '    ' → logprob: -6.985024929046631
    9. 'i' → logprob: -7.360024929046631
    10. 's' → logprob: -7.610024929046631

Token 25: ' _' (ID: 1175)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.055952709168195724
    2. ' _' → logprob: -3.305952787399292
    3. ' ' → logprob: -4.055952548980713
    4. 'i' → logprob: -8.180953025817871
    5. '_' → logprob: -9.555953025817871
    6. ' ‌' → logprob: -10.555953025817871
    7. ' range' → logprob: -11.055953025817871
    8. '  ' → logprob: -11.180953025817871
    9. ' )' → logprob: -12.055953025817871
    10. ' ▁' → logprob: -12.180953025817871

Token 26: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.00787561759352684
    2. 'in' → logprob: -4.882875442504883
    3. ' ' → logprob: -8.382875442504883
    4. 'range' → logprob: -11.132875442504883
    5. '_' → logprob: -11.507875442504883
    6. ' _' → logprob: -12.382875442504883
    7. ' i' → logprob: -13.007875442504883
    8. '  ' → logprob: -13.132875442504883
    9. '	in' → logprob: -13.757875442504883
    10. 'n' → logprob: -14.132875442504883

Token 27: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.3132673501968384
    2. ' range' → logprob: -1.3132673501968384
    3. '	range' → logprob: -13.313267707824707
    4. 'rang' → logprob: -13.438267707824707
    5. 'ran' → logprob: -14.313267707824707
    6. '(range' → logprob: -14.563267707824707
    7. ' ' → logprob: -14.813267707824707
    8. 'r' → logprob: -15.813267707824707
    9. ' ran' → logprob: -16.06326675415039
    10. '[' → logprob: -16.06326675415039

Token 28: '(n' (ID: 2406)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.022889716550707817
    2. '(n' → logprob: -4.022889614105225
    3. 'n' → logprob: -5.647889614105225
    4. ' (' → logprob: -7.522889614105225
    5. '(' → logprob: -7.522889614105225
    6. ' ' → logprob: -9.147890090942383
    7. ')n' → logprob: -12.897890090942383
    8. '	n' → logprob: -13.147890090942383
    9. '()' → logprob: -13.272890090942383
    10. ' range' → logprob: -13.397890090942383

Token 29: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.006682098377496004
    2. ')' → logprob: -5.3816819190979
    3. ':' → logprob: -6.3816819190979
    4. ' ):' → logprob: -8.381682395935059
    5. '   ' → logprob: -9.506682395935059
    6. '():' → logprob: -10.756682395935059
    7. '):
' → logprob: -11.256682395935059
    8. ',' → logprob: -12.131682395935059
    9. '+' → logprob: -12.381682395935059
    10. ' )' → logprob: -12.506682395935059

Token 30: '       ' (ID: 309)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3656463027000427
    2. '       ' → logprob: -1.9906463623046875
    3. '    ' → logprob: -2.2406463623046875
    4. '<|end|>' → logprob: -3.3656463623046875
    5. '   ' → logprob: -3.8656463623046875
    6. ' 
' → logprob: -5.7406463623046875
    7. '  ' → logprob: -7.6156463623046875
    8. '     ' → logprob: -7.6156463623046875
    9. ' )' → logprob: -7.8656463623046875
    10. '        ' → logprob: -7.8656463623046875

Token 31: ' a' (ID: 261)
  Prédit: ' word'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' word' → logprob: -0.6148806214332581
    2. '    ' → logprob: -1.6148805618286133
    3. ' line' → logprob: -2.1148805618286133
    4. ' ' → logprob: -2.7398805618286133
    5. ' s' → logprob: -3.9898805618286133
    6. '   ' → logprob: -4.114880561828613
    7. ' input' → logprob: -4.239880561828613
    8. 'word' → logprob: -4.989880561828613
    9. '       ' → logprob: -5.614880561828613
    10. ' key' → logprob: -5.739880561828613

Token 32: ',' (ID: 11)
  Prédit: ' ,'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ,' → logprob: -0.3912694752216339
    2. ',' → logprob: -1.1412694454193115
    3. ' ' → logprob: -6.016269683837891
    4. ',b' → logprob: -6.891269683837891
    5. ' =' → logprob: -7.891269683837891
    6. 'r' → logprob: -8.39126968383789
    7. 'input' → logprob: -9.39126968383789
    8. 'b' → logprob: -10.01626968383789
    9. ',input' → logprob: -10.39126968383789
    10. '=' → logprob: -10.51626968383789

Token 33: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.6345447301864624
    2. 'b' → logprob: -0.7595447301864624
    3. ' ' → logprob: -6.259544849395752
    4. 'space' → logprob: -11.259544372558594
    5. ' =' → logprob: -12.509544372558594
    6. '_' → logprob: -12.759544372558594
    7. '    ' → logprob: -13.009544372558594
    8. '  ' → logprob: -13.009544372558594
    9. '=' → logprob: -13.259544372558594
    10. '<|end|>' → logprob: -13.259544372558594

Token 34: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.10021582990884781
    2. '=' → logprob: -2.3502159118652344
    3. ',' → logprob: -12.225215911865234
    4. '=input' → logprob: -13.225215911865234
    5. ' ' → logprob: -13.725215911865234
    6. ')' → logprob: -14.225215911865234
    7. '    ' → logprob: -15.600215911865234
    8. '  ' → logprob: -16.475215911865234
    9. '   ' → logprob: -16.600215911865234
    10. ' =
' → logprob: -16.850215911865234

Token 35: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.018316633999347687
    2. 'input' → logprob: -4.018316745758057
    3. ' map' → logprob: -8.893316268920898
    4. 'map' → logprob: -11.268316268920898
    5. ' ' → logprob: -11.768316268920898
    6. '   ' → logprob: -12.518316268920898
    7. '=input' → logprob: -13.518316268920898
    8. '(input' → logprob: -13.893316268920898
    9. '    ' → logprob: -14.143316268920898
    10. '	input' → logprob: -14.518316268920898

Token 36: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.4297136664390564
    2. '().' → logprob: -1.0547137260437012
    3. '(' → logprob: -7.054713726043701
    4. '())' → logprob: -9.429713249206543
    5. ')' → logprob: -11.054713249206543
    6. '()
' → logprob: -11.179713249206543
    7. ' ()' → logprob: -11.429713249206543
    8. '()

' → logprob: -12.679713249206543
    9. '()`' → logprob: -12.804713249206543
    10. '.split' → logprob: -12.929713249206543

Token 37: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -8.709308167453855e-05
    2. 'strip' → logprob: -9.500086784362793
    3. 'rstrip' → logprob: -11.500086784362793
    4. 'spl' → logprob: -13.875086784362793
    5. ' split' → logprob: -14.000086784362793
    6. '(split' → logprob: -15.750086784362793
    7. '```' → logprob: -17.37508773803711
    8. 'rs' → logprob: -17.50008773803711
    9. 'replace' → logprob: -17.75008773803711
    10. ' ' → logprob: -17.87508773803711

Token 38: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.002884402871131897
    2. '(' → logprob: -6.002884387969971
    3. '('' → logprob: -7.877884387969971
    4. '())' → logprob: -11.752884864807129
    5. '()]' → logprob: -12.252884864807129
    6. ' ()' → logprob: -13.002884864807129
    7. '()
' → logprob: -13.002884864807129
    8. '("' → logprob: -13.377884864807129
    9. ')' → logprob: -13.377884864807129
    10. '(',' → logprob: -13.502884864807129

Token 39: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.09678618609905243
    2. '   ' → logprob: -2.5967862606048584
    3. '
' → logprob: -4.846786022186279
    4. '    
' → logprob: -5.346786022186279
    5. '        
' → logprob: -6.596786022186279
    6. '<|end|>' → logprob: -6.721786022186279
    7. ')' → logprob: -7.346786022186279
    8. ' 
' → logprob: -8.096786499023438
    9. '  
' → logprob: -8.346786499023438
    10. ' trans' → logprob: -8.346786499023438

Token 40: ' trans' (ID: 1643)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.04498479142785072
    2. ' trans' → logprob: -3.419984817504883
    3. '   ' → logprob: -4.669984817504883
    4. 'trans' (adapté à ' trans') → logprob: -7.169984817504883
    5. '	trans' → logprob: -8.169984817504883
    6. '<|end|>' → logprob: -8.294984817504883
    7. '        
' → logprob: -9.044984817504883
    8. ' 
' → logprob: -9.419984817504883
    9. ' ' → logprob: -9.419984817504883
    10. '    
' → logprob: -9.669984817504883

Token 41: '[a' (ID: 32035)
  Prédit: '[a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[a' → logprob: -0.0036436687223613262
    2. '[' → logprob: -5.62864351272583
    3. '[b' → logprob: -10.253643989562988
    4. '[(' → logprob: -12.378643989562988
    5. ' [' → logprob: -13.878643989562988
    6. '[A' → logprob: -14.378643989562988
    7. '[
' → logprob: -15.003643989562988
    8. '[f' → logprob: -15.003643989562988
    9. '[int' → logprob: -15.253643989562988
    10. '[n' → logprob: -15.253643989562988

Token 42: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.006965543609112501
    2. ']=' → logprob: -5.006965637207031
    3. ' ]' → logprob: -8.381965637207031
    4. '[' → logprob: -11.131965637207031
    5. ']==' → logprob: -14.006965637207031
    6. '=' → logprob: -14.131965637207031
    7. '']' → logprob: -14.381965637207031
    8. '"]' → logprob: -14.381965637207031
    9. ':]' → logprob: -14.631965637207031
    10. ']+=' → logprob: -14.756965637207031

Token 43: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.10034598410129547
    2. ' =' → logprob: -2.350346088409424
    3. '=b' → logprob: -8.975345611572266
    4. ']' → logprob: -12.100345611572266
    5. '=a' → logprob: -13.100345611572266
    6. ']=' → logprob: -13.725345611572266
    7. ')' → logprob: -14.475345611572266
    8. ',' → logprob: -14.600345611572266
    9. '=end' → logprob: -14.600345611572266
    10. '=}' → logprob: -14.725345611572266

Token 44: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.12693136930465698
    2. ' b' → logprob: -2.1269314289093018
    3. 'int' → logprob: -13.376931190490723
    4. '>b' → logprob: -15.126931190490723
    5. ' ' → logprob: -15.251931190490723
    6. '[' → logprob: -15.251931190490723
    7. 'a' → logprob: -15.626931190490723
    8. ')b' → logprob: -15.876931190490723
    9. ' ' → logprob: -16.00193214416504
    10. '(b' → logprob: -16.50193214416504

Token 45: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.019084276631474495
    2. '    
' → logprob: -5.019084453582764
    3. '<|end|>' → logprob: -5.019084453582764
    4. '\n' → logprob: -5.769084453582764
    5. '
' → logprob: -7.644084453582764
    6. ' ' → logprob: -8.394083976745605
    7. '       ' → logprob: -8.644083976745605
    8. ')' → logprob: -8.769083976745605
    9. '[' → logprob: -8.769083976745605
    10. '    ' → logprob: -9.144083976745605

Token 46: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05839746072888374
    2. '
' → logprob: -3.4333975315093994
    3. '    
' → logprob: -4.93339729309082
    4. '<|end|>' → logprob: -4.93339729309082
    5. 'for' → logprob: -5.80839729309082
    6. '\n' → logprob: -5.80839729309082
    7. ' ' → logprob: -7.43339729309082
    8. ' for' → logprob: -7.68339729309082
    9. '  
' → logprob: -7.80839729309082
    10. '  ' → logprob: -8.18339729309082

Token 47: ' m' (ID: 284)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.32524508237838745
    2. 's' → logprob: -2.3252451419830322
    3. '    
' → logprob: -3.2002451419830322
    4. 'result' → logprob: -3.4502451419830322
    5. '\n' → logprob: -3.8252451419830322
    6. 'for' → logprob: -4.450244903564453
    7. 'print' → logprob: -4.700244903564453
    8. 'n' → logprob: -4.825244903564453
    9. ' ' → logprob: -4.950244903564453
    10. '  
' → logprob: -5.200244903564453

Token 48: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.02897861786186695
    2. '=' → logprob: -3.6539785861968994
    3. ' ' → logprob: -6.4039788246154785
    4. 'essage' → logprob: -7.6539788246154785
    5. 'a' → logprob: -8.15397834777832
    6. '_' → logprob: -9.65397834777832
    7. 'ap' → logprob: -10.52897834777832
    8. '.' → logprob: -10.65397834777832
    9. 'essages' → logprob: -10.65397834777832
    10. 'sg' → logprob: -10.90397834777832

Token 49: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.49379852414131165
    2. ' input' → logprob: -1.1187984943389893
    3. 'int' → logprob: -2.9937984943389893
    4. 'input' → logprob: -4.368798732757568
    5. ' len' → logprob: -9.74379825592041
    6. ' ' → logprob: -9.86879825592041
    7. 'len' → logprob: -10.49379825592041
    8. '   ' → logprob: -10.49379825592041
    9. '[int' → logprob: -11.11879825592041
    10. ' str' → logprob: -11.49379825592041

Token 50: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0017581217689439654
    2. '(' → logprob: -6.376758098602295
    3. '()' → logprob: -10.626758575439453
    4. 'input' → logprob: -10.876758575439453
    5. ' (' → logprob: -11.626758575439453
    6. ' input' → logprob: -13.251758575439453
    7. '=input' → logprob: -13.376758575439453
    8. '(
' → logprob: -15.251758575439453
    9. '<input' → logprob: -16.376758575439453
    10. ',input' → logprob: -16.626758575439453

Token 51: '())
' (ID: 4574)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.3521025478839874
    2. '())' → logprob: -1.602102518081665
    3. ')' → logprob: -2.352102518081665
    4. '()
' → logprob: -9.102102279663086
    5. '(' → logprob: -11.727102279663086
    6. ' ())' → logprob: -11.727102279663086
    7. '())
' → logprob: -12.227102279663086
    8. '();)' → logprob: -12.352102279663086
    9. ' )' → logprob: -12.477102279663086
    10. '   ' → logprob: -13.477102279663086

Token 52: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2825770378112793
    2. '<|end|>' → logprob: -1.9075770378112793
    3. ' ' → logprob: -4.032577037811279
    4. '    
' → logprob: -4.282577037811279
    5. ' for' → logprob: -4.407577037811279
    6. 's' → logprob: -4.657577037811279
    7. 'for' → logprob: -5.032577037811279
    8. 'text' → logprob: -5.282577037811279
    9. '\n' → logprob: -5.532577037811279
    10. 'input' → logprob: -5.657577037811279

Token 53: ' res' (ID: 694)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.034004803746938705
    2. 'result' → logprob: -4.9090046882629395
    3. 's' → logprob: -5.1590046882629395
    4. 'text' → logprob: -5.2840046882629395
    5. 'sentence' → logprob: -5.4090046882629395
    6. ' for' → logprob: -5.9090046882629395
    7. 'words' → logprob: -6.0340046882629395
    8. 'message' → logprob: -6.9090046882629395
    9. '   ' → logprob: -7.0340046882629395
    10. 'encoded' → logprob: -7.2840046882629395

Token 54: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.1016906350851059
    2. '=' → logprob: -2.3516905307769775
    3. ' ' → logprob: -7.101690769195557
    4. 'ult' → logprob: -7.976690769195557
    5. 'u' → logprob: -8.851690292358398
    6. 'ul' → logprob: -9.976690292358398
    7. ' +=' → logprob: -10.351690292358398
    8. 'ults' → logprob: -11.226690292358398
    9. ',' → logprob: -11.726690292358398
    10. '=[]' → logprob: -11.851690292358398

Token 55: ' []
' (ID: 8911)
  Prédit: '""'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '""' → logprob: -0.9289823174476624
    2. ' []' → logprob: -1.3039822578430176
    3. '[]' → logprob: -1.6789822578430176
    4. ' ""' → logprob: -2.3039822578430176
    5. '"' → logprob: -3.4289822578430176
    6. '''' → logprob: -5.053982257843018
    7. ' ''' → logprob: -5.428982257843018
    8. ' "' → logprob: -6.303982257843018
    9. ' ' → logprob: -6.803982257843018
    10. ''' → logprob: -7.303982257843018

Token 56: '   ' (ID: 271)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.4844304621219635
    2. '   ' → logprob: -1.2344304323196411
    3. ' for' → logprob: -2.6094305515289307
    4. '<|end|>' → logprob: -4.234430313110352
    5. '
' → logprob: -6.609430313110352
    6. '\n' → logprob: -7.109430313110352
    7. '    
' → logprob: -7.234430313110352
    8. ' ' → logprob: -7.609430313110352
    9. ' 
' → logprob: -7.734430313110352
    10. '	for' → logprob: -8.359430313110352

Token 57: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.011442946270108223
    2. ' for' → logprob: -4.511443138122559
    3. '   ' → logprob: -8.011443138122559
    4. ' ' → logprob: -11.511443138122559
    5. 'while' → logprob: -11.636443138122559
    6. '	for' → logprob: -11.636443138122559
    7. '    ' → logprob: -11.761443138122559
    8. '\n' → logprob: -11.886443138122559
    9. ' 
' → logprob: -12.011443138122559
    10. '<|end|>' → logprob: -12.136443138122559

Token 58: ' _' (ID: 1175)
  Prédit: ' _'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' _' → logprob: -0.08167720586061478
    2. '_' → logprob: -2.581677198410034
    3. ' i' → logprob: -6.081677436828613
    4. ' ' → logprob: -7.706677436828613
    5. 'i' → logprob: -10.706677436828613
    6. ' __' → logprob: -11.581677436828613
    7. ' ' → logprob: -12.331677436828613
    8. ' j' → logprob: -12.331677436828613
    9. '_i' → logprob: -12.831677436828613
    10. ' in' → logprob: -13.831677436828613

Token 59: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.7290617227554321
    2. ' ' → logprob: -0.8540617227554321
    3. ' _' → logprob: -3.1040616035461426
    4. ' range' → logprob: -3.3540616035461426
    5. 'in' → logprob: -5.604061603546143
    6. 'range' → logprob: -5.729061603546143
    7. '_' → logprob: -6.104061603546143
    8. ' m' → logprob: -6.604061603546143
    9. '  ' → logprob: -7.104061603546143
    10. ' i' → logprob: -8.3540620803833

Token 60: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.03805847465991974
    2. ' range' → logprob: -3.2880585193634033
    3. 'input' → logprob: -12.538058280944824
    4. '(range' → logprob: -12.538058280944824
    5. 'm' → logprob: -12.913058280944824
    6. '	range' → logprob: -13.788058280944824
    7. '```' → logprob: -14.288058280944824
    8. ' ' → logprob: -14.288058280944824
    9. ')' → logprob: -14.538058280944824
    10. 'ange' → logprob: -14.663058280944824

Token 61: '(m' (ID: 2145)
  Prédit: ' m'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' m' → logprob: -0.6358024477958679
    2. ' (' → logprob: -1.3858025074005127
    3. '(m' → logprob: -1.7608025074005127
    4. '(' → logprob: -3.5108025074005127
    5. 'm' → logprob: -4.010802268981934
    6. ' ' → logprob: -7.760802268981934
    7. ')' → logprob: -11.760802268981934
    8. ' range' → logprob: -12.135802268981934
    9. '	m' → logprob: -12.635802268981934
    10. ' ,' → logprob: -12.885802268981934

Token 62: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.013373740948736668
    2. ':' → logprob: -4.638373851776123
    3. '):
' → logprob: -5.763373851776123
    4. ')' → logprob: -8.138373374938965
    5. '   ' → logprob: -8.763373374938965
    6. ' ):' → logprob: -11.763373374938965
    7. '):
' → logprob: -12.638373374938965
    8. '       ' → logprob: -12.763373374938965
    9. ':
' → logprob: -12.888373374938965
    10. '():' → logprob: -13.138373374938965

Token 63: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0026836141478270292
    2. ' s' → logprob: -7.877683639526367
    3. ' word' → logprob: -7.877683639526367
    4. '   ' → logprob: -8.252683639526367
    5. 'word' → logprob: -8.377683639526367
    6. 'token' → logprob: -8.502683639526367
    7. 'text' → logprob: -8.877683639526367
    8. '<|end|>' → logprob: -8.877683639526367
    9. 's' → logprob: -9.127683639526367
    10. ' code' → logprob: -9.377683639526367

Token 64: ' c' (ID: 274)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.4656478464603424
    2. ' s' → logprob: -1.59064781665802
    3. 'w' → logprob: -2.7156479358673096
    4. ' word' → logprob: -3.3406479358673096
    5. 'word' → logprob: -3.3406479358673096
    6. ' w' → logprob: -4.9656476974487305
    7. 'line' → logprob: -5.2156476974487305
    8. 'text' → logprob: -5.4656476974487305
    9. 'x' → logprob: -5.5906476974487305
    10. ' line' → logprob: -5.5906476974487305

Token 65: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.05004027485847473
    2. '=' → logprob: -3.6750402450561523
    3. 'ode' → logprob: -4.675040245056152
    4. ',' → logprob: -4.675040245056152
    5. '=input' → logprob: -6.675040245056152
    6. ' ' → logprob: -7.050040245056152
    7. '   ' → logprob: -7.550040245056152
    8. 'h' → logprob: -7.800040245056152
    9. 's' → logprob: -8.175040245056152
    10. 'a' → logprob: -8.550040245056152

Token 66: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.06998434662818909
    2. 'input' → logprob: -2.6949844360351562
    3. ' ' → logprob: -10.694984436035156
    4. ' list' → logprob: -12.069984436035156
    5. 'list' → logprob: -12.444984436035156
    6. '=input' → logprob: -12.944984436035156
    7. '	input' → logprob: -13.069984436035156
    8. '(input' → logprob: -13.194984436035156
    9. 'int' → logprob: -13.194984436035156
    10. '   ' → logprob: -13.569984436035156

Token 67: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -4.143808109802194e-05
    2. '().' → logprob: -10.500041007995605
    3. '())' → logprob: -11.500041007995605
    4. ')' → logprob: -13.875041007995605
    5. '()
' → logprob: -13.875041007995605
    6. '(' → logprob: -14.500041007995605
    7. '()>' → logprob: -15.125041007995605
    8. '()`' → logprob: -15.250041007995605
    9. '()

' → logprob: -15.250041007995605
    10. ' ()' → logprob: -15.500041007995605

Token 68: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.45087748765945435
    2. '
' → logprob: -1.3258774280548096
    3. '<|end|>' → logprob: -2.5758774280548096
    4. '<|end|>' → logprob: -4.950877666473389
    5. ',' → logprob: -6.075877666473389
    6. '   ' → logprob: -6.200877666473389
    7. ')' → logprob: -6.200877666473389
    8. 'res' → logprob: -6.325877666473389
    9. ' ' → logprob: -6.950877666473389
    10. '
' → logprob: -7.325877666473389

Token 69: ' res' (ID: 694)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' (adapté à ' res') → logprob: -0.18812541663646698
    2. ' res' → logprob: -2.0631253719329834
    3. 'if' → logprob: -3.4381253719329834
    4. ' if' → logprob: -4.8131256103515625
    5. '   ' → logprob: -6.1881256103515625
    6. 'r' → logprob: -7.1881256103515625
    7. 's' → logprob: -7.9381256103515625
    8. 'trans' → logprob: -8.813125610351562
    9. 'for' → logprob: -9.313125610351562
    10. 'result' → logprob: -9.313125610351562

Token 70: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.07890256494283676
    2. '.' → logprob: -2.57890248298645
    3. '.extend' → logprob: -11.953902244567871
    4. 'append' → logprob: -13.078902244567871
    5. '.ap' → logprob: -13.453902244567871
    6. '.app' → logprob: -13.828902244567871
    7. '_append' → logprob: -14.703902244567871
    8. '.Append' → logprob: -14.703902244567871
    9. '=' → logprob: -15.578902244567871
    10. ' .' → logprob: -15.703902244567871

Token 71: '(trans' (ID: 60636)
  Prédit: '(trans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(trans' → logprob: -0.005248579662293196
    2. '(' → logprob: -5.255248546600342
    3. '(c' → logprob: -11.8802490234375
    4. 'trans' → logprob: -13.5052490234375
    5. '(tr' → logprob: -13.6302490234375
    6. '("("' → logprob: -13.8802490234375
    7. '(
' → logprob: -14.0052490234375
    8. '('' → logprob: -14.1302490234375
    9. '(t' → logprob: -14.3802490234375
    10. '((' → logprob: -14.5052490234375

Token 72: '[c' (ID: 22840)
  Prédit: '[c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[c' → logprob: -0.2539553940296173
    2. '.get' → logprob: -1.503955364227295
    3. '[' → logprob: -6.378955364227295
    4. '.' → logprob: -8.128955841064453
    5. '[get' → logprob: -11.003955841064453
    6. '.setdefault' → logprob: -12.378955841064453
    7. '[g' → logprob: -12.878955841064453
    8. '.c' → logprob: -13.003955841064453
    9. ')' → logprob: -13.378955841064453
    10. ' .' → logprob: -13.878955841064453

Token 73: ']' (ID: 60)
  Prédit: '])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '])' → logprob: -0.007626973092556
    2. ']' → logprob: -4.882627010345459
    3. ')' → logprob: -12.0076265335083
    4. ' ])' → logprob: -12.2576265335083
    5. ')]' → logprob: -13.0076265335083
    6. ''])' → logprob: -13.2576265335083
    7. ']))' → logprob: -14.0076265335083
    8. '))' → logprob: -14.1326265335083
    9. ')])' → logprob: -14.2576265335083
    10. '])
' → logprob: -14.5076265335083

Token 74: ' if' (ID: 538)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -7.231182826217264e-05
    2. '))' → logprob: -9.750072479248047
    3. ' )' → logprob: -11.750072479248047
    4. ')
' → logprob: -14.125072479248047
    5. ' or' → logprob: -14.250072479248047
    6. ' if' → logprob: -14.375072479248047
    7. ']' → logprob: -14.625072479248047
    8. 'if' → logprob: -14.750072479248047
    9. '())' → logprob: -14.750072479248047
    10. '])' → logprob: -14.875072479248047

Token 75: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.12693126499652863
    2. 'c' → logprob: -2.1269311904907227
    3. ' ' → logprob: -12.876931190490723
    4. '	c' → logprob: -15.376931190490723
    5. ' ' → logprob: -15.876931190490723
    6. '<|end|>' → logprob: -16.25193214416504
    7. ')c' → logprob: -16.37693214416504
    8. '(c' → logprob: -17.75193214416504
    9. 'ct' → logprob: -18.37693214416504
    10. 'cation' → logprob: -18.43943214416504

Token 76: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.005327316932380199
    2. 'in' → logprob: -5.255327224731445
    3. ' ' → logprob: -9.630327224731445
    4. '<|end|>' → logprob: -11.505327224731445
    5. 'else' → logprob: -11.880327224731445
    6. ' else' → logprob: -12.005327224731445
    7. '<|end|>' → logprob: -13.755327224731445
    8. '	in' → logprob: -14.317827224731445
    9. ')' → logprob: -14.755327224731445
    10. ' 
' → logprob: -15.255327224731445

Token 77: ' trans' (ID: 1643)
  Prédit: ' trans'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' trans' → logprob: -0.004621422383934259
    2. 'trans' → logprob: -5.379621505737305
    3. ' ' → logprob: -14.504621505737305
    4. '	trans' → logprob: -14.754621505737305
    5. '(trans' → logprob: -16.504621505737305
    6. ' ' → logprob: -16.504621505737305
    7. ' transp' → logprob: -17.629621505737305
    8. ')' → logprob: -18.004621505737305
    9. ' tran' → logprob: -18.004621505737305
    10. ' t' → logprob: -18.754621505737305

Token 78: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.01416398212313652
    2. 'else' → logprob: -4.264163970947266
    3. '	else' → logprob: -15.264163970947266
    4. ' ' → logprob: -15.389163970947266
    5. ')' → logprob: -17.139163970947266
    6. ' els' → logprob: -18.389163970947266
    7. ' ' → logprob: -18.389163970947266
    8. '   ' → logprob: -19.139163970947266
    9. 'elses' → logprob: -19.264163970947266
    10. ' )' → logprob: -19.889163970947266

Token 79: ' c' (ID: 274)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.012187141925096512
    2. ' c' → logprob: -4.8871870040893555
    3. '"' → logprob: -6.1371870040893555
    4. '?' → logprob: -7.0121870040893555
    5. ')c' → logprob: -8.387187004089355
    6. '   ' → logprob: -8.512187004089355
    7. ')' → logprob: -8.637187004089355
    8. ' ' → logprob: -8.887187004089355
    9. '"?' → logprob: -9.012187004089355
    10. ''' → logprob: -9.137187004089355

Token 80: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.069664333248511e-05
    2. ')
' → logprob: -10.875020980834961
    3. ' )' → logprob: -13.750020980834961
    4. '))' → logprob: -15.250020980834961
    5. '`)' → logprob: -16.00002098083496
    6. '   ' → logprob: -16.50002098083496
    7. ')

' → logprob: -16.62502098083496
    8. '')' → logprob: -17.00002098083496
    9. ')`' → logprob: -17.00002098083496
    10. ')n' → logprob: -17.50002098083496

Token 81: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0027807503938674927
    2. '
' → logprob: -6.502780914306641
    3. 'for' → logprob: -7.127780914306641
    4. '   ' → logprob: -8.00278091430664
    5. '\n' → logprob: -9.75278091430664
    6. ' print' → logprob: -10.50278091430664
    7. '    
' → logprob: -10.62778091430664
    8. ' for' → logprob: -11.37778091430664
    9. '<|end|>' → logprob: -11.87778091430664
    10. '  
' → logprob: -12.25278091430664

Token 82: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0007244677981361747
    2. 'for' → logprob: -7.8757243156433105
    3. '   ' → logprob: -8.375724792480469
    4. ' print' → logprob: -9.625724792480469
    5. '
' → logprob: -10.375724792480469
    6. ' for' → logprob: -11.625724792480469
    7. '\n' → logprob: -12.625724792480469
    8. '    
' → logprob: -12.875724792480469
    9. '```' → logprob: -14.750724792480469
    10. '	print' → logprob: -14.875724792480469

Token 83: '('' (ID: 706)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.05155642703175545
    2. '('' → logprob: -3.051556348800659
    3. '("("' → logprob: -6.551556587219238
    4. '("' → logprob: -6.676556587219238
    5. '(*' → logprob: -8.301556587219238
    6. '()' → logprob: -11.301556587219238
    7. '("")' → logprob: -12.176556587219238
    8. '(len' → logprob: -12.551556587219238
    9. '(
' → logprob: -13.551556587219238
    10. '(sum' → logprob: -14.051556587219238

Token 84: ''.' (ID: 6120)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.10116922110319138
    2. ' '.' → logprob: -2.9761691093444824
    3. ''.' → logprob: -3.6011691093444824
    4. ' ''.' → logprob: -4.851169109344482
    5. '''.' → logprob: -5.226169109344482
    6. ' '' → logprob: -5.976169109344482
    7. '"' → logprob: -6.976169109344482
    8. ''\' → logprob: -7.726169109344482
    9. '.' → logprob: -8.22616958618164
    10. '".' → logprob: -9.60116958618164

Token 85: 'join' (ID: 10891)
  Prédit: 'join'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'join' → logprob: -3.249780638725497e-05
    2. ' join' → logprob: -10.375032424926758
    3. 'jo' → logprob: -14.250032424926758
    4. 'j' → logprob: -15.000032424926758
    5. '.' → logprob: -16.250032424926758
    6. '''.' → logprob: -16.625032424926758
    7. '/j' → logprob: -16.875032424926758
    8. '.join' → logprob: -17.500032424926758
    9. '(join' → logprob: -17.750032424926758
    10. ' ' → logprob: -17.750032424926758

Token 86: '(res' (ID: 8331)
  Prédit: '(res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(res' → logprob: -0.00043853666284121573
    2. '(' → logprob: -7.750438690185547
    3. 'res' → logprob: -12.375438690185547
    4. ')' → logprob: -12.875438690185547
    5. ' (' → logprob: -14.125438690185547
    6. ',res' → logprob: -16.500438690185547
    7. '	res' → logprob: -16.500438690185547
    8. '=res' → logprob: -17.750438690185547
    9. '(
' → logprob: -17.875438690185547
    10. ')(' → logprob: -18.000438690185547

Token 87: '))' (ID: 915)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.023246990516781807
    2. '))' → logprob: -3.773247003555298
    3. ')))' → logprob: -14.523246765136719
    4. ' )' → logprob: -14.648246765136719
    5. '())' → logprob: -15.773246765136719
    6. '`)' → logprob: -16.02324676513672
    7. ')`' → logprob: -16.14824676513672
    8. ')
' → logprob: -16.27324676513672
    9. '')' → logprob: -17.14824676513672
    10. ')")' → logprob: -17.39824676513672


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 85
Tokens correctement prédits (1ère position, stricte): 39
Tokens correctement prédits (1ère position, avec adaptation): 43
Tokens correctement prédits (top 10): 74
Précision stricte (1ère position): 45.88%
Précision adaptée (1ère position): 50.59%
Précision (top 10): 87.06%
================================================================================
