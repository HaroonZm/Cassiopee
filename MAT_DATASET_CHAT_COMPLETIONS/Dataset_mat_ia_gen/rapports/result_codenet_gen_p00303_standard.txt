================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:23:08
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n=int(input())
graph={}
for _ in range(n):
    u,s,d=input().split()
    u='u'+u
    d='d'+d
    if s=='lock':
        graph.setdefault(d,[]).append(u)
    else:
        graph.setdefault(u,[]).append(d)
visited=set()
recstack=set()
def dfs(v):
    visited.add(v)
    recstack.add(v)
    for nv in graph.get(v,[]):
        if nv not in visited:
            if dfs(nv):
                return True
        elif nv in recstack:
            return True
    recstack.remove(v)
    return False
print(1 if any(dfs(node) for node in graph if node not in visited) else 0)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: '=int' (ID: 37431)
  → Token d'amorce (pas de prédiction)

Token 2: '(input' (ID: 10054)
  → Token d'amorce (pas de prédiction)

Token 3: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.33144018054008484
    2. '(' → logprob: -1.3314402103424072
    3. '()' → logprob: -5.206439971923828
    4. '())' → logprob: -5.206439971923828
    5. '```' → logprob: -5.706439971923828
    6. '")' → logprob: -7.331439971923828
    7. '`)' → logprob: -7.456439971923828
    8. '(
' → logprob: -7.706439971923828
    9. '<|end|>' → logprob: -7.956439971923828
    10. '')' → logprob: -7.956439971923828

Token 4: 'graph' (ID: 7978)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.308822751045227
    2. '+' → logprob: -1.683822751045227
    3. '*' → logprob: -2.0588226318359375
    4. 'for' → logprob: -2.3088226318359375
    5. 'i' → logprob: -2.6838226318359375
    6. '#' → logprob: -2.8088226318359375
    7. '\n' → logprob: -3.3088226318359375
    8. 's' → logprob: -3.4338226318359375
    9. '%' → logprob: -3.4338226318359375
    10. ''' → logprob: -4.0588226318359375

Token 5: '={}
' (ID: 146130)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.0041642338037490845
    2. '.' → logprob: -5.879164218902588
    3. '=' → logprob: -7.004164218902588
    4. '[
' → logprob: -8.754164695739746
    5. '\[' → logprob: -8.879164695739746
    6. ' =' → logprob: -10.504164695739746
    7. ')' → logprob: -10.754164695739746
    8. '[]' → logprob: -11.129164695739746
    9. ']' → logprob: -11.254164695739746
    10. '[:]' → logprob: -11.629164695739746

Token 6: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.009985323995351791
    2. ' for' → logprob: -4.634985446929932
    3. '
' → logprob: -8.634984970092773
    4. '\n' → logprob: -11.509984970092773
    5. '[' → logprob: -12.009984970092773
    6. ' 
' → logprob: -12.259984970092773
    7. '' → logprob: -12.259984970092773
    8. 'n' → logprob: -12.384984970092773
    9. 'graph' → logprob: -12.759984970092773
    10. ' ' → logprob: -12.884984970092773

Token 7: ' _' (ID: 1175)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.4841482937335968
    2. ' ' → logprob: -1.1091482639312744
    3. ' _' → logprob: -2.9841482639312744
    4. 'i' → logprob: -6.3591485023498535
    5. '_' → logprob: -6.4841485023498535
    6. ' ‌' → logprob: -10.359148025512695
    7. ' node' → logprob: -10.609148025512695
    8. '  ' → logprob: -11.109148025512695
    9. ' v' → logprob: -12.359148025512695
    10. ' I' → logprob: -12.484148025512695

Token 8: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.006309846881777048
    2. 'in' → logprob: -5.256309986114502
    3. ' ' → logprob: -6.881309986114502
    4. ' i' → logprob: -11.631309509277344
    5. 'range' → logprob: -11.631309509277344
    6. 'n' → logprob: -11.756309509277344
    7. '  ' → logprob: -11.881309509277344
    8. 'space' → logprob: -12.881309509277344
    9. ' range' → logprob: -13.256309509277344
    10. '	in' → logprob: -13.506309509277344

Token 9: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.25193095207214355
    2. 'range' → logprob: -1.5019309520721436
    3. ' ' → logprob: -14.501931190490723
    4. '(range' → logprob: -14.626931190490723
    5. '	range' → logprob: -14.876931190490723
    6. '_range' → logprob: -16.001930236816406
    7. ' ran' → logprob: -16.251930236816406
    8. 'rang' → logprob: -16.376930236816406
    9. 'n' → logprob: -17.001930236816406
    10. 'ran' → logprob: -17.001930236816406

Token 10: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.3921608328819275
    2. '(n' → logprob: -1.1421608924865723
    3. ' (' → logprob: -5.267160892486572
    4. '(len' → logprob: -9.892160415649414
    5. '(int' → logprob: -10.267160415649414
    6. '(
' → logprob: -11.142160415649414
    7. '(range' → logprob: -12.142160415649414
    8. '(num' → logprob: -13.392160415649414
    9. ' n' → logprob: -13.517160415649414
    10. 'n' → logprob: -13.642160415649414

Token 11: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.049545768648386
    2. ')' → logprob: -3.0495457649230957
    3. ' ):' → logprob: -7.424545764923096
    4. ':' → logprob: -8.674546241760254
    5. '):
' → logprob: -9.299546241760254
    6. ' )' → logprob: -9.424546241760254
    7. ' ' → logprob: -12.174546241760254
    8. '   ' → logprob: -12.674546241760254
    9. '+' → logprob: -12.799546241760254
    10. ' :' → logprob: -13.799546241760254

Token 12: '   ' (ID: 271)
  Prédit: ' line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' line' → logprob: -0.16587793827056885
    2. ' graph' → logprob: -3.0408778190612793
    3. ' node' → logprob: -3.2908778190612793
    4. '   ' → logprob: -3.5408778190612793
    5. ' ' → logprob: -4.415877819061279
    6. '    ' → logprob: -4.915877819061279
    7. ' input' → logprob: -5.415877819061279
    8. ' s' → logprob: -5.415877819061279
    9. '     
' → logprob: -6.540877819061279
    10. ' token' → logprob: -6.790877819061279

Token 13: ' u' (ID: 337)
  Prédit: ' line'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' line' → logprob: -0.32701948285102844
    2. ' node' → logprob: -1.827019453048706
    3. 'line' → logprob: -2.702019453048706
    4. 'node' → logprob: -3.577019453048706
    5. ' u' → logprob: -5.702019691467285
    6. ' city' → logprob: -6.077019691467285
    7. 'name' → logprob: -6.202019691467285
    8. ' nodes' → logprob: -6.452019691467285
    9. 'x' → logprob: -6.577019691467285
    10. ' name' → logprob: -6.577019691467285

Token 14: ',s' (ID: 20379)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.04550909996032715
    2. ' ,' → logprob: -3.170509099960327
    3. ' =' → logprob: -6.795509338378906
    4. ' ' → logprob: -7.795509338378906
    5. '=' → logprob: -8.170509338378906
    6. ',v' → logprob: -8.670509338378906
    7. ',n' → logprob: -9.045509338378906
    8. 's' → logprob: -9.670509338378906
    9. ',u' → logprob: -10.045509338378906
    10. ',input' → logprob: -10.045509338378906

Token 15: ',d' (ID: 26159)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.2558932602405548
    2. ' =' → logprob: -2.2558932304382324
    3. '=' → logprob: -2.5058932304382324
    4. ',p' → logprob: -4.380893230438232
    5. ',v' → logprob: -5.130893230438232
    6. '=input' → logprob: -5.380893230438232
    7. ',input' → logprob: -5.630893230438232
    8. ',a' → logprob: -6.380893230438232
    9. ',i' → logprob: -6.630893230438232
    10. ' ,' → logprob: -6.630893230438232

Token 16: '=input' (ID: 87911)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.03188776969909668
    2. ' =' → logprob: -3.6568877696990967
    3. '=input' → logprob: -5.281888008117676
    4. ',' → logprob: -8.156888008117676
    5. '=line' → logprob: -9.656888008117676
    6. '=list' → logprob: -10.406888008117676
    7. ' ' → logprob: -10.656888008117676
    8. '=int' → logprob: -11.531888008117676
    9. ',input' → logprob: -11.656888008117676
    10. 'input' → logprob: -12.031888008117676

Token 17: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.01847439631819725
    2. '()' → logprob: -4.143474578857422
    3. '(' → logprob: -6.143474578857422
    4. '('' → logprob: -8.768474578857422
    5. ')' → logprob: -10.268474578857422
    6. '())' → logprob: -10.268474578857422
    7. '.split' → logprob: -11.393474578857422
    8. '.' → logprob: -11.393474578857422
    9. 'split' → logprob: -11.768474578857422
    10. '("("' → logprob: -11.768474578857422

Token 18: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0008097442332655191
    2. 'strip' → logprob: -7.125809669494629
    3. 'rstrip' → logprob: -13.000809669494629
    4. ' split' → logprob: -13.125809669494629
    5. '```' → logprob: -14.750809669494629
    6. 'spl' → logprob: -16.125810623168945
    7. 's' → logprob: -16.250810623168945
    8. 'rs' → logprob: -16.500810623168945
    9. 'sp' → logprob: -16.625810623168945
    10. '(split' → logprob: -16.750810623168945

Token 19: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.13012029230594635
    2. '('' → logprob: -2.755120277404785
    3. '(' → logprob: -2.880120277404785
    4. '("("' → logprob: -6.505120277404785
    5. '())' → logprob: -9.005120277404785
    6. '()]' → logprob: -9.380120277404785
    7. '(',' → logprob: -9.630120277404785
    8. '```' → logprob: -9.630120277404785
    9. '("' → logprob: -9.755120277404785
    10. '(`' → logprob: -9.880120277404785

Token 20: '   ' (ID: 271)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 21: ' u' (ID: 337)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.6933779716491699
    2. 'graph' → logprob: -1.94337797164917
    3. ' graph' → logprob: -2.06837797164917
    4. '<|end|>' → logprob: -2.06837797164917
    5. 'if' → logprob: -3.44337797164917
    6. '   ' → logprob: -3.56837797164917
    7. 'u' (adapté à ' u') → logprob: -3.94337797164917
    8. '	graph' → logprob: -4.69337797164917
    9. '<|end|>' → logprob: -5.69337797164917
    10. ' u' → logprob: -6.31837797164917

Token 22: '='' (ID: 2053)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' in' → logprob: -1.2315623760223389
    2. '=' → logprob: -1.4815623760223389
    3. ' =' → logprob: -1.4815623760223389
    4. ',' → logprob: -1.8565623760223389
    5. '<|end|>' → logprob: -3.981562376022339
    6. ')' → logprob: -4.606562614440918
    7. '[' → logprob: -4.731562614440918
    8. 'space' → logprob: -4.731562614440918
    9. '.setdefault' → logprob: -4.731562614440918
    10. 's' → logprob: -4.856562614440918

Token 23: 'u' (ID: 84)
  Prédit: 'u'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'u' → logprob: -0.015997063368558884
    2. 'int' → logprob: -4.640996932983398
    3. 's' → logprob: -6.015996932983398
    4. ''' → logprob: -6.515996932983398
    5. ' u' → logprob: -7.140996932983398
    6. ''u' → logprob: -7.765996932983398
    7. 'str' → logprob: -7.890996932983398
    8. '0' → logprob: -9.015996932983398
    9. '')' → logprob: -9.265996932983398
    10. '{}' → logprob: -9.890996932983398

Token 24: ''+' (ID: 16370)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.37500399351119995
    2. '')' → logprob: -1.6250040531158447
    3. 'ser' → logprob: -2.8750040531158447
    4. ''+' → logprob: -4.250003814697266
    5. 'n' → logprob: -5.000003814697266
    6. 'r' → logprob: -5.125003814697266
    7. '+' → logprob: -5.500003814697266
    8. ''u' → logprob: -5.875003814697266
    9. '-' → logprob: -6.375003814697266
    10. 'u' → logprob: -6.375003814697266

Token 25: 'u' (ID: 84)
  Prédit: 'u'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'u' → logprob: -0.0003633521846495569
    2. ' u' → logprob: -8.00036334991455
    3. ''u' → logprob: -11.25036334991455
    4. 'str' → logprob: -12.50036334991455
    5. 's' → logprob: -12.62536334991455
    6. ''' → logprob: -12.75036334991455
    7. ' ' → logprob: -13.62536334991455
    8. '[u' → logprob: -13.87536334991455
    9. '_' → logprob: -14.50036334991455
    10. '	u' → logprob: -14.62536334991455

Token 26: '
' (ID: 198)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 27: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06690278649330139
    2. '<|end|>' → logprob: -2.9419028759002686
    3. 's' → logprob: -4.8169026374816895
    4. '    
' → logprob: -6.4419026374816895
    5. '<|end|>' → logprob: -7.5669026374816895
    6. 'd' → logprob: -7.9419026374816895
    7. '
' → logprob: -8.066903114318848
    8. 'graph' → logprob: -8.316903114318848
    9. '	graph' → logprob: -9.066903114318848
    10. '```' → logprob: -9.066903114318848

Token 28: ' d' (ID: 272)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 29: '='' (ID: 2053)
  Prédit: '=''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '='' → logprob: -0.028468716889619827
    2. '=' → logprob: -3.653468608856201
    3. '=int' → logprob: -6.653468608856201
    4. '=d' → logprob: -7.528468608856201
    5. ''' → logprob: -9.02846908569336
    6. '+='' → logprob: -9.02846908569336
    7. '=('' → logprob: -10.52846908569336
    8. '=''' → logprob: -11.02846908569336
    9. ' ='' → logprob: -11.40346908569336
    10. ''=' → logprob: -11.52846908569336

Token 30: 'd' (ID: 67)
  Prédit: 'd'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.7006598711013794
    2. ''d' → logprob: -0.7006598711013794
    3. ' d' → logprob: -5.45065975189209
    4. 'u' → logprob: -6.57565975189209
    5. ''u' → logprob: -6.95065975189209
    6. ''' → logprob: -7.32565975189209
    7. ''s' → logprob: -9.20065975189209
    8. ' '' → logprob: -10.45065975189209
    9. 's' → logprob: -11.45065975189209
    10. ' u' → logprob: -12.07565975189209

Token 31: ''+' (ID: 16370)
  Prédit: ''+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''+' → logprob: -0.18195104598999023
    2. ''' → logprob: -2.4319510459899902
    3. '+' → logprob: -2.8069510459899902
    4. 'd' → logprob: -4.68195104598999
    5. '+d' → logprob: -5.93195104598999
    6. '')' → logprob: -6.05695104598999
    7. '''' → logprob: -6.30695104598999
    8. ''''' → logprob: -7.43195104598999
    9. ' d' → logprob: -7.43195104598999
    10. ''d' → logprob: -8.056951522827148

Token 32: 'd' (ID: 67)
  Prédit: 'd'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -5.5577775128767826e-06
    2. ' d' → logprob: -12.125005722045898
    3. '	d' → logprob: -20.6250057220459
    4. '<|end|>' → logprob: -21.6250057220459
    5. ')d' → logprob: -21.7500057220459
    6. ''d' → logprob: -21.8750057220459
    7. 'u' → logprob: -22.7500057220459
    8. ',d' → logprob: -23.2500057220459
    9. 'д' → logprob: -23.3750057220459
    10. ' ' → logprob: -23.5000057220459

Token 33: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.009720788337290287
    2. '<|end|>' → logprob: -5.134720802307129
    3. '
' → logprob: -6.259720802307129
    4. 'graph' → logprob: -7.509720802307129
    5. '```' → logprob: -7.884720802307129
    6. '	graph' → logprob: -8.134720802307129
    7. ' graph' → logprob: -8.134720802307129
    8. ' if' → logprob: -9.384720802307129
    9. '<|end|>' → logprob: -9.384720802307129
    10. '    
' → logprob: -9.759720802307129

Token 34: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4667142331600189
    2. '<|end|>' → logprob: -1.2167142629623413
    3. ' if' → logprob: -3.5917141437530518
    4. ' graph' → logprob: -4.216714382171631
    5. 'graph' → logprob: -4.591714382171631
    6. '	graph' → logprob: -4.716714382171631
    7. '```' → logprob: -5.341714382171631
    8. 'if' → logprob: -5.716714382171631
    9. '<|end|>' → logprob: -6.216714382171631
    10. '    
' → logprob: -6.216714382171631

Token 35: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.4095028042793274
    2. 'graph' → logprob: -1.9095027446746826
    3. ' if' → logprob: -2.1595027446746826
    4. '   ' → logprob: -2.7845027446746826
    5. ' graph' → logprob: -4.909502983093262
    6. '```' → logprob: -6.159502983093262
    7. '
' → logprob: -7.784502983093262
    8. '	graph' → logprob: -8.534502983093262
    9. '<|end|>' → logprob: -8.784502983093262
    10. '``' → logprob: -9.159502983093262

Token 36: ' s' (ID: 265)
  Prédit: ' u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' u' → logprob: -0.003634634893387556
    2. 'u' → logprob: -5.628634452819824
    3. ' '' → logprob: -11.503634452819824
    4. ' s' → logprob: -11.628634452819824
    5. ' not' → logprob: -12.128634452819824
    6. ' d' → logprob: -12.628634452819824
    7. ' ' → logprob: -13.128634452819824
    8. ''u' → logprob: -13.128634452819824
    9. 's' → logprob: -14.003634452819824
    10. '	u' → logprob: -14.503634452819824

Token 37: '=='' (ID: 20651)
  Prédit: ' not'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.07702814042568207
    2. ' in' → logprob: -3.2020280361175537
    3. ' ==' → logprob: -3.7020280361175537
    4. '==' → logprob: -5.327028274536133
    5. 'not' → logprob: -5.827028274536133
    6. 'in' → logprob: -7.202028274536133
    7. '=' → logprob: -9.952028274536133
    8. '[' → logprob: -10.327028274536133
    9. '!=' → logprob: -10.452028274536133
    10. ' !=' → logprob: -10.577028274536133

Token 38: 'lock' (ID: 2802)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.7896658778190613
    2. '1' → logprob: -2.789665937423706
    3. 'a' → logprob: -2.789665937423706
    4. 'u' → logprob: -3.289665937423706
    5. 'f' → logprob: -3.414665937423706
    6. 'i' → logprob: -3.539665937423706
    7. '0' → logprob: -3.664665937423706
    8. '-' → logprob: -3.914665937423706
    9. 'r' → logprob: -3.914665937423706
    10. 'in' → logprob: -4.039665699005127

Token 39: '':
' (ID: 7669)
  Prédit: '':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '':' → logprob: -0.18909916281700134
    2. ':' → logprob: -2.189099073410034
    3. 'ed' → logprob: -3.189099073410034
    4. 'e' → logprob: -4.689099311828613
    5. ''' → logprob: -5.064099311828613
    6. 'er' → logprob: -7.439099311828613
    7. '')' → logprob: -7.689099311828613
    8. ''):' → logprob: -7.689099311828613
    9. ''ed' → logprob: -7.939099311828613
    10. '':'' → logprob: -8.189099311828613

Token 40: '       ' (ID: 309)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.03117983415722847
    2. '   ' → logprob: -3.656179904937744
    3. ':
' → logprob: -6.281179904937744
    4. 'graph' → logprob: -6.406179904937744
    5. ' graph' → logprob: -7.156179904937744
    6. '	graph' → logprob: -8.656179428100586
    7. ' :' → logprob: -9.156179428100586
    8. '       ' → logprob: -9.781179428100586
    9. ' if' → logprob: -10.531179428100586
    10. '):' → logprob: -10.531179428100586

Token 41: ' graph' (ID: 7465)
  Prédit: 'graph'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'graph' (adapté à ' graph') → logprob: -0.5800309777259827
    2. ' graph' → logprob: -0.8300309777259827
    3. '	graph' → logprob: -6.205030918121338
    4. '   ' → logprob: -6.455030918121338
    5. ' if' → logprob: -8.330031394958496
    6. 'if' → logprob: -8.705031394958496
    7. '(graph' → logprob: -10.955031394958496
    8. ' ' → logprob: -11.080031394958496
    9. 'raph' → logprob: -11.830031394958496
    10. '_graph' → logprob: -12.330031394958496

Token 42: '.setdefault' (ID: 113053)
  Prédit: '[u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[u' → logprob: -0.020588718354701996
    2. '.setdefault' → logprob: -3.8955886363983154
    3. '[' → logprob: -10.145588874816895
    4. '['' → logprob: -12.645588874816895
    5. '[user' → logprob: -14.020588874816895
    6. '[n' → logprob: -14.145588874816895
    7. '[f' → logprob: -14.645588874816895
    8. '][' → logprob: -14.770588874816895
    9. '\[' → logprob: -15.395588874816895
    10. '[v' → logprob: -15.520588874816895

Token 43: '(d' (ID: 2572)
  Prédit: '(u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(u' → logprob: -2.4868770196917467e-05
    2. '(' → logprob: -11.000024795532227
    3. '(s' → logprob: -12.500024795532227
    4. '(d' → logprob: -13.000024795532227
    5. 'u' → logprob: -13.875024795532227
    6. '('' → logprob: -14.750024795532227
    7. '(graph' → logprob: -15.250024795532227
    8. '(n' → logprob: -15.625024795532227
    9. '[u' → logprob: -16.125024795532227
    10. '(
' → logprob: -17.000024795532227

Token 44: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0044666738249361515
    2. ',set' → logprob: -5.629466533660889
    3. ',{' → logprob: -7.504466533660889
    4. '[],' → logprob: -8.629467010498047
    5. 'set' → logprob: -10.379467010498047
    6. ' ,' → logprob: -10.504467010498047
    7. ',[' → logprob: -10.629467010498047
    8. '{},' → logprob: -11.254467010498047
    9. ',{
' → logprob: -12.004467010498047
    10. ',u' → logprob: -12.379467010498047

Token 45: '[]' (ID: 1951)
  Prédit: '{})'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '{})' → logprob: -0.777184009552002
    2. '[])' → logprob: -1.527184009552002
    3. '[]' → logprob: -2.027184009552002
    4. 'set' → logprob: -2.027184009552002
    5. '{}' → logprob: -3.527184009552002
    6. '{'' → logprob: -5.027184009552002
    7. '[' → logprob: -5.152184009552002
    8. '{' → logprob: -5.652184009552002
    9. '[u' → logprob: -5.902184009552002
    10. ' set' → logprob: -6.277184009552002

Token 46: ').' (ID: 741)
  Prédit: ').'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ').' → logprob: -0.005453124642372131
    2. ')' → logprob: -5.255453109741211
    3. '.append' → logprob: -8.755453109741211
    4. ' ).' → logprob: -10.130453109741211
    5. '[' → logprob: -12.880453109741211
    6. 'append' → logprob: -13.005453109741211
    7. '   ' → logprob: -13.005453109741211
    8. ')[' → logprob: -13.005453109741211
    9. '.' → logprob: -13.630453109741211
    10. ' []).' → logprob: -13.630453109741211

Token 47: 'append' (ID: 9132)
  Prédit: 'append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'append' → logprob: -6.742448022123426e-05
    2. 'appen' → logprob: -10.250067710876465
    3. 'insert' → logprob: -11.125067710876465
    4. ' append' → logprob: -12.000067710876465
    5. 'extend' → logprob: -12.500067710876465
    6. 'add' → logprob: -13.000067710876465
    7. 'app' → logprob: -13.125067710876465
    8. '.append' → logprob: -13.375067710876465
    9. 'appe' → logprob: -14.875067710876465
    10. 'ap' → logprob: -14.875067710876465

Token 48: '(u' (ID: 17057)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'u' → logprob: -0.008991763927042484
    2. ''u' → logprob: -5.258991718292236
    3. ' u' → logprob: -5.883991718292236
    4. '(u' → logprob: -7.008991718292236
    5. ''' → logprob: -10.758992195129395
    6. '('' → logprob: -11.383992195129395
    7. '[u' → logprob: -11.383992195129395
    8. ' (' → logprob: -12.133992195129395
    9. '   ' → logprob: -12.633992195129395
    10. '(' → logprob: -12.633992195129395

Token 49: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.480199954239652e-05
    2. ')
' → logprob: -9.875064849853516
    3. ' )' → logprob: -11.500064849853516
    4. '))' → logprob: -13.500064849853516
    5. '')' → logprob: -14.875064849853516
    6. '   ' → logprob: -15.125064849853516
    7. '())' → logprob: -15.375064849853516
    8. '`)' → logprob: -15.875064849853516
    9. ')
' → logprob: -15.875064849853516
    10. ')#' → logprob: -16.625064849853516

Token 50: '   ' (ID: 271)
  Prédit: 'elif'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'elif' → logprob: -1.1117663383483887
    2. 'else' → logprob: -1.3617663383483887
    3. '<|end|>' → logprob: -1.3617663383483887
    4. ')' → logprob: -2.4867663383483887
    5. '
' → logprob: -3.4867663383483887
    6. ' else' → logprob: -4.111766338348389
    7. ' elif' → logprob: -4.611766338348389
    8. '<|end|>' → logprob: -4.861766338348389
    9. '   ' → logprob: -5.611766338348389
    10. '\n' → logprob: -6.486766338348389

Token 51: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.676604688167572
    2. 'elif' → logprob: -1.5516047477722168
    3. '   ' → logprob: -1.6766047477722168
    4. '<|end|>' → logprob: -2.926604747772217
    5. ' else' → logprob: -3.801604747772217
    6. ' elif' → logprob: -5.176604747772217
    7. ')' → logprob: -5.176604747772217
    8. '```' → logprob: -6.176604747772217
    9. '
' → logprob: -7.301604747772217
    10. ' ' → logprob: -7.301604747772217

Token 52: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.450469970703125
    2. '       ' → logprob: -1.200469970703125
    3. ':
' → logprob: -2.825469970703125
    4. '   ' → logprob: -6.700469970703125
    5. 'graph' → logprob: -7.700469970703125
    6. ' graph' → logprob: -8.575469970703125
    7. '(graph' → logprob: -8.950469970703125
    8. ' :
' → logprob: -10.200469970703125
    9. '	graph' → logprob: -10.575469970703125
    10. '.' → logprob: -10.700469970703125

Token 53: '       ' (ID: 309)
  Prédit: 'graph'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'graph' → logprob: -0.25762641429901123
    2. ' graph' → logprob: -1.5076264142990112
    3. '   ' → logprob: -5.757626533508301
    4. '	graph' → logprob: -6.257626533508301
    5. '       ' → logprob: -7.757626533508301
    6. '(graph' → logprob: -9.6326265335083
    7. '```' → logprob: -10.5076265335083
    8. '
' → logprob: -11.0076265335083
    9. ' ' → logprob: -11.0076265335083
    10. 'raph' → logprob: -12.0076265335083

Token 54: ' graph' (ID: 7465)
  Prédit: 'graph'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'graph' (adapté à ' graph') → logprob: -0.012563098222017288
    2. ' graph' → logprob: -4.387563228607178
    3. '	graph' → logprob: -10.38756275177002
    4. '   ' → logprob: -12.13756275177002
    5. '(graph' → logprob: -12.26256275177002
    6. ' ' → logprob: -13.51256275177002
    7. 'g' → logprob: -13.63756275177002
    8. '.graph' → logprob: -13.76256275177002
    9. 'u' → logprob: -13.76256275177002
    10. '       ' → logprob: -13.88756275177002

Token 55: '.setdefault' (ID: 113053)
  Prédit: '.setdefault'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.setdefault' → logprob: -0.0003024537581950426
    2. '.' → logprob: -8.1253023147583
    3. '.set' → logprob: -12.6253023147583
    4. '.get' → logprob: -13.6253023147583
    5. ' .' → logprob: -13.7503023147583
    6. '[' → logprob: -14.7503023147583
    7. '[u' → logprob: -16.250303268432617
    8. '{}.' → logprob: -16.500303268432617
    9. '=' → logprob: -16.875303268432617
    10. '   ' → logprob: -17.000303268432617

Token 56: '(u' (ID: 17057)
  Prédit: '(u'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(u' → logprob: -0.25211939215660095
    2. '(d' → logprob: -1.5021194219589233
    3. '(' → logprob: -8.627119064331055
    4. '(s' → logprob: -12.127119064331055
    5. 'u' → logprob: -12.627119064331055
    6. '('' → logprob: -14.877119064331055
    7. '(n' → logprob: -15.002119064331055
    8. ' (' → logprob: -15.127119064331055
    9. 'd' → logprob: -15.377119064331055
    10. '(a' → logprob: -15.627119064331055

Token 57: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00018518301658332348
    2. '[],' → logprob: -8.750185012817383
    3. ',[' → logprob: -11.500185012817383
    4. '[]' → logprob: -11.750185012817383
    5. ' ,' → logprob: -12.875185012817383
    6. 'append' → logprob: -13.125185012817383
    7. ',d' → logprob: -13.500185012817383
    8. '，' → logprob: -14.625185012817383
    9. '.append' → logprob: -15.125185012817383
    10. ' ' → logprob: -15.125185012817383

Token 58: '[]' (ID: 1951)
  Prédit: '[]'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.00726620526984334
    2. '[])' → logprob: -5.257266044616699
    3. '[d' → logprob: -6.382266044616699
    4. ' []).' → logprob: -8.8822660446167
    5. '[' → logprob: -9.0072660446167
    6. 'd' → logprob: -10.7572660446167
    7. ').' → logprob: -11.2572660446167
    8. '[u' → logprob: -11.7572660446167
    9. '[]
' → logprob: -11.7572660446167
    10. ')' → logprob: -11.8822660446167

Token 59: ').' (ID: 741)
  Prédit: ').'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ').' → logprob: -0.0003044802288059145
    2. ')' → logprob: -8.125304222106934
    3. '.append' → logprob: -11.875304222106934
    4. '.' → logprob: -14.375304222106934
    5. ' ).' → logprob: -15.000304222106934
    6. '   ' → logprob: -15.625304222106934
    7. 'append' → logprob: -16.62530517578125
    8. '').' → logprob: -17.12530517578125
    9. '`).' → logprob: -17.37530517578125
    10. '[' → logprob: -17.62530517578125

Token 60: 'append' (ID: 9132)
  Prédit: 'append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'append' → logprob: -5.512236498361744e-07
    2. 'appen' → logprob: -15.000000953674316
    3. ' append' → logprob: -16.25
    4. 'add' → logprob: -16.375
    5. 'extend' → logprob: -18.125
    6. '.append' → logprob: -18.25
    7. '	append' → logprob: -18.375
    8. 'app' → logprob: -19.375
    9. '   ' → logprob: -19.75
    10. 'appe' → logprob: -20.0

Token 61: '(d' (ID: 2572)
  Prédit: '(d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(d' → logprob: -3.054500666621607e-06
    2. '(' → logprob: -12.75000286102295
    3. 'd' → logprob: -16.750003814697266
    4. '('' → logprob: -18.625003814697266
    5. '((' → logprob: -18.750003814697266
    6. '(s' → logprob: -19.625003814697266
    7. ' (' → logprob: -20.750003814697266
    8. '(D' → logprob: -21.500003814697266
    9. '	d' → logprob: -21.875003814697266
    10. '(v' → logprob: -22.125003814697266

Token 62: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -6.704273118884885e-07
    2. ')
' → logprob: -15.250000953674316
    3. '))' → logprob: -15.750000953674316
    4. ' )' → logprob: -15.750000953674316
    5. '')' → logprob: -17.0
    6. ')#' → logprob: -18.5
    7. '`)' → logprob: -19.0
    8. '())' → logprob: -19.75
    9. ')`' → logprob: -19.75
    10. ')))' → logprob: -20.0

Token 63: 'visited' (ID: 52453)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.7274112105369568
    2. ')' → logprob: -1.6024112701416016
    3. '#' → logprob: -2.1024112701416016
    4. 'n' → logprob: -3.1024112701416016
    5. '
' → logprob: -3.6024112701416016
    6. 'print' → logprob: -4.227411270141602
    7. '```' → logprob: -4.352411270141602
    8. 'u' → logprob: -4.477411270141602
    9. '<|end|>' → logprob: -4.477411270141602
    10. ']' → logprob: -4.727411270141602

Token 64: '=set' (ID: 166509)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.12333223223686218
    2. ' =' → logprob: -2.3733322620391846
    3. '[' → logprob: -3.9983322620391846
    4. '.setdefault' → logprob: -6.4983320236206055
    5. '={}' → logprob: -7.1233320236206055
    6. '=[]' → logprob: -7.4983320236206055
    7. '_' → logprob: -7.6233320236206055
    8. '.' → logprob: -7.8733320236206055
    9. ',' → logprob: -8.873332023620605
    10. ']' → logprob: -9.373332023620605

Token 65: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.2813414931297302
    2. '(' → logprob: -1.406341552734375
    3. '()
' → logprob: -9.281341552734375
    4. '([]' → logprob: -11.406341552734375
    5. '(),' → logprob: -11.531341552734375
    6. '((' → logprob: -11.781341552734375
    7. ' ()' → logprob: -11.781341552734375
    8. '([' → logprob: -12.031341552734375
    9. '(
' → logprob: -12.281341552734375
    10. '()`' → logprob: -12.281341552734375

Token 66: 'rec' (ID: 9285)
  Prédit: 'stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'stack' → logprob: -0.015516313724219799
    2. 'def' → logprob: -4.51551628112793
    3. 'for' → logprob: -6.39051628112793
    4. ' stack' → logprob: -6.51551628112793
    5. ')' → logprob: -7.89051628112793
    6. '_stack' → logprob: -8.39051628112793
    7. '(stack' → logprob: -8.64051628112793
    8. 'queue' → logprob: -9.26551628112793
    9. '<|end|>' → logprob: -9.51551628112793
    10. '	stack' → logprob: -9.64051628112793

Token 67: 'stack' (ID: 15145)
  Prédit: '_stack'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_stack' → logprob: -0.30628907680511475
    2. 'ursion' → logprob: -1.4312890768051147
    3. 'stack' → logprob: -4.056289196014404
    4. 'Stack' → logprob: -5.556289196014404
    5. 'ursive' → logprob: -5.806289196014404
    6. '_' → logprob: -8.306288719177246
    7. 'urrent' → logprob: -9.681288719177246
    8. 'urs' → logprob: -9.681288719177246
    9. '(stack' → logprob: -9.806288719177246
    10. 'ursively' → logprob: -9.931288719177246

Token 68: '=set' (ID: 166509)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.1654372364282608
    2. ' =' → logprob: -2.1654372215270996
    3. '=set' → logprob: -3.2904372215270996
    4. '={}' → logprob: -8.165437698364258
    5. '=[]' → logprob: -9.040437698364258
    6. ')' → logprob: -10.040437698364258
    7. '<|end|>' → logprob: -10.290437698364258
    8. ' ' → logprob: -11.040437698364258
    9. '={' → logprob: -11.415437698364258
    10. '=new' → logprob: -12.540437698364258

Token 69: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0010554377222433686
    2. '(' → logprob: -6.8760552406311035
    3. '()
' → logprob: -11.626055717468262
    4. '()`' → logprob: -13.251055717468262
    5. '()

' → logprob: -13.251055717468262
    6. '()<' → logprob: -13.376055717468262
    7. '();' → logprob: -13.501055717468262
    8. '()]' → logprob: -13.751055717468262
    9. ' ()' → logprob: -14.001055717468262
    10. '()}' → logprob: -14.251055717468262

Token 70: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.002496706321835518
    2. 'for' → logprob: -6.127496719360352
    3. '
' → logprob: -8.877496719360352
    4. '```' → logprob: -9.002496719360352
    5. ':' → logprob: -11.502496719360352
    6. '\' → logprob: -12.002496719360352
    7. 'de' → logprob: -12.252496719360352
    8. ':def' → logprob: -12.377496719360352
    9. ' def' → logprob: -12.627496719360352
    10. '\n' → logprob: -12.627496719360352

Token 71: ' dfs' (ID: 51252)
  Prédit: ' dfs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' dfs' → logprob: -0.006343003828078508
    2. 'dfs' → logprob: -5.131342887878418
    3. ' is' → logprob: -9.131342887878418
    4. ' cycle' → logprob: -9.131342887878418
    5. ' has' → logprob: -9.631342887878418
    6. ' can' → logprob: -9.881342887878418
    7. ' DFS' → logprob: -10.131342887878418
    8. ' detect' → logprob: -11.131342887878418
    9. ' top' → logprob: -12.006342887878418
    10. '```' → logprob: -12.506342887878418

Token 72: '(v' (ID: 6932)
  Prédit: '(node'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(node' → logprob: -0.2948759198188782
    2. '(' → logprob: -1.7948758602142334
    3. '(u' → logprob: -2.4198758602142334
    4. '(x' → logprob: -8.919876098632812
    5. '(vertex' → logprob: -9.919876098632812
    6. ' (' → logprob: -10.794876098632812
    7. '(v' → logprob: -10.919876098632812
    8. '(user' → logprob: -10.919876098632812
    9. '(graph' → logprob: -11.044876098632812
    10. '(n' → logprob: -11.669876098632812

Token 73: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.1285734474658966
    2. ',' → logprob: -2.128573417663574
    3. ',v' → logprob: -7.128573417663574
    4. '):
' → logprob: -7.503573417663574
    5. ')' → logprob: -8.253573417663574
    6. '(v' → logprob: -12.003573417663574
    7. ' ):' → logprob: -12.378573417663574
    8. ',node' → logprob: -12.378573417663574
    9. ':' → logprob: -12.878573417663574
    10. ' ,' → logprob: -13.128573417663574

Token 74: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00585270905867219
    2. '<|end|>' → logprob: -6.630852699279785
    3. '
' → logprob: -6.755852699279785
    4. ':' → logprob: -6.880852699279785
    5. '    
' → logprob: -7.005852699279785
    6. '```' → logprob: -7.630852699279785
    7. '(' → logprob: -8.630852699279785
    8. '  
' → logprob: -8.755852699279785
    9. ' ' → logprob: -9.005852699279785
    10. '  ' → logprob: -9.630852699279785

Token 75: ' visited' (ID: 18416)
  Prédit: 'visited'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'visited' (adapté à ' visited') → logprob: -0.8958510160446167
    2. '   ' → logprob: -1.0208510160446167
    3. ' visited' → logprob: -1.6458510160446167
    4. ' if' → logprob: -3.5208511352539062
    5. 'if' → logprob: -5.020851135253906
    6. 'rec' → logprob: -7.645851135253906
    7. '    
' → logprob: -7.770851135253906
    8. ' for' → logprob: -8.020851135253906
    9. ' rec' → logprob: -8.145851135253906
    10. ' ' → logprob: -8.770851135253906

Token 76: '.add' (ID: 1950)
  Prédit: '.add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.add' → logprob: -0.0002619318547658622
    2. '.' → logprob: -8.250262260437012
    3. '.setdefault' → logprob: -15.375262260437012
    4. ' .' → logprob: -16.000261306762695
    5. '.append' → logprob: -16.250261306762695
    6. '.Add' → logprob: -16.750261306762695
    7. 'add' → logprob: -17.125261306762695
    8. '.update' → logprob: -17.250261306762695
    9. ')add' → logprob: -17.250261306762695
    10. ').' → logprob: -17.750261306762695

Token 77: '(v' (ID: 6932)
  Prédit: '(v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(v' → logprob: -0.5759516358375549
    2. '(' → logprob: -0.8259516358375549
    3. '('' → logprob: -12.95095157623291
    4. '(
' → logprob: -13.07595157623291
    5. '(value' → logprob: -13.20095157623291
    6. ')' → logprob: -13.70095157623291
    7. '(

' → logprob: -14.07595157623291
    8. '((' → logprob: -14.45095157623291
    9. '(x' → logprob: -14.70095157623291
    10. '(V' → logprob: -14.70095157623291

Token 78: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.04872192069888115
    2. ')
' → logprob: -3.0487220287323
    3. '   ' → logprob: -9.048722267150879
    4. ')
' → logprob: -12.173722267150879
    5. '<|end|>' → logprob: -12.298722267150879
    6. ')v' → logprob: -13.298722267150879
    7. '
' → logprob: -13.423722267150879
    8. ')return' → logprob: -14.048722267150879
    9. ')\' → logprob: -14.673722267150879
    10. '')' → logprob: -15.048722267150879

Token 79: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06591935455799103
    2. '
' → logprob: -2.8159193992614746
    3. ' rec' → logprob: -6.065919399261475
    4. '    
' → logprob: -6.940919399261475
    5. 'rec' → logprob: -8.190918922424316
    6. '<|end|>' → logprob: -8.940918922424316
    7. '	rec' → logprob: -9.190918922424316
    8. ' if' → logprob: -9.940918922424316
    9. '```' → logprob: -10.690918922424316
    10. '  
' → logprob: -11.565918922424316

Token 80: ' rec' (ID: 1369)
  Prédit: 'rec'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'rec' (adapté à ' rec') → logprob: -1.6240566083070007e-06
    2. ' rec' → logprob: -14.000001907348633
    3. '   ' → logprob: -14.250001907348633
    4. '	rec' → logprob: -17.875001907348633
    5. 'for' → logprob: -19.375001907348633
    6. 'if' → logprob: -19.500001907348633
    7. 'rep' → logprob: -19.500001907348633
    8. '
' → logprob: -19.500001907348633
    9. '```' → logprob: -20.500001907348633
    10. '(rec' → logprob: -21.375001907348633

Token 81: 'stack' (ID: 15145)
  Prédit: 'stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' → logprob: -1.3856492842023727e-06
    2. 'st' → logprob: -14.000000953674316
    3. '(stack' → logprob: -16.500001907348633
    4. ' stack' → logprob: -16.500001907348633
    5. '_stack' → logprob: -16.500001907348633
    6. 's' → logprob: -16.750001907348633
    7. 'sta' → logprob: -16.875001907348633
    8. '	stack' → logprob: -16.875001907348633
    9. '```' → logprob: -18.125001907348633
    10. 'Stack' → logprob: -18.375001907348633

Token 82: '.add' (ID: 1950)
  Prédit: '.add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.add' → logprob: -0.003178544342517853
    2. '.' → logprob: -5.753178596496582
    3. ' .' → logprob: -15.003178596496582
    4. '.setdefault' → logprob: -15.128178596496582
    5. 'add' → logprob: -16.503177642822266
    6. '.Add' → logprob: -16.753177642822266
    7. '.=' → logprob: -17.253177642822266
    8. '.update' → logprob: -17.753177642822266
    9. '.remove' → logprob: -18.128177642822266
    10. ')add' → logprob: -18.253177642822266

Token 83: '(v' (ID: 6932)
  Prédit: '(v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(v' → logprob: -0.00029625516617670655
    2. '(' → logprob: -8.125296592712402
    3. ' (' → logprob: -16.000295639038086
    4. '(x' → logprob: -17.625295639038086
    5. '(iv' → logprob: -18.250295639038086
    6. '(u' → logprob: -18.500295639038086
    7. '(q' → logprob: -18.750295639038086
    8. ')' → logprob: -19.000295639038086
    9. '(n' → logprob: -19.125295639038086
    10. '('' → logprob: -19.250295639038086

Token 84: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0015160536859184504
    2. ')
' → logprob: -6.501515865325928
    3. '   ' → logprob: -11.376516342163086
    4. ' )' → logprob: -13.751516342163086
    5. ')
' → logprob: -14.501516342163086
    6. ')return' → logprob: -15.751516342163086
    7. ')

' → logprob: -15.751516342163086
    8. '')' → logprob: -15.876516342163086
    9. ' ' → logprob: -17.251516342163086
    10. '))' → logprob: -17.376516342163086

Token 85: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.036516301333904266
    2. 'for' → logprob: -3.6615161895751953
    3. ' for' → logprob: -4.786516189575195
    4. '
' → logprob: -6.536516189575195
    5. '    
' → logprob: -8.161516189575195
    6. '	for' → logprob: -10.036516189575195
    7. '<|end|>' → logprob: -11.286516189575195
    8. ' 
' → logprob: -12.036516189575195
    9. '```' → logprob: -12.536516189575195
    10. ' ' → logprob: -12.661516189575195

Token 86: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.0011771318968385458
    2. ' for' → logprob: -6.7511773109436035
    3. 'if' → logprob: -12.376176834106445
    4. '   ' → logprob: -12.876176834106445
    5. '```' → logprob: -17.001176834106445
    6. 'neighbors' → logprob: -17.126176834106445
    7. '	for' → logprob: -17.251176834106445
    8. '    
' → logprob: -18.876176834106445
    9. 'next' → logprob: -19.251176834106445
    10. '
' → logprob: -19.751176834106445

Token 87: ' nv' (ID: 68641)
  Prédit: 'neighbor'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'neighbor' → logprob: -0.7790949940681458
    2. ' neighbor' → logprob: -1.154094934463501
    3. ' neighbour' → logprob: -2.404094934463501
    4. 'w' → logprob: -3.404094934463501
    5. ' nei' → logprob: -3.779094934463501
    6. 'nei' → logprob: -3.904094934463501
    7. 'ne' → logprob: -3.904094934463501
    8. 'node' → logprob: -4.52909517288208
    9. ' node' → logprob: -4.90409517288208
    10. ' w' → logprob: -4.90409517288208

Token 88: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.05494129657745361
    2. 'in' → logprob: -2.929941177368164
    3. '	in' → logprob: -10.179941177368164
    4. ' ' → logprob: -11.554941177368164
    5. 'n' → logprob: -11.929941177368164
    6. '<|end|>' → logprob: -13.554941177368164
    7. '   ' → logprob: -14.054941177368164
    8. '  ' → logprob: -14.679941177368164
    9. 's' → logprob: -15.429941177368164
    10. '<|end|>' → logprob: -15.554941177368164

Token 89: ' graph' (ID: 7465)
  Prédit: ' graph'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' graph' → logprob: -0.01816117763519287
    2. 'graph' → logprob: -4.018161296844482
    3. '	graph' → logprob: -11.893160820007324
    4. '(graph' → logprob: -12.393160820007324
    5. ' ' → logprob: -15.768160820007324
    6. ' ' → logprob: -16.64316177368164
    7. 'raph' → logprob: -16.64316177368164
    8. 'Graph' → logprob: -18.51816177368164
    9. '_graph' → logprob: -19.26816177368164
    10. '.graph' → logprob: -19.76816177368164

Token 90: '.get' (ID: 775)
  Prédit: '.get'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.get' → logprob: -0.10034685581922531
    2. '[v' → logprob: -2.350346803665161
    3. '.' → logprob: -8.975346565246582
    4. '.setdefault' → logprob: -11.600346565246582
    5. 'get' → logprob: -13.350346565246582
    6. ' .' → logprob: -13.975346565246582
    7. '[get' → logprob: -14.350346565246582
    8. '[' → logprob: -14.850346565246582
    9. '[g' → logprob: -15.100346565246582
    10. '.v' → logprob: -15.100346565246582

Token 91: '(v' (ID: 6932)
  Prédit: '(v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(v' → logprob: -0.008705805987119675
    2. '(' → logprob: -4.7587056159973145
    3. '(n' → logprob: -9.383706092834473
    4. '<|end|>' → logprob: -13.883706092834473
    5. '(x' → logprob: -14.133706092834473
    6. ' (' → logprob: -14.133706092834473
    7. '(iv' → logprob: -14.383706092834473
    8. '(i' → logprob: -14.383706092834473
    9. '(value' → logprob: -14.883706092834473
    10. '(
' → logprob: -15.133706092834473

Token 92: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.014719624072313309
    2. '(),' → logprob: -4.264719486236572
    3. '):' → logprob: -8.38971996307373
    4. ' ,' → logprob: -9.01471996307373
    5. '()' → logprob: -9.63971996307373
    6. '(),'' → logprob: -9.76471996307373
    7. ')' → logprob: -10.13971996307373
    8. '',' → logprob: -11.51471996307373
    9. '():' → logprob: -11.76471996307373
    10. '   ' → logprob: -12.13971996307373

Token 93: '[]' (ID: 1951)
  Prédit: '[]'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.5351868271827698
    2. '[]):' → logprob: -0.9101868271827698
    3. '):' → logprob: -4.910186767578125
    4. '[],' → logprob: -6.410186767578125
    5. '[])' → logprob: -6.410186767578125
    6. ' []' → logprob: -7.410186767578125
    7. '[]>' → logprob: -8.285186767578125
    8. ')' → logprob: -8.910186767578125
    9. '   ' → logprob: -9.660186767578125
    10. '[]}' → logprob: -9.910186767578125

Token 94: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0007004032959230244
    2. '):
' → logprob: -7.5007004737854
    3. ')' → logprob: -9.500699996948242
    4. ':' → logprob: -10.125699996948242
    5. '   ' → logprob: -10.750699996948242
    6. ' ):' → logprob: -11.625699996948242
    7. '):
' → logprob: -13.750699996948242
    8. '       ' → logprob: -14.375699996948242
    9. '):

' → logprob: -16.125699996948242
    10. '():' → logprob: -16.250699996948242

Token 95: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.04733191058039665
    2. '
' → logprob: -3.6723318099975586
    3. '<|end|>' → logprob: -4.047331809997559
    4. '   ' → logprob: -6.547331809997559
    5. '<|end|>' → logprob: -7.547331809997559
    6. '        
' → logprob: -7.922331809997559
    7. ' if' → logprob: -8.297331809997559
    8. ' 
' → logprob: -9.047331809997559
    9. ' ' → logprob: -9.047331809997559
    10. '    ' → logprob: -9.047331809997559

Token 96: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.12710124254226685
    2. 'if' (adapté à ' if') → logprob: -2.127101182937622
    3. '       ' → logprob: -8.752100944519043
    4. '        ' → logprob: -12.002100944519043
    5. ' ' → logprob: -12.877100944519043
    6. '           ' → logprob: -13.252100944519043
    7. '    ' → logprob: -13.252100944519043
    8. '   ' → logprob: -14.252100944519043
    9. '<|end|>' → logprob: -14.377100944519043
    10. ' not' → logprob: -14.502100944519043

Token 97: ' nv' (ID: 68641)
  Prédit: ' nv'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' nv' → logprob: -0.043010495603084564
    2. 'nv' → logprob: -3.1680104732513428
    3. ' not' → logprob: -12.418010711669922
    4. '_nv' → logprob: -12.918010711669922
    5. 'n' → logprob: -13.293010711669922
    6. ' ' → logprob: -14.043010711669922
    7. '   ' → logprob: -14.168010711669922
    8. ' n' → logprob: -15.168010711669922
    9. '(n' → logprob: -15.293010711669922
    10. ' nev' → logprob: -15.668010711669922

Token 98: ' not' (ID: 625)
  Prédit: ' not'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.2524363696575165
    2. 'not' → logprob: -1.5024363994598389
    3. ' in' → logprob: -8.252436637878418
    4. 'in' → logprob: -8.377436637878418
    5. '	not' → logprob: -11.752436637878418
    6. ')' → logprob: -12.377436637878418
    7. 'no' → logprob: -14.002436637878418
    8. ' ' → logprob: -14.127436637878418
    9. '<|end|>' → logprob: -14.127436637878418
    10. ' no' → logprob: -14.252436637878418

Token 99: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.6330327987670898
    2. 'in' → logprob: -0.7580327987670898
    3. 'visited' → logprob: -7.88303279876709
    4. '<|end|>' → logprob: -10.50803279876709
    5. '.' → logprob: -11.63303279876709
    6. ' visited' → logprob: -11.88303279876709
    7. 'to' → logprob: -12.50803279876709
    8. ' ' → logprob: -13.00803279876709
    9. ')' → logprob: -13.25803279876709
    10. '	in' → logprob: -13.50803279876709

Token 100: ' visited' (ID: 18416)
  Prédit: 'visited'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'visited' → logprob: -0.20141440629959106
    2. ' visited' → logprob: -1.7014143466949463
    3. ' ' → logprob: -14.576414108276367
    4. '   ' → logprob: -15.951414108276367
    5. 'Visited' → logprob: -15.951414108276367
    6. 'vis' → logprob: -16.201414108276367
    7. '```' → logprob: -16.576414108276367
    8. 'vist' → logprob: -17.076414108276367
    9. '.vis' → logprob: -17.201414108276367
    10. 'visit' → logprob: -17.513914108276367

Token 101: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.07565154880285263
    2. ':
' → logprob: -3.0756516456604004
    3. ' or' → logprob: -4.0756516456604
    4. ' and' → logprob: -4.7006516456604
    5. 'and' → logprob: -8.075651168823242
    6. '       ' → logprob: -9.325651168823242
    7. '           ' → logprob: -10.200651168823242
    8. 'or' → logprob: -10.325651168823242
    9. '<|end|>' → logprob: -10.325651168823242
    10. ' :' → logprob: -10.700651168823242

Token 102: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.3199148178100586
    2. ' and' → logprob: -1.9449148178100586
    3. ':' → logprob: -2.6949148178100586
    4. ' or' → logprob: -2.9449148178100586
    5. ':
' → logprob: -5.694914817810059
    6. '       ' → logprob: -5.694914817810059
    7. '<|end|>' → logprob: -6.069914817810059
    8. '<|end|>' → logprob: -7.944914817810059
    9. 'and' → logprob: -8.319914817810059
    10. '               ' → logprob: -8.569914817810059

Token 103: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.3019316494464874
    2. '               ' → logprob: -2.301931619644165
    3. 'if' (adapté à ' if') → logprob: -2.676931619644165
    4. ' dfs' → logprob: -3.176931619644165
    5. '
' → logprob: -3.301931619644165
    6. '           ' → logprob: -4.676931858062744
    7. 'dfs' → logprob: -6.051931858062744
    8. ' return' → logprob: -7.801931858062744
    9. 'return' → logprob: -8.426931381225586
    10. ' 
' → logprob: -8.801931381225586

Token 104: ' dfs' (ID: 51252)
  Prédit: 'dfs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dfs' → logprob: -0.575941801071167
    2. ' dfs' → logprob: -0.825941801071167
    3. 'df' → logprob: -14.075942039489746
    4. 'd' → logprob: -14.575942039489746
    5. ' not' → logprob: -14.700942039489746
    6. '   ' → logprob: -15.700942039489746
    7. ' DFS' → logprob: -15.825942039489746
    8. 'DFS' → logprob: -15.950942039489746
    9. 'not' → logprob: -15.950942039489746
    10. ' ' → logprob: -16.82594108581543

Token 105: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -8.125210297293961e-05
    2. '(' → logprob: -9.750081062316895
    3. ' (' → logprob: -10.750081062316895
    4. '(nx' → logprob: -13.875081062316895
    5. '(
' → logprob: -15.250081062316895
    6. '(v' → logprob: -16.37508201599121
    7. '(nd' → logprob: -16.37508201599121
    8. ')' → logprob: -16.62508201599121
    9. '(nb' → logprob: -16.87508201599121
    10. ' ' → logprob: -17.25008201599121

Token 106: 'v' (ID: 85)
  Prédit: 'v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -1.9027791495318525e-05
    2. ' nv' → logprob: -11.625019073486328
    3. '(n' → logprob: -12.125019073486328
    4. 'nv' → logprob: -12.750019073486328
    5. '(v' → logprob: -13.375019073486328
    6. '   ' → logprob: -17.250019073486328
    7. ' v' → logprob: -17.500019073486328
    8. ')' → logprob: -17.625019073486328
    9. '```' → logprob: -17.625019073486328
    10. '[v' → logprob: -18.125019073486328

Token 107: '):
' (ID: 1883)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.001498195226304233
    2. ')' → logprob: -6.751498222351074
    3. ' (' → logprob: -8.626498222351074
    4. 'nv' → logprob: -9.251498222351074
    5. '(' → logprob: -11.001498222351074
    6. '(v' → logprob: -11.626498222351074
    7. ' nv' → logprob: -11.876498222351074
    8. '):' → logprob: -12.001498222351074
    9. '   ' → logprob: -13.126498222351074
    10. ' ' → logprob: -13.251498222351074

Token 108: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.003657791530713439
    2. ' return' → logprob: -6.128657817840576
    3. 'return' → logprob: -6.878657817840576
    4. ':return' → logprob: -8.628657341003418
    5. ')' → logprob: -9.253657341003418
    6. '           ' → logprob: -9.503657341003418
    7. 'True' → logprob: -11.003657341003418
    8. ' True' → logprob: -11.003657341003418
    9. ')return' → logprob: -11.253657341003418
    10. '):
' → logprob: -12.003657341003418

Token 109: ' return' (ID: 622)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.21607175469398499
    2. 'return' (adapté à ' return') → logprob: -1.9660717248916626
    3. ' return' → logprob: -3.466071844100952
    4. '                   ' → logprob: -4.091071605682373
    5. 'True' → logprob: -5.466071605682373
    6. ' True' → logprob: -6.966071605682373
    7. '
' → logprob: -7.591071605682373
    8. '           ' → logprob: -8.341072082519531
    9. '```' → logprob: -8.841072082519531
    10. '   ' → logprob: -9.341072082519531

Token 110: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.0001584850688232109
    2. ' True' → logprob: -8.750158309936523
    3. '1' → logprob: -19.875158309936523
    4. '   ' → logprob: -20.375158309936523
    5. 'true' → logprob: -20.625158309936523
    6. '(True' → logprob: -21.000158309936523
    7. 'False' → logprob: -22.000158309936523
    8. ' ' → logprob: -23.625158309936523
    9. 'TRUE' → logprob: -23.875158309936523
    10. '=True' → logprob: -23.875158309936523

Token 111: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -9.014684110297821e-06
    2. '<|end|>' → logprob: -12.500008583068848
    3. '           ' → logprob: -12.875008583068848
    4. '```' → logprob: -13.625008583068848
    5. '   ' → logprob: -14.500008583068848
    6. '
' → logprob: -14.875008583068848
    7. 'elif' → logprob: -15.625008583068848
    8. '<|end|>' → logprob: -16.000009536743164
    9. '      ' → logprob: -16.375009536743164
    10. '        
' → logprob: -16.625009536743164

Token 112: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -2.1008713702030946e-06
    2. 'elif' → logprob: -14.000001907348633
    3. '           ' → logprob: -14.125001907348633
    4. '```' → logprob: -15.375001907348633
    5. '   ' → logprob: -15.625001907348633
    6. ' elif' → logprob: -16.375001907348633
    7. '<|end|>' → logprob: -17.000001907348633
    8. '      ' → logprob: -17.750001907348633
    9. '	' → logprob: -18.375001907348633
    10. '     ' → logprob: -18.625001907348633

Token 113: ' elif' (ID: 9497)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0004230475169606507
    2. 'elif' (adapté à ' elif') → logprob: -8.250423431396484
    3. ' elif' → logprob: -9.125423431396484
    4. '   ' → logprob: -10.750423431396484
    5. '<|end|>' → logprob: -11.250423431396484
    6. '           ' → logprob: -11.875423431396484
    7. '	elif' → logprob: -12.500423431396484
    8. '```' → logprob: -13.000423431396484
    9. '<|end|>' → logprob: -13.750423431396484
    10. ' ' → logprob: -14.000423431396484

Token 114: ' nv' (ID: 68641)
  Prédit: 'nv'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'nv' → logprob: -0.20141851902008057
    2. ' nv' → logprob: -1.7014185190200806
    3. 'n' → logprob: -12.82641887664795
    4. '_nv' → logprob: -13.70141887664795
    5. '```' → logprob: -14.82641887664795
    6. ' ' → logprob: -14.82641887664795
    7. '   ' → logprob: -16.076417922973633
    8. '
' → logprob: -16.701417922973633
    9. ' ' → logprob: -16.826417922973633
    10. 'nvarchar' → logprob: -16.951417922973633

Token 115: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.02324780821800232
    2. 'in' → logprob: -3.773247718811035
    3. ' ' → logprob: -13.148247718811035
    4. '	in' → logprob: -16.39824867248535
    5. '<|end|>' → logprob: -16.64824867248535
    6. ' ' → logprob: -17.02324867248535
    7. 'In' → logprob: -17.02324867248535
    8. 'n' → logprob: -18.02324867248535
    9. 'inthe' → logprob: -18.14824867248535
    10. '
' → logprob: -18.52324867248535

Token 116: ' rec' (ID: 1369)
  Prédit: ' rec'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' rec' → logprob: -0.3868711292743683
    2. 'rec' → logprob: -1.136871099472046
    3. '	rec' → logprob: -17.011871337890625
    4. ' ' → logprob: -17.886871337890625
    5. '(rec' → logprob: -18.261871337890625
    6. '
' → logprob: -19.261871337890625
    7. '_rec' → logprob: -19.511871337890625
    8. 'Rec' → logprob: -19.511871337890625
    9. '   ' → logprob: -20.011871337890625
    10. ' ' → logprob: -20.636871337890625

Token 117: 'stack' (ID: 15145)
  Prédit: 'stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' → logprob: -1.7432603272027336e-06
    2. 'rec' → logprob: -14.750001907348633
    3. 'st' → logprob: -15.000001907348633
    4. ' stack' → logprob: -15.000001907348633
    5. '	stack' → logprob: -15.375001907348633
    6. '_stack' → logprob: -16.500001907348633
    7. 'stackoverflow' → logprob: -16.750001907348633
    8. '(stack' → logprob: -16.750001907348633
    9. '.stack' → logprob: -17.500001907348633
    10. '   ' → logprob: -17.875001907348633

Token 118: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.24773873388767242
    2. ':
' → logprob: -1.6227387189865112
    3. '           ' → logprob: -4.247738838195801
    4. ':return' → logprob: -5.247738838195801
    5. '       ' → logprob: -6.247738838195801
    6. '):
' → logprob: -8.4977388381958
    7. '):' → logprob: -8.6227388381958
    8. ':

' → logprob: -10.3727388381958
    9. '   ' → logprob: -10.4977388381958
    10. '               ' → logprob: -10.7477388381958

Token 119: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0007728204363957047
    2. 'True' → logprob: -7.625772953033447
    3. 'return' → logprob: -9.125772476196289
    4. '               ' → logprob: -9.125772476196289
    5. ' True' → logprob: -9.750772476196289
    6. ' return' → logprob: -12.000772476196289
    7. '(True' → logprob: -14.125772476196289
    8. '       ' → logprob: -14.375772476196289
    9. '```' → logprob: -15.375772476196289
    10. '	       ' → logprob: -15.625772476196289

Token 120: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.6558179259300232
    2. '           ' → logprob: -0.9058179259300232
    3. '               ' → logprob: -3.530817985534668
    4. ' return' → logprob: -3.780817985534668
    5. 'True' → logprob: -3.780817985534668
    6. ' True' → logprob: -6.405817985534668
    7. '       ' → logprob: -8.780817985534668
    8. '   ' → logprob: -10.030817985534668
    9. 'true' → logprob: -12.155817985534668
    10. '
' → logprob: -12.155817985534668

Token 121: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.47407710552215576
    2. ' True' → logprob: -0.9740771055221558
    3. '(True' → logprob: -16.724077224731445
    4. ' ' → logprob: -18.349077224731445
    5. 'False' → logprob: -19.599077224731445
    6. '=True' → logprob: -19.599077224731445
    7. '1' → logprob: -20.599077224731445
    8. '   ' → logprob: -20.849077224731445
    9. 'Tr' → logprob: -22.724077224731445
    10. 'true' → logprob: -23.099077224731445

Token 122: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.9743012671824545e-05
    2. '
' → logprob: -11.625020027160645
    3. ' rec' → logprob: -12.250020027160645
    4. '```' → logprob: -13.000020027160645
    5. 'rec' → logprob: -13.625020027160645
    6. '       ' → logprob: -14.250020027160645
    7. '    
' → logprob: -14.250020027160645
    8. '           ' → logprob: -14.375020027160645
    9. 'return' → logprob: -16.000019073486328
    10. ' return' → logprob: -16.125019073486328

Token 123: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -6.480199954239652e-05
    2. 'rec' → logprob: -9.875064849853516
    3. ' rec' → logprob: -11.500064849853516
    4. '
' → logprob: -13.500064849853516
    5. '```' → logprob: -14.000064849853516
    6. '           ' → logprob: -14.750064849853516
    7. '       ' → logprob: -15.500064849853516
    8. 'return' → logprob: -15.625064849853516
    9. '    
' → logprob: -16.250064849853516
    10. '  ' → logprob: -17.500064849853516

Token 124: ' rec' (ID: 1369)
  Prédit: 'rec'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'rec' (adapté à ' rec') → logprob: -0.0007902132347226143
    2. ' rec' → logprob: -7.375790119171143
    3. '   ' → logprob: -8.7507905960083
    4. 'return' → logprob: -12.3757905960083
    5. '
' → logprob: -14.7507905960083
    6. '    
' → logprob: -15.2507905960083
    7. ' ' → logprob: -15.6257905960083
    8. '```' → logprob: -15.8757905960083
    9. '	rec' → logprob: -15.8757905960083
    10. 'rep' → logprob: -17.625789642333984

Token 125: 'stack' (ID: 15145)
  Prédit: 'stack'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'stack' → logprob: -1.0280383548888494e-06
    2. '(stack' → logprob: -14.125000953674316
    3. '	stack' → logprob: -16.125001907348633
    4. 'ursion' → logprob: -17.125001907348633
    5. '_stack' → logprob: -17.250001907348633
    6. ' stack' → logprob: -17.500001907348633
    7. 'return' → logprob: -18.125001907348633
    8. 'st' → logprob: -18.250001907348633
    9. '.stack' → logprob: -18.750001907348633
    10. 'stackoverflow' → logprob: -18.750001907348633

Token 126: '.remove' (ID: 7986)
  Prédit: '.remove'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.remove' → logprob: -0.00013357517309486866
    2. '.' → logprob: -9.500133514404297
    3. 'remove' → logprob: -10.000133514404297
    4. '.dis' → logprob: -11.250133514404297
    5. '.add' → logprob: -15.750133514404297
    6. '.clear' → logprob: -16.875133514404297
    7. ' remove' → logprob: -17.125133514404297
    8. '<|end|>' → logprob: -17.625133514404297
    9. '.Remove' → logprob: -17.750133514404297
    10. '	remove' → logprob: -18.000133514404297

Token 127: '(v' (ID: 6932)
  Prédit: '(v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(v' → logprob: -3.4121114822482923e-06
    2. '(' → logprob: -12.625003814697266
    3. '(n' → logprob: -17.250003814697266
    4. 'v' → logprob: -18.625003814697266
    5. ' (' → logprob: -19.375003814697266
    6. '(s' → logprob: -20.125003814697266
    7. '(V' → logprob: -21.000003814697266
    8. '(iv' → logprob: -21.125003814697266
    9. ')v' → logprob: -21.375003814697266
    10. '(
' → logprob: -21.375003814697266

Token 128: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3132975995540619
    2. ')
' → logprob: -1.3132976293563843
    3. '   ' → logprob: -10.813297271728516
    4. ')return' → logprob: -11.813297271728516
    5. ')
' → logprob: -11.938297271728516
    6. 'return' → logprob: -14.063297271728516
    7. ')v' → logprob: -14.813297271728516
    8. ' )
' → logprob: -15.563297271728516
    9. ' )' → logprob: -15.688297271728516
    10. ')

' → logprob: -15.813297271728516

Token 129: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.008624501526355743
    2. 'return' → logprob: -4.75862455368042
    3. ' return' → logprob: -12.008624076843262
    4. 'False' → logprob: -12.883624076843262
    5. '	return' → logprob: -14.633624076843262
    6. 'True' → logprob: -14.883624076843262
    7. '       ' → logprob: -15.508624076843262
    8. '```' → logprob: -16.008625030517578
    9. '    
' → logprob: -16.508625030517578
    10. '
' → logprob: -17.633625030517578

Token 130: ' return' (ID: 622)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'False' → logprob: -0.20153126120567322
    2. 'return' (adapté à ' return') → logprob: -1.7015312910079956
    3. '   ' → logprob: -9.201531410217285
    4. ' False' → logprob: -11.326531410217285
    5. ' return' → logprob: -12.701531410217285
    6. 'True' → logprob: -13.576531410217285
    7. '
' → logprob: -14.951531410217285
    8. '```' → logprob: -15.326531410217285
    9. 'false' → logprob: -16.32653045654297
    10. '	return' → logprob: -16.57653045654297

Token 131: ' False' (ID: 7983)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'False' → logprob: -2.236549335066229e-05
    2. ' False' → logprob: -10.750021934509277
    3. 'True' → logprob: -14.000021934509277
    4. '(False' → logprob: -22.875022888183594
    5. ' True' → logprob: -24.250022888183594
    6. '0' → logprob: -25.000022888183594
    7. 'F' → logprob: -25.250022888183594
    8. 'false' → logprob: -25.625022888183594
    9. 'None' → logprob: -25.750022888183594
    10. '_false' → logprob: -27.625022888183594

Token 132: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0007283978629857302
    2. '
' → logprob: -7.625728607177734
    3. ' for' → logprob: -8.375728607177734
    4. ' 
' → logprob: -12.500728607177734
    5. 'result' → logprob: -13.500728607177734
    6. '    
' → logprob: -13.500728607177734
    7. 'print' → logprob: -14.625728607177734
    8. '  
' → logprob: -14.750728607177734
    9. '\n' → logprob: -14.750728607177734
    10. 'found' → logprob: -15.125728607177734

Token 133: 'print' (ID: 1598)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.030124396085739136
    2. 'print' → logprob: -3.5301244258880615
    3. 'result' → logprob: -8.78012466430664
    4. 'ans' → logprob: -9.90512466430664
    5. 'cycle' → logprob: -9.90512466430664
    6. 'if' → logprob: -10.03012466430664
    7. 'res' → logprob: -10.40512466430664
    8. 'any' → logprob: -11.28012466430664
    9. 'has' → logprob: -11.28012466430664
    10. 'answer' → logprob: -11.53012466430664

Token 134: '(' (ID: 7)
  Prédit: '(any'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(any' → logprob: -0.13810978829860687
    2. '(d' → logprob: -2.1381096839904785
    3. '(True' → logprob: -5.1381096839904785
    4. '(' → logprob: -5.5131096839904785
    5. 'any' → logprob: -7.3881096839904785
    6. '(bool' → logprob: -8.263110160827637
    7. '('' → logprob: -8.513110160827637
    8. '(max' → logprob: -10.263110160827637
    9. '((' → logprob: -10.888110160827637
    10. ' any' → logprob: -11.263110160827637

Token 135: '1' (ID: 16)
  Prédit: 'any'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'any' → logprob: -0.0006702631362713873
    2. 'True' → logprob: -8.000670433044434
    3. ''any' → logprob: -8.375670433044434
    4. 'dfs' → logprob: -10.000670433044434
    5. ' any' → logprob: -10.875670433044434
    6. '"' → logprob: -11.000670433044434
    7. '(any' → logprob: -11.000670433044434
    8. ''' → logprob: -12.750670433044434
    9. '1' → logprob: -14.500670433044434
    10. 'Any' → logprob: -14.750670433044434

Token 136: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.4402315020561218
    2. 'if' → logprob: -1.1902315616607666
    3. ')' → logprob: -3.1902315616607666
    4. '()' → logprob: -4.5652313232421875
    5. '*' → logprob: -8.815231323242188
    6. '0' → logprob: -10.190231323242188
    7. '==' → logprob: -10.315231323242188
    8. '(' → logprob: -10.315231323242188
    9. '())' → logprob: -10.440231323242188
    10. ' )' → logprob: -10.815231323242188

Token 137: ' any' (ID: 1062)
  Prédit: 'any'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'any' → logprob: -0.16067026555538177
    2. ' any' → logprob: -1.910670280456543
    3. ' dfs' → logprob: -8.285670280456543
    4. 'dfs' → logprob: -8.660670280456543
    5. '(any' → logprob: -11.160670280456543
    6. ' ' → logprob: -12.535670280456543
    7. '   ' → logprob: -14.160670280456543
    8. '_any' → logprob: -14.410670280456543
    9. '  ' → logprob: -14.910670280456543
    10. ':any' → logprob: -15.535670280456543

Token 138: '(d' (ID: 2572)
  Prédit: '(d'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(d' → logprob: -0.00018458699923940003
    2. '(' → logprob: -8.625185012817383
    3. 'dfs' → logprob: -13.125185012817383
    4. '(
' → logprob: -13.375185012817383
    5. '((' → logprob: -14.250185012817383
    6. '([' → logprob: -15.125185012817383
    7. 'd' → logprob: -15.375185012817383
    8. ' (' → logprob: -16.625185012817383
    9. '(

' → logprob: -17.000185012817383
    10. '
' → logprob: -17.500185012817383

Token 139: 'fs' (ID: 6469)
  Prédit: 'fs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'fs' → logprob: -0.0013996411580592394
    2. '(fs' → logprob: -7.251399517059326
    3. '(d' → logprob: -8.251399993896484
    4. 'f' → logprob: -8.876399993896484
    5. 'dfs' → logprob: -9.876399993896484
    6. ')' → logprob: -9.876399993896484
    7. '(v' → logprob: -10.751399993896484
    8. '
' → logprob: -11.001399993896484
    9. 's' → logprob: -11.001399993896484
    10. '(' → logprob: -11.376399993896484

Token 140: '(node' (ID: 13356)
  Prédit: '(v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(v' → logprob: -0.7346192002296448
    2. '(node' → logprob: -0.7346192002296448
    3. '(u' → logprob: -3.359619140625
    4. '(n' → logprob: -5.484619140625
    5. '(x' → logprob: -7.484619140625
    6. '(' → logprob: -7.734619140625
    7. '(vertex' → logprob: -7.984619140625
    8. '(k' → logprob: -8.234619140625
    9. '(i' → logprob: -10.359619140625
    10. '(key' → logprob: -10.984619140625

Token 141: ')' (ID: 8)
  Prédit: '(graph'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(graph' → logprob: -0.32040339708328247
    2. '(node' → logprob: -2.0704033374786377
    3. '()' → logprob: -2.4454033374786377
    4. ')' → logprob: -3.6954033374786377
    5. 'for' → logprob: -4.445403575897217
    6. ' for' → logprob: -4.695403575897217
    7. '(' → logprob: -5.445403575897217
    8. '(v' → logprob: -5.570403575897217
    9. '(n' → logprob: -5.945403575897217
    10. 'graph' → logprob: -6.695403575897217

Token 142: ' for' (ID: 395)
  Prédit: '(node'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(node' → logprob: -0.20703643560409546
    2. '(graph' → logprob: -2.2070364952087402
    3. ')' → logprob: -3.8320364952087402
    4. '(' → logprob: -3.9570364952087402
    5. ' for' → logprob: -3.9570364952087402
    6. 'for' → logprob: -4.70703649520874
    7. ' in' → logprob: -6.20703649520874
    8. ' (' → logprob: -6.45703649520874
    9. '(n' → logprob: -6.70703649520874
    10. 'graph' → logprob: -7.20703649520874

Token 143: ' node' (ID: 4596)
  Prédit: ' graph'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' graph' → logprob: -0.11403737962245941
    2. 'graph' → logprob: -2.239037275314331
    3. ' visited' → logprob: -6.98903751373291
    4. 'visited' → logprob: -8.73903751373291
    5. '(graph' → logprob: -9.48903751373291
    6. '	graph' → logprob: -10.98903751373291
    7. ' list' → logprob: -11.23903751373291
    8. ' node' → logprob: -11.61403751373291
    9. ' ' → logprob: -11.98903751373291
    10. 'list' → logprob: -13.36403751373291

Token 144: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.01147111039608717
    2. ' graph' → logprob: -4.636471271514893
    3. 'in' → logprob: -6.886471271514893
    4. 'graph' → logprob: -7.636471271514893
    5. '(graph' → logprob: -8.511470794677734
    6. ' ' → logprob: -11.886470794677734
    7. '	graph' → logprob: -13.886470794677734
    8. ')' → logprob: -15.011470794677734
    9. ' ' → logprob: -16.511470794677734
    10. '  ' → logprob: -17.136470794677734

Token 145: ' graph' (ID: 7465)
  Prédit: 'graph'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'graph' → logprob: -0.3159409761428833
    2. ' graph' → logprob: -1.3159409761428833
    3. 'visited' → logprob: -6.315940856933594
    4. ' visited' → logprob: -7.190940856933594
    5. 'list' → logprob: -10.065940856933594
    6. ' list' → logprob: -10.440940856933594
    7. '(graph' → logprob: -10.940940856933594
    8. '	graph' → logprob: -11.315940856933594
    9. ' ' → logprob: -11.815940856933594
    10. '   ' → logprob: -13.690940856933594

Token 146: ' if' (ID: 538)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -8.923874702304602e-05
    2. ' )' → logprob: -9.625089645385742
    3. ' else' → logprob: -11.500089645385742
    4. 'else' → logprob: -12.000089645385742
    5. '))' → logprob: -12.375089645385742
    6. '.keys' → logprob: -14.250089645385742
    7. ')>' → logprob: -14.500089645385742
    8. '())' → logprob: -15.125089645385742
    9. ')==' → logprob: -15.625089645385742
    10. '})' → logprob: -15.625089645385742

Token 147: ' node' (ID: 4596)
  Prédit: ' node'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' node' → logprob: -0.0486162044107914
    2. 'node' → logprob: -3.0486161708831787
    3. 'not' → logprob: -11.673616409301758
    4. '(node' → logprob: -12.048616409301758
    5. ' not' → logprob: -12.298616409301758
    6. '	node' → logprob: -12.548616409301758
    7. ' ' → logprob: -13.423616409301758
    8. '
' → logprob: -13.798616409301758
    9. '   ' → logprob: -13.923616409301758
    10. '[node' → logprob: -14.298616409301758

Token 148: ' not' (ID: 625)
  Prédit: ' not'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.05086645111441612
    2. 'not' → logprob: -3.0508663654327393
    3. ' in' → logprob: -6.175866603851318
    4. ')' → logprob: -9.17586612701416
    5. 'in' → logprob: -10.05086612701416
    6. ' ' → logprob: -10.42586612701416
    7. ' )' → logprob: -12.05086612701416
    8. '	not' → logprob: -12.17586612701416
    9. '<|end|>' → logprob: -12.42586612701416
    10. ' no' → logprob: -13.30086612701416

Token 149: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.16584673523902893
    2. 'in' → logprob: -1.9158467054367065
    3. 'visited' → logprob: -5.540846824645996
    4. ' visited' → logprob: -6.540846824645996
    5. '<|end|>' → logprob: -8.790846824645996
    6. ' ' → logprob: -9.540846824645996
    7. 'Visited' → logprob: -12.415846824645996
    8. ')' → logprob: -13.165846824645996
    9. '  ' → logprob: -13.540846824645996
    10. '<|end|>' → logprob: -13.915846824645996

Token 150: ' visited' (ID: 18416)
  Prédit: 'visited'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'visited' → logprob: -0.04300045222043991
    2. ' visited' → logprob: -3.1680004596710205
    3. 'vis' → logprob: -14.918000221252441
    4. '   ' → logprob: -15.168000221252441
    5. ' ' → logprob: -15.418000221252441
    6. 'Visited' → logprob: -15.668000221252441
    7. '
' → logprob: -16.168001174926758
    8. 'visit' → logprob: -16.793001174926758
    9. 'vist' → logprob: -17.168001174926758
    10. 'visible' → logprob: -17.418001174926758

Token 151: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.939851037808694e-05
    2. '))' → logprob: -11.125029563903809
    3. 'else' → logprob: -11.250029563903809
    4. ' else' → logprob: -13.750029563903809
    5. ' )' → logprob: -14.875029563903809
    6. '())' → logprob: -17.000028610229492
    7. ')`' → logprob: -17.875028610229492
    8. ')
' → logprob: -18.125028610229492
    9. '})' → logprob: -18.250028610229492
    10. '")' → logprob: -18.250028610229492

Token 152: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.5646860003471375
    2. ' else' → logprob: -1.3146860599517822
    3. ')' → logprob: -1.8146860599517822
    4. '))' → logprob: -12.064685821533203
    5. ' )' → logprob: -12.564685821533203
    6. '	else' → logprob: -13.939685821533203
    7. '```' → logprob: -13.939685821533203
    8. ' ' → logprob: -14.439685821533203
    9. '_else' → logprob: -14.814685821533203
    10. '()' → logprob: -15.064685821533203

Token 153: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.04300866648554802
    2. ' ' → logprob: -3.16800856590271
    3. ''' → logprob: -11.793008804321289
    4. '"' → logprob: -14.043008804321289
    5. ')' → logprob: -14.168008804321289
    6. '`' → logprob: -16.16800880432129
    7. '1' → logprob: -16.29300880432129
    8. ' '' → logprob: -16.66800880432129
    9. '   ' → logprob: -16.66800880432129
    10. ' ' → logprob: -16.79300880432129

Token 154: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -4.5491004129871726e-05
    2. ' ' → logprob: -10.000045776367188
    3. ')' → logprob: -18.125045776367188
    4. '1' → logprob: -18.375045776367188
    5. ''' → logprob: -18.875045776367188
    6. 'print' → logprob: -19.000045776367188
    7. '"' → logprob: -19.125045776367188
    8. '   ' → logprob: -19.375045776367188
    9. '```' → logprob: -19.500045776367188
    10. '`' → logprob: -19.937545776367188

Token 155: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -9.088346359931165e-07
    2. ' )' → logprob: -15.000000953674316
    3. '))' → logprob: -15.125000953674316
    4. ')`' → logprob: -16.125
    5. ')
' → logprob: -16.75
    6. '())' → logprob: -18.25
    7. '`)' → logprob: -18.75
    8. '')' → logprob: -19.875
    9. ')**' → logprob: -20.375
    10. ')}' → logprob: -20.625


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 153
Tokens correctement prédits (1ère position, stricte): 69
Tokens correctement prédits (1ère position, avec adaptation): 78
Tokens correctement prédits (top 10): 134
Précision stricte (1ère position): 45.10%
Précision adaptée (1ère position): 50.98%
Précision (top 10): 87.58%
================================================================================
