================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 16:58:07
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
sticks = list(map(int, input().split()))
sticks.sort()

if len(sticks) != 12:
    print("no")
    exit()

# Vérifier que chaque longueur apparaît exactement 4 fois (pour un cube)
from collections import Counter
count = Counter(sticks)
if len(count) == 3 and all(v == 4 for v in count.values()):
    print("yes")
    exit()

# Pour un parallélépipède rectangle, il doit y avoir exactement 3 longueurs différentes,
# chacune apparaissant exactement 4 fois
if len(count) == 3 and all(v == 4 for v in count.values()):
    print("yes")
else:
    print("no")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'sticks' (ID: 121675)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' list' (ID: 1562)
  → Token d'amorce (pas de prédiction)

Token 3: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0470372773706913
    2. '(st' → logprob: -3.422037363052368
    3. '```' → logprob: -4.922037124633789
    4. '[' → logprob: -6.172037124633789
    5. '_st' → logprob: -6.672037124633789
    6. '.' → logprob: -7.672037124633789
    7. '`' → logprob: -7.797037124633789
    8. ' sticks' → logprob: -8.047037124633789
    9. 's' → logprob: -8.172037124633789
    10. ''s' → logprob: -8.672037124633789

Token 4: '(int' (ID: 2742)
  Prédit: '(lambda'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(lambda' → logprob: -0.15330816805362701
    2. '(' → logprob: -2.278308153152466
    3. '(str' → logprob: -3.403308153152466
    4. '(int' → logprob: -5.778308391571045
    5. ')' → logprob: -7.278308391571045
    6. '```' → logprob: -7.778308391571045
    7. '(eval' → logprob: -7.903308391571045
    8. '(list' → logprob: -8.278307914733887
    9. '<|end|>' → logprob: -8.528307914733887
    10. '(st' → logprob: -8.528307914733887

Token 5: ',' (ID: 11)
  Prédit: '(st'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(st' → logprob: -0.08687367290258408
    2. '(' → logprob: -2.711873769760132
    3. '))' → logprob: -5.211873531341553
    4. '()' → logprob: -6.461873531341553
    5. ')' → logprob: -6.586873531341553
    6. '(user' → logprob: -6.961873531341553
    7. ' sticks' → logprob: -7.086873531341553
    8. '()))' → logprob: -7.086873531341553
    9. '(St' → logprob: -7.086873531341553
    10. '(()' → logprob: -7.461873531341553

Token 6: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.36540961265563965
    2. ' input' → logprob: -1.2404096126556396
    3. '(input' → logprob: -4.615409851074219
    4. 'sticks' → logprob: -5.740409851074219
    5. ' sticks' → logprob: -5.740409851074219
    6. ')' → logprob: -7.865409851074219
    7. ',input' → logprob: -10.740409851074219
    8. '=input' → logprob: -10.740409851074219
    9. '[input' → logprob: -10.865409851074219
    10. ' )' → logprob: -11.865409851074219

Token 7: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6528497934341431
    2. '()))' → logprob: -1.277849793434143
    3. '()' → logprob: -2.4028496742248535
    4. '(()' → logprob: -3.9028496742248535
    5. '())' → logprob: -4.0278496742248535
    6. '()));' → logprob: -4.1528496742248535
    7. '())))' → logprob: -4.5278496742248535
    8. '()>' → logprob: -5.0278496742248535
    9. '(""))' → logprob: -5.1528496742248535
    10. '('' → logprob: -5.4028496742248535

Token 8: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.001640069531276822
    2. 'strip' → logprob: -6.5016398429870605
    3. 'rstrip' → logprob: -9.376640319824219
    4. ' split' → logprob: -9.876640319824219
    5. 'spl' → logprob: -14.376640319824219
    6. '(split' → logprob: -14.626640319824219
    7. 'read' → logprob: -15.626640319824219
    8. ')' → logprob: -15.626640319824219
    9. ' strip' → logprob: -16.25164031982422
    10. 'replace' → logprob: -16.37664031982422

Token 9: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.10085791349411011
    2. '))' → logprob: -2.725857973098755
    3. '())' → logprob: -3.725857973098755
    4. '()' → logprob: -6.225857734680176
    5. '())))' → logprob: -6.475857734680176
    6. ')))' → logprob: -6.725857734680176
    7. ')' → logprob: -7.100857734680176
    8. '(' → logprob: -7.600857734680176
    9. '()));' → logprob: -9.100857734680176
    10. '()))
' → logprob: -10.350857734680176

Token 10: 'sticks' (ID: 121675)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.2792021930217743
    2. 'sticks' → logprob: -1.6542022228240967
    3. 'for' → logprob: -3.7792022228240967
    4. '.' → logprob: -4.404201984405518
    5. '[' → logprob: -4.529201984405518
    6. ' sticks' → logprob: -6.654201984405518
    7. 's' → logprob: -7.029201984405518
    8. 'sorted' → logprob: -7.029201984405518
    9. '```' → logprob: -7.654201984405518
    10. '#' → logprob: -8.029202461242676

Token 11: '.sort' (ID: 19551)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[' → logprob: -0.048222336918115616
    2. '<|end|>' → logprob: -3.673222303390503
    3. '.' → logprob: -4.798222541809082
    4. '```' → logprob: -4.798222541809082
    5. '\[' → logprob: -6.423222541809082
    6. '[
' → logprob: -6.923222541809082
    7. '<|end|>' → logprob: -7.798222541809082
    8. '\' → logprob: -7.923222541809082
    9. '[]' → logprob: -8.048222541809082
    10. '\n' → logprob: -8.423222541809082

Token 12: '()

' (ID: 5874)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.38708922266960144
    2. '()' → logprob: -1.1370892524719238
    3. '().' → logprob: -10.637088775634766
    4. '`()' → logprob: -10.637088775634766
    5. '```' → logprob: -10.887088775634766
    6. '()`' → logprob: -11.012088775634766
    7. '(`' → logprob: -11.012088775634766
    8. '(

' → logprob: -11.387088775634766
    9. '(
' → logprob: -11.387088775634766
    10. '((' → logprob: -11.637088775634766

Token 13: 'if' (ID: 366)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.7010241746902466
    2. 'while' → logprob: -0.8260241746902466
    3. 'count' → logprob: -4.076024055480957
    4. 'n' → logprob: -4.326024055480957
    5. 'if' → logprob: -4.951024055480957
    6. 'result' → logprob: -5.076024055480957
    7. 'total' → logprob: -5.451024055480957
    8. 'i' → logprob: -5.576024055480957
    9. 'max' → logprob: -5.576024055480957
    10. 'length' → logprob: -5.701024055480957

Token 14: ' len' (ID: 4631)
  Prédit: ' sticks'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sticks' → logprob: -0.2112385779619217
    2. ' len' → logprob: -1.8362386226654053
    3. 'sticks' → logprob: -3.9612386226654053
    4. 'len' → logprob: -4.461238384246826
    5. ' ' → logprob: -8.086238861083984
    6. ' not' → logprob: -10.336238861083984
    7. ' ' → logprob: -10.836238861083984
    8. '(len' → logprob: -11.086238861083984
    9. 'st' → logprob: -11.461238861083984
    10. ' stick' → logprob: -11.961238861083984

Token 15: '(st' (ID: 4065)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10022197663784027
    2. '(st' → logprob: -2.350221872329712
    3. ' (' → logprob: -11.725221633911133
    4. '(s' → logprob: -12.725221633911133
    5. ' sticks' → logprob: -13.100221633911133
    6. '(
' → logprob: -13.975221633911133
    7. '(St' → logprob: -15.725221633911133
    8. '(

' → logprob: -15.975221633911133
    9. '((' → logprob: -16.225221633911133
    10. '('' → logprob: -16.350221633911133

Token 16: 'icks' (ID: 8736)
  Prédit: 'icks'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'icks' → logprob: -0.004990270361304283
    2. '(' → logprob: -5.379990100860596
    3. '>' → logprob: -8.754990577697754
    4. 'ic' → logprob: -9.879990577697754
    5. 'cks' → logprob: -10.004990577697754
    6. 'ics' → logprob: -10.379990577697754
    7. '```' → logprob: -11.504990577697754
    8. ' ' → logprob: -11.754990577697754
    9. '<' → logprob: -12.004990577697754
    10. '[' → logprob: -12.129990577697754

Token 17: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.01575877144932747
    2. ' )' → logprob: -4.515758991241455
    3. ' >' → logprob: -5.765758991241455
    4. ' >=' → logprob: -7.265758991241455
    5. '>' → logprob: -7.765758991241455
    6. '[' → logprob: -8.390758514404297
    7. ')>' → logprob: -9.265758514404297
    8. ' <' → logprob: -10.015758514404297
    9. ')>=' → logprob: -10.265758514404297
    10. '>=' → logprob: -10.765758514404297

Token 18: ' !=' (ID: 1666)
  Prédit: ' >='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' >=' → logprob: -0.7620695233345032
    2. ' <' → logprob: -1.2620694637298584
    3. ' >' → logprob: -1.8870694637298584
    4. '>' → logprob: -2.8870694637298584
    5. '>=' → logprob: -3.7620694637298584
    6. '<' → logprob: -4.2620697021484375
    7. ' <=' → logprob: -5.6370697021484375
    8. ' ' → logprob: -6.6370697021484375
    9. ' ==' → logprob: -7.7620697021484375
    10. '<=' → logprob: -8.762069702148438

Token 19: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.38695409893989563
    2. '3' → logprob: -1.1369540691375732
    3. '0' → logprob: -10.511954307556152
    4. '2' → logprob: -10.886954307556152
    5. '1' → logprob: -11.011954307556152
    6. ' sticks' → logprob: -12.136954307556152
    7. '  ' → logprob: -12.636954307556152
    8. '   ' → logprob: -13.011954307556152
    9. '7' → logprob: -13.636954307556152
    10. ' n' → logprob: -13.824454307556152

Token 20: '12' (ID: 899)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '3' → logprob: -0.004728330299258232
    2. ' ' → logprob: -5.504728317260742
    3. '0' → logprob: -7.879728317260742
    4. '1' → logprob: -8.379728317260742
    5. '2' → logprob: -10.254728317260742
    6. '7' → logprob: -14.004728317260742
    7. '4' → logprob: -14.442228317260742
    8. '6' → logprob: -14.504728317260742
    9. 'triangle' → logprob: -14.629728317260742
    10. '5' → logprob: -14.942228317260742

Token 21: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0011393846943974495
    2. ' :' → logprob: -6.876139163970947
    3. ' or' → logprob: -9.251139640808105
    4. ':**' → logprob: -13.126139640808105
    5. ':
' → logprob: -13.251139640808105
    6. 'or' → logprob: -13.251139640808105
    7. '):' → logprob: -13.751139640808105
    8. '>' → logprob: -13.876139640808105
    9. ':return' → logprob: -14.001139640808105
    10. ' and' → logprob: -14.751139640808105

Token 22: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11977998912334442
    2. '    ' → logprob: -3.4947800636291504
    3. ' ' → logprob: -3.6197800636291504
    4. ' print' → logprob: -3.6197800636291504
    5. '\n' → logprob: -5.11978006362915
    6. '\' → logprob: -5.36978006362915
    7. ' ' → logprob: -5.74478006362915
    8. ' continue' → logprob: -5.86978006362915
    9. '    
' → logprob: -6.11978006362915
    10. ' 
' → logprob: -6.24478006362915

Token 23: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.06176004558801651
    2. 'print' (adapté à ' print') → logprob: -3.8117599487304688
    3. ' exit' → logprob: -4.061759948730469
    4. ' ' → logprob: -5.311759948730469
    5. '    ' → logprob: -5.311759948730469
    6. ' raise' → logprob: -5.311759948730469
    7. ' pass' → logprob: -6.186759948730469
    8. ' 
' → logprob: -7.061759948730469
    9. '```' → logprob: -7.186759948730469
    10. ' ' → logprob: -8.061759948730469

Token 24: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.012426177971065044
    2. '("' → logprob: -4.887426376342773
    3. '()' → logprob: -5.887426376342773
    4. '('' → logprob: -7.012426376342773
    5. '(None' → logprob: -7.887426376342773
    6. '(False' → logprob: -8.137426376342773
    7. '("")' → logprob: -8.137426376342773
    8. '(True' → logprob: -9.887426376342773
    9. '("("' → logprob: -9.887426376342773
    10. '(-' → logprob: -10.262426376342773

Token 25: 'no' (ID: 1750)
  Prédit: 'Invalid'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'Invalid' → logprob: -0.19506928324699402
    2. 'Error' → logprob: -2.1950693130493164
    3. 'invalid' → logprob: -4.445069313049316
    4. 'Input' → logprob: -4.820069313049316
    5. 'Ins' → logprob: -4.820069313049316
    6. 'Wrong' → logprob: -5.195069313049316
    7. 'Incorrect' → logprob: -5.320069313049316
    8. 'Number' → logprob: -5.320069313049316
    9. ' Invalid' → logprob: -5.445069313049316
    10. 'In' → logprob: -5.820069313049316

Token 26: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.006878172513097525
    2. ')' → logprob: -5.13187837600708
    3. '"' → logprob: -8.131877899169922
    4. ')")' → logprob: -8.506877899169922
    5. ' ")' → logprob: -9.131877899169922
    6. '")
' → logprob: -9.506877899169922
    7. 'n' → logprob: -9.756877899169922
    8. '!")' → logprob: -10.006877899169922
    9. 't' → logprob: -10.381877899169922
    10. '')' → logprob: -11.256877899169922

Token 27: '   ' (ID: 271)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.31107789278030396
    2. ' else' → logprob: -1.9360778331756592
    3. 'elif' → logprob: -2.311077833175659
    4. ' elif' → logprob: -4.436078071594238
    5. '```' → logprob: -5.311078071594238
    6. '\n' → logprob: -5.811078071594238
    7. '
' → logprob: -6.686078071594238
    8. '   ' → logprob: -7.061078071594238
    9. '    
' → logprob: -7.311078071594238
    10. '<|end|>' → logprob: -8.186078071594238

Token 28: ' exit' (ID: 10654)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.27278825640678406
    2. 'elif' → logprob: -1.6477882862091064
    3. ' else' → logprob: -4.022788047790527
    4. '
' → logprob: -4.522788047790527
    5. '\n' → logprob: -4.647788047790527
    6. '   ' → logprob: -5.647788047790527
    7. '```' → logprob: -6.772788047790527
    8. ' elif' → logprob: -6.772788047790527
    9. '    
' → logprob: -7.022788047790527
    10. '  
' → logprob: -8.522788047790527

Token 29: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0005840110243298113
    2. '(' → logprob: -7.500584125518799
    3. '()
' → logprob: -10.87558364868164
    4. '()`' → logprob: -12.62558364868164
    5. '()

' → logprob: -12.75058364868164
    6. '())' → logprob: -12.87558364868164
    7. '()\' → logprob: -13.87558364868164
    8. ' ()' → logprob: -14.37558364868164
    9. '()]' → logprob: -15.12558364868164
    10. '();' → logprob: -15.37558364868164

Token 30: '#' (ID: 2)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.13429206609725952
    2. '```' → logprob: -2.3842921257019043
    3. 'if' → logprob: -3.8842921257019043
    4. '
' → logprob: -4.884292125701904
    5. 's' → logprob: -6.384292125701904
    6. 'elif' → logprob: -7.509292125701904
    7. ' for' → logprob: -7.509292125701904
    8. '``' → logprob: -7.509292125701904
    9. 'sticks' → logprob: -8.134291648864746
    10. '`' → logprob: -8.259291648864746

Token 31: ' Vér' (ID: 159169)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.40260758996009827
    2. ' for' → logprob: -1.9026075601577759
    3. 'possible' → logprob: -2.4026076793670654
    4. ' possible' → logprob: -4.152607440948486
    5. ' valid' → logprob: -4.277607440948486
    6. 'found' → logprob: -4.527607440948486
    7. ' sticks' → logprob: -4.652607440948486
    8. 'valid' → logprob: -4.902607440948486
    9. 'sticks' → logprob: -5.027607440948486
    10. ' found' → logprob: -5.402607440948486

Token 32: 'ifier' (ID: 4550)
  Prédit: 'ification'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ification' → logprob: -0.28750061988830566
    2. 'ifier' → logprob: -1.6625006198883057
    3. 'ifie' → logprob: -3.5375006198883057
    4. 'if' → logprob: -4.162500381469727
    5. 'ifiez' → logprob: -4.787500381469727
    6. 'ifi' → logprob: -5.537500381469727
    7. 'ify' → logprob: -6.537500381469727
    8. 'ifying' → logprob: -7.412500381469727
    9. 'i' → logprob: -7.662500381469727
    10. 'ifications' → logprob: -8.787500381469727

Token 33: ' que' (ID: 661)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.731513261795044
    2. ' si' → logprob: -1.231513261795044
    3. ' if' → logprob: -1.856513261795044
    4. ' les' → logprob: -3.231513261795044
    5. 'si' → logprob: -5.106513023376465
    6. ' l' → logprob: -5.356513023376465
    7. 'les' → logprob: -5.356513023376465
    8. ' que' → logprob: -6.231513023376465
    9. '```' → logprob: -6.231513023376465
    10. ' s' → logprob: -6.231513023376465

Token 34: ' chaque' (ID: 21194)
  Prédit: ' sticks'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' sticks' → logprob: -0.37181803584098816
    2. ' les' → logprob: -1.8718180656433105
    3. ' all' → logprob: -3.2468180656433105
    4. ' len' → logprob: -3.2468180656433105
    5. 'sticks' → logprob: -3.2468180656433105
    6. 'len' → logprob: -4.1218180656433105
    7. 'les' → logprob: -4.6218180656433105
    8. ' tous' → logprob: -5.4968180656433105
    9. ' toutes' → logprob: -5.8718180656433105
    10. 'all' → logprob: -6.4968180656433105

Token 35: ' longueur' (ID: 104613)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.7235140204429626
    2. ' group' → logprob: -2.2235140800476074
    3. ' groupe' → logprob: -2.9735140800476074
    4. 'group' → logprob: -3.2235140800476074
    5. 'face' → logprob: -3.3485140800476074
    6. 'stick' → logprob: -3.7235140800476074
    7. '```' → logprob: -3.8485140800476074
    8. ' trip' → logprob: -4.098514080047607
    9. 'élé' → logprob: -4.098514080047607
    10. ' ' → logprob: -4.223514080047607

Token 36: ' apparaît' (ID: 147656)
  Prédit: ' est'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' est' → logprob: -0.8194246292114258
    2. ' apparaît' → logprob: -1.0694246292114258
    3. ' appara' → logprob: -2.819424629211426
    4. ' sticks' → logprob: -3.069424629211426
    5. ' a' → logprob: -3.819424629211426
    6. 'appe' → logprob: -4.444424629211426
    7. 'est' → logprob: -4.694424629211426
    8. ' apare' → logprob: -5.194424629211426
    9. 'sticks' → logprob: -5.194424629211426
    10. ' ' → logprob: -5.319424629211426

Token 37: ' exactement' (ID: 108701)
  Prédit: ' au'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' au' → logprob: -0.011300564743578434
    2. 'au' → logprob: -4.886300563812256
    3. ' at' → logprob: -6.136300563812256
    4. ' exactement' → logprob: -7.636300563812256
    5. ' exactly' → logprob: -8.511301040649414
    6. ' ' → logprob: -8.761301040649414
    7. 'exact' → logprob: -8.886301040649414
    8. '```' → logprob: -8.886301040649414
    9. 'at' → logprob: -9.011301040649414
    10. ''au' → logprob: -9.136301040649414

Token 38: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.525705099105835
    2. ' deux' → logprob: -1.400705099105835
    3. ' twice' → logprob: -2.775705099105835
    4. '2' → logprob: -2.775705099105835
    5. ' au' → logprob: -4.650705337524414
    6. ' trois' → logprob: -4.650705337524414
    7. '3' → logprob: -5.400705337524414
    8. 'de' → logprob: -5.400705337524414
    9. ' two' → logprob: -5.400705337524414
    10. ' exactly' → logprob: -6.650705337524414

Token 39: '4' (ID: 19)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.18979662656784058
    2. 'de' → logprob: -1.9397966861724854
    3. ' ' → logprob: -4.189796447753906
    4. '3' → logprob: -4.564796447753906
    5. '4' → logprob: -6.064796447753906
    6. ' deux' → logprob: -7.689796447753906
    7. '```' → logprob: -8.314796447753906
    8. 'qu' → logprob: -9.314796447753906
    9. 'tro' → logprob: -9.314796447753906
    10. 'une' → logprob: -9.439796447753906

Token 40: ' fois' (ID: 14697)
  Prédit: ' times'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' times' → logprob: -0.8300896286964417
    2. ' for' → logprob: -1.3300895690917969
    3. 'for' → logprob: -2.330089569091797
    4. ' fois' → logprob: -2.330089569091797
    5. 'times' → logprob: -2.830089569091797
    6. ' sticks' → logprob: -4.830089569091797
    7. 'tokens' → logprob: -5.205089569091797
    8. ' ' → logprob: -5.580089569091797
    9. 'counts' → logprob: -5.705089569091797
    10. ' counts' → logprob: -5.705089569091797

Token 41: ' (' (ID: 350)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 42: 'pour' (ID: 52723)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.37603461742401123
    2. ' for' → logprob: -1.7510346174240112
    3. 'for' → logprob: -2.001034736633301
    4. ' )' → logprob: -5.626034736633301
    5. '<|end|>' → logprob: -8.1260347366333
    6. '```' → logprob: -8.3760347366333
    7. ' in' → logprob: -9.7510347366333
    8. ' to' → logprob: -9.8760347366333
    9. '#' → logprob: -10.1260347366333
    10. 'in' → logprob: -10.2510347366333

Token 43: ' un' (ID: 537)
  Prédit: 'former'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'former' → logprob: -1.2942960262298584
    2. ' former' → logprob: -1.5442960262298584
    3. ' forming' → logprob: -1.6692960262298584
    4. ' form' → logprob: -2.6692960262298584
    5. 'forming' → logprob: -3.2942960262298584
    6. ' la' → logprob: -3.6692960262298584
    7. ' pouvoir' → logprob: -3.7942960262298584
    8. ' que' → logprob: -3.9192960262298584
    9. 'constit' → logprob: -3.9192960262298584
    10. ' chaque' → logprob: -4.1692962646484375

Token 44: ' cube' (ID: 46822)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.3312731087207794
    2. ' carré' → logprob: -1.706273078918457
    3. 'cube' → logprob: -3.331273078918457
    4. ' cube' → logprob: -3.831273078918457
    5. '```' → logprob: -5.206273078918457
    6. 'rectangle' → logprob: -5.456273078918457
    7. ' quadr' → logprob: -5.581273078918457
    8. 'quadr' → logprob: -5.768773078918457
    9. 'car' → logprob: -5.956273078918457
    10. 'quad' → logprob: -6.456273078918457

Token 45: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00019746100588236004
    2. '):' → logprob: -9.750197410583496
    3. ' )' → logprob: -9.875197410583496
    4. '#' → logprob: -11.125197410583496
    5. ')
' → logprob: -11.250197410583496
    6. '`)' → logprob: -11.250197410583496
    7. '')' → logprob: -11.500197410583496
    8. ').' → logprob: -11.625197410583496
    9. '")' → logprob: -12.000197410583496
    10. ')#' → logprob: -12.625197410583496

Token 46: 'from' (ID: 2845)
  Prédit: 'from'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'from' → logprob: -0.36683377623558044
    2. 'for' → logprob: -1.3668338060379028
    3. 'counts' → logprob: -3.2418336868286133
    4. 'count' → logprob: -5.741833686828613
    5. 'counter' → logprob: -5.866833686828613
    6. 'valid' → logprob: -5.991833686828613
    7. '```' → logprob: -6.366833686828613
    8. 'c' → logprob: -7.741833686828613
    9. 'freq' → logprob: -7.991833686828613
    10. 'd' → logprob: -8.116833686828613

Token 47: ' collections' (ID: 22690)
  Prédit: ' collections'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' collections' → logprob: -0.07889452576637268
    2. 'collections' → logprob: -2.57889461517334
    3. ' itertools' → logprob: -12.57889461517334
    4. ' collection' → logprob: -14.82889461517334
    5. '.collections' → logprob: -15.20389461517334
    6. '_' → logprob: -15.45389461517334
    7. 'collection' → logprob: -16.078893661499023
    8. ' ' → logprob: -16.203893661499023
    9. '_collection' → logprob: -17.203893661499023
    10. ' colle' → logprob: -17.578893661499023

Token 48: ' import' (ID: 1588)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'import' → logprob: -0.0892917811870575
    2. ' import' → logprob: -2.46429181098938
    3. '```' → logprob: -9.0892915725708
    4. 'Counter' → logprob: -9.2142915725708
    5. ' Counter' → logprob: -9.8392915725708
    6. '.Counter' → logprob: -9.9642915725708
    7. '<|end|>' → logprob: -11.7142915725708
    8. '	import' → logprob: -12.0892915725708
    9. 'ounter' → logprob: -12.3392915725708
    10. ' defaultdict' → logprob: -12.3392915725708

Token 49: ' Counter' (ID: 32251)
  Prédit: ' Counter'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' Counter' → logprob: -0.2525736093521118
    2. 'Counter' → logprob: -1.5025736093521118
    3. ' defaultdict' → logprob: -7.377573490142822
    4. '.Counter' → logprob: -11.12757396697998
    5. '_counter' → logprob: -13.50257396697998
    6. 'default' → logprob: -13.50257396697998
    7. ' counter' → logprob: -13.87757396697998
    8. 'collections' → logprob: -15.12757396697998
    9. 'import' → logprob: -15.50257396697998
    10. 'counter' → logprob: -15.62757396697998

Token 50: '
' (ID: 198)
  Prédit: 'counter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'counter' → logprob: -0.7938928604125977
    2. 'counts' → logprob: -1.0438928604125977
    3. 'count' → logprob: -1.7938928604125977
    4. '
' → logprob: -4.543892860412598
    5. 'sticks' → logprob: -4.668892860412598
    6. 'c' → logprob: -4.918892860412598
    7. ' counts' → logprob: -7.293892860412598
    8. 'tokens' → logprob: -8.043892860412598
    9. 'cnt' → logprob: -8.043892860412598
    10. ' counter' → logprob: -8.293892860412598

Token 51: 'count' (ID: 5420)
  Prédit: 'counts'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'counts' → logprob: -0.7057895660400391
    2. 'counter' → logprob: -0.8307895660400391
    3. 'count' → logprob: -2.955789566040039
    4. '
' → logprob: -4.705789566040039
    5. 'sticks' → logprob: -5.830789566040039
    6. 'c' → logprob: -6.205789566040039
    7. ' counts' → logprob: -6.455789566040039
    8. 'cnt' → logprob: -6.830789566040039
    9. ' counter' → logprob: -7.580789566040039
    10. 'length' → logprob: -8.080789566040039

Token 52: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.15636147558689117
    2. 's' → logprob: -2.5313615798950195
    3. ' =' → logprob: -2.7813615798950195
    4. '(' → logprob: -6.5313615798950195
    5. 'sticks' → logprob: -7.1563615798950195
    6. 'er' → logprob: -7.4063615798950195
    7. '(st' → logprob: -9.15636157989502
    8. ' sticks' → logprob: -9.40636157989502
    9. '_' → logprob: -9.90636157989502
    10. ')' → logprob: -10.03136157989502

Token 53: ' Counter' (ID: 32251)
  Prédit: 'Counter'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Counter' → logprob: -0.1270589381456375
    2. ' Counter' → logprob: -2.127058982849121
    3. '.Counter' → logprob: -9.252058982849121
    4. '(C' → logprob: -11.002058982849121
    5. 'Counters' → logprob: -12.502058982849121
    6. '_counter' → logprob: -12.877058982849121
    7. 'Count' → logprob: -13.127058982849121
    8. 'C' → logprob: -13.502058982849121
    9. ' ' → logprob: -14.252058982849121
    10. '```' → logprob: -14.314558982849121

Token 54: '(st' (ID: 4065)
  Prédit: '(st'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(st' → logprob: -0.00011307948443572968
    2. '(' → logprob: -9.125113487243652
    3. ' sticks' → logprob: -13.250113487243652
    4. 'sticks' → logprob: -13.375113487243652
    5. ' (' → logprob: -14.500113487243652
    6. '(s' → logprob: -16.250112533569336
    7. '```' → logprob: -17.250112533569336
    8. '(
' → logprob: -17.250112533569336
    9. '(tokens' → logprob: -18.125112533569336
    10. '(stor' → logprob: -18.250112533569336

Token 55: 'icks' (ID: 8736)
  Prédit: 'icks'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'icks' → logprob: -0.00027480217977426946
    2. 'cks' → logprob: -8.250274658203125
    3. '(' → logprob: -12.500274658203125
    4. 'ics' → logprob: -13.125274658203125
    5. 'ic' → logprob: -13.750274658203125
    6. '[' → logprob: -13.750274658203125
    7. 'ticks' → logprob: -14.250274658203125
    8. ' ' → logprob: -14.375274658203125
    9. 'ick' → logprob: -14.500274658203125
    10. '=' → logprob: -14.750274658203125

Token 56: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0003758575767278671
    2. ')
' → logprob: -8.125375747680664
    3. '(st' → logprob: -9.750375747680664
    4. ' )' → logprob: -11.625375747680664
    5. '(' → logprob: -12.500375747680664
    6. ')

' → logprob: -13.000375747680664
    7. ')
' → logprob: -13.000375747680664
    8. '()' → logprob: -13.125375747680664
    9. '))' → logprob: -14.625375747680664
    10. '())' → logprob: -14.750375747680664

Token 57: 'if' (ID: 366)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.07495656609535217
    2. '
' → logprob: -3.1999566555023193
    3. 'if' → logprob: -3.9499566555023193
    4. ' for' → logprob: -4.94995641708374
    5. 'values' → logprob: -6.44995641708374
    6. '<|end|>' → logprob: -6.44995641708374
    7. 's' → logprob: -8.199956893920898
    8. 'tokens' → logprob: -8.699956893920898
    9. '\n' → logprob: -8.949956893920898
    10. '  
' → logprob: -9.324956893920898

Token 58: ' len' (ID: 4631)
  Prédit: 'all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'all' → logprob: -0.9307685494422913
    2. 'any' → logprob: -1.4307684898376465
    3. ' any' → logprob: -1.8057684898376465
    4. ' all' → logprob: -1.8057684898376465
    5. ' not' → logprob: -3.8057684898376465
    6. 'not' → logprob: -4.3057684898376465
    7. 'len' → logprob: -6.5557684898376465
    8. ' len' → logprob: -7.6807684898376465
    9. 'max' → logprob: -9.055768966674805
    10. 'list' → logprob: -10.055768966674805

Token 59: '(count' (ID: 25892)
  Prédit: '(count'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(count' → logprob: -0.0008223761687986553
    2. '(' → logprob: -7.1258225440979
    3. '(set' → logprob: -11.000822067260742
    4. ' (' → logprob: -15.125822067260742
    5. '(st' → logprob: -15.125822067260742
    6. '(counter' → logprob: -15.750822067260742
    7. '=count' → logprob: -16.125822067260742
    8. 'count' → logprob: -16.250822067260742
    9. '(c' → logprob: -16.750822067260742
    10. '(
' → logprob: -17.125822067260742

Token 60: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.000890259922016412
    2. ')!=' → logprob: -7.750890254974365
    3. '.keys' → logprob: -8.750890731811523
    4. '.values' → logprob: -8.875890731811523
    5. ' )' → logprob: -9.125890731811523
    6. ' !=' → logprob: -11.500890731811523
    7. '!=' → logprob: -11.625890731811523
    8. ')==' → logprob: -11.625890731811523
    9. '[' → logprob: -12.125890731811523
    10. '```' → logprob: -12.875890731811523

Token 61: ' ==' (ID: 951)
  Prédit: ' !='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' !=' → logprob: -0.1950121968984604
    2. '!=' → logprob: -2.445012092590332
    3. ' ==' → logprob: -2.820012092590332
    4. '==' → logprob: -3.695012092590332
    5. ')' → logprob: -5.820012092590332
    6. '()' → logprob: -6.320012092590332
    7. '()!=' → logprob: -7.320012092590332
    8. ')!=' → logprob: -8.820012092590332
    9. '```' → logprob: -9.070012092590332
    10. '=' → logprob: -9.820012092590332

Token 62: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.03403694927692413
    2. ' ' → logprob: -3.659036874771118
    3. '3' → logprob: -4.909037113189697
    4. '6' → logprob: -9.034036636352539
    5. '4' → logprob: -9.284036636352539
    6. '   ' → logprob: -10.221536636352539
    7. '  ' → logprob: -11.221536636352539
    8. ')' → logprob: -11.346536636352539
    9. '0' → logprob: -11.721536636352539
    10. '<|end|>' → logprob: -12.221536636352539

Token 63: '3' (ID: 18)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.004439732059836388
    2. '3' → logprob: -5.504439830780029
    3. '6' → logprob: -8.129439353942871
    4. '4' → logprob: -10.254439353942871
    5. ' ' → logprob: -10.879439353942871
    6. '12' → logprob: -11.879439353942871
    7. '```' → logprob: -13.254439353942871
    8. '<|end|>' → logprob: -13.629439353942871
    9. '   ' → logprob: -14.754439353942871
    10. '<|end|>' → logprob: -14.941939353942871

Token 64: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.003639034228399396
    2. 'and' → logprob: -5.628639221191406
    3. ' ' → logprob: -10.253639221191406
    4. ':' → logprob: -12.878639221191406
    5. ' or' → logprob: -15.003639221191406
    6. '==' → logprob: -16.003639221191406
    7. '  ' → logprob: -16.128639221191406
    8. '=' → logprob: -16.128639221191406
    9. ' ' → logprob: -16.378639221191406
    10. ' ==' → logprob: -16.503639221191406

Token 65: ' all' (ID: 722)
  Prédit: 'all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'all' → logprob: -0.474155455827713
    2. ' all' → logprob: -0.9741554260253906
    3. '(all' → logprob: -10.59915542602539
    4. '	all' → logprob: -10.59915542602539
    5. ' aall' → logprob: -12.84915542602539
    6. ' ' → logprob: -13.09915542602539
    7. 'len' → logprob: -13.22415542602539
    8. ' ' → logprob: -13.28665542602539
    9. '   ' → logprob: -13.34915542602539
    10. 'any' → logprob: -13.41165542602539

Token 66: '(v' (ID: 6932)
  Prédit: '(count'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(count' → logprob: -0.45887938141822815
    2. '(value' → logprob: -1.4588793516159058
    3. '(v' → logprob: -2.0838794708251953
    4. '(c' → logprob: -5.333879470825195
    5. '(val' → logprob: -6.083879470825195
    6. '(x' → logprob: -6.708879470825195
    7. '(' → logprob: -6.958879470825195
    8. '((' → logprob: -7.458879470825195
    9. '(cnt' → logprob: -7.458879470825195
    10. '(lambda' → logprob: -7.958879470825195

Token 67: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.47413429617881775
    2. ' ==' → logprob: -0.9741343259811401
    3. '=' → logprob: -10.09913444519043
    4. '===' → logprob: -12.22413444519043
    5. '()==' → logprob: -12.59913444519043
    6. ']==' → logprob: -13.47413444519043
    7. 'alid' → logprob: -13.59913444519043
    8. 'alue' → logprob: -14.22413444519043
    9. 'al' → logprob: -14.22413444519043
    10. ')==' → logprob: -14.34913444519043

Token 68: ' ' (ID: 220)
  Prédit: '4'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -3.5597102396423e-05
    2. ' ' → logprob: -10.250035285949707
    3. '```' → logprob: -16.500036239624023
    4. '   ' → logprob: -17.000036239624023
    5. '' → logprob: -17.750036239624023
    6. '۴' → logprob: -18.000036239624023
    7. '٤' → logprob: -18.625036239624023
    8. '  ' → logprob: -18.875036239624023
    9. '৪' → logprob: -19.000036239624023
    10. '４' → logprob: -19.125036239624023

Token 69: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -9.758300438988954e-05
    2. ' ' → logprob: -9.250097274780273
    3. '```' → logprob: -14.500097274780273
    4. '   ' → logprob: -14.625097274780273
    5. '' → logprob: -16.187597274780273
    6. '٤' → logprob: -16.625097274780273
    7. '12' → logprob: -16.875097274780273
    8. '۴' → logprob: -17.187597274780273
    9. '৪' → logprob: -17.187597274780273
    10. '  ' → logprob: -17.250097274780273

Token 70: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.04859429597854614
    2. 'for' → logprob: -3.0485942363739014
    3. ')' → logprob: -12.29859447479248
    4. ' ' → logprob: -13.79859447479248
    5. '   ' → logprob: -14.17359447479248
    6. '	for' → logprob: -14.79859447479248
    7. '  ' → logprob: -16.923593521118164
    8. '```' → logprob: -16.923593521118164
    9. ' in' → logprob: -17.173593521118164
    10. 'v' → logprob: -17.298593521118164

Token 71: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.06995265930891037
    2. 'count' → logprob: -3.3199527263641357
    3. ' v' → logprob: -3.6949527263641357
    4. ' count' → logprob: -5.069952487945557
    5. '	v' → logprob: -9.319952964782715
    6. 'value' → logprob: -9.819952964782715
    7. ',v' → logprob: -10.069952964782715
    8. 'vq' → logprob: -10.569952964782715
    9. '_v' → logprob: -11.569952964782715
    10. ',count' → logprob: -11.819952964782715

Token 72: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.18391238152980804
    2. 'in' → logprob: -1.8089123964309692
    3. 'count' → logprob: -5.55891227722168
    4. ')' → logprob: -8.93391227722168
    5. 'values' → logprob: -9.43391227722168
    6. 'value' → logprob: -10.43391227722168
    7. '(count' → logprob: -10.68391227722168
    8. ' count' → logprob: -10.80891227722168
    9. '.values' → logprob: -11.68391227722168
    10. '()' → logprob: -13.05891227722168

Token 73: ' count' (ID: 3605)
  Prédit: 'count'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'count' → logprob: -0.029751643538475037
    2. ' count' → logprob: -3.5297515392303467
    3. '(count' → logprob: -14.904751777648926
    4. '[count' → logprob: -15.529751777648926
    5. 'counter' → logprob: -16.02975082397461
    6. ')' → logprob: -16.15475082397461
    7. ' ' → logprob: -16.27975082397461
    8. 'value' → logprob: -16.40475082397461
    9. '	count' → logprob: -16.65475082397461
    10. 'list' → logprob: -17.15475082397461

Token 74: '.values' (ID: 20422)
  Prédit: '.values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.values' → logprob: -0.0001126026691053994
    2. '.' → logprob: -9.250112533569336
    3. 'values' → logprob: -11.750112533569336
    4. '.value' → logprob: -12.875112533569336
    5. '.v' → logprob: -13.250112533569336
    6. ')' → logprob: -13.375112533569336
    7. ' .' → logprob: -13.500112533569336
    8. '().' → logprob: -13.750112533569336
    9. '.items' → logprob: -16.375112533569336
    10. ').' → logprob: -16.750112533569336

Token 75: '()):
' (ID: 83536)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.3018454313278198
    2. '())' → logprob: -1.4268454313278198
    3. '():' → logprob: -4.301845550537109
    4. ')' → logprob: -5.176845550537109
    5. '):' → logprob: -6.801845550537109
    6. '(' → logprob: -9.55184555053711
    7. ' ())' → logprob: -10.05184555053711
    8. '()):
' → logprob: -10.17684555053711
    9. '());' → logprob: -12.17684555053711
    10. '()),' → logprob: -12.42684555053711

Token 76: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.011450730264186859
    2. '   ' → logprob: -4.51145076751709
    3. ':
' → logprob: -8.01145076751709
    4. ' :' → logprob: -10.13645076751709
    5. ' and' → logprob: -11.51145076751709
    6. '):' → logprob: -11.76145076751709
    7. '<|end|>' → logprob: -12.63645076751709
    8. ',' → logprob: -12.88645076751709
    9. '       ' → logprob: -14.01145076751709
    10. '  ' → logprob: -14.26145076751709

Token 77: ' print' (ID: 2123)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2816488742828369
    2. 'print' (adapté à ' print') → logprob: -1.656648874282837
    3. ' print' → logprob: -2.906648874282837
    4. '	print' → logprob: -11.906648635864258
    5. '       ' → logprob: -12.031648635864258
    6. '    
' → logprob: -12.656648635864258
    7. ' ' → logprob: -13.156648635864258
    8. 'if' → logprob: -13.406648635864258
    9. ' if' → logprob: -13.781648635864258
    10. '    ' → logprob: -13.781648635864258

Token 78: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.023607295006513596
    2. '(' → logprob: -4.14860725402832
    3. '("("' → logprob: -4.89860725402832
    4. '("(' → logprob: -9.52360725402832
    5. '('' → logprob: -11.64860725402832
    6. '("")' → logprob: -13.27360725402832
    7. '("="' → logprob: -14.39860725402832
    8. '(":' → logprob: -14.52360725402832
    9. '"' → logprob: -14.77360725402832
    10. '(("' → logprob: -15.02360725402832

Token 79: 'yes' (ID: 6763)
  Prédit: 'yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'yes' → logprob: -0.0013752338709309697
    2. '"' → logprob: -6.876375198364258
    3. 'oui' → logprob: -9.126375198364258
    4. 'YES' → logprob: -9.251375198364258
    5. 'Yes' → logprob: -10.126375198364258
    6. 'ok' → logprob: -10.126375198364258
    7. 'yeah' → logprob: -10.751375198364258
    8. 'ye' → logprob: -11.376375198364258
    9. ' yes' → logprob: -12.001375198364258
    10. 'Oui' → logprob: -13.001375198364258

Token 80: '")
' (ID: 1896)
  Prédit: '")'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.3995860815048218
    2. '")
' → logprob: -1.1495860815048218
    3. 'else' → logprob: -4.774586200714111
    4. ')' → logprob: -5.899586200714111
    5. ')
' → logprob: -7.024586200714111
    6. ')")
' → logprob: -7.649586200714111
    7. ')")' → logprob: -9.649585723876953
    8. '}")
' → logprob: -12.524585723876953
    9. '")
' → logprob: -12.774585723876953
    10. '}")' → logprob: -13.024585723876953

Token 81: '   ' (ID: 271)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -5.240481914370321e-05
    2. ' else' → logprob: -9.875052452087402
    3. 'elif' → logprob: -14.500052452087402
    4. 'elser' → logprob: -15.875052452087402
    5. '```' → logprob: -16.000051498413086
    6. 'es' → logprob: -16.500051498413086
    7. '<|end|>' → logprob: -17.500051498413086
    8. '#else' → logprob: -17.625051498413086
    9. 'e' → logprob: -17.625051498413086
    10. 'elses' → logprob: -17.625051498413086

Token 82: ' exit' (ID: 10654)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.00014716439181938767
    2. ' else' → logprob: -8.875146865844727
    3. 'elif' → logprob: -11.875146865844727
    4. 'e' → logprob: -15.625146865844727
    5. 'el' → logprob: -16.625146865844727
    6. 'elser' → logprob: -16.875146865844727
    7. '```' → logprob: -17.875146865844727
    8. 'els' → logprob: -18.000146865844727
    9. 'lse' → logprob: -18.375146865844727
    10. ' ' → logprob: -18.500146865844727

Token 83: '()

' (ID: 5874)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.0010472200810909271
    2. '(' → logprob: -6.876047134399414
    3. '()
' → logprob: -11.626047134399414
    4. '()

' → logprob: -13.126047134399414
    5. '()`' → logprob: -13.376047134399414
    6. '(()' → logprob: -15.126047134399414
    7. '`()' → logprob: -15.501047134399414
    8. '()(' → logprob: -15.501047134399414
    9. ' ()' → logprob: -16.001047134399414
    10. '().' → logprob: -16.001047134399414

Token 84: '#' (ID: 2)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -5.512236498361744e-07
    2. 'else' → logprob: -14.875000953674316
    3. '```' → logprob: -16.0
    4. ' print' → logprob: -17.75
    5. 'prin' → logprob: -18.125
    6. '    
' → logprob: -19.375
    7. 'pr' → logprob: -20.0
    8. 'prints' → logprob: -20.125
    9. 'prit' → logprob: -20.25
    10. '#print' → logprob: -20.5

Token 85: ' Pour' (ID: 13931)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.6240566083070007e-06
    2. 'for' → logprob: -14.375001907348633
    3. 'else' → logprob: -14.625001907348633
    4. '#' → logprob: -15.875001907348633
    5. ' print' → logprob: -15.875001907348633
    6. 'prints' → logprob: -16.625001907348633
    7. 'if' → logprob: -17.250001907348633
    8. '#print' → logprob: -17.375001907348633
    9. '```' → logprob: -17.625001907348633
    10. 'from' → logprob: -17.875001907348633

Token 86: ' un' (ID: 537)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.24284854531288147
    2. ' vérifier' → logprob: -2.9928486347198486
    3. 'les' → logprob: -3.3678486347198486
    4. 'i' → logprob: -3.8678486347198486
    5. ' print' → logprob: -3.9928486347198486
    6. ' la' → logprob: -4.2428483963012695
    7. ' les' → logprob: -4.3678483963012695
    8. 'l' → logprob: -4.6178483963012695
    9. 'la' → logprob: -4.6178483963012695
    10. '#' → logprob: -4.7428483963012695

Token 87: ' parall' (ID: 133906)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'c' → logprob: -1.4763983488082886
    2. 'pr' → logprob: -1.6013983488082886
    3. 'cube' → logprob: -1.6013983488082886
    4. 'par' → logprob: -1.9763983488082886
    5. ' carré' → logprob: -2.851398468017578
    6. '"' → logprob: -3.226398468017578
    7. 'rectangle' → logprob: -3.851398468017578
    8. ' cube' → logprob: -3.976398468017578
    9. 't' → logprob: -4.101398468017578
    10. 'cub' → logprob: -4.351398468017578

Token 88: 'élé' (ID: 15228)
  Prédit: 'é'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'é' → logprob: -0.638744592666626
    2. 'élé' → logprob: -1.013744592666626
    3. 'ép' → logprob: -2.263744592666626
    4. 'él' → logprob: -6.013744354248047
    5. 'è' → logprob: -6.763744354248047
    6. '```' → logprob: -7.513744354248047
    7. 'l' → logprob: -8.513744354248047
    8. 'el' → logprob: -8.763744354248047
    9. 'èl' → logprob: -8.888744354248047
    10. 'p' → logprob: -9.013744354248047

Token 89: 'pip' (ID: 113064)
  Prédit: 'pip'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pip' → logprob: -0.0037041159812361
    2. 'p' → logprob: -5.628704071044922
    3. 'log' → logprob: -10.253704071044922
    4. 'ép' → logprob: -10.878704071044922
    5. 'l' → logprob: -11.128704071044922
    6. 'pé' → logprob: -11.503704071044922
    7. '```' → logprob: -12.628704071044922
    8. 'lé' → logprob: -12.753704071044922
    9. 'pid' → logprob: -12.753704071044922
    10. '-' → logprob: -13.003704071044922

Token 90: 'ède' (ID: 48404)
  Prédit: 'ède'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ède' → logprob: -0.5286624431610107
    2. 'è' → logprob: -1.1536624431610107
    3. 'p' → logprob: -2.5286624431610107
    4. 'é' → logprob: -5.40366268157959
    5. 'ip' → logprob: -5.52866268157959
    6. '`' → logprob: -6.77866268157959
    7. '\' → logprob: -7.02866268157959
    8. 'e' → logprob: -7.90366268157959
    9. '\u' → logprob: -8.15366268157959
    10. '�' → logprob: -8.15366268157959

Token 91: ' rectangle' (ID: 45808)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.2293459177017212
    2. 'elif' → logprob: -1.6043459177017212
    3. 'count' → logprob: -1.8543459177017212
    4. 'if' → logprob: -2.1043457984924316
    5. 'for' → logprob: -2.7293457984924316
    6. 'sticks' → logprob: -2.8543457984924316
    7. ':' → logprob: -3.4793457984924316
    8. 'else' → logprob: -3.6043457984924316
    9. 's' → logprob: -4.354345798492432
    10. 'from' → logprob: -4.479345798492432

Token 92: ',' (ID: 11)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0981334000825882
    2. '#' → logprob: -2.9731333255767822
    3. 'i' → logprob: -4.723133563995361
    4. 'if' → logprob: -4.848133563995361
    5. 'elif' → logprob: -4.848133563995361
    6. 'n' → logprob: -5.473133563995361
    7. 'import' → logprob: -6.098133563995361
    8. ' for' → logprob: -6.098133563995361
    9. ':' → logprob: -6.348133563995361
    10. 'sticks' → logprob: -6.848133563995361

Token 93: ' il' (ID: 1793)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.26851364970207214
    2. '#' → logprob: -2.0185136795043945
    3. 'found' → logprob: -3.1435136795043945
    4. 'if' → logprob: -3.2685136795043945
    5. 'from' → logprob: -4.7685136795043945
    6. 'n' → logprob: -5.3935136795043945
    7. ' for' → logprob: -6.3935136795043945
    8. 'sticks' → logprob: -6.5185136795043945
    9. 'possible' → logprob: -6.6435136795043945
    10. 'i' → logprob: -7.0185136795043945

Token 94: ' doit' (ID: 21822)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.7113098502159119
    2. ' faut' → logprob: -0.8363098502159119
    3. ' faudrait' → logprob: -3.3363099098205566
    4. 's' → logprob: -4.211309909820557
    5. '#' → logprob: -4.586309909820557
    6. ' faudra' → logprob: -5.211309909820557
    7. 'fa' → logprob: -6.586309909820557
    8. ''s' → logprob: -6.836309909820557
    9. 'if' → logprob: -7.211309909820557
    10. 'elif' → logprob: -7.461309909820557

Token 95: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.06987151503562927
    2. 'être' → logprob: -3.319871425628662
    3. ' y' → logprob: -3.819871425628662
    4. 'avoir' → logprob: -5.944871425628662
    5. '#' → logprob: -6.444871425628662
    6. 'fall' → logprob: -6.944871425628662
    7. 'ex' → logprob: -7.319871425628662
    8. '```' → logprob: -7.319871425628662
    9. 'f' → logprob: -7.819871425628662
    10. ' être' → logprob: -8.44487190246582

Token 96: ' avoir' (ID: 16595)
  Prédit: 'avoir'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'avoir' → logprob: -0.5396456122398376
    2. ' avoir' → logprob: -1.5396456718444824
    3. ''avoir' → logprob: -1.7896456718444824
    4. 'a' → logprob: -3.5396456718444824
    5. 'have' → logprob: -5.414645671844482
    6. '’avoir' → logprob: -7.164645671844482
    7. ' have' → logprob: -7.539645671844482
    8. 'être' → logprob: -8.414645195007324
    9. '```' → logprob: -8.414645195007324
    10. '#' → logprob: -9.414645195007324

Token 97: ' exactement' (ID: 108701)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.019827950745821
    2. '2' → logprob: -4.769827842712402
    3. ' ' → logprob: -5.269827842712402
    4. '6' → logprob: -5.644827842712402
    5. 'exact' → logprob: -6.894827842712402
    6. '4' → logprob: -7.394827842712402
    7. ' exactly' → logprob: -8.644827842712402
    8. 'len' → logprob: -9.269827842712402
    9. ' exactement' → logprob: -9.394827842712402
    10. '```' → logprob: -9.519827842712402

Token 98: ' ' (ID: 220)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.02518879994750023
    2. ' ' → logprob: -3.775188684463501
    3. '2' → logprob: -6.65018892288208
    4. '6' → logprob: -7.90018892288208
    5. ' trois' → logprob: -9.400188446044922
    6. '4' → logprob: -10.525188446044922
    7. '9' → logprob: -10.587688446044922
    8. '   ' → logprob: -10.650188446044922
    9. ' three' → logprob: -10.900188446044922
    10. '  ' → logprob: -11.087688446044922

Token 99: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.0004931025905534625
    2. '2' → logprob: -8.500493049621582
    3. '6' → logprob: -9.125493049621582
    4. ' ' → logprob: -9.125493049621582
    5. ' trois' → logprob: -11.000493049621582
    6. '```' → logprob: -11.250493049621582
    7. '4' → logprob: -12.000493049621582
    8. '8' → logprob: -12.000493049621582
    9. '9' → logprob: -12.125493049621582
    10. 'three' → logprob: -12.250493049621582

Token 100: ' longue' (ID: 59564)
  Prédit: 'types'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'types' → logprob: -0.3799384534358978
    2. ' types' → logprob: -2.2549383640289307
    3. '<|end|>' → logprob: -3.1299383640289307
    4. 'count' → logprob: -3.7549383640289307
    5. ' different' → logprob: -3.8799383640289307
    6. ' or' → logprob: -4.37993860244751
    7. 'length' → logprob: -4.62993860244751
    8. 'tokens' → logprob: -4.75493860244751
    9. 'distinct' → logprob: -4.75493860244751
    10. 'different' → logprob: -4.75493860244751

Token 101: 'urs' (ID: 1628)
  Prédit: 'urs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'urs' → logprob: -0.0006408308399841189
    2. 's' → logprob: -7.875640869140625
    3. 'rs' → logprob: -8.750640869140625
    4. 'ur' → logprob: -9.750640869140625
    5. 'urses' → logprob: -10.625640869140625
    6. 'u' → logprob: -12.125640869140625
    7. 'eurs' → logprob: -12.500640869140625
    8. 'r' → logprob: -12.875640869140625
    9. 'ss' → logprob: -13.500640869140625
    10. 'URS' → logprob: -14.000640869140625

Token 102: ' différentes' (ID: 41398)
  Prédit: 'count'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'count' → logprob: -0.7280423045158386
    2. 'if' → logprob: -0.9780423045158386
    3. ',' → logprob: -3.1030423641204834
    4. 'elif' → logprob: -3.1030423641204834
    5. 'from' → logprob: -3.9780423641204834
    6. ':' → logprob: -4.103042125701904
    7. 'sticks' → logprob: -5.978042125701904
    8. 'and' → logprob: -6.228042125701904
    9. '=' → logprob: -6.228042125701904
    10. '#' → logprob: -6.478042125701904

Token 103: ',
' (ID: 412)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.13943547010421753
    2. 'count' → logprob: -2.5144355297088623
    3. 'elif' → logprob: -3.7644355297088623
    4. 'and' → logprob: -3.8894355297088623
    5. ':' → logprob: -6.014435291290283
    6. ',' → logprob: -7.014435291290283
    7. 'sticks' → logprob: -7.514435291290283
    8. 'or' → logprob: -7.764435291290283
    9. ' and' → logprob: -8.639435768127441
    10. '#' → logprob: -8.764435768127441

Token 104: '#' (ID: 2)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.3580833077430725
    2. '#' → logprob: -1.4830832481384277
    3. 'and' → logprob: -3.3580832481384277
    4. 'elif' → logprob: -3.6080832481384277
    5. 'count' → logprob: -5.858083248138428
    6. ' and' → logprob: -6.108083248138428
    7. ' if' → logprob: -6.358083248138428
    8. 'but' → logprob: -6.983083248138428
    9. 'sticks' → logprob: -7.358083248138428
    10. '   ' → logprob: -7.733083248138428

Token 105: ' chacune' (ID: 127465)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.037752021104097366
    2. 'elif' → logprob: -3.7877519130706787
    3. 'and' → logprob: -5.037752151489258
    4. '#' → logprob: -5.287752151489258
    5. 'count' → logprob: -6.537752151489258
    6. ' if' → logprob: -7.787752151489258
    7. 'for' → logprob: -8.662752151489258
    8. 'from' → logprob: -8.662752151489258
    9. 'counts' → logprob: -9.287752151489258
    10. 'sticks' → logprob: -9.412752151489258

Token 106: ' appara' (ID: 52982)
  Prédit: 'ap'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ap' → logprob: -1.4961694478988647
    2. 'ayant' → logprob: -1.4961694478988647
    3. 'avec' → logprob: -1.7461694478988647
    4. 'appar' → logprob: -1.9961694478988647
    5. 'with' → logprob: -2.9961695671081543
    6. 'appe' → logprob: -3.6211695671081543
    7. ' appara' → logprob: -3.7461695671081543
    8. ' appearing' → logprob: -4.121169567108154
    9. 'apper' → logprob: -4.371169567108154
    10. '```' → logprob: -4.621169567108154

Token 107: 'issant' (ID: 31359)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' → logprob: -0.05925851687788963
    2. 'it' → logprob: -3.309258460998535
    3. 'ît' → logprob: -4.684258460998535
    4. 'nt' → logprob: -5.809258460998535
    5. 'issant' → logprob: -5.934258460998535
    6. 'çant' → logprob: -6.059258460998535
    7. 'ant' → logprob: -6.559258460998535
    8. 'tant' → logprob: -8.184258460998535
    9. 'î' → logprob: -8.559258460998535
    10. 'à' → logprob: -8.684258460998535

Token 108: ' exactement' (ID: 108701)
  Prédit: '4'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.026084765791893005
    2. 'exact' → logprob: -3.7760846614837646
    3. ' ' → logprob: -6.151084899902344
    4. 'au' → logprob: -8.151084899902344
    5. ' exactly' → logprob: -9.401084899902344
    6. 'four' → logprob: -9.526084899902344
    7. ' exactement' → logprob: -9.901084899902344
    8. ' quatre' → logprob: -9.901084899902344
    9. '  ' → logprob: -10.276084899902344
    10. '   ' → logprob: -10.651084899902344

Token 109: ' ' (ID: 220)
  Prédit: '4'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.0011892797192558646
    2. ' ' → logprob: -6.751189231872559
    3. ' quatre' → logprob: -11.751189231872559
    4. 'qu' → logprob: -12.626189231872559
    5. '```' → logprob: -13.501189231872559
    6. 'quad' → logprob: -13.876189231872559
    7. '' → logprob: -14.376189231872559
    8. 'four' → logprob: -14.501189231872559
    9. 'fois' → logprob: -14.501189231872559
    10. '   ' → logprob: -14.751189231872559

Token 110: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -8.864272967912257e-05
    2. ' ' → logprob: -9.375088691711426
    3. '2' → logprob: -12.750088691711426
    4. '   ' → logprob: -15.375088691711426
    5. '8' → logprob: -15.875088691711426
    6. '```' → logprob: -16.00008773803711
    7. 'four' → logprob: -16.50008773803711
    8. ' quatre' → logprob: -16.87508773803711
    9. '৪' → logprob: -17.25008773803711
    10. '}' → logprob: -17.31258773803711

Token 111: ' fois' (ID: 14697)
  Prédit: 'fois'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'fois' → logprob: -0.6903663873672485
    2. ' fois' → logprob: -0.8153663873672485
    3. 'times' → logprob: -2.940366268157959
    4. 'for' → logprob: -6.065366268157959
    5. ' times' → logprob: -7.690366268157959
    6. 'print' → logprob: -8.190366744995117
    7. 'f' → logprob: -10.065366744995117
    8. ' veces' → logprob: -10.315366744995117
    9. 'tokens' → logprob: -10.815366744995117
    10. ',' → logprob: -11.315366744995117

Token 112: '
' (ID: 198)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.03035975806415081
    2. 'elif' → logprob: -4.405359745025635
    3. '#' → logprob: -4.905359745025635
    4. 'print' → logprob: -5.780359745025635
    5. 'else' → logprob: -5.780359745025635
    6. 'count' → logprob: -6.405359745025635
    7. 'sticks' → logprob: -6.905359745025635
    8. ' if' → logprob: -8.155360221862793
    9. '   ' → logprob: -8.405360221862793
    10. 'for' → logprob: -8.530360221862793

Token 113: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.10916057974100113
    2. 'elif' → logprob: -2.8591606616973877
    3. '#' → logprob: -3.7341606616973877
    4. 'count' → logprob: -4.984160423278809
    5. 'else' → logprob: -5.109160423278809
    6. 'print' → logprob: -5.359160423278809
    7. 'for' → logprob: -6.609160423278809
    8. 'length' → logprob: -6.734160423278809
    9. 'sticks' → logprob: -7.234160423278809
    10. 'sizes' → logprob: -8.859160423278809

Token 114: ' len' (ID: 4631)
  Prédit: ' len'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' len' → logprob: -0.042369917035102844
    2. 'len' → logprob: -3.292369842529297
    3. ' sticks' → logprob: -5.667369842529297
    4. '(len' → logprob: -7.667369842529297
    5. ' count' → logprob: -8.792369842529297
    6. 'sticks' → logprob: -9.542369842529297
    7. ' ' → logprob: -10.292369842529297
    8. 'count' → logprob: -10.667369842529297
    9. ' not' → logprob: -10.979869842529297
    10. ' (' → logprob: -11.354869842529297

Token 115: '(count' (ID: 25892)
  Prédit: '(count'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(count' → logprob: -0.01821807585656643
    2. '(st' → logprob: -4.018218040466309
    3. '(' → logprob: -10.143218040466309
    4. 'count' → logprob: -11.143218040466309
    5. ' (' → logprob: -11.893218040466309
    6. '(s' → logprob: -13.143218040466309
    7. ' sticks' → logprob: -14.393218040466309
    8. '(c' → logprob: -14.643218040466309
    9. '(set' → logprob: -14.643218040466309
    10. '=count' → logprob: -14.768218040466309

Token 116: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00145475915633142
    2. ' )' → logprob: -7.626454830169678
    3. ')==' → logprob: -7.626454830169678
    4. ' ==' → logprob: -8.37645435333252
    5. '==' → logprob: -8.50145435333252
    6. '()' → logprob: -11.37645435333252
    7. '.keys' → logprob: -11.87645435333252
    8. '[' → logprob: -12.68895435333252
    9. '```' → logprob: -12.68895435333252
    10. ')!=' → logprob: -12.75145435333252

Token 117: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.061314694583415985
    2. ' !=' → logprob: -3.311314582824707
    3. '==' → logprob: -3.811314582824707
    4. '!=' → logprob: -7.561314582824707
    5. ' ' → logprob: -8.061314582824707
    6. ' >=' → logprob: -11.561314582824707
    7. ' <=' → logprob: -11.998814582824707
    8. ' <' → logprob: -12.186314582824707
    9. ' >' → logprob: -12.373814582824707
    10. ')' → logprob: -12.436314582824707

Token 118: ' ' (ID: 220)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.03367612883448601
    2. ' ' → logprob: -3.4086761474609375
    3. '2' → logprob: -12.033676147460938
    4. '  ' → logprob: -12.096176147460938
    5. '4' → logprob: -12.471176147460938
    6. '1' → logprob: -12.533676147460938
    7. '<|end|>' → logprob: -13.283676147460938
    8. '   ' → logprob: -13.721176147460938
    9. '```' → logprob: -13.971176147460938
    10. '0' → logprob: -14.221176147460938

Token 119: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.0024889763444662094
    2. ' ' → logprob: -6.00248908996582
    3. '  ' → logprob: -12.81498908996582
    4. '2' → logprob: -12.87748908996582
    5. '4' → logprob: -13.87748908996582
    6. '   ' → logprob: -14.00248908996582
    7. '1' → logprob: -14.06498908996582
    8. '```' → logprob: -14.43998908996582
    9. '<|end|>' → logprob: -14.56498908996582
    10. '0' → logprob: -14.62748908996582

Token 120: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.0028194934129714966
    2. 'and' → logprob: -5.877819538116455
    3. ' ' → logprob: -11.627819061279297
    4. '   ' → logprob: -12.877819061279297
    5. ':' → logprob: -13.877819061279297
    6. '    ' → logprob: -14.377819061279297
    7. ' or' → logprob: -14.877819061279297
    8. ' an' → logprob: -15.627819061279297
    9. ' a' → logprob: -16.002819061279297
    10. '  ' → logprob: -16.002819061279297

Token 121: ' all' (ID: 722)
  Prédit: 'all'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'all' → logprob: -0.11307636648416519
    2. ' all' → logprob: -2.2380764484405518
    3. 'sorted' → logprob: -9.863076210021973
    4. 'list' → logprob: -9.988076210021973
    5. 'set' → logprob: -10.363076210021973
    6. ' ' → logprob: -10.988076210021973
    7. '   ' → logprob: -11.113076210021973
    8. ' list' → logprob: -11.113076210021973
    9. '
' → logprob: -11.488076210021973
    10. 'not' → logprob: -11.613076210021973

Token 122: '(v' (ID: 6932)
  Prédit: '(v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(v' → logprob: -0.0007686520111747086
    2. '(count' → logprob: -7.750768661499023
    3. '(' → logprob: -9.250768661499023
    4. 'count' → logprob: -9.500768661499023
    5. ' (' → logprob: -9.500768661499023
    6. 'v' → logprob: -9.875768661499023
    7. '(value' → logprob: -10.500768661499023
    8. '(
' → logprob: -13.000768661499023
    9. '(k' → logprob: -13.375768661499023
    10. '((' → logprob: -13.500768661499023

Token 123: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.10023675858974457
    2. '==' → logprob: -2.350236654281616
    3. ' ' → logprob: -11.225236892700195
    4. ' >=' → logprob: -12.350236892700195
    5. '=' → logprob: -12.475236892700195
    6. ')' → logprob: -12.850236892700195
    7. ' <=' → logprob: -14.100236892700195
    8. '   ' → logprob: -14.350236892700195
    9. ')==' → logprob: -14.350236892700195
    10. '===' → logprob: -14.475236892700195

Token 124: ' ' (ID: 220)
  Prédit: '4'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.033653419464826584
    2. ' ' → logprob: -3.408653497695923
    3. '   ' → logprob: -13.033653259277344
    4. '```' → logprob: -13.533653259277344
    5. '
' → logprob: -13.908653259277344
    6. '  ' → logprob: -13.971153259277344
    7. '

' → logprob: -15.471153259277344
    8. ' ' → logprob: -15.533653259277344
    9. '  
' → logprob: -15.783653259277344
    10. '12' → logprob: -15.783653259277344

Token 125: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.0007137430948205292
    2. ' ' → logprob: -7.25071382522583
    3. '   ' → logprob: -13.750713348388672
    4. '```' → logprob: -14.063213348388672
    5. '۴' → logprob: -15.438213348388672
    6. '  ' → logprob: -15.500713348388672
    7. '
' → logprob: -15.500713348388672
    8. ' four' → logprob: -16.063213348388672
    9. 'four' → logprob: -16.250713348388672
    10. '৪' → logprob: -16.250713348388672

Token 126: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.10021379590034485
    2. 'for' → logprob: -2.3502137660980225
    3. ')' → logprob: -12.225214004516602
    4. '	for' → logprob: -13.725214004516602
    5. ' ' → logprob: -14.725214004516602
    6. ' in' → logprob: -15.350214004516602
    7. ' or' → logprob: -15.475214004516602
    8. 'or' → logprob: -16.7252140045166
    9. '()' → logprob: -16.8502140045166
    10. ' f' → logprob: -16.9752140045166

Token 127: ' v' (ID: 323)
  Prédit: 'count'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'count' → logprob: -0.10141720622777939
    2. ' count' → logprob: -2.476417303085327
    3. 'v' → logprob: -4.476417064666748
    4. ' v' → logprob: -6.976417064666748
    5. 'value' → logprob: -10.226417541503906
    6. '(count' → logprob: -10.976417541503906
    7. '[count' → logprob: -11.226417541503906
    8. ' in' → logprob: -12.351417541503906
    9. '	count' → logprob: -12.726417541503906
    10. ' ' → logprob: -12.726417541503906

Token 128: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.016271186992526054
    2. 'in' → logprob: -4.641271114349365
    3. 'v' → logprob: -5.516271114349365
    4. 'count' → logprob: -6.141271114349365
    5. 's' → logprob: -9.391271591186523
    6. 'value' → logprob: -10.391271591186523
    7. '.values' → logprob: -10.391271591186523
    8. ' count' → logprob: -10.641271591186523
    9. ' ' → logprob: -10.891271591186523
    10. 'n' → logprob: -11.016271591186523

Token 129: ' count' (ID: 3605)
  Prédit: 'count'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'count' → logprob: -0.11285509914159775
    2. ' count' → logprob: -2.2378551959991455
    3. 'counts' → logprob: -11.987854957580566
    4. '[count' → logprob: -12.112854957580566
    5. '(count' → logprob: -12.612854957580566
    6. ' counts' → logprob: -12.987854957580566
    7. 'sticks' → logprob: -13.112854957580566
    8. 'values' → logprob: -13.612854957580566
    9. ' ' → logprob: -13.612854957580566
    10. 'value' → logprob: -13.737854957580566

Token 130: '.values' (ID: 20422)
  Prédit: '.values'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.values' → logprob: -0.001017567701637745
    2. 'values' → logprob: -7.2510175704956055
    3. '.' → logprob: -9.126017570495605
    4. '().' → logprob: -9.376017570495605
    5. '(values' → logprob: -9.876017570495605
    6. ' .' → logprob: -10.376017570495605
    7. ')' → logprob: -10.876017570495605
    8. ').' → logprob: -12.751017570495605
    9. 's' → logprob: -13.376017570495605
    10. '	values' → logprob: -13.501017570495605

Token 131: '()):
' (ID: 83536)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.3201727569103241
    2. '):' → logprob: -1.4451727867126465
    3. '():' → logprob: -3.3201727867126465
    4. '()):
' → logprob: -6.3201727867126465
    5. ')' → logprob: -9.070172309875488
    6. '(' → logprob: -9.820172309875488
    7. '):
' → logprob: -9.820172309875488
    8. '())' → logprob: -10.195172309875488
    9. '():
' → logprob: -10.695172309875488
    10. '[]):' → logprob: -11.695172309875488

Token 132: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.05891918018460274
    2. '   ' → logprob: -3.5589191913604736
    3. ':
' → logprob: -3.5589191913604736
    4. ' and' → logprob: -8.558918952941895
    5. 'and' → logprob: -10.433918952941895
    6. 'print' → logprob: -10.933918952941895
    7. ' :' → logprob: -11.308918952941895
    8. ' or' → logprob: -11.808918952941895
    9. ' print' → logprob: -12.933918952941895
    10. '       ' → logprob: -12.933918952941895

Token 133: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.002427621278911829
    2. '   ' → logprob: -6.127427577972412
    3. ' print' → logprob: -8.62742805480957
    4. 'pass' → logprob: -10.87742805480957
    5. 'for' → logprob: -11.50242805480957
    6. 'if' → logprob: -11.50242805480957
    7. '#' → logprob: -11.62742805480957
    8. 'length' → logprob: -11.87742805480957
    9. '    
' → logprob: -13.75242805480957
    10. 'from' → logprob: -14.00242805480957

Token 134: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.002817835658788681
    2. '(' → logprob: -6.002817630767822
    3. '("("' → logprob: -8.00281810760498
    4. '('' → logprob: -12.62781810760498
    5. '("(' → logprob: -12.62781810760498
    6. '("")' → logprob: -14.00281810760498
    7. '()' → logprob: -16.377817153930664
    8. '(""' → logprob: -17.502817153930664
    9. '(("' → logprob: -17.627817153930664
    10. '("="' → logprob: -17.752817153930664

Token 135: 'yes' (ID: 6763)
  Prédit: 'yes'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'yes' → logprob: -0.12964597344398499
    2. '"' → logprob: -2.254646062850952
    3. 'no' → logprob: -4.129645824432373
    4. ' yes' → logprob: -8.629646301269531
    5. 'par' → logprob: -9.504646301269531
    6. 'oui' → logprob: -9.629646301269531
    7. 'Yes' → logprob: -10.129646301269531
    8. 'YES' → logprob: -10.692146301269531
    9. ''' → logprob: -10.754646301269531
    10. 'rectangle' → logprob: -11.067146301269531

Token 136: '")
' (ID: 1896)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.49650344252586365
    2. ')
' → logprob: -1.621503472328186
    3. '")' → logprob: -1.746503472328186
    4. '")
' → logprob: -3.9965033531188965
    5. 'else' → logprob: -7.1215033531188965
    6. '   ' → logprob: -9.496503829956055
    7. ')")' → logprob: -10.246503829956055
    8. '')' → logprob: -10.996503829956055
    9. ')")
' → logprob: -11.371503829956055
    10. '')
' → logprob: -11.996503829956055

Token 137: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -4.739826181321405e-05
    2. ' else' → logprob: -10.00004768371582
    3. '#else' → logprob: -14.25004768371582
    4. 'elif' → logprob: -15.00004768371582
    5. '<|end|>' → logprob: -15.00004768371582
    6. 'elser' → logprob: -15.50004768371582
    7. '```' → logprob: -15.50004768371582
    8. ')' → logprob: -16.25004768371582
    9. 'elses' → logprob: -16.75004768371582
    10. '    
' → logprob: -17.12504768371582

Token 138: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.023429950699210167
    2. ':
' → logprob: -3.7734298706054688
    3. '   ' → logprob: -8.773429870605469
    4. '("' → logprob: -11.648429870605469
    5. ' :' → logprob: -11.898429870605469
    6. '():' → logprob: -12.648429870605469
    7. '():
' → logprob: -12.898429870605469
    8. 'print' → logprob: -13.148429870605469
    9. '(' → logprob: -13.523429870605469
    10. ' :
' → logprob: -13.773429870605469

Token 139: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0032687378115952015
    2. '"' → logprob: -5.878268718719482
    3. 'print' → logprob: -7.753268718719482
    4. ' print' → logprob: -11.00326919555664
    5. 'no' → logprob: -12.25326919555664
    6. ' "' → logprob: -12.62826919555664
    7. ' ' → logprob: -12.62826919555664
    8. '  ' → logprob: -13.25326919555664
    9. '("' → logprob: -13.62826919555664
    10. '    
' → logprob: -13.87826919555664

Token 140: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.00016921341011766344
    2. ' print' → logprob: -9.000168800354004
    3. '   ' → logprob: -10.000168800354004
    4. '"' → logprob: -16.00016975402832
    5. ' ' → logprob: -16.25016975402832
    6. '	print' → logprob: -16.25016975402832
    7. 'no' → logprob: -17.62516975402832
    8. '  ' → logprob: -17.87516975402832
    9. '.print' → logprob: -18.12516975402832
    10. 'printf' → logprob: -18.37516975402832

Token 141: '("' (ID: 568)
  Prédit: '("'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '("' → logprob: -0.005293646361678839
    2. '(' → logprob: -5.255293846130371
    3. '("("' → logprob: -9.755293846130371
    4. '("(' → logprob: -13.880293846130371
    5. '('' → logprob: -14.130293846130371
    6. '("")' → logprob: -15.755293846130371
    7. '(
' → logprob: -17.005292892456055
    8. '()' → logprob: -17.630292892456055
    9. ')("' → logprob: -18.130292892456055
    10. '(

' → logprob: -18.255292892456055

Token 142: 'no' (ID: 1750)
  Prédit: 'no'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'no' → logprob: -7.896309739408025e-07
    2. '"' → logprob: -14.750000953674316
    3. 'n' → logprob: -14.875000953674316
    4. ' no' → logprob: -18.75
    5. 'No' → logprob: -19.0
    6. 'not' → logprob: -19.125
    7. 'yes' → logprob: -20.375
    8. 'non' → logprob: -20.375
    9. '")' → logprob: -20.625
    10. '	no' → logprob: -20.875

Token 143: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.3871082365512848
    2. ')' → logprob: -1.1371082067489624
    3. ')")' → logprob: -8.387107849121094
    4. '')' → logprob: -12.262107849121094
    5. ')
' → logprob: -13.387107849121094
    6. '")
' → logprob: -13.637107849121094
    7. ')"' → logprob: -14.762107849121094
    8. '`)' → logprob: -14.762107849121094
    9. '"' → logprob: -15.137107849121094
    10. '}")' → logprob: -15.637107849121094


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 141
Tokens correctement prédits (1ère position, stricte): 46
Tokens correctement prédits (1ère position, avec adaptation): 48
Tokens correctement prédits (top 10): 110
Précision stricte (1ère position): 32.62%
Précision adaptée (1ère position): 34.04%
Précision (top 10): 78.01%
================================================================================
