================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:07:41
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
import sys
sys.setrecursionlimit(10**7)
input = sys.stdin.readline

n = int(input())
m = int(input())
adj = [[] for _ in range(n + 1)]
indeg = [0] * (n + 1)
edges = set()
for _ in range(m):
    i_, j_ = map(int, input().split())
    adj[i_].append(j_)
    indeg[j_] += 1
    edges.add((i_, j_))

from collections import deque

# Topological sort with uniqueness check
q = deque()
for i in range(1, n + 1):
    if indeg[i] == 0:
        q.append(i)

res = []
unique = True
while q:
    if len(q) >= 2:  # multiple choices => multiple topological orders possible
        unique = False
    u = q.popleft()
    res.append(u)
    for v in adj[u]:
        indeg[v] -= 1
        if indeg[v] == 0:
            q.append(v)

# Check if topological order is complete
if len(res) < n:
    # This means input contradicts info, but problem does not specify what then
    # Still, output any order and 0 to satisfy format (or could print nothing or error)
    # But problem assumes consistent input, so no cycle expected
    pass

# The problem expects order by ranks from 1 to n.
# According to the problem, the team ranked a should beat team ranked b if a < b.
# The topological order gives an order where edges i->j means i ranked higher than j.
# So just print res as rank order.

print('\n'.join(map(str, res)))
print(0 if unique else 1)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'import' (ID: 561)
  → Token d'amorce (pas de prédiction)

Token 1: ' sys' (ID: 12228)
  → Token d'amorce (pas de prédiction)

Token 2: '
' (ID: 198)
  → Token d'amorce (pas de prédiction)

Token 3: 'sys' (ID: 17324)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.02374373935163021
    2. '\n' → logprob: -4.023743629455566
    3. '<|end|>' → logprob: -6.773743629455566
    4. '\' → logprob: -7.273743629455566
    5. 'newline' → logprob: -7.273743629455566
    6. 'import' → logprob: -7.398743629455566
    7. '```' → logprob: -7.648743629455566
    8. '' → logprob: -8.023743629455566
    9. '<|end|>' → logprob: -8.023743629455566
    10. 'print' → logprob: -8.398743629455566

Token 4: '.set' (ID: 1230)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -2.2127087504486553e-05
    2. ' .' → logprob: -11.875021934509277
    3. '.`' → logprob: -13.125021934509277
    4. '[' → logprob: -13.250021934509277
    5. '.readline' → logprob: -13.250021934509277
    6. '.import' → logprob: -13.875021934509277
    7. '.user' → logprob: -14.000021934509277
    8. '."""' → logprob: -14.125021934509277
    9. '.​' → logprob: -14.250021934509277
    10. '.[' → logprob: -14.625021934509277

Token 5: 'rec' (ID: 9285)
  Prédit: 'trace'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'trace' → logprob: -1.288149118423462
    2. 't' → logprob: -1.413149118423462
    3. 'default' → logprob: -2.038149118423462
    4. '_' → logprob: -2.538149118423462
    5. 's' → logprob: -2.913149118423462
    6. 'encoding' → logprob: -3.663149118423462
    7. 'limit' → logprob: -4.038148880004883
    8. '_version' → logprob: -4.288148880004883
    9. 'rl' → logprob: -4.538148880004883
    10. 'sys' → logprob: -4.538148880004883

Token 6: 'ursion' (ID: 41658)
  Prédit: 'ursion'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ursion' → logprob: -0.0037456906866282225
    2. 'ursive' → logprob: -6.3787455558776855
    3. 'limit' → logprob: -7.0037455558776855
    4. 'ur' → logprob: -7.5037455558776855
    5. 'urse' → logprob: -9.253746032714844
    6. 'urs' → logprob: -9.628746032714844
    7. '_limit' → logprob: -9.628746032714844
    8. 'ut' → logprob: -9.753746032714844
    9. 'u' → logprob: -10.003746032714844
    10. 't' → logprob: -10.128746032714844

Token 7: 'limit' (ID: 19698)
  Prédit: 'limit'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'limit' → logprob: -0.47616830468177795
    2. '_limit' → logprob: -0.9761682748794556
    3. '_depth' → logprob: -6.351168155670166
    4. 'depth' → logprob: -8.601168632507324
    5. ' limit' → logprob: -10.101168632507324
    6. 'lim' → logprob: -10.476168632507324
    7. '_stack' → logprob: -10.851168632507324
    8. '(limit' → logprob: -11.851168632507324
    9. '_rate' → logprob: -12.101168632507324
    10. '_lim' → logprob: -12.226168632507324

Token 8: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -2.3557529857498594e-05
    2. '(
' → logprob: -11.37502384185791
    3. ' (' → logprob: -11.87502384185791
    4. '(

' → logprob: -12.75002384185791
    5. '((' → logprob: -14.50002384185791
    6. '```' → logprob: -14.75002384185791
    7. '("("' → logprob: -14.75002384185791
    8. '('' → logprob: -15.50002384185791
    9. '(.' → logprob: -15.62502384185791
    10. '(
' → logprob: -15.75002384185791

Token 9: '10' (ID: 702)
  Prédit: '10'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.6933199763298035
    2. '100' → logprob: -0.6933199763298035
    3. ' ' → logprob: -9.318320274353027
    4. '500' → logprob: -9.818320274353027
    5. '300' → logprob: -11.443320274353027
    6. '999' → logprob: -12.568320274353027
    7. '250' → logprob: -12.818320274353027
    8. '1' → logprob: -12.943320274353027
    9. '150' → logprob: -12.943320274353027
    10. '200' → logprob: -13.318320274353027

Token 10: '**' (ID: 410)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.09284054487943649
    2. '000' → logprob: -2.7178404331207275
    3. '00' → logprob: -3.8428404331207275
    4. '4' → logprob: -7.092840671539307
    5. '6' → logprob: -8.217840194702148
    6. '**' → logprob: -9.967840194702148
    7. '```' → logprob: -10.842840194702148
    8. '5' → logprob: -11.092840194702148
    9. '3' → logprob: -11.592840194702148
    10. '2' → logprob: -12.092840194702148

Token 11: '7' (ID: 22)
  Prédit: '7'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '7' → logprob: -0.0031121151987463236
    2. '9' → logprob: -6.003112316131592
    3. '8' → logprob: -7.503112316131592
    4. '6' → logprob: -9.378111839294434
    5. ' ' → logprob: -16.25311279296875
    6. '```' → logprob: -16.37811279296875
    7. ')' → logprob: -18.50311279296875
    8. '(' → logprob: -19.62811279296875
    9. '``' → logprob: -20.00311279296875
    10. '}' → logprob: -20.75311279296875

Token 12: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.3663626305060461e-05
    2. '))' → logprob: -11.75001335144043
    3. ' )' → logprob: -12.12501335144043
    4. ')
' → logprob: -15.62501335144043
    5. ')))' → logprob: -16.75001335144043
    6. ')`' → logprob: -17.00001335144043
    7. ' ' → logprob: -17.25001335144043
    8. '）' → logprob: -18.12501335144043
    9. '`)' → logprob: -18.12501335144043
    10. '```' → logprob: -18.50001335144043

Token 13: 'input' (ID: 2586)
  Prédit: '\'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\' → logprob: -0.47150886058807373
    2. '\n' → logprob: -1.9715088605880737
    3. '
' → logprob: -2.2215089797973633
    4. '
' → logprob: -2.9715089797973633
    5. '' → logprob: -3.7215089797973633
    6. '()' → logprob: -4.471508979797363
    7. '#' → logprob: -4.846508979797363
    8. ')' → logprob: -4.971508979797363
    9. '(' → logprob: -4.971508979797363
    10. 'import' → logprob: -5.721508979797363

Token 14: ' =' (ID: 314)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0525028370320797
    2. '()' → logprob: -3.0525028705596924
    3. '.' → logprob: -6.302502632141113
    4. ')' → logprob: -7.177502632141113
    5. '().' → logprob: -7.302502632141113
    6. '('' → logprob: -9.052502632141113
    7. '("("' → logprob: -9.552502632141113
    8. ''' → logprob: -9.677502632141113
    9. '40' → logprob: -9.802502632141113
    10. '```' → logprob: -10.177502632141113

Token 15: ' sys' (ID: 12228)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.33082571625709534
    2. 'input' → logprob: -1.455825686454773
    3. ' sys' → logprob: -3.0808258056640625
    4. 'sys' → logprob: -6.0808258056640625
    5. ' open' → logprob: -9.830825805664062
    6. ' lambda' → logprob: -9.830825805664062
    7. '```' → logprob: -10.330825805664062
    8. ' iter' → logprob: -10.705825805664062
    9. ' ' → logprob: -10.955825805664062
    10. ' raw' → logprob: -11.205825805664062

Token 16: '.stdin' (ID: 93480)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.2897496819496155
    2. '.stdin' → logprob: -1.7897496223449707
    3. '.readline' → logprob: -2.5397496223449707
    4. ' .' → logprob: -5.539749622344971
    5. '.stdout' → logprob: -7.164749622344971
    6. '.argv' → logprob: -8.039750099182129
    7. '.input' → logprob: -8.664750099182129
    8. '.stderr' → logprob: -9.914750099182129
    9. '.get' → logprob: -10.289750099182129
    10. '.​' → logprob: -10.414750099182129

Token 17: '.readline' (ID: 74673)
  Prédit: '.readline'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.readline' → logprob: -0.008493069559335709
    2. '.read' → logprob: -5.133492946624756
    3. '.' → logprob: -6.008492946624756
    4. '.Read' → logprob: -9.633493423461914
    5. 'read' → logprob: -11.133493423461914
    6. '.buffer' → logprob: -11.383493423461914
    7. '.readlines' → logprob: -11.633493423461914
    8. '.READ' → logprob: -14.383493423461914
    9. '.Reader' → logprob: -15.008493423461914
    10. 'buffer' → logprob: -15.133493423461914

Token 18: '

' (ID: 279)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()' → logprob: -0.6497451066970825
    2. '(' → logprob: -1.7747451066970825
    3. 'def' → logprob: -2.024744987487793
    4. '(
' → logprob: -2.774744987487793
    5. '\n' → logprob: -3.524744987487793
    6. '()
' → logprob: -3.649744987487793
    7. '()

' → logprob: -3.899744987487793
    8. '
' → logprob: -4.899744987487793
    9. '\' → logprob: -5.024744987487793
    10. '(n' → logprob: -5.274744987487793

Token 19: 'n' (ID: 77)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.20210041105747223
    2. 'n' → logprob: -1.702100396156311
    3. 'N' → logprob: -7.5771002769470215
    4. 'd' → logprob: -9.82710075378418
    5. 't' → logprob: -9.82710075378418
    6. 'class' → logprob: -11.57710075378418
    7. '```' → logprob: -11.57710075378418
    8. 'for' → logprob: -11.70210075378418
    9. 'from' → logprob: -11.70210075378418
    10. 'T' → logprob: -11.82710075378418

Token 20: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.4311964213848114
    2. '=' → logprob: -1.3061964511871338
    3. ' ' → logprob: -2.806196451187134
    4. ',' → logprob: -4.556196212768555
    5. ')' → logprob: -5.181196212768555
    6. '.' → logprob: -7.181196212768555
    7. '[' → logprob: -7.181196212768555
    8. 's' → logprob: -8.306196212768555
    9. ' ,' → logprob: -8.556196212768555
    10. ']' → logprob: -9.056196212768555

Token 21: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.048601001501083374
    2. 'int' → logprob: -3.048600912094116
    3. ' ' → logprob: -11.423601150512695
    4. '=int' → logprob: -14.298601150512695
    5. '<int' → logprob: -14.923601150512695
    6. '10' → logprob: -15.048601150512695
    7. ' map' → logprob: -15.173601150512695
    8. '(int' → logprob: -15.298601150512695
    9. '	int' → logprob: -15.798601150512695
    10. '[int' → logprob: -16.048601150512695

Token 22: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.25209641456604004
    2. '(input' → logprob: -1.50209641456604
    3. '()' → logprob: -9.752096176147461
    4. '('' → logprob: -10.002096176147461
    5. 'input' → logprob: -10.877096176147461
    6. '(n' → logprob: -11.002096176147461
    7. '(sys' → logprob: -11.627096176147461
    8. ' (' → logprob: -12.002096176147461
    9. '(`' → logprob: -12.752096176147461
    10. '(
' → logprob: -13.127096176147461

Token 23: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.01710273139178753
    2. '()' → logprob: -4.3921027183532715
    3. ')' → logprob: -5.3921027183532715
    4. '(' → logprob: -11.14210319519043
    5. ' ())' → logprob: -11.76710319519043
    6. '())
' → logprob: -13.01710319519043
    7. '()))' → logprob: -13.64210319519043
    8. '`)' → logprob: -13.89210319519043
    9. '().' → logprob: -14.01710319519043
    10. '();)' → logprob: -14.51710319519043

Token 24: 'm' (ID: 76)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'a' → logprob: -1.55427086353302
    2. '\n' → logprob: -1.67927086353302
    3. '\' → logprob: -2.1792707443237305
    4. '
' → logprob: -2.8042707443237305
    5. 'data' → logprob: -2.8042707443237305
    6. ' ' → logprob: -3.1792707443237305
    7. 'arr' → logprob: -3.3042707443237305
    8. ')' → logprob: -3.3042707443237305
    9. 's' → logprob: -3.4292707443237305
    10. ' 
' → logprob: -3.6792707443237305

Token 25: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.09761033952236176
    2. '=' → logprob: -2.5976102352142334
    3. ' ' → logprob: -4.7226104736328125
    4. '.' → logprob: -5.0976104736328125
    5. ')' → logprob: -6.5976104736328125
    6. ',' → logprob: -7.0976104736328125
    7. 'a' → logprob: -7.7226104736328125
    8. '  ' → logprob: -7.8476104736328125
    9. '=int' → logprob: -9.222610473632812
    10. ' .' → logprob: -9.472610473632812

Token 26: ' int' (ID: 677)
  Prédit: ' int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' int' → logprob: -0.05489322170615196
    2. 'int' → logprob: -2.9298932552337646
    3. ' ' → logprob: -12.429893493652344
    4. '=int' → logprob: -12.929893493652344
    5. '[int' → logprob: -13.554893493652344
    6. ' n' → logprob: -13.804893493652344
    7. 'n' → logprob: -14.679893493652344
    8. ' input' → logprob: -14.804893493652344
    9. '(int' → logprob: -14.929893493652344
    10. '<int' → logprob: -15.304893493652344

Token 27: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.0009728021104820073
    2. '(' → logprob: -7.000972747802734
    3. ' (' → logprob: -9.750972747802734
    4. 'input' → logprob: -13.625972747802734
    5. '()' → logprob: -14.125972747802734
    6. '=input' → logprob: -14.875972747802734
    7. '(in' → logprob: -16.125972747802734
    8. '(int' → logprob: -16.250972747802734
    9. '(inp' → logprob: -16.250972747802734
    10. '(sys' → logprob: -16.375972747802734

Token 28: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.07537531852722168
    2. '()' → logprob: -2.8253753185272217
    3. ')' → logprob: -4.325375556945801
    4. '())
' → logprob: -10.0753755569458
    5. '()
' → logprob: -10.8253755569458
    6. ' ())' → logprob: -10.8253755569458
    7. '(' → logprob: -13.3253755569458
    8. ' )' → logprob: -13.8253755569458
    9. '())

' → logprob: -14.0753755569458
    10. '();)' → logprob: -14.3253755569458

Token 29: 'adj' (ID: 57001)
  Prédit: 'graph'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'graph' → logprob: -0.17787201702594757
    2. 'a' → logprob: -3.6778719425201416
    3. 'dp' → logprob: -3.8028719425201416
    4. 'd' → logprob: -3.9278719425201416
    5. '\n' → logprob: -4.177872180938721
    6. 'data' → logprob: -4.302872180938721
    7. 'edges' → logprob: -4.427872180938721
    8. 'array' → logprob: -4.927872180938721
    9. 'g' → logprob: -4.927872180938721
    10. 'arr' → logprob: -5.302872180938721

Token 30: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.7111464142799377
    2. 'acency' → logprob: -0.7111464142799377
    3. 'acent' → logprob: -4.836146354675293
    4. ' =' → logprob: -5.961146354675293
    5. '[u' → logprob: -6.211146354675293
    6. '[]' → logprob: -6.211146354675293
    7. '.' → logprob: -6.461146354675293
    8. '=' → logprob: -7.461146354675293
    9. '[:]' → logprob: -8.211146354675293
    10. '[a' → logprob: -9.211146354675293

Token 31: ' [[]' (ID: 182908)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.030348658561706543
    2. ' [[]' → logprob: -3.530348777770996
    3. '([' → logprob: -8.280348777770996
    4. '[]' → logprob: -8.405348777770996
    5. '{' → logprob: -9.905348777770996
    6. '{}' → logprob: -10.780348777770996
    7. ' [' → logprob: -11.155348777770996
    8. '[:]' → logprob: -11.280348777770996
    9. '(' → logprob: -11.780348777770996
    10. '[List' → logprob: -11.905348777770996

Token 32: ' for' (ID: 395)
  Prédit: ' for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' for' → logprob: -0.22547942399978638
    2. 'for' → logprob: -1.6004793643951416
    3. ')' → logprob: -10.100479125976562
    4. ']' → logprob: -11.725479125976562
    5. '	for' → logprob: -11.975479125976562
    6. ',' → logprob: -12.100479125976562
    7. '()' → logprob: -13.475479125976562
    8. ' ' → logprob: -13.725479125976562
    9. 'f' → logprob: -14.100479125976562
    10. 'n' → logprob: -14.850479125976562

Token 33: ' _' (ID: 1175)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.10071533173322678
    2. ' range' → logprob: -2.600715398788452
    3. ' _' → logprob: -4.225715160369873
    4. 'range' → logprob: -5.225715160369873
    5. ' ' → logprob: -6.725715160369873
    6. ' i' → logprob: -8.600715637207031
    7. ' in' → logprob: -9.600715637207031
    8. '_range' → logprob: -9.600715637207031
    9. 'i' → logprob: -10.225715637207031
    10. '(range' → logprob: -10.850715637207031

Token 34: ' in' (ID: 306)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.004380874801427126
    2. ' range' → logprob: -5.629380702972412
    3. '(range' → logprob: -7.379380702972412
    4. 'i' → logprob: -9.50438117980957
    5. 'in' → logprob: -10.00438117980957
    6. '_' → logprob: -10.37938117980957
    7. ' in' → logprob: -13.25438117980957
    8. '_range' → logprob: -13.62938117980957
    9. '	range' → logprob: -14.00438117980957
    10. '0' → logprob: -14.25438117980957

Token 35: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.018150413408875465
    2. ' range' → logprob: -4.018150329589844
    3. '(range' → logprob: -15.018150329589844
    4. '	range' → logprob: -17.143150329589844
    5. 'r' → logprob: -17.893150329589844
    6. '```' → logprob: -18.518150329589844
    7. '0' → logprob: -19.518150329589844
    8. 'rang' → logprob: -19.518150329589844
    9. ' ' → logprob: -19.643150329589844
    10. 'ran' → logprob: -19.768150329589844

Token 36: '(n' (ID: 2406)
  Prédit: '(n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -5.3120038501219824e-05
    2. '(' → logprob: -9.875053405761719
    3. 'n' → logprob: -13.375053405761719
    4. ')n' → logprob: -17.00005340576172
    5. '(m' → logprob: -18.87505340576172
    6. ' (' → logprob: -18.87505340576172
    7. ' n' → logprob: -19.50005340576172
    8. '(
' → logprob: -19.62505340576172
    9. '((' → logprob: -19.87505340576172
    10. ')' → logprob: -19.87505340576172

Token 37: ' +' (ID: 659)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')]' → logprob: -4.930552313453518e-05
    2. ')' → logprob: -10.500049591064453
    3. ')])' → logprob: -11.875049591064453
    4. ']' → logprob: -12.250049591064453
    5. '])]' → logprob: -12.250049591064453
    6. '])' → logprob: -12.750049591064453
    7. ' )' → logprob: -14.250049591064453
    8. ')]
' → logprob: -14.625049591064453
    9. ')],' → logprob: -14.750049591064453
    10. '))' → logprob: -15.000049591064453

Token 38: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.005945982877165079
    2. ' ' → logprob: -5.130946159362793
    3. '2' → logprob: -11.005946159362793
    4. ')' → logprob: -14.880946159362793
    5. '7' → logprob: -16.505945205688477
    6. ' )' → logprob: -16.505945205688477
    7. '(' → logprob: -17.005945205688477
    8. '  ' → logprob: -17.130945205688477
    9. '```' → logprob: -17.130945205688477
    10. '0' → logprob: -18.193445205688477

Token 39: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -5.200166469876422e-06
    2. ' ' → logprob: -12.625004768371582
    3. '2' → logprob: -13.250004768371582
    4. '```' → logprob: -16.8750057220459
    5. '(' → logprob: -17.7500057220459
    6. '１' → logprob: -18.1250057220459
    7. ')' → logprob: -18.3750057220459
    8. '0' → logprob: -18.6250057220459
    9. '7' → logprob: -18.8750057220459
    10. '   ' → logprob: -19.1250057220459

Token 40: ')]
' (ID: 11587)
  Prédit: ')]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')]' → logprob: -0.08608690649271011
    2. ')' → logprob: -2.5860869884490967
    3. ']' → logprob: -5.086086750030518
    4. '])' → logprob: -7.086086750030518
    5. ')])' → logprob: -9.336087226867676
    6. '])]' → logprob: -9.961087226867676
    7. ')
' → logprob: -11.711087226867676
    8. '）' → logprob: -12.586087226867676
    9. ']
' → logprob: -13.836087226867676
    10. ')],' → logprob: -14.086087226867676

Token 41: 'ind' (ID: 521)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0033975292462855577
    2. ' for' → logprob: -6.003397464752197
    3. '\n' → logprob: -7.753397464752197
    4. '```' → logprob: -8.753397941589355
    5. '\' → logprob: -8.878397941589355
    6. 'n' → logprob: -9.378397941589355
    7. '
' → logprob: -10.253397941589355
    8. ' 
' → logprob: -10.878397941589355
    9. '<|end|>' → logprob: -11.753397941589355
    10. ')' → logprob: -11.878397941589355

Token 42: 'eg' (ID: 1207)
  Prédit: 'egree'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'egree' → logprob: -0.5765101313591003
    2. 'eg' → logprob: -0.8265101313591003
    3. 'egs' → logprob: -7.576509952545166
    4. 'ex' → logprob: -10.076510429382324
    5. 'ege' → logprob: -12.326510429382324
    6. 'e' → logprob: -12.326510429382324
    7. 'egt' → logprob: -13.826510429382324
    8. 'egde' → logprob: -13.951510429382324
    9. 'deg' → logprob: -14.076510429382324
    10. '_degree' → logprob: -14.326510429382324

Token 43: ' =' (ID: 314)
  Prédit: 'ree'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ree' → logprob: -0.2737049460411072
    2. 'rees' → logprob: -1.648705005645752
    3. '[' → logprob: -4.398705005645752
    4. 're' → logprob: -4.398705005645752
    5. ' =' → logprob: -4.773705005645752
    6. '[]' → logprob: -5.148705005645752
    7. 'r' → logprob: -6.148705005645752
    8. '=' → logprob: -6.273705005645752
    9. '_' → logprob: -6.398705005645752
    10. '```' → logprob: -7.023705005645752

Token 44: ' [' (ID: 723)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.38688376545906067
    2. ' [' → logprob: -1.1368837356567383
    3. '[n' → logprob: -11.636883735656738
    4. '0' → logprob: -12.636883735656738
    5. '[int' → logprob: -15.511883735656738
    6. ' ' → logprob: -15.761883735656738
    7. '[m' → logprob: -16.511884689331055
    8. '[ind' → logprob: -17.136884689331055
    9. '[]' → logprob: -17.261884689331055
    10. 'n' → logprob: -17.386884689331055

Token 45: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00010950337309623137
    2. ' ' → logprob: -9.125109672546387
    3. ')' → logprob: -16.12510871887207
    4. '(' → logprob: -16.62510871887207
    5. ']' → logprob: -16.62510871887207
    6. 'n' → logprob: -17.00010871887207
    7. '۰' → logprob: -17.81260871887207
    8. 'int' → logprob: -17.93760871887207
    9. '1' → logprob: -18.18760871887207
    10. 'False' → logprob: -18.43760871887207

Token 46: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.040104594081640244
    2. ' for' → logprob: -3.415104627609253
    3. 'for' → logprob: -5.290104389190674
    4. ']*(' → logprob: -6.665104389190674
    5. ']*' → logprob: -9.540104866027832
    6. ' ]' → logprob: -10.415104866027832
    7. ')' → logprob: -11.665104866027832
    8. '](' → logprob: -13.040104866027832
    9. '(n' → logprob: -13.415104866027832
    10. '	for' → logprob: -13.415104866027832

Token 47: ' *' (ID: 425)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.010958329774439335
    2. '*(' → logprob: -4.635958194732666
    3. ' *' → logprob: -6.760958194732666
    4. '*n' → logprob: -10.260958671569824
    5. '*
' → logprob: -12.760958671569824
    6. '*[' → logprob: -13.760958671569824
    7. '```' → logprob: -14.260958671569824
    8. '**' → logprob: -14.385958671569824
    9. ' *(' → logprob: -14.510958671569824
    10. '(n' → logprob: -14.510958671569824

Token 48: ' (' (ID: 350)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -8.458980300929397e-05
    2. '(' → logprob: -9.87508487701416
    3. ' (' → logprob: -10.37508487701416
    4. '(m' → logprob: -13.37508487701416
    5. '(len' → logprob: -16.000083923339844
    6. 'n' → logprob: -16.750083923339844
    7. '(
' → logprob: -17.625083923339844
    8. '((' → logprob: -17.625083923339844
    9. ' ' → logprob: -17.875083923339844
    10. '(N' → logprob: -18.500083923339844

Token 49: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.25270482897758484
    2. '(n' → logprob: -1.5027048587799072
    3. ' n' → logprob: -7.877704620361328
    4. '(' → logprob: -8.002704620361328
    5. ' (' → logprob: -9.877704620361328
    6. ')' → logprob: -13.127704620361328
    7. ')n' → logprob: -13.127704620361328
    8. '	n' → logprob: -13.752704620361328
    9. '(
' → logprob: -14.002704620361328
    10. '[n' → logprob: -14.252704620361328

Token 50: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.0010370950913056731
    2. ' +' → logprob: -6.876037120819092
    3. '+
' → logprob: -12.501036643981934
    4. '+)' → logprob: -15.751036643981934
    5. '1' → logprob: -16.12603759765625
    6. ')' → logprob: -16.12603759765625
    7. '＋' → logprob: -16.25103759765625
    8. '```' → logprob: -16.62603759765625
    9. ' +
' → logprob: -16.75103759765625
    10. '+

' → logprob: -16.87603759765625

Token 51: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0008263026247732341
    2. ' ' → logprob: -7.125826358795166
    3. '2' → logprob: -10.750825881958008
    4. '   ' → logprob: -16.125825881958008
    5. '  ' → logprob: -16.125825881958008
    6. '7' → logprob: -16.500825881958008
    7. '```' → logprob: -16.750825881958008
    8. '１' → logprob: -17.750825881958008
    9. '(' → logprob: -17.938325881958008
    10. ' ' → logprob: -18.188325881958008

Token 52: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -8.061054359131958e-06
    2. ' ' → logprob: -11.875007629394531
    3. '2' → logprob: -14.250007629394531
    4. '```' → logprob: -16.50000762939453
    5. '   ' → logprob: -17.00000762939453
    6. '１' → logprob: -17.00000762939453
    7. '۱' → logprob: -17.43750762939453
    8. '7' → logprob: -17.81250762939453
    9. '`' → logprob: -18.31250762939453
    10. '  ' → logprob: -18.62500762939453

Token 53: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.2113979209971149e-05
    2. ')
' → logprob: -11.500012397766113
    3. ']' → logprob: -14.000012397766113
    4. '）' → logprob: -15.500012397766113
    5. ')]' → logprob: -15.875012397766113
    6. '))' → logprob: -16.000011444091797
    7. '`)' → logprob: -16.250011444091797
    8. '<|end|>' → logprob: -16.250011444091797
    9. '```' → logprob: -16.250011444091797
    10. ' )' → logprob: -16.375011444091797

Token 54: 'edges' (ID: 39127)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0065976595506072044
    2. '
' → logprob: -5.506597518920898
    3. ' for' → logprob: -6.381597518920898
    4. '<|end|>' → logprob: -7.506597518920898
    5. '\n' → logprob: -8.631597518920898
    6. '```' → logprob: -9.756597518920898
    7. ' 
' → logprob: -11.881597518920898
    8. '\' → logprob: -11.881597518920898
    9. '<|end|>' → logprob: -12.131597518920898
    10. '' → logprob: -12.381597518920898

Token 55: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.038460273295640945
    2. '=' → logprob: -3.2884602546691895
    3. '=[]' → logprob: -9.038460731506348
    4. ',' → logprob: -9.788460731506348
    5. '.' → logprob: -9.913460731506348
    6. '[' → logprob: -10.038460731506348
    7. ' ' → logprob: -10.163460731506348
    8. '_' → logprob: -10.538460731506348
    9. '.append' → logprob: -10.663460731506348
    10. ')' → logprob: -10.788460731506348

Token 56: ' set' (ID: 920)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.5760796070098877
    2. '[]' → logprob: -0.8260796070098877
    3. '[' → logprob: -9.076079368591309
    4. ' [' → logprob: -11.326079368591309
    5. ' ' → logprob: -12.326079368591309
    6. '[int' → logprob: -12.701079368591309
    7. '[]
' → logprob: -13.326079368591309
    8. '[][]' → logprob: -13.951079368591309
    9. '[]}' → logprob: -14.076079368591309
    10. '{}' → logprob: -14.701079368591309

Token 57: '()
' (ID: 1234)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.28150278329849243
    2. '()' → logprob: -1.4065027236938477
    3. '((' → logprob: -9.031502723693848
    4. '([(' → logprob: -9.906502723693848
    5. '(()' → logprob: -10.031502723693848
    6. '([' → logprob: -10.281502723693848
    7. '([]' → logprob: -10.656502723693848
    8. '("("' → logprob: -11.281502723693848
    9. '(
' → logprob: -11.781502723693848
    10. '({' → logprob: -12.031502723693848

Token 58: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.04103488847613335
    2. ' for' → logprob: -3.9160349369049072
    3. '<|end|>' → logprob: -4.666034698486328
    4. '
' → logprob: -4.791034698486328
    5. '\n' → logprob: -6.291034698486328
    6. '```' → logprob: -7.916034698486328
    7. '<|end|>' → logprob: -9.166034698486328
    8. ' 
' → logprob: -9.291034698486328
    9. '\' → logprob: -9.666034698486328
    10. 'newline' → logprob: -10.791034698486328

Token 59: ' _' (ID: 1175)
  Prédit: ' _'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' _' → logprob: -0.013161640614271164
    2. ' ' → logprob: -4.888161659240723
    3. '_' → logprob: -5.263161659240723
    4. ' i' → logprob: -8.013161659240723
    5. ' range' → logprob: -11.763161659240723
    6. ' ' → logprob: -12.013161659240723
    7. ' ▁' → logprob: -12.388161659240723
    8. ' ‌' → logprob: -12.513161659240723
    9. ' ​' → logprob: -12.638161659240723
    10. '  ' → logprob: -13.388161659240723

Token 60: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.18150046467781067
    2. ' i' → logprob: -2.5565004348754883
    3. ' _' → logprob: -2.5565004348754883
    4. 'in' → logprob: -5.306500434875488
    5. ' ' → logprob: -5.556500434875488
    6. ' n' → logprob: -6.931500434875488
    7. 'i' → logprob: -7.806500434875488
    8. '_' → logprob: -8.556500434875488
    9. 'range' → logprob: -8.556500434875488
    10. ' range' → logprob: -8.806500434875488

Token 61: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.3869016468524933
    2. ' range' → logprob: -1.136901617050171
    3. 'input' → logprob: -12.13690185546875
    4. '(range' → logprob: -12.13690185546875
    5. 'r' → logprob: -12.63690185546875
    6. 'ra' → logprob: -13.13690185546875
    7. 'm' → logprob: -13.38690185546875
    8. 'ran' → logprob: -13.38690185546875
    9. '```' → logprob: -13.51190185546875
    10. 'rang' → logprob: -13.51190185546875

Token 62: '(m' (ID: 2145)
  Prédit: '(m'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(m' → logprob: -0.0002502535644453019
    2. '(' → logprob: -8.625249862670898
    3. ' (' → logprob: -9.625249862670898
    4. 'm' → logprob: -12.750249862670898
    5. ' m' → logprob: -13.375249862670898
    6. '(M' → logprob: -17.6252498626709
    7. '(n' → logprob: -17.8752498626709
    8. '(range' → logprob: -17.8752498626709
    9. '(int' → logprob: -18.3752498626709
    10. ' ' → logprob: -19.0002498626709

Token 63: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.01637614704668522
    2. ')' → logprob: -4.76637601852417
    3. ' ):' → logprob: -4.89137601852417
    4. ' )' → logprob: -8.891376495361328
    5. '):
' → logprob: -10.141376495361328
    6. ':' → logprob: -10.266376495361328
    7. '():' → logprob: -12.766376495361328
    8. ',' → logprob: -13.141376495361328
    9. ' ):
' → logprob: -14.516376495361328
    10. ' :' → logprob: -14.641376495361328

Token 64: '   ' (ID: 271)
  Prédit: ' u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' u' → logprob: -0.030009765177965164
    2. 'u' → logprob: -4.405009746551514
    3. ' a' → logprob: -4.780009746551514
    4. 'a' → logprob: -5.530009746551514
    5. '   ' → logprob: -5.780009746551514
    6. ' from' → logprob: -7.280009746551514
    7. ' line' → logprob: -7.530009746551514
    8. '	u' → logprob: -8.655010223388672
    9. 'from' → logprob: -9.530010223388672
    10. ' src' → logprob: -9.780010223388672

Token 65: ' i' (ID: 575)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'u' → logprob: -0.5540066957473755
    2. 'a' → logprob: -0.9290066957473755
    3. ' u' → logprob: -3.804006576538086
    4. ' a' → logprob: -5.554006576538086
    5. 's' → logprob: -5.929006576538086
    6. 'line' → logprob: -8.054006576538086
    7. 'x' → logprob: -8.054006576538086
    8. 'from' → logprob: -8.429006576538086
    9. 'src' → logprob: -8.929006576538086
    10. '   ' → logprob: -9.304006576538086

Token 66: '_,' (ID: 14152)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.07724575698375702
    2. ',' → logprob: -2.7022457122802734
    3. '_' → logprob: -6.577245712280273
    4. ' =' → logprob: -6.702245712280273
    5. ',j' → logprob: -7.077245712280273
    6. 'tem' → logprob: -7.577245712280273
    7. 'f' → logprob: -7.577245712280273
    8. '=' → logprob: -7.827245712280273
    9. ' ,' → logprob: -7.827245712280273
    10. 's' → logprob: -8.327245712280273

Token 67: ' j' (ID: 441)
  Prédit: 'j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.027316493913531303
    2. ' j' → logprob: -3.6523165702819824
    3. 'o' → logprob: -8.027316093444824
    4. 'a' → logprob: -8.277316093444824
    5. 's' → logprob: -9.277316093444824
    6. '_j' → logprob: -9.402316093444824
    7. 'v' → logprob: -9.652316093444824
    8. ' o' → logprob: -9.902316093444824
    9. 'u' → logprob: -10.277316093444824
    10. 'd' → logprob: -10.402316093444824

Token 68: '_' (ID: 62)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.7594352960586548
    2. '=' → logprob: -1.3844352960586548
    3. '_' → logprob: -1.5094352960586548
    4. ')' → logprob: -2.8844351768493652
    5. ',' → logprob: -5.634435176849365
    6. '_)' → logprob: -8.009435653686523
    7. '_=' → logprob: -8.134435653686523
    8. ' ' → logprob: -9.134435653686523
    9. ')=' → logprob: -9.384435653686523
    10. '<|end|>' → logprob: -10.134435653686523

Token 69: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5760914087295532
    2. ' =' → logprob: -0.8260914087295532
    3. ',' → logprob: -9.076091766357422
    4. ' ' → logprob: -11.076091766357422
    5. '=input' → logprob: -11.576091766357422
    6. ')' → logprob: -11.701091766357422
    7. '=line' → logprob: -13.701091766357422
    8. ' ,' → logprob: -13.826091766357422
    9. '_' → logprob: -14.451091766357422
    10. '=int' → logprob: -14.826091766357422

Token 70: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.04860507696866989
    2. 'map' → logprob: -3.048604965209961
    3. ' ' → logprob: -11.423604965209961
    4. ' list' → logprob: -12.798604965209961
    5. '	map' → logprob: -13.923604965209961
    6. 'list' → logprob: -14.173604965209961
    7. 'int' → logprob: -14.798604965209961
    8. ' ' → logprob: -14.798604965209961
    9. ' input' → logprob: -14.923604965209961
    10. '  ' → logprob: -15.048604965209961

Token 71: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.001030903891660273
    2. '(' → logprob: -7.001030921936035
    3. '(input' → logprob: -9.501030921936035
    4. '(lambda' → logprob: -11.001030921936035
    5. '(str' → logprob: -11.376030921936035
    6. '(in' → logprob: -12.001030921936035
    7. 'int' → logprob: -12.376030921936035
    8. '<int' → logprob: -12.876030921936035
    9. '[int' → logprob: -13.376030921936035
    10. '(list' → logprob: -14.751030921936035

Token 72: ',' (ID: 11)
  Prédit: ',input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',input' → logprob: -0.7048147320747375
    2. '(input' → logprob: -0.8298147320747375
    3. ',' → logprob: -2.7048146724700928
    4. '(' → logprob: -5.954814910888672
    5. 'input' → logprob: -9.079814910888672
    6. ' ,' → logprob: -10.704814910888672
    7. '(),' → logprob: -11.204814910888672
    8. ')' → logprob: -11.454814910888672
    9. '=input' → logprob: -11.829814910888672
    10. ' (' → logprob: -12.329814910888672

Token 73: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.07889209687709808
    2. ' input' → logprob: -2.5788919925689697
    3. ')' → logprob: -13.57889175415039
    4. '(input' → logprob: -14.82889175415039
    5. '	input' → logprob: -15.20389175415039
    6. 'sys' → logprob: -15.70389175415039
    7. '=input' → logprob: -15.82889175415039
    8. ',input' → logprob: -16.45389175415039
    9. '[input' → logprob: -16.82889175415039
    10. ' ' → logprob: -16.95389175415039

Token 74: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -2.1888679839321412e-05
    2. '()' → logprob: -10.750021934509277
    3. ' ().' → logprob: -15.125021934509277
    4. '(' → logprob: -16.50002098083496
    5. '())' → logprob: -16.87502098083496
    6. '()
' → logprob: -18.00002098083496
    7. '.readline' → logprob: -18.25002098083496
    8. ')' → logprob: -18.75002098083496
    9. '.split' → logprob: -18.87502098083496
    10. '()

' → logprob: -19.25002098083496

Token 75: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0002693224814720452
    2. 'strip' → logprob: -8.250268936157227
    3. 'rstrip' → logprob: -12.250268936157227
    4. ' split' → logprob: -13.000268936157227
    5. '(split' → logprob: -14.375268936157227
    6. ')' → logprob: -15.625268936157227
    7. 'spl' → logprob: -16.125268936157227
    8. ' ' → logprob: -17.250268936157227
    9. '().' → logprob: -17.750268936157227
    10. 's' → logprob: -18.125268936157227

Token 76: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.18928375840187073
    2. ')' → logprob: -1.8142837285995483
    3. '()' → logprob: -4.689283847808838
    4. '(' → logprob: -8.93928337097168
    5. '())
' → logprob: -9.31428337097168
    6. '))' → logprob: -10.31428337097168
    7. '()))' → logprob: -11.68928337097168
    8. ' )' → logprob: -12.31428337097168
    9. ')
' → logprob: -12.31428337097168
    10. ')`' → logprob: -12.68928337097168

Token 77: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04161984100937843
    2. '<|end|>' → logprob: -3.6666197776794434
    3. ' if' → logprob: -5.416619777679443
    4. ' ' → logprob: -5.791619777679443
    5. '    
' → logprob: -6.291619777679443
    6. '
' → logprob: -6.416619777679443
    7. ' 
' → logprob: -6.666619777679443
    8. 'if' → logprob: -6.666619777679443
    9. '  
' → logprob: -7.916619777679443
    10. '  ' → logprob: -8.291620254516602

Token 78: ' adj' (ID: 20251)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.3792196810245514
    2. 'if' → logprob: -1.254219651222229
    3. ' ' → logprob: -3.7542197704315186
    4. '   ' → logprob: -6.1292195320129395
    5. ' edges' → logprob: -6.3792195320129395
    6. 'edges' → logprob: -6.5042195320129395
    7. '<|end|>' → logprob: -6.8792195320129395
    8. ')' → logprob: -8.629220008850098
    9. ' 
' → logprob: -8.754220008850098
    10. '    ' → logprob: -10.504220008850098

Token 79: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -0.0003939728485420346
    2. '[j' → logprob: -7.875393867492676
    3. '[' → logprob: -11.250393867492676
    4. 'i' → logprob: -14.375393867492676
    5. '[I' → logprob: -16.000394821166992
    6. '```' → logprob: -16.750394821166992
    7. ' [' → logprob: -17.250394821166992
    8. '[int' → logprob: -18.125394821166992
    9. '[u' → logprob: -18.375394821166992
    10. '[a' → logprob: -18.375394821166992

Token 80: '_' (ID: 62)
  Prédit: '_'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.0042253704741597176
    2. '_]' → logprob: -5.504225254058838
    3. '].' → logprob: -10.254225730895996
    4. '][' → logprob: -10.754225730895996
    5. '[i' → logprob: -11.004225730895996
    6. '_[' → logprob: -11.004225730895996
    7. '][_' → logprob: -11.129225730895996
    8. '_)' → logprob: -11.254225730895996
    9. '[_' → logprob: -11.379225730895996
    10. '[' → logprob: -12.004225730895996

Token 81: '].' (ID: 1651)
  Prédit: '].'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '].' → logprob: -0.0966196358203888
    2. '.append' → logprob: -2.7216196060180664
    3. ').' → logprob: -3.7216196060180664
    4. '[' → logprob: -6.846619606018066
    5. '.' → logprob: -7.096619606018066
    6. '   ' → logprob: -9.346619606018066
    7. ']' → logprob: -9.471619606018066
    8. ')' → logprob: -11.096619606018066
    9. '}.' → logprob: -11.721619606018066
    10. '[j' → logprob: -11.846619606018066

Token 82: 'append' (ID: 9132)
  Prédit: 'append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'append' → logprob: -7.896309739408025e-07
    2. ' append' → logprob: -14.500000953674316
    3. 'appen' → logprob: -15.500000953674316
    4. '.append' → logprob: -17.75
    5. 'add' → logprob: -18.0
    6. '	append' → logprob: -18.375
    7. 'push' → logprob: -18.875
    8. 'Append' → logprob: -19.375
    9. 'app' → logprob: -20.0
    10. 'pp' → logprob: -20.0

Token 83: '(j' (ID: 4997)
  Prédit: '(j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(j' → logprob: -9.758300438988954e-05
    2. '(' → logprob: -9.250097274780273
    3. '((' → logprob: -13.875097274780273
    4. 'j' → logprob: -14.750097274780273
    5. '(i' → logprob: -16.500097274780273
    6. '(
' → logprob: -17.750097274780273
    7. ' (' → logprob: -18.125097274780273
    8. '(js' → logprob: -19.875097274780273
    9. '[j' → logprob: -20.125097274780273
    10. '```' → logprob: -21.000097274780273

Token 84: '_)
' (ID: 58066)
  Prédit: '_)'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_)' → logprob: -0.0009717292850837111
    2. '_' → logprob: -7.000971794128418
    3. '_)
' → logprob: -9.750971794128418
    4. ')' → logprob: -14.000971794128418
    5. '_),' → logprob: -14.625971794128418
    6. '_

' → logprob: -15.375971794128418
    7. '_]' → logprob: -15.375971794128418
    8. '__)' → logprob: -16.1259708404541
    9. '_
' → logprob: -17.1259708404541
    10. '`)' → logprob: -17.2509708404541

Token 85: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07604160904884338
    2. 'ind' → logprob: -2.8260416984558105
    3. ' ind' → logprob: -4.8260416984558105
    4. '<|end|>' → logprob: -6.0760416984558105
    5. '
' → logprob: -6.7010416984558105
    6. '    
' → logprob: -7.2010416984558105
    7. ' ' → logprob: -7.9510416984558105
    8. ' 
' → logprob: -8.076041221618652
    9. '    ' → logprob: -8.326041221618652
    10. '  
' → logprob: -8.701041221618652

Token 86: ' inde' (ID: 6741)
  Prédit: 'ind'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ind' → logprob: -4.8590300139039755e-05
    2. ' ind' → logprob: -11.000048637390137
    3. '   ' → logprob: -11.250048637390137
    4. ' inde' → logprob: -11.750048637390137
    5. 'inde' (adapté à ' inde') → logprob: -13.375048637390137
    6. ' ' → logprob: -13.500048637390137
    7. 'if' → logprob: -13.625048637390137
    8. 'indt' → logprob: -14.125048637390137
    9. '```' → logprob: -14.187548637390137
    10. '
' → logprob: -14.437548637390137

Token 87: 'g' (ID: 70)
  Prédit: 'g'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'g' → logprob: -0.0010883049108088017
    2. 'deg' → logprob: -6.8760881423950195
    3. 'eg' → logprob: -10.62608814239502
    4. 'q' → logprob: -11.62608814239502
    5. 'd' → logprob: -12.00108814239502
    6. '[' → logprob: -12.62608814239502
    7. ' g' → logprob: -13.12608814239502
    8. '   ' → logprob: -13.62608814239502
    9. '[g' → logprob: -13.75108814239502
    10. 'dg' → logprob: -13.87608814239502

Token 88: '[j' (ID: 7895)
  Prédit: '[j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[j' → logprob: -1.3902033970225602e-05
    2. '[' → logprob: -11.375014305114746
    3. '[i' → logprob: -13.500014305114746
    4. '```' → logprob: -14.125014305114746
    5. 'j' → logprob: -17.00001335144043
    6. '[js' → logprob: -17.12501335144043
    7. ' [' → logprob: -18.37501335144043
    8. '[
' → logprob: -18.50001335144043
    9. '\[' → logprob: -18.75001335144043
    10. '	j' → logprob: -19.75001335144043

Token 89: '_]' (ID: 163385)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.00989443901926279
    2. ']+=' → logprob: -4.759894371032715
    3. '_]' → logprob: -7.384894371032715
    4. '[j' → logprob: -7.884894371032715
    5. ']+' → logprob: -8.634894371032715
    6. ' ]' → logprob: -10.509894371032715
    7. '[' → logprob: -10.634894371032715
    8. '`]' → logprob: -11.509894371032715
    9. '_' → logprob: -11.759894371032715
    10. '']' → logprob: -12.134894371032715

Token 90: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.08066333085298538
    2. '+' → logprob: -2.9556634426116943
    3. ' +=' → logprob: -3.7056634426116943
    4. ']+=' → logprob: -7.580663204193115
    5. '<|end|>' → logprob: -8.455663681030273
    6. '++' → logprob: -9.455663681030273
    7. '[' → logprob: -10.830663681030273
    8. '```' → logprob: -11.080663681030273
    9. '+='' → logprob: -11.705663681030273
    10. '+++' → logprob: -12.455663681030273

Token 91: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00020354038861114532
    2. ' ' → logprob: -8.500203132629395
    3. '   ' → logprob: -19.25020408630371
    4. '```' → logprob: -19.25020408630371
    5. '<|end|>' → logprob: -20.56270408630371
    6. '１' → logprob: -21.18770408630371
    7. '  ' → logprob: -21.37520408630371
    8. '0' → logprob: -21.50020408630371
    9. ' ' → logprob: -21.50020408630371
    10. '۱' → logprob: -21.56270408630371

Token 92: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -9.088346359931165e-07
    2. ' ' → logprob: -14.000000953674316
    3. '```' → logprob: -19.375
    4. '   ' → logprob: -20.625
    5. '１' → logprob: -20.8125
    6. '<|end|>' → logprob: -20.9375
    7. '۱' → logprob: -21.1875
    8. '१' → logprob: -21.75
    9. '`' → logprob: -21.875
    10. '১' → logprob: -21.9375

Token 93: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.35246074199676514
    2. '<|end|>' → logprob: -1.8524607419967651
    3. '\n' → logprob: -2.3524608612060547
    4. '```' → logprob: -4.102460861206055
    5. '\' → logprob: -4.852460861206055
    6. ' ' → logprob: -5.352460861206055
    7. ' 
' → logprob: -5.977460861206055
    8. 'for' → logprob: -5.977460861206055
    9. '  
' → logprob: -5.977460861206055
    10. '' → logprob: -6.602460861206055

Token 94: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '
' → logprob: -0.20897355675697327
    2. '<|end|>' → logprob: -1.7089735269546509
    3. '```' → logprob: -5.958973407745361
    4. 'from' → logprob: -6.208973407745361
    5. '\n' → logprob: -6.708973407745361
    6. 'for' → logprob: -7.458973407745361
    7. 'queue' → logprob: -8.70897388458252
    8. '

' → logprob: -9.33397388458252
    9. '  
' → logprob: -9.33397388458252
    10. 'deque' → logprob: -9.45897388458252

Token 95: ' edges' (ID: 22569)
  Prédit: 'edges'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'edges' (adapté à ' edges') → logprob: -0.011976087465882301
    2. ' edges' → logprob: -4.51197624206543
    3. '(edges' → logprob: -8.01197624206543
    4. ')' → logprob: -9.01197624206543
    5. '```' → logprob: -9.26197624206543
    6. 'if' → logprob: -9.63697624206543
    7. 'e' → logprob: -10.01197624206543
    8. '<|end|>' → logprob: -10.38697624206543
    9. '.edges' → logprob: -10.51197624206543
    10. '   ' → logprob: -10.51197624206543

Token 96: '.add' (ID: 1950)
  Prédit: '.add'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.add' → logprob: -0.023367883637547493
    2. '.' → logprob: -3.7733678817749023
    3. '.setdefault' → logprob: -9.523367881774902
    4. ' .' → logprob: -10.773367881774902
    5. '.update' → logprob: -11.023367881774902
    6. '.append' → logprob: -12.023367881774902
    7. '.union' → logprob: -13.523367881774902
    8. '.insert' → logprob: -13.898367881774902
    9. ').' → logprob: -14.023367881774902
    10. '<|end|>' → logprob: -14.773367881774902

Token 97: '((' (ID: 2054)
  Prédit: '(('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '((' → logprob: -0.0004982246900908649
    2. '(' → logprob: -7.625498294830322
    3. '(i' → logprob: -12.625497817993164
    4. '((_' → logprob: -12.625497817993164
    5. '(j' → logprob: -13.000497817993164
    6. '(f' → logprob: -14.625497817993164
    7. '(((' → logprob: -15.250497817993164
    8. ' ((' → logprob: -15.375497817993164
    9. '(tuple' → logprob: -15.750497817993164
    10. '(({' → logprob: -16.750497817993164

Token 98: 'i' (ID: 72)
  Prédit: 'i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -4.2987729102605954e-05
    2. ' i' → logprob: -10.125042915344238
    3. '(i' → logprob: -14.000042915344238
    4. '   ' → logprob: -14.125042915344238
    5. 'j' → logprob: -15.000042915344238
    6. ' ' → logprob: -15.000042915344238
    7. ')' → logprob: -15.500042915344238
    8. '_i' → logprob: -15.750042915344238
    9. ')i' → logprob: -16.250043869018555
    10. '  ' → logprob: -16.375043869018555

Token 99: '_,' (ID: 14152)
  Prédit: '_,'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_,' → logprob: -0.0789656862616539
    2. '_' → logprob: -2.578965663909912
    3. '_,
' → logprob: -9.82896614074707
    4. '_)' → logprob: -11.70396614074707
    5. ',' → logprob: -12.07896614074707
    6. '_

' → logprob: -12.70396614074707
    7. '_),' → logprob: -13.70396614074707
    8. '_
' → logprob: -13.82896614074707
    9. '_',' → logprob: -14.70396614074707
    10. ',_' → logprob: -14.82896614074707

Token 100: ' j' (ID: 441)
  Prédit: 'j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.016036128625273705
    2. ' j' → logprob: -4.141036033630371
    3. '   ' → logprob: -13.891036033630371
    4. ' ' → logprob: -14.641036033630371
    5. '    ' → logprob: -16.266036987304688
    6. ')' → logprob: -16.391036987304688
    7. '	j' → logprob: -16.516036987304688
    8. '  ' → logprob: -16.891036987304688
    9. ' ' → logprob: -17.766036987304688
    10. '$j' → logprob: -17.766036987304688

Token 101: '_' (ID: 62)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.011179384775459766
    2. ')' → logprob: -4.511179447174072
    3. '))
' → logprob: -9.011178970336914
    4. ')
' → logprob: -13.261178970336914
    5. ' ))' → logprob: -13.261178970336914
    6. ''))' → logprob: -13.636178970336914
    7. '_' → logprob: -13.636178970336914
    8. '()))' → logprob: -14.136178970336914
    9. ')))' → logprob: -14.261178970336914
    10. '),' → logprob: -14.386178970336914

Token 102: '))

' (ID: 9746)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.01417032815515995
    2. '))' → logprob: -4.264170169830322
    3. ')
' → logprob: -12.01417064666748
    4. ' )' → logprob: -15.01417064666748
    5. ')))' → logprob: -16.139169692993164
    6. '))
' → logprob: -16.264169692993164
    7. ')}' → logprob: -16.389169692993164
    8. '),' → logprob: -17.264169692993164
    9. ')`' → logprob: -17.639169692993164
    10. ')")' → logprob: -17.639169692993164

Token 103: 'from' (ID: 2845)
  Prédit: 'from'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'from' → logprob: -0.6420950293540955
    2. 'dp' → logprob: -1.8920950889587402
    3. 'q' → logprob: -2.1420950889587402
    4. 'queue' → logprob: -2.1420950889587402
    5. 'dist' → logprob: -3.3920950889587402
    6. 'order' → logprob: -3.7670950889587402
    7. 'visited' → logprob: -3.8920950889587402
    8. 'top' → logprob: -5.51709508895874
    9. 'answer' → logprob: -6.64209508895874
    10. 'stack' → logprob: -6.89209508895874

Token 104: ' collections' (ID: 22690)
  Prédit: 'collections'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'collections' → logprob: -0.2519780993461609
    2. ' collections' → logprob: -1.5019781589508057
    3. 'queue' → logprob: -10.251977920532227
    4. ' queue' → logprob: -11.751977920532227
    5. 'heap' → logprob: -12.876977920532227
    6. ' heap' → logprob: -13.751977920532227
    7. ' ' → logprob: -14.001977920532227
    8. 'collection' → logprob: -14.251977920532227
    9. '_queue' → logprob: -15.251977920532227
    10. '_' → logprob: -15.876977920532227

Token 105: ' import' (ID: 1588)
  Prédit: 'import'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'import' → logprob: -0.008744101971387863
    2. ' import' → logprob: -4.758744239807129
    3. 'deque' → logprob: -10.008744239807129
    4. 'from' → logprob: -10.383744239807129
    5. '```' → logprob: -11.133744239807129
    6. 'port' → logprob: -11.133744239807129
    7. 'queue' → logprob: -11.883744239807129
    8. ' ' → logprob: -13.008744239807129
    9. '.' → logprob: -13.133744239807129
    10. ' deque' → logprob: -13.383744239807129

Token 106: ' deque' (ID: 90347)
  Prédit: 'deque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'deque' → logprob: -0.07889562100172043
    2. ' deque' → logprob: -2.5788955688476562
    3. 'collections' → logprob: -12.453895568847656
    4. 'de' → logprob: -13.203895568847656
    5. ' defaultdict' → logprob: -16.328895568847656
    6. '```' → logprob: -16.703895568847656
    7. ' collections' → logprob: -16.828895568847656
    8. '.de' → logprob: -18.578895568847656
    9. 'queue' → logprob: -18.828895568847656
    10. '	de' → logprob: -19.203895568847656

Token 107: '

' (ID: 279)
  Prédit: 'queue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'queue' → logprob: -0.522857666015625
    2. 'q' → logprob: -1.022857666015625
    3. '
' → logprob: -3.272857666015625
    4. 'dq' → logprob: -5.397857666015625
    5. ' queue' → logprob: -6.272857666015625
    6. 'que' → logprob: -6.647857666015625
    7. 'deque' → logprob: -6.772857666015625
    8. 'Q' → logprob: -8.522857666015625
    9. ' 
' → logprob: -9.022857666015625
    10. ' q' → logprob: -9.147857666015625

Token 108: '#' (ID: 2)
  Prédit: 'q'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'q' → logprob: -0.39416080713272095
    2. 'queue' → logprob: -1.1441607475280762
    3. 'dq' → logprob: -5.144160747528076
    4. 'que' → logprob: -7.019160747528076
    5. 'dist' → logprob: -9.144161224365234
    6. '```' → logprob: -9.269161224365234
    7. 'deque' → logprob: -9.519161224365234
    8. 'Q' → logprob: -9.644161224365234
    9. 'order' → logprob: -9.769161224365234
    10. 'dp' → logprob: -10.394161224365234

Token 109: ' Top' (ID: 8022)
  Prédit: 'q'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'q' → logprob: -0.32653334736824036
    2. 'queue' → logprob: -2.076533317565918
    3. ' queue' → logprob: -2.701533317565918
    4. 'que' → logprob: -3.326533317565918
    5. ' q' → logprob: -3.951533317565918
    6. '#' → logprob: -4.951533317565918
    7. 'dq' → logprob: -4.951533317565918
    8. 'def' → logprob: -5.201533317565918
    9. ' que' → logprob: -5.701533317565918
    10. ' in' → logprob: -6.701533317565918

Token 110: 'ological' (ID: 8339)
  Prédit: 'ological'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ological' → logprob: -0.00735447509214282
    2. 'o' → logprob: -5.382354259490967
    3. 'logical' → logprob: -6.507354259490967
    4. 'sort' → logprob: -8.007354736328125
    5. '```' → logprob: -8.132354736328125
    6. 'ology' → logprob: -8.132354736328125
    7. 'ogical' → logprob: -9.632354736328125
    8. ' sort' → logprob: -10.257354736328125
    9. 'from' → logprob: -10.382354736328125
    10. 'import' → logprob: -10.757354736328125

Token 111: ' sort' (ID: 4506)
  Prédit: 'sort'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sort' → logprob: -0.22096361219882965
    2. '_sort' → logprob: -2.095963716506958
    3. ' sort' → logprob: -2.595963716506958
    4. ' sorting' → logprob: -7.970963478088379
    5. 'sorting' → logprob: -8.095963478088379
    6. '-sort' → logprob: -10.345963478088379
    7. 'Sort' → logprob: -11.595963478088379
    8. '.sort' → logprob: -11.845963478088379
    9. '_' → logprob: -12.095963478088379
    10. 'sorted' → logprob: -12.220963478088379

Token 112: ' with' (ID: 483)
  Prédit: 'queue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'queue' → logprob: -0.1305566430091858
    2. 'q' → logprob: -2.380556583404541
    3. '
' → logprob: -4.130556583404541
    4. ' queue' → logprob: -5.380556583404541
    5. 'order' → logprob: -5.755556583404541
    6. 'que' → logprob: -6.005556583404541
    7. '(queue' → logprob: -6.130556583404541
    8. 'dq' → logprob: -7.755556583404541
    9. 'def' → logprob: -8.5055570602417
    10. '_queue' → logprob: -8.8805570602417

Token 113: ' uniqueness' (ID: 105230)
  Prédit: 'cycle'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'cycle' → logprob: -0.4923454523086548
    2. ' cycle' → logprob: -1.3673454523086548
    3. 'queue' → logprob: -2.6173453330993652
    4. ' queue' → logprob: -3.2423453330993652
    5. 'deque' → logprob: -4.742345333099365
    6. 'K' → logprob: -5.367345333099365
    7. ' K' → logprob: -5.617345333099365
    8. 'q' → logprob: -6.492345333099365
    9. ' deque' → logprob: -7.367345333099365
    10. 'cycles' → logprob: -7.492345333099365

Token 114: ' check' (ID: 2371)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.8624000549316406
    2. 'def' → logprob: -0.8624000549316406
    3. 'q' → logprob: -3.1124000549316406
    4. 'queue' → logprob: -3.1124000549316406
    5. ' def' → logprob: -4.237400054931641
    6. ' queue' → logprob: -4.362400054931641
    7. '=' → logprob: -4.737400054931641
    8. '_queue' → logprob: -4.987400054931641
    9. 'check' → logprob: -5.612400054931641
    10. 'que' → logprob: -5.612400054931641

Token 115: '
' (ID: 198)
  Prédit: 'q'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -0.3637423515319824
    2. 'queue' → logprob: -1.2387423515319824
    3. 'dq' → logprob: -5.238742351531982
    4. '
' → logprob: -5.488742351531982
    5. 'que' → logprob: -6.238742351531982
    6. ' queue' → logprob: -7.238742351531982
    7. 'def' → logprob: -7.363742351531982
    8. ' q' → logprob: -7.613742351531982
    9. 'deque' → logprob: -7.613742351531982
    10. '```' → logprob: -8.11374282836914

Token 116: 'q' (ID: 80)
  Prédit: 'q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -0.13736210763454437
    2. 'queue' → logprob: -2.137362003326416
    3. 'dq' → logprob: -5.012362003326416
    4. 'que' → logprob: -6.512362003326416
    5. 'def' → logprob: -6.512362003326416
    6. '```' → logprob: -8.512362480163574
    7. ' q' → logprob: -8.887362480163574
    8. 'order' → logprob: -9.637362480163574
    9. 'Q' → logprob: -9.637362480163574
    10. ' queue' → logprob: -9.887362480163574

Token 117: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.0160357765853405
    2. '=' → logprob: -4.141035556793213
    3. ' ' → logprob: -14.641036033630371
    4. '=[]' → logprob: -14.766036033630371
    5. 'ue' → logprob: -15.266036033630371
    6. '.' → logprob: -15.391036033630371
    7. 'u' → logprob: -16.516035079956055
    8. '.append' → logprob: -17.641035079956055
    9. '.=' → logprob: -17.641035079956055
    10. '=q' → logprob: -17.641035079956055

Token 118: ' deque' (ID: 90347)
  Prédit: 'deque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'deque' → logprob: -0.0031784253660589457
    2. ' deque' → logprob: -5.753178596496582
    3. 'de' → logprob: -14.878178596496582
    4. 'Deque' → logprob: -15.253178596496582
    5. '```' → logprob: -16.628177642822266
    6. '(de' → logprob: -18.253177642822266
    7. 'collections' → logprob: -18.628177642822266
    8. '   ' → logprob: -18.753177642822266
    9. 'dq' → logprob: -18.753177642822266
    10. ' ' → logprob: -19.003177642822266

Token 119: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.16779258847236633
    2. '([' → logprob: -1.917792558670044
    3. '([]' → logprob: -5.167792797088623
    4. '(' → logprob: -7.292792797088623
    5. '()
' → logprob: -7.917792797088623
    6. '(i' → logprob: -8.042792320251465
    7. '([(' → logprob: -9.042792320251465
    8. '[]' → logprob: -9.417792320251465
    9. '(q' → logprob: -9.917792320251465
    10. '([
' → logprob: -10.042792320251465

Token 120: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.0004378214362077415
    2. ' for' → logprob: -7.7504377365112305
    3. 'if' → logprob: -12.00043773651123
    4. 'i' → logprob: -15.25043773651123
    5. '[i' → logprob: -15.62543773651123
    6. '
' → logprob: -15.62543773651123
    7. '	for' → logprob: -15.75043773651123
    8. '```' → logprob: -16.500438690185547
    9. 'result' → logprob: -16.750438690185547
    10. '0' → logprob: -16.875438690185547

Token 121: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.4742322564125061
    2. ' i' → logprob: -0.9742322564125061
    3. 'u' → logprob: -10.09923267364502
    4. 'v' → logprob: -10.22423267364502
    5. ' node' → logprob: -10.22423267364502
    6. 'node' → logprob: -11.09923267364502
    7. ' v' → logprob: -11.22423267364502
    8. ' u' → logprob: -11.47423267364502
    9. ' in' → logprob: -13.97423267364502
    10. '	i' → logprob: -14.72423267364502

Token 122: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.14277178049087524
    2. 'in' → logprob: -2.0177717208862305
    3. ' ' → logprob: -10.01777172088623
    4. '1' → logprob: -11.14277172088623
    5. ',' → logprob: -11.39277172088623
    6. 'range' → logprob: -11.89277172088623
    7. '```' → logprob: -12.26777172088623
    8. 'n' → logprob: -12.39277172088623
    9. 'i' → logprob: -13.26777172088623
    10. ' i' → logprob: -13.26777172088623

Token 123: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.20141403377056122
    2. ' range' → logprob: -1.7014139890670776
    3. '(range' → logprob: -14.576414108276367
    4. '	range' → logprob: -15.826414108276367
    5. ' ' → logprob: -16.951414108276367
    6. '   ' → logprob: -18.701414108276367
    7. '```' → logprob: -18.826414108276367
    8. '`' → logprob: -18.951414108276367
    9. '.range' → logprob: -19.451414108276367
    10. 'rang' → logprob: -19.576414108276367

Token 124: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -1.5048530030981055e-06
    2. '1' → logprob: -13.500001907348633
    3. '(
' → logprob: -19.375001907348633
    4. '   ' → logprob: -20.875001907348633
    5. ' (' → logprob: -21.250001907348633
    6. '(n' → logprob: -22.000001907348633
    7. ',' → logprob: -22.250001907348633
    8. '	' → logprob: -22.500001907348633
    9. '```' → logprob: -22.500001907348633
    10. ' ' → logprob: -23.000001907348633

Token 125: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -3.774276774493046e-05
    2. ' ' → logprob: -10.250038146972656
    3. '(' → logprob: -13.500038146972656
    4. 'n' → logprob: -14.375038146972656
    5. '   ' → logprob: -15.375038146972656
    6. '
' → logprob: -15.625038146972656
    7. '```' → logprob: -17.375038146972656
    8. ' n' → logprob: -18.125038146972656
    9. ',' → logprob: -18.250038146972656
    10. '(n' → logprob: -18.375038146972656

Token 126: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0008158236742019653
    2. ' ,' → logprob: -7.5008158683776855
    3. ',n' → logprob: -8.250815391540527
    4. ',len' → logprob: -14.375815391540527
    5. 'n' → logprob: -14.750815391540527
    6. '(n' → logprob: -15.625815391540527
    7. '1' → logprob: -15.625815391540527
    8. ',
' → logprob: -16.000816345214844
    9. ',num' → logprob: -16.500816345214844
    10. '‌,' → logprob: -16.625816345214844

Token 127: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.00015860427811276168
    2. ' n' → logprob: -8.750158309936523
    3. '	n' → logprob: -16.500158309936523
    4. '   ' → logprob: -18.250158309936523
    5. 'len' → logprob: -19.375158309936523
    6. ')n' → logprob: -19.750158309936523
    7. ' ' → logprob: -20.500158309936523
    8. '```' → logprob: -20.875158309936523
    9. '(n' → logprob: -21.250158309936523
    10. '
' → logprob: -21.625158309936523

Token 128: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.10021130740642548
    2. ' +' → logprob: -2.3502113819122314
    3. '):
' → logprob: -13.725211143493652
    4. '1' → logprob: -13.850211143493652
    5. '+
' → logprob: -14.350211143493652
    6. '
' → logprob: -14.600211143493652
    7. ',' → logprob: -14.725211143493652
    8. '):' → logprob: -15.600211143493652
    9. ' ' → logprob: -15.725211143493652
    10. '()+' → logprob: -15.850211143493652

Token 129: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00023059594968799502
    2. ' ' → logprob: -8.37523078918457
    3. '```' → logprob: -17.25023078918457
    4. ')' → logprob: -18.25023078918457
    5. '   ' → logprob: -18.50023078918457
    6. '2' → logprob: -19.00023078918457
    7. '  ' → logprob: -20.37523078918457
    8. ',' → logprob: -20.50023078918457
    9. '１' → logprob: -20.75023078918457
    10. '۱' → logprob: -20.87523078918457

Token 130: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -9.014684110297821e-06
    2. ' ' → logprob: -11.625008583068848
    3. '2' → logprob: -17.125009536743164
    4. '```' → logprob: -17.250009536743164
    5. '۱' → logprob: -18.250009536743164
    6. '１' → logprob: -18.437509536743164
    7. ')' → logprob: -18.875009536743164
    8. '
' → logprob: -19.000009536743164
    9. '   ' → logprob: -19.375009536743164
    10. '১' → logprob: -19.437509536743164

Token 131: '):
' (ID: 1883)
  Prédit: '):
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.016199646517634392
    2. '):' → logprob: -4.141199588775635
    3. ':' → logprob: -9.766200065612793
    4. '):
' → logprob: -9.891200065612793
    5. ':
' → logprob: -10.266200065612793
    6. ' ):
' → logprob: -11.141200065612793
    7. '():
' → logprob: -12.891200065612793
    8. '   ' → logprob: -13.016200065612793
    9. ')' → logprob: -13.391200065612793
    10. 'if' → logprob: -14.891200065612793

Token 132: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.11478109657764435
    2. ' if' → logprob: -2.364781141281128
    3. 'if' → logprob: -4.239780902862549
    4. ' ' → logprob: -10.614781379699707
    5. '	if' → logprob: -10.989781379699707
    6. '```' → logprob: -11.864781379699707
    7. '   ' → logprob: -12.239781379699707
    8. '<|end|>' → logprob: -13.239781379699707
    9. '    
' → logprob: -14.739781379699707
    10. 'If' → logprob: -14.739781379699707

Token 133: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.13013464212417603
    2. ' if' → logprob: -2.1301345825195312
    3. '   ' → logprob: -5.755134582519531
    4. '```' → logprob: -10.880134582519531
    5. '	if' → logprob: -11.755134582519531
    6. ' ' → logprob: -11.880134582519531
    7. 'If' → logprob: -14.880134582519531
    8. '    ' → logprob: -15.255134582519531
    9. '       ' → logprob: -15.505134582519531
    10. '
' → logprob: -15.880134582519531

Token 134: ' inde' (ID: 6741)
  Prédit: 'ind'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ind' → logprob: -0.06255104392766953
    2. ' inde' → logprob: -2.8125510215759277
    3. ' ind' → logprob: -7.812551021575928
    4. 'inde' → logprob: -9.687551498413086
    5. '   ' → logprob: -9.812551498413086
    6. '(ind' → logprob: -11.187551498413086
    7. ' ' → logprob: -11.937551498413086
    8. '_ind' → logprob: -12.125051498413086
    9. ' inden' → logprob: -12.125051498413086
    10. '  ' → logprob: -12.625051498413086

Token 135: 'g' (ID: 70)
  Prédit: 'g'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'g' → logprob: -0.001517834491096437
    2. 'q' → logprob: -6.5015177726745605
    3. ' g' → logprob: -11.626518249511719
    4. '[g' → logprob: -13.501518249511719
    5. 'г' → logprob: -13.751518249511719
    6. '   ' → logprob: -14.626518249511719
    7. '	g' → logprob: -14.751518249511719
    8. 'gd' → logprob: -15.126518249511719
    9. '[' → logprob: -15.251518249511719
    10. ' ' → logprob: -15.314018249511719

Token 136: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -2.2200749754119897e-06
    2. '[' → logprob: -13.125001907348633
    3. '```' → logprob: -15.875001907348633
    4. ' [' → logprob: -16.750001907348633
    5. 'i' → logprob: -17.125001907348633
    6. '[j' → logprob: -18.250001907348633
    7. '[I' → logprob: -18.625001907348633
    8. '\[' → logprob: -19.125001907348633
    9. '[
' → logprob: -19.375001907348633
    10. '
' → logprob: -19.500001907348633

Token 137: ']' (ID: 60)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.1267229318618774
    2. ']' → logprob: -1.2517229318618774
    3. '==' → logprob: -1.7517229318618774
    4. ']==' → logprob: -2.251722812652588
    5. ' ==' → logprob: -2.251722812652588
    6. ')==' → logprob: -5.251722812652588
    7. '[' → logprob: -8.501723289489746
    8. ' )' → logprob: -8.626723289489746
    9. '[i' → logprob: -9.501723289489746
    10. ' ]' → logprob: -9.751723289489746

Token 138: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.38692429661750793
    2. ' ==' → logprob: -1.1369242668151855
    3. '0' → logprob: -11.011924743652344
    4. ']==' → logprob: -11.136924743652344
    5. ' ' → logprob: -12.011924743652344
    6. ')==' → logprob: -12.136924743652344
    7. ')' → logprob: -12.511924743652344
    8. '=' → logprob: -13.261924743652344
    9. '===' → logprob: -13.636924743652344
    10. '==
' → logprob: -14.011924743652344

Token 139: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.023262368515133858
    2. ' ' → logprob: -3.7732622623443604
    3. '1' → logprob: -11.023262023925781
    4. '   ' → logprob: -14.648262023925781
    5. '```' → logprob: -16.39826202392578
    6. '  ' → logprob: -17.64826202392578
    7. '
' → logprob: -18.27326202392578
    8. ' ' → logprob: -18.52326202392578
    9. '    ' → logprob: -19.27326202392578
    10. '`' → logprob: -19.33576202392578

Token 140: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0002882721892092377
    2. ' ' → logprob: -8.500288009643555
    3. '1' → logprob: -9.375288009643555
    4. '```' → logprob: -18.750288009643555
    5. '  ' → logprob: -18.875288009643555
    6. '   ' → logprob: -18.875288009643555
    7. ')' → logprob: -20.000288009643555
    8. '    ' → logprob: -20.312788009643555
    9. '
' → logprob: -20.375288009643555
    10. '01' → logprob: -20.625288009643555

Token 141: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.3167743384838104
    2. ':
' → logprob: -1.3167743682861328
    3. ':q' → logprob: -6.441774368286133
    4. '):
' → logprob: -6.691774368286133
    5. '   ' → logprob: -8.441774368286133
    6. '):' → logprob: -8.566774368286133
    7. 'q' → logprob: -9.191774368286133
    8. ' :
' → logprob: -10.316774368286133
    9. '	q' → logprob: -10.316774368286133
    10. '       ' → logprob: -10.816774368286133

Token 142: '       ' (ID: 309)
  Prédit: 'q'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -0.6483781337738037
    2. ' q' → logprob: -0.8983781337738037
    3. '   ' → logprob: -2.7733781337738037
    4. '	q' → logprob: -5.148378372192383
    5. '       ' → logprob: -6.648378372192383
    6. ',q' → logprob: -9.273378372192383
    7. '(q' → logprob: -9.523378372192383
    8. '[q' → logprob: -10.273378372192383
    9. ')' → logprob: -10.898378372192383
    10. '    
' → logprob: -11.023378372192383

Token 143: ' q' (ID: 2335)
  Prédit: 'q'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' (adapté à ' q') → logprob: -0.007616444956511259
    2. ' q' → logprob: -4.8826165199279785
    3. '   ' → logprob: -11.63261604309082
    4. '	q' → logprob: -13.63261604309082
    5. '       ' → logprob: -15.50761604309082
    6. '_q' → logprob: -17.38261604309082
    7. ' ' → logprob: -17.50761604309082
    8. '  ' → logprob: -18.00761604309082
    9. 'if' → logprob: -18.25761604309082
    10. '    ' → logprob: -18.63261604309082

Token 144: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.008630876429378986
    2. '.' → logprob: -4.758630752563477
    3. '.put' → logprob: -12.008630752563477
    4. '.app' → logprob: -12.633630752563477
    5. '.extend' → logprob: -13.133630752563477
    6. '.Append' → logprob: -13.758630752563477
    7. ' .' → logprob: -13.883630752563477
    8. '.push' → logprob: -14.258630752563477
    9. '.enqueue' → logprob: -14.383630752563477
    10. '.add' → logprob: -14.508630752563477

Token 145: '(i' (ID: 3649)
  Prédit: '(i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(i' → logprob: -2.176947600673884e-05
    2. '(' → logprob: -10.750021934509277
    3. '((' → logprob: -15.750021934509277
    4. ' (' → logprob: -17.00002098083496
    5. '()' → logprob: -17.12502098083496
    6. 'i' → logprob: -17.50002098083496
    7. '(
' → logprob: -18.62502098083496
    8. '(I' → logprob: -19.50002098083496
    9. '(q' → logprob: -19.62502098083496
    10. '(s' → logprob: -20.12502098083496

Token 146: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.081584716506768e-05
    2. ')
' → logprob: -10.875020980834961
    3. ' )' → logprob: -14.250020980834961
    4. '<|end|>' → logprob: -14.375020980834961
    5. '```' → logprob: -15.875020980834961
    6. '
' → logprob: -16.00002098083496
    7. '))' → logprob: -16.50002098083496
    8. ')

' → logprob: -17.00002098083496
    9. ')#' → logprob: -17.12502098083496
    10. '   ' → logprob: -17.37502098083496

Token 147: 'res' (ID: 430)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -0.9938967227935791
    2. 'order' → logprob: -1.493896722793579
    3. 'res' → logprob: -1.868896722793579
    4. 'unique' → logprob: -2.368896722793579
    5. 'answer' → logprob: -2.368896722793579
    6. 'ans' → logprob: -3.368896722793579
    7. 'if' → logprob: -4.618896484375
    8. 'while' → logprob: -4.743896484375
    9. 'top' → logprob: -5.743896484375
    10. 'sequence' → logprob: -6.743896484375

Token 148: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5765444040298462
    2. ' =' → logprob: -0.8265444040298462
    3. '=[]' → logprob: -7.826544284820557
    4. '_' → logprob: -9.201544761657715
    5. ',' → logprob: -9.576544761657715
    6. '[]' → logprob: -11.451544761657715
    7. '[' → logprob: -12.326544761657715
    8. '[:]' → logprob: -12.326544761657715
    9. 's' → logprob: -12.576544761657715
    10. '=[]
' → logprob: -12.576544761657715

Token 149: ' []
' (ID: 8911)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.0005680450703948736
    2. ' []' → logprob: -7.50056791305542
    3. '[' → logprob: -11.500568389892578
    4. '[]
' → logprob: -12.375568389892578
    5. '[],' → logprob: -15.250568389892578
    6. '[]}' → logprob: -15.750568389892578
    7. 'deque' → logprob: -16.125568389892578
    8. '[]

' → logprob: -16.500568389892578
    9. '[]>' → logprob: -18.000568389892578
    10. '[])' → logprob: -18.125568389892578

Token 150: 'unique' (ID: 22365)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.5780564546585083
    2. 'unique' → logprob: -0.8280564546585083
    3. 'is' → logprob: -7.078056335449219
    4. ' while' → logprob: -7.453056335449219
    5. ' unique' → logprob: -8.328056335449219
    6. '```' → logprob: -8.578056335449219
    7. 'uni' → logprob: -9.203056335449219
    8. 'uniq' → logprob: -10.203056335449219
    9. 'valid' → logprob: -10.953056335449219
    10. '_unique' → logprob: -10.953056335449219

Token 151: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.08192688226699829
    2. '_' → logprob: -3.0819268226623535
    3. '=' → logprob: -3.4569268226623535
    4. 'ly' → logprob: -7.8319268226623535
    5. '=True' → logprob: -7.9569268226623535
    6. '_unique' → logprob: -9.081927299499512
    7. '_flag' → logprob: -9.331927299499512
    8. 'ity' → logprob: -9.706927299499512
    9. '_check' → logprob: -10.331927299499512
    10. '_count' → logprob: -10.331927299499512

Token 152: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.004087543580681086
    2. ' True' → logprob: -5.504087448120117
    3. '(True' → logprob: -12.129087448120117
    4. 'len' → logprob: -12.629087448120117
    5. '=True' → logprob: -15.379087448120117
    6. 'true' → logprob: -16.629087448120117
    7. '1' → logprob: -16.754087448120117
    8. ' len' → logprob: -18.254087448120117
    9. 'False' → logprob: -18.379087448120117
    10. ' ' → logprob: -19.004087448120117

Token 153: '
' (ID: 198)
  Prédit: 'while'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.259555846452713
    2. '
' → logprob: -2.1345558166503906
    3. ' while' → logprob: -2.2595558166503906
    4. '```' → logprob: -6.009555816650391
    5. '<|end|>' → logprob: -6.134555816650391
    6. '\n' → logprob: -8.13455581665039
    7. ' 
' → logprob: -8.75955581665039
    8. ':
' → logprob: -8.88455581665039
    9. 'for' → logprob: -9.00955581665039
    10. '  
' → logprob: -9.13455581665039

Token 154: 'while' (ID: 7032)
  Prédit: 'while'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'while' → logprob: -0.000915039679966867
    2. ' while' → logprob: -7.000915050506592
    3. 'for' → logprob: -13.125914573669434
    4. '```' → logprob: -13.750914573669434
    5. '
' → logprob: -15.125914573669434
    6. ' 
' → logprob: -17.00091552734375
    7. '	while' → logprob: -17.25091552734375
    8. 'While' → logprob: -17.37591552734375
    9. 'wh' → logprob: -20.00091552734375
    10. '``' → logprob: -20.12591552734375

Token 155: ' q' (ID: 2335)
  Prédit: 'q'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -0.12449125200510025
    2. ' q' → logprob: -2.7494912147521973
    3. 'len' → logprob: -3.2494912147521973
    4. ' len' → logprob: -4.249491214752197
    5. '   ' → logprob: -11.249491691589355
    6. ' ' → logprob: -11.749491691589355
    7. '	q' → logprob: -13.124491691589355
    8. '(len' → logprob: -13.249491691589355
    9. '(q' → logprob: -14.999491691589355
    10. 'l' → logprob: -14.999491691589355

Token 156: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.004317722283303738
    2. ' and' → logprob: -6.254317760467529
    3. '.' → logprob: -7.254317760467529
    4. 'and' → logprob: -7.504317760467529
    5. '>' → logprob: -8.754317283630371
    6. 'len' → logprob: -8.754317283630371
    7. '[' → logprob: -8.879317283630371
    8. ':
' → logprob: -9.379317283630371
    9. '.len' → logprob: -9.504317283630371
    10. '>:' → logprob: -9.504317283630371

Token 157: '   ' (ID: 271)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.2848995625972748
    2. '   ' → logprob: -1.4098995923995972
    3. 'if' → logprob: -6.159899711608887
    4. '```' → logprob: -7.784899711608887
    5. ' 
' → logprob: -7.909899711608887
    6. '    
' → logprob: -7.909899711608887
    7. ' ' → logprob: -9.159899711608887
    8. '	if' → logprob: -9.284899711608887
    9. '  
' → logprob: -9.659899711608887
    10. ' x' → logprob: -10.034899711608887

Token 158: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.12703320384025574
    2. 'if' (adapté à ' if') → logprob: -2.127033233642578
    3. '   ' → logprob: -9.627033233642578
    4. 'len' → logprob: -10.877033233642578
    5. ' len' → logprob: -11.252033233642578
    6. ' ' → logprob: -12.877033233642578
    7. ' 
' → logprob: -13.627033233642578
    8. '	if' → logprob: -13.752033233642578
    9. ' ' → logprob: -14.002033233642578
    10. '```' → logprob: -14.877033233642578

Token 159: ' len' (ID: 4631)
  Prédit: ' len'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' len' → logprob: -0.2519313097000122
    2. 'len' → logprob: -1.5019313097000122
    3. ' ' → logprob: -13.876931190490723
    4. '(len' → logprob: -14.126931190490723
    5. '	len' → logprob: -15.251931190490723
    6. '   ' → logprob: -16.12693214416504
    7. '=len' → logprob: -16.50193214416504
    8. '<len' → logprob: -17.62693214416504
    9. 'l' → logprob: -17.75193214416504
    10. '
' → logprob: -18.00193214416504

Token 160: '(q' (ID: 21479)
  Prédit: '(q'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(q' → logprob: -1.6286106983898208e-05
    2. 'q' → logprob: -11.250016212463379
    3. '(' → logprob: -13.125016212463379
    4. ' (' → logprob: -13.875016212463379
    5. '[q' → logprob: -15.375016212463379
    6. '(queue' → logprob: -17.375017166137695
    7. '	q' → logprob: -17.875017166137695
    8. '(
' → logprob: -18.000017166137695
    9. '>' → logprob: -18.375017166137695
    10. ' q' → logprob: -18.500017166137695

Token 161: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.04881308972835541
    2. ' >' → logprob: -3.6738131046295166
    3. '>' → logprob: -4.1738128662109375
    4. ')>' → logprob: -5.4238128662109375
    5. ' )' → logprob: -6.0488128662109375
    6. ' !=' → logprob: -9.923812866210938
    7. ' ' → logprob: -11.548812866210938
    8. '```' → logprob: -11.798812866210938
    9. ')!=' → logprob: -12.048812866210938
    10. '!=' → logprob: -12.048812866210938

Token 162: ' >=' (ID: 5064)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '>' → logprob: -0.25682923197746277
    2. ' >' → logprob: -1.5068292617797852
    3. '1' → logprob: -5.756829261779785
    4. ' !=' → logprob: -7.256829261779785
    5. '!=' → logprob: -7.631829261779785
    6. '==' → logprob: -8.256829261779785
    7. ' ==' → logprob: -9.506829261779785
    8. ')' → logprob: -9.631829261779785
    9. '[' → logprob: -10.006829261779785
    10. '```' → logprob: -11.006829261779785

Token 163: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.00014442270912695676
    2. ' ' → logprob: -8.875144004821777
    3. '```' → logprob: -13.250144004821777
    4. '
' → logprob: -13.750144004821777
    5. '   ' → logprob: -14.125144004821777
    6. '  ' → logprob: -15.625144004821777
    7. '۲' → logprob: -15.812644004821777
    8. '

' → logprob: -15.875144004821777
    9. 'from' → logprob: -16.062644958496094
    10. '>' → logprob: -16.562644958496094

Token 164: '2' (ID: 17)
  Prédit: '2'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -1.6240566083070007e-06
    2. ' ' → logprob: -13.500001907348633
    3. '```' → logprob: -17.000001907348633
    4. '
' → logprob: -17.875001907348633
    5. '   ' → logprob: -18.750001907348633
    6. '

' → logprob: -18.750001907348633
    7. '۲' → logprob: -18.875001907348633
    8. '２' → logprob: -19.562501907348633
    9. '>' → logprob: -19.562501907348633
    10. '  ' → logprob: -19.875001907348633

Token 165: ':' (ID: 25)
  Prédit: ':'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.3878340423107147
    2. ':
' → logprob: -1.137834072113037
    3. '   ' → logprob: -7.012834072113037
    4. '       ' → logprob: -9.887833595275879
    5. ':
' → logprob: -12.387833595275879
    6. '):
' → logprob: -13.012833595275879
    7. '):' → logprob: -13.012833595275879
    8. ' :' → logprob: -14.012833595275879
    9. ' :
' → logprob: -14.512833595275879
    10. '=' → logprob: -15.387833595275879

Token 166: ' ' (ID: 220)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.12995795905590057
    2. ' unique' → logprob: -2.129957914352417
    3. '       ' → logprob: -6.379958152770996
    4. 'unique' → logprob: -6.754958152770996
    5. '
' → logprob: -9.004958152770996
    6. '```' → logprob: -11.129958152770996
    7. '    
' → logprob: -11.504958152770996
    8. '(unique' → logprob: -12.129958152770996
    9. '.unique' → logprob: -12.754958152770996
    10. '_unique' → logprob: -12.879958152770996

Token 167: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.19680529832839966
    2. 'unique' → logprob: -2.196805238723755
    3. ' unique' → logprob: -2.696805238723755
    4. '
' → logprob: -10.321805000305176
    5. '       ' → logprob: -10.696805000305176
    6. '   ' → logprob: -12.571805000305176
    7. '.unique' → logprob: -12.571805000305176
    8. '(unique' → logprob: -12.946805000305176
    9. '  ' → logprob: -13.446805000305176
    10. '_unique' → logprob: -13.571805000305176

Token 168: ' multiple' (ID: 7598)
  Prédit: 'unique'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'unique' → logprob: -0.5789296627044678
    2. ' unique' → logprob: -0.8289296627044678
    3. '   ' → logprob: -5.828929901123047
    4. '
' → logprob: -10.578929901123047
    5. '#' → logprob: -12.078929901123047
    6. ' ' → logprob: -12.828929901123047
    7. '       ' → logprob: -13.203929901123047
    8. '```' → logprob: -13.203929901123047
    9. '  ' → logprob: -13.328929901123047
    10. '.unique' → logprob: -13.453929901123047

Token 169: ' choices' (ID: 14494)
  Prédit: ' choices'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' choices' → logprob: -1.0945004224777222
    2. ' nodes' → logprob: -1.0945004224777222
    3. ' sources' → logprob: -1.7195004224777222
    4. ' options' → logprob: -3.3445005416870117
    5. 'sources' → logprob: -3.5945005416870117
    6. 'nodes' → logprob: -3.9695005416870117
    7. 'choices' → logprob: -4.344500541687012
    8. ' candidates' → logprob: -4.344500541687012
    9. ' possible' → logprob: -4.594500541687012
    10. '<|end|>' → logprob: -4.719500541687012

Token 170: ' =>' (ID: 871)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5834773778915405
    2. '       ' → logprob: -0.8334773778915405
    3. ' unique' → logprob: -5.20847749710083
    4. 'unique' → logprob: -6.70847749710083
    5. '
' → logprob: -7.95847749710083
    6. ',' → logprob: -8.833477020263672
    7. ':
' → logprob: -9.458477020263672
    8. ':' → logprob: -9.458477020263672
    9. '(unique' → logprob: -10.583477020263672
    10. '=' → logprob: -10.583477020263672

Token 171: ' multiple' (ID: 7598)
  Prédit: 'unique'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'unique' → logprob: -0.18014253675937653
    2. ' unique' → logprob: -1.8051425218582153
    3. '   ' → logprob: -8.055142402648926
    4. '
' → logprob: -9.680142402648926
    5. '```' → logprob: -12.055142402648926
    6. ' ' → logprob: -13.180142402648926
    7. '  ' → logprob: -13.430142402648926
    8. '       ' → logprob: -13.555142402648926
    9. '    
' → logprob: -13.805142402648926
    10. 'possible' → logprob: -14.180142402648926

Token 172: ' top' (ID: 2344)
  Prédit: 'possible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'possible' → logprob: -0.7365907430648804
    2. 'paths' → logprob: -1.6115907430648804
    3. ' possible' → logprob: -1.9865907430648804
    4. ' paths' → logprob: -3.11159086227417
    5. 'top' → logprob: -3.73659086227417
    6. 'valid' → logprob: -3.98659086227417
    7. ' top' → logprob: -4.36159086227417
    8. ' valid' → logprob: -4.48659086227417
    9. 'poss' → logprob: -4.48659086227417
    10. '_possible' → logprob: -4.48659086227417

Token 173: 'ological' (ID: 8339)
  Prédit: 'ological'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ological' → logprob: -0.2502794563770294
    2. 'logical' → logprob: -2.125279426574707
    3. 'ologies' → logprob: -3.125279426574707
    4. 'ol' → logprob: -4.125279426574707
    5. 'o' → logprob: -4.750279426574707
    6. 'sort' → logprob: -4.875279426574707
    7. '_sort' → logprob: -5.125279426574707
    8. 'os' → logprob: -5.375279426574707
    9. 'order' → logprob: -5.500279426574707
    10. 'ologic' → logprob: -5.625279426574707

Token 174: ' orders' (ID: 12528)
  Prédit: 'orders'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'orders' → logprob: -0.8226187229156494
    2. ' orders' → logprob: -1.0726187229156494
    3. 'sort' → logprob: -2.1976187229156494
    4. ' sorts' → logprob: -2.5726187229156494
    5. 'order' → logprob: -4.44761848449707
    6. ' order' → logprob: -5.32261848449707
    7. 's' → logprob: -5.69761848449707
    8. ' sort' → logprob: -5.82261848449707
    9. '_sort' → logprob: -6.07261848449707
    10. '_orders' → logprob: -6.32261848449707

Token 175: ' possible' (ID: 4149)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0020084569696336985
    2. ' unique' → logprob: -6.627008438110352
    3. '       ' → logprob: -7.877008438110352
    4. 'unique' → logprob: -8.377008438110352
    5. '
' → logprob: -9.752008438110352
    6. ',' → logprob: -12.627008438110352
    7. '.unique' → logprob: -13.127008438110352
    8. ':
' → logprob: -13.252008438110352
    9. '    
' → logprob: -13.252008438110352
    10. '(unique' → logprob: -13.377008438110352

Token 176: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.010188785381615162
    2. ':
' → logprob: -5.510188579559326
    3. '       ' → logprob: -5.885188579559326
    4. ':' → logprob: -6.760188579559326
    5. 'unique' → logprob: -7.385188579559326
    6. '):
' → logprob: -7.385188579559326
    7. ',' → logprob: -8.385189056396484
    8. ' unique' → logprob: -8.635189056396484
    9. ')' → logprob: -8.760189056396484
    10. '
' → logprob: -8.760189056396484

Token 177: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06405314803123474
    2. ' unique' → logprob: -2.8140530586242676
    3. 'unique' → logprob: -6.189053058624268
    4. '       ' → logprob: -11.439053535461426
    5. '
' → logprob: -11.939053535461426
    6. '```' → logprob: -12.189053535461426
    7. '   ' → logprob: -12.689053535461426
    8. '_unique' → logprob: -13.814053535461426
    9. '(unique' → logprob: -13.814053535461426
    10. '    
' → logprob: -14.064053535461426

Token 178: ' unique' (ID: 5746)
  Prédit: 'unique'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'unique' (adapté à ' unique') → logprob: -0.018262092024087906
    2. ' unique' → logprob: -4.018261909484863
    3. '   ' → logprob: -9.143261909484863
    4. '
' → logprob: -12.393261909484863
    5. '.unique' → logprob: -14.768261909484863
    6. '_unique' → logprob: -15.768261909484863
    7. '(unique' → logprob: -16.01826286315918
    8. '    
' → logprob: -16.26826286315918
    9. '```' → logprob: -16.26826286315918
    10. '       ' → logprob: -16.51826286315918

Token 179: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.023247340694069862
    2. ' =' → logprob: -3.773247241973877
    3. '=False' → logprob: -13.273247718811035
    4. '＝' → logprob: -17.02324676513672
    5. '   ' → logprob: -17.14824676513672
    6. '    ' → logprob: -17.77324676513672
    7. ' ' → logprob: -17.89824676513672
    8. '=True' → logprob: -18.39824676513672
    9. '==' → logprob: -18.64824676513672
    10. '.=' → logprob: -18.77324676513672

Token 180: ' False' (ID: 7983)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'False' → logprob: -0.0001234428636962548
    2. ' False' → logprob: -9.000123023986816
    3. '=False' → logprob: -18.125123977661133
    4. '(False' → logprob: -19.375123977661133
    5. '
' → logprob: -20.000123977661133
    6. 'false' → logprob: -20.125123977661133
    7. 'F' → logprob: -21.000123977661133
    8. '```' → logprob: -21.125123977661133
    9. '_false' → logprob: -21.250123977661133
    10. 'FALSE' → logprob: -21.250123977661133

Token 181: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0349217914044857
    2. '
' → logprob: -3.409921884536743
    3. '    
' → logprob: -8.409921646118164
    4. 'current' → logprob: -8.659921646118164
    5. 'node' → logprob: -8.659921646118164
    6. 'res' → logprob: -8.784921646118164
    7. 'v' → logprob: -9.034921646118164
    8. 'u' → logprob: -9.409921646118164
    9. ' u' → logprob: -9.784921646118164
    10. '```' → logprob: -9.909921646118164

Token 182: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07150184363126755
    2. ' u' → logprob: -3.0715017318725586
    3. 'u' → logprob: -3.9465017318725586
    4. 'v' → logprob: -6.821501731872559
    5. ' v' → logprob: -7.571501731872559
    6. 'cur' → logprob: -7.696501731872559
    7. '
' → logprob: -8.321501731872559
    8. ' cur' → logprob: -8.571501731872559
    9. ' current' → logprob: -8.696501731872559
    10. 'current' → logprob: -8.696501731872559

Token 183: ' u' (ID: 337)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'u' (adapté à ' u') → logprob: -0.03530989959836006
    2. ' u' → logprob: -4.035309791564941
    3. '   ' → logprob: -4.910309791564941
    4. 'cur' → logprob: -5.410309791564941
    5. 'v' → logprob: -6.035309791564941
    6. 'node' → logprob: -6.160309791564941
    7. 'curr' → logprob: -8.660309791564941
    8. ' node' → logprob: -8.785309791564941
    9. 'current' → logprob: -9.035309791564941
    10. 'x' → logprob: -9.910309791564941

Token 184: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.3132626414299011
    2. '=' → logprob: -1.313262701034546
    3. ' =
' → logprob: -15.563262939453125
    4. '=q' → logprob: -15.688262939453125
    5. '=
' → logprob: -15.813262939453125
    6. ')' → logprob: -16.313262939453125
    7. 'q' → logprob: -16.563262939453125
    8. '＝' → logprob: -16.688262939453125
    9. ' ' → logprob: -16.938262939453125
    10. '	' → logprob: -17.563262939453125

Token 185: ' q' (ID: 2335)
  Prédit: 'q'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' → logprob: -0.01416350994259119
    2. ' q' → logprob: -4.264163494110107
    3. '	q' → logprob: -19.139163970947266
    4. ' ' → logprob: -21.014163970947266
    5. '```' → logprob: -21.389163970947266
    6. '[q' → logprob: -21.514163970947266
    7. '*q' → logprob: -21.514163970947266
    8. '_q' → logprob: -21.514163970947266
    9. '=q' → logprob: -21.764163970947266
    10. 'ql' → logprob: -21.889163970947266

Token 186: '.p' (ID: 1201)
  Prédit: '.p'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.p' → logprob: -1.6240566083070007e-06
    2. '.' → logprob: -14.500001907348633
    3. '.pop' → logprob: -14.500001907348633
    4. 'p' → logprob: -14.625001907348633
    5. ' .' → logprob: -17.500001907348633
    6. 'opleft' → logprob: -17.750001907348633
    7. ' p' → logprob: -19.125001907348633
    8. '```' → logprob: -19.375001907348633
    9. '   ' → logprob: -19.500001907348633
    10. '.append' → logprob: -21.125001907348633

Token 187: 'opleft' (ID: 182170)
  Prédit: 'opleft'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'opleft' → logprob: -0.008628051728010178
    2. 'op' → logprob: -4.758627891540527
    3. 'ople' → logprob: -11.633627891540527
    4. 'opl' → logprob: -12.383627891540527
    5. 'o' → logprob: -15.633627891540527
    6. '```' → logprob: -16.133628845214844
    7. 'opf' → logprob: -16.508628845214844
    8. 'opt' → logprob: -17.758628845214844
    9. 'opup' → logprob: -17.883628845214844
    10. 'left' → logprob: -18.008628845214844

Token 188: '()
' (ID: 1234)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.04586620628833771
    2. ' for' → logprob: -3.7958662509918213
    3. '
' → logprob: -4.045866012573242
    4. '   ' → logprob: -5.920866012573242
    5. 'res' → logprob: -6.170866012573242
    6. ')
' → logprob: -10.170866012573242
    7. '<|end|>' → logprob: -10.920866012573242
    8. ')' → logprob: -11.420866012573242
    9. '    
' → logprob: -11.795866012573242
    10. ' res' → logprob: -12.420866012573242

Token 189: '   ' (ID: 271)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.029913628473877907
    2. '   ' → logprob: -3.5299136638641357
    3. '
' → logprob: -9.279913902282715
    4. ' res' → logprob: -9.654913902282715
    5. '```' → logprob: -12.529913902282715
    6. '	res' → logprob: -13.529913902282715
    7. '    
' → logprob: -15.654913902282715
    8. '``' → logprob: -15.654913902282715
    9. '  ' → logprob: -15.779913902282715
    10. '_res' → logprob: -15.904913902282715

Token 190: ' res' (ID: 694)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' (adapté à ' res') → logprob: -1.6240566083070007e-06
    2. ' res' → logprob: -13.500001907348633
    3. '   ' → logprob: -16.000001907348633
    4. 'for' → logprob: -19.250001907348633
    5. '
' → logprob: -20.625001907348633
    6. '	res' → logprob: -22.250001907348633
    7. '```' → logprob: -22.625001907348633
    8. '_res' → logprob: -23.500001907348633
    9. '    
' → logprob: -23.750001907348633
    10. '$res' → logprob: -25.000001907348633

Token 191: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.0019307781476527452
    2. '.' → logprob: -6.2519307136535645
    3. 'append' → logprob: -13.376931190490723
    4. '.app' → logprob: -14.626931190490723
    5. '.extend' → logprob: -16.126930236816406
    6. '.ap' → logprob: -16.751930236816406
    7. ' .' → logprob: -17.501930236816406
    8. '.Append' → logprob: -17.876930236816406
    9. ').' → logprob: -18.126930236816406
    10. '​.' → logprob: -18.626930236816406

Token 192: '(u' (ID: 17057)
  Prédit: '(u'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(u' → logprob: -3.128163257315464e-07
    2. 'u' → logprob: -15.75
    3. '(' → logprob: -15.875
    4. ' u' → logprob: -22.0
    5. '(
' → logprob: -22.75
    6. ' (' → logprob: -22.75
    7. '[u' → logprob: -23.0
    8. '	u' → logprob: -23.25
    9. '((' → logprob: -24.125
    10. '(U' → logprob: -24.875

Token 193: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.12699036300182343
    2. ')' → logprob: -2.12699031829834
    3. '   ' → logprob: -9.87699031829834
    4. ')
' → logprob: -11.62699031829834
    5. ' )
' → logprob: -13.62699031829834
    6. '
' → logprob: -14.87699031829834
    7. ')

' → logprob: -15.87699031829834
    8. ' )' → logprob: -15.87699031829834
    9. ')`
' → logprob: -16.751991271972656
    10. ' ' → logprob: -17.876991271972656

Token 194: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.25448375940322876
    2. 'for' → logprob: -1.504483699798584
    3. ' for' → logprob: -6.004483699798584
    4. '```' → logprob: -9.879484176635742
    5. '    
' → logprob: -10.754484176635742
    6. '
' → logprob: -11.629484176635742
    7. '	for' → logprob: -13.754484176635742
    8. '  
' → logprob: -15.004484176635742
    9. ' 
' → logprob: -15.629484176635742
    10. ' ' → logprob: -15.629484176635742

Token 195: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -6.2729995988775045e-06
    2. ' for' → logprob: -12.000006675720215
    3. '   ' → logprob: -16.7500057220459
    4. '
' → logprob: -20.7500057220459
    5. '    
' → logprob: -21.1250057220459
    6. '```' → logprob: -21.8750057220459
    7. '	for' → logprob: -22.3750057220459
    8. ' ' → logprob: -23.5000057220459
    9. ' 
' → logprob: -23.7500057220459
    10. '  
' → logprob: -25.3750057220459

Token 196: ' v' (ID: 323)
  Prédit: 'v'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'v' → logprob: -0.003179975086823106
    2. ' v' → logprob: -5.753180027008057
    3. 'w' → logprob: -13.253179550170898
    4. '```' → logprob: -15.503179550170898
    5. '	v' → logprob: -16.1281795501709
    6. '_v' → logprob: -16.3781795501709
    7. '(v' → logprob: -17.2531795501709
    8. '`' → logprob: -17.3781795501709
    9. ',v' → logprob: -18.5031795501709
    10. ' w' → logprob: -18.5031795501709

Token 197: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.12694627046585083
    2. 'in' → logprob: -2.126946210861206
    3. '	in' → logprob: -11.751946449279785
    4. ' ' → logprob: -11.876946449279785
    5. '_in' → logprob: -13.751946449279785
    6. 'In' → logprob: -14.251946449279785
    7. 's' → logprob: -14.626946449279785
    8. '<|end|>' → logprob: -15.501946449279785
    9. '   ' → logprob: -15.751946449279785
    10. ',' → logprob: -15.876946449279785

Token 198: ' adj' (ID: 20251)
  Prédit: 'adj'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'adj' → logprob: -0.001503313542343676
    2. ' adj' → logprob: -6.5015034675598145
    3. 'ad' → logprob: -14.501502990722656
    4. '(adj' → logprob: -14.876502990722656
    5. '   ' → logprob: -16.876502990722656
    6. 'adm' → logprob: -17.751502990722656
    7. ' ' → logprob: -18.876502990722656
    8. 'aj' → logprob: -19.876502990722656
    9. 'Adj' → logprob: -20.126502990722656
    10. 'range' → logprob: -20.751502990722656

Token 199: '[u' (ID: 48750)
  Prédit: '[u'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[u' → logprob: -3.650518920039758e-06
    2. 'u' → logprob: -13.000003814697266
    3. '[' → logprob: -13.625003814697266
    4. '[v' → logprob: -16.125003814697266
    5. '```' → logprob: -18.250003814697266
    6. '(u' → logprob: -18.750003814697266
    7. '[
' → logprob: -19.500003814697266
    8. '	u' → logprob: -20.000003814697266
    9. '
' → logprob: -20.125003814697266
    10. '   ' → logprob: -20.250003814697266

Token 200: ']:
' (ID: 22152)
  Prédit: ']:'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']:' → logprob: -0.06264577060937881
    2. ']:
' → logprob: -2.812645673751831
    3. ':' → logprob: -7.56264591217041
    4. ']' → logprob: -9.68764591217041
    5. ']:
' → logprob: -10.06264591217041
    6. '):' → logprob: -10.43764591217041
    7. '):
' → logprob: -11.68764591217041
    8. ':
' → logprob: -12.18764591217041
    9. '}:' → logprob: -12.93764591217041
    10. '   ' → logprob: -12.93764591217041

Token 201: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00808305200189352
    2. 'ind' → logprob: -5.008082866668701
    3. '   ' → logprob: -6.633082866668701
    4. '```' → logprob: -10.75808334350586
    5. '[ind' → logprob: -12.00808334350586
    6. '(ind' → logprob: -12.25808334350586
    7. '        
' → logprob: -12.38308334350586
    8. ' ind' → logprob: -13.13308334350586
    9. '           ' → logprob: -13.25808334350586
    10. '<|end|>' → logprob: -13.25808334350586

Token 202: ' inde' (ID: 6741)
  Prédit: 'ind'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ind' → logprob: -0.03342321887612343
    2. ' inde' → logprob: -4.15842342376709
    3. '       ' → logprob: -4.65842342376709
    4. '   ' → logprob: -5.03342342376709
    5. ' ind' → logprob: -6.78342342376709
    6. '           ' → logprob: -9.65842342376709
    7. '    ' → logprob: -11.78342342376709
    8. '  ' → logprob: -11.90842342376709
    9. 'inde' (adapté à ' inde') → logprob: -11.90842342376709
    10. ' ' → logprob: -12.28342342376709

Token 203: 'g' (ID: 70)
  Prédit: 'g'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'g' → logprob: -3.292907877039397e-06
    2. 'q' → logprob: -12.87500286102295
    3. 'd' → logprob: -15.37500286102295
    4. ' g' → logprob: -15.37500286102295
    5. 'deg' → logprob: -16.125003814697266
    6. 'v' → logprob: -16.500003814697266
    7. '[g' → logprob: -17.250003814697266
    8. '[' → logprob: -17.375003814697266
    9. 'gv' → logprob: -18.000003814697266
    10. 'г' → logprob: -18.250003814697266

Token 204: '[v' (ID: 36561)
  Prédit: '[v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[v' → logprob: -3.128163257315464e-07
    2. 'v' → logprob: -15.25
    3. '[' → logprob: -17.125
    4. '```' → logprob: -17.875
    5. '[j' → logprob: -19.625
    6. '	v' → logprob: -19.75
    7. '(v' → logprob: -21.25
    8. '[u' → logprob: -21.75
    9. '<v' → logprob: -22.0
    10. '[val' → logprob: -22.125

Token 205: ']' (ID: 60)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.751680314540863
    2. '-=' → logprob: -0.751680314540863
    3. ' -=' → logprob: -3.001680374145508
    4. '   ' → logprob: -5.751680374145508
    5. ']' → logprob: -5.751680374145508
    6. ')' → logprob: -8.376680374145508
    7. ']-' → logprob: -8.626680374145508
    8. '```' → logprob: -8.626680374145508
    9. ' -' → logprob: -9.376680374145508
    10. '[' → logprob: -10.001680374145508

Token 206: ' -=' (ID: 12583)
  Prédit: '-='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-=' → logprob: -0.09047049283981323
    2. '-' → logprob: -2.590470552444458
    3. ' -=' → logprob: -4.465470314025879
    4. '   ' → logprob: -12.340470314025879
    5. ' -' → logprob: -12.590470314025879
    6. '=' → logprob: -12.590470314025879
    7. '```' → logprob: -13.590470314025879
    8. '[' → logprob: -14.465470314025879
    9. '>' → logprob: -14.715470314025879
    10. '+=' → logprob: -15.590470314025879

Token 207: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -8.494741632603109e-05
    2. ' ' → logprob: -9.37508487701416
    3. '```' → logprob: -19.625085830688477
    4. '   ' → logprob: -19.750085830688477
    5. '0' → logprob: -22.000085830688477
    6. '<|end|>' → logprob: -22.375085830688477
    7. ')' → logprob: -22.875085830688477
    8. '۱' → logprob: -23.312585830688477
    9. '  ' → logprob: -23.437585830688477
    10. '[' → logprob: -24.250085830688477

Token 208: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.1472419600977446e-06
    2. ' ' → logprob: -13.750000953674316
    3. '```' → logprob: -19.375001907348633
    4. '   ' → logprob: -20.000001907348633
    5. '<|end|>' → logprob: -21.250001907348633
    6. '۱' → logprob: -22.500001907348633
    7. ')' → logprob: -23.000001907348633
    8. '
' → logprob: -23.187501907348633
    9. '１' → logprob: -23.625001907348633
    10. '`' → logprob: -23.687501907348633

Token 209: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0006109290407039225
    2. '
' → logprob: -8.500611305236816
    3. '   ' → logprob: -8.625611305236816
    4. 'if' → logprob: -9.000611305236816
    5. ' if' → logprob: -9.750611305236816
    6. '	' → logprob: -10.500611305236816
    7. '```' → logprob: -11.875611305236816
    8. '<|end|>' → logprob: -12.750611305236816
    9. ' ' → logprob: -13.375611305236816
    10. '	if' → logprob: -13.625611305236816

Token 210: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0006584656075574458
    2. 'if' → logprob: -7.5006585121154785
    3. ' if' → logprob: -9.75065803527832
    4. '   ' → logprob: -10.12565803527832
    5. '	' → logprob: -12.00065803527832
    6. '	if' → logprob: -14.62565803527832
    7. '```' → logprob: -15.37565803527832
    8. ' ' → logprob: -15.87565803527832
    9. '	   ' → logprob: -16.50065803527832
    10. '
' → logprob: -17.00065803527832

Token 211: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.06497517973184586
    2. '       ' → logprob: -2.8149752616882324
    3. ' if' → logprob: -5.814975261688232
    4. '   ' → logprob: -10.939974784851074
    5. '
' → logprob: -13.814974784851074
    6. '	if' → logprob: -14.189974784851074
    7. 'If' → logprob: -14.939974784851074
    8. '```' → logprob: -15.564974784851074
    9. '        
' → logprob: -15.689974784851074
    10. ' ' → logprob: -15.689974784851074

Token 212: ' inde' (ID: 6741)
  Prédit: 'ind'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ind' → logprob: -0.006737035233527422
    2. ' inde' → logprob: -5.006737232208252
    3. 'inde' → logprob: -11.006736755371094
    4. ' ind' → logprob: -13.256736755371094
    5. '(ind' → logprob: -13.506736755371094
    6. '   ' → logprob: -14.506736755371094
    7. ' ' → logprob: -14.631736755371094
    8. 'deg' → logprob: -15.256736755371094
    9. '[ind' → logprob: -15.381736755371094
    10. '  ' → logprob: -16.006736755371094

Token 213: 'g' (ID: 70)
  Prédit: 'g'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'g' → logprob: -1.1637164789135568e-05
    2. '[v' → logprob: -12.000011444091797
    3. 'q' → logprob: -13.000011444091797
    4. 'eg' → logprob: -14.250011444091797
    5. '[g' → logprob: -14.375011444091797
    6. 'v' → logprob: -14.625011444091797
    7. 'gv' → logprob: -14.625011444091797
    8. '[' → logprob: -14.750011444091797
    9. 'г' → logprob: -15.500011444091797
    10. ' g' → logprob: -16.000011444091797

Token 214: '[v' (ID: 36561)
  Prédit: '[v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[v' → logprob: -3.128163257315464e-07
    2. 'v' → logprob: -15.625
    3. '[' → logprob: -16.0
    4. ' [' → logprob: -19.5
    5. '	v' → logprob: -19.875
    6. '```' → logprob: -19.875
    7. '(v' → logprob: -20.0
    8. '==' → logprob: -20.375
    9. '[
' → logprob: -20.5
    10. '[u' → logprob: -21.0

Token 215: ']' (ID: 60)
  Prédit: ']'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.05891265720129013
    2. ']==' → logprob: -3.058912754058838
    3. '[v' → logprob: -4.933912754058838
    4. '==' → logprob: -5.808912754058838
    5. ' ==' → logprob: -10.30891227722168
    6. '[u' → logprob: -11.05891227722168
    7. '[' → logprob: -11.68391227722168
    8. '```' → logprob: -12.55891227722168
    9. '[]' → logprob: -13.05891227722168
    10. 'v' → logprob: -13.05891227722168

Token 216: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.5848382115364075
    2. '[v' → logprob: -0.8348382115364075
    3. ' ==' → logprob: -4.834838390350342
    4. '[' → logprob: -7.459838390350342
    5. '=' → logprob: -9.334837913513184
    6. ']==' → logprob: -9.459837913513184
    7. '```' → logprob: -9.459837913513184
    8. '[u' → logprob: -9.709837913513184
    9. '0' → logprob: -11.834837913513184
    10. '[i' → logprob: -11.959837913513184

Token 217: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0040785204619169235
    2. ' ' → logprob: -5.504078388214111
    3. '   ' → logprob: -15.87907886505127
    4. '```' → logprob: -18.129077911376953
    5. '=' → logprob: -19.879077911376953
    6. '  ' → logprob: -20.129077911376953
    7. '1' → logprob: -20.254077911376953
    8. '    ' → logprob: -20.379077911376953
    9. '
' → logprob: -20.504077911376953
    10. '       ' → logprob: -20.754077911376953

Token 218: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -4.5491004129871726e-05
    2. ' ' → logprob: -10.000045776367188
    3. '   ' → logprob: -19.250045776367188
    4. '```' → logprob: -20.250045776367188
    5. '  ' → logprob: -20.875045776367188
    6. '00' → logprob: -21.625045776367188
    7. ' ' → logprob: -22.000045776367188
    8. '۰' → logprob: -22.625045776367188
    9. '    ' → logprob: -22.625045776367188
    10. '=' → logprob: -22.625045776367188

Token 219: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.18924342095851898
    2. ':
' → logprob: -1.8142434358596802
    3. '           ' → logprob: -4.689243316650391
    4. '):
' → logprob: -9.43924331665039
    5. '       ' → logprob: -9.56424331665039
    6. '):' → logprob: -9.93924331665039
    7. ',' → logprob: -10.18924331665039
    8. ':
' → logprob: -12.06424331665039
    9. ')' → logprob: -12.31424331665039
    10. ' :
' → logprob: -13.18924331665039

Token 220: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.08741592615842819
    2. ' q' → logprob: -2.962415933609009
    3. 'q' → logprob: -3.462415933609009
    4. '       ' → logprob: -7.46241569519043
    5. '   ' → logprob: -10.71241569519043
    6. '```' → logprob: -11.08741569519043
    7. '               ' → logprob: -11.46241569519043
    8. '          ' → logprob: -11.83741569519043
    9. '	q' → logprob: -12.21241569519043
    10. ',q' → logprob: -12.33741569519043

Token 221: ' q' (ID: 2335)
  Prédit: 'q'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'q' (adapté à ' q') → logprob: -0.014168561436235905
    2. ' q' → logprob: -4.264168739318848
    3. '           ' → logprob: -12.639168739318848
    4. '	q' → logprob: -13.889168739318848
    5. '               ' → logprob: -14.514168739318848
    6. '   ' → logprob: -15.764168739318848
    7. ',q' → logprob: -16.63916778564453
    8. '```' → logprob: -17.51416778564453
    9. '       ' → logprob: -18.51416778564453
    10. 'ql' → logprob: -18.88916778564453

Token 222: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -3.531315314830863e-06
    2. '.' → logprob: -12.875003814697266
    3. '.enqueue' → logprob: -15.125003814697266
    4. 'append' → logprob: -15.625003814697266
    5. '.extend' → logprob: -15.750003814697266
    6. '.put' → logprob: -16.375003814697266
    7. '.app' → logprob: -16.625003814697266
    8. '.push' → logprob: -16.875003814697266
    9. '.Append' → logprob: -17.625003814697266
    10. ').' → logprob: -17.750003814697266

Token 223: '(v' (ID: 6932)
  Prédit: '(v'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(v' → logprob: -3.15441757265944e-05
    2. '(' → logprob: -10.375031471252441
    3. ' (' → logprob: -16.250032424926758
    4. '(
' → logprob: -16.750032424926758
    5. 'v' → logprob: -16.875032424926758
    6. '((' → logprob: -17.375032424926758
    7. '(V' → logprob: -18.250032424926758
    8. '()' → logprob: -19.750032424926758
    9. '(value' → logprob: -20.375032424926758
    10. ')' → logprob: -20.500032424926758

Token 224: ')

' (ID: 1029)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -4.842555426876061e-06
    2. ')
' → logprob: -12.375004768371582
    3. ' )' → logprob: -15.625004768371582
    4. '<|end|>' → logprob: -16.3750057220459
    5. ')return' → logprob: -16.6250057220459
    6. '))' → logprob: -17.0000057220459
    7. '`)' → logprob: -17.5000057220459
    8. '())' → logprob: -17.5000057220459
    9. '）' → logprob: -17.6250057220459
    10. '```' → logprob: -17.7500057220459

Token 225: '#' (ID: 2)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.00411223853006959
    2. 'print' → logprob: -5.504112243652344
    3. '
' → logprob: -11.129112243652344
    4. 'for' → logprob: -11.379112243652344
    5. '```' → logprob: -12.379112243652344
    6. ' if' → logprob: -13.004112243652344
    7. 'assert' → logprob: -14.379112243652344
    8. '#' → logprob: -15.004112243652344
    9. '    
' → logprob: -15.629112243652344
    10. '  
' → logprob: -15.879112243652344

Token 226: ' Check' (ID: 6208)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -4.751746746478602e-05
    2. ' if' → logprob: -10.37504768371582
    3. 'print' → logprob: -11.25004768371582
    4. 'for' → logprob: -13.12504768371582
    5. '```' → logprob: -14.25004768371582
    6. '#' → logprob: -14.62504768371582
    7. 'res' → logprob: -16.12504768371582
    8. '   ' → logprob: -17.75004768371582
    9. 'result' → logprob: -17.75004768371582
    10. 'assert' → logprob: -17.75004768371582

Token 227: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.0129638547077775
    2. 'len' → logprob: -5.387963771820068
    3. 'for' → logprob: -5.512963771820068
    4. ' if' → logprob: -5.512963771820068
    5. '(len' → logprob: -8.637964248657227
    6. 'unique' → logprob: -10.387964248657227
    7. ' len' → logprob: -10.887964248657227
    8. ' for' → logprob: -11.762964248657227
    9. '(unique' → logprob: -13.512964248657227
    10. '   ' → logprob: -13.637964248657227

Token 228: ' top' (ID: 2344)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.029777338728308678
    2. ' len' → logprob: -3.5297772884368896
    3. 'unique' → logprob: -11.029777526855469
    4. ' unique' → logprob: -11.904777526855469
    5. '(len' → logprob: -12.904777526855469
    6. ' not' → logprob: -14.404777526855469
    7. 'not' → logprob: -14.779777526855469
    8. 'length' → logprob: -15.779777526855469
    9. '```' → logprob: -16.27977752685547
    10. '
' → logprob: -17.40477752685547

Token 229: 'ological' (ID: 8339)
  Prédit: 'ological'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ological' → logprob: -0.0043413410894572735
    2. 'o' → logprob: -6.129341125488281
    3. 'ologically' → logprob: -6.754341125488281
    4. 'len' → logprob: -8.629341125488281
    5. 'ologic' → logprob: -8.629341125488281
    6. 'logical' → logprob: -8.879341125488281
    7. '#' → logprob: -9.129341125488281
    8. 'olog' → logprob: -9.629341125488281
    9. 'ology' → logprob: -9.629341125488281
    10. 'ol' → logprob: -9.879341125488281

Token 230: ' order' (ID: 2569)
  Prédit: 'sort'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sort' → logprob: -0.059223249554634094
    2. ' sort' → logprob: -3.059223175048828
    3. 'order' → logprob: -5.559223175048828
    4. '_sort' → logprob: -5.559223175048828
    5. ' order' → logprob: -6.309223175048828
    6. ' ordering' → logprob: -7.434223175048828
    7. ' sorting' → logprob: -8.434223175048828
    8. 'ordering' → logprob: -9.059223175048828
    9. 'sorting' → logprob: -9.559223175048828
    10. '_order' → logprob: -9.934223175048828

Token 231: ' is' (ID: 382)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'len' → logprob: -1.1854149103164673
    2. ' is' → logprob: -2.3104147911071777
    3. ' has' → logprob: -2.3104147911071777
    4. ' completes' → logprob: -2.6854147911071777
    5. 'length' → logprob: -2.9354147911071777
    6. ' length' → logprob: -3.0604147911071777
    7. ' if' → logprob: -3.1854147911071777
    8. 'complete' → logprob: -3.3104147911071777
    9. ' =' → logprob: -3.4354147911071777
    10. 'if' → logprob: -3.6854147911071777

Token 232: ' complete' (ID: 5533)
  Prédit: 'complete'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'complete' → logprob: -0.21455107629299164
    2. 'valid' → logprob: -1.9645510911941528
    3. ' complete' → logprob: -3.7145509719848633
    4. ' valid' → logprob: -4.339550971984863
    5. 'possible' → logprob: -4.839550971984863
    6. 'len' → logprob: -5.089550971984863
    7. ' possible' → logprob: -7.714550971984863
    8. 'unique' → logprob: -7.714550971984863
    9. 'correct' → logprob: -9.464550971984863
    10. ' len' → logprob: -9.464550971984863

Token 233: '
' (ID: 198)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.0003718046355061233
    2. ' if' → logprob: -8.250371932983398
    3. '
' → logprob: -9.125371932983398
    4. '```' → logprob: -13.625371932983398
    5. 'is' → logprob: -16.0003719329834
    6. 'assert' → logprob: -16.1253719329834
    7. 'print' → logprob: -16.2503719329834
    8. '``' → logprob: -17.1253719329834
    9. 'for' → logprob: -17.6253719329834
    10. '<|end|>' → logprob: -17.8753719329834

Token 234: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.0003020961594302207
    2. ' if' → logprob: -8.1253023147583
    3. 'print' → logprob: -12.6253023147583
    4. '```' → logprob: -13.1253023147583
    5. '
' → logprob: -15.1253023147583
    6. 'is' → logprob: -16.000301361083984
    7. 'assert' → logprob: -16.000301361083984
    8. 'unique' → logprob: -16.500301361083984
    9. 'for' → logprob: -17.625301361083984
    10. 'result' → logprob: -17.625301361083984

Token 235: ' len' (ID: 4631)
  Prédit: ' len'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' len' → logprob: -0.12692862749099731
    2. 'len' → logprob: -2.1269285678863525
    3. '(len' → logprob: -14.751928329467773
    4. ' unique' → logprob: -16.501928329467773
    5. 'unique' → logprob: -18.126928329467773
    6. '	len' → logprob: -18.626928329467773
    7. ' ' → logprob: -18.751928329467773
    8. ' not' → logprob: -19.501928329467773
    9. '[len' → logprob: -20.001928329467773
    10. '=len' → logprob: -20.126928329467773

Token 236: '(res' (ID: 8331)
  Prédit: '(res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(res' → logprob: -4.127333340875339e-06
    2. 'res' → logprob: -12.500003814697266
    3. '(' → logprob: -15.250003814697266
    4. ' (' → logprob: -17.000003814697266
    5. ' res' → logprob: -18.125003814697266
    6. '	res' → logprob: -19.500003814697266
    7. '```' → logprob: -20.250003814697266
    8. '$res' → logprob: -20.625003814697266
    9. '=res' → logprob: -20.750003814697266
    10. '(result' → logprob: -21.500003814697266

Token 237: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.28549855947494507
    2. '!=' → logprob: -1.9104986190795898
    3. ' !=' → logprob: -3.03549861907959
    4. '==' → logprob: -3.91049861907959
    5. '<' → logprob: -4.41049861907959
    6. ')!=' → logprob: -4.53549861907959
    7. ' ==' → logprob: -5.53549861907959
    8. ' <' → logprob: -6.03549861907959
    9. '<n' → logprob: -7.28549861907959
    10. ')==' → logprob: -7.41049861907959

Token 238: ' <' (ID: 464)
  Prédit: '!='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '!=' → logprob: -0.6578994989395142
    2. '<' → logprob: -0.7828994989395142
    3. ' !=' → logprob: -3.9078993797302246
    4. '==' → logprob: -5.782899379730225
    5. ' <' → logprob: -6.782899379730225
    6. '<n' → logprob: -7.782899379730225
    7. ' ==' → logprob: -9.282899856567383
    8. '<len' → logprob: -9.282899856567383
    9. '<int' → logprob: -10.407899856567383
    10. ')!=' → logprob: -12.157899856567383

Token 239: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -7.493430894101039e-05
    2. ' n' → logprob: -9.500075340270996
    3. '	n' → logprob: -20.00007438659668
    4. '   ' → logprob: -21.00007438659668
    5. '
' → logprob: -21.62507438659668
    6. '(n' → logprob: -22.12507438659668
    7. '_n' → logprob: -23.50007438659668
    8. '```' → logprob: -23.75007438659668
    9. ')n' → logprob: -24.25007438659668
    10. ' ' → logprob: -24.75007438659668

Token 240: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.02975292131304741
    2. ':
' → logprob: -3.5297529697418213
    3. ' or' → logprob: -14.529752731323242
    4. '):' → logprob: -14.654752731323242
    5. ':
' → logprob: -15.154752731323242
    6. ':return' → logprob: -15.154752731323242
    7. ' :' → logprob: -15.279752731323242
    8. 'print' → logprob: -15.529752731323242
    9. ' and' → logprob: -16.029752731323242
    10. 'or' → logprob: -16.029752731323242

Token 241: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.033344585448503494
    2. ' print' → logprob: -3.5333445072174072
    3. 'print' → logprob: -5.658344745635986
    4. '
' → logprob: -9.908344268798828
    5. '```' → logprob: -10.158344268798828
    6. '	print' → logprob: -11.908344268798828
    7. '    
' → logprob: -13.783344268798828
    8. '    ' → logprob: -14.158344268798828
    9. '``' → logprob: -14.533344268798828
    10. ' sys' → logprob: -14.783344268798828

Token 242: ' #' (ID: 1069)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.6424955129623413
    2. 'print' → logprob: -0.7674955129623413
    3. '   ' → logprob: -4.642495632171631
    4. '
' → logprob: -9.392495155334473
    5. '```' → logprob: -9.392495155334473
    6. '    ' → logprob: -10.767495155334473
    7. '	print' → logprob: -12.017495155334473
    8. '    
' → logprob: -12.767495155334473
    9. '``' → logprob: -13.017495155334473
    10. ' unique' → logprob: -13.017495155334473

Token 243: ' This' (ID: 1328)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0919903963804245
    2. ' print' → logprob: -2.4669904708862305
    3. '   ' → logprob: -5.8419904708862305
    4. '```' → logprob: -10.84199047088623
    5. '#' → logprob: -10.96699047088623
    6. '
' → logprob: -11.09199047088623
    7. '    ' → logprob: -11.34199047088623
    8. 'unique' → logprob: -11.46699047088623
    9. ' ' → logprob: -11.59199047088623
    10. ' unique' → logprob: -12.09199047088623

Token 244: ' means' (ID: 4748)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.343481183052063
    2. ' means' → logprob: -1.968481183052063
    3. 'means' → logprob: -3.2184810638427734
    4. ' print' → logprob: -3.4684810638427734
    5. ':' → logprob: -3.7184810638427734
    6. ' code' → logprob: -3.8434810638427734
    7. ' indicates' → logprob: -4.843481063842773
    8. '```' → logprob: -5.093481063842773
    9. ' implies' → logprob: -5.343481063842773
    10. ' is' → logprob: -5.843481063842773

Token 245: ' input' (ID: 3422)
  Prédit: ' there'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' there' → logprob: -0.311549574136734
    2. ' print' → logprob: -1.9365495443344116
    3. 'print' → logprob: -2.311549663543701
    4. 'there' → logprob: -4.686549663543701
    5. ' cycle' → logprob: -5.311549663543701
    6. ' the' → logprob: -5.436549663543701
    7. ' there's' → logprob: -5.686549663543701
    8. ' a' → logprob: -6.686549663543701
    9. ' graph' → logprob: -7.561549663543701
    10. 'cycle' → logprob: -8.936549186706543

Token 246: ' contradict' (ID: 79993)
  Prédit: ' has'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' has' → logprob: -1.243923544883728
    2. ' is' → logprob: -1.743923544883728
    3. ' graph' → logprob: -1.868923544883728
    4. 'graph' → logprob: -1.993923544883728
    5. 'has' → logprob: -1.993923544883728
    6. 'is' → logprob: -2.8689236640930176
    7. ' was' → logprob: -3.8689236640930176
    8. ' contains' → logprob: -4.368923664093018
    9. '
' → logprob: -5.493923664093018
    10. ' data' → logprob: -5.618923664093018

Token 247: 's' (ID: 82)
  Prédit: 's'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -9.849109119386412e-06
    2. 'ions' → logprob: -12.250009536743164
    3. 'ed' → logprob: -13.375009536743164
    4. ''s' → logprob: -14.000009536743164
    5. 'ts' → logprob: -14.125009536743164
    6. 'ory' → logprob: -14.250009536743164
    7. '[s' → logprob: -14.625009536743164
    8. '(s' → logprob: -15.125009536743164
    9. 'ion' → logprob: -15.750009536743164
    10. 'icts' → logprob: -15.875009536743164

Token 248: ' info' (ID: 5377)
  Prédit: ' the'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' the' → logprob: -0.1756037324666977
    2. 'the' → logprob: -2.1756036281585693
    3. '"' → logprob: -4.050603866577148
    4. ' a' → logprob: -4.300603866577148
    5. 'a' → logprob: -5.425603866577148
    6. ' constraints' → logprob: -5.550603866577148
    7. ' "' → logprob: -6.050603866577148
    8. 'constraints' → logprob: -7.300603866577148
    9. ' assumptions' → logprob: -7.550603866577148
    10. ' no' → logprob: -7.675603866577148

Token 249: ',' (ID: 11)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.7615833878517151
    2. ' about' → logprob: -1.8865833282470703
    3. '#' → logprob: -2.0115833282470703
    4. 's' → logprob: -2.6365833282470703
    5. ',' → logprob: -3.0115833282470703
    6. '   ' → logprob: -3.1365833282470703
    7. ' or' → logprob: -3.2615833282470703
    8. ' that' → logprob: -5.01158332824707
    9. ' print' → logprob: -5.13658332824707
    10. '
' → logprob: -5.38658332824707

Token 250: ' but' (ID: 889)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.2754729688167572
    2. 'print' → logprob: -1.7754729986190796
    3. '   ' → logprob: -2.65047287940979
    4. ' so' → logprob: -8.650472640991211
    5. '```' → logprob: -9.025472640991211
    6. '
' → logprob: -9.525472640991211
    7. '#' → logprob: -9.775472640991211
    8. '    ' → logprob: -9.900472640991211
    9. ' ' → logprob: -9.900472640991211
    10. ' or' → logprob: -10.150472640991211

Token 251: ' problem' (ID: 4792)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.34469887614250183
    2. ' print' → logprob: -1.4696989059448242
    3. '#' → logprob: -3.094698905944824
    4. '   ' → logprob: -4.719698905944824
    5. ' #' → logprob: -6.094698905944824
    6. 'pass' → logprob: -6.719698905944824
    7. '
' → logprob: -6.969698905944824
    8. ' unique' → logprob: -8.094698905944824
    9. ' pass' → logprob: -8.219698905944824
    10. ' we' → logprob: -8.219698905944824

Token 252: ' does' (ID: 2226)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.781428337097168
    2. ' is' → logprob: -1.906428337097168
    3. '```' → logprob: -1.906428337097168
    4. ' continues' → logprob: -2.031428337097168
    5. 'does' → logprob: -2.906428337097168
    6. 'is' → logprob: -3.031428337097168
    7. ':' → logprob: -3.156428337097168
    8. '#' → logprob: -3.906428337097168
    9. 'continue' → logprob: -4.031428337097168
    10. ' does' → logprob: -4.031428337097168

Token 253: ' not' (ID: 625)
  Prédit: 'not'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'not' → logprob: -0.0024881421122699976
    2. ' not' → logprob: -6.002488136291504
    3. '```' → logprob: -12.502488136291504
    4. 'n't' → logprob: -12.877488136291504
    5. '#' → logprob: -13.377488136291504
    6. '_not' → logprob: -13.502488136291504
    7. '   ' → logprob: -13.877488136291504
    8. 'continue' → logprob: -14.252488136291504
    9. '...' → logprob: -14.377488136291504
    10. 'pass' → logprob: -15.002488136291504

Token 254: ' specify' (ID: 27018)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.7246550917625427
    2. 'require' → logprob: -1.4746551513671875
    3. ' require' → logprob: -2.3496551513671875
    4. 'output' → logprob: -3.5996551513671875
    5. ' print' → logprob: -3.8496551513671875
    6. 'gu' → logprob: -4.2246551513671875
    7. 'raise' → logprob: -4.2246551513671875
    8. 'ask' → logprob: -4.4746551513671875
    9. 'provide' → logprob: -4.5996551513671875
    10. 'consider' → logprob: -4.5996551513671875

Token 255: ' what' (ID: 1412)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.316531240940094
    2. '   ' → logprob: -1.9415311813354492
    3. 'pass' → logprob: -2.441531181335449
    4. ' print' → logprob: -4.066531181335449
    5. '
' → logprob: -5.066531181335449
    6. '```' → logprob: -5.191531181335449
    7. ' pass' → logprob: -5.691531181335449
    8. 'output' → logprob: -6.316531181335449
    9. 'continue' → logprob: -6.691531181335449
    10. 'exit' → logprob: -6.941531181335449

Token 256: ' then' (ID: 1815)
  Prédit: ' to'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' to' → logprob: -0.22539804875850677
    2. 'to' → logprob: -2.100398063659668
    3. 'print' → logprob: -2.975398063659668
    4. 'output' → logprob: -4.600398063659668
    5. '   ' → logprob: -4.725398063659668
    6. '#' → logprob: -5.475398063659668
    7. 'do' → logprob: -6.225398063659668
    8. ' output' → logprob: -6.350398063659668
    9. ' print' → logprob: -7.350398063659668
    10. '_to' → logprob: -9.100398063659668

Token 257: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.26361843943595886
    2. 'print' → logprob: -1.7636184692382812
    3. 'pass' → logprob: -3.6386184692382812
    4. ' print' → logprob: -3.7636184692382812
    5. ' pass' → logprob: -4.763618469238281
    6. '#' → logprob: -6.888618469238281
    7. ':' → logprob: -7.763618469238281
    8. '
' → logprob: -8.388618469238281
    9. '```' → logprob: -8.638618469238281
    10. ',' → logprob: -9.638618469238281

Token 258: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.057252902537584305
    2. 'print' → logprob: -2.932252883911133
    3. ' print' → logprob: -6.432252883911133
    4. 'pass' → logprob: -8.057252883911133
    5. '```' → logprob: -8.557252883911133
    6. ' pass' → logprob: -9.432252883911133
    7. 'raise' → logprob: -9.432252883911133
    8. '#' → logprob: -10.432252883911133
    9. ' raise' → logprob: -10.932252883911133
    10. '
' → logprob: -11.182252883911133

Token 259: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.06355265527963638
    2. 'pass' → logprob: -3.0635526180267334
    3. ' print' → logprob: -4.8135528564453125
    4. '   ' → logprob: -5.5635528564453125
    5. ' pass' → logprob: -5.9385528564453125
    6. '
' → logprob: -9.438552856445312
    7. 'sys' → logprob: -9.938552856445312
    8. 'exit' → logprob: -10.063552856445312
    9. 'unique' → logprob: -10.438552856445312
    10. '```' → logprob: -11.063552856445312

Token 260: ' Still' (ID: 25758)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.03195808455348015
    2. ' print' → logprob: -3.7819581031799316
    3. 'pass' → logprob: -4.906958103179932
    4. ' pass' → logprob: -6.906958103179932
    5. 'sys' → logprob: -9.406957626342773
    6. '   ' → logprob: -9.656957626342773
    7. '#' → logprob: -10.156957626342773
    8. 'unique' → logprob: -10.531957626342773
    9. ' sys' → logprob: -10.781957626342773
    10. 'exit' → logprob: -11.156957626342773

Token 261: ',' (ID: 11)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.26187369227409363
    2. ' print' → logprob: -1.636873722076416
    3. '   ' → logprob: -3.636873722076416
    4. ',' → logprob: -4.886873722076416
    5. ':' → logprob: -7.386873722076416
    6. 'pass' → logprob: -8.136873245239258
    7. '
' → logprob: -8.636873245239258
    8. '#' → logprob: -8.761873245239258
    9. ' unique' → logprob: -9.136873245239258
    10. ' pass' → logprob: -9.261873245239258

Token 262: ' output' (ID: 4733)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.04140644147992134
    2. ' print' → logprob: -3.2914063930511475
    3. '   ' → logprob: -5.791406631469727
    4. 'pass' → logprob: -8.666406631469727
    5. 'unique' → logprob: -10.041406631469727
    6. ' unique' → logprob: -10.291406631469727
    7. ' pass' → logprob: -10.916406631469727
    8. '```' → logprob: -11.541406631469727
    9. '#' → logprob: -11.666406631469727
    10. 'res' → logprob: -12.291406631469727

Token 263: ' any' (ID: 1062)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.6839313507080078
    2. '-' → logprob: -1.4339313507080078
    3. '0' → logprob: -1.8089313507080078
    4. '"' → logprob: -2.808931350708008
    5. '"No' → logprob: -4.683931350708008
    6. 'im' → logprob: -5.558931350708008
    7. 'unique' → logprob: -6.058931350708008
    8. '   ' → logprob: -6.183931350708008
    9. 'No' → logprob: -6.183931350708008
    10. 'Impossible' → logprob: -6.433931350708008

Token 264: ' order' (ID: 2569)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.076839379966259
    2. 'res' → logprob: -3.0768394470214844
    3. 'for' → logprob: -4.451839447021484
    4. '
' → logprob: -5.201839447021484
    5. '   ' → logprob: -5.451839447021484
    6. '(res' → logprob: -6.451839447021484
    7. '```' → logprob: -6.951839447021484
    8. ' print' → logprob: -7.326839447021484
    9. '()
' → logprob: -7.701839447021484
    10. ' res' → logprob: -7.951839447021484

Token 265: ' and' (ID: 326)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.02148403972387314
    2. 'for' → logprob: -4.021483898162842
    3. 'res' → logprob: -6.396483898162842
    4. '
' → logprob: -7.396483898162842
    5. '   ' → logprob: -7.521483898162842
    6. ' for' → logprob: -9.021484375
    7. ',' → logprob: -9.396484375
    8. 'else' → logprob: -9.646484375
    9. ' print' → logprob: -9.646484375
    10. '```' → logprob: -10.146484375

Token 266: ' ' (ID: 220)
  Prédit: 'exit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'exit' → logprob: -0.23512475192546844
    2. 'print' → logprob: -1.9851247072219849
    3. 'unique' → logprob: -3.4851248264312744
    4. 'sys' → logprob: -3.4851248264312744
    5. ' exit' → logprob: -4.985124588012695
    6. 'pass' → logprob: -6.860124588012695
    7. '#' → logprob: -7.610124588012695
    8. 'quit' → logprob: -7.610124588012695
    9. ' print' → logprob: -7.735124588012695
    10. 'import' → logprob: -7.860124588012695

Token 267: '0' (ID: 15)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.7055830955505371
    2. 'exit' → logprob: -0.9555830955505371
    3. 'unique' → logprob: -2.705583095550537
    4. 'sys' → logprob: -2.955583095550537
    5. '
' → logprob: -7.080583095550537
    6. '#' → logprob: -7.580583095550537
    7. 'quit' → logprob: -7.830583095550537
    8. 'import' → logprob: -8.455583572387695
    9. ' exit' → logprob: -8.830583572387695
    10. '   ' → logprob: -8.955583572387695

Token 268: ' to' (ID: 316)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0029716379940509796
    2. '
' → logprob: -6.127971649169922
    3. '```' → logprob: -7.377971649169922
    4. '   ' → logprob: -9.752971649169922
    5. '``' → logprob: -9.752971649169922
    6. ' print' → logprob: -10.752971649169922
    7. '`
' → logprob: -12.377971649169922
    8. '0' → logprob: -12.502971649169922
    9. 'for' → logprob: -12.877971649169922
    10. '    
' → logprob: -13.127971649169922

Token 269: ' satisfy' (ID: 35441)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.039059240370988846
    2. 'sys' → logprob: -4.539059162139893
    3. 'exit' → logprob: -4.789059162139893
    4. 'stdout' → logprob: -5.289059162139893
    5. '0' → logprob: -5.539059162139893
    6. '   ' → logprob: -6.039059162139893
    7. 'ind' → logprob: -6.789059162139893
    8. ' print' → logprob: -6.914059162139893
    9. ' indicate' → logprob: -7.164059162139893
    10. ' ' → logprob: -7.289059162139893

Token 270: ' format' (ID: 6011)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.010036191903054714
    2. ' print' → logprob: -5.385035991668701
    3. '```' → logprob: -6.135035991668701
    4. '``' → logprob: -6.385035991668701
    5. 'for' → logprob: -7.635035991668701
    6. '
' → logprob: -7.760035991668701
    7. '0' → logprob: -8.51003646850586
    8. '   ' → logprob: -8.63503646850586
    9. '`
' → logprob: -10.01003646850586
    10. '"""
' → logprob: -10.01003646850586

Token 271: ' (' (ID: 350)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0031818747520446777
    2. '```' → logprob: -6.5031819343566895
    3. '
' → logprob: -6.7531819343566895
    4. '   ' → logprob: -8.378181457519531
    5. '``' → logprob: -8.628181457519531
    6. 'for' → logprob: -10.253181457519531
    7. ' print' → logprob: -10.628181457519531
    8. 'res' → logprob: -11.003181457519531
    9. '    
' → logprob: -11.878181457519531
    10. '`
' → logprob: -12.128181457519531

Token 272: 'or' (ID: 267)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.005383399315178394
    2. '0' → logprob: -6.130383491516113
    3. '   ' → logprob: -6.380383491516113
    4. ' print' → logprob: -7.505383491516113
    5. ')
' → logprob: -8.005383491516113
    6. '```' → logprob: -8.130383491516113
    7. '``' → logprob: -8.380383491516113
    8. ')' → logprob: -10.380383491516113
    9. '
' → logprob: -11.380383491516113
    10. 'for' → logprob: -11.755383491516113

Token 273: ' could' (ID: 2023)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -1.0838121175765991
    2. 'exit' → logprob: -1.3338121175765991
    3. ' exit' → logprob: -2.2088122367858887
    4. '0' → logprob: -2.2088122367858887
    5. 'continue' → logprob: -2.9588122367858887
    6. ' continue' → logprob: -3.0838122367858887
    7. ' print' → logprob: -3.0838122367858887
    8. 'sys' → logprob: -4.958812236785889
    9. '```' → logprob: -5.083812236785889
    10. 'pass' → logprob: -5.583812236785889

Token 274: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.09836464375257492
    2. 'exit' → logprob: -2.9733645915985107
    3. ' print' → logprob: -3.9733645915985107
    4. 'raise' → logprob: -4.97336483001709
    5. '```' → logprob: -5.34836483001709
    6. ' exit' → logprob: -5.47336483001709
    7. '#' → logprob: -6.59836483001709
    8. 'pass' → logprob: -6.84836483001709
    9. '   ' → logprob: -6.84836483001709
    10. 'output' → logprob: -7.09836483001709

Token 275: ' nothing' (ID: 6939)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.004699495621025562
    2. ' ' → logprob: -5.75469970703125
    3. '``' → logprob: -7.50469970703125
    4. '```' → logprob: -7.87969970703125
    5. '
' → logprob: -8.75469970703125
    6. '`' → logprob: -8.87969970703125
    7. '"' → logprob: -9.00469970703125
    8. '   ' → logprob: -10.12969970703125
    9. '-' → logprob: -10.37969970703125
    10. '\n' → logprob: -11.00469970703125

Token 276: ' or' (ID: 503)
  Prédit: ')
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.9440839886665344
    2. 'print' → logprob: -1.1940839290618896
    3. ')' → logprob: -1.3190839290618896
    4. '0' → logprob: -3.5690839290618896
    5. '   ' → logprob: -4.944084167480469
    6. ',' → logprob: -5.694084167480469
    7. 'res' → logprob: -8.069084167480469
    8. 'n' → logprob: -8.194084167480469
    9. ' or' → logprob: -8.569084167480469
    10. '1' → logprob: -8.944084167480469

Token 277: ' error' (ID: 2915)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.306288480758667
    2. 'print' → logprob: -2.431288480758667
    3. 'exit' → logprob: -2.681288480758667
    4. '-' → logprob: -3.306288480758667
    5. ' ' → logprob: -4.056288719177246
    6. ' exit' → logprob: -4.181288719177246
    7. ' print' → logprob: -4.431288719177246
    8. 'pass' → logprob: -5.056288719177246
    9. '1' → logprob: -5.431288719177246
    10. 'raise' → logprob: -5.681288719177246

Token 278: ')
' (ID: 446)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.8078705072402954
    2. ')' → logprob: -0.9328705072402954
    3. ')
' → logprob: -2.057870388031006
    4. 'print' → logprob: -3.557870388031006
    5. '1' → logprob: -6.182870388031006
    6. '   ' → logprob: -6.682870388031006
    7. ',' → logprob: -7.807870388031006
    8. '#' → logprob: -8.932870864868164
    9. '):
' → logprob: -9.182870864868164
    10. 'code' → logprob: -9.307870864868164

Token 279: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.00034583290107548237
    2. '```' → logprob: -8.500346183776855
    3. '
' → logprob: -9.250346183776855
    4. '``' → logprob: -10.875346183776855
    5. '   ' → logprob: -11.125346183776855
    6. 'for' → logprob: -11.750346183776855
    7. ' print' → logprob: -13.000346183776855
    8. '    
' → logprob: -14.375346183776855
    9. '0' → logprob: -14.375346183776855
    10. '`
' → logprob: -15.500346183776855

Token 280: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -7.958325295476243e-05
    2. ' print' → logprob: -9.875079154968262
    3. '   ' → logprob: -11.000079154968262
    4. '```' → logprob: -11.875079154968262
    5. '
' → logprob: -13.125079154968262
    6. 'for' → logprob: -13.625079154968262
    7. '0' → logprob: -14.500079154968262
    8. '``' → logprob: -14.625079154968262
    9. '	print' → logprob: -16.625080108642578
    10. '    
' → logprob: -17.500080108642578

Token 281: ' But' (ID: 3072)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.000738038623239845
    2. ' print' → logprob: -7.250738143920898
    3. '```' → logprob: -10.875738143920898
    4. '   ' → logprob: -12.250738143920898
    5. '
' → logprob: -13.500738143920898
    6. 'for' → logprob: -13.625738143920898
    7. '``' → logprob: -13.625738143920898
    8. '#' → logprob: -15.875738143920898
    9. '#print' → logprob: -16.3757381439209
    10. ' for' → logprob: -16.7507381439209

Token 282: ' problem' (ID: 4792)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.004640522412955761
    2. ' print' → logprob: -5.379640579223633
    3. '
' → logprob: -12.254640579223633
    4. '   ' → logprob: -12.379640579223633
    5. '```' → logprob: -12.379640579223633
    6. 'for' → logprob: -12.504640579223633
    7. ' for' → logprob: -13.254640579223633
    8. '#' → logprob: -14.254640579223633
    9. 'unique' → logprob: -15.379640579223633
    10. 'pass' → logprob: -15.879640579223633

Token 283: ' assumes' (ID: 53395)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.05014459043741226
    2. ' print' → logprob: -4.425144672393799
    3. ':' → logprob: -5.050144672393799
    4. '   ' → logprob: -5.050144672393799
    5. '```' → logprob: -5.550144672393799
    6. '#' → logprob: -5.925144672393799
    7. 'output' → logprob: -6.175144672393799
    8. 'res' → logprob: -6.425144672393799
    9. ' is' → logprob: -6.425144672393799
    10. 'import' → logprob: -6.550144672393799

Token 284: ' consistent' (ID: 20434)
  Prédit: 'the'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'the' → logprob: -0.7551769018173218
    2. 'acy' → logprob: -1.1301769018173218
    3. 'no' → logprob: -2.8801770210266113
    4. 'input' → logprob: -3.0051770210266113
    5. ' ac' → logprob: -4.005177021026611
    6. 'a' → logprob: -4.130177021026611
    7. ' the' → logprob: -4.505177021026611
    8. 'that' → logprob: -4.505177021026611
    9. ' no' → logprob: -4.755177021026611
    10. 'D' → logprob: -4.880177021026611

Token 285: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.6397218704223633
    2. 'data' → logprob: -1.6397218704223633
    3. 'print' → logprob: -2.0147218704223633
    4. ' data' → logprob: -3.7647218704223633
    5. 'graph' → logprob: -3.8897218704223633
    6. 'top' → logprob: -4.139721870422363
    7. ' input' → logprob: -4.264721870422363
    8. 'inputs' → logprob: -4.389721870422363
    9. '#' → logprob: -4.514721870422363
    10. 'info' → logprob: -4.639721870422363

Token 286: ',' (ID: 11)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.010532350279390812
    2. '
' → logprob: -5.510532379150391
    3. '   ' → logprob: -6.510532379150391
    4. 'else' → logprob: -6.635532379150391
    5. ' print' → logprob: -6.760532379150391
    6. ':
' → logprob: -7.010532379150391
    7. 'for' → logprob: -7.260532379150391
    8. '```' → logprob: -8.26053237915039
    9. 'if' → logprob: -9.01053237915039
    10. '#' → logprob: -9.63553237915039

Token 287: ' so' (ID: 813)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.005413165781646967
    2. ' print' → logprob: -5.505413055419922
    3. 'pass' → logprob: -7.880413055419922
    4. '#' → logprob: -8.005413055419922
    5. '   ' → logprob: -8.630413055419922
    6. 'unique' → logprob: -9.005413055419922
    7. ' pass' → logprob: -9.255413055419922
    8. ' so' → logprob: -9.630413055419922
    9. '
' → logprob: -10.005413055419922
    10. 'res' → logprob: -10.380413055419922

Token 288: ' no' (ID: 860)
  Prédit: 'pass'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'pass' → logprob: -0.0635194331407547
    2. ' pass' → logprob: -3.4385194778442383
    3. 'print' → logprob: -3.5635194778442383
    4. 'exit' → logprob: -7.563519477844238
    5. 'res' → logprob: -8.563519477844238
    6. '#' → logprob: -8.938519477844238
    7. '   ' → logprob: -9.063519477844238
    8. 'unique' → logprob: -10.063519477844238
    9. ' print' → logprob: -10.563519477844238
    10. '```' → logprob: -10.563519477844238

Token 289: ' cycle' (ID: 15839)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'f' → logprob: -1.1012624502182007
    2. 'need' → logprob: -1.4762624502182007
    3. 'cycles' → logprob: -1.9762624502182007
    4. 'cycle' → logprob: -2.1012625694274902
    5. 'else' → logprob: -2.6012625694274902
    6. 'code' → logprob: -3.3512625694274902
    7. 'output' → logprob: -3.7262625694274902
    8. 'continue' → logprob: -4.35126256942749
    9. 'break' → logprob: -4.97626256942749
    10. 'more' → logprob: -5.10126256942749

Token 290: ' expected' (ID: 5930)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.02375689521431923
    2. 'else' → logprob: -4.523756980895996
    3. '
' → logprob: -5.398756980895996
    4. '   ' → logprob: -5.648756980895996
    5. ' print' → logprob: -6.773756980895996
    6. 's' → logprob: -7.273756980895996
    7. 'res' → logprob: -7.398756980895996
    8. ':
' → logprob: -7.523756980895996
    9. 'n' → logprob: -8.023756980895996
    10. '#' → logprob: -8.148756980895996

Token 291: '
' (ID: 198)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.001342850853689015
    2. 'else' → logprob: -7.2513427734375
    3. '
' → logprob: -7.7513427734375
    4. '```' → logprob: -9.7513427734375
    5. 'for' → logprob: -10.3763427734375
    6. '   ' → logprob: -10.3763427734375
    7. '#' → logprob: -10.6263427734375
    8. ' print' → logprob: -11.2513427734375
    9. 'if' → logprob: -11.6263427734375
    10. 'res' → logprob: -11.6263427734375

Token 292: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0024100157897919416
    2. 'for' → logprob: -6.252409934997559
    3. '```' → logprob: -7.877409934997559
    4. ' print' → logprob: -10.127409934997559
    5. '``' → logprob: -10.877409934997559
    6. '
' → logprob: -11.002409934997559
    7. 'if' → logprob: -12.127409934997559
    8. '   ' → logprob: -12.502409934997559
    9. 'res' → logprob: -12.627409934997559
    10. ' for' → logprob: -12.627409934997559

Token 293: ' pass' (ID: 1853)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0006434533279389143
    2. ' print' → logprob: -7.500643253326416
    3. '   ' → logprob: -9.875643730163574
    4. 'res' → logprob: -11.375643730163574
    5. 'pass' (adapté à ' pass') → logprob: -11.500643730163574
    6. 'for' → logprob: -11.750643730163574
    7. '
' → logprob: -12.375643730163574
    8. '```' → logprob: -13.000643730163574
    9. 'unique' → logprob: -13.375643730163574
    10. ' for' → logprob: -15.500643730163574

Token 294: '

' (ID: 279)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.11347850412130356
    2. 'else' → logprob: -2.238478422164917
    3. 'elif' → logprob: -7.863478660583496
    4. 'if' → logprob: -9.113478660583496
    5. 'for' → logprob: -9.863478660583496
    6. ' else' → logprob: -10.113478660583496
    7. '```' → logprob: -10.988478660583496
    8. '
' → logprob: -11.363478660583496
    9. ' print' → logprob: -11.488478660583496
    10. '    
' → logprob: -11.988478660583496

Token 295: '#' (ID: 2)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.028130115941166878
    2. 'if' → logprob: -3.653130054473877
    3. 'for' → logprob: -6.528130054473877
    4. '
' → logprob: -9.528130531311035
    5. '#' → logprob: -9.903130531311035
    6. 'answer' → logprob: -10.528130531311035
    7. 'elif' → logprob: -10.778130531311035
    8. 'result' → logprob: -11.153130531311035
    9. 'unique' → logprob: -11.153130531311035
    10. 'ans' → logprob: -11.153130531311035

Token 296: ' The' (ID: 623)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.4822090268135071
    2. 'if' → logprob: -0.9822090268135071
    3. 'for' → logprob: -4.857209205627441
    4. 'unique' → logprob: -9.607209205627441
    5. 'ans' → logprob: -9.732209205627441
    6. 'answer' → logprob: -10.107209205627441
    7. 'result' → logprob: -10.482209205627441
    8. '#' → logprob: -11.232209205627441
    9. 'added' → logprob: -11.232209205627441
    10. ' if' → logprob: -11.482209205627441

Token 297: ' problem' (ID: 4792)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.19052621722221375
    2. ' if' → logprob: -2.440526247024536
    3. 'print' → logprob: -3.440526247024536
    4. 'unique' → logprob: -4.190526008605957
    5. ' unique' → logprob: -4.440526008605957
    6. 'len' → logprob: -5.190526008605957
    7. '#' → logprob: -5.440526008605957
    8. ' print' → logprob: -5.940526008605957
    9. 'res' → logprob: -6.065526008605957
    10. ' is' → logprob: -6.065526008605957

Token 298: ' expects' (ID: 47384)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.4854806661605835
    2. 'is' → logprob: -1.9854806661605835
    3. ' is' → logprob: -2.860480785369873
    4. ':' → logprob: -2.985480785369873
    5. 'if' → logprob: -3.235480785369873
    6. 'print' → logprob: -4.110480785369873
    7. ' wants' → logprob: -4.360480785369873
    8. 'asks' → logprob: -4.860480785369873
    9. ' now' → logprob: -5.110480785369873
    10. 'requires' → logprob: -5.360480785369873

Token 299: ' order' (ID: 2569)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.0032448475249111652
    2. 'for' → logprob: -6.128244876861572
    3. ' print' → logprob: -7.503244876861572
    4. 'if' → logprob: -7.878244876861572
    5. '   ' → logprob: -10.753244400024414
    6. ' for' → logprob: -11.003244400024414
    7. '#' → logprob: -11.128244400024414
    8. 'len' → logprob: -11.128244400024414
    9. 'res' → logprob: -11.503244400024414
    10. 'output' → logprob: -11.878244400024414

Token 300: ' by' (ID: 656)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.40466153621673584
    2. ' =' → logprob: -1.4046615362167358
    3. 'for' → logprob: -3.1546616554260254
    4. ',' → logprob: -4.529661655426025
    5. 'if' → logprob: -4.779661655426025
    6. '=' → logprob: -4.904661655426025
    7. ' for' → logprob: -5.529661655426025
    8. ' and' → logprob: -5.654661655426025
    9. '
' → logprob: -6.529661655426025
    10. 'res' → logprob: -6.904661655426025

Token 301: ' ranks' (ID: 40642)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.24432113766670227
    2. 'res' → logprob: -2.49432110786438
    3. '"' → logprob: -3.74432110786438
    4. '1' → logprob: -4.119321346282959
    5. 'len' → logprob: -4.244321346282959
    6. 'unique' → logprob: -4.369321346282959
    7. 'space' → logprob: -4.369321346282959
    8. ''' → logprob: -4.619321346282959
    9. 'the' → logprob: -5.619321346282959
    10. ' print' → logprob: -5.744321346282959

Token 302: ' from' (ID: 591)
  Prédit: 'rank'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'rank' → logprob: -0.17855171859264374
    2. 'r' → logprob: -2.92855167388916
    3. 'res' → logprob: -3.55355167388916
    4. 'pos' → logprob: -3.67855167388916
    5. 'if' → logprob: -3.80355167388916
    6. 'order' → logprob: -4.30355167388916
    7. 'print' → logprob: -4.42855167388916
    8. 'for' → logprob: -6.30355167388916
    9. 'positions' → logprob: -6.42855167388916
    10. 'position' → logprob: -6.55355167388916

Token 303: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.02532583847641945
    2. ' ' → logprob: -4.525325775146484
    3. 'lowest' → logprob: -5.275325775146484
    4. 'highest' → logprob: -5.900325775146484
    5. 'top' → logprob: -6.400325775146484
    6. 'res' → logprob: -6.775325775146484
    7. '0' → logprob: -7.025325775146484
    8. 'the' → logprob: -7.650325775146484
    9. 'len' → logprob: -7.775325775146484
    10. 'best' → logprob: -8.025325775146484

Token 304: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.014330153353512287
    2. 'lowest' → logprob: -5.2643303871154785
    3. 'n' → logprob: -6.3893303871154785
    4. 'len' → logprob: -6.5143303871154785
    5. 'highest' → logprob: -6.5143303871154785
    6. ' ' → logprob: -6.8893303871154785
    7. 'top' → logprob: -6.8893303871154785
    8. 'res' → logprob: -7.1393303871154785
    9. '0' → logprob: -7.5143303871154785
    10. 'the' → logprob: -8.63932991027832

Token 305: ' to' (ID: 316)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.924741268157959
    2. 'rank' → logprob: -1.549741268157959
    3. 'if' → logprob: -1.799741268157959
    4. 'r' → logprob: -2.424741268157959
    5. 'for' → logprob: -2.424741268157959
    6. 'order' → logprob: -3.549741268157959
    7. '
' → logprob: -5.049741268157959
    8. 'res' → logprob: -5.174741268157959
    9. 'positions' → logprob: -5.924741268157959
    10. 'pos' → logprob: -6.674741268157959

Token 306: ' n' (ID: 297)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.0006308287265710533
    2. ' n' → logprob: -7.375630855560303
    3. 'len' → logprob: -13.250630378723145
    4. '10' → logprob: -13.625630378723145
    5. 'res' → logprob: -14.375630378723145
    6. '
' → logprob: -16.00063133239746
    7. ' ' → logprob: -16.25063133239746
    8. '_n' → logprob: -16.50063133239746
    9. '1' → logprob: -16.62563133239746
    10. '0' → logprob: -16.75063133239746

Token 307: '.
' (ID: 558)
  Prédit: 'rank'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'rank' → logprob: -0.31927937269210815
    2. 'pos' → logprob: -2.319279432296753
    3. 'if' → logprob: -2.694279432296753
    4. 'r' → logprob: -3.319279432296753
    5. 'for' → logprob: -3.444279432296753
    6. 'order' → logprob: -4.069279193878174
    7. 'position' → logprob: -4.944279193878174
    8. 'print' → logprob: -5.194279193878174
    9. 'positions' → logprob: -5.194279193878174
    10. 'ranking' → logprob: -6.319279193878174

Token 308: '#' (ID: 2)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.1023889780044556
    2. 'print' → logprob: -1.2273889780044556
    3. 'rank' → logprob: -1.4773889780044556
    4. 'if' → logprob: -2.977388858795166
    5. 'pos' → logprob: -3.352388858795166
    6. 'r' → logprob: -3.352388858795166
    7. 'order' → logprob: -4.852388858795166
    8. 'position' → logprob: -5.352388858795166
    9. 'positions' → logprob: -5.352388858795166
    10. 'ans' → logprob: -6.102388858795166

Token 309: ' According' (ID: 16344)
  Prédit: 'rank'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'rank' → logprob: -0.46736815571784973
    2. 'pos' → logprob: -1.9673681259155273
    3. 'for' → logprob: -2.5923681259155273
    4. 'r' → logprob: -2.9673681259155273
    5. 'print' → logprob: -3.0923681259155273
    6. 'if' → logprob: -4.217368125915527
    7. 'order' → logprob: -4.217368125915527
    8. 'position' → logprob: -4.717368125915527
    9. 'ans' → logprob: -5.342368125915527
    10. 'positions' → logprob: -5.342368125915527

Token 310: ' to' (ID: 316)
  Prédit: 'to'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'to' → logprob: -0.23483550548553467
    2. ' to' → logprob: -1.6098355054855347
    3. '_to' → logprob: -4.734835624694824
    4. '=' → logprob: -7.734835624694824
    5. ' =' → logprob: -9.484835624694824
    6. '#' → logprob: -10.109835624694824
    7. 'import' → logprob: -11.609835624694824
    8. '_' → logprob: -12.109835624694824
    9. 't' → logprob: -12.484835624694824
    10. 'for' → logprob: -12.484835624694824

Token 311: ' the' (ID: 290)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.3292766213417053
    2. 'res' → logprob: -2.0792765617370605
    3. 'unique' → logprob: -2.3292765617370605
    4. ' len' → logprob: -3.5792765617370605
    5. 'the' → logprob: -4.3292765617370605
    6. ' unique' → logprob: -5.2042765617370605
    7. '#' → logprob: -5.7042765617370605
    8. ' res' → logprob: -6.2042765617370605
    9. ' the' → logprob: -6.3292765617370605
    10. '"' → logprob: -6.8292765617370605

Token 312: ' problem' (ID: 4792)
  Prédit: 'top'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'top' → logprob: -0.697374165058136
    2. 'problem' → logprob: -1.1973741054534912
    3. 'unique' → logprob: -2.822374105453491
    4. 'code' → logprob: -2.947374105453491
    5. 'res' → logprob: -3.822374105453491
    6. 'previous' → logprob: -3.947374105453491
    7. 'comment' → logprob: -4.44737434387207
    8. 'current' → logprob: -5.32237434387207
    9. 'logic' → logprob: -5.44737434387207
    10. 'comments' → logprob: -5.69737434387207

Token 313: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.8552088141441345
    2. 'res' → logprob: -1.8552088737487793
    3. 'print' → logprob: -1.8552088737487793
    4. 'order' → logprob: -2.4802088737487793
    5. 'if' → logprob: -2.8552088737487793
    6. '#' → logprob: -2.9802088737487793
    7. 'r' → logprob: -4.230208873748779
    8. 'for' → logprob: -4.230208873748779
    9. '_order' → logprob: -4.605208873748779
    10. 'rank' → logprob: -4.730208873748779

Token 314: ' the' (ID: 290)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.9267091155052185
    2. 'print' → logprob: -1.1767091751098633
    3. 'for' → logprob: -1.6767091751098633
    4. ' for' → logprob: -3.3017091751098633
    5. ' if' → logprob: -3.5517091751098633
    6. 'rank' → logprob: -3.6767091751098633
    7. ' print' → logprob: -5.176709175109863
    8. 'res' → logprob: -5.426709175109863
    9. 'order' → logprob: -6.676709175109863
    10. 'unique' → logprob: -7.051709175109863

Token 315: ' team' (ID: 3214)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.44687342643737793
    2. 'print' → logprob: -1.696873426437378
    3. 'unique' → logprob: -2.446873426437378
    4. ' if' → logprob: -3.071873426437378
    5. 'rank' → logprob: -4.071873664855957
    6. 'res' → logprob: -4.571873664855957
    7. ' unique' → logprob: -5.321873664855957
    8. 'for' → logprob: -5.571873664855957
    9. ' for' → logprob: -6.946873664855957
    10. 'order' → logprob: -7.071873664855957

Token 316: ' ranked' (ID: 32304)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'r' → logprob: -1.3174430131912231
    2. 'rank' → logprob: -1.9424430131912231
    3. 'members' → logprob: -2.1924428939819336
    4. 's' → logprob: -2.1924428939819336
    5. 'is' → logprob: -2.3174428939819336
    6. 'sizes' → logprob: -2.9424428939819336
    7. ' is' → logprob: -3.0674428939819336
    8. ''s' → logprob: -3.8174428939819336
    9. 'order' → logprob: -3.9424428939819336
    10. 'names' → logprob: -4.442442893981934

Token 317: ' a' (ID: 261)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '1' → logprob: -0.2804655432701111
    2. '0' → logprob: -3.030465602874756
    3. 'first' → logprob: -3.030465602874756
    4. ' ' → logprob: -3.155465602874756
    5. 'at' → logprob: -3.655465602874756
    6. ' first' → logprob: -4.155465602874756
    7. ' at' → logprob: -4.280465602874756
    8. 'res' → logprob: -4.530465602874756
    9. '[' → logprob: -4.655465602874756
    10. ' =' → logprob: -5.655465602874756

Token 318: ' should' (ID: 1757)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 't' → logprob: -0.43624019622802734
    2. 's' → logprob: -1.0612401962280273
    3. '1' → logprob: -5.436240196228027
    4. 'fter' → logprob: -7.061240196228027
    5. 'at' → logprob: -7.561240196228027
    6. '[' → logprob: -8.186240196228027
    7. ' ' → logprob: -8.436240196228027
    8. 'nd' → logprob: -8.811240196228027
    9. 'head' → logprob: -9.311240196228027
    10. 'first' → logprob: -9.311240196228027

Token 319: ' beat' (ID: 16807)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.8766893148422241
    2. 'be' → logprob: -1.1266893148422241
    3. ' be' → logprob: -2.3766894340515137
    4. 'not' → logprob: -3.5016894340515137
    5. 'appear' → logprob: -3.5016894340515137
    6. 'have' → logprob: -4.001689434051514
    7. 's' → logprob: -4.001689434051514
    8. 'preced' → logprob: -4.251689434051514
    9. 'nt' → logprob: -4.376689434051514
    10. ' not' → logprob: -5.126689434051514

Token 320: ' team' (ID: 3214)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.3431554436683655
    2. ' b' → logprob: -1.3431553840637207
    3. ' team' → logprob: -4.093155384063721
    4. 'team' → logprob: -4.718155384063721
    5. ' the' → logprob: -6.218155384063721
    6. 'the' → logprob: -6.843155384063721
    7. ' all' → logprob: -7.843155384063721
    8. ' res' → logprob: -8.843155860900879
    9. 'res' → logprob: -9.468155860900879
    10. ' ' → logprob: -9.468155860900879

Token 321: ' ranked' (ID: 32304)
  Prédit: ' b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.4393564462661743
    2. 'b' → logprob: -1.0643564462661743
    3. ' a' → logprob: -5.314356327056885
    4. 'a' → logprob: -5.314356327056885
    5. ' ' → logprob: -8.564356803894043
    6. 'rank' → logprob: -9.064356803894043
    7. 's' → logprob: -9.314356803894043
    8. ' ranked' → logprob: -9.689356803894043
    9. '```' → logprob: -10.439356803894043
    10. ' rank' → logprob: -10.439356803894043

Token 322: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.6604388952255249
    2. 'a' → logprob: -1.035438895225525
    3. ' b' → logprob: -2.2854390144348145
    4. ' a' → logprob: -3.6604390144348145
    5. '   ' → logprob: -7.9104390144348145
    6. ' ' → logprob: -8.660438537597656
    7. '(a' → logprob: -9.785438537597656
    8. '[a' → logprob: -9.910438537597656
    9. '```' → logprob: -10.160438537597656
    10. ' (' → logprob: -10.535438537597656

Token 323: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.3585112988948822
    2. 'for' → logprob: -2.108511209487915
    3. 'rank' → logprob: -2.858511209487915
    4. 'print' → logprob: -3.233511209487915
    5. 'order' → logprob: -3.483511209487915
    6. 'pos' → logprob: -4.233511447906494
    7. 'position' → logprob: -4.733511447906494
    8. 'r' → logprob: -4.858511447906494
    9. 'positions' → logprob: -5.233511447906494
    10. '#' → logprob: -5.608511447906494

Token 324: ' a' (ID: 261)
  Prédit: '(a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.0030617304146289825
    2. ' (' → logprob: -6.003061771392822
    3. '(edges' → logprob: -8.128061294555664
    4. '(b' → logprob: -9.753061294555664
    5. 'a' → logprob: -9.878061294555664
    6. '(' → logprob: -10.378061294555664
    7. '(n' → logprob: -10.503061294555664
    8. 'edges' → logprob: -10.878061294555664
    9. ' ' → logprob: -11.003061294555664
    10. '(adj' → logprob: -11.128061294555664

Token 325: ' <' (ID: 464)
  Prédit: ' <'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <' → logprob: -0.1942741870880127
    2. '<' → logprob: -2.0692741870880127
    3. ' comes' → logprob: -4.069273948669434
    4. ' in' → logprob: -5.069273948669434
    5. ' before' → logprob: -5.194273948669434
    6. 'comes' → logprob: -5.694273948669434
    7. ' ' → logprob: -5.944273948669434
    8. ' appears' → logprob: -6.069273948669434
    9. 'before' → logprob: -6.569273948669434
    10. ' ' → logprob: -6.569273948669434

Token 326: ' b' (ID: 287)
  Prédit: 'b'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -0.03805583342909813
    2. ' b' → logprob: -3.288055896759033
    3. ' ' → logprob: -11.788055419921875
    4. '```' → logprob: -12.288055419921875
    5. ' res' → logprob: -14.038055419921875
    6. '   ' → logprob: -15.163055419921875
    7. 'res' → logprob: -15.663055419921875
    8. '=' → logprob: -16.288055419921875
    9. '<|end|>' → logprob: -16.538055419921875
    10. '  ' → logprob: -16.788055419921875

Token 327: '.
' (ID: 558)
  Prédit: 'rank'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'rank' → logprob: -1.1681628227233887
    2. 'for' → logprob: -1.4181628227233887
    3. 'pos' → logprob: -2.0431628227233887
    4. 'order' → logprob: -2.4181628227233887
    5. 'position' → logprob: -3.1681628227233887
    6. 'r' → logprob: -3.2931628227233887
    7. 'if' → logprob: -3.4181628227233887
    8. 'positions' → logprob: -3.6681628227233887
    9. 'print' → logprob: -4.418162822723389
    10. 'inv' → logprob: -4.543162822723389

Token 328: '#' (ID: 2)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.967725932598114
    2. 'print' → logprob: -1.0927259922027588
    3. 'if' → logprob: -1.4677259922027588
    4. 'rank' → logprob: -3.467725992202759
    5. 'order' → logprob: -5.34272575378418
    6. 'r' → logprob: -5.59272575378418
    7. 'positions' → logprob: -5.71772575378418
    8. 'position' → logprob: -5.71772575378418
    9. 'possible' → logprob: -5.96772575378418
    10. 'pos' → logprob: -6.71772575378418

Token 329: ' The' (ID: 623)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.8079198598861694
    2. 'print' → logprob: -1.4329198598861694
    3. 'for' → logprob: -1.5579198598861694
    4. 'rank' → logprob: -2.557919979095459
    5. 'order' → logprob: -4.807919979095459
    6. 'r' → logprob: -4.932919979095459
    7. 'pos' → logprob: -5.807919979095459
    8. 'position' → logprob: -5.932919979095459
    9. 'positions' → logprob: -6.057919979095459
    10. 'ranking' → logprob: -7.057919979095459

Token 330: ' top' (ID: 2344)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.0530410073697567
    2. 'res' → logprob: -4.178040981292725
    3. 'print' → logprob: -4.178040981292725
    4. '#' → logprob: -4.303040981292725
    5. '
' → logprob: -6.053040981292725
    6. ' if' → logprob: -6.303040981292725
    7. 'unique' → logprob: -6.928040981292725
    8. 'rank' → logprob: -7.553040981292725
    9. 'for' → logprob: -7.803040981292725
    10. 'result' → logprob: -8.053041458129883

Token 331: 'ological' (ID: 8339)
  Prédit: 'ological'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ological' → logprob: -0.2048625499010086
    2. 'res' → logprob: -1.7048625946044922
    3. 'order' → logprob: -6.704862594604492
    4. 'logical' → logprob: -7.454862594604492
    5. '_res' → logprob: -7.954862594604492
    6. '#' → logprob: -8.329862594604492
    7. '=res' → logprob: -8.454862594604492
    8. '
' → logprob: -9.079862594604492
    9. '```' → logprob: -9.204862594604492
    10. '_order' → logprob: -9.329862594604492

Token 332: ' order' (ID: 2569)
  Prédit: 'sort'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sort' → logprob: -0.3835284411907196
    2. 'order' → logprob: -1.383528470993042
    3. ' order' → logprob: -3.383528470993042
    4. ' sort' → logprob: -3.883528470993042
    5. 'res' → logprob: -4.383528232574463
    6. '_sort' → logprob: -7.758528232574463
    7. '.sort' → logprob: -9.383528709411621
    8. ' res' → logprob: -9.508528709411621
    9. '_order' → logprob: -9.508528709411621
    10. 'sorted' → logprob: -9.633528709411621

Token 333: ' gives' (ID: 8967)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'res' → logprob: -1.0166012048721313
    2. ' represents' → logprob: -1.7666012048721313
    3. ' =' → logprob: -2.141601085662842
    4. ' is' → logprob: -2.766601085662842
    5. '#' → logprob: -3.016601085662842
    6. ' provides' → logprob: -3.641601085662842
    7. 'rep' → logprob: -3.766601085662842
    8. '.reverse' → logprob: -3.766601085662842
    9. 'is' → logprob: -3.891601085662842
    10. '[::-' → logprob: -4.016601085662842

Token 334: ' an' (ID: 448)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.27271023392677307
    2. 'the' → logprob: -2.1477103233337402
    3. ' the' → logprob: -3.1477103233337402
    4. ' res' → logprob: -3.3977103233337402
    5. 'a' → logprob: -3.6477103233337402
    6. ' a' → logprob: -4.89771032333374
    7. 'us' → logprob: -5.27271032333374
    8. ' us' → logprob: -6.14771032333374
    9. ' an' → logprob: -6.64771032333374
    10. 'unique' → logprob: -6.77271032333374

Token 335: ' order' (ID: 2569)
  Prédit: 'ordering'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ordering' → logprob: -1.1446776390075684
    2. 'order' → logprob: -1.2696776390075684
    3. ' order' → logprob: -1.5196776390075684
    4. ' ordering' → logprob: -2.0196776390075684
    5. 'answer' → logprob: -4.144677639007568
    6. 'in' → logprob: -5.519677639007568
    7. ' answer' → logprob: -5.769677639007568
    8. '```' → logprob: -6.519677639007568
    9. 'ascending' → logprob: -6.769677639007568
    10. 'valid' → logprob: -6.894677639007568

Token 336: ' where' (ID: 1919)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.281599521636963
    2. 'res' → logprob: -1.406599521636963
    3. ' =' → logprob: -2.156599521636963
    4. 'print' → logprob: -2.281599521636963
    5. '#' → logprob: -3.156599521636963
    6. ' for' → logprob: -3.281599521636963
    7. ' that' → logprob: -3.281599521636963
    8. ' of' → logprob: -3.531599521636963
    9. 'of' → logprob: -3.656599521636963
    10. 'that' → logprob: -3.781599521636963

Token 337: ' edges' (ID: 22569)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'res' → logprob: -0.9270827770233154
    2. 'a' → logprob: -1.8020827770233154
    3. ' for' → logprob: -2.4270827770233154
    4. 'for' → logprob: -2.6770827770233154
    5. ' res' → logprob: -2.8020827770233154
    6. 'u' → logprob: -3.4270827770233154
    7. ' all' → logprob: -3.6770827770233154
    8. 'adj' → logprob: -3.8020827770233154
    9. 'if' → logprob: -3.9270827770233154
    10. 'i' → logprob: -3.9270827770233154

Token 338: ' i' (ID: 575)
  Prédit: ' go'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' go' → logprob: -0.09474743157625198
    2. 'from' → logprob: -3.594747543334961
    3. 'go' → logprob: -3.719747543334961
    4. ' are' → logprob: -4.844747543334961
    5. 'are' → logprob: -4.844747543334961
    6. ' point' → logprob: -5.094747543334961
    7. 'point' → logprob: -5.219747543334961
    8. ' always' → logprob: -5.469747543334961
    9. 'always' → logprob: -6.094747543334961
    10. ' from' → logprob: -6.219747543334961

Token 339: '->' (ID: 609)
  Prédit: 'from'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'from' → logprob: -1.7099754810333252
    2. 'in' → logprob: -2.209975481033325
    3. ' in' → logprob: -2.459975481033325
    4. ' are' → logprob: -2.584975481033325
    5. ' go' → logprob: -3.084975481033325
    6. 'u' → logprob: -3.084975481033325
    7. ' must' → logprob: -3.334975481033325
    8. ' come' → logprob: -3.334975481033325
    9. ' point' → logprob: -3.584975481033325
    10. ' always' → logprob: -3.709975481033325

Token 340: 'j' (ID: 73)
  Prédit: 'j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.020803339779376984
    2. ' j' → logprob: -3.895803451538086
    3. 'v' → logprob: -8.520803451538086
    4. 'u' → logprob: -10.145803451538086
    5. ' v' → logprob: -11.645803451538086
    6. ' ' → logprob: -11.895803451538086
    7. ' u' → logprob: -13.020803451538086
    8. '```' → logprob: -13.520803451538086
    9. 'b' → logprob: -13.770803451538086
    10. '   ' → logprob: -14.270803451538086

Token 341: ' means' (ID: 4748)
  Prédit: ' imply'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' imply' → logprob: -0.8260697722434998
    2. ' represent' → logprob: -1.5760698318481445
    3. ' are' → logprob: -2.4510698318481445
    4. 's' → logprob: -2.8260698318481445
    5. ' indicate' → logprob: -3.0760698318481445
    6. 'im' → logprob: -3.4510698318481445
    7. 'are' → logprob: -3.9510698318481445
    8. ',' → logprob: -4.3260698318481445
    9. ' continue' → logprob: -4.5760698318481445
    10. 'continue' → logprob: -4.5760698318481445

Token 342: ' i' (ID: 575)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.2921965718269348
    2. ' i' → logprob: -1.41719651222229
    3. 'a' → logprob: -5.917196750640869
    4. ' that' → logprob: -6.167196750640869
    5. ' the' → logprob: -6.667196750640869
    6. ' a' → logprob: -6.792196750640869
    7. 'rank' → logprob: -6.917196750640869
    8. 'that' → logprob: -7.417196750640869
    9. 'the' → logprob: -7.542196750640869
    10. 'team' → logprob: -7.917196750640869

Token 343: ' ranked' (ID: 32304)
  Prédit: 'before'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'before' → logprob: -1.518807291984558
    2. ' comes' → logprob: -1.768807291984558
    3. 'comes' → logprob: -1.893807291984558
    4. ' before' → logprob: -2.2688074111938477
    5. ' <' → logprob: -2.3938074111938477
    6. '<' → logprob: -2.5188074111938477
    7. 'appe' → logprob: -2.6438074111938477
    8. ' appears' → logprob: -3.6438074111938477
    9. 'rank' → logprob: -4.143807411193848
    10. 'should' → logprob: -4.393807411193848

Token 344: ' higher' (ID: 7266)
  Prédit: 'before'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'before' → logprob: -0.3049529492855072
    2. ' before' → logprob: -1.4299529790878296
    3. 'higher' → logprob: -4.429953098297119
    4. '<' → logprob: -5.804953098297119
    5. 'less' → logprob: -5.929953098297119
    6. ' higher' → logprob: -6.304953098297119
    7. ' earlier' → logprob: -6.679953098297119
    8. '_before' → logprob: -7.429953098297119
    9. 'ahead' → logprob: -7.679953098297119
    10. 'lower' → logprob: -7.929953098297119

Token 345: ' than' (ID: 1572)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.6466565728187561
    2. 'if' → logprob: -0.7716565728187561
    3. 'rank' → logprob: -5.146656513214111
    4. 'for' → logprob: -5.521656513214111
    5. 'order' → logprob: -6.896656513214111
    6. '#' → logprob: -6.896656513214111
    7. 'position' → logprob: -7.646656513214111
    8. '
' → logprob: -8.14665699005127
    9. 'pos' → logprob: -8.14665699005127
    10. 'r' → logprob: -8.39665699005127

Token 346: ' j' (ID: 441)
  Prédit: 'j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.061967797577381134
    2. ' j' → logprob: -2.8119678497314453
    3. ' ' → logprob: -16.311967849731445
    4. ' ' → logprob: -16.811967849731445
    5. '	j' → logprob: -16.936967849731445
    6. '[j' → logprob: -18.311967849731445
    7. '...' → logprob: -18.311967849731445
    8. '   ' → logprob: -18.561967849731445
    9. ',' → logprob: -18.686967849731445
    10. '    ' → logprob: -18.936967849731445

Token 347: '.
' (ID: 558)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.23789890110492706
    2. 'if' → logprob: -1.7378989458084106
    3. 'for' → logprob: -3.737898826599121
    4. 'rank' → logprob: -4.987898826599121
    5. 'position' → logprob: -7.112898826599121
    6. 'order' → logprob: -7.112898826599121
    7. 'positions' → logprob: -7.237898826599121
    8. 'pos' → logprob: -7.362898826599121
    9. 'r' → logprob: -7.487898826599121
    10. '#' → logprob: -8.112898826599121

Token 348: '#' (ID: 2)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.20149938762187958
    2. 'if' → logprob: -1.951499342918396
    3. 'for' → logprob: -3.5764994621276855
    4. 'rank' → logprob: -5.0764994621276855
    5. 'r' → logprob: -6.8264994621276855
    6. 'order' → logprob: -7.0764994621276855
    7. 'pos' → logprob: -7.2014994621276855
    8. 'out' → logprob: -7.7014994621276855
    9. 'position' → logprob: -7.8264994621276855
    10. 'positions' → logprob: -7.8264994621276855

Token 349: ' So' (ID: 2632)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.1811378300189972
    2. 'if' → logprob: -1.9311378002166748
    3. 'for' → logprob: -4.056138038635254
    4. 'rank' → logprob: -6.181138038635254
    5. 'order' → logprob: -7.681138038635254
    6. '#' → logprob: -8.556138038635254
    7. 'r' → logprob: -9.181138038635254
    8. 'pos' → logprob: -9.556138038635254
    9. 'possible' → logprob: -9.681138038635254
    10. 'pr' → logprob: -10.181138038635254

Token 350: ' just' (ID: 1327)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.5106943249702454
    2. 'res' → logprob: -1.7606942653656006
    3. 'for' → logprob: -2.0106942653656006
    4. ' for' → logprob: -3.2606942653656006
    5. ' res' → logprob: -3.6356942653656006
    6. ' print' → logprob: -4.13569450378418
    7. '
' → logprob: -5.51069450378418
    8. 'rank' → logprob: -5.76069450378418
    9. 'if' → logprob: -6.01069450378418
    10. '#' → logprob: -6.51069450378418

Token 351: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.008037878200411797
    2. 'for' → logprob: -4.88303804397583
    3. 'res' → logprob: -7.88303804397583
    4. '
' → logprob: -10.383037567138672
    5. ' print' → logprob: -11.133037567138672
    6. '```' → logprob: -12.008037567138672
    7. ' for' → logprob: -14.008037567138672
    8. '   ' → logprob: -14.758037567138672
    9. '#' → logprob: -14.883037567138672
    10. '#print' → logprob: -15.133037567138672

Token 352: ' res' (ID: 694)
  Prédit: '(*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(*' → logprob: -0.07144524902105331
    2. '('\' → logprob: -3.6964452266693115
    3. '("\' → logprob: -4.571445465087891
    4. '(' → logprob: -4.821445465087891
    5. '(len' → logprob: -5.071445465087891
    6. '*' → logprob: -5.321445465087891
    7. '('' → logprob: -5.446445465087891
    8. '("' → logprob: -5.946445465087891
    9. 'res' → logprob: -6.446445465087891
    10. 'len' → logprob: -6.821445465087891

Token 353: ' as' (ID: 472)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.3136409819126129
    2. 'print' → logprob: -1.3136409521102905
    3. 'if' → logprob: -8.563640594482422
    4. '
' → logprob: -9.188640594482422
    5. '```' → logprob: -9.688640594482422
    6. ' for' → logprob: -10.938640594482422
    7. '``' → logprob: -13.313640594482422
    8. '`
' → logprob: -13.938640594482422
    9. '   ' → logprob: -14.438640594482422
    10. ' print' → logprob: -14.813640594482422

Token 354: ' rank' (ID: 10302)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.16243496537208557
    2. '"' → logprob: -3.2874350547790527
    3. ' res' → logprob: -3.5374350547790527
    4. 'res' → logprob: -3.7874350547790527
    5. ' is' → logprob: -4.162435054779053
    6. ' the' → logprob: -4.412435054779053
    7. 'the' → logprob: -5.037435054779053
    8. 'is' → logprob: -5.162435054779053
    9. ' a' → logprob: -5.537435054779053
    10. '```' → logprob: -5.787435054779053

Token 355: ' order' (ID: 2569)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.07158298045396805
    2. 'print' → logprob: -2.6965830326080322
    3. 'if' → logprob: -6.571582794189453
    4. ' for' → logprob: -9.196582794189453
    5. '```' → logprob: -9.446582794189453
    6. '
' → logprob: -10.571582794189453
    7. '``' → logprob: -11.821582794189453
    8. '\' → logprob: -12.446582794189453
    9. '`
' → logprob: -12.571582794189453
    10. '\n' → logprob: -12.821582794189453

Token 356: '.

' (ID: 364)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.5761741399765015
    2. 'for' → logprob: -0.8261741399765015
    3. 'if' → logprob: -8.451173782348633
    4. '
' → logprob: -11.326173782348633
    5. '```' → logprob: -11.951173782348633
    6. ' for' → logprob: -13.451173782348633
    7. '``' → logprob: -15.201173782348633
    8. '  
' → logprob: -15.951173782348633
    9. 'rank' → logprob: -16.076173782348633
    10. '\
' → logprob: -16.701173782348633

Token 357: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.02665938064455986
    2. 'for' → logprob: -4.0266594886779785
    3. 'if' → logprob: -4.7766594886779785
    4. '```' → logprob: -10.02665901184082
    5. '``' → logprob: -13.27665901184082
    6. 'rank' → logprob: -13.52665901184082
    7. 'unique' → logprob: -14.77665901184082
    8. ' print' → logprob: -15.02665901184082
    9. ' for' → logprob: -15.40165901184082
    10. '   ' → logprob: -15.90165901184082

Token 358: '('\' (ID: 24345)
  Prédit: '(*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(*' → logprob: -0.015916703268885612
    2. '(' → logprob: -4.26591682434082
    3. '('' → logprob: -6.51591682434082
    4. '("' → logprob: -8.26591682434082
    5. '(*)' → logprob: -11.76591682434082
    6. '(*(' → logprob: -12.76591682434082
    7. '(len' → logprob: -13.26591682434082
    8. '()' → logprob: -14.14091682434082
    9. '*' → logprob: -14.51591682434082
    10. '(res' → logprob: -14.89091682434082

Token 359: 'n' (ID: 77)
  Prédit: 'n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.018478253856301308
    2. ''' → logprob: -4.0184783935546875
    3. ' ' → logprob: -8.518478393554688
    4. ''s' → logprob: -10.643478393554688
    5. 'space' → logprob: -11.143478393554688
    6. '20' → logprob: -11.393478393554688
    7. ''.' → logprob: -11.643478393554688
    8. 'x' → logprob: -12.018478393554688
    9. 'join' → logprob: -12.018478393554688
    10. ''n' → logprob: -12.018478393554688

Token 360: ''.' (ID: 6120)
  Prédit: ''.'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''.' → logprob: -0.10006149858236313
    2. '.join' → logprob: -2.8500614166259766
    3. '''.' → logprob: -3.9750614166259766
    4. 'join' → logprob: -4.100061416625977
    5. ').' → logprob: -7.225061416625977
    6. '.' → logprob: -7.600061416625977
    7. '".' → logprob: -7.850061416625977
    8. ''' → logprob: -8.850061416625977
    9. 'print' → logprob: -9.475061416625977
    10. ')' → logprob: -9.475061416625977

Token 361: 'join' (ID: 10891)
  Prédit: 'join'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'join' → logprob: -7.896309739408025e-07
    2. 'print' → logprob: -14.250000953674316
    3. ' join' → logprob: -16.25
    4. '```' → logprob: -17.375
    5. 'jo' → logprob: -17.75
    6. 'j' → logprob: -17.875
    7. '.join' → logprob: -18.875
    8. ').' → logprob: -20.25
    9. '(join' → logprob: -20.375
    10. ')' → logprob: -20.875

Token 362: '(map' (ID: 16946)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.00866219773888588
    2. '(map' → logprob: -4.758662223815918
    3. 'str' → logprob: -10.008662223815918
    4. '(str' → logprob: -13.008662223815918
    5. ' map' → logprob: -14.758662223815918
    6. '	map' → logprob: -18.2586612701416
    7. 'list' → logprob: -18.8836612701416
    8. '[str' → logprob: -19.2586612701416
    9. ',map' → logprob: -20.0086612701416
    10. '.map' → logprob: -20.1336612701416

Token 363: '(str' (ID: 7946)
  Prédit: '(str'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(str' → logprob: -0.3869019150733948
    2. 'str' → logprob: -1.13690185546875
    3. ' str' → logprob: -10.63690185546875
    4. '(' → logprob: -13.13690185546875
    5. '```' → logprob: -13.51190185546875
    6. '=str' → logprob: -13.63690185546875
    7. '[str' → logprob: -13.76190185546875
    8. ',str' → logprob: -14.88690185546875
    9. '(
' → logprob: -15.26190185546875
    10. '	str' → logprob: -15.26190185546875

Token 364: ',' (ID: 11)
  Prédit: '(res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(res' → logprob: -0.02638970874249935
    2. ',res' → logprob: -3.7763895988464355
    3. ',' → logprob: -5.7763895988464355
    4. 'res' → logprob: -10.276390075683594
    5. ' (' → logprob: -12.526390075683594
    6. ',(' → logprob: -14.776390075683594
    7. ' ,' → logprob: -15.651390075683594
    8. '(' → logprob: -15.901390075683594
    9. '=res' → logprob: -15.901390075683594
    10. '	res' → logprob: -16.026390075683594

Token 365: ' res' (ID: 694)
  Prédit: 'res'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'res' → logprob: -1.1472419600977446e-06
    2. ' res' → logprob: -13.750000953674316
    3. '(res' → logprob: -18.250001907348633
    4. '   ' → logprob: -21.500001907348633
    5. '	res' → logprob: -21.625001907348633
    6. '$res' → logprob: -22.000001907348633
    7. '
' → logprob: -22.875001907348633
    8. 're' → logprob: -23.500001907348633
    9. 'r' → logprob: -24.000001907348633
    10. '```' → logprob: -24.625001907348633

Token 366: ')))
' (ID: 12562)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '))' → logprob: -3.130576806142926e-05
    2. ')))' → logprob: -11.000031471252441
    3. '))
' → logprob: -11.375031471252441
    4. ')' → logprob: -13.000031471252441
    5. '()))' → logprob: -14.500031471252441
    6. ' ))' → logprob: -15.500031471252441
    7. '))

' → logprob: -18.375030517578125
    8. '))
' → logprob: -18.375030517578125
    9. '));' → logprob: -18.500030517578125
    10. '+' → logprob: -18.500030517578125

Token 367: 'print' (ID: 1598)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 368: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0013808291405439377
    2. '(int' → logprob: -6.876380920410156
    3. '1' → logprob: -8.626380920410156
    4. 'int' → logprob: -8.876380920410156
    5. '(unique' → logprob: -10.626380920410156
    6. '(
' → logprob: -13.376380920410156
    7. 'unique' → logprob: -13.501380920410156
    8. '((' → logprob: -14.376380920410156
    9. '('' → logprob: -14.626380920410156
    10. ' (' → logprob: -14.876380920410156

Token 369: '0' (ID: 15)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.020685527473688126
    2. 'int' → logprob: -3.8956854343414307
    3. '0' → logprob: -9.020685195922852
    4. '(' → logprob: -11.770685195922852
    5. '{' → logprob: -12.645685195922852
    6. ''' → logprob: -13.145685195922852
    7. ' ' → logprob: -13.145685195922852
    8. '"' → logprob: -13.395685195922852
    9. '`' → logprob: -13.520685195922852
    10. '(int' → logprob: -13.645685195922852

Token 370: ' if' (ID: 538)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.002144908532500267
    2. '))' → logprob: -6.252144813537598
    3. ' if' → logprob: -8.502144813537598
    4. 'if' → logprob: -11.377144813537598
    5. ')`' → logprob: -13.627144813537598
    6. ')
' → logprob: -15.877144813537598
    7. '})' → logprob: -16.377145767211914
    8. ')))' → logprob: -16.502145767211914
    9. ')")' → logprob: -16.752145767211914
    10. ' )' → logprob: -16.877145767211914

Token 371: ' unique' (ID: 5746)
  Prédit: 'unique'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'unique' → logprob: -0.34057343006134033
    2. 'not' → logprob: -1.3405734300613403
    3. ' unique' → logprob: -4.090573310852051
    4. ' not' → logprob: -4.590573310852051
    5. '(unique' → logprob: -10.84057331085205
    6. 'uni' → logprob: -11.65307331085205
    7. '   ' → logprob: -11.96557331085205
    8. '(not' → logprob: -12.52807331085205
    9. '	not' → logprob: -13.02807331085205
    10. 'un' → logprob: -13.21557331085205

Token 372: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.5759406089782715
    2. ' else' → logprob: -0.8259406089782715
    3. '```' → logprob: -14.45094108581543
    4. '	else' → logprob: -14.70094108581543
    5. '   ' → logprob: -16.45094108581543
    6. '_else' → logprob: -16.82594108581543
    7. ' ' → logprob: -16.95094108581543
    8. '
' → logprob: -17.57594108581543
    9. '

' → logprob: -18.20094108581543
    10. '==' → logprob: -18.32594108581543

Token 373: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.9266199160483666e-05
    2. ' ' → logprob: -10.875019073486328
    3. '
' → logprob: -15.750019073486328
    4. '\n' → logprob: -16.500019073486328
    5. '2' → logprob: -16.875019073486328
    6. '   ' → logprob: -18.125019073486328
    7. '```' → logprob: -18.250019073486328
    8. 'print' → logprob: -19.250019073486328
    9. '\
' → logprob: -19.750019073486328
    10. '``' → logprob: -19.875019073486328

Token 374: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -2.522638169466518e-05
    2. '2' → logprob: -10.625024795532227
    3. ' ' → logprob: -14.000024795532227
    4. '   ' → logprob: -17.750024795532227
    5. '```' → logprob: -17.875024795532227
    6. ''' → logprob: -18.500024795532227
    7. '\n' → logprob: -18.625024795532227
    8. ')' → logprob: -18.875024795532227
    9. '`' → logprob: -19.250024795532227
    10. '3' → logprob: -19.625024795532227

Token 375: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.003177952254191041
    2. '))' → logprob: -5.753178119659424
    3. ')))' → logprob: -16.503177642822266
    4. ')`' → logprob: -17.253177642822266
    5. ')")' → logprob: -17.378177642822266
    6. '`)' → logprob: -17.503177642822266
    7. '})' → logprob: -17.878177642822266
    8. '())' → logprob: -18.378177642822266
    9. ')
' → logprob: -18.753177642822266
    10. '')' → logprob: -19.128177642822266


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 373
Tokens correctement prédits (1ère position, stricte): 112
Tokens correctement prédits (1ère position, avec adaptation): 121
Tokens correctement prédits (top 10): 256
Précision stricte (1ère position): 30.03%
Précision adaptée (1ère position): 32.44%
Précision (top 10): 68.63%
================================================================================
