================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:12:39
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
p,m,c=map(int,input().split())
print(p+m+c)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'p' (ID: 79)
  → Token d'amorce (pas de prédiction)

Token 1: ',m' (ID: 26648)
  → Token d'amorce (pas de prédiction)

Token 2: ',c' (ID: 22261)
  → Token d'amorce (pas de prédiction)

Token 3: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.6541686058044434
    2. ',' → logprob: -0.7791686058044434
    3. ' =' → logprob: -4.529168605804443
    4. '[' → logprob: -5.654168605804443
    5. '```' → logprob: -6.404168605804443
    6. ';' → logprob: -6.529168605804443
    7. '.' → logprob: -6.529168605804443
    8. ')' → logprob: -7.154168605804443
    9. ' ' → logprob: -8.029169082641602
    10. '(' → logprob: -8.654169082641602

Token 4: 'map' (ID: 3726)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.029300961643457413
    2. '1' → logprob: -3.9043009281158447
    3. '[' → logprob: -5.779301166534424
    4. '[]' → logprob: -5.904301166534424
    5. ' ' → logprob: -6.904301166534424
    6. 'p' → logprob: -7.404301166534424
    7. '[],' → logprob: -7.904301166534424
    8. '(' → logprob: -8.154300689697266
    9. '10' → logprob: -8.279300689697266
    10. '3' → logprob: -9.904300689697266

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004674219060689211
    2. '(lambda' → logprob: -5.879674434661865
    3. '```' → logprob: -7.004674434661865
    4. '<|end|>' → logprob: -8.129673957824707
    5. '(user' → logprob: -8.879673957824707
    6. '(p' → logprob: -9.254673957824707
    7. '(int' → logprob: -10.129673957824707
    8. '(open' → logprob: -10.254673957824707
    9. '`' → logprob: -10.379673957824707
    10. '(
' → logprob: -10.754673957824707

Token 6: ',input' (ID: 123014)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.09206151217222214
    2. ')' → logprob: -2.8420615196228027
    3. '(' → logprob: -3.9670615196228027
    4. ',input' → logprob: -5.717061519622803
    5. ',' → logprob: -6.467061519622803
    6. 'input' → logprob: -6.592061519622803
    7. '<|end|>' → logprob: -7.092061519622803
    8. '(raw' → logprob: -7.217061519622803
    9. '(user' → logprob: -8.092061042785645
    10. '(range' → logprob: -8.092061042785645

Token 7: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -1.1423773765563965
    2. '())' → logprob: -1.1423773765563965
    3. '(' → logprob: -1.7673773765563965
    4. ')' → logprob: -2.3923773765563965
    5. '(token' → logprob: -4.1423773765563965
    6. '(()' → logprob: -4.2673773765563965
    7. '('' → logprob: -4.2673773765563965
    8. '().' → logprob: -4.7673773765563965
    9. '<|end|>' → logprob: -4.8923773765563965
    10. '(
' → logprob: -5.8923773765563965

Token 8: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00012642296496778727
    2. 'strip' → logprob: -9.250126838684082
    3. 'rstrip' → logprob: -11.000126838684082
    4. ' split' → logprob: -11.500126838684082
    5. '(split' → logprob: -13.250126838684082
    6. 'spl' → logprob: -14.000126838684082
    7. ')' → logprob: -14.375126838684082
    8. 'startswith' → logprob: -16.375125885009766
    9. '```' → logprob: -16.500125885009766
    10. 's' → logprob: -16.500125885009766

Token 9: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.033389776945114136
    2. '())' → logprob: -3.5333898067474365
    3. '`)' → logprob: -6.158389568328857
    4. '))' → logprob: -7.283389568328857
    5. '()' → logprob: -8.033390045166016
    6. '(' → logprob: -8.783390045166016
    7. ')`' → logprob: -9.283390045166016
    8. '')' → logprob: -9.783390045166016
    9. '```' → logprob: -10.283390045166016
    10. '('' → logprob: -10.408390045166016

Token 10: 'print' (ID: 1598)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.6720936298370361
    2. '*' → logprob: -1.6720936298370361
    3. '#' → logprob: -2.547093629837036
    4. 'if' → logprob: -2.547093629837036
    5. 'i' → logprob: -2.922093629837036
    6. '\n' → logprob: -3.797093629837036
    7. 'd' → logprob: -4.172093391418457
    8. '+
' → logprob: -4.797093391418457
    9. 'x' → logprob: -5.297093391418457
    10. ',' → logprob: -5.297093391418457

Token 11: '(p' (ID: 2407)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0007087402627803385
    2. '('' → logprob: -7.87570858001709
    3. '("("' → logprob: -8.12570858001709
    4. '("""' → logprob: -11.25070858001709
    5. '()' → logprob: -12.00070858001709
    6. '((' → logprob: -13.12570858001709
    7. '("")' → logprob: -13.50070858001709
    8. '(f' → logprob: -13.50070858001709
    9. '(p' → logprob: -13.75070858001709
    10. '(
' → logprob: -14.00070858001709

Token 12: '+m' (ID: 139456)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0015192650025710464
    2. '*' → logprob: -7.251519203186035
    3. ',' → logprob: -7.876519203186035
    4. '+' → logprob: -8.751519203186035
    5. ',p' → logprob: -9.251519203186035
    6. '**' → logprob: -10.001519203186035
    7. '[' → logprob: -10.876519203186035
    8. ',)' → logprob: -10.876519203186035
    9. '`)' → logprob: -11.001519203186035
    10. ' )' → logprob: -11.251519203186035

Token 13: '+c' (ID: 114860)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00010711929644457996
    2. '`)' → logprob: -10.375106811523438
    3. '+' → logprob: -10.750106811523438
    4. '))' → logprob: -11.000106811523438
    5. ' )' → logprob: -12.000106811523438
    6. ')+' → logprob: -12.125106811523438
    7. '+)' → logprob: -12.375106811523438
    8. '+p' → logprob: -12.375106811523438
    9. '*' → logprob: -12.625106811523438
    10. ')p' → logprob: -12.875106811523438

Token 14: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00019364648323971778
    2. '))' → logprob: -8.62519359588623
    3. '`)' → logprob: -12.00019359588623
    4. ' )' → logprob: -12.62519359588623
    5. ')))' → logprob: -13.50019359588623
    6. '+' → logprob: -14.12519359588623
    7. '```' → logprob: -14.62519359588623
    8. ')`' → logprob: -15.12519359588623
    9. ')p' → logprob: -15.25019359588623
    10. '*' → logprob: -15.50019359588623


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 12
Tokens correctement prédits (1ère position, stricte): 3
Tokens correctement prédits (1ère position, avec adaptation): 3
Tokens correctement prédits (top 10): 7
Précision stricte (1ère position): 25.00%
Précision adaptée (1ère position): 25.00%
Précision (top 10): 58.33%
================================================================================
