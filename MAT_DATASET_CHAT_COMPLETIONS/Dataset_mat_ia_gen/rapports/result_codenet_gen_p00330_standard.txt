================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 16:57:56
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
W = int(input())
print(W * 32)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'W' (ID: 54)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.006222294177860022
    2. ''' → logprob: -5.756222248077393
    3. 'W' → logprob: -6.881222248077393
    4. '('' → logprob: -6.881222248077393
    5. '(W' → logprob: -8.50622272491455
    6. '```' → logprob: -8.63122272491455
    7. ')' → logprob: -8.88122272491455
    8. '"' → logprob: -9.38122272491455
    9. '[' → logprob: -9.38122272491455
    10. '(
' → logprob: -10.38122272491455

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.020675834268331528
    2. ')' → logprob: -4.6456756591796875
    3. '()' → logprob: -4.6456756591796875
    4. '(
' → logprob: -8.020675659179688
    5. '())' → logprob: -8.770675659179688
    6. '('' → logprob: -8.770675659179688
    7. '```' → logprob: -8.770675659179688
    8. '(W' → logprob: -9.020675659179688
    9. '("("' → logprob: -10.020675659179688
    10. '(()' → logprob: -10.395675659179688

Token 5: 'print' (ID: 1598)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.240412637591362
    2. '*' → logprob: -2.990412712097168
    3. 'for' → logprob: -2.990412712097168
    4. 'i' → logprob: -3.490412712097168
    5. 'n' → logprob: -3.865412712097168
    6. '+' → logprob: -4.990412712097168
    7. 'N' → logprob: -4.990412712097168
    8. 'x' → logprob: -5.115412712097168
    9. 'S' → logprob: -5.490412712097168
    10. 'w' → logprob: -5.740412712097168

Token 6: '(W' (ID: 26031)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.006877818610519171
    2. '('' → logprob: -5.131877899169922
    3. '("("' → logprob: -7.006877899169922
    4. '(W' → logprob: -10.506877899169922
    5. '("""' → logprob: -12.506877899169922
    6. '()' → logprob: -12.756877899169922
    7. '("")' → logprob: -13.006877899169922
    8. '((' → logprob: -13.506877899169922
    9. '("' → logprob: -13.631877899169922
    10. '(f' → logprob: -14.131877899169922

Token 7: ' *' (ID: 425)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0011645073536783457
    2. '))' → logprob: -7.001164436340332
    3. '*' → logprob: -9.251164436340332
    4. '+' → logprob: -9.501164436340332
    5. ' )' → logprob: -11.001164436340332
    6. '')' → logprob: -11.251164436340332
    7. ',' → logprob: -11.376164436340332
    8. '`)' → logprob: -11.376164436340332
    9. ')))' → logprob: -11.876164436340332
    10. '>' → logprob: -12.501164436340332

Token 8: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.3640134036540985
    2. ' ' → logprob: -1.614013433456421
    3. ''' → logprob: -3.614013433456421
    4. '"' → logprob: -3.989013433456421
    5. '3' → logprob: -4.489013195037842
    6. '1' → logprob: -4.614013195037842
    7. '4' → logprob: -4.989013195037842
    8. '5' → logprob: -5.239013195037842
    9. '10' → logprob: -5.364013195037842
    10. '7' → logprob: -5.489013195037842

Token 9: '32' (ID: 1398)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '2' → logprob: -0.10710986703634262
    2. '7' → logprob: -3.482109785079956
    3. '5' → logprob: -3.482109785079956
    4. '3' → logprob: -4.357110023498535
    5. '4' → logprob: -4.982110023498535
    6. ' ' → logprob: -5.357110023498535
    7. '10' → logprob: -5.607110023498535
    8. '0' → logprob: -5.982110023498535
    9. '19' → logprob: -6.357110023498535
    10. '1' → logprob: -6.607110023498535

Token 10: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00019781860464718193
    2. '*' → logprob: -9.250197410583496
    3. '`)' → logprob: -9.875197410583496
    4. '))' → logprob: -10.625197410583496
    5. '*)' → logprob: -11.250197410583496
    6. '')' → logprob: -12.500197410583496
    7. ' )' → logprob: -12.625197410583496
    8. ')`' → logprob: -13.000197410583496
    9. ')
' → logprob: -14.000197410583496
    10. '```' → logprob: -14.250197410583496


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 8
Tokens correctement prédits (1ère position, stricte): 1
Tokens correctement prédits (1ère position, avec adaptation): 1
Tokens correctement prédits (top 10): 3
Précision stricte (1ère position): 12.50%
Précision adaptée (1ère position): 12.50%
Précision (top 10): 37.50%
================================================================================
