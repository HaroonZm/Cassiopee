================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:02:50
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
while True:
    n, m = map(int, input().split())
    if n == 0 and m == 0:
        break
    prices = list(map(int, input().split()))
    prices.sort(reverse=True)
    total = 0
    for i, price in enumerate(prices):
        if (i + 1) % m != 0:
            total += price
    print(total)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'while' (ID: 7032)
  → Token d'amorce (pas de prédiction)

Token 1: ' True' (ID: 6432)
  → Token d'amorce (pas de prédiction)

Token 2: ':
' (ID: 734)
  → Token d'amorce (pas de prédiction)

Token 3: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5137425661087036
    2. '    ' → logprob: -2.013742446899414
    3. ' ' → logprob: -2.638742446899414
    4. '    
' → logprob: -3.013742446899414
    5. '\n' → logprob: -3.138742446899414
    6. '\' → logprob: -3.388742446899414
    7. ' 
' → logprob: -4.013742446899414
    8. '```' → logprob: -4.388742446899414
    9. '  
' → logprob: -4.888742446899414
    10. '     
' → logprob: -5.013742446899414

Token 4: ' n' (ID: 297)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.19517217576503754
    2. '    ' → logprob: -2.695172071456909
    3. ' ' → logprob: -3.070172071456909
    4. '```' → logprob: -3.195172071456909
    5. '       ' → logprob: -5.195172309875488
    6. '    
' → logprob: -5.695172309875488
    7. ' pass' → logprob: -5.945172309875488
    8. '  ' → logprob: -6.445172309875488
    9. 'pass' → logprob: -6.445172309875488
    10. ' ```' → logprob: -6.945172309875488

Token 5: ',' (ID: 11)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8138346076011658
    2. 'u' → logprob: -1.5638346672058105
    3. '=' → logprob: -1.9388346672058105
    4. 'o' → logprob: -2.6888346672058105
    5. '   ' → logprob: -3.0638346672058105
    6. 'e' → logprob: -4.0638346672058105
    7. ' =' → logprob: -4.0638346672058105
    8. '_' → logprob: -4.8138346672058105
    9. '+' → logprob: -5.0638346672058105
    10. '  ' → logprob: -5.1888346672058105

Token 6: ' m' (ID: 284)
  Prédit: ' input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.2268044650554657
    2. 'input' → logprob: -2.351804494857788
    3. ' s' → logprob: -2.976804494857788
    4. 's' → logprob: -4.101804256439209
    5. ' =' → logprob: -4.601804256439209
    6. ' ' → logprob: -4.976804256439209
    7. ' m' → logprob: -5.726804256439209
    8. ' n' → logprob: -5.726804256439209
    9. '=input' → logprob: -5.726804256439209
    10. ' data' → logprob: -6.101804256439209

Token 7: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.45397675037384033
    2. ' =' → logprob: -1.0789767503738403
    3. ',' → logprob: -3.703976631164551
    4. ' ,' → logprob: -8.45397663116455
    5. ')' → logprob: -9.45397663116455
    6. ' ' → logprob: -11.45397663116455
    7. '=input' → logprob: -12.45397663116455
    8. '```' → logprob: -12.45397663116455
    9. '<|end|>' → logprob: -12.70397663116455
    10. '[' → logprob: -12.82897663116455

Token 8: ' map' (ID: 4014)
  Prédit: ' map'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' map' → logprob: -0.24175934493541718
    2. 'map' → logprob: -1.7417593002319336
    3. ' input' → logprob: -3.8667593002319336
    4. 'input' → logprob: -3.9917593002319336
    5. ' ' → logprob: -10.116759300231934
    6. 'int' → logprob: -10.241759300231934
    7. ' list' → logprob: -10.491759300231934
    8. ' int' → logprob: -11.241759300231934
    9. 'list' → logprob: -11.366759300231934
    10. '0' → logprob: -11.616759300231934

Token 9: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.1261952519416809
    2. '(' → logprob: -2.251195192337036
    3. '(str' → logprob: -4.376195430755615
    4. '(input' → logprob: -7.751195430755615
    5. '(lambda' → logprob: -8.376194953918457
    6. 'int' → logprob: -10.626194953918457
    7. '(eval' → logprob: -12.001194953918457
    8. '(list' → logprob: -12.376194953918457
    9. '(
' → logprob: -13.001194953918457
    10. '<int' → logprob: -13.001194953918457

Token 10: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.07797091454267502
    2. 'input' → logprob: -2.8279709815979004
    3. '(' → logprob: -5.3279709815979
    4. ')' → logprob: -5.4529709815979
    5. ' input' → logprob: -5.8279709815979
    6. ',input' → logprob: -5.9529709815979
    7. ',' → logprob: -6.8279709815979
    8. '=input' → logprob: -10.327970504760742
    9. '(str' → logprob: -11.577970504760742
    10. '(int' → logprob: -11.577970504760742

Token 11: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.12695781886577606
    2. ' input' → logprob: -2.126957893371582
    3. ')' → logprob: -10.626957893371582
    4. '(input' → logprob: -12.626957893371582
    5. '=input' → logprob: -14.501957893371582
    6. '	input' → logprob: -14.751957893371582
    7. ',input' → logprob: -14.876957893371582
    8. ' )' → logprob: -15.001957893371582
    9. ' ' → logprob: -15.376957893371582
    10. '```' → logprob: -16.376956939697266

Token 12: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.6633079648017883
    2. '()' → logprob: -0.7883079648017883
    3. '().' → logprob: -3.5383079051971436
    4. '('' → logprob: -8.038308143615723
    5. '());' → logprob: -8.413308143615723
    6. ')' → logprob: -8.788308143615723
    7. '(' → logprob: -8.913308143615723
    8. '()))' → logprob: -9.163308143615723
    9. '()`' → logprob: -10.288308143615723
    10. '();)' → logprob: -10.663308143615723

Token 13: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0007163656409829855
    2. 'strip' → logprob: -7.250716209411621
    3. 'rstrip' → logprob: -12.125716209411621
    4. ' split' → logprob: -14.000716209411621
    5. '(split' → logprob: -16.000717163085938
    6. 'spl' → logprob: -16.875717163085938
    7. 'read' → logprob: -17.375717163085938
    8. ')' → logprob: -18.250717163085938
    9. 'replace' → logprob: -18.750717163085938
    10. '```' → logprob: -18.875717163085938

Token 14: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.6972597241401672
    2. '())' → logprob: -1.0722596645355225
    3. '))' → logprob: -1.9472596645355225
    4. '()))' → logprob: -4.322259902954102
    5. '()' → logprob: -5.572259902954102
    6. '())
' → logprob: -11.197259902954102
    7. '),' → logprob: -11.197259902954102
    8. ')))' → logprob: -11.447259902954102
    9. '`)' → logprob: -12.197259902954102
    10. '(' → logprob: -12.572259902954102

Token 15: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.03212917968630791
    2. '   ' → logprob: -4.282129287719727
    3. ' if' → logprob: -4.907129287719727
    4. ')' → logprob: -5.532129287719727
    5. ' ' → logprob: -6.532129287719727
    6. '):' → logprob: -6.657129287719727
    7. ':
' → logprob: -7.282129287719727
    8. ',' → logprob: -7.532129287719727
    9. 'if' → logprob: -7.782129287719727
    10. '<|end|>' → logprob: -7.782129287719727

Token 16: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.18409904837608337
    2. 'if' (adapté à ' if') → logprob: -2.184098958969116
    3. '   ' → logprob: -3.184098958969116
    4. '```' → logprob: -5.309099197387695
    5. ' ' → logprob: -6.059099197387695
    6. '    ' → logprob: -6.309099197387695
    7. '<|end|>' → logprob: -6.434099197387695
    8. 'i' → logprob: -6.934099197387695
    9. ' i' → logprob: -7.934099197387695
    10. '\n' → logprob: -7.934099197387695

Token 17: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.025270048528909683
    2. ' not' → logprob: -3.7752699851989746
    3. 'n' → logprob: -6.900269985198975
    4. ' m' → logprob: -7.025269985198975
    5. 'not' → logprob: -9.275270462036133
    6. 'm' → logprob: -11.025270462036133
    7. ' ' → logprob: -11.525270462036133
    8. ' ' → logprob: -12.650270462036133
    9. '(n' → logprob: -13.775270462036133
    10. ' (' → logprob: -15.025270462036133

Token 18: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.13481485843658447
    2. '==' → logprob: -2.384814739227295
    3. ' <=' → logprob: -3.884814739227295
    4. ' <' → logprob: -4.884814739227295
    5. '<' → logprob: -6.509814739227295
    6. ' ' → logprob: -6.634814739227295
    7. '<=' → logprob: -7.009814739227295
    8. ' >' → logprob: -7.134814739227295
    9. '>' → logprob: -7.634814739227295
    10. '  ' → logprob: -8.759815216064453

Token 19: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.6342268586158752
    2. ' ' → logprob: -0.7592268586158752
    3. 'm' → logprob: -6.8842267990112305
    4. ' m' → logprob: -7.5092267990112305
    5. ' -' → logprob: -11.00922679901123
    6. '-' → logprob: -11.25922679901123
    7. '   ' → logprob: -12.19672679901123
    8. '  ' → logprob: -12.38422679901123
    9. '1' → logprob: -13.07172679901123
    10. '=' → logprob: -13.38422679901123

Token 20: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00020234835392329842
    2. ' ' → logprob: -8.750202178955078
    3. 'm' → logprob: -10.125202178955078
    4. '-' → logprob: -12.875202178955078
    5. ' m' → logprob: -14.875202178955078
    6. '```' → logprob: -15.750202178955078
    7. ' -' → logprob: -15.875202178955078
    8. '1' → logprob: -16.000202178955078
    9. '   ' → logprob: -16.125202178955078
    10. '  ' → logprob: -16.125202178955078

Token 21: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.046010006219148636
    2. ':' → logprob: -3.1710100173950195
    3. 'and' → logprob: -5.9210100173950195
    4. ' or' → logprob: -8.29601001739502
    5. ' ' → logprob: -9.79601001739502
    6. ' :' → logprob: -12.04601001739502
    7. '   ' → logprob: -12.04601001739502
    8. ' a' → logprob: -12.92101001739502
    9. '	and' → logprob: -13.79601001739502
    10. ':
' → logprob: -14.17101001739502

Token 22: ' m' (ID: 284)
  Prédit: ' m'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' m' → logprob: -0.04858794063329697
    2. 'm' → logprob: -3.0485880374908447
    3. ' ' → logprob: -15.173587799072266
    4. '	m' → logprob: -15.173587799072266
    5. ' ' → logprob: -17.298587799072266
    6. '<|end|>' → logprob: -17.548587799072266
    7. '   ' → logprob: -17.673587799072266
    8. '    ' → logprob: -17.673587799072266
    9. '  ' → logprob: -18.798587799072266
    10. ' м' → logprob: -18.923587799072266

Token 23: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.10186862200498581
    2. '==' → logprob: -2.4768686294555664
    3. '<|end|>' → logprob: -5.101868629455566
    4. ' ' → logprob: -5.851868629455566
    5. '<|end|>' → logprob: -6.976868629455566
    6. '=' → logprob: -7.226868629455566
    7. ' ' → logprob: -7.476868629455566
    8. ')' → logprob: -7.476868629455566
    9. '0' → logprob: -7.976868629455566
    10. '```' → logprob: -8.226868629455566

Token 24: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.28115037083625793
    2. '0' → logprob: -1.4061503410339355
    3. ' ' → logprob: -15.906150817871094
    4. '  ' → logprob: -16.281150817871094
    5. '   ' → logprob: -18.156150817871094
    6. '۰' → logprob: -18.156150817871094
    7. '=' → logprob: -18.218650817871094
    8. '<|end|>' → logprob: -18.406150817871094
    9. '<|end|>' → logprob: -18.718650817871094
    10. '_' → logprob: -19.031150817871094

Token 25: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0024758970830589533
    2. ' ' → logprob: -6.002475738525391
    3. '  ' → logprob: -16.43997573852539
    4. '   ' → logprob: -16.93997573852539
    5. '۰' → logprob: -17.56497573852539
    6. '1' → logprob: -17.87747573852539
    7. ' ' → logprob: -17.93997573852539
    8. '```' → logprob: -18.12747573852539
    9. '`' → logprob: -18.81497573852539
    10. ')' → logprob: -19.06497573852539

Token 26: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.00011331788846291602
    2. ':
' → logprob: -9.250113487243652
    3. '   ' → logprob: -11.875113487243652
    4. '       ' → logprob: -11.875113487243652
    5. '):' → logprob: -13.750113487243652
    6. ' :' → logprob: -13.875113487243652
    7. ':return' → logprob: -14.375113487243652
    8. ':\' → logprob: -16.375112533569336
    9. ',' → logprob: -16.500112533569336
    10. ':**' → logprob: -16.625112533569336

Token 27: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.001289163250476122
    2. '   ' → logprob: -7.001289367675781
    3. ' break' → logprob: -8.376289367675781
    4. '\n' → logprob: -9.376289367675781
    5. '	break' → logprob: -10.501289367675781
    6. ':' → logprob: -11.126289367675781
    7. 'break' → logprob: -12.626289367675781
    8. '     ' → logprob: -12.626289367675781
    9. '\t' → logprob: -13.251289367675781
    10. '    ' → logprob: -13.376289367675781

Token 28: ' break' (ID: 2338)
  Prédit: ' break'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' break' → logprob: -0.06244521960616112
    2. '       ' → logprob: -3.0624451637268066
    3. 'break' (adapté à ' break') → logprob: -4.312445163726807
    4. '   ' → logprob: -8.437445640563965
    5. '	break' → logprob: -8.937445640563965
    6. '_break' → logprob: -12.437445640563965
    7. '        
' → logprob: -13.312445640563965
    8. '           ' → logprob: -13.562445640563965
    9. '```' → logprob: -13.562445640563965
    10. '-break' → logprob: -13.687445640563965

Token 29: '
' (ID: 198)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.32832959294319153
    2. '\n' → logprob: -2.078329563140869
    3. '   ' → logprob: -2.078329563140869
    4. '\' → logprob: -4.953329563140869
    5. ')' → logprob: -5.203329563140869
    6. '    
' → logprob: -5.828329563140869
    7. ':
' → logprob: -6.453329563140869
    8. '
' → logprob: -6.703329563140869
    9. 'n' → logprob: -6.703329563140869
    10. ' ' → logprob: -6.703329563140869

Token 30: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01603800244629383
    2. '\n' → logprob: -4.891037940979004
    3. '    
' → logprob: -5.641037940979004
    4. ')' → logprob: -6.891037940979004
    5. '       ' → logprob: -7.141037940979004
    6. '\' → logprob: -7.266037940979004
    7. '<|end|>' → logprob: -7.391037940979004
    8. '```' → logprob: -7.891037940979004
    9. '#' → logprob: -8.141037940979004
    10. '    ' → logprob: -8.516037940979004

Token 31: ' prices' (ID: 8451)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05903099849820137
    2. ' ' → logprob: -4.309031009674072
    3. '    ' → logprob: -4.559031009674072
    4. '\n' → logprob: -5.059031009674072
    5. '       ' → logprob: -5.184031009674072
    6. '[' → logprob: -5.559031009674072
    7. '    
' → logprob: -5.684031009674072
    8. '\' → logprob: -6.059031009674072
    9. 'print' → logprob: -6.309031009674072
    10. '```' → logprob: -6.559031009674072

Token 32: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.4669482111930847
    2. '[' → logprob: -1.2169482707977295
    3. '=' → logprob: -2.5919482707977295
    4. '_' → logprob: -7.96694803237915
    5. ')' → logprob: -8.216948509216309
    6. '[:]' → logprob: -8.216948509216309
    7. '[]' → logprob: -8.341948509216309
    8. '=[]' → logprob: -8.591948509216309
    9. ' ' → logprob: -8.841948509216309
    10. '.' → logprob: -8.966948509216309

Token 33: ' list' (ID: 1562)
  Prédit: ' list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.48921406269073486
    2. 'list' → logprob: -1.6142140626907349
    3. '[]' → logprob: -2.4892139434814453
    4. ' []' → logprob: -2.8642139434814453
    5. ' [' → logprob: -3.6142139434814453
    6. '[' → logprob: -4.114213943481445
    7. '[list' → logprob: -5.489213943481445
    8. ' sorted' → logprob: -9.614213943481445
    9. 'sorted' → logprob: -10.239213943481445
    10. '[input' → logprob: -10.364213943481445

Token 34: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -8.280175097752362e-05
    2. '(range' → logprob: -10.875082969665527
    3. '()' → logprob: -11.000082969665527
    4. '[' → logprob: -11.000082969665527
    5. '<|end|>' → logprob: -12.500082969665527
    6. '(
' → logprob: -12.875082969665527
    7. 's' → logprob: -13.000082969665527
    8. ' (' → logprob: -13.000082969665527
    9. ')' → logprob: -13.500082969665527
    10. '(input' → logprob: -13.625082969665527

Token 35: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.016130559146404266
    2. '(' → logprob: -4.141130447387695
    3. 'int' → logprob: -10.141130447387695
    4. '<int' → logprob: -10.766130447387695
    5. '[int' → logprob: -11.141130447387695
    6. '(lambda' → logprob: -11.766130447387695
    7. ')' → logprob: -12.516130447387695
    8. '=int' → logprob: -12.766130447387695
    9. '(str' → logprob: -13.141130447387695
    10. '(
' → logprob: -13.641130447387695

Token 36: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.6310981512069702
    2. '(input' → logprob: -1.3810981512069702
    3. ',input' → logprob: -1.6310981512069702
    4. '(' → logprob: -4.00609827041626
    5. 'input' → logprob: -6.25609827041626
    6. ' ,' → logprob: -7.38109827041626
    7. '(),' → logprob: -8.881097793579102
    8. ')' → logprob: -10.631097793579102
    9. '=input' → logprob: -10.881097793579102
    10. '```' → logprob: -11.131097793579102

Token 37: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.25193509459495544
    2. ' input' → logprob: -1.5019351243972778
    3. ')' → logprob: -12.876935005187988
    4. '	input' → logprob: -14.126935005187988
    5. '(input' → logprob: -14.501935005187988
    6. '<input' → logprob: -14.501935005187988
    7. ',input' → logprob: -14.626935005187988
    8. '=input' → logprob: -14.751935005187988
    9. ' ' → logprob: -15.126935005187988
    10. '[input' → logprob: -16.126935958862305

Token 38: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0007202956476248801
    2. '()' → logprob: -7.250720500946045
    3. ' ().' → logprob: -12.250720024108887
    4. '(' → logprob: -12.625720024108887
    5. '(.' → logprob: -14.375720024108887
    6. '()).' → logprob: -14.875720024108887
    7. '())' → logprob: -15.000720024108887
    8. '()))' → logprob: -15.500720024108887
    9. '.' → logprob: -15.625720024108887
    10. '(),' → logprob: -16.125720977783203

Token 39: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -5.438573680294212e-06
    2. 'strip' → logprob: -12.250005722045898
    3. ' split' → logprob: -15.125005722045898
    4. 'rstrip' → logprob: -15.375005722045898
    5. '(split' → logprob: -16.0000057220459
    6. '.split' → logprob: -18.5000057220459
    7. 'spl' → logprob: -18.7500057220459
    8. 's' → logprob: -19.5000057220459
    9. '_split' → logprob: -19.7500057220459
    10. 'plit' → logprob: -20.2500057220459

Token 40: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.3904210329055786
    2. '))' → logprob: -1.3904210329055786
    3. ')' → logprob: -3.390420913696289
    4. '())' → logprob: -3.515420913696289
    5. '()' → logprob: -4.890420913696289
    6. '(' → logprob: -5.765420913696289
    7. '   ' → logprob: -9.765420913696289
    8. '()))
' → logprob: -10.515420913696289
    9. ' ))' → logprob: -11.140420913696289
    10. ''))' → logprob: -11.390420913696289

Token 41: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.42646440863609314
    2. 'prices' → logprob: -1.4264644384384155
    3. ' ' → logprob: -3.301464319229126
    4. '[' → logprob: -3.926464319229126
    5. '    ' → logprob: -4.176464557647705
    6. '    
' → logprob: -4.926464557647705
    7. ' prices' → logprob: -5.301464557647705
    8. '<|end|>' → logprob: -5.801464557647705
    9. '  ' → logprob: -6.301464557647705
    10. ')' → logprob: -6.426464557647705

Token 42: ' prices' (ID: 8451)
  Prédit: 'prices'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prices' (adapté à ' prices') → logprob: -1.3481265306472778
    2. 'dp' → logprob: -2.2231264114379883
    3. 'discount' → logprob: -2.4731264114379883
    4. 'max' → logprob: -2.7231264114379883
    5. 'result' → logprob: -2.9731264114379883
    6. 'count' → logprob: -2.9731264114379883
    7. 'best' → logprob: -3.7231264114379883
    8. 'answer' → logprob: -3.8481264114379883
    9. 'b' → logprob: -3.8481264114379883
    10. 'budget' → logprob: -3.9731264114379883

Token 43: '.sort' (ID: 19551)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.6330963969230652
    2. '.sort' → logprob: -0.7580963969230652
    3. '=' → logprob: -8.758096694946289
    4. '<|end|>' → logprob: -9.383096694946289
    5. '.reverse' → logprob: -9.758096694946289
    6. '[' → logprob: -9.758096694946289
    7. 'sort' → logprob: -10.133096694946289
    8. '.append' → logprob: -10.383096694946289
    9. '[:]' → logprob: -11.508096694946289
    10. ')' → logprob: -11.508096694946289

Token 44: '(reverse' (ID: 110806)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.02982558123767376
    2. '(' → logprob: -3.5298256874084473
    3. '()`' → logprob: -10.904825210571289
    4. '().' → logprob: -11.779825210571289
    5. '(()' → logprob: -11.904825210571289
    6. ' ()' → logprob: -12.154825210571289
    7. '();' → logprob: -12.279825210571289
    8. '(reverse' → logprob: -12.279825210571289
    9. '()>' → logprob: -12.779825210571289
    10. '('' → logprob: -13.029825210571289

Token 45: '=True' (ID: 7827)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.16242016851902008
    2. '()' → logprob: -2.2874202728271484
    3. ')' → logprob: -3.0374202728271484
    4. '()))' → logprob: -8.287420272827148
    5. '(' → logprob: -10.037420272827148
    6. '))' → logprob: -10.037420272827148
    7. ' ())' → logprob: -10.412420272827148
    8. '()]' → logprob: -11.537420272827148
    9. '())
' → logprob: -11.787420272827148
    10. '()>' → logprob: -11.912420272827148

Token 46: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00011963568249484524
    2. '   ' → logprob: -9.62511920928955
    3. ')
' → logprob: -10.37511920928955
    4. ' )' → logprob: -10.87511920928955
    5. '[' → logprob: -14.37511920928955
    6. '))' → logprob: -14.50011920928955
    7. ' ' → logprob: -14.87511920928955
    8. '#' → logprob: -15.00011920928955
    9. '()' → logprob: -15.62511920928955
    10. ']' → logprob: -15.75011920928955

Token 47: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16649127006530762
    2. ':' → logprob: -3.4164912700653076
    3. ' ' → logprob: -3.4164912700653076
    4. '[' → logprob: -3.5414912700653076
    5. ')' → logprob: -4.541491508483887
    6. '    
' → logprob: -4.791491508483887
    7. '<|end|>' → logprob: -4.916491508483887
    8. ' for' → logprob: -5.166491508483887
    9. 'for' → logprob: -5.291491508483887
    10. '    ' → logprob: -5.541491508483887

Token 48: ' total' (ID: 3609)
  Prédit: 'result'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'result' → logprob: -1.5560638904571533
    2. 'total' (adapté à ' total') → logprob: -1.6810638904571533
    3. 'discount' → logprob: -1.8060638904571533
    4. 'count' → logprob: -2.3060638904571533
    5. 'answer' → logprob: -2.6810638904571533
    6. 'max' → logprob: -3.6810638904571533
    7. ' result' → logprob: -3.8060638904571533
    8. 'for' → logprob: -3.9310638904571533
    9. ' total' → logprob: -3.9310638904571533
    10. 'if' → logprob: -3.9310638904571533

Token 49: ' =' (ID: 314)
  Prédit: ' +='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +=' → logprob: -0.5161057114601135
    2. ' =' → logprob: -1.1411056518554688
    3. '=' → logprob: -3.1411056518554688
    4. '_' → logprob: -3.8911056518554688
    5. '_price' → logprob: -4.641105651855469
    6. '+=' → logprob: -5.141105651855469
    7. ' -=' → logprob: -6.891105651855469
    8. '<|end|>' → logprob: -7.391105651855469
    9. '_prices' → logprob: -7.391105651855469
    10. ' ' → logprob: -7.641105651855469

Token 50: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5971267819404602
    2. '0' → logprob: -1.5971267223358154
    3. ' sum' → logprob: -2.2221267223358154
    4. ' prices' → logprob: -2.5971267223358154
    5. ' m' → logprob: -3.4721267223358154
    6. 'sum' → logprob: -4.3471269607543945
    7. 'prices' → logprob: -4.8471269607543945
    8. ' n' → logprob: -5.0971269607543945
    9. ' min' → logprob: -5.4721269607543945
    10. ' max' → logprob: -7.0971269607543945

Token 51: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.2173541784286499
    2. 'sum' → logprob: -2.0923542976379395
    3. 'prices' → logprob: -2.7173542976379395
    4. 'm' → logprob: -5.7173542976379395
    5. ' sum' → logprob: -7.2173542976379395
    6. ' ' → logprob: -7.7173542976379395
    7. ' prices' → logprob: -7.8423542976379395
    8. 'max' → logprob: -8.592353820800781
    9. '(sum' → logprob: -8.717353820800781
    10. '(pr' → logprob: -9.217353820800781

Token 52: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8668701648712158
    2. '<|end|>' → logprob: -0.8668701648712158
    3. ' for' → logprob: -2.991870164871216
    4. 'for' → logprob: -3.366870164871216
    5. '
' → logprob: -3.741870164871216
    6. ' ' → logprob: -3.991870164871216
    7. '    
' → logprob: -4.741869926452637
    8. '<|end|>' → logprob: -5.241869926452637
    9. ' 
' → logprob: -5.366869926452637
    10. '    ' → logprob: -5.991869926452637

Token 53: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13187213242053986
    2. 'for' → logprob: -2.7568721771240234
    3. ' for' → logprob: -3.0068721771240234
    4. '<|end|>' → logprob: -5.131872177124023
    5. ' ' → logprob: -7.131872177124023
    6. '    
' → logprob: -7.256872177124023
    7. '
' → logprob: -7.256872177124023
    8. '\n' → logprob: -7.381872177124023
    9. 'i' → logprob: -7.881872177124023
    10. '	for' → logprob: -8.006872177124023

Token 54: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.01004481315612793
    2. ' for' → logprob: -5.135045051574707
    3. 'i' → logprob: -5.760045051574707
    4. '   ' → logprob: -7.010045051574707
    5. ' i' → logprob: -10.135045051574707
    6. ' ' → logprob: -12.510045051574707
    7. '```' → logprob: -13.010045051574707
    8. 'while' → logprob: -13.135045051574707
    9. 'n' → logprob: -14.010045051574707
    10. '	for' → logprob: -14.135045051574707

Token 55: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.0014191613299772143
    2. 'i' → logprob: -6.6264190673828125
    3. ' _' → logprob: -10.001419067382812
    4. ' ' → logprob: -10.376419067382812
    5. '_' → logprob: -11.376419067382812
    6. '_i' → logprob: -13.001419067382812
    7. ' in' → logprob: -14.126419067382812
    8. '  ' → logprob: -14.126419067382812
    9. '	i' → logprob: -14.251419067382812
    10. ' price' → logprob: -15.126419067382812

Token 56: ',' (ID: 11)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.008921338245272636
    2. 'in' → logprob: -4.758921146392822
    3. ' ' → logprob: -8.13392162322998
    4. '  ' → logprob: -12.50892162322998
    5. '	in' → logprob: -12.88392162322998
    6. ',' → logprob: -13.13392162322998
    7. '   ' → logprob: -13.38392162322998
    8. ' i' → logprob: -14.00892162322998
    9. '    ' → logprob: -14.00892162322998
    10. 'In' → logprob: -15.00892162322998

Token 57: ' price' (ID: 3911)
  Prédit: 'price'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'price' → logprob: -0.23341476917266846
    2. ' price' → logprob: -1.6084147691726685
    3. 'p' → logprob: -5.108414649963379
    4. ' p' → logprob: -6.483414649963379
    5. 'v' → logprob: -8.983414649963379
    6. 'value' → logprob: -10.108414649963379
    7. 'count' → logprob: -10.358414649963379
    8. 'cost' → logprob: -10.358414649963379
    9. '```' → logprob: -10.608414649963379
    10. '	price' → logprob: -10.733414649963379

Token 58: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.07891666889190674
    2. 'in' → logprob: -2.578916549682617
    3. ' ' → logprob: -11.703916549682617
    4. ',' → logprob: -11.828916549682617
    5. 's' → logprob: -12.453916549682617
    6. '	in' → logprob: -13.203916549682617
    7. '   ' → logprob: -13.453916549682617
    8. '  ' → logprob: -14.078916549682617
    9. '```' → logprob: -14.578916549682617
    10. 'In' → logprob: -14.703916549682617

Token 59: ' enumerate' (ID: 29671)
  Prédit: ' enumerate'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' enumerate' → logprob: -0.12692883610725403
    2. 'enumer' → logprob: -2.1269288063049316
    3. 'Enumer' → logprob: -15.00192928314209
    4. '```' → logprob: -15.87692928314209
    5. '.enumer' → logprob: -16.126928329467773
    6. 'en' → logprob: -16.501928329467773
    7. '(en' → logprob: -16.876928329467773
    8. ' enumer' → logprob: -17.126928329467773
    9. 's' → logprob: -17.501928329467773
    10. 'enum' → logprob: -18.501928329467773

Token 60: '(pr' (ID: 38401)
  Prédit: '(pr'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(pr' → logprob: -7.612634362885728e-05
    2. '(' → logprob: -9.500076293945312
    3. '(price' → logprob: -14.875076293945312
    4. 'prices' → logprob: -15.250076293945312
    5. ' (' → logprob: -15.500076293945312
    6. '(s' → logprob: -15.750076293945312
    7. ')' → logprob: -15.875076293945312
    8. '	pr' → logprob: -16.375076293945312
    9. ' prices' → logprob: -17.750076293945312
    10. '(pl' → logprob: -18.000076293945312

Token 61: 'ices' (ID: 1386)
  Prédit: 'ices'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ices' → logprob: -0.3869234323501587
    2. 'ces' → logprob: -1.1369234323501587
    3. 'es' → logprob: -11.261923789978027
    4. 'ce' → logprob: -11.511923789978027
    5. 'cies' → logprob: -11.636923789978027
    6. '```' → logprob: -11.886923789978027
    7. 'ic' → logprob: -13.011923789978027
    8. ' ' → logprob: -13.386923789978027
    9. '   ' → logprob: -13.636923789978027
    10. ')' → logprob: -13.761923789978027

Token 62: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.018426407128572464
    2. ':' → logprob: -4.018426418304443
    3. '):
' → logprob: -8.518425941467285
    4. ')' → logprob: -9.768425941467285
    5. ' ):' → logprob: -11.643425941467285
    6. '   ' → logprob: -12.393425941467285
    7. ',' → logprob: -13.643425941467285
    8. ':**' → logprob: -14.018425941467285
    9. ':)' → logprob: -14.268425941467285
    10. '):

' → logprob: -14.393425941467285

Token 63: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.6518886089324951
    2. ' ' → logprob: -1.5268886089324951
    3. '    ' → logprob: -1.6518886089324951
    4. '   ' → logprob: -3.401888608932495
    5. ':' → logprob: -4.526888847351074
    6. '        ' → logprob: -5.276888847351074
    7. '<|end|>' → logprob: -5.526888847351074
    8. '  ' → logprob: -5.901888847351074
    9. ')' → logprob: -5.901888847351074
    10. ' 
' → logprob: -6.526888847351074

Token 64: ' if' (ID: 538)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5935841798782349
    2. ' if' → logprob: -1.5935841798782349
    3. '   ' → logprob: -2.4685840606689453
    4. '    ' → logprob: -2.5935840606689453
    5. 'if' (adapté à ' if') → logprob: -3.0935840606689453
    6. ' 
' → logprob: -4.468584060668945
    7. ' i' → logprob: -4.593584060668945
    8. ' (' → logprob: -5.343584060668945
    9. '  ' → logprob: -5.343584060668945
    10. ''' → logprob: -6.093584060668945

Token 65: ' (' (ID: 350)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.17046180367469788
    2. ' (' → logprob: -2.170461893081665
    3. '(i' → logprob: -3.920461893081665
    4. 'i' → logprob: -3.920461893081665
    5. '(' → logprob: -6.295461654663086
    6. ' ' → logprob: -6.920461654663086
    7. '   ' → logprob: -9.920461654663086
    8. '```' → logprob: -10.920461654663086
    9. '  ' → logprob: -11.795461654663086
    10. '	i' → logprob: -11.982961654663086

Token 66: 'i' (ID: 72)
  Prédit: '(i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(i' → logprob: -0.09424883872270584
    2. 'i' → logprob: -2.7192487716674805
    3. ' (' → logprob: -3.9692487716674805
    4. ' i' → logprob: -5.7192487716674805
    5. '(' → logprob: -6.7192487716674805
    6. '   ' → logprob: -7.8442487716674805
    7. '(m' → logprob: -9.21924877166748
    8. ' ' → logprob: -9.71924877166748
    9. ')' → logprob: -10.21924877166748
    10. 'm' → logprob: -11.46924877166748

Token 67: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.791330873966217
    2. ' %' → logprob: -0.916330873966217
    3. '%' → logprob: -2.0413308143615723
    4. ' +' → logprob: -4.166330814361572
    5. ')' → logprob: -6.791330814361572
    6. ' )' → logprob: -9.29133129119873
    7. ' ' → logprob: -9.41633129119873
    8. '```' → logprob: -10.29133129119873
    9. ')%' → logprob: -10.29133129119873
    10. ' ' → logprob: -11.04133129119873

Token 68: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.04303663969039917
    2. ' ' → logprob: -3.168036699295044
    3. ')' → logprob: -10.293036460876465
    4. ' ' → logprob: -14.168036460876465
    5. '<|end|>' → logprob: -14.293036460876465
    6. '```' → logprob: -14.918036460876465
    7. '2' → logprob: -15.355536460876465
    8. '-' → logprob: -15.355536460876465
    9. '=' → logprob: -15.418036460876465
    10. '   ' → logprob: -15.980536460876465

Token 69: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -5.32392441527918e-05
    2. ' ' → logprob: -9.875053405761719
    3. ')' → logprob: -14.125053405761719
    4. '3' → logprob: -15.375053405761719
    5. '2' → logprob: -15.750053405761719
    6. ' ' → logprob: -16.25005340576172
    7. '

' → logprob: -16.43755340576172
    8. '-' → logprob: -17.00005340576172
    9. '0' → logprob: -17.06255340576172
    10. '۱' → logprob: -17.25005340576172

Token 70: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.003975462168455124
    2. ' )' → logprob: -5.6289753913879395
    3. '%' → logprob: -8.503975868225098
    4. ')%' → logprob: -9.003975868225098
    5. ' %' → logprob: -10.128975868225098
    6. '```' → logprob: -12.753975868225098
    7. '%)' → logprob: -13.503975868225098
    8. ' ' → logprob: -13.628975868225098
    9. '`)' → logprob: -13.628975868225098
    10. '``' → logprob: -14.378975868225098

Token 71: ' %' (ID: 1851)
  Prédit: ' %'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' %' → logprob: -0.08989948779344559
    2. '%' → logprob: -2.4648995399475098
    3. ' ' → logprob: -6.96489953994751
    4. ' ' → logprob: -11.964899063110352
    5. ')' → logprob: -12.714899063110352
    6. '```' → logprob: -13.214899063110352
    7. ' %=' → logprob: -14.714899063110352
    8. ' %)' → logprob: -14.839899063110352
    9. '<|end|>' → logprob: -15.214899063110352
    10. ' 

' → logprob: -15.214899063110352

Token 72: ' m' (ID: 284)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.12969925999641418
    2. ' ' → logprob: -2.129699230194092
    3. 'm' → logprob: -6.254699230194092
    4. ' m' → logprob: -8.12969970703125
    5. '  ' → logprob: -8.50469970703125
    6. '```' → logprob: -9.12969970703125
    7. '(' → logprob: -9.75469970703125
    8. '(m' → logprob: -9.75469970703125
    9. '   ' → logprob: -10.37969970703125
    10. '4' → logprob: -11.12969970703125

Token 73: ' !=' (ID: 1666)
  Prédit: '!='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '!=' → logprob: -0.012623838149011135
    2. ' !=' → logprob: -4.7626237869262695
    3. '==' → logprob: -5.7626237869262695
    4. '=' → logprob: -7.1376237869262695
    5. '!' → logprob: -10.01262378692627
    6. ' ' → logprob: -12.26262378692627
    7. ' ==' → logprob: -12.38762378692627
    8. '=!' → logprob: -12.76262378692627
    9. '!=(' → logprob: -12.76262378692627
    10. '!='' → logprob: -13.76262378692627

Token 74: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.030655637383461
    2. ' ' → logprob: -3.5306556224823
    3. '=' → logprob: -7.030655860900879
    4. 'm' → logprob: -10.905655860900879
    5. ' m' → logprob: -14.030655860900879
    6. '==' → logprob: -15.405655860900879
    7. '```' → logprob: -15.780655860900879
    8. '1' → logprob: -15.780655860900879
    9. '_' → logprob: -16.155654907226562
    10. '3' → logprob: -16.155654907226562

Token 75: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0005104990559630096
    2. ' ' → logprob: -8.125510215759277
    3. '=' → logprob: -8.500510215759277
    4. 'm' → logprob: -11.500510215759277
    5. '```' → logprob: -14.625510215759277
    6. '1' → logprob: -15.500510215759277
    7. '==' → logprob: -16.500511169433594
    8. '_' → logprob: -16.875511169433594
    9. '۰' → logprob: -16.875511169433594
    10. ' m' → logprob: -17.125511169433594

Token 76: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0005060884868726134
    2. ' :' → logprob: -8.250506401062012
    3. ':
' → logprob: -8.375506401062012
    4. ' and' → logprob: -11.750506401062012
    5. '):' → logprob: -12.625506401062012
    6. ':**' → logprob: -14.250506401062012
    7. '<|end|>' → logprob: -14.750506401062012
    8. ' :
' → logprob: -14.750506401062012
    9. 'and' → logprob: -15.375506401062012
    10. ',' → logprob: -15.375506401062012

Token 77: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -1.0611591339111328
    2. 'total' → logprob: -1.3111591339111328
    3. '           ' → logprob: -1.6861591339111328
    4. ' total' → logprob: -1.9361591339111328
    5. ':' → logprob: -4.061159133911133
    6. ' ' → logprob: -4.936159133911133
    7. '   ' → logprob: -5.186159133911133
    8. '	total' → logprob: -5.311159133911133
    9. '<|end|>' → logprob: -5.311159133911133
    10. ':
' → logprob: -5.686159133911133

Token 78: ' total' (ID: 3609)
  Prédit: ' total'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' total' → logprob: -0.47526678442955017
    2. 'total' (adapté à ' total') → logprob: -0.9752668142318726
    3. '           ' → logprob: -7.975266933441162
    4. ' ' → logprob: -8.100266456604004
    5. '   ' → logprob: -8.600266456604004
    6. '               ' → logprob: -8.850266456604004
    7. ' ' → logprob: -9.225266456604004
    8. '       ' → logprob: -9.600266456604004
    9. '	total' → logprob: -10.475266456604004
    10. '(total' → logprob: -12.350266456604004

Token 79: ' +=' (ID: 2757)
  Prédit: '+='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+=' → logprob: -0.5241798758506775
    2. ' +=' → logprob: -0.8991798758506775
    3. '+' → logprob: -6.899179935455322
    4. ']+=' → logprob: -10.524179458618164
    5. '    ' → logprob: -11.774179458618164
    6. ' +' → logprob: -12.274179458618164
    7. '   ' → logprob: -13.524179458618164
    8. '```' → logprob: -13.649179458618164
    9. '=' → logprob: -13.774179458618164
    10. ' ' → logprob: -14.149179458618164

Token 80: ' price' (ID: 3911)
  Prédit: 'price'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'price' → logprob: -0.5759397745132446
    2. ' price' → logprob: -0.8259397745132446
    3. '	price' → logprob: -15.450940132141113
    4. ' ' → logprob: -16.075939178466797
    5. '(price' → logprob: -16.825939178466797
    6. ' ' → logprob: -19.075939178466797
    7. 'pr' → logprob: -19.200939178466797
    8. '   ' → logprob: -19.950939178466797
    9. 'prices' → logprob: -19.950939178466797
    10. '.price' → logprob: -20.075939178466797

Token 81: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.019135145470499992
    2. '\n' → logprob: -4.394134998321533
    3. '<|end|>' → logprob: -5.519134998321533
    4. 'print' → logprob: -7.144134998321533
    5. '   ' → logprob: -7.644134998321533
    6. '  
' → logprob: -8.019135475158691
    7. '    
' → logprob: -8.019135475158691
    8. ' 
' → logprob: -8.269135475158691
    9. 'newline' → logprob: -9.394135475158691
    10. '
' → logprob: -9.519135475158691

Token 82: '   ' (ID: 271)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.08593203127384186
    2. '\n' → logprob: -3.7109320163726807
    3. '<|end|>' → logprob: -3.8359320163726807
    4. '   ' → logprob: -4.08593225479126
    5. '
' → logprob: -4.21093225479126
    6. ' print' → logprob: -5.83593225479126
    7. '    
' → logprob: -7.96093225479126
    8. '\' → logprob: -8.210931777954102
    9. '```' → logprob: -8.460931777954102
    10. ')' → logprob: -8.585931777954102

Token 83: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.009232988581061363
    2. '<|end|>' → logprob: -5.634232997894287
    3. '\n' → logprob: -5.759232997894287
    4. ' print' → logprob: -6.634232997894287
    5. '
' → logprob: -7.259232997894287
    6. ')' → logprob: -8.634232521057129
    7. '   ' → logprob: -9.884232521057129
    8. ' ' → logprob: -10.009232521057129
    9. '  
' → logprob: -10.634232521057129
    10. '#print' → logprob: -11.009232521057129

Token 84: '(total' (ID: 39744)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0110715227201581
    2. '(total' → logprob: -4.511071681976318
    3. '('' → logprob: -11.26107120513916
    4. '("("' → logprob: -12.51107120513916
    5. '()' → logprob: -13.01107120513916
    6. '(`' → logprob: -13.38607120513916
    7. ' (' → logprob: -14.26107120513916
    8. '(f' → logprob: -14.38607120513916
    9. '((' → logprob: -14.76107120513916
    10. '(
' → logprob: -15.01107120513916

Token 85: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.093505099765025e-05
    2. ')
' → logprob: -10.875020980834961
    3. ' )' → logprob: -13.375020980834961
    4. '))' → logprob: -16.12502098083496
    5. ')`' → logprob: -16.12502098083496
    6. '`)' → logprob: -16.50002098083496
    7. '
' → logprob: -16.87502098083496
    8. '```' → logprob: -17.00002098083496
    9. ')

' → logprob: -17.12502098083496
    10. '<|end|>' → logprob: -17.75002098083496


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 83
Tokens correctement prédits (1ère position, stricte): 40
Tokens correctement prédits (1ère position, avec adaptation): 43
Tokens correctement prédits (top 10): 78
Précision stricte (1ère position): 48.19%
Précision adaptée (1ère position): 51.81%
Précision (top 10): 93.98%
================================================================================
