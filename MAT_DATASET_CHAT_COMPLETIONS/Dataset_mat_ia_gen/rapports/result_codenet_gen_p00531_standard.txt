================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:15:06
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
A=int(input())
B=int(input())
C=int(input())
D=int(input())
P=int(input())
cost_x = A * P
cost_y = B if P <= C else B + D * (P - C)
print(min(cost_x,cost_y))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'A' (ID: 32)
  → Token d'amorce (pas de prédiction)

Token 1: '=int' (ID: 37431)
  → Token d'amorce (pas de prédiction)

Token 2: '(input' (ID: 10054)
  → Token d'amorce (pas de prédiction)

Token 3: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.539362370967865
    2. '(' → logprob: -0.914362370967865
    3. '())' → logprob: -5.28936243057251
    4. '()' → logprob: -5.41436243057251
    5. '```' → logprob: -6.28936243057251
    6. '`)' → logprob: -7.03936243057251
    7. '`' → logprob: -7.16436243057251
    8. '<|end|>' → logprob: -7.53936243057251
    9. '(
' → logprob: -8.039361953735352
    10. '")' → logprob: -8.164361953735352

Token 4: 'B' (ID: 33)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.03840291500091553
    2. '*' → logprob: -3.413403034210205
    3. '+
' → logprob: -6.038403034210205
    4. '%' → logprob: -6.663403034210205
    5. '**' → logprob: -7.288403034210205
    6. '#' → logprob: -8.663402557373047
    7. '\n' → logprob: -9.663402557373047
    8. ')' → logprob: -10.538402557373047
    9. '-' → logprob: -10.538402557373047
    10. '\' → logprob: -10.788402557373047

Token 5: '=int' (ID: 37431)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.033492498099803925
    2. '=input' → logprob: -4.158492565155029
    3. '+' → logprob: -4.533492565155029
    4. ' =' → logprob: -5.658492565155029
    5. '=int' → logprob: -5.908492565155029
    6. '+=' → logprob: -8.658492088317871
    7. '*' → logprob: -8.908492088317871
    8. '=A' → logprob: -10.908492088317871
    9. '*=' → logprob: -11.908492088317871
    10. ')' → logprob: -12.283492088317871

Token 6: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.5761294364929199
    2. '(input' → logprob: -0.8261294364929199
    3. ' (' → logprob: -8.826129913330078
    4. '()' → logprob: -10.951129913330078
    5. '(
' → logprob: -11.951129913330078
    6. 'input' → logprob: -12.701129913330078
    7. '(

' → logprob: -13.201129913330078
    8. '(eval' → logprob: -13.576129913330078
    9. '(in' → logprob: -13.701129913330078
    10. '(user' → logprob: -13.826129913330078

Token 7: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.1833992898464203
    2. '()' → logprob: -1.8083993196487427
    3. ')' → logprob: -5.683399200439453
    4. ' ())' → logprob: -9.183399200439453
    5. '(' → logprob: -9.683399200439453
    6. '();)' → logprob: -10.683399200439453
    7. '()>' → logprob: -10.933399200439453
    8. '()))' → logprob: -10.933399200439453
    9. '());' → logprob: -12.933399200439453
    10. '()
' → logprob: -12.933399200439453

Token 8: 'C' (ID: 34)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.4794972538948059
    2. 'if' → logprob: -0.9794972538948059
    3. 'C' → logprob: -5.47949743270874
    4. 'sum' → logprob: -7.72949743270874
    5. 'c' → logprob: -8.354496955871582
    6. 'result' → logprob: -8.729496955871582
    7. 'for' → logprob: -8.854496955871582
    8. '```' → logprob: -9.104496955871582
    9. 's' → logprob: -9.354496955871582
    10. '
' → logprob: -11.854496955871582

Token 9: '=int' (ID: 37431)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.4005853831768036
    2. '+' → logprob: -1.275585412979126
    3. '*' → logprob: -3.525585412979126
    4. ' =' → logprob: -4.150585174560547
    5. ')' → logprob: -5.525585174560547
    6. '-' → logprob: -7.900585174560547
    7. ' +' → logprob: -8.525585174560547
    8. '+=' → logprob: -8.775585174560547
    9. '_' → logprob: -8.900585174560547
    10. '>' → logprob: -9.150585174560547

Token 10: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6677819490432739
    2. '(input' → logprob: -0.7927819490432739
    3. '()' → logprob: -3.4177818298339844
    4. ' (' → logprob: -7.792781829833984
    5. '(
' → logprob: -8.042781829833984
    6. ')' → logprob: -8.292781829833984
    7. '())' → logprob: -8.417781829833984
    8. 'input' → logprob: -8.667781829833984
    9. '=input' → logprob: -9.042781829833984
    10. '<input' → logprob: -10.542781829833984

Token 11: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.20583394169807434
    2. '()' → logprob: -2.205833911895752
    3. ')' → logprob: -2.580833911895752
    4. '(' → logprob: -10.08083438873291
    5. '`)' → logprob: -10.08083438873291
    6. ' ())' → logprob: -10.70583438873291
    7. '()))' → logprob: -11.45583438873291
    8. '()
' → logprob: -11.70583438873291
    9. '())
' → logprob: -11.83083438873291
    10. '();)' → logprob: -12.08083438873291

Token 12: 'D' (ID: 35)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.5895468592643738
    2. 'sum' → logprob: -1.4645469188690186
    3. 'total' → logprob: -2.4645469188690186
    4. 's' → logprob: -2.8395469188690186
    5. 'D' → logprob: -3.0895469188690186
    6. 'print' → logprob: -4.4645466804504395
    7. 'max' → logprob: -5.3395466804504395
    8. 'S' → logprob: -5.8395466804504395
    9. 'result' → logprob: -6.0895466804504395
    10. 't' → logprob: -7.3395466804504395

Token 13: '=int' (ID: 37431)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.09004440158605576
    2. ' =' → logprob: -3.0900444984436035
    3. '=int' → logprob: -3.2150444984436035
    4. '=input' → logprob: -7.7150444984436035
    5. '=float' → logprob: -13.715044021606445
    6. '=

' → logprob: -13.715044021606445
    7. '+=' → logprob: -14.090044021606445
    8. ')' → logprob: -14.215044021606445
    9. '=}' → logprob: -14.340044021606445
    10. '＝' → logprob: -14.340044021606445

Token 14: '(input' (ID: 10054)
  Prédit: '(input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.39096352458000183
    2. '(' → logprob: -1.1409635543823242
    3. '()' → logprob: -5.765963554382324
    4. '(
' → logprob: -8.015963554382324
    5. 'input' → logprob: -8.515963554382324
    6. ' (' → logprob: -8.765963554382324
    7. '(int' → logprob: -9.890963554382324
    8. ')' → logprob: -10.015963554382324
    9. '('' → logprob: -10.640963554382324
    10. '=input' → logprob: -10.765963554382324

Token 15: '())
' (ID: 4574)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.17589522898197174
    2. '()' → logprob: -2.0508952140808105
    3. ')' → logprob: -3.4258952140808105
    4. '(' → logprob: -10.425895690917969
    5. ' ())' → logprob: -10.425895690917969
    6. '()
' → logprob: -10.550895690917969
    7. '()>' → logprob: -11.175895690917969
    8. '())
' → logprob: -11.425895690917969
    9. ' )' → logprob: -11.675895690917969
    10. '`)' → logprob: -11.800895690917969

Token 16: 'P' (ID: 47)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.6129587888717651
    2. 'result' → logprob: -2.3629589080810547
    3. 'total' → logprob: -2.3629589080810547
    4. 'sum' → logprob: -2.3629589080810547
    5. 'E' → logprob: -2.8629589080810547
    6. 'print' → logprob: -3.2379589080810547
    7. 's' → logprob: -4.112958908081055
    8. 'diff' → logprob: -4.237958908081055
    9. 'difference' → logprob: -4.612958908081055
    10. 'area' → logprob: -4.987958908081055

Token 17: '=int' (ID: 37431)
  Prédit: 'r'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'r' → logprob: -0.5360181331634521
    2. '=' → logprob: -1.1610181331634521
    3. '=r' → logprob: -3.161018133163452
    4. ' =' → logprob: -3.661018133163452
    5. '=A' → logprob: -4.536018371582031
    6. '=int' → logprob: -4.911018371582031
    7. '=(' → logprob: -4.911018371582031
    8. 'R' → logprob: -6.036018371582031
    9. '=C' → logprob: -7.286018371582031
    10. '1' → logprob: -7.661018371582031

Token 18: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.25911638140678406
    2. '(input' → logprob: -1.8841164112091064
    3. '()' → logprob: -2.6341164112091064
    4. '('' → logprob: -6.384116172790527
    5. 'input' → logprob: -6.509116172790527
    6. ' (' → logprob: -8.009116172790527
    7. '(int' → logprob: -8.384116172790527
    8. ' ()' → logprob: -8.884116172790527
    9. '("' → logprob: -9.259116172790527
    10. '((' → logprob: -9.509116172790527

Token 19: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.16640043258666992
    2. '()' → logprob: -2.04140043258667
    3. '())' → logprob: -3.79140043258667
    4. '(' → logprob: -7.16640043258667
    5. ' )' → logprob: -10.041400909423828
    6. '`)' → logprob: -10.791400909423828
    7. '))' → logprob: -12.041400909423828
    8. '()
' → logprob: -12.041400909423828
    9. '>' → logprob: -12.541400909423828
    10. '*' → logprob: -12.541400909423828

Token 20: 'cost' (ID: 33457)
  Prédit: 'total'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'total' → logprob: -0.9325835704803467
    2. 'if' → logprob: -1.0575835704803467
    3. 'sum' → logprob: -2.5575835704803467
    4. 'x' → logprob: -3.6825835704803467
    5. 'price' → logprob: -3.6825835704803467
    6. 's' → logprob: -4.557583808898926
    7. ' if' → logprob: -4.682583808898926
    8. 'print' → logprob: -4.682583808898926
    9. 'result' → logprob: -4.682583808898926
    10. 'E' → logprob: -4.807583808898926

Token 21: '_x' (ID: 7054)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.20339106023311615
    2. ' =' → logprob: -1.7033910751342773
    3. '_' → logprob: -6.453391075134277
    4. '1' → logprob: -9.078391075134277
    5. 'A' → logprob: -9.203391075134277
    6. '=A' → logprob: -10.078391075134277
    7. '_A' → logprob: -10.578391075134277
    8. '_total' → logprob: -10.828391075134277
    9. '_=' → logprob: -10.953391075134277
    10. '=sum' → logprob: -11.578391075134277

Token 22: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5385136604309082
    2. ' =' → logprob: -0.9135136604309082
    3. '_' → logprob: -5.163513660430908
    4. '_x' → logprob: -5.288513660430908
    5. '1' → logprob: -6.163513660430908
    6. 'A' → logprob: -7.038513660430908
    7. '_=' → logprob: -8.16351318359375
    8. '=A' → logprob: -8.66351318359375
    9. ' ' → logprob: -8.78851318359375
    10. '_a' → logprob: -9.16351318359375

Token 23: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.19240905344486237
    2. 'min' → logprob: -2.567409038543701
    3. 'C' → logprob: -3.317409038543701
    4. 'B' → logprob: -3.442409038543701
    5. 'X' → logprob: -4.692409038543701
    6. '(A' → logprob: -4.692409038543701
    7. ' A' → logprob: -5.942409038543701
    8. ' min' → logprob: -6.067409038543701
    9. '(min' → logprob: -6.067409038543701
    10. 'D' → logprob: -6.692409038543701

Token 24: ' *' (ID: 425)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.009224479086697102
    2. ' *' → logprob: -4.7592244148254395
    3. '+' → logprob: -7.6342244148254395
    4. ' +' → logprob: -10.259224891662598
    5. '*x' → logprob: -10.634224891662598
    6. '*C' → logprob: -10.884224891662598
    7. '*p' → logprob: -11.384224891662598
    8. '*A' → logprob: -11.384224891662598
    9. '*(' → logprob: -12.259224891662598
    10. '-' → logprob: -12.884224891662598

Token 25: ' P' (ID: 398)
  Prédit: 'P'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'P' → logprob: -0.0007550701266154647
    2. 'X' → logprob: -8.250755310058594
    3. ' P' → logprob: -8.875755310058594
    4. 'x' → logprob: -9.125755310058594
    5. 'D' → logprob: -9.375755310058594
    6. 'B' → logprob: -9.625755310058594
    7. 'C' → logprob: -9.625755310058594
    8. '100' → logprob: -11.875755310058594
    9. '```' → logprob: -12.375755310058594
    10. ' ' → logprob: -12.750755310058594

Token 26: '
' (ID: 198)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.06935735791921616
    2. ' +' → logprob: -3.319357395172119
    3. '<|end|>' → logprob: -3.569357395172119
    4. '+B' → logprob: -7.194357395172119
    5. '+C' → logprob: -7.319357395172119
    6. '
' → logprob: -8.069356918334961
    7. '+
' → logprob: -8.569356918334961
    8. ' ' → logprob: -9.444356918334961
    9. '*' → logprob: -9.569356918334961
    10. '\n' → logprob: -9.569356918334961

Token 27: 'cost' (ID: 33457)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.0358063206076622
    2. ' +' → logprob: -4.035806179046631
    3. '<|end|>' → logprob: -4.535806179046631
    4. ' ' → logprob: -5.910806179046631
    5. 'if' → logprob: -7.535806179046631
    6. '\n' → logprob: -7.535806179046631
    7. ' if' → logprob: -7.785806179046631
    8. '+
' → logprob: -7.910806179046631
    9. '*' → logprob: -7.910806179046631
    10. '+B' → logprob: -8.160806655883789

Token 28: '_y' (ID: 9410)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.015207096934318542
    2. '_y' → logprob: -4.640207290649414
    3. '_x' → logprob: -5.265207290649414
    4. '_Y' → logprob: -9.765207290649414
    5. ' _' → logprob: -10.015207290649414
    6. 'Y' → logprob: -10.015207290649414
    7. 'x' → logprob: -11.390207290649414
    8. '*' → logprob: -11.390207290649414
    9. '_s' → logprob: -11.640207290649414
    10. 'y' → logprob: -11.765207290649414

Token 29: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.020542822778224945
    2. '=' → logprob: -3.895542860031128
    3. ' ' → logprob: -14.145543098449707
    4. '<|end|>' → logprob: -16.89554214477539
    5. '_' → logprob: -17.27054214477539
    6. ')' → logprob: -17.39554214477539
    7. '=int' → logprob: -17.77054214477539
    8. ' =
' → logprob: -17.89554214477539
    9. '＝' → logprob: -18.14554214477539
    10. 'space' → logprob: -18.27054214477539

Token 30: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.012326332740485668
    2. ' B' → logprob: -4.637326240539551
    3. 'D' → logprob: -6.387326240539551
    4. 'C' → logprob: -7.137326240539551
    5. 'min' → logprob: -10.76232624053955
    6. ' ' → logprob: -10.88732624053955
    7. ' D' → logprob: -11.51232624053955
    8. 'P' → logprob: -11.63732624053955
    9. ' C' → logprob: -12.01232624053955
    10. '   ' → logprob: -12.13732624053955

Token 31: ' if' (ID: 538)
  Prédit: ' *'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' *' → logprob: -0.25879114866256714
    2. '*' → logprob: -1.758791208267212
    3. '<|end|>' → logprob: -3.133791208267212
    4. ' +' → logprob: -4.508790969848633
    5. '+' → logprob: -7.008790969848633
    6. '<|end|>' → logprob: -9.258790969848633
    7. ' ' → logprob: -10.258790969848633
    8. '//' → logprob: -10.883790969848633
    9. ' //' → logprob: -10.883790969848633
    10. ' if' → logprob: -10.883790969848633

Token 32: ' P' (ID: 398)
  Prédit: ' P'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' P' → logprob: -0.01859797164797783
    2. 'P' → logprob: -4.2685980796813965
    3. ' C' → logprob: -5.7685980796813965
    4. ' D' → logprob: -7.2685980796813965
    5. ' ' → logprob: -7.6435980796813965
    6. 'C' → logprob: -10.268597602844238
    7. ' (' → logprob: -10.393597602844238
    8. 'D' → logprob: -11.206097602844238
    9. ' ' → logprob: -11.456097602844238
    10. '  ' → logprob: -12.081097602844238

Token 33: ' <=' (ID: 5017)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>' → logprob: -0.4208779036998749
    2. '<' → logprob: -1.2958779335021973
    3. '<=' → logprob: -2.9208779335021973
    4. '>=' → logprob: -4.795877933502197
    5. ' >' → logprob: -5.170877933502197
    6. ' <' → logprob: -6.920877933502197
    7. ' <=' → logprob: -7.045877933502197
    8. ' >=' → logprob: -9.045877456665039
    9. ' ' → logprob: -11.420877456665039
    10. '<Q' → logprob: -12.045877456665039

Token 34: ' C' (ID: 363)
  Prédit: 'C'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'C' → logprob: -0.051516685634851456
    2. 'D' → logprob: -3.4265167713165283
    3. ' C' → logprob: -4.051516532897949
    4. ' D' → logprob: -8.17651653289795
    5. ' ' → logprob: -10.80151653289795
    6. '20' → logprob: -12.67651653289795
    7. '100' → logprob: -13.05151653289795
    8. '10' → logprob: -13.42651653289795
    9. '	C' → logprob: -13.67651653289795
    10. '  ' → logprob: -13.80151653289795

Token 35: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.4742957353591919
    2. 'else' → logprob: -0.9742957353591919
    3. '<|end|>' → logprob: -8.849295616149902
    4. '+' → logprob: -9.849295616149902
    5. '	else' → logprob: -11.849295616149902
    6. '*' → logprob: -11.974295616149902
    7. '_else' → logprob: -12.099295616149902
    8. 'elif' → logprob: -14.099295616149902
    9. '<|end|>' → logprob: -14.099295616149902
    10. ' ' → logprob: -14.349295616149902

Token 36: ' B' (ID: 418)
  Prédit: ' B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.42881345748901367
    2. 'B' → logprob: -1.0538134574890137
    3. ' ' → logprob: -10.553813934326172
    4. ' D' → logprob: -10.678813934326172
    5. 'D' → logprob: -10.803813934326172
    6. '(B' → logprob: -11.303813934326172
    7. ' (' → logprob: -11.553813934326172
    8. 'b' → logprob: -12.678813934326172
    9. '>B' → logprob: -12.741313934326172
    10. '(' → logprob: -12.928813934326172

Token 37: ' +' (ID: 659)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.0356479287147522
    2. ' +' → logprob: -3.4106478691101074
    3. '+D' → logprob: -6.410647869110107
    4. '*' → logprob: -8.660648345947266
    5. '+(' → logprob: -9.535648345947266
    6. '+C' → logprob: -9.785648345947266
    7. '+B' → logprob: -10.285648345947266
    8. ' ' → logprob: -12.160648345947266
    9. 'D' → logprob: -12.910648345947266
    10. ' plus' → logprob: -13.285648345947266

Token 38: ' D' (ID: 415)
  Prédit: 'D'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'D' → logprob: -0.3956276774406433
    2. '(D' → logprob: -1.145627737045288
    3. ' D' → logprob: -5.145627498626709
    4. ' (' → logprob: -6.145627498626709
    5. '(' → logprob: -8.020627975463867
    6. '(B' → logprob: -8.895627975463867
    7. ' ' → logprob: -9.395627975463867
    8. '(P' → logprob: -9.520627975463867
    9. '((' → logprob: -9.895627975463867
    10. '[D' → logprob: -11.895627975463867

Token 39: ' *' (ID: 425)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 40: ' (' (ID: 350)
  Prédit: '(P'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(P' → logprob: -0.04537821561098099
    2. ' (' → logprob: -3.5453782081604004
    3. '(' → logprob: -4.1703782081604
    4. '(max' → logprob: -10.670378684997559
    5. ' ' → logprob: -11.670378684997559
    6. '(p' → logprob: -12.170378684997559
    7. '(abs' → logprob: -12.670378684997559
    8. '(C' → logprob: -12.670378684997559
    9. '(int' → logprob: -13.170378684997559
    10. '((' → logprob: -13.170378684997559

Token 41: 'P' (ID: 47)
  Prédit: '(P'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(P' → logprob: -0.04412468895316124
    2. ' (' → logprob: -3.6691246032714844
    3. '(' → logprob: -4.294124603271484
    4. 'P' → logprob: -5.669124603271484
    5. ' P' → logprob: -7.669124603271484
    6. ' ' → logprob: -10.669124603271484
    7. '(
' → logprob: -11.044124603271484
    8. '(max' → logprob: -11.419124603271484
    9. ')' → logprob: -11.669124603271484
    10. '((' → logprob: -11.919124603271484

Token 42: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.25413089990615845
    2. ' -' → logprob: -1.5041308403015137
    3. '-C' → logprob: -6.129130840301514
    4. ' ' → logprob: -10.879131317138672
    5. '<|end|>' → logprob: -14.004131317138672
    6. ' ' → logprob: -15.004131317138672
    7. '-)' → logprob: -15.879131317138672
    8. '-c' → logprob: -16.004131317138672
    9. '>C' → logprob: -16.379131317138672
    10. ')' → logprob: -16.629131317138672

Token 43: ' C' (ID: 363)
  Prédit: 'C'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'C' → logprob: -0.008620720356702805
    2. ' C' → logprob: -4.758620738983154
    3. ' ' → logprob: -12.633620262145996
    4. 'c' → logprob: -13.133620262145996
    5. ')' → logprob: -14.633620262145996
    6. '  ' → logprob: -16.133621215820312
    7. '   ' → logprob: -16.883621215820312
    8. '	C' → logprob: -16.883621215820312
    9. ' ' → logprob: -17.008621215820312
    10. '>C' → logprob: -17.133621215820312

Token 44: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -2.3676733690081164e-05
    2. ' )' → logprob: -10.75002384185791
    3. ')
' → logprob: -13.87502384185791
    4. ')#' → logprob: -15.37502384185791
    5. ')*' → logprob: -15.62502384185791
    6. ')**' → logprob: -15.87502384185791
    7. ')

' → logprob: -15.87502384185791
    8. '*' → logprob: -15.87502384185791
    9. '<|end|>' → logprob: -16.000022888183594
    10. ')`' → logprob: -16.500022888183594

Token 45: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.10280084609985352
    2. '<|end|>' → logprob: -2.9778008460998535
    3. '
' → logprob: -3.1028008460998535
    4. '\n' → logprob: -7.2278008460998535
    5. ' print' → logprob: -8.227800369262695
    6. '
' → logprob: -8.602800369262695
    7. ')' → logprob: -8.602800369262695
    8. '```' → logprob: -9.352800369262695
    9. '' → logprob: -9.477800369262695
    10. '#' → logprob: -9.477800369262695

Token 46: '(min' (ID: 26035)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.02977108582854271
    2. '(cost' → logprob: -3.529771089553833
    3. '((' → logprob: -11.654770851135254
    4. '("("' → logprob: -12.654770851135254
    5. '('' → logprob: -13.029770851135254
    6. '(f' → logprob: -13.404770851135254
    7. '(
' → logprob: -14.154770851135254
    8. '(c' → logprob: -14.154770851135254
    9. '(

' → logprob: -14.154770851135254
    10. '(max' → logprob: -14.279770851135254

Token 47: '(cost' (ID: 133554)
  Prédit: '(cost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(cost' → logprob: -0.2014167606830597
    2. '(' → logprob: -1.7014167308807373
    3. '_cost' → logprob: -13.451416969299316
    4. '(c' → logprob: -15.076416969299316
    5. ')' → logprob: -15.201416969299316
    6. '(

' → logprob: -15.576416969299316
    7. '(_' → logprob: -15.701416969299316
    8. '(
' → logprob: -15.701416969299316
    9. 'cost' → logprob: -15.951416969299316
    10. ' (' → logprob: -16.076416015625

Token 48: '_x' (ID: 7054)
  Prédit: '_x'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_x' → logprob: -8.602024900028482e-05
    2. '_cost' → logprob: -9.625085830688477
    3. '_' → logprob: -11.250085830688477
    4. '(cost' → logprob: -12.125085830688477
    5. '_y' → logprob: -14.250085830688477
    6. 'cost' → logprob: -15.625085830688477
    7. '_)' → logprob: -16.000085830688477
    8. '(_' → logprob: -16.250085830688477
    9. ' _' → logprob: -16.625085830688477
    10. '_,' → logprob: -16.875085830688477

Token 49: ',c' (ID: 22261)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0004734486574307084
    2. ' ,' → logprob: -7.750473499298096
    3. ',c' → logprob: -10.250473022460938
    4. ')' → logprob: -12.625473022460938
    5. '))' → logprob: -13.000473022460938
    6. '),' → logprob: -14.875473022460938
    7. ' cost' → logprob: -15.500473022460938
    8. ',)' → logprob: -15.625473022460938
    9. ',
' → logprob: -15.750473022460938
    10. 'cost' → logprob: -16.125473022460938

Token 50: 'ost' (ID: 564)
  Prédit: 'ost'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ost' → logprob: -1.2664456789934775e-06
    2. '_cost' → logprob: -14.125000953674316
    3. 'cost' → logprob: -15.625000953674316
    4. 'o' → logprob: -15.625000953674316
    5. ' ost' → logprob: -16.625001907348633
    6. 'ост' → logprob: -16.750001907348633
    7. '_' → logprob: -16.750001907348633
    8. 'os' → logprob: -17.250001907348633
    9. '(cost' → logprob: -18.125001907348633
    10. '```' → logprob: -18.375001907348633

Token 51: '_y' (ID: 9410)
  Prédit: '_y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_y' → logprob: -3.054500666621607e-06
    2. '_' → logprob: -13.62500286102295
    3. '_x' → logprob: -13.75000286102295
    4. 'y' → logprob: -14.12500286102295
    5. ' _' → logprob: -17.750003814697266
    6. ')' → logprob: -18.250003814697266
    7. ')_' → logprob: -18.875003814697266
    8. '))' → logprob: -19.500003814697266
    9. '_)' → logprob: -19.500003814697266
    10. '_o' → logprob: -19.750003814697266

Token 52: '))' (ID: 915)
  Prédit: '))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.20141547918319702
    2. ')' → logprob: -1.7014155387878418
    3. '))
' → logprob: -14.076415061950684
    4. ')))' → logprob: -14.076415061950684
    5. ')
' → logprob: -14.701415061950684
    6. ' ))' → logprob: -16.576416015625
    7. ' )' → logprob: -16.701416015625
    8. '),' → logprob: -17.076416015625
    9. ')}' → logprob: -17.701416015625
    10. '])' → logprob: -17.826416015625


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 50
Tokens correctement prédits (1ère position, stricte): 11
Tokens correctement prédits (1ère position, avec adaptation): 11
Tokens correctement prédits (top 10): 39
Précision stricte (1ère position): 22.00%
Précision adaptée (1ère position): 22.00%
Précision (top 10): 78.00%
================================================================================
