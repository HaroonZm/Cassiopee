================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:15:35
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
m,n=map(int,input().split())
print(max(sum(map(int,input().split())) for _ in range(m)))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'm' (ID: 76)
  → Token d'amorce (pas de prédiction)

Token 1: ',n' (ID: 18103)
  → Token d'amorce (pas de prédiction)

Token 2: '=' (ID: 28)
  → Token d'amorce (pas de prédiction)

Token 3: 'map' (ID: 3726)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.0787765383720398
    2. ' ' → logprob: -3.4537765979766846
    3. 'map' → logprob: -3.9537765979766846
    4. '10' → logprob: -4.2037763595581055
    5. '5' → logprob: -5.3287763595581055
    6. '1' → logprob: -6.4537763595581055
    7. ' map' → logprob: -6.5787763595581055
    8. 'input' → logprob: -7.0787763595581055
    9. '2' → logprob: -7.8287763595581055
    10. 'm' → logprob: -8.078776359558105

Token 4: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.023634426295757294
    2. '(int' → logprob: -4.398634433746338
    3. '(str' → logprob: -5.023634433746338
    4. '(lambda' → logprob: -5.523634433746338
    5. '<|end|>' → logprob: -9.39863395690918
    6. '```' → logprob: -9.77363395690918
    7. '(input' → logprob: -10.39863395690918
    8. '[int' → logprob: -10.39863395690918
    9. '(len' → logprob: -10.77363395690918
    10. '(eval' → logprob: -10.77363395690918

Token 5: ',input' (ID: 123014)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.05608503520488739
    2. 'input' → logprob: -3.1810851097106934
    3. ')' → logprob: -4.931085109710693
    4. ',input' → logprob: -5.431085109710693
    5. '(' → logprob: -7.556085109710693
    6. ' input' → logprob: -7.681085109710693
    7. '=input' → logprob: -8.556084632873535
    8. ',' → logprob: -9.806084632873535
    9. '`)' → logprob: -10.306084632873535
    10. '[input' → logprob: -10.306084632873535

Token 6: '().' (ID: 1454)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.8800333142280579
    2. '()' → logprob: -1.255033254623413
    3. '(' → logprob: -1.880033254623413
    4. ')' → logprob: -2.005033254623413
    5. '().' → logprob: -6.505033493041992
    6. '());' → logprob: -6.630033493041992
    7. '()">' → logprob: -6.755033493041992
    8. '`()' → logprob: -7.005033493041992
    9. '();)' → logprob: -7.380033493041992
    10. '(()' → logprob: -7.380033493041992

Token 7: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00014478032244369388
    2. 'strip' → logprob: -9.125144958496094
    3. ')' → logprob: -11.000144958496094
    4. ' split' → logprob: -11.625144958496094
    5. '(split' → logprob: -12.000144958496094
    6. 'rstrip' → logprob: -12.625144958496094
    7. 'spl' → logprob: -15.375144958496094
    8. 'read' → logprob: -15.750144958496094
    9. 'plit' → logprob: -16.125144958496094
    10. '```' → logprob: -16.625144958496094

Token 8: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.08292245864868164
    2. '())' → logprob: -2.8329224586486816
    3. '))' → logprob: -3.9579224586486816
    4. '()' → logprob: -6.832922458648682
    5. '`)' → logprob: -8.457921981811523
    6. '()))' → logprob: -8.707921981811523
    7. '(' → logprob: -9.457921981811523
    8. ')`' → logprob: -10.957921981811523
    9. '>)' → logprob: -11.457921981811523
    10. '')' → logprob: -11.832921981811523

Token 9: 'print' (ID: 1598)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -1.6929502487182617
    2. ' ' → logprob: -1.9429502487182617
    3. 'a' → logprob: -2.0679502487182617
    4. 'if' → logprob: -2.3179502487182617
    5. ',' → logprob: -2.5679502487182617
    6. ''' → logprob: -2.5679502487182617
    7. '`' → logprob: -3.3179502487182617
    8. '\n' → logprob: -3.4429502487182617
    9. '#' → logprob: -3.5679502487182617
    10. 's' → logprob: -3.6929502487182617

Token 10: '(max' (ID: 17178)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0009149204124696553
    2. '('' → logprob: -7.500915050506592
    3. '("("' → logprob: -8.000914573669434
    4. '((' → logprob: -11.500914573669434
    5. '()' → logprob: -12.000914573669434
    6. '("""' → logprob: -13.500914573669434
    7. '(`' → logprob: -13.750914573669434
    8. '(m' → logprob: -13.875914573669434
    9. '("' → logprob: -13.875914573669434
    10. '(input' → logprob: -14.250914573669434

Token 11: '(sum' (ID: 45528)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004127911292016506
    2. '(m' → logprob: -6.2541279792785645
    3. '()' → logprob: -6.6291279792785645
    4. '(n' → logprob: -7.3791279792785645
    5. '((' → logprob: -10.004127502441406
    6. '(a' → logprob: -10.004127502441406
    7. ')' → logprob: -10.254127502441406
    8. '())' → logprob: -10.879127502441406
    9. '(len' → logprob: -11.254127502441406
    10. '(range' → logprob: -11.504127502441406

Token 12: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10252567380666733
    2. '([' → logprob: -2.7275257110595703
    3. '(a' → logprob: -3.8525257110595703
    4. '(range' → logprob: -5.47752571105957
    5. '(map' → logprob: -6.22752571105957
    6. '((' → logprob: -6.85252571105957
    7. '(m' → logprob: -6.97752571105957
    8. '(int' → logprob: -7.35252571105957
    9. '(list' → logprob: -8.10252571105957
    10. '(i' → logprob: -8.47752571105957

Token 13: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.007728241849690676
    2. '(' → logprob: -5.132728099822998
    3. '(lambda' → logprob: -6.507728099822998
    4. '(list' → logprob: -8.257728576660156
    5. '(abs' → logprob: -10.507728576660156
    6. ',int' → logprob: -12.132728576660156
    7. '(ord' → logprob: -12.257728576660156
    8. '(
' → logprob: -13.632728576660156
    9. 'int' → logprob: -13.757728576660156
    10. '(str' → logprob: -14.007728576660156

Token 14: ',input' (ID: 123014)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.021664751693606377
    2. '(' → logprob: -4.396664619445801
    3. ',input' → logprob: -4.771664619445801
    4. 'input' → logprob: -7.771664619445801
    5. ',' → logprob: -9.2716646194458
    6. ')' → logprob: -10.6466646194458
    7. '(x' → logprob: -10.8966646194458
    8. '(n' → logprob: -11.5216646194458
    9. '(list' → logprob: -11.5216646194458
    10. ' (' → logprob: -11.8966646194458

Token 15: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0002738522016443312
    2. '()))' → logprob: -9.125273704528809
    3. '()' → logprob: -9.250273704528809
    4. '())))' → logprob: -10.000273704528809
    5. '())' → logprob: -10.875273704528809
    6. '()),' → logprob: -12.750273704528809
    7. '()));' → logprob: -14.125273704528809
    8. '())).' → logprob: -15.625273704528809
    9. '(' → logprob: -15.875273704528809
    10. '()-' → logprob: -16.375274658203125

Token 16: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00012976066500414163
    2. 'strip' → logprob: -10.000129699707031
    3. 'read' → logprob: -10.125129699707031
    4. 'rstrip' → logprob: -10.125129699707031
    5. ' split' → logprob: -12.750129699707031
    6. '(split' → logprob: -13.625129699707031
    7. ' readline' → logprob: -16.87512969970703
    8. '.readline' → logprob: -17.50012969970703
    9. 'spl' → logprob: -17.50012969970703
    10. '.split' → logprob: -18.25012969970703

Token 17: '()))' (ID: 16829)
  Prédit: '()))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.8392906785011292
    2. '())))' → logprob: -1.7142906188964844
    3. '()),' → logprob: -1.9642906188964844
    4. '()' → logprob: -2.2142906188964844
    5. '())' → logprob: -2.2142906188964844
    6. '(' → logprob: -4.589290618896484
    7. ')))' → logprob: -4.964290618896484
    8. '),' → logprob: -5.589290618896484
    9. ')' → logprob: -5.839290618896484
    10. '))' → logprob: -5.964290618896484

Token 18: ' for' (ID: 395)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5439484119415283
    2. '))' → logprob: -0.9189484119415283
    3. '(' → logprob: -4.418948173522949
    4. ',' → logprob: -5.293948173522949
    5. ')))' → logprob: -7.043948173522949
    6. '()))' → logprob: -7.168948173522949
    7. '())' → logprob: -7.793948173522949
    8. '[' → logprob: -8.29394817352295
    9. '()' → logprob: -8.41894817352295
    10. '),' → logprob: -8.54394817352295

Token 19: ' _' (ID: 1175)
  Prédit: ' range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.09245338290929794
    2. '_' → logprob: -2.5924534797668457
    3. 'range' → logprob: -5.092453479766846
    4. ' _' → logprob: -5.217453479766846
    5. '_range' → logprob: -6.342453479766846
    6. ' xrange' → logprob: -10.092453002929688
    7. '(range' → logprob: -10.092453002929688
    8. '	range' → logprob: -10.467453002929688
    9. ' in' → logprob: -11.342453002929688
    10. ' ' → logprob: -12.342453002929688

Token 20: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.08552117645740509
    2. ' range' → logprob: -2.5855212211608887
    3. 'range' → logprob: -5.460521221160889
    4. 'in' → logprob: -6.710521221160889
    5. ' ' → logprob: -7.835521221160889
    6. '<|end|>' → logprob: -7.835521221160889
    7. '_' → logprob: -8.96052074432373
    8. ')' → logprob: -9.08552074432373
    9. ' xrange' → logprob: -10.46052074432373
    10. '_range' → logprob: -10.83552074432373

Token 21: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.003178544342517853
    2. ' range' → logprob: -5.753178596496582
    3. '	range' → logprob: -14.253178596496582
    4. '(range' → logprob: -16.503177642822266
    5. '_range' → logprob: -17.378177642822266
    6. ' ' → logprob: -18.253177642822266
    7. 'rang' → logprob: -18.503177642822266
    8. '.range' → logprob: -18.628177642822266
    9. 'm' → logprob: -19.003177642822266
    10. ')' → logprob: -19.003177642822266

Token 22: '(m' (ID: 2145)
  Prédit: '(n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(n' → logprob: -0.10630018264055252
    2. '(' → logprob: -2.356300115585327
    3. '(m' → logprob: -5.106300354003906
    4. '(
' → logprob: -11.981300354003906
    5. ' (' → logprob: -12.481300354003906
    6. ')' → logprob: -13.481300354003906
    7. 'n' → logprob: -13.606300354003906
    8. '(len' → logprob: -13.981300354003906
    9. 'm' → logprob: -14.481300354003906
    10. '((' → logprob: -14.606300354003906

Token 23: ')))' (ID: 15975)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.0791824609041214
    2. ')' → logprob: -2.5791823863983154
    3. ')))' → logprob: -8.204182624816895
    4. '),' → logprob: -11.954182624816895
    5. ')>' → logprob: -12.829182624816895
    6. '):' → logprob: -13.454182624816895
    7. '))
' → logprob: -13.579182624816895
    8. ''))' → logprob: -13.954182624816895
    9. ' ))' → logprob: -14.204182624816895
    10. ')n' → logprob: -14.204182624816895


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 21
Tokens correctement prédits (1ère position, stricte): 6
Tokens correctement prédits (1ère position, avec adaptation): 6
Tokens correctement prédits (top 10): 16
Précision stricte (1ère position): 28.57%
Précision adaptée (1ère position): 28.57%
Précision (top 10): 76.19%
================================================================================
