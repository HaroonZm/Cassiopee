================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 16:58:39
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
W, H = map(int, input().split())
a = list(map(int, input().split()))
b = list(map(int, input().split()))

# Vérification simple : la somme des a_i doit être égale à la somme des b_j
if sum(a) == sum(b):
    print(1)
else:
    print(0)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'W' (ID: 54)
  → Token d'amorce (pas de prédiction)

Token 1: ',' (ID: 11)
  → Token d'amorce (pas de prédiction)

Token 2: ' H' (ID: 487)
  → Token d'amorce (pas de prédiction)

Token 3: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.40995195508003235
    2. ',' → logprob: -1.15995192527771
    3. ' =' → logprob: -4.409952163696289
    4. ')' → logprob: -5.659952163696289
    5. '```' → logprob: -6.034952163696289
    6. '*' → logprob: -6.409952163696289
    7. '.' → logprob: -6.909952163696289
    8. ';' → logprob: -6.909952163696289
    9. ',
' → logprob: -8.159952163696289
    10. ':' → logprob: -8.534952163696289

Token 4: ' map' (ID: 4014)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.11119739711284637
    2. '192' → logprob: -2.6111974716186523
    3. '100' → logprob: -3.8611974716186523
    4. '640' → logprob: -5.861197471618652
    5. '256' → logprob: -6.861197471618652
    6. '128' → logprob: -6.986197471618652
    7. ' map' → logprob: -7.111197471618652
    8. '800' → logprob: -7.111197471618652
    9. '102' → logprob: -7.236197471618652
    10. '10' → logprob: -7.486197471618652

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.05795871838927269
    2. '(int' → logprob: -3.6829586029052734
    3. '(lambda' → logprob: -3.8079586029052734
    4. '(str' → logprob: -4.932958602905273
    5. '```' → logprob: -7.807958602905273
    6. '(input' → logprob: -8.182958602905273
    7. '(range' → logprob: -8.307958602905273
    8. '[int' → logprob: -9.182958602905273
    9. '<|end|>' → logprob: -9.932958602905273
    10. '(len' → logprob: -10.057958602905273

Token 6: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.007912635803222656
    2. '(' → logprob: -5.257912635803223
    3. ')' → logprob: -6.632912635803223
    4. 'input' → logprob: -7.007912635803223
    5. '(user' → logprob: -9.507912635803223
    6. '(int' → logprob: -10.007912635803223
    7. '(str' → logprob: -10.007912635803223
    8. '[input' → logprob: -10.257912635803223
    9. '(raw' → logprob: -10.382912635803223
    10. '<input' → logprob: -10.632912635803223

Token 7: ' input' (ID: 3422)
  Prédit: ' input'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' input' → logprob: -0.5760288238525391
    2. 'input' → logprob: -0.8260288238525391
    3. '(input' → logprob: -9.576028823852539
    4. ')' → logprob: -10.951028823852539
    5. ',input' → logprob: -13.951028823852539
    6. '=input' → logprob: -14.451028823852539
    7. ' )' → logprob: -15.201028823852539
    8. '<input' → logprob: -15.451028823852539
    9. '	input' → logprob: -15.826028823852539
    10. '```' → logprob: -16.07602882385254

Token 8: '().' (ID: 1454)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -0.7122344374656677
    2. '(' → logprob: -1.3372344970703125
    3. '())' → logprob: -1.5872344970703125
    4. '().' → logprob: -4.3372344970703125
    5. '(()' → logprob: -5.0872344970703125
    6. ')' → logprob: -5.9622344970703125
    7. '('' → logprob: -6.0872344970703125
    8. '());' → logprob: -6.0872344970703125
    9. '()>' → logprob: -6.3372344970703125
    10. '(""))' → logprob: -6.7122344970703125

Token 9: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00045069176121614873
    2. 'strip' → logprob: -7.750450611114502
    3. ')' → logprob: -11.37545108795166
    4. ' split' → logprob: -12.00045108795166
    5. 'rstrip' → logprob: -13.25045108795166
    6. '(split' → logprob: -14.87545108795166
    7. 'read' → logprob: -15.25045108795166
    8. 'spl' → logprob: -17.125450134277344
    9. '```' → logprob: -18.125450134277344
    10. 'startswith' → logprob: -18.625450134277344

Token 10: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.1195809468626976
    2. '())' → logprob: -2.3695809841156006
    3. '))' → logprob: -4.1195807456970215
    4. '()' → logprob: -6.3695807456970215
    5. '()))' → logprob: -7.2445807456970215
    6. '`)' → logprob: -8.24458122253418
    7. '(' → logprob: -8.61958122253418
    8. '('' → logprob: -11.86958122253418
    9. '`' → logprob: -12.11958122253418
    10. ' ())' → logprob: -12.11958122253418

Token 11: 'a' (ID: 64)
  Prédit: 'x'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'x' → logprob: -1.6545757055282593
    2. ',' → logprob: -1.9045757055282593
    3. '`' → logprob: -2.029575824737549
    4. '#' → logprob: -2.279575824737549
    5. '\n' → logprob: -2.279575824737549
    6. 'for' → logprob: -2.404575824737549
    7. 'a' → logprob: -3.154575824737549
    8. ')' → logprob: -3.779575824737549
    9. ' ' → logprob: -3.779575824737549
    10. '```' → logprob: -4.154575824737549

Token 12: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.43537378311157227
    2. '=' → logprob: -1.8103737831115723
    3. 'r' → logprob: -2.4353737831115723
    4. '[' → logprob: -3.3103737831115723
    5. ',' → logprob: -3.8103737831115723
    6. 'd' → logprob: -4.810373783111572
    7. 'p' → logprob: -5.185373783111572
    8. ' ' → logprob: -5.185373783111572
    9. '[i' → logprob: -5.185373783111572
    10. 'rr' → logprob: -5.560373783111572

Token 13: ' list' (ID: 1562)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.8958767056465149
    2. '[]' → logprob: -1.1458766460418701
    3. ' list' → logprob: -2.02087664604187
    4. 'list' → logprob: -2.52087664604187
    5. ' [' → logprob: -3.77087664604187
    6. ' W' → logprob: -4.520876884460449
    7. 'int' → logprob: -4.895876884460449
    8. '[' → logprob: -5.395876884460449
    9. '[int' → logprob: -5.645876884460449
    10. 'input' → logprob: -5.895876884460449

Token 14: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0003957608714699745
    2. '(range' → logprob: -9.125395774841309
    3. '(int' → logprob: -9.500395774841309
    4. '(a' → logprob: -9.500395774841309
    5. '(input' → logprob: -10.125395774841309
    6. '()' → logprob: -10.500395774841309
    7. '(
' → logprob: -11.125395774841309
    8. '(map' → logprob: -11.250395774841309
    9. '[int' → logprob: -12.125395774841309
    10. '(

' → logprob: -12.750395774841309

Token 15: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.030030131340026855
    2. '(' → logprob: -3.5300302505493164
    3. '(str' → logprob: -8.905030250549316
    4. ')' → logprob: -10.030030250549316
    5. '<int' → logprob: -10.905030250549316
    6. '[int' → logprob: -11.030030250549316
    7. 'int' → logprob: -11.405030250549316
    8. '(input' → logprob: -11.405030250549316
    9. ',int' → logprob: -11.655030250549316
    10. '=int' → logprob: -11.780030250549316

Token 16: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.06288110464811325
    2. ',input' → logprob: -3.3128809928894043
    3. '(input' → logprob: -4.312880992889404
    4. '(' → logprob: -4.562880992889404
    5. ' ,' → logprob: -7.812880992889404
    6. '(),' → logprob: -9.437881469726562
    7. ',int' → logprob: -9.562881469726562
    8. ')' → logprob: -10.437881469726562
    9. '),' → logprob: -10.687881469726562
    10. '`,' → logprob: -10.687881469726562

Token 17: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.1128312423825264
    2. ' input' → logprob: -2.2378313541412354
    3. '(input' → logprob: -12.362831115722656
    4. ',input' → logprob: -12.862831115722656
    5. '=input' → logprob: -14.362831115722656
    6. ' ' → logprob: -14.612831115722656
    7. '	input' → logprob: -14.987831115722656
    8. ')' → logprob: -15.737831115722656
    9. 'list' → logprob: -16.112831115722656
    10. '<input' → logprob: -16.362831115722656

Token 18: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0005717403837479651
    2. '()' → logprob: -7.8755717277526855
    3. '()))' → logprob: -8.750572204589844
    4. '())' → logprob: -11.500572204589844
    5. '()));' → logprob: -11.750572204589844
    6. ')' → logprob: -12.750572204589844
    7. '())))' → logprob: -12.875572204589844
    8. '().__' → logprob: -13.375572204589844
    9. '(' → logprob: -13.500572204589844
    10. '))' → logprob: -13.500572204589844

Token 19: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -9.088346359931165e-07
    2. ' split' → logprob: -14.500000953674316
    3. 'strip' → logprob: -15.625000953674316
    4. '(split' → logprob: -15.875000953674316
    5. 'spl' → logprob: -16.875
    6. 'rstrip' → logprob: -17.25
    7. 'plit' → logprob: -20.5
    8. '.split' → logprob: -20.75
    9. 's' → logprob: -21.75
    10. ')' → logprob: -21.875

Token 20: '()))
' (ID: 24521)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.5097341537475586
    2. '))' → logprob: -1.0097341537475586
    3. '())' → logprob: -4.009734153747559
    4. ')' → logprob: -4.259734153747559
    5. '()' → logprob: -6.134734153747559
    6. '(' → logprob: -7.509734153747559
    7. '()))
' → logprob: -11.634734153747559
    8. ')))' → logprob: -11.759734153747559
    9. '()));' → logprob: -11.884734153747559
    10. '()),' → logprob: -12.509734153747559

Token 21: 'b' (ID: 65)
  Prédit: 'b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'b' → logprob: -1.0937273502349854
    2. 'c' → logprob: -2.0937273502349854
    3. 'r' → logprob: -2.3437273502349854
    4. 'for' → logprob: -2.4687273502349854
    5. 'x' → logprob: -2.5937273502349854
    6. '[' → logprob: -2.7187273502349854
    7. 's' → logprob: -2.8437273502349854
    8. 'result' → logprob: -3.7187273502349854
    9. 'd' → logprob: -3.9687273502349854
    10. 'n' → logprob: -4.343727111816406

Token 22: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.1665848195552826
    2. '=' → logprob: -2.1665847301483154
    3. '.' → logprob: -3.2915847301483154
    4. '[' → logprob: -7.2915849685668945
    5. '_' → logprob: -7.4165849685668945
    6. ')' → logprob: -8.916584968566895
    7. ',' → logprob: -9.291584968566895
    8. ' ' → logprob: -9.916584968566895
    9. 'a' → logprob: -11.166584968566895
    10. '(' → logprob: -11.166584968566895

Token 23: ' list' (ID: 1562)
  Prédit: ' list'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' list' → logprob: -0.5767402052879333
    2. 'list' → logprob: -0.8267402052879333
    3. 'a' → logprob: -8.701740264892578
    4. '[]' → logprob: -8.826740264892578
    5. '[' → logprob: -9.201740264892578
    6. ' a' → logprob: -9.326740264892578
    7. ' []' → logprob: -9.326740264892578
    8. ' [' → logprob: -9.451740264892578
    9. '[a' → logprob: -10.826740264892578
    10. 'map' → logprob: -10.826740264892578

Token 24: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.10926394164562225
    2. '(int' → logprob: -2.8592638969421387
    3. '(map' → logprob: -3.1092638969421387
    4. '(list' → logprob: -6.859263896942139
    5. ' (' → logprob: -8.859264373779297
    6. '(
' → logprob: -9.359264373779297
    7. '(.' → logprob: -9.734264373779297
    8. '(len' → logprob: -9.984264373779297
    9. '((' → logprob: -10.109264373779297
    10. '(s' → logprob: -10.734264373779297

Token 25: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.0003298632800579071
    2. 'int' → logprob: -8.125329971313477
    3. '<int' → logprob: -11.250329971313477
    4. '=int' → logprob: -11.375329971313477
    5. '(' → logprob: -12.750329971313477
    6. '[int' → logprob: -12.875329971313477
    7. '```' → logprob: -13.125329971313477
    8. ' (' → logprob: -14.625329971313477
    9. ',int' → logprob: -15.125329971313477
    10. ']int' → logprob: -15.250329971313477

Token 26: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.7675858736038208
    2. '(int' → logprob: -1.0175858736038208
    3. ',int' → logprob: -1.7675858736038208
    4. 'int' → logprob: -5.892585754394531
    5. '```' → logprob: -8.142585754394531
    6. '(' → logprob: -8.267585754394531
    7. ',input' → logprob: -9.517585754394531
    8. '<int' → logprob: -10.017585754394531
    9. '=int' → logprob: -10.017585754394531
    10. ' ,' → logprob: -10.142585754394531

Token 27: ' input' (ID: 3422)
  Prédit: 'int'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'int' → logprob: -0.0034298391547054052
    2. ' int' → logprob: -5.753429889678955
    3. 'input' → logprob: -8.878429412841797
    4. '(int' → logprob: -9.253429412841797
    5. '[int' → logprob: -11.753429412841797
    6. ' input' → logprob: -12.878429412841797
    7. '<int' → logprob: -13.378429412841797
    8. ' ' → logprob: -13.753429412841797
    9. ',int' → logprob: -13.878429412841797
    10. '=int' → logprob: -14.003429412841797

Token 28: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -1.759734732331708e-05
    2. '.' → logprob: -12.000017166137695
    3. '()' → logprob: -12.375017166137695
    4. '(' → logprob: -12.875017166137695
    5. '(.' → logprob: -13.125017166137695
    6. '(int' → logprob: -13.625017166137695
    7. ' ().' → logprob: -14.375017166137695
    8. ').' → logprob: -15.375017166137695
    9. '()).' → logprob: -15.375017166137695
    10. 'int' → logprob: -16.000017166137695

Token 29: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -1.2664456789934775e-06
    2. '(split' → logprob: -14.625000953674316
    3. 'int' → logprob: -15.000000953674316
    4. ' split' → logprob: -15.875000953674316
    5. '.split' → logprob: -16.000001907348633
    6. 'spl' → logprob: -16.500001907348633
    7. 'plit' → logprob: -17.000001907348633
    8. '```' → logprob: -17.125001907348633
    9. ')' → logprob: -18.000001907348633
    10. '_split' → logprob: -18.125001907348633

Token 30: '()))

' (ID: 125972)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.19356669485569
    2. '))' → logprob: -2.4435667991638184
    3. '())' → logprob: -2.6935667991638184
    4. ')' → logprob: -4.318566799163818
    5. '()' → logprob: -4.818566799163818
    6. '(' → logprob: -10.44356632232666
    7. '()));' → logprob: -10.44356632232666
    8. '()))
' → logprob: -11.44356632232666
    9. '()),' → logprob: -11.81856632232666
    10. '())).' → logprob: -12.81856632232666

Token 31: '#' (ID: 2)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.5378364324569702
    2. 'dp' → logprob: -1.4128364324569702
    3. 'x' → logprob: -3.5378365516662598
    4. 'for' → logprob: -4.03783655166626
    5. '#' → logprob: -4.16283655166626
    6. 'd' → logprob: -4.16283655166626
    7. 'result' → logprob: -4.41283655166626
    8. 'r' → logprob: -4.78783655166626
    9. 'h' → logprob: -5.28783655166626
    10. 'm' → logprob: -5.28783655166626

Token 32: ' Vér' (ID: 159169)
  Prédit: 'dp'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dp' → logprob: -1.132857084274292
    2. 'c' → logprob: -1.632857084274292
    3. 'for' → logprob: -2.132857084274292
    4. ' dp' → logprob: -2.382857084274292
    5. '#' → logprob: -2.757857084274292
    6. 'x' → logprob: -2.882857084274292
    7. 'd' → logprob: -3.507857084274292
    8. ' for' → logprob: -3.507857084274292
    9. 'r' → logprob: -4.757857322692871
    10. 'f' → logprob: -5.007857322692871

Token 33: 'ification' (ID: 3166)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.3834605813026428
    2. '```' → logprob: -3.008460521697998
    3. 'i' → logprob: -3.383460521697998
    4. '   ' → logprob: -3.633460521697998
    5. 's' → logprob: -4.008460521697998
    6. 'al' → logprob: -4.133460521697998
    7. 'er' → logprob: -4.508460521697998
    8. 'u' → logprob: -4.633460521697998
    9. 'import' → logprob: -4.633460521697998
    10. 'd' → logprob: -4.758460521697998

Token 34: ' simple' (ID: 4705)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1279807984828949
    2. ':' → logprob: -3.2529807090759277
    3. 'i' → logprob: -3.6279807090759277
    4. 'for' → logprob: -3.7529807090759277
    5. '_' → logprob: -4.627980709075928
    6. ' for' → logprob: -5.002980709075928
    7. ',' → logprob: -5.627980709075928
    8. '#' → logprob: -5.877980709075928
    9. 'f' → logprob: -6.127980709075928
    10. 'if' → logprob: -7.002980709075928

Token 35: ' :' (ID: 712)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.8437846302986145
    2. ':' → logprob: -1.3437845706939697
    3. 'if' → logprob: -1.9687845706939697
    4. ' for' → logprob: -2.0937845706939697
    5. 'i' → logprob: -3.8437845706939697
    6. ' if' → logprob: -5.093784809112549
    7. ' ' → logprob: -5.218784809112549
    8. 'f' → logprob: -6.093784809112549
    9. 's' → logprob: -6.093784809112549
    10. 'x' → logprob: -6.343784809112549

Token 36: ' la' (ID: 557)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.411138653755188
    2. 'if' → logprob: -2.1611385345458984
    3. ' for' → logprob: -2.2861385345458984
    4. ' valid' → logprob: -3.0361385345458984
    5. 'for' → logprob: -4.036138534545898
    6. ' i' → logprob: -4.411138534545898
    7. ' a' → logprob: -4.661138534545898
    8. ' all' → logprob: -5.036138534545898
    9. ' ' → logprob: -5.536138534545898
    10. ' possible' → logprob: -5.536138534545898

Token 37: ' somme' (ID: 64484)
  Prédit: ' somme'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' somme' → logprob: -0.10261905193328857
    2. 's' → logprob: -2.602619171142578
    3. ' ' → logprob: -5.352619171142578
    4. ' longueur' → logprob: -5.977619171142578
    5. ' s' → logprob: -6.352619171142578
    6. ' if' → logprob: -6.602619171142578
    7. 'if' → logprob: -6.602619171142578
    8. 'l' → logprob: -6.602619171142578
    9. ' a' → logprob: -6.852619171142578
    10. 'a' → logprob: -6.852619171142578

Token 38: ' des' (ID: 731)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.13769634068012238
    2. '(sum' → logprob: -2.6376962661743164
    3. ' des' → logprob: -4.387696266174316
    4. 'a' → logprob: -4.387696266174316
    5. ')' → logprob: -4.637696266174316
    6. '(a' → logprob: -4.887696266174316
    7. ' =' → logprob: -6.137696266174316
    8. '(s' → logprob: -6.387696266174316
    9. 'sum' → logprob: -6.512696266174316
    10. '=' → logprob: -6.637696266174316

Token 39: ' a' (ID: 261)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.09059712290763855
    2. ' a' → logprob: -2.965597152709961
    3. 'b' → logprob: -3.590597152709961
    4. ' b' → logprob: -6.090597152709961
    5. ' longue' → logprob: -6.840597152709961
    6. 'élé' → logprob: -7.215597152709961
    7. 'long' → logprob: -7.590597152709961
    8. 'l' → logprob: -7.715597152709961
    9. 'c' → logprob: -7.965597152709961
    10. ' ' → logprob: -7.965597152709961

Token 40: '_i' (ID: 10853)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.17739543318748474
    2. '<|end|>' → logprob: -2.0523953437805176
    3. 's' → logprob: -4.552395343780518
    4. '[i' → logprob: -4.927395343780518
    5. '+' → logprob: -6.052395343780518
    6. ')==' → logprob: -6.302395343780518
    7. '[' → logprob: -6.677395343780518
    8. '=' → logprob: -6.802395343780518
    9. ' )' → logprob: -6.802395343780518
    10. ' ==' → logprob: -6.927395343780518

Token 41: ' doit' (ID: 21822)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.9287495017051697
    2. ' ==' → logprob: -1.3037495613098145
    3. '+' → logprob: -1.9287495613098145
    4. ' +' → logprob: -2.8037495613098145
    5. '==' → logprob: -3.1787495613098145
    6. ' )' → logprob: -3.5537495613098145
    7. 's' → logprob: -3.8037495613098145
    8. '<|end|>' → logprob: -4.5537495613098145
    9. ' <=' → logprob: -5.0537495613098145
    10. '=' → logprob: -5.5537495613098145

Token 42: ' être' (ID: 9104)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.05040896311402321
    2. ' =' → logprob: -3.6754090785980225
    3. '<|end|>' → logprob: -4.175408840179443
    4. '==' → logprob: -5.675408840179443
    5. ' ==' → logprob: -6.550408840179443
    6. ' be' → logprob: -7.050408840179443
    7. 'equal' → logprob: -7.550408840179443
    8. ')' → logprob: -8.050409317016602
    9. ' equal' → logprob: -8.050409317016602
    10. 's' → logprob: -8.425409317016602

Token 43: ' ég' (ID: 33150)
  Prédit: ' ég'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ég' → logprob: -0.014034684747457504
    2. '=' → logprob: -4.764034748077393
    3. ' eg' → logprob: -6.389034748077393
    4. 'ég' → logprob: -6.514034748077393
    5. ' =' → logprob: -6.889034748077393
    6. ' égal' → logprob: -7.514034748077393
    7. 'égal' → logprob: -8.264034271240234
    8. 'eg' → logprob: -9.389034271240234
    9. ' equal' → logprob: -9.639034271240234
    10. '==' → logprob: -10.264034271240234

Token 44: 'ale' (ID: 1167)
  Prédit: 'ale'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ale' → logprob: -0.1285076141357422
    2. 'a' → logprob: -2.503507614135742
    3. 'al' → logprob: -3.253507614135742
    4. '```' → logprob: -10.003507614135742
    5. 'ales' → logprob: -11.253507614135742
    6. 'e' → logprob: -11.253507614135742
    7. 'але' → logprob: -11.378507614135742
    8. '   ' → logprob: -11.753507614135742
    9. 'а' → logprob: -12.003507614135742
    10. 'aux' → logprob: -12.378507614135742

Token 45: ' à' (ID: 1221)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.18428979814052582
    2. '(sum' → logprob: -2.1842896938323975
    3. ' à' → logprob: -3.8092896938323975
    4. ' (' → logprob: -3.9342896938323975
    5. '(s' → logprob: -5.184289932250977
    6. ' ' → logprob: -6.434289932250977
    7. ' aux' → logprob: -6.809289932250977
    8. 'sum' → logprob: -6.809289932250977
    9. 'à' → logprob: -7.059289932250977
    10. '<|end|>' → logprob: -7.559289932250977

Token 46: ' la' (ID: 557)
  Prédit: 'sum'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sum' → logprob: -1.0850629806518555
    2. 'W' → logprob: -1.2100629806518555
    3. ' W' → logprob: -1.7100629806518555
    4. ' sum' → logprob: -2.2100629806518555
    5. 'H' → logprob: -2.9600629806518555
    6. ' H' → logprob: -4.7100629806518555
    7. 's' → logprob: -5.2100629806518555
    8. ' ' → logprob: -6.4600629806518555
    9. ' la' → logprob: -6.4600629806518555
    10. ' somme' → logprob: -6.9600629806518555

Token 47: ' somme' (ID: 64484)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.10342728346586227
    2. 'H' → logprob: -3.2284271717071533
    3. 'sum' → logprob: -3.2284271717071533
    4. ' somme' → logprob: -4.228427410125732
    5. 'W' → logprob: -6.353427410125732
    6. 'som' → logprob: -6.478427410125732
    7. ' sum' → logprob: -7.978427410125732
    8. ' H' → logprob: -8.103426933288574
    9. 'b' → logprob: -8.478426933288574
    10. ' som' → logprob: -9.353426933288574

Token 48: ' des' (ID: 731)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.11202084273099899
    2. ' des' → logprob: -2.86202073097229
    3. '(b' → logprob: -4.362020969390869
    4. ' of' → logprob: -4.612020969390869
    5. '(sum' → logprob: -4.987020969390869
    6. '(des' → logprob: -4.987020969390869
    7. 'des' → logprob: -5.612020969390869
    8. '<|end|>' → logprob: -5.987020969390869
    9. '(s' → logprob: -6.612020969390869
    10. 'of' → logprob: -6.862020969390869

Token 49: ' b' (ID: 287)
  Prédit: ' b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' b' → logprob: -0.5759478807449341
    2. 'b' → logprob: -0.8259478807449341
    3. ' ' → logprob: -12.200947761535645
    4. '_' → logprob: -13.575947761535645
    5. ' б' → logprob: -14.825947761535645
    6. '<|end|>' → logprob: -15.075947761535645
    7. ' ' → logprob: -15.638447761535645
    8. ')b' → logprob: -15.700947761535645
    9. 's' → logprob: -15.888447761535645
    10. '_b' → logprob: -15.950947761535645

Token 50: '_j' (ID: 12021)
  Prédit: '_i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_i' → logprob: -0.062059108167886734
    2. '_' → logprob: -2.812059164047241
    3. '_j' → logprob: -10.43705940246582
    4. '```' → logprob: -11.68705940246582
    5. 'i' → logprob: -11.93705940246582
    6. '}_' → logprob: -12.06205940246582
    7. ')_' → logprob: -12.43705940246582
    8. ')' → logprob: -12.56205940246582
    9. '[i' → logprob: -12.81205940246582
    10. '_ai' → logprob: -12.81205940246582

Token 51: '
' (ID: 198)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.7361804842948914
    2. 'if' → logprob: -1.4861805438995361
    3. '\' → logprob: -2.361180543899536
    4. ' if' → logprob: -2.486180543899536
    5. '
' → logprob: -3.611180543899536
    6. '.' → logprob: -4.236180305480957
    7. '<|end|>' → logprob: -4.861180305480957
    8. ':' → logprob: -4.986180305480957
    9. '```' → logprob: -5.111180305480957
    10. '' → logprob: -5.111180305480957

Token 52: 'if' (ID: 366)
  Prédit: 'if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.09462511539459229
    2. ' if' → logprob: -2.8446249961853027
    3. ':' → logprob: -4.969624996185303
    4. 'assert' → logprob: -5.219624996185303
    5. '\n' → logprob: -5.219624996185303
    6. '\' → logprob: -5.469624996185303
    7. 'i' → logprob: -6.344624996185303
    8. ')' → logprob: -6.719624996185303
    9. 's' → logprob: -6.719624996185303
    10. '.' → logprob: -6.719624996185303

Token 53: ' sum' (ID: 4215)
  Prédit: ' sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sum' → logprob: -0.12701557576656342
    2. 'sum' → logprob: -2.1270155906677246
    3. '(sum' → logprob: -9.377015113830566
    4. '	sum' → logprob: -14.127015113830566
    5. ' ' → logprob: -14.627015113830566
    6. ')' → logprob: -15.502015113830566
    7. '=sum' → logprob: -15.502015113830566
    8. ' sums' → logprob: -15.752015113830566
    9. ',sum' → logprob: -15.752015113830566
    10. '```' → logprob: -15.877015113830566

Token 54: '(a' (ID: 6271)
  Prédit: '(a'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(a' → logprob: -0.0004311460361350328
    2. '(' → logprob: -7.750431060791016
    3. 'a' → logprob: -15.750431060791016
    4. '(ai' → logprob: -16.000431060791016
    5. '(s' → logprob: -17.125431060791016
    6. '(i' → logprob: -17.125431060791016
    7. ' (' → logprob: -17.250431060791016
    8. '()' → logprob: -17.625431060791016
    9. '(an' → logprob: -18.000431060791016
    10. '(
' → logprob: -18.250431060791016

Token 55: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00018816311785485595
    2. '!=' → logprob: -9.750187873840332
    3. ' )' → logprob: -9.875187873840332
    4. ')!=' → logprob: -9.875187873840332
    5. ' !=' → logprob: -11.875187873840332
    6. ')==' → logprob: -12.000187873840332
    7. '()' → logprob: -12.125187873840332
    8. '==' → logprob: -12.375187873840332
    9. '=' → logprob: -14.125187873840332
    10. '(' → logprob: -14.375187873840332

Token 56: ' ==' (ID: 951)
  Prédit: ' !='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' !=' → logprob: -0.07396037876605988
    2. '!=' → logprob: -3.198960304260254
    3. ' ==' → logprob: -3.698960304260254
    4. '==' → logprob: -5.323960304260254
    5. '=' → logprob: -7.698960304260254
    6. ')' → logprob: -8.448960304260254
    7. '>' → logprob: -9.698960304260254
    8. ' >' → logprob: -10.323960304260254
    9. '<|end|>' → logprob: -10.698960304260254
    10. ' =' → logprob: -11.198960304260254

Token 57: ' sum' (ID: 4215)
  Prédit: ' sum'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sum' → logprob: -0.5759412050247192
    2. 'sum' → logprob: -0.8259412050247192
    3. '(sum' → logprob: -13.57594108581543
    4. ' ' → logprob: -15.70094108581543
    5. '	sum' → logprob: -15.82594108581543
    6. '=sum' → logprob: -16.07594108581543
    7. 's' → logprob: -16.95094108581543
    8. ' ' → logprob: -17.20094108581543
    9. '  ' → logprob: -18.07594108581543
    10. ',sum' → logprob: -18.57594108581543

Token 58: '(b' (ID: 3229)
  Prédit: '(b'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(b' → logprob: -0.10021314769983292
    2. '(' → logprob: -2.350213050842285
    3. ' (' → logprob: -13.225213050842285
    4. '(B' → logprob: -13.975213050842285
    5. '(a' → logprob: -14.100213050842285
    6. 'b' → logprob: -15.100213050842285
    7. '(f' → logprob: -15.475213050842285
    8. '(s' → logprob: -15.475213050842285
    9. '((' → logprob: -15.475213050842285
    10. '(

' → logprob: -15.600213050842285

Token 59: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0006822916911914945
    2. ':' → logprob: -7.750682353973389
    3. ')' → logprob: -8.37568187713623
    4. ' ):' → logprob: -11.12568187713623
    5. '):
' → logprob: -13.00068187713623
    6. '():' → logprob: -13.50068187713623
    7. ':)' → logprob: -14.25068187713623
    8. '[]):' → logprob: -14.50068187713623
    9. ''):' → logprob: -15.00068187713623
    10. '):

' → logprob: -15.62568187713623

Token 60: '   ' (ID: 271)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0037447367794811726
    2. ' :' → logprob: -6.253744602203369
    3. ':
' → logprob: -6.878744602203369
    4. '   ' → logprob: -7.253744602203369
    5. ' :
' → logprob: -10.878745079040527
    6. ' and' → logprob: -11.378745079040527
    7. ',' → logprob: -11.378745079040527
    8. '):' → logprob: -11.628745079040527
    9. ' ' → logprob: -12.628745079040527
    10. ')' → logprob: -12.628745079040527

Token 61: ' print' (ID: 2123)
  Prédit: ' print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.5924811959266663
    2. 'print' (adapté à ' print') → logprob: -1.5924811363220215
    3. '   ' → logprob: -1.8424811363220215
    4. ' pass' → logprob: -3.3424811363220215
    5. ' for' → logprob: -4.0924811363220215
    6. 'pass' → logprob: -4.8424811363220215
    7. ' matrix' → logprob: -5.4674811363220215
    8. '    ' → logprob: -5.7174811363220215
    9. 'for' → logprob: -6.0924811363220215
    10. ' c' → logprob: -6.2174811363220215

Token 62: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0365290604531765
    2. '("' → logprob: -3.411529064178467
    3. '("("' → logprob: -6.286529064178467
    4. '('' → logprob: -7.036529064178467
    5. '(True' → logprob: -9.661528587341309
    6. '("")' → logprob: -10.411528587341309
    7. '()' → logprob: -10.661528587341309
    8. '"' → logprob: -12.286528587341309
    9. '("(' → logprob: -12.536528587341309
    10. '("""' → logprob: -13.036528587341309

Token 63: '1' (ID: 16)
  Prédit: '"'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '"' → logprob: -0.011516954749822617
    2. ''' → logprob: -5.13651704788208
    3. '("' → logprob: -5.88651704788208
    4. '"W' → logprob: -7.01151704788208
    5. '1' → logprob: -7.38651704788208
    6. '(' → logprob: -8.261516571044922
    7. '"O' → logprob: -8.511516571044922
    8. '"T' → logprob: -8.886516571044922
    9. '"D' → logprob: -9.011516571044922
    10. '"No' → logprob: -9.136516571044922

Token 64: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00032998246024362743
    2. ' )' → logprob: -8.125329971313477
    3. ')
' → logprob: -10.375329971313477
    4. '0' → logprob: -14.375329971313477
    5. '))' → logprob: -14.750329971313477
    6. ' ' → logprob: -15.000329971313477
    7. '*' → logprob: -15.125329971313477
    8. '+)' → logprob: -15.750329971313477
    9. '+' → logprob: -16.000329971313477
    10. '')' → logprob: -16.125329971313477

Token 65: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.017687898129224777
    2. ' else' → logprob: -5.267687797546387
    3. '<|end|>' → logprob: -5.267687797546387
    4. '
' → logprob: -5.392687797546387
    5. '0' → logprob: -7.142687797546387
    6. '```' → logprob: -8.142687797546387
    7. '  
' → logprob: -8.392687797546387
    8. '    
' → logprob: -8.517687797546387
    9. '6' → logprob: -8.517687797546387
    10. 'n' → logprob: -8.892687797546387

Token 66: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0006290406454354525
    2. ' :' → logprob: -7.75062894821167
    3. '   ' → logprob: -8.875629425048828
    4. ':
' → logprob: -10.000629425048828
    5. '(' → logprob: -12.250629425048828
    6. '():' → logprob: -13.250629425048828
    7. ' :
' → logprob: -13.500629425048828
    8. '    ' → logprob: -13.875629425048828
    9. '```' → logprob: -14.250629425048828
    10. '0' → logprob: -14.250629425048828

Token 67: '   ' (ID: 271)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.3493223488330841
    2. '   ' → logprob: -1.3493223190307617
    3. ' ' → logprob: -3.3493223190307617
    4. '    ' → logprob: -9.599322319030762
    5. 'print' → logprob: -9.599322319030762
    6. ' print' → logprob: -10.224322319030762
    7. '    
' → logprob: -10.224322319030762
    8. ' 
' → logprob: -10.224322319030762
    9. '  ' → logprob: -11.099322319030762
    10. '```' → logprob: -11.099322319030762

Token 68: ' print' (ID: 2123)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -3.531315314830863e-06
    2. 'print' (adapté à ' print') → logprob: -13.125003814697266
    3. '(' → logprob: -14.375003814697266
    4. ' ' → logprob: -14.625003814697266
    5. '   ' → logprob: -15.250003814697266
    6. '```' → logprob: -16.500003814697266
    7. '-' → logprob: -18.875003814697266
    8. ' print' → logprob: -18.875003814697266
    9. '``' → logprob: -19.125003814697266
    10. '    
' → logprob: -20.000003814697266

Token 69: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -2.5776860184123507e-06
    2. '0' → logprob: -13.25000286102295
    3. ' (' → logprob: -14.62500286102295
    4. '()' → logprob: -16.500001907348633
    5. '(False' → logprob: -17.000001907348633
    6. '(-' → logprob: -17.250001907348633
    7. '((' → logprob: -17.875001907348633
    8. '(
' → logprob: -17.875001907348633
    9. '('' → logprob: -18.375001907348633
    10. '(

' → logprob: -18.625001907348633

Token 70: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -3.128163257315464e-07
    2. ' ' → logprob: -15.375
    3. ')' → logprob: -16.875
    4. '   ' → logprob: -19.375
    5. '(' → logprob: -20.875
    6. '2' → logprob: -21.0
    7. '```' → logprob: -21.375
    8. '-' → logprob: -21.625
    9. '０' → logprob: -22.25
    10. '۰' → logprob: -22.5

Token 71: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.128163257315464e-07
    2. ' )' → logprob: -16.375
    3. ')
' → logprob: -17.0
    4. '))' → logprob: -17.75
    5. '`)' → logprob: -17.875
    6. '')' → logprob: -18.375
    7. ')`' → logprob: -19.375
    8. '")' → logprob: -20.375
    9. '```' → logprob: -20.375
    10. '）' → logprob: -20.625


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 69
Tokens correctement prédits (1ère position, stricte): 30
Tokens correctement prédits (1ère position, avec adaptation): 30
Tokens correctement prédits (top 10): 58
Précision stricte (1ère position): 43.48%
Précision adaptée (1ère position): 43.48%
Précision (top 10): 84.06%
================================================================================
