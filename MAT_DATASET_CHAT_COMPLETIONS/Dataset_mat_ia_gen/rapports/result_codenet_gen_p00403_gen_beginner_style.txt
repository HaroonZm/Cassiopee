================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:23:48
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
L = int(input())
cats = list(map(int, input().split()))

hole = []
for i in range(L):
    c = cats[i]
    if c > 0:
        # Cat enters
        if c in hole:
            # Cat already inside, error
            print(i + 1)
            break
        else:
            hole.append(c)
    else:
        # Cat exits
        c_abs = -c
        if len(hole) == 0:
            # No cat inside to exit
            print(i + 1)
            break
        if hole[-1] != c_abs:
            # Cat trying to leave is not last one entered
            print(i + 1)
            break
        else:
            hole.pop()
else:
    # If no error found
    print("OK")
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'L' (ID: 43)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00020950057660229504
    2. ''' → logprob: -9.25020980834961
    3. '('' → logprob: -9.75020980834961
    4. '(
' → logprob: -11.25020980834961
    5. '("("' → logprob: -11.50020980834961
    6. '[' → logprob: -11.87520980834961
    7. '```' → logprob: -11.87520980834961
    8. '`' → logprob: -12.37520980834961
    9. '(L' → logprob: -12.87520980834961
    10. '"' → logprob: -13.00020980834961

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.07800156623125076
    2. '()' → logprob: -3.2030014991760254
    3. ')' → logprob: -3.4530014991760254
    4. '())' → logprob: -6.578001499176025
    5. '```' → logprob: -8.078001976013184
    6. '(
' → logprob: -8.453001976013184
    7. '`' → logprob: -8.703001976013184
    8. ''' → logprob: -9.203001976013184
    9. '(()' → logprob: -9.453001976013184
    10. '")' → logprob: -9.828001976013184

Token 5: 'cats' (ID: 70782)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.7235759496688843
    2. 'for' → logprob: -1.4735759496688843
    3. 'i' → logprob: -2.098576068878174
    4. '*' → logprob: -3.098576068878174
    5. 'n' → logprob: -3.848576068878174
    6. 'f' → logprob: -4.223576068878174
    7. '%' → logprob: -4.473576068878174
    8. 's' → logprob: -4.473576068878174
    9. '`' → logprob: -4.598576068878174
    10. '#' → logprob: -4.848576068878174

Token 6: ' =' (ID: 314)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_' → logprob: -0.26478180289268494
    2. '[' → logprob: -1.7647818326950073
    3. '=' → logprob: -4.139781951904297
    4. ' =' → logprob: -4.139781951904297
    5. ')' → logprob: -4.514781951904297
    6. '_count' → logprob: -5.139781951904297
    7. '.' → logprob: -6.139781951904297
    8. '_counts' → logprob: -6.264781951904297
    9. ''' → logprob: -6.514781951904297
    10. '_names' → logprob: -6.764781951904297

Token 7: ' list' (ID: 1562)
  Prédit: ' []'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' []' → logprob: -0.2667132318019867
    2. '0' → logprob: -2.5167131423950195
    3. ' L' → logprob: -2.8917131423950195
    4. ' ' → logprob: -3.1417131423950195
    5. '[]' → logprob: -3.1417131423950195
    6. 'L' → logprob: -5.7667131423950195
    7. ' [' → logprob: -5.8917131423950195
    8. '[' → logprob: -6.2667131423950195
    9. 'input' → logprob: -7.0167131423950195
    10. 'list' → logprob: -7.5167131423950195

Token 8: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -2.4987974029500037e-05
    2. '(range' → logprob: -11.125024795532227
    3. '(

' → logprob: -13.750024795532227
    4. '(
' → logprob: -13.750024795532227
    5. '(L' → logprob: -13.875024795532227
    6. '()' → logprob: -14.250024795532227
    7. '[' → logprob: -14.250024795532227
    8. '(c' → logprob: -14.375024795532227
    9. '(`' → logprob: -14.750024795532227
    10. '(input' → logprob: -14.875024795532227

Token 9: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.008243509568274021
    2. '(' → logprob: -4.883243560791016
    3. '(input' → logprob: -7.758243560791016
    4. '(str' → logprob: -9.008243560791016
    5. 'int' → logprob: -10.258243560791016
    6. '(lambda' → logprob: -11.133243560791016
    7. '(
' → logprob: -11.383243560791016
    8. '<int' → logprob: -11.758243560791016
    9. '```' → logprob: -12.133243560791016
    10. '=int' → logprob: -12.133243560791016

Token 10: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.044938743114471436
    2. ',input' → logprob: -3.169938802719116
    3. '(' → logprob: -6.794938564300537
    4. 'input' → logprob: -8.044939041137695
    5. ',' → logprob: -8.419939041137695
    6. '))' → logprob: -8.919939041137695
    7. '=input' → logprob: -9.669939041137695
    8. '<input' → logprob: -11.169939041137695
    9. ')' → logprob: -11.419939041137695
    10. ' input' → logprob: -11.419939041137695

Token 11: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.03805205225944519
    2. ' input' → logprob: -3.2880520820617676
    3. '(input' → logprob: -11.66305160522461
    4. ',input' → logprob: -13.78805160522461
    5. '=input' → logprob: -14.66305160522461
    6. ')' → logprob: -15.41305160522461
    7. '	input' → logprob: -16.41305160522461
    8. '<input' → logprob: -16.53805160522461
    9. '))' → logprob: -17.28805160522461
    10. ' ' → logprob: -17.66305160522461

Token 12: '().' (ID: 1454)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.7025045156478882
    2. '()' → logprob: -1.0775045156478882
    3. '())' → logprob: -1.9525045156478882
    4. '().' → logprob: -4.327504634857178
    5. '(' → logprob: -5.702504634857178
    6. '()));' → logprob: -6.202504634857178
    7. '))' → logprob: -6.577504634857178
    8. ')' → logprob: -7.202504634857178
    9. '()>' → logprob: -7.452504634857178
    10. '())))' → logprob: -8.32750415802002

Token 13: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0005595852271653712
    2. 'strip' → logprob: -7.5005598068237305
    3. 'rstrip' → logprob: -12.12555980682373
    4. ' split' → logprob: -14.25055980682373
    5. '(split' → logprob: -14.62555980682373
    6. 'spl' → logprob: -16.625558853149414
    7. ')' → logprob: -17.625558853149414
    8. 'replace' → logprob: -18.000558853149414
    9. 's' → logprob: -18.125558853149414
    10. 'sp' → logprob: -18.500558853149414

Token 14: '()))

' (ID: 125972)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '()))' → logprob: -0.6852874755859375
    2. '))' → logprob: -1.4352874755859375
    3. '())' → logprob: -1.9352874755859375
    4. ')' → logprob: -2.3102874755859375
    5. '()' → logprob: -4.8102874755859375
    6. '(' → logprob: -5.1852874755859375
    7. ')))' → logprob: -8.685287475585938
    8. '('' → logprob: -9.185287475585938
    9. '())))' → logprob: -9.185287475585938
    10. ''))' → logprob: -10.060287475585938

Token 15: 'hole' (ID: 55043)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'c' → logprob: -1.2476718425750732
    2. 'max' → logprob: -1.6226718425750732
    3. 's' → logprob: -2.1226718425750732
    4. 'count' → logprob: -2.6226718425750732
    5. 'total' → logprob: -3.3726718425750732
    6. 'd' → logprob: -3.3726718425750732
    7. 'm' → logprob: -3.3726718425750732
    8. 'if' → logprob: -3.4976718425750732
    9. 'sum' → logprob: -3.4976718425750732
    10. 'n' → logprob: -3.7476718425750732

Token 16: ' =' (ID: 314)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.06135830655694008
    2. '_' → logprob: -3.0613582134246826
    3. '_positions' → logprob: -5.936358451843262
    4. '_s' → logprob: -6.061358451843262
    5. '_pos' → logprob: -6.436358451843262
    6. '_count' → logprob: -6.686358451843262
    7. '_size' → logprob: -6.811358451843262
    8. '=' → logprob: -7.186358451843262
    9. ' =' → logprob: -7.311358451843262
    10. '_index' → logprob: -7.436358451843262

Token 17: ' []
' (ID: 8911)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.9483672976493835
    2. '{}' → logprob: -1.6983673572540283
    3. 'cats' → logprob: -1.8233673572540283
    4. '[]' → logprob: -2.0733673572540283
    5. '[' → logprob: -2.3233673572540283
    6. '-' → logprob: -4.073367118835449
    7. '{' → logprob: -5.073367118835449
    8. '[-' → logprob: -5.573367118835449
    9. 'set' → logprob: -6.073367118835449
    10. '1' → logprob: -6.573367118835449

Token 18: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.003287870902568102
    2. 'count' → logprob: -6.7532877922058105
    3. 'max' → logprob: -7.3782877922058105
    4. 'counts' → logprob: -8.503288269042969
    5. 'dp' → logprob: -8.753288269042969
    6. 'current' → logprob: -9.253288269042969
    7. 'if' → logprob: -9.378288269042969
    8. 'sum' → logprob: -9.503288269042969
    9. 'positions' → logprob: -9.878288269042969
    10. 'pos' → logprob: -9.878288269042969

Token 19: ' i' (ID: 575)
  Prédit: ' i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -0.15491348505020142
    2. ' cat' → logprob: -2.2799134254455566
    3. ' ' → logprob: -3.9049134254455566
    4. ' _' → logprob: -4.029913425445557
    5. '_' → logprob: -6.154913425445557
    6. ' c' → logprob: -7.404913425445557
    7. 'i' → logprob: -7.779913425445557
    8. ' ' → logprob: -10.029913902282715
    9. ' x' → logprob: -10.404913902282715
    10. 'cat' → logprob: -10.529913902282715

Token 20: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.029800020158290863
    2. 'in' → logprob: -3.5297999382019043
    3. ' ' → logprob: -10.529800415039062
    4. 'n' → logprob: -11.404800415039062
    5. 'range' → logprob: -12.529800415039062
    6. '	in' → logprob: -13.029800415039062
    7. ',' → logprob: -13.654800415039062
    8. '```' → logprob: -14.154800415039062
    9. '  ' → logprob: -14.654800415039062
    10. 's' → logprob: -14.904800415039062

Token 21: ' range' (ID: 3352)
  Prédit: 'range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'range' → logprob: -0.062122516334056854
    2. ' range' → logprob: -2.8121225833892822
    3. 'cats' → logprob: -8.812122344970703
    4. ' cats' → logprob: -12.687122344970703
    5. '	range' → logprob: -13.562122344970703
    6. '(range' → logprob: -14.062122344970703
    7. '_range' → logprob: -15.937122344970703
    8. 'cat' → logprob: -16.062122344970703
    9. ')' → logprob: -16.187122344970703
    10. 'Range' → logprob: -16.437122344970703

Token 22: '(L' (ID: 11075)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.39443904161453247
    2. '(L' → logprob: -1.1444389820098877
    3. '(len' → logprob: -4.894439220428467
    4. '(length' → logprob: -11.019438743591309
    5. ' (' → logprob: -11.269438743591309
    6. '(l' → logprob: -11.644438743591309
    7. '(s' → logprob: -12.519438743591309
    8. '(n' → logprob: -12.769438743591309
    9. '(i' → logprob: -12.894438743591309
    10. '((' → logprob: -14.269438743591309

Token 23: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.01095337513834238
    2. ' ):' → logprob: -5.260953426361084
    3. ')' → logprob: -5.885953426361084
    4. '-' → logprob: -6.135953426361084
    5. '+' → logprob: -7.760953426361084
    6. ' -' → logprob: -8.635952949523926
    7. '):
' → logprob: -9.135952949523926
    8. ' )' → logprob: -10.510952949523926
    9. ':' → logprob: -12.135952949523926
    10. ' ' → logprob: -12.510952949523926

Token 24: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6588091254234314
    2. ' hole' → logprob: -1.4088091850280762
    3. ' if' → logprob: -2.158809185028076
    4. 'hole' → logprob: -2.283809185028076
    5. ' ' → logprob: -5.033809185028076
    6. 'if' → logprob: -6.158809185028076
    7. '    ' → logprob: -6.283809185028076
    8. '0' → logprob: -6.533809185028076
    9. '	if' → logprob: -6.783809185028076
    10. '   ' → logprob: -6.783809185028076

Token 25: ' c' (ID: 274)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.382298082113266
    2. ' hole' → logprob: -1.7572981119155884
    3. 'hole' → logprob: -2.132297992706299
    4. 'if' → logprob: -3.882297992706299
    5. '   ' → logprob: -5.382297992706299
    6. ' ' → logprob: -8.007298469543457
    7. ' for' → logprob: -8.507298469543457
    8. '    ' → logprob: -8.757298469543457
    9. '-hole' → logprob: -9.507298469543457
    10. 'holes' → logprob: -9.757298469543457

Token 26: ' =' (ID: 314)
  Prédit: 'ats'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ats' → logprob: -0.03335854038596153
    2. 'at' → logprob: -3.658358573913574
    3. '   ' → logprob: -6.283358573913574
    4. 'a' → logprob: -6.408358573913574
    5. 'hole' → logprob: -6.408358573913574
    6. 'h' → logprob: -8.283358573913574
    7. 'cats' → logprob: -8.533358573913574
    8. '  ' → logprob: -8.658358573913574
    9. ' ' → logprob: -8.908358573913574
    10. 'ho' → logprob: -9.033358573913574

Token 27: ' cats' (ID: 28854)
  Prédit: 'cats'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'cats' → logprob: -0.16036874055862427
    2. ' cats' → logprob: -1.9103686809539795
    3. 'cat' → logprob: -10.035368919372559
    4. '0' → logprob: -10.535368919372559
    5. 'c' → logprob: -11.035368919372559
    6. 'i' → logprob: -11.410368919372559
    7. 'int' → logprob: -11.785368919372559
    8. ' ' → logprob: -11.910368919372559
    9. '   ' → logprob: -12.035368919372559
    10. ' i' → logprob: -12.410368919372559

Token 28: '[i' (ID: 1768)
  Prédit: '[i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[i' → logprob: -7.111979357432574e-05
    2. '[' → logprob: -9.62507152557373
    3. '.index' → logprob: -13.12507152557373
    4. '.pop' → logprob: -14.50007152557373
    5. '.count' → logprob: -14.62507152557373
    6. '[I' → logprob: -14.75007152557373
    7. '.append' → logprob: -14.87507152557373
    8. ' [' → logprob: -15.00007152557373
    9. '[:]' → logprob: -15.00007152557373
    10. '[-' → logprob: -16.125070571899414

Token 29: ']
' (ID: 1592)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ']' → logprob: -0.3221452534198761
    2. '])' → logprob: -1.6971452236175537
    3. ')' → logprob: -2.6971452236175537
    4. ' ]' → logprob: -5.447145462036133
    5. ' )' → logprob: -5.822145462036133
    6. ' ])' → logprob: -5.822145462036133
    7. '+' → logprob: -5.947145462036133
    8. '])
' → logprob: -5.947145462036133
    9. ']+' → logprob: -6.072145462036133
    10. '-' → logprob: -6.447145462036133

Token 30: '   ' (ID: 271)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.18480004370212555
    2. 'if' → logprob: -2.059800148010254
    3. '   ' → logprob: -3.559800148010254
    4. ' ' → logprob: -5.684800148010254
    5. ' for' → logprob: -6.309800148010254
    6. ')' → logprob: -7.184800148010254
    7. '    ' → logprob: -7.184800148010254
    8. ' =' → logprob: -7.309800148010254
    9. ' hole' → logprob: -7.434800148010254
    10. 'hole' → logprob: -7.434800148010254

Token 31: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.6342440247535706
    2. 'if' (adapté à ' if') → logprob: -0.8842440247535706
    3. 'hole' → logprob: -3.259243965148926
    4. ' hole' → logprob: -5.009243965148926
    5. '   ' → logprob: -5.634243965148926
    6. ' for' → logprob: -5.759243965148926
    7. 'for' → logprob: -6.134243965148926
    8. ' ' → logprob: -7.384243965148926
    9. ' while' → logprob: -8.134243965148926
    10. 'c' → logprob: -8.259243965148926

Token 32: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.0744190365076065
    2. 'c' → logprob: -2.8244190216064453
    3. ' hole' → logprob: -4.949419021606445
    4. ' i' → logprob: -6.074419021606445
    5. 'hole' → logprob: -6.949419021606445
    6. ' not' → logprob: -7.199419021606445
    7. 'i' → logprob: -7.574419021606445
    8. ' ' → logprob: -8.449419021606445
    9. ' len' → logprob: -8.574419021606445
    10. ' cat' → logprob: -9.574419021606445

Token 33: ' >' (ID: 1424)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -1.1556452512741089
    2. ' not' → logprob: -1.5306452512741089
    3. ' >' → logprob: -1.9056452512741089
    4. '==' → logprob: -1.9056452512741089
    5. '>' → logprob: -2.2806453704833984
    6. ' in' → logprob: -3.6556453704833984
    7. ' !=' → logprob: -4.280645370483398
    8. '%' → logprob: -4.530645370483398
    9. '!=' → logprob: -5.030645370483398
    10. 'not' → logprob: -5.530645370483398

Token 34: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.3071289658546448
    2. '0' → logprob: -1.93212890625
    3. ' hole' → logprob: -2.30712890625
    4. 'hole' → logprob: -4.05712890625
    5. '1' → logprob: -7.30712890625
    6. ' len' → logprob: -7.43212890625
    7. '=' → logprob: -8.55712890625
    8. ' L' → logprob: -8.68212890625
    9. 'len' → logprob: -8.68212890625
    10. ' i' → logprob: -8.86962890625

Token 35: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.15385524928569794
    2. 'hole' → logprob: -2.278855323791504
    3. ' ' → logprob: -3.778855323791504
    4. '1' → logprob: -4.903855323791504
    5. ' hole' → logprob: -5.778855323791504
    6. 'i' → logprob: -6.653855323791504
    7. '10' → logprob: -6.903855323791504
    8. '5' → logprob: -7.153855323791504
    9. 'len' → logprob: -7.403855323791504
    10. 'L' → logprob: -7.653855323791504

Token 36: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.08502311259508133
    2. ' and' → logprob: -2.5850231647491455
    3. ' :' → logprob: -5.710022926330566
    4. ':
' → logprob: -6.210022926330566
    5. 'and' → logprob: -7.835022926330566
    6. '   ' → logprob: -8.335022926330566
    7. ' :
' → logprob: -10.335022926330566
    8. '       ' → logprob: -10.460022926330566
    9. ' ' → logprob: -10.585022926330566
    10. '    ' → logprob: -11.210022926330566

Token 37: '       ' (ID: 309)
  Prédit: ' hole'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' hole' → logprob: -0.36647093296051025
    2. 'hole' → logprob: -1.8664709329605103
    3. '       ' → logprob: -2.3664708137512207
    4. '   ' → logprob: -2.9914708137512207
    5. '    ' → logprob: -5.491470813751221
    6. ' if' → logprob: -7.241470813751221
    7. '        ' → logprob: -7.741470813751221
    8. ' ' → logprob: -7.866470813751221
    9. '   ' → logprob: -8.116471290588379
    10. ' ' → logprob: -8.366471290588379

Token 38: ' #' (ID: 1069)
  Prédit: ' hole'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' hole' → logprob: -0.040599554777145386
    2. 'hole' → logprob: -3.4155995845794678
    3. '    ' → logprob: -6.290599346160889
    4. '       ' → logprob: -6.915599346160889
    5. ' if' → logprob: -7.040599346160889
    6. '        ' → logprob: -7.165599346160889
    7. '   ' → logprob: -7.415599346160889
    8. ' c' → logprob: -8.290599822998047
    9. ' holes' → logprob: -8.415599822998047
    10. ' for' → logprob: -8.603099822998047

Token 39: ' Cat' (ID: 19288)
  Prédit: ' hole'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' hole' → logprob: -0.14566753804683685
    2. 'hole' → logprob: -2.145667552947998
    3. ' if' → logprob: -5.145667552947998
    4. ' continue' → logprob: -6.145667552947998
    5. '    ' → logprob: -6.770667552947998
    6. '       ' → logprob: -6.770667552947998
    7. ' c' → logprob: -6.895667552947998
    8. ' while' → logprob: -7.020667552947998
    9. ' for' → logprob: -7.145667552947998
    10. '        ' → logprob: -7.458167552947998

Token 40: ' enters' (ID: 53753)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -0.4472878575325012
    2. 'hole' → logprob: -1.4472877979278564
    3. ' hole' → logprob: -2.9472877979278564
    4. ' in' → logprob: -4.4472880363464355
    5. ' goes' → logprob: -4.4472880363464355
    6. 'holes' → logprob: -4.8222880363464355
    7. ' is' → logprob: -5.1972880363464355
    8. ' jumps' → logprob: -5.5722880363464355
    9. ' continues' → logprob: -5.8222880363464355
    10. '   ' → logprob: -6.0722880363464355

Token 41: '
' (ID: 198)
  Prédit: ' hole'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' hole' → logprob: -0.07317748665809631
    2. 'hole' → logprob: -2.6981775760650635
    3. '       ' → logprob: -6.948177337646484
    4. '           ' → logprob: -7.573177337646484
    5. '   ' → logprob: -7.573177337646484
    6. '        ' → logprob: -8.323177337646484
    7. ':' → logprob: -8.698177337646484
    8. '    ' → logprob: -8.948177337646484
    9. ' if' → logprob: -8.948177337646484
    10. '-hole' → logprob: -9.198177337646484

Token 42: '       ' (ID: 309)
  Prédit: ' hole'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' hole' → logprob: -0.48973727226257324
    2. 'hole' → logprob: -0.9897372722625732
    3. '       ' → logprob: -5.114737510681152
    4. '           ' → logprob: -6.489737510681152
    5. '        ' → logprob: -6.614737510681152
    6. ')' → logprob: -6.614737510681152
    7. ':' → logprob: -7.114737510681152
    8. '-hole' → logprob: -7.114737510681152
    9. '   ' → logprob: -7.239737510681152
    10. '    ' → logprob: -7.614737510681152

Token 43: ' if' (ID: 538)
  Prédit: ' hole'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' hole' → logprob: -0.5808141827583313
    2. 'hole' → logprob: -0.8308141827583313
    3. '       ' → logprob: -6.330814361572266
    4. '   ' → logprob: -6.330814361572266
    5. '```' → logprob: -7.705814361572266
    6. '    ' → logprob: -8.830814361572266
    7. ' if' → logprob: -8.955814361572266
    8. '``' → logprob: -9.830814361572266
    9. '           ' → logprob: -9.830814361572266
    10. '`' → logprob: -9.830814361572266

Token 44: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.2740245759487152
    2. ' hole' → logprob: -2.274024486541748
    3. ' not' → logprob: -2.774024486541748
    4. 'c' → logprob: -3.524024486541748
    5. ' len' → logprob: -3.524024486541748
    6. 'hole' → logprob: -4.649024486541748
    7. 'len' → logprob: -5.899024486541748
    8. 'not' → logprob: -6.399024486541748
    9. ' i' → logprob: -7.961524486541748
    10. ' ' → logprob: -8.274024963378906

Token 45: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.7562724947929382
    2. ' not' → logprob: -0.7562724947929382
    3. ' >' → logprob: -3.256272554397583
    4. '>' → logprob: -5.131272315979004
    5. ' ' → logprob: -5.131272315979004
    6. '-' → logprob: -5.381272315979004
    7. ' <' → logprob: -6.131272315979004
    8. ' ==' → logprob: -6.631272315979004
    9. 'not' → logprob: -7.381272315979004
    10. ' -' → logprob: -7.756272315979004

Token 46: ' hole' (ID: 22985)
  Prédit: ' hole'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' hole' → logprob: -0.008681939914822578
    2. 'hole' → logprob: -4.758681774139404
    3. ' holes' → logprob: -10.008682250976562
    4. ' cats' → logprob: -11.883682250976562
    5. '-hole' → logprob: -12.383682250976562
    6. ' cat' → logprob: -12.758682250976562
    7. ' ' → logprob: -13.258682250976562
    8. ' hall' → logprob: -13.696182250976562
    9. ')' → logprob: -13.696182250976562
    10. 'holes' → logprob: -13.883682250976562

Token 47: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.25445953011512756
    2. '):' → logprob: -1.5044595003128052
    3. ']:' → logprob: -7.129459381103516
    4. '>:' → logprob: -7.129459381103516
    5. ')' → logprob: -8.004459381103516
    6. '}:' → logprob: -8.254459381103516
    7. ' :' → logprob: -9.379459381103516
    8. '<|end|>' → logprob: -10.004459381103516
    9. '#:' → logprob: -10.379459381103516
    10. ':**' → logprob: -10.754459381103516

Token 48: '           ' (ID: 352)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' continue' → logprob: -0.4710582494735718
    2. '           ' → logprob: -1.0960582494735718
    3. 'continue' → logprob: -3.8460583686828613
    4. ' hole' → logprob: -4.846058368682861
    5. 'hole' → logprob: -5.346058368682861
    6. '            ' → logprob: -5.471058368682861
    7. ':' → logprob: -7.596058368682861
    8. ' ' → logprob: -7.846058368682861
    9. '               ' → logprob: -8.346057891845703
    10. ' continues' → logprob: -8.471057891845703

Token 49: ' #' (ID: 1069)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' continue' → logprob: -0.7797339558601379
    2. ' hole' → logprob: -1.0297338962554932
    3. 'hole' → logprob: -2.779733896255493
    4. ' pass' → logprob: -2.779733896255493
    5. 'continue' → logprob: -3.529733896255493
    6. '           ' → logprob: -3.779733896255493
    7. 'pass' → logprob: -5.529734134674072
    8. '               ' → logprob: -6.904734134674072
    9. '            ' → logprob: -7.404734134674072
    10. ' break' → logprob: -7.404734134674072

Token 50: ' Cat' (ID: 19288)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' continue' → logprob: -0.6820156574249268
    2. ' hole' → logprob: -1.0570156574249268
    3. ' pass' → logprob: -2.5570156574249268
    4. 'hole' → logprob: -3.6820156574249268
    5. ' break' → logprob: -3.8070156574249268
    6. 'continue' → logprob: -4.182015419006348
    7. 'pass' → logprob: -6.307015419006348
    8. ' #' → logprob: -6.432015419006348
    9. '#' → logprob: -7.182015419006348
    10. '    ' → logprob: -8.057015419006348

Token 51: ' already' (ID: 4279)
  Prédit: ' leaves'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' leaves' → logprob: -0.05165616795420647
    2. 's' → logprob: -4.301656246185303
    3. ' exits' → logprob: -4.926656246185303
    4. ' disappears' → logprob: -5.051656246185303
    5. ' continues' → logprob: -5.426656246185303
    6. ' is' → logprob: -6.051656246185303
    7. ' enters' → logprob: -6.051656246185303
    8. 'le' → logprob: -6.551656246185303
    9. ' breaks' → logprob: -6.676656246185303
    10. ' jumps' → logprob: -6.801656246185303

Token 52: ' inside' (ID: 6772)
  Prédit: ' continues'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' continues' → logprob: -1.3102705478668213
    2. ' continue' → logprob: -2.1852705478668213
    3. 'continue' → logprob: -2.3102705478668213
    4. ' pass' → logprob: -2.6852705478668213
    5. ' leaves' → logprob: -2.6852705478668213
    6. 'pass' → logprob: -3.0602705478668213
    7. 'contin' → logprob: -3.1852705478668213
    8. '           ' → logprob: -3.3102705478668213
    9. ' enters' → logprob: -3.4352705478668213
    10. ' passes' → logprob: -3.4352705478668213

Token 53: ',' (ID: 11)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' continue' → logprob: -0.773615837097168
    2. '           ' → logprob: -0.898615837097168
    3. 'continue' → logprob: -2.648615837097168
    4. ' hole' → logprob: -3.148615837097168
    5. 'hole' → logprob: -4.898615837097168
    6. '               ' → logprob: -5.648615837097168
    7. '       ' → logprob: -6.148615837097168
    8. ':' → logprob: -6.648615837097168
    9. ' continues' → logprob: -7.648615837097168
    10. ' pass' → logprob: -7.648615837097168

Token 54: ' error' (ID: 2915)
  Prédit: ' continue'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' continue' → logprob: -0.41699233651161194
    2. ' hole' → logprob: -1.4169923067092896
    3. ' pass' → logprob: -3.166992425918579
    4. '           ' → logprob: -3.791992425918579
    5. 'continue' → logprob: -4.1669921875
    6. 'hole' → logprob: -4.6669921875
    7. ' break' → logprob: -6.1669921875
    8. '       ' → logprob: -6.6669921875
    9. ' #' → logprob: -6.7919921875
    10. 'pass' → logprob: -7.0419921875

Token 55: '
' (ID: 198)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.0080426931381226
    2. ':' → logprob: -1.5080426931381226
    3. '           ' → logprob: -1.8830426931381226
    4. '   ' → logprob: -2.008042812347412
    5. '       ' → logprob: -3.008042812347412
    6. ' continue' → logprob: -4.008042812347412
    7. '):' → logprob: -4.383042812347412
    8. 'continue' → logprob: -4.508042812347412
    9. '\n' → logprob: -4.883042812347412
    10. '    ' → logprob: -5.133042812347412

Token 56: '           ' (ID: 352)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.44100040197372437
    2. ')' → logprob: -2.066000461578369
    3. '       ' → logprob: -2.191000461578369
    4. '           ' → logprob: -2.691000461578369
    5. ':' → logprob: -3.941000461578369
    6. 'print' → logprob: -4.316000461578369
    7. '    ' → logprob: -5.441000461578369
    8. '\n' → logprob: -6.441000461578369
    9. 'continue' → logprob: -6.441000461578369
    10. ' continue' → logprob: -6.566000461578369

Token 57: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.9200571179389954
    2. '   ' → logprob: -1.5450570583343506
    3. ' break' → logprob: -2.0450570583343506
    4. ' print' → logprob: -2.6700570583343506
    5. 'break' → logprob: -2.7950570583343506
    6. ' pass' → logprob: -3.6700570583343506
    7. 'pass' → logprob: -4.17005729675293
    8. ' raise' → logprob: -4.17005729675293
    9. ' continue' → logprob: -4.17005729675293
    10. '       ' → logprob: -4.29505729675293

Token 58: '(i' (ID: 3649)
  Prédit: '("'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '("' → logprob: -0.2925655245780945
    2. '(' → logprob: -1.4175655841827393
    3. '('' → logprob: -4.91756534576416
    4. '(-' → logprob: -5.66756534576416
    5. '("("' → logprob: -8.29256534576416
    6. '("")' → logprob: -9.41756534576416
    7. '(f' → logprob: -9.54256534576416
    8. '()' → logprob: -9.66756534576416
    9. '("(' → logprob: -9.91756534576416
    10. '(False' → logprob: -11.41756534576416

Token 59: ' +' (ID: 659)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.04269162937998772
    2. ',' → logprob: -3.667691707611084
    3. '+' → logprob: -4.792691707611084
    4. ' )' → logprob: -5.167691707611084
    5. ' ,' → logprob: -7.167691707611084
    6. ')
' → logprob: -7.667691707611084
    7. ' +' → logprob: -8.042691230773926
    8. ' ' → logprob: -8.917691230773926
    9. '*' → logprob: -9.042691230773926
    10. '")' → logprob: -9.417691230773926

Token 60: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.17991900444030762
    2. ' ' → logprob: -1.8049190044403076
    3. ')' → logprob: -8.679919242858887
    4. ' )' → logprob: -13.429919242858887
    5. '"' → logprob: -14.804919242858887
    6. '2' → logprob: -14.929919242858887
    7. '<|end|>' → logprob: -15.054919242858887
    8. '`' → logprob: -15.429919242858887
    9. '```' → logprob: -15.429919242858887
    10. '0' → logprob: -15.492419242858887

Token 61: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0016633969498798251
    2. ' ' → logprob: -6.5016632080078125
    3. ')' → logprob: -8.751663208007812
    4. '2' → logprob: -13.751663208007812
    5. ' )' → logprob: -14.626663208007812
    6. '),' → logprob: -15.126663208007812
    7. '"' → logprob: -15.626663208007812
    8. '")' → logprob: -15.751663208007812
    9. '   ' → logprob: -15.876663208007812
    10. '`)' → logprob: -16.376663208007812

Token 62: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.009463280439376831
    2. ')
' → logprob: -4.759463310241699
    3. ' )' → logprob: -7.384463310241699
    4. ',' → logprob: -9.0094633102417
    5. ')
' → logprob: -10.1344633102417
    6. '")' → logprob: -11.0094633102417
    7. ' )
' → logprob: -11.3844633102417
    8. ')`' → logprob: -12.0094633102417
    9. '```' → logprob: -12.5094633102417
    10. '),' → logprob: -12.6344633102417

Token 63: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5962940454483032
    2. '           ' → logprob: -0.8462940454483032
    3. ')' → logprob: -4.471293926239014
    4. '               ' → logprob: -4.971293926239014
    5. '   ' → logprob: -7.221293926239014
    6. ')
' → logprob: -8.346294403076172
    7. '
' → logprob: -8.721294403076172
    8. '<|end|>' → logprob: -8.971294403076172
    9. '```' → logprob: -9.346294403076172
    10. ',' → logprob: -9.971294403076172

Token 64: ' break' (ID: 2338)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'break' (adapté à ' break') → logprob: -0.25911539793014526
    2. ' break' → logprob: -1.50911545753479
    3. 'exit' → logprob: -5.384115219116211
    4. '   ' → logprob: -6.884115219116211
    5. '	break' → logprob: -7.259115219116211
    6. '       ' → logprob: -7.884115219116211
    7. ' exit' → logprob: -8.509115219116211
    8. '           ' → logprob: -9.509115219116211
    9. ' ' → logprob: -9.884115219116211
    10. '    ' → logprob: -10.134115219116211

Token 65: '
' (ID: 198)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.5459619760513306
    2. '   ' → logprob: -1.5459619760513306
    3. '       ' → logprob: -2.170961856842041
    4. ' else' → logprob: -2.545961856842041
    5. ')' → logprob: -4.920961856842041
    6. ' ' → logprob: -6.420961856842041
    7. '<|end|>' → logprob: -6.420961856842041
    8. '	else' → logprob: -6.795961856842041
    9. '```' → logprob: -7.295961856842041
    10. '        
' → logprob: -7.795961856842041

Token 66: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.3904758095741272
    2. 'else' → logprob: -1.3904757499694824
    3. ' else' → logprob: -2.7654757499694824
    4. '   ' → logprob: -4.890475749969482
    5. ')' → logprob: -5.890475749969482
    6. '	else' → logprob: -8.64047622680664
    7. '           ' → logprob: -8.76547622680664
    8. ' ' → logprob: -9.26547622680664
    9. '<|end|>' → logprob: -9.26547622680664
    10. '```' → logprob: -9.26547622680664

Token 67: ' else' (ID: 1203)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.7044225931167603
    2. 'else' (adapté à ' else') → logprob: -1.3294225931167603
    3. ' else' → logprob: -1.5794225931167603
    4. '   ' → logprob: -3.9544224739074707
    5. ')' → logprob: -5.079422473907471
    6. ' ' → logprob: -5.454422473907471
    7. '	else' → logprob: -6.829422473907471
    8. '<|end|>' → logprob: -6.829422473907471
    9. '           ' → logprob: -7.829422473907471
    10. '    ' → logprob: -7.954422473907471

Token 68: ':
' (ID: 734)
  Prédit: ' hole'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' hole' → logprob: -0.7839005589485168
    2. '           ' → logprob: -0.9089005589485168
    3. 'hole' → logprob: -2.783900499343872
    4. ':' → logprob: -2.783900499343872
    5. ':
' → logprob: -5.408900737762451
    6. '            
' → logprob: -6.033900737762451
    7. ' ' → logprob: -6.533900737762451
    8. '               ' → logprob: -6.533900737762451
    9. '       ' → logprob: -6.908900737762451
    10. '
' → logprob: -7.033900737762451

Token 69: '           ' (ID: 352)
  Prédit: 'hole'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'hole' → logprob: -0.7463552355766296
    2. ' hole' → logprob: -0.8713552355766296
    3. '           ' → logprob: -2.3713552951812744
    4. '   ' → logprob: -4.496355056762695
    5. '       ' → logprob: -5.996355056762695
    6. '```' → logprob: -8.621355056762695
    7. '               ' → logprob: -9.246355056762695
    8. ' ' → logprob: -9.746355056762695
    9. '  ' → logprob: -10.246355056762695
    10. '-hole' → logprob: -10.246355056762695

Token 70: ' hole' (ID: 22985)
  Prédit: ' hole'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' hole' → logprob: -0.16086556017398834
    2. 'hole' (adapté à ' hole') → logprob: -1.9108655452728271
    3. '           ' → logprob: -7.785865783691406
    4. '   ' → logprob: -9.410865783691406
    5. '       ' → logprob: -10.535865783691406
    6. '               ' → logprob: -10.910865783691406
    7. '-hole' → logprob: -10.910865783691406
    8. '            ' → logprob: -11.035865783691406
    9. '    ' → logprob: -11.035865783691406
    10. ' ' → logprob: -11.660865783691406

Token 71: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.0011722482740879059
    2. '.' → logprob: -6.751172065734863
    3. ' .' → logprob: -13.751172065734863
    4. '.add' → logprob: -14.876172065734863
    5. '.app' → logprob: -15.251172065734863
    6. '.extend' → logprob: -16.00117301940918
    7. '.ap' → logprob: -16.50117301940918
    8. '.push' → logprob: -17.00117301940918
    9. '.insert' → logprob: -17.12617301940918
    10. 'append' → logprob: -17.25117301940918

Token 72: '(c' (ID: 2410)
  Prédit: '(c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(c' → logprob: -0.008617881685495377
    2. '(' → logprob: -4.758617877960205
    3. '((' → logprob: -13.383618354797363
    4. '(i' → logprob: -14.383618354797363
    5. '(cat' → logprob: -15.008618354797363
    6. '(
' → logprob: -15.133618354797363
    7. '(s' → logprob: -15.383618354797363
    8. '(C' → logprob: -16.633617401123047
    9. '(k' → logprob: -16.633617401123047
    10. ' (' → logprob: -16.758617401123047

Token 73: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.018703270703554153
    2. ')
' → logprob: -4.018703460693359
    3. '       ' → logprob: -8.01870346069336
    4. '   ' → logprob: -8.89370346069336
    5. ' )' → logprob: -9.76870346069336
    6. '))' → logprob: -11.89370346069336
    7. ')
' → logprob: -12.01870346069336
    8. ')

' → logprob: -12.01870346069336
    9. ' )
' → logprob: -13.01870346069336
    10. '           ' → logprob: -13.64370346069336

Token 74: '   ' (ID: 271)
  Prédit: ' else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.8108783960342407
    2. 'else' → logprob: -1.0608783960342407
    3. '   ' → logprob: -2.185878276824951
    4. 'elif' → logprob: -3.060878276824951
    5. ' elif' → logprob: -3.685878276824951
    6. ')' → logprob: -4.685878276824951
    7. '<|end|>' → logprob: -4.685878276824951
    8. '	elif' → logprob: -6.685878276824951
    9. '```' → logprob: -6.685878276824951
    10. '	else' → logprob: -6.810878276824951

Token 75: ' else' (ID: 1203)
  Prédit: 'else'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' (adapté à ' else') → logprob: -0.0966179221868515
    2. ' else' → logprob: -2.5966179370880127
    3. '   ' → logprob: -4.721617698669434
    4. 'elif' → logprob: -4.846617698669434
    5. ' elif' → logprob: -7.471617698669434
    6. '	else' → logprob: -9.096617698669434
    7. '       ' → logprob: -9.846617698669434
    8. ')' → logprob: -10.846617698669434
    9. '	elif' → logprob: -10.971617698669434
    10. '```' → logprob: -11.096617698669434

Token 76: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.0020602114964276552
    2. ':
' → logprob: -6.252060413360596
    3. '       ' → logprob: -10.127059936523438
    4. '   ' → logprob: -10.502059936523438
    5. ' :' → logprob: -10.877059936523438
    6. '<|end|>' → logprob: -11.377059936523438
    7. 's' → logprob: -12.002059936523438
    8. ':
' → logprob: -12.252059936523438
    9. '{' → logprob: -12.377059936523438
    10. ':

' → logprob: -13.002059936523438

Token 77: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.01896766386926174
    2. '        ' → logprob: -4.768967628479004
    3. ' #' → logprob: -5.518967628479004
    4. '#' → logprob: -6.143967628479004
    5. ' ' → logprob: -6.518967628479004
    6. '    ' → logprob: -7.143967628479004
    7. ' if' → logprob: -7.518967628479004
    8. 'if' → logprob: -7.768967628479004
    9. '   ' → logprob: -8.393967628479004
    10. ' ' → logprob: -8.768967628479004

Token 78: ' #' (ID: 1069)
  Prédit: 'c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -0.5256585478782654
    2. ' c' → logprob: -1.1506586074829102
    3. '#' (adapté à ' #') → logprob: -3.27565860748291
    4. '       ' → logprob: -3.90065860748291
    5. '   ' → logprob: -4.65065860748291
    6. 'if' → logprob: -4.77565860748291
    7. ' #' → logprob: -5.40065860748291
    8. ' if' → logprob: -5.65065860748291
    9. 'abs' → logprob: -5.65065860748291
    10. ' abs' → logprob: -6.40065860748291

Token 79: ' Cat' (ID: 19288)
  Prédit: ' cat'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cat' → logprob: -0.8713648915290833
    2. '#' → logprob: -1.9963648319244385
    3. 'cat' → logprob: -1.9963648319244385
    4. 'Cat' → logprob: -1.9963648319244385
    5. 'c' → logprob: -2.6213648319244385
    6. ' Cat' → logprob: -3.1213648319244385
    7. ' c' → logprob: -3.4963648319244385
    8. ' #' → logprob: -4.121365070343018
    9. 'abs' → logprob: -5.496365070343018
    10. ' abs' → logprob: -5.871365070343018

Token 80: ' exits' (ID: 93706)
  Prédit: 'le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'le' → logprob: -1.1338359117507935
    2. '=' → logprob: -1.5088359117507935
    3. 'ex' → logprob: -1.5088359117507935
    4. 'ent' → logprob: -1.8838359117507935
    5. '_ex' → logprob: -3.758835792541504
    6. ' =' → logprob: -4.008835792541504
    7. ' leaves' → logprob: -4.133835792541504
    8. '_ent' → logprob: -5.133835792541504
    9. 'abs' → logprob: -5.883835792541504
    10. '+=' → logprob: -6.008835792541504

Token 81: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.01361001655459404
    2. '        ' → logprob: -5.138609886169434
    3. ' c' → logprob: -5.888609886169434
    4. '   ' → logprob: -6.638609886169434
    5. 'c' → logprob: -7.138609886169434
    6. ' if' → logprob: -7.138609886169434
    7. '(' → logprob: -7.888609886169434
    8. '    ' → logprob: -8.388609886169434
    9. 'if' → logprob: -8.388609886169434
    10. '```' → logprob: -8.388609886169434

Token 82: '       ' (ID: 309)
  Prédit: ' c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.604733943939209
    2. '       ' → logprob: -1.104733943939209
    3. ' if' → logprob: -3.104733943939209
    4. '        ' → logprob: -3.854733943939209
    5. '   ' → logprob: -4.229733943939209
    6. ' abs' → logprob: -4.229733943939209
    7. 'c' → logprob: -4.354733943939209
    8. 'abs' → logprob: -5.729733943939209
    9. 'if' → logprob: -5.854733943939209
    10. '    ' → logprob: -6.354733943939209

Token 83: ' c' (ID: 274)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.8073307871818542
    2. ' c' → logprob: -1.182330846786499
    3. 'c' (adapté à ' c') → logprob: -2.307330846786499
    4. 'if' → logprob: -2.432330846786499
    5. ' abs' → logprob: -3.557330846786499
    6. 'abs' → logprob: -3.932330846786499
    7. '       ' → logprob: -5.30733060836792
    8. ' x' → logprob: -6.68233060836792
    9. 'x' → logprob: -7.05733060836792
    10. '   ' → logprob: -7.05733060836792

Token 84: '_abs' (ID: 81310)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.006793051492422819
    2. ' =' → logprob: -5.006793022155762
    3. '_abs' → logprob: -10.006793022155762
    4. '*=' → logprob: -10.881793022155762
    5. 'abs' → logprob: -11.881793022155762
    6. 'c' → logprob: -13.381793022155762
    7. '=-' → logprob: -13.381793022155762
    8. '=int' → logprob: -14.381793022155762
    9. ' *=' → logprob: -14.381793022155762
    10. '=
' → logprob: -14.881793022155762

Token 85: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.00861528143286705
    2. ' =' → logprob: -4.758615493774414
    3. '=int' → logprob: -15.383615493774414
    4. '＝' → logprob: -16.008615493774414
    5. '=c' → logprob: -16.008615493774414
    6. 'c' → logprob: -16.258615493774414
    7. '.=' → logprob: -16.758615493774414
    8. 's' → logprob: -16.883615493774414
    9. '_abs' → logprob: -17.508615493774414
    10. '	' → logprob: -17.758615493774414

Token 86: ' -' (ID: 533)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.8456878662109375
    2. ' -' → logprob: -1.0956878662109375
    3. ' abs' → logprob: -1.9706878662109375
    4. 'abs' → logprob: -2.3456878662109375
    5. '-c' → logprob: -7.0956878662109375
    6. '   ' → logprob: -7.9706878662109375
    7. ' ' → logprob: -11.095687866210938
    8. '(abs' → logprob: -11.220687866210938
    9. '.abs' → logprob: -11.220687866210938
    10. '-s' → logprob: -11.970687866210938

Token 87: 'c' (ID: 66)
  Prédit: 'c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'c' → logprob: -4.320199877838604e-07
    2. ' c' → logprob: -14.875
    3. '<|end|>' → logprob: -19.5
    4. 'cation' → logprob: -19.625
    5. '	c' → logprob: -20.125
    6. ')c' → logprob: -20.5
    7. '1' → logprob: -20.625
    8. '   ' → logprob: -20.75
    9. '_c' → logprob: -21.75
    10. 'с' → logprob: -22.0

Token 88: '
' (ID: 198)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.1635386347770691
    2. 'if' → logprob: -2.038538694381714
    3. '       ' → logprob: -4.788538455963135
    4. '<|end|>' → logprob: -4.788538455963135
    5. '	if' → logprob: -6.788538455963135
    6. ' ' → logprob: -7.038538455963135
    7. '   ' → logprob: -7.038538455963135
    8. '
' → logprob: -7.538538455963135
    9. '<|end|>' → logprob: -8.538538932800293
    10. '        ' → logprob: -9.413538932800293

Token 89: '       ' (ID: 309)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.4086124300956726
    2. '       ' → logprob: -1.5336124897003174
    3. '   ' → logprob: -2.7836124897003174
    4. 'if' → logprob: -3.7836124897003174
    5. '<|end|>' → logprob: -4.283612251281738
    6. '
' → logprob: -4.658612251281738
    7. '	if' → logprob: -4.908612251281738
    8. ' ' → logprob: -6.533612251281738
    9. '<|end|>' → logprob: -7.033612251281738
    10. '	' → logprob: -7.533612251281738

Token 90: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.1427452117204666
    2. 'if' (adapté à ' if') → logprob: -2.01774525642395
    3. ' ' → logprob: -10.642745018005371
    4. '       ' → logprob: -11.142745018005371
    5. '   ' → logprob: -11.767745018005371
    6. '	if' → logprob: -12.392745018005371
    7. '<|end|>' → logprob: -12.392745018005371
    8. ' 
' → logprob: -12.517745018005371
    9. '```' → logprob: -12.892745018005371
    10. '    ' → logprob: -13.267745018005371

Token 91: ' len' (ID: 4631)
  Prédit: ' c'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.016081061214208603
    2. 'c' → logprob: -4.141080856323242
    3. ' not' → logprob: -10.266080856323242
    4. 'not' → logprob: -12.141080856323242
    5. ' ' → logprob: -12.891080856323242
    6. '	c' → logprob: -13.641080856323242
    7. ' ' → logprob: -14.266080856323242
    8. ')c' → logprob: -14.703580856323242
    9. 'hole' → logprob: -14.828580856323242
    10. ' hole' → logprob: -15.203580856323242

Token 92: '(h' (ID: 8120)
  Prédit: '(h'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(h' → logprob: -7.636475493200123e-05
    2. '(' → logprob: -9.625076293945312
    3. '(c' → logprob: -12.125076293945312
    4. 'h' → logprob: -13.625076293945312
    5. 'hole' → logprob: -13.625076293945312
    6. ' (' → logprob: -14.375076293945312
    7. '(l' → logprob: -14.500076293945312
    8. ' hole' → logprob: -15.250076293945312
    9. '()' → logprob: -15.500076293945312
    10. '(
' → logprob: -16.125076293945312

Token 93: 'ole' (ID: 1491)
  Prédit: 'ole'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ole' → logprob: -0.1318691074848175
    2. 'hole' → logprob: -2.131869077682495
    3. ' hole' → logprob: -6.006869316101074
    4. '(h' → logprob: -6.381869316101074
    5. ')' → logprob: -8.131869316101074
    6. '(' → logprob: -9.256869316101074
    7. 'o' → logprob: -9.381869316101074
    8. 'oles' → logprob: -9.506869316101074
    9. '>' → logprob: -9.881869316101074
    10. '[' → logprob: -10.756869316101074

Token 94: ')' (ID: 8)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.4797542989253998
    2. ' ==' → logprob: -0.9797543287277222
    3. ')' → logprob: -5.229754447937012
    4. ')==' → logprob: -8.354754447937012
    5. '>' → logprob: -10.729754447937012
    6. '=' → logprob: -10.979754447937012
    7. '0' → logprob: -11.229754447937012
    8. '===' → logprob: -12.229754447937012
    9. '()==' → logprob: -12.604754447937012
    10. ' and' → logprob: -13.229754447937012

Token 95: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.3869461715221405
    2. '==' → logprob: -1.136946201324463
    3. '0' → logprob: -10.261945724487305
    4. '>' → logprob: -10.886945724487305
    5. ' >' → logprob: -11.511945724487305
    6. '=' → logprob: -12.886945724487305
    7. 'and' → logprob: -13.011945724487305
    8. ' and' → logprob: -13.136945724487305
    9. '()==' → logprob: -13.511945724487305
    10. ' ' → logprob: -14.011945724487305

Token 96: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00012415809032972902
    2. ' ' → logprob: -9.000123977661133
    3. ' or' → logprob: -16.000123977661133
    4. ')' → logprob: -16.500123977661133
    5. '=' → logprob: -17.187623977661133
    6. '1' → logprob: -17.437623977661133
    7. '۰' → logprob: -17.562623977661133
    8. '   ' → logprob: -17.562623977661133
    9. '```' → logprob: -17.562623977661133
    10. '>' → logprob: -17.625123977661133

Token 97: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -4.596781946020201e-05
    2. ' ' → logprob: -10.000045776367188
    3. '1' → logprob: -16.375045776367188
    4. ')' → logprob: -16.937545776367188
    5. '>' → logprob: -17.187545776367188
    6. '  ' → logprob: -17.312545776367188
    7. 'hole' → logprob: -17.312545776367188
    8. '=' → logprob: -17.562545776367188
    9. '    ' → logprob: -17.625045776367188
    10. ' or' → logprob: -17.687545776367188

Token 98: ':
' (ID: 734)
  Prédit: ' or'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.00041518008220009506
    2. 'or' → logprob: -8.000414848327637
    3. '<|end|>' → logprob: -10.000414848327637
    4. '	or' → logprob: -11.250414848327637
    5. '       ' → logprob: -12.000414848327637
    6. ' and' → logprob: -12.250414848327637
    7. '           ' → logprob: -13.000414848327637
    8. ')' → logprob: -13.125414848327637
    9. ' ' → logprob: -13.125414848327637
    10. ':' → logprob: -13.750414848327637

Token 99: '           ' (ID: 352)
  Prédit: ' or'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.092955581843853
    2. '<|end|>' → logprob: -2.9679555892944336
    3. '           ' → logprob: -3.5929555892944336
    4. ' and' → logprob: -5.342955589294434
    5. '       ' → logprob: -5.717955589294434
    6. '<|end|>' → logprob: -7.592955589294434
    7. ':' → logprob: -8.092955589294434
    8. '               ' → logprob: -8.342955589294434
    9. ' ' → logprob: -8.967955589294434
    10. ')' → logprob: -9.092955589294434

Token 100: ' #' (ID: 1069)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.6830145120620728
    2. 'print' → logprob: -0.8080145120620728
    3. ' print' → logprob: -3.683014392852783
    4. '               ' → logprob: -4.183014392852783
    5. '       ' → logprob: -5.308014392852783
    6. '```' → logprob: -6.183014392852783
    7. '   ' → logprob: -7.058014392852783
    8. '
' → logprob: -8.433014869689941
    9. ' ' → logprob: -8.558014869689941
    10. '``' → logprob: -8.933014869689941

Token 101: ' No' (ID: 3004)
  Prédit: ' print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' print' → logprob: -0.21122026443481445
    2. 'print' → logprob: -1.7112202644348145
    3. '           ' → logprob: -4.9612202644348145
    4. ' ' → logprob: -6.9612202644348145
    5. '   ' → logprob: -7.5862202644348145
    6. ' break' → logprob: -7.9612202644348145
    7. '            ' → logprob: -8.336219787597656
    8. '       ' → logprob: -9.211219787597656
    9. '               ' → logprob: -9.211219787597656
    10. '```' → logprob: -9.836219787597656

Token 102: ' cat' (ID: 9059)
  Prédit: ' hole'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' hole' → logprob: -1.2957398891448975
    2. ' cats' → logprob: -1.6707398891448975
    3. 'hole' → logprob: -1.6707398891448975
    4. ' cat' → logprob: -1.7957398891448975
    5. 'cat' → logprob: -2.1707398891448975
    6. 'cats' → logprob: -3.4207398891448975
    7. ' holes' → logprob: -4.545740127563477
    8. 'print' → logprob: -4.920740127563477
    9. 'holes' → logprob: -5.045740127563477
    10. ' more' → logprob: -6.795740127563477

Token 103: ' inside' (ID: 6772)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.1672622561454773
    2. '       ' → logprob: -3.417262315750122
    3. ' to' → logprob: -3.417262315750122
    4. ' present' → logprob: -3.917262315750122
    5. 'print' → logprob: -4.292262077331543
    6. '               ' → logprob: -4.542262077331543
    7. ')' → logprob: -4.542262077331543
    8. ' in' → logprob: -5.417262077331543
    9. 'to' → logprob: -5.542262077331543
    10. 'present' → logprob: -5.542262077331543

Token 104: ' to' (ID: 316)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.00760887423530221
    2. '               ' → logprob: -5.382608890533447
    3. '       ' → logprob: -7.007608890533447
    4. 'print' → logprob: -7.632608890533447
    5. ')' → logprob: -7.757608890533447
    6. '<|end|>' → logprob: -7.757608890533447
    7. ' or' → logprob: -8.382608413696289
    8. ',' → logprob: -9.007608413696289
    9. '```' → logprob: -9.007608413696289
    10. '   ' → logprob: -9.382608413696289

Token 105: ' exit' (ID: 10654)
  Prédit: 'exit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'exit' → logprob: -0.49353286623954773
    2. ' exit' → logprob: -1.1185328960418701
    3. ' leave' → logprob: -3.11853289604187
    4. 'leave' → logprob: -4.118532657623291
    5. ' remove' → logprob: -6.993532657623291
    6. 'remove' → logprob: -7.243532657623291
    7. 'ex' → logprob: -8.99353313446045
    8. '_exit' → logprob: -9.24353313446045
    9. '	exit' → logprob: -9.99353313446045
    10. 'quit' → logprob: -10.05603313446045

Token 106: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.02111690491437912
    2. '               ' → logprob: -4.396116733551025
    3. ')' → logprob: -5.521116733551025
    4. '       ' → logprob: -6.271116733551025
    5. '<|end|>' → logprob: -6.896116733551025
    6. 'print' → logprob: -7.396116733551025
    7. '          ' → logprob: -8.896117210388184
    8. '            
' → logprob: -8.896117210388184
    9. '   ' → logprob: -9.021117210388184
    10. ')
' → logprob: -9.271117210388184

Token 107: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.013577927835285664
    2. '               ' → logprob: -4.888577938079834
    3. 'print' → logprob: -5.263577938079834
    4. '       ' → logprob: -7.763577938079834
    5. ' print' → logprob: -8.263577461242676
    6. '```' → logprob: -10.513577461242676
    7. '   ' → logprob: -10.638577461242676
    8. '<|end|>' → logprob: -11.513577461242676
    9. ',' → logprob: -11.638577461242676
    10. ')' → logprob: -11.888577461242676

Token 108: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.11815635859966278
    2. '           ' → logprob: -2.7431564331054688
    3. ' print' → logprob: -3.1181564331054688
    4. '       ' → logprob: -6.368156433105469
    5. '               ' → logprob: -7.243156433105469
    6. '   ' → logprob: -8.118156433105469
    7. '```' → logprob: -9.743156433105469
    8. '	print' → logprob: -11.118156433105469
    9. ' ' → logprob: -11.243156433105469
    10. '
' → logprob: -12.618156433105469

Token 109: '(i' (ID: 3649)
  Prédit: '(i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(i' → logprob: -0.0002516839886084199
    2. '(' → logprob: -8.375251770019531
    3. 'i' → logprob: -10.875251770019531
    4. ' (' → logprob: -14.250251770019531
    5. '0' → logprob: -14.375251770019531
    6. '((' → logprob: -15.625251770019531
    7. '(-' → logprob: -15.625251770019531
    8. ' i' → logprob: -16.00025177001953
    9. '`' → logprob: -16.25025177001953
    10. '('' → logprob: -17.12525177001953

Token 110: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.07895588129758835
    2. '+' → logprob: -2.578955888748169
    3. ')' → logprob: -9.95395565032959
    4. ' ' → logprob: -11.07895565032959
    5. ')+' → logprob: -14.07895565032959
    6. ' ' → logprob: -14.20395565032959
    7. ' )' → logprob: -14.95395565032959
    8. ' plus' → logprob: -15.45395565032959
    9. '1' → logprob: -15.57895565032959
    10. '   ' → logprob: -15.95395565032959

Token 111: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.02976403571665287
    2. ' ' → logprob: -3.52976393699646
    3. '<|end|>' → logprob: -12.404764175415039
    4. '   ' → logprob: -13.404764175415039
    5. ')' → logprob: -13.404764175415039
    6. '```' → logprob: -13.529764175415039
    7. '2' → logprob: -13.654764175415039
    8. '0' → logprob: -14.217264175415039
    9. '`' → logprob: -14.842264175415039
    10. '<|end|>' → logprob: -14.842264175415039

Token 112: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.00010962257510982454
    2. ' ' → logprob: -9.125109672546387
    3. '   ' → logprob: -15.937609672546387
    4. '```' → logprob: -16.12510871887207
    5. '2' → logprob: -16.25010871887207
    6. '`' → logprob: -16.56260871887207
    7. ')' → logprob: -16.75010871887207
    8. '<|end|>' → logprob: -17.37510871887207
    9. '+' → logprob: -17.56260871887207
    10. '１' → logprob: -17.93760871887207

Token 113: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.049024008214473724
    2. ')
' → logprob: -3.0490241050720215
    3. '       ' → logprob: -8.299023628234863
    4. '           ' → logprob: -8.674023628234863
    5. ')
' → logprob: -11.174023628234863
    6. ' )' → logprob: -14.549023628234863
    7. '   ' → logprob: -14.674023628234863
    8. ')

' → logprob: -15.174023628234863
    9. '               ' → logprob: -15.174023628234863
    10. ')return' → logprob: -15.174023628234863

Token 114: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0019751458894461393
    2. '       ' → logprob: -6.251975059509277
    3. '               ' → logprob: -10.626975059509277
    4. '<|end|>' → logprob: -11.626975059509277
    5. 'else' → logprob: -12.251975059509277
    6. 'elif' → logprob: -12.626975059509277
    7. '   ' → logprob: -13.751975059509277
    8. ')' → logprob: -13.876975059509277
    9. 'continue' → logprob: -14.001975059509277
    10. ',' → logprob: -14.251975059509277

Token 115: ' break' (ID: 2338)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.025814468041062355
    2. 'break' (adapté à ' break') → logprob: -3.7758145332336426
    3. '       ' → logprob: -6.650814533233643
    4. ' break' → logprob: -6.775814533233643
    5. '               ' → logprob: -9.900814056396484
    6. '   ' → logprob: -10.150814056396484
    7. '
' → logprob: -11.150814056396484
    8. '	break' → logprob: -11.525814056396484
    9. 'continue' → logprob: -11.775814056396484
    10. '```' → logprob: -13.275814056396484

Token 116: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.011991871520876884
    2. 'elif' → logprob: -4.88699197769165
    3. '<|end|>' → logprob: -5.51199197769165
    4. ' elif' → logprob: -8.386991500854492
    5. 'else' → logprob: -10.636991500854492
    6. '```' → logprob: -10.761991500854492
    7. '<|end|>' → logprob: -10.761991500854492
    8. ' or' → logprob: -11.511991500854492
    9. '	elif' → logprob: -11.886991500854492
    10. ')' → logprob: -12.261991500854492

Token 117: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00980283971875906
    2. 'elif' → logprob: -5.13480281829834
    3. '<|end|>' → logprob: -5.63480281829834
    4. ' elif' → logprob: -8.50980281829834
    5. '```' → logprob: -10.88480281829834
    6. '<|end|>' → logprob: -11.00980281829834
    7. ' or' → logprob: -11.13480281829834
    8. 'else' → logprob: -11.38480281829834
    9. '	elif' → logprob: -12.00980281829834
    10. ' and' → logprob: -12.25980281829834

Token 118: ' if' (ID: 538)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.4547618329524994
    2. 'elif' → logprob: -1.7047618627548218
    3. '<|end|>' → logprob: -2.3297617435455322
    4. 'if' (adapté à ' if') → logprob: -3.4547617435455322
    5. ' if' → logprob: -3.5797617435455322
    6. ' elif' → logprob: -4.704761981964111
    7. ')' → logprob: -5.329761981964111
    8. ' and' → logprob: -5.454761981964111
    9. 'and' → logprob: -6.204761981964111
    10. '<|end|>' → logprob: -6.579761981964111

Token 119: ' hole' (ID: 22985)
  Prédit: ' hole'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' hole' → logprob: -0.5058172345161438
    2. 'hole' → logprob: -1.380817174911499
    3. ' c' → logprob: -2.505817174911499
    4. 'c' → logprob: -2.755817174911499
    5. '   ' → logprob: -8.630817413330078
    6. '	c' → logprob: -10.130817413330078
    7. ' ' → logprob: -10.255817413330078
    8. ' not' → logprob: -10.255817413330078
    9. 'h' → logprob: -10.818317413330078
    10. '  ' → logprob: -11.505817413330078

Token 120: '[-' (ID: 17503)
  Prédit: '[-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[-' → logprob: -0.07170570641756058
    2. '[' → logprob: -3.6967058181762695
    3. '==' → logprob: -3.6967058181762695
    4. ' and' → logprob: -4.0717058181762695
    5. '.index' → logprob: -6.9467058181762695
    6. 'and' → logprob: -7.3217058181762695
    7. ' ==' → logprob: -7.6967058181762695
    8. '.count' → logprob: -8.19670581817627
    9. '[len' → logprob: -10.19670581817627
    10. '.' → logprob: -10.19670581817627

Token 121: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0033290917053818703
    2. ')' → logprob: -6.503329277038574
    3. ' ' → logprob: -6.878329277038574
    4. ']' → logprob: -8.628329277038574
    5. '()' → logprob: -9.003329277038574
    6. '!=' → logprob: -9.503329277038574
    7. ' !=' → logprob: -9.503329277038574
    8. 'len' → logprob: -9.628329277038574
    9. '-' → logprob: -10.003329277038574
    10. 'index' → logprob: -10.253329277038574

Token 122: ']' (ID: 60)
  Prédit: ' !='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' !=' → logprob: -0.30288946628570557
    2. '!=' → logprob: -1.6778894662857056
    3. ')' → logprob: -2.677889347076416
    4. ']' → logprob: -6.302889347076416
    5. ')!=' → logprob: -6.302889347076416
    6. '()!=' → logprob: -7.177889347076416
    7. '==' → logprob: -7.677889347076416
    8. ']!=' → logprob: -7.802889347076416
    9. '()' → logprob: -8.302889823913574
    10. ' ==' → logprob: -8.677889823913574

Token 123: ' !=' (ID: 1666)
  Prédit: ' !='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' !=' → logprob: -0.030722228810191154
    2. '!=' → logprob: -3.530722141265869
    3. ' ==' → logprob: -7.155722141265869
    4. '==' → logprob: -8.905722618103027
    5. ' ' → logprob: -10.905722618103027
    6. ')' → logprob: -11.030722618103027
    7. ')!=' → logprob: -11.530722618103027
    8. '()!=' → logprob: -12.280722618103027
    9. ' ' → logprob: -13.030722618103027
    10. '```' → logprob: -13.780722618103027

Token 124: ' c' (ID: 274)
  Prédit: ' c'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' c' → logprob: -0.020543519407510757
    2. 'c' → logprob: -3.8955435752868652
    3. ' ' → logprob: -14.770543098449707
    4. ' ' → logprob: -14.895543098449707
    5. '	c' → logprob: -15.145543098449707
    6. '(c' → logprob: -15.895543098449707
    7. '`' → logprob: -16.270544052124023
    8. '```' → logprob: -16.270544052124023
    9. '_c' → logprob: -16.520544052124023
    10. ')c' → logprob: -16.770544052124023

Token 125: '_abs' (ID: 81310)
  Prédit: '_abs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_abs' → logprob: -3.7697225252486533e-06
    2. 'abs' → logprob: -12.500003814697266
    3. '_ab' → logprob: -17.750003814697266
    4. 'Abs' → logprob: -17.750003814697266
    5. ' abs' → logprob: -18.625003814697266
    6. '```' → logprob: -19.250003814697266
    7. '.abs' → logprob: -19.375003814697266
    8. ' Abs' → logprob: -20.125003814697266
    9. '(abs' → logprob: -20.250003814697266
    10. '_ans' → logprob: -20.750003814697266

Token 126: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.014370576478540897
    2. ':
' → logprob: -4.264370441436768
    3. '):' → logprob: -9.139370918273926
    4. ')' → logprob: -10.014370918273926
    5. '           ' → logprob: -10.764370918273926
    6. '):
' → logprob: -11.014370918273926
    7. '       ' → logprob: -12.014370918273926
    8. '<|end|>' → logprob: -12.889370918273926
    9. ':

' → logprob: -13.014370918273926
    10. '.' → logprob: -13.639370918273926

Token 127: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0005794849130325019
    2. 'print' → logprob: -7.625579357147217
    3. '               ' → logprob: -10.500579833984375
    4. '       ' → logprob: -10.625579833984375
    5. ' print' → logprob: -10.875579833984375
    6. '```' → logprob: -12.000579833984375
    7. ':
' → logprob: -12.125579833984375
    8. '          ' → logprob: -12.625579833984375
    9. '   ' → logprob: -13.000579833984375
    10. '         ' → logprob: -14.250579833984375

Token 128: ' #' (ID: 1069)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.042742807418107986
    2. 'print' → logprob: -3.2927427291870117
    3. '       ' → logprob: -6.042742729187012
    4. ' print' → logprob: -6.542742729187012
    5. '               ' → logprob: -7.417742729187012
    6. '   ' → logprob: -9.042742729187012
    7. '```' → logprob: -9.667742729187012
    8. '
' → logprob: -9.792742729187012
    9. '          ' → logprob: -11.792742729187012
    10. ' ' → logprob: -12.417742729187012

Token 129: ' Cat' (ID: 19288)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.2951379120349884
    2. ' print' → logprob: -1.420137882232666
    3. '           ' → logprob: -4.295137882232666
    4. ' ' → logprob: -10.045138359069824
    5. '   ' → logprob: -10.045138359069824
    6. '	print' → logprob: -10.545138359069824
    7. '               ' → logprob: -11.045138359069824
    8. '       ' → logprob: -11.045138359069824
    9. '```' → logprob: -11.170138359069824
    10. 'Print' → logprob: -11.420138359069824

Token 130: ' trying' (ID: 6700)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -1.1465259790420532
    2. ' already' → logprob: -1.1465259790420532
    3. ' is' → logprob: -2.2715258598327637
    4. ' not' → logprob: -2.7715258598327637
    5. ' exits' → logprob: -3.0215258598327637
    6. 'print' → logprob: -3.6465258598327637
    7. ' print' → logprob: -3.8965258598327637
    8. 'already' → logprob: -4.271525859832764
    9. ' entered' → logprob: -4.521525859832764
    10. 'entered' → logprob: -4.646525859832764

Token 131: ' to' (ID: 316)
  Prédit: 'to'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'to' → logprob: -0.3132671117782593
    2. ' to' → logprob: -1.3132671117782593
    3. '           ' → logprob: -12.68826675415039
    4. ' ' → logprob: -14.43826675415039
    5. '   ' → logprob: -14.68826675415039
    6. '	to' → logprob: -14.93826675415039
    7. '       ' → logprob: -15.43826675415039
    8. '  ' → logprob: -16.31326675415039
    9. ' ' → logprob: -16.43826675415039
    10. '               ' → logprob: -16.43826675415039

Token 132: ' leave' (ID: 7668)
  Prédit: 'exit'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'exit' → logprob: -0.03701936453580856
    2. ' exit' → logprob: -3.7870192527770996
    3. 'leave' → logprob: -4.4120192527771
    4. 'enter' → logprob: -7.2870192527771
    5. ' leave' → logprob: -7.2870192527771
    6. 'print' → logprob: -10.037019729614258
    7. '	exit' → logprob: -10.912019729614258
    8. ' enter' → logprob: -11.162019729614258
    9. 'ex' → logprob: -11.537019729614258
    10. '_exit' → logprob: -11.662019729614258

Token 133: ' is' (ID: 382)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.04587622359395027
    2. 'print' → logprob: -3.1708762645721436
    3. ' print' → logprob: -6.9208760261535645
    4. 'i' → logprob: -7.6708760261535645
    5. '               ' → logprob: -8.045876502990723
    6. '       ' → logprob: -8.545876502990723
    7. ' i' → logprob: -8.545876502990723
    8. '(i' → logprob: -8.545876502990723
    9. '   ' → logprob: -8.795876502990723
    10. '```' → logprob: -8.920876502990723

Token 134: ' not' (ID: 625)
  Prédit: ' not'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' not' → logprob: -0.04520926997065544
    2. 'not' → logprob: -3.1702091693878174
    3. ' different' → logprob: -6.7952094078063965
    4. 'different' → logprob: -7.5452094078063965
    5. 'n't' → logprob: -7.7952094078063965
    6. ' out' → logprob: -10.295208930969238
    7. 'n' → logprob: -10.670208930969238
    8. '	not' → logprob: -11.170208930969238
    9. 'hole' → logprob: -11.545208930969238
    10. ' ' → logprob: -12.045208930969238

Token 135: ' last' (ID: 2174)
  Prédit: ' hole'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' hole' → logprob: -0.8569127917289734
    2. ' the' → logprob: -1.3569128513336182
    3. 'hole' → logprob: -1.3569128513336182
    4. 'the' → logprob: -2.981912851333618
    5. ' at' → logprob: -4.981912612915039
    6. ' last' → logprob: -6.356912612915039
    7. ' in' → logprob: -7.606912612915039
    8. 'last' → logprob: -7.981912612915039
    9. ' on' → logprob: -9.106912612915039
    10. 'at' → logprob: -9.356912612915039

Token 136: ' one' (ID: 1001)
  Prédit: ' in'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.5532917976379395
    2. '           ' → logprob: -1.5532917976379395
    3. 'in' → logprob: -2.5532917976379395
    4. ')' → logprob: -3.4282917976379395
    5. 'entered' → logprob: -3.9282917976379395
    6. '            ' → logprob: -4.4282917976379395
    7. 'hole' → logprob: -5.1782917976379395
    8. ' cat' → logprob: -5.1782917976379395
    9. '               ' → logprob: -5.3032917976379395
    10. ' entered' → logprob: -5.3032917976379395

Token 137: ' entered' (ID: 18375)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.004776737652719021
    2. '               ' → logprob: -5.379776954650879
    3. '       ' → logprob: -9.879776954650879
    4. 'print' → logprob: -10.379776954650879
    5. '<|end|>' → logprob: -10.879776954650879
    6. '          ' → logprob: -11.129776954650879
    7. ',' → logprob: -12.129776954650879
    8. ')' → logprob: -12.129776954650879
    9. ':
' → logprob: -12.254776954650879
    10. '   ' → logprob: -12.379776954650879

Token 138: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.007970587350428104
    2. '               ' → logprob: -5.132970809936523
    3. 'print' → logprob: -6.632970809936523
    4. ')' → logprob: -8.757970809936523
    5. '<|end|>' → logprob: -8.757970809936523
    6. '```' → logprob: -8.882970809936523
    7. '       ' → logprob: -9.757970809936523
    8. ',' → logprob: -10.132970809936523
    9. ' print' → logprob: -10.507970809936523
    10. ':
' → logprob: -10.757970809936523

Token 139: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0034619139041751623
    2. '               ' → logprob: -5.878461837768555
    3. 'print' → logprob: -7.503461837768555
    4. '       ' → logprob: -10.128461837768555
    5. '```' → logprob: -10.253461837768555
    6. ' print' → logprob: -11.378461837768555
    7. '<|end|>' → logprob: -12.503461837768555
    8. '   ' → logprob: -12.753461837768555
    9. '	       ' → logprob: -13.128461837768555
    10. '
' → logprob: -13.253461837768555

Token 140: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.016657911241054535
    2. '           ' → logprob: -4.266657829284668
    3. ' print' → logprob: -6.266657829284668
    4. '       ' → logprob: -7.516657829284668
    5. '               ' → logprob: -10.766657829284668
    6. '   ' → logprob: -10.766657829284668
    7. '	print' → logprob: -13.141657829284668
    8. '```' → logprob: -13.266657829284668
    9. '          ' → logprob: -14.016657829284668
    10. ' ' → logprob: -14.391657829284668

Token 141: '(i' (ID: 3649)
  Prédit: '(i'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(i' → logprob: -0.00026205103495158255
    2. '(' → logprob: -8.250262260437012
    3. ' (' → logprob: -14.500262260437012
    4. 'i' → logprob: -15.875262260437012
    5. '"' → logprob: -16.875261306762695
    6. '('' → logprob: -17.500261306762695
    7. '(
' → logprob: -17.500261306762695
    8. '`' → logprob: -17.625261306762695
    9. '((' → logprob: -17.625261306762695
    10. '(ii' → logprob: -18.750261306762695

Token 142: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.02482791244983673
    2. '+' → logprob: -3.7748279571533203
    3. ' ' → logprob: -6.52482795715332
    4. ' i' → logprob: -10.02482795715332
    5. ')' → logprob: -10.89982795715332
    6. '1' → logprob: -11.02482795715332
    7. 'i' → logprob: -11.14982795715332
    8. '  ' → logprob: -12.64982795715332
    9. '   ' → logprob: -12.89982795715332
    10. '<|end|>' → logprob: -12.89982795715332

Token 143: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.632706344127655
    2. ' ' → logprob: -0.757706344127655
    3. 'i' → logprob: -10.257706642150879
    4. ')' → logprob: -10.882706642150879
    5. ' i' → logprob: -11.132706642150879
    6. ' ' → logprob: -11.507706642150879
    7. '```' → logprob: -12.257706642150879
    8. '2' → logprob: -12.382706642150879
    9. '-' → logprob: -12.632706642150879
    10. '`' → logprob: -13.257706642150879

Token 144: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.0005526751047000289
    2. ' ' → logprob: -7.875552654266357
    3. 'i' → logprob: -8.750553131103516
    4. ' i' → logprob: -11.375553131103516
    5. '+' → logprob: -13.500553131103516
    6. '(i' → logprob: -14.500553131103516
    7. '   ' → logprob: -15.625553131103516
    8. ' +' → logprob: -16.125553131103516
    9. '```' → logprob: -16.500553131103516
    10. ')' → logprob: -16.625553131103516

Token 145: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.07893264293670654
    2. ')' → logprob: -2.578932762145996
    3. ')
' → logprob: -10.578932762145996
    4. '           ' → logprob: -11.078932762145996
    5. '       ' → logprob: -13.578932762145996
    6. ')`
' → logprob: -14.953932762145996
    7. ')

' → logprob: -15.453932762145996
    8. '   ' → logprob: -16.45393180847168
    9. ' )
' → logprob: -16.95393180847168
    10. ')`' → logprob: -17.20393180847168

Token 146: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.0004789320519194007
    2. '       ' → logprob: -8.000478744506836
    3. '               ' → logprob: -9.750478744506836
    4. 'else' → logprob: -9.750478744506836
    5. 'break' → logprob: -11.125478744506836
    6. '   ' → logprob: -12.500478744506836
    7. '
' → logprob: -12.625478744506836
    8. '```' → logprob: -13.750478744506836
    9. '          ' → logprob: -14.000478744506836
    10. '<|end|>' → logprob: -14.125478744506836

Token 147: ' break' (ID: 2338)
  Prédit: 'break'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'break' (adapté à ' break') → logprob: -0.3949083387851715
    2. '           ' → logprob: -1.1449083089828491
    3. '       ' → logprob: -5.019908428192139
    4. ' break' → logprob: -6.894908428192139
    5. '   ' → logprob: -8.64490795135498
    6. '               ' → logprob: -9.51990795135498
    7. '	break' → logprob: -9.76990795135498
    8. '
' → logprob: -9.76990795135498
    9. '```' → logprob: -11.39490795135498
    10. '		' → logprob: -13.26990795135498

Token 148: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.714431643486023
    2. 'else' → logprob: -0.714431643486023
    3. '   ' → logprob: -4.4644317626953125
    4. ' else' → logprob: -4.7144317626953125
    5. '<|end|>' → logprob: -8.214431762695312
    6. '```' → logprob: -9.839431762695312
    7. ')' → logprob: -10.089431762695312
    8. '	else' → logprob: -10.089431762695312
    9. '           ' → logprob: -10.089431762695312
    10. 'hole' → logprob: -10.214431762695312

Token 149: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.16388709843158722
    2. 'else' → logprob: -1.9138871431350708
    3. ' else' → logprob: -6.288887023925781
    4. '   ' → logprob: -6.413887023925781
    5. '           ' → logprob: -9.913887023925781
    6. 'hole' → logprob: -10.538887023925781
    7. '```' → logprob: -10.663887023925781
    8. '	else' → logprob: -11.288887023925781
    9. ')' → logprob: -11.288887023925781
    10. '<|end|>' → logprob: -12.163887023925781

Token 150: ' else' (ID: 1203)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.3017643392086029
    2. 'else' (adapté à ' else') → logprob: -2.0517642498016357
    3. 'hole' → logprob: -2.0517642498016357
    4. '   ' → logprob: -5.926764488220215
    5. ' else' → logprob: -8.176764488220215
    6. '           ' → logprob: -8.426764488220215
    7. ' hole' → logprob: -8.426764488220215
    8. '```' → logprob: -10.676764488220215
    9. 'holes' → logprob: -10.926764488220215
    10. '	else' → logprob: -12.051764488220215

Token 151: ':
' (ID: 734)
  Prédit: ':
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':
' → logprob: -0.5377986431121826
    2. ':' → logprob: -1.0377986431121826
    3. '           ' → logprob: -2.7877986431121826
    4. ':
' → logprob: -10.162798881530762
    5. '   ' → logprob: -10.287798881530762
    6. '):
' → logprob: -10.412798881530762
    7. '               ' → logprob: -10.787798881530762
    8. '          ' → logprob: -11.537798881530762
    9. ' :
' → logprob: -11.537798881530762
    10. '       ' → logprob: -12.037798881530762

Token 152: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.44835567474365234
    2. 'hole' → logprob: -1.0733556747436523
    3. ' hole' → logprob: -3.9483556747436523
    4. '   ' → logprob: -9.198355674743652
    5. 'ho' → logprob: -11.198355674743652
    6. '       ' → logprob: -11.448355674743652
    7. '```' → logprob: -11.698355674743652
    8. '               ' → logprob: -11.698355674743652
    9. 'holes' → logprob: -11.698355674743652
    10. '-hole' → logprob: -11.948355674743652

Token 153: ' hole' (ID: 22985)
  Prédit: 'hole'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'hole' (adapté à ' hole') → logprob: -0.00015407454338856041
    2. ' hole' → logprob: -8.875154495239258
    3. '           ' → logprob: -11.250154495239258
    4. 'ho' → logprob: -14.000154495239258
    5. 'holes' → logprob: -15.875154495239258
    6. '-hole' → logprob: -16.250154495239258
    7. '   ' → logprob: -16.750154495239258
    8. '       ' → logprob: -17.250154495239258
    9. 'hall' → logprob: -17.750154495239258
    10. 'h' → logprob: -18.000154495239258

Token 154: '.pop' (ID: 15746)
  Prédit: '.pop'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.pop' → logprob: -2.7014437364414334e-05
    2. '.' → logprob: -10.75002670288086
    3. 'pop' → logprob: -12.12502670288086
    4. '.remove' → logprob: -18.75002670288086
    5. '	pop' → logprob: -18.75002670288086
    6. '.append' → logprob: -19.87502670288086
    7. '.Pop' → logprob: -20.62502670288086
    8. ').' → logprob: -20.62502670288086
    9. ' .' → logprob: -20.75002670288086
    10. '_pop' → logprob: -21.12502670288086

Token 155: '()
' (ID: 1234)
  Prédit: '()'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()' → logprob: -2.3795937522663735e-05
    2. '(' → logprob: -10.87502384185791
    3. '()
' → logprob: -12.50002384185791
    4. '()

' → logprob: -14.50002384185791
    5. ' ()' → logprob: -15.75002384185791
    6. '()`' → logprob: -16.000022888183594
    7. '())' → logprob: -16.125022888183594
    8. '()\' → logprob: -16.375022888183594
    9. '();' → logprob: -17.000022888183594
    10. '()]' → logprob: -17.500022888183594

Token 156: 'else' (ID: 2807)
  Prédit: 'else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'else' → logprob: -0.007129258010536432
    2. ' else' → logprob: -5.007129192352295
    3. '<|end|>' → logprob: -8.257129669189453
    4. '```' → logprob: -8.882129669189453
    5. '
' → logprob: -12.507129669189453
    6. '[' → logprob: -13.382129669189453
    7. '	else' → logprob: -13.632129669189453
    8. '#else' → logprob: -13.632129669189453
    9. 'Else' → logprob: -13.757129669189453
    10. ')' → logprob: -14.132129669189453

Token 157: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.026301926001906395
    2. ':
' → logprob: -3.651301860809326
    3. ' :' → logprob: -14.401302337646484
    4. ':

' → logprob: -14.901302337646484
    5. ':
' → logprob: -15.651302337646484
    6. '<|end|>' → logprob: -15.901302337646484
    7. ' :
' → logprob: -16.151302337646484
    8. '
' → logprob: -16.401302337646484
    9. '```' → logprob: -16.526302337646484
    10. '{' → logprob: -17.276302337646484

Token 158: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4292033910751343
    2. 'print' → logprob: -1.0542033910751343
    3. ' print' → logprob: -8.429203033447266
    4. 'if' → logprob: -8.679203033447266
    5. '    
' → logprob: -10.304203033447266
    6. '0' → logprob: -10.679203033447266
    7. '       ' → logprob: -10.804203033447266
    8. '```' → logprob: -11.054203033447266
    9. '	print' → logprob: -12.179203033447266
    10. '
' → logprob: -12.304203033447266

Token 159: ' #' (ID: 1069)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.008993052877485752
    2. '   ' → logprob: -5.258993148803711
    3. ' print' → logprob: -5.883993148803711
    4. 'if' → logprob: -7.008993148803711
    5. ' if' → logprob: -9.883993148803711
    6. '```' → logprob: -13.133993148803711
    7. ' ' → logprob: -13.258993148803711
    8. 'for' → logprob: -13.258993148803711
    9. '  ' → logprob: -13.633993148803711
    10. '#' (adapté à ' #') → logprob: -13.758993148803711

Token 160: ' If' (ID: 1843)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.027508217841386795
    2. ' print' → logprob: -4.15250825881958
    3. 'if' → logprob: -5.15250825881958
    4. '   ' → logprob: -5.52750825881958
    5. ' if' → logprob: -6.52750825881958
    6. 'Print' → logprob: -10.152507781982422
    7. '    ' → logprob: -10.277507781982422
    8. '#' → logprob: -10.527507781982422
    9. 'If' → logprob: -11.152507781982422
    10. ' ' → logprob: -11.277507781982422

Token 161: ' no' (ID: 860)
  Prédit: 'len'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'len' → logprob: -0.07876243442296982
    2. ' len' → logprob: -2.8287625312805176
    3. ' not' → logprob: -4.703762531280518
    4. 'not' → logprob: -5.078762531280518
    5. 'True' → logprob: -7.203762531280518
    6. ' True' → logprob: -7.953762531280518
    7. 'hole' → logprob: -8.57876205444336
    8. '(len' → logprob: -10.57876205444336
    9. ' hole' → logprob: -11.07876205444336
    10. ' ' → logprob: -11.32876205444336

Token 162: ' error' (ID: 2915)
  Prédit: 'error'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'error' → logprob: -0.9068295359611511
    2. 'break' → logprob: -1.781829595565796
    3. ' error' → logprob: -1.906829595565796
    4. 'errors' → logprob: -2.031829595565796
    5. ' errors' → logprob: -2.281829595565796
    6. 'print' → logprob: -3.406829595565796
    7. ' break' → logprob: -4.906829357147217
    8. 'problem' → logprob: -6.656829357147217
    9. ' problems' → logprob: -7.156829357147217
    10. ' print' → logprob: -7.156829357147217

Token 163: ' found' (ID: 2491)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -1.1276657581329346
    2. '   ' → logprob: -1.1276657581329346
    3. ':
' → logprob: -1.1276657581329346
    4. 'print' → logprob: -3.7526657581329346
    5. ' print' → logprob: -5.5026655197143555
    6. ',' → logprob: -8.002665519714355
    7. '       ' → logprob: -9.002665519714355
    8. '
' → logprob: -9.002665519714355
    9. '    
' → logprob: -9.502665519714355
    10. '  ' → logprob: -9.752665519714355

Token 164: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1741361916065216
    2. 'print' → logprob: -2.549136161804199
    3. ':
' → logprob: -3.299136161804199
    4. ':' → logprob: -3.799136161804199
    5. ',' → logprob: -4.299136161804199
    6. ' print' → logprob: -5.299136161804199
    7. '
' → logprob: -6.549136161804199
    8. '    
' → logprob: -6.924136161804199
    9. '       ' → logprob: -7.674136161804199
    10. ',
' → logprob: -8.4241361618042

Token 165: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10111546516418457
    2. 'print' → logprob: -2.3511154651641846
    3. 'if' → logprob: -7.7261152267456055
    4. ' print' → logprob: -8.851115226745605
    5. '       ' → logprob: -8.976115226745605
    6. ':' → logprob: -8.976115226745605
    7. ',' → logprob: -11.101115226745605
    8. ' if' → logprob: -11.101115226745605
    9. '	print' → logprob: -11.726115226745605
    10. '```' → logprob: -11.851115226745605

Token 166: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -0.0023443729151040316
    2. ' print' → logprob: -6.502344608306885
    3. '   ' → logprob: -7.377344608306885
    4. 'if' → logprob: -8.502344131469727
    5. ' if' → logprob: -11.877344131469727
    6. '    ' → logprob: -14.127344131469727
    7. 'for' → logprob: -14.127344131469727
    8. '
' → logprob: -14.502344131469727
    9. '    
' → logprob: -14.502344131469727
    10. '  ' → logprob: -14.627344131469727

Token 167: '("' (ID: 568)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.17085236310958862
    2. '("' → logprob: -2.1708524227142334
    3. '0' → logprob: -3.2958524227142334
    4. '(len' → logprob: -5.670852184295654
    5. '(-' → logprob: -6.920852184295654
    6. '('' → logprob: -7.045852184295654
    7. '"' → logprob: -8.420852661132812
    8. '(L' → logprob: -9.420852661132812
    9. 'len' → logprob: -9.420852661132812
    10. '()' → logprob: -9.670852661132812

Token 168: 'OK' (ID: 5175)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.06791265308856964
    2. 'Correct' → logprob: -3.6929125785827637
    3. 'YES' → logprob: -4.692912578582764
    4. 'Yes' → logprob: -5.067912578582764
    5. 'Possible' → logprob: -5.317912578582764
    6. 'All' → logprob: -5.567912578582764
    7. 'COR' → logprob: -5.692912578582764
    8. 'correct' → logprob: -6.067912578582764
    9. 'OK' → logprob: -6.067912578582764
    10. 'Safe' → logprob: -6.067912578582764

Token 169: '")' (ID: 1405)
  Prédit: '")'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '")' → logprob: -0.00010270876373397186
    2. ')' → logprob: -9.500102996826172
    3. ')")' → logprob: -10.500102996826172
    4. '!")' → logprob: -15.500102996826172
    5. '")
' → logprob: -16.750102996826172
    6. '}")' → logprob: -17.250102996826172
    7. '')' → logprob: -17.375102996826172
    8. '"' → logprob: -17.875102996826172
    9. '”)' → logprob: -18.375102996826172
    10. ' ")' → logprob: -19.125102996826172


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 167
Tokens correctement prédits (1ère position, stricte): 54
Tokens correctement prédits (1ère position, avec adaptation): 62
Tokens correctement prédits (top 10): 121
Précision stricte (1ère position): 32.34%
Précision adaptée (1ère position): 37.13%
Précision (top 10): 72.46%
================================================================================
