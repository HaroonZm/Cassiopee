================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 16:58:14
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
m,f,b=map(int,input().split())
need=b-m
print(need if 0<need<=f else '0' if need<=0 else 'NA')
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'm' (ID: 76)
  → Token d'amorce (pas de prédiction)

Token 1: ',f' (ID: 38733)
  → Token d'amorce (pas de prédiction)

Token 2: ',b' (ID: 17568)
  → Token d'amorce (pas de prédiction)

Token 3: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.44454336166381836
    2. ',' → logprob: -1.1945433616638184
    3. ' =' → logprob: -3.0695433616638184
    4. '[' → logprob: -5.694543361663818
    5. '.' → logprob: -6.444543361663818
    6. ';' → logprob: -6.569543361663818
    7. '(' → logprob: -7.194543361663818
    8. ')' → logprob: -7.319543361663818
    9. '_' → logprob: -8.069543838500977
    10. ':' → logprob: -8.444543838500977

Token 4: 'map' (ID: 3726)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.11019285768270493
    2. '1' → logprob: -3.2351927757263184
    3. '[]' → logprob: -3.6101927757263184
    4. ' ' → logprob: -4.610192775726318
    5. '[],' → logprob: -4.610192775726318
    6. '[' → logprob: -4.860192775726318
    7. '10' → logprob: -5.735192775726318
    8. 'map' → logprob: -5.860192775726318
    9. ' []' → logprob: -7.485192775726318
    10. ' [],' → logprob: -7.485192775726318

Token 5: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00282924622297287
    2. '(lambda' → logprob: -6.877829074859619
    3. '<|end|>' → logprob: -6.877829074859619
    4. '```' → logprob: -8.127829551696777
    5. '("("' → logprob: -9.877829551696777
    6. '((' → logprob: -10.127829551696777
    7. '(user' → logprob: -10.127829551696777
    8. '(int' → logprob: -10.502829551696777
    9. ')' → logprob: -10.752829551696777
    10. '(
' → logprob: -11.252829551696777

Token 6: ',input' (ID: 123014)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.038488034158945084
    2. ')' → logprob: -4.038487911224365
    3. 'input' → logprob: -4.038487911224365
    4. '(' → logprob: -6.663487911224365
    5. ' input' → logprob: -7.788487911224365
    6. ',input' → logprob: -7.788487911224365
    7. '=input' → logprob: -9.038488388061523
    8. '[input' → logprob: -10.163488388061523
    9. '(raw' → logprob: -10.288488388061523
    10. '`)' → logprob: -10.538488388061523

Token 7: '().' (ID: 1454)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.24048931896686554
    2. '())' → logprob: -2.8654892444610596
    3. '('' → logprob: -2.9904892444610596
    4. ')' → logprob: -3.2404892444610596
    5. '()' → logprob: -3.8654892444610596
    6. '(()' → logprob: -4.615489482879639
    7. '(""))' → logprob: -5.115489482879639
    8. '(">' → logprob: -5.740489482879639
    9. '<|end|>' → logprob: -5.740489482879639
    10. '("("' → logprob: -5.990489482879639

Token 8: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.0001266613689949736
    2. 'strip' → logprob: -9.125126838684082
    3. '(split' → logprob: -11.875126838684082
    4. 'rstrip' → logprob: -11.875126838684082
    5. ' split' → logprob: -12.875126838684082
    6. ')' → logprob: -14.375126838684082
    7. 'spl' → logprob: -16.000125885009766
    8. 'plit' → logprob: -16.000125885009766
    9. 'read' → logprob: -16.125125885009766
    10. '_split' → logprob: -16.625125885009766

Token 9: '())
' (ID: 4574)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.18702958524227142
    2. '())' → logprob: -1.8120296001434326
    3. '))' → logprob: -6.0620293617248535
    4. '(' → logprob: -6.0620293617248535
    5. '()' → logprob: -6.4370293617248535
    6. '`)' → logprob: -7.1870293617248535
    7. '()))' → logprob: -9.437029838562012
    8. '('' → logprob: -10.562029838562012
    9. '```' → logprob: -10.687029838562012
    10. ')`' → logprob: -10.812029838562012

Token 10: 'need' (ID: 24630)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.28109562397003174
    2. 'if' → logprob: -2.656095504760742
    3. '#' → logprob: -2.906095504760742
    4. 'for' → logprob: -3.906095504760742
    5. 'n' → logprob: -4.031095504760742
    6. ',' → logprob: -4.156095504760742
    7. 'a' → logprob: -4.531095504760742
    8. '\n' → logprob: -4.656095504760742
    9. 'r' → logprob: -5.031095504760742
    10. 'x' → logprob: -5.156095504760742

Token 11: '=b' (ID: 49769)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '=' → logprob: -0.13914082944393158
    2. '_' → logprob: -2.2641408443450928
    3. '+' → logprob: -4.264140605926514
    4. '*' → logprob: -5.889140605926514
    5. 'if' → logprob: -5.889140605926514
    6. ' =' → logprob: -6.889140605926514
    7. 's' → logprob: -6.889140605926514
    8. '+=' → logprob: -7.764140605926514
    9. 'for' → logprob: -7.764140605926514
    10. '>' → logprob: -7.889140605926514

Token 12: '-m' (ID: 2126)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '-' → logprob: -0.18086087703704834
    2. '+' → logprob: -2.930860996246338
    3. ' -' → logprob: -3.430860996246338
    4. '>' → logprob: -3.680860996246338
    5. '*' → logprob: -3.930860996246338
    6. '_' → logprob: -4.930860996246338
    7. ' ' → logprob: -5.180860996246338
    8. ')' → logprob: -6.055860996246338
    9. '//' → logprob: -6.305860996246338
    10. ''' → logprob: -6.430860996246338

Token 13: '
' (ID: 198)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '+' → logprob: -0.518181324005127
    2. '<|end|>' → logprob: -1.268181324005127
    3. ' if' → logprob: -3.643181324005127
    4. '>' → logprob: -3.893181324005127
    5. ' ' → logprob: -3.893181324005127
    6. '-' → logprob: -4.018181324005127
    7. 'if' → logprob: -4.643181324005127
    8. '*' → logprob: -4.643181324005127
    9. '<|end|>' → logprob: -5.518181324005127
    10. ')' → logprob: -5.643181324005127

Token 14: 'print' (ID: 1598)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.20887914299964905
    2. '+' → logprob: -2.333879232406616
    3. 'if' → logprob: -2.958879232406616
    4. ' ' → logprob: -4.333878993988037
    5. '<|end|>' → logprob: -4.833878993988037
    6. '>' → logprob: -5.208878993988037
    7. '-' → logprob: -5.333878993988037
    8. '//' → logprob: -6.833878993988037
    9. ')' → logprob: -6.958878993988037
    10. ' //' → logprob: -7.333878993988037

Token 15: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0007049257401376963
    2. '('' → logprob: -8.125704765319824
    3. '("("' → logprob: -8.375704765319824
    4. '(f' → logprob: -9.500704765319824
    5. '((' → logprob: -11.000704765319824
    6. '()' → logprob: -11.375704765319824
    7. '("' → logprob: -11.375704765319824
    8. '(end' → logprob: -11.625704765319824
    9. '(

' → logprob: -11.750704765319824
    10. '("""' → logprob: -12.250704765319824

Token 16: 'need' (ID: 24630)
  Prédit: 'need'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'need' → logprob: -0.0011083055287599564
    2. ' need' → logprob: -7.376108169555664
    3. '"' → logprob: -8.626108169555664
    4. ''' → logprob: -9.251108169555664
    5. 'f' → logprob: -9.501108169555664
    6. 'max' → logprob: -9.626108169555664
    7. 'abs' → logprob: -10.751108169555664
    8. ')' → logprob: -11.251108169555664
    9. 'b' → logprob: -12.251108169555664
    10. '(' → logprob: -12.501108169555664

Token 17: ' if' (ID: 538)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -8.995397365652025e-05
    2. '))' → logprob: -10.875089645385742
    3. '*' → logprob: -11.000089645385742
    4. '+' → logprob: -11.375089645385742
    5. '`)' → logprob: -11.500089645385742
    6. ' )' → logprob: -11.750089645385742
    7. '-' → logprob: -11.875089645385742
    8. '//' → logprob: -12.125089645385742
    9. '-)' → logprob: -13.000089645385742
    10. '**' → logprob: -13.500089645385742

Token 18: ' ' (ID: 220)
  Prédit: ' need'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' need' → logprob: -0.1602640300989151
    2. 'need' → logprob: -1.910264015197754
    3. ' b' → logprob: -10.910264015197754
    4. ' f' → logprob: -11.035264015197754
    5. 'b' → logprob: -12.660264015197754
    6. 'f' → logprob: -14.410264015197754
    7. ' ' → logprob: -15.160264015197754
    8. ' m' → logprob: -15.285264015197754
    9. ')' → logprob: -15.285264015197754
    10. ' not' → logprob: -15.535264015197754

Token 19: '0' (ID: 15)
  Prédit: 'need'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'need' → logprob: -0.06198235973715782
    2. ' need' → logprob: -2.8119823932647705
    3. 'f' → logprob: -12.186982154846191
    4. ' f' → logprob: -12.311982154846191
    5. 'b' → logprob: -13.311982154846191
    6. '0' → logprob: -13.311982154846191
    7. ' b' → logprob: -14.436982154846191
    8. ' ' → logprob: -14.811982154846191
    9. 'not' → logprob: -16.186983108520508
    10. 'm' → logprob: -16.186983108520508

Token 20: '<' (ID: 27)
  Prédit: '>'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>' → logprob: -0.3519498407840729
    2. '<=' → logprob: -1.8519498109817505
    3. '<' → logprob: -2.47694993019104
    4. '>=' → logprob: -3.35194993019104
    5. ' >' → logprob: -4.476949691772461
    6. ' <=' → logprob: -5.851949691772461
    7. ' else' → logprob: -5.976949691772461
    8. 'else' → logprob: -6.351949691772461
    9. ' <' → logprob: -6.976949691772461
    10. '==' → logprob: -7.601949691772461

Token 21: 'need' (ID: 24630)
  Prédit: 'need'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'need' → logprob: -0.012524845078587532
    2. ' need' → logprob: -4.3875250816345215
    3. '=' → logprob: -11.137524604797363
    4. '```' → logprob: -15.887524604797363
    5. '_need' → logprob: -16.26252555847168
    6. ' ' → logprob: -16.38752555847168
    7. 'needs' → logprob: -17.13752555847168
    8. '=f' → logprob: -17.38752555847168
    9. 'nee' → logprob: -17.38752555847168
    10. 'b' → logprob: -17.51252555847168

Token 22: '<=' (ID: 16672)
  Prédit: ' else'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.5387681722640991
    2. '<' → logprob: -1.6637681722640991
    3. 'else' → logprob: -2.1637682914733887
    4. ' and' → logprob: -2.6637682914733887
    5. 'and' → logprob: -3.7887682914733887
    6. '<=' → logprob: -4.038768291473389
    7. ' <' → logprob: -6.913768291473389
    8. ' <=' → logprob: -7.788768291473389
    9. ' ' → logprob: -8.66376781463623
    10. '<len' → logprob: -8.91376781463623

Token 23: 'f' (ID: 69)
  Prédit: 'f'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.00036168331280350685
    2. ' f' → logprob: -8.250361442565918
    3. '10' → logprob: -10.625361442565918
    4. '6' → logprob: -10.875361442565918
    5. 'm' → logprob: -11.125361442565918
    6. '100' → logprob: -11.375361442565918
    7. '9' → logprob: -12.375361442565918
    8. '5' → logprob: -12.625361442565918
    9. '7' → logprob: -13.125361442565918
    10. '2' → logprob: -13.125361442565918

Token 24: ' else' (ID: 1203)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.34935447573661804
    2. ' else' → logprob: -1.3493545055389404
    3. 'else' → logprob: -3.3493545055389404
    4. ' )' → logprob: -8.09935474395752
    5. '))' → logprob: -11.72435474395752
    6. '),' → logprob: -11.84935474395752
    7. ' ' → logprob: -12.22435474395752
    8. 'and' → logprob: -12.59935474395752
    9. '	else' → logprob: -12.59935474395752
    10. ');' → logprob: -13.47435474395752

Token 25: ' '' (ID: 461)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.08744420111179352
    2. ' ' → logprob: -2.712444305419922
    3. '-' → logprob: -4.962444305419922
    4. ' -' → logprob: -5.587444305419922
    5. ' f' → logprob: -5.962444305419922
    6. 'f' → logprob: -6.962444305419922
    7. '"' → logprob: -7.337444305419922
    8. 'm' → logprob: -7.962444305419922
    9. ' need' → logprob: -8.087444305419922
    10. ' m' → logprob: -8.212444305419922

Token 26: '0' (ID: 15)
  Prédit: '-'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.44930723309516907
    2. '0' → logprob: -1.3243072032928467
    3. 'im' → logprob: -3.6993072032928467
    4. ''' → logprob: -4.199307441711426
    5. 'Impossible' → logprob: -4.199307441711426
    6. ':' → logprob: -4.324307441711426
    7. '"' → logprob: -4.574307441711426
    8. ':-' → logprob: -5.824307441711426
    9. ':'' → logprob: -6.199307441711426
    10. '-im' → logprob: -6.199307441711426

Token 27: ''' (ID: 6)
  Prédit: '')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.04885883629322052
    2. ')' → logprob: -3.048858880996704
    3. '")' → logprob: -9.173858642578125
    4. '0' → logprob: -9.548858642578125
    5. ''' → logprob: -9.673858642578125
    6. '`)' → logprob: -10.423858642578125
    7. '```' → logprob: -13.798858642578125
    8. ' ')' → logprob: -14.423858642578125
    9. '»)' → logprob: -14.673858642578125
    10. '’)' → logprob: -14.798858642578125

Token 28: ' if' (ID: 538)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -5.080963092041202e-06
    2. '))' → logprob: -13.125004768371582
    3. '`)' → logprob: -13.250004768371582
    4. '')' → logprob: -14.625004768371582
    5. ')`' → logprob: -14.625004768371582
    6. ' )' → logprob: -16.2500057220459
    7. ')
' → logprob: -16.6250057220459
    8. '```' → logprob: -16.8750057220459
    9. '")' → logprob: -17.2500057220459
    10. ')")' → logprob: -17.5000057220459

Token 29: ' need' (ID: 1309)
  Prédit: 'need'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'need' → logprob: -0.15284857153892517
    2. ' need' → logprob: -2.152848482131958
    3. 'f' → logprob: -4.777848720550537
    4. '0' → logprob: -5.152848720550537
    5. 'b' → logprob: -5.527848720550537
    6. ' f' → logprob: -6.277848720550537
    7. 'not' → logprob: -6.527848720550537
    8. ' not' → logprob: -7.152848720550537
    9. ' b' → logprob: -7.277848720550537
    10. '-' → logprob: -7.277848720550537

Token 30: '<=' (ID: 16672)
  Prédit: '<='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<=' → logprob: -0.21585984528064728
    2. '<' → logprob: -2.340859889984131
    3. ' <=' → logprob: -3.090859889984131
    4. '>' → logprob: -3.215859889984131
    5. '==' → logprob: -4.715859889984131
    6. ' >' → logprob: -6.465859889984131
    7. ' <' → logprob: -6.840859889984131
    8. ' ==' → logprob: -8.215859413146973
    9. ' ' → logprob: -8.715859413146973
    10. '>=' → logprob: -9.715859413146973

Token 31: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00015860427811276168
    2. ' ' → logprob: -8.750158309936523
    3. '00' → logprob: -17.500158309936523
    4. 'f' → logprob: -17.875158309936523
    5. '1' → logprob: -18.625158309936523
    6. '۰' → logprob: -19.500158309936523
    7. '```' → logprob: -19.750158309936523
    8. '  ' → logprob: -19.750158309936523
    9. ' f' → logprob: -20.562658309936523
    10. 'b' → logprob: -20.562658309936523

Token 32: ' else' (ID: 1203)
  Prédit: ' else'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' else' → logprob: -0.201423779129982
    2. 'else' → logprob: -1.7014237642288208
    3. ')' → logprob: -12.826423645019531
    4. ' ' → logprob: -13.076423645019531
    5. ' or' → logprob: -13.576423645019531
    6. '	else' → logprob: -13.576423645019531
    7. '-' → logprob: -14.201423645019531
    8. ' )' → logprob: -15.076423645019531
    9. '```' → logprob: -15.201423645019531
    10. ' and' → logprob: -15.326423645019531

Token 33: ' '' (ID: 461)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.22551584243774414
    2. ' f' → logprob: -1.6005158424377441
    3. ''f' → logprob: -9.850515365600586
    4. ' ' → logprob: -10.975515365600586
    5. 'b' → logprob: -11.725515365600586
    6. ' -' → logprob: -11.975515365600586
    7. '0' → logprob: -12.350515365600586
    8. '-' → logprob: -12.975515365600586
    9. '-f' → logprob: -13.100515365600586
    10. ''' → logprob: -13.350515365600586

Token 34: 'NA' (ID: 9555)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'f' → logprob: -0.001872474793344736
    2. '-' → logprob: -7.126872539520264
    3. ' f' → logprob: -8.001872062683105
    4. ''f' → logprob: -8.626872062683105
    5. ''' → logprob: -9.001872062683105
    6. '"' → logprob: -9.501872062683105
    7. 'F' → logprob: -9.626872062683105
    8. '-f' → logprob: -9.876872062683105
    9. '0' → logprob: -10.001872062683105
    10. '?' → logprob: -10.126872062683105

Token 35: '')' (ID: 1542)
  Prédit: '')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '')' → logprob: -0.201676145195961
    2. ')' → logprob: -1.7016761302947998
    3. ''' → logprob: -8.451676368713379
    4. '")' → logprob: -10.451676368713379
    5. '`)' → logprob: -11.326676368713379
    6. '’)' → logprob: -12.701676368713379
    7. ')'' → logprob: -13.576676368713379
    8. ' )' → logprob: -13.826676368713379
    9. '0' → logprob: -14.576676368713379
    10. ' ')' → logprob: -14.701676368713379


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 33
Tokens correctement prédits (1ère position, stricte): 10
Tokens correctement prédits (1ère position, avec adaptation): 10
Tokens correctement prédits (top 10): 21
Précision stricte (1ère position): 30.30%
Précision adaptée (1ère position): 30.30%
Précision (top 10): 63.64%
================================================================================
