================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 16:55:19
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
debt = 100000
for _ in range(n):
    debt = int((debt * 1.05 + 999) // 1000 * 1000)
print(debt)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0005421888781711459
    2. '```' → logprob: -8.500542640686035
    3. ''' → logprob: -8.625542640686035
    4. '(n' → logprob: -10.250542640686035
    5. '`' → logprob: -10.625542640686035
    6. ')' → logprob: -10.750542640686035
    7. '('' → logprob: -11.250542640686035
    8. '(
' → logprob: -11.250542640686035
    9. '[' → logprob: -11.375542640686035
    10. '()' → logprob: -11.625542640686035

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.598491907119751
    2. ')' → logprob: -0.848491907119751
    3. '()' → logprob: -3.973491907119751
    4. '())' → logprob: -6.223491668701172
    5. '(
' → logprob: -7.473491668701172
    6. '")' → logprob: -8.973491668701172
    7. '('' → logprob: -9.098491668701172
    8. '')' → logprob: -9.223491668701172
    9. '```' → logprob: -9.473491668701172
    10. '))' → logprob: -9.598491668701172

Token 5: 'de' (ID: 613)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.1054521799087524
    2. 'i' → logprob: -1.2304521799087524
    3. 'for' → logprob: -1.7304521799087524
    4. 's' → logprob: -2.480452060699463
    5. 'x' → logprob: -3.855452060699463
    6. ' ' → logprob: -3.855452060699463
    7. 'a' → logprob: -4.605452060699463
    8. ''' → logprob: -4.855452060699463
    9. '#' → logprob: -4.980452060699463
    10. ')' → logprob: -4.980452060699463

Token 6: 'bt' (ID: 16051)
  Prédit: 'f'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'f' → logprob: -2.0339031834737398e-05
    2. 'fen' → logprob: -11.500020027160645
    3. 'fi' → logprob: -12.000020027160645
    4. 'x' → logprob: -14.000020027160645
    5. 'fe' → logprob: -14.250020027160645
    6. '```' → logprob: -14.750020027160645
    7. 'n' → logprob: -15.750020027160645
    8. '*f' → logprob: -15.875020027160645
    9. ''f' → logprob: -15.875020027160645
    10. 'fa' → logprob: -16.12502098083496

Token 7: ' =' (ID: 314)
  Prédit: '['
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[' → logprob: -0.027029933407902718
    2. '_' → logprob: -3.7770299911499023
    3. '[:]' → logprob: -7.152029991149902
    4. ' +=' → logprob: -7.652029991149902
    5. '[i' → logprob: -7.777029991149902
    6. ' ' → logprob: -7.777029991149902
    7. '[s' → logprob: -8.152029991149902
    8. '=' → logprob: -8.402029991149902
    9. ' =' → logprob: -8.777029991149902
    10. '[]' → logprob: -8.902029991149902

Token 8: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.20047424733638763
    2. '0' → logprob: -2.075474262237549
    3. ' int' → logprob: -3.575474262237549
    4. ' n' → logprob: -3.950474262237549
    5. 'int' → logprob: -5.575474262237549
    6. 'n' → logprob: -6.325474262237549
    7. ' []' → logprob: -6.700474262237549
    8. ' input' → logprob: -7.200474262237549
    9. ' float' → logprob: -7.700474262237549
    10. 'input' → logprob: -7.825474262237549

Token 9: '100' (ID: 1353)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.011539697647094727
    2. 'n' → logprob: -5.261539459228516
    3. 'int' → logprob: -5.761539459228516
    4. ' ' → logprob: -7.011539459228516
    5. '[]' → logprob: -7.386539459228516
    6. '[int' → logprob: -7.511539459228516
    7. 'float' → logprob: -7.886539459228516
    8. '[])' → logprob: -8.511539459228516
    9. ' n' → logprob: -9.386539459228516
    10. '[n' → logprob: -9.511539459228516

Token 10: '000' (ID: 1302)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.9290605187416077
    2. '*' → logprob: -1.179060459136963
    3. '%' → logprob: -2.554060459136963
    4. '\' → logprob: -3.554060459136963
    5. ' *' → logprob: -3.554060459136963
    6. '\n' → logprob: -3.554060459136963
    7. '_' → logprob: -3.804060459136963
    8. '000' → logprob: -3.929060459136963
    9. ' ' → logprob: -4.179060459136963
    10. 'for' → logprob: -4.679060459136963

Token 11: '
' (ID: 198)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.9890210032463074
    2. '0' → logprob: -2.239021062850952
    3. '
' → logprob: -2.614021062850952
    4. '' → logprob: -2.614021062850952
    5. '*
' → logprob: -2.614021062850952
    6. '\n' → logprob: -2.864021062850952
    7. ' *' → logprob: -2.989021062850952
    8. ''' → logprob: -3.364021062850952
    9. '```' → logprob: -3.864021062850952
    10. 'for' → logprob: -3.864021062850952

Token 12: 'for' (ID: 1938)
  Prédit: 'for'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.013056223280727863
    2. ' for' → logprob: -4.51305627822876
    3. 'while' → logprob: -7.01305627822876
    4. 'profit' → logprob: -7.38805627822876
    5. 'total' → logprob: -8.638055801391602
    6. '```' → logprob: -8.888055801391602
    7. 'interest' → logprob: -9.888055801391602
    8. 'rate' → logprob: -10.388055801391602
    9. 'if' → logprob: -11.013055801391602
    10. ' while' → logprob: -11.513055801391602

Token 13: ' _' (ID: 1175)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.06810019910335541
    2. ' i' → logprob: -2.8181002140045166
    3. '  ' → logprob: -5.1930999755859375
    4. '_' → logprob: -8.568099975585938
    5. 'i' → logprob: -8.693099975585938
    6. ' ' → logprob: -9.943099975585938
    7. ' _' → logprob: -9.943099975585938
    8. ' ‌' → logprob: -10.068099975585938
    9. ' n' → logprob: -10.443099975585938
    10. ' )' → logprob: -12.443099975585938

Token 14: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.0034545487724244595
    2. 'in' → logprob: -5.878454685211182
    3. ' ' → logprob: -7.378454685211182
    4. ' i' → logprob: -12.503454208374023
    5. 'n' → logprob: -12.753454208374023
    6. ',' → logprob: -12.878454208374023
    7. '_' → logprob: -13.003454208374023
    8. '  ' → logprob: -13.128454208374023
    9. ' ,' → logprob: -13.253454208374023
    10. 'space' → logprob: -13.253454208374023

Token 15: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.08902104198932648
    2. 'range' → logprob: -2.4640209674835205
    3. ' ' → logprob: -9.589020729064941
    4. ' in' → logprob: -11.964020729064941
    5. '	range' → logprob: -13.089020729064941
    6. 'in' → logprob: -14.089020729064941
    7. ' n' → logprob: -14.214020729064941
    8. '(range' → logprob: -14.214020729064941
    9. '```' → logprob: -14.214020729064941
    10. ' xrange' → logprob: -14.589020729064941

Token 16: '(n' (ID: 2406)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03331391140818596
    2. '(n' → logprob: -3.5333139896392822
    3. ' (' → logprob: -5.658313751220703
    4. '(range' → logprob: -10.158313751220703
    5. '(
' → logprob: -10.658313751220703
    6. '(int' → logprob: -13.908313751220703
    7. '(

' → logprob: -13.908313751220703
    8. '```' → logprob: -14.033313751220703
    9. '(len' → logprob: -14.283313751220703
    10. ' range' → logprob: -14.783313751220703

Token 17: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0009094370761886239
    2. ':' → logprob: -7.625909328460693
    3. ')' → logprob: -7.875909328460693
    4. ' ):' → logprob: -10.875909805297852
    5. '):
' → logprob: -11.375909805297852
    6. '+' → logprob: -12.000909805297852
    7. ',' → logprob: -14.000909805297852
    8. '**' → logprob: -14.250909805297852
    9. '():' → logprob: -14.250909805297852
    10. ''):' → logprob: -15.125909805297852

Token 18: '   ' (ID: 271)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.4941883981227875
    2. '   ' → logprob: -1.2441884279251099
    3. '    
' → logprob: -3.1191883087158203
    4. '    ' → logprob: -3.9941883087158203
    5. '``' → logprob: -4.49418830871582
    6. ' debt' → logprob: -4.61918830871582
    7. '     
' → logprob: -4.74418830871582
    8. ' ```' → logprob: -6.11918830871582
    9. '<|end|>' → logprob: -6.24418830871582
    10. ' 
' → logprob: -6.61918830871582

Token 19: ' debt' (ID: 17451)
  Prédit: 'payment'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'payment' → logprob: -0.24684198200702667
    2. ' payment' → logprob: -1.8718420267105103
    3. 'p' → logprob: -3.4968419075012207
    4. 'pay' → logprob: -5.121841907501221
    5. 'amount' → logprob: -5.121841907501221
    6. ' repayment' → logprob: -5.496841907501221
    7. 'rate' → logprob: -5.746841907501221
    8. 'money' → logprob: -6.121841907501221
    9. 'paid' → logprob: -6.621841907501221
    10. ' p' → logprob: -6.746841907501221

Token 20: ' =' (ID: 314)
  Prédit: ' -='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -=' → logprob: -0.5880581140518188
    2. ' *=' → logprob: -0.9630581140518188
    3. ' =' → logprob: -3.8380579948425293
    4. '=' → logprob: -4.213057994842529
    5. '-=' → logprob: -4.588057994842529
    6. '*=' → logprob: -4.713057994842529
    7. ' +=' → logprob: -5.713057994842529
    8. ' //' → logprob: -6.713057994842529
    9. '-' → logprob: -7.338057994842529
    10. '   ' → logprob: -7.463057994842529

Token 21: ' int' (ID: 677)
  Prédit: ' debt'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' debt' → logprob: -0.783979058265686
    2. 'de' → logprob: -1.158979058265686
    3. 'int' → logprob: -2.0339789390563965
    4. ' int' → logprob: -2.4089789390563965
    5. '(de' → logprob: -5.1589789390563965
    6. '(int' → logprob: -6.6589789390563965
    7. ' (' → logprob: -7.4089789390563965
    8. ' de' → logprob: -7.6589789390563965
    9. ' ' → logprob: -9.033979415893555
    10. 'deb' → logprob: -9.721479415893555

Token 22: '((' (ID: 2054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.38839539885520935
    2. '(de' → logprob: -1.1383954286575317
    3. '(input' → logprob: -7.013395309448242
    4. ' (' → logprob: -8.013395309448242
    5. 'de' → logprob: -9.013395309448242
    6. '((' → logprob: -9.388395309448242
    7. ' ' → logprob: -11.013395309448242
    8. '/de' → logprob: -11.513395309448242
    9. ' debt' → logprob: -11.638395309448242
    10. '(math' → logprob: -12.013395309448242

Token 23: 'de' (ID: 613)
  Prédit: 'de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'de' → logprob: -0.14445948600769043
    2. ' debt' → logprob: -2.0194594860076904
    3. '(de' → logprob: -7.6444597244262695
    4. ' de' → logprob: -8.33195972442627
    5. '   ' → logprob: -8.70695972442627
    6. '1' → logprob: -8.76945972442627
    7. '0' → logprob: -8.95695972442627
    8. ' ' → logprob: -9.01945972442627
    9. ')' → logprob: -9.14445972442627
    10. '	de' → logprob: -9.45695972442627

Token 24: 'bt' (ID: 16051)
  Prédit: 'bt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bt' → logprob: -2.117345684382599e-05
    2. 'b' → logprob: -11.625020980834961
    3. 'btn' → logprob: -11.750020980834961
    4. 'pt' → logprob: -13.500020980834961
    5. 't' → logprob: -13.500020980834961
    6. '```' → logprob: -14.875020980834961
    7. 'nt' → logprob: -15.250020980834961
    8. 'btc' → logprob: -15.375020980834961
    9. '>' → logprob: -16.12502098083496
    10. 'ht' → logprob: -16.50002098083496

Token 25: ' *' (ID: 425)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.25292542576789856
    2. ' *' → logprob: -1.5029253959655762
    3. ')' → logprob: -7.627925395965576
    4. ' +' → logprob: -9.252925872802734
    5. '/' → logprob: -9.502925872802734
    6. ' /' → logprob: -9.627925872802734
    7. ' )' → logprob: -9.752925872802734
    8. '*(' → logprob: -9.877925872802734
    9. ' ' → logprob: -10.002925872802734
    10. ' -' → logprob: -10.627925872802734

Token 26: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.2891428768634796
    2. ' ' → logprob: -1.6641428470611572
    3. '0' → logprob: -2.9141428470611572
    4. '(' → logprob: -5.289143085479736
    5. ' (' → logprob: -6.164143085479736
    6. '2' → logprob: -9.664142608642578
    7. '110' → logprob: -10.039142608642578
    8. '105' → logprob: -10.289142608642578
    9. '3' → logprob: -10.539142608642578
    10. '4' → logprob: -10.789142608642578

Token 27: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.016777722164988518
    2. '0' → logprob: -4.266777515411377
    3. '(' → logprob: -6.391777515411377
    4. ' ' → logprob: -7.641777515411377
    5. '110' → logprob: -9.391777992248535
    6. '105' → logprob: -9.766777992248535
    7. '2' → logprob: -10.016777992248535
    8. '3' → logprob: -10.391777992248535
    9. '11' → logprob: -10.391777992248535
    10. '4' → logprob: -10.391777992248535

Token 28: '.' (ID: 13)
  Prédit: '.'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.009350853972136974
    2. '1' → logprob: -5.009350776672363
    3. '0' → logprob: -6.134350776672363
    4. '05' → logprob: -8.634350776672363
    5. '2' → logprob: -10.009350776672363
    6. '02' → logprob: -10.384350776672363
    7. '03' → logprob: -10.509350776672363
    8. '04' → logprob: -10.509350776672363
    9. ',' → logprob: -10.759350776672363
    10. '10' → logprob: -10.884350776672363

Token 29: '05' (ID: 2922)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.572097897529602
    2. '05' → logprob: -1.947097897529602
    3. '03' → logprob: -2.0720977783203125
    4. '1' → logprob: -2.4470977783203125
    5. '04' → logprob: -2.9470977783203125
    6. '02' → logprob: -4.3220977783203125
    7. '08' → logprob: -6.1970977783203125
    8. '06' → logprob: -6.4470977783203125
    9. '0' → logprob: -6.5720977783203125
    10. '15' → logprob: -6.5720977783203125

Token 30: ' +' (ID: 659)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3135535418987274
    2. '))' → logprob: -1.3135535717010498
    3. ' )' → logprob: -9.313553810119629
    4. ')+' → logprob: -9.938553810119629
    5. ' ))' → logprob: -10.438553810119629
    6. ')**' → logprob: -10.563553810119629
    7. ')))' → logprob: -10.813553810119629
    8. '*' → logprob: -11.063553810119629
    9. '+' → logprob: -11.188553810119629
    10. ' +' → logprob: -11.313553810119629

Token 31: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.06098782271146774
    2. '500' → logprob: -3.310987710952759
    3. '100' → logprob: -4.310987949371338
    4. '0' → logprob: -6.310987949371338
    5. '1' → logprob: -6.435987949371338
    6. '50' → logprob: -6.810987949371338
    7. '250' → logprob: -6.935987949371338
    8. '10' → logprob: -7.435987949371338
    9. '499' → logprob: -7.435987949371338
    10. '200' → logprob: -7.685987949371338

Token 32: '999' (ID: 9130)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.5504660606384277
    2. '500' → logprob: -1.5504660606384277
    3. '100' → logprob: -2.0504660606384277
    4. '0' → logprob: -3.6754660606384277
    5. '499' → logprob: -4.175466060638428
    6. '1' → logprob: -4.425466060638428
    7. '50' → logprob: -5.050466060638428
    8. '999' → logprob: -5.550466060638428
    9. '49' → logprob: -5.925466060638428
    10. '10' → logprob: -6.050466060638428

Token 33: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.010756677947938442
    2. ')//' → logprob: -4.885756492614746
    3. ')/' → logprob: -6.260756492614746
    4. ' )' → logprob: -6.885756492614746
    5. '9' → logprob: -8.510756492614746
    6. '.' → logprob: -13.010756492614746
    7. '999' → logprob: -13.635756492614746
    8. '7' → logprob: -13.885756492614746
    9. '//' → logprob: -14.135756492614746
    10. '0' → logprob: -14.260756492614746

Token 34: ' //' (ID: 602)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.002691224915906787
    2. ')//' → logprob: -6.002691268920898
    3. ' )' → logprob: -9.252691268920898
    4. '//' → logprob: -9.627691268920898
    5. ')/' → logprob: -10.127691268920898
    6. '))' → logprob: -12.377691268920898
    7. ' //' → logprob: -13.252691268920898
    8. '0' → logprob: -13.627691268920898
    9. ')**' → logprob: -13.877691268920898
    10. '/' → logprob: -14.002691268920898

Token 35: ' ' (ID: 220)
  Prédit: '100'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '100' → logprob: -0.00010878815373871475
    2. ' ' → logprob: -9.87510871887207
    3. '10' → logprob: -10.25010871887207
    4. '1' → logprob: -10.75010871887207
    5. '0' → logprob: -16.00010871887207
    6. '   ' → logprob: -16.00010871887207
    7. '  ' → logprob: -16.25010871887207
    8. '```' → logprob: -17.25010871887207
    9. '１００' → logprob: -18.12510871887207
    10. '2' → logprob: -18.43760871887207

Token 36: '100' (ID: 1353)
  Prédit: '100'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '100' → logprob: -0.00010795372509164736
    2. '10' → logprob: -9.625107765197754
    3. '1' → logprob: -10.125107765197754
    4. ' ' → logprob: -13.375107765197754
    5. '   ' → logprob: -16.62510871887207
    6. '0' → logprob: -16.62510871887207
    7. '  ' → logprob: -16.62510871887207
    8. '１００' → logprob: -17.37510871887207
    9. '```' → logprob: -18.18760871887207
    10. '(' → logprob: -18.37510871887207

Token 37: '0' (ID: 15)
  Prédit: '*'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '*' → logprob: -0.5902398824691772
    2. ' *' → logprob: -1.2152398824691772
    3. ')' → logprob: -2.215240001678467
    4. '0' → logprob: -3.465240001678467
    5. ')*' → logprob: -4.840240001678467
    6. ' )' → logprob: -8.215239524841309
    7. '   ' → logprob: -8.715239524841309
    8. '00' → logprob: -8.715239524841309
    9. ' ' → logprob: -9.090239524841309
    10. ')
' → logprob: -9.340239524841309

Token 38: ' *' (ID: 425)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.11270888149738312
    2. '*' → logprob: -2.487708806991577
    3. ')*' → logprob: -4.487709045410156
    4. ' *' → logprob: -4.612709045410156
    5. '0' → logprob: -6.612709045410156
    6. '   ' → logprob: -7.362709045410156
    7. ' )' → logprob: -8.737709045410156
    8. '000' → logprob: -9.737709045410156
    9. ')
' → logprob: -9.987709045410156
    10. '	' → logprob: -11.237709045410156

Token 39: ' ' (ID: 220)
  Prédit: '100'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '100' → logprob: -9.984787902794778e-05
    2. ' ' → logprob: -9.250100135803223
    3. '   ' → logprob: -13.125100135803223
    4. '1' → logprob: -14.250100135803223
    5. '  ' → logprob: -14.500100135803223
    6. '10' → logprob: -15.250100135803223
    7. '	' → logprob: -16.750099182128906
    8. '１００' → logprob: -16.750099182128906
    9. '```' → logprob: -17.250099182128906
    10. '    ' → logprob: -18.125099182128906

Token 40: '100' (ID: 1353)
  Prédit: '100'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '100' → logprob: -1.6240566083070007e-06
    2. '10' → logprob: -14.375001907348633
    3. '1' → logprob: -14.500001907348633
    4. ' ' → logprob: -14.500001907348633
    5. '   ' → logprob: -17.625001907348633
    6. '  ' → logprob: -18.000001907348633
    7. '１００' → logprob: -18.125001907348633
    8. '0' → logprob: -18.875001907348633
    9. '```' → logprob: -19.062501907348633
    10. '000' → logprob: -19.125001907348633

Token 41: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00043162284418940544
    2. ')' → logprob: -7.750431537628174
    3. '))' → logprob: -15.000432014465332
    4. ' ' → logprob: -15.375432014465332
    5. ')
' → logprob: -15.625432014465332
    6. '   ' → logprob: -16.000431060791016
    7. ' )' → logprob: -16.625431060791016
    8. '۰' → logprob: -18.250431060791016
    9. '```' → logprob: -18.375431060791016
    10. ')*' → logprob: -18.750431060791016

Token 42: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -8.895480277715251e-06
    2. '   ' → logprob: -12.625008583068848
    3. ' )' → logprob: -12.625008583068848
    4. ')
' → logprob: -13.625008583068848
    5. '))' → logprob: -14.125008583068848
    6. '+' → logprob: -16.500009536743164
    7. ')))' → logprob: -16.875009536743164
    8. ')**' → logprob: -17.125009536743164
    9. ')`' → logprob: -17.250009536743164
    10. '`)' → logprob: -17.250009536743164

Token 43: 'print' (ID: 1598)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 44: '(de' (ID: 20586)
  Prédit: '(de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(de' → logprob: -0.12693651020526886
    2. '(' → logprob: -2.126936435699463
    3. '('' → logprob: -12.626936912536621
    4. '("("' → logprob: -13.251936912536621
    5. '(d' → logprob: -13.751936912536621
    6. '()' → logprob: -14.501936912536621
    7. '(sum' → logprob: -15.501936912536621
    8. '(deck' → logprob: -15.751936912536621
    9. '((' → logprob: -15.876936912536621
    10. 'de' → logprob: -16.001935958862305

Token 45: 'bt' (ID: 16051)
  Prédit: 'bt'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'bt' → logprob: -8.77627644513268e-06
    2. 'b' → logprob: -11.875008583068848
    3. 'btn' → logprob: -14.000008583068848
    4. 'pt' → logprob: -14.250008583068848
    5. 'btc' → logprob: -16.625009536743164
    6. 't' → logprob: -17.000009536743164
    7. 'nt' → logprob: -17.875009536743164
    8. '```' → logprob: -19.625009536743164
    9. 'lt' → logprob: -20.875009536743164
    10. '(bt' → logprob: -20.875009536743164

Token 46: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.128163257315464e-07
    2. ' )' → logprob: -16.5
    3. '))' → logprob: -16.75
    4. '')' → logprob: -17.125
    5. '`)' → logprob: -17.75
    6. ')
' → logprob: -18.375
    7. ')`' → logprob: -18.625
    8. '）' → logprob: -18.75
    9. '}' → logprob: -18.75
    10. '#' → logprob: -19.25


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 44
Tokens correctement prédits (1ère position, stricte): 16
Tokens correctement prédits (1ère position, avec adaptation): 16
Tokens correctement prédits (top 10): 37
Précision stricte (1ère position): 36.36%
Précision adaptée (1ère position): 36.36%
Précision (top 10): 84.09%
================================================================================
