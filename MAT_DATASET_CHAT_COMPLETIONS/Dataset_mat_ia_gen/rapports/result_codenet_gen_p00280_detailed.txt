================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:22:43
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
# Solution complète en Python avec commentaires détaillés

# Problème résumé :
# Deux joueurs (ジョウ君 et ヤエさん) jouent au tennis avec des règles de score spécifiques :
# - Si un joueur atteint 5 points avant que l'autre ait 4, il gagne.
# - Si les deux atteignent 4 points (4-4), il faut qu’un joueur prenne deux points consécutifs pour gagner.
# - Si après 4-4, les joueurs marquent chacun un point (5-5), c’est un match nul.
# Le problème : donné un score final (j, y), trouver et afficher toutes les séquences possibles de points (A=ジョウ君 marque, B=ヤエさん marque) menant de 0-0 à ce score, selon les règles.

def tennis_paths(j_target, y_target):
    # On cherche toutes les séquences de 'A' et 'B' qui mènent de (0,0) à (j_target, y_target)
    # en respectant les règles ci-dessus.

    # Vérification initiale des contraintes des entrées
    # j et y dans [0..6], avec conditions particulières sur les scores 6-4 ou 4-6 ou autre cas
    # Conditions du problème :
    # (j, y) != (0, 0)
    # Si j=6 => y=4
    # Si y=6 => j=4
    # Sinon 0 <= j,y <=5 ou 5 max si pas 6.
    # Ces conditions seront considérées valides dans l'entrée.

    # Cette fonction vérifiera la validité d'un état selon les règles du score.
    def valid_state(j, y):
        # Cas fin : un joueur gagne clairement
        # Le jeu s'arrête si un joueur a gagné, aucun point supplémentaire n'est possible après cela.
        
        # Règle 1: Un joueur gagne s'il a 5 points et son adversaire 3 ou moins.
        if j == 5 and y <= 3:
            return True
        if y == 5 and j <= 3:
            return True

        # Règle 2 & 3: Reprise après 4-4
        # Si les deux ont au moins 4 points:
        if j >= 4 and y >= 4:
            # 4-4 spécifiquement
            if j == 4 and y == 4:
                # C'est l'état initial de deuce, toujours possible.
                return True
            # Après 4-4, un joueur doit prendre 2 pts consécutifs pour gagner
            # C-à-d état possible :
            # - quelqu'un a 6 pts et l'autre 4 => victoire comme indiqué dans l'entrée (6-4 ou 4-6)
            if (j == 6 and y == 4) or (j == 4 and y == 6):
                return True
            # 5-5 cas de match nul possible
            if j == 5 and y == 5:
                return True
            # autoriser d'autres scores (p.ex 5-4 ou 4-5) qui représentent les étapes enchainées
            if (j == y+1 and y >=4) or (y == j+1 and j >=4):
                return True
            # états autres que ci-dessus ne sont pas valides
            return False
        
        # Pour tous les autres cas, tant que les scores sont <= 5 et pas gagnés, c'est valide
        if 0 <= j <= 5 and 0 <= y <= 5:
            # Le jeu continue
            return True

        return False

    # Vérifie si l'état final est un état de fin de partie (victoire ou match nul)
    def is_end_state(j, y):
        # Si l'état correspond au score final donné, on doit considérer si c'est un score possible final.
        
        # condition victoire :
        if j == 5 and y <= 3:
            return True
        if y == 5 and j <= 3:
            return True
        if (j == 6 and y == 4) or (j == 4 and y == 6):
            return True
        if j == 5 and y == 5:
            return True
        return False

    # On utilisera une recherche DFS depuis (0,0) jusqu'à (j_target, y_target).
    # On accumulera les séquences et on retournera celles qui mènent à l'état final.
    # Comme les séquences sont à trier en ordre lexicographique, on explorera d'abord A puis B.

    results = []

    def dfs(j, y, path):
        # Si on a atteint le score cible, on ajoute la séquence si c'est bien une fin valide
        if (j, y) == (j_target, y_target):
            if is_end_state(j, y):
                results.append("".join(path))
            return

        # Les gains possibles pour l'étape suivante : A (ジョウ君 marque) ou B (ヤエさん marque)
        # On teste A en premier, puis B - pour s'assurer que les résultats sont en ordre lex.
        # On vérifie que l'état résultant est valide avant d'y aller.

        # A marque
        j_next = j + 1
        y_next = y
        if valid_state(j_next, y_next):
            dfs(j_next, y_next, path + ['A'])

        # B marque
        j_next = j
        y_next = y + 1
        if valid_state(j_next, y_next):
            dfs(j_next, y_next, path + ['B'])


    # Lancement recherche
    dfs(0, 0, [])

    # Résultats triés (la recherche suit déjà l'ordre lex du fait de dfs(A puis B))
    results.sort()

    # Affichage
    for res in results:
        print(res)


# --- Lecture des données ---
j, y = map(int, input().split())

tennis_paths(j, y)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: '#' (ID: 2)
  → Token d'amorce (pas de prédiction)

Token 1: ' Solution' (ID: 20858)
  → Token d'amorce (pas de prédiction)

Token 2: ' complète' (ID: 75660)
  → Token d'amorce (pas de prédiction)

Token 3: ' en' (ID: 469)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '```' → logprob: -0.35752567648887634
    2. ':' → logprob: -1.3575257062911987
    3. 'def' → logprob: -4.232525825500488
    4. ' :' → logprob: -4.357525825500488
    5. '#' → logprob: -4.857525825500488
    6. ' ```' → logprob: -6.357525825500488
    7. '``' → logprob: -6.482525825500488
    8. '\n' → logprob: -6.607525825500488
    9. '\' → logprob: -7.232525825500488
    10. ''''' → logprob: -7.982525825500488

Token 4: ' Python' (ID: 26534)
  Prédit: 'python'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'python' → logprob: -0.16312594711780548
    2. 'Python' → logprob: -1.913125991821289
    3. ' Python' → logprob: -6.413125991821289
    4. ' python' → logprob: -7.663125991821289
    5. '```' → logprob: -8.038125991821289
    6. 'fr' → logprob: -8.163125991821289
    7. 'py' → logprob: -9.663125991821289
    8. '_python' → logprob: -10.413125991821289
    9. '#' → logprob: -11.163125991821289
    10. ' français' → logprob: -11.288125991821289

Token 5: ' avec' (ID: 3937)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.7606485486030579
    2. '```' → logprob: -0.7606485486030579
    3. '#' → logprob: -4.260648727416992
    4. '\' → logprob: -4.385648727416992
    5. ' :' → logprob: -4.385648727416992
    6. '\n' → logprob: -4.635648727416992
    7. 'def' → logprob: -4.760648727416992
    8. '``' → logprob: -5.635648727416992
    9. ':def' → logprob: -7.135648727416992
    10. '`' → logprob: -7.385648727416992

Token 6: ' commentaires' (ID: 67971)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.7437460422515869
    2. 'import' → logprob: -2.243746042251587
    3. 'une' → logprob: -2.868746042251587
    4. '#' → logprob: -2.993746042251587
    5. 'def' → logprob: -3.493746042251587
    6. '"""' → logprob: -3.618746042251587
    7. 'un' → logprob: -3.618746042251587
    8. 'l' → logprob: -3.993746042251587
    9. 'fonction' → logprob: -4.118745803833008
    10. ' commentaires' → logprob: -4.243745803833008

Token 7: ' déta' (ID: 99673)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '```' → logprob: -0.7043710947036743
    2. ':' → logprob: -0.8293710947036743
    3. '#' → logprob: -3.5793709754943848
    4. '\n' → logprob: -4.079370975494385
    5. '\' → logprob: -4.454370975494385
    6. ' :' → logprob: -5.079370975494385
    7. '``' → logprob: -5.954370975494385
    8. '
' → logprob: -7.079370975494385
    9. 'def' → logprob: -7.079370975494385
    10. ':
' → logprob: -7.954370975494385

Token 8: 'illés' (ID: 160970)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.6851999163627625
    2. 'és' → logprob: -1.4351999759674072
    3. 'r' → logprob: -2.6851999759674072
    4. 'é' → logprob: -3.0601999759674072
    5. 'n' → logprob: -3.6851999759674072
    6. 's' → logprob: -3.8101999759674072
    7. 'aires' → logprob: -3.8101999759674072
    8. 'v' → logprob: -4.810199737548828
    9. 'a' → logprob: -4.810199737548828
    10. '```' → logprob: -5.060199737548828

Token 9: '

' (ID: 279)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '```' → logprob: -0.1836344599723816
    2. ':' → logprob: -2.4336345195770264
    3. '#' → logprob: -3.3086345195770264
    4. '\n' → logprob: -3.9336345195770264
    5. '\' → logprob: -4.683634281158447
    6. '``' → logprob: -5.433634281158447
    7. 'def' → logprob: -5.433634281158447
    8. '
' → logprob: -6.308634281158447
    9. ' :' → logprob: -6.683634281158447
    10. '

' → logprob: -7.308634281158447

Token 10: '#' (ID: 2)
  Prédit: '#'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.5670614838600159
    2. '```' → logprob: -0.9420614838600159
    3. 'def' → logprob: -3.317061424255371
    4. 'import' → logprob: -6.567061424255371
    5. '\' → logprob: -6.567061424255371
    6. '``' → logprob: -7.317061424255371
    7. ':' → logprob: -7.567061424255371
    8. 'd' → logprob: -7.692061424255371
    9. ''''
' → logprob: -7.817061424255371
    10. '"""
' → logprob: -8.067061424255371

Token 11: ' Pro' (ID: 1258)
  Prédit: ' def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' def' → logprob: -0.4665191173553467
    2. 'def' → logprob: -1.2165191173553467
    3. '```' → logprob: -3.2165191173553467
    4. ' ```' → logprob: -4.341519355773926
    5. ' import' → logprob: -4.716519355773926
    6. 'import' → logprob: -5.216519355773926
    7. '#' → logprob: -6.216519355773926
    8. ' #' → logprob: -6.216519355773926
    9. ' Python' → logprob: -6.841519355773926
    10. ' ' → logprob: -6.966519355773926

Token 12: 'bl' (ID: 1751)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.7452057003974915
    2. 'gram' → logprob: -0.7452057003974915
    3. 'def' → logprob: -3.9952056407928467
    4. 'm' → logprob: -4.370205879211426
    5. 'bl' → logprob: -4.870205879211426
    6. 'ble' → logprob: -5.870205879211426
    7. '```' → logprob: -6.120205879211426
    8. 'blem' → logprob: -6.245205879211426
    9. 'jet' → logprob: -7.120205879211426
    10. 'g' → logprob: -7.495205879211426

Token 13: 'ème' (ID: 9767)
  Prédit: 'ème'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ème' → logprob: -0.08149020373821259
    2. 'bl' → logprob: -3.0814902782440186
    3. '#' → logprob: -4.2064900398254395
    4. 'l' → logprob: -5.0814900398254395
    5. 'ble' → logprob: -5.9564900398254395
    6. 'é' → logprob: -6.0814900398254395
    7. 'è' → logprob: -6.4564900398254395
    8. 'lem' → logprob: -6.8314900398254395
    9. 'èm' → logprob: -6.8314900398254395
    10. 'lé' → logprob: -6.9564900398254395

Token 14: ' résumé' (ID: 140184)
  Prédit: ' :'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' :' → logprob: -0.18240122497081757
    2. ':' → logprob: -1.807401180267334
    3. ' ' → logprob: -6.432401180267334
    4. ' :
' → logprob: -8.057401657104492
    5. '#' → logprob: -8.682401657104492
    6. '```' → logprob: -9.182401657104492
    7. ' ' → logprob: -9.432401657104492
    8. ' de' → logprob: -9.557401657104492
    9. 's' → logprob: -9.557401657104492
    10. ' :

' → logprob: -9.932401657104492

Token 15: ' :
' (ID: 10039)
  Prédit: ' :'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' :' → logprob: -0.04492678493261337
    2. ':' → logprob: -3.169926881790161
    3. '#' → logprob: -6.669926643371582
    4. ' :
' → logprob: -9.169926643371582
    5. ',' → logprob: -9.294926643371582
    6. '```' → logprob: -9.419926643371582
    7. '<|end|>' → logprob: -9.544926643371582
    8. ' :

' → logprob: -9.544926643371582
    9. ' ' → logprob: -9.919926643371582
    10. ' #' → logprob: -10.044926643371582

Token 16: '#' (ID: 2)
  Prédit: '#'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.05300969257950783
    2. ' #' → logprob: -3.0530097484588623
    3. ' Le' → logprob: -7.178009510040283
    4. ' ' → logprob: -7.678009510040283
    5. ' 
' → logprob: -8.053009986877441
    6. 'Voici' → logprob: -8.303009986877441
    7. '"""' → logprob: -8.553009986877441
    8. ' Il' → logprob: -8.803009986877441
    9. '```' → logprob: -8.928009986877441
    10. ' É' → logprob: -8.928009986877441

Token 17: ' Deux' (ID: 92086)
  Prédit: ' É'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' É' → logprob: -1.5520927906036377
    2. ' Calcul' → logprob: -1.5520927906036377
    3. '#' → logprob: -2.1770927906036377
    4. ' On' → logprob: -2.6770927906036377
    5. ' Le' → logprob: -2.9270927906036377
    6. ' #' → logprob: -3.0520927906036377
    7. ' Rés' → logprob: -3.1770927906036377
    8. ' Trou' → logprob: -3.4270927906036377
    9. ' Cr' → logprob: -3.5520927906036377
    10. ' Dé' → logprob: -3.9270927906036377

Token 18: ' joueurs' (ID: 56340)
  Prédit: ' chaînes'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' chaînes' → logprob: -0.858971357345581
    2. ' nombres' → logprob: -1.108971357345581
    3. ' ent' → logprob: -3.108971357345581
    4. ' chain' → logprob: -3.483971357345581
    5. ' tableaux' → logprob: -3.608971357345581
    6. ' listes' → logprob: -3.733971357345581
    7. ' strings' → logprob: -3.858971357345581
    8. 'chain' → logprob: -4.35897159576416
    9. ' ' → logprob: -4.73397159576416
    10. ' mots' → logprob: -4.85897159576416

Token 19: ' (' (ID: 350)
  Prédit: ' jouent'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' jouent' → logprob: -0.2860315442085266
    2. ' jou' → logprob: -2.036031484603882
    3. ',' → logprob: -3.161031484603882
    4. ' s' → logprob: -3.536031484603882
    5. 'jou' → logprob: -4.661031723022461
    6. 's' → logprob: -5.036031723022461
    7. '<|end|>' → logprob: -5.036031723022461
    8. ' ' → logprob: -5.411031723022461
    9. ' joue' → logprob: -5.661031723022461
    10. ' jouer' → logprob: -6.161031723022461

Token 20: 'ジョ' (ID: 176394)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3741229474544525
    2. 'A' → logprob: -2.2491228580474854
    3. 'jou' → logprob: -2.7491228580474854
    4. ' A' → logprob: -3.7491228580474854
    5. ',' → logprob: -4.3741230964660645
    6. ' joueur' → logprob: -4.4991230964660645
    7. ' )' → logprob: -4.6241230964660645
    8. ' joueurs' → logprob: -4.6241230964660645
    9. '1' → logprob: -4.7491230964660645
    10. 'à' → logprob: -4.8741230964660645

Token 21: 'ウ' (ID: 21225)
  Prédit: 'ン'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ン' → logprob: -0.9065659046173096
    2. 'ー' → logprob: -1.9065659046173096
    3. '```' → logprob: -2.2815659046173096
    4. 'ージ' → logprob: -2.6565659046173096
    5. 'ーカー' → logprob: -2.6565659046173096
    6. 'ジョ' → logprob: -3.9065659046173096
    7. 'エ' → logprob: -4.2815656661987305
    8. 'ギ' → logprob: -4.4065656661987305
    9. 'ウ' → logprob: -4.4065656661987305
    10. 'アン' → logprob: -4.4065656661987305

Token 22: '君' (ID: 82180)
  Prédit: 'ジ'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ジ' → logprob: -1.3250101804733276
    2. 'ジョ' → logprob: -1.4500101804733276
    3. ')' → logprob: -2.075010299682617
    4. 'ズ' → logprob: -2.575010299682617
    5. 'と' → logprob: -2.950010299682617
    6. '```' → logprob: -3.200010299682617
    7. 'ア' → logprob: -3.950010299682617
    8. 'フ' → logprob: -4.075010299682617
    9. 'タ' → logprob: -4.200010299682617
    10. 'ル' → logprob: -4.325010299682617

Token 23: ' et' (ID: 859)
  Prédit: 'と'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'と' → logprob: -0.0938367247581482
    2. ')' → logprob: -3.093836784362793
    3. ' et' → logprob: -3.718836784362793
    4. ' と' → logprob: -4.593836784362793
    5. ' and' → logprob: -5.093836784362793
    6. 'の' → logprob: -7.093836784362793
    7. ',' → logprob: -7.718836784362793
    8. 'and' → logprob: -7.843836784362793
    9. '）' → logprob: -7.843836784362793
    10. ' )' → logprob: -8.093836784362793

Token 24: ' �' (ID: 7574)
  Prédit: ' ジ'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ジ' → logprob: -0.7963027954101562
    2. ' タ' → logprob: -1.5463027954101562
    3. ' マ' → logprob: -2.4213027954101562
    4. 'タ' → logprob: -3.5463027954101562
    5. ' ト' → logprob: -3.5463027954101562
    6. ' カ' → logprob: -4.046302795410156
    7. 'ジョ' → logprob: -4.296302795410156
    8. ' ケ' → logprob: -4.546302795410156
    9. ' ア' → logprob: -4.733802795410156
    10. ' イ' → logprob: -4.796302795410156

Token 25: '�' (ID: 97)
  Prédit: 'タ'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'タ' → logprob: -0.7714793682098389
    2. 'ル' → logprob: -2.771479368209839
    3. 'ア' → logprob: -3.021479368209839
    4. 'カ' → logprob: -3.083979368209839
    5. 'ナ' → logprob: -3.208979368209839
    6. '�' → logprob: -3.333979368209839
    7. 'a' → logprob: -3.833979368209839
    8. 'ジョ' → logprob: -3.833979368209839
    9. 'ジ' → logprob: -3.896479368209839
    10. 'イ' → logprob: -4.396479606628418

Token 26: 'エ' (ID: 23760)
  Prédit: 'タ'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'タ' → logprob: -0.3545876145362854
    2. 'ル' → logprob: -2.8545875549316406
    3. 'ジョ' → logprob: -3.4795875549316406
    4. 'カ' → logprob: -4.042087554931641
    5. 'ア' → logprob: -4.104587554931641
    6. 'ウ' → logprob: -4.167087554931641
    7. 'ジ' → logprob: -4.542087554931641
    8. '��' → logprob: -4.667087554931641
    9. 'ト' → logprob: -4.854587554931641
    10. 'ナ' → logprob: -4.979587554931641

Token 27: 'さん' (ID: 14652)
  Prédit: 'ン'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ン' → logprob: -0.7116593718528748
    2. 'ル' → logprob: -1.5866594314575195
    3. 'リ' → logprob: -3.5866594314575195
    4. '��' → logprob: -3.7116594314575195
    5. 'イ' → logprob: -4.0866594314575195
    6. 'タ' → logprob: -4.0866594314575195
    7. 'ム' → logprob: -4.0866594314575195
    8. 'ラ' → logprob: -4.2116594314575195
    9. 'コ' → logprob: -4.3366594314575195
    10. 'ス' → logprob: -4.4616594314575195

Token 28: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.4132680892944336
    2. 'カ' → logprob: -1.6632680892944336
    3. 'が' → logprob: -2.5382680892944336
    4. 'の' → logprob: -2.7882680892944336
    5. 'ン' → logprob: -3.0382680892944336
    6. 'タ' → logprob: -3.1632680892944336
    7. '�' → logprob: -3.2882680892944336
    8. '��' → logprob: -3.2882680892944336
    9. 'ジ' → logprob: -3.4132680892944336
    10. 'マ' → logprob: -3.9132680892944336

Token 29: ' jouent' (ID: 195501)
  Prédit: 'が'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'が' → logprob: -0.21938881278038025
    2. 'の' → logprob: -2.094388723373413
    3. '�' → logprob: -3.469388723373413
    4. ')' → logprob: -4.344388961791992
    5. 'と' → logprob: -4.969388961791992
    6. '��' → logprob: -5.344388961791992
    7. 'は' → logprob: -5.469388961791992
    8. ' が' → logprob: -5.844388961791992
    9. 'で' → logprob: -5.969388961791992
    10. '）' → logprob: -5.969388961791992

Token 30: ' au' (ID: 2791)
  Prédit: ' au'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' au' → logprob: -0.5163624882698059
    2. ' à' → logprob: -1.0163624286651611
    3. ' ' → logprob: -4.01636266708374
    4. ' ensemble' → logprob: -5.26636266708374
    5. 'au' → logprob: -5.39136266708374
    6. 'à' → logprob: -5.64136266708374
    7. '```' → logprob: -6.14136266708374
    8. ' aux' → logprob: -6.26636266708374
    9. ' un' → logprob: -6.64136266708374
    10. ' a' → logprob: -6.89136266708374

Token 31: ' tennis' (ID: 33595)
  Prédit: ' pierre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' pierre' → logprob: -1.2981666326522827
    2. ' jeu' → logprob: -1.6731666326522827
    3. '```' → logprob: -1.6731666326522827
    4. ' pile' → logprob: -3.0481667518615723
    5. 'tic' → logprob: -3.1731667518615723
    6. 'jeu' → logprob: -3.4231667518615723
    7. 'pile' → logprob: -3.7356667518615723
    8. 'p' → logprob: -3.7981667518615723
    9. ' mor' → logprob: -3.9856667518615723
    10. 'pend' → logprob: -4.110666751861572

Token 32: ' avec' (ID: 3937)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.' → logprob: -0.42484521865844727
    2. '。' → logprob: -2.2998452186584473
    3. '#' → logprob: -2.9248452186584473
    4. 'の' → logprob: -3.0498452186584473
    5. 'で' → logprob: -3.5498452186584473
    6. ' de' → logprob: -3.6748452186584473
    7. ' ' → logprob: -3.9248452186584473
    8. '```' → logprob: -4.174845218658447
    9. ',' → logprob: -4.549845218658447
    10. '　' → logprob: -4.924845218658447

Token 33: ' des' (ID: 731)
  Prédit: ' un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.7501222491264343
    2. ' une' → logprob: -1.375122308731079
    3. ' des' → logprob: -1.875122308731079
    4. 'un' → logprob: -3.250122308731079
    5. 'une' → logprob: -3.750122308731079
    6. ' deux' → logprob: -4.3751220703125
    7. 'des' → logprob: -4.5001220703125
    8. ' les' → logprob: -5.0001220703125
    9. ' ' → logprob: -6.0001220703125
    10. ' points' → logprob: -6.0626220703125

Token 34: ' règles' (ID: 67042)
  Prédit: ' points'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' points' → logprob: -0.5802857279777527
    2. ' règles' → logprob: -0.9552857279777527
    3. ' scores' → logprob: -4.080285549163818
    4. 'points' → logprob: -4.205285549163818
    5. 'r' → logprob: -5.830285549163818
    6. 'scores' → logprob: -5.955285549163818
    7. ' scoring' → logprob: -6.017785549163818
    8. ' échanges' → logprob: -6.080285549163818
    9. 'sc' → logprob: -6.642785549163818
    10. ' ' → logprob: -6.955285549163818

Token 35: ' de' (ID: 334)
  Prédit: ' spéc'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' spéc' → logprob: -0.5420262217521667
    2. ' spécifiques' → logprob: -2.2920262813568115
    3. ' particuli' → logprob: -2.6670262813568115
    4. ' de' → logprob: -2.9170262813568115
    5. ' classiques' → logprob: -3.1670262813568115
    6. 'de' → logprob: -4.167026042938232
    7. 'sp' → logprob: -4.167026042938232
    8. ' très' → logprob: -4.854526042938232
    9. 'standard' → logprob: -4.917026042938232
    10. ' standard' → logprob: -4.917026042938232

Token 36: ' score' (ID: 8429)
  Prédit: ' score'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' score' → logprob: -1.4902676343917847
    2. ' scoring' → logprob: -1.4902676343917847
    3. ' points' → logprob: -2.490267753601074
    4. 'score' → logprob: -2.490267753601074
    5. 'points' → logprob: -2.615267753601074
    6. 'sc' → logprob: -2.615267753601074
    7. ' point' → logprob: -2.740267753601074
    8. ' base' → logprob: -3.740267753601074
    9. ' jeu' → logprob: -3.740267753601074
    10. ' tennis' → logprob: -3.990267753601074

Token 37: ' spécifiques' (ID: 110075)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 's' → logprob: -1.475403904914856
    2. ' standard' → logprob: -1.475403904914856
    3. ' ' → logprob: -1.600403904914856
    4. '.' → logprob: -3.1004037857055664
    5. 'ing' → logprob: -3.4754037857055664
    6. ' de' → logprob: -3.8504037857055664
    7. '  ' → logprob: -3.9754037857055664
    8. '#' → logprob: -4.037903785705566
    9. ' traditionnel' → logprob: -4.037903785705566
    10. ' classiques' → logprob: -4.225403785705566

Token 38: ' :
' (ID: 10039)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.16673800349235535
    2. '.' → logprob: -2.5417380332946777
    3. ' :' → logprob: -3.9167380332946777
    4. ':' → logprob: -4.041738033294678
    5. ',' → logprob: -4.291738033294678
    6. ' ' → logprob: -4.416738033294678
    7. '```' → logprob: -5.791738033294678
    8. ' #' → logprob: -5.916738033294678
    9. '\' → logprob: -7.041738033294678
    10. '。' → logprob: -7.166738033294678

Token 39: '#' (ID: 2)
  Prédit: '#'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.34640735387802124
    2. ' #' → logprob: -1.346407413482666
    3. ' ' → logprob: -3.971407413482666
    4. '　' → logprob: -5.096407413482666
    5. ' ' → logprob: -6.346407413482666
    6. '\' → logprob: -6.846407413482666
    7. '```' → logprob: -6.846407413482666
    8. 'の' → logprob: -8.846406936645508
    9. '  ' → logprob: -8.908906936645508
    10. ',' → logprob: -9.033906936645508

Token 40: ' -' (ID: 533)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.8195105195045471
    2. ' #' → logprob: -0.8195105195045471
    3. ' ' → logprob: -2.3195104598999023
    4. ' chaque' → logprob: -5.569510459899902
    5. ' ' → logprob: -5.819510459899902
    6. ' Chaque' → logprob: -5.944510459899902
    7. ' le' → logprob: -6.944510459899902
    8. '```' → logprob: -6.944510459899902
    9. ' Le' → logprob: -7.382010459899902
    10. 's' → logprob: -7.507010459899902

Token 41: ' Si' (ID: 7832)
  Prédit: ' chaque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' chaque' → logprob: -1.0333092212677002
    2. ' le' → logprob: -2.2833092212677
    3. ' points' → logprob: -2.7833092212677
    4. ' les' → logprob: -2.9083092212677
    5. ' Chaque' → logprob: -2.9083092212677
    6. 'les' → logprob: -2.9083092212677
    7. 'Chaque' → logprob: -3.0333092212677
    8. 'le' → logprob: -3.6583092212677
    9. ' ' → logprob: -3.7208092212677
    10. ' un' → logprob: -4.033308982849121

Token 42: ' un' (ID: 537)
  Prédit: ' le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' le' → logprob: -1.1762419939041138
    2. 'le' → logprob: -1.6762419939041138
    3. ' les' → logprob: -2.426241874694824
    4. ' l' → logprob: -2.676241874694824
    5. ' un' → logprob: -2.801241874694824
    6. 'les' → logprob: -2.926241874694824
    7. ' la' → logprob: -3.301241874694824
    8. 'l' → logprob: -3.551241874694824
    9. 'un' → logprob: -4.051241874694824
    10. ' aucun' → logprob: -4.051241874694824

Token 43: ' joueur' (ID: 72629)
  Prédit: ' joueur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' joueur' → logprob: -0.0518689788877964
    2. ' point' → logprob: -4.051868915557861
    3. 'jou' → logprob: -4.301868915557861
    4. 'e' → logprob: -5.551868915557861
    5. ' des' → logprob: -5.551868915557861
    6. ' score' → logprob: -6.176868915557861
    7. ' joueurs' → logprob: -6.301868915557861
    8. ' player' → logprob: -6.301868915557861
    9. 'é' → logprob: -7.176868915557861
    10. '```' → logprob: -7.426868915557861

Token 44: ' atteint' (ID: 104876)
  Prédit: ' marque'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' marque' → logprob: -0.5164607167243958
    2. ' a' → logprob: -2.516460657119751
    3. ' gagne' → logprob: -2.516460657119751
    4. 'a' → logprob: -3.016460657119751
    5. ' rem' → logprob: -3.016460657119751
    6. ' mar' → logprob: -3.516460657119751
    7. ' est' → logprob: -4.01646089553833
    8. ' score' → logprob: -4.14146089553833
    9. 'score' → logprob: -4.26646089553833
    10. ' mène' → logprob: -4.64146089553833

Token 45: ' ' (ID: 220)
  Prédit: '40'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '40' → logprob: -0.1596057415008545
    2. ' ' → logprob: -2.0346057415008545
    3. '15' → logprob: -5.409605979919434
    4. '4' → logprob: -5.909605979919434
    5. ' ' → logprob: -6.659605979919434
    6. ' le' → logprob: -6.659605979919434
    7. '20' → logprob: -7.159605979919434
    8. ' "' → logprob: -7.409605979919434
    9. '"' → logprob: -7.409605979919434
    10. '```' → logprob: -7.534605979919434

Token 46: '5' (ID: 20)
  Prédit: '4'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '4' → logprob: -0.25935453176498413
    2. '40' → logprob: -1.884354591369629
    3. ' ' → logprob: -2.759354591369629
    4. '15' → logprob: -6.009354591369629
    5. '0' → logprob: -6.384354591369629
    6. ' ' → logprob: -7.009354591369629
    7. '```' → logprob: -7.134354591369629
    8. '"' → logprob: -7.321854591369629
    9. 'un' → logprob: -7.446854591369629
    10. '  ' → logprob: -7.634354591369629

Token 47: ' points' (ID: 5571)
  Prédit: ' points'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' points' → logprob: -0.06772316247224808
    2. 'points' → logprob: -2.817723274230957
    3. ' espaces' → logprob: -6.942723274230957
    4. ' ' → logprob: -7.192723274230957
    5. ' ' → logprob: -7.192723274230957
    6. '_points' → logprob: -7.692723274230957
    7. ' point' → logprob: -7.817723274230957
    8. 'point' → logprob: -8.067723274230957
    9. ' puntos' → logprob: -8.067723274230957
    10. 'pts' → logprob: -8.192723274230957

Token 48: ' avant' (ID: 13339)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.06256571412086487
    2. ' ,' → logprob: -2.937565803527832
    3. ')' → logprob: -6.562565803527832
    4. ' (' → logprob: -7.562565803527832
    5. '<|end|>' → logprob: -7.562565803527832
    6. ' ' → logprob: -7.687565803527832
    7. ' ' → logprob: -7.812565803527832
    8. ' )' → logprob: -7.812565803527832
    9. '.' → logprob: -7.937565803527832
    10. '),' → logprob: -8.312565803527832

Token 49: ' que' (ID: 661)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.29112204909324646
    2. ' l' → logprob: -1.4161220788955688
    3. ' ' → logprob: -5.541121959686279
    4. ' que' → logprob: -6.541121959686279
    5. 'que' → logprob: -7.041121959686279
    6. '	l' → logprob: -7.291121959686279
    7. 'un' → logprob: -8.166122436523438
    8. ' son' → logprob: -8.353622436523438
    9. 'son' → logprob: -8.478622436523438
    10. ' un' → logprob: -8.541122436523438

Token 50: ' l' (ID: 305)
  Prédit: ' l'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.28691524267196655
    2. 'l' → logprob: -1.4119153022766113
    3. ' son' → logprob: -6.161915302276611
    4. '	l' → logprob: -7.161915302276611
    5. ' ' → logprob: -7.536915302276611
    6. 'son' → logprob: -8.286914825439453
    7. ' laut' → logprob: -8.286914825439453
    8. '-l' → logprob: -8.411914825439453
    9. ' lâ' → logprob: -8.536914825439453
    10. '```' → logprob: -8.661914825439453

Token 51: ''autre' (ID: 52145)
  Prédit: ''autre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''autre' → logprob: -0.027597511187195778
    2. 'aut' → logprob: -4.152597427368164
    3. ''aut' → logprob: -5.402597427368164
    4. '’autre' → logprob: -5.652597427368164
    5. ' autre' → logprob: -6.402597427368164
    6. '#' → logprob: -7.777597427368164
    7. ''' → logprob: -8.152597427368164
    8. '_aut' → logprob: -8.527597427368164
    9. ' aut' → logprob: -8.652597427368164
    10. 'e' → logprob: -9.277597427368164

Token 52: ' ait' (ID: 43015)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' n' → logprob: -1.108012080192566
    2. ' joueur' → logprob: -1.608012080192566
    3. ',' → logprob: -1.983012080192566
    4. ' ,' → logprob: -2.2330121994018555
    5. ' )' → logprob: -2.9830121994018555
    6. ' ),' → logprob: -3.4830121994018555
    7. ')' → logprob: -3.7330121994018555
    8. '<|end|>' → logprob: -4.1080121994018555
    9. ' espace' → logprob: -4.3580121994018555
    10. ' ' → logprob: -4.3580121994018555

Token 53: ' ' (ID: 220)
  Prédit: '5'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.9775782227516174
    2. ' ' → logprob: -1.2275781631469727
    3. ' atteint' → logprob: -1.3525781631469727
    4. '4' → logprob: -3.9775781631469727
    5. 'atte' → logprob: -4.352578163146973
    6. '6' → logprob: -4.977578163146973
    7. '3' → logprob: -5.102578163146973
    8. '2' → logprob: -5.227578163146973
    9. '1' → logprob: -6.227578163146973
    10. ' obtenu' → logprob: -6.352578163146973

Token 54: '4' (ID: 19)
  Prédit: '5'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.2802370488643646
    2. 'atte' → logprob: -2.0302369594573975
    3. 'égal' → logprob: -3.4052369594573975
    4. 'au' → logprob: -3.7802369594573975
    5. '6' → logprob: -4.155237197875977
    6. ' atteint' → logprob: -4.905237197875977
    7. ' ' → logprob: -5.030237197875977
    8. 'at' → logprob: -5.905237197875977
    9. 'a' → logprob: -6.030237197875977
    10. '4' → logprob: -6.155237197875977

Token 55: ',' (ID: 11)
  Prédit: ' ,'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ,' → logprob: -0.8441879749298096
    2. ',' → logprob: -1.0941879749298096
    3. ' points' → logprob: -1.4691879749298096
    4. 'points' → logprob: -5.9691877365112305
    5. ' espaces' → logprob: -7.0941877365112305
    6. ' ' → logprob: -7.4691877365112305
    7. ' ),' → logprob: -7.8441877365112305
    8. ' ' → logprob: -8.84418773651123
    9. '_points' → logprob: -9.34418773651123
    10. ' puntos' → logprob: -9.34418773651123

Token 56: ' il' (ID: 1793)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6505507826805115
    2. ' il' → logprob: -1.1505508422851562
    3. ' l' → logprob: -3.2755508422851562
    4. ' ,' → logprob: -3.4005508422851562
    5. ' ' → logprob: -3.6505508422851562
    6. ' alors' → logprob: -3.9005508422851562
    7. ',' → logprob: -4.150550842285156
    8. ' le' → logprob: -4.775550842285156
    9. ' celui' → logprob: -5.650550842285156
    10. ' la' → logprob: -5.650550842285156

Token 57: ' gagne' (ID: 141776)
  Prédit: ' gagne'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' gagne' → logprob: -0.030469153076410294
    2. ' gagn' → logprob: -4.780468940734863
    3. ' ' → logprob: -5.530468940734863
    4. ' ' → logprob: -5.780468940734863
    5. '_' → logprob: -5.780468940734863
    6. ' rem' → logprob: -6.030468940734863
    7. ' a' → logprob: -6.780468940734863
    8. ' gagner' → logprob: -6.905468940734863
    9. ' remport' → logprob: -7.155468940734863
    10. ' s' → logprob: -7.655468940734863

Token 58: '.
' (ID: 558)
  Prédit: '.'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.' → logprob: -0.03234490752220154
    2. '```' → logprob: -4.782344818115234
    3. ' ' → logprob: -5.157344818115234
    4. ',' → logprob: -5.157344818115234
    5. ':' → logprob: -5.907344818115234
    6. '.
' → logprob: -6.157344818115234
    7. '' → logprob: -7.157344818115234
    8. '
' → logprob: -7.157344818115234
    9. ' ' → logprob: -7.157344818115234
    10. 's' → logprob: -7.657344818115234

Token 59: '#' (ID: 2)
  Prédit: '#'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -0.515425443649292
    2. ' ' → logprob: -1.765425443649292
    3. ',' → logprob: -2.390425443649292
    4. '.' → logprob: -2.890425443649292
    5. '```' → logprob: -3.390425443649292
    6. ''' → logprob: -4.515425682067871
    7. ' #' → logprob: -5.015425682067871
    8. ',
' → logprob: -5.390425682067871
    9. '\n' → logprob: -5.515425682067871
    10. '\' → logprob: -5.515425682067871

Token 60: ' -' (ID: 533)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.055321380496025085
    2. ' ' → logprob: -3.430321455001831
    3. '
' → logprob: -5.430321216583252
    4. ' #' → logprob: -5.555321216583252
    5. '\' → logprob: -6.055321216583252
    6. ',' → logprob: -6.180321216583252
    7. '-' → logprob: -6.430321216583252
    8. '\n' → logprob: -6.555321216583252
    9. ' 
' → logprob: -6.680321216583252
    10. '```' → logprob: -7.055321216583252

Token 61: ' Si' (ID: 7832)
  Prédit: 'Si'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'Si' → logprob: -0.5574443936347961
    2. ' Si' → logprob: -0.9324443936347961
    3. '#' → logprob: -4.9324445724487305
    4. '-' → logprob: -5.5574445724487305
    5. ' ' → logprob: -5.5574445724487305
    6. 'Sinon' → logprob: -6.1824445724487305
    7. ' Sinon' → logprob: -6.1824445724487305
    8. ' Le' → logprob: -6.4324445724487305
    9. ' S' → logprob: -6.6824445724487305
    10. ' ' → logprob: -6.8074445724487305

Token 62: ' les' (ID: 1341)
  Prédit: ' les'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.6584182381629944
    2. 'les' → logprob: -1.1584181785583496
    3. ' aucun' → logprob: -3.0334181785583496
    4. 'le' → logprob: -3.5334181785583496
    5. ' un' → logprob: -3.7834181785583496
    6. 'un' → logprob: -4.15841817855835
    7. 'l' → logprob: -4.40841817855835
    8. ' le' → logprob: -4.65841817855835
    9. ' l' → logprob: -5.28341817855835
    10. ' ' → logprob: -5.65841817855835

Token 63: ' deux' (ID: 10301)
  Prédit: ' deux'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' deux' → logprob: -0.47429728507995605
    2. 'de' → logprob: -1.099297285079956
    3. ' joueurs' → logprob: -4.224297523498535
    4. ' ' → logprob: -4.974297523498535
    5. ' scores' → logprob: -5.099297523498535
    6. 'jou' → logprob: -5.599297523498535
    7. ' points' → logprob: -5.724297523498535
    8. 'scores' → logprob: -6.474297523498535
    9. ' two' → logprob: -6.724297523498535
    10. 'points' → logprob: -6.786797523498535

Token 64: ' atte' (ID: 43312)
  Prédit: ' joueurs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' joueurs' → logprob: -0.16284295916557312
    2. ' ont' → logprob: -2.1628429889678955
    3. 'jou' → logprob: -4.037842750549316
    4. 'ont' → logprob: -5.537842750549316
    5. '#' → logprob: -5.662842750549316
    6. ' ' → logprob: -5.912842750549316
    7. 's' → logprob: -6.537842750549316
    8. ' jouent' → logprob: -7.037842750549316
    9. ' joueur' → logprob: -7.287842750549316
    10. ' ' → logprob: -7.412842750549316

Token 65: 'ignent' (ID: 154364)
  Prédit: 'ignent'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ignent' → logprob: -0.017051752656698227
    2. 'i' → logprob: -5.392051696777344
    3. 'g' → logprob: -5.892051696777344
    4. 'ind' → logprob: -6.142051696777344
    5. 'int' → logprob: -6.642051696777344
    6. 'nd' → logprob: -6.892051696777344
    7. 'gn' → logprob: -7.267051696777344
    8. 'n' → logprob: -7.392051696777344
    9. 'ing' → logprob: -7.392051696777344
    10. 'nt' → logprob: -7.517051696777344

Token 66: ' ' (ID: 220)
  Prédit: '4'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.10092830657958984
    2. ' ' → logprob: -2.35092830657959
    3. '5' → logprob: -8.60092830657959
    4. ' ' → logprob: -8.97592830657959
    5. 'au' → logprob: -9.10092830657959
    6. ' quatre' → logprob: -9.22592830657959
    7. ' au' → logprob: -9.35092830657959
    8. '3' → logprob: -10.60092830657959
    9. '' → logprob: -11.60092830657959
    10. 'le' → logprob: -11.85092830657959

Token 67: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.0008386960835196078
    2. ' ' → logprob: -7.250838756561279
    3. 'au' → logprob: -9.750838279724121
    4. '3' → logprob: -10.875838279724121
    5. '5' → logprob: -11.500838279724121
    6. ' quatre' → logprob: -11.625838279724121
    7. '４' → logprob: -12.063338279724121
    8. 'qu' → logprob: -12.438338279724121
    9. ' au' → logprob: -12.750838279724121
    10. 'le' → logprob: -12.938338279724121

Token 68: ' points' (ID: 5571)
  Prédit: ' points'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' points' → logprob: -0.230634406208992
    2. 'points' → logprob: -1.6056344509124756
    3. '-' → logprob: -5.8556342124938965
    4. ',' → logprob: -7.3556342124938965
    5. 'à' → logprob: -8.230634689331055
    6. ' à' → logprob: -8.605634689331055
    7. ' ' → logprob: -8.605634689331055
    8. '	points' → logprob: -8.605634689331055
    9. 'pts' → logprob: -9.043134689331055
    10. '_points' → logprob: -9.855634689331055

Token 69: ' (' (ID: 350)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.04831604287028313
    2. ' ,' → logprob: -4.17331600189209
    3. ' points' → logprob: -4.17331600189209
    4. 'points' → logprob: -5.29831600189209
    5. ' simult' → logprob: -6.79831600189209
    6. ' et' → logprob: -6.92331600189209
    7. '以上' → logprob: -7.04831600189209
    8. ' à' → logprob: -7.17331600189209
    9. '点' → logprob: -7.29831600189209
    10. 'で' → logprob: -7.54831600189209

Token 70: '4' (ID: 19)
  Prédit: '),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '),' → logprob: -1.1468985080718994
    2. '-' → logprob: -1.5218985080718994
    3. 'à' → logprob: -2.0218985080718994
    4. ' égal' → logprob: -2.2718985080718994
    5. 'égalité' → logprob: -2.7718985080718994
    6. ',' → logprob: -3.2718985080718994
    7. ')' → logprob: -3.7718985080718994
    8. 'égal' → logprob: -3.7718985080718994
    9. ' points' → logprob: -4.89689826965332
    10. '#' → logprob: -5.14689826965332

Token 71: '-' (ID: 12)
  Prédit: '),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '),' → logprob: -0.9988550543785095
    2. ')' → logprob: -1.4988551139831543
    3. '-' → logprob: -1.4988551139831543
    4. ' points' → logprob: -2.6238551139831543
    5. ' -' → logprob: -3.8738551139831543
    6. 'points' → logprob: -4.248855113983154
    7. ' ' → logprob: -4.373855113983154
    8. ' ),' → logprob: -4.748855113983154
    9. ',' → logprob: -4.998855113983154
    10. '#' → logprob: -5.748855113983154

Token 72: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.02464926987886429
    2. '-' → logprob: -3.8996493816375732
    3. ' ' → logprob: -6.399649143218994
    4. ' -' → logprob: -7.024649143218994
    5. ')' → logprob: -7.899649143218994
    6. 'all' → logprob: -8.649649620056152
    7. '–' → logprob: -8.774649620056152
    8. ' partout' → logprob: -8.774649620056152
    9. '４' → logprob: -9.274649620056152
    10. '),' → logprob: -9.774649620056152

Token 73: '),' (ID: 936)
  Prédit: '),'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '),' → logprob: -0.031276192516088486
    2. ' ),' → logprob: -3.906276226043701
    3. ')' → logprob: -4.656276226043701
    4. ',' → logprob: -7.406276226043701
    5. ' )' → logprob: -9.156275749206543
    6. ' ou' → logprob: -9.406275749206543
    7. ' ' → logprob: -9.906275749206543
    8. ' et' → logprob: -9.906275749206543
    9. '#' → logprob: -10.343775749206543
    10. ':' → logprob: -10.968775749206543

Token 74: ' il' (ID: 1793)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.8677166104316711
    2. ' on' → logprob: -1.9927165508270264
    3. ' ils' → logprob: -2.1177165508270264
    4. ' le' → logprob: -2.3677165508270264
    5. ' l' → logprob: -2.4927165508270264
    6. ' il' → logprob: -2.7427165508270264
    7. ' c' → logprob: -4.1177167892456055
    8. ' ' → logprob: -4.2427167892456055
    9. '#' → logprob: -4.3677167892456055
    10. 'le' → logprob: -4.6177167892456055

Token 75: ' faut' (ID: 17821)
  Prédit: ' y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.12745767831802368
    2. 'y' → logprob: -2.502457618713379
    3. ' faut' → logprob: -4.002457618713379
    4. 'f' → logprob: -4.627457618713379
    5. 's' → logprob: -5.252457618713379
    6. 'n' → logprob: -6.502457618713379
    7. ' n' → logprob: -6.627457618713379
    8. ' f' → logprob: -8.252457618713379
    9. 'a' → logprob: -8.377457618713379
    10. ' a' → logprob: -8.877457618713379

Token 76: ' qu' (ID: 474)
  Prédit: ' continuer'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' continuer' → logprob: -0.4718639552593231
    2. 'contin' → logprob: -1.2218639850616455
    3. ' jouer' → logprob: -3.2218639850616455
    4. ' poursuivre' → logprob: -5.096863746643066
    5. 'aller' → logprob: -5.346863746643066
    6. ' attendre' → logprob: -5.346863746643066
    7. ' prolong' → logprob: -5.346863746643066
    8. 'jou' → logprob: -5.596863746643066
    9. 'att' → logprob: -6.846863746643066
    10. 'é' → logprob: -6.971863746643066

Token 77: '’un' (ID: 9073)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.6109720468521118
    2. 'e' → logprob: -1.3609720468521118
    3. 'u' → logprob: -2.6109719276428223
    4. ''un' → logprob: -3.2359719276428223
    5. 'a' → logprob: -3.3609719276428223
    6. ''à' → logprob: -4.985971927642822
    7. 'que' → logprob: -4.985971927642822
    8. ''il' → logprob: -5.235971927642822
    9. ''une' → logprob: -5.235971927642822
    10. '_' → logprob: -5.360971927642822

Token 78: ' joueur' (ID: 72629)
  Prédit: ' joueur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' joueur' → logprob: -0.11574430018663406
    2. ' des' → logprob: -2.8657443523406982
    3. 'jou' → logprob: -3.2407443523406982
    4. ' ' → logprob: -6.115744113922119
    5. '```' → logprob: -6.115744113922119
    6. 'des' → logprob: -6.240744113922119
    7. '2' → logprob: -6.990744113922119
    8. ' joueurs' → logprob: -7.240744113922119
    9. 'é' → logprob: -7.615744113922119
    10. '3' → logprob: -7.865744113922119

Token 79: ' pr' (ID: 550)
  Prédit: 'ait'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ait' → logprob: -1.2375397682189941
    2. ' gagne' → logprob: -1.9875397682189941
    3. 'avance' → logprob: -2.362539768218994
    4. ' ait' → logprob: -2.487539768218994
    5. ' ' → logprob: -3.112539768218994
    6. 'ai' → logprob: -3.237539768218994
    7. 'g' → logprob: -3.237539768218994
    8. 'pr' → logprob: -3.862539768218994
    9. ' atte' → logprob: -3.862539768218994
    10. 'score' → logprob: -4.112539768218994

Token 80: 'enne' (ID: 17721)
  Prédit: 'enne'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'enne' → logprob: -0.3751477003097534
    2. 'o' → logprob: -2.250147819519043
    3. 'ennent' → logprob: -2.500147819519043
    4. 'é' → logprob: -2.625147819519043
    5. 'end' → logprob: -5.000147819519043
    6. 'e' → logprob: -5.125147819519043
    7. 'endre' → logprob: -5.250147819519043
    8. 'r' → logprob: -5.375147819519043
    9. 'éc' → logprob: -5.625147819519043
    10. 'ends' → logprob: -5.625147819519043

Token 81: ' deux' (ID: 10301)
  Prédit: 'de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'de' → logprob: -0.8010075688362122
    2. '2' → logprob: -1.0510075092315674
    3. ' deux' → logprob: -2.3010075092315674
    4. ' ' → logprob: -3.0510075092315674
    5. 'un' → logprob: -4.0510077476501465
    6. 'le' → logprob: -4.4260077476501465
    7. 'une' → logprob: -5.0510077476501465
    8. ' un' → logprob: -5.5510077476501465
    9. 'l' → logprob: -5.6760077476501465
    10. ' au' → logprob: -6.5510077476501465

Token 82: ' points' (ID: 5571)
  Prédit: ' points'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' points' → logprob: -0.0360758937895298
    2. 'points' → logprob: -3.4110758304595947
    3. ' ' → logprob: -6.411076068878174
    4. ' point' → logprob: -8.036075592041016
    5. '_points' → logprob: -9.411075592041016
    6. 'point' → logprob: -9.536075592041016
    7. ' ' → logprob: -9.911075592041016
    8. '	points' → logprob: -9.911075592041016
    9. 'pts' → logprob: -10.036075592041016
    10. ' puntos' → logprob: -10.536075592041016

Token 83: ' cons' (ID: 1473)
  Prédit: 'd'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'd' → logprob: -0.34282398223876953
    2. ' d' → logprob: -1.3428239822387695
    3. ' cons' → logprob: -4.0928239822387695
    4. ' de' → logprob: -4.8428239822387695
    5. 'de' → logprob: -5.9678239822387695
    6. '<|end|>' → logprob: -7.8428239822387695
    7. ' ' → logprob: -7.9678239822387695
    8. '	d' → logprob: -8.34282398223877
    9. 'cons' → logprob: -8.46782398223877
    10. 's' → logprob: -8.46782398223877

Token 84: 'écut' (ID: 96392)
  Prédit: 'écut'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'écut' → logprob: -0.20174290239810944
    2. 'é' → logprob: -2.0767428874969482
    3. 'éc' → logprob: -2.9517428874969482
    4. '�' → logprob: -6.201743125915527
    5. 'ecut' → logprob: -6.951743125915527
    6. 'és' → logprob: -7.076743125915527
    7. '��' → logprob: -7.326743125915527
    8. '©' → logprob: -9.076743125915527
    9. 'ec' → logprob: -9.326743125915527
    10. 'ect' → logprob: -9.951743125915527

Token 85: 'ifs' (ID: 14119)
  Prédit: 'ifs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ifs' → logprob: -0.04346418380737305
    2. 'ivement' → logprob: -3.543464183807373
    3. 's' → logprob: -5.543464183807373
    4. '```' → logprob: -5.668464183807373
    5. '#' → logprob: -6.543464183807373
    6. 'if' → logprob: -6.918464183807373
    7. 'i' → logprob: -7.668464183807373
    8. 'es' → logprob: -7.918464183807373
    9. 'ives' → logprob: -7.980964183807373
    10. '``' → logprob: -8.793464660644531

Token 86: ' pour' (ID: 1930)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -1.1524769067764282
    2. ':' → logprob: -1.4024769067764282
    3. '#' → logprob: -2.2774767875671387
    4. '.' → logprob: -2.6524767875671387
    5. ' pour' → logprob: -2.9024767875671387
    6. '```' → logprob: -2.9024767875671387
    7. ' ' → logprob: -3.4024767875671387
    8. ' :' → logprob: -3.6524767875671387
    9. ',' → logprob: -4.152476787567139
    10. ' ' → logprob: -4.152476787567139

Token 87: ' gagner' (ID: 64227)
  Prédit: 'g'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'g' → logprob: -0.3732703924179077
    2. ' gagner' → logprob: -1.2482703924179077
    3. ' rem' → logprob: -4.998270511627197
    4. 'rem' → logprob: -5.748270511627197
    5. ' ' → logprob: -5.873270511627197
    6. ' l' → logprob: -6.373270511627197
    7. 'prendre' → logprob: -6.748270511627197
    8. ' g' → logprob: -6.998270511627197
    9. ' ' → logprob: -7.123270511627197
    10. 'l' → logprob: -7.373270511627197

Token 88: '.
' (ID: 558)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.15758489072322845
    2. '```' → logprob: -2.9075849056243896
    3. '

' → logprob: -4.0325846672058105
    4. '
' → logprob: -4.1575846672058105
    5. ' 

' → logprob: -4.5325846672058105
    6. '#' → logprob: -4.5325846672058105
    7. '\' → logprob: -4.6575846672058105
    8. ' ' → logprob: -5.0325846672058105
    9. ' def' → logprob: -5.2825846672058105
    10. ':' → logprob: -5.2825846672058105

Token 89: '#' (ID: 2)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.4125734865665436
    2. '#' → logprob: -2.2875735759735107
    3. '\' → logprob: -2.7875735759735107
    4. '
' → logprob: -3.4125735759735107
    5. '

' → logprob: -3.4125735759735107
    6. '```' → logprob: -3.5375735759735107
    7. ' ' → logprob: -3.9125735759735107
    8. '\n' → logprob: -4.412573337554932
    9. ' 

' → logprob: -4.537573337554932
    10. 'import' → logprob: -4.787573337554932

Token 90: ' -' (ID: 533)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.562277615070343
    2. '#' → logprob: -1.0622775554656982
    3. '```' → logprob: -3.5622775554656982
    4. '
' → logprob: -4.312277793884277
    5. 'import' → logprob: -4.562277793884277
    6. '

' → logprob: -4.812277793884277
    7. 'd' → logprob: -5.062277793884277
    8. '\' → logprob: -5.062277793884277
    9. ' 

' → logprob: -5.687277793884277
    10. ' 
' → logprob: -6.187277793884277

Token 91: ' Si' (ID: 7832)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.4694400727748871
    2. 'def' → logprob: -1.2194401025772095
    3. ' def' → logprob: -4.09443998336792
    4. ' #' → logprob: -4.21943998336792
    5. 'import' → logprob: -4.59443998336792
    6. 'Voici' → logprob: -4.84443998336792
    7. 'Si' → logprob: -6.09443998336792
    8. 'Le' → logprob: -6.21943998336792
    9. 'Pour' → logprob: -6.46943998336792
    10. '```' → logprob: -6.46943998336792

Token 92: ' après' (ID: 16460)
  Prédit: ' un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.9641054272651672
    2. 'un' → logprob: -2.0891053676605225
    3. 'l' → logprob: -2.4641053676605225
    4. ' l' → logprob: -2.5891053676605225
    5. ' les' → logprob: -2.7141053676605225
    6. ' le' → logprob: -2.8391053676605225
    7. 'les' → logprob: -2.8391053676605225
    8. 'le' → logprob: -2.9641053676605225
    9. ' la' → logprob: -3.9641053676605225
    10. 'une' → logprob: -4.339105606079102

Token 93: ' ' (ID: 220)
  Prédit: ' un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.5598663091659546
    2. ' ' → logprob: -1.8098663091659546
    3. ' une' → logprob: -2.684866428375244
    4. 'un' → logprob: -3.184866428375244
    5. ' égal' → logprob: -3.184866428375244
    6. '4' → logprob: -3.934866428375244
    7. 'une' → logprob: -4.184866428375244
    8. ' avoir' → logprob: -4.309866428375244
    9. ' atteindre' → logprob: -4.809866428375244
    10. ' l' → logprob: -5.184866428375244

Token 94: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.09093254804611206
    2. 'un' → logprob: -3.465932607650757
    3. 'de' → logprob: -4.340932369232178
    4. 'l' → logprob: -4.465932369232178
    5. 'une' → logprob: -4.465932369232178
    6. 'égalité' → logprob: -5.340932369232178
    7. 'égal' → logprob: -5.590932369232178
    8. '40' → logprob: -6.090932369232178
    9. '5' → logprob: -6.590932369232178
    10. 'le' → logprob: -6.840932369232178

Token 95: '-' (ID: 12)
  Prédit: ' points'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' points' → logprob: -0.7363011240959167
    2. '-' → logprob: -0.9863011240959167
    3. '-p' → logprob: -2.2363011837005615
    4. '0' → logprob: -4.361300945281982
    5. ' point' → logprob: -5.236300945281982
    6. '-point' → logprob: -5.236300945281982
    7. '4' → logprob: -5.361300945281982
    8. 'points' → logprob: -5.736300945281982
    9. '点' → logprob: -6.486300945281982
    10. '#' → logprob: -6.736300945281982

Token 96: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.00015908108616713434
    2. '-' → logprob: -9.62515926361084
    3. ' ' → logprob: -9.62515926361084
    4. '４' → logprob: -11.68765926361084
    5. '

' → logprob: -13.00015926361084
    6. ',' → logprob: -13.43765926361084
    7. '' → logprob: -13.81265926361084
    8. '```' → logprob: -13.87515926361084
    9. '5' → logprob: -14.06265926361084
    10. '#' → logprob: -14.12515926361084

Token 97: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.09497783333063126
    2. ' l' → logprob: -4.344977855682373
    3. ' ,' → logprob: -4.469977855682373
    4. ' on' → logprob: -4.719977855682373
    5. ' le' → logprob: -4.844977855682373
    6. ' la' → logprob: -4.844977855682373
    7. ' égal' → logprob: -4.969977855682373
    8. ' c' → logprob: -5.344977855682373
    9. 'l' → logprob: -5.344977855682373
    10. 'c' → logprob: -5.844977855682373

Token 98: ' les' (ID: 1341)
  Prédit: ' un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.6225858330726624
    2. ' le' → logprob: -1.4975857734680176
    3. ' la' → logprob: -2.7475857734680176
    4. ' l' → logprob: -3.1225857734680176
    5. ' les' → logprob: -3.2475857734680176
    6. 'le' → logprob: -3.8725857734680176
    7. ' on' → logprob: -3.9975857734680176
    8. 'un' → logprob: -4.747585773468018
    9. ' aucun' → logprob: -4.747585773468018
    10. ' ' → logprob: -5.497585773468018

Token 99: ' joueurs' (ID: 56340)
  Prédit: ' points'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' points' → logprob: -0.7026987671852112
    2. 'points' → logprob: -1.8276987075805664
    3. ' scores' → logprob: -2.0776987075805664
    4. ' joueurs' → logprob: -2.2026987075805664
    5. 'scores' → logprob: -3.2026987075805664
    6. ' deux' → logprob: -3.7026987075805664
    7. 'jou' → logprob: -4.077698707580566
    8. 'de' → logprob: -4.327698707580566
    9. '#' → logprob: -5.577698707580566
    10. 'score' → logprob: -6.202698707580566

Token 100: ' mar' (ID: 2674)
  Prédit: ' continu'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' continu' → logprob: -0.9055960774421692
    2. ' sont' → logprob: -1.1555960178375244
    3. 'ont' → logprob: -2.6555960178375244
    4. ' restent' → logprob: -2.7805960178375244
    5. 'contin' → logprob: -3.5305960178375244
    6. 's' → logprob: -3.5305960178375244
    7. '#' → logprob: -4.5305962562561035
    8. ' mar' → logprob: -4.7805962562561035
    9. 'continu' → logprob: -4.9055962562561035
    10. ' ont' → logprob: -5.1555962562561035

Token 101: 'quent' (ID: 13238)
  Prédit: 'quent'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'quent' → logprob: -0.0036003058776259422
    2. 'que' → logprob: -6.628600120544434
    3. 'qu' → logprob: -6.753600120544434
    4. '#' → logprob: -8.128600120544434
    5. '   ' → logprob: -9.128600120544434
    6. '```' → logprob: -9.378600120544434
    7. 'q' → logprob: -9.628600120544434
    8. '\xef\xbd' → logprob: -9.878600120544434
    9. '`' → logprob: -9.878600120544434
    10. '``' → logprob: -10.128600120544434

Token 102: ' chacun' (ID: 52136)
  Prédit: ' des'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' des' → logprob: -0.26229995489120483
    2. ' un' → logprob: -2.2623000144958496
    3. ' deux' → logprob: -3.3873000144958496
    4. ' le' → logprob: -4.01230001449585
    5. 'des' → logprob: -4.51230001449585
    6. 'le' → logprob: -4.76230001449585
    7. 'un' → logprob: -4.76230001449585
    8. ' ' → logprob: -4.76230001449585
    9. ' alternativ' → logprob: -5.01230001449585
    10. ' à' → logprob: -5.26230001449585

Token 103: ' un' (ID: 537)
  Prédit: ' un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.7323545813560486
    2. 'un' → logprob: -0.9823545813560486
    3. ' encore' → logprob: -3.3573546409606934
    4. '1' → logprob: -3.6073546409606934
    5. 'le' → logprob: -3.8573546409606934
    6. ' ' → logprob: -3.9823546409606934
    7. ' le' → logprob: -4.607354640960693
    8. ' des' → logprob: -4.982354640960693
    9. 'les' → logprob: -5.857354640960693
    10. ' deux' → logprob: -5.857354640960693

Token 104: ' point' (ID: 2438)
  Prédit: ' point'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' point' → logprob: -0.02700626477599144
    2. 'point' → logprob: -3.652006149291992
    3. '_point' → logprob: -8.652006149291992
    4. ' points' → logprob: -9.839506149291992
    5. ' ' → logprob: -10.089506149291992
    6. '	point' → logprob: -10.089506149291992
    7. ' avantage' → logprob: -10.277006149291992
    8. ' de' → logprob: -10.339506149291992
    9. ' ' → logprob: -10.464506149291992
    10. 'e' → logprob: -10.589506149291992

Token 105: ' (' (ID: 350)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.04823550954461098
    2. ' ,' → logprob: -3.9232354164123535
    3. 's' → logprob: -4.2982354164123535
    4. ' de' → logprob: -6.1732354164123535
    5. ' supplémentaire' → logprob: -6.6732354164123535
    6. 'de' → logprob: -7.1732354164123535
    7. ' supplémentaires' → logprob: -7.2982354164123535
    8. ' ' → logprob: -7.2982354164123535
    9. 'à' → logprob: -7.4232354164123535
    10. ' (' → logprob: -7.7357354164123535

Token 106: '5' (ID: 20)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.605298638343811
    2. '4' → logprob: -1.480298638343811
    3. ' ),' → logprob: -3.6052985191345215
    4. '),' → logprob: -3.8552985191345215
    5. ' la' → logprob: -3.9802985191345215
    6. '5' → logprob: -4.1052985191345215
    7. ' le' → logprob: -4.1052985191345215
    8. ' c' → logprob: -4.7302985191345215
    9. ')' → logprob: -4.8552985191345215
    10. ' un' → logprob: -4.9802985191345215

Token 107: '-' (ID: 12)
  Prédit: '-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.0021995019633322954
    2. ' -' → logprob: -7.127199649810791
    3. '5' → logprob: -7.627199649810791
    4. '6' → logprob: -8.377199172973633
    5. '–' → logprob: -8.752199172973633
    6. '−' → logprob: -8.877199172973633
    7. '‑' → logprob: -9.877199172973633
    8. '－' → logprob: -9.877199172973633
    9. '4' → logprob: -10.377199172973633
    10. '‐' → logprob: -10.502199172973633

Token 108: '5' (ID: 20)
  Prédit: '5'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.00036787090357393026
    2. '4' → logprob: -8.000368118286133
    3. ' ' → logprob: -10.625368118286133
    4. '５' → logprob: -12.625368118286133
    5. '6' → logprob: -13.250368118286133
    6. '	' → logprob: -14.750368118286133
    7. '-' → logprob: -15.062868118286133
    8. '#' → logprob: -15.250368118286133
    9. '' → logprob: -15.937868118286133
    10. '

' → logprob: -16.000368118286133

Token 109: '),' (ID: 936)
  Prédit: '),'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '),' → logprob: -0.012223419733345509
    2. ' ),' → logprob: -5.012223243713379
    3. ',' → logprob: -5.512223243713379
    4. ')' → logprob: -6.762223243713379
    5. ' puis' → logprob: -8.887223243713379
    6. '#' → logprob: -10.137223243713379
    7. ' ,' → logprob: -10.637223243713379
    8. ' et' → logprob: -11.262223243713379
    9. ' )' → logprob: -11.262223243713379
    10. ' ou' → logprob: -11.512223243713379

Token 110: ' c' (ID: 274)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '#' → logprob: -1.0449379682540894
    2. ' la' → logprob: -1.0449379682540894
    3. ' #' → logprob: -2.044938087463379
    4. ' le' → logprob: -2.294938087463379
    5. ' on' → logprob: -3.294938087463379
    6. ' il' → logprob: -4.544938087463379
    7. ' ' → logprob: -4.794938087463379
    8. 'le' → logprob: -5.794938087463379
    9. ' alors' → logprob: -6.044938087463379
    10. ' c' → logprob: -7.169938087463379

Token 111: '’est' (ID: 6838)
  Prédit: ''est'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''est' → logprob: -0.34856709837913513
    2. 'e' → logprob: -2.348567008972168
    3. '’est' → logprob: -2.723567008972168
    4. 'ela' → logprob: -2.973567008972168
    5. 'est' → logprob: -3.473567008972168
    6. ''' → logprob: -4.848567008972168
    7. 'a' → logprob: -5.223567008972168
    8. 'es' → logprob: -5.348567008972168
    9. 'ont' → logprob: -5.473567008972168
    10. 'omme' → logprob: -5.598567008972168

Token 112: ' un' (ID: 537)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -2.002603054046631
    2. ' une' → logprob: -2.127603054046631
    3. ' à' → logprob: -2.752603054046631
    4. ' l' → logprob: -2.877603054046631
    5. ' un' → logprob: -2.877603054046631
    6. ' égal' → logprob: -2.877603054046631
    7. ' recomm' → logprob: -3.002603054046631
    8. ' rep' → logprob: -3.127603054046631
    9. ' encore' → logprob: -3.252603054046631
    10. ' comme' → logprob: -3.252603054046631

Token 113: ' match' (ID: 3981)
  Prédit: 'score'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'score' → logprob: -1.9168130159378052
    2. 'égalité' → logprob: -2.1668128967285156
    3. '"' → logprob: -2.2918128967285156
    4. 'nul' → logprob: -2.7918128967285156
    5. 'jeu' → logprob: -2.7918128967285156
    6. 'de' → logprob: -2.9168128967285156
    7. ' match' → logprob: -3.1668128967285156
    8. 'é' → logprob: -3.1668128967285156
    9. ' "' → logprob: -3.1668128967285156
    10. 'e' → logprob: -3.2918128967285156

Token 114: ' nul' (ID: 64435)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.3333933353424072
    2. '#' → logprob: -2.3333933353424072
    3. '
' → logprob: -2.9583933353424072
    4. '

' → logprob: -3.0833933353424072
    5. '```' → logprob: -3.9583933353424072
    6. ' def' → logprob: -4.208393096923828
    7. ' ' → logprob: -4.208393096923828
    8. '\n' → logprob: -4.583393096923828
    9. '.' → logprob: -5.458393096923828
    10. '\' → logprob: -5.583393096923828

Token 115: '.
' (ID: 558)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.018458478152751923
    2. ' def' → logprob: -5.018458366394043
    3. '```' → logprob: -5.643458366394043
    4. '
' → logprob: -6.143458366394043
    5. 'import' → logprob: -6.518458366394043
    6. '#' → logprob: -6.518458366394043
    7. 'class' → logprob: -6.643458366394043
    8. '

' → logprob: -7.393458366394043
    9. '\' → logprob: -8.893458366394043
    10. ' ' → logprob: -9.018458366394043

Token 116: '#' (ID: 2)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.1783151626586914
    2. '#' → logprob: -2.4283151626586914
    3. '
' → logprob: -3.4283151626586914
    4. '

' → logprob: -3.6783151626586914
    5. '\n' → logprob: -5.428315162658691
    6. '\' → logprob: -5.428315162658691
    7. '```' → logprob: -5.553315162658691
    8. 'import' → logprob: -6.678315162658691
    9. ' 

' → logprob: -7.428315162658691
    10. ' 
' → logprob: -7.928315162658691

Token 117: ' Le' (ID: 2018)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.04271744564175606
    2. '
' → logprob: -3.917717456817627
    3. '

' → logprob: -4.917717456817627
    4. '#' → logprob: -5.167717456817627
    5. ' def' → logprob: -6.417717456817627
    6. 'class' → logprob: -6.667717456817627
    7. 'import' → logprob: -6.667717456817627
    8. '\' → logprob: -6.917717456817627
    9. '```' → logprob: -6.917717456817627
    10. ' 

' → logprob: -7.042717456817627

Token 118: ' problème' (ID: 35630)
  Prédit: ' code'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' code' → logprob: -0.8710926175117493
    2. ' ' → logprob: -1.3710925579071045
    3. ' #' → logprob: -1.7460925579071045
    4. ' score' → logprob: -3.2460925579071045
    5. ' ' → logprob: -3.2460925579071045
    6. ' joueur' → logprob: -3.8710925579071045
    7. '#' → logprob: -4.371092796325684
    8. ' def' → logprob: -4.746092796325684
    9. ' reste' → logprob: -5.371092796325684
    10. ' match' → logprob: -5.996092796325684

Token 119: ' :' (ID: 712)
  Prédit: ' est'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' est' → logprob: -1.5838723182678223
    2. ' continue' → logprob: -1.5838723182678223
    3. ' consiste' → logprob: -1.7088723182678223
    4. ' reste' → logprob: -2.4588723182678223
    5. '#' → logprob: -2.8338723182678223
    6. ' continues' → logprob: -3.3338723182678223
    7. ' semble' → logprob: -3.4588723182678223
    8. ' n' → logprob: -3.7088723182678223
    9. ' continu' → logprob: -4.083872318267822
    10. ' s' → logprob: -4.333872318267822

Token 120: ' donné' (ID: 52079)
  Prédit: ' def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' def' → logprob: -0.9937142133712769
    2. 'def' → logprob: -0.9937142133712769
    3. '#' → logprob: -2.1187143325805664
    4. ' #' → logprob: -2.7437143325805664
    5. ' continuer' → logprob: -3.6187143325805664
    6. ' ' → logprob: -4.493714332580566
    7. 'import' → logprob: -5.493714332580566
    8. ' définir' → logprob: -5.618714332580566
    9. ' code' → logprob: -5.743714332580566
    10. ' ' → logprob: -5.743714332580566

Token 121: ' un' (ID: 537)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.9260767698287964
    2. 's' → logprob: -1.9260767698287964
    3. 'def' → logprob: -2.301076889038086
    4. 'e' → logprob: -2.801076889038086
    5. ' la' → logprob: -2.801076889038086
    6. ' s' → logprob: -3.301076889038086
    7. ' def' → logprob: -3.551076889038086
    8. ' le' → logprob: -3.926076889038086
    9. '#' → logprob: -4.051076889038086
    10. ' un' → logprob: -4.176076889038086

Token 122: ' score' (ID: 8429)
  Prédit: 'score'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'score' → logprob: -0.6555929780006409
    2. ' score' → logprob: -1.280592918395996
    3. ' tableau' → logprob: -3.155592918395996
    4. 's' → logprob: -3.405592918395996
    5. 'texte' → logprob: -3.530592918395996
    6. ' joueur' → logprob: -4.405592918395996
    7. ' ' → logprob: -4.530592918395996
    8. 'es' → logprob: -4.530592918395996
    9. 'string' → logprob: -4.530592918395996
    10. ' string' → logprob: -4.780592918395996

Token 123: ' final' (ID: 1721)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.5852123498916626
    2. ' ,' → logprob: -0.9602123498916626
    3. ' ' → logprob: -3.960212230682373
    4. ' =' → logprob: -4.460212230682373
    5. '_' → logprob: -5.585212230682373
    6. ' :' → logprob: -5.710212230682373
    7. ':' → logprob: -5.960212230682373
    8. ' s' → logprob: -5.960212230682373
    9. ' complet' → logprob: -5.960212230682373
    10. ' final' → logprob: -6.085212230682373

Token 124: ' (' (ID: 350)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.058971550315618515
    2. ' ,' → logprob: -2.933971643447876
    3. '```' → logprob: -7.433971405029297
    4. ' ' → logprob: -7.558971405029297
    5. ':' → logprob: -7.558971405029297
    6. ' (' → logprob: -7.808971405029297
    7. ' complet' → logprob: -8.308971405029297
    8. ' final' → logprob: -8.433971405029297
    9. '=' → logprob: -8.558971405029297
    10. 'final' → logprob: -8.808971405029297

Token 125: 'j' (ID: 73)
  Prédit: ' ),'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ),' → logprob: -0.7988574504852295
    2. ' )' → logprob: -0.9238574504852295
    3. ')' → logprob: -2.2988574504852295
    4. '),' → logprob: -3.6738574504852295
    5. ' ' → logprob: -4.048857688903809
    6. ' ,' → logprob: -6.048857688903809
    7. ',' → logprob: -6.548857688903809
    8. ' ):' → logprob: -6.798857688903809
    9. ' s' → logprob: -7.173857688903809
    10. ' n' → logprob: -7.173857688903809

Token 126: ',' (ID: 11)
  Prédit: 'u'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'u' → logprob: -1.1489689350128174
    2. 'oueur' → logprob: -1.1489689350128174
    3. 'o' → logprob: -2.2739689350128174
    4. 'e' → logprob: -2.3989689350128174
    5. '_' → logprob: -2.5239689350128174
    6. 'a' → logprob: -3.2739689350128174
    7. ')' → logprob: -4.773968696594238
    8. 'us' → logprob: -5.023968696594238
    9. 'uste' → logprob: -5.273968696594238
    10. 'ou' → logprob: -5.523968696594238

Token 127: ' y' (ID: 342)
  Prédit: ' k'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' k' → logprob: -0.5822061896324158
    2. 'k' → logprob: -1.2072062492370605
    3. ' i' → logprob: -2.7072062492370605
    4. 'i' → logprob: -4.0822062492370605
    5. ' s' → logprob: -4.0822062492370605
    6. ',' → logprob: -4.9572062492370605
    7. ' y' → logprob: -5.3322062492370605
    8. ' ,' → logprob: -5.4572062492370605
    9. ' j' → logprob: -5.5822062492370605
    10. ' l' → logprob: -5.7072062492370605

Token 128: '),' (ID: 936)
  Prédit: '),'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '),' → logprob: -0.26574552059173584
    2. '):' → logprob: -1.8907455205917358
    3. ')' → logprob: -3.3907456398010254
    4. '):
' → logprob: -3.7657456398010254
    5. ' ),' → logprob: -4.390745639801025
    6. '):

' → logprob: -5.265745639801025
    7. ',' → logprob: -5.515745639801025
    8. '):
' → logprob: -6.640745639801025
    9. ' ):' → logprob: -7.515745639801025
    10. 'u' → logprob: -8.015745162963867

Token 129: ' trouver' (ID: 23195)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.0793853998184204
    2. ' continuer' → logprob: -1.9543853998184204
    3. ' #' → logprob: -2.079385280609131
    4. ' il' → logprob: -2.079385280609131
    5. ' calcul' → logprob: -3.329385280609131
    6. ' ' → logprob: -3.329385280609131
    7. ' déterminer' → logprob: -3.454385280609131
    8. ' on' → logprob: -3.829385280609131
    9. ' compléter' → logprob: -3.829385280609131
    10. ' écrire' → logprob: -3.954385280609131

Token 130: ' et' (ID: 859)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.13175083696842194
    2. ' si' → logprob: -3.2567508220672607
    3. ' le' → logprob: -3.5067508220672607
    4. ' qui' → logprob: -4.13175106048584
    5. 'la' → logprob: -4.50675106048584
    6. ' ' → logprob: -5.00675106048584
    7. ' l' → logprob: -5.13175106048584
    8. 'le' → logprob: -5.38175106048584
    9. ' une' → logprob: -6.00675106048584
    10. ' ' → logprob: -6.63175106048584

Token 131: ' afficher' (ID: 146524)
  Prédit: ' afficher'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' afficher' → logprob: -0.4825485348701477
    2. 'aff' → logprob: -1.232548475265503
    3. 'print' → logprob: -3.857548475265503
    4. ' retourner' → logprob: -4.107548713684082
    5. ' print' → logprob: -4.357548713684082
    6. 'im' → logprob: -5.232548713684082
    7. '#' → logprob: -5.607548713684082
    8. ' impr' → logprob: -5.857548713684082
    9. ' #' → logprob: -5.982548713684082
    10. 'r' → logprob: -6.107548713684082

Token 132: ' toutes' (ID: 17502)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.05517416447401047
    2. ' l' → logprob: -4.055174350738525
    3. ' une' → logprob: -4.180174350738525
    4. ' le' → logprob: -4.805174350738525
    5. 'la' → logprob: -5.305174350738525
    6. ' ' → logprob: -5.805174350738525
    7. ' un' → logprob: -6.805174350738525
    8. 'le' → logprob: -7.180174350738525
    9. ' les' → logprob: -7.180174350738525
    10. ' ' → logprob: -7.680174350738525

Token 133: ' les' (ID: 1341)
  Prédit: ' les'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.05339128524065018
    2. 'les' → logprob: -3.178391218185425
    3. ' ' → logprob: -4.803391456604004
    4. ' l' → logprob: -7.428391456604004
    5. ' la' → logprob: -8.053391456604004
    6. '(' → logprob: -8.178391456604004
    7. ' ' → logprob: -8.178391456604004
    8. 'l' → logprob: -8.928391456604004
    9. 's' → logprob: -9.178391456604004
    10. ' possible' → logprob: -9.428391456604004

Token 134: ' sé' (ID: 7462)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.1653645783662796
    2. ' man' → logprob: -3.5403645038604736
    3. ' sequences' → logprob: -3.6653645038604736
    4. ' comb' → logprob: -3.9153645038604736
    5. ' poss' → logprob: -4.290364742279053
    6. ' possible' → logprob: -4.665364742279053
    7. ' solutions' → logprob: -4.665364742279053
    8. ' espaces' → logprob: -4.915364742279053
    9. ' possibilités' → logprob: -5.040364742279053
    10. ' possibles' → logprob: -5.415364742279053

Token 135: 'quences' (ID: 16559)
  Prédit: 'quences'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'quences' → logprob: -0.002258856315165758
    2. 'q' → logprob: -6.627258777618408
    3. '#' → logprob: -8.627259254455566
    4. 'qu' → logprob: -8.752259254455566
    5. 'ries' → logprob: -8.877259254455566
    6. 'quence' → logprob: -9.252259254455566
    7. '\' → logprob: -10.377259254455566
    8. '   ' → logprob: -10.627259254455566
    9. 'qs' → logprob: -10.627259254455566
    10. '```' → logprob: -10.627259254455566

Token 136: ' possibles' (ID: 97753)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -1.1326078176498413
    2. ' possibles' → logprob: -1.6326078176498413
    3. '_' → logprob: -2.007607936859131
    4. ' ' → logprob: -2.257607936859131
    5. ' _' → logprob: -2.382607936859131
    6. '_possible' → logprob: -2.632607936859131
    7. ' possible' → logprob: -3.007607936859131
    8. ' d' → logprob: -4.507607936859131
    9. 'possible' → logprob: -6.007607936859131
    10. ' suivantes' → logprob: -6.132607936859131

Token 137: ' de' (ID: 334)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6772253513336182
    2. ',' → logprob: -1.8022253513336182
    3. '_' → logprob: -2.677225351333618
    4. ':' → logprob: -2.927225351333618
    5. '```' → logprob: -3.052225351333618
    6. ''' → logprob: -3.677225351333618
    7. ' ,' → logprob: -3.802225351333618
    8. 's' → logprob: -4.302225112915039
    9. ' de' → logprob: -4.427225112915039
    10. ' (' → logprob: -4.677225112915039

Token 138: ' points' (ID: 5571)
  Prédit: ' points'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' points' → logprob: -0.07018028199672699
    2. ' scoring' → logprob: -4.445180416107178
    3. ' point' → logprob: -4.570180416107178
    4. ' score' → logprob: -4.570180416107178
    5. ' scores' → logprob: -4.570180416107178
    6. 'points' → logprob: -4.820180416107178
    7. ' ' → logprob: -5.070180416107178
    8. ' mar' → logprob: -6.445180416107178
    9. ' "' → logprob: -6.695180416107178
    10. ''' → logprob: -6.695180416107178

Token 139: ' (' (ID: 350)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.6940562129020691
    2. '_' → logprob: -1.6940562725067139
    3. ',' → logprob: -1.9440562725067139
    4. ''' → logprob: -3.444056272506714
    5. 's' → logprob: -3.819056272506714
    6. ':' → logprob: -3.819056272506714
    7. '#' → logprob: -4.319056034088135
    8. '```' → logprob: -4.444056034088135
    9. '(' → logprob: -4.569056034088135
    10. ' ,' → logprob: -4.819056034088135

Token 140: 'A' (ID: 32)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.9271411895751953
    2. ' )' → logprob: -0.9271411895751953
    3. ''' → logprob: -2.6771411895751953
    4. ')' → logprob: -2.8021411895751953
    5. ' de' → logprob: -4.552141189575195
    6. ' '' → logprob: -4.927141189575195
    7. ',' → logprob: -5.052141189575195
    8. ' ,' → logprob: -5.177141189575195
    9. 'jou' → logprob: -5.177141189575195
    10. 's' → logprob: -5.427141189575195

Token 141: '=' (ID: 28)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.478991150856018
    2. 'u' → logprob: -1.728991150856018
    3. 'f' → logprob: -2.2289910316467285
    4. 'c' → logprob: -2.4789910316467285
    5. '_' → logprob: -2.4789910316467285
    6. 'b' → logprob: -2.7289910316467285
    7. ' )' → logprob: -4.1039910316467285
    8. '[' → logprob: -4.2289910316467285
    9. ' ' → logprob: -4.2289910316467285
    10. ''' → logprob: -4.3539910316467285

Token 142: 'ジョ' (ID: 176394)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -0.3533274531364441
    2. '"' → logprob: -1.4783275127410889
    3. ' '' → logprob: -3.353327512741089
    4. ' "' → logprob: -3.978327512741089
    5. 'J' → logprob: -5.22832727432251
    6. 'j' → logprob: -5.85332727432251
    7. ''A' → logprob: -6.35332727432251
    8. '"A' → logprob: -6.85332727432251
    9. ' J' → logprob: -7.22832727432251
    10. ' ' → logprob: -7.60332727432251

Token 143: 'ウ' (ID: 21225)
  Prédit: 'ウ'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ウ' → logprob: -0.8786532282829285
    2. 'u' → logprob: -1.1286532878875732
    3. 'oueur' → logprob: -2.1286532878875732
    4. 'う' → logprob: -2.8786532878875732
    5. 'ou' → logprob: -4.003653049468994
    6. 'o' → logprob: -4.503653049468994
    7. '```' → logprob: -4.503653049468994
    8. '_u' → logprob: -5.628653049468994
    9. '）' → logprob: -5.753653049468994
    10. ')' → logprob: -5.753653049468994

Token 144: '君' (ID: 82180)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -1.2504867315292358
    2. 'u' → logprob: -1.3754867315292358
    3. ' ' → logprob: -2.3754868507385254
    4. '_' → logprob: -2.8754868507385254
    5. ' )' → logprob: -3.5004868507385254
    6. ' ' → logprob: -3.5004868507385254
    7. '）' → logprob: -3.6254868507385254
    8. ',' → logprob: -3.7504868507385254
    9. ' ,' → logprob: -4.125486850738525
    10. 'jou' → logprob: -4.437986850738525

Token 145: ' marque' (ID: 38644)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4965915381908417
    2. ',' → logprob: -1.371591567993164
    3. ''' → logprob: -2.871591567993164
    4. ' )' → logprob: -3.621591567993164
    5. '')' → logprob: -4.621591567993164
    6. ' ,' → logprob: -4.746591567993164
    7. '),' → logprob: -5.246591567993164
    8. ' ou' → logprob: -5.246591567993164
    9. 'A' → logprob: -5.871591567993164
    10. '）' → logprob: -6.246591567993164

Token 146: ',' (ID: 11)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7635751962661743
    2. ' )' → logprob: -1.2635751962661743
    3. ' ' → logprob: -2.2635750770568848
    4. 's' → logprob: -2.8885750770568848
    5. ',' → logprob: -3.1385750770568848
    6. ''' → logprob: -4.388575077056885
    7. ' ,' → logprob: -4.388575077056885
    8. '_' → logprob: -4.638575077056885
    9. 'u' → logprob: -5.763575077056885
    10. ' ' → logprob: -6.513575077056885

Token 147: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.11837336421012878
    2. ' B' → logprob: -2.243373394012451
    3. ''' → logprob: -5.993373394012451
    4. 'J' → logprob: -6.493373394012451
    5. ' ' → logprob: -7.743373394012451
    6. 'Y' → logprob: -7.868373394012451
    7. '"' → logprob: -8.743372917175293
    8. ' '' → logprob: -8.868372917175293
    9. ' J' → logprob: -9.743372917175293
    10. '"B' → logprob: -9.868372917175293

Token 148: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.17174379527568817
    2. ')' → logprob: -2.296743869781494
    3. ' =' → logprob: -3.171743869781494
    4. ' )' → logprob: -4.796743869781494
    5. ',' → logprob: -6.296743869781494
    6. ' ' → logprob: -6.671743869781494
    7. '='' → logprob: -7.046743869781494
    8. ''' → logprob: -7.171743869781494
    9. ')=' → logprob: -8.296743392944336
    10. 's' → logprob: -8.296743392944336

Token 149: 'ヤ' (ID: 53852)
  Prédit: 'ジョ'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ジョ' → logprob: -0.8306547999382019
    2. ' ジ' → logprob: -0.9556547999382019
    3. ''' → logprob: -2.4556548595428467
    4. ' '' → logprob: -2.8306548595428467
    5. 'A' → logprob: -4.830654621124268
    6. 'jou' → logprob: -5.455654621124268
    7. ' A' → logprob: -5.830654621124268
    8. 'B' → logprob: -6.205654621124268
    9. ' \xe3\x83' → logprob: -6.330654621124268
    10. ' "' → logprob: -6.455654621124268

Token 150: 'エ' (ID: 23760)
  Prédit: 'ウ'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ウ' → logprob: -0.1639588177204132
    2. 'ス' → logprob: -2.288958787918091
    3. 'エ' → logprob: -3.288958787918091
    4. 'コ' → logprob: -6.41395902633667
    5. 'ズ' → logprob: -6.53895902633667
    6. 'オ' → logprob: -6.66395902633667
    7. 'ゾ' → logprob: -6.78895902633667
    8. 'う' → logprob: -7.03895902633667
    9. 'マ' → logprob: -7.16395902633667
    10. 'ン' → logprob: -7.16395902633667

Token 151: 'さん' (ID: 14652)
  Prédit: 'さん'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'さん' → logprob: -0.7313286662101746
    2. '君' → logprob: -1.2313287258148193
    3. ' さん' → logprob: -2.3563287258148193
    4. ')' → logprob: -2.7313287258148193
    5. ' )' → logprob: -4.23132848739624
    6. 'く' → logprob: -4.48132848739624
    7. '_' → logprob: -4.73132848739624
    8. '）' → logprob: -5.10632848739624
    9. ' ）' → logprob: -5.10632848739624
    10. ' ' → logprob: -5.23132848739624

Token 152: ' marque' (ID: 38644)
  Prédit: ' )'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' )' → logprob: -0.4925919771194458
    2. ')' → logprob: -1.4925919771194458
    3. ' mar' → logprob: -2.1175918579101562
    4. 'mar' → logprob: -4.117591857910156
    5. ' ' → logprob: -4.492591857910156
    6. ' ' → logprob: -5.492591857910156
    7. ' ）' → logprob: -6.742591857910156
    8. '）' → logprob: -6.742591857910156
    9. ' ),' → logprob: -6.867591857910156
    10. ' marque' → logprob: -6.867591857910156

Token 153: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.024847203865647316
    2. ' )' → logprob: -4.149847030639648
    3. 's' → logprob: -4.774847030639648
    4. '):' → logprob: -8.524847030639648
    5. '')' → logprob: -10.524847030639648
    6. ' ' → logprob: -10.774847030639648
    7. ',' → logprob: -10.899847030639648
    8. 'es' → logprob: -11.274847030639648
    9. 'e' → logprob: -11.649847030639648
    10. ' ):' → logprob: -11.899847030639648

Token 154: ' men' (ID: 1966)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.43660780787467957
    2. ':' → logprob: -1.686607837677002
    3. '#' → logprob: -2.561607837677002
    4. '```' → logprob: -2.686607837677002
    5. '
' → logprob: -5.311607837677002
    6. '

' → logprob: -5.936607837677002
    7. ',' → logprob: -6.061607837677002
    8. 'import' → logprob: -6.186607837677002
    9. 'n' → logprob: -6.561607837677002
    10. ':
' → logprob: -6.686607837677002

Token 155: 'ant' (ID: 493)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 't' → logprob: -0.516646146774292
    2. 'ant' → logprob: -1.016646146774292
    3. 'u' → logprob: -3.891646146774292
    4. 'ent' → logprob: -4.641646385192871
    5. 'é' → logprob: -6.141646385192871
    6. 'e' → logprob: -6.141646385192871
    7. 'tion' → logprob: -6.516646385192871
    8. 'a' → logprob: -7.016646385192871
    9. 'ée' → logprob: -7.141646385192871
    10. 'aient' → logprob: -7.141646385192871

Token 156: ' de' (ID: 334)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.99018394947052
    2. ' à' → logprob: -1.24018394947052
    3. ' au' → logprob: -1.36518394947052
    4. 'au' → logprob: -2.7401838302612305
    5. 'à' → logprob: -4.4901838302612305
    6. '_' → logprob: -6.2401838302612305
    7. ' a' → logprob: -6.7401838302612305
    8. '```' → logprob: -6.9901838302612305
    9. ' ' → logprob: -7.2401838302612305
    10. ' to' → logprob: -7.3651838302612305

Token 157: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.008332413621246815
    2. ' l' → logprob: -5.633332252502441
    3. ' la' → logprob: -6.633332252502441
    4. ''' → logprob: -7.133332252502441
    5. ' #' → logprob: -7.258332252502441
    6. ' '' → logprob: -7.383332252502441
    7. '  ' → logprob: -7.883332252502441
    8. '_' → logprob: -8.008332252502441
    9. 's' → logprob: -9.258332252502441
    10. 'l' → logprob: -9.508332252502441

Token 158: '0' (ID: 15)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.34212157130241394
    2. '0' → logprob: -1.9671216011047363
    3. 'l' → logprob: -2.7171216011047363
    4. ' la' → logprob: -3.7171216011047363
    5. ' l' → logprob: -3.8421216011047363
    6. 'la' → logprob: -4.467121601104736
    7. 'le' → logprob: -4.842121601104736
    8. '5' → logprob: -5.467121601104736
    9. '4' → logprob: -5.592121601104736
    10. 'un' → logprob: -6.217121601104736

Token 159: '-' (ID: 12)
  Prédit: '-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.7739525437355042
    2. ' ' → logprob: -1.7739524841308594
    3. ' à' → logprob: -1.8989524841308594
    4. '_' → logprob: -2.1489524841308594
    5. ',' → logprob: -3.0239524841308594
    6. '0' → logprob: -3.5239524841308594
    7. 'à' → logprob: -4.648952484130859
    8. ' -' → logprob: -5.273952484130859
    9. ' _' → logprob: -5.648952484130859
    10. '  
' → logprob: -6.023952484130859

Token 160: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.00441112881526351
    2. '-' → logprob: -6.129411220550537
    3. ' ' → logprob: -6.254411220550537
    4. '4' → logprob: -9.004410743713379
    5. 'à' → logprob: -9.379410743713379
    6. ' à' → logprob: -9.629410743713379
    7. ' -' → logprob: -11.379410743713379
    8. '5' → logprob: -13.379410743713379
    9. '-à' → logprob: -13.504410743713379
    10. ' ' → logprob: -13.754410743713379

Token 161: ' à' (ID: 1221)
  Prédit: ' à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.06506208330392838
    2. 'à' → logprob: -3.9400620460510254
    3. ' ' → logprob: -4.315062046051025
    4. ' au' → logprob: -4.690062046051025
    5. ' jusqu' → logprob: -4.940062046051025
    6. ',' → logprob: -5.815062046051025
    7. 'au' → logprob: -6.065062046051025
    8. '```' → logprob: -6.690062046051025
    9. ':' → logprob: -6.940062046051025
    10. ' a' → logprob: -7.190062046051025

Token 162: ' ce' (ID: 2357)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' la' → logprob: -0.44161590933799744
    2. ' ' → logprob: -1.6916159391403198
    3. ' l' → logprob: -2.4416158199310303
    4. ' un' → logprob: -3.8166158199310303
    5. 'l' → logprob: -3.9416158199310303
    6. ' ce' → logprob: -4.191616058349609
    7. ' une' → logprob: -4.316616058349609
    8. 'la' → logprob: -4.566616058349609
    9. 'un' → logprob: -7.566616058349609
    10. ' '' → logprob: -7.566616058349609

Token 163: ' score' (ID: 8429)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8954558968544006
    2. ' ' → logprob: -1.2704558372497559
    3. ' score' → logprob: -1.7704558372497559
    4. '_' → logprob: -3.395455837249756
    5. ' point' → logprob: -4.145455837249756
    6. 'u' → logprob: -4.395455837249756
    7. 's' → logprob: -4.645455837249756
    8. ' final' → logprob: -4.770455837249756
    9. '```' → logprob: -5.395455837249756
    10. 'ur' → logprob: -5.520455837249756

Token 164: ',' (ID: 11)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.4483981132507324
    2. ':' → logprob: -1.3233981132507324
    3. '```' → logprob: -3.4483981132507324
    4. '#' → logprob: -3.9483981132507324
    5. ' ' → logprob: -4.698398113250732
    6. '
' → logprob: -4.823398113250732
    7. '

' → logprob: -5.323398113250732
    8. ')' → logprob: -5.823398113250732
    9. ',' → logprob: -6.073398113250732
    10. 'd' → logprob: -6.198398113250732

Token 165: ' selon' (ID: 27571)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.012396035715937614
    2. ' #' → logprob: -6.012395858764648
    3. '#' → logprob: -6.137395858764648
    4. 'def' → logprob: -6.512395858764648
    5. ''' → logprob: -7.387395858764648
    6. ' ' → logprob: -7.387395858764648
    7. ' def' → logprob: -7.512395858764648
    8. ' en' → logprob: -7.637395858764648
    9. '[' → logprob: -7.637395858764648
    10. ',' → logprob: -7.887395858764648

Token 166: ' les' (ID: 1341)
  Prédit: ' l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' l' → logprob: -0.8176500797271729
    2. ' la' → logprob: -1.1926500797271729
    3. ' les' → logprob: -1.4426500797271729
    4. ' le' → logprob: -4.317649841308594
    5. ' ' → logprob: -5.817649841308594
    6. 'les' → logprob: -7.317649841308594
    7. ' ' → logprob: -7.817649841308594
    8. 'l' → logprob: -8.192649841308594
    9. 'le' → logprob: -8.567649841308594
    10. ' leur' → logprob: -8.567649841308594

Token 167: ' règles' (ID: 67042)
  Prédit: ' règles'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' règles' → logprob: -0.09973065555095673
    2. 'r' → logprob: -2.4747307300567627
    3. ' r' → logprob: -4.849730491638184
    4. ' mêmes' → logprob: -7.099730491638184
    5. ' critères' → logprob: -7.724730491638184
    6. ' espaces' → logprob: -8.224730491638184
    7. ' rules' → logprob: -8.474730491638184
    8. 'esp' → logprob: -8.724730491638184
    9. '#' → logprob: -8.724730491638184
    10. ' contraintes' → logprob: -9.099730491638184

Token 168: '.

' (ID: 364)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.06983749568462372
    2. ':' → logprob: -3.5698375701904297
    3. '```' → logprob: -3.9448375701904297
    4. '#' → logprob: -4.69483757019043
    5. 'import' → logprob: -6.31983757019043
    6. '
' → logprob: -6.44483757019043
    7. ' def' → logprob: -6.81983757019043
    8. ',' → logprob: -7.19483757019043
    9. '

' → logprob: -7.19483757019043
    10. 'd' → logprob: -7.31983757019043

Token 169: 'def' (ID: 1314)
  Prédit: 'def'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.5799651741981506
    2. ' ' → logprob: -1.0799651145935059
    3. 'd' → logprob: -3.704965114593506
    4. '```' → logprob: -3.954965114593506
    5. '#' → logprob: -4.329965114593506
    6. ':' → logprob: -5.079965114593506
    7. 'A' → logprob: -5.454965114593506
    8. ' def' → logprob: -5.454965114593506
    9. '(' → logprob: -5.454965114593506
    10. ',' → logprob: -5.579965114593506

Token 170: ' tennis' (ID: 33595)
  Prédit: ' possible'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' possible' → logprob: -1.035457968711853
    2. ' find' → logprob: -1.160457968711853
    3. ' generate' → logprob: -2.0354580879211426
    4. ' tennis' → logprob: -2.9104580879211426
    5. ' sequences' → logprob: -2.9104580879211426
    6. ' trouver' → logprob: -3.1604580879211426
    7. ' all' → logprob: -4.535458087921143
    8. ' enumerate' → logprob: -5.660458087921143
    9. ' solve' → logprob: -5.660458087921143
    10. ' calcul' → logprob: -5.785458087921143

Token 171: '_paths' (ID: 56992)
  Prédit: '_score'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_score' → logprob: -0.00925848726183176
    2. '_' → logprob: -5.259258270263672
    3. '_match' → logprob: -5.884258270263672
    4. '_scores' → logprob: -7.009258270263672
    5. '(score' → logprob: -9.134258270263672
    6. '_game' → logprob: -10.259258270263672
    7. '_(' → logprob: -10.259258270263672
    8. '(' → logprob: -10.259258270263672
    9. '_sc' → logprob: -10.634258270263672
    10. '_s' → logprob: -11.259258270263672

Token 172: '(j' (ID: 4997)
  Prédit: '(j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(j' → logprob: -0.491421639919281
    2. '(' → logprob: -0.991421639919281
    3. '(n' → logprob: -4.491421699523926
    4. '(score' → logprob: -5.741421699523926
    5. ' (' → logprob: -7.116421699523926
    6. '(s' → logprob: -7.491421699523926
    7. '(start' → logprob: -7.991421699523926
    8. '(i' → logprob: -7.991421699523926
    9. '(num' → logprob: -8.866421699523926
    10. '_' → logprob: -9.991421699523926

Token 173: '_target' (ID: 24705)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.3570764362812042
    2. '):' → logprob: -1.2320764064788818
    3. ')' → logprob: -6.232076644897461
    4. ':' → logprob: -6.732076644897461
    5. ' ,' → logprob: -6.857076644897461
    6. 'u' → logprob: -7.232076644897461
    7. ',j' → logprob: -7.482076644897461
    8. 's' → logprob: -7.857076644897461
    9. ' ):' → logprob: -7.857076644897461
    10. '_scores' → logprob: -8.232076644897461

Token 174: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0004408015520311892
    2. ' ,' → logprob: -7.87544059753418
    3. ',j' → logprob: -9.87544059753418
    4. ',y' → logprob: -12.00044059753418
    5. ':' → logprob: -14.25044059753418
    6. ' ' → logprob: -14.75044059753418
    7. ',b' → logprob: -14.75044059753418
    8. '_,' → logprob: -15.12544059753418
    9. ',int' → logprob: -15.12544059753418
    10. ':int' → logprob: -15.62544059753418

Token 175: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.0297523383051157
    2. ' y' → logprob: -3.529752254486084
    3. '	y' → logprob: -13.779752731323242
    4. ' ' → logprob: -14.529752731323242
    5. '   ' → logprob: -15.279752731323242
    6. '  ' → logprob: -16.404752731323242
    7. 'yj' → logprob: -17.779752731323242
    8. 'Y' → logprob: -18.029752731323242
    9. ' ' → logprob: -18.279752731323242
    10. ''y' → logprob: -18.404752731323242

Token 176: '_target' (ID: 24705)
  Prédit: '_target'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_target' → logprob: -7.493430894101039e-05
    2. 'target' → logprob: -10.500075340270996
    3. '_' → logprob: -10.625075340270996
    4. ')_' → logprob: -11.875075340270996
    5. '_targets' → logprob: -12.375075340270996
    6. '):' → logprob: -12.625075340270996
    7. ')' → logprob: -12.625075340270996
    8. '_score' → logprob: -12.875075340270996
    9. '_TARGET' → logprob: -14.000075340270996
    10. '_goal' → logprob: -15.250075340270996

Token 177: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.00022558939235750586
    2. ',' → logprob: -9.250226020812988
    3. '):
' → logprob: -9.500226020812988
    4. ':' → logprob: -10.500226020812988
    5. ')' → logprob: -10.750226020812988
    6. ' ):' → logprob: -12.375226020812988
    7. '):
' → logprob: -14.625226020812988
    8. '():' → logprob: -15.750226020812988
    9. ')：' → logprob: -15.875226020812988
    10. '   ' → logprob: -16.250225067138672

Token 178: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.27740055322647095
    2. '
' → logprob: -1.5274004936218262
    3. ' 
' → logprob: -4.527400493621826
    4. '    
' → logprob: -4.652400493621826
    5. '\n' → logprob: -7.152400493621826
    6. '	
' → logprob: -7.277400493621826
    7. 'n' → logprob: -7.652400493621826
    8. '	n' → logprob: -7.902400493621826
    9. '  
' → logprob: -7.902400493621826
    10. '```' → logprob: -7.902400493621826

Token 179: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6432185173034668
    2. ' from' → logprob: -1.1432185173034668
    3. 'from' → logprob: -2.518218517303467
    4. ' paths' → logprob: -2.768218517303467
    5. 'paths' → logprob: -4.893218517303467
    6. ' sequences' → logprob: -6.268218517303467
    7. ' if' → logprob: -7.143218517303467
    8. ' ' → logprob: -7.643218517303467
    9. 'def' → logprob: -8.018218994140625
    10. '    
' → logprob: -8.143218994140625

Token 180: ' On' (ID: 2160)
  Prédit: 'from'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'from' → logprob: -0.5524522662162781
    2. ' from' → logprob: -1.3024523258209229
    3. '   ' → logprob: -2.802452325820923
    4. ' if' → logprob: -3.427452325820923
    5. 'if' → logprob: -3.927452325820923
    6. 'dp' → logprob: -4.427452087402344
    7. 'paths' → logprob: -4.802452087402344
    8. ' paths' → logprob: -4.927452087402344
    9. ' sequences' → logprob: -5.427452087402344
    10. 'def' → logprob: -5.927452087402344

Token 181: ' cherche' (ID: 52345)
  Prédit: '_paths'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_paths' → logprob: -0.9613597393035889
    2. ' paths' → logprob: -1.2113597393035889
    3. '   ' → logprob: -1.4613597393035889
    4. ' from' → logprob: -2.961359739303589
    5. 'paths' → logprob: -4.586359977722168
    6. ' sequences' → logprob: -5.711359977722168
    7. 'from' → logprob: -5.836359977722168
    8. ' a' → logprob: -6.336359977722168
    9. ' chemins' → logprob: -6.336359977722168
    10. '_' → logprob: -6.461359977722168

Token 182: ' toutes' (ID: 17502)
  Prédit: ' à'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -1.0304968357086182
    2. ' toutes' → logprob: -1.5304968357086182
    3. '   ' → logprob: -1.6554968357086182
    4. '    ' → logprob: -2.530496835708618
    5. ' les' → logprob: -3.280496835708618
    6. ' all' → logprob: -3.655496835708618
    7. 'def' → logprob: -4.155496597290039
    8. '  ' → logprob: -4.280496597290039
    9. ' des' → logprob: -4.780496597290039
    10. ' "' → logprob: -4.905496597290039

Token 183: ' les' (ID: 1341)
  Prédit: ' les'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.2763153314590454
    2. '_' → logprob: -3.276315212249756
    3. ' ' → logprob: -3.276315212249756
    4. 'les' → logprob: -3.401315212249756
    5. '  ' → logprob: -3.651315212249756
    6. 'def' → logprob: -3.776315212249756
    7. ' ' → logprob: -4.026315212249756
    8. '_paths' → logprob: -4.276315212249756
    9. 'possible' → logprob: -4.901315212249756
    10. '   ' → logprob: -4.901315212249756

Token 184: ' sé' (ID: 7462)
  Prédit: ' sequences'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sequences' → logprob: -0.14974580705165863
    2. '_sequences' → logprob: -2.3997457027435303
    3. ' sé' → logprob: -3.8997457027435303
    4. '_' → logprob: -4.774745941162109
    5. ' chemins' → logprob: -5.649745941162109
    6. '_paths' → logprob: -5.649745941162109
    7. '_s' → logprob: -6.274745941162109
    8. ' ' → logprob: -6.399745941162109
    9. ' paths' → logprob: -6.774745941162109
    10. 's' → logprob: -7.024745941162109

Token 185: 'quences' (ID: 16559)
  Prédit: 'quences'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'quences' → logprob: -0.0003444024478085339
    2. 'q' → logprob: -8.625344276428223
    3. 'qu' → logprob: -10.250344276428223
    4. '_' → logprob: -10.375344276428223
    5. 'quence' → logprob: -10.375344276428223
    6. '_sequences' → logprob: -11.125344276428223
    7. '#' → logprob: -11.250344276428223
    8. '   ' → logprob: -11.625344276428223
    9. '-' → logprob: -11.875344276428223
    10. '```' → logprob: -12.125344276428223

Token 186: ' de' (ID: 334)
  Prédit: ' possibles'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' possibles' → logprob: -0.1344403773546219
    2. ' possible' → logprob: -3.2594404220581055
    3. '_possible' → logprob: -3.3844404220581055
    4. ' de' → logprob: -3.5094404220581055
    5. '   ' → logprob: -4.7594404220581055
    6. 'possible' → logprob: -4.8844404220581055
    7. ' =' → logprob: -6.3844404220581055
    8. ' ' → logprob: -6.8844404220581055
    9. '    ' → logprob: -7.2594404220581055
    10. ' posibles' → logprob: -7.3844404220581055

Token 187: ' '' (ID: 461)
  Prédit: 'points'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'points' → logprob: -0.4874606132507324
    2. ' points' → logprob: -0.9874606132507324
    3. 'score' → logprob: -5.362460613250732
    4. 'scores' → logprob: -5.737460613250732
    5. 'def' → logprob: -6.237460613250732
    6. ' scores' → logprob: -7.237460613250732
    7. ' score' → logprob: -7.612460613250732
    8. 'sc' → logprob: -8.11246109008789
    9. ' sequences' → logprob: -8.11246109008789
    10. 'str' → logprob: -8.11246109008789

Token 188: 'A' (ID: 32)
  Prédit: 'A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.27643001079559326
    2. 'points' → logprob: -1.9014300107955933
    3. 'AB' → logprob: -3.401430130004883
    4. ''' → logprob: -3.901430130004883
    5. ''A' → logprob: -4.276430130004883
    6. ' points' → logprob: -4.901430130004883
    7. ' A' → logprob: -5.526430130004883
    8. 'def' → logprob: -5.651430130004883
    9. '"A' → logprob: -5.776430130004883
    10. '"' → logprob: -6.026430130004883

Token 189: ''' (ID: 6)
  Prédit: '''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.047181256115436554
    2. ' '' → logprob: -3.4221813678741455
    3. '',' → logprob: -4.922181129455566
    4. ' ou' → logprob: -5.172181129455566
    5. 'ou' → logprob: -8.297181129455566
    6. ' or' → logprob: -9.297181129455566
    7. ' ',' → logprob: -10.422181129455566
    8. ' ' → logprob: -10.547181129455566
    9. ''or' → logprob: -10.922181129455566
    10. '','' → logprob: -11.047181129455566

Token 190: ' et' (ID: 859)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 191: ' '' (ID: 461)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.18025481700897217
    2. ' '' → logprob: -1.8052548170089722
    3. ''b' → logprob: -8.805254936218262
    4. ' B' → logprob: -9.055254936218262
    5. 'B' → logprob: -9.180254936218262
    6. ' ' → logprob: -10.180254936218262
    7. ' ' → logprob: -10.180254936218262
    8. '   ' → logprob: -10.555254936218262
    9. 'def' → logprob: -11.555254936218262
    10. ''D' → logprob: -12.805254936218262

Token 192: 'B' (ID: 33)
  Prédit: 'B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.12494174391031265
    2. ' B' → logprob: -2.249941825866699
    3. ''' → logprob: -4.499941825866699
    4. ' '' → logprob: -6.999941825866699
    5. ' ' → logprob: -11.3749418258667
    6. ' ' → logprob: -12.1249418258667
    7. '')' → logprob: -13.1249418258667
    8. ' ')' → logprob: -13.8749418258667
    9. '"B' → logprob: -14.4999418258667
    10. ''b' → logprob: -14.6249418258667

Token 193: ''' (ID: 6)
  Prédit: '''
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''' → logprob: -0.11477546393871307
    2. ' '' → logprob: -2.2397754192352295
    3. '   ' → logprob: -7.364775657653809
    4. ' qui' → logprob: -7.364775657653809
    5. ' ' → logprob: -8.489775657653809
    6. '',' → logprob: -9.364775657653809
    7. '')' → logprob: -9.614775657653809
    8. ' possibles' → logprob: -9.614775657653809
    9. ' pour' → logprob: -9.739775657653809
    10. ',' → logprob: -10.239775657653809

Token 194: ' qui' (ID: 2780)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04753268137574196
    2. ' qui' → logprob: -4.172532558441162
    3. ' possibles' → logprob: -4.297532558441162
    4. 'def' → logprob: -5.047532558441162
    5. ',' → logprob: -5.422532558441162
    6. ' def' → logprob: -6.672532558441162
    7. ' :' → logprob: -6.797532558441162
    8. ':' → logprob: -7.172532558441162
    9. ' possible' → logprob: -7.422532558441162
    10. ' ' → logprob: -7.547532558441162

Token 195: ' m' (ID: 284)
  Prédit: ' m'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' m' → logprob: -0.07504890859127045
    2. '   ' → logprob: -3.4500489234924316
    3. 'm' → logprob: -3.5750489234924316
    4. ' am' → logprob: -4.825048923492432
    5. ' permettent' → logprob: -6.325048923492432
    6. ' font' → logprob: -7.075048923492432
    7. '#' → logprob: -7.575048923492432
    8. ' mè' → logprob: -8.325048446655273
    9. ' mène' → logprob: -8.950048446655273
    10. ' représentent' → logprob: -9.075048446655273

Token 196: 'èn' (ID: 18534)
  Prédit: 'èn'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'èn' → logprob: -0.001431905198842287
    2. 'è' → logprob: -7.126431941986084
    3. 'ennent' → logprob: -7.876431941986084
    4. 'en' → logprob: -9.876431465148926
    5. '   ' → logprob: -10.001431465148926
    6. '`' → logprob: -10.251431465148926
    7. 'm' → logprob: -10.626431465148926
    8. 'enant' → logprob: -11.001431465148926
    9. '#' → logprob: -11.251431465148926
    10. 'ène' → logprob: -11.501431465148926

Token 197: 'ent' (ID: 299)
  Prédit: 'ent'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ent' → logprob: -0.7039719820022583
    2. 'èn' → logprob: -0.9539719820022583
    3. 'è' → logprob: -2.4539718627929688
    4. 'à' → logprob: -4.453971862792969
    5. '   ' → logprob: -4.953971862792969
    6. 'aient' → logprob: -5.203971862792969
    7. '`' → logprob: -5.703971862792969
    8. 'a' → logprob: -6.578971862792969
    9. ' à' → logprob: -6.828971862792969
    10. 'èrent' → logprob: -6.953971862792969

Token 198: ' de' (ID: 334)
  Prédit: ' à'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.4888565242290497
    2. ' au' → logprob: -1.363856554031372
    3. '   ' → logprob: -2.363856554031372
    4. ' de' → logprob: -4.113856315612793
    5. 'au' → logprob: -4.988856315612793
    6. ' ' → logprob: -5.363856315612793
    7. 'à' → logprob: -5.613856315612793
    8. ' du' → logprob: -6.113856315612793
    9. 'de' → logprob: -7.613856315612793
    10. '  ' → logprob: -7.738856315612793

Token 199: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.19373534619808197
    2. ' ' → logprob: -2.193735361099243
    3. '0' → logprob: -2.943735361099243
    4. '(' → logprob: -4.443735122680664
    5. ' [' → logprob: -9.568735122680664
    6. '   ' → logprob: -9.943735122680664
    7. ' la' → logprob: -10.318735122680664
    8. ' score' → logprob: -11.693735122680664
    9. ' ' → logprob: -11.943735122680664
    10. ' j' → logprob: -12.193735122680664

Token 200: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.02632816508412361
    2. ' ' → logprob: -3.6513280868530273
    3. ' (' → logprob: -11.276328086853027
    4. '(' → logprob: -11.401328086853027
    5. '   ' → logprob: -12.776328086853027
    6. ')' → logprob: -14.276328086853027
    7. '  ' → logprob: -15.401328086853027
    8. ',' → logprob: -16.151329040527344
    9. '    ' → logprob: -16.276329040527344
    10. ' ' → logprob: -16.401329040527344

Token 201: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.020880168303847313
    2. ' ,' → logprob: -3.8958802223205566
    3. '0' → logprob: -8.645879745483398
    4. '-' → logprob: -9.020879745483398
    5. ',
' → logprob: -10.770879745483398
    6. ' ' → logprob: -11.645879745483398
    7. ')' → logprob: -12.270879745483398
    8. ' -' → logprob: -13.520879745483398
    9. ' ,
' → logprob: -13.895879745483398
    10. '   ' → logprob: -14.020879745483398

Token 202: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.038047123700380325
    2. ' ' → logprob: -3.2880470752716064
    3. ',' → logprob: -12.788046836853027
    4. '   ' → logprob: -13.163046836853027
    5. '  ' → logprob: -14.663046836853027
    6. ' ' → logprob: -15.163046836853027
    7. ' ,' → logprob: -15.663046836853027
    8. '    ' → logprob: -16.288047790527344
    9. '```' → logprob: -16.788047790527344
    10. '     ' → logprob: -17.913047790527344

Token 203: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.015398927964270115
    2. ',' → logprob: -4.890398979187012
    3. ' )' → logprob: -5.015398979187012
    4. ' à' → logprob: -7.640398979187012
    5. '   ' → logprob: -7.890398979187012
    6. ' ,' → logprob: -8.890398979187012
    7. ' ' → logprob: -9.640398979187012
    8. '')' → logprob: -10.765398979187012
    9. ',)' → logprob: -10.890398979187012
    10. 'à' → logprob: -11.390398979187012

Token 204: ' à' (ID: 1221)
  Prédit: ' à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.1061420664191246
    2. '   ' → logprob: -2.481142044067383
    3. 'à' → logprob: -5.356142044067383
    4. ' ' → logprob: -5.481142044067383
    5. ',' → logprob: -5.731142044067383
    6. ' jusqu' → logprob: -5.981142044067383
    7. '  ' → logprob: -7.231142044067383
    8. ' au' → logprob: -7.356142044067383
    9. '    ' → logprob: -7.856142044067383
    10. ' aux' → logprob: -8.981142044067383

Token 205: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.03833121061325073
    2. '(j' → logprob: -3.2883312702178955
    3. '(' → logprob: -8.788331031799316
    4. ' j' → logprob: -9.663331031799316
    5. ' ' → logprob: -10.288331031799316
    6. '   ' → logprob: -10.913331031799316
    7. 'j' → logprob: -10.913331031799316
    8. '[j' → logprob: -13.663331031799316
    9. '  ' → logprob: -14.288331031799316
    10. '    ' → logprob: -14.913331031799316

Token 206: 'j' (ID: 73)
  Prédit: 'j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.115313321352005
    2. ' j' → logprob: -2.2403132915496826
    3. '0' → logprob: -6.365313529968262
    4. ' ' → logprob: -7.865313529968262
    5. ',' → logprob: -8.490313529968262
    6. ',j' → logprob: -9.740313529968262
    7. ')' → logprob: -10.115313529968262
    8. '   ' → logprob: -10.240313529968262
    9. ' ,' → logprob: -10.865313529968262
    10. '    ' → logprob: -12.615313529968262

Token 207: '_target' (ID: 24705)
  Prédit: '_target'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_target' → logprob: -0.16944155097007751
    2. '_,' → logprob: -2.4194414615631104
    3. ',' → logprob: -2.7944414615631104
    4. '_' → logprob: -6.2944416999816895
    5. ',_' → logprob: -6.2944416999816895
    6. ' ,' → logprob: -7.4194416999816895
    7. '_score' → logprob: -7.9194416999816895
    8. '   ' → logprob: -8.294441223144531
    9. '_point' → logprob: -8.294441223144531
    10. ',target' → logprob: -9.169441223144531

Token 208: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0006837221444584429
    2. ' ,' → logprob: -7.500683784484863
    3. '   ' → logprob: -9.625683784484863
    4. ',y' → logprob: -10.125683784484863
    5. ',j' → logprob: -10.875683784484863
    6. ' ' → logprob: -13.375683784484863
    7. ')' → logprob: -13.375683784484863
    8. ',
' → logprob: -14.000683784484863
    9. '  ' → logprob: -15.125683784484863
    10. '‌,' → logprob: -15.625683784484863

Token 209: ' y' (ID: 342)
  Prédit: ' y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.04859304800629616
    2. 'y' → logprob: -3.048593044281006
    3. '   ' → logprob: -12.923593521118164
    4. '    ' → logprob: -13.548593521118164
    5. '	y' → logprob: -14.298593521118164
    6. ' ' → logprob: -14.423593521118164
    7. ' ' → logprob: -15.173593521118164
    8. ',' → logprob: -15.673593521118164
    9. ',y' → logprob: -16.048593521118164
    10. '     ' → logprob: -16.423593521118164

Token 210: '_target' (ID: 24705)
  Prédit: '_target'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_target' → logprob: -0.0023246256168931723
    2. ')' → logprob: -6.62732458114624
    3. '   ' → logprob: -8.252325057983398
    4. ',' → logprob: -8.627325057983398
    5. 'arget' → logprob: -8.627325057983398
    6. 'target' → logprob: -8.877325057983398
    7. ')_' → logprob: -9.752325057983398
    8. '_' → logprob: -9.752325057983398
    9. '_current' → logprob: -10.377325057983398
    10. '  ' → logprob: -10.877325057983398

Token 211: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.011036385782063007
    2. '):' → logprob: -5.011036396026611
    3. '   ' → logprob: -6.011036396026611
    4. ' )' → logprob: -6.511036396026611
    5. ',' → logprob: -8.386035919189453
    6. '):
' → logprob: -9.636035919189453
    7. ' ):' → logprob: -10.886035919189453
    8. '),' → logprob: -11.386035919189453
    9. '')' → logprob: -11.511035919189453
    10. ')`' → logprob: -11.761035919189453

Token 212: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10543256253004074
    2. ':' → logprob: -2.3554325103759766
    3. ',' → logprob: -6.355432510375977
    4. ' :' → logprob: -6.355432510375977
    5. '):' → logprob: -7.480432510375977
    6. 'def' → logprob: -8.230432510375977
    7. '    
' → logprob: -8.480432510375977
    8. '():' → logprob: -8.980432510375977
    9. ':
' → logprob: -9.105432510375977
    10. ')' → logprob: -9.480432510375977

Token 213: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06677065789699554
    2. '
' → logprob: -3.066770553588867
    3. '    
' → logprob: -4.441770553588867
    4. 'def' → logprob: -5.691770553588867
    5. ' 
' → logprob: -6.691770553588867
    6. ' paths' → logprob: -7.691770553588867
    7. ' def' → logprob: -8.316770553588867
    8. '   
' → logprob: -8.566770553588867
    9. '  
' → logprob: -9.191770553588867
    10. '	
' → logprob: -9.441770553588867

Token 214: ' en' (ID: 469)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.15822802484035492
    2. ' def' → logprob: -2.4082279205322266
    3. 'def' → logprob: -3.2832279205322266
    4. ' paths' → logprob: -5.158227920532227
    5. ' if' → logprob: -5.533227920532227
    6. ' stack' → logprob: -6.033227920532227
    7. ' visited' → logprob: -6.533227920532227
    8. ' sequences' → logprob: -6.658227920532227
    9. '    
' → logprob: -7.033227920532227
    10. ' from' → logprob: -7.533227920532227

Token 215: ' respect' (ID: 5618)
  Prédit: ' respect'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' respect' → logprob: -0.1478453427553177
    2. 'respect' → logprob: -2.3978452682495117
    3. ' accord' → logprob: -3.6478452682495117
    4. 'accord' → logprob: -5.022845268249512
    5. ' suivant' → logprob: -5.272845268249512
    6. ' tenant' → logprob: -6.647845268249512
    7. 's' → logprob: -7.147845268249512
    8. ' conformité' → logprob: -7.147845268249512
    9. '   ' → logprob: -7.272845268249512
    10. 're' → logprob: -7.772845268249512

Token 216: 'ant' (ID: 493)
  Prédit: 'ant'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ant' → logprob: -0.004458724055439234
    2. 'ent' → logprob: -5.879458904266357
    3. '   ' → logprob: -7.254458904266357
    4. '#' → logprob: -8.6294584274292
    5. 'e' → logprob: -8.8794584274292
    6. 'é' → logprob: -9.1294584274292
    7. 'ement' → logprob: -9.2544584274292
    8. 'ivement' → logprob: -9.3794584274292
    9. 'er' → logprob: -10.2544584274292
    10. ' à' → logprob: -10.3794584274292

Token 217: ' les' (ID: 1341)
  Prédit: ' les'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -0.09398940205574036
    2. ' la' → logprob: -2.468989372253418
    3. ' strict' → logprob: -5.718989372253418
    4. ' l' → logprob: -7.343989372253418
    5. ' ' → logprob: -8.093989372253418
    6. '   ' → logprob: -8.093989372253418
    7. ' le' → logprob: -8.718989372253418
    8. 'les' → logprob: -8.843989372253418
    9. ' ' → logprob: -9.968989372253418
    10. ' toutes' → logprob: -10.093989372253418

Token 218: ' règles' (ID: 67042)
  Prédit: ' règles'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' règles' → logprob: -0.035153843462467194
    2. 'r' → logprob: -3.785153865814209
    3. ' r' → logprob: -5.285153865814209
    4. ' rules' → logprob: -5.910153865814209
    5. ' reg' → logprob: -7.160153865814209
    6. ' points' → logprob: -7.160153865814209
    7. ' ' → logprob: -7.660153865814209
    8. ' espaces' → logprob: -7.910153865814209
    9. 'rules' → logprob: -8.03515338897705
    10. ' ' → logprob: -8.28515338897705

Token 219: ' ci' (ID: 7405)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5231906771659851
    2. ' :' → logprob: -1.7731907367706299
    3. ':' → logprob: -2.27319073677063
    4. 'def' → logprob: -3.14819073677063
    5. ',' → logprob: -3.52319073677063
    6. ' def' → logprob: -4.148190498352051
    7. '.' → logprob: -4.523190498352051
    8. '  ' → logprob: -5.148190498352051
    9. ' ' → logprob: -5.148190498352051
    10. ' ,' → logprob: -5.398190498352051

Token 220: '-dessus' (ID: 74812)
  Prédit: '-dessus'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-dessus' → logprob: -0.6246775984764099
    2. '-dessous' → logprob: -1.6246776580810547
    3. '#' → logprob: -1.7496776580810547
    4. 'rc' → logprob: -2.8746776580810547
    5. '-ap' → logprob: -5.624677658081055
    6. '-' → logprob: -5.749677658081055
    7. 'r' → logprob: -5.999677658081055
    8. 'v' → logprob: -5.999677658081055
    9. 't' → logprob: -5.999677658081055
    10. 'tes' → logprob: -6.374677658081055

Token 221: '.

' (ID: 364)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5996509790420532
    2. ':' → logprob: -0.8496509790420532
    3. '
' → logprob: -4.974650859832764
    4. ':
' → logprob: -5.224650859832764
    5. '    
' → logprob: -5.974650859832764
    6. ',' → logprob: -6.224650859832764
    7. ' :' → logprob: -6.599650859832764
    8. '):
' → logprob: -6.599650859832764
    9. '):' → logprob: -6.724650859832764
    10. '():' → logprob: -6.974650859832764

Token 222: '   ' (ID: 271)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.8985568284988403
    2. '   ' → logprob: -0.8985568284988403
    3. '    
' → logprob: -2.023556709289551
    4. ' 
' → logprob: -3.273556709289551
    5. 'def' → logprob: -4.898556709289551
    6. '```' → logprob: -5.773556709289551
    7. '	
' → logprob: -6.023556709289551
    8. ' def' → logprob: -7.523556709289551
    9. '  
' → logprob: -7.648556709289551
    10. '     
' → logprob: -8.64855670928955

Token 223: ' #' (ID: 1069)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.7749481797218323
    2. 'from' → logprob: -0.7749481797218323
    3. '   ' → logprob: -2.7749481201171875
    4. 'paths' → logprob: -4.2749481201171875
    5. 'import' → logprob: -6.7749481201171875
    6. ' from' → logprob: -7.6499481201171875
    7. 'results' → logprob: -8.274948120117188
    8. 'se' → logprob: -9.274948120117188
    9. 'result' → logprob: -9.274948120117188
    10. ' def' → logprob: -9.399948120117188

Token 224: ' Vér' (ID: 159169)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.7660716772079468
    2. 'from' → logprob: -0.7660716772079468
    3. ' from' → logprob: -3.0160717964172363
    4. '   ' → logprob: -4.266071796417236
    5. ' def' → logprob: -5.766071796417236
    6. 'import' → logprob: -6.266071796417236
    7. 'paths' → logprob: -6.516071796417236
    8. ' paths' → logprob: -8.266071319580078
    9. 'visited' → logprob: -8.391071319580078
    10. ' sequences' → logprob: -9.016071319580078

Token 225: 'ification' (ID: 3166)
  Prédit: 'ifier'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ifier' → logprob: -0.6344854235649109
    2. 'ification' → logprob: -1.0094854831695557
    3. 'if' → logprob: -2.5094854831695557
    4. '   ' → logprob: -3.8844854831695557
    5. 'ifiez' → logprob: -6.759485244750977
    6. 'ifie' → logprob: -7.009485244750977
    7. 'ifications' → logprob: -7.509485244750977
    8. '#' → logprob: -8.759485244750977
    9. 'ifi' → logprob: -9.134485244750977
    10. 'ifié' → logprob: -9.134485244750977

Token 226: ' initial' (ID: 4871)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.14312683045864105
    2. 'if' → logprob: -3.1431267261505127
    3. '   ' → logprob: -3.2681267261505127
    4. ' j' → logprob: -3.6431267261505127
    5. '  ' → logprob: -4.393126964569092
    6. ' ' → logprob: -5.268126964569092
    7. ' (' → logprob: -5.643126964569092
    8. 's' → logprob: -7.018126964569092
    9. '    ' → logprob: -7.018126964569092
    10. ' des' → logprob: -7.393126964569092

Token 227: 'e' (ID: 68)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.36466318368911743
    2. ' if' → logprob: -1.4896631240844727
    3. ' de' → logprob: -3.7396631240844727
    4. ' ' → logprob: -4.114663124084473
    5. 's' → logprob: -4.739663124084473
    6. ' =' → logprob: -4.864663124084473
    7. '_' → logprob: -5.239663124084473
    8. ' des' → logprob: -5.364663124084473
    9. 'if' → logprob: -5.739663124084473
    10. '  ' → logprob: -6.364663124084473

Token 228: ' des' (ID: 731)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08084268122911453
    2. ' if' → logprob: -2.7058427333831787
    3. 'if' → logprob: -4.9558424949646
    4. ':' → logprob: -6.9558424949646
    5. '    ' → logprob: -6.9558424949646
    6. '    
' → logprob: -7.3308424949646
    7. 'def' → logprob: -7.8308424949646
    8. '  ' → logprob: -8.080842971801758
    9. ' ' → logprob: -9.455842971801758
    10. '   
' → logprob: -9.580842971801758

Token 229: ' contraintes' (ID: 167366)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.8393532633781433
    2. ' conditions' → logprob: -1.714353322982788
    3. ' j' → logprob: -2.214353322982788
    4. ' (' → logprob: -2.214353322982788
    5. 'conditions' → logprob: -3.339353322982788
    6. 'j' → logprob: -3.589353322982788
    7. ' def' → logprob: -3.839353322982788
    8. '(j' → logprob: -4.089353084564209
    9. ' not' → logprob: -4.214353084564209
    10. 'poss' → logprob: -4.714353084564209

Token 230: ' des' (ID: 731)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.001214879215694964
    2. ' if' → logprob: -7.501214981079102
    3. 'if' → logprob: -8.126214981079102
    4. 'def' → logprob: -9.001214981079102
    5. '    
' → logprob: -9.251214981079102
    6. ':' → logprob: -9.501214981079102
    7. '    ' → logprob: -10.626214981079102
    8. '  ' → logprob: -11.251214981079102
    9. '   ' → logprob: -12.126214981079102
    10. '   
' → logprob: -12.251214981079102

Token 231: ' entr' (ID: 7072)
  Prédit: ' scores'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' scores' → logprob: -0.4553547203540802
    2. 'scores' → logprob: -1.3303546905517578
    3. 'points' → logprob: -2.705354690551758
    4. ' points' → logprob: -3.955354690551758
    5. ' paramètres' → logprob: -5.455354690551758
    6. 'score' → logprob: -5.580354690551758
    7. 'j' → logprob: -6.830354690551758
    8. ' j' → logprob: -6.830354690551758
    9. 'param' → logprob: -7.330354690551758
    10. ' (' → logprob: -7.580354690551758

Token 232: 'ées' (ID: 5161)
  Prédit: 'ées'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ées' → logprob: -0.0011633152607828379
    2. 'ée' → logprob: -7.626163482666016
    3. 'ees' → logprob: -7.751163482666016
    4. 'és' → logprob: -9.251163482666016
    5. 'é' → logprob: -10.501163482666016
    6. '�' → logprob: -10.501163482666016
    7. 'ies' → logprob: -10.626163482666016
    8. '```' → logprob: -10.751163482666016
    9. 'y' → logprob: -11.001163482666016
    10. 'ants' → logprob: -12.251163482666016

Token 233: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.020485129207372665
    2. ':' → logprob: -5.145484924316406
    3. ' if' → logprob: -5.145484924316406
    4. '    
' → logprob: -6.020484924316406
    5. '  
' → logprob: -6.395484924316406
    6. '   
' → logprob: -6.645484924316406
    7. 'if' → logprob: -6.645484924316406
    8. ' 
' → logprob: -7.895484924316406
    9. '  ' → logprob: -8.020484924316406
    10. '
' → logprob: -8.145484924316406

Token 234: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0013976184418424964
    2. '    
' → logprob: -7.626397609710693
    3. ':' → logprob: -8.001398086547852
    4. '    ' → logprob: -8.626398086547852
    5. '   
' → logprob: -9.626398086547852
    6. ' ' → logprob: -9.876398086547852
    7. '  ' → logprob: -10.126398086547852
    8. ' 
' → logprob: -10.126398086547852
    9. '```' → logprob: -10.126398086547852
    10. 'if' → logprob: -10.376398086547852

Token 235: ' #' (ID: 1069)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.2413262277841568
    2. 'if' → logprob: -1.7413262128829956
    3. '   ' → logprob: -3.241326332092285
    4. '    
' → logprob: -12.241326332092285
    5. '	if' → logprob: -12.741326332092285
    6. '
' → logprob: -13.616326332092285
    7. ' ' → logprob: -13.741326332092285
    8. ' 
' → logprob: -13.741326332092285
    9. '    ' → logprob: -13.991326332092285
    10. ' ' → logprob: -14.241326332092285

Token 236: ' j' (ID: 441)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.38964009284973145
    2. 'if' → logprob: -1.7646400928497314
    3. '   ' → logprob: -1.8896400928497314
    4. ' ' → logprob: -9.139639854431152
    5. '    
' → logprob: -10.014639854431152
    6. ' 
' → logprob: -10.014639854431152
    7. '
' → logprob: -10.639639854431152
    8. 'def' → logprob: -10.764639854431152
    9. ' ' → logprob: -11.014639854431152
    10. '	if' → logprob: -11.139639854431152

Token 237: ' et' (ID: 859)
  Prédit: '_target'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_target' → logprob: -0.1884915679693222
    2. ',' → logprob: -3.0634915828704834
    3. ' <=' → logprob: -3.1884915828704834
    4. '   ' → logprob: -3.4384915828704834
    5. '_current' → logprob: -4.438491344451904
    6. '_' → logprob: -4.938491344451904
    7. ' >=' → logprob: -5.188491344451904
    8. ' ' → logprob: -5.563491344451904
    9. '  ' → logprob: -5.563491344451904
    10. ' ,' → logprob: -5.813491344451904

Token 238: ' y' (ID: 342)
  Prédit: ' y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.12721827626228333
    2. 'y' → logprob: -2.127218246459961
    3. '_y' → logprob: -9.002218246459961
    4. ' ' → logprob: -9.752218246459961
    5. '_' → logprob: -10.627218246459961
    6. ' _' → logprob: -10.627218246459961
    7. ' ' → logprob: -10.752218246459961
    8. ' j' → logprob: -11.377218246459961
    9. '   ' → logprob: -11.877218246459961
    10. '  ' → logprob: -12.252218246459961

Token 239: ' dans' (ID: 2671)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.52061527967453
    2. ',' → logprob: -1.7706153392791748
    3. ' >=' → logprob: -2.270615339279175
    4. '=' → logprob: -3.020615339279175
    5. '>=' → logprob: -3.145615339279175
    6. ')' → logprob: -4.895615100860596
    7. ' <=' → logprob: -5.020615100860596
    8. ' ,' → logprob: -5.145615100860596
    9. ' ' → logprob: -5.520615100860596
    10. '   ' → logprob: -5.645615100860596

Token 240: ' [' (ID: 723)
  Prédit: ' range'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.18701039254665375
    2. 'range' → logprob: -1.937010407447815
    3. '[' → logprob: -4.437010288238525
    4. ' [' → logprob: -4.812010288238525
    5. '0' → logprob: -5.687010288238525
    6. ' ' → logprob: -5.937010288238525
    7. ' ' → logprob: -9.187010765075684
    8. '   ' → logprob: -9.187010765075684
    9. '{' → logprob: -10.312010765075684
    10. '	range' → logprob: -10.562010765075684

Token 241: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -6.182190554682165e-05
    2. ' ' → logprob: -9.750061988830566
    3. '   ' → logprob: -13.625061988830566
    4. '5' → logprob: -13.875061988830566
    5. '6' → logprob: -14.000061988830566
    6. '  ' → logprob: -15.875061988830566
    7. ']' → logprob: -16.12506103515625
    8. '(' → logprob: -16.62506103515625
    9. '1' → logprob: -17.12506103515625
    10. '    ' → logprob: -17.37506103515625

Token 242: '..' (ID: 485)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.002000130945816636
    2. ' ,' → logprob: -6.252000331878662
    3. '5' → logprob: -9.876999855041504
    4. '4' → logprob: -11.251999855041504
    5. ' ' → logprob: -12.501999855041504
    6. '   ' → logprob: -14.126999855041504
    7. '9' → logprob: -14.251999855041504
    8. '6' → logprob: -14.501999855041504
    9. '7' → logprob: -15.376999855041504
    10. '1' → logprob: -15.501999855041504

Token 243: '6' (ID: 21)
  Prédit: '5'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.26642149686813354
    2. '4' → logprob: -1.5164215564727783
    3. ' ' → logprob: -4.266421318054199
    4. '6' → logprob: -8.6414213180542
    5. '9' → logprob: -9.6414213180542
    6. ']' → logprob: -10.7664213180542
    7. '   ' → logprob: -10.7664213180542
    8. '  ' → logprob: -11.1414213180542
    9. '10' → logprob: -11.3914213180542
    10. '7' → logprob: -11.3914213180542

Token 244: '],' (ID: 2155)
  Prédit: ']'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ']' → logprob: -0.0006626377580687404
    2. ']:' → logprob: -8.000662803649902
    3. '],' → logprob: -9.000662803649902
    4. ' ]' → logprob: -9.375662803649902
    5. '   ' → logprob: -9.875662803649902
    6. ',' → logprob: -11.000662803649902
    7. ')' → logprob: -11.000662803649902
    8. ']
' → logprob: -11.375662803649902
    9. 'def' → logprob: -11.625662803649902
    10. '])' → logprob: -12.375662803649902

Token 245: ' avec' (ID: 3937)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6693199276924133
    2. ' if' → logprob: -1.5443198680877686
    3. ' j' → logprob: -2.0443198680877686
    4. 'j' → logprob: -2.9193198680877686
    5. '    ' → logprob: -4.044320106506348
    6. ' ' → logprob: -4.044320106506348
    7. ' et' → logprob: -4.419320106506348
    8. 'if' → logprob: -4.669320106506348
    9. ' y' → logprob: -4.794320106506348
    10. 'def' → logprob: -5.294320106506348

Token 246: ' conditions' (ID: 6409)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.16011840105056763
    2. '(j' → logprob: -2.785118341445923
    3. ' not' → logprob: -3.535118341445923
    4. '(' → logprob: -3.660118341445923
    5. 'not' → logprob: -4.410118579864502
    6. ' abs' → logprob: -5.035118579864502
    7. ' j' → logprob: -6.160118579864502
    8. 'abs' → logprob: -6.285118579864502
    9. ' ' → logprob: -6.410118579864502
    10. 'j' → logprob: -6.410118579864502

Token 247: ' particuli' (ID: 33812)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.2310485541820526
    2. '   ' → logprob: -1.731048583984375
    3. 'if' → logprob: -3.731048583984375
    4. '  ' → logprob: -6.231048583984375
    5. ':' → logprob: -6.856048583984375
    6. ' j' → logprob: -7.731048583984375
    7. '    ' → logprob: -8.231048583984375
    8. ' ' → logprob: -8.231048583984375
    9. ' ' → logprob: -8.231048583984375
    10. ' suivantes' → logprob: -8.606048583984375

Token 248: 'ères' (ID: 12614)
  Prédit: 'ères'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ères' → logprob: -0.006922688335180283
    2. 'ières' → logprob: -6.006922721862793
    3. 'ales' → logprob: -7.131922721862793
    4. 'es' → logprob: -7.256922721862793
    5. 'ées' → logprob: -7.381922721862793
    6. '   ' → logprob: -7.506922721862793
    7. 'ètes' → logprob: -8.006922721862793
    8. 'è' → logprob: -8.381922721862793
    9. 'érées' → logprob: -8.381922721862793
    10. 'à' → logprob: -8.631922721862793

Token 249: ' sur' (ID: 1512)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.005906988866627216
    2. ' if' → logprob: -5.63090705871582
    3. ':' → logprob: -7.00590705871582
    4. 'if' → logprob: -7.63090705871582
    5. '    
' → logprob: -8.13090705871582
    6. ' :' → logprob: -9.00590705871582
    7. '  ' → logprob: -9.63090705871582
    8. '    ' → logprob: -9.75590705871582
    9. '  
' → logprob: -9.75590705871582
    10. '   
' → logprob: -9.75590705871582

Token 250: ' les' (ID: 1341)
  Prédit: ' j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' j' → logprob: -0.08591999858617783
    2. ' (' → logprob: -3.0859200954437256
    3. 'j' → logprob: -4.0859198570251465
    4. ' ' → logprob: -4.8359198570251465
    5. ' la' → logprob: -6.0859198570251465
    6. ' les' → logprob: -6.2109198570251465
    7. ' le' → logprob: -6.3359198570251465
    8. '(' → logprob: -6.7109198570251465
    9. 'le' → logprob: -7.0859198570251465
    10. ' max' → logprob: -7.3359198570251465

Token 251: ' scores' (ID: 18923)
  Prédit: 'scores'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'scores' → logprob: -1.1462559700012207
    2. 'val' → logprob: -1.2712559700012207
    3. ' scores' → logprob: -1.2712559700012207
    4. ' valeurs' → logprob: -3.0212559700012207
    5. 'points' → logprob: -4.021255970001221
    6. ' val' → logprob: -4.146255970001221
    7. 'score' → logprob: -4.771255970001221
    8. 'values' → logprob: -5.271255970001221
    9. ' j' → logprob: -5.271255970001221
    10. 'j' → logprob: -5.271255970001221

Token 252: ' ' (ID: 220)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.010318581946194172
    2. ' if' → logprob: -4.885318756103516
    3. 'if' → logprob: -7.385318756103516
    4. ':' → logprob: -7.385318756103516
    5. '  ' → logprob: -8.135318756103516
    6. ',' → logprob: -8.385318756103516
    7. ' :' → logprob: -8.760318756103516
    8. 'def' → logprob: -8.760318756103516
    9. '    
' → logprob: -8.760318756103516
    10. '
' → logprob: -9.510318756103516

Token 253: '6' (ID: 21)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.13581234216690063
    2. ' if' → logprob: -2.260812282562256
    3. 'if' → logprob: -3.885812282562256
    4. ' ' → logprob: -7.010812282562256
    5. '  ' → logprob: -7.260812282562256
    6. 'def' → logprob: -8.635812759399414
    7. ':' → logprob: -8.885812759399414
    8. '    ' → logprob: -9.885812759399414
    9. ',' → logprob: -10.385812759399414
    10. ' :' → logprob: -10.385812759399414

Token 254: '-' (ID: 12)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8945926427841187
    2. ',' → logprob: -1.5195926427841187
    3. ' ,' → logprob: -1.8945926427841187
    4. ' ' → logprob: -3.394592761993408
    5. ')' → logprob: -3.394592761993408
    6. '  ' → logprob: -3.769592761993408
    7. ':' → logprob: -4.019592761993408
    8. '    ' → logprob: -4.019592761993408
    9. ' =' → logprob: -4.269592761993408
    10. ']' → logprob: -4.394592761993408

Token 255: '4' (ID: 19)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.36286240816116333
    2. '6' → logprob: -1.9878623485565186
    3. '4' → logprob: -2.4878623485565186
    4. '5' → logprob: -2.6128623485565186
    5. ' ' → logprob: -4.862862586975098
    6. 'j' → logprob: -5.987862586975098
    7. 'y' → logprob: -9.112862586975098
    8. 'x' → logprob: -9.237862586975098
    9. '```' → logprob: -9.487862586975098
    10. '1' → logprob: -10.112862586975098

Token 256: ' ou' (ID: 2031)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0020848317071795464
    2. '    
' → logprob: -7.002084732055664
    3. '
' → logprob: -7.627084732055664
    4. 'def' → logprob: -9.002084732055664
    5. '  
' → logprob: -9.002084732055664
    6. '   
' → logprob: -9.002084732055664
    7. '  ' → logprob: -9.502084732055664
    8. ' if' → logprob: -9.502084732055664
    9. '    ' → logprob: -10.002084732055664
    10. ',' → logprob: -10.377084732055664

Token 257: ' ' (ID: 220)
  Prédit: '6'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -0.4747096002101898
    2. ' ' → logprob: -0.9747096300125122
    3. '5' → logprob: -8.474709510803223
    4. '7' → logprob: -8.849709510803223
    5. ' (' → logprob: -10.037209510803223
    6. '(' → logprob: -10.224709510803223
    7. '   ' → logprob: -10.349709510803223
    8. '4' → logprob: -10.537209510803223
    9. '  ' → logprob: -10.787209510803223
    10. ' ' → logprob: -11.099709510803223

Token 258: '4' (ID: 19)
  Prédit: '6'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -0.045713987201452255
    2. ' ' → logprob: -3.2957139015197754
    3. '5' → logprob: -5.545713901519775
    4. '4' → logprob: -5.670713901519775
    5. '7' → logprob: -8.920714378356934
    6. '(' → logprob: -9.545714378356934
    7. '0' → logprob: -10.608214378356934
    8. ' (' → logprob: -11.358214378356934
    9. '```' → logprob: -12.045714378356934
    10. '  ' → logprob: -12.108214378356934

Token 259: '-' (ID: 12)
  Prédit: '-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.5388136506080627
    2. ',' → logprob: -1.038813591003418
    3. ' -' → logprob: -4.288813591003418
    4. '   ' → logprob: -4.413813591003418
    5. ' or' → logprob: -4.663813591003418
    6. ' ,' → logprob: -5.163813591003418
    7. ' ' → logprob: -5.538813591003418
    8. '<|end|>' → logprob: -5.538813591003418
    9. '6' → logprob: -6.663813591003418
    10. ' and' → logprob: -6.913813591003418

Token 260: '6' (ID: 21)
  Prédit: '6'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -0.007287862244993448
    2. '4' → logprob: -5.007287979125977
    3. '5' → logprob: -8.132287979125977
    4. ' ' → logprob: -8.632287979125977
    5. 'j' → logprob: -10.632287979125977
    6. '0' → logprob: -10.632287979125977
    7. '7' → logprob: -10.882287979125977
    8. 'y' → logprob: -12.007287979125977
    9. '-' → logprob: -12.132287979125977
    10. '```' → logprob: -12.507287979125977

Token 261: ' ou' (ID: 2031)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0009277798235416412
    2. '    
' → logprob: -7.625927925109863
    3. '
' → logprob: -8.625927925109863
    4. ' if' → logprob: -9.250927925109863
    5. 'def' → logprob: -9.250927925109863
    6. 'if' → logprob: -10.750927925109863
    7. '   
' → logprob: -11.625927925109863
    8. '  
' → logprob: -11.625927925109863
    9. '	if' → logprob: -11.750927925109863
    10. '    ' → logprob: -12.375927925109863

Token 262: ' autre' (ID: 20278)
  Prédit: '6'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '6' → logprob: -0.10996220260858536
    2. ' ' → logprob: -2.359962224960327
    3. '(' → logprob: -4.984961986541748
    4. ' (' → logprob: -6.484961986541748
    5. '5' → logprob: -7.359961986541748
    6. '7' → logprob: -8.359962463378906
    7. '4' → logprob: -8.984962463378906
    8. '   ' → logprob: -9.359962463378906
    9. '```' → logprob: -10.109962463378906
    10. '  ' → logprob: -10.234962463378906

Token 263: ' cas' (ID: 2108)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0017005297122523189
    2. ' if' → logprob: -7.501700401306152
    3. 'def' → logprob: -8.251700401306152
    4. '    
' → logprob: -8.376700401306152
    5. '  
' → logprob: -8.751700401306152
    6. 'if' → logprob: -9.126700401306152
    7. '
' → logprob: -9.501700401306152
    8. '  ' → logprob: -9.626700401306152
    9. '   
' → logprob: -9.626700401306152
    10. '	if' → logprob: -9.876700401306152

Token 264: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.001347138429991901
    2. ' if' → logprob: -7.251347064971924
    3. '    
' → logprob: -8.751347541809082
    4. 'if' → logprob: -9.251347541809082
    5. 'def' → logprob: -9.501347541809082
    6. ':' → logprob: -9.626347541809082
    7. '   
' → logprob: -9.751347541809082
    8. '  ' → logprob: -10.001347541809082
    9. '    ' → logprob: -10.251347541809082
    10. ',' → logprob: -10.751347541809082

Token 265: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0015725912526249886
    2. '    
' → logprob: -6.751572608947754
    3. '
' → logprob: -8.376572608947754
    4. 'def' → logprob: -9.626572608947754
    5. ' 
' → logprob: -10.376572608947754
    6. '    ' → logprob: -10.751572608947754
    7. ' if' → logprob: -11.376572608947754
    8. 'if' → logprob: -11.751572608947754
    9. '   
' → logprob: -11.751572608947754
    10. '  
' → logprob: -12.126572608947754

Token 266: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5726200342178345
    2. ' if' → logprob: -0.9476200342178345
    3. 'if' → logprob: -3.072619915008545
    4. '    
' → logprob: -7.197619915008545
    5. ' 
' → logprob: -7.822619915008545
    6. '
' → logprob: -8.197620391845703
    7. 'def' → logprob: -8.197620391845703
    8. '	if' → logprob: -9.447620391845703
    9. '   
' → logprob: -9.822620391845703
    10. '  
' → logprob: -10.072620391845703

Token 267: ' Conditions' (ID: 39333)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.012811927124857903
    2. ' if' → logprob: -4.63781213760376
    3. 'if' → logprob: -7.13781213760376
    4. ' 
' → logprob: -7.13781213760376
    5. '    
' → logprob: -7.38781213760376
    6. '
' → logprob: -7.88781213760376
    7. 'def' → logprob: -9.137811660766602
    8. '    ' → logprob: -9.387811660766602
    9. '   
' → logprob: -9.637811660766602
    10. ' ' → logprob: -9.887811660766602

Token 268: ' du' (ID: 1462)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.09657840430736542
    2. '   ' → logprob: -2.971578359603882
    3. ' if' → logprob: -3.721578359603882
    4. ':' → logprob: -5.221578598022461
    5. '=' → logprob: -5.221578598022461
    6. 'if' → logprob: -6.096578598022461
    7. '  ' → logprob: -6.846578598022461
    8. ' ' → logprob: -6.971578598022461
    9. ' ' → logprob: -7.596578598022461
    10. 'def' → logprob: -8.096578598022461

Token 269: ' problème' (ID: 35630)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.6882618069648743
    2. ' if' → logprob: -1.0632617473602295
    3. ' code' → logprob: -2.9382617473602295
    4. 'score' → logprob: -2.9382617473602295
    5. ' score' → logprob: -3.3132617473602295
    6. 'code' → logprob: -5.938261985778809
    7. 'def' → logprob: -6.813261985778809
    8. ' j' → logprob: -7.313261985778809
    9. ' jeu' → logprob: -7.313261985778809
    10. '   ' → logprob: -7.563261985778809

Token 270: ' :
' (ID: 10039)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.012147573754191399
    2. ' if' → logprob: -5.387147426605225
    3. ':' → logprob: -6.262147426605225
    4. 'def' → logprob: -6.387147426605225
    5. '
' → logprob: -7.012147426605225
    6. '  
' → logprob: -7.512147426605225
    7. '    
' → logprob: -7.762147426605225
    8. '  ' → logprob: -8.137147903442383
    9. ' :' → logprob: -8.137147903442383
    10. '   
' → logprob: -8.137147903442383

Token 271: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.005243360530585051
    2. ' if' → logprob: -5.630243301391602
    3. '    ' → logprob: -7.630243301391602
    4. '    
' → logprob: -7.630243301391602
    5. 'def' → logprob: -8.255243301391602
    6. 'if' → logprob: -8.630243301391602
    7. ' def' → logprob: -9.880243301391602
    8. ' #' → logprob: -10.130243301391602
    9. '#' → logprob: -10.630243301391602
    10. ' 
' → logprob: -10.630243301391602

Token 272: ' #' (ID: 1069)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.08978812396526337
    2. 'if' → logprob: -3.0897881984710693
    3. '   ' → logprob: -3.2147881984710693
    4. ' 
' → logprob: -10.464788436889648
    5. 'def' → logprob: -10.464788436889648
    6. ' ' → logprob: -10.464788436889648
    7. '
' → logprob: -10.589788436889648
    8. '	if' → logprob: -10.714788436889648
    9. '    ' → logprob: -11.089788436889648
    10. ' ' → logprob: -11.339788436889648

Token 273: ' (' (ID: 350)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.0973980650305748
    2. 'if' → logprob: -2.472398042678833
    3. '   ' → logprob: -4.847398281097412
    4. 'def' → logprob: -7.722398281097412
    5. ' def' → logprob: -9.972397804260254
    6. '
' → logprob: -11.097397804260254
    7. ' possible' → logprob: -11.097397804260254
    8. ' for' → logprob: -11.847397804260254
    9. '```' → logprob: -11.972397804260254
    10. ' ' → logprob: -12.222397804260254

Token 274: 'j' (ID: 73)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.8748730421066284
    2. '(j' → logprob: -0.8748730421066284
    3. 'j' → logprob: -2.124873161315918
    4. '(' → logprob: -3.374873161315918
    5. ' j' → logprob: -4.499873161315918
    6. ')' → logprob: -7.374873161315918
    7. '(
' → logprob: -7.874873161315918
    8. '   ' → logprob: -9.249873161315918
    9. '((' → logprob: -9.374873161315918
    10. ' ' → logprob: -9.624873161315918

Token 275: ',' (ID: 11)
  Prédit: ' <='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.5578346848487854
    2. ' ,' → logprob: -1.8078346252441406
    3. ',' → logprob: -1.9328346252441406
    4. ' >=' → logprob: -3.1828346252441406
    5. ' ==' → logprob: -3.3078346252441406
    6. ' <' → logprob: -4.682834625244141
    7. '<=' → logprob: -4.682834625244141
    8. ',j' → logprob: -4.807834625244141
    9. ' >' → logprob: -5.682834625244141
    10. '==' → logprob: -5.807834625244141

Token 276: ' y' (ID: 342)
  Prédit: ' y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.07889209687709808
    2. 'y' → logprob: -2.5788919925689697
    3. '	y' → logprob: -14.20389175415039
    4. '   ' → logprob: -14.57889175415039
    5. ',y' → logprob: -15.07889175415039
    6. ',' → logprob: -15.32889175415039
    7. ' ' → logprob: -15.45389175415039
    8. ' ' → logprob: -15.82889175415039
    9. ')' → logprob: -15.95389175415039
    10. 'j' → logprob: -16.07889175415039

Token 277: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00468727620318532
    2. ' ==' → logprob: -6.129687309265137
    3. ')==' → logprob: -6.504687309265137
    4. '==' → logprob: -7.629687309265137
    5. ' )' → logprob: -7.879687309265137
    6. '   ' → logprob: -10.879687309265137
    7. ' !=' → logprob: -10.879687309265137
    8. ' not' → logprob: -11.004687309265137
    9. ')!=' → logprob: -11.379687309265137
    10. '):
' → logprob: -11.629687309265137

Token 278: ' !=' (ID: 1666)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.3058391213417053
    2. ' in' → logprob: -1.6808390617370605
    3. ' not' → logprob: -3.4308390617370605
    4. '==' → logprob: -3.5558390617370605
    5. ' !=' → logprob: -5.4308390617370605
    6. ')' → logprob: -5.4308390617370605
    7. ' =' → logprob: -5.9308390617370605
    8. '=' → logprob: -6.6808390617370605
    9. ' >=' → logprob: -7.4308390617370605
    10. '   ' → logprob: -7.6808390617370605

Token 279: ' (' (ID: 350)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.007609108928591013
    2. ' (' → logprob: -4.882608890533447
    3. '(j' → logprob: -13.007609367370605
    4. ' ' → logprob: -14.882609367370605
    5. '   ' → logprob: -16.50760841369629
    6. '6' → logprob: -16.63260841369629
    7. '
' → logprob: -17.38260841369629
    8. '(
' → logprob: -17.38260841369629
    9. '（' → logprob: -17.75760841369629
    10. 'j' → logprob: -17.88260841369629

Token 280: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.31054627895355225
    2. '6' → logprob: -1.5605462789535522
    3. '4' → logprob: -3.435546398162842
    4. '5' → logprob: -4.310546398162842
    5. ' ' → logprob: -4.935546398162842
    6. '(' → logprob: -5.685546398162842
    7. ')' → logprob: -7.685546398162842
    8. ' (' → logprob: -9.185545921325684
    9. '1' → logprob: -9.935545921325684
    10. ',' → logprob: -10.685545921325684

Token 281: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00013893934374209493
    2. '0' → logprob: -9.625139236450195
    3. ' ,' → logprob: -9.750139236450195
    4. ')' → logprob: -11.875139236450195
    5. ',
' → logprob: -12.000139236450195
    6. ' ' → logprob: -15.375139236450195
    7. ',)' → logprob: -15.375139236450195
    8. ',

' → logprob: -15.500139236450195
    9. '```' → logprob: -16.000139236450195
    10. '<|end|>' → logprob: -16.250139236450195

Token 282: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.011050889268517494
    2. ' ' → logprob: -4.511050701141357
    3. '   ' → logprob: -14.261051177978516
    4. '  ' → logprob: -14.511051177978516
    5. ' ' → logprob: -14.511051177978516
    6. '
' → logprob: -14.886051177978516
    7. ')' → logprob: -15.011051177978516
    8. '

' → logprob: -16.198551177978516
    9. '```' → logprob: -16.261051177978516
    10. '    ' → logprob: -16.886051177978516

Token 283: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -4.572941179503687e-05
    2. ' ' → logprob: -10.000045776367188
    3. '   ' → logprob: -15.750045776367188
    4. '  ' → logprob: -16.875045776367188
    5. ' ' → logprob: -17.625045776367188
    6. '```' → logprob: -17.875045776367188
    7. ')' → logprob: -18.375045776367188
    8. ',' → logprob: -19.125045776367188
    9. '۰' → logprob: -19.125045776367188
    10. '1' → logprob: -19.375045776367188

Token 284: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -9.138441237155348e-05
    2. ' )' → logprob: -10.375091552734375
    3. ')
' → logprob: -10.625091552734375
    4. ',' → logprob: -10.875091552734375
    5. '),' → logprob: -12.125091552734375
    6. '   ' → logprob: -12.750091552734375
    7. ' and' → logprob: -13.125091552734375
    8. '')' → logprob: -13.250091552734375
    9. '):' → logprob: -13.625091552734375
    10. ' ' → logprob: -14.500091552734375

Token 285: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.012237079441547394
    2. ':' → logprob: -5.387237071990967
    3. '
' → logprob: -5.762237071990967
    4. ' if' → logprob: -7.012237071990967
    5. '    
' → logprob: -7.137237071990967
    6. ',' → logprob: -7.387237071990967
    7. '```' → logprob: -7.762237071990967
    8. '  
' → logprob: -8.012237548828125
    9. ' 
' → logprob: -8.387237548828125
    10. ')' → logprob: -8.637237548828125

Token 286: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0011771318968385458
    2. '
' → logprob: -7.8761773109436035
    3. '    
' → logprob: -8.126176834106445
    4. ' if' → logprob: -8.501176834106445
    5. 'def' → logprob: -9.376176834106445
    6. '  
' → logprob: -10.001176834106445
    7. ' 
' → logprob: -10.251176834106445
    8. 'if' → logprob: -10.376176834106445
    9. '```' → logprob: -10.626176834106445
    10. '   
' → logprob: -10.876176834106445

Token 287: ' Si' (ID: 7832)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.07561562955379486
    2. 'if' → logprob: -2.700615644454956
    3. '   ' → logprob: -5.200615406036377
    4. ' (' → logprob: -9.825615882873535
    5. ' j' → logprob: -10.325615882873535
    6. ' not' → logprob: -11.200615882873535
    7. 'def' → logprob: -11.825615882873535
    8. 'j' → logprob: -12.075615882873535
    9. ' ' → logprob: -12.325615882873535
    10. ' ' → logprob: -12.575615882873535

Token 288: ' j' (ID: 441)
  Prédit: ' j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' j' → logprob: -0.1902194619178772
    2. ' (' → logprob: -1.9402194023132324
    3. 'j' → logprob: -4.315219402313232
    4. ' not' → logprob: -4.315219402313232
    5. '(j' → logprob: -6.565219402313232
    6. '   ' → logprob: -7.690219402313232
    7. 'not' → logprob: -8.06521987915039
    8. ' ' → logprob: -8.56521987915039
    9. '(' → logprob: -8.69021987915039
    10. ' ' → logprob: -9.69021987915039

Token 289: '=' (ID: 28)
  Prédit: ' >='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' >=' → logprob: -0.7094810009002686
    2. ' <' → logprob: -1.3344810009002686
    3. ' >' → logprob: -2.2094810009002686
    4. ' <=' → logprob: -2.3344810009002686
    5. ' ==' → logprob: -4.084481239318848
    6. '>=' → logprob: -4.584481239318848
    7. '>' → logprob: -5.709481239318848
    8. '<' → logprob: -5.959481239318848
    9. ' ' → logprob: -6.959481239318848
    10. '==' → logprob: -6.959481239318848

Token 290: '6' (ID: 21)
  Prédit: '5'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.5490379929542542
    2. ' ' → logprob: -1.0490379333496094
    3. '4' → logprob: -2.9240379333496094
    4. '6' → logprob: -4.299037933349609
    5. '0' → logprob: -5.549037933349609
    6. '<' → logprob: -7.674037933349609
    7. '=' → logprob: -7.799037933349609
    8. '   ' → logprob: -9.79903793334961
    9. '1' → logprob: -11.17403793334961
    10. '    ' → logprob: -11.17403793334961

Token 291: ' =>' (ID: 871)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.18036313354969025
    2. '==' → logprob: -1.9303631782531738
    3. ' and' → logprob: -4.180363178253174
    4. 'and' → logprob: -6.180363178253174
    5. ' et' → logprob: -6.305363178253174
    6. 'et' → logprob: -7.930363178253174
    7. ' ' → logprob: -8.930362701416016
    8. '   ' → logprob: -8.930362701416016
    9. ',' → logprob: -10.055362701416016
    10. '=' → logprob: -10.555362701416016

Token 292: ' y' (ID: 342)
  Prédit: ' y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.012895957566797733
    2. 'y' → logprob: -4.3878960609436035
    3. ' (' → logprob: -8.762895584106445
    4. '   ' → logprob: -8.887895584106445
    5. ' not' → logprob: -10.387895584106445
    6. ' ' → logprob: -11.012895584106445
    7. '(y' → logprob: -11.012895584106445
    8. '  ' → logprob: -12.137895584106445
    9. '(' → logprob: -12.387895584106445
    10. '4' → logprob: -12.512895584106445

Token 293: '=' (ID: 28)
  Prédit: '<'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<' → logprob: -0.3537898063659668
    2. ' <' → logprob: -1.4787898063659668
    3. '<=' → logprob: -3.603789806365967
    4. ' <=' → logprob: -3.853789806365967
    5. '==' → logprob: -4.853789806365967
    6. ' ==' → logprob: -5.353789806365967
    7. '!=' → logprob: -5.603789806365967
    8. ' !=' → logprob: -6.103789806365967
    9. '=' → logprob: -6.728789806365967
    10. ' in' → logprob: -7.103789806365967

Token 294: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -4.961759259458631e-06
    2. ' ' → logprob: -12.375004768371582
    3. '5' → logprob: -14.875004768371582
    4. '' → logprob: -16.0000057220459
    5. '４' → logprob: -16.7500057220459
    6. '۴' → logprob: -17.5625057220459
    7. '(' → logprob: -17.9375057220459
    8. '   ' → logprob: -18.0000057220459
    9. '```' → logprob: -18.0625057220459
    10. '४' → logprob: -18.1250057220459

Token 295: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0852278396487236
    2. ' or' → logprob: -2.5852277278900146
    3. ' ou' → logprob: -6.585227966308594
    4. ' and' → logprob: -6.960227966308594
    5. '
' → logprob: -7.210227966308594
    6. ',' → logprob: -7.210227966308594
    7. '  ' → logprob: -7.460227966308594
    8. '    
' → logprob: -8.210227966308594
    9. 'def' → logprob: -8.460227966308594
    10. '<|end|>' → logprob: -8.585227966308594

Token 296: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00010640407708706334
    2. '    
' → logprob: -10.875106811523438
    3. ' or' → logprob: -11.125106811523438
    4. ',' → logprob: -11.250106811523438
    5. '  ' → logprob: -11.375106811523438
    6. ' if' → logprob: -11.375106811523438
    7. '```' → logprob: -11.875106811523438
    8. '
' → logprob: -12.250106811523438
    9. 'def' → logprob: -12.375106811523438
    10. '  
' → logprob: -12.375106811523438

Token 297: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06645090132951736
    2. ' or' → logprob: -3.191450834274292
    3. ' and' → logprob: -4.191451072692871
    4. ' ou' → logprob: -6.441451072692871
    5. '
' → logprob: -6.566451072692871
    6. ' et' → logprob: -6.691451072692871
    7. ' if' → logprob: -6.691451072692871
    8. ',' → logprob: -7.316451072692871
    9. '```' → logprob: -7.816451072692871
    10. 'and' → logprob: -8.066451072692871

Token 298: ' Si' (ID: 7832)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10055235028266907
    2. ' if' → logprob: -2.6005523204803467
    3. ' or' → logprob: -4.850552558898926
    4. 'if' → logprob: -5.600552558898926
    5. ' et' → logprob: -5.725552558898926
    6. ' and' → logprob: -5.850552558898926
    7. ' ou' → logprob: -6.850552558898926
    8. 'def' → logprob: -8.100552558898926
    9. 'and' → logprob: -8.225552558898926
    10. ' elif' → logprob: -8.350552558898926

Token 299: ' y' (ID: 342)
  Prédit: ' y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.023363808169960976
    2. 'y' → logprob: -3.7733638286590576
    3. ' j' → logprob: -9.273364067077637
    4. 'j' → logprob: -10.773364067077637
    5. ' ' → logprob: -13.398364067077637
    6. ' ' → logprob: -13.648364067077637
    7. '	y' → logprob: -15.023364067077637
    8. '   ' → logprob: -16.39836311340332
    9. '  ' → logprob: -16.89836311340332
    10. ' (' → logprob: -17.52336311340332

Token 300: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.0029630844946950674
    2. ' =' → logprob: -6.502963066101074
    3. '==' → logprob: -6.752963066101074
    4. ' ==' → logprob: -8.252963066101074
    5. '6' → logprob: -11.127963066101074
    6. '<' → logprob: -11.502963066101074
    7. '<=' → logprob: -13.377963066101074
    8. ' ' → logprob: -13.877963066101074
    9. '!=' → logprob: -14.002963066101074
    10. '>' → logprob: -14.502963066101074

Token 301: '6' (ID: 21)
  Prédit: '6'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -7.44574936106801e-05
    2. ' ' → logprob: -9.75007438659668
    3. '4' → logprob: -11.25007438659668
    4. '0' → logprob: -13.37507438659668
    5. '   ' → logprob: -14.93757438659668
    6. '  ' → logprob: -15.50007438659668
    7. '5' → logprob: -15.75007438659668
    8. '<' → logprob: -16.18757438659668
    9. '    ' → logprob: -16.37507438659668
    10. '[' → logprob: -16.75007438659668

Token 302: ' =>' (ID: 871)
  Prédit: ' =>'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =>' → logprob: -0.279008686542511
    2. ' ==' → logprob: -1.7790086269378662
    3. ' <=' → logprob: -3.529008626937866
    4. '=>' → logprob: -4.029008865356445
    5. '==' → logprob: -4.404008865356445
    6. ' !=' → logprob: -5.154008865356445
    7. ' ' → logprob: -5.529008865356445
    8. '=' → logprob: -6.154008865356445
    9. ' ->' → logprob: -6.779008865356445
    10. ' =' → logprob: -7.154008865356445

Token 303: ' j' (ID: 441)
  Prédit: '4'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.02975500375032425
    2. ' ' → logprob: -3.529755115509033
    3. '   ' → logprob: -12.904754638671875
    4. 'j' → logprob: -13.654754638671875
    5. ' j' → logprob: -14.904754638671875
    6. '  ' → logprob: -15.529754638671875
    7. ' ' → logprob: -16.029754638671875
    8. '=' → logprob: -16.904754638671875
    9. '    ' → logprob: -17.029754638671875
    10. '6' → logprob: -17.154754638671875

Token 304: '=' (ID: 28)
  Prédit: '='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -6.170270353322849e-05
    2. ' =' → logprob: -10.500061988830566
    3. '==' → logprob: -10.500061988830566
    4. '<=' → logprob: -12.125061988830566
    5. '4' → logprob: -14.500061988830566
    6. ' ==' → logprob: -15.125061988830566
    7. '<' → logprob: -15.500061988830566
    8. ' ' → logprob: -17.00006103515625
    9. ' <=' → logprob: -17.37506103515625
    10. '=None' → logprob: -17.37506103515625

Token 305: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -7.896309739408025e-07
    2. ' ' → logprob: -14.125000953674316
    3. '' → logprob: -18.125
    4. '۴' → logprob: -18.375
    5. '```' → logprob: -18.375
    6. '   ' → logprob: -18.875
    7. '４' → logprob: -19.25
    8. '৪' → logprob: -19.25
    9. '٤' → logprob: -19.375
    10. '४' → logprob: -19.375

Token 306: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0016976762562990189
    2. '    
' → logprob: -7.126697540283203
    3. '
' → logprob: -7.376697540283203
    4. 'def' → logprob: -9.751697540283203
    5. '  
' → logprob: -10.001697540283203
    6. '```' → logprob: -10.001697540283203
    7. '\n' → logprob: -10.501697540283203
    8. ',' → logprob: -11.001697540283203
    9. '   
' → logprob: -11.376697540283203
    10. ' 
' → logprob: -11.501697540283203

Token 307: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00043829824426211417
    2. '    
' → logprob: -8.250438690185547
    3. '
' → logprob: -8.750438690185547
    4. '```' → logprob: -12.125438690185547
    5. '  
' → logprob: -12.625438690185547
    6. '   
' → logprob: -13.375438690185547
    7. 'def' → logprob: -13.500438690185547
    8. '#' → logprob: -13.750438690185547
    9. '<|end|>' → logprob: -14.000438690185547
    10. '    ' → logprob: -14.000438690185547

Token 308: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00030304977553896606
    2. '
' → logprob: -8.750303268432617
    3. '    
' → logprob: -9.500303268432617
    4. '```' → logprob: -10.250303268432617
    5. ' if' → logprob: -12.125303268432617
    6. 'if' → logprob: -12.125303268432617
    7. 'def' → logprob: -12.375303268432617
    8. '#' (adapté à ' #') → logprob: -12.500303268432617
    9. ')' → logprob: -13.000303268432617
    10. '  
' → logprob: -13.125303268432617

Token 309: ' Sinon' (ID: 154924)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8124516606330872
    2. ' if' → logprob: -1.0624516010284424
    3. 'if' → logprob: -1.5624516010284424
    4. 'def' → logprob: -7.3124518394470215
    5. ' ' → logprob: -9.187451362609863
    6. '	if' → logprob: -10.062451362609863
    7. 'import' → logprob: -10.312451362609863
    8. '  ' → logprob: -10.687451362609863
    9. 'assert' → logprob: -10.687451362609863
    10. '```' → logprob: -10.687451362609863

Token 310: ' ' (ID: 220)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.28326907753944397
    2. '   ' → logprob: -1.9082690477371216
    3. 'if' → logprob: -2.408269166946411
    4. ' (' → logprob: -6.158268928527832
    5. '    ' → logprob: -6.658268928527832
    6. ':' → logprob: -6.658268928527832
    7. 'def' → logprob: -7.033268928527832
    8. ' ' → logprob: -7.283268928527832
    9. '  ' → logprob: -7.533268928527832
    10. 'assert' → logprob: -8.033268928527832

Token 311: '0' (ID: 15)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.05811641737818718
    2. ' if' → logprob: -3.6831164360046387
    3. '   ' → logprob: -4.433116436004639
    4. ' (' → logprob: -4.683116436004639
    5. '(j' → logprob: -5.183116436004639
    6. 'not' → logprob: -6.683116436004639
    7. 'return' → logprob: -6.933116436004639
    8. 'assert' → logprob: -7.683116436004639
    9. ' ' → logprob: -7.933116436004639
    10. '(' → logprob: -8.05811595916748

Token 312: ' <=' (ID: 5017)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.18595878779888153
    2. 'if' → logprob: -2.1859588623046875
    3. '   ' → logprob: -3.6859588623046875
    4. ' or' → logprob: -4.0609588623046875
    5. ' return' → logprob: -5.6859588623046875
    6. 'def' → logprob: -6.0609588623046875
    7. ' ' → logprob: -6.4359588623046875
    8. 'return' → logprob: -6.4359588623046875
    9. '  ' → logprob: -7.0609588623046875
    10. ',' → logprob: -7.1859588623046875

Token 313: ' j' (ID: 441)
  Prédit: 'j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.14286944270133972
    2. ' j' → logprob: -2.017869472503662
    3. '	j' → logprob: -10.142868995666504
    4. ' ' → logprob: -10.267868995666504
    5. '   ' → logprob: -10.392868995666504
    6. ' ' → logprob: -10.517868995666504
    7. 'max' → logprob: -10.767868995666504
    8. ' max' → logprob: -11.017868995666504
    9. '  ' → logprob: -11.267868995666504
    10. 'y' → logprob: -12.892868995666504

Token 314: ',y' (ID: 16103)
  Prédit: ' <='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.2155514359474182
    2. '<=' → logprob: -1.7155513763427734
    3. ',' → logprob: -5.090551376342773
    4. ' <' → logprob: -5.465551376342773
    5. '<' → logprob: -6.090551376342773
    6. '=' → logprob: -7.090551376342773
    7. ' and' → logprob: -8.715551376342773
    8. ' ' → logprob: -8.965551376342773
    9. ' ≤' → logprob: -9.715551376342773
    10. ' ,' → logprob: -9.965551376342773

Token 315: ' <=' (ID: 5017)
  Prédit: '<='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<=' → logprob: -0.5243995189666748
    2. ' <=' → logprob: -0.8993995189666748
    3. '<' → logprob: -7.024399757385254
    4. '6' → logprob: -9.274399757385254
    5. ' <' → logprob: -9.274399757385254
    6. ' ' → logprob: -9.899399757385254
    7. '   ' → logprob: -10.274399757385254
    8. ',' → logprob: -10.399399757385254
    9. '=' → logprob: -10.899399757385254
    10. ' and' → logprob: -11.649399757385254

Token 316: '5' (ID: 20)
  Prédit: '5'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.0015084355836734176
    2. '6' → logprob: -6.5015082359313965
    3. ' ' → logprob: -12.251508712768555
    4. '５' → logprob: -15.189008712768555
    5. '
' → logprob: -15.501508712768555
    6. '   ' → logprob: -16.001508712768555
    7. '```' → logprob: -16.314008712768555
    8. '7' → logprob: -16.626508712768555
    9. '  ' → logprob: -16.689008712768555
    10. '    ' → logprob: -17.001508712768555

Token 317: ' ou' (ID: 2031)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.012863710522651672
    2. ':' → logprob: -5.137863636016846
    3. '
' → logprob: -6.137863636016846
    4. '```' → logprob: -6.387863636016846
    5. '    
' → logprob: -6.637863636016846
    6. ',' → logprob: -7.512863636016846
    7. '  
' → logprob: -8.137864112854004
    8. ':
' → logprob: -8.637864112854004
    9. '\n' → logprob: -8.762864112854004
    10. ')' → logprob: -9.262864112854004

Token 318: ' ' (ID: 220)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.5912229418754578
    2. '(j' → logprob: -1.0912230014801025
    3. '(' → logprob: -2.9662230014801025
    4. ' j' → logprob: -3.2162230014801025
    5. 'j' → logprob: -4.216222763061523
    6. '6' → logprob: -6.841222763061523
    7. ' ' → logprob: -7.091222763061523
    8. ' y' → logprob: -7.966222763061523
    9. '((' → logprob: -7.966222763061523
    10. ' not' → logprob: -8.716222763061523

Token 319: '5' (ID: 20)
  Prédit: '(j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(j' → logprob: -0.056173842400312424
    2. 'j' → logprob: -3.931173801422119
    3. ' (' → logprob: -3.931173801422119
    4. '(' → logprob: -4.556173801422119
    5. '((' → logprob: -6.806173801422119
    6. 'not' → logprob: -7.056173801422119
    7. ' j' → logprob: -7.056173801422119
    8. 'y' → logprob: -7.431173801422119
    9. '(not' → logprob: -7.931173801422119
    10. '6' → logprob: -8.056174278259277

Token 320: ' max' (ID: 2999)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.002973198890686
    2. ':' → logprob: -1.377973198890686
    3. ' and' → logprob: -1.377973198890686
    4. ',' → logprob: -3.0029730796813965
    5. ')' → logprob: -3.7529730796813965
    6. ':
' → logprob: -4.6279730796813965
    7. '_' → logprob: -5.1279730796813965
    8. ' or' → logprob: -5.5029730796813965
    9. '    ' → logprob: -5.6279730796813965
    10. '):' → logprob: -5.7529730796813965

Token 321: ' si' (ID: 1784)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.2478751391172409
    2. '   ' → logprob: -2.122875213623047
    3. ':
' → logprob: -3.247875213623047
    4. ',' → logprob: -3.747875213623047
    5. ')' → logprob: -4.122875213623047
    6. '):' → logprob: -4.872875213623047
    7. ' and' → logprob: -6.372875213623047
    8. '```' → logprob: -6.372875213623047
    9. ' :' → logprob: -6.497875213623047
    10. ' ' → logprob: -6.872875213623047

Token 322: ' pas' (ID: 2173)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' (' → logprob: -1.0929843187332153
    2. 'j' → logprob: -1.4679843187332153
    3. ' j' → logprob: -1.7179843187332153
    4. '(j' → logprob: -1.8429843187332153
    5. ' not' → logprob: -3.092984199523926
    6. 'not' → logprob: -3.717984199523926
    7. '(' → logprob: -4.217984199523926
    8. ' abs' → logprob: -6.092984199523926
    9. 'abs' → logprob: -6.217984199523926
    10. 'max' → logprob: -6.842984199523926

Token 323: ' ' (ID: 220)
  Prédit: '(j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(j' → logprob: -0.34081465005874634
    2. ' (' → logprob: -2.0908145904541016
    3. '(' → logprob: -2.5908145904541016
    4. '((' → logprob: -2.5908145904541016
    5. ' ((' → logprob: -4.590814590454102
    6. '6' → logprob: -6.090814590454102
    7. ' de' → logprob: -7.340814590454102
    8. ' j' → logprob: -7.465814590454102
    9. ' ' → logprob: -8.090814590454102
    10. '(((' → logprob: -8.465814590454102

Token 324: '6' (ID: 21)
  Prédit: '(j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(j' → logprob: -0.05119462311267853
    2. '((' → logprob: -3.801194667816162
    3. '(' → logprob: -3.926194667816162
    4. ' (' → logprob: -5.301194667816162
    5. '6' → logprob: -6.676194667816162
    6. '(y' → logprob: -7.801194667816162
    7. ' ((' → logprob: -8.551194190979004
    8. 'de' → logprob: -8.801194190979004
    9. ' ' → logprob: -9.426194190979004
    10. 'j' → logprob: -9.551194190979004

Token 325: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.012427473440766335
    2. '
' → logprob: -5.26242733001709
    3. ',' → logprob: -6.63742733001709
    4. '```' → logprob: -6.63742733001709
    5. ':' → logprob: -6.88742733001709
    6. '    
' → logprob: -7.13742733001709
    7. '  
' → logprob: -7.38742733001709
    8. 'def' → logprob: -8.01242733001709
    9. ' ' → logprob: -8.26242733001709
    10. ':
' → logprob: -8.38742733001709

Token 326: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.034295931458473206
    2. '
' → logprob: -3.5342960357666016
    3. '    
' → logprob: -6.034296035766602
    4. '  
' → logprob: -7.409296035766602
    5. '```' → logprob: -7.409296035766602
    6. 'def' → logprob: -8.034296035766602
    7. ' 
' → logprob: -8.784296035766602
    8. '\n' → logprob: -9.159296035766602
    9. '   
' → logprob: -9.284296035766602
    10. ')' → logprob: -9.784296035766602

Token 327: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.007959354668855667
    2. '    
' → logprob: -5.507959365844727
    3. '
' → logprob: -5.632959365844727
    4. 'def' → logprob: -9.132959365844727
    5. 'if' → logprob: -10.007959365844727
    6. ' 
' → logprob: -10.132959365844727
    7. '   
' → logprob: -10.507959365844727
    8. '  
' → logprob: -10.882959365844727
    9. ' if' → logprob: -10.882959365844727
    10. '```' → logprob: -11.257959365844727

Token 328: ' Ces' (ID: 35720)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.013437376357614994
    2. '
' → logprob: -4.513437271118164
    3. '    
' → logprob: -6.638437271118164
    4. ' if' → logprob: -7.763437271118164
    5. ' 
' → logprob: -7.763437271118164
    6. '  
' → logprob: -9.888437271118164
    7. '   
' → logprob: -9.888437271118164
    8. 'def' → logprob: -10.013437271118164
    9. 'if' → logprob: -10.138437271118164
    10. '```' → logprob: -11.388437271118164

Token 329: ' conditions' (ID: 6409)
  Prédit: ' conditions'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' conditions' → logprob: -0.4424239993095398
    2. 'conditions' → logprob: -2.5674240589141846
    3. 'def' → logprob: -2.5674240589141846
    4. ' ' → logprob: -2.6924240589141846
    5. ' ' → logprob: -3.8174240589141846
    6. '   ' → logprob: -3.8174240589141846
    7. ' contraintes' → logprob: -3.8174240589141846
    8. ' def' → logprob: -4.1924238204956055
    9. ' if' → logprob: -4.3174238204956055
    10. ' espaces' → logprob: -4.4424238204956055

Token 330: ' seront' (ID: 35024)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.21201787889003754
    2. ' =' → logprob: -2.087017774581909
    3. 'def' → logprob: -3.962017774581909
    4. ' if' → logprob: -3.962017774581909
    5. 'if' → logprob: -5.212018013000488
    6. ' n' → logprob: -5.712018013000488
    7. '  ' → logprob: -5.962018013000488
    8. ' ' → logprob: -6.087018013000488
    9. 'import' → logprob: -6.212018013000488
    10. '=' → logprob: -6.587018013000488

Token 331: ' considér' (ID: 68502)
  Prédit: ' vér'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' vér' → logprob: -0.5929381251335144
    2. 'v' → logprob: -1.2179381847381592
    3. 'impl' → logprob: -2.967938184738159
    4. 'assert' → logprob: -3.967938184738159
    5. ' ' → logprob: -4.34293794631958
    6. 'valid' → logprob: -4.71793794631958
    7. '#' → logprob: -4.71793794631958
    8. ' contrô' → logprob: -4.96793794631958
    9. '   ' → logprob: -5.09293794631958
    10. '```' → logprob: -5.34293794631958

Token 332: 'ées' (ID: 5161)
  Prédit: 'ées'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ées' → logprob: -0.2371378391981125
    2. 'érées' → logprob: -2.112137794494629
    3. 'nées' → logprob: -3.362137794494629
    4. 'r' → logprob: -3.487137794494629
    5. 'er' → logprob: -4.987137794494629
    6. 'es' → logprob: -5.362137794494629
    7. 'é' → logprob: -5.612137794494629
    8. 'és' → logprob: -5.737137794494629
    9. '#' → logprob: -6.737137794494629
    10. 't' → logprob: -6.862137794494629

Token 333: ' val' (ID: 1459)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.009210065007209778
    2. '    
' → logprob: -5.634210109710693
    3. '  ' → logprob: -6.509210109710693
    4. ' ' → logprob: -7.009210109710693
    5. '  
' → logprob: -7.134210109710693
    6. ':' → logprob: -7.384210109710693
    7. 'def' → logprob: -7.759210109710693
    8. '    ' → logprob: -8.009209632873535
    9. ' ' → logprob: -8.384209632873535
    10. '   
' → logprob: -8.884209632873535

Token 334: 'ides' (ID: 4105)
  Prédit: 'ides'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ides' → logprob: -0.23871159553527832
    2. 'id' → logprob: -1.7387115955352783
    3. 'ide' → logprob: -3.8637115955352783
    4. '#' → logprob: -4.863711357116699
    5. 'idé' → logprob: -6.488711357116699
    6. '=' → logprob: -7.113711357116699
    7. '_id' → logprob: -7.363711357116699
    8. 'isées' → logprob: -7.363711357116699
    9. 'ées' → logprob: -7.488711357116699
    10. 'idez' → logprob: -7.863711357116699

Token 335: ' dans' (ID: 2671)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.15146291255950928
    2. ':' → logprob: -2.401463031768799
    3. '
' → logprob: -3.776463031768799
    4. ':
' → logprob: -4.776463031768799
    5. '    
' → logprob: -5.276463031768799
    6. '  
' → logprob: -5.776463031768799
    7. 'def' → logprob: -5.901463031768799
    8. '\n' → logprob: -6.401463031768799
    9. '```' → logprob: -6.651463031768799
    10. ',' → logprob: -7.026463031768799

Token 336: ' l' (ID: 305)
  Prédit: 'le'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'le' → logprob: -0.6973325610160828
    2. 'la' → logprob: -1.3223326206207275
    3. 'l' → logprob: -2.4473326206207275
    4. 'les' → logprob: -2.6973326206207275
    5. ' la' → logprob: -3.3223326206207275
    6. ' le' → logprob: -4.072332382202148
    7. ' cette' → logprob: -5.072332382202148
    8. ' l' → logprob: -5.197332382202148
    9. 'def' → logprob: -5.197332382202148
    10. 'une' → logprob: -6.322332382202148

Token 337: ''entrée' (ID: 115820)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.2544812560081482
    2. ''appel' → logprob: -1.754481315612793
    3. 'e' → logprob: -3.754481315612793
    4. 'code' → logprob: -4.754481315612793
    5. 'def' → logprob: -5.254481315612793
    6. ''' → logprob: -5.254481315612793
    7. ''entrée' → logprob: -7.004481315612793
    8. '#' → logprob: -7.129481315612793
    9. ''ensemble' → logprob: -7.504481315612793
    10. 'if' → logprob: -7.754481315612793

Token 338: '.

' (ID: 364)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0766858235001564
    2. '
' → logprob: -3.076685905456543
    3. '    
' → logprob: -3.826685905456543
    4. 'def' → logprob: -6.201685905456543
    5. ':' → logprob: -6.576685905456543
    6. '  
' → logprob: -7.201685905456543
    7. ' 
' → logprob: -7.951685905456543
    8. '	
' → logprob: -8.076685905456543
    9. '   
' → logprob: -8.576685905456543
    10. '```' → logprob: -8.701685905456543

Token 339: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.006649414077401161
    2. '
' → logprob: -5.631649494171143
    3. '    
' → logprob: -6.131649494171143
    4. 'def' → logprob: -7.131649494171143
    5. 'import' → logprob: -11.006649017333984
    6. '   
' → logprob: -11.631649017333984
    7. '   ' → logprob: -11.756649017333984
    8. 'from' → logprob: -11.881649017333984
    9. ' 
' → logprob: -12.006649017333984
    10. '  
' → logprob: -12.256649017333984

Token 340: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2896064519882202
    2. 'def' → logprob: -1.5396064519882202
    3. ' def' → logprob: -4.28960657119751
    4. 'import' → logprob: -5.03960657119751
    5. 'from' → logprob: -5.41460657119751
    6. 'paths' → logprob: -6.16460657119751
    7. ' paths' → logprob: -6.28960657119751
    8. ' from' → logprob: -6.66460657119751
    9. ' sequences' → logprob: -6.66460657119751
    10. ' stack' → logprob: -7.03960657119751

Token 341: ' Cette' (ID: 27383)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.4812782108783722
    2. '   ' → logprob: -1.4812781810760498
    3. 'from' → logprob: -2.35627818107605
    4. ' from' → logprob: -3.85627818107605
    5. ' def' → logprob: -4.481278419494629
    6. 'import' → logprob: -4.606278419494629
    7. 'if' → logprob: -5.606278419494629
    8. 'paths' → logprob: -5.606278419494629
    9. ' if' → logprob: -5.981278419494629
    10. ' paths' → logprob: -6.606278419494629

Token 342: ' fonction' (ID: 17610)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.21072301268577576
    2. ' def' → logprob: -2.0857229232788086
    3. '   ' → logprob: -2.8357229232788086
    4. ' indentation' → logprob: -6.460722923278809
    5. ' function' → logprob: -7.335722923278809
    6. '
' → logprob: -7.585722923278809
    7. ' fonction' → logprob: -7.710722923278809
    8. 'import' → logprob: -7.835722923278809
    9. ' ligne' → logprob: -7.835722923278809
    10. ' ' → logprob: -7.835722923278809

Token 343: ' vérifier' (ID: 93671)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.26846373081207275
    2. '   ' → logprob: -2.143463611602783
    3. ' def' → logprob: -3.268463611602783
    4. ' continue' → logprob: -3.768463611602783
    5. ' va' → logprob: -4.518463611602783
    6. ' est' → logprob: -4.643463611602783
    7. ':' → logprob: -5.518463611602783
    8. ' utilise' → logprob: -5.643463611602783
    9. ' déf' → logprob: -6.143463611602783
    10. ' recursive' → logprob: -6.268463611602783

Token 344: 'a' (ID: 64)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.15418554842472076
    2. '   ' → logprob: -2.2791855335235596
    3. 'a' → logprob: -3.9041855335235596
    4. '_' → logprob: -5.029185771942139
    5. 'e' → logprob: -5.404185771942139
    6. 'ra' → logprob: -5.904185771942139
    7. ' def' → logprob: -6.654185771942139
    8. 'er' → logprob: -7.029185771942139
    9. 'if' → logprob: -7.779185771942139
    10. ' ' → logprob: -7.904185771942139

Token 345: ' la' (ID: 557)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6182851791381836
    2. 'def' → logprob: -1.6182851791381836
    3. '  ' → logprob: -2.9932851791381836
    4. ' if' → logprob: -3.2432851791381836
    5. ' les' → logprob: -3.2432851791381836
    6. ' ' → logprob: -3.3682851791381836
    7. 'if' → logprob: -3.3682851791381836
    8. ' la' → logprob: -3.6182851791381836
    9. ' si' → logprob: -5.118285179138184
    10. '<|end|>' → logprob: -5.243285179138184

Token 346: ' valid' (ID: 4529)
  Prédit: 'valid'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'valid' → logprob: -0.08002056181430817
    2. 'def' → logprob: -3.4550206661224365
    3. 'suite' → logprob: -3.9550206661224365
    4. 'poss' → logprob: -4.330020427703857
    5. ' valid' → logprob: -5.205020427703857
    6. 'dé' → logprob: -6.580020427703857
    7. 'exist' → logprob: -6.705020427703857
    8. 's' → logprob: -7.455020427703857
    9. '_valid' → logprob: -7.705020427703857
    10. '#' → logprob: -7.830020427703857

Token 347: 'ité' (ID: 3761)
  Prédit: 'ité'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ité' → logprob: -0.021495243534445763
    2. 'ation' → logprob: -4.271495342254639
    3. 'it' → logprob: -5.646495342254639
    4. 'ite' → logprob: -6.021495342254639
    5. '#' → logprob: -7.646495342254639
    6. 'ity' → logprob: -7.896495342254639
    7. 'ités' → logprob: -8.89649486541748
    8. 'def' → logprob: -9.14649486541748
    9. 'é' → logprob: -9.27149486541748
    10. 'e' → logprob: -9.89649486541748

Token 348: ' d' (ID: 272)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.39213088154792786
    2. ' def' → logprob: -1.2671308517456055
    3. '   ' → logprob: -4.6421308517456055
    4. ' de' → logprob: -5.2671308517456055
    5. '(j' → logprob: -5.3921308517456055
    6. '_score' → logprob: -5.3921308517456055
    7. ' du' → logprob: -5.6421308517456055
    8. ' (' → logprob: -6.1421308517456055
    9. ' des' → logprob: -6.1421308517456055
    10. '_def' → logprob: -6.7671308517456055

Token 349: ''un' (ID: 9788)
  Prédit: ' la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' la' → logprob: -1.1016093492507935
    2. ' le' → logprob: -1.3516093492507935
    3. '   ' → logprob: -1.6016093492507935
    4. 'le' → logprob: -3.101609230041504
    5. '_score' → logprob: -3.101609230041504
    6. ' ' → logprob: -3.726609230041504
    7. '_' → logprob: -4.226609230041504
    8. 'e' → logprob: -4.351609230041504
    9. 'def' → logprob: -4.351609230041504
    10. ' les' → logprob: -4.851609230041504

Token 350: ' état' (ID: 59181)
  Prédit: 'score'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'score' → logprob: -0.16556906700134277
    2. ' score' → logprob: -2.1655690670013428
    3. 'point' → logprob: -3.9155690670013428
    4. ' point' → logprob: -5.165569305419922
    5. 'state' → logprob: -5.790569305419922
    6. ' ' → logprob: -6.790569305419922
    7. '_score' → logprob: -7.040569305419922
    8. 'def' → logprob: -7.415569305419922
    9. ' chemin' → logprob: -7.415569305419922
    10. 'che' → logprob: -7.540569305419922

Token 351: ' selon' (ID: 27571)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.06945612281560898
    2. ' def' → logprob: -3.694456100463867
    3. '(j' → logprob: -4.194456100463867
    4. '   ' → logprob: -4.319456100463867
    5. '_state' → logprob: -5.694456100463867
    6. '_score' → logprob: -5.819456100463867
    7. ' (' → logprob: -5.819456100463867
    8. '(score' → logprob: -7.194456100463867
    9. '(' → logprob: -7.569456100463867
    10. '_def' → logprob: -7.819456100463867

Token 352: ' les' (ID: 1341)
  Prédit: ' les'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' les' → logprob: -1.0933921337127686
    2. 'def' → logprob: -1.4683921337127686
    3. 'les' → logprob: -1.9683921337127686
    4. ' la' → logprob: -2.4683921337127686
    5. 'le' → logprob: -2.9683921337127686
    6. ' le' → logprob: -3.0933921337127686
    7. 'la' → logprob: -3.2183921337127686
    8. '   ' → logprob: -3.5933921337127686
    9. ' j' → logprob: -4.593392372131348
    10. 'l' → logprob: -4.843392372131348

Token 353: ' règles' (ID: 67042)
  Prédit: ' règles'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' règles' → logprob: -0.21250002086162567
    2. 'def' → logprob: -2.9625000953674316
    3. 'score' → logprob: -3.0875000953674316
    4. 'r' → logprob: -3.4625000953674316
    5. 'rules' → logprob: -3.5875000953674316
    6. 'points' → logprob: -4.962500095367432
    7. 'scores' → logprob: -4.962500095367432
    8. ' rules' → logprob: -5.087500095367432
    9. ' déf' → logprob: -5.962500095367432
    10. ' score' → logprob: -6.087500095367432

Token 354: ' du' (ID: 1462)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.11475963145494461
    2. '   ' → logprob: -2.864759683609009
    3. ' def' → logprob: -2.989759683609009
    4. '
' → logprob: -8.36475944519043
    5. ':def' → logprob: -8.36475944519043
    6. ':' → logprob: -8.86475944519043
    7. '(def' → logprob: -9.23975944519043
    8. '(' → logprob: -9.23975944519043
    9. '    
' → logprob: -9.98975944519043
    10. ' déf' → logprob: -10.48975944519043

Token 355: ' score' (ID: 8429)
  Prédit: 'jeu'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'jeu' → logprob: -0.7167835235595703
    2. 'score' → logprob: -1.2167835235595703
    3. 'ten' → logprob: -1.9667835235595703
    4. 'match' → logprob: -2.7167835235595703
    5. 'je' → logprob: -6.21678352355957
    6. ' jeu' → logprob: -6.46678352355957
    7. 'point' → logprob: -6.59178352355957
    8. '#' → logprob: -6.71678352355957
    9. 'game' → logprob: -6.96678352355957
    10. 'def' → logprob: -6.96678352355957

Token 356: '.
' (ID: 558)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.026193348690867424
    2. '   ' → logprob: -4.026193141937256
    3. ' def' → logprob: -6.026193141937256
    4. ':' → logprob: -6.151193141937256
    5. '
' → logprob: -6.276193141937256
    6. '(' → logprob: -8.026193618774414
    7. ':def' → logprob: -8.651193618774414
    8. '(def' → logprob: -8.776193618774414
    9. ':
' → logprob: -9.026193618774414
    10. '_def' → logprob: -9.151193618774414

Token 357: '   ' (ID: 271)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.5869212746620178
    2. '   ' → logprob: -0.9619212746620178
    3. '
' → logprob: -3.211921215057373
    4. '    
' → logprob: -4.211921215057373
    5. ' def' → logprob: -5.086921215057373
    6. ' 
' → logprob: -8.461921691894531
    7. '	def' → logprob: -9.336921691894531
    8. '   
' → logprob: -9.461921691894531
    9. '```' → logprob: -10.211921691894531
    10. '  
' → logprob: -10.336921691894531

Token 358: ' def' (ID: 1056)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' (adapté à ' def') → logprob: -0.1260201781988144
    2. '   ' → logprob: -2.5010201930999756
    3. ' def' → logprob: -3.6260201930999756
    4. '
' → logprob: -4.7510199546813965
    5. '    
' → logprob: -6.8760199546813965
    6. '	def' → logprob: -10.126020431518555
    7. ' 
' → logprob: -10.251020431518555
    8. '   
' → logprob: -11.376020431518555
    9. '  
' → logprob: -11.876020431518555
    10. '        
' → logprob: -13.626020431518555

Token 359: ' valid' (ID: 4529)
  Prédit: ' is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' is' → logprob: -1.1659260988235474
    2. 'is' → logprob: -1.2909260988235474
    3. ' valid' → logprob: -1.4159260988235474
    4. 'valid' → logprob: -1.9159260988235474
    5. ' valide' → logprob: -4.415925979614258
    6. ' est' → logprob: -4.915925979614258
    7. 'est' → logprob: -6.790925979614258
    8. 'state' → logprob: -6.915925979614258
    9. 'score' → logprob: -7.165925979614258
    10. ' state' → logprob: -7.540925979614258

Token 360: '_state' (ID: 9479)
  Prédit: '_state'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_state' → logprob: -0.20377345383167267
    2. '_score' → logprob: -1.7037734985351562
    3. '_' → logprob: -6.703773498535156
    4. '(state' → logprob: -7.703773498535156
    5. '(score' → logprob: -8.578773498535156
    6. '(' → logprob: -9.453773498535156
    7. '(i' → logprob: -9.578773498535156
    8. '_(' → logprob: -9.953773498535156
    9. '_point' → logprob: -9.953773498535156
    10. '_pos' → logprob: -10.078773498535156

Token 361: '(j' (ID: 4997)
  Prédit: '(j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(j' → logprob: -0.003831429174169898
    2. '(' → logprob: -6.003831386566162
    3. ' (' → logprob: -7.003831386566162
    4. '(score' → logprob: -8.87883186340332
    5. '(i' → logprob: -9.37883186340332
    6. '(s' → logprob: -9.50383186340332
    7. '   ' → logprob: -9.87883186340332
    8. '(p' → logprob: -10.87883186340332
    9. ' ' → logprob: -11.62883186340332
    10. '(a' → logprob: -12.00383186340332

Token 362: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.03969806805253029
    2. ' ,' → logprob: -3.2896981239318848
    3. ',j' → logprob: -6.664698123931885
    4. '_,' → logprob: -8.539697647094727
    5. ',y' → logprob: -9.914697647094727
    6. '_points' → logprob: -10.539697647094727
    7. '_score' → logprob: -10.664697647094727
    8. '_' → logprob: -11.164697647094727
    9. ' <=' → logprob: -12.164697647094727
    10. '   ' → logprob: -12.289697647094727

Token 363: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.2811805009841919
    2. ' y' → logprob: -1.406180500984192
    3. '   ' → logprob: -10.781180381774902
    4. ' ' → logprob: -12.906180381774902
    5. '	y' → logprob: -13.281180381774902
    6. '  ' → logprob: -13.406180381774902
    7. '    ' → logprob: -13.406180381774902
    8. ' ' → logprob: -14.406180381774902
    9. ',' → logprob: -15.031180381774902
    10. ',y' → logprob: -15.281180381774902

Token 364: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.0022956132888793945
    2. '):
' → logprob: -6.12729549407959
    3. ')' → logprob: -9.62729549407959
    4. ',' → logprob: -10.25229549407959
    5. '   ' → logprob: -12.25229549407959
    6. '):
' → logprob: -13.12729549407959
    7. ' ):' → logprob: -13.62729549407959
    8. ':' → logprob: -13.87729549407959
    9. '):

' → logprob: -15.37729549407959
    10. ' ' → logprob: -16.877296447753906

Token 365: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.026824891567230225
    2. '   ' → logprob: -3.651824951171875
    3. ':' → logprob: -8.526824951171875
    4. '    
' → logprob: -8.651824951171875
    5. '        
' → logprob: -10.026824951171875
    6. '    ' → logprob: -10.026824951171875
    7. '#' → logprob: -12.026824951171875
    8. ' if' → logprob: -12.026824951171875
    9. ' 
' → logprob: -12.151824951171875
    10. '	   ' → logprob: -12.151824951171875

Token 366: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.8694587349891663
    2. ' if' → logprob: -0.9944587349891663
    3. 'if' → logprob: -1.9944586753845215
    4. '   ' → logprob: -2.6194586753845215
    5. 'return' → logprob: -7.8694586753845215
    6. ' return' → logprob: -8.11945915222168
    7. '
' → logprob: -8.24445915222168
    8. '    
' → logprob: -8.49445915222168
    9. '        
' → logprob: -8.49445915222168
    10. '    ' → logprob: -8.74445915222168

Token 367: ' Cas' (ID: 8066)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.46490639448165894
    2. ' if' → logprob: -1.4649064540863037
    3. '   ' → logprob: -1.9649064540863037
    4. '       ' → logprob: -7.714906215667725
    5. 'return' → logprob: -10.589906692504883
    6. '    ' → logprob: -10.714906692504883
    7. '	if' → logprob: -10.839906692504883
    8. '  ' → logprob: -11.839906692504883
    9. ' ' → logprob: -12.589906692504883
    10. ' return' → logprob: -12.714906692504883

Token 368: ' fin' (ID: 2131)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6776115894317627
    2. ' ==' → logprob: -0.9276115894317627
    3. ' if' → logprob: -3.8026115894317627
    4. '    ' → logprob: -3.9276115894317627
    5. '==' → logprob: -4.552611351013184
    6. ' j' → logprob: -4.802611351013184
    7. '       ' → logprob: -4.802611351013184
    8. ' <=' → logprob: -5.302611351013184
    9. ' ' → logprob: -5.552611351013184
    10. '=' → logprob: -6.052611351013184

Token 369: ' :' (ID: 712)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.10478921234607697
    2. ' if' → logprob: -2.7297892570495605
    3. '       ' → logprob: -4.3547892570495605
    4. 'if' → logprob: -5.1047892570495605
    5. ':' → logprob: -5.2297892570495605
    6. '=' → logprob: -6.2297892570495605
    7. ' :' → logprob: -6.2297892570495605
    8. '  ' → logprob: -6.3547892570495605
    9. ' =' → logprob: -6.3547892570495605
    10. ' ' → logprob: -7.3547892570495605

Token 370: ' un' (ID: 537)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.21818403899669647
    2. ' if' → logprob: -2.343183994293213
    3. '       ' → logprob: -2.593183994293213
    4. 'if' → logprob: -4.218183994293213
    5. '    ' → logprob: -5.968183994293213
    6. '
' → logprob: -6.593183994293213
    7. '    
' → logprob: -6.718183994293213
    8. ' return' → logprob: -6.843183994293213
    9. ' (' → logprob: -6.968183994293213
    10. '	if' → logprob: -7.093183994293213

Token 371: ' joueur' (ID: 72629)
  Prédit: ' joueur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' joueur' → logprob: -0.08299696445465088
    2. '(j' → logprob: -3.7079968452453613
    3. 'jou' → logprob: -4.207996845245361
    4. ' des' → logprob: -4.457996845245361
    5. ' j' → logprob: -5.082996845245361
    6. ' (' → logprob: -5.207996845245361
    7. ' gagn' → logprob: -5.832996845245361
    8. '   ' → logprob: -6.082996845245361
    9. 'j' → logprob: -6.332996845245361
    10. ')' → logprob: -6.957996845245361

Token 372: ' gagne' (ID: 141776)
  Prédit: ' a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' a' → logprob: -0.8855757713317871
    2. 'a' → logprob: -1.135575771331787
    3. ' gagne' → logprob: -2.885575771331787
    4. '>=' → logprob: -3.010575771331787
    5. ' atteint' → logprob: -3.010575771331787
    6. ' ==' → logprob: -3.260575771331787
    7. '==' → logprob: -3.385575771331787
    8. ' >=' → logprob: -4.135575771331787
    9. '   ' → logprob: -4.510575771331787
    10. ' ' → logprob: -5.635575771331787

Token 373: ' clairement' (ID: 103427)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.007078594993799925
    2. '       ' → logprob: -5.507078647613525
    3. ':' → logprob: -6.757078647613525
    4. ' if' → logprob: -7.507078647613525
    5. '    ' → logprob: -7.632078647613525
    6. '  ' → logprob: -7.882078647613525
    7. ' :' → logprob: -9.507078170776367
    8. 'if' → logprob: -9.757078170776367
    9. ' ' → logprob: -9.882078170776367
    10. ' and' → logprob: -10.132078170776367

Token 374: '
' (ID: 198)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.025661921128630638
    2. '       ' → logprob: -4.275661945343018
    3. ':' → logprob: -4.775661945343018
    4. '    ' → logprob: -6.650661945343018
    5. '    
' → logprob: -7.900661945343018
    6. ' if' → logprob: -8.02566146850586
    7. ' :' → logprob: -8.02566146850586
    8. '  ' → logprob: -9.15066146850586
    9. '	if' → logprob: -9.40066146850586
    10. '     ' → logprob: -10.02566146850586

Token 375: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03129386901855469
    2. '       ' → logprob: -3.5312938690185547
    3. ':' → logprob: -7.281293869018555
    4. '    ' → logprob: -8.031293869018555
    5. ' if' → logprob: -8.281293869018555
    6. '    
' → logprob: -9.781293869018555
    7. ' :' → logprob: -10.281293869018555
    8. '  ' → logprob: -10.531293869018555
    9. 'if' → logprob: -10.906293869018555
    10. '     ' → logprob: -10.906293869018555

Token 376: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03153911978006363
    2. ' if' → logprob: -3.90653920173645
    3. 'if' → logprob: -4.656538963317871
    4. '       ' → logprob: -6.656538963317871
    5. '	if' → logprob: -9.156538963317871
    6. 'return' → logprob: -11.156538963317871
    7. '    ' → logprob: -11.531538963317871
    8. '   ' → logprob: -11.656538963317871
    9. ' return' → logprob: -12.031538963317871
    10. '  ' → logprob: -13.156538963317871

Token 377: ' Le' (ID: 2018)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.22053131461143494
    2. 'if' → logprob: -2.0955312252044678
    3. ' if' → logprob: -2.5955312252044678
    4. '	if' → logprob: -9.095531463623047
    5. '       ' → logprob: -9.470531463623047
    6. '    ' → logprob: -9.970531463623047
    7. '  ' → logprob: -10.845531463623047
    8. 'return' → logprob: -11.095531463623047
    9. ' ' → logprob: -11.595531463623047
    10. '   ' → logprob: -12.220531463623047

Token 378: ' jeu' (ID: 24626)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.5925880670547485
    2. ' if' → logprob: -1.2175880670547485
    3. ' return' → logprob: -2.842587947845459
    4. 'return' → logprob: -2.842587947845459
    5. '   ' → logprob: -4.342587947845459
    6. ' (' → logprob: -5.592587947845459
    7. 'abs' → logprob: -5.717587947845459
    8. ' abs' → logprob: -5.717587947845459
    9. ' ' → logprob: -5.967587947845459
    10. ' j' → logprob: -6.092587947845459

Token 379: ' s' (ID: 265)
  Prédit: ' est'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' est' → logprob: -1.1172056198120117
    2. 's' → logprob: -1.3672056198120117
    3. '   ' → logprob: -2.1172056198120117
    4. ' s' → logprob: -2.4922056198120117
    5. ' n' → logprob: -2.8672056198120117
    6. 'est' → logprob: -3.2422056198120117
    7. '       ' → logprob: -3.3672056198120117
    8. 'n' → logprob: -3.4922056198120117
    9. ' ==' → logprob: -4.867205619812012
    10. ' ' → logprob: -4.992205619812012

Token 380: ''arr' (ID: 49695)
  Prédit: ''arr'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''arr' → logprob: -0.6726046204566956
    2. 'e' → logprob: -1.0476045608520508
    3. 'arr' → logprob: -3.797604560852051
    4. ''est' → logprob: -4.047604560852051
    5. ''arrêt' → logprob: -4.297604560852051
    6. ''agit' → logprob: -4.547604560852051
    7. 'top' → logprob: -4.672604560852051
    8. 't' → logprob: -4.672604560852051
    9. 'est' → logprob: -4.797604560852051
    10. ''effect' → logprob: -5.297604560852051

Token 381: 'ête' (ID: 16808)
  Prédit: 'ête'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ête' → logprob: -0.04155054688453674
    2. 'êt' → logprob: -3.916550636291504
    3. 'ète' → logprob: -4.541550636291504
    4. 'et' → logprob: -5.666550636291504
    5. 'ete' → logprob: -5.916550636291504
    6. 'ê' → logprob: -6.916550636291504
    7. 'ève' → logprob: -7.541550636291504
    8. 'âte' → logprob: -7.666550636291504
    9. 'ette' → logprob: -8.291550636291504
    10. 'être' → logprob: -8.291550636291504

Token 382: ' si' (ID: 1784)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0419541597366333
    2. ' if' → logprob: -3.5419540405273438
    3. '       ' → logprob: -4.541954040527344
    4. 'if' → logprob: -7.291954040527344
    5. '    ' → logprob: -8.041954040527344
    6. '	if' → logprob: -8.791954040527344
    7. '  ' → logprob: -9.541954040527344
    8. ' ' → logprob: -9.791954040527344
    9. ' si' → logprob: -9.791954040527344
    10. '   ' → logprob: -10.791954040527344

Token 383: ' un' (ID: 537)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.3173353374004364
    2. '(j' → logprob: -1.3173353672027588
    3. ' j' → logprob: -6.94233512878418
    4. '   ' → logprob: -7.06733512878418
    5. '(' → logprob: -7.19233512878418
    6. 'j' → logprob: -7.69233512878418
    7. '(abs' → logprob: -7.69233512878418
    8. ' abs' → logprob: -8.44233512878418
    9. '((' → logprob: -9.19233512878418
    10. ' ' → logprob: -9.31733512878418

Token 384: ' joueur' (ID: 72629)
  Prédit: ' joueur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' joueur' → logprob: -0.017169764265418053
    2. 'jou' → logprob: -4.392169952392578
    3. ' des' → logprob: -6.017169952392578
    4. ' ' → logprob: -6.767169952392578
    5. ' player' → logprob: -7.642169952392578
    6. ' j' → logprob: -9.517169952392578
    7. '   ' → logprob: -9.642169952392578
    8. 'j' → logprob: -9.767169952392578
    9. ' joueurs' → logprob: -9.892169952392578
    10. ' (' → logprob: -9.892169952392578

Token 385: ' a' (ID: 261)
  Prédit: ' >='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >=' → logprob: -0.7655452489852905
    2. ' a' → logprob: -1.1405452489852905
    3. '>=' → logprob: -2.14054536819458
    4. ' atteint' → logprob: -2.89054536819458
    5. ' ' → logprob: -4.64054536819458
    6. 'a' → logprob: -4.76554536819458
    7. ' -' → logprob: -5.14054536819458
    8. '_a' → logprob: -6.01554536819458
    9. '   ' → logprob: -6.01554536819458
    10. ' gagne' → logprob: -6.14054536819458

Token 386: ' gagné' (ID: 150990)
  Prédit: '>='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '>=' → logprob: -0.8369659781455994
    2. ' >=' → logprob: -1.3369660377502441
    3. ' ' → logprob: -1.5869660377502441
    4. '5' → logprob: -3.336966037750244
    5. ' atteint' → logprob: -3.836966037750244
    6. '   ' → logprob: -4.461966037750244
    7. '6' → logprob: -5.336966037750244
    8. ' au' → logprob: -5.461966037750244
    9. 'j' → logprob: -5.586966037750244
    10. ' j' → logprob: -6.211966037750244

Token 387: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0032080153468996286
    2. ' and' → logprob: -6.628208160400391
    3. ':' → logprob: -7.253208160400391
    4. '       ' → logprob: -7.378208160400391
    5. '    ' → logprob: -8.87820816040039
    6. ' if' → logprob: -9.00320816040039
    7. ' ' → logprob: -9.25320816040039
    8. '  ' → logprob: -9.62820816040039
    9. ' (' → logprob: -10.62820816040039
    10. 'and' → logprob: -11.25320816040039

Token 388: ' aucun' (ID: 41678)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2601701617240906
    2. ' et' → logprob: -2.1351702213287354
    3. '       ' → logprob: -2.6351702213287354
    4. ' if' → logprob: -3.7601702213287354
    5. ' return' → logprob: -5.510169982910156
    6. ' avec' → logprob: -5.760169982910156
    7. ' and' → logprob: -6.510169982910156
    8. '    ' → logprob: -7.135169982910156
    9. ' si' → logprob: -7.135169982910156
    10. ' ' → logprob: -7.510169982910156

Token 389: ' point' (ID: 2438)
  Prédit: ' espace'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' espace' → logprob: -0.9442155957221985
    2. ' joueur' → logprob: -1.6942155361175537
    3. ' code' → logprob: -2.6942155361175537
    4. ' n' → logprob: -2.8192155361175537
    5. 'n' → logprob: -3.0692155361175537
    6. 'score' → logprob: -3.5692155361175537
    7. ' return' → logprob: -3.9442155361175537
    8. 'point' → logprob: -4.069215774536133
    9. ' score' → logprob: -4.069215774536133
    10. ' point' → logprob: -4.319215774536133

Token 390: ' supplémentaire' (ID: 111252)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.2611643671989441
    2. 'n' → logprob: -2.761164426803589
    3. ' supplémentaire' → logprob: -2.761164426803589
    4. '   ' → logprob: -3.011164426803589
    5. ' de' → logprob: -3.761164426803589
    6. ' ajouté' → logprob: -5.38616418838501
    7. ' ne' → logprob: -5.63616418838501
    8. '_' → logprob: -5.63616418838501
    9. ' pris' → logprob: -6.26116418838501
    10. '	' → logprob: -6.38616418838501

Token 391: ' n' (ID: 297)
  Prédit: ' n'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.943379819393158
    2. ' ne' → logprob: -1.4433798789978027
    3. ' à' → logprob: -2.1933798789978027
    4. '   ' → logprob: -2.6933798789978027
    5. ' possible' → logprob: -2.6933798789978027
    6. 'n' → logprob: -2.8183798789978027
    7. ' ' → logprob: -3.5683798789978027
    8. ')' → logprob: -4.818379878997803
    9. 'possible' → logprob: -4.943379878997803
    10. 'à' → logprob: -5.193379878997803

Token 392: ''est' (ID: 6616)
  Prédit: ''est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''est' → logprob: -0.018168672919273376
    2. '’est' → logprob: -5.2681684494018555
    3. 'e' → logprob: -5.8931684494018555
    4. ''' → logprob: -6.0181684494018555
    5. 'est' → logprob: -6.2681684494018555
    6. ''a' → logprob: -6.2681684494018555
    7. 'a' → logprob: -6.3931684494018555
    8. ' est' → logprob: -7.1431684494018555
    9. '_est' → logprob: -8.393168449401855
    10. 'é' → logprob: -8.518168449401855

Token 393: ' possible' (ID: 4149)
  Prédit: ' marqué'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' marqué' → logprob: -0.6568825244903564
    2. 'mar' → logprob: -1.2818825244903564
    3. ' mar' → logprob: -1.9068825244903564
    4. ' joué' → logprob: -4.031882286071777
    5. 'possible' → logprob: -4.656882286071777
    6. ' ajouté' → logprob: -5.031882286071777
    7. 'jou' → logprob: -5.156882286071777
    8. ' possible' → logprob: -5.281882286071777
    9. 'pris' → logprob: -5.656882286071777
    10. ' accord' → logprob: -6.531882286071777

Token 394: ' après' (ID: 16460)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00965078268200159
    2. '       ' → logprob: -5.009650707244873
    3. ':' → logprob: -6.759650707244873
    4. '    ' → logprob: -7.384650707244873
    5. '    
' → logprob: -8.259651184082031
    6. ' if' → logprob: -8.509651184082031
    7. '  ' → logprob: -8.634651184082031
    8. '\n' → logprob: -9.384651184082031
    9. 'if' → logprob: -9.759651184082031
    10. '.' → logprob: -10.009651184082031

Token 395: ' cela' (ID: 17542)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.19536465406417847
    2. '   ' → logprob: -2.1953647136688232
    3. '.' → logprob: -3.1953647136688232
    4. ' if' → logprob: -4.695364475250244
    5. ' un' → logprob: -5.820364475250244
    6. ' j' → logprob: -6.570364475250244
    7. 'if' → logprob: -6.570364475250244
    8. ' ' → logprob: -6.695364475250244
    9. ' return' → logprob: -6.945364475250244
    10. 'def' → logprob: -6.945364475250244

Token 396: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0006375004886649549
    2. ':' → logprob: -8.25063705444336
    3. '       ' → logprob: -9.00063705444336
    4. '.' → logprob: -9.50063705444336
    5. '    
' → logprob: -10.00063705444336
    6. ' if' → logprob: -10.25063705444336
    7. ',' → logprob: -10.87563705444336
    8. '    ' → logprob: -10.87563705444336
    9. '  ' → logprob: -11.37563705444336
    10. '<|end|>' → logprob: -11.62563705444336

Token 397: '        
' (ID: 3564)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.007684823591262102
    2. '       ' → logprob: -5.132684707641602
    3. ':' → logprob: -6.632684707641602
    4. '    
' → logprob: -8.882684707641602
    5. ')' → logprob: -9.507684707641602
    6. '\n' → logprob: -10.007684707641602
    7. ' :' → logprob: -10.132684707641602
    8. '):' → logprob: -10.257684707641602
    9. '
' → logprob: -10.882684707641602
    10. '    ' → logprob: -11.257684707641602

Token 398: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.47458139061927795
    2. '   ' → logprob: -0.9745813608169556
    3. '    
' → logprob: -8.724581718444824
    4. '
' → logprob: -8.974581718444824
    5. ' if' → logprob: -9.224581718444824
    6. '    ' → logprob: -9.974581718444824
    7. 'if' → logprob: -10.599581718444824
    8. '	   ' → logprob: -11.099581718444824
    9. '        
' → logprob: -11.599581718444824
    10. '	if' → logprob: -12.724581718444824

Token 399: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6159284114837646
    2. 'if' → logprob: -0.8659284114837646
    3. ' if' → logprob: -3.2409284114837646
    4. '       ' → logprob: -10.115928649902344
    5. '	if' → logprob: -11.490928649902344
    6. '   ' → logprob: -11.865928649902344
    7. '  ' → logprob: -12.865928649902344
    8. '    ' → logprob: -12.990928649902344
    9. ' ' → logprob: -12.990928649902344
    10. '    
' → logprob: -13.115928649902344

Token 400: ' R' (ID: 460)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.06536050140857697
    2. 'if' → logprob: -3.1903605461120605
    3. ' if' → logprob: -3.8153605461120605
    4. '       ' → logprob: -10.690360069274902
    5. '   ' → logprob: -10.940360069274902
    6. '	if' → logprob: -11.440360069274902
    7. 'def' → logprob: -11.815360069274902
    8. '    
' → logprob: -11.815360069274902
    9. '  ' → logprob: -12.440360069274902
    10. '    ' → logprob: -12.440360069274902

Token 401: 'è' (ID: 957)
  Prédit: 'eturn'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'eturn' → logprob: -0.007567230146378279
    2. '   ' → logprob: -6.132567405700684
    3. '       ' → logprob: -6.257567405700684
    4. 'if' → logprob: -6.257567405700684
    5. 'et' → logprob: -7.007567405700684
    6. 'e' → logprob: -8.632567405700684
    7. ' if' → logprob: -9.007567405700684
    8. '#' → logprob: -9.257567405700684
    9. 'es' → logprob: -9.882567405700684
    10. 'ec' → logprob: -10.007567405700684

Token 402: 'gle' (ID: 6024)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.4535137116909027
    2. 'gle' → logprob: -1.578513741493225
    3. 'gles' → logprob: -2.3285136222839355
    4. '   ' → logprob: -3.3285136222839355
    5. 'g' → logprob: -5.0785136222839355
    6. 'è' → logprob: -5.8285136222839355
    7. '#' → logprob: -6.2035136222839355
    8. ' ' → logprob: -6.2035136222839355
    9. '           ' → logprob: -6.3285136222839355
    10. ' #' → logprob: -6.4535136222839355

Token 403: ' ' (ID: 220)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.3920476734638214
    2. '   ' → logprob: -1.392047643661499
    3. '       ' → logprob: -3.142047643661499
    4. 'if' → logprob: -3.517047643661499
    5. 'def' → logprob: -7.517047882080078
    6. '	if' → logprob: -7.892047882080078
    7. ':' → logprob: -8.017047882080078
    8. ' =' → logprob: -8.142047882080078
    9. '    ' → logprob: -8.517047882080078
    10. '  ' → logprob: -8.767047882080078

Token 404: '1' (ID: 16)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.27678176760673523
    2. 'if' → logprob: -1.6517817974090576
    3. ' if' → logprob: -3.5267817974090576
    4. 'def' → logprob: -4.2767815589904785
    5. 'de' → logprob: -6.1517815589904785
    6. '=' → logprob: -6.7767815589904785
    7. '       ' → logprob: -7.2767815589904785
    8. '  ' → logprob: -8.026782035827637
    9. 'si' → logprob: -8.026782035827637
    10. ' ' → logprob: -8.151782035827637

Token 405: ':' (ID: 25)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.2017798274755478
    2. ' if' → logprob: -2.326779842376709
    3. ':' → logprob: -3.201779842376709
    4. ' :' → logprob: -3.451779842376709
    5. 'if' → logprob: -5.576779842376709
    6. '  ' → logprob: -6.201779842376709
    7. '    ' → logprob: -6.201779842376709
    8. '	if' → logprob: -6.951779842376709
    9. ' =' → logprob: -7.201779842376709
    10. '    
' → logprob: -7.326779842376709

Token 406: ' Un' (ID: 1367)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.2995101511478424
    2. ' if' → logprob: -1.92451012134552
    3. '(j' → logprob: -2.7995102405548096
    4. '   ' → logprob: -3.4245102405548096
    5. 'if' → logprob: -4.2995100021362305
    6. ' j' → logprob: -6.2995100021362305
    7. '    ' → logprob: -6.6745100021362305
    8. ' abs' → logprob: -7.2995100021362305
    9. '(' → logprob: -7.6745100021362305
    10. ' return' → logprob: -7.9245100021362305

Token 407: ' joueur' (ID: 72629)
  Prédit: ' joueur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' joueur' → logprob: -0.04149897024035454
    2. 'jou' → logprob: -4.166499137878418
    3. ' j' → logprob: -5.166499137878418
    4. ' ' → logprob: -5.416499137878418
    5. ' player' → logprob: -5.791499137878418
    6. 'j' → logprob: -6.166499137878418
    7. ' espace' → logprob: -6.291499137878418
    8. 'esp' → logprob: -7.416499137878418
    9. 'e' → logprob: -7.416499137878418
    10. ' abs' → logprob: -7.541499137878418

Token 408: ' gagne' (ID: 141776)
  Prédit: ' >='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >=' → logprob: -0.5454766154289246
    2. ' a' → logprob: -1.5454766750335693
    3. '>=' → logprob: -2.4204766750335693
    4. ' ==' → logprob: -2.6704766750335693
    5. ' atteint' → logprob: -4.29547643661499
    6. '==' → logprob: -4.67047643661499
    7. 'a' → logprob: -4.92047643661499
    8. '_a' → logprob: -5.54547643661499
    9. ' gagne' → logprob: -6.04547643661499
    10. ' ' → logprob: -6.04547643661499

Token 409: ' s' (ID: 265)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.12399432063102722
    2. '   ' → logprob: -2.7489943504333496
    3. 'if' → logprob: -3.1239943504333496
    4. ' ' → logprob: -5.49899435043335
    5. ' and' → logprob: -6.49899435043335
    6. ' si' → logprob: -6.99899435043335
    7. ' et' → logprob: -7.49899435043335
    8. '       ' → logprob: -7.62399435043335
    9. ':' → logprob: -8.373993873596191
    10. '    ' → logprob: -8.373993873596191

Token 410: ''il' (ID: 14683)
  Prédit: ' >='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >=' → logprob: -1.2100038528442383
    2. 'u' → logprob: -1.3350038528442383
    3. '>=' → logprob: -2.0850038528442383
    4. ' ' → logprob: -2.9600038528442383
    5. 'ur' → logprob: -2.9600038528442383
    6. '   ' → logprob: -3.2100038528442383
    7. ' j' → logprob: -3.4600038528442383
    8. ' a' → logprob: -3.4600038528442383
    9. 'a' → logprob: -3.7100038528442383
    10. ''il' → logprob: -3.8350038528442383

Token 411: ' a' (ID: 261)
  Prédit: '>='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>=' → logprob: -0.20900005102157593
    2. ' >=' → logprob: -1.8340001106262207
    3. ' a' → logprob: -4.209000110626221
    4. ' atteint' → logprob: -4.834000110626221
    5. 'a' → logprob: -5.834000110626221
    6. '==' → logprob: -6.709000110626221
    7. '>' → logprob: -7.709000110626221
    8. ' ' → logprob: -7.959000110626221
    9. ' ==' → logprob: -8.083999633789062
    10. 'atte' → logprob: -8.958999633789062

Token 412: ' ' (ID: 220)
  Prédit: '5'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.17605188488960266
    2. '>=' → logprob: -1.9260518550872803
    3. '6' → logprob: -5.426052093505859
    4. ' ' → logprob: -5.551052093505859
    5. 'j' → logprob: -5.676052093505859
    6. ' >=' → logprob: -6.676052093505859
    7. 'au' → logprob: -6.801052093505859
    8. '   ' → logprob: -7.801052093505859
    9. ' atteint' → logprob: -8.67605209350586
    10. ' au' → logprob: -8.80105209350586

Token 413: '5' (ID: 20)
  Prédit: '5'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.016595538705587387
    2. '>=' → logprob: -4.766595363616943
    3. ' ' → logprob: -5.141595363616943
    4. '6' → logprob: -6.766595363616943
    5. 'au' → logprob: -8.391595840454102
    6. ' >=' → logprob: -8.391595840454102
    7. ' au' → logprob: -8.891595840454102
    8. 'j' → logprob: -9.266595840454102
    9. ' cinq' → logprob: -9.641595840454102
    10. ' atteint' → logprob: -10.391595840454102

Token 414: ' points' (ID: 5571)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.09886831045150757
    2. 'and' → logprob: -2.8488683700561523
    3. ' et' → logprob: -4.348868370056152
    4. '-' → logprob: -4.598868370056152
    5. '<|end|>' → logprob: -5.473868370056152
    6. ' -' → logprob: -5.848868370056152
    7. ' ' → logprob: -6.723868370056152
    8. 'et' → logprob: -6.848868370056152
    9. ' points' → logprob: -6.973868370056152
    10. ' <=' → logprob: -7.348868370056152

Token 415: ' et' (ID: 859)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.08626703917980194
    2. 'and' → logprob: -2.5862669944763184
    3. '   ' → logprob: -5.461266994476318
    4. '<|end|>' → logprob: -6.836266994476318
    5. ' ' → logprob: -8.211267471313477
    6. ',' → logprob: -8.211267471313477
    7. '    ' → logprob: -8.336267471313477
    8. ' et' → logprob: -8.336267471313477
    9. '<|end|>' → logprob: -8.336267471313477
    10. ' -' → logprob: -8.836267471313477

Token 416: ' son' (ID: 2391)
  Prédit: ' y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.75774747133255
    2. ' j' → logprob: -0.88274747133255
    3. ' (' → logprob: -2.8827474117279053
    4. ' l' → logprob: -3.6327474117279053
    5. 'j' → logprob: -4.882747650146484
    6. ' abs' → logprob: -5.007747650146484
    7. ' ' → logprob: -5.132747650146484
    8. '(j' → logprob: -5.132747650146484
    9. 'y' → logprob: -5.382747650146484
    10. ' que' → logprob: -6.757747650146484

Token 417: ' advers' (ID: 33091)
  Prédit: ' -'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' -' → logprob: -0.985222339630127
    2. '-' → logprob: -1.235222339630127
    3. '_' → logprob: -1.735222339630127
    4. 'diff' → logprob: -2.985222339630127
    5. ' opponent' → logprob: -4.360222339630127
    6. 'é' → logprob: -4.860222339630127
    7. '_diff' → logprob: -4.985222339630127
    8. ' ' → logprob: -5.110222339630127
    9. ' advers' → logprob: -5.110222339630127
    10. '_adv' → logprob: -5.235222339630127

Token 418: 'aire' (ID: 8189)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.5969568490982056
    2. 'a' → logprob: -1.7219568490982056
    3. ' a' → logprob: -1.9719568490982056
    4. ' n' → logprob: -3.346956729888916
    5. '   ' → logprob: -3.846956729888916
    6. '  ' → logprob: -5.221956729888916
    7. 'ain' → logprob: -5.221956729888916
    8. ' ' → logprob: -5.346956729888916
    9. ' est' → logprob: -5.346956729888916
    10. 'u' → logprob: -5.471956729888916

Token 419: ' ' (ID: 220)
  Prédit: '<'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<' → logprob: -0.5904002785682678
    2. ' <=' → logprob: -1.840400218963623
    3. '<=' → logprob: -1.840400218963623
    4. ' <' → logprob: -2.090400218963623
    5. ' a' → logprob: -6.215400218963623
    6. 'a' → logprob: -6.465400218963623
    7. '<|end|>' → logprob: -7.465400218963623
    8. ' ' → logprob: -9.340400695800781
    9. ' ' → logprob: -9.840400695800781
    10. 'diff' → logprob: -10.465400695800781

Token 420: '3' (ID: 18)
  Prédit: '<'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '<' → logprob: -0.3508499562740326
    2. '<=' → logprob: -1.225849986076355
    3. ' <=' → logprob: -6.4758501052856445
    4. ' <' → logprob: -7.1008501052856445
    5. 'moins' → logprob: -10.975850105285645
    6. '≤' → logprob: -12.100850105285645
    7. 'le' → logprob: -12.725850105285645
    8. 'au' → logprob: -12.975850105285645
    9. 'a' → logprob: -13.100850105285645
    10. '>=' → logprob: -13.475850105285645

Token 421: ' ou' (ID: 2031)
  Prédit: ' or'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.013641768135130405
    2. 'or' → logprob: -5.138641834259033
    3. ' ou' → logprob: -5.513641834259033
    4. ':' → logprob: -7.013641834259033
    5. '   ' → logprob: -7.388641834259033
    6. '       ' → logprob: -7.763641834259033
    7. ' ' → logprob: -8.013641357421875
    8. '<|end|>' → logprob: -8.138641357421875
    9. ')' → logprob: -8.763641357421875
    10. '    ' → logprob: -9.013641357421875

Token 422: ' moins' (ID: 15924)
  Prédit: 'moins'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'moins' → logprob: -0.010949485003948212
    2. ' moins' → logprob: -4.635949611663818
    3. 'plus' → logprob: -7.260949611663818
    4. 'mo' → logprob: -8.76094913482666
    5. 'en' → logprob: -9.01094913482666
    6. 'less' → logprob: -10.01094913482666
    7. 'inf' → logprob: -10.51094913482666
    8. '4' → logprob: -10.63594913482666
    9. 'm' → logprob: -10.76094913482666
    10. ' ' → logprob: -10.76094913482666

Token 423: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16428245604038239
    2. ' if' → logprob: -2.6642825603485107
    3. ':' → logprob: -3.6642825603485107
    4. ' or' → logprob: -3.7892825603485107
    5. '       ' → logprob: -4.664282321929932
    6. ' and' → logprob: -4.664282321929932
    7. 'if' → logprob: -5.164282321929932
    8. '    ' → logprob: -6.164282321929932
    9. '  ' → logprob: -6.289282321929932
    10. ',' → logprob: -6.539282321929932

Token 424: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00043376852408982813
    2. '       ' → logprob: -8.125433921813965
    3. '    
' → logprob: -9.875433921813965
    4. ':' → logprob: -10.750433921813965
    5. '    ' → logprob: -10.750433921813965
    6. 'if' → logprob: -12.000433921813965
    7. '	if' → logprob: -12.125433921813965
    8. ' if' → logprob: -12.125433921813965
    9. '   ' → logprob: -12.375433921813965
    10. '  ' → logprob: -12.750433921813965

Token 425: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.055533185601234436
    2. 'if' (adapté à ' if') → logprob: -3.3055331707000732
    3. ' if' → logprob: -4.055533409118652
    4. '	if' → logprob: -11.680533409118652
    5. '       ' → logprob: -13.305533409118652
    6. '   ' → logprob: -14.180533409118652
    7. 'def' → logprob: -14.305533409118652
    8. '    ' → logprob: -14.430533409118652
    9. '    
' → logprob: -14.680533409118652
    10. '  ' → logprob: -14.805533409118652

Token 426: ' j' (ID: 441)
  Prédit: 'j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.714363157749176
    2. '(j' → logprob: -0.964363157749176
    3. ' (' → logprob: -2.5893630981445312
    4. ' j' → logprob: -2.9643630981445312
    5. '   ' → logprob: -6.714363098144531
    6. '(' → logprob: -6.839363098144531
    7. ' ' → logprob: -8.964363098144531
    8. '  ' → logprob: -9.964363098144531
    9. '	j' → logprob: -9.964363098144531
    10. '((' → logprob: -10.214363098144531

Token 427: ' ==' (ID: 951)
  Prédit: ' >='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >=' → logprob: -0.7126611471176147
    2. ' ==' → logprob: -0.8376611471176147
    3. '==' → logprob: -3.2126612663269043
    4. '>=' → logprob: -3.3376612663269043
    5. ' <' → logprob: -6.962661266326904
    6. '<' → logprob: -9.337660789489746
    7. ' <=' → logprob: -9.837660789489746
    8. ' ' → logprob: -10.087660789489746
    9. '<=' → logprob: -11.587660789489746
    10. '=' → logprob: -11.837660789489746

Token 428: ' ' (ID: 220)
  Prédit: '5'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -4.692145012086257e-05
    2. ' ' → logprob: -10.000046730041504
    3. '6' → logprob: -13.750046730041504
    4. '   ' → logprob: -15.625046730041504
    5. '    ' → logprob: -17.06254768371582
    6. '５' → logprob: -17.37504768371582
    7. '  ' → logprob: -17.43754768371582
    8. '٥' → logprob: -17.56254768371582
    9. '५' → logprob: -17.56254768371582
    10. '۵' → logprob: -17.62504768371582

Token 429: '5' (ID: 20)
  Prédit: '5'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -1.3306015716807451e-05
    2. ' ' → logprob: -11.25001335144043
    3. '6' → logprob: -16.37501335144043
    4. '   ' → logprob: -17.75001335144043
    5. '५' → logprob: -17.87501335144043
    6. '৫' → logprob: -17.93751335144043
    7. '    ' → logprob: -18.12501335144043
    8. '５' → logprob: -18.12501335144043
    9. '۵' → logprob: -18.12501335144043
    10. '٥' → logprob: -18.12501335144043

Token 430: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.16061027348041534
    2. 'and' → logprob: -1.910610318183899
    3. '   ' → logprob: -7.910610198974609
    4. ' ' → logprob: -12.03561019897461
    5. '	and' → logprob: -12.16061019897461
    6. '    ' → logprob: -12.78561019897461
    7. '       ' → logprob: -13.53561019897461
    8. ' и' → logprob: -13.66061019897461
    9. '  ' → logprob: -13.78561019897461
    10. '      ' → logprob: -14.66061019897461

Token 431: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.1602255403995514
    2. ' y' → logprob: -1.910225510597229
    3. '   ' → logprob: -14.160225868225098
    4. '	y' → logprob: -15.410225868225098
    5. '(y' → logprob: -15.535225868225098
    6. ' ' → logprob: -16.16022491455078
    7. '0' → logprob: -16.53522491455078
    8. '4' → logprob: -16.53522491455078
    9. ' (' → logprob: -16.66022491455078
    10. '  ' → logprob: -17.28522491455078

Token 432: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.27143263816833496
    2. '<=' → logprob: -1.771432638168335
    3. ' <' → logprob: -3.271432638168335
    4. '<' → logprob: -3.521432638168335
    5. ' ' → logprob: -9.396432876586914
    6. '   ' → logprob: -11.271432876586914
    7. ' ≤' → logprob: -11.521432876586914
    8. '≤' → logprob: -13.396432876586914
    9. '  ' → logprob: -13.521432876586914
    10. '	' → logprob: -13.646432876586914

Token 433: ' ' (ID: 220)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: 0.0
    2. ' ' → logprob: -18.25
    3. '2' → logprob: -19.375
    4. '۳' → logprob: -20.0
    5. '   ' → logprob: -20.875
    6. '３' → logprob: -21.0
    7. '३' → logprob: -21.625
    8. '৩' → logprob: -22.0
    9. '٣' → logprob: -22.25
    10. '```' → logprob: -22.375

Token 434: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -1.9361264946837764e-07
    2. '2' → logprob: -16.5
    3. '۳' → logprob: -18.25
    4. '３' → logprob: -18.375
    5. ' ' → logprob: -19.875
    6. '   ' → logprob: -20.0
    7. '३' → logprob: -20.25
    8. '٣' → logprob: -20.25
    9. '৩' → logprob: -20.375
    10. '```' → logprob: -20.375

Token 435: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.004001584369689226
    2. ':return' → logprob: -6.504001617431641
    3. ':
' → logprob: -6.629001617431641
    4. ' :' → logprob: -7.754001617431641
    5. '       ' → logprob: -7.754001617431641
    6. ' or' → logprob: -8.37900161743164
    7. '           ' → logprob: -10.25400161743164
    8. '   ' → logprob: -10.62900161743164
    9. ' and' → logprob: -11.50400161743164
    10. '	' → logprob: -13.25400161743164

Token 436: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.17792420089244843
    2. ':' → logprob: -1.9279241561889648
    3. '           ' → logprob: -4.427924156188965
    4. ':return' → logprob: -5.802924156188965
    5. ':
' → logprob: -6.677924156188965
    6. ' :' → logprob: -7.177924156188965
    7. ' or' → logprob: -8.177924156188965
    8. '   ' → logprob: -9.302924156188965
    9. ' return' → logprob: -9.677924156188965
    10. '        ' → logprob: -10.427924156188965

Token 437: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.5610780715942383
    2. ' return' → logprob: -1.5610780715942383
    3. '           ' → logprob: -2.1860780715942383
    4. '       ' → logprob: -2.3110780715942383
    5. '               ' → logprob: -5.061078071594238
    6. ':return' → logprob: -7.061078071594238
    7. '	return' → logprob: -8.061078071594238
    8. '
' → logprob: -8.311078071594238
    9. '   ' → logprob: -9.061078071594238
    10. '	       ' → logprob: -10.811078071594238

Token 438: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.018151231110095978
    2. ' True' → logprob: -4.01815128326416
    3. 'False' → logprob: -14.01815128326416
    4. '   ' → logprob: -14.64315128326416
    5. '       ' → logprob: -17.018150329589844
    6. '(True' → logprob: -17.268150329589844
    7. '1' → logprob: -18.768150329589844
    8. '    ' → logprob: -19.143150329589844
    9. ' ' → logprob: -19.518150329589844
    10. 'true' → logprob: -19.518150329589844

Token 439: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00950531754642725
    2. '   ' → logprob: -5.634505271911621
    3. '
' → logprob: -6.134505271911621
    4. '\n' → logprob: -6.509505271911621
    5. '    
' → logprob: -7.259505271911621
    6. '        
' → logprob: -7.509505271911621
    7. '<|end|>' → logprob: -8.384505271911621
    8. '    ' → logprob: -8.634505271911621
    9. '  
' → logprob: -8.634505271911621
    10. ')' → logprob: -9.884505271911621

Token 440: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00019698418327607214
    2. '   ' → logprob: -9.125197410583496
    3. '
' → logprob: -10.625197410583496
    4. '        
' → logprob: -10.875197410583496
    5. '    ' → logprob: -12.000197410583496
    6. '        ' → logprob: -12.125197410583496
    7. '      ' → logprob: -12.125197410583496
    8. '<|end|>' → logprob: -12.250197410583496
    9. ')' → logprob: -12.375197410583496
    10. '    
' → logprob: -12.625197410583496

Token 441: ' if' (ID: 538)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.000923965300898999
    2. ' if' → logprob: -7.750924110412598
    3. '   ' → logprob: -8.000924110412598
    4. 'if' (adapté à ' if') → logprob: -9.750924110412598
    5. 'elif' → logprob: -10.750924110412598
    6. ' elif' → logprob: -11.000924110412598
    7. '      ' → logprob: -11.125924110412598
    8. '    ' → logprob: -11.250924110412598
    9. '        
' → logprob: -11.250924110412598
    10. '     ' → logprob: -12.500924110412598

Token 442: ' y' (ID: 342)
  Prédit: ' y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.0090460991486907
    2. 'y' → logprob: -4.7590460777282715
    3. ' j' → logprob: -8.00904655456543
    4. 'j' → logprob: -9.88404655456543
    5. ' ' → logprob: -10.75904655456543
    6. '   ' → logprob: -11.13404655456543
    7. '5' → logprob: -12.50904655456543
    8. '  ' → logprob: -13.13404655456543
    9. '6' → logprob: -13.50904655456543
    10. '    ' → logprob: -13.63404655456543

Token 443: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.07892845571041107
    2. '==' → logprob: -2.5789284706115723
    3. ' ' → logprob: -11.203927993774414
    4. ' <=' → logprob: -11.328927993774414
    5. ' <' → logprob: -12.078927993774414
    6. '<=' → logprob: -12.953927993774414
    7. '<' → logprob: -13.203927993774414
    8. '5' → logprob: -14.078927993774414
    9. '=' → logprob: -15.203927993774414
    10. ')' → logprob: -15.578927993774414

Token 444: ' ' (ID: 220)
  Prédit: '5'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.009760575369000435
    2. ' ' → logprob: -4.63476037979126
    3. '   ' → logprob: -13.572260856628418
    4. '6' → logprob: -13.572260856628418
    5. '4' → logprob: -13.947260856628418
    6. '  ' → logprob: -15.072260856628418
    7. '```' → logprob: -16.3847599029541
    8. '[' → logprob: -16.4472599029541
    9. '    ' → logprob: -16.5722599029541
    10. ' ' → logprob: -16.7597599029541

Token 445: '5' (ID: 20)
  Prédit: '5'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -8.64970643306151e-05
    2. ' ' → logprob: -9.375086784362793
    3. '4' → logprob: -13.500086784362793
    4. '   ' → logprob: -17.000085830688477
    5. '５' → logprob: -17.687585830688477
    6. '  ' → logprob: -18.250085830688477
    7. '3' → logprob: -18.437585830688477
    8. '۵' → logprob: -18.500085830688477
    9. '٥' → logprob: -18.625085830688477
    10. '6' → logprob: -18.687585830688477

Token 446: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.023252584040164948
    2. 'and' → logprob: -3.773252487182617
    3. ' ' → logprob: -12.273252487182617
    4. '   ' → logprob: -13.398252487182617
    5. ' и' → logprob: -15.148252487182617
    6. '	and' → logprob: -15.398252487182617
    7. '    ' → logprob: -15.773252487182617
    8. ' ' → logprob: -16.398252487182617
    9. ' et' → logprob: -16.773252487182617
    10. 'et' → logprob: -17.148252487182617

Token 447: ' j' (ID: 441)
  Prédit: 'j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.646356463432312
    2. ' j' → logprob: -0.771356463432312
    3. ' y' → logprob: -4.521356582641602
    4. 'y' → logprob: -6.396356582641602
    5. '   ' → logprob: -7.771356582641602
    6. '3' → logprob: -8.396356582641602
    7. ' ' → logprob: -8.646356582641602
    8. '4' → logprob: -9.021356582641602
    9. 'x' → logprob: -10.146356582641602
    10. '    ' → logprob: -10.521356582641602

Token 448: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.17978593707084656
    2. '<=' → logprob: -1.804785966873169
    3. ' <' → logprob: -10.67978572845459
    4. '<' → logprob: -11.67978572845459
    5. ' ' → logprob: -12.05478572845459
    6. '==' → logprob: -13.67978572845459
    7. '   ' → logprob: -14.17978572845459
    8. ' ==' → logprob: -14.30478572845459
    9. '	' → logprob: -15.30478572845459
    10. ' ≤' → logprob: -15.42978572845459

Token 449: ' ' (ID: 220)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -1.6240566083070007e-06
    2. ' ' → logprob: -13.375001907348633
    3. '۳' → logprob: -17.125001907348633
    4. '   ' → logprob: -17.375001907348633
    5. '３' → logprob: -18.375001907348633
    6. '٣' → logprob: -19.375001907348633
    7. '৩' → logprob: -19.625001907348633
    8. '३' → logprob: -20.000001907348633
    9. '  ' → logprob: -20.375001907348633
    10. '03' → logprob: -20.625001907348633

Token 450: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -5.512236498361744e-07
    2. ' ' → logprob: -14.625000953674316
    3. '۳' → logprob: -17.375
    4. '৩' → logprob: -18.625
    5. '٣' → logprob: -18.875
    6. '३' → logprob: -19.0
    7. '３' → logprob: -19.375
    8. '   ' → logprob: -20.125
    9. '' → logprob: -21.625
    10. '03' → logprob: -22.875

Token 451: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.39320358633995056
    2. ':
' → logprob: -1.143203616142273
    3. '       ' → logprob: -5.6432037353515625
    4. '           ' → logprob: -6.0182037353515625
    5. ':return' → logprob: -8.643203735351562
    6. ' :' → logprob: -10.143203735351562
    7. ' :
' → logprob: -10.143203735351562
    8. '   ' → logprob: -10.768203735351562
    9. '):
' → logprob: -10.768203735351562
    10. ':

' → logprob: -11.643203735351562

Token 452: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.2064596265554428
    2. '           ' → logprob: -1.831459641456604
    3. ':' → logprob: -3.9564595222473145
    4. ':
' → logprob: -5.0814595222473145
    5. ':return' → logprob: -8.331459999084473
    6. '	       ' → logprob: -8.456459999084473
    7. ' return' → logprob: -9.081459999084473
    8. '	' → logprob: -9.331459999084473
    9. '   ' → logprob: -9.456459999084473
    10. '		' → logprob: -9.956459999084473

Token 453: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.7608546018600464
    2. 'True' → logprob: -1.1358546018600464
    3. ' return' → logprob: -2.510854721069336
    4. ' True' → logprob: -2.635854721069336
    5. '           ' → logprob: -2.885854721069336
    6. '       ' → logprob: -5.885854721069336
    7. '   ' → logprob: -9.885854721069336
    8. '               ' → logprob: -10.760854721069336
    9. '=True' → logprob: -11.010854721069336
    10. '	return' → logprob: -11.010854721069336

Token 454: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -6.704273118884885e-07
    2. ' True' → logprob: -14.500000953674316
    3. 'False' → logprob: -15.750000953674316
    4. '(True' → logprob: -21.75
    5. 'true' → logprob: -24.25
    6. '=True' → logprob: -24.625
    7. '   ' → logprob: -24.875
    8. '.True' → logprob: -25.875
    9. '_true' → logprob: -26.125
    10. 'Tr' → logprob: -26.25

Token 455: '

' (ID: 279)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0013638085220009089
    2. '   ' → logprob: -6.751363754272461
    3. '
' → logprob: -9.751363754272461
    4. '	' → logprob: -10.126363754272461
    5. '        
' → logprob: -10.251363754272461
    6. '  
' → logprob: -11.501363754272461
    7. '    
' → logprob: -11.751363754272461
    8. '<|end|>' → logprob: -11.876363754272461
    9. '	   ' → logprob: -12.251363754272461
    10. '           ' → logprob: -12.501363754272461

Token 456: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0025544962845742702
    2. '   ' → logprob: -6.002554416656494
    3. 'if' → logprob: -10.127554893493652
    4. '
' → logprob: -10.877554893493652
    5. ' if' → logprob: -11.752554893493652
    6. '        
' → logprob: -12.502554893493652
    7. '    
' → logprob: -13.377554893493652
    8. '           ' → logprob: -13.502554893493652
    9. '	   ' → logprob: -13.877554893493652
    10. '	' → logprob: -14.127554893493652

Token 457: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.21892032027244568
    2. 'if' → logprob: -1.718920350074768
    3. ' if' → logprob: -4.3439202308654785
    4. '
' → logprob: -5.7189202308654785
    5. '   ' → logprob: -7.7189202308654785
    6. '#' (adapté à ' #') → logprob: -7.8439202308654785
    7. '        
' → logprob: -8.593920707702637
    8. ' #' → logprob: -11.468920707702637
    9. 'return' → logprob: -11.593920707702637
    10. ' ' → logprob: -11.593920707702637

Token 458: ' R' (ID: 460)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.5292019248008728
    2. '(j' → logprob: -1.7792019844055176
    3. '#' → logprob: -2.0292019844055176
    4. ' (' → logprob: -3.0292019844055176
    5. ' if' → logprob: -3.5292019844055176
    6. ' #' → logprob: -4.529201984405518
    7. '       ' → logprob: -4.654201984405518
    8. '   ' → logprob: -5.154201984405518
    9. 'j' → logprob: -6.029201984405518
    10. '((' → logprob: -6.529201984405518

Token 459: 'è' (ID: 957)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.2188815325498581
    2. '#' → logprob: -2.468881607055664
    3. '   ' → logprob: -3.093881607055664
    4. 'è' → logprob: -3.843881607055664
    5. 'elif' → logprob: -4.218881607055664
    6. ' if' → logprob: -4.593881607055664
    7. '       ' → logprob: -5.093881607055664
    8. ' #' → logprob: -6.093881607055664
    9. 'eturn' → logprob: -6.093881607055664
    10. 'el' → logprob: -6.468881607055664

Token 460: 'gle' (ID: 6024)
  Prédit: 'gle'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'gle' → logprob: -2.6060808522743173e-05
    2. 'gles' → logprob: -10.875025749206543
    3. 'le' → logprob: -13.000025749206543
    4. '#' → logprob: -13.500025749206543
    5. 'GLE' → logprob: -14.125025749206543
    6. 'ule' → logprob: -14.625025749206543
    7. 'rule' → logprob: -14.875025749206543
    8. '```' → logprob: -15.000025749206543
    9. 'g' → logprob: -15.250025749206543
    10. '       ' → logprob: -15.375025749206543

Token 461: ' ' (ID: 220)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.6384872794151306
    2. ' ' → logprob: -2.1384873390197754
    3. '    ' → logprob: -2.1384873390197754
    4. ' if' → logprob: -2.1384873390197754
    5. '   ' → logprob: -2.6384873390197754
    6. '        ' → logprob: -4.013487339019775
    7. ' ' → logprob: -4.263487339019775
    8. '  ' → logprob: -5.763487339019775
    9. '1' → logprob: -6.013487339019775
    10. 'if' → logprob: -6.263487339019775

Token 462: '2' (ID: 17)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -0.4677598178386688
    2. '4' → logprob: -1.8427598476409912
    3. ' ' → logprob: -1.8427598476409912
    4. '6' → logprob: -3.092759847640991
    5. '2' → logprob: -4.967759609222412
    6. '   ' → logprob: -5.717759609222412
    7. '0' → logprob: -7.592759609222412
    8. '=' → logprob: -9.09276008605957
    9. '       ' → logprob: -9.34276008605957
    10. '5' → logprob: -9.34276008605957

Token 463: ' &' (ID: 827)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ':' → logprob: -0.3513270318508148
    2. ' :' → logprob: -1.7263270616531372
    3. '       ' → logprob: -2.6013269424438477
    4. '   ' → logprob: -3.4763269424438477
    5. ' if' → logprob: -4.601326942443848
    6. 'if' → logprob: -6.726326942443848
    7. ' ' → logprob: -7.101326942443848
    8. ' ' → logprob: -7.476326942443848
    9. '  ' → logprob: -8.851326942443848
    10. '    ' → logprob: -9.101326942443848

Token 464: ' ' (ID: 220)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.4900071322917938
    2. ' ' → logprob: -1.6150071620941162
    3. ' y' → logprob: -1.9900071620941162
    4. '       ' → logprob: -3.990007162094116
    5. '#' → logprob: -4.490006923675537
    6. '   ' → logprob: -4.740006923675537
    7. ' #' → logprob: -5.240006923675537
    8. 'y' → logprob: -5.865006923675537
    9. ' j' → logprob: -6.865006923675537
    10. '           ' → logprob: -7.115006923675537

Token 465: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -0.41863128542900085
    2. ' y' → logprob: -1.4186313152313232
    3. 'y' → logprob: -3.2936313152313232
    4. ' ' → logprob: -3.9186313152313232
    5. '#' → logprob: -4.293631076812744
    6. 'if' → logprob: -4.793631076812744
    7. '   ' → logprob: -5.418631076812744
    8. ' #' → logprob: -5.418631076812744
    9. '4' → logprob: -6.168631076812744
    10. 'elif' → logprob: -6.168631076812744

Token 466: ':' (ID: 25)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.2770518958568573
    2. ' if' → logprob: -1.7770519256591797
    3. ':' → logprob: -3.1520519256591797
    4. ' :' → logprob: -4.40205192565918
    5. '   ' → logprob: -4.65205192565918
    6. 'if' → logprob: -5.15205192565918
    7. ' ' → logprob: -7.52705192565918
    8. ' ' → logprob: -7.65205192565918
    9. '    ' → logprob: -7.77705192565918
    10. ' #' → logprob: -8.40205192565918

Token 467: ' Re' (ID: 907)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.6757786870002747
    2. '(j' → logprob: -1.4257786273956299
    3. ' if' → logprob: -2.17577862739563
    4. 'if' → logprob: -2.30077862739563
    5. '   ' → logprob: -3.92577862739563
    6. '((' → logprob: -4.800778865814209
    7. ' ((' → logprob: -5.425778865814209
    8. '(' → logprob: -6.175778865814209
    9. ' j' → logprob: -7.550778865814209
    10. ' ' → logprob: -7.675778865814209

Token 468: 'prise' (ID: 7463)
  Prédit: 'turn'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'turn' → logprob: -0.051552463322877884
    2. 'tour' → logprob: -3.3015525341033936
    3. 'st' → logprob: -5.4265522956848145
    4. 'if' → logprob: -6.1765522956848145
    5. 't' → logprob: -6.1765522956848145
    6. 'turned' → logprob: -7.0515522956848145
    7. 'n' → logprob: -8.051552772521973
    8. 'sum' → logprob: -8.176552772521973
    9. 'spect' → logprob: -8.176552772521973
    10. 's' → logprob: -8.301552772521973

Token 469: ' après' (ID: 16460)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.5942012071609497
    2. '       ' → logprob: -1.2192012071609497
    3. 'if' → logprob: -1.9692012071609497
    4. '   ' → logprob: -5.34420108795166
    5. ' ' → logprob: -6.34420108795166
    6. ' (' → logprob: -6.59420108795166
    7. ' des' → logprob: -6.71920108795166
    8. ' de' → logprob: -7.34420108795166
    9. '           ' → logprob: -7.34420108795166
    10. ' si' → logprob: -8.34420108795166

Token 470: ' ' (ID: 220)
  Prédit: '4'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.030376292765140533
    2. ' ' → logprob: -3.5303761959075928
    3. 'le' → logprob: -9.655376434326172
    4. 'l' → logprob: -10.030376434326172
    5. ' égal' → logprob: -10.030376434326172
    6. 'égalité' → logprob: -10.030376434326172
    7. '3' → logprob: -10.280376434326172
    8. 'les' → logprob: -10.405376434326172
    9. ' le' → logprob: -10.405376434326172
    10. '   ' → logprob: -10.530376434326172

Token 471: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.0006079599261283875
    2. ' ' → logprob: -7.500607967376709
    3. '3' → logprob: -10.37560749053955
    4. '４' → logprob: -12.50060749053955
    5. '```' → logprob: -13.06310749053955
    6. 'l' → logprob: -13.25060749053955
    7. ' quatre' → logprob: -13.56310749053955
    8. 'le' → logprob: -14.00060749053955
    9. 'max' → logprob: -14.18810749053955
    10. '' → logprob: -14.31310749053955

Token 472: '-' (ID: 12)
  Prédit: '-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.08312532305717468
    2. ' -' → logprob: -3.083125352859497
    3. '<=' → logprob: -4.458125114440918
    4. ' and' → logprob: -4.958125114440918
    5. ' <=' → logprob: -5.083125114440918
    6. 'and' → logprob: -5.833125114440918
    7. '==' → logprob: -5.958125114440918
    8. ' ==' → logprob: -6.958125114440918
    9. '>=' → logprob: -6.958125114440918
    10. ',' → logprob: -7.958125114440918

Token 473: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -1.4617256056226324e-05
    2. ' ' → logprob: -11.750014305114746
    3. '```' → logprob: -13.375014305114746
    4. '3' → logprob: -13.500014305114746
    5. '<|end|>' → logprob: -13.750014305114746
    6. '' → logprob: -15.187514305114746
    7. 'j' → logprob: -15.312514305114746
    8. ',' → logprob: -15.375014305114746
    9. '<|end|>' → logprob: -15.687514305114746
    10. '४' → logprob: -15.750014305114746

Token 474: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.04896906763315201
    2. ' if' → logprob: -3.173969030380249
    3. 'if' → logprob: -5.423969268798828
    4. '   ' → logprob: -7.298969268798828
    5. ',' → logprob: -8.548969268798828
    6. ' and' → logprob: -8.673969268798828
    7. '
' → logprob: -8.923969268798828
    8. ':' → logprob: -8.923969268798828
    9. '```' → logprob: -10.173969268798828
    10. ' or' → logprob: -10.548969268798828

Token 475: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.008384907618165016
    2. ' if' → logprob: -5.008384704589844
    3. '   ' → logprob: -6.633384704589844
    4. 'if' → logprob: -8.008384704589844
    5. '
' → logprob: -12.383384704589844
    6. ',' → logprob: -12.758384704589844
    7. '      ' → logprob: -13.133384704589844
    8. ' ' → logprob: -13.258384704589844
    9. '    ' → logprob: -13.258384704589844
    10. '           ' → logprob: -13.633384704589844

Token 476: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -1.0595752000808716
    2. ' if' → logprob: -1.0595752000808716
    3. 'if' → logprob: -1.1845752000808716
    4. '   ' → logprob: -7.059575080871582
    5. ' ' → logprob: -10.684575080871582
    6. '	if' → logprob: -11.684575080871582
    7. '    ' → logprob: -12.059575080871582
    8. '  ' → logprob: -12.434575080871582
    9. '      ' → logprob: -12.434575080871582
    10. '#' (adapté à ' #') → logprob: -12.684575080871582

Token 477: ' Si' (ID: 7832)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.644495964050293
    2. ' if' → logprob: -1.144495964050293
    3. '   ' → logprob: -2.019495964050293
    4. '       ' → logprob: -3.769495964050293
    5. '
' → logprob: -8.519495964050293
    6. ' ' → logprob: -8.644495964050293
    7. '    ' → logprob: -9.144495964050293
    8. '	if' → logprob: -9.269495964050293
    9. ' ' → logprob: -9.394495964050293
    10. '  ' → logprob: -9.894495964050293

Token 478: ' les' (ID: 1341)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.7205199003219604
    2. ' j' → logprob: -1.4705199003219604
    3. '(j' → logprob: -1.5955199003219604
    4. 'j' → logprob: -2.97052001953125
    5. '(' → logprob: -3.59552001953125
    6. '   ' → logprob: -7.59552001953125
    7. '((' → logprob: -7.59552001953125
    8. ' ' → logprob: -7.72052001953125
    9. '(
' → logprob: -8.47052001953125
    10. ' not' → logprob: -9.59552001953125

Token 479: ' deux' (ID: 10301)
  Prédit: 'j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.045657042413949966
    2. '(j' → logprob: -3.295657157897949
    3. '(' → logprob: -5.920657157897949
    4. ' (' → logprob: -6.420657157897949
    5. 'max' → logprob: -6.545657157897949
    6. ' j' → logprob: -7.045657157897949
    7. '4' → logprob: -8.79565715789795
    8. '   ' → logprob: -8.92065715789795
    9. 'abs' → logprob: -8.92065715789795
    10. ' ' → logprob: -9.17065715789795

Token 480: ' ont' (ID: 4930)
  Prédit: ' >='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' >=' → logprob: -0.6042390465736389
    2. '>=' → logprob: -1.3542389869689941
    3. ' ==' → logprob: -2.354238986968994
    4. ' <' → logprob: -3.229238986968994
    5. '==' → logprob: -3.729238986968994
    6. 'ont' → logprob: -4.479238986968994
    7. '<' → logprob: -4.729238986968994
    8. ' <=' → logprob: -5.604238986968994
    9. '<=' → logprob: -5.729238986968994
    10. ' ' → logprob: -6.479238986968994

Token 481: ' au' (ID: 2791)
  Prédit: '4'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.147139310836792
    2. '>=' → logprob: -3.147139310836792
    3. ' atteint' → logprob: -3.147139310836792
    4. ' ' → logprob: -3.397139310836792
    5. ' >=' → logprob: -5.772139549255371
    6. 'au' → logprob: -5.772139549255371
    7. '==' → logprob: -5.897139549255371
    8. ' atte' → logprob: -6.397139549255371
    9. ' au' → logprob: -6.522139549255371
    10. ' ==' → logprob: -6.897139549255371

Token 482: ' moins' (ID: 15924)
  Prédit: 'moins'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'moins' → logprob: -0.015809930860996246
    2. ' moins' → logprob: -4.515810012817383
    3. 'mo' → logprob: -5.515810012817383
    4. 'menos' → logprob: -8.640810012817383
    5. '   ' → logprob: -8.765810012817383
    6. 'minimum' → logprob: -8.765810012817383
    7. '```' → logprob: -9.265810012817383
    8. 'm' → logprob: -9.765810012817383
    9. 'least' → logprob: -11.015810012817383
    10. ' ' → logprob: -11.515810012817383

Token 483: ' ' (ID: 220)
  Prédit: '4'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.02975662797689438
    2. ' ' → logprob: -3.529756546020508
    3. '   ' → logprob: -12.779756546020508
    4. '```' → logprob: -13.654756546020508
    5. '' → logprob: -14.279756546020508
    6. ' ' → logprob: -15.029756546020508
    7. '  ' → logprob: -15.029756546020508
    8. ' quatre' → logprob: -15.154756546020508
    9. '
' → logprob: -16.154756546020508
    10. '=' → logprob: -16.904756546020508

Token 484: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -2.7729658540920354e-05
    2. ' ' → logprob: -10.500027656555176
    3. '   ' → logprob: -16.500028610229492
    4. '```' → logprob: -16.625028610229492
    5. '' → logprob: -17.125028610229492
    6. '
' → logprob: -17.500028610229492
    7. '  ' → logprob: -19.000028610229492
    8. '４' → logprob: -19.125028610229492
    9. ' quatre' → logprob: -19.125028610229492
    10. '٤' → logprob: -19.625028610229492

Token 485: ' points' (ID: 5571)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.1643311083316803
    2. ' points' → logprob: -3.1643311977386475
    3. 'and' → logprob: -3.2893311977386475
    4. 'points' → logprob: -3.5393311977386475
    5. '   ' → logprob: -4.289330959320068
    6. ' et' → logprob: -4.414330959320068
    7. ':' → logprob: -4.789330959320068
    8. 'et' → logprob: -5.414330959320068
    9. ',' → logprob: -6.414330959320068
    10. ' ' → logprob: -7.164330959320068

Token 486: ':
' (ID: 734)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.10629890114068985
    2. 'and' → logprob: -3.2312989234924316
    3. '   ' → logprob: -3.3562989234924316
    4. ':' → logprob: -4.231298923492432
    5. '       ' → logprob: -4.856298923492432
    6. ' et' → logprob: -6.481298923492432
    7. ',' → logprob: -6.731298923492432
    8. 'et' → logprob: -7.856298923492432
    9. ':
' → logprob: -8.106298446655273
    10. ' if' → logprob: -8.856298446655273

Token 487: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.25223204493522644
    2. '       ' → logprob: -1.5022320747375488
    3. ' if' → logprob: -8.25223159790039
    4. '    ' → logprob: -10.75223159790039
    5. 'if' → logprob: -12.25223159790039
    6. '	   ' → logprob: -12.25223159790039
    7. '	if' → logprob: -13.37723159790039
    8. '     ' → logprob: -13.62723159790039
    9. '	' → logprob: -13.75223159790039
    10. '
' → logprob: -13.87723159790039

Token 488: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.09780590981245041
    2. ' if' → logprob: -2.972805976867676
    3. '       ' → logprob: -3.222805976867676
    4. 'if' (adapté à ' if') → logprob: -6.472805976867676
    5. '    ' → logprob: -7.847805976867676
    6. ' ' → logprob: -9.347805976867676
    7. '	if' → logprob: -9.847805976867676
    8. '   ' → logprob: -10.222805976867676
    9. '	' → logprob: -11.347805976867676
    10. ' ' → logprob: -11.597805976867676

Token 489: ' j' (ID: 441)
  Prédit: ' j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' j' → logprob: -0.20279090106487274
    2. 'j' → logprob: -1.7027908563613892
    3. ' min' → logprob: -7.2027907371521
    4. ' (' → logprob: -7.9527907371521
    5. 'min' → logprob: -9.452791213989258
    6. ' max' → logprob: -9.452791213989258
    7. ' ' → logprob: -10.327791213989258
    8. '   ' → logprob: -10.577791213989258
    9. '(j' → logprob: -10.577791213989258
    10. '(' → logprob: -10.952791213989258

Token 490: ' >=' (ID: 5064)
  Prédit: ' >='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >=' → logprob: -0.4813743233680725
    2. '>=' → logprob: -0.9813743233680725
    3. ' <' → logprob: -5.356374263763428
    4. '<' → logprob: -6.231374263763428
    5. ' ' → logprob: -8.356374740600586
    6. '==' → logprob: -9.106374740600586
    7. ' ==' → logprob: -9.231374740600586
    8. ' and' → logprob: -9.481374740600586
    9. 'and' → logprob: -10.606374740600586
    10. '>' → logprob: -11.356374740600586

Token 491: ' ' (ID: 220)
  Prédit: '4'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.00038014890742488205
    2. ' ' → logprob: -7.875380039215088
    3. '   ' → logprob: -17.62537956237793
    4. '４' → logprob: -17.75037956237793
    5. '  ' → logprob: -19.12537956237793
    6. '۴' → logprob: -19.25037956237793
    7. '' → logprob: -19.43787956237793
    8. '```' → logprob: -19.62537956237793
    9. '٤' → logprob: -20.00037956237793
    10. '৪' → logprob: -20.75037956237793

Token 492: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -3.128163257315464e-07
    2. ' ' → logprob: -15.125
    3. '４' → logprob: -18.375
    4. '0' → logprob: -19.875
    5. '' → logprob: -19.875
    6. '   ' → logprob: -20.0
    7. '۴' → logprob: -20.0
    8. '```' → logprob: -20.125
    9. '৪' → logprob: -20.5625
    10. '5' → logprob: -20.8125

Token 493: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.1427866667509079
    2. 'and' → logprob: -2.017786741256714
    3. '   ' → logprob: -9.892786979675293
    4. ' ' → logprob: -10.267786979675293
    5. '       ' → logprob: -11.642786979675293
    6. ' or' → logprob: -12.017786979675293
    7. '  ' → logprob: -12.392786979675293
    8. '    ' → logprob: -13.517786979675293
    9. 'or' → logprob: -13.892786979675293
    10. '	and' → logprob: -13.892786979675293

Token 494: ' y' (ID: 342)
  Prédit: ' y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.4741928279399872
    2. 'y' → logprob: -0.9741928577423096
    3. '   ' → logprob: -9.22419261932373
    4. ' ' → logprob: -11.59919261932373
    5. '  ' → logprob: -12.47419261932373
    6. ' ' → logprob: -13.59919261932373
    7. '	y' → logprob: -13.72419261932373
    8. '    ' → logprob: -14.09919261932373
    9. '       ' → logprob: -15.22419261932373
    10. '     ' → logprob: -15.53669261932373

Token 495: ' >=' (ID: 5064)
  Prédit: ' >='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' >=' → logprob: -0.3872772455215454
    2. '>=' → logprob: -1.1372772455215454
    3. ' ==' → logprob: -8.762277603149414
    4. '==' → logprob: -8.887277603149414
    5. 'and' → logprob: -9.637277603149414
    6. '   ' → logprob: -11.637277603149414
    7. ' and' → logprob: -12.012277603149414
    8. '[' → logprob: -12.137277603149414
    9. ' ' → logprob: -12.262277603149414
    10. ']>=' → logprob: -12.637277603149414

Token 496: ' ' (ID: 220)
  Prédit: '4'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.00029744720086455345
    2. ' ' → logprob: -8.125297546386719
    3. '```' → logprob: -14.625297546386719
    4. '   ' → logprob: -15.125297546386719
    5. 'def' → logprob: -15.812797546386719
    6. '<|end|>' → logprob: -16.37529754638672
    7. '' → logprob: -16.56279754638672
    8. '৪' → logprob: -16.81279754638672
    9. '４' → logprob: -16.87529754638672
    10. '۴' → logprob: -17.00029754638672

Token 497: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -2.8087270038668066e-05
    2. ' ' → logprob: -10.500027656555176
    3. '' → logprob: -16.312528610229492
    4. '৪' → logprob: -16.562528610229492
    5. '```' → logprob: -16.625028610229492
    6. '４' → logprob: -16.750028610229492
    7. '४' → logprob: -17.125028610229492
    8. '۴' → logprob: -17.250028610229492
    9. '
' → logprob: -17.812528610229492
    10. '<|end|>' → logprob: -18.062528610229492

Token 498: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.7954253554344177
    2. ':
' → logprob: -1.5454254150390625
    3. ' and' → logprob: -1.6704254150390625
    4. '       ' → logprob: -2.0454254150390625
    5. 'and' → logprob: -4.1704254150390625
    6. '           ' → logprob: -6.9204254150390625
    7. '   ' → logprob: -8.170425415039062
    8. ' :' → logprob: -8.295425415039062
    9. '):
' → logprob: -8.545425415039062
    10. ':return' → logprob: -8.795425415039062

Token 499: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.001105448347516358
    2. ':' → logprob: -8.001105308532715
    3. '
' → logprob: -8.126105308532715
    4. ':
' → logprob: -8.501105308532715
    5. '           ' → logprob: -9.376105308532715
    6. ' and' → logprob: -9.876105308532715
    7. '   ' → logprob: -10.501105308532715
    8. ',' → logprob: -10.501105308532715
    9. '        
' → logprob: -10.501105308532715
    10. ' if' → logprob: -11.376105308532715

Token 500: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.8464019298553467
    2. 'if' → logprob: -1.3464019298553467
    3. '           ' → logprob: -2.0964019298553467
    4. 'diff' → logprob: -2.2214019298553467
    5. ' if' → logprob: -2.8464019298553467
    6. '#' (adapté à ' #') → logprob: -4.346402168273926
    7. 'score' → logprob: -6.096402168273926
    8. ' diff' → logprob: -6.471402168273926
    9. ' #' → logprob: -6.846402168273926
    10. '               ' → logprob: -6.971402168273926

Token 501: ' ' (ID: 220)
  Prédit: 'diff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'diff' → logprob: -0.4462048411369324
    2. 'if' → logprob: -1.0712049007415771
    3. '#' → logprob: -4.571204662322998
    4. '       ' → logprob: -6.696204662322998
    5. '   ' → logprob: -6.821204662322998
    6. 'ec' → logprob: -6.821204662322998
    7. 'éc' → logprob: -7.196204662322998
    8. ' if' → logprob: -7.446204662322998
    9. 'd' → logprob: -7.696204662322998
    10. 'delta' → logprob: -7.821204662322998

Token 502: '4' (ID: 19)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.7016756534576416
    2. 'diff' → logprob: -0.7016756534576416
    3. '#' → logprob: -5.4516754150390625
    4. 'abs' → logprob: -5.9516754150390625
    5. 'd' → logprob: -7.9516754150390625
    6. 'difference' → logprob: -8.326675415039062
    7. 'score' → logprob: -8.576675415039062
    8. 'delta' → logprob: -8.701675415039062
    9. 'return' → logprob: -9.076675415039062
    10. '   ' → logprob: -9.076675415039062

Token 503: '-' (ID: 12)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.863523006439209
    2. '-' → logprob: -0.988523006439209
    3. ' ==' → logprob: -2.113523006439209
    4. ' -' → logprob: -3.113523006439209
    5. ' and' → logprob: -4.113523006439209
    6. 'and' → logprob: -4.363523006439209
    7. 'if' → logprob: -5.988523006439209
    8. '<=' → logprob: -5.988523006439209
    9. 'def' → logprob: -6.613523006439209
    10. '+' → logprob: -6.863523006439209

Token 504: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.0018058452988043427
    2. ' ' → logprob: -6.376805782318115
    3. ' and' → logprob: -10.126806259155273
    4. 'and' → logprob: -10.251806259155273
    5. 'j' → logprob: -11.251806259155273
    6. ' j' → logprob: -12.876806259155273
    7. '```' → logprob: -13.251806259155273
    8. 'y' → logprob: -13.501806259155273
    9. '   ' → logprob: -13.501806259155273
    10. 'if' → logprob: -13.876806259155273

Token 505: ' spéc' (ID: 20135)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.07218016684055328
    2. '           ' → logprob: -3.3221802711486816
    3. ' and' → logprob: -4.447180271148682
    4. ' if' → logprob: -4.947180271148682
    5. 'return' → logprob: -5.197180271148682
    6. ' return' → logprob: -5.822180271148682
    7. ' or' → logprob: -6.072180271148682
    8. 'if' → logprob: -6.572180271148682
    9. 'and' → logprob: -7.072180271148682
    10. ':return' → logprob: -8.197179794311523

Token 506: 'ifiquement' (ID: 195642)
  Prédit: 'ifié'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ifié' → logprob: -0.043936826288700104
    2. 'ifie' → logprob: -3.5439367294311523
    3. 'ifiée' → logprob: -5.293936729431152
    4. 'ifique' → logprob: -5.418936729431152
    5. 'if' → logprob: -5.793936729431152
    6. 'ifiquement' → logprob: -7.168936729431152
    7. 'ifi' → logprob: -8.168936729431152
    8. 'ified' → logprob: -8.543936729431152
    9. 'ifiez' → logprob: -9.668936729431152
    10. 'ifiés' → logprob: -9.793936729431152

Token 507: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.6725044846534729
    2. '       ' → logprob: -1.1725044250488281
    3. ' and' → logprob: -2.547504425048828
    4. ':' → logprob: -2.797504425048828
    5. '               ' → logprob: -4.547504425048828
    6. ' if' → logprob: -4.547504425048828
    7. ':
' → logprob: -5.547504425048828
    8. 'and' → logprob: -5.922504425048828
    9. ' return' → logprob: -6.047504425048828
    10. 'if' → logprob: -6.172504425048828

Token 508: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.10176505893468857
    2. '           ' → logprob: -2.4767651557922363
    3. '               ' → logprob: -5.101765155792236
    4. '	       ' → logprob: -6.226765155792236
    5. ' if' → logprob: -6.601765155792236
    6. ' return' → logprob: -7.101765155792236
    7. ' and' → logprob: -7.351765155792236
    8. '	' → logprob: -8.101764678955078
    9. ',' → logprob: -8.351764678955078
    10. '<|end|>' → logprob: -8.726764678955078

Token 509: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.11706215888261795
    2. ' if' → logprob: -2.2420620918273926
    3. '           ' → logprob: -5.617062091827393
    4. 'return' → logprob: -7.867062091827393
    5. ' return' → logprob: -9.11706256866455
    6. '       ' → logprob: -9.61706256866455
    7. '               ' → logprob: -11.36706256866455
    8. '   ' → logprob: -11.49206256866455
    9. ' ' → logprob: -11.74206256866455
    10. ' ' → logprob: -13.36706256866455

Token 510: ' j' (ID: 441)
  Prédit: 'j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.22546209394931793
    2. ' j' → logprob: -1.6004620790481567
    3. ' (' → logprob: -10.725461959838867
    4. '(' → logprob: -11.475461959838867
    5. '   ' → logprob: -12.100461959838867
    6. ' ' → logprob: -12.350461959838867
    7. '(j' → logprob: -12.350461959838867
    8. '	j' → logprob: -13.475461959838867
    9. ' ' → logprob: -14.225461959838867
    10. '  ' → logprob: -15.100461959838867

Token 511: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.04326567426323891
    2. '==' → logprob: -3.1682655811309814
    3. ' <=' → logprob: -8.543265342712402
    4. '<=' → logprob: -10.668265342712402
    5. ' ==
' → logprob: -11.543265342712402
    6. ' ' → logprob: -11.793265342712402
    7. '[' → logprob: -11.918265342712402
    8. ' and' → logprob: -12.043265342712402
    9. '=' → logprob: -12.543265342712402
    10. ' !=' → logprob: -12.793265342712402

Token 512: ' ' (ID: 220)
  Prédit: '4'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.00038658222183585167
    2. ' ' → logprob: -7.875386714935303
    3. ' y' → logprob: -12.375386238098145
    4. 'y' → logprob: -13.125386238098145
    5. '   ' → logprob: -15.625386238098145
    6. '  ' → logprob: -17.12538719177246
    7. '４' → logprob: -17.75038719177246
    8. '۴' → logprob: -18.37538719177246
    9. ' four' → logprob: -18.56288719177246
    10. '' → logprob: -19.31288719177246

Token 513: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -5.6100132496794686e-05
    2. 'y' → logprob: -9.875056266784668
    3. ' ' → logprob: -12.375056266784668
    4. ' y' → logprob: -14.875056266784668
    5. '5' → logprob: -19.00005531311035
    6. '４' → logprob: -19.25005531311035
    7. '   ' → logprob: -19.37505531311035
    8. '۴' → logprob: -19.62505531311035
    9. '' → logprob: -19.87505531311035
    10. '44' → logprob: -20.00005531311035

Token 514: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.014174087904393673
    2. 'and' → logprob: -4.264173984527588
    3. '           ' → logprob: -12.389174461364746
    4. ' ' → logprob: -12.764174461364746
    5. '	and' → logprob: -14.139174461364746
    6. ' и' → logprob: -14.389174461364746
    7. ' or' → logprob: -14.639174461364746
    8. '               ' → logprob: -14.764174461364746
    9. '   ' → logprob: -14.764174461364746
    10. ' ' → logprob: -15.139174461364746

Token 515: ' y' (ID: 342)
  Prédit: ' y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.1002129316329956
    2. 'y' → logprob: -2.350213050842285
    3. '   ' → logprob: -13.350213050842285
    4. '	y' → logprob: -13.475213050842285
    5. ' ' → logprob: -13.600213050842285
    6. '4' → logprob: -13.725213050842285
    7. ' ' → logprob: -14.225213050842285
    8. '  ' → logprob: -15.850213050842285
    9. '    ' → logprob: -16.10021209716797
    10. ''y' → logprob: -18.53771209716797

Token 516: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.5759719610214233
    2. ' ==' → logprob: -0.8259719610214233
    3. '4' → logprob: -11.325971603393555
    4. ']==' → logprob: -11.825971603393555
    5. ' ' → logprob: -12.950971603393555
    6. '===' → logprob: -13.325971603393555
    7. ')==' → logprob: -13.325971603393555
    8. '==
' → logprob: -13.450971603393555
    9. '[' → logprob: -13.700971603393555
    10. ' ' → logprob: -13.825971603393555

Token 517: ' ' (ID: 220)
  Prédit: '4'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.0010336418636143208
    2. ' ' → logprob: -6.876033782958984
    3. '```' → logprob: -14.751033782958984
    4. '   ' → logprob: -15.813533782958984
    5. '۴' → logprob: -16.876033782958984
    6. '  ' → logprob: -17.001033782958984
    7. '<|end|>' → logprob: -17.063533782958984
    8. '' → logprob: -17.626033782958984
    9. '
' → logprob: -17.688533782958984
    10. ' four' → logprob: -17.751033782958984

Token 518: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -5.080963092041202e-06
    2. ' ' → logprob: -12.375004768371582
    3. '۴' → logprob: -15.562504768371582
    4. '৪' → logprob: -15.750004768371582
    5. '४' → logprob: -16.0625057220459
    6. '```' → logprob: -16.3125057220459
    7. '' → logprob: -16.8125057220459
    8. '４' → logprob: -17.0625057220459
    9. '٤' → logprob: -17.6875057220459
    10. '   ' → logprob: -17.8750057220459

Token 519: ':
' (ID: 734)
  Prédit: ':
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':
' → logprob: -0.5658568739891052
    2. '               ' → logprob: -1.44085693359375
    3. ':' → logprob: -1.69085693359375
    4. '           ' → logprob: -5.31585693359375
    5. ':return' → logprob: -5.56585693359375
    6. ' and' → logprob: -7.44085693359375
    7. '       ' → logprob: -7.69085693359375
    8. ' :
' → logprob: -7.94085693359375
    9. ' :' → logprob: -8.44085693359375
    10. ' or' → logprob: -8.69085693359375

Token 520: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.0002146226615877822
    2. ' return' → logprob: -8.875214576721191
    3. '       ' → logprob: -10.125214576721191
    4. '           ' → logprob: -11.375214576721191
    5. '
' → logprob: -12.125214576721191
    6. 'return' → logprob: -12.125214576721191
    7. ':' → logprob: -12.625214576721191
    8. ' :' → logprob: -13.250214576721191
    9. ':return' → logprob: -13.625214576721191
    10. '                   ' → logprob: -13.875214576721191

Token 521: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.5851003527641296
    2. ' return' → logprob: -1.0851004123687744
    3. '           ' → logprob: -2.4601004123687744
    4. '               ' → logprob: -3.9601004123687744
    5. '	return' → logprob: -7.710100173950195
    6. '	       ' → logprob: -9.835100173950195
    7. '   ' → logprob: -10.710100173950195
    8. '       ' → logprob: -10.835100173950195
    9. '                   ' → logprob: -11.335100173950195
    10. '	           ' → logprob: -11.960100173950195

Token 522: ' C' (ID: 363)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.026851704344153404
    2. ' return' → logprob: -3.6518516540527344
    3. '       ' → logprob: -8.651851654052734
    4. '               ' → logprob: -8.776851654052734
    5. '           ' → logprob: -9.026851654052734
    6. '   ' → logprob: -10.026851654052734
    7. '	return' → logprob: -10.151851654052734
    8. '#' → logprob: -11.651851654052734
    9. ' ' → logprob: -12.526851654052734
    10. ' ' → logprob: -13.026851654052734

Token 523: ''est' (ID: 6616)
  Prédit: 'ont'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ont' → logprob: -0.3083615005016327
    2. 'return' → logprob: -1.808361530303955
    3. '#' → logprob: -3.058361530303955
    4. 'on' → logprob: -3.808361530303955
    5. ''est' → logprob: -5.433361530303955
    6. 'eturn' → logprob: -5.433361530303955
    7. 'onte' → logprob: -5.433361530303955
    8. 'ertain' → logprob: -5.808361530303955
    9. 'ode' → logprob: -6.183361530303955
    10. 'ons' → logprob: -6.433361530303955

Token 524: ' l' (ID: 305)
  Prédit: ' True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' True' → logprob: -0.026961607858538628
    2. 'True' → logprob: -3.7769615650177
    3. ' False' → logprob: -5.901961803436279
    4. 'False' → logprob: -7.776961803436279
    5. ' possible' → logprob: -8.401961326599121
    6. ' valid' → logprob: -9.401961326599121
    7. ' le' → logprob: -9.651961326599121
    8. ' une' → logprob: -10.151961326599121
    9. 'possible' → logprob: -10.151961326599121
    10. ' la' → logprob: -10.526961326599121

Token 525: ''état' (ID: 116357)
  Prédit: ''état'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''état' → logprob: -0.23339147865772247
    2. 'a' → logprob: -1.858391523361206
    3. ''instant' → logprob: -3.858391523361206
    4. 'e' → logprob: -4.858391284942627
    5. ''' → logprob: -5.108391284942627
    6. '’état' → logprob: -5.733391284942627
    7. ''équ' → logprob: -6.358391284942627
    8. ''ét' → logprob: -6.483391284942627
    9. ''origine' → logprob: -6.483391284942627
    10. 'égalité' → logprob: -6.858391284942627

Token 526: ' initial' (ID: 4871)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.8231014013290405
    2. ' valid' → logprob: -1.3231014013290405
    3. ' initial' → logprob: -1.9481014013290405
    4. ' valide' → logprob: -2.69810152053833
    5. ' possible' → logprob: -3.69810152053833
    6. 'de' → logprob: -4.07310152053833
    7. 'initial' → logprob: -4.07310152053833
    8. 'valid' → logprob: -4.44810152053833
    9. 'possible' → logprob: -4.82310152053833
    10. ' acceptable' → logprob: -6.69810152053833

Token 527: ' de' (ID: 334)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.08909770101308823
    2. '           ' → logprob: -2.839097738265991
    3. ' return' → logprob: -4.089097499847412
    4. '                   ' → logprob: -5.964097499847412
    5. 'return' → logprob: -6.714097499847412
    6. ' (' → logprob: -6.964097499847412
    7. ' ' → logprob: -6.964097499847412
    8. '       ' → logprob: -7.089097499847412
    9. ',' → logprob: -7.089097499847412
    10. '
' → logprob: -7.464097499847412

Token 528: ' de' (ID: 334)
  Prédit: 'égalité'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'égalité' → logprob: -0.18280841410160065
    2. 'l' → logprob: -2.6828083992004395
    3. ' égal' → logprob: -3.3078083992004395
    4. ' l' → logprob: -3.3078083992004395
    5. ' départ' → logprob: -5.1828083992004395
    6. 'égal' → logprob: -5.4328083992004395
    7. ' la' → logprob: -6.0578083992004395
    8. ' jeu' → logprob: -6.3078083992004395
    9. 'dé' → logprob: -6.6828083992004395
    10. 'egal' → logprob: -6.6828083992004395

Token 529: 'uce' (ID: 20747)
  Prédit: 'part'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'part' → logprob: -0.1114204153418541
    2. 'jeu' → logprob: -2.7364203929901123
    3. ' départ' → logprob: -4.486420631408691
    4. 'r' → logprob: -5.111420631408691
    5. 'ux' → logprob: -5.611420631408691
    6. 'p' → logprob: -5.611420631408691
    7. ' jeu' → logprob: -6.111420631408691
    8. 'but' → logprob: -6.236420631408691
    9. 'mar' → logprob: -6.486420631408691
    10. 's' → logprob: -6.611420631408691

Token 530: ',' (ID: 11)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.21858495473861694
    2. '\n' → logprob: -1.9685850143432617
    3. '           ' → logprob: -3.5935850143432617
    4. '                   ' → logprob: -4.593585014343262
    5. '
' → logprob: -4.843585014343262
    6. '.' → logprob: -6.468585014343262
    7. '                
' → logprob: -6.593585014343262
    8. ' return' → logprob: -6.718585014343262
    9. '   ' → logprob: -7.093585014343262
    10. ' 
' → logprob: -7.343585014343262

Token 531: ' toujours' (ID: 16867)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.10359334945678711
    2. ' ' → logprob: -2.603593349456787
    3. '               ' → logprob: -4.728593349456787
    4. 'return' → logprob: -4.853593349456787
    5. ' ' → logprob: -5.728593349456787
    6. ' 
' → logprob: -5.728593349456787
    7. '           ' → logprob: -7.853593349456787
    8. '                   ' → logprob: -8.853593826293945
    9. '	return' → logprob: -9.103593826293945
    10. ':return' → logprob: -9.103593826293945

Token 532: ' possible' (ID: 4149)
  Prédit: ' valide'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' valide' → logprob: -0.9634349346160889
    2. 'valid' → logprob: -1.2134349346160889
    3. 'val' → logprob: -1.4634349346160889
    4. 'possible' → logprob: -2.838434934616089
    5. ' possible' → logprob: -4.338435173034668
    6. ' valid' → logprob: -4.838435173034668
    7. ' valable' → logprob: -5.088435173034668
    8. ' True' → logprob: -6.838435173034668
    9. ' val' → logprob: -6.838435173034668
    10. 'v' → logprob: -6.838435173034668

Token 533: '.
' (ID: 558)
  Prédit: '               '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.017229050397872925
    2. '
' → logprob: -4.642229080200195
    3. '           ' → logprob: -5.517229080200195
    4. '\n' → logprob: -6.267229080200195
    5. '                   ' → logprob: -7.392229080200195
    6. ' return' → logprob: -8.392229080200195
    7. 'return' → logprob: -8.767229080200195
    8. '       ' → logprob: -9.142229080200195
    9. '                
' → logprob: -9.267229080200195
    10. '   ' → logprob: -9.767229080200195

Token 534: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.006649056449532509
    2. ' return' → logprob: -5.881649017333984
    3. '                   ' → logprob: -5.881649017333984
    4. '           ' → logprob: -7.631649017333984
    5. 'return' → logprob: -8.381649017333984
    6. '
' → logprob: -9.381649017333984
    7. ' 
' → logprob: -9.506649017333984
    8. '                
' → logprob: -9.756649017333984
    9. ' ' → logprob: -10.631649017333984
    10. '\n' → logprob: -10.881649017333984

Token 535: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.2984693944454193
    2. 'return' (adapté à ' return') → logprob: -1.5484694242477417
    3. '               ' → logprob: -3.173469305038452
    4. '                   ' → logprob: -5.923469543457031
    5. '	return' → logprob: -7.173469543457031
    6. '           ' → logprob: -9.423469543457031
    7. ' ' → logprob: -11.048469543457031
    8. '                       ' → logprob: -11.173469543457031
    9. '	           ' → logprob: -11.423469543457031
    10. '   ' → logprob: -11.548469543457031

Token 536: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.029750604182481766
    2. ' True' → logprob: -3.5297505855560303
    3. '   ' → logprob: -16.40475082397461
    4. '(True' → logprob: -17.27975082397461
    5. 'False' → logprob: -19.02975082397461
    6. '           ' → logprob: -19.52975082397461
    7. ' ' → logprob: -19.77975082397461
    8. '       ' → logprob: -20.65475082397461
    9. 'true' → logprob: -20.90475082397461
    10. '=True' → logprob: -21.02975082397461

Token 537: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.32683345675468445
    2. '   ' → logprob: -1.9518334865570068
    3. '\n' → logprob: -3.076833486557007
    4. '
' → logprob: -3.201833486557007
    5. '	' → logprob: -4.076833248138428
    6. '    
' → logprob: -4.576833248138428
    7. '           ' → logprob: -5.326833248138428
    8. '  
' → logprob: -5.701833248138428
    9. '<|end|>' → logprob: -5.826833248138428
    10. '        
' → logprob: -6.076833248138428

Token 538: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.025802727788686752
    2. '           ' → logprob: -4.5258026123046875
    3. '
' → logprob: -4.7758026123046875
    4. '   ' → logprob: -6.6508026123046875
    5. '    
' → logprob: -6.6508026123046875
    6. '	' → logprob: -7.0258026123046875
    7. '        
' → logprob: -7.0258026123046875
    8. '\n' → logprob: -7.5258026123046875
    9. '            
' → logprob: -8.400802612304688
    10. '  
' → logprob: -8.650802612304688

Token 539: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.19885186851024628
    2. 'if' → logprob: -2.1988518238067627
    3. '           ' → logprob: -3.4488518238067627
    4. ' if' → logprob: -3.4488518238067627
    5. '
' → logprob: -5.448852062225342
    6. 'elif' → logprob: -7.198852062225342
    7. '   ' → logprob: -8.323851585388184
    8. 'return' → logprob: -8.448851585388184
    9. ' elif' → logprob: -9.198851585388184
    10. ' return' → logprob: -10.323851585388184

Token 540: ' Après' (ID: 47562)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.4031967222690582
    2. '#' → logprob: -1.6531966924667358
    3. '           ' → logprob: -2.1531968116760254
    4. '       ' → logprob: -5.153196811676025
    5. 'elif' → logprob: -5.278196811676025
    6. ' if' → logprob: -5.903196811676025
    7. 'return' → logprob: -6.028196811676025
    8. 'diff' → logprob: -6.153196811676025
    9. ' #' → logprob: -6.528196811676025
    10. '               ' → logprob: -7.028196811676025

Token 541: ' ' (ID: 220)
  Prédit: '4'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.3984772264957428
    2. '   ' → logprob: -1.8984771966934204
    3. ' if' → logprob: -3.02347731590271
    4. ' ' → logprob: -3.14847731590271
    5. 'if' → logprob: -3.77347731590271
    6. ' j' → logprob: -4.398477077484131
    7. 'j' → logprob: -5.023477077484131
    8. '           ' → logprob: -5.273477077484131
    9. 'elif' → logprob: -5.398477077484131
    10. ' le' → logprob: -5.773477077484131

Token 542: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.012099409475922585
    2. 'un' → logprob: -4.887099266052246
    3. 'cela' → logprob: -6.637099266052246
    4. 'c' → logprob: -7.262099266052246
    5. 'l' → logprob: -7.762099266052246
    6. 'le' → logprob: -8.012099266052246
    7. 'cet' → logprob: -8.137099266052246
    8. 'avoir' → logprob: -8.137099266052246
    9. '5' → logprob: -8.637099266052246
    10. 'ce' → logprob: -8.762099266052246

Token 543: '-' (ID: 12)
  Prédit: '-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.36650949716567993
    2. ' -' → logprob: -2.116509437561035
    3. ' <=' → logprob: -2.366509437561035
    4. ' and' → logprob: -3.241509437561035
    5. '<=' → logprob: -3.241509437561035
    6. 'and' → logprob: -5.491509437561035
    7. '>=' → logprob: -6.116509437561035
    8. '==' → logprob: -6.241509437561035
    9. ' >=' → logprob: -6.241509437561035
    10. ' ==' → logprob: -6.616509437561035

Token 544: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -6.749814019713085e-06
    2. 'y' → logprob: -12.875006675720215
    3. ' ' → logprob: -12.875006675720215
    4. '5' → logprob: -14.250006675720215
    5. '```' → logprob: -15.000006675720215
    6. 'four' → logprob: -15.875006675720215
    7. ',' → logprob: -16.00000762939453
    8. '<|end|>' → logprob: -16.12500762939453
    9. ' y' → logprob: -16.50000762939453
    10. '-' → logprob: -16.87500762939453

Token 545: ',' (ID: 11)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.6891323924064636
    2. '       ' → logprob: -1.1891324520111084
    3. ' if' → logprob: -1.6891324520111084
    4. 'if' → logprob: -5.564132213592529
    5. '   ' → logprob: -6.189132213592529
    6. ' and' → logprob: -6.689132213592529
    7. ',' → logprob: -7.314132213592529
    8. ':' → logprob: -7.814132213592529
    9. ' ' → logprob: -9.689132690429688
    10. '	   ' → logprob: -9.939132690429688

Token 546: ' un' (ID: 537)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.28075411915779114
    2. ' if' → logprob: -1.9057540893554688
    3. 'abs' → logprob: -3.2807540893554688
    4. '#' → logprob: -3.9057540893554688
    5. '           ' → logprob: -4.155754089355469
    6. 'diff' → logprob: -5.155754089355469
    7. '   ' → logprob: -5.530754089355469
    8. '       ' → logprob: -5.530754089355469
    9. ' abs' → logprob: -5.530754089355469
    10. ' #' → logprob: -6.030754089355469

Token 547: ' joueur' (ID: 72629)
  Prédit: ' joueur'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' joueur' → logprob: -0.03514073044061661
    2. ' espace' → logprob: -4.160140514373779
    3. ' player' → logprob: -5.285140514373779
    4. ' des' → logprob: -6.410140514373779
    5. 'jou' → logprob: -6.410140514373779
    6. ' ' → logprob: -6.785140514373779
    7. ' ' → logprob: -7.160140514373779
    8. ' score' → logprob: -7.285140514373779
    9. 'esp' → logprob: -7.285140514373779
    10. ' j' → logprob: -7.410140514373779

Token 548: ' doit' (ID: 21822)
  Prédit: ' gagne'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' gagne' → logprob: -2.0695366859436035
    2. ' a' → logprob: -2.1945366859436035
    3. '   ' → logprob: -2.1945366859436035
    4. '>=' → logprob: -2.3195366859436035
    5. '==' → logprob: -2.4445366859436035
    6. '>' → logprob: -2.5695366859436035
    7. ' peut' → logprob: -3.0695366859436035
    8. ' prend' → logprob: -3.4445366859436035
    9. 'a' → logprob: -3.5695366859436035
    10. 'pe' → logprob: -3.5695366859436035

Token 549: ' prendre' (ID: 24257)
  Prédit: 'prendre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'prendre' → logprob: -0.6653556823730469
    2. 'avoir' → logprob: -1.1653556823730469
    3. ' avoir' → logprob: -2.415355682373047
    4. ' prendre' → logprob: -2.790355682373047
    5. 'g' → logprob: -4.790355682373047
    6. ''avoir' → logprob: -5.415355682373047
    7. ' gagner' → logprob: -6.290355682373047
    8. 'contin' → logprob: -6.790355682373047
    9. 'diff' → logprob: -7.415355682373047
    10. 'have' → logprob: -7.540355682373047

Token 550: ' ' (ID: 220)
  Prédit: 'de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'de' → logprob: -0.2888090908527374
    2. ' deux' → logprob: -1.413809061050415
    3. '2' → logprob: -5.788809299468994
    4. ' ' → logprob: -5.913809299468994
    5. 'un' → logprob: -7.913809299468994
    6. ' au' → logprob: -8.038808822631836
    7. 'le' → logprob: -8.288808822631836
    8. ' de' → logprob: -8.413808822631836
    9. ' un' → logprob: -9.163808822631836
    10. ' two' → logprob: -9.288808822631836

Token 551: '2' (ID: 17)
  Prédit: 'de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'de' → logprob: -0.017466753721237183
    2. '2' → logprob: -4.2674665451049805
    3. ' deux' → logprob: -6.0174665451049805
    4. 'le' → logprob: -8.14246654510498
    5. 'un' → logprob: -8.64246654510498
    6. ' ' → logprob: -9.01746654510498
    7. 'two' → logprob: -9.51746654510498
    8. 'les' → logprob: -9.89246654510498
    9. '_de' → logprob: -10.26746654510498
    10. 'au' → logprob: -10.89246654510498

Token 552: ' pts' (ID: 66515)
  Prédit: 'points'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'points' → logprob: -0.0820096954703331
    2. ' points' → logprob: -2.582009792327881
    3. '<|end|>' → logprob: -6.082009792327881
    4. '_points' → logprob: -7.457009792327881
    5. 'pts' → logprob: -9.957009315490723
    6. '	points' → logprob: -10.082009315490723
    7. 'oints' → logprob: -10.582009315490723
    8. 'tokens' → logprob: -10.707009315490723
    9. '(points' → logprob: -10.832009315490723
    10. ' puntos' → logprob: -11.332009315490723

Token 553: ' cons' (ID: 1473)
  Prédit: ' cons'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' cons' → logprob: -0.058117885142564774
    2. 'd' → logprob: -3.8081178665161133
    3. ' d' → logprob: -3.8081178665161133
    4. ' de' → logprob: -4.933117866516113
    5. 'cons' → logprob: -6.308117866516113
    6. 'de' → logprob: -6.558117866516113
    7. 'con' → logprob: -7.808117866516113
    8. '<|end|>' → logprob: -7.808117866516113
    9. ' ' → logprob: -7.933117866516113
    10. ' consecut' → logprob: -8.808117866516113

Token 554: 'écut' (ID: 96392)
  Prédit: 'écut'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'écut' → logprob: -0.00033677343162707984
    2. 'éc' → logprob: -8.875336647033691
    3. 'ecut' → logprob: -9.125336647033691
    4. 'é' → logprob: -9.875336647033691
    5. 'secut' → logprob: -10.875336647033691
    6. 'cut' → logprob: -12.250336647033691
    7. 'équ' → logprob: -13.125336647033691
    8. '```' → logprob: -13.375336647033691
    9. '{' → logprob: -13.500336647033691
    10. '�' → logprob: -13.750336647033691

Token 555: 'ifs' (ID: 14119)
  Prédit: 'ifs'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ifs' → logprob: -0.8789786100387573
    2. 'ut' → logprob: -1.3789786100387573
    3. 'if' → logprob: -1.6289786100387573
    4. 'u' → logprob: -2.253978729248047
    5. 's' → logprob: -4.628978729248047
    6. 'utive' → logprob: -4.878978729248047
    7. 'atifs' → logprob: -5.503978729248047
    8. 'us' → logprob: -6.378978729248047
    9. 'uts' → logprob: -6.753978729248047
    10. '```' → logprob: -7.253978729248047

Token 556: ' pour' (ID: 1930)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.9142125248908997
    2. 'pour' → logprob: -1.0392124652862549
    3. ' pour' → logprob: -1.6642124652862549
    4. ' to' → logprob: -3.914212465286255
    5. '           ' → logprob: -4.414212703704834
    6. 'to' → logprob: -5.039212703704834
    7. '.' → logprob: -5.664212703704834
    8. '   ' → logprob: -6.039212703704834
    9. 'for' → logprob: -6.539212703704834
    10. ')' → logprob: -6.539212703704834

Token 557: ' gagner' (ID: 64227)
  Prédit: 'g'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'g' → logprob: -0.00197526509873569
    2. ' gagner' → logprob: -6.251975059509277
    3. '	g' → logprob: -11.001975059509277
    4. 'win' → logprob: -11.751975059509277
    5. 'rem' → logprob: -12.751975059509277
    6. 'vain' → logprob: -12.751975059509277
    7. ' ' → logprob: -12.876975059509277
    8. '   ' → logprob: -13.376975059509277
    9. ' g' → logprob: -13.376975059509277
    10. 'gain' → logprob: -13.626975059509277

Token 558: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00803882535547018
    2. '
' → logprob: -5.3830389976501465
    3. '           ' → logprob: -6.8830389976501465
    4. '   ' → logprob: -7.6330389976501465
    5. ':' → logprob: -8.008038520812988
    6. '.' → logprob: -8.133038520812988
    7. ' and' → logprob: -8.633038520812988
    8. ' or' → logprob: -8.633038520812988
    9. '        
' → logprob: -8.633038520812988
    10. ':
' → logprob: -8.758038520812988

Token 559: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.012598424218595028
    2. '           ' → logprob: -4.387598514556885
    3. ' if' → logprob: -10.887598037719727
    4. '   ' → logprob: -11.012598037719727
    5. '        
' → logprob: -11.262598037719727
    6. ',' → logprob: -11.637598037719727
    7. '
' → logprob: -11.637598037719727
    8. '               ' → logprob: -11.887598037719727
    9. '.' → logprob: -12.887598037719727
    10. '      ' → logprob: -13.012598037719727

Token 560: ' #' (ID: 1069)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.3589831590652466
    2. 'if' → logprob: -1.8589831590652466
    3. '       ' → logprob: -1.9839831590652466
    4. 'diff' → logprob: -5.858983039855957
    5. '           ' → logprob: -5.983983039855957
    6. ' diff' → logprob: -6.358983039855957
    7. '   ' → logprob: -8.483983039855957
    8. ' abs' → logprob: -8.733983039855957
    9. 'abs' → logprob: -8.983983039855957
    10. 'score' → logprob: -9.108983039855957

Token 561: ' C' (ID: 363)
  Prédit: 'diff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'diff' → logprob: -1.0635528564453125
    2. 'if' → logprob: -1.3135528564453125
    3. ' if' → logprob: -1.5635528564453125
    4. '       ' → logprob: -2.3135528564453125
    5. ' diff' → logprob: -3.3135528564453125
    6. '           ' → logprob: -4.9385528564453125
    7. ' margin' → logprob: -5.3135528564453125
    8. 'ec' → logprob: -5.4385528564453125
    9. ' ec' → logprob: -5.4385528564453125
    10. 'margin' → logprob: -5.8135528564453125

Token 562: '-à' (ID: 56297)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -1.2030044794082642
    2. '       ' → logprob: -1.9530044794082642
    3. '           ' → logprob: -2.3280043601989746
    4. '   ' → logprob: -2.3280043601989746
    5. 'on' → logprob: -3.3280043601989746
    6. 'if' → logprob: -3.3280043601989746
    7. 'e' → logprob: -3.3280043601989746
    8. ''est' → logprob: -3.3280043601989746
    9. 'elif' → logprob: -3.4530043601989746
    10. 'urrent' → logprob: -3.7030043601989746

Token 563: '-d' (ID: 2469)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -1.7905757427215576
    2. 'def' → logprob: -1.7905757427215576
    3. '#' → logprob: -1.9155757427215576
    4. 'r' → logprob: -1.9155757427215576
    5. '   ' → logprob: -2.5405757427215576
    6. '  ' → logprob: -2.7905757427215576
    7. 'est' → logprob: -3.5405757427215576
    8. '        ' → logprob: -4.040575981140137
    9. '      ' → logprob: -4.040575981140137
    10. 'rc' → logprob: -4.040575981140137

Token 564: ' état' (ID: 59181)
  Prédit: ' abs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' abs' → logprob: -0.08565238863229752
    2. 'abs' → logprob: -2.8356523513793945
    3. '(abs' → logprob: -4.5856523513793945
    4. ' (' → logprob: -4.9606523513793945
    5. ' if' → logprob: -5.5856523513793945
    6. '   ' → logprob: -6.8356523513793945
    7. ' que' → logprob: -7.2106523513793945
    8. 'if' → logprob: -8.585652351379395
    9. ' ' → logprob: -9.335652351379395
    10. ' ' → logprob: -9.585652351379395

Token 565: ' possible' (ID: 4149)
  Prédit: '(j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(j' → logprob: -1.3618109226226807
    2. '           ' → logprob: -1.6118109226226807
    3. ' j' → logprob: -2.1118109226226807
    4. 's' → logprob: -2.1118109226226807
    5. ' (' → logprob: -2.8618109226226807
    6. '   ' → logprob: -3.1118109226226807
    7. '       ' → logprob: -3.7368109226226807
    8. 'abs' → logprob: -4.111810684204102
    9. ' valid' → logprob: -4.111810684204102
    10. ' if' → logprob: -4.361810684204102

Token 566: ' :
' (ID: 10039)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.5595436692237854
    2. ' and' → logprob: -1.1845436096191406
    3. '       ' → logprob: -2.5595436096191406
    4. '   ' → logprob: -4.059543609619141
    5. 'and' → logprob: -4.309543609619141
    6. '           ' → logprob: -5.184543609619141
    7. '               ' → logprob: -6.559543609619141
    8. '    ' → logprob: -6.684543609619141
    9. 'if' → logprob: -6.684543609619141
    10. ' (' → logprob: -6.809543609619141

Token 567: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.2449524849653244
    2. ' abs' → logprob: -2.369952440261841
    3. ' (' → logprob: -3.244952440261841
    4. ' if' → logprob: -3.369952440261841
    5. '           ' → logprob: -3.494952440261841
    6. 'abs' → logprob: -4.61995267868042
    7. '(abs' → logprob: -5.11995267868042
    8. 'if' → logprob: -7.11995267868042
    9. '        ' → logprob: -7.36995267868042
    10. '   ' → logprob: -7.49495267868042

Token 568: ' #' (ID: 1069)
  Prédit: 'abs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'abs' → logprob: -0.7266826629638672
    2. '(abs' → logprob: -1.6016826629638672
    3. ' abs' → logprob: -2.226682662963867
    4. 'if' → logprob: -2.726682662963867
    5. ' (' → logprob: -2.851682662963867
    6. ' if' → logprob: -3.101682662963867
    7. '           ' → logprob: -3.351682662963867
    8. '(j' → logprob: -7.226682662963867
    9. '       ' → logprob: -7.226682662963867
    10. '((' → logprob: -7.601682662963867

Token 569: ' -' (ID: 533)
  Prédit: 'abs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'abs' → logprob: -0.1545470803976059
    2. '(abs' → logprob: -2.2795469760894775
    3. ' abs' → logprob: -3.5295469760894775
    4. ' (' → logprob: -5.279547214508057
    5. '(j' → logprob: -5.779547214508057
    6. '   ' → logprob: -6.279547214508057
    7. '(' → logprob: -7.779547214508057
    8. '           ' → logprob: -8.404546737670898
    9. 'if' → logprob: -8.654546737670898
    10. 'return' → logprob: -8.779546737670898

Token 570: ' quelqu' (ID: 57482)
  Prédit: ' abs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' abs' → logprob: -0.22894562780857086
    2. 'abs' → logprob: -2.228945732116699
    3. ' (' → logprob: -2.728945732116699
    4. '(abs' → logprob: -3.853945732116699
    5. '(j' → logprob: -4.853945732116699
    6. ' j' → logprob: -6.978945732116699
    7. '   ' → logprob: -7.353945732116699
    8. '(' → logprob: -8.2289457321167
    9. ' ' → logprob: -8.3539457321167
    10. ' ' → logprob: -8.6039457321167

Token 571: ''un' (ID: 9788)
  Prédit: ''un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''un' → logprob: -0.012681395746767521
    2. '’un' → logprob: -5.512681484222412
    3. 'n' → logprob: -5.887681484222412
    4. 'u' → logprob: -6.137681484222412
    5. '#' → logprob: -6.637681484222412
    6. ''' → logprob: -6.637681484222412
    7. ''u' → logprob: -7.637681484222412
    8. 'un' → logprob: -8.137681007385254
    9. 'e' → logprob: -10.512681007385254
    10. '```' → logprob: -10.887681007385254

Token 572: ' a' (ID: 261)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.6659587621688843
    2. '==' → logprob: -0.9159587621688843
    3. ' -' → logprob: -2.790958881378174
    4. '-' → logprob: -5.040958881378174
    5. '>=' → logprob: -5.040958881378174
    6. ' >=' → logprob: -5.290958881378174
    7. ' a' → logprob: -6.165958881378174
    8. '-j' → logprob: -6.290958881378174
    9. ' ' → logprob: -7.540958881378174
    10. '>' → logprob: -8.040958404541016

Token 573: ' ' (ID: 220)
  Prédit: 'un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'un' → logprob: -0.40720081329345703
    2. 'le' → logprob: -2.532200813293457
    3. '6' → logprob: -3.157200813293457
    4. 'une' → logprob: -3.157200813293457
    5. '4' → logprob: -3.407200813293457
    6. '5' → logprob: -3.782200813293457
    7. 'au' → logprob: -3.907200813293457
    8. 'g' → logprob: -3.907200813293457
    9. '   ' → logprob: -4.282200813293457
    10. 'exact' → logprob: -5.032200813293457

Token 574: '6' (ID: 21)
  Prédit: 'j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.19595877826213837
    2. '5' → logprob: -3.0709588527679443
    3. 'exact' → logprob: -3.0709588527679443
    4. '4' → logprob: -3.4459588527679443
    5. '(j' → logprob: -3.8209588527679443
    6. '6' → logprob: -4.445958614349365
    7. 'un' → logprob: -5.320958614349365
    8. 'max' → logprob: -5.820958614349365
    9. 'abs' → logprob: -6.320958614349365
    10. 'score' → logprob: -6.695958614349365

Token 575: ' pts' (ID: 66515)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.11994748562574387
    2. 'and' → logprob: -2.2449474334716797
    3. ' or' → logprob: -5.61994743347168
    4. '<=' → logprob: -7.11994743347168
    5. ' <=' → logprob: -7.49494743347168
    6. '==' → logprob: -7.74494743347168
    7. '<|end|>' → logprob: -8.24494743347168
    8. ',' → logprob: -8.49494743347168
    9. ' ' → logprob: -8.86994743347168
    10. '	and' → logprob: -8.86994743347168

Token 576: ' et' (ID: 859)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.04045359417796135
    2. 'and' → logprob: -3.5404536724090576
    3. '           ' → logprob: -4.6654534339904785
    4. ' or' → logprob: -7.0404534339904785
    5. '       ' → logprob: -9.290453910827637
    6. ' ' → logprob: -10.290453910827637
    7. '          ' → logprob: -10.415453910827637
    8. ',' → logprob: -10.415453910827637
    9. '        ' → logprob: -10.915453910827637
    10. '   ' → logprob: -10.915453910827637

Token 577: ' l' (ID: 305)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.33798694610595703
    2. 'l' → logprob: -2.462986946105957
    3. ' y' → logprob: -2.587986946105957
    4. 'abs' → logprob: -2.837986946105957
    5. 'j' → logprob: -4.462986946105957
    6. ' l' → logprob: -4.587986946105957
    7. '(y' → logprob: -4.712986946105957
    8. '(j' → logprob: -4.837986946105957
    9. ' (' → logprob: -4.962986946105957
    10. ' abs' → logprob: -5.587986946105957

Token 578: ''autre' (ID: 52145)
  Prédit: ''autre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''autre' → logprob: -0.0020522393751889467
    2. ''ad' → logprob: -6.752052307128906
    3. '’autre' → logprob: -8.002052307128906
    4. ''aut' → logprob: -9.252052307128906
    5. ''éc' → logprob: -9.627052307128906
    6. 'ad' → logprob: -9.627052307128906
    7. ' autre' → logprob: -10.002052307128906
    8. 'e' → logprob: -10.252052307128906
    9. ''a' → logprob: -10.377052307128906
    10. 'other' → logprob: -10.502052307128906

Token 579: ' ' (ID: 220)
  Prédit: '<='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<=' → logprob: -0.5185052752494812
    2. '==' → logprob: -1.643505334854126
    3. 'a' → logprob: -2.268505334854126
    4. ' <=' → logprob: -2.768505334854126
    5. ' ==' → logprob: -3.893505334854126
    6. ' a' → logprob: -4.143505096435547
    7. 'est' → logprob: -5.393505096435547
    8. '>=' → logprob: -7.143505096435547
    9. ' ' → logprob: -7.268505096435547
    10. ' est' → logprob: -7.518505096435547

Token 580: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -2.9875325708417222e-05
    2. ' ' → logprob: -11.000029563903809
    3. '==' → logprob: -12.125029563903809
    4. '<=' → logprob: -12.750029563903809
    5. '5' → logprob: -13.000029563903809
    6. '   ' → logprob: -13.750029563903809
    7. '<' → logprob: -15.000029563903809
    8. ' ==' → logprob: -15.500029563903809
    9. '  ' → logprob: -16.125030517578125
    10. 'au' → logprob: -16.250030517578125

Token 581: ' =>' (ID: 871)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -1.1026753187179565
    2. '       ' → logprob: -1.1026753187179565
    3. ' or' → logprob: -1.1026753187179565
    4. 'or' → logprob: -6.727675437927246
    5. '   ' → logprob: -7.227675437927246
    6. ' and' → logprob: -7.852675437927246
    7. '          ' → logprob: -7.977675437927246
    8. ':' → logprob: -8.352675437927246
    9. '               ' → logprob: -8.352675437927246
    10. '        ' → logprob: -8.477675437927246

Token 582: ' victoire' (ID: 96596)
  Prédit: ' return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' return' → logprob: -1.0367727279663086
    2. 'return' → logprob: -1.1617727279663086
    3. ' (' → logprob: -2.1617727279663086
    4. '(j' → logprob: -2.4117727279663086
    5. 'True' → logprob: -3.4117727279663086
    6. 'abs' → logprob: -3.7867727279663086
    7. ' True' → logprob: -4.161772727966309
    8. '(abs' → logprob: -4.286772727966309
    9. '(True' → logprob: -4.536772727966309
    10. ' abs' → logprob: -4.536772727966309

Token 583: ' comme' (ID: 7971)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.04048198461532593
    2. '       ' → logprob: -3.7904820442199707
    3. '               ' → logprob: -4.165482044219971
    4. ' or' → logprob: -7.165482044219971
    5. ' and' → logprob: -8.290481567382812
    6. 'return' → logprob: -8.540481567382812
    7. '   ' → logprob: -9.165481567382812
    8. '          ' → logprob: -9.290481567382812
    9. 'and' → logprob: -10.290481567382812
    10. 'or' → logprob: -10.915481567382812

Token 584: ' indiqué' (ID: 108894)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.6609522104263306
    2. ' True' → logprob: -1.5359522104263306
    3. '   ' → logprob: -3.535952091217041
    4. 'False' → logprob: -4.160952091217041
    5. 'continue' → logprob: -4.160952091217041
    6. 'possible' → logprob: -4.160952091217041
    7. '```' → logprob: -4.160952091217041
    8. 'preced' → logprob: -4.410952091217041
    9. 'dans' → logprob: -4.410952091217041
    10. 'return' → logprob: -4.535952091217041

Token 585: ' dans' (ID: 2671)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.7047096490859985
    2. '           ' → logprob: -0.7047096490859985
    3. '               ' → logprob: -5.579709529876709
    4. '   ' → logprob: -5.954709529876709
    5. '
' → logprob: -6.329709529876709
    6. ' or' → logprob: -6.329709529876709
    7. 'return' → logprob: -8.204710006713867
    8. '\n' → logprob: -8.829710006713867
    9. ',' → logprob: -8.954710006713867
    10. ' (' → logprob: -9.079710006713867

Token 586: ' l' (ID: 305)
  Prédit: 'valid'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'valid' → logprob: -0.11444593966007233
    2. 'la' → logprob: -3.614445924758911
    3. '#' → logprob: -3.864445924758911
    4. 'comment' → logprob: -3.864445924758911
    5. 'le' → logprob: -4.11444616317749
    6. 'comments' → logprob: -5.11444616317749
    7. ' valid' → logprob: -5.36444616317749
    8. 'les' → logprob: -5.73944616317749
    9. 'l' → logprob: -5.98944616317749
    10. '   ' → logprob: -6.73944616317749

Token 587: ''entrée' (ID: 115820)
  Prédit: ''état'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''état' → logprob: -1.6667662858963013
    2. 'elif' → logprob: -1.7917662858963013
    3. 'a' → logprob: -1.9167662858963013
    4. 'code' → logprob: -2.0417661666870117
    5. '#' → logprob: -2.5417661666870117
    6. 'def' → logprob: -2.6667661666870117
    7. 'if' → logprob: -3.1667661666870117
    8. 'e' → logprob: -3.2917661666870117
    9. ''' → logprob: -3.5417661666870117
    10. 'return' → logprob: -4.041766166687012

Token 588: ' (' (ID: 350)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.001509739668108523
    2. '           ' → logprob: -6.751509666442871
    3. '   ' → logprob: -8.626509666442871
    4. ' or' → logprob: -9.626509666442871
    5. 'return' → logprob: -10.876509666442871
    6. '               ' → logprob: -11.376509666442871
    7. ' return' → logprob: -11.501509666442871
    8. '<|end|>' → logprob: -11.501509666442871
    9. ' and' → logprob: -11.876509666442871
    10. '	' → logprob: -11.876509666442871

Token 589: '6' (ID: 21)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -1.0452663898468018
    2. '               ' → logprob: -1.1702663898468018
    3. ')' → logprob: -2.2952663898468018
    4. '       ' → logprob: -2.2952663898468018
    5. 'return' → logprob: -2.2952663898468018
    6. ' return' → logprob: -4.795266151428223
    7. 'True' → logprob: -4.795266151428223
    8. ')
' → logprob: -4.920266151428223
    9. '   ' → logprob: -5.420266151428223
    10. ' True' → logprob: -6.045266151428223

Token 590: '-' (ID: 12)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.27086615562438965
    2. ' and' → logprob: -1.6458661556243896
    3. 'and' → logprob: -4.020866394042969
    4. ' ,' → logprob: -4.270866394042969
    5. ')' → logprob: -5.270866394042969
    6. '==' → logprob: -5.770866394042969
    7. ' ==' → logprob: -6.270866394042969
    8. ' or' → logprob: -6.645866394042969
    9. '-' → logprob: -8.395866394042969
    10. ' ' → logprob: -8.520866394042969

Token 591: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.001704579102806747
    2. ' ' → logprob: -6.376704692840576
    3. '   ' → logprob: -13.501704216003418
    4. '  ' → logprob: -15.251704216003418
    5. '４' → logprob: -15.876704216003418
    6. '```' → logprob: -15.876704216003418
    7. '' → logprob: -16.251705169677734
    8. '    ' → logprob: -16.439205169677734
    9. '6' → logprob: -16.564205169677734
    10. ' four' → logprob: -16.939205169677734

Token 592: ' ou' (ID: 2031)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.5513204336166382
    2. ' ou' → logprob: -1.0513204336166382
    3. ' or' → logprob: -3.0513205528259277
    4. ' )' → logprob: -4.426320552825928
    5. ')
' → logprob: -5.551320552825928
    6. 'ou' → logprob: -5.551320552825928
    7. '),' → logprob: -6.551320552825928
    8. ' et' → logprob: -7.176320552825928
    9. ',' → logprob: -7.426320552825928
    10. ' ' → logprob: -7.426320552825928

Token 593: ' ' (ID: 220)
  Prédit: '4'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.02373454160988331
    2. ' ' → logprob: -3.7737345695495605
    3. '6' → logprob: -8.023734092712402
    4. '5' → logprob: -9.648734092712402
    5. '   ' → logprob: -9.773734092712402
    6. '  ' → logprob: -11.523734092712402
    7. '    ' → logprob: -12.023734092712402
    8. '     ' → logprob: -12.336234092712402
    9. ')' → logprob: -12.398734092712402
    10. ' ' → logprob: -12.586234092712402

Token 594: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.002554734703153372
    2. '6' → logprob: -6.252554893493652
    3. ' ' → logprob: -7.502554893493652
    4. '5' → logprob: -9.627554893493652
    5. '   ' → logprob: -13.815054893493652
    6. '(' → logprob: -13.877554893493652
    7. '４' → logprob: -14.002554893493652
    8. '2' → logprob: -14.377554893493652
    9. '  ' → logprob: -14.502554893493652
    10. '     ' → logprob: -14.690054893493652

Token 595: '-' (ID: 12)
  Prédit: '-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.0005402852548286319
    2. ' -' → logprob: -8.000540733337402
    3. '6' → logprob: -9.375540733337402
    4. '==' → logprob: -10.000540733337402
    5. ',' → logprob: -10.250540733337402
    6. ')' → logprob: -10.750540733337402
    7. ' ==' → logprob: -12.125540733337402
    8. '-)' → logprob: -12.500540733337402
    9. '=' → logprob: -12.875540733337402
    10. '   ' → logprob: -13.500540733337402

Token 596: '6' (ID: 21)
  Prédit: '6'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -2.339278580620885e-06
    2. ' ' → logprob: -13.875001907348633
    3. '```' → logprob: -15.437501907348633
    4. '۶' → logprob: -15.562501907348633
    5. '６' → logprob: -16.125001907348633
    6. '٦' → logprob: -16.375001907348633
    7. '६' → logprob: -16.437501907348633
    8. 'j' → logprob: -16.437501907348633
    9. '#' → logprob: -16.625001907348633
    10. '৬' → logprob: -16.625001907348633

Token 597: ')
' (ID: 446)
  Prédit: ')
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')
' → logprob: -0.21473786234855652
    2. ')' → logprob: -2.089737892150879
    3. '       ' → logprob: -2.839737892150879
    4. ')
' → logprob: -5.464737892150879
    5. '):
' → logprob: -5.964737892150879
    6. '           ' → logprob: -6.214737892150879
    7. '   ' → logprob: -7.589737892150879
    8. ' )
' → logprob: -7.589737892150879
    9. '):' → logprob: -7.714737892150879
    10. ').' → logprob: -9.589737892150879

Token 598: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.01024601235985756
    2. '           ' → logprob: -4.6352458000183105
    3. ' if' → logprob: -7.8852458000183105
    4. '   ' → logprob: -10.010246276855469
    5. 'if' → logprob: -11.385246276855469
    6. ' and' → logprob: -11.635246276855469
    7. '               ' → logprob: -12.010246276855469
    8. '<|end|>' → logprob: -12.010246276855469
    9. '
' → logprob: -12.135246276855469
    10. '      ' → logprob: -12.260246276855469

Token 599: ' if' (ID: 538)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.21210621297359467
    2. ' if' → logprob: -2.337106227874756
    3. '           ' → logprob: -2.712106227874756
    4. 'if' (adapté à ' if') → logprob: -3.587106227874756
    5. '   ' → logprob: -8.837105751037598
    6. 'return' → logprob: -9.212105751037598
    7. '
' → logprob: -9.712105751037598
    8. ' return' → logprob: -10.337105751037598
    9. ' or' → logprob: -11.212105751037598
    10. '               ' → logprob: -11.337105751037598

Token 600: ' (' (ID: 350)
  Prédit: '(j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(j' → logprob: -0.0024835076183080673
    2. ' (' → logprob: -6.377483367919922
    3. '(' → logprob: -7.752483367919922
    4. 'j' → logprob: -8.752483367919922
    5. '((' → logprob: -9.377483367919922
    6. '   ' → logprob: -10.127483367919922
    7. '(abs' → logprob: -10.752483367919922
    8. ' ' → logprob: -10.877483367919922
    9. '(not' → logprob: -12.002483367919922
    10. '  ' → logprob: -12.127483367919922

Token 601: 'j' (ID: 73)
  Prédit: '(j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(j' → logprob: -0.3513766825199127
    2. 'j' → logprob: -1.2263766527175903
    3. ' (' → logprob: -6.351376533508301
    4. '   ' → logprob: -7.726376533508301
    5. ' j' → logprob: -8.2263765335083
    6. '(' → logprob: -8.3513765335083
    7. ' ' → logprob: -9.8513765335083
    8. '(abs' → logprob: -9.9763765335083
    9. 'abs' → logprob: -10.3513765335083
    10. '((' → logprob: -10.6013765335083

Token 602: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.5759584903717041
    2. ' ==' → logprob: -0.8259584903717041
    3. ',' → logprob: -11.950958251953125
    4. '>=' → logprob: -12.325958251953125
    5. '<=' → logprob: -12.950958251953125
    6. ' ' → logprob: -13.575958251953125
    7. ' >=' → logprob: -13.825958251953125
    8. '==
' → logprob: -13.825958251953125
    9. ' <=' → logprob: -14.200958251953125
    10. '   ' → logprob: -14.450958251953125

Token 603: ' ' (ID: 220)
  Prédit: '6'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -0.0019391077803447843
    2. ' ' → logprob: -6.251939296722412
    3. '5' → logprob: -12.001938819885254
    4. '   ' → logprob: -12.876938819885254
    5. '  ' → logprob: -14.876938819885254
    6. '     ' → logprob: -15.564438819885254
    7. '4' → logprob: -15.689438819885254
    8. '    ' → logprob: -15.751938819885254
    9. '' → logprob: -16.31443977355957
    10. '٦' → logprob: -16.56443977355957

Token 604: '6' (ID: 21)
  Prédit: '6'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -2.6656825866666622e-05
    2. ' ' → logprob: -10.62502670288086
    3. '5' → logprob: -13.37502670288086
    4. '4' → logprob: -15.12502670288086
    5. '   ' → logprob: -15.56252670288086
    6. 'six' → logprob: -16.87502670288086
    7. '６' → logprob: -17.25002670288086
    8. '६' → logprob: -17.31252670288086
    9. '۶' → logprob: -17.37502670288086
    10. '٦' → logprob: -17.81252670288086

Token 605: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.04860054701566696
    2. 'and' → logprob: -3.048600435256958
    3. '   ' → logprob: -11.923600196838379
    4. ' ' → logprob: -12.673600196838379
    5. '           ' → logprob: -13.673600196838379
    6. ')' → logprob: -14.048600196838379
    7. '    ' → logprob: -14.673600196838379
    8. '	and' → logprob: -14.923600196838379
    9. '       ' → logprob: -15.798600196838379
    10. ' и' → logprob: -16.048601150512695

Token 606: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.20176705718040466
    2. ' y' → logprob: -1.701767086982727
    3. '4' → logprob: -8.076766967773438
    4. ' ' → logprob: -10.451766967773438
    5. '   ' → logprob: -11.326766967773438
    6. '  ' → logprob: -13.951766967773438
    7. '	y' → logprob: -14.451766967773438
    8. '    ' → logprob: -14.951766967773438
    9. '     ' → logprob: -15.826766967773438
    10. '       ' → logprob: -16.701766967773438

Token 607: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.008617766201496124
    2. ' ==' → logprob: -4.758617877960205
    3. '<=' → logprob: -13.008617401123047
    4. '==
' → logprob: -14.508617401123047
    5. '=' → logprob: -16.133617401123047
    6. ')==' → logprob: -16.258617401123047
    7. ' ' → logprob: -16.383617401123047
    8. ']==' → logprob: -16.633617401123047
    9. '===' → logprob: -16.758617401123047
    10. '<' → logprob: -17.133617401123047

Token 608: ' ' (ID: 220)
  Prédit: '4'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.00012558852904476225
    2. ' ' → logprob: -9.000125885009766
    3. '5' → logprob: -13.875125885009766
    4. '   ' → logprob: -14.125125885009766
    5. '  ' → logprob: -15.687625885009766
    6. '' → logprob: -16.312625885009766
    7. '۴' → logprob: -16.687625885009766
    8. '４' → logprob: -17.062625885009766
    9. '    ' → logprob: -17.312625885009766
    10. '৪' → logprob: -17.437625885009766

Token 609: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -3.5716304410016164e-05
    2. ' ' → logprob: -10.250035285949707
    3. '   ' → logprob: -15.750035285949707
    4. '  ' → logprob: -17.625036239624023
    5. '۴' → logprob: -18.250036239624023
    6. '' → logprob: -18.250036239624023
    7. '４' → logprob: -18.625036239624023
    8. '৪' → logprob: -18.875036239624023
    9. '४' → logprob: -19.250036239624023
    10. '    ' → logprob: -19.562536239624023

Token 610: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -8.911954500945285e-05
    2. ' )' → logprob: -10.125088691711426
    3. '           ' → logprob: -11.000088691711426
    4. '):' → logprob: -11.375088691711426
    5. '       ' → logprob: -11.500088691711426
    6. '):
' → logprob: -12.125088691711426
    7. '   ' → logprob: -13.625088691711426
    8. '               ' → logprob: -14.125088691711426
    9. ' and' → logprob: -14.375088691711426
    10. '          ' → logprob: -14.625088691711426

Token 611: ' or' (ID: 503)
  Prédit: ' or'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.19556614756584167
    2. '           ' → logprob: -2.820566177368164
    3. '               ' → logprob: -3.070566177368164
    4. ':' → logprob: -3.195566177368164
    5. '       ' → logprob: -3.695566177368164
    6. ':
' → logprob: -6.695566177368164
    7. 'or' → logprob: -6.695566177368164
    8. ':return' → logprob: -6.945566177368164
    9. ' :' → logprob: -7.570566177368164
    10. ' and' → logprob: -7.570566177368164

Token 612: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.02514682710170746
    2. '(j' → logprob: -3.775146722793579
    3. '(y' → logprob: -6.525146961212158
    4. '(' → logprob: -8.525146484375
    5. '   ' → logprob: -9.150146484375
    6. '    ' → logprob: -10.025146484375
    7. ' y' → logprob: -10.400146484375
    8. ' ' → logprob: -10.775146484375
    9. '  ' → logprob: -11.525146484375
    10. '           ' → logprob: -12.275146484375

Token 613: 'j' (ID: 73)
  Prédit: 'j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.6774926781654358
    2. ' y' → logprob: -1.552492618560791
    3. 'y' → logprob: -1.677492618560791
    4. ' j' → logprob: -2.427492618560791
    5. '6' → logprob: -5.677492618560791
    6. '(' → logprob: -7.302492618560791
    7. ' ' → logprob: -7.802492618560791
    8. ' (' → logprob: -7.927492618560791
    9. '   ' → logprob: -8.42749309539795
    10. '(j' → logprob: -9.17749309539795

Token 614: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.20141977071762085
    2. '==' → logprob: -1.7014198303222656
    3. ' ' → logprob: -12.201419830322266
    4. '=' → logprob: -14.451419830322266
    5. ')' → logprob: -15.826419830322266
    6. ' ==
' → logprob: -16.576419830322266
    7. '==
' → logprob: -16.576419830322266
    8. ' <' → logprob: -16.701419830322266
    9. '==-' → logprob: -16.701419830322266
    10. '<' → logprob: -16.951419830322266

Token 615: ' ' (ID: 220)
  Prédit: '4'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.0013263145228847861
    2. ' ' → logprob: -6.626326084136963
    3. '   ' → logprob: -16.126325607299805
    4. '  ' → logprob: -16.251325607299805
    5. '４' → logprob: -16.626325607299805
    6. '۴' → logprob: -16.626325607299805
    7. '४' → logprob: -18.063825607299805
    8. '' → logprob: -18.126325607299805
    9. ' four' → logprob: -18.251325607299805
    10. '6' → logprob: -18.626325607299805

Token 616: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -4.723352049040841e-06
    2. ' ' → logprob: -12.375004768371582
    3. '４' → logprob: -16.125003814697266
    4. '۴' → logprob: -17.000003814697266
    5. '४' → logprob: -17.250003814697266
    6. '৪' → logprob: -17.375003814697266
    7. '   ' → logprob: -17.750003814697266
    8. '٤' → logprob: -17.875003814697266
    9. ' four' → logprob: -17.937503814697266
    10. '' → logprob: -17.937503814697266

Token 617: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.008626040071249008
    2. 'and' → logprob: -4.7586259841918945
    3. ' et' → logprob: -11.633625984191895
    4. 'et' → logprob: -14.258625984191895
    5. ' ' → logprob: -14.383625984191895
    6. '<|end|>' → logprob: -14.383625984191895
    7. ' и' → logprob: -14.508625984191895
    8. '	and' → logprob: -16.50862693786621
    9. ' ==' → logprob: -16.88362693786621
    10. ',' → logprob: -16.88362693786621

Token 618: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.2063787430524826
    2. ' y' → logprob: -1.706378698348999
    3. '6' → logprob: -5.331378936767578
    4. ' ' → logprob: -9.081378936767578
    5. '	y' → logprob: -13.706378936767578
    6. '   ' → logprob: -14.581378936767578
    7. ' six' → logprob: -15.581378936767578
    8. '  ' → logprob: -16.206378936767578
    9. ''y' → logprob: -17.706378936767578
    10. ' ' → logprob: -17.831378936767578

Token 619: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.5759411454200745
    2. '==' → logprob: -0.8259411454200745
    3. '==
' → logprob: -13.95094108581543
    4. '=' → logprob: -15.07594108581543
    5. ']==' → logprob: -16.32594108581543
    6. ' ==
' → logprob: -16.32594108581543
    7. ')==' → logprob: -16.57594108581543
    8. ' ' → logprob: -16.70094108581543
    9. '===' → logprob: -16.82594108581543
    10. '6' → logprob: -17.07594108581543

Token 620: ' ' (ID: 220)
  Prédit: '6'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -3.15441757265944e-05
    2. ' ' → logprob: -10.375031471252441
    3. '   ' → logprob: -16.000032424926758
    4. '۶' → logprob: -17.000032424926758
    5. '' → logprob: -17.500032424926758
    6. '```' → logprob: -17.500032424926758
    7. '[' → logprob: -17.562532424926758
    8. '٦' → logprob: -17.625032424926758
    9. '६' → logprob: -18.500032424926758
    10. '６' → logprob: -18.625032424926758

Token 621: '6' (ID: 21)
  Prédit: '6'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -1.6240566083070007e-06
    2. ' ' → logprob: -13.500001907348633
    3. '۶' → logprob: -16.750001907348633
    4. '٦' → logprob: -17.625001907348633
    5. '６' → logprob: -18.000001907348633
    6. '```' → logprob: -18.000001907348633
    7. '६' → logprob: -18.125001907348633
    8. '   ' → logprob: -18.250001907348633
    9. '[' → logprob: -18.250001907348633
    10. '৬' → logprob: -18.250001907348633

Token 622: '):
' (ID: 1883)
  Prédit: '):
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.03414086997509003
    2. '):' → logprob: -3.5341408252716064
    3. '       ' → logprob: -6.0341410636901855
    4. ')' → logprob: -6.4091410636901855
    5. '):
' → logprob: -8.534140586853027
    6. '           ' → logprob: -9.659140586853027
    7. ':' → logprob: -10.534140586853027
    8. ':
' → logprob: -11.034140586853027
    9. '   ' → logprob: -11.659140586853027
    10. ' ):
' → logprob: -11.909140586853027

Token 623: '               ' (ID: 506)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.022033782675862312
    2. '       ' → logprob: -4.27203369140625
    3. ':
' → logprob: -5.27203369140625
    4. ':' → logprob: -6.02203369140625
    5. '               ' → logprob: -9.02203369140625
    6. '):
' → logprob: -9.89703369140625
    7. '	       ' → logprob: -10.52203369140625
    8. '          ' → logprob: -10.64703369140625
    9. ':return' → logprob: -10.64703369140625
    10. '   ' → logprob: -12.27203369140625

Token 624: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.345403790473938
    2. '       ' → logprob: -2.0954036712646484
    3. '           ' → logprob: -2.0954036712646484
    4. ' return' → logprob: -3.0954036712646484
    5. '	return' → logprob: -8.345403671264648
    6. '   ' → logprob: -8.470403671264648
    7. '               ' → logprob: -8.470403671264648
    8. '	       ' → logprob: -9.720403671264648
    9. ':return' → logprob: -10.220403671264648
    10. ' ' → logprob: -12.970403671264648

Token 625: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.0004311460361350328
    2. ' True' → logprob: -7.750431060791016
    3. 'False' → logprob: -14.875431060791016
    4. '   ' → logprob: -15.750431060791016
    5. '(True' → logprob: -19.625431060791016
    6. 'true' → logprob: -21.125431060791016
    7. '       ' → logprob: -21.125431060791016
    8. '           ' → logprob: -22.125431060791016
    9. '=True' → logprob: -22.375431060791016
    10. ' ' → logprob: -22.625431060791016

Token 626: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0012330879690125585
    2. '
' → logprob: -6.876233100891113
    3. '           ' → logprob: -9.501233100891113
    4. '   ' → logprob: -9.751233100891113
    5. '<|end|>' → logprob: -11.126233100891113
    6. ')' → logprob: -11.376233100891113
    7. '        
' → logprob: -11.376233100891113
    8. '	' → logprob: -11.876233100891113
    9. '\n' → logprob: -12.126233100891113
    10. '    
' → logprob: -12.251233100891113

Token 627: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0003876550472341478
    2. '           ' → logprob: -8.000387191772461
    3. '
' → logprob: -10.625387191772461
    4. '        
' → logprob: -11.500387191772461
    5. '   ' → logprob: -12.125387191772461
    6. '	' → logprob: -12.875387191772461
    7. '    
' → logprob: -12.875387191772461
    8. ')' → logprob: -13.500387191772461
    9. '      ' → logprob: -14.000387191772461
    10. 'return' → logprob: -14.125387191772461

Token 628: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.010995945893228054
    2. '
' → logprob: -5.260995864868164
    3. '           ' → logprob: -5.885995864868164
    4. 'if' → logprob: -6.385995864868164
    5. ' if' → logprob: -7.385995864868164
    6. 'return' → logprob: -8.135995864868164
    7. '   ' → logprob: -9.010995864868164
    8. '        
' → logprob: -9.135995864868164
    9. '      ' → logprob: -10.385995864868164
    10. ' return' → logprob: -10.885995864868164

Token 629: ' ' (ID: 220)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -1.1343824863433838
    2. '       ' → logprob: -1.7593824863433838
    3. 'if' → logprob: -1.8843824863433838
    4. '#' → logprob: -2.009382486343384
    5. '           ' → logprob: -2.134382486343384
    6. 'False' → logprob: -3.259382486343384
    7. '(j' → logprob: -3.884382486343384
    8. 'j' → logprob: -4.384382247924805
    9. 'True' → logprob: -4.384382247924805
    10. ' return' → logprob: -5.509382247924805

Token 630: '5' (ID: 20)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -1.000397801399231
    2. 'abs' → logprob: -1.000397801399231
    3. '(j' → logprob: -1.625397801399231
    4. '#' → logprob: -3.7503976821899414
    5. 'j' → logprob: -3.7503976821899414
    6. '(abs' → logprob: -4.500397682189941
    7. 'return' → logprob: -5.750397682189941
    8. 'elif' → logprob: -6.250397682189941
    9. ' (' → logprob: -6.500397682189941
    10. 'not' → logprob: -7.375397682189941

Token 631: '-' (ID: 12)
  Prédit: ' <='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.6760169267654419
    2. ' ==' → logprob: -1.176016926765442
    3. '==' → logprob: -2.8010168075561523
    4. ' >=' → logprob: -3.0510168075561523
    5. '<=' → logprob: -3.3010168075561523
    6. '-' → logprob: -4.801016807556152
    7. ' >' → logprob: -4.801016807556152
    8. '>=' → logprob: -5.051016807556152
    9. ' !=' → logprob: -5.426016807556152
    10. '>' → logprob: -5.801016807556152

Token 632: '5' (ID: 20)
  Prédit: '5'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -1.6047699318733066e-05
    2. ' ' → logprob: -11.250016212463379
    3. '=' → logprob: -14.250016212463379
    4. '4' → logprob: -14.375016212463379
    5. '<|end|>' → logprob: -15.625016212463379
    6. 'j' → logprob: -15.750016212463379
    7. ' =' → logprob: -16.250015258789062
    8. '(' → logprob: -16.250015258789062
    9. '```' → logprob: -16.312515258789062
    10. '<|end|>' → logprob: -16.312515258789062

Token 633: ' cas' (ID: 2108)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.12105538696050644
    2. ' ==' → logprob: -2.7460553646087646
    3. ' return' → logprob: -4.121055603027344
    4. 'and' → logprob: -4.496055603027344
    5. '==' → logprob: -4.621055603027344
    6. '           ' → logprob: -5.371055603027344
    7. ':return' → logprob: -5.871055603027344
    8. 'return' → logprob: -6.246055603027344
    9. '   ' → logprob: -6.996055603027344
    10. ':' → logprob: -7.246055603027344

Token 634: ' de' (ID: 334)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.5279594659805298
    2. ' and' → logprob: -2.0279593467712402
    3. '           ' → logprob: -2.2779593467712402
    4. ':' → logprob: -2.7779593467712402
    5. '==' → logprob: -3.2779593467712402
    6. '   ' → logprob: -3.7779593467712402
    7. ' or' → logprob: -4.02795934677124
    8. '       ' → logprob: -4.90295934677124
    9. ' ' → logprob: -5.40295934677124
    10. ' :' → logprob: -5.40295934677124

Token 635: ' match' (ID: 3981)
  Prédit: ' match'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' match' → logprob: -0.9287499189376831
    2. 'match' → logprob: -1.428749918937683
    3. 'nul' → logprob: -1.803749918937683
    4. 'n' → logprob: -2.4287500381469727
    5. 'null' → logprob: -3.1787500381469727
    6. ' nul' → logprob: -3.4287500381469727
    7. 'égalité' → logprob: -3.6787500381469727
    8. ' null' → logprob: -5.553750038146973
    9. 'draw' → logprob: -5.678750038146973
    10. ' n' → logprob: -6.303750038146973

Token 636: ' nul' (ID: 64435)
  Prédit: ' n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' n' → logprob: -0.7706166505813599
    2. ' nul' → logprob: -0.7706166505813599
    3. 'nul' → logprob: -3.1456165313720703
    4. 'n' → logprob: -4.02061653137207
    5. ' null' → logprob: -5.14561653137207
    6. '_n' → logprob: -6.14561653137207
    7. '=' → logprob: -6.77061653137207
    8. '	n' → logprob: -6.77061653137207
    9. '=n' → logprob: -7.52061653137207
    10. 'null' → logprob: -7.64561653137207

Token 637: ' possible' (ID: 4149)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.038759294897317886
    2. '       ' → logprob: -3.413759231567383
    3. ':' → logprob: -6.163759231567383
    4. '   ' → logprob: -7.163759231567383
    5. 'return' → logprob: -7.538759231567383
    6. '          ' → logprob: -7.663759231567383
    7. ':return' → logprob: -7.788759231567383
    8. ' return' → logprob: -8.163759231567383
    9. '               ' → logprob: -8.788759231567383
    10. ' and' → logprob: -9.288759231567383

Token 638: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.01558755710721016
    2. '       ' → logprob: -4.265587329864502
    3. ' if' → logprob: -7.890587329864502
    4. '          ' → logprob: -8.26558780670166
    5. '               ' → logprob: -8.76558780670166
    6. ' and' → logprob: -8.89058780670166
    7. '		' → logprob: -9.64058780670166
    8. ':' → logprob: -9.76558780670166
    9. ' return' → logprob: -9.76558780670166
    10. '   ' → logprob: -9.89058780670166

Token 639: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.006432325579226017
    2. ' if' → logprob: -5.88143253326416
    3. '       ' → logprob: -6.25643253326416
    4. '               ' → logprob: -7.50643253326416
    5. '          ' → logprob: -7.88143253326416
    6. ' and' → logprob: -8.00643253326416
    7. 'if' → logprob: -9.00643253326416
    8. ' return' → logprob: -9.75643253326416
    9. ' or' → logprob: -9.88143253326416
    10. '		' → logprob: -10.13143253326416

Token 640: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.391497403383255
    2. 'if' (adapté à ' if') → logprob: -1.1414973735809326
    3. '           ' → logprob: -5.516497611999512
    4. ' return' → logprob: -8.141497611999512
    5. 'return' → logprob: -8.266497611999512
    6. '       ' → logprob: -10.391497611999512
    7. '   ' → logprob: -11.641497611999512
    8. ' ' → logprob: -12.516497611999512
    9. 'elif' → logprob: -14.016497611999512
    10. '          ' → logprob: -14.141497611999512

Token 641: ' j' (ID: 441)
  Prédit: ' j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' j' → logprob: -0.3839290738105774
    2. ' (' → logprob: -1.5089290142059326
    3. 'j' → logprob: -2.6339290142059326
    4. '(j' → logprob: -3.8839290142059326
    5. '(' → logprob: -5.258929252624512
    6. ' ' → logprob: -9.633929252624512
    7. ' ' → logprob: -11.258929252624512
    8. '	j' → logprob: -11.758929252624512
    9. '   ' → logprob: -12.008929252624512
    10. '5' → logprob: -13.196429252624512

Token 642: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.14267762005329132
    2. '==' → logprob: -2.0176775455474854
    3. ' ' → logprob: -14.142677307128906
    4. ' <=' → logprob: -15.267677307128906
    5. '==
' → logprob: -15.392677307128906
    6. '[' → logprob: -15.517677307128906
    7. '===' → logprob: -15.517677307128906
    8. '=' → logprob: -15.517677307128906
    9. '<=' → logprob: -15.642677307128906
    10. '```' → logprob: -16.142677307128906

Token 643: ' ' (ID: 220)
  Prédit: '5'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.007606270257383585
    2. ' ' → logprob: -4.882606506347656
    3. '   ' → logprob: -16.507606506347656
    4. '  ' → logprob: -17.257606506347656
    5. ' y' → logprob: -17.632606506347656
    6. 'y' → logprob: -18.570106506347656
    7. '```' → logprob: -18.570106506347656
    8. '۵' → logprob: -19.132606506347656
    9. '５' → logprob: -19.195106506347656
    10. ' five' → logprob: -19.257606506347656

Token 644: '5' (ID: 20)
  Prédit: '5'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -6.988221684878226e-06
    2. ' ' → logprob: -11.875006675720215
    3. '５' → logprob: -18.75000762939453
    4. '۵' → logprob: -19.12500762939453
    5. '   ' → logprob: -19.31250762939453
    6. '6' → logprob: -19.62500762939453
    7. '٥' → logprob: -19.62500762939453
    8. '```' → logprob: -19.87500762939453
    9. '५' → logprob: -19.93750762939453
    10. '৫' → logprob: -20.18750762939453

Token 645: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.061988864094018936
    2. 'and' → logprob: -2.8119888305664062
    3. '==' → logprob: -11.436988830566406
    4. ' ==' → logprob: -11.561988830566406
    5. ' ' → logprob: -14.686988830566406
    6. ' и' → logprob: -16.061988830566406
    7. '	and' → logprob: -16.311988830566406
    8. '   ' → logprob: -16.561988830566406
    9. '```' → logprob: -16.936988830566406
    10. '=' → logprob: -17.311988830566406

Token 646: ' y' (ID: 342)
  Prédit: '5'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.2065304070711136
    2. ' ' → logprob: -2.0815303325653076
    3. ' y' → logprob: -2.8315303325653076
    4. 'y' → logprob: -5.831530570983887
    5. '   ' → logprob: -13.456530570983887
    6. '  ' → logprob: -14.581530570983887
    7. ' j' → logprob: -15.206530570983887
    8. ' five' → logprob: -15.206530570983887
    9. 'j' → logprob: -15.456530570983887
    10. '	y' → logprob: -16.58152961730957

Token 647: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.5759705305099487
    2. ' ==' → logprob: -0.8259705305099487
    3. '=' → logprob: -11.200970649719238
    4. '5' → logprob: -11.950970649719238
    5. '===' → logprob: -12.700970649719238
    6. '==
' → logprob: -13.575970649719238
    7. '<|end|>' → logprob: -13.575970649719238
    8. ' ' → logprob: -13.950970649719238
    9. '[' → logprob: -14.075970649719238
    10. ')==' → logprob: -14.200970649719238

Token 648: ' ' (ID: 220)
  Prédit: '5'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.0007102862582542002
    2. ' ' → logprob: -7.250710487365723
    3. '<|end|>' → logprob: -16.000709533691406
    4. '[' → logprob: -16.750709533691406
    5. '۵' → logprob: -17.375709533691406
    6. '５' → logprob: -17.438209533691406
    7. ' five' → logprob: -17.438209533691406
    8. '৫' → logprob: -17.750709533691406
    9. '```' → logprob: -17.750709533691406
    10. '५' → logprob: -17.875709533691406

Token 649: '5' (ID: 20)
  Prédit: '5'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.0001600347168277949
    2. ' ' → logprob: -8.750160217285156
    3. '<|end|>' → logprob: -13.875160217285156
    4. '<|end|>' → logprob: -16.375160217285156
    5. ' five' → logprob: -16.562660217285156
    6. '۵' → logprob: -16.937660217285156
    7. '５' → logprob: -17.062660217285156
    8. '५' → logprob: -17.062660217285156
    9. '৫' → logprob: -17.062660217285156
    10. '=' → logprob: -17.062660217285156

Token 650: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.42651689052581787
    2. '       ' → logprob: -1.4265168905258179
    3. ':
' → logprob: -2.3015170097351074
    4. ':return' → logprob: -5.926517009735107
    5. '           ' → logprob: -6.176517009735107
    6. '               ' → logprob: -6.426517009735107
    7. ' :' → logprob: -9.17651653289795
    8. '=' → logprob: -9.42651653289795
    9. '   ' → logprob: -9.67651653289795
    10. '	' → logprob: -9.80151653289795

Token 651: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.4725133776664734
    2. '       ' → logprob: -1.0975134372711182
    3. '           ' → logprob: -3.472513437271118
    4. ':' → logprob: -4.597513198852539
    5. '	       ' → logprob: -7.972513198852539
    6. ' return' → logprob: -8.097513198852539
    7. '		       ' → logprob: -8.347513198852539
    8. ':return' → logprob: -8.722513198852539
    9. ':
' → logprob: -8.972513198852539
    10. '	' → logprob: -8.972513198852539

Token 652: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.6172767281532288
    2. '       ' → logprob: -1.992276668548584
    3. ' return' → logprob: -2.117276668548584
    4. '               ' → logprob: -2.242276668548584
    5. '           ' → logprob: -2.492276668548584
    6. '	       ' → logprob: -5.117276668548584
    7. '	return' → logprob: -5.117276668548584
    8. '	' → logprob: -7.367276668548584
    9. ':return' → logprob: -7.367276668548584
    10. '		       ' → logprob: -7.867276668548584

Token 653: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -6.694766489090398e-05
    2. ' True' → logprob: -10.000066757202148
    3. 'False' → logprob: -10.750066757202148
    4. '   ' → logprob: -19.75006675720215
    5. 'true' → logprob: -21.75006675720215
    6. '(True' → logprob: -22.00006675720215
    7. ' False' → logprob: -22.50006675720215
    8. '=True' → logprob: -22.87506675720215
    9. '1' → logprob: -24.87506675720215
    10. ' ' → logprob: -25.12506675720215

Token 654: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00041577612864784896
    2. '	' → logprob: -8.125415802001953
    3. '           ' → logprob: -10.250415802001953
    4. '        
' → logprob: -10.625415802001953
    5. '
' → logprob: -11.375415802001953
    6. '<|end|>' → logprob: -11.500415802001953
    7. '   ' → logprob: -11.625415802001953
    8. 'return' → logprob: -11.875415802001953
    9. '      ' → logprob: -12.250415802001953
    10. '    
' → logprob: -13.250415802001953

Token 655: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -3.79811754100956e-05
    2. '           ' → logprob: -10.375038146972656
    3. '   ' → logprob: -12.750038146972656
    4. '	' → logprob: -13.500038146972656
    5. '        
' → logprob: -13.875038146972656
    6. '      ' → logprob: -15.000038146972656
    7. '	   ' → logprob: -15.625038146972656
    8. '<|end|>' → logprob: -15.625038146972656
    9. '
' → logprob: -16.000038146972656
    10. '	       ' → logprob: -16.375038146972656

Token 656: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -2.4272752852994017e-05
    2. '           ' → logprob: -11.37502384185791
    3. 'return' → logprob: -11.75002384185791
    4. 'if' → logprob: -13.87502384185791
    5. '   ' → logprob: -14.12502384185791
    6. '	' → logprob: -14.25002384185791
    7. ' if' → logprob: -14.25002384185791
    8. '      ' → logprob: -14.62502384185791
    9. ' return' → logprob: -14.62502384185791
    10. '        
' → logprob: -15.00002384185791

Token 657: ' autor' (ID: 13432)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.43685439229011536
    2. 'return' → logprob: -1.811854362487793
    3. '(j' → logprob: -3.061854362487793
    4. 'if' → logprob: -3.061854362487793
    5. '#' → logprob: -3.436854362487793
    6. '           ' → logprob: -3.561854362487793
    7. 'j' → logprob: -4.311854362487793
    8. 'False' → logprob: -4.686854362487793
    9. 'True' → logprob: -5.811854362487793
    10. ' (' → logprob: -6.061854362487793

Token 658: 'iser' (ID: 7466)
  Prédit: 'isé'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'isé' → logprob: -0.05372902750968933
    2. 'ise' → logprob: -4.053729057312012
    3. 'isés' → logprob: -4.178729057312012
    4. 'iser' → logprob: -4.553729057312012
    5. 'ised' → logprob: -5.803729057312012
    6. 'isées' → logprob: -6.053729057312012
    7. 'isée' → logprob: -6.303729057312012
    8. 'ized' → logprob: -7.178729057312012
    9. 'is' → logprob: -7.553729057312012
    10. 'isation' → logprob: -8.553729057312012

Token 659: ' d' (ID: 272)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.8296193480491638
    2. ' j' → logprob: -1.2046194076538086
    3. ' abs' → logprob: -1.8296194076538086
    4. '(j' → logprob: -2.8296194076538086
    5. 'abs' → logprob: -4.079619407653809
    6. 'j' → logprob: -4.829619407653809
    7. '   ' → logprob: -4.829619407653809
    8. '(' → logprob: -4.954619407653809
    9. '(abs' → logprob: -6.579619407653809
    10. ' ' → logprob: -6.954619407653809

Token 660: ''autres' (ID: 38753)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.38903355598449707
    2. 'es' → logprob: -2.514033555984497
    3. 'j' → logprob: -3.014033555984497
    4. 'u' → logprob: -3.014033555984497
    5. 'iff' → logprob: -3.139033555984497
    6. '(j' → logprob: -3.389033555984497
    7. ''autres' → logprob: -3.889033555984497
    8. 'eux' → logprob: -4.764033317565918
    9. ''' → logprob: -5.264033317565918
    10. ''u' → logprob: -5.389033317565918

Token 661: ' scores' (ID: 18923)
  Prédit: ' j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' j' → logprob: -0.560046911239624
    2. ' if' → logprob: -2.435046911239624
    3. '   ' → logprob: -2.810046911239624
    4. ' states' → logprob: -2.810046911239624
    5. ' valid' → logprob: -3.185046911239624
    6. ' (' → logprob: -3.310046911239624
    7. '(j' → logprob: -3.560046911239624
    8. 'if' → logprob: -4.185047149658203
    9. '  ' → logprob: -4.560047149658203
    10. ' ' → logprob: -4.685047149658203

Token 662: ' (' (ID: 350)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.6423461437225342
    2. '       ' → logprob: -1.3923461437225342
    3. ' if' → logprob: -1.6423461437225342
    4. 'if' → logprob: -5.142346382141113
    5. ' and' → logprob: -5.392346382141113
    6. '	       ' → logprob: -5.517346382141113
    7. '          ' → logprob: -5.892346382141113
    8. 'return' → logprob: -6.142346382141113
    9. '   ' → logprob: -6.267346382141113
    10. ' (' → logprob: -6.517346382141113

Token 663: 'p' (ID: 79)
  Prédit: ' j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' j' → logprob: -1.0298043489456177
    2. 'j' → logprob: -1.5298043489456177
    3. ' True' → logprob: -1.9048043489456177
    4. 'True' → logprob: -2.154804229736328
    5. '           ' → logprob: -3.154804229736328
    6. ' (' → logprob: -3.404804229736328
    7. '(j' → logprob: -4.154804229736328
    8. '   ' → logprob: -4.654804229736328
    9. ' return' → logprob: -4.654804229736328
    10. 'False' → logprob: -4.654804229736328

Token 664: '.ex' (ID: 3482)
  Prédit: 'oints'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'oints' → logprob: -0.8274040818214417
    2. '<=' → logprob: -1.7024040222167969
    3. '<' → logprob: -1.9524040222167969
    4. 'oint' → logprob: -2.452404022216797
    5. 'r' → logprob: -3.452404022216797
    6. ' <=' → logprob: -3.702404022216797
    7. '>' → logprob: -3.827404022216797
    8. 'oss' → logprob: -4.452404022216797
    9. ')' → logprob: -4.952404022216797
    10. '0' → logprob: -5.327404022216797

Token 665: ' ' (ID: 220)
  Prédit: ' j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' j' → logprob: -0.8332883715629578
    2. ' (' → logprob: -1.2082884311676025
    3. '(j' → logprob: -2.2082884311676025
    4. ' if' → logprob: -2.3332884311676025
    5. 'if' → logprob: -4.458288192749023
    6. ' ' → logprob: -4.583288192749023
    7. '   ' → logprob: -4.708288192749023
    8. '(' → logprob: -5.333288192749023
    9. '           ' → logprob: -5.583288192749023
    10. ')' → logprob: -6.083288192749023

Token 666: '5' (ID: 20)
  Prédit: '6'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -1.0622763633728027
    2. '5' → logprob: -1.4372763633728027
    3. ' (' → logprob: -1.9372763633728027
    4. '(' → logprob: -2.1872763633728027
    5. '(j' → logprob: -2.5622763633728027
    6. ' ' → logprob: -2.8122763633728027
    7. 'j' → logprob: -4.937276363372803
    8. '4' → logprob: -5.187276363372803
    9. ' j' → logprob: -5.187276363372803
    10. '   ' → logprob: -6.187276363372803

Token 667: '-' (ID: 12)
  Prédit: ' <='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.7681040167808533
    2. ' -' → logprob: -2.018104076385498
    3. ' <' → logprob: -2.143104076385498
    4. '-' → logprob: -2.393104076385498
    5. ' >=' → logprob: -2.643104076385498
    6. ' ==' → logprob: -3.393104076385498
    7. ' ' → logprob: -3.768104076385498
    8. ',' → logprob: -4.018104076385498
    9. ' >' → logprob: -4.018104076385498
    10. ' and' → logprob: -5.018104076385498

Token 668: '4' (ID: 19)
  Prédit: '5'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.13927015662193298
    2. '6' → logprob: -2.514270067214966
    3. '4' → logprob: -3.014270067214966
    4. ' ' → logprob: -13.639269828796387
    5. 'j' → logprob: -15.201769828796387
    6. '7' → logprob: -15.889269828796387
    7. '```' → logprob: -15.951769828796387
    8. '>' → logprob: -16.139270782470703
    9. '۵' → logprob: -16.201770782470703
    10. '５' → logprob: -16.451770782470703

Token 669: ' ou' (ID: 2031)
  Prédit: ' or'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.08268411457538605
    2. ')' → logprob: -2.83268404006958
    3. ' )' → logprob: -4.70768404006958
    4. ' ou' → logprob: -5.45768404006958
    5. ' and' → logprob: -5.58268404006958
    6. '           ' → logprob: -6.08268404006958
    7. 'or' → logprob: -8.082684516906738
    8. '            ' → logprob: -8.457684516906738
    9. ' et' → logprob: -9.082684516906738
    10. ' или' → logprob: -9.332684516906738

Token 670: ' ' (ID: 220)
  Prédit: ' '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.25927719473838806
    2. '5' → logprob: -1.8842772245407104
    3. '6' → logprob: -2.634277105331421
    4. '4' → logprob: -5.38427734375
    5. ' ' → logprob: -10.25927734375
    6. '   ' → logprob: -11.13427734375
    7. ')' → logprob: -11.75927734375
    8. ' )' → logprob: -12.13427734375
    9. '  ' → logprob: -12.38427734375
    10. '	' → logprob: -12.44677734375

Token 671: '4' (ID: 19)
  Prédit: '5'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.6390063166618347
    2. ' ' → logprob: -1.2640063762664795
    3. '6' → logprob: -1.8890063762664795
    4. '4' → logprob: -3.2640063762664795
    5. ' y' → logprob: -9.139006614685059
    6. 'y' → logprob: -10.514006614685059
    7. ' ' → logprob: -10.889006614685059
    8. 'j' → logprob: -11.139006614685059
    9. '   ' → logprob: -11.514006614685059
    10. '```' → logprob: -11.889006614685059

Token 672: '-' (ID: 12)
  Prédit: '-'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '-' → logprob: -0.055697813630104065
    2. ' -' → logprob: -3.4306979179382324
    3. '+' → logprob: -3.9306979179382324
    4. ' +' → logprob: -6.930697917938232
    5. ')' → logprob: -8.180697441101074
    6. ' ' → logprob: -8.180697441101074
    7. ',' → logprob: -8.680697441101074
    8. ' or' → logprob: -9.055697441101074
    9. '6' → logprob: -9.180697441101074
    10. '5' → logprob: -9.555697441101074

Token 673: '5' (ID: 20)
  Prédit: '5'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.0021857109386473894
    2. '6' → logprob: -6.127185821533203
    3. ' ' → logprob: -15.127185821533203
    4. 'j' → logprob: -16.252185821533203
    5. '4' → logprob: -16.752185821533203
    6. '```' → logprob: -17.252185821533203
    7. ')' → logprob: -18.002185821533203
    8. '۵' → logprob: -18.127185821533203
    9. '#' → logprob: -18.252185821533203
    10. '５' → logprob: -18.314685821533203

Token 674: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.578178346157074
    2. '           ' → logprob: -0.953178346157074
    3. '):
' → logprob: -3.5781784057617188
    4. '):' → logprob: -4.703178405761719
    5. '               ' → logprob: -4.703178405761719
    6. ' or' → logprob: -6.078178405761719
    7. ' )' → logprob: -6.203178405761719
    8. '       ' → logprob: -6.328178405761719
    9. ')
' → logprob: -8.328178405761719
    10. ',' → logprob: -8.328178405761719

Token 675: ' qui' (ID: 2780)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.07767899334430695
    2. '               ' → logprob: -2.827678918838501
    3. '       ' → logprob: -4.57767915725708
    4. ' and' → logprob: -5.70267915725708
    5. ' or' → logprob: -7.70267915725708
    6. ':
' → logprob: -7.82767915725708
    7. ':' → logprob: -8.202678680419922
    8. 'and' → logprob: -8.327678680419922
    9. '          ' → logprob: -8.452678680419922
    10. ' if' → logprob: -8.577678680419922

Token 676: ' représentent' (ID: 169478)
  Prédit: ' sont'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sont' → logprob: -0.8701841235160828
    2. 's' → logprob: -1.3701841831207275
    3. 'ont' → logprob: -1.9951841831207275
    4. ' peuvent' → logprob: -3.3701841831207275
    5. '#' → logprob: -4.245183944702148
    6. ' correspond' → logprob: -4.245183944702148
    7. ' correspondent' → logprob: -4.620183944702148
    8. 'pe' → logprob: -4.870183944702148
    9. ' restent' → logprob: -4.870183944702148
    10. ' représentent' → logprob: -4.870183944702148

Token 677: ' les' (ID: 1341)
  Prédit: ' une'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' une' → logprob: -0.7591972351074219
    2. ' l' → logprob: -0.8841972351074219
    3. ' un' → logprob: -3.134197235107422
    4. ' des' → logprob: -3.259197235107422
    5. 'l' → logprob: -4.384197235107422
    6. 'une' → logprob: -5.134197235107422
    7. 'un' → logprob: -5.384197235107422
    8. ' True' → logprob: -5.509197235107422
    9. ' la' → logprob: -6.009197235107422
    10. ' le' → logprob: -6.759197235107422

Token 678: ' étapes' (ID: 96583)
  Prédit: ' avantages'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' avantages' → logprob: -1.4424816370010376
    2. ' états' → logprob: -1.4424816370010376
    3. ' scores' → logprob: -1.5674816370010376
    4. ' points' → logprob: -2.317481517791748
    5. ' avances' → logprob: -3.192481517791748
    6. ' states' → logprob: -3.317481517791748
    7. ' avantage' → logprob: -3.942481517791748
    8. ' advantages' → logprob: -4.067481517791748
    9. 'adv' → logprob: -4.192481517791748
    10. ' advantage' → logprob: -4.317481517791748

Token 679: ' en' (ID: 469)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.840811550617218
    2. ' interm' → logprob: -1.3408114910125732
    3. ' possibles' → logprob: -2.3408114910125732
    4. ' suivantes' → logprob: -2.9658114910125732
    5. 'preced' → logprob: -3.5908114910125732
    6. ' en' → logprob: -3.5908114910125732
    7. ' de' → logprob: -4.465811729431152
    8. 'inter' → logprob: -4.465811729431152
    9. ' précéd' → logprob: -4.965811729431152
    10. ' possible' → logprob: -4.965811729431152

Token 680: 'chain' (ID: 13289)
  Prédit: 'cours'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'cours' → logprob: -0.5276525020599365
    2. ' cours' → logprob: -1.0276525020599365
    3. ' ' → logprob: -3.7776525020599365
    4. 'att' → logprob: -4.652652740478516
    5. '   ' → logprob: -5.027652740478516
    6. ' attente' → logprob: -6.152652740478516
    7. 'court' → logprob: -6.402652740478516
    8. '```' → logprob: -6.402652740478516
    9. '  ' → logprob: -6.652652740478516
    10. 'cour' → logprob: -6.902652740478516

Token 681: 'ées' (ID: 5161)
  Prédit: 'ées'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ées' → logprob: -0.017876092344522476
    2. 'es' → logprob: -5.017876148223877
    3. 'ant' → logprob: -5.642876148223877
    4. 'nées' → logprob: -6.517876148223877
    5. 'és' → logprob: -6.642876148223877
    6. 'é' → logprob: -6.892876148223877
    7. 'ees' → logprob: -7.267876148223877
    8. 'r' → logprob: -7.517876148223877
    9. '   ' → logprob: -8.642875671386719
    10. 'ement' → logprob: -8.767875671386719

Token 682: '
' (ID: 198)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.35662415623664856
    2. '               ' → logprob: -1.8566241264343262
    3. '       ' → logprob: -1.9816241264343262
    4. ':' → logprob: -5.981624126434326
    5. '   ' → logprob: -6.731624126434326
    6. ':
' → logprob: -7.481624126434326
    7. ' return' → logprob: -7.731624126434326
    8. 'return' → logprob: -8.106624603271484
    9. ' (' → logprob: -8.731624603271484
    10. ',' → logprob: -9.231624603271484

Token 683: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.858902633190155
    2. '           ' → logprob: -1.1089026927947998
    3. '               ' → logprob: -1.8589026927947998
    4. ':' → logprob: -3.1089026927948
    5. ' and' → logprob: -3.8589026927948
    6. '   ' → logprob: -4.483902454376221
    7. ':
' → logprob: -5.233902454376221
    8. ' :' → logprob: -6.233902454376221
    9. ' :
' → logprob: -6.858902454376221
    10. ':return' → logprob: -7.483902454376221

Token 684: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.4406438171863556
    2. '           ' → logprob: -1.5656437873840332
    3. 'if' (adapté à ' if') → logprob: -2.440643787384033
    4. '       ' → logprob: -2.940643787384033
    5. ' and' → logprob: -5.315643787384033
    6. '   ' → logprob: -7.065643787384033
    7. 'and' → logprob: -7.440643787384033
    8. '               ' → logprob: -7.565643787384033
    9. ' return' → logprob: -8.690644264221191
    10. 'return' → logprob: -8.815644264221191

Token 685: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.5634731650352478
    2. '(j' → logprob: -1.8134732246398926
    3. ' abs' → logprob: -1.8134732246398926
    4. '(abs' → logprob: -2.4384732246398926
    5. 'abs' → logprob: -4.438473224639893
    6. '(' → logprob: -5.563473224639893
    7. ' ' → logprob: -7.313473224639893
    8. '((' → logprob: -7.938473224639893
    9. '   ' → logprob: -8.813472747802734
    10. ' j' → logprob: -8.813472747802734

Token 686: 'j' (ID: 73)
  Prédit: '(j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(j' → logprob: -0.09350509196519852
    2. ' (' → logprob: -3.4685051441192627
    3. 'j' → logprob: -3.9685051441192627
    4. '(abs' → logprob: -3.9685051441192627
    5. 'abs' → logprob: -4.093504905700684
    6. ' abs' → logprob: -6.468504905700684
    7. '(' → logprob: -6.968504905700684
    8. ' j' → logprob: -7.593504905700684
    9. '   ' → logprob: -8.593504905700684
    10. ' ' → logprob: -8.718504905700684

Token 687: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.2820594906806946
    2. '==' → logprob: -1.4070594310760498
    3. '>=' → logprob: -8.032059669494629
    4. ' >=' → logprob: -8.282059669494629
    5. ' in' → logprob: -8.407059669494629
    6. ' ' → logprob: -9.782059669494629
    7. '   ' → logprob: -11.407059669494629
    8. ' <=' → logprob: -11.532059669494629
    9. '<=' → logprob: -11.657059669494629
    10. ',' → logprob: -11.907059669494629

Token 688: ' y' (ID: 342)
  Prédit: '5'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '5' → logprob: -0.0014826052356511354
    2. ' ' → logprob: -6.6264824867248535
    3. '4' → logprob: -8.876482963562012
    4. '   ' → logprob: -11.626482963562012
    5. 'j' → logprob: -12.501482963562012
    6. '(' → logprob: -13.751482963562012
    7. 'y' → logprob: -14.001482963562012
    8. ' (' → logprob: -14.626482963562012
    9. '  ' → logprob: -14.626482963562012
    10. '     ' → logprob: -15.126482963562012

Token 689: '+' (ID: 10)
  Prédit: ' or'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.47995704412460327
    2. '+' → logprob: -1.354957103729248
    3. ' +' → logprob: -2.229957103729248
    4. ')' → logprob: -4.979957103729248
    5. 'or' → logprob: -4.979957103729248
    6. ' ' → logprob: -7.104957103729248
    7. '   ' → logprob: -7.104957103729248
    8. ' and' → logprob: -9.22995662689209
    9. '==' → logprob: -10.22995662689209
    10. ' )' → logprob: -10.60495662689209

Token 690: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.3782830137643032e-05
    2. ' ' → logprob: -11.25001335144043
    3. '   ' → logprob: -14.37501335144043
    4. '  ' → logprob: -17.25001335144043
    5. '```' → logprob: -17.25001335144043
    6. '' → logprob: -17.75001335144043
    7. '-' → logprob: -18.25001335144043
    8. '
' → logprob: -18.50001335144043
    9. '+' → logprob: -18.56251335144043
    10. ' ' → logprob: -18.68751335144043

Token 691: ' and' (ID: 326)
  Prédit: ' or'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.35319453477859497
    2. ')' → logprob: -1.2281944751739502
    3. ' )' → logprob: -5.603194713592529
    4. ' and' → logprob: -7.103194713592529
    5. 'or' → logprob: -8.853194236755371
    6. '    ' → logprob: -10.603194236755371
    7. ' ' → logprob: -10.603194236755371
    8. '   ' → logprob: -11.728194236755371
    9. '           ' → logprob: -11.853194236755371
    10. '       ' → logprob: -12.228194236755371

Token 692: ' y' (ID: 342)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -1.093927264213562
    2. '(j' → logprob: -1.093927264213562
    3. 'y' → logprob: -2.2189273834228516
    4. 'j' → logprob: -2.4689273834228516
    5. ' y' → logprob: -2.4689273834228516
    6. '(y' → logprob: -3.8439273834228516
    7. ' j' → logprob: -3.9689273834228516
    8. '((' → logprob: -5.843927383422852
    9. '(' → logprob: -5.968927383422852
    10. '   ' → logprob: -6.468927383422852

Token 693: ' >=' (ID: 5064)
  Prédit: '<='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '<=' → logprob: -0.3845955431461334
    2. '==' → logprob: -1.759595513343811
    3. ' <=' → logprob: -2.2595956325531006
    4. ' ==' → logprob: -3.7595956325531006
    5. '>=' → logprob: -4.5095953941345215
    6. ' in' → logprob: -5.1345953941345215
    7. ' >=' → logprob: -7.0095953941345215
    8. ')' → logprob: -7.3845953941345215
    9. 'in' → logprob: -7.6345953941345215
    10. '   ' → logprob: -8.63459587097168

Token 694: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.00018077615823131055
    2. ' ' → logprob: -8.625181198120117
    3. '5' → logprob: -14.000181198120117
    4. '   ' → logprob: -15.250181198120117
    5. '3' → logprob: -17.000181198120117
    6. '' → logprob: -17.375181198120117
    7. '۴' → logprob: -17.875181198120117
    8. '  ' → logprob: -18.500181198120117
    9. '४' → logprob: -18.562681198120117
    10. '৪' → logprob: -18.812681198120117

Token 695: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0009554093703627586
    2. ' )' → logprob: -7.625955581665039
    3. '           ' → logprob: -8.000955581665039
    4. '):
' → logprob: -9.750955581665039
    5. '       ' → logprob: -10.750955581665039
    6. '               ' → logprob: -11.250955581665039
    7. '):' → logprob: -11.375955581665039
    8. '   ' → logprob: -11.500955581665039
    9. '          ' → logprob: -12.250955581665039
    10. '            ' → logprob: -12.750955581665039

Token 696: ' or' (ID: 503)
  Prédit: ' or'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.11015164852142334
    2. '       ' → logprob: -3.360151767730713
    3. '           ' → logprob: -3.610151767730713
    4. ' and' → logprob: -3.735151767730713
    5. ':' → logprob: -4.610151767730713
    6. ':
' → logprob: -5.485151767730713
    7. '               ' → logprob: -6.110151767730713
    8. 'or' → logprob: -6.860151767730713
    9. ':return' → logprob: -7.735151767730713
    10. '          ' → logprob: -8.360151290893555

Token 697: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.12915337085723877
    2. '(y' → logprob: -2.504153251647949
    3. '(j' → logprob: -3.254153251647949
    4. '(' → logprob: -7.379153251647949
    5. '   ' → logprob: -9.25415325164795
    6. '           ' → logprob: -10.25415325164795
    7. ' y' → logprob: -11.50415325164795
    8. '          ' → logprob: -11.75415325164795
    9. '    ' → logprob: -11.87915325164795
    10. ' ' → logprob: -12.75415325164795

Token 698: 'y' (ID: 88)
  Prédit: 'y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.021575741469860077
    2. ' y' → logprob: -3.896575689315796
    3. 'j' → logprob: -7.271575927734375
    4. '(y' → logprob: -8.646575927734375
    5. '(j' → logprob: -9.646575927734375
    6. ' (' → logprob: -10.021575927734375
    7. '(' → logprob: -10.771575927734375
    8. '   ' → logprob: -10.896575927734375
    9. '	y' → logprob: -12.021575927734375
    10. 'yj' → logprob: -13.271575927734375

Token 699: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.20486506819725037
    2. '==' → logprob: -1.7048650979995728
    3. '>=' → logprob: -6.329864978790283
    4. ' >=' → logprob: -6.704864978790283
    5. ' <=' → logprob: -8.579865455627441
    6. '<=' → logprob: -8.704865455627441
    7. ' ' → logprob: -10.329865455627441
    8. '+' → logprob: -11.079865455627441
    9. '   ' → logprob: -11.329865455627441
    10. '=' → logprob: -12.704865455627441

Token 700: ' j' (ID: 441)
  Prédit: 'j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.00016146517009474337
    2. ' j' → logprob: -8.750161170959473
    3. '   ' → logprob: -12.875161170959473
    4. '	j' → logprob: -15.500161170959473
    5. '(j' → logprob: -16.25016212463379
    6. '       ' → logprob: -17.87516212463379
    7. ' ' → logprob: -18.12516212463379
    8. 'x' → logprob: -18.75016212463379
    9. '     ' → logprob: -19.12516212463379
    10. '           ' → logprob: -19.12516212463379

Token 701: '+' (ID: 10)
  Prédit: '+'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -4.1557283111615106e-05
    2. ' +' → logprob: -10.125041961669922
    3. '4' → logprob: -13.875041961669922
    4. '5' → logprob: -15.250041961669922
    5. '   ' → logprob: -16.000041961669922
    6. '1' → logprob: -16.750041961669922
    7. '+j' → logprob: -18.250041961669922
    8. ' ' → logprob: -18.500041961669922
    9. '＋' → logprob: -18.625041961669922
    10. '```' → logprob: -18.625041961669922

Token 702: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.1994775377388578e-05
    2. ' ' → logprob: -11.375012397766113
    3. '   ' → logprob: -15.750012397766113
    4. '0' → logprob: -16.125011444091797
    5. '4' → logprob: -16.812511444091797
    6. '```' → logprob: -17.750011444091797
    7. '	' → logprob: -18.187511444091797
    8. '  ' → logprob: -18.687511444091797
    9. '' → logprob: -19.062511444091797
    10. '{' → logprob: -19.187511444091797

Token 703: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.0699508786201477
    2. 'and' → logprob: -2.694950819015503
    3. '```' → logprob: -12.944951057434082
    4. ' ' → logprob: -13.194951057434082
    5. '   ' → logprob: -13.319951057434082
    6. 'et' → logprob: -13.319951057434082
    7. '           ' → logprob: -13.569951057434082
    8. ' et' → logprob: -13.569951057434082
    9. '	and' → logprob: -13.694951057434082
    10. ' ' → logprob: -13.819951057434082

Token 704: ' j' (ID: 441)
  Prédit: 'j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.0002390594017924741
    2. ' j' → logprob: -8.375239372253418
    3. '   ' → logprob: -11.875239372253418
    4. '	j' → logprob: -14.000239372253418
    5. '       ' → logprob: -15.000239372253418
    6. '4' → logprob: -15.625239372253418
    7. '           ' → logprob: -16.1252384185791
    8. '     ' → logprob: -17.0002384185791
    9. 'x' → logprob: -17.5002384185791
    10. ' ' → logprob: -17.6252384185791

Token 705: ' >=' (ID: 5064)
  Prédit: '>='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '>=' → logprob: -0.1797618567943573
    2. ' >=' → logprob: -1.8047618865966797
    3. '   ' → logprob: -12.55476188659668
    4. ')>=' → logprob: -13.05476188659668
    5. ']>=' → logprob: -13.17976188659668
    6. '+' → logprob: -13.17976188659668
    7. '≥' → logprob: -13.42976188659668
    8. '<=' → logprob: -13.67976188659668
    9. ' ' → logprob: -13.92976188659668
    10. '[' → logprob: -14.05476188659668

Token 706: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -1.9146995327901095e-05
    2. ' ' → logprob: -10.875019073486328
    3. '   ' → logprob: -16.875019073486328
    4. '' → logprob: -17.875019073486328
    5. '۴' → logprob: -19.000019073486328
    6. '```' → logprob: -19.312519073486328
    7. '৪' → logprob: -19.500019073486328
    8. '४' → logprob: -19.562519073486328
    9. '４' → logprob: -19.750019073486328
    10. '  ' → logprob: -19.812519073486328

Token 707: '):
' (ID: 1883)
  Prédit: '):
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.04167701676487923
    2. '):' → logprob: -3.2916769981384277
    3. '       ' → logprob: -6.291676998138428
    4. ')' → logprob: -6.916676998138428
    5. '           ' → logprob: -7.416676998138428
    6. ':' → logprob: -9.916677474975586
    7. '):
' → logprob: -10.291677474975586
    8. ' ):
' → logprob: -10.416677474975586
    9. '   ' → logprob: -11.041677474975586
    10. '):

' → logprob: -11.291677474975586

Token 708: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.40176597237586975
    2. '           ' → logprob: -1.1517659425735474
    3. '       ' → logprob: -4.276765823364258
    4. ' return' → logprob: -8.026765823364258
    5. ':' → logprob: -8.276765823364258
    6. '	       ' → logprob: -9.151765823364258
    7. ':return' → logprob: -9.776765823364258
    8. 'return' → logprob: -10.276765823364258
    9. ':
' → logprob: -10.776765823364258
    10. '          ' → logprob: -11.151765823364258

Token 709: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.4407433569431305
    2. ' return' → logprob: -1.190743327140808
    3. '           ' → logprob: -3.3157434463500977
    4. '       ' → logprob: -4.565743446350098
    5. '               ' → logprob: -5.190743446350098
    6. '   ' → logprob: -9.315743446350098
    7. '	return' → logprob: -9.690743446350098
    8. '	       ' → logprob: -12.315743446350098
    9. ' ' → logprob: -12.565743446350098
    10. ':return' → logprob: -13.315743446350098

Token 710: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -4.5491004129871726e-05
    2. ' True' → logprob: -10.000045776367188
    3. 'False' → logprob: -17.625045776367188
    4. '   ' → logprob: -18.500045776367188
    5. 'true' → logprob: -21.750045776367188
    6. '(True' → logprob: -21.875045776367188
    7. ' ' → logprob: -22.500045776367188
    8. '       ' → logprob: -22.875045776367188
    9. '           ' → logprob: -23.000045776367188
    10. '  ' → logprob: -23.750045776367188

Token 711: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0002004410926019773
    2. '	' → logprob: -9.375200271606445
    3. '
' → logprob: -9.625200271606445
    4. '   ' → logprob: -10.750200271606445
    5. '           ' → logprob: -12.000200271606445
    6. '<|end|>' → logprob: -12.375200271606445
    7. 'return' → logprob: -12.750200271606445
    8. '    
' → logprob: -12.875200271606445
    9. '        
' → logprob: -13.125200271606445
    10. '	return' → logprob: -13.250200271606445

Token 712: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00017445837147533894
    2. '	' → logprob: -9.000174522399902
    3. '
' → logprob: -10.875174522399902
    4. '   ' → logprob: -11.125174522399902
    5. '           ' → logprob: -12.625174522399902
    6. 'return' → logprob: -12.750174522399902
    7. '	   ' → logprob: -13.375174522399902
    8. '        
' → logprob: -13.500174522399902
    9. '    
' → logprob: -13.750174522399902
    10. '    ' → logprob: -13.750174522399902

Token 713: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -5.6934557505883276e-05
    2. '   ' → logprob: -11.000057220458984
    3. '	' → logprob: -11.500057220458984
    4. '
' → logprob: -11.750057220458984
    5. 'return' → logprob: -11.875057220458984
    6. '        
' → logprob: -12.375057220458984
    7. '           ' → logprob: -12.625057220458984
    8. ' return' → logprob: -13.125057220458984
    9. '      ' → logprob: -13.500057220458984
    10. '    ' → logprob: -14.125057220458984

Token 714: ' états' (ID: 184259)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.3151760995388031
    2. 'return' → logprob: -1.3151761293411255
    3. ' return' → logprob: -6.565176010131836
    4. '   ' → logprob: -7.690176010131836
    5. '           ' → logprob: -10.565176010131836
    6. '	return' → logprob: -10.940176010131836
    7. ' ' → logprob: -14.315176010131836
    8. '      ' → logprob: -14.565176010131836
    9. '  ' → logprob: -14.815176010131836
    10. '               ' → logprob: -15.065176010131836

Token 715: ' autres' (ID: 18701)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'False' → logprob: -0.6452160477638245
    2. ' False' → logprob: -0.8952160477638245
    3. '       ' → logprob: -3.2702159881591797
    4. 'return' → logprob: -4.89521598815918
    5. '=False' → logprob: -5.39521598815918
    6. ' return' → logprob: -5.52021598815918
    7. '           ' → logprob: -5.64521598815918
    8. '_false' → logprob: -6.14521598815918
    9. ' not' → logprob: -7.14521598815918
    10. '        ' → logprob: -7.39521598815918

Token 716: ' que' (ID: 661)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'False' → logprob: -0.7698357105255127
    2. ' False' → logprob: -1.0198357105255127
    3. '=False' → logprob: -2.5198357105255127
    4. 'return' → logprob: -3.6448357105255127
    5. '       ' → logprob: -4.144835472106934
    6. '_false' → logprob: -4.519835472106934
    7. '           ' → logprob: -4.769835472106934
    8. '      ' → logprob: -5.519835472106934
    9. ':' → logprob: -5.519835472106934
    10. '=' → logprob: -5.769835472106934

Token 717: ' ci' (ID: 7405)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'False' → logprob: -1.084377408027649
    2. 'True' → logprob: -1.709377408027649
    3. '(' → logprob: -1.959377408027649
    4. '(j' → logprob: -2.0843772888183594
    5. '4' → logprob: -2.2093772888183594
    6. 'j' → logprob: -3.8343772888183594
    7. ' (' → logprob: -4.084377288818359
    8. ' True' → logprob: -4.084377288818359
    9. 'valid' → logprob: -4.334377288818359
    10. ' False' → logprob: -4.459377288818359

Token 718: '-dessus' (ID: 74812)
  Prédit: 't'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 't' → logprob: -0.8440720438957214
    2. 'bles' → logprob: -1.7190721035003662
    3. 'ty' → logprob: -2.469072103500366
    4. 'tes' → logprob: -2.969072103500366
    5. 'rc' → logprob: -3.469072103500366
    6. 'ont' → logprob: -3.594072103500366
    7. '   ' → logprob: -3.969072103500366
    8. 'nés' → logprob: -4.094071865081787
    9. '=' → logprob: -4.219071865081787
    10. 'r' → logprob: -4.719071865081787

Token 719: ' ne' (ID: 453)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0025014597922563553
    2. ':' → logprob: -7.002501487731934
    3. '           ' → logprob: -7.377501487731934
    4. ':
' → logprob: -8.127501487731934
    5. ' return' → logprob: -8.627501487731934
    6. ':return' → logprob: -8.877501487731934
    7. 'return' → logprob: -9.502501487731934
    8. '   ' → logprob: -9.877501487731934
    9. '      ' → logprob: -10.127501487731934
    10. ' False' → logprob: -10.252501487731934

Token 720: ' sont' (ID: 5242)
  Prédit: 's'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 's' → logprob: -0.0021895181853324175
    2. 'pas' → logprob: -7.127189636230469
    3. 'ser' → logprob: -7.252189636230469
    4. ' sont' → logprob: -7.502189636230469
    5. 'cess' → logprob: -10.252189636230469
    6. 'pass' → logprob: -10.627189636230469
    7. ' seront' → logprob: -11.627189636230469
    8. 'do' → logprob: -11.627189636230469
    9. 'return' → logprob: -12.127189636230469
    10. 'ont' → logprob: -12.252189636230469

Token 721: ' pas' (ID: 2173)
  Prédit: 'pas'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'pas' → logprob: -0.0014032063772901893
    2. ' pas' → logprob: -6.626403331756592
    3. 'not' → logprob: -9.876402854919434
    4. 'valid' → logprob: -11.876402854919434
    5. '   ' → logprob: -12.001402854919434
    6. 'pass' → logprob: -13.001402854919434
    7. '           ' → logprob: -13.376402854919434
    8. 'False' → logprob: -13.376402854919434
    9. '_pas' → logprob: -13.751402854919434
    10. 'True' → logprob: -14.001402854919434

Token 722: ' val' (ID: 1459)
  Prédit: 'valid'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'valid' → logprob: -0.09243958443403244
    2. 'val' → logprob: -2.842439651489258
    3. ' valid' → logprob: -3.842439651489258
    4. ' val' → logprob: -4.967439651489258
    5. ' valide' → logprob: -7.467439651489258
    6. ' True' → logprob: -7.842439651489258
    7. 'accept' → logprob: -8.467439651489258
    8. 'True' → logprob: -8.467439651489258
    9. 'possible' → logprob: -8.717439651489258
    10. 'allowed' → logprob: -11.342439651489258

Token 723: 'ides' (ID: 4105)
  Prédit: 'ides'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ides' → logprob: -0.11534827202558517
    2. 'ide' → logprob: -2.3653483390808105
    3. 'id' → logprob: -4.2403483390808105
    4. 'ids' → logprob: -8.615347862243652
    5. 'ables' → logprob: -9.240347862243652
    6. '```' → logprob: -10.115347862243652
    7. '</' → logprob: -10.615347862243652
    8. 'able' → logprob: -10.615347862243652
    9. '#' → logprob: -10.740347862243652
    10. '   ' → logprob: -10.865347862243652

Token 724: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0009061029995791614
    2. '
' → logprob: -7.625905990600586
    3. '           ' → logprob: -8.875905990600586
    4. '   ' → logprob: -9.625905990600586
    5. '	' → logprob: -9.875905990600586
    6. ':
' → logprob: -10.250905990600586
    7. '               ' → logprob: -10.625905990600586
    8. ':' → logprob: -10.750905990600586
    9. '\n' → logprob: -10.875905990600586
    10. '        
' → logprob: -11.000905990600586

Token 725: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -8.08944896562025e-05
    2. '           ' → logprob: -10.000081062316895
    3. '	' → logprob: -10.375081062316895
    4. '               ' → logprob: -13.375081062316895
    5. '   ' → logprob: -14.625081062316895
    6. '        
' → logprob: -14.625081062316895
    7. '      ' → logprob: -14.875081062316895
    8. '
' → logprob: -15.125081062316895
    9. '	   ' → logprob: -15.625081062316895
    10. 'return' → logprob: -15.750081062316895

Token 726: ' return' (ID: 622)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.06255429238080978
    2. '           ' → logprob: -2.937554359436035
    3. ' return' → logprob: -5.312554359436035
    4. 'return' (adapté à ' return') → logprob: -6.062554359436035
    5. '               ' → logprob: -8.187554359436035
    6. '   ' → logprob: -10.062554359436035
    7. '
' → logprob: -11.187554359436035
    8. 'False' → logprob: -11.687554359436035
    9. ' False' → logprob: -11.812554359436035
    10. ':return' → logprob: -12.187554359436035

Token 727: ' False' (ID: 7983)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'False' → logprob: -4.5491004129871726e-05
    2. ' False' → logprob: -10.000045776367188
    3. '(False' → logprob: -19.375045776367188
    4. '=False' → logprob: -22.500045776367188
    5. 'false' → logprob: -22.500045776367188
    6. '   ' → logprob: -23.500045776367188
    7. '_false' → logprob: -23.625045776367188
    8. 'True' → logprob: -24.500045776367188
    9. 'F' → logprob: -25.125045776367188
    10. '0' → logprob: -25.875045776367188

Token 728: '
        
' (ID: 20417)
  Prédit: '\n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '\n' → logprob: -0.43567830324172974
    2. '<|end|>' → logprob: -1.435678243637085
    3. '   ' → logprob: -2.935678243637085
    4. '
' → logprob: -3.685678243637085
    5. '    
' → logprob: -4.560678482055664
    6. '  
' → logprob: -5.185678482055664
    7. ' 
' → logprob: -5.810678482055664
    8. '	return' → logprob: -5.935678482055664
    9. '```' → logprob: -6.060678482055664
    10. '\' → logprob: -6.185678482055664

Token 729: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.09122159332036972
    2. '   ' → logprob: -2.466221570968628
    3. '        
' → logprob: -6.841221809387207
    4. '    
' → logprob: -7.091221809387207
    5. '<|end|>' → logprob: -8.966221809387207
    6. '
' → logprob: -9.466221809387207
    7. '	' → logprob: -9.716221809387207
    8. '    ' → logprob: -10.591221809387207
    9. '  
' → logprob: -10.716221809387207
    10. '	   ' → logprob: -11.216221809387207

Token 730: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.20362214744091034
    2. '   ' → logprob: -1.7036221027374268
    3. '        
' → logprob: -6.953622341156006
    4. '    
' → logprob: -7.078622341156006
    5. '
' → logprob: -8.203621864318848
    6. '    ' → logprob: -10.078621864318848
    7. 'return' → logprob: -10.328621864318848
    8. '  
' → logprob: -11.453621864318848
    9. '	' → logprob: -11.578621864318848
    10. '     ' → logprob: -11.828621864318848

Token 731: ' Pour' (ID: 13931)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8001085519790649
    2. 'return' → logprob: -1.300108551979065
    3. 'if' → logprob: -2.0501084327697754
    4. '       ' → logprob: -2.4251084327697754
    5. '#' → logprob: -3.3001084327697754
    6. 'j' → logprob: -4.675108432769775
    7. ' if' → logprob: -4.925108432769775
    8. ' return' → logprob: -5.300108432769775
    9. ' #' → logprob: -7.550108432769775
    10. 'False' → logprob: -7.550108432769775

Token 732: ' tous' (ID: 10688)
  Prédit: ' j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' j' → logprob: -0.08404836058616638
    2. 'j' → logprob: -2.959048271179199
    3. ' (' → logprob: -3.959048271179199
    4. ' not' → logprob: -5.459048271179199
    5. 'not' → logprob: -6.084048271179199
    6. ' ' → logprob: -6.959048271179199
    7. '(j' → logprob: -6.959048271179199
    8. '(' → logprob: -7.959048271179199
    9. ' les' → logprob: -8.3340482711792
    10. '0' → logprob: -8.5840482711792

Token 733: ' les' (ID: 1341)
  Prédit: ' j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' j' → logprob: -0.047589629888534546
    2. ' les' → logprob: -3.4225895404815674
    3. ' (' → logprob: -5.5475897789001465
    4. 'les' → logprob: -5.9225897789001465
    5. '(j' → logprob: -6.2975897789001465
    6. ' autres' → logprob: -6.2975897789001465
    7. 'j' → logprob: -7.0475897789001465
    8. '   ' → logprob: -7.1725897789001465
    9. ' ' → logprob: -7.2975897789001465
    10. '  ' → logprob: -8.672589302062988

Token 734: ' autres' (ID: 18701)
  Prédit: ' j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' j' → logprob: -0.29119396209716797
    2. 'j' → logprob: -1.791193962097168
    3. ' autres' → logprob: -3.291193962097168
    4. 'aut' → logprob: -4.791193962097168
    5. '(j' → logprob: -4.791193962097168
    6. ' cas' → logprob: -5.291193962097168
    7. ' ' → logprob: -5.541193962097168
    8. ' points' → logprob: -5.541193962097168
    9. ' états' → logprob: -5.666193962097168
    10. 'points' → logprob: -5.791193962097168

Token 735: ' cas' (ID: 2108)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4433630406856537
    2. ' cases' → logprob: -1.943363070487976
    3. '       ' → logprob: -2.4433629512786865
    4. 'if' → logprob: -3.6933629512786865
    5. ' states' → logprob: -3.9433629512786865
    6. ':' → logprob: -3.9433629512786865
    7. ' if' → logprob: -4.068363189697266
    8. ' cas' → logprob: -4.818363189697266
    9. '  ' → logprob: -4.943363189697266
    10. 'cases' → logprob: -4.943363189697266

Token 736: ',' (ID: 11)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0016750642098486423
    2. '   ' → logprob: -7.126675128936768
    3. ' if' → logprob: -7.376675128936768
    4. ':' → logprob: -9.37667465209961
    5. '        
' → logprob: -10.00167465209961
    6. ',' → logprob: -10.00167465209961
    7. 'if' → logprob: -11.00167465209961
    8. ':
' → logprob: -11.50167465209961
    9. '```' → logprob: -12.25167465209961
    10. '    ' → logprob: -12.37667465209961

Token 737: ' tant' (ID: 16235)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.8664938807487488
    2. ' j' → logprob: -0.9914938807487488
    3. ' return' → logprob: -1.6164939403533936
    4. '   ' → logprob: -5.2414937019348145
    5. 'return' → logprob: -5.8664937019348145
    6. '    ' → logprob: -7.2414937019348145
    7. ' (' → logprob: -8.116494178771973
    8. ' True' → logprob: -8.491494178771973
    9. 'j' → logprob: -8.616494178771973
    10. ' if' → logprob: -9.616494178771973

Token 738: ' que' (ID: 661)
  Prédit: ' que'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' que' → logprob: -0.25460749864578247
    2. 'que' → logprob: -1.5046074390411377
    3. '       ' → logprob: -6.504607677459717
    4. '   ' → logprob: -7.504607677459717
    5. ' qu' → logprob: -8.004607200622559
    6. ' j' → logprob: -9.254607200622559
    7. 'qu' → logprob: -9.629607200622559
    8. '      ' → logprob: -9.879607200622559
    9. '    ' → logprob: -10.254607200622559
    10. '        ' → logprob: -10.879607200622559

Token 739: ' les' (ID: 1341)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.6966312527656555
    2. ' j' → logprob: -1.4466311931610107
    3. '(j' → logprob: -2.6966311931610107
    4. '0' → logprob: -2.9466311931610107
    5. 'j' → logprob: -2.9466311931610107
    6. ' abs' → logprob: -3.0716311931610107
    7. ' ' → logprob: -3.8216311931610107
    8. 'abs' → logprob: -4.19663143157959
    9. '(' → logprob: -5.32163143157959
    10. ' max' → logprob: -6.32163143157959

Token 740: ' scores' (ID: 18923)
  Prédit: ' abs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' abs' → logprob: -0.6332216262817383
    2. ' j' → logprob: -1.7582216262817383
    3. 'j' → logprob: -2.1332216262817383
    4. 'abs' → logprob: -2.5082216262817383
    5. ' (' → logprob: -2.8832216262817383
    6. 'points' → logprob: -3.8832216262817383
    7. ' points' → logprob: -4.508221626281738
    8. ' ' → logprob: -6.133221626281738
    9. '(abs' → logprob: -6.258221626281738
    10. '(j' → logprob: -6.883221626281738

Token 741: ' sont' (ID: 5242)
  Prédit: 'diff'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'diff' → logprob: -0.5898918509483337
    2. 's' → logprob: -1.3398919105529785
    3. ' sont' → logprob: -2.3398919105529785
    4. ' ne' → logprob: -3.3398919105529785
    5. '<=' → logprob: -4.3398919105529785
    6. ' restent' → logprob: -4.3398919105529785
    7. 'j' → logprob: -5.3398919105529785
    8. ' <=' → logprob: -5.5898919105529785
    9. 'jou' → logprob: -5.8398919105529785
    10. '[j' → logprob: -6.2148919105529785

Token 742: ' <=' (ID: 5017)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '0' → logprob: -0.2393183410167694
    2. 'dans' → logprob: -1.8643183708190918
    3. ' dans' → logprob: -3.739318370819092
    4. ' ' → logprob: -4.489318370819092
    5. '>=' → logprob: -4.864318370819092
    6. 'j' → logprob: -5.364318370819092
    7. 'valid' → logprob: -6.364318370819092
    8. ' valid' → logprob: -6.489318370819092
    9. ' >=' → logprob: -6.489318370819092
    10. '   ' → logprob: -7.114318370819092

Token 743: ' ' (ID: 220)
  Prédit: '5'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.3238472640514374
    2. ' ' → logprob: -1.3238472938537598
    3. '4' → logprob: -4.57384729385376
    4. '6' → logprob: -9.573846817016602
    5. '   ' → logprob: -9.698846817016602
    6. ' max' → logprob: -10.448846817016602
    7. '  ' → logprob: -10.948846817016602
    8. ' ' → logprob: -11.323846817016602
    9. 'max' → logprob: -11.698846817016602
    10. '1' → logprob: -12.573846817016602

Token 744: '5' (ID: 20)
  Prédit: '5'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.3137052059173584
    2. '4' → logprob: -1.3137052059173584
    3. ' ' → logprob: -7.9387054443359375
    4. 'max' → logprob: -10.063705444335938
    5. 'j' → logprob: -10.188705444335938
    6. ' j' → logprob: -13.063705444335938
    7. '   ' → logprob: -13.563705444335938
    8. '3' → logprob: -13.813705444335938
    9. ' max' → logprob: -14.063705444335938
    10. 'min' → logprob: -15.188705444335938

Token 745: ' et' (ID: 859)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.5645466446876526
    2. '       ' → logprob: -0.9395466446876526
    3. 'and' → logprob: -3.814546585083008
    4. '   ' → logprob: -4.189546585083008
    5. ':' → logprob: -6.564546585083008
    6. ':
' → logprob: -7.189546585083008
    7. '           ' → logprob: -7.689546585083008
    8. ',' → logprob: -7.814546585083008
    9. ' ' → logprob: -9.564546585083008
    10. ' et' → logprob: -9.814546585083008

Token 746: ' pas' (ID: 2173)
  Prédit: 'j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.7401746511459351
    2. ' j' → logprob: -0.7401746511459351
    3. ' abs' → logprob: -3.7401747703552246
    4. '0' → logprob: -4.990174770355225
    5. 'abs' → logprob: -5.115174770355225
    6. ' (' → logprob: -5.240174770355225
    7. ' ' → logprob: -6.490174770355225
    8. '>=' → logprob: -6.865174770355225
    9. '(j' → logprob: -7.990174770355225
    10. ' >=' → logprob: -8.490174293518066

Token 747: ' gagn' (ID: 58408)
  Prédit: 'plus'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'plus' → logprob: -1.4281792640686035
    2. 'sup' → logprob: -1.4281792640686035
    3. '>' → logprob: -1.9281792640686035
    4. 'diff' → logprob: -2.5531792640686035
    5. '(' → logprob: -2.6781792640686035
    6. 't' → logprob: -2.9281792640686035
    7. '(j' → logprob: -3.3031792640686035
    8. 'en' → logprob: -4.1781792640686035
    9. ' (' → logprob: -4.3031792640686035
    10. 'abs' → logprob: -4.8031792640686035

Token 748: 'és' (ID: 1756)
  Prédit: 'ant'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ant' → logprob: -0.2931314706802368
    2. 'és' → logprob: -1.9181314706802368
    3. 'é' → logprob: -2.9181313514709473
    4. 'ants' → logprob: -3.0431313514709473
    5. 'es' → logprob: -5.918131351470947
    6. 'e' → logprob: -6.168131351470947
    7. 'ent' → logprob: -7.918131351470947
    8. 'eux' → logprob: -9.543131828308105
    9. 's' → logprob: -9.668131828308105
    10. 'nés' → logprob: -10.168131828308105

Token 749: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7956305146217346
    2. '       ' → logprob: -0.7956305146217346
    3. ',' → logprob: -2.54563045501709
    4. ':' → logprob: -4.79563045501709
    5. '           ' → logprob: -5.42063045501709
    6. ' ,' → logprob: -6.04563045501709
    7. ' and' → logprob: -6.79563045501709
    8. ':
' → logprob: -6.79563045501709
    9. '    ' → logprob: -8.04563045501709
    10. '  ' → logprob: -8.17063045501709

Token 750: ' c' (ID: 274)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.13340511918067932
    2. ' return' → logprob: -2.1334052085876465
    3. 'return' → logprob: -5.2584052085876465
    4. '   ' → logprob: -6.7584052085876465
    5. '           ' → logprob: -9.883404731750488
    6. '    ' → logprob: -10.883404731750488
    7. '	return' → logprob: -11.883404731750488
    8. ' ' → logprob: -12.258404731750488
    9. ' ' → logprob: -13.008404731750488
    10. '      ' → logprob: -13.258404731750488

Token 751: ''est' (ID: 6616)
  Prédit: 'ont'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ont' → logprob: -0.018232358619570732
    2. 'return' → logprob: -4.268232345581055
    3. 'on' → logprob: -6.643232345581055
    4. 'eturn' → logprob: -6.893232345581055
    5. ''est' → logprob: -7.768232345581055
    6. '=' → logprob: -8.143232345581055
    7. '   ' → logprob: -9.018232345581055
    8. 'omme' → logprob: -9.143232345581055
    9. ' return' → logprob: -9.393232345581055
    10. '	return' → logprob: -9.518232345581055

Token 752: ' valide' (ID: 137323)
  Prédit: ' True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' True' → logprob: -0.10031860321760178
    2. 'True' → logprob: -2.350318670272827
    3. ' False' → logprob: -9.725318908691406
    4. 'False' → logprob: -9.975318908691406
    5. ' valid' → logprob: -12.600318908691406
    6. '   ' → logprob: -13.850318908691406
    7. 'valid' → logprob: -14.600318908691406
    8. ' ' → logprob: -15.100318908691406
    9. ' possible' → logprob: -15.225318908691406
    10. 'possible' → logprob: -16.100318908691406

Token 753: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.03458581492304802
    2. '   ' → logprob: -3.40958571434021
    3. ':' → logprob: -8.409585952758789
    4. ' and' → logprob: -8.534585952758789
    5. ':
' → logprob: -8.909585952758789
    6. '           ' → logprob: -9.534585952758789
    7. '      ' → logprob: -9.534585952758789
    8. '    ' → logprob: -9.784585952758789
    9. '\n' → logprob: -10.784585952758789
    10. '        
' → logprob: -10.784585952758789

Token 754: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5233301520347595
    2. '   ' → logprob: -0.8983301520347595
    3. '
' → logprob: -9.648329734802246
    4. '    
' → logprob: -9.648329734802246
    5. '        
' → logprob: -10.023329734802246
    6. '    ' → logprob: -11.648329734802246
    7. '```' → logprob: -11.898329734802246
    8. '           ' → logprob: -12.523329734802246
    9. ' return' → logprob: -13.648329734802246
    10. '     ' → logprob: -13.648329734802246

Token 755: ' if' (ID: 538)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.06582515686750412
    2. '   ' → logprob: -2.8158252239227295
    3. ' return' → logprob: -5.94082498550415
    4. 'return' → logprob: -7.31582498550415
    5. ' if' → logprob: -7.81582498550415
    6. 'if' (adapté à ' if') → logprob: -9.815825462341309
    7. '    ' → logprob: -10.565825462341309
    8. '           ' → logprob: -10.815825462341309
    9. '
' → logprob: -11.315825462341309
    10. ' ' → logprob: -11.440825462341309

Token 756: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.5790306925773621
    2. ' ' → logprob: -0.9540306925773621
    3. ' j' → logprob: -3.454030752182007
    4. ' (' → logprob: -4.454030513763428
    5. 'j' → logprob: -4.579030513763428
    6. '(j' → logprob: -7.454030513763428
    7. '(' → logprob: -8.329030990600586
    8. '   ' → logprob: -11.579030990600586
    9. ' ' → logprob: -12.079030990600586
    10. ' max' → logprob: -12.079030990600586

Token 757: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.017923513427376747
    2. 'j' → logprob: -4.642923355102539
    3. ' ' → logprob: -5.392923355102539
    4. '(j' → logprob: -6.392923355102539
    5. '(' → logprob: -6.767923355102539
    6. ' (' → logprob: -7.767923355102539
    7. ' j' → logprob: -8.017923355102539
    8. '   ' → logprob: -13.142923355102539
    9. 'max' → logprob: -13.142923355102539
    10. '((' → logprob: -13.642923355102539

Token 758: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.0699954628944397
    2. '<=' → logprob: -2.694995403289795
    3. '   ' → logprob: -10.944995880126953
    4. ',' → logprob: -11.194995880126953
    5. ' <' → logprob: -11.319995880126953
    6. ' ' → logprob: -11.569995880126953
    7. '<' → logprob: -13.069995880126953
    8. '  ' → logprob: -13.194995880126953
    9. '	' → logprob: -14.569995880126953
    10. ' ' → logprob: -14.694995880126953

Token 759: ' j' (ID: 441)
  Prédit: 'j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.0021880913991481066
    2. ' j' → logprob: -6.127188205718994
    3. '	j' → logprob: -13.252187728881836
    4. '   ' → logprob: -13.752187728881836
    5. ' ' → logprob: -16.627187728881836
    6. '  ' → logprob: -17.877187728881836
    7. ' ' → logprob: -17.877187728881836
    8. '_j' → logprob: -18.377187728881836
    9. '    ' → logprob: -18.627187728881836
    10. '$j' → logprob: -18.627187728881836

Token 760: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.038559265434741974
    2. '<=' → logprob: -3.2885591983795166
    3. ' and' → logprob: -8.038558959960938
    4. ' <' → logprob: -9.163558959960938
    5. 'and' → logprob: -9.413558959960938
    6. '<' → logprob: -12.413558959960938
    7. ' ' → logprob: -12.663558959960938
    8. ' ≤' → logprob: -14.788558959960938
    9. ' ' → logprob: -15.413558959960938
    10. '   ' → logprob: -15.663558959960938

Token 761: ' ' (ID: 220)
  Prédit: '5'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.00012475410767365247
    2. ' ' → logprob: -9.00012493133545
    3. '4' → logprob: -14.00012493133545
    4. '6' → logprob: -15.25012493133545
    5. '   ' → logprob: -15.75012493133545
    6. '  ' → logprob: -17.062623977661133
    7. '５' → logprob: -17.125123977661133
    8. 'j' → logprob: -17.250123977661133
    9. '۵' → logprob: -17.500123977661133
    10. '٥' → logprob: -18.375123977661133

Token 762: '5' (ID: 20)
  Prédit: '5'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.0007890212000347674
    2. '6' → logprob: -7.375789165496826
    3. ' ' → logprob: -8.750788688659668
    4. 'j' → logprob: -13.375788688659668
    5. '   ' → logprob: -13.750788688659668
    6. '3' → logprob: -14.688288688659668
    7. '  ' → logprob: -15.125788688659668
    8. '7' → logprob: -15.938288688659668
    9. '4' → logprob: -16.000789642333984
    10. '５' → logprob: -16.375789642333984

Token 763: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.01816457509994507
    2. 'and' → logprob: -4.01816463470459
    3. ' ' → logprob: -11.76816463470459
    4. '   ' → logprob: -12.26816463470459
    5. '       ' → logprob: -14.01816463470459
    6. '	and' → logprob: -14.26816463470459
    7. '    ' → logprob: -15.01816463470459
    8. '  ' → logprob: -15.89316463470459
    9. ' и' → logprob: -16.143163681030273
    10. '      ' → logprob: -16.518163681030273

Token 764: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.08905407786369324
    2. ' ' → logprob: -2.4640541076660156
    3. ' y' → logprob: -9.464054107666016
    4. 'y' → logprob: -10.339054107666016
    5. '   ' → logprob: -13.214054107666016
    6. '  ' → logprob: -13.589054107666016
    7. ' ' → logprob: -14.214054107666016
    8. 'j' → logprob: -14.589054107666016
    9. ' j' → logprob: -15.464054107666016
    10. '    ' → logprob: -15.589054107666016

Token 765: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.2787412405014038
    2. 'y' → logprob: -1.7787412405014038
    3. ' y' → logprob: -2.7787413597106934
    4. ' ' → logprob: -4.403741359710693
    5. '   ' → logprob: -10.278740882873535
    6. '5' → logprob: -11.278740882873535
    7. '  ' → logprob: -11.903740882873535
    8. ' ' → logprob: -12.778740882873535
    9. '	y' → logprob: -13.028740882873535
    10. '    ' → logprob: -13.028740882873535

Token 766: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.315898060798645
    2. '<=' → logprob: -1.315898060798645
    3. 'y' → logprob: -6.5658979415893555
    4. ' y' → logprob: -8.690897941589355
    5. ' >=' → logprob: -8.690897941589355
    6. '<' → logprob: -8.690897941589355
    7. ' ' → logprob: -8.815897941589355
    8. ' <' → logprob: -8.940897941589355
    9. '>=' → logprob: -8.940897941589355
    10. '   ' → logprob: -9.065897941589355

Token 767: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.16022604703903198
    2. ' y' → logprob: -1.9102261066436768
    3. '   ' → logprob: -13.910225868225098
    4. '	y' → logprob: -14.410225868225098
    5. ' ' → logprob: -15.785225868225098
    6. 'j' → logprob: -15.785225868225098
    7. ' ' → logprob: -16.785226821899414
    8. '  ' → logprob: -17.660226821899414
    9. '    ' → logprob: -18.160226821899414
    10. ' j' → logprob: -18.410226821899414

Token 768: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.038044821470975876
    2. '<=' → logprob: -3.2880449295043945
    3. '       ' → logprob: -13.413044929504395
    4. ' ' → logprob: -14.413044929504395
    5. '   ' → logprob: -15.413044929504395
    6. ' ≤' → logprob: -15.538044929504395
    7. '           ' → logprob: -16.038043975830078
    8. '        ' → logprob: -16.413043975830078
    9. '```' → logprob: -16.413043975830078
    10. ']<=' → logprob: -16.413043975830078

Token 769: ' ' (ID: 220)
  Prédit: '5'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -6.170270353322849e-05
    2. ' ' → logprob: -9.875061988830566
    3. 'j' → logprob: -11.625061988830566
    4. '   ' → logprob: -14.375061988830566
    5. '4' → logprob: -15.875061988830566
    6. ' j' → logprob: -16.43756103515625
    7. '۵' → logprob: -16.50006103515625
    8. '6' → logprob: -16.68756103515625
    9. '  ' → logprob: -16.87506103515625
    10. '５' → logprob: -17.00006103515625

Token 770: '5' (ID: 20)
  Prédit: '5'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.0001589618914294988
    2. ' ' → logprob: -8.75015926361084
    3. 'j' → logprob: -15.37515926361084
    4. '   ' → logprob: -15.87515926361084
    5. '５' → logprob: -17.312658309936523
    6. '۵' → logprob: -17.375158309936523
    7. '  ' → logprob: -17.437658309936523
    8. '५' → logprob: -17.687658309936523
    9. ' five' → logprob: -17.812658309936523
    10. '6' → logprob: -17.937658309936523

Token 771: ':
' (ID: 734)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.1625993251800537
    2. '       ' → logprob: -2.1625993251800537
    3. 'and' → logprob: -3.7875993251800537
    4. ':' → logprob: -5.037599563598633
    5. '   ' → logprob: -6.162599563598633
    6. '           ' → logprob: -6.412599563598633
    7. ':
' → logprob: -6.787599563598633
    8. ':return' → logprob: -7.912599563598633
    9. '        ' → logprob: -9.037599563598633
    10. '      ' → logprob: -9.162599563598633

Token 772: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00023798657639417797
    2. ':' → logprob: -9.375238418579102
    3. '           ' → logprob: -9.500238418579102
    4. ' and' → logprob: -10.000238418579102
    5. '   ' → logprob: -11.750238418579102
    6. ' ' → logprob: -12.500238418579102
    7. '<|end|>' → logprob: -12.875238418579102
    8. '	' → logprob: -13.000238418579102
    9. ':return' → logprob: -13.125238418579102
    10. '      ' → logprob: -13.125238418579102

Token 773: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.1740746945142746
    2. 'return' → logprob: -1.924074649810791
    3. ' return' → logprob: -4.299074649810791
    4. '           ' → logprob: -9.54907512664795
    5. '   ' → logprob: -9.79907512664795
    6. '	return' → logprob: -10.17407512664795
    7. ' ' → logprob: -13.42407512664795
    8. ' ' → logprob: -13.42407512664795
    9. '               ' → logprob: -13.67407512664795
    10. '	' → logprob: -13.79907512664795

Token 774: ' Le' (ID: 2018)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.03599401190876961
    2. '       ' → logprob: -3.660994052886963
    3. 'if' → logprob: -5.285994052886963
    4. ' return' → logprob: -5.535994052886963
    5. '           ' → logprob: -7.910994052886963
    6. '   ' → logprob: -8.660993576049805
    7. ' if' → logprob: -9.910993576049805
    8. '#' → logprob: -10.785993576049805
    9. '	return' → logprob: -11.410993576049805
    10. 'abs' → logprob: -12.035993576049805

Token 775: ' jeu' (ID: 24626)
  Prédit: 'abs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'abs' → logprob: -1.6528652906417847
    2. 'return' → logprob: -1.7778652906417847
    3. '(j' → logprob: -1.9028652906417847
    4. 'j' → logprob: -2.027865409851074
    5. ' (' → logprob: -2.152865409851074
    6. ' return' → logprob: -3.277865409851074
    7. ' j' → logprob: -3.402865409851074
    8. '(' → logprob: -3.777865409851074
    9. '(abs' → logprob: -3.777865409851074
    10. '#' → logprob: -4.027865409851074

Token 776: ' continue' (ID: 4901)
  Prédit: ' continue'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' continue' → logprob: -1.096186637878418
    2. 'continue' → logprob: -1.471186637878418
    3. '   ' → logprob: -1.721186637878418
    4. ' n' → logprob: -2.096186637878418
    5. '       ' → logprob: -3.221186637878418
    6. '           ' → logprob: -3.846186637878418
    7. 'contin' → logprob: -3.971186637878418
    8. 'n' → logprob: -4.221186637878418
    9. ' s' → logprob: -4.846186637878418
    10. ' ne' → logprob: -5.221186637878418

Token 777: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.09728481620550156
    2. ' and' → logprob: -2.8472847938537598
    3. '           ' → logprob: -3.5972847938537598
    4. 'and' → logprob: -5.09728479385376
    5. '               ' → logprob: -7.34728479385376
    6. '   ' → logprob: -8.097285270690918
    7. ':' → logprob: -10.347285270690918
    8. 'return' → logprob: -10.347285270690918
    9. '      ' → logprob: -10.722285270690918
    10. ':
' → logprob: -10.847285270690918

Token 778: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.009196723811328411
    2. '           ' → logprob: -5.009196758270264
    3. 'return' → logprob: -6.759196758270264
    4. ' and' → logprob: -7.384196758270264
    5. ' return' → logprob: -8.384196281433105
    6. '   ' → logprob: -8.634196281433105
    7. 'and' → logprob: -9.009196281433105
    8. '               ' → logprob: -9.259196281433105
    9. ' if' → logprob: -11.384196281433105
    10. ' ' → logprob: -11.509196281433105

Token 779: ' return' (ID: 622)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'return' (adapté à ' return') → logprob: -0.3336162269115448
    2. '       ' → logprob: -1.5836162567138672
    3. ' return' → logprob: -2.708616256713867
    4. '           ' → logprob: -4.458616256713867
    5. '               ' → logprob: -8.708616256713867
    6. '	return' → logprob: -10.583616256713867
    7. '   ' → logprob: -10.708616256713867
    8. ':return' → logprob: -12.458616256713867
    9. ' ' → logprob: -12.708616256713867
    10. '      ' → logprob: -13.208616256713867

Token 780: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.06207243725657463
    2. ' True' → logprob: -2.812072515487671
    3. '   ' → logprob: -9.31207275390625
    4. '    ' → logprob: -12.56207275390625
    5. '           ' → logprob: -12.81207275390625
    6. 'j' → logprob: -12.81207275390625
    7. '       ' → logprob: -13.43707275390625
    8. ' j' → logprob: -13.68707275390625
    9. '(True' → logprob: -13.68707275390625
    10. 'not' → logprob: -13.93707275390625

Token 781: '

' (ID: 279)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03164895996451378
    2. '    
' → logprob: -3.656648874282837
    3. '<|end|>' → logprob: -6.281649112701416
    4. '\n' → logprob: -6.531649112701416
    5. '
' → logprob: -6.781649112701416
    6. '       ' → logprob: -8.156648635864258
    7. '    ' → logprob: -9.281648635864258
    8. '        
' → logprob: -9.281648635864258
    9. '  
' → logprob: -9.531648635864258
    10. 'return' → logprob: -9.781648635864258

Token 782: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.02331303060054779
    2. '    
' → logprob: -4.398313045501709
    3. '<|end|>' → logprob: -5.523313045501709
    4. '\n' → logprob: -6.023313045501709
    5. '  
' → logprob: -6.398313045501709
    6. '	return' → logprob: -7.648313045501709
    7. ' 
' → logprob: -7.773313045501709
    8. '```' → logprob: -8.02331256866455
    9. '    ' → logprob: -8.39831256866455
    10. '<|end|>' → logprob: -8.89831256866455

Token 783: ' return' (ID: 622)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.003906945697963238
    2. 'return' (adapté à ' return') → logprob: -6.253906726837158
    3. '    
' → logprob: -7.128906726837158
    4. '       ' → logprob: -7.128906726837158
    5. '
' → logprob: -9.003907203674316
    6. 'False' → logprob: -9.128907203674316
    7. ' return' → logprob: -9.503907203674316
    8. ' False' → logprob: -10.878907203674316
    9. '        
' → logprob: -11.003907203674316
    10. '    ' → logprob: -11.378907203674316

Token 784: ' False' (ID: 7983)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'False' → logprob: -0.0015023599844425917
    2. ' False' → logprob: -6.501502513885498
    3. '(False' → logprob: -21.626502990722656
    4. '   ' → logprob: -23.251502990722656
    5. '_false' → logprob: -24.001502990722656
    6. 'false' → logprob: -24.126502990722656
    7. '=False' → logprob: -24.376502990722656
    8. 'True' → logprob: -24.626502990722656
    9. 'None' → logprob: -26.001502990722656
    10. '.False' → logprob: -27.126502990722656

Token 785: '

' (ID: 279)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.49053576588630676
    2. ':' → logprob: -1.1155357360839844
    3. '<|end|>' → logprob: -4.490535736083984
    4. '\n' → logprob: -4.990535736083984
    5. '```' → logprob: -4.990535736083984
    6. ')' → logprob: -5.240535736083984
    7. ':return' → logprob: -5.365535736083984
    8. '    
' → logprob: -5.365535736083984
    9. ' :' → logprob: -5.615535736083984
    10. ' 
' → logprob: -5.740535736083984

Token 786: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.16591602563858032
    2. '\n' → logprob: -3.0409159660339355
    3. '    
' → logprob: -3.6659159660339355
    4. '\' → logprob: -3.6659159660339355
    5. ':' → logprob: -4.0409159660339355
    6. ' 
' → logprob: -4.1659159660339355
    7. '\t' → logprob: -5.1659159660339355
    8. '  
' → logprob: -5.5409159660339355
    9. 'def' → logprob: -5.7909159660339355
    10. ')' → logprob: -6.9159159660339355

Token 787: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.015125024132430553
    2. 'def' → logprob: -4.640124797821045
    3. '
' → logprob: -5.390124797821045
    4. '    
' → logprob: -7.390124797821045
    5. 'import' → logprob: -9.765125274658203
    6. 'from' → logprob: -9.765125274658203
    7. ' def' → logprob: -10.640125274658203
    8. '```' → logprob: -11.515125274658203
    9. '#' (adapté à ' #') → logprob: -12.140125274658203
    10. ' 
' → logprob: -13.015125274658203

Token 788: ' Vér' (ID: 159169)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.023663058876991272
    2. '   ' → logprob: -3.89866304397583
    3. ' def' → logprob: -6.52366304397583
    4. 'from' → logprob: -7.02366304397583
    5. '#' → logprob: -7.64866304397583
    6. '
' → logprob: -9.273663520812988
    7. 'import' → logprob: -9.273663520812988
    8. 'visited' → logprob: -10.148663520812988
    9. ' from' → logprob: -10.898663520812988
    10. '    
' → logprob: -11.773663520812988

Token 789: 'ifie' (ID: 46409)
  Prédit: 'ursion'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ursion' → logprob: -0.9176207780838013
    2. '   ' → logprob: -1.4176207780838013
    3. 'ursive' → logprob: -1.4176207780838013
    4. 'ification' → logprob: -3.4176206588745117
    5. 'c' → logprob: -4.292620658874512
    6. '#' → logprob: -4.292620658874512
    7. 'cur' → logprob: -4.542620658874512
    8. ' curs' → logprob: -5.167620658874512
    9. 'ur' → logprob: -5.292620658874512
    10. 'urs' → logprob: -5.292620658874512

Token 790: ' si' (ID: 1784)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5896711349487305
    2. ' valid' → logprob: -1.8396711349487305
    3. ' ' → logprob: -2.5896711349487305
    4. 'valid' → logprob: -2.9646711349487305
    5. ' if' → logprob: -3.7146711349487305
    6. '_valid' → logprob: -3.7146711349487305
    7. 'def' → logprob: -3.9646711349487305
    8. '_state' → logprob: -3.9646711349487305
    9. ' la' → logprob: -4.2146711349487305
    10. ' j' → logprob: -4.2146711349487305

Token 791: ' l' (ID: 305)
  Prédit: '(j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(j' → logprob: -0.5397409200668335
    2. ' (' → logprob: -1.2897409200668335
    3. ' j' → logprob: -2.039741039276123
    4. 'j' → logprob: -4.789741039276123
    5. '(' → logprob: -6.039741039276123
    6. '   ' → logprob: -7.789741039276123
    7. ' ' → logprob: -8.539740562438965
    8. ' la' → logprob: -8.914740562438965
    9. ' le' → logprob: -9.539740562438965
    10. ' joueur' → logprob: -10.289740562438965

Token 792: ''état' (ID: 116357)
  Prédit: ' j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' j' → logprob: -1.1088200807571411
    2. '_state' → logprob: -1.6088200807571411
    3. 'state' → logprob: -2.2338199615478516
    4. ' (' → logprob: -2.3588199615478516
    5. ' state' → logprob: -2.7338199615478516
    6. '   ' → logprob: -3.3588199615478516
    7. ' état' → logprob: -3.7338199615478516
    8. ' valid' → logprob: -3.8588199615478516
    9. 'j' → logprob: -4.108819961547852
    10. 'def' → logprob: -4.483819961547852

Token 793: ' final' (ID: 1721)
  Prédit: '(j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(j' → logprob: -0.025652043521404266
    2. ' (' → logprob: -3.7756519317626953
    3. ' est' → logprob: -6.900651931762695
    4. ' j' → logprob: -7.525651931762695
    5. '   ' → logprob: -7.650651931762695
    6. '[j' → logprob: -9.650651931762695
    7. '(current' → logprob: -9.775651931762695
    8. ' =' → logprob: -10.150651931762695
    9. '(' → logprob: -10.775651931762695
    10. ' actuel' → logprob: -10.900651931762695

Token 794: ' est' (ID: 893)
  Prédit: '(j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(j' → logprob: -0.021155770868062973
    2. ' (' → logprob: -4.021155834197998
    3. 'def' → logprob: -5.896155834197998
    4. '(' → logprob: -9.02115535736084
    5. '   ' → logprob: -10.02115535736084
    6. ' ==' → logprob: -10.64615535736084
    7. 'est' → logprob: -11.52115535736084
    8. '[j' → logprob: -12.02115535736084
    9. ' def' → logprob: -12.14615535736084
    10. ' ' → logprob: -12.27115535736084

Token 795: ' un' (ID: 537)
  Prédit: 'valid'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'valid' → logprob: -0.08608647435903549
    2. ' valide' → logprob: -3.5860865116119385
    3. 'val' → logprob: -3.8360865116119385
    4. ' valid' → logprob: -4.086086273193359
    5. '_valid' → logprob: -4.961086273193359
    6. '(j' → logprob: -6.086086273193359
    7. '(valid' → logprob: -6.461086273193359
    8. ' une' → logprob: -6.836086273193359
    9. 'g' → logprob: -7.086086273193359
    10. 'possible' → logprob: -7.336086273193359

Token 796: ' état' (ID: 59181)
  Prédit: 'g'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'g' → logprob: -0.2625133991241455
    2. 'gain' → logprob: -2.6375133991241455
    3. 'ét' → logprob: -3.3875133991241455
    4. 'possible' → logprob: -3.5125133991241455
    5. 'win' → logprob: -3.8875133991241455
    6. 'state' → logprob: -4.137513160705566
    7. 'valid' → logprob: -4.387513160705566
    8. ' gagn' → logprob: -4.762513160705566
    9. 'final' → logprob: -4.887513160705566
    10. 'score' → logprob: -5.137513160705566

Token 797: ' de' (ID: 334)
  Prédit: 'valid'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'valid' → logprob: -0.9039414525032043
    2. 'g' → logprob: -1.5289413928985596
    3. 'final' → logprob: -1.7789413928985596
    4. 'val' → logprob: -1.7789413928985596
    5. 'possible' → logprob: -4.278941631317139
    6. ' valid' → logprob: -5.278941631317139
    7. ' gagn' → logprob: -5.403941631317139
    8. ' valide' → logprob: -5.653941631317139
    9. 'de' → logprob: -6.028941631317139
    10. '   ' → logprob: -6.403941631317139

Token 798: ' fin' (ID: 2131)
  Prédit: 'vic'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'vic' → logprob: -0.5280566811561584
    2. 'fin' → logprob: -1.1530566215515137
    3. 'g' → logprob: -3.1530566215515137
    4. 'gain' → logprob: -3.4030566215515137
    5. ' victoire' → logprob: -4.403056621551514
    6. 'vict' → logprob: -5.278056621551514
    7. 'finish' → logprob: -8.153057098388672
    8. 'match' → logprob: -8.528057098388672
    9. 'win' → logprob: -8.778057098388672
    10. '```' → logprob: -8.778057098388672

Token 799: ' de' (ID: 334)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.6668205857276917
    2. '   ' → logprob: -0.9168205857276917
    3. '(j' → logprob: -2.916820526123047
    4. ' (' → logprob: -4.041820526123047
    5. '(' → logprob: -5.291820526123047
    6. ' def' → logprob: -6.041820526123047
    7. '  ' → logprob: -6.041820526123047
    8. '    ' → logprob: -7.166820526123047
    9. '       ' → logprob: -7.416820526123047
    10. '(True' → logprob: -7.541820526123047

Token 800: ' partie' (ID: 22139)
  Prédit: 'jeu'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'jeu' → logprob: -0.38442015647888184
    2. 'match' → logprob: -1.3844201564788818
    3. 'part' → logprob: -3.759420156478882
    4. ' match' → logprob: -3.759420156478882
    5. ' jeu' → logprob: -4.259420394897461
    6. ' partie' → logprob: -5.009420394897461
    7. 'je' → logprob: -7.884420394897461
    8. 'game' → logprob: -7.884420394897461
    9. '   ' → logprob: -8.634420394897461
    10. ' ' → logprob: -8.634420394897461

Token 801: ' (' (ID: 350)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6987206935882568
    2. 'def' → logprob: -0.6987206935882568
    3. '
' → logprob: -5.698720932006836
    4. ' def' → logprob: -7.073720932006836
    5. '    
' → logprob: -7.198720932006836
    6. '```' → logprob: -8.323720932006836
    7. '  
' → logprob: -9.198720932006836
    8. '   
' → logprob: -9.448720932006836
    9. 'final' → logprob: -10.448720932006836
    10. 'if' → logprob: -10.573720932006836

Token 802: 'vic' (ID: 58032)
  Prédit: 'j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.676186203956604
    2. ' j' → logprob: -0.801186203956604
    3. '   ' → logprob: -3.9261860847473145
    4. ' (' → logprob: -5.0511860847473145
    5. '(j' → logprob: -5.0511860847473145
    6. ' True' → logprob: -5.3011860847473145
    7. 'True' → logprob: -6.0511860847473145
    8. ')' → logprob: -6.6761860847473145
    9. '    ' → logprob: -8.176186561584473
    10. 'False' → logprob: -9.051186561584473

Token 803: 'toire' (ID: 46271)
  Prédit: 'toire'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'toire' → logprob: -0.005597291048616171
    2. 'toi' → logprob: -5.755597114562988
    3. 'to' → logprob: -6.130597114562988
    4. 't' → logprob: -8.505597114562988
    5. 'tor' → logprob: -11.755597114562988
    6. '   ' → logprob: -11.880597114562988
    7. '```' → logprob: -12.380597114562988
    8. ' to' → logprob: -12.755597114562988
    9. 'taire' → logprob: -13.380597114562988
    10. ' ' → logprob: -13.630597114562988

Token 804: ' ou' (ID: 2031)
  Prédit: ' ou'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ou' → logprob: -0.035006407648324966
    2. ')' → logprob: -3.660006523132324
    3. ' or' → logprob: -5.660006523132324
    4. ',' → logprob: -6.410006523132324
    5. ' )' → logprob: -6.660006523132324
    6. 'ou' → logprob: -6.910006523132324
    7. '   ' → logprob: -7.535006523132324
    8. ' ' → logprob: -8.910006523132324
    9. '):' → logprob: -9.285006523132324
    10. ' ,' → logprob: -9.410006523132324

Token 805: ' match' (ID: 3981)
  Prédit: ' match'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' match' → logprob: -1.1792489290237427
    2. 'nul' → logprob: -1.1792489290237427
    3. ' nul' → logprob: -1.3042489290237427
    4. 'match' → logprob: -2.929248809814453
    5. 'n' → logprob: -3.429248809814453
    6. 'null' → logprob: -4.679248809814453
    7. ' null' → logprob: -4.929248809814453
    8. ' n' → logprob: -5.429248809814453
    9. 'égalité' → logprob: -5.554248809814453
    10. ' ' → logprob: -6.679248809814453

Token 806: ' nul' (ID: 64435)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4349892735481262
    2. 'nul' → logprob: -2.5599892139434814
    3. ' )' → logprob: -2.6849892139434814
    4. '_n' → logprob: -2.9349892139434814
    5. ' n' → logprob: -3.1849892139434814
    6. '   ' → logprob: -4.0599894523620605
    7. 'n' → logprob: -4.0599894523620605
    8. '_' → logprob: -4.4349894523620605
    9. '=False' → logprob: -4.8099894523620605
    10. ' nul' → logprob: -4.8099894523620605

Token 807: ')
' (ID: 446)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.026557346805930138
    2. ')' → logprob: -4.651557445526123
    3. 'def' → logprob: -5.026557445526123
    4. '):
' → logprob: -5.151557445526123
    5. '):' → logprob: -5.901557445526123
    6. ')
' → logprob: -7.026557445526123
    7. '  ' → logprob: -8.526556968688965
    8. '(j' → logprob: -9.026556968688965
    9. ' def' → logprob: -9.651556968688965
    10. ',' → logprob: -10.151556968688965

Token 808: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07987210154533386
    2. 'def' → logprob: -2.5798721313476562
    3. ' def' → logprob: -7.204872131347656
    4. '
' → logprob: -9.079872131347656
    5. '    
' → logprob: -9.079872131347656
    6. '	def' → logprob: -12.454872131347656
    7. '  
' → logprob: -13.454872131347656
    8. '```' → logprob: -13.579872131347656
    9. '   
' → logprob: -14.079872131347656
    10. ' 
' → logprob: -14.204872131347656

Token 809: ' def' (ID: 1056)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' (adapté à ' def') → logprob: -0.030290380120277405
    2. '   ' → logprob: -3.530290365219116
    3. ' def' → logprob: -7.530290603637695
    4. '
' → logprob: -13.030290603637695
    5. '	def' → logprob: -14.155290603637695
    6. '    
' → logprob: -15.905290603637695
    7. '  ' → logprob: -16.905290603637695
    8. '    ' → logprob: -17.030290603637695
    9. ' ' → logprob: -17.280290603637695
    10. ' déf' → logprob: -17.530290603637695

Token 810: ' is' (ID: 382)
  Prédit: 'is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'is' → logprob: -0.016573619097471237
    2. 'final' → logprob: -4.266573429107666
    3. 'terminal' → logprob: -7.016573429107666
    4. 'game' → logprob: -7.516573429107666
    5. 'end' → logprob: -7.891573429107666
    6. ' is' → logprob: -7.891573429107666
    7. 'finished' → logprob: -8.891573905944824
    8. 'def' → logprob: -10.891573905944824
    9. 'valid' → logprob: -11.016573905944824
    10. 'winning' → logprob: -11.391573905944824

Token 811: '_end' (ID: 13707)
  Prédit: '_final'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_final' → logprob: -0.2412109375
    2. '_end' → logprob: -2.7412109375
    3. '_finished' → logprob: -3.1162109375
    4. '_game' → logprob: -3.6162109375
    5. '_terminal' → logprob: -3.7412109375
    6. 'final' → logprob: -4.2412109375
    7. '_finish' → logprob: -4.4912109375
    8. '_win' → logprob: -4.6162109375
    9. '_w' → logprob: -4.7412109375
    10. '_valid' → logprob: -5.7412109375

Token 812: '_state' (ID: 9479)
  Prédit: '_state'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_state' → logprob: -0.003916680347174406
    2. '(j' → logprob: -6.2539167404174805
    3. '_' → logprob: -6.8789167404174805
    4. '_point' → logprob: -7.7539167404174805
    5. '_of' → logprob: -8.62891674041748
    6. '_score' → logprob: -8.62891674041748
    7. '_position' → logprob: -10.62891674041748
    8. '(' → logprob: -10.87891674041748
    9. 'state' → logprob: -11.00391674041748
    10. '   ' → logprob: -11.25391674041748

Token 813: '(j' (ID: 4997)
  Prédit: '(j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(j' → logprob: -0.001338454894721508
    2. '(' → logprob: -6.626338481903076
    3. ' (' → logprob: -11.376338005065918
    4. '(
' → logprob: -15.001338005065918
    5. '   ' → logprob: -15.126338005065918
    6. '(i' → logprob: -15.251338005065918
    7. ':' → logprob: -17.376338958740234
    8. ',j' → logprob: -17.376338958740234
    9. '(s' → logprob: -17.626338958740234
    10. '(J' → logprob: -17.751338958740234

Token 814: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.006010921206325293
    2. ',y' → logprob: -6.131011009216309
    3. ' ,' → logprob: -6.131011009216309
    4. ',j' → logprob: -6.506011009216309
    5. '<|end|>' → logprob: -10.131011009216309
    6. '_,' → logprob: -10.756011009216309
    7. ',user' → logprob: -11.131011009216309
    8. '‌,' → logprob: -11.131011009216309
    9. ',_' → logprob: -11.381011009216309
    10. '<|end|>' → logprob: -12.131011009216309

Token 815: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.0040785204619169235
    2. ' y' → logprob: -5.504078388214111
    3. '   ' → logprob: -18.129077911376953
    4. '	y' → logprob: -18.254077911376953
    5. '<|end|>' → logprob: -18.254077911376953
    6. ')y' → logprob: -18.379077911376953
    7. ')' → logprob: -18.754077911376953
    8. ''y' → logprob: -20.504077911376953
    9. ',y' → logprob: -21.129077911376953
    10. ' ' → logprob: -21.254077911376953

Token 816: '):
' (ID: 1883)
  Prédit: '):'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):' → logprob: -0.3870592713356018
    2. '):
' → logprob: -1.137059211730957
    3. '   ' → logprob: -9.512059211730957
    4. ')' → logprob: -9.637059211730957
    5. '):
' → logprob: -10.262059211730957
    6. '):

' → logprob: -12.262059211730957
    7. ' ):' → logprob: -12.887059211730957
    8. ':' → logprob: -13.262059211730957
    9. ')==' → logprob: -13.637059211730957
    10. ' ):
' → logprob: -13.887059211730957

Token 817: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0009548133239150047
    2. '   ' → logprob: -7.125954627990723
    3. ':' → logprob: -9.875954627990723
    4. '    ' → logprob: -10.875954627990723
    5. '        
' → logprob: -11.125954627990723
    6. ' return' → logprob: -11.375954627990723
    7. 'return' → logprob: -11.375954627990723
    8. '<|end|>' → logprob: -11.875954627990723
    9. ' (' → logprob: -12.000954627990723
    10. '
' → logprob: -12.500954627990723

Token 818: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -5.836499985889532e-05
    2. '   ' → logprob: -10.8750581741333
    3. '#' (adapté à ' #') → logprob: -11.5000581741333
    4. ':' → logprob: -11.7500581741333
    5. ' #' → logprob: -11.8750581741333
    6. 'return' → logprob: -13.2500581741333
    7. '        
' → logprob: -13.2500581741333
    8. '      ' → logprob: -13.3750581741333
    9. '
' → logprob: -13.5000581741333
    10. ' ' → logprob: -13.8750581741333

Token 819: ' Si' (ID: 7832)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.01602228730916977
    2. 'if' → logprob: -4.641022205352783
    3. '   ' → logprob: -5.141022205352783
    4. ' if' → logprob: -8.516022682189941
    5. 'return' → logprob: -8.891022682189941
    6. '    ' → logprob: -10.641022682189941
    7. '      ' → logprob: -11.641022682189941
    8. '#' → logprob: -11.891022682189941
    9. '     ' → logprob: -12.891022682189941
    10. ' (' → logprob: -13.016022682189941

Token 820: ' l' (ID: 305)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.36404693126678467
    2. '(j' → logprob: -1.6140469312667847
    3. ' j' → logprob: -2.864047050476074
    4. 'j' → logprob: -3.364047050476074
    5. '(' → logprob: -4.614047050476074
    6. '   ' → logprob: -5.489047050476074
    7. '((' → logprob: -8.864047050476074
    8. '    ' → logprob: -9.614047050476074
    9. ' ' → logprob: -10.114047050476074
    10. '(
' → logprob: -10.114047050476074

Token 821: ''état' (ID: 116357)
  Prédit: ' j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' j' → logprob: -0.21867233514785767
    2. 'j' → logprob: -1.718672275543213
    3. ' ==' → logprob: -4.343672275543213
    4. ' ' → logprob: -6.843672275543213
    5. ' y' → logprob: -7.093672275543213
    6. '==' → logprob: -7.343672275543213
    7. '   ' → logprob: -7.593672275543213
    8. 'y' → logprob: -8.343672752380371
    9. '  ' → logprob: -8.468672752380371
    10. ' (' → logprob: -8.718672752380371

Token 822: ' correspond' (ID: 11095)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.3178918659687042
    2. '==' → logprob: -1.4428918361663818
    3. ' j' → logprob: -3.817891836166382
    4. 'j' → logprob: -4.567892074584961
    5. '   ' → logprob: -7.192892074584961
    6. '_j' → logprob: -7.442892074584961
    7. ' est' → logprob: -7.442892074584961
    8. '(j' → logprob: -7.567892074584961
    9. 'est' → logprob: -7.692892074584961
    10. '==(' → logprob: -8.567892074584961

Token 823: ' au' (ID: 2791)
  Prédit: ' à'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.06803538650274277
    2. 'à' → logprob: -2.818035364151001
    3. '   ' → logprob: -5.94303560256958
    4. ' a' → logprob: -6.31803560256958
    5. 'a' → logprob: -7.44303560256958
    6. ' ' → logprob: -8.318035125732422
    7. ' au' → logprob: -8.568035125732422
    8. '  ' → logprob: -8.693035125732422
    9. 'au' → logprob: -8.693035125732422
    10. ' to' → logprob: -9.193035125732422

Token 824: ' score' (ID: 8429)
  Prédit: 'score'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'score' → logprob: -0.46598896384239197
    2. 'g' → logprob: -1.8409889936447144
    3. 'vic' → logprob: -2.965988874435425
    4. 'fin' → logprob: -3.590988874435425
    5. 'jou' → logprob: -4.465989112854004
    6. '#' → logprob: -4.590989112854004
    7. 'match' → logprob: -4.590989112854004
    8. 'j' → logprob: -4.715989112854004
    9. '(j' → logprob: -4.840989112854004
    10. 'gain' → logprob: -4.840989112854004

Token 825: ' final' (ID: 1721)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.6372654438018799
    2. ' final' → logprob: -1.2622654438018799
    3. '   ' → logprob: -3.38726544380188
    4. ' (' → logprob: -3.38726544380188
    5. 'final' → logprob: -3.51226544380188
    6. '       ' → logprob: -3.76226544380188
    7. '==' → logprob: -3.88726544380188
    8. ' finale' → logprob: -4.137265205383301
    9. ' de' → logprob: -5.012265205383301
    10. ' =' → logprob: -5.137265205383301

Token 826: ' donné' (ID: 52079)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.436292827129364
    2. '==' → logprob: -1.9362928867340088
    3. ':' → logprob: -2.561292886734009
    4. '   ' → logprob: -3.061292886734009
    5. ' and' → logprob: -3.186292886734009
    6. ' :' → logprob: -4.18629264831543
    7. '       ' → logprob: -4.18629264831543
    8. ' (' → logprob: -5.56129264831543
    9. '           ' → logprob: -6.56129264831543
    10. 'and' → logprob: -6.56129264831543

Token 827: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5215616226196289
    2. ' and' → logprob: -1.146561622619629
    3. ' ==' → logprob: -3.271561622619629
    4. '       ' → logprob: -3.896561622619629
    5. 'and' → logprob: -4.521561622619629
    6. '==' → logprob: -4.521561622619629
    7. ':' → logprob: -6.146561622619629
    8. '    ' → logprob: -6.646561622619629
    9. '           ' → logprob: -7.146561622619629
    10. ' ' → logprob: -7.271561622619629

Token 828: ' on' (ID: 402)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.15259654819965363
    2. ' return' → logprob: -2.5275964736938477
    3. 'return' → logprob: -3.4025964736938477
    4. '       ' → logprob: -3.6525964736938477
    5. ' j' → logprob: -7.402596473693848
    6. '    ' → logprob: -8.027596473693848
    7. '
' → logprob: -8.402596473693848
    8. ':' → logprob: -8.402596473693848
    9. ':return' → logprob: -8.527596473693848
    10. 'j' → logprob: -9.152596473693848

Token 829: ' doit' (ID: 21822)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6115837693214417
    2. 'return' → logprob: -1.4865837097167969
    3. ' return' → logprob: -2.236583709716797
    4. '       ' → logprob: -2.361583709716797
    5. ' considère' → logprob: -5.111583709716797
    6. '    ' → logprob: -5.611583709716797
    7. 'continue' → logprob: -5.611583709716797
    8. '           ' → logprob: -6.236583709716797
    9. 'if' → logprob: -6.361583709716797
    10. ' continue' → logprob: -6.611583709716797

Token 830: ' considérer' (ID: 172894)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.42434269189834595
    2. 'return' → logprob: -1.7993426322937012
    3. ' return' → logprob: -2.424342632293701
    4. 'contin' → logprob: -2.799342632293701
    5. ' continuer' → logprob: -4.299342632293701
    6. '       ' → logprob: -5.674342632293701
    7. 'continue' → logprob: -6.049342632293701
    8. '  ' → logprob: -6.174342632293701
    9. '    ' → logprob: -6.299342632293701
    10. ' ' → logprob: -6.924342632293701

Token 831: ' si' (ID: 1784)
  Prédit: ' True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' True' → logprob: -0.5143084526062012
    2. '   ' → logprob: -2.014308452606201
    3. ' j' → logprob: -2.139308452606201
    4. 'True' → logprob: -2.139308452606201
    5. ' (' → logprob: -4.014308452606201
    6. ' if' → logprob: -5.514308452606201
    7. '       ' → logprob: -5.639308452606201
    8. '(j' → logprob: -6.264308452606201
    9. 'j' → logprob: -6.389308452606201
    10. '    ' → logprob: -7.139308452606201

Token 832: ' c' (ID: 274)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.3485434353351593
    2. ' j' → logprob: -2.223543405532837
    3. '(' → logprob: -2.598543405532837
    4. '(j' → logprob: -2.598543405532837
    5. 'j' → logprob: -3.348543405532837
    6. '   ' → logprob: -6.848543643951416
    7. '((' → logprob: -7.223543643951416
    8. '(
' → logprob: -8.848543167114258
    9. ' ((' → logprob: -9.723543167114258
    10. ' ' → logprob: -9.723543167114258

Token 833: ''est' (ID: 6616)
  Prédit: ''est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''est' → logprob: -0.41905662417411804
    2. 'est' → logprob: -1.4190566539764404
    3. 'e' → logprob: -3.2940566539764404
    4. 'a' → logprob: -4.044056415557861
    5. ''' → logprob: -4.044056415557861
    6. ' ' → logprob: -5.294056415557861
    7. '_' → logprob: -5.294056415557861
    8. 'u' → logprob: -6.044056415557861
    9. 't' → logprob: -6.044056415557861
    10. ' est' → logprob: -6.169056415557861

Token 834: ' un' (ID: 537)
  Prédit: ' un'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -0.5590593814849854
    2. ' True' → logprob: -1.3090593814849854
    3. ' une' → logprob: -2.4340593814849854
    4. 'un' → logprob: -3.6840593814849854
    5. '   ' → logprob: -4.309059143066406
    6. 'True' → logprob: -4.309059143066406
    7. 'une' → logprob: -4.684059143066406
    8. ' la' → logprob: -5.934059143066406
    9. ' valid' → logprob: -6.309059143066406
    10. 'final' → logprob: -7.434059143066406

Token 835: ' score' (ID: 8429)
  Prédit: ' état'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' état' → logprob: -1.0626829862594604
    2. 'score' → logprob: -1.8126829862594604
    3. ' score' → logprob: -2.18768310546875
    4. 'end' → logprob: -2.43768310546875
    5. ' espace' → logprob: -2.81268310546875
    6. ' end' → logprob: -3.31268310546875
    7. ' gagn' → logprob: -3.56268310546875
    8. ' ' → logprob: -3.93768310546875
    9. 'point' → logprob: -4.18768310546875
    10. ' point' → logprob: -4.31268310546875

Token 836: ' possible' (ID: 4149)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.3777550160884857
    2. 'final' → logprob: -2.3777549266815186
    3. ' d' → logprob: -3.0027549266815186
    4. ' final' → logprob: -3.2527549266815186
    5. 'de' → logprob: -3.3777549266815186
    6. '_' → logprob: -3.6277549266815186
    7. 'd' → logprob: -3.8777549266815186
    8. '_de' → logprob: -4.377755165100098
    9. '   ' → logprob: -4.752755165100098
    10. ' _' → logprob: -4.877755165100098

Token 837: ' final' (ID: 1721)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4649442434310913
    2. '       ' → logprob: -1.2149442434310913
    3. ' and' → logprob: -3.339944362640381
    4. ':' → logprob: -3.464944362640381
    5. 'and' → logprob: -5.339944362640381
    6. ':
' → logprob: -7.089944362640381
    7. ' :' → logprob: -7.464944362640381
    8. ' ' → logprob: -8.089943885803223
    9. '           ' → logprob: -8.214943885803223
    10. '  ' → logprob: -8.339943885803223

Token 838: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4456928074359894
    2. '       ' → logprob: -1.820692777633667
    3. ':' → logprob: -1.945692777633667
    4. ' and' → logprob: -3.445692777633667
    5. 'and' → logprob: -5.070693016052246
    6. ' ' → logprob: -5.945693016052246
    7. ')' → logprob: -6.195693016052246
    8. '           ' → logprob: -6.320693016052246
    9. '(' → logprob: -6.445693016052246
    10. '_' → logprob: -6.570693016052246

Token 839: '        
' (ID: 3564)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.20224055647850037
    2. '   ' → logprob: -1.7022405862808228
    3. '```' → logprob: -8.077240943908691
    4. '        
' → logprob: -8.827240943908691
    5. '    ' → logprob: -9.077240943908691
    6. '    
' → logprob: -10.077240943908691
    7. ' if' → logprob: -10.577240943908691
    8. ' ' → logprob: -10.577240943908691
    9. ' 
' → logprob: -10.827240943908691
    10. 'if' → logprob: -11.327240943908691

Token 840: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.6166903151315637e-05
    2. '       ' → logprob: -11.875016212463379
    3. 'if' → logprob: -12.125016212463379
    4. ' if' → logprob: -12.750016212463379
    5. '    ' → logprob: -15.000016212463379
    6. '    
' → logprob: -15.500016212463379
    7. '   ' → logprob: -15.500016212463379
    8. '	if' → logprob: -16.375015258789062
    9. '
' → logprob: -16.875015258789062
    10. '```' → logprob: -17.000015258789062

Token 841: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.011450730264186859
    2. '   ' → logprob: -5.26145076751709
    3. 'if' → logprob: -5.26145076751709
    4. '#' (adapté à ' #') → logprob: -7.01145076751709
    5. ' if' → logprob: -9.51145076751709
    6. 'return' → logprob: -10.76145076751709
    7. ' #' → logprob: -12.13645076751709
    8. '
' → logprob: -12.51145076751709
    9. '      ' → logprob: -13.63645076751709
    10. ' ' → logprob: -14.26145076751709

Token 842: ' condition' (ID: 7060)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.3820189833641052
    2. 'if' → logprob: -1.75701904296875
    3. '   ' → logprob: -2.00701904296875
    4. '#' → logprob: -5.25701904296875
    5. ' if' → logprob: -6.13201904296875
    6. 'return' → logprob: -6.63201904296875
    7. '(j' → logprob: -6.63201904296875
    8. '
' → logprob: -9.00701904296875
    9. ' #' → logprob: -9.50701904296875
    10. ' (' → logprob: -9.63201904296875

Token 843: ' victoire' (ID: 96596)
  Prédit: ' if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.8901168704032898
    2. ' (' → logprob: -1.2651169300079346
    3. '   ' → logprob: -1.8901169300079346
    4. '(j' → logprob: -2.7651169300079346
    5. ' j' → logprob: -3.2651169300079346
    6. ' =' → logprob: -3.7651169300079346
    7. '       ' → logprob: -4.1401166915893555
    8. 'if' → logprob: -4.8901166915893555
    9. '    ' → logprob: -6.0151166915893555
    10. ' return' → logprob: -6.7651166915893555

Token 844: ' :
' (ID: 10039)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.5897595882415771
    2. '       ' → logprob: -0.8397595882415771
    3. ' if' → logprob: -5.214759826660156
    4. ':' → logprob: -6.214759826660156
    5. ' =' → logprob: -6.464759826660156
    6. ' and' → logprob: -6.714759826660156
    7. '    ' → logprob: -6.839759826660156
    8. '=' → logprob: -7.714759826660156
    9. 'if' → logprob: -7.964759826660156
    10. ' ' → logprob: -8.089759826660156

Token 845: '       ' (ID: 309)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.7845257520675659
    2. '       ' → logprob: -1.159525752067566
    3. '   ' → logprob: -1.659525752067566
    4. '(j' → logprob: -3.7845258712768555
    5. ' if' → logprob: -4.7845258712768555
    6. '    ' → logprob: -6.2845258712768555
    7. '(' → logprob: -6.2845258712768555
    8. ' j' → logprob: -6.4095258712768555
    9. 'if' → logprob: -6.5345258712768555
    10. ' ' → logprob: -7.0345258712768555

Token 846: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.1757375001907349
    2. '       ' → logprob: -1.5507375001907349
    3. ' (' → logprob: -1.5507375001907349
    4. '(j' → logprob: -1.5507375001907349
    5. '(' → logprob: -3.0507373809814453
    6. '((' → logprob: -5.550737380981445
    7. ' ' → logprob: -6.675737380981445
    8. 'if' (adapté à ' if') → logprob: -6.800737380981445
    9. '    ' → logprob: -7.425737380981445
    10. '  ' → logprob: -8.300737380981445

Token 847: ' j' (ID: 441)
  Prédit: ' ('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.16086597740650177
    2. ' j' → logprob: -2.6608660221099854
    3. '(j' → logprob: -2.6608660221099854
    4. 'j' → logprob: -5.160865783691406
    5. '(' → logprob: -5.910865783691406
    6. '   ' → logprob: -8.410865783691406
    7. ' ' → logprob: -10.035865783691406
    8. '    ' → logprob: -10.410865783691406
    9. '((' → logprob: -10.660865783691406
    10. ' ((' → logprob: -10.910865783691406

Token 848: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.17317183315753937
    2. ' >=' → logprob: -2.4231717586517334
    3. '==' → logprob: -2.7981717586517334
    4. '>=' → logprob: -4.6731719970703125
    5. ' ' → logprob: -9.423171997070312
    6. '   ' → logprob: -11.923171997070312
    7. ' >' → logprob: -12.798171997070312
    8. '>' → logprob: -12.923171997070312
    9. ' <=' → logprob: -13.173171997070312
    10. '```' → logprob: -13.798171997070312

Token 849: ' ' (ID: 220)
  Prédit: '5'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.0035594464279711246
    2. ' ' → logprob: -5.753559589385986
    3. '6' → logprob: -7.878559589385986
    4. '   ' → logprob: -13.253559112548828
    5. '  ' → logprob: -15.003559112548828
    6. '     ' → logprob: -15.753559112548828
    7. '    ' → logprob: -16.003559112548828
    8. 'j' → logprob: -16.441059112548828
    9. '0' → logprob: -16.503559112548828
    10. ' ' → logprob: -16.566059112548828

Token 850: '5' (ID: 20)
  Prédit: '5'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.0001645644661039114
    2. ' ' → logprob: -9.000164985656738
    3. '6' → logprob: -10.125164985656738
    4. '   ' → logprob: -14.125164985656738
    5. '  ' → logprob: -16.000164031982422
    6. '     ' → logprob: -16.312664031982422
    7. '    ' → logprob: -16.875164031982422
    8. 'j' → logprob: -17.250164031982422
    9. '0' → logprob: -17.250164031982422
    10. '```' → logprob: -17.687664031982422

Token 851: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.06995488703250885
    2. 'and' → logprob: -2.6949548721313477
    3. '   ' → logprob: -11.319954872131348
    4. '	and' → logprob: -12.944954872131348
    5. ' ' → logprob: -13.444954872131348
    6. ' и' → logprob: -13.694954872131348
    7. '  ' → logprob: -15.069954872131348
    8. '    ' → logprob: -15.194954872131348
    9. '>' → logprob: -15.194954872131348
    10. '```' → logprob: -15.569954872131348

Token 852: ' y' (ID: 342)
  Prédit: ' y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.06197025999426842
    2. 'y' → logprob: -2.8119702339172363
    3. '   ' → logprob: -13.311970710754395
    4. '	y' → logprob: -15.186970710754395
    5. ' ' → logprob: -15.436970710754395
    6. '(y' → logprob: -15.811970710754395
    7. '0' → logprob: -15.936970710754395
    8. ' (' → logprob: -16.311969757080078
    9. '    ' → logprob: -16.436969757080078
    10. '  ' → logprob: -16.811969757080078

Token 853: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.1269892156124115
    2. '<=' → logprob: -2.1269891262054443
    3. ' <' → logprob: -10.751989364624023
    4. ' ' → logprob: -11.251989364624023
    5. '<' → logprob: -11.501989364624023
    6. '   ' → logprob: -11.626989364624023
    7. '	' → logprob: -13.126989364624023
    8. '==' → logprob: -13.751989364624023
    9. '```' → logprob: -13.876989364624023
    10. '  ' → logprob: -14.001989364624023

Token 854: ' ' (ID: 220)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -8.220573363360018e-05
    2. ' ' → logprob: -9.500082015991211
    3. '4' → logprob: -12.000082015991211
    4. '   ' → logprob: -14.250082015991211
    5. '۳' → logprob: -16.25008201599121
    6. '  ' → logprob: -16.62508201599121
    7. '```' → logprob: -17.25008201599121
    8. '３' → logprob: -17.50008201599121
    9. '' → logprob: -17.62508201599121
    10. '	' → logprob: -17.62508201599121

Token 855: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -1.2664456789934775e-06
    2. '4' → logprob: -14.000000953674316
    3. ' ' → logprob: -15.750000953674316
    4. '۳' → logprob: -16.375001907348633
    5. '३' → logprob: -17.000001907348633
    6. '৩' → logprob: -17.250001907348633
    7. '   ' → logprob: -17.687501907348633
    8. '３' → logprob: -17.687501907348633
    9. '' → logprob: -17.875001907348633
    10. '٣' → logprob: -17.937501907348633

Token 856: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.2793947756290436
    2. ' or' → logprob: -2.1543948650360107
    3. '       ' → logprob: -2.7793948650360107
    4. ':
' → logprob: -3.0293948650360107
    5. '           ' → logprob: -5.029394626617432
    6. ' and' → logprob: -5.404394626617432
    7. ':return' → logprob: -6.029394626617432
    8. '        ' → logprob: -7.154394626617432
    9. '   ' → logprob: -7.404394626617432
    10. ' :' → logprob: -7.529394626617432

Token 857: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.3141641616821289
    2. '       ' → logprob: -1.564164161682129
    3. ' and' → logprob: -3.564164161682129
    4. ':' → logprob: -3.939164161682129
    5. ' or' → logprob: -4.814164161682129
    6. ':
' → logprob: -6.439164161682129
    7. ':return' → logprob: -6.939164161682129
    8. '   ' → logprob: -7.564164161682129
    9. '        ' → logprob: -8.189164161682129
    10. '          ' → logprob: -8.564164161682129

Token 858: ' return' (ID: 622)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.3719284236431122
    2. ' return' → logprob: -1.2469284534454346
    3. ':return' → logprob: -4.7469282150268555
    4. 'return' (adapté à ' return') → logprob: -5.4969282150268555
    5. ' ' → logprob: -5.7469282150268555
    6. '           ' → logprob: -6.1219282150268555
    7. ':' → logprob: -6.4969282150268555
    8. '	return' → logprob: -6.7469282150268555
    9. ':
' → logprob: -7.6219282150268555
    10. '   ' → logprob: -7.8719282150268555

Token 859: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.002475777640938759
    2. ' True' → logprob: -6.002475738525391
    3. '   ' → logprob: -17.25247573852539
    4. '       ' → logprob: -18.00247573852539
    5. '           ' → logprob: -20.00247573852539
    6. '(True' → logprob: -20.00247573852539
    7. 'False' → logprob: -21.50247573852539
    8. '    ' → logprob: -22.37747573852539
    9. 'true' → logprob: -23.12747573852539
    10. '=True' → logprob: -23.87747573852539

Token 860: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.4335211515426636
    2. '
' → logprob: -1.1835211515426636
    3. '\n' → logprob: -3.933521270751953
    4. '   ' → logprob: -4.183521270751953
    5. '<|end|>' → logprob: -5.433521270751953
    6. '  
' → logprob: -6.558521270751953
    7. '    
' → logprob: -6.558521270751953
    8. '        
' → logprob: -7.308521270751953
    9. '\
' → logprob: -7.558521270751953
    10. '
' → logprob: -7.683521270751953

Token 861: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.08718345314264297
    2. '   ' → logprob: -3.2121834754943848
    3. '
' → logprob: -3.3371834754943848
    4. '\n' → logprob: -6.212183475494385
    5. '    
' → logprob: -6.337183475494385
    6. '  
' → logprob: -7.087183475494385
    7. '        
' → logprob: -7.712183475494385
    8. '```' → logprob: -7.712183475494385
    9. '\
' → logprob: -7.712183475494385
    10. '<|end|>' → logprob: -7.837183475494385

Token 862: ' if' (ID: 538)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.6218312382698059
    2. '       ' → logprob: -0.8718312382698059
    3. '
' → logprob: -3.621831178665161
    4. 'if' (adapté à ' if') → logprob: -5.24683141708374
    5. ' if' → logprob: -5.24683141708374
    6. '    
' → logprob: -5.99683141708374
    7. '\n' → logprob: -6.74683141708374
    8. '  
' → logprob: -7.37183141708374
    9. '\
' → logprob: -7.62183141708374
    10. ')
' → logprob: -7.74683141708374

Token 863: ' y' (ID: 342)
  Prédit: ' y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.004080658778548241
    2. 'y' → logprob: -5.504080772399902
    3. '   ' → logprob: -14.004080772399902
    4. '    ' → logprob: -14.254080772399902
    5. ' ' → logprob: -15.004080772399902
    6. ' ' → logprob: -15.629080772399902
    7. '	y' → logprob: -16.004079818725586
    8. '  ' → logprob: -17.004079818725586
    9. '(y' → logprob: -18.504079818725586
    10. '     ' → logprob: -18.504079818725586

Token 864: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.06196858361363411
    2. '==' → logprob: -2.8119685649871826
    3. ' ' → logprob: -14.436968803405762
    4. ' ' → logprob: -16.186967849731445
    5. '   ' → logprob: -16.811967849731445
    6. ']==' → logprob: -17.311967849731445
    7. '===' → logprob: -17.311967849731445
    8. ' <=' → logprob: -17.561967849731445
    9. ')==' → logprob: -17.811967849731445
    10. '=' → logprob: -18.061967849731445

Token 865: ' ' (ID: 220)
  Prédit: '5'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.009762698784470558
    2. ' ' → logprob: -4.634762763977051
    3. '6' → logprob: -12.00976276397705
    4. '   ' → logprob: -15.63476276397705
    5. '4' → logprob: -15.94726276397705
    6. '  ' → logprob: -17.322261810302734
    7. '５' → logprob: -17.572261810302734
    8. '```' → logprob: -17.572261810302734
    9. '۵' → logprob: -17.697261810302734
    10. '[' → logprob: -17.884761810302734

Token 866: '5' (ID: 20)
  Prédit: '5'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -2.1054253011243418e-05
    2. ' ' → logprob: -11.250020980834961
    3. '6' → logprob: -11.750020980834961
    4. '   ' → logprob: -17.43752098083496
    5. '５' → logprob: -18.00002098083496
    6. '0' → logprob: -18.12502098083496
    7. '4' → logprob: -18.25002098083496
    8. '۵' → logprob: -18.56252098083496
    9. '```' → logprob: -18.68752098083496
    10. '  ' → logprob: -19.18752098083496

Token 867: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.014166918583214283
    2. 'and' → logprob: -4.264166831970215
    3. '	and' → logprob: -14.014166831970215
    4. ' <=' → logprob: -14.264166831970215
    5. ' и' → logprob: -14.639166831970215
    6. '   ' → logprob: -14.639166831970215
    7. ' ' → logprob: -15.139166831970215
    8. '           ' → logprob: -15.389166831970215
    9. ' ' → logprob: -16.01416778564453
    10. '<=' → logprob: -16.13916778564453

Token 868: ' j' (ID: 441)
  Prédit: ' j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' j' → logprob: -0.10020958632230759
    2. 'j' → logprob: -2.3502094745635986
    3. '	j' → logprob: -13.35020923614502
    4. '   ' → logprob: -14.10020923614502
    5. ' ' → logprob: -14.72520923614502
    6. '0' → logprob: -15.97520923614502
    7. '$j' → logprob: -17.350210189819336
    8. '    ' → logprob: -17.475210189819336
    9. ' ' → logprob: -17.600210189819336
    10. '  ' → logprob: -17.725210189819336

Token 869: ' <=' (ID: 5017)
  Prédit: ' <='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' <=' → logprob: -0.006716913543641567
    2. '<=' → logprob: -5.006716728210449
    3. ' ' → logprob: -14.38171672821045
    4. ' ≤' → logprob: -15.25671672821045
    5. '   ' → logprob: -15.75671672821045
    6. ' <' → logprob: -15.88171672821045
    7. '```' → logprob: -16.256717681884766
    8. ' ' → logprob: -16.506717681884766
    9. '	' → logprob: -16.631717681884766
    10. ' >=' → logprob: -16.881717681884766

Token 870: ' ' (ID: 220)
  Prédit: '3'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -9.491498531133402e-06
    2. ' ' → logprob: -11.625009536743164
    3. '۳' → logprob: -15.500009536743164
    4. '   ' → logprob: -16.125009536743164
    5. '３' → logprob: -16.875009536743164
    6. '৩' → logprob: -17.625009536743164
    7. '٣' → logprob: -17.625009536743164
    8. '३' → logprob: -18.000009536743164
    9. '```' → logprob: -18.375009536743164
    10. '' → logprob: -18.625009536743164

Token 871: '3' (ID: 18)
  Prédit: '3'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '3' → logprob: -1.1472419600977446e-06
    2. ' ' → logprob: -13.750000953674316
    3. '۳' → logprob: -17.250001907348633
    4. '３' → logprob: -18.250001907348633
    5. '৩' → logprob: -18.750001907348633
    6. '   ' → logprob: -19.000001907348633
    7. '३' → logprob: -19.125001907348633
    8. '٣' → logprob: -19.375001907348633
    9. '' → logprob: -21.062501907348633
    10. '  ' → logprob: -21.500001907348633

Token 872: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.3983238935470581
    2. ':
' → logprob: -1.148323893547058
    3. '       ' → logprob: -4.648324012756348
    4. '           ' → logprob: -6.773324012756348
    5. '):
' → logprob: -9.023324012756348
    6. ':return' → logprob: -9.023324012756348
    7. '   ' → logprob: -9.148324012756348
    8. '<|end|>' → logprob: -9.523324012756348
    9. ' or' → logprob: -9.648324012756348
    10. ' :' → logprob: -9.773324012756348

Token 873: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.20545950531959534
    2. '       ' → logprob: -1.955459475517273
    3. ':' → logprob: -3.3304595947265625
    4. ':
' → logprob: -5.0804595947265625
    5. '	       ' → logprob: -6.7054595947265625
    6. ':return' → logprob: -8.455459594726562
    7. '		' → logprob: -8.580459594726562
    8. '          ' → logprob: -8.705459594726562
    9. '   ' → logprob: -9.455459594726562
    10. ' return' → logprob: -9.580459594726562

Token 874: ' return' (ID: 622)
  Prédit: ' return'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' return' → logprob: -0.19542153179645538
    2. 'return' (adapté à ' return') → logprob: -2.1954214572906494
    3. ' True' → logprob: -2.9454214572906494
    4. 'True' → logprob: -4.3204216957092285
    5. '           ' → logprob: -8.44542121887207
    6. '       ' → logprob: -10.07042121887207
    7. '	return' → logprob: -10.69542121887207
    8. '=True' → logprob: -10.82042121887207
    9. ' ' → logprob: -11.94542121887207
    10. ':return' → logprob: -11.94542121887207

Token 875: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -1.8624639324116288e-06
    2. ' True' → logprob: -13.250001907348633
    3. 'False' → logprob: -21.375001907348633
    4. '(True' → logprob: -21.875001907348633
    5. '=True' → logprob: -23.000001907348633
    6. '
' → logprob: -26.000001907348633
    7. '   ' → logprob: -26.500001907348633
    8. '.True' → logprob: -26.875001907348633
    9. '_true' → logprob: -27.250001907348633
    10. 'true' → logprob: -27.250001907348633

Token 876: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0006716862553730607
    2. '
' → logprob: -8.00067138671875
    3. '   ' → logprob: -8.75067138671875
    4. '<|end|>' → logprob: -9.37567138671875
    5. '	' → logprob: -10.25067138671875
    6. '        
' → logprob: -11.00067138671875
    7. '  
' → logprob: -11.62567138671875
    8. '```' → logprob: -11.87567138671875
    9. '    
' → logprob: -12.12567138671875
    10. '           ' → logprob: -12.87567138671875

Token 877: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0006969464011490345
    2. '   ' → logprob: -7.500697135925293
    3. '
' → logprob: -8.875697135925293
    4. '           ' → logprob: -13.875697135925293
    5. '        
' → logprob: -14.125697135925293
    6. '```' → logprob: -14.250697135925293
    7. '      ' → logprob: -15.000697135925293
    8. '	' → logprob: -15.125697135925293
    9. '<|end|>' → logprob: -15.250697135925293
    10. '    
' → logprob: -15.250697135925293

Token 878: ' if' (ID: 538)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.002313453471288085
    2. '
' → logprob: -6.377313613891602
    3. '   ' → logprob: -7.502313613891602
    4. '```' → logprob: -11.252313613891602
    5. 'if' (adapté à ' if') → logprob: -11.502313613891602
    6. '      ' → logprob: -11.752313613891602
    7. '        
' → logprob: -11.877313613891602
    8. '     ' → logprob: -12.502313613891602
    9. ' if' → logprob: -12.502313613891602
    10. '           ' → logprob: -12.752313613891602

Token 879: ' (' (ID: 350)
  Prédit: '(j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(j' → logprob: -0.6911901235580444
    2. ' (' → logprob: -0.9411901235580444
    3. ' j' → logprob: -2.816190242767334
    4. 'j' → logprob: -3.566190242767334
    5. '(' → logprob: -3.941190242767334
    6. ' ' → logprob: -7.691190242767334
    7. '((' → logprob: -7.816190242767334
    8. '   ' → logprob: -8.316189765930176
    9. '  ' → logprob: -9.566189765930176
    10. '(
' → logprob: -10.191189765930176

Token 880: 'j' (ID: 73)
  Prédit: 'j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.5023554563522339
    2. '(j' → logprob: -1.0023554563522339
    3. ' (' → logprob: -4.252355575561523
    4. ' j' → logprob: -4.377355575561523
    5. '(' → logprob: -7.252355575561523
    6. '   ' → logprob: -8.752355575561523
    7. ' ' → logprob: -9.377355575561523
    8. '((' → logprob: -9.502355575561523
    9. '  ' → logprob: -10.877355575561523
    10. '	j' → logprob: -12.002355575561523

Token 881: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.6331966519355774
    2. ' ==' → logprob: -0.7581966519355774
    3. '>=' → logprob: -8.008196830749512
    4. ',' → logprob: -9.008196830749512
    5. ' >=' → logprob: -9.133196830749512
    6. '   ' → logprob: -11.008196830749512
    7. ' ' → logprob: -12.258196830749512
    8. ' ,' → logprob: -12.883196830749512
    9. ' in' → logprob: -13.133196830749512
    10. ',j' → logprob: -13.133196830749512

Token 882: ' ' (ID: 220)
  Prédit: '6'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -0.1516381800174713
    2. '5' → logprob: -2.2766382694244385
    3. ' ' → logprob: -3.2766382694244385
    4. '4' → logprob: -8.52663803100586
    5. 'y' → logprob: -10.52663803100586
    6. '   ' → logprob: -10.65163803100586
    7. '  ' → logprob: -10.77663803100586
    8. 'j' → logprob: -11.27663803100586
    9. ' y' → logprob: -11.27663803100586
    10. '    ' → logprob: -11.77663803100586

Token 883: '6' (ID: 21)
  Prédit: '5'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.5262515544891357
    2. '6' → logprob: -0.9012515544891357
    3. '4' → logprob: -6.526251792907715
    4. 'y' → logprob: -6.651251792907715
    5. ' ' → logprob: -8.026251792907715
    6. ' y' → logprob: -10.776251792907715
    7. 'j' → logprob: -11.526251792907715
    8. 'x' → logprob: -13.026251792907715
    9. '   ' → logprob: -13.151251792907715
    10. '  ' → logprob: -13.713751792907715

Token 884: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.03804229199886322
    2. 'and' → logprob: -3.2880423069000244
    3. ' ' → logprob: -15.538042068481445
    4. ' ==' → logprob: -15.788042068481445
    5. '==' → logprob: -15.788042068481445
    6. '   ' → logprob: -16.413042068481445
    7. ')' → logprob: -16.538042068481445
    8. '```' → logprob: -17.163042068481445
    9. ' и' → logprob: -17.413042068481445
    10. '	and' → logprob: -17.788042068481445

Token 885: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.16022920608520508
    2. ' y' → logprob: -1.910229206085205
    3. '   ' → logprob: -13.160228729248047
    4. '4' → logprob: -13.535228729248047
    5. ' ' → logprob: -13.660228729248047
    6. '	y' → logprob: -15.535228729248047
    7. '  ' → logprob: -15.910228729248047
    8. '    ' → logprob: -16.035228729248047
    9. '     ' → logprob: -16.035228729248047
    10. '       ' → logprob: -17.535228729248047

Token 886: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.008615042082965374
    2. ' ==' → logprob: -4.758615016937256
    3. '=' → logprob: -15.633615493774414
    4. '==
' → logprob: -15.758615493774414
    5. '===' → logprob: -16.883615493774414
    6. ']==' → logprob: -17.508615493774414
    7. ')==' → logprob: -17.633615493774414
    8. ' ' → logprob: -17.758615493774414
    9. ')' → logprob: -18.008615493774414
    10. '```' → logprob: -18.633615493774414

Token 887: ' ' (ID: 220)
  Prédit: '4'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -3.130576806142926e-05
    2. ' ' → logprob: -10.375031471252441
    3. '   ' → logprob: -18.250030517578125
    4. '۴' → logprob: -19.250030517578125
    5. '４' → logprob: -19.250030517578125
    6. '```' → logprob: -19.500030517578125
    7. '' → logprob: -19.750030517578125
    8. ' four' → logprob: -19.875030517578125
    9. '  ' → logprob: -20.625030517578125
    10. '٤' → logprob: -20.875030517578125

Token 888: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -3.7697225252486533e-06
    2. ' ' → logprob: -12.500003814697266
    3. '４' → logprob: -18.000003814697266
    4. '۴' → logprob: -18.125003814697266
    5. ' four' → logprob: -19.000003814697266
    6. '٤' → logprob: -19.125003814697266
    7. '   ' → logprob: -19.250003814697266
    8. '৪' → logprob: -19.375003814697266
    9. '' → logprob: -19.562503814697266
    10. '४' → logprob: -19.687503814697266

Token 889: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0011237873695790768
    2. '):
' → logprob: -7.126123905181885
    3. '):' → logprob: -8.251123428344727
    4. '       ' → logprob: -10.501123428344727
    5. ' )' → logprob: -10.751123428344727
    6. '   ' → logprob: -13.126123428344727
    7. '           ' → logprob: -13.376123428344727
    8. ':' → logprob: -13.501123428344727
    9. '):
' → logprob: -13.501123428344727
    10. '):

' → logprob: -14.251123428344727

Token 890: ' or' (ID: 503)
  Prédit: ' or'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' or' → logprob: -0.5720846652984619
    2. ':' → logprob: -1.447084665298462
    3. '       ' → logprob: -1.947084665298462
    4. '           ' → logprob: -3.197084665298462
    5. ':
' → logprob: -5.572084426879883
    6. '   ' → logprob: -5.697084426879883
    7. ' and' → logprob: -5.947084426879883
    8. ':return' → logprob: -5.947084426879883
    9. '          ' → logprob: -6.322084426879883
    10. '        ' → logprob: -7.072084426879883

Token 891: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.0034470646642148495
    2. '(y' → logprob: -5.75344705581665
    3. '(j' → logprob: -8.503447532653809
    4. '(' → logprob: -9.628447532653809
    5. ' y' → logprob: -15.253447532653809
    6. '   ' → logprob: -15.878447532653809
    7. '           ' → logprob: -16.628446578979492
    8. '        ' → logprob: -16.753446578979492
    9. '    ' → logprob: -17.003446578979492
    10. '(b' → logprob: -17.378446578979492

Token 892: 'j' (ID: 73)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.40426719188690186
    2. ' y' → logprob: -1.1542671918869019
    3. 'j' → logprob: -4.154267311096191
    4. ' j' → logprob: -7.029267311096191
    5. '(' → logprob: -8.154267311096191
    6. '6' → logprob: -8.779267311096191
    7. ' (' → logprob: -9.154267311096191
    8. '(y' → logprob: -10.279267311096191
    9. ' ' → logprob: -10.404267311096191
    10. '   ' → logprob: -10.779267311096191

Token 893: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.16022595763206482
    2. '==' → logprob: -1.9102259874343872
    3. '=' → logprob: -14.035225868225098
    4. ')==' → logprob: -15.410225868225098
    5. ' =' → logprob: -15.785225868225098
    6. ')' → logprob: -15.785225868225098
    7. '===' → logprob: -15.785225868225098
    8. ']==' → logprob: -16.035226821899414
    9. ' ' → logprob: -16.410226821899414
    10. ' ===' → logprob: -16.785226821899414

Token 894: ' ' (ID: 220)
  Prédit: '4'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.0005535095697268844
    2. ' ' → logprob: -7.500553607940674
    3. '6' → logprob: -15.000553131103516
    4. '４' → logprob: -17.250553131103516
    5. '   ' → logprob: -17.375553131103516
    6. '(' → logprob: -17.375553131103516
    7. '۴' → logprob: -17.750553131103516
    8. '' → logprob: -17.750553131103516
    9. ' four' → logprob: -17.750553131103516
    10. '  ' → logprob: -18.500553131103516

Token 895: '4' (ID: 19)
  Prédit: '4'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -6.837811088189483e-05
    2. ' ' → logprob: -9.625068664550781
    3. '6' → logprob: -13.000068664550781
    4. '   ' → logprob: -18.12506866455078
    5. '４' → logprob: -18.25006866455078
    6. ' four' → logprob: -18.50006866455078
    7. '۴' → logprob: -19.00006866455078
    8. '  ' → logprob: -19.12506866455078
    9. '' → logprob: -19.37506866455078
    10. 'four' → logprob: -20.00006866455078

Token 896: ' and' (ID: 326)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.08541709929704666
    2. '==' → logprob: -2.7104170322418213
    3. ' and' → logprob: -4.2104172706604
    4. 'and' → logprob: -7.5854172706604
    5. ',' → logprob: -12.960416793823242
    6. '<|end|>' → logprob: -12.960416793823242
    7. ' ' → logprob: -13.085416793823242
    8. '=' → logprob: -13.960416793823242
    9. ' et' → logprob: -14.085416793823242
    10. ' ' → logprob: -14.210416793823242

Token 897: ' y' (ID: 342)
  Prédit: '6'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -0.00091217877343297
    2. ' ' → logprob: -7.000912189483643
    3. 'y' → logprob: -15.000911712646484
    4. ' y' → logprob: -15.250911712646484
    5. '   ' → logprob: -16.750911712646484
    6. ' six' → logprob: -16.875911712646484
    7. '```' → logprob: -18.625911712646484
    8. '  ' → logprob: -18.875911712646484
    9. '<|end|>' → logprob: -18.875911712646484
    10. '۶' → logprob: -19.375911712646484

Token 898: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.20160512626171112
    2. ' ==' → logprob: -1.7016050815582275
    3. '6' → logprob: -8.701604843139648
    4. ' ' → logprob: -11.326604843139648
    5. '```' → logprob: -12.451604843139648
    6. '   ' → logprob: -12.701604843139648
    7. '=' → logprob: -13.076604843139648
    8. '  ' → logprob: -13.826604843139648
    9. ']==' → logprob: -13.951604843139648
    10. ')==' → logprob: -14.076604843139648

Token 899: ' ' (ID: 220)
  Prédit: '6'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -5.1689596148207784e-05
    2. ' ' → logprob: -9.875051498413086
    3. '   ' → logprob: -16.750051498413086
    4. '```' → logprob: -17.375051498413086
    5. '۶' → logprob: -17.875051498413086
    6. '[' → logprob: -18.000051498413086
    7. '<|end|>' → logprob: -18.000051498413086
    8. '٦' → logprob: -18.500051498413086
    9. '６' → logprob: -18.812551498413086
    10. '     ' → logprob: -18.875051498413086

Token 900: '6' (ID: 21)
  Prédit: '6'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '6' → logprob: -4.320199877838604e-07
    2. ' ' → logprob: -14.875
    3. '```' → logprob: -18.625
    4. '۶' → logprob: -18.875
    5. '٦' → logprob: -20.125
    6. '６' → logprob: -20.375
    7. '৬' → logprob: -20.625
    8. '६' → logprob: -20.75
    9. '' → logprob: -21.125
    10. '   ' → logprob: -21.375

Token 901: '):
' (ID: 1883)
  Prédit: '):
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.02424163557589054
    2. '):' → logprob: -4.2742414474487305
    3. ')' → logprob: -4.6492414474487305
    4. '       ' → logprob: -8.14924144744873
    5. ':' → logprob: -10.02424144744873
    6. '):
' → logprob: -10.02424144744873
    7. ':
' → logprob: -10.14924144744873
    8. '           ' → logprob: -10.89924144744873
    9. '   ' → logprob: -12.14924144744873
    10. '):

' → logprob: -12.39924144744873

Token 902: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0007568581495434046
    2. ':' → logprob: -8.125757217407227
    3. '           ' → logprob: -8.500757217407227
    4. ':
' → logprob: -8.875757217407227
    5. ':return' → logprob: -10.500757217407227
    6. '   ' → logprob: -10.625757217407227
    7. '	' → logprob: -10.750757217407227
    8. ' return' → logprob: -11.375757217407227
    9. '	return' → logprob: -11.875757217407227
    10. '):
' → logprob: -12.000757217407227

Token 903: ' return' (ID: 622)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.7640184164047241
    2. ' return' → logprob: -1.2640184164047241
    3. 'return' (adapté à ' return') → logprob: -1.3890184164047241
    4. '           ' → logprob: -6.764018535614014
    5. '   ' → logprob: -7.389018535614014
    6. '	return' → logprob: -7.889018535614014
    7. ':return' → logprob: -9.514018058776855
    8. '               ' → logprob: -9.639018058776855
    9. ' ' → logprob: -10.389018058776855
    10. '
' → logprob: -10.889018058776855

Token 904: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.0009114635176956654
    2. ' True' → logprob: -7.000911235809326
    3. '(True' → logprob: -19.125911712646484
    4. '=True' → logprob: -19.875911712646484
    5. 'False' → logprob: -20.875911712646484
    6. 'true' → logprob: -22.500911712646484
    7. '_true' → logprob: -22.875911712646484
    8. '   ' → logprob: -23.250911712646484
    9. '.True' → logprob: -23.375911712646484
    10. '1' → logprob: -25.000911712646484

Token 905: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0004092235758434981
    2. '
' → logprob: -8.125409126281738
    3. '   ' → logprob: -9.250409126281738
    4. '        
' → logprob: -12.250409126281738
    5. '	' → logprob: -12.625409126281738
    6. '           ' → logprob: -13.250409126281738
    7. '      ' → logprob: -13.500409126281738
    8. '    
' → logprob: -13.875409126281738
    9. '  
' → logprob: -14.125409126281738
    10. 'return' → logprob: -14.375409126281738

Token 906: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00035918003413826227
    2. '   ' → logprob: -8.000359535217285
    3. '
' → logprob: -11.500359535217285
    4. '```' → logprob: -12.375359535217285
    5. '<|end|>' → logprob: -12.750359535217285
    6. '	' → logprob: -13.375359535217285
    7. '           ' → logprob: -13.625359535217285
    8. '      ' → logprob: -14.250359535217285
    9. 'if' → logprob: -14.750359535217285
    10. '        
' → logprob: -14.875359535217285

Token 907: ' if' (ID: 538)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.04410484805703163
    2. '   ' → logprob: -3.294104814529419
    3. 'if' (adapté à ' if') → logprob: -5.294105052947998
    4. ' if' → logprob: -7.544105052947998
    5. '
' → logprob: -7.669105052947998
    6. '      ' → logprob: -12.04410457611084
    7. '     ' → logprob: -12.04410457611084
    8. '           ' → logprob: -12.29410457611084
    9. '```' → logprob: -12.29410457611084
    10. '    ' → logprob: -13.29410457611084

Token 908: ' j' (ID: 441)
  Prédit: 'j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.3284119963645935
    2. ' j' → logprob: -1.5784120559692383
    3. ' (' → logprob: -3.3284120559692383
    4. '(j' → logprob: -3.4534120559692383
    5. '(' → logprob: -5.328412055969238
    6. '   ' → logprob: -6.828412055969238
    7. ' ' → logprob: -8.953412055969238
    8. '    ' → logprob: -10.328412055969238
    9. '  ' → logprob: -10.953412055969238
    10. '	j' → logprob: -11.453412055969238

Token 909: ' ==' (ID: 951)
  Prédit: ' =='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.05488826707005501
    2. '==' → logprob: -2.9298882484436035
    3. ' ' → logprob: -12.554888725280762
    4. '   ' → logprob: -14.304888725280762
    5. '```' → logprob: -14.554888725280762
    6. '  ' → logprob: -15.304888725280762
    7. ' >=' → logprob: -15.429888725280762
    8. ' ' → logprob: -15.679888725280762
    9. '=' → logprob: -16.054887771606445
    10. '[' → logprob: -16.554887771606445

Token 910: ' ' (ID: 220)
  Prédit: '5'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.06204140558838844
    2. ' ' → logprob: -2.8120415210723877
    3. 'y' → logprob: -10.062041282653809
    4. ' y' → logprob: -10.687041282653809
    5. '6' → logprob: -12.312041282653809
    6. 'j' → logprob: -13.062041282653809
    7. ' j' → logprob: -14.437041282653809
    8. '   ' → logprob: -15.499541282653809
    9. '  ' → logprob: -15.624541282653809
    10. '7' → logprob: -16.687042236328125

Token 911: '5' (ID: 20)
  Prédit: '5'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -0.0012561841867864132
    2. 'y' → logprob: -6.751255989074707
    3. '6' → logprob: -9.751255989074707
    4. ' ' → logprob: -10.751255989074707
    5. 'j' → logprob: -12.626255989074707
    6. ' y' → logprob: -13.251255989074707
    7. 'x' → logprob: -15.501255989074707
    8. '   ' → logprob: -15.563755989074707
    9. '  ' → logprob: -16.313756942749023
    10. '4' → logprob: -16.376256942749023

Token 912: ' and' (ID: 326)
  Prédit: ' and'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.20142902433872223
    2. 'and' → logprob: -1.701429009437561
    3. '   ' → logprob: -11.57642936706543
    4. '==' → logprob: -12.45142936706543
    5. ' ' → logprob: -13.95142936706543
    6. '	and' → logprob: -14.95142936706543
    7. ' ==' → logprob: -15.07642936706543
    8. ' и' → logprob: -15.32642936706543
    9. 'et' → logprob: -15.70142936706543
    10. '    ' → logprob: -15.82642936706543

Token 913: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.16022463142871857
    2. ' y' → logprob: -1.9102246761322021
    3. '   ' → logprob: -15.160224914550781
    4. '5' → logprob: -16.41022491455078
    5. ' ' → logprob: -16.53522491455078
    6. '	y' → logprob: -16.53522491455078
    7. '  ' → logprob: -18.53522491455078
    8. '```' → logprob: -19.16022491455078
    9. '    ' → logprob: -19.53522491455078
    10. ' ' → logprob: -19.66022491455078

Token 914: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.6326807737350464
    2. ' ==' → logprob: -0.7576807737350464
    3. '=' → logprob: -10.757680892944336
    4. '<|end|>' → logprob: -11.007680892944336
    5. '===' → logprob: -11.132680892944336
    6. '```' → logprob: -11.757680892944336
    7. ')==' → logprob: -12.632680892944336
    8. '<|end|>' → logprob: -12.632680892944336
    9. ']==' → logprob: -12.757680892944336
    10. '[' → logprob: -12.882680892944336

Token 915: ' ' (ID: 220)
  Prédit: '5'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -4.668304245569743e-05
    2. ' ' → logprob: -10.000046730041504
    3. 'five' → logprob: -14.875046730041504
    4. ' five' → logprob: -15.250046730041504
    5. '<|end|>' → logprob: -16.000045776367188
    6. '[' → logprob: -16.625045776367188
    7. '５' → logprob: -16.625045776367188
    8. '५' → logprob: -16.875045776367188
    9. '```' → logprob: -17.000045776367188
    10. '۵' → logprob: -17.125045776367188

Token 916: '5' (ID: 20)
  Prédit: '5'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '5' → logprob: -2.339278580620885e-06
    2. ' ' → logprob: -13.125001907348633
    3. 'five' → logprob: -16.000001907348633
    4. '५' → logprob: -17.125001907348633
    5. '৫' → logprob: -17.250001907348633
    6. '۵' → logprob: -17.375001907348633
    7. '6' → logprob: -17.500001907348633
    8. ' five' → logprob: -17.500001907348633
    9. '５' → logprob: -17.750001907348633
    10. '٥' → logprob: -18.062501907348633

Token 917: ':
' (ID: 734)
  Prédit: ':'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ':' → logprob: -0.4904839098453522
    2. ':
' → logprob: -0.9904838800430298
    3. '   ' → logprob: -4.74048376083374
    4. '       ' → logprob: -5.49048376083374
    5. ':return' → logprob: -5.74048376083374
    6. '):
' → logprob: -9.990484237670898
    7. '           ' → logprob: -10.240484237670898
    8. ' :' → logprob: -10.990484237670898
    9. ':
' → logprob: -10.990484237670898
    10. '	' → logprob: -11.115484237670898

Token 918: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0008025993593037128
    2. ':' → logprob: -7.625802516937256
    3. '	' → logprob: -8.500802993774414
    4. ':
' → logprob: -9.625802993774414
    5. '   ' → logprob: -11.125802993774414
    6. ':return' → logprob: -11.375802993774414
    7. '           ' → logprob: -12.250802993774414
    8. '<|end|>' → logprob: -13.125802993774414
    9. '	   ' → logprob: -13.250802993774414
    10. '      ' → logprob: -13.500802993774414

Token 919: ' return' (ID: 622)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.3073219656944275
    2. 'return' (adapté à ' return') → logprob: -1.8073220252990723
    3. ' return' → logprob: -2.3073220252990723
    4. '   ' → logprob: -7.182322025299072
    5. '	return' → logprob: -8.682321548461914
    6. '           ' → logprob: -10.682321548461914
    7. ':return' → logprob: -12.182321548461914
    8. ' ' → logprob: -13.307321548461914
    9. '               ' → logprob: -13.432321548461914
    10. 'eturn' → logprob: -13.807321548461914

Token 920: ' True' (ID: 6432)
  Prédit: 'True'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'True' → logprob: -0.00020354038861114532
    2. ' True' → logprob: -8.500203132629395
    3. 'False' → logprob: -20.12520408630371
    4. '(True' → logprob: -22.50020408630371
    5. 'true' → logprob: -22.62520408630371
    6. '=True' → logprob: -22.62520408630371
    7. '   ' → logprob: -23.75020408630371
    8. '_true' → logprob: -25.75020408630371
    9. '.True' → logprob: -25.75020408630371
    10. '1' → logprob: -26.25020408630371

Token 921: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0026456944178789854
    2. '   ' → logprob: -6.127645492553711
    3. '<|end|>' → logprob: -8.377645492553711
    4. '	' → logprob: -8.752645492553711
    5. '
' → logprob: -10.127645492553711
    6. '	return' → logprob: -12.252645492553711
    7. '	   ' → logprob: -12.752645492553711
    8. ')' → logprob: -12.877645492553711
    9. '      ' → logprob: -12.877645492553711
    10. '<|end|>' → logprob: -12.877645492553711

Token 922: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.3874005675315857
    2. '   ' → logprob: -1.1374006271362305
    3. '	return' → logprob: -7.8874006271362305
    4. '<|end|>' → logprob: -10.01240062713623
    5. '	' → logprob: -10.13740062713623
    6. 'return' → logprob: -10.51240062713623
    7. '	   ' → logprob: -11.13740062713623
    8. ' return' → logprob: -11.26240062713623
    9. '     ' → logprob: -12.88740062713623
    10. '```' → logprob: -13.01240062713623

Token 923: ' return' (ID: 622)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.043489743024110794
    2. '   ' → logprob: -3.168489694595337
    3. 'return' (adapté à ' return') → logprob: -8.543489456176758
    4. ' return' → logprob: -9.043489456176758
    5. '
' → logprob: -9.543489456176758
    6. '	return' → logprob: -10.168489456176758
    7. '	' → logprob: -10.543489456176758
    8. '    
' → logprob: -11.668489456176758
    9. '<|end|>' → logprob: -11.918489456176758
    10. '	   ' → logprob: -12.043489456176758

Token 924: ' False' (ID: 7983)
  Prédit: 'False'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'False' → logprob: -0.30352866649627686
    2. 'True' → logprob: -1.5535286664962769
    3. ' False' → logprob: -3.3035287857055664
    4. ' True' → logprob: -4.303528785705566
    5. ' j' → logprob: -11.428528785705566
    6. 'j' → logprob: -12.678528785705566
    7. '   ' → logprob: -13.303528785705566
    8. '(True' → logprob: -14.303528785705566
    9. '(False' → logprob: -14.803528785705566
    10. '    ' → logprob: -16.30352783203125

Token 925: '

' (ID: 279)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.038161057978868484
    2. '<|end|>' → logprob: -3.913161039352417
    3. '
' → logprob: -4.538161277770996
    4. '    
' → logprob: -5.163161277770996
    5. '<|end|>' → logprob: -7.538161277770996
    6. '```' → logprob: -8.913161277770996
    7. '  
' → logprob: -9.288161277770996
    8. '       ' → logprob: -9.538161277770996
    9. '        
' → logprob: -10.163161277770996
    10. ')' → logprob: -10.413161277770996

Token 926: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.04318735748529434
    2. '<|end|>' → logprob: -3.793187379837036
    3. '
' → logprob: -4.668187141418457
    4. '    
' → logprob: -4.918187141418457
    5. '<|end|>' → logprob: -6.418187141418457
    6. ':' → logprob: -7.918187141418457
    7. '```' → logprob: -8.543187141418457
    8. '  
' → logprob: -8.543187141418457
    9. ' 
' → logprob: -9.043187141418457
    10. ')' → logprob: -9.293187141418457

Token 927: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.006292195059359074
    2. 'def' → logprob: -5.381292343139648
    3. '
' → logprob: -7.131292343139648
    4. 'from' → logprob: -7.631292343139648
    5. '    
' → logprob: -9.006292343139648
    6. '#' (adapté à ' #') → logprob: -9.381292343139648
    7. '```' → logprob: -9.506292343139648
    8. 'import' → logprob: -10.756292343139648
    9. 'stack' → logprob: -11.131292343139648
    10. 'if' → logprob: -11.256292343139648

Token 928: ' On' (ID: 2160)
  Prédit: 'from'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'from' → logprob: -0.10118958353996277
    2. '   ' → logprob: -2.851189613342285
    3. 'def' → logprob: -3.476189613342285
    4. 'visited' → logprob: -6.101189613342285
    5. 'import' → logprob: -6.226189613342285
    6. 'paths' → logprob: -6.601189613342285
    7. ' from' → logprob: -6.851189613342285
    8. 'memo' → logprob: -7.226189613342285
    9. 'che' → logprob: -9.976189613342285
    10. 'cache' → logprob: -10.476189613342285

Token 929: ' utilis' (ID: 18688)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.288164347410202
    2. 'def' → logprob: -1.4131643772125244
    3. ' def' → logprob: -5.288164138793945
    4. 'from' → logprob: -7.413164138793945
    5. '    ' → logprob: -8.288164138793945
    6. 'import' → logprob: -8.413164138793945
    7. '    
' → logprob: -9.038164138793945
    8. '  ' → logprob: -9.038164138793945
    9. ' =' → logprob: -9.413164138793945
    10. '_stack' → logprob: -9.538164138793945

Token 930: 'era' (ID: 2060)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.046971097588539124
    2. 't' → logprob: -4.046971321105957
    3. 'ze' → logprob: -4.171971321105957
    4. 'se' → logprob: -5.296971321105957
    5. 'te' → logprob: -5.546971321105957
    6. 'def' → logprob: -6.046971321105957
    7. '#' → logprob: -7.546971321105957
    8. 'er' → logprob: -7.921971321105957
    9. '   ' → logprob: -8.171971321105957
    10. 'z' → logprob: -9.546971321105957

Token 931: ' une' (ID: 2463)
  Prédit: 'la'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'la' → logprob: -0.7982463240623474
    2. ' une' → logprob: -1.2982463836669922
    3. 'une' → logprob: -2.048246383666992
    4. ' la' → logprob: -2.673246383666992
    5. 'l' → logprob: -3.798246383666992
    6. ' un' → logprob: -4.048246383666992
    7. 'dfs' → logprob: -4.298246383666992
    8. 'un' → logprob: -4.548246383666992
    9. '   ' → logprob: -5.048246383666992
    10. 'def' → logprob: -5.423246383666992

Token 932: ' recherche' (ID: 24975)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.5871068835258484
    2. 'from' → logprob: -0.9621068835258484
    3. 'dfs' → logprob: -4.087106704711914
    4. 'import' → logprob: -4.212106704711914
    5. 'dé' → logprob: -4.462106704711914
    6. 'stack' → logprob: -5.212106704711914
    7. '#' → logprob: -5.837106704711914
    8. 'deque' → logprob: -6.462106704711914
    9. 'memo' → logprob: -6.712106704711914
    10. ' from' → logprob: -6.837106704711914

Token 933: ' DFS' (ID: 115767)
  Prédit: ' en'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' en' → logprob: -0.9878747463226318
    2. 'en' → logprob: -1.3628747463226318
    3. 'pro' → logprob: -1.7378747463226318
    4. '   ' → logprob: -2.487874746322632
    5. '_depth' → logprob: -3.487874746322632
    6. 'depth' → logprob: -3.737874746322632
    7. ' depth' → logprob: -3.862874746322632
    8. 'prof' → logprob: -4.112874984741211
    9. '_pro' → logprob: -5.862874984741211
    10. 'dfs' → logprob: -5.862874984741211

Token 934: ' depuis' (ID: 16277)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.01481135655194521
    2. 'def' → logprob: -4.7648115158081055
    3. '(' → logprob: -5.7648115158081055
    4. ':' → logprob: -6.8898115158081055
    5. '(
' → logprob: -7.7648115158081055
    6. '
' → logprob: -8.139811515808105
    7. ' (' → logprob: -8.889811515808105
    8. 'from' → logprob: -8.889811515808105
    9. 'import' → logprob: -9.139811515808105
    10. '(j' → logprob: -9.139811515808105

Token 935: ' (' (ID: 350)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.561255931854248
    2. ' (' → logprob: -0.936255931854248
    3. '0' → logprob: -3.686255931854248
    4. '   ' → logprob: -4.436255931854248
    5. ' ' → logprob: -7.811255931854248
    6. ' la' → logprob: -10.561256408691406
    7. '  ' → logprob: -10.686256408691406
    8. '(j' → logprob: -11.936256408691406
    9. '```' → logprob: -12.186256408691406
    10. '    ' → logprob: -12.186256408691406

Token 936: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.003845794126391411
    2. ' ' → logprob: -5.753845691680908
    3. '   ' → logprob: -7.878845691680908
    4. '(' → logprob: -8.378846168518066
    5. ' (' → logprob: -10.128846168518066
    6. '    ' → logprob: -11.753846168518066
    7. ')' → logprob: -12.128846168518066
    8. '  ' → logprob: -13.503846168518066
    9. ' ' → logprob: -13.878846168518066
    10. ',' → logprob: -14.128846168518066

Token 937: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.003845328465104103
    2. ' ,' → logprob: -5.87884521484375
    3. '0' → logprob: -7.00384521484375
    4. ',j' → logprob: -9.00384521484375
    5. '   ' → logprob: -12.12884521484375
    6. '```' → logprob: -14.75384521484375
    7. ',
' → logprob: -14.87884521484375
    8. ' ' → logprob: -14.87884521484375
    9. ',int' → logprob: -15.00384521484375
    10. '_,' → logprob: -15.00384521484375

Token 938: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -0.004081128165125847
    2. ' ' → logprob: -5.5040812492370605
    3. ',' → logprob: -13.504080772399902
    4. '   ' → logprob: -13.629080772399902
    5. '  ' → logprob: -16.75408172607422
    6. '```' → logprob: -17.50408172607422
    7. ' ,' → logprob: -17.62908172607422
    8. '	' → logprob: -18.12908172607422
    9. ' ' → logprob: -18.25408172607422
    10. '    ' → logprob: -18.75408172607422

Token 939: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.2982431948184967
    2. ' jusqu' → logprob: -2.048243284225464
    3. ',' → logprob: -2.673243284225464
    4. '   ' → logprob: -3.173243284225464
    5. '):' → logprob: -4.923243045806885
    6. ' )' → logprob: -5.548243045806885
    7. ' ,' → logprob: -6.548243045806885
    8. '(' → logprob: -6.798243045806885
    9. ' jusque' → logprob: -7.173243045806885
    10. ' (' → logprob: -7.298243045806885

Token 940: ' jusqu' (ID: 21961)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00740074971690774
    2. '
' → logprob: -5.2574005126953125
    3. 'def' → logprob: -6.2574005126953125
    4. '    
' → logprob: -8.757400512695312
    5. 'import' → logprob: -10.507400512695312
    6. ' def' → logprob: -10.757400512695312
    7. ':' → logprob: -11.507400512695312
    8. ',' → logprob: -11.507400512695312
    9. '```' → logprob: -12.757400512695312
    10. '    ' → logprob: -12.882400512695312

Token 941: ''à' (ID: 33688)
  Prédit: ''à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''à' → logprob: -0.048737701028585434
    2. '’à' → logprob: -4.298737525939941
    3. '(' → logprob: -4.423737525939941
    4. ''' → logprob: -4.673737525939941
    5. ''au' → logprob: -4.798737525939941
    6. '   ' → logprob: -6.048737525939941
    7. ' (' → logprob: -7.298737525939941
    8. 'à' → logprob: -8.048737525939941
    9. ''a' → logprob: -8.423737525939941
    10. '’au' → logprob: -8.548737525939941

Token 942: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.6941501498222351
    2. '(j' → logprob: -0.6941501498222351
    3. '(' → logprob: -6.944149971008301
    4. ' ' → logprob: -11.0691499710083
    5. ' j' → logprob: -11.9441499710083
    6. '[j' → logprob: -12.3191499710083
    7. '   ' → logprob: -12.8191499710083
    8. 'j' → logprob: -12.9441499710083
    9. '(u' → logprob: -14.3191499710083
    10. ')' → logprob: -14.5691499710083

Token 943: 'j' (ID: 73)
  Prédit: 'j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.04383813217282295
    2. ' j' → logprob: -3.1688380241394043
    3. '0' → logprob: -8.043838500976562
    4. ')' → logprob: -8.293838500976562
    5. ',' → logprob: -9.668838500976562
    6. ',j' → logprob: -9.668838500976562
    7. ' ' → logprob: -9.793838500976562
    8. '   ' → logprob: -10.293838500976562
    9. ' ,' → logprob: -11.418838500976562
    10. ' (' → logprob: -11.793838500976562

Token 944: '_target' (ID: 24705)
  Prédit: '_target'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_target' → logprob: -0.004952781833708286
    2. '_' → logprob: -5.754952907562256
    3. '_,' → logprob: -7.004952907562256
    4. ',' → logprob: -8.129952430725098
    5. ' _' → logprob: -8.129952430725098
    6. ')_' → logprob: -9.129952430725098
    7. ',_' → logprob: -9.254952430725098
    8. '_targets' → logprob: -10.129952430725098
    9. ')' → logprob: -12.129952430725098
    10. '_final' → logprob: -12.379952430725098

Token 945: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.008863922208547592
    2. ' ,' → logprob: -5.508863925933838
    3. ',j' → logprob: -5.633863925933838
    4. ',y' → logprob: -6.758863925933838
    5. '   ' → logprob: -11.00886344909668
    6. ',
' → logprob: -12.13386344909668
    7. ',n' → logprob: -12.88386344909668
    8. ',user' → logprob: -13.00886344909668
    9. ' ' → logprob: -13.38386344909668
    10. ',x' → logprob: -13.63386344909668

Token 946: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.31326884031295776
    2. ' y' → logprob: -1.3132688999176025
    3. '   ' → logprob: -12.563268661499023
    4. '	y' → logprob: -13.563268661499023
    5. ' ' → logprob: -13.938268661499023
    6. 'j' → logprob: -14.938268661499023
    7. '    ' → logprob: -15.188268661499023
    8. '  ' → logprob: -15.688268661499023
    9. '       ' → logprob: -16.063268661499023
    10. '     ' → logprob: -16.063268661499023

Token 947: '_target' (ID: 24705)
  Prédit: '_target'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_target' → logprob: -0.1924193650484085
    2. ')' → logprob: -2.3174192905426025
    3. '_' → logprob: -2.6924192905426025
    4. ')_' → logprob: -5.692419528961182
    5. '_)' → logprob: -5.817419528961182
    6. ',' → logprob: -7.442419528961182
    7. ' _' → logprob: -7.442419528961182
    8. '+' → logprob: -8.067419052124023
    9. '_,' → logprob: -8.317419052124023
    10. '_t' → logprob: -8.942419052124023

Token 948: ').
' (ID: 6294)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.05927054211497307
    2. '):' → logprob: -4.05927038192749
    3. ':' → logprob: -4.18427038192749
    4. ')' → logprob: -4.30927038192749
    5. ',' → logprob: -5.18427038192749
    6. '.' → logprob: -5.93427038192749
    7. 'def' → logprob: -6.30927038192749
    8. '):
' → logprob: -7.43427038192749
    9. '
' → logprob: -8.309270858764648
    10. ':
' → logprob: -9.059270858764648

Token 949: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03694997355341911
    2. 'def' → logprob: -4.41195011138916
    3. '
' → logprob: -4.91195011138916
    4. '```' → logprob: -4.91195011138916
    5. '    
' → logprob: -5.16195011138916
    6. ' def' → logprob: -6.78695011138916
    7. '  
' → logprob: -7.66195011138916
    8. ' 
' → logprob: -8.16195011138916
    9. '\' → logprob: -8.28695011138916
    10. '   
' → logprob: -8.53695011138916

Token 950: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00045783669338561594
    2. 'def' → logprob: -8.375457763671875
    3. '    
' → logprob: -9.000457763671875
    4. 'from' → logprob: -10.375457763671875
    5. '
' → logprob: -10.625457763671875
    6. 'import' → logprob: -11.375457763671875
    7. ' def' → logprob: -11.875457763671875
    8. ' from' → logprob: -11.875457763671875
    9. 'stack' → logprob: -12.125457763671875
    10. ' stack' → logprob: -12.375457763671875

Token 951: ' On' (ID: 2160)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.023825809359550476
    2. 'def' → logprob: -4.273825645446777
    3. '    
' → logprob: -6.148825645446777
    4. 'from' → logprob: -6.523825645446777
    5. 'visited' → logprob: -6.523825645446777
    6. 'stack' → logprob: -6.648825645446777
    7. ' stack' → logprob: -7.023825645446777
    8. 'import' → logprob: -7.148825645446777
    9. ' def' → logprob: -7.898825645446777
    10. '
' → logprob: -7.898825645446777

Token 952: ' accum' (ID: 23148)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.09321831911802292
    2. ' def' → logprob: -3.5932183265686035
    3. ' continue' → logprob: -4.9682183265686035
    4. 'continue' → logprob: -5.0932183265686035
    5. '_stack' → logprob: -5.3432183265686035
    6. '   ' → logprob: -5.4682183265686035
    7. '_indent' → logprob: -5.4682183265686035
    8. ' va' → logprob: -5.5932183265686035
    9. '_tab' → logprob: -5.5932183265686035
    10. '_continue' → logprob: -5.8432183265686035

Token 953: 'ul' (ID: 361)
  Prédit: 'ule'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ule' → logprob: -0.4344119429588318
    2. 'ère' → logprob: -1.0594120025634766
    3. '   ' → logprob: -6.309412002563477
    4. '       ' → logprob: -7.184412002563477
    5. 'ul' → logprob: -7.559412002563477
    6. '\' → logprob: -7.559412002563477
    7. 'érer' → logprob: -7.934412002563477
    8. 'ulé' → logprob: -8.059412002563477
    9. 'uler' → logprob: -8.559412002563477
    10. 'ére' → logprob: -8.809412002563477

Token 954: 'era' (ID: 2060)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.26904094219207764
    2. 'ate' → logprob: -1.7690409421920776
    3. 'era' → logprob: -2.894041061401367
    4. 'er' → logprob: -5.019041061401367
    5. 'a' → logprob: -6.769041061401367
    6. 'ra' → logprob: -7.644041061401367
    7. 'ère' → logprob: -8.269041061401367
    8. '#' → logprob: -8.394041061401367
    9. 're' → logprob: -8.519041061401367
    10. 'ates' → logprob: -8.894041061401367

Token 955: ' les' (ID: 1341)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.07994544506073
    2. ' la' → logprob: -1.57994544506073
    3. ' le' → logprob: -2.2049455642700195
    4. 'sequence' → logprob: -2.5799455642700195
    5. ' sequence' → logprob: -3.3299455642700195
    6. ' les' → logprob: -3.4549455642700195
    7. 'path' → logprob: -3.8299455642700195
    8. '    ' → logprob: -3.9549455642700195
    9. ' une' → logprob: -3.9549455642700195
    10. 'current' → logprob: -3.9549455642700195

Token 956: ' sé' (ID: 7462)
  Prédit: ' sequences'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' sequences' → logprob: -0.2859540581703186
    2. ' chemins' → logprob: -2.285953998565674
    3. ' paths' → logprob: -3.410953998565674
    4. 'paths' → logprob: -3.410953998565674
    5. 'che' → logprob: -4.160953998565674
    6. ' sé' → logprob: -4.535953998565674
    7. 'sequence' → logprob: -4.910953998565674
    8. '   ' → logprob: -5.160953998565674
    9. 'points' → logprob: -5.160953998565674
    10. ' sequence' → logprob: -5.410953998565674

Token 957: 'quences' (ID: 16559)
  Prédit: 'quences'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'quences' → logprob: -9.877503907773644e-05
    2. 'quence' → logprob: -9.375099182128906
    3. 'q' → logprob: -11.250099182128906
    4. 'qu' → logprob: -14.125099182128906
    5. '#' → logprob: -16.000099182128906
    6. 'quen' → logprob: -17.500099182128906
    7. '   ' → logprob: -18.375099182128906
    8. 'que' → logprob: -18.375099182128906
    9. '_' → logprob: -19.000099182128906
    10. 'QUENCE' → logprob: -19.500099182128906

Token 958: ' et' (ID: 859)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.6577774286270142
    2. '   ' → logprob: -0.7827774286270142
    3. ' des' → logprob: -4.407777309417725
    4. 'de' → logprob: -4.782777309417725
    5. ' ' → logprob: -6.907777309417725
    6. ',' → logprob: -7.782777309417725
    7. '    ' → logprob: -7.907777309417725
    8. '  ' → logprob: -8.282777786254883
    9. ' of' → logprob: -8.282777786254883
    10. ' =' → logprob: -8.657777786254883

Token 959: ' on' (ID: 402)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'def' → logprob: -0.6918925642967224
    2. ' les' → logprob: -1.4418926239013672
    3. 'paths' → logprob: -3.191892623901367
    4. ' def' → logprob: -3.441892623901367
    5. ' paths' → logprob: -3.941892623901367
    6. 'visited' → logprob: -3.941892623901367
    7. 'expl' → logprob: -4.066892623901367
    8. ' explore' → logprob: -4.191892623901367
    9. ' stack' → logprob: -4.316892623901367
    10. 'return' → logprob: -4.566892623901367

Token 960: ' retour' (ID: 30714)
  Prédit: ' explore'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' explore' → logprob: -0.7014957666397095
    2. 'expl' → logprob: -1.3264957666397095
    3. ' continue' → logprob: -1.9514957666397095
    4. 'continue' → logprob: -3.95149564743042
    5. ' continu' → logprob: -4.70149564743042
    6. 'def' → logprob: -4.82649564743042
    7. ' stock' → logprob: -5.07649564743042
    8. 'contin' → logprob: -5.20149564743042
    9. '   ' → logprob: -5.82649564743042
    10. 'vis' → logprob: -5.95149564743042

Token 961: 'nera' (ID: 99762)
  Prédit: 'nera'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'nera' → logprob: -7.791440293658525e-05
    2. 'ne' → logprob: -9.500078201293945
    3. 'ner' → logprob: -13.125078201293945
    4. 'n' → logprob: -14.625078201293945
    5. 'r' → logprob: -14.875078201293945
    6. 'rne' → logprob: -16.125078201293945
    7. 'era' → logprob: -18.125078201293945
    8. 'neur' → logprob: -18.500078201293945
    9. 'na' → logprob: -18.500078201293945
    10. '   ' → logprob: -19.250078201293945

Token 962: ' celles' (ID: 57573)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.1689741164445877
    2. ' []' → logprob: -2.1689741611480713
    3. ' celles' → logprob: -4.543973922729492
    4. ' les' → logprob: -4.793973922729492
    5. 'les' → logprob: -5.168973922729492
    6. ' toutes' → logprob: -5.793973922729492
    7. '```' → logprob: -5.918973922729492
    8. ' la' → logprob: -5.918973922729492
    9. ' True' → logprob: -6.543973922729492
    10. ' ' → logprob: -7.043973922729492

Token 963: ' qui' (ID: 2780)
  Prédit: ' des'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' des' → logprob: -0.22363097965717316
    2. '   ' → logprob: -2.598630905151367
    3. '_' → logprob: -3.848630905151367
    4. '[' → logprob: -3.848630905151367
    5. ' qui' → logprob: -4.223630905151367
    6. ' _' → logprob: -4.848630905151367
    7. ' ' → logprob: -5.098630905151367
    8. ' ' → logprob: -5.098630905151367
    9. ' de' → logprob: -5.223630905151367
    10. ' suivantes' → logprob: -5.348630905151367

Token 964: ' m' (ID: 284)
  Prédit: 'm'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'm' → logprob: -0.7005473375320435
    2. ' m' → logprob: -0.9505473375320435
    3. '   ' → logprob: -2.575547218322754
    4. 'about' → logprob: -4.825547218322754
    5. ' about' → logprob: -5.075547218322754
    6. 'con' → logprob: -5.575547218322754
    7. ' continu' → logprob: -5.575547218322754
    8. ' arrivent' → logprob: -5.825547218322754
    9. 'continu' → logprob: -6.200547218322754
    10. '```' → logprob: -6.200547218322754

Token 965: 'èn' (ID: 18534)
  Prédit: 'èn'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'èn' → logprob: -0.0012773767812177539
    2. 'è' → logprob: -7.251277446746826
    3. 'ennent' → logprob: -8.376276969909668
    4. 'm' → logprob: -9.001276969909668
    5. '`' → logprob: -9.251276969909668
    6. 'ène' → logprob: -10.501276969909668
    7. '   ' → logprob: -11.126276969909668
    8. '#' → logprob: -11.751276969909668
    9. 'nent' → logprob: -12.001276969909668
    10. '\' → logprob: -12.001276969909668

Token 966: 'ent' (ID: 299)
  Prédit: 'ent'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ent' → logprob: -0.0010247125755995512
    2. 'èn' → logprob: -8.50102424621582
    3. 'en' → logprob: -8.50102424621582
    4. '`' → logprob: -8.75102424621582
    5. 'nent' → logprob: -9.25102424621582
    6. '   ' → logprob: -9.62602424621582
    7. '#' → logprob: -9.87602424621582
    8. '```' → logprob: -10.00102424621582
    9. 'ennent' → logprob: -10.00102424621582
    10. 'aient' → logprob: -10.25102424621582

Token 967: ' à' (ID: 1221)
  Prédit: ' à'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' à' → logprob: -0.22060741484165192
    2. '   ' → logprob: -1.9706073999404907
    3. ' au' → logprob: -3.2206075191497803
    4. 'à' → logprob: -4.720607280731201
    5. 'au' → logprob: -5.595607280731201
    6. ' aux' → logprob: -6.470607280731201
    7. ' to' → logprob: -6.845607280731201
    8. ' ' → logprob: -6.970607280731201
    9. '    ' → logprob: -7.220607280731201
    10. '```' → logprob: -7.720607280731201

Token 968: ' l' (ID: 305)
  Prédit: '(j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(j' → logprob: -0.1366836577653885
    2. ' (' → logprob: -2.136683702468872
    3. '[j' → logprob: -6.011683464050293
    4. ' la' → logprob: -6.511683464050293
    5. 'j' → logprob: -6.761683464050293
    6. '(' → logprob: -7.136683464050293
    7. '(l' → logprob: -7.136683464050293
    8. ' j' → logprob: -7.386683464050293
    9. 'la' → logprob: -7.386683464050293
    10. 'l' → logprob: -7.386683464050293

Token 969: ''état' (ID: 116357)
  Prédit: 'a'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'a' → logprob: -0.4786530137062073
    2. ''' → logprob: -2.1036529541015625
    3. ''état' → logprob: -2.1036529541015625
    4. 'e' → logprob: -2.4786529541015625
    5. '_' → logprob: -4.3536529541015625
    6. ''_' → logprob: -4.4786529541015625
    7. ' j' → logprob: -5.4786529541015625
    8. ' (' → logprob: -5.7286529541015625
    9. ''objectif' → logprob: -6.1036529541015625
    10. 'j' → logprob: -6.3536529541015625

Token 970: ' final' (ID: 1721)
  Prédit: 'final'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'final' → logprob: -0.10562799870967865
    2. ' final' → logprob: -2.35562801361084
    3. '_final' → logprob: -5.35562801361084
    4. 'f' → logprob: -7.85562801361084
    5. '_f' → logprob: -9.48062801361084
    6. '_' → logprob: -9.60562801361084
    7. ' finale' → logprob: -10.23062801361084
    8. '   ' → logprob: -10.35562801361084
    9. ' _' → logprob: -11.10562801361084
    10. 'd' → logprob: -11.23062801361084

Token 971: '.
' (ID: 558)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.013936185277998447
    2. '
' → logprob: -4.3889360427856445
    3. 'def' → logprob: -7.5139360427856445
    4. '    
' → logprob: -8.388936042785645
    5. ':' → logprob: -9.013936042785645
    6. '.' → logprob: -9.138936042785645
    7. '```' → logprob: -9.138936042785645
    8. '.
' → logprob: -9.763936042785645
    9. ',' → logprob: -10.013936042785645
    10. 'import' → logprob: -10.138936042785645

Token 972: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0011258102022111416
    2. '
' → logprob: -7.126125812530518
    3. '    
' → logprob: -8.12612533569336
    4. 'def' → logprob: -11.87612533569336
    5. '```' → logprob: -12.12612533569336
    6. 'import' → logprob: -12.37612533569336
    7. '   ' → logprob: -13.00112533569336
    8. ' 
' → logprob: -14.12612533569336
    9. '	
' → logprob: -14.25112533569336
    10. '        
' → logprob: -14.37612533569336

Token 973: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.00021951000962872058
    2. '    
' → logprob: -9.250219345092773
    3. 'def' → logprob: -9.750219345092773
    4. '
' → logprob: -10.375219345092773
    5. 'import' → logprob: -11.875219345092773
    6. ' paths' → logprob: -12.125219345092773
    7. 'from' → logprob: -12.125219345092773
    8. ' def' → logprob: -12.750219345092773
    9. '   ' → logprob: -12.875219345092773
    10. 'paths' → logprob: -13.250219345092773

Token 974: ' Comme' (ID: 53252)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0041725412011146545
    2. '
' → logprob: -5.629172325134277
    3. '    
' → logprob: -7.629172325134277
    4. 'import' → logprob: -10.254172325134277
    5. '```' → logprob: -10.754172325134277
    6. 'def' → logprob: -10.879172325134277
    7. 'from' → logprob: -11.879172325134277
    8. 'stack' → logprob: -14.754172325134277
    9. '    
    
' → logprob: -14.754172325134277
    10. '    ' → logprob: -14.754172325134277

Token 975: ' les' (ID: 1341)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.2520081996917725
    2. ' la' → logprob: -1.2520081996917725
    3. ' les' → logprob: -2.2520081996917725
    4. ' l' → logprob: -2.5020081996917725
    5. '    ' → logprob: -2.7520081996917725
    6. ' ' → logprob: -2.8770081996917725
    7. ' le' → logprob: -3.2520081996917725
    8. 'def' → logprob: -3.8770081996917725
    9. ' on' → logprob: -4.252008438110352
    10. ' une' → logprob: -5.627008438110352

Token 976: ' sé' (ID: 7462)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -1.5182435512542725
    2. ' ' → logprob: -1.8932435512542725
    3. ' sequences' → logprob: -2.0182435512542725
    4. ' espaces' → logprob: -2.6432435512542725
    5. ' joueurs' → logprob: -2.6432435512542725
    6. '_' → logprob: -2.8932435512542725
    7. ' ' → logprob: -3.0182435512542725
    8. 'def' → logprob: -3.0182435512542725
    9. ' def' → logprob: -3.1432435512542725
    10. ' scores' → logprob: -3.7682435512542725

Token 977: 'quences' (ID: 16559)
  Prédit: 'quences'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'quences' → logprob: -0.0028023868799209595
    2. 'q' → logprob: -6.12780237197876
    3. 'quence' → logprob: -8.002802848815918
    4. 'qu' → logprob: -8.877802848815918
    5. '#' → logprob: -9.502802848815918
    6. '_' → logprob: -11.002802848815918
    7. 'qs' → logprob: -11.502802848815918
    8. '   ' → logprob: -12.252802848815918
    9. '_q' → logprob: -12.252802848815918
    10. '```' → logprob: -12.877802848815918

Token 978: ' sont' (ID: 5242)
  Prédit: ' se'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' se' → logprob: -1.1969860792160034
    2. 's' → logprob: -1.3219860792160034
    3. ' sont' → logprob: -1.6969860792160034
    4. ' de' → logprob: -3.321986198425293
    5. '   ' → logprob: -3.446986198425293
    6. ' continu' → logprob: -3.821986198425293
    7. 'se' → logprob: -4.196986198425293
    8. ' ' → logprob: -4.446986198425293
    9. ' peuvent' → logprob: -4.446986198425293
    10. ' =' → logprob: -4.446986198425293

Token 979: ' à' (ID: 1221)
  Prédit: ' limité'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' limité' → logprob: -0.3816179037094116
    2. ' longues' → logprob: -2.006618022918701
    3. 'cour' → logprob: -3.006618022918701
    4. ' cour' → logprob: -3.756618022918701
    5. 'expl' → logprob: -4.006618022918701
    6. 'limit' → logprob: -4.506618022918701
    7. ' trop' → logprob: -4.881618022918701
    8. ' nombreuses' → logprob: -5.256618022918701
    9. ' assez' → logprob: -5.256618022918701
    10. 'compl' → logprob: -5.256618022918701

Token 980: ' tr' (ID: 498)
  Prédit: 'long'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'long' → logprob: -1.487596035003662
    2. 'tail' → logprob: -1.612596035003662
    3. 'tr' → logprob: -2.112596035003662
    4. 'court' → logprob: -3.237596035003662
    5. 'pas' → logprob: -3.612596035003662
    6. '   ' → logprob: -3.612596035003662
    7. 'faire' → logprob: -3.612596035003662
    8. 'termin' → logprob: -3.862596035003662
    9. 'pe' → logprob: -3.862596035003662
    10. 'l' → logprob: -3.987596035003662

Token 981: 'ier' (ID: 905)
  Prédit: 'avers'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'avers' → logprob: -0.2188759744167328
    2. 'outes' → logprob: -2.8438758850097656
    3. 'rès' → logprob: -3.4688758850097656
    4. 'ous' → logprob: -4.093875885009766
    5. 'ouver' → logprob: -4.093875885009766
    6. 'ou' → logprob: -4.343875885009766
    7. 'r' → logprob: -4.468875885009766
    8. 'ouvé' → logprob: -4.843875885009766
    9. 'acer' → logprob: -5.343875885009766
    10. 'ouv' → logprob: -5.343875885009766

Token 982: ' en' (ID: 469)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.7365185618400574
    2. 'def' → logprob: -1.2365186214447021
    3. '   ' → logprob: -1.6115186214447021
    4. ' ,' → logprob: -4.486518383026123
    5. ' def' → logprob: -5.611518383026123
    6. ' en' → logprob: -5.861518383026123
    7. '[' → logprob: -6.611518383026123
    8. 'e' → logprob: -6.611518383026123
    9. '    ' → logprob: -6.736518383026123
    10. ' =' → logprob: -6.986518383026123

Token 983: ' ordre' (ID: 103061)
  Prédit: 'ordre'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ordre' → logprob: -0.07188510149717331
    2. ' ordre' → logprob: -3.071885108947754
    3. 'lex' → logprob: -4.196885108947754
    4. ''ordre' → logprob: -6.321885108947754
    5. 'ord' → logprob: -6.446885108947754
    6. 'alphabet' → logprob: -7.196885108947754
    7. 'l' → logprob: -7.696885108947754
    8. ' lex' → logprob: -8.196885108947754
    9. 'order' → logprob: -8.196885108947754
    10. ' ' → logprob: -8.321885108947754

Token 984: ' lex' (ID: 37772)
  Prédit: ' lex'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' lex' → logprob: -0.05029333755373955
    2. ' alph' → logprob: -3.550293445587158
    3. 'lex' → logprob: -4.300293445587158
    4. ' alphabet' → logprob: -5.925293445587158
    5. ' lexi' → logprob: -7.175293445587158
    6. '_' → logprob: -7.300293445587158
    7. ' lexical' → logprob: -7.425293445587158
    8. ' asc' → logprob: -7.425293445587158
    9. 'alph' → logprob: -8.30029296875
    10. '   ' → logprob: -8.42529296875

Token 985: 'ic' (ID: 291)
  Prédit: 'ic'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ic' → logprob: -0.09417971968650818
    2. 'ico' → logprob: -2.469179630279541
    3. 'i' → logprob: -5.594179630279541
    4. 'é' → logprob: -7.844179630279541
    5. 'ique' → logprob: -8.2191801071167
    6. 'ical' → logprob: -8.7191801071167
    7. 'o' → logprob: -8.8441801071167
    8. 'ographique' → logprob: -9.2191801071167
    9. '_' → logprob: -9.5941801071167
    10. 'icale' → logprob: -9.7191801071167

Token 986: 'ographique' (ID: 108012)
  Prédit: 'ographique'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ographique' → logprob: -0.20733888447284698
    2. 'o' → logprob: -1.7073389291763306
    3. 'ographical' → logprob: -5.582338809967041
    4. 'ographic' → logprob: -7.582338809967041
    5. 'ographically' → logprob: -8.0823392868042
    6. 'al' → logprob: -8.3323392868042
    7. 'ograph' → logprob: -8.3323392868042
    8. 'graph' → logprob: -8.4573392868042
    9. 'ographe' → logprob: -8.7073392868042
    10. '```' → logprob: -9.0823392868042

Token 987: ',' (ID: 11)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.27782753109931946
    2. ',' → logprob: -1.777827501296997
    3. ':' → logprob: -2.902827501296997
    4. ' :' → logprob: -5.027827739715576
    5. 'def' → logprob: -5.777827739715576
    6. ' ,' → logprob: -5.777827739715576
    7. 'A' → logprob: -7.152827739715576
    8. ',
' → logprob: -7.527827739715576
    9. ':
' → logprob: -7.527827739715576
    10. ' ' → logprob: -7.652827739715576

Token 988: ' on' (ID: 402)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.002491118386387825
    2. ' paths' → logprob: -7.127490997314453
    3. ' stack' → logprob: -7.502490997314453
    4. ' def' → logprob: -7.502490997314453
    5. 'def' → logprob: -8.252490997314453
    6. ' import' → logprob: -10.002490997314453
    7. ' path' → logprob: -10.252490997314453
    8. ' sequences' → logprob: -10.252490997314453
    9. 'import' → logprob: -10.377490997314453
    10. '    ' → logprob: -10.502490997314453

Token 989: ' explor' (ID: 51034)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03268658369779587
    2. ' continue' → logprob: -4.407686710357666
    3. ' def' → logprob: -4.907686710357666
    4. 'def' → logprob: -5.782686710357666
    5. ' continu' → logprob: -6.282686710357666
    6. ' explore' → logprob: -6.282686710357666
    7. '    ' → logprob: -7.532686710357666
    8. ' trie' → logprob: -7.532686710357666
    9. ' doit' → logprob: -7.657686710357666
    10. ' return' → logprob: -7.657686710357666

Token 990: 'era' (ID: 2060)
  Prédit: 'er'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'er' → logprob: -0.36137908697128296
    2. '   ' → logprob: -2.2363791465759277
    3. 'era' → logprob: -2.8613791465759277
    4. 'e' → logprob: -2.9863791465759277
    5. 'ore' → logprob: -3.6113791465759277
    6. 'ite' → logprob: -4.486379146575928
    7. 'é' → logprob: -4.611379146575928
    8. 'or' → logprob: -4.861379146575928
    9. 'orer' → logprob: -4.986379146575928
    10. 'iter' → logprob: -5.361379146575928

Token 991: ' d' (ID: 272)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.7752419710159302
    2. ' A' → logprob: -2.0252418518066406
    3. ' '' → logprob: -2.2752418518066406
    4. '    ' → logprob: -2.7752418518066406
    5. 'A' → logprob: -3.0252418518066406
    6. ' les' → logprob: -3.0252418518066406
    7. ' ' → logprob: -3.0252418518066406
    8. ' ' → logprob: -3.4002418518066406
    9. '('' → logprob: -4.650241851806641
    10. ' j' → logprob: -5.025241851806641

Token 992: ''abord' (ID: 89989)
  Prédit: ''abord'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''abord' → logprob: -0.011463453993201256
    2. 'e' → logprob: -4.636463642120361
    3. ''A' → logprob: -7.261463642120361
    4. ''ab' → logprob: -8.011463165283203
    5. 'é' → logprob: -8.636463165283203
    6. ''' → logprob: -8.636463165283203
    7. '’abord' → logprob: -9.511463165283203
    8. ''une' → logprob: -9.761463165283203
    9. 'ab' → logprob: -11.011463165283203
    10. 'ans' → logprob: -11.011463165283203

Token 993: ' A' (ID: 355)
  Prédit: ' ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' '' → logprob: -0.2598415017127991
    2. ' l' → logprob: -3.0098414421081543
    3. ' A' → logprob: -3.2598414421081543
    4. ''A' → logprob: -3.2598414421081543
    5. 'A' → logprob: -3.7598414421081543
    6. '   ' → logprob: -4.134841442108154
    7. ''' → logprob: -4.134841442108154
    8. ' les' → logprob: -4.259841442108154
    9. ' ' → logprob: -4.634841442108154
    10. '    ' → logprob: -4.759841442108154

Token 994: ' puis' (ID: 18766)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.4206465780735016
    2. '<|end|>' → logprob: -1.9206465482711792
    3. ')' → logprob: -2.0456466674804688
    4. '<|end|>' → logprob: -3.6706466674804688
    5. ',' → logprob: -4.170646667480469
    6. 'def' → logprob: -5.045646667480469
    7. '    ' → logprob: -5.795646667480469
    8. ' =' → logprob: -6.795646667480469
    9. 'pp' → logprob: -6.795646667480469
    10. '  ' → logprob: -6.795646667480469

Token 995: ' B' (ID: 418)
  Prédit: ' B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.07903817296028137
    2. 'B' → logprob: -2.579038143157959
    3. ' ' → logprob: -9.579038619995117
    4. ' ' → logprob: -9.829038619995117
    5. ''' → logprob: -12.079038619995117
    6. ' '' → logprob: -12.079038619995117
    7. '   ' → logprob: -12.579038619995117
    8. 'space' → logprob: -13.079038619995117
    9. ' space' → logprob: -13.079038619995117
    10. '    ' → logprob: -13.829038619995117

Token 996: '.

' (ID: 364)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.014913066290318966
    2. ':' → logprob: -4.889913082122803
    3. '
' → logprob: -5.764913082122803
    4. ':
' → logprob: -5.764913082122803
    5. '    
' → logprob: -7.764913082122803
    6. ' :' → logprob: -9.389912605285645
    7. '.' → logprob: -9.514912605285645
    8. '```' → logprob: -9.639912605285645
    9. ' :
' → logprob: -9.889912605285645
    10. '       ' → logprob: -9.889912605285645

Token 997: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.0212413277477026
    2. '
' → logprob: -3.8962414264678955
    3. 'def' → logprob: -8.396241188049316
    4. '    
' → logprob: -8.396241188049316
    5. 'import' → logprob: -9.146241188049316
    6. '```' → logprob: -9.271241188049316
    7. ' def' → logprob: -10.146241188049316
    8. 'from' → logprob: -12.521241188049316
    9. ' from' → logprob: -14.271241188049316
    10. ' import' → logprob: -14.521241188049316

Token 998: ' results' (ID: 4376)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.08379866927862167
    2. 'from' → logprob: -3.20879864692688
    3. 'def' → logprob: -3.58379864692688
    4. 'import' → logprob: -4.708798885345459
    5. 'visited' → logprob: -6.333798885345459
    6. '
' → logprob: -7.333798885345459
    7. 'stack' → logprob: -7.708798885345459
    8. 'paths' → logprob: -8.8337984085083
    9. '    
' → logprob: -9.3337984085083
    10. ' from' → logprob: -10.5837984085083

Token 999: ' =' (ID: 314)
  Prédit: ' ='
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.010148189961910248
    2. '=' → logprob: -4.635148048400879
    3. '=[]' → logprob: -7.885148048400879
    4. '   ' → logprob: -12.135148048400879
    5. ',' → logprob: -13.260148048400879
    6. ' ' → logprob: -13.510148048400879
    7. '=[]
' → logprob: -13.635148048400879
    8. '  ' → logprob: -13.760148048400879
    9. '[]' → logprob: -14.135148048400879
    10. '_' → logprob: -14.135148048400879

Token 1000: ' []

' (ID: 32833)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[]' → logprob: -0.006749005056917667
    2. 'set' → logprob: -5.256749153137207
    3. ' []' → logprob: -6.506749153137207
    4. ' set' → logprob: -11.506749153137207
    5. '[' → logprob: -12.256749153137207
    6. '[]
' → logprob: -13.256749153137207
    7. '   ' → logprob: -13.756749153137207
    8. '["' → logprob: -13.756749153137207
    9. '[]

' → logprob: -14.381749153137207
    10. '[]}' → logprob: -14.381749153137207

Token 1001: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.007845928892493248
    2. '
' → logprob: -5.007845878601074
    3. 'def' → logprob: -6.882845878601074
    4. '    
' → logprob: -9.882845878601074
    5. '```' → logprob: -10.382845878601074
    6. 'import' → logprob: -11.507845878601074
    7. 'stack' → logprob: -12.382845878601074
    8. ' def' → logprob: -12.382845878601074
    9. 'from' → logprob: -13.132845878601074
    10. 'current' → logprob: -14.257845878601074

Token 1002: ' def' (ID: 1056)
  Prédit: 'def'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'def' (adapté à ' def') → logprob: -0.16905182600021362
    2. '   ' → logprob: -2.1690518856048584
    3. 'from' → logprob: -3.4190518856048584
    4. 'stack' → logprob: -5.294051647186279
    5. 'import' → logprob: -6.169051647186279
    6. 'visited' → logprob: -6.919051647186279
    7. '
' → logprob: -8.169052124023438
    8. 'state' → logprob: -10.044052124023438
    9. '    
' → logprob: -10.044052124023438
    10. ' def' → logprob: -11.544052124023438

Token 1003: ' dfs' (ID: 51252)
  Prédit: 'dfs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dfs' → logprob: -0.038087960332632065
    2. ' dfs' → logprob: -3.288087844848633
    3. 'search' → logprob: -10.038087844848633
    4. ' search' → logprob: -13.913087844848633
    5. 'DFS' → logprob: -14.413087844848633
    6. ' DFS' → logprob: -14.663087844848633
    7. 'back' → logprob: -15.038087844848633
    8. 'expl' → logprob: -15.788087844848633
    9. 're' → logprob: -15.913087844848633
    10. 'play' → logprob: -16.788087844848633

Token 1004: '(j' (ID: 4997)
  Prédit: '(j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(j' → logprob: -0.006372266914695501
    2. '(' → logprob: -5.131372451782227
    3. ' (' → logprob: -8.256372451782227
    4. '(current' → logprob: -9.506372451782227
    5. '(i' → logprob: -10.006372451782227
    6. '   ' → logprob: -10.756372451782227
    7. '((' → logprob: -11.131372451782227
    8. '(s' → logprob: -11.506372451782227
    9. '(
' → logprob: -13.006372451782227
    10. '(curr' → logprob: -13.006372451782227

Token 1005: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.004907585214823484
    2. ' ,' → logprob: -5.879907608032227
    3. '+' → logprob: -6.379907608032227
    4. ',j' → logprob: -8.754907608032227
    5. '+,' → logprob: -9.254907608032227
    6. ' +' → logprob: -9.629907608032227
    7. '   ' → logprob: -10.254907608032227
    8. ',next' → logprob: -11.129907608032227
    9. ',
' → logprob: -11.629907608032227
    10. ',y' → logprob: -12.504907608032227

Token 1006: ' y' (ID: 342)
  Prédit: ' y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.029752571135759354
    2. 'y' → logprob: -3.529752492904663
    3. ',y' → logprob: -13.904752731323242
    4. ',' → logprob: -14.154752731323242
    5. '	y' → logprob: -15.279752731323242
    6. ' ' → logprob: -15.654752731323242
    7. '    ' → logprob: -17.029752731323242
    8. '   ' → logprob: -18.404752731323242
    9. '_y' → logprob: -18.404752731323242
    10. ' ' → logprob: -18.529752731323242

Token 1007: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -8.602024900028482e-05
    2. ' ,' → logprob: -10.250085830688477
    3. ',j' → logprob: -10.500085830688477
    4. '   ' → logprob: -11.000085830688477
    5. ',
' → logprob: -12.875085830688477
    6. ',next' → logprob: -14.500085830688477
    7. ',A' → logprob: -14.625085830688477
    8. '):' → logprob: -15.000085830688477
    9. '       ' → logprob: -15.250085830688477
    10. ',a' → logprob: -15.375085830688477

Token 1008: ' path' (ID: 3104)
  Prédit: 'path'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'path' → logprob: -0.6883620619773865
    2. 'seq' → logprob: -1.0633621215820312
    3. 'sequence' → logprob: -2.4383621215820312
    4. ' sequence' → logprob: -3.4383621215820312
    5. ' path' → logprob: -4.063362121582031
    6. ' seq' → logprob: -4.188362121582031
    7. '   ' → logprob: -7.813362121582031
    8. 'score' → logprob: -10.063362121582031
    9. 'che' → logprob: -10.813362121582031
    10. ' ' → logprob: -11.438362121582031

Token 1009: '):
' (ID: 1883)
  Prédit: '):
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.6485457420349121
    2. '):' → logprob: -0.7735457420349121
    3. ',' → logprob: -4.773545742034912
    4. '   ' → logprob: -5.523545742034912
    5. '):
' → logprob: -6.148545742034912
    6. '       ' → logprob: -7.898545742034912
    7. ')' → logprob: -8.89854621887207
    8. ':' → logprob: -9.14854621887207
    9. '<|end|>' → logprob: -9.27354621887207
    10. '<|end|>' → logprob: -9.39854621887207

Token 1010: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.03664950281381607
    2. '       ' → logprob: -3.411649465560913
    3. ':' → logprob: -5.911649703979492
    4. ':
' → logprob: -9.161649703979492
    5. '    
' → logprob: -9.411649703979492
    6. '        
' → logprob: -10.411649703979492
    7. '```' → logprob: -11.161649703979492
    8. '
' → logprob: -11.786649703979492
    9. ' :' → logprob: -11.911649703979492
    10. '  
' → logprob: -12.161649703979492

Token 1011: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.06905066967010498
    2. ' if' → logprob: -3.5690507888793945
    3. '   ' → logprob: -4.0690507888793945
    4. 'if' → logprob: -4.6940507888793945
    5. '
' → logprob: -4.8190507888793945
    6. ' 
' → logprob: -6.0690507888793945
    7. '        
' → logprob: -6.8190507888793945
    8. '	if' → logprob: -8.569050788879395
    9. '           ' → logprob: -9.194050788879395
    10. '    ' → logprob: -9.319050788879395

Token 1012: ' Si' (ID: 7832)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.28864628076553345
    2. '       ' → logprob: -1.7886462211608887
    3. '   ' → logprob: -2.5386462211608887
    4. ' if' → logprob: -5.413646221160889
    5. '
' → logprob: -9.913646697998047
    6. '#' → logprob: -10.038646697998047
    7. '```' → logprob: -12.288646697998047
    8. '        
' → logprob: -12.413646697998047
    9. '           ' → logprob: -13.288646697998047
    10. '	if' → logprob: -13.788646697998047

Token 1013: ' on' (ID: 402)
  Prédit: 'is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'is' → logprob: -0.7796115279197693
    2. 'j' → logprob: -1.279611587524414
    3. '(j' → logprob: -2.154611587524414
    4. ' is' → logprob: -2.654611587524414
    5. ' (' → logprob: -2.904611587524414
    6. ' j' → logprob: -4.029611587524414
    7. '(is' → logprob: -5.654611587524414
    8. '   ' → logprob: -8.154611587524414
    9. '(' → logprob: -8.154611587524414
    10. 'valid' → logprob: -9.029611587524414

Token 1014: ' a' (ID: 261)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.34868890047073364
    2. '==' → logprob: -1.2236888408660889
    3. ' >=' → logprob: -9.973689079284668
    4. '>=' → logprob: -9.973689079284668
    5. '=' → logprob: -10.348689079284668
    6. '_' → logprob: -11.098689079284668
    7. '   ' → logprob: -11.348689079284668
    8. ' ' → logprob: -11.598689079284668
    9. '==(' → logprob: -11.598689079284668
    10. ' j' → logprob: -11.723689079284668

Token 1015: ' atteint' (ID: 104876)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.8634102940559387
    2. '==' → logprob: -1.363410234451294
    3. 'j' → logprob: -1.863410234451294
    4. ' j' → logprob: -2.238410234451294
    5. '   ' → logprob: -4.113410472869873
    6. ' reached' → logprob: -4.238410472869873
    7. '(j' → logprob: -4.363410472869873
    8. ' (' → logprob: -5.363410472869873
    9. ' atteint' → logprob: -6.238410472869873
    10. ' ' → logprob: -6.613410472869873

Token 1016: ' le' (ID: 505)
  Prédit: '(j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(j' → logprob: -0.6737164855003357
    2. 'j' → logprob: -1.6737165451049805
    3. ' (' → logprob: -1.6737165451049805
    4. ' j' → logprob: -2.1737165451049805
    5. '   ' → logprob: -6.7987165451049805
    6. '(' → logprob: -8.79871654510498
    7. ' ' → logprob: -10.79871654510498
    8. '  ' → logprob: -11.54871654510498
    9. '    ' → logprob: -11.67371654510498
    10. '       ' → logprob: -12.17371654510498

Token 1017: ' score' (ID: 8429)
  Prédit: ' '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' ' → logprob: -0.8418644666671753
    2. ' j' → logprob: -1.7168644666671753
    3. 'j' → logprob: -2.466864585876465
    4. ''' → logprob: -2.591864585876465
    5. 'target' → logprob: -2.716864585876465
    6. '_target' → logprob: -3.091864585876465
    7. ' target' → logprob: -3.466864585876465
    8. ' (' → logprob: -3.716864585876465
    9. '_' → logprob: -4.841864585876465
    10. 'y' → logprob: -5.341864585876465

Token 1018: ' cible' (ID: 136857)
  Prédit: '_'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_' → logprob: -1.0610586404800415
    2. '_target' → logprob: -1.6860586404800415
    3. ' :' → logprob: -1.9360586404800415
    4. ':' → logprob: -1.9360586404800415
    5. ' _' → logprob: -2.811058521270752
    6. ' ' → logprob: -3.561058521270752
    7. ' ==' → logprob: -3.561058521270752
    8. '   ' → logprob: -4.311058521270752
    9. ',' → logprob: -4.311058521270752
    10. '_:' → logprob: -4.561058521270752

Token 1019: ',' (ID: 11)
  Prédit: ' and'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' and' → logprob: -0.5197660326957703
    2. ':' → logprob: -1.144766092300415
    3. 'and' → logprob: -3.394766092300415
    4. '   ' → logprob: -3.769766092300415
    5. '       ' → logprob: -4.269765853881836
    6. ':
' → logprob: -4.519765853881836
    7. ' :' → logprob: -5.894765853881836
    8. ' ' → logprob: -7.269765853881836
    9. ',' → logprob: -7.394765853881836
    10. '           ' → logprob: -7.519765853881836

Token 1020: ' on' (ID: 402)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.17648115754127502
    2. 'if' → logprob: -2.176481246948242
    3. ' if' → logprob: -3.051481246948242
    4. '   ' → logprob: -6.926481246948242
    5. '
' → logprob: -10.301481246948242
    6. '	if' → logprob: -11.301481246948242
    7. '        
' → logprob: -11.926481246948242
    8. 'return' → logprob: -12.551481246948242
    9. '      ' → logprob: -12.801481246948242
    10. ' ' → logprob: -12.926481246948242

Token 1021: ' ajoute' (ID: 91611)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.3127269148826599
    2. '   ' → logprob: -1.8127269744873047
    3. 'if' → logprob: -2.5627269744873047
    4. ':' → logprob: -4.437726974487305
    5. ' if' → logprob: -5.062726974487305
    6. '```' → logprob: -5.312726974487305
    7. 'est' → logprob: -6.687726974487305
    8. '           ' → logprob: -6.937726974487305
    9. '):
' → logprob: -7.687726974487305
    10. ':return' → logprob: -7.812726974487305

Token 1022: ' la' (ID: 557)
  Prédit: 'path'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'path' → logprob: -0.5319855213165283
    2. ' path' → logprob: -0.9069855213165283
    3. ' ' → logprob: -5.781985282897949
    4. '(path' → logprob: -6.031985282897949
    5. '   ' → logprob: -6.531985282897949
    6. ''' → logprob: -7.406985282897949
    7. '"path' → logprob: -8.28198528289795
    8. '"' → logprob: -8.65698528289795
    9. '	path' → logprob: -9.03198528289795
    10. ')' → logprob: -9.53198528289795

Token 1023: ' sé' (ID: 7462)
  Prédit: ' path'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' path' → logprob: -0.628436803817749
    2. 'path' → logprob: -1.378436803817749
    3. '\n' → logprob: -1.753436803817749
    4. ' sequence' → logprob: -4.878437042236328
    5. 'token' → logprob: -5.253437042236328
    6. ' ' → logprob: -5.253437042236328
    7. ' token' → logprob: -5.503437042236328
    8. '
' → logprob: -5.753437042236328
    9. ' next' → logprob: -5.753437042236328
    10. ' 
' → logprob: -6.753437042236328

Token 1024: 'quence' (ID: 6975)
  Prédit: 'quence'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'quence' → logprob: -0.3157453238964081
    2. 'q' → logprob: -1.3157453536987305
    3. 'quences' → logprob: -6.3157453536987305
    4. 'qu' → logprob: -7.8157453536987305
    5. 'QUENCE' → logprob: -9.31574535369873
    6. 'que' → logprob: -10.56574535369873
    7. ' ' → logprob: -10.69074535369873
    8. '   ' → logprob: -10.94074535369873
    9. 'quent' → logprob: -11.06574535369873
    10. '#' → logprob: -11.31574535369873

Token 1025: ' si' (ID: 1784)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.02179562859237194
    2. ':' → logprob: -4.146795749664307
    3. ':
' → logprob: -5.396795749664307
    4. '   ' → logprob: -7.646795749664307
    5. '           ' → logprob: -8.021795272827148
    6. ' :' → logprob: -9.646795272827148
    7. ' if' → logprob: -9.646795272827148
    8. ',' → logprob: -9.771795272827148
    9. ' and' → logprob: -10.146795272827148
    10. ' :
' → logprob: -10.521795272827148

Token 1026: ' c' (ID: 274)
  Prédit: ' valid'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' valid' → logprob: -0.40224799513816833
    2. 'valid' → logprob: -1.7772480249404907
    3. 'j' → logprob: -2.777247905731201
    4. ' j' → logprob: -3.027247905731201
    5. 'len' → logprob: -3.402247905731201
    6. ' len' → logprob: -4.652247905731201
    7. ' is' → logprob: -5.277247905731201
    8. 'is' → logprob: -6.027247905731201
    9. '(j' → logprob: -7.652247905731201
    10. ' (' → logprob: -8.40224838256836

Token 1027: ''est' (ID: 6616)
  Prédit: ''est'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''est' → logprob: -0.9797644019126892
    2. 'urrent' → logprob: -1.604764461517334
    3. 'e' → logprob: -1.729764461517334
    4. 'len' → logprob: -3.354764461517334
    5. ' ==' → logprob: -3.354764461517334
    6. 'est' → logprob: -3.729764461517334
    7. '   ' → logprob: -3.729764461517334
    8. 'ur' → logprob: -3.729764461517334
    9. '==' → logprob: -4.104764461517334
    10. 'ont' → logprob: -4.729764461517334

Token 1028: ' bien' (ID: 5340)
  Prédit: 'is'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'is' → logprob: -0.2700308859348297
    2. ' is' → logprob: -2.020030975341797
    3. ' valid' → logprob: -2.770030975341797
    4. 'valid' → logprob: -3.895030975341797
    5. ' True' → logprob: -4.520030975341797
    6. 'True' → logprob: -5.645030975341797
    7. ' an' → logprob: -5.895030975341797
    8. ' not' → logprob: -7.395030975341797
    9. ' valide' → logprob: -7.395030975341797
    10. 'not' → logprob: -7.770030975341797

Token 1029: ' une' (ID: 2463)
  Prédit: ' un'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' un' → logprob: -1.054649829864502
    2. ' une' → logprob: -1.179649829864502
    3. 'une' → logprob: -2.179649829864502
    4. 'un' → logprob: -2.554649829864502
    5. ' valid' → logprob: -3.054649829864502
    6. '   ' → logprob: -3.429649829864502
    7. 'valid' → logprob: -3.429649829864502
    8. 'is' → logprob: -4.304649829864502
    9. 'l' → logprob: -5.304649829864502
    10. ' is' → logprob: -5.429649829864502

Token 1030: ' fin' (ID: 2131)
  Prédit: 'end'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'end' → logprob: -0.30468496680259705
    2. ' valid' → logprob: -2.30468487739563
    3. 'valid' → logprob: -2.55468487739563
    4. ' end' → logprob: -2.92968487739563
    5. 'final' → logprob: -3.67968487739563
    6. 'fin' → logprob: -5.804685115814209
    7. '_end' → logprob: -7.179685115814209
    8. ' final' → logprob: -7.179685115814209
    9. 'n' → logprob: -7.554685115814209
    10. ' fin' → logprob: -8.30468463897705

Token 1031: ' valide' (ID: 137323)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.01300221960991621
    2. ' de' → logprob: -5.513002395629883
    3. '_state' → logprob: -6.138002395629883
    4. '   ' → logprob: -6.263002395629883
    5. '_' → logprob: -6.388002395629883
    6. '           ' → logprob: -6.638002395629883
    7. '_de' → logprob: -7.763002395629883
    8. 'de' → logprob: -8.138002395629883
    9. 'state' → logprob: -8.263002395629883
    10. '      ' → logprob: -8.763002395629883

Token 1032: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.06506387889385223
    2. ':' → logprob: -2.940063953399658
    3. ':
' → logprob: -5.315063953399658
    4. '           ' → logprob: -5.815063953399658
    5. '   ' → logprob: -7.190063953399658
    6. '.' → logprob: -8.0650634765625
    7. ',' → logprob: -8.4400634765625
    8. ' and' → logprob: -8.4400634765625
    9. ' :' → logprob: -8.4400634765625
    10. '```' → logprob: -9.1900634765625

Token 1033: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.005238975863903761
    2. ':' → logprob: -5.880239009857178
    3. '   ' → logprob: -6.505239009857178
    4. ':
' → logprob: -7.130239009857178
    5. '           ' → logprob: -10.38023853302002
    6. ' :' → logprob: -10.38023853302002
    7. ' and' → logprob: -11.00523853302002
    8. '```' → logprob: -11.13023853302002
    9. ' :
' → logprob: -11.13023853302002
    10. '):
' → logprob: -12.25523853302002

Token 1034: ' if' (ID: 538)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.015095554292201996
    2. 'if' (adapté à ' if') → logprob: -4.2650957107543945
    3. ' if' → logprob: -7.0150957107543945
    4. '   ' → logprob: -10.640095710754395
    5. '```' → logprob: -12.640095710754395
    6. ' ' → logprob: -13.265095710754395
    7. '           ' → logprob: -13.640095710754395
    8. '​' → logprob: -13.765095710754395
    9. '      ' → logprob: -14.640095710754395
    10. '	if' → logprob: -14.890095710754395

Token 1035: ' (' (ID: 350)
  Prédit: ' j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' j' → logprob: -0.030486732721328735
    2. 'j' → logprob: -3.780486822128296
    3. ' (' → logprob: -5.030486583709717
    4. '(j' → logprob: -7.405486583709717
    5. ' ' → logprob: -9.905487060546875
    6. ' ' → logprob: -12.030487060546875
    7. '   ' → logprob: -12.030487060546875
    8. '(' → logprob: -12.405487060546875
    9. '    ' → logprob: -12.905487060546875
    10. '	j' → logprob: -13.405487060546875

Token 1036: 'j' (ID: 73)
  Prédit: 'j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.0006540587637573481
    2. ' j' → logprob: -7.500654220581055
    3. '   ' → logprob: -9.625654220581055
    4. ')' → logprob: -10.875654220581055
    5. '  ' → logprob: -12.750654220581055
    6. '    ' → logprob: -12.875654220581055
    7. ' ' → logprob: -13.500654220581055
    8. '           ' → logprob: -13.625654220581055
    9. '       ' → logprob: -13.875654220581055
    10. ' ==' → logprob: -13.875654220581055

Token 1037: ',' (ID: 11)
  Prédit: ' =='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ==' → logprob: -0.7606493830680847
    2. ',' → logprob: -0.8856493830680847
    3. '==' → logprob: -2.1356494426727295
    4. ' ,' → logprob: -6.38564920425415
    5. ',j' → logprob: -9.010649681091309
    6. ')==' → logprob: -9.885649681091309
    7. '   ' → logprob: -10.135649681091309
    8. ')' → logprob: -10.510649681091309
    9. ',target' → logprob: -10.760649681091309
    10. ' ' → logprob: -11.385649681091309

Token 1038: ' y' (ID: 342)
  Prédit: ' y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.38687485456466675
    2. 'y' → logprob: -1.1368749141693115
    3. ',' → logprob: -12.76187515258789
    4. ',y' → logprob: -14.63687515258789
    5. ')' → logprob: -15.63687515258789
    6. '	y' → logprob: -15.88687515258789
    7. '    ' → logprob: -16.38687515258789
    8. '   ' → logprob: -17.26187515258789
    9. ')y' → logprob: -17.38687515258789
    10. ' ' → logprob: -17.63687515258789

Token 1039: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0486910417675972
    2. ')==' → logprob: -3.0486910343170166
    3. '==' → logprob: -9.298690795898438
    4. ' ==' → logprob: -12.048690795898438
    5. ' )' → logprob: -12.298690795898438
    6. ']==' → logprob: -13.673690795898438
    7. '       ' → logprob: -16.298690795898438
    8. '==(' → logprob: -16.298690795898438
    9. ')=='' → logprob: -16.673690795898438
    10. ')=' → logprob: -16.673690795898438

Token 1040: ' ==' (ID: 951)
  Prédit: '=='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '==' → logprob: -0.3144945502281189
    2. ' ==' → logprob: -1.3144946098327637
    3. ')==' → logprob: -6.814494609832764
    4. ']==' → logprob: -9.939494132995605
    5. ')' → logprob: -10.064494132995605
    6. '==(' → logprob: -10.564494132995605
    7. '==
' → logprob: -12.189494132995605
    8. '===' → logprob: -12.689494132995605
    9. '=' → logprob: -12.939494132995605
    10. '()==' → logprob: -13.314494132995605

Token 1041: ' (' (ID: 350)
  Prédit: '(j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(j' → logprob: -0.029798856005072594
    2. ' (' → logprob: -3.529798746109009
    3. '   ' → logprob: -10.02979850769043
    4. ' ' → logprob: -13.15479850769043
    5. '(' → logprob: -13.40479850769043
    6. '  ' → logprob: -14.40479850769043
    7. '    ' → logprob: -16.40479850769043
    8. '       ' → logprob: -16.77979850769043
    9. '(J' → logprob: -17.27979850769043
    10. '           ' → logprob: -17.52979850769043

Token 1042: 'j' (ID: 73)
  Prédit: 'j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -4.4849443838757e-06
    2. ' j' → logprob: -12.375004768371582
    3. '   ' → logprob: -15.375004768371582
    4. '	j' → logprob: -18.875003814697266
    5. '_j' → logprob: -20.625003814697266
    6. '       ' → logprob: -21.250003814697266
    7. '$j' → logprob: -21.250003814697266
    8. ')' → logprob: -21.875003814697266
    9. 'jax' → logprob: -21.875003814697266
    10. ',j' → logprob: -22.125003814697266

Token 1043: '_target' (ID: 24705)
  Prédit: '_target'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_target' → logprob: -1.1756367712223437e-05
    2. 'target' → logprob: -12.500011444091797
    3. ',' → logprob: -12.875011444091797
    4. '   ' → logprob: -13.500011444091797
    5. '_targets' → logprob: -13.625011444091797
    6. ' _' → logprob: -14.625011444091797
    7. '_,' → logprob: -14.750011444091797
    8. '_t' → logprob: -15.000011444091797
    9. ')_' → logprob: -15.125011444091797
    10. 'Target' → logprob: -15.250011444091797

Token 1044: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0006389308837242424
    2. ' ,' → logprob: -7.750638961791992
    3. ',y' → logprob: -9.000638961791992
    4. ',j' → logprob: -9.625638961791992
    5. '   ' → logprob: -11.375638961791992
    6. ',
' → logprob: -13.375638961791992
    7. ')' → logprob: -13.875638961791992
    8. ',user' → logprob: -14.000638961791992
    9. ',n' → logprob: -14.125638961791992
    10. '       ' → logprob: -14.250638961791992

Token 1045: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.12693041563034058
    2. ' y' → logprob: -2.1269304752349854
    3. '   ' → logprob: -13.501930236816406
    4. '	y' → logprob: -14.501930236816406
    5. '    ' → logprob: -15.501930236816406
    6. ' ' → logprob: -16.001930236816406
    7. '     ' → logprob: -17.626930236816406
    8. '  ' → logprob: -17.751930236816406
    9. 'j' → logprob: -17.876930236816406
    10. ')y' → logprob: -18.126930236816406

Token 1046: '_target' (ID: 24705)
  Prédit: '_target'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_target' → logprob: -0.00014942926645744592
    2. 'target' → logprob: -9.500149726867676
    3. ')' → logprob: -10.125149726867676
    4. '   ' → logprob: -11.375149726867676
    5. '):
' → logprob: -11.875149726867676
    6. ')_' → logprob: -12.375149726867676
    7. '):' → logprob: -12.625149726867676
    8. ',' → logprob: -12.750149726867676
    9. '_' → logprob: -13.750149726867676
    10. '+' → logprob: -14.375149726867676

Token 1047: '):
' (ID: 1883)
  Prédit: '):
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.12375840544700623
    2. ')' → logprob: -2.248758316040039
    3. '):' → logprob: -4.623758316040039
    4. '       ' → logprob: -7.123758316040039
    5. '):
' → logprob: -8.623758316040039
    6. '   ' → logprob: -10.248758316040039
    7. '):

' → logprob: -11.123758316040039
    8. '           ' → logprob: -11.748758316040039
    9. ':' → logprob: -12.498758316040039
    10. ':
' → logprob: -12.873758316040039

Token 1048: '           ' (ID: 352)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.22562848031520844
    2. '           ' → logprob: -2.22562837600708
    3. ':' → logprob: -2.85062837600708
    4. ':
' → logprob: -3.35062837600708
    5. ' and' → logprob: -7.85062837600708
    6. '```' → logprob: -8.600628852844238
    7. ' :' → logprob: -9.100628852844238
    8. '):
' → logprob: -9.225628852844238
    9. ':return' → logprob: -9.225628852844238
    10. '               ' → logprob: -10.475628852844238

Token 1049: ' if' (ID: 538)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' (adapté à ' if') → logprob: -0.5724668502807617
    2. '       ' → logprob: -0.9474668502807617
    3. '           ' → logprob: -3.1974668502807617
    4. ' if' → logprob: -4.947466850280762
    5. '               ' → logprob: -9.072466850280762
    6. '	if' → logprob: -10.697466850280762
    7. '   ' → logprob: -11.322466850280762
    8. 'return' → logprob: -11.947466850280762
    9. '	       ' → logprob: -12.072466850280762
    10. '#' → logprob: -13.197466850280762

Token 1050: ' is' (ID: 382)
  Prédit: ' is'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' is' → logprob: -0.4740775227546692
    2. 'is' → logprob: -0.9740775227546692
    3. ' valid' → logprob: -15.474077224731445
    4. '   ' → logprob: -15.849077224731445
    5. '           ' → logprob: -16.474077224731445
    6. 'valid' → logprob: -17.224077224731445
    7. '(is' → logprob: -17.349077224731445
    8. ')is' → logprob: -18.224077224731445
    9. '	is' → logprob: -18.599077224731445
    10. ' ' → logprob: -18.974077224731445

Token 1051: '_end' (ID: 13707)
  Prédit: '_end'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_end' → logprob: -5.319370302458992e-06
    2. 'end' → logprob: -12.875005722045898
    3. '_' → logprob: -13.625005722045898
    4. ' _' → logprob: -15.250005722045898
    5. '_END' → logprob: -15.250005722045898
    6. '\' → logprob: -15.625005722045898
    7. '   ' → logprob: -16.0000057220459
    8. '_valid' → logprob: -16.7500057220459
    9. '_true' → logprob: -17.0000057220459
    10. ' ' → logprob: -17.2500057220459

Token 1052: '_state' (ID: 9479)
  Prédit: '_state'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_state' → logprob: -0.0008336895843967795
    2. '_' → logprob: -7.125833511352539
    3. ' _' → logprob: -11.500833511352539
    4. ')_' → logprob: -12.250833511352539
    5. ')' → logprob: -12.375833511352539
    6. 'state' → logprob: -12.750833511352539
    7. '_STATE' → logprob: -13.125833511352539
    8. '_s' → logprob: -14.000833511352539
    9. '_State' → logprob: -14.250833511352539
    10. '   ' → logprob: -14.500833511352539

Token 1053: '(j' (ID: 4997)
  Prédit: '(j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(j' → logprob: -3.619311974034645e-05
    2. ' (' → logprob: -10.875036239624023
    3. '(' → logprob: -11.625036239624023
    4. ')' → logprob: -12.000036239624023
    5. ',j' → logprob: -14.375036239624023
    6. 'j' → logprob: -14.875036239624023
    7. ')(' → logprob: -15.625036239624023
    8. '(
' → logprob: -15.625036239624023
    9. '[j' → logprob: -15.875036239624023
    10. '   ' → logprob: -15.875036239624023

Token 1054: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0009263493702746928
    2. ',y' → logprob: -7.625926494598389
    3. ',j' → logprob: -8.37592601776123
    4. ' ,' → logprob: -8.50092601776123
    5. 'y' → logprob: -13.62592601776123
    6. '   ' → logprob: -14.12592601776123
    7. '           ' → logprob: -14.50092601776123
    8. ',
' → logprob: -14.62592601776123
    9. '       ' → logprob: -15.37592601776123
    10. ',user' → logprob: -15.50092601776123

Token 1055: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.31327617168426514
    2. ' y' → logprob: -1.3132761716842651
    3. ',' → logprob: -11.813276290893555
    4. ',y' → logprob: -12.063276290893555
    5. '	y' → logprob: -14.813276290893555
    6. ' ' → logprob: -14.938276290893555
    7. '   ' → logprob: -15.438276290893555
    8. '    ' → logprob: -16.063276290893555
    9. '  ' → logprob: -16.313276290893555
    10. ' ,' → logprob: -17.313276290893555

Token 1056: '):
' (ID: 1883)
  Prédit: '):
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.042654283344745636
    2. '):' → logprob: -3.292654275894165
    3. ')' → logprob: -5.542654514312744
    4. '           ' → logprob: -7.667654514312744
    5. '):
' → logprob: -8.667654037475586
    6. '):

' → logprob: -11.167654037475586
    7. '       ' → logprob: -11.417654037475586
    8. ')==' → logprob: -11.667654037475586
    9. '               ' → logprob: -12.417654037475586
    10. ' ):
' → logprob: -13.042654037475586

Token 1057: '               ' (ID: 506)
  Prédit: '               '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '               ' → logprob: -0.012712003663182259
    2. '           ' → logprob: -4.387712001800537
    3. '       ' → logprob: -8.637712478637695
    4. '```' → logprob: -11.762712478637695
    5. '                       ' → logprob: -12.887712478637695
    6. '                   ' → logprob: -13.262712478637695
    7. '              ' → logprob: -13.387712478637695
    8. '   ' → logprob: -13.387712478637695
    9. '             ' → logprob: -13.512712478637695
    10. 'return' → logprob: -13.887712478637695

Token 1058: ' results' (ID: 4376)
  Prédit: 'results'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'results' (adapté à ' results') → logprob: -0.013169762678444386
    2. ' results' → logprob: -4.513169765472412
    3. '       ' → logprob: -6.388169765472412
    4. '                   ' → logprob: -8.013169288635254
    5. '   ' → logprob: -9.888169288635254
    6. '               ' → logprob: -10.638169288635254
    7. '	results' → logprob: -10.638169288635254
    8. '                       ' → logprob: -12.263169288635254
    9. '           ' → logprob: -12.638169288635254
    10. '(results' → logprob: -15.513169288635254

Token 1059: '.append' (ID: 3709)
  Prédit: '.append'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '.append' → logprob: -0.0002905334113165736
    2. '.' → logprob: -8.250290870666504
    3. '.add' → logprob: -10.625290870666504
    4. '.app' → logprob: -12.750290870666504
    5. '.Append' → logprob: -14.375290870666504
    6. '.extend' → logprob: -14.625290870666504
    7. 'append' → logprob: -15.500290870666504
    8. ' .' → logprob: -15.625290870666504
    9. '.setdefault' → logprob: -15.625290870666504
    10. '_append' → logprob: -15.875290870666504

Token 1060: '("' (ID: 568)
  Prédit: '(path'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(path' → logprob: -0.04868876561522484
    2. 'path' → logprob: -3.0486886501312256
    3. '(' → logprob: -9.798688888549805
    4. ' path' → logprob: -10.048688888549805
    5. '('' → logprob: -13.173688888549805
    6. ' (' → logprob: -14.673688888549805
    7. '   ' → logprob: -15.798688888549805
    8. '	path' → logprob: -16.798688888549805
    9. ',path' → logprob: -17.548688888549805
    10. '(
' → logprob: -17.673688888549805

Token 1061: '".' (ID: 4050)
  Prédit: 'path'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'path' → logprob: -0.0013514261227101088
    2. '"' → logprob: -6.876351356506348
    3. '"+' → logprob: -8.376351356506348
    4. ' path' → logprob: -10.251351356506348
    5. '"path' → logprob: -10.251351356506348
    6. '".' → logprob: -11.501351356506348
    7. '""' → logprob: -12.251351356506348
    8. '"+"' → logprob: -14.251351356506348
    9. '   ' → logprob: -14.751351356506348
    10. '''.' → logprob: -15.126351356506348

Token 1062: 'join' (ID: 10891)
  Prédit: 'join'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'join' → logprob: -8.780830830801278e-05
    2. 'append' → logprob: -10.00008773803711
    3. 'path' → logprob: -10.37508773803711
    4. ' join' → logprob: -12.25008773803711
    5. '.join' → logprob: -13.37508773803711
    6. '+' → logprob: -13.37508773803711
    7. 'concat' → logprob: -14.12508773803711
    8. 'j' → logprob: -14.25008773803711
    9. '".' → logprob: -14.50008773803711
    10. '```' → logprob: -15.12508773803711

Token 1063: '(path' (ID: 10993)
  Prédit: 'path'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'path' → logprob: -0.0007394690765067935
    2. '(path' → logprob: -7.250739574432373
    3. ' path' → logprob: -10.750739097595215
    4. '[path' → logprob: -11.750739097595215
    5. '	path' → logprob: -16.62574005126953
    6. ')' → logprob: -17.12574005126953
    7. ',path' → logprob: -17.62574005126953
    8. '   ' → logprob: -17.87574005126953
    9. '[' → logprob: -17.87574005126953
    10. '_path' → logprob: -18.12574005126953

Token 1064: '))
' (ID: 2210)
  Prédit: '))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '))' → logprob: -0.09956437349319458
    2. ')' → logprob: -2.72456431388855
    3. '))
' → logprob: -3.59956431388855
    4. '+' → logprob: -6.474564552307129
    5. ')
' → logprob: -8.599564552307129
    6. '           ' → logprob: -10.724564552307129
    7. '       ' → logprob: -10.849564552307129
    8. ' +' → logprob: -10.974564552307129
    9. ')))' → logprob: -11.099564552307129
    10. ')+' → logprob: -11.224564552307129

Token 1065: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.00014489953173324466
    2. '               ' → logprob: -9.125144958496094
    3. '       ' → logprob: -10.375144958496094
    4. '		' → logprob: -12.875144958496094
    5. '```' → logprob: -14.250144958496094
    6. '	       ' → logprob: -14.375144958496094
    7. '   ' → logprob: -15.125144958496094
    8. '
' → logprob: -15.500144958496094
    9. '                   ' → logprob: -15.500144958496094
    10. '<|end|>' → logprob: -16.625144958496094

Token 1066: ' return' (ID: 622)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.012557562440633774
    2. '       ' → logprob: -4.387557506561279
    3. 'return' (adapté à ' return') → logprob: -11.012557983398438
    4. '   ' → logprob: -11.387557983398438
    5. '
' → logprob: -11.887557983398438
    6. '               ' → logprob: -12.387557983398438
    7. '		' → logprob: -12.762557983398438
    8. '	       ' → logprob: -13.637557983398438
    9. ' return' → logprob: -13.762557983398438
    10. '	return' → logprob: -13.887557983398438

Token 1067: '

' (ID: 279)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.11428294330835342
    2. '   ' → logprob: -2.3642828464508057
    3. '
' → logprob: -4.739283084869385
    4. '        
' → logprob: -5.614283084869385
    5. '    
' → logprob: -6.614283084869385
    6. '  
' → logprob: -9.614282608032227
    7. '\n' → logprob: -10.489282608032227
    8. ' 
' → logprob: -10.614282608032227
    9. '       
' → logprob: -10.739282608032227
    10. 'if' → logprob: -11.239282608032227

Token 1068: '       ' (ID: 309)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.27455902099609375
    2. '       ' → logprob: -1.7745590209960938
    3. '
' → logprob: -2.7745590209960938
    4. '    
' → logprob: -5.149559020996094
    5. '        
' → logprob: -6.149559020996094
    6. '```' → logprob: -8.649559020996094
    7. '  
' → logprob: -10.649559020996094
    8. ' 
' → logprob: -11.649559020996094
    9. '       
' → logprob: -12.524559020996094
    10. '   
' → logprob: -12.774559020996094

Token 1069: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.09406190365552902
    2. 'if' → logprob: -2.844061851501465
    3. '   ' → logprob: -3.719061851501465
    4. ' if' → logprob: -5.219061851501465
    5. '#' (adapté à ' #') → logprob: -6.594061851501465
    6. '
' → logprob: -8.719061851501465
    7. ' #' → logprob: -8.844061851501465
    8. '        
' → logprob: -9.219061851501465
    9. 'for' → logprob: -9.844061851501465
    10. '    
' → logprob: -10.594061851501465

Token 1070: ' Les' (ID: 7029)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.8139261603355408
    2. 'for' → logprob: -0.8139261603355408
    3. 'if' → logprob: -2.1889262199401855
    4. 'next' → logprob: -6.6889262199401855
    5. '   ' → logprob: -7.9389262199401855
    6. '       ' → logprob: -9.438925743103027
    7. ' #' → logprob: -11.438925743103027
    8. ' for' → logprob: -11.688925743103027
    9. '
' → logprob: -11.688925743103027
    10. '        
' → logprob: -11.938925743103027

Token 1071: ' gains' (ID: 35640)
  Prédit: ' #'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' #' → logprob: -0.6215978860855103
    2. '#' → logprob: -1.2465978860855103
    3. '   ' → logprob: -3.1215977668762207
    4. ' ' → logprob: -3.7465977668762207
    5. ' ' → logprob: -3.7465977668762207
    6. ' if' → logprob: -3.7465977668762207
    7. ' next' → logprob: -4.121597766876221
    8. ' j' → logprob: -4.871597766876221
    9. 'if' → logprob: -5.246597766876221
    10. '       ' → logprob: -5.621597766876221

Token 1072: ' possibles' (ID: 97753)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.7400462627410889
    2. ' =' → logprob: -1.6150462627410889
    3. ' possibles' → logprob: -2.365046262741089
    4. 'de' → logprob: -2.615046262741089
    5. ' d' → logprob: -2.740046262741089
    6. 'd' → logprob: -3.365046262741089
    7. 'possible' → logprob: -4.740046501159668
    8. ' possible' → logprob: -4.990046501159668
    9. '=' → logprob: -5.115046501159668
    10. ' suivants' → logprob: -5.490046501159668

Token 1073: ' pour' (ID: 1930)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.6757404804229736
    2. '
' → logprob: -2.3007404804229736
    3. ' possibles' → logprob: -2.5507404804229736
    4. '        
' → logprob: -2.9257404804229736
    5. '   ' → logprob: -3.0507404804229736
    6. ' 
' → logprob: -3.3007404804229736
    7. 'possible' → logprob: -3.4257404804229736
    8. '       ' → logprob: -3.4257404804229736
    9. ':' → logprob: -3.9257404804229736
    10. '=' → logprob: -4.3007402420043945

Token 1074: ' l' (ID: 305)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -1.1569522619247437
    2. ' '' → logprob: -1.5319522619247437
    3. ''A' → logprob: -1.9069522619247437
    4. ''' → logprob: -2.156952381134033
    5. ' j' → logprob: -2.406952381134033
    6. ' A' → logprob: -2.406952381134033
    7. 'j' → logprob: -4.531952381134033
    8. ' next' → logprob: -5.906952381134033
    9. ' joueur' → logprob: -6.156952381134033
    10. ' la' → logprob: -6.406952381134033

Token 1075: ''ét' (ID: 23771)
  Prédit: '''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ''' → logprob: -1.523074746131897
    2. 'A' → logprob: -1.648074746131897
    3. 'j' → logprob: -1.773074746131897
    4. ' joueur' → logprob: -1.898074746131897
    5. ' j' → logprob: -2.0230746269226074
    6. ''A' → logprob: -3.8980746269226074
    7. ' ' → logprob: -4.148074626922607
    8. 'a' → logprob: -4.273074626922607
    9. 'jou' → logprob: -4.273074626922607
    10. ' A' → logprob: -4.398074626922607

Token 1076: 'ape' (ID: 2480)
  Prédit: 'at'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'at' → logprob: -0.003073848783969879
    2. 'ape' → logprob: -5.878073692321777
    3. '#' → logprob: -10.378073692321777
    4. 'a' → logprob: -10.503073692321777
    5. 'tat' → logprob: -10.878073692321777
    6. 'ate' → logprob: -11.128073692321777
    7. 'ât' → logprob: -11.128073692321777
    8. '
' → logprob: -11.128073692321777
    9. '<' → logprob: -11.378073692321777
    10. '```' → logprob: -11.378073692321777

Token 1077: ' suivante' (ID: 107439)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.4201596677303314
    2. ' suivante' → logprob: -1.6701596975326538
    3. ' suivantes' → logprob: -2.6701595783233643
    4. ' suivants' → logprob: -3.6701595783233643
    5. '=' → logprob: -3.9201595783233643
    6. '       ' → logprob: -4.170159816741943
    7. ':' → logprob: -4.920159816741943
    8. ' suivant' → logprob: -5.420159816741943
    9. ' :' → logprob: -6.545159816741943
    10. '        
' → logprob: -6.545159816741943

Token 1078: ' :' (ID: 712)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.24263036251068115
    2. '   ' → logprob: -2.6176304817199707
    3. ':' → logprob: -3.1176304817199707
    4. ' if' → logprob: -3.7426304817199707
    5. '        
' → logprob: -4.367630481719971
    6. ' 
' → logprob: -4.867630481719971
    7. ',' → logprob: -4.867630481719971
    8. ':
' → logprob: -4.992630481719971
    9. ' for' → logprob: -5.117630481719971
    10. ' =' → logprob: -5.242630481719971

Token 1079: ' A' (ID: 355)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.6039377450942993
    2. '['' → logprob: -1.2289377450942993
    3. '["' → logprob: -2.4789376258850098
    4. '[
' → logprob: -3.9789376258850098
    5. ' A' → logprob: -4.47893762588501
    6. ''A' → logprob: -4.85393762588501
    7. 'if' → logprob: -4.97893762588501
    8. 'for' → logprob: -5.10393762588501
    9. ' ['' → logprob: -5.47893762588501
    10. '
' → logprob: -5.60393762588501

Token 1080: ' (' (ID: 350)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.5362582802772522
    2. ' ,' → logprob: -1.9112582206726074
    3. ' if' → logprob: -2.0362582206726074
    4. ' =' → logprob: -3.6612582206726074
    5. ',j' → logprob: -3.9112582206726074
    6. 'if' → logprob: -4.036258220672607
    7. '<|end|>' → logprob: -4.036258220672607
    8. ' (' → logprob: -4.411258220672607
    9. '=' → logprob: -4.411258220672607
    10. ' or' → logprob: -4.786258220672607

Token 1081: 'ジョ' (ID: 176394)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.7080717086791992
    2. 'j' → logprob: -1.4580717086791992
    3. ''' → logprob: -1.8330717086791992
    4. '),' → logprob: -3.708071708679199
    5. 'A' → logprob: -3.958071708679199
    6. ' j' → logprob: -4.458071708679199
    7. ' '' → logprob: -4.708071708679199
    8. '+' → logprob: -5.083071708679199
    9. ',' → logprob: -5.083071708679199
    10. ' )' → logprob: -5.583071708679199

Token 1082: 'ウ' (ID: 21225)
  Prédit: 'ウ'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ウ' → logprob: -0.23604373633861542
    2. 'u' → logprob: -2.361043691635132
    3. 'う' → logprob: -2.611043691635132
    4. 'ou' → logprob: -3.361043691635132
    5. '君' → logprob: -6.111043930053711
    6. 'ウン' → logprob: -6.861043930053711
    7. ')' → logprob: -7.486043930053711
    8. '_u' → logprob: -7.861043930053711
    9. ' u' → logprob: -8.111043930053711
    10. 'uer' → logprob: -8.486043930053711

Token 1083: '君' (ID: 82180)
  Prédit: '君'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '君' → logprob: -0.024918487295508385
    2. ')' → logprob: -3.774918556213379
    3. ' )' → logprob: -7.399918556213379
    4. '),' → logprob: -8.399918556213379
    5. '）' → logprob: -8.899918556213379
    6. ' ' → logprob: -9.274918556213379
    7. ' ,' → logprob: -9.524918556213379
    8. ' ' → logprob: -9.524918556213379
    9. 'kun' → logprob: -9.649918556213379
    10. ',' → logprob: -9.774918556213379

Token 1084: ' marque' (ID: 38644)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.9623704552650452
    2. '),' → logprob: -1.2123703956604004
    3. ' marque' → logprob: -1.9623703956604004
    4. 'mar' → logprob: -2.4623703956604004
    5. ' mar' → logprob: -2.5873703956604004
    6. ' ),' → logprob: -5.3373703956604
    7. ' )' → logprob: -5.7123703956604
    8. ',' → logprob: -5.8373703956604
    9. ' marcar' → logprob: -6.0873703956604
    10. '_mar' → logprob: -6.9623703956604

Token 1085: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.06182727962732315
    2. '),' → logprob: -2.9368271827697754
    3. ' )' → logprob: -5.311827182769775
    4. '')' → logprob: -6.936827182769775
    5. ' ),' → logprob: -7.561827182769775
    6. ',' → logprob: -8.186827659606934
    7. ''' → logprob: -9.936827659606934
    8. ' ou' → logprob: -10.061827659606934
    9. ''),' → logprob: -10.061827659606934
    10. '")' → logprob: -10.936827659606934

Token 1086: ' ou' (ID: 2031)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.8341426849365234
    2. ' if' → logprob: -1.9591426849365234
    3. '   ' → logprob: -2.2091426849365234
    4. ' ,' → logprob: -2.3341426849365234
    5. ':' → logprob: -2.8341426849365234
    6. '       ' → logprob: -3.4591426849365234
    7. ' or' → logprob: -3.7091426849365234
    8. ' =' → logprob: -3.9591426849365234
    9. 'if' → logprob: -4.084142684936523
    10. '=' → logprob: -4.834142684936523

Token 1087: ' B' (ID: 418)
  Prédit: ' B'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' B' → logprob: -0.14280247688293457
    2. 'B' → logprob: -2.0178024768829346
    3. ''' → logprob: -9.892802238464355
    4. ' ' → logprob: -10.392802238464355
    5. ' '' → logprob: -10.517802238464355
    6. ' ' → logprob: -11.267802238464355
    7. '`' → logprob: -14.017802238464355
    8. 'A' → logprob: -14.517802238464355
    9. '_B' → logprob: -14.517802238464355
    10. '"' → logprob: -14.517802238464355

Token 1088: ' (' (ID: 350)
  Prédit: ' ('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' (' → logprob: -0.20997387170791626
    2. '       ' → logprob: -2.8349738121032715
    3. ' ('' → logprob: -3.4599738121032715
    4. ' =' → logprob: -3.8349738121032715
    5. '(j' → logprob: -3.9599738121032715
    6. ' ("' → logprob: -4.0849738121032715
    7. ',' → logprob: -4.4599738121032715
    8. '   ' → logprob: -4.7099738121032715
    9. '('' → logprob: -5.4599738121032715
    10. ' if' → logprob: -5.8349738121032715

Token 1089: 'ヤ' (ID: 53852)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.8002845644950867
    2. ' B' → logprob: -1.4252846240997314
    3. ''' → logprob: -1.5502846240997314
    4. ')' → logprob: -2.6752846240997314
    5. ' '' → logprob: -4.050284385681152
    6. ' y' → logprob: -5.300284385681152
    7. ' )' → logprob: -5.800284385681152
    8. ''y' → logprob: -7.300284385681152
    9. '"B' → logprob: -7.550284385681152
    10. '')' → logprob: -7.675284385681152

Token 1090: 'エ' (ID: 23760)
  Prédit: 'エ'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'エ' → logprob: -0.00015133652777876705
    2. 'ェ' → logprob: -10.250151634216309
    3. 'E' → logprob: -10.625151634216309
    4. 'é' → logprob: -10.750151634216309
    5. '�' → logprob: -10.875151634216309
    6. 'A' → logprob: -11.000151634216309
    7. '��' → logprob: -11.625151634216309
    8. '   ' → logprob: -12.375151634216309
    9. '```' → logprob: -12.500151634216309
    10. 'え' → logprob: -12.875151634216309

Token 1091: 'さん' (ID: 14652)
  Prédit: 'エ'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'エ' → logprob: -0.644171953201294
    2. 'さん' → logprob: -0.769171953201294
    3. 'え' → logprob: -4.769171714782715
    4. 'e' → logprob: -7.144171714782715
    5. 'é' → logprob: -7.519171714782715
    6. 'es' → logprob: -7.644171714782715
    7. 'ェ' → logprob: -7.769171714782715
    8. ')' → logprob: -8.519171714782715
    9. 'er' → logprob: -9.019171714782715
    10. 'ー' → logprob: -9.769171714782715

Token 1092: ' marque' (ID: 38644)
  Prédit: ' marque'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' marque' → logprob: -0.6658998131752014
    2. 'mar' → logprob: -1.0408997535705566
    3. ' mar' → logprob: -2.1658997535705566
    4. ' score' → logprob: -5.290899753570557
    5. 'score' → logprob: -5.415899753570557
    6. ')' → logprob: -6.540899753570557
    7. 'マ' → logprob: -6.540899753570557
    8. 'が' → logprob: -7.540899753570557
    9. '_mar' → logprob: -7.540899753570557
    10. ' мар' → logprob: -7.665899753570557

Token 1093: ')
' (ID: 446)
  Prédit: '):
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.9421449899673462
    2. ')
' → logprob: -1.1921449899673462
    3. ')' → logprob: -1.3171449899673462
    4. '       ' → logprob: -3.8171448707580566
    5. '):' → logprob: -4.817144870758057
    6. '   ' → logprob: -5.192144870758057
    7. 'A' → logprob: -7.067144870758057
    8. ',' → logprob: -7.567144870758057
    9. ' )' → logprob: -8.317145347595215
    10. '):

' → logprob: -8.442145347595215

Token 1094: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.08134163171052933
    2. '        
' → logprob: -2.8313417434692383
    3. ' 
' → logprob: -4.956341743469238
    4. '    
' → logprob: -5.581341743469238
    5. '   ' → logprob: -5.831341743469238
    6. '  
' → logprob: -6.081341743469238
    7. '
' → logprob: -6.706341743469238
    8. '       
' → logprob: -8.331341743469238
    9. 'A' → logprob: -8.456341743469238
    10. '[' → logprob: -8.831341743469238

Token 1095: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.18493562936782837
    2. '
' → logprob: -2.5599355697631836
    3. '   ' → logprob: -3.5599355697631836
    4. 'if' → logprob: -3.5599355697631836
    5. 'for' → logprob: -4.184935569763184
    6. ' for' → logprob: -5.184935569763184
    7. ' if' → logprob: -5.184935569763184
    8. 'A' → logprob: -6.309935569763184
    9. '        
' → logprob: -6.434935569763184
    10. ' 
' → logprob: -6.684935569763184

Token 1096: ' On' (ID: 2160)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.739111065864563
    2. '       ' → logprob: -0.989111065864563
    3. 'if' → logprob: -2.3641109466552734
    4. '#' → logprob: -3.7391109466552734
    5. '   ' → logprob: -3.9891109466552734
    6. ' for' → logprob: -4.739110946655273
    7. ' if' → logprob: -5.489110946655273
    8. ' #' → logprob: -6.864110946655273
    9. ' ' → logprob: -9.739110946655273
    10. ' ' → logprob: -9.864110946655273

Token 1097: ' teste' (ID: 62670)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.6147655844688416
    2. ' for' → logprob: -0.8647655844688416
    3. '   ' → logprob: -4.364765644073486
    4. 'if' → logprob: -4.989765644073486
    5. '       ' → logprob: -4.989765644073486
    6. ' if' → logprob: -5.114765644073486
    7. ' can' → logprob: -6.114765644073486
    8. ' #' → logprob: -6.989765644073486
    9. '    ' → logprob: -7.364765644073486
    10. ' continue' → logprob: -7.989765644073486

Token 1098: ' A' (ID: 355)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5268953442573547
    2. ' A' → logprob: -2.15189528465271
    3. 'A' → logprob: -2.65189528465271
    4. ' '' → logprob: -2.90189528465271
    5. ' if' → logprob: -3.02689528465271
    6. ' j' → logprob: -3.27689528465271
    7. '    ' → logprob: -4.151895523071289
    8. '        ' → logprob: -4.151895523071289
    9. ' for' → logprob: -4.401895523071289
    10. '   ' → logprob: -5.026895523071289

Token 1099: ' en' (ID: 469)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.3629548251628876
    2. '   ' → logprob: -1.48795485496521
    3. ':' → logprob: -3.86295485496521
    4. ':
' → logprob: -4.487954616546631
    5. ' =' → logprob: -4.737954616546631
    6. '(j' → logprob: -4.737954616546631
    7. ' if' → logprob: -4.862954616546631
    8. ',' → logprob: -5.362954616546631
    9. ' (' → logprob: -5.612954616546631
    10. ' :' → logprob: -5.987954616546631

Token 1100: ' premier' (ID: 15506)
  Prédit: 'dfs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dfs' → logprob: -1.6225645542144775
    2. 'prior' → logprob: -1.7475645542144775
    3. 'prem' → logprob: -1.8725645542144775
    4. ' premier' → logprob: -2.2475645542144775
    5. 'if' → logprob: -2.3725645542144775
    6. '   ' → logprob: -3.6225645542144775
    7. 'aj' → logprob: -3.6225645542144775
    8. ' priorité' → logprob: -3.7475645542144775
    9. 'pro' → logprob: -3.9975645542144775
    10. 'j' → logprob: -4.122564315795898

Token 1101: ',' (ID: 11)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.01079017948359251
    2. '   ' → logprob: -5.1357903480529785
    3. ':' → logprob: -6.0107903480529785
    4. ':
' → logprob: -7.0107903480529785
    5. '        
' → logprob: -7.2607903480529785
    6. ',' → logprob: -8.01078987121582
    7. ' if' → logprob: -9.63578987121582
    8. '):
' → logprob: -9.88578987121582
    9. '    
' → logprob: -10.13578987121582
    10. ' (' → logprob: -10.26078987121582

Token 1102: ' puis' (ID: 18766)
  Prédit: ' j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' j' → logprob: -1.050273060798645
    2. '       ' → logprob: -1.175273060798645
    3. ' 
' → logprob: -2.3002729415893555
    4. ' if' → logprob: -2.5502729415893555
    5. '        
' → logprob: -3.0502729415893555
    6. 'j' → logprob: -3.3002729415893555
    7. ' ' → logprob: -3.5502729415893555
    8. 'A' → logprob: -4.9252729415893555
    9. ' ' → logprob: -5.3002729415893555
    10. '   ' → logprob: -5.3002729415893555

Token 1103: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.3874659538269043
    2. ' B' → logprob: -1.1374659538269043
    3. ' ' → logprob: -8.262466430664062
    4. ''' → logprob: -9.012466430664062
    5. ' ' → logprob: -9.387466430664062
    6. ' '' → logprob: -9.512466430664062
    7. '"' → logprob: -10.762466430664062
    8. ' "' → logprob: -11.512466430664062
    9. '"B' → logprob: -12.387466430664062
    10. '   ' → logprob: -12.762466430664062

Token 1104: ' -' (ID: 533)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.546400249004364
    2. '   ' → logprob: -1.1714003086090088
    3. '        
' → logprob: -3.171400308609009
    4. '
' → logprob: -3.921400308609009
    5. '    
' → logprob: -3.921400308609009
    6. ':' → logprob: -4.29640007019043
    7. ':
' → logprob: -5.54640007019043
    8. '  
' → logprob: -5.54640007019043
    9. ',' → logprob: -6.17140007019043
    10. ' 
' → logprob: -7.29640007019043

Token 1105: ' pour' (ID: 1930)
  Prédit: ' 
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' 
' → logprob: -1.3088276386260986
    2. '       ' → logprob: -1.4338276386260986
    3. ' ' → logprob: -2.0588276386260986
    4. '
' → logprob: -2.0588276386260986
    5. '        
' → logprob: -2.3088276386260986
    6. '    
' → logprob: -2.9338276386260986
    7. '   ' → logprob: -3.3088276386260986
    8. '     
' → logprob: -4.4338274002075195
    9. '  
' → logprob: -4.8088274002075195
    10. '            
' → logprob: -5.5588274002075195

Token 1106: ' s' (ID: 265)
  Prédit: ' garantir'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' garantir' → logprob: -1.4330575466156006
    2. ' la' → logprob: -1.8080575466156006
    3. ' assurer' → logprob: -2.0580575466156006
    4. ' lex' → logprob: -2.1830575466156006
    5. ' respecter' → logprob: -2.1830575466156006
    6. ' l' → logprob: -2.6830575466156006
    7. ' continuer' → logprob: -3.3080575466156006
    8. ' j' → logprob: -3.4330575466156006
    9. 'maint' → logprob: -4.05805778503418
    10. ' maintenir' → logprob: -4.43305778503418

Token 1107: ''assurer' (ID: 193756)
  Prédit: ''assurer'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''assurer' → logprob: -0.26791560649871826
    2. 'u' → logprob: -1.5179156064987183
    3. 'uire' → logprob: -5.017915725708008
    4. 'uite' → logprob: -5.892915725708008
    5. 'uir' → logprob: -6.142915725708008
    6. '’assurer' → logprob: -7.017915725708008
    7. 'ui' → logprob: -7.142915725708008
    8. ''avoir' → logprob: -7.517915725708008
    9. 'uit' → logprob: -7.767915725708008
    10. ''ass' → logprob: -7.892915725708008

Token 1108: ' que' (ID: 661)
  Prédit: ' de'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.6591651439666748
    2. ' d' → logprob: -1.1591651439666748
    3. ' A' → logprob: -2.159165143966675
    4. ' que' → logprob: -3.284165143966675
    5. 'A' → logprob: -6.159165382385254
    6. ''' → logprob: -6.159165382385254
    7. ' des' → logprob: -6.659165382385254
    8. ' of' → logprob: -6.659165382385254
    9. 'd' → logprob: -6.784165382385254
    10. ' du' → logprob: -6.909165382385254

Token 1109: ' les' (ID: 1341)
  Prédit: ' dfs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' dfs' → logprob: -0.6816083192825317
    2. ' path' → logprob: -0.8066083192825317
    3. ' A' → logprob: -3.681608200073242
    4. 'dfs' → logprob: -4.556608200073242
    5. 'path' → logprob: -4.931608200073242
    6. 'A' → logprob: -5.556608200073242
    7. ' ' → logprob: -8.181608200073242
    8. ' la' → logprob: -9.181608200073242
    9. ' '' → logprob: -9.181608200073242
    10. ' les' → logprob: -9.181608200073242

Token 1110: ' résultats' (ID: 48985)
  Prédit: ' path'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' path' → logprob: -0.8270588517189026
    2. ' dfs' → logprob: -1.8270587921142578
    3. 'path' → logprob: -2.702058792114258
    4. 'A' → logprob: -2.702058792114258
    5. ' A' → logprob: -2.702058792114258
    6. ' results' → logprob: -2.827058792114258
    7. 'dfs' → logprob: -2.952058792114258
    8. 'results' → logprob: -3.327058792114258
    9. ' next' → logprob: -3.952058792114258
    10. ' paths' → logprob: -4.327058792114258

Token 1111: ' sont' (ID: 5242)
  Prédit: ' soient'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' soient' → logprob: -0.46866437792778015
    2. ' continu' → logprob: -1.4686644077301025
    3. ' restent' → logprob: -2.3436644077301025
    4. '.append' → logprob: -3.7186644077301025
    5. 's' → logprob: -5.593664169311523
    6. '_' → logprob: -5.843664169311523
    7. ' s' → logprob: -5.968664169311523
    8. ' sont' → logprob: -5.968664169311523
    9. ' continue' → logprob: -6.218664169311523
    10. ' suivent' → logprob: -6.843664169311523

Token 1112: ' en' (ID: 469)
  Prédit: ' tri'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' tri' → logprob: -0.15705370903015137
    2. ' lex' → logprob: -2.5320537090301514
    3. ' sorted' → logprob: -3.9070537090301514
    4. 'tri' → logprob: -4.0320539474487305
    5. ' A' → logprob: -4.9070539474487305
    6. 'sorted' → logprob: -5.0320539474487305
    7. ' ajout' → logprob: -5.7820539474487305
    8. ' trie' → logprob: -5.9070539474487305
    9. ''' → logprob: -6.4070539474487305
    10. ' ' → logprob: -6.7820539474487305

Token 1113: ' ordre' (ID: 103061)
  Prédit: ' ordre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' ordre' → logprob: -0.4287048280239105
    2. 'ordre' → logprob: -1.553704857826233
    3. ''ordre' → logprob: -2.9287047386169434
    4. ' lex' → logprob: -3.8037047386169434
    5. 'lex' → logprob: -4.053704738616943
    6. ' order' → logprob: -4.178704738616943
    7. 'A' → logprob: -4.303704738616943
    8. ' A' → logprob: -5.053704738616943
    9. ''' → logprob: -6.178704738616943
    10. 'order' → logprob: -6.553704738616943

Token 1114: ' lex' (ID: 37772)
  Prédit: 'A'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'A' → logprob: -1.0214033126831055
    2. ' A' → logprob: -1.0214033126831055
    3. '       ' → logprob: -2.0214033126831055
    4. '   ' → logprob: -2.5214033126831055
    5. ' de' → logprob: -4.7714033126831055
    6. '(A' → logprob: -4.8964033126831055
    7. '```' → logprob: -5.2714033126831055
    8. ' if' → logprob: -5.5214033126831055
    9. ' (' → logprob: -5.6464033126831055
    10. ' for' → logprob: -5.7714033126831055

Token 1115: '.
' (ID: 558)
  Prédit: 'ic'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ic' → logprob: -0.27125152945518494
    2. 'ico' → logprob: -2.1462514400482178
    3. 'i' → logprob: -2.3962514400482178
    4. 'A' → logprob: -4.021251678466797
    5. 'o' → logprob: -4.646251678466797
    6. 'ical' → logprob: -7.646251678466797
    7. ' A' → logprob: -8.021251678466797
    8. 'e' → logprob: -8.146251678466797
    9. 'a' → logprob: -8.646251678466797
    10. ')' → logprob: -9.521251678466797

Token 1116: '       ' (ID: 309)
  Prédit: '
'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.832506537437439
    2. '       ' → logprob: -1.207506537437439
    3. '   ' → logprob: -1.832506537437439
    4. '        
' → logprob: -2.8325066566467285
    5. '    
' → logprob: -3.2075066566467285
    6. ' 
' → logprob: -5.4575066566467285
    7. '  
' → logprob: -6.4575066566467285
    8. '   
' → logprob: -8.83250617980957
    9. '\n' → logprob: -8.95750617980957
    10. '     
' → logprob: -9.20750617980957

Token 1117: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.003042481606826186
    2. '
' → logprob: -6.878042697906494
    3. '        
' → logprob: -7.003042697906494
    4. 'A' → logprob: -8.003042221069336
    5. '   ' → logprob: -8.128042221069336
    6. 'if' → logprob: -9.003042221069336
    7. ' 
' → logprob: -9.628042221069336
    8. 'for' → logprob: -9.753042221069336
    9. '    
' → logprob: -10.128042221069336
    10. ' for' → logprob: -10.253042221069336

Token 1118: ' On' (ID: 2160)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.04197609797120094
    2. 'if' → logprob: -4.041975975036621
    3. 'for' → logprob: -5.041975975036621
    4. ' if' → logprob: -5.041975975036621
    5. '   ' → logprob: -5.416975975036621
    6. ' for' → logprob: -5.791975975036621
    7. '
' → logprob: -6.041975975036621
    8. '#' → logprob: -8.166975975036621
    9. '        
' → logprob: -8.166975975036621
    10. ' ' → logprob: -10.166975975036621

Token 1119: ' vér' (ID: 42524)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.9694621562957764
    2. '   ' → logprob: -1.2194621562957764
    3. ' if' → logprob: -2.2194621562957764
    4. 'if' → logprob: -2.4694621562957764
    5. ' continue' → logprob: -3.3444621562957764
    6. 'continue' → logprob: -4.0944623947143555
    7. '    ' → logprob: -4.3444623947143555
    8. ' continues' → logprob: -4.7194623947143555
    9. ' ' → logprob: -5.0944623947143555
    10. 'contin' → logprob: -5.2194623947143555

Token 1120: 'ifie' (ID: 46409)
  Prédit: 'ifie'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ifie' → logprob: -0.00020544764993246645
    2. 'if' → logprob: -9.125205039978027
    3. 'ife' → logprob: -9.500205039978027
    4. 'ra' → logprob: -12.625205039978027
    5. 'f' → logprob: -12.875205039978027
    6. '   ' → logprob: -13.125205039978027
    7. '```' → logprob: -13.375205039978027
    8. 'ifi' → logprob: -13.500205039978027
    9. 'rie' → logprob: -13.875205039978027
    10. 'ifier' → logprob: -13.875205039978027

Token 1121: ' que' (ID: 661)
  Prédit: ' valid'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' valid' → logprob: -0.366420179605484
    2. 'valid' → logprob: -1.2414201498031616
    3. '   ' → logprob: -4.491420269012451
    4. ' if' → logprob: -5.991420269012451
    5. '(valid' → logprob: -5.991420269012451
    6. 'if' → logprob: -7.241420269012451
    7. '       ' → logprob: -8.366419792175293
    8. ' j' → logprob: -8.741419792175293
    9. ' la' → logprob: -9.116419792175293
    10. ' ' → logprob: -9.366419792175293

Token 1122: ' l' (ID: 305)
  Prédit: ' valid'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' valid' → logprob: -0.3133305609226227
    2. 'valid' → logprob: -1.3133305311203003
    3. '(valid' → logprob: -10.43833065032959
    4. '   ' → logprob: -10.93833065032959
    5. ' ' → logprob: -11.93833065032959
    6. '	valid' → logprob: -12.18833065032959
    7. ' j' → logprob: -12.31333065032959
    8. ' ' → logprob: -13.43833065032959
    9. 'j' → logprob: -13.93833065032959
    10. '_valid' → logprob: -14.31333065032959

Token 1123: ''état' (ID: 116357)
  Prédit: 'valid'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'valid' → logprob: -0.3156657814979553
    2. ' valid' → logprob: -1.3156657218933105
    3. ' j' → logprob: -6.6906657218933105
    4. 'j' → logprob: -7.4406657218933105
    5. '   ' → logprob: -8.190666198730469
    6. '(valid' → logprob: -9.065666198730469
    7. ' ' → logprob: -10.315666198730469
    8. 'not' → logprob: -10.690666198730469
    9. ' not' → logprob: -11.065666198730469
    10. '	valid' → logprob: -11.190666198730469

Token 1124: ' résult' (ID: 31657)
  Prédit: 'su'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'su' → logprob: -0.7574838995933533
    2. ' suivant' → logprob: -1.007483959197998
    3. ' suivante' → logprob: -1.882483959197998
    4. ' =' → logprob: -5.757483959197998
    5. '   ' → logprob: -6.007483959197998
    6. '       ' → logprob: -6.257483959197998
    7. ' suivants' → logprob: -6.882483959197998
    8. 's' → logprob: -7.257483959197998
    9. 'possible' → logprob: -7.507483959197998
    10. ' following' → logprob: -7.757483959197998

Token 1125: 'ant' (ID: 493)
  Prédit: 'e'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'e' → logprob: -0.26527804136276245
    2. '       ' → logprob: -1.8902781009674072
    3. '           ' → logprob: -3.2652781009674072
    4. 'ante' → logprob: -4.515277862548828
    5. 'ent' → logprob: -4.640277862548828
    6. 'ant' → logprob: -4.890277862548828
    7. '   ' → logprob: -5.015277862548828
    8. 'é' → logprob: -5.265277862548828
    9. '#' → logprob: -7.390277862548828
    10. 'du' → logprob: -7.765277862548828

Token 1126: ' est' (ID: 893)
  Prédit: ' ='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' =' → logprob: -0.653974711894989
    2. '(j' → logprob: -1.7789747714996338
    3. '       ' → logprob: -2.653974771499634
    4. '   ' → logprob: -2.903974771499634
    5. '=' → logprob: -3.403974771499634
    6. ' est' → logprob: -3.778974771499634
    7. ' !=' → logprob: -4.153974533081055
    8. ' :=' → logprob: -4.278974533081055
    9. ' (' → logprob: -4.528974533081055
    10. ' j' → logprob: -4.778974533081055

Token 1127: ' valide' (ID: 137323)
  Prédit: ' valid'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' valid' → logprob: -0.02338104508817196
    2. 'valid' → logprob: -3.773380994796753
    3. ' valide' → logprob: -9.148381233215332
    4. '_valid' → logprob: -11.398381233215332
    5. '(valid' → logprob: -12.023381233215332
    6. '	valid' → logprob: -12.148381233215332
    7. ' val' → logprob: -12.648381233215332
    8. '   ' → logprob: -13.773381233215332
    9. ' not' → logprob: -14.023381233215332
    10. 'val' → logprob: -14.273381233215332

Token 1128: ' avant' (ID: 13339)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.027071356773376465
    2. '
' → logprob: -5.027071475982666
    3. ':
' → logprob: -5.027071475982666
    4. '        
' → logprob: -5.027071475982666
    5. ':' → logprob: -5.652071475982666
    6. '   ' → logprob: -7.402071475982666
    7. ',' → logprob: -7.652071475982666
    8. ' (' → logprob: -8.402070999145508
    9. '(j' → logprob: -8.527070999145508
    10. ' =' → logprob: -8.777070999145508

Token 1129: ' d' (ID: 272)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.834860622882843
    2. '           ' → logprob: -0.834860622882843
    3. '   ' → logprob: -2.9598605632781982
    4. '(j' → logprob: -3.5848605632781982
    5. ' if' → logprob: -4.709860801696777
    6. 'if' → logprob: -4.834860801696777
    7. ':' → logprob: -4.834860801696777
    8. ':
' → logprob: -4.834860801696777
    9. ' (' → logprob: -5.834860801696777
    10. '(
' → logprob: -6.084860801696777

Token 1130: ''y' (ID: 27913)
  Prédit: ' appeler'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' appeler' → logprob: -0.6253370642662048
    2. 'app' → logprob: -1.8753371238708496
    3. '   ' → logprob: -2.2503371238708496
    4. 'aj' → logprob: -3.5003371238708496
    5. ' aller' → logprob: -3.6253371238708496
    6. 'expl' → logprob: -3.8753371238708496
    7. 'aller' → logprob: -4.50033712387085
    8. ' explorer' → logprob: -4.62533712387085
    9. 'appel' → logprob: -4.75033712387085
    10. '       ' → logprob: -4.87533712387085

Token 1131: ' aller' (ID: 18383)
  Prédit: 'aller'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'aller' → logprob: -0.0438774973154068
    2. ' aller' → logprob: -4.168877601623535
    3. 'entr' → logprob: -4.293877601623535
    4. 'all' → logprob: -4.793877601623535
    5. 'dfs' → logprob: -6.293877601623535
    6. '   ' → logprob: -6.918877601623535
    7. 'go' → logprob: -7.418877601623535
    8. 're' → logprob: -7.668877601623535
    9. 'venir' → logprob: -8.168877601623535
    10. 'expl' → logprob: -8.418877601623535

Token 1132: '.

' (ID: 364)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.009323337115347385
    2. '        
' → logprob: -5.0093231201171875
    3. '   ' → logprob: -6.7593231201171875
    4. '
' → logprob: -8.384323120117188
    5. ':
' → logprob: -8.509323120117188
    6. '    
' → logprob: -8.634323120117188
    7. ':' → logprob: -8.634323120117188
    8. ',' → logprob: -9.009323120117188
    9. ' 
' → logprob: -9.009323120117188
    10. '  
' → logprob: -9.384323120117188

Token 1133: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.5121752023696899
    2. '        
' → logprob: -1.63717520236969
    3. '
' → logprob: -2.3871750831604004
    4. '   ' → logprob: -3.2621750831604004
    5. '    
' → logprob: -3.2621750831604004
    6. ' 
' → logprob: -3.6371750831604004
    7. '  
' → logprob: -4.7621750831604
    8. '   
' → logprob: -7.0121750831604
    9. '       
' → logprob: -7.2621750831604
    10. '     
' → logprob: -7.3871750831604

Token 1134: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.1302943378686905
    2. 'if' → logprob: -2.2552943229675293
    3. ' if' → logprob: -4.755294322967529
    4. '
' → logprob: -5.505294322967529
    5. '   ' → logprob: -6.255294322967529
    6. 'for' → logprob: -6.505294322967529
    7. '        
' → logprob: -7.755294322967529
    8. 'next' → logprob: -8.130294799804688
    9. ' for' → logprob: -9.130294799804688
    10. 'j' → logprob: -9.255294799804688

Token 1135: ' A' (ID: 355)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.4844835102558136
    2. '       ' → logprob: -1.3594834804534912
    3. 'for' → logprob: -2.359483480453491
    4. ' if' → logprob: -4.10948371887207
    5. '   ' → logprob: -4.35948371887207
    6. '#' → logprob: -6.23448371887207
    7. ' for' → logprob: -6.85948371887207
    8. 'next' → logprob: -8.48448371887207
    9. ' ' → logprob: -9.23448371887207
    10. 'j' → logprob: -9.85948371887207

Token 1136: ' marque' (ID: 38644)
  Prédit: '_j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '_j' → logprob: -0.8520492315292358
    2. '_next' → logprob: -0.8520492315292358
    3. 'if' → logprob: -2.8520493507385254
    4. '_new' → logprob: -3.7270493507385254
    5. 'next' → logprob: -4.352049350738525
    6. '
' → logprob: -4.477049350738525
    7. 'j' → logprob: -4.977049350738525
    8. ' if' → logprob: -5.102049350738525
    9. '   ' → logprob: -5.477049350738525
    10. '       ' → logprob: -5.602049350738525

Token 1137: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.024693353101611137
    2. '   ' → logprob: -4.524693489074707
    3. ':
' → logprob: -4.899693489074707
    4. '
' → logprob: -5.649693489074707
    5. ' if' → logprob: -7.274693489074707
    6. ':' → logprob: -7.274693489074707
    7. ',' → logprob: -8.274693489074707
    8. '):
' → logprob: -8.524693489074707
    9. ' :
' → logprob: -8.774693489074707
    10. 'if' → logprob: -9.024693489074707

Token 1138: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.29179152846336365
    2. '   ' → logprob: -2.7917914390563965
    3. ' if' → logprob: -2.7917914390563965
    4. 'if' → logprob: -3.2917914390563965
    5. ':
' → logprob: -4.0417914390563965
    6. ',' → logprob: -4.1667914390563965
    7. '
' → logprob: -4.2917914390563965
    8. '           ' → logprob: -4.7917914390563965
    9. '(j' → logprob: -5.0417914390563965
    10. ',
' → logprob: -5.1667914390563965

Token 1139: ' j' (ID: 441)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.3426714241504669
    2. ' if' → logprob: -1.5926713943481445
    3. '       ' → logprob: -2.4676713943481445
    4. 'j' (adapté à ' j') → logprob: -7.0926713943481445
    5. 'nj' → logprob: -7.4676713943481445
    6. 'next' → logprob: -7.8426713943481445
    7. ' j' → logprob: -10.217671394348145
    8. 'new' → logprob: -10.467671394348145
    9. '   ' → logprob: -10.842671394348145
    10. ' next' → logprob: -10.967671394348145

Token 1140: '_next' (ID: 25436)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.7218256592750549
    2. '_new' → logprob: -1.2218255996704102
    3. '_next' → logprob: -1.8468255996704102
    4. ' +' → logprob: -3.34682559967041
    5. '_plus' → logprob: -4.22182559967041
    6. ' +=' → logprob: -4.97182559967041
    7. '+=' → logprob: -5.72182559967041
    8. '1' → logprob: -7.09682559967041
    9. '2' → logprob: -9.09682559967041
    10. 'new' → logprob: -9.34682559967041

Token 1141: ' =' (ID: 314)
  Prédit: '+'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '+' → logprob: -0.640061616897583
    2. '=' → logprob: -1.640061616897583
    3. '+=' → logprob: -2.140061616897583
    4. ' +' → logprob: -2.765061616897583
    5. ' +=' → logprob: -3.015061616897583
    6. ' =' → logprob: -3.140061616897583
    7. '=j' → logprob: -6.140061378479004
    8. '   ' → logprob: -6.265061378479004
    9. '+j' → logprob: -7.140061378479004
    10. ',' → logprob: -7.265061378479004

Token 1142: ' j' (ID: 441)
  Prédit: 'j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.00012415809032972902
    2. ' j' → logprob: -9.000123977661133
    3. '   ' → logprob: -14.375123977661133
    4. '	j' → logprob: -16.000123977661133
    5. '_j' → logprob: -21.500123977661133
    6. '    ' → logprob: -21.625123977661133
    7. '```' → logprob: -21.875123977661133
    8. '$j' → logprob: -21.875123977661133
    9. ' ' → logprob: -22.500123977661133
    10. ',j' → logprob: -22.500123977661133

Token 1143: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.10020699352025986
    2. '+' → logprob: -2.3502070903778076
    3. '   ' → logprob: -15.975207328796387
    4. '＋' → logprob: -16.10020637512207
    5. ' +
' → logprob: -16.60020637512207
    6. '+
' → logprob: -16.97520637512207
    7. '+j' → logprob: -16.97520637512207
    8. '
' → logprob: -19.47520637512207
    9. ' ' → logprob: -19.72520637512207
    10. ' ' → logprob: -19.85020637512207

Token 1144: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.676292231422849e-05
    2. ' ' → logprob: -11.000017166137695
    3. '   ' → logprob: -17.375017166137695
    4. '```' → logprob: -20.750017166137695
    5. '       ' → logprob: -21.875017166137695
    6. '  ' → logprob: -22.375017166137695
    7. '           ' → logprob: -22.500017166137695
    8. '１' → logprob: -23.000017166137695
    9. '
' → logprob: -23.250017166137695
    10. '=' → logprob: -24.000017166137695

Token 1145: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -6.704273118884885e-07
    2. ' ' → logprob: -14.375000953674316
    3. '   ' → logprob: -18.125
    4. '```' → logprob: -19.875
    5. 'def' → logprob: -20.375
    6. 'A' → logprob: -21.5
    7. '  ' → logprob: -21.875
    8. '
' → logprob: -22.75
    9. '       ' → logprob: -23.0
    10. '１' → logprob: -23.0625

Token 1146: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.2551344633102417
    2. '
' → logprob: -1.7551344633102417
    3. ' if' → logprob: -3.3801345825195312
    4. 'if' → logprob: -5.255134582519531
    5. '<|end|>' → logprob: -5.380134582519531
    6. '        
' → logprob: -6.005134582519531
    7. ' 
' → logprob: -6.505134582519531
    8. '	if' → logprob: -7.255134582519531
    9. '        ' → logprob: -7.505134582519531
    10. '   ' → logprob: -7.755134582519531

Token 1147: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.024312498047947884
    2. ' if' → logprob: -4.274312496185303
    3. 'if' → logprob: -4.774312496185303
    4. '        
' → logprob: -8.024312973022461
    5. '<|end|>' → logprob: -8.024312973022461
    6. '	if' → logprob: -8.399312973022461
    7. '
' → logprob: -8.649312973022461
    8. '	' → logprob: -8.649312973022461
    9. '        ' → logprob: -9.524312973022461
    10. ',' → logprob: -9.899312973022461

Token 1148: ' y' (ID: 342)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.46131715178489685
    2. ' if' → logprob: -1.0863171815872192
    3. '       ' → logprob: -3.4613170623779297
    4. 'y' (adapté à ' y') → logprob: -7.83631706237793
    5. ' y' → logprob: -8.46131706237793
    6. '        ' → logprob: -10.33631706237793
    7. '	if' → logprob: -10.96131706237793
    8. ' ' → logprob: -11.21131706237793
    9. ',y' → logprob: -12.08631706237793
    10. '        
' → logprob: -12.08631706237793

Token 1149: '_next' (ID: 25436)
  Prédit: '_next'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_next' → logprob: -0.044913556426763535
    2. '<|end|>' → logprob: -4.0449137687683105
    3. '<|end|>' → logprob: -4.4199137687683105
    4. ',' → logprob: -5.5449137687683105
    5. '=' → logprob: -5.5449137687683105
    6. '_NEXT' → logprob: -6.5449137687683105
    7. 'next' → logprob: -7.2949137687683105
    8. 'y' → logprob: -7.2949137687683105
    9. ' =' → logprob: -7.2949137687683105
    10. ' next' → logprob: -7.6699137687683105

Token 1150: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.4809418022632599
    2. ' =' → logprob: -0.9809417724609375
    3. ',' → logprob: -5.1059417724609375
    4. '=y' → logprob: -8.605941772460938
    5. '   ' → logprob: -9.105941772460938
    6. '       ' → logprob: -9.355941772460938
    7. '<|end|>' → logprob: -9.480941772460938
    8. ' ' → logprob: -9.730941772460938
    9. ' y' → logprob: -9.980941772460938
    10. '<|end|>' → logprob: -10.230941772460938

Token 1151: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.002476604888215661
    2. ' y' → logprob: -6.002476692199707
    3. '       ' → logprob: -14.752476692199707
    4. '	y' → logprob: -14.877476692199707
    5. '   ' → logprob: -16.00247573852539
    6. '           ' → logprob: -16.50247573852539
    7. '    ' → logprob: -18.50247573852539
    8. '        ' → logprob: -19.25247573852539
    9. ' ' → logprob: -19.25247573852539
    10. '     ' → logprob: -19.62747573852539

Token 1152: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.10847202688455582
    2. ',' → logprob: -3.2334721088409424
    3. '        ' → logprob: -4.233471870422363
    4. '<|end|>' → logprob: -4.233471870422363
    5. '	       ' → logprob: -5.108471870422363
    6. 'y' → logprob: -5.358471870422363
    7. '<|end|>' → logprob: -5.858471870422363
    8. ' y' → logprob: -6.233471870422363
    9. '	' → logprob: -6.233471870422363
    10. '    	' → logprob: -6.358471870422363

Token 1153: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.00024323153775185347
    2. 'if' → logprob: -9.250243186950684
    3. ' if' → logprob: -9.250243186950684
    4. '   ' → logprob: -10.500243186950684
    5. '
' → logprob: -11.500243186950684
    6. '        
' → logprob: -12.375243186950684
    7. '<|end|>' → logprob: -13.250243186950684
    8. '	' → logprob: -13.375243186950684
    9. '           ' → logprob: -13.625243186950684
    10. '	if' → logprob: -14.250243186950684

Token 1154: ' if' (ID: 538)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.11308062076568604
    2. 'if' (adapté à ' if') → logprob: -2.3630805015563965
    3. ' if' → logprob: -4.3630805015563965
    4. '
' → logprob: -11.238080978393555
    5. ' ' → logprob: -11.363080978393555
    6. '	if' → logprob: -11.863080978393555
    7. '   ' → logprob: -11.988080978393555
    8. '        
' → logprob: -12.363080978393555
    9. '	' → logprob: -12.613080978393555
    10. '           ' → logprob: -13.613080978393555

Token 1155: ' valid' (ID: 4529)
  Prédit: 'valid'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'valid' → logprob: -0.5759424567222595
    2. ' valid' → logprob: -0.8259424567222595
    3. '	valid' → logprob: -13.700942039489746
    4. '(valid' → logprob: -13.825942039489746
    5. '   ' → logprob: -14.700942039489746
    6. ' j' → logprob: -16.075942993164062
    7. '_valid' → logprob: -16.325942993164062
    8. '.valid' → logprob: -16.325942993164062
    9. 'j' → logprob: -16.700942993164062
    10. 'Valid' → logprob: -17.075942993164062

Token 1156: '_state' (ID: 9479)
  Prédit: '_state'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_state' → logprob: -3.128163257315464e-07
    2. '_' → logprob: -15.75
    3. ' _' → logprob: -17.375
    4. '_State' → logprob: -17.75
    5. '_stat' → logprob: -18.25
    6. '_next' → logprob: -18.375
    7. '_states' → logprob: -19.125
    8. '\' → logprob: -19.125
    9. '_STATE' → logprob: -19.25
    10. '_status' → logprob: -19.875

Token 1157: '(j' (ID: 4997)
  Prédit: '(j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(j' → logprob: -6.313314952421933e-05
    2. '(' → logprob: -9.750062942504883
    3. ' (' → logprob: -12.375062942504883
    4. 'j' → logprob: -15.375062942504883
    5. '(
' → logprob: -16.000062942504883
    6. ')' → logprob: -16.500062942504883
    7. '   ' → logprob: -16.500062942504883
    8. '((' → logprob: -18.250062942504883
    9. '	j' → logprob: -18.750062942504883
    10. ' j' → logprob: -18.875062942504883

Token 1158: '_next' (ID: 25436)
  Prédit: '_next'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_next' → logprob: -9.353008499601856e-05
    2. ',' → logprob: -10.125093460083008
    3. '+' → logprob: -10.250093460083008
    4. ' +' → logprob: -12.250093460083008
    5. 'next' → logprob: -12.375093460083008
    6. ',next' → logprob: -12.750093460083008
    7. 'Next' → logprob: -13.875093460083008
    8. '_j' → logprob: -13.875093460083008
    9. '_,' → logprob: -14.250093460083008
    10. '   ' → logprob: -14.250093460083008

Token 1159: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0010286426404491067
    2. ' ,' → logprob: -7.126028537750244
    3. ',y' → logprob: -8.626029014587402
    4. ',j' → logprob: -10.501029014587402
    5. ',
' → logprob: -11.251029014587402
    6. ')' → logprob: -13.751029014587402
    7. 'y' → logprob: -14.626029014587402
    8. ',user' → logprob: -14.876029014587402
    9. '‌,' → logprob: -15.001029014587402
    10. '   ' → logprob: -15.251029014587402

Token 1160: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.038043901324272156
    2. ' y' → logprob: -3.288043975830078
    3. '   ' → logprob: -13.663043975830078
    4. '	y' → logprob: -14.288043975830078
    5. '    ' → logprob: -15.538043975830078
    6. '       ' → logprob: -15.913043975830078
    7. ' ' → logprob: -16.038043975830078
    8. '     ' → logprob: -16.538043975830078
    9. '  ' → logprob: -17.163043975830078
    10. ' ' → logprob: -17.663043975830078

Token 1161: '_next' (ID: 25436)
  Prédit: '_next'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_next' → logprob: -0.35808390378952026
    2. ',' → logprob: -1.608083963394165
    3. '+' → logprob: -2.608083963394165
    4. ' +' → logprob: -4.983083724975586
    5. 'Next' → logprob: -5.358083724975586
    6. ')' → logprob: -5.733083724975586
    7. ',next' → logprob: -5.733083724975586
    8. '_NEXT' → logprob: -5.983083724975586
    9. ' ,' → logprob: -6.108083724975586
    10. '   ' → logprob: -6.233083724975586

Token 1162: '):
' (ID: 1883)
  Prédit: '):
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.02314123325049877
    2. '):' → logprob: -4.148141384124756
    3. ')' → logprob: -5.148141384124756
    4. '       ' → logprob: -6.898141384124756
    5. ' ):
' → logprob: -9.273140907287598
    6. '):
' → logprob: -9.648140907287598
    7. '   ' → logprob: -9.773140907287598
    8. '           ' → logprob: -11.273140907287598
    9. '):

' → logprob: -11.273140907287598
    10. ' and' → logprob: -11.523140907287598

Token 1163: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.20211151242256165
    2. '       ' → logprob: -1.7021114826202393
    3. ' ' → logprob: -8.95211124420166
    4. ':' → logprob: -9.20211124420166
    5. ':
' → logprob: -9.20211124420166
    6. '        ' → logprob: -9.57711124420166
    7. '          ' → logprob: -10.07711124420166
    8. '	       ' → logprob: -10.20211124420166
    9. ' and' → logprob: -10.57711124420166
    10. '        
' → logprob: -10.70211124420166

Token 1164: ' dfs' (ID: 51252)
  Prédit: '           '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.68039470911026
    2. 'path' → logprob: -0.93039470911026
    3. '       ' → logprob: -2.4303946495056152
    4. 'dfs' (adapté à ' dfs') → logprob: -5.180394649505615
    5. ' path' → logprob: -5.930394649505615
    6. '   ' → logprob: -6.805394649505615
    7. '	       ' → logprob: -7.680394649505615
    8. ' dfs' → logprob: -8.805395126342773
    9. '               ' → logprob: -8.930395126342773
    10. ' ' → logprob: -9.055395126342773

Token 1165: '(j' (ID: 4997)
  Prédit: '(j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(j' → logprob: -0.0003424951864872128
    2. '(' → logprob: -8.12534236907959
    3. ' (' → logprob: -10.00034236907959
    4. '(
' → logprob: -14.75034236907959
    5. 'j' → logprob: -15.50034236907959
    6. '((' → logprob: -15.87534236907959
    7. '   ' → logprob: -16.000343322753906
    8. ' j' → logprob: -16.375343322753906
    9. '	j' → logprob: -17.500343322753906
    10. ' ' → logprob: -17.625343322753906

Token 1166: '_next' (ID: 25436)
  Prédit: '_next'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_next' → logprob: -0.00024846551241353154
    2. ',' → logprob: -8.500248908996582
    3. 'next' → logprob: -11.125248908996582
    4. '+' → logprob: -11.125248908996582
    5. ',next' → logprob: -12.625248908996582
    6. ',j' → logprob: -12.750248908996582
    7. 'Next' → logprob: -12.750248908996582
    8. '_NEXT' → logprob: -13.250248908996582
    9. '   ' → logprob: -13.500248908996582
    10. ' next' → logprob: -13.625248908996582

Token 1167: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0009757821680977941
    2. ' ,' → logprob: -7.125975608825684
    3. ',y' → logprob: -8.750975608825684
    4. '   ' → logprob: -12.500975608825684
    5. '           ' → logprob: -13.250975608825684
    6. '	' → logprob: -13.625975608825684
    7. ',j' → logprob: -13.750975608825684
    8. '       ' → logprob: -14.000975608825684
    9. ',
' → logprob: -14.375975608825684
    10. '		' → logprob: -14.500975608825684

Token 1168: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.0052342405542731285
    2. ' y' → logprob: -5.255234241485596
    3. '           ' → logprob: -16.005233764648438
    4. '    ' → logprob: -16.380233764648438
    5. '   ' → logprob: -16.755233764648438
    6. '	y' → logprob: -16.755233764648438
    7. '            ' → logprob: -17.505233764648438
    8. '        ' → logprob: -18.005233764648438
    9. '       ' → logprob: -18.505233764648438
    10. '          ' → logprob: -18.755233764648438

Token 1169: '_next' (ID: 25436)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.5164717435836792
    2. '_next' → logprob: -1.3914717435836792
    3. ',y' → logprob: -2.8914718627929688
    4. ' y' → logprob: -3.1414718627929688
    5. 'y' → logprob: -3.7664718627929688
    6. ',path' → logprob: -4.141471862792969
    7. ' ,' → logprob: -5.266471862792969
    8. ',next' → logprob: -5.391471862792969
    9. 'next' → logprob: -6.016471862792969
    10. ' next' → logprob: -6.141471862792969

Token 1170: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0019150725565850735
    2. ',path' → logprob: -6.876914978027344
    3. ' ,' → logprob: -7.626914978027344
    4. '   ' → logprob: -8.001914978027344
    5. '(path' → logprob: -11.126914978027344
    6. '           ' → logprob: -11.251914978027344
    7. '       ' → logprob: -11.376914978027344
    8. 'path' → logprob: -11.751914978027344
    9. ',p' → logprob: -12.751914978027344
    10. '	' → logprob: -13.126914978027344

Token 1171: ' path' (ID: 3104)
  Prédit: ' path'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' path' → logprob: -0.07889121770858765
    2. 'path' → logprob: -2.5788912773132324
    3. '   ' → logprob: -14.078890800476074
    4. '[path' → logprob: -15.328890800476074
    5. '    ' → logprob: -15.703890800476074
    6. '	path' → logprob: -16.45389175415039
    7. '(path' → logprob: -16.70389175415039
    8. '           ' → logprob: -16.82889175415039
    9. '       ' → logprob: -16.82889175415039
    10. ' ' → logprob: -17.70389175415039

Token 1172: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.10023168474435806
    2. '+' → logprob: -2.350231647491455
    3. '+[' → logprob: -10.850232124328613
    4. '           ' → logprob: -13.600232124328613
    5. '   ' → logprob: -13.600232124328613
    6. '    ' → logprob: -14.225232124328613
    7. '       ' → logprob: -14.475232124328613
    8. '            ' → logprob: -14.475232124328613
    9. '        ' → logprob: -14.725232124328613
    10. '＋' → logprob: -14.850232124328613

Token 1173: ' ['' (ID: 5140)
  Prédit: '[''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '['' → logprob: -0.02325083687901497
    2. '["' → logprob: -3.7732508182525635
    3. ' ['' → logprob: -12.898250579833984
    4. '"A' → logprob: -13.273250579833984
    5. ''A' → logprob: -13.773250579833984
    6. '[A' → logprob: -16.398250579833984
    7. ' ["' → logprob: -17.273250579833984
    8. '(['' → logprob: -17.648250579833984
    9. '('' → logprob: -17.773250579833984
    10. '[' → logprob: -18.023250579833984

Token 1174: 'A' (ID: 32)
  Prédit: 'A'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'A' → logprob: -0.6939049959182739
    2. ''A' → logprob: -0.6939049959182739
    3. '"A' → logprob: -7.193904876708984
    4. '’A' → logprob: -12.443904876708984
    5. ''a' → logprob: -13.443904876708984
    6. '('' → logprob: -15.568904876708984
    7. ''' → logprob: -15.693904876708984
    8. ' A' → logprob: -15.818904876708984
    9. ' '' → logprob: -15.818904876708984
    10. '`' → logprob: -15.943904876708984

Token 1175: ''])

' (ID: 57615)
  Prédit: ''])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''])' → logprob: -0.000400521676056087
    2. ''])
' → logprob: -8.00040054321289
    3. '']' → logprob: -10.25040054321289
    4. ''])

' → logprob: -11.00040054321289
    5. '"])' → logprob: -12.37540054321289
    6. ''' → logprob: -13.00040054321289
    7. ')' → logprob: -13.00040054321289
    8. '])' → logprob: -13.00040054321289
    9. '']);' → logprob: -14.25040054321289
    10. '']))' → logprob: -14.87540054321289

Token 1176: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.03820982575416565
    2. '
' → logprob: -3.288209915161133
    3. '   ' → logprob: -9.163209915161133
    4. '        
' → logprob: -10.038209915161133
    5. '```' → logprob: -11.163209915161133
    6. '
' → logprob: -12.663209915161133
    7. '    
' → logprob: -13.288209915161133
    8. '            
' → logprob: -15.788209915161133
    9. '           ' → logprob: -15.788209915161133
    10. '#' → logprob: -16.038209915161133

Token 1177: ' #' (ID: 1069)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.12160728871822357
    2. '#' (adapté à ' #') → logprob: -2.3716073036193848
    3. 'y' → logprob: -3.9966073036193848
    4. '   ' → logprob: -6.371607303619385
    5. '```' → logprob: -7.621607303619385
    6. ' #' → logprob: -7.996607303619385
    7. 'b' → logprob: -9.246606826782227
    8. '        
' → logprob: -10.371606826782227
    9. '	' → logprob: -10.496606826782227
    10. ' y' → logprob: -10.746606826782227

Token 1178: ' B' (ID: 418)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.0907783955335617
    2. 'B' → logprob: -3.215778350830078
    3. '   ' → logprob: -3.465778350830078
    4. 'b' → logprob: -4.840778350830078
    5. ' y' → logprob: -5.215778350830078
    6. ' ' → logprob: -6.965778350830078
    7. '       ' → logprob: -7.340778350830078
    8. ' B' → logprob: -8.465778350830078
    9. '#' → logprob: -8.590778350830078
    10. '	y' → logprob: -10.340778350830078

Token 1179: ' marque' (ID: 38644)
  Prédit: ' marque'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' marque' → logprob: -0.37169715762138367
    2. '_next' → logprob: -1.746697187423706
    3. '_mark' → logprob: -2.371697187423706
    4. ' mar' → logprob: -3.996697187423706
    5. '_mar' → logprob: -4.871696949005127
    6. 'mar' → logprob: -5.121696949005127
    7. ' mark' → logprob: -5.496696949005127
    8. 'mark' → logprob: -5.621696949005127
    9. ' marcar' → logprob: -6.996696949005127
    10. '_marks' → logprob: -7.246696949005127

Token 1180: '
' (ID: 198)
  Prédit: '
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '
' → logprob: -0.9610597491264343
    2. 'y' → logprob: -1.086059808731079
    3. ' y' → logprob: -1.711059808731079
    4. ' =' → logprob: -3.461059808731079
    5. 'j' → logprob: -4.2110595703125
    6. '=' → logprob: -4.3360595703125
    7. 'b' → logprob: -4.3360595703125
    8. '	y' → logprob: -5.0860595703125
    9. ',' → logprob: -5.7110595703125
    10. '  
' → logprob: -5.8360595703125

Token 1181: '       ' (ID: 309)
  Prédit: ' y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.14578233659267426
    2. 'y' → logprob: -3.020782232284546
    3. '       ' → logprob: -3.020782232284546
    4. 'j' → logprob: -4.895782470703125
    5. ' j' → logprob: -5.020782470703125
    6. '   ' → logprob: -5.020782470703125
    7. '
' → logprob: -5.145782470703125
    8. ' =' → logprob: -5.270782470703125
    9. '        
' → logprob: -6.395782470703125
    10. 'b' → logprob: -6.895782470703125

Token 1182: ' j' (ID: 441)
  Prédit: ' y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.11282677948474884
    2. 'y' → logprob: -2.2378268241882324
    3. '	y' → logprob: -13.612826347351074
    4. 'j' (adapté à ' j') → logprob: -14.112826347351074
    5. 'b' → logprob: -14.237826347351074
    6. '   ' → logprob: -14.737826347351074
    7. ' ' → logprob: -15.487826347351074
    8. ' j' → logprob: -15.737826347351074
    9. ' ' → logprob: -15.862826347351074
    10. ''y' → logprob: -16.11282730102539

Token 1183: '_next' (ID: 25436)
  Prédit: '_next'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_next' → logprob: -1.0280383548888494e-06
    2. 'next' → logprob: -14.750000953674316
    3. '_NEXT' → logprob: -14.875000953674316
    4. 'Next' → logprob: -16.250001907348633
    5. '+' → logprob: -16.750001907348633
    6. ' next' → logprob: -17.875001907348633
    7. '   ' → logprob: -18.625001907348633
    8. '	next' → logprob: -18.625001907348633
    9. '[next' → logprob: -19.750001907348633
    10. '
' → logprob: -20.000001907348633

Token 1184: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.4742313325405121
    2. ' =' → logprob: -0.9742313623428345
    3. ',' → logprob: -9.349231719970703
    4. '   ' → logprob: -9.849231719970703
    5. '=j' → logprob: -11.599231719970703
    6. '	' → logprob: -13.224231719970703
    7. ' ' → logprob: -13.599231719970703
    8. ' ,' → logprob: -14.474231719970703
    9. '    ' → logprob: -14.599231719970703
    10. ',j' → logprob: -14.849231719970703

Token 1185: ' j' (ID: 441)
  Prédit: 'j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.0067161982879042625
    2. ' j' → logprob: -5.006716251373291
    3. '	j' → logprob: -14.131715774536133
    4. '   ' → logprob: -15.756715774536133
    5. 'y' → logprob: -17.381715774536133
    6. '$j' → logprob: -17.881715774536133
    7. '=j' → logprob: -18.631715774536133
    8. ' ' → logprob: -19.131715774536133
    9. '<|end|>' → logprob: -19.131715774536133
    10. '```' → logprob: -19.256715774536133

Token 1186: '
' (ID: 198)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ',' → logprob: -0.3980201780796051
    2. '   ' → logprob: -1.1480201482772827
    3. ' ,' → logprob: -5.398020267486572
    4. '       ' → logprob: -6.148020267486572
    5. '	' → logprob: -7.023020267486572
    6. 'j' → logprob: -7.148020267486572
    7. ' ' → logprob: -7.148020267486572
    8. ' y' → logprob: -7.773020267486572
    9. 'y' → logprob: -7.898020267486572
    10. ',j' → logprob: -8.273019790649414

Token 1187: '       ' (ID: 309)
  Prédit: ' +'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.3633871078491211
    2. '+' → logprob: -1.488387107849121
    3. '_next' → logprob: -2.613387107849121
    4. ' +=' → logprob: -5.988387107849121
    5. ',' → logprob: -6.988387107849121
    6. '   ' → logprob: -7.113387107849121
    7. ' y' → logprob: -7.613387107849121
    8. ' =' → logprob: -8.613387107849121
    9. 'Next' → logprob: -8.863387107849121
    10. '+=' → logprob: -8.988387107849121

Token 1188: ' y' (ID: 342)
  Prédit: ' y'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' y' → logprob: -0.12692883610725403
    2. 'y' (adapté à ' y') → logprob: -2.1269288063049316
    3. '	y' → logprob: -14.37692928314209
    4. '   ' → logprob: -16.001928329467773
    5. '    ' → logprob: -16.001928329467773
    6. ' =' → logprob: -18.251928329467773
    7. '_y' → logprob: -18.501928329467773
    8. '       ' → logprob: -19.001928329467773
    9. '=' → logprob: -19.126928329467773
    10. ',y' → logprob: -19.251928329467773

Token 1189: '_next' (ID: 25436)
  Prédit: '_next'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_next' → logprob: -3.650518920039758e-06
    2. 'next' → logprob: -13.000003814697266
    3. 'Next' → logprob: -14.375003814697266
    4. '+' → logprob: -14.750003814697266
    5. '_NEXT' → logprob: -15.500003814697266
    6. ' next' → logprob: -16.625003814697266
    7. '+=' → logprob: -17.375003814697266
    8. ' +' → logprob: -17.500003814697266
    9. ' +=' → logprob: -18.250003814697266
    10. '	next' → logprob: -18.625003814697266

Token 1190: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.5768276453018188
    2. ' =' → logprob: -0.8268276453018188
    3. '+' → logprob: -7.951827526092529
    4. ' +=' → logprob: -8.576828002929688
    5. '+=' → logprob: -8.826828002929688
    6. ' +' → logprob: -8.951828002929688
    7. ' y' → logprob: -9.951828002929688
    8. 'y' → logprob: -11.701828002929688
    9. '   ' → logprob: -11.826828002929688
    10. '=y' → logprob: -12.076828002929688

Token 1191: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.0015023599844425917
    2. ' y' → logprob: -6.501502513885498
    3. '	y' → logprob: -17.251502990722656
    4. '   ' → logprob: -17.376502990722656
    5. '(y' → logprob: -21.001502990722656
    6. '       ' → logprob: -22.001502990722656
    7. ''y' → logprob: -22.751502990722656
    8. '           ' → logprob: -23.126502990722656
    9. 'y's' → logprob: -23.126502990722656
    10. ' ' → logprob: -23.251502990722656

Token 1192: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.04875756800174713
    2. '+' → logprob: -3.048757553100586
    3. ' +=' → logprob: -9.423757553100586
    4. '   ' → logprob: -9.798757553100586
    5. ' =' → logprob: -11.548757553100586
    6. '+=' → logprob: -11.798757553100586
    7. '       ' → logprob: -12.048757553100586
    8. ' ' → logprob: -12.423757553100586
    9. ' +
' → logprob: -13.798757553100586
    10. '＋' → logprob: -14.298757553100586

Token 1193: ' ' (ID: 220)
  Prédit: '1'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -1.318681188422488e-05
    2. ' ' → logprob: -11.25001335144043
    3. '   ' → logprob: -16.50001335144043
    4. '```' → logprob: -19.25001335144043
    5. '       ' → logprob: -20.75001335144043
    6. '+' → logprob: -20.87501335144043
    7. '[' → logprob: -21.12501335144043
    8. '１' → logprob: -21.62501335144043
    9. ' ' → logprob: -21.75001335144043
    10. '           ' → logprob: -21.87501335144043

Token 1194: '1' (ID: 16)
  Prédit: '1'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '1' → logprob: -5.438573680294212e-06
    2. ' ' → logprob: -12.125005722045898
    3. '   ' → logprob: -20.6250057220459
    4. '+' → logprob: -21.8750057220459
    5. '```' → logprob: -22.5000057220459
    6. '１' → logprob: -23.0000057220459
    7. '۱' → logprob: -23.5000057220459
    8. '  ' → logprob: -23.6250057220459
    9. ' ' → logprob: -24.2500057220459
    10. '0' → logprob: -24.2500057220459

Token 1195: '
' (ID: 198)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.024220112711191177
    2. '   ' → logprob: -3.7742202281951904
    3. ' if' → logprob: -7.774219989776611
    4. '<|end|>' → logprob: -8.27422046661377
    5. 'if' → logprob: -9.52422046661377
    6. '```' → logprob: -9.77422046661377
    7. '<|end|>' → logprob: -9.89922046661377
    8. ',' → logprob: -10.02422046661377
    9. '           ' → logprob: -10.89922046661377
    10. '
' → logprob: -11.52422046661377

Token 1196: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.0777643620967865
    2. '   ' → logprob: -2.7027642726898193
    3. ' if' → logprob: -5.202764511108398
    4. 'if' → logprob: -6.452764511108398
    5. '```' → logprob: -8.577764511108398
    6. '           ' → logprob: -8.702764511108398
    7. ',' → logprob: -8.952764511108398
    8. '     ' → logprob: -9.952764511108398
    9. '    ' → logprob: -10.077764511108398
    10. '<|end|>' → logprob: -10.327764511108398

Token 1197: ' if' (ID: 538)
  Prédit: ' if'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' if' → logprob: -0.16025246679782867
    2. 'if' (adapté à ' if') → logprob: -1.9102524518966675
    3. ' valid' → logprob: -11.035252571105957
    4. '   ' → logprob: -11.535252571105957
    5. '       ' → logprob: -13.285252571105957
    6. 'valid' → logprob: -15.410252571105957
    7. '
' → logprob: -15.535252571105957
    8. '```' → logprob: -16.16025161743164
    9. 'If' → logprob: -16.91025161743164
    10. '	if' → logprob: -17.16025161743164

Token 1198: ' valid' (ID: 4529)
  Prédit: ' valid'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' valid' → logprob: -0.25193095207214355
    2. 'valid' → logprob: -1.5019309520721436
    3. '(valid' → logprob: -13.626931190490723
    4. '	valid' → logprob: -14.876931190490723
    5. '.valid' → logprob: -15.751931190490723
    6. '_valid' → logprob: -16.251930236816406
    7. 'Valid' → logprob: -18.251930236816406
    8. '   ' → logprob: -18.876930236816406
    9. ' valide' → logprob: -20.251930236816406
    10. ' ' → logprob: -20.501930236816406

Token 1199: '_state' (ID: 9479)
  Prédit: '_state'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_state' → logprob: -5.512236498361744e-07
    2. '_valid' → logprob: -15.375000953674316
    3. '(valid' → logprob: -16.75
    4. '_STATE' → logprob: -17.0
    5. '_next' → logprob: -17.25
    6. '_State' → logprob: -17.625
    7. 'State' → logprob: -17.875
    8. 'valid' → logprob: -18.0
    9. 'state' → logprob: -18.0
    10. '_' → logprob: -18.0

Token 1200: '(j' (ID: 4997)
  Prédit: '(j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(j' → logprob: -3.292907877039397e-06
    2. ' (' → logprob: -13.62500286102295
    3. '(' → logprob: -13.75000286102295
    4. 'j' → logprob: -13.87500286102295
    5. '   ' → logprob: -17.625003814697266
    6. '(
' → logprob: -18.250003814697266
    7. '	j' → logprob: -19.000003814697266
    8. ' j' → logprob: -20.125003814697266
    9. '(y' → logprob: -20.375003814697266
    10. '((' → logprob: -20.375003814697266

Token 1201: '_next' (ID: 25436)
  Prédit: 'j'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'j' → logprob: -0.0026264311745762825
    2. '_next' → logprob: -6.502626419067383
    3. 'y' → logprob: -7.127626419067383
    4. '(j' → logprob: -8.502626419067383
    5. '   ' → logprob: -10.252626419067383
    6. ')' → logprob: -11.002626419067383
    7. '_j' → logprob: -11.127626419067383
    8. '       ' → logprob: -11.252626419067383
    9. '[j' → logprob: -11.627626419067383
    10. ' j' → logprob: -11.877626419067383

Token 1202: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0450320839881897
    2. ',j' → logprob: -3.670032024383545
    3. '(j' → logprob: -4.170032024383545
    4. ',y' → logprob: -6.295032024383545
    5. '(y' → logprob: -7.920032024383545
    6. ')' → logprob: -8.420032501220703
    7. ' ,' → logprob: -8.420032501220703
    8. 'j' → logprob: -8.670032501220703
    9. '           ' → logprob: -9.045032501220703
    10. '       ' → logprob: -9.920032501220703

Token 1203: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.001515696058049798
    2. ' y' → logprob: -6.501515865325928
    3. 'j' → logprob: -11.25151538848877
    4. '   ' → logprob: -15.62651538848877
    5. '	y' → logprob: -16.001516342163086
    6. '(y' → logprob: -16.751516342163086
    7. ' ' → logprob: -18.376516342163086
    8. '       ' → logprob: -18.501516342163086
    9. 'yj' → logprob: -18.501516342163086
    10. ''y' → logprob: -19.251516342163086

Token 1204: '_next' (ID: 25436)
  Prédit: '_next'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_next' → logprob: -0.062355171889066696
    2. 'y' → logprob: -2.8123552799224854
    3. ' y' → logprob: -8.187355041503906
    4. 'next' → logprob: -9.562355041503906
    5. ',y' → logprob: -11.687355041503906
    6. 'Next' → logprob: -11.687355041503906
    7. '+' → logprob: -11.812355041503906
    8. '_y' → logprob: -12.312355041503906
    9. '_NEXT' → logprob: -13.062355041503906
    10. ',' → logprob: -13.312355041503906

Token 1205: '):
' (ID: 1883)
  Prédit: '):
'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '):
' → logprob: -0.009942128323018551
    2. '):' → logprob: -4.634942054748535
    3. '       ' → logprob: -8.759942054748535
    4. '):
' → logprob: -11.884942054748535
    5. '   ' → logprob: -12.009942054748535
    6. '           ' → logprob: -12.259942054748535
    7. '):

' → logprob: -12.509942054748535
    8. ')' → logprob: -13.009942054748535
    9. '          ' → logprob: -13.759942054748535
    10. ':
' → logprob: -14.259942054748535

Token 1206: '           ' (ID: 352)
  Prédit: '           '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '           ' → logprob: -0.00011653638648567721
    2. 'dfs' → logprob: -9.375116348266602
    3. ' dfs' → logprob: -11.625116348266602
    4. '       ' → logprob: -11.875116348266602
    5. '          ' → logprob: -12.500116348266602
    6. '               ' → logprob: -12.750116348266602
    7. ' ' → logprob: -12.875116348266602
    8. '	       ' → logprob: -13.375116348266602
    9. '```' → logprob: -13.375116348266602
    10. '		' → logprob: -14.000116348266602

Token 1207: ' dfs' (ID: 51252)
  Prédit: 'dfs'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dfs' (adapté à ' dfs') → logprob: -0.0001085497424355708
    2. ' dfs' → logprob: -9.37510871887207
    3. '   ' → logprob: -11.50010871887207
    4. 'df' → logprob: -11.75010871887207
    5. '       ' → logprob: -12.62510871887207
    6. '           ' → logprob: -13.75010871887207
    7. 'def' → logprob: -14.75010871887207
    8. 'dfa' → logprob: -15.12510871887207
    9. '
' → logprob: -15.62510871887207
    10. ' ' → logprob: -15.75010871887207

Token 1208: '(j' (ID: 4997)
  Prédit: '(j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(j' → logprob: -0.004124111495912075
    2. '(y' → logprob: -5.504124164581299
    3. 'j' → logprob: -10.12912368774414
    4. '(' → logprob: -12.87912368774414
    5. '           ' → logprob: -13.37912368774414
    6. '       ' → logprob: -14.50412368774414
    7. '   ' → logprob: -14.75412368774414
    8. '	j' → logprob: -15.37912368774414
    9. '(
' → logprob: -15.62912368774414
    10. ' (' → logprob: -15.87912368774414

Token 1209: '_next' (ID: 25436)
  Prédit: '_next'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_next' → logprob: -0.00032044618274085224
    2. 'j' → logprob: -8.125320434570312
    3. 'y' → logprob: -11.125320434570312
    4. 'next' → logprob: -12.250320434570312
    5. '(y' → logprob: -13.125320434570312
    6. '(j' → logprob: -13.375320434570312
    7. 'Next' → logprob: -14.125320434570312
    8. '   ' → logprob: -16.125320434570312
    9. '(next' → logprob: -16.250320434570312
    10. '_NEXT' → logprob: -16.250320434570312

Token 1210: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.0018842538120225072
    2. ',j' → logprob: -6.876884460449219
    3. ',y' → logprob: -7.251884460449219
    4. ' ,' → logprob: -9.751884460449219
    5. '       ' → logprob: -10.501884460449219
    6. '   ' → logprob: -10.626884460449219
    7. '           ' → logprob: -11.376884460449219
    8. 'j' → logprob: -11.626884460449219
    9. 'y' → logprob: -12.501884460449219
    10. '_,' → logprob: -13.376884460449219

Token 1211: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.005235291086137295
    2. ' y' → logprob: -5.255235195159912
    3. '           ' → logprob: -14.50523567199707
    4. '   ' → logprob: -14.63023567199707
    5. '	y' → logprob: -15.75523567199707
    6. '       ' → logprob: -16.13023567199707
    7. '     ' → logprob: -16.63023567199707
    8. '    ' → logprob: -16.63023567199707
    9. '         ' → logprob: -16.88023567199707
    10. '          ' → logprob: -17.00523567199707

Token 1212: '_next' (ID: 25436)
  Prédit: '_next'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_next' → logprob: -0.0015122429467737675
    2. 'next' → logprob: -6.501512050628662
    3. 'Next' → logprob: -11.87651252746582
    4. 'y' → logprob: -13.25151252746582
    5. '+' → logprob: -14.25151252746582
    6. '_NEXT' → logprob: -15.12651252746582
    7. ' next' → logprob: -15.50151252746582
    8. ',next' → logprob: -17.00151252746582
    9. 'ext' → logprob: -18.00151252746582
    10. 'NEXT' → logprob: -18.12651252746582

Token 1213: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.00025883622583933175
    2. ' ,' → logprob: -9.000258445739746
    3. '           ' → logprob: -9.250258445739746
    4. ',path' → logprob: -10.625258445739746
    5. '   ' → logprob: -11.875258445739746
    6. '       ' → logprob: -12.375258445739746
    7. '          ' → logprob: -13.625258445739746
    8. '               ' → logprob: -14.250258445739746
    9. ',
' → logprob: -15.000258445739746
    10. '         ' → logprob: -15.125258445739746

Token 1214: ' path' (ID: 3104)
  Prédit: 'path'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'path' → logprob: -0.1812324970960617
    2. ' path' → logprob: -2.431232452392578
    3. 'y' → logprob: -2.806232452392578
    4. ' y' → logprob: -4.056232452392578
    5. '       ' → logprob: -11.181232452392578
    6. '   ' → logprob: -11.306232452392578
    7. '           ' → logprob: -11.431232452392578
    8. 'j' → logprob: -11.681232452392578
    9. '[path' → logprob: -11.931232452392578
    10. '(path' → logprob: -12.056232452392578

Token 1215: ' +' (ID: 659)
  Prédit: ' +'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' +' → logprob: -0.020546091720461845
    2. '+' → logprob: -3.8955461978912354
    3. '+[' → logprob: -13.270545959472656
    4. '   ' → logprob: -13.770545959472656
    5. ' ' → logprob: -14.395545959472656
    6. '    ' → logprob: -15.520545959472656
    7. ')' → logprob: -16.020545959472656
    8. '＋' → logprob: -16.145545959472656
    9. ' +
' → logprob: -16.270545959472656
    10. '  ' → logprob: -16.645545959472656

Token 1216: ' ['' (ID: 5140)
  Prédit: '[y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '[y' → logprob: -0.6036914587020874
    2. '['' → logprob: -0.8536914587020874
    3. '[j' → logprob: -3.603691577911377
    4. '[' → logprob: -9.478691101074219
    5. '   ' → logprob: -10.978691101074219
    6. 'y' → logprob: -10.978691101074219
    7. ' ['' → logprob: -11.353691101074219
    8. '[['' → logprob: -11.603691101074219
    9. ''y' → logprob: -12.228691101074219
    10. '(y' → logprob: -12.853691101074219

Token 1217: 'B' (ID: 33)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -7.696077227592468e-05
    2. 'B' → logprob: -10.500077247619629
    3. ''y' → logprob: -10.500077247619629
    4. ' y' → logprob: -10.750077247619629
    5. '   ' → logprob: -15.875077247619629
    6. ''' → logprob: -16.500076293945312
    7. '['' → logprob: -16.875076293945312
    8. '	y' → logprob: -17.000076293945312
    9. '‘y' → logprob: -18.250076293945312
    10. 'y's' → logprob: -18.500076293945312

Token 1218: '']' (ID: 1089)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0011920140823349357
    2. '')' → logprob: -7.626192092895508
    3. '])' → logprob: -7.751192092895508
    4. ''])' → logprob: -9.001192092895508
    5. '       ' → logprob: -10.251192092895508
    6. '))' → logprob: -10.876192092895508
    7. '})' → logprob: -11.001192092895508
    8. ')
' → logprob: -11.126192092895508
    9. ')])' → logprob: -11.376192092895508
    10. ')]' → logprob: -11.626192092895508

Token 1219: ')


' (ID: 7861)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00012594614236149937
    2. '       ' → logprob: -9.125125885009766
    3. ')
' → logprob: -11.750125885009766
    4. '   ' → logprob: -12.500125885009766
    5. '<|end|>' → logprob: -13.625125885009766
    6. '))' → logprob: -13.875125885009766
    7. ' )' → logprob: -14.000125885009766
    8. ')}' → logprob: -14.375125885009766
    9. '())' → logprob: -15.125125885009766
    10. '```' → logprob: -15.250125885009766

Token 1220: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.023468146100640297
    2. 'return' → logprob: -3.898468255996704
    3. '
' → logprob: -6.523468017578125
    4. '    
' → logprob: -7.148468017578125
    5. '```' → logprob: -8.023468017578125
    6. 'ten' → logprob: -8.773468017578125
    7. ' return' → logprob: -9.523468017578125
    8. 'dfs' → logprob: -10.273468017578125
    9. '	return' → logprob: -10.523468017578125
    10. '  
' → logprob: -11.273468017578125

Token 1221: ' #' (ID: 1069)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.1449543833732605
    2. 'dfs' → logprob: -2.0199544429779053
    3. '
' → logprob: -6.519954204559326
    4. '```' → logprob: -7.894954204559326
    5. '    
' → logprob: -8.019954681396484
    6. 'return' → logprob: -10.019954681396484
    7. ' dfs' → logprob: -10.019954681396484
    8. 'DFS' → logprob: -12.644954681396484
    9. '``' → logprob: -13.019954681396484
    10. 'def' → logprob: -13.019954681396484

Token 1222: ' L' (ID: 451)
  Prédit: 'dfs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dfs' → logprob: -0.00036655968870036304
    2. '   ' → logprob: -8.2503662109375
    3. '#' → logprob: -9.6253662109375
    4. 'return' → logprob: -10.8753662109375
    5. ' dfs' → logprob: -11.7503662109375
    6. '
' → logprob: -12.2503662109375
    7. '    
' → logprob: -12.5003662109375
    8. '```' → logprob: -13.2503662109375
    9. 'df' → logprob: -14.6253662109375
    10. 'DFS' → logprob: -14.8753662109375

Token 1223: 'ancement' (ID: 16092)
  Prédit: 'dfs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dfs' → logprob: -0.7204375267028809
    2. 'a' → logprob: -1.3454375267028809
    3. 'ancer' → logprob: -2.220437526702881
    4. 'ancement' → logprob: -2.845437526702881
    5. 'aunch' → logprob: -3.095437526702881
    6. '#' → logprob: -4.220437526702881
    7. 'ance' → logprob: -4.470437526702881
    8. 'im' → logprob: -5.845437526702881
    9. ' dfs' → logprob: -6.470437526702881
    10. 'e' → logprob: -6.970437526702881

Token 1224: ' recherche' (ID: 24975)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.16845650970935822
    2. 'dfs' → logprob: -1.9184565544128418
    3. '   ' → logprob: -5.418456554412842
    4. 'def' → logprob: -6.293456554412842
    5. '0' → logprob: -6.793456554412842
    6. '(
' → logprob: -7.793456554412842
    7. '```' → logprob: -8.918456077575684
    8. '    
' → logprob: -9.543456077575684
    9. ' (' → logprob: -9.543456077575684
    10. '()' → logprob: -10.793456077575684

Token 1225: '
' (ID: 198)
  Prédit: 'dfs'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'dfs' → logprob: -0.2524908185005188
    2. '(' → logprob: -1.502490758895874
    3. 'def' → logprob: -8.127490997314453
    4. '   ' → logprob: -9.002490997314453
    5. '0' → logprob: -9.377490997314453
    6. '```' → logprob: -10.877490997314453
    7. 'df' → logprob: -11.127490997314453
    8. 'DFS' → logprob: -11.877490997314453
    9. ' (' → logprob: -12.002490997314453
    10. ' dfs' → logprob: -12.002490997314453

Token 1226: '   ' (ID: 271)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.29137811064720154
    2. 'dfs' → logprob: -1.541378140449524
    3. '   ' → logprob: -3.9163780212402344
    4. 'def' → logprob: -4.041378021240234
    5. '```' → logprob: -6.916378021240234
    6. '0' → logprob: -9.666378021240234
    7. '    
' → logprob: -10.541378021240234
    8. 'return' → logprob: -10.666378021240234
    9. ' (' → logprob: -10.916378021240234
    10. ' dfs' → logprob: -11.041378021240234

Token 1227: ' dfs' (ID: 51252)
  Prédit: 'dfs'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'dfs' (adapté à ' dfs') → logprob: -0.0014990295749157667
    2. '   ' → logprob: -6.626499176025391
    3. ' dfs' → logprob: -9.00149917602539
    4. '```' → logprob: -10.37649917602539
    5. '    
' → logprob: -11.37649917602539
    6. 'return' → logprob: -12.87649917602539
    7. '
' → logprob: -13.50149917602539
    8. 'def' → logprob: -13.87649917602539
    9. 'df' → logprob: -14.00149917602539
    10. '``' → logprob: -14.87649917602539

Token 1228: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -9.729906196298543e-06
    2. '0' → logprob: -11.875009536743164
    3. ' (' → logprob: -12.875009536743164
    4. '(
' → logprob: -16.000009536743164
    5. '```' → logprob: -17.625009536743164
    6. '   ' → logprob: -18.000009536743164
    7. 'def' → logprob: -18.125009536743164
    8. '((' → logprob: -18.375009536743164
    9. '
' → logprob: -19.625009536743164
    10. '#' → logprob: -20.000009536743164

Token 1229: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -7.896309739408025e-07
    2. ' ' → logprob: -14.375000953674316
    3. '   ' → logprob: -15.625000953674316
    4. '(' → logprob: -18.0
    5. ')' → logprob: -18.0
    6. '
' → logprob: -18.875
    7. ',' → logprob: -19.25
    8. '```' → logprob: -19.625
    9. '  ' → logprob: -20.25
    10. ' ' → logprob: -20.625

Token 1230: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.000591874762903899
    2. ' ,' → logprob: -7.50059175491333
    3. '<|end|>' → logprob: -10.875592231750488
    4. '   ' → logprob: -11.625592231750488
    5. '‌,' → logprob: -13.000592231750488
    6. ',
' → logprob: -13.250592231750488
    7. ')' → logprob: -13.500592231750488
    8. '<|end|>' → logprob: -13.750592231750488
    9. '0' → logprob: -14.375592231750488
    10. 'def' → logprob: -14.625592231750488

Token 1231: ' ' (ID: 220)
  Prédit: '0'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -5.157039049663581e-05
    2. ' ' → logprob: -9.875051498413086
    3. ',' → logprob: -17.500051498413086
    4. '   ' → logprob: -18.625051498413086
    5. '<|end|>' → logprob: -19.250051498413086
    6. '۰' → logprob: -20.000051498413086
    7. '```' → logprob: -21.000051498413086
    8. '  ' → logprob: -21.000051498413086
    9. ')' → logprob: -22.125051498413086
    10. '
' → logprob: -22.250051498413086

Token 1232: '0' (ID: 15)
  Prédit: '0'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '0' → logprob: -4.320199877838604e-07
    2. ' ' → logprob: -15.0
    3. ',' → logprob: -18.0
    4. '   ' → logprob: -21.25
    5. '```' → logprob: -22.0
    6. '۰' → logprob: -22.5
    7. '  ' → logprob: -23.5
    8. '
' → logprob: -24.0
    9. '０' → logprob: -24.125
    10. ')' → logprob: -24.25

Token 1233: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.001054603373631835
    2. '   ' → logprob: -7.251054763793945
    3. ')' → logprob: -8.376054763793945
    4. ' ,' → logprob: -9.251054763793945
    5. ',
' → logprob: -12.501054763793945
    6. '```' → logprob: -12.501054763793945
    7. '<|end|>' → logprob: -13.626054763793945
    8. '  ' → logprob: -13.626054763793945
    9. '‌,' → logprob: -13.876054763793945
    10. '	' → logprob: -14.001054763793945

Token 1234: ' [])

' (ID: 124233)
  Prédit: '[])'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[])' → logprob: -0.0032340367324650288
    2. '[]' → logprob: -5.753233909606934
    3. ' [])' → logprob: -10.003233909606934
    4. '["' → logprob: -12.253233909606934
    5. '[])
' → logprob: -12.378233909606934
    6. ')' → logprob: -14.128233909606934
    7. '['' → logprob: -14.253233909606934
    8. '[' → logprob: -15.753233909606934
    9. '[]}' → logprob: -15.753233909606934
    10. '[]):' → logprob: -15.878233909606934

Token 1235: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.07906296104192734
    2. 'return' → logprob: -2.5790629386901855
    3. ' return' → logprob: -9.204063415527344
    4. '```' → logprob: -9.579063415527344
    5. '    
' → logprob: -13.954063415527344
    6. '	return' → logprob: -14.079063415527344
    7. '       ' → logprob: -14.579063415527344
    8. '
' → logprob: -14.579063415527344
    9. '  ' → logprob: -15.329063415527344
    10. ' ' → logprob: -15.579063415527344

Token 1236: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.03818470984697342
    2. '   ' → logprob: -3.288184642791748
    3. '```' → logprob: -9.288185119628906
    4. ' return' → logprob: -9.913185119628906
    5. '    
' → logprob: -14.538185119628906
    6. '
' → logprob: -14.913185119628906
    7. '	return' → logprob: -16.163185119628906
    8. '``' → logprob: -16.413185119628906
    9. ' ' → logprob: -17.163185119628906
    10. '{return' → logprob: -17.413185119628906

Token 1237: ' Rés' (ID: 104378)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.0075792972929775715
    2. '   ' → logprob: -5.007579326629639
    3. 'results' → logprob: -7.132579326629639
    4. ' return' → logprob: -9.75757884979248
    5. '```' → logprob: -13.00757884979248
    6. 'result' → logprob: -13.13257884979248
    7. '#' → logprob: -13.38257884979248
    8. 'for' → logprob: -15.00757884979248
    9. 'returns' → logprob: -15.25757884979248
    10. '
' → logprob: -16.007579803466797

Token 1238: 'ult' (ID: 576)
  Prédit: 'ult'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ult' → logprob: -0.13942717015743256
    2. 'ultat' → logprob: -2.1394271850585938
    3. 'ults' → logprob: -4.389427185058594
    4. '   ' → logprob: -12.139427185058594
    5. 'ul' → logprob: -12.889427185058594
    6. 'return' → logprob: -13.639427185058594
    7. 'utat' → logprob: -13.889427185058594
    8. 'ut' → logprob: -14.014427185058594
    9. 'umé' → logprob: -14.139427185058594
    10. 'ulat' → logprob: -14.389427185058594

Token 1239: 'ats' (ID: 1838)
  Prédit: 'ats'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ats' → logprob: -0.005923704709857702
    2. 'at' → logprob: -5.380923748016357
    3. 'results' → logprob: -8.0059232711792
    4. '   ' → logprob: -8.2559232711792
    5. 'és' → logprob: -8.3809232711792
    6. 's' → logprob: -8.6309232711792
    7. 'es' → logprob: -9.1309232711792
    8. '#' → logprob: -9.5059232711792
    9. '_results' → logprob: -11.0059232711792
    10. '[' → logprob: -11.5059232711792

Token 1240: ' tri' (ID: 12665)
  Prédit: '.sort'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.sort' → logprob: -0.009149940684437752
    2. 'return' → logprob: -4.88415002822876
    3. '   ' → logprob: -6.75915002822876
    4. 'sort' → logprob: -8.259149551391602
    5. '
' → logprob: -10.509149551391602
    6. 'sorted' → logprob: -10.509149551391602
    7. ' return' → logprob: -11.259149551391602
    8. '.reverse' → logprob: -11.384149551391602
    9. '[::-' → logprob: -11.509149551391602
    10. '=' → logprob: -11.759149551391602

Token 1241: 'és' (ID: 1756)
  Prédit: 'sorted'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'sorted' → logprob: -0.7003292441368103
    2. 'results' → logprob: -1.450329303741455
    3. 'és' → logprob: -1.825329303741455
    4. 's' → logprob: -2.700329303741455
    5. 'sort' → logprob: -4.325329303741455
    6. '=' → logprob: -4.950329303741455
    7. '   ' → logprob: -5.325329303741455
    8. 'ed' → logprob: -5.700329303741455
    9. '(results' → logprob: -6.200329303741455
    10. ' =' → logprob: -6.700329303741455

Token 1242: ' (' (ID: 350)
  Prédit: '.sort'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '.sort' → logprob: -0.3923953175544739
    2. '   ' → logprob: -1.392395257949829
    3. 'results' → logprob: -3.142395257949829
    4. 'return' → logprob: -3.517395257949829
    5. '
' → logprob: -6.517395496368408
    6. 'sort' → logprob: -7.767395496368408
    7. '(results' → logprob: -7.767395496368408
    8. 'sorted' → logprob: -8.14239501953125
    9. '    
' → logprob: -8.39239501953125
    10. '=' → logprob: -8.89239501953125

Token 1243: 'la' (ID: 1675)
  Prédit: 'sorted'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'sorted' → logprob: -0.6569799780845642
    2. 'results' → logprob: -1.156980037689209
    3. ')' → logprob: -2.406980037689209
    4. ')
' → logprob: -2.906980037689209
    5. '   ' → logprob: -4.406980037689209
    6. 'sort' → logprob: -5.156980037689209
    7. 'reverse' → logprob: -6.781980037689209
    8. 'return' → logprob: -6.906980037689209
    9. 'key' → logprob: -7.406980037689209
    10. '    
' → logprob: -8.15697956085205

Token 1244: ' recherche' (ID: 24975)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.8183274269104004
    2. 'sort' → logprob: -1.3183274269104004
    3. 'results' → logprob: -1.8183274269104004
    4. ' return' → logprob: -2.8183274269104004
    5. 'sorted' → logprob: -3.1933274269104004
    6. ' results' → logprob: -5.0683274269104
    7. ' sorted' → logprob: -5.3183274269104
    8. ' sort' → logprob: -5.5683274269104
    9. '.sort' → logprob: -5.8183274269104
    10. 'rés' → logprob: -5.9433274269104

Token 1245: ' suit' (ID: 15170)
  Prédit: ' est'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ' est' → logprob: -0.4007590413093567
    2. 'est' → logprob: -1.400758981704712
    3. ' a' → logprob: -4.025759220123291
    4. 's' → logprob: -4.275759220123291
    5. 'a' → logprob: -4.650759220123291
    6. ' s' → logprob: -4.775759220123291
    7. 'se' → logprob: -5.150759220123291
    8. ' se' → logprob: -5.650759220123291
    9. ' étant' → logprob: -5.650759220123291
    10. ' already' → logprob: -5.775759220123291

Token 1246: ' déjà' (ID: 21229)
  Prédit: '[]'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '[]' → logprob: -1.1360526084899902
    2. 'sorted' → logprob: -1.3860526084899902
    3. 'lex' → logprob: -1.8860526084899902
    4. '   ' → logprob: -2.8860526084899902
    5. ' lex' → logprob: -3.5110526084899902
    6. '['' → logprob: -3.7610526084899902
    7. '#' → logprob: -4.01105260848999
    8. 'le' → logprob: -4.13605260848999
    9. 'A' → logprob: -4.13605260848999
    10. ' ' → logprob: -4.51105260848999

Token 1247: ' l' (ID: 305)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.06298218667507172
    2. ' l' → logprob: -2.9379820823669434
    3. 'lex' → logprob: -4.937982082366943
    4. ' lex' → logprob: -7.937982082366943
    5. 'le' → logprob: -8.437982559204102
    6. 'la' → logprob: -8.562982559204102
    7. 'ordre' → logprob: -9.437982559204102
    8. 'un' → logprob: -11.687982559204102
    9. 'lé' → logprob: -11.937982559204102
    10. '	l' → logprob: -12.062982559204102

Token 1248: ''ordre' (ID: 124753)
  Prédit: ''ordre'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ''ordre' → logprob: -0.07842786610126495
    2. 'ordre' → logprob: -2.703427791595459
    3. 'lex' → logprob: -5.578427791595459
    4. '’ordre' → logprob: -5.828427791595459
    5. 'ex' → logprob: -7.703427791595459
    6. 'e' → logprob: -7.953427791595459
    7. ''' → logprob: -8.078428268432617
    8. 'order' → logprob: -8.953428268432617
    9. ' ordre' → logprob: -8.953428268432617
    10. ' lex' → logprob: -9.703428268432617

Token 1249: ' lex' (ID: 37772)
  Prédit: 'lex'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'lex' → logprob: -0.7600048184394836
    2. ' lex' → logprob: -0.7600048184394836
    3. 'alph' → logprob: -2.885004758834839
    4. 'nature' → logprob: -6.010004997253418
    5. ' alph' → logprob: -6.260004997253418
    6. ' naturelle' → logprob: -6.260004997253418
    7. 'alphabet' → logprob: -7.010004997253418
    8. 'natur' → logprob: -7.635004997253418
    9. ' naturel' → logprob: -8.135004997253418
    10. '   ' → logprob: -9.010004997253418

Token 1250: ' du' (ID: 1462)
  Prédit: 'ic'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'ic' → logprob: -0.0017826409311965108
    2. 'ico' → logprob: -6.876782417297363
    3. 'ique' → logprob: -8.001782417297363
    4. 'ographique' → logprob: -8.501782417297363
    5. 'icale' → logprob: -9.251782417297363
    6. 'i' → logprob: -9.876782417297363
    7. 'igraph' → logprob: -11.251782417297363
    8. 'ical' → logprob: -12.001782417297363
    9. '_' → logprob: -12.126782417297363
    10. ')' → logprob: -12.251782417297363

Token 1251: ' fait' (ID: 7473)
  Prédit: 'path'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'path' → logprob: -0.6078428030014038
    2. 'che' → logprob: -1.7328428030014038
    3. 'code' → logprob: -1.9828428030014038
    4. 'par' → logprob: -2.3578429222106934
    5. 'alphabet' → logprob: -4.232842922210693
    6. 'a' → logprob: -4.857842922210693
    7. 'lex' → logprob: -5.482842922210693
    8. ' parcours' → logprob: -5.982842922210693
    9. 'A' → logprob: -6.357842922210693
    10. 'd' → logprob: -6.482842922210693

Token 1252: ' de' (ID: 334)
  Prédit: ' de'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' de' → logprob: -0.9363633990287781
    2. '   ' → logprob: -1.3113634586334229
    3. ' que' → logprob: -1.8113634586334229
    4. 'de' → logprob: -2.436363458633423
    5. ' du' → logprob: -4.061363220214844
    6. 'que' → logprob: -4.186363220214844
    7. ' qu' → logprob: -4.186363220214844
    8. 'qu' → logprob: -4.186363220214844
    9. 'd' → logprob: -4.686363220214844
    10. '       ' → logprob: -5.436363220214844

Token 1253: ' dfs' (ID: 51252)
  Prédit: 'l'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'l' → logprob: -0.013811679556965828
    2. 'la' → logprob: -4.5138115882873535
    3. 'A' → logprob: -6.6388115882873535
    4. 'expl' → logprob: -7.7638115882873535
    5. ' l' → logprob: -7.8888115882873535
    6. 'dfs' → logprob: -7.8888115882873535
    7. 'par' → logprob: -9.388812065124512
    8. 'cho' → logprob: -10.388812065124512
    9. 'DFS' → logprob: -10.388812065124512
    10. 'appel' → logprob: -10.763812065124512

Token 1254: '(A' (ID: 10706)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.3496961295604706
    2. ')
' → logprob: -1.224696159362793
    3. ')

' → logprob: -7.724696159362793
    4. '   ' → logprob: -8.849696159362793
    5. '),' → logprob: -9.099696159362793
    6. '.sort' → logprob: -9.474696159362793
    7. ',' → logprob: -9.599696159362793
    8. 'return' → logprob: -9.599696159362793
    9. ').' → logprob: -10.099696159362793
    10. 'results' → logprob: -10.224696159362793

Token 1255: ' puis' (ID: 18766)
  Prédit: ','
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -0.11258607357740402
    2. ')' → logprob: -3.48758602142334
    3. '),' → logprob: -3.86258602142334
    4. '+' → logprob: -4.98758602142334
    5. ''' → logprob: -4.98758602142334
    6. 'pp' → logprob: -5.11258602142334
    7. ')+' → logprob: -5.11258602142334
    8. '))' → logprob: -5.11258602142334
    9. ' ,' → logprob: -5.11258602142334
    10. ' puis' → logprob: -5.23758602142334

Token 1256: ' B' (ID: 418)
  Prédit: 'B'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'B' → logprob: -0.0005548207554966211
    2. ' B' → logprob: -7.500555038452148
    3. '   ' → logprob: -13.500555038452148
    4. ' ' → logprob: -15.000555038452148
    5. ' ' → logprob: -17.12555503845215
    6. ''' → logprob: -17.25055503845215
    7. '_B' → logprob: -17.37555503845215
    8. ')' → logprob: -18.37555503845215
    9. '  ' → logprob: -18.50055503845215
    10. '	B' → logprob: -18.87555503845215

Token 1257: '))
' (ID: 2210)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.11300939321517944
    2. '))' → logprob: -2.238009452819824
    3. '))
' → logprob: -9.363009452819824
    4. ')")' → logprob: -10.113009452819824
    5. ')))' → logprob: -10.613009452819824
    6. ')
' → logprob: -11.988009452819824
    7. '   ' → logprob: -12.488009452819824
    8. ')),' → logprob: -12.613009452819824
    9. ')).' → logprob: -12.738009452819824
    10. ').' → logprob: -12.988009452819824

Token 1258: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.038422878831624985
    2. 'return' → logprob: -3.2884228229522705
    3. '```' → logprob: -8.413422584533691
    4. '    
' → logprob: -9.663422584533691
    5. '
' → logprob: -9.788422584533691
    6. ' return' → logprob: -10.413422584533691
    7. '	return' → logprob: -12.163422584533691
    8. '  
' → logprob: -13.663422584533691
    9. ':return' → logprob: -13.663422584533691
    10. '       ' → logprob: -14.663422584533691

Token 1259: ' results' (ID: 4376)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.001987163443118334
    2. '   ' → logprob: -6.251986980438232
    3. ' return' → logprob: -9.75198745727539
    4. '	return' → logprob: -15.87698745727539
    5. '
' → logprob: -16.00198745727539
    6. '```' → logprob: -16.37698745727539
    7. ' ' → logprob: -17.50198745727539
    8. '    
' → logprob: -18.00198745727539
    9. '  ' → logprob: -18.25198745727539
    10. '       ' → logprob: -18.37698745727539

Token 1260: '.sort' (ID: 19551)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 1261: '()

' (ID: 5874)
  Prédit: '   '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.8783559203147888
    2. '
' → logprob: -1.2533559799194336
    3. '<|end|>' → logprob: -1.3783559799194336
    4. 'return' → logprob: -3.7533559799194336
    5. '    
' → logprob: -4.503355979919434
    6. '  
' → logprob: -5.878355979919434
    7. '<|end|>' → logprob: -5.878355979919434
    8. '```' → logprob: -6.128355979919434
    9. '[
' → logprob: -7.003355979919434
    10. '[' → logprob: -7.003355979919434

Token 1262: '   ' (ID: 271)
  Prédit: '   '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '   ' → logprob: -0.007263366132974625
    2. 'return' → logprob: -5.13226318359375
    3. '```' → logprob: -6.63226318359375
    4. ' return' → logprob: -11.50726318359375
    5. '{return' → logprob: -13.63226318359375
    6. '``' → logprob: -13.75726318359375
    7. ':return' → logprob: -14.25726318359375
    8. '    
' → logprob: -14.50726318359375
    9. '[' → logprob: -14.63226318359375
    10. '@return' → logprob: -14.75726318359375

Token 1263: ' #' (ID: 1069)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.2571792006492615
    2. '   ' → logprob: -1.5071792602539062
    3. '```' → logprob: -5.257179260253906
    4. ' return' → logprob: -10.757179260253906
    5. '
' → logprob: -13.507179260253906
    6. '``' → logprob: -13.757179260253906
    7. '`' → logprob: -14.132179260253906
    8. '    
' → logprob: -14.257179260253906
    9. '{return' → logprob: -14.757179260253906
    10. '	return' → logprob: -15.632179260253906

Token 1264: ' Aff' (ID: 13741)
  Prédit: 'return'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'return' → logprob: -0.0034427845384925604
    2. '   ' → logprob: -5.878442764282227
    3. 'for' → logprob: -7.503442764282227
    4. ' return' → logprob: -9.378442764282227
    5. '#' → logprob: -14.628442764282227
    6. '```' → logprob: -15.003442764282227
    7. 'ret' → logprob: -15.128442764282227
    8. '	return' → logprob: -15.253442764282227
    9. '       ' → logprob: -15.878442764282227
    10. 'if' → logprob: -15.878442764282227

Token 1265: 'ichage' (ID: 118475)
  Prédit: 'icher'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'icher' → logprob: -0.0021939214784651995
    2. 'ichage' → logprob: -6.752193927764893
    3. 'iche' → logprob: -7.002193927764893
    4. '#' → logprob: -9.752193450927734
    5. 'ich' → logprob: -10.627193450927734
    6. 'ichier' → logprob: -11.252193450927734
    7. '   ' → logprob: -12.127193450927734
    8. 'ic' → logprob: -13.377193450927734
    9. '```' → logprob: -13.377193450927734
    10. '\' → logprob: -13.502193450927734

Token 1266: '
' (ID: 198)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.5819928050041199
    2. '   ' → logprob: -0.8319928050041199
    3. '```' → logprob: -5.2069926261901855
    4. ' for' → logprob: -7.8319926261901855
    5. '
' → logprob: -8.956993103027344
    6. '``' → logprob: -11.331993103027344
    7. '()
' → logprob: -12.456993103027344
    8. '(' → logprob: -12.456993103027344
    9. '    
' → logprob: -12.581993103027344
    10. 'def' → logprob: -12.956993103027344

Token 1267: '   ' (ID: 271)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' → logprob: -0.033442817628383636
    2. '   ' → logprob: -4.283442974090576
    3. '(results' → logprob: -4.783442974090576
    4. '```' → logprob: -5.533442974090576
    5. 'return' → logprob: -6.533442974090576
    6. '(' → logprob: -6.533442974090576
    7. '(
' → logprob: -6.658442974090576
    8. 'print' → logprob: -6.658442974090576
    9. 'def' → logprob: -8.283442497253418
    10. ' for' → logprob: -8.408442497253418

Token 1268: ' for' (ID: 395)
  Prédit: 'for'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'for' (adapté à ' for') → logprob: -0.0005868718726560473
    2. 'return' → logprob: -7.750586986541748
    3. ' for' → logprob: -9.00058650970459
    4. '```' → logprob: -10.75058650970459
    5. '   ' → logprob: -11.50058650970459
    6. 'print' → logprob: -13.75058650970459
    7. '``' → logprob: -16.125587463378906
    8. ' return' → logprob: -16.875587463378906
    9. 'if' → logprob: -17.250587463378906
    10. '	for' → logprob: -17.500587463378906

Token 1269: ' res' (ID: 694)
  Prédit: 'seq'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'seq' → logprob: -0.14604966342449188
    2. ' seq' → logprob: -2.396049737930298
    3. 'sequence' → logprob: -4.021049499511719
    4. 'res' → logprob: -4.396049499511719
    5. ' sequence' → logprob: -4.646049499511719
    6. ' res' → logprob: -5.521049499511719
    7. 'r' → logprob: -7.771049499511719
    8. 'path' → logprob: -8.271049499511719
    9. 's' → logprob: -9.021049499511719
    10. ' path' → logprob: -9.896049499511719

Token 1270: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.12718689441680908
    2. 'in' → logprob: -2.1271867752075195
    3. ' ' → logprob: -9.75218677520752
    4. 'e' → logprob: -10.12718677520752
    5. 'ine' → logprob: -10.37718677520752
    6. 'print' → logprob: -10.62718677520752
    7. '   ' → logprob: -10.87718677520752
    8. 'en' → logprob: -11.50218677520752
    9. 'inue' → logprob: -12.00218677520752
    10. 'iné' → logprob: -12.00218677520752

Token 1271: ' results' (ID: 4376)
  Prédit: 'results'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'results' → logprob: -0.001705771079286933
    2. ' results' → logprob: -6.376705646514893
    3. 'result' → logprob: -13.50170612335205
    4. '(results' → logprob: -13.75170612335205
    5. 'print' → logprob: -14.37670612335205
    6. 'res' → logprob: -14.87670612335205
    7. '	results' → logprob: -16.001705169677734
    8. 'range' → logprob: -17.126705169677734
    9. '   ' → logprob: -17.626705169677734
    10. '.results' → logprob: -17.876705169677734

Token 1272: ':
' (ID: 734)
  Prédit: '       '
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.39768680930137634
    2. ':' → logprob: -1.7726868391036987
    3. ':
' → logprob: -2.397686719894409
    4. '():
' → logprob: -3.022686719894409
    5. '   ' → logprob: -4.147686958312988
    6. '():' → logprob: -6.772686958312988
    7. '()' → logprob: -7.772686958312988
    8. ' :' → logprob: -8.397686958312988
    9. ' :
' → logprob: -8.397686958312988
    10. '):
' → logprob: -8.522686958312988

Token 1273: '       ' (ID: 309)
  Prédit: '       '
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '       ' → logprob: -0.11582636833190918
    2. '   ' → logprob: -2.240826368331909
    3. ' print' → logprob: -6.365826606750488
    4. '```' → logprob: -7.240826606750488
    5. 'print' → logprob: -7.490826606750488
    6. '	print' → logprob: -12.865826606750488
    7. '``' → logprob: -14.365826606750488
    8. '`' → logprob: -14.615826606750488
    9. '
' → logprob: -15.490826606750488
    10. '#print' → logprob: -15.865826606750488

Token 1274: ' print' (ID: 2123)
  Prédit: 'print'
  Correct (stricte): False
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' (adapté à ' print') → logprob: -6.511406809295295e-06
    2. ' print' → logprob: -12.000006675720215
    3. '```' → logprob: -15.250006675720215
    4. '   ' → logprob: -17.2500057220459
    5. '
' → logprob: -20.2500057220459
    6. '	print' → logprob: -20.3750057220459
    7. 'pr' → logprob: -21.1250057220459
    8. 'prin' → logprob: -21.8750057220459
    9. '``' → logprob: -22.2500057220459
    10. 'for' → logprob: -23.0000057220459

Token 1275: '(res' (ID: 8331)
  Prédit: '(res'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(res' → logprob: -0.3868716359138489
    2. 'res' → logprob: -1.136871576309204
    3. ' res' → logprob: -14.386871337890625
    4. '(' → logprob: -17.136871337890625
    5. '$res' → logprob: -17.886871337890625
    6. '	res' → logprob: -19.136871337890625
    7. ',res' → logprob: -21.886871337890625
    8. '(f' → logprob: -21.886871337890625
    9. '_res' → logprob: -22.136871337890625
    10. '=res' → logprob: -22.261871337890625

Token 1276: ')


' (ID: 7861)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -2.1008713702030946e-06
    2. '())' → logprob: -13.625001907348633
    3. ')
' → logprob: -14.625001907348633
    4. '()' → logprob: -15.750001907348633
    5. '<|end|>' → logprob: -16.000001907348633
    6. '")' → logprob: -16.625001907348633
    7. ')}' → logprob: -17.125001907348633
    8. ' )' → logprob: -17.375001907348633
    9. '')' → logprob: -18.000001907348633
    10. '   ' → logprob: -18.125001907348633

Token 1277: '#' (ID: 2)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 1278: ' ---' (ID: 26691)
  Prédit: '#'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '#' → logprob: -0.4204595685005188
    2. '<|end|>' → logprob: -1.420459508895874
    3. '```' → logprob: -2.295459508895874
    4. '<|end|>' → logprob: -7.170459747314453
    5. '``' → logprob: -9.795459747314453
    6. 'def' → logprob: -10.795459747314453
    7. '[' → logprob: -11.295459747314453
    8. ')' → logprob: -11.670459747314453
    9. '
' → logprob: -11.670459747314453
    10. '...' → logprob: -12.170459747314453

Token 1279: ' Lecture' (ID: 106534)
  Prédit: ''
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False

Token 1280: ' des' (ID: 731)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.8407608270645142
    2. 'import' → logprob: -1.2157608270645142
    3. 'score' → logprob: -2.0907607078552246
    4. 'def' → logprob: -2.8407607078552246
    5. '#' → logprob: -4.215760707855225
    6. 'scores' → logprob: -4.215760707855225
    7. '()' → logprob: -4.340760707855225
    8. '(n' → logprob: -4.340760707855225
    9. 'input' → logprob: -5.215760707855225
    10. '
' → logprob: -5.715760707855225

Token 1281: ' données' (ID: 30580)
  Prédit: 'entrée'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'entrée' → logprob: -1.4178471565246582
    2. 'import' → logprob: -1.5428471565246582
    3. 'l' → logprob: -1.7928471565246582
    4. 'input' → logprob: -2.792847156524658
    5. 'd' → logprob: -2.792847156524658
    6. 'inputs' → logprob: -3.167847156524658
    7. 'stdin' → logprob: -3.167847156524658
    8. '```' → logprob: -3.292847156524658
    9. 'entr' → logprob: -3.417847156524658
    10. 'don' → logprob: -3.542847156524658

Token 1282: ' ---
' (ID: 128468)
  Prédit: '```'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '```' → logprob: -0.7001230120658875
    2. 'score' → logprob: -1.3251230716705322
    3. 'n' → logprob: -1.5751230716705322
    4. 'j' → logprob: -4.325122833251953
    5. '``' → logprob: -5.450122833251953
    6. '(n' → logprob: -5.825122833251953
    7. 'line' → logprob: -5.950122833251953
    8. '(score' → logprob: -6.200122833251953
    9. '#' → logprob: -6.950122833251953
    10. 'scores' → logprob: -7.200122833251953

Token 1283: 'j' (ID: 73)
  Prédit: 'n'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'n' → logprob: -0.08609719574451447
    2. 'j' → logprob: -3.211097240447998
    3. 'score' → logprob: -3.211097240447998
    4. 'import' → logprob: -6.836097240447998
    5. '```' → logprob: -7.961097240447998
    6. 'num' → logprob: -9.08609676361084
    7. 'scores' → logprob: -9.71109676361084
    8. 'nb' → logprob: -9.83609676361084
    9. 'input' → logprob: -9.96109676361084
    10. 'line' → logprob: -10.08609676361084

Token 1284: ',' (ID: 11)
  Prédit: '_target'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_target' → logprob: -0.15055739879608154
    2. ',' → logprob: -2.400557518005371
    3. '_' → logprob: -3.775557518005371
    4. '_,' → logprob: -4.150557518005371
    5. ',_' → logprob: -4.900557518005371
    6. ',target' → logprob: -7.150557518005371
    7. '_input' → logprob: -7.275557518005371
    8. ',j' → logprob: -7.775557518005371
    9. '_s' → logprob: -8.025557518005371
    10. ' ,' → logprob: -8.775557518005371

Token 1285: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -0.0485873706638813
    2. ' y' → logprob: -3.0485873222351074
    3. '	y' → logprob: -18.173587799072266
    4. ',y' → logprob: -19.298587799072266
    5. ' ' → logprob: -19.673587799072266
    6. ' ' → logprob: -19.673587799072266
    7. '_y' → logprob: -19.798587799072266
    8. ''y' → logprob: -20.548587799072266
    9. 'Y' → logprob: -21.173587799072266
    10. '<|end|>' → logprob: -21.548587799072266

Token 1286: ' =' (ID: 314)
  Prédit: '='
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '=' → logprob: -0.001712901284918189
    2. ' =' → logprob: -6.376712799072266
    3. '=input' → logprob: -11.876712799072266
    4. '=int' → logprob: -13.251712799072266
    5. ',' → logprob: -14.251712799072266
    6. '=list' → logprob: -14.251712799072266
    7. '=j' → logprob: -14.501712799072266
    8. ',j' → logprob: -16.251712799072266
    9. '=line' → logprob: -16.751712799072266
    10. '＝' → logprob: -17.376712799072266

Token 1287: ' map' (ID: 4014)
  Prédit: 'map'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'map' → logprob: -0.002480412134900689
    2. ' map' → logprob: -6.002480506896973
    3. 'list' → logprob: -12.752480506896973
    4. '[' → logprob: -13.502480506896973
    5. '(map' → logprob: -15.877480506896973
    6. '5' → logprob: -16.252479553222656
    7. '	map' → logprob: -16.252479553222656
    8. '6' → logprob: -16.627479553222656
    9. '0' → logprob: -17.002479553222656
    10. ' ' → logprob: -17.752479553222656

Token 1288: '(int' (ID: 2742)
  Prédit: '(int'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(int' → logprob: -0.001178439473733306
    2. 'int' → logprob: -6.75117826461792
    3. '[int' → logprob: -12.626178741455078
    4. '=int' → logprob: -13.626178741455078
    5. '(input' → logprob: -13.626178741455078
    6. '<int' → logprob: -13.876178741455078
    7. '(' → logprob: -14.126178741455078
    8. 'input' → logprob: -14.626178741455078
    9. '(str' → logprob: -15.751178741455078
    10. ' int' → logprob: -15.876178741455078

Token 1289: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.22584573924541473
    2. 'input' → logprob: -1.9758456945419312
    3. ',input' → logprob: -2.8508458137512207
    4. '=input' → logprob: -5.725845813751221
    5. ' input' → logprob: -6.225845813751221
    6. ',' → logprob: -8.225845336914062
    7. '(' → logprob: -9.850845336914062
    8. '	input' → logprob: -10.100845336914062
    9. '[input' → logprob: -10.225845336914062
    10. '<input' → logprob: -10.475845336914062

Token 1290: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -3.547789674485102e-05
    2. ' input' → logprob: -10.250035285949707
    3. '=input' → logprob: -18.500036239624023
    4. '<input' → logprob: -18.750036239624023
    5. '_input' → logprob: -19.500036239624023
    6. ',input' → logprob: -19.500036239624023
    7. 'open' → logprob: -19.750036239624023
    8. '(input' → logprob: -20.000036239624023
    9. '	input' → logprob: -20.500036239624023
    10. ' ' → logprob: -22.000036239624023

Token 1291: '().' (ID: 1454)
  Prédit: '().'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '().' → logprob: -0.0014739143662154675
    2. '()' → logprob: -6.626473903656006
    3. '())' → logprob: -8.876474380493164
    4. '()[' → logprob: -12.876474380493164
    5. ' ().' → logprob: -13.501474380493164
    6. '()>' → logprob: -13.501474380493164
    7. '()
' → logprob: -14.251474380493164
    8. '());' → logprob: -14.751474380493164
    9. '()]' → logprob: -15.126474380493164
    10. '().__' → logprob: -15.376474380493164

Token 1292: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00010509284038562328
    2. '(split' → logprob: -10.000104904174805
    3. 'strip' → logprob: -10.375104904174805
    4. '().' → logprob: -10.875104904174805
    5. ' split' → logprob: -12.875104904174805
    6. 'spl' → logprob: -13.125104904174805
    7. 'rstrip' → logprob: -13.125104904174805
    8. '()' → logprob: -13.750104904174805
    9. '_split' → logprob: -14.625104904174805
    10. 'plit' → logprob: -14.750104904174805

Token 1293: '())

' (ID: 27654)
  Prédit: '())'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '())' → logprob: -0.0025797015987336636
    2. ')' → logprob: -6.252579689025879
    3. '()' → logprob: -7.377579689025879
    4. '(' → logprob: -10.877579689025879
    5. '(','' → logprob: -13.127579689025879
    6. '())
' → logprob: -13.252579689025879
    7. ' ())' → logprob: -13.752579689025879
    8. '('' → logprob: -14.252579689025879
    9. '(),' → logprob: -14.877579689025879
    10. '()))' → logprob: -15.002579689025879

Token 1294: 'ten' (ID: 1305)
  Prédit: 'ten'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'ten' → logprob: -2.5941604690160602e-05
    2. 'if' → logprob: -10.625025749206543
    3. '```' → logprob: -13.500025749206543
    4. '#' → logprob: -16.12502670288086
    5. '
' → logprob: -16.50002670288086
    6. ' tennis' → logprob: -17.25002670288086
    7. '``' → logprob: -18.00002670288086
    8. 'print' → logprob: -18.12502670288086
    9. 'te' → logprob: -19.62502670288086
    10. '  
' → logprob: -19.87502670288086

Token 1295: 'nis' (ID: 12113)
  Prédit: 'nis'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'nis' → logprob: -7.896309739408025e-07
    2. '_' → logprob: -15.750000953674316
    3. 'n' → logprob: -15.750000953674316
    4. 'is' → logprob: -15.750000953674316
    5. 'nist' → logprob: -16.75
    6. '
' → logprob: -16.75
    7. '__' → logprob: -17.125
    8. '``' → logprob: -17.625
    9. 'pis' → logprob: -17.875
    10. '```' → logprob: -17.875

Token 1296: '_paths' (ID: 56992)
  Prédit: '_paths'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '_paths' → logprob: 0.0
    2. '_path' → logprob: -19.25
    3. '_points' → logprob: -20.375
    4. ' _' → logprob: -20.375
    5. '```' → logprob: -21.375
    6. '_patterns' → logprob: -21.625
    7. '\' → logprob: -21.875
    8. 'paths' → logprob: -22.0
    9. '_
' → logprob: -22.375
    10. '_' → logprob: -22.375

Token 1297: '(j' (ID: 4997)
  Prédit: '(j'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(j' → logprob: -0.008629591204226017
    2. '(' → logprob: -4.75862979888916
    3. '(
' → logprob: -11.50862979888916
    4. ' (' → logprob: -12.38362979888916
    5. '((' → logprob: -15.00862979888916
    6. '(

' → logprob: -16.133628845214844
    7. ' ' → logprob: -16.883628845214844
    8. '(J' → logprob: -17.133628845214844
    9. '('' → logprob: -17.383628845214844
    10. '   ' → logprob: -17.383628845214844

Token 1298: ',' (ID: 11)
  Prédit: ','
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ',' → logprob: -5.455048449221067e-05
    2. ',y' → logprob: -10.250054359436035
    3. ' ,' → logprob: -10.875054359436035
    4. ',
' → logprob: -16.12505531311035
    5. ',j' → logprob: -16.87505531311035
    6. '‌,' → logprob: -17.12505531311035
    7. ')' → logprob: -17.87505531311035
    8. ',user' → logprob: -18.12505531311035
    9. '_,' → logprob: -18.75005531311035
    10. ',Y' → logprob: -18.87505531311035

Token 1299: ' y' (ID: 342)
  Prédit: 'y'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'y' → logprob: -2.339278580620885e-06
    2. ' y' → logprob: -13.000001907348633
    3. '	y' → logprob: -21.375001907348633
    4. '   ' → logprob: -21.875001907348633
    5. ')y' → logprob: -22.875001907348633
    6. 'y's' → logprob: -23.375001907348633
    7. ''y' → logprob: -23.750001907348633
    8. '    ' → logprob: -23.875001907348633
    9. '(y' → logprob: -24.000001907348633
    10. '  ' → logprob: -24.875001907348633

Token 1300: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.7432603272027336e-06
    2. '())' → logprob: -13.625001907348633
    3. '))' → logprob: -15.375001907348633
    4. ' )' → logprob: -15.625001907348633
    5. ')
' → logprob: -16.500001907348633
    6. ')`' → logprob: -17.625001907348633
    7. '()' → logprob: -18.625001907348633
    8. ')}' → logprob: -19.250001907348633
    9. '})' → logprob: -19.875001907348633
    10. '）' → logprob: -20.000001907348633


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 1298
Tokens correctement prédits (1ère position, stricte): 417
Tokens correctement prédits (1ère position, avec adaptation): 433
Tokens correctement prédits (top 10): 888
Précision stricte (1ère position): 32.13%
Précision adaptée (1ère position): 33.36%
Précision (top 10): 68.41%
================================================================================
