================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 17:08:01
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
t = sum(int(input()) for _ in range(4))
print(t // 60)
print(t % 60)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 't' (ID: 83)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' sum' (ID: 4215)
  → Token d'amorce (pas de prédiction)

Token 3: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.00012725738633889705
    2. '(t' → logprob: -9.875126838684082
    3. ' (' → logprob: -10.375126838684082
    4. ')' → logprob: -11.625126838684082
    5. '[' → logprob: -11.875126838684082
    6. '(
' → logprob: -12.375126838684082
    7. '```' → logprob: -12.625126838684082
    8. '((' → logprob: -13.000126838684082
    9. '(a' → logprob: -13.250126838684082
    10. '(lambda' → logprob: -13.250126838684082

Token 4: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.022668780758976936
    2. '(x' → logprob: -4.272668838500977
    3. '(i' → logprob: -6.022668838500977
    4. '(a' → logprob: -6.147668838500977
    5. '(s' → logprob: -6.772668838500977
    6. '('' → logprob: -6.772668838500977
    7. '(ch' → logprob: -7.772668838500977
    8. '(c' → logprob: -8.022668838500977
    9. '(char' → logprob: -8.272668838500977
    10. '(token' → logprob: -9.022668838500977

Token 5: '())' (ID: 3516)
  Prédit: '())'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())' → logprob: -0.2930355370044708
    2. '(' → logprob: -2.5430355072021484
    3. '()))' → logprob: -2.6680355072021484
    4. '('' → logprob: -2.7930355072021484
    5. '()' → logprob: -3.4180355072021484
    6. ')' → logprob: -5.043035507202148
    7. '))' → logprob: -5.918035507202148
    8. '(()' → logprob: -6.418035507202148
    9. '("("' → logprob: -8.668035507202148
    10. '("' → logprob: -8.793035507202148

Token 6: ' for' (ID: 395)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.002697054762393236
    2. '))' → logprob: -6.002696990966797
    3. '')' → logprob: -9.877696990966797
    4. '`)' → logprob: -9.877696990966797
    5. '())' → logprob: -10.002696990966797
    6. 'for' → logprob: -11.127696990966797
    7. ' )' → logprob: -11.252696990966797
    8. ')`' → logprob: -11.502696990966797
    9. '")' → logprob: -11.627696990966797
    10. ')))' → logprob: -12.252696990966797

Token 7: ' _' (ID: 1175)
  Prédit: ' i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' i' → logprob: -1.1149253845214844
    2. ' range' → logprob: -1.6149253845214844
    3. ' _' → logprob: -1.6149253845214844
    4. ' ' → logprob: -1.7399253845214844
    5. '_' → logprob: -2.3649253845214844
    6. 'range' → logprob: -6.614925384521484
    7. ' t' → logprob: -6.989925384521484
    8. ' x' → logprob: -7.239925384521484
    9. ' s' → logprob: -8.239925384521484
    10. '  ' → logprob: -8.364925384521484

Token 8: ' in' (ID: 306)
  Prédit: ' in'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' in' → logprob: -0.026372993364930153
    2. 'in' → logprob: -3.6513729095458984
    3. ' ' → logprob: -10.401372909545898
    4. '_' → logprob: -10.651372909545898
    5. 'range' → logprob: -11.901372909545898
    6. '<|end|>' → logprob: -12.151372909545898
    7. ' range' → logprob: -13.526372909545898
    8. 'import' → logprob: -13.651372909545898
    9. '_in' → logprob: -14.276372909545898
    10. ')' → logprob: -14.276372909545898

Token 9: ' range' (ID: 3352)
  Prédit: ' range'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ' range' → logprob: -0.2519322335720062
    2. 'range' → logprob: -1.5019322633743286
    3. '	range' → logprob: -14.001932144165039
    4. ' xrange' → logprob: -14.251932144165039
    5. ' ' → logprob: -14.876932144165039
    6. '(range' → logprob: -14.876932144165039
    7. '_range' → logprob: -15.251932144165039
    8. '_' → logprob: -15.626932144165039
    9. '[' → logprob: -16.12693214416504
    10. ' ran' → logprob: -17.00193214416504

Token 10: '(' (ID: 7)
  Prédit: '('
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -1.5332478142227046e-05
    2. '(len' → logprob: -11.875015258789062
    3. ' (' → logprob: -12.125015258789062
    4. '(n' → logprob: -13.500015258789062
    5. ')' → logprob: -14.000015258789062
    6. '(
' → logprob: -15.375015258789062
    7. '(int' → logprob: -16.500015258789062
    8. '```' → logprob: -16.500015258789062
    9. '((' → logprob: -16.750015258789062
    10. '10' → logprob: -16.750015258789062

Token 11: '4' (ID: 19)
  Prédit: '10'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '10' → logprob: -0.5755836963653564
    2. '5' → logprob: -1.2005836963653564
    3. '3' → logprob: -2.2005836963653564
    4. '7' → logprob: -4.075583457946777
    5. '6' → logprob: -5.950583457946777
    6. '1' → logprob: -6.450583457946777
    7. 't' → logprob: -6.700583457946777
    8. '4' → logprob: -6.700583457946777
    9. 'int' → logprob: -6.950583457946777
    10. '9' → logprob: -7.950583457946777

Token 12: '))
' (ID: 2210)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.20144276320934296
    2. '))' → logprob: -1.7014427185058594
    3. ')t' → logprob: -11.20144271850586
    4. ')))' → logprob: -11.57644271850586
    5. ' )' → logprob: -12.82644271850586
    6. ' ))' → logprob: -14.32644271850586
    7. '),' → logprob: -14.32644271850586
    8. ')
' → logprob: -14.82644271850586
    9. '`)' → logprob: -15.45144271850586
    10. ')`' → logprob: -15.82644271850586

Token 13: 'print' (ID: 1598)
  Prédit: '%'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '%' → logprob: -0.0886128842830658
    2. '>' → logprob: -3.5886127948760986
    3. ')' → logprob: -3.8386127948760986
    4. '+' → logprob: -4.463613033294678
    5. ' ' → logprob: -5.213613033294678
    6. '*' → logprob: -5.338613033294678
    7. '#' → logprob: -6.088613033294678
    8. '%
' → logprob: -6.338613033294678
    9. ' %' → logprob: -6.463613033294678
    10. '
' → logprob: -6.713613033294678

Token 14: '(t' (ID: 2025)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.004246150609105825
    2. '(t' → logprob: -5.504246234893799
    3. '('' → logprob: -9.37924575805664
    4. '("("' → logprob: -9.50424575805664
    5. '()' → logprob: -12.87924575805664
    6. '(f' → logprob: -13.62924575805664
    7. '((' → logprob: -13.62924575805664
    8. '(sum' → logprob: -14.25424575805664
    9. '(len' → logprob: -14.62924575805664
    10. '(
' → logprob: -14.62924575805664

Token 15: ' //' (ID: 602)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00012630375567823648
    2. '))' → logprob: -9.000125885009766
    3. ' )' → logprob: -13.625125885009766
    4. '`)' → logprob: -13.625125885009766
    5. ')`' → logprob: -15.625125885009766
    6. '')' → logprob: -15.875125885009766
    7. ')))' → logprob: -16.250125885009766
    8. ')t' → logprob: -17.000125885009766
    9. '()' → logprob: -17.500125885009766
    10. '")' → logprob: -18.000125885009766

Token 16: ' ' (ID: 220)
  Prédit: '4'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '4' → logprob: -0.037425488233566284
    2. ' ' → logprob: -3.5374255180358887
    3. '2' → logprob: -4.912425518035889
    4. '10' → logprob: -9.03742504119873
    5. '3' → logprob: -9.41242504119873
    6. '5' → logprob: -9.53742504119873
    7. '7' → logprob: -12.28742504119873
    8. '1' → logprob: -12.41242504119873
    9. '100' → logprob: -13.03742504119873
    10. '6' → logprob: -13.28742504119873

Token 17: '60' (ID: 1910)
  Prédit: '4'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '4' → logprob: -0.001302022603340447
    2. '2' → logprob: -6.751302242279053
    3. ' ' → logprob: -9.501301765441895
    4. '3' → logprob: -10.126301765441895
    5. '5' → logprob: -11.626301765441895
    6. '10' → logprob: -12.376301765441895
    7. '7' → logprob: -13.751301765441895
    8. '1' → logprob: -14.251301765441895
    9. '100' → logprob: -14.751301765441895
    10. '6' → logprob: -15.001301765441895

Token 18: ')
' (ID: 446)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -1.9027791495318525e-05
    2. ' )' → logprob: -11.625019073486328
    3. '`)' → logprob: -11.875019073486328
    4. '))' → logprob: -13.750019073486328
    5. ')
' → logprob: -14.750019073486328
    6. ')`' → logprob: -14.750019073486328
    7. '')' → logprob: -14.875019073486328
    8. '*' → logprob: -14.875019073486328
    9. ')t' → logprob: -15.875019073486328
    10. '```' → logprob: -16.250019073486328

Token 19: 'print' (ID: 1598)
  Prédit: 'print'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'print' → logprob: -0.3628648817539215
    2. '\n' → logprob: -1.3628648519515991
    3. '```' → logprob: -3.9878649711608887
    4. '
' → logprob: -4.362864971160889
    5. '``' → logprob: -5.612864971160889
    6. ''\' → logprob: -5.862864971160889
    7. '"\' → logprob: -5.987864971160889
    8. '' → logprob: -6.237864971160889
    9. '`
' → logprob: -6.487864971160889
    10. '\' → logprob: -7.112864971160889

Token 20: '(t' (ID: 2025)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.38700607419013977
    2. '(t' → logprob: -1.1370060443878174
    3. '((' → logprob: -9.012005805969238
    4. '('' → logprob: -12.137005805969238
    5. '()' → logprob: -12.762005805969238
    6. '("("' → logprob: -13.262005805969238
    7. '(
' → logprob: -13.512005805969238
    8. 't' → logprob: -14.512005805969238
    9. '(

' → logprob: -15.262005805969238
    10. '(f' → logprob: -15.637005805969238

Token 21: ' %' (ID: 1851)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.4074394404888153
    2. '%' → logprob: -1.4074394702911377
    3. ' %' → logprob: -2.6574394702911377
    4. ' //' → logprob: -4.032439231872559
    5. ' ' → logprob: -7.407439231872559
    6. '//' → logprob: -7.407439231872559
    7. ' )' → logprob: -7.657439231872559
    8. '`' → logprob: -9.157439231872559
    9. '))' → logprob: -9.782439231872559
    10. '```' → logprob: -10.157439231872559

Token 22: ' ' (ID: 220)
  Prédit: '60'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '60' → logprob: -0.0015087933279573917
    2. ' ' → logprob: -6.501508712768555
    3. '6' → logprob: -12.001508712768555
    4. ')' → logprob: -16.751508712768555
    5. ' ' → logprob: -16.751508712768555
    6. '61' → logprob: -16.751508712768555
    7. '30' → logprob: -17.626508712768555
    8. '600' → logprob: -18.001508712768555
    9. '59' → logprob: -18.376508712768555
    10. '90' → logprob: -18.501508712768555

Token 23: '60' (ID: 1910)
  Prédit: '60'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '60' → logprob: -5.438573680294212e-06
    2. '6' → logprob: -12.500005722045898
    3. ' ' → logprob: -13.375005722045898
    4. '```' → logprob: -18.5000057220459
    5. ')' → logprob: -19.0000057220459
    6. '61' → logprob: -19.1250057220459
    7. '`' → logprob: -19.2500057220459
    8. '600' → logprob: -19.8750057220459
    9. '30' → logprob: -19.8750057220459
    10. '59' → logprob: -20.1250057220459

Token 24: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -3.666993507067673e-05
    2. '))' → logprob: -10.250036239624023
    3. ' )' → logprob: -14.625036239624023
    4. '`)' → logprob: -14.625036239624023
    5. '')' → logprob: -16.125036239624023
    6. ')`' → logprob: -16.750036239624023
    7. ')))' → logprob: -17.250036239624023
    8. '()' → logprob: -17.375036239624023
    9. '())' → logprob: -17.500036239624023
    10. ')
' → logprob: -18.000036239624023


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 22
Tokens correctement prédits (1ère position, stricte): 7
Tokens correctement prédits (1ère position, avec adaptation): 7
Tokens correctement prédits (top 10): 15
Précision stricte (1ère position): 31.82%
Précision adaptée (1ère position): 31.82%
Précision (top 10): 68.18%
================================================================================
