================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 16:57:56
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
W = int(input())
print(W * 32)
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'W' (ID: 54)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.002817835658788681
    2. ''' → logprob: -6.752817630767822
    3. 'W' → logprob: -6.877817630767822
    4. '(W' → logprob: -8.62781810760498
    5. '('' → logprob: -9.00281810760498
    6. '```' → logprob: -9.25281810760498
    7. '[' → logprob: -10.00281810760498
    8. ')' → logprob: -10.00281810760498
    9. '`' → logprob: -10.25281810760498
    10. '(
' → logprob: -10.75281810760498

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0297030508518219
    2. ')' → logprob: -3.904703140258789
    3. '()' → logprob: -4.904703140258789
    4. '(
' → logprob: -7.404703140258789
    5. '())' → logprob: -8.154703140258789
    6. ''' → logprob: -9.279703140258789
    7. '```' → logprob: -9.279703140258789
    8. '('' → logprob: -9.404703140258789
    9. '("("' → logprob: -9.654703140258789
    10. '(W' → logprob: -9.654703140258789

Token 5: 'print' (ID: 1598)
  Prédit: 'if'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'if' → logprob: -0.7099682688713074
    2. '*' → logprob: -1.0849683284759521
    3. 'for' → logprob: -3.334968328475952
    4. '+' → logprob: -3.334968328475952
    5. 'n' → logprob: -4.209968090057373
    6. 'x' → logprob: -4.209968090057373
    7. 'S' → logprob: -4.584968090057373
    8. 's' → logprob: -4.959968090057373
    9. 'a' → logprob: -5.084968090057373
    10. 'i' → logprob: -5.084968090057373

Token 6: '(W' (ID: 26031)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.009218339808285236
    2. '('' → logprob: -5.134218215942383
    3. '(W' → logprob: -5.759218215942383
    4. '("("' → logprob: -9.634218215942383
    5. '()' → logprob: -10.384218215942383
    6. '("' → logprob: -10.759218215942383
    7. '("")' → logprob: -12.759218215942383
    8. '((' → logprob: -12.884218215942383
    9. '(`' → logprob: -13.134218215942383
    10. '("""' → logprob: -13.634218215942383

Token 7: ' *' (ID: 425)
  Prédit: ')'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. ')' → logprob: -0.0006813380168750882
    2. '))' → logprob: -7.750681400299072
    3. '*' → logprob: -9.375680923461914
    4. '+' → logprob: -9.500680923461914
    5. '')' → logprob: -10.750680923461914
    6. ',' → logprob: -11.125680923461914
    7. '`)' → logprob: -11.125680923461914
    8. ' )' → logprob: -11.125680923461914
    9. '>' → logprob: -12.375680923461914
    10. '")' → logprob: -12.500680923461914

Token 8: ' ' (ID: 220)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '2' → logprob: -0.3640134036540985
    2. ' ' → logprob: -1.614013433456421
    3. ''' → logprob: -3.614013433456421
    4. '"' → logprob: -3.989013433456421
    5. '3' → logprob: -4.489013195037842
    6. '1' → logprob: -4.614013195037842
    7. '4' → logprob: -4.989013195037842
    8. '5' → logprob: -5.239013195037842
    9. '10' → logprob: -5.364013195037842
    10. '7' → logprob: -5.489013195037842

Token 9: '32' (ID: 1398)
  Prédit: '2'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '2' → logprob: -0.07079486548900604
    2. '5' → logprob: -3.3207948207855225
    3. '7' → logprob: -4.695795059204102
    4. '3' → logprob: -5.195795059204102
    5. '4' → logprob: -5.570795059204102
    6. ' ' → logprob: -5.570795059204102
    7. '10' → logprob: -6.070795059204102
    8. ''' → logprob: -6.195795059204102
    9. '1' → logprob: -6.695795059204102
    10. '"' → logprob: -6.820795059204102

Token 10: ')' (ID: 8)
  Prédit: ')'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. ')' → logprob: -0.00019781860464718193
    2. '*' → logprob: -9.250197410583496
    3. '`)' → logprob: -9.875197410583496
    4. '))' → logprob: -10.625197410583496
    5. '*)' → logprob: -11.250197410583496
    6. '')' → logprob: -12.500197410583496
    7. ' )' → logprob: -12.625197410583496
    8. ')`' → logprob: -13.000197410583496
    9. ')
' → logprob: -14.000197410583496
    10. '```' → logprob: -14.250197410583496


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 8
Tokens correctement prédits (1ère position, stricte): 1
Tokens correctement prédits (1ère position, avec adaptation): 1
Tokens correctement prédits (top 10): 3
Précision stricte (1ère position): 12.50%
Précision adaptée (1ère position): 12.50%
Précision (top 10): 37.50%
================================================================================
