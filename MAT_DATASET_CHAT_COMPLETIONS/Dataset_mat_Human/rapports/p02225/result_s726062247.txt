================================================================================
ANALYSE DE PRÉDICTION TOKEN PAR TOKEN (BATCH API)
Date: 2025-06-04 20:14:21
Modèle de tokenisation: gpt-4o-mini
================================================================================

SCRIPT ANALYSÉ:
--------------------------------------------------------------------------------
n = int(input())
print(sum(map(int, input().split())))
--------------------------------------------------------------------------------

RÉSULTATS D'ANALYSE TOKEN PAR TOKEN:
--------------------------------------------------------------------------------
Token 0: 'n' (ID: 77)
  → Token d'amorce (pas de prédiction)

Token 1: ' =' (ID: 314)
  → Token d'amorce (pas de prédiction)

Token 2: ' int' (ID: 677)
  → Token d'amorce (pas de prédiction)

Token 3: '(input' (ID: 10054)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0004278083215467632
    2. ''' → logprob: -8.625428199768066
    3. '('' → logprob: -9.375428199768066
    4. '(n' → logprob: -9.875428199768066
    5. '```' → logprob: -10.375428199768066
    6. '`' → logprob: -10.750428199768066
    7. '("("' → logprob: -11.125428199768066
    8. '(
' → logprob: -11.125428199768066
    9. ')' → logprob: -11.750428199768066
    10. '()' → logprob: -12.250428199768066

Token 4: '())
' (ID: 4574)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.03585807606577873
    2. ')' → logprob: -3.660858154296875
    3. '()' → logprob: -4.785858154296875
    4. '(
' → logprob: -7.910858154296875
    5. '())' → logprob: -8.035858154296875
    6. ''' → logprob: -9.660858154296875
    7. '('' → logprob: -9.785858154296875
    8. '```' → logprob: -9.785858154296875
    9. '(

' → logprob: -10.035858154296875
    10. '(()' → logprob: -10.285858154296875

Token 5: 'print' (ID: 1598)
  Prédit: 'i'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. 'i' → logprob: -0.7043724656105042
    2. 'if' → logprob: -1.4543724060058594
    3. 'for' → logprob: -2.3293724060058594
    4. 's' → logprob: -2.4543724060058594
    5. 'f' → logprob: -4.329372406005859
    6. ' ' → logprob: -4.454372406005859
    7. 'x' → logprob: -4.829372406005859
    8. ')' → logprob: -4.954372406005859
    9. 'a' → logprob: -4.954372406005859
    10. ''' → logprob: -5.079372406005859

Token 6: '(sum' (ID: 45528)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0005205047782510519
    2. '('' → logprob: -7.750520706176758
    3. '("("' → logprob: -9.375520706176758
    4. '()' → logprob: -13.250520706176758
    5. '(n' → logprob: -14.000520706176758
    6. '(
' → logprob: -14.250520706176758
    7. '("""' → logprob: -15.000520706176758
    8. '("")' → logprob: -15.125520706176758
    9. '(`' → logprob: -15.250520706176758
    10. '(

' → logprob: -15.500520706176758

Token 7: '(map' (ID: 16946)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: False
  Alternatives (top logprobs):
    1. '(' → logprob: -0.0008432185277342796
    2. '(n' → logprob: -7.875843048095703
    3. '(range' → logprob: -8.250843048095703
    4. '()' → logprob: -9.375843048095703
    5. ')' → logprob: -10.500843048095703
    6. '(
' → logprob: -10.875843048095703
    7. '((' → logprob: -11.000843048095703
    8. '(sum' → logprob: -11.250843048095703
    9. '(

' → logprob: -11.875843048095703
    10. '(int' → logprob: -12.250843048095703

Token 8: '(int' (ID: 2742)
  Prédit: '('
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(' → logprob: -0.6720232367515564
    2. '(int' → logprob: -0.9220232367515564
    3. '(lambda' → logprob: -2.422023296356201
    4. '(str' → logprob: -6.172023296356201
    5. '(list' → logprob: -8.547022819519043
    6. '(abs' → logprob: -8.672022819519043
    7. 'int' → logprob: -9.672022819519043
    8. '(eval' → logprob: -10.047022819519043
    9. '(len' → logprob: -10.047022819519043
    10. '(ord' → logprob: -10.172022819519043

Token 9: ',' (ID: 11)
  Prédit: '(input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '(input' → logprob: -0.023154402151703835
    2. '(' → logprob: -4.023154258728027
    3. ',input' → logprob: -5.523154258728027
    4. ',' → logprob: -7.273154258728027
    5. '))' → logprob: -9.398154258728027
    6. 'input' → logprob: -9.648154258728027
    7. ')' → logprob: -10.023154258728027
    8. ' (' → logprob: -10.648154258728027
    9. ' input' → logprob: -11.773154258728027
    10. '(range' → logprob: -11.898154258728027

Token 10: ' input' (ID: 3422)
  Prédit: 'input'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'input' → logprob: -0.009458555839955807
    2. ' input' → logprob: -4.884458541870117
    3. '(input' → logprob: -6.384458541870117
    4. ',input' → logprob: -9.134458541870117
    5. 'list' → logprob: -11.009458541870117
    6. '(' → logprob: -11.259458541870117
    7. 'range' → logprob: -11.884458541870117
    8. ')' → logprob: -12.384458541870117
    9. '=input' → logprob: -12.509458541870117
    10. '[input' → logprob: -13.134458541870117

Token 11: '().' (ID: 1454)
  Prédit: '()))'
  Correct (stricte): False
  Correct (adapté): False
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '()))' → logprob: -1.026145339012146
    2. '().' → logprob: -1.276145339012146
    3. '()' → logprob: -1.526145339012146
    4. '())))' → logprob: -2.2761454582214355
    5. '(' → logprob: -3.7761454582214355
    6. '())' → logprob: -4.4011454582214355
    7. '()));' → logprob: -6.0261454582214355
    8. ')))' → logprob: -6.1511454582214355
    9. '))' → logprob: -6.9011454582214355
    10. '('' → logprob: -8.151144981384277

Token 12: 'split' (ID: 13627)
  Prédit: 'split'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. 'split' → logprob: -0.00418085278943181
    2. 'strip' → logprob: -5.504180908203125
    3. 'rstrip' → logprob: -9.504180908203125
    4. ' split' → logprob: -10.504180908203125
    5. '(split' → logprob: -15.504180908203125
    6. ' strip' → logprob: -15.879180908203125
    7. 'spl' → logprob: -16.629180908203125
    8. 'read' → logprob: -16.754180908203125
    9. ')' → logprob: -17.004180908203125
    10. ' ' → logprob: -17.254180908203125

Token 13: '())))' (ID: 168342)
  Prédit: '())))'
  Correct (stricte): True
  Correct (adapté): True
  Dans le top 10: True
  Alternatives (top logprobs):
    1. '())))' → logprob: -0.6119698882102966
    2. '())' → logprob: -1.7369699478149414
    3. ')))' → logprob: -2.1119699478149414
    4. '()))' → logprob: -2.8619699478149414
    5. '()' → logprob: -3.2369699478149414
    6. '(' → logprob: -3.4869699478149414
    7. ')' → logprob: -4.111969947814941
    8. '('' → logprob: -4.236969947814941
    9. '')))' → logprob: -7.111969947814941
    10. '))' → logprob: -7.236969947814941


RÉSUMÉ:
--------------------------------------------------------------------------------
Total des tokens analysés: 11
Tokens correctement prédits (1ère position, stricte): 2
Tokens correctement prédits (1ère position, avec adaptation): 2
Tokens correctement prédits (top 10): 6
Précision stricte (1ère position): 18.18%
Précision adaptée (1ère position): 18.18%
Précision (top 10): 54.55%
================================================================================
